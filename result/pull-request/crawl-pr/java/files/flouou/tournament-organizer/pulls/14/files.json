[
  {
    "sha": "f7361240e508a4a1fd6502037355f1833e6e7037",
    "filename": "src/main/java/com/bindschaedel/controller/util/GlobalExceptionHandler.java",
    "status": "removed",
    "additions": 0,
    "deletions": 42,
    "changes": 42,
    "blob_url": "https://github.com/flouou/tournament-organizer/blob/08f76e3f08507ec0614168c5b9619a8528f1eca1/src/main/java/com/bindschaedel/controller/util/GlobalExceptionHandler.java",
    "raw_url": "https://github.com/flouou/tournament-organizer/raw/08f76e3f08507ec0614168c5b9619a8528f1eca1/src/main/java/com/bindschaedel/controller/util/GlobalExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/flouou/tournament-organizer/contents/src/main/java/com/bindschaedel/controller/util/GlobalExceptionHandler.java?ref=08f76e3f08507ec0614168c5b9619a8528f1eca1",
    "patch": "@@ -1,42 +0,0 @@\n-package com.bindschaedel.controller.util;\n-\n-import org.springframework.http.HttpStatus;\n-import org.springframework.transaction.TransactionSystemException;\n-import org.springframework.web.bind.annotation.ExceptionHandler;\n-import org.springframework.web.bind.annotation.ResponseStatus;\n-import org.springframework.web.bind.annotation.RestControllerAdvice;\n-\n-import javax.validation.ConstraintViolationException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-@RestControllerAdvice(basePackages = { \"com.bindschaedel.controller\" })\n-public class GlobalExceptionHandler {\n-\n-    @ResponseStatus(HttpStatus.BAD_REQUEST)\n-    @ExceptionHandler(TransactionSystemException.class)\n-    public Map<String,String> handleValidationExceptions(TransactionSystemException ex) {\n-        Map<String,String> errors = new HashMap<>();\n-        if (ex.getOriginalException() != null &&\n-            ex.getOriginalException().getCause() != null &&\n-            ex.getOriginalException().getCause() instanceof ConstraintViolationException) {\n-            ((ConstraintViolationException) ex.getOriginalException().getCause()).getConstraintViolations().forEach((error) -> {\n-                String fieldName = error.getPropertyPath().toString();\n-                String errorMessage = error.getMessage();\n-                errors.put(fieldName, errorMessage);\n-            });\n-        }\n-        else {\n-            errors.put(\"error\", ex.getLocalizedMessage());\n-        }\n-        return errors;\n-    }\n-\n-    @ResponseStatus(HttpStatus.BAD_REQUEST)\n-    @ExceptionHandler(NumberFormatException.class)\n-    public Map<String,String> handleValidationExceptions(NumberFormatException ex) {\n-        Map<String,String> errors = new HashMap<>();\n-        errors.put(\"error\", ex.getMessage());\n-        return errors;\n-    }\n-}"
  },
  {
    "sha": "ffc705ffa5c315e90e13f7268f8e364096b8d847",
    "filename": "src/main/java/com/bindschaedel/controller/util/exception/ErrorEncoder.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/flouou/tournament-organizer/blob/cb18c2d67a316809243056abd7cd032904b43e9e/src/main/java/com/bindschaedel/controller/util/exception/ErrorEncoder.java",
    "raw_url": "https://github.com/flouou/tournament-organizer/raw/cb18c2d67a316809243056abd7cd032904b43e9e/src/main/java/com/bindschaedel/controller/util/exception/ErrorEncoder.java",
    "contents_url": "https://api.github.com/repos/flouou/tournament-organizer/contents/src/main/java/com/bindschaedel/controller/util/exception/ErrorEncoder.java?ref=cb18c2d67a316809243056abd7cd032904b43e9e",
    "patch": "@@ -0,0 +1,35 @@\n+package com.bindschaedel.controller.util.exception;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.TransactionSystemException;\n+\n+import javax.validation.ConstraintViolationException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Service\n+public class ErrorEncoder {\n+\n+    protected Map<String, String> encode(TransactionSystemException ex) {\n+        Map<String,String> errors = new HashMap<>();\n+        if (ex.getOriginalException() != null &&\n+                ex.getOriginalException().getCause() != null &&\n+                ex.getOriginalException().getCause() instanceof ConstraintViolationException) {\n+            ((ConstraintViolationException) ex.getOriginalException().getCause()).getConstraintViolations().forEach((error) -> {\n+                String fieldName = error.getPropertyPath().toString();\n+                String errorMessage = error.getMessage();\n+                errors.put(fieldName, errorMessage);\n+            });\n+        }\n+        else {\n+            errors.put(\"error\", ex.getLocalizedMessage());\n+        }\n+        return errors;\n+    }\n+\n+    protected Map<String, String> encode(NumberFormatException ex) {\n+        Map<String,String> errors = new HashMap<>();\n+        errors.put(\"error\", ex.getMessage());\n+        return errors;\n+    }\n+}"
  },
  {
    "sha": "31fb60f1c50fb3ca930fc3f50d63740a728b090a",
    "filename": "src/main/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandler.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/flouou/tournament-organizer/blob/cb18c2d67a316809243056abd7cd032904b43e9e/src/main/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandler.java",
    "raw_url": "https://github.com/flouou/tournament-organizer/raw/cb18c2d67a316809243056abd7cd032904b43e9e/src/main/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/flouou/tournament-organizer/contents/src/main/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandler.java?ref=cb18c2d67a316809243056abd7cd032904b43e9e",
    "patch": "@@ -0,0 +1,31 @@\n+package com.bindschaedel.controller.util.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.transaction.TransactionSystemException;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestControllerAdvice;\n+\n+import java.util.Map;\n+\n+@RestControllerAdvice(basePackages = { \"com.bindschaedel.controller\" })\n+public class GlobalExceptionHandler {\n+\n+    private final ErrorEncoder errorEncoder;\n+\n+    public GlobalExceptionHandler(ErrorEncoder errorEncoder) {\n+        this.errorEncoder = errorEncoder;\n+    }\n+\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    @ExceptionHandler(TransactionSystemException.class)\n+    public Map<String,String> handleValidationExceptions(TransactionSystemException ex) {\n+        return errorEncoder.encode(ex);\n+    }\n+\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    @ExceptionHandler(NumberFormatException.class)\n+    public Map<String,String> handleValidationExceptions(NumberFormatException ex) {\n+        return errorEncoder.encode(ex);\n+    }\n+}"
  },
  {
    "sha": "837f00f78e1d8a07fbb1ca395f21885565b78e44",
    "filename": "src/test/java/com/bindschaedel/controller/util/GlobalExceptionHandlerTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/flouou/tournament-organizer/blob/08f76e3f08507ec0614168c5b9619a8528f1eca1/src/test/java/com/bindschaedel/controller/util/GlobalExceptionHandlerTest.java",
    "raw_url": "https://github.com/flouou/tournament-organizer/raw/08f76e3f08507ec0614168c5b9619a8528f1eca1/src/test/java/com/bindschaedel/controller/util/GlobalExceptionHandlerTest.java",
    "contents_url": "https://api.github.com/repos/flouou/tournament-organizer/contents/src/test/java/com/bindschaedel/controller/util/GlobalExceptionHandlerTest.java?ref=08f76e3f08507ec0614168c5b9619a8528f1eca1",
    "patch": "@@ -1,45 +0,0 @@\n-package com.bindschaedel.controller.util;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-\n-import org.mockito.junit.MockitoJUnitRunner;\n-import org.springframework.test.web.servlet.MockMvc;\n-import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n-import org.springframework.transaction.TransactionSystemException;\n-\n-import static org.mockito.Mockito.when;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class GlobalExceptionHandlerTest {\n-    private MockMvc mockMvc;\n-\n-    @Mock\n-    private MockController mockController;\n-\n-    @Before\n-    public void setup() {\n-        this.mockMvc = MockMvcBuilders\n-                .standaloneSetup(mockController)\n-                .setControllerAdvice(new GlobalExceptionHandler())\n-                .build();\n-    }\n-\n-    @Test\n-    public void transactionSystemExceptionsReturnBadRequestCode() throws Exception {\n-        when(mockController.dummy()).thenThrow(new TransactionSystemException(\"msg\"));\n-\n-        mockMvc.perform(get(\"/dummy\")).andExpect(status().isBadRequest());\n-    }\n-\n-    @Test\n-    public void numberFormatExceptionReturnBadRequestCode() throws Exception {\n-        when(mockController.dummy()).thenThrow(new NumberFormatException(\"msg\"));\n-\n-        mockMvc.perform(get(\"/dummy\")).andExpect(status().isBadRequest());\n-    }\n-}"
  },
  {
    "sha": "aa28ddae13e70cd2e086eff12c5c3222bd338c00",
    "filename": "src/test/java/com/bindschaedel/controller/util/exception/ErrorEncoderTest.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/flouou/tournament-organizer/blob/cb18c2d67a316809243056abd7cd032904b43e9e/src/test/java/com/bindschaedel/controller/util/exception/ErrorEncoderTest.java",
    "raw_url": "https://github.com/flouou/tournament-organizer/raw/cb18c2d67a316809243056abd7cd032904b43e9e/src/test/java/com/bindschaedel/controller/util/exception/ErrorEncoderTest.java",
    "contents_url": "https://api.github.com/repos/flouou/tournament-organizer/contents/src/test/java/com/bindschaedel/controller/util/exception/ErrorEncoderTest.java?ref=cb18c2d67a316809243056abd7cd032904b43e9e",
    "patch": "@@ -0,0 +1,93 @@\n+package com.bindschaedel.controller.util.exception;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.transaction.TransactionSystemException;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Path;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ErrorEncoderTest {\n+\n+    private static final String MESSAGE = \"msg\";\n+    private static final String ERROR_MESSAGE = \"err\";\n+    private static final String PROPERTY_PATH_1 = \"path1\";\n+    private static final String PROPERTY_PATH_2 = \"path2\";\n+\n+    private final ErrorEncoder errorEncoder = new ErrorEncoder();\n+\n+    @Mock\n+    private TransactionSystemException transactionSystemExceptionMock;\n+\n+    @Mock\n+    private NumberFormatException numberFormatException;\n+\n+    @Test\n+    public void encodeTransactionSystemExceptionDerivedFromConstraintViolation() {\n+        Map<String, String> expected = new HashMap<>();\n+        expected.put(PROPERTY_PATH_1, ERROR_MESSAGE);\n+        expected.put(PROPERTY_PATH_2, ERROR_MESSAGE);\n+        Set<ConstraintViolation<?>> constraintViolations = new HashSet<>();\n+        ConstraintViolation<?> cv1 = mockCv(PROPERTY_PATH_1);\n+        ConstraintViolation<?> cv2 = mockCv(PROPERTY_PATH_2);\n+        constraintViolations.add(cv1);\n+        constraintViolations.add(cv2);\n+        ConstraintViolationException cve = new ConstraintViolationException(constraintViolations);\n+        when(transactionSystemExceptionMock.getOriginalException()).thenReturn(new Exception(cve));\n+\n+        assertEncoding(expected, transactionSystemExceptionMock);\n+    }\n+\n+    @Test\n+    public void encodeTransactionSystemExceptionNotDerivedFromConstraintViolation() {\n+        Map<String, String> expected = defaultErrorMap();\n+        when(transactionSystemExceptionMock.getLocalizedMessage()).thenReturn(MESSAGE);\n+        when(transactionSystemExceptionMock.getOriginalException()).thenReturn(null);\n+\n+        assertEncoding(expected, transactionSystemExceptionMock);\n+\n+        when(transactionSystemExceptionMock.getOriginalException()).thenReturn(new Exception());\n+\n+        assertEncoding(expected, transactionSystemExceptionMock);\n+    }\n+\n+    @Test\n+    public void encodeNumberFormatException() {\n+        when(numberFormatException.getMessage()).thenReturn(MESSAGE);\n+\n+        assertThat(errorEncoder.encode(numberFormatException)).isEqualTo(defaultErrorMap());\n+    }\n+\n+    private void assertEncoding(Map<String, String> expected, TransactionSystemException ex) {\n+        Map<String, String> encodedEx = errorEncoder.encode(ex);\n+        assertThat(encodedEx).isEqualTo(expected);\n+    }\n+\n+    private static ConstraintViolation<?> mockCv(String propertyPath) {\n+        Path pathMock = mock(Path.class);\n+        when(pathMock.toString()).thenReturn(propertyPath);\n+\n+        ConstraintViolation<?> mock = mock(ConstraintViolation.class);\n+        when(mock.getPropertyPath()).thenReturn(pathMock);\n+        when(mock.getMessage()).thenReturn(ERROR_MESSAGE);\n+        return mock;\n+    }\n+\n+    private static Map<String, String> defaultErrorMap() {\n+        Map<String, String> m = new HashMap<>();\n+        m.put(\"error\", MESSAGE);\n+        return m;\n+    }\n+}"
  },
  {
    "sha": "25ec1a40c9cefd40505e64f0afcc70fe54271087",
    "filename": "src/test/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandlerTest.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/flouou/tournament-organizer/blob/cb18c2d67a316809243056abd7cd032904b43e9e/src/test/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandlerTest.java",
    "raw_url": "https://github.com/flouou/tournament-organizer/raw/cb18c2d67a316809243056abd7cd032904b43e9e/src/test/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandlerTest.java",
    "contents_url": "https://api.github.com/repos/flouou/tournament-organizer/contents/src/test/java/com/bindschaedel/controller/util/exception/GlobalExceptionHandlerTest.java?ref=cb18c2d67a316809243056abd7cd032904b43e9e",
    "patch": "@@ -0,0 +1,93 @@\n+package com.bindschaedel.controller.util.exception;\n+\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.ResultActions;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.transaction.TransactionSystemException;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GlobalExceptionHandlerTest {\n+    private static final Map<String, String> ENCODED_ERROR = buildEncodedError();\n+\n+    private MockMvc mockMvc;\n+    @Mock\n+    private MockController mockController;\n+    @Mock\n+    private ErrorEncoder errorEncoder;\n+\n+    @Before\n+    public void setup() {\n+        this.mockMvc = MockMvcBuilders\n+                .standaloneSetup(mockController)\n+                .setControllerAdvice(new GlobalExceptionHandler(errorEncoder))\n+                .build();\n+    }\n+\n+    @Test\n+    public void transactionSystemExceptionsInvokeEncoder() throws Exception {\n+        TransactionSystemException ex = new TransactionSystemException(\"msg\");\n+        when(mockController.dummy()).thenThrow(ex);\n+        when(errorEncoder.encode(ex)).thenReturn(ENCODED_ERROR);\n+\n+        MvcResult mvcResult = hitDummyEndpoint().andReturn();\n+        assertResponseContent(mvcResult);\n+    }\n+\n+    @Test\n+    public void numberFormatExceptionsInvokeEncoder() throws Exception {\n+        NumberFormatException ex = new NumberFormatException(\"msg\");\n+        when(mockController.dummy()).thenThrow(ex);\n+        when(errorEncoder.encode(ex)).thenReturn(ENCODED_ERROR);\n+\n+        MvcResult mvcResult = hitDummyEndpoint().andReturn();\n+        assertResponseContent(mvcResult);\n+    }\n+\n+    @Test\n+    public void transactionSystemExceptionsReturnBadRequestCode() throws Exception {\n+        when(mockController.dummy()).thenThrow(new TransactionSystemException(\"msg\"));\n+\n+        hitDummyEndpoint().andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void numberFormatExceptionReturnBadRequestCode() throws Exception {\n+        when(mockController.dummy()).thenThrow(new NumberFormatException(\"msg\"));\n+\n+        hitDummyEndpoint().andExpect(status().isBadRequest());\n+    }\n+\n+    private ResultActions hitDummyEndpoint() throws Exception {\n+        return mockMvc.perform(get(\"/dummy\"));\n+    }\n+\n+    private static void assertResponseContent(MvcResult r) throws UnsupportedEncodingException {\n+        String expected = new JSONObject(ENCODED_ERROR).toString();\n+        assertThat(r.getResponse().getContentAsString()).isEqualTo(expected);\n+    }\n+\n+    private static Map<String, String> buildEncodedError() {\n+        Map<String, String> ee = new HashMap<>();\n+        ee.put(\"error\", \"errorMsg\");\n+        return ee;\n+    }\n+\n+}"
  },
  {
    "sha": "596f015e80cb0e721b95f57f38384c6bce1978b9",
    "filename": "src/test/java/com/bindschaedel/controller/util/exception/MockController.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/flouou/tournament-organizer/blob/cb18c2d67a316809243056abd7cd032904b43e9e/src/test/java/com/bindschaedel/controller/util/exception/MockController.java",
    "raw_url": "https://github.com/flouou/tournament-organizer/raw/cb18c2d67a316809243056abd7cd032904b43e9e/src/test/java/com/bindschaedel/controller/util/exception/MockController.java",
    "contents_url": "https://api.github.com/repos/flouou/tournament-organizer/contents/src/test/java/com/bindschaedel/controller/util/exception/MockController.java?ref=cb18c2d67a316809243056abd7cd032904b43e9e",
    "patch": "@@ -1,4 +1,4 @@\n-package com.bindschaedel.controller.util;\n+package com.bindschaedel.controller.util.exception;\n \n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RestController;",
    "previous_filename": "src/test/java/com/bindschaedel/controller/util/MockController.java"
  }
]
