[
  {
    "sha": "ad86fb2e4aa90ce842d9f1abe273bdd1e63452c7",
    "filename": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 16,
    "changes": 17,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -19,7 +19,6 @@\n import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n import io.kubernetes.client.openapi.models.V1ObjectMeta;\n import io.kubernetes.client.openapi.models.V1SecretReference;\n-import io.kubernetes.client.openapi.models.V1Service;\n import oracle.weblogic.domain.AdminServer;\n import oracle.weblogic.domain.AdminService;\n import oracle.weblogic.domain.Channel;\n@@ -29,7 +28,6 @@\n import oracle.weblogic.domain.DomainSpec;\n import oracle.weblogic.domain.Model;\n import oracle.weblogic.domain.ServerPod;\n-import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.assertions.TestAssertions;\n@@ -43,7 +41,6 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestMethodOrder;\n \n-import static io.kubernetes.client.util.Yaml.dump;\n import static java.util.concurrent.TimeUnit.MINUTES;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n@@ -59,7 +56,6 @@\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n-import static oracle.weblogic.kubernetes.actions.TestActions.listServices;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n@@ -72,6 +68,7 @@\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.setPodAntiAffinity;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getDBNodePort;\n import static oracle.weblogic.kubernetes.utils.DbUtils.startOracleDB;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n@@ -474,16 +471,4 @@ private void createDomainResource(String domainUid, String domNamespace, String\n     assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n         + \"for %s in namespace %s\", domainUid, domNamespace));\n   }\n-\n-  private static Integer getDBNodePort(String namespace, String dbName) {\n-    logger.info(dump(Kubernetes.listServices(namespace)));\n-    List<V1Service> services = listServices(namespace).getItems();\n-    for (V1Service service : services) {\n-      if (service.getMetadata().getName().startsWith(dbName)) {\n-        return service.getSpec().getPorts().get(0).getNodePort();\n-      }\n-    }\n-    return -1;\n-  }\n-\n }"
  },
  {
    "sha": "f5ed3d8ed9118e0a729c3986b810941252bbe168",
    "filename": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwBigCMMiiDomain.java",
    "status": "added",
    "additions": 268,
    "deletions": 0,
    "changes": 268,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwBigCMMiiDomain.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwBigCMMiiDomain.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwBigCMMiiDomain.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -0,0 +1,268 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getDBNodePort;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.FmwUtils.createDomainResource;\n+import static oracle.weblogic.kubernetes.utils.FmwUtils.verifyDomainReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test to creat a FMW domain in model in image with over 1Mb data\n+ * to test that generated introspector Config Maps will be splitted to smaller than 1Mb\n+ * and domain will be started and running.\n+ */\n+@DisplayName(\"Test to a create FMW model in image domain \"\n+    + \"with introspect Config Map bigger then 1 Mb and start the domain\")\n+@IntegrationTest\n+public class ItFmwBigCMMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-bigcm-jrf.yaml\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/fwmdomaintemp\";\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private String domainUid = \"jrfdomain-mii\";\n+  private String adminServerPodName = domainUid + \"-admin-server\";\n+  private String managedServerPrefix = domainUid + \"-managed-server\";\n+  private int replicaCount = 2;\n+  private String adminSecretName = domainUid + \"-weblogic-credentials\";\n+  private String encryptionSecretName = domainUid + \"-encryptionsecret\";\n+  private String rcuaccessSecretName = domainUid + \"-rcu-access\";\n+  private String opsswalletpassSecretName = domainUid + \"-opss-wallet-password-secret\";\n+  private String opsswalletfileSecretName = domainUid + \"opss-wallet-file-secret\";\n+  static int dbNodePort;\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domain.\n+   * Pull FMW image and Oracle DB image.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for FMW domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+            + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+            + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    dbNodePort = getDBNodePort(dbNamespace, \"oracledb\");\n+    logger.info(\"DB Node Port = {0}\", dbNodePort);\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItFmwMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+\n+  /**\n+   * Create a FMW model in image domain with big data.\n+   * Verify Pod is ready and service exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   * Verify that multiple introspector CMs are produced if data is > 1Mb\n+   */\n+  @Test\n+  @DisplayName(\"Create FMW Domain model in image with big introspector CM\")\n+  public void testFmwBigCMModelInImage() {\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(jrfDomainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        jrfDomainNamespace,\n+        \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        jrfDomainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create RCU access secret\n+    logger.info(\"Creating RCU access secret: {0}, with prefix: {1}, dbUrl: {2}, schemapassword: {3})\",\n+        rcuaccessSecretName, RCUSCHEMAPREFIX, RCUSCHEMAPASSWORD, dbUrl);\n+    assertDoesNotThrow(() -> createRcuAccessSecret(\n+        rcuaccessSecretName,\n+        jrfDomainNamespace,\n+        RCUSCHEMAPREFIX,\n+        RCUSCHEMAPASSWORD,\n+        dbUrl),\n+        String.format(\"createSecret failed for %s\", rcuaccessSecretName));\n+\n+    logger.info(\"Create OPSS wallet password secret\");\n+    assertDoesNotThrow(() -> createOpsswalletpasswordSecret(\n+        opsswalletpassSecretName,\n+        jrfDomainNamespace,\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", opsswalletpassSecretName));\n+\n+    logger.info(\"Create an image with jrf model file\");\n+\n+    String text = \"SOMEVERYVERYVERYBIGDATAFORPROPERTY\";\n+    int numberOfLines = 100000;\n+    StringBuffer propVal = new StringBuffer();\n+    for (int i = 0; i < numberOfLines; i++) {\n+      propVal.append(text);\n+    }\n+    // create a temporary model file with 1M data stored\n+    File testmodelFile = assertDoesNotThrow(() ->\n+            File.createTempFile(\"modelBigCM\", \".yaml\"),\n+        \"Failed to create domain properties file\");\n+\n+    final Path srcModelFile = Paths.get(MODEL_DIR, modelFile);\n+    final Path targetModelFile = Paths.get(testmodelFile.toString());\n+    assertDoesNotThrow(() ->  Files.copy(srcModelFile, targetModelFile, StandardCopyOption.REPLACE_EXISTING),\n+        \"Failed to copy file \" + srcModelFile + \" to file \" + targetModelFile);\n+\n+    assertDoesNotThrow(() -> replaceStringInFile(targetModelFile.toString(),\n+        \"BIGDATAREPLACE\",\n+        propVal.toString()), \"Can't replace the string BIGDATAREPLACE in \" + targetModelFile);\n+    assertDoesNotThrow(() -> replaceStringInFile(targetModelFile.toString(),\n+        \"@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@\",\n+        String.format(\"%s:%s\", K8S_NODEPORT_HOST, Integer.toString(dbNodePort))),\n+        \"Can't replace the string @@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@ in \" + targetModelFile);\n+\n+    final List<String> modelList = Collections.singletonList(targetModelFile.toString());\n+    String jrfMii1Image = createMiiImageAndVerify(\n+        \"jrf-mii-image\",\n+        modelList,\n+        Collections.singletonList(MII_BASIC_APP_NAME),\n+        FMWINFRA_IMAGE_NAME,\n+        FMWINFRA_IMAGE_TAG,\n+        \"JRF\",\n+        false);\n+\n+    // push the image to a registry to make it accessible in multi-node cluster\n+    dockerLoginAndPushImageToRegistry(jrfMii1Image);\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+        jrfDomainNamespace,\n+        adminSecretName,\n+        OCIR_SECRET_NAME,\n+        encryptionSecretName,\n+        rcuaccessSecretName,\n+        opsswalletpassSecretName,\n+        replicaCount,\n+        jrfMii1Image);\n+\n+    createDomainAndVerify(domain, jrfDomainNamespace);\n+    verifyDomainReady(jrfDomainNamespace, domainUid, replicaCount);\n+    // check if multiple configmaps are created\n+    try {\n+      if (!Kubernetes.listConfigMaps(jrfDomainNamespace).getItems().isEmpty()) {\n+        logger.info(\"Getting Config Maps List\");\n+        int cmTotalSize = 0;\n+        List<V1ConfigMap> items = Kubernetes.listConfigMaps(jrfDomainNamespace).getItems();\n+        List<V1ConfigMap> itemsCM = new ArrayList<>();\n+        for (var item : items) {\n+          if (item.getMetadata().getName().contains(\"introspect\")) {\n+            logger.info(\"Found ConfigMap \" + item.getMetadata().getName());\n+            logger.info(\"Found ConfigMap size \" + item.toString().getBytes(\"UTF-8\").length + \" bytes\");\n+            cmTotalSize = cmTotalSize + item.toString().getBytes(\"UTF-8\").length;\n+            itemsCM.add(item);\n+          }\n+        }\n+        assertTrue((cmTotalSize > 1000000) && (itemsCM.size() > 1),\n+            \"Produced introspector domain cm is bigger than 1M and was not splitted\");\n+      }\n+    } catch (Exception ex) {\n+      throw new RuntimeException(\"Failed to process config maps\" + ex.getMessage());\n+    }\n+  }\n+}"
  },
  {
    "sha": "6f0e48b47afeb7bfe2c6de4493e522050d8627b0",
    "filename": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwMiiDomain.java",
    "status": "modified",
    "additions": 7,
    "deletions": 116,
    "changes": 123,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwMiiDomain.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwMiiDomain.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwMiiDomain.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -9,24 +9,12 @@\n import java.util.List;\n \n import io.kubernetes.client.custom.V1Patch;\n-import io.kubernetes.client.openapi.models.V1EnvVar;\n-import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n-import io.kubernetes.client.openapi.models.V1ObjectMeta;\n-import io.kubernetes.client.openapi.models.V1SecretReference;\n-import oracle.weblogic.domain.AdminServer;\n-import oracle.weblogic.domain.AdminService;\n-import oracle.weblogic.domain.Channel;\n-import oracle.weblogic.domain.Cluster;\n-import oracle.weblogic.domain.Configuration;\n import oracle.weblogic.domain.Domain;\n-import oracle.weblogic.domain.DomainSpec;\n-import oracle.weblogic.domain.Model;\n-import oracle.weblogic.domain.Opss;\n-import oracle.weblogic.domain.ServerPod;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.FmwUtils;\n import org.awaitility.core.ConditionFactory;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.DisplayName;\n@@ -38,32 +26,27 @@\n import static java.util.concurrent.TimeUnit.MINUTES;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n-import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n-import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n-import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDeleted;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.patchServerStartPolicy;\n import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n-import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.FmwUtils.verifyDomainReady;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n@@ -135,7 +118,7 @@ public static void initAll(@Namespaces(3) List<String> namespaces) {\n     jrfDomainNamespace = namespaces.get(2);\n \n     logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n-        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+         + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n         DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n     assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n         RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n@@ -214,7 +197,7 @@ public void testFmwModelInImage() {\n     dockerLoginAndPushImageToRegistry(jrfMiiImage);\n \n     // create the domain object\n-    Domain domain = createDomainResource(domainUid,\n+    Domain domain = FmwUtils.createDomainResource(domainUid,\n         jrfDomainNamespace,\n         adminSecretName,\n         OCIR_SECRET_NAME,\n@@ -225,7 +208,7 @@ public void testFmwModelInImage() {\n         jrfMiiImage);\n \n     createDomainAndVerify(domain, jrfDomainNamespace);\n-    verifyDomainReady();\n+    verifyDomainReady(jrfDomainNamespace, domainUid, replicaCount);\n   }\n \n   /**\n@@ -244,7 +227,7 @@ public void testReuseRCUschemalToRestartDomain() {\n     shutdownDomain();\n     patchDomainWithWalletFileSecret(opsswalletfileSecretName);\n     startupDomain();\n-    verifyDomainReady();\n+    verifyDomainReady(jrfDomainNamespace, domainUid, replicaCount);\n   }\n \n   /**\n@@ -328,96 +311,4 @@ private boolean patchDomainWithWalletFileSecret(String opssWalletFileSecretName)\n \n     return patchDomainCustomResource(domainUid, jrfDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH);\n   }\n-\n-  /**\n-   * Construct a domain object with the given parameters that can be used to create a domain resource.\n-   * @param domainUid unique Uid of the domain\n-   * @param domNamespace  namespace where the domain exists\n-   * @param adminSecretName  name of admin secret\n-   * @param repoSecretName name of repository secret\n-   * @param encryptionSecretName name of encryption secret\n-   * @param rcuAccessSecretName name of RCU access secret\n-   * @param opssWalletPasswordSecretName name of opss wallet password secret\n-   * @param replicaCount count of replicas\n-   * @param miiImage name of model in image\n-   * @return Domain WebLogic domain\n-   */\n-  private Domain createDomainResource(\n-      String domainUid, String domNamespace, String adminSecretName,\n-      String repoSecretName, String encryptionSecretName, String rcuAccessSecretName,\n-      String opssWalletPasswordSecretName, int replicaCount, String miiImage) {\n-    // create the domain CR\n-    Domain domain = new Domain()\n-            .apiVersion(DOMAIN_API_VERSION)\n-            .kind(\"Domain\")\n-            .metadata(new V1ObjectMeta()\n-                    .name(domainUid)\n-                    .namespace(domNamespace))\n-            .spec(new DomainSpec()\n-                    .domainUid(domainUid)\n-                    .domainHomeSourceType(\"FromModel\")\n-                    .image(miiImage)\n-                    .imagePullPolicy(\"IfNotPresent\")\n-                    .addImagePullSecretsItem(new V1LocalObjectReference()\n-                            .name(repoSecretName))\n-                    .webLogicCredentialsSecret(new V1SecretReference()\n-                            .name(adminSecretName)\n-                            .namespace(domNamespace))\n-                    .includeServerOutInPodLog(true)\n-                    .serverStartPolicy(\"IF_NEEDED\")\n-                    .serverPod(new ServerPod()\n-                            .addEnvItem(new V1EnvVar()\n-                                    .name(\"JAVA_OPTIONS\")\n-                                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n-                            .addEnvItem(new V1EnvVar()\n-                                    .name(\"USER_MEM_ARGS\")\n-                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-                    .adminServer(new AdminServer()\n-                            .serverStartState(\"RUNNING\")\n-                            .adminService(new AdminService()\n-                                    .addChannelsItem(new Channel()\n-                                            .channelName(\"default\")\n-                                            .nodePort(0))))\n-                    .addClustersItem(new Cluster()\n-                            .clusterName(\"cluster-1\")\n-                            .replicas(replicaCount)\n-                            .serverStartState(\"RUNNING\"))\n-                    .configuration(new Configuration()\n-                            .opss(new Opss()\n-                                   .walletPasswordSecret(opssWalletPasswordSecretName))\n-                            .model(new Model()\n-                                    .domainType(\"JRF\")\n-                                    .runtimeEncryptionSecret(encryptionSecretName))\n-                            .addSecretsItem(rcuAccessSecretName)\n-                            .introspectorJobActiveDeadlineSeconds(600L)));\n-\n-    return domain;\n-  }\n-\n-  /**\n-   * Verify Pod is ready and service exists for both admin server and managed servers.\n-   * Verify EM console is accessible.\n-   */\n-  private void verifyDomainReady() {\n-    checkPodReadyAndServiceExists(adminServerPodName, domainUid, jrfDomainNamespace);\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i + \"-c1\", jrfDomainNamespace);\n-      checkPodReadyAndServiceExists(managedServerPrefix + i + \"-c1\", domainUid, jrfDomainNamespace);\n-    }\n-\n-    //check access to the em console: http://hostname:port/em\n-    int nodePort = getServiceNodePort(\n-           jrfDomainNamespace, getExternalServicePodName(adminServerPodName), \"default\");\n-    assertTrue(nodePort != -1,\n-          \"Could not get the default external service node port\");\n-    logger.info(\"Found the default service nodePort {0}\", nodePort);\n-    String curlCmd1 = \"curl -s -L --show-error --noproxy '*' \"\n-        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n-        + \"/em --write-out %{http_code} -o /dev/null\";\n-    logger.info(\"Executing default nodeport curl command {0}\", curlCmd1);\n-    assertTrue(callWebAppAndWaitTillReady(curlCmd1, 5), \"Calling web app failed\");\n-    logger.info(\"EM console is accessible thru default service\");\n-  }\n-\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e73be815b3efb094d0e09887751c7f68ddb54adf",
    "filename": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossClusters.java",
    "status": "modified",
    "additions": 1,
    "deletions": 15,
    "changes": 16,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossClusters.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossClusters.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossClusters.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -21,7 +21,6 @@\n import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n import io.kubernetes.client.openapi.models.V1ObjectMeta;\n import io.kubernetes.client.openapi.models.V1SecretReference;\n-import io.kubernetes.client.openapi.models.V1Service;\n import oracle.weblogic.domain.AdminServer;\n import oracle.weblogic.domain.AdminService;\n import oracle.weblogic.domain.Channel;\n@@ -31,7 +30,6 @@\n import oracle.weblogic.domain.DomainSpec;\n import oracle.weblogic.domain.Model;\n import oracle.weblogic.domain.ServerPod;\n-import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.assertions.TestAssertions;\n@@ -46,7 +44,6 @@\n import org.junit.jupiter.api.TestMethodOrder;\n import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;\n \n-import static io.kubernetes.client.util.Yaml.dump;\n import static java.util.concurrent.TimeUnit.MINUTES;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n@@ -61,7 +58,6 @@\n import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n-import static oracle.weblogic.kubernetes.actions.TestActions.listServices;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n@@ -74,6 +70,7 @@\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.setPodAntiAffinity;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getDBNodePort;\n import static oracle.weblogic.kubernetes.utils.DbUtils.startOracleDB;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n@@ -458,15 +455,4 @@ private static void createDomainResource(String domainUid, String domNamespace,\n     assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n         + \"for %s in namespace %s\", domainUid, domNamespace));\n   }\n-\n-  private static Integer getDBNodePort(String namespace, String dbName) {\n-    logger.info(dump(Kubernetes.listServices(namespace)));\n-    List<V1Service> services = listServices(namespace).getItems();\n-    for (V1Service service : services) {\n-      if (service.getMetadata().getName().startsWith(dbName)) {\n-        return service.getSpec().getPorts().get(0).getNodePort();\n-      }\n-    }\n-    return -1;\n-  }\n }"
  },
  {
    "sha": "ae34e9a17f83ead1a47de00eb10919a0306ea217",
    "filename": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossDomainTransaction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 16,
    "changes": 17,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossDomainTransaction.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossDomainTransaction.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossDomainTransaction.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -21,7 +21,6 @@\n import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n import io.kubernetes.client.openapi.models.V1ObjectMeta;\n import io.kubernetes.client.openapi.models.V1SecretReference;\n-import io.kubernetes.client.openapi.models.V1Service;\n import oracle.weblogic.domain.AdminServer;\n import oracle.weblogic.domain.Cluster;\n import oracle.weblogic.domain.Configuration;\n@@ -30,7 +29,6 @@\n import oracle.weblogic.domain.Istio;\n import oracle.weblogic.domain.Model;\n import oracle.weblogic.domain.ServerPod;\n-import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n@@ -44,7 +42,6 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestMethodOrder;\n \n-import static io.kubernetes.client.util.Yaml.dump;\n import static java.util.concurrent.TimeUnit.MINUTES;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n@@ -61,7 +58,6 @@\n import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n-import static oracle.weblogic.kubernetes.actions.TestActions.listServices;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkAppUsingHostHeader;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n@@ -74,6 +70,7 @@\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.generateFileFromTemplate;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.setPodAntiAffinity;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getDBNodePort;\n import static oracle.weblogic.kubernetes.utils.DbUtils.startOracleDB;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.IstioUtils.deployHttpIstioGatewayAndVirtualservice;\n@@ -493,16 +490,4 @@ private void createDomainResource(String domainUid, String domNamespace, String\n     assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n         + \"for %s in namespace %s\", domainUid, domNamespace));\n   }\n-\n-  private static Integer getDBNodePort(String namespace, String dbName) {\n-    logger.info(dump(Kubernetes.listServices(namespace)));\n-    List<V1Service> services = listServices(namespace).getItems();\n-    for (V1Service service : services) {\n-      if (service.getMetadata().getName().startsWith(dbName)) {\n-        return service.getSpec().getPorts().get(0).getNodePort();\n-      }\n-    }\n-    return -1;\n-  }\n-\n }"
  },
  {
    "sha": "e2ef6e8e662e0e64bb668c1b1ff0d73a1624a63a",
    "filename": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/DbUtils.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/DbUtils.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/DbUtils.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/DbUtils.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -8,6 +8,7 @@\n import java.nio.file.Paths;\n import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.Callable;\n import javax.net.ssl.SSLProtocolException;\n@@ -39,11 +40,13 @@\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n import org.awaitility.core.ConditionFactory;\n \n+import static io.kubernetes.client.util.Yaml.dump;\n import static java.util.concurrent.TimeUnit.MINUTES;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n import static oracle.weblogic.kubernetes.actions.TestActions.execCommand;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listServices;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podReady;\n import static oracle.weblogic.kubernetes.assertions.impl.Kubernetes.getPod;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n@@ -501,4 +504,23 @@ public static int getNewSuffixCount() {\n       return suffixCount;\n     }\n   }\n+\n+  /**\n+   * Returns a DB NodePort value .\n+   *\n+   * @param dbNamespace database namespace where pod exists\n+   * @param dbName database name\n+   * @return DB NodePort value\n+   */\n+  public static Integer getDBNodePort(String dbNamespace, String dbName) {\n+    LoggingFacade logger = getLogger();\n+    logger.info(dump(Kubernetes.listServices(dbNamespace)));\n+    List<V1Service> services = listServices(dbNamespace).getItems();\n+    for (V1Service service : services) {\n+      if (service.getMetadata().getName().startsWith(dbName)) {\n+        return service.getSpec().getPorts().get(0).getNodePort();\n+      }\n+    }\n+    return -1;\n+  }\n }"
  },
  {
    "sha": "d9532939c20c9b035666f943b2b5060fdef078a7",
    "filename": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FmwUtils.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FmwUtils.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FmwUtils.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FmwUtils.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Common utility methods for FMW Domain.\n+ */\n+public class FmwUtils {\n+  /**\n+   * Construct a domain object with the given parameters that can be used to create a domain resource.\n+   * @param domainUid unique Uid of the domain\n+   * @param domNamespace  namespace where the domain exists\n+   * @param adminSecretName  name of admin secret\n+   * @param repoSecretName name of repository secret\n+   * @param encryptionSecretName name of encryption secret\n+   * @param rcuAccessSecretName name of RCU access secret\n+   * @param opssWalletPasswordSecretName name of opss wallet password secret\n+   * @param replicaCount count of replicas\n+   * @param miiImage name of model in image\n+   * @return Domain WebLogic domain\n+   */\n+  public static Domain createDomainResource(\n+      String domainUid, String domNamespace, String adminSecretName,\n+      String repoSecretName, String encryptionSecretName, String rcuAccessSecretName,\n+      String opssWalletPasswordSecretName, int replicaCount, String miiImage) {\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(repoSecretName))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .addClustersItem(new Cluster()\n+                .clusterName(\"cluster-1\")\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                .opss(new Opss()\n+                    .walletPasswordSecret(opssWalletPasswordSecretName))\n+                .model(new Model()\n+                    .domainType(\"JRF\")\n+                    .runtimeEncryptionSecret(encryptionSecretName))\n+                .addSecretsItem(rcuAccessSecretName)\n+                .introspectorJobActiveDeadlineSeconds(600L)));\n+\n+    return domain;\n+  }\n+\n+  /**\n+   * Verify Pod is ready and service exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   * @param domainUid unique Uid of the domain\n+   * @param domainNamespace  namespace where the domain exists\n+   * @param replicaCount number of running managed servers\n+   */\n+  public static void verifyDomainReady(String domainNamespace, String domainUid, int replicaCount) {\n+    LoggingFacade logger = getLogger();\n+    String adminServerPodName = domainUid + \"-admin-server\";\n+    String managedServerPrefix = domainUid + \"-managed-server\";\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i + \"-c1\", domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i + \"-c1\", domainUid, domainNamespace);\n+    }\n+\n+    //check access to the em console: http://hostname:port/em\n+    int nodePort = getServiceNodePort(\n+        domainNamespace, getExternalServicePodName(adminServerPodName), \"default\");\n+    assertTrue(nodePort != -1,\n+        \"Could not get the default external service node port\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    String curlCmd1 = \"curl -s -L --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/em --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd1);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd1, 5), \"Calling web app failed\");\n+    logger.info(\"EM console is accessible thru default service\");\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0c00d9e427753ece86d01f68bd3dcb0c49369b80",
    "filename": "integration-tests/src/test/resources/wdt-models/model-bigcm-jrf.yaml",
    "status": "added",
    "additions": 209,
    "deletions": 0,
    "changes": 209,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/resources/wdt-models/model-bigcm-jrf.yaml",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/integration-tests/src/test/resources/wdt-models/model-bigcm-jrf.yaml",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/integration-tests/src/test/resources/wdt-models/model-bigcm-jrf.yaml?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -0,0 +1,209 @@\n+# Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+  AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+  AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+  ServerStartMode: 'prod'\n+  RCUDbInfo:\n+    rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+    rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+    rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+  AdminServerName: \"admin-server\"\n+  Name: \"domain1\"\n+  Cluster:\n+    \"cluster-1\":\n+  Server:\n+    'admin-server':\n+      ListenPort: 7001\n+    'managed-server1-c1':\n+      Cluster: \"cluster-1\"\n+      ListenPort: 8001\n+    'managed-server2-c1':\n+      Cluster: \"cluster-1\"\n+      ListenPort: 8001\n+    'managed-server3-c1':\n+      Cluster: \"cluster-1\"\n+      ListenPort: 8001\n+    'managed-server4-c1':\n+      Cluster: \"cluster-1\"\n+      ListenPort: 8001\n+\n+appDeployments:\n+  Application:\n+    myear:\n+      SourcePath: \"wlsdeploy/applications/sample-app.ear\"\n+      ModuleType: ear\n+      Target: \"cluster-1\"\n+\n+resources:\n+  JDBCSystemResource:\n+    TestCdtDataSource:\n+      Target: 'cluster-1'\n+      Notes: BIGDATAREPLACE\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+          Properties:\n+            user:\n+              Value: 'sys as sysdba'\n+    TestOneCdtDataSource:\n+      Target: 'cluster-1'\n+      Notes: BIGDATAREPLACE\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestOneCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+          Properties:\n+            user:\n+              Value: 'sys as sysdba'\n+    TestTwoCdtDataSource:\n+      Target: 'cluster-1'\n+      Notes: BIGDATAREPLACE\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestTwoCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+          Properties:\n+            user:\n+              Value: 'sys as sysdba'\n+    TestThreeCdtDataSource:\n+      Target: 'cluster-1'\n+      Notes: BIGDATAREPLACE\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestThreeCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+          Properties:\n+            user:\n+              Value: 'sys as sysdba'\n+    TestFourCdtDataSource:\n+      Target: 'cluster-1'\n+      Notes: BIGDATAREPLACE\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestFourCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+          Properties:\n+            user:\n+              Value: 'sys as sysdba'\n+    TestFiveCdtDataSource:\n+      Target: 'cluster-1'\n+      Notes: BIGDATAREPLACE\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestFiveCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+          Properties:\n+            user:\n+              Value: 'sys as sysdba'\n+  FileStore:\n+    TestCdtFileStore:\n+      Target: 'cluster-1'\n+    TestCdt1FileStore:\n+      Target: 'cluster-1'\n+    TestCdt2FileStore:\n+      Target: 'cluster-1'\n+  JMSServer:\n+    TestCdtJmsServer:\n+      ProductionPausedAtStartup: false\n+      ConsumptionPausedAtStartup: false\n+      Target: 'cluster-1'\n+      PersistentStore: 'TestCdtFileStore'\n+      InsertionPausedAtStartup: false\n+      MessageCompressionOptions: GZIP_DEFAULT_COMPRESSION\n+    TestCdt1JmsServer:\n+      ProductionPausedAtStartup: false\n+      ConsumptionPausedAtStartup: false\n+      Target: 'cluster-1'\n+      PersistentStore: 'TestCdt1FileStore'\n+      InsertionPausedAtStartup: false\n+      MessageCompressionOptions: GZIP_DEFAULT_COMPRESSION\n+    TestCdt2JmsServer:\n+      ProductionPausedAtStartup: false\n+      ConsumptionPausedAtStartup: false\n+      Target: 'cluster-1'\n+      PersistentStore: 'TestCdt2FileStore'\n+      InsertionPausedAtStartup: false\n+      MessageCompressionOptions: GZIP_DEFAULT_COMPRESSION\n+\n+  JMSSystemResource:\n+    TestCdtJmsModule:\n+      Target: 'cluster-1'\n+      SubDeployment:\n+        TestCdtSubDeployment:\n+          Target: TestCdtJmsServer\n+      JmsResource:\n+        UniformDistributedQueue:\n+          testCdtUniformQueue:\n+            SubDeploymentName: TestCdtSubDeployment\n+            JNDIName: jms/testCdtUniformQueue\n\\ No newline at end of file"
  },
  {
    "sha": "e08a962b80a62c3bd9ae4955960eb143a859ba8b",
    "filename": "operator/src/main/java/oracle/kubernetes/operator/IntrospectorConfigMapConstants.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/main/java/oracle/kubernetes/operator/IntrospectorConfigMapConstants.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/main/java/oracle/kubernetes/operator/IntrospectorConfigMapConstants.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/operator/src/main/java/oracle/kubernetes/operator/IntrospectorConfigMapConstants.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -55,7 +55,7 @@ static String getIntrospectorConfigMapNamePrefix(String uid) {\n \n   /**  A (possibly empty) suffix for introspector config maps. */\n   static String suffix(int index) {\n-    return index == 0 ? \"\" : \"_\" + index;\n+    return index == 0 ? \"\" : \"-\" + index;\n   }\n \n   /**"
  },
  {
    "sha": "0239141dbb6ab10221c1241e8a535aa4c01a4c90",
    "filename": "operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -7,6 +7,7 @@\n import java.util.Collection;\n import java.util.Optional;\n import java.util.StringTokenizer;\n+import java.util.regex.Pattern;\n \n import oracle.kubernetes.operator.TuningParameters;\n \n@@ -53,6 +54,9 @@\n   // The maximum length of a legal DNS label name\n   public static final int LEGAL_DNS_LABEL_NAME_MAX_LENGTH = 63;\n \n+  private static final String DNS_NAME_REGEXP = \"[a-z0-9]([-a-z0-9]*[a-z0-9])?\";\n+  private static final Pattern DNS_NAME_PATTERN = Pattern.compile(DNS_NAME_REGEXP);\n+\n   static String[] dns1123Fields;\n \n   public static String toServerServiceName(String domainUid, String serverName) {\n@@ -133,6 +137,18 @@ public static String toDns1123LegalName(String value) {\n     return value.toLowerCase().replace('_', '-');\n   }\n \n+  public static boolean isDns1123LegalName(String value) {\n+    return hasValidLength(value) && followsPattern(value);\n+  }\n+\n+  private static boolean hasValidLength(String value) {\n+    return value.length() > 0 && value.length() <= LEGAL_DNS_LABEL_NAME_MAX_LENGTH;\n+  }\n+\n+  private static boolean followsPattern(String value) {\n+    return DNS_NAME_PATTERN.matcher(value).matches();\n+  }\n+\n   /**\n    * Returns a list of field names of fields that needs to be in DNS-1123 format from the\n    * \"dns1123Fields\" tuning parameter, if it is configured with a comma delimited values"
  },
  {
    "sha": "c0e336056361fa338b87b999f621bee49e4ddeff",
    "filename": "operator/src/main/resources/scripts/modelInImage.sh",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/main/resources/scripts/modelInImage.sh",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/main/resources/scripts/modelInImage.sh",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/operator/src/main/resources/scripts/modelInImage.sh?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -569,7 +569,7 @@ function restorePrimordialDomain() {\n # $1 the name of the encoded file in the config map\n function restoreEncodedTar() {\n   cd / || return 1\n-  cat $(ls ${OPERATOR_ROOT}/introspector*/${1} | sort -V) > /tmp/domain.secure || return 1\n+  cat $(ls ${OPERATOR_ROOT}/introspector*/${1} | sort -t- -k3) > /tmp/domain.secure || return 1\n   base64 -d \"/tmp/domain.secure\" > /tmp/domain.tar.gz || return 1\n \n   tar -xzf /tmp/domain.tar.gz || return 1"
  },
  {
    "sha": "388589ad5a6db645a37976531ff8c95cf5724200",
    "filename": "operator/src/test/java/oracle/kubernetes/operator/helpers/Matchers.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/test/java/oracle/kubernetes/operator/helpers/Matchers.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/test/java/oracle/kubernetes/operator/helpers/Matchers.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/operator/src/test/java/oracle/kubernetes/operator/helpers/Matchers.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -134,6 +134,9 @@ protected static void addIfMissing(List<V1EnvVar> vars, String name, String valu\n     private final String expectedConfigMapName;\n \n     private VolumeMatcher(String expectedName, String expectedConfigMapName) {\n+      assert LegalNames.isDns1123LegalName(expectedName);\n+      assert LegalNames.isDns1123LegalName(expectedConfigMapName);\n+\n       this.expectedName = expectedName;\n       this.expectedConfigMapName = expectedConfigMapName;\n     }\n@@ -181,6 +184,8 @@ public void describeTo(Description description) {\n     private final boolean readOnly;\n \n     private VolumeMountMatcher(String expectedName, String expectedPath, boolean readOnly) {\n+      assert LegalNames.isDns1123LegalName(expectedName);\n+\n       this.expectedName = expectedName;\n       this.expectedPath = expectedPath;\n       this.readOnly = readOnly;"
  },
  {
    "sha": "b9f331646eed29c81101146016fbe620dcfba8cd",
    "filename": "operator/src/test/java/oracle/kubernetes/operator/helpers/PodHelperTestBase.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/test/java/oracle/kubernetes/operator/helpers/PodHelperTestBase.java",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/test/java/oracle/kubernetes/operator/helpers/PodHelperTestBase.java",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/operator/src/test/java/oracle/kubernetes/operator/helpers/PodHelperTestBase.java?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -458,8 +458,8 @@ public void whenIntrospectionCreatesMultipleConfigMaps_createCorrespondingVolume\n         getCreatedPodSpecContainer().getVolumeMounts(),\n         allOf(\n               hasItem(writableVolumeMount(INTROSPECTOR_VOLUME, \"/weblogic-operator/introspector\")),\n-              hasItem(writableVolumeMount(INTROSPECTOR_VOLUME + \"_1\", \"/weblogic-operator/introspector_1\")),\n-              hasItem(writableVolumeMount(INTROSPECTOR_VOLUME + \"_2\", \"/weblogic-operator/introspector_2\"))\n+              hasItem(writableVolumeMount(INTROSPECTOR_VOLUME + \"-1\", \"/weblogic-operator/introspector-1\")),\n+              hasItem(writableVolumeMount(INTROSPECTOR_VOLUME + \"-2\", \"/weblogic-operator/introspector-2\"))\n               ));\n   }\n \n@@ -1392,8 +1392,8 @@ public void whenIntrospectionCreatesMultipleConfigMaps_createCorrespondingVolume\n     assertThat(\n           getCreatedPod().getSpec().getVolumes(),\n           allOf(hasItem(volume(INTROSPECTOR_VOLUME, UID + INTROSPECTOR_CONFIG_MAP_NAME_SUFFIX)),\n-                hasItem(volume(INTROSPECTOR_VOLUME + \"_1\", UID + INTROSPECTOR_CONFIG_MAP_NAME_SUFFIX + \"_1\")),\n-                hasItem(volume(INTROSPECTOR_VOLUME + \"_2\", UID + INTROSPECTOR_CONFIG_MAP_NAME_SUFFIX + \"_2\"))));\n+                hasItem(volume(INTROSPECTOR_VOLUME + \"-1\", UID + INTROSPECTOR_CONFIG_MAP_NAME_SUFFIX + \"-1\")),\n+                hasItem(volume(INTROSPECTOR_VOLUME + \"-2\", UID + INTROSPECTOR_CONFIG_MAP_NAME_SUFFIX + \"-2\"))));\n   }\n \n   @Test"
  },
  {
    "sha": "239975a4c8647f5e875a0f1e6cc9ec07a2910987",
    "filename": "operator/src/test/sh/modelInImageTest.sh",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/oracle/weblogic-kubernetes-operator/blob/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/test/sh/modelInImageTest.sh",
    "raw_url": "https://github.com/oracle/weblogic-kubernetes-operator/raw/5e4b34f61e51894e4db9e2f534c0a507be62f61c/operator/src/test/sh/modelInImageTest.sh",
    "contents_url": "https://api.github.com/repos/oracle/weblogic-kubernetes-operator/contents/operator/src/test/sh/modelInImageTest.sh?ref=5e4b34f61e51894e4db9e2f534c0a507be62f61c",
    "patch": "@@ -56,12 +56,12 @@ testOnRestoreDomainConfig_whenNoIndexesDefinedCatSingleFile() {\n }\n \n testOnRestoreDomainConfig_whenIndexesDefinedCatMultipleFiles() {\n-  mkdir ${INTROSPECTOR_MAP}_1\n-  mkdir ${INTROSPECTOR_MAP}_2\n+  mkdir ${INTROSPECTOR_MAP}-1\n+  mkdir ${INTROSPECTOR_MAP}-2\n   echo \"0 2\" > $INTROSPECTOR_MAP/domainzip.secure.range\n   echo -n \"abc\" > $INTROSPECTOR_MAP/domainzip.secure\n-  echo -n \"def\" > ${INTROSPECTOR_MAP}_1/domainzip.secure\n-  echo -n \"ghi\" > ${INTROSPECTOR_MAP}_2/domainzip.secure\n+  echo -n \"def\" > ${INTROSPECTOR_MAP}-1/domainzip.secure\n+  echo -n \"ghi\" > ${INTROSPECTOR_MAP}-2/domainzip.secure\n \n   restoreDomainConfig\n "
  }
]
