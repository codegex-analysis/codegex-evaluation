[
  {
    "sha": "58fcc67bc8c1065830e051c1c3881cc38938b72e",
    "filename": "src/main/java/frc/robot/Robot.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/Robot.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/Robot.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/Robot.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -38,6 +38,7 @@\n import frc.robot.limelight.Limelight;\n import frc.robot.magazine.Magazine;\n import frc.robot.oi.OI;\n+import frc.robot.spacer.Spacer;\n \n /**\n  * The VM is configured to automatically run this class, and to call the\n@@ -111,7 +112,7 @@ public void disabledPeriodic() {\n     SmartDashboard.putNumber(\"Current Heading\", getDrivetrain().getHeading());\n     SmartDashboard.putNumber(\"Target Skew\", camera.getTargetSkew());\n \n-    SmartDashboard.putBoolean(\"Ball At Spacer\", Magazine.getMagazine().ballAtSpacer());\n+    SmartDashboard.putBoolean(\"Ball At Spacer\", Spacer.getSpacer().ballAtSpacer());\n     SmartDashboard.putBoolean(\"Ball At Shooter\", Magazine.getMagazine().ballAtShooter());\n     SmartDashboard.putNumber(\"Distance\", getDrivetrain().getFrontCamera().calculateDistanceToTarget());\n     SmartDashboard.putNumber(\"rpm\", getDrivetrain().getFrontCamera().calculateRPM());"
  },
  {
    "sha": "c3a1156c5794892664ea585b13007a20df720e6a",
    "filename": "src/main/java/frc/robot/command_groups/LoadMagazineCG.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/LoadMagazineCG.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/LoadMagazineCG.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/command_groups/LoadMagazineCG.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,74 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.command_groups;\n+\n+import edu.wpi.first.wpilibj.command.CommandGroup;\n+import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.spacer.Spacer;\n+import frc.robot.magazine.Magazine;\n+import frc.robot.spacer.commands.RunSpacer;\n+import frc.robot.spacer.commands.StopSpacer;\n+import frc.robot.magazine.commands.RunMagazine;\n+import frc.robot.magazine.commands.StopMagazine;\n+\n+public class LoadMagazineCG extends CommandGroup {\n+\n+  public LoadMagazineCG() {\n+    addSequential(new RunSpacerUntilBeamBroken());\n+    addSequential(new AddBall());\n+    addSequential(new RunMagazineMore(), 0.05);\n+    addSequential(new StopMagazine());\n+  }\n+\n+  @Override\n+  protected void end() {\n+    if (!Magazine.getMagazine().ballAtShooter()) {\n+      nextCommand().start();\n+    }\n+  }\n+\n+  class AddBall extends CommandGroup {\n+    public AddBall() {\n+      addParallel(new RunMagazineUntilBeamCleared());\n+      addSequential(new RunSpacerMore(), 0.3);\n+      addSequential(new StopSpacer());\n+    }\n+\n+    class RunMagazineUntilBeamCleared extends RunMagazine {\n+      @Override\n+      protected boolean isFinished() {\n+        return !Spacer.getSpacer().ballAtSpacer() || Magazine.getMagazine().ballAtShooter();\n+      }\n+    }\n+  \n+    class RunSpacerMore extends RunSpacer {\n+      @Override\n+      protected boolean isFinished() {\n+        return Magazine.getMagazine().ballAtShooter();\n+      }\n+    }\n+  }\n+\n+  class RunSpacerUntilBeamBroken extends RunSpacer {\n+    @Override\n+    protected boolean isFinished() {\n+      return Spacer.getSpacer().ballAtSpacer() || Magazine.getMagazine().ballAtShooter();\n+    }\n+  }\n+\n+  class RunMagazineMore extends RunMagazine {\n+    @Override\n+    protected boolean isFinished() {\n+      return Magazine.getMagazine().ballAtShooter();\n+    }\n+  }\n+\n+  protected Command nextCommand() {\n+    return new LoadMagazineCG();\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e503fbfe8329dab14ba264e6d63f5ee6ceb91062",
    "filename": "src/main/java/frc/robot/command_groups/SetBallHandlingCG.java",
    "status": "removed",
    "additions": 0,
    "deletions": 42,
    "changes": 42,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/command_groups/SetBallHandlingCG.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/command_groups/SetBallHandlingCG.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/command_groups/SetBallHandlingCG.java?ref=f225f4e63f2ba8ac5f02ff18c8f616542676988d",
    "patch": "@@ -1,42 +0,0 @@\n-/*----------------------------------------------------------------------------*/\n-/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n-/* Open Source Software - may be modified and shared by FRC teams. The code   */\n-/* must be accompanied by the FIRST BSD license file in the root directory of */\n-/* the project.                                                               */\n-/*----------------------------------------------------------------------------*/\n-\n-package frc.robot.command_groups;\n-\n-import edu.wpi.first.wpilibj.command.CommandGroup;\n-import frc.robot.magazine.Magazine.BallHandlingState;\n-import frc.robot.magazine.commands.SetMagazineTo;\n-import frc.robot.shooter.commands.StopShooter;\n-import frc.robot.spacer.commands.SetSpacerTo;\n-\n-public class SetBallHandlingCG extends CommandGroup {\n-\n-  public SetBallHandlingCG(BallHandlingState state) {\n-    // Add Commands here:\n-    // e.g. addSequential(new Command1());\n-    // addSequential(new Command2());\n-    // these will run in order.\n-\n-    // To run multiple commands at the same time,\n-    // use addParallel()\n-    // e.g. addParallel(new Command1());\n-    // addSequential(new Command2());\n-    // Command1 and Command2 will run in parallel.\n-\n-    // A command group will require all of the subsystems that each member\n-    // would require.\n-    // e.g. if Command1 requires chassis, and Command2 requires arm,\n-    // a CommandGroup containing them would require both the chassis and the\n-    // arm.\n-    // Shooter is at required RPM for position. Start feeding balls in.\n-    addParallel(new SetSpacerTo(state));\n-    addParallel(new SetMagazineTo(state));\n-    // if (state == BallHandlingState.STOP) {\n-    //   addSequential(new StopShooter());\n-    // }\n-  }\n-}"
  },
  {
    "sha": "12e4cf4d8c2ba8412fd3328e9e589d11c9fa9cee",
    "filename": "src/main/java/frc/robot/command_groups/ShootMagazineCG.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/ShootMagazineCG.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/ShootMagazineCG.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/command_groups/ShootMagazineCG.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,61 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.command_groups;\n+\n+import com.team2363.logger.HelixEvents;\n+\n+import edu.wpi.first.wpilibj.command.CommandGroup;\n+import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.spacer.Spacer;\n+import frc.robot.magazine.commands.RunMagazine;\n+import frc.robot.spacer.commands.RunSpacer;\n+import frc.robot.spacer.commands.StopSpacer;\n+\n+public class ShootMagazineCG extends CommandGroup {\n+\n+  public ShootMagazineCG() {\n+\n+    HelixEvents.getInstance().addEvent(\"MAGAZINE\", \"Shoot Magazine CG\");\n+\n+    addParallel(new AddBallInverted());\n+    addSequential(new RunMagazine(), 1.5);\n+    addSequential(new StopShootingCG());\n+  }\n+\n+  class AddBallInverted extends CommandGroup {\n+    public AddBallInverted() {\n+      addSequential(new StopSpacerUntilBeamCleared());\n+      addSequential(new StopSpacer(), 0.1);\n+      addSequential(new RunSpacerUntilBeamBroken());\n+      addSequential(new RunSpacer(), 0.3);\n+    }\n+\n+    @Override\n+    protected void end() {\n+      nextCommand().start();\n+    }\n+  \n+    class StopSpacerUntilBeamCleared extends StopSpacer {\n+      @Override\n+      protected boolean isFinished() {\n+        return !Spacer.getSpacer().ballAtSpacer();\n+      }\n+    }\n+\n+    class RunSpacerUntilBeamBroken extends RunSpacer {\n+      @Override\n+      protected boolean isFinished() {\n+        return Spacer.getSpacer().ballAtSpacer();\n+      }\n+    }\n+\n+    protected Command nextCommand() {\n+      return new AddBallInverted();\n+    }\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6c7cbb65ae61704d782265dbe7c63c68a528bb7c",
    "filename": "src/main/java/frc/robot/command_groups/ShootOneCG.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/ShootOneCG.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/ShootOneCG.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/command_groups/ShootOneCG.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,84 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.command_groups;\n+\n+import com.team2363.logger.HelixEvents;\n+\n+import edu.wpi.first.wpilibj.command.CommandGroup;\n+import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.magazine.Magazine;\n+import frc.robot.spacer.Spacer;\n+import frc.robot.magazine.commands.RunMagazine;\n+import frc.robot.spacer.commands.RunSpacer;\n+import frc.robot.spacer.commands.StopSpacer;\n+\n+public class ShootOneCG extends CommandGroup {\n+\n+  public ShootOneCG() {\n+\n+    HelixEvents.getInstance().addEvent(\"MAGAZINE\", \"Shoot One CG\");\n+\n+    addParallel(new AddBallInverted());\n+    addSequential(new ShootOne(), 1.5);\n+    addSequential(new StopShootingCG());\n+  }\n+\n+  class AddBallInverted extends CommandGroup {\n+    public AddBallInverted() {\n+      addSequential(new StopSpacerUntilBeamCleared());\n+      addSequential(new StopSpacer(), 0.1);\n+      addSequential(new RunSpacerUntilBeamBroken());\n+      addSequential(new RunSpacer(), 0.3);\n+    }\n+\n+    @Override\n+    protected void end() {\n+      nextCommand().start();\n+    }\n+  \n+    class StopSpacerUntilBeamCleared extends StopSpacer {\n+      @Override\n+      protected boolean isFinished() {\n+        return !Spacer.getSpacer().ballAtSpacer();\n+      }\n+    }\n+\n+    class RunSpacerUntilBeamBroken extends RunSpacer {\n+      @Override\n+      protected boolean isFinished() {\n+        return Spacer.getSpacer().ballAtSpacer();\n+      }\n+    }\n+\n+    protected Command nextCommand() {\n+      return new AddBallInverted();\n+    }\n+  }\n+\n+  class ShootOne extends CommandGroup {\n+    public ShootOne() {\n+      addSequential(new RunMagazineUntilBeamBroken());\n+      addSequential(new RunMagazineUntilBeamCleared());\n+      addSequential(new RunMagazineUntilBeamBroken());\n+    }\n+\n+    class RunMagazineUntilBeamBroken extends RunMagazine {\n+      @Override\n+      protected boolean isFinished() {\n+        return Magazine.getMagazine().ballAtShooter();\n+      }\n+    }\n+\n+    class RunMagazineUntilBeamCleared extends RunMagazine {\n+      @Override\n+      protected boolean isFinished() {\n+        return !Magazine.getMagazine().ballAtShooter();\n+      }\n+    }\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5161b440b21b2862f5cb88044c7593b6ed711306",
    "filename": "src/main/java/frc/robot/command_groups/StartIntakeCG.java",
    "status": "removed",
    "additions": 0,
    "deletions": 44,
    "changes": 44,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/command_groups/StartIntakeCG.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/command_groups/StartIntakeCG.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/command_groups/StartIntakeCG.java?ref=f225f4e63f2ba8ac5f02ff18c8f616542676988d",
    "patch": "@@ -1,44 +0,0 @@\n-/*----------------------------------------------------------------------------*/\n-/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n-/* Open Source Software - may be modified and shared by FRC teams. The code   */\n-/* must be accompanied by the FIRST BSD license file in the root directory of */\n-/* the project.                                                               */\n-/*----------------------------------------------------------------------------*/\n-\n-package frc.robot.command_groups;\n-\n-import edu.wpi.first.wpilibj.command.CommandGroup;\n-import frc.robot.magazine.Magazine.BallHandlingState;\n-import frc.robot.intake.commands.DeployIntake;\n-\n-public class StartIntakeCG extends CommandGroup {\n-  /**\n-   * Add your docs here.\n-   */\n-  public StartIntakeCG(boolean runRoller) {\n-    // Add Commands here:\n-    // e.g. addSequential(new Command1());\n-    // addSequential(new Command2());\n-    // these will run in order.\n-\n-    // To run multiple commands at the same time,\n-    // use addParallel()\n-    // e.g. addParallel(new Command1());\n-    // addSequential(new Command2());\n-    // Command1 and Command2 will run in parallel.\n-\n-    // A command group will require all of the subsystems that each member\n-    // would require.\n-    // e.g. if Command1 requires chassis, and Command2 requires arm,\n-    // a CommandGroup containing them would require both the chassis and the\n-    // arm.\n-\n-    // Run the ball handling subsystems in INTAKE mode.  Each subsystem will \n-    // look at the various beam breaks in the magazine to determine whether it\n-    // should run or not.\n-\n-    addParallel(new DeployIntake(runRoller));\n-    addParallel(new SetBallHandlingCG(BallHandlingState.INTAKE));\n-  \n-  }\n-}"
  },
  {
    "sha": "7c69bc8036bad81cdb271e79a9d459bb2ef92c06",
    "filename": "src/main/java/frc/robot/command_groups/StopIntakeCG.java",
    "status": "removed",
    "additions": 0,
    "deletions": 41,
    "changes": 41,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/command_groups/StopIntakeCG.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/command_groups/StopIntakeCG.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/command_groups/StopIntakeCG.java?ref=f225f4e63f2ba8ac5f02ff18c8f616542676988d",
    "patch": "@@ -1,41 +0,0 @@\n-/*----------------------------------------------------------------------------*/\n-/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n-/* Open Source Software - may be modified and shared by FRC teams. The code   */\n-/* must be accompanied by the FIRST BSD license file in the root directory of */\n-/* the project.                                                               */\n-/*----------------------------------------------------------------------------*/\n-\n-package frc.robot.command_groups;\n-\n-import edu.wpi.first.wpilibj.command.CommandGroup;\n-import frc.robot.magazine.Magazine.BallHandlingState;\n-import frc.robot.intake.commands.RetractIntake;\n-\n-public class StopIntakeCG extends CommandGroup {\n-  /**\n-   * Add your docs here.\n-   */\n-  public StopIntakeCG() {\n-    // Add Commands here:\n-    // e.g. addSequential(new Command1());\n-    // addSequential(new Command2());\n-    // these will run in order.\n-\n-    // To run multiple commands at the same time,\n-    // use addParallel()\n-    // e.g. addParallel(new Command1());\n-    // addSequential(new Command2());\n-    // Command1 and Command2 will run in parallel.\n-\n-    // A command group will require all of the subsystems that each member\n-    // would require.\n-    // e.g. if Command1 requires chassis, and Command2 requires arm,\n-    // a CommandGroup containing them would require both the chassis and the\n-    // arm.\n-        // Run the ball handling subsystems in INTAKE mode.  Each subsystem will \n-    // look at the various beam breaks in the magazine to determine whether it\n-    // should run or not.\n-    addParallel(new RetractIntake());\n-    addParallel(new SetBallHandlingCG(BallHandlingState.INTAKE));\n-  }\n-}"
  },
  {
    "sha": "5641e9b8d1d3f123115d89ca2a35ab430b413f5e",
    "filename": "src/main/java/frc/robot/command_groups/StopShootingCG.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/StopShootingCG.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/command_groups/StopShootingCG.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/command_groups/StopShootingCG.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,28 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.command_groups;\n+\n+import com.team2363.logger.HelixEvents;\n+\n+import edu.wpi.first.wpilibj.command.CommandGroup;\n+import frc.robot.magazine.commands.StopMagazine;\n+import frc.robot.command_groups.LoadMagazineCG;\n+\n+public class StopShootingCG extends CommandGroup {\n+  /**\n+   * Add your docs here.\n+   */\n+  public StopShootingCG() {\n+\n+    HelixEvents.getInstance().addEvent(\"MAGAZINE\", \"Stop Shooting CG\");\n+\n+    addSequential(new StopMagazine());\n+    addSequential(new LoadMagazineCG());\n+  \n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bcf2fc33df33fe1bbb5b3dbb5cb0227eb6143c14",
    "filename": "src/main/java/frc/robot/intake/Intake.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/intake/Intake.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/intake/Intake.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/intake/Intake.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -9,10 +9,6 @@\n \n import edu.wpi.first.wpilibj.command.Subsystem;\n \n-import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n-import frc.robot.command_groups.StopIntakeCG;\n-\n-import frc.robot.intake.commands.RetractIntake;\n import edu.wpi.first.wpilibj.DoubleSolenoid;\n import edu.wpi.first.wpilibj.DoubleSolenoid.Value;\n \n@@ -102,7 +98,7 @@ private void setupLogs() {\n \n     @Override\n     public void initDefaultCommand() {\n-        setDefaultCommand(new RetractIntake());\n+        //setDefaultCommand(new RetractIntake());\n     }\n \n     @Override"
  },
  {
    "sha": "491564c2874ee3037495b8df64e7f298048d7617",
    "filename": "src/main/java/frc/robot/intake/commands/DeployIntake.java",
    "status": "modified",
    "additions": 9,
    "deletions": 4,
    "changes": 13,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/intake/commands/DeployIntake.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/intake/commands/DeployIntake.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/intake/commands/DeployIntake.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -4,6 +4,7 @@\n import com.team2363.logger.HelixEvents;\n \n import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.command_groups.LoadMagazineCG;\n import frc.robot.intake.Intake;\n \n public class DeployIntake extends Command {\n@@ -24,7 +25,10 @@ public DeployIntake(boolean runRoller) {\n   protected void initialize() {\n     HelixEvents.getInstance().addEvent(\"INTAKE\", \"Starting DeployIntake\");\n \n+    parallelCommand().start();\n+\n     myIntake.extend();\n+    \n     if (runRoller) {\n       myIntake.rollerIn();\n     } else {\n@@ -35,25 +39,26 @@ protected void initialize() {\n   // Called repeatedly when this Command is scheduled to run\n   @Override\n   protected void execute() {\n-\n   }\n \n   // Make this return true when this Command no longer needs to run execute()\n   @Override\n   protected boolean isFinished() {\n-    return false; // Never finish\n+    return false;\n   }\n \n   // Called once after isFinished returns true\n   @Override\n   protected void end() {\n-    HelixEvents.getInstance().addEvent(\"INTAKE\", \"Ending DeployIntake\");\n   }\n \n   // Called when another command which requires one or more of the same\n   // subsystems is scheduled to run\n   @Override\n   protected void interrupted() {\n-    // Default Command will retract and stop Intake\n+  }\n+\n+  protected Command parallelCommand() {\n+    return new LoadMagazineCG();\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "23dc44c72396b3d48696717971fbbfd16e9cea1b",
    "filename": "src/main/java/frc/robot/intake/commands/RetractIntake.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/intake/commands/RetractIntake.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/intake/commands/RetractIntake.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/intake/commands/RetractIntake.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -17,7 +17,7 @@ public RetractIntake() {\n   // Called just before this Command runs the first time\n   @Override\n   protected void initialize() {\n-    // HelixEvents.getInstance().addEvent(\"INTAKE\", \"Starting RetractIntake\");\n+    HelixEvents.getInstance().addEvent(\"INTAKE\", \"Starting RetractIntake\");\n     Intake.getIntake().rollerOff();\n     Intake.getIntake().retract();\n   }\n@@ -36,7 +36,6 @@ protected boolean isFinished() {\n   // Called once after isFinished returns true\n   @Override\n   protected void end() {\n-    // HelixEvents.getInstance().addEvent(\"INTAKE\", \"Ending RetractIntake\");\n   }\n \n   // Called when another command which requires one or more of the same"
  },
  {
    "sha": "fd05094f01e21c4b1596016199f081e365537349",
    "filename": "src/main/java/frc/robot/magazine/Magazine.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/magazine/Magazine.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/magazine/Magazine.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/magazine/Magazine.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -46,6 +46,8 @@\n     SHOOT, INTAKE, SHOOT_NO_LOGIC, INTAKE_NO_LOGIC, SHOOT_ONE, ADVANCE, STOP\n   };\n \n+  private final double velocitySP = 800;\n+\n   private Magazine() {\n     super();\n \n@@ -126,8 +128,8 @@ public Boolean ballAtShooter() {\n     // return(false);\n   }\n \n-  public Boolean ballAtSpacer() {\n-    return Spacer.getSpacer().isBallPresent();\n+  public double getVelocitySP(){\n+    return velocitySP;\n   }\n \n   private void setupLogs() {\n@@ -141,7 +143,7 @@ public void periodic() {\n     super.periodic();\n \n     SmartDashboard.putNumber(\"Ball Count\", ball_count);\n-    SmartDashboard.putBoolean(\"Ball At Spacer\", ballAtSpacer());\n+    SmartDashboard.putBoolean(\"Ball At Spacer\", Spacer.getSpacer().ballAtSpacer());\n     SmartDashboard.putBoolean(\"Ball At Shooter\", ballAtShooter());\n \n   }"
  },
  {
    "sha": "abe20f6390dee44a8a62787569926ccf7328b5d7",
    "filename": "src/main/java/frc/robot/magazine/commands/RunMagazine.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/magazine/commands/RunMagazine.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/magazine/commands/RunMagazine.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/magazine/commands/RunMagazine.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,55 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.magazine.commands;\n+\n+import com.team2363.logger.HelixEvents;\n+\n+import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.magazine.Magazine;\n+\n+public class RunMagazine extends Command {\n+\n+  public RunMagazine() {\n+    // Use requires() here to declare subsystem dependencies\n+    // eg. requires(chassis);\n+    requires(Magazine.getMagazine());\n+  }\n+\n+  // Called just before this Command runs the first time\n+  @Override\n+  protected void initialize() {\n+    if (isFinished()) {\n+      end();\n+    } else {\n+      HelixEvents.getInstance().addEvent(\"MAGAZINE\", \"Run Magazine\");\n+      Magazine.getMagazine().setVelocity(Magazine.getMagazine().getVelocitySP());  \n+    }\n+  }\n+\n+  // Called repeatedly when this Command is scheduled to run\n+  @Override\n+  protected void execute() {\n+  }\n+\n+  // Make this return true when this Command no longer needs to run execute()\n+  @Override\n+  protected boolean isFinished() {\n+    return false;\n+  }\n+\n+  // Called once after isFinished returns true\n+  @Override\n+  protected void end() {\n+  }\n+\n+  // Called when another command which requires one or more of the same\n+  // subsystems is scheduled to run\n+  @Override\n+  protected void interrupted() {\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ae62b57848cac06f8575636b417e94c68081262e",
    "filename": "src/main/java/frc/robot/magazine/commands/SetMagazineTo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 127,
    "changes": 127,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/magazine/commands/SetMagazineTo.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/magazine/commands/SetMagazineTo.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/magazine/commands/SetMagazineTo.java?ref=f225f4e63f2ba8ac5f02ff18c8f616542676988d",
    "patch": "@@ -1,127 +0,0 @@\n-/*----------------------------------------------------------------------------*/\n-/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n-/* Open Source Software - may be modified and shared by FRC teams. The code   */\n-/* must be accompanied by the FIRST BSD license file in the root directory of */\n-/* the project.                                                               */\n-/*----------------------------------------------------------------------------*/\n-\n-package frc.robot.magazine.commands;\n-\n-import com.team2363.logger.HelixEvents;\n-\n-import edu.wpi.first.wpilibj.command.Command;\n-import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n-import frc.robot.magazine.Magazine;\n-import frc.robot.magazine.Magazine.BallHandlingState;\n-import frc.robot.shooter.Shooter;\n-\n-public class SetMagazineTo extends Command {\n-\n-  public BallHandlingState action;\n-\n-  private double SHOOT_SPEED = 800;\n-  private double INTAKE_SPEED = 800;\n-\n-  private double power = 0.0;\n-\n-  private Boolean ballAtShooterLastTime = false;\n-  private Boolean ballAtSpacerLastTime = false;\n-  private Boolean ballAtShooter = false;\n-  private Boolean ballAtSpacer = false;\n-\n-  public SetMagazineTo(BallHandlingState action) {\n-    // Use requires() here to declare subsystem dependencies\n-    // eg. requires(chassis);\n-    requires(Magazine.getMagazine());\n-    this.action = action;\n-  }\n-\n-  // Called just before this Command runs the first time\n-  @Override\n-  protected void initialize() {\n-    HelixEvents.getInstance().addEvent(\"MAGAZINE\", \"SetMagazineTo\" + action.toString());\n-  }\n-\n-  // Called repeatedly when this Command is scheduled to run\n-  @Override\n-  protected void execute() {\n-\n-\n-\n-    ballAtShooterLastTime = ballAtShooter;\n-    ballAtSpacerLastTime = ballAtSpacer;\n-    ballAtShooter = Magazine.getMagazine().ballAtShooter();\n-    ballAtSpacer = Magazine.getMagazine().ballAtSpacer();\n-\n-    if (ballAtSpacerLastTime && !ballAtSpacer) Magazine.getMagazine().IncreaseBallCount();\n-    if (Magazine.getMagazine().getBallCount() == 3 && ballAtSpacer) Magazine.getMagazine().setBallCount(4);\n-    if (action == Magazine.BallHandlingState.SHOOT) Magazine.getMagazine().setBallCount(0);\n-\n-    SmartDashboard.putString(\"Magazine State\", action.toString());\n-    SmartDashboard.putNumber(\"Magazine Velocity\", Magazine.getMagazine().getVelocity());\n-\n-    switch (action) {\n-\n-    case SHOOT_NO_LOGIC: // For testing purposes before beam breaks.\n-      Magazine.getMagazine().setVelocity(SHOOT_SPEED);\n-      break;\n-\n-    case INTAKE_NO_LOGIC: // For testing purposes before beam breaks.\n-      Magazine.getMagazine().setVelocity(INTAKE_SPEED);\n-      break;\n-      \n-    case SHOOT_ONE:  \n-      // power = 0.0;\n-      // if (Shooter.getShooter().isAtRPM() && ballAtSpacer) {\n-      //   power = SHOOT_SPEED;\n-      // }\n-      // Magazine.getMagazine().setPower(power);\n-      // break;\n-\n-    case SHOOT:\n-      if (Shooter.getShooter().isAtRPM()) {\n-        Magazine.getMagazine().setVelocity(SHOOT_SPEED);\n-      } else {\n-        Magazine.getMagazine().setPower(0);\n-      }\n-      break;\n-\n-    case ADVANCE:  \n-      // Called when SHOOT ONE button is released to advance the magazine to next ball.\n-      // Magazine will run indefinitely, when no balls left in magazine.\n-\n-      break;\n-\n-    case INTAKE:\n-      if (!ballAtShooter && ballAtSpacer) {\n-        Magazine.getMagazine().setVelocity(SHOOT_SPEED);\n-      } else {\n-        Magazine.getMagazine().setPower(0);\n-      }\n-      break;\n-\n-    case STOP:\n-    default:\n-      Magazine.getMagazine().setPower(0.0);\n-      break;\n-    }\n-  }\n-\n-  // Make this return true when this Command no longer needs to run execute()\n-  @Override\n-  protected boolean isFinished() {\n-    return false;\n-  }\n-\n-  // Called once after isFinished returns true\n-  @Override\n-  protected void end() {\n-  }\n-\n-  // Called when another command which requires one or more of the same\n-  // subsystems is scheduled to run\n-  @Override\n-  protected void interrupted() {\n-    HelixEvents.getInstance().addEvent(\"MAGAZINE\", \"Interrupted SetMagazineTo\" + action.toString());\n-  }\n-}"
  },
  {
    "sha": "da84bbe21fa43e3fd105bc88360d60d40c3f06cc",
    "filename": "src/main/java/frc/robot/magazine/commands/StopMagazine.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/magazine/commands/StopMagazine.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/magazine/commands/StopMagazine.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/magazine/commands/StopMagazine.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,51 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.magazine.commands;\n+\n+import com.team2363.logger.HelixEvents;\n+\n+import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.magazine.Magazine;\n+\n+public class StopMagazine extends Command {\n+\n+  public StopMagazine() {\n+    // Use requires() here to declare subsystem dependencies\n+    // eg. requires(chassis);\n+    requires(Magazine.getMagazine());\n+  }\n+\n+  // Called just before this Command runs the first time\n+  @Override\n+  protected void initialize() {\n+    HelixEvents.getInstance().addEvent(\"MAGAZINE\", \"Stop Magazine\");\n+    Magazine.getMagazine().setPower(0.0);\n+  }\n+\n+  // Called repeatedly when this Command is scheduled to run\n+  @Override\n+  protected void execute() {\n+  }\n+\n+  // Make this return true when this Command no longer needs to run execute()\n+  @Override\n+  protected boolean isFinished() {\n+    return true;\n+  }\n+\n+  // Called once after isFinished returns true\n+  @Override\n+  protected void end() {\n+  }\n+\n+  // Called when another command which requires one or more of the same\n+  // subsystems is scheduled to run\n+  @Override\n+  protected void interrupted() {\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "89d22a22bd91b7f82636d0bd2afd2edd0e93388a",
    "filename": "src/main/java/frc/robot/oi/OI.java",
    "status": "modified",
    "additions": 9,
    "deletions": 20,
    "changes": 29,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/oi/OI.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/oi/OI.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/oi/OI.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -17,39 +17,27 @@\n import edu.wpi.first.wpilibj.GenericHID.RumbleType;\n import edu.wpi.first.wpilibj.buttons.JoystickButton;\n import edu.wpi.first.wpilibj.buttons.Trigger;\n-import frc.robot.command_groups.SetBallHandlingCG;\n-import frc.robot.command_groups.StartIntakeCG;\n-import frc.robot.command_groups.StopIntakeCG;\n import frc.paths.bluezone;\n import frc.paths.goback;\n-import frc.paths.yellowzone;\n-import frc.robot.command_groups.AimSpin;\n import frc.robot.command_groups.ClimbCG;\n import frc.robot.command_groups.Close;\n import frc.robot.command_groups.Far;\n import frc.robot.command_groups.LayUpCG;\n import frc.robot.command_groups.SecondClose;\n import frc.robot.command_groups.SecondFar;\n-import frc.robot.drivetrain.commands.CarsonDrive;\n+import frc.robot.command_groups.ShootMagazineCG;\n+import frc.robot.command_groups.ShootOneCG;\n+import frc.robot.command_groups.StopShootingCG;\n import frc.robot.drivetrain.commands.visionAim;\n import frc.robot.flashlight.commands.flashlightOff;\n import frc.robot.flashlight.commands.flashlightOn;\n-import frc.robot.intake.Intake;\n+import frc.robot.intake.commands.DeployIntake;\n import frc.robot.intake.commands.RetractIntake;\n-import frc.robot.intake.commands.ReverseIntake;\n-import frc.robot.magazine.Magazine.BallHandlingState;\n-import frc.robot.magazine.commands.SetMagazineTo;\n-import frc.robot.magazine.commands.ShootOne;\n-import frc.robot.shooter.Position;\n import frc.robot.shooter.Shooter;\n import frc.robot.shooter.commands.BumpShooter;\n import frc.robot.shooter.commands.HoodGoDown;\n import frc.robot.shooter.commands.HoodGoUp;\n-import frc.robot.shooter.commands.SpinShooterUp;\n import frc.robot.shooter.commands.StopShooter;\n-import frc.robot.shooter.commands.setRealRPM;\n-import frc.robot.spacer.commands.SetSpacerTo;\n-import frc.robot.telescope.commands.StowTelescope;\n import edu.wpi.first.wpilibj.buttons.Button;\n \n /**\n@@ -83,8 +71,8 @@ private OI() {\n \n     // Intake buttons - Right trigger activates intake, left trigger retractes and\n     // disables\n-    new JoystickButton(operator, ControllerMap.PS4_R1).whenPressed(new StartIntakeCG(true));\n-    new JoystickButton(operator, ControllerMap.PS4_L1).whenReleased(new StopIntakeCG());\n+    new JoystickButton(operator, ControllerMap.PS4_R1).whenPressed(new DeployIntake(true));\n+    new JoystickButton(operator, ControllerMap.PS4_L1).whenReleased(new RetractIntake());\n \n     // Set shooter speeds - Triangle farthest zone from goal, circle third farthest,\n     // x second closest, square closest\n@@ -110,8 +98,9 @@ private OI() {\n     // Aiming is on a whileHeld reft button\n \n     // Shooting is on a whenPressed / whenReleased right button\n-    new JoystickButton(driver, ControllerMap.X_BOX_RB).whenPressed(new SetBallHandlingCG(BallHandlingState.SHOOT));\n-    new JoystickButton(driver, ControllerMap.X_BOX_RB).whenReleased(new SetBallHandlingCG(BallHandlingState.INTAKE));\n+    //new JoystickButton(driver, ControllerMap.X_BOX_RB).whenPressed(new ShootMagazineCG());\n+    new JoystickButton(driver, ControllerMap.X_BOX_RB).whenPressed(new ShootOneCG());\n+    new JoystickButton(driver, ControllerMap.X_BOX_RB).whenReleased(new StopShootingCG());\n \n     new JoystickButton(driver, ControllerMap.X_BOX_LB).whenPressed(new SecondFar());\n     new JoystickButton(driver, ControllerMap.X_BOX_LB).whenReleased(new StopShooter());"
  },
  {
    "sha": "69ca70a3e600a23f6685fcbbfd5323bbd6dd7040",
    "filename": "src/main/java/frc/robot/shooter/commands/setRealRPM.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/shooter/commands/setRealRPM.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/shooter/commands/setRealRPM.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/shooter/commands/setRealRPM.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -10,7 +10,6 @@\n import edu.wpi.first.wpilibj.Timer;\n import edu.wpi.first.wpilibj.command.Command;\n import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n-import frc.robot.command_groups.SetBallHandlingCG;\n import frc.robot.magazine.Magazine.BallHandlingState;\n import frc.robot.shooter.Position;\n import frc.robot.shooter.Shooter;"
  },
  {
    "sha": "45b7586a81316fc82c4664cb332993f1cab76e26",
    "filename": "src/main/java/frc/robot/spacer/Spacer.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/spacer/Spacer.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/spacer/Spacer.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/spacer/Spacer.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -37,6 +37,8 @@\n   private final CANDigitalInput limit;\n \n   private final CANPIDController controller;\n+\n+  private final double velocitySP = 800;\n   \n   public Spacer() {\n     super();\n@@ -85,14 +87,18 @@ public void setPower(double power) {\n     motor.set(power);\n   }\n \n-  public boolean isBallPresent() {\n+  public boolean ballAtSpacer() {\n     return motor.getForwardLimitSwitch(LimitSwitchPolarity.kNormallyOpen).get();\n   }\n \n   public boolean isSpacerRunning() {\n     return spacer_running;\n   }\n   \n+  public double getVelocitySP(){\n+    return velocitySP;\n+  }\n+\n   private void setupLogs() {\n     HelixLogger.getInstance().addSource(\"SPACER CURRENT\", motor::getOutputCurrent);\n     HelixLogger.getInstance().addSource(\"SPACER VOLTAGE\", motor::getBusVoltage);\n@@ -101,7 +107,5 @@ private void setupLogs() {\n   @Override\n   public void initDefaultCommand() {\n     // Set the default command for a subsystem here.\n-    // setDefaultCommand(new MySpecialCommand());\n-\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "4ca5955131530ccd6b37eaf464853aecdc760022",
    "filename": "src/main/java/frc/robot/spacer/commands/RunSpacer.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/spacer/commands/RunSpacer.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/spacer/commands/RunSpacer.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/spacer/commands/RunSpacer.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,55 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.spacer.commands;\n+\n+import com.team2363.logger.HelixEvents;\n+\n+import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.spacer.Spacer;\n+\n+public class RunSpacer extends Command {\n+\n+  public RunSpacer() {\n+    // Use requires() here to declare subsystem dependencies\n+    // eg. requires(chassis);\n+    requires(Spacer.getSpacer());\n+  }\n+\n+  // Called just before this Command runs the first time\n+  @Override\n+  protected void initialize() {\n+    if (isFinished()) {\n+      end();\n+    } else {\n+      HelixEvents.getInstance().addEvent(\"SPACER\", \"Run Spacer\");\n+      Spacer.getSpacer().setVelocity(Spacer.getSpacer().getVelocitySP());\n+    }\n+  }\n+\n+  // Called repeatedly when this Command is scheduled to run\n+  @Override\n+  protected void execute() {\n+  }\n+\n+  // Make this return true when this Command no longer needs to run execute()\n+  @Override\n+  protected boolean isFinished() {\n+    return false;\n+  }\n+\n+  // Called once after isFinished returns true\n+  @Override\n+  protected void end() {\n+  }\n+\n+  // Called when another command which requires one or more of the same\n+  // subsystems is scheduled to run\n+  @Override\n+  protected void interrupted() {\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "22f7e73d774fe506d8edbbf88f89a61bfcf2271b",
    "filename": "src/main/java/frc/robot/spacer/commands/SetSpacerTo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 112,
    "changes": 112,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/spacer/commands/SetSpacerTo.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/f225f4e63f2ba8ac5f02ff18c8f616542676988d/src/main/java/frc/robot/spacer/commands/SetSpacerTo.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/spacer/commands/SetSpacerTo.java?ref=f225f4e63f2ba8ac5f02ff18c8f616542676988d",
    "patch": "@@ -1,112 +0,0 @@\n-/*----------------------------------------------------------------------------*/\n-/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n-/* Open Source Software - may be modified and shared by FRC teams. The code   */\n-/* must be accompanied by the FIRST BSD license file in the root directory of */\n-/* the project.                                                               */\n-/*----------------------------------------------------------------------------*/\n-\n-package frc.robot.spacer.commands;\n-\n-import com.team2363.logger.HelixEvents;\n-\n-import edu.wpi.first.wpilibj.command.Command;\n-import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n-import frc.robot.magazine.Magazine;\n-import frc.robot.magazine.Magazine.BallHandlingState;\n-import frc.robot.shooter.Shooter;\n-import frc.robot.spacer.Spacer;\n-\n-public class SetSpacerTo extends Command {\n-\n-  private double SHOOT_SPEED = 300;\n-  private double INTAKE_SPEED = 300;\n-\n-  private double power = 0.0;\n-\n-  Boolean ballAtShooter = false;\n-  Boolean ballAtSpacer = false;\n-  Boolean ballAtSpacerLastTime = false;\n-\n-  BallHandlingState action;\n-  public SetSpacerTo(BallHandlingState action) {\n-    // Use requires() here to declare subsystem dependencies\n-    // eg. requires(chassis);\n-    requires(Spacer.getSpacer());\n-    this.action = action;\n-  }\n-\n-  // Called just before this Command runs the first time\n-  @Override\n-  protected void initialize() {\n-    HelixEvents.getInstance().addEvent(\"SPACER\", \"SetSpacerTo \" + action.toString());\n-  }\n-\n-  // Called repeatedly when this Command is scheduled to run\n-  @Override\n-  protected void execute() {\n-\n-    ballAtSpacerLastTime = ballAtSpacer;\n-    ballAtShooter = Magazine.getMagazine().ballAtShooter();\n-    ballAtSpacer = Magazine.getMagazine().ballAtSpacer();\n-\n-    SmartDashboard.putString(\"Spacer State\", action.toString());\n-    SmartDashboard.putNumber(\"Spacer Velocity\", Spacer.getSpacer().getVelocity());\n-\n-    switch (action) {\n-      case SHOOT_NO_LOGIC:\n-        //  Case for no ball spacing logic when spacer is in SHOOT mode.\n-        Spacer.getSpacer().setVelocity(SHOOT_SPEED);\n-        break;\n-\n-      case INTAKE_NO_LOGIC:\n-        //  Case for no ball spacing logic when Spacer is in INTAKE mode.\n-        Spacer.getSpacer().setVelocity(INTAKE_SPEED);\n-        break;\n-\n-      case SHOOT_ONE:  //SHOOT ONE is same as SHOOT, except case ADVANCE is executed on button release.\n-      case SHOOT:\n-        // Case for ball spacing logic when spacer is in SHOOT mode.\n-        if (Shooter.getShooter().isAtRPM()) {\n-          Spacer.getSpacer().setVelocity(SHOOT_SPEED);\n-        } else {\n-          Spacer.getSpacer().setPower(0);\n-        }\n-        \n-        break;\n-      \n-      case ADVANCE:\n-      case INTAKE:\n-        // Case for ball spacing logic when spacer is in INTAKE mode.\n-        if (ballAtShooter) { \n-          Spacer.getSpacer().setPower(0);\n-        } else {\n-          Spacer.getSpacer().setVelocity(INTAKE_SPEED);\n-        }\n-        \n-        break;\n-\n-      case STOP:\n-      default:\n-        Spacer.getSpacer().setPower(0);\n-        break;\n-    }\n-  }\n-\n-  // Make this return true when this Command no longer needs to run execute()\n-  @Override\n-  protected boolean isFinished() {\n-    return false;\n-  }\n-\n-  // Called once after isFinished returns true\n-  @Override\n-  protected void end() {\n-  }\n-\n-  // Called when another command which requires one or more of the same\n-  // subsystems is scheduled to run\n-  @Override\n-  protected void interrupted() {\n-    HelixEvents.getInstance().addEvent(\"SPACER\", \"SetSpacerTo \" + action.toString() + \"Interrupted.\");\n-  }\n-}"
  },
  {
    "sha": "11bac549a516c1d0816da4f415070eddc7469fd2",
    "filename": "src/main/java/frc/robot/spacer/commands/StopSpacer.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/blob/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/spacer/commands/StopSpacer.java",
    "raw_url": "https://github.com/TripleHelixProgramming/InfiniteRechargeAtHome/raw/e06216623aa8feab036f4a551eac16e24d6a27f0/src/main/java/frc/robot/spacer/commands/StopSpacer.java",
    "contents_url": "https://api.github.com/repos/TripleHelixProgramming/InfiniteRechargeAtHome/contents/src/main/java/frc/robot/spacer/commands/StopSpacer.java?ref=e06216623aa8feab036f4a551eac16e24d6a27f0",
    "patch": "@@ -0,0 +1,51 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */\n+/* Open Source Software - may be modified and shared by FRC teams. The code   */\n+/* must be accompanied by the FIRST BSD license file in the root directory of */\n+/* the project.                                                               */\n+/*----------------------------------------------------------------------------*/\n+\n+package frc.robot.spacer.commands;\n+\n+import com.team2363.logger.HelixEvents;\n+\n+import edu.wpi.first.wpilibj.command.Command;\n+import frc.robot.spacer.Spacer;\n+\n+public class StopSpacer extends Command {\n+\n+  public StopSpacer() {\n+    // Use requires() here to declare subsystem dependencies\n+    // eg. requires(chassis);\n+    requires(Spacer.getSpacer());\n+  }\n+\n+  // Called just before this Command runs the first time\n+  @Override\n+  protected void initialize() {\n+    HelixEvents.getInstance().addEvent(\"SPACER\", \"Stop Spacer\");\n+    Spacer.getSpacer().setPower(0.0);\n+  }\n+\n+  // Called repeatedly when this Command is scheduled to run\n+  @Override\n+  protected void execute() {\n+  }\n+\n+  // Make this return true when this Command no longer needs to run execute()\n+  @Override\n+  protected boolean isFinished() {\n+    return true;\n+  }\n+\n+  // Called once after isFinished returns true\n+  @Override\n+  protected void end() {\n+  }\n+\n+  // Called when another command which requires one or more of the same\n+  // subsystems is scheduled to run\n+  @Override\n+  protected void interrupted() {\n+  }\n+}\n\\ No newline at end of file"
  }
]
