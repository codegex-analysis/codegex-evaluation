[
  {
    "sha": "0f0c0801c5bfec291f62d0f88200109c7aa8274d",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/commands/GamerulesCommand.java",
    "status": "modified",
    "additions": 27,
    "deletions": 8,
    "changes": 35,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/commands/GamerulesCommand.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/commands/GamerulesCommand.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/commands/GamerulesCommand.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -8,6 +8,11 @@\n package com.onarandombox.MultiverseCore.commands;\n \n import com.onarandombox.MultiverseCore.MultiverseCore;\n+import com.onarandombox.MultiverseCore.api.MultiverseWorld;\n+import com.onarandombox.MultiverseCore.displaytools.ColorAlternator;\n+import com.onarandombox.MultiverseCore.displaytools.ContentDisplay;\n+import com.onarandombox.MultiverseCore.displaytools.DisplayHandlers;\n+import com.onarandombox.MultiverseCore.displaytools.DisplaySettings;\n import org.bukkit.Bukkit;\n import org.bukkit.ChatColor;\n import org.bukkit.GameRule;\n@@ -16,7 +21,10 @@\n import org.bukkit.entity.Player;\n import org.bukkit.permissions.PermissionDefault;\n \n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Allows management of Anchor Destinations.\n@@ -68,15 +76,26 @@ public void runCommand(CommandSender sender, List<String> args) {\n             }\n         }\n \n-        final StringBuilder gameRules = new StringBuilder();\n-        for (final String gameRule : world.getGameRules()) {\n-            if (gameRules.length() != 0) {\n-                gameRules.append(ChatColor.WHITE).append(\", \");\n+        new ContentDisplay.Builder<Map<String, Object>>()\n+                .sender(sender)\n+                .header(\"=== Gamerules for %s%s%s ===\", ChatColor.AQUA, world.getName(), ChatColor.WHITE)\n+                .contents(getGameRuleMap(world))\n+                .displayHandler(DisplayHandlers.INLINE_MAP)\n+                .colorTool(ColorAlternator.with(ChatColor.GREEN, ChatColor.GOLD))\n+                .setting(DisplaySettings.OPERATOR, \": \")\n+                .display();\n+    }\n+\n+    private Map<String, Object> getGameRuleMap(World world) {\n+        Map<String, Object> gameRuleMap = new HashMap<>();\n+        for (GameRule<?> rule : GameRule.values()) {\n+            Object value = world.getGameRuleValue(rule);\n+            if (value == null) {\n+                gameRuleMap.put(rule.getName(), \"null\");\n+                continue;\n             }\n-            gameRules.append(ChatColor.AQUA).append(gameRule).append(ChatColor.WHITE).append(\": \");\n-            gameRules.append(ChatColor.GREEN).append(world.getGameRuleValue(GameRule.getByName(gameRule)));\n+            gameRuleMap.put(rule.getName(), value);\n         }\n-        sender.sendMessage(\"=== Gamerules for \" + ChatColor.AQUA + world.getName() + ChatColor.WHITE + \" ===\");\n-        sender.sendMessage(gameRules.toString());\n+        return gameRuleMap;\n     }\n }"
  },
  {
    "sha": "deb7b54966455381802f1fcd2265e2d27fc95906",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/commands/ListCommand.java",
    "status": "modified",
    "additions": 75,
    "deletions": 81,
    "changes": 156,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/commands/ListCommand.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/commands/ListCommand.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/commands/ListCommand.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -7,124 +7,118 @@\n \n package com.onarandombox.MultiverseCore.commands;\n \n+import com.dumptruckman.minecraft.util.Logging;\n import com.onarandombox.MultiverseCore.MultiverseCore;\n import com.onarandombox.MultiverseCore.api.MultiverseWorld;\n+import com.onarandombox.MultiverseCore.displaytools.ColorAlternator;\n+import com.onarandombox.MultiverseCore.displaytools.ContentDisplay;\n+import com.onarandombox.MultiverseCore.displaytools.ContentFilter;\n+import com.onarandombox.MultiverseCore.displaytools.DisplayHandlers;\n+import com.onarandombox.MultiverseCore.displaytools.DisplaySettings;\n import org.bukkit.ChatColor;\n-import org.bukkit.World.Environment;\n+import org.bukkit.World;\n import org.bukkit.command.CommandSender;\n import org.bukkit.entity.Player;\n import org.bukkit.permissions.PermissionDefault;\n+import org.jetbrains.annotations.NotNull;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * Displays a listing of all worlds that a player can enter.\n  */\n-public class ListCommand extends PaginatedCoreCommand<String> {\n+public class ListCommand extends MultiverseCommand {\n \n     public ListCommand(MultiverseCore plugin) {\n         super(plugin);\n         this.setName(\"World Listing\");\n-        this.setCommandUsage(\"/mv list [page]\");\n+        this.setCommandUsage(\"/mv list [filter] [page]\");\n         this.setArgRange(0, 2);\n         this.addKey(\"mvlist\");\n         this.addKey(\"mvl\");\n         this.addKey(\"mv list\");\n         this.setPermission(\"multiverse.core.list.worlds\", \"Displays a listing of all worlds that you can enter.\", PermissionDefault.OP);\n-        this.setItemsPerPage(8); // SUPPRESS CHECKSTYLE: MagicNumberCheck\n     }\n \n-    private List<String> getFancyWorldList(Player p) {\n-        List<String> worldList = new ArrayList<String>();\n-        for (MultiverseWorld world : this.plugin.getMVWorldManager().getMVWorlds()) {\n-\n-            if (p != null && (!this.plugin.getMVPerms().canEnterWorld(p, world))) {\n-                continue;\n-            }\n-\n-            ChatColor color = ChatColor.GOLD;\n-            Environment env = world.getEnvironment();\n-            if (env == Environment.NETHER) {\n-                color = ChatColor.RED;\n-            } else if (env == Environment.NORMAL) {\n-                color = ChatColor.GREEN;\n-            } else if (env == Environment.THE_END) {\n-                color = ChatColor.AQUA;\n-            }\n-            StringBuilder builder = new StringBuilder();\n-            builder.append(world.getColoredWorldString()).append(ChatColor.WHITE);\n-            builder.append(\" - \").append(color).append(world.getEnvironment());\n-            if (world.isHidden()) {\n-                if (p == null || this.plugin.getMVPerms().hasPermission(p, \"multiverse.core.modify\", true)) {\n-                    // Prefix hidden worlds with an \"[H]\"\n-                    worldList.add(ChatColor.GRAY + \"[H]\" + builder.toString());\n-                }\n-            } else {\n-                worldList.add(builder.toString());\n-            }\n-        }\n-        for (String name : this.plugin.getMVWorldManager().getUnloadedWorlds()) {\n-            if (p == null || this.plugin.getMVPerms().hasPermission(p, \"multiverse.access.\" + name, true)) {\n-                worldList.add(ChatColor.GRAY + name + \" - UNLOADED\");\n+    @Override\n+    public void runCommand(CommandSender sender, List<String> args) {\n+        ContentFilter filter = ContentFilter.DEFAULT;\n+        int page = 1;\n+\n+        // Either page or filter.\n+        if (args.size() == 1) {\n+            try {\n+                page = Integer.parseInt(args.get(0));\n+            } catch (NumberFormatException ignore) {\n+                filter = new ContentFilter(args.get(0));\n             }\n         }\n-        return worldList;\n-    }\n \n-    @Override\n-    protected List<String> getFilteredItems(List<String> availableItems, String filter) {\n-        List<String> filtered = new ArrayList<String>();\n-\n-        for (String s : availableItems) {\n-            if (s.matches(\"(?i).*\" + filter + \".*\")) {\n-                filtered.add(s);\n+        // Filter then page.\n+        if (args.size() == 2) {\n+            filter = new ContentFilter(args.get(0));\n+            try {\n+                page = Integer.parseInt(args.get(1));\n+            } catch (NumberFormatException ignore) {\n+                sender.sendMessage(ChatColor.RED + args.get(1) + \" is not valid number!\");\n             }\n         }\n-        return filtered;\n-    }\n \n-    @Override\n-    protected String getItemText(String item) {\n-        return item;\n+        new ContentDisplay.Builder<Collection<String>>()\n+                .sender(sender)\n+                .header(\"%s====[ Multiverse World List ]====\", ChatColor.GOLD)\n+                .contents(getListContents(sender))\n+                .displayHandler(DisplayHandlers.PAGE_LIST)\n+                .colorTool(ColorAlternator.with(ChatColor.AQUA, ChatColor.GOLD))\n+                .filter(filter)\n+                .setting(DisplaySettings.SHOW_PAGE, page)\n+                .display();\n     }\n \n-    @Override\n-    public void runCommand(CommandSender sender, List<String> args) {\n-        sender.sendMessage(ChatColor.LIGHT_PURPLE + \"====[ Multiverse World List ]====\");\n-        Player p = null;\n-        if (sender instanceof Player) {\n-            p = (Player) sender;\n-        }\n+    private List<String> getListContents(@NotNull CommandSender sender) {\n+        Player player = (sender instanceof Player) ? (Player) sender : null;\n \n+        List<String> worldList = this.plugin.getMVWorldManager().getMVWorlds().stream()\n+                .filter(world -> player == null || plugin.getMVPerms().canEnterWorld(player, world))\n+                .filter(world -> canSeeWorld(player, world))\n+                .map(world -> hiddenText(world) + world.getColoredWorldString() + \" - \" + parseColouredEnvironment(world.getEnvironment()))\n+                .collect(Collectors.toList());\n \n-        FilterObject filterObject = this.getPageAndFilter(args);\n-\n-        List<String> availableWorlds = new ArrayList<String>(this.getFancyWorldList(p));\n-        if (filterObject.getFilter().length() > 0) {\n-            availableWorlds = this.getFilteredItems(availableWorlds, filterObject.getFilter());\n-            if (availableWorlds.size() == 0) {\n-                sender.sendMessage(ChatColor.RED + \"Sorry... \" + ChatColor.WHITE\n-                        + \"No worlds matched your filter: \" + ChatColor.AQUA + filterObject.getFilter());\n-                return;\n-            }\n-        }\n+        this.plugin.getMVWorldManager().getUnloadedWorlds().stream()\n+                .filter(world -> plugin.getMVPerms().hasPermission(sender, \"multiverse.access.\" + world, true))\n+                .map(world -> ChatColor.GRAY + world + \" - UNLOADED\")\n+                .forEach(worldList::add);\n+        \n+        return worldList;\n+    }\n \n-        if (!(sender instanceof Player)) {\n-            for (String c : availableWorlds) {\n-                sender.sendMessage(c);\n-            }\n-            return;\n-        }\n+    private boolean canSeeWorld(Player player, MultiverseWorld world) {\n+        return !world.isHidden()\n+                || player == null\n+                || this.plugin.getMVPerms().hasPermission(player, \"multiverse.core.modify\", true);\n+    }\n \n-        int totalPages = (int) Math.ceil(availableWorlds.size() / (this.itemsPerPage + 0.0));\n+    private String hiddenText(MultiverseWorld world) {\n+        return (world.isHidden()) ? String.format(\"%s[H] \", ChatColor.GRAY) : \"\";\n+    }\n \n-        if (filterObject.getPage() > totalPages) {\n-            filterObject.setPage(totalPages);\n+    private String parseColouredEnvironment(World.Environment env) {\n+        ChatColor color = ChatColor.GOLD;\n+        switch (env) {\n+            case NETHER:\n+                color = ChatColor.RED;\n+                break;\n+            case NORMAL:\n+                color = ChatColor.GREEN;\n+                break;\n+            case THE_END:\n+                color = ChatColor.AQUA;\n+                break;\n         }\n-\n-        sender.sendMessage(ChatColor.AQUA + \" Page \" + filterObject.getPage() + \" of \" + totalPages);\n-\n-        this.showPage(filterObject.getPage(), sender, availableWorlds);\n+        return color + env.toString();\n     }\n }"
  },
  {
    "sha": "a306ad1c2e4254329cee35bbf802c40cf4e0e434",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorAlternator.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorAlternator.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorAlternator.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorAlternator.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,62 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+import org.bukkit.ChatColor;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Helper class to switch between 2 {@link ChatColor}.\n+ */\n+public class ColorAlternator implements ColorTool {\n+\n+    /**\n+     * Creates a new {@link ColorAlternator} with 2 {@link ChatColor}s.\n+     *\n+     * @param colorThis The first color.\n+     * @param colorThat The second color.\n+     * @return The {@link ColorAlternator} created for you.\n+     */\n+    public static ColorAlternator with(@NotNull ChatColor colorThis,\n+                                       @NotNull ChatColor colorThat) {\n+\n+        return new ColorAlternator(colorThis, colorThat);\n+    }\n+\n+    private boolean switcher;\n+    private final ChatColor thisColor;\n+    private final ChatColor thatColor;\n+\n+    /**\n+     * @param colorThis The first color.\n+     * @param colorThat The second color.\n+     */\n+    public ColorAlternator(@NotNull ChatColor colorThis,\n+                           @NotNull ChatColor colorThat) {\n+\n+        this.thisColor = colorThis;\n+        this.thatColor = colorThat;\n+    }\n+\n+    /**\n+     * Gets the color. Everytime this method is called, it swaps the color that it returns.\n+     *\n+     * @return The color.\n+     */\n+    @Override\n+    public ChatColor get() {\n+        return (this.switcher ^= true) ? this.thisColor : this.thatColor;\n+    }\n+\n+    /**\n+     * @return The first color.\n+     */\n+    public ChatColor getThisColor() {\n+        return thisColor;\n+    }\n+\n+    /**\n+     * @return The second color.\n+     */\n+    public ChatColor getThatColor() {\n+        return thatColor;\n+    }\n+}"
  },
  {
    "sha": "69db94ccc4a92352145434ad0fb79eee1e79f85b",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorTool.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorTool.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorTool.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/ColorTool.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,21 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+import org.bukkit.ChatColor;\n+\n+/**\n+ * Tools to allow customisation.\n+ */\n+public interface ColorTool {\n+\n+    /**\n+     * Gets a chat color.\n+     *\n+     * @return The color.\n+     */\n+    ChatColor get();\n+\n+    /**\n+     * Default implementation of this interface. Returns a default white color.\n+     */\n+    ColorTool DEFAULT = () -> ChatColor.WHITE;\n+}"
  },
  {
    "sha": "027340f0d6d957de2b869a65981b2ba5f6bde6cb",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentDisplay.java",
    "status": "added",
    "additions": 264,
    "deletions": 0,
    "changes": 264,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentDisplay.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentDisplay.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentDisplay.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,264 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+import org.bukkit.ChatColor;\n+import org.bukkit.command.CommandSender;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.WeakHashMap;\n+\n+/**\n+ * Helps to display contents such as list and maps in a nicely formatted fashion.\n+ *\n+ * @param <T>   Type of content to display.\n+ */\n+public class ContentDisplay<T> {\n+\n+    public static final String LINE_BREAK = \"%br%\";\n+\n+    private CommandSender sender;\n+    private String header;\n+    private T contents;\n+    private String emptyMessage = \"No matching content to display.\";\n+    private DisplayHandler<T> displayHandler;\n+    private ColorTool colorTool = ColorTool.DEFAULT;\n+    private ContentFilter filter = ContentFilter.DEFAULT;\n+    private final Map<DisplaySetting<?>, Object> settingsMap = new WeakHashMap<>();\n+\n+    private ContentDisplay() { }\n+\n+    /**\n+     * Do the actual displaying of contents to the sender.\n+     */\n+    public void send() {\n+        Collection<String> formattedContent;\n+        try {\n+            formattedContent = (this.contents == null) ? null : this.displayHandler.format(this);\n+        } catch (DisplayFormatException e) {\n+            this.sender.sendMessage(String.format(\"%sError: %s\", ChatColor.RED, e.getMessage()));\n+            return;\n+        }\n+        this.displayHandler.sendHeader(this);\n+        this.displayHandler.sendSubHeader(this);\n+        this.displayHandler.sendBody(this, formattedContent);\n+    }\n+\n+    /**\n+     * @return Gets the target sender.\n+     */\n+    @NotNull\n+    public CommandSender getSender() {\n+        return sender;\n+    }\n+\n+    /**\n+     * @return Gets the header to display.\n+     */\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    /**\n+     * Sets the header text.\n+     */\n+    public void setHeader(@NotNull String header) {\n+        this.header = header;\n+    }\n+\n+    /**\n+     * @return Gets the contents to display.\n+     */\n+    public T getContents() {\n+        return contents;\n+    }\n+\n+    /**\n+     * @return Gets the message to display when no content is shown.\n+     */\n+    @NotNull\n+    public String getEmptyMessage() {\n+        return emptyMessage;\n+    }\n+\n+    /**\n+     * @return Gets the display handler that formats and sends content to sender.\n+     */\n+    @NotNull\n+    public DisplayHandler<T> getDisplayHandler() {\n+        return displayHandler;\n+    }\n+\n+    /**\n+     * @return Gets the color tool used.\n+     */\n+    @NotNull\n+    public ColorTool getColorTool() {\n+        return colorTool;\n+    }\n+\n+    /**\n+     * @return Gets the filter used.\n+     */\n+    @NotNull\n+    public ContentFilter getFilter() {\n+        return filter;\n+    }\n+\n+    /**\n+     * Gets the value for a given setting option.\n+     *\n+     * @param setting   The setting option.\n+     * @param <S>       The setting type.\n+     * @return Value set for the given setting.\n+     */\n+    public <S> S getSetting(@NotNull DisplaySetting<S> setting) {\n+        return (S) settingsMap.getOrDefault(setting, setting.defaultValue());\n+    }\n+\n+    /**\n+     * Sets other specific settings that may be used by the {@link DisplayHandler}.\n+     *\n+     * @param setting   The settings option.\n+     * @param value     The value to set.\n+     * @param <S>       The type of setting.\n+     */\n+    public <S> void setSetting(@NotNull DisplaySetting<S> setting, S value) {\n+        this.settingsMap.put(setting, value);\n+    }\n+\n+    /**\n+     * Builds a {@link ContentDisplay}.\n+     *\n+     * @param <T>   Type of content to display.\n+     */\n+    public static class Builder<T> {\n+\n+        private final ContentDisplay<T> display;\n+\n+        public Builder() {\n+            this.display = new ContentDisplay<>();\n+        }\n+\n+        /**\n+         * Sets target sender to display message to. <b>Required.</b>\n+         *\n+         * @param sender The target sender.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public Builder<T> sender(@NotNull CommandSender sender) {\n+            this.display.sender = sender;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets header to be displayed.\n+         *\n+         * @param header        The header text.\n+         * @param replacements  String formatting replacements.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public Builder<T> header(@NotNull String header, Object...replacements) {\n+            this.display.header = String.format(header, replacements);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets content to be displayed.\n+         *\n+         * @param contents  The contents.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public Builder<T> contents(@Nullable T contents) {\n+            this.display.contents = contents;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the message to show when no content is available for display.\n+         *\n+         * @param emptyMessage  The message text.\n+         * @param replacements  String formatting replacements.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public Builder<T> emptyMessage(@NotNull String emptyMessage, Object...replacements) {\n+            this.display.emptyMessage = String.format(emptyMessage, replacements);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the display handler that does the formatting and sending of content. <b>Required.</b>\n+         *\n+         * @param displayHandler    The display handler for the given content type.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public Builder<T> displayHandler(@NotNull DisplayHandler<T> displayHandler) {\n+            this.display.displayHandler = displayHandler;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the color tool used to make messages more colourful.\n+         *\n+         * @param colorTool The color tool to use.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public Builder<T> colorTool(@NotNull ColorTool colorTool) {\n+            this.display.colorTool = colorTool;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets content filter used to match specific content to be displayed.\n+         *\n+         * @param filter    The filter to use.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public Builder<T> filter(@NotNull ContentFilter filter) {\n+            this.display.filter = filter;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets other specific settings that may be used by the {@link DisplayHandler}.\n+         *\n+         * @param setting   The settings option.\n+         * @param value     The value to set.\n+         * @param <S>       The type of setting.\n+         * @return The builder.\n+         */\n+        @NotNull\n+        public <S> Builder<T> setting(@NotNull DisplaySetting<S> setting, S value) {\n+            this.display.settingsMap.put(setting, value);\n+            return this;\n+        }\n+\n+        /**\n+         * Validates and build the content display.\n+         *\n+         * @return The content display.\n+         */\n+        @NotNull\n+        public ContentDisplay<T> build() {\n+            Objects.requireNonNull(this.display.sender);\n+            Objects.requireNonNull(this.display.displayHandler);\n+            return this.display;\n+        }\n+\n+        /**\n+         * Build and send the contents to the sender.\n+         */\n+        public void display() {\n+            this.build().send();\n+        }\n+    }\n+}"
  },
  {
    "sha": "d2f37dc5d78407fd5a9c6ed00865845f594581c7",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentFilter.java",
    "status": "added",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentFilter.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentFilter.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/ContentFilter.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,153 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+import com.dumptruckman.minecraft.util.Logging;\n+import org.bukkit.ChatColor;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+/**\n+ * <p>Filter content and text based on regex matching.</p>\n+ *\n+ * <p>Compile regex pattern based on {@link ContentFilter#filterString}. When prefixed with 'r=',\n+ * use {@link ContentFilter#filterString} as the full regex pattern. Else, set to any match that\n+ * contains the {@link ContentFilter#filterString}.<p>\n+ */\n+public class ContentFilter {\n+\n+    public static final ContentFilter DEFAULT = new ContentFilter();\n+    private static final Pattern REGEX_SPECIAL_CHARS = Pattern.compile(\"[.+*?\\\\[^\\\\]$(){}=!<>|:-\\\\\\\\]\");\n+\n+    private String filterString;\n+    private Pattern filterPattern;\n+    private boolean exactMatch;\n+\n+    private ContentFilter() {\n+    }\n+\n+    /**\n+     * @param filterString  The text to do matching, either plaintext or regex.\n+     */\n+    public ContentFilter(@NotNull String filterString) {\n+        this(filterString, false);\n+    }\n+\n+    /**\n+     * @param filterString  The text to do matching, else plaintext or regex.\n+     * @param exactMatch    Should check for exact match when doing regex matching.\n+     */\n+    public ContentFilter(@NotNull String filterString,\n+                         boolean exactMatch) {\n+\n+        this.filterString = filterString;\n+        this.exactMatch = exactMatch;\n+        parseFilter();\n+    }\n+\n+    private void parseFilter() {\n+        if (filterString == null) {\n+            return;\n+        }\n+        if (filterString.startsWith(\"r=\")) {\n+            convertToMatcher(filterString.substring(2));\n+            return;\n+        }\n+        String cleanedFilter = REGEX_SPECIAL_CHARS.matcher(filterString.toLowerCase()).replaceAll(\"\\\\\\\\$0\");\n+        convertToMatcher(\"(?i).*\" + cleanedFilter + \".*\");\n+    }\n+\n+    /**\n+     * Compile and store the regex into a {@link Pattern}.\n+     *\n+     * @param regex The regex text.\n+     */\n+    private void convertToMatcher(@NotNull String regex) {\n+        try {\n+            this.filterPattern = Pattern.compile(regex);\n+            Logging.finest(\"Parsed regex pattern: %s\", this.filterPattern.toString());\n+        }\n+        catch (PatternSyntaxException ignored) {\n+            Logging.warning(\"Error parsing regex: %s\", filterString);\n+        }\n+    }\n+\n+    /**\n+     * Do regex matching.\n+     *\n+     * @param text String to check regex on.\n+     * @return True of matches regex pattern, false otherwise.\n+     */\n+    public boolean checkMatch(@Nullable Object text) {\n+        if (!hasFilter()) {\n+            return true;\n+        }\n+        if (text == null || !hasValidPattern()) {\n+            return false;\n+        }\n+        text = ChatColor.stripColor(String.valueOf(text));\n+        return (exactMatch)\n+                ? filterPattern.matcher((CharSequence) text).matches()\n+                : filterPattern.matcher((CharSequence) text).find();\n+    }\n+\n+    /**\n+     * Checks if a filter string is present.\n+     *\n+     * @return True if there is a filter string, else false.\n+     */\n+    public boolean hasFilter() {\n+        return filterString != null;\n+    }\n+\n+    /**\n+     * Checks if regex pattern syntax is valid.\n+     *\n+     * @return True if valid, else false.\n+     */\n+    public boolean hasValidPattern() {\n+        return filterPattern != null;\n+    }\n+\n+    /**\n+     * @return The filter string.\n+     */\n+    @Nullable\n+    public String getString() {\n+        return filterString;\n+    }\n+\n+    /**\n+     * @return The regex pattern.\n+     */\n+    @Nullable\n+    public Pattern getPattern() {\n+        return filterPattern;\n+    }\n+\n+    /**\n+     * @return True if filter is set to do exact matching, else false.\n+     */\n+    public boolean isExactMatch() {\n+        return exactMatch;\n+    }\n+\n+    /**\n+     * Nicely format the filter string to be used for showing the sender.\n+     *\n+     * @return The formatted filter string.\n+     */\n+    public @NotNull String getFormattedString() {\n+        return String.format(\"%sFilter: '%s'\", ChatColor.ITALIC, filterString);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ContentFilter{\" +\n+                \"filterString='\" + filterString + '\\'' +\n+                \", filterPattern=\" + filterPattern +\n+                \", exactMatch=\" + exactMatch +\n+                '}';\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0f71e24700b281fe37b7a33f8e7b2cf57d77edd2",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayFormatException.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayFormatException.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayFormatException.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayFormatException.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,25 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+/**\n+ * Thrown when an issue occur while formatting content.\n+ */\n+public class DisplayFormatException extends Exception {\n+    public DisplayFormatException() {\n+    }\n+\n+    public DisplayFormatException(String message) {\n+        super(message);\n+    }\n+\n+    public DisplayFormatException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    public DisplayFormatException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    public DisplayFormatException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+        super(message, cause, enableSuppression, writableStackTrace);\n+    }\n+}"
  },
  {
    "sha": "271e351c8b0ff914cfbafbbfa86721f2119f288f",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandler.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandler.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandler.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandler.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,61 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+import com.google.common.base.Strings;\n+import org.bukkit.ChatColor;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Handles the formatting and sending of all content by the {@link ContentDisplay}.\n+ *\n+ * @param <T>   Type of content to display.\n+ */\n+public interface DisplayHandler<T> {\n+\n+    /**\n+     * Formats the raw content into a {@link Collection<String>} for displaying to sender.\n+     *\n+     * @param display   The responsible {@link ContentDisplay}.\n+     * @return The formatted content.\n+     * @throws DisplayFormatException Issue occurred while formatting content. E.g. invalid page.\n+     */\n+    Collection<String> format(@NotNull ContentDisplay<T> display) throws DisplayFormatException;\n+\n+    /**\n+     * Sends the header.\n+     *\n+     * @param display   The responsible {@link ContentDisplay}.\n+     */\n+    default void sendHeader(@NotNull ContentDisplay<T> display) {\n+        if (!Strings.isNullOrEmpty(display.getHeader())) {\n+            display.getSender().sendMessage(display.getHeader());\n+        }\n+    }\n+\n+    /**\n+     * Sends info such as filter and page.\n+     *\n+     * @param display   The responsible {@link ContentDisplay}.\n+     */\n+    default void sendSubHeader(@NotNull ContentDisplay<T> display) {\n+        if (display.getFilter().hasFilter()) {\n+            display.getSender().sendMessage(String.format(\"%s[ %s ]\",\n+                    ChatColor.GRAY, display.getFilter().getFormattedString()));\n+        }\n+    }\n+\n+    /**\n+     * Sends the content.\n+     *\n+     * @param display           The responsible {@link ContentDisplay}.\n+     * @param formattedContent  The content after being formatted by {@link #format(ContentDisplay)}\n+     */\n+    default void sendBody(@NotNull ContentDisplay<T> display, Collection<String> formattedContent) {\n+        if (formattedContent == null || formattedContent.size() == 0) {\n+            display.getSender().sendMessage(display.getEmptyMessage());\n+            return;\n+        }\n+        display.getSender().sendMessage(formattedContent.toArray(new String[0]));\n+    }\n+}"
  },
  {
    "sha": "d7e1897859cb1d9a5113ac7359fb98e807ca388b",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandlers.java",
    "status": "added",
    "additions": 179,
    "deletions": 0,
    "changes": 179,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandlers.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandlers.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplayHandlers.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,179 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+import org.bukkit.ChatColor;\n+import org.bukkit.command.ConsoleCommandSender;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Various implementations of {@link DisplayHandler}.\n+ */\n+public class DisplayHandlers {\n+\n+    /**\n+     * Standard list display.\n+     *\n+     * Supported settings: none.\n+     */\n+    public static final DisplayHandler<Collection<String>> LIST = display -> display.getContents().stream()\n+            .filter(display.getFilter()::checkMatch)\n+            .map(s -> (ContentDisplay.LINE_BREAK.equals(s)) ? \"\" : display.getColorTool().get() + s)\n+            .collect(Collectors.toList());\n+\n+    /**\n+     * List display with paging.\n+     *\n+     * Supported settings: {@link DisplaySettings#SHOW_PAGE}, {@link DisplaySettings#LINES_PER_PAGE},\n+     * {@link DisplaySettings#PAGE_IN_CONSOLE}, {@link DisplaySettings#DO_END_PADDING}.\n+     */\n+    public static final DisplayHandler<Collection<String>> PAGE_LIST = new DisplayHandler<Collection<String>>() {\n+        @Override\n+        public Collection<String> format(@NotNull ContentDisplay<Collection<String>> display) throws DisplayFormatException {\n+            if (dontNeedPaging(display)) {\n+                return LIST.format(display);\n+            }\n+\n+            int pages = 1;\n+            int currentLength = 0;\n+            int targetPage = display.getSetting(DisplaySettings.SHOW_PAGE);\n+            int linesPerPage = display.getSetting(DisplaySettings.LINES_PER_PAGE);\n+            List<String> content = new ArrayList<>(linesPerPage);\n+\n+            // Calculate the paging.\n+            for (String line : display.getContents()) {\n+                if (!display.getFilter().checkMatch(line)) {\n+                    continue;\n+                }\n+                // When it's the next page.\n+                boolean isLineBreak = ContentDisplay.LINE_BREAK.equals(line);\n+                if (isLineBreak || ++currentLength > linesPerPage) {\n+                    pages++;\n+                    currentLength = 0;\n+                    if (isLineBreak) {\n+                        continue;\n+                    }\n+                }\n+                if (pages == targetPage) {\n+                    // Let first line be the header when no header is defined.\n+                    if (display.getHeader() == null) {\n+                        display.setHeader(line);\n+                        currentLength--;\n+                        continue;\n+                    }\n+                    content.add(display.getColorTool().get() + line);\n+                }\n+            }\n+\n+            // Page out of range.\n+            if (targetPage < 1 || targetPage > pages) {\n+                if (pages == 1) {\n+                    throw new DisplayFormatException(\"There is only 1 page!\");\n+                }\n+                throw new DisplayFormatException(\"Please enter a page from 1 to \" + pages + \".\");\n+            }\n+\n+            // No content\n+            if (content.size() == 0) {\n+                content.add(display.getEmptyMessage());\n+            }\n+\n+            // Add empty lines to make output length consistent.\n+            if (display.getSetting(DisplaySettings.DO_END_PADDING)) {\n+                IntStream.range(0, linesPerPage - content.size()).forEach(i -> content.add(\"\"));\n+            }\n+            display.setSetting(DisplaySettings.TOTAL_PAGE, pages);\n+\n+            return content;\n+        }\n+\n+        @Override\n+        public void sendSubHeader(@NotNull ContentDisplay<Collection<String>> display) {\n+            if (dontNeedPaging(display)) {\n+                LIST.sendSubHeader(display);\n+                return;\n+            }\n+\n+            if (display.getFilter().hasFilter()) {\n+                display.getSender().sendMessage(String.format(\"%s[ Page %s of %s, %s ]\",\n+                        ChatColor.GRAY,\n+                        display.getSetting(DisplaySettings.SHOW_PAGE),\n+                        display.getSetting(DisplaySettings.TOTAL_PAGE),\n+                        display.getFilter().getFormattedString())\n+                );\n+                return;\n+            }\n+            display.getSender().sendMessage(String.format(\"%s[ Page %s of %s ]\",\n+                    ChatColor.GRAY,\n+                    display.getSetting(DisplaySettings.SHOW_PAGE),\n+                    display.getSetting(DisplaySettings.TOTAL_PAGE))\n+            );\n+        }\n+\n+        private boolean dontNeedPaging(ContentDisplay<Collection<String>> display) {\n+            return display.getSender() instanceof ConsoleCommandSender\n+                    && !display.getSetting(DisplaySettings.PAGE_IN_CONSOLE);\n+        }\n+    };\n+\n+    /**\n+     * Display a list inline.\n+     *\n+     * Supported settings: {@link DisplaySettings#SEPARATOR}.\n+     */\n+    public static final DisplayHandler<Collection<String>> INLINE_LIST = display -> {\n+        StringBuilder builder = new StringBuilder();\n+        String separator = display.getSetting(DisplaySettings.SEPARATOR);\n+\n+        for (Iterator<String> iterator = display.getContents().iterator(); iterator.hasNext(); ) {\n+            String content = iterator.next();\n+            if (!display.getFilter().checkMatch(content)) {\n+                continue;\n+            }\n+            builder.append(display.getColorTool().get()).append(content);\n+            if (iterator.hasNext()) {\n+                builder.append(separator);\n+            }\n+        }\n+        return (builder.length() == 0)\n+                ? Collections.singletonList(display.getEmptyMessage())\n+                : Collections.singleton(builder.toString());\n+    };\n+\n+    /**\n+     * Display key value pair inline.\n+     *\n+     * Supported settings: {@link DisplaySettings#SEPARATOR}, {@link DisplaySettings#OPERATOR}.\n+     */\n+    public static final DisplayHandler<Map<String, Object>> INLINE_MAP = display -> {\n+        StringBuilder builder = new StringBuilder();\n+        String separator = display.getSetting(DisplaySettings.SEPARATOR);\n+        String operator = display.getSetting(DisplaySettings.OPERATOR);\n+\n+        for (Iterator<Entry<String, Object>> iterator = display.getContents().entrySet().iterator(); iterator.hasNext(); ) {\n+            Entry<String, Object> entry = iterator.next();\n+            if (!display.getFilter().checkMatch(entry.getKey()) && !display.getFilter().checkMatch(entry.getValue())) {\n+                continue;\n+            }\n+            builder.append(display.getColorTool().get())\n+                    .append(entry.getKey())\n+                    .append(operator)\n+                    .append(display.getColorTool().get())\n+                    .append(entry.getValue());\n+            if (iterator.hasNext()) {\n+                builder.append(separator);\n+            }\n+        }\n+        return (builder.length() == 0)\n+                ? Collections.singletonList(display.getEmptyMessage())\n+                : Collections.singleton(builder.toString());\n+    };\n+}"
  },
  {
    "sha": "ff9a5e15c951eaa3782a202fc7d602652d5317e1",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySetting.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySetting.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySetting.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySetting.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,16 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+/**\n+ * Represents a setting option that can be used by {@link DisplayHandler}.\n+ *\n+ * @param <T>\n+ */\n+public interface DisplaySetting<T> {\n+\n+     /**\n+      * Gets the default value of this Display Setting.\n+      *\n+      * @return The default value.\n+      */\n+     T defaultValue();\n+}"
  },
  {
    "sha": "238de3251dbed6c812b6821af90edfdc257c46ae",
    "filename": "src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySettings.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Multiverse/Multiverse-Core/blob/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySettings.java",
    "raw_url": "https://github.com/Multiverse/Multiverse-Core/raw/5c51cb9ff9cf578c2552153922e516aad7e7b08d/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySettings.java",
    "contents_url": "https://api.github.com/repos/Multiverse/Multiverse-Core/contents/src/main/java/com/onarandombox/MultiverseCore/displaytools/DisplaySettings.java?ref=5c51cb9ff9cf578c2552153922e516aad7e7b08d",
    "patch": "@@ -0,0 +1,44 @@\n+package com.onarandombox.MultiverseCore.displaytools;\n+\n+import org.bukkit.ChatColor;\n+\n+/**\n+ * Collection of {@link DisplaySetting} that are used by various {@link DisplayHandler}.\n+ */\n+public class DisplaySettings {\n+\n+    /**\n+     * Page to display.\n+     */\n+    public static final DisplaySetting<Integer> SHOW_PAGE = () -> 1;\n+\n+    /**\n+     * Total pages available to display.\n+     */\n+    public static final DisplaySetting<Integer> TOTAL_PAGE = () -> 1;\n+\n+    /**\n+     * The max number of lines per page. This excludes header.\n+     */\n+    public static final DisplaySetting<Integer> LINES_PER_PAGE = () -> 8;\n+\n+    /**\n+     * Should add empty lines if content lines shown is less that {@link #LINES_PER_PAGE}.\n+     */\n+    public static final DisplaySetting<Boolean> DO_END_PADDING = () -> true;\n+\n+    /**\n+     * Should display with paging when it's sent to console.\n+     */\n+    public static final DisplaySetting<Boolean> PAGE_IN_CONSOLE = () -> false;\n+\n+    /**\n+     * Inline separator. E.g. '1, 2, 3'\n+     */\n+    public static final DisplaySetting<String> SEPARATOR = () -> ChatColor.WHITE + \", \";\n+\n+    /**\n+     * The thing between a key value pair. E.g. 'Me = Smart'\n+     */\n+    public static final DisplaySetting<String> OPERATOR = () -> ChatColor.WHITE + \" = \";\n+}"
  }
]
