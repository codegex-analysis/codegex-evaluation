[
  {
    "sha": "1d61d7e055054a915a409fdfe504a2e73008f430",
    "filename": "src/main/java/com/epam/izh/rd/online/repository/SimpleFileRepository.java",
    "status": "modified",
    "additions": 64,
    "deletions": 5,
    "changes": 69,
    "blob_url": "https://github.com/i7bro/java-data-handling-template/blob/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/repository/SimpleFileRepository.java",
    "raw_url": "https://github.com/i7bro/java-data-handling-template/raw/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/repository/SimpleFileRepository.java",
    "contents_url": "https://api.github.com/repos/i7bro/java-data-handling-template/contents/src/main/java/com/epam/izh/rd/online/repository/SimpleFileRepository.java?ref=1a2efc02da6fd44359baf8d11b12e3862501432b",
    "patch": "@@ -1,5 +1,9 @@\n package com.epam.izh.rd.online.repository;\n \n+import java.io.*;\n+import java.nio.file.*;\n+import java.util.stream.Stream;\n+\n public class SimpleFileRepository implements FileRepository {\n \n     /**\n@@ -10,7 +14,20 @@\n      */\n     @Override\n     public long countFilesInDirectory(String path) {\n-        return 0;\n+        long countFiles = 0;\n+        if (!path.contains(\"src\"))\n+            path = \"src\\\\main\\\\resources\\\\\" + path;\n+        File file = new File(path);\n+        if (file.isFile())\n+            countFiles++;\n+        else {\n+            File[] files = file.listFiles();\n+            if (files != null) {\n+                for (File f : files)\n+                    countFiles += countFilesInDirectory(f.getParent() + \"\\\\\" + f.getName());\n+            }\n+        }\n+        return countFiles;\n     }\n \n     /**\n@@ -21,7 +38,19 @@ public long countFilesInDirectory(String path) {\n      */\n     @Override\n     public long countDirsInDirectory(String path) {\n-        return 0;\n+        long countDir = 0;\n+        if (!path.contains(\"src\"))\n+            path = \"src\\\\main\\\\resources\\\\\" + path;\n+        File file = new File(path);\n+        if (file.isDirectory()) {\n+            countDir++;\n+            File[] files = file.listFiles();\n+            if (files != null) {\n+                for (File f : files)\n+                    countDir += countDirsInDirectory(f.getParent() + \"\\\\\" + f.getName());\n+            }\n+        }\n+        return countDir;\n     }\n \n     /**\n@@ -32,7 +61,21 @@ public long countDirsInDirectory(String path) {\n      */\n     @Override\n     public void copyTXTFiles(String from, String to) {\n-        return;\n+        String parentDir = new File(to).getParent();\n+        if (!new File(parentDir).exists()) {\n+            try {\n+                Files.createDirectory(Paths.get(parentDir));\n+            }\n+            catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        try {\n+            Files.copy(Paths.get(from), Paths.get(to), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+        catch (IOException e) {\n+            e.printStackTrace();\n+        }\n     }\n \n     /**\n@@ -44,7 +87,15 @@ public void copyTXTFiles(String from, String to) {\n      */\n     @Override\n     public boolean createFile(String path, String name) {\n-        return false;\n+        String pathName = path + \"/\" + name;\n+        File file = new File((pathName));\n+        try {\n+            Files.createDirectory(Paths.get(path));\n+            Files.createFile(file.toPath());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return file.exists();\n     }\n \n     /**\n@@ -55,6 +106,14 @@ public boolean createFile(String path, String name) {\n      */\n     @Override\n     public String readFileFromResources(String fileName) {\n-        return null;\n+        String retStr = null;\n+        try {\n+            BufferedReader bf = new BufferedReader(new FileReader(new File(\"src/main/resources/\" + fileName)));\n+            retStr = bf.readLine();\n+        }\n+        catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return retStr;\n     }\n }"
  },
  {
    "sha": "5203cbbefed0722fe0e1d2a4eae2b9d62a2a4ccd",
    "filename": "src/main/java/com/epam/izh/rd/online/service/SimpleBigNumbersService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/i7bro/java-data-handling-template/blob/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleBigNumbersService.java",
    "raw_url": "https://github.com/i7bro/java-data-handling-template/raw/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleBigNumbersService.java",
    "contents_url": "https://api.github.com/repos/i7bro/java-data-handling-template/contents/src/main/java/com/epam/izh/rd/online/service/SimpleBigNumbersService.java?ref=1a2efc02da6fd44359baf8d11b12e3862501432b",
    "patch": "@@ -2,6 +2,7 @@\n \n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.math.RoundingMode;\n \n public class SimpleBigNumbersService implements BigNumbersService {\n \n@@ -13,7 +14,7 @@\n      */\n     @Override\n     public BigDecimal getPrecisionNumber(int a, int b, int range) {\n-        return null;\n+        return new BigDecimal(a).divide(new BigDecimal(b), range, RoundingMode.HALF_UP);\n     }\n \n     /**\n@@ -24,6 +25,9 @@ public BigDecimal getPrecisionNumber(int a, int b, int range) {\n      */\n     @Override\n     public BigInteger getPrimaryNumber(int range) {\n-        return null;\n+        BigInteger bi = new BigInteger(\"2\");\n+        for (int i = 0; i < range; i++)\n+            bi = bi.nextProbablePrime();\n+        return bi;\n     }\n }"
  },
  {
    "sha": "39e30073ebbe9aa870ef25c337d9a136e986b6cb",
    "filename": "src/main/java/com/epam/izh/rd/online/service/SimpleDateService.java",
    "status": "modified",
    "additions": 12,
    "deletions": 5,
    "changes": 17,
    "blob_url": "https://github.com/i7bro/java-data-handling-template/blob/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleDateService.java",
    "raw_url": "https://github.com/i7bro/java-data-handling-template/raw/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleDateService.java",
    "contents_url": "https://api.github.com/repos/i7bro/java-data-handling-template/contents/src/main/java/com/epam/izh/rd/online/service/SimpleDateService.java?ref=1a2efc02da6fd44359baf8d11b12e3862501432b",
    "patch": "@@ -2,7 +2,9 @@\n \n import java.time.LocalDate;\n import java.time.LocalDateTime;\n+import java.time.Year;\n import java.time.format.DateTimeFormatter;\n+import java.util.Date;\n \n public class SimpleDateService implements DateService {\n \n@@ -14,7 +16,7 @@\n      */\n     @Override\n     public String parseDate(LocalDate localDate) {\n-        return null;\n+        return localDate.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));\n     }\n \n     /**\n@@ -25,7 +27,7 @@ public String parseDate(LocalDate localDate) {\n      */\n     @Override\n     public LocalDateTime parseString(String string) {\n-        return null;\n+        return LocalDateTime.parse(string.replaceAll(\" \", \"T\"));\n     }\n \n     /**\n@@ -37,7 +39,7 @@ public LocalDateTime parseString(String string) {\n      */\n     @Override\n     public String convertToCustomFormat(LocalDate localDate, DateTimeFormatter formatter) {\n-        return null;\n+        return localDate.format(formatter);\n     }\n \n     /**\n@@ -47,7 +49,12 @@ public String convertToCustomFormat(LocalDate localDate, DateTimeFormatter forma\n      */\n     @Override\n     public long getNextLeapYear() {\n-        return 0;\n+        int intYear = Year.now().getValue();\n+        while (true) {\n+            intYear++;\n+            if(Year.of(intYear).isLeap())\n+                return intYear;\n+        }\n     }\n \n     /**\n@@ -57,7 +64,7 @@ public long getNextLeapYear() {\n      */\n     @Override\n     public long getSecondsInYear(int year) {\n-        return 0;\n+        return Year.of(year).length() * 24 * 60 * 60;\n     }\n \n "
  },
  {
    "sha": "16eed79b99ba5aff82d4178d7f1e08c6b3e360bd",
    "filename": "src/main/java/com/epam/izh/rd/online/service/SimpleRegExpService.java",
    "status": "modified",
    "additions": 40,
    "deletions": 2,
    "changes": 42,
    "blob_url": "https://github.com/i7bro/java-data-handling-template/blob/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleRegExpService.java",
    "raw_url": "https://github.com/i7bro/java-data-handling-template/raw/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleRegExpService.java",
    "contents_url": "https://api.github.com/repos/i7bro/java-data-handling-template/contents/src/main/java/com/epam/izh/rd/online/service/SimpleRegExpService.java?ref=1a2efc02da6fd44359baf8d11b12e3862501432b",
    "patch": "@@ -1,5 +1,16 @@\n package com.epam.izh.rd.online.service;\n \n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n public class SimpleRegExpService implements RegExpService {\n \n     /**\n@@ -11,7 +22,22 @@\n      */\n     @Override\n     public String maskSensitiveData() {\n-        return null;\n+        String str = null;\n+        try (BufferedReader dr = new BufferedReader(new FileReader(\n+                new File(\"./src/main/resources/sensitive_data.txt\")))) {\n+            str = dr.readLine();\n+            Pattern pattern = Pattern.compile(\"[0-9]{4}\\\\W[0-9]{4}\\\\W[0-9]{4}\\\\W[0-9]{4}\");\n+            Matcher matcher = pattern.matcher(str);\n+            StringBuilder sbTemp;\n+            while (matcher.find()) {\n+                sbTemp = new StringBuilder(matcher.group().replaceAll(\"\\\\W\", \"\"));\n+                sbTemp.replace(4, 12, \" **** **** \");\n+                str = str.replace(matcher.group(), sbTemp.toString());\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return str;\n     }\n \n     /**\n@@ -22,6 +48,18 @@ public String maskSensitiveData() {\n      */\n     @Override\n     public String replacePlaceholders(double paymentAmount, double balance) {\n-        return null;\n+        String str = null;\n+        try (BufferedReader br = new BufferedReader(new FileReader(\n+                new File(\"./src/main/resources/sensitive_data.txt\")))) {\n+\n+            if ((str = br.readLine()) != null) {\n+                str = str.replaceAll(\"\\\\Q${payment_amount}\\\\E\", String.valueOf((int) paymentAmount));\n+                str = str.replaceAll(\"\\\\Q${balance}\\\\E\", String.valueOf((int) balance));\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return str;\n     }\n }"
  },
  {
    "sha": "51a585e141dbcbfa329a3ab56df1386062c8339c",
    "filename": "src/main/java/com/epam/izh/rd/online/service/SimpleTextService.java",
    "status": "modified",
    "additions": 28,
    "deletions": 6,
    "changes": 34,
    "blob_url": "https://github.com/i7bro/java-data-handling-template/blob/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleTextService.java",
    "raw_url": "https://github.com/i7bro/java-data-handling-template/raw/1a2efc02da6fd44359baf8d11b12e3862501432b/src/main/java/com/epam/izh/rd/online/service/SimpleTextService.java",
    "contents_url": "https://api.github.com/repos/i7bro/java-data-handling-template/contents/src/main/java/com/epam/izh/rd/online/service/SimpleTextService.java?ref=1a2efc02da6fd44359baf8d11b12e3862501432b",
    "patch": "@@ -1,5 +1,9 @@\n package com.epam.izh.rd.online.service;\n \n+import java.util.Arrays;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n public class SimpleTextService implements TextService {\n \n     /**\n@@ -13,7 +17,9 @@\n      */\n     @Override\n     public String removeString(String base, String remove) {\n-        return null; //TODO\n+        Pattern pattern = Pattern.compile(remove);\n+        String[] str = pattern.split(base);\n+        return concatenate(str);\n     }\n \n     /**\n@@ -24,7 +30,7 @@ public String removeString(String base, String remove) {\n      */\n     @Override\n     public boolean isQuestionString(String text) {\n-        return false; //TODO\n+        return text.matches(\".*\\\\?$\");\n     }\n \n     /**\n@@ -35,7 +41,11 @@ public boolean isQuestionString(String text) {\n      */\n     @Override\n     public String concatenate(String... elements) {\n-        return null; //TODO\n+        StringBuilder sb = new StringBuilder();\n+        for (String str : elements) {\n+            sb.append(str);\n+        }\n+        return sb.toString();\n     }\n \n     /**\n@@ -47,7 +57,17 @@ public String concatenate(String... elements) {\n      */\n     @Override\n     public String toJumpCase(String text) {\n-        return null; //TODO\n+        String[] strings = new String[text.length()];\n+\n+        for (int i = 0; i < strings.length; i++) {\n+            String temp = String.valueOf(text.charAt(i));\n+            if (!temp.matches(\"[a-zA-Zа-яА-Я]\")) {\n+                strings[i] = temp;\n+                continue;\n+            }\n+            strings[i] = (i % 2) == 0 ? temp.toLowerCase() : temp.toUpperCase();\n+        }\n+        return String.join(\"\", strings);\n     }\n \n     /**\n@@ -59,6 +79,8 @@ public String toJumpCase(String text) {\n      */\n     @Override\n     public boolean isPalindrome(String string) {\n-       return false; //TODO\n+        String temp = removeString(string, \"[^a-zA-Zа-яА-Я]\");\n+        String tempRevert = new StringBuilder(temp).reverse().toString();\n+        return !temp.equals(\"\") && temp.equalsIgnoreCase(tempRevert);\n     }\n-}\n+}\n\\ No newline at end of file"
  }
]
