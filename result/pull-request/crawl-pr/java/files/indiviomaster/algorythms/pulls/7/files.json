[
  {
    "sha": "d53381747fe95b7ca0ac52800f5410a3363efc1f",
    "filename": "src/ru/indivio/algorithms/BackPackTest.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/BackPackTest.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/BackPackTest.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/BackPackTest.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.recursion.Backpack;\n+import ru.indivio.algorithms.recursion.Thing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BackPackTest {\n+    public static void main(String[] args) {\n+\n+        List<Thing> things = new ArrayList<>();\n+        things.add(new Thing(\"Спички\",   1, 60));\n+        things.add(new Thing(\"Соль\", 2, 50));\n+        things.add(new Thing(\"Вода\", 4, 150));\n+        things.add(new Thing(\"Телефон\", 2, 1000));\n+        things.add(new Thing(\"Яблоко\", 1, 40));\n+        things.add(new Thing(\"Свитер\", 4, 1000));\n+        things.add(new Thing(\"Мясо\", 3, 500));\n+        things.add(new Thing(\"Часы\", 2, 1500));\n+        things.add(new Thing(\"Топор\", 6, 3500));\n+\n+\n+        Backpack backpack = new Backpack(10);\n+        backpack.calcBestList(things);\n+\n+        for (Thing item : backpack.getTotalList()) {\n+            System.out.println(item.getName() + \" \" + item.getPrice());\n+        }\n+        System.out.println(\"Total price = \" + backpack.getTotalPrice());\n+    }\n+\n+}"
  },
  {
    "sha": "6db02e2d4a3d5bc584f7dababcdcac48467d14ff",
    "filename": "src/ru/indivio/algorithms/DequeTest.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/DequeTest.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/DequeTest.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/DequeTest.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.deq.DequeImpl;\n+\n+public class DequeTest {\n+\n+    public static void main(String[] args) {\n+\n+        DequeImpl<Integer> deque = new DequeImpl<>(10);\n+\n+        for (int i = 0; i < 10; i++) {\n+            deque.insertRight(i + 1);\n+        }\n+        System.out.println(deque);\n+        for (int i = 0; i < 3; i++) {\n+            deque.removeRight();\n+        }\n+        System.out.println(deque.peekTail());\n+        System.out.println(deque);\n+\n+        for (int i = 0; i < 3; i++) {\n+            deque.removeLeft();\n+\n+        }\n+        System.out.println(deque.peekHead());\n+        System.out.println(deque);\n+\n+        for (int i = 0; i < 3; i++) {\n+            deque.insertLeft(i);\n+        }\n+        System.out.println(deque);\n+    }\n+}"
  },
  {
    "sha": "63bee1237dd2876a4753ed6bf2280fef73315c22",
    "filename": "src/ru/indivio/algorithms/GrgaphWayTest.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/GrgaphWayTest.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/GrgaphWayTest.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/GrgaphWayTest.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,45 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.graph.Graph;\n+\n+public class GrgaphWayTest {\n+\n+    public static void main(String[] args) {\n+        WayDfs();\n+    }\n+\n+    private static void WayDfs() {\n+        Graph graph = new Graph(10);\n+        graph.addVertex(\"Москва\");\n+        graph.addVertex(\"Тула\");\n+        graph.addVertex(\"Рязань\");\n+        graph.addVertex(\"Калуга\");\n+        graph.addVertex(\"Тамбов\");\n+        graph.addVertex(\"Липецк\");\n+        graph.addVertex(\"Орел\");\n+        graph.addVertex(\"Саратов\");\n+        graph.addVertex(\"Курск\");\n+        graph.addVertex(\"Воронеж\");\n+\n+        graph.addEdges(\"Москва\",\"Тула\");\n+        graph.addEdges(\"Тула\",\"Липецк\");\n+        graph.addEdges(\"Липецк\",\"Воронеж\");\n+\n+        graph.addEdges(\"Москва\",\"Рязань\");\n+        graph.addEdges(\"Рязань\",\"Тамбов\");\n+        //graph.addEdges(\"Тамбов\",\"Саратов\");\n+        graph.addEdges(\"Саратов\",\"Воронеж\");\n+\n+        //graph.addEdges(\"Москва\",\"Липецк\");\n+        graph.addEdges(\"Рязань\",\"Липецк\");\n+\n+        graph.addEdges(\"Москва\",\"Калуга\");\n+        graph.addEdges(\"Калуга\",\"Орел\");\n+        graph.addEdges(\"Орел\",\"Курск\");\n+        graph.addEdges(\"Курск\",\"Воронеж\");\n+\n+        System.out.println(graph.findWay(\"Москва\",\"Саратов\"));\n+\n+    }\n+\n+}"
  },
  {
    "sha": "c7d7e5571c6600077b0ecb043220670632bcc86b",
    "filename": "src/ru/indivio/algorithms/IteratorTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/IteratorTest.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/IteratorTest.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/IteratorTest.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,62 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.list.LinkedList;\n+import ru.indivio.algorithms.list.SimpleLinkedListImpl;\n+import ru.indivio.algorithms.list.SimpleListIterator;\n+\n+public class IteratorTest {\n+    public static void main(String[] args) {\n+        SimpleListIteratorTest();\n+\n+        ListIteratorTest();\n+    }\n+\n+\n+    private static void SimpleListIteratorTest() {\n+        SimpleLinkedListImpl<String> list = new SimpleLinkedListImpl<>();\n+\n+        list.insertFirst(\"Vovk\");\n+        list.insertFirst(\"Olga\");\n+        list.insertFirst(\"Olesya\");\n+        list.insertFirst(\"Kostya\");\n+        list.insertFirst(\"Dimitrius\");\n+        list.insertFirst(\"Alex\");\n+\n+        list.display();\n+        list.removeFirst();\n+\n+        System.out.println(\"======Foreach=====\");\n+\n+        for(String s: list) {\n+            System.out.print(s+\" \");\n+        }\n+    }\n+\n+    private static void ListIteratorTest() {\n+        LinkedList<String> list = new SimpleLinkedListImpl<>();\n+        list.insertFirst(\"F\");\n+        list.insertFirst(\"E\");\n+        list.insertFirst(\"D\");\n+        list.insertFirst(\"C\");\n+        list.insertFirst(\"B\");\n+        list.insertFirst(\"A\");\n+\n+\n+        SimpleListIterator<String> iterator = (SimpleListIterator<String>) list.iterator();\n+        System.out.println(iterator.next()); //A\n+        iterator.next(); //B\n+        iterator.insertAfter(\"After\");\n+        System.out.println(iterator.next()); //C\n+        iterator.remove(); //D - удален\n+        System.out.println(iterator.next()); //Е\n+        iterator.remove();//F - удален\n+        iterator.insertBefore(\"Before\");\n+        iterator.reset();\n+        iterator.remove();//A - Удален\n+        System.out.println(iterator.next()); //B\n+\n+        for(String s: list) {\n+            System.out.print(s+\" \");\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "094550c7febcecbfb386f96df6267b87b926c6cb",
    "filename": "src/ru/indivio/algorithms/Main8.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/Main8.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/Main8.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/Main8.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.hashtable.DoubleHashTableImpl;\n+import ru.indivio.algorithms.hashtable.HashTable;\n+import ru.indivio.algorithms.hashtable.Product;\n+\n+public class Main8 {\n+\n+    public static void main(String[] args) {\n+//        HashTable<Product, Integer> hashTable = new HashTableImpl<>(5);//5 * 2 = 10\n+        HashTable<Product, Integer> hashTable = new DoubleHashTableImpl<>(5);//5 * 2 = 10\n+\n+        hashTable.put(new Product(1, \"Orange\"), 150);\n+        hashTable.put(new Product(77, \"Banana\"), 100);\n+        hashTable.put(new Product(77, \"Carrot\"), 228);\n+        hashTable.put(new Product(60, \"Lemon\"), 250);\n+        hashTable.put(new Product(52, \"Milk\"), 120);\n+        hashTable.put(new Product(21, \"Potato\"), 67);\n+\n+        System.out.println(\"Size is \" + hashTable.size());\n+        hashTable.display();\n+\n+        System.out.println(\"Cost potato is \" + hashTable.get(new Product(21, \"Potato\")));\n+        System.out.println(\"Cost banana is \" + hashTable.get(new Product(77, \"Banana\")));\n+        System.out.println(\"Cost carrot is \" + hashTable.get(new Product(77, \"Carrot\")));\n+\n+        hashTable.remove(new Product(21, \"Potato\"));\n+        hashTable.remove(new Product(77, \"Banana\"));\n+\n+        System.out.println(\"Cost potato is \" + hashTable.get(new Product(21, \"Potato\")));\n+        System.out.println(\"Cost banana is \" + hashTable.get(new Product(77, \"Banana\")));\n+        System.out.println(\"Cost carrot is \" + hashTable.get(new Product(77, \"Carrot\")));\n+\n+        hashTable.display();\n+    }\n+}"
  },
  {
    "sha": "301be7ba6cbe999c10582876458f3993bd3061fd",
    "filename": "src/ru/indivio/algorithms/QueueStackText.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/QueueStackText.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/QueueStackText.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/QueueStackText.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,38 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.queue.QueueImpl;\n+import ru.indivio.algorithms.stack.StackImpl;\n+\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+import java.util.Stack;\n+\n+public class QueueStackText {\n+\n+    public static void main(String[] args) {\n+\n+        StackImpl<Character> stackImpl = new StackImpl<>(50);\n+        QueueImpl<Character> queueImpl = new QueueImpl<>(50);\n+        String incomeText = \"Съешь этих вкусных булочек\";\n+\n+        for (int i = 0; i < incomeText.length(); i++) {\n+            stackImpl.push(incomeText.charAt(i));\n+            queueImpl.insert(incomeText.charAt(i));\n+        }\n+\n+\n+        System.out.println(\"---------Ввели-------------------\");\n+\n+        while (!queueImpl.isEmpty()) {\n+            System.out.print(queueImpl.remove() + \" \");\n+        }\n+\n+        System.out.println(\"\\n--------Перевернем--------------------\");\n+        while (!stackImpl.isEmpty()) {\n+            System.out.print(stackImpl.pop());\n+        }\n+\n+        System.out.println(\"\\n----------------------------\");\n+    }\n+\n+}"
  },
  {
    "sha": "309e0e6e0311f2e4202313ad03aec1fab5b5bc9e",
    "filename": "src/ru/indivio/algorithms/RecPow.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/RecPow.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/RecPow.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/RecPow.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,35 @@\n+package ru.indivio.algorithms;\n+\n+public class RecPow {\n+    public static void main(String[] args) {\n+        System.out.println(pow(10.0,2));\n+        System.out.println(pow(2.0,-2));\n+        System.out.println(pow(2.0,0));\n+        System.out.println(pow(2.0,-1));\n+        System.out.println(pow(2.0,1));\n+    }\n+    public static double pow(double number, int power){\n+        if(power == 0){\n+            return 1;\n+        }\n+        if(power == 1){\n+            return number;\n+        }\n+        if(power == -1){\n+            return 1/number;\n+        }\n+        if (power < 0) {\n+            return powNum(1/number,1/number,-power);\n+        }\n+        return powNum(number, number, power);\n+    }\n+\n+    private static double powNum(double acc, double n, int p) {\n+        if (p == 1) {\n+            return acc;\n+        }\n+\n+        return powNum(acc*n, n, p-1);\n+    }\n+}\n+"
  },
  {
    "sha": "e820516912b14dfdbbf72e19e41aa59734c8489d",
    "filename": "src/ru/indivio/algorithms/TailHashTableTest.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/TailHashTableTest.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/TailHashTableTest.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/TailHashTableTest.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,42 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.hashtable.HashTable;\n+import ru.indivio.algorithms.hashtable.Product;\n+import ru.indivio.algorithms.hashtable.TailHashTableImpl;\n+\n+public class TailHashTableTest {\n+\n+    public static void main(String[] args) {\n+\n+        HashTable<Product, Integer> hashTable = new TailHashTableImpl<>(10);\n+\n+        hashTable.put(new Product(1, \"Orange\"), 150);\n+        hashTable.put(new Product(11, \"Bananas\"), 100);\n+        hashTable.put(new Product(12, \"Banana\"), 100);\n+        hashTable.put(new Product(22, \"Carrot\"), 228);\n+        hashTable.put(new Product(23, \"Potato\"), 67);\n+        hashTable.put(new Product(37, \"Mango\"), 100);\n+        hashTable.put(new Product(64, \"Lemon\"), 250);\n+        hashTable.put(new Product(54, \"Milk\"), 120);\n+        hashTable.put(new Product(76, \"Papaya\"), 100);\n+        hashTable.put(new Product(85, \"Lime\"), 120);\n+        hashTable.put(new Product(98, \"Cheese\"), 100);\n+        hashTable.put(new Product(90, \"Sweety\"), 10);\n+\n+        System.out.println(\"Size is \" + hashTable.size());\n+        hashTable.display();\n+\n+        System.out.println(\"Cost potato is \" + hashTable.get(new Product(23, \"Potato\")));\n+        System.out.println(\"Cost carrot is \" + hashTable.get(new Product(22, \"Carrot\")));\n+\n+        hashTable.remove(new Product(23, \"Potato\"));\n+        hashTable.remove(new Product(12, \"Banana\"));\n+\n+        System.out.println(\"Cost potato is \" + hashTable.get(new Product(23, \"Potato\")));\n+        System.out.println(\"Cost banana is \" + hashTable.get(new Product(12, \"Banana\")));\n+\n+\n+        hashTable.display();\n+    }\n+}\n+"
  },
  {
    "sha": "6ce350b79ee4b4f67eb458c893d9a5ede20804d9",
    "filename": "src/ru/indivio/algorithms/Test7.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/Test7.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/Test7.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/Test7.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,68 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.graph.Graph;\n+import ru.indivio.algorithms.graph.IGraph;\n+\n+public class Test7 {\n+\n+    public static void main(String[] args) {\n+//        testGraph();\n+//        testDfs();\n+        testBfs();\n+    }\n+\n+    private static void testGraph() {\n+        IGraph graph = new Graph(4);\n+        graph.addVertex(\"A\");\n+        graph.addVertex(\"B\");\n+        graph.addVertex(\"C\");\n+        graph.addVertex(\"D\");\n+\n+        graph.addEdges(\"A\", \"B\", \"C\");\n+        graph.addEdges(\"B\", \"A\", \"C\", \"D\");\n+        graph.addEdges(\"C\", \"A\", \"B\", \"D\");\n+        graph.addEdges(\"D\", \"B\", \"C\");\n+\n+        System.out.println(\"Size of graph is \" + graph.getSize());\n+        graph.display();\n+    }\n+\n+    private static void testDfs() {\n+        Graph graph = new Graph(7);\n+        graph.addVertex(\"A\");\n+        graph.addVertex(\"B\");\n+        graph.addVertex(\"C\");\n+        graph.addVertex(\"D\");\n+        graph.addVertex(\"E\");\n+        graph.addVertex(\"F\");\n+        graph.addVertex(\"G\");\n+\n+        graph.addEdges(\"A\", \"B\", \"C\", \"D\");\n+        graph.addEdges(\"B\", \"E\");\n+        graph.addEdges(\"D\", \"F\");\n+        graph.addEdges(\"F\", \"G\");\n+\n+        graph.dfs(\"A\");\n+        //A B E C D F G\n+    }\n+\n+    private static void testBfs() {\n+        Graph graph = new Graph(8);\n+        graph.addVertex(\"A\");\n+        graph.addVertex(\"B\");\n+        graph.addVertex(\"C\");\n+        graph.addVertex(\"D\");\n+        graph.addVertex(\"E\");\n+        graph.addVertex(\"F\");\n+        graph.addVertex(\"G\");\n+        graph.addVertex(\"H\");\n+\n+        graph.addEdges(\"A\", \"B\", \"C\", \"D\");\n+        graph.addEdges(\"B\", \"E\");\n+        graph.addEdges(\"E\", \"H\");\n+        graph.addEdges(\"C\", \"F\");\n+        graph.addEdges(\"D\", \"G\");\n+\n+        graph.bfs(\"A\");\n+    }\n+}"
  },
  {
    "sha": "cf3ca52fe0746471aad7d782e26a825d309e0045",
    "filename": "src/ru/indivio/algorithms/TestTree20.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/TestTree20.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/TestTree20.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/TestTree20.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,43 @@\n+package ru.indivio.algorithms;\n+\n+import ru.indivio.algorithms.tree.Tree;\n+import ru.indivio.algorithms.tree.TreeImpl;\n+\n+import java.util.Random;\n+\n+\n+public class TestTree20 {\n+    static Integer  MAX = 25;\n+    static Integer  MIN = -25;\n+    static Integer  COL =64;\n+\n+    public static void main(String[] args) {\n+        int range[] = new int[MAX-MIN];\n+        for (int i = 0; i < MAX-MIN; i++) {\n+            range[i] = MIN +i;\n+        }\n+\n+        Random random = new Random();\n+        Integer element;\n+        Tree<Integer> tree;\n+        int countTrue =0;\n+        boolean flag = false;\n+        for (int j = 0; j < 20; j++) {\n+            tree = new TreeImpl<Integer>();\n+            for (int i = 0; i < COL; i++) {\n+                element = range[random.nextInt(MAX-MIN)];\n+                tree.add(element);\n+            }\n+            tree.display();\n+            flag = TreeImpl.isBalanced(tree.getRoot());\n+            System.out.println(flag);\n+            if(flag){\n+                countTrue++;\n+            }\n+        }\n+        System.out.println(\"Количество сбалансированных деревьев = \"+countTrue);\n+\n+    }\n+\n+\n+}"
  },
  {
    "sha": "c2d207b2454a7608f74381f2cbe1c6dde6a3f556",
    "filename": "src/ru/indivio/algorithms/array/ArrayImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/array/ArrayImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/array/ArrayImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/array/ArrayImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -6,7 +6,7 @@\n \n public class ArrayImpl<E extends Comparable<? super E>> implements Array<E> {\n \n-    private static final int DEFAULT_CAPACITY = 8;\n+    protected static final int DEFAULT_CAPACITY = 8;\n \n     protected E[] data;\n     protected int size;"
  },
  {
    "sha": "69f79c8bb5985ef8bef04bbeea1978243ff45789",
    "filename": "src/ru/indivio/algorithms/deq/DequeImpl.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/deq/DequeImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/deq/DequeImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/deq/DequeImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,64 @@\n+package ru.indivio.algorithms.deq;\n+\n+import ru.indivio.algorithms.queue.QueueImpl;\n+\n+import java.util.Arrays;\n+\n+public class DequeImpl<E> extends QueueImpl<E> implements IDeque<E> {\n+\n+    public DequeImpl(int size) {\n+        super(size);\n+    }\n+\n+    @Override\n+    public boolean insertLeft(E value) {\n+        if (isFull()) {\n+            return false;\n+        }\n+        if (this.head == DEFAULT_HEAD)\n+            this.head = this.data.length;\n+\n+        this.data[--this.head] = value;\n+        this.size++;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public E removeLeft() {\n+        return super.remove();\n+    }\n+\n+    @Override\n+    public boolean insertRight(E value) {\n+        return  super.insert(value);\n+    }\n+\n+    @Override\n+    public E removeRight() {\n+        if (isEmpty()) {\n+            return  null;\n+        }\n+        if (this.tail == DEFAULT_TAIL)\n+\n+            this.tail = this.data.length - 1;\n+        this.size--;\n+\n+        E removedValue = this.data[tail];\n+        this.data[tail--] = null;\n+\n+        return removedValue;\n+    }\n+\n+    @Override\n+    public E peekTail() {\n+        return this.data[this.tail];\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"DequeImpl{\" +\n+                \"data=\" + Arrays.toString(data) +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "e9eab73c5e889192a8feba7186576b7828f46360",
    "filename": "src/ru/indivio/algorithms/deq/IDeque.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/deq/IDeque.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/deq/IDeque.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/deq/IDeque.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.indivio.algorithms.deq;\n+\n+import ru.indivio.algorithms.queue.IQueue;\n+\n+public interface IDeque<E> extends IQueue<E> {\n+\n+        boolean insertLeft(E value);\n+        boolean insertRight(E value);\n+        E removeLeft();\n+        E removeRight();\n+        E peekTail();\n+}"
  },
  {
    "sha": "d8cb5bc16635a6d906905b46cb8d12c10fcb306e",
    "filename": "src/ru/indivio/algorithms/graph/Graph.java",
    "status": "added",
    "additions": 192,
    "deletions": 0,
    "changes": 192,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/graph/Graph.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/graph/Graph.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/graph/Graph.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,192 @@\n+package ru.indivio.algorithms.graph;\n+\n+import java.util.*;\n+\n+public class Graph implements IGraph {\n+\n+    private final List<Vertex> vertexList;\n+    private final boolean[][] adjMat;\n+\n+    public Graph(int maxVertexCount) {\n+        this.vertexList = new ArrayList<>(maxVertexCount);\n+        this.adjMat = new boolean[maxVertexCount][maxVertexCount];\n+    }\n+\n+    @Override\n+    public void addVertex(String label) {\n+        vertexList.add(new Vertex(label));\n+    }\n+\n+    @Override\n+    public void addEdge(String startLabel, String endLabel) {\n+        int startIndex  = indexOf(startLabel);\n+        int endIndex    = indexOf(endLabel);\n+\n+        if (startIndex == -1 || endIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid label for vertex\");\n+        }\n+\n+        adjMat[startIndex][endIndex] = true;\n+        adjMat[endIndex][startIndex] = true;\n+    }\n+\n+    @Override\n+    public void addEdges(String startLabel, String secondLabel, String... others) {\n+        addEdge(startLabel, secondLabel);\n+        for (String other : others) {\n+            addEdge(startLabel, other);\n+        }\n+    }\n+\n+    private int indexOf(String startLabel) {\n+        for (int index = 0; index < getSize(); index++) {\n+            if (vertexList.get(index).getLabel().equals(startLabel)) {\n+                return index;\n+            }\n+        }\n+\n+        return -1;\n+    }\n+\n+    @Override\n+    public int getSize() {\n+        return vertexList.size();\n+    }\n+\n+    @Override\n+    public void display() {\n+        for (int i = 0; i < getSize(); i++) {\n+            System.out.print(vertexList.get(i));\n+            for (int j = 0; j < getSize(); j++) {\n+                if (adjMat[i][j]) {\n+                    System.out.print(\" -> \" + vertexList.get(j));\n+                }\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    @Override\n+    public void dfs(String startLabel) {\n+        int startIndex = indexOf(startLabel);\n+        if (startIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        }\n+\n+        Stack<Vertex> stack = new Stack<>();\n+        Vertex vertex = vertexList.get(startIndex);\n+\n+        visitVertex(stack, vertex);\n+        while (!stack.isEmpty()) {\n+            vertex = getNearUnvisitedVertex(stack.peek());\n+            if (vertex != null) {\n+                visitVertex(stack, vertex);\n+            } else {\n+                stack.pop();\n+            }\n+        }\n+\n+        resetVertexState();\n+    }\n+\n+    @Override\n+    public void bfs(String startLabel) {\n+        int startIndex = indexOf(startLabel);\n+        if (startIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        }\n+\n+        Queue<Vertex> queue = new LinkedList<>();\n+        Vertex vertex = vertexList.get(startIndex);\n+\n+        visitVertex(queue, vertex);\n+        while (!queue.isEmpty()) {\n+            vertex = getNearUnvisitedVertex(queue.peek());\n+            if (vertex != null) {\n+                visitVertex(queue, vertex);\n+            } else {\n+                queue.remove();\n+            }\n+        }\n+\n+        resetVertexState();\n+    }\n+\n+\n+    public String findWay(String startLabel,String stopLabel) {\n+        int startIndex = indexOf(startLabel);\n+        int stopIndex = indexOf(stopLabel);\n+        if (startIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        }\n+        if (stopIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid stop label\");\n+        }\n+\n+        Queue<Vertex> queue = new LinkedList<>(); //new ArrayDeque<>();\n+        Vertex vertex = vertexList.get(startIndex);\n+\n+        visitVertex(queue, vertex);\n+        while (!queue.isEmpty()) {\n+            vertex = getNearUnvisitedVertex(queue.peek());\n+            if (vertex != null) {\n+                visitVertex(queue, vertex);\n+                vertex.setPrevious(queue.peek());\n+                if(vertex.getLabel().equals(stopLabel)){\n+                    return pathToVertex(vertex);\n+\n+                }\n+            } else {\n+                queue.remove();\n+            }\n+        }\n+        System.out.println(\"Путь не найден\");\n+        resetVertexState();\n+        return null;\n+    }\n+\n+    private String pathToVertex(Vertex vertex) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        Stack<String> stack =new Stack<>();\n+        Vertex current = vertex;\n+        while (current != null) {\n+            stack.push(current.getLabel());\n+            current = current.getPrevious();\n+        }\n+        while ( !stack.isEmpty() ) {\n+            stringBuilder.append(stack.pop());\n+            if(!stack.isEmpty()){\n+                stringBuilder.append(\"->\");\n+            }\n+        }\n+        return stringBuilder.toString();\n+    }\n+\n+    private void resetVertexState() {\n+        for (Vertex vertex : vertexList) {\n+            vertex.setVisited(false);\n+            vertex.setPrevious(null);\n+        }\n+    }\n+\n+    private Vertex getNearUnvisitedVertex(Vertex current) {\n+        int currentIndex = vertexList.indexOf(current);\n+        for (int i = 0; i < getSize(); i++) {\n+            if (adjMat[currentIndex][i] && !vertexList.get(i).isVisited()) {\n+                return vertexList.get(i);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void visitVertex(Stack<Vertex> stack, Vertex vertex) {\n+        System.out.println(vertex);\n+        vertex.setVisited(true);\n+        stack.push(vertex);\n+    }\n+    private void visitVertex(Queue<Vertex> queue, Vertex vertex) {\n+        System.out.println(vertex);\n+        vertex.setVisited(true);\n+        queue.add(vertex);\n+    }\n+}"
  },
  {
    "sha": "e44a7711746d5128452e6efc915b5fac1f0ccda5",
    "filename": "src/ru/indivio/algorithms/graph/IGraph.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/graph/IGraph.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/graph/IGraph.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/graph/IGraph.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,24 @@\n+package ru.indivio.algorithms.graph;\n+\n+public interface IGraph {\n+\n+    void addVertex(String label);\n+\n+    void addEdge(String startLabel, String endLabel);\n+\n+    void addEdges(String startLabel, String secondLabel, String... others);\n+\n+    int getSize();\n+\n+    void display();\n+\n+    /**\n+     * англ. Depth-first search, DFS\n+     */\n+    void dfs(String startLabel);\n+\n+    /**\n+     * англ. breadth-first search, BFS\n+     */\n+    void bfs(String startLabel);\n+}"
  },
  {
    "sha": "f36b806777b063241c58ba6e01ba57f1154c2d18",
    "filename": "src/ru/indivio/algorithms/graph/Vertex.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/graph/Vertex.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/graph/Vertex.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/graph/Vertex.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,55 @@\n+package ru.indivio.algorithms.graph;\n+\n+import java.util.Objects;\n+\n+public class Vertex {\n+\n+    private final String label;\n+    private boolean isVisited;\n+\n+    public Vertex getPrevious() {\n+        return previous;\n+    }\n+\n+    public void setPrevious(Vertex previous) {\n+        this.previous = previous;\n+    }\n+\n+    private Vertex previous;\n+\n+    public Vertex(String label) {\n+        this.label = label;\n+    }\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public boolean isVisited() {\n+        return isVisited;\n+    }\n+\n+    public void setVisited(boolean visited) {\n+        isVisited = visited;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Vertex vertex = (Vertex) o;\n+        return Objects.equals(label, vertex.label);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(label);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Vertex{\" +\n+                \"label='\" + label + '\\'' +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "6fcb854d995ad668d99cf0a590d0c5267a7008a7",
    "filename": "src/ru/indivio/algorithms/hashtable/DoubleHashTableImpl.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/DoubleHashTableImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/DoubleHashTableImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/hashtable/DoubleHashTableImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.indivio.algorithms.hashtable;\n+\n+public class DoubleHashTableImpl<K, V> extends HashTableImpl<K, V> {\n+\n+    private static final int DOUBLE_HASH_CONST = 5;\n+\n+    public DoubleHashTableImpl(int maxSize) {\n+        super(maxSize);\n+    }\n+\n+    @Override\n+    protected int getStep(K key) {\n+        return hashDoubleFunc(key);\n+    }\n+\n+    private int hashDoubleFunc(K key) {\n+        return DOUBLE_HASH_CONST - (key.hashCode() % DOUBLE_HASH_CONST);\n+    }\n+}"
  },
  {
    "sha": "796ef660ffeaf0cd02fc3d118f3dc94c28cf3a15",
    "filename": "src/ru/indivio/algorithms/hashtable/HashTable.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/HashTable.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/HashTable.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/hashtable/HashTable.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.indivio.algorithms.hashtable;\n+\n+public interface HashTable<K, V> {\n+\n+    boolean put(K key, V value);\n+\n+    V get(K key);\n+\n+    V remove(K key);\n+\n+    int size();\n+\n+    boolean isEmpty();\n+\n+    void display();\n+\n+\n+    interface Entry<K, V> {\n+\n+        K getKey();\n+\n+        V getValue();\n+\n+        void setValue(V value);\n+    }\n+\n+}"
  },
  {
    "sha": "1d16608acc5ce3c3a2e407455e3c64ca1532fbbb",
    "filename": "src/ru/indivio/algorithms/hashtable/HashTableImpl.java",
    "status": "added",
    "additions": 134,
    "deletions": 0,
    "changes": 134,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/HashTableImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/HashTableImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/hashtable/HashTableImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,134 @@\n+package ru.indivio.algorithms.hashtable;\n+\n+public class HashTableImpl<K, V> implements HashTable<K, V> {\n+\n+    static class Item<K, V> implements Entry<K, V> {\n+        private final K key;\n+        private V value;\n+\n+        public Item(K key, V value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Item{\" +\n+                    \"key=\" + key +\n+                    \", value=\" + value +\n+                    '}';\n+        }\n+\n+        @Override\n+        public K getKey() {\n+            return key;\n+        }\n+\n+        @Override\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public void setValue(V value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    private final Item<K, V>[] data;\n+    private int size;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public HashTableImpl(int maxSize) {\n+        this.data = new Item[maxSize * 2];\n+    }\n+\n+    private int hashFunc(K key) {\n+        return key.hashCode() % data.length;\n+    }\n+\n+    @Override\n+    public boolean put(K key, V value) {\n+        int index = hashFunc(key);\n+\n+        int count = 0;\n+        while (data[index] != null) {\n+            if (data[index].getKey().equals(key)) {\n+                data[index].setValue(value);\n+                return true;\n+            }\n+\n+            if (count >= data.length) {\n+                return false;\n+            }\n+\n+            count++;\n+            index += getStep(key);\n+            index %= data.length;\n+        }\n+\n+        data[index] = new Item<>(key, value);\n+        size++;\n+        return true;\n+    }\n+\n+    protected int getStep(K key) {\n+        return 1;\n+    }\n+\n+    @Override\n+    public V get(K key) {\n+        int index = indexOf(key);\n+        return index != -1 ? data[index].getValue() : null;\n+    }\n+\n+    private int indexOf(K key) {\n+        int index = hashFunc(key);\n+\n+        int count = 0;\n+        while (count < data.length) {\n+            Item<K, V> item = data[index];\n+            if (item != null && item.getKey().equals(key)) {\n+                return index;\n+            }\n+            count++;\n+            index += getStep(key);\n+            index %= data.length;\n+        }\n+\n+        return -1;\n+    }\n+\n+    @Override\n+    public V remove(K key) {\n+        int index = indexOf(key);\n+        if (index == -1) {\n+            return null;\n+        }\n+\n+        Item<K, V> item = data[index];\n+        data[index] = null;\n+        size--;\n+        return item.getValue();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return size == 0;\n+    }\n+\n+    @Override\n+    public void display() {\n+        System.out.println(\"----------\");\n+        for (int i = 0; i < data.length; i++) {\n+            System.out.printf(\"%d = [%s]\", i, data[i]);\n+            System.out.println();\n+        }\n+        System.out.println(\"----------\");\n+    }\n+}"
  },
  {
    "sha": "73c49ed783125bc3e06ae95c58796b1951cfef66",
    "filename": "src/ru/indivio/algorithms/hashtable/MutableKeyTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/MutableKeyTest.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/MutableKeyTest.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/hashtable/MutableKeyTest.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,53 @@\n+package ru.indivio.algorithms.hashtable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class MutableKeyTest {\n+\n+    public static void main(String[] args) {\n+\n+        class MyKey {\n+            Integer i;\n+\n+            public void setI(Integer i) {\n+                this.i = i;\n+            }\n+\n+            public MyKey(Integer i) {\n+                this.i = i;\n+            }\n+\n+            @Override\n+            public int hashCode() {\n+                return i;\n+            }\n+\n+            @Override\n+            public boolean equals(Object obj) {\n+                if (obj instanceof MyKey) {\n+                    return i.equals(((MyKey) obj).i);\n+                } else\n+                    return false;\n+            }\n+\n+        }\n+\n+        Map<MyKey, String> myMap = new HashMap<>();\n+        MyKey key1 = new MyKey(1);\n+        MyKey key2 = new MyKey(2);\n+\n+        myMap.put(key1, \"test \" + 1);\n+        myMap.put(key2, \"test \" + 2);\n+\n+        System.out.println(\"Before:\");\n+        System.out.println(\"test1= \" + myMap.get(key1) + \" test2=\" + myMap.get(key2));\n+\n+        // modifying key1\n+        key1.setI(3);\n+\n+        System.out.println(\"After:\");\n+        System.out.println(\"test1= \" + myMap.get(key1) + \" test2=\" + myMap.get(key2));\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e3948f5fd8b2b3a52e69d605a88d36d6174470a6",
    "filename": "src/ru/indivio/algorithms/hashtable/Product.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/Product.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/Product.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/hashtable/Product.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,44 @@\n+package ru.indivio.algorithms.hashtable;\n+\n+import java.util.Objects;\n+\n+public class Product {\n+\n+    private final int id;\n+    private final String title;\n+\n+    public Product(int id, String title) {\n+        this.id = id;\n+        this.title = title;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Product{\" +\n+                \"id=\" + id +\n+                \", title='\" + title + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Product product = (Product) o;\n+        return id == product.id && Objects.equals(title, product.title);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return id;\n+//        return Objects.hash(id);\n+    }\n+}"
  },
  {
    "sha": "a9248aac23de4902f56aac11ded23f50577ffb56",
    "filename": "src/ru/indivio/algorithms/hashtable/TailHashTableImpl.java",
    "status": "added",
    "additions": 121,
    "deletions": 0,
    "changes": 121,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/TailHashTableImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/hashtable/TailHashTableImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/hashtable/TailHashTableImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,121 @@\n+package ru.indivio.algorithms.hashtable;\n+\n+import java.util.LinkedList;\n+\n+public class TailHashTableImpl<K, V> implements HashTable<K, V> {\n+\n+    static class Item<K, V> implements Entry<K, V> {\n+        private final K key;\n+        private V value;\n+\n+        public Item(K key, V value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Item{\" +\n+                    \"key=\" + key +\n+                    \", value=\" + value +\n+                    '}';\n+        }\n+\n+        @Override\n+        public K getKey() {\n+            return key;\n+        }\n+\n+        @Override\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public void setValue(V value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    //Элементы основного массива -> LinkedList\n+    private final LinkedList<Item<K, V>>[] dataArray;\n+    private int size;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public TailHashTableImpl(int maxSize) {\n+\n+        this.dataArray = new LinkedList[maxSize];\n+        for (int i = 0; i < dataArray.length; i++) {\n+            dataArray[i] = new LinkedList<>();\n+        }\n+    }\n+\n+    //формирование хешключа относительно размера массива\n+    private int hashFunc(K key) {\n+        return key.hashCode() % dataArray.length;\n+    }\n+\n+    @Override\n+    public boolean put(K key, V value) {\n+        int arrayIndex = hashFunc(key); // индекс основного массива\n+        int listIndex = indexOf(key);   // ключ\n+        if (listIndex != -1) {\n+            dataArray[arrayIndex].get(listIndex).value = value;\n+            return true;\n+        }\n+        dataArray[arrayIndex].add(new Item<>(key, value));\n+        size++;\n+        return true;\n+    }\n+\n+    @Override\n+    public V get(K key) {\n+        int arrayIndex = hashFunc(key);\n+        int listIndex = indexOf(key);\n+        return listIndex != -1 ? dataArray[arrayIndex].get(listIndex).value : null;\n+    }\n+\n+    @Override\n+    public V remove(K key) {\n+        int arrayIndex = hashFunc(key);\n+        int listIndex = indexOf(key);\n+        if (listIndex == -1) {\n+            return null;\n+        }\n+\n+        Item<K, V> item = dataArray[arrayIndex].remove(listIndex);\n+        size--;\n+        return item.value;\n+    }\n+\n+    private int indexOf(K key) {\n+        int listIndex = hashFunc(key);\n+        LinkedList<Item<K, V>> items = dataArray[listIndex];\n+        for (int i = 0; i < items.size(); i++) {\n+            Item<K, V> item = items.get(i);\n+            if (item.key.equals(key)) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return size != 0;\n+    }\n+\n+    @Override\n+    public void display() {\n+        System.out.println(\"Tail Hash Table:\");\n+        for (int i = 0; i < dataArray.length; i++) {\n+            System.out.printf(\"%d = [%s]\", i, dataArray[i]);\n+            System.out.println();\n+        }\n+    }\n+}"
  },
  {
    "sha": "d83ced532cb20f2046552c27020d88b49ea873a7",
    "filename": "src/ru/indivio/algorithms/list/LinkedList.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/LinkedList.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/LinkedList.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/LinkedList.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,34 @@\n+package ru.indivio.algorithms.list;\n+\n+public interface LinkedList<E> extends Iterable<E> {\n+\n+    void insertFirst(E value);\n+\n+    E removeFirst();\n+\n+    boolean remove(E value);\n+\n+    boolean contains(E value);\n+\n+    int size();\n+\n+    boolean isEmpty();\n+\n+    void display();\n+\n+    E getFirst();\n+\n+\n+\n+    class Node<E> {\n+        E item;\n+        Node<E> next;\n+\n+        public Node(E item, Node<E> next) {\n+            this.item = item;\n+            this.next = next;\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "07760cd4d5ebeb1984b31776a97bd14349071509",
    "filename": "src/ru/indivio/algorithms/list/LinkedQueueImpl.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/LinkedQueueImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/LinkedQueueImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/LinkedQueueImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,44 @@\n+package ru.indivio.algorithms.list;\n+\n+\n+import ru.indivio.algorithms.queue.IQueue;\n+\n+public class LinkedQueueImpl<E> implements IQueue<E> {\n+\n+    private final TwoSideLinkedList<E> data;\n+\n+    public LinkedQueueImpl() {\n+        this.data = new TwoSideLinkedListImpl<>();\n+    }\n+\n+    @Override\n+    public boolean insert(E value) {\n+        data.insertLast(value);\n+        return true;\n+    }\n+\n+    @Override\n+    public E remove() {\n+        return data.removeFirst();\n+    }\n+\n+    @Override\n+    public E peekHead() {\n+        return data.getFirst();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return data.size();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return data.isEmpty();\n+    }\n+\n+    @Override\n+    public boolean isFull() {\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "eec45a1268bf90aba095385470560708de2cb0f7",
    "filename": "src/ru/indivio/algorithms/list/LinkedStackImpl.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/LinkedStackImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/LinkedStackImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/LinkedStackImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,48 @@\n+package ru.indivio.algorithms.list;\n+\n+\n+import ru.indivio.algorithms.stack.IStack;\n+\n+public class LinkedStackImpl<E> implements IStack<E> {\n+\n+    private final LinkedList<E> data;\n+\n+    public LinkedStackImpl() {\n+        this.data = new SimpleLinkedListImpl<>();\n+    }\n+\n+    @Override\n+    public void push(E value) {\n+        data.insertFirst(value);\n+    }\n+\n+    @Override\n+    public E pop() {\n+        return data.removeFirst();\n+    }\n+\n+    @Override\n+    public E peek() {\n+        return data.getFirst();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return data.size();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return data.isEmpty();\n+    }\n+\n+    @Override\n+    public boolean isFull() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void display() {\n+        data.display();\n+    }\n+}"
  },
  {
    "sha": "d65aa20e3bb503938fd6f9e4b83036477193ac6d",
    "filename": "src/ru/indivio/algorithms/list/SimpleLinkedListImpl.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/SimpleLinkedListImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/SimpleLinkedListImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/SimpleLinkedListImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,107 @@\n+package ru.indivio.algorithms.list;\n+\n+\n+import java.util.Iterator;\n+\n+public class SimpleLinkedListImpl<E> implements LinkedList<E> {\n+\n+    protected int size;\n+    protected Node<E> firstElement; //002[006 --> 005]\n+\n+    @Override\n+    public void insertFirst(E value) {\n+        firstElement = new Node<>(value, firstElement); //001[005] --> //002[006-->005]\n+        size++;\n+    }\n+\n+    @Override\n+    public E removeFirst() {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        Node<E> removedNode = firstElement;\n+        firstElement = removedNode.next;\n+//        firstElement = firstElement.next;\n+\n+        removedNode.next = null;\n+        size--;\n+        return removedNode.item;\n+    }\n+\n+    @Override\n+    public boolean remove(E value) {\n+        Node<E> current = firstElement;\n+        Node<E> previous = null;\n+\n+        while (current != null) {\n+            if (current.item.equals(value)) {\n+                break;\n+            }\n+\n+            previous = current;\n+            current = current.next;\n+        }\n+\n+        if (current == null) {\n+            return false;\n+        }\n+\n+        if (current == firstElement) {\n+            firstElement = firstElement.next;\n+        } else {\n+            previous.next = current.next;\n+        }\n+\n+        current.next = null;\n+        size--;\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean contains(E value) {\n+        Node<E> current = firstElement;\n+        while (current != null) {\n+            if (current.item.equals(value)) {\n+                return true;\n+            }\n+            current = current.next;\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return firstElement == null;\n+    }\n+\n+    @Override\n+    public void display() {\n+        System.out.println(\"----------\");\n+        Node<E> current = firstElement;\n+        while (current != null) {\n+            System.out.println(current.item);\n+            current = current.next;\n+        }\n+        System.out.println(\"----------\");\n+    }\n+\n+    @Override\n+    public E getFirst() {\n+        return firstElement != null ? firstElement.item : null;\n+//        return Optional.ofNullable(firstElement)\n+//                .map(node -> node.item)\n+//                .orElse(null);\n+    }\n+\n+    @Override\n+    public Iterator<E> iterator() {\n+        return new SimpleListIterator<E>(this);\n+    }\n+}"
  },
  {
    "sha": "0c965a16c0e48dabbfca3e58ae1df953eed84cb3",
    "filename": "src/ru/indivio/algorithms/list/SimpleListIterator.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/SimpleListIterator.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/SimpleListIterator.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/SimpleListIterator.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,74 @@\n+package ru.indivio.algorithms.list;\n+\n+import java.util.Iterator;\n+\n+public class SimpleListIterator<E> implements Iterator<E> {\n+    private final SimpleLinkedListImpl<E> list;\n+    private LinkedList.Node<E> curr;\n+    private LinkedList.Node<E> prev;\n+\n+    public SimpleListIterator(SimpleLinkedListImpl<E> list) {\n+        this.list = list;\n+        reset();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return curr != null;\n+    }\n+\n+    @Override\n+    public E next() {\n+        E nextValue = curr.item;\n+        prev = curr;\n+        curr = curr.next;\n+        return nextValue;\n+    }\n+\n+    @Override\n+    public void remove() {\n+        if (prev == null) {\n+            list.firstElement = curr.next;\n+            reset();\n+        } else {\n+            prev.next = curr.next;\n+            if (!hasNext()) {\n+                reset();\n+            } else {\n+                curr = curr.next;\n+            }\n+        }\n+    }\n+    public void reset() {\n+        curr = list.firstElement;\n+        prev = null;\n+    }\n+\n+    public void insertBefore(E data) {\n+        LinkedList.Node<E> newNode = new LinkedList.Node<>(data,null);\n+        if(prev == null) {\n+            newNode.next = list.firstElement;\n+            list.firstElement = newNode;\n+            reset();\n+        }\n+        else {\n+            newNode.next = prev.next;\n+            prev.next = newNode;\n+            curr = newNode;\n+        }\n+\n+    }\n+\n+\n+    public void insertAfter(E data) {\n+        LinkedList.Node<E> newNode = new LinkedList.Node<>(data,null);\n+        if (list.isEmpty()){\n+            list.firstElement = newNode;\n+            curr = newNode;\n+        } else {\n+            newNode.next = curr.next;\n+            curr.next = newNode;\n+            next();\n+        }\n+    }\n+}"
  },
  {
    "sha": "13816a792feb7e7c2550c744d735724b558066ee",
    "filename": "src/ru/indivio/algorithms/list/TestMain4.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/TestMain4.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/TestMain4.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/TestMain4.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,67 @@\n+package ru.indivio.algorithms.list;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class TestMain4 {\n+\n+    public static void main(String[] args) {\n+//        testLinkedList();\n+        testForEach();\n+    }\n+\n+    private static void testLinkedList() {\n+//        LinkedList<Integer> linkedList = new SimpleLinkedListImpl<>();\n+        TwoSideLinkedList<Integer> linkedList = new TwoSideLinkedListImpl<>();\n+        linkedList.insertFirst(1);\n+        linkedList.insertFirst(2);\n+        linkedList.insertFirst(3);\n+        linkedList.insertFirst(4);\n+        linkedList.insertLast(5);\n+\n+        linkedList.display();\n+\n+        System.out.println(\"Find 2: \" + linkedList.contains(2));\n+        System.out.println(\"Find 1: \" + linkedList.contains(1));\n+        System.out.println(\"Find 4: \" + linkedList.contains(4));\n+        System.out.println(\"Find 4444: \" + linkedList.contains(4444));\n+\n+        linkedList.removeFirst();\n+        linkedList.remove(2);\n+\n+        linkedList.display();\n+    }\n+\n+    private static void testForEach() {\n+        List<Integer> arrayList = new ArrayList<>();\n+        arrayList.add(1);\n+        arrayList.add(2);\n+        arrayList.add(3);\n+        arrayList.add(4);\n+\n+        for (Integer integer : arrayList) {\n+            System.out.println(integer);\n+        }\n+\n+        System.out.println(\"----\");\n+\n+        Iterator<Integer> iterator = arrayList.iterator();\n+        while (iterator.hasNext()) {\n+            Integer value = iterator.next();\n+            System.out.println(value);\n+        }\n+\n+        LinkedList<Integer> linkedList = new SimpleLinkedListImpl<>();\n+        linkedList.insertFirst(1);\n+        linkedList.insertFirst(2);\n+        linkedList.insertFirst(3);\n+        linkedList.insertFirst(4);\n+\n+        linkedList.display();\n+\n+        for(Integer value: linkedList) {\n+            System.out.println(value);\n+        }\n+    }\n+}"
  },
  {
    "sha": "7d73b0adf3107fdd20794fb2a2b81b94a3bcf9d2",
    "filename": "src/ru/indivio/algorithms/list/TwoSideLinkedList.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/TwoSideLinkedList.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/TwoSideLinkedList.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/TwoSideLinkedList.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,6 @@\n+package ru.indivio.algorithms.list;\n+\n+public interface TwoSideLinkedList<E> extends LinkedList<E> {\n+\n+    void insertLast(E value);\n+}"
  },
  {
    "sha": "2a4c88a01aa46b580f125ce048560eb87b76ef16",
    "filename": "src/ru/indivio/algorithms/list/TwoSideLinkedListImpl.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/indiviomaster/algorythms/blob/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/TwoSideLinkedListImpl.java",
    "raw_url": "https://github.com/indiviomaster/algorythms/raw/a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a/src/ru/indivio/algorithms/list/TwoSideLinkedListImpl.java",
    "contents_url": "https://api.github.com/repos/indiviomaster/algorythms/contents/src/ru/indivio/algorithms/list/TwoSideLinkedListImpl.java?ref=a9cd3abaf1ae8f5d9801c9529fb6085623a64c9a",
    "patch": "@@ -0,0 +1,79 @@\n+package ru.indivio.algorithms.list;\n+\n+public class TwoSideLinkedListImpl<E>\n+        extends SimpleLinkedListImpl<E>\n+        implements TwoSideLinkedList<E> {\n+\n+    private Node<E> lastElement;\n+\n+    @Override\n+    public void insertFirst(E value) {\n+        super.insertFirst(value);\n+        if (size == 1) {\n+            lastElement = firstElement;\n+        }\n+    }\n+\n+\n+    @Override\n+    public E removeFirst() {\n+        E removeValue = super.removeFirst();\n+        if (isEmpty()) {\n+            lastElement = null;\n+        }\n+\n+        return removeValue;\n+    }\n+\n+    @Override\n+    public boolean remove(E value) {\n+        Node<E> current = firstElement;\n+        Node<E> previous = null;\n+\n+        while (current != null) {\n+            if (current.item.equals(value)) {\n+                break;\n+            }\n+\n+            previous = current;\n+            current = current.next;\n+        }\n+\n+        if (current == null) {\n+            return false;\n+        }\n+\n+        if (size == 1) {\n+            removeFirst();\n+            return true;\n+        }\n+\n+        if (current == firstElement) {\n+            firstElement = firstElement.next;\n+        } else if (current == lastElement) {\n+            lastElement = previous;\n+            previous.next = null;\n+        }\n+        else {\n+            previous.next = current.next;\n+        }\n+\n+        current.next = null;\n+        size--;\n+        return true;\n+    }\n+\n+    @Override\n+    public void insertLast(E value) {\n+        Node<E> newNode = new Node<>(value, null);\n+        if (isEmpty()) {\n+            firstElement = newNode;\n+//            lastElement = newNode;\n+        } else {\n+            lastElement.next = newNode;\n+//            lastElement = newNode;\n+        }\n+        lastElement = newNode;\n+        size++;\n+    }\n+}"
  }
]
