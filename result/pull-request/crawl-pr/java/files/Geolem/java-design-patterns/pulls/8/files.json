[
  {
    "sha": "9cd167463787b57c823988c4378aaeaf452eb7cd",
    "filename": ".all-contributorsrc",
    "status": "modified",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/.all-contributorsrc",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/.all-contributorsrc",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/.all-contributorsrc?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -1413,6 +1413,33 @@\n       \"contributions\": [\n         \"code\"\n       ]\n+    },\n+    {\n+      \"login\": \"va1m\",\n+      \"name\": \"va1m\",\n+      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17025445?v=4\",\n+      \"profile\": \"https://github.com/va1m\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"noamgrinch\",\n+      \"name\": \"Noam Greenshtain\",\n+      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31648669?v=4\",\n+      \"profile\": \"https://github.com/noamgrinch\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"qfxl\",\n+      \"name\": \"yonghong Xu\",\n+      \"avatar_url\": \"https://avatars.githubusercontent.com/u/14086462?v=4\",\n+      \"profile\": \"https://xuyonghong.cn/\",\n+      \"contributions\": [\n+        \"doc\"\n+      ]\n     }\n   ],\n   \"contributorsPerLine\": 4,"
  },
  {
    "sha": "7166604ae34519ca73a70eb92552b4d6d50619d8",
    "filename": ".github/workflows/maven-pr-builder.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/.github/workflows/maven-pr-builder.yml",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/.github/workflows/maven-pr-builder.yml",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/.github/workflows/maven-pr-builder.yml?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -29,7 +29,7 @@ name: Java PR Builder\n on:\n   pull_request:\n     branches: [ master ]\n-    types: [ opened, reopened, synchronize ]\n+    types: [ opened, reopened, synchronize, labeled, unlabeled ]\n \n jobs:\n   build:"
  },
  {
    "sha": "d315ed8ac2dc7b81788e9f45ca713e422038138f",
    "filename": "README.md",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/README.md",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/README.md",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/README.md?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -10,7 +10,7 @@\n [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=iluwatar_java-design-patterns&metric=coverage)](https://sonarcloud.io/dashboard?id=iluwatar_java-design-patterns)\n [![Join the chat at https://gitter.im/iluwatar/java-design-patterns](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/iluwatar/java-design-patterns?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n <!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n-[![All Contributors](https://img.shields.io/badge/all_contributors-155-orange.svg?style=flat-square)](#contributors-)\n+[![All Contributors](https://img.shields.io/badge/all_contributors-158-orange.svg?style=flat-square)](#contributors-)\n <!-- ALL-CONTRIBUTORS-BADGE:END -->\n \n <br/>\n@@ -307,6 +307,11 @@ This project is licensed under the terms of the MIT license.\n     <td align=\"center\"><a href=\"https://github.com/byoungju94\"><img src=\"https://avatars.githubusercontent.com/u/42516378?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>byoungju94</b></sub></a><br /><a href=\"https://github.com/iluwatar/java-design-patterns/commits?author=byoungju94\" title=\"Code\">üíª</a></td>\n     <td align=\"center\"><a href=\"https://github.com/moustafafarhat\"><img src=\"https://avatars.githubusercontent.com/u/38836727?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Moustafa Farhat</b></sub></a><br /><a href=\"#translation-moustafafarhat\" title=\"Translation\">üåç</a></td>\n     <td align=\"center\"><a href=\"https://github.com/richardmr36\"><img src=\"https://avatars.githubusercontent.com/u/19147333?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Martel Richard</b></sub></a><br /><a href=\"https://github.com/iluwatar/java-design-patterns/commits?author=richardmr36\" title=\"Code\">üíª</a></td>\n+    <td align=\"center\"><a href=\"https://github.com/va1m\"><img src=\"https://avatars.githubusercontent.com/u/17025445?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>va1m</b></sub></a><br /><a href=\"https://github.com/iluwatar/java-design-patterns/commits?author=va1m\" title=\"Code\">üíª</a></td>\n+  </tr>\n+  <tr>\n+    <td align=\"center\"><a href=\"https://github.com/noamgrinch\"><img src=\"https://avatars.githubusercontent.com/u/31648669?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Noam Greenshtain</b></sub></a><br /><a href=\"https://github.com/iluwatar/java-design-patterns/commits?author=noamgrinch\" title=\"Code\">üíª</a></td>\n+    <td align=\"center\"><a href=\"https://xuyonghong.cn/\"><img src=\"https://avatars.githubusercontent.com/u/14086462?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>yonghong Xu</b></sub></a><br /><a href=\"https://github.com/iluwatar/java-design-patterns/commits?author=qfxl\" title=\"Documentation\">üìñ</a></td>\n   </tr>\n </table>\n "
  },
  {
    "sha": "59ca86135ed3fef36c227fde64c10c33cffcf58a",
    "filename": "abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/abstract-document/src/main/java/com/iluwatar/abstractdocument/App.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -27,8 +27,7 @@\n import com.iluwatar.abstractdocument.domain.enums.Property;\n import java.util.List;\n import java.util.Map;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * The Abstract Document pattern enables handling additional, non-static properties. This pattern\n@@ -38,10 +37,9 @@\n  * <p>In Abstract Document pattern,({@link AbstractDocument}) fully implements {@link Document})\n  * interface. Traits are then defined to enable access to properties in usual, static way.\n  */\n+@Slf4j\n public class App {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n-\n   /**\n    * Program entry point.\n    *"
  },
  {
    "sha": "c301b85eb41878f60fe503c3d764a0eca95e11c3",
    "filename": "abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 9,
    "changes": 17,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,19 +23,18 @@\n \n package com.iluwatar.abstractdocument;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n \n /**\n  * AbstractDocument test class\n  */\n-public class AbstractDocumentTest {\n+class AbstractDocumentTest {\n \n   private static final String KEY = \"key\";\n   private static final String VALUE = \"value\";\n@@ -50,13 +49,13 @@\n   private final DocumentImplementation document = new DocumentImplementation(new HashMap<>());\n \n   @Test\n-  public void shouldPutAndGetValue() {\n+  void shouldPutAndGetValue() {\n     document.put(KEY, VALUE);\n     assertEquals(VALUE, document.get(KEY));\n   }\n \n   @Test\n-  public void shouldRetrieveChildren() {\n+  void shouldRetrieveChildren() {\n     var children = List.of(Map.of(), Map.of());\n \n     document.put(KEY, children);\n@@ -67,14 +66,14 @@ public void shouldRetrieveChildren() {\n   }\n \n   @Test\n-  public void shouldRetrieveEmptyStreamForNonExistingChildren() {\n+  void shouldRetrieveEmptyStreamForNonExistingChildren() {\n     var children = document.children(KEY, DocumentImplementation::new);\n     assertNotNull(children);\n     assertEquals(0, children.count());\n   }\n \n   @Test\n-  public void shouldIncludePropsInToString() {\n+  void shouldIncludePropsInToString() {\n     var props = Map.of(KEY, (Object) VALUE);\n     var document = new DocumentImplementation(props);\n     assertTrue(document.toString().contains(KEY));"
  },
  {
    "sha": "a0e129083b238e2b3887e90d0da5283acc65bd4e",
    "filename": "abstract-document/src/test/java/com/iluwatar/abstractdocument/DomainTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/abstract-document/src/test/java/com/iluwatar/abstractdocument/DomainTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/abstract-document/src/test/java/com/iluwatar/abstractdocument/DomainTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/abstract-document/src/test/java/com/iluwatar/abstractdocument/DomainTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,19 +23,20 @@\n \n package com.iluwatar.abstractdocument;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n import com.iluwatar.abstractdocument.domain.Car;\n import com.iluwatar.abstractdocument.domain.Part;\n import com.iluwatar.abstractdocument.domain.enums.Property;\n+import org.junit.jupiter.api.Test;\n+\n import java.util.List;\n import java.util.Map;\n-import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n /**\n  * Test for Part and Car\n  */\n-public class DomainTest {\n+class DomainTest {\n \n   private static final String TEST_PART_TYPE = \"test-part-type\";\n   private static final String TEST_PART_MODEL = \"test-part-model\";\n@@ -45,7 +46,7 @@\n   private static final long TEST_CAR_PRICE = 1L;\n \n   @Test\n-  public void shouldConstructPart() {\n+  void shouldConstructPart() {\n     var partProperties = Map.of(\n         Property.TYPE.toString(), TEST_PART_TYPE,\n         Property.MODEL.toString(), TEST_PART_MODEL,\n@@ -58,7 +59,7 @@ public void shouldConstructPart() {\n   }\n \n   @Test\n-  public void shouldConstructCar() {\n+  void shouldConstructCar() {\n     var carProperties = Map.of(\n         Property.MODEL.toString(), TEST_CAR_MODEL,\n         Property.PRICE.toString(), TEST_CAR_PRICE,"
  },
  {
    "sha": "d208002a721a64747137fb2f27b1b5ba01d8af3e",
    "filename": "abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,8 +23,7 @@\n \n package com.iluwatar.abstractfactory;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that\n@@ -40,10 +39,9 @@\n  * and its implementations ( {@link ElfKingdomFactory}, {@link OrcKingdomFactory}). The example uses\n  * both concrete implementations to create a king, a castle and an army.\n  */\n+@Slf4j\n public class App implements Runnable {\n \n-  private static Logger log = LoggerFactory.getLogger(App.class);\n-\n   private final Kingdom kingdom = new Kingdom();\n \n   public Kingdom getKingdom() {\n@@ -62,17 +60,17 @@ public static void main(String[] args) {\n \n   @Override\n   public void run() {\n-    log.info(\"Elf Kingdom\");\n+    LOGGER.info(\"Elf Kingdom\");\n     createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);\n-    log.info(kingdom.getArmy().getDescription());\n-    log.info(kingdom.getCastle().getDescription());\n-    log.info(kingdom.getKing().getDescription());\n+    LOGGER.info(kingdom.getArmy().getDescription());\n+    LOGGER.info(kingdom.getCastle().getDescription());\n+    LOGGER.info(kingdom.getKing().getDescription());\n \n-    log.info(\"Orc Kingdom\");\n+    LOGGER.info(\"Orc Kingdom\");\n     createKingdom(Kingdom.FactoryMaker.KingdomType.ORC);\n-    log.info(kingdom.getArmy().getDescription());\n-    log.info(kingdom.getCastle().getDescription());\n-    log.info(kingdom.getKing().getDescription());\n+    LOGGER.info(kingdom.getArmy().getDescription());\n+    LOGGER.info(kingdom.getCastle().getDescription());\n+    LOGGER.info(kingdom.getKing().getDescription());\n   }\n \n   /**"
  },
  {
    "sha": "f78e678755fa81c7f55a1fd840e13fd218af2cea",
    "filename": "abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java",
    "status": "modified",
    "additions": 5,
    "deletions": 24,
    "changes": 29,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,36 +23,17 @@\n \n package com.iluwatar.abstractfactory;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n public class Kingdom {\n \n   private King king;\n   private Castle castle;\n   private Army army;\n \n-  public King getKing() {\n-    return king;\n-  }\n-\n-  public Castle getCastle() {\n-    return castle;\n-  }\n-\n-  public Army getArmy() {\n-    return army;\n-  }\n-\n-  public void setKing(King king) {\n-    this.king = king;\n-  }\n-\n-  public void setCastle(Castle castle) {\n-    this.castle = castle;\n-  }\n-\n-  public void setArmy(Army army) {\n-    this.army = army;\n-  }\n-\n   /**\n    * The factory of kingdom factories.\n    */"
  },
  {
    "sha": "3136ee29fcf2a7217b2162a1b83a8cf51d93bb62",
    "filename": "abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -31,12 +31,12 @@\n /**\n  * Test for abstract factory.\n  */\n-public class AbstractFactoryTest {\n+class AbstractFactoryTest {\n \n   private final App app = new App();\n \n   @Test\n-  public void king() {\n+  void king() {\n     app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);\n     final var kingdom = app.getKingdom();\n \n@@ -51,7 +51,7 @@ public void king() {\n   }\n \n   @Test\n-  public void castle() {\n+  void castle() {\n     app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);\n     final var kingdom = app.getKingdom();\n \n@@ -66,7 +66,7 @@ public void castle() {\n   }\n \n   @Test\n-  public void army() {\n+  void army() {\n     app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);\n     final var kingdom = app.getKingdom();\n \n@@ -81,7 +81,7 @@ public void army() {\n   }\n \n   @Test\n-  public void createElfKingdom() {\n+  void createElfKingdom() {\n     app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);\n     final var kingdom = app.getKingdom();\n \n@@ -97,7 +97,7 @@ public void createElfKingdom() {\n   }\n \n   @Test\n-  public void createOrcKingdom() {\n+  void createOrcKingdom() {\n     app.createKingdom(Kingdom.FactoryMaker.KingdomType.ORC);\n     final var kingdom = app.getKingdom();\n "
  },
  {
    "sha": "c5589895d7cf4d2466cfdc7e076c1e152c65e632",
    "filename": "abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 10,
    "changes": 16,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -28,20 +28,16 @@\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n \n /**\n- * Tests that Abstract Factory example runs without errors.\n+ * Issue: Add at least one assertion to this test case.\n+ *\n+ * Solution: Inserted assertion to check whether the execution of the main method in {@link App}\n+ * throws an exception.\n  */\n class AppTest {\n-\n-  /**\n-   * Issue: Add at least one assertion to this test case.\n-   *\n-   * Solution: Inserted assertion to check whether the execution of the main method in {@link App}\n-   * throws an exception.\n-   */\n-\n+    \n   @Test\n   void shouldExecuteApplicationWithoutException() {\n \n-    assertDoesNotThrow(() -> App.main(new String[]{}));\n+\t  assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n }"
  },
  {
    "sha": "6e26a85950c4c2967dd41def5d0d6855d5eda3b6",
    "filename": "active-object/README.md",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/README.md",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/README.md",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/README.md?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,125 @@\n+---\n+layout: pattern\n+title: Active Object\n+folder: active-object\n+permalink: /patterns/active-object/\n+categories: Concurrency\n+tags:\n+ - Performance\n+---\n+\n+\n+## Intent\n+The active object design pattern decouples method execution from method invocation for objects that each reside in their thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.\n+\n+## Explanation\n+\n+The class that implements the active object pattern will contain a self-synchronization mechanism without using 'synchronized' methods.\n+\n+Real-world example\n+\n+>The Orcs are known for their wildness and untameable soul. It seems like they have their own thread of control based on previous behavior.\n+\n+To implement a creature that has its own thread of control mechanism and expose its API only and not the execution itself, we can use the Active Object pattern.\n+\n+\n+**Programmatic Example**\n+\n+```java\n+public abstract class ActiveCreature{\n+  private final Logger logger = LoggerFactory.getLogger(ActiveCreature.class.getName());\n+\n+  private BlockingQueue<Runnable> requests;\n+  \n+  private String name;\n+  \n+  private Thread thread;\n+\n+  public ActiveCreature(String name) {\n+    this.name = name;\n+    this.requests = new LinkedBlockingQueue<Runnable>();\n+    thread = new Thread(new Runnable() {\n+        @Override\n+        public void run() {\n+          while (true) {\n+            try {\n+              requests.take().run();\n+            } catch (InterruptedException e) { \n+              logger.error(e.getMessage());\n+            }\n+          }\n+        }\n+      }\n+    );\n+    thread.start();\n+  }\n+  \n+  public void eat() throws InterruptedException {\n+    requests.put(new Runnable() {\n+        @Override\n+        public void run() { \n+          logger.info(\"{} is eating!\",name());\n+          logger.info(\"{} has finished eating!\",name());\n+        }\n+      }\n+    );\n+  }\n+\n+  public void roam() throws InterruptedException {\n+    requests.put(new Runnable() {\n+        @Override\n+        public void run() { \n+          logger.info(\"{} has started to roam and the wastelands.\",name());\n+        }\n+      }\n+    );\n+  }\n+  \n+  public String name() {\n+    return this.name;\n+  }\n+}\n+```\n+\n+We can see that any class that will extend the ActiveCreature class will have its own thread of control to execute and invocate methods.\n+\n+For example, the Orc class:\n+\n+```java\n+public class Orc extends ActiveCreature {\n+\n+  public Orc(String name) {\n+    super(name);\n+  }\n+\n+}\n+```\n+\n+Now, we can create multiple creatures such as Orcs, tell them to eat and roam and they will execute it on their own thread of control:\n+\n+```java\n+  public static void main(String[] args) {  \n+    var app = new App();\n+    app.run();\n+  }\n+  \n+  @Override\n+  public void run() {\n+    ActiveCreature creature;\n+    try {\n+      for (int i = 0;i < creatures;i++) {\n+        creature = new Orc(Orc.class.getSimpleName().toString() + i);\n+        creature.eat();\n+        creature.roam();\n+      }\n+      Thread.sleep(1000);\n+    } catch (InterruptedException e) {\n+      logger.error(e.getMessage());\n+    }\n+    Runtime.getRuntime().exit(1);\n+  }\n+```\n+\n+## Class diagram\n+\n+![alt text](./etc/active-object.urm.PNG \"Active Object class diagram\")"
  },
  {
    "sha": "c14f66144ee297261111c1c05529c5d00ebe393e",
    "filename": "active-object/etc/active-object.urm.PNG",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/etc/active-object.urm.PNG",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/etc/active-object.urm.PNG",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/etc/active-object.urm.PNG?ref=b5ed8b227857f0b446157d43fa98814630922444"
  },
  {
    "sha": "3fc3c8e1e9217f0acac07cf4ec6cefeb128ac823",
    "filename": "active-object/etc/active-object.urm.puml",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/etc/active-object.urm.puml",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/etc/active-object.urm.puml",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/etc/active-object.urm.puml?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,25 @@\n+@startuml\n+package com.iluwatar.activeobject {\n+  abstract class ActiveCreature {\n+    - logger : Logger\n+    - name : String\n+    - requests : BlockingQueue<Runnable>\n+    - thread : Thread\n+    + ActiveCreature(name : String)\n+    + eat()\n+    + name() : String\n+    + roam()\n+  }\n+  class App {\n+    - creatures : Integer\n+    - logger : Logger\n+    + App()\n+    + main(args : String[]) {static}\n+    + run()\n+  }\n+  class Orc {\n+    + Orc(name : String)\n+  }\n+}\n+Orc --|> ActiveCreature \n+@enduml\n\\ No newline at end of file"
  },
  {
    "sha": "3ea22d4e23d6d4251e45fbfc514ca31e02e5e1de",
    "filename": "active-object/pom.xml",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/pom.xml",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/pom.xml",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/pom.xml?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+\n+    The MIT License\n+    Copyright ¬© 2014-2021 Ilkka Sepp√§l√§\n+\n+    Permission is hereby granted, free of charge, to any person obtaining a copy\n+    of this software and associated documentation files (the \"Software\"), to deal\n+    in the Software without restriction, including without limitation the rights\n+    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+    copies of the Software, and to permit persons to whom the Software is\n+    furnished to do so, subject to the following conditions:\n+\n+    The above copyright notice and this permission notice shall be included in\n+    all copies or substantial portions of the Software.\n+\n+    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+    THE SOFTWARE.\n+\n+-->\n+<project\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+\txmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>com.iluwatar</groupId>\n+\t\t<artifactId>java-design-patterns</artifactId>\n+\t\t<version>1.24.0-SNAPSHOT</version>\n+\t</parent>\n+\t<artifactId>active-object</artifactId>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.junit.jupiter</groupId>\n+\t\t\t<artifactId>junit-jupiter-engine</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\t</dependencies>\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<!-- Maven assembly plugin is invoked with default setting which we have \n+\t\t\t\tin parent pom and specifying the class having main method -->\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t<artifactId>maven-assembly-plugin</artifactId>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<archive>\n+\t\t\t\t\t\t\t\t<manifest>\n+\t\t\t\t\t\t\t\t\t<mainClass>com.iluwatar.activeobject.App</mainClass>\n+\t\t\t\t\t\t\t\t</manifest>\n+\t\t\t\t\t\t\t</archive>\n+\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t</execution>\n+\t\t\t\t</executions>\n+\t\t\t</plugin>\n+\t\t</plugins>\n+\t</build>\n+</project>"
  },
  {
    "sha": "479dc0643716e94503c48a960349547c13af6bc1",
    "filename": "active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License\n+ * Copyright ¬© 2014-2021 Ilkka Sepp√§l√§\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.activeobject;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * ActiveCreature class is the base of the active object example.\n+ * @author Noam Greenshtain\n+ *\n+ */\n+public abstract class ActiveCreature {\n+  \n+  private static final Logger logger = LoggerFactory.getLogger(ActiveCreature.class.getName());\n+\n+  private BlockingQueue<Runnable> requests;\n+  \n+  private String name;\n+  \n+  private Thread thread; // Thread of execution.\n+  \n+  private int status; // status of the thread of execution.\n+\n+  /**\n+   * Constructor and initialization.\n+   */\n+  protected ActiveCreature(String name) {\n+    this.name = name;\n+    this.status = 0;\n+    this.requests = new LinkedBlockingQueue<>();\n+    thread = new Thread(() -> {\n+      boolean infinite = true;\n+      while (infinite) {\n+        try {\n+          requests.take().run();\n+        } catch (InterruptedException e) {\n+          if (this.status != 0) {\n+            logger.error(\"Thread was interrupted. --> {}\", e.getMessage()); \n+          }\n+          infinite = false;\n+          Thread.currentThread().interrupt();\n+        }\n+      }\n+    });\n+    thread.start();\n+  }\n+\n+  /**\n+   * Eats the porridge.\n+   * @throws InterruptedException due to firing a new Runnable.\n+   */\n+  public void eat() throws InterruptedException {\n+    requests.put(() -> {\n+      logger.info(\"{} is eating!\",name());\n+      logger.info(\"{} has finished eating!\",name());\n+    });\n+  }\n+\n+  /**\n+   * Roam in the wastelands.\n+   * @throws InterruptedException due to firing a new Runnable.\n+   */\n+  public void roam() throws InterruptedException {\n+    requests.put(() ->\n+        logger.info(\"{} has started to roam in the wastelands.\",name())\n+    );\n+  }\n+  \n+  /**\n+   * Returns the name of the creature.\n+   * @return the name of the creature.\n+   */\n+  public String name() {\n+    return this.name;\n+  }\n+  \n+  /**\n+   * Kills the thread of execution.\n+   * @param status of the thread of execution. 0 == OK, the rest is logging an error.\n+   */\n+  public void kill(int status) {\n+    this.status = status;\n+    this.thread.interrupt();\n+  }\n+  \n+  /**\n+   * Returns the status of the thread of execution.\n+   * @return the status of the thread of execution.\n+   */\n+  public int getStatus() {\n+    return this.status;\n+  }\n+}"
  },
  {
    "sha": "d36d1023d2ce111fe01dc827d7bfe1bb676b6c70",
    "filename": "active-object/src/main/java/com/iluwatar/activeobject/App.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/main/java/com/iluwatar/activeobject/App.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/main/java/com/iluwatar/activeobject/App.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/src/main/java/com/iluwatar/activeobject/App.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * The MIT License\n+ * Copyright ¬© 2014-2021 Ilkka Sepp√§l√§\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.activeobject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The Active Object pattern helps to solve synchronization difficulties without using \n+ * 'synchronized' methods. The active object will contain a thread-safe data structure \n+ * (such as BlockingQueue) and use to synchronize method calls by moving the logic of the method\n+ * into an invocator(usually a Runnable) and store it in the DSA.\n+ * \n+ * <p>In this example, we fire 20 threads to modify a value in the target class.\n+ */\n+public class App implements Runnable {\n+  \n+  private static final Logger logger = LoggerFactory.getLogger(App.class.getName());\n+  \n+  private static final int NUM_CREATURES = 3;\n+\n+  /**\n+   * Program entry point.\n+   *\n+   * @param args command line arguments.\n+   */\n+  public static void main(String[] args) {  \n+    var app = new App();\n+    app.run();\n+  }\n+  \n+  @Override\n+  public void run() {\n+    List<ActiveCreature> creatures = new ArrayList<>();\n+    try {\n+      for (int i = 0;i < NUM_CREATURES;i++) {\n+        creatures.add(new Orc(Orc.class.getSimpleName() + i));\n+        creatures.get(i).eat();\n+        creatures.get(i).roam();\n+      }\n+      Thread.sleep(1000);\n+    } catch (InterruptedException e) {\n+      logger.error(e.getMessage());\n+      Thread.currentThread().interrupt();\n+    } finally {\n+      for (int i = 0;i < NUM_CREATURES;i++) {\n+        creatures.get(i).kill(0);\n+      }\n+    }\n+  }\n+}"
  },
  {
    "sha": "2bce5b2b04a92916be03817ffa1aae38f61ff306",
    "filename": "active-object/src/main/java/com/iluwatar/activeobject/Orc.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/main/java/com/iluwatar/activeobject/Orc.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/main/java/com/iluwatar/activeobject/Orc.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/src/main/java/com/iluwatar/activeobject/Orc.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * The MIT License\n+ * Copyright ¬© 2014-2021 Ilkka Sepp√§l√§\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.activeobject;\n+\n+/**\n+ * An implementation of the ActiveCreature class.\n+ * @author Noam Greenshtain\n+ *\n+ */\n+public class Orc extends ActiveCreature {\n+\n+  public Orc(String name) {\n+    super(name);\n+  }\n+\n+}"
  },
  {
    "sha": "8a4296a1f3e6e674b3eb8bbdb8e6b075d0e64121",
    "filename": "active-object/src/test/java/com/iluwatar/activeobject/ActiveCreatureTest.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/test/java/com/iluwatar/activeobject/ActiveCreatureTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/test/java/com/iluwatar/activeobject/ActiveCreatureTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/src/test/java/com/iluwatar/activeobject/ActiveCreatureTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * The MIT License\n+ * Copyright ¬© 2014-2021 Ilkka Sepp√§l√§\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.activeobject;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+class ActiveCreatureTest {\n+\t\n+\t@Test\n+\tvoid executionTest() throws InterruptedException {\n+\t\tActiveCreature orc = new Orc(\"orc1\");\n+\t\tassertEquals(\"orc1\",orc.name());\n+\t\tassertEquals(0,orc.getStatus());\n+\t\torc.eat();\n+\t\torc.roam();\n+\t\torc.kill(0);\n+\t}\n+\t\n+\n+}"
  },
  {
    "sha": "c7b223d677c642b4005284e24ca75ab7e59ef40c",
    "filename": "active-object/src/test/java/com/iluwatar/activeobject/AppTest.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/test/java/com/iluwatar/activeobject/AppTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/active-object/src/test/java/com/iluwatar/activeobject/AppTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/active-object/src/test/java/com/iluwatar/activeobject/AppTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * The MIT License\n+ * Copyright ¬© 2014-2021 Ilkka Sepp√§l√§\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.activeobject;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+import org.junit.jupiter.api.Test;\n+\n+\n+class AppTest {\n+\n+\t  @Test\n+\t  void shouldExecuteApplicationWithoutException() {\n+\t    assertDoesNotThrow(() -> App.main(new String[]{}));\n+\t  }\n+}"
  },
  {
    "sha": "bfe7f6646b3b1d42e1898325803f2f8f18e865c4",
    "filename": "acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,17 +23,15 @@\n \n package com.iluwatar.acyclicvisitor;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * ConfigureForDosVisitor class implements both zoom's and  hayes' visit method for Dos\n  * manufacturer.\n  */\n+@Slf4j\n public class ConfigureForDosVisitor implements AllModemVisitor {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n-\n   @Override\n   public void visit(Hayes hayes) {\n     LOGGER.info(hayes + \" used with Dos configurator.\");"
  },
  {
    "sha": "1f465967f053bd617bb6ee7b51f39b1394dd0eef",
    "filename": "acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,17 +23,15 @@\n \n package com.iluwatar.acyclicvisitor;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * ConfigureForUnixVisitor class implements zoom's visit method for Unix manufacturer, unlike\n  * traditional visitor pattern, this class may selectively implement visit for other modems.\n  */\n+@Slf4j\n public class ConfigureForUnixVisitor implements ZoomVisitor {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForUnixVisitor.class);\n-\n   @Override\n   public void visit(Zoom zoom) {\n     LOGGER.info(zoom + \" used with Unix configurator.\");"
  },
  {
    "sha": "3e30258f58441a781b1e7c1a27d4da17f339dd99",
    "filename": "acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,16 +23,14 @@\n \n package com.iluwatar.acyclicvisitor;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Hayes class implements its accept method.\n  */\n+@Slf4j\n public class Hayes extends Modem {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n-\n   /**\n    * Accepts all visitors but honors only HayesVisitor.\n    */"
  },
  {
    "sha": "01e7e7aca08bc06ab2ca7015e3fc570cd40f2c47",
    "filename": "acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,16 +23,14 @@\n \n package com.iluwatar.acyclicvisitor;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Zoom class implements its accept method.\n  */\n+@Slf4j\n public class Zoom extends Modem {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n-\n   /**\n    * Accepts all visitors but honors only ZoomVisitor.\n    */"
  },
  {
    "sha": "b41fc956cd62631d259bf11e2c51fc78d2e96c79",
    "filename": "acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -35,34 +35,34 @@\n /**\n  * ConfigureForDosVisitor test class\n  */\n-public class ConfigureForDosVisitorTest {\n+class ConfigureForDosVisitorTest {\n \n   private final TestLogger logger = TestLoggerFactory.getTestLogger(ConfigureForDosVisitor.class);\n-  \n+\n   @Test\n-  public void testVisitForZoom() {    \n+  void testVisitForZoom() {\n     var conDos = new ConfigureForDosVisitor();\n     var zoom = new Zoom();\n-    \n+\n     conDos.visit(zoom);\n-    \n+\n     assertThat(logger.getLoggingEvents())\n         .extracting(\"level\", \"message\")\n         .contains(tuple(INFO, zoom + \" used with Dos configurator.\"));\n   }\n-  \n+\n   @Test\n-  public void testVisitForHayes() {\n+  void testVisitForHayes() {\n     var conDos = new ConfigureForDosVisitor();\n     var hayes = new Hayes();\n-    \n+\n     conDos.visit(hayes);\n-    \n+\n     assertThat(logger.getLoggingEvents())\n         .extracting(\"level\", \"message\")\n         .contains(tuple(INFO, hayes + \" used with Dos configurator.\"));\n   }\n-  \n+\n   @AfterEach\n   public void clearLoggers() {\n     TestLoggerFactory.clear();"
  },
  {
    "sha": "d2ea55809aa3128e84f180d3e03f485c4f781998",
    "filename": "acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 12,
    "changes": 23,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,35 +23,34 @@\n \n package com.iluwatar.acyclicvisitor;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.groups.Tuple.tuple;\n-import static uk.org.lidalia.slf4jext.Level.INFO;\n-\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n-\n import uk.org.lidalia.slf4jtest.TestLogger;\n import uk.org.lidalia.slf4jtest.TestLoggerFactory;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.groups.Tuple.tuple;\n+import static uk.org.lidalia.slf4jext.Level.INFO;\n+\n /**\n  * ConfigureForUnixVisitor test class\n  */\n-public class ConfigureForUnixVisitorTest {\n-  \n+class ConfigureForUnixVisitorTest {\n+\n   private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(ConfigureForUnixVisitor.class);\n-  \n+\n   @AfterEach\n   public void clearLoggers() {\n     TestLoggerFactory.clear();\n   }\n-  \n+\n   @Test\n-  public void testVisitForZoom() {\n+  void testVisitForZoom() {\n     var conUnix = new ConfigureForUnixVisitor();\n     var zoom = new Zoom();\n-    \n+\n     conUnix.visit(zoom);\n-    \n+\n     assertThat(LOGGER.getLoggingEvents())\n         .extracting(\"level\", \"message\")\n         .contains(tuple(INFO, zoom + \" used with Unix configurator.\"));"
  },
  {
    "sha": "eaf9fb152cc22745e58d3aba2075a00cf48fb713",
    "filename": "acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 13,
    "changes": 24,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,34 +23,32 @@\n \n package com.iluwatar.acyclicvisitor;\n \n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyZeroInteractions;\n-\n import org.junit.jupiter.api.Test;\n \n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.*;\n+\n /**\n  * Hayes test class\n  */\n-public class HayesTest {\n+class HayesTest {\n \n   @Test\n-  public void testAcceptForDos() {  \n+  void testAcceptForDos() {\n     var hayes = new Hayes();\n     var mockVisitor = mock(ConfigureForDosVisitor.class);\n-    \n+\n     hayes.accept(mockVisitor);\n-    verify((HayesVisitor)mockVisitor).visit(eq(hayes));\n+    verify((HayesVisitor) mockVisitor).visit(eq(hayes));\n   }\n-  \n+\n   @Test\n-  public void testAcceptForUnix() {    \n+  void testAcceptForUnix() {\n     var hayes = new Hayes();\n     var mockVisitor = mock(ConfigureForUnixVisitor.class);\n-    \n+\n     hayes.accept(mockVisitor);\n-    \n+\n     verifyZeroInteractions(mockVisitor);\n   }\n }"
  },
  {
    "sha": "4373fe818fa59054f70306c922b7051809705d66",
    "filename": "acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -24,32 +24,32 @@\n package com.iluwatar.acyclicvisitor;\n \n \n+import org.junit.jupiter.api.Test;\n+\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.mock;\n-\n-import org.junit.jupiter.api.Test;\n+import static org.mockito.Mockito.verify;\n \n /**\n  * Zoom test class\n  */\n-public class ZoomTest {\n-  \n+class ZoomTest {\n+\n   @Test\n-  public void testAcceptForDos() {  \n+  void testAcceptForDos() {\n     var zoom = new Zoom();\n     var mockVisitor = mock(ConfigureForDosVisitor.class);\n-    \n+\n     zoom.accept(mockVisitor);\n-    verify((ZoomVisitor)mockVisitor).visit(eq(zoom));\n+    verify((ZoomVisitor) mockVisitor).visit(eq(zoom));\n   }\n-  \n+\n   @Test\n-  public void testAcceptForUnix() {\n+  void testAcceptForUnix() {\n     var zoom = new Zoom();\n     var mockVisitor = mock(ConfigureForUnixVisitor.class);\n-    \n+\n     zoom.accept(mockVisitor);\n-    verify((ZoomVisitor)mockVisitor).visit(eq(zoom));\n+    verify((ZoomVisitor) mockVisitor).visit(eq(zoom));\n   }\n }"
  },
  {
    "sha": "65ffa4fc66c0e6445cabdf4b0ed841b8ca934e77",
    "filename": "adapter/README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/adapter/README.md",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/adapter/README.md",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/adapter/README.md?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -42,8 +42,8 @@ public interface RowingBoat {\n   void row();\n }\n \n+@Slf4j\n public class FishingBoat {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(FishingBoat.class);\n   public void sail() {\n     LOGGER.info(\"The fishing boat is sailing\");\n   }\n@@ -70,10 +70,9 @@ public class Captain {\n Now let's say the pirates are coming and our captain needs to escape but there is only fishing boat available. We need to create an adapter that allows the captain to operate the fishing boat with his rowing boat skills.\n \n ```java\n+@Slf4j\n public class FishingBoatAdapter implements RowingBoat {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(FishingBoatAdapter.class);\n-\n   private final FishingBoat boat;\n \n   public FishingBoatAdapter() {"
  },
  {
    "sha": "036792e8c4c4d10eea0e56aa502b3f0c768ed8fa",
    "filename": "adapter/src/main/java/com/iluwatar/adapter/Captain.java",
    "status": "modified",
    "additions": 7,
    "deletions": 11,
    "changes": 18,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/adapter/src/main/java/com/iluwatar/adapter/Captain.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/adapter/src/main/java/com/iluwatar/adapter/Captain.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/adapter/src/main/java/com/iluwatar/adapter/Captain.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,24 +23,20 @@\n \n package com.iluwatar.adapter;\n \n+import lombok.AllArgsConstructor;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n /**\n  * The Captain uses {@link RowingBoat} to sail. <br> This is the client in the pattern.\n  */\n+@Setter\n+@NoArgsConstructor\n+@AllArgsConstructor\n public final class Captain {\n \n   private RowingBoat rowingBoat;\n \n-  public Captain() {\n-  }\n-\n-  public Captain(final RowingBoat boat) {\n-    this.rowingBoat = boat;\n-  }\n-\n-  void setRowingBoat(final RowingBoat boat) {\n-    this.rowingBoat = boat;\n-  }\n-\n   void row() {\n     rowingBoat.row();\n   }"
  },
  {
    "sha": "38866dc33adc51214cd8eb03dd86090dd4288c52",
    "filename": "adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/Geolem/java-design-patterns/blob/b5ed8b227857f0b446157d43fa98814630922444/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java",
    "raw_url": "https://github.com/Geolem/java-design-patterns/raw/b5ed8b227857f0b446157d43fa98814630922444/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java",
    "contents_url": "https://api.github.com/repos/Geolem/java-design-patterns/contents/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java?ref=b5ed8b227857f0b446157d43fa98814630922444",
    "patch": "@@ -23,18 +23,15 @@\n \n package com.iluwatar.adapter;\n \n-import static org.slf4j.LoggerFactory.getLogger;\n-\n-import org.slf4j.Logger;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Device class (adaptee in the pattern). We want to reuse this class. Fishing boat moves by\n  * sailing.\n  */\n+@Slf4j\n final class FishingBoat {\n \n-  private static final Logger LOGGER = getLogger(FishingBoat.class);\n-\n   void sail() {\n     LOGGER.info(\"The fishing boat is sailing\");\n   }"
  }
]
