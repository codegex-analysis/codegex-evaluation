[
  {
    "sha": "13a3a2048a6ff127442f838946693d2f51ba5591",
    "filename": "firebase-perf/src/main/java/com/google/firebase/perf/FirebasePerfRegistrar.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/firebase/firebase-android-sdk/blob/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/main/java/com/google/firebase/perf/FirebasePerfRegistrar.java",
    "raw_url": "https://github.com/firebase/firebase-android-sdk/raw/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/main/java/com/google/firebase/perf/FirebasePerfRegistrar.java",
    "contents_url": "https://api.github.com/repos/firebase/firebase-android-sdk/contents/firebase-perf/src/main/java/com/google/firebase/perf/FirebasePerfRegistrar.java?ref=a315c9ed79017979b650a6ac8c813866fbae0470",
    "patch": "@@ -56,7 +56,6 @@\n             // components that are not required during initialization so as not to force initialize\n             // them at app startup (refer\n             // https://github.com/google/guice/wiki/InjectingProviders#providers-for-lazy-loading).\n-            .eagerInDefaultApp()\n             .build(),\n         LibraryVersionComponent.create(\"fire-perf\", BuildConfig.VERSION_NAME));\n   }"
  },
  {
    "sha": "5028c3ec18482d241920927d7ee2ce9c7ac845df",
    "filename": "firebase-perf/src/main/java/com/google/firebase/perf/internal/AppStateMonitor.java",
    "status": "modified",
    "additions": 14,
    "deletions": 2,
    "changes": 16,
    "blob_url": "https://github.com/firebase/firebase-android-sdk/blob/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/main/java/com/google/firebase/perf/internal/AppStateMonitor.java",
    "raw_url": "https://github.com/firebase/firebase-android-sdk/raw/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/main/java/com/google/firebase/perf/internal/AppStateMonitor.java",
    "contents_url": "https://api.github.com/repos/firebase/firebase-android-sdk/contents/firebase-perf/src/main/java/com/google/firebase/perf/internal/AppStateMonitor.java?ref=a315c9ed79017979b650a6ac8c813866fbae0470",
    "patch": "@@ -24,6 +24,8 @@\n import androidx.annotation.NonNull;\n import androidx.core.app.FrameMetricsAggregator;\n import com.google.android.gms.common.util.VisibleForTesting;\n+import com.google.firebase.inject.Provider;\n+import com.google.firebase.perf.FirebasePerformance;\n import com.google.firebase.perf.config.ConfigResolver;\n import com.google.firebase.perf.logging.AndroidLogger;\n import com.google.firebase.perf.metrics.Trace;\n@@ -61,7 +63,11 @@ public static AppStateMonitor getInstance() {\n     if (sInstance == null) {\n       synchronized (AppStateMonitor.class) {\n         if (sInstance == null) {\n-          sInstance = new AppStateMonitor(TransportManager.getInstance(), new Clock());\n+          sInstance =\n+              new AppStateMonitor(\n+                  TransportManager.getInstance(),\n+                  new Clock(),\n+                  () -> FirebasePerformance.getInstance());\n         }\n       }\n     }\n@@ -72,6 +78,7 @@ public static AppStateMonitor getInstance() {\n       \"androidx.core.app.FrameMetricsAggregator\";\n   private boolean mRegistered = false;\n   private final TransportManager transportManager;\n+  private final Provider<FirebasePerformance> firebasePerformanceProvider;\n   private ConfigResolver mConfigResolver;\n   private final Clock mClock;\n   private boolean mIsColdStart = true;\n@@ -91,9 +98,13 @@ public static AppStateMonitor getInstance() {\n   private FrameMetricsAggregator mFrameMetricsAggregator;\n   private final WeakHashMap<Activity, Trace> mActivity2ScreenTrace = new WeakHashMap<>();\n \n-  AppStateMonitor(TransportManager transportManager, Clock clock) {\n+  AppStateMonitor(\n+      TransportManager transportManager,\n+      Clock clock,\n+      Provider<FirebasePerformance> firebasePerformanceProvider) {\n     this.transportManager = transportManager;\n     mClock = clock;\n+    this.firebasePerformanceProvider = firebasePerformanceProvider;\n     mConfigResolver = ConfigResolver.getInstance();\n     hasFrameMetricsAggregator = hasFrameMetricsAggregatorClass();\n     if (hasFrameMetricsAggregator) {\n@@ -206,6 +217,7 @@ public synchronized void onActivityResumed(Activity activity) {\n       updateAppState(ApplicationProcessState.FOREGROUND);\n       if (mIsColdStart) {\n         // case 1: app startup.\n+        firebasePerformanceProvider.get();\n         mIsColdStart = false;\n       } else {\n         // case 2: app switch from background to foreground."
  },
  {
    "sha": "8fd5c68d354db2e5cbb87d6c0dc1317a0ee19078",
    "filename": "firebase-perf/src/test/java/com/google/firebase/perf/FirebasePerfRegistrarTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/firebase/firebase-android-sdk/blob/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/test/java/com/google/firebase/perf/FirebasePerfRegistrarTest.java",
    "raw_url": "https://github.com/firebase/firebase-android-sdk/raw/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/test/java/com/google/firebase/perf/FirebasePerfRegistrarTest.java",
    "contents_url": "https://api.github.com/repos/firebase/firebase-android-sdk/contents/firebase-perf/src/test/java/com/google/firebase/perf/FirebasePerfRegistrarTest.java?ref=a315c9ed79017979b650a6ac8c813866fbae0470",
    "patch": "@@ -48,6 +48,6 @@ public void testGetComponents() {\n             Dependency.required(FirebaseInstallationsApi.class),\n             Dependency.requiredProvider(TransportFactory.class));\n \n-    assertThat(firebasePerfComponent.isEagerInDefaultApp()).isTrue();\n+    assertThat(firebasePerfComponent.isLazy()).isTrue();\n   }\n }"
  },
  {
    "sha": "09f86fa2729955802b593e8a777e5b41a30594c9",
    "filename": "firebase-perf/src/test/java/com/google/firebase/perf/internal/AppStateMonitorTest.java",
    "status": "modified",
    "additions": 119,
    "deletions": 39,
    "changes": 158,
    "blob_url": "https://github.com/firebase/firebase-android-sdk/blob/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/test/java/com/google/firebase/perf/internal/AppStateMonitorTest.java",
    "raw_url": "https://github.com/firebase/firebase-android-sdk/raw/a315c9ed79017979b650a6ac8c813866fbae0470/firebase-perf/src/test/java/com/google/firebase/perf/internal/AppStateMonitorTest.java",
    "contents_url": "https://api.github.com/repos/firebase/firebase-android-sdk/contents/firebase-perf/src/test/java/com/google/firebase/perf/internal/AppStateMonitorTest.java?ref=a315c9ed79017979b650a6ac8c813866fbae0470",
    "patch": "@@ -22,6 +22,7 @@\n import static org.mockito.Mockito.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n@@ -32,6 +33,8 @@\n import android.content.Context;\n import android.os.Bundle;\n import android.view.WindowManager.LayoutParams;\n+import com.google.firebase.inject.Provider;\n+import com.google.firebase.perf.FirebasePerformance;\n import com.google.firebase.perf.FirebasePerformanceTestBase;\n import com.google.firebase.perf.config.ConfigResolver;\n import com.google.firebase.perf.config.DeviceCacheManager;\n@@ -90,7 +93,8 @@ public void setUp() {\n \n   @Test\n   public void foregroundBackgroundEvent_activityStateChanges_fgBgEventsCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     // activity1 comes to foreground.\n     mCurrentTime = 1;\n     monitor.incrementCount(\"counter1\", 10);\n@@ -150,7 +154,8 @@ public void foregroundBackgroundEvent_activityStateChanges_fgBgEventsCreated() {\n \n   @Test\n   public void testIncrementCount() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n \n     monitor.incrementCount(\"counter1\", 10);\n     monitor.incrementCount(\"counter2\", 20);\n@@ -171,7 +176,8 @@ public void testIncrementCount() {\n \n   @Test\n   public void testTwoActivities() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     // activity1 comes to foreground.\n     mCurrentTime = 1;\n     monitor.onActivityResumed(activity1);\n@@ -245,7 +251,8 @@ public void testTwoActivities() {\n \n   @Test\n   public void testAppStateCallbackWithTrace() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Trace trace = new Trace(\"TRACE_1\", transportManager, mClock, monitor);\n     // Trace is not started yet, default state is APPLICATION_PROCESS_STATE_UNKNOWN\n     Assert.assertEquals(\n@@ -284,7 +291,8 @@ public void testAppStateCallbackWithTrace() {\n \n   @Test\n   public void testAppStateCallbackWithNetworkRequestMetricBuilder() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     // registerForAppState() is called by NetworkRequestMetricBuilder's constructor.\n     NetworkRequestMetricBuilder builder =\n         new NetworkRequestMetricBuilder(\n@@ -315,7 +323,8 @@ public void testAppStateCallbackWithNetworkRequestMetricBuilder() {\n \n   @Test\n   public void testRegisterActivityLifecycleCallbacks() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Context context = mock(Context.class);\n     Application application = mock(Application.class);\n     when(context.getApplicationContext()).thenReturn(application);\n@@ -329,7 +338,8 @@ public void testRegisterActivityLifecycleCallbacks() {\n \n   @Test\n   public void testUnregisterActivityLifecycleCallbacks() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Context context = mock(Context.class);\n     Application application = mock(Application.class);\n     when(context.getApplicationContext()).thenReturn(application);\n@@ -341,7 +351,8 @@ public void testUnregisterActivityLifecycleCallbacks() {\n \n   @Test\n   public void testUnregisterActivityLifecycleCallbacksBeforeItWasRegistered() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Context context = mock(Context.class);\n     Application application = mock(Application.class);\n     when(context.getApplicationContext()).thenReturn(application);\n@@ -352,7 +363,8 @@ public void testUnregisterActivityLifecycleCallbacksBeforeItWasRegistered() {\n \n   @Test\n   public void screenTrace_twoActivities_traceStartedAndStoppedWithActivityLifecycle() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n \n     Activity[] arr = {activity1, activity2};\n     for (int i = 0; i < arr.length; ++i) {\n@@ -371,7 +383,8 @@ public void screenTrace_twoActivities_traceStartedAndStoppedWithActivityLifecycl\n \n   @Test\n   public void screenTrace_noHardwareAccelerated_traceNotCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Activity activityWithNonHardwareAcceleratedView =\n         createFakeActivity(/* isHardwareAccelerated =*/ false);\n \n@@ -384,7 +397,8 @@ public void screenTrace_noHardwareAccelerated_traceNotCreated() {\n \n   @Test\n   public void screenTrace_perfMonDisabledAtBuildTime_traceNotCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Activity activityWithNonHardwareAcceleratedView =\n         createFakeActivity(/* isHardwareAccelerated =*/ true);\n     ConfigResolver configResolver = ConfigResolver.getInstance();\n@@ -402,7 +416,8 @@ public void screenTrace_perfMonDisabledAtBuildTime_traceNotCreated() {\n \n   @Test\n   public void screenTrace_perfMonEnabledSwitchAtRuntime_traceCreationDependsOnRuntime() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Activity activityWithNonHardwareAcceleratedView =\n         createFakeActivity(/* isHardwareAccelerated =*/ true);\n     ConfigResolver configResolver = ConfigResolver.getInstance();\n@@ -436,7 +451,8 @@ public void screenTrace_perfMonEnabledSwitchAtRuntime_traceCreationDependsOnRunt\n \n   @Test\n   public void screenTrace_perfMonDeactivated_traceNotCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Activity activityWithNonHardwareAcceleratedView =\n         createFakeActivity(/* isHardwareAccelerated =*/ true);\n     ConfigResolver configResolver = ConfigResolver.getInstance();\n@@ -458,7 +474,8 @@ public void screenTrace_perfMonDeactivated_traceNotCreated() {\n \n   @Test\n   public void foregroundTrace_perfMonDisabledAtRuntime_traceNotCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n \n     // activity1 comes to foreground.\n     mCurrentTime = 1;\n@@ -488,19 +505,22 @@ public void foregroundTrace_perfMonDisabledAtRuntime_traceNotCreated() {\n \n   @Test\n   public void foregroundTrace_perfMonEnabledAtRuntime_traceCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     ConfigResolver configResolver = ConfigResolver.getInstance();\n     configResolver.setDeviceCacheManager(new DeviceCacheManager(new FakeDirectExecutorService()));\n \n-    // Firebase Performance is disabled at build time.\n-    Bundle bundle = new Bundle();\n-    bundle.putBoolean(\"firebase_performance_collection_enabled\", false);\n-    configResolver.setMetadataBundle(new ImmutableBundle(bundle));\n-\n     // activity1 comes to foreground.\n     mCurrentTime = 1;\n     monitor.onActivityResumed(activity1);\n \n+    // Disable performance collection after FirebasePerformance is initialized in the\n+    // onActivityResumed callback. This is because FirebasePerformance will read Manifest file by\n+    // default.\n+    Bundle bundle = new Bundle();\n+    bundle.putBoolean(\"firebase_performance_collection_enabled\", false);\n+    configResolver.setMetadataBundle(new ImmutableBundle(bundle));\n+\n     // activity1 goes to background.\n     mCurrentTime = 2;\n     monitor.onActivityStopped(activity1);\n@@ -527,19 +547,22 @@ public void foregroundTrace_perfMonEnabledAtRuntime_traceCreated() {\n \n   @Test\n   public void foreGroundTrace_perfMonDeactivated_traceCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     ConfigResolver configResolver = ConfigResolver.getInstance();\n     configResolver.setDeviceCacheManager(new DeviceCacheManager(new FakeDirectExecutorService()));\n \n-    // Firebase Performance is deactivated at build time.\n-    Bundle bundle = new Bundle();\n-    bundle.putBoolean(\"firebase_performance_collection_deactivated\", true);\n-    configResolver.setMetadataBundle(new ImmutableBundle(bundle));\n-\n     // activity1 comes to foreground.\n     mCurrentTime = 1;\n     monitor.onActivityResumed(activity1);\n \n+    // Deactivate performance collection after FirebasePerformance is initialized in the\n+    // onActivityResumed callback. This is because FirebasePerformance will read Manifest file by\n+    // default.\n+    Bundle bundle = new Bundle();\n+    bundle.putBoolean(\"firebase_performance_collection_deactivated\", true);\n+    configResolver.setMetadataBundle(new ImmutableBundle(bundle));\n+\n     // activity1 goes to background.\n     mCurrentTime = 2;\n     monitor.onActivityStopped(activity1);\n@@ -564,7 +587,8 @@ public void foreGroundTrace_perfMonDeactivated_traceCreated() {\n \n   @Test\n   public void backgroundTrace_perfMonDisabledAtRuntime_traceNotCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n \n     // activity1 comes to background.\n     mCurrentTime = 1;\n@@ -597,18 +621,23 @@ public void backgroundTrace_perfMonDisabledAtRuntime_traceNotCreated() {\n \n   @Test\n   public void backgroundTrace_perfMonEnabledAtRuntime_traceCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     ConfigResolver configResolver = ConfigResolver.getInstance();\n     configResolver.setDeviceCacheManager(new DeviceCacheManager(new FakeDirectExecutorService()));\n \n-    // Firebase Performance is disabled at build time.\n+    // activity1 comes to foreground.\n+    mCurrentTime = 1;\n+    monitor.onActivityResumed(activity1);\n+\n+    // Disable performance collection after FirebasePerformance is initialized in the\n+    // onActivityResumed callback. This is because FirebasePerformance will read Manifest file by\n+    // default.\n     Bundle bundle = new Bundle();\n     bundle.putBoolean(\"firebase_performance_collection_enabled\", false);\n     configResolver.setMetadataBundle(new ImmutableBundle(bundle));\n \n-    // activity1 comes to background.\n-    mCurrentTime = 1;\n-    monitor.onActivityResumed(activity1);\n+    // activity1 goes to background.\n     monitor.onActivityStopped(activity1);\n \n     // activity1 goes to foreground.\n@@ -637,18 +666,23 @@ public void backgroundTrace_perfMonEnabledAtRuntime_traceCreated() {\n \n   @Test\n   public void backgroundTrace_perfMonDeactivated_traceCreated() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     ConfigResolver configResolver = ConfigResolver.getInstance();\n     configResolver.setDeviceCacheManager(new DeviceCacheManager(new FakeDirectExecutorService()));\n \n-    // Firebase Performance is deactivated at build time.\n+    // activity1 comes to foreground.\n+    mCurrentTime = 1;\n+    monitor.onActivityResumed(activity1);\n+\n+    // Deactivate performance collection after FirebasePerformance is initialized in the\n+    // onActivityResumed callback. This is because FirebasePerformance will read Manifest file by\n+    // default.\n     Bundle bundle = new Bundle();\n     bundle.putBoolean(\"firebase_performance_collection_deactivated\", true);\n     configResolver.setMetadataBundle(new ImmutableBundle(bundle));\n \n-    // activity1 comes to background.\n-    mCurrentTime = 1;\n-    monitor.onActivityResumed(activity1);\n+    // activity1 goes to background.\n     monitor.onActivityStopped(activity1);\n \n     // activity1 goes to foreground.\n@@ -675,7 +709,8 @@ public void backgroundTrace_perfMonDeactivated_traceCreated() {\n \n   @Test\n   public void activityStateChanges_singleClient_callbackIsCalled() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Map<Integer, ApplicationProcessState> clientState = new HashMap<>();\n \n     final int client1 = 1;\n@@ -693,7 +728,8 @@ public void activityStateChanges_singleClient_callbackIsCalled() {\n \n   @Test\n   public void activityStateChanges_multipleClients_callbackCalledOnEachClient() {\n-    AppStateMonitor monitor = new AppStateMonitor(transportManager, mClock);\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, () -> FirebasePerformance.getInstance());\n     Map<Integer, ApplicationProcessState> clientState = new HashMap<>();\n \n     final int client1 = 1;\n@@ -721,6 +757,50 @@ public void activityStateChanges_multipleClients_callbackCalledOnEachClient() {\n     assertThat(clientState.get(client3)).isEqualTo(ApplicationProcessState.BACKGROUND);\n   }\n \n+  @Test\n+  public void firebasePerformanceProvider_coldStart_GetInstance() {\n+    Provider<FirebasePerformance> spyFirebasePerformanceProvider =\n+        spy(\n+            new Provider<FirebasePerformance>() {\n+              @Override\n+              public FirebasePerformance get() {\n+                return FirebasePerformance.getInstance();\n+              }\n+            });\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, spyFirebasePerformanceProvider);\n+\n+    // activity1 comes to foreground.\n+    monitor.onActivityResumed(activity1);\n+    verify(spyFirebasePerformanceProvider, times(1)).get();\n+  }\n+\n+  @Test\n+  public void firebasePerformanceProvider_warmStart_doNotGetInstance() {\n+    Provider<FirebasePerformance> spyFirebasePerformanceProvider =\n+        spy(\n+            new Provider<FirebasePerformance>() {\n+              @Override\n+              public FirebasePerformance get() {\n+                return FirebasePerformance.getInstance();\n+              }\n+            });\n+    AppStateMonitor monitor =\n+        new AppStateMonitor(transportManager, mClock, spyFirebasePerformanceProvider);\n+\n+    // activity1 comes to foreground.\n+    monitor.onActivityResumed(activity1);\n+    verify(spyFirebasePerformanceProvider, times(1)).get();\n+\n+    // activity1 goes to background\n+    monitor.onActivityStopped(activity1);\n+\n+    // activity1 comes to foreground again.\n+    monitor.onActivityResumed(activity1);\n+\n+    verify(spyFirebasePerformanceProvider, times(1)).get();\n+  }\n+\n   private static Activity createFakeActivity(boolean isHardwareAccelerated) {\n     ActivityController<Activity> fakeActivityController = Robolectric.buildActivity(Activity.class);\n "
  }
]
