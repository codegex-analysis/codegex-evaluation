[
  {
    "sha": "4209f106eff8aff8a6a1f947e8e8d7eec1be5db7",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualRequest.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualRequest.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualRequest.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualRequest.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.trusty.service.common.requests;\n+\n+import java.util.List;\n+\n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CounterfactualRequest {\n+\n+    @JsonProperty(\"goals\")\n+    private List<TypedVariableWithValue> goals;\n+\n+    @JsonProperty(\"searchDomains\")\n+    private List<CounterfactualSearchDomain> searchDomains;\n+\n+    private CounterfactualRequest() {\n+    }\n+\n+    public CounterfactualRequest(List<TypedVariableWithValue> goals,\n+            List<CounterfactualSearchDomain> searchDomains) {\n+        this.goals = goals;\n+        this.searchDomains = searchDomains;\n+    }\n+\n+    public List<TypedVariableWithValue> getGoals() {\n+        return goals;\n+    }\n+\n+    public List<CounterfactualSearchDomain> getSearchDomains() {\n+        return searchDomains;\n+    }\n+}"
  },
  {
    "sha": "24ffa4c1aa53ca1f2a52c5ba275176082d9207ac",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualSearchDomain.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualSearchDomain.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualSearchDomain.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/CounterfactualSearchDomain.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.trusty.service.common.requests;\n+\n+import java.util.List;\n+\n+import org.kie.kogito.trusty.service.common.shared.AbstractTypedVariable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CounterfactualSearchDomain extends AbstractTypedVariable {\n+\n+    @JsonProperty(\"isFixed\")\n+    private boolean isFixed;\n+\n+    @JsonProperty(\"domain\")\n+    private Domain domain;\n+\n+    private CounterfactualSearchDomain() {\n+    }\n+\n+    public CounterfactualSearchDomain(String name,\n+            String typeRef,\n+            List<JsonNode> components,\n+            boolean isFixed,\n+            Domain domain) {\n+        super(name, typeRef, components);\n+        this.isFixed = isFixed;\n+        this.domain = domain;\n+    }\n+\n+    public boolean isFixed() {\n+        return isFixed;\n+    }\n+\n+    public Domain getDomain() {\n+        return domain;\n+    }\n+}"
  },
  {
    "sha": "7a70db6d7c8b801da69c4a177b8b0d8a9ba6ec75",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/Domain.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/Domain.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/Domain.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/Domain.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.trusty.service.common.requests;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+@JsonTypeInfo(\n+        use = JsonTypeInfo.Id.NAME,\n+        property = \"type\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(value = DomainNumerical.class, name = \"numerical\"),\n+        @JsonSubTypes.Type(value = DomainCategorical.class, name = \"categorical\")\n+})\n+public interface Domain {\n+\n+}"
  },
  {
    "sha": "ccb5f7e20e7358e2c83ac1854b67bfe0f34d7c96",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainCategorical.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainCategorical.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainCategorical.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainCategorical.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.trusty.service.common.requests;\n+\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public class DomainCategorical implements Domain {\n+\n+    @JsonProperty(\"categories\")\n+    private Set<JsonNode> categories;\n+\n+    public DomainCategorical() {\n+    }\n+\n+    public DomainCategorical(Set<JsonNode> categories) {\n+        this.categories = categories;\n+    }\n+\n+    public Set<JsonNode> getCategories() {\n+        return this.categories;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"DomainCategorical{\" +\n+                \"categories=\" + categories +\n+                \"}\";\n+    }\n+}"
  },
  {
    "sha": "906ec1440bef5ed1063999b3cac48810b0fa6038",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainNumerical.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainNumerical.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainNumerical.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/requests/DomainNumerical.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.trusty.service.common.requests;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class DomainNumerical implements Domain {\n+\n+    @JsonProperty(\"lowerBound\")\n+    private double lowerBound;\n+\n+    @JsonProperty(\"upperBound\")\n+    private double upperBound;\n+\n+    public DomainNumerical() {\n+    }\n+\n+    public DomainNumerical(double lowerBound, double upperBound) {\n+        this.lowerBound = lowerBound;\n+        this.upperBound = upperBound;\n+    }\n+\n+    public Double getLowerBound() {\n+        return this.lowerBound;\n+    }\n+\n+    public Double getUpperBound() {\n+        return this.upperBound;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"DomainNumerical{\" +\n+                \"lowerBound=\" + lowerBound +\n+                \", upperBound=\" + upperBound +\n+                \"}\";\n+    }\n+}"
  },
  {
    "sha": "312682dac74b1f3f483819dfa87ef1373589a7d1",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/CounterfactualResponse.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/CounterfactualResponse.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/CounterfactualResponse.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/CounterfactualResponse.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.trusty.service.common.responses;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CounterfactualResponse {\n+\n+    public static final String EXECUTION_ID_FIELD = \"executionId\";\n+    public static final String COUNTERFACTUAL_ID_FIELD = \"counterfactualId\";\n+\n+    @JsonProperty(EXECUTION_ID_FIELD)\n+    private String executionId;\n+\n+    @JsonProperty(COUNTERFACTUAL_ID_FIELD)\n+    private String counterfactualId;\n+\n+    public CounterfactualResponse() {\n+    }\n+\n+    public CounterfactualResponse(String executionId, String counterfactualId) {\n+        this.executionId = executionId;\n+        this.counterfactualId = counterfactualId;\n+    }\n+\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public String getCounterfactualId() {\n+        return counterfactualId;\n+    }\n+\n+}"
  },
  {
    "sha": "ee1dc13acd2dc340c1cdb10bb52575d0c4ec79d1",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionOutcomeResponse.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionOutcomeResponse.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionOutcomeResponse.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionOutcomeResponse.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -18,6 +18,8 @@\n \n import java.util.Collection;\n \n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n+\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n public class DecisionOutcomeResponse {\n@@ -32,10 +34,10 @@\n     private String evaluationStatus;\n \n     @JsonProperty(\"outcomeResult\")\n-    private TypedVariableResponse outcomeResult;\n+    private TypedVariableWithValue outcomeResult;\n \n     @JsonProperty(\"outcomeInputs\")\n-    private Collection<TypedVariableResponse> outcomeInputs;\n+    private Collection<TypedVariableWithValue> outcomeInputs;\n \n     @JsonProperty(\"messages\")\n     private Collection<MessageResponse> messages;\n@@ -46,7 +48,7 @@\n     private DecisionOutcomeResponse() {\n     }\n \n-    public DecisionOutcomeResponse(String outcomeId, String outcomeName, String evaluationStatus, TypedVariableResponse outcomeResult, Collection<TypedVariableResponse> outcomeInputs,\n+    public DecisionOutcomeResponse(String outcomeId, String outcomeName, String evaluationStatus, TypedVariableWithValue outcomeResult, Collection<TypedVariableWithValue> outcomeInputs,\n             Collection<MessageResponse> messages, boolean hasErrors) {\n         this.outcomeId = outcomeId;\n         this.outcomeName = outcomeName;\n@@ -69,11 +71,11 @@ public String getEvaluationStatus() {\n         return evaluationStatus;\n     }\n \n-    public TypedVariableResponse getOutcomeResult() {\n+    public TypedVariableWithValue getOutcomeResult() {\n         return outcomeResult;\n     }\n \n-    public Collection<TypedVariableResponse> getOutcomeInputs() {\n+    public Collection<TypedVariableWithValue> getOutcomeInputs() {\n         return outcomeInputs;\n     }\n "
  },
  {
    "sha": "33000124fc85b8c17000171b1d4c797221c58e70",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionStructuredInputsResponse.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionStructuredInputsResponse.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionStructuredInputsResponse.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/DecisionStructuredInputsResponse.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -18,21 +18,23 @@\n \n import java.util.Collection;\n \n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n+\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n public class DecisionStructuredInputsResponse {\n \n     @JsonProperty(\"inputs\")\n-    private Collection<TypedVariableResponse> inputs;\n+    private Collection<TypedVariableWithValue> inputs;\n \n     private DecisionStructuredInputsResponse() {\n     }\n \n-    public DecisionStructuredInputsResponse(Collection<TypedVariableResponse> inputs) {\n+    public DecisionStructuredInputsResponse(Collection<TypedVariableWithValue> inputs) {\n         this.inputs = inputs;\n     }\n \n-    public Collection<TypedVariableResponse> getInputs() {\n+    public Collection<TypedVariableWithValue> getInputs() {\n         return inputs;\n     }\n }"
  },
  {
    "sha": "3d8ea8d441c80453faefba5d2cca4ec0a4dd1e82",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/AbstractTypedVariable.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 14,
    "changes": 19,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/AbstractTypedVariable.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/AbstractTypedVariable.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/AbstractTypedVariable.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -13,35 +13,30 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n-package org.kie.kogito.trusty.service.common.responses;\n+package org.kie.kogito.trusty.service.common.shared;\n \n import java.util.List;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.JsonNode;\n \n-public class TypedVariableResponse {\n+public abstract class AbstractTypedVariable {\n \n     @JsonProperty(\"name\")\n     private String name;\n \n     @JsonProperty(\"typeRef\")\n     private String typeRef;\n \n-    @JsonProperty(\"value\")\n-    private JsonNode value;\n-\n     @JsonProperty(\"components\")\n     private List<JsonNode> components;\n \n-    private TypedVariableResponse() {\n+    protected AbstractTypedVariable() {\n     }\n \n-    public TypedVariableResponse(String name, String typeRef, JsonNode value, List<JsonNode> components) {\n+    public AbstractTypedVariable(String name, String typeRef, List<JsonNode> components) {\n         this.name = name;\n         this.typeRef = typeRef;\n-        this.value = value;\n         this.components = components;\n     }\n \n@@ -53,10 +48,6 @@ public String getTypeRef() {\n         return typeRef;\n     }\n \n-    public JsonNode getValue() {\n-        return value;\n-    }\n-\n     public List<JsonNode> getComponents() {\n         return components;\n     }",
    "previous_filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/responses/TypedVariableResponse.java"
  },
  {
    "sha": "5cea3cd8e4e689e208cd007280f0976a8eff88df",
    "filename": "trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/TypedVariableWithValue.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/TypedVariableWithValue.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/TypedVariableWithValue.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-api/src/main/java/org/kie/kogito/trusty/service/common/shared/TypedVariableWithValue.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.common.shared;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+public class TypedVariableWithValue extends AbstractTypedVariable {\n+\n+    @JsonProperty(\"value\")\n+    private JsonNode value;\n+\n+    protected TypedVariableWithValue() {\n+        super();\n+    }\n+\n+    public TypedVariableWithValue(String name, String typeRef, JsonNode value, List<JsonNode> components) {\n+        super(name, typeRef, components);\n+        this.value = value;\n+    }\n+\n+    public JsonNode getValue() {\n+        return value;\n+    }\n+}"
  },
  {
    "sha": "433c1a3abe3f8dca0ff46fc0e4f29b7f0902d7bb",
    "filename": "trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyService.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyService.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyService.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyService.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -17,9 +17,13 @@\n package org.kie.kogito.trusty.service.common;\n \n import java.time.OffsetDateTime;\n+import java.util.List;\n \n import org.kie.kogito.trusty.service.common.messaging.incoming.ModelIdentifier;\n import org.kie.kogito.trusty.service.common.models.MatchedExecutionHeaders;\n+import org.kie.kogito.trusty.service.common.requests.CounterfactualSearchDomain;\n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n+import org.kie.kogito.trusty.storage.api.model.CounterfactualResult;\n import org.kie.kogito.trusty.storage.api.model.DMNModelWithMetadata;\n import org.kie.kogito.trusty.storage.api.model.Decision;\n import org.kie.kogito.trusty.storage.api.model.ExplainabilityResult;\n@@ -110,4 +114,17 @@\n      * @throws IllegalArgumentException Throws IllegalArgumentException in case the modelId is not present in the system.\n      */\n     DMNModelWithMetadata getModelById(ModelIdentifier modelIdentifier);\n+\n+    /**\n+     * Requests calculation of the Counterfactuals for an execution.\n+     *\n+     * @param executionId The execution ID.\n+     * @param goals The outputs that are desired from the Counterfactual calculation.\n+     * @param searchDomains The domains that the Counterfactual calculation can search.\n+     * @return A wrapper for the calculation request.\n+     * @throws IllegalArgumentException Throws IllegalArgumentException the executionId is not present in the system.\n+     */\n+    CounterfactualResult requestCounterfactuals(String executionId,\n+            List<TypedVariableWithValue> goals,\n+            List<CounterfactualSearchDomain> searchDomains);\n }"
  },
  {
    "sha": "f46878c0db709a3ca372b8e4e85765c8d30a1f45",
    "filename": "trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyServiceImpl.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyServiceImpl.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyServiceImpl.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/TrustyServiceImpl.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -22,6 +22,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.UUID;\n \n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n@@ -37,7 +38,10 @@\n import org.kie.kogito.trusty.service.common.messaging.incoming.ModelIdentifier;\n import org.kie.kogito.trusty.service.common.messaging.outgoing.ExplainabilityRequestProducer;\n import org.kie.kogito.trusty.service.common.models.MatchedExecutionHeaders;\n+import org.kie.kogito.trusty.service.common.requests.CounterfactualSearchDomain;\n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.CounterfactualResult;\n import org.kie.kogito.trusty.storage.api.model.DMNModelWithMetadata;\n import org.kie.kogito.trusty.storage.api.model.Decision;\n import org.kie.kogito.trusty.storage.api.model.Execution;\n@@ -180,6 +184,25 @@ public DMNModelWithMetadata getModelById(ModelIdentifier modelIdentifier) {\n         return storage.get(modelIdentifier.getIdentifier());\n     }\n \n+    @Override\n+    public CounterfactualResult requestCounterfactuals(String executionId,\n+            List<TypedVariableWithValue> goals,\n+            List<CounterfactualSearchDomain> searchDomains) {\n+        // TODO See https://issues.redhat.com/browse/FAI-438. Re-purpose ExplainabilityRequestDto for CF (and LIME)\n+        // Decision decision = getDecisionById(executionId);\n+        // Storage<String, Counterfactual> counterfactualStorage = storageService.getCounterfactualStorage();\n+        // counterfactualStorage.put(executionId, convert(desiredOutputs), convert(searchDomains));\n+        //\n+        // explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(\n+        //      executionId,\n+        //      serviceUrl,\n+        //      createDecisionModelIdentifierDto(decision),\n+        //      inputs,\n+        //      outputs));\n+\n+        return new CounterfactualResult(executionId, UUID.randomUUID().toString());\n+    }\n+\n     private ModelIdentifierDto createDecisionModelIdentifierDto(Decision decision) {\n         String resourceId = decision.getExecutedModelNamespace() +\n                 ModelIdentifierDto.RESOURCE_ID_SEPARATOR +"
  },
  {
    "sha": "0df0e9172016b97d99ebf234ec8a8e86210425fc",
    "filename": "trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1.java",
    "status": "modified",
    "additions": 61,
    "deletions": 3,
    "changes": 64,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -16,12 +16,15 @@\n \n package org.kie.kogito.trusty.service.common.api;\n \n+import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n@@ -36,10 +39,15 @@\n import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n import org.jboss.resteasy.annotations.jaxrs.PathParam;\n import org.kie.kogito.trusty.service.common.TrustyService;\n+import org.kie.kogito.trusty.service.common.requests.CounterfactualRequest;\n+import org.kie.kogito.trusty.service.common.requests.CounterfactualSearchDomain;\n+import org.kie.kogito.trusty.service.common.responses.CounterfactualResponse;\n import org.kie.kogito.trusty.service.common.responses.DecisionStructuredInputsResponse;\n import org.kie.kogito.trusty.service.common.responses.FeatureImportanceResponse;\n import org.kie.kogito.trusty.service.common.responses.SalienciesResponse;\n import org.kie.kogito.trusty.service.common.responses.SaliencyResponse;\n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n+import org.kie.kogito.trusty.storage.api.model.CounterfactualResult;\n import org.kie.kogito.trusty.storage.api.model.ExplainabilityResult;\n import org.kie.kogito.trusty.storage.api.model.FeatureImportance;\n import org.kie.kogito.trusty.storage.api.model.Saliency;\n@@ -83,18 +91,25 @@ static SaliencyResponse saliencyModelToResponse(Saliency model) {\n                         .collect(Collectors.toList()));\n     }\n \n+    static CounterfactualResponse counterfactualRequestToResponse(CounterfactualResult request) {\n+        if (request == null) {\n+            return null;\n+        }\n+        return new CounterfactualResponse(request.getExecutionId(), request.getCounterfactualId());\n+    }\n+\n     @GET\n     @Path(\"/{executionId}/explanations/saliencies\")\n     @APIResponses(value = {\n-            @APIResponse(description = \"Gets the local explanation of a decision.\", responseCode = \"200\",\n-                    content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionStructuredInputsResponse.class))),\n+            @APIResponse(description = \"Gets the saliencies for a decision.\", responseCode = \"200\",\n+                    content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = SalienciesResponse.class))),\n             @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n     })\n     @Operation(\n             summary = \"Returns the saliencies for a decision.\",\n             description = \"Returns the saliencies for a particular decision calculated using the lime algorithm.\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public Response getStructuredInputs(\n+    public Response getSaliencies(\n             @Parameter(\n                     name = \"executionId\",\n                     description = \"The execution ID.\",\n@@ -114,4 +129,47 @@ public Response getStructuredInputs(\n             return Optional.empty();\n         }\n     }\n+\n+    @POST\n+    @Path(\"/{executionId}/explanations/counterfactuals\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"UUID, counterfactualId, for the calculation request.\", responseCode = \"200\",\n+                    content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionStructuredInputsResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    })\n+    @Operation(\n+            summary = \"Request calculation of the counterfactuals for a decision.\",\n+            description = \"Requests calculation of the counterfactuals for a particular decision. Results of the calculation \" +\n+                    \"can be obtained by GETing /{executionId}/explanations/counterfactuals/{counterfactualId}/results\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response requestCounterfactuals(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)) @PathParam(\"executionId\") String executionId,\n+            @Parameter(\n+                    name = \"Counterfactual request\",\n+                    description = \"The definition of a request to calculate a decision's Counterfactuals.\",\n+                    required = true,\n+                    schema = @Schema(implementation = CounterfactualRequest.class)) CounterfactualRequest request) {\n+        List<TypedVariableWithValue> goals = request.getGoals();\n+        List<CounterfactualSearchDomain> searchDomains = request.getSearchDomains();\n+        return requestCounterfactualsForExecution(executionId, goals, searchDomains)\n+                .map(ExplainabilityApiV1::counterfactualRequestToResponse)\n+                .map(Response::ok)\n+                .orElseGet(() -> Response.status(Response.Status.BAD_REQUEST.getStatusCode()))\n+                .build();\n+    }\n+\n+    private Optional<CounterfactualResult> requestCounterfactualsForExecution(String executionId,\n+            List<TypedVariableWithValue> goals,\n+            List<CounterfactualSearchDomain> searchDomains) {\n+        try {\n+            return Optional.ofNullable(trustyService.requestCounterfactuals(executionId, goals, searchDomains));\n+        } catch (IllegalArgumentException ex) {\n+            return Optional.empty();\n+        }\n+    }\n }"
  },
  {
    "sha": "7cdf53fcb433a2a6d244235765b53853f5f95a47",
    "filename": "trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/responses/ResponseUtils.java",
    "status": "modified",
    "additions": 10,
    "deletions": 9,
    "changes": 19,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/responses/ResponseUtils.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/responses/ResponseUtils.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-common/src/main/java/org/kie/kogito/trusty/service/common/responses/ResponseUtils.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -24,6 +24,7 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n import org.kie.kogito.trusty.storage.api.model.Decision;\n import org.kie.kogito.trusty.storage.api.model.DecisionInput;\n import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n@@ -122,11 +123,11 @@ public static MessageResponse messageResponseFrom(Message message) {\n                 messageExceptionFieldResponseFrom(message.getException()));\n     }\n \n-    public static TypedVariableResponse typedVariableResponseFrom(DecisionInput input) {\n+    public static TypedVariableWithValue typedVariableResponseFrom(DecisionInput input) {\n         return input != null ? typedVariableResponseFrom(input.getValue()) : null;\n     }\n \n-    public static TypedVariableResponse typedVariableResponseFrom(TypedVariable value) {\n+    public static TypedVariableWithValue typedVariableResponseFrom(TypedVariable value) {\n         if (value == null) {\n             return null;\n         }\n@@ -143,7 +144,7 @@ public static TypedVariableResponse typedVariableResponseFrom(TypedVariable valu\n         throw new IllegalStateException(String.format(\"TypedVariable of kind %s can't be converted to TypedVariableResponse\", value.getKind()));\n     }\n \n-    private static TypedVariableResponse typedVariableResponseFromCollection(TypedVariable value) {\n+    private static TypedVariableWithValue typedVariableResponseFromCollection(TypedVariable value) {\n         boolean isCollectionOfStructures = value.getComponents() != null && value.getComponents().stream().anyMatch(t -> t.getKind() == STRUCTURE);\n \n         // create array of all the values of the components\n@@ -153,7 +154,7 @@ private static TypedVariableResponse typedVariableResponseFromCollection(TypedVa\n                 ? null\n                 : value.getComponents().stream()\n                         .map(ResponseUtils::typedVariableResponseFromUnit)\n-                        .map(TypedVariableResponse::getValue)\n+                        .map(TypedVariableWithValue::getValue)\n                         .collect(OBJECT_MAPPER::createArrayNode, ArrayNode::add, ArrayNode::addAll);\n \n         // create a list of lists of variables with all the values of the sub-components\n@@ -166,18 +167,18 @@ private static TypedVariableResponse typedVariableResponseFromCollection(TypedVa\n                         .map(r -> r.getComponents().stream().collect(OBJECT_MAPPER::createArrayNode, ArrayNode::add, ArrayNode::addAll))\n                         .collect(Collectors.toList());\n \n-        return new TypedVariableResponse(value.getName(), value.getTypeRef(), responseValue, responseComponents);\n+        return new TypedVariableWithValue(value.getName(), value.getTypeRef(), responseValue, responseComponents);\n     }\n \n-    private static TypedVariableResponse typedVariableResponseFromStructure(TypedVariable value) {\n+    private static TypedVariableWithValue typedVariableResponseFromStructure(TypedVariable value) {\n         List<JsonNode> components = value.getComponents() == null\n                 ? null\n                 : value.getComponents().stream().map(ResponseUtils::typedVariableResponseFrom).<JsonNode> map(OBJECT_MAPPER::valueToTree).collect(Collectors.toList());\n-        return new TypedVariableResponse(value.getName(), value.getTypeRef(), null, components);\n+        return new TypedVariableWithValue(value.getName(), value.getTypeRef(), null, components);\n     }\n \n-    private static TypedVariableResponse typedVariableResponseFromUnit(TypedVariable value) {\n-        return new TypedVariableResponse(value.getName(), value.getTypeRef(), value.getValue(), null);\n+    private static TypedVariableWithValue typedVariableResponseFromUnit(TypedVariable value) {\n+        return new TypedVariableWithValue(value.getName(), value.getTypeRef(), value.getValue(), null);\n     }\n \n     private static <T, U> Collection<U> collectionFrom(Collection<T> input, Function<T, U> mapper) {"
  },
  {
    "sha": "8dca5c5600434e3c5fb1720121418fc101e6f72f",
    "filename": "trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/DecisionsApiV1IT.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/DecisionsApiV1IT.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/DecisionsApiV1IT.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/DecisionsApiV1IT.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -36,7 +36,7 @@\n import org.kie.kogito.trusty.service.common.responses.ExecutionType;\n import org.kie.kogito.trusty.service.common.responses.MessageExceptionFieldResponse;\n import org.kie.kogito.trusty.service.common.responses.MessageResponse;\n-import org.kie.kogito.trusty.service.common.responses.TypedVariableResponse;\n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n import org.kie.kogito.trusty.storage.api.model.Decision;\n import org.kie.kogito.trusty.storage.api.model.DecisionInput;\n import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n@@ -250,7 +250,7 @@ private void assertMessageExceptionFieldResponse(MessageExceptionFieldResponse e\n         }\n     }\n \n-    private void assertTypedVariableResponse(TypedVariableResponse expected, TypedVariableResponse actual) {\n+    private void assertTypedVariableResponse(TypedVariableWithValue expected, TypedVariableWithValue actual) {\n         assertNotNull(actual);\n         assertEquals(expected.getName(), actual.getName());\n         assertEquals(expected.getTypeRef(), actual.getTypeRef());\n@@ -304,7 +304,7 @@ private DecisionOutcomeResponse buildDecisionOutcomeResponse() throws JsonProces\n         ObjectMapper mapper = new ObjectMapper();\n         return new DecisionOutcomeResponse(\n                 TEST_OUTCOME_ID, \"ONE\", \"SUCCEEDED\",\n-                new TypedVariableResponse(\"result\", \"ResType\", mapper.readTree(\"\\\"The First Outcome\\\"\"), null),\n+                new TypedVariableWithValue(\"result\", \"ResType\", mapper.readTree(\"\\\"The First Outcome\\\"\"), null),\n                 Collections.emptyList(),\n                 List.of(new MessageResponse(\"WARNING\", \"INTERNAL\", \"TEST\", \"testSrc\", \"Test message\",\n                         new MessageExceptionFieldResponse(\"TestException\", \"Test exception message\",\n@@ -333,8 +333,8 @@ private DecisionStructuredInputsResponse buildDecisionStructuredInputsResponse(L\n             case FULL:\n                 ObjectMapper mapper = new ObjectMapper();\n                 return new DecisionStructuredInputsResponse(List.of(\n-                        new TypedVariableResponse(\"first\", \"FirstInput\", mapper.readTree(\"\\\"Hello\\\"\"), null),\n-                        new TypedVariableResponse(\"second\", \"SecondInput\", mapper.readTree(\"12345\"), null)));\n+                        new TypedVariableWithValue(\"first\", \"FirstInput\", mapper.readTree(\"\\\"Hello\\\"\"), null),\n+                        new TypedVariableWithValue(\"second\", \"SecondInput\", mapper.readTree(\"12345\"), null)));\n         }\n         throw new IllegalStateException();\n     }"
  },
  {
    "sha": "a50ded7c42b2022653f011329b394bfc0e6fd86d",
    "filename": "trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1IT.java",
    "status": "modified",
    "additions": 142,
    "deletions": 0,
    "changes": 142,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1IT.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1IT.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/api/ExplainabilityApiV1IT.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -16,37 +16,60 @@\n \n package org.kie.kogito.trusty.service.common.api;\n \n+import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import javax.json.Json;\n+import javax.json.JsonArray;\n+import javax.json.JsonObject;\n+import javax.ws.rs.core.MediaType;\n+\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.common.TrustyService;\n+import org.kie.kogito.trusty.service.common.requests.CounterfactualSearchDomain;\n+import org.kie.kogito.trusty.service.common.requests.DomainCategorical;\n+import org.kie.kogito.trusty.service.common.requests.DomainNumerical;\n+import org.kie.kogito.trusty.service.common.responses.CounterfactualResponse;\n import org.kie.kogito.trusty.service.common.responses.SalienciesResponse;\n import org.kie.kogito.trusty.service.common.responses.SaliencyResponse;\n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n+import org.kie.kogito.trusty.storage.api.model.CounterfactualResult;\n import org.kie.kogito.trusty.storage.api.model.ExplainabilityResult;\n import org.kie.kogito.trusty.storage.api.model.ExplainabilityStatus;\n import org.kie.kogito.trusty.storage.api.model.FeatureImportance;\n import org.kie.kogito.trusty.storage.api.model.Saliency;\n+import org.mockito.ArgumentCaptor;\n import org.testcontainers.shaded.org.apache.commons.lang.builder.CompareToBuilder;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import io.quarkus.test.junit.QuarkusTest;\n import io.quarkus.test.junit.mockito.InjectMock;\n+import io.restassured.filter.log.RequestLoggingFilter;\n import io.restassured.filter.log.ResponseLoggingFilter;\n \n import static io.restassured.RestAssured.given;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n @QuarkusTest\n class ExplainabilityApiV1IT {\n \n     private static final String TEST_EXECUTION_ID = \"executionId\";\n \n+    private static final String TEST_COUNTERFACTUAL_ID = \"counterfactualId\";\n+\n     @InjectMock\n     TrustyService executionService;\n \n@@ -64,6 +87,10 @@ private static ExplainabilityResult buildValidExplainabilityResult() {\n                                 new FeatureImportance(\"Feature2\", 0.70293)))));\n     }\n \n+    private static CounterfactualResult buildValidCounterfactualRequest() {\n+        return new CounterfactualResult(TEST_EXECUTION_ID, TEST_COUNTERFACTUAL_ID);\n+    }\n+\n     @Test\n     void testSalienciesWithExplainabilityResult() {\n         mockServiceWithExplainabilityResult();\n@@ -124,6 +151,116 @@ void testConverterMethodsNotThrowingWithNullModelValues() {\n         Assertions.assertDoesNotThrow(() -> ExplainabilityApiV1.saliencyModelToResponse(null));\n     }\n \n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    void testCounterfactualRequest() {\n+        ArgumentCaptor<List<TypedVariableWithValue>> goalsCaptor = ArgumentCaptor.forClass(List.class);\n+        ArgumentCaptor<List<CounterfactualSearchDomain>> searchDomainsCaptor = ArgumentCaptor.forClass(List.class);\n+\n+        mockServiceWithCounterfactualRequest();\n+\n+        JsonArray goals = Json\n+                .createArrayBuilder()\n+                .add(Json\n+                        .createObjectBuilder()\n+                        .add(\"name\", \"deposit\")\n+                        .add(\"typeRef\", \"number\")\n+                        .add(\"value\", 5000))\n+                .add(Json\n+                        .createObjectBuilder()\n+                        .add(\"name\", \"approved\")\n+                        .add(\"typeRef\", \"boolean\")\n+                        .add(\"value\", true))\n+                .build();\n+        JsonArray searchDomains = Json\n+                .createArrayBuilder()\n+                .add(Json\n+                        .createObjectBuilder()\n+                        .add(\"isFixed\", true)\n+                        .add(\"name\", \"age\")\n+                        .add(\"typeRef\", \"number\"))\n+                .add(Json\n+                        .createObjectBuilder()\n+                        .add(\"isFixed\", false)\n+                        .add(\"name\", \"income\")\n+                        .add(\"typeRef\", \"number\")\n+                        .add(\"domain\", Json\n+                                .createObjectBuilder()\n+                                .add(\"type\", \"numerical\")\n+                                .add(\"lowerBound\", 0)\n+                                .add(\"upperBound\", 1000)))\n+                .add(Json\n+                        .createObjectBuilder()\n+                        .add(\"isFixed\", false)\n+                        .add(\"name\", \"taxCode\")\n+                        .add(\"typeRef\", \"string\")\n+                        .add(\"domain\", Json\n+                                .createObjectBuilder()\n+                                .add(\"type\", \"categorical\")\n+                                .add(\"categories\", Json.createArrayBuilder().add(\"A\").add(\"B\").add(\"C\"))))\n+                .build();\n+        JsonObject params = Json.createObjectBuilder().add(\"goals\", goals).add(\"searchDomains\", searchDomains).build();\n+\n+        CounterfactualResponse response = given()\n+                .filter(new RequestLoggingFilter())\n+                .filter(new ResponseLoggingFilter())\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(params.toString())\n+                .when().post(\"/executions/decisions/\" + TEST_EXECUTION_ID + \"/explanations/counterfactuals\")\n+                .as(CounterfactualResponse.class);\n+\n+        assertNotNull(response);\n+        assertNotNull(response.getExecutionId());\n+        assertNotNull(response.getCounterfactualId());\n+        assertEquals(response.getExecutionId(), TEST_EXECUTION_ID);\n+        assertEquals(response.getCounterfactualId(), TEST_COUNTERFACTUAL_ID);\n+\n+        verify(executionService).requestCounterfactuals(eq(TEST_EXECUTION_ID), goalsCaptor.capture(), searchDomainsCaptor.capture());\n+        List<TypedVariableWithValue> goalsParameter = goalsCaptor.getValue();\n+        assertNotNull(goalsParameter);\n+        assertEquals(2, goalsParameter.size());\n+\n+        TypedVariableWithValue goal1 = goalsParameter.get(0);\n+        assertEquals(\"deposit\", goal1.getName());\n+        assertEquals(\"number\", goal1.getTypeRef());\n+        assertEquals(5000, goal1.getValue().asInt());\n+\n+        TypedVariableWithValue goal2 = goalsParameter.get(1);\n+        assertEquals(\"approved\", goal2.getName());\n+        assertEquals(\"boolean\", goal2.getTypeRef());\n+        assertEquals(Boolean.TRUE, goal2.getValue().asBoolean());\n+\n+        List<CounterfactualSearchDomain> searchDomainsParameter = searchDomainsCaptor.getValue();\n+        assertNotNull(searchDomainsParameter);\n+        assertEquals(3, searchDomainsParameter.size());\n+\n+        CounterfactualSearchDomain domain1 = searchDomainsParameter.get(0);\n+        assertTrue(domain1.isFixed());\n+        assertEquals(\"age\", domain1.getName());\n+        assertEquals(\"number\", domain1.getTypeRef());\n+        assertNull(domain1.getDomain());\n+\n+        CounterfactualSearchDomain domain2 = searchDomainsParameter.get(1);\n+        assertFalse(domain2.isFixed());\n+        assertEquals(\"income\", domain2.getName());\n+        assertEquals(\"number\", domain2.getTypeRef());\n+        assertNotNull(domain2.getDomain());\n+        assertTrue(domain2.getDomain() instanceof DomainNumerical);\n+        DomainNumerical domain2Def = (DomainNumerical) domain2.getDomain();\n+        assertEquals(0, domain2Def.getLowerBound());\n+        assertEquals(1000, domain2Def.getUpperBound());\n+\n+        CounterfactualSearchDomain domain3 = searchDomainsParameter.get(2);\n+        assertFalse(domain3.isFixed());\n+        assertEquals(\"taxCode\", domain3.getName());\n+        assertEquals(\"string\", domain3.getTypeRef());\n+        assertNotNull(domain3.getDomain());\n+        assertTrue(domain3.getDomain() instanceof DomainCategorical);\n+        DomainCategorical domain3Def = (DomainCategorical) domain3.getDomain();\n+        assertEquals(3, domain3Def.getCategories().size());\n+        assertTrue(domain3Def.getCategories().stream().map(JsonNode::asText).collect(Collectors.toList()).containsAll(Arrays.asList(\"A\", \"B\", \"C\")));\n+    }\n+\n     private void mockServiceWithExplainabilityResult() {\n         when(executionService.getExplainabilityResultById(eq(TEST_EXECUTION_ID)))\n                 .thenReturn(buildValidExplainabilityResult());\n@@ -138,4 +275,9 @@ private void mockServiceWithoutExplainabilityResult() {\n         when(executionService.getExplainabilityResultById(anyString()))\n                 .thenThrow(new IllegalArgumentException(\"Explainability result does not exist.\"));\n     }\n+\n+    private void mockServiceWithCounterfactualRequest() {\n+        when(executionService.requestCounterfactuals(eq(TEST_EXECUTION_ID), any(), any()))\n+                .thenReturn(buildValidCounterfactualRequest());\n+    }\n }"
  },
  {
    "sha": "b9984f163fbfadc659623ac665851579729e2758",
    "filename": "trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/responses/TypedVariableWithValueTest.java",
    "status": "renamed",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/responses/TypedVariableWithValueTest.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/responses/TypedVariableWithValueTest.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/responses/TypedVariableWithValueTest.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -21,14 +21,15 @@\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.common.TrustyServiceTestUtils;\n+import org.kie.kogito.trusty.service.common.shared.TypedVariableWithValue;\n import org.kie.kogito.trusty.storage.api.model.TypedVariable;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n \n import static org.kie.kogito.trusty.service.common.responses.ResponseUtils.typedVariableResponseFrom;\n \n-class TypedVariableResponseTest {\n+class TypedVariableWithValueTest {\n \n     private static final String FIELD_COMPONENTS = \"components\";\n     private static final String FIELD_NAME = \"name\";\n@@ -86,7 +87,7 @@ private static TypedVariable buildTestUnitVariable(String name, String typeRef,\n \n     @Test\n     void testCollection() throws JsonProcessingException {\n-        TypedVariableResponse response = typedVariableResponseFrom(buildTestCollection());\n+        TypedVariableWithValue response = typedVariableResponseFrom(buildTestCollection());\n \n         Assertions.assertEquals(VAR_NAME_COLLECTION, response.getName());\n         Assertions.assertEquals(TYPE_REF_STRING, response.getTypeRef());\n@@ -105,7 +106,7 @@ void testCollection() throws JsonProcessingException {\n \n     @Test\n     void testCollectionOfStructures() throws JsonProcessingException {\n-        TypedVariableResponse response = typedVariableResponseFrom(buildTestCollectionOfStructures());\n+        TypedVariableWithValue response = typedVariableResponseFrom(buildTestCollectionOfStructures());\n \n         Assertions.assertEquals(VAR_NAME_COLLECTION, response.getName());\n         Assertions.assertEquals(TYPE_REF_STRUCT, response.getTypeRef());\n@@ -157,7 +158,7 @@ void testCollectionOfStructures() throws JsonProcessingException {\n \n     @Test\n     void testStructure() throws JsonProcessingException {\n-        TypedVariableResponse response = typedVariableResponseFrom(buildTestStructure());\n+        TypedVariableWithValue response = typedVariableResponseFrom(buildTestStructure());\n \n         Assertions.assertEquals(VAR_NAME_STRUCT, response.getName());\n         Assertions.assertEquals(TYPE_REF_STRUCT, response.getTypeRef());\n@@ -189,7 +190,7 @@ void testStructure() throws JsonProcessingException {\n \n     @Test\n     void testUnit() throws JsonProcessingException {\n-        TypedVariableResponse response = typedVariableResponseFrom(buildTestUnitVariable());\n+        TypedVariableWithValue response = typedVariableResponseFrom(buildTestUnitVariable());\n \n         Assertions.assertEquals(VAR_NAME_UNIT, response.getName());\n         Assertions.assertEquals(TYPE_REF_STRING, response.getTypeRef());",
    "previous_filename": "trusty/trusty-service/trusty-service-common/src/test/java/org/kie/kogito/trusty/service/common/responses/TypedVariableResponseTest.java"
  },
  {
    "sha": "9a2b7cfba60d49bc16beacd5d20ddfa3b01e1d49",
    "filename": "trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/model/CounterfactualResult.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/kiegroup/kogito-apps/blob/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/model/CounterfactualResult.java",
    "raw_url": "https://github.com/kiegroup/kogito-apps/raw/131549b17a97aaff6cab80c091c67c56f0457cb9/trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/model/CounterfactualResult.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-apps/contents/trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/model/CounterfactualResult.java?ref=131549b17a97aaff6cab80c091c67c56f0457cb9",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.api.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CounterfactualResult {\n+\n+    public static final String EXECUTION_ID_FIELD = \"executionId\";\n+    public static final String COUNTERFACTUAL_ID_FIELD = \"counterfactualId\";\n+\n+    @JsonProperty(EXECUTION_ID_FIELD)\n+    private String executionId;\n+\n+    @JsonProperty(COUNTERFACTUAL_ID_FIELD)\n+    private String counterfactualId;\n+\n+    public CounterfactualResult() {\n+    }\n+\n+    public CounterfactualResult(String executionId, String counterfactualId) {\n+        this.executionId = executionId;\n+        this.counterfactualId = counterfactualId;\n+    }\n+\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public void setExecutionId(String executionId) {\n+        this.executionId = executionId;\n+    }\n+\n+    public String getCounterfactualId() {\n+        return counterfactualId;\n+    }\n+\n+    public void setCounterfactualId(String counterfactualId) {\n+        this.counterfactualId = counterfactualId;\n+    }\n+}"
  }
]
