[
  {
    "sha": "75dd8db7d123e0350de3b72af602fb226d8939b5",
    "filename": "kogito-bom/pom.xml",
    "status": "modified",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/kiegroup/kogito-runtimes/blob/25f6f3546146544976de8170831753fed2aa3360/kogito-bom/pom.xml",
    "raw_url": "https://github.com/kiegroup/kogito-runtimes/raw/25f6f3546146544976de8170831753fed2aa3360/kogito-bom/pom.xml",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-runtimes/contents/kogito-bom/pom.xml?ref=25f6f3546146544976de8170831753fed2aa3360",
    "patch": "@@ -641,6 +641,45 @@\n         <artifactId>jobs-service</artifactId>\n         <version>${project.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jobs-service-common</artifactId>\n+        <version>${project.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jobs-service-common</artifactId>\n+        <version>${project.version}</version>\n+        <classifier>sources</classifier>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jobs-service-common</artifactId>\n+        <version>${project.version}</version>\n+        <type>test-jar</type>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jobs-service-infinispan</artifactId>\n+        <version>${project.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jobs-service-infinispan</artifactId>\n+        <version>${project.version}</version>\n+        <classifier>sources</classifier>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jobs-service-postgresql</artifactId>\n+        <version>${project.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jobs-service-postgresql</artifactId>\n+        <version>${project.version}</version>\n+        <classifier>sources</classifier>\n+      </dependency>\n       <dependency>\n         <groupId>org.kie.kogito</groupId>\n         <artifactId>jobs-service</artifactId>"
  },
  {
    "sha": "821dd28d6c9d7b14cbad8decf8b0fcbd4b346d67",
    "filename": "kogito-test-utils/pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/kiegroup/kogito-runtimes/blob/25f6f3546146544976de8170831753fed2aa3360/kogito-test-utils/pom.xml",
    "raw_url": "https://github.com/kiegroup/kogito-runtimes/raw/25f6f3546146544976de8170831753fed2aa3360/kogito-test-utils/pom.xml",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-runtimes/contents/kogito-test-utils/pom.xml?ref=25f6f3546146544976de8170831753fed2aa3360",
    "patch": "@@ -69,6 +69,13 @@\n       <scope>compile</scope>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>postgresql</artifactId>\n+      <version>${version.org.testcontainers}</version>\n+      <scope>compile</scope>\n+    </dependency>\n+\n     <dependency>\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-junit5</artifactId>"
  },
  {
    "sha": "b5aa1e3b82cc17cbedaafcef05f370bd0335605a",
    "filename": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoPostgreSqlContainer.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/kiegroup/kogito-runtimes/blob/25f6f3546146544976de8170831753fed2aa3360/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoPostgreSqlContainer.java",
    "raw_url": "https://github.com/kiegroup/kogito-runtimes/raw/25f6f3546146544976de8170831753fed2aa3360/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoPostgreSqlContainer.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-runtimes/contents/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoPostgreSqlContainer.java?ref=25f6f3546146544976de8170831753fed2aa3360",
    "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers;\n+\n+import java.text.MessageFormat;\n+\n+import org.kie.kogito.resources.TestResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+/**\n+ * PostgreSQL Container for Kogito examples.\n+ */\n+public class KogitoPostgreSqlContainer extends PostgreSQLContainer implements TestResource {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KogitoPostgreSqlContainer.class);\n+\n+    public KogitoPostgreSqlContainer() {\n+        withLogConsumer(new Slf4jLogConsumer(LOGGER));\n+    }\n+\n+    @Override\n+    public void start() {\n+        super.start();\n+        LOGGER.info(\"PostgreSql server: {}\", this.getContainerIpAddress() + \":\" + this.getMappedPort(POSTGRESQL_PORT));\n+    }\n+\n+    @Override\n+    public int getMappedPort() {\n+        return getMappedPort(POSTGRESQL_PORT);\n+    }\n+\n+    @Override\n+    public String getResourceName() {\n+        return \"postgresql\";\n+    }\n+\n+    public String getConnectionUri() {\n+        final String connectionTemplate = \"postgresql://{0}:{1}@{2}:{3}/{4}?search_path={5}\";\n+        final String user = getUsername();\n+        final String server = getHost();\n+        final String secret = getPassword();\n+        final String port = String.valueOf(getMappedPort());\n+        final String database = getDatabaseName();\n+        final String schema = \"public\";\n+        return MessageFormat.format(connectionTemplate, user, secret, server, port, database, schema);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "00b275552296f641a0fd230966ffb16a47b335cf",
    "filename": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/PostgreSqlQuarkusTestResource.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/kiegroup/kogito-runtimes/blob/25f6f3546146544976de8170831753fed2aa3360/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/PostgreSqlQuarkusTestResource.java",
    "raw_url": "https://github.com/kiegroup/kogito-runtimes/raw/25f6f3546146544976de8170831753fed2aa3360/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/PostgreSqlQuarkusTestResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/kogito-runtimes/contents/kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/PostgreSqlQuarkusTestResource.java?ref=25f6f3546146544976de8170831753fed2aa3360",
    "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers.quarkus;\n+\n+import java.text.MessageFormat;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.kie.kogito.resources.ConditionalQuarkusTestResource;\n+import org.kie.kogito.testcontainers.KogitoPostgreSqlContainer;\n+\n+/**\n+ * PostgreSQL quarkus resource that works within the test lifecycle.\n+ *\n+ */\n+public class PostgreSqlQuarkusTestResource extends ConditionalQuarkusTestResource {\n+\n+    public static final String POSTGRESQL_CONNECTION_URI = \"postgresql.connection.uri\";\n+    public static final String QUARKUS_DATASOURCE_REACTIVE_URL = \"quarkus.datasource.reactive.url\";\n+    public static final String QUARKUS_DATASOURCE_JDBC_URL = \"quarkus.datasource.jdbc.url\";\n+    public static final String QUARKUS_DATASOURCE_USERNAME = \"quarkus.datasource.username\";\n+    public static final String QUARKUS_DATASOURCE_PASSWORD = \"quarkus.datasource.password\";\n+    public static final String QUARKUS_DATASOURCE_REACTIVE_URL_TEMPLATE = \"postgresql://{0}:{1}/{2}\";\n+    public static final String QUARKUS_DATASOURCE_JDBC_URL_TEMPLATE = \"jdbc:postgresql://{0}:{1}/{2}\";\n+\n+    private static final KogitoPostgreSqlContainer container = new KogitoPostgreSqlContainer();\n+\n+    public PostgreSqlQuarkusTestResource() {\n+        super(container);\n+    }\n+\n+    @Override\n+    public Map<String, String> start() {\n+        Map<String, String> start = super.start();\n+        if (start.isEmpty()) {\n+            return start;\n+        }\n+\n+        Map<String, String> properties = new HashMap<>(start);\n+        properties.put(QUARKUS_DATASOURCE_REACTIVE_URL,\n+                MessageFormat.format(QUARKUS_DATASOURCE_REACTIVE_URL_TEMPLATE,\n+                        container.getHost(),\n+                        String.valueOf(container.getMappedPort()),\n+                        container.getDatabaseName()));\n+        properties.put(QUARKUS_DATASOURCE_JDBC_URL,\n+                MessageFormat.format(QUARKUS_DATASOURCE_JDBC_URL_TEMPLATE,\n+                        container.getHost(),\n+                        String.valueOf(container.getMappedPort()),\n+                        container.getDatabaseName()));\n+        properties.put(QUARKUS_DATASOURCE_USERNAME,\n+                container.getUsername());\n+        properties.put(QUARKUS_DATASOURCE_PASSWORD,\n+                container.getPassword());\n+        return properties;\n+    }\n+\n+    @Override\n+    protected String getKogitoProperty() {\n+        return POSTGRESQL_CONNECTION_URI;\n+    }\n+\n+    @Override\n+    protected String getKogitoPropertyValue() {\n+        return container.getConnectionUri();\n+    }\n+\n+    public static class Conditional extends PostgreSqlQuarkusTestResource {\n+\n+        public Conditional() {\n+            super();\n+            enableConditional();\n+        }\n+    }\n+}"
  }
]
