[
  {
    "sha": "94810d006e7bea2f6dcb0916a45fc09cbbfed0b9",
    "filename": "optaweb-vehicle-routing-backend/.dockerignore",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/.dockerignore",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/.dockerignore",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/.dockerignore?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,5 @@\n+*\n+!target/*-runner\n+!target/*-runner.jar\n+!target/lib/*\n+!target/quarkus-app/*\n\\ No newline at end of file"
  },
  {
    "sha": "b31ab898f4c696708071bafef1cc98f99f70d6d4",
    "filename": "optaweb-vehicle-routing-backend/pom.xml",
    "status": "modified",
    "additions": 102,
    "deletions": 63,
    "changes": 165,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/pom.xml",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/pom.xml",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/pom.xml?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -33,49 +33,63 @@\n \n   <properties>\n     <java.module.name>org.optaweb.vehiclerouting.backend</java.module.name>\n+    <maven.compiler.parameters>true</maven.compiler.parameters>\n+    <maven.compiler.source>11</maven.compiler.source>\n+    <maven.compiler.target>11</maven.compiler.target>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n   </properties>\n \n   <dependencies>\n     <!-- Production dependencies -->\n+    <!-- Dataset YAML -->\n     <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-data-jpa</artifactId>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-yaml</artifactId>\n     </dependency>\n+    <!-- Persistence -->\n     <dependency>\n-      <groupId>com.h2database</groupId>\n-      <artifactId>h2</artifactId>\n-      <scope>runtime</scope>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-hibernate-orm-panache</artifactId>\n     </dependency>\n     <dependency>\n-      <groupId>org.postgresql</groupId>\n-      <artifactId>postgresql</artifactId>\n-      <scope>runtime</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-websocket</artifactId>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-jdbc-h2</artifactId>\n     </dependency>\n+    <!-- Planner -->\n     <dependency>\n       <groupId>org.optaplanner</groupId>\n-      <artifactId>optaplanner-spring-boot-starter</artifactId>\n+      <artifactId>optaplanner-quarkus</artifactId>\n     </dependency>\n+    <!-- TODO avoid guava if possible. -->\n     <dependency>\n-      <groupId>com.graphhopper</groupId>\n-      <artifactId>graphhopper-reader-osm</artifactId>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n     </dependency>\n+    <!-- Region -->\n     <dependency>\n       <groupId>com.neovisionaries</groupId>\n       <artifactId>nv-i18n</artifactId>\n     </dependency>\n+    <!-- REST -->\n     <dependency>\n-      <groupId>com.fasterxml.jackson.dataformat</groupId>\n-      <artifactId>jackson-dataformat-yaml</artifactId>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n     </dependency>\n+    <!-- Routing -->\n     <dependency>\n-      <groupId>com.fasterxml.jackson.core</groupId>\n-      <artifactId>jackson-databind</artifactId>\n+      <groupId>com.graphhopper</groupId>\n+      <artifactId>graphhopper-reader-osm</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.postgresql</groupId>\n+      <artifactId>postgresql</artifactId>\n+      <scope>runtime</scope>\n     </dependency>\n     <!--\n       Add JAXB API dependency that's been deprecated in Java 9 and dropped in Java 11. See\n@@ -87,11 +101,6 @@\n       <scope>runtime</scope>\n     </dependency>\n     <!-- Testing dependencies -->\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-test</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter-api</artifactId>\n@@ -107,26 +116,35 @@\n       <artifactId>mockito-junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n-    <!-- Enable Spring Boot Automatic Restart, see Development Guide in Readme to learn how to use it. -->\n     <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-devtools</artifactId>\n-      <optional>true</optional>\n+      <groupId>org.optaplanner</groupId>\n+      <artifactId>optaplanner-test</artifactId>\n+      <scope>test</scope>\n     </dependency>\n-    <!-- Include annotation processor that generates metadata for @ConfigurationProperties. -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5-mockito</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <!-- JSON testing -->\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-configuration-processor</artifactId>\n-      <optional>true</optional>\n+      <artifactId>spring-boot-test</artifactId>\n+      <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.optaplanner</groupId>\n-      <artifactId>optaplanner-test</artifactId>\n+      <groupId>com.jayway.jsonpath</groupId>\n+      <artifactId>json-path</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.assertj</groupId>\n-      <artifactId>assertj-core</artifactId>\n+      <groupId>org.skyscreamer</groupId>\n+      <artifactId>jsonassert</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n@@ -147,6 +165,30 @@\n           </compilerArgs>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <extensions>true</extensions>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>build</goal>\n+              <goal>generate-code</goal>\n+              <goal>generate-code-tests</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+            <maven.home>${maven.home}</maven.home>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-failsafe-plugin</artifactId>\n@@ -168,26 +210,6 @@\n           <show>package</show>\n         </configuration>\n       </plugin>\n-      <plugin>\n-        <groupId>org.springframework.boot</groupId>\n-        <artifactId>spring-boot-maven-plugin</artifactId>\n-        <configuration>\n-          <profiles>\n-            <profile>local</profile>\n-          </profiles>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>repackage-fat-jar</id>\n-            <goals>\n-              <goal>repackage</goal>\n-            </goals>\n-            <configuration>\n-              <classifier>exec</classifier>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n     </plugins>\n   </build>\n \n@@ -260,20 +282,37 @@\n     </profile>\n \n     <profile>\n-      <id>cypress</id>\n+      <id>native</id>\n+      <activation>\n+        <property>\n+          <name>native</name>\n+        </property>\n+      </activation>\n       <build>\n         <plugins>\n           <plugin>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-maven-plugin</artifactId>\n-            <configuration>\n-              <profiles>\n-                <profile>dev-cypress</profile>\n-              </profiles>\n-            </configuration>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <goals>\n+                  <goal>integration-test</goal>\n+                  <goal>verify</goal>\n+                </goals>\n+                <configuration>\n+                  <systemPropertyVariables>\n+                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n+                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+                    <maven.home>${maven.home}</maven.home>\n+                  </systemPropertyVariables>\n+                </configuration>\n+              </execution>\n+            </executions>\n           </plugin>\n         </plugins>\n       </build>\n+      <properties>\n+        <quarkus.package.type>native</quarkus.package.type>\n+      </properties>\n     </profile>\n   </profiles>\n </project>"
  },
  {
    "sha": "88661c3692d6978a90d9fc5838b45c8bbd87df41",
    "filename": "optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.fast-jar",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.fast-jar",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.fast-jar",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.fast-jar?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,54 @@\n+####\n+# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode\n+#\n+# Before building the container image run:\n+#\n+# ./mvnw package -Dquarkus.package.type=fast-jar\n+#\n+# Then, build the image with:\n+#\n+# docker build -f src/main/docker/Dockerfile.fast-jar -t quarkus/quarkus-fast-jar .\n+#\n+# Then run the container using:\n+#\n+# docker run -i --rm -p 8080:8080 quarkus/quarkus-fast-jar\n+#\n+# If you want to include the debug port into your docker image\n+# you will have to expose the debug port (default 5005) like this :  EXPOSE 8080 5050\n+#\n+# Then run the container using :\n+#\n+# docker run -i --rm -p 8080:8080 -p 5005:5005 -e JAVA_ENABLE_DEBUG=\"true\" quarkus/quarkus-fast-jar\n+#\n+###\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.3 \n+\n+ARG JAVA_PACKAGE=java-11-openjdk-headless\n+ARG RUN_JAVA_VERSION=1.3.8\n+ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'\n+# Install java and the run-java script\n+# Also set up permissions for user `1001`\n+RUN microdnf install curl ca-certificates ${JAVA_PACKAGE} \\\n+    && microdnf update \\\n+    && microdnf clean all \\\n+    && mkdir /deployments \\\n+    && chown 1001 /deployments \\\n+    && chmod \"g+rwX\" /deployments \\\n+    && chown 1001:root /deployments \\\n+    && curl https://repo1.maven.org/maven2/io/fabric8/run-java-sh/${RUN_JAVA_VERSION}/run-java-sh-${RUN_JAVA_VERSION}-sh.sh -o /deployments/run-java.sh \\\n+    && chown 1001 /deployments/run-java.sh \\\n+    && chmod 540 /deployments/run-java.sh \\\n+    && echo \"securerandom.source=file:/dev/urandom\" >> /etc/alternatives/jre/lib/security/java.security\n+\n+# Configure the JAVA_OPTIONS, you can add -XshowSettings:vm to also display the heap size.\n+ENV JAVA_OPTIONS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\n+# We make four distinct layers so if there are application changes the library layers can be re-used\n+COPY --chown=1001 target/quarkus-app/lib/ /deployments/lib/\n+COPY --chown=1001 target/quarkus-app/*.jar /deployments/\n+COPY --chown=1001 target/quarkus-app/app/ /deployments/app/\n+COPY --chown=1001 target/quarkus-app/quarkus/ /deployments/quarkus/\n+\n+EXPOSE 8080\n+USER 1001\n+\n+ENTRYPOINT [ \"/deployments/run-java.sh\" ]"
  },
  {
    "sha": "68c44971bdd49a0a2a722058d274931f6b891cb3",
    "filename": "optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.jvm",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.jvm",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.jvm",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.jvm?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,51 @@\n+####\n+# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode\n+#\n+# Before building the container image run:\n+#\n+# ./mvnw package\n+#\n+# Then, build the image with:\n+#\n+# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/quarkus-jvm .\n+#\n+# Then run the container using:\n+#\n+# docker run -i --rm -p 8080:8080 quarkus/quarkus-jvm\n+#\n+# If you want to include the debug port into your docker image\n+# you will have to expose the debug port (default 5005) like this :  EXPOSE 8080 5050\n+#\n+# Then run the container using :\n+#\n+# docker run -i --rm -p 8080:8080 -p 5005:5005 -e JAVA_ENABLE_DEBUG=\"true\" quarkus/quarkus-jvm\n+#\n+###\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.3 \n+\n+ARG JAVA_PACKAGE=java-11-openjdk-headless\n+ARG RUN_JAVA_VERSION=1.3.8\n+ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'\n+# Install java and the run-java script\n+# Also set up permissions for user `1001`\n+RUN microdnf install curl ca-certificates ${JAVA_PACKAGE} \\\n+    && microdnf update \\\n+    && microdnf clean all \\\n+    && mkdir /deployments \\\n+    && chown 1001 /deployments \\\n+    && chmod \"g+rwX\" /deployments \\\n+    && chown 1001:root /deployments \\\n+    && curl https://repo1.maven.org/maven2/io/fabric8/run-java-sh/${RUN_JAVA_VERSION}/run-java-sh-${RUN_JAVA_VERSION}-sh.sh -o /deployments/run-java.sh \\\n+    && chown 1001 /deployments/run-java.sh \\\n+    && chmod 540 /deployments/run-java.sh \\\n+    && echo \"securerandom.source=file:/dev/urandom\" >> /etc/alternatives/jre/lib/security/java.security\n+\n+# Configure the JAVA_OPTIONS, you can add -XshowSettings:vm to also display the heap size.\n+ENV JAVA_OPTIONS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\n+COPY target/lib/* /deployments/lib/\n+COPY target/*-runner.jar /deployments/app.jar\n+\n+EXPOSE 8080\n+USER 1001\n+\n+ENTRYPOINT [ \"/deployments/run-java.sh\" ]"
  },
  {
    "sha": "1ab39eb3dfddee80a4fcde1ca1b95eb7e428667e",
    "filename": "optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.native",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.native",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.native",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/docker/Dockerfile.native?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,27 @@\n+####\n+# This Dockerfile is used in order to build a container that runs the Quarkus application in native (no JVM) mode\n+#\n+# Before building the container image run:\n+#\n+# ./mvnw package -Pnative\n+#\n+# Then, build the image with:\n+#\n+# docker build -f src/main/docker/Dockerfile.native -t quarkus/quarkus .\n+#\n+# Then run the container using:\n+#\n+# docker run -i --rm -p 8080:8080 quarkus/quarkus\n+#\n+###\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.3\n+WORKDIR /work/\n+RUN chown 1001 /work \\\n+    && chmod \"g+rwX\" /work \\\n+    && chown 1001:root /work\n+COPY --chown=1001:root target/*-runner /work/application\n+\n+EXPOSE 8080\n+USER 1001\n+\n+CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]"
  },
  {
    "sha": "841967c5cc5b322cd51590257ee21ee5dad6a40c",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/OptaWebVehicleRoutingApplication.java",
    "status": "removed",
    "additions": 0,
    "deletions": 33,
    "changes": 33,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/9cca577fc5dd85d0865fe00305ecfb5ce8f4974b/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/OptaWebVehicleRoutingApplication.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/9cca577fc5dd85d0865fe00305ecfb5ce8f4974b/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/OptaWebVehicleRoutingApplication.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/OptaWebVehicleRoutingApplication.java?ref=9cca577fc5dd85d0865fe00305ecfb5ce8f4974b",
    "patch": "@@ -1,33 +0,0 @@\n-/*\n- * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.optaweb.vehiclerouting;\n-\n-import org.optaweb.vehiclerouting.plugin.planner.Constants;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.boot.builder.SpringApplicationBuilder;\n-import org.springframework.scheduling.annotation.EnableAsync;\n-\n-@SpringBootApplication\n-@EnableAsync\n-public class OptaWebVehicleRoutingApplication {\n-\n-    public static void main(String[] args) {\n-        new SpringApplicationBuilder(OptaWebVehicleRoutingApplication.class)\n-                .properties(\"optaplanner.solver-config-xml=\" + Constants.SOLVER_CONFIG)\n-                .run(args);\n-    }\n-}"
  },
  {
    "sha": "173cc6cc551c6546b6bd7d68efd3e117b24ba82e",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/Profiles.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/Profiles.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/Profiles.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/Profiles.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -19,7 +19,6 @@\n public class Profiles {\n \n     public static final String TEST = \"test\";\n-    public static final String NOT_TEST = \"!\" + TEST;\n \n     private Profiles() {\n         throw new AssertionError(\"Constants class\");"
  },
  {
    "sha": "69be7e4de708d883033a17e693a699fbd52aa80e",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/domain/RoutingProblem.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/domain/RoutingProblem.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/domain/RoutingProblem.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/domain/RoutingProblem.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -85,4 +85,9 @@ public String name() {\n     public List<VehicleData> vehicles() {\n         return vehicles;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n }"
  },
  {
    "sha": "28aa87ce1f35200b6badd34d524368377124566e",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceCrudRepository.java",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceCrudRepository.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceCrudRepository.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceCrudRepository.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -16,19 +16,20 @@\n \n package org.optaweb.vehiclerouting.plugin.persistence;\n \n-import org.springframework.data.jpa.repository.Modifying;\n-import org.springframework.data.jpa.repository.Query;\n-import org.springframework.data.repository.CrudRepository;\n-import org.springframework.data.repository.query.Param;\n-import org.springframework.transaction.annotation.Transactional;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n+import io.quarkus.panache.common.Parameters;\n \n /**\n  * Distance repository.\n  */\n-interface DistanceCrudRepository extends CrudRepository<DistanceEntity, DistanceKey> {\n+@ApplicationScoped\n+public class DistanceCrudRepository implements PanacheRepositoryBase<DistanceEntity, DistanceKey> {\n \n-    @Modifying\n-    @Transactional\n-    @Query(\"delete from DistanceEntity where from_id = :deletedLocationId or to_id = :deletedLocationId\")\n-    void deleteByFromIdOrToId(@Param(\"deletedLocationId\") long deletedLocationId);\n+    void deleteByFromIdOrToId(long deletedLocationId) {\n+        delete(\n+                \"fromId = :deletedLocationId or toId = :deletedLocationId\",\n+                Parameters.with(\"deletedLocationId\", deletedLocationId));\n+    }\n }"
  },
  {
    "sha": "684e54d7784dc4e7950ce9d2ff64668f4be991d2",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceRepositoryImpl.java",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceRepositoryImpl.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceRepositoryImpl.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/DistanceRepositoryImpl.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -18,34 +18,34 @@\n \n import java.util.Optional;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.optaweb.vehiclerouting.domain.Distance;\n import org.optaweb.vehiclerouting.domain.Location;\n import org.optaweb.vehiclerouting.service.distance.DistanceRepository;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n+@ApplicationScoped\n class DistanceRepositoryImpl implements DistanceRepository {\n \n     private final DistanceCrudRepository distanceRepository;\n \n-    @Autowired\n+    @Inject\n     DistanceRepositoryImpl(DistanceCrudRepository distanceRepository) {\n         this.distanceRepository = distanceRepository;\n     }\n \n     @Override\n-    public void saveDistance(Location from, Location to, long distance) {\n-        DistanceEntity distanceEntity = new DistanceEntity(new DistanceKey(from.id(), to.id()), distance);\n-        distanceRepository.save(distanceEntity);\n+    public void saveDistance(Location from, Location to, Distance distance) {\n+        DistanceEntity distanceEntity = new DistanceEntity(new DistanceKey(from.id(), to.id()), distance.millis());\n+        distanceRepository.persist(distanceEntity);\n     }\n \n     @Override\n-    public long getDistance(Location from, Location to) {\n-        Optional<DistanceEntity> optional = distanceRepository.findById(new DistanceKey(from.id(), to.id()));\n-        if (optional.isPresent()) {\n-            return optional.get().getDistance();\n-        }\n-        return -1;\n+    public Optional<Distance> getDistance(Location from, Location to) {\n+        return distanceRepository.findByIdOptional(new DistanceKey(from.id(), to.id()))\n+                .map(DistanceEntity::getDistance)\n+                .map(Distance::ofMillis);\n     }\n \n     @Override"
  },
  {
    "sha": "763612fa63fb930e999cb11828c20d76b9db9ba3",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationCrudRepository.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationCrudRepository.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationCrudRepository.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationCrudRepository.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -16,11 +16,14 @@\n \n package org.optaweb.vehiclerouting.plugin.persistence;\n \n-import org.springframework.data.repository.CrudRepository;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepository;\n \n /**\n  * Location repository.\n  */\n-interface LocationCrudRepository extends CrudRepository<LocationEntity, Long> {\n+@ApplicationScoped\n+public class LocationCrudRepository implements PanacheRepository<LocationEntity> {\n \n }"
  },
  {
    "sha": "335967f0917ccc3cbc56c587a0b9f58e2da07573",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationRepositoryImpl.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationRepositoryImpl.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationRepositoryImpl.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationRepositoryImpl.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -20,46 +20,46 @@\n \n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.StreamSupport;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n \n import org.optaweb.vehiclerouting.domain.Coordinates;\n import org.optaweb.vehiclerouting.domain.Location;\n import org.optaweb.vehiclerouting.service.location.LocationRepository;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n+@ApplicationScoped\n class LocationRepositoryImpl implements LocationRepository {\n \n     private static final Logger logger = LoggerFactory.getLogger(LocationRepositoryImpl.class);\n     private final LocationCrudRepository repository;\n \n-    @Autowired\n+    @Inject\n     LocationRepositoryImpl(LocationCrudRepository repository) {\n         this.repository = repository;\n     }\n \n     @Override\n     public Location createLocation(Coordinates coordinates, String description) {\n-        LocationEntity locationEntity = repository.save(\n-                new LocationEntity(0, coordinates.latitude(), coordinates.longitude(), description));\n+        LocationEntity locationEntity = new LocationEntity(0, coordinates.latitude(), coordinates.longitude(), description);\n+        repository.persist(locationEntity);\n         Location location = toDomain(locationEntity);\n         logger.info(\"Created location {}.\", location.fullDescription());\n         return location;\n     }\n \n     @Override\n     public List<Location> locations() {\n-        return StreamSupport.stream(repository.findAll().spliterator(), false)\n+        return repository.streamAll()\n                 .map(LocationRepositoryImpl::toDomain)\n                 .collect(toList());\n     }\n \n     @Override\n     public Location removeLocation(long id) {\n-        Optional<LocationEntity> maybeLocation = repository.findById(id);\n+        Optional<LocationEntity> maybeLocation = repository.findByIdOptional(id);\n         maybeLocation.ifPresent(locationEntity -> repository.deleteById(id));\n         LocationEntity locationEntity = maybeLocation.orElseThrow(\n                 () -> new IllegalArgumentException(\"Location{id=\" + id + \"} doesn't exist\"));\n@@ -75,7 +75,7 @@ public void removeAll() {\n \n     @Override\n     public Optional<Location> find(long locationId) {\n-        return repository.findById(locationId).map(LocationRepositoryImpl::toDomain);\n+        return repository.findByIdOptional(locationId).map(LocationRepositoryImpl::toDomain);\n     }\n \n     private static Location toDomain(LocationEntity locationEntity) {"
  },
  {
    "sha": "a5f3b9c5bb9fa2a393e99d78698c17a97692df21",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleCrudRepository.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleCrudRepository.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleCrudRepository.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleCrudRepository.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -16,11 +16,14 @@\n \n package org.optaweb.vehiclerouting.plugin.persistence;\n \n-import org.springframework.data.repository.CrudRepository;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepository;\n \n /**\n  * Vehicle repository.\n  */\n-public interface VehicleCrudRepository extends CrudRepository<VehicleEntity, Long> {\n+@ApplicationScoped\n+public class VehicleCrudRepository implements PanacheRepository<VehicleEntity> {\n \n }"
  },
  {
    "sha": "f108509ff021193758d7655fd1078ae6fc1d4e56",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleEntity.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleEntity.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleEntity.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleEntity.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -51,10 +51,18 @@ public String getName() {\n         return name;\n     }\n \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n     public int getCapacity() {\n         return capacity;\n     }\n \n+    public void setCapacity(int capacity) {\n+        this.capacity = capacity;\n+    }\n+\n     @Override\n     public String toString() {\n         return \"VehicleEntity{\" +"
  },
  {
    "sha": "27288e1cf43638971f75f69d16cce743dec048cc",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleRepositoryImpl.java",
    "status": "modified",
    "additions": 19,
    "deletions": 11,
    "changes": 30,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleRepositoryImpl.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleRepositoryImpl.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/VehicleRepositoryImpl.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -20,53 +20,57 @@\n \n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.StreamSupport;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n \n import org.optaweb.vehiclerouting.domain.Vehicle;\n import org.optaweb.vehiclerouting.domain.VehicleData;\n import org.optaweb.vehiclerouting.domain.VehicleFactory;\n import org.optaweb.vehiclerouting.service.vehicle.VehicleRepository;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.stereotype.Component;\n \n-@Component\n+@ApplicationScoped\n public class VehicleRepositoryImpl implements VehicleRepository {\n \n     private static final Logger logger = LoggerFactory.getLogger(VehicleRepositoryImpl.class);\n     private final VehicleCrudRepository repository;\n \n+    @Inject\n     public VehicleRepositoryImpl(VehicleCrudRepository repository) {\n         this.repository = repository;\n     }\n \n     @Override\n     public Vehicle createVehicle(int capacity) {\n-        long id = repository.save(new VehicleEntity(0, null, capacity)).getId();\n-        VehicleEntity vehicleEntity = repository.save(new VehicleEntity(id, \"Vehicle \" + id, capacity));\n+        VehicleEntity vehicleEntity = new VehicleEntity(0, null, capacity);\n+        repository.persist(vehicleEntity);\n+        vehicleEntity.setName(\"Vehicle \" + vehicleEntity.getId());\n         Vehicle vehicle = toDomain(vehicleEntity);\n         logger.info(\"Created vehicle {}.\", vehicle);\n         return vehicle;\n     }\n \n     @Override\n     public Vehicle createVehicle(VehicleData vehicleData) {\n-        VehicleEntity vehicleEntity = repository.save(new VehicleEntity(0, vehicleData.name(), vehicleData.capacity()));\n+        VehicleEntity vehicleEntity = new VehicleEntity(0, vehicleData.name(), vehicleData.capacity());\n+        repository.persist(vehicleEntity);\n         Vehicle vehicle = toDomain(vehicleEntity);\n         logger.info(\"Created vehicle {}.\", vehicle);\n         return vehicle;\n     }\n \n     @Override\n     public List<Vehicle> vehicles() {\n-        return StreamSupport.stream(repository.findAll().spliterator(), false)\n+        return repository.streamAll()\n                 .map(VehicleRepositoryImpl::toDomain)\n                 .collect(toList());\n     }\n \n     @Override\n     public Vehicle removeVehicle(long id) {\n-        Optional<VehicleEntity> optionalVehicleEntity = repository.findById(id);\n+        Optional<VehicleEntity> optionalVehicleEntity = repository.findByIdOptional(id);\n         VehicleEntity vehicleEntity = optionalVehicleEntity.orElseThrow(\n                 () -> new IllegalArgumentException(\"Vehicle{id=\" + id + \"} doesn't exist\"));\n         repository.deleteById(id);\n@@ -82,12 +86,16 @@ public void removeAll() {\n \n     @Override\n     public Optional<Vehicle> find(long vehicleId) {\n-        return repository.findById(vehicleId).map(VehicleRepositoryImpl::toDomain);\n+        return repository.findByIdOptional(vehicleId).map(VehicleRepositoryImpl::toDomain);\n     }\n \n     @Override\n-    public void update(Vehicle vehicle) {\n-        repository.save(new VehicleEntity(vehicle.id(), vehicle.name(), vehicle.capacity()));\n+    public Vehicle changeCapacity(long vehicleId, int capacity) {\n+        VehicleEntity vehicleEntity = repository.findByIdOptional(vehicleId).orElseThrow(() -> new IllegalArgumentException(\n+                \"Can't change Vehicle{id=\" + vehicleId + \"} because it doesn't exist\"));\n+        vehicleEntity.setCapacity(capacity);\n+        repository.flush();\n+        return VehicleFactory.createVehicle(vehicleEntity.getId(), vehicleEntity.getName(), vehicleEntity.getCapacity());\n     }\n \n     private static Vehicle toDomain(VehicleEntity vehicleEntity) {"
  },
  {
    "sha": "5667dc26336cce94d2e0a06bd1914ebf8b914d82",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteChangedEventPublisher.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteChangedEventPublisher.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteChangedEventPublisher.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteChangedEventPublisher.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -22,6 +22,10 @@\n import java.util.Collections;\n import java.util.List;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n import org.optaweb.vehiclerouting.domain.Distance;\n import org.optaweb.vehiclerouting.plugin.planner.domain.PlanningDepot;\n import org.optaweb.vehiclerouting.plugin.planner.domain.PlanningVehicle;\n@@ -31,23 +35,20 @@\n import org.optaweb.vehiclerouting.service.route.ShallowRoute;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Converts planning solution to a {@link RouteChangedEvent} and publishes it so that it can be processed by other\n  * components that listen for this type of event.\n  */\n-@Component\n+@ApplicationScoped\n class RouteChangedEventPublisher {\n \n     private static final Logger logger = LoggerFactory.getLogger(RouteChangedEventPublisher.class);\n \n-    private final ApplicationEventPublisher eventPublisher;\n+    private final Event<RouteChangedEvent> eventPublisher;\n \n-    @Autowired\n-    RouteChangedEventPublisher(ApplicationEventPublisher eventPublisher) {\n+    @Inject\n+    RouteChangedEventPublisher(Event<RouteChangedEvent> eventPublisher) {\n         this.eventPublisher = eventPublisher;\n     }\n \n@@ -66,7 +67,7 @@ void publishSolution(VehicleRoutingSolution solution) {\n                 event.distance(),\n                 solution.getScore());\n         logger.debug(\"Routes: {}\", event.routes());\n-        eventPublisher.publishEvent(event);\n+        eventPublisher.fire(event);\n     }\n \n     /**"
  },
  {
    "sha": "ef427af3ec646e78676ca98597a261907f642c52",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerConfig.java",
    "status": "modified",
    "additions": 16,
    "deletions": 12,
    "changes": 28,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerConfig.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerConfig.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerConfig.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -16,18 +16,23 @@\n \n package org.optaweb.vehiclerouting.plugin.planner;\n \n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n import org.optaplanner.core.api.solver.Solver;\n import org.optaplanner.core.api.solver.SolverFactory;\n import org.optaweb.vehiclerouting.plugin.planner.domain.VehicleRoutingSolution;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.task.AsyncListenableTaskExecutor;\n-import org.springframework.core.task.SimpleAsyncTaskExecutor;\n+\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.common.util.concurrent.MoreExecutors;\n \n /**\n- * Spring configuration that creates {@link RouteOptimizerImpl route optimizer}'s dependencies.\n+ * Configuration bean that creates {@link RouteOptimizerImpl route optimizer}'s dependencies.\n  */\n-@Configuration\n+@Dependent\n class RouteOptimizerConfig {\n \n     private final SolverFactory<VehicleRoutingSolution> solverFactory;\n@@ -36,15 +41,14 @@\n         this.solverFactory = solverFactory;\n     }\n \n-    @Bean\n+    @Produces\n     Solver<VehicleRoutingSolution> solver() {\n         return solverFactory.buildSolver();\n     }\n \n-    @Bean\n-    AsyncListenableTaskExecutor executor() {\n-        SimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor();\n-        executor.setConcurrencyLimit(1);\n-        return executor;\n+    @Produces\n+    ListeningExecutorService executor() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return MoreExecutors.listeningDecorator(executorService);\n     }\n }"
  },
  {
    "sha": "ec28ef70e535180fbe541ea80ad3318ede2d0248",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerImpl.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerImpl.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerImpl.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteOptimizerImpl.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -19,6 +19,9 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n import org.optaweb.vehiclerouting.domain.Location;\n import org.optaweb.vehiclerouting.domain.Vehicle;\n import org.optaweb.vehiclerouting.plugin.planner.domain.PlanningDepot;\n@@ -30,17 +33,16 @@\n import org.optaweb.vehiclerouting.plugin.planner.domain.PlanningVisitFactory;\n import org.optaweb.vehiclerouting.plugin.planner.domain.SolutionFactory;\n import org.optaweb.vehiclerouting.service.location.DistanceMatrixRow;\n-import org.optaweb.vehiclerouting.service.location.RouteOptimizer;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n+import org.optaweb.vehiclerouting.service.location.LocationPlanner;\n+import org.optaweb.vehiclerouting.service.vehicle.VehiclePlanner;\n \n /**\n  * Accumulates vehicles, depots and visits until there's enough data to start the optimization.\n  * Solutions are published even if solving hasn't started yet due to missing facts (e.g. no vehicles or no visits).\n  * Stops solver when vehicles or visits are reduced to zero.\n  */\n-@Component\n-class RouteOptimizerImpl implements RouteOptimizer {\n+@ApplicationScoped\n+class RouteOptimizerImpl implements LocationPlanner, VehiclePlanner {\n \n     private final SolverManager solverManager;\n     private final RouteChangedEventPublisher routeChangedEventPublisher;\n@@ -49,7 +51,7 @@\n     private final List<PlanningVisit> visits = new ArrayList<>();\n     private PlanningDepot depot;\n \n-    @Autowired\n+    @Inject\n     RouteOptimizerImpl(SolverManager solverManager, RouteChangedEventPublisher routeChangedEventPublisher) {\n         this.solverManager = solverManager;\n         this.routeChangedEventPublisher = routeChangedEventPublisher;"
  },
  {
    "sha": "259f37dd96736439575567b066bb3cf4cc98e971",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/SolverManager.java",
    "status": "modified",
    "additions": 40,
    "deletions": 24,
    "changes": 64,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/SolverManager.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/SolverManager.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/SolverManager.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -19,6 +19,11 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutionException;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.inject.Default;\n+import javax.inject.Inject;\n+\n import org.optaplanner.core.api.solver.Solver;\n import org.optaplanner.core.api.solver.event.BestSolutionChangedEvent;\n import org.optaplanner.core.api.solver.event.SolverEventListener;\n@@ -33,11 +38,10 @@\n import org.optaweb.vehiclerouting.service.error.ErrorEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.core.task.AsyncListenableTaskExecutor;\n-import org.springframework.stereotype.Component;\n-import org.springframework.util.concurrent.ListenableFuture;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.common.util.concurrent.MoreExecutors;\n \n /**\n  * Manages a solver running in a different thread.\n@@ -52,28 +56,29 @@\n  * <li>Listens for best solution changes and publishes new best solutions via {@link RouteChangedEventPublisher}.</li>\n  * </ul>\n  */\n-@Component(\"optaweb-solver-manager\")\n+@ApplicationScoped\n+@Default\n class SolverManager implements SolverEventListener<VehicleRoutingSolution> {\n \n     private static final Logger logger = LoggerFactory.getLogger(SolverManager.class);\n \n     private final Solver<VehicleRoutingSolution> solver;\n-    private final AsyncListenableTaskExecutor executor;\n+    private final ListeningExecutorService executor;\n     private final RouteChangedEventPublisher routeChangedEventPublisher;\n-    private final ApplicationEventPublisher eventPublisher;\n+    private final Event<ErrorEvent> errorEvent;\n \n     private ListenableFuture<VehicleRoutingSolution> solverFuture;\n \n-    @Autowired\n+    @Inject\n     SolverManager(\n             Solver<VehicleRoutingSolution> solver,\n-            AsyncListenableTaskExecutor executor,\n+            ListeningExecutorService executor,\n             RouteChangedEventPublisher routeChangedEventPublisher,\n-            ApplicationEventPublisher eventPublisher) {\n+            Event<ErrorEvent> errorEvent) {\n         this.solver = solver;\n         this.executor = executor;\n         this.routeChangedEventPublisher = routeChangedEventPublisher;\n-        this.eventPublisher = eventPublisher;\n+        this.errorEvent = errorEvent;\n         this.solver.addEventListener(this);\n     }\n \n@@ -96,22 +101,33 @@ void startSolver(VehicleRoutingSolution solution) {\n         if (solverFuture != null) {\n             throw new IllegalStateException(\"Solver start has already been requested\");\n         }\n-        solverFuture = executor.submitListenable((SolvingTask) () -> solver.solve(solution));\n-        solverFuture.addCallback(\n+        solverFuture = executor.submit((SolvingTask) () -> solver.solve(solution));\n+        solverFuture.addListener(\n                 // IMPORTANT: This is happening on the solver thread.\n-                // TODO in both cases restart or somehow recover?\n-                result -> {\n+                // TODO maybe restart or somehow recover?\n+                () -> {\n                     if (!solver.isTerminateEarly()) {\n-                        // This is impossible. Solver in daemon mode can't return from solve() unless it has been\n-                        // terminated (see #stopSolver()) or throws an exception.\n-                        logger.error(\"Solver stopped solving but that shouldn't happen in daemon mode.\");\n-                        eventPublisher.publishEvent(new ErrorEvent(this, \"Solver stopped solving unexpectedly.\"));\n+                        // Solver in daemon mode can't return from solve() unless it has been terminated early\n+                        // (see #stopSolver()).\n+                        // So this case is only possible when an exception is thrown during solver.solve().\n+                        try {\n+                            solverFuture.get();\n+                            logger.error(\"This should be impossible. The solver has stopped without being terminated early\"\n+                                    + \" so at this point it is expected to have crashed but there was no exception.\");\n+                            errorEvent.fire(new ErrorEvent(\n+                                    this,\n+                                    \"Solver stopped without being terminated early and without throwing an exception.\"\n+                                            + \" This is a bug.\"));\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            throw new RuntimeException(\"Interrupted while retrieving the cause of solver failure\", e);\n+                        } catch (ExecutionException e) {\n+                            logger.error(\"Solver failed\", e);\n+                            errorEvent.fire(new ErrorEvent(this, e.toString()));\n+                        }\n                     }\n                 },\n-                exception -> {\n-                    logger.error(\"Solver failed\", exception);\n-                    eventPublisher.publishEvent(new ErrorEvent(this, exception.toString()));\n-                });\n+                MoreExecutors.directExecutor());\n     }\n \n     void stopSolver() {"
  },
  {
    "sha": "6df2717bd8d68720068ed555aa8c4e10c913a2ee",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ClearResource.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ClearResource.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ClearResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ClearResource.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaweb.vehiclerouting.plugin.rest;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+import org.optaweb.vehiclerouting.service.location.LocationService;\n+import org.optaweb.vehiclerouting.service.vehicle.VehicleService;\n+\n+@Path(\"api/clear\")\n+public class ClearResource {\n+\n+    private final LocationService locationService;\n+    private final VehicleService vehicleService;\n+\n+    @Inject\n+    public ClearResource(LocationService locationService, VehicleService vehicleService) {\n+        this.locationService = locationService;\n+        this.vehicleService = vehicleService;\n+    }\n+\n+    @POST\n+    public void clear() {\n+        // TODO do this in one step (=> new RoutingPlanService)\n+        vehicleService.removeAll();\n+        locationService.removeAll();\n+    }\n+}"
  },
  {
    "sha": "fae3cf35ed8eb282983bd543eaee26abe4bdd09c",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DataSetDownloadResource.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DataSetDownloadResource.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DataSetDownloadResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DataSetDownloadResource.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaweb.vehiclerouting.plugin.rest;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.optaweb.vehiclerouting.service.demo.DemoService;\n+\n+/**\n+ * Serves the current data set as a downloadable YAML file.\n+ */\n+@Path(\"api/dataset/export\")\n+@Produces(\"text/x-yaml\")\n+public class DataSetDownloadResource {\n+\n+    private final DemoService demoService;\n+\n+    DataSetDownloadResource(DemoService demoService) {\n+        this.demoService = demoService;\n+    }\n+\n+    @GET\n+    public Response exportDataSet() throws IOException {\n+        String dataSet = demoService.exportDataSet();\n+        byte[] dataSetBytes = dataSet.getBytes(StandardCharsets.UTF_8);\n+        try (InputStream is = new ByteArrayInputStream(dataSetBytes)) {\n+            return Response.ok()\n+                    .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"vrp_data_set.yaml\\\"\")\n+                    .header(HttpHeaders.CONTENT_LENGTH, dataSetBytes.length)\n+                    .type(new MediaType(\"text\", \"x-yaml\", StandardCharsets.UTF_8.name()))\n+                    .entity(is)\n+                    .build();\n+        }\n+    }\n+\n+    // TODO exception handler\n+}"
  },
  {
    "sha": "530757b1b37655cc6881e287562b887576fd1dd3",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DemoResource.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DemoResource.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DemoResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/DemoResource.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaweb.vehiclerouting.plugin.rest;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+import org.optaweb.vehiclerouting.service.demo.DemoService;\n+\n+@Path(\"api/demo/{name}\")\n+public class DemoResource {\n+\n+    private final DemoService demoService;\n+\n+    @Inject\n+    public DemoResource(DemoService demoService) {\n+        this.demoService = demoService;\n+    }\n+\n+    /**\n+     * Load a demo data set.\n+     *\n+     * @param name data set name\n+     */\n+    @POST\n+    public void loadDemo(@PathParam(\"name\") String name) {\n+        demoService.loadDemo(name);\n+    }\n+\n+}"
  },
  {
    "sha": "4aaed88e033430845ff73f4d55621ed8df35f6fb",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/LocationResource.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/LocationResource.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/LocationResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/LocationResource.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaweb.vehiclerouting.plugin.rest;\n+\n+import javax.inject.Inject;\n+import javax.transaction.Transactional;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+import org.optaweb.vehiclerouting.domain.Coordinates;\n+import org.optaweb.vehiclerouting.plugin.rest.model.PortableLocation;\n+import org.optaweb.vehiclerouting.service.location.LocationService;\n+\n+@Path(\"api/location\")\n+public class LocationResource {\n+\n+    private final LocationService locationService;\n+\n+    @Inject\n+    public LocationResource(LocationService locationService) {\n+        this.locationService = locationService;\n+    }\n+\n+    /**\n+     * Create new location.\n+     *\n+     * @param request new location description\n+     */\n+    @Transactional\n+    @POST\n+    public void addLocation(PortableLocation request) {\n+        locationService.createLocation(\n+                new Coordinates(request.getLatitude(), request.getLongitude()),\n+                request.getDescription());\n+    }\n+\n+    /**\n+     * Delete location.\n+     *\n+     * @param id ID of the location to be deleted\n+     */\n+    @Transactional\n+    @DELETE\n+    @Path(\"{id}\")\n+    public void deleteLocation(@PathParam(\"id\") long id) {\n+        locationService.removeLocation(id);\n+    }\n+}"
  },
  {
    "sha": "705a688cebe049c68f17baef6487baa22ada111d",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/RouteEventResource.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/RouteEventResource.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/RouteEventResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/RouteEventResource.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaweb.vehiclerouting.plugin.rest;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.optaweb.vehiclerouting.domain.RoutingPlan;\n+import org.optaweb.vehiclerouting.plugin.rest.model.PortableErrorMessage;\n+import org.optaweb.vehiclerouting.plugin.rest.model.PortableRoutingPlanFactory;\n+import org.optaweb.vehiclerouting.service.error.ErrorMessage;\n+import org.optaweb.vehiclerouting.service.route.RouteListener;\n+\n+@ApplicationScoped\n+@Path(\"api/events\")\n+public class RouteEventResource {\n+\n+    // TODO repository, not listener (service)\n+    private final RouteListener routeListener;\n+\n+    private SseBroadcaster sseBroadcaster;\n+    private OutboundSseEvent.Builder eventBuilder;\n+\n+    @Inject\n+    public RouteEventResource(RouteListener routeListener) {\n+        this.routeListener = routeListener;\n+    }\n+\n+    // Handy during development.\n+    @PreDestroy\n+    public void closeBroadcaster() {\n+        sseBroadcaster.close();\n+    }\n+\n+    public void observeRoute(@Observes RoutingPlan event) {\n+        if (sseBroadcaster != null) {\n+            sseBroadcaster.broadcast(eventBuilder\n+                    .data(PortableRoutingPlanFactory.fromRoutingPlan(event))\n+                    .name(\"route\")\n+                    .comment(\"route update\")\n+                    .build());\n+        }\n+    }\n+\n+    public void observeError(@Observes ErrorMessage event) {\n+        if (sseBroadcaster != null) {\n+            sseBroadcaster.broadcast(eventBuilder\n+                    .data(PortableErrorMessage.fromMessage(event))\n+                    .name(\"errorMessage\")\n+                    .comment(\"error message\")\n+                    .build());\n+        }\n+    }\n+\n+    @GET\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void sse(@Context Sse sse, @Context SseEventSink eventSink) {\n+        if (sseBroadcaster == null) {\n+            sseBroadcaster = sse.newBroadcaster();\n+            eventBuilder = sse.newEventBuilder()\n+                    .mediaType(MediaType.APPLICATION_JSON_TYPE)\n+                    .reconnectDelay(3000);\n+        }\n+        OutboundSseEvent sseEvent = eventBuilder\n+                .data(PortableRoutingPlanFactory.fromRoutingPlan(routeListener.getBestRoutingPlan()))\n+                .comment(\"best route\")\n+                .build();\n+        eventSink.send(sseEvent);\n+        sseBroadcaster.register(eventSink);\n+    }\n+}"
  },
  {
    "sha": "c74e339fc23f6de71c8d7af83cec4200d6c55750",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ServerInfoResource.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ServerInfoResource.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ServerInfoResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/ServerInfoResource.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaweb.vehiclerouting.plugin.rest;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.optaweb.vehiclerouting.plugin.rest.model.PortableCoordinates;\n+import org.optaweb.vehiclerouting.plugin.rest.model.RoutingProblemInfo;\n+import org.optaweb.vehiclerouting.plugin.rest.model.ServerInfo;\n+import org.optaweb.vehiclerouting.service.demo.DemoService;\n+import org.optaweb.vehiclerouting.service.region.BoundingBox;\n+import org.optaweb.vehiclerouting.service.region.RegionService;\n+\n+@Path(\"api/serverInfo\")\n+public class ServerInfoResource {\n+\n+    private final DemoService demoService;\n+    private final RegionService regionService;\n+\n+    @Inject\n+    public ServerInfoResource(DemoService demoService, RegionService regionService) {\n+        this.demoService = demoService;\n+        this.regionService = regionService;\n+    }\n+\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public ServerInfo serverInfo() {\n+        BoundingBox boundingBox = regionService.boundingBox();\n+        List<PortableCoordinates> portableBoundingBox = Arrays.asList(\n+                PortableCoordinates.fromCoordinates(boundingBox.getSouthWest()),\n+                PortableCoordinates.fromCoordinates(boundingBox.getNorthEast()));\n+        List<RoutingProblemInfo> demos = demoService.demos().stream()\n+                .map(routingProblem -> new RoutingProblemInfo(\n+                        routingProblem.name(),\n+                        routingProblem.visits().size()))\n+                .collect(toList());\n+        return new ServerInfo(portableBoundingBox, regionService.countryCodes(), demos);\n+    }\n+}"
  },
  {
    "sha": "c64a561dcb3b13f8f6513e64bb559d62969e8eef",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/VehicleResource.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/VehicleResource.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/VehicleResource.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/VehicleResource.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaweb.vehiclerouting.plugin.rest;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+import org.optaweb.vehiclerouting.service.vehicle.VehicleService;\n+\n+@Path(\"api/vehicle\")\n+public class VehicleResource {\n+\n+    private final VehicleService vehicleService;\n+\n+    @Inject\n+    public VehicleResource(VehicleService vehicleService) {\n+        this.vehicleService = vehicleService;\n+    }\n+\n+    @POST\n+    public void addVehicle() {\n+        vehicleService.createVehicle();\n+    }\n+\n+    /**\n+     * Delete vehicle.\n+     *\n+     * @param id ID of the vehicle to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{id}\")\n+    public void removeVehicle(@PathParam(\"id\") long id) {\n+        vehicleService.removeVehicle(id);\n+    }\n+\n+    @POST\n+    @Path(\"deleteAny\")\n+    public void removeAnyVehicle() {\n+        vehicleService.removeAnyVehicle();\n+    }\n+\n+    @POST\n+    @Path(\"{id}/capacity\")\n+    public void changeCapacity(@PathParam(\"id\") long id, int capacity) {\n+        vehicleService.changeCapacity(id, capacity);\n+    }\n+}"
  },
  {
    "sha": "80acb69ef01c128d713977147e76f50f1b79e153",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableCoordinates.java",
    "status": "renamed",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableCoordinates.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableCoordinates.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableCoordinates.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.optaweb.vehiclerouting.plugin.websocket;\n+package org.optaweb.vehiclerouting.plugin.rest.model;\n \n import java.math.BigDecimal;\n import java.math.RoundingMode;\n@@ -27,7 +27,7 @@\n /**\n  * {@link Coordinates} representation optimized for network transport.\n  */\n-class PortableCoordinates {\n+public class PortableCoordinates {\n \n     /*\n      * Five decimal places gives \"metric\" precision (±55 cm on equator). That's enough for visualising the track.\n@@ -40,7 +40,7 @@\n     @JsonProperty(value = \"lng\")\n     private final BigDecimal longitude;\n \n-    static PortableCoordinates fromCoordinates(Coordinates coordinates) {\n+    public static PortableCoordinates fromCoordinates(Coordinates coordinates) {\n         Objects.requireNonNull(coordinates, \"coordinates must not be null\");\n         return new PortableCoordinates(\n                 coordinates.latitude(),",
    "previous_filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableCoordinates.java"
  },
  {
    "sha": "00439e775d4ea5ac31a1bea28197a845d37c37e8",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableDistance.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableDistance.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableDistance.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableDistance.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.optaweb.vehiclerouting.plugin.websocket;\n+package org.optaweb.vehiclerouting.plugin.rest.model;\n \n import java.util.Objects;\n ",
    "previous_filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableDistance.java"
  },
  {
    "sha": "7c78a05e5af781e949e9c7978bde5dca672f429c",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableErrorMessage.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableErrorMessage.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableErrorMessage.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableErrorMessage.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.optaweb.vehiclerouting.plugin.websocket;\n+package org.optaweb.vehiclerouting.plugin.rest.model;\n \n import java.util.Objects;\n \n@@ -28,7 +28,7 @@\n     private final String id;\n     private final String text;\n \n-    static PortableErrorMessage fromMessage(ErrorMessage message) {\n+    public static PortableErrorMessage fromMessage(ErrorMessage message) {\n         return new PortableErrorMessage(message.id, message.text);\n     }\n ",
    "previous_filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableErrorMessage.java"
  },
  {
    "sha": "75082b9711387ce35da6e1e3de00e0fb27677101",
    "filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableLocation.java",
    "status": "renamed",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kiegroup/optaweb-vehicle-routing/blob/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableLocation.java",
    "raw_url": "https://github.com/kiegroup/optaweb-vehicle-routing/raw/371ff1fd46285b1b7a731d21761eda3e652741e4/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableLocation.java",
    "contents_url": "https://api.github.com/repos/kiegroup/optaweb-vehicle-routing/contents/optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/rest/model/PortableLocation.java?ref=371ff1fd46285b1b7a731d21761eda3e652741e4",
    "patch": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.optaweb.vehiclerouting.plugin.websocket;\n+package org.optaweb.vehiclerouting.plugin.rest.model;\n \n import java.math.BigDecimal;\n import java.util.Objects;\n@@ -27,7 +27,7 @@\n /**\n  * {@link Location} representation convenient for marshalling.\n  */\n-class PortableLocation {\n+public class PortableLocation {\n \n     private final long id;\n \n@@ -48,7 +48,7 @@ static PortableLocation fromLocation(Location location) {\n     }\n \n     @JsonCreator\n-    PortableLocation(\n+    public PortableLocation(\n             @JsonProperty(value = \"id\") long id,\n             @JsonProperty(value = \"lat\") BigDecimal latitude,\n             @JsonProperty(value = \"lng\") BigDecimal longitude,",
    "previous_filename": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableLocation.java"
  }
]
