[
  {
    "sha": "e2a675969a2c4f620520ea61dfcaec20f66b9753",
    "filename": "drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/converters/ApiJSInteropConverter.java",
    "status": "modified",
    "additions": 23,
    "deletions": 23,
    "changes": 46,
    "blob_url": "https://github.com/kiegroup/drools-wb/blob/c68bed65d97a78bc6d96a56ed0c96435a0edf802/drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/converters/ApiJSInteropConverter.java",
    "raw_url": "https://github.com/kiegroup/drools-wb/raw/c68bed65d97a78bc6d96a56ed0c96435a0edf802/drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/converters/ApiJSInteropConverter.java",
    "contents_url": "https://api.github.com/repos/kiegroup/drools-wb/contents/drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/converters/ApiJSInteropConverter.java?ref=c68bed65d97a78bc6d96a56ed0c96435a0edf802",
    "patch": "@@ -67,7 +67,7 @@ private ApiJSInteropConverter() {\n     }\n \n     public static JSIScenarioSimulationModelType getJSIScenarioSimulationModelType(ScenarioSimulationModel source) {\n-        JSIScenarioSimulationModelType toReturn = new JSIScenarioSimulationModelType();\n+        JSIScenarioSimulationModelType toReturn = JSIScenarioSimulationModelType.newInstance();\n         toReturn.setVersion(source.getVersion());\n         toReturn.setSettings(getSettings(source.getSettings()));\n         toReturn.setImports(getImports(source.getImports()));\n@@ -77,7 +77,7 @@ public static JSIScenarioSimulationModelType getJSIScenarioSimulationModelType(S\n     }\n \n     protected static JSISettingsType getSettings(Settings source) {\n-        JSISettingsType toReturn = new JSISettingsType();\n+        JSISettingsType toReturn = JSISettingsType.newInstance();\n         toReturn.setDmoSession(source.getDmoSession());\n         toReturn.setType(source.getType().name());\n         toReturn.setFileName(source.getFileName());\n@@ -93,9 +93,9 @@ protected static JSISettingsType getSettings(Settings source) {\n     }\n \n     protected static JSIImportsType getImports(Imports source) {\n-        JSIImportsType toReturn = new JSIImportsType();\n+        JSIImportsType toReturn = JSIImportsType.newInstance();\n         final List<Import> imports = source.getImports();\n-        JSIWrappedImportsType jsiWrappedImportsType = new JSIWrappedImportsType();\n+        JSIWrappedImportsType jsiWrappedImportsType = JSIWrappedImportsType.newInstance();\n         toReturn.setImports(jsiWrappedImportsType);\n         if (imports != null) {\n             List<JSIImportType> toSet = imports.stream().map(ApiJSInteropConverter::getImport).collect(Collectors.toList());\n@@ -105,17 +105,17 @@ protected static JSIImportsType getImports(Imports source) {\n     }\n \n     protected static JSIImportType getImport(Import source) {\n-        JSIImportType toReturn = new JSIImportType();\n+        JSIImportType toReturn = JSIImportType.newInstance();\n         toReturn.setType(source.getType());\n         return toReturn;\n     }\n \n     protected static JSISimulationType getSimulation(Simulation source) {\n-        JSISimulationType toReturn = new JSISimulationType();\n+        JSISimulationType toReturn = JSISimulationType.newInstance();\n         JSIScesimModelDescriptorType jsiScesimModelDescriptorType = getScesimModelDescriptor(source.getScesimModelDescriptor());\n         toReturn.setScesimModelDescriptor(jsiScesimModelDescriptorType);\n         final List<Scenario> unmodifiableScenarios = source.getUnmodifiableData();\n-        JSIScenariosType jsiScenariosType = new JSIScenariosType();\n+        JSIScenariosType jsiScenariosType = JSIScenariosType.newInstance();\n         toReturn.setScesimData(jsiScenariosType);\n         List<JSIScenarioType> toSet = unmodifiableScenarios.stream()\n                 .map(ApiJSInteropConverter::getScenario).collect(Collectors.toList());\n@@ -124,8 +124,8 @@ protected static JSISimulationType getSimulation(Simulation source) {\n     }\n \n     protected static JSIScenarioType getScenario(Scenario source) {\n-        JSIScenarioType toReturn = new JSIScenarioType();\n-        JSIFactMappingValuesType factMappingValuesType = new JSIFactMappingValuesType();\n+        JSIScenarioType toReturn = JSIScenarioType.newInstance();\n+        JSIFactMappingValuesType factMappingValuesType = JSIFactMappingValuesType.newInstance();\n         toReturn.setFactMappingValues(factMappingValuesType);\n         final List<FactMappingValue> unmodifiableFactMappingValues = source.getUnmodifiableFactMappingValues();\n         List<JSIFactMappingValueType> toSet = populateJSIFactMappingValuesType(unmodifiableFactMappingValues);\n@@ -134,11 +134,11 @@ protected static JSIScenarioType getScenario(Scenario source) {\n     }\n \n     protected static JSIBackgroundType getBackground(Background source) {\n-        JSIBackgroundType toReturn = new JSIBackgroundType();\n+        JSIBackgroundType toReturn = JSIBackgroundType.newInstance();\n         JSIScesimModelDescriptorType jsiScesimModelDescriptorType = getScesimModelDescriptor(source.getScesimModelDescriptor());\n         toReturn.setScesimModelDescriptor(jsiScesimModelDescriptorType);\n         final List<BackgroundData> unmodifiableBackgroundDatas = source.getUnmodifiableData();\n-        JSIBackgroundDatasType jsiBackgroundDatasType = new JSIBackgroundDatasType();\n+        JSIBackgroundDatasType jsiBackgroundDatasType = JSIBackgroundDatasType.newInstance();\n         toReturn.setScesimData(jsiBackgroundDatasType);\n         List<JSIBackgroundDataType> toSet = unmodifiableBackgroundDatas.stream()\n                 .map(ApiJSInteropConverter::getBackgroundData).collect(Collectors.toList());\n@@ -147,8 +147,8 @@ protected static JSIBackgroundType getBackground(Background source) {\n     }\n \n     protected static JSIBackgroundDataType getBackgroundData(BackgroundData source) {\n-        JSIBackgroundDataType toReturn = new JSIBackgroundDataType();\n-        JSIFactMappingValuesType factMappingValuesType = new JSIFactMappingValuesType();\n+        JSIBackgroundDataType toReturn = JSIBackgroundDataType.newInstance();\n+        JSIFactMappingValuesType factMappingValuesType = JSIFactMappingValuesType.newInstance();\n         toReturn.setFactMappingValues(factMappingValuesType);\n         final List<FactMappingValue> unmodifiableFactMappingValues = source.getUnmodifiableFactMappingValues();\n         List<JSIFactMappingValueType> toSet = populateJSIFactMappingValuesType(unmodifiableFactMappingValues);\n@@ -166,9 +166,9 @@ protected static JSIBackgroundDataType getBackgroundData(BackgroundData source)\n     }\n \n     protected static JSIScesimModelDescriptorType getScesimModelDescriptor(ScesimModelDescriptor source) {\n-        JSIScesimModelDescriptorType toReturn = new JSIScesimModelDescriptorType();\n+        JSIScesimModelDescriptorType toReturn = JSIScesimModelDescriptorType.newInstance();\n         final List<FactMapping> factMappings = source.getFactMappings();\n-        JSIFactMappingsType jsiFactMappingsType = new JSIFactMappingsType();\n+        JSIFactMappingsType jsiFactMappingsType = JSIFactMappingsType.newInstance();\n         toReturn.setFactMappings(jsiFactMappingsType);\n         List<JSIFactMappingType> toSet = factMappings.stream()\n                 .map(ApiJSInteropConverter::getFactMapping).collect(Collectors.toList());\n@@ -177,7 +177,7 @@ protected static JSIScesimModelDescriptorType getScesimModelDescriptor(ScesimMod\n     }\n \n     protected static JSIFactMappingValueType getFactMappingValue(FactMappingValue source) {\n-        JSIFactMappingValueType toReturn = new JSIFactMappingValueType();\n+        JSIFactMappingValueType toReturn = JSIFactMappingValueType.newInstance();\n         final JSIExpressionIdentifierType expressionIdentifierType = Js.uncheckedCast(getExpressionIdentifier(source.getExpressionIdentifier()));\n         toReturn.setExpressionIdentifier(expressionIdentifierType);\n         final JSIFactIdentifierType jsiFactIdentifierReferenceType = Js.uncheckedCast(getFactIdentifier(source.getFactIdentifier()));\n@@ -191,14 +191,14 @@ protected static JSIFactMappingValueType getFactMappingValue(FactMappingValue so\n     }\n \n     protected static JSIRawValueType getRawValueReference(Object rawValue) {\n-        JSIRawValueType toReturn = new JSIRawValueType();\n+        JSIRawValueType toReturn = JSIRawValueType.newInstance();\n         toReturn.setClazz(\"string\");\n         toReturn.setValue(rawValue.toString());\n         return toReturn;\n     }\n \n     protected static JSIFactMappingType getFactMapping(FactMapping source) {\n-        JSIFactMappingType toReturn = new JSIFactMappingType();\n+        JSIFactMappingType toReturn = JSIFactMappingType.newInstance();\n         toReturn.setClassName(source.getClassName());\n         toReturn.setExpressionAlias(source.getExpressionAlias());\n         JSIExpressionElementsType jsiExpressionElementsType = Js.uncheckedCast(getExpressionElements(source.getExpressionElements()));\n@@ -212,36 +212,36 @@ protected static JSIFactMappingType getFactMapping(FactMapping source) {\n         toReturn.setColumnWidth(source.getColumnWidth());\n         List<String> genericTypes = source.getGenericTypes();\n         if (genericTypes != null) {\n-            JSIGenericTypes toSet = new JSIGenericTypes();\n+            JSIGenericTypes toSet = JSIGenericTypes.newInstance();\n             toSet.setString(genericTypes);\n             toReturn.setGenericTypes(toSet);\n         }\n         return toReturn;\n     }\n \n     protected static JSIExpressionElementsType getExpressionElements(List<ExpressionElement> expressionElements) {\n-        JSIExpressionElementsType toReturn = new JSIExpressionElementsType();\n+        JSIExpressionElementsType toReturn = JSIExpressionElementsType.newInstance();\n         List<JSIExpressionElementType> toSet = expressionElements.stream()\n                 .map(ApiJSInteropConverter::getExpressionElement).collect(Collectors.toList());\n         toReturn.setExpressionElement(toSet);\n         return toReturn;\n     }\n \n     protected static JSIExpressionElementType getExpressionElement(ExpressionElement expressionElement) {\n-        JSIExpressionElementType toReturn = new JSIExpressionElementType();\n+        JSIExpressionElementType toReturn = JSIExpressionElementType.newInstance();\n         toReturn.setStep(expressionElement.getStep());\n         return toReturn;\n     }\n \n     protected static JSIExpressionIdentifierType getExpressionIdentifier(ExpressionIdentifier source) {\n-        JSIExpressionIdentifierType toReturn = new JSIExpressionIdentifierType();\n+        JSIExpressionIdentifierType toReturn = JSIExpressionIdentifierType.newInstance();\n         toReturn.setName(source.getName());\n         toReturn.setType(source.getType().name());\n         return toReturn;\n     }\n \n     protected static JSIFactIdentifierType getFactIdentifier(FactIdentifier factIdentifier) {\n-        JSIFactIdentifierType toReturn = new JSIFactIdentifierType();\n+        JSIFactIdentifierType toReturn = JSIFactIdentifierType.newInstance();\n         toReturn.setName(factIdentifier.getName());\n         toReturn.setClassName(factIdentifier.getClassName());\n         return toReturn;"
  },
  {
    "sha": "732e1c67a08ed6d60f5f8395de0a4dc2cb616eba",
    "filename": "drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/editor/ScenarioSimulationEditorKogitoWrapper.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/kiegroup/drools-wb/blob/c68bed65d97a78bc6d96a56ed0c96435a0edf802/drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/editor/ScenarioSimulationEditorKogitoWrapper.java",
    "raw_url": "https://github.com/kiegroup/drools-wb/raw/c68bed65d97a78bc6d96a56ed0c96435a0edf802/drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/editor/ScenarioSimulationEditorKogitoWrapper.java",
    "contents_url": "https://api.github.com/repos/kiegroup/drools-wb/contents/drools-wb-screens/drools-wb-scenario-simulation-editor/drools-wb-scenario-simulation-editor-kogito-client/src/main/java/org/drools/workbench/screens/scenariosimulation/kogito/client/editor/ScenarioSimulationEditorKogitoWrapper.java?ref=c68bed65d97a78bc6d96a56ed0c96435a0edf802",
    "patch": "@@ -64,7 +64,6 @@\n import org.jboss.errai.common.client.api.ErrorCallback;\n import org.jboss.errai.common.client.api.RemoteCallback;\n import org.jboss.errai.ui.client.local.spi.TranslationService;\n-import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.MainJs;\n import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITDefinitions;\n import org.kie.workbench.common.kogito.client.editor.MultiPageEditorContainerPresenter;\n import org.kie.workbench.common.kogito.client.editor.MultiPageEditorContainerView;\n@@ -335,8 +334,6 @@ public void onStartup(final PlaceRequest place) {\n         super.init(place);\n         resetEditorPages();\n         authoringWorkbenchDocks.setup(\"AuthoringPerspective\", place);\n-        SCESIMMainJs.initializeJsInteropConstructors(SCESIMMainJs.getConstructorsMap());\n-        MainJs.initializeJsInteropConstructors(MainJs.getConstructorsMap());\n         scenarioSimulationEditorPresenter.setWrapper(this);\n     }\n "
  }
]
