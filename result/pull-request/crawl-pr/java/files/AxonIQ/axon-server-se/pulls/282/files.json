[
  {
    "sha": "ff0964b188c5e445c46072e6cdb09719ddfc52a5",
    "filename": "axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/AppendOnlyList.java",
    "status": "modified",
    "additions": 20,
    "deletions": 22,
    "changes": 42,
    "blob_url": "https://github.com/AxonIQ/axon-server-se/blob/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/AppendOnlyList.java",
    "raw_url": "https://github.com/AxonIQ/axon-server-se/raw/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/AppendOnlyList.java",
    "contents_url": "https://api.github.com/repos/AxonIQ/axon-server-se/contents/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/AppendOnlyList.java?ref=f062605185b8d9427ac423a346ed1db606efaccc",
    "patch": "@@ -10,12 +10,9 @@\n package io.axoniq.axonserver.localstorage.file;\n \n import java.util.AbstractList;\n-import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Predicate;\n@@ -37,10 +34,10 @@\n     private final AtomicInteger size = new AtomicInteger();\n     private final AtomicReference<Node<T>> last = new AtomicReference<>();\n \n-    public AppendOnlyList(List<T> values) {\n+    public AppendOnlyList(T[] values) {\n         head = new Node<>(values);\n         last.set(head);\n-        size.set(values.size());\n+        size.set(values.length);\n     }\n \n     @Override\n@@ -94,8 +91,7 @@ public boolean removeIf(Predicate<? super T> filter) {\n     }\n \n     public T last() {\n-        List<? extends T> lastValues = last.get().values;\n-        return lastValues.get(lastValues.size() - 1);\n+        return last.get().last();\n     }\n \n     public boolean isEmpty() {\n@@ -145,14 +141,16 @@ public int size() {\n \n     @Override\n     public boolean addAll(Collection<? extends T> values) {\n-        last.updateAndGet(l -> l.add(values));\n+        last.updateAndGet(l -> l.add(values.toArray()));\n         size.addAndGet(values.size());\n         return true;\n     }\n \n     @Override\n     public boolean add(T value) {\n-        return addAll(Collections.singletonList(value));\n+        last.updateAndGet(l -> l.add(new Object[]{value}));\n+        size.incrementAndGet();\n+        return true;\n     }\n \n     @Override\n@@ -173,31 +171,31 @@ public T get(int index) {\n \n     private static class Node<T> {\n \n-        private final List<? extends T> values;\n+        private final Object[] values;\n         private Node<T> next;\n \n-        private Node(List<? extends T> values) {\n+        private Node(Object[] values) {\n             this.values = values;\n         }\n \n-        private Node<T> add(Collection<? extends T> values) {\n-            this.next = new Node<>(asList(values));\n+        private Node add(Object[] values) {\n+            this.next = new Node(values);\n             return this.next;\n         }\n \n-        private List<? extends T> asList(Collection<? extends T> values) {\n-            if (values instanceof List) {\n-                return (List<? extends T>) values;\n-            }\n-            return new ArrayList<>(values);\n-        }\n-\n         public int size() {\n-            return values.size();\n+            return values.length;\n         }\n \n         public T get(int index) {\n-            return values.get(index);\n+            return (T) values[index];\n+        }\n+\n+        public T last() {\n+            if (values.length == 0) {\n+                return null;\n+            }\n+            return (T) values[values.length - 1];\n         }\n     }\n }"
  },
  {
    "sha": "75c909ee0afb122abd226a75990e8992b4177a29",
    "filename": "axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntries.java",
    "status": "modified",
    "additions": 11,
    "deletions": 5,
    "changes": 16,
    "blob_url": "https://github.com/AxonIQ/axon-server-se/blob/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntries.java",
    "raw_url": "https://github.com/AxonIQ/axon-server-se/raw/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntries.java",
    "contents_url": "https://api.github.com/repos/AxonIQ/axon-server-se/contents/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntries.java?ref=f062605185b8d9427ac423a346ed1db606efaccc",
    "patch": "@@ -10,7 +10,6 @@\n package io.axoniq.axonserver.localstorage.file;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n /**\n@@ -29,15 +28,16 @@\n      * @param firstSequenceNumber first sequence number\n      */\n     public StandardIndexEntries(long firstSequenceNumber) {\n-        this(firstSequenceNumber, Collections.emptyList());\n+        this(firstSequenceNumber, new Integer[0]);\n     }\n \n     /**\n      * Initializes the object with given entries and {@code firstSequenceNumber}.\n+     *\n      * @param firstSequenceNumber first sequence number\n-     * @param entries the positions of the aggregate\n+     * @param entries             the positions of the aggregate\n      */\n-    public StandardIndexEntries(long firstSequenceNumber, List<Integer> entries) {\n+    public StandardIndexEntries(long firstSequenceNumber, Integer[] entries) {\n         this.entries = new AppendOnlyList<>(entries);\n         this.firstSequenceNumber = firstSequenceNumber;\n     }\n@@ -72,6 +72,11 @@ public IndexEntries range(long minSequenceNumber, long maxSequenceNumber, boolea\n         if (snapshot) {\n             return this;\n         }\n+\n+        if (minSequenceNumber <= firstSequenceNumber && maxSequenceNumber >= firstSequenceNumber + size()) {\n+            return this;\n+        }\n+\n         List<Integer> reducedEntries = new ArrayList<>();\n         long i = firstSequenceNumber;\n         for (Integer entry : entries) {\n@@ -80,7 +85,8 @@ public IndexEntries range(long minSequenceNumber, long maxSequenceNumber, boolea\n             }\n             i++;\n         }\n-        return new StandardIndexEntries(Math.max(minSequenceNumber, firstSequenceNumber), reducedEntries);\n+        return new StandardIndexEntries(Math.max(minSequenceNumber, firstSequenceNumber),\n+                                        reducedEntries.toArray(new Integer[0]));\n     }\n \n     /**"
  },
  {
    "sha": "e2d51a53f81246611fa9197794e581e2e87f7341",
    "filename": "axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesSerializer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/AxonIQ/axon-server-se/blob/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesSerializer.java",
    "raw_url": "https://github.com/AxonIQ/axon-server-se/raw/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesSerializer.java",
    "contents_url": "https://api.github.com/repos/AxonIQ/axon-server-se/contents/axonserver/src/main/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesSerializer.java?ref=f062605185b8d9427ac423a346ed1db606efaccc",
    "patch": "@@ -14,8 +14,6 @@\n import org.mapdb.Serializer;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n import javax.annotation.Nonnull;\n \n /**\n@@ -66,9 +64,9 @@ public void serialize(@Nonnull DataOutput2 out, @Nonnull IndexEntries value) thr\n     public IndexEntries deserialize(@Nonnull DataInput2 input, int available) throws IOException {\n         int count = input.unpackInt();\n         long sequenceNumber = input.unpackLong();\n-        List<Integer> entries = new ArrayList<>(count);\n+        Integer[] entries = new Integer[count];\n         for (int i = 0; i < count; i++) {\n-            entries.add(input.unpackInt());\n+            entries[i] = input.unpackInt();\n         }\n         return new StandardIndexEntries(sequenceNumber, entries);\n     }"
  },
  {
    "sha": "5e85c7e965b66db3bf2b9231c904808f80707454",
    "filename": "axonserver/src/test/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/AxonIQ/axon-server-se/blob/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/test/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesTest.java",
    "raw_url": "https://github.com/AxonIQ/axon-server-se/raw/f062605185b8d9427ac423a346ed1db606efaccc/axonserver/src/test/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesTest.java",
    "contents_url": "https://api.github.com/repos/AxonIQ/axon-server-se/contents/axonserver/src/test/java/io/axoniq/axonserver/localstorage/file/StandardIndexEntriesTest.java?ref=f062605185b8d9427ac423a346ed1db606efaccc",
    "patch": "@@ -4,7 +4,6 @@\n import org.junit.*;\n \n import java.util.Collections;\n-import java.util.LinkedList;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -23,8 +22,7 @@\n \n     @Test\n     public void testRangeDuringWriting() throws InterruptedException {\n-        LinkedList<Integer> list = new LinkedList<>();\n-        StandardIndexEntries testSubject = new StandardIndexEntries(0, list);\n+        StandardIndexEntries testSubject = new StandardIndexEntries(0);\n         AtomicBoolean running = new AtomicBoolean(true);\n         AtomicInteger counter = new AtomicInteger(0);\n         CountDownLatch started = new CountDownLatch(1);\n@@ -47,7 +45,6 @@ public void testRangeDuringWriting() throws InterruptedException {\n                 assertEquals(expectedPosition, position);\n                 expectedPosition = expectedPosition + 1;\n             }\n-            System.out.println(expectedPosition);\n         }\n         running.set(false);\n     }\n@@ -68,4 +65,11 @@ public void addAndLoopPerformance() {\n         Assert.assertEquals(1998, (int) standardIndexEntries.positions().get(1998));\n         Assert.assertEquals(4000, (int) standardIndexEntries.positions().get(4000));\n     }\n+\n+    @Test\n+    public void range() {\n+        StandardIndexEntries standardIndexEntries = new StandardIndexEntries(10, new Integer[]{0, 1, 2, 3, 4, 5, 6});\n+        IndexEntries subset = standardIndexEntries.range(11, 14, false);\n+        assertEquals(3, subset.size());\n+    }\n }\n\\ No newline at end of file"
  }
]
