[
  {
    "sha": "faef5b0f2f0558a16a0a6c8ce48c6425708f2511",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/pom.xml",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/pom.xml",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/pom.xml?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -31,11 +31,10 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-devtools</artifactId>\n-            <scope>runtime</scope>\n-            <optional>true</optional>\n+            <groupId>org.flywaydb</groupId>\n+            <artifactId>flyway-core</artifactId>\n         </dependency>\n+\n         <dependency>\n             <groupId>com.h2database</groupId>\n             <artifactId>h2</artifactId>"
  },
  {
    "sha": "916c1cb51d74532064acaea2e8ef7ffa6ea3e2ec",
    "filename": "src/main/java/ru/geekbrains/spring/controller/BasketController.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/controller/BasketController.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/controller/BasketController.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/controller/BasketController.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,30 @@\n+package ru.geekbrains.spring.controller;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.spring.model.ProductIntoBasket;\n+import ru.geekbrains.spring.services.BasketService;\n+\n+import java.util.List;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/basket\")\n+public class BasketController {\n+\n+    @Autowired\n+    BasketService basketService;\n+\n+    @GetMapping\n+    public List<ProductIntoBasket> getAll(){\n+       return basketService.getAll();\n+    }\n+\n+    @DeleteMapping(\"/{id}\")\n+    public int deleteProductFromBasket (@PathVariable Long id){\n+        basketService.delete(id);\n+        return HttpStatus.OK.value();\n+    }\n+\n+\n+}"
  },
  {
    "sha": "648cce1fe5ec980c834db1c3d37886bca60a87a0",
    "filename": "src/main/java/ru/geekbrains/spring/controller/ProductController.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/controller/ProductController.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/controller/ProductController.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,98 @@\n+package ru.geekbrains.spring.controller;\n+\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.spring.model.Product;\n+import ru.geekbrains.spring.model.ProductDto;\n+import ru.geekbrains.spring.model.SortDir;\n+import ru.geekbrains.spring.services.ProductService;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/products\")\n+public class ProductController {\n+\n+    @Autowired\n+    private ProductService productService;\n+\n+    @GetMapping()\n+    public Page<ProductDto> getAll(@RequestParam(defaultValue = \"0\") Integer page,\n+                                @RequestParam(defaultValue = \"10\") Integer size,\n+                                @RequestParam(required = false)SortDir sortName,\n+                                @RequestParam(required = false)SortDir sortCost\n+                                )  {\n+        Page<ProductDto> products;\n+        if(page < 0 || size < 0 ){\n+          //  return error(\" Введены неверные значения \");\n+\n+        }\n+        if( (products = productService.getAll(page,size,sortName,sortCost)).toList().size() == 0){\n+          //  return error(\" Товары закончились \");\n+            return products;\n+        }\n+        else {\n+            return products;\n+        }\n+    }\n+\n+    /*@GetMapping(\"/err\")\n+    public Page<Product> error(String msg){\n+        List <Product> errList = new ArrayList<>();\n+        Product err = new Product();\n+        err.setName(msg);\n+        err.setCost(555);\n+        errList.add(err);\n+        return errList;\n+    }*/\n+\n+    @GetMapping(\"/{id}\")\n+    public ProductDto getProductById(@PathVariable Long id){\n+        return (productService.getId(id)).convertToDto();\n+    }\n+\n+    @PostMapping\n+    public ProductDto addProduct(@RequestBody ProductDto productDto){\n+        Product product = productDto.convertToProduct();\n+        return (productService.saveOrUpdate(product)).convertToDto();\n+    }\n+\n+    @PutMapping\n+    public ProductDto updateProduct(@RequestParam ProductDto productDto){\n+        Product product = productDto.convertToProduct();\n+        return (productService.saveOrUpdate(product)).convertToDto();\n+    }\n+\n+\n+    @DeleteMapping(\"/{id}\")\n+    public int deleteProduct(@PathVariable Long id){\n+        productService.delete(id);\n+        return HttpStatus.OK.value();\n+    }\n+\n+    @GetMapping(\"/findLess\")\n+    public List<Product> findLessThan(@RequestParam int max){\n+        return productService.findLessThan(max);\n+    }\n+\n+    @GetMapping(\"/findGreater\")\n+    public List<Product> findGreaterThan(@RequestParam int min){\n+        return productService.findGreaterThan(min);\n+    }\n+\n+    @GetMapping(\"/findBetween\")\n+    public List<Product> findBetween(@RequestParam int min, @RequestParam int max){\n+        return productService.findBetween(min, max);\n+    }\n+\n+    @GetMapping(\"/findName\")\n+    public List<Product> findName(@RequestParam String name){\n+        return productService.findNameStart(name);\n+    }\n+\n+}"
  },
  {
    "sha": "b1f6bde686f02ca70cec0132c6e532714a7fa22d",
    "filename": "src/main/java/ru/geekbrains/spring/model/Product.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/Product.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/Product.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/model/Product.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,65 @@\n+package ru.geekbrains.spring.model;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name = \"products\")\n+public class Product {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"cost\")\n+    private int cost;\n+\n+    public Product() {\n+    }\n+\n+    public Product(String name, int cost) {\n+        this.name = name;\n+        this.cost = cost;\n+    }\n+\n+    public ProductDto convertToDto(){\n+        ProductDto productDto = new ProductDto(this);\n+        return productDto;\n+    }\n+\n+    public ProductIntoBasket convertToProductIntoBasket(){\n+        ProductIntoBasket productIntoBasket = new ProductIntoBasket();\n+        productIntoBasket.setName(this.getName());\n+        productIntoBasket.setCost(this.getCost());\n+        return productIntoBasket;\n+    }\n+\n+\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getCost() {\n+        return cost;\n+    }\n+\n+    public void setCost(int cost) {\n+        this.cost = cost;\n+    }\n+}"
  },
  {
    "sha": "e84941707d39c8dc197105aeedbd41071d4f9994",
    "filename": "src/main/java/ru/geekbrains/spring/model/ProductDto.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/ProductDto.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/ProductDto.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/model/ProductDto.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,56 @@\n+package ru.geekbrains.spring.model;\n+\n+\n+\n+public class ProductDto {\n+    private Long id;\n+    private String name;\n+    private int cost;\n+\n+    public ProductDto(Product product) {\n+        this.id = product.getId();\n+        this.name = product.getName();\n+        this.cost = product.getCost();\n+    }\n+\n+    public ProductDto(){\n+\n+    }\n+\n+    /*public ProductDto(){\n+\n+    }*/\n+\n+    public Product convertToProduct(){\n+        Product product =new Product();\n+        product.setName(this.getName());\n+        product.setCost(this.getCost());\n+        return product;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getCost() {\n+        return cost;\n+    }\n+\n+    public void setCost(int cost) {\n+        this.cost = cost;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "e16838f465166f4567cc4eb81388216c8d24133f",
    "filename": "src/main/java/ru/geekbrains/spring/model/ProductIntoBasket.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/ProductIntoBasket.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/ProductIntoBasket.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/model/ProductIntoBasket.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.geekbrains.spring.model;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name = \"productsintobasket\")\n+public class ProductIntoBasket extends Product{\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"cost\")\n+    private int cost;\n+\n+    public ProductIntoBasket() {\n+    }\n+\n+\n+    public ProductIntoBasket(String name, int cost) {\n+        this.name = name;\n+        this.cost = cost;\n+    }\n+\n+    public Product convertToProduct(){\n+        Product product = new Product();\n+        product.setName(this.getName());\n+        product.setCost(this.getCost());\n+        return product;\n+    }\n+\n+}"
  },
  {
    "sha": "ac4a1e0372d21c84f1f8002f1759c31e34ee2474",
    "filename": "src/main/java/ru/geekbrains/spring/model/SortDir.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/SortDir.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/model/SortDir.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/model/SortDir.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,5 @@\n+package ru.geekbrains.spring.model;\n+\n+public enum SortDir {\n+    ASC, DESC\n+}"
  },
  {
    "sha": "dce723e4d7cb5db84abd84e50aaab67f2f8b1c2e",
    "filename": "src/main/java/ru/geekbrains/spring/repository/BasketRepo.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/repository/BasketRepo.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/repository/BasketRepo.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/repository/BasketRepo.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.geekbrains.spring.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import ru.geekbrains.spring.model.ProductIntoBasket;\n+\n+public interface BasketRepo extends JpaRepository<ProductIntoBasket, Long> {\n+}"
  },
  {
    "sha": "f77aa7e09179064a0412a5788a690d9a71a534dd",
    "filename": "src/main/java/ru/geekbrains/spring/repository/ProductRepo.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/repository/ProductRepo.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/repository/ProductRepo.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/repository/ProductRepo.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.geekbrains.spring.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.geekbrains.spring.model.Product;\n+\n+import java.util.List;\n+\n+@Repository\n+public interface ProductRepo extends JpaRepository<Product, Long> {\n+\n+\n+    List<Product> findProductsByCostLessThan(int max);\n+    List<Product> findProductsByCostGreaterThan(int min);\n+    List<Product>findProductsByCostBetween(int min, int max);\n+    List<Product> findProductsByNameStartsWith(String name);\n+\n+}"
  },
  {
    "sha": "7e711e88c770f62eebc1a967d9cb09e1f15bb977",
    "filename": "src/main/java/ru/geekbrains/spring/services/BasketService.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/services/BasketService.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/services/BasketService.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/services/BasketService.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,43 @@\n+package ru.geekbrains.spring.services;\n+\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.stereotype.Service;\n+import ru.geekbrains.spring.model.Product;\n+import ru.geekbrains.spring.model.ProductIntoBasket;\n+import ru.geekbrains.spring.repository.BasketRepo;\n+import ru.geekbrains.spring.repository.ProductRepo;\n+\n+import java.util.List;\n+\n+@Service\n+public class BasketService {\n+\n+   @Autowired\n+   BasketRepo basketRepo;\n+\n+   @Autowired\n+    ProductService productService;\n+\n+    public List<ProductIntoBasket> getAll (){\n+        List<ProductIntoBasket> product = null;\n+        product = basketRepo.findAll(Sort.by(\"name\").ascending());\n+        return product;\n+    }\n+\n+    public ProductIntoBasket getId(Long id){\n+        return basketRepo.findById(id).get();\n+    }\n+\n+    public void delete(Long id){\n+        productService.saveOrUpdate(getId(id).convertToProduct());\n+        basketRepo.deleteById(id);\n+    }\n+\n+    public ProductIntoBasket saveOrUpdate(Product product){\n+        return basketRepo.save(product.convertToProductIntoBasket());\n+    }\n+\n+\n+}"
  },
  {
    "sha": "10f48b873a6691b2d504404a2b68e699c8ff32d7",
    "filename": "src/main/java/ru/geekbrains/spring/services/ProductService.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/services/ProductService.java",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/java/ru/geekbrains/spring/services/ProductService.java",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/java/ru/geekbrains/spring/services/ProductService.java?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,102 @@\n+package ru.geekbrains.spring.services;\n+\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.geekbrains.spring.model.Product;\n+import ru.geekbrains.spring.model.ProductDto;\n+import ru.geekbrains.spring.model.SortDir;\n+import ru.geekbrains.spring.repository.ProductRepo;\n+\n+import java.util.List;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class ProductService {\n+\n+    @Autowired\n+    private ProductRepo productRepo;\n+\n+    @Autowired\n+    private BasketService basketService;\n+\n+    @Transactional\n+    public Page<ProductDto> getAll(int page, int size, SortDir sortName, SortDir sortCost){\n+\n+        Page<ProductDto> products = null;\n+            if(sortName == null && sortCost == null){\n+                products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"cost\").ascending())).map(ProductDto::new);\n+        }\n+            if(sortName != null && sortCost == null){\n+                if (sortName == SortDir.ASC){\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"name\").ascending())).map(ProductDto::new);\n+                }else {\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"name\").descending())).map(ProductDto::new);\n+                }\n+            }\n+            if(sortName == null && sortCost != null){\n+                if (sortCost == SortDir.ASC){\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"cost\").ascending())).map(ProductDto::new);\n+                }else {\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"cost\").descending())).map(ProductDto::new);\n+                }\n+            }\n+            if(sortName != null && sortCost != null){\n+                if(sortName == SortDir.ASC && sortCost == SortDir.ASC){\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"cost\").ascending().and(Sort.by(\"name\").ascending()))).map(ProductDto::new);\n+                }\n+                if(sortName == SortDir.DESC && sortCost == SortDir.ASC){\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"cost\").ascending().and(Sort.by(\"name\").descending()))).map(ProductDto::new);\n+                }\n+                if(sortName == SortDir.ASC && sortCost == SortDir.DESC){\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"cost\").descending().and(Sort.by(\"name\").ascending()))).map(ProductDto::new);\n+                }\n+                if(sortName == SortDir.DESC && sortCost == SortDir.DESC){\n+                    products = productRepo.findAll(PageRequest.of(page,size, Sort.by(\"cost\").descending().and(Sort.by(\"name\").descending()))).map(ProductDto::new);\n+                }\n+            }\n+            return products;\n+    }\n+\n+    public Product getId(Long id){\n+        return productRepo.findById(id).get();\n+    }\n+\n+    public Product saveOrUpdate(Product product){\n+        return productRepo.save(product);\n+    }\n+\n+\n+    public void delete(Long id){\n+        productRepo.deleteById(id);\n+    }\n+\n+    public void buy(Long id){\n+        basketService.saveOrUpdate(getId(id));\n+        delete(id);\n+    }\n+\n+\n+    public List<Product> findLessThan(int max){\n+        return productRepo.findProductsByCostLessThan(max);\n+    }\n+\n+    public List<Product> findGreaterThan(int min){\n+        return productRepo.findProductsByCostGreaterThan(min);\n+    }\n+\n+    public List<Product>findBetween(int min, int max){\n+        return productRepo.findProductsByCostBetween(min,max);\n+    }\n+\n+    public List<Product>findNameStart(String name){\n+        return productRepo.findProductsByNameStartsWith(name);\n+    }\n+\n+}"
  },
  {
    "sha": "8b137891791fe96927ad78e64b0aad7bded08bdc",
    "filename": "src/main/resources/application.properties",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/dbdbe99d47c7851a6217c715761cc67c55ada67a/src/main/resources/application.properties",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/dbdbe99d47c7851a6217c715761cc67c55ada67a/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/resources/application.properties?ref=dbdbe99d47c7851a6217c715761cc67c55ada67a",
    "patch": "@@ -1 +0,0 @@\n-"
  },
  {
    "sha": "7704189e1a58a59db47c13ea9c5badd28b7e31cc",
    "filename": "src/main/resources/application.yaml",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/resources/application.yaml",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/resources/application.yaml?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,18 @@\n+server:\n+  port: 8189\n+  servlet:\n+    context-path: /spring\n+spring:\n+  datasource:\n+    driver-class-name: org.h2.Driver\n+    url: jdbc:h2:mem:mydatabase;MODE=PostgreSQL\n+    username: pk\n+    password:\n+  jpa:\n+    show-sql: true\n+    properties:\n+      hibernate:\n+        dialect: org.hibernate.dialect.H2Dialect\n+  h2:\n+    console:\n+      enabled: true"
  },
  {
    "sha": "48fd8f00a7dcdba14f9c26f187963453ab24097c",
    "filename": "src/main/resources/db/migration/V1__init.sql",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/KirillYrevichPushkin/springREST/blob/3434ac0cd2a15931e5220110894be47bb088f150/src/main/resources/db/migration/V1__init.sql",
    "raw_url": "https://github.com/KirillYrevichPushkin/springREST/raw/3434ac0cd2a15931e5220110894be47bb088f150/src/main/resources/db/migration/V1__init.sql",
    "contents_url": "https://api.github.com/repos/KirillYrevichPushkin/springREST/contents/src/main/resources/db/migration/V1__init.sql?ref=3434ac0cd2a15931e5220110894be47bb088f150",
    "patch": "@@ -0,0 +1,33 @@\n+create table products (id bigserial primary key, name varchar(255), cost int);\n+insert into products (name, cost) values\n+('Potato', 80),\n+('Potato', 82),\n+('Potato', 85),\n+('Orange', 10),\n+('Onion', 99),\n+('Pizza', 50),\n+('Chicken', 75),\n+('Cucumber', 26),\n+('Pepper', 74),\n+('Lemon', 80),\n+('Banana', 21),\n+('Sandwich', 92),\n+('Grapes', 54),\n+('Salad', 80),\n+('Melon', 73),\n+('Avocado', 37),\n+('Egg', 86),\n+('Bread', 52),\n+('Bread', 55),\n+('Bread', 58),\n+('Bread', 61),\n+('Rice', 52),\n+('cookie', 96),\n+('Tomato', 42),\n+('Corn', 35),\n+('Cake', 87),\n+('Salt', 12),\n+('Apple', 52),\n+('Meat', 56),\n+('Cheese', 88);\n+create table productsintobasket (id bigserial primary key, name varchar(255), cost int);\n\\ No newline at end of file"
  }
]
