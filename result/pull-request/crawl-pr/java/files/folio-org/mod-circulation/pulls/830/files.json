[
  {
    "sha": "c20895a8a5e2493fc419af5bc699c1e29707055f",
    "filename": "src/test/java/api/requests/scenarios/LoanDueDatesAfterRecallTests.java",
    "status": "modified",
    "additions": 20,
    "deletions": 23,
    "changes": 43,
    "blob_url": "https://github.com/folio-org/mod-circulation/blob/22d1b8431f445aaad3ca81f7d27a93039fa515ad/src/test/java/api/requests/scenarios/LoanDueDatesAfterRecallTests.java",
    "raw_url": "https://github.com/folio-org/mod-circulation/raw/22d1b8431f445aaad3ca81f7d27a93039fa515ad/src/test/java/api/requests/scenarios/LoanDueDatesAfterRecallTests.java",
    "contents_url": "https://api.github.com/repos/folio-org/mod-circulation/contents/src/test/java/api/requests/scenarios/LoanDueDatesAfterRecallTests.java?ref=22d1b8431f445aaad3ca81f7d27a93039fa515ad",
    "patch": "@@ -8,8 +8,12 @@\n import static api.support.matchers.TextDateTimeMatcher.isEquivalentTo;\n import static api.support.matchers.TextDateTimeMatcher.withinSecondsBefore;\n import static java.lang.Boolean.TRUE;\n+import static java.time.Clock.fixed;\n+import static java.time.Clock.offset;\n+import static java.time.Duration.ofDays;\n import static org.folio.circulation.domain.policy.DueDateManagement.KEEP_THE_CURRENT_DUE_DATE;\n import static org.folio.circulation.domain.policy.library.ClosedLibraryStrategyUtils.END_OF_A_DAY;\n+import static org.folio.circulation.support.ClockManager.getClockManager;\n import static org.hamcrest.CoreMatchers.allOf;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.not;\n@@ -22,17 +26,16 @@\n import java.time.Clock;\n import java.time.Duration;\n import java.time.Instant;\n+import java.time.ZoneId;\n import java.time.ZoneOffset;\n import java.util.UUID;\n \n import org.folio.circulation.domain.policy.DueDateManagement;\n import org.folio.circulation.domain.policy.Period;\n import org.folio.circulation.support.ClockManager;\n-import api.support.http.IndividualResource;\n import org.folio.circulation.support.http.client.Response;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n-import org.joda.time.DateTimeZone;\n import org.joda.time.LocalTime;\n import org.joda.time.Seconds;\n import org.joda.time.format.ISODateTimeFormat;\n@@ -48,6 +51,7 @@\n import api.support.builders.LoanPolicyBuilder;\n import api.support.builders.RequestBuilder;\n import api.support.builders.ServicePointBuilder;\n+import api.support.http.IndividualResource;\n import io.vertx.core.json.JsonObject;\n import junitparams.JUnitParamsRunner;\n import junitparams.Parameters;\n@@ -421,6 +425,8 @@ public void changedDueDateAfterRecallingAnItemShouldRespectTenantTimezone() {\n     final IndividualResource steve = usersFixture.steve();\n     final IndividualResource jessica = usersFixture.jessica();\n \n+    final var clockManager = getClockManager();\n+\n     configClient.create(timezoneConfigurationFor(stockholmTimeZone));\n \n     final LoanPolicyBuilder canCirculateRollingPolicy = new LoanPolicyBuilder()\n@@ -434,37 +440,28 @@ public void changedDueDateAfterRecallingAnItemShouldRespectTenantTimezone() {\n \n     setFallbackPolicies(canCirculateRollingPolicy);\n \n-    final DateTime loanDate = now(UTC).minusDays(3);\n+    clockManager.setClock(fixed(Instant.parse(\"2020-01-24T08:34:21Z\"), ZoneId.of(\"UTC\")));\n \n-    final IndividualResource loan = checkOutFixture.checkOutByBarcode(\n-      smallAngryPlanet, steve, loanDate);\n-\n-    final String originalDueDate = loan.getJson().getString(\"dueDate\");\n+    final var loanDate = clockManager.getDateTime();\n \n-    final DateTime requestDate = now(UTC);\n+    final IndividualResource loan = checkOutFixture.checkOutByBarcode(smallAngryPlanet, steve);\n \n-    mockClockManagerToReturnFixedDateTime(requestDate);\n+    //3 days later\n+    clockManager.setClock(offset(clockManager.getClock(), ofDays(3)));\n \n     requestsFixture.place(\n       new RequestBuilder()\n         .recall()\n         .forItem(smallAngryPlanet)\n         .by(jessica)\n-        .withRequestDate(requestDate)\n+        .withRequestDate(clockManager.getDateTime())\n         .withPickupServicePoint(requestServicePoint));\n \n-    final JsonObject storedLoan = loansStorageClient.getById(loan.getId()).getJson();\n-\n-    assertThat(\"due date should not be the original due date\",\n-      storedLoan.getString(\"dueDate\"), not(originalDueDate));\n-\n-    final DateTime expectedDueDate = loanDate\n-      .withZone(DateTimeZone.forID(stockholmTimeZone))\n-      .withTime(END_OF_A_DAY)\n-      .plusDays(5);\n+    final var storedLoan = loansFixture.getLoanById(loan.getId()).getJson();\n \n     assertThat(\"due date should be end of the day, 5 days from loan date\",\n-      storedLoan.getString(\"dueDate\"), isEquivalentTo(expectedDueDate));\n+      storedLoan.getString(\"dueDate\"), isEquivalentTo(\n+        DateTime.parse(\"2020-01-29T23:59:59+01:00\")));\n   }\n \n   @Test\n@@ -767,7 +764,7 @@ public void itemRecalledThenCancelledAndNextRecallDoesNotChangeDueDate() {\n         .renewFromSystemDate()\n         .withRecallsMinimumGuaranteedLoanPeriod(Period.weeks(1))\n         .withRecallsRecallReturnInterval(Period.weeks(2));\n-  \n+\n     setFallbackPolicies(canCirculateRollingPolicy);\n \n     final IndividualResource loan = checkOutFixture.checkOutByBarcode(\n@@ -886,7 +883,7 @@ public void shouldExtendLoanDueDateByAlternatePeriodWhenOverdueLoanIsRecalledAnd\n \n     assertThat(storedLoan.getString(\"dueDate\"), withinSecondsBefore(Seconds.seconds(30), expectedLoanDueDate));\n   }\n-  \n+\n   public void shouldExtendLoanDueDateByRecallReturnIntervalForOverdueLoansIsRecalledAndAlternateRecallReturnIntervalForOverdueLoansIsEmpty() {\n     final IndividualResource smallAngryPlanet = itemsFixture.basedUponSmallAngryPlanet();\n \n@@ -951,7 +948,7 @@ public void loanDueDateTruncatedOnCheckoutWhenRecallAnywhereInQueue() {\n       requestsFixture.placeHoldShelfRequest(\n         smallAngryPlanet, james, now(UTC),\n         requestServicePoint.getId(), \"Hold\");\n-      \n+\n       requestsFixture.placeHoldShelfRequest(\n         smallAngryPlanet, jessica, now(UTC),\n         requestServicePoint.getId(), \"Hold\");"
  },
  {
    "sha": "30e06d291acd15d41ddefb947db19aad8562bdf4",
    "filename": "src/test/java/api/requests/scenarios/MoveRequestTests.java",
    "status": "modified",
    "additions": 19,
    "deletions": 25,
    "changes": 44,
    "blob_url": "https://github.com/folio-org/mod-circulation/blob/22d1b8431f445aaad3ca81f7d27a93039fa515ad/src/test/java/api/requests/scenarios/MoveRequestTests.java",
    "raw_url": "https://github.com/folio-org/mod-circulation/raw/22d1b8431f445aaad3ca81f7d27a93039fa515ad/src/test/java/api/requests/scenarios/MoveRequestTests.java",
    "contents_url": "https://api.github.com/repos/folio-org/mod-circulation/contents/src/test/java/api/requests/scenarios/MoveRequestTests.java?ref=22d1b8431f445aaad3ca81f7d27a93039fa515ad",
    "patch": "@@ -7,14 +7,17 @@\n import static api.support.matchers.EventMatchers.isValidLoanDueDateChangedEvent;\n import static api.support.matchers.ItemStatusCodeMatcher.hasItemStatus;\n import static api.support.matchers.TextDateTimeMatcher.isEquivalentTo;\n+import static java.time.Clock.fixed;\n+import static java.time.Clock.offset;\n+import static java.time.Duration.ofDays;\n import static java.util.stream.Collectors.groupingBy;\n import static org.folio.circulation.domain.EventType.LOAN_DUE_DATE_CHANGED;\n import static org.folio.circulation.domain.EventType.LOG_RECORD;\n import static org.folio.circulation.domain.policy.DueDateManagement.KEEP_THE_CURRENT_DUE_DATE;\n-import static org.folio.circulation.domain.policy.library.ClosedLibraryStrategyUtils.END_OF_A_DAY;\n import static org.folio.circulation.domain.representations.ItemProperties.CALL_NUMBER_COMPONENTS;\n import static org.folio.circulation.domain.representations.RequestProperties.REQUEST_TYPE;\n import static org.folio.circulation.domain.representations.logs.LogEventType.REQUEST_MOVED;\n+import static org.folio.circulation.support.ClockManager.getClockManager;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -25,6 +28,7 @@\n import java.time.Clock;\n import java.time.Instant;\n import java.time.LocalDateTime;\n+import java.time.ZoneId;\n import java.time.ZoneOffset;\n import java.util.List;\n import java.util.Map;\n@@ -37,7 +41,6 @@\n import org.folio.circulation.domain.RequestStatus;\n import org.folio.circulation.domain.RequestType;\n import org.folio.circulation.domain.policy.Period;\n-import org.folio.circulation.support.ClockManager;\n import org.hamcrest.Matchers;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n@@ -63,7 +66,7 @@\n \n   @After\n   public void after() {\n-    ClockManager.getClockManager().setClock(Clock.systemUTC());\n+    getClockManager().setClock(Clock.systemUTC());\n   }\n \n   @Test\n@@ -922,6 +925,8 @@ public void changedDueDateAfterRecallingAnItemShouldRespectTenantTimezone() {\n     val steve = usersFixture.steve();\n     val jessica = usersFixture.jessica();\n \n+    final var clockManager = getClockManager();\n+\n     configClient.create(timezoneConfigurationFor(stockholmTimeZone));\n \n     final LoanPolicyBuilder canCirculateRollingPolicy = new LoanPolicyBuilder()\n@@ -941,42 +946,31 @@ public void changedDueDateAfterRecallingAnItemShouldRespectTenantTimezone() {\n       overdueFinePoliciesFixture.facultyStandard().getId(),\n       lostItemFeePoliciesFixture.facultyStandard().getId());\n \n-    final DateTime loanDate = DateTime.now(DateTimeZone.UTC).minusDays(3);\n-\n-    checkOutFixture.checkOutByBarcode(sourceItem, steve, loanDate);\n-\n-    final IndividualResource loan = checkOutFixture.checkOutByBarcode(\n-      destinationItem, steve, loanDate);\n+    clockManager.setClock(fixed(Instant.parse(\"2021-02-15T11:24:45Z\"), ZoneId.of(\"UTC\")));\n \n-    final String originalDueDate = loan.getJson().getString(\"dueDate\");\n+    checkOutFixture.checkOutByBarcode(sourceItem, steve);\n \n-    final DateTime requestDate = DateTime.now(DateTimeZone.UTC);\n+    final IndividualResource loan = checkOutFixture.checkOutByBarcode(destinationItem, steve);\n \n-    freezeTime(requestDate);\n+    //3 days later\n+    clockManager.setClock(offset(clockManager.getClock(), ofDays(3)));\n \n     final IndividualResource recallRequest = requestsFixture.place(\n       new RequestBuilder()\n         .recall()\n         .forItem(sourceItem)\n         .by(jessica)\n-        .withRequestDate(requestDate)\n+        .withRequestDate(clockManager.getDateTime())\n         .withPickupServicePoint(requestServicePoint));\n \n     requestsFixture.move(new MoveRequestBuilder(recallRequest.getId(),\n       destinationItem.getId()));\n \n-    final JsonObject storedLoan = loansStorageClient.getById(loan.getId()).getJson();\n-\n-    assertThat(\"due date is the original date\",\n-      storedLoan.getString(\"dueDate\"), not(originalDueDate));\n-\n-    final DateTime expectedDueDate = loanDate\n-      .withZone(DateTimeZone.forID(stockholmTimeZone))\n-      .withTime(END_OF_A_DAY)\n-      .plusDays(5);\n+    final var storedLoan = loansFixture.getLoanById(loan.getId()).getJson();\n \n     assertThat(\"due date should be end of the day, 5 days from loan date\",\n-      storedLoan.getString(\"dueDate\"), isEquivalentTo(expectedDueDate));\n+      storedLoan.getString(\"dueDate\"), isEquivalentTo(\n+        DateTime.parse(\"2021-02-20T23:59:59+01:00\")));\n   }\n \n   @Test\n@@ -1053,8 +1047,8 @@ private void freezeTime(DateTime dateTime) {\n   }\n \n   private void freezeTime(Instant dateTime) {\n-    ClockManager.getClockManager().setClock(\n-      Clock.fixed(dateTime, ZoneOffset.UTC));\n+    getClockManager().setClock(\n+      fixed(dateTime, ZoneOffset.UTC));\n   }\n \n   private void requestHasCallNumberStringProperties(JsonObject request, String prefix) {"
  }
]
