[
  {
    "sha": "8b13eda7d11bc5e51b3634f3a976dc2008706ad8",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ChromeCacheExtractor.java",
    "status": "modified",
    "additions": 27,
    "deletions": 26,
    "changes": 53,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ChromeCacheExtractor.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ChromeCacheExtractor.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ChromeCacheExtractor.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -55,9 +55,11 @@\n import org.sleuthkit.datamodel.Blackboard;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n import org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_CACHE;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.DerivedFile;\n+import org.sleuthkit.datamodel.OsAccount;\n import org.sleuthkit.datamodel.TimeUtilities;\n import org.sleuthkit.datamodel.TskCoreException;\n import org.sleuthkit.datamodel.TskData;\n@@ -521,33 +523,32 @@ private void processCacheFolder(AbstractFile indexFile) {\n     private void addArtifacts(CacheEntry cacheEntry, AbstractFile cacheEntryFile, AbstractFile cachedItemFile, Collection<BlackboardArtifact> artifactsAdded) throws TskCoreException {\n   \n         // Create a TSK_WEB_CACHE entry with the parent as data_X file that had the cache entry\n-        BlackboardArtifact webCacheArtifact = cacheEntryFile.newArtifact(ARTIFACT_TYPE.TSK_WEB_CACHE);\n-        if (webCacheArtifact != null) {\n-            Collection<BlackboardAttribute> webAttr = new ArrayList<>();\n-            String url = cacheEntry.getKey() != null ? cacheEntry.getKey() : \"\";\n-            webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL,\n-                    moduleName, url));\n-            webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN,\n-                    moduleName, NetworkUtils.extractDomain(url)));\n-            webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DATETIME_CREATED,\n-                    moduleName, cacheEntry.getCreationTime()));\n-            webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_HEADERS,\n-                    moduleName, cacheEntry.getHTTPHeaders()));  \n-            webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH,\n-                    moduleName, cachedItemFile.getUniquePath()));\n-            webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH_ID,\n-                    moduleName, cachedItemFile.getId()));\n-            webCacheArtifact.addAttributes(webAttr);\n-            artifactsAdded.add(webCacheArtifact);\n+        Collection<BlackboardAttribute> webAttr = new ArrayList<>();\n+        String url = cacheEntry.getKey() != null ? cacheEntry.getKey() : \"\";\n+        webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL,\n+                moduleName, url));\n+        webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN,\n+                moduleName, NetworkUtils.extractDomain(url)));\n+        webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DATETIME_CREATED,\n+                moduleName, cacheEntry.getCreationTime()));\n+        webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_HEADERS,\n+                moduleName, cacheEntry.getHTTPHeaders()));  \n+        webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH,\n+                moduleName, cachedItemFile.getUniquePath()));\n+        webAttr.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH_ID,\n+                moduleName, cachedItemFile.getId()));\n \n-            // Create a TSK_ASSOCIATED_OBJECT on the f_XXX or derived file file back to the CACHE entry\n-            BlackboardArtifact associatedObjectArtifact = cachedItemFile.newArtifact(ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT);\n-            if (associatedObjectArtifact != null) {\n-                associatedObjectArtifact.addAttribute(\n-                            new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT,\n-                                    moduleName, webCacheArtifact.getArtifactID()));\n-                artifactsAdded.add(associatedObjectArtifact);\n-            }\n+        Optional<OsAccount> optional = cacheEntryFile.getOsAccount();\n+        BlackboardArtifact webCacheArtifact = cacheEntryFile.newDataArtifact(new BlackboardArtifact.Type(ARTIFACT_TYPE.TSK_WEB_CACHE), webAttr, optional.isPresent() ? optional.get() : null);\n+        artifactsAdded.add(webCacheArtifact);\n+\n+        // Create a TSK_ASSOCIATED_OBJECT on the f_XXX or derived file file back to the CACHE entry\n+        BlackboardArtifact associatedObjectArtifact = cachedItemFile.newArtifact(ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT);\n+        if (associatedObjectArtifact != null) {\n+            associatedObjectArtifact.addAttribute(\n+                        new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT,\n+                                moduleName, webCacheArtifact.getArtifactID()));\n+            artifactsAdded.add(associatedObjectArtifact);\n         }\n     }\n     "
  },
  {
    "sha": "77d8d8fdc3b8aca672ea2e5866dc22237539f6df",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Chromium.java",
    "status": "modified",
    "additions": 50,
    "deletions": 57,
    "changes": 107,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Chromium.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Chromium.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Chromium.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -54,6 +54,7 @@\n import org.sleuthkit.datamodel.Blackboard;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n import org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n import org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n import org.sleuthkit.datamodel.Content;\n@@ -121,7 +122,7 @@\n         \"Progress_Message_Chrome_Cache=Chrome Cache\",})\n \n     Chromium() {\n-        moduleName = NbBundle.getMessage(Chromium.class, \"Chrome.moduleName\");\n+        super(NbBundle.getMessage(Chromium.class, \"Chrome.moduleName\"));\n     }\n \n     @Override\n@@ -243,7 +244,7 @@ private void getHistory(String browser, String browserLocation) {\n             }\n             List<HashMap<String, Object>> tempList;\n             tempList = this.dbConnect(temps, HISTORY_QUERY);\n-            logger.log(Level.INFO, \"{0}- Now getting history from {1} with {2}artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting history from {1} with {2}artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 Collection<BlackboardAttribute> bbattributes = new ArrayList<BlackboardAttribute>();\n                 bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL,\n@@ -264,9 +265,10 @@ private void getHistory(String browser, String browserLocation) {\n                         RecentActivityExtracterModuleFactory.getModuleName(),\n                         (NetworkUtils.extractDomain((result.get(\"url\").toString() != null) ? result.get(\"url\").toString() : \"\")))); //NON-NLS\n \n-                BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_HISTORY, historyFile, bbattributes);\n-                if (bbart != null) {\n-                    bbartifacts.add(bbart);\n+                try {\n+                     bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_HISTORY, historyFile, bbattributes));\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create history artifact for file (%d)\", historyFile.getId()), ex);\n                 }\n             }\n             dbFile.delete();\n@@ -330,7 +332,7 @@ private void getBookmark(String browser, String browserLocation) {\n                 continue;\n             }\n \n-            logger.log(Level.INFO, \"{0}- Now getting Bookmarks from {1}\", new Object[]{moduleName, temps}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting Bookmarks from {1}\", new Object[]{getName(), temps}); //NON-NLS\n             File dbFile = new File(temps);\n             if (context.dataSourceIngestIsCancelled()) {\n                 dbFile.delete();\n@@ -390,29 +392,25 @@ private void getBookmark(String browser, String browserLocation) {\n                     date = Long.valueOf(0);\n                 }\n                 String domain = NetworkUtils.extractDomain(url);\n+                Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n+                //TODO Revisit usage of deprecated constructor as per TSK-583\n+                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL,\n+                        RecentActivityExtracterModuleFactory.getModuleName(), url));\n+                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_TITLE,\n+                        RecentActivityExtracterModuleFactory.getModuleName(), name));\n+                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_CREATED,\n+                        RecentActivityExtracterModuleFactory.getModuleName(), (date / 1000000) - Long.valueOf(\"11644473600\")));\n+                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME,\n+                        RecentActivityExtracterModuleFactory.getModuleName(), browser));\n+                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN,\n+                        RecentActivityExtracterModuleFactory.getModuleName(), domain));\n+\n                 try {\n-                    BlackboardArtifact bbart = bookmarkFile.newArtifact(ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n-                    Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n-                    //TODO Revisit usage of deprecated constructor as per TSK-583\n-                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL,\n-                            RecentActivityExtracterModuleFactory.getModuleName(), url));\n-                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_TITLE,\n-                            RecentActivityExtracterModuleFactory.getModuleName(), name));\n-                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_CREATED,\n-                            RecentActivityExtracterModuleFactory.getModuleName(), (date / 1000000) - Long.valueOf(\"11644473600\")));\n-                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME,\n-                            RecentActivityExtracterModuleFactory.getModuleName(), browser));\n-                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN,\n-                            RecentActivityExtracterModuleFactory.getModuleName(), domain));\n-                    bbart.addAttributes(bbattributes);\n-\n-                    bbartifacts.add(bbart);\n+                    bbartifacts.add(createArtifactWithAttributes(TSK_WEB_BOOKMARK, bookmarkFile, bbattributes));\n                 } catch (TskCoreException ex) {\n-                    logger.log(Level.SEVERE, \"Error while trying to insert Chrome bookmark artifact{0}\", ex); //NON-NLS\n-                    this.addErrorMessage(\n-                            NbBundle.getMessage(this.getClass(), \"Chrome.getBookmark.errMsg.errAnalyzingFile4\",\n-                                    this.getName(), bookmarkFile.getName()));\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create bookmark artifact for file (%d)\", bookmarkFile.getId()), ex);\n                 }\n+                \n             }\n             \n             if(!context.dataSourceIngestIsCancelled()) {\n@@ -481,7 +479,7 @@ private void getCookie(String browser, String browserLocation) {\n             }\n \n             List<HashMap<String, Object>> tempList = this.dbConnect(temps, COOKIE_QUERY);\n-            logger.log(Level.INFO, \"{0}- Now getting cookies from {1} with {2} artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting cookies from {1} with {2} artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n                 bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL,\n@@ -504,9 +502,10 @@ private void getCookie(String browser, String browserLocation) {\n                 bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN,\n                         RecentActivityExtracterModuleFactory.getModuleName(), domain));\n \n-                BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_COOKIE, cookiesFile, bbattributes);\n-                if (bbart != null) {\n-                    bbartifacts.add(bbart);\n+                try {\n+                    bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_COOKIE, cookiesFile, bbattributes));\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create cookie artifact for file (%d)\", cookiesFile.getId()), ex);\n                 }\n             }\n \n@@ -582,7 +581,7 @@ private void getDownload(String browser, String browserLocation) {\n                 tempList = this.dbConnect(temps, DOWNLOAD_QUERY_V30);\n             }\n \n-            logger.log(Level.INFO, \"{0}- Now getting downloads from {1} with {2} artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting downloads from {1} with {2} artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n                 String fullPath = result.get(\"full_path\").toString(); //NON-NLS\n@@ -610,25 +609,17 @@ private void getDownload(String browser, String browserLocation) {\n                 bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME,\n                         RecentActivityExtracterModuleFactory.getModuleName(), browser));\n \n-                BlackboardArtifact webDownloadArtifact = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD, downloadFile, bbattributes);\n-                if (webDownloadArtifact != null) {\n-                    bbartifacts.add(webDownloadArtifact);\n-\n                     // find the downloaded file and create a TSK_ASSOCIATED_OBJECT for it, associating it with the TSK_WEB_DOWNLOAD artifact.\n-                    try {\n-                        String normalizedFullPath = FilenameUtils.normalize(fullPath, true);\n-                        for (AbstractFile downloadedFile : fileManager.findFiles(dataSource, FilenameUtils.getName(normalizedFullPath), FilenameUtils.getPath(normalizedFullPath))) {\n-                            BlackboardArtifact associatedObjectArtifact = downloadedFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT);\n-                            associatedObjectArtifact.addAttribute(\n-                                    new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT,\n-                                            RecentActivityExtracterModuleFactory.getModuleName(), webDownloadArtifact.getArtifactID()));\n-\n-                            bbartifacts.add(associatedObjectArtifact);\n-                            break;\n-                        }\n-                    } catch (TskCoreException ex) {\n-                        logger.log(Level.SEVERE, String.format(\"Error creating associated object artifact for file  '%s'\", fullPath), ex); //NON-NLS\n+                try {\n+                    BlackboardArtifact webDownloadArtifact = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD, downloadFile, bbattributes);\n+                    bbartifacts.add(webDownloadArtifact);\n+                    String normalizedFullPath = FilenameUtils.normalize(fullPath, true);\n+                    for (AbstractFile downloadedFile : fileManager.findFiles(dataSource, FilenameUtils.getName(normalizedFullPath), FilenameUtils.getPath(normalizedFullPath))) {\n+                        bbartifacts.add(createAssociatedArtifact(downloadedFile, webDownloadArtifact));\n+                        break;\n                     }\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error creating associated object artifact for file  '%s'\", fullPath), ex); //NON-NLS\n                 }\n             }\n \n@@ -696,7 +687,7 @@ private void getLogins(String browser, String browserLocation) {\n                 break;\n             }\n             List<HashMap<String, Object>> tempList = this.dbConnect(temps, LOGIN_QUERY);\n-            logger.log(Level.INFO, \"{0}- Now getting login information from {1} with {2}artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting login information from {1} with {2}artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n \n@@ -727,9 +718,10 @@ private void getLogins(String browser, String browserLocation) {\n                 bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME,\n                         RecentActivityExtracterModuleFactory.getModuleName(), browser));\n \n-                BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_SERVICE_ACCOUNT, loginDataFile, bbattributes);\n-                if (bbart != null) {\n-                    bbartifacts.add(bbart);\n+                try {\n+                    bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_SERVICE_ACCOUNT, loginDataFile, bbattributes));\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create service account artifact for file (%d)\", loginDataFile.getId()), ex);\n                 }\n             }\n \n@@ -838,7 +830,7 @@ private void getAutofill(String browser, String browserLocation) {\n                 : AUTOFILL_QUERY;\n \n         List<HashMap<String, Object>> autofills = this.dbConnect(dbFilePath, autoFillquery);\n-        logger.log(Level.INFO, \"{0}- Now getting Autofill information from {1} with {2}artifacts identified.\", new Object[]{moduleName, dbFilePath, autofills.size()}); //NON-NLS\n+        logger.log(Level.INFO, \"{0}- Now getting Autofill information from {1} with {2}artifacts identified.\", new Object[]{getName(), dbFilePath, autofills.size()}); //NON-NLS\n         for (HashMap<String, Object> result : autofills) {\n             Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n \n@@ -870,9 +862,10 @@ private void getAutofill(String browser, String browserLocation) {\n                     RecentActivityExtracterModuleFactory.getModuleName(), browser));\n \n             // Add an artifact\n-            BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_FORM_AUTOFILL, webDataFile, bbattributes);\n-            if (bbart != null) {\n-                bbartifacts.add(bbart);\n+            try {\n+                bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_FORM_AUTOFILL, webDataFile, bbattributes));\n+            } catch (TskCoreException ex) {\n+                logger.log(Level.SEVERE, String.format(\"Failed to create web form autopfill artifact for file (%d)\", webDataFile.getId()), ex);\n             }\n         }\n \n@@ -906,7 +899,7 @@ private void getFormAddressArtifacts(AbstractFile webDataFile, String dbFilePath\n \n         // Get Web form addresses\n         List<HashMap<String, Object>> addresses = this.dbConnect(dbFilePath, webformAddressQuery);\n-        logger.log(Level.INFO, \"{0}- Now getting Web form addresses from {1} with {2}artifacts identified.\", new Object[]{moduleName, dbFilePath, addresses.size()}); //NON-NLS\n+        logger.log(Level.INFO, \"{0}- Now getting Web form addresses from {1} with {2}artifacts identified.\", new Object[]{getName(), dbFilePath, addresses.size()}); //NON-NLS\n         for (HashMap<String, Object> result : addresses) {\n \n             // get name fields"
  },
  {
    "sha": "bd6b5836d5be9fabb0f2ab593c4ead449eff5063",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DataSourceUsageAnalyzer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DataSourceUsageAnalyzer.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DataSourceUsageAnalyzer.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DataSourceUsageAnalyzer.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -1,7 +1,7 @@\n /*\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2019 Basis Technology Corp.\n+ * Copyright 2019-2021 Basis Technology Corp.\n  * Contact: carrier <at> sleuthkit <dot> org\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n@@ -148,10 +148,7 @@ private void createDataSourceUsageArtifact(String dataSourceUsageDescription) th\n         bbattributes.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DESCRIPTION,\n                 Bundle.DataSourceUsageAnalyzer_parentModuleName(),\n                 dataSourceUsageDescription)); //NON-NLS\n-        BlackboardArtifact bba = createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE.TSK_DATA_SOURCE_USAGE, dataSource, bbattributes);\n-        if (bba != null) {\n-            postArtifact(bba);\n-        }\n+        postArtifact(createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE.TSK_DATA_SOURCE_USAGE, dataSource, bbattributes));\n     }\n \n     /**"
  },
  {
    "sha": "64825b985f1d1c7d1b527ec14b1b52f05d31325f",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -1,7 +1,7 @@\n /*\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2020 Basis Technology Corp.\n+ * Copyright 2020-2021 Basis Technology Corp.\n  * Contact: carrier <at> sleuthkit <dot> org\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n@@ -165,7 +165,7 @@ private static String getStringOrEmpty(Map<Integer, BlackboardAttribute> attrMap\n      * Main constructor.\n      */\n     DomainCategoryRunner() {\n-        moduleName = null;\n+        \n     }\n \n     /**\n@@ -415,7 +415,7 @@ private void findDomainTypes() {\n      * parent file).\n      * @param domainCategory The category for this host/domain.\n      */\n-    private void addCategoryArtifact(ArtifactHost artHost, String domainCategory) {\n+    private void addCategoryArtifact(ArtifactHost artHost, String domainCategory) throws TskCoreException {\n         String moduleName = Bundle.DomainCategoryRunner_parentModuleName();\n         Collection<BlackboardAttribute> bbattributes = Arrays.asList(\n                 new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN, moduleName, artHost.getDomain()),"
  },
  {
    "sha": "97c17b58dc8939c7fbfe509f2d1afb0816e04204",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Extract.java",
    "status": "modified",
    "additions": 75,
    "deletions": 19,
    "changes": 94,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Extract.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Extract.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Extract.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -34,6 +34,7 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Optional;\n import java.util.logging.Level;\n import org.openide.util.NbBundle.Messages;\n import org.sleuthkit.autopsy.casemodule.Case;\n@@ -47,11 +48,12 @@\n import org.sleuthkit.datamodel.AbstractFile;\n import org.sleuthkit.datamodel.Blackboard;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.OsAccount;\n import org.sleuthkit.datamodel.SleuthkitCase;\n import org.sleuthkit.datamodel.TskCoreException;\n-import org.sleuthkit.datamodel.TskException;\n \n \n abstract class Extract {\n@@ -61,10 +63,16 @@\n     protected Blackboard blackboard;\n     private final Logger logger = Logger.getLogger(this.getClass().getName());\n     private final ArrayList<String> errorMessages = new ArrayList<>();\n-    String moduleName = \"\";\n+    private String moduleName = \"\";\n     boolean dataFound = false;\n+    private RAOsAccountCache osAccountCache = null;\n \n-    Extract() {        \n+    Extract() {\n+        this(\"\");\n+    }\n+    \n+    Extract(String moduleName) {\n+        this.moduleName = moduleName;\n     }\n \n     final void init() throws IngestModuleException {\n@@ -86,6 +94,21 @@ final void init() throws IngestModuleException {\n     void configExtractor() throws IngestModuleException  {        \n     }\n \n+    /**\n+     * Extractor process method intended to mirror the Ingest process method.\n+     * \n+     *  Subclasses should overload just the abstract version of the method.\n+     * \n+     * @param dataSource The data source object to ingest.\n+     * @param context   The the context for the current job.\n+     * @param progressBar A handle to the progressBar for the module to update with status.\n+     * @param osAccountCache The OsAccountCache.\n+     */\n+    void process(Content dataSource, IngestJobContext context, DataSourceIngestModuleProgress progressBar, RAOsAccountCache osAccountCache) {\n+        this.osAccountCache = osAccountCache;\n+        process(dataSource, context, progressBar);\n+    }\n+    \n     abstract void process(Content dataSource, IngestJobContext context, DataSourceIngestModuleProgress progressBar);\n \n     void complete() {\n@@ -108,28 +131,41 @@ void complete() {\n     protected void addErrorMessage(String message) {\n         errorMessages.add(message);\n     }\n-\n+    \n     /**\n-     * Generic method for creating a blackboard artifact with attributes\n+     * Generic method for creating artifacts.\n      *\n-     * @param type         is a blackboard.artifact_type enum to determine which\n-     *                     type the artifact should be\n-     * @param content      is the Content object that needs to have the\n-     *                     artifact added for it\n-     * @param bbattributes is the collection of blackboard attributes that need\n-     *                     to be added to the artifact after the artifact has\n-     *                     been created\n-     * @return The newly-created artifact, or null on error\n+     * @param type       The type of artifact.\n+     * @param file       The file the artifact originated from.\n+     * @param attributes A list of the attributes to associate with the\n+     *                   artifact.\n+     *\n+     * @return The newly created artifact.\n      */\n-    protected BlackboardArtifact createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE type, Content content, Collection<BlackboardAttribute> bbattributes) {\n-        try {\n+    BlackboardArtifact createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE type, Content content, Collection<BlackboardAttribute> attributes) throws TskCoreException {\n+        Optional<OsAccount> optional = getOsAccount(content);        \n+        if (optional.isPresent() && type.getCategory() == BlackboardArtifact.Category.DATA_ARTIFACT)  {\n+            return content.newDataArtifact(new BlackboardArtifact.Type(type), attributes, optional.get());\n+        } else {\n             BlackboardArtifact bbart = content.newArtifact(type);\n-            bbart.addAttributes(bbattributes);\n+            bbart.addAttributes(attributes);\n             return bbart;\n-        } catch (TskException ex) {\n-            logger.log(Level.WARNING, \"Error while trying to add an artifact\", ex); //NON-NLS\n         }\n-        return null;\n+    }\n+\n+    /**\n+     * Returns and associated artifact for the given artifact.\n+     *\n+     * @param content  The content to create the artifact from.\n+     * @param artifact The artifact to associate the new artifact with.\n+     *\n+     * @return The newly created artifact.\n+     *\n+     * @throws TskCoreException\n+     */\n+    BlackboardArtifact createAssociatedArtifact(Content content, BlackboardArtifact artifact) throws TskCoreException {\n+        return createArtifactWithAttributes(TSK_ASSOCIATED_OBJECT, content, Collections.singletonList(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT,\n+                RecentActivityExtracterModuleFactory.getModuleName(), artifact.getArtifactID())));\n     }\n     \n     /**\n@@ -484,4 +520,24 @@ protected File createTemporaryFile(IngestJobContext context, AbstractFile file)\n          \n         return tempFile;\n     }\n+    \n+    /**\n+     * Return the appropriate OsAccount for the given file.\n+     * \n+     * @param file\n+     * \n+     * @return An Optional OsACcount object.\n+     * \n+     * @throws TskCoreException \n+     */\n+    Optional<OsAccount> getOsAccount(Content content) throws TskCoreException {\n+        if(content instanceof AbstractFile) {\n+            if(osAccountCache == null) {\n+                return ((AbstractFile)content).getOsAccount();\n+            } \n+\n+            return osAccountCache.getOsAccount(((AbstractFile)content));\n+        }\n+        return Optional.empty();\n+    }\n }"
  },
  {
    "sha": "3187955c10c386d4ed6de91b258f1567ebf760d1",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractEdge.java",
    "status": "modified",
    "additions": 8,
    "deletions": 13,
    "changes": 21,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractEdge.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractEdge.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractEdge.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -24,7 +24,6 @@\n import java.io.IOException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Date;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.text.DateFormat;\n@@ -53,6 +52,9 @@\n import org.sleuthkit.autopsy.ingest.IngestJobContext;\n import org.sleuthkit.datamodel.AbstractFile;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY;\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.TskCoreException;\n \n@@ -124,6 +126,7 @@\n     * Extract the bookmarks, cookies, downloads and history from Microsoft Edge\n     */\n     ExtractEdge() throws NoCurrentCaseException {\n+        super(Bundle.ExtractEdge_Module_Name());\n         moduleTempResultPath = Paths.get(RAImageIngestModule.getRATempPath(Case.getCurrentCaseThrows(), EDGE), EDGE_RESULT_FOLDER_NAME);\n     }\n \n@@ -628,14 +631,10 @@ private BlackboardArtifact getHistoryArtifact(AbstractFile origFile, List<String\n         String accessTime = rowSplit[index].trim();\n         Long ftime = parseTimestamp(accessTime);\n \n-        BlackboardArtifact bbart = origFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY);\n-\n-        bbart.addAttributes(createHistoryAttribute(url, ftime,\n+        return createArtifactWithAttributes(TSK_WEB_HISTORY, origFile, createHistoryAttribute(url, ftime,\n                 null, null,\n                 this.getName(),\n                 NetworkUtils.extractDomain(url), user));\n-\n-        return bbart;\n     }\n \n     /**\n@@ -658,9 +657,7 @@ private BlackboardArtifact getCookieArtifact(AbstractFile origFile, List<String>\n         String value = hexToChar(lineSplit[headers.indexOf(EDGE_HEAD_VALUE)].trim());\n         String url = flipDomain(domain);\n \n-        BlackboardArtifact bbart = origFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE);\n-        bbart.addAttributes(createCookieAttributes(url, null, ftime, null, name, value, this.getName(), NetworkUtils.extractDomain(url)));\n-        return bbart;\n+        return createArtifactWithAttributes(TSK_WEB_COOKIE, origFile, createCookieAttributes(url, null, ftime, null, name, value, this.getName(), NetworkUtils.extractDomain(url)));\n     }\n \n     /**\n@@ -707,11 +704,9 @@ private BlackboardArtifact getBookmarkArtifact(AbstractFile origFile, List<Strin\n         if (url.isEmpty()) {\n             return null;\n         }\n-\n-        BlackboardArtifact bbart = origFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n-        bbart.addAttributes(createBookmarkAttributes(url, title, null,\n+        \n+        return createArtifactWithAttributes(TSK_WEB_BOOKMARK, origFile, createBookmarkAttributes(url, title, null,\n                 this.getName(), NetworkUtils.extractDomain(url)));\n-        return bbart;\n     }\n     \n "
  },
  {
    "sha": "ba021ef69f0b02dbbd1e4c4a3daf80d8222997bf",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractIE.java",
    "status": "modified",
    "additions": 35,
    "deletions": 33,
    "changes": 68,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractIE.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractIE.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractIE.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -2,7 +2,7 @@\n  *\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2012-2020 Basis Technology Corp.\n+ * Copyright 2012-2021 Basis Technology Corp.\n  *\n  * Copyright 2012 42six Solutions.\n  * Contact: aebadirad <at> 42six <dot> com\n@@ -56,6 +56,7 @@\n import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n import org.sleuthkit.autopsy.ingest.IngestJobContext;\n import org.sleuthkit.datamodel.AbstractFile;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY;\n import org.sleuthkit.datamodel.ReadContentInputStream;\n import org.sleuthkit.datamodel.TskCoreException;\n \n@@ -84,7 +85,7 @@\n         \"Progress_Message_IE_Logins=IE Logins\",})\n \n     ExtractIE() throws NoCurrentCaseException {\n-        moduleName = NbBundle.getMessage(ExtractIE.class, \"ExtractIE.moduleName.text\");\n+        super(NbBundle.getMessage(ExtractIE.class, \"ExtractIE.moduleName.text\"));\n         moduleTempResultsDir = RAImageIngestModule.getRATempPath(Case.getCurrentCaseThrows(), \"IE\") + File.separator + \"results\"; //NON-NLS\n         JAVA_PATH = PlatformUtil.getJavaPath();\n     }\n@@ -168,9 +169,10 @@ private void getBookmark() {\n                         RecentActivityExtracterModuleFactory.getModuleName(), domain));\n             }\n \n-            BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_BOOKMARK, fav, bbattributes);\n-            if (bbart != null) {\n-                bbartifacts.add(bbart);\n+            try {\n+                bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_BOOKMARK, fav, bbattributes));\n+            } catch (TskCoreException ex) {\n+                logger.log(Level.SEVERE, String.format(\"Failed to create %s for file %d\",ARTIFACT_TYPE.TSK_WEB_BOOKMARK.getDisplayName(), fav.getId() ), ex);\n             }\n         }\n \n@@ -280,9 +282,11 @@ private void getCookie() {\n                 bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN,\n                         RecentActivityExtracterModuleFactory.getModuleName(), domain));\n             }\n-            BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_COOKIE, cookiesFile, bbattributes);\n-            if (bbart != null) {\n-                bbartifacts.add(bbart);\n+\n+            try {\n+                bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_COOKIE, cookiesFile, bbattributes));\n+            } catch (TskCoreException ex) {\n+                logger.log(Level.SEVERE, String.format(\"Failed to create %s for file %d\",ARTIFACT_TYPE.TSK_WEB_COOKIE.getDisplayName(), cookiesFile.getId() ), ex);\n             }\n         }\n \n@@ -558,33 +562,31 @@ private boolean executePasco(String indexFilePath, String outputFileName) {\n                 }\n             }\n \n-            try {\n-                BlackboardArtifact bbart = origFile.newArtifact(ARTIFACT_TYPE.TSK_WEB_HISTORY);\n-                Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n-                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL,\n-                        RecentActivityExtracterModuleFactory.getModuleName(), realurl));\n-                //bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL_DECODED.getTypeID(), \"RecentActivity\", EscapeUtil.decodeURL(realurl)));\n-\n-                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED,\n-                        RecentActivityExtracterModuleFactory.getModuleName(), ftime));\n-                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_REFERRER,\n-                        RecentActivityExtracterModuleFactory.getModuleName(), \"\"));\n-                // @@@ NOte that other browser modules are adding TITLE in hre for the title\n-                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME,\n-                        RecentActivityExtracterModuleFactory.getModuleName(),\n-                        NbBundle.getMessage(this.getClass(),\n-                                \"ExtractIE.moduleName.text\")));\n-                if (domain != null && domain.isEmpty() == false) {\n-                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN,\n-                            RecentActivityExtracterModuleFactory.getModuleName(), domain));\n-                }\n-                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_NAME,\n-                        RecentActivityExtracterModuleFactory.getModuleName(), user));\n-                bbart.addAttributes(bbattributes);\n+            Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n+            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL,\n+                    RecentActivityExtracterModuleFactory.getModuleName(), realurl));\n+            //bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_URL_DECODED.getTypeID(), \"RecentActivity\", EscapeUtil.decodeURL(realurl)));\n+\n+            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED,\n+                    RecentActivityExtracterModuleFactory.getModuleName(), ftime));\n+            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_REFERRER,\n+                    RecentActivityExtracterModuleFactory.getModuleName(), \"\"));\n+            // @@@ NOte that other browser modules are adding TITLE in hre for the title\n+            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PROG_NAME,\n+                    RecentActivityExtracterModuleFactory.getModuleName(),\n+                    NbBundle.getMessage(this.getClass(),\n+                            \"ExtractIE.moduleName.text\")));\n+            if (domain != null && domain.isEmpty() == false) {\n+                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN,\n+                        RecentActivityExtracterModuleFactory.getModuleName(), domain));\n+            }\n+            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_NAME,\n+                    RecentActivityExtracterModuleFactory.getModuleName(), user));\n \n-                bbartifacts.add(bbart);\n+            try {\n+                bbartifacts.add(createArtifactWithAttributes(TSK_WEB_HISTORY, origFile, bbattributes));\n             } catch (TskCoreException ex) {\n-                logger.log(Level.SEVERE, \"Error writing Internet Explorer web history artifact to the blackboard. Pasco results will be incomplete\", ex); //NON-NLS\n+                logger.log(Level.SEVERE, String.format(\"Failed to create %s for file %d\",ARTIFACT_TYPE.TSK_WEB_HISTORY.getDisplayName(), origFile.getId() ), ex);\n             }\n         }\n         fileScanner.close();"
  },
  {
    "sha": "a76c1652dd6bec8eafbe8abd01839ae5613ce322",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractOs.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractOs.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractOs.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractOs.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -64,7 +64,7 @@\n     private static final String LINUX_UBUNTU_PATH = \"/etc/lsb-release\";\n \n     private Content dataSource;\n-\n+    \n     @Override\n     void process(Content dataSource, IngestJobContext context, DataSourceIngestModuleProgress progressBar) {\n         this.dataSource = dataSource;"
  },
  {
    "sha": "c7f17d6f7696ac91a06da77d59c90a22af1dd52a",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractPrefetch.java",
    "status": "modified",
    "additions": 5,
    "deletions": 18,
    "changes": 23,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractPrefetch.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractPrefetch.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractPrefetch.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -2,7 +2,7 @@\n  *\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2020 Basis Technology Corp.\n+ * Copyright 2020-2021 Basis Technology Corp.\n  *\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n@@ -46,11 +46,8 @@\n import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n import org.sleuthkit.autopsy.ingest.IngestJobContext;\n import org.sleuthkit.datamodel.AbstractFile;\n-import org.sleuthkit.datamodel.Blackboard;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n-import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n-import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT;\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.TskCoreException;\n \n@@ -85,7 +82,7 @@\n         \"ExtractPrefetch_errMsg_prefetchParsingFailed={0}: Error analyzing prefetch files\"\n     })\n     ExtractPrefetch() {\n-        this.moduleName = Bundle.ExtractPrefetch_module_name();\n+        super(Bundle.ExtractPrefetch_module_name());\n     }\n \n     @Override\n@@ -285,8 +282,7 @@ private void createAppExecArtifacts(String prefetchDb, Content dataSource) {\n                                         BlackboardAttribute.ATTRIBUTE_TYPE.TSK_COMMENT, getName(), PREFETCH_TSK_COMMENT));\n \n                         try {\n-                            BlackboardArtifact blkBrdArt = pfAbstractFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_PROG_RUN);\n-                            blkBrdArt.addAttributes(blkBrdAttributes);\n+                            BlackboardArtifact blkBrdArt = createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE.TSK_PROG_RUN, pfAbstractFile, blkBrdAttributes);\n                             blkBrdArtList.add(blkBrdArt);\n                             BlackboardArtifact associatedBbArtifact = createAssociatedArtifact(applicationName.toLowerCase(), filePath, blkBrdArt, dataSource);\n                             if (associatedBbArtifact != null) {\n@@ -340,20 +336,11 @@ private void createAppExecArtifacts(String prefetchDb, Content dataSource) {\n      *\n      * @returnv BlackboardArtifact or a null value\n      */\n-    private BlackboardArtifact createAssociatedArtifact(String fileName, String filePathName, BlackboardArtifact bba, Content dataSource) {\n+    private BlackboardArtifact createAssociatedArtifact(String fileName, String filePathName, BlackboardArtifact bba, Content dataSource) throws TskCoreException {\n         AbstractFile sourceFile = getAbstractFile(fileName, filePathName, dataSource);\n         if (sourceFile != null) {\n-            Collection<BlackboardAttribute> bbattributes2 = new ArrayList<>();\n-            bbattributes2.addAll(Arrays.asList(\n-                    new BlackboardAttribute(TSK_ASSOCIATED_ARTIFACT, this.getName(),\n-                            bba.getArtifactID())));\n-\n-            BlackboardArtifact associatedObjectBba = createArtifactWithAttributes(TSK_ASSOCIATED_OBJECT, sourceFile, bbattributes2);\n-            if (associatedObjectBba != null) {\n-                return associatedObjectBba;\n-            }\n+            return  createAssociatedArtifact(sourceFile, bba);         \n         }\n-\n         return null;\n     }\n "
  },
  {
    "sha": "9c0f7774070b739a8b71992864e9e7a27fd13949",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -81,7 +81,7 @@\n         \"ExtractRecycleBin_module_name=Recycle Bin\"\n     })\n     ExtractRecycleBin() {\n-        this.moduleName = Bundle.ExtractRecycleBin_module_name();\n+        super(Bundle.ExtractRecycleBin_module_name());\n     }\n \n     @Override\n@@ -446,11 +446,11 @@ private void createRecycleBinArtifactType() throws TskCoreException {\n      * @throws TskCoreException\n      */\n     private BlackboardArtifact createArtifact(AbstractFile rFile, BlackboardArtifact.Type type, String fileName, String userName, long dateTime) throws TskCoreException {\n-        BlackboardArtifact bba = rFile.newArtifact(type.getTypeID());\n-        bba.addAttribute(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n-        bba.addAttribute(new BlackboardAttribute(TSK_DATETIME_DELETED, getName(), dateTime));\n-        bba.addAttribute(new BlackboardAttribute(TSK_USER_NAME, getName(), userName == null || userName.isEmpty() ? \"\" : userName));\n-        return bba;\n+        List<BlackboardAttribute> attributes = new ArrayList<>();\n+        attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n+        attributes.add(new BlackboardAttribute(TSK_DATETIME_DELETED, getName(), dateTime));\n+        attributes.add(new BlackboardAttribute(TSK_USER_NAME, getName(), userName == null || userName.isEmpty() ? \"\" : userName));\n+        return createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE.fromID(type.getTypeID()), rFile, attributes);\n     }\n \n     /**"
  },
  {
    "sha": "fb6654d0e9b78dcc59a598960e3e3b204cabb142",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java",
    "status": "modified",
    "additions": 72,
    "deletions": 63,
    "changes": 135,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -2,7 +2,7 @@\n  *\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2012-2020 Basis Technology Corp.\n+ * Copyright 2012-2021 Basis Technology Corp.\n  *\n  * Copyright 2012 42six Solutions.\n  * Contact: aebadirad <at> 42six <dot> com\n@@ -57,7 +57,6 @@\n import java.nio.file.Path;\n import java.util.AbstractMap;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Collection;\n import java.util.Date;\n@@ -81,10 +80,8 @@\n import org.sleuthkit.datamodel.Account;\n import org.sleuthkit.datamodel.Blackboard.BlackboardException;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n-import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;\n import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_OS_ACCOUNT;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n-import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_COMMENT;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DATETIME;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED;\n@@ -196,7 +193,7 @@\n     }\n \n     ExtractRegistry() throws IngestModuleException {\n-        moduleName = NbBundle.getMessage(ExtractIE.class, \"ExtractRegistry.moduleName.text\");\n+        super(NbBundle.getMessage(ExtractIE.class, \"ExtractRegistry.moduleName.text\"));\n \n         final File rrRoot = InstalledFileLocator.getDefault().locate(\"rr\", ExtractRegistry.class.getPackage().getName(), false); //NON-NLS\n         if (rrRoot == null) {\n@@ -349,7 +346,7 @@ private void analyzeRegistryFiles() {\n                 logger.log(Level.SEVERE, null, ex);\n             }\n \n-            logger.log(Level.INFO, \"{0}- Now getting registry information from {1}\", new Object[]{moduleName, regFileNameLocal}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting registry information from {1}\", new Object[]{getName(), regFileNameLocal}); //NON-NLS\n             RegOutputFiles regOutputFiles = ripRegistryFile(regFileNameLocal, outputPathBase);\n             if (context.dataSourceIngestIsCancelled()) {\n                 break;\n@@ -660,16 +657,13 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n                             // Check if there is already an OS_INFO artifact for this file, and add to that if possible.\n                             ArrayList<BlackboardArtifact> results = tskCase.getBlackboardArtifacts(ARTIFACT_TYPE.TSK_OS_INFO, regFile.getId());\n                             if (results.isEmpty()) {\n-                                BlackboardArtifact bbart = regFile.newArtifact(ARTIFACT_TYPE.TSK_OS_INFO);\n-                                bbart.addAttributes(bbattributes);\n-\n-                                newArtifacts.add(bbart);\n+                                newArtifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_OS_INFO, regFile, bbattributes));\n                             } else {\n                                 results.get(0).addAttributes(bbattributes);\n                             }\n \n                         } catch (TskCoreException ex) {\n-                            logger.log(Level.SEVERE, \"Error adding installed program artifact to blackboard.\"); //NON-NLS\n+                            logger.log(Level.SEVERE, String.format(\"Error adding installed program artifact to blackboard for file %d.\", regFile.getId()), ex); //NON-NLS\n                         }\n                         break;\n                     case \"Profiler\": // NON-NLS\n@@ -710,15 +704,12 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n                             // Check if there is already an OS_INFO artifact for this file and add to that if possible\n                             ArrayList<BlackboardArtifact> results = tskCase.getBlackboardArtifacts(ARTIFACT_TYPE.TSK_OS_INFO, regFile.getId());\n                             if (results.isEmpty()) {\n-                                BlackboardArtifact bbart = regFile.newArtifact(ARTIFACT_TYPE.TSK_OS_INFO);\n-                                bbart.addAttributes(bbattributes);\n-\n-                                newArtifacts.add(bbart);\n+                                newArtifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_OS_INFO, regFile, bbattributes));\n                             } else {\n                                 results.get(0).addAttributes(bbattributes);\n                             }\n                         } catch (TskCoreException ex) {\n-                            logger.log(Level.SEVERE, \"Error adding os info artifact to blackboard.\"); //NON-NLS\n+                            logger.log(Level.SEVERE, String.format(\"Error adding installed os_info to blackboard for file %d.\", regFile.getId()), ex); //NON-NLS\n                         }\n                         break;\n                     case \"CompName\": // NON-NLS\n@@ -748,15 +739,12 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n                             // Check if there is already an OS_INFO artifact for this file and add to that if possible\n                             ArrayList<BlackboardArtifact> results = tskCase.getBlackboardArtifacts(ARTIFACT_TYPE.TSK_OS_INFO, regFile.getId());\n                             if (results.isEmpty()) {\n-                                BlackboardArtifact bbart = regFile.newArtifact(ARTIFACT_TYPE.TSK_OS_INFO);\n-                                bbart.addAttributes(bbattributes);\n-\n-                                newArtifacts.add(bbart);\n+                                newArtifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_OS_INFO, regFile, bbattributes));\n                             } else {\n                                 results.get(0).addAttributes(bbattributes);\n                             }\n                         } catch (TskCoreException ex) {\n-                            logger.log(Level.SEVERE, \"Error adding os info artifact to blackboard.\", ex); //NON-NLS\n+                            logger.log(Level.SEVERE, String.format(\"Error adding os_info artifact to blackboard for file %d.\", regFile.getId()), ex); //NON-NLS\n                         }\n                         break;\n                     default:\n@@ -783,7 +771,8 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n                                         Long usbMtime = Long.parseLong(artnode.getAttribute(\"mtime\")); //NON-NLS\n                                         usbMtime = Long.valueOf(usbMtime.toString());\n \n-                                        BlackboardArtifact bbart = regFile.newArtifact(ARTIFACT_TYPE.TSK_DEVICE_ATTACHED);\n+//                                        BlackboardArtifact bbart = regFile.newArtifact(ARTIFACT_TYPE.TSK_DEVICE_ATTACHED);\n+\n                                         bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME, parentModuleName, usbMtime));\n                                         String dev = artnode.getAttribute(\"dev\"); //NON-NLS\n                                         String make = \"\";\n@@ -800,11 +789,11 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n                                         bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DEVICE_MAKE, parentModuleName, make));\n                                         bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DEVICE_MODEL, parentModuleName, model));\n                                         bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DEVICE_ID, parentModuleName, value));\n-                                        bbart.addAttributes(bbattributes);\n+//                                        bbart.addAttributes(bbattributes);\n \n-                                        newArtifacts.add(bbart);\n+                                        newArtifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_DEVICE_ATTACHED, regFile, bbattributes));\n                                     } catch (TskCoreException ex) {\n-                                        logger.log(Level.SEVERE, \"Error adding device attached artifact to blackboard.\", ex); //NON-NLS\n+                                        logger.log(Level.SEVERE, String.format(\"Error adding device_attached artifact to blackboard for file %d.\", regFile.getId()), ex); //NON-NLS\n                                     }\n                                     break;\n                                     case \"uninstall\": //NON-NLS\n@@ -1060,9 +1049,11 @@ private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader)\n                     addBlueToothAttribute(line, attributes, TSK_DATETIME);\n                     line = reader.readLine();\n                     addBlueToothAttribute(line, attributes, TSK_DATETIME_ACCESSED);\n-                    BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_BLUETOOTH_PAIRING, regFile, attributes);\n-                    if (bba != null) {\n-                        bbartifacts.add(bba);\n+                    \n+                    try {\n+                        bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_BLUETOOTH_PAIRING, regFile, attributes));\n+                    } catch (TskCoreException ex) {\n+                        logger.log(Level.SEVERE, String.format(\"Failed to create bluetooth_pairing artifact for file %d\", regFile.getId()), ex);\n                     }\n                     // Read blank line between records then next read line is start of next block\n                     reader.readLine();\n@@ -1246,7 +1237,7 @@ private boolean parseSamPluginOutput(String regFilePath, AbstractFile regAbstrac\n                     getRAModuleName(), userInfo.get(SID_KEY)));\n \n             bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_NAME,\n-                    this.moduleName, userInfo.get(USERNAME_KEY)));\n+                    getRAModuleName(), userInfo.get(USERNAME_KEY)));\n         }\n \n         String value = userInfo.get(ACCOUNT_CREATED_KEY);\n@@ -1513,13 +1504,16 @@ private void parseBamKey(AbstractFile regFile, BufferedReader reader, String com\n             attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_NAME, getName(), userName));\n             attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME, getName(), progRunDateTime));\n             attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_COMMENT, getName(), comment));\n-            BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_PROG_RUN, regFile, attributes);\n-            if (bba != null) {\n+            \n+            try {\n+                BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_PROG_RUN, regFile, attributes);\n                 bbartifacts.add(bba);\n                 bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n                 if (bba != null) {\n                     bbartifacts.add(bba);\n                 }\n+            } catch (TskCoreException ex) {\n+                logger.log(Level.SEVERE, String.format(\"Failed to create TSK_PROG_RUN artifact for file %d\", regFile.getId()), ex);\n             }\n             line = reader.readLine();\n         }\n@@ -1578,14 +1572,18 @@ private void parseAdobeMRUList(AbstractFile regFile, BufferedReader reader, Stri\n                     attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n                     attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED, getName(), adobeUsedTime));\n                     attributes.add(new BlackboardAttribute(TSK_COMMENT, getName(), comment));\n-                    BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n-                    if (bba != null) {\n-                        bbartifacts.add(bba);\n-                        fileName = fileName.replace(\"\\0\", \"\");\n-                        bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n+                    try{\n+                        BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n                         if (bba != null) {\n                             bbartifacts.add(bba);\n+                            fileName = fileName.replace(\"\\0\", \"\");\n+                            bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n+                            if (bba != null) {\n+                                bbartifacts.add(bba);\n+                            }\n                         }\n+                    } catch(TskCoreException ex) {\n+                        logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", regFile.getId()), ex);\n                     }\n                     line = reader.readLine();\n                 }\n@@ -1626,17 +1624,21 @@ private void parseMediaPlayerMRUList(AbstractFile regFile, BufferedReader reader\n                     Collection<BlackboardAttribute> attributes = new ArrayList<>();\n                     attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n                     attributes.add(new BlackboardAttribute(TSK_COMMENT, getName(), comment));\n-                    BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n-                    if (bba != null) {\n-                        bbartifacts.add(bba);\n-                        bba = createAssociatedArtifact(fileName, bba);\n+                    try{\n+                        BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n                         if (bba != null) {\n                             bbartifacts.add(bba);\n-                            bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n+                            bba = createAssociatedArtifact(fileName, bba);\n                             if (bba != null) {\n                                 bbartifacts.add(bba);\n+                                bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n+                                if (bba != null) {\n+                                    bbartifacts.add(bba);\n+                                }\n                             }\n                         }\n+                    } catch(TskCoreException ex) {\n+                        logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", regFile.getId()), ex);\n                     }\n                     line = reader.readLine();\n                 }\n@@ -1678,13 +1680,17 @@ private void parseGenericMRUList(AbstractFile regFile, BufferedReader reader, St\n                     Collection<BlackboardAttribute> attributes = new ArrayList<>();\n                     attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n                     attributes.add(new BlackboardAttribute(TSK_COMMENT, getName(), comment));\n-                    BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n-                    if (bba != null) {\n-                        bbartifacts.add(bba);\n-                        bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n+                    try{\n+                        BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n                         if (bba != null) {\n                             bbartifacts.add(bba);\n+                            bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n+                            if (bba != null) {\n+                                bbartifacts.add(bba);\n+                            }\n                         }\n+                    } catch(TskCoreException ex) {\n+                        logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", regFile.getId()), ex);\n                     }\n                     line = reader.readLine();\n                 }\n@@ -1726,13 +1732,15 @@ private void parseWinRARMRUList(AbstractFile regFile, BufferedReader reader, Str\n                         Collection<BlackboardAttribute> attributes = new ArrayList<>();\n                         attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n                         attributes.add(new BlackboardAttribute(TSK_COMMENT, getName(), comment));\n-                        BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n-                        if (bba != null) {\n+                        try{\n+                            BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n                             bbartifacts.add(bba);\n                             bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n                             if (bba != null) {\n                                 bbartifacts.add(bba);\n                             }\n+                        } catch(TskCoreException ex) {\n+                            logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", regFile.getId()), ex);\n                         }\n                         line = reader.readLine();\n                     }\n@@ -1769,13 +1777,16 @@ private void parse7ZipMRU(AbstractFile regFile, BufferedReader reader, String co\n                 Collection<BlackboardAttribute> attributes = new ArrayList<>();\n                 attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n                 attributes.add(new BlackboardAttribute(TSK_COMMENT, getName(), comment));\n-                BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n-                if (bba != null) {\n+                try{\n+                    BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n                     bbartifacts.add(bba);\n                     bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n                     if (bba != null) {\n                         bbartifacts.add(bba);\n                     }\n+                \n+                } catch(TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", regFile.getId()), ex);\n                 }\n                 line = reader.readLine();\n                 line = line.trim();\n@@ -1819,13 +1830,15 @@ private void parseOfficeDocs2010MRUList(AbstractFile regFile, BufferedReader rea\n             attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n             attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED, getName(), docDate));\n             attributes.add(new BlackboardAttribute(TSK_COMMENT, getName(), comment));\n-            BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n-            if (bba != null) {\n+            try{\n+                BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);       \n                 bbartifacts.add(bba);\n                 bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n                 if (bba != null) {\n                     bbartifacts.add(bba);\n                 }\n+            } catch(TskCoreException ex) {\n+                logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", regFile.getId()), ex);\n             }\n             line = reader.readLine();\n             line = line.trim();\n@@ -1882,13 +1895,15 @@ private void parseOfficeTrustRecords(AbstractFile regFile, BufferedReader reader\n                 attributes.add(new BlackboardAttribute(TSK_PATH, getName(), fileName));\n                 attributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED, getName(), usedTime));\n                 attributes.add(new BlackboardAttribute(TSK_COMMENT, getName(), comment));\n-                BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);\n-                if (bba != null) {\n+                try{\n+                    BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, regFile, attributes);         \n                     bbartifacts.add(bba);\n                     bba = createAssociatedArtifact(FilenameUtils.normalize(fileName, true), bba);\n                     if (bba != null) {\n                         bbartifacts.add(bba);\n                     }\n+                } catch(TskCoreException ex) {\n+                   logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", regFile.getId()), ex); \n                 }\n                 line = line.trim();\n             }\n@@ -1918,15 +1933,7 @@ private BlackboardArtifact createAssociatedArtifact(String filePathName, Blackbo\n             if (!sourceFiles.isEmpty()) {\n                 for (AbstractFile sourceFile : sourceFiles) {\n                     if (sourceFile.getParentPath().endsWith(filePath)) {\n-                        Collection<BlackboardAttribute> bbattributes2 = new ArrayList<>();\n-                        bbattributes2.addAll(Arrays.asList(\n-                                new BlackboardAttribute(TSK_ASSOCIATED_ARTIFACT, this.getName(),\n-                                        bba.getArtifactID())));\n-\n-                        BlackboardArtifact associatedObjectBba = createArtifactWithAttributes(TSK_ASSOCIATED_OBJECT, sourceFile, bbattributes2);\n-                        if (associatedObjectBba != null) {\n-                            return associatedObjectBba;\n-                        }\n+                        return createAssociatedArtifact(sourceFile, bba);\n                     }\n                 }\n             }\n@@ -2226,7 +2233,9 @@ private void createOrUpdateOsAccount(AbstractFile file, String sid, String userN\n \n         if (homeDir != null && !homeDir.isEmpty()) {\n             List<OsAccountAttribute> attributes = new ArrayList<>();\n-            attributes.add(createOsAccountAttribute(TSK_HOME_DIR, homeDir, osAccount, host, file));\n+            String dir = homeDir.replaceFirst(\"^(%\\\\w*%)\", \"\");\n+            dir = dir.replace(\"\\\\\", \"/\");\n+            attributes.add(createOsAccountAttribute(TSK_HOME_DIR, dir, osAccount, host, file));\n             osAccount.addAttributes(attributes);\n         }\n "
  },
  {
    "sha": "15575ab61d0d819603b89c2094ef667ded7a358f",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSafari.java",
    "status": "modified",
    "additions": 31,
    "deletions": 27,
    "changes": 58,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSafari.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSafari.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSafari.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -49,7 +49,10 @@\n import org.sleuthkit.autopsy.recentactivity.BinaryCookieReader.Cookie;\n import org.sleuthkit.datamodel.AbstractFile;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n-import org.sleuthkit.datamodel.BlackboardAttribute;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY;\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.TskCoreException;\n import org.xml.sax.SAXException;\n@@ -98,14 +101,6 @@\n         \"Progress_Message_Safari_Downloads=Safari Downloads\",\n     })\n \n-    /**\n-     * Extract the bookmarks, cookies, downloads and history from Safari.\n-     *\n-     */\n-    ExtractSafari() {\n-\n-    }\n-\n     @Override\n     protected String getName() {\n         return Bundle.ExtractSafari_Module_Name();\n@@ -430,10 +425,12 @@ private void getCookies(IngestJobContext context, AbstractFile file) throws TskC\n             String title = row.get(HEAD_TITLE).toString();\n             Long time = (Double.valueOf(row.get(HEAD_TIME).toString())).longValue();\n \n-            BlackboardArtifact bbart = origFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY);\n-            bbart.addAttributes(createHistoryAttribute(url, time, null, title,\n-                    this.getName(), NetworkUtils.extractDomain(url), null));\n-            bbartifacts.add(bbart);\n+            bbartifacts.add(\n+                    createArtifactWithAttributes(\n+                            TSK_WEB_HISTORY, \n+                            origFile, \n+                            createHistoryAttribute(url, time, null, title,\n+                    this.getName(), NetworkUtils.extractDomain(url), null)));\n         }\n \n         return bbartifacts;\n@@ -564,10 +561,19 @@ private void getCookies(IngestJobContext context, AbstractFile file) throws TskC\n                 }\n                 \n                 Cookie cookie = iter.next();\n-\n-                BlackboardArtifact bbart = origFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_COOKIE);\n-                bbart.addAttributes(createCookieAttributes(cookie.getURL(), cookie.getCreationDate(), null, cookie.getExpirationDate(), cookie.getName(), cookie.getValue(), this.getName(), NetworkUtils.extractDomain(cookie.getURL())));\n-                bbartifacts.add(bbart);\n+                \n+                bbartifacts.add(\n+                        createArtifactWithAttributes(\n+                                TSK_WEB_COOKIE, \n+                                origFile, \n+                                createCookieAttributes(\n+                                        cookie.getURL(), \n+                                        cookie.getCreationDate(), \n+                                        null, \n+                                        cookie.getExpirationDate(), \n+                                        cookie.getName(), cookie.getValue(), \n+                                        this.getName(), \n+                                        NetworkUtils.extractDomain(cookie.getURL()))));\n             }\n         }\n \n@@ -615,9 +621,12 @@ private void parseBookmarkDictionary(Collection<BlackboardArtifact> bbartifacts,\n             }\n \n             if (url != null || title != null) {\n-                BlackboardArtifact bbart = origFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_BOOKMARK);\n-                bbart.addAttributes(createBookmarkAttributes(url, title, null, getName(), NetworkUtils.extractDomain(url)));\n-                bbartifacts.add(bbart);\n+                bbartifacts.add(createArtifactWithAttributes(TSK_WEB_BOOKMARK, origFile,\n+                        createBookmarkAttributes(url, \n+                                title, \n+                                null, \n+                                getName(), \n+                                NetworkUtils.extractDomain(url))));\n             }\n         }\n     }\n@@ -656,17 +665,12 @@ private void parseBookmarkDictionary(Collection<BlackboardArtifact> bbartifacts,\n             time = date.getDate().getTime();\n         }\n \n-        BlackboardArtifact webDownloadArtifact = origFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD);\n-        webDownloadArtifact.addAttributes(this.createDownloadAttributes(path, pathID, url, time, NetworkUtils.extractDomain(url), getName()));\n+        BlackboardArtifact webDownloadArtifact = createArtifactWithAttributes(TSK_WEB_DOWNLOAD, origFile, createDownloadAttributes(path, pathID, url, time, NetworkUtils.extractDomain(url), getName())); \n         bbartifacts.add(webDownloadArtifact);\n         \n         // find the downloaded file and create a TSK_ASSOCIATED_OBJECT for it, associating it with the TSK_WEB_DOWNLOAD artifact.\n         for (AbstractFile downloadedFile : fileManager.findFiles(dataSource, FilenameUtils.getName(path), FilenameUtils.getPath(path))) {\n-            BlackboardArtifact associatedObjectArtifact = downloadedFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT);\n-            associatedObjectArtifact.addAttribute(\n-                    new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT,\n-                            RecentActivityExtracterModuleFactory.getModuleName(), webDownloadArtifact.getArtifactID()));\n-            bbartifacts.add(associatedObjectArtifact);\n+            bbartifacts.add(createAssociatedArtifact(downloadedFile, webDownloadArtifact));\n             break;\n         }\n         "
  },
  {
    "sha": "53b65951f9718b4d40f8985c4354fb3a5253c46c",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSru.java",
    "status": "modified",
    "additions": 6,
    "deletions": 19,
    "changes": 25,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSru.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSru.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractSru.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -2,7 +2,7 @@\n  *\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2020 Basis Technology Corp.\n+ * Copyright 2020-2021 Basis Technology Corp.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,11 +46,8 @@\n import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n import org.sleuthkit.autopsy.ingest.IngestJobContext;\n import org.sleuthkit.datamodel.AbstractFile;\n-import org.sleuthkit.datamodel.Blackboard;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n-import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n-import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT;\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.TskCoreException;\n \n@@ -84,7 +81,7 @@\n         \"ExtractSru_module_name=System Resource Usage Extractor\"\n     })\n     ExtractSru() {\n-        this.moduleName = Bundle.ExtractSru_module_name();\n+        super(Bundle.ExtractSru_module_name());\n     }\n \n     @Messages({\n@@ -370,8 +367,7 @@ private void createNetUsageArtifacts(String sruDb, AbstractFile sruAbstractFile)\n                                 BlackboardAttribute.ATTRIBUTE_TYPE.TSK_COMMENT, getName(), NETWORK_USAGE_SOURCE_NAME));\n \n                 try {\n-                    BlackboardArtifact bbart = sruAbstractFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_PROG_RUN);\n-                    bbart.addAttributes(bbattributes);\n+                    BlackboardArtifact bbart = createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE.TSK_PROG_RUN, sruAbstractFile, bbattributes);\n                     bba.add(bbart);\n                     BlackboardArtifact associateBbArtifact = createAssociatedArtifact(applicationName.toLowerCase(), bbart);\n                     if (associateBbArtifact != null) {\n@@ -427,8 +423,7 @@ private void createAppUsageArtifacts(String sruDb, AbstractFile sruAbstractFile)\n                                 BlackboardAttribute.ATTRIBUTE_TYPE.TSK_COMMENT, getName(), APPLICATION_USAGE_SOURCE_NAME));\n \n                 try {\n-                    BlackboardArtifact bbart = sruAbstractFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_PROG_RUN);\n-                    bbart.addAttributes(bbattributes);\n+                    BlackboardArtifact bbart = createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE.TSK_PROG_RUN, sruAbstractFile, bbattributes);\n                     bba.add(bbart);\n                     BlackboardArtifact associateBbArtifact = createAssociatedArtifact(applicationName.toLowerCase(), bbart);\n                     if (associateBbArtifact != null) {\n@@ -459,18 +454,10 @@ private void createAppUsageArtifacts(String sruDb, AbstractFile sruAbstractFile)\n      *\n      * @returnv BlackboardArtifact or a null value\n      */\n-    private BlackboardArtifact createAssociatedArtifact(String filePathName, BlackboardArtifact bba) {\n+    private BlackboardArtifact createAssociatedArtifact(String filePathName, BlackboardArtifact bba) throws TskCoreException {\n         if (applicationFilesFound.containsKey(filePathName)) {\n             AbstractFile sourceFile = applicationFilesFound.get(filePathName);\n-            Collection<BlackboardAttribute> bbattributes2 = new ArrayList<>();\n-            bbattributes2.addAll(Arrays.asList(\n-                    new BlackboardAttribute(TSK_ASSOCIATED_ARTIFACT, this.getName(),\n-                            bba.getArtifactID())));\n-\n-            BlackboardArtifact associatedObjectBba = createArtifactWithAttributes(TSK_ASSOCIATED_OBJECT, sourceFile, bbattributes2);\n-            if (associatedObjectBba != null) {\n-                return associatedObjectBba;\n-            }\n+            return createAssociatedArtifact(sourceFile, bba);\n         }\n \n         return null;"
  },
  {
    "sha": "50cf7ce90b11520da35b25925735d74715bad698",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractWebAccountType.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractWebAccountType.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractWebAccountType.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractWebAccountType.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -1,7 +1,7 @@\n /*\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2020 Basis Technology Corp.\n+ * Copyright 2020-2021 Basis Technology Corp.\n  * Contact: carrier <at> sleuthkit <dot> org\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n@@ -45,7 +45,7 @@\n     private static final Logger logger = Logger.getLogger(ExtractWebAccountType.class.getName());\n \n     ExtractWebAccountType() {\n-        moduleName = NbBundle.getMessage(ExtractWebAccountType.class, \"ExtractWebAccountType.moduleName.text\");\n+        super(NbBundle.getMessage(ExtractWebAccountType.class, \"ExtractWebAccountType.moduleName.text\"));\n     }\n \n     private static final List<BlackboardArtifact.Type> QUERY_ARTIFACTS = Arrays.asList("
  },
  {
    "sha": "b8c8d18dbafd7a86fb655fb8af3c05bba23135c0",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractZoneIdentifier.java",
    "status": "modified",
    "additions": 9,
    "deletions": 39,
    "changes": 48,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractZoneIdentifier.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractZoneIdentifier.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractZoneIdentifier.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -2,7 +2,7 @@\n  *\n  * Autopsy Forensic Browser\n  *\n- * Copyright 2019 Basis Technology Corp.\n+ * Copyright 2019-2021 Basis Technology Corp.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,7 +21,6 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n@@ -38,16 +37,15 @@\n import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;\n import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n-import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH_ID;\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.ReadContentInputStream;\n import org.sleuthkit.datamodel.TskCoreException;\n \n /**\n- * Extract the <i>:Zone.Indentifier<i> alternate data stream files.  A file with\n- * a <i>:Zone.Indentifier<i> extention contains information about the similarly \n- * named (with out zone identifer extension) downloaded file.\n+ * Extract the <i>:Zone.Identifier<i> alternate data stream files.  A file with\n+ * a <i>:Zone.Identifier<i> extension contains information about the similarly \n+ * named (with out zone identifier extension) downloaded file.\n  */\n final class ExtractZoneIdentifier extends Extract {\n \n@@ -152,15 +150,10 @@ private void processZoneFile(IngestJobContext context, Content dataSource,\n                 // The zone identifier file is the parent of this artifact \n                 // because it is the file we parsed to get the data\n                 BlackboardArtifact downloadBba = createDownloadArtifact(zoneFile, zoneInfo, downloadFile);\n-                if (downloadBba != null) {\n-                    downloadArtifacts.add(downloadBba);\n-                    // create a TSK_ASSOCIATED_OBJECT for the downloaded file, associating it with the TSK_WEB_DOWNLOAD artifact.\n-                    if (downloadFile.getArtifactsCount(TSK_ASSOCIATED_OBJECT) == 0) {\n-                        BlackboardArtifact associatedObjectBba = createAssociatedObjectArtifact(downloadFile, downloadBba);\n-                        if (associatedObjectBba != null) {\n-                            associatedObjectArtifacts.add(associatedObjectBba);\n-                        }\n-                    }\n+                downloadArtifacts.add(downloadBba);\n+                // create a TSK_ASSOCIATED_OBJECT for the downloaded file, associating it with the TSK_WEB_DOWNLOAD artifact.\n+                if (downloadFile.getArtifactsCount(TSK_ASSOCIATED_OBJECT) == 0) {\n+                     associatedObjectArtifacts.add(createAssociatedArtifact(downloadFile, downloadBba));\n                 }\n             }\n             \n@@ -201,29 +194,6 @@ private AbstractFile getDownloadFile(Content dataSource, AbstractFile zoneFile)\n         return downloadFile;\n     }\n \n-    /**\n-     * Create a Associated Object Artifact for the given ZoneIdentifierInfo\n-     * object.\n-     *\n-     * @param downloadFile AbstractFile representing the file downloaded, not\n-     * the zone identifier file.\n-     * @param downloadBba TSK_WEB_DOWNLOAD artifact to associate with.\n-     *\n-     * @return TSK_ASSOCIATED_OBJECT artifact.\n-     */\n-    private BlackboardArtifact createAssociatedObjectArtifact(AbstractFile downloadFile, BlackboardArtifact downloadBba) {\n-\n-        Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n-      \n-        bbattributes.addAll(Arrays.asList(\n-                new BlackboardAttribute(TSK_ASSOCIATED_ARTIFACT,\n-                        RecentActivityExtracterModuleFactory.getModuleName(),\n-                        downloadBba.getArtifactID())\n-                            ));\n-\n-        return createArtifactWithAttributes(TSK_ASSOCIATED_OBJECT, downloadFile, bbattributes);\n-    }\n-\n     /**\n      * Create a TSK_WEB_DOWNLOAD Artifact for the given zone identifier file.\n      *\n@@ -233,7 +203,7 @@ private BlackboardArtifact createAssociatedObjectArtifact(AbstractFile downloadF\n      *\n      * @return BlackboardArifact for the given parameters\n      */\n-    private BlackboardArtifact createDownloadArtifact(AbstractFile zoneFile, ZoneIdentifierInfo zoneInfo, AbstractFile downloadFile) {\n+    private BlackboardArtifact createDownloadArtifact(AbstractFile zoneFile, ZoneIdentifierInfo zoneInfo, AbstractFile downloadFile) throws TskCoreException {\n \n         String downloadFilePath = downloadFile.getParentPath() + downloadFile.getName();\n         "
  },
  {
    "sha": "0954081f3007920fd36de7db9d28f4ece48741f5",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Firefox.java",
    "status": "modified",
    "additions": 45,
    "deletions": 54,
    "changes": 99,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Firefox.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Firefox.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/Firefox.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -100,7 +100,7 @@\n     private IngestJobContext context;\n \n     Firefox() {\n-        moduleName = NbBundle.getMessage(Firefox.class, \"Firefox.moduleName\");\n+        super(NbBundle.getMessage(Firefox.class, \"Firefox.moduleName\"));\n     }\n \n     @Override\n@@ -204,7 +204,7 @@ private void getHistory() {\n                 break;\n             }\n             List<HashMap<String, Object>> tempList = this.dbConnect(temps, HISTORY_QUERY);\n-            logger.log(Level.INFO, \"{0} - Now getting history from {1} with {2} artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0} - Now getting history from {1} with {2} artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 \n                 if (context.dataSourceIngestIsCancelled()) {\n@@ -236,9 +236,11 @@ private void getHistory() {\n                         RecentActivityExtracterModuleFactory.getModuleName(), domain)); //NON-NLS\n \n                 }\n-                BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_HISTORY, historyFile, bbattributes);\n-                if (bbart != null) {\n-                    bbartifacts.add(bbart);\n+\n+                try {\n+                    bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_HISTORY, historyFile, bbattributes));\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create TSK_WEB_HISTORY artifact for file %d\", historyFile.getId()), ex);\n                 }\n             }\n             ++j;\n@@ -302,7 +304,7 @@ private void getBookmark() {\n                 break;\n             }\n             List<HashMap<String, Object>> tempList = this.dbConnect(temps, BOOKMARK_QUERY);\n-            logger.log(Level.INFO, \"{0} - Now getting bookmarks from {1} with {2} artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0} - Now getting bookmarks from {1} with {2} artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 \n                 if (context.dataSourceIngestIsCancelled()) {\n@@ -332,9 +334,10 @@ private void getBookmark() {\n                         RecentActivityExtracterModuleFactory.getModuleName(), domain)); //NON-NLS\n                 }\n \n-                BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_BOOKMARK, bookmarkFile, bbattributes);\n-                if (bbart != null) {\n-                    bbartifacts.add(bbart);\n+                try {\n+                    bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_BOOKMARK, bookmarkFile, bbattributes));\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create TSK_WEB_BOOKMARK artifact for file %d\", bookmarkFile.getId()), ex);\n                 }\n             }\n             ++j;\n@@ -410,7 +413,7 @@ private void getCookie() {\n             }\n \n             List<HashMap<String, Object>> tempList = this.dbConnect(temps, query);\n-            logger.log(Level.INFO, \"{0} - Now getting cookies from {1} with {2} artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0} - Now getting cookies from {1} with {2} artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 \n                 if (context.dataSourceIngestIsCancelled()) {\n@@ -448,9 +451,10 @@ private void getCookie() {\n                         RecentActivityExtracterModuleFactory.getModuleName(), domain));\n                 }\n \n-                BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_COOKIE, cookiesFile, bbattributes);\n-                if (bbart != null) {\n-                    bbartifacts.add(bbart);\n+                try {\n+                    bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_COOKIE, cookiesFile, bbattributes));\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create TSK_WEB_COOKIE artifact for file %d\", cookiesFile.getId()), ex);\n                 }\n             }\n             ++j;\n@@ -526,7 +530,7 @@ private void getDownloadPreVersion24() {\n             }\n \n             List<HashMap<String, Object>> tempList = this.dbConnect(temps, DOWNLOAD_QUERY);\n-            logger.log(Level.INFO, \"{0}- Now getting downloads from {1} with {2} artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting downloads from {1} with {2} artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 \n                 if (context.dataSourceIngestIsCancelled()) {\n@@ -574,27 +578,20 @@ private void getDownloadPreVersion24() {\n                             RecentActivityExtracterModuleFactory.getModuleName(),\n                             domain)); //NON-NLS\n                 }\n-\n-                BlackboardArtifact webDownloadArtifact = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD, downloadsFile, bbattributes);\n-                if (webDownloadArtifact != null) {\n+                try {\n+                    BlackboardArtifact webDownloadArtifact = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD, downloadsFile, bbattributes);\n                     bbartifacts.add(webDownloadArtifact);\n \n                     // find the downloaded file and create a TSK_ASSOCIATED_OBJECT for it, associating it with the TSK_WEB_DOWNLOAD artifact.\n-                    try {\n-                        for (AbstractFile downloadedFile : fileManager.findFiles(dataSource, FilenameUtils.getName(downloadedFilePath), FilenameUtils.getPath(downloadedFilePath))) {\n-                            BlackboardArtifact associatedObjectArtifact = downloadedFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT);\n-                            associatedObjectArtifact.addAttribute(\n-                                    new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT,\n-                                            RecentActivityExtracterModuleFactory.getModuleName(), webDownloadArtifact.getArtifactID()));\n-\n-                            bbartifacts.add(associatedObjectArtifact);\n-                            break;\n-                        }\n-                    } catch (TskCoreException ex) {\n-                        logger.log(Level.SEVERE, String.format(\"Error creating associated object artifact for file  '%s'\",\n-                                downloadedFilePath), ex); //NON-NLS\n+                    for (AbstractFile downloadedFile : fileManager.findFiles(dataSource, FilenameUtils.getName(downloadedFilePath), FilenameUtils.getPath(downloadedFilePath))) {\n+                        bbartifacts.add(createAssociatedArtifact(downloadedFile, webDownloadArtifact));\n+                        break;\n                     }\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error creating TSK_WEB_DOWNLOAD or TSK_ASSOCIATED_ARTIFACT artifact for file '%d'\",\n+                            downloadsFile.getId()), ex); //NON-NLS\n                 }\n+                \n             }\n             if (errors > 0) {\n                 this.addErrorMessage(\n@@ -668,7 +665,7 @@ private void getDownloadVersion24() {\n \n             List<HashMap<String, Object>> tempList = this.dbConnect(temps, DOWNLOAD_QUERY_V24);\n \n-            logger.log(Level.INFO, \"{0} - Now getting downloads from {1} with {2} artifacts identified.\", new Object[]{moduleName, temps, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0} - Now getting downloads from {1} with {2} artifacts identified.\", new Object[]{getName(), temps, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 \n                 if (context.dataSourceIngestIsCancelled()) {\n@@ -716,26 +713,19 @@ private void getDownloadVersion24() {\n                     bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DOMAIN,\n                         RecentActivityExtracterModuleFactory.getModuleName(), domain)); //NON-NLS\n                 }\n-\n-                BlackboardArtifact webDownloadArtifact = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD, downloadsFile, bbattributes);\n-                if (webDownloadArtifact != null) {\n+                try {\n+                    BlackboardArtifact webDownloadArtifact = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_DOWNLOAD, downloadsFile, bbattributes);\n                     bbartifacts.add(webDownloadArtifact);\n-                \n+\n                     // find the downloaded file and create a TSK_ASSOCIATED_OBJECT for it, associating it with the TSK_WEB_DOWNLOAD artifact.\n-                     try {\n-                        for (AbstractFile downloadedFile : fileManager.findFiles(dataSource, FilenameUtils.getName(downloadedFilePath), FilenameUtils.getPath(downloadedFilePath))) {\n-                            BlackboardArtifact associatedObjectArtifact =  downloadedFile.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT);\n-                            associatedObjectArtifact.addAttribute(\n-                                    new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT,\n-                                            RecentActivityExtracterModuleFactory.getModuleName(), webDownloadArtifact.getArtifactID()));\n-                            bbartifacts.add(associatedObjectArtifact);\n-                            break;\n-                        }\n-                    } catch (TskCoreException ex) {\n-                        logger.log(Level.SEVERE, String.format(\"Error creating associated object artifact for file  '%s'\",\n-                            downloadedFilePath), ex); //NON-NLS\n+                    for (AbstractFile downloadedFile : fileManager.findFiles(dataSource, FilenameUtils.getName(downloadedFilePath), FilenameUtils.getPath(downloadedFilePath))) {\n+                        bbartifacts.add(createAssociatedArtifact(downloadedFile, webDownloadArtifact));\n+                        break;\n                     }\n-                }\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Error creating associated object artifact for file  '%s'\",\n+                            downloadedFilePath), ex); //NON-NLS\n+                } \n             }\n             if (errors > 0) {\n                 this.addErrorMessage(NbBundle.getMessage(this.getClass(), \"Firefox.getDlV24.errMsg.errParsingArtifacts\",\n@@ -818,7 +808,7 @@ private void getFormsHistory() {\n             String formHistoryQuery = (isFirefoxV64) ? FORMHISTORY_QUERY_V64 : FORMHISTORY_QUERY;\n            \n             List<HashMap<String, Object>> tempList = this.dbConnect(tempFilePath, formHistoryQuery);\n-            logger.log(Level.INFO, \"{0} - Now getting history from {1} with {2} artifacts identified.\", new Object[]{moduleName, tempFilePath, tempList.size()}); //NON-NLS\n+            logger.log(Level.INFO, \"{0} - Now getting history from {1} with {2} artifacts identified.\", new Object[]{getName(), tempFilePath, tempList.size()}); //NON-NLS\n             for (HashMap<String, Object> result : tempList) {\n                 \n                 if (context.dataSourceIngestIsCancelled()) {\n@@ -856,10 +846,11 @@ private void getFormsHistory() {\n                         (Integer.valueOf(result.get(\"timesUsed\").toString())))); //NON-NLS\n                \n                 }\n-                // Add artifact\n-                BlackboardArtifact bbart = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_FORM_AUTOFILL, formHistoryFile, bbattributes);\n-                if (bbart != null) {\n-                    bbartifacts.add(bbart);\n+                try {\n+                    // Add artifact\n+                    bbartifacts.add(createArtifactWithAttributes(ARTIFACT_TYPE.TSK_WEB_FORM_AUTOFILL, formHistoryFile, bbattributes));\n+                } catch (TskCoreException ex) {\n+                    logger.log(Level.SEVERE, String.format(\"Failed to create TSK_WEB_FORM_AUTOFILL artifact for file %d\", formHistoryFile.getId()), ex);\n                 }\n             }\n             ++j;\n@@ -919,7 +910,7 @@ private void getAutofillProfiles() {\n                 continue;\n             }\n \n-            logger.log(Level.INFO, \"{0}- Now getting Bookmarks from {1}\", new Object[]{moduleName, temps}); //NON-NLS\n+            logger.log(Level.INFO, \"{0}- Now getting Bookmarks from {1}\", new Object[]{getName(), temps}); //NON-NLS\n             File dbFile = new File(temps);\n             if (context.dataSourceIngestIsCancelled()) {\n                 dbFile.delete();"
  },
  {
    "sha": "b92ebffa98f9788fee70347bfe2907216284b2f3",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAImageIngestModule.java",
    "status": "modified",
    "additions": 18,
    "deletions": 7,
    "changes": 25,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAImageIngestModule.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAImageIngestModule.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAImageIngestModule.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -26,6 +26,7 @@\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.logging.Level;\n import org.openide.util.NbBundle;\n import org.sleuthkit.autopsy.casemodule.Case;\n@@ -39,6 +40,9 @@\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.autopsy.ingest.IngestModule.ProcessResult;\n import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.datamodel.DataSource;\n+import org.sleuthkit.datamodel.OsAccount;\n+import org.sleuthkit.datamodel.SleuthkitCase;\n \n /**\n  * Recent activity image ingest module\n@@ -51,13 +55,17 @@\n     private final IngestServices services = IngestServices.getInstance();\n     private IngestJobContext context;\n     private final StringBuilder subCompleted = new StringBuilder();\n+    protected SleuthkitCase tskCase;\n+    private RAOsAccountCache accountCache = new RAOsAccountCache();\n \n     RAImageIngestModule() {\n     }\n \n     @Override\n     public void startUp(IngestJobContext context) throws IngestModuleException {\n         this.context = context;\n+        \n+        tskCase = Case.getCurrentCase().getSleuthkitCase();\n \n         Extract iexplore;\n         Extract edge;\n@@ -83,17 +91,17 @@ public void startUp(IngestJobContext context) throws IngestModuleException {\n         Extract webAccountType = new ExtractWebAccountType();\n         Extract messageDomainType = new DomainCategoryRunner();\n \n+        extractors.add(recentDocuments);\n+        extractors.add(registry); //  needs to run before the DataSourceUsageAnalyzer\n+        extractors.add(osExtract); // this needs to run before the DataSourceUsageAnalyzer\n+        extractors.add(dataSourceAnalyzer); //this needs to run after ExtractRegistry and ExtractOs\n         extractors.add(chrome);\n         extractors.add(firefox);\n         extractors.add(iexplore);\n         extractors.add(edge);\n         extractors.add(safari);\n-        extractors.add(recentDocuments);\n         extractors.add(SEUQA); // this needs to run after the web browser modules\n         extractors.add(webAccountType); // this needs to run after the web browser modules\n-        extractors.add(registry); // this should run after quicker modules like the browser modules and needs to run before the DataSourceUsageAnalyzer\n-        extractors.add(osExtract); // this needs to run before the DataSourceUsageAnalyzer\n-        extractors.add(dataSourceAnalyzer); //this needs to run after ExtractRegistry and ExtractOs\n         extractors.add(zoneInfo); // this needs to run after the web browser modules\n         extractors.add(recycleBin); // this needs to run after ExtractRegistry and ExtractOS\n         extractors.add(sru); \n@@ -132,7 +140,10 @@ public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress\n             progressBar.progress(extracter.getName(), i);\n \n             try {\n-                extracter.process(dataSource, context, progressBar);\n+                extracter.process(dataSource, context, progressBar, accountCache);\n+                if(extracter instanceof ExtractRegistry) {\n+                    accountCache.initialize(tskCase, ((DataSource)dataSource).getHost());\n+                }\n             } catch (Exception ex) {\n                 logger.log(Level.SEVERE, \"Exception occurred in \" + extracter.getName(), ex); //NON-NLS\n                 subCompleted.append(NbBundle.getMessage(this.getClass(), \"RAImageIngestModule.process.errModFailed\",\n@@ -220,7 +231,7 @@ public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress\n      *\n      * @return Path to directory\n      */\n-    protected static String getRATempPath(Case a_case, String mod) {\n+    static String getRATempPath(Case a_case, String mod) {\n         String tmpDir = a_case.getTempDirectory() + File.separator + \"RecentActivity\" + File.separator + mod; //NON-NLS\n         File dir = new File(tmpDir);\n         if (dir.exists() == false) {\n@@ -239,7 +250,7 @@ protected static String getRATempPath(Case a_case, String mod) {\n      *\n      * @return Path to directory\n      */\n-    protected static String getRAOutputPath(Case a_case, String mod) {\n+    static String getRAOutputPath(Case a_case, String mod) {\n         String tmpDir = a_case.getModuleDirectory() + File.separator + \"RecentActivity\" + File.separator + mod; //NON-NLS\n         File dir = new File(tmpDir);\n         if (dir.exists() == false) {"
  },
  {
    "sha": "f5208807af303739c0d884ae1c21c327d3641b4d",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAOsAccountCache.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAOsAccountCache.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAOsAccountCache.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RAOsAccountCache.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -0,0 +1,130 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2021 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.recentactivity;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.Host;\n+import org.sleuthkit.datamodel.OsAccount;\n+import org.sleuthkit.datamodel.OsAccountAttribute;\n+import org.sleuthkit.datamodel.SleuthkitCase;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Cache of OsAccounts for a given host to be used by the various Recent\n+ * Activity Extractors.\n+ *\n+ */\n+final class RAOsAccountCache {\n+\n+    private final Map<String, OsAccount> accountCache = new HashMap<>();\n+\n+    /**\n+     * initialize the account map for the given host. This should be done after\n+     * the ExtractRegistry is run.\n+     *\n+     * @param tskCase\n+     * @param host\n+     *\n+     * @throws TskCoreException\n+     */\n+    void initialize(SleuthkitCase tskCase, Host host) throws TskCoreException {\n+        buildAccountMap(tskCase, host);\n+    }\n+\n+    /**\n+     * Returns the appropriate OsAccount for the given file.\n+     *\n+     * If the file is not associated with an OsAccount, try to find one based on\n+     * the location of the file.\n+     *\n+     * If the file is associated with the system account of S-1-5-32-544 use the\n+     * file path to determine which user account to associate the file with.\n+     *\n+     *\n+     * @param file The file to match with appropriate OsAccount.\n+     *\n+     * @return Optional OsAccount, may not be present if one is not found.\n+     *\n+     * @throws TskCoreException\n+     */\n+    Optional<OsAccount> getOsAccount(AbstractFile file) throws TskCoreException {\n+        Optional<OsAccount> optional = file.getOsAccount();\n+\n+        if (!optional.isPresent()) {\n+            return getAccountForPath(file.getParentPath());\n+        }\n+\n+        OsAccount osAccount = optional.get();\n+        if (osAccount.getName().equals(\"S-1-5-32-544\")) {\n+            return getAccountForPath(file.getParentPath());\n+        }\n+\n+        return optional;\n+    }\n+\n+    /**\n+     * Return a user account if the given path's parent directory is a user\n+     * account home directory.\n+     *\n+     * @param path Path to search.\n+     *\n+     * @return An Optional OsAccount if one was found.\n+     */\n+    private Optional<OsAccount> getAccountForPath(String path) {\n+        Path filePath = Paths.get(path.toLowerCase());\n+        // Check if the path might be a user path.\n+        if (filePath.startsWith(Paths.get(\"/users\")) || filePath.startsWith(\"/document and settings\")) {\n+            for (String key : accountCache.keySet()) {\n+                if (filePath.startsWith(Paths.get(key))) {\n+                    return Optional.of(accountCache.get(key));\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Build a map of user home directories to OsAccounts for the given host.\n+     *\n+     * @throws TskCoreException\n+     */\n+    private void buildAccountMap(SleuthkitCase tskCase, Host host) throws TskCoreException {\n+        BlackboardAttribute.Type homeDir = new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_HOME_DIR);\n+        List<OsAccount> accounts = tskCase.getOsAccountManager().getAccounts(host);\n+\n+        for (OsAccount account : accounts) {\n+            List<OsAccountAttribute> attributeList = account.getOsAccountAttributes();\n+\n+            for (OsAccountAttribute attribute : attributeList) {\n+                if (attribute.getHostId().isPresent()\n+                        && attribute.getHostId().get().equals(host.getId())\n+                        && attribute.getAttributeType().equals(homeDir)) {\n+                    accountCache.put(attribute.getValueString(), account);\n+                }\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "b0c119ae25204c4b6644648b5e3af5afe875d22c",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RecentDocumentsByLnk.java",
    "status": "modified",
    "additions": 12,
    "deletions": 19,
    "changes": 31,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RecentDocumentsByLnk.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RecentDocumentsByLnk.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/RecentDocumentsByLnk.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -2,7 +2,7 @@\n  *\n  * Autopsy Forensic Browser\n  * \n- * Copyright 2012-2014 Basis Technology Corp.\n+ * Copyright 2012-2021 Basis Technology Corp.\n  * \n  * Copyright 2012 42six Solutions.\n  * Contact: aebadirad <at> 42six <dot> com\n@@ -23,7 +23,6 @@\n package org.sleuthkit.autopsy.recentactivity;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.logging.Level;\n import org.apache.commons.io.FilenameUtils;\n@@ -44,8 +43,6 @@\n import org.sleuthkit.datamodel.TskCoreException;\n import org.sleuthkit.datamodel.AbstractFile;\n import org.sleuthkit.datamodel.ReadContentInputStream;\n-import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;\n-import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT;\n import org.sleuthkit.datamodel.TskData;\n \n /**\n@@ -126,13 +123,17 @@ private void getRecentDocuments() {\n                     NbBundle.getMessage(this.getClass(),\n                             \"RecentDocumentsByLnk.parentModuleName.noSpace\"),\n                     recentFile.getCrtime()));\n-            BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, recentFile, bbattributes);\n-            if(bba != null) {\n-                bbartifacts.add(bba);\n-                bba = createAssociatedArtifact(path, bba);\n-                if (bba != null) {\n+            try{\n+                BlackboardArtifact bba = createArtifactWithAttributes(ARTIFACT_TYPE.TSK_RECENT_OBJECT, recentFile, bbattributes);\n+                if(bba != null) {\n                     bbartifacts.add(bba);\n+                    bba = createAssociatedArtifact(path, bba);\n+                    if (bba != null) {\n+                        bbartifacts.add(bba);\n+                    }\n                 }\n+            } catch(TskCoreException ex) {\n+               logger.log(Level.SEVERE, String.format(\"Failed to create TSK_RECENT_OBJECT artifact for file %d\", recentFile.getId()), ex); \n             }\n         }\n         \n@@ -160,19 +161,11 @@ private BlackboardArtifact createAssociatedArtifact(String filePathName, Blackbo\n             sourceFiles = fileManager.findFiles(dataSource, fileName, filePath); //NON-NLS\n             for (AbstractFile sourceFile : sourceFiles) {\n                 if (sourceFile.getParentPath().endsWith(filePath)) {\n-                    Collection<BlackboardAttribute> bbattributes2 = new ArrayList<>();\n-                    bbattributes2.addAll(Arrays.asList(\n-                         new BlackboardAttribute(TSK_ASSOCIATED_ARTIFACT, this.getName(),\n-                         bba.getArtifactID())));\n-\n-                    BlackboardArtifact associatedObjectBba = createArtifactWithAttributes(TSK_ASSOCIATED_OBJECT, sourceFile, bbattributes2);\n-                    if (associatedObjectBba != null) {\n-                        return associatedObjectBba;\n-                    }\n+                    return createAssociatedArtifact(sourceFile, bba);\n                 }\n             }\n         } catch (TskCoreException ex) {\n-            logger.log(Level.WARNING, String.format(\"Error finding actual file %s. file may not exist\", filePathName)); //NON-NLS\n+            logger.log(Level.WARNING, String.format(\"Error finding actual file %s. file may not exist\", filePathName), ex); //NON-NLS\n         }\n        \n         return null;"
  },
  {
    "sha": "b57717e6484396af3802387e5ffcc901e3f2e229",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/SearchEngineURLQueryAnalyzer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/SearchEngineURLQueryAnalyzer.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/45c7a7e98b72d4a3f7c400fcee22d67f54b8294e/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/SearchEngineURLQueryAnalyzer.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/SearchEngineURLQueryAnalyzer.java?ref=45c7a7e98b72d4a3f7c400fcee22d67f54b8294e",
    "patch": "@@ -80,7 +80,7 @@\n     private IngestJobContext context;\n \n     SearchEngineURLQueryAnalyzer() {\n-        moduleName = NbBundle.getMessage(ExtractIE.class, \"SearchEngineURLQueryAnalyzer.moduleName.text\");\n+        super(NbBundle.getMessage(ExtractIE.class, \"SearchEngineURLQueryAnalyzer.moduleName.text\"));\n     }\n \n     /**"
  }
]
