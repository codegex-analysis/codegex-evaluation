[
  {
    "sha": "40b8e966a3777859f302ef93dfa348e252a949ca",
    "filename": "Core/build.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/build.xml",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/build.xml",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/build.xml?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -89,6 +89,11 @@\n             <fileset dir=\"${thirdparty.dir}/ImageMagick-7.0.10-27-portable-Q16-x64\"/>\n         </copy>\n \n+        <!--Copy DomainCategorization to release-->\n+        <copy todir=\"${basedir}/release/DomainCategorization\" >\n+            <fileset dir=\"${thirdparty.dir}/DomainCategorization\"/>\n+        </copy>\n+\n         <!-- The 'libgstlibav.dll' file is too big to store on GitHub, so we\n         have it stored in a ZIP file. We'll extract it in place and remove\n         the ZIP file afterward. -->"
  },
  {
    "sha": "be814d23a941526dfe47f3a9a418e90c3af8fb5c",
    "filename": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/JTablePanel.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/JTablePanel.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/JTablePanel.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/JTablePanel.java?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -351,6 +351,20 @@ public TableColumnModel getColumnModel() {\n         this.keyFunction = keyFunction;\n         return this;\n     }\n+    \n+    /**\n+     * Returns the selected items or null if no item is selected.\n+     * @return The selected items or null if no item is selected.\n+     */\n+    public List<T> getSelectedItems() {\n+        int selectedRow = this.table.getSelectedRow();\n+        int count = this.table.getSelectedRowCount();\n+        if (selectedRow < 0 || this.tableModel == null || selectedRow + count > this.tableModel.getDataRows().size()) {\n+            return null;\n+        } else {\n+            return this.tableModel.getDataRows().subList(selectedRow, selectedRow + count);\n+        }\n+    }\n \n     @Override\n     protected synchronized void setResults(List<T> data) {"
  },
  {
    "sha": "a863b48212bcd8c527a3c705249e41f1fb1a9633",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.form",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.form",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.form",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.form?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,138 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+\n+<Form version=\"1.3\" maxVersion=\"1.9\" type=\"org.netbeans.modules.form.forminfo.JDialogFormInfo\">\n+  <Properties>\n+    <Property name=\"defaultCloseOperation\" type=\"int\" value=\"2\"/>\n+  </Properties>\n+  <SyntheticProperties>\n+    <SyntheticProperty name=\"formSizePolicy\" type=\"int\" value=\"1\"/>\n+    <SyntheticProperty name=\"generateCenter\" type=\"boolean\" value=\"false\"/>\n+  </SyntheticProperties>\n+  <AuxValues>\n+    <AuxValue name=\"FormSettings_autoResourcing\" type=\"java.lang.Integer\" value=\"0\"/>\n+    <AuxValue name=\"FormSettings_autoSetComponentName\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_generateFQN\" type=\"java.lang.Boolean\" value=\"true\"/>\n+    <AuxValue name=\"FormSettings_generateMnemonicsCode\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_i18nAutoMode\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_layoutCodeTarget\" type=\"java.lang.Integer\" value=\"1\"/>\n+    <AuxValue name=\"FormSettings_listenerGenerationStyle\" type=\"java.lang.Integer\" value=\"0\"/>\n+    <AuxValue name=\"FormSettings_variablesLocal\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_variablesModifier\" type=\"java.lang.Integer\" value=\"2\"/>\n+  </AuxValues>\n+\n+  <Layout>\n+    <DimensionLayout dim=\"0\">\n+      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n+          <Group type=\"102\" attributes=\"0\">\n+              <EmptySpace max=\"-2\" attributes=\"0\"/>\n+              <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n+                  <Group type=\"102\" alignment=\"1\" attributes=\"0\">\n+                      <EmptySpace min=\"0\" pref=\"0\" max=\"32767\" attributes=\"0\"/>\n+                      <Component id=\"saveButton\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+                      <EmptySpace max=\"-2\" attributes=\"0\"/>\n+                      <Component id=\"cancelButton\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+                  </Group>\n+                  <Component id=\"validationLabel\" alignment=\"0\" max=\"32767\" attributes=\"0\"/>\n+                  <Group type=\"102\" alignment=\"0\" attributes=\"0\">\n+                      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n+                          <Component id=\"domainSuffixLabel\" alignment=\"0\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+                          <Component id=\"categoryLabel\" alignment=\"0\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+                      </Group>\n+                      <EmptySpace type=\"unrelated\" max=\"-2\" attributes=\"0\"/>\n+                      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n+                          <Component id=\"categoryTextField\" pref=\"276\" max=\"32767\" attributes=\"0\"/>\n+                          <Component id=\"domainSuffixTextField\" max=\"32767\" attributes=\"0\"/>\n+                      </Group>\n+                  </Group>\n+              </Group>\n+              <EmptySpace max=\"-2\" attributes=\"0\"/>\n+          </Group>\n+      </Group>\n+    </DimensionLayout>\n+    <DimensionLayout dim=\"1\">\n+      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n+          <Group type=\"102\" alignment=\"0\" attributes=\"0\">\n+              <EmptySpace max=\"-2\" attributes=\"0\"/>\n+              <Group type=\"103\" groupAlignment=\"3\" attributes=\"0\">\n+                  <Component id=\"domainSuffixTextField\" alignment=\"3\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+                  <Component id=\"domainSuffixLabel\" alignment=\"3\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+              </Group>\n+              <EmptySpace max=\"-2\" attributes=\"0\"/>\n+              <Group type=\"103\" groupAlignment=\"3\" attributes=\"0\">\n+                  <Component id=\"categoryTextField\" alignment=\"3\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+                  <Component id=\"categoryLabel\" alignment=\"3\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+              </Group>\n+              <EmptySpace max=\"-2\" attributes=\"0\"/>\n+              <Component id=\"validationLabel\" min=\"-2\" pref=\"46\" max=\"-2\" attributes=\"0\"/>\n+              <EmptySpace max=\"-2\" attributes=\"0\"/>\n+              <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n+                  <Component id=\"cancelButton\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+                  <Component id=\"saveButton\" alignment=\"0\" min=\"-2\" max=\"-2\" attributes=\"0\"/>\n+              </Group>\n+              <EmptySpace pref=\"8\" max=\"32767\" attributes=\"0\"/>\n+          </Group>\n+      </Group>\n+    </DimensionLayout>\n+  </Layout>\n+  <SubComponents>\n+    <Component class=\"javax.swing.JTextField\" name=\"categoryTextField\">\n+    </Component>\n+    <Component class=\"javax.swing.JTextField\" name=\"domainSuffixTextField\">\n+    </Component>\n+    <Component class=\"javax.swing.JLabel\" name=\"categoryLabel\">\n+      <Properties>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"AddEditCategoryDialog.categoryLabel.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <AuxValues>\n+        <AuxValue name=\"JavaCodeGenerator_VariableLocal\" type=\"java.lang.Boolean\" value=\"true\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableModifier\" type=\"java.lang.Integer\" value=\"0\"/>\n+      </AuxValues>\n+    </Component>\n+    <Component class=\"javax.swing.JLabel\" name=\"domainSuffixLabel\">\n+      <Properties>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"AddEditCategoryDialog.domainSuffixLabel.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <AuxValues>\n+        <AuxValue name=\"JavaCodeGenerator_VariableLocal\" type=\"java.lang.Boolean\" value=\"true\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableModifier\" type=\"java.lang.Integer\" value=\"0\"/>\n+      </AuxValues>\n+    </Component>\n+    <Component class=\"javax.swing.JLabel\" name=\"validationLabel\">\n+      <Properties>\n+        <Property name=\"foreground\" type=\"java.awt.Color\" editor=\"org.netbeans.modules.form.RADConnectionPropertyEditor\">\n+          <Connection code=\"java.awt.Color.RED\" type=\"code\"/>\n+        </Property>\n+        <Property name=\"text\" type=\"java.lang.String\" value=\" \"/>\n+        <Property name=\"toolTipText\" type=\"java.lang.String\" value=\"\"/>\n+      </Properties>\n+    </Component>\n+    <Component class=\"javax.swing.JButton\" name=\"cancelButton\">\n+      <Properties>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"AddEditCategoryDialog.cancelButton.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Events>\n+        <EventHandler event=\"actionPerformed\" listener=\"java.awt.event.ActionListener\" parameters=\"java.awt.event.ActionEvent\" handler=\"cancelButtonActionPerformed\"/>\n+      </Events>\n+      <AuxValues>\n+        <AuxValue name=\"JavaCodeGenerator_VariableLocal\" type=\"java.lang.Boolean\" value=\"true\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableModifier\" type=\"java.lang.Integer\" value=\"0\"/>\n+      </AuxValues>\n+    </Component>\n+    <Component class=\"javax.swing.JButton\" name=\"saveButton\">\n+      <Properties>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"AddEditCategoryDialog.saveButton.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Events>\n+        <EventHandler event=\"actionPerformed\" listener=\"java.awt.event.ActionListener\" parameters=\"java.awt.event.ActionEvent\" handler=\"saveButtonActionPerformed\"/>\n+      </Events>\n+    </Component>\n+  </SubComponents>\n+</Form>"
  },
  {
    "sha": "26be388c8eef15e38f63e1f864a02faefb0e66c7",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.java",
    "status": "added",
    "additions": 282,
    "deletions": 0,
    "changes": 282,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/AddEditCategoryDialog.java?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,282 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2021 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.url.analytics.domaincategorization;\n+\n+import java.util.Set;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.url.analytics.DomainCategory;\n+\n+/**\n+ * Dialog for adding or editing a custom domain suffix category.\n+ */\n+@Messages({\n+    \"AddEditCategoryDialog_Edit=Edit Entry\",\n+    \"AddEditCategoryDialog_Add=Add Entry\"\n+})\n+class AddEditCategoryDialog extends javax.swing.JDialog {\n+\n+    private boolean changed = false;\n+    private final Set<String> currentSuffixes;\n+    private final DomainCategory currentDomainCategory;\n+\n+    // listens for document updates\n+    private final DocumentListener updateListener = new DocumentListener() {\n+        @Override\n+        public void insertUpdate(DocumentEvent e) {\n+            onValueUpdate(domainSuffixTextField.getText(), categoryTextField.getText());\n+        }\n+\n+        @Override\n+        public void removeUpdate(DocumentEvent e) {\n+            onValueUpdate(domainSuffixTextField.getText(), categoryTextField.getText());\n+        }\n+\n+        @Override\n+        public void changedUpdate(DocumentEvent e) {\n+            onValueUpdate(domainSuffixTextField.getText(), categoryTextField.getText());\n+        }\n+    };\n+\n+    /**\n+     * Main constructor if adding a new domain suffix.\n+     *\n+     * @param parent The parent frame for this dialog.\n+     * @param currentSuffixes The current domain suffixes.\n+     */\n+    AddEditCategoryDialog(java.awt.Frame parent, Set<String> currentSuffixes) {\n+        this(parent, currentSuffixes, null);\n+    }\n+\n+    /**\n+     * Main constructor if editing a domain suffix.\n+     *\n+     * @param parentThe parent frame for this dialog.\n+     * @param currentSuffixes The current domain suffixes.\n+     * @param currentDomainCategory The domain category being edited. If null,\n+     * it will be assumed that a new domain suffix is being added.\n+     */\n+    AddEditCategoryDialog(java.awt.Frame parent, Set<String> currentSuffixes, DomainCategory currentDomainCategory) {\n+        super(parent, true);\n+        initComponents();\n+        this.currentSuffixes = currentSuffixes;\n+        this.currentDomainCategory = currentDomainCategory;\n+\n+        // set title based on whether or not we are editing or adding\n+        // also don't allow editing of domain suffix if editing\n+        if (currentDomainCategory == null) {\n+            setTitle(Bundle.AddEditCategoryDialog_Add());\n+            domainSuffixTextField.setEditable(true);\n+            domainSuffixTextField.setEnabled(true);\n+            onValueUpdate(null, null);\n+        } else {\n+            setTitle(Bundle.AddEditCategoryDialog_Edit());\n+            domainSuffixTextField.setEditable(false);\n+            domainSuffixTextField.setEnabled(false);\n+            onValueUpdate(currentDomainCategory.getHostSuffix(), currentDomainCategory.getCategory());\n+        }\n+\n+        validationLabel.setText(\"\");\n+\n+        categoryTextField.getDocument().addDocumentListener(updateListener);\n+        domainSuffixTextField.getDocument().addDocumentListener(updateListener);\n+    }\n+\n+    /**\n+     * Returns the string value for the name in the input field if Ok pressed or\n+     * null if not.\n+     *\n+     * @return The string value for the name in the input field if Ok pressed or\n+     * null if not.\n+     */\n+    DomainCategory getValue() {\n+        return new DomainCategory(domainSuffixTextField.getText(), categoryTextField.getText());\n+    }\n+\n+    /**\n+     * Returns whether or not the value has been changed and saved by the user.\n+     *\n+     * @return Whether or not the value has been changed and saved by the user.\n+     */\n+    boolean isChanged() {\n+        return changed;\n+    }\n+\n+    /**\n+     * When the text field is updated, this method is called.\n+     *\n+     * @param suffixStr The current domain suffix string in the input.\n+     * @param categoryStr The current category string in the input.\n+     */\n+    @Messages({\n+        \"# {0} - maxSuffixLen\",\n+        \"AddEditCategoryDialog_onValueUpdate_badSuffix=Please provide a domain suffix that is no more than {0} characters that includes at least one period.\",\n+        \"# {0} - maxCategoryLen\",\n+        \"AddEditCategoryDialog_onValueUpdate_badCategory=Please provide a category that is no more than {0} characters.\",\n+        \"AddEditCategoryDialog_onValueUpdate_suffixRepeat=Please provide a unique domain suffix.\",\n+        \"AddEditCategoryDialog_onValueUpdate_sameCategory=Please provide a new category for this domain suffix.\",})\n+    void onValueUpdate(String suffixStr, String categoryStr) {\n+\n+        String safeSuffixStr = suffixStr == null ? \"\" : suffixStr;\n+        String normalizedSuffix = WebCategoriesDataModel.getNormalizedSuffix(safeSuffixStr);\n+        String safeCategoryStr = categoryStr == null ? \"\" : categoryStr;\n+        String normalizedCategory = WebCategoriesDataModel.getNormalizedCategory(safeCategoryStr);\n+\n+        // update input text field if it is not the same.\n+        if (!safeCategoryStr.equals(categoryTextField.getText())) {\n+            categoryTextField.setText(safeCategoryStr);\n+        }\n+\n+        if (!safeSuffixStr.equals(domainSuffixTextField.getText())) {\n+            domainSuffixTextField.setText(safeSuffixStr);\n+        }\n+\n+        String validationMessage = null;\n+        if (normalizedSuffix.length() == 0\n+                || normalizedSuffix.length() > WebCategoriesDataModel.getMaxDomainSuffixLength()\n+                || normalizedSuffix.indexOf('.') < 0) {\n+            \n+            validationMessage = Bundle.AddEditCategoryDialog_onValueUpdate_badSuffix(WebCategoriesDataModel.getMaxCategoryLength());\n+\n+        } else if (normalizedCategory.length() == 0 || normalizedCategory.length() > WebCategoriesDataModel.getMaxCategoryLength()) {\n+            validationMessage = Bundle.AddEditCategoryDialog_onValueUpdate_badCategory(WebCategoriesDataModel.getMaxCategoryLength());\n+\n+        } else if (currentSuffixes.contains(normalizedSuffix)\n+                && (currentDomainCategory == null\n+                || !normalizedSuffix.equals(currentDomainCategory.getHostSuffix()))) {\n+\n+            validationMessage = Bundle.AddEditCategoryDialog_onValueUpdate_suffixRepeat();\n+\n+        } else if (currentDomainCategory != null\n+                && currentDomainCategory.getCategory() != null\n+                && normalizedCategory.equals(WebCategoriesDataModel.getNormalizedCategory(currentDomainCategory.getCategory()))) {\n+\n+            validationMessage = Bundle.AddEditCategoryDialog_onValueUpdate_sameCategory();\n+        }\n+\n+        saveButton.setEnabled(validationMessage == null);\n+        validationLabel.setText(validationMessage == null ? \"\" : String.format(\"<html>%s</html>\", validationMessage));\n+    }\n+\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        categoryTextField = new javax.swing.JTextField();\n+        domainSuffixTextField = new javax.swing.JTextField();\n+        javax.swing.JLabel categoryLabel = new javax.swing.JLabel();\n+        javax.swing.JLabel domainSuffixLabel = new javax.swing.JLabel();\n+        validationLabel = new javax.swing.JLabel();\n+        javax.swing.JButton cancelButton = new javax.swing.JButton();\n+        saveButton = new javax.swing.JButton();\n+\n+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n+\n+        categoryLabel.setText(org.openide.util.NbBundle.getMessage(AddEditCategoryDialog.class, \"AddEditCategoryDialog.categoryLabel.text\")); // NOI18N\n+\n+        domainSuffixLabel.setText(org.openide.util.NbBundle.getMessage(AddEditCategoryDialog.class, \"AddEditCategoryDialog.domainSuffixLabel.text\")); // NOI18N\n+\n+        validationLabel.setForeground(java.awt.Color.RED);\n+        validationLabel.setText(\" \");\n+        validationLabel.setToolTipText(\"\");\n+\n+        cancelButton.setText(org.openide.util.NbBundle.getMessage(AddEditCategoryDialog.class, \"AddEditCategoryDialog.cancelButton.text\")); // NOI18N\n+        cancelButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                cancelButtonActionPerformed(evt);\n+            }\n+        });\n+\n+        saveButton.setText(org.openide.util.NbBundle.getMessage(AddEditCategoryDialog.class, \"AddEditCategoryDialog.saveButton.text\")); // NOI18N\n+        saveButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                saveButtonActionPerformed(evt);\n+            }\n+        });\n+\n+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n+        getContentPane().setLayout(layout);\n+        layout.setHorizontalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addContainerGap()\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n+                        .addGap(0, 0, Short.MAX_VALUE)\n+                        .addComponent(saveButton)\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                        .addComponent(cancelButton))\n+                    .addComponent(validationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                    .addGroup(layout.createSequentialGroup()\n+                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                            .addComponent(domainSuffixLabel)\n+                            .addComponent(categoryLabel))\n+                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                            .addComponent(categoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)\n+                            .addComponent(domainSuffixTextField))))\n+                .addContainerGap())\n+        );\n+        layout.setVerticalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addContainerGap()\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(domainSuffixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                    .addComponent(domainSuffixLabel))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(categoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                    .addComponent(categoryLabel))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                .addComponent(validationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addComponent(cancelButton)\n+                    .addComponent(saveButton))\n+                .addContainerGap(8, Short.MAX_VALUE))\n+        );\n+\n+        pack();\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed\n+        this.changed = true;\n+        dispose();\n+    }//GEN-LAST:event_saveButtonActionPerformed\n+\n+    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed\n+        this.changed = false;\n+        dispose();\n+    }//GEN-LAST:event_cancelButtonActionPerformed\n+\n+\n+    // Variables declaration - do not modify//GEN-BEGIN:variables\n+    private javax.swing.JTextField categoryTextField;\n+    private javax.swing.JTextField domainSuffixTextField;\n+    private javax.swing.JButton saveButton;\n+    private javax.swing.JLabel validationLabel;\n+    // End of variables declaration//GEN-END:variables\n+}"
  },
  {
    "sha": "fae4fa97ecdee2cfd2c395a3a63ee03de52c5718",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,14 @@\n+WebCategoryOptionsController_title=Custom Web Categories\n+WebCategoryOptionsController_keywords=Custom Web Categories\n+AddEditCategoryDialog.categoryLabel.text=Category:\n+AddEditCategoryDialog.domainSuffixLabel.text=Domain Suffix:\n+AddEditCategoryDialog.saveButton.text=Save\n+AddEditCategoryDialog.cancelButton.text=Cancel\n+WebCategoriesOptionsPanel.panelDescription.text=This module allows you to classify web sites based on domain names.\n+WebCategoriesOptionsPanel.categoriesTitle.text=Categories:\n+WebCategoriesOptionsPanel.newEntryButton.text=New Entry\n+WebCategoriesOptionsPanel.editEntryButton.text=Edit Entry\n+WebCategoriesOptionsPanel.deleteEntryButton.text=Delete Entry\n+WebCategoriesOptionsPanel.importSetButton.text=Import Set\n+WebCategoriesOptionsPanel.exportSetButton.text=Export Set\n+WebCategoriesOptionsPanel.ingestRunningWarning.text=Ingest is currently running.  No editing can take place at this time."
  },
  {
    "sha": "65de415aaa460baae926e76e84c7593c3ea9d454",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties-MERGED",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties-MERGED",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties-MERGED",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties-MERGED?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,37 @@\n+AddEditCategoryDialog_Add=Add Entry\n+AddEditCategoryDialog_Edit=Edit Entry\n+# {0} - maxCategoryLen\n+AddEditCategoryDialog_onValueUpdate_badCategory=Please provide a category that is no more than {0} characters.\n+# {0} - maxSuffixLen\n+AddEditCategoryDialog_onValueUpdate_badSuffix=Please provide a domain suffix that is no more than {0} characters that includes at least one period.\n+AddEditCategoryDialog_onValueUpdate_sameCategory=Please provide a new category for this domain suffix.\n+AddEditCategoryDialog_onValueUpdate_suffixRepeat=Please provide a unique domain suffix.\n+WebCategoriesOptionsPanel_categoryTable_categoryColumnName=Category\n+WebCategoriesOptionsPanel_categoryTable_suffixColumnName=Domain Suffix\n+WebCategoriesOptionsPanel_exportSetButtonActionPerformed_defaultFileName=Custom Categories Export\n+WebCategoriesOptionsPanel_exportSetButtonActionPerformed_duplicateMessage=A file already exists at the selected path.\n+WebCategoriesOptionsPanel_exportSetButtonActionPerformed_duplicateTitle=File Already Exists\n+WebCategoriesOptionsPanel_exportSetButtonActionPerformed_errorMessage=There was an error exporting.\n+WebCategoriesOptionsPanel_exportSetButtonActionPerformed_errorTitle=Export Error\n+WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorMessage=There was an error importing this json file.\n+WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorTitle=Import Error\n+WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictCancel=Cancel\n+# {0} - domainSuffix\n+WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictMessage=Domain suffix {0} already exists. What would you like to do?\n+WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictOverwrite=Overwrite\n+WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictSkip=Skip\n+WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictTitle=Domain Suffix Already Exists\n+WebCategoryOptionsController_title=Custom Web Categories\n+WebCategoryOptionsController_keywords=Custom Web Categories\n+AddEditCategoryDialog.categoryLabel.text=Category:\n+AddEditCategoryDialog.domainSuffixLabel.text=Domain Suffix:\n+AddEditCategoryDialog.saveButton.text=Save\n+AddEditCategoryDialog.cancelButton.text=Cancel\n+WebCategoriesOptionsPanel.panelDescription.text=This module allows you to classify web sites based on domain names.\n+WebCategoriesOptionsPanel.categoriesTitle.text=Categories:\n+WebCategoriesOptionsPanel.newEntryButton.text=New Entry\n+WebCategoriesOptionsPanel.editEntryButton.text=Edit Entry\n+WebCategoriesOptionsPanel.deleteEntryButton.text=Delete Entry\n+WebCategoriesOptionsPanel.importSetButton.text=Import Set\n+WebCategoriesOptionsPanel.exportSetButton.text=Export Set\n+WebCategoriesOptionsPanel.ingestRunningWarning.text=Ingest is currently running.  No editing can take place at this time."
  },
  {
    "sha": "26acd97f3a6b70207df1a640dbcf849a4c559818",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/CustomWebCategorizer.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/CustomWebCategorizer.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/CustomWebCategorizer.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/CustomWebCategorizer.java?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2021 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.url.analytics.domaincategorization;\n+\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openide.util.lookup.ServiceProvider;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.url.analytics.DomainCategorizer;\n+import org.sleuthkit.autopsy.url.analytics.DomainCategorizerException;\n+import org.sleuthkit.autopsy.url.analytics.DomainCategory;\n+\n+/**\n+ * A DomainCategoryProvider for custom web categories. NOTE: If this class\n+ * package or name change, code in DomainCategoryRunner will also need to change\n+ * to reflect the changing class name for ordering purposes.\n+ */\n+@ServiceProvider(service = DomainCategorizer.class)\n+public class CustomWebCategorizer implements DomainCategorizer {\n+\n+    private static final Logger logger = Logger.getLogger(CustomWebCategorizer.class.getName());\n+\n+    private final WebCategoriesDataModel dataModel;\n+\n+    /**\n+     * Constructor accepting a custom WebCategoriesDataModel.\n+     *\n+     * @param dataModel The WebCategoriesDataModel to use as a data model.\n+     */\n+    CustomWebCategorizer(WebCategoriesDataModel dataModel) {\n+        this.dataModel = dataModel;\n+    }\n+\n+    /**\n+     * No parameter constructor that uses the singleton instance of the\n+     * WebCategoriesDataModel.\n+     *\n+     */\n+    public CustomWebCategorizer() {\n+        this(WebCategoriesDataModel.getInstance());\n+    }\n+\n+    @Override\n+    public DomainCategory getCategory(String domain, String host) throws DomainCategorizerException {\n+        if (!dataModel.isInitialized()) {\n+            return null;\n+        }\n+        String hostToUse = (StringUtils.isBlank(host)) ? domain : host;\n+        if (StringUtils.isBlank(hostToUse)) {\n+            return null;\n+        }\n+\n+        hostToUse = hostToUse.toLowerCase();\n+\n+        try {\n+            return dataModel.getMatchingRecord(hostToUse);\n+        } catch (SQLException ex) {\n+            logger.log(Level.WARNING, \"There was an error while retrieving data for: \" + hostToUse, ex);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() throws DomainCategorizerException {\n+        try {\n+            dataModel.initialize();\n+        } catch (SQLException ex) {\n+            throw new DomainCategorizerException(\"Unable to initialize.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws SQLException {\n+        dataModel.close();\n+    }\n+}"
  },
  {
    "sha": "03ff8ed9aa09c3e6ca5af4b193ed02f925d3af74",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesDataModel.java",
    "status": "added",
    "additions": 525,
    "deletions": 0,
    "changes": 525,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesDataModel.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesDataModel.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesDataModel.java?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,525 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2021 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.url.analytics.domaincategorization;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.openide.modules.InstalledFileLocator;\n+import org.sleuthkit.autopsy.coreutils.NetworkUtils;\n+import org.sleuthkit.autopsy.url.analytics.DomainCategory;\n+\n+/**\n+ * Provides the data model for exporting, importing and CRUD operations on\n+ * custom web categories.\n+ */\n+class WebCategoriesDataModel implements AutoCloseable {\n+\n+    /**\n+     * DTO to be used with jackson when converting to and from exported content.\n+     */\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    static class CustomCategorizationJsonDto {\n+\n+        private final String category;\n+        private final List<String> domains;\n+\n+        /**\n+         * Main constructor.\n+         *\n+         * @param category The category.\n+         * @param domains The list of host suffixes in this category.\n+         */\n+        @JsonCreator\n+        CustomCategorizationJsonDto(\n+                @JsonProperty(\"category\") String category,\n+                @JsonProperty(\"domains\") List<String> domains) {\n+            this.category = category;\n+            this.domains = domains == null\n+                    ? Collections.emptyList()\n+                    : new ArrayList<>(domains);\n+        }\n+\n+        /**\n+         * Returns the category.\n+         *\n+         * @return The category.\n+         */\n+        @JsonGetter(\"category\")\n+        String getCategory() {\n+            return category;\n+        }\n+\n+        /**\n+         * Returns the list of domain suffixes in this category.\n+         *\n+         * @return The list of domain suffixes in this category.\n+         */\n+        @JsonGetter(\"domains\")\n+        List<String> getDomains() {\n+            return domains;\n+        }\n+    }\n+\n+    private static final int MAX_CAT_SIZE = 300;\n+    private static final int MAX_DOMAIN_SIZE = 255;\n+\n+    private static final String ROOT_FOLDER = \"DomainCategorization\";\n+    private static final String FILE_REL_PATH = \"custom_list.db\";\n+    private static final String JDBC_SQLITE_PREFIX = \"jdbc:sqlite:\";\n+    private static final String TABLE_NAME = \"domain_suffix\";\n+    private static final String SUFFIX_COLUMN = \"suffix\";\n+    private static final String CATEGORY_COLUMN = \"category\";\n+\n+    private static final Logger logger = Logger.getLogger(WebCategoriesDataModel.class.getName());\n+    private static WebCategoriesDataModel instance;\n+\n+    /**\n+     * Returns the maximum string length of a domain suffix.\n+     *\n+     * @return The maximum string length of a domain suffix.\n+     */\n+    static int getMaxDomainSuffixLength() {\n+        return MAX_DOMAIN_SIZE;\n+    }\n+\n+    /**\n+     * Returns the maximum string length of a category.\n+     *\n+     * @return The maximum string length of a category.\n+     */\n+    static int getMaxCategoryLength() {\n+        return MAX_DOMAIN_SIZE;\n+    }\n+\n+    /**\n+     * Retrieves the default path for where custom domain categorization exists.\n+     *\n+     * @return The path or null if the path cannot be reconciled.\n+     */\n+    private static File getDefaultPath() {\n+        File dir = InstalledFileLocator.getDefault().locate(ROOT_FOLDER, WebCategoriesDataModel.class.getPackage().getName(), false);\n+        if (dir == null || !dir.exists()) {\n+            logger.log(Level.WARNING, String.format(\"Unable to find file %s with InstalledFileLocator\", ROOT_FOLDER));\n+            return null;\n+        }\n+\n+        return Paths.get(dir.getAbsolutePath(), FILE_REL_PATH).toFile();\n+    }\n+\n+    /**\n+     * Generates the normalized category string to be inserted into the\n+     * database.\n+     *\n+     * @param category The category.\n+     * @return The normalized string.\n+     */\n+    static String getNormalizedCategory(String category) {\n+        if (category == null) {\n+            return \"\";\n+        }\n+\n+        String trimmedCategory = category.trim();\n+\n+        return trimmedCategory.substring(0, Math.min(trimmedCategory.length(), MAX_CAT_SIZE));\n+    }\n+\n+    /**\n+     * Generates the normalized domain suffix string to be inserted into the\n+     * database.\n+     *\n+     * @param domainSuffix The domain suffix.\n+     * @return The normalized string.\n+     */\n+    static String getNormalizedSuffix(String domainSuffix) {\n+        if (domainSuffix == null) {\n+            return \"\";\n+        }\n+\n+        String trimmedSuffix = domainSuffix.trim();\n+        return trimmedSuffix.substring(0, Math.min(trimmedSuffix.length(), MAX_DOMAIN_SIZE)).toLowerCase();\n+    }\n+\n+    /**\n+     * Retrieves a singleton instance of this class.\n+     *\n+     * @return The singleton instance of this class.\n+     */\n+    static WebCategoriesDataModel getInstance() {\n+        if (instance == null) {\n+            instance = new WebCategoriesDataModel();\n+        }\n+\n+        return instance;\n+    }\n+\n+    private final File sqlitePath;\n+    private Connection dbConn = null;\n+\n+    /**\n+     * Constructor used to create singleton instance.\n+     */\n+    private WebCategoriesDataModel() {\n+        this(getDefaultPath());\n+    }\n+\n+    /**\n+     * Constructor that accepts a variable path for the custom sqlite database\n+     * for custom domain categories.\n+     *\n+     * @param sqlitePath The path.\n+     */\n+    WebCategoriesDataModel(File sqlitePath) {\n+        this.sqlitePath = sqlitePath;\n+    }\n+\n+    /**\n+     * Creates a sqlite jdbc connection.\n+     *\n+     * @throws SQLException\n+     */\n+    synchronized void initialize() throws SQLException {\n+        String url = JDBC_SQLITE_PREFIX + sqlitePath.getAbsolutePath();\n+        if (this.dbConn != null) {\n+            this.dbConn.close();\n+            this.dbConn = null;\n+        }\n+\n+        this.dbConn = DriverManager.getConnection(url);\n+\n+        // speed up operations by turning off WAL\n+        try (Statement turnOffWal = dbConn.createStatement()) {\n+            turnOffWal.execute(\"PRAGMA journal_mode=OFF\");\n+        }\n+\n+        // create table if it doesn't exist\n+        try (Statement createDomainsTable = dbConn.createStatement()) {\n+            createDomainsTable.execute(\n+                    \"    CREATE TABLE IF NOT EXISTS \" + TABLE_NAME + \" (\\n\"\n+                    + \"        \" + SUFFIX_COLUMN + \" VARCHAR(\" + MAX_DOMAIN_SIZE + \") PRIMARY KEY,\\n\"\n+                    + \"        \" + CATEGORY_COLUMN + \" VARCHAR(\" + MAX_CAT_SIZE + \")\\n\"\n+                    + \"    ) WITHOUT ROWID\");\n+        }\n+    }\n+\n+    /**\n+     * Returns true if initialized.\n+     *\n+     * @return True if initialized.\n+     */\n+    synchronized boolean isInitialized() {\n+        return this.dbConn != null;\n+    }\n+\n+    /**\n+     * Retrieves all domain categories present in json file.\n+     *\n+     * @param jsonInput The json file.\n+     * @return The domain categories.\n+     * @throws IOException\n+     */\n+    List<DomainCategory> getJsonEntries(File jsonInput) throws IOException {\n+        if (jsonInput == null) {\n+            logger.log(Level.WARNING, \"No valid file provided.\");\n+            return Collections.emptyList();\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        List<CustomCategorizationJsonDto> customCategorizations = mapper.readValue(jsonInput, new TypeReference<List<CustomCategorizationJsonDto>>() {\n+        });\n+\n+        Stream<CustomCategorizationJsonDto> categoryStream = (customCategorizations != null) ? customCategorizations.stream() : Stream.empty();\n+\n+        return categoryStream\n+                .filter(c -> c != null && c.getCategory() != null && c.getDomains() != null)\n+                .flatMap(c -> c.getDomains().stream()\n+                .map(WebCategoriesDataModel::getNormalizedSuffix)\n+                .filter(StringUtils::isNotBlank)\n+                .map(d -> new DomainCategory(d, getNormalizedCategory(c.getCategory()))))\n+                .collect(Collectors.toList());\n+\n+    }\n+\n+    /**\n+     * Exports current database to a json file.\n+     *\n+     * @param jsonOutput The output file.\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    synchronized void exportToJson(File jsonOutput) throws SQLException, IOException {\n+        if (jsonOutput == null) {\n+            logger.log(Level.WARNING, \"Null file provided.\");\n+            return;\n+        }\n+\n+        if (!isInitialized()) {\n+            initialize();\n+        }\n+\n+        // retrieve items from the database\n+        List<Pair<String, String>> categoryDomains = new ArrayList<>();\n+        try (Statement domainSelect = dbConn.createStatement();\n+                ResultSet resultSet = domainSelect.executeQuery(\n+                        \"SELECT \" + SUFFIX_COLUMN + \", \" + CATEGORY_COLUMN + \" FROM \" + TABLE_NAME + \" ORDER BY \" + SUFFIX_COLUMN)) {\n+\n+            while (resultSet.next()) {\n+                categoryDomains.add(Pair.of(resultSet.getString(CATEGORY_COLUMN), resultSet.getString(SUFFIX_COLUMN)));\n+            }\n+        }\n+\n+        // aggregate data appropriately into CustomCategorizationJsonDto\n+        List<CustomCategorizationJsonDto> categories\n+                = categoryDomains.stream()\n+                        .collect(Collectors.toMap(\n+                                p -> p.getKey(),\n+                                p -> new ArrayList<>(Arrays.asList(p.getValue())),\n+                                (p1, p2) -> {\n+                                    p1.addAll(p2);\n+                                    return p1;\n+                                }\n+                        ))\n+                        .entrySet().stream()\n+                        .map(entry -> new CustomCategorizationJsonDto(entry.getKey(), entry.getValue()))\n+                        .collect(Collectors.toList());\n+\n+        // write to disk\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.writerWithDefaultPrettyPrinter().writeValue(jsonOutput, categories);\n+    }\n+\n+    /**\n+     * Delete a record from the database.\n+     *\n+     * @param domainSuffix The domain suffix of the item to delete.\n+     * @return Whether or not the operation actually deleted something.\n+     * @throws SQLException\n+     * @throws IllegalArgumentException\n+     */\n+    synchronized boolean deleteRecord(String domainSuffix) throws SQLException, IllegalArgumentException {\n+        if (StringUtils.isBlank(domainSuffix)) {\n+            throw new IllegalArgumentException(\"Expected non-empty domain suffix\");\n+        }\n+\n+        if (!isInitialized()) {\n+            initialize();\n+        }\n+\n+        try (PreparedStatement suffixDelete = dbConn.prepareStatement(\n+                \"DELETE FROM \" + TABLE_NAME + \" WHERE LOWER(\" + SUFFIX_COLUMN + \") = LOWER(?)\", Statement.RETURN_GENERATED_KEYS);) {\n+\n+            suffixDelete.setString(1, getNormalizedSuffix(domainSuffix));\n+            return suffixDelete.executeUpdate() > 0;\n+        }\n+    }\n+\n+    /**\n+     * Inserts or updates the entry for the given domain suffix.\n+     *\n+     * @param entry The domain suffix and category.\n+     * @return True if successfully inserted/updated.\n+     * @throws SQLException\n+     * @throws IllegalStateException\n+     * @throws IllegalArgumentException\n+     */\n+    synchronized boolean insertUpdateSuffix(DomainCategory entry) throws SQLException, IllegalStateException, IllegalArgumentException {\n+        if (entry == null || StringUtils.isBlank(getNormalizedCategory(entry.getCategory())) || StringUtils.isBlank(getNormalizedSuffix(entry.getHostSuffix()))) {\n+            throw new IllegalArgumentException(\"Expected non-empty, valid category and domain suffix.\");\n+        }\n+\n+        if (!isInitialized()) {\n+            initialize();\n+        }\n+\n+        try (PreparedStatement insertUpdate = dbConn.prepareStatement(\n+                \"INSERT OR REPLACE INTO \" + TABLE_NAME + \"(\" + SUFFIX_COLUMN + \", \" + CATEGORY_COLUMN + \") VALUES (?, ?)\",\n+                Statement.RETURN_GENERATED_KEYS)) {\n+\n+            insertUpdate.setString(1, getNormalizedSuffix(entry.getHostSuffix()));\n+            insertUpdate.setString(2, getNormalizedCategory(entry.getCategory()));\n+            return insertUpdate.executeUpdate() > 0;\n+        }\n+    }\n+\n+    /**\n+     * Return all records in the database.\n+     *\n+     * @return The list of domain suffixes and their categories.\n+     * @throws SQLException\n+     */\n+    List<DomainCategory> getRecords() throws SQLException {\n+        if (!isInitialized()) {\n+            initialize();\n+        }\n+\n+        List<DomainCategory> entries = new ArrayList<>();\n+\n+        try (Statement domainSelect = dbConn.createStatement();\n+                ResultSet resultSet = domainSelect.executeQuery(\n+                        \"SELECT \" + SUFFIX_COLUMN + \", \" + CATEGORY_COLUMN + \" FROM \" + TABLE_NAME + \" ORDER BY \" + SUFFIX_COLUMN)) {\n+\n+            while (resultSet.next()) {\n+                entries.add(new DomainCategory(\n+                        resultSet.getString(SUFFIX_COLUMN),\n+                        resultSet.getString(CATEGORY_COLUMN)));\n+            }\n+        }\n+        return entries;\n+\n+    }\n+\n+    private static final String GET_DOMAIN_SUFFIX_QUERY\n+            = \"SELECT \" + SUFFIX_COLUMN + \", \" + CATEGORY_COLUMN\n+            + \" FROM \" + TABLE_NAME + \" WHERE \" + SUFFIX_COLUMN + \" = ?\";\n+\n+    /**\n+     * Return the matching domain suffix or null if none found.\n+     *\n+     * @param domainSuffix The domain suffix.\n+     * @return The found entry or null.\n+     * @throws SQLException\n+     */\n+    DomainCategory getRecordBySuffix(String domainSuffix) throws SQLException {\n+        if (!isInitialized()) {\n+            initialize();\n+        }\n+\n+        try (PreparedStatement domainSelect = dbConn.prepareStatement(GET_DOMAIN_SUFFIX_QUERY)) {\n+            domainSelect.setString(1, domainSuffix);\n+\n+            try (ResultSet resultSet = domainSelect.executeQuery()) {\n+                if (resultSet.next()) {\n+                    return new DomainCategory(\n+                            resultSet.getString(SUFFIX_COLUMN),\n+                            resultSet.getString(CATEGORY_COLUMN));\n+                } else {\n+                    return null;\n+                }\n+            }\n+        }\n+    }\n+\n+    // get the suffix and category from the main table and gets the longest matching suffix.\n+    private static final String BASE_QUERY_FMT_STR\n+            = \"SELECT \" + SUFFIX_COLUMN + \", \" + CATEGORY_COLUMN + \" FROM \" + TABLE_NAME\n+            + \" WHERE suffix IN (%s) ORDER BY LENGTH(\" + SUFFIX_COLUMN + \") DESC LIMIT 1\";\n+\n+    /**\n+     * Retrieves the longest matching domain suffix and category matching the\n+     * list of suffixes or null if no item can be found.\n+     *\n+     * @param suffixes The list of suffixes.\n+     * @return The longest matching entry or null if no entry found.\n+     * @throws SQLException\n+     */\n+    synchronized DomainCategory getLongestSuffixRecord(List<String> suffixes) throws SQLException {\n+        if (suffixes == null) {\n+            return null;\n+        }\n+\n+        if (!isInitialized()) {\n+            initialize();\n+        }\n+\n+        String questionMarks = IntStream.range(0, suffixes.size())\n+                .mapToObj((num) -> \"?\")\n+                .collect(Collectors.joining(\",\"));\n+\n+        try (PreparedStatement stmt = dbConn.prepareStatement(String.format(BASE_QUERY_FMT_STR, questionMarks))) {\n+            for (int i = 0; i < suffixes.size(); i++) {\n+                stmt.setString(i + 1, suffixes.get(i));\n+            }\n+\n+            try (ResultSet resultSet = stmt.executeQuery()) {\n+                if (resultSet.next()) {\n+                    String suffix = resultSet.getString(SUFFIX_COLUMN);\n+                    String category = resultSet.getString(CATEGORY_COLUMN);\n+                    return new DomainCategory(suffix, category);\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieves the longest matching domain suffix and category matching the\n+     * list of suffixes or null if no item can be found.\n+     *\n+     * @param host The host name.\n+     * @return The longest matching entry or null if no entry found.\n+     * @throws SQLException\n+     */\n+    DomainCategory getMatchingRecord(String host) throws SQLException {\n+        return getLongestSuffixRecord(getSuffixes(host));\n+    }\n+\n+    /**\n+     * Retrieves all the possible suffixes that could be tracked. For instance,\n+     * if the host was \"chatenabled.mail.google.com\", the list should be\n+     * [\"chatenabled.mail.google.com\", \"mail.google.com\", \"google.com\", \"com\"].\n+     *\n+     * @param host The host.\n+     * @return The possible suffixes.\n+     */\n+    private List<String> getSuffixes(String host) {\n+        if (host == null) {\n+            return null;\n+        }\n+\n+        List<String> hostTokens = Arrays.asList(host.split(\"\\\\.\"));\n+        List<String> hostSegmentations = new ArrayList<>();\n+\n+        for (int i = 0; i < hostTokens.size(); i++) {\n+            String searchString = String.join(\".\", hostTokens.subList(i, hostTokens.size()));\n+            hostSegmentations.add(searchString);\n+        }\n+\n+        return hostSegmentations;\n+    }\n+\n+    @Override\n+    public synchronized void close() throws SQLException {\n+        dbConn.close();\n+        dbConn = null;\n+    }\n+}"
  },
  {
    "sha": "aa1d6b0956bc4f840149a1923292ad8de4f44316",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsController.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsController.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsController.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsController.java?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2021 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.url.analytics.domaincategorization;\n+\n+import java.beans.PropertyChangeListener;\n+import javax.swing.JComponent;\n+import org.netbeans.spi.options.OptionsPanelController;\n+import org.openide.util.HelpCtx;\n+import org.openide.util.Lookup;\n+\n+/**\n+ * The options panel controller that registers and displays the option panel for\n+ * custom web categories.\n+ */\n+@OptionsPanelController.TopLevelRegistration(categoryName = \"#WebCategoryOptionsController_title\",\n+        iconBase = \"org/sleuthkit/autopsy/images/domain-32.png\",\n+        position = 21,\n+        keywords = \"#WebCategoryOptionsController_keywords\",\n+        keywordsCategory = \"Custom Web Categories\")\n+public class WebCategoriesOptionsController extends OptionsPanelController {\n+\n+    private final WebCategoriesDataModel dataModel = WebCategoriesDataModel.getInstance();\n+    private final WebCategoriesOptionsPanel panel = new WebCategoriesOptionsPanel(dataModel);\n+\n+    @Override\n+    public void update() {\n+        panel.refresh();\n+    }\n+\n+    @Override\n+    public void applyChanges() {\n+        // NO OP since saves happen whenever there is a change.\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        // NO OP since saves happen whenever there is a change.\n+    }\n+\n+    @Override\n+    public boolean isValid() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isChanged() {\n+        return false;\n+    }\n+\n+    @Override\n+    public JComponent getComponent(Lookup masterLookup) {\n+        return panel;\n+    }\n+\n+    @Override\n+    public HelpCtx getHelpCtx() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void addPropertyChangeListener(PropertyChangeListener l) {\n+        // NO OP since saves happen whenever there is a change.\n+    }\n+\n+    @Override\n+    public void removePropertyChangeListener(PropertyChangeListener l) {\n+        // NO OP since saves happen whenever there is a change.\n+    }\n+\n+}"
  },
  {
    "sha": "177919921cefbae84434b8e216dd4f9df060df3d",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.form",
    "status": "added",
    "additions": 214,
    "deletions": 0,
    "changes": 214,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.form",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.form",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.form?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,214 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+\n+<Form version=\"1.8\" maxVersion=\"1.9\" type=\"org.netbeans.modules.form.forminfo.JPanelFormInfo\">\n+  <AuxValues>\n+    <AuxValue name=\"FormSettings_autoResourcing\" type=\"java.lang.Integer\" value=\"0\"/>\n+    <AuxValue name=\"FormSettings_autoSetComponentName\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_generateFQN\" type=\"java.lang.Boolean\" value=\"true\"/>\n+    <AuxValue name=\"FormSettings_generateMnemonicsCode\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_i18nAutoMode\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_layoutCodeTarget\" type=\"java.lang.Integer\" value=\"1\"/>\n+    <AuxValue name=\"FormSettings_listenerGenerationStyle\" type=\"java.lang.Integer\" value=\"0\"/>\n+    <AuxValue name=\"FormSettings_variablesLocal\" type=\"java.lang.Boolean\" value=\"false\"/>\n+    <AuxValue name=\"FormSettings_variablesModifier\" type=\"java.lang.Integer\" value=\"2\"/>\n+    <AuxValue name=\"designerSize\" type=\"java.awt.Dimension\" value=\"-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,106,0,0,3,37\"/>\n+  </AuxValues>\n+\n+  <Layout class=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\"/>\n+  <SubComponents>\n+    <Component class=\"javax.swing.JLabel\" name=\"panelDescription\">\n+      <Properties>\n+        <Property name=\"horizontalAlignment\" type=\"int\" value=\"0\"/>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.panelDescription.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+        <Property name=\"border\" type=\"javax.swing.border.Border\" editor=\"org.netbeans.modules.form.editors2.BorderEditor\">\n+          <Border info=\"org.netbeans.modules.form.compat2.border.CompoundBorderInfo\">\n+            <CompoundBorder>\n+              <Border PropertyName=\"outside\" info=\"org.netbeans.modules.form.compat2.border.EtchedBorderInfo\">\n+                <EtchetBorder/>\n+              </Border>\n+              <Border PropertyName=\"inside\" info=\"org.netbeans.modules.form.compat2.border.EmptyBorderInfo\">\n+                <EmptyBorder bottom=\"5\" left=\"5\" right=\"5\" top=\"5\"/>\n+              </Border>\n+            </CompoundBorder>\n+          </Border>\n+        </Property>\n+      </Properties>\n+      <AuxValues>\n+        <AuxValue name=\"JavaCodeGenerator_VariableLocal\" type=\"java.lang.Boolean\" value=\"true\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableModifier\" type=\"java.lang.Integer\" value=\"0\"/>\n+      </AuxValues>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"-1\" gridY=\"-1\" gridWidth=\"3\" gridHeight=\"1\" fill=\"1\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"10\" insetsLeft=\"10\" insetsBottom=\"10\" insetsRight=\"0\" anchor=\"21\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+    <Component class=\"javax.swing.JLabel\" name=\"categoriesTitle\">\n+      <Properties>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.categoriesTitle.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <AuxValues>\n+        <AuxValue name=\"JavaCodeGenerator_VariableLocal\" type=\"java.lang.Boolean\" value=\"true\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableModifier\" type=\"java.lang.Integer\" value=\"0\"/>\n+      </AuxValues>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"0\" gridY=\"1\" gridWidth=\"3\" gridHeight=\"1\" fill=\"0\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"0\" insetsLeft=\"10\" insetsBottom=\"0\" insetsRight=\"0\" anchor=\"21\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+    <Container class=\"javax.swing.JPanel\" name=\"categoryTablePanel\">\n+      <Properties>\n+        <Property name=\"autoscrolls\" type=\"boolean\" value=\"true\"/>\n+        <Property name=\"maximumSize\" type=\"java.awt.Dimension\" editor=\"org.netbeans.beaninfo.editors.DimensionEditor\">\n+          <Dimension value=\"[400, 32767]\"/>\n+        </Property>\n+        <Property name=\"minimumSize\" type=\"java.awt.Dimension\" editor=\"org.netbeans.beaninfo.editors.DimensionEditor\">\n+          <Dimension value=\"[400, 300]\"/>\n+        </Property>\n+        <Property name=\"preferredSize\" type=\"java.awt.Dimension\" editor=\"org.netbeans.beaninfo.editors.DimensionEditor\">\n+          <Dimension value=\"[400, 600]\"/>\n+        </Property>\n+      </Properties>\n+      <AuxValues>\n+        <AuxValue name=\"JavaCodeGenerator_CreateCodeCustom\" type=\"java.lang.String\" value=\"categoryTable\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableLocal\" type=\"java.lang.Boolean\" value=\"true\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableModifier\" type=\"java.lang.Integer\" value=\"0\"/>\n+      </AuxValues>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"0\" gridY=\"2\" gridWidth=\"3\" gridHeight=\"1\" fill=\"1\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"2\" insetsLeft=\"10\" insetsBottom=\"10\" insetsRight=\"0\" anchor=\"10\" weightX=\"0.0\" weightY=\"1.0\"/>\n+        </Constraint>\n+      </Constraints>\n+\n+      <Layout class=\"org.netbeans.modules.form.compat2.layouts.DesignFlowLayout\"/>\n+    </Container>\n+    <Component class=\"javax.swing.JButton\" name=\"newEntryButton\">\n+      <Properties>\n+        <Property name=\"icon\" type=\"javax.swing.Icon\" editor=\"org.netbeans.modules.form.editors2.IconEditor\">\n+          <Image iconType=\"3\" name=\"/org/sleuthkit/autopsy/images/add16.png\"/>\n+        </Property>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.newEntryButton.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Events>\n+        <EventHandler event=\"actionPerformed\" listener=\"java.awt.event.ActionListener\" parameters=\"java.awt.event.ActionEvent\" handler=\"newEntryButtonActionPerformed\"/>\n+      </Events>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"0\" gridY=\"3\" gridWidth=\"1\" gridHeight=\"1\" fill=\"1\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"0\" insetsLeft=\"10\" insetsBottom=\"5\" insetsRight=\"5\" anchor=\"21\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+    <Component class=\"javax.swing.JButton\" name=\"editEntryButton\">\n+      <Properties>\n+        <Property name=\"icon\" type=\"javax.swing.Icon\" editor=\"org.netbeans.modules.form.editors2.IconEditor\">\n+          <Image iconType=\"3\" name=\"/org/sleuthkit/autopsy/images/edit16.png\"/>\n+        </Property>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.editEntryButton.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Events>\n+        <EventHandler event=\"actionPerformed\" listener=\"java.awt.event.ActionListener\" parameters=\"java.awt.event.ActionEvent\" handler=\"editEntryButtonActionPerformed\"/>\n+      </Events>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"1\" gridY=\"3\" gridWidth=\"1\" gridHeight=\"1\" fill=\"1\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"0\" insetsLeft=\"0\" insetsBottom=\"5\" insetsRight=\"5\" anchor=\"21\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+    <Component class=\"javax.swing.JButton\" name=\"deleteEntryButton\">\n+      <Properties>\n+        <Property name=\"icon\" type=\"javax.swing.Icon\" editor=\"org.netbeans.modules.form.editors2.IconEditor\">\n+          <Image iconType=\"3\" name=\"/org/sleuthkit/autopsy/images/delete16.png\"/>\n+        </Property>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.deleteEntryButton.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Events>\n+        <EventHandler event=\"actionPerformed\" listener=\"java.awt.event.ActionListener\" parameters=\"java.awt.event.ActionEvent\" handler=\"deleteEntryButtonActionPerformed\"/>\n+      </Events>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"2\" gridY=\"3\" gridWidth=\"1\" gridHeight=\"1\" fill=\"0\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"0\" insetsLeft=\"0\" insetsBottom=\"5\" insetsRight=\"5\" anchor=\"21\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+    <Component class=\"javax.swing.JButton\" name=\"importSetButton\">\n+      <Properties>\n+        <Property name=\"icon\" type=\"javax.swing.Icon\" editor=\"org.netbeans.modules.form.editors2.IconEditor\">\n+          <Image iconType=\"3\" name=\"/org/sleuthkit/autopsy/images/import16.png\"/>\n+        </Property>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.importSetButton.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Events>\n+        <EventHandler event=\"actionPerformed\" listener=\"java.awt.event.ActionListener\" parameters=\"java.awt.event.ActionEvent\" handler=\"importSetButtonActionPerformed\"/>\n+      </Events>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"0\" gridY=\"4\" gridWidth=\"1\" gridHeight=\"1\" fill=\"1\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"0\" insetsLeft=\"10\" insetsBottom=\"5\" insetsRight=\"5\" anchor=\"21\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+    <Component class=\"javax.swing.JButton\" name=\"exportSetButton\">\n+      <Properties>\n+        <Property name=\"icon\" type=\"javax.swing.Icon\" editor=\"org.netbeans.modules.form.editors2.IconEditor\">\n+          <Image iconType=\"3\" name=\"/org/sleuthkit/autopsy/images/export16.png\"/>\n+        </Property>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.exportSetButton.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Events>\n+        <EventHandler event=\"actionPerformed\" listener=\"java.awt.event.ActionListener\" parameters=\"java.awt.event.ActionEvent\" handler=\"exportSetButtonActionPerformed\"/>\n+      </Events>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"1\" gridY=\"4\" gridWidth=\"1\" gridHeight=\"1\" fill=\"0\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"0\" insetsLeft=\"0\" insetsBottom=\"5\" insetsRight=\"5\" anchor=\"21\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+    <Container class=\"javax.swing.JPanel\" name=\"bottomStrut\">\n+      <Properties>\n+        <Property name=\"preferredSize\" type=\"java.awt.Dimension\" editor=\"org.netbeans.beaninfo.editors.DimensionEditor\">\n+          <Dimension value=\"[10, 0]\"/>\n+        </Property>\n+      </Properties>\n+      <AuxValues>\n+        <AuxValue name=\"JavaCodeGenerator_VariableLocal\" type=\"java.lang.Boolean\" value=\"true\"/>\n+        <AuxValue name=\"JavaCodeGenerator_VariableModifier\" type=\"java.lang.Integer\" value=\"0\"/>\n+      </AuxValues>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"3\" gridY=\"6\" gridWidth=\"1\" gridHeight=\"1\" fill=\"2\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"0\" insetsLeft=\"0\" insetsBottom=\"0\" insetsRight=\"0\" anchor=\"10\" weightX=\"1.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+\n+      <Layout class=\"org.netbeans.modules.form.compat2.layouts.DesignFlowLayout\"/>\n+    </Container>\n+    <Component class=\"javax.swing.JLabel\" name=\"ingestRunningWarning\">\n+      <Properties>\n+        <Property name=\"foreground\" type=\"java.awt.Color\" editor=\"org.netbeans.modules.form.RADConnectionPropertyEditor\">\n+          <Connection code=\"java.awt.Color.RED\" type=\"code\"/>\n+        </Property>\n+        <Property name=\"text\" type=\"java.lang.String\" editor=\"org.netbeans.modules.i18n.form.FormI18nStringEditor\">\n+          <ResourceString bundle=\"org/sleuthkit/autopsy/url/analytics/domaincategorization/Bundle.properties\" key=\"WebCategoriesOptionsPanel.ingestRunningWarning.text\" replaceFormat=\"org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)\"/>\n+        </Property>\n+      </Properties>\n+      <Constraints>\n+        <Constraint layoutClass=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout\" value=\"org.netbeans.modules.form.compat2.layouts.DesignGridBagLayout$GridBagConstraintsDescription\">\n+          <GridBagConstraints gridX=\"0\" gridY=\"5\" gridWidth=\"3\" gridHeight=\"1\" fill=\"0\" ipadX=\"0\" ipadY=\"0\" insetsTop=\"10\" insetsLeft=\"10\" insetsBottom=\"10\" insetsRight=\"10\" anchor=\"17\" weightX=\"0.0\" weightY=\"0.0\"/>\n+        </Constraint>\n+      </Constraints>\n+    </Component>\n+  </SubComponents>\n+</Form>"
  },
  {
    "sha": "d7ae24e514fb309cc68dc1168b7ce83c5c27793d",
    "filename": "Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.java",
    "status": "added",
    "additions": 576,
    "deletions": 0,
    "changes": 576,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/Core/src/org/sleuthkit/autopsy/url/analytics/domaincategorization/WebCategoriesOptionsPanel.java?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1,576 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2021 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.url.analytics.domaincategorization;\n+\n+import java.awt.Cursor;\n+import java.beans.PropertyChangeListener;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JOptionPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.filechooser.FileNameExtensionFilter;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.util.WeakListeners;\n+import org.sleuthkit.autopsy.corecomponents.OptionsPanel;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.ColumnModel;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.DataFetchResult;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.DataFetchResult.ResultType;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.DataFetchWorker;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.DefaultCellModel;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.JTablePanel;\n+import org.sleuthkit.autopsy.ingest.IngestManager;\n+import org.sleuthkit.autopsy.ingest.IngestModuleGlobalSettingsPanel;\n+import org.sleuthkit.autopsy.url.analytics.DomainCategory;\n+\n+/**\n+ * The options panel displayed for import, export, and CRUD operations on domain\n+ * categories.\n+ */\n+@Messages({\n+    \"WebCategoriesOptionsPanel_categoryTable_suffixColumnName=Domain Suffix\",\n+    \"WebCategoriesOptionsPanel_categoryTable_categoryColumnName=Category\",})\n+public class WebCategoriesOptionsPanel extends IngestModuleGlobalSettingsPanel implements OptionsPanel, AutoCloseable {\n+\n+    private static final Logger logger = Logger.getLogger(WebCategoriesOptionsPanel.class.getName());\n+    private static final String DEFAULT_EXTENSION = \"json\";\n+    private static final FileNameExtensionFilter DB_FILTER = new FileNameExtensionFilter(\"JSON\", DEFAULT_EXTENSION);\n+\n+    private final JFileChooser fileChooser = new JFileChooser();\n+    private final WebCategoriesDataModel dataModel;\n+\n+    private final JTablePanel<DomainCategory> categoryTable\n+            = JTablePanel.getJTablePanel(Arrays.asList(\n+                    new ColumnModel<DomainCategory, DefaultCellModel<?>>(\n+                            Bundle.WebCategoriesOptionsPanel_categoryTable_suffixColumnName(),\n+                            (domCat) -> new DefaultCellModel<>(domCat.getHostSuffix())\n+                                    .setTooltip(domCat.getHostSuffix()),\n+                            300\n+                    ),\n+                    new ColumnModel<>(\n+                            Bundle.WebCategoriesOptionsPanel_categoryTable_categoryColumnName(),\n+                            (domCat) -> new DefaultCellModel<>(domCat.getCategory())\n+                                    .setTooltip(domCat.getCategory()),\n+                            200\n+                    )\n+            )).setKeyFunction((domCat) -> domCat.getHostSuffix());\n+\n+    private final PropertyChangeListener ingestListener = (evt) -> refreshComponentStates();\n+    private final PropertyChangeListener weakIngestListener = WeakListeners.propertyChange(ingestListener, this);\n+    private Set<String> domainSuffixes = new HashSet<>();\n+    private boolean isRefreshing = false;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param dataModel The data model that interacts with the database.\n+     */\n+    public WebCategoriesOptionsPanel(WebCategoriesDataModel dataModel) {\n+        initComponents();\n+        this.dataModel = dataModel;\n+\n+        fileChooser.addChoosableFileFilter(DB_FILTER);\n+        fileChooser.setFileFilter(DB_FILTER);\n+        categoryTable.setCellListener((evt) -> refreshComponentStates());\n+        IngestManager.getInstance().addIngestJobEventListener(weakIngestListener);\n+        setDefaultCursor();\n+        refresh();\n+    }\n+\n+    /**\n+     * Returns the items selected in the table or null if no selection.\n+     *\n+     * @return The items selected in the table or null if no selection.\n+     */\n+    private List<DomainCategory> getSelected() {\n+        return categoryTable.getSelectedItems();\n+    }\n+\n+    /**\n+     * Triggers swing worker to fetch data and show in table.\n+     */\n+    void refresh() {\n+        isRefreshing = true;\n+        refreshComponentStates();\n+        categoryTable.showDefaultLoadingMessage();\n+        new DataFetchWorker<Void, List<DomainCategory>>(\n+                (noVal) -> this.dataModel.getRecords(),\n+                (data) -> onRefreshedData(data),\n+                null).execute();\n+    }\n+\n+    /**\n+     * When the result of loading the data is returned, this function handles\n+     * updating the GUI.\n+     *\n+     * @param categoriesResult The result of attempting to fetch the data.\n+     */\n+    private void onRefreshedData(DataFetchResult<List<DomainCategory>> categoriesResult) {\n+        categoryTable.showDataFetchResult(categoriesResult);\n+        if (categoriesResult.getResultType() == ResultType.SUCCESS && categoriesResult.getData() != null) {\n+            domainSuffixes = categoriesResult.getData().stream()\n+                    .map((dc) -> dc.getHostSuffix())\n+                    .collect(Collectors.toSet());\n+        } else {\n+            domainSuffixes = new HashSet<>();\n+        }\n+        isRefreshing = false;\n+        refreshComponentStates();\n+    }\n+\n+    /**\n+     * Refreshes the state of the components based on whether or not an item is\n+     * selected as well as whether or not data is loading or ingest is\n+     * happening.\n+     */\n+    private void refreshComponentStates() {\n+        List<DomainCategory> selectedItems = getSelected();\n+        int selectedCount = CollectionUtils.isEmpty(selectedItems) ? 0 : selectedItems.size();\n+        boolean isIngestRunning = IngestManager.getInstance().isIngestRunning();\n+        boolean operationsPermitted = !isIngestRunning && !isRefreshing;\n+\n+        deleteEntryButton.setEnabled(selectedCount > 0 && operationsPermitted);\n+        editEntryButton.setEnabled(selectedCount == 1 && operationsPermitted);\n+\n+        newEntryButton.setEnabled(operationsPermitted);\n+        exportSetButton.setEnabled(operationsPermitted);\n+        importSetButton.setEnabled(operationsPermitted);\n+\n+        ingestRunningWarning.setVisible(isIngestRunning);\n+    }\n+\n+    /**\n+     * Shows the AddEditCategoryDialog to the user and returns the user-inputted\n+     * DomainCategory or null if nothing was saved.\n+     *\n+     * @param original If editing a value, this is the original value being\n+     * edited. If adding a new value, this should be null.\n+     * @return\n+     */\n+    private DomainCategory getAddEditValue(DomainCategory original) {\n+        JFrame parent = (this.getRootPane() != null && this.getRootPane().getParent() instanceof JFrame)\n+                ? (JFrame) this.getRootPane().getParent()\n+                : null;\n+\n+        AddEditCategoryDialog addEditDialog = new AddEditCategoryDialog(parent, domainSuffixes, original);\n+        addEditDialog.setResizable(false);\n+        addEditDialog.setLocationRelativeTo(parent);\n+        addEditDialog.setVisible(true);\n+        addEditDialog.toFront();\n+\n+        if (addEditDialog.isChanged()) {\n+            return addEditDialog.getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Set cursor to waiting.\n+     */\n+    private void setWaitingCursor() {\n+        SwingUtilities.invokeLater(() -> this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)));\n+    }\n+\n+    /**\n+     * Set cursor to default.\n+     */\n+    private void setDefaultCursor() {\n+        SwingUtilities.invokeLater(() -> this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)));\n+    }\n+\n+    /**\n+     * An action for updating or altering data in the custom configuration.\n+     */\n+    private interface UpdateAction {\n+\n+        /**\n+         * A runnable action to update custom configuration.\n+         *\n+         * @throws IllegalArgumentException\n+         * @throws IOException\n+         * @throws SQLException\n+         */\n+        void run() throws IllegalArgumentException, IOException, SQLException;\n+    }\n+\n+    /**\n+     * Runs an action to update the state of the configuration and runs refresh\n+     * when complete.\n+     *\n+     * @param runnable The runnable action.\n+     * @throws IllegalArgumentException\n+     * @throws IOException\n+     * @throws SQLException\n+     */\n+    private void runUpdateAction(UpdateAction runnable) throws IllegalArgumentException, IOException, SQLException {\n+        setWaitingCursor();\n+        runnable.run();\n+        setDefaultCursor();\n+        refresh();\n+    }\n+\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+        java.awt.GridBagConstraints gridBagConstraints;\n+\n+        javax.swing.JLabel panelDescription = new javax.swing.JLabel();\n+        javax.swing.JLabel categoriesTitle = new javax.swing.JLabel();\n+        javax.swing.JPanel categoryTablePanel = categoryTable;\n+        newEntryButton = new javax.swing.JButton();\n+        editEntryButton = new javax.swing.JButton();\n+        deleteEntryButton = new javax.swing.JButton();\n+        importSetButton = new javax.swing.JButton();\n+        exportSetButton = new javax.swing.JButton();\n+        javax.swing.JPanel bottomStrut = new javax.swing.JPanel();\n+        ingestRunningWarning = new javax.swing.JLabel();\n+\n+        setLayout(new java.awt.GridBagLayout());\n+\n+        panelDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n+        panelDescription.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.panelDescription.text\")); // NOI18N\n+        panelDescription.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;\n+        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);\n+        add(panelDescription, gridBagConstraints);\n+\n+        categoriesTitle.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.categoriesTitle.text\")); // NOI18N\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);\n+        add(categoriesTitle, gridBagConstraints);\n+\n+        categoryTablePanel.setAutoscrolls(true);\n+        categoryTablePanel.setMaximumSize(new java.awt.Dimension(400, 32767));\n+        categoryTablePanel.setMinimumSize(new java.awt.Dimension(400, 300));\n+        categoryTablePanel.setPreferredSize(new java.awt.Dimension(400, 600));\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 2;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.weighty = 1.0;\n+        gridBagConstraints.insets = new java.awt.Insets(2, 10, 10, 0);\n+        add(categoryTablePanel, gridBagConstraints);\n+\n+        newEntryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/add16.png\"))); // NOI18N\n+        newEntryButton.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.newEntryButton.text\")); // NOI18N\n+        newEntryButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                newEntryButtonActionPerformed(evt);\n+            }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 5);\n+        add(newEntryButton, gridBagConstraints);\n+\n+        editEntryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/edit16.png\"))); // NOI18N\n+        editEntryButton.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.editEntryButton.text\")); // NOI18N\n+        editEntryButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                editEntryButtonActionPerformed(evt);\n+            }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);\n+        add(editEntryButton, gridBagConstraints);\n+\n+        deleteEntryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/delete16.png\"))); // NOI18N\n+        deleteEntryButton.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.deleteEntryButton.text\")); // NOI18N\n+        deleteEntryButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                deleteEntryButtonActionPerformed(evt);\n+            }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);\n+        add(deleteEntryButton, gridBagConstraints);\n+\n+        importSetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/import16.png\"))); // NOI18N\n+        importSetButton.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.importSetButton.text\")); // NOI18N\n+        importSetButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                importSetButtonActionPerformed(evt);\n+            }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 5);\n+        add(importSetButton, gridBagConstraints);\n+\n+        exportSetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/images/export16.png\"))); // NOI18N\n+        exportSetButton.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.exportSetButton.text\")); // NOI18N\n+        exportSetButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                exportSetButtonActionPerformed(evt);\n+            }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 4;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);\n+        add(exportSetButton, gridBagConstraints);\n+\n+        bottomStrut.setPreferredSize(new java.awt.Dimension(10, 0));\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 6;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+        gridBagConstraints.weightx = 1.0;\n+        add(bottomStrut, gridBagConstraints);\n+\n+        ingestRunningWarning.setForeground(java.awt.Color.RED);\n+        ingestRunningWarning.setText(org.openide.util.NbBundle.getMessage(WebCategoriesOptionsPanel.class, \"WebCategoriesOptionsPanel.ingestRunningWarning.text\")); // NOI18N\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 5;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n+        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);\n+        add(ingestRunningWarning, gridBagConstraints);\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void deleteEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEntryButtonActionPerformed\n+        List<DomainCategory> selectedItems = getSelected();\n+        if (!CollectionUtils.isEmpty(selectedItems)) {\n+            setWaitingCursor();\n+            for (DomainCategory selected : selectedItems) {\n+                if (selected != null && selected.getHostSuffix() != null) {\n+                    try {\n+                        dataModel.deleteRecord(selected.getHostSuffix());\n+                    } catch (IllegalArgumentException | SQLException ex) {\n+                        logger.log(Level.WARNING, \"There was an error while deleting: \" + selected.getHostSuffix(), ex);\n+                    }\n+                }\n+            }\n+            setDefaultCursor();\n+            refresh();\n+        }\n+    }//GEN-LAST:event_deleteEntryButtonActionPerformed\n+\n+    private void newEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEntryButtonActionPerformed\n+        DomainCategory newCategory = getAddEditValue(null);\n+        if (newCategory != null) {\n+            try {\n+                runUpdateAction(() -> dataModel.insertUpdateSuffix(newCategory));\n+            } catch (IllegalArgumentException | SQLException | IOException ex) {\n+                setDefaultCursor();\n+                logger.log(Level.WARNING, \"There was an error while adding new record: \" + newCategory.getHostSuffix(), ex);\n+            }\n+        }\n+    }//GEN-LAST:event_newEntryButtonActionPerformed\n+\n+    private void editEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEntryButtonActionPerformed\n+        List<DomainCategory> selectedItems = getSelected();\n+        if (CollectionUtils.isNotEmpty(selectedItems)) {\n+            DomainCategory selected = selectedItems.get(0);\n+            if (selected != null && selected.getHostSuffix() != null) {\n+                try {\n+                    DomainCategory newCategory = getAddEditValue(selected);\n+                    if (newCategory != null) {\n+                        runUpdateAction(() -> dataModel.insertUpdateSuffix(newCategory));\n+                    }\n+                } catch (IllegalArgumentException | SQLException | IOException ex) {\n+                    setDefaultCursor();\n+                    logger.log(Level.WARNING, \"There was an error while editing: \" + selected.getHostSuffix(), ex);\n+                }\n+            }\n+        }\n+    }//GEN-LAST:event_editEntryButtonActionPerformed\n+\n+    @Messages({\n+        \"WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorMessage=There was an error importing this json file.\",\n+        \"WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorTitle=Import Error\",\n+        \"WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictTitle=Domain Suffix Already Exists\",\n+        \"# {0} - domainSuffix\",\n+        \"WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictMessage=Domain suffix {0} already exists. What would you like to do?\",\n+        \"WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictOverwrite=Overwrite\",\n+        \"WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictSkip=Skip\",\n+        \"WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictCancel=Cancel\"})\n+    private void importSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSetButtonActionPerformed\n+        fileChooser.setSelectedFile(new File(\"\"));\n+        int result = fileChooser.showOpenDialog(this);\n+        if (result == JFileChooser.APPROVE_OPTION) {\n+            File selectedFile = fileChooser.getSelectedFile();\n+            if (selectedFile != null && selectedFile.exists()) {\n+                try {\n+                    runUpdateAction(() -> {\n+                        List<DomainCategory> categories = dataModel.getJsonEntries(selectedFile);\n+\n+                        for (DomainCategory domcat : categories) {\n+                            String normalizedCategory = domcat == null ? \"\" : WebCategoriesDataModel.getNormalizedCategory(domcat.getCategory());\n+                            String normalizedSuffix = domcat == null ? \"\" : WebCategoriesDataModel.getNormalizedSuffix(domcat.getHostSuffix());\n+\n+                            if (StringUtils.isBlank(normalizedCategory) || StringUtils.isBlank(normalizedSuffix)) {\n+                                logger.log(Level.WARNING, String.format(\"Invalid entry [category: %s, domain suffix: %s]\", normalizedCategory, normalizedSuffix));\n+                                continue;\n+                            }\n+\n+                            DomainCategory currentCategory = dataModel.getRecordBySuffix(normalizedSuffix);\n+                            // if a mapping for the domain suffix already exists and the value will change, prompt the user on what to do.\n+                            if (currentCategory != null) {\n+                                if (normalizedCategory.equalsIgnoreCase(currentCategory.getCategory()))  {\n+                                    // do nothing if import item is same as already present\n+                                    continue;\n+                                } else {\n+\n+                                    String[] options = {\n+                                        Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictOverwrite(),\n+                                        Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictSkip(),\n+                                        Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictCancel()\n+                                    };\n+\n+                                    int optionItem = JOptionPane.showOptionDialog(null,\n+                                            Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictMessage(normalizedSuffix),\n+                                            Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_onConflictTitle(),\n+                                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);\n+\n+                                    switch (optionItem) {\n+                                        case 0:\n+                                            break;\n+                                        case 1:\n+                                            continue;\n+                                        case 2:\n+                                            return;\n+                                    }\n+                                }\n+                            }\n+\n+                            dataModel.insertUpdateSuffix(new DomainCategory(normalizedSuffix, normalizedCategory));\n+                        }\n+                    });\n+                } catch (IllegalArgumentException | SQLException | IOException ex) {\n+                    setDefaultCursor();\n+                    JOptionPane.showMessageDialog(\n+                            this,\n+                            Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorMessage(),\n+                            Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorTitle(),\n+                            JOptionPane.ERROR_MESSAGE);\n+                    logger.log(Level.WARNING, \"There was an error on import.\", ex);\n+                }\n+            }\n+        }\n+    }//GEN-LAST:event_importSetButtonActionPerformed\n+\n+    @Messages({\n+        \"WebCategoriesOptionsPanel_exportSetButtonActionPerformed_duplicateMessage=A file already exists at the selected path.\",\n+        \"WebCategoriesOptionsPanel_exportSetButtonActionPerformed_duplicateTitle=File Already Exists\",\n+        \"WebCategoriesOptionsPanel_exportSetButtonActionPerformed_errorMessage=There was an error exporting.\",\n+        \"WebCategoriesOptionsPanel_exportSetButtonActionPerformed_errorTitle=Export Error\",\n+        \"WebCategoriesOptionsPanel_exportSetButtonActionPerformed_defaultFileName=Custom Categories Export\"\n+    })\n+    private void exportSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSetButtonActionPerformed\n+        fileChooser.setSelectedFile(new File(String.format(\"%s.json\", Bundle.WebCategoriesOptionsPanel_exportSetButtonActionPerformed_defaultFileName())));\n+        int result = fileChooser.showSaveDialog(this);\n+        if (result == JFileChooser.APPROVE_OPTION) {\n+            File selectedFile = fileChooser.getSelectedFile();\n+            if (selectedFile != null) {\n+                if (selectedFile.exists()) {\n+                    JOptionPane.showMessageDialog(\n+                            this,\n+                            Bundle.WebCategoriesOptionsPanel_exportSetButtonActionPerformed_duplicateMessage(),\n+                            Bundle.WebCategoriesOptionsPanel_exportSetButtonActionPerformed_duplicateTitle(),\n+                            JOptionPane.ERROR_MESSAGE);\n+                    return;\n+                }\n+                try {\n+                    setWaitingCursor();\n+                    dataModel.exportToJson(selectedFile);\n+                    setDefaultCursor();\n+                } catch (SQLException | IOException ex) {\n+                    setDefaultCursor();\n+                    JOptionPane.showMessageDialog(\n+                            this,\n+                            Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorMessage(),\n+                            Bundle.WebCategoriesOptionsPanel_importSetButtonActionPerformed_errorTitle(),\n+                            JOptionPane.ERROR_MESSAGE);\n+                    logger.log(Level.WARNING, \"There was an error on export.\", ex);\n+                }\n+            }\n+        }\n+    }//GEN-LAST:event_exportSetButtonActionPerformed\n+\n+\n+    // Variables declaration - do not modify//GEN-BEGIN:variables\n+    private javax.swing.JButton deleteEntryButton;\n+    private javax.swing.JButton editEntryButton;\n+    private javax.swing.JButton exportSetButton;\n+    private javax.swing.JButton importSetButton;\n+    private javax.swing.JLabel ingestRunningWarning;\n+    private javax.swing.JButton newEntryButton;\n+    // End of variables declaration//GEN-END:variables\n+\n+    @Override\n+    public void saveSettings() {\n+        // NO OP since saves happen whenever there is a change.\n+    }\n+\n+    @Override\n+    public void store() {\n+        // NO OP since saves happen whenever there is a change.\n+    }\n+\n+    @Override\n+    public void load() {\n+        refresh();\n+    }\n+\n+    @Override\n+    public void close() {\n+        IngestManager.getInstance().removeIngestJobEventListener(weakIngestListener);\n+    }\n+}"
  },
  {
    "sha": "94108c5a00f41de7b861f785a9b6951a339c7d63",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/DomainCategoryRunner.java?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -83,6 +83,9 @@\n \n     private static final Logger logger = Logger.getLogger(DomainCategoryRunner.class.getName());\n \n+    // NOTE: if CustomWebCategorizer ever changes name, this will need to be changed as well.\n+    private static final String CUSTOM_CATEGORIZER_PATH = \"org.sleuthkit.autopsy.url.analytics.domaincategorization.CustomWebCategorizer\";\n+\n     /**\n      * Get seconds from epoch from the mapping for the attribute type id.\n      *\n@@ -444,7 +447,16 @@ void configExtractor() throws IngestModule.IngestModuleException {\n \n         List<DomainCategorizer> foundProviders = lookupList.stream()\n                 .filter(provider -> provider != null)\n-                .sorted((a, b) -> a.getClass().getName().compareToIgnoreCase(b.getClass().getName()))\n+                .sorted((a, b) -> {\n+                    boolean aIsCustom = a.getClass().getName().contains(CUSTOM_CATEGORIZER_PATH);\n+                    boolean bIsCustom = b.getClass().getName().contains(CUSTOM_CATEGORIZER_PATH);\n+                    if (aIsCustom != bIsCustom) {\n+                        // push custom categorizer to top\n+                        return -Boolean.compare(aIsCustom, bIsCustom);\n+                    }\n+\n+                    return a.getClass().getName().compareToIgnoreCase(b.getClass().getName());\n+                })\n                 .collect(Collectors.toList());\n \n         // add the default categorizer last as a last resort"
  },
  {
    "sha": "4dfe31b7acc5d0ccc9d8f0b6f431ef8223980804",
    "filename": "thirdparty/DomainCategorization/README.txt",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/74d51a973de85069aec00f9ec2e163a5fdbd7487/thirdparty/DomainCategorization/README.txt",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/74d51a973de85069aec00f9ec2e163a5fdbd7487/thirdparty/DomainCategorization/README.txt",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/thirdparty/DomainCategorization/README.txt?ref=74d51a973de85069aec00f9ec2e163a5fdbd7487",
    "patch": "@@ -0,0 +1 @@\n+This is a folder containing information for web domain categorization and custom categories.\n\\ No newline at end of file"
  }
]
