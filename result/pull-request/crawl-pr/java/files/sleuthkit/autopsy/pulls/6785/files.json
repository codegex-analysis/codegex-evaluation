[
  {
    "sha": "39e446c95f82e4f8d1bd3ce0841834d0affbd542",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java",
    "status": "modified",
    "additions": 7,
    "deletions": 14,
    "changes": 21,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/3ca95fb523f0860db742d41faf0737eb8482bc69/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/3ca95fb523f0860db742d41faf0737eb8482bc69/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRecycleBin.java?ref=3ca95fb523f0860db742d41faf0737eb8482bc69",
    "patch": "@@ -35,6 +35,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.logging.Level;\n import org.joda.time.Instant;\n import org.openide.util.NbBundle.Messages;\n@@ -54,7 +55,9 @@\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_USER_ID;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_USER_NAME;\n import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.DataSource;\n import org.sleuthkit.datamodel.FsContent;\n+import org.sleuthkit.datamodel.OsAccount;\n import org.sleuthkit.datamodel.SleuthkitCase;\n import org.sleuthkit.datamodel.TskCoreException;\n import org.sleuthkit.datamodel.TskData;\n@@ -336,21 +339,11 @@ private RecycledFileMetaData parseIFile(String iFilePath) throws IOException {\n      */\n     private Map<String, String> makeUserNameMap(Content dataSource) throws TskCoreException {\n         Map<String, String> userNameMap = new HashMap<>();\n-\n-        List<BlackboardArtifact> accounts = blackboard.getArtifacts(TSK_OS_ACCOUNT.getTypeID(), dataSource.getId());\n-\n-        for (BlackboardArtifact account : accounts) {\n-            BlackboardAttribute nameAttribute = getAttributeForArtifact(account, TSK_USER_NAME);\n-            BlackboardAttribute idAttribute = getAttributeForArtifact(account, TSK_USER_ID);\n-\n-            String userName = nameAttribute != null ? nameAttribute.getDisplayString() : \"\";\n-            String userID = idAttribute != null ? idAttribute.getDisplayString() : \"\";\n-\n-            if (!userID.isEmpty()) {\n-                userNameMap.put(userID, userName);\n-            }\n+        \n+         for(OsAccount account: tskCase.getOsAccountManager().getAccounts(((DataSource)dataSource).getHost())) {\n+            Optional<String> userName = account.getLoginName();\n+            userNameMap.put(account.getName(), userName.isPresent() ? userName.get() : \"\");\n         }\n-\n         return userNameMap;\n     }\n "
  },
  {
    "sha": "9ead2f3711c5bc36412bf7185f5110971637690b",
    "filename": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java",
    "status": "modified",
    "additions": 19,
    "deletions": 261,
    "changes": 280,
    "blob_url": "https://github.com/sleuthkit/autopsy/blob/3ca95fb523f0860db742d41faf0737eb8482bc69/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java",
    "raw_url": "https://github.com/sleuthkit/autopsy/raw/3ca95fb523f0860db742d41faf0737eb8482bc69/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java",
    "contents_url": "https://api.github.com/repos/sleuthkit/autopsy/contents/RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java?ref=3ca95fb523f0860db742d41faf0737eb8482bc69",
    "patch": "@@ -82,7 +82,6 @@\n import org.sleuthkit.datamodel.Blackboard.BlackboardException;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;\n-import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_OS_ACCOUNT;\n import org.sleuthkit.datamodel.BlackboardAttribute;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ASSOCIATED_ARTIFACT;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_COMMENT;\n@@ -93,8 +92,6 @@\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DEVICE_ID;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH;\n-import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_USER_ID;\n-import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_USER_NAME;\n import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_HOME_DIR;\n import org.sleuthkit.datamodel.Content;\n import org.sleuthkit.datamodel.DataSource;\n@@ -866,65 +863,15 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n                                         break;\n \n                                     case \"ProfileList\": //NON-NLS\n-                                        try {\n-                                            String homeDir = value;\n-                                            String sid = artnode.getAttribute(\"sid\"); //NON-NLS\n-                                            String username = artnode.getAttribute(\"username\"); //NON-NLS\n-                                            \n-                                            // For now both an OsAccount and the \n-                                            // TSK_OS_ACCOUNT artifact will be created.\n-                                            try{\n-                                                createOrUpdateOsAccount(regFile, sid, username, homeDir);\n-                                                \n-                                            } catch(TskCoreException | TskDataException ex) {\n-                                                logger.log(Level.SEVERE, String.format(\"Failed to create OsAccount for file: %s, sid: %s\", regFile.getId(), sid));\n-                                            }\n-                                            \n-                                            BlackboardArtifact bbart = null;\n-                                            try {\n-                                                //check if any of the existing artifacts match this username\n-                                                ArrayList<BlackboardArtifact> existingArtifacts = currentCase.getSleuthkitCase().getBlackboardArtifacts(ARTIFACT_TYPE.TSK_OS_ACCOUNT);\n-                                                for (BlackboardArtifact artifact : existingArtifacts) {\n-                                                    if (artifact.getDataSource().getId() == regFile.getDataSourceObjectId()) {\n-                                                        BlackboardAttribute attribute = artifact.getAttribute(new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_USER_ID));\n-                                                        if (attribute != null && attribute.getValueString().equals(sid)) {\n-                                                            bbart = artifact;\n-                                                            break;\n-                                                        }\n-                                                    }\n-                                                }\n-                                            } catch (TskCoreException ex) {\n-                                                logger.log(Level.SEVERE, \"Error getting existing os account artifact\", ex);\n-                                            }\n-                                            if (bbart == null) {\n-                                                //create new artifact\n-                                                bbart = regFile.newArtifact(ARTIFACT_TYPE.TSK_OS_ACCOUNT);\n-                                                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_NAME,\n-                                                        parentModuleName, username));\n-                                                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_ID,\n-                                                        parentModuleName, sid));\n-                                                bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH,\n-                                                        parentModuleName, homeDir));\n-\n-                                                newArtifacts.add(bbart);\n-                                            } else {\n-                                                //add attributes to existing artifact\n-                                                BlackboardAttribute bbattr = bbart.getAttribute(new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_USER_NAME));\n-\n-                                                if (bbattr == null) {\n-                                                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_NAME,\n-                                                            parentModuleName, username));\n-                                                }\n-                                                bbattr = bbart.getAttribute(new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_PATH));\n-                                                if (bbattr == null) {\n-                                                    bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PATH,\n-                                                            parentModuleName, homeDir));\n-                                                }                                          \n-                                            }\n-                                            bbart.addAttributes(bbattributes);\n-                                       \n-                                        } catch (TskCoreException ex) {\n-                                            logger.log(Level.SEVERE, \"Error adding account artifact to blackboard.\", ex); //NON-NLS\n+                                        String homeDir = value;\n+                                        String sid = artnode.getAttribute(\"sid\"); //NON-NLS\n+                                        String username = artnode.getAttribute(\"username\"); //NON-NLS\n+\n+                                        try{\n+                                            createOrUpdateOsAccount(regFile, sid, username, homeDir);\n+\n+                                        } catch(TskCoreException | TskDataException ex) {\n+                                            logger.log(Level.SEVERE, String.format(\"Failed to create OsAccount for file: %s, sid: %s\", regFile.getId(), sid), ex);\n                                         }\n                                         break;\n \n@@ -1171,32 +1118,6 @@ private boolean parseSamPluginOutput(String regFilePath, AbstractFile regAbstrac\n                 updateOsAccount(osAccount, userInfo, groupMap.get(userInfo.get(SID_KEY)), regAbstractFile);\n             }\n             \n-            // Existing TSK_OS_ACCOUNT code.\n-            \n-            //get all existing OS account artifacts\n-            List<BlackboardArtifact> existingOsAccounts = tskCase.getBlackboardArtifacts(ARTIFACT_TYPE.TSK_OS_ACCOUNT);\n-            for (BlackboardArtifact osAccount : existingOsAccounts) {\n-                //if the OS Account artifact was from the same data source check the user id\n-                if (osAccount.getDataSource().getId() == regAbstractFile.getDataSourceObjectId()) {\n-                    BlackboardAttribute existingUserId = osAccount.getAttribute(new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_USER_ID));\n-                    if (existingUserId != null) {\n-                        String userID = existingUserId.getValueString().trim();\n-                        Map<String, String> userInfo = userInfoMap.remove(userID);\n-                        //if the existing user id matches a user id which we parsed information for check if that information exists and if it doesn't add it\n-                        if (userInfo != null) {\n-                            osAccount.addAttributes(getAttributesForAccount(userInfo, groupMap.get(userID), true, regAbstractFile));\n-                        }\n-                    }\n-                }\n-            }\n-\n-            //add remaining userinfos as accounts;\n-            for (Map<String, String> userInfo : userInfoMap.values()) {\n-                BlackboardArtifact bbart = regAbstractFile.newArtifact(ARTIFACT_TYPE.TSK_OS_ACCOUNT);\n-                bbart.addAttributes(getAttributesForAccount(userInfo, groupMap.get(userInfo.get(SID_KEY)), false, regAbstractFile));\n-                // index the artifact for keyword search\n-                newArtifacts.add(bbart);\n-            }\n             // Get a mapping of user sids to user names and save globally so it can be used for other areas\n             // of the registry, ie: BAM key\n             try {\n@@ -1212,8 +1133,6 @@ private boolean parseSamPluginOutput(String regFilePath, AbstractFile regAbstrac\n             logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n         } catch (IOException ex) {\n             logger.log(Level.WARNING, \"Error building the document parser: {0}\", ex); //NON-NLS\n-        } catch (ParseException ex) {\n-            logger.log(Level.WARNING, \"Error parsing the the date from the registry file\", ex); //NON-NLS\n         } catch (TskDataException | TskCoreException ex) {\n             logger.log(Level.WARNING, \"Error updating TSK_OS_ACCOUNT artifacts to include newly parsed data.\", ex); //NON-NLS\n         } finally {\n@@ -1223,163 +1142,6 @@ private boolean parseSamPluginOutput(String regFilePath, AbstractFile regAbstrac\n         }\n         return false;\n     }\n-    \n-    /**\n-     * Creates the attribute list for the given user information and group list.\n-     *\n-     * @param userInfo     Map of key\\value pairs of user information\n-     * @param groupList    List of the groups that user belongs\n-     * @param existingUser\n-     *\n-     * @return List\n-     *\n-     * @throws ParseException\n-     */\n-    Collection<BlackboardAttribute> getAttributesForAccount(Map<String, String> userInfo, List<String> groupList, boolean existingUser, AbstractFile regAbstractFile) throws ParseException {\n-        Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n-\n-        SimpleDateFormat regRipperTimeFormat = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss yyyy 'Z'\", US);\n-        regRipperTimeFormat.setTimeZone(getTimeZone(\"GMT\"));\n-\n-        if (!existingUser) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_ID,\n-                    getRAModuleName(), userInfo.get(SID_KEY)));\n-\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_USER_NAME,\n-                    this.moduleName, userInfo.get(USERNAME_KEY)));\n-        }\n-\n-        String value = userInfo.get(ACCOUNT_CREATED_KEY);\n-        if (value != null && !value.isEmpty() && !value.equals(NEVER_DATE)) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_CREATED,\n-                    getRAModuleName(), regRipperTimeFormat.parse(value).getTime() / MS_IN_SEC));\n-        }\n-\n-        value = userInfo.get(LAST_LOGIN_KEY);\n-        if (value != null && !value.isEmpty() && !value.equals(NEVER_DATE)) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED,\n-                    getRAModuleName(), regRipperTimeFormat.parse(value).getTime() / MS_IN_SEC));\n-        }\n-\n-        value = userInfo.get(LOGIN_COUNT_KEY);\n-        if (value != null && !value.isEmpty()) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_COUNT,\n-                    getRAModuleName(), Integer.parseInt(value)));\n-        }\n-\n-        value = userInfo.get(ACCOUNT_TYPE_KEY);\n-        if (value != null && !value.isEmpty()) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_ACCOUNT_TYPE,\n-                    getRAModuleName(), value));\n-        }\n-\n-        value = userInfo.get(USER_COMMENT_KEY);\n-        if (value != null && !value.isEmpty()) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DESCRIPTION,\n-                    getRAModuleName(), value));\n-        }\n-\n-        value = userInfo.get(NAME_KEY);\n-        if (value != null && !value.isEmpty()) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_NAME,\n-                    getRAModuleName(), value));\n-        }\n-\n-        value = userInfo.get(INTERNET_NAME_KEY);\n-        if (value != null && !value.isEmpty()) {\n-            try {\n-                // Create an account for this email, if it doesn't already exist.\n-                Case.getCurrentCaseThrows()\n-                        .getSleuthkitCase()\n-                        .getCommunicationsManager()\n-                        .createAccountFileInstance(Account.Type.EMAIL,\n-                                value, getRAModuleName(), regAbstractFile);\n-            } catch (NoCurrentCaseException | TskCoreException ex) {\n-                logger.log(Level.SEVERE,\n-                        String.format(\"Error adding email account with value \"\n-                                + \"%s, to the case database for file %s [objId=%d]\",\n-                                value, regAbstractFile.getName(), regAbstractFile.getId()), ex);\n-            }\n-\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_EMAIL,\n-                    getRAModuleName(), value));\n-        }\n-\n-        value = userInfo.get(FULL_NAME_KEY);\n-        if (value != null && !value.isEmpty()) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DISPLAY_NAME,\n-                    getRAModuleName(), value));\n-        }\n-\n-        value = userInfo.get(PWD_RESET_KEY);\n-        if (value != null && !value.isEmpty() && !value.equals(NEVER_DATE)) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_PASSWORD_RESET,\n-                    getRAModuleName(), regRipperTimeFormat.parse(value).getTime() / MS_IN_SEC));\n-        }\n-\n-        value = userInfo.get(PASSWORD_HINT);\n-        if (value != null && !value.isEmpty()) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PASSWORD_HINT,\n-                    getRAModuleName(), value));\n-        }\n-\n-        value = userInfo.get(PWD_FAILE_KEY);\n-        if (value != null && !value.isEmpty() && !value.equals(NEVER_DATE)) {\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_DATETIME_PASSWORD_FAIL,\n-                    getRAModuleName(), regRipperTimeFormat.parse(value).getTime() / MS_IN_SEC));\n-        }\n-\n-        String settingString = \"\";\n-        for (String setting : PASSWORD_SETTINGS_FLAGS) {\n-            if (userInfo.containsKey(setting)) {\n-                settingString += setting + \", \";\n-            }\n-        }\n-\n-        if (!settingString.isEmpty()) {\n-            settingString = settingString.substring(0, settingString.length() - 2);\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_PASSWORD_SETTINGS,\n-                    getRAModuleName(), settingString));\n-        }\n-\n-        settingString = \"\";\n-        for (String setting : ACCOUNT_SETTINGS_FLAGS) {\n-            if (userInfo.containsKey(setting)) {\n-                settingString += setting + \", \";\n-            }\n-        }\n-\n-        if (!settingString.isEmpty()) {\n-            settingString = settingString.substring(0, settingString.length() - 2);\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_ACCOUNT_SETTINGS,\n-                    getRAModuleName(), settingString));\n-        }\n-\n-        settingString = \"\";\n-        for (String setting : ACCOUNT_TYPE_FLAGS) {\n-            if (userInfo.containsKey(setting)) {\n-                settingString += setting + \", \";\n-            }\n-        }\n-\n-        if (!settingString.isEmpty()) {\n-            settingString = settingString.substring(0, settingString.length() - 2);\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_FLAG,\n-                    getRAModuleName(), settingString));\n-        }\n-\n-        if (groupList != null && groupList.isEmpty()) {\n-            String groups = \"\";\n-            for (String group : groupList) {\n-                groups += group + \", \";\n-            }\n-\n-            bbattributes.add(new BlackboardAttribute(ATTRIBUTE_TYPE.TSK_GROUPS,\n-                    getRAModuleName(), groups.substring(0, groups.length() - 2)));\n-        }\n-\n-        return bbattributes;\n-    }\n \n     /**\n      * Read the User Information section of the SAM regripper plugin's output\n@@ -1949,23 +1711,14 @@ private BlackboardArtifact createAssociatedArtifact(String filePathName, Blackbo\n      * @throws TskCoreException\n      */\n     private Map<String, String> makeUserNameMap(Content dataSource) throws TskCoreException {\n-        Map<String, String> userNameMap = new HashMap<>();\n-\n-        List<BlackboardArtifact> accounts = blackboard.getArtifacts(TSK_OS_ACCOUNT.getTypeID(), dataSource.getId());\n+        Map<String, String> map = new HashMap<>();\n \n-        for (BlackboardArtifact account : accounts) {\n-            BlackboardAttribute nameAttribute = getAttributeForArtifact(account, TSK_USER_NAME);\n-            BlackboardAttribute idAttribute = getAttributeForArtifact(account, TSK_USER_ID);\n-\n-            String userName = nameAttribute != null ? nameAttribute.getDisplayString() : \"\";\n-            String userID = idAttribute != null ? idAttribute.getDisplayString() : \"\";\n-\n-            if (!userID.isEmpty()) {\n-                userNameMap.put(userID, userName);\n-            }\n+        for(OsAccount account: tskCase.getOsAccountManager().getAccounts(((DataSource)dataSource).getHost())) {\n+            Optional<String> userName = account.getLoginName();\n+            map.put(account.getName(), userName.isPresent() ? userName.get() : \"\");\n         }\n \n-        return userNameMap;\n+        return map;\n     }\n \n     /**\n@@ -2306,6 +2059,11 @@ private void updateOsAccount(OsAccount osAccount, Map<String, String> userInfo,\n                         osAccount, host, regFile));\n             }\n         }\n+        \n+        value = userInfo.get(USERNAME_KEY); \n+        if (value != null && !value.isEmpty()) {\n+            osAccount.setLoginName(value);\n+        }\n \n         value = userInfo.get(LOGIN_COUNT_KEY);\n         if (value != null && !value.isEmpty()) {"
  }
]
