[
  {
    "sha": "cdbdcc9d2552252d1228394fa7a2eb5225af5d29",
    "filename": "scripts/cloudPBFShardControl/pbfShardGenerator.py",
    "status": "modified",
    "additions": 37,
    "deletions": 19,
    "changes": 56,
    "blob_url": "https://github.com/osmlab/atlas-generator/blob/95d7e7079362a7356ae22c2ff0309d302ec6667c/scripts/cloudPBFShardControl/pbfShardGenerator.py",
    "raw_url": "https://github.com/osmlab/atlas-generator/raw/95d7e7079362a7356ae22c2ff0309d302ec6667c/scripts/cloudPBFShardControl/pbfShardGenerator.py",
    "contents_url": "https://api.github.com/repos/osmlab/atlas-generator/contents/scripts/cloudPBFShardControl/pbfShardGenerator.py?ref=95d7e7079362a7356ae22c2ff0309d302ec6667c",
    "patch": "@@ -16,7 +16,7 @@\n from typing import List, TextIO, Tuple\n \n \n-VERSION = \"0.6.0\"\n+VERSION = \"0.7.0\"\n \n \n def setup_logging(default_level=logging.INFO):\n@@ -303,10 +303,38 @@ def genOsmiumBatchFiles(self) -> None:\n                     f.write(f\"{pbf_file_name} {config_file_name}\\n\")\n             logger.info(\"osmium batch file %s generated.\", batch_file_name)\n \n+    def cleanProcs(self, procList, retryCount):\n+        for p, cFile in procList:\n+            result = p.poll()\n+            if result is None:\n+                continue\n+            procList.remove((p, cFile))\n+            if result == 0:\n+                logger.debug(\"removing completed process {} ....\".format(p.args))\n+                continue\n+            # process finished in error - see if we can retry\n+            if retryCount <= 0:\n+                finish(\"osmium process {} failed: {}\".format(p.args, result), result)\n+            retryCount = retryCount - 1\n+            logger.warning(f\"osmium process {p.args} completed: {result} - retrying\")\n+            logFile = open(\n+                os.path.join(self.logDir, os.path.splitext(cFile)[0] + \".log\"),\n+                \"wb\",\n+            )\n+            try:\n+                p2 = subprocess.Popen(p.args, stdout=logFile, stderr=logFile)\n+                logger.debug(\"adding process {} ....\".format(p2.args))\n+                procList.append((p2, cFile))\n+            finally:\n+                logFile.close()\n+\n+        return retryCount\n+\n     def processOsmiumBatch(self, batchFilePath: str) -> int:\n         \"\"\"\n         Execute osmium extract pass based on a batch file given as input parameter\n         \"\"\"\n+        retryCount = 10\n         batchFile = open(batchFilePath, \"r\")\n         try:\n             procList = []\n@@ -318,21 +346,12 @@ def processOsmiumBatch(self, batchFilePath: str) -> int:\n                 # only start a maximum number of processes in parallel\n                 while len(procList) >= self.maxOsmiumProcesses:\n                     logger.debug(\n-                        \"waiting to spawn more. processes: {} ....\".format(len(procList))\n+                        \"waiting to spawn more. processes: {} ....\".format(\n+                            len(procList)\n+                        )\n                     )\n                     time.sleep(1)\n-                    for p in procList:\n-                        r = p.poll()\n-                        if r == 0:\n-                            logger.debug(\n-                                \"removing completed process {} ....\".format(p.args)\n-                            )\n-                            procList.remove(p)\n-                        elif r is not None:\n-                            finish(\n-                                \"ERROR: osmium process {} completed: {}\".format(p.args, r),\n-                                r,\n-                            )\n+                    retryCount = self.cleanProcs(procList, retryCount)\n \n                 # create a log file from the config file\n                 logFile = open(\n@@ -359,16 +378,15 @@ def processOsmiumBatch(self, batchFilePath: str) -> int:\n                         stderr=logFile,\n                     )\n                     logger.debug(\"adding process {} ....\".format(p.args))\n-                    procList.append(p)\n+                    procList.append((p, configFile))\n                 finally:\n                     logFile.close()\n         finally:\n             batchFile.close()\n \n-        for p in procList:\n-            r = p.wait()\n-            if r:\n-                finish(\"ERROR: osmium process {} completed: {}\".format(p.args, r), r)\n+        while len(procList):\n+            time.sleep(1)\n+            retryCount = self.cleanProcs(procList, retryCount)\n \n         # Move final pbfs to the final pbf directory structure\n         for tmpFilePath in glob.iglob(self.tmpDir + \"*final.osm.pbf\"):"
  }
]
