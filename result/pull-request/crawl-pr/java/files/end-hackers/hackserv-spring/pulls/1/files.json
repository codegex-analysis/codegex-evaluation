[
  {
    "sha": "c6725e9c5cb6ebef2b3f323d73324c35b171771a",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/pom.xml",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/pom.xml",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/pom.xml?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -163,6 +163,7 @@\n                 <filtering>true</filtering>\n                 <includes>\n                     <include>**/application*.yml</include>\n+                    <include>**/emails/**/*.html</include>\n                 </includes>\n             </resource>\n         </resources>"
  },
  {
    "sha": "ed1f30e46dd686aef5da10dbe23ebe72ad7df90e",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/component/CreateFirstAdminApplicationListener.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/component/CreateFirstAdminApplicationListener.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/component/CreateFirstAdminApplicationListener.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/component/CreateFirstAdminApplicationListener.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -1,5 +1,6 @@\n package com.a6raywa1cher.hackservspring.component;\n \n+import com.a6raywa1cher.hackservspring.model.User;\n import com.a6raywa1cher.hackservspring.model.UserRole;\n import com.a6raywa1cher.hackservspring.service.UserService;\n import org.slf4j.Logger;\n@@ -34,7 +35,8 @@ public CreateFirstAdminApplicationListener(@Value(\"${app.first-admin.email}\") St\n     @Override\n     public void onApplicationEvent(ApplicationReadyEvent event) {\n         if (userService.findFirstByUserRole(UserRole.ADMIN).isEmpty()) {\n-            userService.create(UserRole.ADMIN, email, password, fullName);\n+            User user = userService.create(UserRole.ADMIN, email, password, fullName);\n+            userService.editEmailValidated(user, true);\n             logger.info(\"Created admin-user\");\n         }\n     }"
  },
  {
    "sha": "526fb4959a31deb4b3ea985a28aa9416f1595421",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/model/EmailValidationToken.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/model/EmailValidationToken.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/model/EmailValidationToken.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/model/EmailValidationToken.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,27 @@\n+package com.a6raywa1cher.hackservspring.model;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import lombok.Data;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import java.time.ZonedDateTime;\n+\n+@Entity\n+@Data\n+public class EmailValidationToken {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    @Column\n+    private int token;\n+\n+    @Column\n+    @JsonFormat(shape = JsonFormat.Shape.STRING)\n+    private ZonedDateTime createdAt;\n+\n+}"
  },
  {
    "sha": "9744a4e7d3433e7f76c34c3f8718edde166c6124",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/model/User.java",
    "status": "modified",
    "additions": 28,
    "deletions": 19,
    "changes": 47,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/model/User.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/model/User.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/model/User.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -43,35 +43,44 @@\n \n \t@Column(name = \"email\", nullable = false, length = 1024)\n \t@JsonView(Views.Internal.class)\n-\tprivate String email;\n+    private String email;\n \n-\t@Column(length = 1024)\n-\t@JsonIgnore\n-\tprivate String password;\n+    @Column(length = 1024)\n+    @JsonIgnore\n+    private String password;\n \n-\t@Column\n-\t@JsonView(Views.Public.class)\n-\tprivate UserRole userRole;\n+    @Column\n+    @JsonView(Views.Public.class)\n+    private UserRole userRole;\n \n-\t@Column\n-\t@JsonView(Views.Internal.class)\n-\tprivate String fullName;\n+    @OneToOne(cascade = CascadeType.REMOVE)\n+    @JsonIgnore\n+    private EmailValidationToken emailValidationToken;\n \n-\t@ManyToOne\n-\t@JsonView(Views.Public.class)\n-\tprivate Team team;\n+    @Column\n+    @JsonView(Views.Public.class)\n+    private boolean emailValidated;\n \n-\t@OneToMany\n+    @Column\n+    @JsonView(Views.Internal.class)\n+    private String fullName;\n+\n+    @ManyToOne\n+    @JsonView(Views.Public.class)\n+    private Team team;\n+\n+    @OneToMany\n \t@JsonIgnore\n \tprivate List<Vote> votings;\n \n \t@Column\n \t@JsonView(Views.Internal.class)\n \tprivate String telegram;\n \n-\t@Column\n-\t@JsonView(Views.Internal.class)\n-\tprivate LocalDate dateOfBirth;\n+    @Column\n+    @JsonView(Views.Internal.class)\n+    @JsonFormat(shape = JsonFormat.Shape.STRING)\n+    private LocalDate dateOfBirth;\n \n \t@Column\n     @JsonView(Views.Internal.class)\n@@ -103,6 +112,6 @@ public User() {\n \t@Transient\n \t@JsonView(Views.Public.class)\n \tpublic boolean isEnabled() {\n-\t\treturn true;\n-\t}\n+        return emailValidated;\n+    }\n }"
  },
  {
    "sha": "49d8ebbc0aa5a4013d26ca86a39b41cdbdfa2658",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/model/repo/EmailValidationTokenRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/model/repo/EmailValidationTokenRepository.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/model/repo/EmailValidationTokenRepository.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/model/repo/EmailValidationTokenRepository.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,14 @@\n+package com.a6raywa1cher.hackservspring.model.repo;\n+\n+import com.a6raywa1cher.hackservspring.model.EmailValidationToken;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public interface EmailValidationTokenRepository extends PagingAndSortingRepository<EmailValidationToken, Long> {\n+\n+    Optional<EmailValidationToken> findByToken(int token);\n+\n+}"
  },
  {
    "sha": "a405cb8015387b963c2f3e2386a34c1818dc4bb5",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/rest/ConfigController.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/ConfigController.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/ConfigController.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/rest/ConfigController.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,34 @@\n+package com.a6raywa1cher.hackservspring.rest;\n+\n+import com.a6raywa1cher.hackservspring.rest.res.GetConfigResponse;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class ConfigController {\n+\n+    @Value(\"${spring.servlet.multipart.max-file-size}\")\n+    private String maxFileSize;\n+\n+    @Value(\"${app.min_email_req}\")\n+    private Integer minEmailReq;\n+\n+    @Value(\"${app.max_email_duration}\")\n+    private Integer maxEmailDuration;\n+\n+    @GetMapping(\"/conf\")\n+    @Operation(security = @SecurityRequirement(name = \"jwt\"))\n+    public ResponseEntity<GetConfigResponse> getConfig() {\n+\n+        GetConfigResponse response = new GetConfigResponse();\n+        response.setMaxFileSize(maxFileSize);\n+        response.setMinEmailReq(minEmailReq);\n+        response.setMaxEmailDuration(maxEmailDuration);\n+\n+        return ResponseEntity.ok(response);\n+    }\n+}"
  },
  {
    "sha": "a241df7367a5d950446a522000df24e62e26ac3f",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/rest/UserController.java",
    "status": "modified",
    "additions": 71,
    "deletions": 4,
    "changes": 75,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/UserController.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/UserController.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/rest/UserController.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -1,11 +1,13 @@\n package com.a6raywa1cher.hackservspring.rest;\n \n+import com.a6raywa1cher.hackservspring.model.EmailValidationToken;\n import com.a6raywa1cher.hackservspring.model.User;\n import com.a6raywa1cher.hackservspring.model.UserRole;\n-import com.a6raywa1cher.hackservspring.rest.exc.EmailAlreadyExistsException;\n-import com.a6raywa1cher.hackservspring.rest.exc.UserNotExistsException;\n+import com.a6raywa1cher.hackservspring.rest.exc.*;\n import com.a6raywa1cher.hackservspring.rest.req.CreateUserRequest;\n+import com.a6raywa1cher.hackservspring.rest.req.EmailValidationTokenRequest;\n import com.a6raywa1cher.hackservspring.rest.req.PutUserInfoRequest;\n+import com.a6raywa1cher.hackservspring.service.EmailValidationService;\n import com.a6raywa1cher.hackservspring.service.UserService;\n import com.a6raywa1cher.hackservspring.service.dto.UserInfo;\n import com.a6raywa1cher.hackservspring.utils.Views;\n@@ -17,6 +19,7 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.*;\n \n+import javax.mail.MessagingException;\n import javax.transaction.Transactional;\n import javax.validation.Valid;\n import java.util.Optional;\n@@ -28,19 +31,23 @@\n public class UserController {\n \n     private final UserService userService;\n+    private final EmailValidationService emailValidationService;\n \n-    public UserController(UserService userService) {\n+    public UserController(UserService userService, EmailValidationService emailValidationService) {\n         this.userService = userService;\n+        this.emailValidationService = emailValidationService;\n     }\n \n     @PostMapping(\"/create\")\n     @JsonView(Views.Internal.class)\n-    public ResponseEntity<User> createUser(@RequestBody @Valid CreateUserRequest request) throws EmailAlreadyExistsException {\n+    public ResponseEntity<User> createUser(@RequestBody @Valid CreateUserRequest request) throws EmailAlreadyExistsException, MessagingException {\n         if (userService.getByEmail(request.getEmail()).isPresent()) {\n             throw new EmailAlreadyExistsException();\n         }\n \n         User user = userService.create(UserRole.USER, request.getEmail(), request.getPassword());\n+        emailValidationService.createToken(user);\n+        emailValidationService.sendMassage(user);\n         return ResponseEntity.ok(user);\n     }\n \n@@ -61,4 +68,64 @@ public UserController(UserService userService) {\n \n         return ResponseEntity.ok(user);\n     }\n+\n+\n+    @PostMapping(\"/{uid:[0-9]+}/email/req\")\n+    @Operation(security = @SecurityRequirement(name = \"jwt\"))\n+    @PreAuthorize(\"@mvcAccessChecker.checkUserInternalInfoAccess(#uid)\")\n+    @JsonView(Views.Internal.class)\n+    public ResponseEntity<EmailValidationToken> sendEmailValidationToken(@PathVariable long uid) throws MessagingException, UserNotExistsException, TooManyValidationRequestsExсeption {\n+\n+        Optional<User> optionalUser = userService.getById(uid);\n+        if (optionalUser.isEmpty()) {\n+            throw new UserNotExistsException();\n+        }\n+        User user = optionalUser.get();\n+        if (emailValidationService.isLastSendWasRecently(user)) {\n+            throw new TooManyValidationRequestsExсeption();\n+        }\n+        emailValidationService.createToken(user);\n+        emailValidationService.sendMassage(user);\n+\n+        return ResponseEntity.ok(user.getEmailValidationToken());\n+    }\n+\n+\n+    @PostMapping(\"/{uid:[0-9]+}/email/validate\")\n+    @Operation(security = @SecurityRequirement(name = \"jwt\"))\n+    @PreAuthorize(\"@mvcAccessChecker.checkUserInternalInfoAccess(#uid)\")\n+    @JsonView(Views.Internal.class)\n+    public ResponseEntity<Void> validate(@RequestBody @Valid EmailValidationTokenRequest request, @PathVariable long uid) throws UserNotExistsException, TokenIsWrongException, TokenIsNotEnebledException {\n+        Optional<User> optionalUser = userService.getById(uid);\n+        if (optionalUser.isEmpty()) {\n+            throw new UserNotExistsException();\n+        }\n+        User user = optionalUser.get();\n+\n+        if (!emailValidationService.isTokenEnable(user)) {\n+            throw new TokenIsNotEnebledException();\n+        }\n+        if (!emailValidationService.checkToken(user, request.getToken())) {\n+            throw new TokenIsWrongException();\n+        }\n+        userService.editEmailValidated(user, true);\n+\n+        return ResponseEntity.ok().build();\n+    }\n+\n+    @DeleteMapping(\"/{uid:[0-9]+}/delete\")\n+    @Operation(security = @SecurityRequirement(name = \"jwt\"))\n+    @PreAuthorize(\"@mvcAccessChecker.checkUserInternalInfoAccess(#uid)\")\n+    @JsonView(Views.Internal.class)\n+    public ResponseEntity<Void> delete(@PathVariable long uid) throws UserNotExistsException {\n+        Optional<User> optionalUser = userService.getById(uid);\n+        if (optionalUser.isEmpty()) {\n+            throw new UserNotExistsException();\n+        }\n+        User user = optionalUser.get();\n+\n+        userService.deleteUser(user);\n+        return ResponseEntity.ok().build();\n+    }\n+\n }"
  },
  {
    "sha": "382c53521f0da0635fff8d7d72cb5cd79b347180",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsNotEnebledException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsNotEnebledException.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsNotEnebledException.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsNotEnebledException.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,8 @@\n+package com.a6raywa1cher.hackservspring.rest.exc;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code = HttpStatus.FORBIDDEN, reason = \"the token was created a long time ago\")\n+public class TokenIsNotEnebledException extends Exception {\n+}"
  },
  {
    "sha": "486beedf9ccf62f53bcbe49da4301242ee88e47b",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsWrongException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsWrongException.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsWrongException.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TokenIsWrongException.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,8 @@\n+package com.a6raywa1cher.hackservspring.rest.exc;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code = HttpStatus.FORBIDDEN, reason = \"Token is wrong!\")\n+public class TokenIsWrongException extends Exception {\n+}"
  },
  {
    "sha": "fd5081b7634146d50d5efbbbc6dcfb300eadfce6",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TooManyValidationRequestsExсeption.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TooManyValidationRequestsEx%D1%81eption.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TooManyValidationRequestsEx%D1%81eption.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/rest/exc/TooManyValidationRequestsEx%D1%81eption.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,8 @@\n+package com.a6raywa1cher.hackservspring.rest.exc;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code = HttpStatus.TOO_MANY_REQUESTS, reason = \"too frequent requests for validation\")\n+public class TooManyValidationRequestsExсeption extends Exception {\n+}"
  },
  {
    "sha": "ddc593a0b6616f79b4316b519e84f997be7ac3ab",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/rest/req/EmailValidationTokenRequest.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/req/EmailValidationTokenRequest.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/req/EmailValidationTokenRequest.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/rest/req/EmailValidationTokenRequest.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,12 @@\n+package com.a6raywa1cher.hackservspring.rest.req;\n+\n+import lombok.Data;\n+\n+import javax.validation.constraints.Digits;\n+\n+@Data\n+public class EmailValidationTokenRequest {\n+\n+    @Digits(integer = 6, fraction = 0)\n+    private int token;\n+}"
  },
  {
    "sha": "4eadbbfc6d465ecbf80714490147fa9e1ca012f5",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/rest/res/GetConfigResponse.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/res/GetConfigResponse.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/rest/res/GetConfigResponse.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/rest/res/GetConfigResponse.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,13 @@\n+package com.a6raywa1cher.hackservspring.rest.res;\n+\n+import lombok.Data;\n+\n+@Data\n+public class GetConfigResponse {\n+\n+    private String maxFileSize;\n+\n+    private Integer minEmailReq;\n+\n+    private Integer maxEmailDuration;\n+}"
  },
  {
    "sha": "e4031f51e6efdac5f1aec6e7063619e3aa2c4de3",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/security/SecurityConfig.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/security/SecurityConfig.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/security/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/security/SecurityConfig.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -114,6 +114,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .antMatchers(\"/auth/get_access\").permitAll()\n                 .antMatchers(\"/auth/**\").authenticated()\n                 .antMatchers(\"/favicon.ico\").permitAll()\n+                .antMatchers(\"/user/{uid:[0-9]+}/email/req\").hasRole(\"USER\")\n+                .antMatchers(\"/user/{uid:[0-9]+}/email/validate\").hasRole(\"USER\")\n                 .anyRequest().access(\"hasRole('USER') && hasAuthority('ENABLED')\");\n         http.cors()\n                 .configurationSource(corsConfigurationSource(appConfigProperties));"
  },
  {
    "sha": "c5343963362398f25010d9f79a715cd2dde44572",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/service/EmailValidationService.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/EmailValidationService.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/EmailValidationService.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/service/EmailValidationService.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,23 @@\n+package com.a6raywa1cher.hackservspring.service;\n+\n+import com.a6raywa1cher.hackservspring.model.EmailValidationToken;\n+import com.a6raywa1cher.hackservspring.model.User;\n+\n+import javax.mail.MessagingException;\n+import java.util.Optional;\n+\n+public interface EmailValidationService {\n+    Optional<EmailValidationToken> getById(Long id);\n+\n+    void createToken(User user);\n+\n+    void sendMassage(User user) throws MessagingException;\n+\n+    boolean checkToken(User user, int token);\n+\n+    boolean isLastSendWasRecently(User user);\n+\n+    boolean isTokenEnable(User user);\n+\n+    void delete(User user);\n+}"
  },
  {
    "sha": "751deb003974d07408008dd637f64f27ef2c6a5a",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/service/UserService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/UserService.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/UserService.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/service/UserService.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -31,6 +31,8 @@\n \n     User editPassword(User user, String password);\n \n+    User editEmailValidated(User user, boolean expr);\n+\n     User setLastVisitAt(User user, ZonedDateTime at);\n \n     User setVendorSub(User user, VendorId vendorId, String vendorSub);"
  },
  {
    "sha": "4b3f8a81c7f98fce2ce5d3a4eec8dc66e87342ee",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/service/impl/EmailValidationServiceImpl.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/impl/EmailValidationServiceImpl.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/impl/EmailValidationServiceImpl.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/service/impl/EmailValidationServiceImpl.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,106 @@\n+package com.a6raywa1cher.hackservspring.service.impl;\n+\n+import com.a6raywa1cher.hackservspring.model.EmailValidationToken;\n+import com.a6raywa1cher.hackservspring.model.User;\n+import com.a6raywa1cher.hackservspring.model.repo.EmailValidationTokenRepository;\n+import com.a6raywa1cher.hackservspring.model.repo.UserRepository;\n+import com.a6raywa1cher.hackservspring.service.EmailValidationService;\n+import com.a6raywa1cher.hackservspring.utils.ResourceReader;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.io.Resource;\n+import org.springframework.mail.javamail.JavaMailSender;\n+import org.springframework.mail.javamail.MimeMessageHelper;\n+import org.springframework.stereotype.Service;\n+\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMessage;\n+import java.security.SecureRandom;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+@Service\n+public class EmailValidationServiceImpl implements EmailValidationService {\n+    private final EmailValidationTokenRepository tokenRepository;\n+    private final UserRepository userRepository;\n+    private final JavaMailSender emailSender;\n+\n+    @Value(\"classpath:emails/EmailValidationTemplate.html\")\n+    private Resource mailHtml;\n+\n+    @Value(\"${spring.mail.username}\")\n+    private String from;\n+\n+    @Value(\"${app.min_email_req}\")\n+    private Integer minEmailReq;\n+\n+    @Value(\"${app.max_email_duration}\")\n+    private Integer maxEmailDuration;\n+\n+    @Autowired\n+    public EmailValidationServiceImpl(EmailValidationTokenRepository tokenRepository, UserRepository userRepository, JavaMailSender emailSender) {\n+        this.tokenRepository = tokenRepository;\n+        this.userRepository = userRepository;\n+        this.emailSender = emailSender;\n+    }\n+\n+\n+    @Override\n+    public Optional<EmailValidationToken> getById(Long id) {\n+        return tokenRepository.findById(id);\n+    }\n+\n+    @Override\n+    public void createToken(User user) {\n+        EmailValidationToken token = new EmailValidationToken();\n+        SecureRandom secureRandom = new SecureRandom();\n+        int tokenInt = 100000 + secureRandom.nextInt(900000);\n+        token.setToken(tokenInt);\n+        token.setCreatedAt(ZonedDateTime.now());\n+        EmailValidationToken saved = tokenRepository.save(token);\n+        if (user.getEmailValidationToken() != null) {\n+            tokenRepository.delete(user.getEmailValidationToken());\n+        }\n+        user.setEmailValidationToken(saved);\n+        userRepository.save(user);\n+    }\n+\n+    @Override\n+    public void sendMassage(User user) throws MessagingException {\n+\n+        MimeMessage mimeMessage = emailSender.createMimeMessage();\n+        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, \"utf-8\");\n+        String editedMessage = String.format(ResourceReader.asString(mailHtml), user.getEmailValidationToken().getToken());\n+        helper.setText(editedMessage, true);\n+        helper.setTo(user.getEmail());\n+        helper.setSubject(\"Открой\");\n+        helper.setFrom(from);\n+        emailSender.send(mimeMessage);\n+    }\n+\n+    @Override\n+    public boolean checkToken(User user, int token) {\n+        return user.getEmailValidationToken().getToken() == token;\n+    }\n+\n+    @Override\n+    public boolean isLastSendWasRecently(User user) {\n+        ZonedDateTime createdAt = user.getEmailValidationToken().getCreatedAt();\n+        Duration duration = Duration.between(createdAt, ZonedDateTime.now());\n+        return minEmailReq > duration.toSeconds();\n+    }\n+\n+    @Override\n+    public boolean isTokenEnable(User user) {\n+        ZonedDateTime createdAt = user.getEmailValidationToken().getCreatedAt();\n+        Duration duration = Duration.between(createdAt, ZonedDateTime.now());\n+        return maxEmailDuration > duration.toSeconds();\n+    }\n+\n+    @Override\n+    public void delete(User user) {\n+        EmailValidationToken token = user.getEmailValidationToken();\n+        tokenRepository.delete(token);\n+    }\n+}"
  },
  {
    "sha": "cf096ef5c813a82c0f61f8faa54e0b975354ebe7",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/service/impl/UserServiceImpl.java",
    "status": "modified",
    "additions": 21,
    "deletions": 13,
    "changes": 34,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/impl/UserServiceImpl.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/service/impl/UserServiceImpl.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/service/impl/UserServiceImpl.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -55,12 +55,14 @@ private User create(UserRole userRole, String email, String password, String ful\n \t\tuser.setUserRole(userRole);\n \t\tuser.setCreatedAt(ZonedDateTime.now());\n \t\tuser.setLastVisitAt(ZonedDateTime.now());\n-\t\tif (vendorId != null)\n+\t\tif (vendorId != null) {\n+\t\t\tuser.setEmailValidated(true);\n \t\t\tswitch (vendorId) {\n \t\t\t\tcase GITHUB -> user.setGithubId(vendorSub);\n \t\t\t\tcase VK -> user.setVkId(vendorSub);\n \t\t\t\tcase GOOGLE -> user.setGoogleId(vendorSub);\n \t\t\t}\n+\t\t}\n \t\treturn repository.save(user);\n \t}\n \n@@ -101,20 +103,26 @@ public User editUserInfo(User user, UserInfo userInfo) {\n         user.setFullName(userInfo.getFullName());\n         user.setTelegram(userInfo.getTelegram());\n         user.setDateOfBirth(userInfo.getDateOfBirth());\n-        user.setWorkPlace(userInfo.getWorkPlace());\n-        user.setOtherInfo(userInfo.getOtherInfo());\n-        return repository.save(user);\n-    }\n+\t\tuser.setWorkPlace(userInfo.getWorkPlace());\n+\t\tuser.setOtherInfo(userInfo.getOtherInfo());\n+\t\treturn repository.save(user);\n+\t}\n \n-    @Override\n-    public User editPassword(User user, String password) {\n-        user.setPassword(passwordEncoder.encode(password));\n-        return repository.save(user);\n-    }\n+\t@Override\n+\tpublic User editPassword(User user, String password) {\n+\t\tuser.setPassword(passwordEncoder.encode(password));\n+\t\treturn repository.save(user);\n+\t}\n \n-    @Override\n-    public User setLastVisitAt(User user, ZonedDateTime at) {\n-        user.setLastVisitAt(at);\n+\t@Override\n+\tpublic User editEmailValidated(User user, boolean expr) {\n+\t\tuser.setEmailValidated(expr);\n+\t\treturn repository.save(user);\n+\t}\n+\n+\t@Override\n+\tpublic User setLastVisitAt(User user, ZonedDateTime at) {\n+\t\tuser.setLastVisitAt(at);\n \t\treturn repository.save(user);\n \t}\n "
  },
  {
    "sha": "37c5c463773f7e4ad0773ea62d28600d7d06abf2",
    "filename": "src/main/java/com/a6raywa1cher/hackservspring/utils/ResourceReader.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/utils/ResourceReader.java",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/java/com/a6raywa1cher/hackservspring/utils/ResourceReader.java",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/java/com/a6raywa1cher/hackservspring/utils/ResourceReader.java?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,23 @@\n+package com.a6raywa1cher.hackservspring.utils;\n+\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.FileCopyUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public abstract class ResourceReader {\n+\n+    public static String asString(Resource resource) {\n+        try (Reader reader = new InputStreamReader(resource.getInputStream(), UTF_8)) {\n+            return FileCopyUtils.copyToString(reader);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2e40bdca88969e6d281257c6f4e9262da8cfe48b",
    "filename": "src/main/resources/application.yml",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/resources/application.yml",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/resources/application.yml?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -13,6 +13,18 @@ jwt:\n   access-duration: PT5M\n   refresh-duration: P90D\n spring:\n+  mail:\n+    host: smtp.yandex.ru\n+    port: 587\n+    username: ###\n+    password: ###\n+    test-connection: true\n+    properties:\n+      mail:\n+        smtp:\n+          auth: true\n+          starttls:\n+            enable: true\n   jmx:\n     default-domain: com.a6raywa1cher.hackservspring\n     unique-names: true"
  },
  {
    "sha": "dddf76148ad20a54fe7e78c66cbbde588baf3481",
    "filename": "src/main/resources/emails/EmailValidationTemplate.html",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/end-hackers/hackserv-spring/blob/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/resources/emails/EmailValidationTemplate.html",
    "raw_url": "https://github.com/end-hackers/hackserv-spring/raw/78a0e6d61d1be70176cdde2b95a5149e0a6e59f6/src/main/resources/emails/EmailValidationTemplate.html",
    "contents_url": "https://api.github.com/repos/end-hackers/hackserv-spring/contents/src/main/resources/emails/EmailValidationTemplate.html?ref=78a0e6d61d1be70176cdde2b95a5149e0a6e59f6",
    "patch": "@@ -0,0 +1,10 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>Title</title>\n+</head>\n+<body>\n+<h3>Привет, твой токен: %d </h3>\n+</body>\n+</html>\n\\ No newline at end of file"
  }
]
