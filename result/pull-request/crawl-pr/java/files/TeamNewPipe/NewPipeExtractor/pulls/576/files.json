[
  {
    "sha": "af9e3e86c8f57d1608f88db21c9eb09f54c05534",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentReplyExtractor.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentReplyExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentReplyExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentReplyExtractor.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -0,0 +1,37 @@\n+package org.schabi.newpipe.extractor.comments;\r\n+\r\n+import org.schabi.newpipe.extractor.ListExtractor;\r\n+import org.schabi.newpipe.extractor.Page;\r\n+import org.schabi.newpipe.extractor.StreamingService;\r\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\r\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.Nonnull;\r\n+\r\n+public abstract class CommentReplyExtractor extends CommentsExtractor {\r\n+\r\n+    public CommentReplyExtractor(StreamingService service, ListLinkHandler linkHandler) {\r\n+        super(service, linkHandler);\r\n+    }\r\n+\r\n+    public abstract Page getNextPage();\r\n+\r\n+    public abstract List<CommentsInfoItem> getReplies();\r\n+\r\n+    public abstract ListExtractor.InfoItemsPage getInfoItemsPage();\r\n+\r\n+    public List<CommentsInfoItem> downloadReplies() throws IOException, ExtractionException {\r\n+        fetchPage();\r\n+        return getReplies();\r\n+    }\r\n+\r\n+    @Nonnull\r\n+    @Override\r\n+    public String getName() throws ParsingException {\r\n+        return \"Replies\";\r\n+    }\r\n+}\r"
  },
  {
    "sha": "c75272bc74bef5f2006cda0e79fd59509daf1f28",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -13,7 +13,7 @@\n \n public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n \n-    private CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n+    public CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n         super(serviceId, listUrlIdHandler, name);\n     }\n "
  },
  {
    "sha": "e4edf5f3d7edccb2a393ceb120aaddac9e86656d",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItem.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItem.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItem.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItem.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -19,6 +19,8 @@\n     private int likeCount;\n     private boolean heartedByUploader;\n     private boolean pinned;\n+    private CommentReplyExtractor replies;\n+    private boolean isReply = false;\n \n     public CommentsInfoItem(int serviceId, String url, String name) {\n         super(InfoType.COMMENT, serviceId, url, name);\n@@ -112,4 +114,20 @@ public void setUploaderVerified(boolean uploaderVerified) {\n     public boolean isUploaderVerified() {\n         return uploaderVerified;\n     }\n+\n+    public CommentReplyExtractor getReplies() {\n+        return this.replies;\n+    }\n+\n+    public void setReplies(CommentReplyExtractor replies) {\n+        this.replies = replies;\n+    }\n+\n+    public boolean isReply() {\n+        return isReply;\n+    }\n+\n+    public void setIsReply(boolean reply) {\n+        this.isReply = reply;\n+    }\n }"
  },
  {
    "sha": "0aae97e71b34c0ca50a8046d37aad85918c5fd5e",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -58,4 +58,14 @@\n      * Whether the uploader is verified by the service\n      */\n     boolean isUploaderVerified() throws ParsingException;\n+\n+    /**\n+     * Get the reply extractor\n+     */\n+    CommentReplyExtractor getReplies() throws ParsingException;\n+\n+    /**\n+     * Whether comment is a reply to another comment\n+     */\n+    boolean isReply() throws ParsingException;\n }"
  },
  {
    "sha": "9bc356194a21c5d3497959d86ae6d7bb046ec6bd",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemsCollector.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemsCollector.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemsCollector.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemsCollector.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -82,6 +82,18 @@ public CommentsInfoItem extract(CommentsInfoItemExtractor extractor) throws Pars\n             addError(e);\n         }\n \n+        try {\n+            resultItem.setReplies(extractor.getReplies());\n+        } catch (Exception e) {\n+            addError(e);\n+        }\n+\n+        try {\n+            resultItem.setIsReply(extractor.isReply());\n+        } catch (Exception e) {\n+            addError(e);\n+        }\n+\n         return resultItem;\n     }\n "
  },
  {
    "sha": "290d2590900ea496f8b30caeeda6a050c4cbc084",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsReplyInfo.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsReplyInfo.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsReplyInfo.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsReplyInfo.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -0,0 +1,49 @@\n+package org.schabi.newpipe.extractor.comments;\r\n+\r\n+import org.schabi.newpipe.extractor.ListExtractor;\r\n+import org.schabi.newpipe.extractor.Page;\r\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\r\n+import org.schabi.newpipe.extractor.utils.ExtractorHelper;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+public class CommentsReplyInfo extends CommentsInfo {\r\n+\r\n+    CommentReplyExtractor commentsExtractor;\r\n+\r\n+    private CommentsReplyInfo(CommentReplyExtractor commentReplyExtractor)\r\n+            throws ParsingException {\r\n+        super(commentReplyExtractor.getServiceId(),\r\n+                commentReplyExtractor.getLinkHandler(), commentReplyExtractor.getName());\r\n+    }\r\n+\r\n+    public static CommentsReplyInfo getInfo(CommentReplyExtractor commentReplyExtractor)\r\n+            throws IOException, ExtractionException {\r\n+        commentReplyExtractor.fetchPage();\r\n+        CommentsReplyInfo commentsReplyInfo = new CommentsReplyInfo(commentReplyExtractor);\r\n+        commentsReplyInfo.setCommentsExtractor(commentReplyExtractor);\r\n+        ListExtractor.InfoItemsPage<CommentsInfoItem> initialCommentsPage\r\n+                = ExtractorHelper.getItemsPageOrLogError(commentsReplyInfo, commentReplyExtractor);\r\n+        commentsReplyInfo.setRelatedItems(initialCommentsPage.getItems());\r\n+        commentsReplyInfo.setNextPage(initialCommentsPage.getNextPage());\r\n+\r\n+        return commentsReplyInfo;\r\n+    }\r\n+\r\n+    public static ListExtractor.InfoItemsPage<CommentsInfoItem>\r\n+    getMoreItems(CommentReplyExtractor commentReplyExtractor)\r\n+            throws IOException, ExtractionException {\r\n+        Page nextRepliesPage = commentReplyExtractor.getNextPage();\r\n+        return commentReplyExtractor.getPage(nextRepliesPage);\r\n+    }\r\n+\r\n+    public CommentReplyExtractor getCommentsExtractor() {\r\n+        return commentsExtractor;\r\n+    }\r\n+\r\n+    public void setCommentsExtractor(CommentReplyExtractor commentsExtractor) {\r\n+        this.commentsExtractor = commentsExtractor;\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "1140651cb400788e410cca85786e9db36a3d5822",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeCommentsInfoItemExtractor.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeCommentsInfoItemExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeCommentsInfoItemExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeCommentsInfoItemExtractor.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -1,9 +1,11 @@\n package org.schabi.newpipe.extractor.services.peertube.extractors;\n \n import com.grack.nanojson.JsonObject;\n+\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.schabi.newpipe.extractor.ServiceList;\n+import org.schabi.newpipe.extractor.comments.CommentReplyExtractor;\n import org.schabi.newpipe.extractor.comments.CommentsInfoItemExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.localization.DateWrapper;\n@@ -104,6 +106,16 @@ public boolean isUploaderVerified() throws ParsingException {\n         return false;\n     }\n \n+    @Override\n+    public CommentReplyExtractor getReplies() throws ParsingException {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isReply() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public String getUploaderName() throws ParsingException {\n         return JsonUtils.getString(item, \"account.name\") + \"@\" + JsonUtils.getString(item, \"account.host\");"
  },
  {
    "sha": "ce2ecca7a9fdb9246eb7be0420f68f4bb5bd94e9",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsInfoItemExtractor.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsInfoItemExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsInfoItemExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsInfoItemExtractor.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -1,17 +1,20 @@\n package org.schabi.newpipe.extractor.services.soundcloud.extractors;\n \n import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.comments.CommentReplyExtractor;\n import org.schabi.newpipe.extractor.comments.CommentsInfoItemExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.localization.DateWrapper;\n import org.schabi.newpipe.extractor.services.soundcloud.SoundcloudParsingHelper;\n \n-import javax.annotation.Nullable;\n import java.util.Objects;\n \n+import javax.annotation.Nullable;\n+\n public class SoundcloudCommentsInfoItemExtractor implements CommentsInfoItemExtractor {\n-    private JsonObject json;\n-    private String url;\n+    private final JsonObject json;\n+    private final String url;\n \n     public SoundcloudCommentsInfoItemExtractor(JsonObject json, String url) {\n         this.json = json;\n@@ -53,6 +56,16 @@ public boolean isUploaderVerified() throws ParsingException {\n         return json.getObject(\"user\").getBoolean(\"verified\");\n     }\n \n+    @Override\n+    public CommentReplyExtractor getReplies() throws ParsingException {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isReply() throws ParsingException {\n+        return false;\n+    }\n+\n     @Override\n     public String getUploaderUrl() {\n         return json.getObject(\"user\").getString(\"permalink_url\");"
  },
  {
    "sha": "c18db792322417859fb8ef3726378839783296a7",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java",
    "status": "modified",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -24,6 +24,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.time.LocalDate;\n import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n@@ -834,4 +835,30 @@ public static String unescapeDocument(final String doc) {\n                 .replaceAll(\"\\\\\\\\x5d\", \"]\");\n     }\n \n+    public static String getRepliesUrl(String continuation) throws ParsingException {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"action_get_comment_replies\", \"1\");\n+        params.put(\"ctoken\", continuation);\n+        params.put(\"pbj\", \"1\");\n+        try {\n+            return \"https://m.youtube.com/watch_comment?\" + getDataString(params);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new ParsingException(\"Could not get next page url\", e);\n+        }\n+    }\n+\n+    public static String getDataString(Map<String, String> params) throws UnsupportedEncodingException {\n+        StringBuilder result = new StringBuilder();\n+        boolean first = true;\n+        for (Map.Entry<String, String> entry : params.entrySet()) {\n+            if (first)\n+                first = false;\n+            else\n+                result.append(\"&\");\n+            result.append(URLEncoder.encode(entry.getKey(), UTF_8));\n+            result.append(\"=\");\n+            result.append(URLEncoder.encode(entry.getValue(), UTF_8));\n+        }\n+        return result.toString();\n+    }\n }"
  },
  {
    "sha": "faa1b3a050ba9ca616cabdb8164a9ea4b08ba02a",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentReplyExtractor.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentReplyExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentReplyExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentReplyExtractor.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -0,0 +1,150 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\r\n+\r\n+import com.grack.nanojson.JsonArray;\r\n+import com.grack.nanojson.JsonObject;\r\n+import com.grack.nanojson.JsonParser;\r\n+import com.grack.nanojson.JsonParserException;\r\n+\r\n+import org.schabi.newpipe.extractor.ListExtractor;\r\n+import org.schabi.newpipe.extractor.Page;\r\n+import org.schabi.newpipe.extractor.StreamingService;\r\n+import org.schabi.newpipe.extractor.comments.CommentReplyExtractor;\r\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\r\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemExtractor;\r\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemsCollector;\r\n+import org.schabi.newpipe.extractor.downloader.Downloader;\r\n+import org.schabi.newpipe.extractor.downloader.Response;\r\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\r\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\r\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper;\r\n+import org.schabi.newpipe.extractor.utils.JsonUtils;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import javax.annotation.Nonnull;\r\n+\r\n+public class YoutubeCommentReplyExtractor extends CommentReplyExtractor {\r\n+    private static final String USER_AGENT\r\n+            = \"Mozilla/5.0 (Android 8.1.0; Mobile; rv:62.0) Gecko/62.0 Firefox/62.0\";\r\n+    Map<String, List<String>> requestHeaders;\r\n+    private Page repliesPage;\r\n+    private Page nextPage;\r\n+    private String responseBody;\r\n+    private CommentsInfoItemsCollector repliesCollector;\r\n+    private List<CommentsInfoItem> replies;\r\n+\r\n+    public YoutubeCommentReplyExtractor(StreamingService service, ListLinkHandler replyHandler) {\r\n+        super(service, replyHandler);\r\n+        repliesPage = new Page(replyHandler.getUrl());\r\n+    }\r\n+\r\n+    public Boolean buildReplies() {\r\n+        JsonObject ajaxJson = null;\r\n+        try {\r\n+            ajaxJson = JsonParser.array().from(responseBody).getObject(1);\r\n+        } catch (JsonParserException e) {\r\n+            return false;\r\n+        }\r\n+\r\n+        JsonArray contents;\r\n+        try {\r\n+            contents = JsonUtils.getArray(ajaxJson,\r\n+                    \"response.continuationContents.commentRepliesContinuation.contents\");\r\n+        } catch (Exception e) {\r\n+            //no replies\r\n+            return false;\r\n+        }\r\n+\r\n+        List<Object> comments;\r\n+        try {\r\n+            comments = JsonUtils.getValues(contents, \"commentRenderer\");\r\n+        } catch (Exception e) {\r\n+            return false;\r\n+        }\r\n+\r\n+        try {\r\n+            String continCon\r\n+                    = JsonUtils.getArray(ajaxJson, \"response.continuationContents.continuations.contents\")\r\n+                    .getObject(0)\r\n+                    .getString(\"nextContinuationData.continuation\");\r\n+            String contUrl = YoutubeParsingHelper.getRepliesUrl(continCon);\r\n+            this.nextPage = new Page(contUrl);\r\n+        } catch (Exception e) {\r\n+            //no nextPage\r\n+            this.nextPage = null;\r\n+        }\r\n+\r\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\r\n+        for (Object c : comments) {\r\n+            if (c instanceof JsonObject) {\r\n+                YoutubeCommentsInfoItemExtractor extractor\r\n+                        = new YoutubeCommentsInfoItemExtractor((JsonObject) c,\r\n+                        repliesPage.getUrl(), getTimeAgoParser());\r\n+                //The replies don't have replies\r\n+                extractor.setReplyExtractor(null);\r\n+                //But they are replies\r\n+                extractor.setReplyState(true);\r\n+                collector.commit(extractor);\r\n+            }\r\n+        }\r\n+        this.repliesCollector = collector;\r\n+        this.replies = collector.getCommentsInfoItemList();\r\n+        return true;\r\n+    }\r\n+\r\n+    public void setRequestHeaders(Map<String, List<String>> requestHeaders) {\r\n+        this.requestHeaders = requestHeaders;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Page getNextPage() {\r\n+        return nextPage;\r\n+    }\r\n+\r\n+    @Nonnull\r\n+    @Override\r\n+    public InfoItemsPage getInitialPage() throws IOException, ExtractionException {\r\n+        return getInfoItemsPage();\r\n+    }\r\n+\r\n+    @Override\r\n+    public InfoItemsPage getPage(Page page) throws IOException, ExtractionException {\r\n+        if (page == null) {\r\n+            return new ListExtractor.InfoItemsPage<CommentsInfoItem>(\r\n+                    new CommentsInfoItemsCollector(getServiceId()), null);\r\n+        }\r\n+        this.repliesPage = page;\r\n+        fetchPage();\r\n+        ListExtractor.InfoItemsPage returnedInfoItemsPage\r\n+                = new ListExtractor.InfoItemsPage<CommentsInfoItem>(repliesCollector, nextPage);\r\n+        return returnedInfoItemsPage;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<CommentsInfoItem> getReplies() {\r\n+        return replies;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ListExtractor.InfoItemsPage getInfoItemsPage() {\r\n+        try {\r\n+            fetchPage();\r\n+        } catch (ExtractionException | IOException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        ListExtractor.InfoItemsPage returnedInfoItemsPage\r\n+                = new ListExtractor.InfoItemsPage<CommentsInfoItem>(repliesCollector, nextPage);\r\n+        return returnedInfoItemsPage;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\r\n+        final Response response = downloader.get(repliesPage.getUrl(),\r\n+                requestHeaders, getExtractorLocalization());\r\n+        responseBody = YoutubeParsingHelper.unescapeDocument(response.responseBody());\r\n+        buildReplies();\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "7797196ccf0bfcfa0d7ac1cf726fe63d3e3e60f5",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java",
    "status": "modified",
    "additions": 40,
    "deletions": 30,
    "changes": 70,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -3,8 +3,10 @@\n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import com.grack.nanojson.JsonParser;\n+\n import org.schabi.newpipe.extractor.Page;\n import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.comments.CommentReplyExtractor;\n import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\n import org.schabi.newpipe.extractor.comments.CommentsInfoItemExtractor;\n@@ -18,18 +20,19 @@\n import org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n import org.schabi.newpipe.extractor.utils.Parser;\n+import org.schabi.newpipe.extractor.utils.Utils;\n \n-import javax.annotation.Nonnull;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n-import java.net.URLEncoder;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.regex.Pattern;\n \n+import javax.annotation.Nonnull;\n+\n import static java.util.Collections.singletonList;\n-import static org.schabi.newpipe.extractor.utils.Utils.UTF_8;\n import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n \n public class YoutubeCommentsExtractor extends CommentsExtractor {\n@@ -80,7 +83,7 @@ private Page getNextPage(String continuation) throws ParsingException {\n         params.put(\"pbj\", \"1\");\n         params.put(\"ctoken\", continuation);\n         try {\n-            return new Page(\"https://m.youtube.com/watch_comment?\" + getDataString(params));\n+            return new Page(\"https://m.youtube.com/watch_comment?\" + YoutubeParsingHelper.getDataString(params));\n         } catch (UnsupportedEncodingException e) {\n             throw new ParsingException(\"Could not get next page url\", e);\n         }\n@@ -112,18 +115,36 @@ private void collectCommentsFrom(CommentsInfoItemsCollector collector, JsonObjec\n             //no comments\n             return;\n         }\n-        List<Object> comments;\n-        try {\n-            comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"unable to get parse youtube comments\", e);\n-        }\n \n-        for (Object c : comments) {\n-            if (c instanceof JsonObject) {\n-                CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n-                collector.commit(extractor);\n+        for (Object c : contents) {\n+            JsonObject comment;\n+            try {\n+                comment = (JsonObject) JsonUtils.getValue((JsonObject) c, \"commentThreadRenderer.comment.commentRenderer\");\n+            } catch (Exception e) {\n+                throw new ParsingException(\"unable to get parse youtube comment\", e);\n+            }\n+            CommentReplyExtractor replyExtractor;\n+\n+            try {\n+                JsonArray replyContinuations = JsonUtils.getArray((JsonObject) c, \"commentThreadRenderer.replies.commentRepliesRenderer.continuations\");\n+                String replyContinuation = JsonUtils.getString(replyContinuations.getObject(0), \"nextContinuationData.continuation\");\n+                if (Utils.isNullOrEmpty(replyContinuation)) {\n+                    throw new ParsingException(\"No replies\");\n+                }\n+\n+                String replyUrl = YoutubeParsingHelper.getRepliesUrl(replyContinuation);\n+                ListLinkHandler replyHandler = new ListLinkHandler(replyUrl, replyUrl, replyContinuation, Collections.EMPTY_LIST, \"\");\n+                YoutubeCommentReplyExtractor ytReply = new YoutubeCommentReplyExtractor(getService(), replyHandler);\n+                ytReply.setRequestHeaders(getRequestHeaders());\n+                replyExtractor = ytReply;\n+            } catch (Exception e) {\n+                //No Replies\n+                replyExtractor = null;\n             }\n+            YoutubeCommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor(comment, getUrl(), getTimeAgoParser());\n+            extractor.setReplyExtractor(replyExtractor);\n+            extractor.setReplyState(false);\n+            collector.commit(extractor);\n         }\n     }\n \n@@ -137,29 +158,18 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n         ytClientName = Parser.matchGroup1(YT_CLIENT_NAME_PATTERN, responseBody);\n     }\n \n-\n-    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n+    private  Map<String, List<String>> getRequestHeaders() {\n         Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"Accept\", singletonList(\"*/*\"));\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n         requestHeaders.put(\"X-YouTube-Client-Version\", singletonList(ytClientVersion));\n         requestHeaders.put(\"X-YouTube-Client-Name\", singletonList(ytClientName));\n-        return getDownloader().get(siteUrl, requestHeaders, getExtractorLocalization()).responseBody();\n+        return requestHeaders;\n     }\n \n-    private String getDataString(Map<String, String> params) throws UnsupportedEncodingException {\n-        StringBuilder result = new StringBuilder();\n-        boolean first = true;\n-        for (Map.Entry<String, String> entry : params.entrySet()) {\n-            if (first)\n-                first = false;\n-            else\n-                result.append(\"&\");\n-            result.append(URLEncoder.encode(entry.getKey(), UTF_8));\n-            result.append(\"=\");\n-            result.append(URLEncoder.encode(entry.getValue(), UTF_8));\n-        }\n-        return result.toString();\n+    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n+        return getDownloader().get(siteUrl,\n+                getRequestHeaders(), getExtractorLocalization()).responseBody();\n     }\n \n     private String findValue(final String doc, final String start, final String end) {"
  },
  {
    "sha": "af782b757f28b941cb7e469788424daddba0cf49",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsInfoItemExtractor.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsInfoItemExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/889d26afd6ae690091659e694d6d62a6f22fd782/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsInfoItemExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsInfoItemExtractor.java?ref=889d26afd6ae690091659e694d6d62a6f22fd782",
    "patch": "@@ -2,6 +2,8 @@\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.comments.CommentReplyExtractor;\n import org.schabi.newpipe.extractor.comments.CommentsInfoItemExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.localization.DateWrapper;\n@@ -19,13 +21,20 @@\n     private final JsonObject json;\n     private final String url;\n     private final TimeAgoParser timeAgoParser;\n+    private boolean isReply;\n+\n+    private CommentReplyExtractor replyExtractor;\n \n     public YoutubeCommentsInfoItemExtractor(JsonObject json, String url, TimeAgoParser timeAgoParser) {\n         this.json = json;\n         this.url = url;\n         this.timeAgoParser = timeAgoParser;\n     }\n \n+    public void setReplyState(boolean replyState) {\n+        this.isReply = replyState;\n+    }\n+\n     @Override\n     public String getUrl() throws ParsingException {\n         return url;\n@@ -130,6 +139,20 @@ public boolean isUploaderVerified() throws ParsingException {\n         return false;\n     }\n \n+    public void setReplyExtractor(CommentReplyExtractor replyExtractor) {\n+        this.replyExtractor = replyExtractor;\n+    }\n+\n+    @Override\n+    public CommentReplyExtractor getReplies() throws ParsingException {\n+        return replyExtractor;\n+    }\n+\n+    @Override\n+    public boolean isReply() throws ParsingException {\n+        return this.isReply;\n+    }\n+\n     @Override\n     public String getUploaderName() throws ParsingException {\n         try {"
  }
]
