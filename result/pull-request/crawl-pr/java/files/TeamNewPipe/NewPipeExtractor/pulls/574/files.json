[
  {
    "sha": "dd7a300e474bd1918af5a22c6e80e7fceb7a5875",
    "filename": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java",
    "status": "modified",
    "additions": 41,
    "deletions": 16,
    "changes": 57,
    "blob_url": "https://github.com/TeamNewPipe/NewPipeExtractor/blob/0c10f7f7bfda8b90fafc552b530c5ac412897291/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java",
    "raw_url": "https://github.com/TeamNewPipe/NewPipeExtractor/raw/0c10f7f7bfda8b90fafc552b530c5ac412897291/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java",
    "contents_url": "https://api.github.com/repos/TeamNewPipe/NewPipeExtractor/contents/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java?ref=0c10f7f7bfda8b90fafc552b530c5ac412897291",
    "patch": "@@ -1,9 +1,6 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n-import com.grack.nanojson.JsonArray;\n-import com.grack.nanojson.JsonObject;\n-import com.grack.nanojson.JsonParser;\n-import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.*;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n@@ -29,6 +26,7 @@\n import org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper;\n import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeChannelLinkHandlerFactory;\n import org.schabi.newpipe.extractor.stream.*;\n+import org.schabi.newpipe.extractor.utils.JsonUtils;\n import org.schabi.newpipe.extractor.utils.Parser;\n import org.schabi.newpipe.extractor.utils.Utils;\n \n@@ -42,8 +40,7 @@\n import java.util.*;\n \n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.*;\n-import static org.schabi.newpipe.extractor.utils.Utils.EMPTY_STRING;\n-import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n+import static org.schabi.newpipe.extractor.utils.Utils.*;\n \n /*\n  * Created by Christian Schabesberger on 06.08.15.\n@@ -702,20 +699,48 @@ public String getErrorMessage() {\n     @Override\n     public void onFetchPage(@Nonnull final Downloader downloader)\n             throws IOException, ExtractionException {\n-        initialAjaxJson = getJsonResponse(getUrl() + \"&pbj=1\", getExtractorLocalization());\n \n-        initialData = initialAjaxJson.getObject(3).getObject(\"response\", null);\n-        if (initialData == null) {\n-            initialData = initialAjaxJson.getObject(2).getObject(\"response\", null);\n+        final String url = \"https://youtubei.googleapis.com/youtubei/v1/player?key=\" + getKey();\n+\n+        // @formatter:off\n+        byte[] json = JsonWriter.string()\n+                .object()\n+                .object(\"context\")\n+                    .object(\"client\")\n+                        .value(\"clientName\", \"Android\")\n+                        .value(\"clientVersion\", \"16.02\")\n+                    .end()\n+                .end()\n+                .value(\"videoId\", getId())\n+                .end()\n+                .done()\n+                .getBytes(UTF_8);\n+        // @formatter:on\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+\n+        headers.put(\"User-Agent\", Collections.singletonList(\"com.google.android.youtube/16.02.35(Linux; U; Android 10; en_US; Pixel 4 XL Build/QQ3A.200805.001) gzip\"));\n+        headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n+        headers.put(\"x-goog-api-format-version\", Collections.singletonList(\"2\"));\n+\n+        playerResponse = JsonUtils.toJsonObject(getDownloader().post(url, headers, json).responseBody());\n+\n+        if (!playerResponse.has(\"videoDetails\")) {\n+            initialAjaxJson = getJsonResponse(getUrl() + \"&pbj=1\", getExtractorLocalization());\n+\n+            initialData = initialAjaxJson.getObject(3).getObject(\"response\", null);\n             if (initialData == null) {\n-                throw new ParsingException(\"Could not get initial data\");\n+                initialData = initialAjaxJson.getObject(2).getObject(\"response\", null);\n+                if (initialData == null) {\n+                    throw new ParsingException(\"Could not get initial data\");\n+                }\n             }\n-        }\n \n-        playerResponse = initialAjaxJson.getObject(2).getObject(\"playerResponse\", null);\n-        if (playerResponse == null || !playerResponse.has(\"streamingData\")) {\n-            // try to get player response by fetching video info page\n-            fetchVideoInfoPage();\n+            playerResponse = initialAjaxJson.getObject(2).getObject(\"playerResponse\", null);\n+            if (playerResponse == null || !playerResponse.has(\"streamingData\")) {\n+                // try to get player response by fetching video info page\n+                fetchVideoInfoPage();\n+            }\n         }\n \n         final JsonObject playabilityStatus = playerResponse.getObject(\"playabilityStatus\");"
  }
]
