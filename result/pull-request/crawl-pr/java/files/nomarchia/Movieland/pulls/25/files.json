[
  {
    "sha": "cc99c904109b976623aa3af8e31400e18f3c671b",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/pom.xml",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/pom.xml",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/pom.xml?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -65,6 +65,13 @@\n                 <groupId>org.eclipse.jetty</groupId>\n                 <artifactId>jetty-maven-plugin</artifactId>\n                 <version>9.4.35.v20201120</version>\n+                <configuration>\n+                    <!-- Added for visualVm tests and heap dump experiments -->\n+                    <jvmArgs>\n+                        -Xms40m\n+                        -Xmx80m\n+                    </jvmArgs>\n+                </configuration>\n             </plugin>\n         </plugins>\n     </build>"
  },
  {
    "sha": "99536b32f68bae59773c5befb33aa45457b39278",
    "filename": "src/main/java/org/nomarch/movieland/dao/MovieDao.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dao/MovieDao.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dao/MovieDao.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/dao/MovieDao.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -17,5 +17,7 @@\n \n     void add(Movie newMovie);\n \n+    Long addAndReturnId(Movie newMovie);\n+\n     void edit(Movie updatedMovie);\n }"
  },
  {
    "sha": "911edee28f001fe9a8aa2e9ff4868f240df6208b",
    "filename": "src/main/java/org/nomarch/movieland/dao/cache/CachedMovieDao.java",
    "status": "modified",
    "additions": 51,
    "deletions": 12,
    "changes": 63,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dao/cache/CachedMovieDao.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dao/cache/CachedMovieDao.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/dao/cache/CachedMovieDao.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -1,35 +1,74 @@\n package org.nomarch.movieland.dao.cache;\n \n-import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n import org.nomarch.movieland.dao.MovieDao;\n import org.nomarch.movieland.entity.Movie;\n+import org.nomarch.movieland.request.GetMovieRequest;\n+import org.springframework.context.annotation.Primary;\n import org.springframework.stereotype.Repository;\n \n+import java.lang.ref.SoftReference;\n+import java.util.List;\n import java.util.Map;\n-import java.util.WeakHashMap;\n+import java.util.concurrent.ConcurrentHashMap;\n \n+@Slf4j\n @Repository\n-@RequiredArgsConstructor\n-public class CachedMovieDao {\n+@Primary\n+public class CachedMovieDao implements MovieDao {\n     private final MovieDao movieDao;\n-    private final Map<Long, Movie> idToMovieMap = new WeakHashMap<>();\n+    private final Map<Long, SoftReference<Movie>> idToSoftRefMovie = new ConcurrentHashMap<>();\n+\n+    public CachedMovieDao(MovieDao movieDao) {\n+        this.movieDao = movieDao;\n+    }\n+\n+    @Override\n+    public List<Movie> findAll(GetMovieRequest getMovieRequest) {\n+        return movieDao.findAll(getMovieRequest);\n+    }\n+\n+    @Override\n+    public List<Movie> findRandom(Integer moviesAmount) {\n+        return movieDao.findRandom(moviesAmount);\n+    }\n+\n+    @Override\n+    public List<Movie> findByGenre(Integer genreId, GetMovieRequest getMovieRequest) {\n+        return movieDao.findByGenre(genreId, getMovieRequest);\n+    }\n \n     public Movie findById(Long movieId) {\n-        Movie movie = idToMovieMap.get(movieId);\n+        SoftReference<Movie> movieSoftReference = idToSoftRefMovie.get(movieId);\n \n-        if (movie == null) {\n-            movie = movieDao.findById(movieId);\n-            idToMovieMap.put(movieId, movie);\n+        if (movieSoftReference == null || movieSoftReference.get() == null) {\n+            Movie movie = movieDao.findById(movieId);\n+            movieSoftReference = new SoftReference<>(movie);\n+            idToSoftRefMovie.put(movieId, movieSoftReference);\n         }\n \n-        return movie;\n+        return movieSoftReference.get();\n+    }\n+\n+    @Override\n+    public Long addAndReturnId(Movie newMovie) {\n+        return movieDao.addAndReturnId(newMovie);\n+    }\n+\n+    @Override\n+    public void add(Movie newMovie) {\n+        Long movieId = addAndReturnId(newMovie);\n+        newMovie.setId(movieId);\n+\n+        idToSoftRefMovie.put(movieId, new SoftReference<>(newMovie));\n     }\n \n     public void edit(Movie updatedMovie) {\n         movieDao.edit(updatedMovie);\n \n-        if (idToMovieMap.containsKey(updatedMovie.getId())) {\n-            idToMovieMap.put(updatedMovie.getId(), updatedMovie);\n+        if (idToSoftRefMovie.containsKey(updatedMovie.getId())) {\n+            idToSoftRefMovie.put(updatedMovie.getId(), new SoftReference<>(updatedMovie));\n         }\n     }\n+\n }"
  },
  {
    "sha": "576d9d8728c68602c03e0ae91e8526fab597a5ce",
    "filename": "src/main/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDao.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDao.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDao.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDao.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -74,7 +74,7 @@ public Movie findById(Long movieId) {\n     }\n \n     @Override\n-    public void add(Movie newMovie) {\n+    public Long addAndReturnId(Movie newMovie) {\n         log.debug(\"Saving new movie ({}) to DB\", newMovie);\n \n         MapSqlParameterSource map = getMapSqlParameterSource(newMovie);\n@@ -92,6 +92,13 @@ public void add(Movie newMovie) {\n \n         updateDependantManyToManyTable(ADD_MOVIE_GENRES, movieId, genreIds);\n         updateDependantManyToManyTable(ADD_MOVIE_COUNTRIES, movieId, countryIds);\n+\n+        return movieId;\n+    }\n+\n+    @Override\n+    public void add(Movie newMovie) {\n+        addAndReturnId(newMovie);\n     }\n \n     @Override"
  },
  {
    "sha": "b677c9b91ca0b9acbf24cbc020281ba374977323",
    "filename": "src/main/java/org/nomarch/movieland/dto/FullMovieDto.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dto/FullMovieDto.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dto/FullMovieDto.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/dto/FullMovieDto.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -3,8 +3,6 @@\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n-import org.nomarch.movieland.entity.Country;\n-import org.nomarch.movieland.entity.Genre;\n \n import java.util.List;\n \n@@ -19,7 +17,7 @@\n     private String description;\n     private Double price;\n     private String picturePath;\n-    private List<Country> countryList;\n-    private List<Genre> genreList;\n-    private List<ReviewDto> reviewList;\n+    private List<ReturnedEntity> countryList;\n+    private List<ReturnedEntity> genreList;\n+    private List<ReturnedEntity> reviewList;\n }"
  },
  {
    "sha": "1ee05d0d8685ddcb8243e8dc9aeadc1b2ef599d3",
    "filename": "src/main/java/org/nomarch/movieland/dto/ReturnedEntity.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dto/ReturnedEntity.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dto/ReturnedEntity.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/dto/ReturnedEntity.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -0,0 +1,11 @@\n+package org.nomarch.movieland.dto;\n+\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class ReturnedEntity {\n+    @Setter\n+    @Getter\n+    private Long id;\n+}"
  },
  {
    "sha": "645ad4c736b64733389b31eddcb3e77f61533044",
    "filename": "src/main/java/org/nomarch/movieland/dto/ReviewDto.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dto/ReviewDto.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/dto/ReviewDto.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/dto/ReviewDto.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -5,7 +5,7 @@\n \n @Setter\n @Getter\n-public class ReviewDto {\n+public class ReviewDto extends ReturnedEntity {\n     private Long id;\n     private UserDto user;\n     private String text;"
  },
  {
    "sha": "18bea514e8b61f92dc3ccfc952741e80db9937c1",
    "filename": "src/main/java/org/nomarch/movieland/entity/Country.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/entity/Country.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/entity/Country.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/entity/Country.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -1,12 +1,13 @@\n package org.nomarch.movieland.entity;\n \n import lombok.*;\n+import org.nomarch.movieland.dto.ReturnedEntity;\n \n @Builder\n @Getter\n @NoArgsConstructor\n @AllArgsConstructor\n-public class Country {\n+public class Country extends ReturnedEntity {\n     private Long id;\n     private String name;\n }"
  },
  {
    "sha": "cb1a55cf956148c837239250fe42e138988b2191",
    "filename": "src/main/java/org/nomarch/movieland/entity/Genre.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/entity/Genre.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/entity/Genre.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/entity/Genre.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -1,12 +1,13 @@\n package org.nomarch.movieland.entity;\n \n import lombok.*;\n+import org.nomarch.movieland.dto.ReturnedEntity;\n \n @Builder\n @Getter\n @AllArgsConstructor\n @NoArgsConstructor\n-public class Genre {\n+public class Genre extends ReturnedEntity {\n     private Long id;\n     private String name;\n }"
  },
  {
    "sha": "10a0fee6c0ec7bf4798e5894a6fefedf783d9477",
    "filename": "src/main/java/org/nomarch/movieland/exception/EnrichmentException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/exception/EnrichmentException.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/exception/EnrichmentException.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/exception/EnrichmentException.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -0,0 +1,7 @@\n+package org.nomarch.movieland.exception;\n+\n+public class EnrichmentException  extends RuntimeException {\n+    public EnrichmentException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "fa9d41e9ba21230902898e9e4d6634236ebdfc1d",
    "filename": "src/main/java/org/nomarch/movieland/exception/IncorrectCredentialsException.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/exception/IncorrectCredentialsException.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/exception/IncorrectCredentialsException.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/exception/IncorrectCredentialsException.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -1,6 +1,6 @@\n package org.nomarch.movieland.exception;\n \n-public class IncorrectCredentialsException  extends RuntimeException {\n+public class IncorrectCredentialsException extends RuntimeException {\n \n     public IncorrectCredentialsException(String message) {\n         super(message);"
  },
  {
    "sha": "fb3cb69792c59a8f08a1b844818adf82adcf1f1f",
    "filename": "src/main/java/org/nomarch/movieland/service/MovieEnrichmentService.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/service/MovieEnrichmentService.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/service/MovieEnrichmentService.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/service/MovieEnrichmentService.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -0,0 +1,10 @@\n+package org.nomarch.movieland.service;\n+\n+import org.nomarch.movieland.dto.ReturnedEntity;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface MovieEnrichmentService {\n+    Map<String, List<ReturnedEntity>> enrichDependantEntities(Long movieId);\n+}"
  },
  {
    "sha": "2daa647db1cd20c6a5fb4786fc189c751c455231",
    "filename": "src/main/java/org/nomarch/movieland/service/impl/DefaultMovieService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 14,
    "changes": 22,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/service/impl/DefaultMovieService.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/service/impl/DefaultMovieService.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/service/impl/DefaultMovieService.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -3,16 +3,12 @@\n import lombok.RequiredArgsConstructor;\n import org.nomarch.movieland.common.CurrencyCode;\n import org.nomarch.movieland.dao.MovieDao;\n-import org.nomarch.movieland.dao.cache.CachedMovieDao;\n import org.nomarch.movieland.dto.FullMovieDto;\n-import org.nomarch.movieland.dto.ReviewDto;\n-import org.nomarch.movieland.entity.Country;\n-import org.nomarch.movieland.entity.Genre;\n+import org.nomarch.movieland.dto.ReturnedEntity;\n import org.nomarch.movieland.entity.Movie;\n import org.nomarch.movieland.mapper.MovieDtoMapper;\n import org.nomarch.movieland.request.GetMovieRequest;\n import org.nomarch.movieland.service.*;\n-import org.nomarch.movieland.service.impl.multithreading.MultithreadingEnrichmentTool;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n \n@@ -22,11 +18,9 @@\n @Service\n @RequiredArgsConstructor\n public class DefaultMovieService implements MovieService {\n-\n-    private final CachedMovieDao cachedMovieDao;\n     private final MovieDao movieDao;\n     private final CurrencyService currencyService;\n-    private final MultithreadingEnrichmentTool multithreadingEnrichmentTool;\n+    private final MovieEnrichmentService movieEnrichmentService;\n     private final MovieDtoMapper movieDtoMapper;\n     @Value(\"${random.movies.amount:3}\")\n     private Integer moviesAmount;\n@@ -48,7 +42,7 @@\n \n     @Override\n     public FullMovieDto findById(Long movieId, CurrencyCode currencyCode) {\n-        Movie movie = cachedMovieDao.findById(movieId);\n+        Movie movie = movieDao.findById(movieId);\n \n         if (currencyCode != null && movie.getPrice() != null) {\n             Double convertedPrice = currencyService.convert(CurrencyCode.UAH, currencyCode, movie.getPrice());\n@@ -57,11 +51,11 @@ public FullMovieDto findById(Long movieId, CurrencyCode currencyCode) {\n \n         FullMovieDto movieDTO = movieDtoMapper.movieToDto(movie);\n \n-        Map<String, List<?>> dependantEntities = multithreadingEnrichmentTool.enrichDependantEntities(movieId);\n+        Map<String, List<ReturnedEntity>> dependantEntities = movieEnrichmentService.enrichDependantEntities(movieId);\n \n-        movieDTO.setGenreList((List<Genre>) dependantEntities.get(\"genres\"));\n-        movieDTO.setCountryList((List<Country>) dependantEntities.get(\"countries\"));\n-        movieDTO.setReviewList((List<ReviewDto>) dependantEntities.get(\"reviews\"));\n+        movieDTO.setGenreList(dependantEntities.get(\"genres\"));\n+        movieDTO.setCountryList(dependantEntities.get(\"countries\"));\n+        movieDTO.setReviewList(dependantEntities.get(\"reviews\"));\n \n         return movieDTO;\n     }\n@@ -73,6 +67,6 @@ public void add(Movie newMovie) {\n \n     @Override\n     public void edit(Movie updatedMovie) {\n-        cachedMovieDao.edit(updatedMovie);\n+        movieDao.edit(updatedMovie);\n     }\n }"
  },
  {
    "sha": "7a3c7b645e7dfebfe1a0c00ca1893b4214bf9620",
    "filename": "src/main/java/org/nomarch/movieland/service/impl/multithreading/GetCountriesCallable.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetCountriesCallable.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetCountriesCallable.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetCountriesCallable.java?ref=037a1cdbc0d0c2a5b2399e1420fa32ef2993e482",
    "patch": "@@ -1,19 +0,0 @@\n-package org.nomarch.movieland.service.impl.multithreading;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.nomarch.movieland.entity.Country;\n-import org.nomarch.movieland.service.CountryService;\n-\n-import java.util.List;\n-import java.util.concurrent.Callable;\n-\n-@RequiredArgsConstructor\n-public class GetCountriesCallable implements Callable<List<Country>> {\n-    private final Long movieId;\n-    private final CountryService countryService;\n-\n-    @Override\n-    public List<Country> call() throws Exception {\n-        return countryService.findByMovieId(movieId);\n-    }\n-}"
  },
  {
    "sha": "29ae829693f278080bab1d63912a6dbeaa14f7ab",
    "filename": "src/main/java/org/nomarch/movieland/service/impl/multithreading/GetGenresCallable.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetGenresCallable.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetGenresCallable.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetGenresCallable.java?ref=037a1cdbc0d0c2a5b2399e1420fa32ef2993e482",
    "patch": "@@ -1,19 +0,0 @@\n-package org.nomarch.movieland.service.impl.multithreading;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.nomarch.movieland.entity.Genre;\n-import org.nomarch.movieland.service.GenreService;\n-\n-import java.util.List;\n-import java.util.concurrent.Callable;\n-\n-@RequiredArgsConstructor\n-public class GetGenresCallable implements Callable<List<Genre>> {\n-    private final Long movieId;\n-    private final GenreService genreService;\n-\n-    @Override\n-    public List<Genre> call() throws Exception {\n-        return genreService.findByMovieId(movieId);\n-    }\n-}"
  },
  {
    "sha": "e52f00e02311c9a0f736b5c98c2f4469fd510ba2",
    "filename": "src/main/java/org/nomarch/movieland/service/impl/multithreading/GetReviewsCallable.java",
    "status": "removed",
    "additions": 0,
    "deletions": 20,
    "changes": 20,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetReviewsCallable.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetReviewsCallable.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/service/impl/multithreading/GetReviewsCallable.java?ref=037a1cdbc0d0c2a5b2399e1420fa32ef2993e482",
    "patch": "@@ -1,20 +0,0 @@\n-package org.nomarch.movieland.service.impl.multithreading;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.nomarch.movieland.dto.ReviewDto;\n-import org.nomarch.movieland.entity.Review;\n-import org.nomarch.movieland.service.ReviewService;\n-\n-import java.util.List;\n-import java.util.concurrent.Callable;\n-\n-@RequiredArgsConstructor\n-public class GetReviewsCallable implements Callable<List<ReviewDto>> {\n-    private final Long movieId;\n-    private final ReviewService reviewService;\n-\n-    @Override\n-    public List<ReviewDto> call() throws Exception {\n-        return reviewService.findByMovieId(movieId);\n-    }\n-}"
  },
  {
    "sha": "ce86c0430b9864a4a527bbb8ba19f82819c92aa6",
    "filename": "src/main/java/org/nomarch/movieland/service/impl/multithreading/MultithreadingEnrichmentTool.java",
    "status": "removed",
    "additions": 0,
    "deletions": 49,
    "changes": 49,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/MultithreadingEnrichmentTool.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/037a1cdbc0d0c2a5b2399e1420fa32ef2993e482/src/main/java/org/nomarch/movieland/service/impl/multithreading/MultithreadingEnrichmentTool.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/service/impl/multithreading/MultithreadingEnrichmentTool.java?ref=037a1cdbc0d0c2a5b2399e1420fa32ef2993e482",
    "patch": "@@ -1,49 +0,0 @@\n-package org.nomarch.movieland.service.impl.multithreading;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.nomarch.movieland.dto.ReviewDto;\n-import org.nomarch.movieland.entity.Country;\n-import org.nomarch.movieland.entity.Genre;\n-import org.nomarch.movieland.service.CountryService;\n-import org.nomarch.movieland.service.GenreService;\n-import org.nomarch.movieland.service.ReviewService;\n-import org.springframework.stereotype.Service;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.*;\n-\n-@Service\n-@RequiredArgsConstructor\n-public class MultithreadingEnrichmentTool {\n-    private final GenreService genreService;\n-    private final CountryService countryService;\n-    private final ReviewService reviewService;\n-\n-    public Map<String, List<?>> enrichDependantEntities(Long movieId) {\n-        ExecutorService executorService = Executors.newCachedThreadPool();\n-\n-        Future<List<Genre>> futureGenres = executorService.submit(new GetGenresCallable(movieId, genreService));\n-        Future<List<Country>> futureCountries = executorService.submit(new GetCountriesCallable(movieId, countryService));\n-        Future<List<ReviewDto>> futureReviews = executorService.submit(new GetReviewsCallable(movieId, reviewService));\n-\n-        Map<String, List<?>> entities = new HashMap<>();\n-        try {\n-            List<Genre> genres = futureGenres.get(5, TimeUnit.SECONDS);\n-            entities.put(\"genres\", genres);\n-            List<Country> countries = futureCountries.get(5, TimeUnit.SECONDS);\n-            entities.put(\"countries\", countries);\n-            List<ReviewDto> reviewDtoList = futureReviews.get(5, TimeUnit.SECONDS);\n-            entities.put(\"reviews\", reviewDtoList);\n-        } catch (ExecutionException | InterruptedException e) {\n-            e.printStackTrace();\n-        } catch (TimeoutException e) {\n-            e.getCause();\n-        } finally {\n-            executorService.shutdownNow();\n-        }\n-\n-        return entities;\n-    }\n-}"
  },
  {
    "sha": "736022e43f760716f5a3a7bfe43877e7b9dc2282",
    "filename": "src/main/java/org/nomarch/movieland/service/impl/multithreading/ParallelMovieEnrichmentService.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/service/impl/multithreading/ParallelMovieEnrichmentService.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/service/impl/multithreading/ParallelMovieEnrichmentService.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/service/impl/multithreading/ParallelMovieEnrichmentService.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -0,0 +1,51 @@\n+package org.nomarch.movieland.service.impl.multithreading;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.nomarch.movieland.dto.ReturnedEntity;\n+import org.nomarch.movieland.exception.EnrichmentException;\n+import org.nomarch.movieland.service.CountryService;\n+import org.nomarch.movieland.service.GenreService;\n+import org.nomarch.movieland.service.MovieEnrichmentService;\n+import org.nomarch.movieland.service.ReviewService;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.*;\n+\n+@Slf4j\n+@Service\n+@Primary\n+@RequiredArgsConstructor\n+public class ParallelMovieEnrichmentService<T> implements MovieEnrichmentService {\n+    private final GenreService genreService;\n+    private final CountryService countryService;\n+    private final ReviewService reviewService;\n+    private final ExecutorService executorService = Executors.newCachedThreadPool();\n+\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public Map<String, List<ReturnedEntity>> enrichDependantEntities(Long movieId) {\n+        List<Callable<List>> callables = new ArrayList<>();\n+        callables.add(() -> genreService.findByMovieId(movieId));\n+        callables.add(() -> countryService.findByMovieId(movieId));\n+        callables.add(() -> reviewService.findByMovieId(movieId));\n+\n+        List<Future<List>> futures;\n+        Map<String, List<ReturnedEntity>> entities = new HashMap<>();\n+        try {\n+            futures = executorService.invokeAll(callables, 5, TimeUnit.SECONDS);\n+            List<ReturnedEntity> genres = futures.get(0).get();\n+            entities.put(\"genres\", genres);\n+            List<ReturnedEntity> countries = futures.get(1).get();\n+            entities.put(\"countries\", countries);\n+            List<ReturnedEntity> reviewDtoList = futures.get(2).get();\n+            entities.put(\"reviews\", reviewDtoList);\n+        } catch (InterruptedException | ExecutionException e) {\n+            log.debug(\"Error happened during the parallel enrichment for movie with {}\", movieId);\n+            throw new EnrichmentException(e.getMessage());\n+        }\n+\n+        return entities;\n+    }\n+}"
  },
  {
    "sha": "d9fbad8fee75bc0a8d6a01bec5c87c86acbcdf99",
    "filename": "src/main/java/org/nomarch/movieland/web/controller/ExceptionHandlerController.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/web/controller/ExceptionHandlerController.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/main/java/org/nomarch/movieland/web/controller/ExceptionHandlerController.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/main/java/org/nomarch/movieland/web/controller/ExceptionHandlerController.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -1,5 +1,6 @@\n package org.nomarch.movieland.web.controller;\n \n+import org.nomarch.movieland.exception.EnrichmentException;\n import org.nomarch.movieland.exception.IncorrectCredentialsException;\n import org.nomarch.movieland.exception.InsufficientAccessRightsException;\n import org.springframework.http.HttpStatus;\n@@ -11,12 +12,17 @@\n public class ExceptionHandlerController {\n \n     @ExceptionHandler(IncorrectCredentialsException.class)\n-    public HttpStatus badRequest(IncorrectCredentialsException e) {\n-        return HttpStatus.BAD_REQUEST;\n+    public HttpStatus unauthorized(IncorrectCredentialsException e) {\n+        return HttpStatus.UNAUTHORIZED;\n     }\n \n     @ExceptionHandler(InsufficientAccessRightsException.class)\n     public HttpStatus forbidden(InsufficientAccessRightsException e) {\n         return HttpStatus.FORBIDDEN;\n     }\n+\n+    @ExceptionHandler(EnrichmentException.class)\n+    public HttpStatus serviceUnavailable(EnrichmentException e) {\n+        return HttpStatus.SERVICE_UNAVAILABLE;\n+    }\n }"
  },
  {
    "sha": "2c801dbe4c912ca0020ae6e87d47154089eb5cd3",
    "filename": "src/test/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDaoITest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nomarchia/Movieland/blob/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/test/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDaoITest.java",
    "raw_url": "https://github.com/nomarchia/Movieland/raw/7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6/src/test/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDaoITest.java",
    "contents_url": "https://api.github.com/repos/nomarchia/Movieland/contents/src/test/java/org/nomarch/movieland/dao/jdbc/JdbcMovieDaoITest.java?ref=7846c4ca4185f0777c5c1b9cdad5ac33ce4913a6",
    "patch": "@@ -33,7 +33,7 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n class JdbcMovieDaoITest {\n     @Autowired\n-    private MovieDao movieDao;\n+    private JdbcMovieDao movieDao;\n \n     @DisplayName(\"Get all movies from DB\")\n     @Test"
  }
]
