[
  {
    "sha": "220749b3b014ff92630e37d7e943f55f22665d45",
    "filename": "clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PostActivateListener.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PostActivateListener.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PostActivateListener.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PostActivateListener.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.clustering.infinispan.spi.listener;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.BiConsumer;\n+\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryActivated;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryActivatedEvent;\n+import org.infinispan.util.concurrent.CompletableFutures;\n+\n+/**\n+ * Generic non-blocking passivation listener that consumes an activation event.\n+ * @author Paul Ferraro\n+ */\n+@Listener(observation = Listener.Observation.POST)\n+public class PostActivateListener<K, V> {\n+    private final BiConsumer<K, V> consumer;\n+    private final Executor executor;\n+\n+    public PostActivateListener(BiConsumer<K, V> consumer, Executor executor) {\n+        this.consumer = consumer;\n+        this.executor = executor;\n+    }\n+\n+    @CacheEntryActivated\n+    public CompletionStage<Void> activated(CacheEntryActivatedEvent<K, V> event) {\n+        if (!event.isPre()) {\n+            try {\n+                return CompletableFuture.runAsync(() -> this.consumer.accept(event.getKey(), event.getValue()), this.executor);\n+            } catch (RejectedExecutionException e) {\n+                // Executor was shutdown\n+            }\n+        }\n+        return CompletableFutures.completedNull();\n+    }\n+}"
  },
  {
    "sha": "e01f19bc2b4d0f32cde0db502c39b3f2f8e76521",
    "filename": "clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PrePassivateListener.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PrePassivateListener.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PrePassivateListener.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/infinispan/spi/src/main/java/org/wildfly/clustering/infinispan/spi/listener/PrePassivateListener.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.clustering.infinispan.spi.listener;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.BiConsumer;\n+\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryPassivated;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryPassivatedEvent;\n+import org.infinispan.util.concurrent.CompletableFutures;\n+\n+/**\n+ * Generic non-blocking passivation listener that consumes a passivation event.\n+ * @author Paul Ferraro\n+ */\n+@Listener(observation = Listener.Observation.PRE)\n+public class PrePassivateListener<K, V> {\n+    private final BiConsumer<K, V> consumer;\n+    private final Executor executor;\n+\n+    public PrePassivateListener(BiConsumer<K, V> consumer, Executor executor) {\n+        this.consumer = consumer;\n+        this.executor = executor;\n+    }\n+\n+    @CacheEntryPassivated\n+    public CompletionStage<Void> passivated(CacheEntryPassivatedEvent<K, V> event) {\n+        if (event.isPre()) {\n+            try {\n+                return CompletableFuture.runAsync(() -> this.consumer.accept(event.getKey(), event.getValue()), this.executor);\n+            } catch (RejectedExecutionException e) {\n+                // Executor was shutdown\n+            }\n+        }\n+        return CompletableFutures.completedNull();\n+    }\n+}"
  },
  {
    "sha": "a68daa397fed20c0cdb489d649c5953ebc185f8d",
    "filename": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -127,6 +127,7 @@ public ImmutableSession createImmutableSession(String id, ImmutableSessionMetaDa\n \n     @Override\n     public void close() {\n-        // Nothing to close\n+        this.metaDataFactory.close();\n+        this.attributesFactory.close();\n     }\n }"
  },
  {
    "sha": "9859ea4b1c88127e65ff6753b7eadc5fc4db0161",
    "filename": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionActivationNotifier.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionActivationNotifier.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionActivationNotifier.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionActivationNotifier.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -44,6 +44,8 @@\n     private final C context;\n     private final SessionAttributesFilter filter;\n     private final AtomicBoolean active = new AtomicBoolean(false);\n+    private final Function<L, Consumer<S>> prePassivateNotifier;\n+    private final Function<L, Consumer<S>> postActivateNotifier;\n \n     public ImmutableSessionActivationNotifier(HttpSessionActivationListenerProvider<S, C, L> provider, ImmutableSession session, C context) {\n         this(provider, session, context, new ImmutableSessionAttributesFilter(session));\n@@ -54,19 +56,21 @@ public ImmutableSessionActivationNotifier(HttpSessionActivationListenerProvider<\n         this.session = session;\n         this.context = context;\n         this.filter = filter;\n+        this.prePassivateNotifier = this.provider::prePassivateNotifier;\n+        this.postActivateNotifier = this.provider::postActivateNotifier;\n     }\n \n     @Override\n     public void prePassivate() {\n         if (this.active.compareAndSet(true, false)) {\n-            this.notify(this.provider::prePassivateNotifier);\n+            this.notify(this.prePassivateNotifier);\n         }\n     }\n \n     @Override\n     public void postActivate() {\n         if (this.active.compareAndSet(false, true)) {\n-            this.notify(this.provider::postActivateNotifier);\n+            this.notify(this.postActivateNotifier);\n         }\n     }\n "
  },
  {
    "sha": "f46ff010ec6dbb4de15f7bfebcaa57dd75b117e3",
    "filename": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionAttributeActivationNotifier.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionAttributeActivationNotifier.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionAttributeActivationNotifier.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/ImmutableSessionAttributeActivationNotifier.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -44,24 +44,28 @@\n     private final Function<Supplier<L>, L> prePassivateListenerFactory;\n     private final Function<Supplier<L>, L> postActivateListenerFactory;\n     private final HttpSessionActivationListenerProvider<S, C, L> provider;\n+    private final Function<L, Consumer<S>> prePassivateNotifier;\n+    private final Function<L, Consumer<S>> postActivateNotifier;\n     private final S session;\n     private final Map<Supplier<L>, L> listeners = new ConcurrentHashMap<>();\n \n     public ImmutableSessionAttributeActivationNotifier(HttpSessionActivationListenerProvider<S, C, L> provider, ImmutableSession session, C context) {\n         this.provider = provider;\n+        this.prePassivateNotifier = this.provider::prePassivateNotifier;\n+        this.postActivateNotifier = this.provider::postActivateNotifier;\n         this.prePassivateListenerFactory = new HttpSessionActivationListenerFactory<>(provider, true);\n         this.postActivateListenerFactory = new HttpSessionActivationListenerFactory<>(provider, false);\n         this.session = provider.createHttpSession(session, context);\n     }\n \n     @Override\n     public void prePassivate(Object object) {\n-        this.notify(object, this.prePassivateListenerFactory, this.provider::prePassivateNotifier);\n+        this.notify(object, this.prePassivateListenerFactory, this.prePassivateNotifier);\n     }\n \n     @Override\n     public void postActivate(Object object) {\n-        this.notify(object, this.postActivateListenerFactory, this.provider::postActivateNotifier);\n+        this.notify(object, this.postActivateListenerFactory, this.postActivateNotifier);\n     }\n \n     private void notify(Object object, Function<Supplier<L>, L> listenerFactory, Function<L, Consumer<S>> notifierFactory) {"
  },
  {
    "sha": "f310fe4925a604f41094ffb85c06206c2fdf4e89",
    "filename": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributeActivationNotifier.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributeActivationNotifier.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributeActivationNotifier.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributeActivationNotifier.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -22,10 +22,15 @@\n \n package org.wildfly.clustering.web.cache.session;\n \n+import java.util.function.BiConsumer;\n+\n /**\n  * @author Paul Ferraro\n  */\n public interface SessionAttributeActivationNotifier extends AutoCloseable {\n+    BiConsumer<SessionAttributeActivationNotifier, Object> PRE_PASSIVATE = SessionAttributeActivationNotifier::prePassivate;\n+    BiConsumer<SessionAttributeActivationNotifier, Object> POST_ACTIVATE = SessionAttributeActivationNotifier::postActivate;\n+\n     /**\n      * Notifies the specified attribute that it will be passivated, if interested.\n      */"
  },
  {
    "sha": "f9048475ccbb1e3a1f98dec2445d00b74f25cf28",
    "filename": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributesFactory.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributesFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributesFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionAttributesFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -32,6 +32,11 @@\n  * @param <V> the marshalled value type\n  * @author Paul Ferraro\n  */\n-public interface SessionAttributesFactory<C, V> extends ImmutableSessionAttributesFactory<V>, Creator<String, V, Void>, Remover<String> {\n+public interface SessionAttributesFactory<C, V> extends ImmutableSessionAttributesFactory<V>, Creator<String, V, Void>, Remover<String>, AutoCloseable {\n     SessionAttributes createSessionAttributes(String id, V value, ImmutableSessionMetaData metaData, C context);\n+\n+    @Override\n+    default void close() {\n+        // Nothing to close\n+    }\n }"
  },
  {
    "sha": "ff05e3f217b8fa07a7953a2c6f903ce0074dc70b",
    "filename": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionMetaDataFactory.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionMetaDataFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionMetaDataFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionMetaDataFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -28,6 +28,11 @@\n /**\n  * @author Paul Ferraro\n  */\n-public interface SessionMetaDataFactory<V> extends ImmutableSessionMetaDataFactory<V>, Creator<String, V, Void>, Remover<String> {\n+public interface SessionMetaDataFactory<V> extends ImmutableSessionMetaDataFactory<V>, Creator<String, V, Void>, Remover<String>, AutoCloseable {\n     InvalidatableSessionMetaData createSessionMetaData(String id, V value);\n+\n+    @Override\n+    default void close() {\n+        // Nothing to close\n+    }\n }"
  },
  {
    "sha": "e05bc04dfbcbc30ade6e93640eab714106ae5b66",
    "filename": "clustering/web/cache/src/test/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactoryTestCase.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/test/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactoryTestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/cache/src/test/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactoryTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/cache/src/test/java/org/wildfly/clustering/web/cache/session/CompositeSessionFactoryTestCase.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -164,4 +164,12 @@ public void createImmutableSession() {\n         assertSame(metaData, result.getMetaData());\n         assertSame(attributes, result.getAttributes());\n     }\n+\n+    @Test\n+    public void close() {\n+        this.factory.close();\n+\n+        verify(this.metaDataFactory).close();\n+        verify(this.attributesFactory).close();\n+    }\n }"
  },
  {
    "sha": "7fb02af02a8b33e3d2d1475cf3ee2d110bf8ca97",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanConfiguration.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanConfiguration.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanConfiguration.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanConfiguration.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.clustering.web.infinispan.session;\n+\n+import org.infinispan.Cache;\n+import org.wildfly.clustering.ee.cache.CacheProperties;\n+import org.wildfly.clustering.ee.infinispan.InfinispanCacheProperties;\n+\n+/**\n+ * @author Paul Ferraro\n+ */\n+public interface InfinispanConfiguration {\n+\n+    <K, V> Cache<K, V> getCache();\n+\n+    default CacheProperties getCacheProperties() {\n+        return new InfinispanCacheProperties(this.getCache().getCacheConfiguration());\n+    }\n+}"
  },
  {
    "sha": "b99db690de79e1c003938c66a2cfb290830d07b9",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionAttributesFactoryConfiguration.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionAttributesFactoryConfiguration.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionAttributesFactoryConfiguration.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionAttributesFactoryConfiguration.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -22,7 +22,11 @@\n \n package org.wildfly.clustering.web.infinispan.session;\n \n+import java.util.concurrent.Executor;\n+import java.util.function.Function;\n+\n import org.wildfly.clustering.ee.cache.CacheProperties;\n+import org.wildfly.clustering.web.cache.session.SessionAttributeActivationNotifier;\n import org.wildfly.clustering.web.cache.session.SessionAttributesFactoryConfiguration;\n \n /**\n@@ -33,10 +37,14 @@\n  * @param <SV> attributes serialized form type\n  * @author Paul Ferraro\n  */\n-public interface InfinispanSessionAttributesFactoryConfiguration<S, C, L, V, SV> extends InfinispanSessionMetaDataFactoryConfiguration, SessionAttributesFactoryConfiguration<S, C, L, V, SV> {\n+public interface InfinispanSessionAttributesFactoryConfiguration<S, C, L, V, SV> extends InfinispanConfiguration, SessionAttributesFactoryConfiguration<S, C, L, V, SV> {\n \n     @Override\n     default CacheProperties getCacheProperties() {\n-        return InfinispanSessionMetaDataFactoryConfiguration.super.getCacheProperties();\n+        return InfinispanConfiguration.super.getCacheProperties();\n     }\n+\n+    Executor getExecutor();\n+\n+    Function<String, SessionAttributeActivationNotifier> getActivationNotifierFactory();\n }"
  },
  {
    "sha": "8b0c5009e41b7d1d2136c2fcc1ef9000031e23db",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManager.java",
    "status": "modified",
    "additions": 17,
    "deletions": 97,
    "changes": 114,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManager.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManager.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManager.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -22,45 +22,31 @@\n package org.wildfly.clustering.web.infinispan.session;\n \n import java.time.Duration;\n+import java.util.AbstractMap.SimpleImmutableEntry;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.RejectedExecutionException;\n-import java.util.concurrent.TimeUnit;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.infinispan.Cache;\n import org.infinispan.context.Flag;\n import org.infinispan.notifications.Listener;\n-import org.infinispan.notifications.cachelistener.annotation.CacheEntryActivated;\n-import org.infinispan.notifications.cachelistener.annotation.CacheEntryPassivated;\n import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n-import org.infinispan.notifications.cachelistener.event.CacheEntryActivatedEvent;\n-import org.infinispan.notifications.cachelistener.event.CacheEntryPassivatedEvent;\n import org.infinispan.notifications.cachelistener.event.CacheEntryRemovedEvent;\n-import org.infinispan.notifications.cachelistener.filter.CacheEventFilter;\n import org.infinispan.util.concurrent.CompletableFutures;\n-import org.jboss.as.clustering.context.DefaultExecutorService;\n-import org.jboss.as.clustering.context.DefaultThreadFactory;\n import org.wildfly.clustering.Registrar;\n import org.wildfly.clustering.Registration;\n-import org.wildfly.clustering.ee.BatchContext;\n import org.wildfly.clustering.ee.Batcher;\n import org.wildfly.clustering.ee.Recordable;\n import org.wildfly.clustering.ee.Scheduler;\n-import org.wildfly.clustering.ee.cache.CacheProperties;\n import org.wildfly.clustering.ee.cache.Key;\n import org.wildfly.clustering.ee.cache.tx.TransactionBatch;\n import org.wildfly.clustering.infinispan.spi.PredicateKeyFilter;\n import org.wildfly.clustering.infinispan.spi.distribution.CacheLocality;\n import org.wildfly.clustering.infinispan.spi.distribution.Locality;\n import org.wildfly.clustering.web.IdentifierFactory;\n-import org.wildfly.clustering.web.cache.session.ImmutableSessionActivationNotifier;\n import org.wildfly.clustering.web.cache.session.SessionFactory;\n import org.wildfly.clustering.web.cache.session.SessionMetaDataFactory;\n import org.wildfly.clustering.web.cache.session.SimpleImmutableSession;\n@@ -71,52 +57,46 @@\n import org.wildfly.clustering.web.session.Session;\n import org.wildfly.clustering.web.session.SessionExpirationListener;\n import org.wildfly.clustering.web.session.SessionManager;\n-import org.wildfly.clustering.web.session.SpecificationProvider;\n-import org.wildfly.security.manager.WildFlySecurityManager;\n \n /**\n  * Generic session manager implementation - independent of cache mapping strategy.\n- * @param <S> the HttpSession specification type\n  * @param <SC> the ServletContext specification type\n- * @param <AL> the HttpSessionAttributeListener specification type\n  * @param <MV> the meta-data value type\n  * @param <AV> the attributes value type\n  * @param <LC> the local context type\n  * @author Paul Ferraro\n  */\n @Listener(primaryOnly = true)\n-public class InfinispanSessionManager<S, SC, AL, MV, AV, LC> implements SessionManager<LC, TransactionBatch> {\n+public class InfinispanSessionManager<SC, MV, AV, LC> implements SessionManager<LC, TransactionBatch> {\n \n     private final Registrar<SessionExpirationListener> expirationRegistrar;\n     private final SessionExpirationListener expirationListener;\n     private final Batcher<TransactionBatch> batcher;\n     private final Cache<Key<String>, ?> cache;\n-    private final CacheProperties properties;\n     private final SessionFactory<SC, MV, AV, LC> factory;\n     private final IdentifierFactory<String> identifierFactory;\n     private final Scheduler<String, ImmutableSessionMetaData> expirationScheduler;\n     private final Recordable<ImmutableSessionMetaData> recorder;\n     private final SC context;\n-    private final SpecificationProvider<S, SC, AL> provider;\n     private final Runnable startTask;\n     private final Consumer<ImmutableSession> closeTask;\n+    private final Registrar<Map.Entry<SC, SessionManager<LC, TransactionBatch>>> contextRegistrar;\n \n     private volatile Duration defaultMaxInactiveInterval = Duration.ofMinutes(30L);\n     private volatile Registration expirationRegistration;\n-    private volatile ExecutorService executor;\n+    private volatile Registration contextRegistration;\n \n-    public InfinispanSessionManager(SessionFactory<SC, MV, AV, LC> factory, InfinispanSessionManagerConfiguration<S, SC, AL> configuration) {\n+    public InfinispanSessionManager(SessionFactory<SC, MV, AV, LC> factory, InfinispanSessionManagerConfiguration<SC, LC> configuration) {\n         this.factory = factory;\n         this.cache = configuration.getCache();\n-        this.properties = configuration.getProperties();\n         this.expirationRegistrar = configuration.getExpirationRegistar();\n         this.expirationListener = configuration.getExpirationListener();\n         this.identifierFactory = configuration.getIdentifierFactory();\n         this.batcher = configuration.getBatcher();\n         this.expirationScheduler = configuration.getExpirationScheduler();\n         this.recorder = configuration.getInactiveSessionRecorder();\n         this.context = configuration.getServletContext();\n-        this.provider = configuration.getSpecificationProvider();\n+        this.contextRegistrar = configuration.getContextRegistrar();\n         this.startTask = configuration.getStartTask();\n         this.closeTask = new Consumer<ImmutableSession>() {\n             @Override\n@@ -130,32 +110,24 @@ public void accept(ImmutableSession session) {\n \n     @Override\n     public void start() {\n-        this.executor = Executors.newCachedThreadPool(new DefaultThreadFactory(this.getClass()));\n+        this.contextRegistration = this.contextRegistrar.register(new SimpleImmutableEntry<>(this.context, this));\n         if (this.recorder != null) {\n             this.recorder.reset();\n+            this.cache.addListener(this, new PredicateKeyFilter<>(SessionCreationMetaDataKeyFilter.INSTANCE), null);\n         }\n         this.identifierFactory.start();\n         this.expirationRegistration = this.expirationRegistrar.register(this.expirationListener);\n-        CacheEventFilter<Object, Object> filter = new PredicateKeyFilter<>(SessionCreationMetaDataKeyFilter.INSTANCE);\n-        this.cache.addListener(this, filter, null);\n-        this.cache.addListener(this.factory.getMetaDataFactory(), filter, null);\n-        this.cache.addListener(this.factory.getAttributesFactory(), filter, null);\n         this.startTask.run();\n     }\n \n     @Override\n     public void stop() {\n         this.expirationRegistration.close();\n-        this.cache.removeListener(this);\n-        this.cache.removeListener(this.factory.getMetaDataFactory());\n-        this.cache.removeListener(this.factory.getAttributesFactory());\n-        this.identifierFactory.stop();\n-        WildFlySecurityManager.doUnchecked(this.executor, DefaultExecutorService.SHUTDOWN_NOW_ACTION);\n-        try {\n-            this.executor.awaitTermination(this.cache.getCacheConfiguration().transaction().cacheStopTimeout(), TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n+        if (this.recorder != null) {\n+            this.cache.removeListener(this);\n         }\n+        this.identifierFactory.stop();\n+        this.contextRegistration.close();\n     }\n \n     @Override\n@@ -241,68 +213,16 @@ public long getActiveSessionCount() {\n         return this.getActiveSessions().size();\n     }\n \n-    @CacheEntryActivated\n-    public CompletionStage<Void> activated(CacheEntryActivatedEvent<SessionCreationMetaDataKey, ?> event) {\n-        if (!event.isPre() && !this.properties.isPersistent()) {\n-            String id = event.getKey().getId();\n-            InfinispanWebLogger.ROOT_LOGGER.tracef(\"Session %s was activated\", id);\n-            try (TransactionBatch batch = this.batcher.suspendBatch()) {\n-                return CompletableFuture.runAsync(() -> {\n-                    try (BatchContext context = this.batcher.resumeBatch(batch)) {\n-                        Map.Entry<MV, AV> value = this.factory.tryValue(id);\n-                        if (value != null) {\n-                            ImmutableSession session = this.factory.createImmutableSession(id, value);\n-                            new ImmutableSessionActivationNotifier<>(this.provider, session, this.context).postActivate();\n-                        }\n-                    }\n-                }, this.executor);\n-            } catch (RejectedExecutionException e) {\n-                // Session manager is stopped\n-            }\n-        }\n-        return CompletableFutures.completedNull();\n-    }\n-\n-    @CacheEntryPassivated\n-    public CompletionStage<Void> passivated(CacheEntryPassivatedEvent<SessionCreationMetaDataKey, ?> event) {\n-        if (event.isPre() && !this.properties.isPersistent()) {\n-            String id = event.getKey().getId();\n-            InfinispanWebLogger.ROOT_LOGGER.tracef(\"Session %s will be passivated\", id);\n-            try (TransactionBatch batch = this.batcher.suspendBatch()) {\n-                return CompletableFuture.runAsync(() -> {\n-                    try (BatchContext context = this.batcher.resumeBatch(batch)) {\n-                        Map.Entry<MV, AV> value = this.factory.tryValue(id);\n-                        if (value != null) {\n-                            ImmutableSession session = this.factory.createImmutableSession(id, value);\n-                            new ImmutableSessionActivationNotifier<>(this.provider, session, this.context).prePassivate();\n-                        }\n-                    }\n-                }, this.executor);\n-            } catch (RejectedExecutionException e) {\n-                // Session manager is stopped\n-            }\n-        }\n-        return CompletableFutures.completedNull();\n-    }\n-\n     @CacheEntryRemoved\n     public CompletionStage<Void> removed(CacheEntryRemovedEvent<SessionCreationMetaDataKey, ?> event) {\n         if (event.isPre()) {\n             String id = event.getKey().getId();\n             InfinispanWebLogger.ROOT_LOGGER.tracef(\"Session %s will be removed\", id);\n-            if (this.recorder != null) {\n-                SessionMetaDataFactory<MV> factory = this.factory.getMetaDataFactory();\n-                MV value = factory.tryValue(id);\n-                if (value != null) {\n-                    try {\n-                        return CompletableFuture.runAsync(() -> {\n-                            ImmutableSessionMetaData metaData = factory.createImmutableSessionMetaData(id, value);\n-                            this.recorder.record(metaData);\n-                        }, this.executor);\n-                    } catch (RejectedExecutionException e) {\n-                        // Session manager is stopped\n-                    }\n-                }\n+            SessionMetaDataFactory<MV> factory = this.factory.getMetaDataFactory();\n+            MV value = factory.tryValue(id);\n+            if (value != null) {\n+                ImmutableSessionMetaData metaData = factory.createImmutableSessionMetaData(id, value);\n+                this.recorder.record(metaData);\n             }\n         }\n         return CompletableFutures.completedNull();"
  },
  {
    "sha": "20fa05a9a39fd9d19dec54ab91ce22a3b5fa369b",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerConfiguration.java",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerConfiguration.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerConfiguration.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerConfiguration.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -21,6 +21,8 @@\n  */\n package org.wildfly.clustering.web.infinispan.session;\n \n+import java.util.Map;\n+\n import org.infinispan.Cache;\n import org.wildfly.clustering.Registrar;\n import org.wildfly.clustering.ee.Batcher;\n@@ -32,17 +34,16 @@\n import org.wildfly.clustering.web.IdentifierFactory;\n import org.wildfly.clustering.web.session.ImmutableSessionMetaData;\n import org.wildfly.clustering.web.session.SessionExpirationListener;\n-import org.wildfly.clustering.web.session.SpecificationProvider;\n+import org.wildfly.clustering.web.session.SessionManager;\n \n /**\n  * Configuration for an {@link InfinispanSessionManager}.\n- * @param <S> the HttpSession specification type\n- * @param <C> the ServletContext specification type\n- * @param <AL> the HttpSessionAttributeListener specification type\n+ * @param <SC> the ServletContext specification type\n+ * @param <LC> the local context type\n  * @author Paul Ferraro\n  */\n-public interface InfinispanSessionManagerConfiguration<S, C, AL> {\n-    C getServletContext();\n+public interface InfinispanSessionManagerConfiguration<SC, LC> {\n+    SC getServletContext();\n     SessionExpirationListener getExpirationListener();\n     Cache<Key<String>, ?> getCache();\n     CacheProperties getProperties();\n@@ -51,6 +52,6 @@\n     Scheduler<String, ImmutableSessionMetaData> getExpirationScheduler();\n     Recordable<ImmutableSessionMetaData> getInactiveSessionRecorder();\n     Registrar<SessionExpirationListener> getExpirationRegistar();\n-    SpecificationProvider<S, C, AL> getSpecificationProvider();\n     Runnable getStartTask();\n+    Registrar<Map.Entry<SC, SessionManager<LC, TransactionBatch>>> getContextRegistrar();\n }"
  },
  {
    "sha": "a5e5e7b1bc7221e0d899d150c6a5de5c569c82a3",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactory.java",
    "status": "modified",
    "additions": 52,
    "deletions": 9,
    "changes": 61,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -22,9 +22,17 @@\n package org.wildfly.clustering.web.infinispan.session;\n \n import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.BiConsumer;\n+import java.util.function.Function;\n \n import org.infinispan.Cache;\n+import org.jboss.as.clustering.context.DefaultExecutorService;\n+import org.jboss.as.clustering.context.DefaultThreadFactory;\n import org.wildfly.clustering.Registrar;\n import org.wildfly.clustering.ee.Batcher;\n import org.wildfly.clustering.ee.Recordable;\n@@ -52,6 +60,7 @@\n import org.wildfly.clustering.web.cache.session.CompositeSessionMetaDataEntry;\n import org.wildfly.clustering.web.cache.session.ConcurrentSessionManager;\n import org.wildfly.clustering.web.cache.session.MarshalledValueSessionAttributesFactoryConfiguration;\n+import org.wildfly.clustering.web.cache.session.SessionAttributeActivationNotifier;\n import org.wildfly.clustering.web.cache.session.SessionAttributesFactory;\n import org.wildfly.clustering.web.cache.session.SessionFactory;\n import org.wildfly.clustering.web.cache.session.SessionMetaDataFactory;\n@@ -64,6 +73,7 @@\n import org.wildfly.clustering.web.session.SessionManagerConfiguration;\n import org.wildfly.clustering.web.session.SessionManagerFactory;\n import org.wildfly.clustering.web.session.SpecificationProvider;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n \n /**\n  * Factory for creating session managers.\n@@ -82,6 +92,8 @@\n     final Cache<Key<String>, ?> cache;\n     final org.wildfly.clustering.ee.Scheduler<String, ImmutableSessionMetaData> scheduler;\n     final SpecificationProvider<S, SC, AL> provider;\n+    final ExecutorService executor = Executors.newCachedThreadPool(new DefaultThreadFactory(this.getClass()));\n+    final SessionAttributeActivationNotifierFactory<S, SC, AL, LC, TransactionBatch> notifierFactory;\n \n     private final KeyAffinityServiceFactory affinityFactory;\n     private final SessionFactory<SC, CompositeSessionMetaDataEntry<LC>, ?, LC> factory;\n@@ -94,7 +106,18 @@ public InfinispanSessionManagerFactory(InfinispanSessionManagerFactoryConfigurat\n         this.batcher = new InfinispanBatcher(this.cache);\n         this.properties = config.getCacheProperties();\n         this.provider = config.getSpecificationProvider();\n-        SessionMetaDataFactory<CompositeSessionMetaDataEntry<LC>> metaDataFactory = new InfinispanSessionMetaDataFactory<>(config);\n+        this.notifierFactory = new SessionAttributeActivationNotifierFactory<>(this.provider);\n+        SessionMetaDataFactory<CompositeSessionMetaDataEntry<LC>> metaDataFactory = new InfinispanSessionMetaDataFactory<>(new InfinispanSessionMetaDataFactoryConfiguration() {\n+            @Override\n+            public <K, V> Cache<K, V> getCache() {\n+                return config.getCache();\n+            }\n+\n+            @Override\n+            public Executor getExecutor() {\n+                return InfinispanSessionManagerFactory.this.executor;\n+            }\n+        });\n         this.factory = new CompositeSessionFactory<>(metaDataFactory, this.createSessionAttributesFactory(config), config.getLocalContextFactory());\n         ExpiredSessionRemover<SC, ?, ?, LC> remover = new ExpiredSessionRemover<>(this.factory);\n         this.expirationRegistrar = remover;\n@@ -115,7 +138,7 @@ public void run() {\n     @Override\n     public SessionManager<LC, TransactionBatch> createSessionManager(final SessionManagerConfiguration<SC> configuration) {\n         IdentifierFactory<String> factory = new AffinityIdentifierFactory<>(configuration.getIdentifierFactory(), this.cache, this.affinityFactory);\n-        InfinispanSessionManagerConfiguration<S, SC, AL> config = new InfinispanSessionManagerConfiguration<S, SC, AL>() {\n+        InfinispanSessionManagerConfiguration<SC, LC> config = new InfinispanSessionManagerConfiguration<SC, LC>() {\n             @Override\n             public SessionExpirationListener getExpirationListener() {\n                 return configuration.getExpirationListener();\n@@ -162,13 +185,13 @@ public CacheProperties getProperties() {\n             }\n \n             @Override\n-            public SpecificationProvider<S, SC, AL> getSpecificationProvider() {\n-                return InfinispanSessionManagerFactory.this.provider;\n+            public Runnable getStartTask() {\n+                return InfinispanSessionManagerFactory.this;\n             }\n \n             @Override\n-            public Runnable getStartTask() {\n-                return InfinispanSessionManagerFactory.this;\n+            public Registrar<Map.Entry<SC, SessionManager<LC, TransactionBatch>>> getContextRegistrar() {\n+                return InfinispanSessionManagerFactory.this.notifierFactory;\n             }\n         };\n         return new ConcurrentSessionManager<>(new InfinispanSessionManager<>(this.factory, config), this.properties.isTransactional() ? SimpleManager::new : ConcurrentManager::new);\n@@ -177,10 +200,10 @@ public Runnable getStartTask() {\n     private SessionAttributesFactory<SC, ?> createSessionAttributesFactory(InfinispanSessionManagerFactoryConfiguration<S, SC, AL, MC, LC> configuration) {\n         switch (configuration.getAttributePersistenceStrategy()) {\n             case FINE: {\n-                return new FineSessionAttributesFactory<>(new InfinispanMarshalledValueSessionAttributesFactoryConfiguration<>(configuration));\n+                return new FineSessionAttributesFactory<>(new InfinispanMarshalledValueSessionAttributesFactoryConfiguration<>(configuration, this.notifierFactory, this.executor));\n             }\n             case COARSE: {\n-                return new CoarseSessionAttributesFactory<>(new InfinispanMarshalledValueSessionAttributesFactoryConfiguration<>(configuration));\n+                return new CoarseSessionAttributesFactory<>(new InfinispanMarshalledValueSessionAttributesFactoryConfiguration<>(configuration, this.notifierFactory, this.executor));\n             }\n             default: {\n                 // Impossible\n@@ -194,19 +217,39 @@ public void close() {\n         this.listener.close();\n         this.scheduler.close();\n         this.factory.close();\n+        WildFlySecurityManager.doUnchecked(this.executor, DefaultExecutorService.SHUTDOWN_ACTION);\n+        try {\n+            this.executor.awaitTermination(this.cache.getCacheConfiguration().transaction().cacheStopTimeout(), TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+        }\n     }\n \n     private static class InfinispanMarshalledValueSessionAttributesFactoryConfiguration<S, SC, AL, V, MC, LC> extends MarshalledValueSessionAttributesFactoryConfiguration<S, SC, AL, V, MC, LC> implements InfinispanSessionAttributesFactoryConfiguration<S, SC, AL, V, MarshalledValue<V, MC>> {\n         private final InfinispanSessionManagerFactoryConfiguration<S, SC, AL, MC, LC> configuration;\n+        private final Function<String, SessionAttributeActivationNotifier> notifierFactory;\n+        private final Executor executor;\n \n-        InfinispanMarshalledValueSessionAttributesFactoryConfiguration(InfinispanSessionManagerFactoryConfiguration<S, SC, AL, MC, LC> configuration) {\n+        InfinispanMarshalledValueSessionAttributesFactoryConfiguration(InfinispanSessionManagerFactoryConfiguration<S, SC, AL, MC, LC> configuration, Function<String, SessionAttributeActivationNotifier> notifierFactory, Executor executor) {\n             super(configuration);\n             this.configuration = configuration;\n+            this.notifierFactory = notifierFactory;\n+            this.executor = executor;\n         }\n \n         @Override\n         public <CK, CV> Cache<CK, CV> getCache() {\n             return this.configuration.getCache();\n         }\n+\n+        @Override\n+        public Executor getExecutor() {\n+            return this.executor;\n+        }\n+\n+        @Override\n+        public Function<String, SessionAttributeActivationNotifier> getActivationNotifierFactory() {\n+            return this.notifierFactory;\n+        }\n     }\n }"
  },
  {
    "sha": "508a56bcdfa36c933116a34fc0aef943e85d6830",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactoryConfiguration.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactoryConfiguration.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactoryConfiguration.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionManagerFactoryConfiguration.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -36,7 +36,7 @@\n  * @param <LC> the local context type\n  * @author Paul Ferraro\n  */\n-public interface InfinispanSessionManagerFactoryConfiguration<S, SC, AL, MC, LC> extends DistributableSessionManagementConfiguration, SessionManagerFactoryConfiguration<S, SC, AL, MC, LC>, InfinispanSessionMetaDataFactoryConfiguration {\n+public interface InfinispanSessionManagerFactoryConfiguration<S, SC, AL, MC, LC> extends DistributableSessionManagementConfiguration, SessionManagerFactoryConfiguration<S, SC, AL, MC, LC>, InfinispanConfiguration {\n \n     KeyAffinityServiceFactory getKeyAffinityServiceFactory();\n "
  },
  {
    "sha": "ff2289db2584fc3dd381a6ccac60f9d2bf55536b",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactory.java",
    "status": "modified",
    "additions": 12,
    "deletions": 16,
    "changes": 28,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -29,14 +29,12 @@\n import org.infinispan.Cache;\n import org.infinispan.commons.CacheException;\n import org.infinispan.context.Flag;\n-import org.infinispan.notifications.Listener;\n-import org.infinispan.notifications.cachelistener.annotation.CacheEntriesEvicted;\n-import org.infinispan.notifications.cachelistener.event.CacheEntriesEvictedEvent;\n import org.wildfly.clustering.ee.Mutator;\n import org.wildfly.clustering.ee.MutatorFactory;\n import org.wildfly.clustering.ee.cache.CacheProperties;\n-import org.wildfly.clustering.ee.infinispan.GroupedKey;\n import org.wildfly.clustering.ee.infinispan.InfinispanMutatorFactory;\n+import org.wildfly.clustering.infinispan.spi.PredicateKeyFilter;\n+import org.wildfly.clustering.infinispan.spi.listener.PrePassivateListener;\n import org.wildfly.clustering.web.cache.session.CompositeSessionMetaData;\n import org.wildfly.clustering.web.cache.session.CompositeSessionMetaDataEntry;\n import org.wildfly.clustering.web.cache.session.InvalidatableSessionMetaData;\n@@ -53,7 +51,6 @@\n /**\n  * @author Paul Ferraro\n  */\n-@Listener(sync = false)\n public class InfinispanSessionMetaDataFactory<L> implements SessionMetaDataFactory<CompositeSessionMetaDataEntry<L>> {\n \n     private final Cache<SessionCreationMetaDataKey, SessionCreationMetaDataEntry<L>> creationMetaDataCache;\n@@ -62,6 +59,7 @@\n     private final Cache<SessionAccessMetaDataKey, SessionAccessMetaData> accessMetaDataCache;\n     private final MutatorFactory<SessionAccessMetaDataKey, SessionAccessMetaData> accessMetaDataMutatorFactory;\n     private final CacheProperties properties;\n+    private final Object evictListener;\n \n     public InfinispanSessionMetaDataFactory(InfinispanSessionMetaDataFactoryConfiguration configuration) {\n         this.properties = configuration.getCacheProperties();\n@@ -70,6 +68,13 @@ public InfinispanSessionMetaDataFactory(InfinispanSessionMetaDataFactoryConfigur\n         this.findCreationMetaDataCache = this.properties.isLockOnRead() ? this.creationMetaDataCache.getAdvancedCache().withFlags(Flag.FORCE_WRITE_LOCK) : this.creationMetaDataCache;\n         this.accessMetaDataCache = configuration.getCache();\n         this.accessMetaDataMutatorFactory = new InfinispanMutatorFactory<>(this.accessMetaDataCache, this.properties);\n+        this.evictListener = new PrePassivateListener<>(this::cascadeEvict, configuration.getExecutor());\n+        this.creationMetaDataCache.addListener(this.evictListener, new PredicateKeyFilter<>(SessionCreationMetaDataKeyFilter.INSTANCE), null);\n+    }\n+\n+    @Override\n+    public void close() {\n+        this.creationMetaDataCache.removeListener(this.evictListener);\n     }\n \n     @Override\n@@ -153,16 +158,7 @@ private boolean delete(String id, Flag... flags) {\n         return true;\n     }\n \n-    @CacheEntriesEvicted\n-    public void evicted(CacheEntriesEvictedEvent<GroupedKey<String>, ?> event) {\n-        if (!event.isPre()) {\n-            Cache<SessionAccessMetaDataKey, SessionAccessMetaData> cache = this.accessMetaDataCache.getAdvancedCache().withFlags(Flag.SKIP_LISTENER_NOTIFICATION);\n-            for (GroupedKey<String> key : event.getEntries().keySet()) {\n-                // Workaround for ISPN-8324\n-                if (key instanceof SessionCreationMetaDataKey) {\n-                    cache.evict(new SessionAccessMetaDataKey(key.getId()));\n-                }\n-            }\n-        }\n+    private void cascadeEvict(SessionCreationMetaDataKey key, SessionCreationMetaDataEntry<L> value) {\n+        this.accessMetaDataCache.getAdvancedCache().withFlags(Flag.SKIP_LISTENER_NOTIFICATION).evict(new SessionAccessMetaDataKey(key.getId()));\n     }\n }"
  },
  {
    "sha": "6fe2bf6b8f6e3cd4f0f6e550dec9d0173f0cad2f",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactoryConfiguration.java",
    "status": "modified",
    "additions": 4,
    "deletions": 10,
    "changes": 14,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactoryConfiguration.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactoryConfiguration.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/InfinispanSessionMetaDataFactoryConfiguration.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -1,6 +1,6 @@\n /*\n  * JBoss, Home of Professional Open Source.\n- * Copyright 2019, Red Hat, Inc., and individual contributors\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n  * as indicated by the @author tags. See the copyright.txt file in the\n  * distribution for a full listing of individual contributors.\n  *\n@@ -22,18 +22,12 @@\n \n package org.wildfly.clustering.web.infinispan.session;\n \n-import org.infinispan.Cache;\n-import org.wildfly.clustering.ee.cache.CacheProperties;\n-import org.wildfly.clustering.ee.infinispan.InfinispanCacheProperties;\n+import java.util.concurrent.Executor;\n \n /**\n  * @author Paul Ferraro\n  */\n-public interface InfinispanSessionMetaDataFactoryConfiguration {\n+public interface InfinispanSessionMetaDataFactoryConfiguration extends InfinispanConfiguration {\n \n-    <K, V> Cache<K, V> getCache();\n-\n-    default CacheProperties getCacheProperties() {\n-        return new InfinispanCacheProperties(this.getCache().getCacheConfiguration());\n-    }\n+    Executor getExecutor();\n }"
  },
  {
    "sha": "85da80231fa77e5385666ef63023f291914b2cc4",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/SessionAttributeActivationNotifierFactory.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/SessionAttributeActivationNotifierFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/SessionAttributeActivationNotifierFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/SessionAttributeActivationNotifierFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,106 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.clustering.web.infinispan.session;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import org.wildfly.clustering.Registrar;\n+import org.wildfly.clustering.Registration;\n+import org.wildfly.clustering.ee.Batch;\n+import org.wildfly.clustering.web.cache.session.SessionAttributeActivationNotifier;\n+import org.wildfly.clustering.web.session.HttpSessionActivationListenerProvider;\n+import org.wildfly.clustering.web.session.Session;\n+import org.wildfly.clustering.web.session.SessionManager;\n+import org.wildfly.clustering.web.session.oob.OOBSession;\n+\n+/**\n+ * Factory for creating a SessionAttributeActivationNotifier for a given session identifier.\n+ * Session activation events will created using OOB sessions.\n+ * @author Paul Ferraro\n+ * @param <S> the HttpSession specification type\n+ * @param <SC> the ServletContext specification type\n+ * @param <AL> the HttpSessionActivationListener specification type\n+ * @param <LC> the local context type\n+ * @param <B> the batch type\n+ */\n+public class SessionAttributeActivationNotifierFactory<S, SC, AL, LC, B extends Batch> implements Function<String, SessionAttributeActivationNotifier>, Registrar<Map.Entry<SC, SessionManager<LC, B>>> {\n+\n+    private final Map<SC, SessionManager<LC, B>> contexts = new ConcurrentHashMap<>();\n+    private final HttpSessionActivationListenerProvider<S, SC, AL> provider;\n+    private final Function<AL, Consumer<S>> prePassivateNotifier;\n+    private final Function<AL, Consumer<S>> postActivateNotifier;\n+\n+    public SessionAttributeActivationNotifierFactory(HttpSessionActivationListenerProvider<S, SC, AL> provider) {\n+        this.provider = provider;\n+        this.prePassivateNotifier = provider::prePassivateNotifier;\n+        this.postActivateNotifier = provider::postActivateNotifier;\n+    }\n+\n+    @Override\n+    public Registration register(Map.Entry<SC, SessionManager<LC, B>> entry) {\n+        SC context = entry.getKey();\n+        this.contexts.put(context, entry.getValue());\n+        return () -> this.contexts.remove(context);\n+    }\n+\n+    @Override\n+    public SessionAttributeActivationNotifier apply(String sessionId) {\n+        Map<SC, SessionManager<LC, B>> contexts = this.contexts;\n+        HttpSessionActivationListenerProvider<S, SC, AL> provider = this.provider;\n+        Function<AL, Consumer<S>> prePassivateNotifier = this.prePassivateNotifier;\n+        Function<AL, Consumer<S>> postActivateNotifier = this.postActivateNotifier;\n+\n+        return new SessionAttributeActivationNotifier() {\n+            @Override\n+            public void prePassivate(Object value) {\n+                this.notify(prePassivateNotifier, value);\n+            }\n+\n+            @Override\n+            public void postActivate(Object value) {\n+                this.notify(postActivateNotifier, value);\n+            }\n+\n+            public void notify(Function<AL, Consumer<S>> notifier, Object value) {\n+                Class<AL> listenerClass = provider.getHttpSessionActivationListenerClass();\n+                if (listenerClass.isInstance(value)) {\n+                    AL listener = listenerClass.cast(value);\n+                    for (Map.Entry<SC, SessionManager<LC, B>> entry : contexts.entrySet()) {\n+                        SC context = entry.getKey();\n+                        SessionManager<LC, B> manager = entry.getValue();\n+                        Session<LC> session = new OOBSession<>(manager, sessionId, null);\n+                        notifier.apply(listener).accept(provider.createHttpSession(session, context));\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void close() {\n+                // Nothing to close\n+            }\n+        };\n+    }\n+}"
  },
  {
    "sha": "b6cdfb82b2b19ca12c8f254c83699c85c405eada",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/CoarseSessionAttributesFactory.java",
    "status": "modified",
    "additions": 53,
    "deletions": 14,
    "changes": 67,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/CoarseSessionAttributesFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/CoarseSessionAttributesFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/CoarseSessionAttributesFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -27,29 +27,32 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n \n import org.infinispan.Cache;\n import org.infinispan.context.Flag;\n-import org.infinispan.notifications.Listener;\n-import org.infinispan.notifications.cachelistener.annotation.CacheEntriesEvicted;\n-import org.infinispan.notifications.cachelistener.event.CacheEntriesEvictedEvent;\n import org.wildfly.clustering.ee.Immutability;\n import org.wildfly.clustering.ee.Mutator;\n import org.wildfly.clustering.ee.MutatorFactory;\n import org.wildfly.clustering.ee.cache.CacheProperties;\n-import org.wildfly.clustering.ee.infinispan.GroupedKey;\n import org.wildfly.clustering.ee.infinispan.InfinispanMutatorFactory;\n+import org.wildfly.clustering.infinispan.spi.PredicateKeyFilter;\n+import org.wildfly.clustering.infinispan.spi.listener.PostActivateListener;\n+import org.wildfly.clustering.infinispan.spi.listener.PrePassivateListener;\n import org.wildfly.clustering.marshalling.spi.Marshaller;\n import org.wildfly.clustering.web.cache.session.CompositeImmutableSession;\n import org.wildfly.clustering.web.cache.session.ImmutableSessionActivationNotifier;\n import org.wildfly.clustering.web.cache.session.SessionActivationNotifier;\n+import org.wildfly.clustering.web.cache.session.SessionAttributeActivationNotifier;\n import org.wildfly.clustering.web.cache.session.SessionAttributes;\n import org.wildfly.clustering.web.cache.session.SessionAttributesFactory;\n import org.wildfly.clustering.web.cache.session.coarse.CoarseImmutableSessionAttributes;\n import org.wildfly.clustering.web.cache.session.coarse.CoarseSessionAttributes;\n import org.wildfly.clustering.web.infinispan.logging.InfinispanWebLogger;\n import org.wildfly.clustering.web.infinispan.session.InfinispanSessionAttributesFactoryConfiguration;\n import org.wildfly.clustering.web.infinispan.session.SessionCreationMetaDataKey;\n+import org.wildfly.clustering.web.infinispan.session.SessionCreationMetaDataKeyFilter;\n import org.wildfly.clustering.web.session.HttpSessionActivationListenerProvider;\n import org.wildfly.clustering.web.session.ImmutableSessionAttributes;\n import org.wildfly.clustering.web.session.ImmutableSessionMetaData;\n@@ -58,7 +61,6 @@\n  * {@link SessionAttributesFactory} for coarse granularity sessions, where all session attributes are stored in a single cache entry.\n  * @author Paul Ferraro\n  */\n-@Listener(sync = false)\n public class CoarseSessionAttributesFactory<S, C, L, V> implements SessionAttributesFactory<C, Map<String, Object>> {\n \n     private final Cache<SessionAttributesKey, V> cache;\n@@ -67,6 +69,10 @@\n     private final Immutability immutability;\n     private final MutatorFactory<SessionAttributesKey, V> mutatorFactory;\n     private final HttpSessionActivationListenerProvider<S, C, L> provider;\n+    private final Function<String, SessionAttributeActivationNotifier> notifierFactory;\n+    private final Object evictListener;\n+    private final Object prePassivateListener;\n+    private final Object postActivateListener;\n \n     public CoarseSessionAttributesFactory(InfinispanSessionAttributesFactoryConfiguration<S, C, L, Map<String, Object>, V> configuration) {\n         this.cache = configuration.getCache();\n@@ -75,6 +81,28 @@ public CoarseSessionAttributesFactory(InfinispanSessionAttributesFactoryConfigur\n         this.properties = configuration.getCacheProperties();\n         this.mutatorFactory = new InfinispanMutatorFactory<>(this.cache, this.properties);\n         this.provider = configuration.getHttpSessionActivationListenerProvider();\n+        this.notifierFactory = configuration.getActivationNotifierFactory();\n+        this.prePassivateListener = !this.properties.isPersistent() ? new PrePassivateListener<>(this::prePassivate, configuration.getExecutor()) : null;\n+        this.postActivateListener = !this.properties.isPersistent() ? new PostActivateListener<>(this::postActivate, configuration.getExecutor()) : null;\n+        if (this.prePassivateListener != null) {\n+            this.cache.addListener(this.prePassivateListener, new PredicateKeyFilter<>(SessionAttributesKeyFilter.INSTANCE), null);\n+        }\n+        if (this.postActivateListener != null) {\n+            this.cache.addListener(this.postActivateListener, new PredicateKeyFilter<>(SessionAttributesKeyFilter.INSTANCE), null);\n+        }\n+        this.evictListener = new PrePassivateListener<>(this::cascadeEvict, configuration.getExecutor());\n+        this.cache.addListener(this.evictListener, new PredicateKeyFilter<>(SessionCreationMetaDataKeyFilter.INSTANCE), null);\n+    }\n+\n+    @Override\n+    public void close() {\n+        this.cache.removeListener(this.evictListener);\n+        if (this.prePassivateListener != null) {\n+            this.cache.removeListener(this.prePassivateListener);\n+        }\n+        if (this.postActivateListener != null) {\n+            this.cache.removeListener(this.postActivateListener);\n+        }\n     }\n \n     @Override\n@@ -145,16 +173,27 @@ public ImmutableSessionAttributes createImmutableSessionAttributes(String id, Ma\n         return new CoarseImmutableSessionAttributes(values);\n     }\n \n-    @CacheEntriesEvicted\n-    public void evicted(CacheEntriesEvictedEvent<GroupedKey<String>, ?> event) {\n-        if (!event.isPre()) {\n-            Cache<SessionAttributesKey, V> cache = this.cache.getAdvancedCache().withFlags(Flag.SKIP_LISTENER_NOTIFICATION);\n-            for (GroupedKey<String> key : event.getEntries().keySet()) {\n-                // Workaround for ISPN-8324\n-                if (key instanceof SessionCreationMetaDataKey) {\n-                    cache.evict(new SessionAttributesKey(key.getId()));\n-                }\n+    private void cascadeEvict(SessionCreationMetaDataKey key, Object value) {\n+        this.cache.evict(new SessionAttributesKey(key.getId()));\n+    }\n+\n+    private void prePassivate(SessionAttributesKey key, V value) {\n+        this.notify(key, value, SessionAttributeActivationNotifier.PRE_PASSIVATE);\n+    }\n+\n+    private void postActivate(SessionAttributesKey key, V value) {\n+        this.notify(key, value, SessionAttributeActivationNotifier.POST_ACTIVATE);\n+    }\n+\n+    private void notify(SessionAttributesKey key, V value, BiConsumer<SessionAttributeActivationNotifier, Object> notification) {\n+        String sessionId = key.getId();\n+        try (SessionAttributeActivationNotifier notifier = this.notifierFactory.apply(sessionId)) {\n+            Map<String, Object> attributes = this.marshaller.read(value);\n+            for (Object attributeValue : attributes.values()) {\n+                notification.accept(notifier, attributeValue);\n             }\n+        } catch (IOException e) {\n+            InfinispanWebLogger.ROOT_LOGGER.failedToActivateSession(e, sessionId);\n         }\n     }\n }"
  },
  {
    "sha": "b386c07279e8491497ceec06cd500878b24a7f81",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/SessionAttributesKeyFilter.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/SessionAttributesKeyFilter.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/SessionAttributesKeyFilter.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/coarse/SessionAttributesKeyFilter.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.clustering.web.infinispan.session.coarse;\n+\n+import org.infinispan.util.function.SerializablePredicate;\n+\n+/**\n+ * Filter for cache keys of type {@link SessionAttributesKey}.\n+ * @author Paul Ferraro\n+ */\n+public enum SessionAttributesKeyFilter implements SerializablePredicate<Object> {\n+    INSTANCE;\n+\n+    @Override\n+    public boolean test(Object key) {\n+        return key instanceof SessionAttributesKey;\n+    }\n+}"
  },
  {
    "sha": "489eadf3bacaa684e1e735211d3ca17de66a81da",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/FineSessionAttributesFactory.java",
    "status": "modified",
    "additions": 60,
    "deletions": 30,
    "changes": 90,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/FineSessionAttributesFactory.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/FineSessionAttributesFactory.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/FineSessionAttributesFactory.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -25,23 +25,21 @@\n import java.io.IOException;\n import java.util.Collections;\n import java.util.EnumSet;\n-import java.util.HashSet;\n import java.util.Map;\n-import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n import java.util.function.Function;\n \n import org.infinispan.Cache;\n import org.infinispan.context.Flag;\n-import org.infinispan.notifications.Listener;\n-import org.infinispan.notifications.cachelistener.annotation.CacheEntriesEvicted;\n-import org.infinispan.notifications.cachelistener.event.CacheEntriesEvictedEvent;\n import org.wildfly.clustering.ee.Immutability;\n import org.wildfly.clustering.ee.MutatorFactory;\n import org.wildfly.clustering.ee.cache.CacheProperties;\n-import org.wildfly.clustering.ee.infinispan.GroupedKey;\n import org.wildfly.clustering.ee.infinispan.InfinispanMutatorFactory;\n+import org.wildfly.clustering.infinispan.spi.PredicateKeyFilter;\n+import org.wildfly.clustering.infinispan.spi.listener.PostActivateListener;\n+import org.wildfly.clustering.infinispan.spi.listener.PrePassivateListener;\n import org.wildfly.clustering.marshalling.spi.Marshaller;\n import org.wildfly.clustering.web.cache.session.CompositeImmutableSession;\n import org.wildfly.clustering.web.cache.session.ImmutableSessionAttributeActivationNotifier;\n@@ -53,6 +51,7 @@\n import org.wildfly.clustering.web.infinispan.logging.InfinispanWebLogger;\n import org.wildfly.clustering.web.infinispan.session.InfinispanSessionAttributesFactoryConfiguration;\n import org.wildfly.clustering.web.infinispan.session.SessionCreationMetaDataKey;\n+import org.wildfly.clustering.web.infinispan.session.SessionCreationMetaDataKeyFilter;\n import org.wildfly.clustering.web.session.HttpSessionActivationListenerProvider;\n import org.wildfly.clustering.web.session.ImmutableSessionAttributes;\n import org.wildfly.clustering.web.session.ImmutableSessionMetaData;\n@@ -63,7 +62,6 @@\n  * A separate cache entry stores the activate attribute names for the session.\n  * @author Paul Ferraro\n  */\n-@Listener(sync = false)\n public class FineSessionAttributesFactory<S, C, L, V> implements SessionAttributesFactory<C, AtomicReference<Map<String, UUID>>> {\n \n     private final Cache<SessionAttributeNamesKey, Map<String, UUID>> namesCache;\n@@ -73,6 +71,11 @@\n     private final CacheProperties properties;\n     private final MutatorFactory<SessionAttributeKey, V> mutatorFactory;\n     private final HttpSessionActivationListenerProvider<S, C, L> provider;\n+    private final Function<String, SessionAttributeActivationNotifier> notifierFactory;\n+    private final Object evictListener;\n+    private final Object evictAttributesListener;\n+    private final Object prePassivateListener;\n+    private final Object postActivateListener;\n \n     public FineSessionAttributesFactory(InfinispanSessionAttributesFactoryConfiguration<S, C, L, Object, V> configuration) {\n         this.namesCache = configuration.getCache();\n@@ -82,6 +85,31 @@ public FineSessionAttributesFactory(InfinispanSessionAttributesFactoryConfigurat\n         this.properties = configuration.getCacheProperties();\n         this.mutatorFactory = new InfinispanMutatorFactory<>(this.attributeCache, this.properties);\n         this.provider = configuration.getHttpSessionActivationListenerProvider();\n+        this.notifierFactory = configuration.getActivationNotifierFactory();\n+        this.evictListener = new PrePassivateListener<>(this::cascadeEvict, configuration.getExecutor());\n+        this.evictAttributesListener = new PrePassivateListener<>(this::cascadeEvictAttributes, configuration.getExecutor());\n+        this.prePassivateListener = !this.properties.isPersistent() ? new PrePassivateListener<>(this::prePassivate, configuration.getExecutor()) : null;\n+        this.postActivateListener = !this.properties.isPersistent() ? new PostActivateListener<>(this::postActivate, configuration.getExecutor()) : null;\n+        if (this.prePassivateListener != null) {\n+            this.attributeCache.addListener(this.prePassivateListener, new PredicateKeyFilter<>(SessionAttributeKeyFilter.INSTANCE), null);\n+        }\n+        if (this.postActivateListener != null) {\n+            this.attributeCache.addListener(this.postActivateListener, new PredicateKeyFilter<>(SessionAttributeKeyFilter.INSTANCE), null);\n+        }\n+        this.namesCache.addListener(this.evictAttributesListener, new PredicateKeyFilter<>(SessionAttributeNamesKeyFilter.INSTANCE), null);\n+        this.namesCache.addListener(this.evictListener, new PredicateKeyFilter<>(SessionCreationMetaDataKeyFilter.INSTANCE), null);\n+    }\n+\n+    @Override\n+    public void close() {\n+        this.namesCache.removeListener(this.evictListener);\n+        this.namesCache.removeListener(this.evictAttributesListener);\n+        if (this.prePassivateListener != null) {\n+            this.attributeCache.removeListener(this.prePassivateListener);\n+        }\n+        if (this.postActivateListener != null) {\n+            this.attributeCache.removeListener(this.postActivateListener);\n+        }\n     }\n \n     @Override\n@@ -164,29 +192,31 @@ public SessionAttributeKey apply(UUID attributeId) {\n         };\n     }\n \n-    @CacheEntriesEvicted\n-    public void evicted(CacheEntriesEvictedEvent<GroupedKey<String>, ?> event) {\n-        if (!event.isPre()) {\n-            Set<SessionAttributeNamesKey> keys = new HashSet<>();\n-            for (GroupedKey<String> key : event.getEntries().keySet()) {\n-                // Workaround for ISPN-8324\n-                if (key instanceof SessionCreationMetaDataKey) {\n-                    keys.add(new SessionAttributeNamesKey(key.getId()));\n-                }\n-            }\n-            if (!keys.isEmpty()) {\n-                Cache<SessionAttributeKey, V> cache = this.attributeCache.getAdvancedCache().withFlags(Flag.SKIP_LISTENER_NOTIFICATION);\n-                for (Map.Entry<SessionAttributeNamesKey, Map<String, UUID>> entry : this.namesCache.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL, Flag.SKIP_CACHE_LOAD, Flag.ZERO_LOCK_ACQUISITION_TIMEOUT, Flag.FAIL_SILENTLY).getAll(keys).entrySet()) {\n-                    Map<String, UUID> names = entry.getValue();\n-                    if (names != null) {\n-                        String sessionId = entry.getKey().getId();\n-                        for (UUID attributeId : names.values()) {\n-                            cache.evict(new SessionAttributeKey(sessionId, attributeId));\n-                        }\n-                    }\n-                    this.namesCache.getAdvancedCache().withFlags(Flag.SKIP_LISTENER_NOTIFICATION).evict(entry.getKey());\n-                }\n-            }\n+    private void cascadeEvict(SessionCreationMetaDataKey key, Object value) {\n+        this.namesCache.evict(new SessionAttributeNamesKey(key.getId()));\n+    }\n+\n+    private void cascadeEvictAttributes(SessionAttributeNamesKey key, Map<String, UUID> value) {\n+        String sessionId = key.getId();\n+        for (UUID attributeId : value.values()) {\n+            this.attributeCache.evict(new SessionAttributeKey(sessionId, attributeId));\n+        }\n+    }\n+\n+    private void prePassivate(SessionAttributeKey key, V value) {\n+        this.notify(SessionAttributeActivationNotifier.PRE_PASSIVATE, key, value);\n+    }\n+\n+    private void postActivate(SessionAttributeKey key, V value) {\n+        this.notify(SessionAttributeActivationNotifier.POST_ACTIVATE, key, value);\n+    }\n+\n+    private void notify(BiConsumer<SessionAttributeActivationNotifier, Object> notification, SessionAttributeKey key, V value) {\n+        String sessionId = key.getId();\n+        try (SessionAttributeActivationNotifier notifier = this.notifierFactory.apply(key.getId())) {\n+            notification.accept(notifier, this.marshaller.read(value));\n+        } catch (IOException e) {\n+            InfinispanWebLogger.ROOT_LOGGER.failedToActivateSessionAttribute(e, sessionId, key.getAttributeId().toString());\n         }\n     }\n }"
  },
  {
    "sha": "5e81fe525b9b1be685e756d0346bc0ad0b18db69",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeKeyFilter.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeKeyFilter.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeKeyFilter.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeKeyFilter.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.clustering.web.infinispan.session.fine;\n+\n+import org.infinispan.util.function.SerializablePredicate;\n+\n+/**\n+ * Filter for cache keys of type {@link SessionAttributeKey}.\n+ * @author Paul Ferraro\n+ */\n+public enum SessionAttributeKeyFilter implements SerializablePredicate<Object> {\n+    INSTANCE;\n+\n+    @Override\n+    public boolean test(Object key) {\n+        return key instanceof SessionAttributeKey;\n+    }\n+}"
  },
  {
    "sha": "2d6534d22d4498c56bedc6876e38543bfaf80394",
    "filename": "clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeNamesKeyFilter.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeNamesKeyFilter.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeNamesKeyFilter.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/clustering/web/infinispan/src/main/java/org/wildfly/clustering/web/infinispan/session/fine/SessionAttributeNamesKeyFilter.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.clustering.web.infinispan.session.fine;\n+\n+import org.infinispan.util.function.SerializablePredicate;\n+\n+/**\n+ * Filter for cache keys of type {@link SessionAttributeNamesKey}.\n+ * @author Paul Ferraro\n+ */\n+public enum SessionAttributeNamesKeyFilter implements SerializablePredicate<Object> {\n+    INSTANCE;\n+\n+    @Override\n+    public boolean test(Object key) {\n+        return key instanceof SessionAttributeNamesKey;\n+    }\n+}"
  },
  {
    "sha": "5a0d647cdb3fcb25158ee4778a68a52abc0ee031",
    "filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionPassivationTestCase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionPassivationTestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionPassivationTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionPassivationTestCase.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -47,6 +47,7 @@\n import org.jboss.as.test.clustering.cluster.AbstractClusteringTestCase;\n import org.jboss.as.test.clustering.cluster.web.DistributableTestCase;\n import org.jboss.as.test.clustering.cluster.web.EnableUndertowStatisticsSetupTask;\n+import org.jboss.as.test.clustering.single.web.passivation.SessionOperationServlet;\n import org.jboss.as.test.http.util.TestHttpClientUtils;\n import org.jboss.as.test.shared.TimeoutUtil;\n import org.jboss.shrinkwrap.api.ShrinkWrap;"
  },
  {
    "sha": "3b2d7e3189fadb4ff2c9e00c54e2b8198f30b934",
    "filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalCoarseSessionPassivationTestCase.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalCoarseSessionPassivationTestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalCoarseSessionPassivationTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalCoarseSessionPassivationTestCase.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.clustering.single.web.passivation;\n+\n+import static org.jboss.as.test.clustering.cluster.AbstractClusteringTestCase.*;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Validates the correctness of session passivation events for a distributed session manager using a local, passivating cache and SESSION granularity.\n+ * @author Paul Ferraro\n+ */\n+@RunWith(Arquillian.class)\n+public class LocalCoarseSessionPassivationTestCase extends LocalSessionPassivationTestCase {\n+\n+    private static final String MODULE_NAME = LocalCoarseSessionPassivationTestCase.class.getSimpleName();\n+\n+    @Deployment(name = DEPLOYMENT_1, testable = false)\n+    public static Archive<?> deployment() {\n+        return getBaseDeployment(MODULE_NAME).addAsWebInfResource(LocalSessionPassivationTestCase.class.getPackage(), \"distributable-web-coarse.xml\", \"distributable-web.xml\");\n+    }\n+}"
  },
  {
    "sha": "d1506e713d8c3328ad4957014359a2104b4bc9eb",
    "filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalFineSessionPassivationTestCase.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalFineSessionPassivationTestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalFineSessionPassivationTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalFineSessionPassivationTestCase.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.clustering.single.web.passivation;\n+\n+import static org.jboss.as.test.clustering.cluster.AbstractClusteringTestCase.*;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Validates the correctness of session passivation events for a distributed session manager using a local, passivating cache and ATTRIBUTE granularity.\n+ * @author Paul Ferraro\n+ */\n+@RunWith(Arquillian.class)\n+public class LocalFineSessionPassivationTestCase extends LocalSessionPassivationTestCase {\n+\n+    private static final String MODULE_NAME = LocalFineSessionPassivationTestCase.class.getSimpleName();\n+\n+    @Deployment(name = DEPLOYMENT_1, testable = false)\n+    public static Archive<?> deployment() {\n+        return getBaseDeployment(MODULE_NAME).addAsWebInfResource(LocalSessionPassivationTestCase.class.getPackage(), \"distributable-web-fine.xml\", \"distributable-web.xml\");\n+    }\n+}"
  },
  {
    "sha": "6bdfd6589ae06403a82fea0709b2188a410b8ebb",
    "filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalSessionPassivationTestCase.java",
    "status": "added",
    "additions": 208,
    "deletions": 0,
    "changes": 208,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalSessionPassivationTestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalSessionPassivationTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/LocalSessionPassivationTestCase.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,208 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2013, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.clustering.single.web.passivation;\n+\n+import static org.jboss.as.test.clustering.cluster.AbstractClusteringTestCase.*;\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Stream;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.jboss.arquillian.container.test.api.OperateOnDeployment;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.test.clustering.single.web.SimpleServlet;\n+import org.jboss.as.test.shared.TimeoutUtil;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.Test;\n+\n+/**\n+ * Validates the correctness of session activation/passivation events for a distributed session manager using a local, passivating cache.\n+ * @author Paul Ferraro\n+ */\n+public abstract class LocalSessionPassivationTestCase {\n+\n+    private static final Duration MAX_PASSIVATION_DURATION = Duration.ofSeconds(TimeoutUtil.adjust(10));\n+\n+    static WebArchive getBaseDeployment(String moduleName) {\n+        WebArchive war = ShrinkWrap.create(WebArchive.class, moduleName + \".war\");\n+        war.addClasses(SessionOperationServlet.class);\n+        war.addAsWebInfResource(LocalSessionPassivationTestCase.class.getPackage(), \"jboss-web.xml\", \"jboss-web.xml\");\n+        war.setWebXML(SimpleServlet.class.getPackage(), \"web.xml\");\n+        return war;\n+    }\n+\n+    @Test\n+    public void test(@ArquillianResource(SessionOperationServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL) throws IOException, URISyntaxException {\n+\n+        try (CloseableHttpClient client1 = HttpClients.createDefault()) {\n+            try (CloseableHttpClient client2 = HttpClients.createDefault()) {\n+\n+                String session1 = null;\n+\n+                // This should not trigger any passivation/activation events\n+                try (CloseableHttpResponse response = client1.execute(new HttpGet(SessionOperationServlet.createSetURI(baseURL, \"a\", \"1\")))) {\n+                    assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n+                    assertTrue(response.containsHeader(SessionOperationServlet.SESSION_ID));\n+                    session1 = response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue();\n+                }\n+\n+                Map<String, Queue<SessionOperationServlet.EventType>> events = new HashMap<>();\n+                Map<String, SessionOperationServlet.EventType> expectedEvents = new HashMap<>();\n+                events.put(session1, new LinkedList<>());\n+                expectedEvents.put(session1, SessionOperationServlet.EventType.PASSIVATION);\n+\n+                Instant start = Instant.now();\n+                String session2 = null;\n+\n+                // This will trigger passivation of session1\n+                try (CloseableHttpResponse response = client2.execute(new HttpGet(SessionOperationServlet.createSetURI(baseURL, \"a\", \"2\")))) {\n+                    assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n+                    assertTrue(response.containsHeader(SessionOperationServlet.SESSION_ID));\n+                    session2 = response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue();\n+                    events.put(session2, new LinkedList<>());\n+                    expectedEvents.put(session2, SessionOperationServlet.EventType.PASSIVATION);\n+                    collectEvents(response, events);\n+                }\n+\n+                // Ensure session1 was passivated\n+                while (events.get(session1).isEmpty() && Duration.between(start, Instant.now()).compareTo(MAX_PASSIVATION_DURATION) < 0) {\n+                    try (CloseableHttpResponse response = client2.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL, \"a\")))) {\n+                        assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n+                        assertTrue(response.containsHeader(SessionOperationServlet.SESSION_ID));\n+                        assertEquals(session2, response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue());\n+                        assertTrue(response.containsHeader(SessionOperationServlet.RESULT));\n+                        assertEquals(\"2\", response.getFirstHeader(SessionOperationServlet.RESULT).getValue());\n+                        collectEvents(response, events);\n+                    }\n+                    Thread.yield();\n+                }\n+\n+                assertFalse(events.get(session1).isEmpty());\n+                validateEvents(session1, events, expectedEvents);\n+\n+                start = Instant.now();\n+\n+                // This should trigger activation of session1 and passivation of session2\n+                try (CloseableHttpResponse response = client1.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL, \"a\")))) {\n+                    assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n+                    assertTrue(response.containsHeader(SessionOperationServlet.SESSION_ID));\n+                    assertEquals(session1, response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue());\n+                    assertTrue(response.containsHeader(SessionOperationServlet.RESULT));\n+                    assertEquals(\"1\", response.getFirstHeader(SessionOperationServlet.RESULT).getValue());\n+                    collectEvents(response, events);\n+                    assertFalse(events.get(session1).isEmpty());\n+                    assertTrue(events.get(session1).contains(SessionOperationServlet.EventType.ACTIVATION));\n+                }\n+\n+                // Verify session2 was passivated\n+                while (events.get(session2).isEmpty() && Duration.between(start, Instant.now()).compareTo(MAX_PASSIVATION_DURATION) < 0) {\n+                    try (CloseableHttpResponse response = client1.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL, \"a\")))) {\n+                        assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n+                        assertTrue(response.containsHeader(SessionOperationServlet.SESSION_ID));\n+                        assertEquals(session1, response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue());\n+                        assertTrue(response.containsHeader(SessionOperationServlet.RESULT));\n+                        assertEquals(\"1\", response.getFirstHeader(SessionOperationServlet.RESULT).getValue());\n+                        collectEvents(response, events);\n+                    }\n+                    Thread.yield();\n+                }\n+\n+                assertFalse(events.get(session2).isEmpty());\n+                validateEvents(session2, events, expectedEvents);\n+\n+                start = Instant.now();\n+\n+                // This should trigger activation of session2 and passivation of session1\n+                try (CloseableHttpResponse response = client2.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL, \"a\")))) {\n+                    assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n+                    assertTrue(response.containsHeader(SessionOperationServlet.SESSION_ID));\n+                    assertEquals(session2, response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue());\n+                    assertTrue(response.containsHeader(SessionOperationServlet.RESULT));\n+                    assertEquals(\"2\", response.getFirstHeader(SessionOperationServlet.RESULT).getValue());\n+                    collectEvents(response, events);\n+                    assertFalse(events.get(session2).isEmpty());\n+                    assertTrue(events.get(session2).contains(SessionOperationServlet.EventType.ACTIVATION));\n+                }\n+\n+                // Verify session1 was passivated\n+                while (!events.get(session1).isEmpty() && Duration.between(start, Instant.now()).compareTo(MAX_PASSIVATION_DURATION) < 0) {\n+                    try (CloseableHttpResponse response = client2.execute(new HttpGet(SessionOperationServlet.createGetURI(baseURL, \"a\")))) {\n+                        assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n+                        assertTrue(response.containsHeader(SessionOperationServlet.SESSION_ID));\n+                        assertEquals(session2, response.getFirstHeader(SessionOperationServlet.SESSION_ID).getValue());\n+                        assertTrue(response.containsHeader(SessionOperationServlet.RESULT));\n+                        assertEquals(\"2\", response.getFirstHeader(SessionOperationServlet.RESULT).getValue());\n+                        collectEvents(response, events);\n+                    }\n+                    Thread.yield();\n+                }\n+\n+                assertFalse(events.get(session1).isEmpty());\n+                validateEvents(session1, events, expectedEvents);\n+\n+                validateEvents(session2, events, expectedEvents);\n+            }\n+        }\n+    }\n+\n+    private static void collectEvents(HttpResponse response, Map<String, Queue<SessionOperationServlet.EventType>> events) {\n+        events.entrySet().forEach((Map.Entry<String, Queue<SessionOperationServlet.EventType>> entry) -> {\n+            String sessionId = entry.getKey();\n+            if (response.containsHeader(sessionId)) {\n+                Stream.of(response.getHeaders(sessionId)).forEach((Header header) -> {\n+                    entry.getValue().add(SessionOperationServlet.EventType.valueOf(header.getValue()));\n+                });\n+            }\n+        });\n+    }\n+\n+    private static void validateEvents(String sessionId, Map<String, Queue<SessionOperationServlet.EventType>> events, Map<String, SessionOperationServlet.EventType> expectedEvents) {\n+        Queue<SessionOperationServlet.EventType> types = events.get(sessionId);\n+        SessionOperationServlet.EventType type = types.poll();\n+        SessionOperationServlet.EventType expected = expectedEvents.get(sessionId);\n+        while (type != null) {\n+            assertSame(expected, type);\n+            type = types.poll();\n+            // ACTIVATE event must follow PASSIVATE event and vice versa\n+            expected = SessionOperationServlet.EventType.values()[(expected.ordinal() + 1) % 2];\n+        }\n+        expectedEvents.put(sessionId, expected);\n+    }\n+}"
  },
  {
    "sha": "fcd188590fd29c9a96f50a09e0a8a06f40bf5f36",
    "filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/SessionOperationServlet.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 45,
    "changes": 52,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/SessionOperationServlet.java",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/SessionOperationServlet.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/SessionOperationServlet.java?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -19,7 +19,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n-package org.jboss.as.test.clustering.cluster.web.passivation;\n+package org.jboss.as.test.clustering.single.web.passivation;\n \n import java.io.Serializable;\n import java.net.URI;\n@@ -47,25 +47,15 @@\n     private static final String SERVLET_NAME = \"listener\";\n     static final String SERVLET_PATH = \"/\" + SERVLET_NAME;\n     private static final String OPERATION = \"operation\";\n-    private static final String INVALIDATE = \"invalidate\";\n     private static final String GET = \"get\";\n     private static final String SET = \"set\";\n-    private static final String REMOVE = \"remove\";\n-    private static final String TIMEOUT = \"timeout\";\n     private static final String NAME = \"name\";\n     private static final String VALUE = \"value\";\n     public static final String RESULT = \"result\";\n     public static final String SESSION_ID = \"jsessionid\";\n \n     public static URI createGetURI(URL baseURL, String name) throws URISyntaxException {\n-        return createGetURI(baseURL, name, null);\n-    }\n-\n-    public static URI createGetURI(URL baseURL, String name, String value) throws URISyntaxException {\n         StringBuilder builder = appendParameter(buildURI(GET), NAME, name);\n-        if (value != null) {\n-            appendParameter(builder, VALUE, value);\n-        }\n         return baseURL.toURI().resolve(builder.toString());\n     }\n \n@@ -77,18 +67,6 @@ public static URI createSetURI(URL baseURL, String name, String... values) throw\n         return baseURL.toURI().resolve(builder.toString());\n     }\n \n-    public static URI createRemoveURI(URL baseURL, String name) throws URISyntaxException {\n-        return baseURL.toURI().resolve(appendParameter(buildURI(REMOVE), NAME, name).toString());\n-    }\n-\n-    public static URI createInvalidateURI(URL baseURL) throws URISyntaxException {\n-        return baseURL.toURI().resolve(buildURI(INVALIDATE).toString());\n-    }\n-\n-    public static URI createTimeoutURI(URL baseURL, int timeout) throws URISyntaxException {\n-        return baseURL.toURI().resolve(appendParameter(buildURI(TIMEOUT), TIMEOUT, Integer.toString(timeout)).toString());\n-    }\n-\n     private static StringBuilder buildURI(String operation) {\n         return new StringBuilder(SERVLET_NAME).append('?').append(OPERATION).append('=').append(operation);\n     }\n@@ -97,28 +75,20 @@ private static StringBuilder appendParameter(StringBuilder builder, String param\n         return builder.append('&').append(parameter).append('=').append(value);\n     }\n \n+    static final BlockingQueue<Map.Entry<String, EventType>> EVENTS = new LinkedBlockingQueue<>();\n+\n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException {\n         String operation = getRequiredParameter(req, OPERATION);\n         HttpSession session = req.getSession(true);\n         resp.addHeader(SESSION_ID, session.getId());\n-        //System.out.println(String.format(\"%s?%s;jsessionid=%s\", req.getRequestURL(), req.getQueryString(), session.getId()));\n         switch (operation) {\n             case SET: {\n                 String name = getRequiredParameter(req, NAME);\n                 String value = req.getParameter(VALUE);\n                 session.setAttribute(name, (value != null) ? new SessionAttributeValue(value) : null);\n                 break;\n             }\n-            case REMOVE: {\n-                String name = getRequiredParameter(req, NAME);\n-                session.removeAttribute(name);\n-                break;\n-            }\n-            case INVALIDATE: {\n-                session.invalidate();\n-                break;\n-            }\n             case GET: {\n                 String name = getRequiredParameter(req, NAME);\n                 SessionAttributeValue value = (SessionAttributeValue) session.getAttribute(name);\n@@ -127,21 +97,14 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws Se\n                 }\n                 break;\n             }\n-            case TIMEOUT: {\n-                String timeout = getRequiredParameter(req, TIMEOUT);\n-                session.setMaxInactiveInterval(Integer.parseInt(timeout));\n-                break;\n-            }\n             default: {\n                 throw new ServletException(\"Unrecognized operation: \" + operation);\n             }\n         }\n \n         List<Map.Entry<String, EventType>> events = new LinkedList<>();\n-        if (SessionAttributeValue.events.drainTo(events) > 0) {\n-            events.forEach((Map.Entry<String, EventType> entry) -> {\n-                resp.addHeader(entry.getKey(), entry.getValue().name());\n-            });\n+        if (EVENTS.drainTo(events) > 0) {\n+            events.forEach(entry -> resp.addHeader(entry.getKey(), entry.getValue().name()));\n         }\n     }\n \n@@ -159,7 +122,6 @@ private static String getRequiredParameter(HttpServletRequest req, String name)\n \n     public static class SessionAttributeValue implements Serializable, HttpSessionActivationListener {\n         private static final long serialVersionUID = -8824497321979784527L;\n-        static BlockingQueue<Map.Entry<String, EventType>> events = new LinkedBlockingQueue<>();\n \n         private final String value;\n \n@@ -173,12 +135,12 @@ public String getValue() {\n \n         @Override\n         public void sessionWillPassivate(HttpSessionEvent event) {\n-            events.add(new SimpleImmutableEntry<>(event.getSession().getId(), EventType.PASSIVATION));\n+            EVENTS.add(new SimpleImmutableEntry<>(event.getSession().getId(), EventType.PASSIVATION));\n         }\n \n         @Override\n         public void sessionDidActivate(HttpSessionEvent event) {\n-            events.add(new SimpleImmutableEntry<>(event.getSession().getId(), EventType.ACTIVATION));\n+            EVENTS.add(new SimpleImmutableEntry<>(event.getSession().getId(), EventType.ACTIVATION));\n         }\n     }\n }",
    "previous_filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java"
  },
  {
    "sha": "1bf073b29e82655fb05edb9da783d1d4c8865ee2",
    "filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-coarse.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-coarse.xml",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-coarse.xml",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-coarse.xml?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<distributable-web xmlns=\"urn:jboss:distributable-web:2.0\">\n+    <infinispan-session-management cache-container=\"web\" granularity=\"SESSION\">\n+        <local-affinity/>\n+    </infinispan-session-management>\n+</distributable-web>"
  },
  {
    "sha": "9b09f866f5f0e514d350297a619a91cd2ff311ce",
    "filename": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-fine.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/wildfly/wildfly/blob/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-fine.xml",
    "raw_url": "https://github.com/wildfly/wildfly/raw/d46b7a45e98fcfd18112339ae24ec258ad5176a7/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-fine.xml",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly/contents/testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/single/web/passivation/distributable-web-fine.xml?ref=d46b7a45e98fcfd18112339ae24ec258ad5176a7",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<distributable-web xmlns=\"urn:jboss:distributable-web:2.0\">\n+    <infinispan-session-management cache-container=\"web\" granularity=\"ATTRIBUTE\">\n+        <local-affinity/>\n+    </infinispan-session-management>\n+</distributable-web>"
  }
]
