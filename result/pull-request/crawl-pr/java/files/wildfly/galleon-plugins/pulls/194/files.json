[
  {
    "sha": "f3353a45e0959d51c8b27c6de88429fafa6c0187",
    "filename": "galleon-plugins/src/main/java/org/wildfly/galleon/plugin/Utils.java",
    "status": "modified",
    "additions": 65,
    "deletions": 27,
    "changes": 92,
    "blob_url": "https://github.com/wildfly/galleon-plugins/blob/a9dc581bbee770c3e9d380b832902174e3eef81b/galleon-plugins/src/main/java/org/wildfly/galleon/plugin/Utils.java",
    "raw_url": "https://github.com/wildfly/galleon-plugins/raw/a9dc581bbee770c3e9d380b832902174e3eef81b/galleon-plugins/src/main/java/org/wildfly/galleon/plugin/Utils.java",
    "contents_url": "https://api.github.com/repos/wildfly/galleon-plugins/contents/galleon-plugins/src/main/java/org/wildfly/galleon/plugin/Utils.java?ref=a9dc581bbee770c3e9d380b832902174e3eef81b",
    "patch": "@@ -47,6 +47,7 @@\n import org.jboss.galleon.util.IoUtils;\n import org.jboss.galleon.util.LayoutUtils;\n import org.jboss.galleon.util.StringUtils;\n+import static org.wildfly.galleon.plugin.WfInstallPlugin.GLOBAL_ARTIFACTS_KEY;\n import org.wildfly.galleon.plugin.config.CopyArtifact;\n \n /**\n@@ -80,7 +81,7 @@ public static void readProperties(Path propsFile, Map<String, String> propsMap)\n         return propsMap;\n     }\n \n-    public static boolean containsArtifact(Map<String, String> artifactsMap, MavenArtifact artifact) throws ProvisioningException {\n+    public static boolean containsArtifact(Map<String, Map<String, String>> artifactsMap, MavenArtifact artifact, String producerName) throws ProvisioningException {\n         final StringBuilder key = new StringBuilder();\n         final StringBuilder val = new StringBuilder();\n         val.append(artifact.getGroupId()).append(\":\").append(artifact.getArtifactId()).append(\":\").append(artifact.getVersion()).append(\":\");\n@@ -90,8 +91,23 @@ public static boolean containsArtifact(Map<String, String> artifactsMap, MavenAr\n             val.append(artifact.getClassifier());\n         }\n         val.append(\":\").append(artifact.getExtension());\n-        String value = artifactsMap.get(key.toString());\n-        return val.toString().equals(value);\n+        // Check first in global scope\n+        Map<String, String> global = artifactsMap.get(GLOBAL_ARTIFACTS_KEY);\n+        if (global != null) {\n+            String value = global.get(key.toString());\n+            if (val.toString().equals(value)) {\n+                return true;\n+            }\n+        }\n+        // Local to the feature-pack\n+        Map<String, String> local = artifactsMap.get(producerName);\n+        if (local != null) {\n+            String value = local.get(key.toString());\n+            if (val.toString().equals(value)) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     public static MavenArtifact toArtifactCoords(Map<String, String> versionProps, String str, boolean optional) throws ProvisioningException {\n@@ -239,36 +255,58 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n         }\n     }\n \n-    static Map<String, String> toArtifactsMap(String str) {\n+    static Map<String, Map<String, String>> toArtifactsMap(String str) {\n         if (str == null) {\n             return Collections.emptyMap();\n         }\n-        String[] split = str.split(\"\\\\|\");\n-        Map<String, String> ret = new HashMap<>();\n-        for (String artifact : split) {\n-            //grpid:artifactId:version:[classifier]:extension\n-            artifact = artifact.trim();\n-            StringBuilder builder = new StringBuilder();\n-            String[] parts = artifact.split(\":\");\n-            if (parts.length != 5) {\n-                throw new IllegalArgumentException(\"Unexpected artifact coordinates format: \" + artifact);\n+        Map<String, Map<String, String>> ret = new HashMap<>();\n+        //a|b|c\n+        //@producer=a|b|c@producer=...\n+        if (str.startsWith(\"@\")) {\n+            // Ignore first delimiter\n+            str = str.substring(1);\n+        }\n+        String[] producers = str.split(\"@\");\n+        for (String producer : producers) {\n+            int eqIndex = producer.indexOf(\"=\");\n+            String producerName = GLOBAL_ARTIFACTS_KEY;\n+            String producerArgs = producer;\n+            Map<String, String> artifactsMap;\n+            if (eqIndex > 0) {\n+                producerName = producer.substring(0, eqIndex);\n+                producerArgs = producer.substring(eqIndex+1);\n             }\n-            String grpId = check(artifact, parts[0]);\n-            String artifactId = check(artifact, parts[1]);\n-            String version = check(artifact, parts[2]);\n-            String classifier = parts[3];\n-            if (classifier != null) {\n-                classifier = classifier.trim();\n+            artifactsMap = ret.get(producerName);\n+            if (artifactsMap == null) {\n+                artifactsMap = new HashMap<>();\n+                ret.put(producerName, artifactsMap);\n             }\n-            String ext = check(artifact, parts[4]);\n-            String key = grpId + \":\" + artifactId;\n-            builder.append(grpId).append(\":\").append(artifactId).append(\":\").append(version).append(\":\");\n-            if (classifier != null && !classifier.isEmpty()) {\n-                key = key + \"::\" + classifier;\n-                builder.append(classifier);\n+            String[] split = producerArgs.split(\"\\\\|\");\n+            for (String artifact : split) {\n+                //grpid:artifactId:version:[classifier]:extension\n+                artifact = artifact.trim();\n+                StringBuilder builder = new StringBuilder();\n+                String[] parts = artifact.split(\":\");\n+                if (parts.length != 5) {\n+                    throw new IllegalArgumentException(\"Unexpected artifact coordinates format: \" + artifact);\n+                }\n+                String grpId = check(artifact, parts[0]);\n+                String artifactId = check(artifact, parts[1]);\n+                String version = check(artifact, parts[2]);\n+                String classifier = parts[3];\n+                if (classifier != null) {\n+                    classifier = classifier.trim();\n+                }\n+                String ext = check(artifact, parts[4]);\n+                String key = grpId + \":\" + artifactId;\n+                builder.append(grpId).append(\":\").append(artifactId).append(\":\").append(version).append(\":\");\n+                if (classifier != null && !classifier.isEmpty()) {\n+                    key = key + \"::\" + classifier;\n+                    builder.append(classifier);\n+                }\n+                builder.append(\":\").append(ext);\n+                artifactsMap.put(key, builder.toString());\n             }\n-            builder.append(\":\").append(ext);\n-            ret.put(key, builder.toString());\n         }\n         return ret;\n     }"
  },
  {
    "sha": "aad6c058a20dc2a07076df95321226383e200b9b",
    "filename": "galleon-plugins/src/main/java/org/wildfly/galleon/plugin/WfInstallPlugin.java",
    "status": "modified",
    "additions": 29,
    "deletions": 10,
    "changes": 39,
    "blob_url": "https://github.com/wildfly/galleon-plugins/blob/a9dc581bbee770c3e9d380b832902174e3eef81b/galleon-plugins/src/main/java/org/wildfly/galleon/plugin/WfInstallPlugin.java",
    "raw_url": "https://github.com/wildfly/galleon-plugins/raw/a9dc581bbee770c3e9d380b832902174e3eef81b/galleon-plugins/src/main/java/org/wildfly/galleon/plugin/WfInstallPlugin.java",
    "contents_url": "https://api.github.com/repos/wildfly/galleon-plugins/contents/galleon-plugins/src/main/java/org/wildfly/galleon/plugin/WfInstallPlugin.java?ref=a9dc581bbee770c3e9d380b832902174e3eef81b",
    "patch": "@@ -119,6 +119,8 @@\n     private static final String MAVEN_REPO_LOCAL = \"maven.repo.local\";\n     public static final String JAKARTA_TRANSFORM_SUFFIX_KEY = \"jakarta.transform.artifacts.suffix\";\n \n+    static final String GLOBAL_ARTIFACTS_KEY = \"org.jboss.galleon.global-artifacts.key\";\n+\n     private static final ProvisioningOption OPTION_MVN_DIST = ProvisioningOption.builder(\"jboss-maven-dist\")\n             .setBooleanValueSet()\n             .build();\n@@ -143,7 +145,7 @@\n     private MessageWriter log;\n \n     private Map<String, String> mergedArtifactVersions = new HashMap<>();\n-    private final Map<String, String> overriddenArtifactVersions = new HashMap<>();\n+    private final Map<String, Map<String, String>> overriddenArtifactVersions = new HashMap<>();\n     private Map<ProducerSpec, Map<String, String>> fpArtifactVersions = new HashMap<>();\n     private Map<ProducerSpec, Map<String, String>> fpTasksProps = Collections.emptyMap();\n     private Map<String, String> mergedTaskProps = new HashMap<>();\n@@ -207,7 +209,7 @@ private Path getProvisioningMavenRepo() throws ProvisioningException {\n         return value == null ? null : Paths.get(value);\n     }\n \n-    private Map<String, String> getOverriddenArtifacts() throws ProvisioningException {\n+    private Map<String, Map<String, String>> getOverriddenArtifacts() throws ProvisioningException {\n         if (!runtime.isOptionSet(OPTION_OVERRIDDEN_ARTIFACTS)) {\n             return Collections.emptyMap();\n         }\n@@ -273,9 +275,20 @@ public void postInstall(ProvisioningRuntime runtime) throws ProvisioningExceptio\n             final Path artifactProps = wfRes.resolve(WfConstants.ARTIFACT_VERSIONS_PROPS);\n             if(Files.exists(artifactProps)) {\n                 final Map<String, String> versionProps = Utils.readProperties(artifactProps);\n-                for (Entry<String, String> entry : overriddenArtifactVersions.entrySet()) {\n-                    if (versionProps.containsKey(entry.getKey())) {\n-                        versionProps.put(entry.getKey(), entry.getValue());\n+                Map<String, String> globalOverriddenArtifacts = overriddenArtifactVersions.get(GLOBAL_ARTIFACTS_KEY);\n+                if (globalOverriddenArtifacts != null) {\n+                    for (Entry<String, String> entry : globalOverriddenArtifacts.entrySet()) {\n+                        if (versionProps.containsKey(entry.getKey())) {\n+                            versionProps.put(entry.getKey(), entry.getValue());\n+                        }\n+                    }\n+                }\n+                final Map<String, String> localOverriden =  overriddenArtifactVersions.get(fp.getFPID().getProducer().getName());\n+                if (localOverriden != null) {\n+                     for (Entry<String, String> entry : localOverriden.entrySet()) {\n+                        if (versionProps.containsKey(entry.getKey())) {\n+                            versionProps.put(entry.getKey(), entry.getValue());\n+                        }\n                     }\n                 }\n                 fpArtifactVersions.put(fp.getFPID().getProducer(), versionProps);\n@@ -316,12 +329,17 @@ public void postInstall(ProvisioningRuntime runtime) throws ProvisioningExceptio\n             }\n         }\n         // Check that all overridden artifacts are actually known.\n-        for (String key : overriddenArtifactVersions.keySet()) {\n-            if (!mergedArtifactVersions.containsKey(key)) {\n-                throw new ProvisioningException(\"Overridden artifacts \" + key + \" is not found in the set of known server artifacts\");\n+        for (String producer : overriddenArtifactVersions.keySet()) {\n+            Map<String, String> artifacts = overriddenArtifactVersions.get(producer);\n+            for (String key : artifacts.keySet()) {\n+                if (!mergedArtifactVersions.containsKey(key)) {\n+                    throw new ProvisioningException(\"Overridden artifacts \" + key + \" is not found in the set of known server artifacts\");\n+                }\n             }\n         }\n-        mergedArtifactVersions.putAll(overriddenArtifactVersions);\n+        for (String producer : overriddenArtifactVersions.keySet()) {\n+            mergedArtifactVersions.putAll(overriddenArtifactVersions.get(producer));\n+        }\n         mergedTaskPropsResolver = new MapPropertyResolver(mergedTaskProps);\n \n         final ProvisioningLayoutFactory layoutFactory = runtime.getLayout().getFactory();\n@@ -910,7 +928,8 @@ private void processModuleTemplate(PackageRuntime pkg, Path moduleXmlRelativePat\n                 moduleArtifact = artifact.getPath();\n                 if (thinServer) {\n                     boolean generateMavenRepo = runtime.isOptionSet(OPTION_MVN_REPO);\n-                    boolean isOverriddenArtifact = Utils.containsArtifact(overriddenArtifactVersions, artifact);\n+                    boolean isOverriddenArtifact = Utils.containsArtifact(overriddenArtifactVersions, artifact,\n+                            pkg.getFeaturePackRuntime().getFPID().getProducer().getName());\n                     // If a transformedFile is found, then the overridden artifact is not excluded from transformation.\n                     Path transformedFile = null;\n                     if (isOverriddenArtifact) {"
  },
  {
    "sha": "275cab8a3dbb8d752d1a9a12851180cd74cbbfbb",
    "filename": "galleon-plugins/src/test/java/org/wildfly/galleon/plugin/UtilsTestCase.java",
    "status": "modified",
    "additions": 55,
    "deletions": 4,
    "changes": 59,
    "blob_url": "https://github.com/wildfly/galleon-plugins/blob/a9dc581bbee770c3e9d380b832902174e3eef81b/galleon-plugins/src/test/java/org/wildfly/galleon/plugin/UtilsTestCase.java",
    "raw_url": "https://github.com/wildfly/galleon-plugins/raw/a9dc581bbee770c3e9d380b832902174e3eef81b/galleon-plugins/src/test/java/org/wildfly/galleon/plugin/UtilsTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/galleon-plugins/contents/galleon-plugins/src/test/java/org/wildfly/galleon/plugin/UtilsTestCase.java?ref=a9dc581bbee770c3e9d380b832902174e3eef81b",
    "patch": "@@ -29,7 +29,7 @@\n     public void testOverriddenArtifacts() throws Exception {\n         {\n             String str = \"grp:art:vers:class:jar\";\n-            Map<String, String> map = Utils.toArtifactsMap(str);\n+            Map<String, String> map = getGlobalScope(str);\n             Assert.assertEquals(1, map.size());\n             String key = \"grp:art::class\";\n             String value = map.get(key);\n@@ -38,7 +38,7 @@ public void testOverriddenArtifacts() throws Exception {\n \n         {\n             String str = \"grp:art:vers::jar\";\n-            Map<String, String> map = Utils.toArtifactsMap(str);\n+            Map<String, String> map = getGlobalScope(str);\n             Assert.assertEquals(1, map.size());\n             String key = \"grp:art\";\n             String value = map.get(key);\n@@ -55,7 +55,7 @@ public void testOverriddenArtifacts() throws Exception {\n                 str1 + \"|\" + str2 + \"|\" + str3,\n                 \"  \" + str1 + \" | \" + str2 + \"   \" + \" | \" + str3};\n             for (String str : cases) {\n-                Map<String, String> map = Utils.toArtifactsMap(str);\n+                Map<String, String> map = getGlobalScope(str);\n                 Assert.assertEquals(3, map.size());\n                 String key1 = \"grp:art\";\n                 String value1 = map.get(key1);\n@@ -84,12 +84,63 @@ public void testOverriddenArtifacts() throws Exception {\n                 \"a:b:c:d:e| :b:c:d:  \"};\n             for (String str : invalids) {\n                 try {\n-                    Map<String, String> map = Utils.toArtifactsMap(str);\n+                    Map<String, String> map = getGlobalScope(str);\n                     throw new Exception(\"Should have failed\");\n                 } catch (IllegalArgumentException ex) {\n                     // XXX OK expected\n                 }\n             }\n         }\n     }\n+\n+    @Test\n+    public void testOverriddenArtifactsProducers() throws Exception {\n+        {\n+            String artifacts = \"grp:art:vers:class:jar\";\n+            String str = \"@foo=\" + artifacts;\n+            Map<String, String> map = getProducerScope(str, \"foo\");\n+            Assert.assertEquals(1, map.size());\n+            String key = \"grp:art::class\";\n+            String value = map.get(key);\n+            Assert.assertEquals(artifacts, value);\n+        }\n+\n+        {\n+            String global = \"grp:art:vers::jar\";\n+            String producer1 = \"foo\";\n+            String producer1Artifact = \"grp:art:vers2::jar\";\n+            String producer2 = \"bar\";\n+            String producer2Artifact1 = \"grp2:art2:vers::jar\";\n+            String producer2Artifact2 = \"grp2:art3:vers::jar\";\n+            String str = global +\"@\"+producer1+\"=\"+producer1Artifact +\"@\"+producer2+\"=\"+producer2Artifact1 + \"|\"+producer2Artifact2 ;\n+            Map<String, String> map = getGlobalScope(str);\n+            Assert.assertEquals(1, map.size());\n+            String key = \"grp:art\";\n+            String value = map.get(key);\n+            Assert.assertEquals(global, value);\n+\n+            Map<String, String> map2 = getProducerScope(str, producer1);\n+            Assert.assertEquals(1, map2.size());\n+            String key2 = \"grp:art\";\n+            String value2 = map2.get(key2);\n+            Assert.assertEquals(producer1Artifact, value2);\n+\n+            Map<String, String> map3 = getProducerScope(str, producer2);\n+            Assert.assertEquals(2, map3.size());\n+            String key3 = \"grp2:art2\";\n+            String value3 = map3.get(key3);\n+            Assert.assertEquals(producer2Artifact1, value3);\n+            String key4 = \"grp2:art3\";\n+            String value4 = map3.get(key4);\n+            Assert.assertEquals(producer2Artifact2, value4);\n+        }\n+    }\n+\n+    private static Map<String, String> getGlobalScope(String str) {\n+        return Utils.toArtifactsMap(str).get(WfInstallPlugin.GLOBAL_ARTIFACTS_KEY);\n+    }\n+\n+    private static Map<String, String> getProducerScope(String str, String producer) {\n+        return Utils.toArtifactsMap(str).get(producer);\n+    }\n }"
  }
]
