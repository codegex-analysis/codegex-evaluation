[
  {
    "sha": "bea597326f5ee861fb0458937e48f206a3c2f885",
    "filename": "server/src/main/java/org/jboss/as/server/controller/git/GitRepository.java",
    "status": "modified",
    "additions": 81,
    "deletions": 10,
    "changes": 91,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/8752268ded20d4df7c0998e8336028259c4b5c44/server/src/main/java/org/jboss/as/server/controller/git/GitRepository.java",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/8752268ded20d4df7c0998e8336028259c4b5c44/server/src/main/java/org/jboss/as/server/controller/git/GitRepository.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/server/src/main/java/org/jboss/as/server/controller/git/GitRepository.java?ref=8752268ded20d4df7c0998e8336028259c4b5c44",
    "patch": "@@ -30,6 +30,7 @@\n import java.nio.file.FileVisitor;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.security.GeneralSecurityException;\n import java.util.Collections;\n@@ -55,6 +56,7 @@\n import org.eclipse.jgit.transport.CredentialsProvider;\n import org.eclipse.jgit.transport.SshSessionFactory;\n import org.eclipse.jgit.transport.sshd.SshdSessionFactory;\n+import org.jboss.as.repository.PathUtil;\n import org.jboss.as.server.logging.ServerLogger;\n import org.wildfly.client.config.ConfigXMLParseException;\n \n@@ -91,7 +93,7 @@ public GitRepository(GitRepositoryConfiguration gitConfig)\n             } catch (IOException ex) {\n                 throw ServerLogger.ROOT_LOGGER.failedToPullRepository(ex, gitConfig.getRepository());\n             }\n-            try (Git git = Git.wrap(repository)) {\n+            try ( Git git = Git.wrap(repository)) {\n                 git.clean();\n                 if (!isLocalGitRepository(gitConfig.getRepository())) {\n                     String remote = getRemoteName(gitConfig.getRepository());\n@@ -114,14 +116,14 @@ public GitRepository(GitRepositoryConfiguration gitConfig)\n             }\n         } else {\n             if (isLocalGitRepository(gitConfig.getRepository())) {\n-                try (Git git = Git.init().setDirectory(baseDir).call()) {\n+                try ( Git git = Git.init().setDirectory(baseDir).call()) {\n                     StoredConfig config = git.getRepository().getConfig();\n                     config.setBoolean(ConfigConstants.CONFIG_COMMIT_SECTION, null, ConfigConstants.CONFIG_KEY_GPGSIGN, gitConfig.isSign());\n                     config.save();\n                     final AddCommand addCommand = git.add();\n                     addCommand.addFilepattern(\"data/content/\");\n                     Path configurationDir = basePath.resolve(\"configuration\");\n-                    try (Stream<Path> files = Files.list(configurationDir)) {\n+                    try ( Stream<Path> files = Files.list(configurationDir)) {\n                         files.filter(configFile -> !\"logging.properties\".equals(configFile.getFileName().toString()) && Files.isRegularFile(configFile))\n                                 .forEach(configFile -> addCommand.addFilepattern(getPattern(configFile)));\n                     }\n@@ -132,8 +134,8 @@ public GitRepository(GitRepositoryConfiguration gitConfig)\n                     throw ServerLogger.ROOT_LOGGER.failedToInitRepository(ex, gitConfig.getRepository());\n                 }\n             } else {\n-                clearExistingFiles(basePath, gitConfig.getRepository());\n-                try (Git git = Git.init().setDirectory(baseDir).call()) {\n+                Path atticPath = moveToAttic(basePath, gitConfig.getRepository());\n+                try ( Git git = Git.init().setDirectory(baseDir).call()) {\n                     String remoteName = UUID.randomUUID().toString();\n                     StoredConfig config = git.getRepository().getConfig();\n                     config.setString(\"remote\", remoteName, \"url\", gitConfig.getRepository());\n@@ -147,8 +149,10 @@ public GitRepository(GitRepositoryConfiguration gitConfig)\n                         git.commit().setMessage(ServerLogger.ROOT_LOGGER.addingIgnored()).call();\n                     }\n                 } catch (GitAPIException ex) {\n+                    restoreFromAttic(basePath,gitConfig.getRepository());\n                     throw ServerLogger.ROOT_LOGGER.failedToInitRepository(ex, gitConfig.getRepository());\n                 }\n+                PathUtil.deleteSilentlyRecursively(atticPath);\n             }\n             repository = new FileRepositoryBuilder().setWorkTree(baseDir).setGitDir(gitDir).setup().build();\n         }\n@@ -184,12 +188,20 @@ private void checkoutToSelectedBranch(final Git git) throws IOException, GitAPIE\n         }\n     }\n \n-    private void clearExistingFiles(Path root, String gitRepository) {\n+    private Path moveToAttic(Path root, String gitRepository) throws IOException {\n         try {\n+            Path atticRoot = root.getParent().resolve(\"attic\");\n+            Files.createDirectory(atticRoot);\n+\n             Files.walkFileTree(root, new FileVisitor<Path>() {\n                 @Override\n                 public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n                     if (!ignored.contains(dir.getFileName().toString() + '/')) {\n+                        Path target = atticRoot.resolve(root.relativize(dir));\n+                        ServerLogger.ROOT_LOGGER.debugf(\"Creating directory into attic %s \", target);\n+                        if (Files.notExists(target)) {\n+                            Files.createDirectory(target);\n+                        }\n                         return FileVisitResult.CONTINUE;\n                     }\n                     return FileVisitResult.SKIP_SUBTREE;\n@@ -198,8 +210,9 @@ public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) th\n                 @Override\n                 public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                     try {\n-                        ServerLogger.ROOT_LOGGER.debugf(\"Deleting file %s\", file);\n-                        Files.delete(file);\n+                        Path target = atticRoot.resolve(root.relativize(file));\n+                        ServerLogger.ROOT_LOGGER.debugf(\"Moving file %s to attic %s \", file, target);\n+                        Files.move(file, target);\n                     } catch (IOException ioex) {\n                         ServerLogger.ROOT_LOGGER.debug(ioex.getMessage(), ioex);\n                     }\n@@ -229,11 +242,69 @@ public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOEx\n                 }\n \n             });\n+            return atticRoot;\n         } catch (IOException ex) {\n             throw ServerLogger.ROOT_LOGGER.failedToInitRepository(ex, gitRepository);\n         }\n     }\n \n+    private void restoreFromAttic(Path root, String gitRepository) {\n+        try {\n+            Path atticRoot = root.getParent().resolve(\"attic\");\n+            Files.walkFileTree(atticRoot, new FileVisitor<Path>() {\n+                @Override\n+                public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n+                    if (!ignored.contains(dir.getFileName().toString() + '/')) {\n+                        Path target = root.resolve(atticRoot.relativize(dir));\n+                        ServerLogger.ROOT_LOGGER.debugf(\"Restoring directory %s \", target);\n+                        if (Files.notExists(target)) {\n+                            Files.createDirectory(target);\n+                        }\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                    return FileVisitResult.SKIP_SUBTREE;\n+                }\n+\n+                @Override\n+                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                    try {\n+                        Path target = root.resolve(atticRoot.relativize(file));\n+                        ServerLogger.ROOT_LOGGER.debugf(\"Moving file %s from attic %s \", file, target);\n+                        Files.move(file, target, StandardCopyOption.REPLACE_EXISTING);\n+                    } catch (IOException ioex) {\n+                        ServerLogger.ROOT_LOGGER.debug(ioex.getMessage(), ioex);\n+                    }\n+                    return FileVisitResult.CONTINUE;\n+                }\n+\n+                @Override\n+                public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n+                    if (exc != null) {\n+                        throw exc;\n+                    }\n+                    return FileVisitResult.TERMINATE;\n+                }\n+\n+                @Override\n+                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n+                    if (exc != null) {\n+                        throw exc;\n+                    }\n+                    try {\n+                        ServerLogger.ROOT_LOGGER.debugf(\"Deleting file %s\", dir);\n+                        Files.delete(dir);\n+                    } catch (IOException ioex) {\n+                        ServerLogger.ROOT_LOGGER.debug(ioex.getMessage(), ioex);\n+                    }\n+                    return FileVisitResult.CONTINUE;\n+                }\n+\n+            });\n+        } catch (IOException ex) {\n+            throw ServerLogger.ROOT_LOGGER.failedToRestoreConfiguration(ex, gitRepository);\n+        }\n+    }\n+\n     private boolean createGitIgnore(Git git, Path root) throws IOException, GitAPIException {\n         Path gitIgnore = root.resolve(DOT_GIT_IGNORE);\n         if (Files.notExists(gitIgnore)) {\n@@ -307,7 +378,7 @@ private String findRemoteName(String gitRepository) {\n      * @throws GitAPIException\n      */\n     public void rollback() throws GitAPIException {\n-        try (Git git = getGit()) {\n+        try ( Git git = getGit()) {\n             git.reset().setMode(ResetCommand.ResetType.HARD).setRef(HEAD).call();\n         }\n     }\n@@ -319,7 +390,7 @@ public void rollback() throws GitAPIException {\n      * @throws GitAPIException\n      */\n     public void commit(String msg) throws GitAPIException {\n-        try (Git git = getGit()) {\n+        try ( Git git = getGit()) {\n             Status status = git.status().call();\n             if (!status.isClean()) {\n                 git.commit().setMessage(msg).setAll(true).setNoVerify(true).call();"
  },
  {
    "sha": "904f3c64b53c0ec36d59c092156fff954ce8a0b0",
    "filename": "server/src/main/java/org/jboss/as/server/logging/ServerLogger.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/8752268ded20d4df7c0998e8336028259c4b5c44/server/src/main/java/org/jboss/as/server/logging/ServerLogger.java",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/8752268ded20d4df7c0998e8336028259c4b5c44/server/src/main/java/org/jboss/as/server/logging/ServerLogger.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/server/src/main/java/org/jboss/as/server/logging/ServerLogger.java?ref=8752268ded20d4df7c0998e8336028259c4b5c44",
    "patch": "@@ -1376,6 +1376,9 @@\n     @Message(id = 283, value = \"A non-graceful startup was requested in conjunction with a suspended startup. The server will start suspended.\")\n     void disregardingNonGraceful();\n \n+    @Message(id = 284, value = \"Failed to restore the configuration after failing to initialize the repository %s\")\n+    RuntimeException failedToRestoreConfiguration(@Cause Exception cause, String repository);\n+\n     ////////////////////////////////////////////////\n     //Messages without IDs\n "
  }
]
