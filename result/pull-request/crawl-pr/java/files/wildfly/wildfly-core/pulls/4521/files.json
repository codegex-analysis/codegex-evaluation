[
  {
    "sha": "c0c90698cbb5b508267cc3205129e0b30742d95e",
    "filename": "elytron/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/pom.xml",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/pom.xml",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/pom.xml?ref=e63a992756130207e7a377eaaab36cf3ba5486ac",
    "patch": "@@ -320,6 +320,7 @@\n                             <excludes>\n                                 <exclude>*-1.*.xml</exclude>\n                                 <exclude>*-4.*.xml</exclude>\n+                                <exclude>elytron-expressions.xml</exclude>\n                                 <exclude>custom-policies.xml</exclude>\n                                 <exclude>jacc-with-providers.xml</exclude>\n                                 <exclude>legacy*.xml</exclude>"
  },
  {
    "sha": "352927b580de8ff2882a22fb4832b658cf49cc70",
    "filename": "elytron/src/test/java/org/wildfly/extension/elytron/ElytronSubsystem13_0TestCase.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/src/test/java/org/wildfly/extension/elytron/ElytronSubsystem13_0TestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/src/test/java/org/wildfly/extension/elytron/ElytronSubsystem13_0TestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/java/org/wildfly/extension/elytron/ElytronSubsystem13_0TestCase.java?ref=e63a992756130207e7a377eaaab36cf3ba5486ac",
    "patch": "@@ -56,4 +56,3 @@ protected String getSubsystemXml() throws IOException {\n     }\n \n }\n-"
  },
  {
    "sha": "56a6ac69f772233d69cf129267d642cb8bfddca8",
    "filename": "elytron/src/test/java/org/wildfly/extension/elytron/ResolveExpressionAttributesTestCase.java",
    "status": "added",
    "additions": 504,
    "deletions": 0,
    "changes": 504,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/src/test/java/org/wildfly/extension/elytron/ResolveExpressionAttributesTestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/src/test/java/org/wildfly/extension/elytron/ResolveExpressionAttributesTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/java/org/wildfly/extension/elytron/ResolveExpressionAttributesTestCase.java?ref=e63a992756130207e7a377eaaab36cf3ba5486ac",
    "patch": "@@ -0,0 +1,504 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wildfly.extension.elytron;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.subsystem.test.AbstractSubsystemBaseTest;\n+import org.jboss.as.subsystem.test.AdditionalInitialization;\n+import org.jboss.as.subsystem.test.KernelServices;\n+import org.jboss.as.subsystem.test.KernelServicesBuilder;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Verifies that attributes that allow expressions resolve them correctly.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class ResolveExpressionAttributesTestCase extends AbstractSubsystemBaseTest {\n+\n+    private ModelNode serverModel;\n+\n+    public ResolveExpressionAttributesTestCase() {\n+        super(ElytronExtension.SUBSYSTEM_NAME, new ElytronExtension());\n+    }\n+\n+    @Before\n+    public void init() throws Exception {\n+        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n+                .setSubsystemXml(getSubsystemXml());\n+        KernelServices kernelServices = builder.build();\n+        Assert.assertTrue(\"Subsystem boot failed!\", kernelServices.isSuccessfulBoot());\n+        ModelNode rootModel = kernelServices.readWholeModel();\n+        serverModel =  rootModel.require(ModelDescriptionConstants.SUBSYSTEM).require(ElytronExtension.SUBSYSTEM_NAME);\n+    }\n+\n+    @Override\n+    protected String getSubsystemXml() throws IOException {\n+        return readResource(\"elytron-expressions.xml\");\n+    }\n+\n+    @Test\n+    public void testExpressionAttributesResolved() {\n+        testAggregateRealm();\n+        testCertificateAuthorityAccount();\n+        testCertificateAuthority();\n+        testCredentialStore();\n+        testCustomComponent();\n+        testElytronDefinition();\n+        testEvidenceDecoder();\n+        testFailoverRealm();\n+        testFileSystemRealm();\n+        testFilteringKeyStoreDefinition();\n+        testIdentityRealm();\n+        testJaspiConfiguration();\n+        testJdbcRealm();\n+        testKerberosSecurityFactory();\n+        testKeyStore();\n+        testLdapKeyStore();\n+        testLdapRealm();\n+        testPermissionMappers();\n+        testPrincipalDecoders();\n+        testPrincipalTransformers();\n+        testPropertiesRealm();\n+        testProvider();\n+        testRealmMappers();\n+        testRoleDecoders();\n+        testRoleMappers();\n+        testSaslServer();\n+        testSSLComponents();\n+        testTokenRealm();\n+    }\n+\n+    private void testAggregateRealm() {\n+        ModelNode aggRealm = serverModel.get(ElytronDescriptionConstants.AGGREGATE_REALM).get(\"AggregateOne\");\n+        assertEquals(\"NameRewriterXY\", getValue(aggRealm, ElytronDescriptionConstants.PRINCIPAL_TRANSFORMER));\n+    }\n+\n+    private void testCertificateAuthorityAccount() {\n+        ModelNode caAccount = serverModel.get(ElytronDescriptionConstants.CERTIFICATE_AUTHORITY_ACCOUNT).get(\"MyCA\");\n+        assertEquals(Arrays.asList(\"https://www.test.com\"), getValue(caAccount, ElytronDescriptionConstants.CONTACT_URLS, true));\n+        assertEquals(\"LetsEncrypt\", getValue(caAccount, ElytronDescriptionConstants.CERTIFICATE_AUTHORITY));\n+        assertEquals(\"server\", getValue(caAccount, ElytronDescriptionConstants.ALIAS));\n+    }\n+\n+    private void testCertificateAuthority() {\n+        ModelNode ca = serverModel.get(ElytronDescriptionConstants.CERTIFICATE_AUTHORITY).get(\"testCA\");\n+        assertEquals(\"https://www.test.com\", getValue(ca, ElytronDescriptionConstants.STAGING_URL));\n+        assertEquals(\"https://www.test.com\", getValue(ca, ElytronDescriptionConstants.URL));\n+    }\n+\n+    private void testCredentialStore() {\n+        // Credential Stores\n+        ModelNode cs = serverModel.get(ElytronDescriptionConstants.CREDENTIAL_STORE).get(\"test1\");\n+        assertEquals(\"test1.store\", getValue(cs, ElytronDescriptionConstants.LOCATION));\n+        assertEquals(\"JCEKS\", getValue(cs, ElytronDescriptionConstants.TYPE));\n+        assertEquals(\"provider\", getValue(cs, ElytronDescriptionConstants.PROVIDER_NAME));\n+        cs = cs.get(ElytronDescriptionConstants.IMPLEMENTATION_PROPERTIES);\n+        assertEquals(\"JCEKS\", getValue(cs, \"keyStoreType\"));\n+        cs = serverModel.get(ElytronDescriptionConstants.CREDENTIAL_STORE).get(\"test4\");\n+        assertEquals(\"test1.store\", getValue(cs, ElytronDescriptionConstants.PATH));\n+\n+        // Secret Credential Store\n+        cs = serverModel.get(ElytronDescriptionConstants.SECRET_KEY_CREDENTIAL_STORE).get(\"test3\");\n+        assertEquals(\"false\", getValue(cs, ElytronDescriptionConstants.CREATE));\n+        assertEquals(\"false\", getValue(cs, ElytronDescriptionConstants.POPULATE));\n+        assertEquals(\"192\", getValue(cs, ElytronDescriptionConstants.KEY_SIZE));\n+        assertEquals(\"test3\", getValue(cs, ElytronDescriptionConstants.DEFAULT_ALIAS));\n+    }\n+\n+    private void testCustomComponent() {\n+        // Using custom permission mapper as example\n+        ModelNode mapper = serverModel.get(ElytronDescriptionConstants.CUSTOM_PERMISSION_MAPPER).get(\"MyPermissionMapper\");\n+        assertEquals(\"value\", getValue(mapper.get(ElytronDescriptionConstants.CONFIGURATION), \"test\"));\n+    }\n+\n+    private void testElytronDefinition() {\n+        assertEquals(Arrays.asList(\"test\"), getValue(serverModel, ElytronDescriptionConstants.DISALLOWED_PROVIDERS, true));\n+        assertEquals(\"false\", getValue(serverModel, ElytronDescriptionConstants.REGISTER_JASPI_FACTORY));\n+\n+    }\n+\n+    private void testEvidenceDecoder() {\n+        ModelNode decoder = serverModel.get(ElytronDescriptionConstants.X509_SUBJECT_ALT_NAME_EVIDENCE_DECODER).get(\"rfc822Decoder\");\n+        assertEquals(\"rfc822Name\", getValue(decoder, ElytronDescriptionConstants.ALT_NAME_TYPE));\n+        assertEquals(\"1\", getValue(decoder, ElytronDescriptionConstants.SEGMENT));\n+    }\n+\n+    private void testFailoverRealm() {\n+        ModelNode failoverRealm = serverModel.get(ElytronDescriptionConstants.FAILOVER_REALM).get(\"FailoverRealm\");\n+        assertEquals(\"true\", getValue(failoverRealm, ElytronDescriptionConstants.EMIT_EVENTS));\n+    }\n+\n+    private void testFileSystemRealm()  {\n+        ModelNode fileRealm = serverModel.get(ElytronDescriptionConstants.FILESYSTEM_REALM).get(\"FileRealm\");\n+        assertEquals(\"2\", getValue(fileRealm, ElytronDescriptionConstants.LEVELS));\n+        assertEquals(\"false\", getValue(fileRealm, ElytronDescriptionConstants.ENCODED));\n+    }\n+\n+    private void testFilteringKeyStoreDefinition() {\n+        ModelNode keystore = serverModel.get(ElytronDescriptionConstants.FILTERING_KEY_STORE).get(\"FilteringKeyStore\");\n+        assertEquals(\"NONE:+firefly\", getValue(keystore, ElytronDescriptionConstants.ALIAS_FILTER));\n+    }\n+\n+    private void testIdentityRealm() {\n+        ModelNode realm = serverModel.get(ElytronDescriptionConstants.IDENTITY_REALM).get(\"local\");\n+        assertEquals(\"$local\", getValue(realm, ElytronDescriptionConstants.IDENTITY));\n+        assertEquals(\"groups\", getValue(realm, ElytronDescriptionConstants.ATTRIBUTE_NAME));\n+        assertEquals(Arrays.asList(\"SuperUser\"), getValue(realm, ElytronDescriptionConstants.ATTRIBUTE_VALUES, true));\n+    }\n+\n+    private void testJaspiConfiguration() {\n+        ModelNode jaspi = serverModel.get(ElytronDescriptionConstants.JASPI_CONFIGURATION).get(\"test\");\n+        assertEquals(\"HttpServlet\", getValue(jaspi, ElytronDescriptionConstants.LAYER));\n+        assertEquals(\"default /test\", getValue(jaspi, ElytronDescriptionConstants.APPLICATION_CONTEXT));\n+        assertEquals(\"Test Definition\", getValue(jaspi, ElytronDescriptionConstants.DESCRIPTION));\n+\n+        ModelNode testModule = jaspi.get(ElytronDescriptionConstants.SERVER_AUTH_MODULES).get(0);\n+        assertEquals(\"REQUISITE\", getValue(testModule, ElytronDescriptionConstants.FLAG));\n+\n+        ModelNode options = testModule.get(ElytronDescriptionConstants.OPTIONS);\n+        assertEquals(\"b\", getValue(options, \"a\"));\n+    }\n+\n+    private void testJdbcRealm() {\n+        ModelNode jdbcRealm = serverModel.get(ElytronDescriptionConstants.JDBC_REALM).get(\"JdbcRealm\").get(ElytronDescriptionConstants.PRINCIPAL_QUERY).get(0);\n+\n+        // Bcrypt password mapper\n+        ModelNode mapper = jdbcRealm.get(ElytronDescriptionConstants.BCRYPT_MAPPER);\n+        assertEquals(\"2\", getValue(mapper, ElytronDescriptionConstants.PASSWORD_INDEX));\n+        assertEquals(\"3\", getValue(mapper, ElytronDescriptionConstants.SALT_INDEX));\n+        assertEquals(\"4\", getValue(mapper, ElytronDescriptionConstants.ITERATION_COUNT_INDEX));\n+        assertEquals(\"hex\", getValue(mapper, ElytronDescriptionConstants.HASH_ENCODING));\n+        assertEquals(\"hex\", getValue(mapper, ElytronDescriptionConstants.SALT_ENCODING));\n+\n+        // Clear password mapper\n+        mapper = jdbcRealm.get(ElytronDescriptionConstants.CLEAR_PASSWORD_MAPPER);\n+        assertEquals(\"2\", getValue(mapper, ElytronDescriptionConstants.PASSWORD_INDEX));\n+\n+        // Simple digest password mapper\n+        mapper = jdbcRealm.get(ElytronDescriptionConstants.SIMPLE_DIGEST_MAPPER);\n+        assertEquals(\"2\", getValue(mapper, ElytronDescriptionConstants.PASSWORD_INDEX));\n+        assertEquals(\"hex\", getValue(mapper, ElytronDescriptionConstants.HASH_ENCODING));\n+\n+        // Salted simple digest password mapper\n+        mapper = jdbcRealm.get(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST_MAPPER);\n+        assertEquals(\"2\", getValue(mapper, ElytronDescriptionConstants.PASSWORD_INDEX));\n+        assertEquals(\"3\", getValue(mapper, ElytronDescriptionConstants.SALT_INDEX));\n+        assertEquals(\"password-salt-digest-sha-1\", getValue(mapper, ElytronDescriptionConstants.ALGORITHM));\n+        assertEquals(\"hex\", getValue(mapper, ElytronDescriptionConstants.HASH_ENCODING));\n+        assertEquals(\"hex\", getValue(mapper, ElytronDescriptionConstants.SALT_ENCODING));\n+\n+        // Scram password mapper\n+        mapper = jdbcRealm.get(ElytronDescriptionConstants.SCRAM_MAPPER);\n+        assertEquals(\"2\", getValue(mapper, ElytronDescriptionConstants.PASSWORD_INDEX));\n+        assertEquals(\"3\", getValue(mapper, ElytronDescriptionConstants.SALT_INDEX));\n+        assertEquals(\"4\", getValue(mapper, ElytronDescriptionConstants.ITERATION_COUNT_INDEX));\n+        assertEquals(\"hex\", getValue(mapper, ElytronDescriptionConstants.HASH_ENCODING));\n+        assertEquals(\"hex\", getValue(mapper, ElytronDescriptionConstants.SALT_ENCODING));\n+\n+        // Modular crypt mapper\n+        mapper = jdbcRealm.get(ElytronDescriptionConstants.MODULAR_CRYPT_MAPPER);\n+        assertEquals(\"2\", getValue(mapper, ElytronDescriptionConstants.PASSWORD_INDEX));\n+    }\n+\n+    private void testKerberosSecurityFactory() {\n+        ModelNode kerberos = serverModel.get(ElytronDescriptionConstants.KERBEROS_SECURITY_FACTORY).get(\"KerberosFactory\");\n+        assertEquals(\"bob@Elytron.org\", getValue(kerberos, ElytronDescriptionConstants.PRINCIPAL));\n+        assertEquals(\"10\", getValue(kerberos, ElytronDescriptionConstants.MINIMUM_REMAINING_LIFETIME));\n+        assertEquals(\"120\", getValue(kerberos, ElytronDescriptionConstants.REQUEST_LIFETIME));\n+        assertEquals(\"100\", getValue(kerberos, ElytronDescriptionConstants.FAIL_CACHE));\n+        assertEquals(\"false\", getValue(kerberos, ElytronDescriptionConstants.SERVER));\n+        assertEquals(\"true\", getValue(kerberos, ElytronDescriptionConstants.OBTAIN_KERBEROS_TICKET));\n+        assertEquals(\"true\", getValue(kerberos, ElytronDescriptionConstants.DEBUG));\n+        assertEquals(\"true\", getValue(kerberos, ElytronDescriptionConstants.WRAP_GSS_CREDENTIAL));\n+        assertEquals(\"true\", getValue(kerberos, ElytronDescriptionConstants.REQUIRED));\n+        assertEquals(Arrays.asList(\"KRB5\", \"KRB5LEGACY\"), getValue(kerberos, ElytronDescriptionConstants.MECHANISM_NAMES, true));\n+        assertEquals(Arrays.asList(\"1.2.840.113554.1.2.2\", \"1.3.6.1.5.5.2\"), getValue(kerberos, ElytronDescriptionConstants.MECHANISM_OIDS, true));\n+    }\n+\n+    private void testKeyStore() {\n+        ModelNode keystore = serverModel.get(ElytronDescriptionConstants.KEY_STORE).get(\"jks_store\");\n+        assertEquals(\"jks\", getValue(keystore, ElytronDescriptionConstants.TYPE));\n+        assertEquals(\"SunJSSE\", getValue(keystore, ElytronDescriptionConstants.PROVIDER_NAME));\n+        assertEquals(\"one,two,three\", getValue(keystore, ElytronDescriptionConstants.ALIAS_FILTER));\n+        assertEquals(\"true\", getValue(keystore, ElytronDescriptionConstants.REQUIRED));\n+    }\n+\n+    private void testLdapKeyStore() {\n+        ModelNode keystore = serverModel.get(ElytronDescriptionConstants.LDAP_KEY_STORE).get(\"LdapKeyStore\");\n+\n+        // search\n+        assertEquals(\"dc=elytron,dc=wildfly,dc=org\", getValue(keystore, ElytronDescriptionConstants.SEARCH_PATH));\n+        assertEquals(\"true\", getValue(keystore, ElytronDescriptionConstants.SEARCH_RECURSIVE));\n+        assertEquals(\"1000\", getValue(keystore, ElytronDescriptionConstants.SEARCH_TIME_LIMIT));\n+        assertEquals(\"(&(objectClass=inetOrgPerson)(sn={0}))\", getValue(keystore, ElytronDescriptionConstants.FILTER_ALIAS));\n+        assertEquals(\"(&(objectClass=inetOrgPerson)(usercertificate={0}))\", getValue(keystore, ElytronDescriptionConstants.FILTER_CERTIFICATE));\n+        assertEquals(\"(sn=serenity*)\", getValue(keystore, ElytronDescriptionConstants.FILTER_ITERATE));\n+\n+        // attribute mapping\n+        assertEquals(\"sn\", getValue(keystore, ElytronDescriptionConstants.ALIAS_ATTRIBUTE));\n+        assertEquals(\"usercertificate\", getValue(keystore, ElytronDescriptionConstants.CERTIFICATE_ATTRIBUTE));\n+        assertEquals(\"X.509\", getValue(keystore, ElytronDescriptionConstants.CERTIFICATE_TYPE));\n+        assertEquals(\"userSMIMECertificate\", getValue(keystore, ElytronDescriptionConstants.CERTIFICATE_CHAIN_ATTRIBUTE));\n+        assertEquals(\"PKCS7\", getValue(keystore, ElytronDescriptionConstants.CERTIFICATE_CHAIN_ENCODING));\n+        assertEquals(\"userPKCS12\", getValue(keystore, ElytronDescriptionConstants.KEY_ATTRIBUTE));\n+        assertEquals(\"PKCS12\", getValue(keystore, ElytronDescriptionConstants.KEY_TYPE));\n+\n+        // new item template\n+        ModelNode template = keystore.get(ElytronDescriptionConstants.NEW_ITEM_TEMPLATE);\n+        assertEquals(\"ou=keystore,dc=elytron,dc=wildfly,dc=org\", getValue(template, ElytronDescriptionConstants.NEW_ITEM_PATH));\n+        assertEquals(\"cn\", getValue(template, ElytronDescriptionConstants.NEW_ITEM_RDN));\n+        assertEquals(\"objectClass\", getValue(template.get(ElytronDescriptionConstants.NEW_ITEM_ATTRIBUTES).get(0), ElytronDescriptionConstants.NAME));\n+        assertEquals(Arrays.asList(\"top\", \"inetOrgPerson\"), getValue(template.get(ElytronDescriptionConstants.NEW_ITEM_ATTRIBUTES).get(0), ElytronDescriptionConstants.VALUE, true));\n+    }\n+\n+    private void testLdapRealm() {\n+        ModelNode realm = serverModel.get(ElytronDescriptionConstants.LDAP_REALM).get(\"LdapRealmWithAttributeMapping\");\n+        assertEquals(\"false\", getValue(realm, ElytronDescriptionConstants.DIRECT_VERIFICATION));\n+        assertEquals(\"true\", getValue(realm, ElytronDescriptionConstants.ALLOW_BLANK_PASSWORD));\n+\n+        // Identity mapping\n+        ModelNode identityMapping = realm.get(ElytronDescriptionConstants.IDENTITY_MAPPING);\n+        assertEquals(\"uid\", getValue(identityMapping, ElytronDescriptionConstants.RDN_IDENTIFIER));\n+        assertEquals(\"true\", getValue(identityMapping, ElytronDescriptionConstants.USE_RECURSIVE_SEARCH));\n+        assertEquals(\"dc=elytron,dc=wildfly,dc=org\", getValue(identityMapping, ElytronDescriptionConstants.SEARCH_BASE_DN));\n+        assertEquals(\"(rdn_identifier={0})\", getValue(identityMapping, ElytronDescriptionConstants.FILTER_NAME));\n+        assertEquals(\"(uid=*)\", getValue(identityMapping, ElytronDescriptionConstants.ITERATOR_FILTER));\n+        assertEquals(\"dc=elytron,dc=wildfly,dc=org\", getValue(identityMapping, ElytronDescriptionConstants.NEW_IDENTITY_PARENT_DN));\n+\n+        // Attribute mapping\n+        ModelNode attributeMapping = identityMapping.get(ElytronDescriptionConstants.ATTRIBUTE_MAPPING);\n+        assertEquals(\"CN\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.FROM));\n+        assertEquals(\"businessUnit\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.TO));\n+        assertEquals(\"ref\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.REFERENCE));\n+        assertEquals(\"(&(objectClass=groupOfNames)(member={0}))\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.FILTER));\n+        assertEquals(\"ou=Finance,dc=elytron,dc=wildfly,dc=org\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.FILTER_BASE_DN));\n+        assertEquals(\"true\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.SEARCH_RECURSIVE));\n+        assertEquals(\"0\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.ROLE_RECURSION));\n+        assertEquals(\"cn\", getValue(attributeMapping.get(0), ElytronDescriptionConstants.ROLE_RECURSION_NAME));\n+        assertEquals(\"OU\", getValue(attributeMapping.get(1), ElytronDescriptionConstants.EXTRACT_RDN));\n+\n+        // User password credential mapping\n+        ModelNode userPass = identityMapping.get(ElytronDescriptionConstants.USER_PASSWORD_MAPPER);\n+        assertEquals(\"userPassword\", getValue(userPass, ElytronDescriptionConstants.FROM));\n+        assertEquals(\"true\", getValue(userPass, ElytronDescriptionConstants.WRITABLE));\n+        assertEquals(\"true\", getValue(userPass, ElytronDescriptionConstants.VERIFIABLE));\n+\n+        // Otp credential mapping\n+        ModelNode otp = identityMapping.get(ElytronDescriptionConstants.OTP_CREDENTIAL_MAPPER);\n+        assertEquals(\"otpAlgorithm\", getValue(otp, ElytronDescriptionConstants.ALGORITHM_FROM));\n+        assertEquals(\"otpHash\", getValue(otp, ElytronDescriptionConstants.HASH_FROM));\n+        assertEquals(\"otpSeed\", getValue(otp, ElytronDescriptionConstants.SEED_FROM));\n+        assertEquals(\"otpSequence\", getValue(otp, ElytronDescriptionConstants.SEQUENCE_FROM));\n+\n+        // X509 Credential mapping\n+        ModelNode x509 = identityMapping.get(ElytronDescriptionConstants.X509_CREDENTIAL_MAPPER);\n+        assertEquals(\"x509digest\", getValue(x509, ElytronDescriptionConstants.DIGEST_FROM));\n+        assertEquals(\"usercertificate\", getValue(x509, ElytronDescriptionConstants.CERTIFICATE_FROM));\n+        assertEquals(\"SHA-1\", getValue(x509, ElytronDescriptionConstants.DIGEST_ALGORITHM));\n+        assertEquals(\"x509serialNumber\", getValue(x509, ElytronDescriptionConstants.SERIAL_NUMBER_FROM));\n+        assertEquals(\"x509subject\", getValue(x509, ElytronDescriptionConstants.SUBJECT_DN_FROM));\n+\n+        // New identity attribute\n+        ModelNode newIdentity = identityMapping.get(ElytronDescriptionConstants.NEW_IDENTITY_ATTRIBUTES).get(0);\n+        assertEquals(\"sn\", getValue(newIdentity, ElytronDescriptionConstants.NAME));\n+        assertEquals(Arrays.asList(\"BlankSurname\"), getValue(newIdentity, ElytronDescriptionConstants.VALUE, true));\n+    }\n+\n+    private void testPermissionMappers() {\n+        ModelNode mapper = serverModel.get(ElytronDescriptionConstants.SIMPLE_PERMISSION_MAPPER).get(\"SimplePermissionMapperLegacy\");\n+        assertEquals(\"and\", getValue(mapper, ElytronDescriptionConstants.MAPPING_MODE));\n+\n+        mapper = mapper.get(ElytronDescriptionConstants.PERMISSION_MAPPINGS).get(0);\n+        assertEquals(Arrays.asList(\"John\", \"Joe\"), getValue(mapper, ElytronDescriptionConstants.PRINCIPALS, true));\n+        assertEquals(Arrays.asList(\"User\", \"Administrator\"), getValue(mapper, ElytronDescriptionConstants.ROLES, true));\n+\n+        mapper = mapper.get(ElytronDescriptionConstants.PERMISSIONS).get(1);\n+        assertEquals(\"../c\", getValue(mapper, ElytronDescriptionConstants.TARGET_NAME));\n+        assertEquals(\"delete\", getValue(mapper, ElytronDescriptionConstants.ACTION));\n+    }\n+\n+    private void testPrincipalDecoders() {\n+        ModelNode decoder = serverModel.get(ElytronDescriptionConstants.X500_ATTRIBUTE_PRINCIPAL_DECODER).get(\"MyX500PrincipalDecoderTwo\");\n+        assertEquals(\"2.5.4.3\", getValue(decoder, ElytronDescriptionConstants.OID));\n+        assertEquals(\",\", getValue(decoder, ElytronDescriptionConstants.JOINER));\n+        assertEquals(\"2\", getValue(decoder, ElytronDescriptionConstants.START_SEGMENT));\n+        assertEquals(\"1\", getValue(decoder, ElytronDescriptionConstants.MAXIMUM_SEGMENTS));\n+        assertEquals(\"true\", getValue(decoder, ElytronDescriptionConstants.REVERSE));\n+        assertEquals(\"true\", getValue(decoder, ElytronDescriptionConstants.CONVERT));\n+        assertEquals(Arrays.asList(\"2.5.4.3\", \"2.5.4.11\"), getValue(decoder, ElytronDescriptionConstants.REQUIRED_OIDS, true));\n+\n+        decoder = serverModel.get(ElytronDescriptionConstants.X500_ATTRIBUTE_PRINCIPAL_DECODER).get(\"MyCnDecoder\");\n+        assertEquals(\"Cn\", getValue(decoder, ElytronDescriptionConstants.ATTRIBUTE_NAME));\n+\n+        decoder = serverModel.get(ElytronDescriptionConstants.CONSTANT_PRINCIPAL_DECODER).get(\"ConstantDecoder\");\n+        assertEquals(\"test\", getValue(decoder, ElytronDescriptionConstants.CONSTANT));\n+    }\n+\n+    private void testPrincipalTransformers() {\n+        ModelNode pt = serverModel.get(ElytronDescriptionConstants.REGEX_PRINCIPAL_TRANSFORMER).get(\"NameRewriterXY\");\n+        assertEquals(\"y$1\", getValue(pt, ElytronDescriptionConstants.REPLACEMENT));\n+        assertEquals(\"x(.*)\", getValue(pt, ElytronDescriptionConstants.PATTERN));\n+        assertEquals(\"false\", getValue(pt, ElytronDescriptionConstants.REPLACE_ALL));\n+\n+        pt = serverModel.get(ElytronDescriptionConstants.CONSTANT_PRINCIPAL_TRANSFORMER).get(\"ConstantNameRewriter\");\n+        assertEquals(\"test\", getValue(pt, ElytronDescriptionConstants.CONSTANT));\n+\n+        pt = serverModel.get(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER).get(\"CaseNameRewriter\");\n+        assertEquals(\"true\", getValue(pt, ElytronDescriptionConstants.UPPER_CASE));\n+\n+        pt = serverModel.get(ElytronDescriptionConstants.REGEX_VALIDATING_PRINCIPAL_TRANSFORMER).get(\"RegexValidateNameRewriter\");\n+        assertEquals(\"true\", getValue(pt, ElytronDescriptionConstants.MATCH));\n+    }\n+\n+    private void testPropertiesRealm() {\n+        ModelNode propRealm = serverModel.get(ElytronDescriptionConstants.PROPERTIES_REALM).get(\"PropRealm\");\n+        assertEquals(\"FileRealm\", getValue(propRealm.get(ElytronDescriptionConstants.USERS_PROPERTIES), ElytronDescriptionConstants.DIGEST_REALM_NAME));\n+        assertEquals(\"false\", getValue(propRealm.get(ElytronDescriptionConstants.USERS_PROPERTIES), ElytronDescriptionConstants.PLAIN_TEXT));\n+        assertEquals(\"groups\", getValue(propRealm, ElytronDescriptionConstants.GROUPS_ATTRIBUTE));\n+    }\n+\n+    private void testProvider() {\n+        ModelNode provider = serverModel.get(ElytronDescriptionConstants.PROVIDER_LOADER).get(\"openssl\");\n+        assertEquals(\"val\", getValue(provider.get(ElytronDescriptionConstants.CONFIGURATION), \"prop\"));\n+        provider = serverModel.get(ElytronDescriptionConstants.PROVIDER_LOADER).get(\"elytron\");\n+        assertEquals(\"arg\", getValue(provider, ElytronDescriptionConstants.ARGUMENT));\n+    }\n+\n+    private void testRealmMappers() {\n+        ModelNode realmMapper = serverModel.get(ElytronDescriptionConstants.MAPPED_REGEX_REALM_MAPPER).get(\"MappedRealmMapper\");\n+        assertEquals(\".*@(.*)\", getValue(realmMapper, ElytronDescriptionConstants.PATTERN));\n+        assertEquals(\"test\", getValue(realmMapper.get(ElytronDescriptionConstants.REALM_MAP), \"test\"));\n+    }\n+\n+    private void testRoleDecoders() {\n+        ModelNode roleDecoder = serverModel.get(ElytronDescriptionConstants.SOURCE_ADDRESS_ROLE_DECODER).get(\"ipRoleDecoder\");\n+        assertEquals(Arrays.asList(\"admin\", \"user\"), getValue(roleDecoder, ElytronDescriptionConstants.ROLES, true));\n+        assertEquals(\"10.12.14.16\", getValue(roleDecoder, ElytronDescriptionConstants.SOURCE_ADDRESS));\n+        roleDecoder = serverModel.get(ElytronDescriptionConstants.SOURCE_ADDRESS_ROLE_DECODER).get(\"regexRoleDecoder\");\n+        assertEquals(\"10\\\\.12\\\\.14\\\\.\\\\d+$\", getValue(roleDecoder, ElytronDescriptionConstants.PATTERN));\n+    }\n+\n+    private void testRoleMappers() {\n+        ModelNode roleMapper = serverModel.get(ElytronDescriptionConstants.ADD_PREFIX_ROLE_MAPPER).get(\"RolePrefixer\");\n+        assertEquals(\"prefix\", getValue(roleMapper, ElytronDescriptionConstants.PREFIX));\n+        roleMapper = serverModel.get(ElytronDescriptionConstants.ADD_SUFFIX_ROLE_MAPPER).get(\"RoleSuffixer\");\n+        assertEquals(\"suffix\", getValue(roleMapper, ElytronDescriptionConstants.SUFFIX));\n+\n+        roleMapper = serverModel.get(ElytronDescriptionConstants.MAPPED_ROLE_MAPPER).get(\"MappedRoleMapper\");\n+        assertEquals(\"false\", getValue(roleMapper, ElytronDescriptionConstants.KEEP_MAPPED));\n+        assertEquals(\"true\", getValue(roleMapper, ElytronDescriptionConstants.KEEP_NON_MAPPED));\n+\n+        roleMapper = serverModel.get(ElytronDescriptionConstants.REGEX_ROLE_MAPPER).get(\"RegexRoleMapper\");\n+        assertEquals(\"false\", getValue(roleMapper, ElytronDescriptionConstants.REPLACEMENT));\n+        assertEquals(\"false\", getValue(roleMapper, ElytronDescriptionConstants.REPLACE_ALL));\n+        assertEquals(\"*(x.)\", getValue(roleMapper, ElytronDescriptionConstants.PATTERN));\n+\n+        roleMapper = serverModel.get(ElytronDescriptionConstants.CONSTANT_ROLE_MAPPER).get(\"ConstantRoleMapper\");\n+        assertEquals(Arrays.asList(\"role\"), getValue(roleMapper, ElytronDescriptionConstants.ROLES, true));\n+\n+        roleMapper = serverModel.get(ElytronDescriptionConstants.LOGICAL_ROLE_MAPPER).get(\"LogicalRoleMapper\");\n+        assertEquals(\"and\", getValue(roleMapper, ElytronDescriptionConstants.LOGICAL_OPERATION));\n+    }\n+\n+    private void testSaslServer() {\n+        ModelNode factory = serverModel.get(ElytronDescriptionConstants.SASL_AUTHENTICATION_FACTORY).get(\"SaslAuthenticationDefinition\").get(ElytronDescriptionConstants.MECHANISM_CONFIGURATIONS).get(0);\n+        assertEquals(\"PLAIN\", getValue(factory, ElytronDescriptionConstants.MECHANISM_NAME));\n+        assertEquals(\"host\", getValue(factory, ElytronDescriptionConstants.HOST_NAME));\n+        assertEquals(\"protocol\", getValue(factory, ElytronDescriptionConstants.PROTOCOL));\n+        assertEquals(\"Test Realm\", getValue(factory.get(ElytronDescriptionConstants.MECHANISM_REALM_CONFIGURATIONS).get(0), ElytronDescriptionConstants.REALM_NAME));\n+    }\n+\n+    private void testSSLComponents() {\n+        // SSL Context\n+        ModelNode context = serverModel.get(ElytronDescriptionConstants.SERVER_SSL_CONTEXT).get(\"server\");\n+        assertEquals(Arrays.asList(\"TLSv1.2\"), getValue(context, ElytronDescriptionConstants.PROTOCOLS, true));\n+        assertEquals(\"true\", getValue(context, ElytronDescriptionConstants.WANT_CLIENT_AUTH));\n+        assertEquals(\"true\", getValue(context, ElytronDescriptionConstants.NEED_CLIENT_AUTH));\n+        assertEquals(\"true\", getValue(context, ElytronDescriptionConstants.AUTHENTICATION_OPTIONAL));\n+        assertEquals(\"false\", getValue(context, ElytronDescriptionConstants.USE_CIPHER_SUITES_ORDER));\n+        assertEquals(\"false\", getValue(context, ElytronDescriptionConstants.WRAP));\n+        assertEquals(\"first\", getValue(context, ElytronDescriptionConstants.PROVIDER_NAME));\n+        assertEquals(\"DEFAULT\", getValue(context, ElytronDescriptionConstants.CIPHER_SUITE_FILTER));\n+        assertEquals(\"name\", getValue(context, ElytronDescriptionConstants.CIPHER_SUITE_NAMES));\n+        assertEquals(\"10\", getValue(context, ElytronDescriptionConstants.MAXIMUM_SESSION_CACHE_SIZE));\n+        assertEquals(\"120\", getValue(context, ElytronDescriptionConstants.SESSION_TIMEOUT));\n+\n+        // Trust Managers\n+        ModelNode tm = serverModel.get(ElytronDescriptionConstants.TRUST_MANAGER).get(\"trust-with-ocsp\").get(ElytronDescriptionConstants.OCSP);\n+        assertEquals(\"http://localhost/ocsp\", getValue(tm, ElytronDescriptionConstants.RESPONDER));\n+        assertEquals(\"jceks_store\", getValue(tm, ElytronDescriptionConstants.RESPONDER_KEYSTORE));\n+        assertEquals(\"responder-alias\", getValue(tm, ElytronDescriptionConstants.RESPONDER_CERTIFICATE));\n+\n+        tm = serverModel.get(ElytronDescriptionConstants.TRUST_MANAGER).get(\"trust-with-crl\").get(ElytronDescriptionConstants.CERTIFICATE_REVOCATION_LIST);\n+        assertEquals(\"crl.pem\", getValue(tm, ElytronDescriptionConstants.PATH));\n+        assertEquals(\"2\", getValue(tm, ElytronDescriptionConstants.MAXIMUM_CERT_PATH));\n+\n+        // Key Managers\n+        ModelNode keyManager = serverModel.get(ElytronDescriptionConstants.KEY_MANAGER).get(\"serverKey2\");\n+        assertEquals(\"SunX509\", getValue(keyManager, ElytronDescriptionConstants.ALGORITHM));\n+        assertEquals(\"one,two,three\", getValue(keyManager, ElytronDescriptionConstants.ALIAS_FILTER));\n+        assertEquals(\"localhost\", getValue(keyManager, ElytronDescriptionConstants.GENERATE_SELF_SIGNED_CERTIFICATE_HOST));\n+    }\n+\n+    private void testTokenRealm() {\n+        ModelNode realm = serverModel.get(ElytronDescriptionConstants.TOKEN_REALM).get(\"JwtRealmOne\");\n+        assertEquals(\"sub\", getValue(realm, ElytronDescriptionConstants.PRINCIPAL_CLAIM));\n+\n+        ModelNode jwt = realm.get(ElytronDescriptionConstants.JWT);\n+        assertEquals(Arrays.asList(\"some-issuer-a\"), getValue(jwt, ElytronDescriptionConstants.ISSUER, true));\n+        assertEquals(Arrays.asList(\"some-audience-a\"), getValue(jwt, ElytronDescriptionConstants.AUDIENCE, true));\n+        assertEquals(\"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrVrCuTtArbgaZzL1hvh0xtL5mc7o0NqP\", getValue(jwt, ElytronDescriptionConstants.PUBLIC_KEY));\n+        assertEquals(\"cert\", getValue(jwt, ElytronDescriptionConstants.CERTIFICATE));\n+        assertEquals(\"public\", getValue(jwt.get(ElytronDescriptionConstants.KEY_MAP), ElytronDescriptionConstants.KID));\n+\n+        // OAuth\n+        ModelNode oauth = serverModel.get(ElytronDescriptionConstants.TOKEN_REALM).get(\"OAuth2Realm\").get(ElytronDescriptionConstants.OAUTH2_INTROSPECTION);\n+        assertEquals(\"host\", getValue(oauth, ElytronDescriptionConstants.HOST_NAME_VERIFICATION_POLICY));\n+        assertEquals(\"a\", getValue(oauth, ElytronDescriptionConstants.CLIENT_ID));\n+        assertEquals(\"b\", getValue(oauth, ElytronDescriptionConstants.CLIENT_SECRET));\n+        assertEquals(\"https://localhost/token/introspect\", getValue(oauth, ElytronDescriptionConstants.INTROSPECTION_URL));\n+    }\n+\n+    private Object getValue(ModelNode node, String attributeName) {\n+        return getValue(node, attributeName, false);\n+    }\n+\n+    private Object getValue(ModelNode node, String attributeName, boolean isList) {\n+        ModelNode result = node.get(attributeName).resolve();\n+        if (! isList) {\n+            return result.asString();\n+        }\n+        List<String> results = new ArrayList<>();\n+        for (ModelNode n : result.asList()) {\n+            results.add(n.asString());\n+        }\n+        return results;\n+    }\n+}"
  },
  {
    "sha": "886bc9b90331d5ce366e17f21e154201c1686b93",
    "filename": "elytron/src/test/resources/org/wildfly/extension/elytron/elytron-expressions.xml",
    "status": "added",
    "additions": 474,
    "deletions": 0,
    "changes": 474,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/src/test/resources/org/wildfly/extension/elytron/elytron-expressions.xml",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/e63a992756130207e7a377eaaab36cf3ba5486ac/elytron/src/test/resources/org/wildfly/extension/elytron/elytron-expressions.xml",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/resources/org/wildfly/extension/elytron/elytron-expressions.xml?ref=e63a992756130207e7a377eaaab36cf3ba5486ac",
    "patch": "@@ -0,0 +1,474 @@\n+<!--\n+  ~ JBoss, Home of Professional Open Source\n+  ~ Copyright 2020, Red Hat, Inc., and individual contributors as indicated\n+  ~ by the @authors tag.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<!-- for needs of DomainTestCase -->\n+<subsystem xmlns=\"urn:wildfly:elytron:13.0\" register-jaspi-factory=\"${exp.jaspi:false}\" default-ssl-context=\"client\" disallowed-providers=\"${exp.providers:test}\">\n+    <providers>\n+        <provider-loader name=\"openssl\" module=\"org.wildfly.openssl\">\n+            <configuration>\n+                <property name=\"prop\" value=\"${exp.value:val}\"/>\n+            </configuration>\n+        </provider-loader>\n+        <provider-loader name=\"elytron\" module=\"org.wildfly.security.elytron\" argument=\"${exp.argument:arg}\"/>\n+    </providers>\n+    <security-domains>\n+        <security-domain name=\"MyDomain\" default-realm=\"FileRealm\" realm-mapper=\"MyRealmMapper\" permission-mapper=\"MyPermissionMapper\"\n+                         pre-realm-principal-transformer=\"NameRewriterXY\" post-realm-principal-transformer=\"NameRewriterYU\" trusted-security-domains=\"AnotherDomain\">\n+            <realm name=\"FileRealm\" role-decoder=\"MyRoleDecoder\" role-mapper=\"MyRoleMapper\"/>\n+            <realm name=\"PropRealm\" principal-transformer=\"NameRewriterRealmRemover\"/>\n+        </security-domain>\n+        <security-domain name=\"X500Domain\" default-realm=\"FileRealm\" principal-decoder=\"MyX500PrincipalDecoder\">\n+            <realm name=\"FileRealm\"/>\n+        </security-domain>\n+        <security-domain name=\"X500DomainTwo\" default-realm=\"FileRealm\" principal-decoder=\"MyX500PrincipalDecoderTwo\">\n+            <realm name=\"FileRealm\"/>\n+        </security-domain>\n+        <security-domain name=\"X500DomainThree\" default-realm=\"FileRealm\" principal-decoder=\"MyX500PrincipalDecoderThree\">\n+            <realm name=\"FileRealm\"/>\n+        </security-domain>\n+        <security-domain name=\"X500DomainFour\" default-realm=\"FileRealm\" principal-decoder=\"MyX500PrincipalDecoderThree\" evidence-decoder=\"aggregateEvidenceDecoder\">\n+            <realm name=\"FileRealm\"/>\n+        </security-domain>\n+        <security-domain name=\"AnotherDomain\" default-realm=\"PropRealm\" permission-mapper=\"LoginPermissionMapper\" trusted-security-domains=\"MyDomain\">\n+            <realm name=\"PropRealm\"/>\n+        </security-domain>\n+        <security-domain name=\"AggregateRealm\" default-realm=\"PropRealm\" role-decoder=\"aggregateRoleDecoder\">\n+            <realm name=\"PropRealm\"/>\n+        </security-domain>\n+    </security-domains>\n+    <security-realms>\n+        <aggregate-realm name=\"AggregateOne\" authentication-realm=\"PropRealm\" authorization-realm=\"FileRealm\" principal-transformer=\"${exp.transformer:NameRewriterXY}\"/>\n+        <aggregate-realm name=\"AggregateTwo\" authentication-realm=\"JdbcRealm\" authorization-realms=\"AggregateOne FileRealm\" />\n+        <identity-realm name=\"local\" identity=\"${exp.identity:$local}\" attribute-name=\"${exp.name:groups}\" attribute-values=\"${exp.values:SuperUser}\" />\n+        <jdbc-realm name=\"NewJdbcScramSha384\">\n+            <principal-query sql=\"SELECT\" data-source=\"ExampleDS\">\n+                <scram-mapper algorithm=\"scram-sha-384\" password-index=\"1\" salt-index=\"2\" iteration-count-index=\"10000\"/>\n+            </principal-query>\n+        </jdbc-realm>\n+        <jdbc-realm name=\"NewJdbcScramSha512\">\n+            <principal-query sql=\"SELECT\" data-source=\"ExampleDS\">\n+                <scram-mapper algorithm=\"scram-sha-512\" password-index=\"1\" salt-index=\"2\" iteration-count-index=\"10000\"/>\n+            </principal-query>\n+        </jdbc-realm>\n+        <jdbc-realm name=\"JdbcRealm\">\n+            <principal-query sql=\"SELECT role, password, salt, ic FROM User WHERE username = ?\" data-source=\"ExampleDS\">\n+                <attribute-mapping>\n+                    <attribute index=\"1\" to=\"role\"/>\n+                </attribute-mapping>\n+                <clear-password-mapper password-index=\"${exp.password:2}\"/>\n+                <bcrypt-mapper password-index=\"${exp.password:2}\" salt-index=\"${exp.salt:3}\" iteration-count-index=\"${exp.iteration:4}\" hash-encoding=\"${exp.encoding:hex}\" salt-encoding=\"${exp.encoding:hex}\"/>\n+                <salted-simple-digest-mapper password-index=\"${exp.password:2}\" salt-index=\"${exp.salt:3}\" algorithm=\"${exp.algo:password-salt-digest-sha-1}\" hash-encoding=\"${exp.encoding:hex}\" salt-encoding=\"${exp.encoding:hex}\"/>\n+                <simple-digest-mapper password-index=\"${exp.password:2}\" hash-encoding=\"${exp.encoding:hex}\" algorithm=\"simple-digest-sha-1\"/>\n+                <scram-mapper password-index=\"${exp.password:2}\" salt-index=\"${exp.salt:3}\" iteration-count-index=\"${exp.iteration:4}\" hash-encoding=\"${exp.encoding:hex}\" salt-encoding=\"${exp.encoding:hex}\" algorithm=\"${exp.algorithm:scram-sha-1}\"/>\n+                <modular-crypt-mapper password-index=\"${exp.password:2}\"/>\n+            </principal-query>\n+        </jdbc-realm>\n+        <properties-realm name=\"PropRealm\" groups-attribute=\"${exp.groups:groups}\">\n+            <users-properties path=\"users-hashed.properties\" relative-to=\"jboss.server.config.dir\" digest-realm-name=\"${exp.digest.realm:FileRealm}\" plain-text=\"${exp.plain:false}\"/>\n+        </properties-realm>\n+        <properties-realm name=\"NonDomainRealm\">\n+            <users-properties path=\"users-hashed.properties\" relative-to=\"jboss.server.config.dir\"/>\n+        </properties-realm>\n+        <ldap-realm name=\"LdapRealmWithAttributeMapping\" dir-context=\"dircontext1\" allow-blank-password=\"${exp.blank:true}\" direct-verification=\"${exp.verification:false}\">\n+            <identity-mapping rdn-identifier=\"${exp.rdn:uid}\" use-recursive-search=\"${exp.recursive:true}\" search-base-dn=\"${exp.search:dc=elytron,dc=wildfly,dc=org}\" filter-name=\"${exp.filter:(rdn_identifier={0})}\" iterator-filter=\"${exp.filter:(uid=*)}\" new-identity-parent-dn=\"${exp.parent:dc=elytron,dc=wildfly,dc=org}\">\n+                <attribute-mapping>\n+                    <attribute filter-base-dn=\"${exp.base:ou=Finance,dc=elytron,dc=wildfly,dc=org}\" filter=\"${exp.filter:(&amp;(objectClass=groupOfNames)(member={0}))}\" from=\"${exp.from:CN}\" extract-rdn=\"OU\" to=\"${exp.to:businessUnit}\"\n+                               reference=\"${exp.reference:ref}\" search-recursive=\"${exp.recursive:true}\" role-recursion=\"${exp.role:0}\" role-recursion-name=\"${exp.name:cn}\"/>\n+                    <attribute filter-base-dn=\"ou=Sales,dc=elytron,dc=wildfly,dc=org\" filter=\"(&amp;(objectClass=groupOfNames)(member={0}))\" from=\"CN\" extract-rdn=\"${exp.extract:OU}\" to=\"businessUnit\"/>\n+                </attribute-mapping>\n+                <new-identity-attributes>\n+                    <attribute name=\"${exp.name:sn}\" value=\"${exp.value:BlankSurname}\"/>\n+                </new-identity-attributes>\n+                <user-password-mapper from=\"${exp.from:userPassword}\" writable=\"${exp.writable:true}\" verifiable=\"${exp.verifiable:true}\" />\n+                <otp-credential-mapper algorithm-from=\"${exp.alg:otpAlgorithm}\" hash-from=\"${exp.hash:otpHash}\" seed-from=\"${exp.seed:otpSeed}\" sequence-from=\"${exp.sequence:otpSequenc}e\"/>\n+                <x509-credential-mapper digest-from=\"${exp.digest:x509digest}\" certificate-from=\"${exp.certificate:usercertificate}\" subject-dn-from=\"${exp.subject:x509subject}\" serial-number-from=\"${exp.serial:x509serialNumber}\" digest-algorithm=\"${exp.algo:SHA-1}\" />\n+            </identity-mapping>\n+        </ldap-realm>\n+        <filesystem-realm name=\"FileRealm\" levels=\"${exp.levels:2}\" encoded=\"${exp.encoded:false}\">\n+            <file path=\"filesystem-realm\" relative-to=\"jboss.server.config.dir\"/>\n+        </filesystem-realm>\n+        <token-realm name=\"JwtRealmOne\" principal-claim=\"${exp.principal:sub}\" >\n+            <jwt issuer=\"${exp.issuer:some-issuer-a}\" audience=\"${exp.audience:some-audience-a}\" public-key=\"${exp.key:MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrVrCuTtArbgaZzL1hvh0xtL5mc7o0NqP}\"\n+                 certificate=\"${exp.cert:cert}\">\n+                <key kid=\"kid\" public-key=\"${exp.public:public}\"/>\n+            </jwt>\n+        </token-realm>\n+        <token-realm name=\"OAuth2Realm\" principal-claim=\"sub\">\n+            <oauth2-introspection client-id=\"${exp.id:a}\" client-secret=\"${exp.secret:b}\" introspection-url=\"${exp.url:https://localhost/token/introspect}\" host-name-verification-policy=\"${exp.host:host}\"/>\n+        </token-realm>\n+        <distributed-realm name=\"DistributedRealm\" realms=\"FileRealm PropRealm\"/>\n+        <failover-realm name=\"FailoverRealm\" delegate-realm=\"JdbcRealm\" failover-realm=\"PropRealm\" emit-events=\"${exp.emit:true}\"/>\n+    </security-realms>\n+    <credential-security-factories>\n+        <custom-credential-security-factory name=\"CustomFactory\" module=\"a.b.c\" class-name=\"org.wildfly.security.ElytronFactory\">\n+            <configuration>\n+                <property name=\"a\" value=\"b\"/>\n+                <property name=\"c\" value=\"d\"/>\n+            </configuration>\n+        </custom-credential-security-factory>\n+\n+        <kerberos-security-factory name=\"KerberosFactory\"\n+                                   principal=\"${exp.principal:bob@Elytron.org}\"\n+                                   path=\"bob.keytab\"\n+                                   relative-to=\"server.config.dir\"\n+                                   minimum-remaining-lifetime=\"${exp.life:10}\"\n+                                   request-lifetime=\"${exp.request:120}\"\n+                                   server=\"${exp.server:false}\"\n+                                   obtain-kerberos-ticket=\"${exp.ticket:true}\"\n+                                   debug=\"${exp.debug:true}\"\n+                                   wrap-gss-credential=\"${exp.wrap:true}\"\n+                                   required=\"${exp.required:true}\"\n+                                   mechanism-names=\"${exp.test:KRB5} ${exp.legacy:KRB5LEGACY}\"\n+                                   mechanism-oids=\"${exp.oid:1.2.840.113554.1.2.2} ${exp.oid:1.3.6.1.5.5.2}\"\n+                                   fail-cache=\"${exp.fail:100}\">\n+            <option name=\"a\" value=\"b\"/>\n+            <option name=\"c\" value=\"d\"/>\n+        </kerberos-security-factory>\n+        <kerberos-security-factory name=\"OptionLessKerberosFactory\"\n+                                   principal=\"bob@Elytron.org\"\n+                                   path=\"bob.keytab\"\n+                                   relative-to=\"server.config.dir\"\n+                                   minimum-remaining-lifetime=\"10\"\n+                                   request-lifetime=\"120\"\n+                                   server=\"false\"\n+                                   obtain-kerberos-ticket=\"true\"\n+                                   debug=\"true\"\n+                                   wrap-gss-credential=\"true\"\n+                                   mechanism-oids=\"1.2.840.113554.1.2.2 1.3.6.1.5.5.2\"/>\n+    </credential-security-factories>\n+    <mappers>\n+        <custom-permission-mapper class-name=\"org.wildfly.extension.elytron.DomainTestCase$MyPermissionMapper\" name=\"MyPermissionMapper\" module=\"a.b.c\">\n+            <configuration>\n+                <property name=\"test\" value=\"${exp.value:value}\"/>\n+            </configuration>\n+        </custom-permission-mapper>\n+        <custom-permission-mapper class-name=\"org.wildfly.extension.elytron.DomainTestCase$LoginPermissionMapper\" name=\"LoginPermissionMapper\" module=\"a.b.c\"/>\n+        <simple-permission-mapper name=\"SimplePermissionMapperLegacy\" mapping-mode=\"${exp.mapping:and}\">\n+            <permission-mapping>\n+                <principal name=\"John\"/>\n+                <principal name=\"Joe\"/>\n+                <role name=\"User\"/>\n+                <role name=\"Administrator\"/>\n+                <permission class-name=\"a.b.MyPermission\"/>\n+                <permission class-name=\"a.b.MyOtherPermission\" target-name=\"${exp.target:../c}\" action=\"${exp.action:delete}\"/>\n+            </permission-mapping>\n+            <permission-mapping>\n+                <principal name=\"John Doe\"/>\n+                <permission class-name=\"a.b.JohnPermission\"/>\n+            </permission-mapping>\n+            <permission-mapping>\n+                <principal name=\"User\"/>\n+                <permission class-name=\"a.b.UserPermission\"/>\n+            </permission-mapping>\n+            <permission-mapping match-all=\"true\"/>\n+        </simple-permission-mapper>\n+        <simple-permission-mapper name=\"SimplePermissionMapper\" mapping-mode=\"and\">\n+            <permission-mapping>\n+                <principal name=\"John\"/>\n+                <principal name=\"Joe\"/>\n+                <role name=\"User\"/>\n+                <role name=\"Administrator\"/>\n+                <permission class-name=\"a.b.MyPermission\" />\n+                <permission-set name=\"my-permissions\"/>\n+            </permission-mapping>\n+            <permission-mapping>\n+                <principal name=\"John Doe\"/>\n+                <permission-set name=\"john-permissions\"/>\n+            </permission-mapping>\n+            <permission-mapping>\n+                <principal name=\"User\"/>\n+                <permission-set name=\"user-permissions\"/>\n+            </permission-mapping>\n+            <permission-mapping match-all=\"true\"/>\n+        </simple-permission-mapper>\n+        <constant-permission-mapper name=\"ConstantPermissionMapperLegacy\">\n+            <permission class-name=\"a.b.UserPermission\"/>\n+        </constant-permission-mapper>\n+        <constant-permission-mapper name=\"ConstantPermissionMapper\">\n+            <permission-set name=\"user-permissions\"/>\n+        </constant-permission-mapper>\n+        <concatenating-principal-decoder joiner=\"@\" name=\"MyX500PrincipalDecoderThree\">\n+            <principal-decoder name=\"MyCnDecoder\"/>\n+            <principal-decoder name=\"MyDcDecoder\"/>\n+        </concatenating-principal-decoder>\n+        <constant-principal-decoder name=\"ConstantDecoder\" constant=\"${exp.constant:test}\"/>\n+        <x500-attribute-principal-decoder joiner=\",\" maximum-segments=\"6\" name=\"MyX500PrincipalDecoder\" oid=\"2.5.4.3\"/>\n+        <x500-attribute-principal-decoder joiner=\"${exp.joiner:,}\" maximum-segments=\"${exp.map:1}\" name=\"MyX500PrincipalDecoderTwo\" oid=\"${exp.oid:2.5.4.3}\" required-oids=\"${exp.required.oids:2.5.4.3} ${exp.oids:2.5.4.11}\"\n+                                          required-attributes=\"cN\" reverse=\"${exp.reverse:true}\"\n+                                          start-segment=\"${exp.start:2}\"\n+                                          convert=\"${exp.convert:true}\"/>\n+        <x500-attribute-principal-decoder maximum-segments=\"1\" name=\"MyCnDecoder\" attribute-name=\"${exp.attribute:Cn}\" start-segment=\"1\"/>\n+        <x500-attribute-principal-decoder name=\"MyDcDecoder\" oid=\"0.9.2342.19200300.100.1.25\"/>\n+        <constant-principal-transformer name=\"ConstantNameRewriter\" constant=\"${exp.constant:test}\"/>\n+        <regex-principal-transformer name=\"NameRewriterXY\" pattern=\"${exp.pattern:x(.*)}\" replacement=\"${exp.replacement:y$1}\" replace-all=\"${exp.replace:false}\"/>\n+        <regex-principal-transformer name=\"NameRewriterYU\" pattern=\"y(.*)\" replacement=\"u$1\"/>\n+        <regex-principal-transformer name=\"NameRewriterRealmRemover\" pattern=\"(.*)@.*\" replacement=\"$1\"/>\n+        <regex-validating-principal-transformer name=\"RegexValidateNameRewriter\" pattern=\"x(.*)\" match=\"${exp.match:true}\"/>\n+        <simple-regex-realm-mapper name=\"MyRealmMapper\" pattern=\".*@(.*)\"/>\n+        <mapped-regex-realm-mapper name=\"MappedRealmMapper\" pattern=\"${exp.pattern:.*@(.*)}\">\n+            <realm-mapping from=\"test\" to=\"${exp.to:test}\"/>\n+        </mapped-regex-realm-mapper>\n+        <simple-role-decoder attribute=\"roles\" name=\"MyRoleDecoder\"/>\n+        <add-prefix-role-mapper name=\"RolePrefixer\" prefix=\"${exp.prefix:prefix}\"/>\n+        <add-suffix-role-mapper name=\"RoleSuffixer\" suffix=\"${exp.suffix:suffix}\"/>\n+        <aggregate-role-mapper name=\"MyRoleMapper\">\n+            <role-mapper name=\"RolePrefixer\"/>\n+            <role-mapper name=\"RoleSuffixer\"/>\n+        </aggregate-role-mapper>\n+        <constant-role-mapper name=\"ConstantRoleMapper\">\n+            <role name=\"${exp.role:role}\"/>\n+        </constant-role-mapper>\n+        <logical-role-mapper name=\"LogicalRoleMapper\" logical-operation=\"${exp.logical:and}\" />\n+        <mapped-role-mapper name=\"MappedRoleMapper\" keep-mapped=\"${exp.mapped:false}\" keep-non-mapped=\"${exp.non.mapped:true}\">\n+            <role-mapping from=\"Admin\" to=\"Administrator\"/>\n+            <role-mapping from=\"foo\" to=\"bar baz\"/>\n+        </mapped-role-mapper>\n+        <x500-subject-evidence-decoder name=\"subjectDecoder\" />\n+        <x509-subject-alt-name-evidence-decoder name=\"rfc822Decoder\" alt-name-type=\"${exp.alt.name:rfc822Name}\" segment=\"${exp.segment:1}\" />\n+        <custom-evidence-decoder name=\"customEvidenceDecoder\" class-name=\"org.wildfly.elytron.CustomEvidenceDecoder\" module=\"l.m\" />\n+        <aggregate-evidence-decoder name=\"aggregateEvidenceDecoder\">\n+            <evidence-decoder name=\"rfc822Decoder\"/>\n+            <evidence-decoder name=\"subjectDecoder\"/>\n+        </aggregate-evidence-decoder>\n+        <source-address-role-decoder name=\"ipRoleDecoder\" source-address=\"${exp.source:10.12.14.16}\" roles=\"${exp.admin:admin} ${exp.user:user}\"/>\n+        <source-address-role-decoder name=\"regexRoleDecoder\" pattern=\"${exp.pattern:10\\.12\\.14\\.\\d+$}\" roles=\"employee\"/>\n+        <aggregate-role-decoder name=\"aggregateRoleDecoder\">\n+            <role-decoder name=\"ipRoleDecoder\"/>\n+            <role-decoder name=\"regexRoleDecoder\"/>\n+        </aggregate-role-decoder>\n+        <regex-role-mapper name=\"RegexRoleMapper\" pattern=\"${exp.pattern:*(x.)}\" replacement=\"${exp.replacement:false}\" replace-all=\"${exp.replace.all:false}\"/>\n+        <case-principal-transformer name=\"CaseNameRewriter\" upper-case=\"${exp.upper:true}\" />\n+    </mappers>\n+    <permission-sets>\n+        <permission-set name=\"my-permissions\">\n+            <permission class-name=\"a.b.MyPermission\" />\n+            <permission class-name=\"a.b.MyOtherPermission\" target-name=\"../c\" action=\"delete\" />\n+        </permission-set>\n+        <permission-set name=\"john-permissions\">\n+            <permission class-name=\"a.b.JohnPermission\" />\n+        </permission-set>\n+        <permission-set name=\"user-permissions\">\n+            <permission class-name=\"a.b.UserPermission\" />\n+        </permission-set>\n+    </permission-sets>\n+    <sasl>\n+        <sasl-authentication-factory name=\"SaslAuthenticationDefinition\" security-domain=\"MyDomain\" sasl-server-factory=\"ConfigurableSaslServerFactory\">\n+            <mechanism-configuration>\n+                <mechanism mechanism-name=\"${exp.mech.name:PLAIN}\" pre-realm-principal-transformer=\"PreRealmNameRewriter\" post-realm-principal-transformer=\"PostRealmNameRewriter\"\n+                           final-principal-transformer=\"FinalNameRewriter\" realm-mapper=\"RegexMapper\" host-name=\"${exp.host:host}\" protocol=\"${exp.protocol:protocol}\">\n+                    <mechanism-realm realm-name=\"${exp.realm.name:Test Realm}\" pre-realm-principal-transformer=\"PreRealmNameRewriter_II\"\n+                                     post-realm-principal-transformer=\"PostRealmNameRewriter_II\" final-principal-transformer=\"FinalNameRewriter_II\"\n+                                     realm-mapper=\"RegexMapper_II\"/>\n+                </mechanism>\n+            </mechanism-configuration>\n+        </sasl-authentication-factory>\n+        <sasl-authentication-factory name=\"KerberosHttpMgmtSaslTestCase\" sasl-server-factory=\"KerberosHttpMgmtSaslTestCase\"\n+                                     security-domain=\"KerberosHttpMgmtSaslTestCase\">\n+            <mechanism-configuration>\n+                <mechanism mechanism-name=\"GSSAPI\" credential-security-factory=\"KerberosHttpMgmtSaslTestCase\">\n+                    <mechanism-realm realm-name=\"KerberosHttpMgmtSaslTestCase\" />\n+                </mechanism>\n+                <mechanism mechanism-name=\"GS2-KRB5\" credential-security-factory=\"KerberosHttpMgmtSaslTestCase\">\n+                    <mechanism-realm realm-name=\"KerberosHttpMgmtSaslTestCase\" />\n+                </mechanism>\n+                <mechanism mechanism-name=\"GS2-KRB5-PLUS\" credential-security-factory=\"KerberosHttpMgmtSaslTestCase\">\n+                    <mechanism-realm realm-name=\"KerberosHttpMgmtSaslTestCase\" />\n+                </mechanism>\n+            </mechanism-configuration>\n+        </sasl-authentication-factory>\n+        <aggregate-sasl-server-factory name=\"AggregateSaslFactory\">\n+            <sasl-server-factory name=\"ProviderSaslFactory\"/>\n+            <sasl-server-factory name=\"ServiceSaslFactory\"/>\n+        </aggregate-sasl-server-factory>\n+        <configurable-sasl-server-factory name=\"ConfigurableSaslServerFactory\" server-name=\"server\" protocol=\"test-protocol\" sasl-server-factory=\"MechFiltering\">\n+            <properties>\n+                <property name=\"a\" value=\"b\"/>\n+                <property name=\"c\" value=\"d\"/>\n+            </properties>\n+            <filters>\n+                <filter enabling=\"false\" pattern=\"x\"/>\n+                <filter enabling=\"false\" predefined=\"HASH_MD5\"/>\n+            </filters>\n+        </configurable-sasl-server-factory>\n+        <mechanism-provider-filtering-sasl-server-factory name=\"MechFiltering\" sasl-server-factory=\"AggregateSaslFactory\" enabling=\"false\">\n+            <filters>\n+                <filter mechanism-name=\"Digest\" provider-name=\"Sun\" provider-version=\"1.5\" version-comparison=\"greater-than\"/>\n+                <filter mechanism-name=\"Scram\" provider-name=\"Sun\" provider-version=\"1.5\" version-comparison=\"greater-than\"/>\n+            </filters>\n+        </mechanism-provider-filtering-sasl-server-factory>\n+        <provider-sasl-server-factory name=\"ProviderSaslFactory\" providers=\"TestProviderLoader\"/>\n+        <service-loader-sasl-server-factory name=\"ServiceSaslFactory\" module=\"a.b.c\"/>\n+    </sasl>\n+    <tls>\n+        <key-stores>\n+            <key-store name=\"PKCS_11\">\n+                <credential-reference clear-text=\"password\"/>\n+                <implementation type=\"PKCS#11\" provider-name=\"SunPKCS#11\"/>\n+            </key-store>\n+            <key-store name=\"jks_store\" alias-filter=\"${exp.alias.filter:one,two,three}\">\n+                <credential-reference clear-text=\"password\"/>\n+                <implementation type=\"${exp.type:jks}\" provider-name=\"${exp.provider:SunJSSE}\"/>\n+                <file relative-to=\"jboss.server.config.dir\" path=\"keystore.jks\" required=\"${exp.required:true}\"/>\n+            </key-store>\n+            <key-store name=\"jceks_store\">\n+                <credential-reference clear-text=\"password\"/>\n+                <implementation type=\"jceks\"/>\n+                <file relative-to=\"jboss.server.config.dir\" path=\"keystore.jceks\"/>\n+            </key-store>\n+            <key-store name=\"Custom_PKCS_11\">\n+                <credential-reference clear-text=\"password\"/>\n+                <implementation type=\"PKCS#11\" provider-name=\"SunPKCS#11\" providers=\"custom-loader\"/>\n+            </key-store>\n+            <key-store name=\"accounts.keystore\">\n+                <credential-reference clear-text=\"elytron\"/>\n+                <implementation type=\"JKS\"/>\n+                <file path=\"accounts.keystore.jks\" relative-to=\"jboss.server.config.dir\"/>\n+            </key-store>\n+            <key-store name=\"test.keystore\">\n+                <credential-reference clear-text=\"elytron\"/>\n+                <implementation type=\"PKCS12\"/>\n+                <file path=\"test.keystore\" relative-to=\"jboss.server.config.dir\"/>\n+            </key-store>\n+            <ldap-key-store name=\"LdapKeyStore\" dir-context=\"DirContextSsl\" >\n+                <new-item-template new-item-path=\"${exp.path:ou=keystore,dc=elytron,dc=wildfly,dc=org}\" new-item-rdn=\"${exp.item:cn}\">\n+                    <attribute name=\"${exp.name:objectClass}\" value=\"${exp.value:top} ${exp.value2:inetOrgPerson}\"/>\n+                    <attribute name=\"sn\" value=\"NewKeyStoreItem\"/>\n+                </new-item-template>\n+                <search path=\"${exp.path:dc=elytron,dc=wildfly,dc=org}\" recursive=\"${exp.recursive:true}\" time-limit=\"${exp.time:1000}\" filter-alias=\"${exp.filter:(&amp;(objectClass=inetOrgPerson)(sn={0}))}\"\n+                        filter-certificate=\"${exp.filter:(&amp;(objectClass=inetOrgPerson)(usercertificate={0}))}\" filter-iterate=\"${exp.iterate:(sn=serenity*)}\"/>\n+                <attribute-mapping alias-attribute=\"${exp.alias:sn}\" certificate-attribute=\"${exp.certificate:usercertificate}\" certificate-chain-attribute=\"${exp.chain:userSMIMECertificate}\" certificate-chain-encoding=\"${exp.encoding:PKCS7}\" certificate-type=\"${exp.type:X.509}\" key-attribute=\"${exp.key:userPKCS12}\"\n+                                   key-type=\"${exp.type:PKCS12}\"/>\n+            </ldap-key-store>\n+            <filtering-key-store name=\"FilteringKeyStore\" key-store=\"Custom_PKCS_11\" alias-filter=\"${exp.alias.filter:NONE:+firefly}\"/>\n+        </key-stores>\n+        <key-managers>\n+            <key-manager name=\"serverKey\" algorithm=\"SunX509\" key-store=\"jks_store\">\n+                <credential-reference clear-text=\"password\"/>\n+            </key-manager>\n+            <key-manager name=\"serverKey2\" algorithm=\"${exp.algo:SunX509}\" key-store=\"jks_store\" providers=\"custom-loader\" provider-name=\"first\" alias-filter=\"${exp.alias:one,two,three}\" generate-self-signed-certificate-host=\"${exp.generate:localhost}\">\n+                <credential-reference store=\"credstore1\" alias=\"password-alias\" type=\"PasswordCredential\"/>\n+            </key-manager>\n+            <key-manager name=\"clientKey\" algorithm=\"SunX509\" key-store=\"jks_store\">\n+                <credential-reference store=\"credstore1\" alias=\"password-alias\" type=\"PasswordCredential\"/>\n+            </key-manager>\n+            <key-manager name=\"LazyKeyManager\" key-store=\"test.keystore\" generate-self-signed-certificate-host=\"localhost\">\n+                <credential-reference clear-text=\"elytron\"/>\n+            </key-manager>\n+        </key-managers>\n+        <trust-managers>\n+            <trust-manager name=\"serverTrust\" algorithm=\"SunX509\" key-store=\"jks_store\"/>\n+            <trust-manager name=\"serverTrust2\" algorithm=\"SunX509\" key-store=\"jks_store\" providers=\"custom-loader\" provider-name=\"first\"/>\n+            <trust-manager name=\"trust-with-crl\" algorithm=\"SunX509\" key-store=\"jks_store\">\n+                <certificate-revocation-list path=\"${exp.path:crl.pem}\" relative-to=\"jboss.server.config.dir\" maximum-cert-path=\"${exp.max:2}\"/>\n+            </trust-manager>\n+            <trust-manager name=\"trust-with-crl-dp\" algorithm=\"SunX509\" key-store=\"jks_store\">\n+                <certificate-revocation-list/>\n+            </trust-manager>\n+            <trust-manager name=\"trust-with-ocsp\" algorithm=\"${exp.algorithm:PKIX}\" key-store=\"jks_store\">\n+                <ocsp responder=\"${exp.responder:http://localhost/ocsp}\" responder-keystore=\"${exp.responder.keystore:jceks_store}\" responder-certificate=\"${exp.responder.certificate:responder-alias}\"/>\n+            </trust-manager>\n+        </trust-managers>\n+        <server-ssl-contexts>\n+            <server-ssl-context name=\"server\" protocols=\"${exp.protocols:TLSv1.2}\" want-client-auth=\"${exp.client.auth:true}\" need-client-auth=\"${exp.need.client:true}\" authentication-optional=\"${exp.authentication:true}\"\n+                                use-cipher-suites-order=\"${exp.cipher.suites:false}\" maximum-session-cache-size=\"${exp.cache:10}\" cipher-suite-filter=\"${exp.filter:DEFAULT}\" cipher-suite-names=\"${exp.names:name}\"\n+                                session-timeout=\"${exp.session:120}\" wrap=\"${exp.wrap:false}\" key-manager=\"serverKey\" trust-manager=\"serverTrust\" pre-realm-principal-transformer=\"a\"\n+                                post-realm-principal-transformer=\"b\" final-principal-transformer=\"c\" realm-mapper=\"d\" providers=\"custom-loader\" provider-name=\"${exp.provider.name:first}\"/>\n+            <server-ssl-context name=\"server2\" protocols=\"TLSv1.2\" want-client-auth=\"true\" need-client-auth=\"true\" authentication-optional=\"true\"\n+                                use-cipher-suites-order=\"false\" maximum-session-cache-size=\"10\"\n+                                session-timeout=\"120\" wrap=\"false\" key-manager=\"serverKey\" trust-manager=\"serverTrust\" pre-realm-principal-transformer=\"a\"\n+                                post-realm-principal-transformer=\"b\" final-principal-transformer=\"c\" realm-mapper=\"d\" providers=\"custom-loader\" provider-name=\"first\"/>\n+        </server-ssl-contexts>\n+        <client-ssl-contexts>\n+            <client-ssl-context name=\"client\" protocols=\"TLSv1.3 TLSv1.2\" key-manager=\"clientKey\" trust-manager=\"serverTrust\" providers=\"custom-loader\"\n+                                provider-name=\"first\"/>\n+        </client-ssl-contexts>\n+        <certificate-authorities>\n+            <certificate-authority name=\"testCA\" url=\"${exp.url:https://www.test.com}\" staging-url=\"${exp.staging.url:https://www.test.com}\"/>\n+        </certificate-authorities>\n+        <certificate-authority-accounts>\n+            <certificate-authority-account name=\"MyCA\" certificate-authority=\"${exp.certificate.authority:LetsEncrypt}\" contact-urls=\"${exp.contact.urls:https://www.test.com}\">\n+                <account-key key-store=\"accounts.keystore\" alias=\"${exp.alias:server}\">\n+                    <credential-reference clear-text=\"elytron\"/>\n+                </account-key>\n+            </certificate-authority-account>\n+            <certificate-authority-account name=\"MyCA2\" certificate-authority=\"testCA\">\n+                <account-key key-store=\"accounts.keystore\" alias=\"server\">\n+                    <credential-reference clear-text=\"elytron\"/>\n+                </account-key>\n+            </certificate-authority-account>\n+        </certificate-authority-accounts>\n+        <server-ssl-sni-contexts>\n+            <server-ssl-sni-context name=\"sni\" default-ssl-context=\"server\">\n+                <sni-mapping host=\"server\" ssl-context=\"server\" />\n+                <sni-mapping host=\".*\\.server\" ssl-context=\"server2\" />\n+            </server-ssl-sni-context>\n+        </server-ssl-sni-contexts>\n+    </tls>\n+    <credential-stores>\n+        <credential-store name=\"test1\" relative-to=\"jboss.server.data.dir\" location=\"${exp.location:test1.store}\" create=\"true\" type=\"${exp.type:JCEKS}\" provider-name=\"${exp.provider:provider}\">\n+            <implementation-properties>\n+                <property name=\"keyStoreType\" value=\"JCEKS\"/>\n+                <property name=\"keyAlias\" value=\"adminKey\"/>\n+            </implementation-properties>\n+            <credential-reference clear-text=\"secret2\"/>\n+        </credential-store>\n+        <credential-store name=\"test2\" relative-to=\"jboss.server.data.dir\" modifiable=\"true\">\n+            <credential-reference store=\"test1\" alias=\"to_open_test2\"/>\n+        </credential-store>\n+        <credential-store name=\"test4\" relative-to=\"jboss.server.data.dir\" path=\"${exp.path:test1.store}\" create=\"true\">\n+            <credential-reference clear-text=\"secret2\"/>\n+        </credential-store>\n+        <secret-key-credential-store name=\"test3\" relative-to=\"jboss.server.data.dir\" path=\"test3.cs\"\n+                                     create=\"${exp.create:false}\" populate=\"${exp.populate:false}\"\n+                                     key-size=\"${exp.key:192}\" default-alias=\"${exp.alias:test3}\" />\n+    </credential-stores>\n+    <expression-resolver default-resolver=\"A\" prefix=\"G\">\n+        <resolver name=\"A\" credential-store=\"test1\" secret-key=\"C\"/>\n+        <resolver name=\"D\" credential-store=\"test2\" secret-key=\"F\"/>\n+    </expression-resolver>\n+    <dir-contexts>\n+        <dir-context name=\"DirContextSsl\" authentication-context=\"ldapAuthContext\" referral-mode=\"throw\" url=\"ldaps://localhost:11391/\" connection-timeout=\"6000\" read-timeout=\"10000\">\n+            <properties>\n+                <property name=\"java.naming.dns.url\" value=\"dns://dnsserver/wiz.com\"/>\n+            </properties>\n+        </dir-context>\n+    </dir-contexts>\n+    <jaspi>\n+        <jaspi-configuration name=\"test\" layer=\"${exp.layer:HttpServlet}\" application-context=\"${exp.app.context:default /test}\" description=\"${exp.description:Test Definition}\">\n+            <server-auth-modules>\n+                <server-auth-module class-name=\"org.wildfly.Test\" module=\"org.test\" flag=\"${exp.flag:REQUISITE}\">\n+                    <options>\n+                        <property name=\"a\" value=\"${exp.b:b}\"/>\n+                        <property name=\"c\" value=\"d\"/>\n+                    </options>\n+                </server-auth-module>\n+                <server-auth-module class-name=\"org.wildfly.Test2\" module=\"org.test2\" flag=\"SUFFICIENT\">\n+                    <options>\n+                        <property name=\"e\" value=\"f\"/>\n+                        <property name=\"g\" value=\"h\"/>\n+                    </options>\n+                </server-auth-module>\n+            </server-auth-modules>\n+        </jaspi-configuration>\n+        <jaspi-configuration name=\"minimal\">\n+            <server-auth-modules>\n+                <server-auth-module class-name=\"org.wildfly.Test3\" />\n+            </server-auth-modules>\n+        </jaspi-configuration>\n+    </jaspi>\n+</subsystem>"
  }
]
