[
  {
    "sha": "9ab990b9bab23dcf94172df70637b9b755671447",
    "filename": "elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUtility.java",
    "status": "modified",
    "additions": 39,
    "deletions": 21,
    "changes": 60,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/e7378d38347b713cd812a8787c273ee36a5e407e/elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUtility.java",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/e7378d38347b713cd812a8787c273ee36a5e407e/elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUtility.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/java/org/wildfly/extension/elytron/CredentialStoreUtility.java?ref=e7378d38347b713cd812a8787c273ee36a5e407e",
    "patch": "@@ -34,6 +34,7 @@\n import org.wildfly.security.credential.SecretKeyCredential;\n import org.wildfly.security.credential.store.CredentialStore;\n import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.credential.store.impl.PropertiesCredentialStore;\n import org.wildfly.security.password.interfaces.ClearPassword;\n \n /**\n@@ -58,31 +59,38 @@\n      * @param adminKeyPassword a password (clear text) for protecting admin key\n      * @param createStorageFirst flag whether to create storage first and then initialize Credential Store\n      */\n-    public CredentialStoreUtility(String credentialStoreFileName, String storePassword, String adminKeyPassword, boolean createStorageFirst) {\n-        Assert.checkNotNullParam(\"credentialStoreFileName\", credentialStoreFileName);\n-        Assert.checkNotNullParam(\"storePassword\", storePassword);\n-        Assert.checkNotNullParam(\"adminKeyPassword\", adminKeyPassword);\n-        this.credentialStoreFileName = credentialStoreFileName;\n+    public CredentialStoreUtility(String credentialStoreFileName, String storePassword, String adminKeyPassword, boolean createStorageFirst, boolean propertiesStore) {\n+        this.credentialStoreFileName = Assert.checkNotNullParam(\"credentialStoreFileName\", credentialStoreFileName);\n+        if (!propertiesStore) {\n+            Assert.checkNotNullParam(\"storePassword\", storePassword);\n+            Assert.checkNotNullParam(\"adminKeyPassword\", adminKeyPassword);\n+        }\n \n         try {\n             Map<String, String> attributes = new HashMap<>();\n-            if (createStorageFirst) {\n-                createKeyStore(\"JCEKS\", storePassword.toCharArray());\n-            }\n-            credentialStore = CredentialStore.getInstance(KeyStoreCredentialStore.KEY_STORE_CREDENTIAL_STORE);\n-            attributes.put(\"location\", credentialStoreFileName);\n-            attributes.put(\"keyStoreType\", \"JCEKS\");\n-            attributes.put(\"modifiable\", \"true\");\n-            if (!createStorageFirst) {\n-                File storage = new File(credentialStoreFileName);\n-                if (storage.exists()) {\n-                    storage.delete();\n+            if (propertiesStore) {\n+                credentialStore = CredentialStore.getInstance(PropertiesCredentialStore.NAME);\n+                attributes.put(\"location\", credentialStoreFileName);\n+                attributes.put(\"create\", \"true\");\n+                credentialStore.initialize(attributes);\n+            } else {\n+                if (createStorageFirst) {\n+                    createKeyStore(\"JCEKS\", storePassword.toCharArray());\n+                }\n+                credentialStore = CredentialStore.getInstance(KeyStoreCredentialStore.KEY_STORE_CREDENTIAL_STORE);\n+                attributes.put(\"location\", credentialStoreFileName);\n+                attributes.put(\"keyStoreType\", \"JCEKS\");\n+                attributes.put(\"modifiable\", \"true\");\n+                if (!createStorageFirst) {\n+                    File storage = new File(credentialStoreFileName);\n+                    if (storage.exists()) {\n+                        storage.delete();\n+                    }\n                 }\n-            }\n \n-            credentialStore.initialize(attributes, new CredentialStore.CredentialSourceProtectionParameter(\n-                    IdentityCredentials.NONE.withCredential(convertToPasswordCredential(storePassword.toCharArray()))\n-                    ));\n+                credentialStore.initialize(attributes, new CredentialStore.CredentialSourceProtectionParameter(\n+                        IdentityCredentials.NONE.withCredential(convertToPasswordCredential(storePassword.toCharArray()))));\n+            }\n         } catch (Throwable t) {\n             LOGGER.error(t);\n             throw new RuntimeException(t);\n@@ -98,7 +106,7 @@ public CredentialStoreUtility(String credentialStoreFileName, String storePasswo\n      * @param storePassword master password (clear text) to open the credential store\n      */\n     public CredentialStoreUtility(String credentialStoreFileName, String storePassword) {\n-        this(credentialStoreFileName, storePassword, storePassword, true);\n+        this(credentialStoreFileName, storePassword, storePassword, true, false);\n     }\n \n     /**\n@@ -111,6 +119,16 @@ public CredentialStoreUtility(String credentialStoreFileName) {\n         this(credentialStoreFileName, DEFAULT_PASSWORD);\n     }\n \n+    /**\n+     * Create Credential Store with default password.\n+     * Automatically create underlying KeyStore.\n+     *\n+     * @param credentialStoreFileName name of file to hold credentials\n+     */\n+    public CredentialStoreUtility(String credentialStoreFileName, boolean propertiesCredentialStore) {\n+        this(credentialStoreFileName, DEFAULT_PASSWORD, DEFAULT_PASSWORD, true, propertiesCredentialStore);\n+    }\n+\n     /**\n      * Add new entry to credential store and perform all conversions.\n      * @param alias of the entry"
  },
  {
    "sha": "84e0bdeb3c6d96af5263b7c8eab56eadda60c162",
    "filename": "elytron/src/test/java/org/wildfly/extension/elytron/ExpressionResolutionTestCase.java",
    "status": "modified",
    "additions": 53,
    "deletions": 9,
    "changes": 62,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/e7378d38347b713cd812a8787c273ee36a5e407e/elytron/src/test/java/org/wildfly/extension/elytron/ExpressionResolutionTestCase.java",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/e7378d38347b713cd812a8787c273ee36a5e407e/elytron/src/test/java/org/wildfly/extension/elytron/ExpressionResolutionTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/java/org/wildfly/extension/elytron/ExpressionResolutionTestCase.java?ref=e7378d38347b713cd812a8787c273ee36a5e407e",
    "patch": "@@ -26,6 +26,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.security.AccessController;\n+import java.security.GeneralSecurityException;\n import java.security.PrivilegedAction;\n import java.security.Provider;\n import java.security.Security;\n@@ -58,6 +59,10 @@\n public class ExpressionResolutionTestCase extends AbstractSubsystemBaseTest {\n \n     private static final Provider PROVIDER = new WildFlyElytronCredentialStoreProvider();\n+\n+    private static final String CSONE_SECURE_KEY = \"RUxZAUsXHVcDh99zAdxGEzTBK1h2qjW+sZg2+37w7ijhDEiJEw==\";\n+    private static final String CSTHREE_TEST_KEY = \"RUxZAUv5+IwidHJCNNG/cEe2GmWvieV3Ecg7M4xZaJiSULKlBQ==\";\n+\n     private static final String CLEAR_TEXT = \"Lorem ipsum dolor sit amet\";\n \n \n@@ -92,17 +97,56 @@ protected String getSubsystemXml() throws IOException {\n \n     @Test\n     public void testPreConfiguredHierarchy() throws Exception {\n-        KernelServices services = super.createKernelServicesBuilder(new TestEnvironment()).setSubsystemXmlResource(\"expression-encryption.xml\").build();\n-        if (!services.isSuccessfulBoot()) {\n-            Assert.fail(services.getBootError().toString());\n+        CredentialStoreUtility csOne = null;\n+        CredentialStoreUtility csTwo = null;\n+        CredentialStoreUtility csThree = null;\n+        try {\n+            csOne = createCredentialStoreOne();\n+            csTwo = createCredentialStoreTwo();\n+            csThree = createCredentialStoreThree();\n+\n+            KernelServices services = super.createKernelServicesBuilder(new TestEnvironment())\n+                    .setSubsystemXmlResource(\"expression-encryption.xml\").build();\n+            if (!services.isSuccessfulBoot()) {\n+                Assert.fail(services.getBootError().toString());\n+            }\n+\n+            testExpectedAliases(services, \"secret-key-credential-store\", \"CredentialStoreThree\", \"testkey\", \"key\");\n+            testExpectedAliases(services, \"credential-store\", \"CredentialStoreTwo\", \"csone\");\n+            testExpectedAliases(services, \"credential-store\", \"CredentialStoreOne\", \"ksone\", \"securekey\");\n+            // No aliases in the key stores but we want them to be up to be queried.\n+            testExpectedAliases(services, \"key-store\", \"KeyStoreOne\");\n+            testExpectedAliases(services, \"key-store\", \"KeyStoreTwo\");\n+        } finally {\n+            cleanUp(csOne);\n+            cleanUp(csTwo);\n+            cleanUp(csThree);\n+        }\n+    }\n+\n+    private static void cleanUp(CredentialStoreUtility csUtil) {\n+        if (csUtil != null) {\n+            csUtil.cleanUp();\n         }\n+    }\n+\n+    private static CredentialStoreUtility createCredentialStoreOne() throws GeneralSecurityException {\n+        CredentialStoreUtility csOne = new CredentialStoreUtility(\"target/credential-store-one.cs\", \"CSOnePassword\");\n+        csOne.addEntry(\"ksone\", \"KSOnePassword\");\n+        csOne.addEntry(\"securekey\", SecretKeyUtil.importSecretKey(CSONE_SECURE_KEY));\n+        return csOne;\n+    }\n+\n+    private static CredentialStoreUtility createCredentialStoreTwo() throws GeneralSecurityException {\n+        CredentialStoreUtility csTwo = new CredentialStoreUtility(\"target/credential-store-two.cs\", \"CSTwoPassword\");\n+        csTwo.addEntry(\"csone\", \"CSOnePassword\");\n+        return csTwo;\n+    }\n \n-        testExpectedAliases(services, \"secret-key-credential-store\", \"CredentialStoreThree\", \"testkey\", \"key\");\n-        testExpectedAliases(services, \"credential-store\", \"CredentialStoreTwo\", \"csone\");\n-        testExpectedAliases(services, \"credential-store\", \"CredentialStoreOne\", \"ksone\", \"securekey\");\n-        // No aliases in the key stores but we want them to be up to be queried.\n-        testExpectedAliases(services, \"key-store\", \"KeyStoreOne\");\n-        testExpectedAliases(services, \"key-store\", \"KeyStoreTwo\");\n+    private static CredentialStoreUtility createCredentialStoreThree() throws GeneralSecurityException {\n+        CredentialStoreUtility csTwo = new CredentialStoreUtility(\"target/credential-store-three.cs\", true);\n+        csTwo.addEntry(\"testkey\", SecretKeyUtil.importSecretKey(CSTHREE_TEST_KEY));\n+        return csTwo;\n     }\n \n     private void testExpectedAliases(KernelServices services, String resourceType, String resourceName,"
  },
  {
    "sha": "170d6fea0ff6e212d1a14819e1fed090482b2811",
    "filename": "elytron/src/test/resources/org/wildfly/extension/elytron/expression-encryption.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/e7378d38347b713cd812a8787c273ee36a5e407e/elytron/src/test/resources/org/wildfly/extension/elytron/expression-encryption.xml",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/e7378d38347b713cd812a8787c273ee36a5e407e/elytron/src/test/resources/org/wildfly/extension/elytron/expression-encryption.xml",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/resources/org/wildfly/extension/elytron/expression-encryption.xml?ref=e7378d38347b713cd812a8787c273ee36a5e407e",
    "patch": "@@ -15,14 +15,14 @@\n         </key-stores>\n     </tls>\n     <credential-stores>\n-        <credential-store name=\"CredentialStoreOne\" location=\"target/test-classes/org/wildfly/extension/elytron/expression-resolution/credential-store-one.cs\">\n+        <credential-store name=\"CredentialStoreOne\" location=\"target/credential-store-one.cs\">\n             <credential-reference store=\"CredentialStoreTwo\" alias=\"csone\"/>\n         </credential-store>\n-        <credential-store name=\"CredentialStoreTwo\" location=\"target/test-classes/org/wildfly/extension/elytron/expression-resolution/credential-store-two.cs\">\n+        <credential-store name=\"CredentialStoreTwo\" location=\"target/credential-store-two.cs\">\n             <credential-reference clear-text=\"${ENC::Initial:RUxZAUMQXUj3qP1hbXyO5PpmsbgkepjoscIf3tKXvGiPDXYqNAc=}\"/>\n         </credential-store>\n         <secret-key-credential-store name=\"CredentialStoreThree\" \n-            path=\"target/test-classes/org/wildfly/extension/elytron/expression-resolution/credential-store-three.cs\" \n+            path=\"target/credential-store-three.cs\" \n             create=\"false\" />\n     </credential-stores>\n     <expression-resolver default-resolver=\"Default\">"
  },
  {
    "sha": "50c2bd72713e55799f8173f48aee3ec9505736e4",
    "filename": "elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/Readme.txt",
    "status": "removed",
    "additions": 0,
    "deletions": 42,
    "changes": 42,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/Readme.txt",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/Readme.txt",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/Readme.txt?ref=fa27a9c4b35788cfc6c022f12abfb2f9694378f4",
    "patch": "@@ -1,42 +0,0 @@\n-# A set of credential stores for use by the ExpressionResolutionTestCase.\n-#\n-# The stores were initialised using the following commands.\n-\n-# credential-store-three.cs - No Password\n-\n-java -jar wildfly-elytron-tool.jar credential-store --generate-secret-key testkey \\\n-  --create --type PropertiesCredentialStore --location credential-store-three.cs\n-\n-# credential-store-two.cs - Password = CSTwoPassword\n-# Set secret to CSOnePassword\n-\n-java -jar wildfly-elytron-tool.jar credential-store --add csone \\\n-  --create --location credential-store-two.cs\n-\n-# credential-store-one.cs - Password = CSOnePassword\n-# Set secret to KSOnePassword\n-\n-java -jar wildfly-elytron-tool.jar credential-store --add ksone \\\n-  --create --location credential-store-one.cs\n-java -jar wildfly-elytron-tool.jar credential-store --generate-secret-key securekey \\\n-   --location credential-store-one.cs\n-\n-# Two passwords used in the configuration can be encrypted using the two generated secret keys.\n-\n-# Password = CSTwoPassword, using 'testkey' in credential-store-three.cs\n-\n-java -jar wildfly-elytron-tool.jar credential-store --encrypt testkey \\\n-  --type PropertiesCredentialStore --location credential-store-three.cs\n-\n- # RUxZAUMQXUj3qP1hbXyO5PpmsbgkepjoscIf3tKXvGiPDXYqNAc=\n- \n-# Password = KSTwoPassword, using 'securekey' in credential-store-one.cs\n-\n-java -jar wildfly-elytron-tool.jar credential-store --encrypt securekey \\\n-  --location credential-store-one.cs\n-\n- # RUxZAUMQAR0sjDUg2IrglcxXWT9MLa+HPmfopnnwkzbgsepmXd8=\n- \n-# NOTE: We don't need commands to create the key stores used by the test as the subsystem\n-#       configuration dynamically creates them.\n- \n\\ No newline at end of file"
  },
  {
    "sha": "dc3caffa8c2e6ba904d39bfc4d804fd8cb95764c",
    "filename": "elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-one.cs",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-one.cs",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-one.cs",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-one.cs?ref=fa27a9c4b35788cfc6c022f12abfb2f9694378f4"
  },
  {
    "sha": "0a3d58cf9dbe789827bc07eb2621eb9181809ea9",
    "filename": "elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-three.cs",
    "status": "removed",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-three.cs",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-three.cs",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-three.cs?ref=fa27a9c4b35788cfc6c022f12abfb2f9694378f4",
    "patch": "@@ -1,2 +0,0 @@\n-# Properties Credential Store (Do Not Modify)\n-testkey=RUxZAUv5+IwidHJCNNG/cEe2GmWvieV3Ecg7M4xZaJiSULKlBQ=="
  },
  {
    "sha": "c032a96b55e0af2387e011ef33ef5ff95ea929a1",
    "filename": "elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-two.cs",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/wildfly/wildfly-core/blob/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-two.cs",
    "raw_url": "https://github.com/wildfly/wildfly-core/raw/fa27a9c4b35788cfc6c022f12abfb2f9694378f4/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-two.cs",
    "contents_url": "https://api.github.com/repos/wildfly/wildfly-core/contents/elytron/src/test/resources/org/wildfly/extension/elytron/expression-resolution/credential-store-two.cs?ref=fa27a9c4b35788cfc6c022f12abfb2f9694378f4"
  }
]
