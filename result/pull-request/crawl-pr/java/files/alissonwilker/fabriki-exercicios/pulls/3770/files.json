[
  {
    "sha": "6a1e8252562cad5d11eca36ecddcb00165143340",
    "filename": ".travis.yml",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/.travis.yml",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/.travis.yml",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/.travis.yml?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,18 @@\n+language: java\n+install: true\n+env:\n+- MOZ_HEADLESS=1\n+addons:\n+firefox: latest\n+script:\n+- export TESTES_SUCESSO=0\n+- export TOTAL_TESTES=0\n+- export RESULTADO_TESTES=0\n+- source ./resources/scripts/validador.sh executarTestesUnitarios \n+cache:\n+  directories:\n+  - $HOME/.m2\n+after_success:\n+- curl -k -X GET \"http://www.fabriki.org/ResultadoValidacao?totalTestes=$TOTAL_TESTES&testesSucesso=$TESTES_SUCESSO&resultadoTestes=$RESULTADO_TESTES&resultadoValidacao=$TRAVIS_TEST_RESULT&pullRequestNumber=$TRAVIS_PULL_REQUEST&pullRequestOriginBranch=$TRAVIS_PULL_REQUEST_BRANCH&travisBuildId=$TRAVIS_BUILD_ID\"\n+after_failure:\n+- curl -k -X GET \"http://www.fabriki.org/ResultadoValidacao?totalTestes=$TOTAL_TESTES&testesSucesso=$TESTES_SUCESSO&resultadoTestes=$RESULTADO_TESTES&resultadoValidacao=$TRAVIS_TEST_RESULT&pullRequestNumber=$TRAVIS_PULL_REQUEST&pullRequestOriginBranch=$TRAVIS_PULL_REQUEST_BRANCH&travisBuildId=$TRAVIS_BUILD_ID\""
  },
  {
    "sha": "4be6f17b0b36180e77dade9ba7e9c2932926474b",
    "filename": "src/main/java/spring/Cliente.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/Cliente.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/Cliente.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/Cliente.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,80 @@\n+package spring;\n+\n+import javax.persistence.Column;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * Classe abstrata que representa um cliente.\n+ *\n+ */\n+@MappedSuperclass\n+public abstract class Cliente {\n+    /**\n+     * O ID unico do cliente.\n+     */\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Integer id;\n+\n+    /**\n+     * O nome do cliente.\n+     */\n+    @Column\n+    private String nome; \n+\n+    /**\n+     * Construtor padrao.\n+     */\n+    protected Cliente() {}\n+\n+    /**\n+     * Construtor que recebe o nome do cliente.\n+     * \n+     * @param nome\n+     *            o nome do cliente.\n+     */\n+    protected Cliente(String nome) {\n+        this.nome = nome;\n+    }\n+\n+    /**\n+     * Recupera o nome do cliente.\n+     * \n+     * @return o nome do cliente.\n+     */\n+    public String getNome() {\n+        return nome;\n+    }\n+\n+    /**\n+     * Altera o nome do cliente.\n+     * \n+     * @param nome o novo nome do cliente.\n+     */\n+    public void setNome(String nome) {\n+        this.nome = nome;\n+    }\n+\n+    /**\n+     * Recupera o id do cliente.\n+     * \n+     * @return o id do cliente.\n+     */\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Altera o ID do cliente.\n+     * \n+     * @param id o novo ID do cliente.\n+     */\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "c9592bf2f34dc7e8e0aa7e104ba8917b9241feaf",
    "filename": "src/main/java/spring/ContaBancaria.java",
    "status": "added",
    "additions": 120,
    "deletions": 0,
    "changes": 120,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/ContaBancaria.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/ContaBancaria.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/ContaBancaria.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,120 @@\n+package spring;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+/**\n+ * Classe que representa uma conta bancaria.\n+ *\n+ */\n+@Entity\n+@Table(name = \"tb_contabancaria\")\n+public class ContaBancaria {\n+\n+    /**\n+     * Identificador da conta. Representa o numero da instancia de ContaBancaria.\n+     */\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    /**\n+     * Saldo da conta bancaria.\n+     */\n+    private int saldo = 0;\n+\n+    /**\n+     * O cliente dono da conta bancaria.\n+     */\n+    @ManyToOne\n+    @JoinColumn(name = \"pessoaFisica\")\n+    private PessoaFisica pessoaFisica;\n+\n+    /**\n+     * Construtor padrao.\n+     */\n+    public ContaBancaria() {}\n+\n+    /**\n+     * Construtor que recebe o cliente dono da nova conta bancaria. Tambem configura o id da conta de\n+     * acordo com o contador de instancias, que eh incrementado por este construtor.\n+     * \n+     * @param pessoaFisica\n+     *            a pessoa fisica dona da conta bancaria.\n+     */\n+    public ContaBancaria(PessoaFisica pessoaFisica) {\n+        this.pessoaFisica = pessoaFisica;\n+    }\n+\n+    /**\n+     * Recupera o identificador da conta.\n+     * \n+     * @return o id da conta.\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Recupera o cliente dono da conta bancaria.\n+     * \n+     * @return o cliente dono da conta bancaria.\n+     */\n+    public PessoaFisica getPessoaFisica() {\n+        return this.pessoaFisica;\n+    }\n+\n+    /**\n+     * Altera a pessoa fisica da conta bancaria.\n+     * \n+     * @param pessoaFisica a nova pessoa fisica dona da conta bancaria.\n+     */\n+    public void setPessoaFisica(PessoaFisica pessoaFisica) {\n+        this.pessoaFisica = pessoaFisica;\n+    }\n+\n+    /**\n+     * Recupera o saldo da conta bancaria.\n+     * \n+     * @return o saldo da conta bancaria.\n+     */\n+    public int getSaldo() {\n+        return saldo;\n+    }\n+\n+    /**\n+     * Deposita um valor na conta bancaria, desde que esse valor seja positivo.\n+     * \n+     * @param valor\n+     *            o valor a ser depositado na conta bancaria. O valor a ser depositado deve ser\n+     *            positivo.\n+     * @return o novo saldo da conta bancaria, apÃ³s o deposito.\n+     */\n+    public int depositar(int valor) {\n+        if (valor > 0) {\n+            saldo = saldo + valor;\n+        }\n+        return saldo;\n+    }\n+\n+    /**\n+     * Saca um valor da conta bancaria, se esse valor for positivo e menor ou igual ao saldo.\n+     * \n+     * @param valor\n+     *            o valor a ser sacado da conta bancaria. O valor a ser sacado deve ser positivo e menor\n+     *            ou igual ao saldo da conta bancaria.\n+     * @return o novo saldo da conta bancaria, apos o saque.\n+     */\n+    public int sacar(int valor) {\n+        if (valor > 0 && valor <= saldo) {\n+            saldo = saldo - valor;\n+        }\n+        return saldo;\n+    }\n+\n+}"
  },
  {
    "sha": "0cbb139ad9b8f12cce5a30e243fa247d3a8f7f4b",
    "filename": "src/main/java/spring/ContaBancariaRepository.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/ContaBancariaRepository.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/ContaBancariaRepository.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/ContaBancariaRepository.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,10 @@\n+package spring;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+/**\n+ * Repositorio de entidades <code>ContaBancaria</code>.\n+ */\n+public interface ContaBancariaRepository extends JpaRepository<ContaBancaria, Integer> {\n+\n+}"
  },
  {
    "sha": "109381949586f9dabcec456b28370e1f8d5f4c48",
    "filename": "src/main/java/spring/ContaBancariaRestController.java",
    "status": "added",
    "additions": 103,
    "deletions": 0,
    "changes": 103,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/ContaBancariaRestController.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/ContaBancariaRestController.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/ContaBancariaRestController.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,103 @@\n+package spring;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.CrossOrigin;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Controller REST de entidades <code>ContaBancaria</code>.\n+ */\n+@RestController\n+@RequestMapping(\"contasBancarias\")\n+@CrossOrigin\n+public class ContaBancariaRestController {\n+    /**\n+     * Referencia para o repositorio de entidades <code>ContaBancaria</code>.\n+     * \n+     */\n+    @Autowired\n+    private ContaBancariaRepository cbRepository;\n+\n+    /**\n+     * Recupera a lista completa de contas bancarias.\n+     * \n+     * @return a lista de todas as contas bancarias.\n+     */\n+    @GetMapping(value = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody List<ContaBancaria> getContasBancarias() {\n+        return cbRepository.findAll();\n+    }\n+\n+    /**\n+     * Recupera uma conta bancaria pelo ID.\n+     * \n+     * @param id o ID da pconta bancaria a ser recuperada.\n+     * @return a conta bancaria recuperada ou null, se nao existir.\n+     */\n+    @GetMapping(value = \"/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody Optional<ContaBancaria> getContaBancaria(@PathVariable Integer id) {\n+        return cbRepository.findById(id);\n+    }\n+\n+    /**\n+     * Adiciona uma conta bancaria no repositorio.\n+     * \n+     * @param contaBancaria a conta bancaria a ser adicionada.\n+     * \n+     * @return a conta bancaria adicionada.\n+     */\n+    @PostMapping(path = \"/\", consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody ContaBancaria addContaBancaria(@RequestBody ContaBancaria contaBancaria) {\n+        return persistirContaBancaria(contaBancaria);\n+    }\n+\n+    /**\n+     * Altera uma conta bancaria identificada pelo ID.\n+     * \n+     * @param id            o ID da conta bancaria a ser alterada.\n+     * @param contaBancaria a conta bancaria ser alterada.\n+     * \n+     * @return a conta bancaria alterada.\n+     * \n+     */\n+    @PutMapping(path = \"/{id}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody ContaBancaria updateContaBancaria(@PathVariable String id,\n+            @RequestBody ContaBancaria contaBancaria) {\n+        return persistirContaBancaria(contaBancaria);\n+    }\n+\n+    /**\n+     * Persiste uma alteracao em uma conta bancaria existente ou persiste uma nova\n+     * conta bancaria.\n+     * \n+     * @param contaBancaria a conta bancaria a ser alterada ou criada.\n+     * \n+     * @return a conta bancaria alterada.\n+     */\n+    private ContaBancaria persistirContaBancaria(ContaBancaria contaBancaria) {\n+        return cbRepository.save(contaBancaria);\n+    }\n+\n+    /**\n+     * Remove uma conta bancaria identificada pelo ID.\n+     * \n+     * @param id o ID da conta bancaria a ser removida.\n+     */\n+    @DeleteMapping(value = \"/{id}\")\n+    public void deleteContaBancaria(@PathVariable Integer id) {\n+        cbRepository.deleteById(id);\n+    }\n+\n+}"
  },
  {
    "sha": "e3c36f3fe22cae2b83abf9ea1bb4b4f655f4cf76",
    "filename": "src/main/java/spring/JavaWebDevApplication.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/JavaWebDevApplication.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/JavaWebDevApplication.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/JavaWebDevApplication.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,16 @@\n+package spring;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+/**\n+ * Classe que inicia a aplicacao (main).\n+ */\n+@SpringBootApplication\n+public class JavaWebDevApplication {\n+\n+\tpublic static void main(String[] args) {\n+\t\tSpringApplication.run(JavaWebDevApplication.class, args);\n+\t}\n+\n+}"
  },
  {
    "sha": "c13acd25def85a7eb80bf758b60dfe303470740e",
    "filename": "src/main/java/spring/PessoaFisica.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/PessoaFisica.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/PessoaFisica.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/PessoaFisica.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,32 @@\n+package spring;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"pessoaFisica\")\n+public class PessoaFisica extends Cliente {\n+\t\n+\n+    @Column(nullable = false)\n+    private String cpf;\n+\n+\n+\tpublic PessoaFisica(String cpf, String nome) {\n+\t\tsuper(nome);\n+\t\tthis.cpf = cpf;\n+\t}\n+\n+\tpublic String getCpf() {\n+\t\treturn cpf;\n+\t}\n+\n+\tpublic void setCpf(String cpf) {\n+\t\tthis.cpf = cpf;\n+\t}\n+\n+}"
  },
  {
    "sha": "a224fe2cf000f278498d5a0d2c7be87c01715ea8",
    "filename": "src/main/java/spring/PessoaFisicaRepository.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/PessoaFisicaRepository.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/PessoaFisicaRepository.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/PessoaFisicaRepository.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,7 @@\n+package spring;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface PessoaFisicaRepository extends JpaRepository<PessoaFisica, Integer> { }"
  },
  {
    "sha": "5eea36c536a8cbbea73f6de2d12e7c08ffebc6aa",
    "filename": "src/main/java/spring/PessoaFisicaRestController.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/PessoaFisicaRestController.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/main/java/spring/PessoaFisicaRestController.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/main/java/spring/PessoaFisicaRestController.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,57 @@\n+package spring;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.CrossOrigin;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+@RestController\n+@RequestMapping(\"pessoasFisicas\")\n+@CrossOrigin\n+public class PessoaFisicaRestController {\n+    @Autowired\n+    private PessoaFisicaRepository pfRepository;\n+\n+    @GetMapping(value = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody List<PessoaFisica> list() {\n+        return pfRepository.findAll();\n+    }\n+\n+    @GetMapping(value = \"/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody Optional<PessoaFisica> getPessoaFisica(@PathVariable Integer id) {\n+        return pfRepository.findById(id);\n+    }\n+\n+    @PostMapping(path = \"/\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody PessoaFisica addPessoaFisica(@RequestBody PessoaFisica pessoaFisica) {\n+        return persistirPessoaFisica(pessoaFisica);\n+    }\n+\n+    @PutMapping(path = \"/{id}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody PessoaFisica updatePessoaFisica(@PathVariable Integer id,\n+           @RequestBody PessoaFisica pessoaFisica) {\n+        return persistirPessoaFisica(pessoaFisica);\n+    }\n+\n+    private PessoaFisica persistirPessoaFisica(PessoaFisica pessoaFisica) {\n+        return pfRepository.save(pessoaFisica);\n+    }\n+\n+    @DeleteMapping(value = \"/{id}\")\n+    public void deletePessoaFisica(@PathVariable Integer id) {\n+        pfRepository.deleteById(id);\n+    }\n+\n+}"
  },
  {
    "sha": "52ebe0bbbc66dd93ae6ec00d4ad12836b108d8f5",
    "filename": "src/test/java/spring/ContaBancariaRestControllerTest.java",
    "status": "added",
    "additions": 154,
    "deletions": 0,
    "changes": 154,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/test/java/spring/ContaBancariaRestControllerTest.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/test/java/spring/ContaBancariaRestControllerTest.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/test/java/spring/ContaBancariaRestControllerTest.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,154 @@\n+package spring;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+/**\n+ * Classe de teste para o controller REST de <code>ContaBancaria</code>.\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = spring.JavaWebDevApplication.class)\n+@AutoConfigureMockMvc\n+@AutoConfigureTestDatabase\n+public class ContaBancariaRestControllerTest {\n+\t/**\n+\t * Mock do Spring.\n+\t */\n+\t@Autowired\n+\tprivate MockMvc mvc;\n+\n+\t/**\n+\t * Referencia para o repositorio de pessoas fisicas.\n+\t */\n+\t@Autowired\n+\tprivate PessoaFisicaRepository pfRepository;\n+\n+\t/**\n+\t * Referencia para o repositorio de contas bancarias.\n+\t */\n+\t@Autowired\n+\tprivate ContaBancariaRepository cbRepository;\n+\n+\t/**\n+\t * Limpa os respositorios.\n+\t */\n+\t@Before\n+\tpublic void resetDb() {\n+\t\tcbRepository.deleteAll();\n+\t\tpfRepository.deleteAll();\n+\t}\n+\n+\t/**\n+\t * Testa a adicao de conta bancaria.\n+\t */\n+\t@Test\n+\tpublic void testAddContaBancaria() throws IOException, Exception {\n+\t\tPessoaFisica alisson = createTestPessoaFisica(\"Alisson\", \"053\");\n+\t\tContaBancaria contaBancaria = new ContaBancaria(alisson);\n+\t\tmvc.perform(post(\"/contasBancarias/\").contentType(MediaType.APPLICATION_JSON)\n+\t\t\t\t.content(JsonUtil.toJson(contaBancaria)));\n+\n+\t\tList<ContaBancaria> contasBancarias = cbRepository.findAll();\n+\t\tassertEquals(1, contasBancarias.size());\n+\t\tassertEquals(\"Alisson\", contasBancarias.get(0).getPessoaFisica().getNome());\n+\t}\n+\n+\t/**\n+\t * Testa a alteracao de conta bancaria.\n+\t */\n+\t@Test\n+\tpublic void testUpdateContaBancaria() throws IOException, Exception {\n+\t\tContaBancaria contaBancaria = createTestContaBancaria(\"Alisson\", \"053\");\n+\t\tPessoaFisica alice = createTestPessoaFisica(\"Alice\", \"099\");\n+\t\tcontaBancaria.setPessoaFisica(alice);\n+\n+\t\tmvc.perform(put(\"/contasBancarias/{id}\", contaBancaria.getId()).contentType(MediaType.APPLICATION_JSON)\n+\t\t\t\t.content(JsonUtil.toJson(contaBancaria)));\n+\n+\t\tList<ContaBancaria> contasBancarias = cbRepository.findAll();\n+\t\tassertEquals(1, contasBancarias.size());\n+\t\tassertEquals(\"Alice\", contasBancarias.get(0).getPessoaFisica().getNome());\n+\t}\n+\n+\t/**\n+\t * Testa a remocao de conta bancaria.\n+\t */\n+\t@Test\n+\tpublic void testDeleteContaBancaria() throws IOException, Exception {\n+\t\tContaBancaria contaBancaria = createTestContaBancaria(\"Alisson\", \"053\");\n+\n+\t\tmvc.perform(delete(\"/contasBancarias/{id}\", contaBancaria.getId()));\n+\n+\t\tList<ContaBancaria> found = cbRepository.findAll();\n+\t\tassertEquals(0, found.size());\n+\t}\n+\n+\t/**\n+\t * Testa recuperar todas as contas bancarias.\n+\t * \n+\t * @throws Exception se ocorrer algum erro.\n+\t */\n+\t@Test\n+\tpublic void testGetContasBancarias() throws Exception {\n+\t\tcreateTestContaBancaria(\"Alisson\", \"053\");\n+\t\tcreateTestContaBancaria(\"Alice\", \"099\");\n+\n+\t\tmvc.perform(get(\"/contasBancarias/\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk())\n+\t\t\t\t.andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n+\t\t\t\t.andExpect(jsonPath(\"$[0].pessoaFisica.nome\", is(\"Alisson\")))\n+\t\t\t\t.andExpect(jsonPath(\"$[1].pessoaFisica.nome\", is(\"Alice\")));\n+\t}\n+\n+\t/**\n+\t * Testa recuperar uma conta bancaria.\n+\t * \n+\t * @throws Exception se ocorrer algum erro.\n+\t */\n+\t@Test\n+\tpublic void testGetContaBancaria() throws Exception {\n+\t\tContaBancaria contaBancaria = createTestContaBancaria(\"Alisson\", \"053\");\n+\n+\t\tmvc.perform(get(\"/contasBancarias/{id}\", contaBancaria.getId()).contentType(MediaType.APPLICATION_JSON))\n+\t\t\t\t.andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n+\t\t\t\t.andExpect(jsonPath(\"$.pessoaFisica.nome\", is(\"Alisson\")));\n+\n+\t}\n+\n+\t/**\n+\t * Cria uma conta bancaria de teste.\n+\t */\n+\tprivate ContaBancaria createTestContaBancaria(String nome, String cpf) {\n+\t\tContaBancaria pf = new ContaBancaria(createTestPessoaFisica(nome, cpf));\n+\t\treturn cbRepository.saveAndFlush(pf);\n+\t}\n+\n+\t/**\n+\t * Cria uma pessoa fisica de teste.\n+\t */\n+\tprivate PessoaFisica createTestPessoaFisica(String nome, String cpf) {\n+\t\tPessoaFisica pf = new PessoaFisica(nome, cpf);\n+\t\treturn pfRepository.saveAndFlush(pf);\n+\t}\n+\n+}"
  },
  {
    "sha": "e309a41c77d500410b19366e0d13fa8a0bc3d8d9",
    "filename": "src/test/java/spring/JsonUtil.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/test/java/spring/JsonUtil.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/test/java/spring/JsonUtil.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/test/java/spring/JsonUtil.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,23 @@\n+package spring;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Classe utilitaria para conversao de JSON.\n+ */\n+public class JsonUtil {\n+\t/**\n+\t * Converte um objeto em um array de bytes que representa o objeto em JSON.\n+\t * \n+\t * @param object o objeto a ser convertido em array de bytes.\n+\t * @return um array de bytes representando o objeto em formato JSON.\n+\t * @throws IOException se ocorrer um erro na conversao.\n+\t */\n+\tstatic byte[] toJson(Object object) throws IOException {\n+\t\tObjectMapper mapper = new ObjectMapper();\n+\t\tmapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL);\n+\t\treturn mapper.writeValueAsBytes(object);\n+\t}\n+}"
  },
  {
    "sha": "8eb2c989379db51aa3a3d632c64db07ccd2fc742",
    "filename": "src/test/java/spring/PessoaFisicaRestControllerTest.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/alissonwilker/fabriki-exercicios/blob/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/test/java/spring/PessoaFisicaRestControllerTest.java",
    "raw_url": "https://github.com/alissonwilker/fabriki-exercicios/raw/8ea5c730c89c816b9c168465ad5ed162f2ecc1a0/src/test/java/spring/PessoaFisicaRestControllerTest.java",
    "contents_url": "https://api.github.com/repos/alissonwilker/fabriki-exercicios/contents/src/test/java/spring/PessoaFisicaRestControllerTest.java?ref=8ea5c730c89c816b9c168465ad5ed162f2ecc1a0",
    "patch": "@@ -0,0 +1,141 @@\n+package spring;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+/**\n+ * Classe de teste para o controller REST de <code>PessoaFisica</code>.\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = spring.JavaWebDevApplication.class)\n+@AutoConfigureMockMvc\n+@AutoConfigureTestDatabase\n+public class PessoaFisicaRestControllerTest {\n+\t/**\n+\t * Mock do Spring.\n+\t */\n+\t@Autowired\n+\tprivate MockMvc mvc;\n+\n+\t/**\n+\t * Referencia para o repositorio de pessoas fisicas.\n+\t */\n+\t@Autowired\n+\tprivate PessoaFisicaRepository pfRepository;\n+\n+\t/**\n+\t * Referencia para o repositorio de contas bancarias.\n+\t */\n+\t@Autowired\n+\tprivate ContaBancariaRepository cbRepository;\n+\n+\t/**\n+\t * Limpa os respositorios.\n+\t */\n+\t@Before\n+\tpublic void resetDb() {\n+\t\tcbRepository.deleteAll();\n+\t\tpfRepository.deleteAll();\n+\t}\n+\n+\t/**\n+\t * Testa a adicao de pessoa fisica.\n+\t */\n+\t@Test\n+\tpublic void testAddPessoaFisica() throws IOException, Exception {\n+\t\tPessoaFisica alisson = new PessoaFisica(\"Alisson\", \"053\");\n+\t\tmvc.perform(post(\"/pessoasFisicas/\").contentType(MediaType.APPLICATION_JSON).content(JsonUtil.toJson(alisson)));\n+\n+\t\tList<PessoaFisica> found = pfRepository.findAll();\n+\t\tassertThat(found).extracting(PessoaFisica::getNome).containsOnly(\"Alisson\");\n+\t}\n+\n+\t/**\n+\t * Testa a alteracao de pessoa fisica.\n+\t */\n+\t@Test\n+\tpublic void testUpdatePessoaFisica() throws IOException, Exception {\n+\t\tPessoaFisica alisson = createTestPessoaFisica(\"Alisson\", \"053\");\n+\t\talisson.setNome(\"Alisson Wilker\");\n+\n+\t\tmvc.perform(put(\"/pessoasFisicas/{id}\", alisson.getId()).contentType(MediaType.APPLICATION_JSON)\n+\t\t\t\t.content(JsonUtil.toJson(alisson)));\n+\n+\t\tList<PessoaFisica> found = pfRepository.findAll();\n+\t\tassertThat(found).extracting(PessoaFisica::getNome).containsOnly(\"Alisson Wilker\");\n+\t}\n+\n+\t/**\n+\t * Testa a remocao de pessoa fisica.\n+\t */\n+\t@Test\n+\tpublic void testDeletePessoaFisica() throws IOException, Exception {\n+\t\tPessoaFisica alisson = createTestPessoaFisica(\"Alisson\", \"053\");\n+\n+\t\tmvc.perform(delete(\"/pessoasFisicas/{id}\", alisson.getId()));\n+\n+\t\tList<PessoaFisica> found = pfRepository.findAll();\n+\t\tassertEquals(0, found.size());\n+\t}\n+\n+\t/**\n+\t * Testa recuperar todas as pessoas fisicas.\n+\t * \n+\t * @throws Exception se ocorrer algum erro.\n+\t */\n+\t@Test\n+\tpublic void testGetPessoasFisicas() throws Exception {\n+\t\tcreateTestPessoaFisica(\"Alisson\", \"053\");\n+\t\tcreateTestPessoaFisica(\"Alice\", \"099\");\n+\n+\t\tmvc.perform(get(\"/pessoasFisicas/\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk())\n+\t\t\t\t.andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n+\t\t\t\t.andExpect(jsonPath(\"$[0].nome\", is(\"Alisson\"))).andExpect(jsonPath(\"$[1].nome\", is(\"Alice\")));\n+\t}\n+\n+\t/**\n+\t * Testa recuperar uma pessoa fisica.\n+\t * \n+\t * @throws Exception se ocorrer algum erro.\n+\t */\n+\t@Test\n+\tpublic void testGetPessoaFisica() throws Exception {\n+\t\tPessoaFisica alisson = createTestPessoaFisica(\"Alisson\", \"053\");\n+\n+\t\tmvc.perform(get(\"/pessoasFisicas/{id}\", alisson.getId()).contentType(MediaType.APPLICATION_JSON))\n+\t\t\t\t.andExpect(status().isOk()).andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n+\t\t\t\t.andExpect(jsonPath(\"$.nome\", is(\"Alisson\")));\n+\n+\t}\n+\n+\t/**\n+\t * Cria uma pessoa fisica de teste.\n+\t */\n+\tprivate PessoaFisica createTestPessoaFisica(String nome, String cpf) {\n+\t\tPessoaFisica pf = new PessoaFisica(nome, cpf);\n+\t\treturn pfRepository.saveAndFlush(pf);\n+\t}\n+\n+}"
  }
]
