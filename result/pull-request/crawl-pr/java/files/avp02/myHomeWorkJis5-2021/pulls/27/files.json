[
  {
    "sha": "3fe75b95cfacec60157909e24a5583f7290abbf3",
    "filename": "src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/bean/Book.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/bean/Book.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/bean/Book.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/bean/Book.java?ref=f28f18fe0432fe492176940b1f3d1fbc1df5913b",
    "patch": "@@ -0,0 +1,77 @@\n+package com.avp.homework6_exceptions.task2_simpleDataBase.bean;\n+/*\n+Разработайте универсальный интерфейс Repository<T>, который будет представлять следующий набор методов:\n+\n+List<T> findAll();\n+T findById(String id) throws ItemNotFoundException;\n+save(T item);\n+delete(String id) throws ItemNotFoundException;\n+Разработайте класс Book, который будет содержать в себе следующие поля:\n+String id\n+String name\n+String author\n+int pagesCount\n+Обязательные методы для переопределения: equals(), hashCode() и toString().\n+Getter методы для всех полей обязательны.\n+Инициализация полей через конструктор или setter методы на выбор.\n+Разработайте класс BookRepository,\n+который реализует интерфейс Repository для типа Book на основе коллекции Map<String, T>, где T - класс Book.\n+В случае, если книга с переданным идентификатором не найдена,\n+методы findById() и delete() должны выбросить исключение ItemNotFoundException с идентификатором объекта.\n+ */\n+\n+import java.util.Objects;\n+\n+public class Book {\n+\n+    private String id;\n+    private String name;\n+    private String author;\n+    private int pagesCount;\n+\n+    public Book(String id, String name, String author, int pagesCount) {\n+        this.id = id;\n+        this.name = name;\n+        this.author = author;\n+        this.pagesCount = pagesCount;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getAuthor() {\n+        return author;\n+    }\n+\n+    public int getPagesCount() {\n+        return pagesCount;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Book book = (Book) o;\n+        return pagesCount == book.pagesCount && Objects.equals(id, book.id) && Objects.equals(name, book.name) && Objects.equals(author, book.author);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, name, author, pagesCount);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Book{\" +\n+                \"id='\" + id + '\\'' +\n+                \", name='\" + name + '\\'' +\n+                \", author='\" + author + '\\'' +\n+                \", pagesCount=\" + pagesCount +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "da2823f87ec16b85b2c3f91f5fc7da649e7c6bc9",
    "filename": "src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/exceptions/ItemNotFoundException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/exceptions/ItemNotFoundException.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/exceptions/ItemNotFoundException.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/exceptions/ItemNotFoundException.java?ref=f28f18fe0432fe492176940b1f3d1fbc1df5913b",
    "patch": "@@ -0,0 +1,7 @@\n+package com.avp.homework6_exceptions.task2_simpleDataBase.exceptions;\n+\n+public class ItemNotFoundException extends RuntimeException {\n+    public ItemNotFoundException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "7eb754ce42fd938c148f38d2d350340e5f5f2c90",
    "filename": "src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepository.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepository.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepository.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepository.java?ref=f28f18fe0432fe492176940b1f3d1fbc1df5913b",
    "patch": "@@ -0,0 +1,48 @@\n+package com.avp.homework6_exceptions.task2_simpleDataBase.service;\n+\n+import com.avp.homework6_exceptions.task2_simpleDataBase.bean.Book;\n+import com.avp.homework6_exceptions.task2_simpleDataBase.exceptions.ItemNotFoundException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class BookRepository implements Repository{\n+\n+    private Map<String, Book> books;\n+\n+    public BookRepository(Map<String, Book> books) {\n+        this.books = books;\n+    }\n+    @Override\n+    public List<Book> findAll() {\n+        return new ArrayList<>(books.values());\n+    }\n+\n+    @Override\n+    public Book findById(String id) throws ItemNotFoundException {\n+        for (Map.Entry<String, Book> entryBook : books.entrySet()) {\n+            if (entryBook.getValue().getId().equals(id)) {\n+                return entryBook.getValue();\n+            }\n+        }\n+        throw new ItemNotFoundException(\"The book didn't find with id \" + id);\n+    }\n+\n+    @Override\n+    public void save(Book item) {\n+        books.put(item.toString(), item);\n+    }\n+\n+    @Override\n+    public void delete(String id) throws ItemNotFoundException {\n+        for (Map.Entry<String, Book> bookEntry : books.entrySet()) {\n+            if (bookEntry.getValue().getId().equals(id)) {\n+                books.remove(bookEntry.getKey(), bookEntry.getValue());\n+                return;\n+            }\n+        }\n+        throw new ItemNotFoundException(\"The book isn't be with id \" + id);\n+    }\n+\n+}"
  },
  {
    "sha": "97efd76d2151e40c21ba6e4f61e9595801bad34b",
    "filename": "src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/Repository.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/Repository.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/Repository.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/main/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/Repository.java?ref=f28f18fe0432fe492176940b1f3d1fbc1df5913b",
    "patch": "@@ -0,0 +1,17 @@\n+package com.avp.homework6_exceptions.task2_simpleDataBase.service;\n+\n+import com.avp.homework6_exceptions.task2_simpleDataBase.bean.Book;\n+import com.avp.homework6_exceptions.task2_simpleDataBase.exceptions.ItemNotFoundException;\n+\n+import java.util.List;\n+\n+public interface Repository {\n+\n+    List<Book> findAll();\n+\n+    Book findById(String id) throws ItemNotFoundException;\n+\n+    void save(Book item);\n+\n+    void delete(String id) throws ItemNotFoundException;\n+}"
  },
  {
    "sha": "596797a564680c73110f0c0f47f960eec4f68d19",
    "filename": "src/test/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepositoryTest.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/test/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepositoryTest.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/f28f18fe0432fe492176940b1f3d1fbc1df5913b/src/test/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/test/java/com/avp/homework6_exceptions/task2_simpleDataBase/service/BookRepositoryTest.java?ref=f28f18fe0432fe492176940b1f3d1fbc1df5913b",
    "patch": "@@ -0,0 +1,92 @@\n+package com.avp.homework6_exceptions.task2_simpleDataBase.service;\n+\n+import com.avp.homework6_exceptions.task2_simpleDataBase.bean.Book;\n+import com.avp.homework6_exceptions.task2_simpleDataBase.exceptions.ItemNotFoundException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class BookRepositoryTest {\n+\n+    private static final Logger log = LoggerFactory.getLogger(BookRepositoryTest.class);\n+\n+    private static final Book bookTest1 = new Book(\"1\", \"bookOne\", \"PushkinOne\", 100);\n+    private static final Book bookTest2 = new Book(\"2\", \"bookTwo\", \"PushkinTwo\", 200);\n+    private static final Book bookTest3 = new Book(\"3\", \"bookThree\", \"PushkinThree\", 300);\n+    private static BookRepository bookRepositoryTest;\n+    private static final Map<String, Book> booksTest = new HashMap<>();\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        bookRepositoryTest = new BookRepository(booksTest);\n+        bookRepositoryTest.save(bookTest1);\n+        bookRepositoryTest.save(bookTest2);\n+        bookRepositoryTest.save(bookTest3);\n+    }\n+\n+    @Test\n+    void findAll() {\n+        List<Book> expected = new ArrayList<>();\n+        expected.add(bookTest1);\n+        expected.add(bookTest2);\n+        expected.add(bookTest3);\n+        List<Book> actual = bookRepositoryTest.findAll();\n+        expected.sort(Comparator.comparing(Book::getId));\n+        actual.sort(Comparator.comparing(Book::getId));\n+        log.info(\"I expected that collection expected {} will be equals {}\",\n+                expected, actual);\n+        assertIterableEquals(expected, actual);\n+\n+    }\n+\n+    @Test\n+    void findById() {\n+        Book expected = bookTest1;\n+        Book actual = bookRepositoryTest.findById(\"1\");\n+        log.info(\"I expected that book expected {} will be equals book {}\",\n+                expected, actual);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void findByIdThrowItemNotFoundException() {\n+        String victimId = \"5\";\n+        assertThrows(ItemNotFoundException.class, () -> bookRepositoryTest.findById(victimId));\n+    }\n+\n+    @Test\n+    void save() {\n+        int expected = 3;\n+        int actual = booksTest.size();\n+        log.info(\"I expected collection's size {} and I got {}\", expected,  actual);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void delete() {\n+        Map<String, Book> test = new HashMap<>();\n+        test.put(bookTest1.toString(), bookTest1);\n+        test.put(bookTest2.toString(), bookTest2);\n+        test.put(bookTest3.toString(), bookTest3);\n+        BookRepository testDelete = new BookRepository(test);\n+        int expected = 2;\n+        String victimId = String.valueOf(3);\n+        Book book = testDelete.findById(victimId);\n+        testDelete.delete(book.getId());\n+        int actual = test.size();\n+        log.info(\"I expected that size collection {} will be equals book {}\", test,\n+                expected);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void deleteThrowItemNotFoundException() {\n+        String victimId = \"4\";\n+        assertThrows(ItemNotFoundException.class, () -> bookRepositoryTest.findById(victimId));\n+    }\n+}\n\\ No newline at end of file"
  }
]
