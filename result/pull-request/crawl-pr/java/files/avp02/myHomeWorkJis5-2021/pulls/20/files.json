[
  {
    "sha": "49b6c6ca47f8ccda0d637dacf04716a4cd833ee7",
    "filename": "src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/bean/User.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/e35f8ac5970656a76f4efebc64c7c88addcb51cf/src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/bean/User.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/e35f8ac5970656a76f4efebc64c7c88addcb51cf/src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/bean/User.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/bean/User.java?ref=e35f8ac5970656a76f4efebc64c7c88addcb51cf",
    "patch": "@@ -0,0 +1,73 @@\n+package com.avp.homework4_conditionOperators.task5_LoginService.bean;\n+\n+import java.util.Objects;\n+\n+public class User {\n+\n+    private String login;\n+    private String password;\n+    private boolean isBlocked;\n+    private int countOfLoginAttempts;\n+\n+    public User(String login, String password) {\n+        this.login = login;\n+        this.password = password;\n+        this.isBlocked = false;\n+        this.countOfLoginAttempts = 3;\n+    }\n+\n+    public String getLogin() {\n+        return login;\n+    }\n+\n+    public void setLogin(String login) {\n+        this.login = login;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public boolean isBlocked() {\n+        return isBlocked;\n+    }\n+\n+    public void setBlocked(boolean blocked) {\n+        isBlocked = blocked;\n+    }\n+\n+    public int getCountOfLoginAttempts() {\n+        return countOfLoginAttempts;\n+    }\n+\n+    public void setCountOfLoginAttempts(int countOfLoginAttempts) {\n+        this.countOfLoginAttempts = countOfLoginAttempts;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        User user = (User) o;\n+        return isBlocked == user.isBlocked && countOfLoginAttempts == user.countOfLoginAttempts && Objects.equals(login, user.login) && Objects.equals(password, user.password);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(login, password, isBlocked, countOfLoginAttempts);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"User{\" +\n+                \"login='\" + login + '\\'' +\n+                \", password='\" + password + '\\'' +\n+                \", isBlocked=\" + isBlocked +\n+                \", countOfLoginAttempts=\" + countOfLoginAttempts +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "a3d3b598f952d1a2deb46fd9ecc431732f9a17e4",
    "filename": "src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginService.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/e35f8ac5970656a76f4efebc64c7c88addcb51cf/src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginService.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/e35f8ac5970656a76f4efebc64c7c88addcb51cf/src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginService.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/main/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginService.java?ref=e35f8ac5970656a76f4efebc64c7c88addcb51cf",
    "patch": "@@ -0,0 +1,49 @@\n+package com.avp.homework4_conditionOperators.task5_LoginService.service;\n+\n+import com.avp.homework4_conditionOperators.task5_LoginService.bean.User;\n+\n+public class UserLoginService {\n+\n+    public boolean login(User user, String password) {\n+        if (comparePasswords(user, password)) {\n+            if (!isUserBlocked(user)) {\n+                resetCountOfLoginAttempts(user);\n+                return true;\n+            }\n+            return false;\n+        } else {\n+            decrementCountOfLoginAttempts(user);\n+            if(!IsLoginAttemptsLeft(user)) {\n+                blockUser(user);\n+            }\n+            return false;\n+        }\n+    }\n+\n+    public boolean comparePasswords(User user, String password) {\n+        return user.getPassword().equals(password);\n+    }\n+\n+    public User blockUser(User user) {\n+        user.setBlocked(true);\n+        return user;\n+    }\n+\n+    public User resetCountOfLoginAttempts(User user){\n+        user.setCountOfLoginAttempts(3);\n+        return user;\n+    }\n+\n+    public boolean isUserBlocked(User user) {\n+        return user.isBlocked();\n+    }\n+\n+    public User decrementCountOfLoginAttempts(User user) {\n+        user.setCountOfLoginAttempts(user.getCountOfLoginAttempts() - 1);\n+        return user;\n+    }\n+\n+    public boolean IsLoginAttemptsLeft(User user) {\n+        return user.getCountOfLoginAttempts() > 0;\n+    }\n+}"
  },
  {
    "sha": "ff59842026359095d43d93842a0a24af743ab389",
    "filename": "src/test/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginServiceTest.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/avp02/myHomeWorkJis5-2021/blob/e35f8ac5970656a76f4efebc64c7c88addcb51cf/src/test/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginServiceTest.java",
    "raw_url": "https://github.com/avp02/myHomeWorkJis5-2021/raw/e35f8ac5970656a76f4efebc64c7c88addcb51cf/src/test/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginServiceTest.java",
    "contents_url": "https://api.github.com/repos/avp02/myHomeWorkJis5-2021/contents/src/test/java/com/avp/homework4_conditionOperators/task5_LoginService/service/UserLoginServiceTest.java?ref=e35f8ac5970656a76f4efebc64c7c88addcb51cf",
    "patch": "@@ -0,0 +1,140 @@\n+package com.avp.homework4_conditionOperators.task5_LoginService.service;\n+\n+import com.avp.homework4_conditionOperators.task5_LoginService.bean.User;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class UserLoginServiceTest {\n+\n+    private static final Logger log = LoggerFactory.getLogger(UserLoginServiceTest.class);\n+    private static UserLoginService testUserLoginService;\n+    private static User testUser;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        testUserLoginService = new UserLoginService();\n+        testUser = new User(\"User\", \"1234\");\n+    }\n+\n+    @Test\n+    void loginTestShouldReturnTrue() {\n+        UserLoginService testUserLoginService = new UserLoginService();\n+        User testUser = new User(\"User\", \"1234\");\n+        boolean actual = testUserLoginService.login(testUser, \"1234\");\n+        boolean expected = true;\n+        log.info(\"Test return {} because password correct\",\n+                testUserLoginService.login(testUser, \"1234\"));\n+        assertEquals(expected, actual);\n+    }\n+    @Test\n+    public void loginTestShouldReturnFalse() {\n+        boolean actual = testUserLoginService.login(testUser, \"12345\");\n+        boolean expected = false;\n+        log.info(\"Test return {} because password invalid\",\n+                testUserLoginService.login(testUser, \"12345\"));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void checkIfPasswordMatchUserPasswordShouldReturnTrue() {\n+        boolean actual = testUserLoginService.comparePasswords(testUser, \"1234\");\n+        boolean expected = true;\n+        log.info(\"Test return {} because password correct\",\n+                testUserLoginService.comparePasswords(testUser, \"1234\"));\n+        assertEquals(expected, actual);\n+    }\n+    @Test\n+    public void checkIfPasswordMatchUserPasswordShouldReturnFalse() {\n+        boolean actual = testUserLoginService.comparePasswords(testUser, \"12345\");\n+        boolean expected = false;\n+        log.info(\"Test return {} because password invalid\",\n+                testUserLoginService.comparePasswords(testUser, \"12345\"));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void dropLoginAttemptsLeft() {\n+        User updatedUser = testUserLoginService.resetCountOfLoginAttempts(testUser);\n+        int expected = 3;\n+        int actual = updatedUser.getCountOfLoginAttempts();\n+        log.info(\"Amount attempts left equals {}\",\n+                updatedUser.getCountOfLoginAttempts());\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void isUserBlockedShouldReturnTrue() {\n+        testUser.setBlocked(true);\n+        boolean expected = true;\n+        boolean actual = testUserLoginService.isUserBlocked(testUser);\n+        log.info(\"Test return {} because user is blocked\",\n+                testUserLoginService.isUserBlocked(testUser));\n+        assertEquals(expected, actual);\n+    }\n+    @Test\n+    public void isUserBlockedShouldReturnFalse() {\n+        testUser.setBlocked(false);\n+        boolean expected = false;\n+        boolean actual = testUserLoginService.isUserBlocked(testUser);\n+        log.info(\"Test return {} because user isn't blocked\",\n+                testUserLoginService.isUserBlocked(testUser));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void decrementLoginAttemptLeft() {\n+\n+        testUser.setCountOfLoginAttempts(3);\n+        int expected = 2;\n+        testUserLoginService.decrementCountOfLoginAttempts(testUser);\n+        int actual = testUser.getCountOfLoginAttempts();\n+        log.info(\"Amount attempts left will be decremented by one and equals {}\",\n+                testUser.getCountOfLoginAttempts());\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void blockUser() {\n+        boolean expected = true;\n+        testUserLoginService.blockUser(testUser);\n+        boolean actual = testUser.isBlocked();\n+        log.info(\"Test return {} because user is blocked\",\n+                testUser.isBlocked());\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void ifLoginAttemptLeftIsLeft() {\n+        testUser.setCountOfLoginAttempts(1);\n+        boolean expected = true;\n+        boolean actual = testUserLoginService.IsLoginAttemptsLeft(testUser);\n+        log.info(\"Test return {} because attempts left > 0\",\n+                testUserLoginService.IsLoginAttemptsLeft(testUser));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void loginShouldBlockUser() {\n+        testUser.setCountOfLoginAttempts(1);\n+        testUserLoginService.login(testUser, \"12345\");\n+        boolean actual = testUser.isBlocked();\n+        boolean expected = true;\n+        log.info(\"Test return {} and blocked user because attempts left = 0\",\n+                testUser.isBlocked());\n+        assertEquals(expected, actual);\n+    }\n+    @Test\n+    public void loginShouldNotProceed() {\n+        testUser.setCountOfLoginAttempts(0);\n+        testUser.setBlocked(true);\n+        boolean actual = testUserLoginService.login(testUser, \"1234\");\n+        boolean expected = false;\n+        log.info(\"Test return {} and blocked user because user is blocked\",\n+                testUserLoginService.login(testUser, \"1234\"));\n+        assertEquals(expected, actual);\n+    }\n+}\n\\ No newline at end of file"
  }
]
