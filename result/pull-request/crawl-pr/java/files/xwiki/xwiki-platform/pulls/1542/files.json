[
  {
    "sha": "4147154283e43c18d765cf69ff984277c7bd896a",
    "filename": "xwiki-platform-core/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/pom.xml",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/pom.xml",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/pom.xml?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -117,16 +117,15 @@\n                  cannot be empty.\n \n                  Note: you can use regexes by using the syntax: <regex>true</regex>\n-                 Don't forget to '\\'-escape dots and other special characters in this case ;)\n+                 Don't forget to '\\'-escape dots and other special characters in this case ;) -->\n             <revapi.ignore>\n               <item>\n-                <code>java.method.addedToInterface</code>\n-                <new>method void org.xwiki.ratings.RatingsManager::setIdentifier(java.lang.String)</new>\n-                <justification>Young API: fix typo.</justification>\n+                <code>java.method.parameterTypeChanged</code>\n+                <old>parameter javax.ws.rs.core.Response org.xwiki.livedata.rest.LiveDataEntryPropertyResource::setProperty(java.lang.String, java.lang.String, java.lang.String, java.lang.String, ===java.lang.Object===) throws java.lang.Exception</old>\n+                <new>parameter javax.ws.rs.core.Response org.xwiki.livedata.rest.LiveDataEntryPropertyResource::setProperty(java.lang.String, java.lang.String, java.lang.String, java.lang.String, ===java.lang.String===) throws java.lang.Exception</new>\n+                <justification>Unstable API: Object type for the request body lead to initializing a bytes array.</justification>\n               </item>\n             </revapi.ignore>\n-            -->\n-            \n           </analysisConfiguration>\n         </configuration>\n       </plugin>"
  },
  {
    "sha": "dcbdc4ec7b688517a3dbe1471389e14082b12b0e",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/java/org/xwiki/livedata/LiveDataException.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/java/org/xwiki/livedata/LiveDataException.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/java/org/xwiki/livedata/LiveDataException.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/java/org/xwiki/livedata/LiveDataException.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -45,6 +45,19 @@ public LiveDataException(Throwable source)\n         super(source);\n     }\n \n+    /**\n+     * Constructs a new live data exception with the specified detail message.\n+     *\n+     * @param message the detail message\n+     * @since 13.2RC1\n+     * @since 12.10.6\n+     */\n+    @Unstable\n+    public LiveDataException(String message)\n+    {\n+        super(message);\n+    }\n+\n     /**\n      * Creates a new instance with the specified message and source.\n      *"
  },
  {
    "sha": "b8e5cd1643adc29c6eb4d23a79e9cf6a766b52d7",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/resources/liveDataConfiguration.json",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/resources/liveDataConfiguration.json",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/resources/liveDataConfiguration.json",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/main/resources/liveDataConfiguration.json?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -45,7 +45,9 @@\n       {\"id\": \"text\"},\n       {\"id\": \"link\"},\n       {\"id\": \"html\"},\n-      {\"id\": \"actions\"}\n+      {\"id\": \"xClassProperty\"},\n+      {\"id\": \"actions\"},\n+      {\"id\": \"boolean\"}\n     ],\n \n     \"defaultDisplayer\": \"text\","
  },
  {
    "sha": "0f4c3e52dcb9f599a4dd4f9f365a3651a14872cd",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/java/org/xwiki/livedata/LiveDataEntryStoreTest.java",
    "status": "added",
    "additions": 183,
    "deletions": 0,
    "changes": 183,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/java/org/xwiki/livedata/LiveDataEntryStoreTest.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/java/org/xwiki/livedata/LiveDataEntryStoreTest.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/java/org/xwiki/livedata/LiveDataEntryStoreTest.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,183 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.livedata;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test of {@link LiveDataEntryStore}.\n+ *\n+ * @version $Id$\n+ * @since 13.2RC1\n+ * @since 12.10.6\n+ */\n+class LiveDataEntryStoreTest\n+{\n+    @Test\n+    void getEmpty() throws Exception\n+    {\n+        Optional<Map<String, Object>> empty = Optional.empty();\n+        LiveDataEntryStore liveDataEntryStore = initLiveDataEntryStore(empty);\n+        Optional<Object> o = liveDataEntryStore.get(\"entryIdTest\", \"propertyTest\");\n+        assertFalse(o.isPresent());\n+    }\n+\n+    @Test\n+    void getMissingProperty() throws Exception\n+    {\n+        Map<String, Object> value = new HashMap<>();\n+        value.put(\"key1\", 1);\n+        value.put(\"key2\", 2);\n+        Optional<Map<String, Object>> value1 = Optional.of(value);\n+        LiveDataEntryStore liveDataEntryStore = initLiveDataEntryStore(value1);\n+        Optional<Object> o = liveDataEntryStore.get(\"entryIdTest\", \"propertyTest\");\n+        assertFalse(o.isPresent());\n+    }\n+\n+    @Test\n+    void get() throws Exception\n+    {\n+        Map<String, Object> value = new HashMap<>();\n+        value.put(\"key1\", 1);\n+        value.put(\"propertyTest\", 2);\n+        Optional<Map<String, Object>> value1 = Optional.of(value);\n+        LiveDataEntryStore liveDataEntryStore = initLiveDataEntryStore(value1);\n+        Optional<Object> o = liveDataEntryStore.get(\"entryIdTest\", \"propertyTest\");\n+        assertTrue(o.isPresent());\n+        assertEquals(2, o.get());\n+    }\n+\n+    @Test\n+    void updatePreviousValueNull() throws Exception\n+    {\n+        LiveDataEntryStore liveDataEntryStore = new LiveDataEntryStore()\n+        {\n+            @Override\n+            public Optional<Map<String, Object>> get(Object entryId) throws LiveDataException\n+            {\n+                Map<String, Object> value = new HashMap<>();\n+                return Optional.of(value);\n+            }\n+\n+            @Override\n+            public LiveData get(LiveDataQuery query) throws LiveDataException\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<Object> save(Map<String, Object> entry) throws LiveDataException\n+            {\n+                return Optional.of(\"identifierTest\");\n+            }\n+        };\n+\n+        Optional<Object> update = liveDataEntryStore.update(\"entryIdTest\", \"propertyTest\", 1);\n+        assertFalse(update.isPresent());\n+    }\n+\n+    @Test\n+    void updateSaveEmpty() throws Exception\n+    {\n+        LiveDataEntryStore liveDataEntryStore = new LiveDataEntryStore()\n+        {\n+            @Override\n+            public Optional<Map<String, Object>> get(Object entryId) throws LiveDataException\n+            {\n+                Map<String, Object> value = new HashMap<>();\n+                value.put(\"propertyTest\", \"oldValue\");\n+                return Optional.of(value);\n+            }\n+\n+            @Override\n+            public LiveData get(LiveDataQuery query) throws LiveDataException\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<Object> save(Map<String, Object> entry) throws LiveDataException\n+            {\n+                return Optional.empty();\n+            }\n+        };\n+\n+        Optional<Object> update = liveDataEntryStore.update(\"entryIdTest\", \"propertyTest\", 1);\n+        assertFalse(update.isPresent());\n+    }\n+\n+    @Test\n+    void update() throws Exception\n+    {\n+        LiveDataEntryStore liveDataEntryStore = new LiveDataEntryStore()\n+        {\n+            @Override\n+            public Optional<Map<String, Object>> get(Object entryId) throws LiveDataException\n+            {\n+                Map<String, Object> value = new HashMap<>();\n+                value.put(\"propertyTest\", \"oldValue\");\n+                return Optional.of(value);\n+            }\n+\n+            @Override\n+            public LiveData get(LiveDataQuery query) throws LiveDataException\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<Object> save(Map<String, Object> entry) throws LiveDataException\n+            {\n+                return Optional.of(\"entryIdTest\");\n+            }\n+        };\n+\n+        Optional<Object> update = liveDataEntryStore.update(\"entryIdTest\", \"propertyTest\", 1);\n+        assertTrue(update.isPresent());\n+        assertEquals(\"oldValue\", update.get());\n+    }\n+\n+    private LiveDataEntryStore initLiveDataEntryStore(Optional<Map<String, Object>> value1)\n+    {\n+        return new LiveDataEntryStore()\n+        {\n+            @Override\n+            public Optional<Map<String, Object>> get(Object entryId)\n+            {\n+\n+                return value1;\n+            }\n+\n+            @Override\n+            public LiveData get(LiveDataQuery query)\n+            {\n+                return null;\n+            }\n+        };\n+    }\n+}"
  },
  {
    "sha": "2269b436d9bc43bef36dae2c02b7936f351346b4",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/resources/DefaultLiveDataConfigurationResolver.test",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/resources/DefaultLiveDataConfigurationResolver.test",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/resources/DefaultLiveDataConfigurationResolver.test",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-api/src/test/resources/DefaultLiveDataConfigurationResolver.test?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -26,7 +26,7 @@\n       {\n         \"id\":\"String\",\n         \"name\":\"Small Text\",\n-        \"displayer\":\"html\",\n+        \"displayer\":\"xClassProperty\",\n         \"filter\":{\n           \"id\":\"text\",\n           \"defaultOperator\":\"prefix\",\n@@ -93,7 +93,7 @@\n         },\n         \"sortable\":true,\n         \"visible\":true,\n-        \"displayer\":{\"id\":\"html\"},\n+        \"displayer\":{\"id\":\"xClassProperty\"},\n         \"filter\":{\n           \"id\":\"text\",\n           \"defaultOperator\":\"prefix\",\n@@ -148,7 +148,9 @@\n       {\"id\":\"text\"},\n       {\"id\":\"link\"},\n       {\"id\":\"html\"},\n-      {\"id\":\"actions\"}\n+      {\"id\":\"xClassProperty\"},\n+      {\"id\":\"actions\"},\n+      {\"id\":\"boolean\"}\n     ],\n     \"defaultDisplayer\":\"text\",\n     \"pagination\":{"
  },
  {
    "sha": "522e9de9e6f434451400961defc4b74d5c1a52eb",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataConfigurationResolver.java",
    "status": "modified",
    "additions": 23,
    "deletions": 7,
    "changes": 30,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataConfigurationResolver.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataConfigurationResolver.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataConfigurationResolver.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -25,6 +25,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n@@ -105,7 +106,7 @@\n     @Inject\n     private LiveTableResultsURLDocumentReferenceResolver urlDocumentReferenceResolver;\n \n-    private URLQueryStringParser urlQueryStringParser = new URLQueryStringParser();\n+    private final URLQueryStringParser urlQueryStringParser = new URLQueryStringParser();\n \n     @Override\n     public LiveDataConfiguration resolve(LiveTableConfiguration liveTableConfig) throws LiveDataException\n@@ -134,7 +135,7 @@ private LiveDataQuery getQueryConfig(List<String> columns, ObjectNode options)\n         queryConfig.setProperties(columns);\n         queryConfig.setSource(getSourceConfig(options));\n         processExtraParams(options, queryConfig);\n-        queryConfig.setSort(getSortConfig(columns, options));\n+        queryConfig.setSort(getSortConfig(options));\n \n         JsonNode rowCount = options.path(\"rowCount\");\n         if (rowCount.isNumber()) {\n@@ -234,7 +235,7 @@ private void processExtraParams(ObjectNode options, LiveDataQuery queryConfig)\n         }\n     }\n \n-    private List<SortEntry> getSortConfig(List<String> columns, ObjectNode options)\n+    private List<SortEntry> getSortConfig(ObjectNode options)\n     {\n         JsonNode selectedColumn = options.path(\"selectedColumn\");\n         JsonNode defaultOrder = options.path(\"defaultOrder\");\n@@ -267,15 +268,15 @@ private LiveDataPropertyDescriptor getPropertyDescriptor(String column, ObjectNo\n     {\n         LiveDataPropertyDescriptor propertyDescriptor = new LiveDataPropertyDescriptor();\n         propertyDescriptor.setId(column);\n-        propertyDescriptor.setName(getPropertyName(column, columnProperties, options));\n+        propertyDescriptor.setName(getPropertyName(columnProperties));\n         propertyDescriptor.setType(getPropertyType(column, columnProperties, options));\n \n         // The live table macro considers all columns, except for \"actions\", as sortable by default.\n         propertyDescriptor.setSortable(columnProperties.path(\"sortable\").asBoolean(!columnProperties.has(ACTIONS)));\n \n         // All columns are visible by default, unless explicitly marked as hidden.\n         propertyDescriptor.setVisible(!HIDDEN.equals(columnProperties.path(TYPE).asText()));\n-        propertyDescriptor.setDisplayer(getDisplayerConfig(column, columnProperties));\n+        propertyDescriptor.setDisplayer(getDisplayerConfig(column, columnProperties, options));\n \n         // The live table macro considers all columns, except for \"actions\", as filterable by default.\n         propertyDescriptor.setFilterable(columnProperties.path(\"filterable\").asBoolean(!columnProperties.has(ACTIONS)));\n@@ -286,7 +287,7 @@ private LiveDataPropertyDescriptor getPropertyDescriptor(String column, ObjectNo\n         return propertyDescriptor;\n     }\n \n-    private String getPropertyName(String column, ObjectNode columnProperties, ObjectNode options)\n+    private String getPropertyName(ObjectNode columnProperties)\n     {\n         JsonNode displayName = columnProperties.path(\"displayName\");\n         return displayName.isTextual() ? displayName.asText() : null;\n@@ -308,7 +309,16 @@ private String getPropertyType(String column, ObjectNode columnProperties, Objec\n         return this.propertyTypeSupplier.getPropertyType(column, className.asText());\n     }\n \n-    private DisplayerDescriptor getDisplayerConfig(String column, ObjectNode columnProperties)\n+    /**\n+     * Identifies the column's displayer according to the column's livetable properties and the livetable's options.\n+     *\n+     * @param column the column to analyse\n+     * @param columnProperties the properties of the column\n+     * @param options the properties of the livetable\n+     * @return the displayer descriptor selected for the column\n+     */\n+    private DisplayerDescriptor getDisplayerConfig(String column, ObjectNode columnProperties,\n+        ObjectNode options)\n     {\n         DisplayerDescriptor displayerConfig = new DisplayerDescriptor();\n         if (columnProperties.path(ACTIONS).isArray()) {\n@@ -319,6 +329,12 @@ private DisplayerDescriptor getDisplayerConfig(String column, ObjectNode columnP\n             displayerConfig.setParameter(\"propertyHref\", getLinkTarget(column, columnProperties.get(LINK).asText()));\n             displayerConfig.setParameter(HTML, columnProperties.path(HTML).booleanValue());\n         } else if (columnProperties.path(HTML).booleanValue()) {\n+            if (options.get(CLASS_NAME) != null && StringUtils.isNotEmpty(options.get(CLASS_NAME).textValue())) {\n+                displayerConfig.setId(\"xClassProperty\");\n+            } else {\n+                displayerConfig.setId(HTML);\n+            }\n+        } else if (Objects.equals(columnProperties.path(TYPE).textValue(), \"list\")) {\n             displayerConfig.setId(HTML);\n         } else {\n             displayerConfig = null;"
  },
  {
    "sha": "b1dd97fe38269b125b98622fcf192813f9dd25e3",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStore.java",
    "status": "modified",
    "additions": 80,
    "deletions": 5,
    "changes": 85,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStore.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStore.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStore.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -30,6 +30,7 @@\n import javax.inject.Named;\n import javax.inject.Provider;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.xwiki.component.annotation.Component;\n import org.xwiki.component.annotation.InstantiationStrategy;\n import org.xwiki.component.descriptor.ComponentInstantiationStrategy;\n@@ -42,6 +43,7 @@\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n import org.xwiki.rendering.syntax.Syntax;\n+import org.xwiki.security.authorization.AccessDeniedException;\n import org.xwiki.security.authorization.ContextualAuthorizationManager;\n import org.xwiki.security.authorization.Right;\n import org.xwiki.template.TemplateManager;\n@@ -53,6 +55,7 @@\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.XWikiException;\n \n /**\n  * {@link LiveDataEntryStore} implementation that reuses existing live table data.\n@@ -70,6 +73,15 @@\n      */\n     public static final String ROLE_HINT = \"liveTable\";\n \n+    private static final String CLASS_NAME_PARAMETER = \"className\";\n+\n+    private static final String DOC_PREFIX = \"doc.\";\n+\n+    private static final String UNDEFINED_CLASS_ERROR_MESSAGE =\n+        \"Can't update a live table with an undefined class name.\";\n+\n+    private static final String ENTRY_ID = \"doc.fullName\";\n+\n     @Inject\n     private Provider<XWikiContext> xcontextProvider;\n \n@@ -86,10 +98,13 @@\n     @Inject\n     private LiveTableRequestHandler liveTableRequestHandler;\n \n+    @Inject\n+    private XClassPropertyService xClassPropertyService;\n+\n     @Override\n     public Optional<Map<String, Object>> get(Object entryId)\n     {\n-        throw new UnsupportedOperationException();\n+        return Optional.empty();\n     }\n \n     @Override\n@@ -141,7 +156,7 @@ private ObjectNode getLiveTableResultsJSON(LiveDataQuery query, ObjectMapper obj\n         }\n     }\n \n-    private String getLiveTableResultsFromTemplate(String template, LiveDataQuery query) throws Exception\n+    private String getLiveTableResultsFromTemplate(String template, LiveDataQuery query)\n     {\n         return this.liveTableRequestHandler.getLiveTableResults(query, () -> {\n             try {\n@@ -182,12 +197,72 @@ private String getLiveTableResultsFromPage(String page, LiveDataQuery query) thr\n                 // live data query.\n                 Set<String> keysToRename =\n                     entry.keySet().stream().filter(key -> key.startsWith(\"doc_\")).collect(Collectors.toSet());\n-                keysToRename.forEach(key -> {\n-                    entry.put(\"doc.\" + key.substring(4), entry.remove(key));\n-                });\n+                keysToRename.forEach(key -> entry.put(DOC_PREFIX + key.substring(4), entry.remove(key)));\n                 entries.add(entry);\n             }\n         }\n         return entries;\n     }\n+\n+    @Override\n+    public Optional<Object> update(Object entryId, String property, Object value) throws LiveDataException\n+    {\n+        String className = (String) this.getParameters().get(CLASS_NAME_PARAMETER);\n+\n+        // We can't update a class field if the class is undefined.\n+        if (className == null && !StringUtils.defaultIfEmpty(property, \"\").startsWith(DOC_PREFIX)) {\n+            throw new LiveDataException(UNDEFINED_CLASS_ERROR_MESSAGE);\n+        }\n+\n+        DocumentReference documentReference = this.currentDocumentReferenceResolver.resolve((String) entryId);\n+        DocumentReference classReference;\n+        if (className != null) {\n+            classReference = this.currentDocumentReferenceResolver.resolve(className);\n+        } else {\n+            classReference = null;\n+        }\n+        try {\n+            return this.xClassPropertyService.update(property, value, documentReference, classReference);\n+        } catch (AccessDeniedException | XWikiException | LiveDataException e) {\n+            throw new LiveDataException(e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Object> save(Map<String, Object> entries) throws LiveDataException\n+    {\n+        String className = (String) this.getParameters().get(CLASS_NAME_PARAMETER);\n+\n+        // We can't update a class field if the class is unknown and one of the entry to update is an XProperty.\n+        boolean hasXClassPropertiesToUpdate = entries.keySet()\n+            .stream()\n+            .anyMatch(it -> !StringUtils.defaultIfEmpty(it, \"\").startsWith(DOC_PREFIX));\n+        if (className == null && hasXClassPropertiesToUpdate) {\n+            throw new LiveDataException(UNDEFINED_CLASS_ERROR_MESSAGE);\n+        }\n+\n+        String fullName = (String) entries.get(ENTRY_ID);\n+        if (fullName == null) {\n+            throw new LiveDataException(\n+                String.format(\"Entry [%s] missing. Can't load the document to update.\", ENTRY_ID));\n+        }\n+\n+        DocumentReference documentReference = this.currentDocumentReferenceResolver.resolve(fullName);\n+\n+        DocumentReference classReference;\n+        if (className != null) {\n+            classReference = this.currentDocumentReferenceResolver.resolve(className);\n+        } else {\n+            classReference = null;\n+        }\n+\n+        try {\n+            this.xClassPropertyService.updateAll(entries, documentReference, classReference);\n+        } catch (AccessDeniedException | XWikiException e) {\n+            throw new LiveDataException(e);\n+        }\n+\n+        return Optional.of(fullName);\n+    }\n+   \n }"
  },
  {
    "sha": "216986f1d40a6be76d6eb1397fc7c69627d005ba",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStore.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStore.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStore.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStore.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -143,7 +143,7 @@ private LiveDataPropertyDescriptor getLiveDataPropertyDescriptor(PropertyClass x\n             descriptor.setSortable(false);\n         }\n         // The returned property value is the displayer output.\n-        descriptor.setDisplayer(new DisplayerDescriptor(\"html\"));\n+        descriptor.setDisplayer(new DisplayerDescriptor(\"xClassProperty\"));\n         if (xproperty instanceof ListClass) {\n             descriptor.setFilter(new FilterDescriptor(\"list\"));\n             if (xproperty instanceof LevelsClass) {"
  },
  {
    "sha": "b294f3dbc0711f773b49fc6543e201054d5ed88b",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/XClassPropertyService.java",
    "status": "added",
    "additions": 246,
    "deletions": 0,
    "changes": 246,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/XClassPropertyService.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/XClassPropertyService.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/java/org/xwiki/livedata/internal/livetable/XClassPropertyService.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,246 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.livedata.internal.livetable;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+import javax.inject.Singleton;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.xwiki.component.annotation.Component;\n+import org.xwiki.livedata.LiveDataException;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.security.authorization.AccessDeniedException;\n+import org.xwiki.security.authorization.ContextualAuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.XWikiException;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.objects.classes.BaseClass;\n+\n+/**\n+ * Provides the operations to interact with a XClass properties of the rows of a liveTable live data.\n+ *\n+ * @version $Id$\n+ * @since 13.2RC1\n+ * @since 12.10.6\n+ */\n+@Component(roles = { XClassPropertyService.class })\n+@Singleton\n+public class XClassPropertyService\n+{\n+    @Inject\n+    private ContextualAuthorizationManager authorization;\n+\n+    @Inject\n+    private Provider<XWikiContext> xcontextProvider;\n+\n+    @Inject\n+    private Logger logger;\n+\n+    /**\n+     * Update a property of an XObject located in the provided document reference. If the property starts with {@code\n+     * doc} the corresponding document's property is updated instead. The first object of the request type if updated,\n+     * to update another object, see {@link #update(String, Object, DocumentReference, DocumentReference, int)}.\n+     *\n+     * @param property the property id\n+     * @param value the value of the property\n+     * @param documentReference the document reference\n+     * @param classReference the class reference\n+     * @return the changed field, or {@link Optional#empty()} if nothing has been modified\n+     * @throws AccessDeniedException if the user cannot edit the document\n+     * @throws XWikiException in case of error when accessing or updating the document\n+     * @see #update(String, Object, DocumentReference, DocumentReference, int)\n+     */\n+    public Optional<Object> update(String property, Object value, DocumentReference documentReference,\n+        DocumentReference classReference) throws AccessDeniedException, XWikiException, LiveDataException\n+    {\n+        return update(property, value, documentReference, classReference, 0);\n+    }\n+\n+    /**\n+     * Update a property of an nth XObject located in the provided document reference. The nth object is found using the\n+     * {code objectNumber} index. If the property starts with {@code doc.} the corresponding document's property is\n+     * updated instead.\n+     *\n+     * @param property the property id\n+     * @param value the value of the property\n+     * @param documentReference the document reference\n+     * @param classReference the class reference\n+     * @param objectNumber the index of the object to update\n+     * @return the changed field, or {@link Optional#empty()} if nothing has been modified\n+     * @throws AccessDeniedException if the user cannot edit the document\n+     * @throws XWikiException in case of error when accessing or updating the document\n+     */\n+    public Optional<Object> update(String property, Object value, DocumentReference documentReference,\n+        DocumentReference classReference, int objectNumber)\n+        throws AccessDeniedException, XWikiException, LiveDataException\n+    {\n+        this.authorization.checkAccess(Right.EDIT, documentReference);\n+        XWikiContext xcontext = this.xcontextProvider.get();\n+        XWikiDocument document = xcontext.getWiki().getDocument(documentReference, xcontext);\n+\n+        if (document.isNew()) {\n+            throw new LiveDataException(\"We do not support updating new documents.\");\n+        }\n+\n+        Object changedValue = updateProperty(property, value, classReference, objectNumber, document);\n+\n+        saveDocument(document);\n+        return Optional.ofNullable(changedValue);\n+    }\n+\n+    /**\n+     * Update all the provided entries of the document. The entiers can either be from the document itself if prefixed\n+     * with {@code doc.} or from an XObject instance of the classReference parameter. The first XObject found is used,\n+     * to update another XObject, see {@link #updateAll(Map, DocumentReference, DocumentReference, int)}\n+     *\n+     * @param entries tge list of entries to update\n+     * @param documentReference the document to update\n+     * @param classReference the type of XObject to update\n+     * @throws AccessDeniedException in case the current user is not allow to edit the document\n+     * @throws XWikiException in case of error when loading or saving the updated document\n+     * @throws LiveDataException in case of error when validating the document\n+     * @see #updateAll(Map, DocumentReference, DocumentReference, int)\n+     */\n+    public void updateAll(Map<String, Object> entries, DocumentReference documentReference,\n+        DocumentReference classReference) throws AccessDeniedException, XWikiException, LiveDataException\n+    {\n+        updateAll(entries, documentReference, classReference, 0);\n+    }\n+\n+    /**\n+     * Update all the provided entries of the document. The entiers can either be from the document itself if prefixed\n+     * with {@code doc.} or from an XObject instance of the classReference parameter. The XObject at the provided index\n+     * number is updated.\n+     *\n+     * @param entries tge list of entries to update\n+     * @param documentReference the document to update\n+     * @param classReference the type of XObject to update\n+     * @param objectNumber the index of the XObject to update\n+     * @throws AccessDeniedException in case the current user is not allow to edit the document\n+     * @throws XWikiException in case of error when loading or saving the updated document\n+     * @throws LiveDataException in case of error when validating the document\n+     * @see #updateAll(Map, DocumentReference, DocumentReference)\n+     */\n+    public void updateAll(Map<String, Object> entries, DocumentReference documentReference,\n+        DocumentReference classReference, int objectNumber)\n+        throws AccessDeniedException, XWikiException, LiveDataException\n+    {\n+        this.authorization.checkAccess(Right.EDIT, documentReference);\n+        XWikiContext xcontext = this.xcontextProvider.get();\n+        XWikiDocument document = xcontext.getWiki().getDocument(documentReference, xcontext);\n+\n+        for (Map.Entry<String, Object> entry : entries.entrySet()) {\n+            this.updateProperty(entry.getKey(), entry.getValue(), classReference, objectNumber, document);\n+        }\n+\n+        saveDocument(document);\n+    }\n+\n+    private void saveDocument(XWikiDocument document) throws XWikiException, LiveDataException\n+    {\n+        XWikiContext xcontext = this.xcontextProvider.get();\n+        // Saves and validates only if the document has changed.\n+        if (document.isContentDirty() || document.isMetaDataDirty()) {\n+            boolean validate = document.validate(xcontext);\n+            if (!validate) {\n+                throw new LiveDataException(\"Document not validated.\");\n+            }\n+            document.setAuthorReference(xcontext.getUserReference());\n+            xcontext.getWiki().saveDocument(document, \"LiveData update.\", true, xcontext);\n+        }\n+    }\n+\n+    private Object updateProperty(String property, Object value, DocumentReference classReference, int objectNumber,\n+        XWikiDocument document) throws XWikiException\n+    {\n+        Object changedValue;\n+        if (StringUtils.defaultIfEmpty(property, \"\").startsWith(\"doc\")) {\n+            changedValue = updateDocument(property.replaceFirst(\"doc\\\\.\", \"\"), value, document);\n+        } else {\n+            changedValue = updateXObject(property, value, document, classReference, objectNumber);\n+        }\n+        return changedValue;\n+    }\n+\n+    private Object updateXObject(String property, Object value, XWikiDocument document,\n+        DocumentReference classReference, int objectNumber) throws XWikiException\n+    {\n+        Object changedValue = null;\n+        XWikiContext xcontext = this.xcontextProvider.get();\n+        BaseObject baseObject = document.getXObject(classReference, objectNumber);\n+        BaseClass xClass = baseObject.getXClass(xcontext);\n+\n+        List<Object> properties = Arrays.asList(baseObject.getPropertyNames());\n+        if (properties.contains(property)) {\n+            changedValue = baseObject.get(property).toFormString();\n+\n+            Object nvalue;\n+            if (value instanceof List) {\n+                List list = (List) value;\n+                nvalue = IntStream.range(0, list.size())\n+                    .mapToObj(i -> String.valueOf(list.get(i)))\n+                    .toArray(String[]::new);\n+            } else {\n+                nvalue = value;\n+            }\n+            Map<String, Object> valueMap = new HashMap<>();\n+            valueMap.put(property, nvalue);\n+            xClass.fromMap(valueMap, baseObject);\n+        }\n+        return changedValue;\n+    }\n+\n+    private Object updateDocument(String property, Object value, XWikiDocument document)\n+    {\n+        Object changedValue = null;\n+        if (Objects.equals(property, \"hidden\")) {\n+            changedValue = document.isHidden();\n+            document.setHidden(Objects.equals(String.valueOf(value), \"true\"));\n+        } else if (Objects.equals(property, \"title\")) {\n+            changedValue = document.getTitle();\n+            document.setTitle(String.valueOf(value));\n+        } else if (Objects.equals(property, \"content\")) {\n+            changedValue = document.getContent();\n+            document.setContent((String) value);\n+        } else {\n+            // Some property such as fullName as simply ignored and are not editable.\n+            if (!Objects.equals(property, \"fullName\")) {\n+                this.logger\n+                    .warn(\"Unknown property [{}]. Document [{}] will not be updated with value [{}].\", property,\n+                        document,\n+                        value);\n+            }\n+        }\n+        return changedValue;\n+    }\n+}"
  },
  {
    "sha": "dede787aef51ea0c97f45646db11063727aa3b57",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/META-INF/components.txt",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/META-INF/components.txt",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/META-INF/components.txt",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/META-INF/components.txt?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -8,3 +8,4 @@ org.xwiki.livedata.internal.livetable.LiveTableRequestHandler\n org.xwiki.livedata.internal.livetable.LiveTableResultsURLDocumentReferenceResolver\n org.xwiki.livedata.internal.livetable.PropertyTypeSupplier\n org.xwiki.livedata.script.livetable.LiveTableScriptService\n+org.xwiki.livedata.internal.livetable.XClassPropertyService"
  },
  {
    "sha": "3b2c364ac0a8283a91cec9befe7cf864c557cdfb",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/liveTableLiveDataConfiguration.json",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/liveTableLiveDataConfiguration.json",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/liveTableLiveDataConfiguration.json",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/main/resources/liveTableLiveDataConfiguration.json?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -13,13 +13,14 @@\n     \"propertyDescriptors\": [\n       {\"id\": \"doc.name\", \"type\": \"String\", \"editable\": false, \"displayer\": \"link\"},\n       {\"id\": \"doc.title\", \"type\": \"String\", \"displayer\": \"link\"},\n+      {\"id\": \"doc.hidden\", \"type\": \"Boolean\", \"displayer\": \"boolean\"},\n       {\n         \"id\": \"doc.space\",\n         \"type\": \"String\",\n         \"editable\": false,\n         \"displayer\": {\"id\": \"link\", \"propertyHref\": \"doc.space_url\"}\n       },\n-      {\"id\": \"doc.location\", \"type\": \"String\", \"editable\": false, \"displayer\": \"html\"},\n+      {\"id\": \"doc.location\", \"type\": \"String\", \"editable\": false, \"displayer\": \"xClassProperty\"},\n       {\"id\": \"doc.fullName\", \"type\": \"String\", \"editable\": false, \"displayer\": \"link\"},\n       {\"id\": \"doc.creationDate\", \"type\": \"Date\", \"editable\": false, \"displayer\": \"text\"},\n       {\"id\": \"doc.date\", \"type\": \"Date\", \"editable\": false, \"displayer\": \"text\"},\n@@ -31,10 +32,10 @@\n         \"displayer\": {\"id\": \"link\", \"propertyHref\": \"doc.author_url\"}\n       },\n       {\"id\": \"doc.objectCount\", \"type\": \"Number\", \"sortable\": false, \"filterable\": false, \"editable\": false},\n-      {\"id\": \"_images\", \"displayer\": \"html\"},\n-      {\"id\": \"_attachments\", \"displayer\": \"html\"},\n+      {\"id\": \"_images\", \"displayer\": \"xClassProperty\"},\n+      {\"id\": \"_attachments\", \"displayer\": \"xClassProperty\"},\n       {\"id\": \"_actions\", \"displayer\": {\"id\": \"actions\", \"actions\": [\"edit\", \"delete\"]}},\n-      {\"id\": \"_avatar\", \"displayer\": \"html\"}\n+      {\"id\": \"_avatar\", \"displayer\": \"xClassProperty\"}\n     ],\n \n     \"propertyTypes\": [\n@@ -51,7 +52,7 @@\n         \"sortable\": false,\n         \"filterable\": false,\n         \"editable\": false,\n-        \"displayer\": \"html\"\n+        \"displayer\": \"xClassProperty\"\n       },\n       {\n         \"id\": \"DBList\",\n@@ -80,15 +81,15 @@\n         \"sortable\": true,\n         \"filterable\": true,\n         \"editable\": true,\n-        \"displayer\": \"html\",\n+        \"displayer\": \"xClassProperty\",\n         \"filter\": \"text\"\n       },\n       {\n         \"id\": \"Groups\",\n         \"sortable\": true,\n         \"filterable\": true,\n         \"editable\": true,\n-        \"displayer\": \"html\",\n+        \"displayer\": \"xClassProperty\",\n         \"filter\": \"list\"\n       },\n       {\n@@ -111,7 +112,7 @@\n         \"sortable\": true,\n         \"filterable\": true,\n         \"editable\": true,\n-        \"displayer\": \"html\",\n+        \"displayer\": \"xClassProperty\",\n         \"filter\": \"list\"\n       },\n       {\n@@ -139,7 +140,7 @@\n         \"sortable\": true,\n         \"filterable\": true,\n         \"editable\": true,\n-        \"displayer\": \"html\",\n+        \"displayer\": \"xClassProperty\",\n         \"filter\": \"text\"\n       },\n       {\n@@ -154,7 +155,7 @@\n         \"sortable\": true,\n         \"filterable\": true,\n         \"editable\": true,\n-        \"displayer\": \"html\",\n+        \"displayer\": \"xClassProperty\",\n         \"filter\": \"list\"\n       }\n     ],"
  },
  {
    "sha": "e1bba7428316983b264150f234e2e536aae8c7f0",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStoreTest.java",
    "status": "modified",
    "additions": 96,
    "deletions": 1,
    "changes": 97,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStoreTest.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStoreTest.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataEntryStoreTest.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.function.Supplier;\n \n import javax.inject.Named;\n@@ -50,12 +51,15 @@\n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiDocument;\n \n+import static java.util.Arrays.asList;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n /**\n@@ -86,13 +90,16 @@\n     @MockComponent\n     private LiveTableRequestHandler liveTableRequestHandler;\n \n+    @MockComponent\n+    private XClassPropertyService xClassPropertyService;\n+\n     @Mock\n     private XWikiContext xcontext;\n \n     @Mock\n     private XWiki xwiki;\n \n-    private ObjectMapper objectMapper = new ObjectMapper();\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n \n     @SuppressWarnings(\"unchecked\")\n     @BeforeEach\n@@ -214,4 +221,92 @@ void getFromDefaultResultPageWithInvalidJSON() throws Exception\n             assertEquals(\"Failed to execute the live data query.\", e.getMessage());\n         }\n     }\n+\n+    @Test\n+    void updateUndefinedClassName() throws Exception\n+    {\n+        String entryId = \"testEntry\";\n+        String property = \"propName\";\n+        Object value = \"theValue\";\n+        LiveDataException liveDataException =\n+            assertThrows(LiveDataException.class, () -> this.entryStore.update(entryId, property, value));\n+        assertEquals(\"Can't update a live table with an undefined class name.\", liveDataException.getMessage());\n+    }\n+\n+    @Test\n+    void updateXClassField() throws Exception\n+    {\n+        String entryId = \"testEntry\";\n+        String property = \"propName\";\n+        Object value = \"theValue\";\n+        String docName = \"MyApp.MyClass\";\n+        DocumentReference documentEntityReference = new DocumentReference(\"xwiki\", \"MyApp\", \"testEntry\");\n+        DocumentReference documentClassReference = new DocumentReference(\"xwiki\", \"MyApp\", \"MyClass\");\n+\n+        this.entryStore.getParameters().put(\"className\", docName);\n+        when(this.currentDocumentReferenceResolver.resolve(entryId)).thenReturn(documentEntityReference);\n+        when(this.currentDocumentReferenceResolver.resolve(docName)).thenReturn(documentClassReference);\n+\n+        this.entryStore.update(entryId, property, value);\n+        verify(this.xClassPropertyService).update(property, value, documentEntityReference, documentClassReference);\n+    }\n+\n+    @Test\n+    void updateDocField() throws Exception\n+    {\n+        String entryId = \"testEntry\";\n+        String property = \"doc.propName\";\n+        Object value = \"theValue\";\n+        DocumentReference documentEntityReference = new DocumentReference(\"xwiki\", \"MyApp\", \"testEntry\");\n+\n+        when(this.currentDocumentReferenceResolver.resolve(entryId)).thenReturn(documentEntityReference);\n+\n+        this.entryStore.update(entryId, property, value);\n+        verify(this.xClassPropertyService).update(property, value, documentEntityReference, null);\n+    }\n+\n+    @Test\n+    void saveXClassUndefined()\n+    {\n+        Map<String, Object> entries = new HashMap<>();\n+        entries.put(\"doc.hidden\", \"true\");\n+        entries.put(\"myProperty\", asList(\"1\", \"0\"));\n+        LiveDataException liveDataException =\n+            assertThrows(LiveDataException.class, () -> this.entryStore.save(entries));\n+        assertEquals(\"Can't update a live table with an undefined class name.\", liveDataException.getMessage());\n+    }\n+\n+    @Test\n+    void saveEntryIdUndefined()\n+    {\n+        Map<String, Object> entries = new HashMap<>();\n+        entries.put(\"doc.hidden\", \"true\");\n+        entries.put(\"myProperty\", asList(\"1\", \"0\"));\n+        this.entryStore.getParameters().put(\"className\", \"MyTest.MyClass\");\n+        LiveDataException liveDataException =\n+            assertThrows(LiveDataException.class, () -> this.entryStore.save(entries));\n+        assertEquals(\"Entry [doc.fullName] missing. Can't load the document to update.\",\n+            liveDataException.getMessage());\n+    }\n+\n+    @Test\n+    void save() throws Exception\n+    {\n+        Map<String, Object> entries = new HashMap<>();\n+        entries.put(\"doc.hidden\", \"true\");\n+        entries.put(\"myProperty\", asList(\"1\", \"0\"));\n+        entries.put(\"doc.fullName\", \"MyTest.MyObject\");\n+        DocumentReference objectDR = new DocumentReference(\"xwiki\", \"MyTest\", \"MyObject\");\n+        DocumentReference classDR = new DocumentReference(\"xwiki\", \"MyTest\", \"MyClass\");\n+\n+        when(this.currentDocumentReferenceResolver.resolve(\"MyTest.MyObject\")).thenReturn(objectDR);\n+        when(this.currentDocumentReferenceResolver.resolve(\"MyTest.MyClass\")).thenReturn(classDR);\n+\n+        this.entryStore.getParameters().put(\"className\", \"MyTest.MyClass\");\n+        Optional<Object> save = this.entryStore.save(entries);\n+\n+        assertEquals(Optional.of(\"MyTest.MyObject\"), save);\n+        verify(this.xClassPropertyService).updateAll(entries, objectDR, classDR);\n+\n+    }\n }"
  },
  {
    "sha": "7833d7d401966f42e0ae23f116aa51cabd4d6452",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStoreTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStoreTest.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStoreTest.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/LiveTableLiveDataPropertyStoreTest.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -167,14 +167,14 @@ void getAll() throws Exception\n \n         StringBuilder expectedClassProps = new StringBuilder();\n         expectedClassProps.append(\"{'id':'birthdate','name':'Birthdate','description':'The date when you were born.'\"\n-            + \",'type':'Date','displayer':{'id':'html'},'filter':{'id':'date','dateFormat':'h:mm a'}},\");\n+            + \",'type':'Date','displayer':{'id':'xClassProperty'},'filter':{'id':'date','dateFormat':'h:mm a'}},\");\n         expectedClassProps.append(\"{'id':'total','name':'Total','description':'The computed total amount.',\"\n-            + \"'type':'Computed','displayer':{'id':'html'}},\");\n+            + \"'type':'Computed','displayer':{'id':'xClassProperty'}},\");\n         expectedClassProps.append(\"{'id':'status','name':'Status','description':'The status.',\"\n-            + \"'type':'List','sortable':false,'displayer':{'id':'html'},\"\n+            + \"'type':'List','sortable':false,'displayer':{'id':'xClassProperty'},\"\n             + \"'filter':{'id':'list','operators':[{'id':'equals'}],\"\n             + \"'searchURL':'/xwiki/rest/wikis/wiki/classes/Some.Class/properties/status/values?fp={encodedQuery}'}},\");\n-        expectedClassProps.append(\"{'id':'levels','type':'Levels','displayer':{'id':'html'},\"\n+        expectedClassProps.append(\"{'id':'levels','type':'Levels','displayer':{'id':'xClassProperty'},\"\n             + \"'filter':{'id':'list','options':['edit','delete']}}\");\n \n         Collection<LiveDataPropertyDescriptor> properties = this.propertyStore.get();"
  },
  {
    "sha": "759f7ebf9aa80dc63ee0b5eba74eefb73e198a96",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/XClassPropertyServiceTest.java",
    "status": "added",
    "additions": 285,
    "deletions": 0,
    "changes": 285,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/XClassPropertyServiceTest.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/XClassPropertyServiceTest.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/java/org/xwiki/livedata/internal/livetable/XClassPropertyServiceTest.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,285 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.livedata.internal.livetable;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Provider;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.xwiki.livedata.LiveDataException;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.security.authorization.AccessDeniedException;\n+import org.xwiki.security.authorization.ContextualAuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+\n+import com.xpn.xwiki.XWiki;\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.objects.PropertyInterface;\n+import com.xpn.xwiki.objects.classes.BaseClass;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test of {@link XClassPropertyService}.\n+ *\n+ * @version $Id$\n+ * @since 13.2RC1\n+ * @since 12.10.6\n+ */\n+@ComponentTest\n+class XClassPropertyServiceTest\n+{\n+    @InjectMockComponents\n+    private XClassPropertyService xClassPropertyService;\n+\n+    @MockComponent\n+    private ContextualAuthorizationManager authorization;\n+\n+    @MockComponent\n+    private Provider<XWikiContext> xcontextProvider;\n+\n+    @Mock\n+    private XWikiContext xcontext;\n+\n+    @Mock\n+    private XWiki xwiki;\n+\n+    @Mock\n+    private XWikiDocument document;\n+\n+    @Mock\n+    private BaseObject baseObject;\n+\n+    @Mock\n+    private PropertyInterface propertyInterface;\n+\n+    @Mock\n+    private BaseClass baseClass;\n+\n+    @BeforeEach\n+    void setUp()\n+    {\n+        when(this.xcontextProvider.get()).thenReturn(this.xcontext);\n+        when(this.xcontext.getWiki()).thenReturn(this.xwiki);\n+    }\n+\n+    @Test\n+    void updateWhenEditIsDisallowed() throws Exception\n+    {\n+        String property = \"propertyName\";\n+        Object value = \"value\";\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyApp\", \"mydoc\");\n+        DocumentReference classReference = new DocumentReference(\"xwiki\", \"MyApp\", \"MyClass\");\n+\n+        doThrow(AccessDeniedException.class).when(this.authorization).checkAccess(Right.EDIT, documentReference);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> this.xClassPropertyService.update(property, value, documentReference, classReference));\n+        verifyNoInteractions(this.xcontextProvider);\n+    }\n+\n+    @Test\n+    void updateNewDocument() throws Exception\n+    {\n+        String property = \"propertyName\";\n+        Object value = \"value\";\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyApp\", \"mydoc\");\n+        DocumentReference classReference = new DocumentReference(\"xwiki\", \"MyApp\", \"MyClass\");\n+\n+        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.document);\n+        when(this.document.isNew()).thenReturn(true);\n+\n+        LiveDataException liveDataException = assertThrows(LiveDataException.class,\n+            () -> this.xClassPropertyService.update(property, value, documentReference, classReference));\n+        assertEquals(\"We do not support updating new documents.\", liveDataException.getMessage());\n+    }\n+\n+    @Test\n+    void updateXClassField() throws Exception\n+    {\n+        String property = \"propertyName\";\n+        Object value = \"value\";\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyApp\", \"mydoc\");\n+        DocumentReference classReference = new DocumentReference(\"xwiki\", \"MyApp\", \"MyClass\");\n+\n+        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.document);\n+        when(this.document.getXObject(classReference, 0)).thenReturn(this.baseObject);\n+        // The list of properties includes the property to update. \n+        when(this.baseObject.getPropertyNames()).thenReturn(new String[] { \"propertyA\", \"propertyName\", \"propertyB\" });\n+        when(this.baseObject.get(property)).thenReturn(this.propertyInterface);\n+        when(this.baseObject.getXClass(this.xcontext)).thenReturn(this.baseClass);\n+\n+        when(this.propertyInterface.toFormString()).thenReturn(\"updatedValue\");\n+        when(this.document.validate(this.xcontext)).thenReturn(true);\n+        when(this.document.isContentDirty()).thenReturn(true);\n+\n+        Optional<Object> update = this.xClassPropertyService.update(property, value, documentReference, classReference);\n+\n+        assertTrue(update.isPresent());\n+        assertEquals(\"updatedValue\", update.get());\n+\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"propertyName\", \"value\");\n+        verify(this.baseClass).fromMap(map, this.baseObject);\n+        verify(this.xwiki).saveDocument(this.document, \"LiveData update.\", true, this.xcontext);\n+    }\n+\n+    @Test\n+    void updateXClassField2() throws Exception\n+    {\n+        String property = \"propertyName\";\n+        Object value = Arrays.asList(\"a\", \"b\");\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyApp\", \"mydoc\");\n+        DocumentReference classReference = new DocumentReference(\"xwiki\", \"MyApp\", \"MyClass\");\n+\n+        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.document);\n+        when(this.document.getXObject(classReference, 0)).thenReturn(this.baseObject);\n+        // The list of properties includes the property to update. \n+        when(this.baseObject.getPropertyNames()).thenReturn(new String[] { \"propertyA\", \"propertyName\", \"propertyB\" });\n+        when(this.baseObject.get(property)).thenReturn(this.propertyInterface);\n+        when(this.baseObject.getXClass(this.xcontext)).thenReturn(this.baseClass);\n+\n+        when(this.propertyInterface.toFormString()).thenReturn(\"updatedValue\");\n+        when(this.document.validate(this.xcontext)).thenReturn(true);\n+        when(this.document.isContentDirty()).thenReturn(true);\n+\n+        Optional<Object> update = this.xClassPropertyService.update(property, value, documentReference, classReference);\n+\n+        assertTrue(update.isPresent());\n+        assertEquals(\"updatedValue\", update.get());\n+\n+        ArgumentCaptor<Map> mapCaptor = ArgumentCaptor.forClass(Map.class);\n+\n+        verify(this.baseClass).fromMap(mapCaptor.capture(), eq(this.baseObject));\n+\n+        // `equals()` of the arrays do \n+        Map value1 = mapCaptor.getValue();\n+        assertTrue(value1.containsKey(property));\n+        assertArrayEquals(new String[] { \"a\", \"b\" }, (String[]) value1.get(property));\n+\n+        verify(this.xwiki).saveDocument(this.document, \"LiveData update.\", true, this.xcontext);\n+    }\n+\n+    @Test\n+    void updateDocumentHiddenFieldButNotModified() throws Exception\n+    {\n+        String property = \"doc.hidden\";\n+        Object value = \"true\";\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyApp\", \"mydoc\");\n+\n+        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.document);\n+\n+        when(this.document.isContentDirty()).thenReturn(false);\n+        when(this.document.isHidden()).thenReturn(true);\n+\n+        Optional<Object> update = this.xClassPropertyService.update(property, value, documentReference, null);\n+        assertTrue(update.isPresent());\n+        assertTrue((Boolean) update.get());\n+\n+        verify(this.document).setHidden(true);\n+        verify(this.xwiki, never()).saveDocument(this.document, \"LiveData update.\", true, this.xcontext);\n+    }\n+\n+    @Test\n+    void updateDocumentTitleFieldButNotValid() throws Exception\n+    {\n+        String property = \"doc.title\";\n+        Object value = \"newTitle\";\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyApp\", \"mydoc\");\n+\n+        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.document);\n+\n+        when(this.document.isContentDirty()).thenReturn(true);\n+        when(this.document.getTitle()).thenReturn(\"oldTitle\");\n+        when(this.document.validate(this.xcontext)).thenReturn(false);\n+\n+        LiveDataException liveDataException = assertThrows(LiveDataException.class,\n+            () -> this.xClassPropertyService.update(property, value, documentReference, null));\n+        assertEquals(\"Document not validated.\", liveDataException.getMessage());\n+\n+        verify(this.document).setTitle(\"newTitle\");\n+        verify(this.xwiki, never()).saveDocument(this.document, \"LiveData update.\", true, this.xcontext);\n+    }\n+\n+    @Test\n+    void updateDocumentContentField() throws Exception\n+    {\n+        String property = \"doc.content\";\n+        Object value = \"newContent\";\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyApp\", \"mydoc\");\n+\n+        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.document);\n+\n+        when(this.document.isContentDirty()).thenReturn(true);\n+        when(this.document.getContent()).thenReturn(\"oldContent\");\n+        when(this.document.validate(this.xcontext)).thenReturn(true);\n+\n+        Optional<Object> update = this.xClassPropertyService.update(property, value, documentReference, null);\n+        assertTrue(update.isPresent());\n+        assertEquals(\"oldContent\", update.get());\n+        verify(this.document).setContent(\"newContent\");\n+        verify(this.xwiki).saveDocument(this.document, \"LiveData update.\", true, this.xcontext);\n+    }\n+\n+    @Test\n+    void updateAll() throws Exception\n+    {\n+        Map<String, Object> entries = new HashMap<>();\n+        entries.put(\"doc.hidden\", \"false\");\n+        entries.put(\"field\", 55);\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MyTest\", \"MyDoc\");\n+        DocumentReference classReference = new DocumentReference(\"xwiki\", \"MyTest\", \"MyClass\");\n+\n+        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.document);\n+        when(this.document.getXObject(classReference, 0)).thenReturn(this.baseObject);\n+        when(this.baseObject.getXClass(this.xcontext)).thenReturn(this.baseClass);\n+        when(this.baseObject.getPropertyNames()).thenReturn(new String[] { \"field\" });\n+        when(this.baseObject.get(\"field\")).thenReturn(this.propertyInterface);\n+\n+        this.xClassPropertyService.updateAll(entries, documentReference, classReference);\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"field\", 55);\n+        verify(this.baseClass).fromMap(map, this.baseObject);\n+        verify(this.document).setHidden(false);\n+\n+        verify(this.authorization).checkAccess(Right.EDIT, documentReference);\n+    }\n+}"
  },
  {
    "sha": "aaee4a17e66ffebea86a387ccea17bf18d9df237",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/Panels.WebHome.test",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/Panels.WebHome.test",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/Panels.WebHome.test",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/Panels.WebHome.test?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -61,6 +61,9 @@\n         \"sortable\":true,\n         \"visible\":true,\n         \"filterable\":true,\n+        \"displayer\":{\n+          \"id\":\"html\"\n+        },\n         \"filter\":{\n           \"id\":\"list\",\n           \"defaultOperator\":\"equals\""
  },
  {
    "sha": "000088b72132efb24b8d0f65d4af8f988e72bf51",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/restore.vm.test",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/restore.vm.test",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/restore.vm.test",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-livetable/src/test/resources/liveTableConfigHelper/restore.vm.test?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -7,6 +7,7 @@\n     \"_actions\": {\"actions\": [\"restore\", \"delete\"]}\n   },\n   \"options\": {\n+    \"className\":\"Class.Test.Name\",\n     \"url\": \"/xwiki/bin/get/Test/WebHome?xpage=getdeleteddocuments&doc.batchId=2872cd20-6cbf-4dad-af1d-77a30ba52ce8\",\n     \"translationPrefix\": \"core.restore.batch.\",\n     \"outputOnlyHtml\": true,\n@@ -25,6 +26,7 @@\n       \"template\":\"getdeleteddocuments.vm\",\n       \"$doc\":\"xwiki:Test.WebHome\",\n       \"translationPrefix\":\"core.restore.batch.\",\n+      \"className\":\"Class.Test.Name\",\n       \"doc.batchId\":\"2872cd20-6cbf-4dad-af1d-77a30ba52ce8\"\n     },\n     \"sort\":[\n@@ -50,7 +52,7 @@\n         \"visible\":true,\n         \"filterable\":true,\n         \"displayer\":{\n-          \"id\":\"html\"\n+          \"id\":\"xClassProperty\"\n         },\n         \"filter\":{\n           \"id\":\"text\""
  },
  {
    "sha": "d3db722da350974a7606dde5df862fab335d0e77",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/pom.xml",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/pom.xml",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/pom.xml?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -36,6 +36,7 @@\n     <checkstyle.suppressions.location>\n       ${basedir}/src/checkstyle/checkstyle-suppressions.xml\n     </checkstyle.suppressions.location>\n+    <xwiki.jacoco.instructionRatio>0.15</xwiki.jacoco.instructionRatio>\n   </properties>\n   <dependencies>\n     <dependency>\n@@ -59,6 +60,12 @@\n       <groupId>javax.ws.rs</groupId>\n       <artifactId>jsr311-api</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.xwiki.commons</groupId>\n+      <artifactId>xwiki-commons-tool-test-component</artifactId>\n+      <version>${commons.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>"
  },
  {
    "sha": "f10303865a1e33010a296f88feee480df2dbb06c",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResource.java",
    "status": "modified",
    "additions": 20,
    "deletions": 5,
    "changes": 25,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResource.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResource.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResource.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -28,6 +28,8 @@\n import javax.ws.rs.core.Response.Status;\n \n import org.xwiki.component.annotation.Component;\n+import org.xwiki.livedata.LiveDataException;\n+import org.xwiki.livedata.LiveDataPropertyDescriptor;\n import org.xwiki.livedata.LiveDataQuery;\n import org.xwiki.livedata.LiveDataSource;\n import org.xwiki.livedata.rest.LiveDataEntryPropertyResource;\n@@ -60,15 +62,28 @@ public Object getProperty(String sourceId, String namespace, String entryId, Str\n     }\n \n     @Override\n-    public Response setProperty(String sourceId, String namespace, String entryId, String propertyId, Object value)\n-        throws Exception\n+    public Response setProperty(String sourceId, String namespace, String entryId, String propertyId, String value)\n     {\n         LiveDataQuery.Source querySource = getLiveDataQuerySource(sourceId);\n         Optional<LiveDataSource> source = this.liveDataSourceManager.get(querySource, namespace);\n         if (source.isPresent()) {\n-            source.get().getEntries().update(entryId, propertyId, value);\n-            Optional<Object> newValue = source.get().getEntries().get(entryId, propertyId);\n-            return Response.status(Status.ACCEPTED).entity(newValue).build();\n+            try {\n+\n+                LiveDataSource liveDataSource = source.get();\n+                if (!(boolean) liveDataSource.getProperties().get(propertyId)\n+                    .map(LiveDataPropertyDescriptor::isEditable)\n+                    .orElse(false))\n+                {\n+                    // Do not update a field that cannot be edited.\n+                    return Response.status(Status.BAD_REQUEST).build();\n+                }\n+\n+                liveDataSource.getEntries().update(entryId, propertyId, value);\n+                Object newValue = liveDataSource.getEntries().get(entryId, propertyId).orElse(null);\n+                return Response.status(Status.ACCEPTED).entity(newValue).build();\n+            } catch (LiveDataException e) {\n+                return Response.status(Status.BAD_REQUEST).build();\n+            }\n         }\n \n         throw new WebApplicationException(Response.Status.NOT_FOUND);"
  },
  {
    "sha": "730e3832e8958045d1085460a584be0a3ee5d125",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResource.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResource.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResource.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -79,6 +79,8 @@ public Response updateEntry(String sourceId, String namespace, String entryId, E\n                     Entry updatedEntry =\n                         createEntry(values.get(), updatedEntryId.get(), config.getQuery().getSource(), namespace);\n                     return Response.status(Status.ACCEPTED).entity(updatedEntry).build();\n+                } else {\n+                    return Response.status(Status.ACCEPTED).build();\n                 }\n             }\n         }"
  },
  {
    "sha": "e87256eb64e007fcfe36f44aee76468749458b58",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/rest/LiveDataEntryPropertyResource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/rest/LiveDataEntryPropertyResource.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/rest/LiveDataEntryPropertyResource.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/main/java/org/xwiki/livedata/rest/LiveDataEntryPropertyResource.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -77,6 +77,6 @@ Response setProperty(\n         @QueryParam(\"namespace\") @DefaultValue(\"\") String namespace,\n         @PathParam(\"entryId\") String entryId,\n         @PathParam(\"propertyId\") String propertyId,\n-        Object value\n+        String value\n     ) throws Exception;\n }"
  },
  {
    "sha": "51b3110754ea4af65845d6dbfdde12d347b2913b",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResourceTest.java",
    "status": "added",
    "additions": 217,
    "deletions": 0,
    "changes": 217,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResourceTest.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResourceTest.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryPropertyResourceTest.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,217 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.livedata.internal.rest;\n+\n+import java.util.Optional;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriInfo;\n+\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.xwiki.component.manager.ComponentManager;\n+import org.xwiki.context.Execution;\n+import org.xwiki.context.ExecutionContext;\n+import org.xwiki.livedata.LiveDataConfiguration;\n+import org.xwiki.livedata.LiveDataConfigurationResolver;\n+import org.xwiki.livedata.LiveDataEntryStore;\n+import org.xwiki.livedata.LiveDataException;\n+import org.xwiki.livedata.LiveDataPropertyDescriptor;\n+import org.xwiki.livedata.LiveDataPropertyDescriptorStore;\n+import org.xwiki.livedata.LiveDataQuery;\n+import org.xwiki.livedata.LiveDataSource;\n+import org.xwiki.livedata.LiveDataSourceManager;\n+import org.xwiki.test.annotation.BeforeComponent;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectComponentManager;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.test.mockito.MockitoComponentManager;\n+\n+import com.xpn.xwiki.XWikiContext;\n+\n+import static javax.ws.rs.core.Response.Status.ACCEPTED;\n+import static javax.ws.rs.core.Response.Status.BAD_REQUEST;\n+import static javax.ws.rs.core.Response.Status.NOT_FOUND;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test of {@link DefaultLiveDataEntryPropertyResource}.\n+ *\n+ * @version $Id$\n+ * @since 13.2RC1\n+ * @since 12.10.6\n+ */\n+@ComponentTest\n+class DefaultLiveDataEntryPropertyResourceTest\n+{\n+    @InjectMockComponents\n+    private DefaultLiveDataEntryPropertyResource defaultLiveDataEntryPropertyResource;\n+\n+    @MockComponent\n+    private LiveDataSourceManager liveDataSourceManager;\n+\n+    @MockComponent\n+    private LiveDataConfigurationResolver<LiveDataConfiguration> defaultLiveDataConfigResolver;\n+\n+    @InjectComponentManager\n+    private MockitoComponentManager componentManager;\n+\n+    @Mock\n+    private LiveDataSource liveDataSource;\n+\n+    @Mock\n+    private LiveDataEntryStore liveDataEntryStore;\n+\n+    @Mock\n+    private LiveDataPropertyDescriptorStore liveDataPropertyDescriptorStore;\n+\n+    @Mock\n+    private LiveDataPropertyDescriptor liveDataPropertyDescriptor;\n+\n+    @BeforeComponent\n+    void configure() throws Exception\n+    {\n+        ComponentManager contextComponentManager =\n+            this.componentManager.registerMockComponent(ComponentManager.class, \"context\");\n+        Execution execution = mock(Execution.class);\n+        when(contextComponentManager.getInstance(Execution.class)).thenReturn(execution);\n+        ExecutionContext executionContext = new ExecutionContext();\n+        XWikiContext xcontext = mock(XWikiContext.class);\n+        executionContext.setProperty(\"xwikicontext\", xcontext);\n+        when(execution.getContext()).thenReturn(executionContext);\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n+    {\n+        UriInfo uriInfo = mock(UriInfo.class);\n+        FieldUtils.writeField(this.defaultLiveDataEntryPropertyResource, \"uriInfo\", uriInfo, true);\n+        when(uriInfo.getQueryParameters()).thenReturn(mock(MultivaluedMap.class));\n+    }\n+\n+    @Test\n+    void getPropertySourceNotFound()\n+    {\n+        when(this.liveDataSourceManager.get(new LiveDataQuery.Source(\"sourceIdTest\"), null))\n+            .thenReturn(Optional.empty());\n+        WebApplicationException webApplicationException = assertThrows(WebApplicationException.class,\n+            () -> this.defaultLiveDataEntryPropertyResource\n+                .getProperty(\"sourceIdTest\", null, \"entryIdTest\", \"propertyIdTest\"));\n+        assertEquals(NOT_FOUND.getStatusCode(), webApplicationException.getResponse().getStatus());\n+    }\n+\n+    @Test\n+    void getPropertyEntryStoreGetIsEmpty() throws Exception\n+    {\n+        when(this.liveDataSourceManager.get(new LiveDataQuery.Source(\"sourceIdTest\"), null))\n+            .thenReturn(Optional.of(this.liveDataSource));\n+        when(this.liveDataSource.getEntries()).thenReturn(this.liveDataEntryStore);\n+        when(this.liveDataEntryStore.get(\"entryIdTest\", \"propertyIdTest\")).thenReturn(Optional.empty());\n+        WebApplicationException webApplicationException = assertThrows(WebApplicationException.class,\n+            () -> this.defaultLiveDataEntryPropertyResource\n+                .getProperty(\"sourceIdTest\", null, \"entryIdTest\", \"propertyIdTest\"));\n+        assertEquals(NOT_FOUND.getStatusCode(), webApplicationException.getResponse().getStatus());\n+    }\n+\n+    @Test\n+    void getProperty() throws Exception\n+    {\n+        when(this.liveDataSourceManager.get(new LiveDataQuery.Source(\"sourceIdTest\"), null))\n+            .thenReturn(Optional.of(this.liveDataSource));\n+        when(this.liveDataSource.getEntries()).thenReturn(this.liveDataEntryStore);\n+        when(this.liveDataEntryStore.get(\"entryIdTest\", \"propertyIdTest\")).thenReturn(Optional.of(\"result\"));\n+        Object property = this.defaultLiveDataEntryPropertyResource\n+            .getProperty(\"sourceIdTest\", null, \"entryIdTest\", \"propertyIdTest\");\n+        assertEquals(\"result\", property);\n+    }\n+\n+    @Test\n+    void setPropertySourceNotFound()\n+    {\n+        when(this.liveDataSourceManager.get(new LiveDataQuery.Source(\"sourceIdTest\"), null))\n+            .thenReturn(Optional.empty());\n+\n+        WebApplicationException webApplicationException =\n+            assertThrows(WebApplicationException.class, () -> this.defaultLiveDataEntryPropertyResource\n+                .setProperty(\"sourceIdTest\", null, \"entryIdTest\", \"propertyIdTest\", \"valueTest\"));\n+        assertEquals(NOT_FOUND.getStatusCode(), webApplicationException.getResponse().getStatus());\n+    }\n+\n+    @Test\n+    void setPropertyEntryNotFound() throws LiveDataException\n+    {\n+        when(this.liveDataSourceManager.get(new LiveDataQuery.Source(\"sourceIdTest\"), null))\n+            .thenReturn(Optional.of(this.liveDataSource));\n+\n+        when(this.liveDataSource.getProperties()).thenReturn(this.liveDataPropertyDescriptorStore);\n+        when(this.liveDataPropertyDescriptorStore.get(\"propertyIdTest\")).thenReturn(Optional.empty());\n+\n+        Response response = this.defaultLiveDataEntryPropertyResource\n+            .setProperty(\"sourceIdTest\", null, \"entryIdTest\", \"propertyIdTest\", \"valueTest\");\n+        assertEquals(BAD_REQUEST.getStatusCode(), response.getStatus());\n+    }\n+\n+    @Test\n+    void setPropertyEntryNotEditable() throws LiveDataException\n+    {\n+        when(this.liveDataSourceManager.get(new LiveDataQuery.Source(\"sourceIdTest\"), null))\n+            .thenReturn(Optional.of(this.liveDataSource));\n+\n+        when(this.liveDataSource.getProperties()).thenReturn(this.liveDataPropertyDescriptorStore);\n+        when(this.liveDataPropertyDescriptorStore.get(\"propertyIdTest\"))\n+            .thenReturn(Optional.of(this.liveDataPropertyDescriptor));\n+        when(this.liveDataPropertyDescriptor.isEditable()).thenReturn(false);\n+\n+        Response response = this.defaultLiveDataEntryPropertyResource\n+            .setProperty(\"sourceIdTest\", null, \"entryIdTest\", \"propertyIdTest\", \"valueTest\");\n+        assertEquals(BAD_REQUEST.getStatusCode(), response.getStatus());\n+    }\n+\n+    @Test\n+    void setProperty() throws LiveDataException\n+    {\n+        when(this.liveDataSourceManager.get(new LiveDataQuery.Source(\"sourceIdTest\"), null))\n+            .thenReturn(Optional.of(this.liveDataSource));\n+\n+        when(this.liveDataSource.getProperties()).thenReturn(this.liveDataPropertyDescriptorStore);\n+        when(this.liveDataPropertyDescriptorStore.get(\"propertyIdTest\"))\n+            .thenReturn(Optional.of(this.liveDataPropertyDescriptor));\n+        when(this.liveDataPropertyDescriptor.isEditable()).thenReturn(true);\n+        when(this.liveDataSource.getEntries()).thenReturn(this.liveDataEntryStore);\n+        when(this.liveDataEntryStore.get(\"entryIdTest\", \"propertyIdTest\"))\n+            .thenReturn(Optional.of(\"result\"));\n+\n+        Response response = this.defaultLiveDataEntryPropertyResource\n+            .setProperty(\"sourceIdTest\", null, \"entryIdTest\", \"propertyIdTest\", \"valueTest\");\n+\n+        assertEquals(ACCEPTED.getStatusCode(), response.getStatus());\n+        assertEquals(\"result\", response.getEntity());\n+        verify(this.liveDataEntryStore).update(\"entryIdTest\", \"propertyIdTest\", \"valueTest\");\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4bf135418f4fb734cde67c86adc7aef9f2c3e598",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResourceTest.java",
    "status": "added",
    "additions": 191,
    "deletions": 0,
    "changes": 191,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResourceTest.java",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResourceTest.java",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-rest/src/test/java/org/xwiki/livedata/internal/rest/DefaultLiveDataEntryResourceTest.java?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,191 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.livedata.internal.rest;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriInfo;\n+\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.xwiki.component.manager.ComponentManager;\n+import org.xwiki.context.Execution;\n+import org.xwiki.context.ExecutionContext;\n+import org.xwiki.livedata.LiveDataConfiguration;\n+import org.xwiki.livedata.LiveDataConfigurationResolver;\n+import org.xwiki.livedata.LiveDataEntryDescriptor;\n+import org.xwiki.livedata.LiveDataEntryStore;\n+import org.xwiki.livedata.LiveDataMeta;\n+import org.xwiki.livedata.LiveDataPropertyDescriptor;\n+import org.xwiki.livedata.LiveDataPropertyDescriptorStore;\n+import org.xwiki.livedata.LiveDataQuery;\n+import org.xwiki.livedata.LiveDataSource;\n+import org.xwiki.livedata.LiveDataSourceManager;\n+import org.xwiki.livedata.rest.model.jaxb.Entry;\n+import org.xwiki.livedata.rest.model.jaxb.StringMap;\n+import org.xwiki.test.annotation.BeforeComponent;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectComponentManager;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.test.mockito.MockitoComponentManager;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.xpn.xwiki.XWikiContext;\n+\n+import static javax.ws.rs.core.Response.Status.ACCEPTED;\n+import static javax.ws.rs.core.Response.Status.NOT_FOUND;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test of {@link DefaultLiveDataEntryResource}.\n+ *\n+ * @version $Id$\n+ * @since 13.2RC1\n+ * @since 12.10.6\n+ */\n+@ComponentTest\n+class DefaultLiveDataEntryResourceTest\n+{\n+    @InjectMockComponents\n+    private DefaultLiveDataEntryResource defaultLiveDataEntryPropertyResource;\n+\n+    @InjectComponentManager\n+    private MockitoComponentManager componentManager;\n+\n+    @MockComponent\n+    protected LiveDataSourceManager liveDataSourceManager;\n+\n+    @MockComponent\n+    protected LiveDataConfigurationResolver<LiveDataConfiguration> defaultLiveDataConfigResolver;\n+\n+    @Mock\n+    private LiveDataSource liveDataSource;\n+\n+    @Mock\n+    private LiveDataEntryStore liveDataEntryStore;\n+\n+    @Mock\n+    private LiveDataPropertyDescriptorStore liveDataPropertyDescriptorStore;\n+\n+    @Mock\n+    private LiveDataPropertyDescriptor liveDataPropertyDescriptor;\n+\n+    @Mock\n+    private UriInfo uriInfo;\n+\n+    private final LiveDataQuery.Source source = new LiveDataQuery.Source(\"sourceIdTest\");\n+\n+    @BeforeComponent\n+    void configure() throws Exception\n+    {\n+        ComponentManager contextComponentManager =\n+            this.componentManager.registerMockComponent(ComponentManager.class, \"context\");\n+        Execution execution = mock(Execution.class);\n+        when(contextComponentManager.getInstance(Execution.class)).thenReturn(execution);\n+        ExecutionContext executionContext = new ExecutionContext();\n+        XWikiContext xcontext = mock(XWikiContext.class);\n+        executionContext.setProperty(\"xwikicontext\", xcontext);\n+        when(execution.getContext()).thenReturn(executionContext);\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n+    {\n+\n+        FieldUtils.writeField(this.defaultLiveDataEntryPropertyResource, \"uriInfo\", uriInfo, true);\n+        when(uriInfo.getQueryParameters()).thenReturn(mock(MultivaluedMap.class));\n+\n+        LiveDataQuery query = new LiveDataQuery();\n+        query.setSource(this.source);\n+        LiveDataConfiguration liveDataConfiguration = new LiveDataConfiguration();\n+        liveDataConfiguration.setQuery(query);\n+        LiveDataMeta meta = new LiveDataMeta();\n+        LiveDataEntryDescriptor entryDescriptor = new LiveDataEntryDescriptor();\n+        entryDescriptor.setIdProperty(\"idPropertyTest\");\n+        meta.setEntryDescriptor(entryDescriptor);\n+        liveDataConfiguration.setMeta(meta);\n+\n+        when(this.defaultLiveDataConfigResolver.resolve(any())).thenReturn(liveDataConfiguration);\n+    }\n+\n+    @Test\n+    void updateEntrySourceMissing()\n+    {\n+        Entry entry = new Entry();\n+        when(this.liveDataSourceManager.get(this.source, null)).thenReturn(Optional.empty());\n+\n+        WebApplicationException webApplicationException = assertThrows(WebApplicationException.class,\n+            () -> this.defaultLiveDataEntryPropertyResource.updateEntry(\"sourceIdTest\", null, \"entryIdTest\", entry));\n+        assertEquals(NOT_FOUND.getStatusCode(), webApplicationException.getResponse().getStatus());\n+    }\n+\n+    @Test\n+    void updateEntrySaveFail() throws Exception\n+    {\n+        Entry entry = new Entry();\n+        entry.setValues(new StringMap());\n+        when(this.liveDataSourceManager.get(this.source, null)).thenReturn(Optional.of(this.liveDataSource));\n+        when(this.liveDataSource.getEntries()).thenReturn(this.liveDataEntryStore);\n+        when(this.liveDataEntryStore.save(entry.getValues())).thenReturn(Optional.empty());\n+\n+        WebApplicationException webApplicationException = assertThrows(WebApplicationException.class,\n+            () -> this.defaultLiveDataEntryPropertyResource.updateEntry(\"sourceIdTest\", null, \"entryIdTest\", entry));\n+        assertEquals(NOT_FOUND.getStatusCode(), webApplicationException.getResponse().getStatus());\n+        verify(this.liveDataEntryStore).save(entry.getValues());\n+        assertEquals(\"entryIdTest\", entry.getValues().get(\"idPropertyTest\"));\n+    }\n+\n+    @Test\n+    void updateEntry() throws Exception\n+    {\n+        Entry entry = new Entry();\n+        entry.setValues(new StringMap());\n+        when(this.liveDataSourceManager.get(this.source, null)).thenReturn(Optional.of(this.liveDataSource));\n+        when(this.liveDataSource.getEntries()).thenReturn(this.liveDataEntryStore);\n+        when(this.liveDataEntryStore.save(entry.getValues())).thenReturn(Optional.of(\"sourceIdTest\"));\n+        when(this.liveDataEntryStore.get(\"sourceIdTest\")).thenReturn(Optional.of(new HashMap<>()));\n+        when(this.uriInfo.getBaseUri()).thenReturn(URI.create(\"http://test.org/\"));\n+\n+        Response response =\n+            this.defaultLiveDataEntryPropertyResource.updateEntry(\"sourceIdTest\", null, \"entryIdTest\", entry);\n+        assertEquals(ACCEPTED.getStatusCode(), response.getStatus());\n+        assertEquals(\n+            \"{\\\"links\\\":[{\\\"href\\\":\\\"http://test.org//liveData/sources/sourceIdTest/entries/sourceIdTest\\\",\"\n+                + \"\\\"rel\\\":\\\"self\\\",\\\"type\\\":null,\\\"hrefLang\\\":null},\"\n+                + \"{\\\"href\\\":\\\"http://test.org//liveData/sources/sourceIdTest/entries\\\",\"\n+                + \"\\\"rel\\\":\\\"http://www.xwiki.org/rel/parent\\\",\\\"type\\\":null,\\\"hrefLang\\\":null}],\\\"values\\\":{}}\",\n+            new ObjectMapper().writeValueAsString(response.getEntity()));\n+        verify(this.liveDataEntryStore).save(entry.getValues());\n+        assertEquals(\"entryIdTest\", entry.getValues().get(\"idPropertyTest\"));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bb1f420cb3ad29d3d36da8fed5849f53a4689033",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/pom.xml",
    "status": "modified",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/pom.xml",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/pom.xml",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/pom.xml?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -94,6 +94,42 @@\n               </resources>\n             </configuration>\n           </execution>\n+          <execution>\n+            <!-- We keep the Vue files and the build configuration files in separate folders in the source tree but\n+              we need them in the same folder when building the Vue components. -->\n+            <id>copy-webjar-resources</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>copy-resources</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.build.directory}/vue</outputDirectory>\n+              <resources>\n+                <resource>\n+                  <directory>src/main/vue</directory>\n+                </resource>\n+                <resource>\n+                  <directory>src/main/config</directory>\n+                </resource>\n+              </resources>\n+            </configuration>\n+          </execution>\n+          <execution>\n+            <!-- We need to copy the tests in the target directory. -->\n+            <id>copy-vue-tests</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>copy-resources</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.build.directory}/vue/tests</outputDirectory>\n+              <resources>\n+                <resource>\n+                  <directory>src/main/tests</directory>\n+                </resource>\n+              </resources>\n+            </configuration>\n+          </execution>\n           <execution>\n             <!-- Copy the generated Vue components to the WebJar folder. -->\n             <id>copy-vue-components</id>\n@@ -155,6 +191,16 @@\n               <arguments>run build</arguments>\n             </configuration>\n           </execution>\n+          <execution>\n+            <id>npm-run-test</id>\n+            <goals>\n+              <goal>npm</goal>\n+            </goals>\n+            <configuration>\n+              <arguments>run test</arguments>\n+            </configuration>\n+            <phase>test</phase>\n+          </execution>\n         </executions>\n         <configuration>\n           <workingDirectory>${project.build.directory}/vue</workingDirectory>"
  },
  {
    "sha": "3668689314cee67437ef4498d7283b52dbdaf808",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/jest.config.js",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/jest.config.js",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/jest.config.js",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/jest.config.js?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+module.exports = {\n+  preset: '@vue/cli-plugin-unit-jest/presets/no-babel',\n+  modulePaths: ['tests/mocks']\n+}"
  },
  {
    "sha": "0799e1dd091b9f83f7390e27846eec18371cb678",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/package.json",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/package.json",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/package.json",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/config/package.json?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -5,7 +5,8 @@\n   \"scripts\": {\n     \"build\": \"vue-cli-service build --target lib --formats umd-min XWikiLivedata.vue\",\n     \"inspect\": \"vue-cli-service inspect > inspection.js\",\n-    \"lint\": \"vue-cli-service lint\"\n+    \"lint\": \"vue-cli-service lint\",\n+    \"test\": \"vue-cli-service test:unit\"\n   },\n   \"dependencies\": {\n     \"vue\": \"^2.6.12\",\n@@ -22,6 +23,8 @@\n     \"eslint-plugin-vue\": \"^7.5.0\",\n     \"less\": \"^4.1.1\",\n     \"less-loader\": \"^8.0.0\",\n-    \"vue-template-compiler\": \"^2.6.12\"\n+    \"vue-template-compiler\": \"^2.6.12\",\n+    \"@vue/cli-plugin-unit-jest\": \"~4.5.0\",\n+    \"@vue/test-utils\": \"^1.0.3\"\n   }\n }"
  },
  {
    "sha": "a8b5e8895c823fc817cfe475ded46cb7373a9f3e",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/daterangepicker.js",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/daterangepicker.js",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/daterangepicker.js",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/daterangepicker.js?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,19 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "a8b5e8895c823fc817cfe475ded46cb7373a9f3e",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/jquery.js",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/jquery.js",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/jquery.js",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/jquery.js?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,19 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "a8b5e8895c823fc817cfe475ded46cb7373a9f3e",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/moment.js",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/moment.js",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/moment.js",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/mocks/moment.js?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,19 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "49f06319d39a1f3a0d037b208a18061fb9633a6a",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/BaseDisplayer.spec.js",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/BaseDisplayer.spec.js",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/BaseDisplayer.spec.js",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/BaseDisplayer.spec.js?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+import BaseDisplayer from \"../../../displayers/BaseDisplayer\";\n+import {initWrapper} from \"./displayersTestsHelper\";\n+\n+describe('BaseDisplayer.vue', () => {\n+  it('Renders an entry in view mode', () => {\n+    const wrapper = initWrapper(BaseDisplayer, {});\n+\n+    expect(wrapper.text()).toMatch('entryA1')\n+  })\n+\n+  it('Send event on double click', async () => {\n+    const wrapper = initWrapper(BaseDisplayer, {});\n+\n+    const viewerDiv = wrapper.find('div[tabindex=\"0\"]');\n+    await viewerDiv.trigger('dblclick');\n+\n+    expect(wrapper.emitted()).toEqual({\"update:isView\": [[false]]})\n+  })\n+\n+  it('Renders an entry in edit mode', () => {\n+    const wrapper = initWrapper(BaseDisplayer, {\n+      props: {\n+        isView: false\n+      }\n+    });\n+\n+    expect(wrapper.find('input').element.value).toMatch('entryA1')\n+  })\n+\n+  it('Send an event on save', async () => {\n+    const wrapper = initWrapper(BaseDisplayer, {\n+      props: {\n+        isView: false\n+      }\n+    })\n+\n+    wrapper.find('input').setValue('test-value');\n+\n+    await wrapper.find('div[tabindex=\"0\"]').trigger('keypress.enter');\n+\n+    let events = wrapper.emitted();\n+    // Checks that the value is sent on the save event.\n+    // Thens checks that we switch back to the view mode.\n+    expect(events.saveEdit[0]).toEqual(['test-value']);\n+    expect(events['update:isView'][0]).toEqual([true]);\n+  })\n+\n+})\n\\ No newline at end of file"
  },
  {
    "sha": "0302b9352e0a85d83b4fa81388837ee9c7cb541e",
    "filename": "xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/DisplayerActions.spec.js",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/xwiki/xwiki-platform/blob/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/DisplayerActions.spec.js",
    "raw_url": "https://github.com/xwiki/xwiki-platform/raw/85ae20e2a4a9cac393e113baad61d370d137f1fd/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/DisplayerActions.spec.js",
    "contents_url": "https://api.github.com/repos/xwiki/xwiki-platform/contents/xwiki-platform-core/xwiki-platform-livedata/xwiki-platform-livedata-webjar/src/main/tests/unit/displayers/DisplayerActions.spec.js?ref=85ae20e2a4a9cac393e113baad61d370d137f1fd",
    "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+import DisplayerActions from \"../../../displayers/DisplayerActions\";\n+import {initWrapper} from \"./displayersTestsHelper\";\n+\n+describe('DisplayerActions.vue', () => {\n+  it('Renders an entry in view mode', () => {\n+    const wrapper = initWrapper(DisplayerActions, {})\n+    expect(wrapper.text()).toMatch('action1')\n+  })\n+})\n\\ No newline at end of file"
  }
]
