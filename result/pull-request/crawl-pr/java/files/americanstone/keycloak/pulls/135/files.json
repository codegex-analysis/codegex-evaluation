[
  {
    "sha": "6a46e33d93a45aa2749e447a0f98160a2b7801e0",
    "filename": "adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/AbstractKeycloakAuthenticatorValve.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/AbstractKeycloakAuthenticatorValve.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/AbstractKeycloakAuthenticatorValve.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/AbstractKeycloakAuthenticatorValve.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -101,7 +101,7 @@ public void keycloakInit() {\n         // Possible scenarios:\n         // 1) The deployment has a keycloak.config.resolver specified and it exists:\n         //    Outcome: adapter uses the resolver\n-        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exists, isn't a resolver, ...) :\n+        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exist, isn't a resolver, ...) :\n         //    Outcome: adapter is left unconfigured\n         // 3) The deployment doesn't have a keycloak.config.resolver , but has a keycloak.json (or equivalent)\n         //    Outcome: adapter uses it"
  },
  {
    "sha": "b73832192ab8cfa82e24b7251c03e1f3bc22e0b9",
    "filename": "adapters/oidc/undertow/src/main/java/org/keycloak/adapters/undertow/KeycloakServletExtension.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/oidc/undertow/src/main/java/org/keycloak/adapters/undertow/KeycloakServletExtension.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/oidc/undertow/src/main/java/org/keycloak/adapters/undertow/KeycloakServletExtension.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/adapters/oidc/undertow/src/main/java/org/keycloak/adapters/undertow/KeycloakServletExtension.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -115,7 +115,7 @@ public void handleDeployment(DeploymentInfo deploymentInfo, ServletContext servl\n         // Possible scenarios:\n         // 1) The deployment has a keycloak.config.resolver specified and it exists:\n         //    Outcome: adapter uses the resolver\n-        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exists, isn't a resolver, ...) :\n+        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exist, isn't a resolver, ...) :\n         //    Outcome: adapter is left unconfigured\n         // 3) The deployment doesn't have a keycloak.config.resolver , but has a keycloak.json (or equivalent)\n         //    Outcome: adapter uses it"
  },
  {
    "sha": "f8968c8070758e787e86fcdda76a5d8c30e4d236",
    "filename": "adapters/saml/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/saml/AbstractSamlAuthenticatorValve.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/saml/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/saml/AbstractSamlAuthenticatorValve.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/saml/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/saml/AbstractSamlAuthenticatorValve.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/adapters/saml/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/saml/AbstractSamlAuthenticatorValve.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -87,7 +87,7 @@ public void keycloakInit() {\n         // Possible scenarios:\n         // 1) The deployment has a keycloak.config.resolver specified and it exists:\n         //    Outcome: adapter uses the resolver\n-        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exists, isn't a resolver, ...) :\n+        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exist, isn't a resolver, ...) :\n         //    Outcome: adapter is left unconfigured\n         // 3) The deployment doesn't have a keycloak.config.resolver , but has a keycloak.json (or equivalent)\n         //    Outcome: adapter uses it"
  },
  {
    "sha": "931ecd7169ea28414b9275bd104c885b99de6f31",
    "filename": "adapters/saml/undertow/src/main/java/org/keycloak/adapters/saml/undertow/SamlServletExtension.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/saml/undertow/src/main/java/org/keycloak/adapters/saml/undertow/SamlServletExtension.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/adapters/saml/undertow/src/main/java/org/keycloak/adapters/saml/undertow/SamlServletExtension.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/adapters/saml/undertow/src/main/java/org/keycloak/adapters/saml/undertow/SamlServletExtension.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -108,7 +108,7 @@ public void handleDeployment(DeploymentInfo deploymentInfo, final ServletContext\n         // Possible scenarios:\n         // 1) The deployment has a keycloak.config.resolver specified and it exists:\n         //    Outcome: adapter uses the resolver\n-        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exists, isn't a resolver, ...) :\n+        // 2) The deployment has a keycloak.config.resolver and isn't valid (doesn't exist, isn't a resolver, ...) :\n         //    Outcome: adapter is left unconfigured\n         // 3) The deployment doesn't have a keycloak.config.resolver , but has a keycloak.json (or equivalent)\n         //    Outcome: adapter uses it"
  },
  {
    "sha": "3eef1c5cbf50482ef29931254ecae4784a6dcc92",
    "filename": "distribution/feature-packs/server-feature-pack/src/main/resources/modules/system/layers/keycloak/org/keycloak/keycloak-saml-core/main/module.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/distribution/feature-packs/server-feature-pack/src/main/resources/modules/system/layers/keycloak/org/keycloak/keycloak-saml-core/main/module.xml",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/distribution/feature-packs/server-feature-pack/src/main/resources/modules/system/layers/keycloak/org/keycloak/keycloak-saml-core/main/module.xml",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/distribution/feature-packs/server-feature-pack/src/main/resources/modules/system/layers/keycloak/org/keycloak/keycloak-saml-core/main/module.xml?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -35,5 +35,6 @@\n             </imports>\n         </module>\n         <module name=\"javax.api\"/>\n+        <module name=\"javax.xml.bind.api\"/>\n     </dependencies>\n </module>"
  },
  {
    "sha": "01eacdceb02554b6e175045ca5b6e0ac2901af38",
    "filename": "distribution/saml-adapters/as7-eap6-adapter/as7-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/distribution/saml-adapters/as7-eap6-adapter/as7-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/distribution/saml-adapters/as7-eap6-adapter/as7-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/distribution/saml-adapters/as7-eap6-adapter/as7-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -36,6 +36,7 @@\n             </imports>\n         </module>\n         <module name=\"javax.api\"/>\n+        <module name=\"javax.xml.bind.api\" optional=\"true\" />\n         <module name=\"org.apache.httpcomponents\"/>\n     </dependencies>\n "
  },
  {
    "sha": "64b079211b0b4ccad8df1196341afd6f96823d30",
    "filename": "distribution/saml-adapters/wildfly-adapter/wildfly-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/distribution/saml-adapters/wildfly-adapter/wildfly-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/distribution/saml-adapters/wildfly-adapter/wildfly-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/distribution/saml-adapters/wildfly-adapter/wildfly-modules/src/main/resources/modules/org/keycloak/keycloak-saml-core/main/module.xml?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -36,6 +36,7 @@\n             </imports>\n         </module>\n         <module name=\"javax.api\"/>\n+        <module name=\"javax.xml.bind.api\"/>\n         <module name=\"org.apache.httpcomponents\"/>\n     </dependencies>\n "
  },
  {
    "sha": "925206c321d730e565a5c106ba21ae4d1e27bc06",
    "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java",
    "status": "modified",
    "additions": 30,
    "deletions": 3,
    "changes": 33,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -486,8 +486,11 @@ protected LDAPObject loadAndValidateUser(RealmModel realm, UserModel local) {\n             return existing;\n         }\n \n-        LDAPObject ldapUser = loadLDAPUserByUsername(realm, local.getUsername());\n-        if (ldapUser == null) {\n+        String uuidLdapAttribute = local.getFirstAttribute(LDAPConstants.LDAP_ID);\n+\n+        LDAPObject ldapUser = loadLDAPUserByUuid(realm, uuidLdapAttribute);\n+\n+        if(ldapUser == null){\n             return null;\n         }\n         LDAPUtils.checkUuid(ldapUser, ldapIdentityStore.getConfig());\n@@ -516,7 +519,17 @@ protected UserModel importUserFromLDAP(KeycloakSession session, RealmModel realm\n \n         UserModel imported = null;\n         if (model.isImportEnabled()) {\n-            imported = session.userLocalStorage().addUser(realm, ldapUsername);\n+            // Search if there is already an existing user, which means the username might have changed in LDAP without Keycloak knowing about it\n+            UserModel existingLocalUser = session.userLocalStorage()\n+                    .searchForUserByUserAttributeStream(realm, LDAPConstants.LDAP_ID, ldapUser.getUuid()).findFirst().orElse(null);\n+            if(existingLocalUser != null){\n+                imported = existingLocalUser;\n+                // Need to evict the existing user from cache\n+                session.userCache().evict(realm, existingLocalUser);\n+            } else {\n+                imported = session.userLocalStorage().addUser(realm, ldapUsername);\n+            }\n+\n         } else {\n             InMemoryUserAdapter adapter = new InMemoryUserAdapter(session, realm, new StorageId(model.getId(), ldapUsername).getId());\n             adapter.addDefaults();\n@@ -803,5 +816,19 @@ public LDAPObject loadLDAPUserByUsername(RealmModel realm, String username) {\n         }\n     }\n \n+    public LDAPObject loadLDAPUserByUuid(RealmModel realm, String uuid) {\n+        if(uuid == null){\n+            return null;\n+        }\n+        try (LDAPQuery ldapQuery = LDAPUtils.createQueryForUserSearch(this, realm)) {\n+            LDAPQueryConditionsBuilder conditionsBuilder = new LDAPQueryConditionsBuilder();\n+\n+            String uuidLDAPAttributeName = this.ldapIdentityStore.getConfig().getUuidLDAPAttributeName();\n+            Condition usernameCondition = conditionsBuilder.equal(uuidLDAPAttributeName, uuid, EscapeStrategy.DEFAULT);\n+            ldapQuery.addWhereCondition(usernameCondition);\n+\n+            return ldapQuery.getFirstResult();\n+        }\n+    }\n \n }"
  },
  {
    "sha": "07facdb3d30e3eaf172bfe625abaa75b6e34c83e",
    "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -64,6 +64,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n@@ -593,16 +594,18 @@ public void run(KeycloakSession session) {\n                         String username = LDAPUtils.getUsername(ldapUser, ldapFedProvider.getLdapIdentityStore().getConfig());\n                         exists.value = true;\n                         LDAPUtils.checkUuid(ldapUser, ldapFedProvider.getLdapIdentityStore().getConfig());\n-                        UserModel currentUser = session.userLocalStorage().getUserByUsername(currentRealm, username);\n-\n-                        if (currentUser == null) {\n-\n+                        UserModel currentUserLocal = session.userLocalStorage().getUserByUsername(currentRealm, username);\n+                        Optional<UserModel> userModelOptional = session.userLocalStorage()\n+                                .searchForUserByUserAttributeStream(currentRealm, LDAPConstants.LDAP_ID, ldapUser.getUuid())\n+                                .findFirst();\n+                        if (!userModelOptional.isPresent() && currentUserLocal == null) {\n                             // Add new user to Keycloak\n                             exists.value = false;\n                             ldapFedProvider.importUserFromLDAP(session, currentRealm, ldapUser);\n                             syncResult.increaseAdded();\n \n                         } else {\n+                            UserModel currentUser = userModelOptional.isPresent() ? userModelOptional.get() : currentUserLocal;\n                             if ((fedModel.getId().equals(currentUser.getFederationLink())) && (ldapUser.getUuid().equals(currentUser.getFirstAttribute(LDAPConstants.LDAP_ID)))) {\n \n                                 // Update keycloak user\n@@ -621,7 +624,7 @@ public void run(KeycloakSession session) {\n                                 logger.debugf(\"Updated user from LDAP: %s\", currentUser.getUsername());\n                                 syncResult.increaseUpdated();\n                             } else {\n-                                logger.warnf(\"User '%s' is not updated during sync as he already exists in Keycloak database but is not linked to federation provider '%s'\", username, fedModel.getName());\n+                                logger.warnf(\"User with ID '%s' is not updated during sync as he already exists in Keycloak database but is not linked to federation provider '%s'\", ldapUser.getUuid(), fedModel.getName());\n                                 syncResult.increaseFailed();\n                             }\n                         }"
  },
  {
    "sha": "66328fcbec91ceafac36b846c0d33563ea03895b",
    "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -287,7 +287,7 @@ private void syncFlatGroupStructure(RealmModel realm, SynchronizationResult sync\n             });\n         }\n \n-        // Possibly remove keycloak groups, which doesn't exists in LDAP\n+        // Possibly remove keycloak groups, which don't exist in LDAP\n         if (config.isDropNonExistingGroupsDuringSync()) {\n             dropNonExistingKcGroups(realm, syncResult, visitedGroupIds);\n         }\n@@ -300,7 +300,7 @@ private void updateKeycloakGroupTree(RealmModel realm, List<GroupTreeResolver.Gr\n             updateKeycloakGroupTreeEntry(realm, groupEntry, ldapGroups, null, syncResult, visitedGroupIds);\n         }\n \n-        // Possibly remove keycloak groups, which doesn't exists in LDAP\n+        // Possibly remove keycloak groups, which don't exist in LDAP\n         if (config.isDropNonExistingGroupsDuringSync()) {\n             dropNonExistingKcGroups(realm, syncResult, visitedGroupIds);\n         }\n@@ -337,7 +337,7 @@ private void updateKeycloakGroupTreeEntry(RealmModel realm, GroupTreeResolver.Gr\n     }\n \n     private void dropNonExistingKcGroups(RealmModel realm, SynchronizationResult syncResult, Set<String> visitedGroupIds) {\n-        // Remove keycloak groups, which doesn't exists in LDAP\n+        // Remove keycloak groups, which don't exist in LDAP\n         getAllKcGroups(realm)\n                 .filter(kcGroup -> !visitedGroupIds.contains(kcGroup.getId()))\n                 .forEach(kcGroup -> {\n@@ -398,7 +398,7 @@ protected GroupModel findKcGroupOrSyncFromLDAP(RealmModel realm, LDAPObject ldap\n             // Could theoretically happen on some LDAP servers if 'memberof' style is used and 'memberof' attribute of user references non-existing group\n             if (kcGroup == null) {\n                 String groupName = ldapGroup.getAttributeAsString(config.getGroupNameLdapAttribute());\n-                logger.warnf(\"User '%s' is member of group '%s', which doesn't exists in LDAP\", user.getUsername(), groupName);\n+                logger.warnf(\"User '%s' is member of group '%s', which doesn't exist in LDAP\", user.getUsername(), groupName);\n             }\n         }\n \n@@ -445,7 +445,7 @@ public String getStatus() {\n         }\n \n \n-        // Map to track all LDAP groups also exists in Keycloak\n+        // Map to track all LDAP groups also exist in Keycloak\n         Set<String> ldapGroupNames = new HashSet<>();\n \n         // Create or update KC groups to LDAP including their attributes\n@@ -538,7 +538,7 @@ private void processKeycloakGroupMembershipsSyncToLDAP(GroupModel kcGroup, Map<S\n     }\n \n     // Recursively check if parent group exists in LDAP. If yes, then return current group. If not, then recursively call this method\n-    // for the predecessor. Result is the highest group, which doesn't yet exists in LDAP (and hence requires sync to LDAP)\n+    // for the predecessor. Result is the highest group, which doesn't yet exist in LDAP (and hence requires sync to LDAP)\n     private GroupModel getHighestPredecessorNotExistentInLdap(GroupModel groupsPathGroup, GroupModel group) {\n         GroupModel parentGroup = group.getParent();\n         if (parentGroup == groupsPathGroup) {\n@@ -550,7 +550,7 @@ private GroupModel getHighestPredecessorNotExistentInLdap(GroupModel groupsPathG\n             // Parent exists in LDAP. Let's return current group\n             return group;\n         } else {\n-            // Parent doesn't exists in LDAP. Let's recursively go up.\n+            // Parent doesn't exist in LDAP. Let's recursively go up.\n             return getHighestPredecessorNotExistentInLdap(groupsPathGroup, parentGroup);\n         }\n     }\n@@ -737,7 +737,7 @@ public void leaveGroup(GroupModel group) {\n                         super.leaveGroup(group);\n                     }\n                 } else {\n-                    // Group mappings exists in LDAP. For LDAP_ONLY mode, we can just delete it in LDAP. For READ_ONLY we can't delete it -> throw error\n+                    // Group mapping exists in LDAP. For LDAP_ONLY mode, we can just delete it in LDAP. For READ_ONLY we can't delete it -> throw error\n                     if (config.getMode() == LDAPGroupMapperMode.READ_ONLY) {\n                         throw new ModelException(\"Not possible to delete LDAP group mappings as mapper mode is READ_ONLY\");\n                     } else {"
  },
  {
    "sha": "90e451ec446bb96fc3834eff07ba61f75acb04cf",
    "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupTreeResolver.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupTreeResolver.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupTreeResolver.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupTreeResolver.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -119,9 +119,9 @@\n                 } else if (ignoreMissingGroups) {\n                     // Need to remove the missing group\n                     iterator.remove();\n-                    logger.debug(\"Group '\" + child + \"' referenced as member of group '\" + group.getGroupName() + \"' doesn't exists. Ignoring.\");\n+                    logger.debug(\"Group '\" + child + \"' referenced as member of group '\" + group.getGroupName() + \"' doesn't exist. Ignoring.\");\n                 } else {\n-                    throw new GroupTreeResolveException(\"Group '\" + child + \"' referenced as member of group '\" + group.getGroupName() + \"' doesn't exists\");\n+                    throw new GroupTreeResolveException(\"Group '\" + child + \"' referenced as member of group '\" + group.getGroupName() + \"' doesn't exist\");\n                 }\n             }\n         }"
  },
  {
    "sha": "c67536362f93aa7134d41efabcab722b4cf655e0",
    "filename": "federation/ldap/src/test/java/org/keycloak/storage/ldap/idm/model/GroupTreeResolverTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/test/java/org/keycloak/storage/ldap/idm/model/GroupTreeResolverTest.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/federation/ldap/src/test/java/org/keycloak/storage/ldap/idm/model/GroupTreeResolverTest.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/federation/ldap/src/test/java/org/keycloak/storage/ldap/idm/model/GroupTreeResolverTest.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -119,7 +119,7 @@ public void testGroupResolvingMissingGroup() throws GroupTreeResolver.GroupTreeR\n             resolver.resolveGroupTree(groups, false);\n             Assert.fail(\"Exception expected because of missing referenced group\");\n         } catch (GroupTreeResolver.GroupTreeResolveException gre) {\n-            Assert.assertEquals(\"Group 'group3' referenced as member of group 'group2' doesn't exists\", gre.getMessage());\n+            Assert.assertEquals(\"Group 'group3' referenced as member of group 'group2' doesn't exist\", gre.getMessage());\n         }\n \n         List<GroupTreeResolver.GroupTreeEntry> groupTree = resolver.resolveGroupTree(groups, true);"
  },
  {
    "sha": "d97cee0424f1fe26102e61ca0c94a82ea2dab487",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/pom.xml",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/pom.xml",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/pom.xml?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -143,7 +143,7 @@\n         <greenmail.version>1.3.1b</greenmail.version>\n         <hamcrest.version>1.3</hamcrest.version>\n         <jmeter.version>2.10</jmeter.version>\n-        <junit.version>4.12</junit.version>\n+        <junit.version>4.13.2</junit.version>\n         <picketlink.version>2.7.0.Final</picketlink.version>\n         <selenium.version>2.35.0</selenium.version>\n         <xml-apis.version>1.4.01</xml-apis.version>"
  },
  {
    "sha": "333042da021f06806582557684f0762e886ac7a6",
    "filename": "quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -17,6 +17,7 @@\n \n package org.keycloak.quarkus.deployment;\n \n+import static java.util.Collections.emptyList;\n import static org.keycloak.configuration.Configuration.getPropertyNames;\n import static org.keycloak.configuration.Configuration.getRawValue;\n import static org.keycloak.representations.provider.ScriptProviderDescriptor.AUTHENTICATORS;\n@@ -147,7 +148,7 @@ FeatureBuildItem getFeature() {\n     @Record(ExecutionTime.STATIC_INIT)\n     @BuildStep\n     void configureHibernate(KeycloakRecorder recorder, HibernateOrmConfig config, List<PersistenceUnitDescriptorBuildItem> descriptors) {\n-        PersistenceUnitDescriptor unit = descriptors.get(0).asOutputPersistenceUnitDefinition().getActualHibernateDescriptor();\n+        PersistenceUnitDescriptor unit = descriptors.get(0).asOutputPersistenceUnitDefinition(emptyList()).getActualHibernateDescriptor();\n \n         unit.getProperties().setProperty(AvailableSettings.DIALECT, config.defaultPersistenceUnit.dialect.dialect.orElse(null));\n         unit.getProperties().setProperty(AvailableSettings.JPA_TRANSACTION_TYPE, PersistenceUnitTransactionType.JTA.name());"
  },
  {
    "sha": "62c9b1ee1d51ac0d890a9fd3e47dbb706258208f",
    "filename": "quarkus/pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/pom.xml",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/pom.xml",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/pom.xml?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -31,13 +31,13 @@\n     <packaging>pom</packaging>\n \n     <properties>\n-        <quarkus.version>1.10.0.CR1</quarkus.version>\n-        <resteasy.version>4.5.8.Final</resteasy.version>\n-        <jackson.version>2.11.3</jackson.version>\n+        <quarkus.version>1.12.2.Final</quarkus.version>\n+        <resteasy.version>4.5.9.Final</resteasy.version>\n+        <jackson.version>2.12.1</jackson.version>\n         <jackson.databind.version>${jackson.version}</jackson.databind.version>\n-        <hibernate.version>5.4.23.Final</hibernate.version>\n-        <mysql-connector-java.version>8.0.22</mysql-connector-java.version>\n-        <picocli.version>4.5.2</picocli.version>\n+        <hibernate.version>5.4.28.Final</hibernate.version>\n+        <mysql-connector-java.version>8.0.23</mysql-connector-java.version>\n+        <picocli.version>4.6.1</picocli.version>\n         <snakeyaml.version>1.27</snakeyaml.version>\n         <surefire-plugin.version>3.0.0-M5</surefire-plugin.version>\n         <wildfly.common.format.version>1.5.4.Final-format-001</wildfly.common.format.version>"
  },
  {
    "sha": "a97e09eadde11ccc3d4d9fe0c5cff2d05f1678f7",
    "filename": "quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -28,6 +28,7 @@\n import org.eclipse.microprofile.config.spi.ConfigSource;\n import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n import org.jboss.logging.Logger;\n+import org.keycloak.platform.Platform;\n import org.keycloak.util.Environment;\n \n public class KeycloakConfigSourceProvider implements ConfigSourceProvider {\n@@ -104,7 +105,7 @@ public static Path getPersistedConfigFile() {\n         String homeDir = Environment.getHomeDir();\n \n         if (homeDir == null) {\n-            return Paths.get(System.getProperty(\"java.io.tmpdir\"), PersistedConfigSource.KEYCLOAK_PROPERTIES);\n+            return Paths.get(Platform.getPlatform().getTmpDirectory().toString(), PersistedConfigSource.KEYCLOAK_PROPERTIES);\n         }\n \n         return Paths.get(homeDir, \"conf\", PersistedConfigSource.KEYCLOAK_PROPERTIES);"
  },
  {
    "sha": "bec6e2788b2dc7e4d663ffe4e0e6817e34ea7f46",
    "filename": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ClientConnectionContextInjector.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ClientConnectionContextInjector.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ClientConnectionContextInjector.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ClientConnectionContextInjector.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ *\n+ *  * Copyright 2021  Red Hat, Inc. and/or its affiliates\n+ *  * and other contributors as indicated by the @author tags.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import javax.ws.rs.ext.Provider;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+\n+import org.jboss.resteasy.spi.ContextInjector;\n+import org.keycloak.common.ClientConnection;\n+import org.keycloak.common.util.Resteasy;\n+\n+/**\n+ * <p>This {@link ContextInjector} allows injecting {@link ClientConnection} to JAX-RS resources.\n+ *\n+ * <p>Due to the latest changes in Quarkus, the context map is cleared prior to dispatching to JAX-RS resources, so we need\n+ * to delegate to the {@link ResteasyVertxProvider} provider the lookup of Keycloak contextual objects.\n+ *\n+ * @see QuarkusRequestFilter\n+ * @see ResteasyVertxProvider\n+ *\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@Provider\n+public class ClientConnectionContextInjector implements ContextInjector<ClientConnection, ClientConnection> {\n+    @Override\n+    public ClientConnection resolve(Class rawType, Type genericType, Annotation[] annotations) {\n+        return Resteasy.getContextData(ClientConnection.class);\n+    }\n+}"
  },
  {
    "sha": "35029f7425faba32dfcde44eaa12ad4474a9bc3e",
    "filename": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/KeycloakContextInjector.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/KeycloakContextInjector.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/KeycloakContextInjector.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/KeycloakContextInjector.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ *\n+ *  * Copyright 2021  Red Hat, Inc. and/or its affiliates\n+ *  * and other contributors as indicated by the @author tags.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import javax.ws.rs.ext.Provider;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+\n+import org.jboss.resteasy.spi.ContextInjector;\n+import org.keycloak.common.util.Resteasy;\n+import org.keycloak.models.KeycloakSession;\n+\n+/**\n+ * <p>This {@link ContextInjector} allows injecting {@link KeycloakSession} to JAX-RS resources.\n+ *\n+ * <p>Due to the latest changes in Quarkus, the context map is cleared prior to dispatching to JAX-RS resources, so we need\n+ * to delegate to the {@link ResteasyVertxProvider} provider the lookup of Keycloak contextual objects.\n+ *\n+ * @see QuarkusRequestFilter\n+ * @see ResteasyVertxProvider\n+ *\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@Provider\n+public class KeycloakContextInjector implements ContextInjector<KeycloakSession, KeycloakSession> {\n+    @Override\n+    public KeycloakSession resolve(Class rawType, Type genericType, Annotation[] annotations) {\n+        return Resteasy.getContextData(KeycloakSession.class);\n+    }\n+}"
  },
  {
    "sha": "dd8c153a7904fdcf1e7080fce7eebe84bce26272",
    "filename": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusPlatform.java",
    "status": "modified",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusPlatform.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusPlatform.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusPlatform.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -17,15 +17,20 @@\n \n package org.keycloak.provider.quarkus;\n \n+import java.io.File;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n+import org.jboss.logging.Logger;\n import org.keycloak.platform.Platform;\n import org.keycloak.platform.PlatformProvider;\n+import org.keycloak.util.Environment;\n \n public class QuarkusPlatform implements PlatformProvider {\n \n+    private static final Logger log = Logger.getLogger(QuarkusPlatform.class);\n+\n     public static void addInitializationException(Throwable throwable) {\n         QuarkusPlatform platform = (QuarkusPlatform) Platform.getPlatform();\n         platform.addDeferredException(throwable);\n@@ -68,6 +73,7 @@ public static void exitOnError(Throwable cause) throws InitializationException{\n \n     private AtomicBoolean started = new AtomicBoolean(false);\n     private List<Throwable> deferredExceptions = new CopyOnWriteArrayList<>();\n+    private File tmpDir;\n \n     @Override\n     public void onStartup(Runnable startupHook) {\n@@ -108,4 +114,29 @@ private void addDeferredException(Throwable t) {\n         return deferredExceptions;\n     }\n \n+    @Override\n+    public File getTmpDirectory() {\n+        if (tmpDir == null) {\n+            String homeDir = Environment.getHomeDir();\n+\n+            File tmpDir;\n+            if (homeDir == null) {\n+                // Should happen just in the unit tests\n+                homeDir = System.getProperty(\"java.io.tmpdir\");\n+                tmpDir = new File(homeDir, \"keycloak-quarkus-tmp\");\n+                tmpDir.mkdir();\n+            } else {\n+                tmpDir = new File(homeDir, \"tmp\");\n+                tmpDir.mkdir();\n+            }\n+\n+            if (tmpDir.isDirectory()) {\n+                this.tmpDir = tmpDir;\n+                log.debugf(\"Using server tmp directory: %s\", tmpDir.getAbsolutePath());\n+            } else {\n+                throw new RuntimeException(\"Temporary directory \" + tmpDir.getAbsolutePath() + \" does not exists and it was not possible to create it.\");\n+            }\n+        }\n+        return tmpDir;\n+    }\n }"
  },
  {
    "sha": "ac874f1ab292324343bce227a878553ea7af5c34",
    "filename": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusRequestFilter.java",
    "status": "modified",
    "additions": 13,
    "deletions": 3,
    "changes": 16,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusRequestFilter.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusRequestFilter.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/QuarkusRequestFilter.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -17,9 +17,8 @@\n \n package org.keycloak.provider.quarkus;\n \n-import java.util.function.Predicate;\n-\n import org.keycloak.common.ClientConnection;\n+import org.keycloak.models.KeycloakSession;\n import org.keycloak.services.filters.AbstractRequestFilter;\n \n import io.vertx.core.AsyncResult;\n@@ -45,8 +44,12 @@ public void handle(RoutingContext context) {\n         // our code should always be run as blocking until we don't provide a better support for running non-blocking code\n         // in the event loop\n         context.vertx().executeBlocking(promise -> {\n-            filter(createClientConnection(context.request()), (session) -> {\n+            ClientConnection connection = createClientConnection(context.request());\n+\n+            filter(connection, (session) -> {\n                 try {\n+                    configureContextualData(context, connection, session);\n+\n                     // we need to close the session before response is sent to the client, otherwise subsequent requests could\n                     // not get the latest state because the session from the previous request is still being closed\n                     // other methods from Vert.x to add a handler to the response works asynchronously\n@@ -62,6 +65,13 @@ public void handle(RoutingContext context) {\n         }, false, EMPTY_RESULT);\n     }\n \n+    private void configureContextualData(RoutingContext context, ClientConnection connection, KeycloakSession session) {\n+        // quarkus-resteasy changed and clears the context map before dispatching\n+        // need to push keycloak contextual objects into the routing context for retrieving it later\n+        context.data().put(KeycloakSession.class.getName(), session);\n+        context.data().put(ClientConnection.class.getName(), connection);\n+    }\n+\n     @Override\n     protected boolean isAutoClose() {\n         return false;"
  },
  {
    "sha": "d4310f91eca8b395618e31df35fe9ef457833348",
    "filename": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ResteasyVertxProvider.java",
    "status": "renamed",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ResteasyVertxProvider.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ResteasyVertxProvider.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/ResteasyVertxProvider.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -17,14 +17,24 @@\n \n package org.keycloak.provider.quarkus;\n \n+import io.vertx.ext.web.RoutingContext;\n import org.jboss.resteasy.core.ResteasyContext;\n import org.keycloak.common.util.ResteasyProvider;\n \n-public class Resteasy4Provider implements ResteasyProvider {\n+/**\n+ * TODO: we should probably rely on the vert.x routing context instead of resteasy context data\n+ */\n+public class ResteasyVertxProvider implements ResteasyProvider {\n \n     @Override\n     public <R> R getContextData(Class<R> type) {\n-        return ResteasyContext.getContextData(type);\n+        R data = ResteasyContext.getContextData(type);\n+\n+        if (data == null) {\n+            return (R) ResteasyContext.getContextData(RoutingContext.class).data().get(type.getName());\n+        }\n+\n+        return data;\n     }\n \n     @Override",
    "previous_filename": "quarkus/runtime/src/main/java/org/keycloak/provider/quarkus/Resteasy4Provider.java"
  },
  {
    "sha": "4e8e03fbe9c0ec91dcbc58c71468f5b4b9566527",
    "filename": "quarkus/runtime/src/main/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/quarkus/runtime/src/main/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/quarkus/runtime/src/main/resources/META-INF/services/org.keycloak.common.util.ResteasyProvider?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -1 +1 @@\n-org.keycloak.provider.quarkus.Resteasy4Provider\n\\ No newline at end of file\n+org.keycloak.provider.quarkus.ResteasyVertxProvider\n\\ No newline at end of file"
  },
  {
    "sha": "0799c8198f7954760e5fcb1ae722a84830440098",
    "filename": "server-spi-private/src/main/java/org/keycloak/models/Constants.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/server-spi-private/src/main/java/org/keycloak/models/Constants.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/server-spi-private/src/main/java/org/keycloak/models/Constants.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/server-spi-private/src/main/java/org/keycloak/models/Constants.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -62,6 +62,7 @@\n     // KEYCLOAK-7688 Offline Session Max for Offline Token\n     // 60 days\n     public static final int DEFAULT_OFFLINE_SESSION_MAX_LIFESPAN = 5184000;\n+    public static final String DEFAULT_SIGNATURE_ALGORITHM = Algorithm.RS256;\n \n     public static final String DEFAULT_WEBAUTHN_POLICY_SIGNATURE_ALGORITHMS = Algorithm.ES256;\n     public static final String DEFAULT_WEBAUTHN_POLICY_RP_ENTITY_NAME = \"keycloak\";"
  },
  {
    "sha": "463b88fdb1e58fcb2b18ee2f99753e8bfd11c297",
    "filename": "server-spi-private/src/main/java/org/keycloak/models/LDAPConstants.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/server-spi-private/src/main/java/org/keycloak/models/LDAPConstants.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/server-spi-private/src/main/java/org/keycloak/models/LDAPConstants.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/server-spi-private/src/main/java/org/keycloak/models/LDAPConstants.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -163,7 +163,7 @@ public static void setTruststoreSpiIfNeeded(String useTruststoreSpi, String url,\n         } else if (useTruststoreSpi != null && useTruststoreSpi.equals(LDAPConstants.USE_TRUSTSTORE_NEVER)) {\n             shouldSetTruststore = false;\n         } else {\n-            shouldSetTruststore = (url != null && url.startsWith(\"ldaps\"));\n+            shouldSetTruststore = (url != null && url.toLowerCase().startsWith(\"ldaps\"));\n         }\n \n         if (shouldSetTruststore) {"
  },
  {
    "sha": "bb0f3e8f5e30da0862039c22df1cb7482c4135a9",
    "filename": "server-spi-private/src/main/java/org/keycloak/models/utils/RepresentationToModel.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/server-spi-private/src/main/java/org/keycloak/models/utils/RepresentationToModel.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/server-spi-private/src/main/java/org/keycloak/models/utils/RepresentationToModel.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/server-spi-private/src/main/java/org/keycloak/models/utils/RepresentationToModel.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -188,6 +188,7 @@ public static void importRealm(KeycloakSession session, RealmRepresentation rep,\n         if (rep.getNotBefore() != null) newRealm.setNotBefore(rep.getNotBefore());\n \n         if (rep.getDefaultSignatureAlgorithm() != null) newRealm.setDefaultSignatureAlgorithm(rep.getDefaultSignatureAlgorithm());\n+        else newRealm.setDefaultSignatureAlgorithm(Constants.DEFAULT_SIGNATURE_ALGORITHM);\n \n         if (rep.getRevokeRefreshToken() != null) newRealm.setRevokeRefreshToken(rep.getRevokeRefreshToken());\n         else newRealm.setRevokeRefreshToken(false);\n@@ -319,7 +320,7 @@ public static void importRealm(KeycloakSession session, RealmRepresentation rep,\n                 if (clientScope != null) {\n                     newRealm.addDefaultClientScope(clientScope, true);\n                 } else {\n-                    logger.warnf(\"Referenced client scope '%s' doesn't exists\", clientScopeName);\n+                    logger.warnf(\"Referenced client scope '%s' doesn't exist\", clientScopeName);\n                 }\n             }\n         }\n@@ -329,7 +330,7 @@ public static void importRealm(KeycloakSession session, RealmRepresentation rep,\n                 if (clientScope != null) {\n                     newRealm.addDefaultClientScope(clientScope, false);\n                 } else {\n-                    logger.warnf(\"Referenced client scope '%s' doesn't exists\", clientScopeName);\n+                    logger.warnf(\"Referenced client scope '%s' doesn't exist\", clientScopeName);\n                 }\n             }\n         }\n@@ -1499,7 +1500,7 @@ private static void addClientScopeToClient(RealmModel realm, ClientModel client,\n         if (clientScope != null) {\n             client.addClientScope(clientScope, defaultScope);\n         } else {\n-            logger.warnf(\"Referenced client scope '%s' doesn't exists. Ignoring\", clientScopeName);\n+            logger.warnf(\"Referenced client scope '%s' doesn't exist. Ignoring\", clientScopeName);\n         }\n     }\n "
  },
  {
    "sha": "40ce013b06fc01e9354fd0e5b245180b8635c719",
    "filename": "services/src/main/java/org/keycloak/encoding/GzipResourceEncodingProviderFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/encoding/GzipResourceEncodingProviderFactory.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/encoding/GzipResourceEncodingProviderFactory.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/services/src/main/java/org/keycloak/encoding/GzipResourceEncodingProviderFactory.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -5,6 +5,7 @@\n import org.keycloak.Config;\n import org.keycloak.common.Version;\n import org.keycloak.models.KeycloakSession;\n+import org.keycloak.platform.Platform;\n \n import java.io.File;\n import java.io.IOException;\n@@ -51,7 +52,7 @@ private synchronized File initCacheDir() {\n             return cacheDir;\n         }\n \n-        File cacheRoot = new File(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\");\n+        File cacheRoot = new File(Platform.getPlatform().getTmpDirectory(), \"kc-gzip-cache\");\n         File cacheDir = new File(cacheRoot, Version.RESOURCES_VERSION);\n \n         if (cacheRoot.isDirectory()) {"
  },
  {
    "sha": "8490a0cfdc6f2c73821518cf1928224a7de62533",
    "filename": "services/src/main/java/org/keycloak/exportimport/dir/DirExportProvider.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/exportimport/dir/DirExportProvider.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/exportimport/dir/DirExportProvider.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/services/src/main/java/org/keycloak/exportimport/dir/DirExportProvider.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -22,6 +22,7 @@\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.RealmModel;\n import org.keycloak.models.UserModel;\n+import org.keycloak.platform.Platform;\n import org.keycloak.representations.idm.RealmRepresentation;\n import org.keycloak.util.JsonSerialization;\n \n@@ -38,10 +39,8 @@\n     private final File rootDirectory;\n \n     public DirExportProvider() {\n-        // Determine system tmp directory\n-        String tempDir = System.getProperty(\"java.io.tmpdir\");\n-\n-        this.rootDirectory = new File(tempDir + \"/keycloak-export\");\n+        // Determine platform tmp directory\n+        this.rootDirectory = new File(Platform.getPlatform().getTmpDirectory(), \"keycloak-export\");\n         this.rootDirectory.mkdirs();\n \n         logger.infof(\"Exporting into directory %s\", this.rootDirectory.getAbsolutePath());"
  },
  {
    "sha": "56fd22c2f3aea837667974ba9798d644d0061688",
    "filename": "services/src/main/java/org/keycloak/exportimport/dir/DirImportProvider.java",
    "status": "modified",
    "additions": 5,
    "deletions": 7,
    "changes": 12,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/exportimport/dir/DirImportProvider.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/exportimport/dir/DirImportProvider.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/services/src/main/java/org/keycloak/exportimport/dir/DirImportProvider.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -26,6 +26,7 @@\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.KeycloakSessionFactory;\n import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.platform.Platform;\n import org.keycloak.representations.idm.RealmRepresentation;\n import org.keycloak.util.JsonSerialization;\n \n@@ -48,13 +49,10 @@\n     private final File rootDirectory;\n \n     public DirImportProvider() {\n-        // Determine system tmp directory\n-        String tempDir = System.getProperty(\"java.io.tmpdir\");\n-\n-        // Delete and recreate directory inside tmp\n-        this.rootDirectory = new File(tempDir + \"/keycloak-export\");\n+        // Determine platform tmp directory\n+        this.rootDirectory = new File(Platform.getPlatform().getTmpDirectory(), \"keycloak-export\");\n         if (!this.rootDirectory .exists()) {\n-            throw new IllegalStateException(\"Directory \" + this.rootDirectory + \" doesn't exists\");\n+            throw new IllegalStateException(\"Directory \" + this.rootDirectory + \" doesn't exist\");\n         }\n \n         logger.infof(\"Importing from directory %s\", this.rootDirectory.getAbsolutePath());\n@@ -64,7 +62,7 @@ public DirImportProvider(File rootDirectory) {\n         this.rootDirectory = rootDirectory;\n \n         if (!this.rootDirectory.exists()) {\n-            throw new IllegalStateException(\"Directory \" + this.rootDirectory + \" doesn't exists\");\n+            throw new IllegalStateException(\"Directory \" + this.rootDirectory + \" doesn't exist\");\n         }\n \n         logger.infof(\"Importing from directory %s\", this.rootDirectory.getAbsolutePath());"
  },
  {
    "sha": "cec110afc7900cc2b4b71895777038c905038073",
    "filename": "services/src/main/java/org/keycloak/forms/login/freemarker/model/AuthenticationContextBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/forms/login/freemarker/model/AuthenticationContextBean.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/forms/login/freemarker/model/AuthenticationContextBean.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/services/src/main/java/org/keycloak/forms/login/freemarker/model/AuthenticationContextBean.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -62,7 +62,7 @@ public boolean showResetCredentials() {\n     public String getAttemptedUsername() {\n         String username = context.getAuthenticationSession().getAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME);\n \n-        // Fallback to real username of the user just if attemptedUsername doesn't exists\n+        // Fallback to real username of the user just if attemptedUsername doesn't exist\n         if (username == null) {\n             username = context.getUser().getUsername();\n         }"
  },
  {
    "sha": "354938a759164ff96bab69c967a8b73b33ba4355",
    "filename": "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/americanstone/keycloak/blob/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
    "raw_url": "https://github.com/americanstone/keycloak/raw/cbb118c0132a90f5ea31b0b13c0cd846f8c12384/services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java",
    "contents_url": "https://api.github.com/repos/americanstone/keycloak/contents/services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java?ref=cbb118c0132a90f5ea31b0b13c0cd846f8c12384",
    "patch": "@@ -34,6 +34,7 @@\n import org.keycloak.keys.loader.PublicKeyStorageManager;\n import org.keycloak.models.AuthenticatedClientSessionModel;\n import org.keycloak.models.ClientModel;\n+import org.keycloak.models.Constants;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.RealmModel;\n import org.keycloak.models.TokenManager;\n@@ -53,8 +54,6 @@\n \n     private static final Logger logger = Logger.getLogger(DefaultTokenManager.class);\n \n-    private static String DEFAULT_ALGORITHM_NAME = Algorithm.RS256;\n-\n     private final KeycloakSession session;\n \n     public DefaultTokenManager(KeycloakSession session) {\n@@ -159,7 +158,7 @@ private String getSignatureAlgorithm(String clientAttribute) {\n             return algorithm;\n         }\n \n-        return DEFAULT_ALGORITHM_NAME;\n+        return Constants.DEFAULT_SIGNATURE_ALGORITHM;\n     }\n \n     @Override"
  }
]
