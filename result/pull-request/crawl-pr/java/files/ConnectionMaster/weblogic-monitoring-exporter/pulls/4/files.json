[
  {
    "sha": "c8b241f2215c25cd7053e0bb2092cfe96ca2aa2a",
    "filename": ".dockerignore",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/.dockerignore",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/.dockerignore",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/.dockerignore?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1 @@\n+target/*\n\\ No newline at end of file"
  },
  {
    "sha": "85ca1780d437d807d3443d995ae9bcf33eed9498",
    "filename": ".travis.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/.travis.yml",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/.travis.yml",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/.travis.yml?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,5 +1,7 @@\n language: java\n jdk:\n   - openjdk8\n+  - openjdk8\n+  - oraclejdk11\n sudo: false\n script: mvn clean verify"
  },
  {
    "sha": "77a412f287d5ca5a56150346d61120b5c88add92",
    "filename": "Dockerfile",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/Dockerfile",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/Dockerfile",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/Dockerfile?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,67 @@\n+#   Copyright (c) 2021, Oracle and/or its affiliates.\n+#   Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# First layer: dependencies for the project, cached in the /root/.m2 directory\n+FROM maven:3.6-jdk-11 as m2repo\n+ARG MAVEN_OPTS\n+\n+WORKDIR /project/\n+COPY pom.xml .\n+COPY wls-exporter-core/pom.xml wls-exporter-core/\n+COPY wls-exporter-sidecar/pom.xml wls-exporter-sidecar/\n+\n+RUN mvn -B -e -C org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline -Ddocker-build\n+\n+# Now build the project on top of that first layer\n+FROM maven:3.6-jdk-11 as build\n+ARG MAVEN_OPTS\n+\n+WORKDIR /project/\n+COPY --from=m2repo /root/.m2 /root/.m2\n+COPY pom.xml .\n+COPY wls-exporter-core/ wls-exporter-core/\n+COPY wls-exporter-sidecar/ wls-exporter-sidecar/\n+\n+RUN mvn -B -e -C install -Ddocker-build -DskipTests=true\n+\n+# Install Java on top of the linux image\n+FROM oraclelinux:8-slim as linux\n+WORKDIR /tmp\n+\n+RUN set -eux; \\\n+    microdnf -y install gzip tar openssl jq; \\\n+    microdnf clean all\n+\n+ENV LANG=\"en_US.UTF-8\" \\\n+    JAVA_HOME=\"/usr/local/java\" \\\n+    PATH=\"/operator:$JAVA_HOME/bin:$PATH\" \\\n+    JAVA_VERSION=\"15\" \\\n+    JAVA_URL=\"https://download.java.net/java/GA/jdk15.0.2/0d1cfde4252546c6931946de8db48ee2/7/GPL/openjdk-15.0.2_linux-x64_bin.tar.gz\"\n+\n+RUN set -eux; \\\n+    curl -fL -o /jdk.tar.gz \"$JAVA_URL\"; \\\n+    mkdir -p \"$JAVA_HOME\"; \\\n+    tar --extract --file /jdk.tar.gz --directory \"$JAVA_HOME\" --strip-components 1; \\\n+    rm /jdk.tar.gz; \\\n+    mkdir /usr/java; \\\n+    ln -sfT \"$JAVA_HOME\" /usr/java/default; \\\n+    ln -sfT \"$JAVA_HOME\" /usr/java/latest; \\\n+    rm -Rf \"$JAVA_HOME/include\" \"$JAVA_HOME/jmods\"; \\\n+    rm -f \"$JAVA_HOME/lib/src.zip\"; \\\n+    for bin in \"$JAVA_HOME/bin/\"*; do \\\n+        base=\"$(basename \"$bin\")\"; \\\n+        [ ! -e \"/usr/bin/$base\" ]; \\\n+        alternatives --install \"/usr/bin/$base\" \"$base\" \"$bin\" 20000; \\\n+    done; \\\n+    java -Xshare:dump\n+\n+# Finally, copy the exporter sidecar and create the docker image\n+FROM linux as base\n+\n+COPY --from=build project/wls-exporter-sidecar/target/wls-exporter-sidecar.jar ./\n+COPY --from=build project/wls-exporter-sidecar/target/libs ./libs\n+COPY start_exporter.sh .\n+\n+ENTRYPOINT [\"sh\", \"start_exporter.sh\"]\n+\n+EXPOSE 8080"
  },
  {
    "sha": "fe19168888d8fd7c31d2b9d443cfa9419d2e26dd",
    "filename": "Filter_SecComply.txt",
    "status": "added",
    "additions": 271,
    "deletions": 0,
    "changes": 271,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/Filter_SecComply.txt",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/Filter_SecComply.txt",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/Filter_SecComply.txt?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,271 @@\n+Code Correctness: Arithmetic Operation on Boolean\n+Code Correctness: Function Not Invoked\n+Code Correctness: Function Returns Stack Address\n+Code Correctness: Macro Misuse\n+Code Correctness: Memory Free on Stack Variable\n+Code Correctness: Premature Thread Termination\n+Dead Code\n+Double Free\n+Format String: Argument Number Mismatch\n+Format String: Argument Type Mismatch\n+Memory Leak\n+Memory Leak: Reallocation\n+Null Dereference\n+Obsolete\n+Obsolete: Inadequate Pointer Validation\n+Poor Style: Redundant Initialization\n+Poor Style: Value Never Read\n+Poor Style: Variable Never Used\n+Portability Flaw\n+Redundant Null Check\n+Type Mismatch: Integer to Character\n+Type Mismatch: Negative to Unsigned\n+Type Mismatch: Signed to Unsigned\n+Undefined Behavior\n+Undefined Behavior: Redundant Delete\n+Uninitialized Variable\n+Use After Free\n+Missing Check against Null\n+Often Misused: Authentication(gethostby)\n+Often Misused: Authentication(getlogin)\n+Often Misused: Exception Handling(_alloca)\n+Often Misused: Exception Handling(criticalsection)\n+Often Misused: File System(getwd)\n+Often Misused: File System(readlink)\n+Often Misused: File System(realpath)\n+Often Misused: File System(umask)\n+Often Misused: File System(windows)\n+Often Misused: Privilege Management\n+Often Misused: Privilege Management(setuid)\n+Often Misused: Strings(_mbs)\n+Often Misused: Strings(multibytewidechar)\n+Unchecked Return Value\n+System Information Leak\n+Insecure Compiler Optimization\n+Insecure Compiler Optimization: Pointer Arithmetic\n+Code Correctness: Erroneous Synchronization\n+Insecure Temporary File\n+Race Condition: File System Access\n+Race Condition: Signal Handling\n+ADF Faces Bad Practices: unsecure Attribute\n+Castor Bad Practices: Query Mode Not Read-Only\n+Castor Bad Practices: Unspecified Query Mode\n+Code Correctness: Call to System.gc()\n+Code Correctness: Class Does Not Implement equals\n+Code Correctness: Erroneous finalize() Method\n+Code Correctness: toString on Array\n+Dangerous Field\n+Dangerous Method\n+Dangerous Type\n+EJB Bad Practices: Use of AWT/Swing\n+EJB Bad Practices: Use of Class Loader\n+EJB Bad Practices: Use of Sockets\n+EJB Bad Practices: Use of Synchronization Primitives\n+EJB Bad Practices: Use of java.io\n+Immutable Classes: Field Mutation\n+Immutable Classes: Non-final Fields\n+Immutable Classes: Public Mutable Fields\n+J2EE Bad Practices: Sockets\n+J2EE Bad Practices: getConnection()\n+Missing Check against Null\n+Missing Check for Null Parameter\n+Object Model Violation: Erroneous clone() Method\n+Object Model Violation: Just one of equals() and hashCode() Defined\n+Object Model Violation: Just one of restoreState() and saveState() Defined\n+Obsolete: Deprecated by ESAPI\n+Often Misused: Authentication\n+Often Misused: Encoding\n+Password Management: Weak Redundancy\n+Poor Style: Explicit Call to finalize()\n+Unchecked Return Value\n+Code Correctness: Call to Thread.run()\n+Code Correctness: Call to notify()\n+Code Correctness: Class Does Not Implement Cloneable\n+Code Correctness: Erroneous Class Compare\n+Code Correctness: Erroneous Negative Value\n+Code Correctness: Erroneous String Compare\n+Code Correctness: Erroneous Zero Value\n+Code Correctness: Incorrect serialPersistentFields Modifier\n+Code Correctness: Misspelled Method Name\n+Code Correctness: Non-Synchronized Method Overrides Synchronized Method\n+Code Correctness: null Argument to equals()\n+Dead Code: Empty Try Block\n+Dead Code: Expression is Always false\n+Dead Code: Expression is Always true\n+Dead Code: Unused Field\n+Dead Code: Unused Method\n+Null Dereference\n+Obsolete\n+Poor Style: Confusing Naming(class_and_member)\n+Poor Style: Confusing Naming(member_and_method)\n+Poor Style: Empty Synchronized Block\n+Poor Style: Identifier Contains Dollar Symbol ($)\n+Poor Style: Redundant Initialization\n+Poor Style: Value Never Read\n+Redundant Null Check\n+Unreleased Resource: Synchronization\n+ADF Bad Practices: Default url-invoke-disallowed Setting\n+Cross-Site Request Forgery\n+Hidden Field\n+Insecure Storage: Android External Storage\n+J2EE Bad Practices: Leftover Debug Code\n+JavaScript Hijacking: Ad Hoc Ajax\n+JavaScript Hijacking: Vulnerable Framework\n+Poor Logging Practice: Logger Not Declared Static Final\n+Poor Logging Practice: Multiple Loggers\n+Poor Logging Practice: Use of a System Output Stream\n+Poor Style: Non-final Public Static Field\n+System Information Leak\n+System Information Leak: Apache Axis\n+System Information Leak: Apache Axis 2\n+System Information Leak: HTML Comment in JSP\n+System Information Leak: Incomplete Servlet Error Handling\n+System Information Leak: Overly Broad SQL Logging\n+Trust Boundary Violation\n+Unsafe Mobile Code: Access Violation\n+Unsafe Mobile Code: Database Access\n+Unsafe Mobile Code: Inner Class\n+Unsafe Mobile Code: Public finalize() Method\n+Unsafe Mobile Code: Unsafe Array Declaration\n+Unsafe Mobile Code: Unsafe Public Field\n+Axis 2 Misconfiguration: Debug Information\n+Axis 2 Misconfiguration: Insecure Message Security\n+Axis 2 Misconfiguration: Insecure Transport Receiver\n+Axis 2 Misconfiguration: Insecure Transport Sender\n+Axis 2 Service Provider Misconfiguration: Inbound WS-Security Not Enabled\n+Axis 2 Service Provider Misconfiguration: Missing Inbound Encryption\n+Axis 2 Service Provider Misconfiguration: Missing Inbound Signature\n+Axis 2 Service Provider Misconfiguration: Missing Inbound Timestamp\n+Axis 2 Service Provider Misconfiguration: Missing Outbound Encryption\n+Axis 2 Service Provider Misconfiguration: Missing Outbound Signature\n+Axis 2 Service Provider Misconfiguration: Missing Outbound Timestamp\n+Axis 2 Service Provider Misconfiguration: Outbound WS-Security Not Enabled\n+Axis 2 Service Provider Misconfiguration: Unsigned Inbound Timestamp\n+Axis 2 Service Provider Misconfiguration: Unsigned Outbound Timestamp\n+Axis 2 Service Provider Misconfiguration: WS-Security Not Enabled\n+Axis 2 Service Provider Misconfiguration: Weak Token\n+Axis 2 Service Requester Misconfiguration: Inbound WS-Security Not Enabled\n+Axis 2 Service Requester Misconfiguration: Missing Inbound Encryption\n+Axis 2 Service Requester Misconfiguration: Missing Inbound Signature\n+Axis 2 Service Requester Misconfiguration: Missing Inbound Timestamp\n+Axis 2 Service Requester Misconfiguration: Missing Outbound Encryption\n+Axis 2 Service Requester Misconfiguration: Missing Outbound Signature\n+Axis 2 Service Requester Misconfiguration: Missing Outbound Timestamp\n+Axis 2 Service Requester Misconfiguration: Outbound WS-Security Not Enabled\n+Axis 2 Service Requester Misconfiguration: Plain Text Password\n+Axis 2 Service Requester Misconfiguration: Unsigned Inbound Timestamp\n+Axis 2 Service Requester Misconfiguration: Unsigned Outbound Timestamp\n+Axis 2 Service Requester Misconfiguration: WS-Security Not Enabled\n+Axis 2 Service Requester Misconfiguration: Weak Token\n+Axis Misconfiguration: Debug Information\n+Axis Misconfiguration: Service Enumeration\n+Axis Service Provider Misconfiguration: Plain Text Password\n+Axis Service Provider Misconfiguration: Weak Token\n+Axis Service Requester Misconfiguration: Plain Text Password\n+Axis Service Requester Misconfiguration: Weak Token\n+Build Misconfiguration: Dynamic Dependency Version Usage\n+Build Misconfiguration: External Ant Dependency Repository\n+Build Misconfiguration: External Ivy Dependency Repository\n+Build Misconfiguration: External Maven Dependency Repository\n+Flex Misconfiguration: Debug Information\n+J2EE Misconfiguration: Cookies Disabled\n+J2EE Misconfiguration: Debug Information\n+J2EE Misconfiguration: Direct JSP Access\n+J2EE Misconfiguration: Duplicate Security Role\n+J2EE Misconfiguration: Duplicate Servlet Mapping\n+J2EE Misconfiguration: Excessive Servlet Mappings\n+J2EE Misconfiguration: Excessive Session Timeout\n+J2EE Misconfiguration: Incomplete Error Handling - (404)\n+J2EE Misconfiguration: Incomplete Error Handling - (500)\n+J2EE Misconfiguration: Incomplete Error Handling - (throwable)\n+J2EE Misconfiguration: Insecure Transport\n+J2EE Misconfiguration: Insufficient Session-ID Length\n+J2EE Misconfiguration: Invalid Servlet Name\n+J2EE Misconfiguration: Missing Authentication Method\n+J2EE Misconfiguration: Missing Data Transport Constraint\n+J2EE Misconfiguration: Missing Error Handling\n+J2EE Misconfiguration: Missing Filter Definition\n+J2EE Misconfiguration: Missing Security Role\n+J2EE Misconfiguration: Missing Servlet Mapping\n+J2EE Misconfiguration: Unsafe Bean Declaration\n+J2EE Misconfiguration: Weak Access Permissions\n+Password Management: Empty Password in Configuration File\n+Password Management: Password in Configuration File\n+Struts Misconfiguration: Duplicate Form Bean\n+Struts Misconfiguration: Invalid Path\n+Struts Misconfiguration: Missing Action Input\n+Struts Misconfiguration: Missing Exception Type\n+Struts Misconfiguration: Missing Form Bean\n+Struts Misconfiguration: Missing Form Bean Name\n+Struts Misconfiguration: Missing Form Bean Type\n+Struts Misconfiguration: Missing Form Property Type\n+Struts Misconfiguration: Missing Forward Name\n+Struts Misconfiguration: Missing Forward Path\n+Tomcat Configuration: Insecure Transport\n+WebSphere Misconfiguration: Missing Nonce\n+WebSphere Misconfiguration: Servlets Served By Class Name\n+WebSphere Service Provider Misconfiguration: Inbound WS-Security Not Enabled\n+WebSphere Service Provider Misconfiguration: Missing Inbound Encryption\n+WebSphere Service Provider Misconfiguration: Missing Inbound Signature\n+WebSphere Service Provider Misconfiguration: Missing Inbound Timestamp\n+WebSphere Service Provider Misconfiguration: Missing Outbound Encryption\n+WebSphere Service Provider Misconfiguration: Missing Outbound Signature\n+WebSphere Service Provider Misconfiguration: Missing Outbound Timestamp\n+WebSphere Service Provider Misconfiguration: Missing Timestamp Expiration\n+WebSphere Service Provider Misconfiguration: Outbound WS-Security Not Enabled\n+WebSphere Service Provider Misconfiguration: Unsigned Inbound Timestamp\n+WebSphere Service Provider Misconfiguration: Unsigned Outbound Timestamp\n+WebSphere Service Provider Misconfiguration: Weak Token\n+WebSphere Service Requester Misconfiguration: Inbound WS-Security Not Enabled\n+WebSphere Service Requester Misconfiguration: Missing Inbound Encryption\n+WebSphere Service Requester Misconfiguration: Missing Inbound Signature\n+WebSphere Service Requester Misconfiguration: Missing Inbound Timestamp\n+WebSphere Service Requester Misconfiguration: Missing Outbound Encryption\n+WebSphere Service Requester Misconfiguration: Missing Outbound Signature\n+WebSphere Service Requester Misconfiguration: Missing Outbound Timestamp\n+WebSphere Service Requester Misconfiguration: Missing Timestamp Expiration\n+WebSphere Service Requester Misconfiguration: Outbound WS-Security Not Enabled\n+WebSphere Service Requester Misconfiguration: Unsigned Inbound Timestamp\n+WebSphere Service Requester Misconfiguration: Unsigned Outbound Timestamp\n+WebSphere Service Requester Misconfiguration: Weak Token\n+Weblogic Misconfiguration: Missing Timestamp\n+Weblogic Misconfiguration: Weak Token\n+Poor Error Handling: Empty Catch Block\n+Poor Error Handling: Overly Broad Catch\n+Poor Error Handling: Overly Broad Throws\n+Poor Error Handling: Program Catches NullPointerException\n+Poor Error Handling: Return Inside Finally\n+Poor Error Handling: Swallowed ThreadDeath\n+Poor Error Handling: Throw Inside Finally\n+Poor Error Handling: Unhandled SSL Exception\n+Weak SecurityManager Check: Overridable Method\n+Privacy Violation\n+Privilege Management: Amazon Web Services Unchecked Permissions\n+Privilege Management: Android Data Storage\n+Privilege Management: Android Disable\n+Privilege Management: Android Location\n+Privilege Management: Android Messaging\n+Privilege Management: Android Network\n+Privilege Management: Android Telephony\n+Privilege Management: Overly Broad Access Specifier\n+Missing SecurityManager Check: Cloneable\n+Missing SecurityManager Check: Serializable\n+Access Control: Amazon Web Services\n+Access Control: Android ContentResolver\n+Access Control: Anonymous LDAP Bind\n+Access Control: Database\n+Access Control: LDAP\n+Access Control: Weak Security Constraint\n+Acegi Misconfiguration: Insecure Channel Mixing\n+Acegi Misconfiguration: Run-As Authentication Replacement\n+Code Correctness: Call to sleep() in Lock\n+Code Correctness: Double-Checked Locking\n+J2EE Bad Practices: Non-Serializable Object Stored in Session\n+J2EE Bad Practices: System.exit\n+J2EE Bad Practices: Threads\n+Race Condition: Format Flaw\n+Code Correctness: Multiple Stream Commits\n+Denial of Service: Parse Double\n+File Disclosure: J2EE\n+Poor Style: Confusing Naming\n+"
  },
  {
    "sha": "dd302e023bb729732af6057b0a552c38403905be",
    "filename": "README.md",
    "status": "modified",
    "additions": 114,
    "deletions": 23,
    "changes": 137,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/README.md",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/README.md",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/README.md?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -3,29 +3,23 @@ WebLogic Monitoring Exporter\n \n [![Build Status](https://travis-ci.org/oracle/weblogic-monitoring-exporter.svg?branch=master)](https://travis-ci.org/oracle/weblogic-monitoring-exporter)\n \n-The WebLogic Monitoring Exporter uses the [WLS RESTful Management API](https://docs.oracle.com/middleware/1221/wls/WLRUR/overview.htm#WLRUR111) to scrape runtime information and then exports [Prometheus](http://prometheus.io)-compatible metrics.\n-It is deployed as a web application in a WebLogic Server (WLS) instance, version 12.2.1 or later, typically, in the instance from which you want to get metrics.\n+The WebLogic Monitoring Exporter is a [Prometheus](http://prometheus.io)-compatible exporter of metrics from \n+WebLogic Server (WLS) instances, which it obtains by using the \n+[WLS RESTful Management API](https://docs.oracle.com/middleware/12213/wls/WLRUR/overview.htm#WLRUR111), available in version 12.2.1 or later. \n+Metrics are selected using a [YAML configuration file](#Configuration).\n \n-## Downloading the release\n-\n-You can find all the releases on the [Releases page](https://github.com/oracle/weblogic-monitoring-exporter/releases).\n-\n-To download the web application `wls-exporter.war` and put your configuration file into the WAR, download the `getXXX.sh` script, which is provided with each release and also can be downloaded from the Releases page, and then run:\n-\n-```\n-bash getXXX.sh <your-config-file>\n-```\n-\n-## Building from source\n-\n-Use `mvn install` to build the web application. This will create `wls-exporter-<version>`, where _version_\n-is the Maven-assigned version number.\n+The exporter is available in two forms:\n+ - A [web application](#web-application) that you deploy to the server from which metrics are to be extracted. \n+ You may include a configuration file directly in the WAR file, and you may temporarily modify the configuration in a \n+ running system by using a web form. If a [coordination configurator](config_coordinator/README.md) is running and configured, \n+ that temporary configuration will be sent to all servers configured to use it.\n+ \n+ - A [separate process](#sidecar) that is run alongside a server instance. You supply the configuration to such a\n+process with a PUT command, as described below. The [WebLogic Server Kubernetes Operator](https://github.com/oracle/weblogic-kubernetes-operator/) has special support for the exporter in this form.\n \n-Adding `-Dconfiguration=<some-config-file>` will insert the specified configuration as its default and remove\n-the version number to simplify deployment to WebLogic Server.\n \n ## Configuration\n-Here is an example `yaml` configuration:\n+Here is an example `yaml` file configuration:\n ```\n query_sync:\n   url: http://coordinator:8999/\n@@ -53,14 +47,14 @@ Note that there are two parts to the configuration. The optional top portion def\n \n | Name | Description |\n | --- | --- |\n-| `query_sync` | Optional. Configuration for a [service](config_coordinator/README.md) which coordinates updates to the query configuration. |\n+| `query_sync` | Optional, used in the web application only. Configuration for a [service](config_coordinator/README.md) which coordinates updates to the query configuration. |\n | `query_sync.url` | The URL of the service. Required if this section is present. |\n | `query_sync.interval` | The interval, in seconds, at which the service will be queried. Defaults to 10. |\n | `metricsNameSnakeCase` | If true, metrics names will be converted to snake case. Defaults to false. |\n | `domainQualifier` | If true, the domain name will be included as a qualifier for all metrics. Defaults to false. |\n-| `restPort` | Optional. Overrides the port on which the exporter should contact the REST API. Needed if the exporter cannot find the REST API. |\n+| `restPort` | Optional, used in the web application only. Overrides the port on which the exporter should contact the REST API. Needed if the exporter cannot find the REST API. The most common case is running on a system with the administration port enabled. In that case, you must specify the administration port in this field and access the exporter by using the SSL port. |\n \n-The `query` field is more complex. Each query consists of a hierarchy of the [MBeans](https://docs.oracle.com/middleware/1221/wls/WLMBR/core/index.html), starting relative to `ServerRuntimes`.\n+The `query` field is more complex. Each query consists of a hierarchy of the [MBeans](https://docs.oracle.com/middleware/12213/wls/WLMBR/core/index.html), starting relative to `ServerRuntimes`.\n Within each section, there are a number of options:\n \n | Name | Description |\n@@ -133,7 +127,104 @@ include the `restPort` configuration to tell the exporter which port to use.\n * [Chart-based sample](samples/kubernetes/end2end): This is an end-to-end sample that shows you the steps to set up monitoring for WebLogic domains using Prometheus and Grafana. Prometheus and Grafana are installed with Helm charts.\n \n \n+# Web application\n+\n+One way to use the exporter is by creating a WAR file with a default configuration and deploying it to a WebLogic Server instance.\n+\n+## Setting the configuration\n+\n+The web application has a main landing page, which displays the current [configuration](#configuration) and allows\n+you to change it, either by uploading a replacement or an addition to the queries specified with the current one.\n+Metrics will then be available from `<application-root>/metrics`.\n+\n+\n+## Downloading the release\n+\n+You can find all the exporter releases on the [Releases page](https://github.com/oracle/weblogic-monitoring-exporter/releases/).\n+\n+To download the web application `wls-exporter.war` file and put your configuration file into the WAR, download the `getXXX.sh` script, which is provided with each release and also can be downloaded from the Releases page, and then run:\n+\n+```\n+bash getXXX.sh <your-config-file>\n+```\n+\n+## Building from source\n+\n+Use `mvn install` to build the web application. This will create `wls-exporter-<version>`, where _version_\n+is the Maven-assigned version number.\n+\n+Adding `-Dconfiguration=<some-config-file>` will insert the specified configuration as its default and remove\n+the version number to simplify deployment to WebLogic Server.\n+\n+# Sidecar\n+\n+The sidecar is a standalone process that runs the exporter.\n+\n+## Build and run with Maven\n+\n+There are two ways to build the sidecar implementation. The first is with Maven, using the same `mvn install` command \n+specified [above](#building-from-source). Note that this requires JDK11 or later; building the project with JDK8 will \n+skip the sidecar module. The alternative is to [build with Docker](#building-a-docker-image) \n+\n+After building, run:\n+```\n+java -jar wls-exporter-sidecar/target/wls-exporter-sidecar.jar\n+```\n+\n+This will start the exporter on port 8080, and it will expect to find a local WebLogic Server instance, listening on port 7001.\n+\n+You can make changes by specifying parameters on the command line:\n+\n+Setting | Default | Property\n+------------ | ------------- | -------------\n+Domain name | (use WLS definition) | `DOMAIN`\n+Exporter port | `8080` | `EXPORTER_PORT`\n+WebLogic host | `localhost` | `WLS_HOST`\n+WebLogic port | `7001` | `WLS_PORT`\n+Use https | `false` | `WLS_SECURE`\n+\n+## Configure the exporter\n+\n+You configure the sidecar by sending a PUT request to the path `/configuration`. \n+You can do this with `curl`; that is how the operator does it. \n+\n+```\n+curl -X PUT -i -u myname:mypassword \\\n+    -H \"content-type: application/yaml\" \\\n+    --data-binary \"@<path to yaml>\" \\\n+    http://localhost:8080/configuration\n+``` \n+\n+Replace `myname` and `mypassword` with the credentials expected by WebLogic Server for its REST API,\n+and `<path to yaml>` with the relative path to the configuration to use.\n+\n+## Access the metrics\n+\n+After the exporter is configured, a GET to `http://localhost:8080/metrics` (or whatever port was chosen) will return the current metrics.\n+\n+## Building a Docker image\n+\n+If Docker is installed, you can build the image with the following command.\n+\n+```\n+docker build . -t <image-name>\n+```\n+\n+This will build the project and create a Docker image with the specified name. It is not necessary even \n+to do the Maven build first, as that will happen as part of creating the image. When running behind a firewall, \n+it is necessary to specify a value for the `MAVEN_OPTS` and `https_proxy` variables on the command line. For example:\n+\n+```\n+docker build . --build-arg MAVEN_OPTS=\"-Dhttps.proxyHost=www-proxy -Dhttps.proxyPort=80\" \\\n+               --build-arg https_proxy=www-proxy:80 \\\n+               -t <image-name>\n+```\n+\n+This allows Docker to download the dependencies. \n+\n+\n+ \n ## Copyright\n \n- Copyright &copy; 2017, 2020, Oracle and/or its affiliates.\n+ Copyright &copy; 2017, 2021, Oracle and/or its affiliates.\n  Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl."
  },
  {
    "sha": "c9ee34efa5cb5d2aad1a9c0cf1364bed134d1703",
    "filename": "build-helper-mojo/pom.xml",
    "status": "modified",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/build-helper-mojo/pom.xml",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/build-helper-mojo/pom.xml",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/build-helper-mojo/pom.xml?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -3,14 +3,13 @@\n     Copyright (c) 2019, Oracle and/or its affiliates.\n     Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n \n     <parent>\n         <artifactId>wls-exporter-parent</artifactId>\n         <groupId>com.oracle.wls.exporter</groupId>\n-        <version>1.3.0</version>\n+        <version>2.0.1-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>build-helper-mojo</artifactId>\n@@ -29,11 +28,26 @@\n             <artifactId>maven-plugin-annotations</artifactId>\n             <version>3.6.0</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n             <version>8.0.1</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>java-hamcrest</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.meterware.simplestub</groupId>\n+            <artifactId>simplestub</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n </project>"
  },
  {
    "sha": "33fc4d49dd1197bed9511a7bb3bb6702e50af17a",
    "filename": "build-helper-mojo/src/main/java/com/oracle/wls/buildhelper/CopyExecutorImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/build-helper-mojo/src/main/java/com/oracle/wls/buildhelper/CopyExecutorImpl.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/build-helper-mojo/src/main/java/com/oracle/wls/buildhelper/CopyExecutorImpl.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/build-helper-mojo/src/main/java/com/oracle/wls/buildhelper/CopyExecutorImpl.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -8,6 +8,8 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n \n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+\n public class CopyExecutorImpl implements CopyExecutor {\n \n   @Override\n@@ -18,6 +20,6 @@ public Path toPath(File file) {\n   @Override\n   public void copyFile(Path sourcePath, Path targetPath) throws IOException {\n     Files.createDirectories(targetPath.getParent());\n-    Files.copy(sourcePath, targetPath);\n+    Files.copy(sourcePath, targetPath, REPLACE_EXISTING);\n   }\n }"
  },
  {
    "sha": "0112cfb8f039c8ce0c02be3f4877eef1cffbfaeb",
    "filename": "build-helper-mojo/src/test/java/com/oracle/wls/buildhelper/BuildHelperMojoTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/build-helper-mojo/src/test/java/com/oracle/wls/buildhelper/BuildHelperMojoTest.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/build-helper-mojo/src/test/java/com/oracle/wls/buildhelper/BuildHelperMojoTest.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/build-helper-mojo/src/test/java/com/oracle/wls/buildhelper/BuildHelperMojoTest.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2020, Oracle and/or its affiliates.\n+// Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package com.oracle.wls.buildhelper;\n@@ -14,17 +14,17 @@\n import com.meterware.simplestub.SystemPropertySupport;\n import org.apache.maven.plugin.AbstractMojo;\n import org.hamcrest.Matchers;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import static com.meterware.simplestub.Stub.createStub;\n import static org.apache.maven.plugins.annotations.LifecyclePhase.PROCESS_RESOURCES;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.notNullValue;\n import static org.hamcrest.Matchers.nullValue;\n-import static org.hamcrest.junit.MatcherAssert.assertThat;\n \n public class BuildHelperMojoTest {\n \n@@ -33,14 +33,14 @@\n   private final CopyExecutorStub copyExecutorStub = new CopyExecutorStub();\n   private MojoTestSupport mojoTestSupport;\n \n-  @Before\n+  @BeforeEach\n   public void setUp() throws Exception {\n     mojoTestSupport = new MojoTestSupport(BuildHelperMojo.class);\n     mementos.add(StaticStubSupport.install(BuildHelperMojo.class, \"executor\", copyExecutorStub));\n     mementos.add(SystemPropertySupport.preserve(\"user.dir\"));\n   }\n \n-  @After\n+  @AfterEach\n   public void tearDown() {\n     mementos.forEach(Memento::revert);\n   }"
  },
  {
    "sha": "08811e8d8db52b31a5e06ea7e45b4d8be58daff1",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 59,
    "deletions": 33,
    "changes": 92,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/pom.xml",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/pom.xml",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/pom.xml?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,20 +1,15 @@\n <!--\n-    Copyright (c) 2019, 2020, Oracle and/or its affiliates.\n+    Copyright (c) 2019, 2021, Oracle and/or its affiliates.\n     Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n \n     <groupId>com.oracle.wls.exporter</groupId>\n     <artifactId>wls-exporter-parent</artifactId>\n-    <version>1.3.0</version>\n+    <version>2.0.1-SNAPSHOT</version>\n     <modules>\n         <module>wls-exporter-core</module>\n-        <module>build-helper-mojo</module>\n-        <module>wls-exporter-war</module>\n-        <module>wls-operator-exporter</module>\n     </modules>\n     <packaging>pom</packaging>\n \n@@ -34,7 +29,8 @@\n         <url>https://github.com/oracle/weblogic-monitoring-exporter.git</url>\n         <developerConnection>scm:git:https://github.com/oracle/weblogic-monitoring-exporter.git</developerConnection>\n         <connection>scm:git:https://github.com/oracle/weblogic-monitoring-exporter.git</connection>\n-    </scm>\n+      <tag>HEAD</tag>\n+  </scm>\n \n     <developers>\n         <developer>\n@@ -48,6 +44,9 @@\n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n         <apache.http.version>4.5.3</apache.http.version>\n+        <version.plugin.surefire>3.0.0-M5</version.plugin.surefire>\n+        <maven.compiler.source>8</maven.compiler.source>\n+        <maven.compiler.target>${maven.compiler.source}</maven.compiler.target>\n     </properties>\n \n     <build>\n@@ -68,11 +67,10 @@\n                 </plugin>\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n-                    <artifactId>maven-compiler-plugin</artifactId>\n-                    <version>3.6.1</version>\n+                    <artifactId>maven-surefire-plugin</artifactId>\n+                    <version>${version.plugin.surefire}</version>\n                     <configuration>\n-                        <source>1.8</source>\n-                        <target>1.8</target>\n+                        <useModulePath>false</useModulePath>\n                     </configuration>\n                 </plugin>\n             </plugins>\n@@ -143,33 +141,61 @@\n                 <artifactId>httpmime</artifactId>\n                 <version>4.5.13</version>\n             </dependency>\n+            <dependency>\n+              <groupId>org.junit.jupiter</groupId>\n+              <artifactId>junit-jupiter</artifactId>\n+              <version>5.7.0</version>\n+              <scope>test</scope>\n+            </dependency>\n+            <dependency>\n+                <groupId>com.meterware.simplestub</groupId>\n+                <artifactId>simplestub</artifactId>\n+                <version>1.2.12</version>\n+                <scope>test</scope>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.hamcrest</groupId>\n+                <artifactId>java-hamcrest</artifactId>\n+                <version>2.0.0.0</version>\n+                <scope>test</scope>\n+            </dependency>\n             <dependency>\n                 <groupId>org.httpunit</groupId>\n                 <artifactId>httpunit</artifactId>\n                 <version>1.7.2</version>\n                 <scope>test</scope>\n+                <exclusions>\n+                    <exclusion>\n+                        <groupId>junit</groupId>\n+                        <artifactId>junit</artifactId>\n+                    </exclusion>\n+                </exclusions>\n             </dependency>\n         </dependencies>\n     </dependencyManagement>\n \n-    <dependencies>\n-        <dependency>\n-            <groupId>junit</groupId>\n-            <artifactId>junit</artifactId>\n-            <version>4.13.1</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.hamcrest</groupId>\n-            <artifactId>hamcrest-junit</artifactId>\n-            <version>2.0.0.0</version>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.meterware.simplestub</groupId>\n-            <artifactId>simplestub</artifactId>\n-            <version>1.2.12</version>\n-            <scope>test</scope>\n-        </dependency>\n-    </dependencies>\n+    <profiles>\n+        <profile>\n+            <id>helidon-sidecar</id>\n+            <activation>\n+                <jdk>[11,)</jdk>\n+            </activation>\n+            <modules>\n+                <module>wls-exporter-sidecar</module>\n+            </modules>\n+        </profile>\n+        <profile>\n+            <id>include-webapp</id>\n+            <activation>\n+                <property>\n+                    <name>!docker-build</name>\n+                </property>\n+            </activation>\n+            <modules>\n+                <module>build-helper-mojo</module>\n+                <module>wls-exporter-war</module>\n+            </modules>\n+        </profile>\n+    </profiles>\n+\n </project>"
  },
  {
    "sha": "b7cea9002c2421efd981130d267fb878b58dd2a2",
    "filename": "start_exporter.sh",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/start_exporter.sh",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/start_exporter.sh",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/start_exporter.sh?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,5 @@\n+#!/bin/bash\n+# Copyright (c) 2021, Oracle and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+java $JAVA_OPTS -jar wls-exporter-sidecar.jar\n\\ No newline at end of file"
  },
  {
    "sha": "ce1053be64c07406bb0e758f9e59aa936bc4ce54",
    "filename": "wls-exporter-core/pom.xml",
    "status": "modified",
    "additions": 19,
    "deletions": 5,
    "changes": 24,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/pom.xml",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/pom.xml",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/pom.xml?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,19 +1,18 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n-    Copyright (c) 2020, Oracle and/or its affiliates.\n+    Copyright (c) 2020, 2021, Oracle and/or its affiliates.\n     Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n -->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <parent>\n         <artifactId>wls-exporter-parent</artifactId>\n         <groupId>com.oracle.wls.exporter</groupId>\n-        <version>1.3.0</version>\n+        <version>2.0.1-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>wls-exporter-core</artifactId>\n+    <name>WebLogic Monitoring Exporter Core</name>\n \n     <dependencies>\n         <dependency>\n@@ -61,6 +60,21 @@\n             <artifactId>httpmime</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.meterware.simplestub</groupId>\n+            <artifactId>simplestub</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.junit.jupiter</groupId>\n+          <artifactId>junit-jupiter</artifactId>\n+          <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>java-hamcrest</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.httpunit</groupId>\n             <artifactId>httpunit</artifactId>"
  },
  {
    "sha": "8e227026567a021ccef3ff6b26c948ea36eaa01b",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticatedCall.java",
    "status": "added",
    "additions": 127,
    "deletions": 0,
    "changes": 127,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticatedCall.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticatedCall.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticatedCall.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+\n+import com.oracle.wls.exporter.domain.MBeanSelector;\n+import com.oracle.wls.exporter.domain.QueryType;\n+\n+import static java.net.HttpURLConnection.HTTP_FORBIDDEN;\n+import static java.net.HttpURLConnection.HTTP_INTERNAL_ERROR;\n+import static java.net.HttpURLConnection.HTTP_UNAUTHORIZED;\n+\n+/**\n+ * A base context which performs authentication by forwarding all pertinent headers between the client\n+ * and the WLS RESTful Management services, thus using that service's security.\n+ */\n+public abstract class AuthenticatedCall {\n+    private final WebClientFactory webClientFactory;\n+    private final InvocationContext context;\n+    private final UrlBuilder urlBuilder;\n+\n+\n+    public AuthenticatedCall(WebClientFactory webClientFactory, InvocationContext context) {\n+        this.webClientFactory = webClientFactory;\n+        this.context = context;\n+        this.urlBuilder = context.createUrlBuilder();\n+    }\n+\n+    public String getAuthenticationUrl() {\n+        return urlBuilder.createUrl(QueryType.RUNTIME_URL_PATTERN);\n+    }\n+\n+    String getQueryUrl(MBeanSelector selector) {\n+        return urlBuilder.createUrl(selector.getQueryType().getUrlPattern());\n+    }\n+\n+    void reportFailure(RestPortConnectionException e) {\n+        urlBuilder.reportFailure(e);\n+    }\n+\n+    public WebClient createWebClient() {\n+        final WebClient webClient = webClientFactory.createClient();\n+        webClient.addHeader(\"X-Requested-By\", \"rest-exporter\");\n+\n+        setAuthentication(webClient);\n+        return webClient;\n+    }\n+\n+    protected void setAuthentication(WebClient webClient) {\n+        webClient.setAuthentication(context.getAuthenticationHeader());\n+     }\n+\n+    /**\n+     * Performs a servlet action, wrapping it with authentication handling.\n+     *\n+     * This involves creating an object which can make http calls to the RESTful services, configuring it to\n+     * include the authentication header, if any, received from client. Any authentication errors from\n+     * the services will be returned to the client.\n+     *\n+     * @throws IOException if an error occurs in the web client\n+     */\n+    public void doWithAuthentication() throws IOException {\n+        try {\n+            WebClient webClient = createWebClient();\n+            performRequest(webClient);\n+            urlBuilder.reportSuccess();\n+        } catch (ForbiddenException e) {\n+            context.sendError(HTTP_FORBIDDEN, \"Not authorized\");\n+        } catch (AuthenticationChallengeException e) {\n+            context.setResponseHeader(\"WWW-Authenticate\", e.getChallenge());\n+            context.sendError(HTTP_UNAUTHORIZED, \"Authentication required\");\n+        } catch (ServerErrorException e) {\n+            final int status = e.getStatus();\n+            context.sendError(status, e.getMessage());\n+        } catch (RestPortConnectionException e) {\n+            context.setStatus(HTTP_INTERNAL_ERROR);\n+            reportUnableToContactRestApi(e.getUri());\n+        } finally {\n+            context.close();\n+        }\n+    }\n+\n+    /**\n+     * Returns a name for the instance for which the exporter is reporting metrics.\n+     */\n+    public String getInstanceName() {\n+        return context.getInstanceName();\n+    }\n+\n+    /**\n+     * Returns the MIME type of the data in the request stream.\n+     */\n+    public String getRequestContentType() {\n+        return context.getContentType();\n+    }\n+\n+\n+    private void performRequest(WebClient webClient) throws IOException {\n+        do {\n+            invoke(webClient, context);\n+        } while (webClient.isRetryNeeded());\n+    }\n+\n+    private void reportUnableToContactRestApi(String uri) throws IOException {\n+        try (PrintStream out = context.getResponseStream()) {\n+            out.println(\"# Unable to contact the REST API at \" + uri + \". May be using the wrong port.\");\n+            out.println(\"#\");\n+            out.println(\"# This most commonly occurs when the exporter is accessed via a load balancer\");\n+            out.println(\"# configured on a different port than the managed server.\");\n+            out.println(\"#\");\n+            out.println(\"# You can correct this by giving the exporter WAR an initial configuration with the\");\n+            out.println(\"# restPort field set to the managed server's plain text port.\");\n+        }\n+    }\n+\n+    /**\n+     * Performs an action that requires authentication from WebLogic's REST API using the current invocation context.\n+     * @param webClient the client to send the request\n+     * @param context an invocation context\n+     * @throws IOException if an error occurs\n+     */\n+    protected abstract void invoke(WebClient webClient, InvocationContext context) throws IOException;\n+\n+}"
  },
  {
    "sha": "ff01b3d890e38ccc02532d758368d370db7b316b",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticationChallengeException.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticationChallengeException.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticationChallengeException.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/AuthenticationChallengeException.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,15 +1,15 @@\n-// Copyright (c) 2019, 2020, Oracle and/or its affiliates.\n+// Copyright (c) 2019, 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package com.oracle.wls.exporter;\n \n /**\n  * An exception indicating that the server has sent a challenge, demanding authentication.\n  */\n-class AuthenticationChallengeException extends WebClientException {\n-    private String challenge;\n+public class AuthenticationChallengeException extends WebClientException {\n+    private final String challenge;\n \n-    AuthenticationChallengeException(String challenge) {\n+    public AuthenticationChallengeException(String challenge) {\n         this.challenge = challenge;\n     }\n "
  },
  {
    "sha": "605acb854943ab52848588fa846f3aa10cd65f57",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/CallFactory.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/CallFactory.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/CallFactory.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/CallFactory.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.IOException;\n+\n+public interface CallFactory {\n+\n+  /**\n+   * Creates processing to handle a form submission to update the exporter configuration.\n+   * @param invocationContext context of the invocation, containing request and response objects.\n+   */\n+  void invokeConfigurationFormCall(InvocationContext invocationContext) throws IOException;\n+\n+  /**\n+   * Creates processing to handle a request for metrics.\n+   * @param invocationContext context of the invocation, containing request and response objects.\n+   */\n+  void invokeMetricsCall(InvocationContext invocationContext) throws IOException;\n+}"
  },
  {
    "sha": "f4eb98db8dbc7df28cb6d01ef28c8ec9425ee72a",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationCall.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationCall.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationCall.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationCall.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import com.oracle.wls.exporter.domain.ConfigurationException;\n+import com.oracle.wls.exporter.domain.ExporterConfig;\n+\n+public abstract class ConfigurationCall extends AuthenticatedCall {\n+\n+  public ConfigurationCall(WebClientFactory webClientFactory, InvocationContext context) {\n+    super(webClientFactory, context);\n+  }\n+\n+  @Override\n+  protected void invoke(WebClient webClient, InvocationContext context) throws IOException {\n+    try (InputStream requestStream = context.getRequestStream()){\n+      authenticate(webClient.withUrl(getAuthenticationUrl()));\n+      createConfigurationAction(getRequestContentType(), requestStream).perform();\n+      reportUpdatedConfiguration(context);\n+    } catch (RestPortConnectionException e) {\n+      reportFailure(e);\n+      webClient.setRetryNeeded();\n+    } catch (ConfigurationException e) {\n+      reportUnableToUpdateConfiguration(context, e);\n+    }\n+  }\n+\n+  // Authenticates by attempting to send a request to the Management RESTful API.\n+  private void authenticate(WebClient webClient) throws IOException {\n+    webClient.doPostRequest(\"{ 'links':[], 'fields':[], 'children':{} }\".replace(\"'\", \"\\\"\"));\n+  }\n+\n+  abstract ConfigurationAction createConfigurationAction(String contentType, InputStream inputStream) throws IOException;\n+\n+  protected abstract void reportUpdatedConfiguration(InvocationContext context) throws IOException;\n+\n+  abstract void reportUnableToUpdateConfiguration(InvocationContext context, ConfigurationException e) throws IOException;\n+\n+  static abstract class ConfigurationAction {\n+\n+    private ExporterConfig uploadedConfig;\n+\n+    final void defineUploadedFile(InputStream inputStream) {\n+      try {\n+        uploadedConfig = ExporterConfig.loadConfig(inputStream);\n+      } catch (ConfigurationException e) {\n+        throw e;\n+      } catch (Throwable e) {\n+        throw new RuntimeException(\"Unable to understand specified configuration\");\n+      }\n+    }\n+\n+    public abstract void perform();\n+\n+    ExporterConfig getUploadedConfig() {\n+      return uploadedConfig;\n+    }\n+  }\n+}"
  },
  {
    "sha": "e465c9704cb32fcb8f80e5df5ecc58b69aac2880",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationDisplay.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationDisplay.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationDisplay.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationDisplay.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+\n+public class ConfigurationDisplay {\n+\n+  public static void displayConfiguration(OutputStream outputStream) {\n+      try (PrintStream ps = new PrintStream(outputStream)) {\n+          ps.println(\"<p>Current Configuration</p>\");\n+          ps.println(\"<p><code><pre>\");\n+          ps.print(LiveConfiguration.asString());\n+          ps.println(\"</pre></code></p>\");\n+      }\n+  }\n+}"
  },
  {
    "sha": "bca7bedb7f340c7f2d21e684953418910dc896a0",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationFormCall.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationFormCall.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationFormCall.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationFormCall.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import com.oracle.wls.exporter.domain.ConfigurationException;\n+\n+import static com.oracle.wls.exporter.WebAppConstants.APPEND_ACTION;\n+import static com.oracle.wls.exporter.WebAppConstants.DEFAULT_ACTION;\n+import static com.oracle.wls.exporter.WebAppConstants.MAIN_PAGE;\n+import static com.oracle.wls.exporter.WebAppConstants.REPLACE_ACTION;\n+\n+public class ConfigurationFormCall extends ConfigurationCall {\n+\n+  public ConfigurationFormCall(WebClientFactory webClientFactory, InvocationContext context) {\n+    super(webClientFactory, context);\n+  }\n+\n+  @Override\n+  ConfigurationAction createConfigurationAction(String contentType, InputStream inputStream) throws IOException {\n+    return new ConfigurationFormAction(contentType, inputStream);\n+  }\n+\n+  @Override\n+  protected void reportUpdatedConfiguration(InvocationContext context) throws IOException {\n+    context.sendRedirect(MAIN_PAGE);\n+  }\n+\n+  @Override\n+  void reportUnableToUpdateConfiguration(InvocationContext context, ConfigurationException e) throws IOException {\n+    PrintStream out = context.getResponseStream();\n+    out.println(WebAppConstants.PAGE_HEADER);\n+    out.println(\"<H1>Unable to Update Configuration</H1><p>\");\n+    out.println(e.getMessage());\n+    out.println(\"</p>\" + \"</body></html>\");\n+    out.println(\"<form action=\\\"\" + context.getApplicationContext() + \"/\\\">\");\n+    out.println(\"    <br><input type=\\\"submit\\\" value=\\\"OK\\\">\");\n+    out.println(\"</form>\");\n+    out.close();\n+  }\n+\n+  private static class ConfigurationFormAction extends ConfigurationAction {\n+\n+    // The action to take. May be either \"replace\" or \"append\"\n+    private String effect = DEFAULT_ACTION;\n+\n+    public ConfigurationFormAction(String contentType, InputStream inputStream) throws IOException {\n+      if (!isMultipartContent(contentType)) throw new RuntimeException(\"Must be a multi-part request\");\n+\n+      configure(MultipartContentParser.parse(contentType, inputStream));\n+    }\n+\n+    private boolean isMultipartContent(String contentType) {\n+      return contentType.toLowerCase(Locale.ENGLISH).startsWith(\"multipart/\");\n+    }\n+\n+    private void configure(List<MultipartItem> fileItems) throws IOException {\n+      for (MultipartItem item : fileItems) {\n+        if (item.isFormField()) {\n+          if (item.getFieldName().equals(WebAppConstants.EFFECT_OPTION))\n+            setEffect(item.getString());\n+        } else {\n+          try (InputStream configStream = item.getInputStream()) {\n+            defineUploadedFile(configStream);\n+          }\n+        }\n+      }\n+    }\n+\n+    void setEffect(String effect) {\n+      this.effect = effect;\n+    }\n+\n+    @Override\n+    public void perform() {\n+      if (effect.equalsIgnoreCase(REPLACE_ACTION))\n+        LiveConfiguration.replaceConfiguration(getUploadedConfig());\n+      else if (effect.equalsIgnoreCase(APPEND_ACTION))\n+        LiveConfiguration.appendConfiguration(getUploadedConfig());\n+    }\n+  }\n+}"
  },
  {
    "sha": "4f7716479fba9c99b302ba3f0541d943341b9aed",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationPutCall.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationPutCall.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationPutCall.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationPutCall.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.oracle.wls.exporter.domain.ConfigurationException;\n+\n+public class ConfigurationPutCall extends ConfigurationCall {\n+\n+  private static final Set<String> SUPPORTED_CONTENT_TYPES\n+        = new HashSet<>(Arrays.asList(\"application/yaml\", \"text/yaml\", \"application/json\", \"text/json\"));\n+\n+  public ConfigurationPutCall(WebClientFactory webClientFactory, InvocationContext context) {\n+    super(webClientFactory, context);\n+  }\n+\n+  @Override\n+  ConfigurationAction createConfigurationAction(String contentType, InputStream inputStream) {\n+    return new ConfigurationPutAction(contentType, inputStream);\n+  }\n+\n+  @Override\n+  protected void reportUpdatedConfiguration(InvocationContext context) {\n+    // do nothing\n+  }\n+\n+  @Override\n+  void reportUnableToUpdateConfiguration(InvocationContext context, ConfigurationException e) throws IOException {\n+    context.sendError(HttpURLConnection.HTTP_BAD_REQUEST, e.getMessage());\n+  }\n+\n+  static class ConfigurationPutAction extends ConfigurationAction {\n+\n+    public ConfigurationPutAction(String contentType, InputStream inputStream) {\n+      if (!isSupportedContentType(contentType))\n+        throw new ServerErrorException(HttpURLConnection.HTTP_BAD_REQUEST, \"Unsupported content type: \" + contentType);\n+\n+      defineUploadedFile(inputStream);\n+    }\n+\n+    private boolean isSupportedContentType(String contentType) {\n+      return SUPPORTED_CONTENT_TYPES.contains(contentType);\n+    }\n+\n+    @Override\n+    public void perform() {\n+      LiveConfiguration.replaceConfiguration(getUploadedConfig());\n+    }\n+  }\n+}"
  },
  {
    "sha": "f676ed24606315f876fd3f7144adf7941bff1594",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationServlet.java",
    "status": "removed",
    "additions": 0,
    "deletions": 129,
    "changes": 129,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/cf9327282f4df2acdab68086dacac6942a7665bb/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationServlet.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/cf9327282f4df2acdab68086dacac6942a7665bb/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationServlet.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationServlet.java?ref=cf9327282f4df2acdab68086dacac6942a7665bb",
    "patch": "@@ -1,129 +0,0 @@\n-// Copyright (c) 2017, 2020, Oracle and/or its affiliates.\n-// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n-\n-package com.oracle.wls.exporter;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.List;\n-import java.util.Locale;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletOutputStream;\n-import javax.servlet.annotation.WebServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import com.oracle.wls.exporter.domain.ConfigurationException;\n-import com.oracle.wls.exporter.domain.ExporterConfig;\n-\n-import static com.oracle.wls.exporter.ServletConstants.APPEND_ACTION;\n-import static com.oracle.wls.exporter.ServletConstants.DEFAULT_ACTION;\n-import static com.oracle.wls.exporter.ServletConstants.MAIN_PAGE;\n-import static com.oracle.wls.exporter.ServletConstants.REPLACE_ACTION;\n-\n-/**\n- * A servlet which handles updates to the exporter configuration.\n- *\n- * @author Russell Gold\n- */\n-@WebServlet(value = \"/\" + ServletConstants.CONFIGURATION_PAGE)\n-public class ConfigurationServlet extends PassThroughAuthenticationServlet {\n-\n-    @SuppressWarnings(\"unused\")  // production constructor\n-    public ConfigurationServlet() {\n-        this(new WebClientFactoryImpl());\n-    }\n-\n-    ConfigurationServlet(WebClientFactory webClientFactory) {\n-        super(webClientFactory);\n-    }\n-\n-    @Override\n-    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n-        doWithAuthentication(request, response, this::updateConfiguration);\n-    }\n-\n-    private void updateConfiguration(WebClient webClient, HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        try {\n-            authenticate(webClient.withUrl(getAuthenticationUrl()));\n-            if (!isMultipartContent(req)) throw new ServletException(\"Must be a multi-part request\");\n-\n-            createPostAction(webClient, req).perform();\n-            reportUpdatedConfiguration(resp);\n-        } catch (RestPortConnectionException e) {\n-            reportFailure(e);\n-            webClient.setRetryNeeded();\n-        } catch (ConfigurationException e) {\n-            reportUnableToUpdateConfiguration(req, resp.getOutputStream(), e);\n-        }\n-    }\n-\n-    // Authenticates by attempting to send a request to the Management RESTful API.\n-    private void authenticate(WebClient webClient) throws IOException {\n-        webClient.doPostRequest(\"{ 'links':[], 'fields':[], 'children':{} }\".replace(\"'\", \"\\\"\"));\n-    }\n-\n-    private boolean isMultipartContent(HttpServletRequest request) {\n-        return request.getContentType().toLowerCase(Locale.ENGLISH).startsWith(\"multipart/\");\n-    }\n-\n-    private void reportUpdatedConfiguration(HttpServletResponse response) throws IOException {\n-        response.sendRedirect(MAIN_PAGE);\n-    }\n-\n-    private void reportUnableToUpdateConfiguration(HttpServletRequest request, ServletOutputStream out, ConfigurationException e) throws IOException {\n-        out.println(ServletConstants.PAGE_HEADER);\n-        out.println(\"<H1>Unable to Update Configuration</H1><p>\");\n-        out.println(e.getMessage());\n-        out.println(\"</p>\" +\"</body></html>\");\n-        out.println(\"<form action=\\\"\" + request.getContextPath() + \"/\\\">\");\n-        out.println(\"    <br><input type=\\\"submit\\\" value=\\\"OK\\\">\");\n-        out.println(\"</form>\");\n-        out.close();\n-    }\n-\n-    private PostAction createPostAction(WebClient webClient, HttpServletRequest request) throws IOException, ServletException {\n-        PostAction postAction = new PostAction();\n-        configure(postAction, MultipartContentParser.parse(request));\n-        return postAction;\n-    }\n-\n-    private void configure(PostAction postAction, List<MultipartItem> fileItems) throws IOException, ServletException {\n-        for (MultipartItem item : fileItems) {\n-            if (!item.isFormField()) {\n-                postAction.defineUploadedFile(item.getInputStream());\n-            } else if (item.getFieldName().equals(ServletConstants.EFFECT_OPTION))\n-                postAction.setEffect(item.getString());\n-        }\n-    }\n-\n-    private static class PostAction {\n-        // The action to take. May be either \"replace\" or \"append\"\n-        private String effect = DEFAULT_ACTION;\n-        private ExporterConfig uploadedConfig;\n-\n-        private void defineUploadedFile(InputStream inputStream) throws ServletException {\n-            try {\n-                uploadedConfig = ExporterConfig.loadConfig(inputStream);\n-            } catch(ConfigurationException e) {\n-                throw e;\n-            } catch (Throwable e) {\n-                throw new ServletException(\"Unable to understand specified configuration\");\n-            }\n-        }\n-\n-        void perform() throws ServletException {\n-            ExporterConfig uploadedConfig = this.uploadedConfig;\n-\n-            if (effect.equalsIgnoreCase(REPLACE_ACTION))\n-                LiveConfiguration.replaceConfiguration(uploadedConfig);\n-            else if (effect.equalsIgnoreCase(APPEND_ACTION))\n-                LiveConfiguration.appendConfiguration(uploadedConfig);\n-        }\n-\n-        void setEffect(String effect) {\n-            this.effect = effect;\n-        }\n-    }\n-\n-}"
  },
  {
    "sha": "27197bc95db20f90299cd1c5de03ae3f584d630b",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdate.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdate.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdate.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdate.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017, 2020, Oracle and/or its affiliates.\n+// Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package com.oracle.wls.exporter;\n@@ -8,16 +8,16 @@\n  *\n  * @author Russell Gold\n  */\n-class ConfigurationUpdate {\n-    private long timestamp;\n-    private String configuration;\n+public class ConfigurationUpdate {\n+    private final long timestamp;\n+    private final String configuration;\n \n-    ConfigurationUpdate(long timestamp, String configuration) {\n+    public ConfigurationUpdate(long timestamp, String configuration) {\n         this.timestamp = timestamp;\n         this.configuration = configuration;\n     }\n \n-    long getTimestamp() {\n+    public long getTimestamp() {\n         return timestamp;\n     }\n "
  },
  {
    "sha": "93a88a3c6e290b189eba0386eb138d05cfae4ab3",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdater.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdater.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdater.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdater.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019, 2020, Oracle and/or its affiliates.\n+// Copyright (c) 2019, 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package com.oracle.wls.exporter;\n@@ -8,7 +8,7 @@\n  *\n  * @author Russell Gold\n  */\n-interface ConfigurationUpdater {\n+public interface ConfigurationUpdater {\n \n     /**\n      * Returns the timestamp associated with the latest known configuration update."
  },
  {
    "sha": "459128085a43dd7307210a87ea186f98c630a3ba",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdaterImpl.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdaterImpl.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdaterImpl.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ConfigurationUpdaterImpl.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -3,13 +3,13 @@\n \n package com.oracle.wls.exporter;\n \n-import com.google.gson.Gson;\n-import com.oracle.wls.exporter.domain.QuerySyncConfiguration;\n-\n import java.io.IOException;\n import java.time.Clock;\n import java.time.Instant;\n \n+import com.google.gson.Gson;\n+import com.oracle.wls.exporter.domain.QuerySyncConfiguration;\n+\n /**\n  * An object to manage interactions with the configuration repeater over HTTP.\n  *\n@@ -32,7 +32,8 @@\n     ConfigurationUpdaterImpl(QuerySyncConfiguration syncConfiguration, ErrorLog errorLog) {\n         this(Clock.systemUTC(), new WebClientFactoryImpl());\n         this.errorLog = errorLog;\n-        configure(syncConfiguration.getUrl(), syncConfiguration.getRefreshInterval());\n+        this.repeaterUrl = syncConfiguration.getUrl();\n+        this.refreshInterval = syncConfiguration.getRefreshInterval();\n     }\n \n     /**\n@@ -86,7 +87,7 @@ public void shareConfiguration(String configuration) {\n         try {\n             WebClient client = factory.createClient().withUrl(repeaterUrl);\n \n-            client.doPutRequest(new Gson().toJson(createUpdate(configuration)));\n+            client.doPutRequest(createUpdate(configuration));\n         } catch (IOException | WebClientException e) {\n             errorLog.log(e);\n         }"
  },
  {
    "sha": "c5db7e9c107c1533bf39b3a814fc0e4d6cc516b8",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ErrorLog.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ErrorLog.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ErrorLog.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ErrorLog.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,16 +1,16 @@\n-// Copyright (c) 2019, 2020, Oracle and/or its affiliates.\n+// Copyright (c) 2019, 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package com.oracle.wls.exporter;\n \n-class ErrorLog {\n-    private StringBuilder errors = new StringBuilder();\n+public class ErrorLog {\n+    private final StringBuilder errors = new StringBuilder();\n \n     /**\n      * Report an exception.\n      * @param throwable the exception\n      */\n-    void log(Throwable throwable) {\n+    public void log(Throwable throwable) {\n         errors.append(toLogMessage(throwable));\n         for (Throwable cause = throwable.getCause(); cause != null; cause = cause.getCause())\n             errors.append(System.lineSeparator()).append(\"  \").append(toLogMessage(cause));\n@@ -28,7 +28,7 @@ private String toLogMessage(Throwable throwable) {\n      * returns the current error log.\n      * @return a string of errors, separated by line breaks.\n      */\n-    String getErrors() {\n+    public String getErrors() {\n         return errors.toString();\n     }\n }"
  },
  {
    "sha": "33174ed773789085e4d379250644c01cdbe934d5",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterCall.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterCall.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterCall.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterCall.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,89 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import com.oracle.wls.exporter.domain.MBeanSelector;\n+\n+import static com.oracle.wls.exporter.domain.MapUtils.isNullOrEmptyString;\n+import static java.net.HttpURLConnection.HTTP_BAD_REQUEST;\n+\n+public class ExporterCall extends AuthenticatedCall {\n+\n+  public ExporterCall(WebClientFactory webClientFactory, InvocationContext context) {\n+    super(webClientFactory, context);\n+    Locale.setDefault(Locale.US);\n+  }\n+\n+  @Override\n+  protected void invoke(WebClient webClient, InvocationContext context) throws IOException {\n+    LiveConfiguration.updateConfiguration();\n+    try (OutputStream responseStream = context.getResponseStream();\n+         MetricsStream metricsStream = new MetricsStream(getInstanceName(), responseStream)) {\n+      if (!LiveConfiguration.hasQueries())\n+        metricsStream.println(\"# No configuration defined.\");\n+      else {\n+        displayMetrics(webClient, metricsStream);\n+      }\n+    }\n+  }\n+\n+  private void displayMetrics(WebClient webClient, MetricsStream metricsStream) throws IOException {\n+    try {\n+      for (MBeanSelector selector : LiveConfiguration.getQueries())\n+        displayMetrics(webClient, metricsStream, selector);\n+      metricsStream.printPerformanceMetrics();\n+    } catch (RestPortConnectionException e) {\n+      reportFailure(e);\n+      webClient.setRetryNeeded();\n+    }\n+  }\n+\n+  private void displayMetrics(WebClient webClient, MetricsStream metricsStream, MBeanSelector selector) throws IOException {\n+    try {\n+      Map<String, Object> metrics = getMetrics(webClient, selector);\n+      if (metrics != null)\n+        sort(metrics).forEach(metricsStream::printMetric);\n+    } catch (RestQueryException e) {\n+      metricsStream.println(\n+            withCommentMarkers(\"REST service was unable to handle this query and returned a \" + HTTP_BAD_REQUEST + \"\\n\"\n+                  + selector.getPrintableRequest()));\n+    } catch (AuthenticationChallengeException e) {  // don't add a message for this case\n+      throw e;\n+    } catch (IOException | RuntimeException | Error e) {\n+      WlsRestExchanges.addExchange(getQueryUrl(selector), selector.getRequest(), e.toString());\n+      throw e;\n+    }\n+  }\n+\n+  private static String withCommentMarkers(String string) {\n+    StringBuilder sb = new StringBuilder();\n+    for (String s : string.split(\"\\\\r?\\\\n\"))\n+      sb.append(\"# \").append(s).append(System.lineSeparator());\n+    return sb.toString();\n+  }\n+\n+  private Map<String, Object> getMetrics(WebClient webClient, MBeanSelector selector) throws IOException {\n+    String jsonResponse = requestMetrics(webClient, selector);\n+    if (isNullOrEmptyString(jsonResponse)) return null;\n+\n+    return LiveConfiguration.scrapeMetrics(selector, jsonResponse);\n+  }\n+\n+  private String requestMetrics(WebClient webClient, MBeanSelector selector) throws IOException {\n+    String url = getQueryUrl(selector);\n+    String jsonResponse = webClient.withUrl(url).doPostRequest(selector.getRequest());\n+    WlsRestExchanges.addExchange(url, selector.getRequest(), jsonResponse);\n+    return jsonResponse;\n+  }\n+\n+  private TreeMap<String, Object> sort(Map<String, Object> metrics) {\n+    return new TreeMap<>(metrics);\n+  }\n+}"
  },
  {
    "sha": "5d3033766f77dafaa0af788e6788a1f2221e0e3c",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterServlet.java",
    "status": "removed",
    "additions": 0,
    "deletions": 121,
    "changes": 121,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/cf9327282f4df2acdab68086dacac6942a7665bb/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterServlet.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/cf9327282f4df2acdab68086dacac6942a7665bb/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterServlet.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterServlet.java?ref=cf9327282f4df2acdab68086dacac6942a7665bb",
    "patch": "@@ -1,121 +0,0 @@\n-// Copyright (c) 2017, 2020, Oracle and/or its affiliates.\n-// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n-\n-package com.oracle.wls.exporter;\n-\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.util.Map;\n-import java.util.TreeMap;\n-import javax.servlet.ServletConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.annotation.WebServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import com.oracle.wls.exporter.domain.MBeanSelector;\n-\n-import static com.oracle.wls.exporter.domain.MapUtils.isNullOrEmptyString;\n-\n-/**\n- * The servlet which produces the exported metrics.\n- *\n- * @author Russell Gold\n- */\n-@WebServlet(value = \"/\" + ServletConstants.METRICS_PAGE)\n-public class ExporterServlet extends PassThroughAuthenticationServlet {\n-\n-    @SuppressWarnings(\"unused\")  // production constructor\n-    public ExporterServlet() {\n-        this(new WebClientFactoryImpl());\n-    }\n-\n-    ExporterServlet(WebClientFactory webClientFactory) {\n-        super(webClientFactory);\n-    }\n-\n-    @Override\n-    public void init(ServletConfig servletConfig) {\n-        LiveConfiguration.init(servletConfig);\n-    }\n-\n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        doWithAuthentication(req, resp, this::displayMetrics);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // The req parameter is not used, but is required by 'doWithAuthentication'\n-    private void displayMetrics(WebClient webClient, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n-        LiveConfiguration.updateConfiguration();\n-        try (MetricsStream metricsStream = new MetricsStream(req, resp.getOutputStream())) {\n-            if (!LiveConfiguration.hasQueries())\n-                metricsStream.println(\"# No configuration defined.\");\n-            else\n-                printMetrics(webClient, metricsStream);\n-        }\n-    }\n-\n-    private void printMetrics(WebClient webClient, MetricsStream metricsStream) throws IOException {\n-        try {\n-            for (MBeanSelector selector : LiveConfiguration.getQueries())\n-                displayMetrics(webClient, metricsStream, selector);\n-            metricsStream.printPerformanceMetrics();\n-        } catch (RestPortConnectionException e) {\n-            reportFailure(e);\n-            webClient.setRetryNeeded();\n-        }\n-    }\n-\n-    private void displayMetrics(WebClient webClient, MetricsStream metricsStream, MBeanSelector selector) throws IOException {\n-        try {\n-            Map<String, Object> metrics = getMetrics(webClient, selector);\n-            if (metrics != null)\n-                sort(metrics).forEach(metricsStream::printMetric);\n-        } catch (RestQueryException e) {\n-            metricsStream.println(\n-                  withCommentMarkers(\"REST service was unable to handle this query\\n\"\n-                        + selector.getPrintableRequest() + '\\n'\n-                        + \"exception: \" + e.getMessage()));\n-        } catch (AuthenticationChallengeException e) {  // don't add a message for this case\n-            throw e;\n-        }  catch (IOException | RuntimeException | Error e) {\n-            MessagesServlet.addExchange(getQueryUrl(selector), selector.getRequest(), toStackTrace(e));\n-            throw e;\n-        }\n-    }\n-\n-    private String toStackTrace(Throwable e) {\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw);\n-        e.printStackTrace(pw);\n-        pw.close();\n-        return sw.toString();\n-    }\n-\n-    private String withCommentMarkers(String string) {\n-        StringBuilder sb = new StringBuilder();\n-        for (String s : string.split(\"\\\\r?\\\\n\"))\n-            sb.append(\"# \").append(s).append(System.lineSeparator());\n-        return sb.toString();\n-    }\n-\n-    private TreeMap<String, Object> sort(Map<String, Object> metrics) {\n-        return new TreeMap<>(metrics);\n-    }\n-\n-    private Map<String, Object> getMetrics(WebClient webClient, MBeanSelector selector) throws IOException {\n-        String jsonResponse = requestMetrics(webClient, selector);\n-        if (isNullOrEmptyString(jsonResponse)) return null;\n-\n-        return LiveConfiguration.scrapeMetrics(selector, jsonResponse);\n-    }\n-\n-    private String requestMetrics(WebClient webClient, MBeanSelector selector) throws IOException {\n-        String url = getQueryUrl(selector);\n-        String jsonResponse = webClient.withUrl(url).doPostRequest(selector.getRequest());\n-        MessagesServlet.addExchange(url, selector.getRequest(), jsonResponse);\n-        return jsonResponse;\n-    }\n-\n-}"
  },
  {
    "sha": "9cff0983573936c4aac277d9e7b2f1faa15c9b67",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterSession.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/cf9327282f4df2acdab68086dacac6942a7665bb/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterSession.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/cf9327282f4df2acdab68086dacac6942a7665bb/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterSession.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ExporterSession.java?ref=cf9327282f4df2acdab68086dacac6942a7665bb",
    "patch": "@@ -1,45 +0,0 @@\n-// Copyright (c) 2017, 2020, Oracle and/or its affiliates.\n-// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n-\n-package com.oracle.wls.exporter;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Manages the session behavior of the exporter.\n- *\n- * @author Russell Gold\n- */\n-class ExporterSession {\n-    static final String SESSION_COOKIE_PREFIX = \"JSESSIONID=\";\n-\n-    private static final String SESSION_ID_REGEX = \"[!-+--:<-~]+\";\n-    private static final String SESSION_COOKIE_REGEX = \".*(\" + SESSION_COOKIE_PREFIX + SESSION_ID_REGEX + \").*\";\n-    private static final Pattern SESSION_COOKIE_PATTERN = Pattern.compile(SESSION_COOKIE_REGEX);\n-\n-    /** The authentication string currently used to access the REST API. **/\n-    private static String authentication;\n-\n-    /** The REST API session cookie. Consists of the prefix plus a session ID. **/\n-    private static String sessionCookie;\n-\n-    static String getSessionCookie(String headerValue) {\n-        Matcher matcher = SESSION_COOKIE_PATTERN.matcher(headerValue);\n-        return matcher.matches() ? matcher.group(1) : null;\n-    }\n-\n-    static void cacheSession(String authentication, String sessionCookie) {\n-        ExporterSession.authentication = authentication;\n-        ExporterSession.sessionCookie = sessionCookie;\n-    }\n-\n-    static String getAuthentication() {\n-        return authentication;\n-    }\n-\n-    static String getSessionCookie() {\n-        return sessionCookie;\n-    }\n-\n-}"
  },
  {
    "sha": "7f74b9bf4ae7822d51f8588b54ea77a8ccf76f78",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/ForbiddenException.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ForbiddenException.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ForbiddenException.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/ForbiddenException.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017, 2020, Oracle and/or its affiliates.\n+// Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package com.oracle.wls.exporter;\n@@ -8,5 +8,5 @@\n  *\n  * @author Russell Gold\n  */\n-class ForbiddenException extends WebClientException {\n+public class ForbiddenException extends WebClientException {\n }"
  },
  {
    "sha": "999460a2ce9b959a2ccad3381d2db7d3bcf62e69",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/InvocationContext.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/InvocationContext.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/InvocationContext.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/InvocationContext.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+\n+/**\n+ * Context for the invocation of AuthenticatedCall objects. This largely acts as a facade for request and response objects.\n+ */\n+public interface InvocationContext {\n+\n+  /**\n+   * Creates an object that will generate an appropriate URL to contact WebLogic.\n+   */\n+  UrlBuilder createUrlBuilder();\n+\n+  /**\n+   * Returns the root context of the exporter application, for use in error messages.\n+   */\n+  String getApplicationContext();\n+\n+  /**\n+   * Returns the authentication header sent to the exporter from the client. It will be passed on to WebLogic.\n+   */\n+  String getAuthenticationHeader();\n+\n+  /**\n+   * Returns the content type of the client request.\n+   */\n+  String getContentType();\n+\n+  /**\n+   * Returns an identifier for the WebLogic Server instance. It will be included in generated metrics.\n+   */\n+  String getInstanceName();\n+\n+  /**\n+   * Returns a stream from which client request contents may be read.\n+   * @throws IOException if unable to get the stream\n+   */\n+  InputStream getRequestStream() throws IOException;\n+\n+  /**\n+   * Returns a stream to which responses to the client may be written.\n+   * @throws IOException if unable to get the stream\n+   */\n+  PrintStream getResponseStream() throws IOException;\n+\n+  /**\n+   * Updates the response to specify an error code and explanatory message and closes the response stream.\n+   * @param status an HTTP error code\n+   * @param msg a descriptive message\n+   */\n+  void sendError(int status, String msg) throws IOException;\n+\n+  /**\n+   *  Updates the response to redirect to a new web location and closes he response stream.\n+   * @param location the location, relative to the web application\n+   * @throws IOException if unable to redirect\n+   */\n+  void sendRedirect(String location) throws IOException;\n+\n+  /**\n+   * Sets a header on the response.\n+   * @param name the header name\n+   * @param value the value for the header\n+   */\n+  void setResponseHeader(String name, String value);\n+\n+  /**\n+   * Updates the response with a status but does not close he response stream.\n+   * @param status an HTTP status code\n+   */\n+  void setStatus(int status);\n+\n+  /**\n+   * Closes this context and flushes any pending outputs.\n+   */\n+  void close();\n+}"
  },
  {
    "sha": "dfe0318d17d090b5aa02dfbb43884ba58ca766cb",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/JsonEntity.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/JsonEntity.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/JsonEntity.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/JsonEntity.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package com.oracle.wls.exporter;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import com.google.gson.Gson;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.message.BasicHeader;\n+import org.apache.http.protocol.HTTP;\n+import org.apache.http.util.Args;\n+\n+public class JsonEntity<T> implements HttpEntity {\n+\n+  static final Charset CHARSET = StandardCharsets.UTF_8;\n+  private final byte[] representation;\n+  private final Header contentEncoding;\n+  private final Header contentType;\n+\n+  public JsonEntity(T item) {\n+    representation = new Gson().toJson(item).getBytes(CHARSET);\n+    contentEncoding = new BasicHeader(HTTP.CONTENT_ENCODING, CHARSET.toString());\n+    contentType = new BasicHeader(HTTP.CONTENT_TYPE, ContentType.APPLICATION_JSON.toString());\n+  }\n+\n+  @Override\n+  public boolean isRepeatable() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isChunked() {\n+    return false;\n+  }\n+\n+  @Override\n+  public long getContentLength() {\n+    return representation.length;\n+  }\n+\n+  @Override\n+  public Header getContentType() {\n+    return contentType;\n+  }\n+\n+  @Override\n+  public Header getContentEncoding() {\n+    return contentEncoding;\n+  }\n+\n+  @Override\n+  public InputStream getContent() throws UnsupportedOperationException {\n+    return new ByteArrayInputStream(representation);\n+  }\n+\n+  @Override\n+  public void writeTo(OutputStream outStream) throws IOException {\n+    Args.notNull(outStream, \"Output stream\");\n+    outStream.write(representation);\n+    outStream.flush();\n+  }\n+\n+  @Override\n+  public boolean isStreaming() {\n+    return false;\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public void consumeContent() {\n+  }\n+}"
  },
  {
    "sha": "7924dda9683768b3097027c124370980f69e670d",
    "filename": "wls-exporter-core/src/main/java/com/oracle/wls/exporter/LiveConfiguration.java",
    "status": "modified",
    "additions": 16,
    "deletions": 50,
    "changes": 66,
    "blob_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/blob/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/LiveConfiguration.java",
    "raw_url": "https://github.com/ConnectionMaster/weblogic-monitoring-exporter/raw/555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0/wls-exporter-core/src/main/java/com/oracle/wls/exporter/LiveConfiguration.java",
    "contents_url": "https://api.github.com/repos/ConnectionMaster/weblogic-monitoring-exporter/contents/wls-exporter-core/src/main/java/com/oracle/wls/exporter/LiveConfiguration.java?ref=555dcb4aed0b3f361b937bf1b5a6cf0c4756fba0",
    "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017, 2020, Oracle and/or its affiliates.\n+// Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package com.oracle.wls.exporter;\n@@ -9,9 +9,6 @@\n import java.net.UnknownHostException;\n import java.util.Map;\n import java.util.Optional;\n-import javax.servlet.ServletConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n \n import com.google.gson.JsonObject;\n import com.google.gson.JsonParser;\n@@ -25,9 +22,7 @@\n  *\n  * @author Russell Gold\n  */\n-class LiveConfiguration {\n-    /** The path to the configuration file within the web application. */\n-    static final String CONFIG_YML = \"/config.yml\";\n+public class LiveConfiguration {\n \n     /** The address used to access WLS (cannot use the address found in the request due to potential server-side request forgery. */\n     static final String WLS_HOST;\n@@ -58,7 +53,7 @@ private static ExporterConfig getConfig() {\n     }\n \n \n-    static void loadFromString(String yamlString) {\n+    public static void loadFromString(String yamlString) {\n         Map<String, Object> yamlConfig = new Yaml().load(yamlString);\n \n         config = ExporterConfig.loadConfig(yamlConfig);\n@@ -70,29 +65,11 @@ static void loadFromString(String yamlString) {\n      * @param serverName the name of the server\n      * @param serverPort the port on which the server is listening\n      */\n-    static void setServer(String serverName, int serverPort) {\n+    public static void setServer(String serverName, int serverPort) {\n         LiveConfiguration.serverName = serverName;\n         LiveConfiguration.serverPort = serverPort;\n     }\n \n-    /**\n-     * Specifies the server on which to contact the Management RESTful services.\n-     *\n-     * @param req the incoming request\n-     */\n-    static void setServer(HttpServletRequest req) {\n-        LiveConfiguration.setServer(req.getServerName(), req.getServerPort());\n-    }\n-\n-    /**\n-     * Creates a builder for URLs that can handle retries to alternative ports.\n-     * @param request the active servlet request\n-     * @return the new builder\n-     */\n-    static UrlBuilder createUrlBuilder(HttpServletRequest request) {\n-        return new UrlBuilder(request, getConfiguredRestPort());\n-    }\n-\n     static Integer getConfiguredRestPort() {\n         return Optional.ofNullable(config).map(ExporterConfig::getRestPort).orElse(null);\n     }\n@@ -117,20 +94,13 @@ static boolean hasQueries() {\n      * Returns the accumulatedLoggedErrors\n      * @return a string containing errors or the empty string;\n      */\n-    static String getErrors() {\n+    public static String getErrors() {\n         return errorLog.getErrors();\n     }\n \n-    /**\n-     * Loads the initial configuration during servlet load. Will skip the initialization if the configuration\n-     * has already been loaded from the config coordinator.\n-     *\n-     * @param servletConfig a standard servlet configuration which points to an exporter configuration\n-     */\n-    static void init(ServletConfig servletConfig) {\n+    public static void initialize(InputStream configurationFile) {\n         if (timestamp != null) return;\n-        \n-        InputStream configurationFile = getConfigurationFile(servletConfig);\n+\n         initialize(Optional.ofNullable(configurationFile)\n                 .map(ExporterConfig::loadConfig)\n                 .orElse(ExporterConfig.createEmptyConfig()));\n@@ -149,15 +119,11 @@ private static void installUpdater(QuerySyncConfiguration syncConfiguration) {\n         updater = new ConfigurationUpdaterImpl(syncConfiguration, errorLog);\n     }\n \n-    private static InputStream getConfigurationFile(ServletConfig config) {\n-        return config.getServletContext().getResourceAsStream(CONFIG_YML);\n-    }\n-\n     /**\n      * Returns a string representation of the current configuration, prepended with the server location.\n      * @return a human readable representation of the configuration\n      */\n-    static String asString() {\n+    public static String asString() {\n         return \"host: \" + serverName + '\\n' +\n                \"port: \" + serverPort + '\\n' + getConfig();\n     }\n@@ -173,18 +139,18 @@ static String asString() {\n     }\n \n     private static JsonObject toJsonObject(String response) {\n-        return new JsonParser().parse(response).getAsJsonObject();\n+        return JsonParser.parseString(response).getAsJsonObject();\n     }\n \n     /**\n      * Updates the current configuration by appending any queries from the specified one to it.\n      * Other fields from the new configuration, including the query_spec, will be ignored.\n      *\n      * @param uploadedConfig an exporter configuration\n-     * @throws ServletException if an error occurs while trying to perform the update.\n+     * @throws RuntimeException if an error occurs while trying to perform the update.\n      */\n-    static void appendConfiguration(ExporterConfig uploadedConfig) throws ServletException {\n-        if (uploadedConfig == null) throw new ServletException(\"No configuration specified\");\n+    static void appendConfiguration(ExporterConfig uploadedConfig) {\n+        if (uploadedConfig == null) throw new RuntimeException(\"No configuration specified\");\n         getConfig().append(uploadedConfig);\n         shareConfiguration();\n     }\n@@ -199,10 +165,10 @@ private static void shareConfiguration() {\n      * Other fields from the new configuration, including the query_spec, will be ignored.\n      *\n      * @param uploadedConfig an exporter configuration\n-     * @throws ServletException if an error occurs while trying to perform the update.\n+     * @throws RuntimeException if an error occurs while trying to perform the update.\n      */\n-    static void replaceConfiguration(ExporterConfig uploadedConfig) throws ServletException {\n-        if (uploadedConfig == null) throw new ServletException(\"No configuration specified\");\n+    static void replaceConfiguration(ExporterConfig uploadedConfig) {\n+        if (uploadedConfig == null) throw new RuntimeException(\"No configuration specified\");\n         getConfig().replace(uploadedConfig);\n         shareConfiguration();\n     }\n@@ -218,7 +184,7 @@ static long getTimestamp() {\n     /**\n      * If a newer shared configuration is available, update it now.\n      */\n-    static void updateConfiguration() {\n+    public static void updateConfiguration() {\n         if (timestamp == null) timestamp = 0L;\n         if (updater.getLatestConfigurationTimestamp() > timestamp)\n             installNewConfiguration(updater.getUpdate());"
  }
]
