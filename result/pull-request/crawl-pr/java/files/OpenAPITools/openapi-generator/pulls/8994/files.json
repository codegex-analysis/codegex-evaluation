[
  {
    "sha": "fca8dcd101b8cddc668cc623a4f3dc5b97adb47d",
    "filename": "modules/openapi-generator/src/main/resources/php-symfony/api_input_validation.mustache",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/6e0c738565085f4b7de5b2570e43c72ba6189a66/modules/openapi-generator/src/main/resources/php-symfony/api_input_validation.mustache",
    "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/6e0c738565085f4b7de5b2570e43c72ba6189a66/modules/openapi-generator/src/main/resources/php-symfony/api_input_validation.mustache",
    "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/modules/openapi-generator/src/main/resources/php-symfony/api_input_validation.mustache?ref=6e0c738565085f4b7de5b2570e43c72ba6189a66",
    "patch": "@@ -19,11 +19,11 @@\n     {{#items}}\n         $asserts[] = new Assert\\All([\n             new Assert\\Type(\"{{dataType}}\"),\n-            {{^isPrimitiveType}}\n-            new Assert\\Valid(),\n-            {{/isPrimitiveType}}\n         ]);\n     {{/items}}\n+    {{^isPrimitiveType}}\n+        $asserts[] = new Assert\\Valid();\n+    {{/isPrimitiveType}}\n {{/isContainer}}\n {{^isContainer}}\n     {{#isDate}}"
  },
  {
    "sha": "ca07f62678d6f824a4aa19c25671815a46de0ceb",
    "filename": "samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/PetController.php",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/6e0c738565085f4b7de5b2570e43c72ba6189a66/samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/PetController.php",
    "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/6e0c738565085f4b7de5b2570e43c72ba6189a66/samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/PetController.php",
    "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/PetController.php?ref=6e0c738565085f4b7de5b2570e43c72ba6189a66",
    "patch": "@@ -257,6 +257,7 @@ public function findPetsByStatusAction(Request $request)\n         $asserts[] = new Assert\\All([\n             new Assert\\Type(\"string\"),\n         ]);\n+        $asserts[] = new Assert\\Valid();\n         $response = $this->validate($status, $asserts);\n         if ($response instanceof Response) {\n             return $response;\n@@ -345,6 +346,7 @@ public function findPetsByTagsAction(Request $request)\n         $asserts[] = new Assert\\All([\n             new Assert\\Type(\"string\"),\n         ]);\n+        $asserts[] = new Assert\\Valid();\n         $response = $this->validate($tags, $asserts);\n         if ($response instanceof Response) {\n             return $response;"
  },
  {
    "sha": "52af362ae3475ac1f1d9196c103c4be4f334bcfd",
    "filename": "samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/UserController.php",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/OpenAPITools/openapi-generator/blob/6e0c738565085f4b7de5b2570e43c72ba6189a66/samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/UserController.php",
    "raw_url": "https://github.com/OpenAPITools/openapi-generator/raw/6e0c738565085f4b7de5b2570e43c72ba6189a66/samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/UserController.php",
    "contents_url": "https://api.github.com/repos/OpenAPITools/openapi-generator/contents/samples/server/petstore/php-symfony/SymfonyBundle-php/Controller/UserController.php?ref=6e0c738565085f4b7de5b2570e43c72ba6189a66",
    "patch": "@@ -163,8 +163,8 @@ public function createUsersWithArrayInputAction(Request $request)\n         $asserts[] = new Assert\\NotNull();\n         $asserts[] = new Assert\\All([\n             new Assert\\Type(\"OpenAPI\\Server\\Model\\User\"),\n-            new Assert\\Valid(),\n         ]);\n+        $asserts[] = new Assert\\Valid();\n         $response = $this->validate($body, $asserts);\n         if ($response instanceof Response) {\n             return $response;\n@@ -242,8 +242,8 @@ public function createUsersWithListInputAction(Request $request)\n         $asserts[] = new Assert\\NotNull();\n         $asserts[] = new Assert\\All([\n             new Assert\\Type(\"OpenAPI\\Server\\Model\\User\"),\n-            new Assert\\Valid(),\n         ]);\n+        $asserts[] = new Assert\\Valid();\n         $response = $this->validate($body, $asserts);\n         if ($response instanceof Response) {\n             return $response;"
  }
]
