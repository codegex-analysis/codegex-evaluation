[
  {
    "sha": "a0dd8232158b676d08f51f3a0a1d54d6d93a5ff2",
    "filename": "bundles/org.openhab.binding.lutron/README.md",
    "status": "modified",
    "additions": 20,
    "deletions": 12,
    "changes": 32,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/README.md",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/README.md",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/README.md?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -794,7 +794,12 @@ end\n This binding integrates with the legacy Lutron RadioRA (Classic) lighting system.\n \n This binding depends on RS232 communication.\n-It has only been tested using the Chronos time module but the RS232 module should work as well.\n+It has only been tested using the Chronos System Bridge and Timeclock (RA-SBT-CHR) module, but Lutron's RA-RS232 or RB-RS232 module should work as well.\n+\n+Support has been added for bridged RadioRA systems.\n+A system is considered “bridged” when a Chronos System Bridge and Timeclock is used to integrate two RadioRA Systems in a single residence.\n+In a bridged system, the `system` parameter of each configured ra-dimmer, ra-switch, or ra-phantomButton thing should be set to indicate which RadioRA system it is a part of (i.e. 1 or 2).\n+In a non-bridged system, these parameters should be left at their default of 0.\n \n ## Supported Things\n \n@@ -808,17 +813,20 @@ This binding currently supports the following thing types:\n | ra-phantomButton | Thing   | Phantom Button to control multiple controls (Scenes) |\n \n \n-## Thing Configurations\n-\n-| Thing            | Config       | Description                                                           |\n-|------------------|--------------|-----------------------------------------------------------------------|\n-| ra-rs232         | portName     | The serial port to use to communicate with Chronos or RS232 module    |\n-|                  | baud         | (Optional) Baud Rate (defaults to 9600)                               |\n-| ra-dimmer        | zoneNumber   | Assigned Zone Number within the Lutron RadioRA system                 |\n-|                  | fadeOutSec   | (Optional) Time in seconds dimmer should take when lowering the level |\n-|                  | fadeInSec    | (Optional) Time in seconds dimmer should take when lowering the level |\n-| ra-switch        | zoneNumber   | Assigned Zone Number within the Lutron RadioRA system                 |\n-| ra-phantomButton | buttonNumber | Phantom Button Number within the Lutron RadioRA system                |\n+## Thing Configuration Parameters\n+\n+| Thing            | Parameter    | Description                                                            |\n+|------------------|--------------|------------------------------------------------------------------------|\n+| ra-rs232         | portName     | The serial port to use to communicate with Chronos or RS232 module     |\n+|                  | baud         | (Optional) Baud Rate (defaults to 9600)                                |\n+| ra-dimmer        | zoneNumber   | Assigned Zone Number within the Lutron RadioRA system                  |\n+|                  | system       | (Optional) System number (1 or 2) in a bridged system. Default=0 (n/a) |\n+|                  | fadeOutSec   | (Optional) Time in seconds dimmer should take when lowering the level  |\n+|                  | fadeInSec    | (Optional) Time in seconds dimmer should take when lowering the level  |\n+| ra-switch        | zoneNumber   | Assigned Zone Number within the Lutron RadioRA system                  |\n+|                  | system       | (Optional) System number (1 or 2) in a bridged system. Default=0 (n/a) |\n+| ra-phantomButton | buttonNumber | Phantom Button Number within the Lutron RadioRA system                 |\n+|                  | system       | (Optional) System number (1 or 2) in a bridged system. Default=0 (n/a) |\n \n ## Channels\n "
  },
  {
    "sha": "f917aa0127254c79bc530152a5294ca4cabdf821",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232Connection.java",
    "status": "modified",
    "additions": 33,
    "deletions": 8,
    "changes": 41,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232Connection.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232Connection.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232Connection.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -15,8 +15,11 @@\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n+import java.io.OutputStream;\n import java.util.TooManyListenersException;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.lutron.internal.radiora.protocol.RadioRAFeedback;\n import org.openhab.core.io.transport.serial.PortInUseException;\n import org.openhab.core.io.transport.serial.SerialPort;\n@@ -34,16 +37,17 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class RS232Connection implements RadioRAConnection, SerialPortEventListener {\n \n     private final Logger logger = LoggerFactory.getLogger(RS232Connection.class);\n \n     protected SerialPortManager serialPortManager;\n-    protected SerialPort serialPort;\n+    protected @Nullable SerialPort serialPort;\n \n-    protected BufferedReader inputReader;\n+    protected @Nullable BufferedReader inputReader;\n \n-    protected RadioRAFeedbackListener listener;\n+    protected @Nullable RadioRAFeedbackListener listener;\n     protected RS232MessageParser parser = new RS232MessageParser();\n \n     public RS232Connection(SerialPortManager serialPortManager) {\n@@ -59,7 +63,8 @@ public void open(String portName, int baud) throws RadioRAConnectionException {\n         }\n \n         try {\n-            serialPort = portIdentifier.open(\"openhab\", 5000);\n+            SerialPort serialPort = portIdentifier.open(\"openhab\", 5000);\n+            this.serialPort = serialPort;\n             serialPort.notifyOnDataAvailable(true);\n             serialPort.setSerialPortParams(baud, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n             serialPort.addEventListener(this);\n@@ -78,24 +83,39 @@ public void open(String portName, int baud) throws RadioRAConnectionException {\n     @Override\n     public void write(String command) {\n         logger.debug(\"Writing to serial port: {}\", command.toString());\n+        SerialPort serialPort = this.serialPort;\n+\n         try {\n-            serialPort.getOutputStream().write(command.getBytes());\n+            if (serialPort != null) {\n+                OutputStream outputStream = serialPort.getOutputStream();\n+                if (outputStream != null) {\n+                    outputStream.write(command.getBytes());\n+                } else {\n+                    logger.debug(\"Cannot write to serial port. outputStream is null.\");\n+                }\n+            } else {\n+                logger.debug(\"Cannot write to serial port. serialPort is null.\");\n+            }\n         } catch (IOException e) {\n             logger.debug(\"An error occurred writing to serial port\", e);\n         }\n     }\n \n     @Override\n     public void disconnect() {\n-        serialPort.close();\n+        SerialPort serialPort = this.serialPort;\n+        if (serialPort != null) {\n+            serialPort.close();\n+        }\n     }\n \n     @Override\n     public void serialEvent(SerialPortEvent ev) {\n         switch (ev.getEventType()) {\n             case SerialPortEvent.DATA_AVAILABLE:\n+                BufferedReader inputReader = this.inputReader;\n                 try {\n-                    if (!inputReader.ready()) {\n+                    if (inputReader == null || !inputReader.ready()) {\n                         logger.debug(\"Serial Data Available but input reader not ready\");\n                         return;\n                     }\n@@ -106,7 +126,12 @@ public void serialEvent(SerialPortEvent ev) {\n \n                     if (feedback != null) {\n                         logger.debug(\"Msg Parsed as {}\", feedback.getClass().getName());\n-                        listener.handleRadioRAFeedback(feedback);\n+                        RadioRAFeedbackListener listener = this.listener;\n+                        if (listener != null) {\n+                            listener.handleRadioRAFeedback(feedback);\n+                        } else {\n+                            logger.debug(\"Cannot handle feedback message. Listener is null.\");\n+                        }\n                     }\n                     logger.debug(\"Finished handling feedback\");\n                 } catch (IOException e) {"
  },
  {
    "sha": "6052f748d251b306d8b3bf60bed983b29b626bdf",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232MessageParser.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232MessageParser.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232MessageParser.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RS232MessageParser.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,8 @@\n  */\n package org.openhab.binding.lutron.internal.radiora;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.lutron.internal.radiora.protocol.LEDMapFeedback;\n import org.openhab.binding.lutron.internal.radiora.protocol.LocalZoneChangeFeedback;\n import org.openhab.binding.lutron.internal.radiora.protocol.RadioRAFeedback;\n@@ -25,11 +27,12 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class RS232MessageParser {\n \n-    private Logger logger = LoggerFactory.getLogger(RS232MessageParser.class);\n+    private final Logger logger = LoggerFactory.getLogger(RS232MessageParser.class);\n \n-    public RadioRAFeedback parse(String msg) {\n+    public @Nullable RadioRAFeedback parse(String msg) {\n         String prefix = parsePrefix(msg);\n \n         switch (prefix) {"
  },
  {
    "sha": "e03b6287d9f2b85107294b1970ab8b38018dc3b9",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnection.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnection.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnection.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnection.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,12 +12,15 @@\n  */\n package org.openhab.binding.lutron.internal.radiora;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Interface to the RadioRA Classic system\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public interface RadioRAConnection {\n \n     public void open(String portName, int baud) throws RadioRAConnectionException;"
  },
  {
    "sha": "df9f7106deb99dad36f7bc0c991633cc702b02c1",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnectionException.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnectionException.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnectionException.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAConnectionException.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,12 +12,15 @@\n  */\n package org.openhab.binding.lutron.internal.radiora;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Thrown when an attempt to open a RadioRA Connection fails.\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class RadioRAConnectionException extends Exception {\n \n     private static final long serialVersionUID = 1L;"
  },
  {
    "sha": "4e6050e6cb0d1152bea354c4ae9e2f016b1d1770",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAFeedbackListener.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAFeedbackListener.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAFeedbackListener.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/RadioRAFeedbackListener.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,7 @@\n  */\n package org.openhab.binding.lutron.internal.radiora;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.binding.lutron.internal.radiora.protocol.RadioRAFeedback;\n \n /**\n@@ -20,6 +21,7 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public interface RadioRAFeedbackListener {\n \n     void handleRadioRAFeedback(RadioRAFeedback feedback);"
  },
  {
    "sha": "08a32a39db1a62b2631d081f4a5a7e967aac2dfe",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/DimmerConfig.java",
    "status": "modified",
    "additions": 4,
    "deletions": 15,
    "changes": 19,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/DimmerConfig.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/DimmerConfig.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/DimmerConfig.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -21,31 +21,20 @@\n  *\n  */\n public class DimmerConfig {\n-    private int zoneNumber;\n-    private BigDecimal fadeOutSec;\n-    private BigDecimal fadeInSec;\n+    public int zoneNumber;\n+    public int system = 0;\n+    public BigDecimal fadeOutSec;\n+    public BigDecimal fadeInSec;\n \n     public int getZoneNumber() {\n         return zoneNumber;\n     }\n \n-    public void setZoneNumber(int zoneNumber) {\n-        this.zoneNumber = zoneNumber;\n-    }\n-\n     public BigDecimal getFadeOutSec() {\n         return fadeOutSec;\n     }\n \n-    public void setFadeOutSec(BigDecimal fadeOutSec) {\n-        this.fadeOutSec = fadeOutSec;\n-    }\n-\n     public BigDecimal getFadeInSec() {\n         return fadeInSec;\n     }\n-\n-    public void setFadeInSec(BigDecimal fadeInSec) {\n-        this.fadeInSec = fadeInSec;\n-    }\n }"
  },
  {
    "sha": "2c68be75f3a3fe676c76911f1640ac318200dc61",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/PhantomButtonConfig.java",
    "status": "modified",
    "additions": 5,
    "deletions": 16,
    "changes": 21,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/PhantomButtonConfig.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/PhantomButtonConfig.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/PhantomButtonConfig.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,32 +12,21 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.config;\n \n-import java.math.BigDecimal;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n \n /**\n  * Configuration class for PhantomButton thing type.\n- * \n+ *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class PhantomButtonConfig {\n \n-    private int buttonNumber;\n-    private BigDecimal fadeSec;\n+    public int buttonNumber;\n+    public int system = 0;\n \n     public int getButtonNumber() {\n         return buttonNumber;\n     }\n-\n-    public void setButtonNumber(int buttonNumber) {\n-        this.buttonNumber = buttonNumber;\n-    }\n-\n-    public BigDecimal getFadeSec() {\n-        return fadeSec;\n-    }\n-\n-    public void setFadeSec(BigDecimal fadeSec) {\n-        this.fadeSec = fadeSec;\n-    }\n }"
  },
  {
    "sha": "07ab05787546ca61418ef1b020f3540980153d24",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/RS232Config.java",
    "status": "modified",
    "additions": 6,
    "deletions": 15,
    "changes": 21,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/RS232Config.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/RS232Config.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/RS232Config.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,39 +12,30 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.config;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Configuration class for RS232 thing type.\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class RS232Config {\n \n-    private String portName;\n-    private int baud = 9600;\n-    private int zoneMapQueryInterval = 60;\n+    public String portName = \"\";\n+    public int baud = 9600;\n+    public int zoneMapQueryInterval = 60;\n \n     public String getPortName() {\n         return portName;\n     }\n \n-    public void setPortName(String portName) {\n-        this.portName = portName;\n-    }\n-\n     public int getBaud() {\n         return baud;\n     }\n \n-    public void setBaud(int baud) {\n-        this.baud = baud;\n-    }\n-\n     public int getZoneMapQueryInterval() {\n         return zoneMapQueryInterval;\n     }\n-\n-    public void setZoneMapQueryInterval(int zoneMapQueryInterval) {\n-        this.zoneMapQueryInterval = zoneMapQueryInterval;\n-    }\n }"
  },
  {
    "sha": "064a000de5a707c8f20f4d2dd73398a4e32c1679",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/SwitchConfig.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/SwitchConfig.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/SwitchConfig.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/config/SwitchConfig.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,21 +12,21 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.config;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Configuration class for Switch thing type.\n- * \n+ *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class SwitchConfig {\n \n-    private int zoneNumber;\n+    public int zoneNumber;\n+    public int system = 0;\n \n     public int getZoneNumber() {\n         return zoneNumber;\n     }\n-\n-    public void setZoneNumber(int zoneNumber) {\n-        this.zoneNumber = zoneNumber;\n-    }\n }"
  },
  {
    "sha": "051ab6254a905eb5cc5b565df7d69f246882c127",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/DimmerHandler.java",
    "status": "modified",
    "additions": 22,
    "deletions": 9,
    "changes": 31,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/DimmerHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/DimmerHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/DimmerHandler.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -15,6 +15,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.binding.lutron.internal.LutronBindingConstants;\n import org.openhab.binding.lutron.internal.radiora.config.DimmerConfig;\n import org.openhab.binding.lutron.internal.radiora.protocol.LocalZoneChangeFeedback;\n@@ -34,43 +35,52 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class DimmerHandler extends LutronHandler {\n \n     /**\n      * Used to internally keep track of dimmer level. This helps us better respond\n      * to external dimmer changes since RadioRA protocol does not send dimmer\n      * levels in their messages.\n      */\n+    private @NonNullByDefault({}) DimmerConfig config;\n     private AtomicInteger lastKnownIntensity = new AtomicInteger(100);\n-\n     private AtomicBoolean switchEnabled = new AtomicBoolean(false);\n \n     public DimmerHandler(Thing thing) {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(DimmerConfig.class);\n+        super.initialize();\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n-        DimmerConfig config = getConfigAs(DimmerConfig.class);\n+        RS232Handler bridgeHandler = getRS232Handler();\n+        if (bridgeHandler == null) {\n+            return;\n+        }\n \n         if (LutronBindingConstants.CHANNEL_LIGHTLEVEL.equals(channelUID.getId())) {\n             if (command instanceof PercentType) {\n                 int intensity = ((PercentType) command).intValue();\n \n-                SetDimmerLevelCommand cmd = new SetDimmerLevelCommand(config.getZoneNumber(), intensity);\n-                getRS232Handler().sendCommand(cmd);\n+                SetDimmerLevelCommand cmd = new SetDimmerLevelCommand(config.getZoneNumber(), intensity, config.system);\n+                bridgeHandler.sendCommand(cmd);\n \n                 updateInternalState(intensity);\n             }\n \n             if (command instanceof OnOffType) {\n                 OnOffType onOffCmd = (OnOffType) command;\n \n-                SetSwitchLevelCommand cmd = new SetSwitchLevelCommand(config.getZoneNumber(), onOffCmd);\n-                getRS232Handler().sendCommand(cmd);\n+                SetSwitchLevelCommand cmd = new SetSwitchLevelCommand(config.getZoneNumber(), onOffCmd, config.system);\n+                bridgeHandler.sendCommand(cmd);\n \n                 updateInternalState(onOffCmd);\n-\n             }\n         }\n     }\n@@ -85,7 +95,10 @@ public void handleFeedback(RadioRAFeedback feedback) {\n     }\n \n     private void handleZoneMapFeedback(ZoneMapFeedback feedback) {\n-        char value = feedback.getZoneValue(getConfigAs(DimmerConfig.class).getZoneNumber());\n+        if (!systemsMatch(feedback.getSystem(), config.system)) {\n+            return;\n+        }\n+        char value = feedback.getZoneValue(config.getZoneNumber());\n         if (value == '1') {\n             turnDimmerOnToLastKnownIntensity();\n         } else if (value == '0') {\n@@ -94,7 +107,7 @@ private void handleZoneMapFeedback(ZoneMapFeedback feedback) {\n     }\n \n     private void handleLocalZoneChangeFeedback(LocalZoneChangeFeedback feedback) {\n-        if (feedback.getZoneNumber() == getConfigAs(DimmerConfig.class).getZoneNumber()) {\n+        if (systemsMatch(feedback.getSystem(), config.system) && feedback.getZoneNumber() == config.getZoneNumber()) {\n             if (LocalZoneChangeFeedback.State.ON.equals(feedback.getState())) {\n                 turnDimmerOnToLastKnownIntensity();\n             } else if (LocalZoneChangeFeedback.State.OFF.equals(feedback.getState())) {"
  },
  {
    "sha": "b0e9cd80ffb854cceb158605293f2ec403b25f6f",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/LutronHandler.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/LutronHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/LutronHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/LutronHandler.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,8 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.handler;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.lutron.internal.radiora.protocol.RadioRAFeedback;\n import org.openhab.core.thing.Bridge;\n import org.openhab.core.thing.Thing;\n@@ -26,13 +28,14 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public abstract class LutronHandler extends BaseThingHandler {\n \n     public LutronHandler(Thing thing) {\n         super(thing);\n     }\n \n-    public RS232Handler getRS232Handler() {\n+    public @Nullable RS232Handler getRS232Handler() {\n         Bridge bridge = getBridge();\n         if (bridge == null) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED, \"Unable to get bridge\");\n@@ -47,6 +50,13 @@ public RS232Handler getRS232Handler() {\n         }\n     }\n \n+    /**\n+     * Returns true if system numbers match, meaning that either both are 2 or both are 1 or 0 (n/a).\n+     */\n+    public static boolean systemsMatch(int a, int b) {\n+        return ((a == 2 && b == 2) || ((a == 0 || a == 1) && (b == 0 || b == 1)));\n+    }\n+\n     public abstract void handleFeedback(RadioRAFeedback feedback);\n \n     @Override"
  },
  {
    "sha": "6b17f9193c56f5942015da5a0dd474e3a6c1e1eb",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/PhantomButtonHandler.java",
    "status": "modified",
    "additions": 16,
    "deletions": 4,
    "changes": 20,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/PhantomButtonHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/PhantomButtonHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/PhantomButtonHandler.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,7 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.handler;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.binding.lutron.internal.LutronBindingConstants;\n import org.openhab.binding.lutron.internal.radiora.config.PhantomButtonConfig;\n import org.openhab.binding.lutron.internal.radiora.protocol.ButtonPressCommand;\n@@ -28,20 +29,31 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class PhantomButtonHandler extends LutronHandler {\n \n+    private @NonNullByDefault({}) PhantomButtonConfig config;\n+\n     public PhantomButtonHandler(Thing thing) {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(PhantomButtonConfig.class);\n+        super.initialize();\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n+        RS232Handler bridgeHandler = getRS232Handler();\n         if (channelUID.getId().equals(LutronBindingConstants.CHANNEL_SWITCH)) {\n             if (command instanceof OnOffType) {\n-                ButtonPressCommand cmd = new ButtonPressCommand(\n-                        getConfigAs(PhantomButtonConfig.class).getButtonNumber(),\n-                        ButtonPressCommand.ButtonState.valueOf(command.toString()));\n-                getRS232Handler().sendCommand(cmd);\n+                ButtonPressCommand cmd = new ButtonPressCommand(config.getButtonNumber(),\n+                        ButtonPressCommand.ButtonState.valueOf(command.toString()), config.system);\n+                if (bridgeHandler != null) {\n+                    bridgeHandler.sendCommand(cmd);\n+                }\n             }\n         }\n     }"
  },
  {
    "sha": "66cd7b502082d62780624de9f79f2a1f3b5d6a5f",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/RS232Handler.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/RS232Handler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/RS232Handler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/RS232Handler.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -15,6 +15,8 @@\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.lutron.internal.radiora.RS232Connection;\n import org.openhab.binding.lutron.internal.radiora.RadioRAConnection;\n import org.openhab.binding.lutron.internal.radiora.RadioRAConnectionException;\n@@ -41,13 +43,14 @@\n  *\n  * @author Jeff Lauterbach - Initial contribution\n  */\n+@NonNullByDefault\n public class RS232Handler extends BaseBridgeHandler implements RadioRAFeedbackListener {\n \n-    private Logger logger = LoggerFactory.getLogger(RS232Handler.class);\n+    private final Logger logger = LoggerFactory.getLogger(RS232Handler.class);\n \n     private RadioRAConnection connection;\n \n-    private ScheduledFuture<?> zoneMapScheduledTask;\n+    private @Nullable ScheduledFuture<?> zoneMapScheduledTask;\n \n     public RS232Handler(Bridge bridge, SerialPortManager serialPortManager) {\n         super(bridge);\n@@ -58,6 +61,7 @@ public RS232Handler(Bridge bridge, SerialPortManager serialPortManager) {\n \n     @Override\n     public void dispose() {\n+        ScheduledFuture<?> zoneMapScheduledTask = this.zoneMapScheduledTask;\n         if (zoneMapScheduledTask != null) {\n             zoneMapScheduledTask.cancel(true);\n         }"
  },
  {
    "sha": "aa3e27eab0ec1d950682248d8e955820bfd62110",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/SwitchHandler.java",
    "status": "modified",
    "additions": 21,
    "deletions": 6,
    "changes": 27,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/SwitchHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/SwitchHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/handler/SwitchHandler.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,7 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.handler;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.binding.lutron.internal.LutronBindingConstants;\n import org.openhab.binding.lutron.internal.radiora.config.SwitchConfig;\n import org.openhab.binding.lutron.internal.radiora.protocol.LocalZoneChangeFeedback;\n@@ -31,22 +32,33 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class SwitchHandler extends LutronHandler {\n \n-    private Logger logger = LoggerFactory.getLogger(SwitchHandler.class);\n+    private final Logger logger = LoggerFactory.getLogger(SwitchHandler.class);\n+    private @NonNullByDefault({}) SwitchConfig config;\n \n     public SwitchHandler(Thing thing) {\n         super(thing);\n     }\n \n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(SwitchConfig.class);\n+        super.initialize();\n+    }\n+\n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n+        RS232Handler bridgeHandler = getRS232Handler();\n         if (LutronBindingConstants.CHANNEL_SWITCH.equals(channelUID.getId())) {\n             if (command instanceof OnOffType) {\n-                SetSwitchLevelCommand cmd = new SetSwitchLevelCommand(getConfigAs(SwitchConfig.class).getZoneNumber(),\n-                        (OnOffType) command);\n+                SetSwitchLevelCommand cmd = new SetSwitchLevelCommand(config.getZoneNumber(), (OnOffType) command,\n+                        config.system);\n \n-                getRS232Handler().sendCommand(cmd);\n+                if (bridgeHandler != null) {\n+                    bridgeHandler.sendCommand(cmd);\n+                }\n             }\n         }\n     }\n@@ -61,7 +73,10 @@ public void handleFeedback(RadioRAFeedback feedback) {\n     }\n \n     private void handleZoneMapFeedback(ZoneMapFeedback feedback) {\n-        char value = feedback.getZoneValue(getConfigAs(SwitchConfig.class).getZoneNumber());\n+        if (!systemsMatch(feedback.getSystem(), config.system)) {\n+            return;\n+        }\n+        char value = feedback.getZoneValue(config.getZoneNumber());\n \n         if (value == '1') {\n             updateState(LutronBindingConstants.CHANNEL_SWITCH, OnOffType.ON);\n@@ -71,7 +86,7 @@ private void handleZoneMapFeedback(ZoneMapFeedback feedback) {\n     }\n \n     private void handleLocalZoneChangeFeedback(LocalZoneChangeFeedback feedback) {\n-        if (feedback.getZoneNumber() == getConfigAs(SwitchConfig.class).getZoneNumber()) {\n+        if (systemsMatch(feedback.getSystem(), config.system) && feedback.getZoneNumber() == config.getZoneNumber()) {\n             if (LocalZoneChangeFeedback.State.CHG.equals(feedback.getState())) {\n                 logger.debug(\"Not Implemented Yet - CHG state received from Local Zone Change Feedback.\");\n             }"
  },
  {
    "sha": "8f5a31fc69461e3b26e70a1a351bd3c227317f0e",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ButtonPressCommand.java",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ButtonPressCommand.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ButtonPressCommand.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ButtonPressCommand.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -15,13 +15,17 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n /**\n  * Button Press (BP) Command.\n  * Trigger a Phantom Button Press on the RadioRA Serial Device.\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class ButtonPressCommand extends RadioRACommand {\n \n     public enum ButtonState {\n@@ -32,11 +36,13 @@\n \n     private int buttonNumber; // 1 to 15, 16 ALL ON, 17 ALL OFF\n     private ButtonState state; // ON/OFF/TOG\n-    private Integer fadeSec; // 0 to 240 (optional)\n+    private @Nullable Integer fadeSec; // 0 to 240 (optional)\n+    private int system; // 1 or 2, or 0 for none\n \n-    public ButtonPressCommand(int buttonNumber, ButtonState state) {\n+    public ButtonPressCommand(int buttonNumber, ButtonState state, int system) {\n         this.buttonNumber = buttonNumber;\n         this.state = state;\n+        this.system = system;\n     }\n \n     public void setFadeSeconds(int seconds) {\n@@ -58,6 +64,10 @@ public String getCommand() {\n             args.add(String.valueOf(fadeSec));\n         }\n \n+        if (system == 1 || system == 2) {\n+            args.add(\"S\" + String.valueOf(system));\n+        }\n+\n         return args;\n     }\n }"
  },
  {
    "sha": "7c6ca738f9e915fd7e096687e233965f5f8d8bea",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LEDMapFeedback.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LEDMapFeedback.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LEDMapFeedback.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LEDMapFeedback.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,8 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.protocol;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Feedback (LMP) that gives the state of all phantom LEDs\n  * <p>\n@@ -34,6 +36,7 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class LEDMapFeedback extends RadioRAFeedback {\n \n     private String bitmap; // 15 bit String of (0,1). 1 is ON, 0 is OFF"
  },
  {
    "sha": "5cd9391f28a14a493d07a516418cc6a547edb9ae",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LocalZoneChangeFeedback.java",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LocalZoneChangeFeedback.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LocalZoneChangeFeedback.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/LocalZoneChangeFeedback.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,10 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.protocol;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Feedback for when a device was changed locally (not through Master Control)\n  * <p>\n@@ -37,13 +41,22 @@\n  * LZC,04,ON\n  * </pre>\n  *\n+ * In a bridged system, a system parameter S1 or S2 will be appended.\n+ *\n+ * <pre>\n+ * LZC,04,ON,S2\n+ * </pre>\n+ *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class LocalZoneChangeFeedback extends RadioRAFeedback {\n+    private final Logger logger = LoggerFactory.getLogger(LocalZoneChangeFeedback.class);\n \n     private int zoneNumber; // 1 to 32\n     private State state; // ON, OFF, CHG\n+    private int system; // 1 or 2, or 0 for none\n \n     public enum State {\n         ON,\n@@ -56,6 +69,18 @@ public LocalZoneChangeFeedback(String msg) {\n \n         zoneNumber = Integer.parseInt(params[1].trim());\n         state = State.valueOf(params[2].trim().toUpperCase());\n+\n+        system = 0;\n+        if (params.length > 3) {\n+            String sysParam = params[3].trim().toUpperCase();\n+            if (\"S1\".equals(sysParam)) {\n+                system = 1;\n+            } else if (\"S2\".equals(sysParam)) {\n+                system = 2;\n+            } else {\n+                logger.debug(\"Invalid 3rd parameter {} in LZC message. Should be S1 or S2.\", sysParam);\n+            }\n+        }\n     }\n \n     public State getState() {\n@@ -65,4 +90,8 @@ public State getState() {\n     public int getZoneNumber() {\n         return zoneNumber;\n     }\n+\n+    public int getSystem() {\n+        return system;\n+    }\n }"
  },
  {
    "sha": "ba103e665dd7b2dd93b0f0e17120d530d343e26c",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRACommand.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRACommand.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRACommand.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRACommand.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -14,12 +14,15 @@\n \n import java.util.List;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Abstract base class for commands.\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public abstract class RadioRACommand {\n \n     protected static final String FIELD_SEPARATOR = \",\";"
  },
  {
    "sha": "5ee20a6d6a146116c7d2358c4e3d2771fde54c6d",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRAFeedback.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRAFeedback.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRAFeedback.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/RadioRAFeedback.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,12 +12,15 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.protocol;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Base class for Feedback from RadioRA\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class RadioRAFeedback {\n \n     public String[] parse(String msg, int numParams) {"
  },
  {
    "sha": "16f4762e8e1f60fd6b07bc492407a3694ddbb144",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetDimmerLevelCommand.java",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetDimmerLevelCommand.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetDimmerLevelCommand.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetDimmerLevelCommand.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -15,22 +15,28 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n /**\n  * Set Dimmer Level (SDL)\n  * Set an individual Dimmer’s light level.\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class SetDimmerLevelCommand extends RadioRACommand {\n \n     private int zoneNumber; // 1 to 32\n     private int dimmerLevel; // 0 to 100\n-    private Integer fadeSec; // 0 to 240 (optional)\n+    private @Nullable Integer fadeSec; // 0 to 240 (optional)\n+    private int system; // 1 or 2, or 0 for none\n \n-    public SetDimmerLevelCommand(int zoneNumber, int dimmerLevel) {\n+    public SetDimmerLevelCommand(int zoneNumber, int dimmerLevel, int system) {\n         this.zoneNumber = zoneNumber;\n         this.dimmerLevel = dimmerLevel;\n+        this.system = system;\n     }\n \n     public void setFadeSeconds(int seconds) {\n@@ -52,6 +58,10 @@ public String getCommand() {\n             args.add(String.valueOf(fadeSec));\n         }\n \n+        if (system == 1 || system == 2) {\n+            args.add(\"S\" + String.valueOf(system));\n+        }\n+\n         return args;\n     }\n }"
  },
  {
    "sha": "d762c9b680d727dd1599b013d1c1180b26c087ee",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetSwitchLevelCommand.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetSwitchLevelCommand.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetSwitchLevelCommand.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/SetSwitchLevelCommand.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -15,6 +15,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.core.library.types.OnOffType;\n \n /**\n@@ -24,15 +26,18 @@\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class SetSwitchLevelCommand extends RadioRACommand {\n \n     private int zoneNumber; // 1 to 32\n     private OnOffType state; // ON/OFF\n-    private Integer delaySec; // 0 to 240 (optional)\n+    private @Nullable Integer delaySec; // 0 to 240 (optional)\n+    private int system; // 1 or 2, or 0 for none\n \n-    public SetSwitchLevelCommand(int zoneNumber, OnOffType state) {\n+    public SetSwitchLevelCommand(int zoneNumber, OnOffType state, int system) {\n         this.zoneNumber = zoneNumber;\n         this.state = state;\n+        this.system = system;\n     }\n \n     public void setDelaySeconds(int seconds) {\n@@ -54,6 +59,10 @@ public String getCommand() {\n             args.add(String.valueOf(delaySec));\n         }\n \n+        if (system == 1 || system == 2) {\n+            args.add(\"S\" + String.valueOf(system));\n+        }\n+\n         return args;\n     }\n }"
  },
  {
    "sha": "6f046287f099c88333b80ee56f42717edb6e573d",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapFeedback.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapFeedback.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapFeedback.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapFeedback.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -12,6 +12,10 @@\n  */\n package org.openhab.binding.lutron.internal.radiora.protocol;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Feedback that gives the state of all zones\n  * <p>\n@@ -26,22 +30,39 @@\n  * <b>Example:</b>\n  * <p>\n  * Zones 2 and 9 are ON, all others are OFF, and Zones 31 and 32 are unassigned.\n+ * In a bridged system, a system parameter S1 or S2 will be appended.\n  *\n  * <pre>\n  * ZMP,010000001000000000000000000000XX\n+ * ZMP,00100000010000000000000000000000,S2\n  * </pre>\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class ZoneMapFeedback extends RadioRAFeedback {\n+    private final Logger logger = LoggerFactory.getLogger(ZoneMapFeedback.class);\n \n     private String zoneStates; // 32 bit String of (0,1,X)\n+    private int system; // 1 or 2, or 0 for none\n \n     public ZoneMapFeedback(String msg) {\n         String[] params = parse(msg, 1);\n \n         zoneStates = params[1];\n+\n+        system = 0;\n+        if (params.length > 2) {\n+            String sysParam = params[2].trim().toUpperCase();\n+            if (\"S1\".equals(sysParam)) {\n+                system = 1;\n+            } else if (\"S2\".equals(sysParam)) {\n+                system = 2;\n+            } else {\n+                logger.debug(\"Invalid 2nd parameter {} in ZMP message. Should be S1 or S2.\", sysParam);\n+            }\n+        }\n     }\n \n     public String getZoneStates() {\n@@ -55,4 +76,8 @@ public char getZoneValue(int zone) {\n \n         return zoneStates.charAt(zone - 1);\n     }\n+\n+    public int getSystem() {\n+        return system;\n+    }\n }"
  },
  {
    "sha": "11e6cba15b1ba56bd2a88beceb0faa352ed7e7b6",
    "filename": "bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapInquiryCommand.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapInquiryCommand.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapInquiryCommand.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/java/org/openhab/binding/lutron/internal/radiora/protocol/ZoneMapInquiryCommand.java?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -15,12 +15,15 @@\n import java.util.Collections;\n import java.util.List;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n /**\n  * Requests an updated ZoneMap.\n  *\n  * @author Jeff Lauterbach - Initial Contribution\n  *\n  */\n+@NonNullByDefault\n public class ZoneMapInquiryCommand extends RadioRACommand {\n \n     @Override"
  },
  {
    "sha": "b3b40832e227cf810c83754019f81be433eb8982",
    "filename": "bundles/org.openhab.binding.lutron/src/main/resources/OH-INF/thing/thing-types.xml",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/resources/OH-INF/thing/thing-types.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/b4c3a40af7ebff2c5d706e938a04fd82782def0f/bundles/org.openhab.binding.lutron/src/main/resources/OH-INF/thing/thing-types.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.lutron/src/main/resources/OH-INF/thing/thing-types.xml?ref=b4c3a40af7ebff2c5d706e938a04fd82782def0f",
    "patch": "@@ -1203,6 +1203,11 @@\n \t\t\t\t<label>Zone Number</label>\n \t\t\t\t<description>Assigned Zone Number within the Lutron RadioRA system.</description>\n \t\t\t</parameter>\n+\t\t\t<parameter name=\"system\" type=\"integer\" min=\"0\" max=\"2\" required=\"false\">\n+\t\t\t\t<label>System Number</label>\n+\t\t\t\t<description>System number (bridged systems only). Set to 1 or 2. 0 = NA (default).</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n \t\t\t<parameter name=\"fadeOutSec\" type=\"integer\" required=\"false\">\n \t\t\t\t<label>Fade Out (sec)</label>\n \t\t\t\t<description>Time in seconds dimmer should take when lowering the level</description>\n@@ -1231,6 +1236,11 @@\n \t\t\t\t<label>Zone Number</label>\n \t\t\t\t<description>Assigned Zone Number within the Lutron RadioRA system.</description>\n \t\t\t</parameter>\n+\t\t\t<parameter name=\"system\" type=\"integer\" min=\"0\" max=\"2\" required=\"false\">\n+\t\t\t\t<label>System Number</label>\n+\t\t\t\t<description>System number (bridged systems only). Set to 1 or 2. 0 = NA (default).</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n \t\t</config-description>\n \t</thing-type>\n \n@@ -1250,6 +1260,11 @@\n \t\t\t\t<label>Phantom Button Number</label>\n \t\t\t\t<description>Phantom Button Number within the Lutron RadioRA system.</description>\n \t\t\t</parameter>\n+\t\t\t<parameter name=\"system\" type=\"integer\" min=\"0\" max=\"2\" required=\"false\">\n+\t\t\t\t<label>System Number</label>\n+\t\t\t\t<description>System number (bridged systems only). Set to 1 or 2. 0 = NA (default).</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t</parameter>\n \t\t</config-description>\n \t</thing-type>\n "
  }
]
