[
  {
    "sha": "0d4e51007be24bcf0ee4aedfac5c3c0ddb24936e",
    "filename": "CODEOWNERS",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/CODEOWNERS",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/CODEOWNERS",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/CODEOWNERS?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -65,6 +65,7 @@\n /bundles/org.openhab.binding.dwdpollenflug/ @DerOetzi\n /bundles/org.openhab.binding.dwdunwetter/ @limdul79\n /bundles/org.openhab.binding.ecobee/ @mhilbush\n+/bundles/org.openhab.binding.electroluxair/ @jannegpriv\n /bundles/org.openhab.binding.elerotransmitterstick/ @vbier\n /bundles/org.openhab.binding.energenie/ @hmerk\n /bundles/org.openhab.binding.enigma2/ @gdolfen"
  },
  {
    "sha": "f641465970e237ffa522aa372dba13e5d1e93da9",
    "filename": "bom/openhab-addons/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bom/openhab-addons/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bom/openhab-addons/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bom/openhab-addons/pom.xml?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -311,6 +311,11 @@\n       <artifactId>org.openhab.binding.ecobee</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.electroluxair</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.openhab.addons.bundles</groupId>\n       <artifactId>org.openhab.binding.elerotransmitterstick</artifactId>"
  },
  {
    "sha": "38d625e349232ff5ffcc71bd75e4692cdac12768",
    "filename": "bundles/org.openhab.binding.electroluxair/NOTICE",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/NOTICE",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/NOTICE",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/NOTICE?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,13 @@\n+This content is produced and maintained by the openHAB project.\n+\n+* Project home: https://www.openhab.org\n+\n+== Declared Project Licenses\n+\n+This program and the accompanying materials are made available under the terms\n+of the Eclipse Public License 2.0 which is available at\n+https://www.eclipse.org/legal/epl-2.0/.\n+\n+== Source Code\n+\n+https://github.com/openhab/openhab-addons"
  },
  {
    "sha": "087fb3d901148ee527a2ecefae1d82833a24c874",
    "filename": "bundles/org.openhab.binding.electroluxair/README.md",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/README.md",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/README.md",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/README.md?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,105 @@\n+# ElectroluxAir Binding\n+\n+This is an openHAB binding for the Pure A9 Air Purifier, by Electrolux.\n+\n+This binding uses the Electrolux Delta REST API.\n+\n+<p align=\"center\">\n+<img src=\"doc/electrolux_pure_a9.webp\" alt=\"Electrolux Pure A9\" width=\"200px\"/>\n+</p>\n+\n+## Supported Things\n+\n+This binding supports the following thing types:\n+\n+- Bridge\n+- Electrolux Pure A9\n+\n+## Discovery\n+\n+After the configuration of the Bridge, your Electrolux Pure A9 device will be automatically discovered and placed as a thing in the inbox.\n+\n+\n+## Binding Configuration\n+\n+You will have to configure the bridge with username and password, these must be the same credentials as used when logging into your Electrolux Wellbeing app. \n+\n+\n+### Configuration Options\n+\n+#### Bridge\n+\n+*   `username` - The username used to connect to the Electrolux Wellbeing app\n+\n+*   `password` - The password used to connect to the Electrolux Wellbeing app\n+\n+*   `refresh` - Specifies the refresh interval in second\n+\n+If you define the bridge in a things-file the bridge type id is defined as `bridge`, e.g.:\n+\n+`Bridge electroluxair:bridge:myElectroluxAirBridge`\n+\n+\n+## Thing Configuration\n+\n+Only the bridge require manual configuration. The thing can be added by hand, or you can let the discovery mechanism automatically find your Electrolux Pure A9 thing.\n+\n+### Configuration Options\n+\n+#### Electrolux Pure A9\n+\n+*   `deviceId` - Product ID of your Electrolux Pure A9 found in Electrolux Wellbeing app\n+\n+\n+## Enable Debugging\n+\n+To enable DEBUG or TRACE logging for the binding, login to Karaf console and for DEBUG level enter:\n+\n+`openhab> log:set DEBUG org.openhab.binding.electroluxair`\n+\n+## Channels\n+\n+### Bridge\n+\n+The following channels are supported:\n+\n+| Channel Type ID | Item Type | Description                                                                                     |\n+|-----------------|-----------|-------------------------------------------------------------------------------------------------|\n+| status          | String    | This channel can be used to trigger an instant refresh by sending a RefreshType.REFRESH command.|\n+\n+### Electrolux Pure A9\n+\n+The following channels are supported:\n+\n+| Channel Type ID             | Item Type             | Description                                                                 | \n+|-----------------------------|-----------------------|-----------------------------------------------------------------------------|\n+| temperature                 | Number:Temperature    | This channel reports the current temperature.                               |\n+| humidity                    | Number:Dimensionless  | This channel reports the current humidity in percentage.                    |\n+| tvoc                        | Number:Dimensionless  | This channel reports the total Volatile Organic Compounds in microgram/m3.  |\n+| pm1                         | Number:Density        | This channel reports the Particulate Matter 1 in ppb.                       |\n+| pm2_5                       | Number:Density        | This channel reports the Particulate Matter 2.5 in ppb.                     |\n+| pm10                        | Number:Density        | This channel reports the Particulate Matter 10 in ppb.                      |\n+| co2                         | Number:Dimensionless  | This channel reports the CO2 level in ppm.                                  |\n+| fanSpeed                    | String                | This channel sets and reports the current fan speed (1-9).                  |\n+| filterLife                  | Number:Dimensionless  | This channel reports the remaining filter life in %.                        |\n+| ionizer                     | Switch                | This channel sets and reports the status of the ionizer function (On/Off).  |\n+| doorOpen                    | Contact               | This channel reports the status of door (Opened/Closed).                    |\n+| workMode                    | Contact               | This channel sets and reports the current work mode (Auto, Manual, PowerOff.|\n+\n+\n+\n+\n+## Full Example\n+\n+### Things-file\n+\n+````\n+// Bridge configuration\n+Bridge electroluxair:api:myAPI \"Electrolux Delta API\" [username=\"user@password.com\", password=\"12345\", refresh=\"300\"] {\n+\n+     Thing electroluxpurea9 MyElectroluxPureA9  \"Electrolux Pure A9\"    [ deviceId=\"123456789\" ]\n+     \n+}\n+````\n+\n+"
  },
  {
    "sha": "430ca014c2256ae7a3837a74802030400f9ebed5",
    "filename": "bundles/org.openhab.binding.electroluxair/doc/electrolux_pure_a9.webp",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/doc/electrolux_pure_a9.webp",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/doc/electrolux_pure_a9.webp",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/doc/electrolux_pure_a9.webp?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0"
  },
  {
    "sha": "e2c8f0e50eb2265717402403087cd77ae24f1130",
    "filename": "bundles/org.openhab.binding.electroluxair/pom.xml",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/pom.xml?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.electroluxair</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: ElectroluxAir Binding</name>\n+\n+</project>"
  },
  {
    "sha": "3ac1bc7c9f1438defac139403cc4af3f73914739",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/feature/feature.xml",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/feature/feature.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/feature/feature.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/feature/feature.xml?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.electroluxair-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-electroluxair\" description=\"ElectroluxAir Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.electroluxair/${project.version}</bundle>\n+\t</feature>\n+</features>"
  },
  {
    "sha": "212c31f0c1a15b1b0f11a8e656886652d19fb86b",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBindingConstants.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBindingConstants.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBindingConstants.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBindingConstants.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link ElectroluxAirBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ElectroluxAirBindingConstants {\n+\n+    public static final String BINDING_ID = \"electroluxair\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_ELECTROLUX_PURE_A9 = new ThingTypeUID(BINDING_ID, \"electroluxpurea9\");\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"api\");\n+\n+    // List of all Channel ids\n+    public static final String CHANNEL_STATUS = \"status\";\n+    public static final String CHANNEL_TEMPERATURE = \"temperature\";\n+    public static final String CHANNEL_HUMIDITY = \"humidity\";\n+    public static final String CHANNEL_TVOC = \"tvoc\";\n+    public static final String CHANNEL_PM1 = \"pm1\";\n+    public static final String CHANNEL_PM25 = \"pm2_5\";\n+    public static final String CHANNEL_PM10 = \"pm10\";\n+    public static final String CHANNEL_CO2 = \"co2\";\n+    public static final String CHANNEL_FILTER_LIFE = \"filterLife\";\n+    public static final String CHANNEL_DOOR_OPEN = \"doorOpen\";\n+    public static final String CHANNEL_FAN_SPEED = \"fanSpeed\";\n+    public static final String CHANNEL_WORK_MODE = \"workMode\";\n+    public static final String CHANNEL_IONIZER = \"ionizer\";\n+\n+    // List of all Properties ids\n+    public static final String PROPERTY_BRAND = \"brand\";\n+    public static final String PROPERTY_COLOUR = \"colour\";\n+    public static final String PROPERTY_MODEL = \"model\";\n+    public static final String PROPERTY_DEVICE = \"device\";\n+    public static final String PROPERTY_FW_VERSION = \"fwVersion\";\n+    public static final String PROPERTY_SERIAL_NUMBER = \"serialNumber\";\n+    public static final String PROPERTY_WORKMODE = \"workmode\";\n+\n+    // List of all Commands\n+    public static final String COMMAND_WORKMODE_POWEROFF = \"PowerOff\";\n+    public static final String COMMAND_WORKMODE_AUTO = \"Auto\";\n+    public static final String COMMAND_WORKMODE_MANUAL = \"Manual\";\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Stream\n+            .of(THING_TYPE_BRIDGE, THING_TYPE_ELECTROLUX_PURE_A9).collect(Collectors.toSet());\n+}"
  },
  {
    "sha": "116876d39ade98664782c5563bd92edb0084623d",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBridgeConfiguration.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBridgeConfiguration.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBridgeConfiguration.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirBridgeConfiguration.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link ElectroluxAirBridgeConfiguration} class contains fields mapping bridge configuration parameters.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+public class ElectroluxAirBridgeConfiguration {\n+    public @Nullable String username;\n+    public @Nullable String password;\n+    public int refresh;\n+}"
  },
  {
    "sha": "7d9e361c8ba1a99db1041d1ac91af92940e092ef",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirConfiguration.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirConfiguration.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirConfiguration.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirConfiguration.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal;\n+\n+/**\n+ * The {@link ElectroluxAirConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+public class ElectroluxAirConfiguration {\n+    public static final String DEVICE_ID_LABEL = \"deviceId\";\n+\n+    private String deviceId = \"\";\n+\n+    public String getDeviceId() {\n+        return deviceId;\n+    }\n+}"
  },
  {
    "sha": "5a77944ccd40226dd593b84a70439f75bc54882a",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirException.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirException.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirException.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/ElectroluxAirException.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * {@link ElectroluxAirException} is used when there is exception communicating with Electrolux Delta API.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ElectroluxAirException extends Exception {\n+\n+    public ElectroluxAirException(Exception source) {\n+        super(source);\n+    }\n+\n+    public ElectroluxAirException(String message) {\n+        super(message);\n+    }\n+\n+    @Override\n+    public @NonNull String getMessage() {\n+        Throwable throwable = getCause();\n+        if (throwable != null) {\n+            String localMessage = throwable.getMessage();\n+            if (localMessage != null) {\n+                return localMessage;\n+            }\n+        }\n+        return \"\";\n+    }\n+}"
  },
  {
    "sha": "ba80e68dca79eb55fc6c1415bc8f62a022b2ee3a",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/api/ElectroluxDeltaAPI.java",
    "status": "added",
    "additions": 337,
    "deletions": 0,
    "changes": 337,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/api/ElectroluxDeltaAPI.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/api/ElectroluxDeltaAPI.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/api/ElectroluxDeltaAPI.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,337 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal.api;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.electroluxair.internal.ElectroluxAirBridgeConfiguration;\n+import org.openhab.binding.electroluxair.internal.ElectroluxAirException;\n+import org.openhab.binding.electroluxair.internal.dto.ElectroluxPureA9DTO;\n+import org.openhab.binding.electroluxair.internal.dto.ElectroluxPureA9DTO.AppliancesInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link ElectroluxDeltaAPI} class defines the Elextrolux Delta API\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ElectroluxDeltaAPI {\n+    private static final String CLIENT_URL = \"https://electrolux-wellbeing-client.vercel.app/api/mu52m5PR9X\";\n+    private static final String SERVICE_URL = \"https://api.delta.electrolux.com/api/\";\n+    private static final String JSON_CONTENT_TYPE = \"application/json\";\n+    private static final int MAX_RETRIES = 3;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ElectroluxDeltaAPI.class);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private final ElectroluxAirBridgeConfiguration configuration;\n+    private String authToken = \"\";\n+\n+    public ElectroluxDeltaAPI(ElectroluxAirBridgeConfiguration configuration, Gson gson, HttpClient httpClient)\n+            throws IOException {\n+        this.gson = gson;\n+        this.configuration = configuration;\n+        this.httpClient = httpClient;\n+\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new IOException(\"Unable to start Jetty HttpClient\", e);\n+        }\n+    }\n+\n+    public boolean refresh(Map<String, ElectroluxPureA9DTO> electroluxAirThings) {\n+        try {\n+            // Login\n+            login();\n+            // Get all appliances\n+            String json = getAppliances();\n+            JsonArray jsonArray = new JsonParser().parse(json).getAsJsonArray();\n+\n+            for (JsonElement jsonElement : jsonArray) {\n+                String pncId = jsonElement.getAsJsonObject().get(\"pncId\").getAsString();\n+\n+                // Get appliance info\n+                String jsonApplianceInfo = getAppliancesInfo(pncId);\n+                AppliancesInfo appliancesInfo = gson.fromJson(jsonApplianceInfo, AppliancesInfo.class);\n+\n+                // Get applicance data\n+                ElectroluxPureA9DTO dto = getAppliancesData(pncId, ElectroluxPureA9DTO.class);\n+                if (appliancesInfo != null) {\n+                    dto.setApplicancesInfo(appliancesInfo);\n+                }\n+                electroluxAirThings.put(dto.getTwin().getProperties().getReported().deviceId, dto);\n+            }\n+            return true;\n+        } catch (ElectroluxAirException e) {\n+            logger.warn(\"Failed to refresh! {}\", e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    public boolean workModePowerOff(String pncId) {\n+        String commandJSON = \"{ \\\"WorkMode\\\": \\\"PowerOff\\\" }\";\n+        try {\n+            return sendCommand(commandJSON, pncId);\n+        } catch (ElectroluxAirException e) {\n+            logger.warn(\"Work mode powerOff failed {}\", e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    public boolean workModeAuto(String pncId) {\n+        String commandJSON = \"{ \\\"WorkMode\\\": \\\"Auto\\\" }\";\n+        try {\n+            return sendCommand(commandJSON, pncId);\n+        } catch (ElectroluxAirException e) {\n+            logger.warn(\"Work mode auto failed {}\", e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    public boolean workModeManual(String pncId) {\n+        String commandJSON = \"{ \\\"WorkMode\\\": \\\"Manual\\\" }\";\n+        try {\n+            return sendCommand(commandJSON, pncId);\n+        } catch (ElectroluxAirException e) {\n+            logger.warn(\"Work mode manual failed {}\", e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    public boolean setFanSpeedLevel(String pncId, int fanSpeedLevel) {\n+        if (fanSpeedLevel < 1 && fanSpeedLevel > 10) {\n+            return false;\n+        } else {\n+            String commandJSON = \"{ \\\"Fanspeed\\\": \" + fanSpeedLevel + \"}\";\n+            try {\n+                return sendCommand(commandJSON, pncId);\n+            } catch (ElectroluxAirException e) {\n+                logger.warn(\"Work mode manual failed {}\", e.getMessage());\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean setIonizer(String pncId, String ionizerStatus) {\n+        String commandJSON = \"{ \\\"Ionizer\\\": \" + ionizerStatus + \"}\";\n+        try {\n+            return sendCommand(commandJSON, pncId);\n+        } catch (ElectroluxAirException e) {\n+            logger.warn(\"Work mode manual failed {}\", e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    public void dispose() throws Exception {\n+        httpClient.stop();\n+    }\n+\n+    private void login() throws ElectroluxAirException {\n+        String LOGIN = \"Users/Login\";\n+\n+        // Fetch ClientToken\n+        Request request = httpClient.newRequest(CLIENT_URL).method(HttpMethod.GET);\n+\n+        request.header(HttpHeader.ACCEPT, JSON_CONTENT_TYPE);\n+        request.header(HttpHeader.CONTENT_TYPE, JSON_CONTENT_TYPE);\n+\n+        logger.debug(\"HTTP GET Request {}.\", request.toString());\n+        try {\n+            ContentResponse httpResponse = request.send();\n+            if (httpResponse.getStatus() != HttpStatus.OK_200) {\n+                throw new ElectroluxAirException(\"Failed to login \" + httpResponse.getContentAsString());\n+            }\n+            String json = httpResponse.getContentAsString();\n+            JsonObject jsonObject = new JsonParser().parse(json).getAsJsonObject();\n+            String clientToken = jsonObject.get(\"accessToken\").getAsString();\n+\n+            // Login using ClientToken\n+            json = \"{ \\\"Username\\\": \\\"\" + configuration.username + \"\\\",  \\\"Password\\\": \\\"\" + configuration.password\n+                    + \"\\\" }\";\n+            request = httpClient.newRequest(SERVICE_URL + LOGIN).method(HttpMethod.POST);\n+            request.header(HttpHeader.ACCEPT, JSON_CONTENT_TYPE);\n+            request.header(HttpHeader.CONTENT_TYPE, JSON_CONTENT_TYPE);\n+            request.header(HttpHeader.AUTHORIZATION, \"Bearer \" + clientToken);\n+            request.content(new StringContentProvider(json), JSON_CONTENT_TYPE);\n+\n+            logger.debug(\"HTTP POST Request {}.\", request.toString());\n+\n+            httpResponse = request.send();\n+            if (httpResponse.getStatus() != HttpStatus.OK_200) {\n+                throw new ElectroluxAirException(\"Failed to login \" + httpResponse.getContentAsString());\n+            }\n+            // Fetch AccessToken\n+            json = httpResponse.getContentAsString();\n+            jsonObject = new JsonParser().parse(json).getAsJsonObject();\n+            this.authToken = jsonObject.get(\"accessToken\").getAsString();\n+\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new ElectroluxAirException(e);\n+        }\n+    }\n+\n+    private String getFromApi(String uri) throws ElectroluxAirException, InterruptedException {\n+        try {\n+            for (int i = 0; i < MAX_RETRIES; i++) {\n+                try {\n+                    Request request = httpClient.newRequest(SERVICE_URL + uri).method(HttpMethod.GET);\n+                    request.header(HttpHeader.AUTHORIZATION, \"Bearer \" + authToken);\n+                    request.header(HttpHeader.ACCEPT, JSON_CONTENT_TYPE);\n+                    request.header(HttpHeader.CONTENT_TYPE, JSON_CONTENT_TYPE);\n+\n+                    ContentResponse response = request.send();\n+                    String content = response.getContentAsString();\n+                    logger.trace(\"API response: {}\", content);\n+\n+                    if (response.getStatus() != HttpStatus.OK_200) {\n+                        logger.debug(\"getFromApi failed, HTTP status: {}\", response.getStatus());\n+                        login();\n+                    } else {\n+                        return content;\n+                    }\n+\n+                } catch (TimeoutException e) {\n+                    logger.warn(\"TimeoutException error in get\");\n+                }\n+            }\n+        } catch (JsonSyntaxException | ElectroluxAirException | ExecutionException e) {\n+            throw new ElectroluxAirException(e);\n+        }\n+        return \"\";\n+    }\n+\n+    private String getAppliances() throws ElectroluxAirException {\n+        String uri = \"Domains/Appliances\";\n+        try {\n+            return getFromApi(uri);\n+        } catch (ElectroluxAirException | InterruptedException e) {\n+            throw new ElectroluxAirException(e);\n+        }\n+    }\n+\n+    private String getAppliancesInfo(String pncId) throws ElectroluxAirException {\n+        String uri = \"AppliancesInfo/\" + pncId;\n+        try {\n+            return getFromApi(uri);\n+        } catch (ElectroluxAirException | InterruptedException e) {\n+            throw new ElectroluxAirException(e);\n+        }\n+    }\n+\n+    private <T> T getAppliancesData(String pncId, Class<T> dto) throws ElectroluxAirException {\n+        String uri = \"Appliances/\" + pncId;\n+        String json;\n+\n+        try {\n+            json = getFromApi(uri);\n+        } catch (ElectroluxAirException | InterruptedException e) {\n+            throw new ElectroluxAirException(e);\n+        }\n+\n+        return gson.fromJson(json, dto);\n+    }\n+\n+    private boolean sendCommand(String commandJSON, String pncId) throws ElectroluxAirException {\n+        String uri = \"Appliances/\" + pncId + \"/Commands\";\n+        try {\n+            for (int i = 0; i < MAX_RETRIES; i++) {\n+                try {\n+                    Request request = httpClient.newRequest(SERVICE_URL + uri).method(HttpMethod.PUT);\n+                    request.header(HttpHeader.AUTHORIZATION, \"Bearer \" + authToken);\n+                    request.header(HttpHeader.ACCEPT, JSON_CONTENT_TYPE);\n+                    request.header(HttpHeader.CONTENT_TYPE, JSON_CONTENT_TYPE);\n+                    request.content(new StringContentProvider(commandJSON), JSON_CONTENT_TYPE);\n+\n+                    ContentResponse response = request.send();\n+                    String content = response.getContentAsString();\n+                    logger.trace(\"API response: {}\", content);\n+\n+                    if (response.getStatus() != HttpStatus.OK_200) {\n+                        logger.debug(\"sendCommand failed, HTTP status: {}\", response.getStatus());\n+                        login();\n+                    } else {\n+                        CommandResponseDTO commandResponse = gson.fromJson(content, CommandResponseDTO.class);\n+                        if (commandResponse != null) {\n+                            if (commandResponse.code == 200000) {\n+                                return true;\n+                            } else {\n+                                logger.warn(\"Failed to send command, error code: {}, description: {}\",\n+                                        commandResponse.code, commandResponse.codeDescription);\n+                                return false;\n+                            }\n+                        } else {\n+                            logger.warn(\"Failed to send command, commandResponse is null!\");\n+                            return false;\n+                        }\n+                    }\n+\n+                } catch (TimeoutException | InterruptedException e) {\n+                    logger.warn(\"TimeoutException error in get\");\n+                }\n+            }\n+        } catch (JsonSyntaxException | ElectroluxAirException | ExecutionException e) {\n+            throw new ElectroluxAirException(e);\n+        }\n+\n+        return false;\n+    }\n+\n+    private static class CommandResponseDTO {\n+        @SuppressWarnings(\"unused\")\n+        public int code;\n+        @SuppressWarnings(\"unused\")\n+        public String codeDescription = \"\";\n+        @SuppressWarnings(\"unused\")\n+        public String information = \"\";\n+        @SuppressWarnings(\"unused\")\n+        public String message = \"\";\n+        @SuppressWarnings(\"unused\")\n+        public PayloadDTO payload = new PayloadDTO();\n+        @SuppressWarnings(\"unused\")\n+        public int status;\n+    }\n+\n+    private static class PayloadDTO {\n+        @SerializedName(\"Ok\")\n+        public boolean ok;\n+        @SerializedName(\"Response\")\n+        public ResponseDTO response = new ResponseDTO();\n+    }\n+\n+    private static class ResponseDTO {\n+        @SerializedName(\"Workmode\")\n+        public String workmode = \"\";\n+    }\n+}"
  },
  {
    "sha": "66ca14b87f586d67e15895023829a3c56b4ef629",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/discovery/ElectroluxAirDiscoveryService.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/discovery/ElectroluxAirDiscoveryService.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/discovery/ElectroluxAirDiscoveryService.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/discovery/ElectroluxAirDiscoveryService.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal.discovery;\n+\n+import static org.openhab.binding.electroluxair.internal.ElectroluxAirBindingConstants.*;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.electroluxair.internal.ElectroluxAirConfiguration;\n+import org.openhab.binding.electroluxair.internal.handler.ElectroluxAirBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ElectroluxAirDiscoveryService} searches for available\n+ * Electrolux Pure A9 discoverable through Electrolux Delta API.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ElectroluxAirDiscoveryService extends AbstractDiscoveryService\n+        implements ThingHandlerService, DiscoveryService {\n+    private static final int SEARCH_TIME = 2;\n+    private final Logger logger = LoggerFactory.getLogger(ElectroluxAirDiscoveryService.class);\n+    private @Nullable ElectroluxAirBridgeHandler handler;\n+\n+    public ElectroluxAirDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof ElectroluxAirBridgeHandler) {\n+            this.handler = (ElectroluxAirBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @Override\n+    public void activate(@Nullable Map<String, Object> configProperties) {\n+        super.activate(configProperties);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        ElectroluxAirBridgeHandler bridgeHandler = this.handler;\n+        if (bridgeHandler != null) {\n+            ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+            bridgeHandler.getElectroluxAirThings().entrySet().stream().forEach(thing -> {\n+                logger.debug(\"Discovered thing: {}\", thing);\n+                thingDiscovered(DiscoveryResultBuilder\n+                        .create(new ThingUID(THING_TYPE_ELECTROLUX_PURE_A9, bridgeUID, thing.getKey()))\n+                        .withLabel(\"Electrolux Pure A9\").withBridge(bridgeUID)\n+                        .withProperty(ElectroluxAirConfiguration.DEVICE_ID_LABEL, thing.getKey())\n+                        .withRepresentationProperty(ElectroluxAirConfiguration.DEVICE_ID_LABEL).build());\n+            });\n+        }\n+        stopScan();\n+    }\n+}"
  },
  {
    "sha": "0a05273d3f290ed08a6e5bc017bbe2b9d90add2e",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/dto/ElectroluxPureA9DTO.java",
    "status": "added",
    "additions": 541,
    "deletions": 0,
    "changes": 541,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/dto/ElectroluxPureA9DTO.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/dto/ElectroluxPureA9DTO.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/dto/ElectroluxPureA9DTO.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,541 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal.dto;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link ElectroluxPureA9DTO} class defines the DTO for the Electrolux Pure A9.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ElectroluxPureA9DTO {\n+    public String pncId = \"\";\n+    public ApplianceData applianceData = new ApplianceData();\n+    public AppliancesInfo applicancesInfo = new AppliancesInfo();\n+\n+    public Twin twin = new Twin();\n+    public String telemetry = \"\";\n+\n+    public String getPncId() {\n+        return pncId;\n+    }\n+\n+    public ApplianceData getApplianceData() {\n+        return applianceData;\n+    }\n+\n+    public AppliancesInfo getApplicancesInfo() {\n+        return applicancesInfo;\n+    }\n+\n+    public void setApplicancesInfo(AppliancesInfo applicancesInfo) {\n+        this.applicancesInfo = applicancesInfo;\n+    }\n+\n+    public Twin getTwin() {\n+        return twin;\n+    }\n+\n+    public String getTelemetry() {\n+        return telemetry;\n+    }\n+\n+    public class $metadata {\n+\n+        public String $lastUpdated = \"\";\n+        public int $lastUpdatedVersion;\n+        @SerializedName(\"TimeZoneStandardName\")\n+        public TimeZoneStandardName timeZoneStandardName = new TimeZoneStandardName();\n+        @SerializedName(\"FrmVer_NIU\")\n+        public FrmVerNIU frmVerNIU = new FrmVerNIU();\n+    }\n+\n+    public class $metadata_ {\n+\n+        public String $lastUpdated = \"\";\n+        @SerializedName(\"FrmVer_NIU\")\n+        public FrmVerNIU_ frmVerNIU = new FrmVerNIU_();\n+        @SerializedName(\"Workmode\")\n+        public Workmode workmode = new Workmode();\n+        @SerializedName(\"FilterRFID\")\n+        public FilterRFID filterRFID = new FilterRFID();\n+        @SerializedName(\"FilterLife\")\n+        public FilterLife filterLife = new FilterLife();\n+        @SerializedName(\"Fanspeed\")\n+        public Fanspeed fanspeed = new Fanspeed();\n+        @SerializedName(\"UILight\")\n+        public UILight uILight = new UILight();\n+        @SerializedName(\"SafetyLock\")\n+        public SafetyLock safetyLock = new SafetyLock();\n+        @SerializedName(\"Ionizer\")\n+        public Ionizer ionizer = new Ionizer();\n+        @SerializedName(\"Sleep\")\n+        public Sleep sleep = new Sleep();\n+        @SerializedName(\"Scheduler\")\n+        public Scheduler scheduler = new Scheduler();\n+        @SerializedName(\"FilterType\")\n+        public FilterType filterType = new FilterType();\n+        @SerializedName(\"DspIcoPM2_5\")\n+        public DspIcoPM25 dspIcoPM25 = new DspIcoPM25();\n+        @SerializedName(\"DspIcoPM1\")\n+        public DspIcoPM1 dspIcoPM1 = new DspIcoPM1();\n+        @SerializedName(\"DspIcoPM10\")\n+        public DspIcoPM10 dspIcoPM10 = new DspIcoPM10();\n+        @SerializedName(\"DspIcoTVOC\")\n+        public DspIcoTVOC dspIcoTVOC = new DspIcoTVOC();\n+        @SerializedName(\"ErrPM2_5\")\n+        public ErrPM25 errPM25 = new ErrPM25();\n+        @SerializedName(\"ErrTVOC\")\n+        public ErrTVOC errTVOC = new ErrTVOC();\n+        @SerializedName(\"ErrTempHumidity\")\n+        public ErrTempHumidity errTempHumidity = new ErrTempHumidity();\n+        @SerializedName(\"ErrFanMtr\")\n+        public ErrFanMtr errFanMtr = new ErrFanMtr();\n+        @SerializedName(\"ErrCommSensorDisplayBrd\")\n+        public ErrCommSensorDisplayBrd errCommSensorDisplayBrd = new ErrCommSensorDisplayBrd();\n+        @SerializedName(\"DoorOpen\")\n+        public DoorOpen doorOpen = new DoorOpen();\n+        @SerializedName(\"ErrRFID\")\n+        public ErrRFID errRFID = new ErrRFID();\n+        @SerializedName(\"SignalStrength\")\n+        public SignalStrength signalStrength = new SignalStrength();\n+        @SerializedName(\"PM1\")\n+        public PM1 pM1 = new PM1();\n+        @SerializedName(\"PM2_5\")\n+        public PM25 pM25 = new PM25();\n+        @SerializedName(\"PM10\")\n+        public PM10 pM10 = new PM10();\n+        @SerializedName(\"TVOC\")\n+        public TVOC tVOC = new TVOC();\n+        @SerializedName(\"CO2\")\n+        public CO2 cO2 = new CO2();\n+        @SerializedName(\"Temp\")\n+        public Temp temp = new Temp();\n+        @SerializedName(\"Humidity\")\n+        public Humidity humidity = new Humidity();\n+        @SerializedName(\"EnvLightLvl\")\n+        public EnvLightLvl envLightLvl = new EnvLightLvl();\n+        @SerializedName(\"RSSI\")\n+        public RSSI rSSI = new RSSI();\n+    }\n+\n+    public class ApplianceData {\n+\n+        public String applianceName = \"\";\n+        public String created = \"\";\n+        public String modelName = \"\";\n+        public String pncId = \"\";\n+    }\n+\n+    public class AppliancesInfo {\n+        public String brand = \"\";\n+        public String colour = \"\";\n+        public String device = \"\";\n+        public String model = \"\";\n+        public String serialNumber = \"\";\n+    }\n+\n+    public class CO2 {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Desired {\n+\n+        @SerializedName(\"TimeZoneStandardName\")\n+        public String timeZoneStandardName = \"\";\n+        @SerializedName(\"FrmVer_NIU\")\n+        public String frmVerNIU = \"\";\n+        public $metadata $metadata = new $metadata();\n+        public int $version;\n+    }\n+\n+    public class DoorOpen {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class DspIcoPM1 {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class DspIcoPM10 {\n+\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class DspIcoPM25 {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class DspIcoTVOC {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class EnvLightLvl {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class ErrCommSensorDisplayBrd {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class ErrFanMtr {\n+\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class ErrPM25 {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class ErrRFID {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class ErrTVOC {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class ErrTempHumidity {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Fanspeed {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class FilterLife {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class FilterRFID {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class FilterType {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class FrmVerNIU {\n+        public String $lastUpdated = \"\";\n+        public int $lastUpdatedVersion;\n+    }\n+\n+    public class FrmVerNIU_ {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Humidity {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Ionizer {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class PM1 {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class PM10 {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class PM25 {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Properties {\n+        public Desired desired = new Desired();\n+        public Reported reported = new Reported();\n+\n+        public Reported getReported() {\n+            return reported;\n+        }\n+    }\n+\n+    public class RSSI {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Reported {\n+\n+        @SerializedName(\"FrmVer_NIU\")\n+        public String frmVerNIU = \"\";\n+        @SerializedName(\"Workmode\")\n+        public String workmode = \"\";\n+        @SerializedName(\"FilterRFID\")\n+        public String filterRFID = \"\";\n+        @SerializedName(\"FilterLife\")\n+        public int filterLife;\n+        @SerializedName(\"Fanspeed\")\n+        public int fanspeed;\n+        @SerializedName(\"UILight\")\n+        public boolean uILight;\n+        @SerializedName(\"SafetyLock\")\n+        public boolean safetyLock;\n+        @SerializedName(\"Ionizer\")\n+        public boolean ionizer;\n+        @SerializedName(\"Sleep\")\n+        public boolean sleep;\n+        @SerializedName(\"Scheduler\")\n+        public boolean scheduler;\n+        @SerializedName(\"FilterType\")\n+        public int filterType;\n+        @SerializedName(\"DspIcoPM2_5\")\n+        public boolean dspIcoPM25;\n+        @SerializedName(\"DspIcoPM1\")\n+        public boolean dspIcoPM1;\n+        @SerializedName(\"DspIcoPM10\")\n+        public boolean dspIcoPM10;\n+        @SerializedName(\"DspIcoTVOC\")\n+        public boolean dspIcoTVOC;\n+        @SerializedName(\"ErrPM2_5\")\n+        public boolean errPM25;\n+        @SerializedName(\"ErrTVOC\")\n+        public boolean errTVOC;\n+        @SerializedName(\"ErrTempHumidity\")\n+        public boolean errTempHumidity;\n+        @SerializedName(\"ErrFanMtr\")\n+        public boolean errFanMtr;\n+        @SerializedName(\"ErrCommSensorDisplayBrd\")\n+        public boolean errCommSensorDisplayBrd;\n+        @SerializedName(\"DoorOpen\")\n+        public boolean doorOpen;\n+        @SerializedName(\"ErrRFID\")\n+        public boolean errRFID;\n+        @SerializedName(\"SignalStrength\")\n+        public String signalStrength = \"\";\n+        @SerializedName(\"$metadata\")\n+        public $metadata_ $metadata = new $metadata_();\n+        public int $version;\n+        public String deviceId = \"\";\n+        @SerializedName(\"PM1\")\n+        public int pM1;\n+        @SerializedName(\"PM2_5\")\n+        public int pM25;\n+        @SerializedName(\"PM10\")\n+        public int pM10;\n+        @SerializedName(\"TVOC\")\n+        public int tVOC;\n+        @SerializedName(\"CO2\")\n+        public int cO2;\n+        @SerializedName(\"Temp\")\n+        public int temp;\n+        @SerializedName(\"Humidity\")\n+        public int humidity;\n+        @SerializedName(\"EnvLightLvl\")\n+        public int envLightLvl;\n+        @SerializedName(\"RSSI\")\n+        public int rSSI;\n+\n+        public String getFrmVerNIU() {\n+            return frmVerNIU;\n+        }\n+\n+        public String getWorkmode() {\n+            return workmode;\n+        }\n+\n+        public String getFilterRFID() {\n+            return filterRFID;\n+        }\n+\n+        public int getFilterLife() {\n+            return filterLife;\n+        }\n+\n+        public int getFanspeed() {\n+            return fanspeed;\n+        }\n+\n+        public boolean isuILight() {\n+            return uILight;\n+        }\n+\n+        public boolean isSafetyLock() {\n+            return safetyLock;\n+        }\n+\n+        public boolean isIonizer() {\n+            return ionizer;\n+        }\n+\n+        public boolean isSleep() {\n+            return sleep;\n+        }\n+\n+        public boolean isScheduler() {\n+            return scheduler;\n+        }\n+\n+        public int getFilterType() {\n+            return filterType;\n+        }\n+\n+        public boolean isDspIcoPM25() {\n+            return dspIcoPM25;\n+        }\n+\n+        public boolean isDspIcoPM1() {\n+            return dspIcoPM1;\n+        }\n+\n+        public boolean isDspIcoPM10() {\n+            return dspIcoPM10;\n+        }\n+\n+        public boolean isDspIcoTVOC() {\n+            return dspIcoTVOC;\n+        }\n+\n+        public boolean isErrPM25() {\n+            return errPM25;\n+        }\n+\n+        public boolean isErrTVOC() {\n+            return errTVOC;\n+        }\n+\n+        public boolean isErrTempHumidity() {\n+            return errTempHumidity;\n+        }\n+\n+        public boolean isErrFanMtr() {\n+            return errFanMtr;\n+        }\n+\n+        public boolean isErrCommSensorDisplayBrd() {\n+            return errCommSensorDisplayBrd;\n+        }\n+\n+        public boolean isDoorOpen() {\n+            return doorOpen;\n+        }\n+\n+        public boolean isErrRFID() {\n+            return errRFID;\n+        }\n+\n+        public String getSignalStrength() {\n+            return signalStrength;\n+        }\n+\n+        public int get$version() {\n+            return $version;\n+        }\n+\n+        public String getDeviceId() {\n+            return deviceId;\n+        }\n+\n+        public int getpM1() {\n+            return pM1;\n+        }\n+\n+        public int getpM25() {\n+            return pM25;\n+        }\n+\n+        public int getpM10() {\n+            return pM10;\n+        }\n+\n+        public int gettVOC() {\n+            return tVOC;\n+        }\n+\n+        public int getcO2() {\n+            return cO2;\n+        }\n+\n+        public int getTemp() {\n+            return temp;\n+        }\n+\n+        public int getHumidity() {\n+            return humidity;\n+        }\n+\n+        public int getEnvLightLvl() {\n+            return envLightLvl;\n+        }\n+\n+        public int getrSSI() {\n+            return rSSI;\n+        }\n+    }\n+\n+    public class SafetyLock {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Scheduler {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class SignalStrength {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Sleep {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class TVOC {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Temp {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class TimeZoneStandardName {\n+        public String $lastUpdated = \"\";\n+        public int $lastUpdatedVersion;\n+    }\n+\n+    public class Twin {\n+        public String deviceId = \"\";\n+        public Properties properties = new Properties();\n+        public String status = \"\";\n+        public String connectionState = \"\";\n+\n+        public String getDeviceId() {\n+            return deviceId;\n+        }\n+\n+        public Properties getProperties() {\n+            return properties;\n+        }\n+\n+        public String getStatus() {\n+            return status;\n+        }\n+\n+        public String getConnectionState() {\n+            return connectionState;\n+        }\n+    }\n+\n+    public class UILight {\n+        public String $lastUpdated = \"\";\n+    }\n+\n+    public class Workmode {\n+        public String $lastUpdated = \"\";\n+    }\n+}"
  },
  {
    "sha": "f9546f11697ed0f9bb874a4d89820c9dca9bc3ce",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirBridgeHandler.java",
    "status": "added",
    "additions": 185,
    "deletions": 0,
    "changes": 185,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirBridgeHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirBridgeHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirBridgeHandler.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal.handler;\n+\n+import static org.openhab.binding.electroluxair.internal.ElectroluxAirBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.electroluxair.internal.ElectroluxAirBridgeConfiguration;\n+import org.openhab.binding.electroluxair.internal.api.ElectroluxDeltaAPI;\n+import org.openhab.binding.electroluxair.internal.discovery.ElectroluxAirDiscoveryService;\n+import org.openhab.binding.electroluxair.internal.dto.ElectroluxPureA9DTO;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link ElectroluxAirBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ElectroluxAirBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ElectroluxAirBridgeHandler.class);\n+\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+    private @Nullable ElectroluxDeltaAPI api;\n+\n+    private static int REFRESH_SEC = 300;\n+    private final Map<String, ElectroluxPureA9DTO> electroluxAirThings = new ConcurrentHashMap<>();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    /**\n+     * Use cache for refresh command to not update again when call is made within 10 seconds of previous call.\n+     */\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(10),\n+            this::refreshAndUpdateStatus);\n+\n+    public ElectroluxAirBridgeHandler(Bridge bridge, HttpClient httpClient, Gson gson) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.gson = gson;\n+    }\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    @Override\n+    public void initialize() {\n+        ElectroluxAirBridgeConfiguration config = getConfigAs(ElectroluxAirBridgeConfiguration.class);\n+\n+        try {\n+            ElectroluxDeltaAPI electroluxDeltaAPI = new ElectroluxDeltaAPI(config, gson, httpClient);\n+\n+            if (config.username == null || config.password == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Configuration of username, password and client secret is mandatory\");\n+            } else if (REFRESH_SEC < 0) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"Refresh time cannot negative!\");\n+            } else {\n+                try {\n+                    this.api = electroluxDeltaAPI;\n+                    scheduler.execute(() -> {\n+\n+                        updateStatus(ThingStatus.UNKNOWN);\n+                        startAutomaticRefresh();\n+\n+                    });\n+                } catch (RuntimeException e) {\n+                    logger.warn(\"Failed to initialize: {}\", e.getMessage());\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            logger.warn(\"Exception caught. {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command received: {}\", command);\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    public Map<String, ElectroluxPureA9DTO> getElectroluxAirThings() {\n+        return electroluxAirThings;\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(ElectroluxAirDiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        stopAutomaticRefresh();\n+    }\n+\n+    public @Nullable ElectroluxDeltaAPI getElectroluxDeltaAPI() {\n+        return api;\n+    }\n+\n+    private boolean refreshAndUpdateStatus() {\n+        logger.debug(\"Refresh and update status!\");\n+\n+        if (api != null) {\n+            if (api.refresh(electroluxAirThings)) {\n+                logger.debug(\"Number of entries: {}\", electroluxAirThings.size());\n+                getThing().getThings().stream().forEach(thing -> {\n+                    ElectroluxAirHandler handler = (ElectroluxAirHandler) thing.getHandler();\n+                    if (handler != null) {\n+                        handler.update();\n+                    }\n+                });\n+                updateStatus(ThingStatus.ONLINE);\n+                return true;\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        logger.debug(\"Start automatic refresh {}\", refreshJob);\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            try {\n+                this.refreshJob = scheduler.scheduleWithFixedDelay(this::refreshAndUpdateStatus, 0, REFRESH_SEC,\n+                        TimeUnit.SECONDS);\n+                logger.debug(\"Scheduling at fixed delay refreshjob {}\", this.refreshJob);\n+            } catch (RejectedExecutionException e) {\n+                logger.warn(\"Automatic refresh job cannot be started!\");\n+            }\n+        }\n+    }\n+\n+    private void stopAutomaticRefresh() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        logger.debug(\"Stop automatic refresh for job {}\", refreshJob);\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+}"
  },
  {
    "sha": "aca5a4b81ebdd1fa7aa1774488ba7da731d49e19",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandler.java",
    "status": "added",
    "additions": 226,
    "deletions": 0,
    "changes": 226,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandler.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,226 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal.handler;\n+\n+import static org.openhab.binding.electroluxair.internal.ElectroluxAirBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.electroluxair.internal.ElectroluxAirConfiguration;\n+import org.openhab.binding.electroluxair.internal.api.ElectroluxDeltaAPI;\n+import org.openhab.binding.electroluxair.internal.dto.ElectroluxPureA9DTO;\n+import org.openhab.core.library.dimension.Density;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ElectroluxAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ElectroluxAirHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ElectroluxAirHandler.class);\n+\n+    private ElectroluxAirConfiguration config = new ElectroluxAirConfiguration();\n+\n+    public ElectroluxAirHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command received: {}\", command);\n+        if (CHANNEL_STATUS.equals(channelUID.getId()) || command instanceof RefreshType) {\n+            update();\n+        } else {\n+            ElectroluxPureA9DTO dto = getElectroluxPureA9DTO();\n+            ElectroluxDeltaAPI api = getElectroluxDeltaAPO();\n+            if (api != null && dto != null) {\n+                if (CHANNEL_WORK_MODE.equals(channelUID.getId())) {\n+                    if (command.toString().equals(COMMAND_WORKMODE_POWEROFF)) {\n+                        api.workModePowerOff(dto.getPncId());\n+                    } else if (command.toString().equals(COMMAND_WORKMODE_AUTO)) {\n+                        api.workModeAuto(dto.getPncId());\n+                    } else if (command.toString().equals(COMMAND_WORKMODE_MANUAL)) {\n+                        api.workModeManual(dto.getPncId());\n+                    }\n+                } else if (CHANNEL_FAN_SPEED.equals(channelUID.getId())) {\n+                    api.setFanSpeedLevel(dto.getPncId(), Integer.parseInt(command.toString()));\n+                } else if (CHANNEL_IONIZER.equals(channelUID.getId())) {\n+                    if (command == OnOffType.OFF) {\n+                        api.setIonizer(dto.getPncId(), \"false\");\n+                    } else if (command == OnOffType.ON) {\n+                        api.setIonizer(dto.getPncId(), \"true\");\n+                    } else {\n+                        logger.debug(\"Unknown command! {}\", command);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Initializing the ElectroluxAir handler for {}\", getThing().getUID());\n+\n+        config = getConfigAs(ElectroluxAirConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.execute(() -> {\n+            Bridge bridge = getBridge();\n+            if (bridge != null) {\n+                this.bridgeStatusChanged(bridge.getStatusInfo());\n+            }\n+            Map<String, String> properties = refreshProperties();\n+            updateProperties(properties);\n+        });\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            update();\n+        }\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+    }\n+\n+    public void update() {\n+        ElectroluxPureA9DTO dto = getElectroluxPureA9DTO();\n+        if (dto != null) {\n+            update(dto);\n+        } else {\n+            logger.warn(\"ElectroluxPureA9DTO is null!\");\n+        }\n+    }\n+\n+    private @Nullable ElectroluxDeltaAPI getElectroluxDeltaAPO() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ElectroluxAirBridgeHandler handler = (ElectroluxAirBridgeHandler) bridge.getHandler();\n+            if (handler != null) {\n+                return handler.getElectroluxDeltaAPI();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private @Nullable ElectroluxPureA9DTO getElectroluxPureA9DTO() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ElectroluxAirBridgeHandler bridgeHandler = (ElectroluxAirBridgeHandler) bridge.getHandler();\n+            if (bridgeHandler != null) {\n+                return bridgeHandler.getElectroluxAirThings().get(config.getDeviceId());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void update(@Nullable ElectroluxPureA9DTO dto) {\n+        logger.debug(\"update: {}\", dto);\n+        if (dto != null) {\n+            // Update all channels from the updated data\n+            getThing().getChannels().stream().map(Channel::getUID).filter(channelUID -> isLinked(channelUID))\n+                    .forEach(channelUID -> {\n+                        State state = getValue(channelUID.getId(), dto);\n+                        updateState(channelUID, state);\n+                    });\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private State getValue(String channelId, ElectroluxPureA9DTO dto) {\n+        switch (channelId) {\n+            case CHANNEL_TEMPERATURE:\n+                return new QuantityType<Temperature>(dto.getTwin().getProperties().getReported().getTemp(),\n+                        SIUnits.CELSIUS);\n+            case CHANNEL_HUMIDITY:\n+                return new QuantityType<Dimensionless>(dto.getTwin().getProperties().getReported().getHumidity(),\n+                        Units.PERCENT);\n+            case CHANNEL_TVOC:\n+                return new QuantityType<Dimensionless>(dto.getTwin().getProperties().getReported().gettVOC(),\n+                        Units.PARTS_PER_BILLION);\n+            case CHANNEL_PM1:\n+                return new QuantityType<Density>(dto.getTwin().getProperties().getReported().getpM1(),\n+                        Units.MICROGRAM_PER_CUBICMETRE);\n+            case CHANNEL_PM25:\n+                return new QuantityType<Density>(dto.getTwin().getProperties().getReported().getpM25(),\n+                        Units.MICROGRAM_PER_CUBICMETRE);\n+            case CHANNEL_PM10:\n+                return new QuantityType<Density>(dto.getTwin().getProperties().getReported().getpM10(),\n+                        Units.MICROGRAM_PER_CUBICMETRE);\n+            case CHANNEL_CO2:\n+                return new QuantityType<Dimensionless>(dto.getTwin().getProperties().getReported().getcO2(),\n+                        Units.PARTS_PER_MILLION);\n+            case CHANNEL_FAN_SPEED:\n+                return new StringType(Integer.toString(dto.getTwin().getProperties().getReported().getFanspeed()));\n+            case CHANNEL_FILTER_LIFE:\n+                return new QuantityType<Dimensionless>(dto.getTwin().getProperties().getReported().getFilterLife(),\n+                        Units.PERCENT);\n+            case CHANNEL_IONIZER:\n+                return OnOffType.from(dto.getTwin().getProperties().getReported().ionizer);\n+            case CHANNEL_WORK_MODE:\n+                return new StringType(dto.getTwin().getProperties().getReported().workmode);\n+            case CHANNEL_DOOR_OPEN:\n+                return dto.getTwin().getProperties().getReported().doorOpen ? OpenClosedType.OPEN\n+                        : OpenClosedType.CLOSED;\n+\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private Map<String, String> refreshProperties() {\n+        Map<String, String> properties = new HashMap<>();\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ElectroluxAirBridgeHandler bridgeHandler = (ElectroluxAirBridgeHandler) bridge.getHandler();\n+            if (bridgeHandler != null) {\n+                ElectroluxPureA9DTO dto = bridgeHandler.getElectroluxAirThings().get(config.getDeviceId());\n+                if (dto != null) {\n+                    properties.put(PROPERTY_BRAND, dto.getApplicancesInfo().brand);\n+                    properties.put(PROPERTY_COLOUR, dto.getApplicancesInfo().colour);\n+                    properties.put(PROPERTY_DEVICE, dto.getApplicancesInfo().device);\n+                    properties.put(PROPERTY_MODEL, dto.getApplicancesInfo().model);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, dto.getApplicancesInfo().serialNumber);\n+                    properties.put(PROPERTY_FW_VERSION, dto.getTwin().getProperties().getReported().frmVerNIU);\n+                }\n+            }\n+        }\n+        return properties;\n+    }\n+}"
  },
  {
    "sha": "765140762abfb3275848a6b09529230bdefc5051",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandlerFactory.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandlerFactory.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandlerFactory.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/java/org/openhab/binding/electroluxair/internal/handler/ElectroluxAirHandlerFactory.java?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.electroluxair.internal.handler;\n+\n+import static org.openhab.binding.electroluxair.internal.ElectroluxAirBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link ElectroluxAirHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Jan Gustafsson - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.electroluxair\", service = ThingHandlerFactory.class)\n+public class ElectroluxAirHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ElectroluxAirHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_ELECTROLUX_PURE_A9,\n+            THING_TYPE_BRIDGE);\n+    private final Gson gson;\n+    private final HttpClient httpClient;\n+\n+    @Activate\n+    public ElectroluxAirHandlerFactory(@Reference HttpClientFactory httpClientFactory) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+        this.gson = new Gson();\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_ELECTROLUX_PURE_A9.equals(thingTypeUID)) {\n+            return new ElectroluxAirHandler(thing);\n+        } else if (THING_TYPE_BRIDGE.equals(thingTypeUID)) {\n+            return new ElectroluxAirBridgeHandler((Bridge) thing, httpClient, gson);\n+        }\n+        logger.warn(\"ThingHandler not found for {}\", thing.getThingTypeUID());\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "29cc21fe8271837cba5ec7f06c3b1aad527e7628",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/binding/binding.xml",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/binding/binding.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/binding/binding.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/binding/binding.xml?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"electroluxair\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>ElectroluxAir Binding</name>\n+\t<description>This is the binding for Electrolux Pure A9 Air Purifier.</description>\n+\n+</binding:binding>"
  },
  {
    "sha": "4c84e16250092667419649e2805b4f3ead707a81",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/i18n/electroluxair_xx_XX.properties",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/i18n/electroluxair_xx_XX.properties",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/i18n/electroluxair_xx_XX.properties",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/i18n/electroluxair_xx_XX.properties?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,17 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content\n+# binding\n+binding.electroluxair.name = <Your localized Binding name>\n+binding.electroluxair.description = <Your localized Binding description>\n+\n+# thing types\n+thing-type.electroluxair.sample.label = <Your localized Thing label>\n+thing-type.electroluxair.sample.description = <Your localized Thing description>\n+\n+# thing type config description\n+thing-type.config.electroluxair.sample.config1.label = <Your localized config parameter label>\n+thing-type.config.electroluxair.sample.config1.description = <Your localized config parameter description>\n+\n+# channel types\n+channel-type.electroluxair.sample-channel.label = <Your localized Channel label>\n+channel-type.electroluxair.sample-channel.description = <Your localized Channel description>"
  },
  {
    "sha": "5fb46c071a0071105643aa203cb885db7be8d8c5",
    "filename": "bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/thing/thing-types.xml",
    "status": "added",
    "additions": 184,
    "deletions": 0,
    "changes": 184,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/thing/thing-types.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/thing/thing-types.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.electroluxair/src/main/resources/OH-INF/thing/thing-types.xml?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -0,0 +1,184 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"electroluxair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<bridge-type id=\"api\">\n+\t\t<label>Electrolux Delta API</label>\n+\t\t<description>This bridge represents the web API connector.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"status\" typeId=\"status\"/>\n+\t\t</channels>\n+\n+\t\t<properties>\n+\t\t\t<property name=\"vendor\">Electrolux</property>\n+\t\t</properties>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"username\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Username</label>\n+\t\t\t\t<description>The username used to login to Electrolux Wellbeing app.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<description>The password used to login to Electrolux Wellbeing app.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"10\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Specifies the refresh interval in seconds.</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"electroluxpurea9\">\n+\t\t<label>ElectroluxAir Pure A9 Thing</label>\n+\t\t<description>This thing represents the ElectroluxAir Pure A9.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"tvoc\" typeId=\"tvoc\"/>\n+\t\t\t<channel id=\"pm1\" typeId=\"pm1\"/>\n+\t\t\t<channel id=\"pm2_5\" typeId=\"pm2_5\"/>\n+\t\t\t<channel id=\"pm10\" typeId=\"pm10\"/>\n+\t\t\t<channel id=\"co2\" typeId=\"co2\"/>\n+\t\t\t<channel id=\"filterLife\" typeId=\"filterLife\"/>\n+\t\t\t<channel id=\"doorOpen\" typeId=\"doorOpen\"/>\n+\t\t\t<channel id=\"fanSpeed\" typeId=\"fanSpeed\"/>\n+\t\t\t<channel id=\"workMode\" typeId=\"workMode\"/>\n+\t\t\t<channel id=\"ionizer\" typeId=\"ionizer\"/>\n+\t\t</channels>\n+\n+\t\t<properties>\n+\t\t\t<property name=\"vendor\">Electrolux</property>\n+\t\t</properties>\n+\n+\t\t<representation-property>deviceId</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"deviceId\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device Id</label>\n+\t\t\t\t<description>Unique Id.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"status\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Current Status</label>\n+\t\t<description>Information on current status.</description>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Humidity</description>\n+\t\t<category>Humidity</category>\n+\t\t<state readOnly=\"true\" min=\"0\" max=\"100\" pattern=\"%d %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"tvoc\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>TVOC</label>\n+\t\t<description>Total Volatile Organic Compounds</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n+\t</channel-type>\n+\n+\n+\t<channel-type id=\"pm1\">\n+\t\t<item-type>Number:Density</item-type>\n+\t\t<label>PM1</label>\n+\t\t<description>Particulate Matter 1 (0.001mm)</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"pm2_5\">\n+\t\t<item-type>Number:Density</item-type>\n+\t\t<label>PM2.5</label>\n+\t\t<description>Particulate Matter 2.5 (0.0025mm)</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"pm10\">\n+\t\t<item-type>Number:Density</item-type>\n+\t\t<label>PM10</label>\n+\t\t<description>Particulate Matter 10 (0.01mm)</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"co2\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>CO2</label>\n+\t\t<description>CarbonDioxide</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"filterLife\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Filter Life</label>\n+\t\t<description>Filter Life</description>\n+\t\t<state readOnly=\"true\" min=\"0\" max=\"100\" pattern=\"%d %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"doorOpen\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Door Status</label>\n+\t\t<description>Door Status Open/Closed</description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fanSpeed\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Fan Speed Setting</label>\n+\t\t<description>Fan Speed Setting</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Level 1</option>\n+\t\t\t\t<option value=\"2\">Level 2</option>\n+\t\t\t\t<option value=\"3\">Level 3</option>\n+\t\t\t\t<option value=\"4\">Level 4</option>\n+\t\t\t\t<option value=\"5\">Level 5</option>\n+\t\t\t\t<option value=\"6\">Level 6</option>\n+\t\t\t\t<option value=\"7\">Level 7</option>\n+\t\t\t\t<option value=\"8\">Level 8</option>\n+\t\t\t\t<option value=\"9\">Level 9</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"workMode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Work Mode Setting</label>\n+\t\t<description>Work Mode Setting</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PowerOff\">Power Off</option>\n+\t\t\t\t<option value=\"Auto\">Automatic</option>\n+\t\t\t\t<option value=\"Manual\">Manual</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"ionizer\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Ionizer Status</label>\n+\t\t<description>Ionizer Status</description>\n+\t</channel-type>\n+\n+\n+</thing:thing-descriptions>"
  },
  {
    "sha": "702697234100bf79a21e94893b48c974a38af1e4",
    "filename": "bundles/pom.xml",
    "status": "modified",
    "additions": 564,
    "deletions": 13,
    "changes": 577,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/0a29e8db2840dc81994ed84fe5151651ee7fb8c0/bundles/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/pom.xml?ref=0a29e8db2840dc81994ed84fe5151651ee7fb8c0",
    "patch": "@@ -1,574 +1,1125 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    \n   <modelVersion>4.0.0</modelVersion>\n-\n+    \n   <parent>\n+        \n     <groupId>org.openhab.addons</groupId>\n+        \n     <artifactId>org.openhab.addons.reactor</artifactId>\n+        \n     <version>3.1.0-SNAPSHOT</version>\n+      \n   </parent>\n-\n+    \n   <groupId>org.openhab.addons.bundles</groupId>\n+    \n   <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    \n   <packaging>pom</packaging>\n-\n+    \n   <name>openHAB Add-ons :: Bundles</name>\n-\n+    \n   <modules>\n+        \n     <!-- automation -->\n+        \n     <module>org.openhab.automation.groovyscripting</module>\n+        \n     <module>org.openhab.automation.jythonscripting</module>\n+        \n     <module>org.openhab.automation.pidcontroller</module>\n+        \n     <!-- io -->\n+        \n     <module>org.openhab.io.homekit</module>\n+        \n     <module>org.openhab.io.hueemulation</module>\n+        \n     <module>org.openhab.io.imperihome</module>\n+        \n     <module>org.openhab.io.neeo</module>\n+        \n     <module>org.openhab.io.openhabcloud</module>\n+        \n     <!-- transformations -->\n+        \n     <module>org.openhab.transform.bin2json</module>\n+        \n     <module>org.openhab.transform.exec</module>\n+        \n     <module>org.openhab.transform.javascript</module>\n+        \n     <module>org.openhab.transform.jinja</module>\n+        \n     <module>org.openhab.transform.jsonpath</module>\n+        \n     <module>org.openhab.transform.map</module>\n+        \n     <module>org.openhab.transform.regex</module>\n+        \n     <module>org.openhab.transform.scale</module>\n+        \n     <module>org.openhab.transform.xpath</module>\n+        \n     <module>org.openhab.transform.xslt</module>\n+        \n     <!-- bindings -->\n+        \n     <module>org.openhab.binding.adorne</module>\n+        \n     <module>org.openhab.binding.airquality</module>\n+        \n     <module>org.openhab.binding.airvisualnode</module>\n+        \n     <module>org.openhab.binding.alarmdecoder</module>\n+        \n     <module>org.openhab.binding.allplay</module>\n+        \n     <module>org.openhab.binding.amazondashbutton</module>\n+        \n     <module>org.openhab.binding.amazonechocontrol</module>\n+        \n     <module>org.openhab.binding.ambientweather</module>\n+        \n     <module>org.openhab.binding.androiddebugbridge</module>\n+        \n     <module>org.openhab.binding.astro</module>\n+        \n     <module>org.openhab.binding.atlona</module>\n+        \n     <module>org.openhab.binding.autelis</module>\n+        \n     <module>org.openhab.binding.automower</module>\n+        \n     <module>org.openhab.binding.avmfritz</module>\n+        \n     <module>org.openhab.binding.bigassfan</module>\n+        \n     <module>org.openhab.binding.bluetooth</module>\n+        \n     <module>org.openhab.binding.bluetooth.airthings</module>\n+        \n     <module>org.openhab.binding.bluetooth.am43</module>\n+        \n     <module>org.openhab.binding.bluetooth.bluegiga</module>\n+        \n     <module>org.openhab.binding.bluetooth.bluez</module>\n+        \n     <module>org.openhab.binding.bluetooth.blukii</module>\n+        \n     <module>org.openhab.binding.bluetooth.daikinmadoka</module>\n+        \n     <module>org.openhab.binding.bluetooth.enoceanble</module>\n+        \n     <module>org.openhab.binding.bluetooth.generic</module>\n+        \n     <module>org.openhab.binding.bluetooth.govee</module>\n+        \n     <module>org.openhab.binding.bluetooth.roaming</module>\n+        \n     <module>org.openhab.binding.bluetooth.ruuvitag</module>\n+        \n     <module>org.openhab.binding.boschindego</module>\n+        \n     <module>org.openhab.binding.boschshc</module>\n+        \n     <module>org.openhab.binding.bosesoundtouch</module>\n+        \n     <module>org.openhab.binding.broadlinkthermostat</module>\n+        \n     <module>org.openhab.binding.bsblan</module>\n+        \n     <module>org.openhab.binding.bticinosmarther</module>\n+        \n     <module>org.openhab.binding.buienradar</module>\n+        \n     <module>org.openhab.binding.caddx</module>\n+        \n     <module>org.openhab.binding.cbus</module>\n+        \n     <module>org.openhab.binding.chromecast</module>\n+        \n     <module>org.openhab.binding.cm11a</module>\n+        \n     <module>org.openhab.binding.comfoair</module>\n+        \n     <module>org.openhab.binding.coolmasternet</module>\n+        \n     <module>org.openhab.binding.coronastats</module>\n+        \n     <module>org.openhab.binding.daikin</module>\n+        \n     <module>org.openhab.binding.danfossairunit</module>\n+        \n     <module>org.openhab.binding.darksky</module>\n+        \n     <module>org.openhab.binding.deconz</module>\n+        \n     <module>org.openhab.binding.denonmarantz</module>\n+        \n     <module>org.openhab.binding.digiplex</module>\n+        \n     <module>org.openhab.binding.digitalstrom</module>\n+        \n     <module>org.openhab.binding.dlinksmarthome</module>\n+        \n     <module>org.openhab.binding.dmx</module>\n+        \n     <module>org.openhab.binding.doorbird</module>\n+        \n     <module>org.openhab.binding.draytonwiser</module>\n+        \n     <module>org.openhab.binding.dscalarm</module>\n+        \n     <module>org.openhab.binding.dsmr</module>\n+        \n     <module>org.openhab.binding.dwdpollenflug</module>\n+        \n     <module>org.openhab.binding.dwdunwetter</module>\n+        \n     <module>org.openhab.binding.ecobee</module>\n+\n+    <module>org.openhab.binding.electroluxair</module>\n+        \n     <module>org.openhab.binding.elerotransmitterstick</module>\n+        \n     <module>org.openhab.binding.energenie</module>\n+        \n     <module>org.openhab.binding.enigma2</module>\n+        \n     <module>org.openhab.binding.enocean</module>\n+        \n     <module>org.openhab.binding.enturno</module>\n+        \n     <module>org.openhab.binding.epsonprojector</module>\n+        \n     <module>org.openhab.binding.etherrain</module>\n+        \n     <module>org.openhab.binding.evohome</module>\n+        \n     <module>org.openhab.binding.exec</module>\n+        \n     <module>org.openhab.binding.feed</module>\n+        \n     <module>org.openhab.binding.feican</module>\n+        \n     <module>org.openhab.binding.fmiweather</module>\n+        \n     <module>org.openhab.binding.folderwatcher</module>\n+        \n     <module>org.openhab.binding.folding</module>\n+        \n     <module>org.openhab.binding.foobot</module>\n+        \n     <module>org.openhab.binding.freebox</module>\n+        \n     <module>org.openhab.binding.fronius</module>\n+        \n     <module>org.openhab.binding.fsinternetradio</module>\n+        \n     <module>org.openhab.binding.ftpupload</module>\n+        \n     <module>org.openhab.binding.gardena</module>\n+        \n     <module>org.openhab.binding.gce</module>\n+        \n     <module>org.openhab.binding.generacmobilelink</module>\n+        \n     <module>org.openhab.binding.goecharger</module>\n+        \n     <module>org.openhab.binding.gpio</module>\n+        \n     <module>org.openhab.binding.globalcache</module>\n+        \n     <module>org.openhab.binding.gpstracker</module>\n+        \n     <module>org.openhab.binding.gree</module>\n+        \n     <module>org.openhab.binding.groheondus</module>\n+        \n     <module>org.openhab.binding.harmonyhub</module>\n+        \n     <module>org.openhab.binding.haywardomnilogic</module>\n+        \n     <module>org.openhab.binding.hdanywhere</module>\n+        \n     <module>org.openhab.binding.hdpowerview</module>\n+        \n     <module>org.openhab.binding.helios</module>\n+        \n     <module>org.openhab.binding.heliosventilation</module>\n+        \n     <module>org.openhab.binding.heos</module>\n+        \n     <module>org.openhab.binding.homematic</module>\n+        \n     <module>org.openhab.binding.hpprinter</module>\n+        \n     <module>org.openhab.binding.http</module>\n+        \n     <module>org.openhab.binding.hue</module>\n+        \n     <module>org.openhab.binding.hydrawise</module>\n+        \n     <module>org.openhab.binding.hyperion</module>\n+        \n     <module>org.openhab.binding.iammeter</module>\n+        \n     <module>org.openhab.binding.iaqualink</module>\n+        \n     <module>org.openhab.binding.icalendar</module>\n+        \n     <module>org.openhab.binding.icloud</module>\n+        \n     <module>org.openhab.binding.ihc</module>\n+        \n     <module>org.openhab.binding.innogysmarthome</module>\n+        \n     <module>org.openhab.binding.insteon</module>\n+        \n     <module>org.openhab.binding.ipcamera</module>\n+        \n     <module>org.openhab.binding.intesis</module>\n+        \n     <module>org.openhab.binding.ipp</module>\n+        \n     <module>org.openhab.binding.irobot</module>\n+        \n     <module>org.openhab.binding.irtrans</module>\n+        \n     <module>org.openhab.binding.ism8</module>\n+        \n     <module>org.openhab.binding.jablotron</module>\n+        \n     <module>org.openhab.binding.jeelink</module>\n+        \n     <module>org.openhab.binding.kaleidescape</module>\n+        \n     <module>org.openhab.binding.keba</module>\n+        \n     <module>org.openhab.binding.km200</module>\n+        \n     <module>org.openhab.binding.knx</module>\n+        \n     <module>org.openhab.binding.kodi</module>\n+        \n     <module>org.openhab.binding.konnected</module>\n+        \n     <module>org.openhab.binding.kostalinverter</module>\n+        \n     <module>org.openhab.binding.kvv</module>\n+        \n     <module>org.openhab.binding.lametrictime</module>\n+        \n     <module>org.openhab.binding.lcn</module>\n+        \n     <module>org.openhab.binding.leapmotion</module>\n+        \n     <module>org.openhab.binding.lghombot</module>\n+        \n     <module>org.openhab.binding.lgtvserial</module>\n+        \n     <module>org.openhab.binding.lgwebos</module>\n+        \n     <module>org.openhab.binding.lifx</module>\n+        \n     <module>org.openhab.binding.linky</module>\n+        \n     <module>org.openhab.binding.linuxinput</module>\n+        \n     <module>org.openhab.binding.lirc</module>\n+        \n     <module>org.openhab.binding.logreader</module>\n+        \n     <module>org.openhab.binding.loxone</module>\n+        \n     <module>org.openhab.binding.luftdateninfo</module>\n+        \n     <module>org.openhab.binding.lutron</module>\n+        \n     <module>org.openhab.binding.magentatv</module>\n+        \n     <module>org.openhab.binding.mail</module>\n+        \n     <module>org.openhab.binding.max</module>\n+        \n     <module>org.openhab.binding.mcp23017</module>\n+        \n     <module>org.openhab.binding.melcloud</module>\n+        \n     <module>org.openhab.binding.meteoalerte</module>\n+        \n     <module>org.openhab.binding.meteoblue</module>\n+        \n     <module>org.openhab.binding.meteostick</module>\n+        \n     <module>org.openhab.binding.miele</module>\n+        \n     <module>org.openhab.binding.mihome</module>\n+        \n     <module>org.openhab.binding.miio</module>\n+        \n     <module>org.openhab.binding.millheat</module>\n+        \n     <module>org.openhab.binding.milight</module>\n+        \n     <module>org.openhab.binding.minecraft</module>\n+        \n     <module>org.openhab.binding.modbus</module>\n+        \n     <module>org.openhab.binding.modbus.e3dc</module>\n+        \n     <module>org.openhab.binding.modbus.sbc</module>\n+        \n     <module>org.openhab.binding.modbus.studer</module>\n+        \n     <module>org.openhab.binding.modbus.sunspec</module>\n+        \n     <module>org.openhab.binding.modbus.stiebeleltron</module>\n+        \n     <module>org.openhab.binding.modbus.helioseasycontrols</module>\n+        \n     <module>org.openhab.binding.monopriceaudio</module>\n+        \n     <module>org.openhab.binding.mpd</module>\n+        \n     <module>org.openhab.binding.mqtt</module>\n+        \n     <module>org.openhab.binding.mqtt.espmilighthub</module>\n+        \n     <module>org.openhab.binding.mqtt.generic</module>\n+        \n     <module>org.openhab.binding.mqtt.homeassistant</module>\n+        \n     <module>org.openhab.binding.mqtt.homie</module>\n+\n     <module>org.openhab.binding.myq</module>\n+\n     <module>org.openhab.binding.mystrom</module>\n+        \n     <module>org.openhab.binding.nanoleaf</module>\n+        \n     <module>org.openhab.binding.neato</module>\n+        \n     <module>org.openhab.binding.neeo</module>\n+        \n     <module>org.openhab.binding.neohub</module>\n+        \n     <module>org.openhab.binding.nest</module>\n+        \n     <module>org.openhab.binding.netatmo</module>\n+        \n     <module>org.openhab.binding.network</module>\n+        \n     <module>org.openhab.binding.networkupstools</module>\n+        \n     <module>org.openhab.binding.nibeheatpump</module>\n+        \n     <module>org.openhab.binding.nibeuplink</module>\n+        \n     <module>org.openhab.binding.nikobus</module>\n+        \n     <module>org.openhab.binding.nikohomecontrol</module>\n+        \n     <module>org.openhab.binding.novafinedust</module>\n+        \n     <module>org.openhab.binding.ntp</module>\n+        \n     <module>org.openhab.binding.nuki</module>\n+        \n     <module>org.openhab.binding.nuvo</module>\n+        \n     <module>org.openhab.binding.nzwateralerts</module>\n+        \n     <module>org.openhab.binding.oceanic</module>\n+        \n     <module>org.openhab.binding.ojelectronics</module>\n+        \n     <module>org.openhab.binding.omnikinverter</module>\n+        \n     <module>org.openhab.binding.omnilink</module>\n+        \n     <module>org.openhab.binding.onebusaway</module>\n+        \n     <module>org.openhab.binding.onewiregpio</module>\n+        \n     <module>org.openhab.binding.onewire</module>\n+        \n     <module>org.openhab.binding.onkyo</module>\n+        \n     <module>org.openhab.binding.opengarage</module>\n+        \n     <module>org.openhab.binding.opensprinkler</module>\n+        \n     <module>org.openhab.binding.openthermgateway</module>\n+        \n     <module>org.openhab.binding.openuv</module>\n+        \n     <module>org.openhab.binding.openweathermap</module>\n+        \n     <module>org.openhab.binding.openwebnet</module>\n+        \n     <module>org.openhab.binding.oppo</module>\n+        \n     <module>org.openhab.binding.orvibo</module>\n+        \n     <module>org.openhab.binding.paradoxalarm</module>\n+        \n     <module>org.openhab.binding.pentair</module>\n+        \n     <module>org.openhab.binding.phc</module>\n+        \n     <module>org.openhab.binding.pilight</module>\n+        \n     <module>org.openhab.binding.pioneeravr</module>\n+        \n     <module>org.openhab.binding.pixometer</module>\n+        \n     <module>org.openhab.binding.pjlinkdevice</module>\n+        \n     <module>org.openhab.binding.playstation</module>\n+        \n     <module>org.openhab.binding.plclogo</module>\n+        \n     <module>org.openhab.binding.plugwise</module>\n+        \n     <module>org.openhab.binding.powermax</module>\n+        \n     <module>org.openhab.binding.pulseaudio</module>\n+        \n     <module>org.openhab.binding.pushbullet</module>\n+        \n     <module>org.openhab.binding.pushover</module>\n+        \n     <module>org.openhab.binding.radiothermostat</module>\n+        \n     <module>org.openhab.binding.regoheatpump</module>\n+        \n     <module>org.openhab.binding.revogi</module>\n+        \n     <module>org.openhab.binding.remoteopenhab</module>\n+        \n     <module>org.openhab.binding.rfxcom</module>\n+        \n     <module>org.openhab.binding.rme</module>\n+        \n     <module>org.openhab.binding.robonect</module>\n+        \n     <module>org.openhab.binding.roku</module>\n+        \n     <module>org.openhab.binding.rotel</module>\n+        \n     <module>org.openhab.binding.russound</module>\n+        \n     <module>org.openhab.binding.sagercaster</module>\n+        \n     <module>org.openhab.binding.samsungtv</module>\n+        \n     <module>org.openhab.binding.satel</module>\n+        \n     <module>org.openhab.binding.senechome</module>\n+        \n     <module>org.openhab.binding.seneye</module>\n+        \n     <module>org.openhab.binding.sensebox</module>\n+        \n     <module>org.openhab.binding.sensibo</module>\n+        \n     <module>org.openhab.binding.serial</module>\n+        \n     <module>org.openhab.binding.serialbutton</module>\n+        \n     <module>org.openhab.binding.shelly</module>\n+        \n     <module>org.openhab.binding.silvercrestwifisocket</module>\n+        \n     <module>org.openhab.binding.siemensrds</module>\n+        \n     <module>org.openhab.binding.sinope</module>\n+        \n     <module>org.openhab.binding.sleepiq</module>\n+        \n     <module>org.openhab.binding.smaenergymeter</module>\n+        \n     <module>org.openhab.binding.smartmeter</module>\n+        \n     <module>org.openhab.binding.smhi</module>\n+        \n     <module>org.openhab.binding.smartthings</module>\n+        \n     <module>org.openhab.binding.snmp</module>\n+        \n     <module>org.openhab.binding.solaredge</module>\n+        \n     <module>org.openhab.binding.solarlog</module>\n+        \n     <module>org.openhab.binding.somfymylink</module>\n+        \n     <module>org.openhab.binding.somfytahoma</module>\n+        \n     <module>org.openhab.binding.sonos</module>\n+        \n     <module>org.openhab.binding.sonyaudio</module>\n+        \n     <module>org.openhab.binding.sonyprojector</module>\n+        \n     <module>org.openhab.binding.spotify</module>\n+        \n     <module>org.openhab.binding.squeezebox</module>\n+\n     <module>org.openhab.binding.surepetcare</module>\n+\n     <module>org.openhab.binding.synopanalyzer</module>\n+        \n     <module>org.openhab.binding.systeminfo</module>\n+        \n     <module>org.openhab.binding.tacmi</module>\n+        \n     <module>org.openhab.binding.tado</module>\n+        \n     <module>org.openhab.binding.tankerkoenig</module>\n+        \n     <module>org.openhab.binding.telegram</module>\n+        \n     <module>org.openhab.binding.teleinfo</module>\n+        \n     <module>org.openhab.binding.tellstick</module>\n+        \n     <module>org.openhab.binding.tesla</module>\n+        \n     <module>org.openhab.binding.tibber</module>\n+        \n     <module>org.openhab.binding.tivo</module>\n+        \n     <module>org.openhab.binding.touchwand</module>\n+        \n     <module>org.openhab.binding.tplinksmarthome</module>\n+        \n     <module>org.openhab.binding.tr064</module>\n+        \n     <module>org.openhab.binding.tradfri</module>\n+        \n     <module>org.openhab.binding.unifi</module>\n+        \n     <module>org.openhab.binding.unifiedremote</module>\n+        \n     <module>org.openhab.binding.upnpcontrol</module>\n+        \n     <module>org.openhab.binding.upb</module>\n+        \n     <module>org.openhab.binding.urtsi</module>\n+        \n     <module>org.openhab.binding.valloxmv</module>\n+        \n     <module>org.openhab.binding.vektiva</module>\n+        \n     <module>org.openhab.binding.velbus</module>\n+        \n     <module>org.openhab.binding.velux</module>\n+        \n     <module>org.openhab.binding.venstarthermostat</module>\n+        \n     <module>org.openhab.binding.verisure</module>\n+        \n     <module>org.openhab.binding.vigicrues</module>\n+        \n     <module>org.openhab.binding.vitotronic</module>\n+        \n     <module>org.openhab.binding.volvooncall</module>\n+        \n     <module>org.openhab.binding.weathercompany</module>\n+        \n     <module>org.openhab.binding.weatherunderground</module>\n+        \n     <module>org.openhab.binding.wemo</module>\n+        \n     <module>org.openhab.binding.wifiled</module>\n+        \n     <module>org.openhab.binding.windcentrale</module>\n+        \n     <module>org.openhab.binding.wlanthermo</module>\n+        \n     <module>org.openhab.binding.wled</module>\n+        \n     <module>org.openhab.binding.xmltv</module>\n+        \n     <module>org.openhab.binding.xmppclient</module>\n+        \n     <module>org.openhab.binding.yamahareceiver</module>\n+        \n     <module>org.openhab.binding.yioremote</module>\n+        \n     <module>org.openhab.binding.yeelight</module>\n+        \n     <module>org.openhab.binding.zoneminder</module>\n+        \n     <module>org.openhab.binding.zway</module>\n+        \n     <!-- persistence -->\n+        \n     <module>org.openhab.persistence.dynamodb</module>\n+        \n     <module>org.openhab.persistence.influxdb</module>\n+        \n     <module>org.openhab.persistence.jdbc</module>\n+        \n     <module>org.openhab.persistence.jpa</module>\n+        \n     <module>org.openhab.persistence.mapdb</module>\n+        \n     <module>org.openhab.persistence.mongodb</module>\n+        \n     <module>org.openhab.persistence.rrd4j</module>\n+        \n     <!-- voice -->\n+        \n     <module>org.openhab.voice.googletts</module>\n+        \n     <module>org.openhab.voice.mactts</module>\n+        \n     <module>org.openhab.voice.marytts</module>\n+        \n     <module>org.openhab.voice.picotts</module>\n+        \n     <module>org.openhab.voice.pollytts</module>\n+        \n     <module>org.openhab.voice.voicerss</module>\n+        \n+      \n   </modules>\n-\n+    \n   <properties>\n+        \n     <m2e.jdt.annotationpath>target/dependency</m2e.jdt.annotationpath>\n+        \n     <dep.noembedding/>\n+      \n   </properties>\n-\n+    \n   <dependencies>\n+        \n     <dependency>\n+            \n       <groupId>org.lastnpe.eea</groupId>\n+            \n       <artifactId>eea-all</artifactId>\n+            \n       <version>${eea.version}</version>\n+          \n     </dependency>\n+        \n     <!-- openHAB core -->\n+        \n     <dependency>\n+            \n       <groupId>org.openhab.core.bom</groupId>\n+            \n       <artifactId>org.openhab.core.bom.compile</artifactId>\n+            \n       <type>pom</type>\n+            \n       <scope>provided</scope>\n+          \n     </dependency>\n+        \n     <dependency>\n+            \n       <groupId>org.openhab.core.bom</groupId>\n+            \n       <artifactId>org.openhab.core.bom.openhab-core</artifactId>\n+            \n       <type>pom</type>\n+            \n       <scope>provided</scope>\n+            \n       <exclusions>\n+                \n         <exclusion>\n+                    \n           <groupId>commons-net</groupId>\n+                    \n           <artifactId>commons-net</artifactId>\n+                  \n         </exclusion>\n+              \n       </exclusions>\n+          \n     </dependency>\n+        \n     <dependency>\n+            \n       <groupId>org.openhab.core.bom</groupId>\n+            \n       <artifactId>org.openhab.core.bom.test</artifactId>\n+            \n       <type>pom</type>\n+            \n       <scope>test</scope>\n+          \n     </dependency>\n+        \n     <!-- Distribution -->\n+        \n     <dependency>\n+            \n       <groupId>org.apache.karaf.features</groupId>\n+            \n       <artifactId>framework</artifactId>\n+            \n       <version>${karaf.version}</version>\n+            \n       <type>kar</type>\n+            \n       <optional>true</optional>\n+            \n       <exclusions>\n+                \n         <exclusion>\n+                    \n           <groupId>*</groupId>\n+                    \n           <artifactId>*</artifactId>\n+                  \n         </exclusion>\n+              \n       </exclusions>\n+          \n     </dependency>\n+        \n     <!-- Repositories -->\n+        \n     <dependency>\n+            \n       <groupId>org.apache.karaf.features</groupId>\n+            \n       <artifactId>standard</artifactId>\n+            \n       <version>${karaf.version}</version>\n+            \n       <classifier>features</classifier>\n+            \n       <type>xml</type>\n+            \n       <scope>provided</scope>\n+          \n     </dependency>\n+      \n   </dependencies>\n-\n+    \n   <build>\n+        \n     <pluginManagement>\n+            \n       <plugins>\n+                \n         <plugin>\n+                    \n           <groupId>org.apache.maven.plugins</groupId>\n+                    \n           <artifactId>maven-jar-plugin</artifactId>\n+                    \n           <configuration>\n+                        \n             <archive>\n+                            \n               <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+                          \n             </archive>\n+                        \n             <skipIfEmpty>true</skipIfEmpty>\n+                      \n           </configuration>\n+                  \n         </plugin>\n+                \n         <plugin>\n+                    \n           <groupId>org.apache.karaf.tooling</groupId>\n+                    \n           <artifactId>karaf-maven-plugin</artifactId>\n+                    \n           <version>${karaf.version}</version>\n+                    \n           <extensions>true</extensions>\n+                    \n           <configuration>\n+                        \n             <startLevel>80</startLevel>\n+                        \n             <aggregateFeatures>true</aggregateFeatures>\n+                        \n             <checkDependencyChange>true</checkDependencyChange>\n+                        \n             <failOnDependencyChange>false</failOnDependencyChange>\n+                        \n             <logDependencyChanges>true</logDependencyChanges>\n+                        \n             <overwriteChangedDependencies>true</overwriteChangedDependencies>\n+                      \n           </configuration>\n+                    \n           <executions>\n+                        \n             <execution>\n+                            \n               <id>compile</id>\n+                            \n               <goals>\n+                                \n                 <goal>features-generate-descriptor</goal>\n+                              \n               </goals>\n+                            \n               <phase>generate-resources</phase>\n+                            \n               <configuration>\n+                                \n                 <inputFile>${feature.directory}</inputFile>\n+                              \n               </configuration>\n+                          \n             </execution>\n+                        \n             <execution>\n+                            \n               <id>karaf-feature-verification</id>\n+                            \n               <goals>\n+                                \n                 <goal>verify</goal>\n+                              \n               </goals>\n+                            \n               <phase>verify</phase>\n+                            \n               <configuration>\n+                                \n                 <descriptors combine.children=\"append\">\n+                                    \n                   <!-- Apache Karaf -->\n+                                    \n                   <descriptor>mvn:org.apache.karaf.features/framework/${karaf.version}/xml/features</descriptor>\n+                                    \n                   <descriptor>mvn:org.apache.karaf.features/standard/${karaf.version}/xml/features</descriptor>\n+                                    \n                   <!-- Current feature under verification -->\n+                                    \n                   <descriptor>file:${project.build.directory}/feature/feature.xml</descriptor>\n+                                  \n                 </descriptors>\n+                                \n                 <distribution>org.apache.karaf.features:framework</distribution>\n+                                \n                 <javase>${oh.java.version}</javase>\n+                                \n                 <framework>\n+                                    \n                   <feature>framework</feature>\n+                                  \n                 </framework>\n+                                \n                 <features>\n+                                    \n                   <feature>openhab-*</feature>\n+                                  \n                 </features>\n+                                \n                 <verifyTransitive>false</verifyTransitive>\n+                                \n                 <ignoreMissingConditions>true</ignoreMissingConditions>\n+                                \n                 <fail>first</fail>\n+                              \n               </configuration>\n+                          \n             </execution>\n+                      \n           </executions>\n+                  \n         </plugin>\n+              \n       </plugins>\n+          \n     </pluginManagement>\n-\n+        \n     <plugins>\n+            \n       <plugin>\n+                \n         <groupId>biz.aQute.bnd</groupId>\n+                \n         <artifactId>bnd-maven-plugin</artifactId>\n+              \n       </plugin>\n+            \n       <plugin>\n+                \n         <groupId>org.apache.maven.plugins</groupId>\n+                \n         <artifactId>maven-source-plugin</artifactId>\n+                \n         <executions>\n+                    \n           <execution>\n+                        \n             <id>attach-sources</id>\n+                        \n             <goals>\n+                            \n               <goal>jar-no-fork</goal>\n+                          \n             </goals>\n+                      \n           </execution>\n+                  \n         </executions>\n+              \n       </plugin>\n+            \n       <plugin>\n+                \n         <groupId>org.apache.karaf.tooling</groupId>\n+                \n         <artifactId>karaf-maven-plugin</artifactId>\n+              \n       </plugin>\n+            \n       <!-- embed compile time dependencies by unpacking -->\n+            \n       <plugin>\n+                \n         <groupId>org.apache.maven.plugins</groupId>\n+                \n         <artifactId>maven-dependency-plugin</artifactId>\n+                \n         <version>3.1.1</version>\n+                \n         <executions>\n+                    \n           <execution>\n+                        \n             <id>embed-dependencies</id>\n+                        \n             <goals>\n+                            \n               <goal>unpack-dependencies</goal>\n+                          \n             </goals>\n+                        \n             <configuration>\n+                            \n               <includeScope>runtime</includeScope>\n+                            \n               <includeTypes>jar</includeTypes>\n+                            \n               <excludeGroupIds>javax.activation,org.apache.karaf.features,org.lastnpe.eea</excludeGroupIds>\n+                            \n               <excludeArtifactIds>${dep.noembedding}</excludeArtifactIds>\n+                            \n               <outputDirectory>${project.build.directory}/classes</outputDirectory>\n+                            \n               <overWriteReleases>true</overWriteReleases>\n+                            \n               <overWriteSnapshots>true</overWriteSnapshots>\n+                            \n               <excludeTransitive>true</excludeTransitive>\n+                            \n               <type>jar</type>\n+                          \n             </configuration>\n+                      \n           </execution>\n+                    \n           <execution>\n+                        \n             <id>unpack-eea</id>\n+                        \n             <goals>\n+                            \n               <goal>unpack</goal>\n+                          \n             </goals>\n+                        \n             <configuration>\n+                            \n               <artifactItems>\n+                                \n                 <artifactItem>\n+                                    \n                   <groupId>org.lastnpe.eea</groupId>\n+                                    \n                   <artifactId>eea-all</artifactId>\n+                                    \n                   <version>${eea.version}</version>\n+                                    \n                   <overWrite>true</overWrite>\n+                                  \n                 </artifactItem>\n+                              \n               </artifactItems>\n+                          \n             </configuration>\n+                      \n           </execution>\n+                  \n         </executions>\n+              \n       </plugin>\n+          \n     </plugins>\n+      \n   </build>\n-\n+    \n   <profiles>\n+        \n     <!-- suppress embedding of dependencies -->\n+        \n     <profile>\n+            \n       <id>no-embed-dependencies</id>\n+            \n       <activation>\n+                \n         <file>\n+                    \n           <exists>noEmbedDependencies.profile</exists>\n+                  \n         </file>\n+              \n       </activation>\n+            \n       <build>\n+                \n         <plugins>\n+                    \n           <plugin>\n+                        \n             <groupId>org.apache.maven.plugins</groupId>\n+                        \n             <artifactId>maven-dependency-plugin</artifactId>\n+                        \n             <executions>\n+                            \n               <execution>\n+                                \n                 <id>embed-dependencies</id>\n+                                \n                 <phase>none</phase>\n+                              \n               </execution>\n+                          \n             </executions>\n+                      \n           </plugin>\n+                  \n         </plugins>\n+              \n       </build>\n+          \n     </profile>\n+      \n   </profiles>\n-\n+  \n </project>"
  }
]
