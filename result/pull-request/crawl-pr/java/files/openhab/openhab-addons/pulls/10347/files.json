[
  {
    "sha": "75327834db6ebe6b895ebf12b073289abdc04c4c",
    "filename": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/discovery/SomfyTahomaItemDiscoveryService.java",
    "status": "modified",
    "additions": 76,
    "deletions": 47,
    "changes": 123,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/discovery/SomfyTahomaItemDiscoveryService.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/discovery/SomfyTahomaItemDiscoveryService.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/discovery/SomfyTahomaItemDiscoveryService.java?ref=459dfb55e1400135fe6179b931a1a0d4223ed9eb",
    "patch": "@@ -24,7 +24,13 @@\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.openhab.binding.somfytahoma.internal.handler.SomfyTahomaBridgeHandler;\n-import org.openhab.binding.somfytahoma.internal.model.*;\n+import org.openhab.binding.somfytahoma.internal.model.SomfyTahomaActionGroup;\n+import org.openhab.binding.somfytahoma.internal.model.SomfyTahomaDevice;\n+import org.openhab.binding.somfytahoma.internal.model.SomfyTahomaGateway;\n+import org.openhab.binding.somfytahoma.internal.model.SomfyTahomaRootPlace;\n+import org.openhab.binding.somfytahoma.internal.model.SomfyTahomaSetup;\n+import org.openhab.binding.somfytahoma.internal.model.SomfyTahomaState;\n+import org.openhab.binding.somfytahoma.internal.model.SomfyTahomaSubPlace;\n import org.openhab.core.config.discovery.AbstractDiscoveryService;\n import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n import org.openhab.core.config.discovery.DiscoveryService;\n@@ -41,20 +47,21 @@\n  * action groups associated with your TahomaLink cloud account.\n  *\n  * @author Ondrej Pecta - Initial contribution\n+ * @author Laurent Garnier - Include the place into the inbox label (when defined for the device)\n  */\n @NonNullByDefault\n public class SomfyTahomaItemDiscoveryService extends AbstractDiscoveryService\n         implements DiscoveryService, ThingHandlerService {\n \n+    private static final int DISCOVERY_TIMEOUT_SEC = 10;\n+    private static final int DISCOVERY_REFRESH_SEC = 3600;\n+\n     private final Logger logger = LoggerFactory.getLogger(SomfyTahomaItemDiscoveryService.class);\n \n     private @Nullable SomfyTahomaBridgeHandler bridgeHandler;\n \n     private @Nullable ScheduledFuture<?> discoveryJob;\n \n-    private static final int DISCOVERY_TIMEOUT_SEC = 10;\n-    private static final int DISCOVERY_REFRESH_SEC = 3600;\n-\n     public SomfyTahomaItemDiscoveryService() {\n         super(DISCOVERY_TIMEOUT_SEC);\n         logger.debug(\"Creating discovery service\");\n@@ -124,7 +131,7 @@ private synchronized void runDiscovery() {\n             }\n \n             for (SomfyTahomaDevice device : setup.getDevices()) {\n-                discoverDevice(device);\n+                discoverDevice(device, setup);\n             }\n             for (SomfyTahomaGateway gw : setup.getGateways()) {\n                 gatewayDiscovered(gw);\n@@ -144,163 +151,164 @@ private synchronized void runDiscovery() {\n         }\n     }\n \n-    private void discoverDevice(SomfyTahomaDevice device) {\n+    private void discoverDevice(SomfyTahomaDevice device, SomfyTahomaSetup setup) {\n         logger.debug(\"url: {}\", device.getDeviceURL());\n+        String place = getPlaceLabel(setup, device.getPlaceOID());\n         switch (device.getUiClass()) {\n             case CLASS_AWNING:\n                 // widget: PositionableHorizontalAwning\n-                deviceDiscovered(device, THING_TYPE_AWNING);\n+                deviceDiscovered(device, THING_TYPE_AWNING, place);\n                 break;\n             case CLASS_CONTACT_SENSOR:\n                 // widget: ContactSensor\n-                deviceDiscovered(device, THING_TYPE_CONTACTSENSOR);\n+                deviceDiscovered(device, THING_TYPE_CONTACTSENSOR, place);\n                 break;\n             case CLASS_CURTAIN:\n-                deviceDiscovered(device, THING_TYPE_CURTAIN);\n+                deviceDiscovered(device, THING_TYPE_CURTAIN, place);\n                 break;\n             case CLASS_EXTERIOR_SCREEN:\n                 // widget: PositionableScreen\n-                deviceDiscovered(device, THING_TYPE_EXTERIORSCREEN);\n+                deviceDiscovered(device, THING_TYPE_EXTERIORSCREEN, place);\n                 break;\n             case CLASS_EXTERIOR_VENETIAN_BLIND:\n                 // widget: PositionableExteriorVenetianBlind\n-                deviceDiscovered(device, THING_TYPE_EXTERIORVENETIANBLIND);\n+                deviceDiscovered(device, THING_TYPE_EXTERIORVENETIANBLIND, place);\n                 break;\n             case CLASS_GARAGE_DOOR:\n-                deviceDiscovered(device, THING_TYPE_GARAGEDOOR);\n+                deviceDiscovered(device, THING_TYPE_GARAGEDOOR, place);\n                 break;\n             case CLASS_LIGHT:\n                 if (\"DimmerLight\".equals(device.getWidget())) {\n                     // widget: DimmerLight\n-                    deviceDiscovered(device, THING_TYPE_DIMMER_LIGHT);\n+                    deviceDiscovered(device, THING_TYPE_DIMMER_LIGHT, place);\n                 } else {\n                     // widget: TimedOnOffLight\n                     // widget: StatefulOnOffLight\n-                    deviceDiscovered(device, THING_TYPE_LIGHT);\n+                    deviceDiscovered(device, THING_TYPE_LIGHT, place);\n                 }\n                 break;\n             case CLASS_LIGHT_SENSOR:\n-                deviceDiscovered(device, THING_TYPE_LIGHTSENSOR);\n+                deviceDiscovered(device, THING_TYPE_LIGHTSENSOR, place);\n                 break;\n             case CLASS_OCCUPANCY_SENSOR:\n                 // widget: OccupancySensor\n-                deviceDiscovered(device, THING_TYPE_OCCUPANCYSENSOR);\n+                deviceDiscovered(device, THING_TYPE_OCCUPANCYSENSOR, place);\n                 break;\n             case CLASS_ON_OFF:\n                 // widget: StatefulOnOff\n-                deviceDiscovered(device, THING_TYPE_ONOFF);\n+                deviceDiscovered(device, THING_TYPE_ONOFF, place);\n                 break;\n             case CLASS_ROLLER_SHUTTER:\n                 if (isSilentRollerShutter(device)) {\n                     // widget: PositionableRollerShutterWithLowSpeedManagement\n-                    deviceDiscovered(device, THING_TYPE_ROLLERSHUTTER_SILENT);\n+                    deviceDiscovered(device, THING_TYPE_ROLLERSHUTTER_SILENT, place);\n                 } else if (isUnoRollerShutter(device)) {\n                     // widget: PositionableRollerShutterUno\n-                    deviceDiscovered(device, THING_TYPE_ROLLERSHUTTER_UNO);\n+                    deviceDiscovered(device, THING_TYPE_ROLLERSHUTTER_UNO, place);\n                 } else {\n                     // widget: PositionableRollerShutter\n                     // widget: PositionableTiltedRollerShutter\n-                    deviceDiscovered(device, THING_TYPE_ROLLERSHUTTER);\n+                    deviceDiscovered(device, THING_TYPE_ROLLERSHUTTER, place);\n                 }\n                 break;\n             case CLASS_SCREEN:\n                 // widget: PositionableTiltedScreen\n-                deviceDiscovered(device, THING_TYPE_SCREEN);\n+                deviceDiscovered(device, THING_TYPE_SCREEN, place);\n                 break;\n             case CLASS_SMOKE_SENSOR:\n                 // widget: SmokeSensor\n-                deviceDiscovered(device, THING_TYPE_SMOKESENSOR);\n+                deviceDiscovered(device, THING_TYPE_SMOKESENSOR, place);\n                 break;\n             case CLASS_VENETIAN_BLIND:\n-                deviceDiscovered(device, THING_TYPE_VENETIANBLIND);\n+                deviceDiscovered(device, THING_TYPE_VENETIANBLIND, place);\n                 break;\n             case CLASS_WINDOW:\n                 // widget: PositionableTiltedWindow\n-                deviceDiscovered(device, THING_TYPE_WINDOW);\n+                deviceDiscovered(device, THING_TYPE_WINDOW, place);\n                 break;\n             case CLASS_ALARM:\n                 if (device.getDeviceURL().startsWith(\"internal:\")) {\n                     // widget: TSKAlarmController\n-                    deviceDiscovered(device, THING_TYPE_INTERNAL_ALARM);\n+                    deviceDiscovered(device, THING_TYPE_INTERNAL_ALARM, place);\n                 } else if (\"MyFoxAlarmController\".equals(device.getWidget())) {\n                     // widget: MyFoxAlarmController\n-                    deviceDiscovered(device, THING_TYPE_MYFOX_ALARM);\n+                    deviceDiscovered(device, THING_TYPE_MYFOX_ALARM, place);\n                 } else {\n-                    deviceDiscovered(device, THING_TYPE_EXTERNAL_ALARM);\n+                    deviceDiscovered(device, THING_TYPE_EXTERNAL_ALARM, place);\n                 }\n                 break;\n             case CLASS_POD:\n                 if (hasState(device, CYCLIC_BUTTON_STATE)) {\n-                    deviceDiscovered(device, THING_TYPE_POD);\n+                    deviceDiscovered(device, THING_TYPE_POD, place);\n                 }\n                 break;\n             case CLASS_HEATING_SYSTEM:\n                 if (\"SomfyThermostat\".equals(device.getWidget())) {\n-                    deviceDiscovered(device, THING_TYPE_THERMOSTAT);\n+                    deviceDiscovered(device, THING_TYPE_THERMOSTAT, place);\n                 } else if (\"ValveHeatingTemperatureInterface\".equals(device.getWidget())) {\n-                    deviceDiscovered(device, THING_TYPE_VALVE_HEATING_SYSTEM);\n+                    deviceDiscovered(device, THING_TYPE_VALVE_HEATING_SYSTEM, place);\n                 } else if (isOnOffHeatingSystem(device)) {\n-                    deviceDiscovered(device, THING_TYPE_ONOFF_HEATING_SYSTEM);\n+                    deviceDiscovered(device, THING_TYPE_ONOFF_HEATING_SYSTEM, place);\n                 } else if (isZwaveHeatingSystem(device)) {\n-                    deviceDiscovered(device, THING_TYPE_ZWAVE_HEATING_SYSTEM);\n+                    deviceDiscovered(device, THING_TYPE_ZWAVE_HEATING_SYSTEM, place);\n                 } else {\n                     logUnsupportedDevice(device);\n                 }\n                 break;\n             case CLASS_EXTERIOR_HEATING_SYSTEM:\n                 if (\"DimmerExteriorHeating\".equals(device.getWidget())) {\n                     // widget: DimmerExteriorHeating\n-                    deviceDiscovered(device, THING_TYPE_EXTERIOR_HEATING_SYSTEM);\n+                    deviceDiscovered(device, THING_TYPE_EXTERIOR_HEATING_SYSTEM, place);\n                 } else {\n                     logUnsupportedDevice(device);\n                 }\n                 break;\n             case CLASS_HUMIDITY_SENSOR:\n                 if (hasState(device, WATER_DETECTION_STATE)) {\n-                    deviceDiscovered(device, THING_TYPE_WATERSENSOR);\n+                    deviceDiscovered(device, THING_TYPE_WATERSENSOR, place);\n                 } else {\n                     // widget: RelativeHumiditySensor\n-                    deviceDiscovered(device, THING_TYPE_HUMIDITYSENSOR);\n+                    deviceDiscovered(device, THING_TYPE_HUMIDITYSENSOR, place);\n                 }\n             case CLASS_DOOR_LOCK:\n                 // widget: UnlockDoorLockWithUnknownPosition\n-                deviceDiscovered(device, THING_TYPE_DOOR_LOCK);\n+                deviceDiscovered(device, THING_TYPE_DOOR_LOCK, place);\n                 break;\n             case CLASS_PERGOLA:\n-                deviceDiscovered(device, THING_TYPE_PERGOLA);\n+                deviceDiscovered(device, THING_TYPE_PERGOLA, place);\n                 break;\n             case CLASS_WINDOW_HANDLE:\n                 // widget: ThreeWayWindowHandle\n-                deviceDiscovered(device, THING_TYPE_WINDOW_HANDLE);\n+                deviceDiscovered(device, THING_TYPE_WINDOW_HANDLE, place);\n                 break;\n             case CLASS_TEMPERATURE_SENSOR:\n                 // widget: TemperatureSensor\n-                deviceDiscovered(device, THING_TYPE_TEMPERATURESENSOR);\n+                deviceDiscovered(device, THING_TYPE_TEMPERATURESENSOR, place);\n                 break;\n             case CLASS_GATE:\n-                deviceDiscovered(device, THING_TYPE_GATE);\n+                deviceDiscovered(device, THING_TYPE_GATE, place);\n                 break;\n             case CLASS_ELECTRICITY_SENSOR:\n                 if (hasEnergyConsumption(device)) {\n-                    deviceDiscovered(device, THING_TYPE_ELECTRICITYSENSOR);\n+                    deviceDiscovered(device, THING_TYPE_ELECTRICITYSENSOR, place);\n                 } else {\n                     logUnsupportedDevice(device);\n                 }\n                 break;\n             case CLASS_DOCK:\n                 // widget: Dock\n-                deviceDiscovered(device, THING_TYPE_DOCK);\n+                deviceDiscovered(device, THING_TYPE_DOCK, place);\n                 break;\n             case CLASS_SIREN:\n-                deviceDiscovered(device, THING_TYPE_SIREN);\n+                deviceDiscovered(device, THING_TYPE_SIREN, place);\n                 break;\n             case CLASS_ADJUSTABLE_SLATS_ROLLER_SHUTTER:\n-                deviceDiscovered(device, THING_TYPE_ADJUSTABLE_SLATS_ROLLERSHUTTER);\n+                deviceDiscovered(device, THING_TYPE_ADJUSTABLE_SLATS_ROLLERSHUTTER, place);\n                 break;\n             case CLASS_CAMERA:\n                 if (hasMyfoxShutter(device)) {\n                     // widget: MyFoxSecurityCamera\n-                    deviceDiscovered(device, THING_TYPE_MYFOX_CAMERA);\n+                    deviceDiscovered(device, THING_TYPE_MYFOX_CAMERA, place);\n                 } else {\n                     logUnsupportedDevice(device);\n                 }\n@@ -315,6 +323,18 @@ private void discoverDevice(SomfyTahomaDevice device) {\n         }\n     }\n \n+    private @Nullable String getPlaceLabel(SomfyTahomaSetup setup, String oid) {\n+        SomfyTahomaRootPlace root = setup.getRootPlace();\n+        if (!oid.isEmpty() && root != null) {\n+            for (SomfyTahomaSubPlace place : root.getSubPlaces()) {\n+                if (oid.equals(place.getOid())) {\n+                    return place.getLabel();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n     private boolean isStateLess(SomfyTahomaDevice device) {\n         return device.getStates().isEmpty() || (device.getStates().size() == 1 && hasState(device, STATUS_STATE));\n     }\n@@ -366,8 +386,17 @@ private boolean hasCommmand(SomfyTahomaDevice device, String command) {\n         return device.getDefinition().getCommands().stream().anyMatch(cmd -> command.equals(cmd.getCommandName()));\n     }\n \n-    private void deviceDiscovered(SomfyTahomaDevice device, ThingTypeUID thingTypeUID) {\n-        deviceDiscovered(device.getLabel(), device.getDeviceURL(), device.getOid(), thingTypeUID,\n+    private void deviceDiscovered(SomfyTahomaDevice device, ThingTypeUID thingTypeUID, @Nullable String place) {\n+        deviceDiscovered(null, device, thingTypeUID, place);\n+    }\n+\n+    private void deviceDiscovered(@Nullable String otherLabel, SomfyTahomaDevice device, ThingTypeUID thingTypeUID,\n+            @Nullable String place) {\n+        String label = otherLabel != null ? otherLabel : device.getLabel();\n+        if (place != null && !place.isBlank()) {\n+            label += \" (\" + place + \")\";\n+        }\n+        deviceDiscovered(label, device.getDeviceURL(), device.getOid(), thingTypeUID,\n                 hasState(device, RSSI_LEVEL_STATE));\n     }\n "
  },
  {
    "sha": "c3ceb22f96356fbc5fc21158f6282b9366d3cb7d",
    "filename": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBaseThingHandler.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBaseThingHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBaseThingHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBaseThingHandler.java?ref=459dfb55e1400135fe6179b931a1a0d4223ed9eb",
    "patch": "@@ -181,6 +181,17 @@ protected void sendCommand(String cmd, String param) {\n         }\n     }\n \n+    protected void sendCommandToSameDevicesInPlace(String cmd) {\n+        sendCommandToSameDevicesInPlace(cmd, \"[]\");\n+    }\n+\n+    protected void sendCommandToSameDevicesInPlace(String cmd, String param) {\n+        SomfyTahomaBridgeHandler handler = getBridgeHandler();\n+        if (handler != null) {\n+            handler.sendCommandToSameDevicesInPlace(url, cmd, param, EXEC_URL + \"apply\");\n+        }\n+    }\n+\n     protected void refresh(String channel) {\n         SomfyTahomaBridgeHandler handler = getBridgeHandler();\n         String stateName = stateNames.get(channel);"
  },
  {
    "sha": "8895d8288c9d4d947ed2a2decb18212349896290",
    "filename": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java",
    "status": "modified",
    "additions": 36,
    "deletions": 2,
    "changes": 38,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java?ref=459dfb55e1400135fe6179b931a1a0d4223ed9eb",
    "patch": "@@ -126,6 +126,8 @@\n      */\n     private String eventsId = \"\";\n \n+    private Map<String, SomfyTahomaDevice> devicePlaces = new HashMap<>();\n+\n     private ExpiringCache<List<SomfyTahomaDevice>> cachedDevices = new ExpiringCache<>(Duration.ofSeconds(30),\n             this::getDevices);\n \n@@ -345,13 +347,19 @@ private void stopPolling() {\n     }\n \n     public @Nullable SomfyTahomaSetup getSetup() {\n-        return invokeCallToURL(TAHOMA_API_URL + \"setup\", \"\", HttpMethod.GET, SomfyTahomaSetup.class);\n+        SomfyTahomaSetup setup = invokeCallToURL(TAHOMA_API_URL + \"setup\", \"\", HttpMethod.GET, SomfyTahomaSetup.class);\n+        if (setup != null) {\n+            saveDevicePlaces(setup.getDevices());\n+        }\n+        return setup;\n     }\n \n     public List<SomfyTahomaDevice> getDevices() {\n         SomfyTahomaDevice[] response = invokeCallToURL(SETUP_URL + \"devices\", \"\", HttpMethod.GET,\n                 SomfyTahomaDevice[].class);\n-        return response != null ? List.of(response) : List.of();\n+        List<SomfyTahomaDevice> devices = response != null ? List.of(response) : List.of();\n+        saveDevicePlaces(devices);\n+        return devices;\n     }\n \n     public synchronized @Nullable SomfyTahomaDevice getCachedDevice(String url) {\n@@ -364,6 +372,18 @@ private void stopPolling() {\n         return null;\n     }\n \n+    private void saveDevicePlaces(List<SomfyTahomaDevice> devices) {\n+        devicePlaces.clear();\n+        for (SomfyTahomaDevice device : devices) {\n+            if (!device.getPlaceOID().isEmpty()) {\n+                SomfyTahomaDevice newDevice = new SomfyTahomaDevice();\n+                newDevice.setPlaceOID(device.getPlaceOID());\n+                newDevice.setWidget(device.getWidget());\n+                devicePlaces.put(device.getDeviceURL(), newDevice);\n+            }\n+        }\n+    }\n+\n     private void getTahomaUpdates() {\n         logger.debug(\"Getting Tahoma Updates...\");\n         if (ThingStatus.OFFLINE == thing.getStatus() && !reLogin()) {\n@@ -648,6 +668,20 @@ private void scheduleRetry(String io, String command, String params, String url,\n         }, thingConfig.getRetryDelay(), TimeUnit.MILLISECONDS));\n     }\n \n+    public void sendCommandToSameDevicesInPlace(String io, String command, String params, String url) {\n+        SomfyTahomaDevice device = devicePlaces.get(io);\n+        if (device != null && !device.getPlaceOID().isEmpty()) {\n+            devicePlaces.forEach((deviceUrl, devicePlace) -> {\n+                if (device.getPlaceOID().equals(devicePlace.getPlaceOID())\n+                        && device.getWidget().equals(devicePlace.getWidget())) {\n+                    sendCommand(deviceUrl, command, params, url);\n+                }\n+            });\n+        } else {\n+            sendCommand(io, command, params, url);\n+        }\n+    }\n+\n     private String getThingLabelByURL(String io) {\n         Thing th = getThingByDeviceUrl(io);\n         if (th != null) {"
  },
  {
    "sha": "dc6641d71b0468b4e7593896630f82c71cec5ea8",
    "filename": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaDevice.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaDevice.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaDevice.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaDevice.java?ref=459dfb55e1400135fe6179b931a1a0d4223ed9eb",
    "patch": "@@ -35,6 +35,7 @@\n     private SomfyTahomaDeviceDefinition definition = new SomfyTahomaDeviceDefinition();\n     private List<SomfyTahomaState> states = new ArrayList<>();\n     private List<SomfyTahomaState> attributes = new ArrayList<>();\n+    private String placeOID = \"\";\n \n     public String getLabel() {\n         return label;\n@@ -56,6 +57,10 @@ public String getWidget() {\n         return widget;\n     }\n \n+    public void setWidget(String widget) {\n+        this.widget = widget;\n+    }\n+\n     public SomfyTahomaDeviceDefinition getDefinition() {\n         return definition;\n     }\n@@ -67,4 +72,12 @@ public SomfyTahomaDeviceDefinition getDefinition() {\n     public List<SomfyTahomaState> getAttributes() {\n         return attributes;\n     }\n+\n+    public String getPlaceOID() {\n+        return placeOID;\n+    }\n+\n+    public void setPlaceOID(String placeOID) {\n+        this.placeOID = placeOID;\n+    }\n }"
  },
  {
    "sha": "eeacf61dddd6b934728c68df2f1cd87f282ec141",
    "filename": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaRootPlace.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaRootPlace.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaRootPlace.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaRootPlace.java?ref=459dfb55e1400135fe6179b931a1a0d4223ed9eb",
    "patch": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.somfytahoma.internal.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link SomfyTahomaRootPlace} holds information about all rooms bound\n+ * to TahomaLink account.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SomfyTahomaRootPlace {\n+\n+    private String label = \"\";\n+    private int type;\n+    private String oid = \"\";\n+    private List<SomfyTahomaSubPlace> subPlaces = new ArrayList<>();\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public int getType() {\n+        return type;\n+    }\n+\n+    public String getOid() {\n+        return oid;\n+    }\n+\n+    public List<SomfyTahomaSubPlace> getSubPlaces() {\n+        return subPlaces;\n+    }\n+}"
  },
  {
    "sha": "8146947cf9c5da4f44273fa9bf31ae6ea894cf09",
    "filename": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSetup.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSetup.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSetup.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSetup.java?ref=459dfb55e1400135fe6179b931a1a0d4223ed9eb",
    "patch": "@@ -16,12 +16,14 @@\n import java.util.List;\n \n import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * The {@link SomfyTahomaSetup} holds information about devices bound\n  * to TahomaLink account.\n  *\n  * @author Ondrej Pecta - Initial contribution\n+ * @author Laurent Garnier - Add rooms data\n  */\n @NonNullByDefault\n public class SomfyTahomaSetup {\n@@ -30,11 +32,17 @@\n \n     private List<SomfyTahomaGateway> gateways = new ArrayList<>();\n \n+    private @Nullable SomfyTahomaRootPlace rootPlace;\n+\n     public List<SomfyTahomaDevice> getDevices() {\n         return devices;\n     }\n \n     public List<SomfyTahomaGateway> getGateways() {\n         return gateways;\n     }\n+\n+    public @Nullable SomfyTahomaRootPlace getRootPlace() {\n+        return rootPlace;\n+    }\n }"
  },
  {
    "sha": "0465b092aa8ac21f7f9d43f48e0ba3e145cb6906",
    "filename": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSubPlace.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSubPlace.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/459dfb55e1400135fe6179b931a1a0d4223ed9eb/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSubPlace.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/model/SomfyTahomaSubPlace.java?ref=459dfb55e1400135fe6179b931a1a0d4223ed9eb",
    "patch": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.somfytahoma.internal.model;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link SomfyTahomaSubPlace} holds information about a room bound\n+ * to TahomaLink account.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SomfyTahomaSubPlace {\n+\n+    private String label = \"\";\n+    private int type;\n+    private String metadata = \"\";\n+    private String oid = \"\";\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public int getType() {\n+        return type;\n+    }\n+\n+    public String getMetadata() {\n+        return metadata;\n+    }\n+\n+    public String getOid() {\n+        return oid;\n+    }\n+}"
  }
]
