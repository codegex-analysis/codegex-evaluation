[
  {
    "sha": "b712b676bbc50d6ebdea652de71113662d2e90a1",
    "filename": "CODEOWNERS",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/CODEOWNERS",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/CODEOWNERS",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/CODEOWNERS?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -22,6 +22,7 @@\n /bundles/org.openhab.binding.autelis/ @digitaldan\n /bundles/org.openhab.binding.automower/ @maxpg\n /bundles/org.openhab.binding.avmfritz/ @cweitkamp\n+/bundles/org.openhab.binding.benqprojector/ @mlobstein\n /bundles/org.openhab.binding.bigassfan/ @mhilbush\n /bundles/org.openhab.binding.bluetooth/ @cdjackson @cpmeister\n /bundles/org.openhab.binding.bluetooth.airthings/ @paulianttila"
  },
  {
    "sha": "a70d62c035df5276f12d7a0218b9509befdf8168",
    "filename": "bom/openhab-addons/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bom/openhab-addons/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bom/openhab-addons/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bom/openhab-addons/pom.xml?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -101,6 +101,11 @@\n       <artifactId>org.openhab.binding.avmfritz</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.benqprojector</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.openhab.addons.bundles</groupId>\n       <artifactId>org.openhab.binding.bigassfan</artifactId>"
  },
  {
    "sha": "38d625e349232ff5ffcc71bd75e4692cdac12768",
    "filename": "bundles/org.openhab.binding.benqprojector/NOTICE",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/NOTICE",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/NOTICE",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/NOTICE?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,13 @@\n+This content is produced and maintained by the openHAB project.\n+\n+* Project home: https://www.openhab.org\n+\n+== Declared Project Licenses\n+\n+This program and the accompanying materials are made available under the terms\n+of the Eclipse Public License 2.0 which is available at\n+https://www.eclipse.org/legal/epl-2.0/.\n+\n+== Source Code\n+\n+https://github.com/openhab/openhab-addons"
  },
  {
    "sha": "d4d201c3581c6589862ac0c7c67ebe87bf50c60d",
    "filename": "bundles/org.openhab.binding.benqprojector/README.md",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/README.md",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/README.md",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/README.md?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,111 @@\n+# BenQ Projector Binding\n+\n+This binding is compatible with BenQ projectors that support the control protocol via the built-in ethernet port, serial port or USB to serial adapter.\n+If your projector does not have built-in networking, you can connect to your projector's serial port via a TCP connection using a serial over IP device or by using`ser2net`.  \n+\n+The control protocol can be found here: https://business-display.benq.com/content/dam/bb/en/product/projector/corporate/lx770/quick-start-guide/lx770-rs232-control-guide-0-windows7-windows8-winxp.pdf\n+\n+## Supported Things\n+\n+This binding supports two thing types based on the connection used: `projector-serial` and `projector-tcp`.\n+\n+## Discovery\n+\n+The projector thing cannot be auto-discovered, it has to be configured manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The `projector-serial` thing has the following configuration parameters:\n+\n+- _serialPort_: Serial port device name that is connected to the BenQ projector to control, e.g. COM1 on Windows, /dev/ttyS0 on Linux or /dev/tty.PL2303-0000103D on Mac\n+- _pollingInterval_: Polling interval in seconds to update channel states | 5-60 seconds; default 10 seconds\n+\n+The `projector-tcp` thing has the following configuration parameters:\n+\n+- _host_: IP address for the projector or serial over IP device\n+- _port_: Port for the projector or serial over IP device | Default 8000 for BenQ projectors with built in networking\n+- _pollingInterval_: Polling interval in seconds to update channel states | 5-60 seconds; default 10 seconds\n+\n+Some notes:\n+\n+* If using a serial port connection, the baud rate in the projector OSD menu must be set to 9600 bps.\n+* The _source_, _picturemode_ and _aspectratio_ channels include a dropdown with the most commonly used settings.\n+* Not all pre-defined dropdown options will be usable if your particular projector does support a given option.\n+* If your projector has an option that is not in the dropdown, the string code to access that option will be displayed by the channel when that option is selected by the remote control.\n+* By using the sitemap mapping or a rule to send that code back to the channel, any options that are missing in the binding can be accessed.\n+\n+* On Linux, you may get an error stating the serial port cannot be opened when the benqprojector binding tries to load.\n+* You can get around this by adding the `openhab` user to the `dialout` group like this: `usermod -a -G dialout openhab`.\n+* Also on Linux you may have issues with the USB if using two serial USB devices e.g. benqprojector and RFXcom. See the [general documentation about serial port configuration](/docs/administration/serial.html) for more on symlinking the USB ports.\n+* Here is an example of ser2net.conf you can use to share your serial port /dev/ttyUSB0 on IP port 4444 using [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) (take care, the baud rate is specific to the BenQ projector):\n+\n+```\n+4444:raw:0:/dev/ttyUSB0:9600 8DATABITS NONE 1STOPBIT LOCAL\n+```\n+\n+## Channels\n+\n+| Channel            | Item Type | Purpose                                             | Values    | \n+| ------------------ | --------- | --------------------------------------------------- | --------- | \n+| power              | Switch    | Powers the projector on or off.                     |           | \n+| source             | String    | Retrieve or set the input source.                   | See above | \n+| picturemode        | String    | Retrieve or set the picture mode.                   | See above | \n+| aspectratio        | String    | Retrieve or set the aspect ratio.                   | See above | \n+| freeze             | Switch    | Turn the freeze image mode on or off.               |           | \n+| blank              | Switch    | Turn the screen blank mode on or off.               |           | \n+| directcmd          | String    | Send a command directly to the projector.           | Send only | \n+| lamptime           | Number    | Retrieves the lamp hours.                           | Read only | \n+\n+## Full Example\n+\n+things/benq.things:\n+\n+```java\n+//serial port connection\n+benqprojector:projector-serial:hometheater \"Projector\" [ serialPort=\"COM5\", pollingInterval=10 ]\n+\n+// serial over IP connection\n+benqprojector:projector-tcp:hometheater \"Projector\"  [ host=\"192.168.0.10\", port=8000, pollingInterval=10 ]\n+\n+```\n+\n+items/benq.items\n+\n+```\n+Switch benqPower                                      { channel=\"benqprojector:projector-serial:hometheater:power\" }\n+String benqSource       \"Source [%s]\"                 { channel=\"benqprojector:projector-serial:hometheater:source\" }\n+String benqPictureMode  \"Picture Mode [%s]\"           { channel=\"benqprojector:projector-serial:hometheater:picturemode\" }\n+String benqAspectRatio  \"Aspect Ratio [%s]\"           { channel=\"benqprojector:projector-serial:hometheater:aspectratio\" }\n+Switch benqFreeze                                     { channel=\"benqprojector:projector-serial:hometheater:freeze\" }\n+Switch benqBlank                                      { channel=\"benqprojector:projector-serial:hometheater:blank\" }\n+String benqDirect                                     { channel=\"benqprojector:projector-serial:hometheater:directcmd\", autoupdate=\"false\" }\n+Number benqLampTime     \"Lamp Time [%d h]\"   <switch> { channel=\"benqprojector:projector-serial:hometheater:lamptime\" }\n+```\n+\n+sitemaps/benq.sitemap\n+\n+```\n+sitemap benq label=\"BenQ Projector Demo\" {\n+    Frame label=\"Controls\" {\n+        Switch     item=benqPower  label=\"Power\"\n+        Selection  item=benqSource label=\"Source\" mappings=[\"hdmi\"=\"HDMI\", \"hdmi2\"=\"HDMI2\", \"ypbr\"=\"Component\", \"RGB\"=\"Computer\", \"vid\"=\"Video\", \"svid\"=\"S-Video\"]\n+        Selection  item=benqPictureMode label=\"Picture Mode\"\n+        Selection  item=benqAspectRatio label=\"Aspect Ratio\"\n+        Switch     item=benqFreeze label=\"Freeze\"\n+        Switch     item=benqBlank  label=\"Blank Screen\"\n+        Selection  item=benqDirect label=\"Direct Command\"\n+        Text       item=benqLampTime\n+    }\n+    Frame label=\"Advanced Controls\" {\n+        Switch     item=benqDirect label=\"Image Flip\"       mappings=[\"pp=FT\"=\"Front\",\"pp=RE\"=\"Rear\",\"pp=FC\"=\"Front Ceiling\",\"pp=RC\"=\"Rear Ceiling\"]\n+        Switch     item=benqDirect label=\"Load Lens Memory\" mappings=[\"lensload=m1\"=\"1\",\"lensload=m2\"=\"2\",\"lensload=m3\"=\"3\",\"lensload=m4\"=\"4\"]\n+        Switch     item=benqDirect label=\"Lamp Mode\"        mappings=[\"lampm=lnor\"=\"Normal\",\"lampm=eco\"=\"Eco\",\"lampm=seco\"=\"SmartEco\"]\n+        Switch     item=benqDirect label=\"Lamp Mode\"        mappings=[\"lampm=seco2\"=\"SmartEco2\",\"lampm=seco3\"=\"SmartEco3\",\"lampm=dimming\"=\"Dimming\",\"lampm=custom\"=\"Custom\"]\n+    }\n+}\n+```"
  },
  {
    "sha": "472c773945d5c8dfeb75982233efbc4b9927a46b",
    "filename": "bundles/org.openhab.binding.benqprojector/pom.xml",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/pom.xml?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.benqprojector</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BenQ Projector Binding</name>\n+\n+</project>"
  },
  {
    "sha": "cc4133c31b19b8c44e5b1780e059a509b1bfc6f5",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/feature/feature.xml",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/feature/feature.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/feature/feature.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/feature/feature.xml?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.benqprojector-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-benqprojector\" description=\"BenQ Projector Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<feature>openhab-transport-serial</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.benqprojector/${project.version}</bundle>\n+\t</feature>\n+</features>"
  },
  {
    "sha": "69b0fe4059e8ecc19a85481a5c25c801f42ae476",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBindingConstants.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBindingConstants.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBindingConstants.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBindingConstants.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link BenqProjectorBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorBindingConstants {\n+\n+    private static final String BINDING_ID = \"benqprojector\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_PROJECTOR_SERIAL = new ThingTypeUID(BINDING_ID, \"projector-serial\");\n+    public static final ThingTypeUID THING_TYPE_PROJECTOR_TCP = new ThingTypeUID(BINDING_ID, \"projector-tcp\");\n+\n+    // Some Channel types\n+    public static final String CHANNEL_TYPE_POWER = \"power\";\n+}"
  },
  {
    "sha": "8078b1008ae38381fcdb1cc1d8a7c1719e83d3fa",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandException.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandException.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandException.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandException.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Exception for BenQ projector command errors.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorCommandException extends Exception {\n+\n+    private static final long serialVersionUID = -8048415193494625295L;\n+\n+    public BenqProjectorCommandException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "f1a67f4152899152cc0b982f4ee5bc11954e8ad8",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandType.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandType.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandType.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorCommandType.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal;\n+\n+import java.io.InvalidClassException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.library.items.NumberItem;\n+import org.openhab.core.library.items.StringItem;\n+import org.openhab.core.library.items.SwitchItem;\n+\n+/**\n+ * Represents all valid command types which could be processed by this\n+ * binding.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BenqProjectorCommandType {\n+    POWER(\"Power\", SwitchItem.class),\n+    SOURCE(\"Source\", StringItem.class),\n+    PICTURE_MODE(\"PictureMode\", StringItem.class),\n+    ASPECT_RATIO(\"AspectRatio\", StringItem.class),\n+    FREEZE(\"Freeze\", SwitchItem.class),\n+    BLANK(\"Blank\", SwitchItem.class),\n+    DIRECTCMD(\"DirectCmd\", StringItem.class),\n+    LAMP_TIME(\"LampTime\", NumberItem.class);\n+\n+    private final String text;\n+    private Class<? extends Item> itemClass;\n+\n+    private BenqProjectorCommandType(final String text, Class<? extends Item> itemClass) {\n+        this.text = text;\n+        this.itemClass = itemClass;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return text;\n+    }\n+\n+    public Class<? extends Item> getItemClass() {\n+        return itemClass;\n+    }\n+\n+    /**\n+     * Procedure to validate command type string.\n+     *\n+     * @param commandTypeText\n+     *            command string e.g. RawData, Command, Brightness\n+     * @return true if item is valid.\n+     * @throws IllegalArgumentException\n+     *             Not valid command type.\n+     * @throws InvalidClassException\n+     *             Not valid class for command type.\n+     */\n+    public static boolean validateBinding(String commandTypeText, Class<? extends Item> itemClass)\n+            throws IllegalArgumentException, InvalidClassException {\n+        for (BenqProjectorCommandType c : BenqProjectorCommandType.values()) {\n+            if (c.text.equalsIgnoreCase(commandTypeText)) {\n+                if (c.getItemClass().equals(itemClass)) {\n+                    return true;\n+                } else {\n+                    throw new InvalidClassException(\"Not valid class for command type\");\n+                }\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Not valid command type\");\n+    }\n+\n+    /**\n+     * Procedure to convert command type string to command type class.\n+     *\n+     * @param commandTypeText\n+     *            command string e.g. RawData, Command, Brightness\n+     * @return corresponding command type.\n+     * @throws InvalidClassException\n+     *             Not valid class for command type.\n+     */\n+    public static BenqProjectorCommandType getCommandType(String commandTypeText) throws IllegalArgumentException {\n+        for (BenqProjectorCommandType c : BenqProjectorCommandType.values()) {\n+            if (c.text.equalsIgnoreCase(commandTypeText)) {\n+                return c;\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Not valid command type\");\n+    }\n+}"
  },
  {
    "sha": "b652b325b45bd0c716255ede476562c6181c7c29",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorDevice.java",
    "status": "added",
    "additions": 221,
    "deletions": 0,
    "changes": 221,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorDevice.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorDevice.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorDevice.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.benqprojector.internal.configuration.BenqProjectorConfiguration;\n+import org.openhab.binding.benqprojector.internal.connector.BenqProjectorConnector;\n+import org.openhab.binding.benqprojector.internal.connector.BenqProjectorSerialConnector;\n+import org.openhab.binding.benqprojector.internal.connector.BenqProjectorTcpConnector;\n+import org.openhab.binding.benqprojector.internal.enums.Switch;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to BenQ projector.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorDevice {\n+    private static final int DEFAULT_TIMEOUT_MS = 5 * 1000;\n+\n+    private static final String UNSUPPORTED_ITM = \"Unsupported item\";\n+    private static final String BLOCK_ITM = \"Block item\";\n+    private static final String ILLEGAL_FMT = \"Illegal format\";\n+\n+    private static final int LAMP_REFRESH_WAIT_MINUTES = 5;\n+\n+    private ExpiringCache<Integer> cachedLampHours = new ExpiringCache<>(Duration.ofMinutes(LAMP_REFRESH_WAIT_MINUTES),\n+            this::queryLamp);\n+\n+    private final Logger logger = LoggerFactory.getLogger(BenqProjectorDevice.class);\n+\n+    private BenqProjectorConnector connection;\n+    private boolean connected = false;\n+\n+    public BenqProjectorDevice(SerialPortManager serialPortManager, BenqProjectorConfiguration config) {\n+        connection = new BenqProjectorSerialConnector(serialPortManager, config.serialPort);\n+    }\n+\n+    public BenqProjectorDevice(BenqProjectorConfiguration config) {\n+        connection = new BenqProjectorTcpConnector(config.host, config.port);\n+    }\n+\n+    private synchronized String sendQuery(String query, int timeout)\n+            throws BenqProjectorCommandException, BenqProjectorException {\n+        logger.debug(\"Query: '{}'\", query);\n+        String response = connection.sendMessage(query, timeout);\n+\n+        if (response.length() == 0) {\n+            throw new BenqProjectorException(\"No response received\");\n+        }\n+\n+        if (response.contains(UNSUPPORTED_ITM)) {\n+            return \"UNSUPPORTED\";\n+        }\n+\n+        if (response.contains(BLOCK_ITM)) {\n+            throw new BenqProjectorCommandException(\"Block Item received for command: \" + query);\n+        }\n+\n+        if (response.contains(ILLEGAL_FMT)) {\n+            throw new BenqProjectorCommandException(\"Illegal Format response received for command: \" + query);\n+        }\n+\n+        logger.debug(\"Response: '{}'\", response);\n+\n+        // example: SOUR=HDMI2\n+        String[] responseParts = response.split(\"=\");\n+        if (responseParts.length != 2) {\n+            throw new BenqProjectorCommandException(\"Invalid respose for command: \" + query);\n+        }\n+\n+        return responseParts[1].toLowerCase();\n+    }\n+\n+    protected void sendCommand(String command, int timeout)\n+            throws BenqProjectorCommandException, BenqProjectorException {\n+        sendQuery(command, timeout);\n+    }\n+\n+    protected void sendCommand(String command) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(command, DEFAULT_TIMEOUT_MS);\n+    }\n+\n+    protected int queryInt(String query) throws BenqProjectorCommandException, BenqProjectorException {\n+        String response = sendQuery(query, DEFAULT_TIMEOUT_MS);\n+        return Integer.parseInt(response);\n+    }\n+\n+    protected String queryString(String query) throws BenqProjectorCommandException, BenqProjectorException {\n+        return sendQuery(query, DEFAULT_TIMEOUT_MS);\n+    }\n+\n+    public void connect() throws BenqProjectorException {\n+        connection.connect();\n+        connected = true;\n+    }\n+\n+    public void disconnect() throws BenqProjectorException {\n+        connection.disconnect();\n+        connected = false;\n+    }\n+\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /*\n+     * Power\n+     */\n+    public Switch getPowerStatus() throws BenqProjectorCommandException, BenqProjectorException {\n+        return (queryString(\"pow=?\").contains(\"on\") ? Switch.ON : Switch.OFF);\n+    }\n+\n+    public void setPower(Switch value) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(value == Switch.ON ? \"pow=on\" : \"pow=off\");\n+    }\n+\n+    /*\n+     * Source\n+     */\n+    public @Nullable String getSource() throws BenqProjectorCommandException, BenqProjectorException {\n+        return queryString(\"sour=?\");\n+    }\n+\n+    public void setSource(String value) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(String.format(\"sour=%s\", value));\n+    }\n+\n+    /*\n+     * Picture Mode\n+     */\n+    public @Nullable String getPictureMode() throws BenqProjectorCommandException, BenqProjectorException {\n+        return queryString(\"appmod=?\");\n+    }\n+\n+    public void setPictureMode(String value) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(String.format(\"appmod=%s\", value));\n+    }\n+\n+    /*\n+     * Aspect Ratio\n+     */\n+    public @Nullable String getAspectRatio() throws BenqProjectorCommandException, BenqProjectorException {\n+        return queryString(\"asp=?\");\n+    }\n+\n+    public void setAspectRatio(String value) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(String.format(\"asp=%s\", value));\n+    }\n+\n+    /*\n+     * Blank Screen\n+     */\n+    public Switch getBlank() throws BenqProjectorCommandException, BenqProjectorException {\n+        return (queryString(\"blank=?\").contains(\"on\") ? Switch.ON : Switch.OFF);\n+    }\n+\n+    public void setBlank(Switch value) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(String.format(\"blank=%s\", (value == Switch.ON ? \"on\" : \"off\")), DEFAULT_TIMEOUT_MS);\n+    }\n+\n+    /*\n+     * Freeze\n+     */\n+    public Switch getFreeze() throws BenqProjectorCommandException, BenqProjectorException {\n+        return (queryString(\"freeze=?\").contains(\"on\") ? Switch.ON : Switch.OFF);\n+    }\n+\n+    public void setFreeze(Switch value) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(String.format(\"freeze=%s\", (value == Switch.ON ? \"on\" : \"off\")), DEFAULT_TIMEOUT_MS);\n+    }\n+\n+    /*\n+     * Direct Command\n+     */\n+    public void sendDirectCommand(String value) throws BenqProjectorCommandException, BenqProjectorException {\n+        sendCommand(value);\n+    }\n+\n+    /*\n+     * Lamp Time (hours) - get from cache\n+     */\n+    public int getLampTime() throws BenqProjectorCommandException, BenqProjectorException {\n+        Integer lampHours = cachedLampHours.getValue();\n+\n+        if (lampHours != null) {\n+            return lampHours.intValue();\n+        } else {\n+            throw new BenqProjectorCommandException(\"cachedLampHours returned null\");\n+        }\n+    }\n+\n+    /*\n+     * Get Lamp Time\n+     */\n+    private @Nullable Integer queryLamp() {\n+        try {\n+            return Integer.valueOf(queryInt(\"ltim=?\"));\n+        } catch (BenqProjectorCommandException | BenqProjectorException e) {\n+            logger.debug(\"Error executing command ltim=?\", e);\n+            return null;\n+        }\n+    }\n+}"
  },
  {
    "sha": "3d75404bdd3da4a6b56941e387ae6683c790dbbc",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorException.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorException.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorException.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorException.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Exception for BenQ projector errors.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorException extends Exception {\n+\n+    private static final long serialVersionUID = -8048415193494625295L;\n+\n+    public BenqProjectorException(String message) {\n+        super(message);\n+    }\n+\n+    public BenqProjectorException(Throwable cause) {\n+        super(cause);\n+    }\n+}"
  },
  {
    "sha": "160c15fa5e5ec61afd47162cdb6a5b3df24fa238",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorHandlerFactory.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorHandlerFactory.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorHandlerFactory.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorHandlerFactory.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal;\n+\n+import static org.openhab.binding.benqprojector.internal.BenqProjectorBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.benqprojector.internal.handler.BenqProjectorHandler;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link BenqProjectorHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.benqprojector\", service = ThingHandlerFactory.class)\n+public class BenqProjectorHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(\n+            Stream.of(THING_TYPE_PROJECTOR_SERIAL, THING_TYPE_PROJECTOR_TCP).collect(Collectors.toSet()));\n+    private final SerialPortManager serialPortManager;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Activate\n+    public BenqProjectorHandlerFactory(final @Reference SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_PROJECTOR_SERIAL.equals(thingTypeUID) || THING_TYPE_PROJECTOR_TCP.equals(thingTypeUID)) {\n+            return new BenqProjectorHandler(thing, serialPortManager);\n+        }\n+\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "e028aef916c424aec72bb674cbbb08512a8fb304",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/configuration/BenqProjectorConfiguration.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/configuration/BenqProjectorConfiguration.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/configuration/BenqProjectorConfiguration.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/configuration/BenqProjectorConfiguration.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal.configuration;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link BenqProjectorConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorConfiguration {\n+\n+    /**\n+     * Serial port used for communication.\n+     */\n+    public String serialPort = \"\";\n+\n+    /**\n+     * Host or IP address used for communication over a TCP link (if serialPort is not set).\n+     */\n+    public String host = \"\";\n+\n+    /**\n+     * Port used for communication over a TCP link (if serialPort is not set).\n+     */\n+    public int port;\n+\n+    /**\n+     * Polling interval to refresh states.\n+     */\n+    public int pollingInterval;\n+}"
  },
  {
    "sha": "6ab86b65a983947fcc0d58a562f74f503517befa",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorConnector.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorConnector.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorConnector.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorConnector.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal.connector;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.benqprojector.internal.BenqProjectorException;\n+\n+/**\n+ * Base class for BenQ projector communication.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface BenqProjectorConnector {\n+\n+    public static final String START = \"\\r*\";\n+    public static final String END = \"#\\r\";\n+    public static final String BLANK = \"\";\n+\n+    /**\n+     * Procedure for connecting to projector.\n+     *\n+     * @throws BenqProjectorException\n+     */\n+    void connect() throws BenqProjectorException;\n+\n+    /**\n+     * Procedure for disconnecting to projector controller.\n+     *\n+     * @throws BenqProjectorException\n+     */\n+    void disconnect() throws BenqProjectorException;\n+\n+    /**\n+     * Procedure for send raw data to projector.\n+     *\n+     * @param data\n+     *            Message to send.\n+     *\n+     * @param timeout\n+     *            timeout to wait response in milliseconds.\n+     *\n+     * @throws BenqProjectorException\n+     */\n+    String sendMessage(String data, int timeout) throws BenqProjectorException;\n+}"
  },
  {
    "sha": "8acf57c38505c208ed72013de57ed65671aaede2",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorSerialConnector.java",
    "status": "added",
    "additions": 206,
    "deletions": 0,
    "changes": 206,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorSerialConnector.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorSerialConnector.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorSerialConnector.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,206 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.benqprojector.internal.BenqProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorSerialConnector implements BenqProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BenqProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public BenqProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws BenqProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException e) {\n+            throw new BenqProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws BenqProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream: {}\", e.getMessage());\n+            }\n+            this.out = null;\n+        }\n+        if (in != null) {\n+            logger.debug(\"Close serial in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial in stream: {}\", e.getMessage());\n+            }\n+            this.in = null;\n+        }\n+        if (serialPort != null) {\n+            logger.debug(\"Close serial port\");\n+            serialPort.close();\n+            serialPort.removeEventListener();\n+            this.serialPort = null;\n+        }\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws BenqProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null && out != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return BLANK;\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once: {}\", e.getMessage());\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new BenqProjectorException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent arg0) {\n+    }\n+\n+    private String sendMmsg(String data, int timeout) throws IOException, BenqProjectorException {\n+        String resp = BLANK;\n+\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in != null && out != null) {\n+            out.write((START + data + END).getBytes(StandardCharsets.US_ASCII));\n+            out.flush();\n+\n+            long startTime = System.currentTimeMillis();\n+            long elapsedTime = 0;\n+\n+            while (elapsedTime < timeout) {\n+                int availableBytes = in.available();\n+                if (availableBytes > 0) {\n+                    byte[] tmpData = new byte[availableBytes];\n+                    int readBytes = in.read(tmpData, 0, availableBytes);\n+                    resp = resp.concat(new String(tmpData, 0, readBytes, StandardCharsets.US_ASCII));\n+                    if (resp.contains(END)) {\n+                        return resp.replaceAll(\"[\\\\r\\\\n*#>]\", BLANK).replace(data, BLANK);\n+                    }\n+                } else {\n+                    try {\n+                        Thread.sleep(100);\n+                    } catch (InterruptedException e) {\n+                        throw new BenqProjectorException(e);\n+                    }\n+                }\n+\n+                elapsedTime = System.currentTimeMillis() - startTime;\n+            }\n+        }\n+\n+        return resp;\n+    }\n+}"
  },
  {
    "sha": "85604598609e5555082488682d7564d455a18d56",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorTcpConnector.java",
    "status": "added",
    "additions": 180,
    "deletions": 0,
    "changes": 180,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorTcpConnector.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorTcpConnector.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/connector/BenqProjectorTcpConnector.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.benqprojector.internal.BenqProjectorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for TCP communication.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorTcpConnector implements BenqProjectorConnector {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BenqProjectorTcpConnector.class);\n+    private final String ip;\n+    private final int port;\n+\n+    private @Nullable Socket socket = null;\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+\n+    public BenqProjectorTcpConnector(String ip, int port) {\n+        this.ip = ip;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void connect() throws BenqProjectorException {\n+        logger.debug(\"Open connection to address'{}:{}'\", ip, port);\n+\n+        try {\n+            Socket socket = new Socket(ip, port);\n+            this.socket = socket;\n+            in = socket.getInputStream();\n+            out = socket.getOutputStream();\n+        } catch (IOException e) {\n+            throw new BenqProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws BenqProjectorException {\n+        OutputStream out = this.out;\n+\n+        if (out != null) {\n+            logger.debug(\"Close tcp out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing tcp out stream: {}\", e.getMessage());\n+            }\n+        }\n+\n+        InputStream in = this.in;\n+        if (in != null) {\n+            logger.debug(\"Close tcp in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing tcp in stream: {}\", e.getMessage());\n+            }\n+        }\n+\n+        Socket socket = this.socket;\n+        if (socket != null) {\n+            logger.debug(\"Closing socket\");\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing tcp socket: {}\", e.getMessage());\n+            }\n+        }\n+\n+        this.socket = null;\n+        this.out = null;\n+        this.in = null;\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws BenqProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return BLANK;\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once: {}\", e.getMessage());\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new BenqProjectorException(e);\n+            }\n+        }\n+    }\n+\n+    private String sendMmsg(String data, int timeout) throws IOException, BenqProjectorException {\n+        String resp = BLANK;\n+\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in != null && out != null) {\n+            out.write((START + data + END).getBytes(StandardCharsets.US_ASCII));\n+            out.flush();\n+\n+            long startTime = System.currentTimeMillis();\n+            long elapsedTime = 0;\n+\n+            while (elapsedTime < timeout) {\n+                int availableBytes = in.available();\n+                if (availableBytes > 0) {\n+                    byte[] tmpData = new byte[availableBytes];\n+                    int readBytes = in.read(tmpData, 0, availableBytes);\n+                    resp = resp.concat(new String(tmpData, 0, readBytes, StandardCharsets.US_ASCII));\n+                    if (resp.contains(END)) {\n+                        return resp.replaceAll(\"[\\\\r\\\\n*#>]\", BLANK).replace(data, BLANK);\n+                    }\n+                } else {\n+                    try {\n+                        Thread.sleep(100);\n+                    } catch (InterruptedException e) {\n+                        throw new BenqProjectorException(e);\n+                    }\n+                }\n+\n+                elapsedTime = System.currentTimeMillis() - startTime;\n+            }\n+        }\n+        return resp;\n+    }\n+}"
  },
  {
    "sha": "04cab831f613b4a72a6e8b05e76fc88472545a9c",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/enums/Switch.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/enums/Switch.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/enums/Switch.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/enums/Switch.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal.enums;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Valid values for BenQ switch commands.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum Switch {\n+    ON,\n+    OFF;\n+}"
  },
  {
    "sha": "63fb9c3c0b897b9607576ff328d1333756c85035",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/handler/BenqProjectorHandler.java",
    "status": "added",
    "additions": 291,
    "deletions": 0,
    "changes": 291,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/handler/BenqProjectorHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/handler/BenqProjectorHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/handler/BenqProjectorHandler.java?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,291 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.benqprojector.internal.handler;\n+\n+import static org.openhab.binding.benqprojector.internal.BenqProjectorBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.benqprojector.internal.BenqProjectorCommandException;\n+import org.openhab.binding.benqprojector.internal.BenqProjectorCommandType;\n+import org.openhab.binding.benqprojector.internal.BenqProjectorDevice;\n+import org.openhab.binding.benqprojector.internal.BenqProjectorException;\n+import org.openhab.binding.benqprojector.internal.configuration.BenqProjectorConfiguration;\n+import org.openhab.binding.benqprojector.internal.enums.Switch;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BenqProjectorHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * Based on 'epsonprojector' originally by Pauli Anttila & Yannick Schaus\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BenqProjectorHandler extends BaseThingHandler {\n+    private static final int DEFAULT_POLLING_INTERVAL_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BenqProjectorHandler.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private Optional<BenqProjectorDevice> device = Optional.empty();\n+\n+    private boolean isPowerOn = false;\n+    private int pollingInterval = DEFAULT_POLLING_INTERVAL_SEC;\n+\n+    public BenqProjectorHandler(Thing thing, SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null && getThing().getStatus() == ThingStatus.ONLINE) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            BenqProjectorCommandType benqCommand = BenqProjectorCommandType.getCommandType(channelId);\n+            sendDataToDevice(benqCommand, command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        BenqProjectorConfiguration config = getConfigAs(BenqProjectorConfiguration.class);\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_PROJECTOR_SERIAL.equals(thingTypeUID)) {\n+            device = Optional.of(new BenqProjectorDevice(serialPortManager, config));\n+        } else if (THING_TYPE_PROJECTOR_TCP.equals(thingTypeUID)) {\n+            device = Optional.of(new BenqProjectorDevice(config));\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        }\n+\n+        pollingInterval = config.pollingInterval;\n+        updateStatus(ThingStatus.UNKNOWN);\n+        schedulePollingJob();\n+    }\n+\n+    /**\n+     * Schedule the polling job\n+     */\n+    private void schedulePollingJob() {\n+        cancelPollingJob();\n+\n+        pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+            List<Channel> channels = this.thing.getChannels();\n+            for (Channel channel : channels) {\n+                // only query power when projector is off\n+                if (isPowerOn || channel.getUID().getId().equals(CHANNEL_TYPE_POWER)) {\n+                    updateChannelState(channel);\n+                }\n+            }\n+        }, 0, (pollingInterval > 0) ? pollingInterval : DEFAULT_POLLING_INTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the polling job\n+     */\n+    private void cancelPollingJob() {\n+        ScheduledFuture<?> pollingJob = this.pollingJob;\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            this.pollingJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelPollingJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID()) && !channel.getUID().getId().equals(CHANNEL_TYPE_POWER)) {\n+                return;\n+            }\n+\n+            BenqProjectorCommandType benqCommand = BenqProjectorCommandType.getCommandType(channel.getUID().getId());\n+\n+            State state = queryDataFromDevice(benqCommand);\n+\n+            if (state != null) {\n+                if (isLinked(channel.getUID())) {\n+                    updateState(channel.getUID(), state);\n+                }\n+                // the first valid response will cause the thing to go ONLINE\n+                if (state != UnDefType.UNDEF) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Unknown channel {}\", channel.getUID().getId());\n+        }\n+    }\n+\n+    @Nullable\n+    private State queryDataFromDevice(BenqProjectorCommandType commandType) {\n+        BenqProjectorDevice remoteController = device.get();\n+\n+        try {\n+            if (!remoteController.isConnected()) {\n+                remoteController.connect();\n+            }\n+\n+            switch (commandType) {\n+                case POWER:\n+                    Switch powerStatus = remoteController.getPowerStatus();\n+                    if (powerStatus == Switch.ON) {\n+                        isPowerOn = true;\n+                        return OnOffType.ON;\n+                    } else {\n+                        isPowerOn = false;\n+                        return OnOffType.OFF;\n+                    }\n+                case SOURCE:\n+                    String source = remoteController.getSource();\n+                    if (source != null) {\n+                        return new StringType(source);\n+                    } else {\n+                        return UnDefType.UNDEF;\n+                    }\n+                case PICTURE_MODE:\n+                    String picturemode = remoteController.getPictureMode();\n+                    if (picturemode != null) {\n+                        return new StringType(picturemode);\n+                    } else {\n+                        return UnDefType.UNDEF;\n+                    }\n+                case ASPECT_RATIO:\n+                    String aspectratio = remoteController.getAspectRatio();\n+                    if (aspectratio != null) {\n+                        return new StringType(aspectratio);\n+                    } else {\n+                        return UnDefType.UNDEF;\n+                    }\n+                case FREEZE:\n+                    Switch freeze = remoteController.getFreeze();\n+                    return freeze == Switch.ON ? OnOffType.ON : OnOffType.OFF;\n+                case BLANK:\n+                    Switch blank = remoteController.getBlank();\n+                    return blank == Switch.ON ? OnOffType.ON : OnOffType.OFF;\n+                case DIRECTCMD:\n+                    break;\n+                case LAMP_TIME:\n+                    int lampTime = remoteController.getLampTime();\n+                    return new DecimalType(lampTime);\n+                default:\n+                    logger.warn(\"Unknown '{}' command!\", commandType);\n+                    return UnDefType.UNDEF;\n+            }\n+        } catch (BenqProjectorCommandException e) {\n+            logger.debug(\"Error executing command '{}', {}\", commandType, e.getMessage());\n+            return UnDefType.UNDEF;\n+        } catch (BenqProjectorException e) {\n+            logger.debug(\"Couldn't execute command '{}', {}\", commandType, e.getMessage());\n+            closeConnection();\n+            return null;\n+        }\n+\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void sendDataToDevice(BenqProjectorCommandType commandType, Command command) {\n+        BenqProjectorDevice remoteController = device.get();\n+\n+        try {\n+            if (!remoteController.isConnected()) {\n+                remoteController.connect();\n+            }\n+\n+            switch (commandType) {\n+                case POWER:\n+                    if (command == OnOffType.ON) {\n+                        remoteController.setPower(Switch.ON);\n+                        isPowerOn = true;\n+                    } else {\n+                        remoteController.setPower(Switch.OFF);\n+                        isPowerOn = false;\n+                    }\n+                    break;\n+                case SOURCE:\n+                    remoteController.setSource(command.toString());\n+                    break;\n+                case PICTURE_MODE:\n+                    remoteController.setPictureMode(command.toString());\n+                    break;\n+                case ASPECT_RATIO:\n+                    remoteController.setAspectRatio(command.toString());\n+                    break;\n+                case FREEZE:\n+                    remoteController.setFreeze(command == OnOffType.ON ? Switch.ON : Switch.OFF);\n+                    break;\n+                case BLANK:\n+                    remoteController.setBlank(command == OnOffType.ON ? Switch.ON : Switch.OFF);\n+                    break;\n+                case DIRECTCMD:\n+                    remoteController.sendDirectCommand(command.toString());\n+                    break;\n+                default:\n+                    logger.warn(\"Unknown '{}' command!\", commandType);\n+                    break;\n+            }\n+        } catch (BenqProjectorCommandException e) {\n+            logger.debug(\"Error executing command '{}', {}\", commandType, e.getMessage());\n+        } catch (BenqProjectorException e) {\n+            logger.warn(\"Couldn't execute command '{}', {}\", commandType, e.getMessage());\n+            closeConnection();\n+        }\n+    }\n+\n+    private void closeConnection() {\n+        BenqProjectorDevice remoteController = device.get();\n+        try {\n+            logger.debug(\"Closing connection to device '{}'\", this.thing.getUID());\n+            remoteController.disconnect();\n+            updateStatus(ThingStatus.OFFLINE);\n+        } catch (BenqProjectorException e) {\n+            logger.debug(\"Error occurred when closing connection to device '{}'\", this.thing.getUID(), e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "d429d87e6d0e2b2b74fdb49f348478ce64b337bc",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/binding/binding.xml",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/binding/binding.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/binding/binding.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/binding/binding.xml?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"benqprojector\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>BenQ Projector Binding</name>\n+\t<description>This binding is compatible with BenQ projectors</description>\n+\n+</binding:binding>"
  },
  {
    "sha": "b39cadc094aa3472cb901ce848e520228a7c4763",
    "filename": "bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/thing/thing-types.xml",
    "status": "added",
    "additions": 173,
    "deletions": 0,
    "changes": 173,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/thing/thing-types.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/thing/thing-types.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.benqprojector/src/main/resources/OH-INF/thing/thing-types.xml?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -0,0 +1,173 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"benqprojector\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"projector-serial\">\n+\t\t<label>BenQ Projector - Serial</label>\n+\t\t<description>A BenQ projector connected via a serial port</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"source\" typeId=\"source\"/>\n+\t\t\t<channel id=\"picturemode\" typeId=\"picturemode\"/>\n+\t\t\t<channel id=\"aspectratio\" typeId=\"aspectratio\"/>\n+\t\t\t<channel id=\"freeze\" typeId=\"freeze\"/>\n+\t\t\t<channel id=\"blank\" typeId=\"blank\"/>\n+\t\t\t<channel id=\"directcmd\" typeId=\"directcmd\"/>\n+\t\t\t<channel id=\"lamptime\" typeId=\"lamptime\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the BenQ Projector</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"5\" max=\"60\" unit=\"s\" required=\"false\">\n+\t\t\t\t<label>Polling interval</label>\n+\t\t\t\t<description>Configures How Often to Poll the Projector for Updates (5-60; Default 10)</description>\n+\t\t\t\t<default>10</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"projector-tcp\">\n+\t\t<label>BenQ Projector - TCP/IP</label>\n+\t\t<description>A BenQ projector connected via the built-in ethernet port or a serial over\n+\t\t\tIP device</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"source\" typeId=\"source\"/>\n+\t\t\t<channel id=\"picturemode\" typeId=\"picturemode\"/>\n+\t\t\t<channel id=\"aspectratio\" typeId=\"aspectratio\"/>\n+\t\t\t<channel id=\"freeze\" typeId=\"freeze\"/>\n+\t\t\t<channel id=\"blank\" typeId=\"blank\"/>\n+\t\t\t<channel id=\"directcmd\" typeId=\"directcmd\"/>\n+\t\t\t<channel id=\"lamptime\" typeId=\"lamptime\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<description>IP address for the projector or serial over IP device</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"true\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Port for the projector or serial over IP device</description>\n+\t\t\t\t<default>8000</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"5\" max=\"60\" unit=\"s\" required=\"false\">\n+\t\t\t\t<label>Polling interval</label>\n+\t\t\t\t<description>Configures How Often to Poll the Projector for Updates (5-60; Default 10)</description>\n+\t\t\t\t<default>10</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"power\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Powers the Projector On or Off</description>\n+\t</channel-type>\n+\t<channel-type id=\"source\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Source</label>\n+\t\t<description>Retrieve or Set the Input Source</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"hdmi\">HDMI</option>\n+\t\t\t\t<option value=\"hdmi2\">HDMI2</option>\n+\t\t\t\t<option value=\"ypbr\">Component</option>\n+\t\t\t\t<option value=\"rgb\">Computer/YPbPr</option>\n+\t\t\t\t<option value=\"rgb2\">Computer/YPbPr2</option>\n+\t\t\t\t<option value=\"vid\">Video</option>\n+\t\t\t\t<option value=\"svid\">S-Video</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"picturemode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Picture Mode</label>\n+\t\t<description>Retrieve or Set the Picture Mode</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"dynamic\">Dynamic</option>\n+\t\t\t\t<option value=\"preset\">Presentation</option>\n+\t\t\t\t<option value=\"srgb\">sRGB</option>\n+\t\t\t\t<option value=\"bright\">Bright</option>\n+\t\t\t\t<option value=\"livingroom\">Living Room</option>\n+\t\t\t\t<option value=\"game\">Game</option>\n+\t\t\t\t<option value=\"cine\">Cinema</option>\n+\t\t\t\t<option value=\"std\">Standard/Vivid</option>\n+\t\t\t\t<option value=\"football\">Football</option>\n+\t\t\t\t<option value=\"footballbt\">Football Bright</option>\n+\t\t\t\t<option value=\"user1\">User 1</option>\n+\t\t\t\t<option value=\"user2\">User 2</option>\n+\t\t\t\t<option value=\"user3\">User 3</option>\n+\t\t\t\t<option value=\"isfday\">ISF Day</option>\n+\t\t\t\t<option value=\"isfnight\">ISF Night</option>\n+\t\t\t\t<option value=\"threed\">3-D</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"aspectratio\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Aspect Ratio</label>\n+\t\t<description>Retrieve or Set the Aspect Ratio</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"4:3\">4:3</option>\n+\t\t\t\t<option value=\"16:9\">16:9</option>\n+\t\t\t\t<option value=\"auto\">Auto</option>\n+\t\t\t\t<option value=\"lbox\">Letterbox</option>\n+\t\t\t\t<option value=\"wide\">Wide</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"freeze\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Freeze Image</label>\n+\t\t<description>Turn the Freeze Image Mode On or Off</description>\n+\t</channel-type>\n+\t<channel-type id=\"blank\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Screen Blank</label>\n+\t\t<description>Turn the Screen Blank On or Off</description>\n+\t</channel-type>\n+\t<channel-type id=\"directcmd\" advanced=\"true\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Direct Command</label>\n+\t\t<description>Send a Command Directly to the Projector</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"mute=on\">Mute On</option>\n+\t\t\t\t<option value=\"mute=off\">Mute Off</option>\n+\t\t\t\t<option value=\"vol=+\">Volume +</option>\n+\t\t\t\t<option value=\"vol=-\">Volume -</option>\n+\t\t\t\t<option value=\"zoomI\">Zoom In</option>\n+\t\t\t\t<option value=\"zoomO\">Zoom Out</option>\n+\t\t\t\t<option value=\"auto\">Zoom Auto</option>\n+\t\t\t\t<option value=\"menu=on\">Menu On</option>\n+\t\t\t\t<option value=\"menu=off\">Menu Off</option>\n+\t\t\t\t<option value=\"up\">Up</option>\n+\t\t\t\t<option value=\"down\">Down</option>\n+\t\t\t\t<option value=\"left\">Left</option>\n+\t\t\t\t<option value=\"right\">Right</option>\n+\t\t\t\t<option value=\"enter\">Enter</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"lamptime\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Lamp Time</label>\n+\t\t<description>Retrieves the Lamp Hours</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d h\"/>\n+\t</channel-type>\n+\n+</thing:thing-descriptions>"
  },
  {
    "sha": "10bcaa12871a0ea2045d2891446847818506b69b",
    "filename": "bundles/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/ee3361e0e61ceb39a89d16c65438fb1435efb189/bundles/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/pom.xml?ref=ee3361e0e61ceb39a89d16c65438fb1435efb189",
    "patch": "@@ -53,6 +53,7 @@\n     <module>org.openhab.binding.autelis</module>\n     <module>org.openhab.binding.automower</module>\n     <module>org.openhab.binding.avmfritz</module>\n+    <module>org.openhab.binding.benqprojector</module>\n     <module>org.openhab.binding.bigassfan</module>\n     <module>org.openhab.binding.bluetooth</module>\n     <module>org.openhab.binding.bluetooth.airthings</module>"
  }
]
