[
  {
    "sha": "3e41eb1b307046f10b9d38f476f5e84287b152ee",
    "filename": "CODEOWNERS",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/CODEOWNERS",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/CODEOWNERS",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/CODEOWNERS?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -258,6 +258,7 @@\n /bundles/org.openhab.binding.tacmi/ @twendt @Wolfgang1966 @marvkis\n /bundles/org.openhab.binding.tado/ @dfrommi\n /bundles/org.openhab.binding.tankerkoenig/ @dolic @JueBag\n+/bundles/org.openhab.binding.tapocontrol/ @wildcs\n /bundles/org.openhab.binding.telegram/ @ZzetT\n /bundles/org.openhab.binding.teleinfo/ @Nokyyz\n /bundles/org.openhab.binding.tellstick/ @openhab/add-ons-maintainers"
  },
  {
    "sha": "6c717deab167beed9cf86290dfb254288a4363ce",
    "filename": "bom/openhab-addons/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bom/openhab-addons/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bom/openhab-addons/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bom/openhab-addons/pom.xml?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -1276,6 +1276,11 @@\n       <artifactId>org.openhab.binding.tankerkoenig</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.tapocontrol</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.openhab.addons.bundles</groupId>\n       <artifactId>org.openhab.binding.telegram</artifactId>"
  },
  {
    "sha": "38d625e349232ff5ffcc71bd75e4692cdac12768",
    "filename": "bundles/org.openhab.binding.tapocontrol/NOTICE",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/NOTICE",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/NOTICE",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/NOTICE?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,13 @@\n+This content is produced and maintained by the openHAB project.\n+\n+* Project home: https://www.openhab.org\n+\n+== Declared Project Licenses\n+\n+This program and the accompanying materials are made available under the terms\n+of the Eclipse Public License 2.0 which is available at\n+https://www.eclipse.org/legal/epl-2.0/.\n+\n+== Source Code\n+\n+https://github.com/openhab/openhab-addons"
  },
  {
    "sha": "98d1e2ff51029081b22ea59f7fdb3eea6f88d604",
    "filename": "bundles/org.openhab.binding.tapocontrol/README.md",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/README.md",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/README.md",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/README.md?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,83 @@\n+# TapoControl Binding\n+\n+This binding adds support to control Tapo (Copyright Â© TP-Link Corporation Limited) Smart Home Devices from your local openHAB system.\n+(Note: This is not an official Tapo/TP-link Binding!)\n+\n+## Supported Things\n+\n+The following Tapo-Devices are supported\n+\n+### P100 SmartPlug (WiFi)\n+\n+* Power On/Off\n+* Wi-Fi signal (SignalStrenght)\n+* On-Time (Time in seconds device is switched on)\n+\n+## Prerequisites\n+\n+Before using Smart Plugs with openHAB the devices must be connected to the Wi-Fi network.\n+This can be done using the Tapo provided mobile app.\n+\n+## Discovery\n+\n+Discovery is not supported at the moment. You need to know the IP-Adress of your device\n+\n+## Binding Configuration\n+\n+Binding needs your Tapo eMail and password to connect to the Tapo-Cloud.\n+This is only used to create the handshake (cookie) to act with your devices.\n+\n+To enter your cloud details go to the bindings page, click the TapoControl binding and than configure.\n+![Binding Config](doc/bindingConfig1.png)\n+\n+In the configuration page, enter your eMail and password.\n+![Binding Config](doc/bindingConfig2.png)\n+\n+\n+## Thing Configuration\n+\n+The thing can be only configured by `ipAddress` at the moment.\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter          | Description                                                          |\n+|--------------------|----------------------------------------------------------------------|\n+| ipAddress          | IP Address of the device.                                            |\n+| pollingInterval    | Refresh interval in seconds. Optional. The default is 30 seconds     |\n+\n+\n+## Channels\n+\n+All devices support some of the following channels:\n+\n+| channel     | type         | description                  | things supporting this channel  |\n+|-------------|--------------|------------------------------|---------------------------------|\n+| output      | Switch       | Power device on or off       | P100                            |\n+| wifiSignal  | QualityStats | WiFi-quality-level           | P100                            |\n+| onTime      | Number       | seconds output is on         | P100                            |\n+\n+\n+## Channel Refresh\n+\n+When the thing receives a `RefreshType` command the thing will send a new refreshComand.\n+\n+\n+## Full Example\n+\n+### tapocontrol.things:\n+\n+```\n+tapocontrol:P100:mySocket      \"My-Socket\"                 [ ipAddress=\"192.168.178.150\", pollingInterval=30 ]\n+``` \n+\n+### tapocontrol.items:\n+\n+```\n+Switch       TAPO_SOCKET      \"socket\"                { channel=\"tapocontrol:P100:socket:mySocket:output\" }\n+``` \n+\n+\n+## NOTES!\n+\n+This is not an official Tapo or TP-link product. \n+There's no warranty and no assumption of liability."
  },
  {
    "sha": "1fc25d3cb64fe88f5766ec547a9c2c243116d320",
    "filename": "bundles/org.openhab.binding.tapocontrol/doc/bindingConfig1.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/doc/bindingConfig1.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/doc/bindingConfig1.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/doc/bindingConfig1.png?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9"
  },
  {
    "sha": "7f68879f349b3bfb2a4a4af60f518547cea62093",
    "filename": "bundles/org.openhab.binding.tapocontrol/doc/bindingConfig2.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/doc/bindingConfig2.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/doc/bindingConfig2.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/doc/bindingConfig2.png?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9"
  },
  {
    "sha": "9b1afb7a42a30e8004d180daf7839a1704a66acf",
    "filename": "bundles/org.openhab.binding.tapocontrol/pom.xml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/pom.xml?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"  standalone=\"no\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.tapocontrol</artifactId>\n+  <name>openHAB Add-ons :: Bundles :: TapoControl Binding</name>\n+</project>"
  },
  {
    "sha": "5cc25ab0614fe669e7817c8346763767c997f2ff",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/feature/feature.xml",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/feature/feature.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/feature/feature.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/feature/feature.xml?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.tapocontrol-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-tapocontrol\" description=\"TapoControl Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.tapocontrol/${project.version}</bundle>\n+\t</feature>\n+</features>"
  },
  {
    "sha": "d27015d2c28df4643a7e18a7e6c0838088966099",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlBindingConstants.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlBindingConstants.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlBindingConstants.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlBindingConstants.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link TapoControlBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoControlBindingConstants {\n+    public static final String BINDING_ID = \"tapocontrol\";\n+\n+    // Lisst of all constant configurations\n+    public static final String HTTP_HEADER_AUTH = \"Authorization\";\n+    public static final String HTTP_AUTH_TYPE_BASIC = \"Basic\";\n+    public static final String HTTP_AUTH_TYPE_COOKIE = \"cookie\";\n+    public static final String CONTENT_CHARSET = \"utf-8\";\n+    public static final String CONTENT_TYPE_JSON = \"application/json\";\n+    public static final String TAPO_CLOUD_URL = \"https://eu-wap.tplinkcloud.com\";\n+    public static final String TAPO_TERMINAL_UUID = \"0A950402-7224-46EB-A450-7362CDB902A2\";\n+    public static final String TAPO_DEVICE_URL = \"http://%s/app\";\n+    public static final Integer TAPO_HTTP_TIMEOUT_MS = 5000;\n+    public static final Integer TAPO_PING_TIMEOUT_MS = 500;\n+\n+    // LIST OF SUPPORTED DEVICE NAMES\n+    public static final String DEVICE_P100 = \"P100\";\n+    public static final String DEVICE_L530E = \"L530E\";\n+\n+    // LIST OF SUPPORTED THING UIDS\n+    public static final ThingTypeUID P100_THING_TYPE = new ThingTypeUID(BINDING_ID, DEVICE_P100);\n+    public static final ThingTypeUID L530E_THING_TYPE = new ThingTypeUID(BINDING_ID, DEVICE_L530E);\n+\n+    // SET OF SUPPORTED UIDS\n+    public static final Set<ThingTypeUID> SUPPORTED_SMART_PLUG_UIDS = Set.of(P100_THING_TYPE);\n+    public static final Set<ThingTypeUID> SUPPORTED_SMART_BULB_UIDS = Set.of(L530E_THING_TYPE);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(SUPPORTED_SMART_PLUG_UIDS, SUPPORTED_SMART_BULB_UIDS).flatMap(Set::stream).collect(Collectors.toSet()));\n+\n+    // THINGS WITH CHANNEL GROUPS\n+    public static final Set<ThingTypeUID> CHANNEL_GROUP_THING_SET = Set.of(P100_THING_TYPE);\n+    // CHANNEL LIST\n+    public static final String CHANNEL_GROUP_ACTUATOR = \"actuator\";\n+    public static final String CHANNEL_SWITCH = \"switch\";\n+    public static final String CHANNEL_OUTPUT = \"output\";\n+    public static final String CHANNEL_GROUP_DEVICE = \"device\";\n+    public static final String CHANNEL_OVERHEAT = \"overheated\";\n+    public static final String CHANNEL_ONTIME = \"onTime\";\n+    public static final String CHANNEL_WIFI_STRENGTH = \"wifiSignal\";\n+\n+    // THING CONFIGUTATION PROPERTYS\n+    public static final String CONFIG_EMAIL = \"eMail\";\n+    public static final String CONFIG_PASS = \"password\";\n+    public static final String CONFIG_DEVICE_IP = \"ipAddress\";\n+    public static final String CONFIG_UPDATE_INTERVAL = \"pollingInterval\";\n+\n+    // LIST OF PROPERTY NAMES\n+    public static final String PROPERTY_WIFI_LEVEL = \"signal-strength\";\n+    public static final String PROPERTY_LOCATION = \"location\";\n+}"
  },
  {
    "sha": "3b037bd4fc1781ba024eaa3af3a83d40d33f8c0c",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlConfiguration.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlConfiguration.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlConfiguration.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlConfiguration.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link TapoControlConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public final class TapoControlConfiguration {\n+    /**\n+     * thing configuration parameter.\n+     */\n+    public String ipAddress = \"\";\n+    public Integer pollingInterval = 30;\n+}"
  },
  {
    "sha": "4d5dd157039393b2e4c24359887dba9636d4b25f",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlHandlerFactory.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlHandlerFactory.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlHandlerFactory.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/TapoControlHandlerFactory.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal;\n+\n+import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.tapocontrol.internal.device.TapoSmartPlug;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoCredentials;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link TapoControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.tapocontrol\")\n+@NonNullByDefault\n+public class TapoControlHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(TapoControlHandlerFactory.class);\n+    private TapoCredentials credentials;\n+\n+    @Activate // @Reference TapoCredentials credentials,\n+    public TapoControlHandlerFactory(Map<String, Object> properties) {\n+        this.credentials = new TapoCredentials();\n+        @Nullable\n+        String username = (String) properties.get(\"username\");\n+        @Nullable\n+        String password = (String) properties.get(\"password\");\n+\n+        if (username != null && password != null) {\n+            credentials.setCredectials(username, password);\n+        }\n+    }\n+\n+    /**\n+     * Provides the supported thing types\n+     */\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    /**\n+     * Create handler of things.\n+     */\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (SUPPORTED_SMART_PLUG_UIDS.contains(thingTypeUID)) {\n+            logger.trace(\"returns new TapoSmartPlug()\");\n+            return new TapoSmartPlug(thing, credentials);\n+        } else {\n+            logger.error(\"ThingHandler not found for {}\", thingTypeUID);\n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "4d9dc0b36437830daa14d924a0f49ff75877c227",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoCloudApi.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoCloudApi.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoCloudApi.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoCloudApi.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,111 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.api;\n+\n+//import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler class for TAPO Smart Home device cloud-connections.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoCloudApi {\n+    public static final String HTTP_HEADER_AUTH = \"Authorization\";\n+    public static final String HTTP_AUTH_TYPE_BASIC = \"Basic\";\n+    public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(TapoCloudApi.class);\n+    private final HttpClient httpClient;\n+\n+    /**\n+     * INIT CLASS\n+     * \n+     */\n+    public TapoCloudApi() {\n+        this.httpClient = new HttpClient();\n+    }\n+\n+    /**\n+     * Initializes a connection to the given url.\n+     *\n+     * @param ipAddress ip address of the connection\n+     * @return ResponseContent of HTTP Request\n+     */\n+    /*\n+     * private ContentResponse QueryCloud(String url, String payload) {\n+     * logger.trace(\"query tapo cloud '{}'\", url);\n+     * \n+     * Request request = httpClient.POST(url);\n+     * request.header(HttpHeader.ACCEPT, CONTENT_TYPE_JSON);\n+     * request.header(HttpHeader.CONTENT_TYPE, CONTENT_TYPE_JSON);\n+     * request.content(new StringContentProvider(payload), CONTENT_TYPE_JSON);\n+     * \n+     * ContentResponse response = request.send();\n+     * String res = new String(response.getContent());\n+     * \n+     * logger.trace(\"{}: HTTP Response {}: {}\", \"TAPO_CLOUD_CONNECT\", response.getStatus(), res);\n+     * \n+     * httpClient.stop();\n+     * \n+     * return res;\n+     * \n+     * return null;\n+     * }\n+     */\n+\n+    /**\n+     * Query token from tapo-cloud\n+     *\n+     * @param ipAddress ip address of the connection\n+     */\n+    /*\n+     * private getToken( email, password, terminalUUID ){\n+     * String url = TAPO_CLOUD_URL;\n+     * String payload = {\n+     * \"method\": \"login\",\n+     * \"params\": {\n+     * \"appType\": \"Tapo_Ios\",\n+     * \"cloudUserName\": email,\n+     * \"cloudPassword\": password,\n+     * \"terminalUUID\": terminalUUID\n+     * };\n+     * \n+     * String json = QueryCloud( url, payload );\n+     * String token = ['result']['token'];\n+     * return token;\n+     * }\n+     */\n+    /**\n+     * Query types from tapo-cloud\n+     *\n+     * @param ipAddress ip address of the connection\n+     */\n+    /*\n+     * public GetDevices(){\n+     * \n+     * String url = TAPO_CLOUD_URL + \"?token=\" + getToken( CONFIG_EMAIL, CONFIG_PASS );\n+     * String payload ={\n+     * \"method\": \"getDeviceList\",\n+     * };\n+     * \n+     * String json = QueryCloud( url, payload );\n+     * return json;\n+     * }\n+     */\n+}"
  },
  {
    "sha": "dcddff6dda54092da2778df62caf7cdf22b651f1",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoConnector.java",
    "status": "added",
    "additions": 552,
    "deletions": 0,
    "changes": 552,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoConnector.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoConnector.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoConnector.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,552 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.api;\n+\n+import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+import static org.openhab.binding.tapocontrol.internal.helpers.TapoErrorConstants.*;\n+\n+import java.net.InetAddress;\n+import java.security.*;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.tapocontrol.internal.device.TapoDeviceInfo;\n+import org.openhab.binding.tapocontrol.internal.helpers.MimeEncode;\n+import org.openhab.binding.tapocontrol.internal.helpers.PayloadBuilder;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoCipher;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoCredentials;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoErrorHandler;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoHttpResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * Handler class for TAPO Connection\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoConnector {\n+    private final Logger logger = LoggerFactory.getLogger(TapoConnector.class);\n+    private final TapoErrorHandler tapoError = new TapoErrorHandler();\n+    private TapoHttp tapoHttp;\n+    private Gson gson;\n+    private TapoCredentials credentials;\n+    private TapoCipher tapoCipher;\n+    private String ipAddress = \"\";\n+    private String token = \"\";\n+    private String cookie = \"\";\n+    private String deviceURL = \"\";\n+    private Integer errorCode = 0;\n+\n+    /**\n+     * INIT CLASS\n+     *\n+     * @param config TapoControlConfiguration class\n+     */\n+    public TapoConnector(String ipAddress, TapoCredentials credentials) {\n+        this.credentials = credentials;\n+        this.tapoCipher = new TapoCipher();\n+        this.gson = new Gson();\n+        this.tapoHttp = new TapoHttp();\n+        setIpAddress(ipAddress);\n+    }\n+\n+    /***********************************\n+     *\n+     * ENCRYPTION / CODING\n+     *\n+     ************************************/\n+\n+    /**\n+     * Create Handshake and set cookie\n+     *\n+     * @return true if handshake (cookie) was created\n+     */\n+    private Boolean createHandshake() {\n+        this.tapoHttp = new TapoHttp();\n+        String encryptedKey = \"\";\n+\n+        /* create payload for handshake */\n+        PayloadBuilder plBuilder = new PayloadBuilder();\n+        plBuilder.method = \"handshake\";\n+        plBuilder.addParameter(\"key\", credentials.getPublicKey()); // ?.decode(\"UTF-8\")\n+        String payload = plBuilder.getPayload();\n+\n+        /* send request (perform login) */\n+        logger.debug(\"create handhsake with payload: {}\", payload.toString());\n+        tapoHttp.url = deviceURL;\n+        tapoHttp.setRequest(payload);\n+\n+        try {\n+            TapoHttpResponse response = tapoHttp.send();\n+\n+            String rBody = response.getResponseBody();\n+            JsonObject jsonObj = gson.fromJson(rBody, JsonObject.class);\n+            try {\n+                encryptedKey = jsonObj.getAsJsonObject(\"result\").get(\"key\").getAsString();\n+            } catch (Exception e) {\n+                // TODO: handle exception\n+            }\n+\n+            setCipher(encryptedKey);\n+            this.cookie = response.getResponseHeader(\"Set-Cookie\").split(\";\")[0];\n+            return true;\n+        } catch (Exception ex) {\n+            logger.warn(\"Something went wrong: {}\", ex.getMessage());\n+            tapoError.raiseError(ex, \"could not create handshake\");\n+            this.cookie = \"\";\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Create Cipher ( Decode Handshake )\n+     *\n+     * @param key encrypted key\n+     * @return true if success\n+     */\n+    private Boolean setCipher(String key) {\n+        logger.debug(\"Will try to decode the following key: {} \", key);\n+\n+        MimeEncode mimeEncode = new MimeEncode();\n+\n+        try {\n+            byte[] decode = mimeEncode.decode(key.getBytes(\"UTF-8\"));\n+            byte[] decode2 = mimeEncode.decode(credentials.getPrivateKeyBytes());\n+            Cipher instance = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n+            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n+            PrivateKey p = kf.generatePrivate(new PKCS8EncodedKeySpec(decode2));\n+            instance.init(Cipher.DECRYPT_MODE, p);\n+            byte[] doFinal = instance.doFinal(decode);\n+            byte[] bArr = new byte[16];\n+            byte[] bArr2 = new byte[16];\n+            System.arraycopy(doFinal, 0, bArr, 0, 16);\n+            System.arraycopy(doFinal, 16, bArr2, 0, 16);\n+            this.tapoCipher = new TapoCipher(bArr, bArr2);\n+            return true;\n+        } catch (Exception ex) {\n+            logger.warn(\"Something went wrong: {}\", ex.getMessage());\n+            tapoError.raiseError(ex);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Decrypt Response\n+     * \n+     * @param responseBody encrypted string from response-body\n+     * @return String decrypted responseBody\n+     */\n+    private String decryptResponse(String responseBody) {\n+        try {\n+            JsonObject jsonObject = gson.fromJson(responseBody, JsonObject.class);\n+            String encryptedResponse = jsonObject.getAsJsonObject(\"result\").get(\"response\").getAsString();\n+            String decryptedResponse = tapoCipher.decode(encryptedResponse);\n+            return decryptedResponse;\n+        } catch (Exception ex) {\n+            return \"\";\n+        }\n+    }\n+\n+    /***********************************\n+     *\n+     * HTTP ACTIONS\n+     *\n+     ************************************/\n+\n+    /**\n+     * login\n+     *\n+     * @return true if success\n+     */\n+    public boolean login() {\n+        logger.debug(\"sending login\");\n+\n+        String securePassthroughPayload = \"\";\n+        tapoError.reset(); // reset ErrorHandler\n+\n+        /* ping device */\n+        if (!pingDevice()) {\n+            tapoError.raiseError(ERROR_DEVICE_OFFLINE, \"device offline while login\");\n+            logout();\n+            return false;\n+        }\n+\n+        /* create handschake (cookie) */\n+        this.createHandshake();\n+\n+        if (cookie != \"\") {\n+            try {\n+                /* encrypt login credentials */\n+                PayloadBuilder plBuilder = new PayloadBuilder();\n+                plBuilder.method = \"login_device\";\n+                plBuilder.addParameter(\"username\", this.credentials.getEncodedEmail());\n+                plBuilder.addParameter(\"password\", this.credentials.getEncodedPassword());\n+                String payload = plBuilder.getPayload();\n+                String encryptedPayload = tapoCipher.encode(payload);\n+\n+                /* create secured login informations */\n+                plBuilder = new PayloadBuilder();\n+                plBuilder.method = \"securePassthrough\";\n+                plBuilder.addParameter(\"request\", encryptedPayload);\n+                securePassthroughPayload = plBuilder.getPayload();\n+            } catch (Exception ex) {\n+                logger.debug(\"error building payload '{}'\", ex.toString());\n+                tapoError.raiseError(ex, \"error building payload for login request\");\n+                return false;\n+            }\n+\n+            /* send request (perform login) */\n+            tapoHttp.url = deviceURL;\n+            tapoHttp.cookie = this.cookie;\n+            tapoHttp.request = securePassthroughPayload;\n+            TapoHttpResponse response = tapoHttp.send();\n+\n+            /* work with response */\n+            if (response.responseIsOK()) {\n+                String rBody = response.getResponseBody();\n+                String decryptedResponse = this.decryptResponse(rBody);\n+                JsonObject jsonObject = gson.fromJson(decryptedResponse, JsonObject.class);\n+                try {\n+                    this.token = jsonObject.getAsJsonObject(\"result\").get(\"token\").getAsString();\n+                } catch (Exception e) {\n+                    this.errorCode = Integer\n+                            .parseInt(jsonObject.getAsJsonObject(\"result\").get(\"error_code\").getAsString());\n+                    logger.trace(\"enexpected json-response '{}'\", decryptedResponse);\n+                    tapoError.raiseError(errorCode, \"could not get token\");\n+                }\n+            } else {\n+                logger.warn(\"invalid response while login\");\n+                tapoError.raiseError(ERROR_RESPONSE, \"invalid response while login\");\n+                this.token = \"\";\n+            }\n+        } else {\n+            logger.debug(\"cookie not set while login\");\n+            tapoError.raiseError(ERROR_COOKIE, \"cookie not set while login\");\n+            this.token = \"\";\n+        }\n+        return this.loggedIn();\n+    }\n+\n+    /**\n+     * sendPayload\n+     *\n+     * @param PayloadBuilder payload\n+     * @return JsonObject with response\n+     */\n+    @Nullable\n+    protected JsonObject sendPayload(PayloadBuilder plBuilder) {\n+        String payload = plBuilder.getPayload();\n+        logger.trace(\"sending payload '{}'\", payload);\n+        tapoError.reset(); // reset ErrorHandler\n+\n+        String securePassthroughPayload = \"\";\n+        String url = deviceURL + \"?token=\" + this.token;\n+\n+        if (checkConnection(true)) {\n+            try {\n+                /* encrypt command payload */\n+                String encryptedPayload = this.tapoCipher.encode(payload);\n+\n+                /* create secured payload */\n+                plBuilder = new PayloadBuilder();\n+                plBuilder.method = \"securePassthrough\";\n+                plBuilder.addParameter(\"request\", encryptedPayload);\n+                securePassthroughPayload = plBuilder.getPayload();\n+            } catch (Exception ex) {\n+                logger.debug(\"error building payload '{}'\", ex.toString());\n+                tapoError.raiseError(ex, \"error building payload for send command\");\n+                return tapoError.getJson();\n+            }\n+\n+            /* send request */\n+            tapoHttp.url = url;\n+            tapoHttp.cookie = this.cookie;\n+            tapoHttp.request = securePassthroughPayload;\n+            TapoHttpResponse response = tapoHttp.send();\n+\n+            /* work with response */\n+            if (response.responseIsOK()) {\n+                String rBody = response.getResponseBody();\n+                try {\n+                    JsonObject jsonObject = gson.fromJson(rBody, JsonObject.class);\n+                    /* decrypt response */\n+                    String decryptedResponse = decryptResponse(rBody);\n+                    jsonObject = gson.fromJson(decryptedResponse, JsonObject.class);\n+                    /* get errocode (0=success) */\n+                    Integer errorCode = jsonObject.get(\"error_code\").getAsInt();\n+                    if (errorCode == 0) {\n+                        /* return result if set / else request was successfull */\n+                        if (jsonObject.has(\"result\")) {\n+                            return jsonObject.getAsJsonObject(\"result\");\n+                        } else {\n+                            return gson.fromJson(\"{ 'success': true }\", JsonObject.class);\n+                        }\n+                    } else {\n+                        /* return errorcode from device */\n+                        tapoError.raiseError(errorCode, \"device answers with errorcode\");\n+                        return jsonObject;\n+                    }\n+                } catch (Exception e) {\n+                    tapoError.raiseError(e);\n+                }\n+            } else {\n+                tapoError.raiseError(ERROR_RESPONSE);\n+            }\n+        }\n+        return tapoError.getJson();\n+    }\n+\n+    /**\n+     * set Device Info\n+     *\n+     * @param name Name of command to send\n+     * @param value Value to send to control\n+     * @return true if sent successfull ( no error returned )\n+     */\n+    public Boolean setDeviceInfo(String name, String value) {\n+        logger.debug(\"building command '{}' '{}'\", name, value);\n+\n+        /* encrypt command payload */\n+        PayloadBuilder plBuilder = new PayloadBuilder();\n+        plBuilder.method = \"set_device_info\";\n+        plBuilder.addParameter(name, value);\n+        return sendPayload(plBuilder).has(\"success\");\n+    }\n+\n+    /**\n+     * set Device Info\n+     *\n+     * @param name Name of command to send\n+     * @param value Value to send to control\n+     * @return true if sent successfull ( no error returned )\n+     */\n+    public Boolean setDeviceInfo(String name, Boolean value) {\n+        /* encrypt command payload */\n+        PayloadBuilder plBuilder = new PayloadBuilder();\n+        plBuilder.method = \"set_device_info\";\n+        plBuilder.addParameter(name, value);\n+        return sendPayload(plBuilder).has(\"success\");\n+    }\n+\n+    /**\n+     * set Device Info\n+     *\n+     * @param name Name of command to send\n+     * @param value Value to send to control\n+     * @return true if sent successfull ( no error returned )\n+     */\n+    public Boolean setDeviceInfo(String name, Integer value) {\n+        /* encrypt command payload */\n+        PayloadBuilder plBuilder = new PayloadBuilder();\n+        plBuilder.method = \"set_device_info\";\n+        plBuilder.addParameter(name, value);\n+        return sendPayload(plBuilder).has(\"success\");\n+    }\n+\n+    /**\n+     * Query Info from Device\n+     *\n+     * @return tapo device info object\n+     */\n+    public TapoDeviceInfo queryInfo() {\n+        /* encrypt command payload */\n+        PayloadBuilder plBuilder = new PayloadBuilder();\n+        plBuilder.method = \"get_device_info\";\n+        JsonObject result = sendPayload(plBuilder);\n+\n+        if (result.has(\"device_id\")) {\n+            return new TapoDeviceInfo(result);\n+        } else {\n+            return new TapoDeviceInfo();\n+        }\n+    }\n+\n+    /**\n+     * CHECK CONNECTION AND LOGIN\n+     * \n+     * @param raiseError raises tapoError if true\n+     * @return true if okay\n+     */\n+    protected Boolean checkConnection(Boolean raiseError) {\n+        if (!pingDevice()) {\n+            logger.trace(\"device is offline\");\n+            if (raiseError) {\n+                tapoError.raiseError(ERROR_DEVICE_OFFLINE);\n+            }\n+            return false;\n+        }\n+        if (!loggedIn()) {\n+            logger.trace(\"not logged-in\");\n+            if (raiseError) {\n+                tapoError.raiseError(ERROR_LOGIN);\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * perform logout (dispose cookie)\n+     */\n+    public void logout() {\n+        this.token = \"\";\n+        this.cookie = \"\";\n+    }\n+\n+    /***********************************\n+     *\n+     * SET VALUES\n+     *\n+     ************************************/\n+\n+    /**\n+     * Set new ipAddress\n+     * \n+     * @param new ipAdress\n+     */\n+    public void setIpAddress(String ipAddress) {\n+        this.ipAddress = ipAddress;\n+        this.deviceURL = String.format(TAPO_DEVICE_URL, ipAddress);\n+    }\n+\n+    /***********************************\n+     *\n+     * GET RESULTS\n+     *\n+     ************************************/\n+    /**\n+     * Logged In\n+     * \n+     * @return true if logged in\n+     */\n+    public Boolean loggedIn() {\n+        if (isOnline()) {\n+            return this.token != \"\";\n+        } else {\n+            logout();\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Logged In\n+     * \n+     * @param raiseError if true\n+     * @return true if logged in\n+     */\n+    public Boolean loggedIn(Boolean raiseError) {\n+        if (loggedIn()) {\n+            return true;\n+        } else {\n+            if (raiseError) {\n+                tapoError.raiseError(ERROR_LOGIN);\n+            }\n+            logout();\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Check if device is online\n+     * \n+     * @return true if device is online\n+     */\n+    public Boolean isOnline() {\n+        return pingDevice();\n+    }\n+\n+    /**\n+     * Check if device is online\n+     * \n+     * @param raiseError if true\n+     * @return true if device is online\n+     */\n+    public Boolean isOnline(Boolean raiseError) {\n+        if (pingDevice()) {\n+            return true;\n+        } else {\n+            if (raiseError) {\n+                tapoError.raiseError(ERROR_DEVICE_OFFLINE);\n+            }\n+            logout();\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * ErrorCode\n+     * \n+     * @return true if has error\n+     */\n+    public Boolean hasError() {\n+        return tapoError.getNumber() != 0;\n+    }\n+\n+    /**\n+     * ErrorCode\n+     * \n+     * @return ErrorCode returned by device\n+     */\n+    public Integer errorCode() {\n+        return tapoError.getNumber();\n+    }\n+\n+    /**\n+     * ErrorMessage\n+     * \n+     * @return String Error text\n+     */\n+    public String errorMessage() {\n+        return tapoError.getMessage();\n+    }\n+\n+    /**\n+     * SendSuccess\n+     * \n+     * @return true if command was sent successfull\n+     */\n+    public Boolean commandSuccess() {\n+        return tapoError.getNumber() == 0;\n+    }\n+\n+    /**\n+     * IP-Adress\n+     * \n+     * @return String ipAdress\n+     */\n+    public String getIP() {\n+        return this.ipAddress;\n+    }\n+\n+    /**\n+     * PING IP Adress\n+     * \n+     * @return true if ping successfull\n+     */\n+    public Boolean pingDevice() {\n+        try {\n+            InetAddress address = InetAddress.getByName(this.ipAddress);\n+            return address.isReachable(TAPO_PING_TIMEOUT_MS);\n+        } catch (Exception e) {\n+            return false;\n+        }\n+    }\n+}"
  },
  {
    "sha": "b4e3a5f1f444716a802b22f4864f08a4d3be7875",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoHttp.java",
    "status": "added",
    "additions": 175,
    "deletions": 0,
    "changes": 175,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoHttp.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoHttp.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/api/TapoHttp.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.api;\n+\n+import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.Fields;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoHttpResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler class for TAPO Smart Home device connections.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoHttp {\n+    public String url = \"\";\n+    public String request = \"\";\n+    public String cookie = \"\";\n+    public Fields requestFields = new Fields();\n+    public TapoHttpResponse response = new TapoHttpResponse();\n+\n+    private final Logger logger = LoggerFactory.getLogger(TapoHttp.class);\n+    private HttpClient httpClient = new HttpClient();;\n+\n+    /**\n+     * Init Class\n+     *\n+     */\n+    public TapoHttp() {\n+        setConfig();\n+        /*\n+         * this.gson = new Gson();\n+         * this.httpClient = new HttpClient();\n+         */\n+    }\n+\n+    /**\n+     * Init Class with parameters\n+     *\n+     * @param url URL request is sent to\n+     * @param request (encoded) request to send to device\n+     */\n+    public TapoHttp(String url, String request) {\n+        setConfig();\n+        this.url = url;\n+        this.request = request;\n+    }\n+\n+    /**\n+     * Init Class with parameters\n+     *\n+     * @param url URL request is sent to\n+     * @param request (encoded) request to send to device\n+     * @param cookie cookie header craeted by handshake\n+     */\n+    public TapoHttp(String url, String request, String cookie) {\n+        setConfig();\n+        this.url = url;\n+        this.request = request;\n+        this.cookie = cookie;\n+    }\n+\n+    /**\n+     * Init default vars\n+     *\n+     */\n+    public void setConfig() {\n+        httpClient.setConnectTimeout(TAPO_HTTP_TIMEOUT_MS);\n+        httpClient.setFollowRedirects(false);\n+    }\n+\n+    /**\n+     * Send Request\n+     * \n+     * @return true on success\n+     */\n+    public TapoHttpResponse send() {\n+        logger.trace(\"sending HTTP '{}'' to {}\", this.request, this.url);\n+        try {\n+            this.httpClient.start();\n+\n+            Request httpRequest = httpClient.newRequest(url).method(HttpMethod.POST.toString());\n+\n+            /* set header */\n+            httpRequest.header(\"content-type\", CONTENT_TYPE_JSON);\n+            httpRequest.header(\"Accept\", CONTENT_TYPE_JSON);\n+            if (!this.cookie.isEmpty()) {\n+                httpRequest.header(HTTP_AUTH_TYPE_COOKIE, this.cookie);\n+            }\n+\n+            /* add request body */\n+            httpRequest.content(new StringContentProvider(this.request, CONTENT_CHARSET), CONTENT_TYPE_JSON);\n+\n+            ContentResponse httpResponse = httpRequest.send();\n+            this.response = new TapoHttpResponse(httpResponse);\n+\n+            this.httpClient.stop();\n+        } catch (Exception ex) {\n+            logger.trace(\"HTTP-Request send returned exception: \", ex);\n+            this.response = new TapoHttpResponse(\"POST\", url);\n+        }\n+        return this.response;\n+    }\n+\n+    /***********************************\n+     *\n+     * SET PARAMETERS\n+     *\n+     ************************************/\n+\n+    /**\n+     * Set Parameters: url\n+     * \n+     * @param url URL request is sent to\n+     */\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    /**\n+     * Set Parameters: request\n+     * \n+     * @param request (encoded) request to send to device\n+     */\n+    public void setRequest(String request) {\n+        this.request = request;\n+    }\n+\n+    /**\n+     * Set Parameters: request\n+     * \n+     * @param fields request\n+     */\n+    public void setRequest(Fields requestFields) {\n+        this.requestFields = requestFields;\n+    }\n+\n+    /**\n+     * Set Parameters: cookie\n+     * \n+     * @param cookie cookie header craeted by handshake\n+     */\n+    public void setCookie(String cookie) {\n+        this.cookie = cookie;\n+    }\n+\n+    /***********************************\n+     *\n+     * GET RESULTS\n+     *\n+     ************************************/\n+\n+    public TapoHttpResponse response() {\n+        return this.response;\n+    }\n+}"
  },
  {
    "sha": "b168145e2b0047ce51dc627929afacb263f0150d",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDevice.java",
    "status": "added",
    "additions": 257,
    "deletions": 0,
    "changes": 257,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDevice.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDevice.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDevice.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,257 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.tapocontrol.internal.device;\n+\n+import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+import static org.openhab.binding.tapocontrol.internal.helpers.TapoUtils.*;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.tapocontrol.internal.TapoControlConfiguration;\n+import org.openhab.binding.tapocontrol.internal.api.TapoConnector;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoCredentials;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class as base for TAPO-Device device implementations.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class TapoDevice extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(TapoDevice.class);\n+    protected @NonNullByDefault({}) TapoConnector connector;\n+    protected @NonNullByDefault({}) TapoControlConfiguration config;\n+    protected @Nullable ScheduledFuture<?> pollingJob;\n+    protected TapoCredentials credentials;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param thing Thing object representing device\n+     */\n+    public TapoDevice(Thing thing, TapoCredentials credentials) {\n+        super(thing);\n+        this.credentials = credentials;\n+    }\n+\n+    /**\n+     * INITIALIZE DEVICE\n+     */\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"initialize thing-device\");\n+        String ipAddress = getThing().getConfiguration().get(CONFIG_DEVICE_IP).toString();\n+        this.connector = new TapoConnector(ipAddress, credentials);\n+\n+        // set the thing status to UNKNOWN temporarily and let the background task decide for the real status.\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // background initialization (delay it a little bit):\n+        scheduler.schedule(this::connect, 2000, TimeUnit.MILLISECONDS);\n+        startScheduler();\n+    }\n+\n+    /**\n+     * DISPOSE\n+     */\n+    @Override\n+    public void dispose() {\n+        stopScheduler();\n+        connector.logout();\n+    }\n+\n+    /**\n+     * Checks if the response object contains errors and if so throws an {@link IOException} when an error code was set.\n+     *\n+     * @throws IOException if an error code was set in the response object\n+     */\n+    protected void checkErrors() throws IOException {\n+        final Integer errorCode = this.connector.errorCode();\n+\n+        if (errorCode != 0) {\n+            throw new IOException(\"Error (\" + errorCode + \"): \" + this.connector.errorMessage());\n+        }\n+    }\n+\n+    /**\n+     * Start scheduler\n+     */\n+    protected void startScheduler() {\n+        String interval = getThing().getConfiguration().get(CONFIG_UPDATE_INTERVAL).toString();\n+        Integer pollingInterval = Integer.valueOf(interval);\n+\n+        if (pollingInterval > 0) {\n+            this.pollingJob = scheduler.scheduleWithFixedDelay(this::schedulerAction, 0, pollingInterval,\n+                    TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    /**\n+     * Stop scheduler\n+     */\n+    protected void stopScheduler() {\n+        if (this.pollingJob != null) {\n+            pollingJob.cancel(true);\n+            pollingJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Scheduler Action\n+     */\n+    protected void schedulerAction() {\n+        if (checkDeviceConnection()) {\n+            queryDeviceInfo();\n+        }\n+    }\n+\n+    /**\n+     * Check Device Connection and Login\n+     * \n+     * @return true if is connected\n+     */\n+    protected Boolean checkDeviceConnection() {\n+        if (this.connector.isOnline(true)) {\n+            /* try to login if not */\n+            if (this.connector.loggedIn()) {\n+                updateStatus(ThingStatus.ONLINE);\n+                return true;\n+            } else {\n+                return connect();\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, connector.errorMessage());\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Handle command\n+     * \n+     */\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * query device Properties\n+     * \n+     */\n+    public void queryDeviceInfo() {\n+        TapoDeviceInfo deviceInfo = connector.queryInfo();\n+        devicePropertiesChanged(deviceInfo);\n+        if (connector.hasError()) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.COMMUNICATION_ERROR, connector.errorMessage());\n+        }\n+    }\n+\n+    /**\n+     * Connect (login) to device\n+     * \n+     */\n+    private Boolean connect() {\n+        Boolean loginSuccess = false;\n+\n+        try {\n+            loginSuccess = connector.login(); // <background task with long running initialization here>\n+            if (loginSuccess) {\n+                updateStatus(ThingStatus.ONLINE);\n+                TapoDeviceInfo deviceInfo = connector.queryInfo();\n+                devicePropertiesChanged(deviceInfo);\n+                if (!isThingModel(deviceInfo.getModel())) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"wrong device found: \" + deviceInfo.getModel());\n+                    return false;\n+                }\n+                devicePropertiesChanged(deviceInfo);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, connector.errorMessage());\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+        return loginSuccess;\n+    }\n+\n+    /***\n+     * Check if ThingType is model\n+     * \n+     * @param model\n+     * @return\n+     */\n+    protected Boolean isThingModel(String model) {\n+        ThingTypeUID foundType = new ThingTypeUID(BINDING_ID, model);\n+        ThingTypeUID expectedType = getThing().getThingTypeUID();\n+        return expectedType.equals(foundType);\n+    }\n+\n+    /**\n+     * Get ChannelID including group\n+     * \n+     * @param group String channel-group\n+     * @param channel String channel-name\n+     * @return String channelID\n+     */\n+    protected String getChannelID(String group, String channel) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (CHANNEL_GROUP_THING_SET.contains(thingTypeUID) && group.length() > 0) {\n+            return group + \"#\" + channel;\n+        }\n+        return channel;\n+    }\n+\n+    /**\n+     * UPDATE PROPERTIES\n+     * \n+     * If only one property must be changed, there is also a convenient method\n+     * updateProperty(String name, String value).\n+     * \n+     * @param TapoDeviceInfo\n+     */\n+    protected void devicePropertiesChanged(TapoDeviceInfo deviceInfo) {\n+        /* device properties */\n+        Map<String, String> properties = editProperties();\n+        properties.put(Thing.PROPERTY_MAC_ADDRESS, deviceInfo.getMAC());\n+        properties.put(Thing.PROPERTY_FIRMWARE_VERSION, deviceInfo.getFirmwareVersion());\n+        properties.put(Thing.PROPERTY_HARDWARE_VERSION, deviceInfo.getHardwareVersion());\n+        properties.put(Thing.PROPERTY_MODEL_ID, deviceInfo.getModel());\n+        properties.put(Thing.PROPERTY_SERIAL_NUMBER, deviceInfo.getSerial());\n+        // properties.put(PROPERTY_WIFI_LEVEL, deviceInfo.getSignalLevel().toString());\n+        updateProperties(properties);\n+    }\n+\n+    /**\n+     * update channel state\n+     * \n+     * @param channelID\n+     * @param value\n+     */\n+    public void publishState(String channelID, State value) {\n+        updateState(channelID, value);\n+    }\n+}"
  },
  {
    "sha": "b773a7969d90731d385957b5af9ff98d6f49a5cc",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDeviceInfo.java",
    "status": "added",
    "additions": 207,
    "deletions": 0,
    "changes": 207,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDeviceInfo.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDeviceInfo.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoDeviceInfo.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,207 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.device;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * Tapo-Device Information class\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoDeviceInfo {\n+    private String device_id = \"\";\n+    private String fw_ver = \"\";\n+    private String hw_ver = \"\";\n+    private String type = \"\";\n+    private String model = \"\";\n+    private String mac = \"\";\n+    private String hw_id = \"\";\n+    private String fw_id = \"\";\n+    private String oem_id = \"\";\n+    private String specs = \"\";\n+    private Boolean device_on = false;\n+    private Integer on_time = 0;\n+    private Boolean overheated = false;\n+    private String nickname = \"\";\n+    private String location = \"\";\n+    private String avatar = \"\";\n+    private Integer time_usage_today = 0;\n+    private Integer time_usage_past7 = 0;\n+    private Integer time_usage_past30 = 0;\n+    private Integer longitude = 0;\n+    private Integer latitude = 0;\n+    private Boolean has_set_location_info = false;\n+    private String ip = \"\";\n+    private String ssid = \"\";\n+    private Integer signal_level = 0;\n+    private Integer rssi = 0;\n+    private String region = \"\";\n+    private Integer time_diff = 0;\n+    private String lang = \"\";\n+\n+    private JsonObject jsonObject = new JsonObject();\n+\n+    /**\n+     * INIT\n+     */\n+    public TapoDeviceInfo() {\n+        setData();\n+    }\n+\n+    public TapoDeviceInfo(JsonObject jso) {\n+        jsonObject = jso;\n+        setData();\n+    }\n+\n+    private void setData() {\n+        this.mac = getString(\"mac\");\n+        this.fw_ver = getString(\"fw_ver\");\n+        this.hw_ver = getString(\"hw_ver\");\n+        this.ip = getString(\"ip\");\n+        this.model = getString(\"model\");\n+        this.device_id = getString(\"device_id\");\n+        this.overheated = getBool(\"overheated\");\n+        this.device_on = getBool(\"device_on\");\n+        this.signal_level = getInt(\"signal_level\");\n+        this.on_time = getInt(\"on_time\");\n+    }\n+\n+    /***********************************\n+     *\n+     * HELPERS\n+     *\n+     ************************************/\n+\n+    /**\n+     * \n+     * @param name parameter name\n+     * @param defVal - default value;\n+     * @return string value\n+     */\n+    private String getString(String name, String defVal) {\n+        if (jsonObject.has(name)) {\n+            return jsonObject.get(name).getAsString();\n+        } else {\n+            return defVal;\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @param name parameter name\n+     * @return string value\n+     */\n+    private String getString(String name) {\n+        return getString(name, \"\");\n+    }\n+\n+    /**\n+     * \n+     * @param name parameter name\n+     * @param defVal - default value;\n+     * @return boolean value\n+     */\n+    private Boolean getBool(String name, Boolean defVal) {\n+        if (jsonObject.has(name)) {\n+            return jsonObject.get(name).getAsBoolean();\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @param name parameter name\n+     * @return boolean value\n+     */\n+    private Boolean getBool(String name) {\n+        return getBool(name, false);\n+    }\n+\n+    /**\n+     * \n+     * @param name parameter name\n+     * @param defVal - default value;\n+     * @return integer value\n+     */\n+    private Integer getInt(String name, Integer defVal) {\n+        if (jsonObject.has(name)) {\n+            return jsonObject.get(name).getAsInt();\n+        } else {\n+            return defVal;\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @param name parameter name\n+     * @return integer value\n+     */\n+    private Integer getInt(String name) {\n+        return getInt(name, 0);\n+    }\n+\n+    /***********************************\n+     *\n+     * GET VALUES\n+     *\n+     ************************************/\n+\n+    public String getMAC() {\n+        return mac;\n+    }\n+\n+    public String getFirmwareVersion() {\n+        return fw_ver;\n+    }\n+\n+    public String getHardwareVersion() {\n+        return hw_ver;\n+    }\n+\n+    public String getIP() {\n+        return ip;\n+    }\n+\n+    public Integer getSignalLevel() {\n+        return signal_level;\n+    }\n+\n+    public String getModel() {\n+        return model;\n+    }\n+\n+    public String getSerial() {\n+        return device_id;\n+    }\n+\n+    public Boolean isOverheated() {\n+        return overheated;\n+    }\n+\n+    public Boolean isOn() {\n+        return device_on;\n+    }\n+\n+    public Boolean isOff() {\n+        return !device_on;\n+    }\n+\n+    public Integer getOnTime() {\n+        return on_time;\n+    }\n+}"
  },
  {
    "sha": "0a4206073b61d52d1154cdcf4c7243f10f754941",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoSmartPlug.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoSmartPlug.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoSmartPlug.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/device/TapoSmartPlug.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.device;\n+\n+import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+import static org.openhab.binding.tapocontrol.internal.helpers.TapoUtils.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.tapocontrol.internal.helpers.TapoCredentials;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * TAPO Smart-Plug-Device.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoSmartPlug extends TapoDevice {\n+    private final Logger logger = LoggerFactory.getLogger(TapoSmartPlug.class);\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param thing Thing object representing device\n+     */\n+    public TapoSmartPlug(Thing thing, TapoCredentials credentials) {\n+        super(thing, credentials);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand '{}' for channelUID {}\", command.toString(), channelUID.getId());\n+        Boolean refreshInfo = false;\n+\n+        /* perform actions */\n+        if (command instanceof RefreshType) {\n+            refreshInfo = true;\n+        } else if (command == OnOffType.ON) {\n+            connector.setDeviceInfo(\"device_on\", true);\n+            refreshInfo = true;\n+        } else if (command == OnOffType.OFF) {\n+            connector.setDeviceInfo(\"device_on\", false);\n+            refreshInfo = true;\n+        }\n+\n+        /* refreshInfo */\n+        if (refreshInfo) {\n+            queryDeviceInfo();\n+        }\n+    }\n+\n+    /**\n+     * UPDATE PROPERTIES\n+     * \n+     * @param TapoDeviceInfo\n+     */\n+    @Override\n+    protected void devicePropertiesChanged(TapoDeviceInfo deviceInfo) {\n+        super.devicePropertiesChanged(deviceInfo);\n+        publishState(getChannelID(CHANNEL_GROUP_ACTUATOR, CHANNEL_OUTPUT), getOnOffType(deviceInfo.isOn()));\n+        publishState(getChannelID(CHANNEL_GROUP_DEVICE, CHANNEL_WIFI_STRENGTH),\n+                getDecimalType(deviceInfo.getSignalLevel()));\n+        publishState(getChannelID(CHANNEL_GROUP_DEVICE, CHANNEL_ONTIME), getDecimalType(deviceInfo.getOnTime()));\n+        publishState(getChannelID(CHANNEL_GROUP_DEVICE, CHANNEL_OVERHEAT),\n+                getDecimalType(deviceInfo.isOverheated() ? 1 : 0));\n+    }\n+}"
  },
  {
    "sha": "37b74a77eb5bf7086ec37be6d8b389856890b468",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/MimeEncode.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/MimeEncode.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/MimeEncode.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/MimeEncode.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * MimeEncoder\n+ *\n+ * @author K4CZP3R - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MimeEncode {\n+\n+    public byte[] encode(byte[] src) {\n+        return java.util.Base64.getMimeEncoder().encode(src);\n+    }\n+\n+    public String encodeToString(byte[] src) {\n+        return java.util.Base64.getMimeEncoder().encodeToString(src);\n+    }\n+\n+    public byte[] decode(byte[] src) {\n+        return java.util.Base64.getMimeDecoder().decode(src);\n+    }\n+\n+    public byte[] decode(String src) {\n+        return java.util.Base64.getMimeDecoder().decode(src);\n+    }\n+}"
  },
  {
    "sha": "f567125228251057af5d77200ec780b52e2aa501",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/PayloadBuilder.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/PayloadBuilder.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/PayloadBuilder.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/PayloadBuilder.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,111 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * PAYLOAD BUILDER\n+ * Generates payload for TapoHttp request\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PayloadBuilder {\n+    public String method = \"\";\n+    private JsonObject parameters = new JsonObject();\n+\n+    /**\n+     * Init Class\n+     *\n+     */\n+    public PayloadBuilder() {\n+    }\n+\n+    /**\n+     * Set Command\n+     *\n+     * @param command command (method) to send\n+     */\n+    public void setCommand(String command) {\n+        this.method = command;\n+    }\n+\n+    /**\n+     * Add Parameter\n+     *\n+     * @param name parameter name\n+     * @param value parameter value (String)\n+     */\n+    public void addParameter(String name, String value) {\n+        this.parameters.addProperty(name, value);\n+    }\n+\n+    /**\n+     * Add Parameter\n+     *\n+     * @param name parameter name\n+     * @param value parameter value (Number)\n+     */\n+    public void addParameter(String name, Integer value) {\n+        this.parameters.addProperty(name, value);\n+    }\n+\n+    /**\n+     * Add Parameter\n+     *\n+     * @param name parameter name\n+     * @param value parameter value (Bool)\n+     */\n+    public void addParameter(String name, Boolean value) {\n+        this.parameters.addProperty(name, value);\n+    }\n+\n+    /**\n+     * Get JSON Payload (STRING)\n+     * \n+     * @return String JSON-Payload\n+     */\n+    public String getPayload() {\n+        Gson gson = new Gson();\n+        JsonObject payload = getJsonPayload();\n+        return gson.toJson(payload);\n+    }\n+\n+    /**\n+     * Get JSON Payload (JSON-Object)\n+     * \n+     * @return JsonObject JSON-Payload\n+     */\n+    public JsonObject getJsonPayload() {\n+        JsonObject payload = new JsonObject();\n+        Long timeMils = System.currentTimeMillis();// * 1000;\n+\n+        payload.addProperty(\"method\", this.method);\n+        payload.add(\"params\", this.parameters);\n+        payload.addProperty(\"requestTimeMils\", timeMils);\n+\n+        return payload;\n+    }\n+\n+    /**\n+     * Flush Parameters\n+     * delete\n+     */\n+    public void flushParameters(String command) {\n+        this.parameters = new JsonObject();\n+    }\n+}"
  },
  {
    "sha": "7f1b12dfea75fcf0294f0ef137f4d53685f3cc74",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCipher.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCipher.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCipher.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCipher.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * TAPO-CIPHER\n+ * Based on K4CZP3R's p100-java-poc\n+ * \n+ * @author Christian Wild - Initial Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoCipher {\n+    protected static final String CIPHER_TRANSFORMATION = \"AES/CBC/PKCS5Padding\";\n+    protected static final String CIPHER_ALGORITHM = \"AES\";\n+    protected static final String CIPHER_CHARSET = \"UTF-8\";\n+\n+    @Nullable\n+    private Cipher enc_cipher;\n+    @Nullable\n+    private Cipher dec_cipher;\n+    @Nullable\n+    private MimeEncode mimeEncode;\n+\n+    public TapoCipher() {\n+    }\n+\n+    public TapoCipher(byte[] bArr, byte[] bArr2) throws Exception {\n+        mimeEncode = new MimeEncode();\n+        SecretKeySpec secretKeySpec = new SecretKeySpec(bArr, CIPHER_ALGORITHM);\n+        IvParameterSpec ivParameterSpec = new IvParameterSpec(bArr2);\n+        this.enc_cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);\n+        this.enc_cipher.init(1, secretKeySpec, ivParameterSpec);\n+        this.dec_cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);\n+        this.dec_cipher.init(2, secretKeySpec, ivParameterSpec);\n+    }\n+\n+    public String encode(String str) throws Exception {\n+        byte[] doFinal;\n+        doFinal = this.enc_cipher.doFinal(str.getBytes(CIPHER_CHARSET));\n+        String encrypted = mimeEncode.encodeToString(doFinal);\n+        return encrypted.replace(\"\\r\\n\", \"\");\n+    }\n+\n+    public String decode(String str) throws Exception {\n+        byte[] data = mimeEncode.decode(str.getBytes(CIPHER_CHARSET));\n+        byte[] doFinal;\n+        doFinal = this.dec_cipher.doFinal(data);\n+        return new String(doFinal);\n+    }\n+}"
  },
  {
    "sha": "c4b2e85c0c6af0124bfb947ad9c5ec8a29e5d21f",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCredentials.java",
    "status": "added",
    "additions": 186,
    "deletions": 0,
    "changes": 186,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCredentials.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCredentials.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoCredentials.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import java.security.*;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.interfaces.RSAPublicKey;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler class for TAPO Credentials\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoCredentials {\n+\n+    private final Logger logger = LoggerFactory.getLogger(TapoCredentials.class);\n+    private MimeEncode mimeEncoder;\n+    private String encodedPassword = \"\";\n+    private String encodedEmail = \"\";\n+    private String publicKey = \"\";\n+    private String privateKey = \"\";\n+\n+    /**\n+     * INIT CLASS\n+     *\n+     */\n+    public TapoCredentials() {\n+        this.mimeEncoder = new MimeEncode();\n+    }\n+\n+    /**\n+     * INIT CLASS\n+     *\n+     * @param email E-Mail-adress of Tapo Cloud\n+     * @param passowrd Password of Tapo Cloud\n+     */\n+    public TapoCredentials(String eMail, String password) {\n+        this.mimeEncoder = new MimeEncode();\n+        setCredectials(eMail, password);\n+    }\n+\n+    /**\n+     * set credentials.\n+     *\n+     * @param username username (eMail-adress) of Tapo Cloud\n+     * @param passowrd Password of Tapo Cloud\n+     */\n+    public void setCredectials(String eMail, String password) {\n+        try {\n+            encryptCredentials(eMail, password);\n+            createKeyPair();\n+        } catch (Exception e) {\n+            logger.trace(\"error init credential class '{}'\", e.toString());\n+        }\n+    }\n+\n+    /**\n+     * encrypt credentials.\n+     *\n+     * @param username username (eMail-adress) of Tapo Cloud\n+     * @param passowrd Password of Tapo Cloud\n+     */\n+    private void encryptCredentials(String username, String password) throws Exception {\n+        logger.trace(\"encrypt credentials for '{}'\", username);\n+\n+        /* Password Encoding */\n+        byte[] byteWord = password.getBytes();\n+        this.encodedPassword = mimeEncoder.encodeToString(byteWord);\n+\n+        /* User Encoding */\n+        String encodedUser = this.shaDigestUsername(username);\n+        byteWord = encodedUser.getBytes(\"UTF-8\");\n+        this.encodedEmail = mimeEncoder.encodeToString(byteWord);\n+    }\n+\n+    /**\n+     * Create Key-Pairs\n+     *\n+     */\n+    public void createKeyPair() throws NoSuchAlgorithmException {\n+        KeyPairGenerator instance = KeyPairGenerator.getInstance(\"RSA\");\n+        instance.initialize(1024, new SecureRandom());\n+        KeyPair generateKeyPair = instance.generateKeyPair();\n+\n+        this.publicKey = new String(\n+                java.util.Base64.getMimeEncoder().encode(((RSAPublicKey) generateKeyPair.getPublic()).getEncoded()));\n+        this.privateKey = new String(\n+                java.util.Base64.getMimeEncoder().encode(((RSAPrivateKey) generateKeyPair.getPrivate()).getEncoded()));\n+    }\n+\n+    /**\n+     * shaDigest USERNAME\n+     *\n+     */\n+    private String shaDigestUsername(String str) throws NoSuchAlgorithmException {\n+        byte[] bArr = str.getBytes();\n+        byte[] digest = MessageDigest.getInstance(\"SHA1\").digest(bArr);\n+\n+        StringBuilder sb = new StringBuilder();\n+        for (byte b : digest) {\n+            String hexString = Integer.toHexString(b & 255);\n+            if (hexString.length() == 1) {\n+                sb.append(\"0\");\n+                sb.append(hexString);\n+            } else {\n+                sb.append(hexString);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * RETURN ENCODED PASSWORD\n+     *\n+     */\n+    public String getEncodedPassword() {\n+        return encodedPassword;\n+    }\n+\n+    /**\n+     * RETURN ENCODED E-MAIL\n+     *\n+     */\n+    public String getEncodedEmail() {\n+        return encodedEmail;\n+    }\n+\n+    /**\n+     * RETURN PRIVATE-KEY\n+     * \n+     * @return String -----BEGIN PRIVATE KEY-----\\n%s\\n-----END PRIVATE KEY-----\n+     */\n+    public String getPrivateKey() {\n+        return String.format(\"-----BEGIN PRIVATE KEY-----\\n%s\\n-----END PRIVATE KEY-----\\n\", privateKey);\n+    }\n+\n+    /**\n+     * RETURN PUBLIC KEY\n+     * \n+     * @return String -----BEGIN PUBLIC KEY-----\\n%s\\n-----END PUBLIC KEY-----\n+     */\n+    public String getPublicKey() {\n+        return String.format(\"-----BEGIN PUBLIC KEY-----\\n%s\\n-----END PUBLIC KEY-----\\n\", publicKey);\n+    }\n+\n+    /**\n+     * RETURN PRIVATE-KEY (BYTES)\n+     * \n+     * @return UTF-8 coded byte[] with private key\n+     */\n+    public byte[] getPrivateKeyBytes() {\n+        try {\n+            return privateKey.getBytes(\"UTF-8\");\n+        } catch (Exception e) {\n+            return new byte[0];\n+        }\n+    }\n+\n+    /**\n+     * RETURN PUBLIC-KEY (BYTES)\n+     * \n+     * @return UTF-8 coded byte[] with private key\n+     */\n+    public byte[] getPublicKeyBytes() {\n+        try {\n+            return publicKey.getBytes(\"UTF-8\");\n+        } catch (Exception e) {\n+            return new byte[0];\n+        }\n+    }\n+}"
  },
  {
    "sha": "aa5500c1643c9b65fa440d543e404c752dd01d54",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorConstants.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorConstants.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorConstants.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorConstants.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link TapoErrorConstants} class defines error-message constants\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoErrorConstants {\n+\n+    // List of API-ErrorCodes\n+    public static final Integer ERROR_API_KEY_LENGTH = -1010;\n+    public static final String ERROR_API_KEY_LENGTH_MSG = \"Invalid Public Key Length\";\n+    public static final Integer ERROR_API_CREDENTIALS = -1501;\n+    public static final String ERROR_API_CREDENTIALS_MSG = \"Invalid Request or Credentials\";\n+    public static final Integer ERROR_API_REQUEST = 1002;\n+    public static final String ERROR_API_REQUEST_MSG = \"Incorrect Request\";\n+    public static final Integer ERROR_JSON_FORMAT = -1003;\n+    public static final String ERROR_JSON_FORMAT_MSG = \"JSON formatting error\";\n+\n+    // List of Binding-ErrorCodes\n+    public static final Integer ERROR_RESPONSE = 9001;\n+    public static final String ERROR_RESPONSE_MSG = \"Invalid HTTP-Response\";\n+    public static final Integer ERROR_COOKIE = 9002;\n+    public static final String ERROR_COOKIE_MSG = \"Cookie Error\";\n+    public static final Integer ERROR_LOGIN = 9003;\n+    public static final String ERROR_LOGIN_MSG = \"Login Error\";\n+    public static final Integer ERROR_DEVICE_OFFLINE = 9009;\n+    public static final String ERROR_DEVICE_OFFLINE_MSG = \"Device Offline\";\n+}"
  },
  {
    "sha": "3f9fc4901baf482a101926f7a0ef81474862a5b3",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorHandler.java",
    "status": "added",
    "additions": 207,
    "deletions": 0,
    "changes": 207,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoErrorHandler.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,207 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import static org.openhab.binding.tapocontrol.internal.helpers.TapoErrorConstants.*;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * Class Handling TapoErrors\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoErrorHandler {\n+    private Integer errorCode = 0;\n+    private String errorMessage = \"\";\n+    private String infoMessage = \"\";\n+    private Gson gson = new Gson();\n+    private HashMap<Integer, String> codeMap = new HashMap<Integer, String>();\n+\n+    /**\n+     * Set ErrorMessages\n+     */\n+    private void setErrorMessages() {\n+        codeMap.put(ERROR_API_KEY_LENGTH, ERROR_API_KEY_LENGTH_MSG);\n+        codeMap.put(ERROR_API_CREDENTIALS, ERROR_API_CREDENTIALS_MSG);\n+        codeMap.put(ERROR_API_REQUEST, ERROR_API_REQUEST_MSG);\n+        codeMap.put(ERROR_JSON_FORMAT, ERROR_JSON_FORMAT_MSG);\n+        codeMap.put(ERROR_RESPONSE, ERROR_RESPONSE_MSG);\n+        codeMap.put(ERROR_COOKIE, ERROR_COOKIE_MSG);\n+        codeMap.put(ERROR_LOGIN, ERROR_LOGIN_MSG);\n+        codeMap.put(ERROR_DEVICE_OFFLINE, ERROR_DEVICE_OFFLINE_MSG);\n+    }\n+\n+    /**\n+     * Constructor\n+     *\n+     */\n+    public TapoErrorHandler() {\n+        setErrorMessages();\n+    }\n+\n+    /**\n+     * Constructor\n+     * \n+     * @param errorCode error code (number)\n+     */\n+    public TapoErrorHandler(Integer errorCode) {\n+        setErrorMessages();\n+        raiseError(errorCode);\n+    }\n+\n+    /**\n+     * Constructor\n+     * \n+     * @param errorCode error code (number)\n+     * @param infoMessage optional info-message\n+     */\n+    public TapoErrorHandler(Integer errorCode, String infoMessage) {\n+        setErrorMessages();\n+        raiseError(errorCode, infoMessage);\n+    }\n+\n+    /**\n+     * Constructor\n+     * \n+     * @param exception Exception\n+     */\n+    public TapoErrorHandler(Exception ex) {\n+        setErrorMessages();\n+        raiseError(ex);\n+    }\n+\n+    /***********************************\n+     *\n+     * Private Functions\n+     *\n+     ************************************/\n+    private String getMessageFromMap(Integer errorCode) {\n+        return getValueOrDefault(codeMap.get(errorCode), errorCode.toString());\n+    }\n+\n+    private static <T> T getValueOrDefault(T value, T defaultValue) {\n+        return value == null ? defaultValue : value;\n+    }\n+\n+    /***********************************\n+     *\n+     * Public Functions\n+     *\n+     ************************************/\n+\n+    /**\n+     * Raises new error\n+     * \n+     * @param errorCode error code (number)\n+     */\n+    public void raiseError(Integer errorCode) {\n+        raiseError(errorCode, \"\");\n+    }\n+\n+    /**\n+     * Raises new error\n+     * \n+     * @param errorCode error code (number)\n+     * @param infoMessage optional info-message\n+     */\n+    public void raiseError(Integer errorCode, String infoMessage) {\n+        this.errorCode = errorCode;\n+        this.errorMessage = getMessageFromMap(errorCode);\n+        this.infoMessage = infoMessage;\n+    }\n+\n+    /**\n+     * Raises new error\n+     * \n+     * @param exception Exception\n+     */\n+    public void raiseError(Exception ex) {\n+        raiseError(ex, \"\");\n+    }\n+\n+    /**\n+     * Raises new error\n+     * \n+     * @param exception Exception\n+     * @param infoMessage optional info-message\n+     */\n+    public void raiseError(Exception ex, String infoMessage) {\n+        this.errorCode = ex.hashCode();\n+        this.errorMessage = getValueOrDefault(ex.getMessage(), ex.toString());\n+        this.infoMessage = infoMessage;\n+    }\n+\n+    /**\n+     * Reset Error\n+     */\n+    public void reset() {\n+        this.errorCode = 0;\n+        this.errorMessage = \"\";\n+        this.infoMessage = \"\";\n+    }\n+\n+    /***********************************\n+     *\n+     * GET RESULTS\n+     *\n+     ************************************/\n+\n+    /**\n+     * Get Error Message\n+     * \n+     * @return error text\n+     */\n+    public String getMessage() {\n+        return this.errorMessage;\n+    }\n+\n+    /**\n+     * Get Info Message\n+     * \n+     * @return error extended info\n+     */\n+    public String getExtendedInfo() {\n+        return this.infoMessage;\n+    }\n+\n+    /**\n+     * Get Error Number\n+     * \n+     * @return error number\n+     */\n+    public Integer getNumber() {\n+        return this.errorCode;\n+    }\n+\n+    /**\n+     * Get JSON-Object with errror\n+     * \n+     * @return\n+     */\n+    public JsonObject getJson() {\n+        JsonObject json;\n+        json = gson.fromJson(\"{'error_code': '\" + errorCode + \"', 'error_message':'\" + errorMessage + \"'}\",\n+                JsonObject.class);\n+        if (json == null) {\n+            json = new JsonObject();\n+        }\n+        return json;\n+    }\n+}"
  },
  {
    "sha": "aefa51f68f812d60d5180003479f42dc22e35c76",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoHttpResponse.java",
    "status": "added",
    "additions": 198,
    "deletions": 0,
    "changes": 198,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoHttpResponse.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoHttpResponse.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoHttpResponse.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,198 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import static org.eclipse.jetty.http.HttpStatus.*;\n+import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpFields;\n+\n+/**\n+ * The {@link TapoHttpResponse} wraps up the API result and provides some more information like url, http code, received\n+ * response etc.\n+ *\n+ * @author Christian Wild - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoHttpResponse {\n+    private String url = \"\";\n+    private String method = \"\";\n+    private String response = \"\";\n+    private int httpCode = -1;\n+    private String httpReason = \"\";\n+    private Map httpHeaders = new HashMap();\n+    private boolean isValidResponse = false;\n+\n+    /**\n+     * Init Class\n+     *\n+     */\n+    public TapoHttpResponse() {\n+    }\n+\n+    public TapoHttpResponse(String method, String url) {\n+        this.method = method;\n+        this.url = url;\n+    }\n+\n+    public TapoHttpResponse(ContentResponse contentResponse) {\n+        fillFromResponse(contentResponse);\n+        this.isValidResponse = validateResponse(response);\n+    }\n+\n+    /***********************************\n+     *\n+     * Functions\n+     *\n+     ************************************/\n+\n+    /**\n+     * Fill from ContentResponse\n+     * \n+     * @param ContentResponse\n+     */\n+    private void fillFromResponse(@Nullable ContentResponse contentResponse) {\n+        if (contentResponse != null) {\n+            String r = contentResponse.getContentAsString();\n+            response = r != null ? r : \"\";\n+            httpCode = contentResponse.getStatus();\n+            httpReason = contentResponse.getReason();\n+            httpHeaders = convertHeaderToMap(contentResponse.getHeaders());\n+\n+            Request request = contentResponse.getRequest();\n+            if (request != null) {\n+                url = request.getURI().toString();\n+                method = request.getMethod();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Create Map from HEADERS\n+     * \n+     * @param HttpFields headers\n+     * @return map\n+     */\n+    private static Map<String, String> convertHeaderToMap(HttpFields headers) {\n+        Map<String, String> httpHeader = new HashMap<>();\n+        for (HttpField header : headers) {\n+            httpHeader.put(header.getName(), header.getValue());\n+        }\n+        return httpHeader;\n+    }\n+\n+    /**\n+     * Validate Response\n+     * \n+     * @param response ContentResponse-Object of http-response\n+     * @return true if response is valid\n+     */\n+    public boolean validateResponse(String contentType) {\n+        // validate response code\n+        if (httpCode != OK_200) {\n+            return false;\n+        }\n+        // validate JSON\n+        String rBody = response.replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+        if (contentType == CONTENT_TYPE_JSON) {\n+            if (rBody == null || rBody.isEmpty() || !rBody.startsWith(\"{\") && !rBody.startsWith(\"[\")) {\n+                /* throw new TapoApiException(\"Unexpected response: '{}'\", rBody); */\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /***********************************\n+     *\n+     * GET RESULTS\n+     *\n+     ************************************/\n+\n+    /**\n+     * Get Response-Header\n+     * \n+     * @return HTTP-Header object\n+     */\n+    public Map getResponseHeaders() {\n+        return httpHeaders;\n+    }\n+\n+    /**\n+     * Get Response-Header\n+     * \n+     * @return string\n+     */\n+    public String getResponseHeader(String headerName) {\n+        return httpHeaders.get(headerName).toString();\n+    }\n+\n+    /**\n+     * Get Response-Content\n+     * \n+     * @return String responsebody\n+     */\n+    public String getResponseBody() {\n+        // return this.response.getContent().body()\n+        return response;\n+    }\n+\n+    /**\n+     * Get Response-Status\n+     * \n+     * @return Integer Response-Status\n+     */\n+    public Integer getResponseStatus() {\n+        return httpCode;\n+    }\n+\n+    /**\n+     * Response is valid?\n+     * \n+     * @return true if response was valid\n+     */\n+    public boolean responseIsOK() {\n+        return httpCode == OK_200;\n+    }\n+\n+    /**\n+     * Response is valid?\n+     * \n+     * @return true if response was valid\n+     */\n+    public boolean responseIsValid() {\n+        return this.isValidResponse;\n+    }\n+\n+    /**\n+     * Return URL\n+     * \n+     * @return url\n+     */\n+    public String getUrl() {\n+        return !url.isEmpty() ? method + \" \" + url : \"\";\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return getUrl() + \" > \" + getResponseBody();\n+    }\n+}"
  },
  {
    "sha": "9cc6a56f4761562716fd7c73ae3bf2da635dff1b",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoUtils.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoUtils.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoUtils.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/java/org/openhab/binding/tapocontrol/internal/helpers/TapoUtils.java?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.tapocontrol.internal.helpers;\n+\n+import static org.openhab.binding.tapocontrol.internal.TapoControlBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+\n+/**\n+ * {@link TapoUtils} TapoUtils -\n+ * Utility Helper Functions\n+ *\n+ * @author Christian Wild - Initial Initial contribution\n+ */\n+@NonNullByDefault\n+public class TapoUtils {\n+\n+    /************************************\n+     * TYPE UTILS\n+     ***********************************/\n+\n+    /**\n+     * Return OnOffType from bool\n+     * \n+     * @param boolVal\n+     */\n+    public static OnOffType getOnOffType(@Nullable Boolean boolVal) {\n+        return (boolVal != null ? boolVal ? OnOffType.ON : OnOffType.OFF : OnOffType.OFF);\n+    }\n+\n+    /**\n+     * Return OnOffType from bool\n+     * \n+     * @param boolVal\n+     */\n+    public static OnOffType getOnOffType(Integer intVal) {\n+        return intVal == 0 ? OnOffType.OFF : OnOffType.ON;\n+    }\n+\n+    /**\n+     * Return StringType from String\n+     * \n+     * @param strVal\n+     */\n+    public static StringType getStringType(@Nullable String strVal) {\n+        return new StringType(strVal != null ? strVal : \"\");\n+    }\n+\n+    /**\n+     * Return DecimalType from Double\n+     * \n+     * @param numVal\n+     */\n+    public static DecimalType getDecimalType(@Nullable Double numVal) {\n+        return new DecimalType((numVal != null ? numVal : 0));\n+    }\n+\n+    /**\n+     * Return DecimalType from Integer\n+     * \n+     * @param numVal\n+     */\n+    public static DecimalType getDecimalType(@Nullable Integer numVal) {\n+        return new DecimalType((numVal != null ? numVal : 0));\n+    }\n+\n+    /**\n+     * Return DecimalType from Longe\n+     * \n+     * @param numVal\n+     */\n+    public static DecimalType getDecimalTypel(@Nullable Long numVal) {\n+        return new DecimalType((numVal != null ? numVal : 0));\n+    }\n+}"
  },
  {
    "sha": "b85c5b3f6bd0b794cb3435826c0d9814804eb42a",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/binding/binding.xml",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/binding/binding.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/binding/binding.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/binding/binding.xml?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"tapocontrol\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\t<name>TapoControl Binding</name>\n+\t<description>Control your TAPO-SmartHome Devices</description>\n+\n+\t<config-description>\n+\t\t<parameter name=\"username\" type=\"text\">\n+\t\t\t<label>E-Mail</label>\n+\t\t\t<description>Enter your TAPO-Cloud e-mail-adress</description>\n+\t\t\t<required>false</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"password\" type=\"text\">\n+\t\t\t<label>Password</label>\n+\t\t\t<description>Enter your TAPO-Cloud password</description>\n+\t\t\t<required>false</required>\n+\t\t</parameter>\n+\t</config-description>\n+</binding:binding>"
  },
  {
    "sha": "4aed2f344b3e454329378fab50bb59cfc2f18c1a",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/config/config.xml",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/config/config.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/config/config.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/config/config.xml?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:tapo:device\">\n+\t\t<parameter name=\"ipAddress\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address</label>\n+\t\t</parameter>\n+\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"0\" max=\"9999\" required=\"false\">\n+\t\t\t<label>Refresh Interval</label>\n+\t\t\t<description>Refresh interval for refreshing the data in seconds. (0=disabled)</description>\n+\t\t\t<default>30</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+</config-description:config-descriptions>"
  },
  {
    "sha": "c972afff6414f65dd7611eb11beb4a9d9c345f1b",
    "filename": "bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/thing/thing-types.xml",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/thing/thing-types.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/thing/thing-types.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.tapocontrol/src/main/resources/OH-INF/thing/thing-types.xml?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -0,0 +1,91 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"tapocontrol\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- THINGS -->\n+\t<!-- P100 THING-TYPE -->\n+\t<thing-type id=\"P100\">\n+\t\t<label>P100 SmartPlug</label>\n+\t\t<description>Tapo Plug device with relay</description>\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"actuator\" typeId=\"smartPlug\"/>\n+\t\t\t<channel-group id=\"device\" typeId=\"deviceState\"/>\n+\t\t</channel-groups>\n+\t\t<representation-property>deviceName</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:tapo:device\"/>\n+\t</thing-type>\n+\n+\n+\t<!-- CHANNEL GROUP TYPES -->\n+\t<!--Device-Statuss Channel Type -->\n+\t<channel-group-type id=\"deviceState\">\n+\t\t<label>Device State</label>\n+\t\t<description>Information about the device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"wifiSignal\" typeId=\"system.signal-strength\"/>\n+\t\t\t<channel id=\"onTime\" typeId=\"ontime\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<!--Actor Channel Type -->\n+\t<channel-group-type id=\"smartPlug\">\n+\t\t<label>SmartPlug</label>\n+\t\t<description>Tapo Smart Plug Power Outlet</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"output\" typeId=\"outputChannel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<!--Dimmer Channel Type -->\n+\t<channel-group-type id=\"lightbulb\">\n+\t\t<label>LightBulb</label>\n+\t\t<description>Tapo Light Bulb</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"output\" typeId=\"outputChannel\"/>\n+\t\t\t<channel id=\"brightness\" typeId=\"dimmerChannel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\n+\t<!-- ACTOR CHANNEL TYPES -->\n+\t<!-- OuputState Channel Type -->\n+\t<channel-type id=\"outputChannel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Output Switch</label>\n+\t\t<description>Switches the power state on/off</description>\n+\t\t<category>PowerOutlet</category>\n+\t\t<state readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<!-- OuputState Channel Type -->\n+\t<channel-type id=\"dimmerChannel\">\n+\t\t<item-type>Number:Percent</item-type>\n+\t\t<label>Brightness</label>\n+\t\t<description>Brightness</description>\n+\t\t<category>LightBulb</category>\n+\t\t<state readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\n+\t<!-- DEVICE-STATE CHANNEL TYPES -->\n+\t<!-- uptime -->\n+\t<channel-type id=\"ontime\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>On-Time</label>\n+\t\t<description>Number of seconds since the device was powered on</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f s\">\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<!-- overheated -->\n+\t<channel-type id=\"overheated\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Device Overheated</label>\n+\t\t<description>1 if device is overheated</description>\n+\t\t<state readOnly=\"true\">\n+\t\t</state>\n+\t</channel-type>\n+</thing:thing-descriptions>"
  },
  {
    "sha": "2fbe8e803a4a61e5c8db05e0d2384bbd14778a1c",
    "filename": "bundles/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/pom.xml",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/7e868efb578561f7fd33c3a6778fa9b463e84db9/bundles/pom.xml",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/pom.xml?ref=7e868efb578561f7fd33c3a6778fa9b463e84db9",
    "patch": "@@ -289,6 +289,7 @@\n     <module>org.openhab.binding.tacmi</module>\n     <module>org.openhab.binding.tado</module>\n     <module>org.openhab.binding.tankerkoenig</module>\n+    <module>org.openhab.binding.tapocontrol</module>\n     <module>org.openhab.binding.telegram</module>\n     <module>org.openhab.binding.teleinfo</module>\n     <module>org.openhab.binding.tellstick</module>"
  }
]
