[
  {
    "sha": "7c3e76b03c22afb487bbba6e80f5279e5a6aa14d",
    "filename": "bundles/org.openhab.binding.shelly/README.md",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/README.md",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/README.md",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/README.md?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -16,6 +16,14 @@ The binding gets in sync with the next status refresh.\n \n Refer to [Advanced Users](doc/AdvancedUsers.md) for more information on openHAB Shelly integration, e.g. firmware update, network communication or log filtering.\n \n+Also check out the [Shelly Manager](doc/ShellyManager.md), which\n+- provides detailed information on your Shellys\n+- helps to diagnose WiFi issues or device instabilities\n+- includes some common actions and \n+- simplifies firmware updates.\n+\n+[Shelly Manager](doc/ShellyManager.md) could also act as a firmware upgrade proxy - the device doesn't need to connect directly to the Internet, instead openHAB services as a download proxy, which improves device security.\n+\n ## Supported Devices\n \n | thing-type         | Model                                                  | Vendor ID |\n@@ -796,7 +804,8 @@ You can define 2 items (1 Switch, 1 Number) mapping to the same channel, see exa\n \n Important: The Shelly Motion does only support CoIoT Unicast, which means you need to set the CoIoT peer address.\n \n-Use device WebUI, open COIOT settings, make sure CoIoT is enabled and enter the openHAB IP address or\n+- Use device WebUI, open COIOT settings, make sure CoIoT is enabled and enter the openHAB IP address or\n+- Use [Shelly Manager](doc/ShellyManager.md, select Action 'Set CoIoT peer' and the Manager will sets the openHAB IP address as peer address\n \n |Group     |Channel        |Type     |read-only|Description                                                          |\n |----------|---------------|---------|---------|---------------------------------------------------------------------|"
  },
  {
    "sha": "cb0ab4342c6984c9d6ad81b707678e78d35a72d6",
    "filename": "bundles/org.openhab.binding.shelly/doc/ShellyManager.md",
    "status": "added",
    "additions": 175,
    "deletions": 0,
    "changes": 175,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/doc/ShellyManager.md",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/doc/ShellyManager.md",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/doc/ShellyManager.md?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,175 @@\n+# Shelly Manager\n+\n+The Shelly Manager is a small extension to the binding, which provides some low level information on the Shelly Devices, but also provides some functions to manage the devices.\n+\n+To open the Shelly Manage launch the following URL in your browser\n+- http://&lt;openHAB IP address&gt;:8080/shelly/manager or\n+- http://&lt;openHAB IP address&gt;:8443/shelly/manager\n+\n+Maybe you need to change the port matching your setup.\n+\n+Shelly Manager makes you various device insights available to get an overview of your Shellys\n+- Get a quick overview that all Shellys operate like expected, statistical data will help to identify issues\n+- Have some basic setting actions integrated, which help to do an easy setup of new Shellys added to openHAB\n+- Make firmware updates way easier - filter 'Update available' + integrated 2-click update\n+- Provide a firmware download proxy, which allows to separate your Shellys from the Internet (improved device security)\n+\n+## Overview\n+\n+Once the Shelly Manager is opened an overview of all Shelly devices added as a Thing are displayed. \n+Things which are not discovered or still site in the Inbox will not be displayed.\n+\n+![](images/manager/overview.png)\n+\n+You'll see a bunch of technical details, which are not available as channels or in the Thing properties.\n+This includes information on the device communication stability. \n+The statistic gives you a good overview if device communication is stable or a relevant number of timeouts need to be recovered.\n+In this case you should verify the WiFi coverage or other options to improve stability.\n+\n+The following information is available\n+|Column              |Description                                                                      |\n+|--------------------|---------------------------------------------------------------------------------|\n+|S                   |Thing Status - hover over the icon to see more details                           |\n+|Name                |Device name - hover over the name to get more details                            |\n+|Cloud Status Icon   |Indicates the status of the Shelly Cloud feature: disabled/enabled/connected     |\n+|MQQT Status Icon    |Indicates the staus of the MQTT featured disabled/enabled/connected              |\n+|Refresh button      |Trigger a status refresh in background, maybe you need to click more than once   |\n+|Device IP           |Assigned IP address, click to open the deviceâ€™s Web UI in a separate browser tab |\n+|WiFi Network        |SSID of the connected WiFi network                                               |\n+|WiFi Signal         |WiFi signal strength, 0=none, 4=very good                                        |\n+|Battery Level       |Remaining capacity of the battery                                                |\n+|Heartbeat           |Last time a response or an event was received from the device                    |\n+|Actions             |Drop down with some actions, see below                                           |\n+|Firmware            |Current firmware release                                                         |\n+|Update avail        |yes indicates that a firmware update is available                                |\n+|Versions            |List available firmware versions: prod, beta or archived                         |\n+|Uptime              |Number of seconds since last device restart                                      |\n+|Internal Temp       |Device internal temperature. Max is depending on device type.                    |\n+|Update Period       |Timeout for device refresh                                                       |\n+|Remaining Watchdog  |Shows number of seconds until device will go offline if no update is received    |\n+|Events              |Increases on every event triggered by the device or the binding                  |\n+|Last Event          |Type of last event or alarm (refer README.md for details)                        |\n+|Event Time          |When was last event received                                                     |\n+|Device Restarts     |Number of detected restarts. This is ok on firmware updates, otherwise indicates a crash |\n+|Timeout Errors      |Number of API timeouts, could be an indication for an unstable connection        |\n+|Timeouts recovered  |The binding does retries and timeouts and counts successful recoveries           |\n+|CoIoT Messages      |Number of received CoIoT messages, must be >= 2 to indicate CoIoT working        |\n+|CoIoT Errors        |Number of CoIoT messages, which can't be processed. >0 indicates firmware issues |\n+\n+The column S and Name display more information when hovering with the mouse over the entries.\n+\n+![](images/manager/overview_devstatus.png)\n+![](images/manager/overview_devsettings.png)\n+\n+### Device Filters\n+|Filter              |Description                                                                      |\n+|--------------------|---------------------------------------------------------------------------------| \n+|All                 |Clear filter / display all devices                                               |\n+|Online only         |Filter on devices with Thing Status = ONLINE                                     |\n+|Inactive only       |Filter on devices, which are not initialized for in Thing Status = OFFLINE       |\n+|Needs Attention     |Filter on devices, which need attention (setup/connectivity issues), see below   |\n+|Update available    |Filter on devices having a new firmware version available                        |\n+|Unprotected         |Filter on devices, which are currently not password protected                    |\n+\n+Beside the Device Filter box you see a refresh button.\n+At the bottom right you see number of displayed devices vs. number of total devices.\n+A click triggers a background status update for all devices rather only the selected one when clicking of the refresh button in the device lines.\n+\n+Filter 'Needs Attention':\n+This is a dynamic filter, which helps to identify devices having some kind of setup / connectivity or operation issues.\n+The binding checks the following conditions\n+- Thing status != ONLINE: Use the 'Inactive Only' filter to find those devices, check openhab.log\n+- WIFISIGNAL: WiFi signal strength < 2 - this usually leads into connectivity problems, check positioning of portable devices or antenna direction.\n+- LOWBATTERY: The remaining battery is < 20% (configuration in Thing Configuration), consider to replace the battery \n+Watch out for bigger number of timeout errors.\n+- Device RESTARTED: Indicates a firmware problem / crash if this happens without a device reboot or firmware update (timestamp is included)\n+- OVERTEMP / OVERLOAD / LOADERROR: There are problems with the physical installation of the device, check specifications, wiring, housing!\n+- SENSORERROR: A sensor error / malfunction was detected, check product documentation\n+- NO_COIOT_DISCOVERY: The CoIoT discovery has not been completed, check IP network configuration, re-discover the device\n+- NO_COIOT_MULTICAST: The CoIoT discovery could be completed, but the device is not receiving CoIoT status updates.\n+You might try to switch to CoIoT Peer mode, in this case the device doesn't use IP Multicast and sends updates directly to the openHAB host.\n+\n+The result is shown in the Device Status tooltip.\n+\n+### Device settings & status\n+\n+When hovering with the mouse over the status icon or the device name you'll get additional information settings and status.\n+\n+### Device Status\n+\n+|Status              |Description                                                                      |\n+|--------------------|---------------------------------------------------------------------------------| \n+|Status              |Thing status, sub-status and description as you know it from openHAB             |\n+|CoIoT Status        |CoIoT status: enabled or disabled                                                |\n+|CoIoT Destination   |CoIoT Peer address (ip address:port) or Multicast                                |\n+|Cloud Status        |Status of the Shelly Cloud connection: disabled, enabled, connected              |\n+|MQTT Status         |MQTT Status: disabled, enabled, connected                                        |\n+|Actions skipped     |Number of actions skipped by the device, usually 0                               |\n+|Max Internal Temp   |Maximum internal temperature, check device specification for valid range         |\n+\n+### Device Settings\n+\n+|Setting             |Description                                                                      |\n+|--------------------|---------------------------------------------------------------------------------| \n+|Shelly Device Name  |Device name according to device settings                                         |\n+|Device Hardware Rev |Hardware revision of the device                                                  |\n+|Device Type         |Device Type ID                                                                   |\n+|Device Mode         |Selected mode for dual mode devices (relay/roller or white/color)                |\n+|Firmware Version    |Current firmware version                                                         |\n+|Network Name        |Network name of the device used for mDNS                                         |\n+|MAC Address         |Unique hardware/network address of the device                                    |\n+|Discoverable        |true: the device can be discovered using mDNS, false: device is hidden           |\n+|WiFi Auto Recovery  |enabled: the device will automatically reboot when WiFi connect fails            |\n+|Timezone            |Configured device zone (see device settings)                                     |\n+|Time server         |Configured time server (use device UI to change)                                 |\n+\n+### Actions\n+\n+The Shelly Manager provides the following actions when the Thing is ONLINE. \n+They are available in the dropdown list in column Actions.\n+\n+|Action              |Description                                                                      |\n+|--------------------|---------------------------------------------------------------------------------| \n+|Reset Statistics    |Resets device statistic and clear the last alarm                                 |\n+|Restart             |Restart the device and reconnect to WiFi                                         |\n+|Protect             |Use binding's default credentials to protect device access with user and password|\n+|Set CoIoT Peer      |Disable CoIoT Multicast and set openHAB system as receiver for CoIoT updates     |\n+|Set CoIoT Multicast |Disable CoIoT Multicast and set openHAB system as receiver for CoIoT updates     |\n+|Enable Cloud        |Enable the Shelly Cloud connectivity                                             |\n+|Disable Cloud       |Disable the Shelly Cloud connectivity (takes about 15sec to become active)       |\n+|Reset               |Performs **firmware reset**; Attention: The device will lose its configuration   |\n+\n+![](images/manager/overview_actions.png)\n+\n+## Firmware Update\n+\n+The Shelly Manager simplifies the firmware update.\n+You could select between different versions using the drop down list on the overview page.\n+\n+Shelly Manager integrates different sources\n+- Allterco official releases: production and beta release (like in the device UI)\n+- Older firmware release from the firmware archive - this is a community service\n+- You could specify any custom URL providing the firmware image (e.g. a local web server), which is accessible for the device using http\n+\n+| | |\n+|-|-|\n+|![](images/manager/overview_versions.png)|All firmware releases are combined to the selection list.<br/>Click on the version you want to install and Shelly Manager will generate the requested URL to trigger the firmware upgrade.|\n+\n+The upgrade starts if you click \"Perform Update\".\n+\n+![](images/manager/fwupgrade.png)\n+\n+The device will download the firmware file, installs the update and restarts the device.\n+Depending on the device type this takes between 10 and 60 seconds.\n+The binding will automatically recover the device with the next status check (as usual).\n+\n+### Connection types\n+\n+You could choose between 3 different update types\n+* Internet: This triggers the regular update; the device needs to be connected to the Internet\n+* Use openHAB as a proxy: In this case the binding directs the device to request the firmware from the openHAB system.\n+The binding will then download the firmware from the selected sources and passes this transparently to the device.\n+This provides a security benefit: The device doesn't require Internet access, only the openHAB host, which could be filtered centrally.\n+* Custom URL: In this case you could specify \n+\n+The binding manages the download request with the proper download URL."
  },
  {
    "sha": "8d125c813f50d7ff09b7c26c51fa0fb63b90c008",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -44,7 +44,7 @@\n @NonNullByDefault\n public class ShellyDeviceProfile {\n     private final Logger logger = LoggerFactory.getLogger(ShellyDeviceProfile.class);\n-    private final static Pattern VERSION_PATTERN = Pattern.compile(\"v\\\\d+\\\\.\\\\d+\\\\.\\\\d+\");\n+    private final static Pattern VERSION_PATTERN = Pattern.compile(\"v\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-[a-z0-9]*)?\");\n \n     public boolean initialized = false; // true when initialized\n "
  },
  {
    "sha": "b3b6637e7761e9de0c8742106706ebe351d565f1",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -273,7 +273,7 @@ private boolean initializeThing() throws ShellyApiException {\n                 } catch (ShellyApiException e) {\n                     logger.debug(\"{}: Unable to set CoIoT peer: {}\", thingName, e.toString());\n                 }\n-            } else if (!devpeer.equals(ourpeer)) {\n+            } else if (!devpeer.isEmpty() && !devpeer.equals(ourpeer)) {\n                 logger.warn(\"{}: CoIoT peer in device settings does not point this to this host, disabling CoIoT\",\n                         thingName);\n                 config.eventsCoIoT = autoCoIoT = false;\n@@ -799,8 +799,8 @@ private void checkVersion(ShellyDeviceProfile prf, ShellySettingsStatus status)\n         try {\n             ShellyVersionDTO version = new ShellyVersionDTO();\n             if (version.checkBeta(getString(prf.fwVersion))) {\n-                logger.info(\"{}: {}\", prf.hostname, messages.get(\"versioncheck.beta\", prf.fwVersion, prf.fwDate,\n-                        prf.fwId, SHELLY_API_MIN_FWVERSION));\n+                logger.info(\"{}: {}\", prf.hostname,\n+                        messages.get(\"versioncheck.beta\", prf.fwVersion, prf.fwDate, prf.fwId));\n             } else {\n                 if ((version.compare(prf.fwVersion, SHELLY_API_MIN_FWVERSION) < 0) && !profile.isMotion) {\n                     logger.warn(\"{}: {}\", prf.hostname, messages.get(\"versioncheck.tooold\", prf.fwVersion, prf.fwDate,"
  },
  {
    "sha": "388b2a36b71bf1783c0111bd3b08b189f2f7c28f",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManager.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManager.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManager.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManager.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import static org.openhab.binding.shelly.internal.manager.ShellyManagerConstants.*;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.shelly.internal.ShellyHandlerFactory;\n+import org.openhab.binding.shelly.internal.api.ShellyApiException;\n+import org.openhab.binding.shelly.internal.manager.ShellyManagerPage.ShellyMgrResponse;\n+import org.openhab.binding.shelly.internal.provider.ShellyTranslationProvider;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+\n+/**\n+ * {@link ShellyManager} implements the Shelly Manager\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManager {\n+    private final Map<String, ShellyManagerPage> pages = new LinkedHashMap<>();\n+    private final ShellyHandlerFactory handlerFactory;\n+\n+    public ShellyManager(ConfigurationAdmin configurationAdmin, ShellyTranslationProvider translationProvider,\n+            HttpClient httpClient, String localIp, int localPort, ShellyHandlerFactory handlerFactory) {\n+        this.handlerFactory = handlerFactory;\n+        pages.put(SHELLY_MGR_OVERVIEW_URI, new ShellyManagerOverviewPage(configurationAdmin, translationProvider,\n+                httpClient, localIp, localPort, handlerFactory));\n+        pages.put(SHELLY_MGR_ACTION_URI, new ShellyManagerActionPage(configurationAdmin, translationProvider,\n+                httpClient, localIp, localPort, handlerFactory));\n+        pages.put(SHELLY_MGR_FWUPDATE_URI, new ShellyManagerOtaPage(configurationAdmin, translationProvider, httpClient,\n+                localIp, localPort, handlerFactory));\n+        pages.put(SHELLY_MGR_OTA_URI, new ShellyManagerOtaPage(configurationAdmin, translationProvider, httpClient,\n+                localIp, localPort, handlerFactory));\n+        pages.put(SHELLY_MGR_IMAGES_URI, new ShellyManagerImageLoader(configurationAdmin, translationProvider,\n+                httpClient, localIp, localPort, handlerFactory));\n+        pages.put(SHELLY_MANAGER_URI, new ShellyManagerOverviewPage(configurationAdmin, translationProvider, httpClient,\n+                localIp, localPort, handlerFactory));\n+    }\n+\n+    public ShellyMgrResponse generateContent(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        for (Map.Entry<String, ShellyManagerPage> page : pages.entrySet()) {\n+            if (path.toLowerCase().startsWith(page.getKey())) {\n+                ShellyManagerPage p = page.getValue();\n+                return p.generateContent(path, parameters);\n+            }\n+        }\n+        return new ShellyMgrResponse(\"Invalid URL or syntax\", HttpStatus.BAD_REQUEST_400);\n+    }\n+}"
  },
  {
    "sha": "3c7a7ea6583484f5c50bce5aa9767aa0cdca2094",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerActionPage.java",
    "status": "added",
    "additions": 238,
    "deletions": 0,
    "changes": 238,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerActionPage.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerActionPage.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerActionPage.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.PROPERTY_SERVICE_NAME;\n+import static org.openhab.binding.shelly.internal.manager.ShellyManagerConstants.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.shelly.internal.ShellyHandlerFactory;\n+import org.openhab.binding.shelly.internal.api.ShellyApiException;\n+import org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.ShellySettingsLogin;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.api.ShellyHttpApi;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO;\n+import org.openhab.binding.shelly.internal.config.ShellyThingConfiguration;\n+import org.openhab.binding.shelly.internal.handler.ShellyManagerInterface;\n+import org.openhab.binding.shelly.internal.provider.ShellyTranslationProvider;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link ShellyManagerActionPage} implements the Shelly Manager's action page\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManagerActionPage extends ShellyManagerPage {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyManagerActionPage.class);\n+\n+    public ShellyManagerActionPage(ConfigurationAdmin configurationAdmin, ShellyTranslationProvider translationProvider,\n+            HttpClient httpClient, String localIp, int localPort, ShellyHandlerFactory handlerFactory) {\n+        super(configurationAdmin, translationProvider, httpClient, localIp, localPort, handlerFactory);\n+    }\n+\n+    @Override\n+    public ShellyMgrResponse generateContent(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        String action = getUrlParm(parameters, URLPARM_ACTION);\n+        String uid = getUrlParm(parameters, URLPARM_UID);\n+        String update = getUrlParm(parameters, URLPARM_UPDATE);\n+        if (uid.isEmpty() || action.isEmpty()) {\n+            return new ShellyMgrResponse(\"Invalid URL parameters: \" + parameters.toString(),\n+                    HttpStatus.BAD_REQUEST_400);\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        properties.put(ATTRIBUTE_METATAG, \"\");\n+        properties.put(ATTRIBUTE_CSS_HEADER, \"\");\n+        properties.put(ATTRIBUTE_CSS_FOOTER, \"\");\n+        String html = loadHTML(HEADER_HTML, properties);\n+\n+        ShellyManagerInterface th = getThingHandler(uid);\n+        if (th != null) {\n+            fillProperties(properties, uid, th);\n+\n+            Map<String, String> actions = getActions(th.getProfile());\n+            String actionUrl = SHELLY_MGR_OVERVIEW_URI;\n+            String actionButtonLabel = \"OK\"; // Default\n+            String serviceName = getValue(properties, PROPERTY_SERVICE_NAME);\n+            String message = \"\";\n+\n+            ShellyThingConfiguration config = getThingConfig(th, properties);\n+            ShellyDeviceProfile profile = th.getProfile();\n+            ShellyHttpApi api = th.getApi();\n+            new ShellyHttpApi(uid, config, httpClient);\n+\n+            int refreshTimer = 0;\n+            switch (action) {\n+                case ACTION_RES_STATS:\n+                    th.resetStats();\n+                    message = getMessageP(\"action.resstats.confirm\", MCINFO);\n+                    refreshTimer = 3;\n+                    break;\n+                case ACTION_RESTART:\n+                    if (update.equalsIgnoreCase(\"yes\")) {\n+                        message = getMessageP(\"action.restart.info\", MCINFO);\n+                        actionButtonLabel = \"Ok\";\n+                        new Thread(() -> { // schedule asynchronous reboot\n+                            try {\n+                                api.deviceReboot();\n+                            } catch (ShellyApiException e) {\n+                                // maybe the device restarts before returning the http response\n+                            }\n+                            setRestarted(th, uid); // refresh after reboot\n+                        }).start();\n+                        refreshTimer = profile.isMotion ? 60 : 30;\n+                    } else {\n+                        message = getMessageS(\"action.restart.confirm\", MCINFO);\n+                        actionUrl = buildActionUrl(uid, action);\n+                    }\n+                    break;\n+                case ACTION_PROTECT:\n+                    // Get device settings\n+                    if (config.userId.isEmpty() || config.password.isEmpty()) {\n+                        message = getMessageP(\"action.protect.id-missing\", MCWARNING);\n+                        break;\n+                    }\n+\n+                    if (!update.equalsIgnoreCase(\"yes\")) {\n+                        ShellySettingsLogin status = api.getLoginSettings();\n+                        message = getMessage(\"action.protect.status\", getBool(status.enabled) ? \"enabled\" : \"disabled\",\n+                                status.username)\n+                                + getMessageP(\"action.protect.new\", MCINFO, config.userId, config.password);\n+                        actionUrl = buildActionUrl(uid, action);\n+                    } else {\n+                        api.setLoginCredentials(config.userId, config.password);\n+                        message = getMessageP(\"action.protect.confirm\", MCINFO, config.userId, config.password);\n+                        refreshTimer = 3;\n+                    }\n+                    break;\n+                case ACTION_SETCOIOT_MCAST:\n+                case ACTION_SETCOIOT_PEER:\n+                    if ((profile.settings.coiot == null) || (profile.settings.coiot.peer == null)) {\n+                        // feature not available\n+                        message = getMessage(\"coiot.mode-not-suppored\", MCWARNING, action);\n+                        break;\n+                    }\n+\n+                    String peer = getString(profile.settings.coiot.peer);\n+                    boolean mcast = peer.isEmpty();\n+                    String newPeer = mcast ? \"\" : localIp + \":\" + ShellyCoapJSonDTO.COIOT_PORT;\n+                    String displayPeer = mcast ? \"Multicast\" : newPeer;\n+\n+                    if (profile.isMotion && action.equalsIgnoreCase(ACTION_SETCOIOT_MCAST)) {\n+                        // feature not available\n+                        message = getMessageP(\"coiot.multicast-not-supported\", \"warning\", displayPeer);\n+                        break;\n+                    }\n+\n+                    if (!update.equalsIgnoreCase(\"yes\")) {\n+                        message = getMessageP(\"coiot.current-peer\", MCMESSAGE, mcast ? \"Multicast\" : peer)\n+                                + getMessageP(\"coiot.new-peer\", MCINFO, displayPeer)\n+                                + getMessageP(mcast ? \"coiot.mode-mcast\" : \"coiot.mode-peer\", MCMESSAGE);\n+                        actionUrl = buildActionUrl(uid, action);\n+                    } else {\n+                        api.setCoIoTPeer(newPeer);\n+                        th.requestUpdates(1, true);\n+                        if (!profile.isMotion) {\n+                            refreshTimer = 5; // Motion doesn't support Multicast, so no restart required\n+                        } else {\n+                            // The device needs a restart after changing the peer mode\n+                            message = getMessageP(\"action.restart.info\", MCINFO);\n+                            actionUrl = buildActionUrl(uid, ACTION_RESTART);\n+                        }\n+                    }\n+                    break;\n+                case ACTION_ENCLOUD:\n+                case ACTION_DISCLOUD:\n+                    boolean enabled = action.equals(ACTION_ENCLOUD);\n+                    api.setCloud(enabled);\n+                    message = getMessageP(\"action.setcloud.config\", MCINFO, enabled ? \"enabled\" : \"disabled\");\n+                    refreshTimer = 20;\n+                    break;\n+                case ACTION_RESET:\n+                    if (!update.equalsIgnoreCase(\"yes\")) {\n+                        message = getMessageP(\"action.reset.warning\", MCWARNING, serviceName);\n+                        actionUrl = buildActionUrl(uid, action);\n+                    } else {\n+                        new Thread(() -> { // schedule asynchronous reboot\n+                            try {\n+                                api.factoryReset();\n+                            } catch (ShellyApiException e) {\n+                                // maybe the device restarts before returning the http response\n+                            }\n+                            setRestarted(th, uid);\n+                        }).start();\n+                        message = getMessageP(\"action.reset.confirm\", MCINFO, serviceName);\n+                    }\n+                    break;\n+                case ACTION_NONE:\n+                    break;\n+                default:\n+                    logger.warn(\"{}: {}\", LOG_PREFIX, getMessage(\"action.unknown\", action));\n+            }\n+\n+            properties.put(ATTRIBUTE_ACTION, getString(actions.get(action))); // get description for command\n+            properties.put(ATTRIBUTE_ACTION_BUTTON, actionButtonLabel);\n+            properties.put(ATTRIBUTE_ACTION_URL, actionUrl);\n+            message = fillAttributes(message, properties);\n+            properties.put(ATTRIBUTE_MESSAGE, message);\n+            properties.put(ATTRIBUTE_REFRESH, String.valueOf(refreshTimer));\n+            html += loadHTML(ACTION_HTML, properties);\n+\n+            th.requestUpdates(1, refreshTimer > 0); // trigger background update\n+        }\n+\n+        properties.clear();\n+        html += loadHTML(FOOTER_HTML, properties);\n+        return new ShellyMgrResponse(html, HttpStatus.OK_200);\n+    }\n+\n+    public static Map<String, String> getActions(ShellyDeviceProfile profile) {\n+        Map<String, String> list = new LinkedHashMap<>();\n+        list.put(ACTION_RES_STATS, \"Reset Statistics\");\n+        list.put(ACTION_RESTART, \"Reboot Device\");\n+        list.put(ACTION_PROTECT, \"Protect Device\");\n+\n+        if ((profile.settings.coiot != null) && (profile.settings.coiot.peer != null)) {\n+            list.put(ACTION_SETCOIOT_PEER, \"Set CoIoT Peer\");\n+            if (!profile.isMotion) {\n+                list.put(ACTION_SETCOIOT_MCAST, \"Set CoIoT Multicast\");\n+            }\n+        }\n+\n+        boolean set = (profile.settings.cloud != null) && profile.settings.cloud.enabled;\n+        list.put(set ? ACTION_DISCLOUD : ACTION_ENCLOUD, set ? \"Disable Cloud\" : \"Enable Cloud\");\n+        list.put(ACTION_RESET, \"-Factory Reset\");\n+        return list;\n+    }\n+\n+    private String buildActionUrl(String uid, String action) {\n+        return SHELLY_MGR_ACTION_URI + \"?\" + URLPARM_ACTION + \"=\" + action + \"&\" + URLPARM_UID + \"=\" + urlEncode(uid)\n+                + \"&\" + URLPARM_UPDATE + \"=yes\";\n+    }\n+\n+    private void setRestarted(ShellyManagerInterface th, String uid) {\n+        th.setThingOffline(ThingStatusDetail.GONE, \"offline.status-error-restarted\");\n+        scheduleUpdate(th, uid + \"_upgrade\", 20); // wait 20s before refresh\n+    }\n+}"
  },
  {
    "sha": "5af3e0fb8e51371580b7e6d5de8814e546a57ee8",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerCache.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerCache.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerCache.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerCache.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * {@link ShellyManagerCache} implements a cache with expiring times of the entries\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManagerCache<K, V> extends ConcurrentHashMap<K, V> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private Map<K, Long> timeMap = new ConcurrentHashMap<K, Long>();\n+    private long expiryInMillis = ShellyManagerConstants.CACHE_TIMEOUT_DEF_MIN * 60 * 1000; // Default 1h\n+\n+    public ShellyManagerCache() {\n+        initialize();\n+    }\n+\n+    public ShellyManagerCache(long expiryInMillis) {\n+        this.expiryInMillis = expiryInMillis;\n+        initialize();\n+    }\n+\n+    void initialize() {\n+        new CleanerThread().start();\n+    }\n+\n+    @Override\n+    public @Nullable V put(K key, V value) {\n+        Date date = new Date();\n+        timeMap.put(key, date.getTime());\n+        V returnVal = super.put(key, value);\n+        return returnVal;\n+    }\n+\n+    @Override\n+    public void putAll(@Nullable Map<? extends K, ? extends V> m) {\n+        if (m == null) {\n+            throw new IllegalArgumentException();\n+        }\n+        for (K key : m.keySet()) {\n+            V value = m.get(key);\n+            if (value != null) { // don't allow null values\n+                put(key, value);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable V putIfAbsent(K key, V value) {\n+        if (!containsKey(key)) {\n+            return put(key, value);\n+        } else {\n+            return get(key);\n+        }\n+    }\n+\n+    class CleanerThread extends Thread {\n+        @Override\n+        public void run() {\n+            while (true) {\n+                cleanMap();\n+                try {\n+                    Thread.sleep(expiryInMillis / 2);\n+                } catch (InterruptedException e) {\n+                }\n+            }\n+        }\n+\n+        private void cleanMap() {\n+            long currentTime = new Date().getTime();\n+            for (K key : timeMap.keySet()) {\n+                if (currentTime > (timeMap.get(key) + expiryInMillis)) {\n+                    V value = remove(key);\n+                    timeMap.remove(key);\n+                }\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "20c3aafcda9dc5c7cc79fecad5a344fdbf2d2401",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerConstants.java",
    "status": "added",
    "additions": 137,
    "deletions": 0,
    "changes": 137,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerConstants.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerConstants.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerConstants.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * {@link ShellyManagerConstants} defines the constants for Shelly Manager\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManagerConstants {\n+    public static final String LOG_PREFIX = \"ShellyManager\";\n+    public static final String UTF_8 = StandardCharsets.UTF_8.toString();\n+\n+    public static final String SHELLY_MANAGER_URI = \"/shelly/manager\";\n+    public static final String SHELLY_MGR_OVERVIEW_URI = SHELLY_MANAGER_URI + \"/ovierview\";\n+    public static final String SHELLY_MGR_FWUPDATE_URI = SHELLY_MANAGER_URI + \"/fwupdate\";\n+    public static final String SHELLY_MGR_IMAGES_URI = SHELLY_MANAGER_URI + \"/images\";\n+    public static final String SHELLY_MGR_ACTION_URI = SHELLY_MANAGER_URI + \"/action\";\n+    public static final String SHELLY_MGR_OTA_URI = SHELLY_MANAGER_URI + \"/ota\";\n+\n+    public static final String ACTION_RESTART = \"restart\";\n+    public static final String ACTION_PROTECT = \"protect\";\n+    public static final String ACTION_SETCOIOT_PEER = \"setcoiotpeer\";\n+    public static final String ACTION_SETCOIOT_MCAST = \"setcoiotmcast\";\n+    public static final String ACTION_SETTZ = \"settz\";\n+    public static final String ACTION_SETNTP = \"setntp\";\n+    public static final String ACTION_ENCLOUD = \"encloud\";\n+    public static final String ACTION_DISCLOUD = \"discloud\";\n+    public static final String ACTION_RES_STATS = \"reset_stat\";\n+    public static final String ACTION_RESET = \"reset\";\n+    public static final String ACTION_NONE = \"-\";\n+\n+    public static final String TEMPLATE_PATH = \"sniplets/\";\n+    public static final String HEADER_HTML = \"header.html\";\n+    public static final String OVERVIEW_HTML = \"overview.html\";\n+    public static final String OVERVIEW_HEADER = \"ov_header.html\";\n+    public static final String OVERVIEW_DEVICE = \"ov_device.html\";\n+    public static final String OVERVIEW_FOOTER = \"ov_footer.html\";\n+    public static final String FWUPDATE1_HTML = \"fw_update1.html\";\n+    public static final String FWUPDATE2_HTML = \"fw_update2.html\";\n+    public static final String ACTION_HTML = \"action.html\";\n+    public static final String FOOTER_HTML = \"footer.html\";\n+    public static final String IMAGE_PATH = \"images/\";\n+    public static final String FORWARD_SCRIPT = \"forward.script\";\n+\n+    public static final String ATTRIBUTE_METATAG = \"metaTag\";\n+    public static final String ATTRIBUTE_CSS_HEADER = \"cssHeader\";\n+    public static final String ATTRIBUTE_CSS_FOOTER = \"cssFooter\";\n+    public static final String ATTRIBUTE_URI = \"uri\";\n+    public static final String ATTRIBUTE_REFRESH = \"refreshTimer\";\n+    public static final String ATTRIBUTE_UID = \"uid\";\n+    public static final String ATTRIBUTE_TOTAL_DEV = \"totalDevices\";\n+    public static final String ATTRIBUTE_MESSAGE = \"message\";\n+    public static final String ATTRIBUTE_STATUS_ICON = \"iconStatus\";\n+    public static final String ATTRIBUTE_DISPLAY_NAME = \"displayName\";\n+    public static final String ATTRIBUTE_DEV_STATUS = \"deviceStatus\";\n+    public static final String ATTRIBUTE_FIRMWARE_SEL = \"firmwareSelection\";\n+    public static final String ATTRIBUTE_ACTION_LIST = \"actionList\";\n+    public static final String ATTRIBUTE_VERSION = \"version\";\n+    public static final String ATTRIBUTE_FW_URL = \"firmwareUrl\";\n+    public static final String ATTRIBUTE_UPDATE_URL = \"updateUrl\";\n+    public static final String ATTRIBUTE_LAST_ALARM = \"lastAlarmTs\";\n+    public static final String ATTRIBUTE_ACTION = \"action\";\n+    public static final String ATTRIBUTE_ACTION_BUTTON = \"actionButtonLabel\";\n+    public static final String ATTRIBUTE_ACTION_URL = \"actionUrl\";\n+    public static final String ATTRIBUTE_SNTP_SERVER = \"sntpServer\";\n+    public static final String ATTRIBUTE_COIOT_STATUS = \"coiotStatus\";\n+    public static final String ATTRIBUTE_COIOT_PEER = \"coiotDestination\";\n+    public static final String ATTRIBUTE_CLOUD_STATUS = \"cloudStatus\";\n+    public static final String ATTRIBUTE_MQTT_STATUS = \"mqttStatus\";\n+    public static final String ATTRIBUTE_ACTIONS_SKIPPED = \"actionsSkipped\";\n+    public static final String ATTRIBUTE_DISCOVERABLE = \"discoverable\";\n+    public static final String ATTRIBUTE_WIFI_RECOVERY = \"wifiAutoRecovery\";\n+    public static final String ATTRIBUTE_MAX_ITEMP = \"maxInternalTemp\";\n+    public static final String ATTRIBUTE_TIMEZONE = \"deviceTimezone\";\n+    public static final String ATTRIBUTE_PWD_PROTECT = \"passwordProtected\";\n+\n+    public static final String URLPARM_UID = \"uid\";\n+    public static final String URLPARM_DEVTYPE = \"deviceType\";\n+    public static final String URLPARM_DEVMODE = \"deviceMode\";\n+    public static final String URLPARM_ACTION = \"action\";\n+    public static final String URLPARM_FILTER = \"filter\";\n+    public static final String URLPARM_TYPE = \"type\";\n+    public static final String URLPARM_VERSION = \"version\";\n+    public static final String URLPARM_UPDATE = \"update\";\n+    public static final String URLPARM_CONNECTION = \"connection\";\n+    public static final String URLPARM_URL = \"url\";\n+\n+    public static final String ACTION_REFRESH = \"refresh\";\n+\n+    public static final String FILTER_ONLINE = \"online\";\n+    public static final String FILTER_INACTIVE = \"inactive\";\n+    public static final String FILTER_ATTENTION = \"attention\";\n+    public static final String FILTER_UPDATE = \"update\";\n+    public static final String FILTER_UNPROTECTED = \"unprotected\";\n+\n+    // Message classes for visual style\n+    public static final String MCMESSAGE = \"message\";\n+    public static final String MCINFO = \"info\";\n+    public static final String MCWARNING = \"warning\";\n+\n+    public static final String ICON_ONLINE = \"online\";\n+    public static final String ICON_OFFLINE = \"offline\";\n+    public static final String ICON_UNINITIALIZED = \"uninitialized\";\n+    public static final String ICON_CONFIG = \"config\";\n+    public static final String ICON_ATTENTION = \"attention\";\n+\n+    public static final String CONNECTION_TYPE_LOCAL = \"local\";\n+    public static final String CONNECTION_TYPE_INTERNET = \"internet\";\n+    public static final String CONNECTION_TYPE_CUSTOM = \"custom\";\n+\n+    public static final String FWPROD = \"prod\";\n+    public static final String FWBETA = \"beta\";\n+\n+    public static final String FWREPO_PROD_URL = \"https://api.shelly.cloud/files/firmware/\";\n+    public static final String FWREPO_TEST_URL = \"https://repo.shelly.cloud/files/firmware/\";\n+    public static final String FWREPO_ARCH_URL = \"http://archive.shelly-tools.de/archive.php\";\n+    public static final String FWREPO_ARCFILE_URL = \"http://archive.shelly-tools.de/version/\";\n+\n+    public static final int CACHE_TIMEOUT_DEF_MIN = 60; // Default timeout for cache entries\n+    public static final int CACHE_TIMEOUT_FW_MIN = 15; // Cache entries for the firmware list 15min\n+}"
  },
  {
    "sha": "dfdad7ec706a88a8ef77252910e8a92f9b1b10c9",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerImageLoader.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerImageLoader.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerImageLoader.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerImageLoader.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import static org.openhab.binding.shelly.internal.manager.ShellyManagerConstants.IMAGE_PATH;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.substringAfter;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.shelly.internal.ShellyHandlerFactory;\n+import org.openhab.binding.shelly.internal.api.ShellyApiException;\n+import org.openhab.binding.shelly.internal.handler.ShellyManagerInterface;\n+import org.openhab.binding.shelly.internal.provider.ShellyTranslationProvider;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link ShellyManagerImageLoader} implements the Shelly Manager's download proxy for images (load them from bundle)\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManagerImageLoader extends ShellyManagerPage {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyManagerImageLoader.class);\n+\n+    public ShellyManagerImageLoader(ConfigurationAdmin configurationAdmin,\n+            ShellyTranslationProvider translationProvider, HttpClient httpClient, String localIp, int localPort,\n+            ShellyHandlerFactory handlerFactory) {\n+        super(configurationAdmin, translationProvider, httpClient, localIp, localPort, handlerFactory);\n+    }\n+\n+    @Override\n+    public ShellyMgrResponse generateContent(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        return loadImage(substringAfter(path, ShellyManagerConstants.SHELLY_MGR_IMAGES_URI + \"/\"));\n+    }\n+\n+    protected ShellyMgrResponse loadImage(String image) throws ShellyApiException {\n+        String file = IMAGE_PATH + image;\n+        logger.trace(\"Read Image from {}\", file);\n+        ClassLoader cl = ShellyManagerInterface.class.getClassLoader();\n+        if (cl != null) {\n+            try (InputStream inputStream = cl.getResourceAsStream(file)) {\n+                if (inputStream != null) {\n+                    byte[] buf = new byte[inputStream.available()];\n+                    inputStream.read(buf);\n+                    return new ShellyMgrResponse(buf, HttpStatus.OK_200, \"image/png\");\n+                }\n+            } catch (IOException | RuntimeException e) {\n+                logger.debug(\"ShellyManager: Unable to read {} from bundle resources!\", image, e);\n+            }\n+        }\n+        return new ShellyMgrResponse(\"Unable to read \" + image + \" from bundle resources!\", HttpStatus.NOT_FOUND_404);\n+    }\n+}"
  },
  {
    "sha": "8ba73b023c57d262e03a94c2392cd856e078ce61",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOtaPage.java",
    "status": "added",
    "additions": 221,
    "deletions": 0,
    "changes": 221,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOtaPage.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOtaPage.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOtaPage.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.SHELLY_API_TIMEOUT_MS;\n+import static org.openhab.binding.shelly.internal.manager.ShellyManagerConstants.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpFields;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.shelly.internal.ShellyHandlerFactory;\n+import org.openhab.binding.shelly.internal.api.ShellyApiException;\n+import org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.ShellySettingsUpdate;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.api.ShellyHttpApi;\n+import org.openhab.binding.shelly.internal.config.ShellyThingConfiguration;\n+import org.openhab.binding.shelly.internal.handler.ShellyManagerInterface;\n+import org.openhab.binding.shelly.internal.provider.ShellyTranslationProvider;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link ShellyManagerOtaPage} implements the Shelly Manager's download proxy for images (load them from bundle)\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManagerOtaPage extends ShellyManagerPage {\n+    protected final Logger logger = LoggerFactory.getLogger(ShellyManagerOtaPage.class);\n+\n+    public ShellyManagerOtaPage(ConfigurationAdmin configurationAdmin, ShellyTranslationProvider translationProvider,\n+            HttpClient httpClient, String localIp, int localPort, ShellyHandlerFactory handlerFactory) {\n+        super(configurationAdmin, translationProvider, httpClient, localIp, localPort, handlerFactory);\n+    }\n+\n+    @Override\n+    public ShellyMgrResponse generateContent(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        if (path.contains(SHELLY_MGR_OTA_URI)) {\n+            return loadFirmware(path, parameters);\n+        } else {\n+            return generatePage(path, parameters);\n+        }\n+    }\n+\n+    public ShellyMgrResponse generatePage(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        String uid = getUrlParm(parameters, URLPARM_UID);\n+        String version = getUrlParm(parameters, URLPARM_VERSION);\n+        String update = getUrlParm(parameters, URLPARM_UPDATE);\n+        String connection = getUrlParm(parameters, URLPARM_CONNECTION);\n+        String url = getUrlParm(parameters, URLPARM_URL);\n+        if (uid.isEmpty() || (version.isEmpty() && connection.isEmpty()) || !getThingHandlers().containsKey(uid)) {\n+            return new ShellyMgrResponse(\"Invalid URL parameters: \" + parameters, HttpStatus.BAD_REQUEST_400);\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        String html = loadHTML(HEADER_HTML, properties);\n+        ShellyManagerInterface th = getThingHandlers().get(uid);\n+        if (th != null) {\n+            properties = fillProperties(new HashMap<>(), uid, th);\n+            ShellyThingConfiguration config = getThingConfig(th, properties);\n+            ShellyDeviceProfile profile = th.getProfile();\n+            String deviceType = getDeviceType(properties);\n+\n+            String uri = !url.isEmpty() && connection.equals(CONNECTION_TYPE_CUSTOM) ? url\n+                    : getFirmwareUrl(config.deviceIp, deviceType, profile.mode, version,\n+                            connection.equals(CONNECTION_TYPE_LOCAL));\n+            if (connection.equalsIgnoreCase(CONNECTION_TYPE_INTERNET)) {\n+                // If target\n+                // - contains \"update=xx\" then use -> ?update=true for release and ?beta=true for beta\n+                // - otherwise qualify full url with ?url=xxxx\n+                if (uri.contains(\"update=\") || uri.contains(\"beta=\")) {\n+                    url = uri;\n+                } else {\n+                    url = URLPARM_URL + \"=\" + uri;\n+                }\n+            } else if (connection.equalsIgnoreCase(CONNECTION_TYPE_LOCAL)) {\n+                // redirect to local server -> http://<oh-ip>:<oh-port>/shelly/manager/ota?deviceType=xxx&version=xxx\n+                String modeParm = !profile.mode.isEmpty() ? \"&\" + URLPARM_DEVMODE + \"=\" + profile.mode : \"\";\n+                url = URLPARM_URL + \"=http://\" + localIp + \":\" + localPort + SHELLY_MGR_OTA_URI + urlEncode(\n+                        \"?\" + URLPARM_DEVTYPE + \"=\" + deviceType + modeParm + \"&\" + URLPARM_VERSION + \"=\" + version);\n+            } else if (connection.equalsIgnoreCase(CONNECTION_TYPE_CUSTOM)) {\n+                // else custom -> don't modify url\n+                uri = url;\n+                url = URLPARM_URL + \"=\" + uri;\n+            }\n+            String updateUrl = url;\n+\n+            properties.put(ATTRIBUTE_VERSION, version);\n+            properties.put(ATTRIBUTE_FW_URL, uri);\n+            properties.put(ATTRIBUTE_UPDATE_URL, \"http://\" + getDeviceIp(properties) + \"/ota?\" + updateUrl);\n+            properties.put(URLPARM_CONNECTION, connection);\n+\n+            if (update.equalsIgnoreCase(\"yes\")) {\n+                // do the update\n+                th.setThingOffline(ThingStatusDetail.FIRMWARE_UPDATING, \"offline.status-error-fwupgrade\");\n+                html += loadHTML(FWUPDATE2_HTML, properties);\n+\n+                new Thread(() -> { // schedule asynchronous reboot\n+                    try {\n+                        ShellyHttpApi api = new ShellyHttpApi(uid, config, httpClient);\n+                        ShellySettingsUpdate result = api.firmwareUpdate(updateUrl);\n+                        String status = getString(result.status);\n+                        logger.info(\"{}: {}\", th.getThingName(), getMessage(\"fwupdate.initiated\", status));\n+\n+                        // Shelly Motion needs almost 2min for upgrade\n+                        scheduleUpdate(th, uid + \"_upgrade\", profile.isMotion ? 110 : 30);\n+                    } catch (ShellyApiException e) {\n+                        // maybe the device restarts before returning the http response\n+                        logger.warn(\"{}: {}\", th.getThingName(), getMessage(\"fwupdate.initiated\", e.toString()));\n+                    }\n+                }).start();\n+            } else {\n+                String message = getMessageP(\"fwupdate.confirm\", MCINFO);\n+                properties.put(ATTRIBUTE_MESSAGE, message);\n+                html += loadHTML(FWUPDATE1_HTML, properties);\n+            }\n+        }\n+\n+        html += loadHTML(FOOTER_HTML, properties);\n+        return new ShellyMgrResponse(html, HttpStatus.OK_200);\n+    }\n+\n+    protected ShellyMgrResponse loadFirmware(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        String deviceType = getUrlParm(parameters, URLPARM_DEVTYPE);\n+        String deviceMode = getUrlParm(parameters, URLPARM_DEVMODE);\n+        String version = getUrlParm(parameters, URLPARM_VERSION);\n+        String url = getUrlParm(parameters, URLPARM_URL);\n+        logger.info(\"ShellyManager: {}\", getMessage(\"fwupdate.info\", deviceType, version, url));\n+\n+        String failure = getMessage(\"fwupdate.notfound\", deviceType, version, url);\n+        try {\n+            if (url.isEmpty()) {\n+                url = getFirmwareUrl(\"\", deviceType, deviceMode, version, true);\n+                if (url.isEmpty()) {\n+                    logger.warn(\"ShellyManager: {}\", failure);\n+                    return new ShellyMgrResponse(failure, HttpStatus.BAD_REQUEST_400);\n+                }\n+            }\n+\n+            logger.debug(\"ShellyManager: Loading firmware from {}\", url);\n+            // BufferedInputStream in = new BufferedInputStream(new URL(url).openStream());\n+            // byte[] buf = new byte[in.available()];\n+            // in.read(buf);\n+            Request request = httpClient.newRequest(url).method(HttpMethod.GET).timeout(SHELLY_API_TIMEOUT_MS,\n+                    TimeUnit.MILLISECONDS);\n+            ContentResponse contentResponse = request.send();\n+            HttpFields fields = contentResponse.getHeaders();\n+            Map<String, String> headers = new TreeMap<>();\n+            String etag = getString(fields.get(\"ETag\"));\n+            String ranges = getString(fields.get(\"accept-ranges\"));\n+            String modified = getString(fields.get(\"Last-Modified\"));\n+            headers.put(\"ETag\", etag);\n+            headers.put(\"accept-ranges\", ranges);\n+            headers.put(\"Last-Modified\", modified);\n+            byte[] data = contentResponse.getContent();\n+            logger.info(\"ShellyManager: {}\", getMessage(\"fwupdate.success\", data.length, etag, modified));\n+            return new ShellyMgrResponse(data, HttpStatus.OK_200, contentResponse.getMediaType(), headers);\n+        } catch (ExecutionException | TimeoutException | InterruptedException | RuntimeException e) {\n+            logger.info(\"ShellyManager: {}\", failure, e);\n+            return new ShellyMgrResponse(failure, HttpStatus.BAD_REQUEST_400);\n+\n+        }\n+    }\n+\n+    protected String getFirmwareUrl(String deviceIp, String deviceType, String mode, String version, boolean local)\n+            throws ShellyApiException {\n+        switch (version) {\n+            case FWPROD:\n+            case FWBETA:\n+                boolean prod = version.equals(FWPROD);\n+                if (!local) {\n+                    // run regular device update\n+                    return prod ? \"update=true\" : \"beta=true\";\n+                } else {\n+                    // convert prod/beta to full url\n+                    FwRepoEntry fw = getFirmwareRepoEntry(deviceType, mode);\n+                    String url = getString(prod ? fw.url : fw.beta_url);\n+                    logger.debug(\"ShellyManager: Map {} release to url {}, version {}\", url,\n+                            prod ? fw.url : fw.beta_url, prod ? fw.version : fw.beta_ver);\n+                    return url;\n+                }\n+            default: // Update from firmware archive\n+                FwArchList list = getFirmwareArchiveList(deviceType);\n+                ArrayList<FwArchEntry> versions = list.versions;\n+                if (versions != null) {\n+                    for (FwArchEntry e : versions) {\n+                        String url = FWREPO_ARCFILE_URL + version + \"/\" + getString(e.file);\n+                        if (getString(e.version).equalsIgnoreCase(version)) {\n+                            return url;\n+                        }\n+                    }\n+                }\n+        }\n+        return \"\";\n+    }\n+}"
  },
  {
    "sha": "c148f0678c22eeec0afa12a7d8330a155c4be36f",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOverviewPage.java",
    "status": "added",
    "additions": 305,
    "deletions": 0,
    "changes": 305,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOverviewPage.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOverviewPage.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerOverviewPage.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyDeviceProfile.extractFwVersion;\n+import static org.openhab.binding.shelly.internal.manager.ShellyManagerConstants.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.shelly.internal.ShellyHandlerFactory;\n+import org.openhab.binding.shelly.internal.api.ShellyApiException;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.config.ShellyThingConfiguration;\n+import org.openhab.binding.shelly.internal.handler.ShellyDeviceStats;\n+import org.openhab.binding.shelly.internal.handler.ShellyManagerInterface;\n+import org.openhab.binding.shelly.internal.provider.ShellyTranslationProvider;\n+import org.openhab.binding.shelly.internal.util.ShellyVersionDTO;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link ShellyManagerOtaPage} implements the Shelly Manager's device overview page\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManagerOverviewPage extends ShellyManagerPage {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyManagerOverviewPage.class);\n+\n+    public ShellyManagerOverviewPage(ConfigurationAdmin configurationAdmin,\n+            ShellyTranslationProvider translationProvider, HttpClient httpClient, String localIp, int localPort,\n+            ShellyHandlerFactory handlerFactory) {\n+        super(configurationAdmin, translationProvider, httpClient, localIp, localPort, handlerFactory);\n+    }\n+\n+    @Override\n+    public ShellyMgrResponse generateContent(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        String filter = getUrlParm(parameters, URLPARM_FILTER).toLowerCase();\n+        String action = getUrlParm(parameters, URLPARM_ACTION).toLowerCase();\n+        String uidParm = getUrlParm(parameters, URLPARM_UID).toLowerCase();\n+\n+        logger.debug(\"Generating overview for {}Â devices\", getThingHandlers().size());\n+\n+        String html = \"\";\n+        Map<String, String> properties = new HashMap<>();\n+        properties.put(ATTRIBUTE_METATAG, \"<meta http-equiv=\\\"refresh\\\" content=\\\"60\\\" />\");\n+        properties.put(ATTRIBUTE_CSS_HEADER, loadHTML(OVERVIEW_HEADER, properties));\n+\n+        String deviceHtml = \"\";\n+        TreeMap<String, ShellyManagerInterface> sortedMap = new TreeMap<>();\n+        for (Map.Entry<String, ShellyManagerInterface> th : getThingHandlers().entrySet()) { // sort by Device Name\n+            ShellyManagerInterface handler = th.getValue();\n+            String deviceName = getDisplayName(handler.getThing().getProperties());\n+            sortedMap.put(deviceName, handler);\n+        }\n+\n+        html = loadHTML(HEADER_HTML, properties);\n+        html += loadHTML(OVERVIEW_HTML, properties);\n+\n+        int filteredDevices = 0;\n+        for (Map.Entry<String, ShellyManagerInterface> handler : sortedMap.entrySet()) {\n+            try {\n+                ShellyManagerInterface th = handler.getValue();\n+                ThingStatus status = th.getThing().getStatus();\n+                ShellyDeviceProfile profile = th.getProfile();\n+                String uid = getString(th.getThing().getUID().getAsString()); // handler.getKey();\n+\n+                if (action.equals(ACTION_REFRESH) && (uidParm.isEmpty() || uidParm.equals(uid))) {\n+                    // Refresh thing status, this is asynchronosly and takes 0-3sec\n+                    // so we force a page reload after 5sec\n+                    th.requestUpdates(1, true);\n+                }\n+\n+                Map<String, String> warnings = getStatusWarnings(th);\n+                if (applyFilter(th, filter) || (filter.equals(FILTER_ATTENTION) && !warnings.isEmpty())) {\n+                    filteredDevices++;\n+                    properties.clear();\n+                    fillProperties(properties, uid, handler.getValue());\n+                    String deviceType = getDeviceType(properties);\n+\n+                    properties.put(ATTRIBUTE_DISPLAY_NAME, handler.getKey());\n+                    properties.put(ATTRIBUTE_DEV_STATUS, fillDeviceStatus(warnings));\n+                    if (!warnings.isEmpty() && (status != ThingStatus.UNKNOWN)) {\n+                        properties.put(ATTRIBUTE_STATUS_ICON, ICON_ATTENTION);\n+                    }\n+                    if (!deviceType.equalsIgnoreCase(\"unknown\") && (status == ThingStatus.ONLINE)) {\n+                        properties.put(ATTRIBUTE_FIRMWARE_SEL, fillFirmwareHtml(uid, deviceType, profile.mode));\n+                        properties.put(ATTRIBUTE_ACTION_LIST, fillActionHtml(th, uid));\n+                    } else {\n+                        properties.put(ATTRIBUTE_FIRMWARE_SEL, \"\");\n+                        properties.put(ATTRIBUTE_ACTION_LIST, \"\");\n+                    }\n+                    html += loadHTML(OVERVIEW_DEVICE, properties);\n+                }\n+            } catch (ShellyApiException e) {\n+                logger.debug(\"{}: Exception\", LOG_PREFIX, e);\n+            }\n+        }\n+\n+        properties.clear();\n+        properties.put(\"numberDevices\", \"<span class=\\\"footerDevices\\\">\" + \"Number of devices: \" + filteredDevices\n+                + \" of \" + String.valueOf(getThingHandlers().size()) + \"&nbsp;</span>\");\n+        properties.put(ATTRIBUTE_CSS_FOOTER, loadHTML(OVERVIEW_FOOTER, properties));\n+        html += deviceHtml + loadHTML(FOOTER_HTML, properties);\n+        return new ShellyMgrResponse(fillAttributes(html, properties), HttpStatus.OK_200);\n+    }\n+\n+    private String fillFirmwareHtml(String uid, String deviceType, String mode) throws ShellyApiException {\n+        String html = \"\\n\\t\\t\\t\\t<select name=\\\"fwList\\\" id=\\\"fwList\\\" onchange=\\\"location = this.options[this.selectedIndex].value;\\\">\\n\";\n+        html += \"\\t\\t\\t\\t\\t<option value=\\\"\\\" selected disabled hidden>update to</option>\\n\";\n+\n+        String pVersion = \"\";\n+        String bVersion = \"\";\n+        String updateUrl = SHELLY_MGR_FWUPDATE_URI + \"?\" + URLPARM_UID + \"=\" + urlEncode(uid);\n+        try {\n+            // Get current prod + beta version from original firmware repo\n+            logger.debug(\"{}: Load firmware version list for device type {}\", LOG_PREFIX, deviceType);\n+            FwRepoEntry fw = getFirmwareRepoEntry(deviceType, mode);\n+            pVersion = extractFwVersion(fw.version);\n+            if (!pVersion.isEmpty()) {\n+                html += \"\\t\\t\\t\\t\\t<option value=\\\"\" + updateUrl + \"&\" + URLPARM_VERSION + \"=\" + FWPROD + \"\\\">Release \"\n+                        + pVersion + \"</option>\\n\";\n+            }\n+            bVersion = extractFwVersion(fw.beta_ver);\n+            if (!bVersion.isEmpty()) {\n+                html += \"\\t\\t\\t\\t\\t<option value=\\\"\" + updateUrl + \"&\" + URLPARM_VERSION + \"=\" + FWBETA + \"\\\">Beta \"\n+                        + bVersion + \"</option>\\n\";\n+            }\n+\n+            // Add those from Shelly Firmware Archive\n+            String json = httpGet(FWREPO_ARCH_URL + \"?\" + URLPARM_TYPE + \"=\" + deviceType);\n+            if (json.startsWith(\"[]\")) {\n+                // no files available for this device type\n+                logger.debug(\"{}: No firmware files found for device type {}\", LOG_PREFIX, deviceType);\n+            } else {\n+                // Create selection list\n+                json = \"{\" + json.replace(\"[{\", \"\\\"versions\\\":[{\") + \"}\"; // make it an named array\n+                FwArchList list = getFirmwareArchiveList(deviceType);\n+                ArrayList<FwArchEntry> versions = list.versions;\n+                if (versions != null) {\n+                    html += \"\\t\\t\\t\\t\\t<option value=\\\"\\\" disabled>-- Archive:</option>\\n\";\n+                    for (int i = versions.size() - 1; i >= 0; i--) {\n+                        FwArchEntry e = versions.get(i);\n+                        String version = getString(e.version);\n+                        ShellyVersionDTO v = new ShellyVersionDTO();\n+                        if (!version.equalsIgnoreCase(pVersion) && !version.equalsIgnoreCase(bVersion)\n+                                && (v.compare(version, SHELLY_API_MIN_FWCOIOT) >= 0) || version.contains(\"master\")) {\n+                            html += \"\\t\\t\\t\\t\\t<option value=\\\"\" + updateUrl + \"&\" + URLPARM_VERSION + \"=\" + version\n+                                    + \"\\\">\" + version + \"</option>\\n\";\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (ShellyApiException e) {\n+            logger.debug(\"{}: Unable to retrieve firmware list: {}\", LOG_PREFIX, e.toString());\n+        }\n+\n+        html += \"\\t\\t\\t\\t\\t<option class=\\\"select-hr\\\" value=\\\"\" + SHELLY_MGR_FWUPDATE_URI + \"?uid=\" + uid\n+                + \"&connection=custom\\\">Custom URL</option>\\n\";\n+\n+        html += \"\\t\\t\\t\\t</select>\\n\\t\\t\\t\";\n+\n+        return html;\n+    }\n+\n+    private String fillActionHtml(ShellyManagerInterface handler, String uid) {\n+        String html = \"\\n\\t\\t\\t\\t<select name=\\\"actionList\\\" id=\\\"actionList\\\" onchange=\\\"location = '\"\n+                + SHELLY_MGR_ACTION_URI + \"?uid=\" + urlEncode(uid) + \"&\" + URLPARM_ACTION\n+                + \"='+this.options[this.selectedIndex].value;\\\">\\n\";\n+        html += \"\\t\\t\\t\\t\\t<option value=\\\"\\\" selected disabled>select</option>\\n\";\n+\n+        Map<String, String> actionList = ShellyManagerActionPage.getActions(handler.getProfile());\n+        for (Map.Entry<String, String> a : actionList.entrySet()) {\n+            String value = a.getValue();\n+            String seperator = \"\";\n+            if (value.startsWith(\"-\")) {\n+                // seperator = \"class=\\\"select-hr\\\" \";\n+                html += \"\\t\\t\\t\\t\\t<option class=\\\"select-hr\\\" role=\\\"seperator\\\" disabled>&nbsp;</option>\\n\";\n+                value = substringAfterLast(value, \"-\");\n+            }\n+            html += \"\\t\\t\\t\\t\\t<option \" + seperator + \"value=\\\"\" + a.getKey()\n+                    + (value.startsWith(ACTION_NONE) ? \" disabled \" : \"\") + \"\\\">\" + value + \"</option>\\n\";\n+        }\n+        html += \"\\t\\t\\t\\t</select>\\n\\t\\t\\t\";\n+        return html;\n+    }\n+\n+    private boolean applyFilter(ShellyManagerInterface handler, String filter) {\n+        ThingStatus status = handler.getThing().getStatus();\n+        ShellyDeviceProfile profile = handler.getProfile();\n+\n+        switch (filter) {\n+            case FILTER_ONLINE:\n+                return status == ThingStatus.ONLINE;\n+            case FILTER_INACTIVE:\n+                return status != ThingStatus.ONLINE;\n+            case FILTER_ATTENTION:\n+                return false;\n+            case FILTER_UPDATE:\n+                // return handler.getChannelValue(CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_UPDATE) == OnOffType.ON;\n+                return getBool(profile.status.hasUpdate);\n+            case FILTER_UNPROTECTED:\n+                return !profile.auth;\n+            case \"*\":\n+            default:\n+                return true;\n+        }\n+    }\n+\n+    private Map<String, String> getStatusWarnings(ShellyManagerInterface handler) {\n+        Thing thing = handler.getThing();\n+        ThingStatus status = handler.getThing().getStatus();\n+        ShellyDeviceStats stats = handler.getStats();\n+        ShellyDeviceProfile profile = handler.getProfile();\n+        ShellyThingConfiguration config = thing.getConfiguration().as(ShellyThingConfiguration.class);\n+        TreeMap<String, String> result = new TreeMap<>();\n+\n+        if ((status != ThingStatus.ONLINE) && (status != ThingStatus.UNKNOWN)) {\n+            result.put(\"Thing Status\", status.toString());\n+        }\n+        State wifiSignal = handler.getChannelValue(CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_RSSI);\n+        if ((profile.alwaysOn || (profile.hasBattery && (status == ThingStatus.ONLINE)))\n+                && ((wifiSignal != UnDefType.NULL) && (((DecimalType) wifiSignal).intValue() < 2))) {\n+            result.put(\"Weak WiFi Signal\", wifiSignal.toString());\n+        }\n+        if (profile.hasBattery) {\n+            State lowBattery = handler.getChannelValue(CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LOW);\n+            if ((lowBattery == OnOffType.ON)) {\n+                lowBattery = handler.getChannelValue(CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL);\n+                result.put(\"Battery Low\", lowBattery.toString());\n+            }\n+        }\n+\n+        if (stats.lastAlarm.equalsIgnoreCase(ALARM_TYPE_RESTARTED)) {\n+            result.put(\"Device Alarm\", ALARM_TYPE_RESTARTED + \" (\" + convertTimestamp(stats.lastAlarmTs) + \")\");\n+        }\n+        if (getBool(profile.status.overtemperature)) {\n+            result.put(\"Device Alarm\", ALARM_TYPE_OVERTEMP);\n+        }\n+        if (getBool(profile.status.overload)) {\n+            result.put(\"Device Alarm\", ALARM_TYPE_OVERLOAD);\n+        }\n+        if (getBool(profile.status.loaderror)) {\n+            result.put(\"Device Alarm\", ALARM_TYPE_LOADERR);\n+        }\n+        if (profile.isSensor) {\n+            State sensorError = handler.getChannelValue(CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR);\n+            if (sensorError != UnDefType.NULL) {\n+                if (!sensorError.toString().isEmpty()) {\n+                    result.put(\"Device Alarm\", ALARM_TYPE_SENSOR_ERROR);\n+                }\n+            }\n+        }\n+        if (profile.alwaysOn && (status == ThingStatus.ONLINE)) {\n+            if ((config.eventsCoIoT) && (profile.settings.coiot != null)) {\n+                if ((profile.settings.coiot.enabled != null) && !profile.settings.coiot.enabled) {\n+                    result.put(\"CoIoT Status\", \"COIOT_DISABLED\");\n+                } else if (stats.coiotMessages == 0) {\n+                    result.put(\"CoIoT Discovery\", \"NO_COIOT_DISCOVERY\");\n+                } else if (stats.coiotMessages < 2) {\n+                    result.put(\"CoIoT Multicast\", \"NO_COIOT_MULTICAST\");\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private String fillDeviceStatus(Map<String, String> devStatus) {\n+        if (devStatus.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        String result = \"\\t\\t\\t\\t<tr><td colspan = \\\"2\\\">Notifications:</td></tr>\";\n+        for (Map.Entry<String, String> ds : devStatus.entrySet()) {\n+            result += \"\\t\\t\\t\\t<tr><td>\" + ds.getKey() + \"</td><td>\" + ds.getValue() + \"</td></tr>\\n\";\n+        }\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "6a8259a646e1c2ed367447401ffd81e95b8c69c2",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerPage.java",
    "status": "added",
    "additions": 571,
    "deletions": 0,
    "changes": 571,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerPage.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerPage.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerPage.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,571 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.manager.ShellyManagerConstants.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+import static org.openhab.core.thing.Thing.*;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.TreeMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.shelly.internal.ShellyHandlerFactory;\n+import org.openhab.binding.shelly.internal.api.ShellyApiException;\n+import org.openhab.binding.shelly.internal.api.ShellyApiResult;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.api.ShellyHttpApi;\n+import org.openhab.binding.shelly.internal.config.ShellyBindingConfiguration;\n+import org.openhab.binding.shelly.internal.config.ShellyThingConfiguration;\n+import org.openhab.binding.shelly.internal.handler.ShellyDeviceStats;\n+import org.openhab.binding.shelly.internal.handler.ShellyManagerInterface;\n+import org.openhab.binding.shelly.internal.provider.ShellyTranslationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * {@link ShellyManagerOtaPage} implements the Shelly Manager's page template\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyManagerPage {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyManagerPage.class);\n+    protected final ShellyTranslationProvider resources;\n+\n+    private final ShellyHandlerFactory handlerFactory;\n+    protected final HttpClient httpClient;\n+    protected final ConfigurationAdmin configurationAdmin;\n+    protected final ShellyBindingConfiguration bindingConfig = new ShellyBindingConfiguration();\n+    protected final String localIp;\n+    protected final int localPort;\n+\n+    protected final Map<String, String> htmlTemplates = new HashMap<>();\n+    protected final Gson gson = new Gson();\n+\n+    protected final ShellyManagerCache<String, FwRepoEntry> firmwareRepo = new ShellyManagerCache<>(15 * 60 * 1000);\n+    protected final ShellyManagerCache<String, FwArchList> firmwareArch = new ShellyManagerCache<>(15 * 60 * 1000);\n+\n+    public static class ShellyMgrResponse {\n+        public @Nullable Object data = \"\";\n+        public String mimeType = \"\";\n+        public String redirectUrl = \"\";\n+        public int code;\n+        public Map<String, String> headers = new HashMap<>();\n+\n+        public ShellyMgrResponse() {\n+            init(\"\", HttpStatus.OK_200, \"text/html\", null);\n+        }\n+\n+        public ShellyMgrResponse(Object data, int code) {\n+            init(data, code, \"text/html\", null);\n+        }\n+\n+        public ShellyMgrResponse(Object data, int code, String mimeType) {\n+            init(data, code, mimeType, null);\n+        }\n+\n+        public ShellyMgrResponse(Object data, int code, String mimeType, Map<String, String> headers) {\n+            init(data, code, mimeType, headers);\n+        }\n+\n+        private void init(Object message, int code, String mimeType, @Nullable Map<String, String> headers) {\n+            this.data = message;\n+            this.code = code;\n+            this.mimeType = mimeType;\n+            this.headers = headers != null ? headers : new TreeMap<>();\n+        }\n+\n+        public void setRedirect(String redirectUrl) {\n+            this.redirectUrl = redirectUrl;\n+        }\n+    }\n+\n+    public static class FwArchEntry {\n+        // {\"version\":\"v1.5.10\",\"file\":\"SHSW-1.zip\"}\n+        public @Nullable String version;\n+        public @Nullable String file;\n+    }\n+\n+    public static class FwArchList {\n+        public @Nullable ArrayList<FwArchEntry> versions;\n+    }\n+\n+    public static class FwRepoEntry {\n+        public @Nullable String url; // prod\n+        public @Nullable String version;\n+\n+        public @Nullable String beta_url; // beta version if avilable\n+        public @Nullable String beta_ver;\n+    }\n+\n+    public ShellyManagerPage(ConfigurationAdmin configurationAdmin, ShellyTranslationProvider translationProvider,\n+            HttpClient httpClient, String localIp, int localPort, ShellyHandlerFactory handlerFactory) {\n+        this.configurationAdmin = configurationAdmin;\n+        this.resources = translationProvider;\n+        this.handlerFactory = handlerFactory;\n+        this.httpClient = httpClient;\n+        this.localIp = localIp;\n+        this.localPort = localPort;\n+    }\n+\n+    public ShellyMgrResponse generateContent(String path, Map<String, String[]> parameters) throws ShellyApiException {\n+        return new ShellyMgrResponse(\"Invalid Request\", HttpStatus.BAD_REQUEST_400);\n+    }\n+\n+    protected String loadHTML(String template) throws ShellyApiException {\n+        if (htmlTemplates.containsKey(template)) {\n+            return getString(htmlTemplates.get(template));\n+        }\n+\n+        String html = \"\";\n+        String file = TEMPLATE_PATH + template;\n+        logger.debug(\"Read HTML from {}\", file);\n+        ClassLoader cl = ShellyManagerInterface.class.getClassLoader();\n+        if (cl != null) {\n+            try (InputStream inputStream = cl.getResourceAsStream(file)) {\n+                if (inputStream != null) {\n+                    html = new BufferedReader(new InputStreamReader(inputStream)).lines()\n+                            .collect(Collectors.joining(\"\\n\"));\n+                    htmlTemplates.put(template, html);\n+                }\n+            } catch (IOException e) {\n+                throw new ShellyApiException(\"Unable to read \" + file + \" from bundle resources!\", e);\n+            }\n+        }\n+        return html;\n+    }\n+\n+    protected String loadHTML(String template, Map<String, String> properties) throws ShellyApiException {\n+        properties.put(ATTRIBUTE_URI, SHELLY_MANAGER_URI);\n+        String html = loadHTML(template);\n+        return fillAttributes(html, properties);\n+    }\n+\n+    protected Map<String, String> fillProperties(Map<String, String> properties, String uid,\n+            ShellyManagerInterface th) {\n+        try {\n+            Configuration serviceConfig = configurationAdmin.getConfiguration(\"binding.\" + BINDING_ID);\n+            bindingConfig.updateFromProperties(serviceConfig.getProperties());\n+        } catch (IOException e) {\n+            logger.debug(\"ShellyManager: Unable to get bindingConfig\");\n+        }\n+\n+        properties.putAll(th.getThing().getProperties());\n+\n+        Thing thing = th.getThing();\n+        ThingStatus status = thing.getStatus();\n+        properties.put(\"thingName\", getString(thing.getLabel()));\n+        properties.put(\"thingStatus\", status.toString());\n+        ThingStatusDetail detail = thing.getStatusInfo().getStatusDetail();\n+        properties.put(\"thingStatusDetail\", detail.equals(ThingStatusDetail.NONE) ? \"\" : getString(detail.toString()));\n+        properties.put(\"thingStatusDescr\", getString(thing.getStatusInfo().getDescription()));\n+        properties.put(ATTRIBUTE_UID, uid);\n+\n+        ShellyDeviceProfile profile = th.getProfile();\n+        ShellyThingConfiguration config = thing.getConfiguration().as(ShellyThingConfiguration.class);\n+        ShellyDeviceStats stats = th.getStats();\n+        properties.putAll(stats.asProperties());\n+\n+        for (Map.Entry<String, Object> p : thing.getConfiguration().getProperties().entrySet()) {\n+            String key = p.getKey();\n+            if (p.getValue() != null) {\n+                String value = p.getValue().toString();\n+                properties.put(key, value);\n+            }\n+        }\n+\n+        State state = th.getChannelValue(CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_NAME);\n+        if (state != UnDefType.NULL) {\n+            addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_NAME);\n+        } else {\n+            // If the Shelly doesn't provide a device name (not configured) we use the service name\n+            String deviceName = getDeviceName(properties);\n+            properties.put(PROPERTY_DEV_NAME,\n+                    !deviceName.isEmpty() ? deviceName : getString(properties.get(PROPERTY_SERVICE_NAME)));\n+        }\n+\n+        if (config.userId.isEmpty()) {\n+            // Get defauls from Binding Config\n+            properties.put(\"userId\", bindingConfig.defaultUserId);\n+            properties.put(\"password\", bindingConfig.defaultPassword);\n+        }\n+\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_RSSI);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_UPTIME);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_HEARTBEAT);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_WAKEUP);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_UPDATE);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ALARM);\n+        addAttribute(properties, th, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER);\n+\n+        properties.put(ATTRIBUTE_DISCOVERABLE, String.valueOf(getBool(profile.settings.discoverable)));\n+        properties.put(ATTRIBUTE_WIFI_RECOVERY, String.valueOf(getBool(profile.settings.wifiRecoveryReboot)));\n+        properties.put(ATTRIBUTE_PWD_PROTECT,\n+                profile.auth ? \"enabled, user=\" + getString(profile.settings.login.username) : \"disabled\");\n+        properties.put(ATTRIBUTE_TIMEZONE,\n+                getString(profile.settings.timezone) + \", auto-detect: \" + getBool(profile.settings.tzautodetect));\n+        properties.put(ATTRIBUTE_ACTIONS_SKIPPED,\n+                profile.status.astats != null ? String.valueOf(profile.status.astats.skipped) : \"n/a\");\n+        properties.put(ATTRIBUTE_MAX_ITEMP, stats.maxInternalTemp > 0 ? stats.maxInternalTemp + \" Â°C\" : \"n/a\");\n+\n+        // Shelly H&T: When external power is connected the battery level is not valid\n+        if (!profile.isHT || (getInteger(profile.settings.externalPower) == 0)) {\n+            addAttribute(properties, th, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL);\n+        } else {\n+            properties.put(CHANNEL_SENSOR_BAT_LEVEL, \"USB\");\n+        }\n+\n+        String wiFiSignal = getString(properties.get(CHANNEL_DEVST_RSSI));\n+        if (!wiFiSignal.isEmpty()) {\n+            properties.put(\"wifiSignalRssi\", wiFiSignal + \" / \" + stats.wifiRssi + \" dBm\");\n+            properties.put(\"imgWiFi\", \"imgWiFi\" + wiFiSignal);\n+        }\n+\n+        if (profile.settings.sntp != null) {\n+            properties.put(ATTRIBUTE_SNTP_SERVER,\n+                    getString(profile.settings.sntp.server) + \", enabled: \" + getBool((profile.settings.sntp.enabled)));\n+        }\n+\n+        boolean coiotEnabled = true;\n+        if ((profile.settings.coiot != null) && (profile.settings.coiot.enabled != null)) {\n+            coiotEnabled = profile.settings.coiot.enabled;\n+        }\n+        properties.put(ATTRIBUTE_COIOT_STATUS,\n+                !coiotEnabled ? \"Disbaled in settings\" : \"Events are \" + (config.eventsCoIoT ? \"enabled\" : \"disabled\"));\n+        properties.put(ATTRIBUTE_COIOT_PEER,\n+                (profile.settings.coiot != null) && !getString(profile.settings.coiot.peer).isEmpty()\n+                        ? profile.settings.coiot.peer\n+                        : \"Multicast\");\n+        if (profile.status.cloud != null) {\n+            properties.put(ATTRIBUTE_CLOUD_STATUS,\n+                    getBool(profile.settings.cloud.enabled)\n+                            ? getBool(profile.status.cloud.connected) ? \"connected\" : \"enabled\"\n+                            : \"disabled\");\n+        } else {\n+            properties.put(ATTRIBUTE_CLOUD_STATUS, \"unknown\");\n+        }\n+        if (profile.status.mqtt != null) {\n+            properties.put(ATTRIBUTE_MQTT_STATUS,\n+                    getBool(profile.settings.mqtt.enable)\n+                            ? getBool(profile.status.mqtt.connected) ? \"connected\" : \"enabled\"\n+                            : \"disabled\");\n+        } else {\n+            properties.put(ATTRIBUTE_MQTT_STATUS, \"unknown\");\n+        }\n+\n+        String statusIcon = \"\";\n+        ThingStatus ts = th.getThing().getStatus();\n+        switch (ts) {\n+            case UNINITIALIZED:\n+            case REMOVED:\n+            case REMOVING:\n+                statusIcon = ICON_UNINITIALIZED;\n+                break;\n+            case OFFLINE:\n+                ThingStatusDetail sd = th.getThing().getStatusInfo().getStatusDetail();\n+                if (uid.contains(THING_TYPE_SHELLYUNKNOWN_STR) || (sd == ThingStatusDetail.CONFIGURATION_ERROR)\n+                        || (sd == ThingStatusDetail.HANDLER_CONFIGURATION_PENDING)) {\n+                    statusIcon = ICON_CONFIG;\n+                    break;\n+                }\n+            default:\n+                statusIcon = ts.toString();\n+        }\n+        properties.put(ATTRIBUTE_STATUS_ICON, statusIcon.toLowerCase());\n+\n+        return properties;\n+    }\n+\n+    private void addAttribute(Map<String, String> properties, ShellyManagerInterface thingHandler, String group,\n+            String attribute) {\n+        State state = thingHandler.getChannelValue(group, attribute);\n+        String value = \"\";\n+        if (state != UnDefType.NULL) {\n+            if (state instanceof DateTimeType) {\n+                DateTimeType dt = (DateTimeType) state;\n+                switch (attribute) {\n+                    case ATTRIBUTE_LAST_ALARM:\n+                        value = dt.format(null).replace('T', ' ').replace('-', '/');\n+                        break;\n+                    default:\n+                        value = getTimestamp(dt);\n+                        value = dt.format(null).replace('T', ' ').replace('-', '/');\n+                }\n+            } else {\n+                value = state.toString();\n+            }\n+        }\n+        properties.put(attribute, value);\n+    }\n+\n+    protected String fillAttributes(String template, Map<String, String> properties) {\n+        if (!template.contains(\"${\")) {\n+            // no replacement necessary\n+            return template;\n+        }\n+\n+        String result = template;\n+        for (Map.Entry<String, String> var : properties.entrySet()) {\n+            result = result.replaceAll(java.util.regex.Pattern.quote(\"${\" + var.getKey() + \"}\"),\n+                    getValue(properties, var.getKey()));\n+        }\n+\n+        if (result.contains(\"${\")) {\n+            return result.replaceAll(\"\\\\Q${\\\\E.*}\", \"\");\n+        } else {\n+            return result;\n+        }\n+    }\n+\n+    protected String getValue(Map<String, String> properties, String attribute) {\n+        String value = getString(properties.get(attribute));\n+        if (!value.isEmpty()) {\n+            switch (attribute) {\n+                case PROPERTY_FIRMWARE_VERSION:\n+                    value = substringBeforeLast(value, \"-\");\n+                    break;\n+                case PROPERTY_UPDATE_AVAILABLE:\n+                    value = value.replace(OnOffType.ON.toString(), \"yes\");\n+                    value = value.replace(OnOffType.OFF.toString(), \"no\");\n+                    break;\n+                case CHANNEL_DEVST_HEARTBEAT:\n+                    break;\n+            }\n+        }\n+        return value;\n+    }\n+\n+    protected FwRepoEntry getFirmwareRepoEntry(String deviceType, String mode) throws ShellyApiException {\n+        logger.debug(\"ShellyManager: Load firmware list from {}\", FWREPO_PROD_URL);\n+        FwRepoEntry fw = null;\n+        if (firmwareRepo.containsKey(deviceType)) {\n+            fw = firmwareRepo.get(deviceType);\n+        }\n+        String json = httpGet(FWREPO_PROD_URL); // returns a strange JSON format so we are parsing this manually\n+        String entry = substringBetween(json, \"\\\"\" + deviceType + \"\\\":{\", \"}\");\n+        if (!entry.isEmpty()) {\n+            entry = \"{\" + entry + \"}\";\n+            /*\n+             * Example:\n+             * \"SHPLG-1\":{\n+             * \"url\":\"http:\\/\\/repo.shelly.cloud\\/firmware\\/SHPLG-1.zip\",\n+             * \"version\":\"20201228-092318\\/v1.9.3@ad2bb4e3\",\n+             * \"beta_url\":\"http:\\/\\/repo.shelly.cloud\\/firmware\\/rc\\/SHPLG-1.zip\",\n+             * \"beta_ver\":\"20201223-093703\\/v1.9.3-rc5@3f583801\"\n+             * },\n+             */\n+            fw = fromJson(gson, entry, FwRepoEntry.class);\n+\n+            // Special case: RGW2 has a split firmware - xxx-white.zip vs. xxx-color.zip\n+            if (!mode.isEmpty() && deviceType.equalsIgnoreCase(SHELLYDT_RGBW2)) {\n+                // check for spilt firmware\n+                String url = substringBefore(fw.url, \".zip\") + \"-\" + mode + \".zip\";\n+                if (testUrl(url)) {\n+                    fw.url = url;\n+                    logger.debug(\"ShellyManager: Release Split-URL for device type {} is {}\", deviceType, url);\n+                }\n+                url = substringBefore(fw.beta_url, \".zip\") + \"-\" + mode + \".zip\";\n+                if (testUrl(url)) {\n+                    fw.beta_url = url;\n+                    logger.debug(\"ShellyManager: Beta Split-URL for device type {} is {}\", deviceType, url);\n+                }\n+            }\n+\n+            firmwareRepo.put(deviceType, fw);\n+        }\n+\n+        return fw != null ? fw : new FwRepoEntry();\n+    }\n+\n+    protected FwArchList getFirmwareArchiveList(String deviceType) throws ShellyApiException {\n+        FwArchList list;\n+        String json = \"\";\n+\n+        if (firmwareArch.contains(deviceType)) {\n+            list = firmwareArch.get(deviceType); // return from cache\n+            if (list != null) {\n+                return list;\n+            }\n+        }\n+\n+        try {\n+            if (!deviceType.isEmpty()) {\n+                json = httpGet(FWREPO_ARCH_URL + \"?type=\" + deviceType);\n+            }\n+        } catch (ShellyApiException e) {\n+            logger.debug(\"{}: Unable to get firmware list for device type {}: {}\", LOG_PREFIX, deviceType,\n+                    e.toString());\n+        }\n+        if (json.isEmpty() || json.startsWith(\"[]\")) {\n+            // no files available for this device type\n+            logger.info(\"{}: No firmware files found for device type {}\", LOG_PREFIX, deviceType);\n+            list = new FwArchList();\n+            list.versions = new ArrayList<FwArchEntry>();\n+        } else {\n+            // Create selection list\n+            json = \"{\" + json.replace(\"[{\", \"\\\"versions\\\":[{\") + \"}\"; // make it an named array\n+            list = fromJson(gson, json, FwArchList.class);\n+        }\n+\n+        // save list to cache\n+        firmwareArch.put(deviceType, list);\n+        return list;\n+    }\n+\n+    protected boolean testUrl(String url) {\n+        try {\n+            if (url.isEmpty()) {\n+                return false;\n+            }\n+            httpHeadl(url); // causes exception on 404\n+            return true;\n+        } catch (ShellyApiException e) {\n+        }\n+        return false;\n+    }\n+\n+    protected String httpGet(String url) throws ShellyApiException {\n+        return httpRequest(HttpMethod.GET, url);\n+    }\n+\n+    protected String httpHeadl(String url) throws ShellyApiException {\n+        return httpRequest(HttpMethod.HEAD, url);\n+    }\n+\n+    protected String httpRequest(HttpMethod method, String url) throws ShellyApiException {\n+        ShellyApiResult apiResult = new ShellyApiResult();\n+\n+        try {\n+            Request request = httpClient.newRequest(url).method(method).timeout(SHELLY_API_TIMEOUT_MS,\n+                    TimeUnit.MILLISECONDS);\n+            request.header(HttpHeader.ACCEPT, ShellyHttpApi.CONTENT_TYPE_JSON);\n+            logger.trace(\"{}: HTTP {} {}\", LOG_PREFIX, method, url);\n+            ContentResponse contentResponse = request.send();\n+            apiResult = new ShellyApiResult(contentResponse);\n+            String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"{}: HTTP Response {}: {}\", LOG_PREFIX, contentResponse.getStatus(), response);\n+\n+            // validate response, API errors are reported as Json\n+            if (contentResponse.getStatus() != HttpStatus.OK_200) {\n+                throw new ShellyApiException(apiResult);\n+            }\n+            return response;\n+        } catch (ExecutionException | TimeoutException | InterruptedException | IllegalArgumentException e) {\n+            throw new ShellyApiException(\"HTTP GET failed\", e);\n+        }\n+    }\n+\n+    protected String getUrlParm(Map<String, String[]> parameters, String param) {\n+        String[] p = parameters.get(param);\n+        String value = \"\";\n+        if (p != null) {\n+            value = getString(p[0]);\n+        }\n+        return value;\n+    }\n+\n+    protected String getMessage(String key, Object... arguments) {\n+        return resources.get(\"manager.\" + key, arguments);\n+    }\n+\n+    protected String getMessageP(String key, String msgClass, Object... arguments) {\n+        return \"<p class=\\\"\" + msgClass + \"\\\">\" + getMessage(key, arguments) + \"</p>\\n\";\n+    }\n+\n+    protected String getMessageS(String key, String msgClass, Object... arguments) {\n+        return \"<span class=\\\"\" + msgClass + \"\\\">\" + getMessage(key, arguments) + \"</span>\\n\";\n+    }\n+\n+    protected static String getDeviceType(Map<String, String> properties) {\n+        return getString(properties.get(PROPERTY_MODEL_ID));\n+    }\n+\n+    protected static String getDeviceIp(Map<String, String> properties) {\n+        return getString(properties.get(\"deviceIp\"));\n+    }\n+\n+    protected static String getDeviceName(Map<String, String> properties) {\n+        return getString(properties.get(PROPERTY_DEV_NAME));\n+    }\n+\n+    protected static String getDisplayName(Map<String, String> properties) {\n+        String name = getString(properties.get(PROPERTY_DEV_NAME));\n+        if (name.isEmpty()) {\n+            name = getString(properties.get(PROPERTY_SERVICE_NAME));\n+        }\n+        return name;\n+    }\n+\n+    protected ShellyThingConfiguration getThingConfig(ShellyManagerInterface th, Map<String, String> properties) {\n+        Thing thing = th.getThing();\n+        ShellyThingConfiguration config = thing.getConfiguration().as(ShellyThingConfiguration.class);\n+        if (config.userId.isEmpty()) {\n+            config.userId = getString(properties.get(\"userId\"));\n+            config.password = getString(properties.get(\"password\"));\n+        }\n+        return config;\n+    }\n+\n+    protected void scheduleUpdate(ShellyManagerInterface th, String name, int delay) {\n+        TimerTask task = new TimerTask() {\n+            @Override\n+            public void run() {\n+                th.requestUpdates(1, true);\n+            }\n+        };\n+        Timer timer = new Timer(name);\n+        timer.schedule(task, delay * 1000);\n+    }\n+\n+    protected Map<String, ShellyManagerInterface> getThingHandlers() {\n+        return handlerFactory.getThingHandlers();\n+    }\n+\n+    protected @Nullable ShellyManagerInterface getThingHandler(String uid) {\n+        return getThingHandlers().get(uid);\n+    }\n+}"
  },
  {
    "sha": "d6083cd1dfdbeebf06bd241537f1f5e7033e6b15",
    "filename": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerServlet.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerServlet.java",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerServlet.java",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/manager/ShellyManagerServlet.java?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.manager;\n+\n+import static org.openhab.binding.shelly.internal.manager.ShellyManagerConstants.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.shelly.internal.ShellyHandlerFactory;\n+import org.openhab.binding.shelly.internal.api.ShellyApiException;\n+import org.openhab.binding.shelly.internal.manager.ShellyManagerPage.ShellyMgrResponse;\n+import org.openhab.binding.shelly.internal.provider.ShellyTranslationProvider;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.core.net.HttpServiceUtil;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.http.HttpService;\n+import org.osgi.service.http.NamespaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link ShellyManagerServlet} implements the Shelly Manager - a simple device overview/management\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = HttpServlet.class, configurationPolicy = ConfigurationPolicy.OPTIONAL)\n+public class ShellyManagerServlet extends HttpServlet {\n+    private static final long serialVersionUID = 1393403713585449126L;\n+    private final Logger logger = LoggerFactory.getLogger(ShellyManagerServlet.class);\n+\n+    private static final String SERVLET_URI = SHELLY_MANAGER_URI;\n+    private final ShellyManager manager;\n+    private final String className;\n+\n+    private final HttpService httpService;\n+\n+    @Activate\n+    public ShellyManagerServlet(@Reference ConfigurationAdmin configurationAdmin,\n+            @Reference NetworkAddressService networkAddressService, @Reference HttpService httpService,\n+            @Reference HttpClientFactory httpClientFactory, @Reference ShellyHandlerFactory handlerFactory,\n+            @Reference ShellyTranslationProvider translationProvider, ComponentContext componentContext,\n+            Map<String, Object> config) {\n+        className = substringAfterLast(getClass().toString(), \".\");\n+        this.httpService = httpService;\n+        String localIp = getString(networkAddressService.getPrimaryIpv4HostAddress());\n+        int localPort = HttpServiceUtil.getHttpServicePort(componentContext.getBundleContext());\n+        this.manager = new ShellyManager(configurationAdmin, translationProvider,\n+                httpClientFactory.getCommonHttpClient(), localIp, localPort, handlerFactory);\n+\n+        try {\n+            httpService.registerServlet(SERVLET_URI, this, null, httpService.createDefaultHttpContext());\n+            logger.debug(\"{}: Started at '{}'\", className, SERVLET_URI);\n+        } catch (NamespaceException | ServletException | IllegalArgumentException e) {\n+            logger.warn(\"{}: Unable to initialize bindingConfig\", className, e);\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        httpService.unregister(SERVLET_URI);\n+        logger.debug(\"{} stopped\", className);\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest request, @Nullable HttpServletResponse response)\n+            throws ServletException, IOException, IllegalArgumentException {\n+        if ((request == null) || (response == null)) {\n+            logger.debug(\"request or resp must not be null!\");\n+            return;\n+        }\n+\n+        String path = getString(request.getRequestURI()).toLowerCase();\n+        String ipAddress = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\n+        ShellyMgrResponse output = new ShellyMgrResponse();\n+        PrintWriter print = null;\n+        OutputStream bin = null;\n+        try {\n+            if (ipAddress == null) {\n+                ipAddress = request.getRemoteAddr();\n+            }\n+            Map<String, String[]> parameters = request.getParameterMap();\n+            logger.debug(\"{}: {} Request from {}:{}{}?{}\", className, request.getProtocol(), ipAddress,\n+                    request.getRemotePort(), path, parameters.toString());\n+            if (!path.toLowerCase().startsWith(SERVLET_URI)) {\n+                logger.warn(\"{} received unknown request: path = {}\", className, path);\n+                return;\n+            }\n+\n+            output = manager.generateContent(path, parameters);\n+            response.setContentType(output.mimeType);\n+            if (output.mimeType.equals(\"text/html\")) {\n+                // Make sure it's UTF-8 encoded\n+                response.setCharacterEncoding(UTF_8);\n+                print = response.getWriter();\n+                print.write((String) output.data);\n+            } else {\n+                // binary data\n+                byte[] data = (byte[]) output.data;\n+                response.setContentLength(data.length);\n+                bin = response.getOutputStream();\n+                bin.write(data, 0, data.length);\n+            }\n+        } catch (ShellyApiException | RuntimeException e) {\n+            logger.debug(\"{}: Exception uri={}, parameters={}\", className, path, request.getParameterMap().toString(),\n+                    e);\n+            response.setContentType(\"text/html\");\n+            print = response.getWriter();\n+            print.write(\"Exception:\" + e.toString() + \"<br/>Check openHAB.log for details.\"\n+                    + \"<p/><a href=\\\"/shelly/manager\\\">Return to Overview</a>\");\n+            logger.debug(\"{}: {}\", className, output);\n+            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+        } finally {\n+            if (print != null) {\n+                print.close();\n+            }\n+            if (bin != null) {\n+                bin.close();\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "18239e42f1db3198c71e6560d68ce58e517b9d6b",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly.properties",
    "status": "modified",
    "additions": 42,
    "deletions": 1,
    "changes": 43,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly.properties",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly.properties",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly.properties?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -21,7 +21,7 @@ offline.status-error-restarted = The device has restarted and will be re-initial\n offline.status-error-fwupgrade = Firmware upgrade in progress\n \n message.versioncheck.failed = Unable to check firmware version: {0}\n-message.versioncheck.beta = Device is running a Beta version: {0}/{1} ({2}),make sure this is newer than {3} release build.\n+message.versioncheck.beta = Device is running a Beta version: {0}/{1} ({2}).\n message.versioncheck.tooold = WARNING: Firmware might be too old, installed: {0}/{1} ({2}), required minimal {3}.\n message.versioncheck.update = INFO: New firmware available: current version: {0}, new version: {1}\n message.versioncheck.autocoiot = INFO: Firmware is full-filling the minimum version to auto-enable CoIoT\n@@ -71,3 +71,44 @@ channel-type.shelly.ledPowerDisable.label = Disable Power LED\n channel-type.shelly.ledPowerDisable.description = ON: The power status LED will be deactivated\n channel-type.shelly.ledStatusDisable.label = Disable Status LED\n channel-type.shelly.ledStatusDisable.description = ON: The WiFi status LED will be deactivated\n+\n+# Shelly Manager\n+message.manager.invalid-url = Invalid URL or syntax\n+\n+message.manager.buttons.ok = OK\n+message.manager.buttons.abort = Abort\n+\n+message.manager.action.unknown = Action {0} is unknown \n+message.manager.action.reset-stats = Reset Statistics\n+message.manager.action.restart = Reboot Device\n+message.manager.action.restart.info = The device is restarting and reconnects to WiFi. It will take a moment until device status is refreshed in openHAB.\n+message.manager.action.restart.confirm = The device will restart and reconnects to WiFi.\n+message.manager.action.resstats.confirm = Device statistics and alarm has been reset.\n+message.manager.action.setcloud.config = Cloud function is now {0}.\n+message.manager.action.protect = Protect Device\n+message.manager.action.protect.id-missing = Credentials for device access are not configured, go to Shelly Binding Settings and provide user id and password.<br/>You could use the 'Protect' action to apply this configuration to the device.\n+message.manager.action.protect.status = Device protection is currently {0}. User id {1} is required to access the device.\n+message.manager.action.protect.new = Device login will be set to user {0} with password {1}.\n+message.manager.action.protect.confirm = Device login was updated to user {0} with password {1}.\n+message.manager.action.could-enable = Enable Cloud\n+message.manager.action.could-disable = Disable Cloud\n+message.manager.action.coiot-mcast = Set CoIoT Multicast\n+message.manager.action.coiot-peer = Set CoIoT Peer\n+message.manager.action.timezone = Set Timezone\n+message.manager.action.reset = Factory Reset\n+message.manager.action.reset.warning = Attention: Performing this action will reset the device to factory defaults.<br/>All configuration data incl. WiFi settings get lost and device will return to Access Point mode (WiFi {0})\n+message.manager.action.reset.confirm = Factory reset was performed. Connect to WiFi network {0} and open http://192.168.33.1 to restart with device setup.\n+message.manager.coiot.multicast-not-supported = Device doesn't support CoIoT Multicast updates.<br/>Make sure to setup openHAB as CoIoT Peer Address ({0}).\n+message.manager.coiot.mode-not-suppored = Device doesn't support request CoIoT Mode ({0}), check product documentation.\n+message.manager.coiot.current-peer = CoIoT Peer Address is currently set to {0}.\n+message.manager.coiot.new-peer = CoIoT mode/address will be set to {0}.\n+message.manager.coiot.mode-mcast = The device starts sending CoIoT updates using IP Multicast.<br/>Please make sure that your network setup supports Multicast routing when devices are on different IP subnets.\n+message.manager.coiot.mode-peer = The device will no longer send IP Multicast CoIoT updates to the network, just to the openHAB host.\n+\n+message.manager.fwupdate.initiated = Firmware update initiated, device returned status {0}\n+message.manager.fwupdate.confirm = Do not power-off or restart device while updating the firmware!\n+message.manager.fwupdate.info = Update firmware (deviceType={0}, version={1}, URL={2})\n+message.manager.fwupdate.failed = Firmware updated failed: {0}\n+message.manager.fwupdate.notfound = Unable to find firmware for device type {0}, version={1} (URL={2})\n+message.manager.fwupdate.nofile ) No firmware files found for device type {0}\n+message.manager.fwupdate.success = Firmware successfully loaded - size={0}, ETag={1}, last modified={2}"
  },
  {
    "sha": "745a3297124fe4429e138fe659e336b5822742ec",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly_de.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly_de.properties",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly_de.properties",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/OH-INF/i18n/shelly_de.properties?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e",
    "patch": "@@ -28,7 +28,7 @@ config-status.error.missing-userid = Keine Benutzerkennung in der Thing Konfigur\n \n # General messages\n message.versioncheck.failed = Firmware-Version konnte nicht geprï¿½ft werden: {0}\n-message.versioncheck.beta = Es wurde eine Betaversion erkannt: {0}/{1} ({2}), bitte sicherstellen, dass diese neuer ist als Version {3} (Release Build).\n+message.versioncheck.beta = Es wurde eine Betaversion erkannt: {0}/{1} ({2}).\n message.versioncheck.tooold = ACHTUNG: Eine alte Firmware wurde erkannt: {0}/{1} ({2}), minimal erforderlich {3}.\n message.versioncheck.update = INFO: Eine neue Firmwareversion ist verfï¿½gbar, aktuell: {0}, neu: {1}\n message.versioncheck.autocoiot = INFO: Die Firmware unterstï¿½tzt die Anforderung, Auto-CoIoT wurde aktiviert."
  },
  {
    "sha": "020490634e1f735c7be5e3a653c975159a73fe48",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_connected.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_connected.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_connected.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_connected.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "591a18992222fa0252e0762ca3c711832f7f3769",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_disabled.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_disabled.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_disabled.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_disabled.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "0c31a37453b6bedc353a83a70548038a6ebb54f6",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_enabled.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_enabled.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_enabled.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_enabled.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "98eb9507f21e72d9afacd200cbbc21d78edf37e1",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_unknown.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_unknown.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_unknown.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/cloud_unknown.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "e5b41ea741323a76c26d58076fa2e1d8e50d4dbe",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_connected.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_connected.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_connected.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_connected.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "c81d564817139af6305c9be3c7d53a60d70042c2",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_disabled.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_disabled.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_disabled.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_disabled.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "6f87024c98bcbf97e0ecff47145570c4b77b8756",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_enabled.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_enabled.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_enabled.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_enabled.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "98eb9507f21e72d9afacd200cbbc21d78edf37e1",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_unknown.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_unknown.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_unknown.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/mqtt_unknown.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "a920c74f81e0626111e93392002e0fc81c91f4e5",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/refresh.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/refresh.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/refresh.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/refresh.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "f2b0ef3bcb3914fdd13efe6ac4605bfe7878475e",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/status_attention.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_attention.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_attention.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/status_attention.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "00f603aa232cc3b28b2f60e90807671af48f1a7e",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/status_config.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_config.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_config.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/status_config.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "f9f866e4f1ef4fef2a190be658b2d2698d8f4778",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/status_initializing.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_initializing.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_initializing.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/status_initializing.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "b4cf7feee990da71ea6454b5855db39934d8f63b",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/status_offline.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_offline.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_offline.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/status_offline.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "0d415e06e4812e49c72de382bffab924cf164ffa",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/status_online.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_online.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_online.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/status_online.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  },
  {
    "sha": "2109688f4a9cb46317405338742749fd0aa62a23",
    "filename": "bundles/org.openhab.binding.shelly/src/main/resources/images/status_uninitialized.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/openhab/openhab-addons/blob/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_uninitialized.png",
    "raw_url": "https://github.com/openhab/openhab-addons/raw/aa1f5296a00da296bc4af9c6074cf1e21152eb6e/bundles/org.openhab.binding.shelly/src/main/resources/images/status_uninitialized.png",
    "contents_url": "https://api.github.com/repos/openhab/openhab-addons/contents/bundles/org.openhab.binding.shelly/src/main/resources/images/status_uninitialized.png?ref=aa1f5296a00da296bc4af9c6074cf1e21152eb6e"
  }
]
