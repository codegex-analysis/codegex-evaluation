[
  {
    "sha": "5fb95604b1b23638622b37d594f14f8a19d37128",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/Core.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/Core.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/Core.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/Core.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -28,7 +28,9 @@\n import io.vertx.core.Vertx;\n import io.vertx.core.VertxOptions;\n import io.vertx.core.json.JsonObject;\n+import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n@@ -142,4 +144,26 @@ private static String decryptSecret(String encryptedSecret) throws CryptoExcepti\n     }\n     return encryptedSecret;\n   }\n+\n+  public static final ThreadFactory newThreadFactory(String groupName) {\n+    return new DefaultThreadFactory(groupName);\n+  }\n+\n+  private static class DefaultThreadFactory implements ThreadFactory {\n+\n+    private ThreadGroup group;\n+    private final AtomicInteger threadNumber = new AtomicInteger(1);\n+    private final String namePrefix;\n+\n+    public DefaultThreadFactory(String groupName) {\n+      assert groupName != null;\n+      group = new ThreadGroup(groupName);\n+      namePrefix = groupName + \"-\";\n+    }\n+\n+    @Override\n+    public Thread newThread(Runnable r) {\n+      return new Thread(group, r, namePrefix + threadNumber.getAndIncrement());\n+    }\n+  }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "15c02b50c3bb25e14bfe3abc66d4d36337ae1bcd",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/cache/OHCacheClient.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/cache/OHCacheClient.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/cache/OHCacheClient.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/cache/OHCacheClient.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -19,12 +19,13 @@\n \n package com.here.xyz.hub.cache;\n \n+import com.here.xyz.hub.Core;\n import com.here.xyz.hub.Service;\n import io.vertx.core.Future;\n-import io.vertx.core.Handler;\n import java.nio.ByteBuffer;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.caffinitas.ohc.CacheSerializer;\n@@ -36,6 +37,7 @@\n \n   private static final Logger logger = LogManager.getLogger();\n   private static OHCacheClient client;\n+  private static AtomicInteger clientCount = new AtomicInteger();\n \n   private final ScheduledExecutorService executors;\n   private OHCache<byte[], byte[]> cache;\n@@ -46,7 +48,7 @@ public static synchronized OHCacheClient getInstance() {\n   }\n \n   private OHCacheClient() {\n-    executors = Executors.newScheduledThreadPool(2);\n+    executors = new ScheduledThreadPoolExecutor(2, Core.newThreadFactory(\"ohCache\" + clientCount.getAndIncrement()));\n     cache = createCache(Service.configuration.OFF_HEAP_CACHE_SIZE_MB, executors, false);\n   }\n "
  },
  {
    "sha": "23298e6b3073f99c67666b7732d54bc235b6b96b",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/BurstAndUpdateThread.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/BurstAndUpdateThread.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/BurstAndUpdateThread.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/BurstAndUpdateThread.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -28,7 +28,6 @@\n import io.vertx.core.AsyncResult;\n import io.vertx.core.Future;\n import io.vertx.core.Handler;\n-import java.time.Instant;\n import java.util.HashMap;\n import java.util.List;\n import java.util.UUID;\n@@ -118,10 +117,10 @@ private synchronized void onConnectorList(AsyncResult<List<Connector>> ar) {\n         RemoteFunctionHealthCheck rfcHc = HealthApi.rfcHcAggregator.getRfcHealthCheck(oldConnector.id);\n         if (rfcHc != null) {\n           //When the connector is responding with unhealthy status, disable it momentarily, until next BurstAndUpdateThread round.\n-          int consecutiveErrors = rfcHc.getConsecutiveErrors();\n-          if (consecutiveErrors >= CONNECTOR_UNHEALTHY_THRESHOLD) {\n+          int consecutiveFailures = rfcHc.getConsecutiveFailures();\n+          if (consecutiveFailures >= CONNECTOR_UNHEALTHY_THRESHOLD) {\n             logger.warn(\"For connector {} there are {} unhealthy health-checks. Max threshold is {}.\", oldConnector.id,\n-                consecutiveErrors, CONNECTOR_UNHEALTHY_THRESHOLD);\n+                consecutiveFailures, CONNECTOR_UNHEALTHY_THRESHOLD);\n             connectorMap.remove(oldConnector.id);\n           }\n         }"
  },
  {
    "sha": "b569a7c59dfa7e0c65b64e3c2e6b2c5f596f5e6b",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/EmbeddedFunctionClient.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/EmbeddedFunctionClient.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/EmbeddedFunctionClient.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/EmbeddedFunctionClient.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -24,6 +24,7 @@\n import com.amazonaws.services.lambda.runtime.RequestStreamHandler;\n import com.here.xyz.connectors.AbstractConnectorHandler;\n import com.here.xyz.connectors.SimulatedContext;\n+import com.here.xyz.hub.Core;\n import com.here.xyz.hub.connectors.models.Connector;\n import com.here.xyz.hub.connectors.models.Connector.RemoteFunctionConfig;\n import com.here.xyz.hub.rest.HttpException;\n@@ -58,16 +59,16 @@\n   synchronized protected void setConnectorConfig(final Connector newConnectorConfig) throws NullPointerException, IllegalArgumentException {\n     super.setConnectorConfig(newConnectorConfig);\n     shutdown(embeddedExecutor);\n-    createExecutorService();\n+    createExecutorService(newConnectorConfig.id);\n   }\n \n-  private void createExecutorService() {\n+  private void createExecutorService(String connectorId) {\n     if (!(getConnectorConfig().getRemoteFunction() instanceof RemoteFunctionConfig.Embedded)) {\n       throw new IllegalArgumentException(\"Invalid remoteFunctionConfig argument, must be an instance of Embedded\");\n     }\n     int maxConnections = getMaxConnections();\n     embeddedExecutor = new ThreadPoolExecutor(8, maxConnections, 10, TimeUnit.MINUTES,\n-        new SynchronousQueue<>());\n+        new SynchronousQueue<>(), Core.newThreadFactory(\"embeddedRfc-\" + connectorId));\n   }\n \n   @Override"
  },
  {
    "sha": "427bf80754376ef52fa8f95a17d0f9a25de03e21",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/LambdaFunctionClient.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/LambdaFunctionClient.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/LambdaFunctionClient.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/connectors/LambdaFunctionClient.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -40,6 +40,7 @@\n import com.amazonaws.services.lambda.model.ResourceNotFoundException;\n import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder;\n import com.google.common.util.concurrent.ForwardingExecutorService;\n+import com.here.xyz.hub.Core;\n import com.here.xyz.hub.Service;\n import com.here.xyz.hub.connectors.models.Connector;\n import com.here.xyz.hub.connectors.models.Connector.RemoteFunctionConfig;\n@@ -60,7 +61,9 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.Marker;\n@@ -77,7 +80,11 @@\n   private static ConcurrentHashMap<String, AWSLambdaAsync> lambdaClients = new ConcurrentHashMap<>();\n   private static Map<AWSLambdaAsync, List<String>> clientReferences = new HashMap<>();\n   private static ExecutorService executors = new ForwardingExecutorService() {\n-    private ExecutorService threadPool = Executors.newFixedThreadPool(Service.configuration.REMOTE_FUNCTION_MAX_CONNECTIONS);\n+    private ExecutorService threadPool = new ThreadPoolExecutor(\n+        Service.configuration.REMOTE_FUNCTION_MAX_CONNECTIONS,\n+        Service.configuration.REMOTE_FUNCTION_MAX_CONNECTIONS,\n+        0L, TimeUnit.MILLISECONDS,\n+        new LinkedBlockingQueue<Runnable>(), Core.newThreadFactory(\"lambdaRfcs\"));\n \n     @Override\n     protected ExecutorService delegate() {"
  },
  {
    "sha": "42b3d547bc700b8aa7516dda730da6d49a66e1f1",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/util/LimitedOffHeapQueue.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/util/LimitedOffHeapQueue.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/util/LimitedOffHeapQueue.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/util/LimitedOffHeapQueue.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -1,12 +1,13 @@\n package com.here.xyz.hub.util;\n \n+import com.here.xyz.hub.Core;\n import com.here.xyz.hub.Service;\n import com.here.xyz.hub.cache.OHCacheClient;\n import com.here.xyz.hub.util.LimitedOffHeapQueue.OffHeapBuffer;\n import java.util.List;\n import java.util.UUID;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import org.caffinitas.ohc.OHCache;\n@@ -24,7 +25,7 @@\n public class LimitedOffHeapQueue<E extends OffHeapBuffer> extends LimitedQueue<E> {\n \n   private static final long OH_TTL = 32_000; //ms\n-  private static final ScheduledExecutorService executors = Executors.newScheduledThreadPool(2);\n+  private static final ScheduledExecutorService executors = new ScheduledThreadPoolExecutor(2, Core.newThreadFactory(\"oh-queues\"));\n   private static final OHCache<byte[], byte[]> ohStorage = OHCacheClient.createCache(\n       (int) (Service.configuration.GLOBAL_MAX_QUEUE_SIZE * 1.1), executors, true);\n "
  },
  {
    "sha": "af6e8f216da53d78ff1a59a06d25d27c29ab4982",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/ExecutableCheck.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/ExecutableCheck.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/ExecutableCheck.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/ExecutableCheck.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -24,15 +24,13 @@\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n import com.here.xyz.hub.Core;\n-import com.here.xyz.hub.Service;\n import com.here.xyz.hub.util.health.Config;\n import com.here.xyz.hub.util.health.MainHealthCheck;\n import com.here.xyz.hub.util.health.schema.Check;\n import com.here.xyz.hub.util.health.schema.Response;\n import com.here.xyz.hub.util.health.schema.Status;\n import com.here.xyz.hub.util.health.schema.Status.Result;\n import java.util.UUID;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.ScheduledThreadPoolExecutor;\n@@ -54,7 +52,7 @@\n \tprivate static final Logger logger = LogManager.getLogger();\n \n \tprotected static final int MIN_EXEC_POOL_SIZE = 30;\n-\tprotected static ScheduledThreadPoolExecutor executorService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(MIN_EXEC_POOL_SIZE);\n+\tprotected static ScheduledThreadPoolExecutor executorService = new ScheduledThreadPoolExecutor(MIN_EXEC_POOL_SIZE, Core.newThreadFactory(\"health\"));\n \n \tstatic {\n \t\tScheduledThreadPoolExecutor executor = executorService;\n@@ -97,7 +95,7 @@ public ExecutableCheck commence() {\n \t */\n \tpublic ExecutableCheck quit() {\n \t\tif (commenced) {\n-\t\t\texecutionHandle.cancel(false);\n+\t\t\texecutionHandle.cancel(true);\n \t\t\tcommenced = false;\n \t\t}\n \t\treturn this;"
  },
  {
    "sha": "2018e59652e32fb1e85e70da6ff6207943e76690",
    "filename": "xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/RemoteFunctionHealthCheck.java",
    "status": "modified",
    "additions": 46,
    "deletions": 23,
    "changes": 69,
    "blob_url": "https://github.com/heremaps/xyz-hub/blob/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/RemoteFunctionHealthCheck.java",
    "raw_url": "https://github.com/heremaps/xyz-hub/raw/8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b/xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/RemoteFunctionHealthCheck.java",
    "contents_url": "https://api.github.com/repos/heremaps/xyz-hub/contents/xyz-hub-service/src/main/java/com/here/xyz/hub/util/health/checks/RemoteFunctionHealthCheck.java?ref=8db34d7072d3a3f82c5c65e9c9facdbe48e6e44b",
    "patch": "@@ -21,12 +21,15 @@\n \n import static com.here.xyz.hub.util.health.schema.Status.Result.ERROR;\n import static com.here.xyz.hub.util.health.schema.Status.Result.OK;\n+import static com.here.xyz.hub.util.health.schema.Status.Result.TIMEOUT;\n import static com.here.xyz.hub.util.health.schema.Status.Result.UNKNOWN;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.here.xyz.events.HealthCheckEvent;\n+import com.here.xyz.hub.Core;\n import com.here.xyz.hub.connectors.RemoteFunctionClient;\n import com.here.xyz.hub.connectors.RpcClient;\n+import com.here.xyz.hub.connectors.RpcClient.RpcContext;\n import com.here.xyz.hub.connectors.models.Connector;\n import com.here.xyz.hub.connectors.models.Connector.RemoteFunctionConfig;\n import com.here.xyz.hub.connectors.models.Connector.RemoteFunctionConfig.AWSLambda;\n@@ -45,7 +48,7 @@\n   private Connector connector;\n   private Status cachedStatus;\n   private Response cachedResponse;\n-  private int consecutiveErrors;\n+  private int consecutiveFailures;\n \n   RemoteFunctionHealthCheck(Connector connector) {\n     this.connector = connector;\n@@ -62,13 +65,17 @@ public String getConnectorId() {\n   @Override\n   public Status execute() throws InterruptedException {\n     Status s = new Status();\n+    long t1 = Core.currentTimeMillis();\n \n+    RpcContext hcHandle = null;\n     try {\n       if (cachedStatus != null) {\n         Status tmpStatus = cachedStatus;\n         setResponse(cachedResponse);\n-        if (tmpStatus.getResult() == ERROR) consecutiveErrors++;\n-        else consecutiveErrors = 0;\n+        if (tmpStatus.getResult().compareTo(TIMEOUT) >= 0)\n+          consecutiveFailures++;\n+        else\n+          consecutiveFailures = 0;\n         //Reset the injected status / response for the next execution\n         cachedStatus = null;\n         cachedResponse = null;\n@@ -77,44 +84,60 @@ public Status execute() throws InterruptedException {\n       else {\n         HealthCheckEvent healthCheck = new HealthCheckEvent();\n         //Just generate a stream ID here as the stream actually \"begins\" here\n-        final String healthCheckStreamId = UUID.randomUUID().toString();\n+        final String healthCheckStreamId = \"HC-\" + UUID.randomUUID().toString();\n         healthCheck.setStreamId(healthCheckStreamId);\n-        getClient().execute(new Log4jMarker(healthCheckStreamId), healthCheck, true, ar -> {\n-          if (ar.failed()) {\n-            setResponse(generateResponse().withMessage(\"Error in connector health-check: \" + ar.cause().getMessage()));\n-            s.setResult(ERROR);\n-            consecutiveErrors++;\n+        hcHandle = getClient().execute(new Log4jMarker(healthCheckStreamId), healthCheck, true, ar -> {\n+          try {\n+            if (ar.failed()) {\n+              setResponse(generateResponse().withMessage(\"Error in connector health-check: \" + ar.cause().getMessage()));\n+              s.setResult(ERROR);\n+              consecutiveFailures++;\n+            }\n+            else {\n+              setResponse(generateResponse());\n+              s.setResult(OK);\n+              consecutiveFailures = 0;\n+            }\n           }\n-          else {\n-            setResponse(generateResponse());\n-            s.setResult(OK);\n-            consecutiveErrors = 0;\n-          }\n-          synchronized (s) {\n-            s.notify();\n+          finally {\n+            synchronized (s) {\n+              s.notify();\n+            }\n           }\n         });\n \n-        while (s.getResult() == UNKNOWN) {\n-          synchronized (s) {\n-            s.wait();\n+        synchronized (s) {\n+          while (s.getResult() == UNKNOWN) {\n+            s.wait(timeout > 500 ? timeout - 500 : timeout);\n+            //Check for timeouts explicitly to enable setting the consecutiveFailures correctly\n+            if (timeout > 500 && Core.currentTimeMillis() - t1 >= timeout - 500) {\n+              cancelHcRequest(hcHandle);\n+              setResponse(generateResponse());\n+              consecutiveFailures++;\n+              return s.withResult(TIMEOUT);\n+            }\n           }\n-          Thread.sleep(100);\n         }\n       }\n     }\n     catch (InterruptedException interruption) {\n       setResponse(generateResponse());\n+      cancelHcRequest(hcHandle);\n       throw interruption;\n     }\n     catch (Exception e) {\n       setResponse(generateResponse().withMessage(\"Error trying to execute health-check event: \" + e.getMessage()));\n+      cancelHcRequest(hcHandle);\n       return s.withResult(ERROR);\n     }\n \n     return s;\n   }\n \n+  private void cancelHcRequest(RpcContext hcHandle) {\n+    if (hcHandle != null) hcHandle.cancelRequest();\n+  }\n+\n   /**\n    * Used by the parent {@link RemoteFunctionHealthAggregator} to inject a cached response.\n    * When a cached response gets injected this RFC health-check will not execute for the next period and will\n@@ -128,8 +151,8 @@ void injectCachedResponse(Status s, Response r) {\n   }\n \n   @JsonIgnore\n-  public int getConsecutiveErrors() {\n-    return consecutiveErrors;\n+  public int getConsecutiveFailures() {\n+    return consecutiveFailures;\n   }\n \n   private Response generateResponse() {\n@@ -158,7 +181,7 @@ else if (remoteFunction instanceof Http) {\n       rfcData.put(\"arrivalRate\", rfc.getArrivalRate());\n       rfcData.put(\"throughput\", rfc.getThroughput());\n       rfcData.put(\"priority\", rfc.getPriority());\n-      rfcData.put(\"consecutiveErrors\", consecutiveErrors);\n+      rfcData.put(\"consecutiveFailures\", consecutiveFailures);\n \n       return r.withAdditionalProperty(\"statistics\", rfcData);\n     }"
  }
]
