[
  {
    "sha": "37e38c87dec1a907e97007e3b6d5dfa510373b48",
    "filename": "ColinTreeListViewElement.java",
    "status": "modified",
    "additions": 1213,
    "deletions": 486,
    "changes": 1699,
    "blob_url": "https://github.com/OpenSourceAIX/ColinTreeListView/blob/9c8a07890724f52b7aee3a07a9c135c3912e320d/ColinTreeListViewElement.java",
    "raw_url": "https://github.com/OpenSourceAIX/ColinTreeListView/raw/9c8a07890724f52b7aee3a07a9c135c3912e320d/ColinTreeListViewElement.java",
    "contents_url": "https://api.github.com/repos/OpenSourceAIX/ColinTreeListView/contents/ColinTreeListViewElement.java?ref=9c8a07890724f52b7aee3a07a9c135c3912e320d",
    "patch": "@@ -1,695 +1,1422 @@\n package cn.colintree.aix.ColinTreeListView;\n \n-import com.google.appinventor.components.annotations.DesignerComponent;\n-import com.google.appinventor.components.annotations.PropertyCategory;\n-import com.google.appinventor.components.annotations.SimpleFunction;\n-import com.google.appinventor.components.annotations.SimpleObject;\n-import com.google.appinventor.components.annotations.SimpleProperty;\n-import com.google.appinventor.components.common.ComponentCategory;\n-import com.google.appinventor.components.runtime.AndroidNonvisibleComponent;\n-import com.google.appinventor.components.runtime.ComponentContainer;\n-import com.google.appinventor.components.runtime.util.YailList;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import com.google.appinventor.components.annotations.*;\n+import com.google.appinventor.components.common.*;\n+import com.google.appinventor.components.runtime.*;\n+import com.google.appinventor.components.runtime.util.*;\n+\n+import android.graphics.drawable.BitmapDrawable;\n+import android.os.Handler;\n+import android.util.Log;\n+\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.view.View.OnLongClickListener;\n+import android.view.View.OnTouchListener;\n+import android.widget.ScrollView;\n+import android.view.MotionEvent;\n+/*\n+modified by vknow360 (Sunny Gupta) on March 10,2021\n+ */\n \n @DesignerComponent(version = ColinTreeListView.VERSION,\n-    description = \"by ColinTree at http://aix.colintree.cn/\",\n-    category = ComponentCategory.EXTENSION,\n-    nonVisible = true,\n-    iconName = \"aiwebres/elementIcon.png\")\n-@SimpleObject(external = true)\n-public class ColinTreeListViewElement extends AndroidNonvisibleComponent {\n-\n-    private ColinTreeListView.Element element;\n+        category = ComponentCategory.EXTENSION,\n+        nonVisible = true,\n+        iconName = \"https://raw.githubusercontent.com/vknow360/ColinTreeListView/master/aiwebres/icon.png\",\n+        helpUrl = \"http://aix.colintree.cn/en/extensions/ColinTreeListView.html\")\n \n-    public ColinTreeListViewElement(ComponentContainer container) {\n+@SimpleObject(external = true)\n+@UsesPermissions(permissionNames = \"android.permission.INTERNET,\" +\n+        \"android.permission.ACCESS_NETWORK_STATE,\" +\n+        \"android.permission.READ_EXTERNAL_STORAGE\")\n+public class ColinTreeListView extends AndroidNonvisibleComponent implements Component {\n+\n+    // VERSION 2:\n+    //   First version to be released\n+    // VERSION 3:\n+    //   Adapted to new Appinventor (since 2017.12.27, Companion 2.45) (Fixed NoSuchMethodError)\n+    //   Added properties related to image loading - AsyncImageLoad & CacheImage (that in a same path)\n+    //   Added property - ScrollBottomAfterAdd\n+    // VERSION 4:\n+    //   Adapted to all platforms (ai2.appinventor.mit.edu , thunkable , etc.)\n+    //     There should not more NoSuchMethodError at anywhere.\n+    // VERSION 5:\n+    //   Added icon text related properties\n+    //   Added lastClickedElement & lastClickedIcon\n+    // VERSION 6:\n+    //   Added properties of text height (both main- & sub-text)\n+    // VERSION 7:\n+    //   Fixed that lastClickedElement starts from 0\n+    //   Fixed that images that cached by a same path would act wired when one of them is clicked\n+    //   Added a extra button\n+    // VERSION 8:\n+    //   Fixed extraButtonEnabled not implemented\n+    //   Added support of direct(static) handlers in ColinTreeListViewElement\n+    // VERSION 9:\n+    //   Fixed Error of Visiblility\n+    //   Added ClearCache() & ClearAllCache() -- still in test, it should works\n+    // VERSION 10:\n+    //   Added Get by @10MINT\n+    //   Added LastLongClickedElement by @10MINT\n+    //   Fixes Label cannot click on some platforms\n+    // VERSION 11:\n+    //   Added Translations (need platform supporting)\n+    //   Fixed a Get method bug (#11)\n+    //   Added ExtraButtonImage in ColinTreeListViewElement\n+    //   Removed flag deprecated from all blocks\n+\n+    /* VERSION 12 (vknow360):\n+    - Added multi selection feature\n+    - Method to perform long click on element's\n+    - Some minor changes in TouchDown events\n+     */\n+    public static final int VERSION = 12;\n+\n+    private static final String LOG_TAG = \"ColinTreeListView\";\n+\n+    private final ArrayList<Element> elementList = new ArrayList<Element>();\n+    private final ArrayList<Integer> longClickedElements = new ArrayList<Integer>();\n+    private HVArrangement vaContainer = null;\n+    private int currentListSize = 0;\n+\n+    private final Handler handler = new Handler();\n+\n+    private int lastClickedElement = 0;\n+    private int lastLongClickedElement = 0;\n+    private int lastClickedIcon = 0;\n+    private int lastClickedExtraButton = 0;\n+\n+    // Appearance\n+    private int elementHeight = 57;\n+    private int elementTouchDownColor = COLOR_DEFAULT;\n+    private int elementWidthBeforeIcon = 7;\n+    private int elementWidthAfterIcon = 5;\n+    private int elementIconWidth = 40;\n+    private int elementIconHeight = 40;\n+    private int elementIconShape = BUTTON_SHAPE_ROUNDED;\n+    private int elementIconBgColor = COLOR_DEFAULT;\n+    private int elementIconTextColor = COLOR_DEFAULT;\n+    private float elementIconTextFontSize = 24;\n+    private boolean elementIconTextFontBold = true;\n+    private boolean elementIconMultiParams = false;\n+    private int elementIconPaddings = 0;\n+    private int elementTextColor = COLOR_BLACK;\n+    private float elementTextFontSize = 14f;\n+    private boolean elementTextFontBold = false;\n+    private int elementTextHeight = 18;\n+    private int elementSubTextColor = COLOR_LTGRAY;\n+    private float elementSubTextFontSize = 12;\n+    private boolean elementSubTextFontBold = false;\n+    private int elementSubTextHeight = 18;\n+    private int elementWidthBeforeExtraButton = 2;\n+    private String elementExtraButtonText = \"\";\n+    private float elementExtraButtonTextFontSize = 12;\n+    private boolean elementExtraButtonTextFontBold = false;\n+    private int elementExtraButtonWidth = 20;\n+    private int elementExtraButtonHeight = 20;\n+    private int elementExtraButtonPaddings = 0;\n+    private int elementExtraButtonBgColor = COLOR_LTGRAY;\n+    private int elementExtraButtonShape = BUTTON_SHAPE_OVAL;\n+    private String elementExtraButtonImage = \"\";\n+    private int elementUnderlineColor = COLOR_LTGRAY;\n+    private int elementUnderlineWidth = 1;\n+\n+    // Behaviour\n+    private boolean scrollBottomAfterAdd = false;\n+    private boolean asyncImageLoad = false;\n+    private boolean cacheImage = false;\n+    private boolean extraButtonEnabled = false;\n+    private boolean multiSelection = false;\n+    private boolean showTouchDownColor = true;\n+\n+    private final HashMap<String, CachedImage> iconMap = new HashMap<String, CachedImage>();\n+\n+    private final Form form;\n+\n+\n+    private static YailList makeYailList(Object... obj) {\n+        return YailList.makeList(obj);\n+    }\n+\n+\n+    public ColinTreeListView(ComponentContainer container) {\n         super(container.$form());\n+        form = container.$form();\n+        Log.d(LOG_TAG, \"ColinTreeListView Created\");\n+    }\n+\n+    @SimpleFunction\n+    public void Initialize(VerticalArrangement verticalArrangement) {\n+        vaContainer = verticalArrangement;\n+        vaContainer.AlignHorizontal(ComponentConstants.GRAVITY_CENTER_HORIZONTAL);\n+    }\n+    @SimpleFunction\n+    public void InitializeInVSA(VerticalScrollArrangement verticalScrollArrangement) {\n+        vaContainer = verticalScrollArrangement;\n+        vaContainer.AlignHorizontal(ComponentConstants.GRAVITY_CENTER_HORIZONTAL);\n+    }\n+\n+    @SimpleFunction\n+    public void Clear() {\n+        Set(YailList.makeEmptyList());\n+    }\n+\n+    @SimpleFunction\n+    public void Set(YailList list) {\n+        int size = list.size();\n+        Object sublistElement;\n+        // Set the new list elements\n+        for (int i = 0; i < size; i++) {\n+            sublistElement = list.getObject(i);\n+            if (sublistElement instanceof YailList) {\n+                if (currentListSize > i) {\n+                    SetElement(i+1, (YailList)sublistElement);\n+                    // Calling the function that is shown in bky, so the index start from 1\n+                } else {\n+                    AddElement((YailList)sublistElement);\n+                }\n+            } else {\n+                if (currentListSize > i) {\n+                    SetElement(i+1, makeYailList(sublistElement));\n+                    // Calling the function that is shown in bky, so the index start from 1\n+                } else {\n+                    AddElement(makeYailList(sublistElement));\n+                }\n+            }\n+        }\n+        // Hide the elements that is created but not uesd\n+        for (int i = list.size(); i < currentListSize; i++) {\n+            getElement(i + 1).hide();\n+        }\n+        currentListSize = list.size();\n+    }\n+\n+    //added by @10MINT\n+    //returns the list of the listview\n+    @SimpleFunction\n+    public YailList Get() {\n+        ArrayList<YailList> stringRepresentation = new ArrayList<YailList>();\n+        for (int i = 1; i <= this.currentListSize; i++) {\n+            stringRepresentation.add(GetElement(i));\n+        }\n+        return YailList.makeList(stringRepresentation);\n+    }\n+    @SimpleFunction()\n+    public List<Integer> LongClickedElements(){\n+        return longClickedElements;\n+    }\n+    @SimpleFunction()\n+    public void LongClickElement(int elementIndex){\n+        elementList.get(elementIndex - 1).ha.getView().performLongClick();\n+    }\n+\n+    @SimpleFunction\n+    public void AddElement(YailList element) {\n+        int elementListSize = elementList.size();\n+        if (currentListSize < elementListSize && elementListSize > 0) {\n+            getElement(currentListSize + 1)\n+                    .show()\n+                    .set(element);\n+        } else {\n+            final int elementIndex = currentListSize;\n+            elementList.add(new Element(vaContainer, element) {\n+                @Override\n+                public void onElementClick() {\n+                    ElementClick(elementIndex);\n+                }\n+                @Override\n+                public boolean onElementLongClick() {\n+                    return ElementLongClick(elementIndex);\n+                }\n+                @Override\n+                public void onElementTouchDown() {\n+                    ElementTouchDown(elementIndex);\n+                }\n+                @Override\n+                public void onElementTouchUp() {\n+                    ElementTouchUp(elementIndex);\n+                }\n+\n+                @Override\n+                public void onIconClick() {\n+                    IconClick(elementIndex);\n+                }\n+                @Override\n+                public boolean onIconLongClick() {\n+                    return IconLongClick(elementIndex);\n+                }\n+                @Override\n+                public void onIconTouchDown() {\n+                    IconTouchDown(elementIndex);\n+                }\n+                @Override\n+                public void onIconTouchUp() {\n+                    IconTouchUp(elementIndex);\n+                }\n+\n+                @Override\n+                public void onExtraButtonClick() {\n+                    ExtraButtonClick(elementIndex);\n+                }\n+                @Override\n+                public boolean onExtraButtonLongClick() {\n+                    return ExtraButtonLongClick(elementIndex);\n+                }\n+                @Override\n+                public void onExtraButtonTouchDown() {\n+                    ExtraButtonTouchDown(elementIndex);\n+                }\n+                @Override\n+                public void onExtraButtonTouchUp() {\n+                    ExtraButtonTouchUp(elementIndex);\n+                }\n+            });\n+        }\n+        currentListSize++;\n+\n+        if (scrollBottomAfterAdd && (vaContainer.getView() instanceof ScrollView)) {\n+            handler.postDelayed(new Runnable() {\n+                @Override\n+                public void run() {\n+                    ((ScrollView)vaContainer.getView()).fullScroll(ScrollView.FOCUS_DOWN);\n+                }\n+            }, 20);\n+        }\n+    }\n+    @SimpleFunction\n+    public void AddEmptyElement() {\n+        AddElement(YailList.makeEmptyList());\n+    }\n+\n+    private void checkIndex(int elementIndex) throws IndexOutOfBoundsException {\n+        if (elementIndex < 1 || elementIndex > currentListSize) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+    }\n+    @SimpleFunction\n+    public void SetElement(int elementIndex, YailList element) {\n+        checkIndex(elementIndex);\n+        getElement(elementIndex).show().set(element);\n+    }\n+    @SimpleFunction\n+    public void SetElementText(int elementIndex, String text) {\n+        checkIndex(elementIndex);\n+        getElement(elementIndex).setText(text);\n+    }\n+    @SimpleFunction\n+    public void SetElementMainText(int elementIndex, String mainText) {\n+        checkIndex(elementIndex);\n+        getElement(elementIndex).setMainText(mainText);\n+    }\n+    @SimpleFunction\n+    public void SetElementSubText(int elementIndex, String subText) {\n+        checkIndex(elementIndex);\n+        getElement(elementIndex).setSubText(subText);\n+    }\n+    @SimpleFunction\n+    public void SetElementIcon(int elementIndex, String path) {\n+        checkIndex(elementIndex);\n+        getElement(elementIndex).setIcon(path);\n+    }\n+    @SimpleFunction\n+    public YailList GetElement(int elementIndex) {\n+        return getElement(elementIndex).toYailList();\n     }\n \n-    //----------------------------Functions------------------------\n+    public Element getElement(int elementIndex) {\n+        return elementList.get(elementIndex-1);\n+    }\n \n     @SimpleFunction\n-    public void LinkToElement(ColinTreeListView listview, int elementIndex) {\n-        element = listview.getElement(elementIndex);\n+    public void RemoveElement(int elementIndex) {\n+        checkIndex(elementIndex);\n+        for (int i = elementIndex-1; i < currentListSize-1; i++) {\n+            copyElement(i+1, i);\n+        }\n+        getElement(currentListSize).hide();\n+        currentListSize--;\n+    }\n+    private void copyElement(int indexFrom, int indexTo) {\n+        SetElement(\n+                indexTo+1,\n+                makeYailList(GetElement(indexFrom + 1).toArray())\n+                // Trun into object[] first, avoiding object confusing. (means that make a new object)\n+        );\n     }\n \n-    //--------------------------Element Value-------------------------\n \n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void ElementValue(YailList value) {\n-        element.set(value);\n+    @SimpleFunction\n+    public void ClearAllCache() {\n+        for (HashMap.Entry<String, CachedImage> entry : iconMap.entrySet()) {\n+            entry.getValue().releaseMemory();\n+            iconMap.remove(entry.getKey());\n+        }\n+        System.gc();\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public YailList ElementValue() {\n-        return element.toYailList();\n+\n+    @SimpleFunction\n+    public void ClearCache(String path) {\n+        CachedImage ci = iconMap.get(path);\n+        if (ci != null) {\n+            ci.releaseMemory();\n+            iconMap.remove(path);\n+        }\n+        System.gc();\n     }\n \n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void IconImage(String value) {\n-        element.setIcon(value);\n+\n+    @SimpleEvent\n+    public void ElementClick(int elementIndex) {\n+        lastClickedElement = elementIndex + 1;\n+        EventDispatcher.dispatchEvent(this, \"ElementClick\", elementIndex + 1);\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public String IconImage() {\n-        return element.getIcon();\n+    @SimpleEvent\n+    public boolean ElementLongClick(int elementIndex) {\n+        lastLongClickedElement = elementIndex + 1;\n+        return EventDispatcher.dispatchEvent(this, \"ElementLongClick\", elementIndex + 1);\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void ExtraButtonImage(String value) {\n-        element.setExtraButtonImage(value);\n+    @SimpleEvent\n+    public void ElementTouchDown(int elementIndex) {\n+        EventDispatcher.dispatchEvent(this, \"ElementTouchDown\", elementIndex + 1);\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public String ExtraButtonImage() {\n-        return element.getExtraButtonImage();\n+    @SimpleEvent\n+    public void ElementTouchUp(int elementIndex) {\n+        EventDispatcher.dispatchEvent(this, \"ElementTouchUp\", elementIndex + 1);\n     }\n \n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void Text(String text) {\n-        element.setText(text);\n+    @SimpleEvent\n+    public void IconClick(int elementIndex) {\n+        lastClickedIcon = elementIndex + 1;\n+        EventDispatcher.dispatchEvent(this, \"IconClick\", elementIndex + 1);\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public String Text() {\n-        return element.getText();\n+    @SimpleEvent\n+    public boolean IconLongClick(int elementIndex) {\n+        return EventDispatcher.dispatchEvent(this, \"IconLongClick\", elementIndex + 1);\n     }\n-\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void SubText(String subtext) {\n-        element.setSubText(subtext);\n+    @SimpleEvent\n+    public void IconTouchDown(int elementIndex) {\n+        EventDispatcher.dispatchEvent(this, \"IconTouchDown\", elementIndex + 1);\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public String SubText() {\n-        return element.getSubText();\n+    @SimpleEvent\n+    public void IconTouchUp(int elementIndex) {\n+        EventDispatcher.dispatchEvent(this, \"IconTouchUp\", elementIndex + 1);\n     }\n \n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public int Size() {\n-        return element.size();\n+    @SimpleEvent\n+    public void ExtraButtonClick(int elementIndex) {\n+        lastClickedExtraButton = elementIndex + 1;\n+        EventDispatcher.dispatchEvent(this, \"ExtraButtonClick\", elementIndex + 1);\n     }\n-\n-    //-------------------------Appearance---------------------------\n-\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void UseGlobalProperties(boolean useGlobal) {\n-        element.setRefreshLock(!useGlobal);\n+    @SimpleEvent\n+    public boolean ExtraButtonLongClick(int elementIndex) {\n+        return EventDispatcher.dispatchEvent(this, \"ExtraButtonLongClick\", elementIndex + 1);\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public boolean UseGlobalProperties() {\n-        return element.getRefreshLock();\n+    @SimpleEvent\n+    public void ExtraButtonTouchDown(int elementIndex) {\n+        EventDispatcher.dispatchEvent(this, \"ExtraButtonTouchDown\", elementIndex + 1);\n+    }\n+    @SimpleEvent\n+    public void ExtraButtonTouchUp(int elementIndex) {\n+        EventDispatcher.dispatchEvent(this, \"ExtraButtonTouchUp\", elementIndex + 1);\n     }\n \n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public int ElementBackgroundColor() {\n-        return element.ha.BackgroundColor();\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public int LastClickedElement() {\n+        return lastClickedElement;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void ElementBackgroundColor(int argb) {\n-        element.ha.BackgroundColor(argb);\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public int LastLongClickedElement() {\n+        return lastLongClickedElement;\n+    }\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public int LastClickedIcon() {\n+        return lastClickedIcon;\n     }\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public int LastClickedExtraButton() {\n+        return lastClickedExtraButton;\n+    }\n+\n+\n \n-    //------------Properties that exists in ListView--------------\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int ElementHeight() {\n-        return element.ha.Height();\n+        return elementHeight;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"57\")\n     public void ElementHeight(int height) {\n-        element.ha.Height(height);\n+        elementHeight = height;\n+        refreshElementProperties();\n     }\n \n+\n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public int WidthBeforeIcon() {\n-        return element.labelBeforeIcon.Width();\n+    public int TouchDownColor() {\n+        return elementTouchDownColor;\n     }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_COLOR,\n+            defaultValue = DEFAULT_VALUE_COLOR_DEFAULT)\n+    public void TouchDownColor(int argb) {\n+        elementTouchDownColor = argb;\n+        refreshElementProperties();\n+    }\n+\n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    public int WidthBeforeIcon() {\n+        return elementWidthBeforeIcon;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"7\")\n     public void WidthBeforeIcon(int width) {\n-        element.labelBeforeIcon.Width(width);\n+        elementWidthBeforeIcon = width;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int WidthAfterIcon() {\n-        return element.labelAfterIcon.Width();\n+        return elementWidthAfterIcon;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"5\")\n     public void WidthAfterIcon(int width) {\n-        element.labelAfterIcon.Width(width);\n+        elementWidthAfterIcon = width;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int IconWidth() {\n-        return element.icon.Width();\n+        return elementIconWidth;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"40\")\n     public void IconWidth(int width) {\n-        element.icon.Width(width);\n+        elementIconWidth = width;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int IconHeight() {\n-        return element.icon.Height();\n+        return elementIconHeight;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"40\")\n     public void IconHeight(int height) {\n-        element.icon.Height(height);\n+        elementIconHeight = height;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int IconShape() {\n-        return element.icon.Shape();\n+        return elementIconShape;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BUTTON_SHAPE,\n+            defaultValue = \"\"+BUTTON_SHAPE_ROUNDED)\n     public void IconShape(int shape) {\n-        element.icon.Shape(shape);\n+        elementIconShape = shape;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public int IconBackgroundColor() {\n-        return element.icon.BackgroundColor();\n+    public int IconBgColor() {\n+        return elementIconBgColor;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void IconBackgroundColor(int argb) {\n-        element.icon.BackgroundColor(argb);\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_COLOR,\n+            defaultValue = DEFAULT_VALUE_COLOR_DEFAULT)\n+    public void IconBgColor(int argb) {\n+        elementIconBgColor = argb;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int IconTextColor() {\n-        return element.icon.TextColor();\n+        return elementIconTextColor;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_COLOR,\n+            defaultValue = DEFAULT_VALUE_COLOR_DEFAULT)\n     public void IconTextColor(int argb) {\n-        element.icon.TextColor(argb);\n+        elementIconTextColor = argb;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float IconTextFontSize() {\n-        return element.icon.FontSize();\n+        return elementIconTextFontSize;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_FLOAT, defaultValue = \"24\")\n     public void IconTextFontSize(float size) {\n-        element.icon.FontSize(size);\n+        elementIconTextFontSize = size;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public boolean IconTextFontBold() {\n-        return element.icon.FontBold();\n+        return elementIconTextFontBold;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"True\")\n     public void IconTextFontBold(boolean bold) {\n-        element.icon.FontBold(bold);\n+        elementIconTextFontBold = bold;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public int TextColor() {\n-        return element.size2Label.TextColor();\n-        // but this is also applied for size3MainText...\n+    public boolean IconMultiParams() {\n+        return elementIconMultiParams;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n+    public void IconMultiParams(boolean multiParams) {\n+        elementIconMultiParams = multiParams;\n+        refreshElementProperties();\n+    }\n+\n+    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    public int IconPaddings() {\n+        return elementIconPaddings;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"0\")\n+    public void IconPaddings(int paddings) {\n+        elementIconPaddings = Math.round(paddings * form.deviceDensity());\n+        refreshElementProperties();\n     }\n+\n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    public int TextColor() {\n+        return elementTextColor;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_COLOR,\n+            defaultValue = DEFAULT_VALUE_COLOR_BLACK)\n     public void TextColor(int argb) {\n-        element.size2Label.TextColor(argb);\n-        element.size3MainText.TextColor(argb);\n+        elementTextColor = argb;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float TextFontSize() {\n-        return element.size2Label.FontSize();\n+        return elementTextFontSize;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_FLOAT, defaultValue = \"14\")\n     public void TextFontSize(float size) {\n-        element.size2Label.FontSize(size);\n-        element.size3MainText.FontSize(size);\n+        elementTextFontSize = size;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public boolean TextFontBold() {\n-        return element.size2Label.FontBold();\n+        return elementTextFontBold;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n     public void TextFontBold(boolean bold) {\n-        element.size2Label.FontBold(bold);\n-        element.size3MainText.FontBold(bold);\n+        elementTextFontBold = bold;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float TextHeight() {\n-        return element.size2Label.Height();\n+        return elementTextHeight;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"18\")\n     public void TextHeight(int height) {\n-        element.size2Label.Height(height);\n-        element.size3MainText.Height(height);\n+        elementTextHeight = height;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int SubTextColor() {\n-        return element.size3SubText.TextColor();\n+        return elementSubTextColor;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_COLOR,\n+            defaultValue = DEFAULT_VALUE_COLOR_LTGRAY)\n     public void SubTextColor(int argb) {\n-        element.size3SubText.TextColor(argb);\n+        elementSubTextColor = argb;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float SubTextFontSize() {\n-        return element.size3SubText.FontSize();\n+        return elementSubTextFontSize;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_FLOAT, defaultValue = \"12\")\n     public void SubTextFontSize(float size) {\n-        element.size3SubText.FontSize(size);\n+        elementSubTextFontSize = size;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public boolean SubTextFontBold() {\n-        return element.size3SubText.FontBold();\n+        return elementSubTextFontBold;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n     public void SubTextFontBold(boolean bold) {\n-        element.size3SubText.FontBold(bold);\n+        elementSubTextFontBold = bold;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float SubTextHeight() {\n-        return element.size3SubText.Height();\n+        return elementSubTextHeight;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"18\")\n     public void SubTextHeight(int height) {\n-        element.size3SubText.Height(height);\n+        elementSubTextHeight = height;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float WidthBeforeExtraButton() {\n-        return element.labelBeforeExtraButton.Width();\n+        return elementWidthBeforeExtraButton;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"2\")\n     public void WidthBeforeExtraButton(int width) {\n-        element.labelBeforeExtraButton.Width(width);\n+        elementWidthBeforeExtraButton = width;\n+        refreshElementProperties();\n     }\n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public String ExtraButtonText() {\n-        return element.extraButton.Text();\n+        return elementExtraButtonText;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_TEXT, defaultValue = \"\")\n     public void ExtraButtonText(String text) {\n-        element.extraButton.Text(text);\n+        elementExtraButtonText = text;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float ExtraButtonTextFontSize() {\n-        return element.extraButton.FontSize();\n+        return elementExtraButtonTextFontSize;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_FLOAT, defaultValue = \"12\")\n     public void ExtraButtonTextFontSize(float size) {\n-        element.extraButton.FontSize(size);\n+        elementExtraButtonTextFontSize = size;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public boolean ExtraButtonTextFontBold() {\n-        return element.extraButton.FontBold();\n+        return elementExtraButtonTextFontBold;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n     public void ExtraButtonTextFontBold(boolean bold) {\n-        element.extraButton.FontBold(bold);\n+        elementExtraButtonTextFontBold = bold;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float ExtraButtonWidth() {\n-        return element.extraButton.Width();\n+        return elementExtraButtonWidth;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"20\")\n     public void ExtraButtonWidth(int width) {\n-        element.extraButton.Width(width);\n+        elementExtraButtonWidth = width;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public float ExtraButtonHeight() {\n-        return element.extraButton.Height();\n+        return elementExtraButtonHeight;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"20\")\n     public void ExtraButtonHeight(int height) {\n-        element.extraButton.Height(height);\n+        elementExtraButtonHeight = height;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public int ExtraButtonBackgroundColor() {\n-        return element.extraButton.BackgroundColor();\n+    public float ExtraButtonPaddings() {\n+        return elementExtraButtonPaddings;\n     }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"0\")\n+    public void ExtraButtonPaddings(int paddings) {\n+        elementExtraButtonPaddings = paddings;\n+        refreshElementProperties();\n+    }\n+\n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public void ExtraButtonBackgroundColor(int argb) {\n-        element.extraButton.BackgroundColor(argb);\n+    public int ExtraButtonBgColor() {\n+        return elementExtraButtonBgColor;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_COLOR,\n+            defaultValue = DEFAULT_VALUE_COLOR_LTGRAY)\n+    public void ExtraButtonBgColor(int argb) {\n+        elementExtraButtonBgColor = argb;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int ExtraButtonShape() {\n-        return element.extraButton.Shape();\n+        return elementExtraButtonShape;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BUTTON_SHAPE,\n+            defaultValue = \"\"+BUTTON_SHAPE_OVAL)\n     public void ExtraButtonShape(int shape) {\n-        element.extraButton.Shape(shape);\n+        elementExtraButtonShape = shape;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n-    public int UnderlineColor() {\n-        return element.underline.BackgroundColor();\n+    public String ExtraButtonImage() {\n+        return elementExtraButtonImage;\n     }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_ASSET, defaultValue = \"\")\n+    public void ExtraButtonImage(String path) {\n+        elementExtraButtonImage = path;\n+        refreshElementProperties();\n+    }\n+\n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    public int UnderlineColor() {\n+        return elementUnderlineColor;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_COLOR,\n+            defaultValue = DEFAULT_VALUE_COLOR_LTGRAY)\n     public void UnderlineColor(int argb) {\n-        element.underline.BackgroundColor();\n+        elementUnderlineColor = argb;\n+        refreshElementProperties();\n     }\n \n     @SimpleProperty(category = PropertyCategory.APPEARANCE)\n     public int UnderlineWidth() {\n-        return element.underline.Height();\n+        return elementUnderlineWidth;\n     }\n-    @SimpleProperty(category = PropertyCategory.APPEARANCE)\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_NON_NEGATIVE_INTEGER, defaultValue = \"1\")\n     public void UnderlineWidth(int lineWidth) {\n-        element.underline.Height(lineWidth);\n-    }\n-\n-\n-    // TODO:=======================STATIC=============================\n-\n-    //--------------------------Element Value-------------------------\n-\n-    @SimpleFunction\n-    public static void ElementValue_(ColinTreeListView listview, int elementIndex, YailList value) {\n-        listview.getElement(elementIndex).set(value);\n-    }\n-    @SimpleFunction\n-    public static YailList ElementValue(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).toYailList();\n-    }\n-\n-    @SimpleFunction\n-    public static void IconImage_(ColinTreeListView listview, int elementIndex, String value) {\n-        listview.getElement(elementIndex).setIcon(value);\n-    }\n-    @SimpleFunction\n-    public static String IconImage(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).getIcon();\n-    }\n-    @SimpleFunction\n-    public static void ExtraButtonImage_(ColinTreeListView listview, int elementIndex, String value) {\n-        listview.getElement(elementIndex).setExtraButtonImage(value);\n-    }\n-    @SimpleFunction\n-    public static String ExtraButtonImage(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).getExtraButtonImage();\n-    }\n-\n-    @SimpleFunction\n-    public static void Text_(ColinTreeListView listview, int elementIndex, String text) {\n-        listview.getElement(elementIndex).setText(text);\n-    }\n-    @SimpleFunction\n-    public static String Text(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).getText();\n-    }\n-\n-    @SimpleFunction\n-    public static void SubText_(ColinTreeListView listview, int elementIndex, String subtext) {\n-        listview.getElement(elementIndex).setSubText(subtext);\n-    }\n-    @SimpleFunction\n-    public static String SubText(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).getSubText();\n-    }\n-\n-    @SimpleFunction\n-    public static int Size(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size();\n-    }\n-\n-    //-------------------------Appearance---------------------------\n-\n-    @SimpleFunction\n-    public static void UseGlobalProperties_(ColinTreeListView listview, int elementIndex, boolean useGlobal) {\n-        listview.getElement(elementIndex).setRefreshLock(!useGlobal);\n-    }\n-    @SimpleFunction\n-    public static boolean UseGlobalProperties(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).getRefreshLock();\n-    }\n-\n-    @SimpleFunction\n-    public static int ElementBackgroundColor(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).ha.BackgroundColor();\n-    }\n-    @SimpleFunction\n-    public static void ElementBackgroundColor_(ColinTreeListView listview, int elementIndex, int argb) {\n-        listview.getElement(elementIndex).ha.BackgroundColor(argb);\n-    }\n-\n-    //------------Properties that exists in ListView--------------\n-\n-    @SimpleFunction\n-    public static int ElementHeight(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).ha.Height();\n-    }\n-    @SimpleFunction\n-    public static void ElementHeight_(ColinTreeListView listview, int elementIndex, int height) {\n-        listview.getElement(elementIndex).ha.Height(height);\n-    }\n-\n-    @SimpleFunction\n-    public static int WidthBeforeIcon(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).labelBeforeIcon.Width();\n-    }\n-    @SimpleFunction\n-    public static void WidthBeforeIcon_(ColinTreeListView listview, int elementIndex, int width) {\n-        listview.getElement(elementIndex).labelBeforeIcon.Width(width);\n-    }\n-\n-    @SimpleFunction\n-    public static int WidthAfterIcon(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).labelAfterIcon.Width();\n-    }\n-    @SimpleFunction\n-    public static void WidthAfterIcon_(ColinTreeListView listview, int elementIndex, int width) {\n-        listview.getElement(elementIndex).labelAfterIcon.Width(width);\n-    }\n-\n-    @SimpleFunction\n-    public static int IconWidth(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).icon.Width();\n-    }\n-    @SimpleFunction\n-    public static void IconWidth_(ColinTreeListView listview, int elementIndex, int width) {\n-        listview.getElement(elementIndex).icon.Width(width);\n-    }\n-\n-    @SimpleFunction\n-    public static int IconHeight(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).icon.Height();\n-    }\n-    @SimpleFunction\n-    public static void IconHeight_(ColinTreeListView listview, int elementIndex, int height) {\n-        listview.getElement(elementIndex).icon.Height(height);\n-    }\n-\n-    @SimpleFunction\n-    public static int IconShape(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).icon.Shape();\n-    }\n-    @SimpleFunction\n-    public static void IconShape_(ColinTreeListView listview, int elementIndex, int shape) {\n-        listview.getElement(elementIndex).icon.Shape(shape);\n-    }\n-\n-    @SimpleFunction\n-    public static int IconBackgroundColor(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).icon.BackgroundColor();\n-    }\n-    @SimpleFunction\n-    public static void IconBackgroundColor_(ColinTreeListView listview, int elementIndex, int argb) {\n-        listview.getElement(elementIndex).icon.BackgroundColor(argb);\n-    }\n-\n-    @SimpleFunction\n-    public static int IconTextColor(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).icon.TextColor();\n-    }\n-    @SimpleFunction\n-    public static void IconTextColor_(ColinTreeListView listview, int elementIndex, int argb) {\n-        listview.getElement(elementIndex).icon.TextColor(argb);\n-    }\n-\n-    @SimpleFunction\n-    public static float IconTextFontSize(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).icon.FontSize();\n-    }\n-    @SimpleFunction\n-    public static void IconTextFontSize_(ColinTreeListView listview, int elementIndex, float size) {\n-        listview.getElement(elementIndex).icon.FontSize(size);\n-    }\n-\n-    @SimpleFunction\n-    public static boolean IconTextFontBold(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).icon.FontBold();\n-    }\n-    @SimpleFunction\n-    public static void IconTextFontBold_(ColinTreeListView listview, int elementIndex, boolean bold) {\n-        listview.getElement(elementIndex).icon.FontBold(bold);\n-    }\n-\n-    @SimpleFunction\n-    public static int TextColor(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size2Label.TextColor();\n-        // but this is also applied for size3MainText...\n-    }\n-    @SimpleFunction\n-    public static void TextColor_(ColinTreeListView listview, int elementIndex, int argb) {\n-        listview.getElement(elementIndex).size2Label.TextColor(argb);\n-        listview.getElement(elementIndex).size3MainText.TextColor(argb);\n-    }\n-\n-    @SimpleFunction\n-    public static float TextFontSize(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size2Label.FontSize();\n-    }\n-    @SimpleFunction\n-    public static void TextFontSize_(ColinTreeListView listview, int elementIndex, float size) {\n-        listview.getElement(elementIndex).size2Label.FontSize(size);\n-        listview.getElement(elementIndex).size3MainText.FontSize(size);\n-    }\n-\n-    @SimpleFunction\n-    public static boolean TextFontBold(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size2Label.FontBold();\n-    }\n-    @SimpleFunction\n-    public static void TextFontBold_(ColinTreeListView listview, int elementIndex, boolean bold) {\n-        listview.getElement(elementIndex).size2Label.FontBold(bold);\n-        listview.getElement(elementIndex).size3MainText.FontBold(bold);\n+        elementUnderlineWidth = lineWidth;\n+        refreshElementProperties();\n     }\n \n-    @SimpleFunction\n-    public static float TextHeight(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size2Label.Height();\n-    }\n-    @SimpleFunction\n-    public static void TextHeight_(ColinTreeListView listview, int elementIndex, int height) {\n-        listview.getElement(elementIndex).size2Label.Height(height);\n-        listview.getElement(elementIndex).size3MainText.Height(height);\n-    }\n-\n-    @SimpleFunction\n-    public static int SubTextColor(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size3SubText.TextColor();\n-    }\n-    @SimpleFunction\n-    public static void SubTextColor_(ColinTreeListView listview, int elementIndex, int argb) {\n-        listview.getElement(elementIndex).size3SubText.TextColor(argb);\n-    }\n-\n-    @SimpleFunction\n-    public static float SubTextFontSize(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size3SubText.FontSize();\n-    }\n-    @SimpleFunction\n-    public static void SubTextFontSize_(ColinTreeListView listview, int elementIndex, float size) {\n-        listview.getElement(elementIndex).size3SubText.FontSize(size);\n-    }\n-\n-    @SimpleFunction\n-    public static boolean SubTextFontBold(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size3SubText.FontBold();\n-    }\n-    @SimpleFunction\n-    public static void SubTextFontBold_(ColinTreeListView listview, int elementIndex, boolean bold) {\n-        listview.getElement(elementIndex).size3SubText.FontBold(bold);\n-    }\n-\n-    @SimpleFunction\n-    public static float SubTextHeight(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).size3SubText.Height();\n-    }\n-    @SimpleFunction\n-    public static void SubTextHeight_(ColinTreeListView listview, int elementIndex, int height) {\n-        listview.getElement(elementIndex).size3SubText.Height(height);\n-    }\n-\n-    @SimpleFunction\n-    public static float WidthBeforeExtraButton(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).labelBeforeExtraButton.Width();\n-    }\n-    @SimpleFunction\n-    public static void WidthBeforeExtraButton_(ColinTreeListView listview, int elementIndex, int width) {\n-        listview.getElement(elementIndex).labelBeforeExtraButton.Width(width);\n-    }\n-    @SimpleFunction\n-    public static String ExtraButtonText(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).extraButton.Text();\n-    }\n-    @SimpleFunction\n-    public static void ExtraButtonText_(ColinTreeListView listview, int elementIndex, String text) {\n-        listview.getElement(elementIndex).extraButton.Text(text);\n+    private void refreshElementProperties() {\n+        for (int i = 0; i < currentListSize; i++) {\n+            getElement(i + 1).refreshProperties();\n+        }\n     }\n \n-    @SimpleFunction\n-    public static float ExtraButtonTextFontSize(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).extraButton.FontSize();\n-    }\n-    @SimpleFunction\n-    public static void ExtraButtonTextFontSize_(ColinTreeListView listview, int elementIndex, float size) {\n-        listview.getElement(elementIndex).extraButton.FontSize(size);\n-    }\n-\n-    @SimpleFunction\n-    public static boolean ExtraButtonTextFontBold(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).extraButton.FontBold();\n-    }\n-    @SimpleFunction\n-    public static void ExtraButtonTextFontBold_(ColinTreeListView listview, int elementIndex, boolean bold) {\n-        listview.getElement(elementIndex).extraButton.FontBold(bold);\n-    }\n-\n-    @SimpleFunction\n-    public static float ExtraButtonWidth(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).extraButton.Width();\n-    }\n-    @SimpleFunction\n-    public static void ExtraButtonWidth_(ColinTreeListView listview, int elementIndex, int width) {\n-        listview.getElement(elementIndex).extraButton.Width(width);\n-    }\n-\n-    @SimpleFunction\n-    public static float ExtraButtonHeight(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).extraButton.Height();\n-    }\n-    @SimpleFunction\n-    public static void ExtraButtonHeight_(ColinTreeListView listview, int elementIndex, int height) {\n-        listview.getElement(elementIndex).extraButton.Height(height);\n-    }\n-\n-    @SimpleFunction\n-    public static int ExtraButtonBackgroundColor(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).extraButton.BackgroundColor();\n-    }\n-    @SimpleFunction\n-    public static void ExtraButtonBackgroundColor_(ColinTreeListView listview, int elementIndex, int argb) {\n-        listview.getElement(elementIndex).extraButton.BackgroundColor(argb);\n-    }\n \n-    @SimpleFunction\n-    public static int ExtraButtonShape(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).extraButton.Shape();\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public boolean ScrollBottomAfterAdd() {\n+        return scrollBottomAfterAdd;\n     }\n-    @SimpleFunction\n-    public static void ExtraButtonShape_(ColinTreeListView listview, int elementIndex, int shape) {\n-        listview.getElement(elementIndex).extraButton.Shape(shape);\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n+    public void ScrollBottomAfterAdd(boolean scroll) {\n+        scrollBottomAfterAdd = scroll;\n     }\n \n-    @SimpleFunction\n-    public static int UnderlineColor(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).underline.BackgroundColor();\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public boolean AsyncImageLoad() {\n+        return asyncImageLoad;\n     }\n-    @SimpleFunction\n-    public static void UnderlineColor_(ColinTreeListView listview, int elementIndex, int argb) {\n-        listview.getElement(elementIndex).underline.BackgroundColor();\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n+    public void AsyncImageLoad(boolean async) {\n+        asyncImageLoad = async;\n     }\n \n-    @SimpleFunction\n-    public static int UnderlineWidth(ColinTreeListView listview, int elementIndex) {\n-        return listview.getElement(elementIndex).underline.Height();\n-    }\n-    @SimpleFunction\n-    public static void UnderlineWidth_(ColinTreeListView listview, int elementIndex, int lineWidth) {\n-        listview.getElement(elementIndex).underline.Height(lineWidth);\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public boolean CacheImage() {\n+        return cacheImage;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n+    public void CacheImage(boolean cache) {\n+        cacheImage = cache;\n+    }\n+\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public boolean ExtraButtonEnabled() {\n+        return extraButtonEnabled;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n+    public void ExtraButtonEnabled(boolean enable) {\n+        extraButtonEnabled = enable;\n+    }\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public boolean MultiSelection() {\n+        return multiSelection;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"False\")\n+    public void MultiSelection(boolean multiSelection) {\n+        this.multiSelection = multiSelection;\n+    }\n+    @SimpleProperty(category = PropertyCategory.BEHAVIOR)\n+    public boolean ShowTouchDownColor() {\n+        return showTouchDownColor;\n+    }\n+    @SimpleProperty\n+    @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN, defaultValue = \"True\")\n+    public void ShowTouchDownColor(boolean show) {\n+        showTouchDownColor = show;\n+    }\n+\n+\n+    abstract class Element implements OnClickListener, OnLongClickListener, OnTouchListener {\n+\n+        private final ComponentContainer container;\n+\n+        public static final String NOTICE = \"Welcome to improve this extension with plugins :P\";\n+        public final HorizontalArrangement ha;\n+        public final Label labelBeforeIcon;\n+        public final ButtonBase icon;\n+        public final Label labelAfterIcon;\n+        public final Label size2Label;\n+        public final VerticalArrangement size3Va;\n+        public final Label size3MainText;\n+        public final Label size3SubText;\n+        public final Label labelBeforeExtraButton;\n+        public final ButtonBase extraButton;\n+        public final Label labelAfterText;\n+        public final Label underline;\n+\n+        private String iconValue = \"\";\n+        private String extraImagePath = \"\";\n+\n+        private int currentSize;\n+\n+        private boolean refreshLock = false;\n+\n+        public Element(ComponentContainer container, YailList list) {\n+            this.container = container;\n+\n+            ha = new HorizontalArrangement(container);\n+            ha.getView().setOnClickListener(this);\n+            ha.getView().setOnLongClickListener(this);\n+            ha.getView().setOnTouchListener(this);\n+            ha.AlignVertical(ComponentConstants.GRAVITY_CENTER_VERTICAL);\n+            ha.Width(LENGTH_FILL_PARENT);\n+\n+            labelBeforeIcon = new Label(ha);\n+            labelBeforeIcon.Text(\"\");\n+            labelBeforeIcon.getView().setOnClickListener(this);\n+            labelBeforeIcon.getView().setOnLongClickListener(this);\n+            labelBeforeIcon.getView().setOnTouchListener(this);\n+\n+            icon = new ButtonBase(ha) {\n+                @Override\n+                public void click() {\n+                    onIconClick();\n+                }\n+                @Override\n+                public boolean longClick() {\n+                    return onIconLongClick();\n+                }\n+                @Override\n+                public void TouchDown() {\n+                    onIconTouchDown();\n+                }\n+                @Override\n+                public void TouchUp() {\n+                    onIconTouchUp();\n+                }\n+            };\n+\n+            labelAfterIcon = new Label(ha);\n+            labelAfterIcon.Text(\"\");\n+            labelAfterIcon.getView().setOnClickListener(this);\n+            labelAfterIcon.getView().setOnLongClickListener(this);\n+            labelAfterIcon.getView().setOnTouchListener(this);\n+\n+            size2Label = new Label(ha);\n+            size2Label.Width(LENGTH_FILL_PARENT);\n+            size2Label.Text(\"Element Text\");\n+            size2Label.TextAlignment(ALIGNMENT_NORMAL);\n+            size2Label.BackgroundColor(COLOR_NONE);\n+            size2Label.getView().setOnClickListener(this);\n+            size2Label.getView().setOnLongClickListener(this);\n+            size2Label.getView().setOnTouchListener(this);\n+\n+            size3Va = new VerticalArrangement(ha);\n+            size3Va.AlignVertical(ComponentConstants.GRAVITY_CENTER_VERTICAL);\n+            size3Va.AlignHorizontal(ComponentConstants.GRAVITY_LEFT);\n+            size3Va.Width(LENGTH_FILL_PARENT);\n+\n+            size3MainText = new Label(size3Va);\n+            size3MainText.Text(\"Element Main Text\");\n+            size3MainText.TextAlignment(ALIGNMENT_NORMAL);\n+            size3MainText.getView().setOnClickListener(this);\n+            size3MainText.getView().setOnLongClickListener(this);\n+            size3MainText.getView().setOnTouchListener(this);\n+\n+            size3SubText = new Label(size3Va);\n+            size3SubText.Text(\"Element Sub Text\");\n+            size3SubText.TextAlignment(ALIGNMENT_NORMAL);\n+            size3SubText.getView().setOnClickListener(this);\n+            size3SubText.getView().setOnLongClickListener(this);\n+            size3SubText.getView().setOnTouchListener(this);\n+\n+            labelBeforeExtraButton = new Label(ha);\n+            labelBeforeExtraButton.Text(\"\");\n+            labelBeforeExtraButton.Width(2);\n+            labelBeforeExtraButton.getView().setOnClickListener(this);\n+            labelBeforeExtraButton.getView().setOnLongClickListener(this);\n+            labelBeforeExtraButton.getView().setOnTouchListener(this);\n+\n+            extraButton = new ButtonBase(ha) {\n+                @Override\n+                public void click() {\n+                    onExtraButtonClick();\n+                }\n+                @Override\n+                public boolean longClick() {\n+                    return onExtraButtonLongClick();\n+                }\n+                @Override\n+                public void TouchDown() {\n+                    onExtraButtonTouchDown();\n+                }\n+                @Override\n+                public void TouchUp() {\n+                    onExtraButtonTouchUp();\n+                }\n+            };\n+\n+            labelAfterText = new Label(ha);\n+            labelAfterText.Text(\"\");\n+            labelAfterText.Width(10);\n+            labelAfterText.getView().setOnClickListener(this);\n+            labelAfterText.getView().setOnLongClickListener(this);\n+            labelAfterText.getView().setOnTouchListener(this);\n+\n+            underline = new Label(container);\n+            underline.Width(LENGTH_FILL_PARENT);\n+            underline.Text(\"\");\n+            underline.HasMargins(false);\n+            underline.getView().setOnClickListener(this);\n+            underline.getView().setOnLongClickListener(this);\n+            underline.getView().setOnTouchListener(this);\n+            refreshProperties();\n+\n+            currentSize = 0;\n+            set(list);\n+        }\n+\n+        // Override these to implement the events\n+        public abstract void onElementClick();\n+        public abstract boolean onElementLongClick();\n+        public abstract void onElementTouchDown();\n+        public abstract void onElementTouchUp();\n+\n+        public abstract void onIconClick();\n+        public abstract boolean onIconLongClick();\n+        public abstract void onIconTouchDown();\n+        public abstract void onIconTouchUp();\n+\n+        public abstract void onExtraButtonClick();\n+        public abstract boolean onExtraButtonLongClick();\n+        public abstract void onExtraButtonTouchDown();\n+        public abstract void onExtraButtonTouchUp();\n+\n+        @Override\n+        public void onClick(View v) {\n+            onElementClick();\n+        }\n+        @Override\n+        public boolean onLongClick(View v) {\n+            if (multiSelection){\n+                int index = elementList.indexOf(this) + 1;\n+                if (longClickedElements.contains(index)){\n+                    longClickedElements.remove(longClickedElements.indexOf(index));\n+                    ha.BackgroundColor(0x00FFFFFF);\n+                }else {\n+                    longClickedElements.add(index);\n+                    ha.BackgroundColor(elementTouchDownColor);\n+                }\n+            }\n+            return onElementLongClick();\n+        }\n+        private void ElementTouchDown() {\n+            if (showTouchDownColor) {\n+                ha.BackgroundColor(elementTouchDownColor);\n+            }\n+            onElementTouchDown();\n+        }\n+        private void ElementTouchUp() {\n+            if (showTouchDownColor) {\n+                ha.BackgroundColor(0x00FFFFFF);\n+            }\n+            onElementTouchUp();\n+        }\n+        @Override\n+        public boolean onTouch(View v, MotionEvent event) {\n+            int action = event.getActionMasked();\n+            if (action == MotionEvent.ACTION_DOWN) {\n+                ElementTouchDown();\n+            } else if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {\n+                ElementTouchUp();\n+            }\n+            return false;\n+        }\n+\n+        public Element refreshProperties() {\n+            if (refreshLock) {\n+                return this;\n+            }\n+\n+            show();\n+\n+            ha.Height(elementHeight);\n+\n+            labelBeforeIcon.Width(elementWidthBeforeIcon);\n+\n+            icon.Height(elementIconHeight);\n+            icon.Width(elementIconWidth);\n+            icon.Shape(elementIconShape);\n+            icon.BackgroundColor(elementIconBgColor);\n+            icon.TextColor(elementIconTextColor);\n+            icon.FontSize(elementIconTextFontSize);\n+            icon.FontBold(elementIconTextFontBold);\n+            icon.getView()\n+                    .setPadding(elementIconPaddings, elementIconPaddings,\n+                            elementIconPaddings, elementIconPaddings);\n+            setIcon(iconValue); // called due to elementIconMultiParams\n+\n+            labelAfterIcon.Width(elementWidthAfterIcon);\n+\n+            size2Label.TextColor(elementTextColor);\n+            size2Label.FontSize(elementTextFontSize);\n+            size2Label.FontBold(elementTextFontBold);\n+\n+            size3MainText.TextColor(elementTextColor);\n+            size3MainText.FontSize(elementTextFontSize);\n+            size3MainText.FontBold(elementTextFontBold);\n+            size3MainText.Height(elementTextHeight);\n+\n+            size3SubText.TextColor(elementSubTextColor);\n+            size3SubText.FontSize(elementSubTextFontSize);\n+            size3SubText.FontBold(elementSubTextFontBold);\n+            size3SubText.Height(elementSubTextHeight);\n+\n+            labelBeforeExtraButton.Width(elementWidthBeforeExtraButton);\n+\n+            Visible(extraButton, extraButtonEnabled);\n+            extraButton.Text(elementExtraButtonText);\n+            extraButton.FontSize(elementExtraButtonTextFontSize);\n+            extraButton.FontBold(elementExtraButtonTextFontBold);\n+            extraButton.Width(elementExtraButtonWidth);\n+            extraButton.Height(elementExtraButtonHeight);\n+            extraButton.BackgroundColor(elementExtraButtonBgColor);\n+            extraButton.Shape(elementExtraButtonShape);\n+            extraButton.getView()\n+                    .setPadding(elementExtraButtonPaddings, elementExtraButtonPaddings,\n+                            elementExtraButtonPaddings, elementExtraButtonPaddings);\n+            setExtraButton();\n+\n+            underline.BackgroundColor(elementUnderlineColor);\n+            underline.Height(elementUnderlineWidth);\n+\n+            return this;\n+        }\n+\n+        public Element setRefreshLock(boolean lock) {\n+            this.refreshLock = lock;\n+            return this;\n+        }\n+        public boolean getRefreshLock() {\n+            return refreshLock;\n+        }\n+\n+        public Element show() {\n+            Visible(ha, true);\n+            Visible(underline, true);\n+            return this;\n+        }\n+        public Element hide() {\n+            Visible(ha, false);\n+            Visible(underline, false);\n+            return this;\n+        }\n+\n+        public int size() {\n+            return currentSize;\n+        }\n+\n+        public Element setIcon(String value) {\n+            this.iconValue = value;\n+            String path = new String(value);\n+            String text = \"\";\n+            if (elementIconMultiParams && value.contains(\"||\")) {\n+                String[] s = value.split(\"\\\\|\\\\|\", 2);\n+                path = s[0];\n+                text = s[1];\n+            }\n+            icon.Text(text);\n+            if (size() > 1) {\n+                if (cacheImage) { // If cache image\n+                    setImageThroughCache(icon, path);\n+                } else { // Not cache image\n+                    if (asyncImageLoad) {\n+                        MediaUtil.getBitmapDrawableAsync(form, path, new AsyncCallbackPair<BitmapDrawable>() {\n+                            @Override\n+                            public void onFailure(String message) {}\n+\n+                            @Override\n+                            public void onSuccess(final BitmapDrawable result) {\n+                                container.$context().runOnUiThread(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        ViewUtil.setBackgroundDrawable(icon.getView(), result);\n+                                    }\n+                                });\n+                            }\n+                        });\n+                    } else { // No cache and no async, use default.\n+                        icon.Image(path);\n+                    }\n+                }\n+            }\n+            return this;\n+        }\n+        public String getIcon() {\n+            return size()>1 ? iconValue : \"\";\n+        }\n+\n+        public Element setExtraButton() {\n+            setImageThroughCache(extraButton, elementExtraButtonImage);\n+            return this;\n+        }\n+        public Element setExtraButtonImage(String path) {\n+            this.extraImagePath = path;\n+            setImageThroughCache(extraButton, path);\n+            return this;\n+        }\n+        public String getExtraButtonImage() {\n+            return this.extraImagePath;\n+        }\n+\n+        private void setImageThroughCache(ButtonBase bb, String path) {\n+            bb.Image(\"\"); // As preload image\n+            CachedImage ci = iconMap.get(path); // Cache all the time\n+            if (ci != null) {\n+                ci.setImage(bb);\n+            } else {\n+                iconMap.put(path, new CachedImage(path, bb));\n+            }\n+        }\n+\n+        public Element setText(String text) {\n+            if (size() < 3) {\n+                size2Label.Text(text);\n+            } else {\n+                setMainText(text);\n+            }\n+            return this;\n+        }\n+        public String getText() {\n+            return (size()<3) ? size2Label.Text() : getMainText();\n+        }\n+\n+        public Element setMainText(String text) {\n+            if (size() < 3) {\n+                setText(text);\n+            } else {\n+                size3MainText.Text(text);\n+            }\n+            return this;\n+        }\n+        public String getMainText() {\n+            return (size()<3) ? getText() : size3MainText.Text();\n+        }\n+\n+        public Element setSubText(String text) {\n+            if (size() < 3) {\n+                setText(text);\n+            } else {\n+                size3SubText.Text(text);\n+            }\n+            return this;\n+        }\n+        public String getSubText() {\n+            return (size()<3) ? getText() : size3SubText.Text();\n+        }\n+\n+        public Element set(YailList list) {\n+            int arrayLength = list.toArray().length;\n+            switch (arrayLength) {\n+                case 1:\n+                    toSize1(list);\n+                    break;\n+                case 2:\n+                    toSize2(list);\n+                    break;\n+                default:\n+                    if (arrayLength < 1) { // 0 only\n+                        throw new RuntimeException(\"The list for a element should not be empty!\");\n+                    } else { // >=3\n+                        toSize3(list);\n+                    }\n+            }\n+            return this;\n+        }\n+        public Element toSize1(YailList list) { // Text only\n+            currentSize = 1;\n+            Visible(icon, false);\n+            Visible(size2Label, true);\n+            Visible(size3Va, false);\n+\n+            size2Label.Text(list.getString(0));\n+            return this;\n+        }\n+        public Element toSize2(YailList list) { // Icon and a Text\n+            currentSize = 2;\n+            Visible(icon, true);\n+            Visible(size2Label, true);\n+            Visible(size3Va, false);\n+\n+            setIcon(list.getString(0));\n+            size2Label.Text(list.getString(1));\n+            return this;\n+        }\n+        public Element toSize3(YailList list) { // Icon and two Texts\n+            currentSize = 3;\n+            Visible(icon, true);\n+            Visible(size2Label, false);\n+            Visible(size3Va, true);\n+\n+            setIcon(list.getString(0));\n+            size3MainText.Text(list.getString(1));\n+            size3SubText.Text(list.getString(2));\n+            return this;\n+        }\n+\n+        public YailList toYailList() {\n+            switch (size()) {\n+                case 1:\n+                    return makeYailList(\n+                            getText());\n+                case 2:\n+                    return makeYailList(\n+                            getIcon(),\n+                            getText());\n+                case 3:\n+                    return makeYailList(\n+                            getIcon(),\n+                            getMainText(),\n+                            getSubText());\n+                default:\n+                    return YailList.makeEmptyList();\n+            }\n+        }\n+    }\n+\n+    private class CachedImage {\n+\n+        public final String path;\n+        private BitmapDrawable bd = null;\n+        private ArrayList<ButtonBase> callback = new ArrayList<ButtonBase>();\n+\n+        public CachedImage(String path, ButtonBase bb) {\n+            this.path = path;\n+            addCallback(bb);\n+            if (asyncImageLoad) {\n+                MediaUtil.getBitmapDrawableAsync(form, path, new AsyncCallbackPair<BitmapDrawable>() {\n+                    @Override\n+                    public void onFailure(String message) {\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(BitmapDrawable result) {\n+                        gotBitmapDrawable(result);\n+                    }\n+                });\n+            } else { // Use built-in Synchronizer to make this operation sync\n+                try {\n+                    gotBitmapDrawable(MediaUtil.getBitmapDrawable(form, path));\n+                } catch(IOException ok) {\n+                }\n+            }\n+        }\n+\n+        public void setImage(ButtonBase bb) {\n+            if (bd != null) {\n+                ViewUtil.setBackgroundDrawable(bb.getView(), new BitmapDrawable(form.getResources(), bd.getBitmap()));\n+            } else {\n+                addCallback(bb);\n+            }\n+        }\n+\n+        public void addCallback(ButtonBase buttonBase) {\n+            callback.add(buttonBase);\n+        }\n+\n+        private void gotBitmapDrawable(final BitmapDrawable bd) {\n+            if (this.bd != null) {\n+                return;\n+            }\n+            this.bd = bd;\n+            vaContainer.$context().runOnUiThread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    for (ButtonBase bb : callback) {\n+                        setImage(bb);\n+                    }\n+                }\n+            });\n+        }\n+\n+        public void releaseMemory() {\n+            this.bd = null;\n+            this.callback = null;\n+            // After bd is set to null, all request are not going to triger startLoading()\n+        }\n+    }\n+\n+    /**\n+     * Adapt different versions of Appinventor\n+     * The original problem caused by changes in:\n+     *   github/mit-cml/appinventor-sources/95be2f2489910d552052606b3a38eff012e632ec\n+     *   appinventor/components/src/com/google/appinventor/components/runtime/AndroidViewComponent.java @ 72\n+     */\n+    public static void Visible(AndroidViewComponent avc, boolean visibility) {\n+        Class<?> claz = AndroidViewComponent.class;\n+        try {\n+            claz.getMethod(\"Visible\", Boolean.class)\n+                    .invoke(avc, (Boolean)visibility);\n+            return;\n+        } catch(NoSuchMethodException e) {\n+        } catch(IllegalAccessException e) {\n+        } catch(InvocationTargetException e) {\n+        }\n+        try {\n+            claz.getMethod(\"Visible\", boolean.class)\n+                    .invoke(avc, visibility);\n+        } catch(NoSuchMethodException e) {\n+        } catch(IllegalAccessException e) {\n+        } catch(InvocationTargetException e) {\n+        }\n     }\n-\n }"
  }
]
