[
  {
    "sha": "fc06cf092eefa6a3d0a971e6da980860ad4da507",
    "filename": "compiler/compiler/src/main/java/org/robovm/compiler/config/Config.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/MobiVM/robovm/blob/3ef05ec27fc57d79331efd84171e5395a4b6c4f9/compiler/compiler/src/main/java/org/robovm/compiler/config/Config.java",
    "raw_url": "https://github.com/MobiVM/robovm/raw/3ef05ec27fc57d79331efd84171e5395a4b6c4f9/compiler/compiler/src/main/java/org/robovm/compiler/config/Config.java",
    "contents_url": "https://api.github.com/repos/MobiVM/robovm/contents/compiler/compiler/src/main/java/org/robovm/compiler/config/Config.java?ref=3ef05ec27fc57d79331efd84171e5395a4b6c4f9",
    "patch": "@@ -44,6 +44,7 @@\n import org.robovm.compiler.plugin.objc.InterfaceBuilderClassesPlugin;\n import org.robovm.compiler.plugin.objc.ObjCBlockPlugin;\n import org.robovm.compiler.plugin.objc.ObjCMemberPlugin;\n+import org.robovm.compiler.plugin.objc.ObjCProtocolToObjCObjectPlugin;\n import org.robovm.compiler.plugin.objc.ObjCProtocolProxyPlugin;\n import org.robovm.compiler.target.ConsoleTarget;\n import org.robovm.compiler.target.Target;\n@@ -246,6 +247,7 @@ protected Config(UUID uuid) {\n         this.plugins.addAll(0, Arrays.asList(\n                 new InterfaceBuilderClassesPlugin(),\n                 new ObjCProtocolProxyPlugin(),\n+                new ObjCProtocolToObjCObjectPlugin(),\n                 new ObjCMemberPlugin(),\n                 new ObjCBlockPlugin(),\n                 new AnnotationImplPlugin(),"
  },
  {
    "sha": "f1af940797b4b05235e02a1e91598a5299644309",
    "filename": "compiler/compiler/src/main/java/org/robovm/compiler/plugin/objc/ObjCProtocolToObjCObjectPlugin.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/MobiVM/robovm/blob/3ef05ec27fc57d79331efd84171e5395a4b6c4f9/compiler/compiler/src/main/java/org/robovm/compiler/plugin/objc/ObjCProtocolToObjCObjectPlugin.java",
    "raw_url": "https://github.com/MobiVM/robovm/raw/3ef05ec27fc57d79331efd84171e5395a4b6c4f9/compiler/compiler/src/main/java/org/robovm/compiler/plugin/objc/ObjCProtocolToObjCObjectPlugin.java",
    "contents_url": "https://api.github.com/repos/MobiVM/robovm/contents/compiler/compiler/src/main/java/org/robovm/compiler/plugin/objc/ObjCProtocolToObjCObjectPlugin.java?ref=3ef05ec27fc57d79331efd84171e5395a4b6c4f9",
    "patch": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright (C) 2014 RoboVM AB\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU General Public License\n+ * as published by the Free Software Foundation; either version 2\n+ * of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ */\n+package org.robovm.compiler.plugin.objc;\n+\n+import org.robovm.compiler.ModuleBuilder;\n+import org.robovm.compiler.clazz.Clazz;\n+import org.robovm.compiler.config.Config;\n+import org.robovm.compiler.plugin.AbstractCompilerPlugin;\n+import org.robovm.compiler.plugin.CompilerPlugin;\n+import soot.Body;\n+import soot.PatchingChain;\n+import soot.SootClass;\n+import soot.SootMethod;\n+import soot.SootResolver;\n+import soot.Unit;\n+import soot.jimple.InvokeStmt;\n+import soot.jimple.SpecialInvokeExpr;\n+\n+/**\n+ * {@link CompilerPlugin} which replaces Object super class with NSObject for\n+ * local/nested/anonymous classes that implement NSObjectProtocol interfaces.\n+ * Otherwise marshalling of pure java object will fail with exception\n+ */\n+public class ObjCProtocolToObjCObjectPlugin extends AbstractCompilerPlugin {\n+    public static final String OBJC_PROTOCOL = \"org.robovm.objc.ObjCProtocol\";\n+    public static final String NS_OBJECT = \"org.robovm.apple.foundation.NSObject\";\n+    public static final String OBJC_OBJECT = \"org.robovm.objc.ObjCObject\";\n+    private SootClass org_robovm_apple_foundation_NSObject = null;\n+    private SootClass org_robovm_objc_ObjCObject = null;\n+    private SootClass org_robovm_objc_ObjCProtocol = null;\n+\n+    private boolean initialized = false;\n+\n+    private void init() {\n+        if (initialized) {\n+            return;\n+        }\n+        SootResolver r = SootResolver.v();\n+        org_robovm_objc_ObjCProtocol = r.makeClassRef(OBJC_PROTOCOL);\n+        org_robovm_apple_foundation_NSObject = r.makeClassRef(NS_OBJECT);\n+        // These have to be resolved to HIERARCHY so that isPhantom() works\n+        // properly\n+        org_robovm_objc_ObjCObject = r.resolveClass(OBJC_OBJECT, SootClass.HIERARCHY);\n+        initialized = true;\n+    }\n+    \n+    private boolean shouldReplaceSuper(SootClass cls) {\n+        if (org_robovm_objc_ObjCProtocol.isPhantom() || !cls.isConcrete())\n+            return false;\n+\n+        if (!cls.hasSuperclass() || !\"java.lang.Object\".equals(cls.getSuperclass().getName()))\n+            return false;\n+\n+        return inheritsObjCProtocol(cls);\n+    }\n+\n+    private boolean inheritsObjCProtocol(SootClass cls) {\n+        for (SootClass interfaze : cls.getInterfaces()) {\n+            if (interfaze == org_robovm_objc_ObjCProtocol || inheritsObjCProtocol(interfaze)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Returns class the implementation should have as superclass, either\n+     * <code>org.robovm.apple.foundation.NSObject</code>, \n+     * <code>org.robovm.objc.ObjCObject</code>.\n+     */\n+    private SootClass getSuperReplacementCandidate(SootClass cls) {\n+        if (cls.getName().equals(\"org.robovm.apple.foundation.NSObjectProtocol\")) {\n+            return org_robovm_apple_foundation_NSObject;\n+        }\n+        if (cls == org_robovm_objc_ObjCProtocol) {\n+            return org_robovm_objc_ObjCObject;\n+        }\n+        for (SootClass interfaze : cls.getInterfaces()) {\n+            SootClass superCls = getSuperReplacementCandidate(interfaze);\n+            if (superCls != null) {\n+                return superCls;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void adjustSuperInitCall(SootClass cls, SootClass newSuper) {\n+        // replacing only java.lang.Object supers and there is expected to be only\n+        // single kind of super call <init>() so call directly\n+        SootMethod method = cls.getMethod(\"void <init>()\");\n+        if (method != null) {\n+            Body body = method.retrieveActiveBody();\n+            PatchingChain<Unit> units = body.getUnits();\n+            for (Unit unit = units.getFirst(); unit != null; unit = body.getUnits().getSuccOf(unit)) {\n+                if (unit instanceof InvokeStmt) {\n+                    InvokeStmt invoke = (InvokeStmt) unit;\n+                    if (invoke.getInvokeExpr() instanceof SpecialInvokeExpr) {\n+                        SpecialInvokeExpr expr = (SpecialInvokeExpr) invoke.getInvokeExpr();\n+                        expr.setMethodRef(newSuper.getMethod(\"void <init>()\").makeRef());\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void beforeClass(Config config, Clazz clazz, ModuleBuilder moduleBuilder) {\n+        init();\n+        SootClass sootClass = clazz.getSootClass();\n+        if (shouldReplaceSuper(sootClass)) {\n+            SootClass superCandidate = getSuperReplacementCandidate(sootClass);\n+            if (superCandidate != null) {\n+                sootClass.setSuperclass(superCandidate);\n+                adjustSuperInitCall(sootClass, superCandidate);\n+            }\n+        }\n+    }\n+}"
  }
]
