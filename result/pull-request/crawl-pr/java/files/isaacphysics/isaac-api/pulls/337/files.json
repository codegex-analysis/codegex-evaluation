[
  {
    "sha": "4d0d6f79b553cddc961ab8b3203c992528de97f4",
    "filename": "config-templates/linux-local-dev-segue-config.properties",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/config-templates/linux-local-dev-segue-config.properties",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/config-templates/linux-local-dev-segue-config.properties",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/config-templates/linux-local-dev-segue-config.properties?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -97,6 +97,12 @@ TWITTER_CALLBACK_URI=http://localhost:8000/auth/twitter/callback\n # IPAddress GeoCoding\n IP_INFO_DB_API_KEY=[enter_key_here]\n \n+# MailJet Secrets and Lists:\n+MAILJET_API_KEY=[key_here]\n+MAILJET_API_SECRET=[key_here]\n+MAILJET_NEWS_LIST_ID=[list_id_here]\n+MAILJET_EVENTS_LIST_ID=[list_id_here]\n+\n # Prometheus Metrics Export\n API_METRICS_EXPORT_PORT=9966\n "
  },
  {
    "sha": "4ab95bc6264ee3473dce2391cd8c897f1d50ca73",
    "filename": "config-templates/windows--local-dev-segue-config.properties",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/config-templates/windows--local-dev-segue-config.properties",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/config-templates/windows--local-dev-segue-config.properties",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/config-templates/windows--local-dev-segue-config.properties?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -97,6 +97,12 @@ TWITTER_CALLBACK_URI=http://localhost:8000/auth/twitter/callback\n # IPAddress GeoCoding\r\n IP_INFO_DB_API_KEY=[enter_key_here]\r\n \r\n+# MailJet Secrets and Lists:\r\n+MAILJET_API_KEY=[key_here]\r\n+MAILJET_API_SECRET=[key_here]\r\n+MAILJET_NEWS_LIST_ID=[list_id_here]\r\n+MAILJET_EVENTS_LIST_ID=[list_id_here]\r\n+\r\n # Prometheus Metrics Export\r\n API_METRICS_EXPORT_PORT=9966\r\n \r"
  },
  {
    "sha": "6c0d33db8ceb2c04c86a54ae9f7c5bf270449e5a",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/pom.xml",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/pom.xml",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/pom.xml?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -350,6 +350,12 @@\n             <version>0.6.3</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.mailjet</groupId>\n+            <artifactId>mailjet-client</artifactId>\n+            <version>5.1.1</version>\n+        </dependency>\n+\n         <!--Jetty JSR-356 Websocket server side dependency -->\n         <dependency>\n             <groupId>org.eclipse.jetty.websocket</groupId>"
  },
  {
    "sha": "5b285fc363976d6610a4af82253f71fdfadf4c8d",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/api/AdminFacade.java",
    "status": "modified",
    "additions": 30,
    "deletions": 1,
    "changes": 31,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/AdminFacade.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/AdminFacade.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/api/AdminFacade.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -39,6 +39,8 @@\n import org.slf4j.LoggerFactory;\n import uk.ac.cam.cl.dtg.isaac.api.managers.EventBookingManager;\n import uk.ac.cam.cl.dtg.segue.api.Constants.*;\n+import uk.ac.cam.cl.dtg.segue.api.managers.ExternalAccountManager;\n+import uk.ac.cam.cl.dtg.segue.api.managers.ExternalAccountSynchronisationException;\n import uk.ac.cam.cl.dtg.segue.api.managers.SegueResourceMisuseException;\n import uk.ac.cam.cl.dtg.segue.api.managers.StatisticsManager;\n import uk.ac.cam.cl.dtg.segue.api.managers.UserAccountManager;\n@@ -137,6 +139,7 @@\n     private final AbstractUserPreferenceManager userPreferenceManager;\n     private final EventBookingManager eventBookingManager;\n     private final UserAssociationManager associationManager;\n+    private final ExternalAccountManager externalAccountManager;\n     private final IMisuseMonitor misuseMonitor;\n \n     /**\n@@ -169,7 +172,7 @@ public AdminFacade(final PropertiesLoader properties, final UserAccountManager u\n                        final StatisticsManager statsManager, final LocationManager locationManager,\n                        final SchoolListReader schoolReader, final AbstractUserPreferenceManager userPreferenceManager,\n                        final EventBookingManager eventBookingManager, final UserAssociationManager associationManager,\n-                       final IMisuseMonitor misuseMonitor) {\n+                       final ExternalAccountManager externalAccountManager, final IMisuseMonitor misuseMonitor) {\n         super(properties, logManager);\n         this.userManager = userManager;\n         this.contentManager = contentManager;\n@@ -180,6 +183,7 @@ public AdminFacade(final PropertiesLoader properties, final UserAccountManager u\n         this.userPreferenceManager = userPreferenceManager;\n         this.eventBookingManager = eventBookingManager;\n         this.associationManager = associationManager;\n+        this.externalAccountManager = externalAccountManager;\n         this.misuseMonitor = misuseMonitor;\n     }\n \n@@ -1616,4 +1620,29 @@ public Response resetMisuseMonitor(@Context final HttpServletRequest request,\n             return SegueErrorResponse.getNotLoggedInResponse();\n         }\n     }\n+\n+    /**\n+     *  Manually trigger a sync. Unfinished.\n+     */\n+    @GET\n+    @Path(\"/sync_external_accounts\")\n+    @ApiOperation(value = \"Trigger an update for external providers where account details have changed.\")\n+    public Response syncExternalAccounts(@Context final HttpServletRequest httpServletRequest) {\n+        //TODO - remove this?\n+        try {\n+            RegisteredUserDTO user = userManager.getCurrentRegisteredUser(httpServletRequest);\n+            if (!isUserAnAdmin(userManager, user)) {\n+                return SegueErrorResponse.getIncorrectRoleResponse();\n+            }\n+\n+            externalAccountManager.synchroniseChangedUsers();\n+\n+            return Response.ok().build();\n+        } catch (NoUserLoggedInException e) {\n+            return SegueErrorResponse.getNotLoggedInResponse();\n+        } catch (ExternalAccountSynchronisationException e) {\n+            return new SegueErrorResponse(Status.INTERNAL_SERVER_ERROR,\n+                    \"Database error while attempting to synchronise users!\", e).toResponse();\n+        }\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "db06dc28d45ff7ca98f16416afbdf5d9158b32b6",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/api/Constants.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/Constants.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/Constants.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/api/Constants.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -187,6 +187,12 @@\n     public static final String EVENT_ADMIN_EMAIL = \"EVENT_ADMIN_EMAIL\";\n     public static final String EVENT_ICAL_UID_DOMAIN = \"EVENT_ICAL_UID_DOMAIN\";\n \n+    // MailJet Stuff:\n+    public static final String MAILJET_API_KEY = \"MAILJET_API_KEY\";\n+    public static final String MAILJET_API_SECRET = \"MAILJET_API_SECRET\";\n+    public static final String MAILJET_NEWS_LIST_ID = \"MAILJET_NEWS_LIST_ID\";\n+    public static final String MAILJET_EVENTS_LIST_ID = \"MAILJET_EVENTS_LIST_ID\";\n+\n     /**\n      * Suffix to append to raw fields (minus dot separator) - these are fields that the search engine should not do any\n      * processing on (e.g. no stemming)"
  },
  {
    "sha": "3c163c02219b276f4d8f5619deaa0a81063c6fcf",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountManager.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountManager.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountManager.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountManager.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2021 James Sharkey\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ * You may obtain a copy of the License at\n+ * \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.ac.cam.cl.dtg.segue.api.managers;\n+\n+import com.google.inject.Inject;\n+import com.mailjet.client.errors.MailjetClientCommunicationException;\n+import com.mailjet.client.errors.MailjetException;\n+import com.mailjet.client.errors.MailjetRateLimitException;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import uk.ac.cam.cl.dtg.segue.dao.SegueDatabaseException;\n+import uk.ac.cam.cl.dtg.segue.dao.users.IExternalAccountDataManager;\n+import uk.ac.cam.cl.dtg.segue.dos.users.EmailVerificationStatus;\n+import uk.ac.cam.cl.dtg.segue.dos.users.UserExternalAccountChanges;\n+import uk.ac.cam.cl.dtg.util.email.MailJetApiClientWrapper;\n+import uk.ac.cam.cl.dtg.util.email.MailJetSubscriptionAction;\n+\n+import java.util.List;\n+\n+public class ExternalAccountManager {\n+    private static final Logger log = LoggerFactory.getLogger(ExternalAccountManager.class);\n+\n+    private final IExternalAccountDataManager database;\n+    private final MailJetApiClientWrapper mailjetApi;\n+\n+    @Inject\n+    public ExternalAccountManager(final MailJetApiClientWrapper mailjetApi, final IExternalAccountDataManager database) {\n+        this.database = database;\n+        this.mailjetApi = mailjetApi;\n+    }\n+\n+    public void synchroniseChangedUsers() throws ExternalAccountSynchronisationException {\n+        try {\n+            List<UserExternalAccountChanges> userRecordsToUpdate = database.getRecentlyChangedRecords();\n+\n+            for (UserExternalAccountChanges userRecord : userRecordsToUpdate) {\n+\n+                Long userId = userRecord.getUserId();\n+                log.debug(String.format(\"Processing user: %s\", userId));\n+                try {\n+\n+                    String accountEmail = userRecord.getAccountEmail();\n+                    String mailjetId = userRecord.getProviderUserId();\n+                    JSONObject mailjetDetails;\n+\n+                    if (null != mailjetId) {\n+                        // If there is a \"mailjet_id\", get the account from MailJet.\n+                        mailjetDetails = mailjetApi.getAccountByIdOrEmail(mailjetId);\n+                        if (userRecord.isDeleted()) {\n+                            // Case: deleted from Isaac but still on MailJet:\n+                            //    Expect: \"deleted\" but non-null \"mailjet_id\"\n+                            //    Action: GDPR deletion, null out MailJet ID?, update provider_last_updated\n+                            log.debug(\"Case: deletion.\");\n+                            deleteUserFromMailJet(mailjetId, userRecord);\n+                        } else if (EmailVerificationStatus.DELIVERY_FAILED.equals(userRecord.getEmailVerificationStatus())) {\n+                            // Case: DELIVERY_FAILED but already on MailJet\n+                            //    Expect: DELIVERY_FAILED, but non-null \"mailjet_id\"\n+                            //    Action: same as deletion? Or just remove from lists for now?\n+                            log.debug(\"Case: delivery failed.\");\n+                            mailjetApi.updateUserSubscriptions(mailjetId, MailJetSubscriptionAction.REMOVE, MailJetSubscriptionAction.REMOVE);\n+                        } else if (!accountEmail.equals(mailjetDetails.getString(\"Email\"))) {\n+                            // Case: account email change:\n+                            //    Expect: non-null \"mailjet_id\", email in MailJet != email in database\n+                            //    Action: delete old email, add new user for new email\n+                            log.debug(\"Case: account email change.\");\n+                            mailjetApi.permanentlyDeleteAccountById(mailjetId);\n+                            mailjetId = mailjetApi.addNewUser(accountEmail);\n+                            updateUserOnMailJet(mailjetId, userRecord);\n+                        } else {\n+                            // Case: changed details/preferences:\n+                            //    Expect: not deleted, not DELIVERY_FAILED\n+                            //    Action: update details, update subscriptions, update provider_last_updated\n+                            log.debug(\"Case: generic preferences update.\");\n+                            updateUserOnMailJet(mailjetId, userRecord);\n+                        }\n+                    } else {\n+                        if (!EmailVerificationStatus.DELIVERY_FAILED.equals(userRecord.getEmailVerificationStatus())) {\n+                            // Case: new to Isaac, not on MailJet:\n+                            //    Expect: null \"mailjet_id\", not DELIVERY_FAILED\n+                            //    Action: create MailJet ID, update details, update subscriptions, update provider_last_updated\n+                            log.debug(\"Case: new to Isaac/not on MailJet\");\n+                            mailjetId = mailjetApi.addNewUser(accountEmail);\n+                            updateUserOnMailJet(mailjetId, userRecord);\n+                        } else {\n+                            // Not on MailJet, but invalid email so don't add to MailJet.\n+                            // Do we need this row?\n+                            log.debug(\"Case: invalid/incorrect user to skip.\");\n+                            database.updateExternalAccount(userId, null);\n+                        }\n+                    }\n+                    // Iff action done successfully, update the provider_last_updated time:\n+                    log.debug(\"Update provider_last_updated.\");\n+                    database.updateProviderLastUpdated(userId);\n+\n+                } catch (SegueDatabaseException e) {\n+                    log.error(String.format(\"Error storing record of MailJet update to user (%s)!\", userId));\n+                } catch (MailjetClientCommunicationException e) {\n+                    log.error(\"Failed to talk to MailJet!\");\n+                    throw new ExternalAccountSynchronisationException(\"Failed to successfully connect to MailJet!\");\n+                } catch (MailjetRateLimitException e) {\n+                    log.warn(\"MailJet rate limiting!\");\n+                    throw new ExternalAccountSynchronisationException(\"MailJet API rate limits exceeded!\");\n+                } catch (MailjetException e) {\n+                    log.error(e.getMessage());\n+                }\n+            }\n+        } catch (SegueDatabaseException e) {\n+            log.error(\"Database error whilst collecting users whose details have changed!\", e);\n+        }\n+    }\n+\n+    private void updateUserOnMailJet(final String mailjetId, final UserExternalAccountChanges userRecord) throws SegueDatabaseException, MailjetException {\n+        Long userId = userRecord.getUserId();\n+        mailjetApi.updateUserProperties(mailjetId, userRecord.getGivenName(), userRecord.getRole().toString(), userRecord.getEmailVerificationStatus().toString());\n+\n+        MailJetSubscriptionAction newsStatus = (userRecord.allowsNewsEmails() != null && userRecord.allowsNewsEmails()) ? MailJetSubscriptionAction.FORCE_SUBSCRIBE : MailJetSubscriptionAction.UNSUBSCRIBE;\n+        MailJetSubscriptionAction eventsStatus = (userRecord.allowsEventsEmails() != null && userRecord.allowsEventsEmails()) ? MailJetSubscriptionAction.FORCE_SUBSCRIBE : MailJetSubscriptionAction.UNSUBSCRIBE;\n+        mailjetApi.updateUserSubscriptions(mailjetId, newsStatus, eventsStatus);\n+\n+        database.updateExternalAccount(userId, mailjetId);\n+    }\n+\n+    private void deleteUserFromMailJet(final String mailjetId, final UserExternalAccountChanges userRecord) throws SegueDatabaseException, MailjetException {\n+        Long userId = userRecord.getUserId();\n+        mailjetApi.permanentlyDeleteAccountById(mailjetId);\n+        // Do we need to keep this row?\n+        database.updateExternalAccount(userId, null);\n+    }\n+}"
  },
  {
    "sha": "a6027246f8fb247bcc29c82f8be31c7c42cb5b27",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountSynchronisationException.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountSynchronisationException.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountSynchronisationException.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/api/managers/ExternalAccountSynchronisationException.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2021 James Sharkey\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ * You may obtain a copy of the License at\n+ * \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.ac.cam.cl.dtg.segue.api.managers;\n+\n+public class ExternalAccountSynchronisationException extends Exception {\n+    private static final long serialVersionUID = 503895514003323L;\n+\n+    /**\n+     *  General exception for exceptions when synchronising data with external providers.\n+     *\n+     * @param message\n+     *            - to explain the exception.\n+     */\n+    public ExternalAccountSynchronisationException(final String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "de06a16db6d030cd7ba25eac9a84a6f7b5cf6d54",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/configuration/SegueGuiceConfigurationModule.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/configuration/SegueGuiceConfigurationModule.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/configuration/SegueGuiceConfigurationModule.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/configuration/SegueGuiceConfigurationModule.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -35,6 +35,7 @@\n import org.slf4j.LoggerFactory;\n import uk.ac.cam.cl.dtg.isaac.api.managers.GameManager;\n import uk.ac.cam.cl.dtg.segue.api.Constants;\n+import uk.ac.cam.cl.dtg.segue.api.managers.ExternalAccountManager;\n import uk.ac.cam.cl.dtg.segue.api.managers.GroupManager;\n import uk.ac.cam.cl.dtg.segue.api.managers.IStatisticsManager;\n import uk.ac.cam.cl.dtg.segue.api.managers.ITransactionManager;\n@@ -130,6 +131,7 @@\n     private static IUserAlerts userAlerts = null;\n     private static IUserStreaksManager userStreaksManager = null;\n     private static IUserBadgePersistenceManager userBadgePersitenceManager = null;\n+    private static IExternalAccountDataManager externalAccountDataManager = null;\n \n     private static Collection<Class<? extends ServletContextListener>> contextListeners;\n     private static Map<String, Reflections> reflections = com.google.common.collect.Maps.newHashMap();\n@@ -903,6 +905,19 @@ private static SegueJobService getSegueJobService(final PostgresSqlDb database)\n         return segueJobService;\n     }\n \n+    /**\n+     */\n+    @Provides\n+    @Singleton\n+    @Inject\n+    private static IExternalAccountDataManager getExternalAccountDataManager(final PostgresSqlDb database) {\n+\n+        if (null == externalAccountDataManager) {\n+            externalAccountDataManager = new PgExternalAccountPersistenceManager(database);\n+        }\n+        return externalAccountDataManager;\n+    }\n+\n     /**\n      * This provides a new instance of the location resolver.\n      *"
  },
  {
    "sha": "f25744ea99fcc623b1d6f45d177f6781d66d8b65",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/IExternalAccountDataManager.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/IExternalAccountDataManager.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/IExternalAccountDataManager.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/IExternalAccountDataManager.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2021 James Sharkey\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ * You may obtain a copy of the License at\n+ * \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.ac.cam.cl.dtg.segue.dao.users;\n+\n+import uk.ac.cam.cl.dtg.segue.dao.SegueDatabaseException;\n+import uk.ac.cam.cl.dtg.segue.dos.users.UserExternalAccountChanges;\n+\n+import java.util.List;\n+\n+public interface IExternalAccountDataManager {\n+\n+    List<UserExternalAccountChanges> getRecentlyChangedRecords() throws SegueDatabaseException;\n+\n+    void updateProviderLastUpdated(final Long userId) throws SegueDatabaseException;\n+\n+    void updateExternalAccount(final Long userId, final String providerUserIdentifier) throws SegueDatabaseException;\n+}"
  },
  {
    "sha": "bee472b5e90a140df8aab57c73eeb91c5f51aa55",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/PgExternalAccountPersistenceManager.java",
    "status": "added",
    "additions": 115,
    "deletions": 0,
    "changes": 115,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/PgExternalAccountPersistenceManager.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/PgExternalAccountPersistenceManager.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/dao/users/PgExternalAccountPersistenceManager.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,115 @@\n+package uk.ac.cam.cl.dtg.segue.dao.users;\n+\n+import com.google.api.client.util.Lists;\n+import com.google.inject.Inject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import uk.ac.cam.cl.dtg.segue.dao.SegueDatabaseException;\n+import uk.ac.cam.cl.dtg.segue.database.PostgresSqlDb;\n+import uk.ac.cam.cl.dtg.segue.dos.users.EmailVerificationStatus;\n+import uk.ac.cam.cl.dtg.segue.dos.users.Role;\n+import uk.ac.cam.cl.dtg.segue.dos.users.UserExternalAccountChanges;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * This class is responsible for managing and persisting user data.\n+ */\n+public class PgExternalAccountPersistenceManager implements IExternalAccountDataManager {\n+    private static final Logger log = LoggerFactory.getLogger(PgExternalAccountPersistenceManager.class);\n+\n+    private final PostgresSqlDb database;\n+\n+    /**\n+     * Creates a new user data manager object.\n+     *\n+     * @param database - the database reference used for persistence.\n+     */\n+    @Inject\n+    public PgExternalAccountPersistenceManager(final PostgresSqlDb database) {\n+        this.database = database;\n+    }\n+\n+    @Override\n+    public List<UserExternalAccountChanges> getRecentlyChangedRecords() throws SegueDatabaseException {\n+        PreparedStatement pst;\n+        try (Connection conn = database.getDatabaseConnection()) {\n+            pst = conn.prepareStatement(\n+            \"SELECT id, provider_user_identifier, email, role, given_name, deleted, email_verification_status, \" +\n+                \"       news_prefs.preference_value AS news_emails, events_prefs.preference_value AS events_emails \" +\n+                \"FROM users \" +\n+                \"    LEFT OUTER JOIN user_preferences AS news_prefs ON users.id = news_prefs.user_id AND news_prefs.preference_type='EMAIL_PREFERENCE' AND news_prefs.preference_name='NEWS_AND_UPDATES' \" +\n+                \"    LEFT OUTER JOIN user_preferences AS events_prefs ON users.id = events_prefs.user_id AND events_prefs.preference_type='EMAIL_PREFERENCE' AND events_prefs.preference_name='EVENTS' \" +\n+                \"    LEFT OUTER JOIN external_accounts ON users.id=external_accounts.user_id AND provider_name='MailJet' \" +\n+                \"WHERE (users.last_updated >= provider_last_updated OR news_prefs.last_updated >= provider_last_updated \" +\n+                \"           OR events_prefs.last_updated >= provider_last_updated OR provider_last_updated IS NULL)\");\n+\n+            ResultSet results = pst.executeQuery();\n+\n+            List<UserExternalAccountChanges> listOfResults = Lists.newArrayList();\n+\n+            while (results.next()) {\n+                listOfResults.add(buildUserExternalAccountChanges(results));\n+            }\n+\n+            return listOfResults;\n+\n+        } catch (SQLException e) {\n+            throw new SegueDatabaseException(\"Postgres exception\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void updateProviderLastUpdated(final Long userId) throws SegueDatabaseException {\n+\n+        PreparedStatement pst;\n+        try (Connection conn = database.getDatabaseConnection()) {\n+            pst = conn.prepareStatement(\"UPDATE external_accounts SET provider_last_updated=? WHERE user_id=? AND provider_name='MailJet';\");\n+            pst.setTimestamp(1, new Timestamp(new Date().getTime()));\n+            pst.setLong(2, userId);\n+\n+            pst.executeUpdate();\n+        } catch (SQLException e) {\n+            throw new SegueDatabaseException(\"Postgres exception on update \", e);\n+        }\n+    }\n+\n+    @Override\n+    public void updateExternalAccount(final Long userId, final String providerUserIdentifier) throws SegueDatabaseException {\n+        PreparedStatement pst;\n+        try (Connection conn = database.getDatabaseConnection()) {\n+            // Upsert the value in, using Postgres 9.5 syntax 'ON CONFLICT DO UPDATE ...'\n+            pst = conn.prepareStatement(\"INSERT INTO external_accounts(user_id, provider_name, provider_user_identifier) \"\n+                    + \" VALUES (?, 'MailJet', ?)\"\n+                    + \" ON CONFLICT (user_id, provider_name) DO UPDATE\"\n+                    + \" SET provider_user_identifier=excluded.provider_user_identifier\");\n+            pst.setLong(1, userId);\n+            pst.setString(2, providerUserIdentifier);\n+\n+            pst.executeUpdate();\n+        } catch (SQLException e) {\n+            throw new SegueDatabaseException(\"Postgres exception on upsert \", e);\n+        }\n+    }\n+\n+    private UserExternalAccountChanges buildUserExternalAccountChanges(final ResultSet results) throws SQLException {\n+        return new UserExternalAccountChanges(\n+            results.getLong(\"id\"),\n+            results.getString(\"provider_user_identifier\"),\n+            results.getString(\"email\"),\n+            Role.valueOf(results.getString(\"role\")),\n+            results.getString(\"given_name\"),\n+            results.getBoolean(\"deleted\"),\n+            EmailVerificationStatus.valueOf(results.getString(\"email_verification_status\")),\n+            results.getBoolean(\"news_emails\"),\n+            results.getBoolean(\"events_emails\")\n+        );\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "963e980f92a8c52667e74923766eecb63dd15cbc",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/segue/dos/users/UserExternalAccountChanges.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/dos/users/UserExternalAccountChanges.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/segue/dos/users/UserExternalAccountChanges.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/segue/dos/users/UserExternalAccountChanges.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2021 James Sharkey\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ * You may obtain a copy of the License at\n+ * \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.ac.cam.cl.dtg.segue.dos.users;\n+\n+/**\n+ *  A class to represent the state of a user that needs synchronising with an external provider.\n+ */\n+public class UserExternalAccountChanges {\n+\n+    private Long userId;\n+    private String providerUserId;\n+    private String accountEmail;\n+    private Role role;\n+    private String givenName;\n+    private Boolean deleted;\n+    private EmailVerificationStatus emailVerificationStatus;\n+    private Boolean allowsNewsEmails;\n+    private Boolean allowsEventsEmails;\n+\n+    public UserExternalAccountChanges(Long userId, String providerUserId, String accountEmail, Role role,\n+                                      String givenName, Boolean deleted, EmailVerificationStatus emailVerificationStatus,\n+                                      Boolean allowsNewsEmails, Boolean allowsEventsEmails) {\n+        this.userId = userId;\n+        this.providerUserId = providerUserId;\n+        this.accountEmail = accountEmail;\n+        this.role = role;\n+        this.givenName = givenName;\n+        this.deleted = deleted;\n+        this.emailVerificationStatus = emailVerificationStatus;\n+        this.allowsNewsEmails = allowsNewsEmails;\n+        this.allowsEventsEmails = allowsEventsEmails;\n+    }\n+\n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public void setUserId(Long userId) {\n+        this.userId = userId;\n+    }\n+\n+    public String getProviderUserId() {\n+        return providerUserId;\n+    }\n+\n+    public void setProviderUserId(String providerUserId) {\n+        this.providerUserId = providerUserId;\n+    }\n+\n+    public String getAccountEmail() {\n+        return accountEmail;\n+    }\n+\n+    public void setAccountEmail(String accountEmail) {\n+        this.accountEmail = accountEmail;\n+    }\n+\n+    public Role getRole() {\n+        return role;\n+    }\n+\n+    public void setRole(Role role) {\n+        this.role = role;\n+    }\n+\n+    public String getGivenName() {\n+        return givenName;\n+    }\n+\n+    public void setGivenName(String givenName) {\n+        this.givenName = givenName;\n+    }\n+\n+    public Boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public void setDeleted(Boolean deleted) {\n+        this.deleted = deleted;\n+    }\n+\n+    public EmailVerificationStatus getEmailVerificationStatus() {\n+        return emailVerificationStatus;\n+    }\n+\n+    public void setEmailVerificationStatus(EmailVerificationStatus emailVerificationStatus) {\n+        this.emailVerificationStatus = emailVerificationStatus;\n+    }\n+\n+    public Boolean allowsNewsEmails() {\n+        return allowsNewsEmails;\n+    }\n+\n+    public void setAllowsNewsEmails(Boolean allowsNewsEmails) {\n+        this.allowsNewsEmails = allowsNewsEmails;\n+    }\n+\n+    public Boolean allowsEventsEmails() {\n+        return allowsEventsEmails;\n+    }\n+\n+    public void setAllowsEventsEmails(Boolean allowsEventsEmails) {\n+        this.allowsEventsEmails = allowsEventsEmails;\n+    }\n+\n+}"
  },
  {
    "sha": "65f7e2cc98786452073588b3d7300568615c8e0c",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetApiClientWrapper.java",
    "status": "added",
    "additions": 181,
    "deletions": 0,
    "changes": 181,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetApiClientWrapper.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetApiClientWrapper.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetApiClientWrapper.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2021 James Sharkey\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ * You may obtain a copy of the License at\n+ * \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.ac.cam.cl.dtg.util.email;\n+\n+import com.google.inject.Inject;\n+import com.mailjet.client.ClientOptions;\n+import com.mailjet.client.MailjetClient;\n+import com.mailjet.client.MailjetRequest;\n+import com.mailjet.client.MailjetResponse;\n+import com.mailjet.client.errors.MailjetClientRequestException;\n+import com.mailjet.client.errors.MailjetException;\n+import com.mailjet.client.resource.Contact;\n+import com.mailjet.client.resource.ContactManagecontactslists;\n+import com.mailjet.client.resource.Contactdata;\n+import com.mailjet.client.resource.Contacts;\n+import com.mailjet.client.resource.ContactslistImportList;\n+import org.apache.commons.lang3.Validate;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import uk.ac.cam.cl.dtg.util.PropertiesLoader;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static uk.ac.cam.cl.dtg.segue.api.Constants.*;\n+\n+public class MailJetApiClientWrapper {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MailJetApiClientWrapper.class);\n+    private final MailjetClient mailjetClient;\n+    private final String newsListId;\n+    private final String eventsListId;\n+\n+    /**\n+     *  Wrapper for MailjetClient class.\n+     * @param properties - needed to get the MailJet keys and list IDs\n+     */\n+    @Inject\n+    public MailJetApiClientWrapper(final PropertiesLoader properties) {\n+        ClientOptions options = ClientOptions.builder()\n+                .apiKey(properties.getProperty(MAILJET_API_KEY))\n+                .apiSecretKey(properties.getProperty(MAILJET_API_SECRET))\n+                .build();\n+\n+        this.mailjetClient = new MailjetClient(options);\n+        this.newsListId = properties.getProperty(MAILJET_NEWS_LIST_ID);\n+        this.eventsListId = properties.getProperty(MAILJET_EVENTS_LIST_ID);\n+    }\n+\n+    /**\n+     *  Get user details for an existing MailJet account\n+     *\n+     * @param mailjetIdOrEmail - email address or MailJet user ID\n+     * @return JSONObject of the MailJet user\n+     * @throws MailjetException  - if underlying MailjetClient throws an exception\n+     */\n+    public JSONObject getAccountByIdOrEmail(final String mailjetIdOrEmail) throws MailjetException {\n+        if (null == mailjetIdOrEmail) {\n+            return null;\n+        }\n+        MailjetRequest request = new MailjetRequest(Contact.resource, mailjetIdOrEmail);\n+        MailjetResponse response = mailjetClient.get(request);\n+        JSONArray responseData = response.getData();\n+        if (response.getTotal() == 1) {\n+            return responseData.getJSONObject(0);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     *  Perform an asynchronous GDPR-compliant deletion of a MailJet user.\n+     *\n+     * @param mailjetId - MailJet user ID\n+     * @throws MailjetException  - if underlying MailjetClient throws an exception\n+     */\n+    public void permanentlyDeleteAccountById(final String mailjetId) throws MailjetException {\n+        Validate.notNull(mailjetId);\n+        MailjetRequest request = new MailjetRequest(Contacts.resource, mailjetId);\n+        MailjetResponse response = mailjetClient.delete(request);\n+        int responseStatus = response.getStatus();\n+        if (!(responseStatus == Response.Status.OK.getStatusCode())) {\n+            // TODO: Do we want to get any of the data from this request?\n+            throw new MailjetException(\"Failed to delete user!\");\n+        }\n+    }\n+\n+    /**\n+     *  Add a new user to MailJet or find by email if they already exist as a fallback\n+     *\n+     * @param email - email address\n+     * @return the MailJet user ID\n+     * @throws MailjetException  - if underlying MailjetClient throws an exception\n+     */\n+    public String addNewUser(final String email) throws MailjetException {\n+        if (null == email) {\n+            return null;\n+        }\n+        try {\n+            MailjetRequest request = new MailjetRequest(Contact.resource).property(Contact.EMAIL, email);\n+            MailjetResponse response = mailjetClient.post(request);\n+            // Get MailJet ID out:\n+            JSONObject responseData = response.getData().getJSONObject(0);\n+            return Integer.toString(responseData.getInt(\"ID\"));\n+        } catch (MailjetClientRequestException e) {\n+            if (e.getMessage().contains(\"already exists\")) {\n+                // FIXME - we need to test that this response always comes back with \"already exists\" in the message\n+                log.warn(String.format(\"Attempted to create a user with email (%s) that already existed!\", email));\n+                JSONObject existingMailJetAccount = getAccountByIdOrEmail(email);\n+                return Integer.toString(existingMailJetAccount.getInt(\"ID\"));\n+            } else {\n+                log.error(String.format(\"Failed to create user in MailJet with email: %s\", email), e);\n+            }\n+        } catch (JSONException e) {\n+            log.error(String.format(\"Failed to create user in MailJet with email: %s\", email), e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     *  Update user details for an existing MailJet account\n+     *\n+     * @param mailjetId - MailJet user ID\n+     * @throws MailjetException  - if underlying MailjetClient throws an exception\n+     */\n+    public void updateUserProperties(final String mailjetId, final String firstName, final String role,\n+                                      final String email_verification_status) throws MailjetException {\n+        Validate.notNull(mailjetId);\n+        MailjetRequest request = new MailjetRequest(Contactdata.resource, mailjetId)\n+                .property(Contactdata.DATA, new JSONArray()\n+                        .put(new JSONObject().put(\"Name\", \"firstname\").put(\"value\", firstName))\n+                        .put(new JSONObject().put(\"Name\", \"role\").put(\"value\", role))\n+                        .put(new JSONObject().put(\"Name\", \"verification_status\").put(\"value\", email_verification_status))\n+                );\n+        MailjetResponse response = mailjetClient.put(request);\n+        if (response.getTotal() != 1) {\n+            // TODO: Do we want to get any of the data from this request?\n+            throw new MailjetException(\"Failed to update user!\" + response.getTotal());\n+        }\n+    }\n+\n+    /**\n+     *  Update user list subscriptions for an existing MailJet account\n+     *\n+     * @param mailjetId - MailJet user ID\n+     * @throws MailjetException  - if underlying MailjetClient throws an exception\n+     */\n+    public void updateUserSubscriptions(final String mailjetId, final MailJetSubscriptionAction newsEmails,\n+                                         final MailJetSubscriptionAction eventsEmails) throws MailjetException {\n+        Validate.notNull(mailjetId);\n+        MailjetRequest request = new MailjetRequest(ContactManagecontactslists.resource, mailjetId)\n+                .property(ContactManagecontactslists.CONTACTSLISTS, new JSONArray()\n+                        .put(new JSONObject()\n+                                .put(ContactslistImportList.LISTID, newsListId)\n+                                .put(ContactslistImportList.ACTION, newsEmails.value))\n+                        .put(new JSONObject()\n+                                .put(ContactslistImportList.LISTID, eventsListId)\n+                                .put(ContactslistImportList.ACTION, eventsEmails.value))\n+                );\n+        MailjetResponse response = mailjetClient.post(request);\n+        if (response.getTotal() != 1) {\n+            // TODO: Do we want to get any of the data from this request?\n+            throw new MailjetException(\"Failed to update user subscriptions!\" + response.getTotal());\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "d2a88b8c36ff7dcd3ae2939c21458abcd2a43ca3",
    "filename": "src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetSubscriptionAction.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetSubscriptionAction.java",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetSubscriptionAction.java",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/java/uk/ac/cam/cl/dtg/util/email/MailJetSubscriptionAction.java?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2021 James Sharkey\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ * You may obtain a copy of the License at\n+ * \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.ac.cam.cl.dtg.util.email;\n+\n+public enum MailJetSubscriptionAction {\n+    SOFT_SUBSCRIBE(\"addnoforce\"),\n+    FORCE_SUBSCRIBE(\"addforce\"),\n+    UNSUBSCRIBE(\"unsub\"),\n+    REMOVE(\"remove\");\n+\n+    public final String value;\n+\n+    /**\n+     *  Class to represent the different possible subscription actions supported by the MailJet API.\n+     * @param value string value needed by MailJet\n+     */\n+    MailJetSubscriptionAction(final String value) {\n+        this.value = value;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "595877876052a2dccf8e154815134d618fd1accb",
    "filename": "src/main/resources/db_scripts/create_external_accounts_table.sql",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/resources/db_scripts/create_external_accounts_table.sql",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/resources/db_scripts/create_external_accounts_table.sql",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/resources/db_scripts/create_external_accounts_table.sql?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -0,0 +1,13 @@\n+CREATE TABLE external_accounts (\n+   user_id INTEGER NOT NULL,\n+   provider_name TEXT NOT NULL,\n+   provider_user_identifier TEXT,\n+   provider_last_updated TIMESTAMP WITHOUT TIME ZONE,\n+   CONSTRAINT external_accounts_pk PRIMARY KEY (user_id, provider_name),\n+   CONSTRAINT external_accounts_fk FOREIGN KEY (user_id) REFERENCES public.users (id)\n+       ON UPDATE CASCADE ON DELETE CASCADE\n+);\n+\n+-- Add stub records to prevent synchronisation?\n+--     (With noise to prevent a single large spike should the time be reached).\n+-- INSERT INTO external_accounts SELECT id, 'MailJet', NULL, NOW() + INTERVAL '100 DAYS' + (random() * INTERVAL '100 days') FROM users;"
  },
  {
    "sha": "2347162b371d02f8497711f0fe34fd51fae52eda",
    "filename": "src/main/resources/db_scripts/postgres-rutherford-create-script.sql",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/isaacphysics/isaac-api/blob/5be81f4012d626d411d355bfa53255c68b050291/src/main/resources/db_scripts/postgres-rutherford-create-script.sql",
    "raw_url": "https://github.com/isaacphysics/isaac-api/raw/5be81f4012d626d411d355bfa53255c68b050291/src/main/resources/db_scripts/postgres-rutherford-create-script.sql",
    "contents_url": "https://api.github.com/repos/isaacphysics/isaac-api/contents/src/main/resources/db_scripts/postgres-rutherford-create-script.sql?ref=5be81f4012d626d411d355bfa53255c68b050291",
    "patch": "@@ -109,6 +109,20 @@ ALTER TABLE public.event_bookings_id_seq OWNER TO rutherford;\n ALTER SEQUENCE public.event_bookings_id_seq OWNED BY public.event_bookings.id;\n \n \n+--\n+-- Name: external_accounts; Type: TABLE; Schema: public; Owner: rutherford\n+--\n+\n+CREATE TABLE public.external_accounts (\n+    user_id integer NOT NULL,\n+    provider_name text NOT NULL,\n+    provider_user_identifier text,\n+    provider_last_updated timestamp without time zone\n+);\n+\n+\n+ALTER TABLE public.external_accounts OWNER TO rutherford;\n+\n --\n -- Name: gameboards; Type: TABLE; Schema: public; Owner: rutherford\n --\n@@ -823,6 +837,14 @@ ALTER TABLE ONLY public.event_bookings\n     ADD CONSTRAINT \"eventbooking id pkey\" PRIMARY KEY (id);\n \n \n+--\n+-- Name: external_accounts external_accounts_pk; Type: CONSTRAINT; Schema: public; Owner: rutherford\n+--\n+\n+ALTER TABLE ONLY public.external_accounts\n+    ADD CONSTRAINT external_accounts_pk PRIMARY KEY (user_id, provider_name);\n+\n+\n --\n -- Name: gameboards gameboard-id-pkey; Type: CONSTRAINT; Schema: public; Owner: rutherford\n --\n@@ -1230,6 +1252,14 @@ ALTER TABLE ONLY public.event_bookings\n     ADD CONSTRAINT event_bookings_users_id_fk FOREIGN KEY (reserved_by) REFERENCES public.users(id) ON DELETE CASCADE;\n \n \n+--\n+-- Name: external_accounts external_accounts_fk; Type: FK CONSTRAINT; Schema: public; Owner: rutherford\n+--\n+\n+ALTER TABLE ONLY public.external_accounts\n+    ADD CONSTRAINT external_accounts_fk FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE;\n+\n+\n --\n -- Name: group_additional_managers fk_group_id; Type: FK CONSTRAINT; Schema: public; Owner: rutherford\n --"
  }
]
