[
  {
    "sha": "90b7b02e695fdb423877dbd83ae3a9677ff9632d",
    "filename": "component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/MalwareDetectionConnector.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Meeds-io/social/blob/6879295a64c2086e7661e02229c213e1a9eece3a/component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/MalwareDetectionConnector.java",
    "raw_url": "https://github.com/Meeds-io/social/raw/6879295a64c2086e7661e02229c213e1a9eece3a/component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/MalwareDetectionConnector.java",
    "contents_url": "https://api.github.com/repos/Meeds-io/social/contents/component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/MalwareDetectionConnector.java?ref=6879295a64c2086e7661e02229c213e1a9eece3a",
    "patch": "@@ -19,6 +19,7 @@\n   \n   private String type;\n   private boolean isDefault = false;\n+  protected static final String MALWARE_DETECTION_FEATURE = \"MalwareDetection\";\n   \n   /**\n    * Initializes a malware detection connector. The constructor is default that connectors must implement."
  },
  {
    "sha": "eb8ee1392bc3ed8f3266a57928840507dcf0ab19",
    "filename": "component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/TrendMicroMalwareDetectionConnector.java",
    "status": "added",
    "additions": 193,
    "deletions": 0,
    "changes": 193,
    "blob_url": "https://github.com/Meeds-io/social/blob/6879295a64c2086e7661e02229c213e1a9eece3a/component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/TrendMicroMalwareDetectionConnector.java",
    "raw_url": "https://github.com/Meeds-io/social/raw/6879295a64c2086e7661e02229c213e1a9eece3a/component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/TrendMicroMalwareDetectionConnector.java",
    "contents_url": "https://api.github.com/repos/Meeds-io/social/contents/component/service/src/main/java/org/exoplatform/social/service/malwareDetection/connector/TrendMicroMalwareDetectionConnector.java?ref=6879295a64c2086e7661e02229c213e1a9eece3a",
    "patch": "@@ -0,0 +1,193 @@\n+package org.exoplatform.social.service.malwareDetection.connector;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import org.exoplatform.container.xml.InitParams;\n+import org.exoplatform.services.log.ExoLogger;\n+import org.exoplatform.services.log.Log;\n+\n+public class TrendMicroMalwareDetectionConnector extends MalwareDetectionConnector {\n+  \n+  private static final Log LOGGER = ExoLogger.getExoLogger(TrendMicroMalwareDetectionConnector.class);\n+  private static final String TRENDMICRO_HOST_PROPERTY = \"exo.malwareDetection.connector.trendMicro.api.host\";\n+  private static final String TRENDMICRO_USERNAME_PROPERTY = \"exo.malwareDetection.connector.trendMicro.api.userName\";\n+  private static final String TRENDMICRO_PASSWORD_PROPERTY = \"exo.malwareDetection.connector.trendMicro.api.password\";\n+  private static final String TRENDMICRO_LIST_EVENTS_PERIOD_PROPERTY = \"exo.malwareDetection.connector.trendMicro.api.listEvents.period\";\n+  private static final String TRENDMICRO_LOGIN_ENDPOINT = \"/rest/authentication/login\";\n+  private static final String TRENDMICRO_LOGIN_OPERATION = \"trendmicroLogin\";\n+  private static final String TRENDMICRO_LIST_EVENTS_ENDPOINT = \"/rest/events/antimalware\";\n+  private static final String TRENDMICRO_LIST_EVENTS_OPERATION = \"trendmicroListEvents\";\n+  private static final String TRENDMICRO_SID_QUERY_PARAM = \"?sID=\";\n+  private static final String TRENDMICRO_EVENT_TIME_OP_QUERY_PARAM = \"&eventTimeOp=\";\n+  private static final String TRENDMICRO_EVENT_TIME_OP_GE = \"ge\";\n+  private static final String TRENDMICRO_EVENT_TIME_QUERY_PARAM = \"&eventTime=\";\n+  private static final String TRENDMICRO_ANTI_MALWARE_EVENT_LISTING = \"antiMalwareEventListing\";\n+  private static final String TRENDMICRO_EVENTS = \"events\";\n+  private static final String TRENDMICRO_INFECTED_FILE_PATH = \"infectedFilePath\";\n+  private static final String TRENDMICRO_INFECTED_FILE_PATH_SEPARATOR = \"(\";\n+  private static final String TRENDMICRO_LOGOUT_ENDPOINT = \"/rest/authentication/logout\";\n+  private static final String TRENDMICRO_LOGOUT_OPERATION = \"trendmicroLogout\";\n+\n+  public TrendMicroMalwareDetectionConnector(InitParams initParams) {\n+    super(initParams);\n+  }\n+  \n+  @Override\n+  public List<String> getInfectedItemsPaths() {\n+    // Trendmicro login\n+    String sid = login();\n+    List<String> infectedItemsPaths = new ArrayList<String>();\n+    if(sid != null) {\n+      // Trendmicro list events\n+      String eventsListResponse = getEventsList(sid);\n+      try {\n+        JSONObject eventsListJson = new JSONObject(eventsListResponse);\n+        if (eventsListJson.has(TRENDMICRO_ANTI_MALWARE_EVENT_LISTING)) {\n+          JSONObject antiMalwareEventListingJson = eventsListJson.getJSONObject(TRENDMICRO_ANTI_MALWARE_EVENT_LISTING);\n+          if (antiMalwareEventListingJson.has(TRENDMICRO_EVENTS)) {\n+            JSONArray eventsJsonArray = antiMalwareEventListingJson.getJSONArray(TRENDMICRO_EVENTS);\n+            for (int i = 0; i < eventsJsonArray.length(); i++) {\n+              JSONObject eventJson = eventsJsonArray.getJSONObject(i);\n+              if (eventJson.has(TRENDMICRO_INFECTED_FILE_PATH)) {\n+                String infectedFilePath = eventJson.getString(TRENDMICRO_INFECTED_FILE_PATH);\n+                infectedItemsPaths.add(StringUtils.substringBeforeLast(infectedFilePath, TRENDMICRO_INFECTED_FILE_PATH_SEPARATOR));\n+              }\n+            }\n+          }\n+        }\n+      } catch (JSONException e) {\n+        LOGGER.error(\"Error when trying to build Json object from eventsList={}\", eventsListResponse, e);\n+      }\n+      // Trendmicro logout\n+      logout(sid);\n+    }\n+    return infectedItemsPaths;\n+  }\n+  \n+  private String login() {\n+    String trendmicroHost = System.getProperty(TRENDMICRO_HOST_PROPERTY);\n+    String trendmicroUserName = System.getProperty(TRENDMICRO_USERNAME_PROPERTY);\n+    String trendmicroPassword = System.getProperty(TRENDMICRO_PASSWORD_PROPERTY);\n+    String trendmicroLoginEndpoint = TRENDMICRO_LOGIN_ENDPOINT;\n+    if (trendmicroHost != null && trendmicroUserName != null &&  trendmicroPassword != null) {\n+      try {\n+        URL trendmicroLoginUrl = new URL(trendmicroHost + trendmicroLoginEndpoint);\n+        long startTime = System.currentTimeMillis();\n+        HttpURLConnection trendmicroLoginUrlConnection = (HttpURLConnection) trendmicroLoginUrl.openConnection();\n+        // add request header\n+        trendmicroLoginUrlConnection.setDoOutput(true);\n+        trendmicroLoginUrlConnection.setRequestMethod(\"POST\");\n+        trendmicroLoginUrlConnection.setRequestProperty(\"Content-Type\", MediaType.APPLICATION_JSON);\n+        String dsCredentials = \"{\\\"dsCredentials\\\": {\\\"userName\\\": \\\"\" + trendmicroUserName + \"\\\", \\\"password\\\": \\\"\" +trendmicroPassword + \"\\\"}}\";\n+        OutputStream trendmicroLoginUrlConnectionOut = trendmicroLoginUrlConnection.getOutputStream();\n+        trendmicroLoginUrlConnectionOut.write(dsCredentials.getBytes((\"UTF-8\")));\n+        if (trendmicroLoginUrlConnection.getResponseCode() == HttpURLConnection.HTTP_OK) { //success\n+          try(BufferedReader br = new BufferedReader(new InputStreamReader(trendmicroLoginUrlConnection.getInputStream(), \"utf-8\"))) {\n+            StringBuilder response = new StringBuilder();\n+            String responseLine = null;\n+            while ((responseLine = br.readLine()) != null) {\n+              response.append(responseLine.trim());\n+            }\n+            long endTime = System.currentTimeMillis();\n+            LOGGER.info(\"service={} operation={} parameters=\\\"host:{}\\\" \\\"userName:{}\\\" status=ok \" + \"duration_ms={}\",\n+                        MALWARE_DETECTION_FEATURE,\n+                        TRENDMICRO_LOGIN_OPERATION,\n+                        trendmicroHost,\n+                        trendmicroUserName,\n+                        endTime - startTime);\n+            return response.toString();\n+          }\n+        } \n+      } catch (Exception e) {\n+        LOGGER.error(\"Error when trying to login trendMicro with host={} and userName={}\", trendmicroHost, trendmicroUserName, e);\n+      }\n+    }\n+    return null;\n+  }\n+  \n+  private String getEventsList(String sid) {\n+    String trendmicroHost = System.getProperty(TRENDMICRO_HOST_PROPERTY);\n+    String trendmicroListEventsEndpoint = TRENDMICRO_LIST_EVENTS_ENDPOINT;\n+    if (trendmicroHost != null) {\n+      try {\n+        StringBuilder trendmicroListEventsUrlSb = new StringBuilder(trendmicroHost);\n+        trendmicroListEventsUrlSb.append(trendmicroListEventsEndpoint);\n+        trendmicroListEventsUrlSb.append(TRENDMICRO_SID_QUERY_PARAM + sid);\n+        if (System.getProperty(TRENDMICRO_LIST_EVENTS_PERIOD_PROPERTY) != null) {\n+          trendmicroListEventsUrlSb.append(TRENDMICRO_EVENT_TIME_OP_QUERY_PARAM + TRENDMICRO_EVENT_TIME_OP_GE);\n+          long trendmicroListEventsPeriod = Long.parseLong(System.getProperty(TRENDMICRO_LIST_EVENTS_PERIOD_PROPERTY));\n+          Date now = new Date();\n+          long trendmicroListEventsTime = now.getTime() - trendmicroListEventsPeriod;\n+          trendmicroListEventsUrlSb.append(TRENDMICRO_EVENT_TIME_QUERY_PARAM + trendmicroListEventsTime);\n+        }\n+        URL trendmicroListEventsUrl = new URL(trendmicroListEventsUrlSb.toString());\n+        long startTime = System.currentTimeMillis();\n+        HttpURLConnection trendmicroListEventsUrlConnection = (HttpURLConnection) trendmicroListEventsUrl.openConnection();\n+        // add request header\n+        trendmicroListEventsUrlConnection.setRequestMethod(\"GET\");\n+        if (trendmicroListEventsUrlConnection.getResponseCode() == HttpURLConnection.HTTP_OK) { //success\n+          try(BufferedReader br = new BufferedReader(new InputStreamReader(trendmicroListEventsUrlConnection.getInputStream(), \"utf-8\"))) {\n+             StringBuilder response = new StringBuilder();\n+             String responseLine = null;\n+             while ((responseLine = br.readLine()) != null) {\n+               response.append(responseLine.trim());\n+             }\n+             long endTime = System.currentTimeMillis();\n+             LOGGER.info(\"service={} operation={} parameters=\\\"host:{}\\\" \\\"sID:{}\\\" status=ok \" + \"duration_ms={}\",\n+                         MALWARE_DETECTION_FEATURE,\n+                         TRENDMICRO_LIST_EVENTS_OPERATION,\n+                         trendmicroHost,\n+                         sid,\n+                         endTime - startTime);\n+             return response.toString();\n+           }\n+        }\n+      } catch (Exception e) {\n+        LOGGER.error(\"Error when trying to get trendmicro events list with host={} and sID={}\", trendmicroHost, sid, e);\n+      }\n+    }\n+    return null;\n+  }\n+  \n+  private void logout(String sid) {\n+    String trendmicroHost = System.getProperty(TRENDMICRO_HOST_PROPERTY);\n+    String trendmicroLogoutEndpoint = TRENDMICRO_LOGOUT_ENDPOINT;\n+    if (trendmicroHost != null) {\n+      try {\n+        StringBuilder trendmicroLogoutUrlSb = new StringBuilder(trendmicroHost);\n+        trendmicroLogoutUrlSb.append(trendmicroLogoutEndpoint);\n+        trendmicroLogoutUrlSb.append(TRENDMICRO_SID_QUERY_PARAM + sid);\n+        URL trendmicroLogoutUrl = new URL(trendmicroLogoutUrlSb.toString());\n+        long startTime = System.currentTimeMillis();\n+        HttpURLConnection trendmicroLogoutUrlConnection = (HttpURLConnection) trendmicroLogoutUrl.openConnection();\n+        // add request header\n+        trendmicroLogoutUrlConnection.setRequestMethod(\"DELETE\");\n+        if (trendmicroLogoutUrlConnection.getResponseCode() == HttpURLConnection.HTTP_OK) { //success\n+          long endTime = System.currentTimeMillis();\n+          LOGGER.info(\"service={} operation={} parameters=\\\"host:{}\\\" \\\"sID:{}\\\" status=ok \" + \"duration_ms={}\",\n+                      MALWARE_DETECTION_FEATURE,\n+                      TRENDMICRO_LOGOUT_OPERATION,\n+                      trendmicroHost,\n+                      sid,\n+                      endTime - startTime);\n+        }\n+      } catch (Exception e) {\n+        LOGGER.error(\"Error when trying to logout trendMicro with host={} and sID={}\", trendmicroHost, sid, e);\n+      }\n+    }\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "364aef7cc7bf38792f16f8250df88bd023870e39",
    "filename": "extension/war/src/main/webapp/WEB-INF/conf/social-extension/social/service-configuration.xml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Meeds-io/social/blob/6879295a64c2086e7661e02229c213e1a9eece3a/extension/war/src/main/webapp/WEB-INF/conf/social-extension/social/service-configuration.xml",
    "raw_url": "https://github.com/Meeds-io/social/raw/6879295a64c2086e7661e02229c213e1a9eece3a/extension/war/src/main/webapp/WEB-INF/conf/social-extension/social/service-configuration.xml",
    "contents_url": "https://api.github.com/repos/Meeds-io/social/contents/extension/war/src/main/webapp/WEB-INF/conf/social-extension/social/service-configuration.xml?ref=6879295a64c2086e7661e02229c213e1a9eece3a",
    "patch": "@@ -177,5 +177,19 @@\n         </properties-param>\n       </init-params>\n     </component-plugin>\n+    <!-- TrendMicro Malware Detection Connector -->\n+    <component-plugin>\n+      <name>TrendMicroMalwareDetectionConnector</name>\n+      <set-method>addMalwareDetectionConnector</set-method>\n+      <type>org.exoplatform.social.service.malwareDetection.connector.TrendMicroMalwareDetectionConnector</type>\n+      <description>TrendMicro Malware Detection Connector</description>\n+      <init-params>\n+        <properties-param>\n+          <name>constructor.params</name>\n+          <property name=\"isDefault\" value=\"${exo.malwareDetection.connector.trendMicro.isDefault:false}\"/>\n+          <property name=\"type\" value=\"trendMicro\"/>\n+        </properties-param>\n+      </init-params>\n+    </component-plugin>\n   </external-component-plugins>\n </configuration>"
  }
]
