[
  {
    "sha": "9aed5fa1a9b4a8782ddaca722b16be01fe3efbda",
    "filename": "class_diagram.uml",
    "status": "modified",
    "additions": 121,
    "deletions": 455,
    "changes": 576,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/class_diagram.uml",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/class_diagram.uml",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/class_diagram.uml?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -3,510 +3,176 @@\n   <ID>JAVA</ID>\n   <OriginalElement>testsmell</OriginalElement>\n   <nodes>\n-    <node x=\"6492.0\" y=\"788.0\">testsmell.smell.ExceptionCatchingThrowing</node>\n-    <node x=\"7806.0\" y=\"788.0\">testsmell.smell.ConstructorInitialization</node>\n-    <node x=\"6054.0\" y=\"788.0\">testsmell.smell.MagicNumberTest</node>\n-    <node x=\"0.0\" y=\"1332.0\">testsmell.Util</node>\n-    <node x=\"3942.0\" y=\"788.0\">testsmell.smell.AssertionRoulette</node>\n-    <node x=\"1314.0\" y=\"788.0\">testsmell.smell.EmptyTest</node>\n-    <node x=\"0.0\" y=\"788.0\">testsmell.smell.UnknownTest</node>\n-    <node x=\"4408.29428794992\" y=\"368.5\">testsmell.AbstractSmell</node>\n-    <node x=\"2190.0\" y=\"788.0\">testsmell.smell.DuplicateAssert</node>\n-    <node x=\"438.0\" y=\"788.0\">testsmell.smell.ResourceOptimism</node>\n-    <node x=\"876.0\" y=\"788.0\">testsmell.smell.EagerTest</node>\n-    <node x=\"3504.0\" y=\"788.0\">testsmell.smell.PrintStatement</node>\n-    <node x=\"1752.0\" y=\"788.0\">testsmell.smell.SensitiveEquality</node>\n-    <node x=\"4740.0\" y=\"788.0\">testsmell.smell.DefaultTest</node>\n-    <node x=\"4575.265234741785\" y=\"1168.0\">testsmell.TestSmellDetector</node>\n-    <node x=\"5616.0\" y=\"788.0\">testsmell.smell.MysteryGuest</node>\n-    <node x=\"8973.265946791866\" y=\"346.0\">testsmell.TestMethod</node>\n-    <node x=\"4899.666666666666\" y=\"0.0\">testsmell.SmellyElement</node>\n-    <node x=\"8244.0\" y=\"788.0\">testsmell.smell.RedundantAssertion</node>\n-    <node x=\"3066.0\" y=\"788.0\">testsmell.smell.IgnoredTest</node>\n-    <node x=\"5178.0\" y=\"788.0\">testsmell.smell.VerboseTest</node>\n-    <node x=\"8682.0\" y=\"788.0\">testsmell.smell.LazyTest</node>\n-    <node x=\"2628.0\" y=\"788.0\">testsmell.smell.SleepyTest</node>\n-    <node x=\"374.0\" y=\"1332.0\">testsmell.ResultsWriter</node>\n-    <node x=\"4380.0\" y=\"689.0\">testsmell.TestFile</node>\n-    <node x=\"7368.0\" y=\"788.0\">testsmell.smell.GeneralFixture</node>\n-    <node x=\"1591.2556181533687\" y=\"346.0\">testsmell.TestClass</node>\n-    <node x=\"9120.0\" y=\"788.0\">testsmell.smell.DependentTest</node>\n-    <node x=\"6930.0\" y=\"788.0\">testsmell.smell.ConditionalTestLogic</node>\n+    <node x=\"0.0\" y=\"266.0\">testsmell.smell.ExceptionCatchingThrowing</node>\n+    <node x=\"8298.0\" y=\"266.0\">testsmell.smell.ConstructorInitialization</node>\n+    <node x=\"2766.0\" y=\"266.0\">testsmell.smell.MagicNumberTest</node>\n+    <node x=\"1295.0\" y=\"472.0\">testsmell.Util</node>\n+    <node x=\"5071.0\" y=\"254.0\">testsmell.smell.AssertionRoulette</node>\n+    <node x=\"9220.0\" y=\"266.0\">testsmell.smell.EmptyTest</node>\n+    <node x=\"8759.0\" y=\"266.0\">testsmell.smell.UnknownTest</node>\n+    <node x=\"4610.0\" y=\"0.0\">testsmell.AbstractSmell</node>\n+    <node x=\"7837.0\" y=\"266.0\">testsmell.smell.DuplicateAssert</node>\n+    <node x=\"1383.0\" y=\"266.0\">testsmell.smell.ResourceOptimism</node>\n+    <node x=\"3688.0\" y=\"254.0\">testsmell.smell.EagerTest</node>\n+    <node x=\"5993.0\" y=\"266.0\">testsmell.smell.PrintStatement</node>\n+    <node x=\"4149.0\" y=\"266.0\">testsmell.smell.SensitiveEquality</node>\n+    <node x=\"1844.0\" y=\"266.0\">testsmell.smell.DefaultTest</node>\n+    <node x=\"937.0\" y=\"472.0\">testsmell.TestSmellDetector</node>\n+    <node x=\"6915.0\" y=\"266.0\">testsmell.smell.MysteryGuest</node>\n+    <node x=\"390.0\" y=\"622.0\">testsmell.TestMethod</node>\n+    <node x=\"528.5\" y=\"472.0\">testsmell.SmellyElement</node>\n+    <node x=\"6454.0\" y=\"266.0\">testsmell.smell.RedundantAssertion</node>\n+    <node x=\"7376.0\" y=\"266.0\">testsmell.smell.IgnoredTest</node>\n+    <node x=\"4610.0\" y=\"266.0\">testsmell.smell.VerboseTest</node>\n+    <node x=\"5532.0\" y=\"266.0\">testsmell.smell.SleepyTest</node>\n+    <node x=\"3227.0\" y=\"266.0\">testsmell.smell.LazyTest</node>\n+    <node x=\"1684.0\" y=\"472.0\">testsmell.ResultsWriter</node>\n+    <node x=\"0.0\" y=\"472.0\">testsmell.TestFile</node>\n+    <node x=\"461.0\" y=\"266.0\">testsmell.smell.GeneralFixture</node>\n+    <node x=\"651.0\" y=\"622.0\">testsmell.TestClass</node>\n+    <node x=\"922.0\" y=\"266.0\">testsmell.smell.DependentTest</node>\n+    <node x=\"2305.0\" y=\"266.0\">testsmell.smell.ConditionalTestLogic</node>\n   </nodes>\n   <notes />\n   <edges>\n-    <edge source=\"testsmell.smell.GeneralFixture\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"7577.0\" y=\"669.0\" />\n-      <point x=\"7641.166666666667\" y=\"669.0\" />\n-      <point x=\"7641.166666666667\" y=\"216.0\" />\n-      <point x=\"5073.700000000001\" y=\"216.0\" />\n-      <point x=\"60.53333333333376\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.LazyTest\" target=\"testsmell.TestMethod\">\n-      <point x=\"83.60000000000002\" y=\"-70.5\" />\n-      <point x=\"8974.6\" y=\"669.0\" />\n-      <point x=\"9012.765946791866\" y=\"669.0\" />\n-      <point x=\"-79.0\" y=\"81.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.MagicNumberTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"6402.333333333333\" y=\"669.0\" />\n-      <point x=\"6387.509616588417\" y=\"669.0\" />\n-      <point x=\"6387.509616588417\" y=\"266.0\" />\n-      <point x=\"5048.477777777778\" y=\"266.0\" />\n-      <point x=\"35.31111111111113\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.MysteryGuest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"5964.333333333333\" y=\"669.0\" />\n-      <point x=\"5949.509616588417\" y=\"669.0\" />\n-      <point x=\"5949.509616588417\" y=\"286.0\" />\n-      <point x=\"5038.388888888889\" y=\"286.0\" />\n-      <point x=\"25.222222222221717\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.VerboseTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"139.33333333333394\" y=\"-70.5\" />\n-      <point x=\"5526.333333333334\" y=\"669.0\" />\n-      <point x=\"5511.509616588417\" y=\"669.0\" />\n-      <point x=\"5511.509616588417\" y=\"306.0\" />\n-      <point x=\"5028.299999999999\" y=\"306.0\" />\n-      <point x=\"15.133333333333212\" y=\"48.0\" />\n-    </edge>\n     <edge source=\"testsmell.smell.ConstructorInitialization\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"7875.666666666667\" y=\"569.0\" />\n-      <point x=\"4767.77428794992\" y=\"569.0\" />\n-      <point x=\"150.48000000000047\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.ResourceOptimism\">\n-      <point x=\"-132.125\" y=\"-59.5\" />\n-      <point x=\"4594.140234741785\" y=\"1138.0\" />\n-      <point x=\"647.0\" y=\"1138.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.DependentTest\" target=\"testsmell.TestMethod\">\n-      <point x=\"-52.25\" y=\"-70.5\" />\n-      <point x=\"9276.75\" y=\"529.0\" />\n-      <point x=\"9170.765946791866\" y=\"529.0\" />\n-      <point x=\"79.0\" y=\"81.5\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"8518.5\" y=\"164.0\" />\n+      <point x=\"4998.5\" y=\"164.0\" />\n+      <point x=\"168.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.DuplicateAssert\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"2538.3333333333335\" y=\"619.0\" />\n-      <point x=\"4500.25428794992\" y=\"619.0\" />\n-      <point x=\"-117.03999999999996\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.EagerTest\">\n-      <point x=\"-119.54166666666697\" y=\"-59.5\" />\n-      <point x=\"4606.723568075118\" y=\"1128.0\" />\n-      <point x=\"1085.0\" y=\"1128.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"8057.5\" y=\"174.0\" />\n+      <point x=\"4977.5\" y=\"174.0\" />\n+      <point x=\"147.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.EmptyTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"1662.333333333333\" y=\"599.0\" />\n-      <point x=\"4466.81428794992\" y=\"599.0\" />\n-      <point x=\"-150.47999999999956\" y=\"59.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"9440.5\" y=\"144.0\" />\n+      <point x=\"5040.5\" y=\"144.0\" />\n+      <point x=\"210.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.SleepyTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"2976.3333333333335\" y=\"629.0\" />\n-      <point x=\"4516.97428794992\" y=\"629.0\" />\n-      <point x=\"-100.31999999999971\" y=\"59.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"5752.5\" y=\"224.0\" />\n+      <point x=\"4872.5\" y=\"224.0\" />\n+      <point x=\"42.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.AssertionRoulette\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333394\" y=\"-70.5\" />\n-      <point x=\"4290.333333333334\" y=\"659.0\" />\n-      <point x=\"4567.13428794992\" y=\"659.0\" />\n-      <point x=\"-50.159999999999854\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.DuplicateAssert\">\n-      <point x=\"-81.79166666666697\" y=\"-59.5\" />\n-      <point x=\"4644.473568075118\" y=\"1098.0\" />\n-      <point x=\"2399.0\" y=\"1098.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-86.5\" />\n+      <point x=\"5291.5\" y=\"234.0\" />\n+      <point x=\"4851.5\" y=\"234.0\" />\n+      <point x=\"21.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.IgnoredTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"3414.3333333333335\" y=\"639.0\" />\n-      <point x=\"4533.694287949919\" y=\"639.0\" />\n-      <point x=\"-83.60000000000036\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.ResourceOptimism\" target=\"testsmell.SmellyElement\">\n-      <point x=\"-139.33333333333394\" y=\"-70.5\" />\n-      <point x=\"507.66666666666606\" y=\"559.0\" />\n-      <point x=\"524.7556181533682\" y=\"559.0\" />\n-      <point x=\"524.7556181533682\" y=\"136.0\" />\n-      <point x=\"4912.277777777777\" y=\"136.0\" />\n-      <point x=\"-100.88888888888869\" y=\"48.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"7596.5\" y=\"184.0\" />\n+      <point x=\"4956.5\" y=\"184.0\" />\n+      <point x=\"126.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.TestClass\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-81.5\" />\n-      <point x=\"1709.7556181533687\" y=\"196.0\" />\n-      <point x=\"4942.544444444444\" y=\"196.0\" />\n-      <point x=\"-70.62222222222226\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.RedundantAssertion\" target=\"testsmell.SmellyElement\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"8592.333333333332\" y=\"669.0\" />\n-      <point x=\"8577.509616588417\" y=\"669.0\" />\n-      <point x=\"8577.509616588417\" y=\"166.0\" />\n-      <point x=\"5098.9222222222215\" y=\"166.0\" />\n-      <point x=\"85.75555555555547\" y=\"48.0\" />\n+      <point x=\"0.0\" y=\"-86.5\" />\n+      <point x=\"771.5\" y=\"597.0\" />\n+      <point x=\"697.25\" y=\"597.0\" />\n+      <point x=\"56.25\" y=\"50.0\" />\n     </edge>\n     <edge source=\"testsmell.TestMethod\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-81.5\" />\n-      <point x=\"9091.765946791866\" y=\"136.0\" />\n-      <point x=\"5114.055555555555\" y=\"136.0\" />\n-      <point x=\"100.88888888888869\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.EagerTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"-139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"945.666666666667\" y=\"559.0\" />\n-      <point x=\"962.7556181533687\" y=\"559.0\" />\n-      <point x=\"962.7556181533687\" y=\"156.0\" />\n-      <point x=\"4922.366666666667\" y=\"156.0\" />\n-      <point x=\"-90.80000000000018\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.ConditionalTestLogic\" target=\"testsmell.SmellyElement\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"7278.333333333333\" y=\"669.0\" />\n-      <point x=\"7263.509616588417\" y=\"669.0\" />\n-      <point x=\"7263.509616588417\" y=\"226.0\" />\n-      <point x=\"5068.655555555555\" y=\"226.0\" />\n-      <point x=\"55.48888888888905\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestFile\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"82.0\" y=\"-169.5\" />\n-      <point x=\"4626.0\" y=\"669.0\" />\n-      <point x=\"4600.574287949919\" y=\"669.0\" />\n-      <point x=\"-16.720000000000255\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.DuplicateAssert\" target=\"testsmell.SmellyElement\">\n-      <point x=\"-139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"2259.6666666666665\" y=\"559.0\" />\n-      <point x=\"2276.7556181533687\" y=\"559.0\" />\n-      <point x=\"2276.7556181533687\" y=\"226.0\" />\n-      <point x=\"4957.677777777777\" y=\"226.0\" />\n-      <point x=\"-55.48888888888905\" y=\"48.0\" />\n+      <point x=\"0.0\" y=\"-86.5\" />\n+      <point x=\"510.5\" y=\"597.0\" />\n+      <point x=\"584.75\" y=\"597.0\" />\n+      <point x=\"-56.25\" y=\"50.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.PrintStatement\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"3852.333333333333\" y=\"649.0\" />\n-      <point x=\"4550.4142879499195\" y=\"649.0\" />\n-      <point x=\"-66.88000000000011\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.ExceptionCatchingThrowing\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"6561.666666666666\" y=\"599.0\" />\n-      <point x=\"4717.614287949919\" y=\"599.0\" />\n-      <point x=\"100.31999999999971\" y=\"59.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"6213.5\" y=\"214.0\" />\n+      <point x=\"4893.5\" y=\"214.0\" />\n+      <point x=\"63.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.MagicNumberTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"6123.666666666667\" y=\"609.0\" />\n-      <point x=\"4700.89428794992\" y=\"609.0\" />\n-      <point x=\"83.60000000000036\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.DependentTest\">\n-      <point x=\"144.70833333333303\" y=\"-59.5\" />\n-      <point x=\"4870.973568075118\" y=\"1148.0\" />\n-      <point x=\"9329.0\" y=\"1148.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"6.29166666666697\" y=\"-59.5\" />\n-      <point x=\"4732.556901408452\" y=\"1148.0\" />\n-      <point x=\"4729.5\" y=\"1148.0\" />\n-      <point x=\"4729.5\" y=\"649.0\" />\n-      <point x=\"4634.01428794992\" y=\"649.0\" />\n-      <point x=\"16.720000000000255\" y=\"59.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"2986.5\" y=\"204.0\" />\n+      <point x=\"4746.5\" y=\"204.0\" />\n+      <point x=\"-84.0\" y=\"62.0\" />\n     </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.AssertionRoulette\">\n-      <point x=\"-31.45833333333303\" y=\"-59.5\" />\n-      <point x=\"4694.806901408452\" y=\"1058.0\" />\n-      <point x=\"4151.0\" y=\"1058.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+    <edge source=\"testsmell.smell.ExceptionCatchingThrowing\" target=\"testsmell.AbstractSmell\">\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"220.5\" y=\"144.0\" />\n+      <point x=\"4620.5\" y=\"144.0\" />\n+      <point x=\"-210.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.DefaultTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"4809.666666666666\" y=\"639.0\" />\n-      <point x=\"4650.734287949919\" y=\"639.0\" />\n-      <point x=\"33.4399999999996\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.AssertionRoulette\" target=\"testsmell.SmellyElement\">\n-      <point x=\"-139.33333333333394\" y=\"-70.5\" />\n-      <point x=\"4011.666666666666\" y=\"559.0\" />\n-      <point x=\"4028.7556181533687\" y=\"559.0\" />\n-      <point x=\"4028.7556181533687\" y=\"306.0\" />\n-      <point x=\"4998.033333333333\" y=\"306.0\" />\n-      <point x=\"-15.133333333333212\" y=\"48.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"2064.5\" y=\"184.0\" />\n+      <point x=\"4704.5\" y=\"184.0\" />\n+      <point x=\"-126.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.VerboseTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333394\" y=\"-70.5\" />\n-      <point x=\"5247.666666666666\" y=\"629.0\" />\n-      <point x=\"4667.4542879499195\" y=\"629.0\" />\n-      <point x=\"50.159999999999854\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.AbstractSmell\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-59.0\" />\n-      <point x=\"4617.29428794992\" y=\"326.0\" />\n-      <point x=\"5008.122222222222\" y=\"326.0\" />\n-      <point x=\"-5.044444444444707\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.EmptyTest\">\n-      <point x=\"-106.95833333333394\" y=\"-59.5\" />\n-      <point x=\"4619.306901408451\" y=\"1118.0\" />\n-      <point x=\"1523.0\" y=\"1118.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.SleepyTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"-139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"2697.6666666666665\" y=\"559.0\" />\n-      <point x=\"2714.7556181533687\" y=\"559.0\" />\n-      <point x=\"2714.7556181533687\" y=\"246.0\" />\n-      <point x=\"4967.766666666666\" y=\"246.0\" />\n-      <point x=\"-45.399999999999636\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.GeneralFixture\">\n-      <point x=\"94.375\" y=\"-59.5\" />\n-      <point x=\"4820.640234741785\" y=\"1108.0\" />\n-      <point x=\"7577.0\" y=\"1108.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.EmptyTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"1523.0\" y=\"559.0\" />\n-      <point x=\"1458.8333333333335\" y=\"559.0\" />\n-      <point x=\"1458.8333333333335\" y=\"186.0\" />\n-      <point x=\"4937.5\" y=\"186.0\" />\n-      <point x=\"-75.66666666666697\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.DefaultTest\">\n-      <point x=\"18.875\" y=\"-59.5\" />\n-      <point x=\"4745.140234741785\" y=\"1048.0\" />\n-      <point x=\"4949.0\" y=\"1048.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"0.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.LazyTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-167.20000000000005\" y=\"-70.5\" />\n-      <point x=\"8723.8\" y=\"549.0\" />\n-      <point x=\"4801.21428794992\" y=\"549.0\" />\n-      <point x=\"183.92000000000007\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.PrintStatement\">\n-      <point x=\"-44.04166666666697\" y=\"-59.5\" />\n-      <point x=\"4682.223568075118\" y=\"1068.0\" />\n-      <point x=\"3713.0\" y=\"1068.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.DefaultTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"139.33333333333326\" y=\"-70.5\" />\n-      <point x=\"5088.333333333333\" y=\"669.0\" />\n-      <point x=\"5073.509616588417\" y=\"669.0\" />\n-      <point x=\"5073.509616588417\" y=\"326.0\" />\n-      <point x=\"5018.211111111112\" y=\"326.0\" />\n-      <point x=\"5.044444444444707\" y=\"48.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"3447.5\" y=\"214.0\" />\n+      <point x=\"4767.5\" y=\"214.0\" />\n+      <point x=\"-63.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.ConditionalTestLogic\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"6999.666666666666\" y=\"589.0\" />\n-      <point x=\"4734.33428794992\" y=\"589.0\" />\n-      <point x=\"117.03999999999996\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.MysteryGuest\">\n-      <point x=\"44.04166666666697\" y=\"-59.5\" />\n-      <point x=\"4770.306901408452\" y=\"1068.0\" />\n-      <point x=\"5825.0\" y=\"1068.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.SensitiveEquality\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"1961.0\" y=\"559.0\" />\n-      <point x=\"1896.8333333333335\" y=\"559.0\" />\n-      <point x=\"1896.8333333333335\" y=\"216.0\" />\n-      <point x=\"4952.633333333333\" y=\"216.0\" />\n-      <point x=\"-60.53333333333376\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.IgnoredTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"-139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"3135.6666666666665\" y=\"559.0\" />\n-      <point x=\"3152.7556181533687\" y=\"559.0\" />\n-      <point x=\"3152.7556181533687\" y=\"266.0\" />\n-      <point x=\"4977.855555555556\" y=\"266.0\" />\n-      <point x=\"-35.31111111111113\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.UnknownTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"209.0\" y=\"669.0\" />\n-      <point x=\"144.83333333333303\" y=\"669.0\" />\n-      <point x=\"144.83333333333303\" y=\"126.0\" />\n-      <point x=\"4907.233333333334\" y=\"126.0\" />\n-      <point x=\"-105.9333333333334\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.ExceptionCatchingThrowing\">\n-      <point x=\"69.20833333333303\" y=\"-59.5\" />\n-      <point x=\"4795.473568075118\" y=\"1088.0\" />\n-      <point x=\"6701.0\" y=\"1088.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.TestFile\">\n-      <point x=\"-18.875\" y=\"-59.5\" />\n-      <point x=\"4707.390234741785\" y=\"1048.0\" />\n-      <point x=\"4544.0\" y=\"1048.0\" />\n-      <point x=\"0.0\" y=\"169.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.ConstructorInitialization\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"8015.0\" y=\"669.0\" />\n-      <point x=\"8079.166666666666\" y=\"669.0\" />\n-      <point x=\"8079.166666666666\" y=\"196.0\" />\n-      <point x=\"5083.788888888888\" y=\"196.0\" />\n-      <point x=\"70.62222222222226\" y=\"48.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"2525.5\" y=\"194.0\" />\n+      <point x=\"4725.5\" y=\"194.0\" />\n+      <point x=\"-105.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.DependentTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-156.75\" y=\"-70.5\" />\n-      <point x=\"9172.25\" y=\"539.0\" />\n-      <point x=\"4817.93428794992\" y=\"539.0\" />\n-      <point x=\"200.64000000000033\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.DependentTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"52.25\" y=\"-70.5\" />\n-      <point x=\"9381.25\" y=\"669.0\" />\n-      <point x=\"9411.07428794992\" y=\"669.0\" />\n-      <point x=\"9411.07428794992\" y=\"126.0\" />\n-      <point x=\"5119.1\" y=\"126.0\" />\n-      <point x=\"105.9333333333334\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.SensitiveEquality\">\n-      <point x=\"-94.375\" y=\"-59.5\" />\n-      <point x=\"4631.890234741785\" y=\"1108.0\" />\n-      <point x=\"1961.0\" y=\"1108.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"1142.5\" y=\"164.0\" />\n+      <point x=\"4662.5\" y=\"164.0\" />\n+      <point x=\"-168.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.SensitiveEquality\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"2100.333333333333\" y=\"609.0\" />\n-      <point x=\"4483.534287949919\" y=\"609.0\" />\n-      <point x=\"-133.76000000000022\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.MagicNumberTest\">\n-      <point x=\"56.625\" y=\"-59.5\" />\n-      <point x=\"4782.890234741785\" y=\"1078.0\" />\n-      <point x=\"6263.0\" y=\"1078.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.LazyTest\">\n-      <point x=\"132.125\" y=\"-59.5\" />\n-      <point x=\"4858.390234741785\" y=\"1138.0\" />\n-      <point x=\"8891.0\" y=\"1138.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"4369.5\" y=\"234.0\" />\n+      <point x=\"4809.5\" y=\"234.0\" />\n+      <point x=\"-21.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.GeneralFixture\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"7437.666666666667\" y=\"579.0\" />\n-      <point x=\"4751.05428794992\" y=\"579.0\" />\n-      <point x=\"133.76000000000022\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.VerboseTest\">\n-      <point x=\"31.45833333333303\" y=\"-59.5\" />\n-      <point x=\"4757.723568075118\" y=\"1058.0\" />\n-      <point x=\"5387.0\" y=\"1058.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.SleepyTest\">\n-      <point x=\"-69.20833333333303\" y=\"-59.5\" />\n-      <point x=\"4657.056901408452\" y=\"1088.0\" />\n-      <point x=\"2837.0\" y=\"1088.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.LazyTest\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"8891.0\" y=\"669.0\" />\n-      <point x=\"8873.8\" y=\"669.0\" />\n-      <point x=\"8873.8\" y=\"146.0\" />\n-      <point x=\"5109.011111111111\" y=\"146.0\" />\n-      <point x=\"95.84444444444489\" y=\"48.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"681.5\" y=\"154.0\" />\n+      <point x=\"4641.5\" y=\"154.0\" />\n+      <point x=\"-189.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.MysteryGuest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"5685.666666666667\" y=\"619.0\" />\n-      <point x=\"4684.17428794992\" y=\"619.0\" />\n-      <point x=\"66.88000000000011\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.IgnoredTest\">\n-      <point x=\"-56.625\" y=\"-59.5\" />\n-      <point x=\"4669.640234741785\" y=\"1078.0\" />\n-      <point x=\"3275.0\" y=\"1078.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"7135.5\" y=\"194.0\" />\n+      <point x=\"4935.5\" y=\"194.0\" />\n+      <point x=\"105.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.ResourceOptimism\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333394\" y=\"-70.5\" />\n-      <point x=\"786.3333333333339\" y=\"579.0\" />\n-      <point x=\"4433.37428794992\" y=\"579.0\" />\n-      <point x=\"-183.92000000000007\" y=\"59.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"1603.5\" y=\"174.0\" />\n+      <point x=\"4683.5\" y=\"174.0\" />\n+      <point x=\"-147.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.RedundantAssertion\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"-139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"8313.666666666668\" y=\"559.0\" />\n-      <point x=\"4784.494287949919\" y=\"559.0\" />\n-      <point x=\"167.19999999999982\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.RedundantAssertion\">\n-      <point x=\"119.54166666666697\" y=\"-59.5\" />\n-      <point x=\"4845.806901408452\" y=\"1128.0\" />\n-      <point x=\"8453.0\" y=\"1128.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.ConditionalTestLogic\">\n-      <point x=\"81.79166666666697\" y=\"-59.5\" />\n-      <point x=\"4808.056901408452\" y=\"1098.0\" />\n-      <point x=\"7139.0\" y=\"1098.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"6674.5\" y=\"204.0\" />\n+      <point x=\"4914.5\" y=\"204.0\" />\n+      <point x=\"84.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.EagerTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333303\" y=\"-70.5\" />\n-      <point x=\"1224.333333333333\" y=\"589.0\" />\n-      <point x=\"4450.09428794992\" y=\"589.0\" />\n-      <point x=\"-167.19999999999982\" y=\"59.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.ExceptionCatchingThrowing\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"6701.0\" y=\"669.0\" />\n-      <point x=\"6765.166666666667\" y=\"669.0\" />\n-      <point x=\"6765.166666666667\" y=\"256.0\" />\n-      <point x=\"5053.522222222222\" y=\"256.0\" />\n-      <point x=\"40.35555555555584\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.smell.PrintStatement\" target=\"testsmell.SmellyElement\">\n-      <point x=\"0.0\" y=\"-70.5\" />\n-      <point x=\"3713.0\" y=\"559.0\" />\n-      <point x=\"3648.8333333333335\" y=\"559.0\" />\n-      <point x=\"3648.8333333333335\" y=\"296.0\" />\n-      <point x=\"4992.988888888889\" y=\"296.0\" />\n-      <point x=\"-20.17777777777792\" y=\"48.0\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.ConstructorInitialization\">\n-      <point x=\"106.95833333333303\" y=\"-59.5\" />\n-      <point x=\"4833.223568075118\" y=\"1118.0\" />\n-      <point x=\"8015.0\" y=\"1118.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n-    </edge>\n-    <edge source=\"testsmell.TestSmellDetector\" target=\"testsmell.smell.UnknownTest\">\n-      <point x=\"-144.70833333333303\" y=\"-59.5\" />\n-      <point x=\"4581.556901408452\" y=\"1148.0\" />\n-      <point x=\"209.0\" y=\"1148.0\" />\n-      <point x=\"0.0\" y=\"70.5\" />\n+      <point x=\"0.0\" y=\"-86.5\" />\n+      <point x=\"3908.5\" y=\"224.0\" />\n+      <point x=\"4788.5\" y=\"224.0\" />\n+      <point x=\"-42.0\" y=\"62.0\" />\n     </edge>\n     <edge source=\"testsmell.smell.UnknownTest\" target=\"testsmell.AbstractSmell\">\n-      <point x=\"139.33333333333348\" y=\"-70.5\" />\n-      <point x=\"348.33333333333394\" y=\"569.0\" />\n-      <point x=\"4416.654287949919\" y=\"569.0\" />\n-      <point x=\"-200.64000000000033\" y=\"59.0\" />\n+      <point x=\"0.0\" y=\"-74.5\" />\n+      <point x=\"8979.5\" y=\"154.0\" />\n+      <point x=\"5019.5\" y=\"154.0\" />\n+      <point x=\"189.0\" y=\"62.0\" />\n     </edge>\n   </edges>\n-  <settings layout=\"Hierarchic Group\" zoom=\"1.0\" x=\"4376.5\" y=\"674.0\" />\n+  <settings layout=\"Hierarchic Group\" zoom=\"1.0\" x=\"4537.0\" y=\"355.5\" />\n   <SelectedNodes />\n   <Categories>\n     <Category>Constructors</Category>"
  },
  {
    "sha": "c03dc0928dd411bffc7f350f550ab59e5ff3738e",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 56,
    "deletions": 6,
    "changes": 62,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/pom.xml",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/pom.xml",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/pom.xml?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -3,12 +3,26 @@\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n-\n     <groupId>edu.rit.se.testsmells</groupId>\n     <artifactId>TestSmellDetector</artifactId>\n-    <version>0.1</version>\n+    <version>0.3.2</version>\n     <packaging>jar</packaging>\n+    <properties>\n+        <project.MainClass>edu.rit.se.testsmells.Main</project.MainClass>\n+    </properties>\n     <build>\n+        <resources>\n+            <resource>\n+                <directory>src/resources</directory>\n+                <filtering>true</filtering>\n+            </resource>\n+        </resources>\n+        <testResources>\n+            <testResource>\n+                <directory>src/resources</directory>\n+                <filtering>true</filtering>\n+            </testResource>\n+        </testResources>\n         <plugins>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n@@ -29,6 +43,21 @@\n                         <version>5.4.2</version>\n                     </dependency>\n                 </dependencies>\n+                <configuration>\n+                    <excludedGroups>integration</excludedGroups>\n+                    <argLine>--illegal-access=permit</argLine>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifest>\n+                            <mainClass>${project.MainClass}</mainClass>\n+                        </manifest>\n+                    </archive>\n+                </configuration>\n             </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n@@ -42,9 +71,7 @@\n                         <configuration>\n                             <archive>\n                                 <manifest>\n-                                    <mainClass>\n-                                        Main\n-                                    </mainClass>\n+                                    <mainClass>${project.MainClass}</mainClass>\n                                 </manifest>\n                             </archive>\n                             <descriptorRefs>\n@@ -56,6 +83,23 @@\n             </plugin>\n         </plugins>\n     </build>\n+    <profiles>\n+        <profile>\n+            <id>integration</id>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <configuration>\n+                            <groups>integration</groups>\n+                            <excludedGroups>none</excludedGroups>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n \n     <dependencies>\n         <dependency>\n@@ -80,12 +124,18 @@\n             <version>5.4.2</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <version>3.5.10</version>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.junit.jupiter</groupId>\n             <artifactId>junit-jupiter-engine</artifactId>\n             <version>5.4.2</version>\n             <scope>test</scope>\n         </dependency>\n     </dependencies>\n-    \n+\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "94f678668c68ea303bad5552b7fcc4acbe02153b",
    "filename": "src/main/java/Main.java",
    "status": "removed",
    "additions": 0,
    "deletions": 112,
    "changes": 112,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/19adeb42963b2e0966f828a5da35cedb4867e026/src/main/java/Main.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/19adeb42963b2e0966f828a5da35cedb4867e026/src/main/java/Main.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/Main.java?ref=19adeb42963b2e0966f828a5da35cedb4867e026",
    "patch": "@@ -1,112 +0,0 @@\n-import testsmell.AbstractSmell;\n-import testsmell.ResultsWriter;\n-import testsmell.TestFile;\n-import testsmell.TestSmellDetector;\n-import testsmell.smell.AssertionRoulette;\n-import testsmell.smell.EagerTest;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-\n-public class Main {\n-    public static void main(String[] args) throws IOException {\n-        if (args == null) {\n-            System.out.println(\"Please provide the file containing the paths to the collection of test files\");\n-            return;\n-        }\n-        if(!args[0].isEmpty()){\n-            File inputFile = new File(args[0]);\n-            if(!inputFile.exists() || inputFile.isDirectory()) {\n-                System.out.println(\"Please provide a valid file containing the paths to the collection of test files\");\n-                return;\n-            }\n-        }\n-\n-        TestSmellDetector testSmellDetector = new TestSmellDetector();\n-\n-        /*\n-          Read the input file and build the TestFile objects\n-         */\n-        BufferedReader in = new BufferedReader(new FileReader(args[0]));\n-        String str;\n-\n-        String[] lineItem;\n-        TestFile testFile;\n-        List<TestFile> testFiles = new ArrayList<>();\n-        while ((str = in.readLine()) != null) {\n-            // use comma as separator\n-            lineItem = str.split(\",\");\n-\n-            //check if the test file has an associated production file\n-            if(lineItem.length ==2){\n-                testFile = new TestFile(lineItem[0], lineItem[1], \"\");\n-            }\n-            else{\n-                testFile = new TestFile(lineItem[0], lineItem[1], lineItem[2]);\n-            }\n-\n-            testFiles.add(testFile);\n-        }\n-\n-        /*\n-          Initialize the output file - Create the output file and add the column names\n-         */\n-        ResultsWriter resultsWriter = ResultsWriter.createResultsWriter();\n-        List<String> columnNames;\n-        List<String> columnValues;\n-\n-        columnNames = testSmellDetector.getTestSmellNames();\n-        columnNames.add(0, \"App\");\n-        columnNames.add(1, \"TestClass\");\n-        columnNames.add(2, \"TestFilePath\");\n-        columnNames.add(3, \"ProductionFilePath\");\n-        columnNames.add(4, \"RelativeTestFilePath\");\n-        columnNames.add(5, \"RelativeProductionFilePath\");\n-\n-        resultsWriter.writeColumnName(columnNames);\n-\n-        /*\n-          Iterate through all test files to detect smells and then write the output\n-        */\n-        TestFile tempFile;\n-        DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n-        Date date;\n-        for (TestFile file : testFiles) {\n-            date = new Date();\n-            System.out.println(dateFormat.format(date) + \" Processing: \"+file.getTestFilePath());\n-            System.out.println(\"Processing: \"+file.getTestFilePath());\n-\n-            //detect smells\n-            tempFile = testSmellDetector.detectSmells(file);\n-\n-            //write output\n-            columnValues = new ArrayList<>();\n-            columnValues.add(file.getApp());\n-            columnValues.add(file.getTestFileName());\n-            columnValues.add(file.getTestFilePath());\n-            columnValues.add(file.getProductionFilePath());\n-            columnValues.add(file.getRelativeTestFilePath());\n-            columnValues.add(file.getRelativeProductionFilePath());\n-            for (AbstractSmell smell : tempFile.getTestSmells()) {\n-                try {\n-                    columnValues.add(String.valueOf(smell.getHasSmell()));\n-                }\n-                catch (NullPointerException e){\n-                    columnValues.add(\"\");\n-                }\n-            }\n-            resultsWriter.writeLine(columnValues);\n-        }\n-\n-        System.out.println(\"end\");\n-    }\n-\n-\n-}"
  },
  {
    "sha": "2195d2158312d5ef743a5e375bf9ae2fdc014f0c",
    "filename": "src/main/java/edu/rit/se/testsmells/Main.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/Main.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/Main.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/Main.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,102 @@\n+package edu.rit.se.testsmells;\n+\n+import edu.rit.se.testsmells.testsmell.CSVWriter;\n+import edu.rit.se.testsmells.testsmell.ReportController;\n+import edu.rit.se.testsmells.testsmell.TestFile;\n+import edu.rit.se.testsmells.testsmell.TestSmellDetector;\n+import edu.rit.se.testsmells.testsmell.smell.*;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+public class Main {\n+    public static void main(String[] args) throws IOException {\n+        File inputFile = handleCliArgs(args);\n+\n+        TestSmellDetector testSmellDetector = initializeSmells();\n+\n+        List<TestFile> files = readInputTestFiles(inputFile);\n+        CSVWriter csvWriter = CSVWriter.createResultsWriter();\n+        ReportController reportCtrl = ReportController.createReportController(csvWriter);\n+\n+        for (TestFile file : files) {\n+            System.out.println(getCurrentDateFormatted() + \" Processing: \" + file.getTestFilePath());\n+            testSmellDetector.detectSmells(file);\n+        }\n+\n+        reportCtrl.report(files);\n+\n+        System.out.println(\"end\");\n+    }\n+\n+    private static Object getCurrentDateFormatted() {\n+        return (new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\")).format(new Date());\n+    }\n+\n+    private static List<TestFile> readInputTestFiles(File inputFile) throws IOException {\n+        BufferedReader in = new BufferedReader(new FileReader(inputFile));\n+        String str;\n+\n+        String[] lineItem;\n+        TestFile testFile;\n+        List<TestFile> testFiles = new ArrayList<>();\n+        while ((str = in.readLine()) != null) {\n+            // use comma as separator\n+            lineItem = str.split(\",\");\n+\n+            //check if the test file has an associated production file\n+            if (lineItem.length == 2) {\n+                testFile = new TestFile(lineItem[0], lineItem[1], \"\");\n+            } else {\n+                testFile = new TestFile(lineItem[0], lineItem[1], lineItem[2]);\n+            }\n+\n+            testFiles.add(testFile);\n+        }\n+        return testFiles;\n+    }\n+\n+    private static File handleCliArgs(String[] args) {\n+        assert args != null && args.length > 0 && args[0].isEmpty() : \"Please provide the file containing the paths to the collection of test files\";\n+        File inputFile = new File(args[0]);\n+        assert inputFile.exists() && !inputFile.isDirectory() : \"Please provide a valid file containing the paths to the collection of test files\";\n+\n+        return inputFile;\n+    }\n+\n+    private static TestSmellDetector initializeSmells() {\n+        TestSmellDetector testSmellDetector = TestSmellDetector.createTestSmellDetector();\n+\n+        testSmellDetector.addDetectableSmell(new AssertionRoulette());\n+        testSmellDetector.addDetectableSmell(new ConditionalTestLogic());\n+        testSmellDetector.addDetectableSmell(new ConstructorInitialization());\n+        testSmellDetector.addDetectableSmell(new DefaultTest());\n+        testSmellDetector.addDetectableSmell(new EmptyTest());\n+        testSmellDetector.addDetectableSmell(new ExceptionCatchingThrowing());\n+        testSmellDetector.addDetectableSmell(new GeneralFixture());\n+        testSmellDetector.addDetectableSmell(new MysteryGuest());\n+        testSmellDetector.addDetectableSmell(new PrintStatement());\n+        testSmellDetector.addDetectableSmell(new RedundantAssertion());\n+        testSmellDetector.addDetectableSmell(new SensitiveEquality());\n+        testSmellDetector.addDetectableSmell(new VerboseTest());\n+        testSmellDetector.addDetectableSmell(new SleepyTest());\n+        testSmellDetector.addDetectableSmell(new EagerTest());\n+        testSmellDetector.addDetectableSmell(new LazyTest());\n+        testSmellDetector.addDetectableSmell(new DuplicateAssert());\n+        testSmellDetector.addDetectableSmell(new UnknownTest());\n+        testSmellDetector.addDetectableSmell(new IgnoredTest());\n+        testSmellDetector.addDetectableSmell(new ResourceOptimism());\n+        testSmellDetector.addDetectableSmell(new MagicNumberTest());\n+        testSmellDetector.addDetectableSmell(new DependentTest());\n+\n+        return testSmellDetector;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "3928fbe0cb5903f4390635efbf077a6b8bfbc971",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/AbstractSmell.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/AbstractSmell.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/AbstractSmell.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/AbstractSmell.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,100 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.Node;\n+import com.github.javaparser.ast.PackageDeclaration;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.Name;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;\n+\n+import java.io.FileNotFoundException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+public abstract class AbstractSmell {\n+    private final MethodValidator methodValidator;\n+    private final Set<SmellyElement> smellyElementList;\n+\n+    public abstract String getSmellName();\n+\n+    public AbstractSmell() {\n+        methodValidator = MethodValidator.getInstance();\n+        smellyElementList = new CopyOnWriteArraySet<>();\n+    }\n+\n+    public abstract AbstractSmell recreate();\n+\n+    protected <T extends Node & NodeWithSimpleName> String getFullMethodName(CompilationUnit unit, T node) {\n+        String className;\n+        try {\n+            className = node.getParentNode().map(x -> (ClassOrInterfaceDeclaration) x).map(NodeWithSimpleName::getNameAsString).orElse(\"\");\n+        } catch (ClassCastException exception) {\n+            if (node.getParentNode().isPresent() && node.getParentNode().get() instanceof ObjectCreationExpr) {\n+                className = ((ObjectCreationExpr) node.getParentNode().get()).getType().getNameAsString() + \"##AnonymousClass\";\n+                System.err.println(\"Anonymous function detected! Using interface name with \\\"##AnonymousClass\\\" suffix.\");\n+            } else {\n+                System.err.println(\"Failed solving \" + node.getNameAsString() + \" parent's class name. Expected method within a class and received \" + node.getClass() + \" whose parent is \" + (node.getParentNode().isPresent() ? \"of type \" + node.getParentNode().get().getClass() : \"unavailable.\"));\n+                throw exception;\n+            }\n+        }\n+\n+        return getPackageClass(unit) + className + \".\" + node.getNameAsString();\n+    }\n+\n+    protected String getFullClassName(CompilationUnit unit, NodeWithSimpleName node) {\n+        return getPackageClass(unit) + node.getNameAsString();\n+    }\n+\n+    private String getPackageClass(CompilationUnit unit) {\n+        return unit.getPackageDeclaration().map(PackageDeclaration::getName).map(Name::asString).map(x -> x + \".\").orElse(\"\");\n+    }\n+\n+    public abstract void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException;\n+\n+    public void clear() {\n+        for (SmellyElement smellyElement : smellyElementList) {\n+            smellyElement.clear();\n+        }\n+        smellyElementList.clear();\n+    }\n+\n+    /**\n+     * Returns the set of analyzed elements (i.e. test methods)\n+     */\n+    public List<SmellyElement> getSmellyElements() {\n+        return new ArrayList<>(smellyElementList);\n+    }\n+\n+    public void addSmellyElement(SmellyElement elem) {\n+        smellyElementList.add(elem);\n+        elem.addDetectedSmell(this);\n+    }\n+\n+    /**\n+     * Returns true if any of the elements has a smell\n+     */\n+    public boolean hasSmell() {\n+        return smellyElementList.stream().anyMatch(SmellyElement::hasSmell);\n+    }\n+\n+    protected boolean isNumber(String str) {\n+        try {\n+            Double.parseDouble(str);\n+            return true;\n+        } catch (NumberFormatException nfe) {\n+            return false;\n+        }\n+    }\n+\n+    protected boolean isValidTestMethod(MethodDeclaration method) {\n+        return methodValidator.isValidTestMethod(method);\n+    }\n+\n+    protected boolean isValidSetupMethod(MethodDeclaration method) {\n+        return methodValidator.isValidSetupMethod(method);\n+    }\n+}"
  },
  {
    "sha": "657322dbcda8ae33585c8ec44ff1b805fde979c1",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/CSVWriter.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/CSVWriter.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/CSVWriter.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/CSVWriter.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,106 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * This class is utilized to write output to a CSV file\n+ */\n+public class CSVWriter {\n+\n+    private String suffix;\n+    private FileWriter writer;\n+    private List<String> headers;\n+    private String name;\n+\n+    /**\n+     * Creates the file into which output it to be written into. Results from each file will be stored in a new file\n+     *\n+     */\n+    private CSVWriter() {\n+        String time = String.valueOf(Calendar.getInstance().getTimeInMillis());\n+        suffix = MessageFormat.format(\"{0}_{1}_{2}.{3}\", \"Output\", \"TestSmellDetection\", time, \"csv\");\n+        writer = null;\n+    }\n+\n+    /**\n+     * Factory method that provides a new instance of the ResultsWriter\n+     *\n+     * @return new ResultsWriter instance\n+     */\n+    public static CSVWriter createResultsWriter() {\n+        return new CSVWriter();\n+    }\n+\n+    void setOutputFilePrefix(String prefix) throws IOException {\n+        name = MessageFormat.format(\"{0}_{1}\", prefix, suffix);\n+        writer = new FileWriter(name, true);\n+    }\n+\n+    public String getSuffix() {\n+        return suffix;\n+    }\n+\n+    String getFilename() {\n+        return name;\n+    }\n+\n+    public void writeCSVHeader(List<Report> reports) throws IOException {\n+        headers = reports.stream().flatMap(report -> report.getEntryKeys().stream()).distinct().collect(Collectors.toList());\n+        writeCSV(headers);\n+    }\n+\n+    public void writeCSVHeader(SmellsContainer anyFile) throws IOException {\n+        List<String> headers = new ArrayList<>(anyFile.getTestDescriptionEntries().keySet());\n+        headers.addAll(anyFile.getTestSmells().stream().map(AbstractSmell::getSmellName).collect(Collectors.toList()));\n+        writeCSV(headers);\n+    }\n+\n+    void exportSmells(List<Report> reports) throws IOException {\n+        for (Report report : reports) {\n+            List<String> entries = new ArrayList<>();\n+            for (String column : headers) {\n+                entries.add(report.getValue(column));\n+            }\n+            writeCSV(entries);\n+        }\n+    }\n+\n+    void exportSmells(SmellsContainer fileTestSmells) throws IOException {\n+        List<String> entries = new ArrayList<>(fileTestSmells.getTestDescriptionEntries().values());\n+        for (AbstractSmell smell : fileTestSmells.getTestSmells()) {\n+            try {\n+                entries.add(String.valueOf(smell.hasSmell()));\n+            } catch (NullPointerException e) {\n+                entries.add(\"\");\n+            }\n+        }\n+        writeCSV(entries);\n+    }\n+\n+    /**\n+     * Appends the input values into the CSV file\n+     *\n+     * @param dataValues the data that needs to be written into the file\n+     * @throws IOException Failed to create/open output file\n+     */\n+    private void writeCSV(List<String> dataValues) throws IOException {\n+        for (int i = 0; i < dataValues.size(); i++) {\n+            writer.append(String.valueOf(dataValues.get(i)));\n+\n+            if (i != dataValues.size() - 1) writer.append(\",\");\n+            else writer.append(System.lineSeparator());\n+\n+        }\n+    }\n+\n+    void closeFile() throws IOException {\n+        writer.flush();\n+        writer.close();\n+    }\n+}"
  },
  {
    "sha": "d4c51704714e0ca30bace741290c600a6037b8da",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/ExtractingStrategy.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/ExtractingStrategy.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/ExtractingStrategy.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/ExtractingStrategy.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,10 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import java.util.List;\n+\n+/**\n+ * Report informations extractor\n+ */\n+public interface ExtractingStrategy {\n+    List<Report> extract(List<AbstractSmell> smells, Class<?> type);\n+}"
  },
  {
    "sha": "cfc3ead9c25afad6575cc3c4d5925945a68a1a2e",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/MethodValidator.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/MethodValidator.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/MethodValidator.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/MethodValidator.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,49 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+\n+public class MethodValidator {\n+    private static MethodValidator instance;\n+\n+    private MethodValidator() {\n+    }\n+\n+    public static MethodValidator getInstance() {\n+        if (instance == null) {\n+            instance = new MethodValidator();\n+        }\n+        return instance;\n+    }\n+\n+    public boolean isValidTestMethod(MethodDeclaration method) {\n+        return isVisible(method) && (hasAnnotation(method, \"Test\") || nameStartsWith(method, \"test\"));\n+    }\n+\n+    public boolean isValidSetupMethod(MethodDeclaration method) {\n+        return isVisible(method) && (hasAnnotation(method, \"Before\") || hasAnnotation(method, \"BeforeEach\") || nameStartsWith(method, \"setUp\"));\n+    }\n+\n+    private boolean nameStartsWith(MethodDeclaration method, String value) {\n+        String method_name = method.getNameAsString().toLowerCase();\n+        String expected_name = value.toLowerCase();\n+\n+        return method_name.startsWith(expected_name);\n+    }\n+\n+    private boolean isVisible(MethodDeclaration method) {\n+        return !isIgnored(method) && isPublic(method);\n+    }\n+\n+    private boolean hasAnnotation(MethodDeclaration method, String annotation) {\n+        return method.getAnnotationByName(annotation).isPresent();\n+    }\n+\n+    private boolean isPublic(MethodDeclaration method) {\n+        return method.getModifiers().contains(Modifier.PUBLIC);\n+    }\n+\n+    private boolean isIgnored(MethodDeclaration method) {\n+        return hasAnnotation(method, \"Ignore\");\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6f70c57a56f28e4bb8fb3298bf60f0f00df80dcd",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/Report.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/Report.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/Report.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/Report.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,11 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import java.util.List;\n+\n+public interface Report {\n+    List<String> getEntryValues();\n+\n+    List<String> getEntryKeys();\n+\n+    String getValue(String key);\n+}"
  },
  {
    "sha": "3d04dc9c1ba2113090675e4ff04d8b9e97835ad9",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/ReportController.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/ReportController.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/ReportController.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/ReportController.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,93 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import edu.rit.se.testsmells.testsmell.internal.Extractor;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+public class ReportController {\n+    private final CSVWriter csvWriter;\n+    private final List<ReportGranularity> configuredGranularities;\n+    private ExtractingStrategy extractor = new Extractor();\n+\n+    ReportController(CSVWriter csvWriter, List<ReportGranularity> granularities) {\n+        this.csvWriter = csvWriter;\n+\n+        configuredGranularities = granularities;\n+    }\n+\n+    public static ReportController createReportController(CSVWriter csvWriter) throws IOException {\n+        return new ReportController(csvWriter, readProperties());\n+    }\n+\n+    private static List<ReportGranularity> readProperties() throws IOException {\n+        final String PROPERTIES_FILENAME = \"test-smells.properties\";\n+        final String PROPERTIES_KEY = \"report.granularity\";\n+        Properties prop = new Properties();\n+        prop.load(Objects.requireNonNull(ReportController.class.getClassLoader().getResourceAsStream(PROPERTIES_FILENAME)));\n+        String granularityConfig = prop.getProperty(PROPERTIES_KEY);\n+        return Arrays.stream(granularityConfig.split(\",\")).map(ReportGranularity::valueOf).collect(Collectors.toList());\n+    }\n+\n+    public void report(List<TestFile> files) throws IOException {\n+        for (ReportGranularity config : configuredGranularities) {\n+            csvWriter.setOutputFilePrefix(config.toString());\n+            switch (config) {\n+                case CLASS:\n+                    reportTestClasses(files);\n+                    break;\n+                case METHOD:\n+                    reportTestMethods(files);\n+                    break;\n+                case FILE:\n+                    reportTestFiles(files);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unexpected value: \" + config);\n+            }\n+            csvWriter.closeFile();\n+        }\n+    }\n+\n+    private void reportTestMethods(List<TestFile> files) throws IOException {\n+        if (files.size() > 0) {\n+            csvWriter.writeCSVHeader(mergeSmellyElements(files.get(0).getTestSmells(), TestMethod.class));\n+            for (TestFile file : files) {\n+                reportSmellyElements(file.getTestSmells(), TestMethod.class);\n+            }\n+        }\n+    }\n+\n+    private void reportTestClasses(List<TestFile> files) throws IOException {\n+        if (files.size() > 0) {\n+            csvWriter.writeCSVHeader(mergeSmellyElements(files.get(0).getTestSmells(), TestClass.class));\n+            for (TestFile file : files) {\n+                reportSmellyElements(file.getTestSmells(), TestClass.class);\n+            }\n+        }\n+    }\n+\n+    private void reportTestFiles(List<TestFile> files) throws IOException {\n+        if (files.size() > 0) {\n+            csvWriter.writeCSVHeader(files.get(0));\n+            for (TestFile file : files) {\n+                csvWriter.exportSmells(file);\n+            }\n+        }\n+    }\n+\n+    private List<Report> mergeSmellyElements(List<AbstractSmell> smells, Class<?> type) {\n+        return extractor.extract(smells, type);\n+    }\n+\n+    private void reportSmellyElements(List<AbstractSmell> smells, Class<?> type) throws IOException {\n+        List<Report> smellyElementReports = mergeSmellyElements(smells, type);\n+        csvWriter.exportSmells(smellyElementReports);\n+    }\n+\n+    enum ReportGranularity {FILE, CLASS, METHOD}\n+}"
  },
  {
    "sha": "fd74911302cc9f295bf3a258f27cbfb5981140c2",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/SmellsContainer.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/SmellsContainer.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/SmellsContainer.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/SmellsContainer.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,21 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.stream.Collectors;\n+\n+public abstract class SmellsContainer {\n+    public final Set<AbstractSmell> testSmells = new CopyOnWriteArraySet<>();\n+\n+    public abstract Map<String, String> getTestDescriptionEntries();\n+\n+    public void addDetectedSmell(AbstractSmell newSmell) {\n+        assert Objects.nonNull(newSmell);\n+        testSmells.add(newSmell);\n+    }\n+\n+    public List<AbstractSmell> getTestSmells() {\n+        return new ArrayList<>(testSmells);\n+    }\n+}"
  },
  {
    "sha": "dc64f68230693b5f75cf0ad7610350aa46022923",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/SmellyElement.java",
    "status": "renamed",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/SmellyElement.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/SmellyElement.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/SmellyElement.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,17 +1,20 @@\n-package testsmell;\n+package edu.rit.se.testsmells.testsmell;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-public class TestClass extends SmellyElement {\n-\n-    private String className;\n+public abstract class SmellyElement extends SmellsContainer {\n+    private final String name;\n+    private final Map<String, String> data;\n     private boolean hasSmell;\n-    private Map<String, String> data;\n \n-    public TestClass(String className) {\n-        this.className = className;\n+    public SmellyElement(String name) {\n         data = new HashMap<>();\n+        this.name = name;\n+    }\n+\n+    public void clear() {\n+        data.clear();\n     }\n \n     public void setHasSmell(boolean hasSmell) {\n@@ -22,17 +25,14 @@ public void addDataItem(String name, String value) {\n         data.put(name, value);\n     }\n \n-    @Override\n     public String getElementName() {\n-        return className;\n+        return name;\n     }\n \n-    @Override\n-    public boolean getHasSmell() {\n+    public boolean hasSmell() {\n         return hasSmell;\n     }\n \n-    @Override\n     public Map<String, String> getData() {\n         return data;\n     }",
    "previous_filename": "src/main/java/testsmell/TestClass.java"
  },
  {
    "sha": "c8f1de145da5f8cd610be2e6c17fb5bea389af77",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/TestClass.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestClass.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestClass.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/TestClass.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,20 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class TestClass extends SmellyElement {\n+\n+    public TestClass(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    public Map<String, String> getTestDescriptionEntries() {\n+        Map<String, String> entries = new HashMap<>(getData());\n+\n+        entries.put(\"Name\", getElementName());\n+\n+        return entries;\n+    }\n+}"
  },
  {
    "sha": "4b2c4459f30d248875daa299c3d6790f38b84c55",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/TestFile.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestFile.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestFile.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/TestFile.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,132 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class TestFile extends SmellsContainer {\n+    private final String app, testFilePath, productionFilePath;\n+    private boolean isProductionFileOmitted = false;\n+\n+    public TestFile(String app, String testFilePath, String productionFilePath) {\n+        checkValidity(testFilePath, productionFilePath, app);\n+        this.app = app;\n+        this.testFilePath = testFilePath;\n+        this.productionFilePath = productionFilePath;\n+    }\n+\n+    /**\n+     * Apply validation checks on constructor params.\n+     * It should be overridable for test purpose\n+     *\n+     * @param testPath Test file path (must contain file extension and be in a subfolder)\n+     * @param prodPath Production file path (must contain file extension and be in a subfolder)\n+     * @param app      Project name (cannot be empty)\n+     */\n+    protected void checkValidity(String testPath, String prodPath, String app) {\n+        if (prodPath.isEmpty()) {\n+            isProductionFileOmitted = true;\n+        }\n+        if (!haveExtension(testPath, prodPath) || !haveFileSeparator(testPath, prodPath)) {\n+            throw new IllegalArgumentException(\"Both testFilePath and productionFilePath should include extensions and file separator.\");\n+        }\n+        if (app.isEmpty()) {\n+            throw new IllegalArgumentException(\"App cannot be empty!\");\n+        }\n+    }\n+\n+    private boolean haveFileSeparator(String testPath, String prodPath) {\n+        return testPath.lastIndexOf(File.separator) != -1 && (isProductionFileOmitted || prodPath.lastIndexOf(File.separator) != -1);\n+    }\n+\n+    private boolean haveExtension(String testPath, String prodPath) {\n+        return testPath.lastIndexOf('.') != -1 && (isProductionFileOmitted || prodPath.lastIndexOf('.') != -1);\n+    }\n+\n+    /**\n+     * Retrieve each description property name and getter method in a HashMap\n+     *\n+     * @return A Map of description properties\n+     */\n+    public Map<String, String> getTestDescriptionEntries() {\n+        Map<String, String> descriptions = new HashMap<>();\n+\n+        descriptions.put(\"App\", getApp());\n+        descriptions.put(\"TestFileName\", getTestFileName());\n+        descriptions.put(\"TestFilePath\", getTestFilePath());\n+        descriptions.put(\"ProductionFilePath\", getProductionFilePath());\n+        descriptions.put(\"ProductionFileName\", getProductionFileName());\n+        descriptions.put(\"RelativeTestFilePath\", getRelativeTestFilePath());\n+        descriptions.put(\"RelativeProductionFilePath\", getRelativeProductionFilePath());\n+\n+        return descriptions;\n+    }\n+\n+    public String getApp() {\n+        return app;\n+    }\n+\n+    public String getProductionFilePath() {\n+        return productionFilePath;\n+    }\n+\n+    public String getTestFilePath() {\n+        return testFilePath;\n+    }\n+\n+    public String getTestFileNameWithoutExtension() {\n+        return removeExtension(getTestFileName());\n+    }\n+\n+    public String getProductionFileNameWithoutExtension() {\n+        if (isProductionFileOmitted) {\n+            return \"\";\n+        }\n+        return removeExtension(getProductionFileName());\n+    }\n+\n+    private String removeExtension(String filename) {\n+        return filename.substring(0, filename.lastIndexOf(\".\"));\n+    }\n+\n+    private String extractFileFromPath(String path) {\n+        return path.substring(path.lastIndexOf(File.separator) + 1);\n+    }\n+\n+    public String getTestFileName() {\n+        return extractFileFromPath(testFilePath);\n+    }\n+\n+    public String getProductionFileName() {\n+        if (isProductionFileOmitted) {\n+            return \"\";\n+        }\n+        return extractFileFromPath(productionFilePath);\n+    }\n+\n+    /**\n+     * Returns the path of the test file relative to the folder with the name of the project.\n+     * If the project directory has a different name, returns an empty string.\n+     *\n+     * @return the relative test file path\n+     */\n+    public String getRelativeTestFilePath() {\n+        return extractRelativePathFrom(testFilePath);\n+    }\n+\n+    /**\n+     * Returns the path of the production file relative to the folder with the name of the project.\n+     * If the project directory has a different name, returns an empty string.\n+     *\n+     * @return the relative production file path\n+     */\n+    public String getRelativeProductionFilePath() {\n+        return extractRelativePathFrom(productionFilePath);\n+    }\n+\n+    private String extractRelativePathFrom(String path) {\n+        int projectNameIndex = path.indexOf(app);\n+        if (projectNameIndex == -1) return \"\";\n+        return path.substring(projectNameIndex + app.length() + File.separator.length());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bad8d8d051f751309a0068827cc552a4bf69bbc5",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/TestMethod.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestMethod.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestMethod.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/TestMethod.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,20 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class TestMethod extends SmellyElement {\n+\n+    public TestMethod(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    public Map<String, String> getTestDescriptionEntries() {\n+        Map<String, String> entries = new HashMap<>(getData());\n+\n+        entries.put(\"Name\", getElementName());\n+\n+        return entries;\n+    }\n+}"
  },
  {
    "sha": "d4baa27d9ad43d193e916e51197597cc2eef52df",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/TestSmellDetector.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestSmellDetector.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/TestSmellDetector.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/TestSmellDetector.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,100 @@\n+package edu.rit.se.testsmells.testsmell;\n+\n+import com.github.javaparser.JavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class TestSmellDetector {\n+\n+    private List<InputStream> inputStreams;\n+    private List<AbstractSmell> testSmells;\n+\n+    /**\n+     * Instantiates the various test smell analyzer classes and loads the objects into an List\n+     */\n+    public TestSmellDetector() {\n+        testSmells = new ArrayList<>();\n+        inputStreams = new ArrayList<>();\n+    }\n+\n+    public void addDetectableSmell(AbstractSmell smell) {\n+        testSmells.add(smell);\n+    }\n+\n+    public void clear() {\n+        for (InputStream inputStream : inputStreams) {\n+            try {\n+                inputStream.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        for (AbstractSmell smell : testSmells) {\n+            smell.clear();\n+        }\n+        testSmells.clear();\n+    }\n+\n+    /**\n+     * Factory method that provides a new instance of the TestSmellDetector\n+     *\n+     * @return new TestSmellDetector instance\n+     */\n+    public static TestSmellDetector createTestSmellDetector() {\n+        return new TestSmellDetector();\n+    }\n+\n+    /**\n+     * Provides the names of the smells that are being checked for in the code\n+     *\n+     * @return list of smell names\n+     */\n+    public List<String> getTestSmellNames() {\n+        return testSmells.stream().map(AbstractSmell::getSmellName).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Loads the java source code file into an AST and then analyzes it for the existence of the different types of test smells\n+     */\n+    public void detectSmells(TestFile testFile) {\n+        CompilationUnit testFileCompilationUnit = parseIntoCompilationUnit(testFile.getTestFilePath());\n+\n+        CompilationUnit productionFileCompilationUnit = parseIntoCompilationUnit(testFile.getProductionFilePath());\n+\n+        for (AbstractSmell smellPrototype : testSmells) {\n+            AbstractSmell smell = smellPrototype.recreate();\n+            try {\n+                smell.runAnalysis(testFileCompilationUnit, productionFileCompilationUnit, testFile.getTestFileNameWithoutExtension(), testFile.getProductionFileNameWithoutExtension());\n+            } catch (FileNotFoundException ignored) {\n+            }\n+\n+            testFile.addDetectedSmell(smell);\n+        }\n+\n+    }\n+\n+    private CompilationUnit parseIntoCompilationUnit(String filePath) {\n+        if (StringUtils.isEmpty(filePath)) {\n+            return null;\n+        }\n+        InputStream testFileInputStream = null;\n+        try {\n+            testFileInputStream = new FileInputStream(filePath);\n+        } catch (IOException e) {\n+            testFileInputStream = getClass().getResourceAsStream(filePath);\n+        } finally {\n+            inputStreams.add(testFileInputStream);\n+        }\n+        assert Objects.nonNull(testFileInputStream);\n+        return JavaParser.parse(testFileInputStream);\n+    }\n+}"
  },
  {
    "sha": "d98d902f82eff6087c9e547ec41cf1e61526e1c7",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/internal/Extractor.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/internal/Extractor.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/internal/Extractor.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/internal/Extractor.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,141 @@\n+package edu.rit.se.testsmells.testsmell.internal;\n+\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.ExtractingStrategy;\n+import edu.rit.se.testsmells.testsmell.Report;\n+import edu.rit.se.testsmells.testsmell.SmellyElement;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class Extractor implements ExtractingStrategy {\n+\n+    @Override\n+    public List<Report> extract(List<AbstractSmell> smells, Class<?> type) {\n+        return merge(smells.stream().flatMap(smell -> filterAndFlatten(type, smell)).collect(Collectors.toList()));\n+    }\n+\n+    private Stream<ReportCell> filterAndFlatten(Class<?> type, AbstractSmell smell) {\n+        List<SmellyElement> elements = smell.getSmellyElements();\n+        String smellType = smell.getSmellName();\n+        return elements.stream().filter(type::isInstance).map(elem -> ReportCell.fromSmellyElement(elem, smellType));\n+    }\n+\n+    private List<Report> merge(List<ReportCell> elements) {\n+        List<String> names = listUniqueNames(elements);\n+        return names.stream().map(name -> ReportOutput.fromCell(filterByName(elements, name))).collect(Collectors.toList());\n+    }\n+\n+    private List<String> listUniqueNames(List<ReportCell> elements) {\n+        return elements.stream().map(elem -> elem.name).distinct().collect(Collectors.toList());\n+    }\n+\n+    private List<ReportCell> filterByName(List<ReportCell> elements, String name) {\n+        return elements.stream().filter(elem -> elem.name.equals(name)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * An intermediate representation of reporting data (private-only POJO)\n+     * Intended to remind bi-dimensional (TestSmells x SmellyElement) matrix's cell.\n+     */\n+    public static class ReportCell {\n+        private String smellType;\n+        private String name;\n+        private Map<String, String> data;\n+        private boolean hasSmell;\n+\n+        /**\n+         * Static factory method to convert from hierarchical SmellyElement into a flat ReportCell representation\n+         *\n+         * @param elem      The origin SmellyElement\n+         * @param smellType The TestSmell's type name\n+         * @return A valid ReportCell\n+         */\n+        static ReportCell fromSmellyElement(SmellyElement elem, String smellType) {\n+            ReportCell rc = new ReportCell();\n+            rc.smellType = smellType;\n+            rc.name = elem.getElementName();\n+            rc.data = elem.getData();\n+            rc.hasSmell = elem.hasSmell();\n+            return rc;\n+        }\n+    }\n+\n+    /**\n+     * The final output model\n+     */\n+    public static class ReportOutput implements Report {\n+        private static final String NAME_KEY = \"Element Name\";\n+        private Map<String, Boolean> smellsPresence;\n+        private Map<String, String> data;\n+        private String name;\n+        private List<String> values = null;\n+        private List<String> keys = null;\n+\n+        /**\n+         * Merge ReportCells into a ReportOutput\n+         *\n+         * @param cells ReportCells related to the same SmellyElement\n+         * @return A ReportOutput with all data from cells merged\n+         */\n+        static ReportOutput fromCell(List<ReportCell> cells) {\n+            ReportOutput output = new ReportOutput();\n+\n+            String elementName = cells.get(0).name;\n+            assert cells.stream().allMatch(cell -> cell.name.equals(elementName));\n+\n+            output.name = elementName;\n+            output.data = new HashMap<>();\n+            output.smellsPresence = new HashMap<>();\n+\n+            cells.forEach(cell -> {\n+                // Merge all cells' data into the same output.data map\n+                output.data.putAll(cell.data);\n+                // Use logic-OR operation as hasSmell's aggregation function\n+                boolean hasSmell = output.smellsPresence.getOrDefault(cell.smellType, false) || cell.hasSmell;\n+                // Store each smell type in a map with a flag indicating whether it occurs or not\n+                output.smellsPresence.put(cell.smellType, hasSmell);\n+            });\n+            return output;\n+        }\n+\n+        @Override\n+        public List<String> getEntryValues() {\n+            if (values == null) {\n+                values = new ArrayList<>();\n+                values.add(name);\n+                values.addAll(data.values());\n+                smellsPresence.values().forEach(e -> values.add(e.toString()));\n+            }\n+            return values;\n+        }\n+\n+        @Override\n+        public List<String> getEntryKeys() {\n+            if (keys == null) {\n+                keys = new ArrayList<>();\n+                keys.add(NAME_KEY);\n+                keys.addAll(data.keySet());\n+                keys.addAll(smellsPresence.keySet());\n+            }\n+            return keys;\n+        }\n+\n+        @Override\n+        public String getValue(String key) {\n+            if (key.equals(NAME_KEY)) {\n+                return name;\n+            } else if (data.containsKey(key)) {\n+                return data.get(key);\n+            } else if (smellsPresence.containsKey(key)) {\n+                return smellsPresence.get(key).toString();\n+            } else {\n+                return null;\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "a476f15aba96fc38ee3fbb4be0d689c902ba7738",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/AssertionRoulette.java",
    "status": "renamed",
    "additions": 15,
    "deletions": 29,
    "changes": 44,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/AssertionRoulette.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/AssertionRoulette.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/AssertionRoulette.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,17 +1,13 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * \"Guess what's wrong?\" This smell comes from having a number of assertions in a test method that have no explanation.\n@@ -20,27 +16,24 @@\n  */\n public class AssertionRoulette extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n     private int assertionsCount = 0;\n+    private CompilationUnit testFileCompilationUnit;\n \n     public AssertionRoulette() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n     }\n \n-    /**\n-     * Checks of 'Assertion Roulette' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Assertion Roulette\";\n+    public AbstractSmell recreate() {\n+        return new AssertionRoulette();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Assertion Roulette' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Assertion Roulette\";\n     }\n \n     /**\n@@ -50,22 +43,15 @@ public boolean getHasSmell() {\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         AssertionRoulette.ClassVisitor classVisitor;\n         classVisitor = new AssertionRoulette.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n         assertionsCount = classVisitor.overallAssertions;\n     }\n \n     public int getAssertionsCount() {\n         return assertionsCount;\n     }\n \n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n-    }\n-\n \n     private class ClassVisitor extends VoidVisitorAdapter<Void> {\n         private MethodDeclaration currentMethod = null;\n@@ -77,9 +63,9 @@ public int getAssertionsCount() {\n         // examine all methods in the test class\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n+            if (isValidTestMethod(n)) {\n                 currentMethod = n;\n-                testMethod = new TestMethod(n.getNameAsString());\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n                 testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                 super.visit(n, arg);\n \n@@ -92,7 +78,7 @@ else if (assertNoMessageCount >= 1) //if there is more than one assert statement\n \n                 testMethod.addDataItem(\"AssertCount\", String.valueOf(assertNoMessageCount));\n \n-                smellyElementList.add(testMethod);\n+                addSmellyElement(testMethod);\n \n                 //reset values for next method\n                 currentMethod = null;",
    "previous_filename": "src/main/java/testsmell/smell/AssertionRoulette.java"
  },
  {
    "sha": "df5eb484185a64b41201a63cfdec70dabed6c649",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/ConditionalTestLogic.java",
    "status": "renamed",
    "additions": 16,
    "deletions": 29,
    "changes": 45,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/ConditionalTestLogic.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/ConditionalTestLogic.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/ConditionalTestLogic.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,27 +1,29 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.ConditionalExpr;\n import com.github.javaparser.ast.stmt.*;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /*\n This class check a test method for the existence of loops and conditional statements in the methods body\n  */\n public class ConditionalTestLogic extends AbstractSmell {\n-    private List<SmellyElement> smellyElementList;\n+\n+    private CompilationUnit testFileCompilationUnit;\n \n     public ConditionalTestLogic() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n+    }\n+\n+    @Override\n+    public AbstractSmell recreate() {\n+        return new ConditionalTestLogic();\n     }\n \n     /**\n@@ -32,13 +34,6 @@ public String getSmellName() {\n         return \"Conditional Test Logic\";\n     }\n \n-    /**\n-     * Returns true if any of the elements has a smell\n-     */\n-    @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n-    }\n \n     /**\n      * Analyze the test file for test methods that use conditional statements\n@@ -47,18 +42,10 @@ public boolean getHasSmell() {\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         ConditionalTestLogic.ClassVisitor classVisitor;\n         classVisitor = new ConditionalTestLogic.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n     }\n \n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n-    }\n-\n-\n     private class ClassVisitor extends VoidVisitorAdapter<Void> {\n         private MethodDeclaration currentMethod = null;\n         private int conditionCount, ifCount, switchCount, forCount, foreachCount, whileCount = 0;\n@@ -67,9 +54,9 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         // examine all methods in the test class\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n+            if (isValidTestMethod(n)) {\n                 currentMethod = n;\n-                testMethod = new TestMethod(n.getNameAsString());\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n                 testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                 super.visit(n, arg);\n \n@@ -82,7 +69,7 @@ public void visit(MethodDeclaration n, Void arg) {\n                 testMethod.addDataItem(\"ForCount\", String.valueOf(forCount));\n                 testMethod.addDataItem(\"WhileCount\", String.valueOf(whileCount));\n \n-                smellyElementList.add(testMethod);\n+                addSmellyElement(testMethod);\n \n                 //reset values for next method\n                 currentMethod = null;",
    "previous_filename": "src/main/java/testsmell/smell/ConditionalTestLogic.java"
  },
  {
    "sha": "08f284dd6718a22e6961d063f2c6d88562c1b326",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/ConstructorInitialization.java",
    "status": "renamed",
    "additions": 20,
    "deletions": 36,
    "changes": 56,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/ConstructorInitialization.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/ConstructorInitialization.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/ConstructorInitialization.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,13 +1,12 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n import com.github.javaparser.ast.body.ConstructorDeclaration;\n import com.github.javaparser.ast.type.ClassOrInterfaceType;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestClass;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestClass;\n \n import java.io.FileNotFoundException;\n import java.util.ArrayList;\n@@ -19,72 +18,57 @@\n If this code detects the existence of a constructor, it sets the class as smelly\n  */\n public class ConstructorInitialization extends AbstractSmell {\n-\n-    private List<SmellyElement> smellyElementList;\n     private String testFileName;\n+    private CompilationUnit testFileCompilationUnit;\n \n     public ConstructorInitialization() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n     }\n \n-    /**\n-     * Checks of 'Constructor Initialization' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Constructor Initialization\";\n+    public AbstractSmell recreate() {\n+        return new ConstructorInitialization();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Constructor Initialization' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Constructor Initialization\";\n     }\n \n     /**\n      * Analyze the test file for Constructor Initialization smell\n      */\n     @Override\n-    public void runAnalysis(CompilationUnit testFileCompilationUnit,CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n+    public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         this.testFileName = testFileName;\n         ConstructorInitialization.ClassVisitor classVisitor;\n         classVisitor = new ConstructorInitialization.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n-    }\n-\n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n     }\n \n \n     private class ClassVisitor extends VoidVisitorAdapter<Void> {\n         TestClass testClass;\n-        boolean constructorAllowed=false;\n+        boolean constructorAllowed = false;\n \n         @Override\n         public void visit(ClassOrInterfaceDeclaration n, Void arg) {\n-            for(int i=0;i<n.getExtendedTypes().size();i++){\n-                ClassOrInterfaceType node = n.getExtendedTypes().get(i);\n-                constructorAllowed = node.getNameAsString().equals(\"ActivityInstrumentationTestCase2\");\n-            }\n+            constructorAllowed = n.getExtendedTypes().stream().anyMatch(c->c.getNameAsString().equals(\"ActivityInstrumentationTestCase2\"));\n+            testClass = new TestClass(getFullClassName(testFileCompilationUnit, n));\n+            testClass.setHasSmell(false);\n+            addSmellyElement(testClass);\n             super.visit(n, arg);\n         }\n \n         @Override\n         public void visit(ConstructorDeclaration n, Void arg) {\n             // This check is needed to handle java files that have multiple classes\n-            if(n.getNameAsString().equals(testFileName)) {\n-                if(!constructorAllowed) {\n-                    testClass = new TestClass(n.getNameAsString());\n-                    testClass.setHasSmell(true);\n-                    smellyElementList.add(testClass);\n-                }\n+            if (n.getNameAsString().equals(testFileName)) {\n+                testClass.setHasSmell(!constructorAllowed);\n             }\n         }\n     }",
    "previous_filename": "src/main/java/testsmell/smell/ConstructorInitialization.java"
  },
  {
    "sha": "b2e790b0690e61e133d1ae5b84705f3f33bf1c71",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/DefaultTest.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/DefaultTest.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/DefaultTest.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/DefaultTest.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -0,0 +1,55 @@\n+package edu.rit.se.testsmells.testsmell.smell;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestClass;\n+\n+import java.io.FileNotFoundException;\n+\n+/*\n+By default Android Studio creates default test classes when a project is created. These classes are meant to serve as an example for developers when wring unit tests\n+This code marks the class as smelly if the class name corresponds to the name of the default test classes\n+ */\n+public class DefaultTest extends AbstractSmell {\n+\n+\n+    private CompilationUnit testFileCompilationUnit;\n+\n+    public DefaultTest() {\n+        super();\n+    }\n+\n+    @Override\n+    public AbstractSmell recreate() {\n+        return new DefaultTest();\n+    }\n+\n+    /**\n+     * Checks of 'Default Test' smell\n+     */\n+    @Override\n+    public String getSmellName() {\n+        return \"Default Test\";\n+    }\n+\n+    @Override\n+    public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n+        DefaultTest.ClassVisitor classVisitor;\n+        classVisitor = new DefaultTest.ClassVisitor();\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n+    }\n+\n+    private class ClassVisitor extends VoidVisitorAdapter<Void> {\n+\n+        @Override\n+        public void visit(ClassOrInterfaceDeclaration n, Void arg) {\n+            TestClass testClass = new TestClass(getFullClassName(testFileCompilationUnit, n));\n+            testClass.setHasSmell(n.getNameAsString().equals(\"ExampleUnitTest\") || n.getNameAsString().equals(\"ExampleInstrumentedTest\"));\n+            addSmellyElement(testClass);\n+            super.visit(n, arg);\n+        }\n+    }\n+}"
  },
  {
    "sha": "014dff67a40796a1f493fd354ccedc9e9d0a828a",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/DependentTest.java",
    "status": "renamed",
    "additions": 36,
    "deletions": 50,
    "changes": 86,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/DependentTest.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/DependentTest.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/DependentTest.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,42 +1,38 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n import java.util.ArrayList;\n import java.util.List;\n \n public class DependentTest extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n+\n     private List<TestMethod> testMethods;\n \n \n     public DependentTest() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n         testMethods = new ArrayList<>();\n     }\n \n-    /**\n-     * Checks of 'DependentTest' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Dependent Test\";\n+    public AbstractSmell recreate() {\n+        return new DependentTest();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'DependentTest' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Dependent Test\";\n     }\n \n     /**\n@@ -49,27 +45,17 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         classVisitor.visit(testFileCompilationUnit, null);\n \n         for (TestMethod testMethod : testMethods) {\n-            if (testMethod.getCalledMethods().stream().anyMatch(x -> x.getName().equals(testMethods.stream().map(z -> z.getMethodDeclaration().getNameAsString())))){\n-                smellyElementList.add(new testsmell.TestMethod(testMethod.getMethodDeclaration().getNameAsString()));\n-            }\n-        }\n-\n-/*\n-        for (int i = 0; i < testMethods.get(i).getCalledMethods().size(); i++) {\n-            for (TestMethod testMethod : testMethods) {\n-                if (testMethods.get(i).getCalledMethods().stream().anyMatch(x -> x.getName().equals(testMethod.getMethodDeclaration().getNameAsString()))) {\n-                    smellyElementList.add(new testsmell.TestMethod(testMethod.getMethodDeclaration().getNameAsString()));\n+            edu.rit.se.testsmells.testsmell.TestMethod smell = new edu.rit.se.testsmells.testsmell.TestMethod(getFullMethodName(testFileCompilationUnit, testMethod.getMethodDeclaration()));\n+            smell.setHasSmell(false);\n+            for (TestMethod otherTestMethod : testMethods) {\n+                if (testMethod != otherTestMethod) {\n+                    if (testMethod.getCalledMethods().stream().anyMatch(x -> x.getName().equals(otherTestMethod.getMethodDeclaration().getNameAsString()))) {\n+                        smell.setHasSmell(true);\n+                    }\n                 }\n             }\n-        }*/\n-    }\n-\n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n+            addSmellyElement(smell);\n+        }\n     }\n \n     private class ClassVisitor extends VoidVisitorAdapter<Void> {\n@@ -79,7 +65,7 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         // examine all methods in the test class\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n+            if (isValidTestMethod(n)) {\n                 currentMethod = n;\n                 calledMethods = new ArrayList<>();\n \n@@ -101,38 +87,38 @@ public void visit(MethodCallExpr n, Void arg) {\n     }\n \n     private class TestMethod {\n+        private List<CalledMethod> calledMethods;\n+        private MethodDeclaration methodDeclaration;\n+\n+        public TestMethod(MethodDeclaration methodDeclaration, List<CalledMethod> calledMethods) {\n+            this.methodDeclaration = methodDeclaration;\n+            this.calledMethods = calledMethods;\n+        }\n+\n         public List<CalledMethod> getCalledMethods() {\n             return calledMethods;\n         }\n \n         public MethodDeclaration getMethodDeclaration() {\n             return methodDeclaration;\n         }\n-\n-        public TestMethod(MethodDeclaration methodDeclaration, List<CalledMethod> calledMethods) {\n-            this.methodDeclaration = methodDeclaration;\n-            this.calledMethods = calledMethods;\n-        }\n-\n-        private List<CalledMethod> calledMethods;\n-        private MethodDeclaration methodDeclaration;\n     }\n \n     private class CalledMethod {\n+        private int totalArguments;\n+        private String name;\n+\n+        public CalledMethod(int totalArguments, String name) {\n+            this.totalArguments = totalArguments;\n+            this.name = name;\n+        }\n+\n         public int getTotalArguments() {\n             return totalArguments;\n         }\n \n         public String getName() {\n             return name;\n         }\n-\n-        public CalledMethod(int totalArguments, String name) {\n-            this.totalArguments = totalArguments;\n-            this.name = name;\n-        }\n-\n-        private int totalArguments;\n-        private String name;\n     }\n }",
    "previous_filename": "src/main/java/testsmell/smell/DependentTest.java"
  },
  {
    "sha": "4a29642110a112b556ee1c5a1f7f7f9a56c40198",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/DuplicateAssert.java",
    "status": "renamed",
    "additions": 22,
    "deletions": 30,
    "changes": 52,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/DuplicateAssert.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/DuplicateAssert.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/DuplicateAssert.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,39 +1,38 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n public class DuplicateAssert extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n+\n+    private CompilationUnit testFileCompilationUnit;\n \n     public DuplicateAssert() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n     }\n \n-    /**\n-     * Checks of 'Duplicate Assert' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Duplicate Assert\";\n+    public AbstractSmell recreate() {\n+        return new DuplicateAssert();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Duplicate Assert' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Duplicate Assert\";\n     }\n \n     /**\n@@ -43,15 +42,8 @@ public boolean getHasSmell() {\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         DuplicateAssert.ClassVisitor classVisitor;\n         classVisitor = new DuplicateAssert.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n-    }\n-\n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n     }\n \n \n@@ -64,25 +56,25 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         // examine all methods in the test class\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n+            if (isValidTestMethod(n)) {\n                 currentMethod = n;\n-                testMethod = new TestMethod(n.getNameAsString());\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n                 testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                 super.visit(n, arg);\n \n                 // if there are duplicate messages, then the smell exists\n-                Set<String> set1 = new HashSet<String>(assertMessage);\n+                Set<String> set1 = new HashSet<>(assertMessage);\n                 if (set1.size() < assertMessage.size()) {\n                     testMethod.setHasSmell(true);\n                 }\n \n                 // if there are duplicate assert methods, then the smell exists\n-                Set<String> set2 = new HashSet<String>(assertMethod);\n+                Set<String> set2 = new HashSet<>(assertMethod);\n                 if (set2.size() < assertMethod.size()) {\n                     testMethod.setHasSmell(true);\n                 }\n \n-                smellyElementList.add(testMethod);\n+                addSmellyElement(testMethod);\n \n                 //reset values for next method\n                 currentMethod = null;",
    "previous_filename": "src/main/java/testsmell/smell/DuplicateAssert.java"
  },
  {
    "sha": "bdad57f8e12f6e9272f702b05d551a8a204e71e3",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/EagerTest.java",
    "status": "renamed",
    "additions": 23,
    "deletions": 45,
    "changes": 68,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/EagerTest.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/EagerTest.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/EagerTest.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,4 +1,4 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.Modifier;\n@@ -8,9 +8,9 @@\n import com.github.javaparser.ast.body.VariableDeclarator;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n import com.github.javaparser.ast.expr.NameExpr;\n-import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.*;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n import java.util.ArrayList;\n@@ -22,29 +22,27 @@\n     private static final String TEST_FILE = \"Test\";\n     private static final String PRODUCTION_FILE = \"Production\";\n     private String productionClassName;\n-    private List<SmellyElement> smellyElementList;\n+\n     private List<MethodDeclaration> productionMethods;\n     private int eagerCount;\n+    private CompilationUnit testFileCompilationUnit;\n \n     public EagerTest() {\n+        super();\n         productionMethods = new ArrayList<>();\n-        smellyElementList = new ArrayList<>();\n     }\n \n-    /**\n-     * Checks of 'Eager Test' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Eager Test\";\n+    public AbstractSmell recreate() {\n+        return new EagerTest();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Eager Test' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Eager Test\";\n     }\n \n     /**\n@@ -62,18 +60,11 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         classVisitor.visit(productionFileCompilationUnit, null);\n \n         classVisitor = new EagerTest.ClassVisitor(TEST_FILE);\n-        classVisitor.visit(testFileCompilationUnit, null);\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n         eagerCount = classVisitor.overallEager;\n     }\n \n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n-    }\n-\n     public int getEagerCount() {\n         return eagerCount;\n     }\n@@ -117,14 +108,14 @@ public void visit(EnumDeclaration n, Void arg) {\n         public void visit(MethodDeclaration n, Void arg) {\n             // ensure that this method is only executed for the test file\n             if (Objects.equals(fileType, TEST_FILE)) {\n-                if (Util.isValidTestMethod(n)) {\n+                if (isValidTestMethod(n)) {\n                     currentMethod = n;\n-                    testMethod = new TestMethod(currentMethod.getNameAsString());\n+                    testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, currentMethod));\n                     testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                     super.visit(n, arg);\n \n                     testMethod.setHasSmell(eagerCount > 1); //the method has a smell if there is more than 1 call to production methods\n-                    smellyElementList.add(testMethod);\n+                    addSmellyElement(testMethod);\n \n                     //reset values for next method\n                     currentMethod = null;\n@@ -164,8 +155,7 @@ public void visit(MethodCallExpr n, Void arg) {\n                     calledMethods.add(n.getNameAsString());\n                 } else {\n                     if (n.getScope().isPresent()) {\n-                        //this if statement checks if the method is chained and gets the final scope\n-                        if ((n.getScope().get() instanceof MethodCallExpr)) {\n+                        if (isMethodChained(n)) {\n                             getFinalScope(n);\n                             nameExpr = tempNameExpr;\n                         }\n@@ -177,7 +167,7 @@ public void visit(MethodCallExpr n, Void arg) {\n                             //checks if the scope of the method being called is either of production class (e.g. static method)\n                             //or\n                             ///if the scope matches a variable which, in turn, is of type of the production class\n-                            if (nameExpr.getNameAsString().equals(productionClassName) ||\n+                            if (productionClassName.equals(nameExpr.getNameAsString()) ||\n                                     productionVariables.contains(nameExpr.getNameAsString())) {\n                                 if (!calledMethods.contains(n.getNameAsString())) {\n                                     eagerCount++;\n@@ -192,37 +182,25 @@ public void visit(MethodCallExpr n, Void arg) {\n             super.visit(n, arg);\n         }\n \n+        private boolean isMethodChained(MethodCallExpr n) {\n+            return n.getScope().get() instanceof MethodCallExpr;\n+        }\n+\n         private NameExpr tempNameExpr;\n \n         /**\n          * This method is utilized to obtain the scope of a chained method statement\n          */\n         private void getFinalScope(MethodCallExpr n) {\n             if (n.getScope().isPresent()) {\n-                if ((n.getScope().get() instanceof MethodCallExpr)) {\n+                if ((isMethodChained(n))) {\n                     getFinalScope((MethodCallExpr) n.getScope().get());\n                 } else if ((n.getScope().get() instanceof NameExpr)) {\n                     tempNameExpr = ((NameExpr) n.getScope().get());\n                 }\n             }\n         }\n \n-//        /**\n-//         * The purpose of this method is to capture the names of all variables, declared in the method body, that are of type of the production class.\n-//         * The variable is captured as and when the code statement is parsed/evaluated by the parser\n-//         */\n-//        @Override\n-//        public void visit(VariableDeclarationExpr n, Void arg) {\n-//            if (currentMethod != null) {\n-//                for (int i = 0; i < n.getVariables().size(); i++) {\n-//                    if (productionClassName.equals(n.getVariable(i).getType().asString())) {\n-//                        productionVariables.add(n.getVariable(i).getNameAsString());\n-//                    }\n-//                }\n-//            }\n-//            super.visit(n, arg);\n-//        }\n-\n         @Override\n         public void visit(VariableDeclarator n, Void arg) {\n             if (Objects.equals(fileType, TEST_FILE)) {",
    "previous_filename": "src/main/java/testsmell/smell/EagerTest.java"
  },
  {
    "sha": "5c3dc6f680ec8b1d0fffc52b112dcdd66c08df1f",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/EmptyTest.java",
    "status": "renamed",
    "additions": 16,
    "deletions": 29,
    "changes": 45,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/EmptyTest.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/EmptyTest.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/EmptyTest.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,43 +1,37 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * This class checks if a test method is empty (i.e. the method does not contain statements in its body)\n  * If the the number of statements in the body is 0, then the method is smelly\n  */\n public class EmptyTest extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n+\n+    private CompilationUnit testFileCompilationUnit;\n \n     public EmptyTest() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n     }\n \n-    /**\n-     * Checks of 'Empty Test' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"EmptyTest\";\n+    public AbstractSmell recreate() {\n+        return new EmptyTest();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Empty Test' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"EmptyTest\";\n     }\n \n     /**\n@@ -47,15 +41,8 @@ public boolean getHasSmell() {\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         EmptyTest.ClassVisitor classVisitor;\n         classVisitor = new EmptyTest.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n-    }\n-\n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n     }\n \n     /**\n@@ -69,8 +56,8 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n          */\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n-                testMethod = new TestMethod(n.getNameAsString());\n+            if (isValidTestMethod(n)) {\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n                 testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                 //method should not be abstract\n                 if (!n.isAbstract()) {\n@@ -81,7 +68,7 @@ public void visit(MethodDeclaration n, Void arg) {\n                         }\n                     }\n                 }\n-                smellyElementList.add(testMethod);\n+                addSmellyElement(testMethod);\n             }\n         }\n     }",
    "previous_filename": "src/main/java/testsmell/smell/EmptyTest.java"
  },
  {
    "sha": "61079bcb9b7df95f28abdc9934cd142556d58682",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/ExceptionCatchingThrowing.java",
    "status": "renamed",
    "additions": 16,
    "deletions": 29,
    "changes": 45,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/ExceptionCatchingThrowing.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/ExceptionCatchingThrowing.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/ExceptionCatchingThrowing.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,45 +1,39 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.stmt.CatchClause;\n import com.github.javaparser.ast.stmt.ThrowStmt;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /*\n This class checks if test methods in the class either catch or throw exceptions. Use Junit's exception handling to automatically pass/fail the test\n If this code detects the existence of a catch block or a throw statement in the methods body, the method is marked as smelly\n  */\n public class ExceptionCatchingThrowing extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n+\n+    private CompilationUnit testFileCompilationUnit;\n \n     public ExceptionCatchingThrowing() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n     }\n \n-    /**\n-     * Checks of 'Exception Catching Throwing' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Exception Catching Throwing\";\n+    public AbstractSmell recreate() {\n+        return new ExceptionCatchingThrowing();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Exception Catching Throwing' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Exception Catching Throwing\";\n     }\n \n     /**\n@@ -49,15 +43,8 @@ public boolean getHasSmell() {\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         ExceptionCatchingThrowing.ClassVisitor classVisitor;\n         classVisitor = new ExceptionCatchingThrowing.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n-    }\n-\n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n     }\n \n     private class ClassVisitor extends VoidVisitorAdapter<Void> {\n@@ -69,9 +56,9 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         // examine all methods in the test class\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n+            if (isValidTestMethod(n)) {\n                 currentMethod = n;\n-                testMethod = new TestMethod(n.getNameAsString());\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n                 testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                 super.visit(n, arg);\n \n@@ -81,7 +68,7 @@ public void visit(MethodDeclaration n, Void arg) {\n                 testMethod.setHasSmell(exceptionCount >= 1);\n                 testMethod.addDataItem(\"ExceptionCount\", String.valueOf(exceptionCount));\n \n-                smellyElementList.add(testMethod);\n+                addSmellyElement(testMethod);\n \n                 //reset values for next method\n                 currentMethod = null;",
    "previous_filename": "src/main/java/testsmell/smell/ExceptionCatchingThrowing.java"
  },
  {
    "sha": "df07f89fd3bb09170e75f6940b8c04aa6dbf2893",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/GeneralFixture.java",
    "status": "renamed",
    "additions": 26,
    "deletions": 41,
    "changes": 67,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/GeneralFixture.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/GeneralFixture.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/GeneralFixture.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,4 +1,4 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.NodeList;\n@@ -11,50 +11,47 @@\n import com.github.javaparser.ast.stmt.BlockStmt;\n import com.github.javaparser.ast.stmt.ExpressionStmt;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n import java.util.*;\n \n public class GeneralFixture extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n+\n     List<MethodDeclaration> methodList;\n     MethodDeclaration setupMethod;\n     List<FieldDeclaration> fieldList;\n     List<String> setupFields;\n+    private CompilationUnit testFileCompilationUnit;\n \n     public GeneralFixture() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n         methodList = new ArrayList<>();\n         fieldList = new ArrayList<>();\n         setupFields = new ArrayList<>();\n     }\n \n-    /**\n-     * Checks of 'General Fixture' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"General Fixture\";\n+    public AbstractSmell recreate() {\n+        return new GeneralFixture();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'General Fixture' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"General Fixture\";\n     }\n \n     @Override\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         GeneralFixture.ClassVisitor classVisitor;\n         classVisitor = new GeneralFixture.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null); //This call will populate the list of test methods and identify the setup method [visit(ClassOrInterfaceDeclaration n)]\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null); //This call will populate the list of test methods and identify the setup method [visit(ClassOrInterfaceDeclaration n)]\n \n         //Proceed with general fixture analysis if setup method exists\n         if (setupMethod != null) {\n@@ -86,35 +83,26 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         }\n     }\n \n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n-    }\n-\n \n     private class ClassVisitor extends VoidVisitorAdapter<Void> {\n-        private MethodDeclaration methodDeclaration = null;\n         private MethodDeclaration currentMethod = null;\n         TestMethod testMethod;\n-        private Set<String> fixtureCount = new HashSet();\n+        private Set<String> fixtureCount = new HashSet<>();\n \n         @Override\n         public void visit(ClassOrInterfaceDeclaration n, Void arg) {\n             NodeList<BodyDeclaration<?>> members = n.getMembers();\n-            for (int i = 0; i < members.size(); i++) {\n-                if (members.get(i) instanceof MethodDeclaration) {\n-                    methodDeclaration = (MethodDeclaration) members.get(i);\n+            for (BodyDeclaration<?> member : members) {\n+                if (member instanceof MethodDeclaration) {\n+                    MethodDeclaration methodDeclaration = (MethodDeclaration) member;\n \n                     //Get a list of all test methods\n-                    if (Util.isValidTestMethod(methodDeclaration)) {\n+                    if (isValidTestMethod(methodDeclaration)) {\n                         methodList.add(methodDeclaration);\n                     }\n \n                     //Get the setup method\n-                    if (Util.isValidSetupMethod(methodDeclaration)) {\n+                    if (isValidSetupMethod(methodDeclaration)) {\n                         //It should have a body\n                         if (methodDeclaration.getBody().isPresent()) {\n                             setupMethod = methodDeclaration;\n@@ -123,26 +111,26 @@ public void visit(ClassOrInterfaceDeclaration n, Void arg) {\n                 }\n \n                 //Get all fields in the class\n-                if (members.get(i) instanceof FieldDeclaration) {\n-                    fieldList.add((FieldDeclaration) members.get(i));\n+                if (member instanceof FieldDeclaration) {\n+                    fieldList.add((FieldDeclaration) member);\n                 }\n             }\n         }\n \n         // examine all methods in the test class\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n+            if (isValidTestMethod(n)) {\n                 currentMethod = n;\n \n                 //call visit(NameExpr) for current method\n                 super.visit(n, arg);\n \n-                testMethod = new TestMethod(n.getNameAsString());\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n                 testMethod.setHasSmell(fixtureCount.size() != setupFields.size());\n-                smellyElementList.add(testMethod);\n+                addSmellyElement(testMethod);\n \n-                fixtureCount = new HashSet();;\n+                fixtureCount = new HashSet<>();\n                 currentMethod = null;\n             }\n         }\n@@ -152,10 +140,7 @@ public void visit(NameExpr n, Void arg) {\n             if (currentMethod != null) {\n                 //check if the variable contained in the current test method is also contained in the setup method\n                 if (setupFields.contains(n.getNameAsString())) {\n-                    if(!fixtureCount.contains(n.getNameAsString())){\n-                        fixtureCount.add(n.getNameAsString());\n-                    }\n-                    //System.out.println(currentMethod.getNameAsString() + \" : \" + n.getName().toString());\n+                    fixtureCount.add(n.getNameAsString());\n                 }\n             }\n ",
    "previous_filename": "src/main/java/testsmell/smell/GeneralFixture.java"
  },
  {
    "sha": "002361d7845af227d0eb0c578a82daaa9b38310b",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/IgnoredTest.java",
    "status": "renamed",
    "additions": 27,
    "deletions": 47,
    "changes": 74,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/IgnoredTest.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/IgnoredTest.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/IgnoredTest.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,41 +1,37 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.Modifier;\n import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.nodeTypes.NodeWithAnnotations;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestClass;\n-import testsmell.TestMethod;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestClass;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n public class IgnoredTest extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n+\n+    private CompilationUnit testFileCompilationUnit;\n \n     public IgnoredTest() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n     }\n \n-    /**\n-     * Checks of 'Ignored Test' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"IgnoredTest\";\n+    public AbstractSmell recreate() {\n+        return new IgnoredTest();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Ignored Test' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"IgnoredTest\";\n     }\n \n     /**\n@@ -45,17 +41,13 @@ public boolean getHasSmell() {\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         IgnoredTest.ClassVisitor classVisitor;\n         classVisitor = new IgnoredTest.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n     }\n \n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n+    private boolean isIgnored(NodeWithAnnotations<?> n) {\n+        return n.getAnnotationByName(\"Ignore\").isPresent() || n.getAnnotationByName(\"Disabled\").isPresent();\n     }\n-\n     /**\n      * Visitor class\n      */\n@@ -68,11 +60,9 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n          */\n         @Override\n         public void visit(ClassOrInterfaceDeclaration n, Void arg) {\n-            if (n.getAnnotationByName(\"Ignore\").isPresent()) {\n-                testClass = new TestClass(n.getNameAsString());\n-                testClass.setHasSmell(true);\n-                smellyElementList.add(testClass);\n-            }\n+            testClass = new TestClass(getFullClassName(testFileCompilationUnit, n));\n+            testClass.setHasSmell(isIgnored(n));\n+            addSmellyElement(testClass);\n             super.visit(n, arg);\n         }\n \n@@ -81,29 +71,19 @@ public void visit(ClassOrInterfaceDeclaration n, Void arg) {\n          */\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-\n+            //JUnit 5\n+            //check if test method has Disabled annotation\n             //JUnit 4\n             //check if test method has Ignore annotation\n-            if (n.getAnnotationByName(\"Test\").isPresent()) {\n-                if (n.getAnnotationByName(\"Ignore\").isPresent()) {\n-                    testMethod = new TestMethod(n.getNameAsString());\n-                    testMethod.setHasSmell(true);\n-                    smellyElementList.add(testMethod);\n-                    return;\n-                }\n-            }\n-\n             //JUnit 3\n             //check if test method is not public\n-            if (n.getNameAsString().toLowerCase().startsWith(\"test\")) {\n-                if (!n.getModifiers().contains(Modifier.PUBLIC)) {\n-                    testMethod = new TestMethod(n.getNameAsString());\n-                    testMethod.setHasSmell(true);\n-                    smellyElementList.add(testMethod);\n-                    return;\n-                }\n+            if (n.getAnnotationByName(\"Test\").isPresent() || n.getNameAsString().toLowerCase().startsWith(\"test\")) {\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n+                testMethod.setHasSmell(isIgnored(n) || !n.getModifiers().contains(Modifier.PUBLIC));\n+                addSmellyElement(testMethod);\n             }\n         }\n \n+\n     }\n }",
    "previous_filename": "src/main/java/testsmell/smell/IgnoredTest.java"
  },
  {
    "sha": "2c0a9ca11ac095d859665fb2dfd61d8a835a2e1c",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/LazyTest.java",
    "status": "renamed",
    "additions": 18,
    "deletions": 30,
    "changes": 48,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/LazyTest.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/LazyTest.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/LazyTest.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,4 +1,4 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.Modifier;\n@@ -8,12 +8,9 @@\n import com.github.javaparser.ast.body.VariableDeclarator;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n import com.github.javaparser.ast.expr.NameExpr;\n-import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n import java.util.ArrayList;\n@@ -25,30 +22,28 @@\n     private static final String TEST_FILE = \"Test\";\n     private static final String PRODUCTION_FILE = \"Production\";\n     private String productionClassName;\n-    private List<SmellyElement> smellyElementList;\n+\n     private List<MethodUsage> calledProductionMethods;\n     private List<MethodDeclaration> productionMethods;\n+    private CompilationUnit testFileCompilationUnit;\n \n     public LazyTest() {\n+        super();\n         productionMethods = new ArrayList<>();\n-        smellyElementList = new ArrayList<>();\n         calledProductionMethods = new ArrayList<>();\n     }\n \n-    /**\n-     * Checks of 'Lazy Test' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Lazy Test\";\n+    public AbstractSmell recreate() {\n+        return new LazyTest();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'Lazy Test' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Lazy Test\";\n     }\n \n     /**\n@@ -66,7 +61,8 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         classVisitor.visit(productionFileCompilationUnit, null);\n \n         classVisitor = new LazyTest.ClassVisitor(TEST_FILE);\n-        classVisitor.visit(testFileCompilationUnit, null);\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n \n         for (MethodUsage method : calledProductionMethods) {\n             List<MethodUsage> s = calledProductionMethods.stream().filter(x -> x.getProductionMethod().equals(method.getProductionMethod())).collect(Collectors.toList());\n@@ -76,20 +72,12 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n                     // If the counts were equal it means that the production method is only used (called from) inside one test method\n                     TestMethod testClass = new TestMethod(method.getTestMethod());\n                     testClass.setHasSmell(true);\n-                    smellyElementList.add(testClass);\n+                    addSmellyElement(testClass);\n                 }\n             }\n         }\n     }\n \n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n-    }\n-\n     private class MethodUsage {\n         private String testMethod, productionMethod;\n \n@@ -143,9 +131,9 @@ public void visit(EnumDeclaration n, Void arg) {\n         public void visit(MethodDeclaration n, Void arg) {\n             // ensure that this method is only executed for the test file\n             if (Objects.equals(fileType, TEST_FILE)) {\n-                if (Util.isValidTestMethod(n)) {\n+                if (isValidTestMethod(n)) {\n                     currentMethod = n;\n-                    testMethod = new TestMethod(currentMethod.getNameAsString());\n+                    testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, currentMethod));\n                     testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                     super.visit(n, arg);\n \n@@ -180,7 +168,7 @@ public void visit(MethodCallExpr n, Void arg) {\n             if (currentMethod != null) {\n                 if (productionMethods.stream().anyMatch(i -> i.getNameAsString().equals(n.getNameAsString()) &&\n                         i.getParameters().size() == n.getArguments().size())) {\n-                    calledProductionMethods.add(new MethodUsage(currentMethod.getNameAsString(), n.getNameAsString()));\n+                    calledProductionMethods.add(new MethodUsage(getFullMethodName(testFileCompilationUnit, currentMethod), n.getNameAsString())); // TODO: Should production method name also be in full form?\n                 } else {\n                     if (n.getScope().isPresent()) {\n                         if (n.getScope().get() instanceof NameExpr) {\n@@ -189,7 +177,7 @@ public void visit(MethodCallExpr n, Void arg) {\n                             ///if the scope matches a variable which, in turn, is of type of the production class\n                             if (((NameExpr) n.getScope().get()).getNameAsString().equals(productionClassName) ||\n                                     productionVariables.contains(((NameExpr) n.getScope().get()).getNameAsString())) {\n-                                calledProductionMethods.add(new MethodUsage(currentMethod.getNameAsString(), n.getNameAsString()));\n+                                calledProductionMethods.add(new MethodUsage(getFullMethodName(testFileCompilationUnit, currentMethod), n.getNameAsString())); // TODO: Should production method name also be in full form?\n                             }\n                         }\n                     }",
    "previous_filename": "src/main/java/testsmell/smell/LazyTest.java"
  },
  {
    "sha": "15615540821ffd763f9984b504396190c075e392",
    "filename": "src/main/java/edu/rit/se/testsmells/testsmell/smell/MagicNumberTest.java",
    "status": "renamed",
    "additions": 29,
    "deletions": 42,
    "changes": 71,
    "blob_url": "https://github.com/TestSmells/TestSmellDetector/blob/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/MagicNumberTest.java",
    "raw_url": "https://github.com/TestSmells/TestSmellDetector/raw/397e84022295f65f748c0d85e4b55540ca07b5e5/src/main/java/edu/rit/se/testsmells/testsmell/smell/MagicNumberTest.java",
    "contents_url": "https://api.github.com/repos/TestSmells/TestSmellDetector/contents/src/main/java/edu/rit/se/testsmells/testsmell/smell/MagicNumberTest.java?ref=397e84022295f65f748c0d85e4b55540ca07b5e5",
    "patch": "@@ -1,42 +1,36 @@\n-package testsmell.smell;\n+package edu.rit.se.testsmells.testsmell.smell;\n \n import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.Expression;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n import com.github.javaparser.ast.expr.ObjectCreationExpr;\n import com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n-import testsmell.AbstractSmell;\n-import testsmell.SmellyElement;\n-import testsmell.TestMethod;\n-import testsmell.Util;\n+import edu.rit.se.testsmells.testsmell.AbstractSmell;\n+import edu.rit.se.testsmells.testsmell.TestMethod;\n \n import java.io.FileNotFoundException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n-public class MagicNumberTest  extends AbstractSmell {\n+public class MagicNumberTest extends AbstractSmell {\n \n-    private List<SmellyElement> smellyElementList;\n+\n+    private CompilationUnit testFileCompilationUnit;\n \n     public MagicNumberTest() {\n-        smellyElementList = new ArrayList<>();\n+        super();\n     }\n \n-    /**\n-     * Checks of 'MagicNumberTest' smell\n-     */\n     @Override\n-    public String getSmellName() {\n-        return \"Magic Number Test\";\n+    public AbstractSmell recreate() {\n+        return new MagicNumberTest();\n     }\n \n     /**\n-     * Returns true if any of the elements has a smell\n+     * Checks of 'MagicNumberTest' smell\n      */\n     @Override\n-    public boolean getHasSmell() {\n-        return smellyElementList.stream().filter(x -> x.getHasSmell()).count() >= 1;\n+    public String getSmellName() {\n+        return \"Magic Number Test\";\n     }\n \n     /**\n@@ -46,15 +40,8 @@ public boolean getHasSmell() {\n     public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit productionFileCompilationUnit, String testFileName, String productionFileName) throws FileNotFoundException {\n         MagicNumberTest.ClassVisitor classVisitor;\n         classVisitor = new MagicNumberTest.ClassVisitor();\n-        classVisitor.visit(testFileCompilationUnit, null);\n-    }\n-\n-    /**\n-     * Returns the set of analyzed elements (i.e. test methods)\n-     */\n-    @Override\n-    public List<SmellyElement> getSmellyElements() {\n-        return smellyElementList;\n+        this.testFileCompilationUnit = testFileCompilationUnit;\n+        classVisitor.visit(this.testFileCompilationUnit, null);\n     }\n \n     private class ClassVisitor extends VoidVisitorAdapter<Void> {\n@@ -65,16 +52,16 @@ public void runAnalysis(CompilationUnit testFileCompilationUnit, CompilationUnit\n         // examine all methods in the test class\n         @Override\n         public void visit(MethodDeclaration n, Void arg) {\n-            if (Util.isValidTestMethod(n)) {\n+            if (isValidTestMethod(n)) {\n                 currentMethod = n;\n-                testMethod = new TestMethod(n.getNameAsString());\n+                testMethod = new TestMethod(getFullMethodName(testFileCompilationUnit, n));\n                 testMethod.setHasSmell(false); //default value is false (i.e. no smell)\n                 super.visit(n, arg);\n \n                 testMethod.setHasSmell(magicCount >= 1);\n                 testMethod.addDataItem(\"MagicNumberCount\", String.valueOf(magicCount));\n \n-                smellyElementList.add(testMethod);\n+                addSmellyElement(testMethod);\n \n                 //reset values for next method\n                 currentMethod = null;\n@@ -98,21 +85,21 @@ public void visit(MethodCallExpr n, Void arg) {\n                     // checks all arguments of the assert method\n                     for (Expression argument:n.getArguments()) {\n                         // if the argument is a number\n-                        if(Util.isNumber(argument.toString())){\n-                           magicCount++;\n-                       }\n-                       // if the argument contains an ObjectCreationExpr (e.g. assertEquals(new Integer(2),...)\n-                       else if(argument instanceof ObjectCreationExpr){\n-                           for (Expression objectArguments:((ObjectCreationExpr) argument).getArguments()){\n-                               if(Util.isNumber(objectArguments.toString())){\n-                                   magicCount++;\n-                               }\n-                           }\n-                       }\n+                        if (isNumber(argument.toString())) {\n+                            magicCount++;\n+                        }\n+                        // if the argument contains an ObjectCreationExpr (e.g. assertEquals(new Integer(2),...)\n+                        else if (argument instanceof ObjectCreationExpr) {\n+                            for (Expression objectArguments : ((ObjectCreationExpr) argument).getArguments()) {\n+                                if (isNumber(objectArguments.toString())) {\n+                                    magicCount++;\n+                                }\n+                            }\n+                        }\n                        // if the argument contains an MethodCallExpr (e.g. assertEquals(someMethod(2),...)\n                        else if(argument instanceof MethodCallExpr){\n                            for (Expression objectArguments:((MethodCallExpr) argument).getArguments()){\n-                               if(Util.isNumber(objectArguments.toString())){\n+                               if (isNumber(objectArguments.toString())) {\n                                    magicCount++;\n                                }\n                            }",
    "previous_filename": "src/main/java/testsmell/smell/MagicNumberTest.java"
  }
]
