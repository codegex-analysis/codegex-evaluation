[
  {
    "sha": "40500db52f490f773148a55b9b33c15fe14d29fe",
    "filename": "Lesson1/hw1/Main.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw1/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw1/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson1/hw1/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,23 @@\n+package Lesson1.hw1;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Object[] array = new Object[3];\n+\n+        array[0] = new String(\"Строка\");\n+        array[1] = new Integer(555);\n+        array[2] = new Main();\n+\n+        replace(array, 0, 2);\n+    }\n+\n+    public static <T> void replace(T[] array, int index1, int index2) {\n+        T element1 = array[index1];\n+        array[index1] = array[index2];\n+        array[index2] = element1;\n+\n+        for (T e : array) {\n+            System.out.println(e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "c121140781044c22f4c7c2353406c1c7e23c00d4",
    "filename": "Lesson1/hw2/Main.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw2/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw2/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson1/hw2/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,27 @@\n+package Lesson1.hw2;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Object[] array= new Object[3];\n+\n+        array[0] = new String(\"Строка\");\n+        array[1] = new Integer(555);\n+        array[2] = new Lesson1.hw2.Main();\n+\n+        transform(array);\n+    }\n+\n+    public static <T> void transform(T[] array) {\n+        List<T> arrayList = new ArrayList<>();\n+\n+        arrayList.addAll(Arrays.asList(array));\n+\n+        for (T t : arrayList) {\n+            System.out.println(t);\n+        }\n+    }\n+}"
  },
  {
    "sha": "a2ee8f8f948181e0f5072b12d28fecdbb3adaf19",
    "filename": "Lesson1/hw3/Apple.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Apple.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Apple.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson1/hw3/Apple.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,7 @@\n+package Lesson1.hw3;\n+\n+public class Apple extends Fruit {\n+    Apple(float weight) {\n+        super(weight);\n+    }\n+}"
  },
  {
    "sha": "a3ef5e7ef3b64ab63c0958cbb6e1927f8969f5d1",
    "filename": "Lesson1/hw3/Fruit.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Fruit.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Fruit.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson1/hw3/Fruit.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,13 @@\n+package Lesson1.hw3;\n+\n+public abstract class Fruit {\n+    private final float weight;\n+\n+    public Fruit(float weight) {\n+        this.weight = weight;\n+    }\n+\n+    public float getWeight() {\n+        return weight;\n+    }\n+}"
  },
  {
    "sha": "cf178e94c7b6da367cb452116ab2605982fd3677",
    "filename": "Lesson1/hw3/FruitBox.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/FruitBox.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/FruitBox.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson1/hw3/FruitBox.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,58 @@\n+package Lesson1.hw3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class FruitBox<T extends Fruit> {\n+    private final List<T> content = new ArrayList<>();\n+\n+    /**\n+     * Метод добавляет фрукт определенного типа в коробку\n+     * @param fruit экземпляр класса, расширяющего класс Fruit\n+     */\n+    public void addFruit(T fruit) {\n+        content.add(fruit);\n+    }\n+\n+    /**\n+     * Возвращает вес коробки\n+     * @return вес типа float\n+     */\n+    public float getWeight() {\n+        float weight = 0;\n+\n+        for (T t : content) {\n+            weight += t.getWeight();\n+        }\n+\n+        return weight;\n+    }\n+\n+    /**\n+     * Сравнивает вес двух коробок с фруктами\n+     * @param box экземпляр класса Box\n+     * @return true, если вес коробок равен\n+     */\n+    public <B extends Fruit> boolean compare(FruitBox<B> box) {\n+        return this.getWeight() == box.getWeight();\n+    }\n+\n+    /**\n+     * очищает коробку\n+     */\n+    private void clearBox() {\n+        this.content.clear();\n+    }\n+\n+    /**\n+     * Пересыпает фрукты одинакового типа из данной коробки в коробку, переданную в качестве параметра\n+     * @param newBox экземпляр класса Box\n+     */\n+    public void replaceFruit(FruitBox<T> newBox) {\n+        for (T fruit : content) {\n+            newBox.addFruit(fruit);\n+        }\n+\n+        clearBox();\n+    }\n+}"
  },
  {
    "sha": "05895f41f07135bc23a6451deb8740e604c5c369",
    "filename": "Lesson1/hw3/Main.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson1/hw3/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,28 @@\n+package Lesson1.hw3;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        FruitBox<Apple> fruitBoxApple1 = new FruitBox<>();\n+        FruitBox<Apple> fruitBoxApple2 = new FruitBox<>();\n+        FruitBox<Orange> fruitBoxOrange = new FruitBox<>();\n+\n+        for (int i = 0; i < 5; i++) {\n+            fruitBoxApple1.addFruit(new Apple(1.0f));\n+        }\n+\n+        fruitBoxOrange.addFruit(new Orange(1.5f));\n+        fruitBoxOrange.addFruit(new Orange(1.8f));\n+        fruitBoxOrange.addFruit(new Orange(1.7f));\n+\n+        System.out.println(\"The first box with apple weighs \" + fruitBoxApple1.getWeight());\n+        System.out.println(\"The box with orange weighs \" + fruitBoxOrange.getWeight());\n+\n+        System.out.println(fruitBoxApple1.compare(fruitBoxOrange)?\"The boxes weigh the same\":\"The boxes don't weigh the same\");\n+\n+        fruitBoxApple1.replaceFruit(fruitBoxApple2);\n+\n+        System.out.println(\"Now first box weighs \" + fruitBoxApple1.getWeight());\n+        System.out.println(\"And second - \" + fruitBoxApple2.getWeight());\n+\n+    }\n+}"
  },
  {
    "sha": "59066e645a9870ff4b1c8982747e901118c943d5",
    "filename": "Lesson1/hw3/Orange.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Orange.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson1/hw3/Orange.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson1/hw3/Orange.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,7 @@\n+package Lesson1.hw3;\n+\n+public class Orange extends Fruit {\n+    public Orange(float weight) {\n+        super(weight);\n+    }\n+}"
  },
  {
    "sha": "197431e17e8f15bf2487eecbe793fbb5f9ce814a",
    "filename": "Lesson2/DataBase.java",
    "status": "added",
    "additions": 155,
    "deletions": 0,
    "changes": 155,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson2/DataBase.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson2/DataBase.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson2/DataBase.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,155 @@\n+package Lesson2;\n+\n+import java.sql.*;\n+\n+public class DataBase {\n+    private static Connection connection;\n+    private static Statement statement;\n+    private static ResultSet resultSet;\n+\n+    private final String login, password, host, port;\n+\n+    public DataBase(String host, String port, String login, String password) throws SQLException, ClassNotFoundException {\n+        this.host = host;\n+        this.port = port;\n+        this.login = login;\n+        this.password = password;\n+\n+        firstSettings();\n+    }\n+\n+    /**\n+     * Создание таблицы при инициализации экземпляра класса\n+     * @throws SQLException\n+     * @throws ClassNotFoundException\n+     */\n+    private static void firstSettings() throws SQLException, ClassNotFoundException {\n+        connect();\n+        setStatement();\n+        createDB();\n+        closeConnection();\n+    }\n+\n+    private static void connect() throws ClassNotFoundException, SQLException {\n+        connection = null;\n+        Class.forName(\"org.sqlite.JDBC\");\n+        connection = DriverManager.getConnection(\"jdbc:sqlite:users.s2db\");\n+    }\n+\n+    private static void setStatement() throws SQLException {\n+        statement = connection.createStatement();\n+    }\n+\n+    private static void closeConnection() throws SQLException {\n+        if (resultSet != null)\n+            resultSet.close();\n+        statement.close();\n+        connection.close();\n+    }\n+\n+    private static void createDB() throws SQLException {\n+        statement.execute(\"CREATE TABLE if not exists 'users' ('id' INTEGER PRIMARY KEY AUTOINCREMENT, 'login' text, 'password' text, 'nickname' text);\");\n+    }\n+\n+    /**\n+     * Добавление нового пользователя в базу данных\n+     * @param login String\n+     * @param password String\n+     * @param nickname String\n+     * @throws SQLException\n+     * @throws ClassNotFoundException\n+     */\n+    public void addUserToDB(String login, String password, String nickname) throws SQLException, ClassNotFoundException {\n+        if (login.length() * password.length() * nickname.length() == 0) {\n+            System.out.println(\"Одно из полей пустое\");\n+            return;\n+        }\n+\n+        connect();\n+        setStatement();\n+\n+        resultSet = statement.executeQuery(String.format(\"SELECT * FROM users WHERE login='%s' OR nickname='%s'\", login, nickname));\n+        if (checkNickname(resultSet))\n+            return;\n+\n+        statement.execute(String.format(\"INSERT INTO users (login, password, nickname) VALUES ('%s', '%s', '%s')\", login, password, nickname));\n+        System.out.println(\"Регистрация прошла успешно\");\n+\n+        closeConnection();\n+    }\n+\n+    /**\n+     * Выбор пользователя из базы данных\n+     * @param login String\n+     * @param password String\n+     * @throws SQLException\n+     * @throws ClassNotFoundException\n+     */\n+    public void selectUserFromDB(String login, String password) throws SQLException, ClassNotFoundException {\n+        System.out.println(login + \" \" + password);\n+        if (login.length() * password.length() == 0) {\n+            System.out.println(\"Одно из полей пустое\");\n+            return;\n+        }\n+\n+        connect();\n+        setStatement();\n+\n+        resultSet = statement.executeQuery(String.format(\"SELECT * FROM users WHERE login='%s' AND password='%s'\", login, password));\n+        if (checkLogin(resultSet))\n+            return;\n+\n+        System.out.println(\"Приветствую, \" + resultSet.getString(\"nickname\"));\n+\n+        closeConnection();\n+    }\n+\n+    /**\n+     * Изменение никнейма\n+     * @param login String\n+     * @param password String\n+     * @param newNickname Новый никнейм (String)\n+     * @throws SQLException\n+     * @throws ClassNotFoundException\n+     */\n+    public void changeNicknameInDB(String login, String password, String newNickname) throws SQLException, ClassNotFoundException {\n+        if (login.length() * password.length() * newNickname.length() == 0) {\n+            System.out.println(\"Одно из полей пустое\");\n+            return;\n+        }\n+\n+        connect();\n+        setStatement();\n+\n+        resultSet = statement.executeQuery(String.format(\"SELECT * FROM users WHERE nickname='%s'\", newNickname));\n+        if (checkNickname(resultSet))\n+            return;\n+\n+        resultSet = statement.executeQuery(String.format(\"SELECT * FROM users WHERE login='%s' AND password='%s'\", login, password));\n+        if (checkLogin(resultSet))\n+            return;\n+\n+        statement.execute(String.format(\"UPDATE users SET nickname='%s' WHERE login='%s' AND password='%s'\", newNickname, login, password));\n+        System.out.println(\"Никнейм изменен\");\n+\n+        closeConnection();\n+    }\n+\n+    private boolean checkNickname(ResultSet resultSet) throws SQLException {\n+        if (resultSet.next()) {\n+            System.out.println(\"Такой никнейм уже занят\");\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean checkLogin(ResultSet resultSet) throws SQLException {\n+        if (!resultSet.next()) {\n+            System.out.println(\"Не верный Логин или Пароль\");\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "6c3742f01f7a489c58db78133b38dd4d89ac4152",
    "filename": "Lesson2/Main.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson2/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/Lesson2/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/Lesson2/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,55 @@\n+package Lesson2;\n+\n+import java.sql.SQLException;\n+import java.util.Scanner;\n+\n+public class Main {\n+    private static final Scanner scanner = new Scanner(System.in);\n+    private static DataBase dataBase;\n+\n+    public static void main(String[] args) throws SQLException, ClassNotFoundException {\n+        preStartSettings();\n+\n+        System.out.println(\"Для регистрации введите\\n/reg login password nickname\\n\");\n+        System.out.println(\"Для авторизации введите\\n/login login password\\n\");\n+        System.out.println(\"Для смены никнейма введите\\n/change login password newNickname\\n\");\n+\n+        while (true) {\n+            String command = scanner.nextLine();\n+\n+            if (command.startsWith(\"/login\")) {\n+                String[] messageParts = command.split(\" \", 3);\n+                if (messageParts.length < 3) {\n+                    System.out.println(\"Команда введена не верно\");\n+                } else {\n+                    dataBase.selectUserFromDB(messageParts[1], messageParts[2]);\n+                }\n+            }\n+\n+            if (command.startsWith(\"/reg\")) {\n+                String[] messageParts = command.split(\" \", 4);\n+                if (messageParts.length < 4) {\n+                    System.out.println(\"Команда введена не верно\");\n+                } else {\n+                    dataBase.addUserToDB(messageParts[1], messageParts[2], messageParts[3]);\n+                }\n+            }\n+\n+            if (command.startsWith(\"/change\")) {\n+                String[] messageParts = command.split(\" \", 4);\n+                if (messageParts.length < 4) {\n+                    System.out.println(\"Команда введена не верно\");\n+                } else {\n+                    dataBase.changeNicknameInDB(messageParts[1], messageParts[2], messageParts[3]);\n+                }\n+            }\n+\n+            if (command.startsWith(\"/exit\"))\n+                break;\n+        }\n+    }\n+\n+    public static void preStartSettings() throws SQLException, ClassNotFoundException {\n+        dataBase = new DataBase(\"localhost\", \"3306\", \"root\", \"root\");\n+    }\n+}"
  },
  {
    "sha": "618067a022d9a54d51997c7ed1c81e4b8dfab565",
    "filename": "lesson3/Main.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson3/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson3/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson3/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,79 @@\n+package lesson3;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Scanner;\n+\n+public class Main {\n+    private static final int ROWS_COUNT = 100;\n+    private static final String ABSOLUTE_PATH = \"F:\\\\\";\n+    private static final String FILE_NAME = \"logs\";\n+    private static final String FILE_TYPE = \".txt\";\n+    private static File logs;\n+    private static int countFileName = 1;\n+    private static final Map<String, String > censorship = new HashMap<>();\n+\n+    public static void main(String[] args) throws IOException {\n+        censorship.put(\"москва\", \"Москва\");\n+        censorship.put(\"спб\", \"СПб\");\n+\n+        Scanner scanner = new Scanner(System.in);\n+        logs = new File(ABSOLUTE_PATH + FILE_NAME + FILE_TYPE);\n+\n+        if (!logs.exists())\n+            createLogsFile();\n+\n+        readMessages(logs);\n+\n+        BufferedWriter logsWriter = new BufferedWriter(new FileWriter(logs, true));\n+\n+        while (true) {\n+            String message = scanner.nextLine();\n+            if (message.startsWith(\"/exit\"))\n+                break;\n+\n+            String[] messageWords = message.split(\" \");\n+            for (int i = 0; i < messageWords.length; i++) {\n+                if (censorship.containsKey(messageWords[i]))\n+                    messageWords[i] = censorship.get(messageWords[i]);\n+            }\n+\n+            StringBuilder newMessageBuilder = new StringBuilder();\n+            for (int i = 0; i < messageWords.length; i++) {\n+                newMessageBuilder.append(messageWords[i]);\n+            }\n+            String newMessage = newMessageBuilder.toString();\n+\n+            logsWriter.append(newMessage + \"\\n\");\n+            logsWriter.flush();\n+        }\n+\n+        scanner.close();\n+        logsWriter.close();\n+    }\n+\n+    public static void readMessages(File logs) throws IOException {\n+        List<String> allRows = Files.readAllLines(logs.toPath());\n+        int i = 0;\n+\n+        if (allRows.size() > ROWS_COUNT)\n+            i = allRows.size() - ROWS_COUNT;\n+\n+        for (; i < allRows.size(); i++) {\n+            System.out.println(allRows.get(i));\n+        }\n+    }\n+\n+    public static void createLogsFile() throws IOException {\n+        logs = new File(ABSOLUTE_PATH + FILE_NAME + countFileName + FILE_TYPE);\n+        boolean fileIsCreated = logs.createNewFile();\n+        ++countFileName;\n+\n+        if (!fileIsCreated) {\n+            createLogsFile();\n+        }\n+    }\n+}"
  },
  {
    "sha": "245181d982de84c92b7f5fc8005c798e106a8a55",
    "filename": "lesson4/hw1/Main.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson4/hw1/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson4/hw1/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson4/hw1/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,57 @@\n+package lesson4.hw1;\n+\n+public class Main {\n+    private static final Object monitor = new Object();\n+\n+    public static void main(String[] args) {\n+        new Thread(() -> {\n+            synchronized (monitor) {\n+                for (int i = 0; i < 5; i++) {\n+                    System.out.println(\"A\");\n+\n+                    try {\n+                        monitor.wait();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+\n+                    monitor.notify();\n+                }\n+            }\n+        }).start();\n+\n+        new Thread(() -> {\n+            synchronized (monitor) {\n+                for (int i = 0; i < 5; i++) {\n+                    System.out.println(\"B\");\n+\n+                    try {\n+                        monitor.wait();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+\n+                    monitor.notify();\n+                }\n+            }\n+        }).start();\n+\n+        new Thread(() -> {\n+            synchronized (monitor) {\n+                for (int i = 0; i < 5; i++) {\n+                    System.out.println(\"C\");\n+\n+                    monitor.notify();\n+\n+                    try {\n+                        monitor.wait();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+\n+\n+                }\n+            }\n+        }).start();\n+    }\n+}"
  },
  {
    "sha": "d42d2f7225c8b904532a1fada902340229685d5e",
    "filename": "lesson4/hw2/Main.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson4/hw2/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson4/hw2/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson4/hw2/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,16 @@\n+package lesson4.hw2;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class Main {\n+    private static ExecutorService executorService;\n+\n+    public static void main(String[] args) {\n+        executorService = Executors.newSingleThreadExecutor();\n+\n+        executorService.execute(new MyClassThread());\n+\n+        executorService.shutdown();\n+    }\n+}"
  },
  {
    "sha": "5dbf6e1a984d5b0095461f967688a6e8ac150e4f",
    "filename": "lesson4/hw2/MyClassThread.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson4/hw2/MyClassThread.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson4/hw2/MyClassThread.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson4/hw2/MyClassThread.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,8 @@\n+package lesson4.hw2;\n+\n+public class MyClassThread implements Runnable {\n+    @Override\n+    public void run() {\n+        System.out.println(\"Server Started.\");\n+    }\n+}"
  },
  {
    "sha": "ff82f9bf81b550064fc7dad5f4fc439df397c8d1",
    "filename": "lesson5/Car.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Car.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Car.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson5/Car.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,68 @@\n+package lesson5;\n+\n+import java.util.concurrent.Semaphore;\n+\n+public class Car implements Runnable {\n+    private static Car winner;\n+    private final Semaphore startLine, finishLine;\n+\n+    private static int CARS_COUNT;\n+\n+    static {\n+        CARS_COUNT = 0;\n+    }\n+\n+    private Race race;\n+    private int speed;\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public int getSpeed() {\n+        return speed;\n+    }\n+\n+    public Car(Race race, int speed, Semaphore startLine, Semaphore finishLine) {\n+        this.race = race;\n+        this.speed = speed;\n+        CARS_COUNT++;\n+        this.name = \"Участник #\" + CARS_COUNT;\n+        this.startLine = startLine;\n+        this.finishLine = finishLine;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            System.out.println(this.name + \" готовится\");\n+            Thread.sleep(500 + (int) (Math.random() * 800));\n+            System.out.println(this.name + \" готов\");\n+\n+\n+            startLine.acquire();\n+\n+            while (true) {\n+                if (startLine.availablePermits() <= 0) {\n+                    startLine.release();\n+                    break;\n+                }\n+            }\n+\n+            for (int i = 0; i < race.getStages().size(); i++) {\n+                race.getStages().get(i).go(this);\n+            }\n+\n+            System.out.println(this.name + \" пришел к финишу!\");\n+            if (winner == null) {\n+                winner = this;\n+                System.out.println(this.name + \" WIN!\");\n+            }\n+\n+            finishLine.acquire();\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "c597726a12b87cc93d0c6393669381cc9870d643",
    "filename": "lesson5/Main.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Main.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Main.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson5/Main.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,37 @@\n+package lesson5;\n+\n+import java.util.concurrent.Semaphore;\n+\n+public class Main {\n+    public static final int CARS_COUNT = 4;\n+    public static final int CARS_COUNT_IN_TUNNEL = CARS_COUNT / 2;\n+    private static final Semaphore START_LINE = new Semaphore(CARS_COUNT);\n+    private static final Semaphore FINISH_LINE = new Semaphore(CARS_COUNT, true);\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!\");\n+        Race race = new Race(new Road(60, CARS_COUNT), new Tunnel(80, CARS_COUNT_IN_TUNNEL), new Road(40, CARS_COUNT));\n+        Car[] cars = new Car[CARS_COUNT];\n+        for (int i = 0; i < cars.length; i++) {\n+            cars[i] = new Car(race, 20 + (int) (Math.random() * 10), START_LINE, FINISH_LINE);\n+        }\n+        for (int i = 0; i < cars.length; i++) {\n+            new Thread(cars[i]).start();\n+        }\n+\n+        while (true) { // ждем пока машины займут все места на старте\n+            if (START_LINE.availablePermits() <= 0) {\n+                START_LINE.release(CARS_COUNT);\n+                break;\n+            }\n+        }\n+        System.out.println(\"ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!\");\n+\n+        while (true) { // ждем пока все машины пересекут финишную линию\n+            if (FINISH_LINE.availablePermits() <= 0) {\n+                break;\n+            }\n+        }\n+        System.out.println(\"ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!\");\n+    }\n+}"
  },
  {
    "sha": "f45ba72198adaa7db529f4bc71252ec2b3b2680b",
    "filename": "lesson5/Race.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Race.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Race.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson5/Race.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,12 @@\n+package lesson5;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+public class Race {\n+    private ArrayList<Stage> stages;\n+    public ArrayList<Stage> getStages() { return stages; }\n+    public Race(Stage... stages) {\n+        this.stages = new ArrayList<>(Arrays.asList(stages));\n+    }\n+}"
  },
  {
    "sha": "bea655fce34e5b541d1d984539a28b2fa3334add",
    "filename": "lesson5/Road.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Road.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Road.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson5/Road.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,19 @@\n+package lesson5;\n+\n+public class Road extends Stage {\n+    public Road(int length, int carsCountInStage) {\n+        this.length = length;\n+        this.carsCountInStage = carsCountInStage;\n+        this.description = \"Дорога \" + length + \" метров\";\n+    }\n+    @Override\n+    public void go(Car c) {\n+        try {\n+            System.out.println(c.getName() + \" начал этап: \" + description);\n+            Thread.sleep(length / c.getSpeed() * 1000);\n+            System.out.println(c.getName() + \" закончил этап: \" + description);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "55e663a974865a6f47a6a02889ad46ff155ca8c8",
    "filename": "lesson5/Stage.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Stage.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Stage.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson5/Stage.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,15 @@\n+package lesson5;\n+\n+public abstract class Stage {\n+    protected int length, carsCountInStage;\n+    protected String description;\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public int getCarsCountInStage() {\n+        return carsCountInStage;\n+    }\n+\n+    public abstract void go(Car c);\n+}"
  },
  {
    "sha": "85678e88f7334631f07cee74be329a2e1f2d7c8c",
    "filename": "lesson5/Tunnel.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/BlackTok/level3/blob/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Tunnel.java",
    "raw_url": "https://github.com/BlackTok/level3/raw/a3f1f03199063e887d93bd79b230081cb6be3fb5/lesson5/Tunnel.java",
    "contents_url": "https://api.github.com/repos/BlackTok/level3/contents/lesson5/Tunnel.java?ref=a3f1f03199063e887d93bd79b230081cb6be3fb5",
    "patch": "@@ -0,0 +1,32 @@\n+package lesson5;\n+\n+import java.util.concurrent.Semaphore;\n+\n+public class Tunnel extends Stage {\n+    private Semaphore tunnel;\n+\n+    public Tunnel(int length, int carsCountInStage) {\n+        this.length = length;\n+        this.carsCountInStage = carsCountInStage;\n+        this.description = \"Тоннель \" + length + \" метров\";\n+        this.tunnel = new Semaphore(carsCountInStage);\n+    }\n+    @Override\n+    public void go(Car c) {\n+        try {\n+            try {\n+                System.out.println(c.getName() + \" готовится к этапу(ждет): \" + description);\n+                tunnel.acquire();\n+                System.out.println(c.getName() + \" начал этап: \" + description);\n+                Thread.sleep(length / c.getSpeed() * 1000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            } finally {\n+                System.out.println(c.getName() + \" закончил этап: \" + description);\n+                tunnel.release();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}"
  }
]
