[
  {
    "sha": "bbc9ae7e4ec2a0782618630f7e59cfd3afb1e3a5",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/README.md",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/README.md",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/README.md?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -215,12 +215,14 @@ Flint will then automatically bind the correct implementation for the running\n version.\n \n ```java\n-@Implement(value = StuffDoer.class, version = \"1.15.2\")\n+// Class in 1.15.2 source set\n+@Implement(StuffDoer.class)\n public class VersionedStuffDoer implements StuffDoer {\n \n   @Override\n   public void doStuff() {\n-    // Implementation for Minecraft 1.15.2\n+    // Since the class is in the 1.15.2 source set, this\n+    // implementation will only be used for 1.15.2\n   }\n }\n ```"
  },
  {
    "sha": "68c1f4cba5f3bf5af6931db3e7c9429d48998e14",
    "filename": "annotation-processing/autoload/src/main/java/net/flintmc/processing/autoload/DetectableAnnotationProcessor.java",
    "status": "modified",
    "additions": 111,
    "deletions": 35,
    "changes": 146,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/autoload/src/main/java/net/flintmc/processing/autoload/DetectableAnnotationProcessor.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/autoload/src/main/java/net/flintmc/processing/autoload/DetectableAnnotationProcessor.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/annotation-processing/autoload/src/main/java/net/flintmc/processing/autoload/DetectableAnnotationProcessor.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -25,33 +25,37 @@\n import com.squareup.javapoet.ClassName;\n import com.squareup.javapoet.MethodSpec;\n import com.squareup.javapoet.ParameterizedTypeName;\n-import java.lang.annotation.Repeatable;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import javax.lang.model.element.AnnotationMirror;\n-import javax.lang.model.element.AnnotationValue;\n-import javax.lang.model.element.AnnotationValueVisitor;\n-import javax.lang.model.element.Element;\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.Modifier;\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.element.VariableElement;\n-import javax.lang.model.type.ArrayType;\n-import javax.lang.model.type.DeclaredType;\n-import javax.lang.model.type.TypeMirror;\n import net.flintmc.processing.Processor;\n import net.flintmc.processing.ProcessorState;\n import net.flintmc.util.commons.Pair;\n import net.flintmc.util.commons.annotation.AnnotationMirrorUtil;\n+import javax.lang.model.element.*;\n+import javax.lang.model.type.ArrayType;\n+import javax.lang.model.type.DeclaredType;\n+import javax.lang.model.type.TypeMirror;\n+import java.lang.annotation.Repeatable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n @AutoService(Processor.class)\n public class DetectableAnnotationProcessor implements Processor {\n \n+  /**\n+   * This option is passed to the processor by the gradle plugin, SO IF THIS IS EVER CHANGED, KEEP\n+   * IT IN SYNC WITH THE PLUGIN!\n+   *\n+   * <p>Contains the current minecraft version the processor is processing sources for, if\n+   * available\n+   */\n+  private static final String MINECRAFT_VERSION_OPTION = \"net.flintmc.minecraft.version\";\n+\n+  private static final String METAPROGRAMMING_PACKAGE = \"net.flintmc.metaprogramming\";\n+  private static final String ANNOTATION_META_CLASS = \"AnnotationMeta\";\n+  private static final String DETECTABLE_ANNOTATION_PROVIDER_CLASS = \"DetectableAnnotationProvider\";\n+  private static final String DETECTABLE_ANNOTATION_CLASS = \"DetectableAnnotation\";\n+  private static final String REPEATING_DETECTABLE_ANNOTATION_CLASS = \"RepeatingDetectableAnnotation\";\n+  private static final String PACKAGE_META_CLASS = \"PackageMeta\";\n+\n   /**\n    * Template to instantiate an annotation.\n    */\n@@ -80,28 +84,39 @@\n           + \"   javax.lang.model.element.ElementKind.${ELEMENT_KIND}, \\n\"\n           + \"   ${IDENTIFIER}, \\n\"\n           + \"   ${ANNOTATION}, \\n\"\n+          + \"   ${VERSION}, \\n\"\n+          + \"   ${PACKAGE_META}, \\n\"\n           + \"new AnnotationMeta[]{${META_DATA}})\";\n \n   /**\n    * Template to instantiate a class identifier\n    */\n   private static final String ANNOTATION_META_CLASS_IDENTIFIER_TEMPLATE =\n-      \"new net.flintmc.processing.autoload.identifier.ClassIdentifier(\\\"${TYPE_NAME}\\\")\";\n+      \"new net.flintmc.metaprogramming.identifier.ClassIdentifier(\\\"${TYPE_NAME}\\\")\";\n \n   /**\n    * Template to instantiate a method identifier\n    */\n   private static final String ANNOTATION_META_METHOD_IDENTIFIER_TEMPLATE =\n-      \"new net.flintmc.processing.autoload.identifier.MethodIdentifier(\\\"${OWNER_NAME}\\\", \\\"${NAME}\\\", new String[]{${PARAMETERS}})\";\n+      \"new net.flintmc.metaprogramming.identifier.MethodIdentifier(\\\"${OWNER_NAME}\\\", \\\"${NAME}\\\", new String[]{${PARAMETERS}})\";\n \n   private static final String ANNOTATION_META_FIELD_IDENTIFIER_TEMPLATE =\n-      \"new net.flintmc.processing.autoload.identifier.FieldIdentifier(\\\"${OWNER_NAME}\\\", \\\"${NAME}\\\")\";\n+      \"new net.flintmc.metaprogramming.identifier.FieldIdentifier(\\\"${OWNER_NAME}\\\", \\\"${NAME}\\\")\";\n \n   private static final String ANNOTATION_META_CONSTRUCTOR_IDENTIFIER_TEMPLATE =\n-      \"new net.flintmc.processing.autoload.identifier.ConstructorIdentifier(\\\"${OWNER_NAME}\\\", new String[]{${PARAMETERS}})\";\n+      \"new net.flintmc.metaprogramming.identifier.ConstructorIdentifier(\\\"${OWNER_NAME}\\\", new String[]{${PARAMETERS}})\";\n+\n+  private static final String PACKAGE_META_GETTER_TEMPLATE =\n+      metaprogrammingClass(PACKAGE_META_CLASS) + \".of(${GROUP}, ${NAME}, ${VERSION})\";\n \n   private final Collection<String> found;\n \n+  private String minecraftVersion;\n+\n+  private String packageGroup;\n+  private String packageName;\n+  private String packageVersion;\n+\n   /**\n    * Constructs a new {@link DetectableAnnotationProcessor}, expected to be called by a {@link\n    * java.util.ServiceLoader}\n@@ -110,13 +125,36 @@ public DetectableAnnotationProcessor() {\n     this.found = new ArrayList<>();\n   }\n \n+  @Override\n+  public void handleOptions(Map<String, String> options) {\n+    if (options.containsKey(MINECRAFT_VERSION_OPTION)) {\n+      // Wrap in quotation marks since this is used for code generation\n+      minecraftVersion = stringLiteral(options.get(MINECRAFT_VERSION_OPTION));\n+    } else {\n+      // Literal \"null\" since this is used for code generation\n+      minecraftVersion = \"null\";\n+    }\n+\n+    packageGroup = stringLiteral(\n+        options.getOrDefault(ProcessorState.PACKAGE_GROUP_OPTION, \"unknown\"));\n+    packageName = stringLiteral(\n+        options.getOrDefault(ProcessorState.PACKAGE_NAME_OPTION, \"unknown\"));\n+    packageVersion = stringLiteral(\n+        options.getOrDefault(ProcessorState.PACKAGE_VERSION_OPTION, \"unknown\"));\n+  }\n+\n+  @Override\n+  public boolean shouldFlush() {\n+    return !found.isEmpty();\n+  }\n+\n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public MethodSpec.Builder createMethod() {\n     ClassName listClass = ClassName.get(List.class);\n-    ClassName foundAnnotationClass = ClassName.get(AnnotationMeta.class);\n+    ClassName foundAnnotationClass = ClassName.get(METAPROGRAMMING_PACKAGE, ANNOTATION_META_CLASS);\n \n     // Create a method with the signature\n     return MethodSpec.methodBuilder(\"register\")\n@@ -131,7 +169,7 @@ public DetectableAnnotationProcessor() {\n    */\n   @Override\n   public ClassName getGeneratedClassSuperClass() {\n-    return ClassName.get(DetectableAnnotationProvider.class);\n+    return ClassName.get(METAPROGRAMMING_PACKAGE, DETECTABLE_ANNOTATION_PROVIDER_CLASS);\n   }\n \n   /**\n@@ -141,12 +179,15 @@ public ClassName getGeneratedClassSuperClass() {\n   public void accept(TypeElement annotationType) {\n \n     // We dont want to discover annotation types without DetectableAnnotation\n-    if (annotationType.getAnnotation(DetectableAnnotation.class) != null) {\n+    if (AnnotationMirrorUtil.hasMirrorFor(metaprogrammingClass(DETECTABLE_ANNOTATION_CLASS),\n+        annotationType.getAnnotationMirrors())) {\n       acceptDetectableAnnotation(annotationType);\n     }\n \n     // We dont want to discover annotation types without RepeatingDetectableAnnotation\n-    if (annotationType.getAnnotation(RepeatingDetectableAnnotation.class) != null) {\n+    if (AnnotationMirrorUtil\n+        .hasMirrorFor(metaprogrammingClass(REPEATING_DETECTABLE_ANNOTATION_CLASS),\n+            annotationType.getAnnotationMirrors())) {\n       acceptRepeatableDetectableAnnotation(annotationType);\n     }\n   }\n@@ -157,7 +198,7 @@ private void acceptRepeatableDetectableAnnotation(TypeElement annotationType) {\n         ProcessorState.getInstance()\n             .getProcessingEnvironment()\n             .getElementUtils()\n-            .getTypeElement(\"net.flintmc.processing.autoload.RepeatingDetectableAnnotation\");\n+            .getTypeElement(\"net.flintmc.metaprogramming.RepeatingDetectableAnnotation\");\n \n     // Get the values of the RepeatingDetectableAnnotation at the instance on the annotationType\n     Map<String, AnnotationValue> repeatingDetectableAnnotationValues =\n@@ -207,7 +248,7 @@ private void acceptDetectableAnnotation(TypeElement annotationType) {\n         ProcessorState.getInstance()\n             .getProcessingEnvironment()\n             .getElementUtils()\n-            .getTypeElement(\"net.flintmc.processing.autoload.DetectableAnnotation\");\n+            .getTypeElement(\"net.flintmc.metaprogramming.DetectableAnnotation\");\n \n     // Get the values of the DetectableAnnotation at the instance on the annotationType\n     Map<String, AnnotationValue> detectableAnnotationValues =\n@@ -254,7 +295,9 @@ private String parseAnnotation(\n       Element annotatedElement,\n       Map<ExecutableElement, AnnotationValue> annotationValues) {\n     // meta is optional, so if it is not present, we dont take any action\n-    if (annotationType.getAnnotation(DetectableAnnotation.class) == null) {\n+    if (!AnnotationMirrorUtil\n+        .hasMirrorFor(metaprogrammingClass(DETECTABLE_ANNOTATION_CLASS),\n+            annotationType.getAnnotationMirrors())) {\n       return \"\";\n     }\n \n@@ -266,6 +309,8 @@ private String parseAnnotation(\n                 \"ANNOTATION\",\n                 createAnnotation(annotationType, annotationValues, annotationType.toString()))\n             .put(\"META_DATA\", createMetaData(annotationType, annotatedElement))\n+            .put(\"VERSION\", minecraftVersion)\n+            .put(\"PACKAGE_META\", createPackageMeta())\n             .build(),\n         ANNOTATION_META_TEMPLATE);\n   }\n@@ -292,6 +337,14 @@ private String createMetaData(TypeElement annotationType, Element annotatedEleme\n     return output.toString();\n   }\n \n+  private String createPackageMeta() {\n+    return handleTemplate(ImmutableMap.<String, String>builder()\n+        .put(\"GROUP\", packageGroup)\n+        .put(\"NAME\", packageName)\n+        .put(\"VERSION\", packageVersion)\n+        .build(), PACKAGE_META_GETTER_TEMPLATE);\n+  }\n+\n   private String createAnnotationIdentifier(Element annotatedElement) {\n     switch (annotatedElement.getKind()) {\n       case CLASS:\n@@ -396,7 +449,7 @@ private String createAnnotationMetaClassIdentifier(TypeElement typeElement) {\n    * <p>Currently only metadata that is present on the same element as their parent can be\n    * obtained.\n    *\n-   * @param annotationType   the parent annotation type to look for. Must be annotated with {@link\n+   * @param annotationType   the parent annotation type to look for. Must be annotated with {@code\n    *                         DetectableAnnotation}\n    * @param annotatedElement the location where to look for annotationType\n    * @return the direct metadata for annotationType on annotatedElement\n@@ -412,7 +465,7 @@ private String createAnnotationMetaClassIdentifier(TypeElement typeElement) {\n             ProcessorState.getInstance()\n                 .getProcessingEnvironment()\n                 .getElementUtils()\n-                .getTypeElement(\"net.flintmc.processing.autoload.DetectableAnnotation\"));\n+                .getTypeElement(\"net.flintmc.metaprogramming.DetectableAnnotation\"));\n \n     // Collect all possible meta types\n     Collection<TypeElement> annotationMetaTypes =\n@@ -449,7 +502,9 @@ private String createAnnotationMetaClassIdentifier(TypeElement typeElement) {\n                           .get(\"value\")\n                           .getValue())\n                       .asElement();\n-          if (repeatingAnnotationType.getAnnotation(RepeatingDetectableAnnotation.class) == null) {\n+          if (!AnnotationMirrorUtil\n+              .hasMirrorFor(metaprogrammingClass(REPEATING_DETECTABLE_ANNOTATION_CLASS),\n+                  repeatingAnnotationType.getAnnotationMirrors())) {\n             throw new IllegalStateException(\n                 \"Repeating annotation \"\n                     + repeatingAnnotationType\n@@ -481,7 +536,9 @@ private String createAnnotationMetaClassIdentifier(TypeElement typeElement) {\n           continue;\n         }\n \n-        if (annotationMetaType.getAnnotation(DetectableAnnotation.class) != null) {\n+        if (AnnotationMirrorUtil\n+            .hasMirrorFor(metaprogrammingClass(DETECTABLE_ANNOTATION_CLASS),\n+                annotationMetaType.getAnnotationMirrors())) {\n           metaClasses.add(new Pair<>(potentialElement, annotationMetaMirror));\n         }\n       }\n@@ -674,9 +731,28 @@ private String handleTemplate(Map<String, String> data, String template) {\n   /**\n    * {@inheritDoc}\n    */\n-  public void finish(MethodSpec.Builder targetMethod) {\n+  public void flush(MethodSpec.Builder targetMethod) {\n     // Add sourcecode to auto generated class\n     this.found.forEach(targetMethod::addStatement);\n     this.found.clear();\n   }\n+\n+  @Override\n+  public Set<String> options() {\n+    Set<String> options = new HashSet<>();\n+    options.add(MINECRAFT_VERSION_OPTION);\n+    options.add(ProcessorState.PACKAGE_GROUP_OPTION);\n+    options.add(ProcessorState.PACKAGE_NAME_OPTION);\n+    options.add(ProcessorState.PACKAGE_VERSION_OPTION);\n+\n+    return options;\n+  }\n+\n+  private static String metaprogrammingClass(String className) {\n+    return METAPROGRAMMING_PACKAGE + \".\" + className;\n+  }\n+\n+  private static String stringLiteral(String value) {\n+    return '\"' + value + '\"';\n+  }\n }"
  },
  {
    "sha": "2099a50f0d918788d263996d645cb2d79aca64ad",
    "filename": "annotation-processing/src/main/java/net/flintmc/processing/FlintAnnotationProcessor.java",
    "status": "modified",
    "additions": 23,
    "deletions": 9,
    "changes": 32,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/FlintAnnotationProcessor.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/FlintAnnotationProcessor.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/annotation-processing/src/main/java/net/flintmc/processing/FlintAnnotationProcessor.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -39,22 +39,29 @@\n  */\n @AutoService(Processor.class)\n public class FlintAnnotationProcessor extends AbstractProcessor {\n+\n   // Internal state of the processor\n   private final ProcessorState state;\n \n-  /** Instantiates the annotation processor. This is called by the java compiler. */\n+  /**\n+   * Instantiates the annotation processor. This is called by the java compiler.\n+   */\n   public FlintAnnotationProcessor() {\n     this.state = new ProcessorState();\n   }\n \n-  /** {@inheritDoc} */\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n   public synchronized void init(ProcessingEnvironment processingEnv) {\n     super.init(processingEnv);\n     state.init(processingEnv);\n   }\n \n-  /** {@inheritDoc} */\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n   public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n     state.round(roundEnv);\n@@ -76,25 +83,32 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n       throw exception;\n     }\n \n-    if (roundEnv.processingOver()) {\n-      // We have reached the last round, finalize the state and write out the generated files\n-      state.finish();\n-    }\n+    // Notify the processor state to flush code generation\n+    state.flushRound();\n \n     return true;\n   }\n \n-  /** {@inheritDoc} */\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n   public SourceVersion getSupportedSourceVersion() {\n     // We always support the latest version\n     return SourceVersion.latestSupported();\n   }\n \n-  /** {@inheritDoc} */\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n   public Set<String> getSupportedAnnotationTypes() {\n     // Process every annotation\n     return new HashSet<>(Collections.singletonList(\"*\"));\n   }\n+\n+  @Override\n+  public Set<String> getSupportedOptions() {\n+    return state.collectSupportedOptions();\n+  }\n }"
  },
  {
    "sha": "959b4405fe8b4366c2455d2848ac3d55b45461f5",
    "filename": "annotation-processing/src/main/java/net/flintmc/processing/Processor.java",
    "status": "modified",
    "additions": 53,
    "deletions": 9,
    "changes": 62,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/Processor.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/Processor.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/annotation-processing/src/main/java/net/flintmc/processing/Processor.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -21,15 +21,19 @@\n \n import com.squareup.javapoet.ClassName;\n import com.squareup.javapoet.MethodSpec;\n-\n+import com.squareup.javapoet.MethodSpec.Builder;\n import javax.lang.model.element.TypeElement;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Service interface for annotation processors controlled by the {@link FlintAnnotationProcessor}.\n  * To hook into this processor, use a java service file, it will then be loaded by the default\n  * {@link java.util.ServiceLoader}{@literal <}{@link Processor}{@literal >}.\n  */\n public interface Processor {\n+\n   /**\n    * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} for every\n    * annotation found.\n@@ -39,28 +43,68 @@\n   void accept(TypeElement typeElement);\n \n   /**\n-   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} in the\n-   * final round to allow generation of code.\n+   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} after\n+   * every round to determine whether the processor should generate source files.\n+   *\n+   * @return {@code true} if {@link #flush(Builder)} can be called, {@code false} otherwise\n+   * @see #flush(Builder)\n+   */\n+  boolean shouldFlush();\n+\n+  /**\n+   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} after\n+   * every round to allow code generation.\n+   *\n+   * <p> Only called if {@link #shouldFlush()} returned {@code true}\n    *\n    * @return The method that should be added to the autoload class\n    */\n   MethodSpec.Builder createMethod();\n \n   /**\n-   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} in the\n-   * final round to determine, which superclass should be added to the class generated for the\n+   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} after\n+   * every round to determine which superclass should be added to the class generated for the\n    * autoload method.\n    *\n+   * <p> Only called if {@link #shouldFlush()} returned {@code true}\n+   *\n    * @return The name of the class to add as a super class\n    */\n   ClassName getGeneratedClassSuperClass();\n \n   /**\n-   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} in the\n-   * final round to finalize the code generation of the given method.\n+   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} if {@link\n+   * #shouldFlush()} returned {@code true}. This method allows the processor to add its statements\n+   * to the provided method and clear its internal state.\n+   *\n+   * <p> Only called if {@link #shouldFlush()} returned {@code true}\n    *\n    * @param targetMethod The method to finalize, will always be the method returned by {@link\n-   *     #createMethod()}\n+   *                     #createMethod()}\n+   */\n+  void flush(MethodSpec.Builder targetMethod);\n+\n+  /**\n+   * Called by the {@link ProcessorState} of the current {@link FlintAnnotationProcessor} previous\n+   * to any call to {@link #accept(TypeElement)} to prepare the processor for setting up the\n+   * options.\n+   *\n+   * <p>This will only be called if {@link #options()} returned non-empty set, and the map will\n+   * only contain the options specified in the Set (if they have been set at all!).\n+   *\n+   * @param options The options which have been set and registered using {@link #options()}\n+   * @see #options()\n+   */\n+  default void handleOptions(Map<String, String> options) {\n+  }\n+\n+  /**\n+   * Retrieves the options the processor supports which can then be passed to the compiler.\n+   *\n+   * @return The options this processor supports\n+   * @see #handleOptions(Map)\n    */\n-  void finish(MethodSpec.Builder targetMethod);\n+  default Set<String> options() {\n+    return Collections.emptySet();\n+  }\n }"
  },
  {
    "sha": "104ec3cd45542be72ed283ea4f913e7c1e2dc4fa",
    "filename": "annotation-processing/src/main/java/net/flintmc/processing/ProcessorState.java",
    "status": "modified",
    "additions": 135,
    "deletions": 7,
    "changes": 142,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/ProcessorState.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/ProcessorState.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/annotation-processing/src/main/java/net/flintmc/processing/ProcessorState.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -22,7 +22,6 @@\n import com.squareup.javapoet.*;\n import net.flintmc.processing.exception.ProcessingException;\n import org.apache.commons.io.IOUtils;\n-\n import javax.annotation.Generated;\n import javax.annotation.processing.Filer;\n import javax.annotation.processing.ProcessingEnvironment;\n@@ -43,22 +42,64 @@\n  * <p>This class is a singleton.\n  */\n public class ProcessorState {\n+\n+  /**\n+   * This option is passed to the processor by the gradle plugin, SO IF THIS IS EVER CHANGED, KEEP\n+   * IT IN SYNC WITH THE PLUGIN!\n+   *\n+   * <p>Contains the group id of the package currently being compiled\n+   */\n+  public static final String PACKAGE_GROUP_OPTION = \"net.flintmc.package.group\";\n+\n+  /**\n+   * This option is passed to the processor by the gradle plugin, SO IF THIS IS EVER CHANGED, KEEP\n+   * IT IN SYNC WITH THE PLUGIN!\n+   *\n+   * <p>Contains the name of the package currently being compiled\n+   */\n+  public static final String PACKAGE_NAME_OPTION = \"net.flintmc.package.name\";\n+\n+  /**\n+   * This option is passed to the processor by the gradle plugin, SO IF THIS IS EVER CHANGED, KEEP\n+   * IT IN SYNC WITH THE PLUGIN!\n+   *\n+   * <p>Contains the version of the package currently being compiled\n+   */\n+  public static final String PACKAGE_VERSION_OPTION = \"net.flintmc.package.version\";\n+\n+  /**\n+   * This option is passed to the processor by the gradle plugin, SO IF THIS IS EVER CHANGED, KEEP\n+   * IT IN SYNC WITH THE PLUGIN!\n+   *\n+   * <p>Contains the source set currently being compiled\n+   */\n+  public static final String SOURCE_SET_OPTION = \"net.flintmc.sourceSet\";\n+\n   // Singleton instance\n   private static ProcessorState instance;\n \n   // The child processors of the FlintAnnotationProcessor, discovered via a ServiceLoader\n   private final Collection<Processor> processors;\n+  private final Map<Processor, Set<String>> registeredOptions;\n \n   // State of the java processing environment\n   private ProcessingEnvironment processingEnvironment;\n   private RoundEnvironment currentRoundEnvironment;\n \n+  private String packageName;\n+  private String packageGroup;\n+  private String packageVersion;\n+  private String sourceSet;\n+\n+  private int generationCounter = 0;\n+\n   /**\n    * Constructs a new {@link ProcessorState}, setting the instance field and loading all available\n    * {@link Processor} using a {@link ServiceLoader}\n    */\n   public ProcessorState() {\n     this.processors = new HashSet<>();\n+    this.registeredOptions = new HashMap<>();\n     ServiceLoader.load(Processor.class, getClass().getClassLoader()).forEach(processors::add);\n     instance = this;\n   }\n@@ -77,7 +118,7 @@ public static ProcessorState getInstance() {\n    * only be called once.\n    *\n    * @param processingEnvironment The processing environment used for the entire duration of\n-   *     processing\n+   *                              processing\n    * @throws IllegalStateException If the processing environment has been set already\n    */\n   public void init(ProcessingEnvironment processingEnvironment) {\n@@ -86,6 +127,34 @@ public void init(ProcessingEnvironment processingEnvironment) {\n     }\n \n     this.processingEnvironment = processingEnvironment;\n+    registerOptions();\n+\n+    Map<String, String> environmentOptions = processingEnvironment.getOptions();\n+    this.packageGroup = toJavaIdentifier(\n+        environmentOptions.getOrDefault(PACKAGE_GROUP_OPTION, \"undefined\"));\n+    this.packageName = toJavaIdentifier(\n+        environmentOptions.getOrDefault(PACKAGE_NAME_OPTION, \"undefined\"));\n+    this.packageVersion = toJavaIdentifier(\n+        environmentOptions.getOrDefault(PACKAGE_VERSION_OPTION, \"undefined\"));\n+    this.sourceSet = toJavaIdentifier(environmentOptions.getOrDefault(SOURCE_SET_OPTION, \"main\"));\n+\n+    // Let registered processors handle their respective options\n+    for (Map.Entry<Processor, Set<String>> entry : registeredOptions.entrySet()) {\n+      Processor processor = entry.getKey();\n+      Set<String> options = entry.getValue();\n+\n+      Map<String, String> optionValues = new HashMap<>();\n+\n+      // Copy all requested values over\n+      for (String requested : options) {\n+        if (environmentOptions.containsKey(requested)) {\n+          optionValues.put(requested, environmentOptions.get(requested));\n+        }\n+      }\n+\n+      // Notify the processor\n+      processor.handleOptions(optionValues);\n+    }\n   }\n \n   /**\n@@ -132,8 +201,12 @@ public RoundEnvironment getCurrentRoundEnvironment() {\n    * Called by the {@link FlintAnnotationProcessor} to signal that the last round is running and\n    * everything should be finalized and written to disk.\n    */\n-  public void finish() {\n+  public void flushRound() {\n     for (Processor processor : processors) {\n+      if (!processor.shouldFlush()) {\n+        continue;\n+      }\n+\n       MethodSpec.Builder method = processor.createMethod();\n       Filer filer = processingEnvironment.getFiler();\n       ClassName autoLoadProviderClass = processor.getGeneratedClassSuperClass();\n@@ -142,7 +215,7 @@ public void finish() {\n       MethodSpec constructor =\n           MethodSpec.methodBuilder(\"<init>\").addModifiers(Modifier.PUBLIC).build();\n \n-      processor.finish(method);\n+      processor.flush(method);\n \n       MethodSpec registerAutoLoadMethod = method.build();\n \n@@ -153,19 +226,30 @@ public void finish() {\n               .addMember(\"value\", \"$S\", FlintAnnotationProcessor.class.getName())\n               .build();\n \n+      // Create an @SuppressWarnings annotation and fill it with \"all\"\n+      AnnotationSpec suppressWarningsAnnotation = AnnotationSpec.builder(SuppressWarnings.class)\n+          .addMember(\"value\", \"$S\", \"unchecked\")\n+          .build();\n+\n       // Generate a class with a random name to avoid collisions\n       String generatedClassName =\n           processor.getGeneratedClassSuperClass().simpleName()\n-              + Math.abs(System.nanoTime())\n               + \"_\"\n-              + System.currentTimeMillis()\n+              + packageGroup\n+              + \"$\"\n+              + packageName\n+              + \"$\"\n+              + packageVersion\n+              + \"$\"\n+              + sourceSet\n               + \"_\"\n-              + UUID.randomUUID().toString().replace(\"-\", \"\");\n+              + (generationCounter++);\n \n       // Generate the final class\n       TypeSpec generatedType =\n           TypeSpec.classBuilder(generatedClassName)\n               .addAnnotation(generatedAnnotation)\n+              .addAnnotation(suppressWarningsAnnotation)\n               .addModifiers(Modifier.PUBLIC)\n               .addSuperinterface(autoLoadProviderClass)\n               .addMethod(constructor)\n@@ -208,4 +292,48 @@ public void finish() {\n       }\n     }\n   }\n+\n+  /**\n+   * Collects all options supported by all sub-processors.\n+   *\n+   * @return The collected options\n+   */\n+  public Set<String> collectSupportedOptions() {\n+    Set<String> allOptions = new HashSet<>();\n+\n+    for (Set<String> otherOptions : registeredOptions.values()) {\n+      allOptions.addAll(otherOptions);\n+    }\n+\n+    // Own options\n+    allOptions.add(PACKAGE_GROUP_OPTION);\n+    allOptions.add(PACKAGE_NAME_OPTION);\n+    allOptions.add(PACKAGE_VERSION_OPTION);\n+    allOptions.add(SOURCE_SET_OPTION);\n+\n+    return allOptions;\n+  }\n+\n+  /**\n+   * Registers all options supported by processors.\n+   */\n+  private void registerOptions() {\n+    for (Processor processor : processors) {\n+      Set<String> processorOptions = processor.options();\n+\n+      if (!processorOptions.isEmpty()) {\n+        registeredOptions.put(processor, processorOptions);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Converts an arbitrary string into a Java class literal using best-effort replacement.\n+   *\n+   * @param literal The literal to convert\n+   * @return The converted literal as an identifier\n+   */\n+  private String toJavaIdentifier(String literal) {\n+    return literal.replace('.', '$').replaceAll(\"[^A-z0-9$]\", \"_\");\n+  }\n }"
  },
  {
    "sha": "5fa7a5e9b8bf32d9ba7dad1a26566e9c7529c230",
    "filename": "annotation-processing/src/main/java/net/flintmc/processing/exception/ProcessingException.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/exception/ProcessingException.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/java/net/flintmc/processing/exception/ProcessingException.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/annotation-processing/src/main/java/net/flintmc/processing/exception/ProcessingException.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -24,10 +24,10 @@\n /**\n  * Represents a general, fatal failure while processing. This should only be used for cases such as\n  * failing to write a file due to an {@link java.io.IOException} or similar, whereas invalid\n- * annotations should be signaled as errored via the current {@link\n- * javax.annotation.processing.Messager}\n+ * annotations should be signaled as errored via the current {@link javax.annotation.processing.Messager}\n  */\n public class ProcessingException extends RuntimeException {\n+\n   private final Element sourceElement;\n \n   /**\n@@ -46,7 +46,7 @@ public ProcessingException(String message) {\n    * Element} causing this exception is unknown.\n    *\n    * @param message The message to pass to the {@link RuntimeException}\n-   * @param cause The cause to pass to the {@link RuntimeException}\n+   * @param cause   The cause to pass to the {@link RuntimeException}\n    */\n   public ProcessingException(String message, Throwable cause) {\n     super(message, cause);\n@@ -57,7 +57,7 @@ public ProcessingException(String message, Throwable cause) {\n    * Creates a new {@link ProcessingException} with the specified message and an element indicating\n    * the source of the exception.\n    *\n-   * @param message The message to pass to the {@link RuntimeException}\n+   * @param message       The message to pass to the {@link RuntimeException}\n    * @param sourceElement The element during which processing the exception occurred\n    */\n   public ProcessingException(String message, Element sourceElement) {\n@@ -69,8 +69,8 @@ public ProcessingException(String message, Element sourceElement) {\n    * Creates a new {@link ProcessingException} with the specified message, a cause and an element\n    * indicating the source of the exception.\n    *\n-   * @param message The message to pass to the {@link RuntimeException}\n-   * @param cause The cause to pass to the {@link RuntimeException}\n+   * @param message       The message to pass to the {@link RuntimeException}\n+   * @param cause         The cause to pass to the {@link RuntimeException}\n    * @param sourceElement The element during which processing the exception occurred\n    */\n   public ProcessingException(String message, Throwable cause, Element sourceElement) {\n@@ -82,7 +82,7 @@ public ProcessingException(String message, Throwable cause, Element sourceElemen\n    * Retrieves the element during which processing the exception occurred.\n    *\n    * @return The element which processing caused the exception, or null if not caused by handling of\n-   *     an element\n+   * an element\n    */\n   public Element getSourceElement() {\n     return sourceElement;"
  },
  {
    "sha": "ce899b547bd08e1beee6253718de6ae542b03b38",
    "filename": "annotation-processing/src/main/resources/META-INF/gradle/incremental.annotation.processors",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/resources/META-INF/gradle/incremental.annotation.processors",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/annotation-processing/src/main/resources/META-INF/gradle/incremental.annotation.processors",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/annotation-processing/src/main/resources/META-INF/gradle/incremental.annotation.processors?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -0,0 +1 @@\n+net.flintmc.processing.FlintAnnotationProcessor,AGGREGATING\n\\ No newline at end of file"
  },
  {
    "sha": "f7fd36709bb8ed63b642f2c4e6830c45d3898165",
    "filename": "bootstrap/build.gradle.kts",
    "status": "modified",
    "additions": 15,
    "deletions": 15,
    "changes": 30,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/bootstrap/build.gradle.kts",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/bootstrap/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/bootstrap/build.gradle.kts?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -17,8 +17,6 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-import net.flintmc.gradle.extension.FlintGradleExtension.Type\n-\n plugins {\n     id(\"java-library\")\n }\n@@ -36,22 +34,24 @@ dependencies {\n \n     project.rootProject.subprojects.forEach { subProject ->\n         if (!arrayOf(\n-                \":\",\n-                \":framework\",\n-                \":render\",\n-                \":transform\",\n-                \":util\",\n-                \":minecraft\",\n-                \":minecraft:minecraft-minecraft-1-15-2\",\n-                \":minecraft:minecraft-minecraft-1-16-5\",\n-                \":bootstrap\"\n-            ).contains(subProject.path)\n+                        \":\",\n+                        \":annotation-processing\",\n+                        \":annotation-processing:annotation-processing-autoload\",\n+                        \":framework\",\n+                        \":render\",\n+                        \":transform\",\n+                        \":util\",\n+                        \":minecraft\",\n+                        \":minecraft:minecraft-minecraft-1-15-2\",\n+                        \":minecraft:minecraft-minecraft-1-16-5\",\n+                        \":bootstrap\"\n+                ).contains(subProject.path)\n         ) {\n             manifest(subProject)\n             subProject.configurations.getByName(\"runtimeClasspath\")\n-                .allDependencies.forEach {\n-                    manifest(it)\n-                }\n+                    .allDependencies.forEach {\n+                        manifest(it)\n+                    }\n         }\n     }\n "
  },
  {
    "sha": "1a79343dae64628eb679f1e9e60e5944071d5ba7",
    "filename": "build.gradle.kts",
    "status": "modified",
    "additions": 21,
    "deletions": 1,
    "changes": 22,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/build.gradle.kts",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/build.gradle.kts?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -16,6 +16,17 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n+buildscript {\n+    repositories {\n+        mavenLocal()\n+        maven {\n+            setUrl(\"https://dist.labymod.net/api/v1/maven/release\")\n+            name = \"Flint\"\n+        }\n+        mavenCentral()\n+    }\n+}\n+\n plugins {\n     id(\"net.flintmc.flint-gradle\")\n     id(\"net.minecrell.licenser\") version \"0.4.1\"\n@@ -76,7 +87,16 @@ flint {\n     flintVersion = System.getenv().getOrDefault(\"VERSION\", \"1.0.0\")\n \n     projectFilter {\n-        !arrayOf(\":\", \":framework\", \":render\", \":transform\", \":util\", \":minecraft\").contains(it.path)\n+        !arrayOf(\n+                \":\",\n+                \":annotation-processing\",\n+                \":annotation-processing:annotation-processing-autoload\",\n+                \":framework\",\n+                \":render\",\n+                \":transform\",\n+                \":util\",\n+                \":minecraft\"\n+        ).contains(it.path)\n     }\n \n     minecraftVersions(\"1.15.2\", \"1.16.5\")"
  },
  {
    "sha": "c6a3f005f1d00bb1e578115e5d4a4f2274a051e6",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/defval/mapper/DefaultAnnotationMapperRegistryService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/defval/mapper/DefaultAnnotationMapperRegistryService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/defval/mapper/DefaultAnnotationMapperRegistryService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/defval/mapper/DefaultAnnotationMapperRegistryService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -35,7 +35,7 @@\n import net.flintmc.framework.stereotype.service.CtResolver;\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n \n @Singleton\n @Implement(DefaultAnnotationMapperRegistry.class)"
  },
  {
    "sha": "e520a895ab632756e44ae505d4356884b6ded223",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigGenerationService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigGenerationService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigGenerationService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigGenerationService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -37,8 +37,8 @@\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n import net.flintmc.framework.stereotype.service.ServiceNotFoundException;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n-import net.flintmc.processing.autoload.identifier.Identifier;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n+import net.flintmc.metaprogramming.identifier.Identifier;\n \n @Singleton\n @Service(Config.class)"
  },
  {
    "sha": "77df6ed64ceeef0bf1d47f41a01541af49ac33a5",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationBinder.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationBinder.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationBinder.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationBinder.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -34,7 +34,7 @@\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n import net.flintmc.framework.stereotype.service.ServiceNotFoundException;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n \n @Singleton\n @Service("
  },
  {
    "sha": "50bd9e48292f8ac1cc28255b04beea8150e8caaf",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationMapper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 10,
    "changes": 12,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationMapper.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationMapper.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ConfigImplementationMapper.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -29,19 +29,17 @@\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.Service.State;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n \n @Singleton\n @Service(value = ConfigImplementation.class, state = State.PRE_INIT, priority = -1)\n public class ConfigImplementationMapper implements ServiceHandler<ConfigImplementation> {\n \n   private final Map<String, CtClass> implementationMappings;\n-  private final Map<String, String> launchArguments;\n \n   @Inject\n-  private ConfigImplementationMapper(@Named(\"launchArguments\") Map launchArguments) {\n+  private ConfigImplementationMapper() {\n     this.implementationMappings = new HashMap<>();\n-    this.launchArguments = launchArguments;\n   }\n \n   public Map<String, CtClass> getImplementationMappings() {\n@@ -55,12 +53,6 @@ private ConfigImplementationMapper(@Named(\"launchArguments\") Map launchArguments\n   public void discover(AnnotationMeta<ConfigImplementation> annotationMeta) {\n     ConfigImplementation annotation = annotationMeta.getAnnotation();\n \n-    String version = annotation.version();\n-\n-    if (!version.isEmpty() && !launchArguments.get(\"--game-version\").equals(version)) {\n-      return;\n-    }\n-\n     String ifc = annotation.value().getName();\n \n     this.implementationMappings.put(ifc, annotationMeta.getClassIdentifier().getLocation());"
  },
  {
    "sha": "784c693d76b1f8b6e2483895bec444124243a93b",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ImplementedConfigService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ImplementedConfigService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ImplementedConfigService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/generator/service/ImplementedConfigService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -27,7 +27,7 @@\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.Service.State;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n \n @Singleton\n @Service(value = ImplementedConfig.class, state = State.PRE_INIT, priority = -1000)"
  },
  {
    "sha": "6c587b30add1d86d47fb48943dda1244c52180ee",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/serialization/DefaultConfigSerializationService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/serialization/DefaultConfigSerializationService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/serialization/DefaultConfigSerializationService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/serialization/DefaultConfigSerializationService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -40,7 +40,7 @@\n import net.flintmc.framework.stereotype.service.CtResolver;\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n import org.apache.logging.log4j.Logger;\n import java.util.HashMap;\n import java.util.Map;"
  },
  {
    "sha": "0d81211455566451b7d5c0b6482e9d172e5b3f02",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/storage/ConfigStorageService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/storage/ConfigStorageService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/storage/ConfigStorageService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/storage/ConfigStorageService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -29,8 +29,8 @@\n import net.flintmc.framework.stereotype.service.CtResolver;\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n-import net.flintmc.processing.autoload.identifier.Identifier;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n+import net.flintmc.metaprogramming.identifier.Identifier;\n \n @Singleton\n @Service(StoragePriority.class)"
  },
  {
    "sha": "38dfd7cc9a9f504965c680a758638fff31fadc8b",
    "filename": "framework/config/src/internal/java/net/flintmc/framework/config/internal/transform/DefaultConfigTransformer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 10,
    "changes": 12,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/transform/DefaultConfigTransformer.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/internal/java/net/flintmc/framework/config/internal/transform/DefaultConfigTransformer.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/internal/java/net/flintmc/framework/config/internal/transform/DefaultConfigTransformer.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -48,7 +48,7 @@\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n import net.flintmc.framework.stereotype.service.ServiceNotFoundException;\n import net.flintmc.launcher.classloading.common.CommonClassLoader;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n import net.flintmc.transform.exceptions.ClassTransformException;\n import net.flintmc.transform.launchplugin.LateInjectedTransformer;\n import net.flintmc.transform.minecraft.MinecraftTransformer;\n@@ -70,18 +70,15 @@\n \n   private final Collection<PendingTransform> pendingTransforms;\n   private final Collection<TransformedConfigMeta> mappings;\n-  private final Map<String, String> launchArguments;\n \n   @Inject\n   private DefaultConfigTransformer(\n       ClassPool pool,\n       DefaultConfigImplementer configImplementer,\n-      ImplementedConfigService implementedService,\n-      @Named(\"launchArguments\") Map launchArguments) {\n+      ImplementedConfigService implementedService) {\n     this.pool = pool;\n     this.configImplementer = configImplementer;\n     this.implementedService = implementedService;\n-    this.launchArguments = launchArguments;\n \n     this.pendingTransforms = new HashSet<>();\n     this.mappings = new HashSet<>();\n@@ -105,7 +102,6 @@ public void discover(AnnotationMeta<ConfigImplementation> meta) throws ServiceNo\n     // implement the configs that are annotated with ImplementedConfig\n     CtClass implementation = (CtClass) meta.getIdentifier().getLocation();\n     ConfigImplementation annotation = meta.getAnnotation();\n-    String version = annotation.version();\n \n     if (!annotation.value().isAnnotationPresent(ImplementedConfig.class)) {\n       throw new ServiceNotFoundException(\n@@ -116,10 +112,6 @@ public void discover(AnnotationMeta<ConfigImplementation> meta) throws ServiceNo\n               + \"]\");\n     }\n \n-    if (!version.isEmpty() && !launchArguments.get(\"--game-version\").equals(version)) {\n-      return;\n-    }\n-\n     TransformedConfigMeta configMeta =\n         new TransformedConfigMeta(annotation.value(), implementation);\n     this.mappings.add(configMeta);"
  },
  {
    "sha": "18625edb4254fd74359e8b8a1799c93feeeababb",
    "filename": "framework/config/src/main/java/net/flintmc/framework/config/annotation/Config.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/annotation/Config.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/annotation/Config.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/main/java/net/flintmc/framework/config/annotation/Config.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -24,7 +24,7 @@\n import net.flintmc.framework.config.generator.method.ConfigObjectReference;\n import net.flintmc.framework.config.storage.ConfigStorage;\n import net.flintmc.framework.config.storage.ConfigStorageProvider;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;"
  },
  {
    "sha": "f15b68756d7db82e868bbbf27e8a15b1a5a861bd",
    "filename": "framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ConfigImplementation.java",
    "status": "modified",
    "additions": 1,
    "deletions": 10,
    "changes": 11,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ConfigImplementation.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ConfigImplementation.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ConfigImplementation.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -24,7 +24,7 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import net.flintmc.framework.config.annotation.Config;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n /**\n  * The counterpart to {@link ImplementedConfig}. Use it on the implementations of interfaces\n@@ -45,13 +45,4 @@\n    * @return The interface implemented by this class\n    */\n   Class<?> value();\n-\n-  /**\n-   * The minecraft version this {@code @Implement} applies to. If the version does not match, the\n-   * implementation is not bound.\n-   *\n-   * @return The version this {@code @Implement} applies to\n-   */\n-  String version() default \"\";\n-\n }"
  },
  {
    "sha": "c16161c8db4e1c2195d60f92ad146bebf1476212",
    "filename": "framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ImplementedConfig.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ImplementedConfig.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ImplementedConfig.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/main/java/net/flintmc/framework/config/annotation/implemented/ImplementedConfig.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -25,7 +25,7 @@\n import java.lang.annotation.Target;\n import net.flintmc.framework.config.annotation.Config;\n import net.flintmc.framework.inject.implement.Implement;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n /**\n  * Marks an interface inside of a {@link Config} as already implemented and not to be autogenerated,"
  },
  {
    "sha": "f25020c2cc668a12a1d969c9ad9f92c5b094b8f8",
    "filename": "framework/config/src/main/java/net/flintmc/framework/config/defval/mapper/DefaultAnnotationMapper.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/defval/mapper/DefaultAnnotationMapper.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/defval/mapper/DefaultAnnotationMapper.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/main/java/net/flintmc/framework/config/defval/mapper/DefaultAnnotationMapper.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -25,7 +25,7 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import net.flintmc.framework.config.defval.annotation.DefaultString;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n /**\n  * Marks an {@link DefaultAnnotationMapperHandler} to be registered in the {@link"
  },
  {
    "sha": "efafec009ee678d50f1353e2823552cffd39d4d7",
    "filename": "framework/config/src/main/java/net/flintmc/framework/config/serialization/ConfigSerializer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/serialization/ConfigSerializer.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/serialization/ConfigSerializer.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/main/java/net/flintmc/framework/config/serialization/ConfigSerializer.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -23,7 +23,7 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n /**\n  * Marks a {@link ConfigSerializationHandler} to be registered in the {@link"
  },
  {
    "sha": "90cd04394e795f586193cc5cfc868f12b21c64f2",
    "filename": "framework/config/src/main/java/net/flintmc/framework/config/storage/StoragePriority.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/storage/StoragePriority.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/config/src/main/java/net/flintmc/framework/config/storage/StoragePriority.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/config/src/main/java/net/flintmc/framework/config/storage/StoragePriority.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -24,7 +24,7 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import net.flintmc.framework.config.generator.ParsedConfig;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n /**\n  * Marks a storage to be automatically registered in the {@link ConfigStorageProvider}. If a storage"
  },
  {
    "sha": "773b2a8898c595e0ecac9f9d10079aafaad882af",
    "filename": "framework/data-generation/src/internal/java/net/flintmc/framework/generation/internal/DataService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/data-generation/src/internal/java/net/flintmc/framework/generation/internal/DataService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/data-generation/src/internal/java/net/flintmc/framework/generation/internal/DataService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/data-generation/src/internal/java/net/flintmc/framework/generation/internal/DataService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -40,7 +40,7 @@\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n import net.flintmc.framework.stereotype.service.ServiceNotFoundException;\n import net.flintmc.launcher.LaunchController;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n \n @Singleton\n @Service(value = DataFactory.class, priority = -250000, state = State.AFTER_IMPLEMENT)"
  },
  {
    "sha": "5dfc25b1add8b12e88e8b3912851fe25766e492e",
    "filename": "framework/data-generation/src/main/java/net/flintmc/framework/generation/annotation/DataFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/data-generation/src/main/java/net/flintmc/framework/generation/annotation/DataFactory.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/data-generation/src/main/java/net/flintmc/framework/generation/annotation/DataFactory.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/data-generation/src/main/java/net/flintmc/framework/generation/annotation/DataFactory.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -26,7 +26,7 @@\n import net.flintmc.framework.generation.parsing.DataField;\n import net.flintmc.framework.generation.parsing.data.DataFieldMethod;\n import net.flintmc.framework.generation.parsing.factory.DataFactoryMethod;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n /**\n  * Declares an <b>interface</b> as a factory for a given data interface."
  },
  {
    "sha": "577580bd2ee603606e4c5a3630a995bf59534845",
    "filename": "framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/SubscribeService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 24,
    "changes": 27,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/SubscribeService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/SubscribeService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/SubscribeService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -21,9 +21,7 @@\n \n import com.google.inject.Inject;\n import com.google.inject.Singleton;\n-import com.google.inject.name.Named;\n import java.lang.annotation.Annotation;\n-import java.util.Map;\n import javassist.ClassPool;\n import javassist.CtClass;\n import javassist.CtMethod;\n@@ -40,7 +38,7 @@\n import net.flintmc.framework.stereotype.service.Service;\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n import net.flintmc.framework.stereotype.service.ServiceNotFoundException;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n \n /**\n  * Service for sending events to receivers.\n@@ -54,19 +52,16 @@\n   private final ExecutorFactory factory;\n   private final CtClass eventInterface;\n   private final SubscribeMethodBuilder.Factory methodBuilderFactory;\n-  private final String version;\n \n   @Inject\n   private SubscribeService(\n       ExecutorFactory executorFactory,\n       ClassPool pool,\n-      SubscribeMethodBuilder.Factory methodBuilderFactory,\n-      @Named(\"launchArguments\") Map launchArguments)\n+      SubscribeMethodBuilder.Factory methodBuilderFactory)\n       throws NotFoundException {\n     this.methodBuilderFactory = methodBuilderFactory;\n     this.eventInterface = pool.get(Event.class.getName());\n     this.factory = executorFactory;\n-    this.version = (String) launchArguments.get(\"--game-version\");\n   }\n \n   /**\n@@ -77,9 +72,6 @@ public void discover(AnnotationMeta<Annotation> meta) throws ServiceNotFoundExce\n     Annotation subscribe = meta.getAnnotation();\n     CtMethod method = meta.getMethodIdentifier().getLocation();\n \n-    String version = this.getVersion(subscribe);\n-    if (!(version.isEmpty() || version.equals(this.version))) return;\n-\n     CtClass eventClass = null;\n     try {\n       for (CtClass parameter : method.getParameterTypes()) {\n@@ -124,7 +116,7 @@ public void discover(AnnotationMeta<Annotation> meta) throws ServiceNotFoundExce\n       phase = Subscribe.Phase.POST;\n     } else if (subscribe instanceof Subscribe) {\n       priority = ((Subscribe) subscribe).priority();\n-      phase = ((Subscribe) subscribe).phase();\n+      phase = ((Subscribe) subscribe).value();\n     } else {\n       throw new ServiceNotFoundException(\n           \"Unknown subscribe annotation: \" + subscribe.annotationType().getName());\n@@ -146,17 +138,4 @@ public void discover(AnnotationMeta<Annotation> meta) throws ServiceNotFoundExce\n \n     builder.to(executor).buildAndRegister();\n   }\n-\n-  private String getVersion(Annotation annotation) {\n-    if (annotation instanceof PreSubscribe) {\n-      return ((PreSubscribe) annotation).version();\n-    } else if (annotation instanceof PostSubscribe) {\n-      return ((PostSubscribe) annotation).version();\n-    } else if (annotation instanceof Subscribe) {\n-      return ((Subscribe) annotation).version();\n-    } else {\n-      throw new IllegalArgumentException(\n-          \"Unknown subscribe annotation: \" + annotation.annotationType().getName());\n-    }\n-  }\n }"
  },
  {
    "sha": "e6da0e0f0f62cc54e0d4958acfafd4a3ba2bd0c5",
    "filename": "framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/method/subscribable/SubscribableService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/method/subscribable/SubscribableService.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/method/subscribable/SubscribableService.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/eventbus/src/internal/java/net/flintmc/framework/eventbus/internal/method/subscribable/SubscribableService.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -42,7 +42,7 @@\n import net.flintmc.framework.stereotype.service.ServiceHandler;\n import net.flintmc.framework.stereotype.service.ServiceNotFoundException;\n import net.flintmc.launcher.classloading.common.CommonClassLoader;\n-import net.flintmc.processing.autoload.AnnotationMeta;\n+import net.flintmc.metaprogramming.AnnotationMeta;\n import net.flintmc.transform.exceptions.ClassTransformException;\n import net.flintmc.transform.launchplugin.LateInjectedTransformer;\n import net.flintmc.transform.minecraft.MinecraftTransformer;"
  },
  {
    "sha": "229b35ee58e604a9a6f81e406e5f884ff2639f71",
    "filename": "framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PostSubscribe.java",
    "status": "modified",
    "additions": 2,
    "deletions": 10,
    "changes": 12,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PostSubscribe.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PostSubscribe.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PostSubscribe.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -20,15 +20,15 @@\n package net.flintmc.framework.eventbus.event.subscribe;\n \n import net.flintmc.framework.eventbus.event.EventPriority;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n /**\n- * A shortcut to {@code @Subscribe(phase = Subscribe.Phase.POST)}.\n+ * A shortcut to {@code @Subscribe(Subscribe.Phase.POST)}.\n  *\n  * @see Subscribe\n  */\n@@ -44,12 +44,4 @@\n    * @see Subscribe#priority()\n    */\n   byte priority() default EventPriority.NORMAL;\n-\n-  /**\n-   * Retrieves the minecraft version where this event should be fired, for example \"1.15.2\". If it\n-   * is empty, it will work in every version.\n-   *\n-   * @return The version where this event should be available\n-   */\n-  String version() default \"\";\n }"
  },
  {
    "sha": "bd1de3eed867cd9a176752a370bf2e56b6a67f5b",
    "filename": "framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PreSubscribe.java",
    "status": "modified",
    "additions": 2,
    "deletions": 10,
    "changes": 12,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PreSubscribe.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PreSubscribe.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/PreSubscribe.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -20,15 +20,15 @@\n package net.flintmc.framework.eventbus.event.subscribe;\n \n import net.flintmc.framework.eventbus.event.EventPriority;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n /**\n- * A shortcut to {@code @Subscribe(phase = Subscribe.Phase.PRE)}.\n+ * A shortcut to {@code @Subscribe(Subscribe.Phase.PRE)}.\n  *\n  * @see Subscribe\n  */\n@@ -44,12 +44,4 @@\n    * @see Subscribe#priority()\n    */\n   byte priority() default EventPriority.NORMAL;\n-\n-  /**\n-   * Retrieves the minecraft version where this event should be fired, for example \"1.15.2\". If it\n-   * is empty, it will work in every version.\n-   *\n-   * @return The version where this event should be available\n-   */\n-  String version() default \"\";\n }"
  },
  {
    "sha": "16fc709ba951e3a82fde2e358bd432f1f47bb88b",
    "filename": "framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/Subscribable.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/Subscribable.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/7ee0146969f7440b57ca4afb5afb38c27c77ebae/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/Subscribable.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/framework/eventbus/src/main/java/net/flintmc/framework/eventbus/event/subscribe/Subscribable.java?ref=7ee0146969f7440b57ca4afb5afb38c27c77ebae",
    "patch": "@@ -25,7 +25,7 @@\n import java.lang.annotation.Target;\n import net.flintmc.framework.eventbus.event.Event;\n import net.flintmc.framework.eventbus.event.EventDetails;\n-import net.flintmc.processing.autoload.DetectableAnnotation;\n+import net.flintmc.metaprogramming.DetectableAnnotation;\n \n /**\n  * Marks a class that implements an {@link Event} as such and must be applied on EVERY event that"
  }
]
