[
  {
    "sha": "f867a1f70ca5b2dc3949a8e3d6569609e14c7316",
    "filename": "mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultEntityTypeBuilder.java",
    "status": "renamed",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultEntityTypeBuilder.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultEntityTypeBuilder.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultEntityTypeBuilder.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -17,7 +17,7 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n \n-package net.flintmc.mcapi.v1_15_2.entity.type;\n+package net.flintmc.mcapi.internal.render;\n \n import net.flintmc.framework.inject.assisted.Assisted;\n import net.flintmc.framework.inject.assisted.AssistedInject;\n@@ -28,11 +28,8 @@\n import net.flintmc.mcapi.entity.type.EntityType;\n import net.flintmc.mcapi.entity.type.EntityTypeBuilder;\n \n-/**\n- * 1.15.2 implementation of the {@link EntityTypeBuilder}.\n- */\n-@Implement(value = EntityTypeBuilder.class, version = \"1.16.4\")\n-public class VersionedEntityTypeBuilder implements EntityTypeBuilder {\n+@Implement(EntityTypeBuilder.class)\n+public class DefaultEntityTypeBuilder implements EntityTypeBuilder {\n \n   private final Entity.Classification classification;\n   private final EntitySize.Factory entitySizeFactory;\n@@ -45,7 +42,7 @@\n   private EntitySize size;\n \n   @AssistedInject\n-  private VersionedEntityTypeBuilder(\n+  private DefaultEntityTypeBuilder(\n       @Assisted(\"classification\") Entity.Classification classification,\n       EntityType.Factory entityTypeFactory,\n       EntitySize.Factory entitySizeFactory) {",
    "previous_filename": "mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/entity/type/VersionedEntityTypeBuilder.java"
  },
  {
    "sha": "defa5cbc3dfb897252844d05adcb7bb59305dadd",
    "filename": "mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultMinecraftRenderMeta.java",
    "status": "added",
    "additions": 246,
    "deletions": 0,
    "changes": 246,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultMinecraftRenderMeta.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultMinecraftRenderMeta.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/internal/java/net/flintmc/mcapi/internal/render/DefaultMinecraftRenderMeta.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -0,0 +1,246 @@\n+/*\n+ * FlintMC\n+ * Copyright (C) 2020-2021 LabyMedia GmbH and contributors\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+\n+package net.flintmc.mcapi.internal.render;\n+\n+import java.util.Stack;\n+import java.util.UUID;\n+import net.flintmc.framework.inject.assisted.AssistedInject;\n+import net.flintmc.framework.inject.implement.Implement;\n+import net.flintmc.mcapi.render.MinecraftRenderMeta;\n+import net.flintmc.util.math.matrix.Matrix3x3f;\n+import net.flintmc.util.math.matrix.Matrix4x4f;\n+\n+@Implement(MinecraftRenderMeta.class)\n+public class DefaultMinecraftRenderMeta implements MinecraftRenderMeta {\n+\n+  private final Stack<MatrixState> matrixStates;\n+  private final Matrix4x4f.Factory matrix4x4fFactory;\n+  private final Matrix3x3f.Factory matrix3x3fFactory;\n+\n+  private int packedLight;\n+  private float partialTick;\n+  private UUID targetUuid;\n+\n+  @AssistedInject\n+  private DefaultMinecraftRenderMeta(\n+      Matrix3x3f.Factory matrix3x3Factory,\n+      Matrix4x4f.Factory matrix4x4Factory,\n+      Matrix4x4f.Factory matrix4x4fFactory,\n+      Matrix3x3f.Factory matrix3x3fFactory) {\n+    this.matrix4x4fFactory = matrix4x4fFactory;\n+    this.matrix3x3fFactory = matrix3x3fFactory;\n+    this.matrixStates = new Stack<>();\n+    this.matrixStates.push(new MatrixState(matrix3x3Factory.create(), matrix4x4Factory.create()));\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta push() {\n+    this.matrixStates.push(new MatrixState(this.matrixStates.peek()));\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta pop() {\n+    this.matrixStates.pop();\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public UUID getTargetUUID() {\n+    return this.targetUuid;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta rotateToPlayersCamera() {\n+    Matrix3x3f matrix3x3f = matrix3x3fFactory.create();\n+    matrix3x3f.setIdentity();\n+    getWorld().set3x3(matrix3x3f);\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta rotate(float ang, float x, float y, float z) {\n+    ang = (float) Math.toRadians(ang);\n+    this.getNormal().rotate(ang, -x, -y, -z);\n+    this.getWorld().rotate(-ang, -x, -y, -z);\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta scale(float factor) {\n+    this.getNormal().scale(factor);\n+    this.getWorld().scale(factor);\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta scale(float factorX, float factorY, float factorZ) {\n+    this.getNormal().scale(factorX, factorY, factorZ);\n+    this.getWorld().scale(factorX, factorY, factorZ);\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta translate(float x, float y, float z) {\n+    x *= 16;\n+    y *= 16;\n+    z *= 16;\n+    this.getWorld().translate(x, y, z);\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public Matrix3x3f getNormal() {\n+    return this.matrixStates.peek().getNormal();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public Matrix4x4f getWorld() {\n+    return this.matrixStates.peek().getWorld();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public int getPackedLight() {\n+    return this.packedLight;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public float getPartialTick() {\n+    return this.partialTick;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta setPackedLight(int packedLight) {\n+    this.packedLight = packedLight;\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta setPartialTick(float partialTick) {\n+    this.partialTick = partialTick;\n+    return this;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public MinecraftRenderMeta setTargetUuid(UUID uuid) {\n+    this.targetUuid = uuid;\n+    return this;\n+  }\n+\n+  private class MatrixState {\n+\n+    private final Matrix3x3f normal;\n+    private final Matrix4x4f world;\n+\n+    private MatrixState(Matrix3x3f normal, Matrix4x4f world) {\n+      this.normal =\n+          matrix3x3fFactory\n+              .create()\n+              .set(\n+                  normal.getM00(),\n+                  normal.getM01(),\n+                  normal.getM02(),\n+                  normal.getM10(),\n+                  normal.getM11(),\n+                  normal.getM12(),\n+                  normal.getM20(),\n+                  normal.getM21(),\n+                  normal.getM22());\n+      this.world =\n+          matrix4x4fFactory\n+              .create()\n+              .set(\n+                  world.getM00(),\n+                  world.getM01(),\n+                  world.getM02(),\n+                  world.getM03(),\n+                  world.getM10(),\n+                  world.getM11(),\n+                  world.getM12(),\n+                  world.getM13(),\n+                  world.getM20(),\n+                  world.getM21(),\n+                  world.getM22(),\n+                  world.getM23(),\n+                  world.getM30(),\n+                  world.getM31(),\n+                  world.getM32(),\n+                  world.getM33());\n+    }\n+\n+    public MatrixState(MatrixState peek) {\n+      this.normal = peek.getNormal().copy(matrix3x3fFactory.create());\n+      this.world = peek.getWorld().copy(matrix4x4fFactory.create());\n+    }\n+\n+    public Matrix3x3f getNormal() {\n+      return this.normal;\n+    }\n+\n+    public Matrix4x4f getWorld() {\n+      return this.world;\n+    }\n+  }\n+}"
  },
  {
    "sha": "01c0186fc84a1e4580ea6177d0b846960846452b",
    "filename": "mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/entity/VersionedEntity.java",
    "status": "modified",
    "additions": 31,
    "deletions": 66,
    "changes": 97,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/entity/VersionedEntity.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/entity/VersionedEntity.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/entity/VersionedEntity.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -20,7 +20,6 @@\n package net.flintmc.mcapi.v1_15_2.entity;\n \n import com.google.common.collect.Sets;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -31,7 +30,6 @@\n import java.util.UUID;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n-\n import net.flintmc.framework.inject.assisted.Assisted;\n import net.flintmc.framework.inject.assisted.AssistedInject;\n import net.flintmc.framework.inject.implement.Implement;\n@@ -49,23 +47,17 @@\n import net.flintmc.mcapi.items.ItemStack;\n import net.flintmc.mcapi.player.type.sound.Sound;\n import net.flintmc.mcapi.v1_15_2.entity.render.EntityAccessor;\n-import net.flintmc.mcapi.v1_15_2.entity.render.ModelBoxAccessor;\n import net.flintmc.mcapi.v1_15_2.entity.render.ModelRendererAccessor;\n-import net.flintmc.mcapi.v1_15_2.entity.render.PositionTextureVertexAccessor;\n-import net.flintmc.mcapi.v1_15_2.entity.render.TexturedQuadAccessor;\n import net.flintmc.mcapi.world.World;\n import net.flintmc.mcapi.world.math.BlockPosition;\n import net.flintmc.mcapi.world.math.Direction;\n import net.flintmc.mcapi.world.math.Vector3D;\n import net.flintmc.mcapi.world.scoreboad.team.Team;\n-import net.flintmc.render.model.ModelBox;\n import net.flintmc.render.model.ModelBoxHolder;\n import net.flintmc.util.property.Property;\n import net.flintmc.util.property.PropertyContext;\n import net.minecraft.client.Minecraft;\n-import net.minecraft.client.entity.player.AbstractClientPlayerEntity;\n import net.minecraft.client.renderer.entity.EntityRenderer;\n-import net.minecraft.client.renderer.entity.PlayerRenderer;\n import net.minecraft.client.renderer.model.ModelRenderer;\n import net.minecraft.entity.Pose;\n import net.minecraft.entity.player.PlayerEntity;\n@@ -180,49 +172,6 @@ protected VersionedEntity(\n                   propertyContext.setPropertyValue(\n                       TEXTURE_OFFSET_Y_OLD, modelRendererAccessor.getTextureOffsetY());\n \n-                  Set<ModelBox> modelBoxes = modelBoxHolder.getBoxes();\n-                  modelBoxes.clear();\n-                  for (ModelRenderer.ModelBox modelBox : modelRendererAccessor.getModelBoxes()) {\n-                    ModelBoxAccessor modelBoxAccessor = (ModelBoxAccessor) modelBox;\n-                    List<ModelBox.TexturedQuad> texturedQuads = new ArrayList<>();\n-\n-                    for (TexturedQuadAccessor quad : modelBoxAccessor.getQuads()) {\n-                      ModelBox.TexturedQuad.VertexPosition[] vertexPositions =\n-                          new ModelBox.TexturedQuad.VertexPosition\n-                              [quad.getVertexPositions().length];\n-                      for (int i = 0; i < vertexPositions.length; i++) {\n-                        PositionTextureVertexAccessor vertexPosition = quad.getVertexPositions()[i];\n-                        vertexPositions[i] =\n-                            InjectionHolder.getInjectedInstance(\n-                                ModelBox.TexturedQuad.VertexPosition.Factory.class)\n-                                .create(\n-                                    vertexPosition.getTextureU(),\n-                                    vertexPosition.getTextureV(),\n-                                    vertexPosition.getPosition().getX(),\n-                                    vertexPosition.getPosition().getY(),\n-                                    vertexPosition.getPosition().getZ());\n-                      }\n-                      texturedQuads.add(\n-                          InjectionHolder.getInjectedInstance(ModelBox.TexturedQuad.Factory.class)\n-                              .create(\n-                                  quad.getNormal().getX(),\n-                                  quad.getNormal().getY(),\n-                                  quad.getNormal().getZ(),\n-                                  vertexPositions));\n-                    }\n-\n-                    modelBoxes.add(\n-                        InjectionHolder.getInjectedInstance(ModelBox.Factory.class)\n-                            .create()\n-                            .setPositionX1(modelBox.posX1)\n-                            .setPositionX2(modelBox.posX2)\n-                            .setPositionY1(modelBox.posY1)\n-                            .setPositionY2(modelBox.posY2)\n-                            .setPositionZ1(modelBox.posZ1)\n-                            .setPositionZ2(modelBox.posZ2)\n-                            .setTexturedQuads(texturedQuads));\n-                  }\n-\n                   modelBoxHolder\n                       .setRotationX(modelRenderer.rotateAngleX)\n                       .setRotationY(modelRenderer.rotateAngleY)\n@@ -235,65 +184,79 @@ protected VersionedEntity(\n                       .setTextureHeight(modelRendererAccessor.getTextureHeight())\n                       .setTextureWidth(modelRendererAccessor.getTextureWidth())\n                       .setTextureOffsetX(modelRendererAccessor.getTextureOffsetX())\n-                      .setTextureOffsetY(modelRendererAccessor.getTextureOffsetY())\n-                      .setModelBoxes(modelBoxes);\n+                      .setTextureOffsetY(modelRendererAccessor.getTextureOffsetY());\n                 })\n             .addRenderPreparation(\n                 modelBoxHolder -> {\n                   ModelRendererAccessor modelRendererAccessor =\n                       (ModelRendererAccessor) modelRenderer;\n \n                   if (modelBoxHolder.getShowModelOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRenderer.showModel = modelBoxHolder.isShowModel();\n+                  }\n \n                   if (modelBoxHolder.getMirrorOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRenderer.mirror = modelBoxHolder.isMirror();\n+                  }\n \n                   if (modelBoxHolder.getTextureOffsetXOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureOffsetX(modelBoxHolder.getTextureOffsetX());\n+                  }\n \n                   if (modelBoxHolder.getTextureOffsetYOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureOffsetY(modelBoxHolder.getTextureOffsetY());\n+                  }\n \n                   if (modelBoxHolder.getTextureWidthOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureWidth(modelBoxHolder.getTextureWidth());\n+                  }\n \n                   if (modelBoxHolder.getTextureHeightOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureHeight(modelBoxHolder.getTextureHeight());\n+                  }\n \n-                  if (modelBoxHolder.getRotationXMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getRotationXMode() == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotateAngleX = 0;\n+                  }\n \n                   modelRenderer.rotateAngleX += modelBoxHolder.getRotationX();\n \n-                  if (modelBoxHolder.getRotationYMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getRotationYMode() == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotateAngleY = 0;\n+                  }\n \n                   modelRenderer.rotateAngleY += modelBoxHolder.getRotationY();\n \n-                  if (modelBoxHolder.getRotationZMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getRotationZMode() == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotateAngleZ = 0;\n+                  }\n \n                   modelRenderer.rotateAngleZ += modelBoxHolder.getRotationZ();\n \n-                  if (modelBoxHolder.getTranslationXMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getTranslationXMode()\n+                      == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotationPointX = 0;\n+                  }\n \n                   modelRenderer.rotationPointX += modelBoxHolder.getTranslationX();\n \n-                  if (modelBoxHolder.getTranslationYMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getTranslationYMode()\n+                      == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotationPointY = 0;\n+                  }\n \n                   modelRenderer.rotationPointY += modelBoxHolder.getTranslationY();\n \n-                  if (modelBoxHolder.getTranslationZMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getTranslationZMode()\n+                      == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotationPointZ = 0;\n+                  }\n \n                   modelRenderer.rotationPointZ += modelBoxHolder.getTranslationZ();\n                 })\n@@ -343,8 +306,10 @@ public EntityRenderContext getRenderContext() {\n           InjectionHolder.getInjectedInstance(EntityRenderContext.Factory.class).create(this);\n       this.updateRenderables();\n     }\n-    if (this.lastRenderer == null || !this.lastRenderer.equals(Minecraft.getInstance().getRenderManager().getRenderer(this.wrapped())))\n+    if (this.lastRenderer == null || !this.lastRenderer\n+        .equals(Minecraft.getInstance().getRenderManager().getRenderer(this.wrapped()))) {\n       this.updateRenderables();\n+    }\n     return this.entityRenderContext;\n   }\n "
  },
  {
    "sha": "f579356101cf02192ee1fc1c8b076ba719adb3b6",
    "filename": "mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/render/VersionedMinecraftRenderMeta.java",
    "status": "removed",
    "additions": 0,
    "deletions": 202,
    "changes": 202,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/bb29871c5fa3e30f5af66818430eb9ce10ac1621/mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/render/VersionedMinecraftRenderMeta.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/bb29871c5fa3e30f5af66818430eb9ce10ac1621/mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/render/VersionedMinecraftRenderMeta.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/v1_15_2/java/net/flintmc/mcapi/v1_15_2/render/VersionedMinecraftRenderMeta.java?ref=bb29871c5fa3e30f5af66818430eb9ce10ac1621",
    "patch": "@@ -1,202 +0,0 @@\n-/*\n- * FlintMC\n- * Copyright (C) 2020-2021 LabyMedia GmbH and contributors\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-\n-package net.flintmc.mcapi.v1_15_2.render;\n-\n-import java.util.Stack;\n-import java.util.UUID;\n-\n-import net.flintmc.framework.inject.assisted.AssistedInject;\n-import net.flintmc.framework.inject.implement.Implement;\n-import net.flintmc.mcapi.render.MinecraftRenderMeta;\n-import net.flintmc.util.math.matrix.Matrix3x3f;\n-import net.flintmc.util.math.matrix.Matrix4x4f;\n-\n-@Implement(MinecraftRenderMeta.class)\n-public class VersionedMinecraftRenderMeta implements MinecraftRenderMeta {\n-\n-    private final Stack<MatrixState> matrixStates;\n-    private final Matrix4x4f.Factory matrix4x4fFactory;\n-    private final Matrix3x3f.Factory matrix3x3fFactory;\n-\n-    private int packedLight;\n-    private float partialTick;\n-    private UUID targetUuid;\n-\n-    @AssistedInject\n-    private VersionedMinecraftRenderMeta(\n-            Matrix3x3f.Factory matrix3x3Factory,\n-            Matrix4x4f.Factory matrix4x4Factory,\n-            Matrix4x4f.Factory matrix4x4fFactory,\n-            Matrix3x3f.Factory matrix3x3fFactory) {\n-        this.matrix4x4fFactory = matrix4x4fFactory;\n-        this.matrix3x3fFactory = matrix3x3fFactory;\n-        this.matrixStates = new Stack<>();\n-        this.matrixStates.push(new MatrixState(matrix3x3Factory.create(), matrix4x4Factory.create()));\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta push() {\n-        this.matrixStates.push(new MatrixState(this.matrixStates.peek()));\n-        return this;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta pop() {\n-        this.matrixStates.pop();\n-        return this;\n-    }\n-\n-    @Override\n-    public UUID getTargetUUID() {\n-        return this.targetUuid;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta rotateToPlayersCamera() {\n-        Matrix3x3f matrix3x3f = matrix3x3fFactory.create();\n-        matrix3x3f.setIdentity();\n-        getWorld().set3x3(matrix3x3f);\n-        return this;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta rotate(float ang, float x, float y, float z) {\n-        ang = (float) Math.toRadians(ang);\n-        this.getNormal().rotate(ang, -x, -y, -z);\n-        this.getWorld().rotate(-ang, -x, -y, -z);\n-        return this;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta scale(float factor) {\n-        this.getNormal().scale(factor);\n-        this.getWorld().scale(factor);\n-        return this;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta scale(float factorX, float factorY, float factorZ) {\n-        this.getNormal().scale(factorX, factorY, factorZ);\n-        this.getWorld().scale(factorX, factorY, factorZ);\n-        return this;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta translate(float x, float y, float z) {\n-        x *= 16;\n-        y *= 16;\n-        z *= 16;\n-        this.getWorld().translate(x, y, z);\n-        return this;\n-    }\n-\n-    @Override\n-    public Matrix3x3f getNormal() {\n-        return this.matrixStates.peek().getNormal();\n-    }\n-\n-    @Override\n-    public Matrix4x4f getWorld() {\n-        return this.matrixStates.peek().getWorld();\n-    }\n-\n-    @Override\n-    public int getPackedLight() {\n-        return this.packedLight;\n-    }\n-\n-    @Override\n-    public float getPartialTick() {\n-        return this.partialTick;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta setPackedLight(int packedLight) {\n-        this.packedLight = packedLight;\n-        return this;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta setPartialTick(float partialTick) {\n-        this.partialTick = partialTick;\n-        return this;\n-    }\n-\n-    @Override\n-    public MinecraftRenderMeta setTargetUuid(UUID uuid) {\n-        this.targetUuid = uuid;\n-        return this;\n-    }\n-\n-    private class MatrixState {\n-\n-        private final Matrix3x3f normal;\n-        private final Matrix4x4f world;\n-\n-        private MatrixState(Matrix3x3f normal, Matrix4x4f world) {\n-            this.normal =\n-                    matrix3x3fFactory\n-                            .create()\n-                            .set(\n-                                    normal.getM00(),\n-                                    normal.getM01(),\n-                                    normal.getM02(),\n-                                    normal.getM10(),\n-                                    normal.getM11(),\n-                                    normal.getM12(),\n-                                    normal.getM20(),\n-                                    normal.getM21(),\n-                                    normal.getM22());\n-            this.world =\n-                    matrix4x4fFactory\n-                            .create()\n-                            .set(\n-                                    world.getM00(),\n-                                    world.getM01(),\n-                                    world.getM02(),\n-                                    world.getM03(),\n-                                    world.getM10(),\n-                                    world.getM11(),\n-                                    world.getM12(),\n-                                    world.getM13(),\n-                                    world.getM20(),\n-                                    world.getM21(),\n-                                    world.getM22(),\n-                                    world.getM23(),\n-                                    world.getM30(),\n-                                    world.getM31(),\n-                                    world.getM32(),\n-                                    world.getM33());\n-        }\n-\n-        public MatrixState(MatrixState peek) {\n-            this.normal = peek.getNormal().copy(matrix3x3fFactory.create());\n-            this.world = peek.getWorld().copy(matrix4x4fFactory.create());\n-        }\n-\n-        public Matrix3x3f getNormal() {\n-            return normal;\n-        }\n-\n-        public Matrix4x4f getWorld() {\n-            return world;\n-        }\n-    }\n-}"
  },
  {
    "sha": "1f5bb20a1a9deed58db8de072f9236163882f272",
    "filename": "mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/VersionedEntity.java",
    "status": "modified",
    "additions": 30,
    "deletions": 61,
    "changes": 91,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/VersionedEntity.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/VersionedEntity.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/VersionedEntity.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -20,7 +20,6 @@\n package net.flintmc.mcapi.v1_16_5.entity;\n \n import com.google.common.collect.Sets;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -31,7 +30,6 @@\n import java.util.UUID;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n-\n import net.flintmc.framework.inject.assisted.Assisted;\n import net.flintmc.framework.inject.assisted.AssistedInject;\n import net.flintmc.framework.inject.implement.Implement;\n@@ -48,14 +46,14 @@\n import net.flintmc.mcapi.entity.type.EntityType;\n import net.flintmc.mcapi.items.ItemStack;\n import net.flintmc.mcapi.player.type.sound.Sound;\n-import net.flintmc.mcapi.v1_16_5.entity.render.*;\n+import net.flintmc.mcapi.v1_16_5.entity.render.EntityAccessor;\n+import net.flintmc.mcapi.v1_16_5.entity.render.ModelRendererAccessor;\n import net.flintmc.mcapi.v1_16_5.entity.shadow.AccessibleEntity;\n import net.flintmc.mcapi.world.World;\n import net.flintmc.mcapi.world.math.BlockPosition;\n import net.flintmc.mcapi.world.math.Direction;\n import net.flintmc.mcapi.world.math.Vector3D;\n import net.flintmc.mcapi.world.scoreboad.team.Team;\n-import net.flintmc.render.model.ModelBox;\n import net.flintmc.render.model.ModelBoxHolder;\n import net.flintmc.util.property.Property;\n import net.flintmc.util.property.PropertyContext;\n@@ -172,49 +170,6 @@ protected VersionedEntity(\n                   propertyContext.setPropertyValue(\n                       TEXTURE_OFFSET_Y_OLD, modelRendererAccessor.getTextureOffsetY());\n \n-                  Set<ModelBox> modelBoxes = modelBoxHolder.getBoxes();\n-                  modelBoxes.clear();\n-                  for (ModelRenderer.ModelBox modelBox : modelRendererAccessor.getModelBoxes()) {\n-                    ModelBoxAccessor modelBoxAccessor = (ModelBoxAccessor) modelBox;\n-                    List<ModelBox.TexturedQuad> texturedQuads = new ArrayList<>();\n-\n-                    for (TexturedQuadAccessor quad : modelBoxAccessor.getQuads()) {\n-                      ModelBox.TexturedQuad.VertexPosition[] vertexPositions =\n-                          new ModelBox.TexturedQuad.VertexPosition\n-                              [quad.getVertexPositions().length];\n-                      for (int i = 0; i < vertexPositions.length; i++) {\n-                        PositionTextureVertexAccessor vertexPosition = quad.getVertexPositions()[i];\n-                        vertexPositions[i] =\n-                            InjectionHolder.getInjectedInstance(\n-                                ModelBox.TexturedQuad.VertexPosition.Factory.class)\n-                                .create(\n-                                    vertexPosition.getTextureU(),\n-                                    vertexPosition.getTextureV(),\n-                                    vertexPosition.getPosition().getX(),\n-                                    vertexPosition.getPosition().getY(),\n-                                    vertexPosition.getPosition().getZ());\n-                      }\n-                      texturedQuads.add(\n-                          InjectionHolder.getInjectedInstance(ModelBox.TexturedQuad.Factory.class)\n-                              .create(\n-                                  quad.getNormal().getX(),\n-                                  quad.getNormal().getY(),\n-                                  quad.getNormal().getZ(),\n-                                  vertexPositions));\n-                    }\n-\n-                    modelBoxes.add(\n-                        InjectionHolder.getInjectedInstance(ModelBox.Factory.class)\n-                            .create()\n-                            .setPositionX1(modelBox.posX1)\n-                            .setPositionX2(modelBox.posX2)\n-                            .setPositionY1(modelBox.posY1)\n-                            .setPositionY2(modelBox.posY2)\n-                            .setPositionZ1(modelBox.posZ1)\n-                            .setPositionZ2(modelBox.posZ2)\n-                            .setTexturedQuads(texturedQuads));\n-                  }\n-\n                   modelBoxHolder\n                       .setRotationX(modelRenderer.rotateAngleX)\n                       .setRotationY(modelRenderer.rotateAngleY)\n@@ -227,65 +182,79 @@ protected VersionedEntity(\n                       .setTextureHeight(modelRendererAccessor.getTextureHeight())\n                       .setTextureWidth(modelRendererAccessor.getTextureWidth())\n                       .setTextureOffsetX(modelRendererAccessor.getTextureOffsetX())\n-                      .setTextureOffsetY(modelRendererAccessor.getTextureOffsetY())\n-                      .setModelBoxes(modelBoxes);\n+                      .setTextureOffsetY(modelRendererAccessor.getTextureOffsetY());\n                 })\n             .addRenderPreparation(\n                 modelBoxHolder -> {\n                   ModelRendererAccessor modelRendererAccessor =\n                       (ModelRendererAccessor) modelRenderer;\n \n                   if (modelBoxHolder.getShowModelOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRenderer.showModel = modelBoxHolder.isShowModel();\n+                  }\n \n                   if (modelBoxHolder.getMirrorOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRenderer.mirror = modelBoxHolder.isMirror();\n+                  }\n \n                   if (modelBoxHolder.getTextureOffsetXOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureOffsetX(modelBoxHolder.getTextureOffsetX());\n+                  }\n \n                   if (modelBoxHolder.getTextureOffsetYOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureOffsetY(modelBoxHolder.getTextureOffsetY());\n+                  }\n \n                   if (modelBoxHolder.getTextureWidthOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureWidth(modelBoxHolder.getTextureWidth());\n+                  }\n \n                   if (modelBoxHolder.getTextureHeightOverridePolicy()\n-                      == ModelBoxHolder.OverridePolicy.ACTIVE)\n+                      == ModelBoxHolder.OverridePolicy.ACTIVE) {\n                     modelRendererAccessor.setTextureHeight(modelBoxHolder.getTextureHeight());\n+                  }\n \n-                  if (modelBoxHolder.getRotationXMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getRotationXMode() == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotateAngleX = 0;\n+                  }\n \n                   modelRenderer.rotateAngleX += modelBoxHolder.getRotationX();\n \n-                  if (modelBoxHolder.getRotationYMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getRotationYMode() == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotateAngleY = 0;\n+                  }\n \n                   modelRenderer.rotateAngleY += modelBoxHolder.getRotationY();\n \n-                  if (modelBoxHolder.getRotationZMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getRotationZMode() == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotateAngleZ = 0;\n+                  }\n \n                   modelRenderer.rotateAngleZ += modelBoxHolder.getRotationZ();\n \n-                  if (modelBoxHolder.getTranslationXMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getTranslationXMode()\n+                      == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotationPointX = 0;\n+                  }\n \n                   modelRenderer.rotationPointX += modelBoxHolder.getTranslationX();\n \n-                  if (modelBoxHolder.getTranslationYMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getTranslationYMode()\n+                      == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotationPointY = 0;\n+                  }\n \n                   modelRenderer.rotationPointY += modelBoxHolder.getTranslationY();\n \n-                  if (modelBoxHolder.getTranslationZMode() == ModelBoxHolder.RotationMode.ABSOLUTE)\n+                  if (modelBoxHolder.getTranslationZMode()\n+                      == ModelBoxHolder.RotationMode.ABSOLUTE) {\n                     modelRenderer.rotationPointZ = 0;\n+                  }\n \n                   modelRenderer.rotationPointZ += modelBoxHolder.getTranslationZ();\n                 })"
  },
  {
    "sha": "448dd9c75e28e7e48fe7f5f99679898f20e9e360",
    "filename": "mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/item/VersionedItemEntity.java",
    "status": "modified",
    "additions": 40,
    "deletions": 26,
    "changes": 66,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/item/VersionedItemEntity.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/item/VersionedItemEntity.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/item/VersionedItemEntity.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -36,8 +36,6 @@\n @Implement(value = ItemEntity.class, version = \"1.16.5\")\n public class VersionedItemEntity extends VersionedEntity implements ItemEntity {\n \n-  private final net.minecraft.entity.item.ItemEntity itemEntity;\n-\n   @AssistedInject\n   private VersionedItemEntity(\n       @Assisted(\"entity\") Object entity,\n@@ -49,8 +47,6 @@ private VersionedItemEntity(\n     if (!(entity instanceof net.minecraft.entity.item.ItemEntity)) {\n       throw new IllegalArgumentException(\"\");\n     }\n-\n-    this.itemEntity = (net.minecraft.entity.item.ItemEntity) entity;\n   }\n \n   @AssistedInject\n@@ -81,142 +77,160 @@ private VersionedItemEntity(\n       @Assisted(\"y\") double y,\n       @Assisted(\"z\") double z,\n       @Assisted(\"itemStack\") ItemStack itemStack) {\n-    this(entity, entityTypeRegister, world, entityFoundationMapper, x, y, z);\n+    this(\n+        entity,\n+        entityTypeRegister,\n+        world,\n+        entityFoundationMapper,\n+        x,\n+        y,\n+        z);\n     this.setItemStack(itemStack);\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected net.minecraft.entity.item.ItemEntity wrapped() {\n+    return (net.minecraft.entity.item.ItemEntity) super.wrapped();\n+  }\n+\n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public ItemStack getItemStack() {\n     return this.getEntityFoundationMapper()\n         .getItemMapper()\n-        .fromMinecraft(this.itemEntity.getItem());\n+        .fromMinecraft(this.wrapped().getItem());\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setItemStack(ItemStack itemStack) {\n-    this.itemEntity.setItem(\n-        (net.minecraft.item.ItemStack)\n-            this.getEntityFoundationMapper().getItemMapper().toMinecraft(itemStack));\n+    this.wrapped()\n+        .setItem(\n+            (net.minecraft.item.ItemStack)\n+                this.getEntityFoundationMapper().getItemMapper().toMinecraft(itemStack));\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public UUID getOwnerIdentifier() {\n-    return this.itemEntity.getOwnerId();\n+    return this.wrapped().getOwnerId();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setOwnerIdentifier(UUID ownerIdentifier) {\n-    this.itemEntity.setOwnerId(ownerIdentifier);\n+    this.wrapped().setOwnerId(ownerIdentifier);\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public UUID getThrowerIdentifier() {\n-    return this.itemEntity.getThrowerId();\n+    return this.wrapped().getThrowerId();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setThrowerIdentifier(UUID throwerIdentifier) {\n-    this.itemEntity.setThrowerId(throwerIdentifier);\n+    this.wrapped().setThrowerId(throwerIdentifier);\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public int getAge() {\n-    return this.itemEntity.getAge();\n+    return this.wrapped().getAge();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setDefaultPickupDelay() {\n-    this.itemEntity.setDefaultPickupDelay();\n+    this.wrapped().setDefaultPickupDelay();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setNoPickupDelay() {\n-    this.itemEntity.setNoPickupDelay();\n+    this.wrapped().setNoPickupDelay();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setInfinitePickupDelay() {\n-    this.itemEntity.setInfinitePickupDelay();\n+    this.wrapped().setInfinitePickupDelay();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setPickupDelay(int ticks) {\n-    this.itemEntity.setPickupDelay(ticks);\n+    this.wrapped().setPickupDelay(ticks);\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public boolean cannotPickup() {\n-    return this.itemEntity.cannotPickup();\n+    return this.wrapped().cannotPickup();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setNoDespawn() {\n-    this.itemEntity.setNoDespawn();\n+    this.wrapped().setNoDespawn();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void makeFakeItem() {\n-    this.itemEntity.makeFakeItem();\n+    this.wrapped().makeFakeItem();\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void readAdditional(NBTCompound compound) {\n-    this.itemEntity.readAdditional(\n-        (CompoundNBT) this.getEntityFoundationMapper().getNbtMapper().toMinecraftNBT(compound));\n+    this.wrapped()\n+        .readAdditional(\n+            (CompoundNBT) this.getEntityFoundationMapper().getNbtMapper().toMinecraftNBT(compound));\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void writeAdditional(NBTCompound compound) {\n-    this.itemEntity.writeAdditional(\n-        (CompoundNBT) this.getEntityFoundationMapper().getNbtMapper().toMinecraftNBT(compound));\n+    this.wrapped()\n+        .writeAdditional(\n+            (CompoundNBT) this.getEntityFoundationMapper().getNbtMapper().toMinecraftNBT(compound));\n   }\n \n   /**\n@@ -226,6 +240,6 @@ public void writeAdditional(NBTCompound compound) {\n   public ChatComponent getName() {\n     return this.getEntityFoundationMapper()\n         .getComponentMapper()\n-        .fromMinecraft(this.itemEntity.getName());\n+        .fromMinecraft(this.wrapped().getName());\n   }\n }"
  },
  {
    "sha": "6f95cb19899c3d331648258a47e88d1954fc65c2",
    "filename": "mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/projectile/VersionedThrowableEntity.java",
    "status": "modified",
    "additions": 21,
    "deletions": 9,
    "changes": 30,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/projectile/VersionedThrowableEntity.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/projectile/VersionedThrowableEntity.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/projectile/VersionedThrowableEntity.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -36,8 +36,6 @@\n @Implement(value = ThrowableEntity.class, version = \"1.16.5\")\n public class VersionedThrowableEntity extends VersionedEntity implements ThrowableEntity {\n \n-  private final net.minecraft.entity.projectile.ThrowableEntity throwableEntity;\n-\n   @AssistedInject\n   public VersionedThrowableEntity(\n       @Assisted(\"entity\") Object entity,\n@@ -53,7 +51,6 @@ public VersionedThrowableEntity(\n               + net.minecraft.entity.projectile.ThrowableEntity.class.getName());\n     }\n \n-    this.throwableEntity = (net.minecraft.entity.projectile.ThrowableEntity) entity;\n   }\n \n   @AssistedInject\n@@ -80,13 +77,28 @@ public VersionedThrowableEntity(\n     this.setPosition(thrower.getPosX(), thrower.getPosYEye() - 0.1D, thrower.getPosZ());\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected net.minecraft.entity.projectile.ThrowableEntity wrapped() {\n+    return (net.minecraft.entity.projectile.ThrowableEntity) super.wrapped();\n+  }\n+\n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void shoot(\n       Entity thrower, float pitch, float yaw, float pitchOffset, float velocity, float inaccuracy) {\n-    this.throwableEntity.shoot(pitch, yaw, pitchOffset, velocity, inaccuracy);\n+    this.wrapped().func_234612_a_(\n+        (net.minecraft.entity.Entity)\n+            this.getEntityFoundationMapper().getEntityMapper().toMinecraftEntity(thrower),\n+        pitch,\n+        yaw,\n+        pitchOffset,\n+        velocity,\n+        inaccuracy);\n   }\n \n   /**\n@@ -96,23 +108,23 @@ public void shoot(\n   public LivingEntity getThrower() {\n     return this.getEntityFoundationMapper()\n         .getEntityMapper()\n-        .fromMinecraftLivingEntity(this.throwableEntity);\n+        .fromMinecraftLivingEntity(this.wrapped());\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void shoot(double x, double y, double z, float velocity, float inaccuracy) {\n-    this.throwableEntity.shoot(x, y, z, velocity, inaccuracy);\n+    this.wrapped().shoot(x, y, z, velocity, inaccuracy);\n   }\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void setMotion(double x, double y, double z) {\n-    this.throwableEntity.setMotion(x, y, z);\n+    this.wrapped().setMotion(x, y, z);\n   }\n \n   /**\n@@ -121,7 +133,7 @@ public void setMotion(double x, double y, double z) {\n   @Override\n   public void readAdditional(NBTCompound compound) {\n     AccessibleEntity accessibleThrowableEntity =\n-        (AccessibleEntity) this.throwableEntity;\n+        (AccessibleEntity) this.wrapped();\n     accessibleThrowableEntity.readAdditional(\n         (CompoundNBT) this.getEntityFoundationMapper().getNbtMapper().fromMinecraftNBT(compound));\n   }\n@@ -132,7 +144,7 @@ public void readAdditional(NBTCompound compound) {\n   @Override\n   public void writeAdditional(NBTCompound compound) {\n     AccessibleEntity accessibleThrowableEntity =\n-        (AccessibleEntity) this.throwableEntity;\n+        (AccessibleEntity) this.wrapped();\n     accessibleThrowableEntity.writeAdditional(\n         (CompoundNBT) this.getEntityFoundationMapper().getNbtMapper().fromMinecraftNBT(compound));\n   }"
  },
  {
    "sha": "ada14962a89a95df99d7d23a8ff0aadede2be020",
    "filename": "mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/type/VersionedEntityTypeBuilder.java",
    "status": "removed",
    "additions": 0,
    "deletions": 131,
    "changes": 131,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/bb29871c5fa3e30f5af66818430eb9ce10ac1621/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/type/VersionedEntityTypeBuilder.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/bb29871c5fa3e30f5af66818430eb9ce10ac1621/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/type/VersionedEntityTypeBuilder.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/mcapi/src/v1_16_5/java/net/flintmc/mcapi/v1_16_5/entity/type/VersionedEntityTypeBuilder.java?ref=bb29871c5fa3e30f5af66818430eb9ce10ac1621",
    "patch": "@@ -1,131 +0,0 @@\n-/*\n- * FlintMC\n- * Copyright (C) 2020-2021 LabyMedia GmbH and contributors\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-\n-package net.flintmc.mcapi.v1_16_5.entity.type;\n-\n-import net.flintmc.framework.inject.assisted.Assisted;\n-import net.flintmc.framework.inject.assisted.AssistedInject;\n-import net.flintmc.framework.inject.implement.Implement;\n-import net.flintmc.mcapi.chat.component.ChatComponent;\n-import net.flintmc.mcapi.entity.Entity;\n-import net.flintmc.mcapi.entity.EntitySize;\n-import net.flintmc.mcapi.entity.type.EntityType;\n-import net.flintmc.mcapi.entity.type.EntityTypeBuilder;\n-\n-/**\n- * 1.15.2 implementation of the {@link EntityTypeBuilder}.\n- */\n-@Implement(value = EntityTypeBuilder.class, version = \"1.16.5\")\n-public class VersionedEntityTypeBuilder implements EntityTypeBuilder {\n-\n-  private final Entity.Classification classification;\n-  private final EntitySize.Factory entitySizeFactory;\n-  private final EntityType.Factory entityTypeFactory;\n-  private ChatComponent displayName;\n-  private boolean serializable;\n-  private boolean summonable;\n-  private boolean immuneToFire;\n-  private boolean canSpawnFarFromPlayer;\n-  private EntitySize size;\n-\n-  @AssistedInject\n-  private VersionedEntityTypeBuilder(\n-      @Assisted(\"classification\") Entity.Classification classification,\n-      EntityType.Factory entityTypeFactory,\n-      EntitySize.Factory entitySizeFactory) {\n-    this.classification = classification;\n-    this.entitySizeFactory = entitySizeFactory;\n-    this.entityTypeFactory = entityTypeFactory;\n-    this.serializable = true;\n-    this.summonable = true;\n-    this.canSpawnFarFromPlayer =\n-        classification == Entity.Classification.CREATURE\n-            || classification == Entity.Classification.MISC;\n-    this.size = entitySizeFactory.create(0.6F, 1.8F, false);\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public EntityTypeBuilder displayName(ChatComponent displayName) {\n-    this.displayName = displayName;\n-    return this;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public EntityTypeBuilder size(float width, float height) {\n-    this.size = this.entitySizeFactory.create(width, height, false);\n-    return this;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public EntityTypeBuilder disableSummoning() {\n-    this.summonable = false;\n-    return this;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public EntityTypeBuilder disableSerialization() {\n-    this.serializable = false;\n-    return this;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public EntityTypeBuilder immuneToFire() {\n-    this.immuneToFire = true;\n-    return this;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public EntityTypeBuilder canSpawnFarFromPlayer() {\n-    this.canSpawnFarFromPlayer = true;\n-    return this;\n-  }\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public EntityType build(String id) {\n-    return this.entityTypeFactory.create(\n-        this.displayName,\n-        this.classification,\n-        this.serializable,\n-        this.summonable,\n-        this.immuneToFire,\n-        this.canSpawnFarFromPlayer,\n-        this.size);\n-  }\n-}"
  },
  {
    "sha": "1dc6c7df8744d96918ff365f560cd34fe9490840",
    "filename": "render/model-renderer/src/internal/java/net/flintmc/render/model/internal/DefaultModelBoxHolder.java",
    "status": "modified",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/model-renderer/src/internal/java/net/flintmc/render/model/internal/DefaultModelBoxHolder.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/model-renderer/src/internal/java/net/flintmc/render/model/internal/DefaultModelBoxHolder.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/render/model-renderer/src/internal/java/net/flintmc/render/model/internal/DefaultModelBoxHolder.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -20,8 +20,6 @@\n package net.flintmc.render.model.internal;\n \n import java.awt.*;\n-import java.util.Set;\n-import net.flintmc.render.model.ModelBox;\n import net.flintmc.render.model.ModelBoxHolder;\n import net.flintmc.render.model.RenderContext;\n import net.flintmc.render.model.RenderContextAware;\n@@ -53,14 +51,6 @@ protected DefaultModelBoxHolder(T_RenderContext renderContext, Object meta) {\n     super(renderContext, meta);\n   }\n \n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public Set<ModelBox> getBoxes() {\n-    return this.getPropertyContext().getPropertyValue(ModelBoxHolder.MODEL_BOXES);\n-  }\n-\n   /**\n    * {@inheritDoc}\n    */\n@@ -365,15 +355,6 @@ public RotationMode getRotationZMode() {\n     return this.getPropertyContext().setPropertyMeta(TEXTURE_HEIGHT, overridePolicy);\n   }\n \n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public ModelBoxHolder<T_RenderContextAware, T_RenderContext> setModelBoxes(\n-      Set<ModelBox> modelBoxes) {\n-    return this.getPropertyContext().setPropertyValue(MODEL_BOXES, modelBoxes);\n-  }\n-\n   /**\n    * {@inheritDoc}\n    */"
  },
  {
    "sha": "3802adcc08a9e73e2643365e7d308e356eb29f23",
    "filename": "render/model-renderer/src/main/java/net/flintmc/render/model/ModelBoxHolder.java",
    "status": "modified",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/model-renderer/src/main/java/net/flintmc/render/model/ModelBoxHolder.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/model-renderer/src/main/java/net/flintmc/render/model/ModelBoxHolder.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/render/model-renderer/src/main/java/net/flintmc/render/model/ModelBoxHolder.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -20,8 +20,6 @@\n package net.flintmc.render.model;\n \n import java.awt.*;\n-import java.util.HashSet;\n-import java.util.Set;\n import net.flintmc.util.property.Property;\n \n /**\n@@ -45,8 +43,6 @@\n     ModelBoxHolder<T_RenderContextAware, T_RenderContext>,\n     Object> {\n \n-  Property<Set<ModelBox>, Void> MODEL_BOXES =\n-      Property.builder().<Set<ModelBox>>withValue().withDefaultValue(HashSet::new).build();\n   Property<Float, RotationMode> ROTATION_ANGLE_X =\n       Property.builder()\n           .<Float>withValue()\n@@ -139,11 +135,6 @@\n           .withDefaultMeta(OverridePolicy.INACTIVE)\n           .build();\n \n-  /**\n-   * @return all registered boxes\n-   */\n-  Set<ModelBox> getBoxes();\n-\n   /**\n    * Set the texture width override policy.\n    *\n@@ -164,14 +155,6 @@\n   ModelBoxHolder<T_RenderContextAware, T_RenderContext> setTextureHeightPolicy(\n       OverridePolicy overridePolicy);\n \n-  /**\n-   * Set all model boxes\n-   *\n-   * @param modelBoxes the model boxes to set\n-   * @return this\n-   */\n-  ModelBoxHolder<T_RenderContextAware, T_RenderContext> setModelBoxes(Set<ModelBox> modelBoxes);\n-\n   /**\n    * @return the vertex color\n    */"
  },
  {
    "sha": "26049c7b5d36d2f828c14055ffe7ea4a54b36318",
    "filename": "render/vbo-rendering/src/v1_15_2/java/net/flintmc/render/vbo/v1_15_2/VersionedVertexArrayObject.java",
    "status": "modified",
    "additions": 136,
    "deletions": 137,
    "changes": 273,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/vbo-rendering/src/v1_15_2/java/net/flintmc/render/vbo/v1_15_2/VersionedVertexArrayObject.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/vbo-rendering/src/v1_15_2/java/net/flintmc/render/vbo/v1_15_2/VersionedVertexArrayObject.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/render/vbo-rendering/src/v1_15_2/java/net/flintmc/render/vbo/v1_15_2/VersionedVertexArrayObject.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -30,7 +30,6 @@\n import static org.lwjgl.opengl.GL33.glGetInteger;\n \n import java.nio.IntBuffer;\n-\n import net.flintmc.framework.inject.assisted.Assisted;\n import net.flintmc.framework.inject.assisted.AssistedInject;\n import net.flintmc.framework.inject.implement.Implement;\n@@ -46,145 +45,145 @@\n @Implement(value = VertexArrayObject.class, version = \"1.15.2\")\n public class VersionedVertexArrayObject implements VertexArrayObject {\n \n-    private final VertexFormat format;\n-    private final VertexBufferObject vbo;\n-\n-    private final int id;\n-    private int oldId;\n-    private boolean deleted;\n-\n-    @AssistedInject\n-    private VersionedVertexArrayObject(@Assisted VertexBufferObject vbo) {\n-        this(vbo, () -> {\n-        });\n+  private final VertexFormat format;\n+  private final VertexBufferObject vbo;\n+\n+  private final int id;\n+  private int oldId;\n+  private boolean deleted;\n+\n+  @AssistedInject\n+  private VersionedVertexArrayObject(@Assisted VertexBufferObject vbo) {\n+    this(vbo, () -> {\n+    });\n+  }\n+\n+  @AssistedInject\n+  private VersionedVertexArrayObject(\n+      @Assisted VertexBufferObject vbo, @Assisted Runnable bindCallback) {\n+    this.format = vbo.getFormat();\n+    this.vbo = vbo;\n+\n+    this.id = this.format.createVAO();\n+    this.deleted = false;\n+\n+    this.bind();\n+\n+    this.vbo.bind();\n+    this.vbo.pushToGPU();\n+\n+    this.format.pushToGPU(this.id);\n+\n+    bindCallback.run();\n+\n+    this.vbo.unbind();\n+    this.unbind();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void draw(VertexIndexObject ebo) {\n+    this.bind();\n+    this.vbo.bind();\n+    ebo.bind();\n+    this.drawWithoutBind(ebo);\n+    this.unbind();\n+    this.vbo.unbind();\n+    ebo.unbind();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void draw(IntBuffer indices, VboDrawMode drawMode) {\n+    this.bind();\n+    this.vbo.bind();\n+    if (drawMode == VboDrawMode.TRIANGLES) {\n+      glDrawElements(GL_TRIANGLES, indices);\n+    } else if (drawMode == VboDrawMode.QUADS) {\n+      glDrawElements(GL_QUADS, indices);\n+    } else if (drawMode == VboDrawMode.POLYGON) {\n+      glDrawElements(GL_POLYGON, indices);\n     }\n-\n-    @AssistedInject\n-    private VersionedVertexArrayObject(\n-            @Assisted VertexBufferObject vbo, @Assisted Runnable bindCallback) {\n-        this.format = vbo.getFormat();\n-        this.vbo = vbo;\n-\n-        this.id = this.format.createVAO();\n-        this.deleted = false;\n-\n-        this.bind();\n-\n-        this.vbo.bind();\n-        this.vbo.pushToGPU();\n-\n-        this.format.pushToGPU(this.id);\n-\n-        bindCallback.run();\n-\n-        this.vbo.unbind();\n-        this.unbind();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void drawWithoutBind(VertexIndexObject ebo) {\n+    if (this.deleted) {\n+      throw new IllegalStateException(\n+          \"The VAO has already been deleted and can not be used for drawing anymore.\");\n     }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void draw(VertexIndexObject ebo) {\n-        this.bind();\n-        this.vbo.bind();\n-        ebo.bind();\n-        this.drawWithoutBind(ebo);\n-        this.unbind();\n-        this.vbo.unbind();\n-        ebo.unbind();\n+    if (!ebo.isAvailable()) {\n+      ebo.pushToGPU();\n     }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void draw(IntBuffer indices, VboDrawMode drawMode) {\n-        this.bind();\n-        this.vbo.bind();\n-        if (drawMode == VboDrawMode.TRIANGLES) {\n-            glDrawElements(GL_TRIANGLES, indices);\n-        } else if (drawMode == VboDrawMode.QUADS) {\n-            glDrawElements(GL_QUADS, indices);\n-        } else if (drawMode == VboDrawMode.POLYGON) {\n-            glDrawElements(GL_POLYGON, indices);\n-        }\n+    if (ebo.getDrawMode() == VboDrawMode.TRIANGLES) {\n+      glDrawElements(GL_TRIANGLES, ebo.getSize(), GL_UNSIGNED_INT, 0);\n+    } else if (ebo.getDrawMode() == VboDrawMode.QUADS) {\n+      glDrawElements(GL_QUADS, ebo.getSize(), GL_UNSIGNED_INT, 0);\n+    } else if (ebo.getDrawMode() == VboDrawMode.POLYGON) {\n+      glDrawElements(GL_POLYGON, ebo.getSize(), GL_UNSIGNED_INT, 0);\n     }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void drawWithoutBind(VertexIndexObject ebo) {\n-        if (this.deleted) {\n-            throw new IllegalStateException(\n-                    \"The VAO has already been deleted and can not be used for drawing anymore.\");\n-        }\n-        if (!ebo.isAvailable()) {\n-            ebo.pushToGPU();\n-        }\n-        if (ebo.getDrawMode() == VboDrawMode.TRIANGLES) {\n-            glDrawElements(GL_TRIANGLES, ebo.getSize(), GL_UNSIGNED_INT, 0);\n-        } else if (ebo.getDrawMode() == VboDrawMode.QUADS) {\n-            glDrawElements(GL_QUADS, ebo.getSize(), GL_UNSIGNED_INT, 0);\n-        } else if (ebo.getDrawMode() == VboDrawMode.POLYGON) {\n-            glDrawElements(GL_POLYGON, ebo.getSize(), GL_UNSIGNED_INT, 0);\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public VertexFormat getFormat() {\n-        return this.format;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public VertexBufferObject getVBO() {\n-        return this.vbo;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void bind() {\n-        this.oldId = glGetInteger(GL_VERTEX_ARRAY_BINDING);\n-        glBindVertexArray(this.id);\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void unbind() {\n-        glBindVertexArray(this.oldId);\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public int getID() {\n-        return this.id;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void delete() {\n-        if (this.deleted) {\n-            throw new IllegalStateException(\"The VAO was already deleted.\");\n-        }\n-        this.vbo.delete();\n-        this.bind();\n-        glDeleteVertexArrays(this.id);\n-        this.unbind();\n-        this.deleted = true;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public VertexFormat getFormat() {\n+    return this.format;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public VertexBufferObject getVBO() {\n+    return this.vbo;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void bind() {\n+    this.oldId = glGetInteger(GL_VERTEX_ARRAY_BINDING);\n+    glBindVertexArray(this.id);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void unbind() {\n+    glBindVertexArray(this.oldId);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public int getID() {\n+    return this.id;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void delete() {\n+    if (this.deleted) {\n+      throw new IllegalStateException(\"The VAO was already deleted.\");\n     }\n+    this.vbo.delete();\n+    this.bind();\n+    glDeleteVertexArrays(this.id);\n+    this.unbind();\n+    this.deleted = true;\n+  }\n }"
  },
  {
    "sha": "0a99cc2456e0ce3d94c996c674598968fba06a87",
    "filename": "render/vbo-rendering/src/v1_16_5/java/net/flintmc/render/vbo/v1_16_5/VersionedVertexArrayObject.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/vbo-rendering/src/v1_16_5/java/net/flintmc/render/vbo/v1_16_5/VersionedVertexArrayObject.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/render/vbo-rendering/src/v1_16_5/java/net/flintmc/render/vbo/v1_16_5/VersionedVertexArrayObject.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/render/vbo-rendering/src/v1_16_5/java/net/flintmc/render/vbo/v1_16_5/VersionedVertexArrayObject.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -105,7 +105,7 @@ public void draw(IntBuffer indices, VboDrawMode drawMode) {\n       glDrawElements(GL_TRIANGLES, indices);\n     } else if (drawMode == VboDrawMode.QUADS) {\n       glDrawElements(GL_QUADS, indices);\n-    }else if(drawMode == VboDrawMode.POLYGON){\n+    } else if (drawMode == VboDrawMode.POLYGON) {\n       glDrawElements(GL_POLYGON, indices);\n     }\n   }\n@@ -126,7 +126,7 @@ public void drawWithoutBind(VertexIndexObject ebo) {\n       glDrawElements(GL_TRIANGLES, ebo.getSize(), GL_UNSIGNED_INT, 0);\n     } else if (ebo.getDrawMode() == VboDrawMode.QUADS) {\n       glDrawElements(GL_QUADS, ebo.getSize(), GL_UNSIGNED_INT, 0);\n-    }else if(ebo.getDrawMode() == VboDrawMode.POLYGON){\n+    } else if (ebo.getDrawMode() == VboDrawMode.POLYGON) {\n       glDrawElements(GL_POLYGON, ebo.getSize(), GL_UNSIGNED_INT, 0);\n     }\n   }"
  },
  {
    "sha": "530aca5dfd566458718ba51207ac44a24a837b01",
    "filename": "transform/javassist/src/internal/java/net/flintmc/transform/javassist/internal/DefaultMethodBasedClassTransformMeta.java",
    "status": "modified",
    "additions": 23,
    "deletions": 22,
    "changes": 45,
    "blob_url": "https://github.com/FlintMC/FlintMC/blob/cecf4dcbe7025fdbe730114672a32c354a64bc16/transform/javassist/src/internal/java/net/flintmc/transform/javassist/internal/DefaultMethodBasedClassTransformMeta.java",
    "raw_url": "https://github.com/FlintMC/FlintMC/raw/cecf4dcbe7025fdbe730114672a32c354a64bc16/transform/javassist/src/internal/java/net/flintmc/transform/javassist/internal/DefaultMethodBasedClassTransformMeta.java",
    "contents_url": "https://api.github.com/repos/FlintMC/FlintMC/contents/transform/javassist/src/internal/java/net/flintmc/transform/javassist/internal/DefaultMethodBasedClassTransformMeta.java?ref=cecf4dcbe7025fdbe730114672a32c354a64bc16",
    "patch": "@@ -20,15 +20,17 @@\n package net.flintmc.transform.javassist.internal;\n \n import com.google.inject.Key;\n-import net.flintmc.framework.inject.assisted.Assisted;\n-import net.flintmc.framework.inject.assisted.AssistedInject;\n-import com.google.inject.name.Named;\n import com.google.inject.name.Names;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.function.Predicate;\n import javassist.CtClass;\n import javassist.CtMethod;\n import javassist.NotFoundException;\n-import net.flintmc.framework.inject.implement.Implement;\n-import net.flintmc.framework.inject.logging.InjectLogger;\n import net.flintmc.framework.inject.primitive.InjectionHolder;\n import net.flintmc.framework.stereotype.service.CtResolver;\n import net.flintmc.processing.autoload.AnnotationMeta;\n@@ -42,17 +44,11 @@\n import net.flintmc.util.mappings.ClassMappingProvider;\n import org.apache.logging.log4j.Logger;\n \n-import java.lang.reflect.InvocationTargetException;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.function.Predicate;\n-\n public class DefaultMethodBasedClassTransformMeta implements MethodBasedClassTransformMeta {\n \n   private final ClassTransformContext.Factory classTransformContextFactory;\n   private final Collection<Predicate<CtClass>> filters;\n+  private final Map<Class<? extends NameResolver>, NameResolver> nameResolvers;\n   private final ClassMappingProvider classMappingProvider;\n   private final AnnotationMeta<ClassTransform> annotationMeta;\n   private final Logger logger;\n@@ -62,11 +58,11 @@\n \n \n   public DefaultMethodBasedClassTransformMeta(\n-          ClassTransformContext.Factory classTransformContextFactory,\n-          ClassMappingProvider classMappingProvider,\n-          Logger logger,\n-          AnnotationMeta<ClassTransform> annotationMeta,\n-          Map<String, String> launchArguments) {\n+      ClassTransformContext.Factory classTransformContextFactory,\n+      ClassMappingProvider classMappingProvider,\n+      Logger logger,\n+      AnnotationMeta<ClassTransform> annotationMeta,\n+      Map<String, String> launchArguments) {\n     this.classTransformContextFactory = classTransformContextFactory;\n     this.logger = logger;\n     this.version = launchArguments.get(\"--game-version\");\n@@ -76,6 +72,7 @@ public DefaultMethodBasedClassTransformMeta(\n         InjectionHolder.getInjectedInstance(getAnnotation().classNameResolver());\n \n     this.filters = this.createFilters();\n+    this.nameResolvers = new HashMap<>();\n   }\n \n   private Collection<Predicate<CtClass>> createFilters() {\n@@ -87,7 +84,8 @@ public DefaultMethodBasedClassTransformMeta(\n             CtClassFilter classFilterAnnotation = ctClassFilter.getAnnotation();\n             try {\n               NameResolver classNameResolver =\n-                  InjectionHolder.getInjectedInstance(classFilterAnnotation.classNameResolver());\n+                  this.nameResolvers.computeIfAbsent(classFilterAnnotation.classNameResolver(),\n+                      InjectionHolder::getInjectedInstance);\n \n               return classFilterAnnotation\n                   .value()\n@@ -125,18 +123,21 @@ public boolean matches(CtClass ctClass) {\n       return false;\n     }\n     for (Predicate<CtClass> filter : this.getFilters()) {\n-      if (!filter.test(ctClass)) return false;\n+      if (!filter.test(ctClass)) {\n+        return false;\n+      }\n     }\n     ClassMapping classMapping = classMappingProvider.get(ctClass.getName());\n \n     ClassTransform annotation = this.getAnnotationMeta().getAnnotation();\n-    if (classMapping == null)\n+    if (classMapping == null) {\n       classMapping =\n           new ClassMapping(\n               InjectionHolder.getInjectedInstance(\n                   Key.get(boolean.class, Names.named(\"obfuscated\"))),\n               ctClass.getName(),\n               ctClass.getName());\n+    }\n \n     for (String target : annotation.value()) {\n       String resolve = this.getClassNameResolver().resolve(target);\n@@ -147,9 +148,9 @@ public boolean matches(CtClass ctClass) {\n \n       return (annotation.version().isEmpty() || annotation.version().equals(this.version))\n           && ((target.isEmpty() || target.equals(classMapping.getDeobfuscatedName()))\n-              || target.equals(classMapping.getObfuscatedName()))\n+          || target.equals(classMapping.getObfuscatedName()))\n           && this.getFilters().stream()\n-              .allMatch(ctClassPredicate -> ctClassPredicate.test(ctClass));\n+          .allMatch(ctClassPredicate -> ctClassPredicate.test(ctClass));\n     }\n     return true;\n   }"
  }
]
