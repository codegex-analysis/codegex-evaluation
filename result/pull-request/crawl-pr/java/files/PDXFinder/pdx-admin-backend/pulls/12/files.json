[
  {
    "sha": "7db5d151a5966108ccd4c1216f5a7607b27b1bcc",
    "filename": "data-services/src/main/java/org/pdxfinder/CSVHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/CSVHandler.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/CSVHandler.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/data-services/src/main/java/org/pdxfinder/CSVHandler.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -181,7 +181,7 @@ public String getMappingKeyFromCSVData(String entityType, Map<String, String> da\n \n         String mappingKey = \"\";\n \n-        if (entityType.equals(MappingEntityType.diagnosis.get())) {\n+        if (entityType.equals(MappingEntityType.DIAGNOSIS.getLabel())) {\n \n             mappingKey = String.join(\"__\",\n                                      entityType,\n@@ -193,7 +193,7 @@ public String getMappingKeyFromCSVData(String entityType, Map<String, String> da\n             ).toLowerCase().replaceAll(\"[^a-zA-Z0-9 _-]\", \"\");\n \n         }\n-        else if (entityType.equals(MappingEntityType.treatment.get())) {\n+        else if (entityType.equals(MappingEntityType.TREATMENT.getLabel())) {\n \n             mappingKey = String.join(\"__\",\n                                      entityType,"
  },
  {
    "sha": "d56eca84f735059f60b330f2609677636c2e3b27",
    "filename": "data-services/src/main/java/org/pdxfinder/MappingService.java",
    "status": "modified",
    "additions": 43,
    "deletions": 36,
    "changes": 79,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/MappingService.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/MappingService.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/data-services/src/main/java/org/pdxfinder/MappingService.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -3,6 +3,7 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.gson.Gson;\n+import java.nio.file.FileSystems;\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n@@ -34,7 +35,7 @@\n public class MappingService {\n \n   private final static Logger log = LoggerFactory.getLogger(MappingService.class);\n-  private ObjectMapper mapper = new ObjectMapper();\n+  private final ObjectMapper mapper = new ObjectMapper();\n \n   @Value(\"${data-dir}\")\n   private String rootDir;\n@@ -66,7 +67,7 @@ public String getDiagnosisMappingKey(\n       String dataSource, String diagnosis, String originTissue, String tumorType) {\n \n     String mapKey =\n-        MappingEntityType.diagnosis.get() + \"__\" + dataSource + \"__\" + diagnosis + \"__\"\n+        MappingEntityType.DIAGNOSIS.getLabel() + \"__\" + dataSource + \"__\" + diagnosis + \"__\"\n         + originTissue + \"__\" + tumorType;\n     mapKey = mapKey.replaceAll(\"[^a-zA-Z0-9 _-]\", \"\").toLowerCase();\n     return mapKey;\n@@ -75,14 +76,13 @@ public String getDiagnosisMappingKey(\n   public String getTreatmentMappingKey(String dataSource, String treatmentName) {\n \n     String mapKey =\n-        MappingEntityType.treatment.get() + \"__\" + dataSource + \"__\" + treatmentName;\n+        MappingEntityType.TREATMENT.getLabel() + \"__\" + dataSource + \"__\" + treatmentName;\n     mapKey = mapKey.replaceAll(\"[^a-zA-Z0-9 _-]\", \"\").toLowerCase();\n     return mapKey;\n   }\n \n   public MappingEntity getDiagnosisMapping(\n       String dataSource, String diagnosis, String originTissue, String tumorType) {\n-\n     if (!INITIALIZED) {\n       loadRules(\"json\");\n     }\n@@ -146,49 +146,56 @@ private void loadRules(String source) {\n \n     log.info(\"Loading mapping rules\");\n \n-    if (source.equals(\"json\")) {\n-\n-      String mappingRulesDir = rootDir + \"/mapping\";\n-      File folder = new File(mappingRulesDir);\n+    if (\"json\".equals(source)) {\n+      Map<String, String> mappingRulesPaths = getMappingRulesPaths();\n+      String diagnosisMappingsFilePath = mappingRulesPaths.get(\"diagnosis\");\n+      if (diagnosisMappingsFilePath != null) {\n+        loadDiagnosisMappings(diagnosisMappingsFilePath);\n+      }\n+      String treatmentMappingsFilePath = mappingRulesPaths.get(\"treatment\");\n+      if (treatmentMappingsFilePath != null) {\n \n-      if (folder.exists()) {\n+        loadTreatmentMappings(treatmentMappingsFilePath);\n+      }\n \n-        String diagnosisMappingsFilePath = mappingRulesDir + \"/diagnosis_mappings.json\";\n-        String treatmentMappingsFilePath = mappingRulesDir + \"/treatment_mappings.json\";\n+    } else if (\"h2\".equals(source)) {\n \n-        File diagnosisFile = new File(diagnosisMappingsFilePath);\n-        File treatmentFile = new File(treatmentMappingsFilePath);\n+    } else {\n \n-        if (diagnosisFile.exists()) {\n+      log.error(\"Couldn't load mapping rules, no source was specified\");\n+    }\n \n-          loadDiagnosisMappings(diagnosisMappingsFilePath);\n-        } else {\n-          log.error(\"Diagnosis mappings file not found at \" + diagnosisMappingsFilePath);\n-        }\n+    INITIALIZED = true;\n+  }\n \n-        if (treatmentFile.exists()) {\n+  public Map<String, String> getMappingRulesPaths() {\n+    Map<String, String> mappingRulesPaths = new HashMap<>();\n+    String mappingRulesDir = rootDir + \"/mapping\";\n+    File folder = new File(mappingRulesDir);\n \n-          loadTreatmentMappings(treatmentMappingsFilePath);\n-        } else {\n-          log.error(\"Treatment mappings file not found at \" + treatmentMappingsFilePath);\n-        }\n+    if (folder.exists()) {\n+      String diagnosisMappingsFilePath = mappingRulesDir + \"/diagnosis_mappings.json\";\n+      String treatmentMappingsFilePath = mappingRulesDir + \"/treatment_mappings.json\";\n \n+      File diagnosisFile = new File(diagnosisMappingsFilePath);\n+      File treatmentFile = new File(treatmentMappingsFilePath);\n \n+      if (diagnosisFile.exists()) {\n+        mappingRulesPaths.put(MappingEntityType.DIAGNOSIS.getLabel(), diagnosisMappingsFilePath);\n       } else {\n-\n-        log.error(\"Mapping rules directory not found at \" + mappingRulesDir);\n-\n+        log.error(\"Diagnosis mappings file not found at \" + diagnosisMappingsFilePath);\n       }\n \n-\n-    } else if (source.equals(\"h2\")) {\n+      if (treatmentFile.exists()) {\n+        mappingRulesPaths.put(MappingEntityType.TREATMENT.getLabel(), treatmentMappingsFilePath);\n+      } else {\n+        log.error(\"Treatment mappings file not found at \" + treatmentMappingsFilePath);\n+      }\n \n     } else {\n-\n-      log.error(\"Couldn't load mapping rules, no source was specified\");\n+      log.error(\"Mapping rules directory not found at \" + mappingRulesDir);\n     }\n-\n-    INITIALIZED = true;\n+    return mappingRulesPaths;\n   }\n \n \n@@ -272,7 +279,7 @@ private void loadDiagnosisMappings(String file) {\n           mappingValues.put(\"OriginTissue\", originTissue);\n           mappingValues.put(\"TumorType\", tumorType);\n \n-          MappingEntity me = new MappingEntity(MappingEntityType.diagnosis.get(),\n+          MappingEntity me = new MappingEntity(MappingEntityType.DIAGNOSIS.getLabel(),\n               getDiagnosisMappingLabels(), mappingValues);\n           me.setMappedTermLabel(ontologyTerm);\n           me.setMapType(mapType);\n@@ -334,7 +341,7 @@ private void loadTreatmentMappings(String file) {\n           mappingValues.put(\"DataSource\", dataSource);\n           mappingValues.put(\"TreatmentName\", treatmentName);\n \n-          MappingEntity me = new MappingEntity(MappingEntityType.treatment.get(),\n+          MappingEntity me = new MappingEntity(MappingEntityType.TREATMENT.getLabel(),\n               getTreatmentMappingLabels(), mappingValues);\n           me.setMappedTermLabel(ontologyTerm);\n           me.setMapType(mapType);\n@@ -608,7 +615,7 @@ public MappingEntity saveUnmappedTreatment(String dataSource, String treatment)\n     mappingValues.put(\"DataSource\", dataSource.toLowerCase());\n     mappingValues.put(\"TreatmentName\", treatment);\n \n-    MappingEntity mappingEntity = new MappingEntity(MappingEntityType.treatment.get(),\n+    MappingEntity mappingEntity = new MappingEntity(MappingEntityType.TREATMENT.getLabel(),\n         mappingLabels, mappingValues);\n \n     return saveUnmappedTerms(mappingEntity);\n@@ -630,7 +637,7 @@ public MappingEntity saveUnmappedDiagnosis(String dataSource, String diagnosis,\n     mappingValues.put(\"OriginTissue\", originTissue);\n     mappingValues.put(\"TumorType\", tumorType);\n \n-    MappingEntity mappingEntity = new MappingEntity(MappingEntityType.diagnosis.get(),\n+    MappingEntity mappingEntity = new MappingEntity(MappingEntityType.DIAGNOSIS.getLabel(),\n         mappingLabels, mappingValues);\n \n     return saveUnmappedTerms(mappingEntity);"
  },
  {
    "sha": "6d99954161b4ba72a90d1b4a56baf46d5ead1151",
    "filename": "data-services/src/main/java/org/pdxfinder/constants/DiagnosisMappingLabels.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/constants/DiagnosisMappingLabels.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/constants/DiagnosisMappingLabels.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/data-services/src/main/java/org/pdxfinder/constants/DiagnosisMappingLabels.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -0,0 +1,37 @@\n+package org.pdxfinder.constants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public enum DiagnosisMappingLabels {\n+  DATA_SOURCE(\"DataSource\"),\n+  ORIGIN_TISSUE(\"OriginTissue\"),\n+  TUMOR_TYPE(\"TumorType\"),\n+  SAMPLE_DIAGNOSIS(\"SampleDiagnosis\");\n+\n+  private static final Map<String, DiagnosisMappingLabels> BY_LABEL = new HashMap<>();\n+  static\n+  {\n+    for (DiagnosisMappingLabels e: values())\n+    {\n+      BY_LABEL.put(e.label, e);\n+    }\n+  }\n+\n+  private final String label;\n+\n+  DiagnosisMappingLabels(String label)\n+  {\n+    this.label = label;\n+  }\n+\n+  public static DiagnosisMappingLabels valueOfLabel(String label)\n+  {\n+    return BY_LABEL.get(label);\n+  }\n+\n+  public String getLabel()\n+  {\n+    return label;\n+  }\n+}"
  },
  {
    "sha": "832dd929c61cf570a92603df36fe42292f81f3cf",
    "filename": "data-services/src/main/java/org/pdxfinder/constants/MappingEntityType.java",
    "status": "modified",
    "additions": 30,
    "deletions": 4,
    "changes": 34,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/constants/MappingEntityType.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/constants/MappingEntityType.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/data-services/src/main/java/org/pdxfinder/constants/MappingEntityType.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -1,12 +1,38 @@\n package org.pdxfinder.constants;\n \n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n public enum MappingEntityType {\n \n-    diagnosis,\n-    treatment;\n+    DIAGNOSIS(\"diagnosis\") ,\n+    TREATMENT(\"treatment\");\n+\n+    private static final Map<String, MappingEntityType> BY_LABEL = new HashMap<>();\n+    static\n+    {\n+        for (MappingEntityType e: values())\n+        {\n+            BY_LABEL.put(e.label, e);\n+        }\n+    }\n+\n+    private final String label;\n+\n+    MappingEntityType(String label)\n+    {\n+        this.label = label;\n+    }\n+\n+\n+    public static MappingEntityType valueOfLabel(String label)\n+    {\n+        return BY_LABEL.get(label);\n+    }\n \n-    public String get() {\n-        return name();\n+    public String getLabel()\n+    {\n+        return label;\n     }\n }"
  },
  {
    "sha": "0f649ea3744e2f7c71bc385c6d1ad4548a16b6c5",
    "filename": "data-services/src/main/java/org/pdxfinder/constants/TreatmentMappingLabels.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/constants/TreatmentMappingLabels.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/data-services/src/main/java/org/pdxfinder/constants/TreatmentMappingLabels.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/data-services/src/main/java/org/pdxfinder/constants/TreatmentMappingLabels.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -0,0 +1,35 @@\n+package org.pdxfinder.constants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public enum TreatmentMappingLabels {\n+  DATA_SOURCE(\"DataSource\"),\n+  TREATMENT_TYPE(\"TreatmentName\");\n+\n+  private static final Map<String, TreatmentMappingLabels> BY_LABEL = new HashMap<>();\n+  static\n+  {\n+    for (TreatmentMappingLabels e: values())\n+    {\n+      BY_LABEL.put(e.label, e);\n+    }\n+  }\n+\n+  private final String label;\n+\n+  TreatmentMappingLabels(String label)\n+  {\n+    this.label = label;\n+  }\n+\n+  public static TreatmentMappingLabels valueOfLabel(String label)\n+  {\n+    return BY_LABEL.get(label);\n+  }\n+\n+  public String getLabel()\n+  {\n+    return label;\n+  }\n+}"
  },
  {
    "sha": "592ed89f7bb537b416a4fbd1274256700a393938",
    "filename": "rest/src/main/java/org/pdxfinder/controllers/MappingsController.java",
    "status": "modified",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/main/java/org/pdxfinder/controllers/MappingsController.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/main/java/org/pdxfinder/controllers/MappingsController.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/rest/src/main/java/org/pdxfinder/controllers/MappingsController.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -4,7 +4,14 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.poi.util.IOUtils;\n import org.pdxfinder.*;\n import org.pdxfinder.dto.*;\n import org.slf4j.Logger;\n@@ -258,4 +265,38 @@ public Object exportMappingData(\n     return Pair.of(mappingLabel, mappingValue);\n   }\n \n+  @RequestMapping(value=\"/mappingRules\", produces=\"application/zip\")\n+  public void getZipOfMappingRules(HttpServletResponse response) throws IOException {\n+\n+    //setting headers\n+    response.setStatus(HttpServletResponse.SC_OK);\n+    String fileName = \"mappingRules_\" + new SimpleDateFormat(\"yyyyMMddHHmm'.zip'\").format(new Date());\n+    response.addHeader(\"Content-Disposition\", \"attachment; filename=\\\"\"+fileName+\"\\\"\");\n+\n+    ZipOutputStream zipOutputStream = new ZipOutputStream(response.getOutputStream());\n+\n+    Map<String, String> mappingRulesPaths = mappingService.getMappingRulesPaths();\n+    // create a list to add files to be zipped\n+    ArrayList<File> files = new ArrayList<>(mappingRulesPaths.size());\n+    for (Map.Entry<String, String> entry : mappingRulesPaths.entrySet()) {\n+      System.out.println(entry.getKey() + \":\" + entry.getValue());\n+      File mappingsFile = new File(entry.getValue());\n+      files.add(mappingsFile);\n+    }\n+\n+    // package files\n+    for (File file : files) {\n+      //new zip entry and copying inputstream with file to zipOutputStream, after all closing streams\n+      zipOutputStream.putNextEntry(new ZipEntry(file.getName()));\n+      FileInputStream fileInputStream = new FileInputStream(file);\n+\n+      IOUtils.copy(fileInputStream, zipOutputStream);\n+\n+      fileInputStream.close();\n+      zipOutputStream.closeEntry();\n+    }\n+\n+    zipOutputStream.close();\n+  }\n+\n }"
  },
  {
    "sha": "414514ac6b493e95c2f0c5f8e757b1a10c5f583c",
    "filename": "rest/src/test/java/org/pdxfinder/MappingServiceTest.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/java/org/pdxfinder/MappingServiceTest.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/java/org/pdxfinder/MappingServiceTest.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/rest/src/test/java/org/pdxfinder/MappingServiceTest.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -0,0 +1,143 @@\n+package org.pdxfinder;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import java.util.Map;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.pdxfinder.constants.DiagnosisMappingLabels;\n+import org.pdxfinder.constants.MappingEntityType;\n+import org.pdxfinder.constants.TreatmentMappingLabels;\n+import org.pdxfinder.repositories.MappingEntityRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest\n+@ActiveProfiles(\"test\")\n+class MappingServiceTest {\n+\n+  @Mock\n+  private MappingEntityRepository mappingEntityRepository;\n+  @Mock\n+  private UtilityService utilityService;\n+  @Mock\n+  private PaginationService paginationService;\n+\n+  private static final String JAX_DATA_SOURCE = \"jax\";\n+  private static final String DIAGNOSIS = \"acute myeloid leukemia\";\n+  private static final String ORIGIN_TISSUE = \"blood\";\n+  private static final String TUMOR_TYPE = \"primary\";\n+\n+  private static final String IRCC_CRC_DATA_SOURCE = \"ircc-crc\";\n+  private static final String TREATMENT_NAME = \"0.9% Solution of Sodium Chloride\";\n+\n+  @Autowired\n+  private MappingService testInstance;\n+\n+  @BeforeEach\n+  void setUp() {\n+  }\n+\n+  @Test\n+  public void givenDiagnosisMappingExistsWhenGetDiagnosisMappingThenReturnData() {\n+    MappingEntity mappingEntity =\n+        testInstance.getDiagnosisMapping(JAX_DATA_SOURCE, DIAGNOSIS, ORIGIN_TISSUE, TUMOR_TYPE);\n+\n+    assertThat(mappingEntity, is(notNullValue()));\n+    assertThat(mappingEntity.getEntityType(), is(MappingEntityType.DIAGNOSIS.getLabel()));\n+    Map<String, String> mappingValues = mappingEntity.getMappingValues();\n+    assertThat(mappingValues, is(notNullValue()));\n+    assertThat(mappingValues.get(DiagnosisMappingLabels.DATA_SOURCE.getLabel()), is(JAX_DATA_SOURCE));\n+    assertThat(mappingValues.get(DiagnosisMappingLabels.ORIGIN_TISSUE.getLabel()), is(ORIGIN_TISSUE));\n+    assertThat(mappingValues.get(DiagnosisMappingLabels.TUMOR_TYPE.getLabel()), is(TUMOR_TYPE));\n+    assertThat(mappingValues.get(DiagnosisMappingLabels.SAMPLE_DIAGNOSIS.getLabel()), is(DIAGNOSIS));\n+  }\n+\n+  @Test\n+  public void givenNonExistingDataSourceWhenGetDiagnosisMappingThenReturnNull() {\n+    MappingEntity mappingEntity =\n+        testInstance.getDiagnosisMapping(\n+            \"Non_existing_datasource\", DIAGNOSIS, ORIGIN_TISSUE, TUMOR_TYPE);\n+\n+    assertThat(mappingEntity, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void givenNonExistingDiagnosisWhenGetDiagnosisMappingThenReturnNull() {\n+    MappingEntity mappingEntity =\n+        testInstance.getDiagnosisMapping(\n+            JAX_DATA_SOURCE, \"Non_existing_diagnosis\", ORIGIN_TISSUE, TUMOR_TYPE);\n+\n+    assertThat(mappingEntity, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void givenNonExistingOriginTissueWhenGetDiagnosisMappingThenReturnNull() {\n+    MappingEntity mappingEntity =\n+        testInstance.getDiagnosisMapping(\n+            JAX_DATA_SOURCE, DIAGNOSIS, \"Non_existing_origin_tissue\", TUMOR_TYPE);\n+\n+    assertThat(mappingEntity, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void givenNonExistingTumorTypeWhenGetDiagnosisMappingThenReturnNull() {\n+    MappingEntity mappingEntity =\n+        testInstance.getDiagnosisMapping(\n+            JAX_DATA_SOURCE, DIAGNOSIS, ORIGIN_TISSUE, \"Non_existing_tumor_type\");\n+\n+    assertThat(mappingEntity, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void givenTreatmentMappingExistsWhenGetTreatmentMappingThenReturnData() {\n+    MappingEntity mappingEntity =\n+        testInstance.getTreatmentMapping(IRCC_CRC_DATA_SOURCE, TREATMENT_NAME);\n+\n+    assertThat(mappingEntity, is(notNullValue()));\n+    assertThat(mappingEntity.getEntityType(), is(MappingEntityType.TREATMENT.getLabel()));\n+    Map<String, String> mappingValues = mappingEntity.getMappingValues();\n+    assertThat(mappingValues, is(notNullValue()));\n+    assertThat(mappingValues.get(TreatmentMappingLabels.DATA_SOURCE.getLabel()), is(IRCC_CRC_DATA_SOURCE));\n+    assertThat(\n+        mappingValues.get(TreatmentMappingLabels.TREATMENT_TYPE.getLabel()).toLowerCase(),\n+        is(TREATMENT_NAME.toLowerCase()));\n+  }\n+\n+  @Test\n+  public void givenNonExistingDataSourceWhenGetTreatmentMappingThenReturnData() {\n+    MappingEntity mappingEntity =\n+        testInstance.getTreatmentMapping(\"Non_existing_data_source\", TREATMENT_NAME);\n+\n+    assertThat(mappingEntity, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void givenNonExistingTreatmentNameWhenGetTreatmentMappingThenReturnData() {\n+    MappingEntity mappingEntity =\n+        testInstance.getTreatmentMapping(IRCC_CRC_DATA_SOURCE, \"Non_existing_treatment_type\");\n+\n+    assertThat(mappingEntity, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void whenGetMappingRulesPathsThenReturnValues() {\n+    Map<String, String> mappingRulesPaths = testInstance.getMappingRulesPaths();\n+\n+    assertThat(mappingRulesPaths, is(notNullValue()));\n+    String diagnosisMappingPath = mappingRulesPaths.get(MappingEntityType.DIAGNOSIS.getLabel());\n+    assertThat(\n+        diagnosisMappingPath, is(\"src/test/resources/test_data/mapping/diagnosis_mappings.json\"));\n+    String treatmentMappingPath = mappingRulesPaths.get(MappingEntityType.TREATMENT.getLabel());\n+    assertThat(\n+        treatmentMappingPath, is(\"src/test/resources/test_data/mapping/treatment_mappings.json\"));\n+  }\n+}"
  },
  {
    "sha": "cd48e8cdf3e5c7c485cfac424a7d5707247ae501",
    "filename": "rest/src/test/java/org/pdxfinder/controllers/MappingsControllerTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/java/org/pdxfinder/controllers/MappingsControllerTest.java",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/java/org/pdxfinder/controllers/MappingsControllerTest.java",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/rest/src/test/java/org/pdxfinder/controllers/MappingsControllerTest.java?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -332,6 +332,20 @@ public void given_mappingEntitiesExist_when_mappingEntitiesExported_then_returnM\n         .andExpect(status().isOk());\n   }\n \n+  @Test\n+  public void givenMappingsRulesExistWhenGetZipOfMappingRulesThenReturnZip() throws Exception {\n+    List<MappingEntity> mappingEntities = new ArrayList<>();\n+    MappingEntity mockedMappingEntity = getMappingEntity();\n+    mappingEntities.add(mockedMappingEntity);\n+    String url = MAPPINGS_URL + \"mappingRules\";\n+    PaginationDTO paginationDTO = new PaginationDTO();\n+    paginationDTO.setPage(PAGE);\n+    paginationDTO.setSize(SIZE);\n+    paginationDTO.setTotalElements(TOTAL_ELEMENTS);\n+\n+    this.mockMvc.perform(get(url)).andExpect(status().isOk());\n+  }\n+\n   private MappingContainer getMappingContainer() {\n     MappingContainer mappingContainer = new MappingContainer();\n     TreeMap<String, MappingEntity> mappings = new TreeMap<>();"
  },
  {
    "sha": "5f3d3645618455276e3c882e6d7087dade4c6366",
    "filename": "rest/src/test/resources/application-test.properties",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/resources/application-test.properties",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/resources/application-test.properties",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/rest/src/test/resources/application-test.properties?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -0,0 +1,16 @@\n+# Database location. Directory with files like providers data and mappings rules\n+# Example: data-base-location=/Users/{user}/repos/pdx/pdxfinder-data\n+data-dir=src/test/resources/test_data\n+\n+# Database location. It can be a directory (the same as data-dir) or the url of an server with the db\n+# Example (directory): data-base-location=/Users/{user}/repos/pdx/pdxfinder-data\n+# Example (server): data-base-location=tcp://hh-rke-wp-webadmin-20-worker-1.caas.ebi.ac.uk:31372\n+data-base-location=\n+\n+# H2 Config\n+spring.datasource.driver-class-name=org.h2.Driver\n+spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL\n+spring.datasource.username=testadmin\n+spring.datasource.password=testadmin\n+spring.datasource.platform=h2\n+"
  },
  {
    "sha": "b90e41da789626dcf5f46280247a8a95c3ddc321",
    "filename": "rest/src/test/resources/test_data/mapping/diagnosis_mappings.json",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/resources/test_data/mapping/diagnosis_mappings.json",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/resources/test_data/mapping/diagnosis_mappings.json",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/rest/src/test/resources/test_data/mapping/diagnosis_mappings.json?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -0,0 +1,56 @@\n+{\n+  \"mappings\":[\n+    {\n+      \"entityId\":1,\n+      \"entityType\":\"diagnosis\",\n+      \"mappingLabels\":[\n+        \"DataSource\",\n+        \"SampleDiagnosis\",\n+        \"OriginTissue\",\n+        \"TumorType\"\n+      ],\n+      \"mappingValues\":{\n+        \"OriginTissue\":\"blood\",\n+        \"TumorType\":\"primary\",\n+        \"SampleDiagnosis\":\"acute myeloid leukemia\",\n+        \"DataSource\":\"jax\"\n+      },\n+      \"mappedTermLabel\":\"Acute Myeloid Leukemia\",\n+      \"mappedTermUrl\":\"http://purl.obolibrary.org/obo/NCIT_C3171\",\n+      \"mapType\":\"direct\",\n+      \"justification\":\"0\",\n+      \"status\":\"validated\",\n+      \"suggestedMappings\":[\n+\n+      ],\n+      \"dateCreated\":1614090285640,\n+      \"dateUpdated\":null\n+    },\n+    {\n+      \"entityId\":2,\n+      \"entityType\":\"diagnosis\",\n+      \"mappingLabels\":[\n+        \"DataSource\",\n+        \"SampleDiagnosis\",\n+        \"OriginTissue\",\n+        \"TumorType\"\n+      ],\n+      \"mappingValues\":{\n+        \"OriginTissue\":\"bone marrow\",\n+        \"TumorType\":\"primary\",\n+        \"SampleDiagnosis\":\"acute myeloid leukemia\",\n+        \"DataSource\":\"jax\"\n+      },\n+      \"mappedTermLabel\":\"Acute Myeloid Leukemia\",\n+      \"mappedTermUrl\":\"http://purl.obolibrary.org/obo/NCIT_C3171\",\n+      \"mapType\":\"direct\",\n+      \"justification\":\"0\",\n+      \"status\":\"validated\",\n+      \"suggestedMappings\":[\n+\n+      ],\n+      \"dateCreated\":1614090285640,\n+      \"dateUpdated\":null\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "07f8d7c650bf700baa87b4ffb93ebd2938a527a5",
    "filename": "rest/src/test/resources/test_data/mapping/treatment_mappings.json",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/PDXFinder/pdx-admin-backend/blob/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/resources/test_data/mapping/treatment_mappings.json",
    "raw_url": "https://github.com/PDXFinder/pdx-admin-backend/raw/24510ac1d52b77eda34d822997658c395cfaea9f/rest/src/test/resources/test_data/mapping/treatment_mappings.json",
    "contents_url": "https://api.github.com/repos/PDXFinder/pdx-admin-backend/contents/rest/src/test/resources/test_data/mapping/treatment_mappings.json?ref=24510ac1d52b77eda34d822997658c395cfaea9f",
    "patch": "@@ -0,0 +1,70 @@\n+{\n+  \"mappings\":[\n+    {\n+      \"entityId\":1527,\n+      \"entityType\":\"treatment\",\n+      \"mappingLabels\":[\n+        \"DataSource\",\n+        \"TreatmentName\"\n+      ],\n+      \"mappingValues\":{\n+        \"DataSource\":\"ircc-crc\",\n+        \"TreatmentName\":\"0.9% Solution of Sodium Chloride\"\n+      },\n+      \"mappedTermLabel\":\"Saline\",\n+      \"mappedTermUrl\":\"http://purl.obolibrary.org/obo/NCIT_C821\",\n+      \"mapType\":\"inferred\",\n+      \"justification\":\"0\",\n+      \"status\":\"validated\",\n+      \"suggestedMappings\":[\n+\n+      ],\n+      \"dateCreated\":1614090292783,\n+      \"dateUpdated\":null\n+    },\n+    {\n+      \"entityId\":1528,\n+      \"entityType\":\"treatment\",\n+      \"mappingLabels\":[\n+        \"DataSource\",\n+        \"TreatmentName\"\n+      ],\n+      \"mappingValues\":{\n+        \"DataSource\":\"ircc-crc\",\n+        \"TreatmentName\":\"Erbitux, Cetuximab\"\n+      },\n+      \"mappedTermLabel\":\"Cetuximab\",\n+      \"mappedTermUrl\":\"http://purl.obolibrary.org/obo/NCIT_C1723\",\n+      \"mapType\":\"inferred\",\n+      \"justification\":\"0\",\n+      \"status\":\"validated\",\n+      \"suggestedMappings\":[\n+\n+      ],\n+      \"dateCreated\":1614090292783,\n+      \"dateUpdated\":null\n+    },\n+    {\n+      \"entityId\":1529,\n+      \"entityType\":\"treatment\",\n+      \"mappingLabels\":[\n+        \"DataSource\",\n+        \"TreatmentName\"\n+      ],\n+      \"mappingValues\":{\n+        \"DataSource\":\"jax\",\n+        \"TreatmentName\":\"Saline\"\n+      },\n+      \"mappedTermLabel\":\"Saline\",\n+      \"mappedTermUrl\":\"http://purl.obolibrary.org/obo/NCIT_C821\",\n+      \"mapType\":\"direct\",\n+      \"justification\":\"0\",\n+      \"status\":\"validated\",\n+      \"suggestedMappings\":[\n+\n+      ],\n+      \"dateCreated\":1614090292784,\n+      \"dateUpdated\":null\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  }
]
