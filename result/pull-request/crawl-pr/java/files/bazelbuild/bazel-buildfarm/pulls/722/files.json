[
  {
    "sha": "65f41e66febf5676383a390b7223109c9de1a2f8",
    "filename": ".bazelci/static_analysis_checks.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/.bazelci/static_analysis_checks.xml",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/.bazelci/static_analysis_checks.xml",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/.bazelci/static_analysis_checks.xml?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -48,8 +48,6 @@\n     <exclude name=\"UnusedFormalParameter\"/>\n     <exclude name=\"UnusedImports\"/>\n     <exclude name=\"UnusedLocalVariable\"/>\n-    <exclude name=\"UnusedPrivateField\"/>\n-    <exclude name=\"UnusedPrivateMethod\"/>\n     <exclude name=\"UseAssertEqualsInsteadOfAssertTrue\"/>\n     <exclude name=\"UseAssertNullInsteadOfAssertTrue\"/>\n     <exclude name=\"UseAssertSameInsteadOfAssertTrue\"/>"
  },
  {
    "sha": "d9df31c7fad2544617f1a0caba9f0b8a56d23775",
    "filename": "src/main/java/build/buildfarm/WorkerProfile.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/WorkerProfile.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/WorkerProfile.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/WorkerProfile.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -230,8 +230,7 @@ private static void workerProfile(String[] args) throws IOException {\n     }\n   }\n \n-  private static void getWorkerProfile(Instance instance) {\n-    // List<String> worker = instance.\n+  public static void getWorkerProfile(Instance instance) {\n     WorkerProfileMessage response = instance.getWorkerProfile();\n     System.out.println(\"\\nWorkerProfile:\");\n     String strIntFormat = \"%-50s : %d\";"
  },
  {
    "sha": "09fb190551c62c5640efec0b66e056d87e436406",
    "filename": "src/main/java/build/buildfarm/cas/DigestMismatchException.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/cas/DigestMismatchException.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/cas/DigestMismatchException.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/cas/DigestMismatchException.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -30,4 +30,12 @@ public DigestMismatchException(Digest actual, Digest expected) {\n     this.actual = actual;\n     this.expected = expected;\n   }\n+\n+  public Digest getActual() {\n+    return actual;\n+  }\n+\n+  public Digest getExpected() {\n+    return expected;\n+  }\n }"
  },
  {
    "sha": "eb28a1f5f45c4a27e15027f66c15ba0fdd0bb0fe",
    "filename": "src/main/java/build/buildfarm/cas/MemoryCAS.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/cas/MemoryCAS.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/cas/MemoryCAS.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/cas/MemoryCAS.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -244,6 +244,7 @@ public Write getWrite(Digest digest, UUID uuid, RequestMetadata requestMetadata)\n   @Override\n   public void put(Blob blob) {\n     put(blob, null);\n+    onPut.accept(blob.getDigest());\n   }\n \n   @Override\n@@ -254,6 +255,7 @@ public void put(Blob blob, Runnable onExpiration) {\n \n     if (add(blob, onExpiration)) {\n       writes.getFuture(blob.getDigest()).set(blob.getData());\n+      onPut.accept(blob.getDigest());\n     }\n   }\n "
  },
  {
    "sha": "bf51b5c1c4ec45eff6505f71d966869591c905f1",
    "filename": "src/main/java/build/buildfarm/common/redis/BalancedRedisQueue.java",
    "status": "modified",
    "additions": 0,
    "deletions": 14,
    "changes": 14,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/common/redis/BalancedRedisQueue.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/common/redis/BalancedRedisQueue.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/common/redis/BalancedRedisQueue.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -370,20 +370,6 @@ private int nextQueueInRoundRobin(int index) {\n     return index + 1;\n   }\n \n-  /**\n-   * @brief Get the previous queue in the round robin.\n-   * @details If we are currently on the first queue it becomes the last queue.\n-   * @param index Current queue index.\n-   * @return And adjusted val based on the current queue index.\n-   * @note Suggested return identifier: adjustedCurrentQueue.\n-   */\n-  private int previousQueueInRoundRobin(int index) {\n-    if (index == 0) {\n-      return queues.size() - 1;\n-    }\n-    return index - 1;\n-  }\n-\n   /**\n    * @brief List of queues in a particular order for full iteration over all of the queues.\n    * @details An ordered list of queues for operations that assume to traverse over all of the"
  },
  {
    "sha": "139313d28b2e68dbac12c1a73e5c7421a15be108",
    "filename": "src/main/java/build/buildfarm/instance/server/AbstractServerInstance.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/server/AbstractServerInstance.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/server/AbstractServerInstance.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/instance/server/AbstractServerInstance.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -138,8 +138,6 @@\n   protected final Map<Digest, ByteString> activeBlobWrites;\n   protected final DigestUtil digestUtil;\n \n-  private static int VALIDATE_TIMEOUT_SECONDS = 30;\n-\n   public static final String ACTION_INPUT_ROOT_DIRECTORY_PATH = \"\";\n \n   public static final String DUPLICATE_DIRENT ="
  },
  {
    "sha": "f8e0c9a2e160426ade7aabd9c1bb0fa5a8ac077a",
    "filename": "src/main/java/build/buildfarm/instance/shard/JedisCasWorkerMap.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/JedisCasWorkerMap.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/JedisCasWorkerMap.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/instance/shard/JedisCasWorkerMap.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -22,7 +22,6 @@\n import java.io.IOException;\n import java.util.Map;\n import java.util.Set;\n-import org.redisson.api.RSetMultimapCache;\n import redis.clients.jedis.JedisClusterPipeline;\n \n /**\n@@ -49,13 +48,6 @@\n    */\n   private final int keyExpiration_s;\n \n-  /**\n-   * @field cacheMap\n-   * @brief A memory cached redis container to serve as the cas lookup.\n-   * @details This is only used if the object is configured to use a memory cache.\n-   */\n-  private RSetMultimapCache<String, String> cacheMap;\n-\n   /**\n    * @brief Constructor.\n    * @details Construct storage object under the assumption that all calls will go to redis (no"
  },
  {
    "sha": "457bbe89cca28c1e4f5547049c75c5d4759e9934",
    "filename": "src/main/java/build/buildfarm/instance/shard/RedisShardBackplane.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/RedisShardBackplane.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/RedisShardBackplane.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/instance/shard/RedisShardBackplane.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -145,7 +145,6 @@\n   private RedisShardSubscriber subscriber = null;\n   private RedisShardSubscription operationSubscription = null;\n   private ExecutorService subscriberService = null;\n-  private boolean poolStarted = false;\n   private @Nullable RedisClient client = null;\n   private @Nullable RedissonClient redissonClient = null;\n "
  },
  {
    "sha": "457f2a674401530f5866590ea1cd5dbd01f5f033",
    "filename": "src/main/java/build/buildfarm/instance/shard/RedissonCasWorkerMap.java",
    "status": "modified",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/RedissonCasWorkerMap.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/RedissonCasWorkerMap.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/instance/shard/RedissonCasWorkerMap.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -34,14 +34,6 @@\n  */\n public class RedissonCasWorkerMap implements CasWorkerMap {\n \n-  /**\n-   * @field name\n-   * @brief The unique name of the map.\n-   * @details The name is used in redis to store/access the data. If two maps had the same name,\n-   *     they would be instances of the same underlying redis map.\n-   */\n-  private final String name;\n-\n   /**\n    * @field keyExpiration_s\n    * @brief When keys will expire automatically.\n@@ -67,7 +59,6 @@\n    * @note Overloaded.\n    */\n   public RedissonCasWorkerMap(RedissonClient client, String name, int keyExpiration_s) {\n-    this.name = name;\n     this.keyExpiration_s = keyExpiration_s;\n     this.cacheMap = client.getSetMultimapCache(name);\n   }"
  },
  {
    "sha": "38ac1c594ba3ababbd4fb96061f69214370b6635",
    "filename": "src/main/java/build/buildfarm/instance/shard/Writes.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/Writes.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/instance/shard/Writes.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/instance/shard/Writes.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -40,7 +40,6 @@\n import java.util.function.Supplier;\n \n class Writes {\n-  private final Supplier<Instance> instanceSupplier;\n   private final LoadingCache<BlobWriteKey, Instance> blobWriteInstances;\n \n   private class InvalidatingWrite implements Write {\n@@ -121,7 +120,6 @@ public void reset() {\n   }\n \n   Writes(Supplier<Instance> instanceSupplier, long writeExpiresAfter, TimeUnit writeExpiresUnit) {\n-    this.instanceSupplier = instanceSupplier;\n     blobWriteInstances =\n         CacheBuilder.newBuilder()\n             .expireAfterWrite(writeExpiresAfter, writeExpiresUnit)"
  },
  {
    "sha": "1fa70cfa49507b05fb74538a6ee6b2ef28f057eb",
    "filename": "src/main/java/build/buildfarm/metrics/gcp/GcpMetricsPublisher.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/metrics/gcp/GcpMetricsPublisher.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/metrics/gcp/GcpMetricsPublisher.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/metrics/gcp/GcpMetricsPublisher.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -16,10 +16,8 @@\n \n import build.buildfarm.metrics.AbstractMetricsPublisher;\n import build.buildfarm.v1test.MetricsConfig;\n-import java.util.logging.Logger;\n \n public class GcpMetricsPublisher extends AbstractMetricsPublisher {\n-  private static final Logger logger = Logger.getLogger(GcpMetricsPublisher.class.getName());\n \n   public GcpMetricsPublisher(MetricsConfig metricsConfig) {\n     super(metricsConfig.getClusterId());"
  },
  {
    "sha": "f33aad6ca19e7acfbdb2933d32e75855160efc31",
    "filename": "src/main/java/build/buildfarm/proxy/http/ByteStreamService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/ByteStreamService.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/ByteStreamService.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/proxy/http/ByteStreamService.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -40,10 +40,8 @@\n import java.io.IOException;\n import java.io.OutputStream;\n import java.util.Map;\n-import java.util.logging.Logger;\n \n public class ByteStreamService extends ByteStreamGrpc.ByteStreamImplBase {\n-  private static final Logger logger = Logger.getLogger(ByteStreamService.class.getName());\n   private static final int DEFAULT_CHUNK_SIZE = 1024 * 16;\n \n   private final Map<String, WriteObserver> writeObservers = Maps.newConcurrentMap();"
  },
  {
    "sha": "357f15ac4546e728157ea51371d11cb971d61c3e",
    "filename": "src/main/java/build/buildfarm/proxy/http/ContentAddressableStorageService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/ContentAddressableStorageService.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/ContentAddressableStorageService.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/proxy/http/ContentAddressableStorageService.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -42,12 +42,9 @@\n import java.io.IOException;\n import java.util.concurrent.ExecutionException;\n import java.util.function.Function;\n-import java.util.logging.Logger;\n \n public class ContentAddressableStorageService\n     extends ContentAddressableStorageGrpc.ContentAddressableStorageImplBase {\n-  private static final Logger logger =\n-      Logger.getLogger(ContentAddressableStorageService.class.getName());\n \n   private final SimpleBlobStore simpleBlobStore;\n   private final int treeDefaultPageSize;"
  },
  {
    "sha": "0dccb24d5cd094c46f2e46e3c643dc7e26fde77f",
    "filename": "src/main/java/build/buildfarm/proxy/http/HttpProxy.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/HttpProxy.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/HttpProxy.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/proxy/http/HttpProxy.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -38,7 +38,6 @@\n   private static final Logger nettyLogger = Logger.getLogger(\"io.grpc.netty\");\n   public static final Logger logger = Logger.getLogger(HttpProxy.class.getName());\n \n-  private final HttpProxyOptions options;\n   private final Server server;\n \n   public HttpProxy(HttpProxyOptions options, @Nullable Credentials creds)\n@@ -50,7 +49,6 @@ public HttpProxy(\n       ServerBuilder<?> serverBuilder, @Nullable Credentials creds, HttpProxyOptions options)\n       throws URISyntaxException, SSLException {\n     super(\"HttpProxy\");\n-    this.options = options;\n     SimpleBlobStore simpleBlobStore =\n         HttpBlobStore.create(\n             URI.create(options.httpCache),"
  },
  {
    "sha": "29c77f4f41c7d9c00060e13125a90149962af73c",
    "filename": "src/main/java/build/buildfarm/proxy/http/WriteStreamObserver.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/WriteStreamObserver.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/proxy/http/WriteStreamObserver.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/proxy/http/WriteStreamObserver.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -24,7 +24,6 @@\n class WriteStreamObserver implements StreamObserver<WriteRequest> {\n   private final WriteObserverSource writeObserverSource;\n   private final StreamObserver<WriteResponse> responseObserver;\n-  private Throwable error = null;\n   private WriteObserver write = null;\n \n   WriteStreamObserver(\n@@ -65,7 +64,6 @@ public void onNext(WriteRequest request) {\n \n   @Override\n   public void onError(Throwable t) {\n-    error = t;\n     responseObserver.onError(t);\n   }\n "
  },
  {
    "sha": "92b0e1a59820d063e825bc24b4b504d53beb8b93",
    "filename": "src/main/java/build/buildfarm/server/ContentAddressableStorageService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/server/ContentAddressableStorageService.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/server/ContentAddressableStorageService.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/server/ContentAddressableStorageService.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -64,7 +64,6 @@\n   private final Instances instances;\n   private final long writeDeadlineAfter;\n   private final TimeUnit writeDeadlineAfterUnits;\n-  private final Level requestLogLevel;\n \n   public ContentAddressableStorageService(\n       Instances instances,\n@@ -74,7 +73,6 @@ public ContentAddressableStorageService(\n     this.instances = instances;\n     this.writeDeadlineAfter = writeDeadlineAfter;\n     this.writeDeadlineAfterUnits = writeDeadlineAfterUnits;\n-    this.requestLogLevel = requestLogLevel;\n   }\n \n   String checkMessage(Digest digest, boolean found) {"
  },
  {
    "sha": "3b719e663a2c77bba9a865c3d425038edc83331d",
    "filename": "src/main/java/build/buildfarm/server/OperationQueueService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/server/OperationQueueService.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/server/OperationQueueService.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/server/OperationQueueService.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -24,14 +24,12 @@\n import build.buildfarm.v1test.QueueEntry;\n import build.buildfarm.v1test.TakeOperationRequest;\n import com.google.common.base.Throwables;\n-import com.google.common.util.concurrent.ListenableFuture;\n import com.google.longrunning.Operation;\n import com.google.rpc.Code;\n import io.grpc.Status;\n import io.grpc.StatusRuntimeException;\n import io.grpc.stub.ServerCallStreamObserver;\n import io.grpc.stub.StreamObserver;\n-import java.util.concurrent.ExecutionException;\n import java.util.function.Consumer;\n \n public class OperationQueueService extends OperationQueueGrpc.OperationQueueImplBase {\n@@ -41,14 +39,6 @@ public OperationQueueService(Instances instances) {\n     this.instances = instances;\n   }\n \n-  private static <V> V getUnchecked(ListenableFuture<V> future) throws InterruptedException {\n-    try {\n-      return future.get();\n-    } catch (ExecutionException e) {\n-      return null;\n-    }\n-  }\n-\n   private static class OperationQueueMatchListener implements MatchListener {\n     private final Instance instance;\n     private final InterruptingPredicate onMatch;"
  },
  {
    "sha": "ee4abfaae0cf69f9da836707adcf31a1e7cc6dde",
    "filename": "src/main/java/build/buildfarm/server/WriteStreamObserver.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/server/WriteStreamObserver.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/server/WriteStreamObserver.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/server/WriteStreamObserver.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -31,7 +31,6 @@\n import build.buildfarm.common.Write;\n import build.buildfarm.common.grpc.TracingMetadataUtils;\n import build.buildfarm.common.io.FeedbackOutputStream;\n-import build.buildfarm.instance.Instance;\n import com.google.bytestream.ByteStreamProto.WriteRequest;\n import com.google.bytestream.ByteStreamProto.WriteResponse;\n import com.google.common.util.concurrent.FutureCallback;\n@@ -64,7 +63,6 @@\n   private String name = null;\n   private Write write = null;\n   private FeedbackOutputStream out = null;\n-  private Instance instance = null;\n   private final AtomicReference<Throwable> exception = new AtomicReference<>(null);\n   private final AtomicBoolean wasReady = new AtomicBoolean(false);\n   private long expectedCommittedSize = -1;"
  },
  {
    "sha": "ba5b4c34654bbb1b541091f12e2cb223654564ab",
    "filename": "src/main/java/build/buildfarm/worker/FuseCAS.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/FuseCAS.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/FuseCAS.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/worker/FuseCAS.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -477,14 +477,6 @@ public void destroyInputRoot(String topdir) throws IOException, InterruptedExcep\n     decMounts();\n   }\n \n-  private DirectoryEntry containingDirectoryForPath(String path) {\n-    int endIndex = path.lastIndexOf('/');\n-    if (endIndex == 0) {\n-      endIndex = 1;\n-    }\n-    return directoryForPath(path.substring(0, endIndex));\n-  }\n-\n   private DirectoryEntry containingDirectoryForCreate(String path) {\n     int endIndex = path.lastIndexOf('/');\n     if (endIndex == 0) {"
  },
  {
    "sha": "554b7d76e9b4393a32458c016dd1e9f8b7deb640",
    "filename": "src/main/java/build/buildfarm/worker/UploadManifest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/UploadManifest.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/UploadManifest.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/worker/UploadManifest.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -122,9 +122,6 @@ public void addDirectories(Iterable<Path> dirs)\n     }\n   }\n \n-  private void addFiles(Iterable<Path> files, boolean isDirectory, CASInsertionPolicy policy)\n-      throws IllegalStateException, IOException, InterruptedException {}\n-\n   /** Map of digests to file paths to upload. */\n   public Map<Digest, Path> getDigestToFile() {\n     return digestToFile;"
  },
  {
    "sha": "bb5774afbc116f10dbec2a49d6367f7f77dd9ecd",
    "filename": "src/main/java/build/buildfarm/worker/shard/CFCExecFileSystem.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/shard/CFCExecFileSystem.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/shard/CFCExecFileSystem.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/worker/shard/CFCExecFileSystem.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -74,8 +74,6 @@\n   private final ExecutorService fetchService = newWorkStealingPool(128);\n   private final ExecutorService removeDirectoryService;\n   private final ExecutorService accessRecorder;\n-  private final long deadlineAfter;\n-  private final TimeUnit deadlineAfterUnits;\n \n   CFCExecFileSystem(\n       Path root,\n@@ -92,8 +90,6 @@\n     this.linkInputDirectories = linkInputDirectories;\n     this.removeDirectoryService = removeDirectoryService;\n     this.accessRecorder = accessRecorder;\n-    this.deadlineAfter = deadlineAfter;\n-    this.deadlineAfterUnits = deadlineAfterUnits;\n   }\n \n   @Override"
  },
  {
    "sha": "ca7543d151e7d7f2d9ef333e8e5cb2a7eeee300a",
    "filename": "src/main/java/build/buildfarm/worker/shard/ShardWorkerContext.java",
    "status": "modified",
    "additions": 0,
    "deletions": 57,
    "changes": 57,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/shard/ShardWorkerContext.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/shard/ShardWorkerContext.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/worker/shard/ShardWorkerContext.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -27,7 +27,6 @@\n import build.bazel.remote.execution.v2.Digest;\n import build.bazel.remote.execution.v2.Directory;\n import build.bazel.remote.execution.v2.DirectoryNode;\n-import build.bazel.remote.execution.v2.ExecuteOperationMetadata;\n import build.bazel.remote.execution.v2.ExecutionStage;\n import build.bazel.remote.execution.v2.FileNode;\n import build.bazel.remote.execution.v2.OutputFile;\n@@ -49,7 +48,6 @@\n import build.buildfarm.v1test.ExecutionPolicy;\n import build.buildfarm.v1test.QueueEntry;\n import build.buildfarm.v1test.QueuedOperation;\n-import build.buildfarm.v1test.QueuedOperationMetadata;\n import build.buildfarm.worker.DequeueMatchEvaluator;\n import build.buildfarm.worker.DequeueMatchSettings;\n import build.buildfarm.worker.ExecutionPolicies;\n@@ -63,14 +61,11 @@\n import com.google.common.base.Preconditions;\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSetMultimap;\n import com.google.common.collect.ListMultimap;\n import com.google.common.collect.Maps;\n import com.google.common.collect.SetMultimap;\n-import com.google.common.collect.Sets;\n import com.google.longrunning.Operation;\n-import com.google.protobuf.Any;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.Duration;\n import com.google.protobuf.InvalidProtocolBufferException;\n@@ -92,7 +87,6 @@\n import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import java.util.Stack;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n@@ -112,16 +106,13 @@\n   private final SetMultimap<String, String> matchProvisions;\n   private final Duration operationPollPeriod;\n   private final OperationPoller operationPoller;\n-  private final int inlineContentLimit;\n   private final int inputFetchStageWidth;\n   private final int executeStageWidth;\n   private final Backplane backplane;\n   private final ExecFileSystem execFileSystem;\n   private final InputStreamFactory inputStreamFactory;\n   private final ListMultimap<String, ExecutionPolicy> policies;\n   private final Instance instance;\n-  private final long deadlineAfter;\n-  private final TimeUnit deadlineAfterUnits;\n   private final Duration defaultActionTimeout;\n   private final Duration maximumActionTimeout;\n   private final boolean limitExecution;\n@@ -173,16 +164,13 @@\n     this.matchProvisions = getMatchProvisions(platform, policies, executeStageWidth);\n     this.operationPollPeriod = operationPollPeriod;\n     this.operationPoller = operationPoller;\n-    this.inlineContentLimit = inlineContentLimit;\n     this.inputFetchStageWidth = inputFetchStageWidth;\n     this.executeStageWidth = executeStageWidth;\n     this.backplane = backplane;\n     this.execFileSystem = execFileSystem;\n     this.inputStreamFactory = inputStreamFactory;\n     this.policies = ExecutionPolicies.toMultimap(policies);\n     this.instance = instance;\n-    this.deadlineAfter = deadlineAfter;\n-    this.deadlineAfterUnits = deadlineAfterUnits;\n     this.defaultActionTimeout = defaultActionTimeout;\n     this.maximumActionTimeout = maximumActionTimeout;\n     this.limitExecution = limitExecution;\n@@ -389,36 +377,6 @@ public void setOnCancelHandler(Runnable onCancelHandler) {\n     }\n   }\n \n-  private ExecuteOperationMetadata expectExecuteOperationMetadata(Operation operation) {\n-    Any metadata = operation.getMetadata();\n-    if (metadata == null) {\n-      return null;\n-    }\n-\n-    if (metadata.is(QueuedOperationMetadata.class)) {\n-      try {\n-        return operation\n-            .getMetadata()\n-            .unpack(QueuedOperationMetadata.class)\n-            .getExecuteOperationMetadata();\n-      } catch (InvalidProtocolBufferException e) {\n-        logger.log(Level.SEVERE, \"invalid operation metadata: \" + operation.getName(), e);\n-        return null;\n-      }\n-    }\n-\n-    if (metadata.is(ExecuteOperationMetadata.class)) {\n-      try {\n-        return operation.getMetadata().unpack(ExecuteOperationMetadata.class);\n-      } catch (InvalidProtocolBufferException e) {\n-        logger.log(Level.SEVERE, \"invalid operation metadata: \" + operation.getName(), e);\n-        return null;\n-      }\n-    }\n-\n-    return null;\n-  }\n-\n   private void requeue(String operationName) {\n     QueueEntry queueEntry = activeOperations.remove(operationName);\n     try {\n@@ -751,21 +709,6 @@ public boolean putOperation(Operation operation, Action action)\n     return success;\n   }\n \n-  private Map<Digest, Directory> createDirectoriesIndex(Iterable<Directory> directories) {\n-    Set<Digest> directoryDigests = Sets.newHashSet();\n-    ImmutableMap.Builder<Digest, Directory> directoriesIndex = new ImmutableMap.Builder<>();\n-    for (Directory directory : directories) {\n-      // double compute here...\n-      Digest directoryDigest = getDigestUtil().compute(directory);\n-      if (!directoryDigests.add(directoryDigest)) {\n-        continue;\n-      }\n-      directoriesIndex.put(directoryDigest, directory);\n-    }\n-\n-    return directoriesIndex.build();\n-  }\n-\n   @Override\n   public Path createExecDir(\n       String operationName, Map<Digest, Directory> directoriesIndex, Action action, Command command)"
  },
  {
    "sha": "360e869722364befc107cd7ac2db4ad0bba232e4",
    "filename": "src/main/java/build/buildfarm/worker/shard/ShardWorkerInstance.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/shard/ShardWorkerInstance.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/main/java/build/buildfarm/worker/shard/ShardWorkerInstance.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/main/java/build/buildfarm/worker/shard/ShardWorkerInstance.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -66,7 +66,6 @@\n public class ShardWorkerInstance extends AbstractServerInstance {\n   private static final Logger logger = Logger.getLogger(ShardWorkerInstance.class.getName());\n \n-  private final ShardWorkerInstanceConfig config;\n   private final Backplane backplane;\n \n   public ShardWorkerInstance(\n@@ -77,7 +76,6 @@ public ShardWorkerInstance(\n       ShardWorkerInstanceConfig config)\n       throws ConfigurationException {\n     super(name, digestUtil, contentAddressableStorage, null, null, null, null);\n-    this.config = config;\n     this.backplane = backplane;\n   }\n "
  },
  {
    "sha": "cd97624c6d87dff663323748728867be8546ccc2",
    "filename": "src/test/java/build/buildfarm/metrics/MetricsPublisherTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/bazelbuild/bazel-buildfarm/blob/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/test/java/build/buildfarm/metrics/MetricsPublisherTest.java",
    "raw_url": "https://github.com/bazelbuild/bazel-buildfarm/raw/9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f/src/test/java/build/buildfarm/metrics/MetricsPublisherTest.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/bazel-buildfarm/contents/src/test/java/build/buildfarm/metrics/MetricsPublisherTest.java?ref=9ac230d5c685d0dd1a0a43bc0582cdd8e3fc674f",
    "patch": "@@ -31,14 +31,12 @@\n import com.google.protobuf.util.JsonFormat;\n import com.google.rpc.PreconditionFailure;\n import com.google.rpc.Status;\n-import java.util.function.Consumer;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n @RunWith(JUnit4.class)\n public class MetricsPublisherTest {\n-  private Consumer<String> snsMetricsPublisher = requestMetadata -> {};\n   private ExecuteOperationMetadata defaultExecuteOperationMetadata =\n       ExecuteOperationMetadata.getDefaultInstance();\n   private RequestMetadata defaultRequestMetadata ="
  }
]
