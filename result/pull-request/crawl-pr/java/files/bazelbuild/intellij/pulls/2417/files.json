[
  {
    "sha": "559001ccafbb1681362fad154002fd29bc6c0492",
    "filename": "base/src/com/google/idea/blaze/base/lang/buildfile/editor/BuildEnterHandler.java",
    "status": "modified",
    "additions": 7,
    "deletions": 14,
    "changes": 21,
    "blob_url": "https://github.com/bazelbuild/intellij/blob/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/editor/BuildEnterHandler.java",
    "raw_url": "https://github.com/bazelbuild/intellij/raw/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/editor/BuildEnterHandler.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/intellij/contents/base/src/com/google/idea/blaze/base/lang/buildfile/editor/BuildEnterHandler.java?ref=2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9",
    "patch": "@@ -15,7 +15,6 @@\n  */\n package com.google.idea.blaze.base.lang.buildfile.editor;\n \n-import com.google.idea.blaze.base.lang.buildfile.formatting.BuildCodeStyleSettings;\n import com.google.idea.blaze.base.lang.buildfile.lexer.BuildToken;\n import com.google.idea.blaze.base.lang.buildfile.psi.Argument;\n import com.google.idea.blaze.base.lang.buildfile.psi.BuildElement;\n@@ -27,6 +26,7 @@\n import com.google.idea.blaze.base.lang.buildfile.psi.ReturnStatement;\n import com.google.idea.blaze.base.lang.buildfile.psi.StatementListContainer;\n import com.google.idea.blaze.base.lang.buildfile.psi.util.PsiUtils;\n+import com.intellij.application.options.CodeStyle;\n import com.intellij.codeInsight.editorActions.enter.EnterHandlerDelegateAdapter;\n import com.intellij.ide.DataManager;\n import com.intellij.injected.editor.EditorWindow;\n@@ -46,7 +46,6 @@\n import com.intellij.psi.PsiFileSystemItem;\n import com.intellij.psi.PsiWhiteSpace;\n import com.intellij.psi.codeStyle.CodeStyleSettings;\n-import com.intellij.psi.codeStyle.CodeStyleSettingsManager;\n import com.intellij.psi.codeStyle.CommonCodeStyleSettings.IndentOptions;\n import com.intellij.psi.impl.source.tree.injected.InjectedLanguageUtil;\n import com.intellij.util.text.CharArrayUtil;\n@@ -85,7 +84,7 @@ public Result preprocessEnter(\n     PsiDocumentManager.getInstance(file.getProject()).commitDocument(doc);\n \n     // #api173: get file, language specific settings instead\n-    CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(file.getProject());\n+    CodeStyleSettings settings = CodeStyle.getSettings(file.getProject());\n     Integer indent = determineIndent(file, editor, offset, settings);\n     if (indent == null) {\n       return Result.Continue;\n@@ -131,10 +130,7 @@ private static boolean isApplicable(PsiFile file, DataContext dataContext) {\n     }\n     Boolean isSplitLine =\n         DataManager.getInstance().loadFromDataContext(dataContext, SplitLineAction.SPLIT_LINE_KEY);\n-    if (isSplitLine != null) {\n-      return false;\n-    }\n-    return true;\n+    return isSplitLine == null;\n   }\n \n   /**\n@@ -155,7 +151,6 @@ private static Integer determineIndent(\n     }\n \n     IndentOptions indentOptions = settings.getIndentOptions(file.getFileType());\n-    BuildCodeStyleSettings buildSettings = settings.getCustomSettings(BuildCodeStyleSettings.class);\n     if (endsBlock(element)) {\n       // current line indent subtract block indent\n       return Math.max(0, getIndent(doc, element) - indentOptions.INDENT_SIZE);\n@@ -177,19 +172,17 @@ private static Integer determineIndent(\n       if (firstChild != null && firstChild.getNode().getStartOffset() < offset) {\n         return getIndent(doc, firstChild);\n       }\n-      return lineIndent(doc, listStart.line)\n-          + additionalIndent(parent, buildSettings, indentOptions);\n+      return lineIndent(doc, listStart.line) + additionalIndent(parent, indentOptions);\n     }\n     if (parent instanceof StatementListContainer && afterColon(doc, offset)) {\n-      return getIndent(doc, parent) + additionalIndent(parent, buildSettings, indentOptions);\n+      return getIndent(doc, parent) + additionalIndent(parent, indentOptions);\n     }\n     return null;\n   }\n \n-  private static int additionalIndent(\n-      PsiElement parent, BuildCodeStyleSettings buildSettings, IndentOptions indentOptions) {\n+  private static int additionalIndent(PsiElement parent, IndentOptions indentOptions) {\n     if (parent instanceof ParameterList) {\n-      return buildSettings.declarationParameterIndent;\n+      return indentOptions.DECLARATION_PARAMETER_INDENT;\n     }\n     return parent instanceof StatementListContainer\n         ? indentOptions.INDENT_SIZE"
  },
  {
    "sha": "0f4a94a1400edbb03c9cfcc5828901332129a797",
    "filename": "base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettings.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/bazelbuild/intellij/blob/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettings.java",
    "raw_url": "https://github.com/bazelbuild/intellij/raw/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettings.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/intellij/contents/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettings.java?ref=2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9",
    "patch": "@@ -18,15 +18,9 @@\n import com.intellij.psi.codeStyle.CodeStyleSettings;\n import com.intellij.psi.codeStyle.CustomCodeStyleSettings;\n \n-/**\n- * BUILD/Skylark-specific code style settings.\n- *\n- * <p>#api183: use IndentOptions#DECLARATION_PARAMETER_INDENT directly (if it's ever actually used)\n- */\n+/** BUILD/Skylark-specific code style settings. */\n public class BuildCodeStyleSettings extends CustomCodeStyleSettings {\n \n-  public int declarationParameterIndent = 8;\n-\n   BuildCodeStyleSettings(CodeStyleSettings container) {\n     super(\"BuildCodeStyleSettings\", container);\n   }"
  },
  {
    "sha": "0499d5ffaf2e9156294cdc95a1f2a6b6b5a79d0a",
    "filename": "base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettingsProvider.java",
    "status": "modified",
    "additions": 16,
    "deletions": 15,
    "changes": 31,
    "blob_url": "https://github.com/bazelbuild/intellij/blob/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettingsProvider.java",
    "raw_url": "https://github.com/bazelbuild/intellij/raw/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettingsProvider.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/intellij/contents/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildCodeStyleSettingsProvider.java?ref=2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9",
    "patch": "@@ -20,7 +20,7 @@\n import com.intellij.application.options.CodeStyleAbstractConfigurable;\n import com.intellij.application.options.CodeStyleAbstractPanel;\n import com.intellij.application.options.TabbedLanguageCodeStylePanel;\n-import com.intellij.openapi.options.Configurable;\n+import com.intellij.psi.codeStyle.CodeStyleConfigurable;\n import com.intellij.psi.codeStyle.CodeStyleSettings;\n import com.intellij.psi.codeStyle.CodeStyleSettingsProvider;\n import com.intellij.psi.codeStyle.CustomCodeStyleSettings;\n@@ -30,28 +30,29 @@\n public class BuildCodeStyleSettingsProvider extends CodeStyleSettingsProvider {\n \n   @Override\n-  public Configurable createSettingsPage(\n+  public CodeStyleConfigurable createConfigurable(\n       CodeStyleSettings settings, CodeStyleSettings originalSettings) {\n     return new CodeStyleAbstractConfigurable(\n         settings, originalSettings, BuildFileType.INSTANCE.getDescription()) {\n       @Override\n-      protected CodeStyleAbstractPanel createPanel(final CodeStyleSettings settings) {\n-        return new TabbedLanguageCodeStylePanel(\n-            BuildFileLanguage.INSTANCE, getCurrentSettings(), settings) {\n-          @Override\n-          protected void initTabs(CodeStyleSettings settings) {\n-            addIndentOptionsTab(settings);\n-          }\n-        };\n-      }\n-\n-      @Override\n-      public String getHelpTopic() {\n-        return null;\n+      protected CodeStyleAbstractPanel createPanel(CodeStyleSettings settings) {\n+        return new SimpleCodeStyleMainPanel(getCurrentSettings(), settings) {};\n       }\n     };\n   }\n \n+  private static class SimpleCodeStyleMainPanel extends TabbedLanguageCodeStylePanel {\n+\n+    public SimpleCodeStyleMainPanel(CodeStyleSettings currentSettings, CodeStyleSettings settings) {\n+      super(BuildFileLanguage.INSTANCE, currentSettings, settings);\n+    }\n+\n+    @Override\n+    protected void initTabs(CodeStyleSettings settings) {\n+      addIndentOptionsTab(settings);\n+    }\n+  }\n+\n   @Nullable\n   @Override\n   public CustomCodeStyleSettings createCustomSettings(CodeStyleSettings settings) {"
  },
  {
    "sha": "fbdeb212de0b6c399c9640f6701c196c5f6456ab",
    "filename": "base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildIndentOptionsEditor.java",
    "status": "removed",
    "additions": 0,
    "deletions": 75,
    "changes": 75,
    "blob_url": "https://github.com/bazelbuild/intellij/blob/20abbe549f9099ce94ddae4773de5c44d2637934/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildIndentOptionsEditor.java",
    "raw_url": "https://github.com/bazelbuild/intellij/raw/20abbe549f9099ce94ddae4773de5c44d2637934/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildIndentOptionsEditor.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/intellij/contents/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildIndentOptionsEditor.java?ref=20abbe549f9099ce94ddae4773de5c44d2637934",
    "patch": "@@ -1,75 +0,0 @@\n-/*\n- * Copyright 2018 The Bazel Authors. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.google.idea.blaze.base.lang.buildfile.formatting;\n-\n-import com.google.idea.blaze.base.ui.IntegerTextField;\n-import com.intellij.application.options.SmartIndentOptionsEditor;\n-import com.intellij.psi.codeStyle.CodeStyleSettings;\n-import com.intellij.psi.codeStyle.CommonCodeStyleSettings.IndentOptions;\n-import javax.swing.JLabel;\n-\n-/**\n- * A custom {@link SmartIndentOptionsEditor} which allows for a separate continuation indent for\n- * function declaration parameters.\n- */\n-class BuildIndentOptionsEditor extends SmartIndentOptionsEditor {\n-\n-  private static final String PARAMETER_INDENT_TEXT = \"Declaration parameter indent:\";\n-\n-  private final IntegerTextField parameterIndent;\n-\n-  BuildIndentOptionsEditor() {\n-    super();\n-    parameterIndent = new IntegerTextField().setMinValue(0).setMaxValue(32);\n-  }\n-\n-  @Override\n-  protected void addComponents() {\n-    super.addComponents();\n-    add(new JLabel(PARAMETER_INDENT_TEXT), parameterIndent);\n-  }\n-\n-  @Override\n-  public boolean isModified(CodeStyleSettings settings, IndentOptions options) {\n-    return super.isModified(settings, options)\n-        || isFieldModified(parameterIndent, getCustomSettings(settings).declarationParameterIndent);\n-  }\n-\n-  @Override\n-  public void apply(CodeStyleSettings settings, IndentOptions options) {\n-    super.apply(settings, options);\n-    Integer value = parameterIndent.getIntValue();\n-    if (value != null) {\n-      getCustomSettings(settings).declarationParameterIndent = value;\n-    }\n-  }\n-\n-  @Override\n-  public void reset(CodeStyleSettings settings, IndentOptions options) {\n-    super.reset(settings, options);\n-    parameterIndent.setValue(getCustomSettings(settings).declarationParameterIndent);\n-  }\n-\n-  @Override\n-  public void setEnabled(boolean enabled) {\n-    super.setEnabled(enabled);\n-    parameterIndent.setEnabled(enabled);\n-  }\n-\n-  private static BuildCodeStyleSettings getCustomSettings(CodeStyleSettings settings) {\n-    return settings.getCustomSettings(BuildCodeStyleSettings.class);\n-  }\n-}"
  },
  {
    "sha": "f5d1a30e5a029d025e58323854d19dd321a3c724",
    "filename": "base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildLanguageCodeStyleSettingsProvider.java",
    "status": "modified",
    "additions": 10,
    "deletions": 19,
    "changes": 29,
    "blob_url": "https://github.com/bazelbuild/intellij/blob/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildLanguageCodeStyleSettingsProvider.java",
    "raw_url": "https://github.com/bazelbuild/intellij/raw/2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildLanguageCodeStyleSettingsProvider.java",
    "contents_url": "https://api.github.com/repos/bazelbuild/intellij/contents/base/src/com/google/idea/blaze/base/lang/buildfile/formatting/BuildLanguageCodeStyleSettingsProvider.java?ref=2bdd392ac7765cc8e96f1f4241df9a240ee9a6d9",
    "patch": "@@ -17,11 +17,10 @@\n \n import com.google.idea.blaze.base.lang.buildfile.language.BuildFileLanguage;\n import com.intellij.application.options.IndentOptionsEditor;\n+import com.intellij.application.options.SmartIndentOptionsEditor;\n import com.intellij.lang.Language;\n-import com.intellij.psi.codeStyle.CodeStyleSettingsCustomizable;\n import com.intellij.psi.codeStyle.CommonCodeStyleSettings;\n import com.intellij.psi.codeStyle.LanguageCodeStyleSettingsProvider;\n-import javax.annotation.Nullable;\n \n /** Allows BUILD language-specific code style settings */\n public class BuildLanguageCodeStyleSettingsProvider extends LanguageCodeStyleSettingsProvider {\n@@ -33,32 +32,24 @@ public Language getLanguage() {\n \n   @Override\n   public IndentOptionsEditor getIndentOptionsEditor() {\n-    return new BuildIndentOptionsEditor();\n-    // TODO(brendandouglas): use upstream API directly, once it's implemented\n-    // return new SmartIndentOptionsEditor().withDeclarationParameterIndent();\n-  }\n-\n-  @Override\n-  public void customizeSettings(CodeStyleSettingsCustomizable consumer, SettingsType settingsType) {\n-    super.customizeSettings(consumer, settingsType);\n+    return new SmartIndentOptionsEditor().withDeclarationParameterIndent();\n   }\n \n   @Override\n   public String getCodeSample(SettingsType settingsType) {\n-    return \"\";\n+    return \"# code sample live editing\\n\"\n+        + \"# is not supported until\\n\"\n+        + \"# we have a proper formatter\\n\"\n+        + \"# please create a new BUILD file\\n\"\n+        + \"# to see changes in effect.\";\n   }\n \n-  @Nullable\n   @Override\n-  public CommonCodeStyleSettings getDefaultCommonSettings() {\n-    CommonCodeStyleSettings defaultSettings =\n-        new CommonCodeStyleSettings(BuildFileLanguage.INSTANCE);\n-    CommonCodeStyleSettings.IndentOptions indentOptions = defaultSettings.initIndentOptions();\n+  protected void customizeDefaults(\n+      CommonCodeStyleSettings commonSettings, CommonCodeStyleSettings.IndentOptions indentOptions) {\n     indentOptions.TAB_SIZE = 4;\n     indentOptions.INDENT_SIZE = 4;\n     indentOptions.CONTINUATION_INDENT_SIZE = 4;\n-    // TODO(brendandouglas): use upstream API directly, once it's implemented\n-    // indentOptions.DECLARATION_PARAMETER_INDENT = 8;\n-    return defaultSettings;\n+    indentOptions.DECLARATION_PARAMETER_INDENT = 8;\n   }\n }"
  }
]
