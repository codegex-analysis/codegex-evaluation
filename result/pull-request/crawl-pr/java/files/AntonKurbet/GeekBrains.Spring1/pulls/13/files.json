[
  {
    "sha": "606f9940883e8eaa1f4aac5dabbbc5f792636db0",
    "filename": "dao_app/pom.xml",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/pom.xml",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/pom.xml",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/pom.xml?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.4.3</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>ru.geekbrains.spring1.security</groupId>\n+    <artifactId>dao_app</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>dao_app</name>\n+    <description>Spring Security</description>\n+    <properties>\n+        <java.version>11</java.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-security</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.flywaydb</groupId>\n+            <artifactId>flyway-core</artifactId>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+                <configuration>\n+                    <excludes>\n+                        <exclude>\n+                            <groupId>org.projectlombok</groupId>\n+                            <artifactId>lombok</artifactId>\n+                        </exclude>\n+                    </excludes>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>"
  },
  {
    "sha": "62a5485d631f1134febe79aef203ca44e2ed7b2c",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/DaoApplication.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/DaoApplication.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/DaoApplication.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/DaoApplication.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.geekbrains.spring1.security;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class DaoApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(DaoApplication.class, args);\n+    }\n+\n+}"
  },
  {
    "sha": "1f50b156908168d15e55f9465673c62198122925",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/configs/SecurityConfig.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/configs/SecurityConfig.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/configs/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/configs/SecurityConfig.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,47 @@\n+package ru.geekbrains.spring1.security.configs;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import ru.geekbrains.spring1.security.services.UserService;\n+\n+\n+@EnableWebSecurity(debug = true)\n+public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+    @Autowired\n+    private UserService userService;\n+\n+    private Logger logger = LoggerFactory.getLogger(SecurityConfig.class.getName());\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        logger.info(\"Dao Authentication Provider\");\n+        http.authorizeRequests()\n+                .antMatchers(\"/score/**\").authenticated()\n+                .antMatchers(\"/score/**\").hasAnyRole(\"USER\")\n+                .anyRequest().permitAll()\n+                .and()\n+                .formLogin();\n+    }\n+\n+    @Bean\n+    public BCryptPasswordEncoder passwordEncoder() {\n+        return new BCryptPasswordEncoder();\n+    }\n+\n+    @Bean\n+    public DaoAuthenticationProvider daoAuthenticationProvider() {\n+        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();\n+        authenticationProvider.setPasswordEncoder(passwordEncoder());\n+        authenticationProvider.setUserDetailsService(userService);\n+        return authenticationProvider;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "22a7c05b196cb2610e853d50326393993527c571",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/controllers/MainController.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/controllers/MainController.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/controllers/MainController.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/controllers/MainController.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,47 @@\n+package ru.geekbrains.spring1.security.controllers;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RestController;\n+import ru.geekbrains.spring1.security.models.entities.User;\n+import ru.geekbrains.spring1.security.models.dtos.UserDto;\n+import ru.geekbrains.spring1.security.services.UserService;\n+\n+import java.security.Principal;\n+\n+@RestController\n+@Slf4j\n+@RequiredArgsConstructor\n+public class MainController {\n+    private final UserService userService;\n+\n+//GET .../app/score/inc - увеличивает балл текущего пользователя\n+//GET .../app/score/dec - уменьшает балл текущего пользователя\n+//GET .../app/score/get/current - показывает балл вошедшего пользователя\n+//GET .../app/score/get/{id} - показывает балл пользователя с указанным id\n+// (доступнотолько для залогиненных пользователей)\n+\n+    @GetMapping(\"/score/get/current\")\n+    public UserDto getScoreCurrent(Principal principal) {\n+        return userService.findDtoByUsername(principal.getName())\n+                .orElseThrow(() -> new RuntimeException(\"unable to find user by username: \" + principal.getName()));\n+    }\n+\n+    @GetMapping(\"/score/get/{id}\")\n+    public UserDto getScoreById(@PathVariable String id) {\n+        return userService.findDtoById(Long.parseLong(id))\n+                .orElseThrow(() -> new RuntimeException(\"unable to find user by id: \" + id));\n+    }\n+\n+    @GetMapping(\"/score/inc\")\n+    public UserDto incScoreCurrent(Principal principal) {\n+        return userService.addScoreByUsername(principal.getName(), 1);\n+    }\n+\n+    @GetMapping(\"/score/dec\")\n+    public UserDto decScoreCurrent(Principal principal) {\n+        return userService.addScoreByUsername(principal.getName(), -1);\n+    }\n+}"
  },
  {
    "sha": "8157ebfd0caa83d83fb46ad6422c899f5585c517",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/ExceptionControllerAdvice.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/ExceptionControllerAdvice.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/ExceptionControllerAdvice.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/ExceptionControllerAdvice.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.geekbrains.spring1.security.exceptions;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+\n+@ControllerAdvice\n+@Slf4j\n+public class ExceptionControllerAdvice {\n+\n+    @ExceptionHandler\n+    public ResponseEntity<?> handleRuntimeExceptions(RuntimeException e) {\n+        log.error(e.getMessage());\n+        UserErrorResponse err = new UserErrorResponse(HttpStatus.NOT_FOUND.value(), e.getMessage());\n+        return new ResponseEntity<>(err,HttpStatus.NOT_FOUND);\n+    }\n+}"
  },
  {
    "sha": "08f20b8eb440d0459d6611d4beda1da80a294438",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/UserErrorResponse.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/UserErrorResponse.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/UserErrorResponse.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/exceptions/UserErrorResponse.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,20 @@\n+package ru.geekbrains.spring1.security.exceptions;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class UserErrorResponse {\n+    private int status;\n+    private String message;\n+    private long timestamp;\n+\n+    UserErrorResponse(int status, String message) {\n+        this.status = status;\n+        this.message = message;\n+        this.timestamp = System.currentTimeMillis();\n+    }\n+}"
  },
  {
    "sha": "6e213079ff56ccd155d75a99cd4f2119c4e57939",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/models/dtos/UserDto.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/models/dtos/UserDto.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/models/dtos/UserDto.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/models/dtos/UserDto.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,15 @@\n+package ru.geekbrains.spring1.security.models.dtos;\n+\n+import lombok.Data;\n+import ru.geekbrains.spring1.security.models.entities.*;\n+\n+@Data\n+public class UserDto {\n+    private String name;\n+    private long score;\n+\n+    public UserDto(User user) {\n+        name = user.getUsername();\n+        score = user.getScore();\n+    }\n+}"
  },
  {
    "sha": "556861231498e25e398fd94bcd2eeb6ba12cb321",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/Role.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/Role.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/Role.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/Role.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.geekbrains.spring1.security.models.entities;\n+\n+import lombok.Data;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Data\n+@Table(name = \"roles\")\n+public class Role {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+}"
  },
  {
    "sha": "888a1826d1a2d316ebca246b164e45ba87a79d6d",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/User.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/User.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/User.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/models/entities/User.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.geekbrains.spring1.security.models.entities;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.persistence.*;\n+import java.util.Collection;\n+\n+@Entity\n+@Data\n+@Table(name = \"users\")\n+@NoArgsConstructor\n+public class User {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"username\")\n+    private String username;\n+\n+    @Column(name = \"password\")\n+    private String password;\n+\n+    @Column(name = \"email\")\n+    private String email;\n+\n+    @Column(name = \"score\")\n+    private long score;\n+\n+    @ManyToMany\n+    @JoinTable(name = \"users_roles\",\n+            joinColumns = @JoinColumn(name = \"user_id\"),\n+            inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n+    private Collection<Role> roles;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "305cd5c2c8486ecebee82a5d7ca2e3af9c1d6a38",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/repositories/UserRepository.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/repositories/UserRepository.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/repositories/UserRepository.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/repositories/UserRepository.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.geekbrains.spring1.security.repositories;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.geekbrains.spring1.security.models.entities.User;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public interface UserRepository extends CrudRepository<User, Long> {\n+    Optional<User> findByUsername(String username);\n+}"
  },
  {
    "sha": "b26e1cbbd263aa5a8c5e9c9e446ba1e62bedf225",
    "filename": "dao_app/src/main/java/ru/geekbrains/spring1/security/services/UserService.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/services/UserService.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/java/ru/geekbrains/spring1/security/services/UserService.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/java/ru/geekbrains/spring1/security/services/UserService.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,60 @@\n+package ru.geekbrains.spring1.security.services;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.geekbrains.spring1.security.models.entities.*;\n+import ru.geekbrains.spring1.security.models.dtos.UserDto;\n+import ru.geekbrains.spring1.security.repositories.UserRepository;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class UserService implements UserDetailsService {\n+    private final UserRepository userRepository;\n+\n+\n+    @Override\n+    @Transactional\n+    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n+        User user = findByUsername(username)\n+                .orElseThrow(() -> new UsernameNotFoundException(String.format(\"User '%s' not found\", username)));\n+        return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(),\n+                mapRolesToAuthorities(user.getRoles()));\n+    }\n+\n+    private Collection<? extends GrantedAuthority> mapRolesToAuthorities(Collection<Role> roles) {\n+        return roles.stream().map(role -> new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList());\n+    }\n+\n+    public Optional<UserDto> findDtoByUsername(String username) {\n+        return findByUsername(username).map(UserDto::new);\n+    }\n+\n+    public Optional<User> findByUsername(String username) {\n+        return userRepository.findByUsername(username);\n+    }\n+\n+    public Optional<UserDto> findDtoById(long id) {\n+        return findById(id).map(UserDto::new);\n+    }\n+    public Optional<User> findById(long id) {\n+        return userRepository.findById(id);\n+    }\n+\n+    @Transactional\n+    public UserDto addScoreByUsername(String username, int i) {\n+        User user = findByUsername(username)\n+                .orElseThrow(() -> new UsernameNotFoundException(String.format(\"User '%s' not found\", username)));\n+        user.setScore(user.getScore() + i);\n+        return new UserDto(user);\n+    }\n+}"
  },
  {
    "sha": "429bf3f8de784f39dee6d9d8307700ea5082da7c",
    "filename": "dao_app/src/main/resources/application.yaml",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/resources/application.yaml",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/resources/application.yaml?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,20 @@\n+server:\n+  port: 8181\n+  servlet:\n+    context-path: /app\n+spring:\n+  jpa:\n+    show-sql: true\n+    hibernate:\n+      dialect: org.hibernate.dialect.H2Dialect\n+      ddl-auto: none\n+      temp:\n+        use_jdbc_metadata_defaults: false\n+  datasource:\n+    driver-class-name: org.h2.Driver\n+    url: jdbc:h2:mem:mydatabase;MODE=PostgreSQL\n+    username: sa\n+    password:\n+  flyway:\n+    enabled: true\n+    locations: classpath:/db/migration"
  },
  {
    "sha": "9d5989a86877b20b9d97fe72d9d17bb0783d81ca",
    "filename": "dao_app/src/main/resources/db/migration/V1__init.sql",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/resources/db/migration/V1__init.sql",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/main/resources/db/migration/V1__init.sql",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/main/resources/db/migration/V1__init.sql?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,40 @@\n+create table users (\n+  id                    bigserial,\n+  username              varchar(30) not null,\n+  password              varchar(80) not null,\n+  email                 varchar(50) unique,\n+  score                 bigint,\n+  primary key (id)\n+);\n+\n+create table roles (\n+  id                    serial,\n+  name                  varchar(50) not null,\n+  primary key (id)\n+);\n+\n+CREATE TABLE users_roles (\n+  user_id               bigint not null,\n+  role_id               int not null,\n+  primary key (user_id, role_id),\n+  foreign key (user_id) references users (id),\n+  foreign key (role_id) references roles (id)\n+);\n+\n+insert into roles (name)\n+values\n+('ROLE_USER'), ('ROLE_ADMIN');\n+\n+insert into users (id, username, password, email, score)\n+values\n+(1, 'user', '$2y$12$KoBlGqSO5Efaci1TW4m3rOxQOtgz8A5XhWz8Jcnby5XkV7ENOJQTC', 'user@gmail.com', 0),\n+(2, 'user2', '$2y$12$KoBlGqSO5Efaci1TW4m3rOxQOtgz8A5XhWz8Jcnby5XkV7ENOJQTC', 'user2@gmail.com', 22),\n+(3, 'user3', '$2y$12$KoBlGqSO5Efaci1TW4m3rOxQOtgz8A5XhWz8Jcnby5XkV7ENOJQTC', 'user3@gmail.com', 33)\n+;\n+\n+insert into users_roles (user_id, role_id)\n+values\n+(1, 1),\n+(1, 2),\n+(2, 1),\n+(3, 1);\n\\ No newline at end of file"
  },
  {
    "sha": "5a544465967079d853010c634fdabec6863849dc",
    "filename": "dao_app/src/test/java/ru/geekbrains/spring1/security/DaoApplicationTests.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/test/java/ru/geekbrains/spring1/security/DaoApplicationTests.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0101d03e89e353163270c707992513cfbc255bb0/dao_app/src/test/java/ru/geekbrains/spring1/security/DaoApplicationTests.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/dao_app/src/test/java/ru/geekbrains/spring1/security/DaoApplicationTests.java?ref=0101d03e89e353163270c707992513cfbc255bb0",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.geekbrains.spring1.security;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class DaoApplicationTests {\n+\n+    @Test\n+    void contextLoads() {\n+    }\n+\n+}"
  }
]
