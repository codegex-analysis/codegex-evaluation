[
  {
    "sha": "19d10ee8e752923a6d4c04a86a1ff2a06ddff79e",
    "filename": "lesson7h/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/pom.xml",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/pom.xml",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/pom.xml?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -45,6 +45,11 @@\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springdoc</groupId>\n+            <artifactId>springdoc-openapi-ui</artifactId>\n+            <version>1.5.2</version>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "6a54b834cfd6f7537d3b09e75e0692eec63356b7",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/BasketController.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/BasketController.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/BasketController.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/BasketController.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -0,0 +1,39 @@\n+package ru.geekbrains.spring.lesson7h.controller;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.spring.lesson7h.exceptions.ProductNotFoundException;\n+import ru.geekbrains.spring.lesson7h.model.dtos.ProductDto;\n+import ru.geekbrains.spring.lesson7h.services.BasketService;\n+\n+import java.util.List;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/basket\")\n+public class BasketController {\n+\n+    @Autowired\n+    private BasketService basketService;\n+\n+    @GetMapping\n+    public List<ProductDto> getAll() {\n+        return basketService.getAll();\n+    }\n+\n+    @GetMapping(\"/{id}\")\n+    public ProductDto getById(@PathVariable Integer id) {\n+        return basketService.getById(id).orElseThrow(() -> new ProductNotFoundException(id.toString()));\n+    }\n+\n+    @PostMapping\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public ProductDto add(@RequestBody ProductDto product) {\n+        return basketService.add(product);\n+    }\n+\n+    @DeleteMapping(\"/{id}\")\n+    public ProductDto delete(@PathVariable Integer id) {\n+        return basketService.delete(id);\n+    }\n+}"
  },
  {
    "sha": "55a12e88459fb5f8622332a5784b6a6f1dbf1686",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/ProductController.java",
    "status": "modified",
    "additions": 18,
    "deletions": 4,
    "changes": 22,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/ProductController.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/controller/ProductController.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -1,17 +1,28 @@\n package ru.geekbrains.spring.lesson7h.controller;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.util.MultiValueMap;\n import org.springframework.web.bind.annotation.*;\n import ru.geekbrains.spring.lesson7h.exceptions.InvalidPageException;\n import ru.geekbrains.spring.lesson7h.exceptions.ProductErrorResponse;\n import ru.geekbrains.spring.lesson7h.exceptions.ProductNotFoundException;\n import ru.geekbrains.spring.lesson7h.model.entities.Product;\n import ru.geekbrains.spring.lesson7h.model.dtos.ProductDto;\n+import ru.geekbrains.spring.lesson7h.repositories.specifications.ProductsSpecifications;\n import ru.geekbrains.spring.lesson7h.services.ProductService;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.ProtocolException;\n+import java.net.URL;\n import java.util.Optional;\n \n @RestController\n@@ -23,21 +34,24 @@\n \n     @GetMapping\n     public Page<ProductDto> getAll(\n+            @RequestParam MultiValueMap<String,String> params,\n             @RequestParam(defaultValue = \"1\") Integer page,\n             @RequestParam(defaultValue = \"10\") Integer size,\n             @RequestParam(defaultValue = \"\") String[] sort) {\n         if (page < 1) throw new InvalidPageException(page.toString());\n-        return productService.getAll(page - 1, size, Optional.of(sort));\n+        return productService.getAll(ProductsSpecifications.build(params), page - 1, size, Optional.of(sort));\n     }\n \n     @GetMapping(\"/{id}\")\n     public ProductDto getById(@PathVariable Long id) {\n         return productService.getById(id).orElseThrow(() -> new ProductNotFoundException(id.toString()));\n     }\n \n-    @GetMapping(\"/title\")\n-    public Product getByName(@RequestParam String title) {\n-        return productService.getByTitle(title);\n+    @GetMapping(\"/tobasket/{id}\")\n+    public ProductDto toBasket(@PathVariable Long id) {\n+        ProductDto p = productService.getById(id).orElseThrow(() -> new ProductNotFoundException(id.toString()));\n+        p = productService.exchangeWithBasket(p);\n+        return p;\n     }\n \n     @PostMapping"
  },
  {
    "sha": "0bed51e7b2243818b27e7c90dc8aeeefe3426737",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/exceptions/ExceptionControllerAdvice.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/exceptions/ExceptionControllerAdvice.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/exceptions/ExceptionControllerAdvice.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/exceptions/ExceptionControllerAdvice.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -11,7 +11,7 @@\n public class ExceptionControllerAdvice {\n \n     @ExceptionHandler\n-    public ResponseEntity<?> handleRuntimeExceptions(InvalidPageException e) {\n+    public ResponseEntity<?> handleRuntimeExceptions(RuntimeException e) {\n         log.error(e.getMessage());\n         ProductErrorResponse err = new ProductErrorResponse(HttpStatus.NOT_FOUND.value(), e.getMessage());\n         return new ResponseEntity<>(err,HttpStatus.NOT_FOUND);"
  },
  {
    "sha": "dc616b961f30233c7b69225931d1c3aed0cb4fe6",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/dtos/ProductDto.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/dtos/ProductDto.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/dtos/ProductDto.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/dtos/ProductDto.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -4,18 +4,20 @@\n import lombok.NoArgsConstructor;\n import ru.geekbrains.spring.lesson7h.model.entities.Product;\n \n+import java.io.Serializable;\n+\n @Data\n @NoArgsConstructor\n-public class ProductDto {\n+public class ProductDto implements Serializable {\n     private Long id;\n     private String title;\n     private Long cost;\n-    private Long category;\n+    private String category;\n \n     public ProductDto(Product product) {\n         this.id = product.getId();\n         this.title = product.getTitle();\n         this.cost = product.getCost();\n-        this.category = product.getCategory().getId();\n+        this.category = product.getCategory().getTitle();\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "69e200917e089e1c6a0882b9a39def3797f7ae1e",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/entities/Basket.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/entities/Basket.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/entities/Basket.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/model/entities/Basket.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -0,0 +1,40 @@\n+package ru.geekbrains.spring.lesson7h.model.entities;\n+\n+import ru.geekbrains.spring.lesson7h.model.dtos.ProductDto;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class Basket {\n+    private static Basket instance;\n+    private static List<ProductDto> productList;\n+\n+    private Basket() {\n+        productList = new ArrayList<>();\n+    }\n+\n+    public static Basket getInstance() {\n+        if (instance == null) {\n+            instance = new Basket();\n+        }\n+        return instance;\n+    }\n+\n+    public static void add(ProductDto product) {\n+        productList.add(product);\n+    }\n+\n+    public static void delete(int id) {\n+        productList.remove(id);\n+    }\n+\n+    public static List<ProductDto> getAll() {\n+        return productList;\n+    }\n+\n+    public static Optional<ProductDto> get(int id) {\n+        return Optional.of(productList.get(id));\n+    }\n+}\n+"
  },
  {
    "sha": "a77902c08ef5926c53f1cf2d9269814ef293a436",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/BasketRepository.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/BasketRepository.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/BasketRepository.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/BasketRepository.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.geekbrains.spring.lesson7h.repositories;\n+\n+import org.springframework.stereotype.Repository;\n+import ru.geekbrains.spring.lesson7h.model.dtos.ProductDto;\n+import ru.geekbrains.spring.lesson7h.model.entities.Basket;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Repository\n+public class BasketRepository {\n+\n+    BasketRepository() {\n+        Basket.getInstance();\n+    }\n+\n+    public ProductDto add(ProductDto product) {\n+        Basket.add(product);\n+        return product;\n+    }\n+\n+    public void delete(int id) {\n+        Basket.delete(id);\n+    }\n+\n+    public List<ProductDto> findAll() {\n+        return Basket.getAll();\n+    };\n+\n+    public Optional<ProductDto> get(int id) {\n+        return Basket.get(id);\n+    };\n+}"
  },
  {
    "sha": "f8bb62ee57ff1ae55578a0092f8536b47f737f8e",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/ProductRepository.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/ProductRepository.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/ProductRepository.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -0,0 +1,10 @@\n+package ru.geekbrains.spring.lesson7h.repositories;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.stereotype.Repository;\n+import ru.geekbrains.spring.lesson7h.model.entities.Product;\n+\n+@Repository\n+public interface ProductRepository extends JpaRepository<Product, Long>, JpaSpecificationExecutor<Product> {\n+}"
  },
  {
    "sha": "350634594dd83b90b901013a392f23281f1b44bf",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/specifications/ProductsSpecifications.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/specifications/ProductsSpecifications.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/specifications/ProductsSpecifications.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repositories/specifications/ProductsSpecifications.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -0,0 +1,28 @@\n+package ru.geekbrains.spring.lesson7h.repositories.specifications;\n+\n+import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.util.MultiValueMap;\n+import ru.geekbrains.spring.lesson7h.model.entities.Product;\n+\n+public class ProductsSpecifications {\n+\n+    private static Specification<Product> costGreaterOrEqualThen(int minPrice) {\n+        return (root, criteriaQuery, criteriaBuilder)\n+                -> criteriaBuilder.greaterThanOrEqualTo(root.get(\"cost\"), minPrice);\n+    }\n+\n+    private static Specification<Product> titleLike(String title) {\n+        return (root, criteriaQuery, criteriaBuilder)\n+                -> criteriaBuilder.like(root.get(\"title\"), String.format(\"%%%s%%\",title));\n+    }\n+    public static Specification<Product> build(MultiValueMap<String, String> params) {\n+        Specification<Product> spec = Specification.where(null);\n+        if (params.containsKey(\"min_cost\") && !params.getFirst(\"min_cost\").isBlank()) {\n+            spec = spec.and(costGreaterOrEqualThen(Integer.parseInt(params.getFirst(\"min_cost\"))));\n+        }\n+        if (params.containsKey(\"title\") && !params.getFirst(\"title\").isBlank()) {\n+            spec = spec.and(titleLike(params.getFirst(\"title\")));\n+        }\n+        return spec;\n+    }\n+}"
  },
  {
    "sha": "277cab438faf5ed0ff1fda8bec3d403ff04f8563",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repository/ProductRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 21,
    "changes": 21,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/2adec9547a54e1ca267d08a6525dc8e72690027a/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repository/ProductRepository.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/2adec9547a54e1ca267d08a6525dc8e72690027a/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repository/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/repository/ProductRepository.java?ref=2adec9547a54e1ca267d08a6525dc8e72690027a",
    "patch": "@@ -1,21 +0,0 @@\n-package ru.geekbrains.spring.lesson7h.repository;\n-\n-import org.springframework.data.jpa.repository.JpaRepository;\n-import org.springframework.stereotype.Repository;\n-import ru.geekbrains.spring.lesson7h.model.entities.Product;\n-\n-import java.util.List;\n-\n-@Repository\n-public interface ProductRepository extends JpaRepository<Product, Long> {\n-\n-    Product findProductByTitle(String title);\n-\n-    List<Product> getAllByCostGreaterThanEqual(Long cost);\n-\n-    List<Product> getAllByCostIsLessThanEqual(Long cost);\n-\n-    List<Product> getAllByCostBetween(Long cost, Long cost2);\n-\n-    List<Product> getProductByTitleContainsIgnoreCase(String namePart);\n-}"
  },
  {
    "sha": "df079556251adea013fd105064234a6180868e30",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/BasketService.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/BasketService.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/BasketService.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/BasketService.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -0,0 +1,43 @@\n+package ru.geekbrains.spring.lesson7h.services;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import ru.geekbrains.spring.lesson7h.model.dtos.ProductDto;\n+import ru.geekbrains.spring.lesson7h.repositories.BasketRepository;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class BasketService {\n+\n+    @Autowired\n+    private BasketRepository basketRepository;\n+\n+    public ProductDto add(ProductDto product) {\n+        return basketRepository.add(product);\n+    }\n+\n+    public ProductDto delete(int id) {\n+        ProductDto p = basketRepository.get(id).get();\n+        basketRepository.delete(id);\n+        return p;\n+    }\n+\n+    public List<ProductDto> getAll() {\n+        return basketRepository.findAll();\n+    }\n+\n+    public Optional<ProductDto> getById(int id) {\n+        return basketRepository.get(id);\n+    }\n+}"
  },
  {
    "sha": "ee28d532707cc54f50aac92699e45df4c6154afb",
    "filename": "lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/ProductService.java",
    "status": "modified",
    "additions": 52,
    "deletions": 30,
    "changes": 82,
    "blob_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/blob/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/ProductService.java",
    "raw_url": "https://github.com/AntonKurbet/GeekBrains.Spring1/raw/0d35911ab822643da639fb23159f55150b4f4e0b/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/ProductService.java",
    "contents_url": "https://api.github.com/repos/AntonKurbet/GeekBrains.Spring1/contents/lesson7h/src/main/java/ru/geekbrains/spring/lesson7h/services/ProductService.java?ref=0d35911ab822643da639fb23159f55150b4f4e0b",
    "patch": "@@ -1,15 +1,26 @@\n package ru.geekbrains.spring.lesson7h.services;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.domain.Specification;\n import org.springframework.stereotype.Service;\n import ru.geekbrains.spring.lesson7h.exceptions.ProductNotFoundException;\n import ru.geekbrains.spring.lesson7h.model.dtos.ProductDto;\n import ru.geekbrains.spring.lesson7h.model.entities.Product;\n-import ru.geekbrains.spring.lesson7h.repository.ProductRepository;\n+import ru.geekbrains.spring.lesson7h.repositories.ProductRepository;\n+import ru.geekbrains.spring.lesson7h.repositories.specifications.ProductsSpecifications;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.ProtocolException;\n+import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n@@ -24,21 +35,17 @@\n         return productRepository.findById(id).map(ProductDto::new);\n     }\n \n-    public Product getByTitle(String title) {\n-        return productRepository.findProductByTitle(title);\n-    }\n-\n-    public Product add(Product student) {\n-        return productRepository.save(student);\n+    public Product add(Product product) {\n+        return productRepository.save(product);\n     }\n \n     public void delete(Long id) {\n         productRepository.deleteById(id);\n     }\n \n-    public Page<ProductDto> getAll(Integer page,\n-                                Integer size,\n-                                Optional<String[]> sort) {\n+    public Page<ProductDto> getAll(Specification<Product> spec, Integer page,\n+                                   Integer size,\n+                                   Optional<String[]> sort) {\n         Page<Product> p = null;\n         if (sort.isPresent()) {\n             List o = new ArrayList<Sort.Order>();\n@@ -48,7 +55,7 @@ public void delete(Long id) {\n                     o.add(new Sort.Order(Sort.Direction.fromString(s[1]), s[0]));\n                 } else o.add(new Sort.Order(Sort.DEFAULT_DIRECTION, s[0]));\n             }\n-            p = productRepository.findAll(PageRequest.of(page, size, Sort.by(o)));\n+            p = productRepository.findAll(spec, PageRequest.of(page, size, Sort.by(o)));\n         } else\n             p = productRepository.findAll(PageRequest.of(page, size));\n         if (p.getContent().size() > 0)\n@@ -57,27 +64,42 @@ public void delete(Long id) {\n             throw new ProductNotFoundException(\"\");\n     }\n \n-    public List<Product> getAllByCost(Optional<Long> minCost, Optional<Long> maxCost) {\n-        if (minCost.isPresent()) {\n-            if (maxCost.isPresent()) {\n-                return productRepository.getAllByCostBetween(minCost.get(), maxCost.get());\n-            }\n-            return productRepository.getAllByCostGreaterThanEqual(minCost.get());\n-        } else if (maxCost.isPresent()) {\n-            return productRepository.getAllByCostIsLessThanEqual(maxCost.get());\n-        } else {\n-            return productRepository.findAll();\n-        }\n+    public Product saveOrUpdate(Product product) {\n+        return productRepository.save(product);\n     }\n \n-    public List<Product> getAllByNamePart(Optional<String> titlePart) {\n-        if (titlePart.isPresent())\n-            return productRepository.getProductByTitleContainsIgnoreCase(titlePart.get());\n-        else\n-            return productRepository.findAll();\n-    }\n+    // TODO Наверняка это делается как-то по-другому\n+    public ProductDto exchangeWithBasket(ProductDto p) {\n+        try {\n+            URL url = new URL(\"http://localhost:8181/app/api/v1/basket\");\n+            HttpURLConnection con = (HttpURLConnection)url.openConnection();\n+            con.setRequestMethod(\"POST\");\n+            con.setRequestProperty(\"Content-Type\", \"application/json; utf-8\");\n+            con.setRequestProperty(\"Accept\", \"application/json\");\n+            con.setDoOutput(true);\n \n-    public Product saveOrUpdate(Product product) {\n-        return productRepository.save(product);\n+            ObjectMapper mapper = new ObjectMapper();\n+            String jsonInputString = mapper.writeValueAsString(p);\n+\n+            try(OutputStream os = con.getOutputStream()) {\n+                byte[] input = jsonInputString.getBytes(\"utf-8\");\n+                os.write(input, 0, input.length);\n+            }\n+\n+            try(BufferedReader br = new BufferedReader(\n+                    new InputStreamReader(con.getInputStream(), \"utf-8\"))) {\n+                StringBuilder response = new StringBuilder();\n+                String responseLine = null;\n+                while ((responseLine = br.readLine()) != null) {\n+                    response.append(responseLine.trim());\n+                };\n+                p = mapper.readValue(response.toString(), ProductDto.class);\n+            }\n+        } catch (MalformedURLException | ProtocolException e) {\n+            throw new RuntimeException(e.getMessage());\n+        } catch (IOException e) {\n+            throw new RuntimeException(e.getMessage());\n+        }\n+        return p;\n     }\n }"
  }
]
