[
  {
    "sha": "91b8365f080bae70bc7fbaa3ac47a794b2c278cd",
    "filename": "registration-processor/core-processor/registration-processor-reprocessor-stage/src/main/java/io/mosip/registration/processor/reprocessor/service/WorkflowActionService.java",
    "status": "modified",
    "additions": 80,
    "deletions": 21,
    "changes": 101,
    "blob_url": "https://github.com/mosip/registration/blob/21be9de5a9a678121e2d117b80a34fb5261bc43f/registration-processor/core-processor/registration-processor-reprocessor-stage/src/main/java/io/mosip/registration/processor/reprocessor/service/WorkflowActionService.java",
    "raw_url": "https://github.com/mosip/registration/raw/21be9de5a9a678121e2d117b80a34fb5261bc43f/registration-processor/core-processor/registration-processor-reprocessor-stage/src/main/java/io/mosip/registration/processor/reprocessor/service/WorkflowActionService.java",
    "contents_url": "https://api.github.com/repos/mosip/registration/contents/registration-processor/core-processor/registration-processor-reprocessor-stage/src/main/java/io/mosip/registration/processor/reprocessor/service/WorkflowActionService.java?ref=21be9de5a9a678121e2d117b80a34fb5261bc43f",
    "patch": "@@ -222,12 +222,15 @@ private void processResumeFromBeginningAndRemoveHotlistedTag(List<String> workfl\n \t\t\t\tremoveHotlistedTag(rid);\r\n \t\t\t\tInternalRegistrationStatusDto registrationStatusDto = getAndUpdateRegistrationStatus(workflowActionCode,\r\n \t\t\t\t\t\trid, RegistrationStatusCode.PROCESSING);\r\n+\t\t\t\tif (RegistrationStatusCode.REPROCESS_FAILED.name().equals(registrationStatusDto.getStatusCode())) {\r\n+\t\t\t\t\tdescription.setMessage(PlatformErrorMessages.RPR_WAS_REPROCESS_FAILED.getMessage());\r\n+\t\t\t\t} else {\r\n \t\t\t\tsendPacketEventforResumeBeginning(registrationStatusDto);\r\n \t\t\t\tdescription.setMessage(\r\n \t\t\t\t\t\t\tString.format(PlatformSuccessMessages.RPR_WORKFLOW_ACTION_SERVICE_SUCCESS.getMessage(),\r\n \t\t\t\t\t\t\t\t\tworkflowActionCode.name()));\r\n \t\t\t\t\t\tisTransactionSuccessful = true;\r\n-\r\n+\t\t\t\t}\r\n \t\t\t} catch (TablenotAccessibleException e) {\r\n \t\t\t\tlogAndThrowError(e, e.getErrorCode(), e.getMessage(), rid, description);\r\n \t\t\t}\r\n@@ -275,12 +278,16 @@ private void processResumeFromBeginning(List<String> workflowIds,\n \t\t\t\ttry {\r\n \t\t\t\tInternalRegistrationStatusDto registrationStatusDto = getAndUpdateRegistrationStatus(workflowActionCode,\r\n \t\t\t\t\t\trid, RegistrationStatusCode.PROCESSING);\r\n-\r\n-\t\t\t\tsendPacketEventforResumeBeginning(registrationStatusDto);\r\n-\t\t\t\tdescription.setMessage(\r\n-\t\t\t\t\t\tString.format(PlatformSuccessMessages.RPR_WORKFLOW_ACTION_SERVICE_SUCCESS.getMessage(),\r\n-\t\t\t\t\t\t\t\tworkflowActionCode.name()));\r\n-\t\t\t\t\tisTransactionSuccessful = true;\r\n+\t\t\t\tif (RegistrationStatusCode.REPROCESS_FAILED.name().equals(registrationStatusDto.getStatusCode())) {\r\n+\t\t\t\t\tdescription.setMessage(PlatformErrorMessages.RPR_WAS_REPROCESS_FAILED.getMessage());\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tsendPacketEventforResumeBeginning(registrationStatusDto);\r\n+\t\t\t\t\tdescription.setMessage(\r\n+\t\t\t\t\t\t\tString.format(PlatformSuccessMessages.RPR_WORKFLOW_ACTION_SERVICE_SUCCESS.getMessage(),\r\n+\t\t\t\t\t\t\t\t\tworkflowActionCode.name()));\r\n+\t\t\t\t\t\tisTransactionSuccessful = true;\r\n+\t\t\t\t}\r\n+\t\t\t\t\r\n \t\t\t} catch (TablenotAccessibleException e) {\r\n \t\t\t\tlogAndThrowError(e, e.getErrorCode(), e.getMessage(), rid, description);\r\n \t\t\t} catch (WorkflowActionException e) {\r\n@@ -326,13 +333,15 @@ private void processResumeProcessingAndRemoveHotlistedTag(List<String> workflowI\n \t\t\t\tremoveHotlistedTag(rid);\r\n \t\t\t\tInternalRegistrationStatusDto registrationStatusDto = getAndUpdateRegistrationStatus(\r\n \t\t\t\t\t\t\tworkflowActionCode, rid, RegistrationStatusCode.PROCESSING);\r\n-\r\n+\t\t\t\tif (RegistrationStatusCode.REPROCESS_FAILED.name().equals(registrationStatusDto.getStatusCode())) {\r\n+\t\t\t\t\tdescription.setMessage(PlatformErrorMessages.RPR_WAS_REPROCESS_FAILED.getMessage());\r\n+\t\t\t\t} else {\r\n \t\t\t\tsendPacketEventForResumeProcessing(registrationStatusDto);\r\n \t\t\t\t\tdescription.setMessage(\r\n \t\t\t\t\t\t\tString.format(PlatformSuccessMessages.RPR_WORKFLOW_ACTION_SERVICE_SUCCESS.getMessage(),\r\n \t\t\t\t\t\t\t\t\tworkflowActionCode.name()));\r\n \t\t\t\t\t\tisTransactionSuccessful = true;\r\n-\r\n+\t\t\t\t}\r\n \t\t\t} catch (ApisResourceAccessException | PacketManagerException\r\n \t\t\t\t\t| JsonProcessingException | WorkflowActionException e) {\r\n \t\t\t\tlogAndThrowError(e, ((BaseCheckedException) e).getErrorCode(), ((BaseCheckedException) e).getMessage(),\r\n@@ -379,12 +388,15 @@ private void processResumeProcessing(List<String> workflowIds,\n \r\n \t\t\t\tInternalRegistrationStatusDto registrationStatusDto = getAndUpdateRegistrationStatus(workflowActionCode,\r\n \t\t\t\t\t\trid, RegistrationStatusCode.PROCESSING);\r\n-\r\n+\t\t\t\tif (RegistrationStatusCode.REPROCESS_FAILED.name().equals(registrationStatusDto.getStatusCode())) {\r\n+\t\t\t\t\tdescription.setMessage(PlatformErrorMessages.RPR_WAS_REPROCESS_FAILED.getMessage());\r\n+\t\t\t\t} else {\r\n \t\t\t\tsendPacketEventForResumeProcessing(registrationStatusDto);\r\n \t\t\t\tdescription.setMessage(\r\n \t\t\t\t\t\tString.format(PlatformSuccessMessages.RPR_WORKFLOW_ACTION_SERVICE_SUCCESS.getMessage(),\r\n \t\t\t\t\t\t\t\tworkflowActionCode.name()));\r\n \t\t\t\t\tisTransactionSuccessful = true;\r\n+\t\t\t\t}\r\n \t\t\t} catch (TablenotAccessibleException e) {\r\n \t\t\t\tlogAndThrowError(e, e.getErrorCode(), e.getMessage(), rid, description);\r\n \t\t\t} catch (WorkflowActionException e) {\r\n@@ -417,18 +429,62 @@ private void sendPacketEventForResumeProcessing(\n \t\t\tInternalRegistrationStatusDto registrationStatusDto) {\r\n \t\tString stageAddress = MessageBusUtil\r\n \t\t\t\t.getMessageBusAdress(registrationStatusDto.getRegistrationStageName());\r\n-\t\tif (RegistrationTransactionStatusCode.SUCCESS.name()\r\n-\t\t\t\t.equalsIgnoreCase(registrationStatusDto.getLatestTransactionStatusCode())) {\r\n+\t\tRegistrationTransactionStatusCode registrationLatestTransactionStatusCode=RegistrationTransactionStatusCode.valueOf(registrationStatusDto.getLatestTransactionStatusCode());\r\n+\t\tMessageDTO object = null;\r\n+\t\tswitch (registrationLatestTransactionStatusCode) {\r\n+\t\tcase SUCCESS:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, true, false);\r\n \t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_OUT);\r\n-\t\t} else {\r\n+\t\t\tbreak;\r\n+\t\tcase FAILED:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, false, false);\r\n+\t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_OUT);\r\n+\t\t\tbreak;\r\n+\t\tcase IN_PROGRESS:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, true, false);\r\n \t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_IN);\r\n+\t\t\tbreak;\r\n+\t\tcase ERROR:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, false, true);\r\n+\t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_OUT);\r\n+\t\t\tbreak;\r\n+\t\tcase REPROCESS:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, true, false);\r\n+\t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_IN);\r\n+\t\t\tbreak;\r\n+\t\tcase PROCESSED:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, true, false);\r\n+\t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_OUT);\r\n+\t\t\tbreak;\r\n+\t\tcase REJECTED:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, false, false);\r\n+\t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_OUT);\r\n+\t\t\tbreak;\r\n+\t\tcase PROCESSING:\r\n+\t\t\tobject = getMessageDto(registrationStatusDto, true, false);\r\n+\t\t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_IN);\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tregProcLogger.debug(PlatformErrorMessages.RPR_WAS_REPROCESS_FAILED.getMessage());\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\r\n+\t\tif (object != null) {\r\n+\t\t\tMessageBusAddress address = new MessageBusAddress(stageAddress);\r\n+\t\t\tsendMessage(object, address);\r\n \t\t}\r\n+\r\n+\t}\r\n+\r\n+\tprivate MessageDTO getMessageDto(InternalRegistrationStatusDto registrationStatusDto, boolean isValid,\r\n+\t\t\tboolean isInternalError) {\r\n \t\tMessageDTO object = new MessageDTO();\r\n \t\tobject.setRid(registrationStatusDto.getRegistrationId());\r\n-\t\tobject.setIsValid(true);\r\n+\t\tobject.setIsValid(isValid);\r\n \t\tobject.setReg_type(RegistrationType.valueOf(registrationStatusDto.getRegistrationType()));\r\n-\t\tMessageBusAddress address = new MessageBusAddress(stageAddress);\r\n-\t\tsendMessage(object, address);\r\n+\t\tobject.setInternalError(isInternalError);\r\n+\t\treturn object;\r\n+\r\n \t}\r\n \r\n \t/**\r\n@@ -440,11 +496,8 @@ private void sendPacketEventForResumeProcessing(\n \tprivate void sendPacketEventforResumeBeginning(\r\n \t\t\tInternalRegistrationStatusDto registrationStatusDto) {\r\n \t\tString stageAddress = MessageBusUtil.getMessageBusAdress(resumeFromBeginningStage);\r\n+\t\tMessageDTO object = getMessageDto(registrationStatusDto, true, false);\r\n \t\tstageAddress = stageAddress.concat(ReprocessorConstants.BUS_IN);\r\n-\t\tMessageDTO object = new MessageDTO();\r\n-\t\tobject.setRid(registrationStatusDto.getRegistrationId());\r\n-\t\tobject.setIsValid(true);\r\n-\t\tobject.setReg_type(RegistrationType.valueOf(registrationStatusDto.getRegistrationType()));\r\n \t\tMessageBusAddress address = new MessageBusAddress(stageAddress);\r\n \t\tsendMessage(object, address);\r\n \r\n@@ -534,7 +587,13 @@ private InternalRegistrationStatusDto getAndUpdateRegistrationStatus(WorkflowAct\n \t\t\t\t\tPlatformErrorMessages.RPR_WAS_WORKFLOW_ID_NOT_FOUND.getCode(),\r\n \t\t\t\t\tString.format(PlatformErrorMessages.RPR_WAS_WORKFLOW_ID_NOT_FOUND.getMessage(), rid));\r\n \t\t}\r\n-\t\tregistrationStatusDto.setStatusCode(statusCode.name());\r\n+\t\tif (RegistrationStatusCode.PROCESSING.equals(statusCode) && registrationStatusDto\r\n+\t\t\t\t.getLatestTransactionStatusCode().equals(RegistrationTransactionStatusCode.REPROCESS_FAILED.name())) {\r\n+\t\t\tregistrationStatusDto.setStatusCode(RegistrationStatusCode.REPROCESS_FAILED.name());\r\n+\t\t} else {\r\n+\t\t\tregistrationStatusDto.setStatusCode(statusCode.name());\r\n+\t\t}\r\n+\r\n \t\tregistrationStatusDto.setStatusComment(String.format(\r\n \t\t\t\tPlatformSuccessMessages.RPR_WORKFLOW_ACTION_SERVICE_SUCCESS.getMessage(), workflowActionCode.name()));\r\n \r"
  },
  {
    "sha": "f7a39d5a0cfd6eddf5a000df79eb15bd79535ba5",
    "filename": "registration-processor/core-processor/registration-processor-reprocessor-stage/src/test/java/io/mosip/registration/processor/reprocessor/service/test/WorkflowActionServiceTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/mosip/registration/blob/21be9de5a9a678121e2d117b80a34fb5261bc43f/registration-processor/core-processor/registration-processor-reprocessor-stage/src/test/java/io/mosip/registration/processor/reprocessor/service/test/WorkflowActionServiceTest.java",
    "raw_url": "https://github.com/mosip/registration/raw/21be9de5a9a678121e2d117b80a34fb5261bc43f/registration-processor/core-processor/registration-processor-reprocessor-stage/src/test/java/io/mosip/registration/processor/reprocessor/service/test/WorkflowActionServiceTest.java",
    "contents_url": "https://api.github.com/repos/mosip/registration/contents/registration-processor/core-processor/registration-processor-reprocessor-stage/src/test/java/io/mosip/registration/processor/reprocessor/service/test/WorkflowActionServiceTest.java?ref=21be9de5a9a678121e2d117b80a34fb5261bc43f",
    "patch": "@@ -19,6 +19,7 @@\n import org.springframework.test.util.ReflectionTestUtils;\r\n import org.springframework.web.context.WebApplicationContext;\r\n \r\n+import io.mosip.registration.processor.core.code.RegistrationTransactionStatusCode;\r\n import io.mosip.registration.processor.core.exception.WorkflowActionException;\r\n import io.mosip.registration.processor.core.exception.util.PlatformErrorMessages;\r\n import io.mosip.registration.processor.packet.storage.utils.PacketManagerService;\r\n@@ -69,6 +70,7 @@ public void setUp()\n \t\tregistrationStatusDto.setRegistrationId(\"10003100030001520190422074511\");\r\n \t\tregistrationStatusDto.setRegistrationType(\"NEW\");\r\n \t\tregistrationStatusDto.setRegistrationStageName(\"SecurezoneNotificationStage\");\r\n+\t\tregistrationStatusDto.setLatestTransactionStatusCode(RegistrationTransactionStatusCode.SUCCESS.name());\r\n \t\tReflectionTestUtils.setField(workflowActionService, \"hotListedTag\", \"test\");\r\n \t\tReflectionTestUtils.setField(workflowActionService, \"resumeFromBeginningStage\", \"SecurezoneNotificationStage\");\r\n \t\tMockito.doNothing().when(registrationStatusService).updateRegistrationStatus(any(), any(),\r"
  },
  {
    "sha": "51ab36ca4f829a84e9424a49d8b0443b57979ac9",
    "filename": "registration-processor/registration-processor-core/src/main/java/io/mosip/registration/processor/core/exception/util/PlatformErrorMessages.java",
    "status": "modified",
    "additions": 1313,
    "deletions": 1310,
    "changes": 2623,
    "blob_url": "https://github.com/mosip/registration/blob/21be9de5a9a678121e2d117b80a34fb5261bc43f/registration-processor/registration-processor-core/src/main/java/io/mosip/registration/processor/core/exception/util/PlatformErrorMessages.java",
    "raw_url": "https://github.com/mosip/registration/raw/21be9de5a9a678121e2d117b80a34fb5261bc43f/registration-processor/registration-processor-core/src/main/java/io/mosip/registration/processor/core/exception/util/PlatformErrorMessages.java",
    "contents_url": "https://api.github.com/repos/mosip/registration/contents/registration-processor/registration-processor-core/src/main/java/io/mosip/registration/processor/core/exception/util/PlatformErrorMessages.java?ref=21be9de5a9a678121e2d117b80a34fb5261bc43f"
  }
]
