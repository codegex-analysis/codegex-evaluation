[
  {
    "sha": "68aa543602a670f3ae0f284cab17f82e800af2e4",
    "filename": ".idea/gradle.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/.idea/gradle.xml",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/.idea/gradle.xml",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/.idea/gradle.xml?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -14,6 +14,7 @@\n             <option value=\"$PROJECT_DIR$/fdb-record-layer-core\" />\n             <option value=\"$PROJECT_DIR$/fdb-record-layer-core-shaded\" />\n             <option value=\"$PROJECT_DIR$/fdb-record-layer-icu\" />\n+            <option value=\"$PROJECT_DIR$/fdb-record-layer-jmh\" />\n             <option value=\"$PROJECT_DIR$/fdb-record-layer-lucene\" />\n             <option value=\"$PROJECT_DIR$/fdb-record-layer-spatial\" />\n           </set>"
  },
  {
    "sha": "56971a9f18075b7449dfb697669054fa9d58e1a7",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/build.gradle",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/build.gradle",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/build.gradle?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -46,6 +46,7 @@ plugins {\n \n ext {\n     SpotBugsTask = com.github.spotbugs.SpotBugsTask\n+    fdbEnvironment = [:]\n }\n \n defaultTasks 'build'\n@@ -271,18 +272,18 @@ if (!JavaVersion.current().isJava8Compatible()) {\n     throw new Exception(\"Java 8 is required to build fdb-record-layer\")\n }\n \n-def fdbEnvironment = new File(\"${rootProject.projectDir}/fdb-environment.properties\")\n-if (fdbEnvironment.exists()) {\n-    def env = [:]\n-    fdbEnvironment.eachLine { line ->\n+def fdbEnvironmentFile = new File(\"${rootProject.projectDir}/fdb-environment.properties\")\n+if (fdbEnvironmentFile.exists()) {\n+    fdbEnvironmentFile.eachLine { line ->\n         def eq = line.indexOf('=')\n-        if (eq > 0) env.put(line.substring(0, eq), line.substring(eq + 1))\n+        if (eq > 0) ext.fdbEnvironment.put(line.substring(0, eq), line.substring(eq + 1))\n     }\n-    if (!env.isEmpty()) {\n-        allprojects {\n-            tasks.withType(Test) { task ->\n-                task.environment(env)\n-            }\n+}\n+if (!ext.fdbEnvironment.isEmpty()) {\n+    def fdbenv = ext.fdbEnvironment\n+    allprojects {\n+        tasks.withType(Test) { task ->\n+            task.environment(fdbenv)\n         }\n     }\n }"
  },
  {
    "sha": "ba172ddd40fb5fbf44a60027ebfb755d90ccc952",
    "filename": "docs/ReleaseNotes.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/docs/ReleaseNotes.md",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/docs/ReleaseNotes.md",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/docs/ReleaseNotes.md?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -29,6 +29,7 @@ In this realase, the various implementations of the `RecordQueryPlan` interface\n * **Feature** Feature 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Feature** `VersionstampSaveBehavior.IF_PRESENT` allows the user to specify that a record should be saved with a version only if one is explicitly provided [(Issue #958)](https://github.com/FoundationDB/fdb-record-layer/issues/958)\n * **Feature** Feature 5 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n+* **Feature** Introduce JMH framework [(Issue #1157)](https://github.com/FoundationDB/fdb-record-layer/issues/1157)\n * **Breaking change** Change 1 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Breaking change** Change 2 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)\n * **Breaking change** Change 3 [(Issue #NNN)](https://github.com/FoundationDB/fdb-record-layer/issues/NNN)"
  },
  {
    "sha": "15de67bec33b5caf694f65a399c755ac9dc087a2",
    "filename": "fdb-record-layer-jmh/fdb-record-layer-jmh.gradle",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/fdb-record-layer-jmh.gradle",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/fdb-record-layer-jmh.gradle",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/fdb-record-layer-jmh.gradle?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * fdb-record-layer-jmh.gradle\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+plugins {\n+    id 'me.champeau.gradle.jmh' version '0.5.3'\n+}\n+\n+apply from: rootProject.file('gradle/proto.gradle')\n+sourceSets {\n+    jmh {\n+        proto {\n+            srcDir \"src/jmh/proto\"\n+        }\n+        java {\n+            srcDir 'protogen/jmh/java'\n+        }\n+    }\n+}\n+\n+def coreProject = \":${ext.coreProjectName}\"\n+dependencies {\n+    compile project(\":${coreProject}\")\n+}\n+\n+jmh {\n+    // TODO: Existing plugin does not give access to workerConfiguration.getForkOptions().environment.\n+    if (false) environment ext.fdbEnvironment\n+}\n+\n+jmhJar {\n+}"
  },
  {
    "sha": "46b159d0370465837a228a6d6be7c9fbadbd9e21",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BasicBenchmark.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BasicBenchmark.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BasicBenchmark.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BasicBenchmark.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * BasicBenchmark.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import com.apple.foundationdb.record.BenchmarkRecords1Proto;\n+import com.apple.foundationdb.tuple.Tuple;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Random;\n+\n+/**\n+ * Very basic read / write test.\n+ */\n+public class BasicBenchmark {\n+    /**\n+     * Random key selector.\n+     */\n+    @State(Scope.Thread)\n+    public static class KeyGen {\n+        Random random;\n+        int mod;\n+\n+        @Setup\n+        public void setup(BenchmarkRecordStores.Simple db) {\n+            random = new Random();\n+            mod = db.numberOfRecords;\n+        }\n+\n+        public Tuple nextKey() {\n+            return Tuple.from(random.nextInt(mod));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void loadRecord(BenchmarkRecordStores.Simple fdb, BenchmarkTimer timer, KeyGen keyGen, Blackhole blackhole) {\n+        final Tuple primaryKey = keyGen.nextKey();\n+        fdb.run(timer, recordStore -> {\n+            blackhole.consume(recordStore.loadRecord(primaryKey));\n+        });\n+    }\n+\n+    @Benchmark\n+    public void saveRecord(BenchmarkRecordStores.Simple fdb, BenchmarkTimer timer, KeyGen keyGen) {\n+        final Tuple primaryKey = keyGen.nextKey();\n+        fdb.run(timer, recordStore -> {\n+            final BenchmarkRecords1Proto.MySimpleRecord.Builder builder = BenchmarkRecords1Proto.MySimpleRecord.newBuilder();\n+            builder.mergeFrom(recordStore.loadRecord(primaryKey).getRecord());\n+            builder.setNumValue3Indexed(builder.getNumValue3Indexed() + 1);\n+            recordStore.saveRecord(builder.build());\n+        });\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(BasicBenchmark.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}"
  },
  {
    "sha": "0384b6965ae84ed9f7aca5000a5d537cbf45a8b0",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkMetaData.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkMetaData.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkMetaData.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkMetaData.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * FDBRecordStoreBenchmark.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import com.apple.foundationdb.record.BenchmarkRecords1Proto;\n+import com.apple.foundationdb.record.RecordMetaData;\n+import com.apple.foundationdb.record.RecordMetaDataBuilder;\n+import com.apple.foundationdb.record.metadata.Index;\n+import com.apple.foundationdb.record.metadata.IndexTypes;\n+import com.apple.foundationdb.record.metadata.Key;\n+import com.apple.foundationdb.record.metadata.expressions.EmptyKeyExpression;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Methods for generating benchmark {@link RecordMetaData}.\n+ */\n+public class BenchmarkMetaData {\n+    private BenchmarkMetaData() {\n+    }\n+\n+    /**\n+     * No additional indexes.\n+     * @return records #1 base meta-data\n+     */\n+    public static RecordMetaDataBuilder records1Base() {\n+        return RecordMetaData.newBuilder().setRecords(BenchmarkRecords1Proto.getDescriptor());\n+    }\n+\n+    /**\n+     * Add a {@code RANK} index.\n+     * @return records #1 meta-data with added rank index\n+     */\n+    public static RecordMetaDataBuilder records1Rank() {\n+        final RecordMetaDataBuilder builder = RecordMetaData.newBuilder().setRecords(BenchmarkRecords1Proto.getDescriptor());\n+        builder.removeIndex(\"MySimpleRecord$num_value_unique\");\n+        builder.addIndex(\"MySimpleRecord\", new Index(\"num_value_unique_rank\", Key.Expressions.field(\"num_value_unique\").ungrouped(),\n+                EmptyKeyExpression.EMPTY, IndexTypes.RANK, Collections.emptyMap()));\n+        return builder;\n+    }\n+\n+}"
  },
  {
    "sha": "9984693602359fccedc50a5578b6f18eacb87c11",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStore.java",
    "status": "added",
    "additions": 177,
    "deletions": 0,
    "changes": 177,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStore.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStore.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStore.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,177 @@\n+/*\n+ * BenchmarkRecordStore.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import com.apple.foundationdb.record.PipelineOperation;\n+import com.apple.foundationdb.record.RecordMetaData;\n+import com.apple.foundationdb.record.RecordMetaDataProvider;\n+import com.apple.foundationdb.record.RecordStoreState;\n+import com.apple.foundationdb.record.provider.foundationdb.FDBDatabase;\n+import com.apple.foundationdb.record.provider.foundationdb.FDBDatabaseFactory;\n+import com.apple.foundationdb.record.provider.foundationdb.FDBMetaDataStore;\n+import com.apple.foundationdb.record.provider.foundationdb.FDBRecordContext;\n+import com.apple.foundationdb.record.provider.foundationdb.FDBRecordStore;\n+import com.apple.foundationdb.record.provider.foundationdb.FDBRecordStoreBase;\n+import com.apple.foundationdb.record.provider.foundationdb.keyspace.DirectoryLayerDirectory;\n+import com.apple.foundationdb.record.provider.foundationdb.keyspace.KeySpace;\n+import com.apple.foundationdb.record.provider.foundationdb.keyspace.KeySpaceDirectory;\n+import com.apple.foundationdb.record.provider.foundationdb.keyspace.KeySpacePath;\n+import com.apple.foundationdb.record.query.plan.QueryPlanner;\n+import com.apple.foundationdb.record.query.plan.RecordQueryPlanner;\n+import com.apple.foundationdb.record.query.plan.temp.CascadesPlanner;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static com.apple.foundationdb.record.provider.foundationdb.FDBRecordStore.DEFAULT_PIPELINE_SIZE;\n+\n+/**\n+ * Per benchmark state for accessing record store.\n+ * State includes store location, meta-data, and some performance parameters.\n+ * This is meant to simulate use in a mostly stateless server, so the basic operation is to open a transaction and connect\n+ * to a specific store.\n+ */\n+public class BenchmarkRecordStore {\n+    @Nonnull\n+    private FDBDatabase database;\n+    @Nonnull\n+    private FDBRecordStore.Builder recordStoreBuilder;\n+    @Nullable\n+    private KeySpacePath dataKeySpacePath;\n+    @Nullable\n+    private KeySpacePath metaDataKeySpacePath;\n+    @Nonnull\n+    private final PipelineSizer pipelineSizer;\n+\n+    private static final KeySpace KEY_SPACE = new KeySpace(\n+            new DirectoryLayerDirectory(\"record-layer-benchmark\", \"record-layer-benchmark\")\n+                    .addSubdirectory(new DirectoryLayerDirectory(\"data\", \"data\")\n+                            .addSubdirectory(new KeySpaceDirectory(\"name\", KeySpaceDirectory.KeyType.STRING)))\n+                    .addSubdirectory(new DirectoryLayerDirectory(\"metadata\", \"metadata\")\n+                            .addSubdirectory(new KeySpaceDirectory(\"name\", KeySpaceDirectory.KeyType.STRING)))\n+    );\n+\n+    static class PipelineSizer implements FDBRecordStoreBase.PipelineSizer {\n+        @Nonnull\n+        final Map<PipelineOperation, Integer> pipelineSizes = new HashMap<>();\n+        int defaultPipelineSize = DEFAULT_PIPELINE_SIZE;\n+\n+        @Override\n+        public int getPipelineSize(@Nonnull final PipelineOperation pipelineOperation) {\n+            return pipelineSizes.getOrDefault(pipelineOperation, defaultPipelineSize);\n+        }\n+    }\n+\n+    public BenchmarkRecordStore() {\n+        database = FDBDatabaseFactory.instance().getDatabase();\n+        recordStoreBuilder = FDBRecordStore.newBuilder();\n+        pipelineSizer = new PipelineSizer();\n+        recordStoreBuilder.setPipelineSizer(pipelineSizer);\n+    }\n+\n+    public FDBDatabase getDatabase() {\n+        return database;\n+    }\n+\n+    public BenchmarkRecordStore setDatabase(final FDBDatabase database) {\n+        this.database = database;\n+        return this;\n+    }\n+\n+    public FDBRecordStore.Builder getRecordStoreBuilder() {\n+        return recordStoreBuilder;\n+    }\n+\n+    public KeySpacePath getDataKeySpacePath(@Nonnull String name) {\n+        return KEY_SPACE.path(\"record-layer-benchmark\").add(\"data\").add(\"name\", name);\n+    }\n+\n+    public KeySpacePath getMetaDataKeySpacePath(@Nonnull String name) {\n+        return KEY_SPACE.path(\"record-layer-benchmark\").add(\"metadata\").add(\"name\", name);\n+    }\n+\n+    public void setKeySpacePath(@Nonnull KeySpacePath keySpacePath) {\n+        this.dataKeySpacePath = keySpacePath;\n+        recordStoreBuilder.setKeySpacePath(keySpacePath);\n+    }\n+\n+    public void setName(@Nonnull String name) {\n+        setKeySpacePath(getDataKeySpacePath(name));\n+    }\n+\n+    public void setMetaData(@Nonnull RecordMetaDataProvider metaData) {\n+        recordStoreBuilder.setMetaDataProvider(metaData);\n+    }\n+\n+    public void setMetaDataKeySpacePath(@Nonnull KeySpacePath metaDataKeySpacePath) {\n+        this.metaDataKeySpacePath = metaDataKeySpacePath;\n+    }\n+\n+    public void setMetaDataName(@Nonnull String name) {\n+        setMetaDataKeySpacePath(getMetaDataKeySpacePath(name));\n+    }\n+\n+    public void setDefaultPipelineSize(int defaultPipelineSize) {\n+        pipelineSizer.defaultPipelineSize = defaultPipelineSize;\n+    }\n+\n+    public void setPipelineSize(PipelineOperation operation, int size) {\n+        pipelineSizer.pipelineSizes.put(operation, size);\n+    }\n+\n+    public void deleteAllData(@Nonnull BenchmarkTimer timer) {\n+        database.run(timer.getTimer(), timer.getMdc(), recordContext -> {\n+            dataKeySpacePath.deleteAllData(recordContext);\n+            return null;\n+        });\n+    }\n+\n+    public FDBRecordStore openRecordStore(@Nonnull FDBRecordContext recordContext) {\n+        FDBRecordStore.Builder builder = recordStoreBuilder.copyBuilder();\n+        builder.setContext(recordContext);\n+        if (metaDataKeySpacePath != null) {\n+            builder.setMetaDataStore(new FDBMetaDataStore(recordContext, metaDataKeySpacePath));\n+        }\n+        return builder.createOrOpen();\n+    }\n+\n+    public void run(@Nonnull BenchmarkTimer timer, @Nonnull Consumer<FDBRecordStore> body) {\n+        database.run(timer.getTimer(), timer.getMdc(), recordContext -> {\n+            final FDBRecordStore recordStore = openRecordStore(recordContext);\n+            body.accept(recordStore);\n+            return null;\n+        });\n+    }\n+\n+    public QueryPlanner planner(@Nonnull BenchmarkTimer timer, boolean cascades) {\n+        final RecordMetaData recordMetaData = recordStoreBuilder.getMetaDataProvider().getRecordMetaData();\n+        final RecordStoreState recordStoreState = new RecordStoreState(null, null);\n+        if (cascades) {\n+            return new CascadesPlanner(recordMetaData, recordStoreState);\n+        } else {\n+            return new RecordQueryPlanner(recordMetaData, recordStoreState, timer.getTimer());\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "e349b285189da33a569af43e8afae2b3934b73f1",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStores.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStores.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStores.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkRecordStores.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * BenchmarkRecordStores.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+/**\n+ * Specific store configurations.\n+ */\n+public class BenchmarkRecordStores {\n+    private BenchmarkRecordStores() {\n+    }\n+\n+    /**\n+     * Simple record store.\n+     * <ul>\n+     * <li>{@code simple} keyspace</li>\n+     * <li>{@code benchmark_records_1} with no additional indexes</li>\n+     * </ul>\n+     */\n+    @State(Scope.Benchmark)\n+    public static class Simple extends BenchmarkRecordStore {\n+        @Setup\n+        public void setup() {\n+            setName(\"simple\");\n+            setMetaData(BenchmarkMetaData.records1Base());\n+        }\n+\n+        @Param(\"10000\")\n+        public int numberOfRecords;\n+    }\n+\n+    /**\n+     * Rank record store.\n+     * <ul>\n+     * <li>{@code rank} keyspace</li>\n+     * <li>{@code benchmark_records_1} with additional rank index</li>\n+     * </ul>\n+     */\n+    @State(Scope.Benchmark)\n+    public static class Rank extends BenchmarkRecordStore {\n+        @Setup\n+        public void setup() {\n+            setName(\"rank\");\n+            setMetaData(BenchmarkMetaData.records1Rank());\n+        }\n+\n+        @Param(\"5000\")\n+        public int numberOfRecords;\n+    }\n+}"
  },
  {
    "sha": "b29a1dc3cab3c3a98b98726a1cf8472164c1111e",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkTimer.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkTimer.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkTimer.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/BenchmarkTimer.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * FDBBenchmarkTimer.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import com.apple.foundationdb.record.provider.foundationdb.FDBStoreTimer;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+import javax.annotation.Nonnull;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Per thread state for logging and stats.\n+ */\n+@State(Scope.Thread)\n+public class BenchmarkTimer {\n+    @Nonnull\n+    private final FDBStoreTimer timer;\n+    @Nonnull\n+    private final Map<String, String> mdc;\n+\n+    public BenchmarkTimer() {\n+        timer = new FDBStoreTimer();\n+        mdc = new HashMap<>();\n+    }\n+\n+    @Nonnull\n+    public FDBStoreTimer getTimer() {\n+        return timer;\n+    }\n+\n+    @Nonnull\n+    public Map<String, String> getMdc() {\n+        return mdc;\n+    }\n+}"
  },
  {
    "sha": "976c1cedbbdd6fe3ff60e779c6863b45c57502f8",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/LoadBenchmark.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/LoadBenchmark.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/LoadBenchmark.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/LoadBenchmark.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * SimpleBenchmark.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import com.apple.foundationdb.record.BenchmarkRecords1Proto;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+/**\n+ * Load up the benchmark data sets.\n+ */\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 0)\n+@Measurement(iterations = 1)\n+@Fork(1)\n+public class LoadBenchmark {\n+    @Param({\"500\"})\n+    public int commitQuantum;\n+\n+    @Benchmark\n+    public void simple(BenchmarkRecordStores.Simple fdb, BenchmarkTimer timer) {\n+        fdb.deleteAllData(timer);\n+        for (int recNo = 0; recNo < fdb.numberOfRecords; recNo += commitQuantum) {\n+            final int baseRecNo = recNo;\n+            fdb.run(timer, recordStore -> {\n+                for (int i = 0; i < commitQuantum; i++) {\n+                    recordStore.saveRecord(simpleRecord1(baseRecNo + i));\n+                }\n+            });\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rank(BenchmarkRecordStores.Rank fdb, BenchmarkTimer timer) {\n+        fdb.deleteAllData(timer);\n+        for (int recNo = 0; recNo < fdb.numberOfRecords; recNo += commitQuantum) {\n+            final int baseRecNo = recNo;\n+            fdb.run(timer, recordStore -> {\n+                for (int i = 0; i < commitQuantum; i++) {\n+                    recordStore.saveRecord(simpleRecord1(baseRecNo + i));\n+                }\n+            });\n+        }\n+    }\n+\n+    private BenchmarkRecords1Proto.MySimpleRecord simpleRecord1(int recNo) {\n+        return BenchmarkRecords1Proto.MySimpleRecord.newBuilder()\n+                .setRecNo(recNo)\n+                .setStrValueIndexed(recNo % 2 == 0 ? \"even\" : \"odd\")\n+                .setNumValue2(recNo % 5)\n+                .setNumValue3Indexed(recNo % 3)\n+                .setNumValueUnique(recNo + 1000)\n+                .build();\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(LoadBenchmark.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}"
  },
  {
    "sha": "63f855bdb17e6ffed6f052663ef0926242014bbc",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/PlannerBenchmark.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/PlannerBenchmark.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/PlannerBenchmark.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/PlannerBenchmark.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * PlannerBenchmark.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import com.apple.foundationdb.record.query.RecordQuery;\n+import com.apple.foundationdb.record.query.expressions.Query;\n+import com.apple.foundationdb.record.query.plan.plans.RecordQueryPlan;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Planner benchmarks.\n+ */\n+@State(Scope.Benchmark)\n+public class PlannerBenchmark {\n+    @Param({\"false\", \"true\"})\n+    public boolean cascades;\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.MICROSECONDS)\n+    public void simpleOdd(BenchmarkRecordStores.Simple fdb, BenchmarkTimer timer, Blackhole blackhole) {\n+        final RecordQuery query = RecordQuery.newBuilder()\n+                .setRecordType(\"MySimpleRecord\")\n+                .setFilter(Query.field(\"str_value_indexed\").equalsValue(\"odd\"))\n+                .build();\n+        final RecordQueryPlan plan = fdb.planner(timer, cascades).plan(query);\n+        blackhole.consume(plan);\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(PlannerBenchmark.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}"
  },
  {
    "sha": "d02320cef04087ba2817402aca87a67a0449b42c",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/RankBenchmark.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/RankBenchmark.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/RankBenchmark.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/RankBenchmark.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * RankBenchmark.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.benchmark;\n+\n+import com.apple.foundationdb.record.RecordFunction;\n+import com.apple.foundationdb.record.provider.foundationdb.FDBStoredRecord;\n+import com.apple.foundationdb.record.query.expressions.Query;\n+import com.apple.foundationdb.tuple.Tuple;\n+import com.google.protobuf.Message;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Random;\n+\n+/**\n+ * Very basic read / write test.\n+ */\n+public class RankBenchmark {\n+    /**\n+     * Random key selector.\n+     */\n+    @State(Scope.Thread)\n+    public static class KeyGen {\n+        Random random;\n+        int mod;\n+\n+        @Setup\n+        public void setup(BenchmarkRecordStores.Simple db) {\n+            random = new Random();\n+            mod = db.numberOfRecords;\n+        }\n+\n+        public Tuple nextKey() {\n+            return Tuple.from(random.nextInt(mod));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void recordAndRank(BenchmarkRecordStores.Simple fdb, BenchmarkTimer timer, KeyGen keyGen, Blackhole blackhole) {\n+        final RecordFunction<Long> function = Query.rank(\"num_value_unique\").getFunction();\n+        final Tuple primaryKey = keyGen.nextKey();\n+        fdb.run(timer, recordStore -> {\n+            final FDBStoredRecord<Message> record = recordStore.loadRecord(primaryKey);\n+            final long rank = recordStore.evaluateRecordFunction(function, record).join();\n+            blackhole.consume(rank);\n+        });\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(RankBenchmark.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}"
  },
  {
    "sha": "933604a1ea73e8ab32839d35d251bbce3fd30247",
    "filename": "fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/package-info.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/package-info.java",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/package-info.java",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/java/com/apple/foundationdb/record/benchmark/package-info.java?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * package-info.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Record layer JMH benchmarks.\n+ */\n+package com.apple.foundationdb.record.benchmark;"
  },
  {
    "sha": "3e536832442493e621215a60f5929f739683e369",
    "filename": "fdb-record-layer-jmh/src/jmh/proto/benchmark_records_1.proto",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/proto/benchmark_records_1.proto",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/fdb-record-layer-jmh/src/jmh/proto/benchmark_records_1.proto",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/fdb-record-layer-jmh/src/jmh/proto/benchmark_records_1.proto?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * benchmark_records_1.proto\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2021 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+syntax = \"proto2\";\n+\n+package com.apple.foundationdb.record.bench1;\n+\n+option java_package = \"com.apple.foundationdb.record\";\n+option java_outer_classname = \"BenchmarkRecords1Proto\";\n+\n+import \"record_metadata_options.proto\";\n+\n+option (schema).store_record_versions = true;\n+\n+message MySimpleRecord {\n+  optional int64 rec_no = 1 [(field).primary_key = true];\n+  optional string str_value_indexed = 2 [(field).index = {}];\n+  optional int32 num_value_unique = 3 [(field).index = { unique: true }];\n+  optional int32 num_value_2 = 4;\n+  optional int32 num_value_3_indexed = 5 [(field).index = {}];\n+}\n+\n+message RecordTypeUnion {\n+  optional MySimpleRecord _MySimpleRecord = 1;\n+}"
  },
  {
    "sha": "5c2d1cf016b3885f6930543d57b744ea8c220a1a",
    "filename": "gradle/wrapper/gradle-wrapper.jar",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradle/wrapper/gradle-wrapper.jar",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradle/wrapper/gradle-wrapper.jar",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/gradle/wrapper/gradle-wrapper.jar?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3"
  },
  {
    "sha": "9d3f9715d9efd433a2ac9736a969fceb8fadf4f7",
    "filename": "gradle/wrapper/gradle-wrapper.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradle/wrapper/gradle-wrapper.properties",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradle/wrapper/gradle-wrapper.properties",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/gradle/wrapper/gradle-wrapper.properties?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -1,6 +1,6 @@\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n-distributionSha256Sum=55db797adf2705bb782655f012af7cc7724b14382881f60fb3f3eb4b645c02d6\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-5.2-all.zip\n+distributionSha256Sum=abc10bcedb58806e8654210f96031db541bcd2d6fc3161e81cb0572d6a15e821\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-5.6.4-all.zip\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists"
  },
  {
    "sha": "83f2acfdc319a24e8766cca78f32474ad7a22dd6",
    "filename": "gradlew",
    "status": "modified",
    "additions": 19,
    "deletions": 3,
    "changes": 22,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradlew",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradlew",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/gradlew?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -1,5 +1,21 @@\n #!/usr/bin/env sh\n \n+#\n+# Copyright 2015 the original author or authors.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      https://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n ##############################################################################\n ##\n ##  Gradle start up script for UN*X\n@@ -28,7 +44,7 @@ APP_NAME=\"Gradle\"\n APP_BASE_NAME=`basename \"$0\"`\n \n # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n-DEFAULT_JVM_OPTS=\"\"\n+DEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n \n # Use the maximum available, or set MAX_FD != -1 to use that value.\n MAX_FD=\"maximum\"\n@@ -109,8 +125,8 @@ if $darwin; then\n     GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\n fi\n \n-# For Cygwin, switch paths to Windows format before running java\n-if $cygwin ; then\n+# For Cygwin or MSYS, switch paths to Windows format before running java\n+if [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n     APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n     CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n     JAVACMD=`cygpath --unix \"$JAVACMD\"`"
  },
  {
    "sha": "24467a141f791695fc1009c78d913b2c849d1412",
    "filename": "gradlew.bat",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradlew.bat",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/gradlew.bat",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/gradlew.bat?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -1,3 +1,19 @@\n+@rem\r\n+@rem Copyright 2015 the original author or authors.\r\n+@rem\r\n+@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+@rem you may not use this file except in compliance with the License.\r\n+@rem You may obtain a copy of the License at\r\n+@rem\r\n+@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n+@rem\r\n+@rem Unless required by applicable law or agreed to in writing, software\r\n+@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+@rem See the License for the specific language governing permissions and\r\n+@rem limitations under the License.\r\n+@rem\r\n+\r\n @if \"%DEBUG%\" == \"\" @echo off\r\n @rem ##########################################################################\r\n @rem\r\n@@ -14,7 +30,7 @@ set APP_BASE_NAME=%~n0\n set APP_HOME=%DIRNAME%\r\n \r\n @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\n-set DEFAULT_JVM_OPTS=\r\n+set DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n \r\n @rem Find java.exe\r\n if defined JAVA_HOME goto findJavaFromJavaHome\r"
  },
  {
    "sha": "d7842d5b7cf20abd334c92cf0607d2c84df13f77",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/FoundationDB/fdb-record-layer/blob/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/settings.gradle",
    "raw_url": "https://github.com/FoundationDB/fdb-record-layer/raw/42c250bf94c4342b1a26c3ed6f094b7867a02aa3/settings.gradle",
    "contents_url": "https://api.github.com/repos/FoundationDB/fdb-record-layer/contents/settings.gradle?ref=42c250bf94c4342b1a26c3ed6f094b7867a02aa3",
    "patch": "@@ -26,6 +26,7 @@ include 'fdb-record-layer-core-shaded'\n include 'fdb-record-layer-icu'\n include 'fdb-record-layer-spatial'\n include 'fdb-record-layer-lucene'\n+include 'fdb-record-layer-jmh'\n include 'examples'\n \n // It's confusing to have dozens of files called build.gradle scattered around the project\n@@ -58,4 +59,5 @@ if (protoMajorVersion != \"2\") {\n     project(':fdb-record-layer-core-shaded').name = \"fdb-record-layer-core-pb${protoMajorVersion}-shaded\"\n     project(':fdb-record-layer-icu').name = \"fdb-record-layer-icu-pb${protoMajorVersion}\"\n     project(':fdb-record-layer-spatial').name = \"fdb-record-layer-spatial-pb${protoMajorVersion}\"\n+    project(':fdb-record-layer-jmh').name = \"fdb-record-layer-jmh-pb${protoMajorVersion}\"\n }"
  }
]
