[
  {
    "sha": "9f390a557b8e0f5ffb3f54d4aacfa84d04e15d5a",
    "filename": "s2tbx-cache-ui/src/main/java/org/esa/s2tbx/dataio/s2/preferences/ui/cache/S2CacheOptionsPanel.java",
    "status": "modified",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/senbox-org/s2tbx/blob/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache-ui/src/main/java/org/esa/s2tbx/dataio/s2/preferences/ui/cache/S2CacheOptionsPanel.java",
    "raw_url": "https://github.com/senbox-org/s2tbx/raw/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache-ui/src/main/java/org/esa/s2tbx/dataio/s2/preferences/ui/cache/S2CacheOptionsPanel.java",
    "contents_url": "https://api.github.com/repos/senbox-org/s2tbx/contents/s2tbx-cache-ui/src/main/java/org/esa/s2tbx/dataio/s2/preferences/ui/cache/S2CacheOptionsPanel.java?ref=86240816dc2b3a00cfc9bda22c4f3b5f99eec334",
    "patch": "@@ -6,13 +6,19 @@\n package org.esa.s2tbx.dataio.s2.preferences.ui.cache;\n \n import com.bc.ceres.swing.TableLayout;\n+\n+import org.esa.s2tbx.dataio.cache.S2CacheSizeChecking;\n import org.esa.s2tbx.dataio.cache.S2CacheUtils;\n import org.esa.snap.rcp.SnapApp;\n import org.esa.snap.runtime.Config;\n import org.openide.util.NbBundle;\n \n import javax.swing.*;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+\n import java.awt.*;\n+import java.awt.event.KeyEvent;\n import java.util.ArrayList;\n import java.util.prefs.BackingStoreException;\n import java.util.prefs.Preferences;\n@@ -21,12 +27,16 @@\n \n \n     private JComboBox<String> box;\n+    private JCheckBox activeLImitedSizeCache;\n+    private JTextField limitedSizeCacheField;\n     private JLabel informationLabel;\n \n     S2CacheOptionsPanel(final S2CacheOptionsPanelController controller) {\n         initComponents();\n \n         box.addItemListener(e -> controller.changed());\n+        activeLImitedSizeCache.addItemListener(e -> controller.changed());\n+        limitedSizeCacheField.addActionListener(e -> controller.changed());\n     }\n \n     private void initComponents() {\n@@ -63,6 +73,25 @@ private void initComponents() {\n         comboPanel.add(box);\n         comboPanel.add(tableLayout.createHorizontalSpacer());\n         comboPanel.add(informationLabel);\n+        limitedSizeCacheField = new DoubleTextField(String.valueOf(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_DEFAULT));\n+        activeLImitedSizeCache = new JCheckBox(\"Maximum size in cache (Go)\"); \n+        activeLImitedSizeCache.setSelected(false);\n+        activeLImitedSizeCache.addChangeListener(new ChangeListener() {\n+\n+                public void stateChanged(final ChangeEvent e) {\n+                    if(activeLImitedSizeCache.isSelected()){\n+                        limitedSizeCacheField.setEditable(true);\n+                    }else{\n+                        limitedSizeCacheField.setEditable(false);\n+                    }\n+                }\n+            });\n+        activeLImitedSizeCache.setToolTipText(\"<html>This option launch a process to check the cache size every minute.\"\n+            +\"In case of oversizing, the cache size will be return at 75% of the specified maximum size.\"\n+            +\"<br>Only oldest files will be deleted</html>\");\n+        \n+        comboPanel.add(activeLImitedSizeCache);\n+        comboPanel.add(limitedSizeCacheField);\n         comboPanel.add(tableLayout.createVerticalSpacer());\n \n         //Button Panel\n@@ -89,6 +118,10 @@ void load() {\n         final Preferences preferences = Config.instance(\"s2tbx\").load().preferences();\n         box.setSelectedItem(preferences.get(S2CacheUtils.SENTINEL_2_CACHE_MAX_TIME,\n                                             S2CacheUtils.SENTINEL_2_CACHE_OPTION_WEEK));\n+        limitedSizeCacheField.setEditable(preferences.getBoolean(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_OPTION,\n+                                            S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_OPTION_DEFAULT));\n+        limitedSizeCacheField.setText(String.valueOf(preferences.getDouble(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE,\n+                                            S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_DEFAULT)));\n         updateLayer();\n     }\n \n@@ -125,16 +158,41 @@ void store() {\n         final Preferences preferences = Config.instance(\"s2tbx\").load().preferences();\n         preferences.put(S2CacheUtils.SENTINEL_2_CACHE_MAX_TIME,\n                         box.getSelectedItem().toString());\n+        preferences.putBoolean(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_OPTION,\n+                        activeLImitedSizeCache.isSelected());\n+        preferences.putDouble(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE,\n+                        Double.valueOf(limitedSizeCacheField.getText()));\n         try {\n             preferences.flush();\n         } catch (BackingStoreException e) {\n             SnapApp.getDefault().getLogger().severe(e.getMessage());\n         }\n+        S2CacheSizeChecking sizeCacheCheckingLoop = S2CacheSizeChecking.getInstance();\n+        sizeCacheCheckingLoop.setParameters(preferences.getBoolean(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_OPTION,\n+                        S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_OPTION_DEFAULT), preferences.getDouble(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE,\n+                        S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_DEFAULT));\n     }\n \n     boolean valid() {\n         // Check whether form is consistent and complete\n         return true;\n     }\n \n+\n+    private class DoubleTextField extends JTextField {\n+\n+        private final static String disallowedChars = \"`ยง~!@#$%^&*()_+=\\\\|\\\"':;?/><,- \";\n+\n+        public DoubleTextField(String defaultValue) {\n+            super(defaultValue);\n+        }\n+\n+        @Override\n+        protected void processKeyEvent(KeyEvent e) {\n+            if (!Character.isLetter(e.getKeyChar()) && disallowedChars.indexOf(e.getKeyChar()) == -1) {\n+                super.processKeyEvent(e);\n+            }\n+        }\n+    }\n+\n }"
  },
  {
    "sha": "a76b0777c547a3fa80e702458fb8f270b38e4c44",
    "filename": "s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheActivator.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/senbox-org/s2tbx/blob/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheActivator.java",
    "raw_url": "https://github.com/senbox-org/s2tbx/raw/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheActivator.java",
    "contents_url": "https://api.github.com/repos/senbox-org/s2tbx/contents/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheActivator.java?ref=86240816dc2b3a00cfc9bda22c4f3b5f99eec334",
    "patch": "@@ -16,6 +16,13 @@\n     @Override\n     public void start() {\n         final Preferences preferences = Config.instance(\"s2tbx\").load().preferences();\n+        // control of the S2cache size over time\n+        S2CacheSizeChecking sizeCacheCheckingLoop = S2CacheSizeChecking.getInstance();\n+        sizeCacheCheckingLoop.setParameters(preferences.getBoolean(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_OPTION,\n+                        S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_OPTION_DEFAULT), preferences.getDouble(S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE,\n+                        S2CacheUtils.SENTINEL_2_CACHE_MAX_SIZE_DEFAULT));\n+        sizeCacheCheckingLoop.launchCacheSizeChecking(0.25, 1);\n+\n         String cachePolicy = preferences.get(S2CacheUtils.SENTINEL_2_CACHE_MAX_TIME, null);\n         if(cachePolicy == null) {\n             cachePolicy = S2CacheUtils.SENTINEL_2_CACHE_OPTION_WEEK;"
  },
  {
    "sha": "f504690d95af8bca2dc36e52c72240b125ce191c",
    "filename": "s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheSizeChecking.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/senbox-org/s2tbx/blob/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheSizeChecking.java",
    "raw_url": "https://github.com/senbox-org/s2tbx/raw/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheSizeChecking.java",
    "contents_url": "https://api.github.com/repos/senbox-org/s2tbx/contents/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheSizeChecking.java?ref=86240816dc2b3a00cfc9bda22c4f3b5f99eec334",
    "patch": "@@ -0,0 +1,69 @@\n+package org.esa.s2tbx.dataio.cache;\n+\n+import java.io.File;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.esa.snap.core.util.ThreadExecutor;\n+import org.esa.snap.core.util.ThreadRunnable;\n+\n+public class S2CacheSizeChecking {\n+\n+    public static final S2CacheSizeChecking INSTANCE = new S2CacheSizeChecking();\n+    private static final Logger logger = Logger.getLogger(S2CacheSizeChecking.class.getName());\n+    private boolean checkingEnable;\n+    private double limitSizeCache;\n+    private S2CacheSizeChecking(){\n+        //nothing to init\n+    }\n+    \n+    public static S2CacheSizeChecking getInstance() {\n+        return INSTANCE;\n+    }\n+    /**\n+     * set the parameters of the cache size checking\n+     *\n+     */\n+    public synchronized void setParameters(boolean checkingEnable,double limitSizeCache ) {\n+        this.checkingEnable = checkingEnable;\n+        this.limitSizeCache = limitSizeCache;\n+    }\n+\n+    /**\n+     * Method check the S2cache size over time. The method is executed in thread.\n+     * Each period time, the cache size is checked.\n+     * The x% of the oldest files should be deleted in case of cache oversize.\n+     * @param releasedSpacePurcent The space purcentage of the oldest files should be deleted\n+     * @param period The period between two size checking in minute\n+     */\n+    public synchronized void launchCacheSizeChecking(double releasedSpacePurcent, int period) {\n+        final ThreadExecutor executor = new ThreadExecutor();\n+            try {\n+                ThreadRunnable runnable = new ThreadRunnable() {\n+                    @Override\n+                    public void process() throws Exception {\n+                        double byteToGigaByte = 0.000000001;\n+                        while(!Thread.currentThread().isInterrupted()){\n+                            if(checkingEnable){\n+                                double currentCacheSize = S2CacheUtils.getCacheSize()*byteToGigaByte;\n+                                //compute the limit of cache size should be keep after the checking\n+                                double circularLimitSizeCache = limitSizeCache * (1-releasedSpacePurcent);\n+                                if(currentCacheSize>limitSizeCache){\n+                                    while(currentCacheSize>circularLimitSizeCache)\n+                                    {\n+                                        File oldestFile = S2CacheUtils.getOldestFolder();\n+                                        S2CacheUtils.deleteFile(oldestFile);\n+                                        currentCacheSize = S2CacheUtils.getCacheSize() * byteToGigaByte;\n+                                    }\n+                                }\n+                            }\n+                            Thread.sleep((long)period*20000);\n+                        }\n+                    }\n+                };\n+                executor.execute(runnable);\n+            } catch (Exception ex) {\n+                logger.log(Level.SEVERE, \"Failed to initialize S2Cache options.\"+ex.getMessage());\n+            }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ccd625b3e9d5a70662788fea3ddba192ce93d034",
    "filename": "s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheUtils.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/senbox-org/s2tbx/blob/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheUtils.java",
    "raw_url": "https://github.com/senbox-org/s2tbx/raw/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheUtils.java",
    "contents_url": "https://api.github.com/repos/senbox-org/s2tbx/contents/s2tbx-cache/src/main/java/org/esa/s2tbx/dataio/cache/S2CacheUtils.java?ref=86240816dc2b3a00cfc9bda22c4f3b5f99eec334",
    "patch": "@@ -11,6 +11,10 @@\n public class S2CacheUtils {\n \n     public final static String SENTINEL_2_CACHE_MAX_TIME = \"s2tbx.dataio.maxTime\";\n+    public final static String SENTINEL_2_CACHE_MAX_SIZE_OPTION = \"s2tbx.dataio.maxSizeActive\";\n+    public final static String SENTINEL_2_CACHE_MAX_SIZE = \"s2tbx.dataio.maxSize\";\n+    public final static boolean SENTINEL_2_CACHE_MAX_SIZE_OPTION_DEFAULT = false;\n+    public final static double SENTINEL_2_CACHE_MAX_SIZE_DEFAULT = 20.0;\n \n     public final static long ONE_DAY_MILLISECONDS = 24 * 60 * 60 * 1000;\n     public final static long ONE_WEEK_MILLISECONDS = 7 * 24 * 60 * 60 * 1000;"
  },
  {
    "sha": "fdafca27b982fdb7735100dd9004c36612279526",
    "filename": "s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/images/s2cache.jpg",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/senbox-org/s2tbx/blob/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/images/s2cache.jpg",
    "raw_url": "https://github.com/senbox-org/s2tbx/raw/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/images/s2cache.jpg",
    "contents_url": "https://api.github.com/repos/senbox-org/s2tbx/contents/s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/images/s2cache.jpg?ref=86240816dc2b3a00cfc9bda22c4f3b5f99eec334"
  },
  {
    "sha": "cd38a8b03eb6e10dd82376c440a9267f40af7cd4",
    "filename": "s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/s2tbx/S2TBXOptions.html",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/senbox-org/s2tbx/blob/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/s2tbx/S2TBXOptions.html",
    "raw_url": "https://github.com/senbox-org/s2tbx/raw/86240816dc2b3a00cfc9bda22c4f3b5f99eec334/s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/s2tbx/S2TBXOptions.html",
    "contents_url": "https://api.github.com/repos/senbox-org/s2tbx/contents/s2tbx-s2msi-reader-ui/src/main/resources/org/esa/s2tbx/dataio/s2/preferences/ui/msi/docs/s2tbx/S2TBXOptions.html?ref=86240816dc2b3a00cfc9bda22c4f3b5f99eec334",
    "patch": "@@ -72,6 +72,8 @@ <h4>Sentinel-2 Cache</h4>\n <p><br>The S2 images are originally in JP2 format. These images are decompresed (by tiles) to new GeoTiff images internally in SNAP.\n      These GeoTiff images are stored in [userFolder]/.snap/var/cache/s2tbx in order to be available in the future when working with the same images.\n      The user can select in the S2TBX options interface when to delete the cache and also there is a button to clean up the cache.\n+     <br>Moreover, the user can active the cache size checking over the time (checked every minutes).\n+     <br>Then the maximum cache size can be adapted. In case of exceeding cache size, the oldest product files should be deleted until the cache size has been reached 75% of the specified maximum.\n </p>\n \n "
  }
]
