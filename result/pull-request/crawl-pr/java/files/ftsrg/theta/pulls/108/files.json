[
  {
    "sha": "f7306fec39dc01baf5db7f175269ce1d432db294",
    "filename": "settings.gradle.kts",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/settings.gradle.kts",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/settings.gradle.kts",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/settings.gradle.kts?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -18,6 +18,7 @@ include(\n         \"xta/xta\",\n         \"xta/xta-analysis\",\n         \"xta/xta-cli\",\n+        \"xta/xta-testgen\",\n \n         \"xsts/xsts\",\n         \"xsts/xsts-analysis\",\n@@ -29,4 +30,4 @@ for (project in rootProject.children) {\n     val projectName = projectPath.split(\"/\").last()\n     project.projectDir = file(\"subprojects/$projectPath\")\n     project.name = \"${rootProject.name}-$projectName\"\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "774d5c50672f6e9c5df7c07c5419fbaec7bb0b2b",
    "filename": "subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/NodeAttributes.java",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/NodeAttributes.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/NodeAttributes.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/NodeAttributes.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -28,9 +28,10 @@\n \tprivate final int peripheries;\n \tprivate final Shape shape;\n \tprivate final Alignment alignment;\n+\tprivate final boolean invisible;\n \n \tprivate NodeAttributes(final String label, final Color lineColor, final Color fillColor, final LineStyle lineStyle,\n-\t\t\t\t\t\t   final String font, final int peripheries, final Shape shape, final Alignment alignment) {\n+\t\t\t\t\t\t   final String font, final int peripheries, final Shape shape, final Alignment alignment, final boolean invisible) {\n \t\tthis.label = checkNotNull(label);\n \t\tthis.lineColor = checkNotNull(lineColor);\n \t\tthis.fillColor = checkNotNull(fillColor);\n@@ -39,6 +40,7 @@ private NodeAttributes(final String label, final Color lineColor, final Color fi\n \t\tthis.peripheries = peripheries;\n \t\tthis.shape = checkNotNull(shape);\n \t\tthis.alignment = checkNotNull(alignment);\n+\t\tthis.invisible = invisible;\n \t}\n \n \tpublic String getLabel() {\n@@ -73,6 +75,8 @@ public Alignment getAlignment() {\n \t\treturn alignment;\n \t}\n \n+\tpublic boolean getInvisible() { return invisible; }\n+\n \tpublic static Builder builder() {\n \t\treturn new Builder();\n \t}\n@@ -86,6 +90,7 @@ public static Builder builder() {\n \t\tprivate int peripheries = 1;\n \t\tprivate Shape shape = Shape.ELLIPSE;\n \t\tprivate Alignment alignment = Alignment.CENTER;\n+\t\tprivate boolean invisible = false;\n \n \t\tpublic Builder label(final String label) {\n \t\t\tthis.label = label;\n@@ -127,8 +132,13 @@ public Builder alignment(final Alignment alignment) {\n \t\t\treturn this;\n \t\t}\n \n+\t\tpublic Builder invisible(final boolean invisible) {\n+\t\t\tthis.invisible = invisible;\n+\t\t\treturn this;\n+\t\t}\n+\n \t\tpublic NodeAttributes build() {\n-\t\t\treturn new NodeAttributes(label, lineColor, fillColor, lineStyle, font, peripheries, shape, alignment);\n+\t\t\treturn new NodeAttributes(label, lineColor, fillColor, lineStyle, font, peripheries, shape, alignment, invisible);\n \t\t}\n \t}\n }"
  },
  {
    "sha": "d1c5d2060285e23c80b78961be89020e79f6f8c2",
    "filename": "subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/writer/GraphvizWriter.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/writer/GraphvizWriter.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/writer/GraphvizWriter.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/common/common/src/main/java/hu/bme/mit/theta/common/visualization/writer/GraphvizWriter.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -149,6 +149,10 @@ private void printSimpleNode(final Node node, final StringBuilder sb) {\n \t\t}\n \t\tstyle += \"filled\";\n \n+\t\tif (attributes.getInvisible()) {\n+\t\t\tstyle = \"invis,\" + style;\n+\t\t}\n+\n \t\tsb.append(\"\\t\\t\").append(node.getId());\n \t\tsb.append(\" [label=\\\"\").append(convertLabel(attributes.getLabel(), attributes.getAlignment())).append('\\\"');\n \t\tif (attributes.getPeripheries() > 1) {"
  },
  {
    "sha": "d1a4c8982e894a8aa437233ac964c6ad7d527423",
    "filename": "subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/XtaAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/XtaAction.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/XtaAction.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/XtaAction.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -56,7 +56,7 @@\n \n public abstract class XtaAction extends StmtAction {\n \n-\tprivate static final VarDecl<RatType> DELAY = Var(\"_delay\", Rat());\n+\tpublic static final VarDecl<RatType> DELAY = Var(\"_delay\", Rat());\n \n \tprivate final Collection<VarDecl<RatType>> clockVars;\n \tprivate final List<Loc> sourceLocs;"
  },
  {
    "sha": "ccfa784933ff19756d6891576d93b6562bd8952d",
    "filename": "subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/lazy/LazyXtaTestgenStatistics.java",
    "status": "added",
    "additions": 183,
    "deletions": 0,
    "changes": 183,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/lazy/LazyXtaTestgenStatistics.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/lazy/LazyXtaTestgenStatistics.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-analysis/src/main/java/hu/bme/mit/theta/xta/analysis/lazy/LazyXtaTestgenStatistics.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -0,0 +1,183 @@\n+package hu.bme.mit.theta.xta.analysis.lazy;\n+\n+import com.google.common.base.Stopwatch;\n+import hu.bme.mit.theta.analysis.algorithm.Statistics;\n+import hu.bme.mit.theta.common.table.TableWriter;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class LazyXtaTestgenStatistics extends Statistics {\n+\tprivate final LazyXtaStatistics stats;\n+\n+\tprivate final Stopwatch testgenTimer;\n+\tprivate long testCasesGenerated;\n+\tprivate long testCases;\n+\tprivate long testCasesTotalLength;\n+\n+\tpublic LazyXtaTestgenStatistics(LazyXtaStatistics stats) {\n+\t\tthis.stats = stats;\n+\n+\t\ttestgenTimer = Stopwatch.createUnstarted();\n+\t\ttestCases = 0;\n+\t\ttestCasesTotalLength = 0;\n+\t\ttestCasesGenerated = 0;\n+\n+\t\taddStat(\"AlgorithmTimeInMs\", this::getAlgorithmTimeInMs);\n+\t\taddStat(\"ExpandTimeInMs\", this::getExpandTimeInMs);\n+\t\taddStat(\"CloseTimeInMs\", this::getCloseTimeInMs);\n+\t\taddStat(\"ExpandExplRefinementTimeInMs\", this::getExpandExplRefinementTimeInMs);\n+\t\taddStat(\"ExpandZoneRefinementTimeInMs\", this::getExpandZoneRefinementTimeInMs);\n+\t\taddStat(\"CloseExplRefinementTimeInMs\", this::getCloseExplRefinementTimeInMs);\n+\t\taddStat(\"CloseZoneRefinementTimeInMs\", this::getCloseZoneRefinementTimeInMs);\n+\t\taddStat(\"CoverageChecks\", this::getCoverageChecks);\n+\t\taddStat(\"CoverageAttempts\", this::getCoverageAttempts);\n+\t\taddStat(\"CoverageSuccesses\", this::getCoverageSuccesses);\n+\t\taddStat(\"ExplRefinementSteps\", this::getExplRefinementSteps);\n+\t\taddStat(\"ZoneRefinementSteps\", this::getZoneRefinementSteps);\n+\t\taddStat(\"ArgDepth\", this::getArgDepth);\n+\t\taddStat(\"ArgNodes\", this::getArgNodes);\n+\t\taddStat(\"ArgNodesExpanded\", this::getArgNodesExpanded);\n+\n+\t\taddStat(\"TestCasesGenerated\", this::getTestCasesGenerated);\n+\t\taddStat(\"TestgenTimeInMs\", this::getTestgenTimeInMs);\n+\t\taddStat(\"TestCases\", this::getTestCases);\n+\t\taddStat(\"TestCasesTotalLength\", this::getTestCasesTotalLength);\n+\t}\n+\n+\tpublic long getAlgorithmTimeInMs() { return stats.getAlgorithmTimeInMs(); }\n+\n+\tpublic long getExpandTimeInMs() {\n+\t\treturn stats.getExpandTimeInMs();\n+\t}\n+\n+\tpublic long getCloseTimeInMs() {\n+\t\treturn stats.getCloseTimeInMs();\n+\t}\n+\n+\tpublic long getExpandExplRefinementTimeInMs() {\n+\t\treturn stats.getExpandExplRefinementTimeInMs();\n+\t}\n+\n+\tpublic long getExpandZoneRefinementTimeInMs() {\n+\t\treturn stats.getExpandZoneRefinementTimeInMs();\n+\t}\n+\n+\tpublic long getCloseExplRefinementTimeInMs() {\n+\t\treturn stats.getCloseExplRefinementTimeInMs();\n+\t}\n+\n+\tpublic long getCloseZoneRefinementTimeInMs() {\n+\t\treturn stats.getCloseZoneRefinementTimeInMs();\n+\t}\n+\n+\tpublic long getCoverageChecks() {\n+\t\treturn stats.getCoverageChecks();\n+\t}\n+\n+\tpublic long getCoverageAttempts() {\n+\t\treturn stats.getCoverageAttempts();\n+\t}\n+\n+\tpublic long getCoverageSuccesses() {\n+\t\treturn stats.getCoverageSuccesses();\n+\t}\n+\n+\tpublic long getExplRefinementSteps() {\n+\t\treturn stats.getExplRefinementSteps();\n+\t}\n+\n+\tpublic long getZoneRefinementSteps() {\n+\t\treturn stats.getZoneRefinementSteps();\n+\t}\n+\n+\tpublic long getArgDepth() {\n+\t\treturn stats.getArgDepth();\n+\t}\n+\n+\tpublic long getArgNodes() {\n+\t\treturn stats.getArgNodes();\n+\t}\n+\n+\tpublic long getArgNodesExpanded() {\n+\t\treturn stats.getArgNodesExpanded();\n+\t}\n+\n+\n+\tpublic long getTestCasesGenerated() { return testCasesGenerated; }\n+\n+\tpublic long getTestgenTimeInMs() { return testgenTimer.elapsed(MILLISECONDS); }\n+\n+\tpublic long getTestCases() { return testCases; }\n+\n+\tpublic long getTestCasesTotalLength() { return testCasesTotalLength; }\n+\n+\tpublic static void writeHeader(final TableWriter writer) {\n+\t\twriter.cell(\"AlgorithmTimeInMs\");\n+\t\twriter.cell(\"ExpandTimeInMs\");\n+\t\twriter.cell(\"CloseTimeInMs\");\n+\t\twriter.cell(\"ExpandExplRefinementTimeInMs\");\n+\t\twriter.cell(\"ExpandZoneRefinementTimeInMs\");\n+\t\twriter.cell(\"CloseExplRefinementTimeInMs\");\n+\t\twriter.cell(\"CloseZoneRefinementTimeInMs\");\n+\t\twriter.cell(\"CoverageChecks\");\n+\t\twriter.cell(\"CoverageAttempts\");\n+\t\twriter.cell(\"CoverageSuccesses\");\n+\t\twriter.cell(\"ExplRefinementSteps\");\n+\t\twriter.cell(\"ZoneRefinementSteps\");\n+\t\twriter.cell(\"ArgDepth\");\n+\t\twriter.cell(\"ArgNodes\");\n+\t\twriter.cell(\"ArgNodesExpanded\");\n+\n+\t\twriter.cell(\"TestCasesGenerated\");\n+\t\twriter.cell(\"TestgenTimeInMs\");\n+\t\twriter.cell(\"TestCases\");\n+\t\twriter.cell(\"TestCasesTotalLength\");\n+\n+\t\twriter.newRow();\n+\t}\n+\n+\tpublic void writeData(final TableWriter writer) {\n+\t\twriter.cell(getAlgorithmTimeInMs());\n+\t\twriter.cell(getExpandTimeInMs());\n+\t\twriter.cell(getCloseTimeInMs());\n+\t\twriter.cell(getExpandExplRefinementTimeInMs());\n+\t\twriter.cell(getExpandZoneRefinementTimeInMs());\n+\t\twriter.cell(getCloseExplRefinementTimeInMs());\n+\t\twriter.cell(getCloseZoneRefinementTimeInMs());\n+\t\twriter.cell(getCoverageChecks());\n+\t\twriter.cell(getCoverageAttempts());\n+\t\twriter.cell(getCoverageSuccesses());\n+\t\twriter.cell(getExplRefinementSteps());\n+\t\twriter.cell(getZoneRefinementSteps());\n+\t\twriter.cell(getArgDepth());\n+\t\twriter.cell(getArgNodes());\n+\t\twriter.cell(getArgNodesExpanded());\n+\n+\t\twriter.cell(testCasesGenerated);\n+\t\twriter.cell(getTestgenTimeInMs());\n+\t\twriter.cell(testCases);\n+\t\twriter.cell(testCasesTotalLength);\n+\n+\t\twriter.newRow();\n+\t}\n+\n+\tpublic void startTestgen() {\n+\t\ttestgenTimer.start();\n+\t}\n+\n+\tpublic void stopTestgen() {\n+\t\ttestgenTimer.stop();\n+\t}\n+\n+\tpublic void testCaseGenerated() {\n+\t\ttestCasesGenerated++;\n+\t}\n+\n+\tpublic void setTestCases(long num) {\n+\t\ttestCases = num;\n+\t}\n+\n+\tpublic void addTestCaseLength(long length) {\n+\t\ttestCasesTotalLength += length;\n+\t}\n+}"
  },
  {
    "sha": "1e8981b5ac87add03a7cb8c0e7a584054e3f1d8d",
    "filename": "subprojects/xta/xta-cli/build.gradle.kts",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-cli/build.gradle.kts",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-cli/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-cli/build.gradle.kts?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -7,6 +7,7 @@ dependencies {\n     compile(project(\":theta-xta\"))\n     compile(project(\":theta-xta-analysis\"))\n     compile(project(\":theta-solver-z3\"))\n+    compile(project(\":theta-xta-testgen\"))\n }\n \n application {"
  },
  {
    "sha": "fa00987c530a5a5bf2fb4c06a20f1bf870146b32",
    "filename": "subprojects/xta/xta-cli/src/main/java/hu/bme/mit/theta/xta/cli/XtaCli.java",
    "status": "modified",
    "additions": 64,
    "deletions": 11,
    "changes": 75,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-cli/src/main/java/hu/bme/mit/theta/xta/cli/XtaCli.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-cli/src/main/java/hu/bme/mit/theta/xta/cli/XtaCli.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-cli/src/main/java/hu/bme/mit/theta/xta/cli/XtaCli.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -16,29 +16,38 @@\n package hu.bme.mit.theta.xta.cli;\n \n import java.io.*;\n+import java.util.Set;\n \n import com.beust.jcommander.JCommander;\n import com.beust.jcommander.Parameter;\n import com.beust.jcommander.ParameterException;\n \n+import hu.bme.mit.theta.analysis.algorithm.ARG;\n import hu.bme.mit.theta.analysis.algorithm.SafetyChecker;\n import hu.bme.mit.theta.analysis.algorithm.SafetyResult;\n import hu.bme.mit.theta.analysis.algorithm.SearchStrategy;\n import hu.bme.mit.theta.analysis.unit.UnitPrec;\n import hu.bme.mit.theta.analysis.utils.ArgVisualizer;\n import hu.bme.mit.theta.analysis.utils.TraceVisualizer;\n import hu.bme.mit.theta.common.CliUtils;\n+import hu.bme.mit.theta.common.logging.ConsoleLogger;\n import hu.bme.mit.theta.common.logging.Logger;\n+import hu.bme.mit.theta.common.logging.NullLogger;\n import hu.bme.mit.theta.common.table.BasicTableWriter;\n import hu.bme.mit.theta.common.table.TableWriter;\n import hu.bme.mit.theta.common.visualization.Graph;\n import hu.bme.mit.theta.common.visualization.writer.GraphvizWriter;\n+import hu.bme.mit.theta.solver.Solver;\n+import hu.bme.mit.theta.solver.z3.Z3SolverFactory;\n import hu.bme.mit.theta.xta.XtaSystem;\n-import hu.bme.mit.theta.xta.analysis.lazy.ClockStrategy;\n-import hu.bme.mit.theta.xta.analysis.lazy.DataStrategy;\n-import hu.bme.mit.theta.xta.analysis.lazy.LazyXtaCheckerFactory;\n-import hu.bme.mit.theta.xta.analysis.lazy.LazyXtaStatistics;\n+import hu.bme.mit.theta.xta.analysis.XtaAction;\n+import hu.bme.mit.theta.xta.analysis.XtaState;\n+import hu.bme.mit.theta.xta.analysis.lazy.*;\n import hu.bme.mit.theta.xta.dsl.XtaDslManager;\n+import hu.bme.mit.theta.xta.testgen.XtaTest;\n+import hu.bme.mit.theta.xta.testgen.XtaTestGenerator;\n+import hu.bme.mit.theta.xta.testgen.XtaTestPrinter;\n+import hu.bme.mit.theta.xta.testgen.XtaTestVisualizer;\n \n public final class XtaCli {\n \tprivate static final String JAR_NAME = \"theta-xta.jar\";\n@@ -72,6 +81,17 @@\n \t@Parameter(names = \"--version\", description = \"Display version\", help = true)\n \tboolean versionInfo = false;\n \n+\t@Parameter(names = {\"--testgen\", \"-t\"}, description = \"Generate tests to all locations\")\n+\tboolean testGeneration = false;\n+\n+\t@Parameter(names = {\"--testvis\", \"-tv\"}, description = \"Visualize generated tests\")\n+\tboolean testVisualization = false;\n+\n+\t@Parameter(names = \"--loglevel\", description = \"Detailedness of logging\")\n+\tLogger.Level logLevel = Logger.Level.SUBSTEP;\n+\n+\tprivate Logger logger;\n+\n \tpublic XtaCli(final String[] args) {\n \t\tthis.args = args;\n \t\tthis.writer = new BasicTableWriter(System.out, \",\", \"\\\"\", \"\\\"\");\n@@ -85,6 +105,7 @@ public static void main(final String[] args) {\n \tprivate void run() {\n \t\ttry {\n \t\t\tJCommander.newBuilder().addObject(this).programName(JAR_NAME).build().parse(args);\n+\t\t\tlogger = benchmarkMode ? NullLogger.getInstance() : new ConsoleLogger(logLevel);\n \t\t} catch (final ParameterException ex) {\n \t\t\tSystem.out.println(\"Invalid parameters, details:\");\n \t\t\tSystem.out.println(ex.getMessage());\n@@ -93,7 +114,11 @@ private void run() {\n \t\t}\n \n \t\tif (headerOnly) {\n-\t\t\tLazyXtaStatistics.writeHeader(writer);\n+\t\t\tif (testGeneration) {\n+\t\t\t\tLazyXtaTestgenStatistics.writeHeader(writer);\n+\t\t\t} else {\n+\t\t\t\tLazyXtaStatistics.writeHeader(writer);\n+\t\t\t}\n \t\t\treturn;\n \t\t}\n \n@@ -104,10 +129,29 @@ private void run() {\n \n \t\ttry {\n \t\t\tfinal XtaSystem system = loadModel();\n-\t\t\tfinal SafetyChecker<?, ?, UnitPrec> checker = LazyXtaCheckerFactory.create(system, dataStrategy,\n-\t\t\t\t\tclockStrategy, searchStrategy);\n-\t\t\tfinal SafetyResult<?, ?> result = check(checker);\n-\t\t\tprintResult(result);\n+\t\t\tfinal SafetyChecker<? extends XtaState<?>, ? extends XtaAction, UnitPrec> checker =\n+\t\t\t\t\tLazyXtaCheckerFactory.create(system, dataStrategy, clockStrategy, searchStrategy);\n+\t\t\tfinal SafetyResult<? extends XtaState<?>, ? extends XtaAction> result = check(checker);\n+\t\t\tif (testGeneration) {\n+\t\t\t\tARG<? extends XtaState<?>, ? extends XtaAction> arg = result.getArg();\n+\t\t\t\tLazyXtaStatistics stats = (LazyXtaStatistics) result.getStats().get();\n+\t\t\t\tSolver solver = Z3SolverFactory.getInstance().createSolver();\n+\t\t\t\tXtaTestGenerator<? extends XtaState<?>, ? extends XtaAction> testGenerator =\n+\t\t\t\t\t\tnew XtaTestGenerator<>(arg, system, solver, logger, stats);\n+\t\t\t\tSet<? extends XtaTest<?, ?>> tests = testGenerator.generateTests();\n+\t\t\t\tif (testVisualization) {\n+\t\t\t\t\tvisualizeTests(tests);\n+\t\t\t\t}\n+\t\t\t\tLazyXtaTestgenStatistics testgenStats = testGenerator.getStats();\n+\t\t\t\tif (benchmarkMode) {\n+\t\t\t\t\ttestgenStats.writeData(writer);\n+\t\t\t\t} else {\n+\t\t\t\t\tprintTests(tests);\n+\t\t\t\t\tSystem.out.println(testgenStats.toString());\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tprintResult(result);\n+\t\t\t}\n \t\t\tif (dotfile != null) {\n \t\t\t\twriteVisualStatus(result, dotfile);\n \t\t\t}\n@@ -117,7 +161,8 @@ private void run() {\n \t\t}\n \t}\n \n-\tprivate SafetyResult<?, ?> check(SafetyChecker<?, ?, UnitPrec> checker) throws Exception {\n+\tprivate SafetyResult<? extends XtaState<?>, ? extends XtaAction>\n+\t\t\tcheck(SafetyChecker<? extends XtaState<?>, ? extends XtaAction, UnitPrec> checker) throws Exception {\n \t\ttry {\n \t\t\treturn checker.check(UnitPrec.getInstance());\n \t\t} catch (final Exception ex) {\n@@ -170,4 +215,12 @@ private void writeVisualStatus(final SafetyResult<?, ?> status, final String fil\n \t\tGraphvizWriter.getInstance().writeFile(graph, filename);\n \t}\n \n-}\n+\tprivate void printTests(Set<? extends XtaTest<?, ?>> tests) {\n+\t\tXtaTestPrinter.printTests(tests, logger);\n+\t}\n+\n+\tprivate void visualizeTests(Set<? extends XtaTest<?, ?>> tests) {\n+\t\tXtaTestVisualizer.visualizeTests(tests);\n+\t}\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "43bb903c44fafc82e3c99762510e9402f88f195a",
    "filename": "subprojects/xta/xta-testgen/build.gradle.kts",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/build.gradle.kts",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-testgen/build.gradle.kts?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -0,0 +1,9 @@\n+plugins {\n+    id(\"java-common\")\n+}\n+\n+dependencies {\n+    compile(project(\":theta-xta\"))\n+    compile(project(\":theta-xta-analysis\"))\n+    compile(project(\":theta-solver-z3\"))\n+}"
  },
  {
    "sha": "3243ea955916ea0fdd1df4ef73c4decb4d0a6105",
    "filename": "subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTest.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTest.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTest.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTest.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -0,0 +1,52 @@\n+package hu.bme.mit.theta.xta.testgen;\n+\n+import hu.bme.mit.theta.analysis.State;\n+import hu.bme.mit.theta.analysis.algorithm.ArgNode;\n+import hu.bme.mit.theta.analysis.algorithm.ArgTrace;\n+import hu.bme.mit.theta.xta.XtaProcess;\n+import hu.bme.mit.theta.xta.analysis.XtaAction;\n+import hu.bme.mit.theta.xta.analysis.XtaState;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class XtaTest<S extends XtaState<? extends State>, A extends XtaAction> {\n+\tprivate final String name;\n+\tprivate List<Double> delays;\n+\tprivate final ArgTrace<S, A> trace;\n+\n+\tpublic XtaTest(String name, List<Double> delays, ArgTrace<S, A> trace) {\n+\t\tthis.name = name;\n+\t\tthis.delays = delays;\n+\t\tthis.trace = trace;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic List<Double> getDelays() {\n+\t\treturn delays;\n+\t}\n+\n+\tpublic void setDelays(List<Double> delays) { this.delays = delays; }\n+\n+\tpublic ArgTrace<S, A> getTrace() {\n+\t\treturn trace;\n+\t}\n+\n+\tpublic int getLength() { return trace.nodes().size(); }\n+\n+\tpublic double getTotalTime() {\n+\t\treturn delays.stream().mapToDouble(Double::doubleValue).sum();\n+\t}\n+\n+\tpublic Set<XtaProcess.Loc> getLocs() {\n+\t\tSet<XtaProcess.Loc> locs = new HashSet<>();\n+\t\tfor (ArgNode<S, A> node : trace.nodes()) {\n+\t\t\tlocs.addAll(node.getState().getLocs());\n+\t\t}\n+\t\treturn locs;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "54ae33cda375e00f7f46925cc0a6f67d9fb1c2e5",
    "filename": "subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestGenerator.java",
    "status": "added",
    "additions": 243,
    "deletions": 0,
    "changes": 243,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestGenerator.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestGenerator.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestGenerator.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -0,0 +1,243 @@\n+package hu.bme.mit.theta.xta.testgen;\n+\n+import hu.bme.mit.theta.analysis.algorithm.ARG;\n+import hu.bme.mit.theta.analysis.algorithm.ArgNode;\n+import hu.bme.mit.theta.analysis.algorithm.ArgTrace;\n+import hu.bme.mit.theta.common.logging.Logger;\n+import hu.bme.mit.theta.core.decl.ConstDecl;\n+import hu.bme.mit.theta.core.decl.Decls;\n+import hu.bme.mit.theta.core.decl.IndexedConstDecl;\n+import hu.bme.mit.theta.core.model.Valuation;\n+import hu.bme.mit.theta.core.type.Expr;\n+import hu.bme.mit.theta.core.type.abstracttype.AddExpr;\n+import hu.bme.mit.theta.core.type.abstracttype.EqExpr;\n+import hu.bme.mit.theta.core.type.abstracttype.LeqExpr;\n+import hu.bme.mit.theta.core.type.anytype.RefExpr;\n+import hu.bme.mit.theta.core.type.booltype.AndExpr;\n+import hu.bme.mit.theta.core.type.booltype.BoolType;\n+import hu.bme.mit.theta.core.type.rattype.RatLitExpr;\n+import hu.bme.mit.theta.core.type.rattype.RatType;\n+import hu.bme.mit.theta.core.utils.PathUtils;\n+import hu.bme.mit.theta.core.utils.VarIndexing;\n+import hu.bme.mit.theta.solver.Solver;\n+import hu.bme.mit.theta.solver.utils.WithPushPop;\n+import hu.bme.mit.theta.xta.XtaProcess;\n+import hu.bme.mit.theta.xta.XtaSystem;\n+import hu.bme.mit.theta.xta.analysis.XtaAction;\n+import hu.bme.mit.theta.xta.analysis.XtaState;\n+import hu.bme.mit.theta.xta.analysis.lazy.LazyXtaStatistics;\n+import hu.bme.mit.theta.xta.analysis.lazy.LazyXtaTestgenStatistics;\n+\n+import java.math.BigInteger;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public final class XtaTestGenerator<S extends XtaState<?>, A extends XtaAction> {\n+\tprivate final ARG<S, A> arg;\n+\tprivate final XtaSystem system;\n+\tprivate final Solver solver;\n+\tprivate final Logger logger;\n+\tprivate final LazyXtaTestgenStatistics stats;\n+\n+\tprivate ConstDecl<RatType> totalTime = null;\n+\n+\tpublic XtaTestGenerator(ARG<S, A> arg, XtaSystem system, Solver solver, Logger logger, LazyXtaStatistics stats) {\n+\t\tthis.arg = arg;\n+\t\tthis.system = system;\n+\t\tthis.solver = solver;\n+\t\tthis.logger = logger;\n+\t\tthis.stats = new LazyXtaTestgenStatistics(stats);\n+\t}\n+\n+\tpublic LazyXtaTestgenStatistics getStats() {\n+\t\treturn stats;\n+\t}\n+\n+\tpublic Set<? extends XtaTest<S, A>> generateTests() {\n+\t\tstats.startTestgen();\n+\n+\t\tMap<XtaProcess.Loc, XtaTest<S, A>> locTests = new HashMap<>();\n+\t\tint testCnt = 1;\n+\n+\t\tint locCount = system.getProcesses().stream()\n+\t\t\t\t.map(p -> p.getLocs().size())\n+\t\t\t\t.mapToInt(Integer::intValue)\n+\t\t\t\t.sum();\n+\n+\t\tSet<ArgNode<S, A>> nodesToProcess = arg.getInitNodes().collect(Collectors.toSet());\n+\t\tSet<ArgNode<S, A>> nextNodes = new HashSet<>();\n+\n+\t\twhile (locTests.size() < locCount && !nodesToProcess.isEmpty()) {\n+\t\t\tfor (ArgNode<S, A> node : nodesToProcess) {\n+\t\t\t\t//SPIN 2018 paper Lemma 2.: we have nothing to do with excluded nodes\n+\t\t\t\tif (node.isExcluded())\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tXtaTest<S, A> test = generateTest(node, testCnt++, locTests.keySet());\n+\t\t\t\tint newLocs = (int) test.getLocs().stream()\n+\t\t\t\t\t\t.filter(l -> !locTests.containsKey(l))\n+\t\t\t\t\t\t.count();\n+\t\t\t\tif (newLocs > 0) {\n+\t\t\t\t\tfor (XtaProcess.Loc loc : test.getLocs()) {\n+\t\t\t\t\t\tlocTests.put(loc, test);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (locTests.size() == locCount)\n+\t\t\t\t\tbreak;\n+\n+\t\t\t\tnextNodes.addAll(node.children().collect(Collectors.toList()));\n+\t\t\t}\n+\t\t\tnodesToProcess.clear();\n+\t\t\tnodesToProcess.addAll(nextNodes);\n+\t\t\tnextNodes.clear();\n+\t\t}\n+\n+\t\tvar testSet = new HashSet<>(locTests.values());\n+\t\tfor (var test : testSet) {\n+\t\t\tconcretizeTest(test);\n+\t\t}\n+\n+\t\tstats.stopTestgen();\n+\t\tstats.setTestCases(testSet.size());\n+\t\ttestSet.forEach(t -> stats.addTestCaseLength(t.getLength()));\n+\n+\t\treturn testSet;\n+\t}\n+\n+\tprivate void concretizeTest(XtaTest<S, A> test) {\n+\t\tArgTrace<S, A> trace = test.getTrace();\n+\t\tList<Double> delays = calculateDelays(trace);\n+\t\ttest.setDelays(delays);\n+\t}\n+\n+\tprivate XtaTest<S, A> generateTest(ArgNode<S, A> node, int testCnt, Set<XtaProcess.Loc> doneLocs) {\n+\t\tstats.testCaseGenerated();\n+\n+\t\tArgTrace<S, A> trace = ArgTrace.to(node);\n+\t\tList<XtaProcess.Loc> locs = trace.nodes().stream()\n+\t\t\t\t.flatMap(n -> n.getState().getLocs().stream())\n+\t\t\t\t.filter (l -> !doneLocs.contains(l))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tString locNames = locs.stream().map(XtaProcess.Loc::getName).collect(Collectors.joining(\"_\"));\n+\t\treturn new XtaTest<>(String.format(\"TRACE__%d__%s\", testCnt, locNames), null, trace);\n+\t}\n+\n+\tprivate List<Double> calculateDelays(ArgTrace<S, A> trace) {\n+\t\tDouble[] delays = new Double[trace.nodes().size()];\n+\t\ttry (WithPushPop wpp = new WithPushPop(solver)) {\n+\t\t\tint nodeCount = trace.nodes().size();\n+\t\t\tList<VarIndexing> indexing = new ArrayList<>(nodeCount);\n+\t\t\tindexing.add(VarIndexing.all(0));\n+\n+\t\t\taddInitialClockConstraints(indexing);\n+\t\t\taddInitialNodeConstraint(trace, indexing);\n+\n+\t\t\tassert solver.check().isSat() : \"Initial state of the trace is not feasible.\";\n+\n+\t\t\taddTraceConstraints(trace, indexing);\n+\t\t\taddSumOfDelaysConstraint(trace);\n+\n+\t\t\tboolean sat = solver.check().isSat();\n+\t\t\tif (sat) {\n+\t\t\t\tValuation bestValuation = reduceDelays();\n+\t\t\t\textractDelays(bestValuation, delays);\n+\t\t\t}\n+\t\t}\n+\t\treturn List.of(delays);\n+\t}\n+\n+\tprivate void addInitialClockConstraints(List<VarIndexing> indexing) {\n+\t\t//initial clock constraints: every clock:0 should equal delay:0\n+\t\tList<Expr<BoolType>> clockTerms = new ArrayList<>();\n+\t\tRefExpr<RatType> delayRef = RefExpr.of(XtaAction.DELAY);\n+\t\tfor (var cv : system.getClockVars()) {\n+\t\t\tRefExpr<RatType> clockVarRef = RefExpr.of(cv);\n+\t\t\tclockTerms.add(EqExpr.create2(clockVarRef, delayRef));\n+\t\t}\n+\t\tExpr<BoolType> initialClockConstraint = PathUtils.unfold(AndExpr.of(clockTerms), indexing.get(0));\n+\t\tsolver.add(initialClockConstraint);\n+\t}\n+\n+\tprivate void addInitialNodeConstraint(ArgTrace<S,A> trace, List<VarIndexing> indexing) {\n+\t\tExpr<BoolType> initialConstraint = PathUtils.unfold(trace.nodes().get(0).getState().toExpr(), indexing.get(0));\n+\t\tsolver.add(initialConstraint);\n+\t}\n+\n+\tprivate void addTraceConstraints(ArgTrace<S, A> trace, List<VarIndexing> indexing) {\n+\t\tfor (int i = 1; i < trace.nodes().size(); i++) {\n+\t\t\tXtaState<?> st = trace.nodes().get(i).getState();\n+\t\t\tXtaAction a = trace.edges().get(i - 1).getAction();\n+\n+\t\t\tindexing.add(indexing.get(i - 1).add(a.nextIndexing()));\n+\n+\t\t\tExpr<BoolType> actionConstraint = PathUtils.unfold(a.toExpr(), indexing.get(i - 1));\n+\t\t\tsolver.add(actionConstraint);\n+\n+\t\t\tExpr<BoolType> stateConstraint = PathUtils.unfold(st.toExpr(), indexing.get(i));\n+\t\t\tsolver.add(stateConstraint);\n+\t\t}\n+\t}\n+\n+\tprivate void addSumOfDelaysConstraint(ArgTrace<S,A> trace) {\n+\t\ttotalTime = Decls.Const(\"__total__time__\", RatType.getInstance());\n+\t\tRefExpr<RatType> totalTimeRef = RefExpr.of(totalTime);\n+\t\tRefExpr<RatType> delayRef = RefExpr.of(XtaAction.DELAY);\n+\t\tList<Expr<RatType>> delayRefs = new ArrayList<>();\n+\t\tfor (int i = 0; i < trace.nodes().size(); i++) {\n+\t\t\tdelayRefs.add(PathUtils.unfold(delayRef, i));\n+\t\t}\n+\t\tEqExpr<?> totalTimeEq = EqExpr.create2(AddExpr.create2(delayRefs), totalTimeRef);\n+\t\tsolver.add(totalTimeEq);\n+\t}\n+\n+\tprivate Valuation reduceDelays() {\n+\t\tRatLitExpr min = RatLitExpr.of(BigInteger.ZERO, BigInteger.ONE);\n+\t\tRatLitExpr max = getSolverTotalTime();\n+\t\tRatLitExpr newMax = min.add(max.sub(min).div(RatLitExpr.of(BigInteger.TWO, BigInteger.ONE)));\n+\n+\t\tValuation bestVal = solver.getModel();\n+\t\tlogger.write(Logger.Level.INFO, \"Current best solution: %f%n\", getDoubleValue(max));\n+\n+\t\twhile (max.sub(newMax).geq(RatLitExpr.of(BigInteger.ONE, BigInteger.TWO)).getValue()) {\n+\t\t\tlogger.write(Logger.Level.INFO, \"Looking for solution between %f and %f%n\", getDoubleValue(min), getDoubleValue(newMax));\n+\t\t\tsolver.push();\n+\t\t\tExpr<BoolType> newAssertion = LeqExpr.create2(RefExpr.of(totalTime), newMax);\n+\t\t\tsolver.add(newAssertion);\n+\n+\t\t\tif (solver.check().isSat()) {\n+\t\t\t\tmax = getSolverTotalTime();\n+\t\t\t\tbestVal = solver.getModel();\n+\t\t\t\tlogger.write(Logger.Level.INFO, \"Found better solution: %f%n\", getDoubleValue(max));\n+\t\t\t} else {\n+\t\t\t\tlogger.write(Logger.Level.INFO, \"Did not find better solution.\");\n+\t\t\t\tmin = newMax;\n+\t\t\t}\n+\t\t\tnewMax = min.add(max.sub(min).div(RatLitExpr.of(BigInteger.TWO, BigInteger.ONE)));\n+\t\t\tsolver.pop();\n+\t\t}\n+\t\treturn bestVal;\n+\t}\n+\n+\tprivate RatLitExpr getSolverTotalTime() {\n+\t\treturn (RatLitExpr) solver.getModel().toMap().get(totalTime);\n+\t}\n+\n+\tprivate void extractDelays(Valuation valuation, Double[] delays) {\n+\t\tvar valMap = valuation.toMap();\n+\n+\t\tfor (var entry : valMap.entrySet()) {\n+\t\t\tif (entry.getKey() instanceof IndexedConstDecl) {\n+\t\t\t\tIndexedConstDecl<?> icd = (IndexedConstDecl<?>) entry.getKey();\n+\t\t\t\tif (icd.getVarDecl().equals(XtaAction.DELAY)) {\n+\t\t\t\t\tRatLitExpr val = (RatLitExpr) entry.getValue();\n+\t\t\t\t\tdelays[icd.getIndex()] = getDoubleValue(val);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate double getDoubleValue(RatLitExpr rat) {\n+\t\treturn rat.getNum().doubleValue() / rat.getDenom().doubleValue();\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5ade27738ec1572421c317ef523dc95c6c7a8b6a",
    "filename": "subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestPrinter.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestPrinter.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestPrinter.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestPrinter.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -0,0 +1,30 @@\n+package hu.bme.mit.theta.xta.testgen;\n+\n+import hu.bme.mit.theta.analysis.algorithm.ArgTrace;\n+import hu.bme.mit.theta.common.logging.Logger;\n+\n+import java.util.Set;\n+\n+public class XtaTestPrinter {\n+\tpublic static void printTests(Set<? extends XtaTest<?, ?>> tests, Logger logger) {\n+\t\tfor (XtaTest<?, ?> test : tests)\n+\t\t\tprintTest(test, logger);\n+\t}\n+\n+\tpublic static void printTest(XtaTest<?, ?> test, Logger logger) {\n+\t\tlogger.write(Logger.Level.RESULT, \"%n========== %s ==========%n\", test.getName());\n+\t\tArgTrace<?,?> trace = test.getTrace();\n+\n+\t\tprintState(test, 0, logger);\n+\t\tfor (int i = 0; i < trace.edges().size(); i++) {\n+\t\t\tlogger.write(Logger.Level.RESULT, trace.edges().get(i).getAction().toString() + \"\\n\");\n+\t\t\tprintState(test, i+1, logger);\n+\t\t}\n+\t\tlogger.write(Logger.Level.RESULT, \"Total time: %f%n\", test.getTotalTime());\n+\t}\n+\n+\tprivate static void printState(XtaTest<?, ?> test, int idx, Logger logger) {\n+\t\tlogger.write(Logger.Level.RESULT, test.getTrace().nodes().get(idx).getState().toString() + \"\\n\");\n+\t\tlogger.write(Logger.Level.RESULT, \"Delay: %f%n\", test.getDelays().get(idx));\n+\t}\n+}"
  },
  {
    "sha": "fda2ca14d9d0b42ad76ce39e7f86128c204cf943",
    "filename": "subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestVisualizer.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/ftsrg/theta/blob/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestVisualizer.java",
    "raw_url": "https://github.com/ftsrg/theta/raw/a5607f3bcaf250a7a169f00cfd29a25be42b41f4/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestVisualizer.java",
    "contents_url": "https://api.github.com/repos/ftsrg/theta/contents/subprojects/xta/xta-testgen/src/main/java/hu/bme/mit/theta/xta/testgen/XtaTestVisualizer.java?ref=a5607f3bcaf250a7a169f00cfd29a25be42b41f4",
    "patch": "@@ -0,0 +1,80 @@\n+package hu.bme.mit.theta.xta.testgen;\n+\n+import hu.bme.mit.theta.analysis.algorithm.ArgNode;\n+import hu.bme.mit.theta.analysis.algorithm.ArgTrace;\n+import hu.bme.mit.theta.common.visualization.EdgeAttributes;\n+import hu.bme.mit.theta.common.visualization.Graph;\n+import hu.bme.mit.theta.common.visualization.LineStyle;\n+import hu.bme.mit.theta.common.visualization.NodeAttributes;\n+import hu.bme.mit.theta.common.visualization.Shape;\n+import hu.bme.mit.theta.common.visualization.writer.GraphvizWriter;\n+import hu.bme.mit.theta.xta.XtaProcess;\n+import hu.bme.mit.theta.xta.analysis.XtaState;\n+\n+import java.awt.*;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class XtaTestVisualizer {\n+\tpublic static void visualizeTests(Set<? extends XtaTest<?, ?>> tests) {\n+\t\tfor (XtaTest<?, ?> test : tests)\n+\t\t\tvisualizeTest(test);\n+\t}\n+\n+\tpublic static void visualizeTest(XtaTest<?, ?> test) {\n+\t\tGraph traceGraph = new Graph(test.getName(), String.format(\"%s%nTotal time: %f\", test.getName(), test.getTotalTime()));\n+\n+\t\tMap<Integer, XtaProcess.Loc> indexLocMap = new HashMap<>();\n+\t\tMap<Integer, String> indexIdMap = new HashMap<>();\n+\n+\t\tArgTrace<? extends XtaState<?>, ?> trace = test.getTrace();\n+\t\tfor (int i = 0; i < trace.nodes().size(); i++) {\n+\t\t\tArgNode<? extends XtaState<?>, ?> n = trace.nodes().get(i);\n+\t\t\tXtaState<?> st = n.getState();\n+\n+\t\t\tList<XtaProcess.Loc> locs = st.getLocs();\n+\n+\t\t\tfor (int j = 0; j < locs.size(); j++) {\n+\t\t\t\tXtaProcess.Loc l = locs.get(j);\n+\t\t\t\tString id = String.format(\"%s__%d\", l.getName(), i);\n+\t\t\t\tString label = String.format(\"%s%ndelay: %f\", id, test.getDelays().get(i));\n+\n+\t\t\t\tNodeAttributes nAttributes = NodeAttributes.builder().label(label).fillColor(Color.WHITE)\n+\t\t\t\t\t\t.lineColor(Color.BLACK).lineStyle(LineStyle.NORMAL).peripheries(1).build();\n+\n+\t\t\t\tNodeAttributes invisibleAttributes = NodeAttributes.builder().label(id).fillColor(Color.WHITE)\n+\t\t\t\t\t\t.lineColor(Color.BLACK).lineStyle(LineStyle.NORMAL).peripheries(1).invisible(true).build();\n+\n+\t\t\t\tEdgeAttributes eAttributes = EdgeAttributes.builder()\n+\t\t\t\t\t\t.color(Color.BLACK).lineStyle(LineStyle.NORMAL).build();\n+\n+\t\t\t\tif (i == 0) {\n+\t\t\t\t\tNodeAttributes startAttributes = NodeAttributes.builder().fillColor(Color.BLACK)\n+\t\t\t\t\t\t\t.lineColor(Color.BLACK).lineStyle(LineStyle.NORMAL).peripheries(1).shape(Shape.RECTANGLE).build();\n+\t\t\t\t\tString startId = \"start__\" + id;\n+\t\t\t\t\ttraceGraph.addNode(startId, startAttributes);\n+\t\t\t\t\ttraceGraph.addNode(id, nAttributes);\n+\t\t\t\t\ttraceGraph.addEdge(startId, id, eAttributes);\n+\t\t\t\t} else {\n+\t\t\t\t\tString prevId = indexIdMap.get(j);\n+\t\t\t\t\tif (!indexLocMap.containsValue(l)) {\n+\t\t\t\t\t\ttraceGraph.addNode(id, nAttributes);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttraceGraph.addNode(id, invisibleAttributes);\n+\t\t\t\t\t}\n+\t\t\t\t\ttraceGraph.addEdge(prevId, id, eAttributes);\n+\t\t\t\t}\n+\t\t\t\tindexLocMap.put(j, l);\n+\t\t\t\tindexIdMap.put(j, id);\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tGraphvizWriter.getInstance().writeFile(traceGraph, traceGraph.getId() + \".png\", GraphvizWriter.Format.PNG);\n+\t\t} catch (Exception  e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+}"
  }
]
