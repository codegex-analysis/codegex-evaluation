[
  {
    "sha": "646c3cde1c4edcaf65d078cebe322b111d05624f",
    "filename": "modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionData.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionData.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionData.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionData.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,16 @@\n+package org.telestion.core.connection;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.telestion.api.message.JsonMessage;\n+\n+/**\n+ *\n+ */\n+public record ConnectionData(@JsonProperty ConnectionDetails details,\n+\t\t\t\t\t\t\t @JsonProperty byte[] data) implements JsonMessage {\n+\n+\t@SuppressWarnings(\"unused\")\n+\tprivate ConnectionData() {\n+\t\tthis(null, null);\n+\t}\n+}"
  },
  {
    "sha": "0d12367809c5650268cca6698076b5b250f77ec8",
    "filename": "modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionDetails.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionDetails.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionDetails.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionDetails.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,7 @@\n+package org.telestion.core.connection;\n+\n+import org.telestion.api.message.JsonMessage;\n+\n+public interface ConnectionDetails extends JsonMessage {\n+\n+}"
  },
  {
    "sha": "0d9a1f91f3238194cf44208f1197ab9cca78dd72",
    "filename": "modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionType.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionType.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionType.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-core/src/main/java/org/telestion/core/connection/ConnectionType.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,12 @@\n+package org.telestion.core.connection;\n+\n+public enum ConnectionType {\n+\tTCP(TcpConn.Participant.class),\n+\tUART(null);\n+\n+\tpublic final Class<? extends ConnectionDetails> senderClass;\n+\n+\tConnectionType(Class<? extends ConnectionDetails> senderClass) {\n+\t\tthis.senderClass = senderClass;\n+\t}\n+}"
  },
  {
    "sha": "f79c7ae5cdc90b9729222d4e63121d3b7bc4aebc",
    "filename": "modules/telestion-core/src/main/java/org/telestion/core/connection/TcpConn.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/TcpConn.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-core/src/main/java/org/telestion/core/connection/TcpConn.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-core/src/main/java/org/telestion/core/connection/TcpConn.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -161,7 +161,7 @@ private void out(Object data) {\n \t * A chunk of data which is transmitted with the {@link TcpConn}.\n \t *\n \t * @param participant the participant of the tcp connection which has send this chunk of data or should receive it\n-\t * @param datathe     actual data\n+\t * @param data the     actual data\n \t */\n \t@SuppressWarnings(\"preview\")\n \tpublic static record Data(@JsonProperty Participant participant, @JsonProperty byte[] data) implements JsonMessage {\n@@ -179,7 +179,7 @@ private Data() {\n \t * @param port its port\n \t */\n \t@SuppressWarnings(\"preview\")\n-\tpublic static record Participant(@JsonProperty String host, @JsonProperty int port) implements JsonMessage {\n+\tpublic static record Participant(@JsonProperty String host, @JsonProperty int port) implements ConnectionDetails {\n \n \t\t@SuppressWarnings(\"unused\")\n \t\tprivate Participant() {"
  },
  {
    "sha": "faa29154d7ac264bdfc35cf060fea23f74b05eb4",
    "filename": "modules/telestion-mavlink/mavlink",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": null,
    "raw_url": null,
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/mavlink?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1 +1 @@\n-Subproject commit 49a5abf70103526074538cecdd733b34b1aacc59\n+Subproject commit faa29154d7ac264bdfc35cf060fea23f74b05eb4"
  },
  {
    "sha": "00771cd5dc1c6bdb426efd3153cb9b66c218acdd",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/DefaultParsers.java",
    "status": "added",
    "additions": 115,
    "deletions": 0,
    "changes": 115,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/DefaultParsers.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/DefaultParsers.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/DefaultParsers.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,115 @@\n+package org.telestion.protocol.mavlink;\n+\n+import org.telestion.protocol.mavlink.annotation.NativeType;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.function.BiFunction;\n+\n+public class DefaultParsers {\n+\tpublic static final HashMap<NativeType, TypeParser<?>> LITTLE_ENDIAN;\n+\n+\tstatic {\n+\t\tLITTLE_ENDIAN = new HashMap<>();\n+\t\tinitLittleEndian();\n+\t}\n+\n+\tprivate static void initLittleEndian() {\n+\t\tLITTLE_ENDIAN.put(NativeType.INT_8, (payload, arraySize, offset) ->  {\n+\t\t\tif (arraySize == 0) {\n+\t\t\t\treturn payload[offset];\n+\t\t\t} else {\n+\t\t\t\treturn Arrays.copyOfRange(payload, offset, offset + arraySize);\n+\t\t\t}\n+\t\t});\n+\n+\t\tTypeParser<Object> fu = (payload, arraySize, offset) -> {\n+\t\t\tvar data = new short[arraySize > 0 ? arraySize : 1];\n+\t\t\tfor (int i = 0; i < data.length; i++) {\n+\t\t\t\tdata[i] = (short) ((payload[2 * i + 1 + offset] << 8) + payload[2 * i + offset]);\n+\t\t\t}\n+\t\t\tif (arraySize == 0) {\n+\t\t\t\treturn data[0];\n+\t\t\t} else {\n+\t\t\t\treturn data;\n+\t\t\t}\n+\t\t};\n+\n+\t\tLITTLE_ENDIAN.put(NativeType.UINT_8, fu);\n+\t\tLITTLE_ENDIAN.put(NativeType.INT_16, fu);\n+\n+\t\tfu = (payload, arraySize, offset) -> {\n+\t\t\tvar data = new int[arraySize > 0 ? arraySize : 1];\n+\t\t\tfor (int i = 0; i < data.length; i++) {\n+\t\t\t\tdata[i] = (payload[4*i + 3 + offset] << 24) + (payload[4*i + 2 + offset] << 16)\n+\t\t\t\t\t\t+ (payload[4*i + 1 + offset] << 8) + payload[4*i + offset];\n+\t\t\t}\n+\t\t\tif (arraySize == 0) {\n+\t\t\t\treturn data[0];\n+\t\t\t} else {\n+\t\t\t\treturn data;\n+\t\t\t}\n+\t\t};\n+\n+\t\tLITTLE_ENDIAN.put(NativeType.UINT_16, fu);\n+\t\tLITTLE_ENDIAN.put(NativeType.INT_32, fu);\n+\n+\t\tBiFunction<byte[], Integer, Long> foo = (payload, offset) -> ((long) payload[offset + 7] << 56)\n+\t\t\t\t+ ((long) payload[offset + 6] << 48) + ((long) payload[offset + 5] << 40)\n+\t\t\t\t+ ((long) payload[offset + 4] << 32) + (payload[offset + 3] << 24) + (payload[offset + 2] << 16)\n+\t\t\t\t+ (payload[offset + 1] << 8) + payload[offset];\n+\n+\t\tfu = (payload, arraySize, offset) -> {\n+\t\t\tvar data = new long[arraySize > 0 ? arraySize : 1];\n+\t\t\tfor (int i = 0; i < data.length; i++) {\n+\t\t\t\tdata[i] = foo.apply(payload, 8*i + offset);\n+\t\t\t}\n+\t\t\tif (arraySize == 0) {\n+\t\t\t\treturn data[0];\n+\t\t\t} else {\n+\t\t\t\treturn data;\n+\t\t\t}\n+\t\t};\n+\t\tLITTLE_ENDIAN.put(NativeType.UINT_32, fu);\n+\t\tLITTLE_ENDIAN.put(NativeType.INT_64, fu);\n+\t\tLITTLE_ENDIAN.put(NativeType.UINT_64, fu);\n+\n+\t\tLITTLE_ENDIAN.put(NativeType.FLOAT, (payload, arraySize, offset) -> {\n+\t\t\tvar data = new float[arraySize > 0 ? arraySize : 1];\n+\t\t\tfor (int i = 0; i < data.length; i++) {\n+\t\t\t\tdata[i] = Float.intBitsToFloat((payload[4*i + 3 + offset] << 24) + (payload[4*i + 2 + offset] << 16)\n+\t\t\t\t\t\t+ (payload[4*i + 1 + offset] << 8) + payload[4*i + offset]);\n+\t\t\t}\n+\t\t\tif (arraySize == 0) {\n+\t\t\t\treturn data[0];\n+\t\t\t} else {\n+\t\t\t\treturn data;\n+\t\t\t}\n+\t\t});\n+\n+\t\tLITTLE_ENDIAN.put(NativeType.DOUBLE, (payload, arraySize, offset) -> {\n+\t\t\tvar data = new double[arraySize > 0 ? arraySize : 1];\n+\t\t\tfor (int i = 0; i < data.length; i++) {\n+\t\t\t\tdata[i] = Double.longBitsToDouble(foo.apply(payload, 8*i + offset));\n+\t\t\t}\n+\t\t\tif (arraySize == 0) {\n+\t\t\t\treturn data[0];\n+\t\t\t} else {\n+\t\t\t\treturn data;\n+\t\t\t}\n+\t\t});\n+\n+\t\tLITTLE_ENDIAN.put(NativeType.CHAR, (payload, arraySize, offset) -> {\n+\t\t\tvar data = new char[arraySize > 0 ? arraySize : 1];\n+\t\t\tfor (int i = 0; i < data.length; i++) {\n+\t\t\t\tdata[i] = (char) payload[i + offset];\n+\t\t\t}\n+\n+\t\t\tif (arraySize == 0) {\n+\t\t\t\treturn data[0];\n+\t\t\t} else {\n+\t\t\t\treturn String.valueOf(data);\n+\t\t\t}\n+\t\t});\n+\t}\n+}"
  },
  {
    "sha": "09f67394f4be31aceadadb4143df1cf857346e00",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MavlinkAdapterFactory.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MavlinkAdapterFactory.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MavlinkAdapterFactory.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MavlinkAdapterFactory.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,54 @@\n+package org.telestion.protocol.mavlink;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+/**\n+ * <p>\n+ *     A simple Factory which can create and register all necessary modules for a functioning MavlinkAdapter.<br>\n+ *     Although there is still the possibility of doing the work manually, it is recommended to use this designated\n+ *     factory.\n+ * </p>\n+ * <p>\n+ *     Part of a correctly working MavlinkAdapter are usually:\n+ *     <ul>\n+ *         <li>{@link Validator}</li>\n+ *     </ul>\n+ * </p>\n+ *\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public final class MavlinkAdapterFactory {\n+\n+\t/**\n+\t * <p>\n+\t *     Configuration with which this factory can create all modules for a functioning MavlinkAdapter.\n+\t * </p>\n+\t */\n+\tpublic final record Configuration() {\n+\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t *     Creates all necessary parts for a functioning MavlinkAdapter and registers them on the bus.\n+\t * </p>\n+\t * <p>\n+\t *     Modules which will be created and registered:\n+\t *     <ul>\n+\t *         <li>{@link Validator}</li>\n+\t *     </ul>\n+\t * </p>\n+\t *\n+\t * @param bus {@link EventBus} on which the modules should be registered\n+\t * @param config which specifies all necessary details for a MavlinkAdapter\n+\t */\n+\tpublic static void registerNew(EventBus bus, Configuration config) {\n+\n+\t}\n+\n+\t/**\n+\t * There shall be no objects of this class!\n+\t */\n+\tprivate MavlinkAdapterFactory() {}\n+}"
  },
  {
    "sha": "018cf3191dd1f7a05b667140e966c8bc5377b565",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MessageIndex.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MessageIndex.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MessageIndex.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MessageIndex.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,69 @@\n+package org.telestion.protocol.mavlink;\n+\n+import org.telestion.protocol.mavlink.message.MavlinkMessage;\n+\n+import java.util.HashMap;\n+\n+/**\n+ * Handling the linking processes of the MAVLink-message IDs to the right implementation.<br>\n+ * Before being able to get the messages by id they must be registered here.<br>\n+ * <br>\n+ * <em>Note that this class should be used in a static context.</em>\n+ *\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public final class MessageIndex {\n+\t/**\n+\t * Actual Map for the linking.\n+\t */\n+\tprivate static HashMap<Long, Class<? extends MavlinkMessage>> map = new HashMap<>();\n+\n+\t/**\n+\t * There shall be no objects.\n+\t */\n+\tprivate MessageIndex() throws InstantiationException {\n+\t\tthrow new InstantiationException(\"There shall be no MessageIndex Object!\");\n+\t}\n+\n+\t/**\n+\t * Registers a new item by linking a new id to a class.<br>\n+\t * Basically {@link HashMap#put(Object, Object)}.<br>\n+\t * <br>\n+\t * <em>Note that if an other {@link MavlinkMessage} has already been linked with the given id an will\n+\t * {@link IllegalArgumentException} be thrown.</em>\n+\t *\n+\t * @param id    of the new {@link MavlinkMessage MavlinkMessage-implementation}\n+\t * @param clazz Class of the {@link MavlinkMessage} which should be linked\n+\t * @throws IllegalArgumentException if the given id is already in use\n+\t */\n+\tpublic static void put(long id, Class<? extends MavlinkMessage> clazz) {\n+\t\tif (get(id) != null) {\n+\t\t\tthrow new IllegalArgumentException(\"Given ID is already in use!\");\n+\t\t}\n+\t\tmap.put(id, clazz);\n+\t}\n+\n+\t/**\n+\t * Returns if an id already has been linked to a {@link MavlinkMessage}.\n+\t *\n+\t * @param id of the msg\n+\t * @return whether an id is already associated with a {@link MavlinkMessage}\n+\t */\n+\tpublic static boolean isRegistered(long id) {\n+\t\treturn map.containsKey(id);\n+\t}\n+\n+\t/**\n+\t * Returns the {@link MavlinkMessage MavlinkMessageClass} linked to the given id.<br>\n+\t * Basically {@link HashMap#get(Object)}.<br>\n+\t * <br>\n+\t * <em>Note that if the given id is not registered <code>null</code> will be returned.</em>\n+\t *\n+\t * @param id of the {@link MavlinkMessage}\n+\t * @return {@link Class} of the {@link MavlinkMessage} linked to the given id\n+\t */\n+\tpublic static Class<? extends MavlinkMessage> get(long id) {\n+\t\treturn map.get(id);\n+\t}\n+}"
  },
  {
    "sha": "7f242087d51be1fa037ef147d14311e19e3c9d66",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/PayloadParser.java",
    "status": "added",
    "additions": 186,
    "deletions": 0,
    "changes": 186,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/PayloadParser.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/PayloadParser.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/PayloadParser.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,186 @@\n+package org.telestion.protocol.mavlink;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Promise;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.telestion.api.message.JsonMessage;\n+import org.telestion.protocol.mavlink.annotation.MavArray;\n+import org.telestion.protocol.mavlink.annotation.MavField;\n+import org.telestion.protocol.mavlink.annotation.NativeType;\n+import org.telestion.protocol.mavlink.exception.AnnotationMissingException;\n+import org.telestion.protocol.mavlink.message.internal.ValidatedMavlinkPacket;\n+\n+import java.lang.reflect.RecordComponent;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public final class PayloadParser extends AbstractVerticle {\n+\n+\t@Override\n+\tpublic void start(Promise<Void> startPromise) {\n+\t\tvertx.eventBus().consumer(config.inAddress(), msg -> {\n+\t\t\tJsonMessage.on(ValidatedMavlinkPacket.class, msg, validatedMavlink -> {\n+\t\t\t\tvar clazz = validatedMavlink.clazz();\n+\t\t\t\tvar payload = validatedMavlink.payload();\n+\t\t\t\tvar components = clazz.getRecordComponents();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tcomponents = Arrays.stream(components).sorted(PayloadParser::compareRecordComponents)\n+\t\t\t\t\t\t\t.toArray(RecordComponent[]::new);\n+\t\t\t\t} catch(AnnotationMissingException e) {\n+\t\t\t\t\tlogger.error(\"Parsing packet failed!\" +\n+\t\t\t\t\t\t\t\"At least one Record-Component of Mavlink-message {} does not have the required \" +\n+\t\t\t\t\t\t\t\"@MavField annotation!\", clazz.getName());\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tvar currentIndex = new AtomicInteger(0);\n+\t\t\t\t\tvar objs = Arrays.stream(components).\n+\t\t\t\t\t\t\tmap(c -> {\n+\t\t\t\t\t\t\t\tvar annotation = c.getAnnotation(MavField.class);\n+\t\t\t\t\t\t\t\t// Extensions are optional and at the end of the parsing process\n+\t\t\t\t\t\t\t\tif (payload.length - 1 - currentIndex.get() == 0 && annotation.extension()) {\n+\t\t\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tvar arrLength = c.isAnnotationPresent(MavArray.class) ?\n+\t\t\t\t\t\t\t\t\t\tc.getAnnotation(MavArray.class).length() : 0;\n+\t\t\t\t\t\t\t\tvar type = c.getAnnotation(MavField.class).nativeType();\n+\n+\t\t\t\t\t\t\t\treturn parser.get(type).parse(payload, arrLength,\n+\t\t\t\t\t\t\t\t\t\tcurrentIndex.getAndAdd(type.size * (arrLength == 0 ? 1 : arrLength)));\n+\t\t\t\t\t\t\t}).filter(Objects::nonNull).toArray();\n+\n+\t\t\t\t\tvar constructor = clazz.getConstructor(Arrays.stream(components)\n+\t\t\t\t\t\t\t.map(RecordComponent::getType).toArray(Class[]::new));\n+\n+\t\t\t\t\tvar instance = constructor.newInstance(objs);\n+\t\t\t\t\tvertx.eventBus().publish(getOutAddress(), instance);\n+\t\t\t\t} catch(Exception e) {\n+\t\t\t\t\tlogger.error(\"Parsing packet payload failed due to an unexpected error!\", e);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t});\n+\t\tstartPromise.complete();\n+\t}\n+\n+\t@Override\n+\tpublic void stop(Promise<Void> stopPromise) {\n+\t\tstopPromise.complete();\n+\t}\n+\n+\t/**\n+\t * @param inAddress\n+\t * @param outAddress\n+\t */\n+\tpublic record Configuration(@JsonProperty String inAddress,\n+\t\t\t\t\t\t\t\t@JsonProperty String outAddress) implements JsonMessage {\n+\t\t/**\n+\t\t * Used for reflection!\n+\t\t */\n+\t\t@SuppressWarnings(\"unused\")\n+\t\tprivate Configuration() {\n+\t\t\tthis(null, null);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t *\n+\t * @param inAddress\n+\t * @param outAddress\n+\t * @param parser\n+\t */\n+\tpublic PayloadParser(String inAddress, String outAddress, HashMap<NativeType, TypeParser<?>> parser) {\n+\t\tthis(new Configuration(inAddress, outAddress), parser);\n+\t}\n+\n+\t/**\n+\t *\n+\t * @param config\n+\t */\n+\tpublic PayloadParser(Configuration config) {\n+\t\tthis(config, DefaultParsers.LITTLE_ENDIAN);\n+\t}\n+\n+\t/**\n+\t *\n+\t * @param config\n+\t * @param parser\n+\t */\n+\tpublic PayloadParser(Configuration config, HashMap<NativeType, TypeParser<?>> parser) {\n+\t\tthis.config = config;\n+\t\tthis.parser = parser;\n+\t}\n+\n+\t/**\n+\t * Getter for {@link Configuration#inAddress inAddress}.\n+\t *\n+\t * @return {@link Configuration#inAddress inAddress}\n+\t */\n+\tpublic String getInAddress() {\n+\t\treturn config.inAddress();\n+\t}\n+\n+\t/**\n+\t * Getter for {@link Configuration#outAddress outAddress}.\n+\t *\n+\t * @return {@link Configuration#outAddress outAddress}\n+\t */\n+\tpublic String getOutAddress() {\n+\t\treturn config.outAddress();\n+\t}\n+\n+\t/**\n+\t * {@link Comparator} for the {@link RecordComponent MAVLink-RecordComponents} to bring them into the right format\n+\t * for MAVLink.\n+\t *\n+\t * @param c1 {@link RecordComponent} #1\n+\t * @param c2 {@link RecordComponent} #2\n+\t * @return how the sorting algorithm should sort\n+\t */\n+\tprivate static int compareRecordComponents(RecordComponent c1, RecordComponent c2) {\n+\t\tif (!(c1.isAnnotationPresent(MavField.class) && c2.isAnnotationPresent(MavField.class))) {\n+\t\t\t// breaks out of method\n+\t\t\tthrow new AnnotationMissingException(\"@MavField-Annotation is missing for at least one RecordComponent!\");\n+\t\t}\n+\n+\t\tvar mf1 = c1.getAnnotation(MavField.class);\n+\t\tvar mf2 = c2.getAnnotation(MavField.class);\n+\n+\t\tif (!(mf1.position() == -1 || mf2.position() == -1)) {\n+\t\t\treturn mf1.position() - mf2.position();\n+\t\t}\n+\n+\t\tif (mf1.extension() == mf2.extension()) {\n+\t\t\treturn mf2.nativeType().size - mf1.nativeType().size;\n+\t\t} else {\n+\t\t\treturn mf1.extension() ? 1 : -1;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t *\n+\t */\n+\tprivate final Logger logger = LoggerFactory.getLogger(PayloadParser.class);\n+\n+\t/**\n+\t * A configuration which specifies this in and out address for this verticle.<br>\n+\t * This can also be loaded from a config.\n+\t */\n+\tprivate final Configuration config;\n+\n+\t/**\n+\t *\n+\t */\n+\tprivate final HashMap<NativeType, TypeParser<?>> parser;\n+}"
  },
  {
    "sha": "2fd6323902e826500476b8431d3ee32a18dc5f81",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/TypeParser.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/TypeParser.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/TypeParser.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/TypeParser.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,26 @@\n+package org.telestion.protocol.mavlink;\n+\n+/**\n+ *\n+ * @param <T>\n+ */\n+public interface TypeParser<T> {\n+\t/**\n+\t *\n+\t * @param payload\n+\t * @param arraySize\n+\t * @return\n+\t */\n+\tdefault T parse(byte[] payload, int arraySize) {\n+\t\treturn parse(payload, arraySize, 0);\n+\t}\n+\n+\t/**\n+\t *\n+\t * @param payload\n+\t * @param arraySize\n+\t * @param offset\n+\t * @return\n+\t */\n+\tT parse(byte[] payload, int arraySize, int offset);\n+}"
  },
  {
    "sha": "2929772b9bb9afd85f599010615241ab9a9c86e6",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/Validator.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/Validator.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/Validator.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/Validator.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,95 @@\n+package org.telestion.protocol.mavlink;\n+\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Promise;\n+import io.vertx.core.eventbus.Message;\n+\n+/**\n+ *\n+ *\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public abstract class Validator extends AbstractVerticle {\n+\n+\t@Override\n+\tpublic void start(Promise<Void> startPromise) {\n+\t\tvertx.eventBus().consumer(getInAddress(), this::handleMessage);\n+\t\tstartPromise.complete();\n+\t}\n+\n+\t@Override\n+\tpublic void stop(Promise<Void> stopPromise) {\n+\t\tstopPromise.complete();\n+\t}\n+\n+\t/**\n+\t * <p>\n+\t *     Each Mavlink-Validator must be able to handle incoming messages to separate the payload from its header.\n+\t * </p>\n+\t * <p>\n+\t *     It must be noted though that the incoming messages are not checked for validation and might not be\n+\t *     Mavlink-packages in the first place.\n+\t * </p>\n+\t *\n+\t * @param msg raw message which is unchecked\n+\t */\n+\tprotected abstract void handleMessage(Message<?> msg);\n+\n+\t/**\n+\t * Getter for {@link #inAddress}.\n+\t *\n+\t * @return {@link #inAddress}\n+\t */\n+\tpublic String getInAddress() {\n+\t\treturn inAddress;\n+\t}\n+\n+\t/**\n+\t * Getter for {@link #packetOutAddress}.\n+\t *\n+\t * @return {@link #packetOutAddress}\n+\t */\n+\tpublic String getPacketOutAddress() {\n+\t\treturn packetOutAddress;\n+\t}\n+\n+\t/**\n+\t * Getter for {@link #parserInAddress}.\n+\t *\n+\t * @return {@link #parserInAddress}\n+\t */\n+\tpublic String getParserInAddress() {\n+\t\treturn parserInAddress;\n+\t}\n+\n+\t/**\n+\t * Creates a new {@link Validator} with the given information.\n+\t *\n+\t * @param inAddress {@link #inAddress}\n+\t * @param packetOutAddress {@link #packetOutAddress}\n+\t * @param parserInAddress {@link #parserInAddress}\n+\t */\n+\tpublic Validator(String inAddress, String packetOutAddress, String parserInAddress) {\n+\t\tthis.inAddress = inAddress;\n+\t\tthis.packetOutAddress = packetOutAddress;\n+\t\tthis.parserInAddress = parserInAddress;\n+\t}\n+\n+\t/**\n+\t * Address on which this {@link AbstractVerticle verticle} receives its inputs.\n+\t */\n+\tprivate final String inAddress;\n+\n+\t/**\n+\t * Address to which the raw input-packet and the parsing-status (whether it was successful or not) will be\n+\t * published.\n+\t */\n+\tprivate final String packetOutAddress;\n+\n+\t/**\n+\t * Address to which the raw payload (which is the essential part of the Mavlink-Message) will be sent, to be\n+\t * received by the payload-parser.\n+\t */\n+\tprivate final String parserInAddress;\n+}"
  },
  {
    "sha": "d12e40f0d25208b7863a86bfc1283639bcf2032e",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink1.java",
    "status": "added",
    "additions": 115,
    "deletions": 0,
    "changes": 115,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink1.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink1.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink1.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,115 @@\n+package org.telestion.protocol.mavlink;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.vertx.core.eventbus.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.telestion.api.message.JsonMessage;\n+import org.telestion.protocol.mavlink.annotation.MavInfo;\n+import org.telestion.protocol.mavlink.dummy.NetPacket;\n+import org.telestion.protocol.mavlink.message.Mavlink1Information;\n+import org.telestion.protocol.mavlink.message.RawMavlinkPacket;\n+import org.telestion.protocol.mavlink.message.internal.ValidatedMavlinkPacket;\n+import org.telestion.protocol.mavlink.security.X25Checksum;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public final class ValidatorMavlink1 extends Validator {\n+\n+\t/**\n+\t * Config-Class which can be used to create a new {@link Validator}.\n+\t *\n+\t * @param inAddress {@link #inAddress}\n+\t * @param packetOutAddress {@link #packetOutAddress}\n+\t * @param parserInAddress {@link #parserInAddress}\n+\t */\n+\tpublic final record Configuration(@JsonProperty String inAddress,\n+\t\t\t\t\t\t\t\t\t  @JsonProperty String packetOutAddress,\n+\t\t\t\t\t\t\t\t\t  @JsonProperty String parserInAddress) implements JsonMessage {\n+\t\t/**\n+\t\t * Used for reflection!\n+\t\t */\n+\t\t@SuppressWarnings(\"unused\")\n+\t\tprivate Configuration() {\n+\t\t\tthis(null, null, null);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a new {@link ValidatorMavlink1} with the given {@link Configuration}.\n+\t *\n+\t * @param config {@link Configuration}\n+\t */\n+\tpublic ValidatorMavlink1(Configuration config) {\n+\t\tthis(config.parserInAddress, config.inAddress, config.packetOutAddress);\n+\t}\n+\n+\t/**\n+\t *\n+\t * @param inAddress\n+\t * @param packetOutAddress\n+\t * @param parserInAddress\n+\t */\n+\tpublic ValidatorMavlink1(String inAddress, String packetOutAddress, String parserInAddress) {\n+\t\tsuper(inAddress, packetOutAddress, parserInAddress);\n+\t}\n+\n+\t@Override\n+\tpublic final void handleMessage(Message<?> msg) {\n+\t\tJsonMessage.on(NetPacket.class, msg, packet -> {\n+\t\t\tvar raw = packet.raw();\n+\n+\t\t\t// Checking raw packet constraints and if the packet is a MAVLinkV1 packet\n+\t\t\tif (!(raw != null && raw.length > 7 && raw[0] == (byte) 0xFE)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tlogger.debug(\"MavlinkV1-packet received\");\n+\n+\t\t\tvar length = raw[1];\n+\n+\t\t\t// It can be greater if e.g. the packet length is smaller than the raw stream input\n+\t\t\tif (raw.length - 8 - length < 0) {\n+\t\t\t\tlogger.info(\"Broken MavlinkV1-packet received!\");\n+\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tvar seq = raw[2];\n+\t\t\tvar sysId = raw[3];\n+\t\t\tvar compId = raw[4];\n+\t\t\tvar msgId = raw[5];\n+\t\t\tvar payload = Arrays.copyOfRange(raw, 6, 6 + length);\n+\t\t\tvar checksum = Arrays.copyOfRange(raw, 6 + length, 6 + length + 2);\n+\n+\t\t\tvar clazz = MessageIndex.get(msgId);\n+\t\t\tif (!clazz.isAnnotationPresent(MavInfo.class)) {\n+\t\t\t\tlogger.warn(\"Annotation missing for {} (MavlinkV1)!\", clazz.getName());\n+\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tvar annotation = clazz.getAnnotation(MavInfo.class);\n+\n+\t\t\tif (X25Checksum.calculate(payload, annotation.crc()) != checksum[0] << 8 + checksum[1]) {\n+\t\t\t\tlogger.info(\"Checksum of received MavlinkV1-packet invalid!\");\n+\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, true));\n+\n+\t\t\tvar mavInfo = new Mavlink1Information(seq, sysId, compId);\n+\t\t\tvertx.eventBus().publish(getParserInAddress(), new ValidatedMavlinkPacket(payload, clazz, mavInfo));\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Handles all logs for {@link ValidatorMavlink1 this} verticle.\n+\t */\n+\tprivate final Logger logger = LoggerFactory.getLogger(ValidatorMavlink2.class);\n+\n+}"
  },
  {
    "sha": "e4d3fa61befda74e17e4a544497103fee87f5937",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink2.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink2.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink2.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/ValidatorMavlink2.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,162 @@\n+package org.telestion.protocol.mavlink;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.vertx.core.Promise;\n+import io.vertx.core.eventbus.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.telestion.api.message.JsonMessage;\n+import org.telestion.protocol.mavlink.annotation.MavInfo;\n+import org.telestion.protocol.mavlink.dummy.NetPacket;\n+import org.telestion.protocol.mavlink.message.Mavlink2Information;\n+import org.telestion.protocol.mavlink.message.RawMavlinkPacket;\n+import org.telestion.protocol.mavlink.message.internal.ValidatedMavlinkPacket;\n+import org.telestion.protocol.mavlink.security.MavV2Signator;\n+import org.telestion.protocol.mavlink.security.SecretKeySafe;\n+import org.telestion.protocol.mavlink.security.X25Checksum;\n+\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Arrays;\n+\n+/**\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public final class ValidatorMavlink2 extends Validator {\n+\n+\t/**\n+\t * Config-Class which can be used to create a new {@link Validator}.\n+\t *\n+\t * @param inAddress {@link #inAddress}\n+\t * @param packetOutAddress {@link #packetOutAddress}\n+\t * @param parserInAddress {@link #parserInAddress}\n+\t */\n+\tpublic final record Configuration(@JsonProperty String inAddress,\n+\t\t\t\t\t\t\t\t\t  @JsonProperty String packetOutAddress,\n+\t\t\t\t\t\t\t\t\t  @JsonProperty String parserInAddress,\n+\t\t\t\t\t\t\t\t\t  @JsonProperty byte[] password) implements JsonMessage {\n+\t\t/**\n+\t\t * Used for reflection!\n+\t\t */\n+\t\t@SuppressWarnings(\"unused\")\n+\t\tprivate Configuration() {\n+\t\t\tthis(null, null, null, null);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a new {@link Validator} with the given {@link Configuration}.\n+\t *\n+\t * @param config {@link Configuration}\n+\t */\n+\tpublic ValidatorMavlink2(Configuration config) {\n+\t\tthis(config.parserInAddress, config.inAddress, config.packetOutAddress, config.password);\n+\t}\n+\n+\t/**\n+\t *\n+\t * @param inAddress\n+\t * @param packetOutAddress\n+\t * @param parserInAddress\n+\t */\n+\tpublic ValidatorMavlink2(String inAddress, String packetOutAddress, String parserInAddress, byte[] password) {\n+\t\tsuper(inAddress, packetOutAddress, parserInAddress);\n+\t\tthis.safe = new SecretKeySafe(password);\n+\t}\n+\n+\t@Override\n+\tpublic final void handleMessage(Message<?> msg) {\n+\t\tJsonMessage.on(NetPacket.class, msg, packet -> {\n+\t\t\tvar raw = packet.raw();\n+\n+\t\t\t// Checking raw packet constraints and if the packet is a MAVLinkV2 packet\n+\t\t\tif (!(raw != null && raw.length > 11 && raw[0] == (byte) 0xFD)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tlogger.debug(\"MavlinkV2-packet received\");\n+\n+\t\t\tvar length = raw[1];\n+\n+\t\t\t// It can be greater if e.g. the packet length is smaller than the raw stream input\n+\t\t\tif (raw.length - 12 - length < 0) {\n+\t\t\t\tlogger.info(\"Broken MavlinkV2-packet received!\");\n+\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tvar incompatFlags = raw[2];\n+\t\t\tvar compatFlags = raw[3];\n+\t\t\tvar seq = raw[4];\n+\t\t\tvar sysId = raw[5];\n+\t\t\tvar compId = raw[6];\n+\t\t\tvar msgId = raw[7] << 16 + raw[8] << 8 + raw[9];\n+\t\t\tvar payload = Arrays.copyOfRange(raw, 10, 10 + length);\n+\t\t\tvar checksum = Arrays.copyOfRange(raw, 10 + length, 10 + length + 2);\n+\n+\t\t\tvar clazz = MessageIndex.get(msgId);\n+\t\t\tif (!clazz.isAnnotationPresent(MavInfo.class)) {\n+\t\t\t\tlogger.warn(\"Annotation missing for {} (MavlinkV2)!\", clazz.getName());\n+\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tvar annotation = clazz.getAnnotation(MavInfo.class);\n+\n+\t\t\t// Currently supported incompatibility flags\n+\t\t\tif (incompatFlags == 0x01) {\n+\t\t\t\tif (raw.length >= 10 + length + 2 + 13) {\n+\t\t\t\t\tlogger.info(\"Broken MavlinkV2-packet received!\");\n+\t\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\tvar rawSign = Arrays.copyOfRange(raw, 10 + length + 2, 10 + length + 2 + 13);\n+\t\t\t\tvar linkId = rawSign[0];\n+\t\t\t\tvar timeStamp = Arrays.copyOfRange(rawSign, 1, 7);\n+\t\t\t\tvar sign = Arrays.copyOfRange(rawSign, 7, 13);\n+\n+\t\t\t\tvar state = false;\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tstate = Arrays.equals(MavV2Signator.rawSignature(safe.getSecretKey(),\n+\t\t\t\t\t\t\t\tArrays.copyOfRange(raw, 0, 10), payload, annotation.crc(), linkId, timeStamp),\n+\t\t\t\t\t\t\t\tsign);\n+\t\t\t\t} catch (NoSuchAlgorithmException e) {\n+\t\t\t\t\tlogger.error(\"Specified Encryption Algorithm not found! This means that all received packets \" +\n+\t\t\t\t\t\t\t\"with signatures will be rejected!\", e);\n+\t\t\t\t}\n+\t\t\t\tif (!state) {\n+\t\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (X25Checksum.calculate(payload, annotation.crc()) != checksum[0] << 8 + checksum[1]) {\n+\t\t\t\tlogger.info(\"Checksum of received MavlinkV2-packet invalid!\");\n+\t\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, false));\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tvertx.eventBus().publish(getPacketOutAddress(), new RawMavlinkPacket(raw, true));\n+\n+\t\t\tvar mavInfo = new Mavlink2Information(incompatFlags, compatFlags, seq, sysId, compId);\n+\t\t\tvertx.eventBus().publish(getParserInAddress(), new ValidatedMavlinkPacket(payload, clazz, mavInfo));\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void stop(Promise<Void> stopPromise) {\n+\t\tsafe.deleteKey();\n+\t\tsuper.stop(stopPromise);\n+\t}\n+\n+\t/**\n+\t * Handles all logs for {@link ValidatorMavlink2 this} verticle.\n+\t */\n+\tprivate final Logger logger = LoggerFactory.getLogger(ValidatorMavlink2.class);\n+\n+\t/**\n+\t * Stores the secret key as a byte[]-array for the Mavlink-signature.\n+\t */\n+\tprivate final SecretKeySafe safe;\n+}"
  },
  {
    "sha": "eebf5ad76be3b85b3524829be62458a88af01c08",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavArray.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavArray.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavArray.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavArray.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,8 +1,9 @@\n package org.telestion.protocol.mavlink.annotation;\n \n-import java.lang.annotation.*;\n import org.telestion.protocol.mavlink.message.MavlinkMessage;\n \n+import java.lang.annotation.*;\n+\n /**\n  * An {@link Annotation} specifying that a MAVLink-Message-Field is an array.<br>\n  * Can be used to obtain more information about this array, too.\n@@ -19,5 +20,5 @@\n \t *\n \t * @return length of the array\n \t */\n-\tpublic int length();\n+\tint length();\n }"
  },
  {
    "sha": "c664484f455889324f6893ea05484ec91345d79a",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavField.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavField.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavField.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavField.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,8 +1,9 @@\n package org.telestion.protocol.mavlink.annotation;\n \n-import java.lang.annotation.*;\n import org.telestion.protocol.mavlink.message.MavlinkMessage;\n \n+import java.lang.annotation.*;\n+\n /**\n  * An {@link Annotation} giving more information about a MAVLink-Message-Field.\n  *\n@@ -18,7 +19,7 @@\n \t *\n \t * @return {@link NativeType} of the field\n \t */\n-\tpublic NativeType nativeType();\n+\tNativeType nativeType();\n \n \t/**\n \t * Returns the position of a MAVLink-Field in the raw array if the raw packet is not arranged according to the\n@@ -27,12 +28,12 @@\n \t *\n \t * @return position of the field in the raw array\n \t */\n-\tpublic int position() default -1;\n+\tint position() default -1;\n \n \t/**\n \t * Returns whether a field is an extension or not.\n \t *\n \t * @return if a field is an extension\n \t */\n-\tpublic boolean extension() default false;\n+\tboolean extension() default false;\n }"
  },
  {
    "sha": "658f33d7a6d9a0889321c5a52c363557663c748e",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavInfo.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavInfo.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavInfo.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/MavInfo.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,8 +1,9 @@\n package org.telestion.protocol.mavlink.annotation;\n \n-import java.lang.annotation.*;\n import org.telestion.protocol.mavlink.message.MavlinkMessage;\n \n+import java.lang.annotation.*;\n+\n /**\n  * An {@link Annotation} providing more information about a MAVLink-Message.\n  *\n@@ -18,12 +19,12 @@\n \t *\n \t * @return message id\n \t */\n-\tpublic int id();\n+\tint id();\n \n \t/**\n \t * The calculated CRC_EXTRA byte for this message.\n \t *\n \t * @return CRC_EXTRA byte for this message\n \t */\n-\tpublic int crc();\n+\tint crc();\n }"
  },
  {
    "sha": "d095ac398f103cc2dd2a6d983f4ef239e06b971d",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/NativeType.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/NativeType.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/NativeType.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/annotation/NativeType.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -36,7 +36,8 @@\n \t */\n \tINT_64(8, false),\n \t/**\n-\t * Representation of the uint64_t type for MAVLink.\n+\t * Representation of the uint64_t type for MAVLink.<br>\n+\t * As the Java-Long type has a max. limit of {@value Long#MAX_VALUE} this might be exceeded!\n \t */\n \tUINT_64(8, true),\n \t/**\n@@ -66,10 +67,10 @@\n \t * Creating a new {@link NativeType}.<br>\n \t * This can only be created by the enum-fields.\n \t *\n-\t * @param size     in memory of the new {@link NativeType}\n-\t * @param unsigned indicates whether a {@link NativeType} is unsigned or not\n+\t * @param size     in memory of the new {@link NativeType} [{@link #size}]\n+\t * @param unsigned indicates whether a {@link NativeType} is unsigned or not [{@link #unsigned}]\n \t */\n-\tprivate NativeType(int size, boolean unsigned) {\n+\tNativeType(int size, boolean unsigned) {\n \t\tthis.size = size;\n \t\tthis.unsigned = unsigned;\n \t}"
  },
  {
    "sha": "5af7ae86237b01f7be3974c9b09359ca4e7d4154",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/dummy/NetPacket.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/dummy/NetPacket.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/dummy/NetPacket.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/dummy/NetPacket.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,13 @@\n+package org.telestion.protocol.mavlink.dummy;\n+\n+import org.telestion.api.message.JsonMessage;\n+\n+/**\n+ * This is a temporary record before the network adapter update will be completed.\n+ *\n+ * @author Cedric\n+ * @version 1.0\n+ */\n+public record NetPacket(byte[] raw) implements JsonMessage {\n+\n+}"
  },
  {
    "sha": "cf0509955de4f7a1b5594e7b75e4f68d2427c5ae",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/exception/WrongSignatureException.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/exception/WrongSignatureException.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/exception/WrongSignatureException.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/exception/WrongSignatureException.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,5 +1,7 @@\n package org.telestion.protocol.mavlink.exception;\n \n+import java.io.Serial;\n+\n /**\n  * A custom implementation of the {@link RuntimeException}.<br>\n  * Indicates that the signature of a MAVLink-Message is invalid.\n@@ -13,6 +15,7 @@\n \t/**\n \t * SerialVersion UID for v1.0 of this {@link WrongSignatureException}.\n \t */\n+\t@Serial\n \tprivate static final long serialVersionUID = 7162627217882841756L;\n \n \t/**"
  },
  {
    "sha": "8265cdbea43e0b68a05667b5e927c91c0eae4d31",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink1Information.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink1Information.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink1Information.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink1Information.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,15 @@\n+package org.telestion.protocol.mavlink.message;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public record Mavlink1Information(@JsonProperty int seq,\n+\t\t\t\t\t\t\t\t  @JsonProperty int sysId,\n+\t\t\t\t\t\t\t\t  @JsonProperty int compId) implements PacketInformation {\n+\t/**\n+\t * Used for reflection!\n+\t */\n+\t@SuppressWarnings(\"unused\")\n+\tprivate Mavlink1Information() {\n+\t\tthis(0, 0, 0);\n+\t}\n+}"
  },
  {
    "sha": "356b1653c3a76f23b19901fe89c80b2d8aec76ab",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink2Information.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink2Information.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink2Information.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/Mavlink2Information.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,25 @@\n+package org.telestion.protocol.mavlink.message;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ *\n+ * @param incompatFlags\n+ * @param compatFlags\n+ * @param seqNum\n+ * @param sysId\n+ * @param compId\n+ *\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public record Mavlink2Information(@JsonProperty int incompatFlags,\n+\t\t\t\t\t\t\t\t  @JsonProperty int compatFlags,\n+\t\t\t\t\t\t\t\t  @JsonProperty int seqNum,\n+\t\t\t\t\t\t\t\t  @JsonProperty int sysId,\n+\t\t\t\t\t\t\t\t  @JsonProperty int compId) implements PacketInformation {\n+\t@SuppressWarnings(\"unused\")\n+\tprivate Mavlink2Information() {\n+\t\tthis(0, 0, 0, 0, 0);\n+\t}\n+}"
  },
  {
    "sha": "73c8c1ec990e0134e1e8a974b3914a6b81c2ca07",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/PacketInformation.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/PacketInformation.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/PacketInformation.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/PacketInformation.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,6 @@\n+package org.telestion.protocol.mavlink.message;\n+\n+import org.telestion.api.message.JsonMessage;\n+\n+public interface PacketInformation extends JsonMessage {\n+}"
  },
  {
    "sha": "b39475899178ecae8a3388cc5147dec8549948bb",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/RawMavlinkPacket.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/RawMavlinkPacket.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/RawMavlinkPacket.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/RawMavlinkPacket.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,23 @@\n+package org.telestion.protocol.mavlink.message;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * This will be published on the bus, if the {@link org.telestion.protocol.mavlink.Validator Validator} detects\n+ * that a packet was a MAVLink-packet.<br>\n+ * The record also contains information about the success of the parsing-process of the validator.\n+ *\n+ * @param raw bytes of the {@link org.telestion.protocol.mavlink.dummy.NetPacket NetPacket}\n+ * @param success if the validation process was successful\n+ *\n+ * @author Cedric Boes\n+ * @version 1.0\n+ * @see org.telestion.protocol.mavlink.Validator\n+ */\n+public record RawMavlinkPacket(@JsonProperty byte[] raw,\n+\t\t\t\t\t\t\t   @JsonProperty boolean success) {\n+\t@SuppressWarnings(\"unused\")\n+\tprivate RawMavlinkPacket() {\n+\t\tthis(null, false);\n+\t}\n+}"
  },
  {
    "sha": "6f0f2ceac9828ecac2029f3a63929b63dc5c8bc5",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/internal/ValidatedMavlinkPacket.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/internal/ValidatedMavlinkPacket.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/internal/ValidatedMavlinkPacket.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/message/internal/ValidatedMavlinkPacket.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -0,0 +1,26 @@\n+package org.telestion.protocol.mavlink.message.internal;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.telestion.api.message.JsonMessage;\n+import org.telestion.protocol.mavlink.message.MavlinkMessage;\n+import org.telestion.protocol.mavlink.message.PacketInformation;\n+\n+/**\n+ * @param payload\n+ * @param clazz\n+ * @param info\n+ *\n+ * @author Cedric Boes\n+ * @version 1.0\n+ */\n+public record ValidatedMavlinkPacket(@JsonProperty byte[] payload,\n+\t\t\t\t\t\t\t\t\t @JsonProperty Class<? extends MavlinkMessage> clazz,\n+\t\t\t\t\t\t\t\t\t @JsonProperty PacketInformation info) implements JsonMessage {\n+\t/**\n+\t * Used for reflection!\n+\t */\n+\t@SuppressWarnings(\"unused\")\n+\tprivate ValidatedMavlinkPacket() {\n+\t\tthis(null, null, null);\n+\t}\n+}"
  },
  {
    "sha": "5c1deed9fe4135135354ec23eaa87450a41699f2",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/SecretKeySafe.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/SecretKeySafe.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/SecretKeySafe.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/SecretKeySafe.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,9 +1,10 @@\n package org.telestion.protocol.mavlink.security;\n \n-import java.util.Arrays;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.Arrays;\n+\n /**\n  * A {@link SecretKeySafe} for the MAVLink-Signature-Keys. To ensure security the key will be stored in a final byte\n  * array which can be overwritten. It can only be accessed by {@link #getSecretKey()}.<br>"
  },
  {
    "sha": "bb73a329a49b8d312e977b5fca407ad9964f6f46",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/X25Checksum.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/X25Checksum.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/X25Checksum.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/security/X25Checksum.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -54,4 +54,18 @@ public static int calculate(byte[] buffer) {\n \t\t}\n \t\treturn currentCrc & 0xffff;\n \t}\n+\n+\t/**\n+\t * Calculates the CRC X.25-checksum for a given payload array and the right crc-extra extra byte.<br>\n+\t *\n+\t * @param payload data to calculate the checksum for\n+\t * @param crc crc-byte which must be added\n+\t * @return checksum for the payload\n+\t */\n+\tpublic static int calculate(byte[] payload, int crc) {\n+\t\tvar buffer = new byte[payload.length + 1];\n+\t\tSystem.arraycopy(payload, 0, buffer, 0, payload.length);\n+\t\tbuffer[payload.length] = (byte) crc;\n+\t\treturn calculate(buffer);\n+\t}\n }"
  },
  {
    "sha": "f0317aa696099f4e92c3163d96494749063baf41",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressAssociator.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressAssociator.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressAssociator.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressAssociator.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,4 +1,4 @@\n-package org.telestion.protocol.mavlink;\n+package org.telestion.protocol.old_mavlink;\n \n import java.util.HashMap;\n ",
    "previous_filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/AddressAssociator.java"
  },
  {
    "sha": "7b3608a5695dd974d122b1e075793a940dfe800d",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressPort.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressPort.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressPort.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/AddressPort.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,4 +1,4 @@\n-package org.telestion.protocol.mavlink;\n+package org.telestion.protocol.old_mavlink;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n ",
    "previous_filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/AddressPort.java"
  },
  {
    "sha": "3af5412686b8d26860ec469ccd961b68f279c2b4",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/MavlinkParser.java",
    "status": "renamed",
    "additions": 18,
    "deletions": 18,
    "changes": 36,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/MavlinkParser.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/MavlinkParser.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/MavlinkParser.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,4 +1,4 @@\n-package org.telestion.protocol.mavlink;\n+package org.telestion.protocol.old_mavlink;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.vertx.core.AbstractVerticle;\n@@ -18,21 +18,21 @@\n import org.telestion.api.message.JsonMessage;\n import org.telestion.api.config.Config;\n import org.telestion.core.message.Address;\n-import org.telestion.protocol.mavlink.annotation.MavArray;\n-import org.telestion.protocol.mavlink.annotation.MavField;\n-import org.telestion.protocol.mavlink.annotation.MavInfo;\n-import org.telestion.protocol.mavlink.annotation.NativeType;\n-import org.telestion.protocol.mavlink.exception.*;\n-import org.telestion.protocol.mavlink.message.MavlinkMessage;\n-import org.telestion.protocol.mavlink.message.MessageHelper;\n-import org.telestion.protocol.mavlink.message.MessageIndex;\n-import org.telestion.protocol.mavlink.message.internal.RawMavlink;\n-import org.telestion.protocol.mavlink.message.internal.RawMavlinkV1;\n-import org.telestion.protocol.mavlink.message.internal.RawMavlinkV2;\n-import org.telestion.protocol.mavlink.security.HeaderContext;\n-import org.telestion.protocol.mavlink.security.MavV2Signator;\n-import org.telestion.protocol.mavlink.security.SecretKeySafe;\n-import org.telestion.protocol.mavlink.security.X25Checksum;\n+import org.telestion.protocol.old_mavlink.annotation.MavArray;\n+import org.telestion.protocol.old_mavlink.annotation.MavField;\n+import org.telestion.protocol.old_mavlink.annotation.MavInfo;\n+import org.telestion.protocol.old_mavlink.annotation.NativeType;\n+import org.telestion.protocol.old_mavlink.exception.*;\n+import org.telestion.protocol.old_mavlink.message.MavlinkMessage;\n+import org.telestion.protocol.old_mavlink.message.MessageHelper;\n+import org.telestion.protocol.old_mavlink.message.MessageIndex;\n+import org.telestion.protocol.old_mavlink.message.internal.RawMavlink;\n+import org.telestion.protocol.old_mavlink.message.internal.RawMavlinkV1;\n+import org.telestion.protocol.old_mavlink.message.internal.RawMavlinkV2;\n+import org.telestion.protocol.old_mavlink.security.HeaderContext;\n+import org.telestion.protocol.old_mavlink.security.MavV2Signator;\n+import org.telestion.protocol.old_mavlink.security.SecretKeySafe;\n+import org.telestion.protocol.old_mavlink.security.X25Checksum;\n \n /**\n  * A {@link Verticle} converting MAVLink-Message <code>byte[]</code> buffers to {@link MavlinkMessage MavlinkMessages}\n@@ -290,7 +290,7 @@ public void stop(Promise<Void> stopPromise) {\n \t *\n \t * @param o     {@link Number} as {@link Object}\n \t * @param clazz {@link Class} to which the object should be casted\n-\t * @return\n+\t * @return casted number\n \t */\n \tprivate Number toRightNum(Object o, Class<? extends Number> clazz) {\n \t\t// TODO: Add char-support\n@@ -334,7 +334,7 @@ private Object parse(AtomicInteger index, byte[] payload, RecordComponent c) {\n \t\t\tint i = (payload[index.incrementAndGet()] << 8) + payload[index.incrementAndGet()];\n \t\t\treturn unsigned ? toRightNum(i, Integer.class) : toRightNum((short) i, Short.class);\n \t\tcase 4:\n-\t\t\tlong l = (payload[index.incrementAndGet()]) << 24 + (payload[index.incrementAndGet()]) << 16\n+\t\t\tlong l = (long) (payload[index.incrementAndGet()]) << 24 + (payload[index.incrementAndGet()]) << 16\n \t\t\t\t\t+ (payload[index.incrementAndGet()]) << 8 + payload[index.incrementAndGet()];\n \t\t\treturn unsigned ? toRightNum(l, Long.class) : toRightNum((int) l, Integer.class);\n \t\tcase 8:",
    "previous_filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/MavlinkParser.java"
  },
  {
    "sha": "dcadd421b64bb76aea79fc03a3cd9716fa9c41ee",
    "filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/Receiver.java",
    "status": "renamed",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/TelestionTeam/telestion/blob/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/Receiver.java",
    "raw_url": "https://github.com/TelestionTeam/telestion/raw/44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/Receiver.java",
    "contents_url": "https://api.github.com/repos/TelestionTeam/telestion/contents/modules/telestion-mavlink/src/main/java/org/telestion/protocol/old_mavlink/Receiver.java?ref=44dc60cfae4c9ec969e5e48fe936b7dbd2bd7522",
    "patch": "@@ -1,4 +1,4 @@\n-package org.telestion.protocol.mavlink;\n+package org.telestion.protocol.old_mavlink;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.vertx.core.AbstractVerticle;\n@@ -10,9 +10,9 @@\n import org.telestion.api.config.Config;\n import org.telestion.core.connection.TcpConn;\n import org.telestion.core.message.Address;\n-import org.telestion.protocol.mavlink.message.internal.RawMavlink;\n-import org.telestion.protocol.mavlink.message.internal.RawMavlinkV1;\n-import org.telestion.protocol.mavlink.message.internal.RawMavlinkV2;\n+import org.telestion.protocol.old_mavlink.message.internal.RawMavlink;\n+import org.telestion.protocol.old_mavlink.message.internal.RawMavlinkV1;\n+import org.telestion.protocol.old_mavlink.message.internal.RawMavlinkV2;\n \n /**\n  * {@link Verticle} which handles incoming MAVLink-Messages (in bytes[]).<br>",
    "previous_filename": "modules/telestion-mavlink/src/main/java/org/telestion/protocol/mavlink/Receiver.java"
  }
]
