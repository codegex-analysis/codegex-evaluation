[
  {
    "sha": "b7b61c3cbea30a5ff2bde5f4b92939e7905bb404",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/actor/background/ChannelRegistrationActor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/actor/background/ChannelRegistrationActor.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/actor/background/ChannelRegistrationActor.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/actor/background/ChannelRegistrationActor.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -99,7 +99,7 @@ private void updateSystemSettingTable(Boolean bool, RequestContext context) {\n     list.add(JsonKey.CHANNEL);\n     searchDto.setFields(list);\n     Map<String, Object> filter = new HashMap<>();\n-    filter.put(JsonKey.IS_ROOT_ORG, true);\n+    filter.put(JsonKey.IS_TENANT, true);\n     searchDto.getAdditionalProperties().put(JsonKey.FILTERS, filter);\n     Future<Map<String, Object>> esResponseF =\n         esService.search(searchDto, ProjectUtil.EsType.organisation.getTypeName(), context);"
  },
  {
    "sha": "bd0a88245f30a32fe5a8b0d6ee32bb64d52f5f7d",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/bean/Organization.java",
    "status": "removed",
    "additions": 0,
    "deletions": 334,
    "changes": 334,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/11cca97ee9a9a428e044e3314e3014fcf6d473e7/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/bean/Organization.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/11cca97ee9a9a428e044e3314e3014fcf6d473e7/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/bean/Organization.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/bean/Organization.java?ref=11cca97ee9a9a428e044e3314e3014fcf6d473e7",
    "patch": "@@ -1,334 +0,0 @@\n-package org.sunbird.bean;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonInclude.Include;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.io.Serializable;\n-import java.sql.Timestamp;\n-import java.util.List;\n-\n-@JsonIgnoreProperties(ignoreUnknown = true)\n-@JsonInclude(Include.NON_NULL)\n-public class Organization implements Serializable {\n-\n-  private static final long serialVersionUID = 3617862727235741692L;\n-  private String id;\n-  private String addressId;\n-  private String approvedBy;\n-  private String approvedDate;\n-  private String channel;\n-  private String communityId;\n-  private String contactDetail;\n-  private String createdBy;\n-  private String createdDate;\n-  private Timestamp dateTime;\n-  private String description;\n-  private String externalId;\n-  private String hashTagId;\n-  private String homeUrl;\n-  private String imgUrl;\n-  private Boolean isApproved;\n-  private Boolean isDefault;\n-  private Boolean isRootOrg;\n-  private String locationId;\n-  private Integer noOfMembers;\n-  private String orgCode;\n-  private String orgName;\n-  private String orgType;\n-  private String orgTypeId;\n-  private String parentOrgId;\n-  private String preferredLanguage;\n-  private String provider;\n-  private String rootOrgId;\n-  private String slug;\n-  private Integer status;\n-  private String theme;\n-  private String thumbnail;\n-  private String updatedBy;\n-  private String updatedDate;\n-  private List<String> locationIds;\n-\n-  public String getId() {\n-    return id;\n-  }\n-\n-  public void setId(String id) {\n-    this.id = id;\n-  }\n-\n-  public String getAddressId() {\n-    return addressId;\n-  }\n-\n-  public void setAddressId(String addressId) {\n-    this.addressId = addressId;\n-  }\n-\n-  public String getApprovedBy() {\n-    return approvedBy;\n-  }\n-\n-  public void setApprovedBy(String approvedBy) {\n-    this.approvedBy = approvedBy;\n-  }\n-\n-  public String getApprovedDate() {\n-    return approvedDate;\n-  }\n-\n-  public void setApprovedDate(String approvedDate) {\n-    this.approvedDate = approvedDate;\n-  }\n-\n-  public String getChannel() {\n-    return channel;\n-  }\n-\n-  public void setChannel(String channel) {\n-    this.channel = channel;\n-  }\n-\n-  public String getCommunityId() {\n-    return communityId;\n-  }\n-\n-  public void setCommunityId(String communityId) {\n-    this.communityId = communityId;\n-  }\n-\n-  public String getContactDetail() {\n-    return contactDetail;\n-  }\n-\n-  public void setContactDetail(String contactDetail) {\n-    this.contactDetail = contactDetail;\n-  }\n-\n-  public String getCreatedBy() {\n-    return createdBy;\n-  }\n-\n-  public void setCreatedBy(String createdBy) {\n-    this.createdBy = createdBy;\n-  }\n-\n-  public String getCreatedDate() {\n-    return createdDate;\n-  }\n-\n-  public void setCreatedDate(String createdDate) {\n-    this.createdDate = createdDate;\n-  }\n-\n-  public Timestamp getDateTime() {\n-    return dateTime;\n-  }\n-\n-  public void setDateTime(Timestamp dateTime) {\n-    this.dateTime = dateTime;\n-  }\n-\n-  public String getDescription() {\n-    return description;\n-  }\n-\n-  public void setDescription(String description) {\n-    this.description = description;\n-  }\n-\n-  public String getExternalId() {\n-    return externalId;\n-  }\n-\n-  public void setExternalId(String externalId) {\n-    this.externalId = externalId;\n-  }\n-\n-  public String getHashTagId() {\n-    return hashTagId;\n-  }\n-\n-  public void setHashTagId(String hashTagId) {\n-    this.hashTagId = hashTagId;\n-  }\n-\n-  public String getHomeUrl() {\n-    return homeUrl;\n-  }\n-\n-  public void setHomeUrl(String homeUrl) {\n-    this.homeUrl = homeUrl;\n-  }\n-\n-  public String getImgUrl() {\n-    return imgUrl;\n-  }\n-\n-  public void setImgUrl(String imgUrl) {\n-    this.imgUrl = imgUrl;\n-  }\n-\n-  public String getLocationId() {\n-    return locationId;\n-  }\n-\n-  public void setLocationId(String locationId) {\n-    this.locationId = locationId;\n-  }\n-\n-  public Integer getNoOfMembers() {\n-    return noOfMembers;\n-  }\n-\n-  public void setNoOfMembers(Integer noOfMembers) {\n-    this.noOfMembers = noOfMembers;\n-  }\n-\n-  public String getOrgCode() {\n-    return orgCode;\n-  }\n-\n-  public void setOrgCode(String orgCode) {\n-    this.orgCode = orgCode;\n-  }\n-\n-  public String getOrgName() {\n-    return orgName;\n-  }\n-\n-  public void setOrgName(String orgName) {\n-    this.orgName = orgName;\n-  }\n-\n-  public String getOrgType() {\n-    return orgType;\n-  }\n-\n-  public void setOrgType(String orgType) {\n-    this.orgType = orgType;\n-  }\n-\n-  public String getOrgTypeId() {\n-    return orgTypeId;\n-  }\n-\n-  public void setOrgTypeId(String orgTypeId) {\n-    this.orgTypeId = orgTypeId;\n-  }\n-\n-  public String getParentOrgId() {\n-    return parentOrgId;\n-  }\n-\n-  public void setParentOrgId(String parentOrgId) {\n-    this.parentOrgId = parentOrgId;\n-  }\n-\n-  public String getPreferredLanguage() {\n-    return preferredLanguage;\n-  }\n-\n-  public void setPreferredLanguage(String preferredLanguage) {\n-    this.preferredLanguage = preferredLanguage;\n-  }\n-\n-  public String getProvider() {\n-    return provider;\n-  }\n-\n-  public void setProvider(String provider) {\n-    this.provider = provider;\n-  }\n-\n-  public String getRootOrgId() {\n-    return rootOrgId;\n-  }\n-\n-  public void setRootOrgId(String rootOrgId) {\n-    this.rootOrgId = rootOrgId;\n-  }\n-\n-  public String getSlug() {\n-    return slug;\n-  }\n-\n-  public void setSlug(String slug) {\n-    this.slug = slug;\n-  }\n-\n-  public Integer getStatus() {\n-    return status;\n-  }\n-\n-  public void setStatus(Integer status) {\n-    this.status = status;\n-  }\n-\n-  public String getTheme() {\n-    return theme;\n-  }\n-\n-  public void setTheme(String theme) {\n-    this.theme = theme;\n-  }\n-\n-  public String getThumbnail() {\n-    return thumbnail;\n-  }\n-\n-  public void setThumbnail(String thumbnail) {\n-    this.thumbnail = thumbnail;\n-  }\n-\n-  public String getUpdatedBy() {\n-    return updatedBy;\n-  }\n-\n-  public void setUpdatedBy(String updatedBy) {\n-    this.updatedBy = updatedBy;\n-  }\n-\n-  public String getUpdatedDate() {\n-    return updatedDate;\n-  }\n-\n-  public void setUpdatedDate(String updatedDate) {\n-    this.updatedDate = updatedDate;\n-  }\n-\n-  public List<String> getLocationIds() {\n-    return locationIds;\n-  }\n-\n-  public void setLocationIds(List<String> locationIds) {\n-    this.locationIds = locationIds;\n-  }\n-\n-  @JsonProperty(value = \"isApproved\")\n-  public Boolean isApproved() {\n-    return isApproved;\n-  }\n-\n-  public void setApproved(Boolean isApproved) {\n-    this.isApproved = isApproved;\n-  }\n-\n-  @JsonProperty(value = \"isDefault\")\n-  public Boolean isDefault() {\n-    return isDefault;\n-  }\n-\n-  public void setDefault(Boolean isDefault) {\n-    this.isDefault = isDefault;\n-  }\n-\n-  @JsonProperty(value = \"isRootOrg\")\n-  public Boolean isRootOrg() {\n-    return isRootOrg;\n-  }\n-\n-  public void setRootOrg(Boolean isRootOrg) {\n-    this.isRootOrg = isRootOrg;\n-  }\n-}"
  },
  {
    "sha": "e8c000d6eb4a6fe27527a3b8518e9f8fe3898ef3",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/feed/FeedUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/feed/FeedUtil.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/feed/FeedUtil.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/feed/FeedUtil.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -86,7 +86,7 @@ private static Feed createFeedObj(ShadowUser shadowUser, String userId, RequestC\n     List<Map<String, String>> orgList = new CopyOnWriteArrayList<>();\n     Map<String, String> orgMap = new HashMap<>();\n     filters.put(JsonKey.CHANNEL, channel);\n-    filters.put(JsonKey.IS_ROOT_ORG, true);\n+    filters.put(JsonKey.IS_TENANT, true);\n     if (!orgIdMap.isEmpty() && orgIdMap.containsKey(channel)) {\n       orgMap = (Map<String, String>) orgIdMap.get(channel);\n     } else {"
  },
  {
    "sha": "cf33d881ca683b40e14f1d3eb33bb7767ac11f88",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/BackgroundJobManager.java",
    "status": "modified",
    "additions": 19,
    "deletions": 38,
    "changes": 57,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/BackgroundJobManager.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/BackgroundJobManager.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/BackgroundJobManager.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,5 +1,6 @@\n package org.sunbird.learner.actors;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.*;\n import org.apache.commons.collections.MapUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -17,6 +18,7 @@\n import org.sunbird.common.request.RequestContext;\n import org.sunbird.helper.ServiceFactory;\n import org.sunbird.learner.util.Util;\n+import org.sunbird.models.organisation.OrgTypeEnum;\n import scala.concurrent.Future;\n \n /**\n@@ -34,7 +36,6 @@\n     \"insertOrgInfoToElastic\",\n     \"updateOrgInfoToElastic\",\n     \"updateUserOrgES\",\n-    \"removeUserOrgES\",\n     \"insertUserNotesToElastic\",\n     \"updateUserNotesToElastic\",\n   }\n@@ -54,8 +55,6 @@ public void onReceive(Request request) throws Throwable {\n       insertOrgInfoToEs(request);\n     } else if (operation.equalsIgnoreCase(ActorOperations.UPDATE_USER_ORG_ES.getValue())) {\n       updateUserOrgInfoToEs(request);\n-    } else if (operation.equalsIgnoreCase(ActorOperations.REMOVE_USER_ORG_ES.getValue())) {\n-      removeUserOrgInfoToEs(request);\n     } else if (operation.equalsIgnoreCase(ActorOperations.UPDATE_USER_ROLES_ES.getValue())) {\n       updateUserRoleToEs(request);\n     } else if (operation.equalsIgnoreCase(ActorOperations.INSERT_USER_NOTES_ES.getValue())) {\n@@ -95,40 +94,6 @@ private void updateUserRoleToEs(Request actorMessage) {\n         actorMessage.getRequestContext());\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  private void removeUserOrgInfoToEs(Request actorMessage) {\n-    Map<String, Object> orgMap = (Map<String, Object>) actorMessage.getRequest().get(JsonKey.USER);\n-    Future<Map<String, Object>> resultF =\n-        esService.getDataByIdentifier(\n-            ProjectUtil.EsType.user.getTypeName(),\n-            (String) orgMap.get(JsonKey.USER_ID),\n-            actorMessage.getRequestContext());\n-    Map<String, Object> result =\n-        (Map<String, Object>) ElasticSearchHelper.getResponseFromFuture(resultF);\n-    if (result.containsKey(JsonKey.ORGANISATIONS) && null != result.get(JsonKey.ORGANISATIONS)) {\n-      List<Map<String, Object>> orgMapList =\n-          (List<Map<String, Object>>) result.get(JsonKey.ORGANISATIONS);\n-      if (null != orgMapList) {\n-        Iterator<Map<String, Object>> itr = orgMapList.iterator();\n-        while (itr.hasNext()) {\n-          Map<String, Object> map = itr.next();\n-          if ((((String) map.get(JsonKey.USER_ID))\n-                  .equalsIgnoreCase((String) orgMap.get(JsonKey.USER_ID)))\n-              && (((String) map.get(JsonKey.ORGANISATION_ID))\n-                  .equalsIgnoreCase((String) orgMap.get(JsonKey.ORGANISATION_ID)))) {\n-            itr.remove();\n-          }\n-        }\n-      }\n-    }\n-    updateDataToElastic(\n-        ProjectUtil.EsIndex.sunbird.getIndexName(),\n-        ProjectUtil.EsType.user.getTypeName(),\n-        (String) result.get(JsonKey.IDENTIFIER),\n-        result,\n-        actorMessage.getRequestContext());\n-  }\n-\n   @SuppressWarnings(\"unchecked\")\n   private void updateUserOrgInfoToEs(Request actorMessage) {\n     Map<String, Object> orgMap = (Map<String, Object>) actorMessage.getRequest().get(JsonKey.USER);\n@@ -166,7 +131,7 @@ private void insertOrgInfoToEs(Request actorMessage) {\n     logger.info(actorMessage.getRequestContext(), \"Calling method to save inside Es==\");\n     Map<String, Object> orgMap =\n         (Map<String, Object>) actorMessage.getRequest().get(JsonKey.ORGANISATION);\n-    if (ProjectUtil.isNotNull(orgMap)) {\n+    if (MapUtils.isNotEmpty(orgMap)) {\n       Util.DbInfo orgDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n       String id = (String) orgMap.get(JsonKey.ID);\n       Response orgResponse =\n@@ -181,6 +146,22 @@ private void insertOrgInfoToEs(Request actorMessage) {\n       if (!(orgList.isEmpty())) {\n         esMap = orgList.get(0);\n         esMap.remove(JsonKey.CONTACT_DETAILS);\n+        String orgLocation = (String) esMap.get(JsonKey.ORG_LOCATION);\n+        try {\n+          if (esMap.containsKey(JsonKey.ORG_TYPE) && null != esMap.get(JsonKey.ORG_TYPE)) {\n+            esMap.put(\n+                JsonKey.ORG_TYPE,\n+                OrgTypeEnum.getTypeByValue((Integer) esMap.get(JsonKey.ORG_TYPE)));\n+          }\n+          if (StringUtils.isNotBlank(orgLocation)) {\n+            ObjectMapper mapper = new ObjectMapper();\n+            esMap.put(JsonKey.ORG_LOCATION, mapper.readValue(orgLocation, List.class));\n+          }\n+        } catch (Exception e) {\n+          logger.info(\n+              actorMessage.getRequestContext(),\n+              \"Exception occurred while converting orgLocation to List<Map<String,String>>.\");\n+        }\n \n         if (MapUtils.isNotEmpty((Map<String, Object>) orgMap.get(JsonKey.ADDRESS))) {\n           esMap.put(JsonKey.ADDRESS, orgMap.get(JsonKey.ADDRESS));"
  },
  {
    "sha": "c8ece3dd94ec6082f3adc6204f3870769df4b337",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/OrganisationManagementActor.java",
    "status": "modified",
    "additions": 275,
    "deletions": 862,
    "changes": 1137,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/OrganisationManagementActor.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/OrganisationManagementActor.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/OrganisationManagementActor.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,21 +1,19 @@\n package org.sunbird.learner.actors;\n \n-import static org.sunbird.learner.util.Util.isNotNull;\n-import static org.sunbird.learner.util.Util.isNull;\n-\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.text.MessageFormat;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.TreeMap;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.collections.MapUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.sunbird.actor.core.BaseActor;\n import org.sunbird.actor.router.ActorConfig;\n+import org.sunbird.actorutil.location.LocationClient;\n+import org.sunbird.actorutil.location.impl.LocationClientImpl;\n import org.sunbird.cassandra.CassandraOperation;\n import org.sunbird.common.ElasticSearchHelper;\n import org.sunbird.common.exception.ProjectCommonException;\n@@ -27,19 +25,20 @@\n import org.sunbird.common.models.util.JsonKey;\n import org.sunbird.common.models.util.LocationActorOperation;\n import org.sunbird.common.models.util.ProjectUtil;\n-import org.sunbird.common.models.util.ProjectUtil.EsIndex;\n import org.sunbird.common.models.util.ProjectUtil.EsType;\n import org.sunbird.common.models.util.Slug;\n import org.sunbird.common.models.util.TelemetryEnvKey;\n-import org.sunbird.common.models.util.datasecurity.EncryptionService;\n import org.sunbird.common.request.Request;\n import org.sunbird.common.request.RequestContext;\n import org.sunbird.common.responsecode.ResponseCode;\n-import org.sunbird.common.responsecode.ResponseMessage;\n import org.sunbird.dto.SearchDTO;\n import org.sunbird.helper.ServiceFactory;\n-import org.sunbird.learner.util.DataCacheHandler;\n+import org.sunbird.learner.organisation.external.identity.service.OrgExternalService;\n+import org.sunbird.learner.organisation.service.OrgService;\n+import org.sunbird.learner.organisation.service.impl.OrgServiceImpl;\n import org.sunbird.learner.util.Util;\n+import org.sunbird.models.location.Location;\n+import org.sunbird.models.organisation.OrgTypeEnum;\n import org.sunbird.models.organisation.Organisation;\n import org.sunbird.telemetry.util.TelemetryUtil;\n import org.sunbird.validator.location.LocationRequestValidator;\n@@ -51,48 +50,30 @@\n  * @author Arvind\n  */\n @ActorConfig(\n-  tasks = {\n-    \"createOrg\",\n-    \"updateOrg\",\n-    \"updateOrgStatus\",\n-    \"getOrgDetails\",\n-    \"addMemberOrganisation\",\n-    \"removeMemberOrganisation\",\n-    \"assignKeys\"\n-  },\n+  tasks = {\"createOrg\", \"updateOrg\", \"updateOrgStatus\", \"getOrgDetails\", \"assignKeys\"},\n   asyncTasks = {}\n )\n public class OrganisationManagementActor extends BaseActor {\n   private final CassandraOperation cassandraOperation = ServiceFactory.getInstance();\n   private static final LocationRequestValidator validator = new LocationRequestValidator();\n-  private final EncryptionService encryptionService =\n-      org.sunbird.common.models.util.datasecurity.impl.ServiceFactory.getEncryptionServiceInstance(\n-          null);\n   private ElasticSearchService esService = EsClientFactory.getInstance(JsonKey.REST);\n+  private LocationClient locationClient = LocationClientImpl.getInstance();\n \n   @Override\n   public void onReceive(Request request) throws Throwable {\n     Util.initializeContext(request, TelemetryEnvKey.ORGANISATION);\n     if (request.getOperation().equalsIgnoreCase(ActorOperations.CREATE_ORG.getValue())) {\n       createOrg(request);\n+    } else if (request.getOperation().equalsIgnoreCase(ActorOperations.UPDATE_ORG.getValue())) {\n+      updateOrgData(request);\n     } else if (request\n         .getOperation()\n         .equalsIgnoreCase(ActorOperations.UPDATE_ORG_STATUS.getValue())) {\n       updateOrgStatus(request);\n-    } else if (request.getOperation().equalsIgnoreCase(ActorOperations.UPDATE_ORG.getValue())) {\n-      updateOrgData(request);\n     } else if (request\n         .getOperation()\n         .equalsIgnoreCase(ActorOperations.GET_ORG_DETAILS.getValue())) {\n       getOrgDetails(request);\n-    } else if (request\n-        .getOperation()\n-        .equalsIgnoreCase(ActorOperations.ADD_MEMBER_ORGANISATION.getValue())) {\n-      addMemberOrganisation(request);\n-    } else if (request\n-        .getOperation()\n-        .equalsIgnoreCase(ActorOperations.REMOVE_MEMBER_ORGANISATION.getValue())) {\n-      removeMemberOrganisation(request);\n     } else if (request.getOperation().equalsIgnoreCase(ActorOperations.ASSIGN_KEYS.getValue())) {\n       assignKey(request);\n     } else {\n@@ -112,45 +93,36 @@ private void createOrg(Request actorMessage) {\n     try {\n       actorMessage.toLower();\n       Map<String, Object> request = actorMessage.getRequest();\n-      validateLocationCodeAndIds(request);\n-      if (request.containsKey(JsonKey.ORG_TYPE)\n-          && !StringUtils.isBlank((String) request.get(JsonKey.ORG_TYPE))) {\n-        request.put(\n-            JsonKey.ORG_TYPE_ID,\n-            validateOrgType(\n-                (String) request.get(JsonKey.ORG_TYPE), actorMessage.getRequestContext()));\n-      }\n-\n-      Map<String, Object> addressReq = null;\n-      if (null != request.get(JsonKey.ADDRESS)) {\n-        addressReq = (Map<String, Object>) request.get(JsonKey.ADDRESS);\n-        request.remove(JsonKey.ADDRESS);\n+      if (request.containsKey(JsonKey.EMAIL)\n+          && !EmailValidator.isEmailValid((String) request.get(JsonKey.EMAIL))) {\n+        ProjectCommonException.throwClientErrorException(ResponseCode.emailFormatError);\n       }\n-      Util.DbInfo orgDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n-\n+      String orgType = (String) request.get(JsonKey.ORG_TYPE);\n+      validateOrgType(orgType, JsonKey.CREATE);\n+      request.put(JsonKey.ORG_TYPE, OrgTypeEnum.getValueByType(orgType));\n+      // Channel is mandatory for all org\n       channelMandatoryValidation(request);\n+      String channel = (String) request.get(JsonKey.CHANNEL);\n       validateChannel(request, actorMessage.getRequestContext());\n-      String updatedBy = (String) actorMessage.getRequest().get(JsonKey.REQUESTED_BY);\n-      if (!(StringUtils.isBlank(updatedBy))) {\n-        request.put(JsonKey.CREATED_BY, updatedBy);\n-      }\n-      String uniqueId = ProjectUtil.getUniqueIdFromTimestamp(actorMessage.getEnv());\n-      request.put(JsonKey.ID, uniqueId);\n-      request.put(JsonKey.CREATED_DATE, ProjectUtil.getFormattedDate());\n-      if (JsonKey.BULK_ORG_UPLOAD.equalsIgnoreCase(callerId)) {\n-        if (null == request.get(JsonKey.STATUS)) {\n-          request.put(JsonKey.STATUS, ProjectUtil.OrgStatus.ACTIVE.getValue());\n+\n+      Boolean isTenant = (Boolean) request.get(JsonKey.IS_TENANT);\n+      String slug = Slug.makeSlug((String) request.getOrDefault(JsonKey.CHANNEL, \"\"), true);\n+      if (null != isTenant && isTenant) {\n+        String orgId = getOrgIdFromSlug(slug, actorMessage.getRequestContext());\n+        if (StringUtils.isBlank(orgId)) {\n+          request.put(JsonKey.SLUG, slug);\n+        } else {\n+          ProjectCommonException.throwClientErrorException(ResponseCode.slugIsNotUnique);\n         }\n       } else {\n-        request.put(JsonKey.STATUS, ProjectUtil.OrgStatus.ACTIVE.getValue());\n+        request.put(JsonKey.SLUG, slug);\n       }\n-      // removing default from request, not allowing user to create default org.\n-      request.remove(JsonKey.IS_DEFAULT);\n+\n+      validateOrgLocation(request, actorMessage.getRequestContext());\n \n       String passedExternalId = (String) request.get(JsonKey.EXTERNAL_ID);\n       if (StringUtils.isNotBlank(passedExternalId)) {\n         passedExternalId = passedExternalId.toLowerCase();\n-        String channel = (String) request.get(JsonKey.CHANNEL);\n         if (!validateChannelExternalIdUniqueness(\n             channel, passedExternalId, null, actorMessage.getRequestContext())) {\n           ProjectCommonException.throwClientErrorException(\n@@ -166,32 +138,43 @@ private void createOrg(Request actorMessage) {\n         request.remove(JsonKey.EXTERNAL_ID);\n         request.remove(JsonKey.PROVIDER);\n       }\n-      // update address if present in request\n-      if (null != addressReq && addressReq.size() > 0) {\n-        String addressId = ProjectUtil.getUniqueIdFromTimestamp(actorMessage.getEnv());\n-        addressReq.put(JsonKey.ID, addressId);\n-        addressReq.put(JsonKey.CREATED_DATE, ProjectUtil.getFormattedDate());\n-\n-        if (!(StringUtils.isBlank(updatedBy))) {\n-          addressReq.put(JsonKey.CREATED_BY, updatedBy);\n+\n+      String createdBy = (String) actorMessage.getRequest().get(JsonKey.REQUESTED_BY);\n+      request.put(JsonKey.CREATED_BY, createdBy);\n+      request.put(JsonKey.CREATED_DATE, ProjectUtil.getFormattedDate());\n+      String uniqueId = ProjectUtil.getUniqueIdFromTimestamp(actorMessage.getEnv());\n+      request.put(JsonKey.ID, uniqueId);\n+      // RootOrgId will always be same as orgId\n+      request.put(JsonKey.ROOT_ORG_ID, uniqueId);\n+\n+      if (JsonKey.BULK_ORG_UPLOAD.equalsIgnoreCase(callerId)) {\n+        if (null == request.get(JsonKey.STATUS)) {\n+          request.put(JsonKey.STATUS, ProjectUtil.OrgStatus.ACTIVE.getValue());\n         }\n-        upsertAddress(addressReq);\n-        request.put(JsonKey.ADDRESS_ID, addressId);\n-        telemetryGenerationForOrgAddress(addressReq, request, false, actorMessage.getContext());\n+      } else {\n+        request.put(JsonKey.STATUS, ProjectUtil.OrgStatus.ACTIVE.getValue());\n       }\n \n-      Boolean isRootOrg = (Boolean) request.get(JsonKey.IS_ROOT_ORG);\n-      // set root org on basis of whether the org itself is root org or not ...\n-      if (null != isRootOrg && isRootOrg) {\n-        request.put(JsonKey.ROOT_ORG_ID, uniqueId);\n-      }\n-      if (request.containsKey(JsonKey.EMAIL)\n-          && !EmailValidator.isEmailValid((String) request.get(JsonKey.EMAIL))) {\n-        ProjectCommonException.throwClientErrorException(ResponseCode.emailFormatError);\n+      if (null != request.get(JsonKey.ADDRESS)) {\n+        Map<String, Object> addressReq = (Map<String, Object>) request.get(JsonKey.ADDRESS);\n+        request.remove(JsonKey.ADDRESS);\n+        // update address if present in request\n+        if (MapUtils.isNotEmpty(addressReq)) {\n+          String addressId = ProjectUtil.getUniqueIdFromTimestamp(actorMessage.getEnv());\n+          addressReq.put(JsonKey.ID, addressId);\n+          addressReq.put(JsonKey.CREATED_DATE, ProjectUtil.getFormattedDate());\n+\n+          if (!(StringUtils.isBlank(createdBy))) {\n+            addressReq.put(JsonKey.CREATED_BY, createdBy);\n+          }\n+          upsertAddress(addressReq);\n+          request.put(JsonKey.ADDRESS_ID, addressId);\n+          telemetryGenerationForOrgAddress(addressReq, request, false, actorMessage.getContext());\n+        }\n       }\n \n       // adding one extra filed for tag.\n-      if (!StringUtils.isBlank(((String) request.get(JsonKey.HASHTAGID)))) {\n+      if (StringUtils.isNotBlank(((String) request.get(JsonKey.HASHTAGID)))) {\n         request.put(\n             JsonKey.HASHTAGID,\n             validateHashTagId(\n@@ -203,22 +186,7 @@ private void createOrg(Request actorMessage) {\n         request.put(JsonKey.HASHTAGID, uniqueId);\n       }\n \n-      if (request.containsKey(JsonKey.CHANNEL)) {\n-        String slug = Slug.makeSlug((String) request.getOrDefault(JsonKey.CHANNEL, \"\"), true);\n-        if (null != isRootOrg && isRootOrg) {\n-          boolean bool = isSlugUnique(slug, actorMessage.getRequestContext());\n-          if (bool) {\n-            request.put(JsonKey.SLUG, slug);\n-          } else {\n-            sender().tell(ProjectUtil.createClientException(ResponseCode.slugIsNotUnique), self());\n-            return;\n-          }\n-        } else {\n-          request.put(JsonKey.SLUG, slug);\n-        }\n-      }\n-\n-      if (null != isRootOrg && isRootOrg) {\n+      if (null != isTenant && isTenant) {\n         boolean bool = Util.registerChannel(request, actorMessage.getRequestContext());\n         request.put(\n             JsonKey.IS_SSO_ROOTORG_ENABLED,\n@@ -230,9 +198,10 @@ private void createOrg(Request actorMessage) {\n           return;\n         }\n       } else {\n-        request.put(JsonKey.IS_ROOT_ORG, false);\n+        request.put(JsonKey.IS_TENANT, false);\n         request.put(JsonKey.IS_SSO_ROOTORG_ENABLED, false);\n       }\n+      Util.DbInfo orgDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n       // This will remove all extra unnecessary parameter from request\n       ObjectMapper mapper = new ObjectMapper();\n       Organisation org = mapper.convertValue(request, Organisation.class);\n@@ -245,7 +214,6 @@ private void createOrg(Request actorMessage) {\n               actorMessage.getRequestContext());\n \n       if (StringUtils.isNotBlank(passedExternalId)) {\n-        String channel = (String) request.get(JsonKey.CHANNEL);\n         createOrgExternalIdRecord(\n             channel, passedExternalId, uniqueId, actorMessage.getRequestContext());\n       }\n@@ -331,31 +299,27 @@ private String validateHashTagId(\n     return hashTagId;\n   }\n \n-  private String validateOrgType(String orgType, RequestContext context) {\n-    String orgTypeId = null;\n-    if (!StringUtils.isBlank(DataCacheHandler.getOrgTypeMap().get(orgType.toLowerCase()))) {\n-      orgTypeId = DataCacheHandler.getOrgTypeMap().get(orgType.toLowerCase());\n-    } else {\n-      Util.DbInfo orgTypeDbInfo = Util.dbInfoMap.get(JsonKey.ORG_TYPE_DB);\n-      Response response =\n-          cassandraOperation.getAllRecords(\n-              orgTypeDbInfo.getKeySpace(), orgTypeDbInfo.getTableName(), context);\n-      List<Map<String, Object>> list = (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n-      if (!list.isEmpty()) {\n-        for (Map<String, Object> map : list) {\n-          if ((((String) map.get(JsonKey.NAME)).toLowerCase())\n-              .equalsIgnoreCase(orgType.toLowerCase())) {\n-            orgTypeId = (String) map.get(JsonKey.ID);\n-            DataCacheHandler.getOrgTypeMap()\n-                .put(((String) map.get(JsonKey.NAME)).toLowerCase(), (String) map.get(JsonKey.ID));\n-          }\n-        }\n-      }\n-      if (null == orgTypeId) {\n-        throw ProjectUtil.createClientException(ResponseCode.invalidOrgType);\n-      }\n+  private void validateOrgType(String orgType, String operation) {\n+    if (StringUtils.isBlank(orgType) && operation.equalsIgnoreCase(JsonKey.CREATE)) {\n+      throw new ProjectCommonException(\n+          ResponseCode.mandatoryParamsMissing.getErrorCode(),\n+          MessageFormat.format(\n+              ResponseCode.mandatoryParamsMissing.getErrorMessage(), JsonKey.ORG_TYPE),\n+          ResponseCode.CLIENT_ERROR.getResponseCode());\n+    }\n+\n+    List<String> orgTypeList = new ArrayList<>();\n+    for (OrgTypeEnum type : OrgTypeEnum.values()) {\n+      orgTypeList.add(type.getType());\n+    }\n+\n+    if (StringUtils.isNotBlank(orgType) && !orgTypeList.contains(orgType)) {\n+      throw new ProjectCommonException(\n+          ResponseCode.invalidValue.getErrorCode(),\n+          MessageFormat.format(\n+              ResponseCode.invalidValue.getErrorMessage(), JsonKey.ORG_TYPE, orgType, orgTypeList),\n+          ResponseCode.CLIENT_ERROR.getResponseCode());\n     }\n-    return orgTypeId;\n   }\n \n   /** Updates the status of the Organisation */\n@@ -368,10 +332,7 @@ private void updateOrgStatus(Request actorMessage) {\n       actorMessage.toLower();\n       Util.DbInfo orgDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n       Map<String, Object> request = actorMessage.getRequest();\n-      if (!(validateOrgRequest(request, actorMessage.getRequestContext()))) {\n-        logger.info(actorMessage.getRequestContext(), \"REQUESTED DATA IS NOT VALID\");\n-        return;\n-      }\n+      validateOrgRequest(request, actorMessage.getRequestContext());\n       Map<String, Object> orgDao;\n       Map<String, Object> updateOrgDao = new HashMap<>();\n       String updatedBy = (String) request.get(JsonKey.REQUESTED_BY);\n@@ -443,113 +404,59 @@ private void updateOrgStatus(Request actorMessage) {\n   /** Update the Organisation data */\n   @SuppressWarnings(\"unchecked\")\n   private void updateOrgData(Request actorMessage) {\n-\n     Util.DbInfo orgDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n-    // object of telemetry event...\n     Map<String, Object> targetObject = null;\n     List<Map<String, Object>> correlatedObject = new ArrayList<>();\n     String callerId = (String) actorMessage.getContext().get(JsonKey.CALLER_ID);\n     try {\n       actorMessage.toLower();\n       Map<String, Object> request = actorMessage.getRequest();\n-      String orgId = (String) request.get(JsonKey.ORGANISATION_ID);\n-      Response result =\n-          cassandraOperation.getRecordById(\n-              orgDbInfo.getKeySpace(),\n-              orgDbInfo.getTableName(),\n-              orgId,\n-              actorMessage.getRequestContext());\n-      List<Map<String, Object>> list = (List<Map<String, Object>>) result.get(JsonKey.RESPONSE);\n-      Map<String, Object> orgDao;\n-      if (!(list.isEmpty())) {\n-        orgDao = list.get(0);\n-      } else {\n-        logger.info(\n-            actorMessage.getRequestContext(),\n-            \"OrganisationManagementActor: updateOrgData invalid orgId\");\n-        sender().tell(ProjectUtil.createClientException(ResponseCode.invalidRequestData), self());\n-        return;\n-      }\n-\n-      String existingExternalId = (String) orgDao.get(JsonKey.EXTERNAL_ID);\n-      // fetch channel from org, if channel is not passed\n-      if (!request.containsKey(JsonKey.CHANNEL)) {\n-        String channelFromDB = (String) orgDao.get(JsonKey.CHANNEL);\n-        if (StringUtils.isBlank(channelFromDB)) {\n-          String rootOrgId = (String) orgDao.get(JsonKey.ROOT_ORG_ID);\n-          Map<String, Object> rootOrg =\n-              Util.getOrgDetails(rootOrgId, actorMessage.getRequestContext());\n-          channelFromDB = (String) rootOrg.get(JsonKey.CHANNEL);\n-        }\n-        request.put(JsonKey.CHANNEL, channelFromDB);\n-      }\n-      validateLocationCodeAndIds(request);\n-      if (request.containsKey(JsonKey.ORG_TYPE)\n-          && !StringUtils.isBlank((String) request.get(JsonKey.ORG_TYPE))) {\n-        request.put(\n-            JsonKey.ORG_TYPE_ID,\n-            validateOrgType(\n-                (String) request.get(JsonKey.ORG_TYPE), actorMessage.getRequestContext()));\n-      }\n-      if (!(validateOrgRequest(request, actorMessage.getRequestContext()))) {\n-        logger.info(actorMessage.getRequestContext(), \"REQUESTED DATA IS NOT VALID for Org update\");\n-        return;\n-      }\n+      validateOrgRequest(request, actorMessage.getRequestContext());\n       if (request.containsKey(JsonKey.EMAIL)\n           && !EmailValidator.isEmailValid((String) request.get(JsonKey.EMAIL))) {\n         ProjectCommonException.throwClientErrorException(ResponseCode.emailFormatError);\n       }\n-      //\n-      boolean channelAdded = false;\n-      if ((!request.containsKey(JsonKey.CHANNEL)) && request.containsKey(JsonKey.PROVIDER)) {\n-        // then make provider as channel to fetch root org id.\n-        request.put(JsonKey.CHANNEL, request.get(JsonKey.PROVIDER));\n-        channelAdded = true;\n-      }\n-      if (request.containsKey(JsonKey.CHANNEL)) {\n-        if (!request.containsKey(JsonKey.IS_ROOT_ORG)\n-            || !(Boolean) request.get(JsonKey.IS_ROOT_ORG)) {\n-          String rootOrgId =\n-              getRootOrgIdFromChannel(\n-                  (String) request.get(JsonKey.CHANNEL), actorMessage.getRequestContext());\n-          if (!StringUtils.isBlank(rootOrgId) || channelAdded) {\n-            request.put(\n-                JsonKey.ROOT_ORG_ID,\n-                \"\".equals(rootOrgId) ? JsonKey.DEFAULT_ROOT_ORG_ID : rootOrgId);\n-          } else {\n-            logger.info(actorMessage.getRequestContext(), \"Invalid channel id.\");\n-            ProjectCommonException.throwClientErrorException(ResponseCode.invalidChannel);\n-          }\n-        } else if (!channelAdded\n-            && !validateChannelUniqueness(\n-                (String) request.get(JsonKey.CHANNEL),\n-                (String) request.get(JsonKey.ORGANISATION_ID),\n-                actorMessage.getRequestContext())) {\n-          logger.info(actorMessage.getRequestContext(), \"Channel validation failed\");\n-          ProjectCommonException.throwClientErrorException(ResponseCode.channelUniquenessInvalid);\n-        }\n+      String orgType = (String) request.get(JsonKey.ORG_TYPE);\n+      validateOrgType(orgType, JsonKey.UPDATE);\n+      if (StringUtils.isNotBlank(orgType)) {\n+        request.put(JsonKey.ORG_TYPE, OrgTypeEnum.getValueByType(orgType));\n       }\n-      // if channel is not coming and we added it from provider to collect the\n-      // rootOrgId then\n-      // remove channel\n-      if (channelAdded) {\n-        request.remove(JsonKey.CHANNEL);\n+      String orgId = (String) request.get(JsonKey.ORGANISATION_ID);\n+      OrgService orgService = OrgServiceImpl.getInstance();\n+      Map<String, Object> dbOrgDetails =\n+          orgService.getOrgById(orgId, actorMessage.getRequestContext());\n+      if (MapUtils.isEmpty(dbOrgDetails)) {\n+        logger.info(\n+            actorMessage.getRequestContext(),\n+            \"OrganisationManagementActor: updateOrgData invalid orgId\");\n+        throw new ProjectCommonException(\n+            ResponseCode.invalidRequestData.getErrorCode(),\n+            ResponseCode.invalidRequestData.getErrorMessage(),\n+            ResponseCode.CLIENT_ERROR.getResponseCode());\n       }\n-      Map<String, Object> addressReq = null;\n-      if (null != request.get(JsonKey.ADDRESS)) {\n-        addressReq = (Map<String, Object>) request.get(JsonKey.ADDRESS);\n-        request.remove(JsonKey.ADDRESS);\n+\n+      String existingExternalId = (String) dbOrgDetails.get(JsonKey.EXTERNAL_ID);\n+      validateOrgLocation(request, actorMessage.getRequestContext());\n+      if (request.containsKey(JsonKey.CHANNEL)\n+          && !validateChannelUniqueness(\n+              (String) request.get(JsonKey.CHANNEL),\n+              (String) request.get(JsonKey.ORGANISATION_ID),\n+              actorMessage.getRequestContext())) {\n+        logger.info(actorMessage.getRequestContext(), \"Channel validation failed\");\n+        ProjectCommonException.throwClientErrorException(ResponseCode.channelUniquenessInvalid);\n       }\n-      // removing default from request, not allowing user to create default org.\n-      request.remove(JsonKey.IS_DEFAULT);\n       // allow lower case values for source and externalId to the database\n       if (request.get(JsonKey.PROVIDER) != null) {\n         request.put(JsonKey.PROVIDER, ((String) request.get(JsonKey.PROVIDER)).toLowerCase());\n       }\n+\n       String passedExternalId = (String) request.get(JsonKey.EXTERNAL_ID);\n       if (StringUtils.isNotBlank(passedExternalId)) {\n         passedExternalId = passedExternalId.toLowerCase();\n         String channel = (String) request.get(JsonKey.CHANNEL);\n+        if (StringUtils.isBlank(channel)) {\n+          channel = (String) dbOrgDetails.get(JsonKey.CHANNEL);\n+        }\n         if (!validateChannelExternalIdUniqueness(\n             channel,\n             passedExternalId,\n@@ -569,6 +476,7 @@ private void updateOrgData(Request actorMessage) {\n       Map<String, Object> updateOrgDao = new HashMap<>();\n       updateOrgDao.putAll(request);\n       updateOrgDao.remove(JsonKey.ORGANISATION_ID);\n+      updateOrgDao.remove(JsonKey.ROOT_ORG_ID);\n       updateOrgDao.remove(JsonKey.IS_APPROVED);\n       updateOrgDao.remove(JsonKey.APPROVED_BY);\n       updateOrgDao.remove(JsonKey.APPROVED_DATE);\n@@ -582,29 +490,34 @@ private void updateOrgData(Request actorMessage) {\n       }\n \n       String updatedBy = (String) actorMessage.getRequest().get(JsonKey.REQUESTED_BY);\n-\n-      boolean isAddressUpdated = false;\n-      // update address if present in request\n-      if (null != addressReq && addressReq.size() == 1) {\n-        if (orgDao.get(JsonKey.ADDRESS_ID) != null) {\n-          String addressId = (String) orgDao.get(JsonKey.ADDRESS_ID);\n-          addressReq.put(JsonKey.ID, addressId);\n-          isAddressUpdated = true;\n-        }\n-        // add new address record\n-        else {\n-          String addressId = ProjectUtil.getUniqueIdFromTimestamp(actorMessage.getEnv());\n-          addressReq.put(JsonKey.ID, addressId);\n-          orgDao.put(JsonKey.ADDRESS_ID, addressId);\n-        }\n-        if (!(StringUtils.isBlank(updatedBy))) {\n-          addressReq.put(JsonKey.UPDATED_BY, updatedBy);\n+      Map<String, Object> addressReq = null;\n+      if (null != request.get(JsonKey.ADDRESS)) {\n+        addressReq = (Map<String, Object>) request.get(JsonKey.ADDRESS);\n+        request.remove(JsonKey.ADDRESS);\n+        boolean isAddressUpdated = false;\n+        // update address if present in request\n+        if (null != addressReq && addressReq.size() == 1) {\n+          if (dbOrgDetails.get(JsonKey.ADDRESS_ID) != null) {\n+            String addressId = (String) dbOrgDetails.get(JsonKey.ADDRESS_ID);\n+            addressReq.put(JsonKey.ID, addressId);\n+            isAddressUpdated = true;\n+          }\n+          // add new address record\n+          else {\n+            String addressId = ProjectUtil.getUniqueIdFromTimestamp(actorMessage.getEnv());\n+            addressReq.put(JsonKey.ID, addressId);\n+            dbOrgDetails.put(JsonKey.ADDRESS_ID, addressId);\n+          }\n+          if (!(StringUtils.isBlank(updatedBy))) {\n+            addressReq.put(JsonKey.UPDATED_BY, updatedBy);\n+          }\n+          upsertAddress(addressReq);\n+          telemetryGenerationForOrgAddress(\n+              addressReq, dbOrgDetails, isAddressUpdated, actorMessage.getContext());\n         }\n-        upsertAddress(addressReq);\n-        telemetryGenerationForOrgAddress(\n-            addressReq, orgDao, isAddressUpdated, actorMessage.getContext());\n       }\n-      if (!StringUtils.isBlank(((String) request.get(JsonKey.HASHTAGID)))) {\n+\n+      if (StringUtils.isNotBlank(((String) request.get(JsonKey.HASHTAGID)))) {\n         request.put(\n             JsonKey.HASHTAGID,\n             validateHashTagId(\n@@ -617,40 +530,49 @@ private void updateOrgData(Request actorMessage) {\n         updateOrgDao.put(JsonKey.UPDATED_BY, updatedBy);\n       }\n       updateOrgDao.put(JsonKey.UPDATED_DATE, ProjectUtil.getFormattedDate());\n-      updateOrgDao.put(JsonKey.ID, orgDao.get(JsonKey.ID));\n+      updateOrgDao.put(JsonKey.ID, dbOrgDetails.get(JsonKey.ID));\n \n       // if channel is available then make slug for channel.\n       // remove the slug key if coming from user input\n       updateOrgDao.remove(JsonKey.SLUG);\n-      if (updateOrgDao.containsKey(JsonKey.CHANNEL)) {\n-\n-        String slug = Slug.makeSlug((String) updateOrgDao.getOrDefault(JsonKey.CHANNEL, \"\"), true);\n-        if (orgDao.containsKey(JsonKey.IS_ROOT_ORG) && (boolean) orgDao.get(JsonKey.IS_ROOT_ORG)) {\n-          String rootOrgId = getRootOrgIdFromSlug(slug, actorMessage.getRequestContext());\n-          if (StringUtils.isBlank(rootOrgId)\n-              || (!StringUtils.isBlank(rootOrgId)\n-                  && rootOrgId.equalsIgnoreCase((String) orgDao.get(JsonKey.ID)))) {\n-            updateOrgDao.put(JsonKey.SLUG, slug);\n+      if (StringUtils.isNotBlank((String) updateOrgDao.get(JsonKey.CHANNEL))) {\n+        String reqChannel = (String) updateOrgDao.get(JsonKey.CHANNEL);\n+        String dbChannel = (String) dbOrgDetails.get(JsonKey.CHANNEL);\n+        if (StringUtils.isNotBlank(dbChannel)\n+            && StringUtils.isNotBlank(reqChannel)\n+            && !dbChannel.equalsIgnoreCase(reqChannel)) {\n+          String slug =\n+              Slug.makeSlug((String) updateOrgDao.getOrDefault(JsonKey.CHANNEL, \"\"), true);\n+          if (dbOrgDetails.containsKey(JsonKey.IS_TENANT)\n+              && (boolean) dbOrgDetails.get(JsonKey.IS_TENANT)) {\n+            String orgIdBySlug = getOrgIdFromSlug(slug, actorMessage.getRequestContext());\n+            if (StringUtils.isBlank(orgIdBySlug)\n+                || (StringUtils.isNotBlank(orgIdBySlug)\n+                    && orgIdBySlug.equalsIgnoreCase((String) dbOrgDetails.get(JsonKey.ID)))) {\n+              updateOrgDao.put(JsonKey.SLUG, slug);\n+            } else {\n+              sender()\n+                  .tell(ProjectUtil.createClientException(ResponseCode.slugIsNotUnique), self());\n+              return;\n+            }\n           } else {\n-            sender().tell(ProjectUtil.createClientException(ResponseCode.slugIsNotUnique), self());\n-            return;\n+            updateOrgDao.put(JsonKey.SLUG, slug);\n+            updateOrgDao.put(JsonKey.IS_SSO_ROOTORG_ENABLED, false);\n           }\n-        } else {\n-          updateOrgDao.put(JsonKey.SLUG, slug);\n-          updateOrgDao.put(JsonKey.IS_SSO_ROOTORG_ENABLED, false);\n         }\n       }\n \n-      if (null != orgDao.get(JsonKey.IS_ROOT_ORG) && (boolean) orgDao.get(JsonKey.IS_ROOT_ORG)) {\n-        String channel = (String) orgDao.get(JsonKey.CHANNEL);\n+      if (null != dbOrgDetails.get(JsonKey.IS_TENANT)\n+          && (boolean) dbOrgDetails.get(JsonKey.IS_TENANT)) {\n+        String channel = (String) dbOrgDetails.get(JsonKey.CHANNEL);\n         String updateOrgDaoChannel = (String) updateOrgDao.get(JsonKey.CHANNEL);\n         String license = (String) request.get(JsonKey.LICENSE);\n         if (null != updateOrgDaoChannel && null != channel && !(updateOrgDaoChannel.equals(channel))\n             || StringUtils.isNotBlank(license)) {\n           Map<String, Object> tempMap = new HashMap<>();\n           tempMap.put(JsonKey.CHANNEL, updateOrgDaoChannel);\n-          tempMap.put(JsonKey.HASHTAGID, orgDao.get(JsonKey.HASHTAGID));\n-          tempMap.put(JsonKey.DESCRIPTION, orgDao.get(JsonKey.DESCRIPTION));\n+          tempMap.put(JsonKey.HASHTAGID, dbOrgDetails.get(JsonKey.HASHTAGID));\n+          tempMap.put(JsonKey.DESCRIPTION, dbOrgDetails.get(JsonKey.DESCRIPTION));\n           tempMap.put(JsonKey.LICENSE, license);\n           boolean bool = Util.updateChannel(tempMap, actorMessage.getRequestContext());\n           if (!bool) {\n@@ -669,7 +591,7 @@ private void updateOrgData(Request actorMessage) {\n               orgDbInfo.getTableName(),\n               updateOrgDao,\n               actorMessage.getRequestContext());\n-      response.getResult().put(JsonKey.ORGANISATION_ID, orgDao.get(JsonKey.ID));\n+      response.getResult().put(JsonKey.ORGANISATION_ID, dbOrgDetails.get(JsonKey.ID));\n \n       if (StringUtils.isNotBlank(passedExternalId)) {\n         String channel = (String) request.get(JsonKey.CHANNEL);\n@@ -692,14 +614,31 @@ private void updateOrgData(Request actorMessage) {\n         updateOrgDao.put(JsonKey.ADDRESS, addressReq);\n       }\n \n+      String orgLocation = (String) updateOrgDao.get(JsonKey.ORG_LOCATION);\n+      try {\n+        if (updateOrgDao.containsKey(JsonKey.ORG_TYPE)\n+            && null != updateOrgDao.get(JsonKey.ORG_TYPE)) {\n+          updateOrgDao.put(\n+              JsonKey.ORG_TYPE,\n+              OrgTypeEnum.getTypeByValue((Integer) updateOrgDao.get(JsonKey.ORG_TYPE)));\n+        }\n+        if (StringUtils.isNotBlank(orgLocation)) {\n+          updateOrgDao.put(JsonKey.ORG_LOCATION, mapper.readValue(orgLocation, List.class));\n+        }\n+      } catch (Exception e) {\n+        logger.info(\n+            actorMessage.getRequestContext(),\n+            \"Exception occurred while converting orgLocation to List<Map<String,String>>.\");\n+      }\n+\n       Request orgRequest = new Request();\n       orgRequest.setRequestContext(actorMessage.getRequestContext());\n       orgRequest.getRequest().put(JsonKey.ORGANISATION, updateOrgDao);\n       orgRequest.setOperation(ActorOperations.UPDATE_ORG_INFO_ELASTIC.getValue());\n       tellToAnother(orgRequest);\n       targetObject =\n           TelemetryUtil.generateTargetObject(\n-              (String) orgDao.get(JsonKey.ID), JsonKey.ORGANISATION, JsonKey.UPDATE, null);\n+              (String) dbOrgDetails.get(JsonKey.ID), JsonKey.ORGANISATION, JsonKey.UPDATE, null);\n       TelemetryUtil.telemetryProcessingCall(\n           updateOrgDao, targetObject, correlatedObject, actorMessage.getContext());\n     } catch (ProjectCommonException e) {\n@@ -727,309 +666,11 @@ private void telemetryGenerationForOrgAddress(\n     TelemetryUtil.telemetryProcessingCall(addressReq, targetObject, correlatedObject, context);\n   }\n \n-  /** Method to add member to the organisation */\n-  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-  private void addMemberOrganisation(Request actorMessage) {\n-    // object of telemetry event...\n-    Map<String, Object> targetObject = null;\n-    List<Map<String, Object>> correlatedObject = new ArrayList<>();\n-\n-    Response response = null;\n-    actorMessage.toLower();\n-    Util.DbInfo userOrgDbInfo = Util.dbInfoMap.get(JsonKey.USER_ORG_DB);\n-    Util.DbInfo organisationDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n-    Map<String, Object> usrOrgData = actorMessage.getRequest();\n-    if (!(validateOrgRequestForMembers(usrOrgData, actorMessage.getRequestContext()))) {\n-      logger.info(actorMessage.getRequestContext(), \"REQUESTED DATA IS NOT VALID\");\n-      return;\n-    }\n-    if (!(validateUsrRequest(usrOrgData, actorMessage.getRequestContext()))) {\n-      logger.info(actorMessage.getRequestContext(), \"REQUESTED DATA IS NOT VALID\");\n-      return;\n-    }\n-    usrOrgData.put(JsonKey.IS_DELETED, false);\n-\n-    String updatedBy = null;\n-    String orgId = null;\n-    String userId = null;\n-    List<String> roles = new ArrayList<>();\n-    orgId = (String) usrOrgData.get(JsonKey.ORGANISATION_ID);\n-    userId = (String) usrOrgData.get(JsonKey.USER_ID);\n-    if (isNotNull(usrOrgData.get(JsonKey.REQUESTED_BY))) {\n-      updatedBy = (String) usrOrgData.get(JsonKey.REQUESTED_BY);\n-      usrOrgData.remove(JsonKey.REQUESTED_BY);\n-    }\n-    if (isNotNull(usrOrgData.get(JsonKey.ROLES))) {\n-      roles.addAll((List<String>) usrOrgData.get(JsonKey.ROLES));\n-      if (!((List<String>) usrOrgData.get(JsonKey.ROLES)).isEmpty()) {\n-        String msg = Util.validateRoles((List<String>) usrOrgData.get(JsonKey.ROLES));\n-        if (!msg.equalsIgnoreCase(JsonKey.SUCCESS)) {\n-          throw new ProjectCommonException(\n-              ResponseCode.invalidRole.getErrorCode(),\n-              ResponseCode.invalidRole.getErrorMessage(),\n-              ResponseCode.CLIENT_ERROR.getResponseCode());\n-        }\n-      }\n-    }\n-\n-    usrOrgData.remove(JsonKey.ROLE);\n-    if (isNull(roles) && roles.isEmpty()) {\n-      // create exception here invalid request data and tell the exception , then\n-      // return\n-      ProjectCommonException exception =\n-          new ProjectCommonException(\n-              ResponseCode.invalidRequestData.getErrorCode(),\n-              ResponseCode.invalidRequestData.getErrorMessage(),\n-              ResponseCode.CLIENT_ERROR.getResponseCode());\n-      sender().tell(exception, self());\n-      return;\n-    }\n-    if (!roles.isEmpty()) usrOrgData.put(JsonKey.ROLES, roles);\n-    // check user already exist for the org or not\n-    Map<String, Object> requestData = new HashMap<>();\n-    requestData.put(JsonKey.USER_ID, userId);\n-    requestData.put(JsonKey.ORGANISATION_ID, orgId);\n-    Response result =\n-        cassandraOperation.getRecordsByCompositeKey(\n-            userOrgDbInfo.getKeySpace(),\n-            userOrgDbInfo.getTableName(),\n-            requestData,\n-            actorMessage.getRequestContext());\n-\n-    List list = (List) result.get(JsonKey.RESPONSE);\n-    Map<String, Object> tempOrgap = null;\n-    boolean isNewRecord = false;\n-    if (!list.isEmpty()) {\n-      tempOrgap = (Map<String, Object>) list.get(0);\n-      if (null != tempOrgap && !((boolean) tempOrgap.get(JsonKey.IS_DELETED))) {\n-        // user already enrolled for the organisation\n-        response = new Response();\n-        response.getResult().put(JsonKey.RESPONSE, ResponseMessage.Message.EXISTING_ORG_MEMBER);\n-        sender().tell(response, self());\n-        return;\n-      } else if (null != tempOrgap && ((boolean) tempOrgap.get(JsonKey.IS_DELETED))) {\n-        usrOrgData.put(JsonKey.ID, tempOrgap.get(JsonKey.ID));\n-      }\n-    } else {\n-      usrOrgData.put(JsonKey.ID, ProjectUtil.getUniqueIdFromTimestamp(actorMessage.getEnv()));\n-      isNewRecord = true;\n-    }\n-    if (!(StringUtils.isBlank(updatedBy))) {\n-      String updatedByName = Util.getUserNamebyUserId(updatedBy, actorMessage.getRequestContext());\n-      usrOrgData.put(JsonKey.ADDED_BY, updatedBy);\n-      usrOrgData.put(JsonKey.APPROVED_BY, updatedBy);\n-      if (!StringUtils.isBlank(updatedByName)) {\n-        usrOrgData.put(JsonKey.ADDED_BY_NAME, updatedByName);\n-      }\n-    }\n-    usrOrgData.put(JsonKey.ORG_JOIN_DATE, ProjectUtil.getFormattedDate());\n-    usrOrgData.put(JsonKey.APPROOVE_DATE, ProjectUtil.getFormattedDate());\n-    usrOrgData.put(JsonKey.IS_REJECTED, false);\n-    usrOrgData.put(JsonKey.IS_APPROVED, true);\n-    usrOrgData.put(JsonKey.IS_DELETED, false);\n-    if (isNewRecord) {\n-      response =\n-          cassandraOperation.insertRecord(\n-              userOrgDbInfo.getKeySpace(),\n-              userOrgDbInfo.getTableName(),\n-              usrOrgData,\n-              actorMessage.getRequestContext());\n-    } else {\n-      response =\n-          cassandraOperation.updateRecord(\n-              userOrgDbInfo.getKeySpace(),\n-              userOrgDbInfo.getTableName(),\n-              usrOrgData,\n-              actorMessage.getRequestContext());\n-    }\n-    Response orgResult =\n-        cassandraOperation.getRecordById(\n-            organisationDbInfo.getKeySpace(),\n-            organisationDbInfo.getTableName(),\n-            orgId,\n-            actorMessage.getRequestContext());\n-\n-    List orgList = (List) orgResult.get(JsonKey.RESPONSE);\n-    Map<String, Object> newOrgMap = new HashMap<>();\n-    if (!orgList.isEmpty()) {\n-      Integer count = 0;\n-      Map<String, Object> orgMap = (Map<String, Object>) orgList.get(0);\n-      if (isNotNull(orgMap.get(JsonKey.NO_OF_MEMBERS))) {\n-        count = (Integer) orgMap.get(JsonKey.NO_OF_MEMBERS);\n-      }\n-      newOrgMap.put(JsonKey.ID, orgId);\n-      newOrgMap.put(JsonKey.NO_OF_MEMBERS, count + 1);\n-      cassandraOperation.updateRecord(\n-          organisationDbInfo.getKeySpace(),\n-          organisationDbInfo.getTableName(),\n-          newOrgMap,\n-          actorMessage.getRequestContext());\n-    }\n-\n-    sender().tell(response, self());\n-\n-    // update ES with latest data through background job manager\n-    if (((String) response.get(JsonKey.RESPONSE)).equalsIgnoreCase(JsonKey.SUCCESS)) {\n-      logger.info(actorMessage.getRequestContext(), \"method call going to satrt for ES--.....\");\n-      Request request = new Request();\n-      request.setRequestContext(actorMessage.getRequestContext());\n-      request.setOperation(ActorOperations.UPDATE_USER_ORG_ES.getValue());\n-      request.getRequest().put(JsonKey.USER, usrOrgData);\n-      logger.info(actorMessage.getRequestContext(), \"making a call to save user data to ES\");\n-      try {\n-        tellToAnother(request);\n-      } catch (Exception ex) {\n-        logger.error(\n-            actorMessage.getRequestContext(),\n-            \"Exception Occurred during saving user to Es while addMemberOrganisation : \",\n-            ex);\n-      }\n-    } else {\n-      logger.info(actorMessage.getRequestContext(), \"no call for ES to save user\");\n-    }\n-\n-    targetObject = TelemetryUtil.generateTargetObject(userId, JsonKey.USER, JsonKey.CREATE, null);\n-    TelemetryUtil.generateCorrelatedObject(userId, JsonKey.USER, null, correlatedObject);\n-    TelemetryUtil.generateCorrelatedObject(orgId, JsonKey.ORGANISATION, null, correlatedObject);\n-    Map<String, Object> telemetryAction = new HashMap<>();\n-    telemetryAction.put(\"orgMembershipAdded\", \"orgMembershipAdded\");\n-    TelemetryUtil.telemetryProcessingCall(\n-        telemetryAction, targetObject, correlatedObject, actorMessage.getContext());\n-  }\n-\n-  /** Method to remove member from the organisation */\n-  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-  private void removeMemberOrganisation(Request actorMessage) {\n-    Response response = null;\n-    // object of telemetry event...\n-    List<Map<String, Object>> correlatedObject = new ArrayList<>();\n-    actorMessage.toLower();\n-    Util.DbInfo userOrgDbInfo = Util.dbInfoMap.get(JsonKey.USER_ORG_DB);\n-    Util.DbInfo organisationDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n-    Map<String, Object> usrOrgData = actorMessage.getRequest();\n-    if (!(validateUsrRequest(usrOrgData, actorMessage.getRequestContext()))) {\n-      logger.info(actorMessage.getRequestContext(), \"REQUESTED DATA IS NOT VALID\");\n-      return;\n-    }\n-    if (!(validateOrgRequestForMembers(usrOrgData, actorMessage.getRequestContext()))) {\n-      return;\n-    }\n-\n-    String updatedBy = null;\n-    String orgId = null;\n-    String userId = null;\n-\n-    orgId = (String) usrOrgData.get(JsonKey.ORGANISATION_ID);\n-    userId = (String) usrOrgData.get(JsonKey.USER_ID);\n-\n-    if (StringUtils.isNotBlank((String) usrOrgData.get(JsonKey.REQUESTED_BY))) {\n-      updatedBy = (String) usrOrgData.get(JsonKey.REQUESTED_BY);\n-    }\n-    // check user already exist for the org or not\n-    Map<String, Object> requestData = new LinkedHashMap<>(2);\n-    requestData.put(JsonKey.USER_ID, userId);\n-    requestData.put(JsonKey.ORGANISATION_ID, orgId);\n-    Response result =\n-        cassandraOperation.getRecordsByCompositeKey(\n-            userOrgDbInfo.getKeySpace(),\n-            userOrgDbInfo.getTableName(),\n-            requestData,\n-            actorMessage.getRequestContext());\n-\n-    List list = (List) result.get(JsonKey.RESPONSE);\n-    if (list.isEmpty()) {\n-      ProjectCommonException exception =\n-          new ProjectCommonException(\n-              ResponseCode.invalidRequestData.getErrorCode(),\n-              ResponseCode.invalidRequestData.getErrorMessage(),\n-              ResponseCode.CLIENT_ERROR.getResponseCode());\n-      sender().tell(exception, self());\n-      return;\n-    } else {\n-      Map<String, Object> dataMap = (Map<String, Object>) list.get(0);\n-      if (null != dataMap.get(JsonKey.IS_DELETED) && (boolean) dataMap.get(JsonKey.IS_DELETED)) {\n-        ProjectCommonException exception =\n-            new ProjectCommonException(\n-                ResponseCode.userInactiveForThisOrg.getErrorCode(),\n-                ResponseCode.userInactiveForThisOrg.getErrorMessage(),\n-                ResponseCode.CLIENT_ERROR.getResponseCode());\n-        sender().tell(exception, self());\n-        return;\n-      }\n-      if (!(StringUtils.isBlank(updatedBy))) {\n-        dataMap.put(JsonKey.UPDATED_BY, updatedBy);\n-      }\n-      dataMap.put(JsonKey.ORG_LEFT_DATE, ProjectUtil.getFormattedDate());\n-      dataMap.put(JsonKey.UPDATED_DATE, ProjectUtil.getFormattedDate());\n-      dataMap.put(JsonKey.IS_DELETED, true);\n-      response =\n-          cassandraOperation.updateRecord(\n-              userOrgDbInfo.getKeySpace(),\n-              userOrgDbInfo.getTableName(),\n-              dataMap,\n-              actorMessage.getRequestContext());\n-      Map<String, Object> newOrgMap = new HashMap<>();\n-\n-      Response orgresult =\n-          cassandraOperation.getRecordById(\n-              organisationDbInfo.getKeySpace(),\n-              organisationDbInfo.getTableName(),\n-              orgId,\n-              actorMessage.getRequestContext());\n-      List orgList = (List) orgresult.get(JsonKey.RESPONSE);\n-      if (!orgList.isEmpty()) {\n-        Map<String, Object> orgMap = (Map<String, Object>) orgList.get(0);\n-        if (isNotNull(orgMap.get(JsonKey.NO_OF_MEMBERS))) {\n-          Integer count = (Integer) orgMap.get(JsonKey.NO_OF_MEMBERS);\n-          newOrgMap.put(JsonKey.ID, orgId);\n-          newOrgMap.put(JsonKey.NO_OF_MEMBERS, count == 0 ? 0 : (count - 1));\n-          cassandraOperation.updateRecord(\n-              organisationDbInfo.getKeySpace(),\n-              organisationDbInfo.getTableName(),\n-              newOrgMap,\n-              actorMessage.getRequestContext());\n-        }\n-      }\n-      sender().tell(response, self());\n-\n-      // update ES with latest data through background job manager\n-      if (((String) response.get(JsonKey.RESPONSE)).equalsIgnoreCase(JsonKey.SUCCESS)) {\n-        logger.info(actorMessage.getRequestContext(), \"method call going to satrt for ES--.....\");\n-        Request request = new Request();\n-        request.setRequestContext(actorMessage.getRequestContext());\n-        request.setOperation(ActorOperations.REMOVE_USER_ORG_ES.getValue());\n-        request.getRequest().put(JsonKey.USER, dataMap);\n-        logger.info(actorMessage.getRequestContext(), \"making a call to save user data to ES\");\n-        try {\n-          tellToAnother(request);\n-        } catch (Exception ex) {\n-          logger.error(\n-              actorMessage.getRequestContext(),\n-              \"Exception Occurred during saving user to Es while removing memeber from Organisation : \",\n-              ex);\n-        }\n-      } else {\n-        logger.info(actorMessage.getRequestContext(), \"no call for ES to save user\");\n-      }\n-      Map<String, Object> targetObject =\n-          TelemetryUtil.generateTargetObject(userId, JsonKey.USER, JsonKey.CREATE, null);\n-      TelemetryUtil.generateCorrelatedObject(userId, JsonKey.USER, null, correlatedObject);\n-      TelemetryUtil.generateCorrelatedObject(orgId, JsonKey.ORGANISATION, null, correlatedObject);\n-      Map<String, Object> telemetryAction = new HashMap<>();\n-      telemetryAction.put(\"orgMembershipRemoved\", \"orgMembershipRemoved\");\n-      TelemetryUtil.telemetryProcessingCall(\n-          telemetryAction, targetObject, correlatedObject, actorMessage.getContext());\n-    }\n-  }\n-\n   /** Provides the details of the Organisation */\n   private void getOrgDetails(Request actorMessage) {\n     actorMessage.toLower();\n     Map<String, Object> request = actorMessage.getRequest();\n-    if (!(validateOrgRequest(request, actorMessage.getRequestContext()))) {\n-      logger.info(actorMessage.getRequestContext(), \"REQUESTED DATA IS NOT VALID\");\n-      return;\n-    }\n+    validateOrgRequest(request, actorMessage.getRequestContext());\n     String orgId = (String) request.get(JsonKey.ORGANISATION_ID);\n     Future<Map<String, Object>> resultF =\n         esService.getDataByIdentifier(\n@@ -1056,7 +697,6 @@ private void upsertAddress(Map<String, Object> addressReq) {\n         orgDbInfo.getKeySpace(), orgDbInfo.getTableName(), addressReq, null);\n   }\n \n-  // Check whether channel value is present\n   public void channelMandatoryValidation(Map<String, Object> request) {\n     if (StringUtils.isBlank((String) request.get(JsonKey.CHANNEL))) {\n       throw new ProjectCommonException(\n@@ -1067,227 +707,44 @@ public void channelMandatoryValidation(Map<String, Object> request) {\n     }\n   }\n \n-  /**\n-   * Validates whether the organisation or source with externalId exists in DB\n-   *\n-   * @param req Request from the user\n-   * @return boolean\n-   */\n-  @SuppressWarnings(\"unchecked\")\n-  private boolean validateOrgRequest(Map<String, Object> req, RequestContext context) {\n+  private void validateOrgRequest(Map<String, Object> req, RequestContext context) {\n     String orgId = (String) req.get(JsonKey.ORGANISATION_ID);\n     String provider = (String) req.get(JsonKey.PROVIDER);\n     String externalId = (String) req.get(JsonKey.EXTERNAL_ID);\n     if (StringUtils.isBlank(orgId)) {\n       if (StringUtils.isBlank(provider) || StringUtils.isBlank(externalId)) {\n-        ProjectCommonException exception =\n-            new ProjectCommonException(\n-                ResponseCode.invalidRequestData.getErrorCode(),\n-                ResponseCode.invalidRequestData.getErrorMessage(),\n-                ResponseCode.CLIENT_ERROR.getResponseCode());\n-        sender().tell(exception, self());\n-        return false;\n+        throw new ProjectCommonException(\n+            ResponseCode.invalidRequestData.getErrorCode(),\n+            ResponseCode.invalidRequestData.getErrorMessage(),\n+            ResponseCode.CLIENT_ERROR.getResponseCode());\n       } else {\n         // fetch orgid from database on basis of source and external id and put orgid\n         // into request .\n-        Map<String, Object> filters = new HashMap<>();\n-        filters.put(JsonKey.PROVIDER, req.get(JsonKey.PROVIDER));\n-        filters.put(JsonKey.EXTERNAL_ID, req.get(JsonKey.EXTERNAL_ID));\n-        SearchDTO searchDto = new SearchDTO();\n-        searchDto.getAdditionalProperties().put(JsonKey.FILTERS, filters);\n-        Future<Map<String, Object>> resultF =\n-            esService.search(searchDto, ProjectUtil.EsType.organisation.getTypeName(), context);\n-        Map<String, Object> result =\n-            (Map<String, Object>) ElasticSearchHelper.getResponseFromFuture(resultF);\n-        List<Map<String, Object>> orgList = (List<Map<String, Object>>) result.get(JsonKey.CONTENT);\n-        if (orgList.isEmpty()) {\n-          ProjectCommonException exception =\n-              new ProjectCommonException(\n-                  ResponseCode.invalidRequestData.getErrorCode(),\n-                  ResponseCode.invalidRequestData.getErrorMessage(),\n-                  ResponseCode.CLIENT_ERROR.getResponseCode());\n-          sender().tell(exception, self());\n-          return false;\n-        }\n-        req.put(JsonKey.ORGANISATION_ID, orgList.get(0).get(JsonKey.ID));\n-      }\n-    }\n-    return true;\n-  }\n-\n-  /**\n-   * Validates whether the organisation or source with externalId exists in DB\n-   *\n-   * @param req\n-   * @return boolean\n-   */\n-  @SuppressWarnings(\"unchecked\")\n-  private boolean validateOrgRequestForMembers(Map<String, Object> req, RequestContext context) {\n-    String orgId = (String) req.get(JsonKey.ORGANISATION_ID);\n-    String externalId = (String) req.get(JsonKey.EXTERNAL_ID);\n-    String provider = (String) req.get(JsonKey.PROVIDER);\n-    if (StringUtils.isBlank(orgId)\n-        && (StringUtils.isBlank(provider) || StringUtils.isBlank(externalId))) {\n-      ProjectCommonException exception =\n-          new ProjectCommonException(\n-              ResponseCode.sourceAndExternalIdValidationError.getErrorCode(),\n-              ResponseCode.sourceAndExternalIdValidationError.getErrorMessage(),\n-              ResponseCode.CLIENT_ERROR.getResponseCode());\n-      sender().tell(exception, self());\n-      return false;\n-    }\n-    // fetch orgid from database on basis of source and external id and put orgid\n-    // into request .\n-\n-    Map<String, Object> requestDbMap = new HashMap<>();\n-    if (StringUtils.isNotBlank((String) req.get(JsonKey.ORGANISATION_ID))) {\n-      requestDbMap.put(JsonKey.ID, req.get(JsonKey.ORGANISATION_ID));\n-    } else {\n-      requestDbMap.put(JsonKey.PROVIDER, StringUtils.lowerCase((String) req.get(JsonKey.PROVIDER)));\n-      requestDbMap.put(\n-          JsonKey.EXTERNAL_ID, StringUtils.lowerCase((String) req.get(JsonKey.EXTERNAL_ID)));\n-    }\n-    SearchDTO searchDTO = new SearchDTO();\n-    searchDTO.getAdditionalProperties().put(JsonKey.FILTERS, requestDbMap);\n-    Future<Map<String, Object>> esResponseF =\n-        esService.search(searchDTO, ProjectUtil.EsType.organisation.getTypeName(), context);\n-    Map<String, Object> esResponse =\n-        (Map<String, Object>) ElasticSearchHelper.getResponseFromFuture(esResponseF);\n-    List<Map<String, Object>> list = (List<Map<String, Object>>) esResponse.get(JsonKey.CONTENT);\n-    if (CollectionUtils.isEmpty(list)) {\n-      ProjectCommonException exception =\n-          new ProjectCommonException(\n-              ResponseCode.invalidOrgData.getErrorCode(),\n-              ResponseCode.invalidOrgData.getErrorMessage(),\n-              ResponseCode.CLIENT_ERROR.getResponseCode());\n-      sender().tell(exception, self());\n-      return false;\n-    }\n-    req.put(JsonKey.ORGANISATION_ID, list.get(0).get(JsonKey.ID));\n-    req.put(JsonKey.HASHTAGID, list.get(0).get(JsonKey.HASHTAGID));\n-    return true;\n-  }\n-\n-  /**\n-   * Validates where the userId or provider with userName is in database and is valid\n-   *\n-   * @param req\n-   * @return boolean\n-   */\n-  @SuppressWarnings(\"unchecked\")\n-  private boolean validateUsrRequest(Map<String, Object> req, RequestContext context) {\n-    Map<String, Object> data = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-    data.putAll(req);\n-    String userId = (String) data.get(JsonKey.USER_ID);\n-    String userExternalId = (String) data.get(JsonKey.USER_EXTERNAL_ID);\n-    String userName = (String) data.get(JsonKey.USERNAME);\n-    if (StringUtils.isBlank(userId)\n-        && StringUtils.isBlank(userExternalId)\n-        && StringUtils.isBlank(userName)) {\n-      ProjectCommonException exception =\n-          new ProjectCommonException(\n-              ResponseCode.usrValidationError.getErrorCode(),\n-              ResponseCode.usrValidationError.getErrorMessage(),\n+        OrgExternalService orgExtService = new OrgExternalService();\n+        String organisationId =\n+            orgExtService.getOrgIdFromOrgExternalIdAndProvider(\n+                (String) req.get(JsonKey.EXTERNAL_ID), (String) req.get(JsonKey.PROVIDER), context);\n+        if (StringUtils.isEmpty(organisationId)) {\n+          throw new ProjectCommonException(\n+              ResponseCode.invalidRequestData.getErrorCode(),\n+              ResponseCode.invalidRequestData.getErrorMessage(),\n               ResponseCode.CLIENT_ERROR.getResponseCode());\n-      sender().tell(exception, self());\n-      return false;\n-    }\n-    Util.DbInfo usrDbInfo = Util.dbInfoMap.get(JsonKey.USER_DB);\n-    Map<String, Object> requestDbMap = new HashMap<>();\n-    if (StringUtils.isNotBlank((String) data.get(JsonKey.USER_ID))) {\n-      requestDbMap.put(JsonKey.ID, data.get(JsonKey.USER_ID));\n-      req.put(JsonKey.USER_ID, userId);\n-      Response response =\n-          cassandraOperation.getRecordById(\n-              usrDbInfo.getKeySpace(),\n-              usrDbInfo.getTableName(),\n-              (String) data.get(JsonKey.USER_ID),\n-              context);\n-      List<Map<String, Object>> list = (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n-      if (list.isEmpty()) {\n-        ProjectCommonException exception =\n-            new ProjectCommonException(\n-                ResponseCode.invalidUsrData.getErrorCode(),\n-                ResponseCode.invalidUsrData.getErrorMessage(),\n-                ResponseCode.CLIENT_ERROR.getResponseCode());\n-        sender().tell(exception, self());\n-        return false;\n-      }\n-    } else {\n-      userId = getUserIdByUserLookUp(JsonKey.USERNAME.toLowerCase(), userName, context);\n-      if (StringUtils.isBlank(userId)) {\n-        ProjectCommonException exception =\n-            new ProjectCommonException(\n-                ResponseCode.invalidUsrData.getErrorCode(),\n-                ResponseCode.invalidUsrData.getErrorMessage(),\n-                ResponseCode.CLIENT_ERROR.getResponseCode());\n-        sender().tell(exception, self());\n-        return false;\n+        }\n+        req.put(JsonKey.ORGANISATION_ID, organisationId);\n       }\n-      req.put(JsonKey.USER_ID, userId);\n-    }\n-    return true;\n-  }\n-\n-  private String getUserIdByUserLookUp(String type, String value, RequestContext context) {\n-    try {\n-      value = encryptionService.encryptData(value, context);\n-    } catch (Exception e) {\n-      logger.info(context, \"Exception occurred while encrypting email/phone \" + e);\n-    }\n-    Util.DbInfo userLookUp = Util.dbInfoMap.get(JsonKey.USER_LOOKUP);\n-    Map<String, Object> reqMap = new HashMap<>();\n-    reqMap.put(JsonKey.TYPE, type);\n-    reqMap.put(JsonKey.VALUE, value);\n-    Response response =\n-        cassandraOperation.getRecordsByCompositeKey(\n-            userLookUp.getKeySpace(), userLookUp.getTableName(), reqMap, context);\n-    List<Map<String, Object>> userMapList =\n-        (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n-    if (CollectionUtils.isNotEmpty(userMapList)) {\n-      Map<String, Object> userMap = userMapList.get(0);\n-      return (String) userMap.get(JsonKey.USER_ID);\n-    }\n-    return \"\";\n-  }\n-\n-  private List<Map<String, Object>> getOrg(String channel, RequestContext context) {\n-    logger.info(context, \"OrganisationManagementActor:getOrg: channel = \" + channel);\n-    Map<String, Object> filters = new HashMap<>();\n-    filters.put(JsonKey.CHANNEL, channel);\n-    filters.put(JsonKey.IS_ROOT_ORG, true);\n-    SearchDTO searchDto = new SearchDTO();\n-    searchDto.getAdditionalProperties().put(JsonKey.FILTERS, filters);\n-    Future<Map<String, Object>> resultF =\n-        esService.search(searchDto, ProjectUtil.EsType.organisation.getTypeName(), context);\n-    Map<String, Object> result =\n-        (Map<String, Object>) ElasticSearchHelper.getResponseFromFuture(resultF);\n-    return (List<Map<String, Object>>) result.get(JsonKey.CONTENT);\n-  }\n-\n-  private String getRootOrgIdFromChannel(String channel, RequestContext context) {\n-    logger.info(\n-        context, \"OrganisationManagementActor:getRootOrgIdFromChannel: channel = \" + channel);\n-    if (!StringUtils.isBlank(channel)) {\n-      List<Map<String, Object>> list = getOrg(channel, context);\n-      if (!list.isEmpty()) return (String) list.get(0).getOrDefault(JsonKey.ID, \"\");\n     }\n-\n-    return \"\";\n   }\n \n-  private String getRootOrgIdFromSlug(String slug, RequestContext context) {\n+  private String getOrgIdFromSlug(String slug, RequestContext context) {\n     if (!StringUtils.isBlank(slug)) {\n       Map<String, Object> filters = new HashMap<>();\n       filters.put(JsonKey.SLUG, slug);\n-      filters.put(JsonKey.IS_ROOT_ORG, true);\n+      filters.put(JsonKey.IS_TENANT, true);\n       Map<String, Object> esResult =\n-          elasticSearchComplexSearch(\n-              filters, EsIndex.sunbird.getIndexName(), EsType.organisation.getTypeName(), context);\n-      if (isNotNull(esResult)\n+          elasticSearchComplexSearch(filters, EsType.organisation.getTypeName(), context);\n+      if (MapUtils.isNotEmpty(esResult)\n           && esResult.containsKey(JsonKey.CONTENT)\n-          && isNotNull(esResult.get(JsonKey.CONTENT))\n-          && (!((List) esResult.get(JsonKey.CONTENT)).isEmpty())) {\n+          && (CollectionUtils.isNotEmpty((List) esResult.get(JsonKey.CONTENT)))) {\n         Map<String, Object> esContent =\n             ((List<Map<String, Object>>) esResult.get(JsonKey.CONTENT)).get(0);\n         return (String) esContent.getOrDefault(JsonKey.ID, \"\");\n@@ -1296,25 +753,8 @@ private String getRootOrgIdFromSlug(String slug, RequestContext context) {\n     return \"\";\n   }\n \n-  private boolean isSlugUnique(String slug, RequestContext context) {\n-    if (!StringUtils.isBlank(slug)) {\n-      Map<String, Object> filters = new HashMap<>();\n-      filters.put(JsonKey.SLUG, slug);\n-      filters.put(JsonKey.IS_ROOT_ORG, true);\n-      Map<String, Object> esResult =\n-          elasticSearchComplexSearch(\n-              filters, EsIndex.sunbird.getIndexName(), EsType.organisation.getTypeName(), context);\n-      if (isNotNull(esResult)\n-          && esResult.containsKey(JsonKey.CONTENT)\n-          && isNotNull(esResult.get(JsonKey.CONTENT))) {\n-        return (((List) esResult.get(JsonKey.CONTENT)).isEmpty());\n-      }\n-    }\n-    return false;\n-  }\n-\n   private Map<String, Object> elasticSearchComplexSearch(\n-      Map<String, Object> filters, String index, String type, RequestContext context) {\n+      Map<String, Object> filters, String type, RequestContext context) {\n \n     SearchDTO searchDTO = new SearchDTO();\n     searchDTO.getAdditionalProperties().put(JsonKey.FILTERS, filters);\n@@ -1324,26 +764,30 @@ private boolean isSlugUnique(String slug, RequestContext context) {\n     return esResponse;\n   }\n \n-  /**\n-   * validates if channel is already present in the organisation while Updating\n-   *\n-   * @param channel\n-   * @return boolean\n-   */\n-  @SuppressWarnings(\"unchecked\")\n   private boolean validateChannelUniqueness(String channel, String orgId, RequestContext context) {\n-    if (!StringUtils.isBlank(channel)) {\n+    if (StringUtils.isNotBlank(channel)) {\n       return validateFieldUniqueness(JsonKey.CHANNEL, channel, orgId, context);\n     }\n     return (orgId == null);\n   }\n \n   private boolean validateChannelExternalIdUniqueness(\n       String channel, String externalId, String orgId, RequestContext context) {\n-    Map<String, Object> compositeKeyMap = new HashMap<String, Object>();\n-    compositeKeyMap.put(JsonKey.PROVIDER, StringUtils.lowerCase(channel));\n-    compositeKeyMap.put(JsonKey.EXTERNAL_ID, StringUtils.lowerCase(externalId));\n-    return handleChannelExternalIdUniqueness(compositeKeyMap, orgId, context);\n+    OrgExternalService orgExternalService = new OrgExternalService();\n+    if (StringUtils.isNotBlank(channel) && StringUtils.isNotBlank(externalId)) {\n+      String orgIdFromDb =\n+          orgExternalService.getOrgIdFromOrgExternalIdAndProvider(\n+              StringUtils.lowerCase(externalId), StringUtils.lowerCase(channel), context);\n+      if (StringUtils.isEmpty(orgIdFromDb)) {\n+        return true;\n+      } else {\n+        if (orgId == null) {\n+          return false;\n+        }\n+        return orgIdFromDb.equalsIgnoreCase(orgId);\n+      }\n+    }\n+    return false;\n   }\n \n   private boolean validateFieldUniqueness(\n@@ -1366,52 +810,15 @@ private boolean validateFieldUniqueness(\n         }\n         Map<String, Object> data = list.get(0);\n         String id = (String) data.get(JsonKey.ID);\n-        if (id.equalsIgnoreCase(orgId)) {\n-          return true;\n-        } else {\n-          return false;\n-        }\n+        return id.equalsIgnoreCase(orgId);\n       }\n     }\n     return true;\n   }\n \n-  private boolean handleChannelExternalIdUniqueness(\n-      Map<String, Object> compositeKeyMap, String orgId, RequestContext context) {\n-    if (MapUtils.isNotEmpty(compositeKeyMap)) {\n-      Response result =\n-          cassandraOperation.getRecordsByCompositeKey(\n-              JsonKey.SUNBIRD, JsonKey.ORG_EXT_ID_DB, compositeKeyMap, context);\n-      List<Map<String, Object>> list = (List<Map<String, Object>>) result.get(JsonKey.RESPONSE);\n-      if ((list.isEmpty())) {\n-        return true;\n-      } else {\n-        if (orgId == null) {\n-          return false;\n-        }\n-        Map<String, Object> data = list.get(0);\n-        String id = (String) data.get(JsonKey.ORG_ID);\n-        if (id.equalsIgnoreCase(orgId)) {\n-          return true;\n-        } else {\n-          return false;\n-        }\n-      }\n-    }\n-    return false;\n-  }\n-\n-  /**\n-   * This method will do the channel uniqueness validation\n-   *\n-   * @param req\n-   */\n   private void validateChannel(Map<String, Object> req, RequestContext context) {\n-    // this if will run for suborg creation, it will fetch\n-    // rootOrgId from passed channel value.\n-    if (!req.containsKey(JsonKey.IS_ROOT_ORG) || !(Boolean) req.get(JsonKey.IS_ROOT_ORG)) {\n-      String channel = (String) req.get(JsonKey.CHANNEL);\n-\n+    String channel = (String) req.get(JsonKey.CHANNEL);\n+    if (!req.containsKey(JsonKey.IS_TENANT) || !(Boolean) req.get(JsonKey.IS_TENANT)) {\n       Map<String, Object> rootOrg = getRootOrgFromChannel(channel, context);\n       if (MapUtils.isEmpty(rootOrg)) {\n         logger.info(\n@@ -1421,17 +828,6 @@ private void validateChannel(Map<String, Object> req, RequestContext context) {\n             ResponseCode.invalidChannel.getErrorMessage(),\n             ResponseCode.CLIENT_ERROR.getResponseCode());\n       }\n-      String rootOrgId = (String) rootOrg.get(JsonKey.ID);\n-      if (!StringUtils.isBlank(rootOrgId)) {\n-        req.put(JsonKey.ROOT_ORG_ID, rootOrgId);\n-      } else {\n-        logger.info(\n-            context, \"OrganisationManagementActor:validateChannel: Invalid channel = \" + channel);\n-        throw new ProjectCommonException(\n-            ResponseCode.invalidChannel.getErrorCode(),\n-            ResponseCode.invalidChannel.getErrorMessage(),\n-            ResponseCode.CLIENT_ERROR.getResponseCode());\n-      }\n       Object status = rootOrg.get(JsonKey.STATUS);\n       if (null != status && 1 != (Integer) status) {\n         ProjectCommonException.throwClientErrorException(\n@@ -1457,7 +853,7 @@ private void validateChannel(Map<String, Object> req, RequestContext context) {\n     if (StringUtils.isNotBlank(channel)) {\n       Map<String, Object> filterMap = new HashMap<>();\n       filterMap.put(JsonKey.CHANNEL, channel);\n-      filterMap.put(JsonKey.IS_ROOT_ORG, true);\n+      filterMap.put(JsonKey.IS_TENANT, true);\n       SearchDTO searchDTO = new SearchDTO();\n       searchDTO.getAdditionalProperties().put(JsonKey.FILTERS, filterMap);\n       Future<Map<String, Object>> esResponseF =\n@@ -1473,27 +869,44 @@ private void validateChannel(Map<String, Object> req, RequestContext context) {\n     return new HashMap();\n   }\n \n-  /*\n-   * This method will validate the locationId and locationCode.\n-   */\n-  @SuppressWarnings(\"unchecked\")\n-  private void validateLocationCodeAndIds(Map<String, Object> request) {\n-    List<String> locationIdsList;\n-    if (CollectionUtils.isNotEmpty((List<String>) request.get(JsonKey.LOCATION_IDS))) {\n-      locationIdsList =\n-          validator.getHierarchyLocationIds(\n-              getActorRef(LocationActorOperation.SEARCH_LOCATION.getValue()),\n-              (List<String>) request.get(JsonKey.LOCATION_IDS));\n-      request.put(JsonKey.LOCATION_IDS, locationIdsList);\n-    } else {\n-      if (CollectionUtils.isNotEmpty((List<String>) request.get(JsonKey.LOCATION_CODE))) {\n-        locationIdsList =\n-            validator.getValidatedLocationIds(\n-                getActorRef(LocationActorOperation.SEARCH_LOCATION.getValue()),\n-                (List<String>) request.get(JsonKey.LOCATION_CODE));\n-        request.put(JsonKey.LOCATION_IDS, locationIdsList);\n-        request.remove(JsonKey.LOCATION_CODE);\n-      }\n+  private void validateOrgLocation(Map<String, Object> request, RequestContext context) {\n+    List<Map<String, String>> orgLocationList =\n+        (List<Map<String, String>>) request.get(JsonKey.ORG_LOCATION);\n+    if (CollectionUtils.isEmpty(orgLocationList)) {\n+      return;\n+    }\n+    List<String> locList = new ArrayList<>();\n+    orgLocationList\n+        .stream()\n+        .forEach(\n+            loc -> {\n+              locList.add(loc.get(JsonKey.ID));\n+            });\n+    List<String> locationIdsList =\n+        validator.getHierarchyLocationIds(\n+            getActorRef(LocationActorOperation.SEARCH_LOCATION.getValue()), locList);\n+\n+    List<Map<String, String>> newOrgLocationList = new ArrayList<>();\n+    List<Location> locationList =\n+        locationClient.getLocationByIds(\n+            getActorRef(LocationActorOperation.SEARCH_LOCATION.getValue()),\n+            locationIdsList,\n+            context);\n+    locationList\n+        .stream()\n+        .forEach(\n+            location -> {\n+              Map<String, String> map = new HashMap<>();\n+              map.put(JsonKey.ID, location.getId());\n+              map.put(JsonKey.TYPE, location.getType());\n+              newOrgLocationList.add(map);\n+            });\n+    ObjectMapper mapper = new ObjectMapper();\n+    try {\n+      String orgLoc = mapper.writeValueAsString(newOrgLocationList);\n+      request.put(JsonKey.ORG_LOCATION, orgLoc);\n+    } catch (JsonProcessingException e) {\n+      ProjectCommonException.throwServerErrorException(ResponseCode.SERVER_ERROR);\n     }\n   }\n \n@@ -1513,9 +926,9 @@ private void validateLocationCodeAndIds(Map<String, Object> request) {\n     return responseMap;\n   }\n \n-  private boolean isRootOrgIdValid(String id, RequestContext context) {\n+  private boolean isTenantIdValid(String id, RequestContext context) {\n     Map<String, Object> orgDbMap = getOrgById(id, context);\n-    return MapUtils.isNotEmpty(orgDbMap) ? (boolean) orgDbMap.get(JsonKey.IS_ROOT_ORG) : false;\n+    return MapUtils.isNotEmpty(orgDbMap) ? (boolean) orgDbMap.get(JsonKey.IS_TENANT) : false;\n   }\n \n   private void throwExceptionForInvalidRootOrg(String id) {\n@@ -1531,7 +944,7 @@ private void throwExceptionForInvalidRootOrg(String id) {\n   private void assignKey(Request request) {\n     addKeysToRequestMap(request);\n     removeUnusedField(request);\n-    if (!isRootOrgIdValid((String) request.get(JsonKey.ID), request.getRequestContext())) {\n+    if (!isTenantIdValid((String) request.get(JsonKey.ID), request.getRequestContext())) {\n       throwExceptionForInvalidRootOrg((String) request.get(JsonKey.ID));\n     }\n     Response response = updateCassandraOrgRecord(request.getRequest(), request.getRequestContext());"
  },
  {
    "sha": "0c7a792c8d2a13b704cdb276488ca5ef1d42e0b3",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActor.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActor.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActor.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -295,8 +295,8 @@ private void processBulkUserUpload(\n     String rootOrgId = \"\";\n     Map<String, Object> orgMap = responseList.get(0);\n     boolean isRootOrg = false;\n-    if (null != orgMap.get(JsonKey.IS_ROOT_ORG)) {\n-      isRootOrg = (boolean) orgMap.get(JsonKey.IS_ROOT_ORG);\n+    if (null != orgMap.get(JsonKey.IS_TENANT)) {\n+      isRootOrg = (boolean) orgMap.get(JsonKey.IS_TENANT);\n     } else {\n       isRootOrg = false;\n     }"
  },
  {
    "sha": "c30928c9ab1e216f4134ee8e1dace0c752328f3b",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/health/HealthActor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/health/HealthActor.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/health/HealthActor.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/health/HealthActor.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -88,7 +88,7 @@ private void cassandraHealthCheck() {\n     responseList.add(ProjectUtil.createCheckResponse(JsonKey.LEARNER_SERVICE, false, null));\n     responseList.add(ProjectUtil.createCheckResponse(JsonKey.ACTOR_SERVICE, false, null));\n     try {\n-      Util.DbInfo orgTypeDbInfo = Util.dbInfoMap.get(JsonKey.ORG_TYPE_DB);\n+      Util.DbInfo orgTypeDbInfo = Util.dbInfoMap.get(JsonKey.ROLE);\n       getCassandraOperation()\n           .getAllRecords(orgTypeDbInfo.getKeySpace(), orgTypeDbInfo.getTableName(), null);\n       responseList.add(ProjectUtil.createCheckResponse(JsonKey.CASSANDRA_SERVICE, false, null));\n@@ -130,7 +130,7 @@ private void checkAllComponentHealth() {\n     responseList.add(ProjectUtil.createCheckResponse(JsonKey.LEARNER_SERVICE, false, null));\n     responseList.add(ProjectUtil.createCheckResponse(JsonKey.ACTOR_SERVICE, false, null));\n     try {\n-      Util.DbInfo orgTypeDbInfo = Util.dbInfoMap.get(JsonKey.ORG_TYPE_DB);\n+      Util.DbInfo orgTypeDbInfo = Util.dbInfoMap.get(JsonKey.ROLE);\n       getCassandraOperation()\n           .getAllRecords(orgTypeDbInfo.getKeySpace(), orgTypeDbInfo.getTableName(), null);\n       responseList.add(ProjectUtil.createCheckResponse(JsonKey.CASSANDRA_SERVICE, false, null));"
  },
  {
    "sha": "0dd61a63525e9f38f4563f11a400cb208abe5b17",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/search/SearchHandlerActor.java",
    "status": "modified",
    "additions": 43,
    "deletions": 47,
    "changes": 90,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/search/SearchHandlerActor.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/search/SearchHandlerActor.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/search/SearchHandlerActor.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -2,10 +2,9 @@\n \n import akka.dispatch.Mapper;\n import akka.pattern.Patterns;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.*;\n import java.util.stream.Collectors;\n-import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.collections.MapUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -66,29 +65,39 @@ public void onReceive(Request request) throws Throwable {\n       onReceiveUnsupportedOperation(request.getOperation());\n     }\n   }\n-private void backwardCompatibility(Map<String, Object> searchQueryMap) {\n \n-  Map<String, Object> filterMap = (Map<String, Object>) searchQueryMap.get(JsonKey.FILTERS);//checks if profileuser details is passed or not and calling encryption method accordingly\n-  if (MapUtils.isNotEmpty(filterMap)) {\n-    if (StringUtils.isNotBlank((CharSequence) filterMap.get(JsonKey.USER_TYPE))) {\n-      filterMap.put(JsonKey.PROFILE_USERTYPE + \".\" + JsonKey.TYPE, filterMap.get(JsonKey.USER_TYPE));\n-      filterMap.remove(JsonKey.USER_TYPE);\n-    }\n-    if (StringUtils.isNotBlank((CharSequence) filterMap.get(JsonKey.USER_SUB_TYPE))) {\n-      filterMap.put(JsonKey.PROFILE_USERTYPE + \".\" + JsonKey.SUB_TYPE, filterMap.get(JsonKey.USER_SUB_TYPE));\n-      filterMap.remove(JsonKey.USER_SUB_TYPE);\n-    }\n-    if (StringUtils.isNotBlank((CharSequence) filterMap.get(JsonKey.LOCATION_IDS))) {\n-      filterMap.put(JsonKey.PROFILE_LOCATION + \".\" + JsonKey.ID, filterMap.get(JsonKey.LOCATION_IDS));\n-      filterMap.remove(JsonKey.LOCATION_IDS);\n+  private void backwardCompatibility(Map<String, Object> searchQueryMap) {\n+\n+    Map<String, Object> filterMap =\n+        (Map<String, Object>)\n+            searchQueryMap.get(\n+                JsonKey.FILTERS); // checks if profileuser details is passed or not and calling\n+    // encryption method accordingly\n+    if (MapUtils.isNotEmpty(filterMap)) {\n+      if (StringUtils.isNotBlank((CharSequence) filterMap.get(JsonKey.USER_TYPE))) {\n+        filterMap.put(\n+            JsonKey.PROFILE_USERTYPE + \".\" + JsonKey.TYPE, filterMap.get(JsonKey.USER_TYPE));\n+        filterMap.remove(JsonKey.USER_TYPE);\n+      }\n+      if (StringUtils.isNotBlank((CharSequence) filterMap.get(JsonKey.USER_SUB_TYPE))) {\n+        filterMap.put(\n+            JsonKey.PROFILE_USERTYPE + \".\" + JsonKey.SUB_TYPE,\n+            filterMap.get(JsonKey.USER_SUB_TYPE));\n+        filterMap.remove(JsonKey.USER_SUB_TYPE);\n+      }\n+      if (StringUtils.isNotBlank((CharSequence) filterMap.get(JsonKey.LOCATION_IDS))) {\n+        filterMap.put(\n+            JsonKey.PROFILE_LOCATION + \".\" + JsonKey.ID, filterMap.get(JsonKey.LOCATION_IDS));\n+        filterMap.remove(JsonKey.LOCATION_IDS);\n+      }\n     }\n   }\n-  }\n+\n   private void handleUserSearch(\n       Request request, Map<String, Object> searchQueryMap, String filterObjectType)\n-          throws Exception {\n-    //checking for Backword compatibility\n-    backwardCompatibility( searchQueryMap);\n+      throws Exception {\n+    // checking for Backword compatibility\n+    backwardCompatibility(searchQueryMap);\n     UserUtility.encryptUserSearchFilterQueryData(searchQueryMap);\n     extractOrFilter(searchQueryMap);\n     SearchDTO searchDto = Util.createSearchDto(searchQueryMap);\n@@ -123,40 +132,26 @@ private void handleUserSearch(\n         UserUtility.decryptUserDataFrmES(userMap);\n         userMap.remove(JsonKey.ENC_EMAIL);\n         userMap.remove(JsonKey.ENC_PHONE);\n-        Map<String, Object> userTypeDetail = null;\n-        try {\n-          userTypeDetail = mapper.readValue((String) userMap.get(JsonKey.PROFILE_USERTYPE), new TypeReference<Map<String, Object>>() {\n-          });\n-        } catch (Exception e) {\n-          logger.error(\n-                  request.getRequestContext(), \"Exception because of mapper read value\", e);\n-        }\n-        if (MapUtils.isNotEmpty(userTypeDetail)) {\n+        Map<String, Object> userTypeDetail = new HashMap<>();\n+        if (MapUtils.isNotEmpty((Map<String, Object>) userMap.get(JsonKey.PROFILE_USERTYPE))) {\n+          userTypeDetail = (Map<String, Object>) userMap.get(JsonKey.PROFILE_USERTYPE);\n           userMap.put(JsonKey.USER_TYPE, userTypeDetail.get(JsonKey.TYPE));\n           userMap.put(JsonKey.USER_SUB_TYPE, userTypeDetail.get(JsonKey.SUB_TYPE));\n-          userMap.put(JsonKey.PROFILE_USERTYPE, userTypeDetail);\n         } else {\n           userMap.put(JsonKey.USER_TYPE, null);\n           userMap.put(JsonKey.USER_SUB_TYPE, null);\n-          userMap.put(JsonKey.PROFILE_USERTYPE, new HashMap<>());\n-        }\n-        List<String> locationIds = null;\n-        try {\n-          List<Map<String, String>> userLocList = mapper.readValue((String) userMap.get(JsonKey.PROFILE_LOCATION), new TypeReference<List<Map<String, String>>>() {\n-          });\n-          if(CollectionUtils.isNotEmpty(userLocList)) {\n-            locationIds = userLocList.stream().map(m -> m.get(JsonKey.ID)).collect(Collectors.toList());\n-            userMap.put(JsonKey.PROFILE_LOCATION,userLocList);\n-          }else\n-          {\n-            userMap.put(JsonKey.PROFILE_LOCATION,new ArrayList<>());\n-          }\n-        } catch (Exception ex) {\n-          logger.error(request.getRequestContext(), \"Exception occurred while mapping\", ex);\n         }\n-        if (CollectionUtils.isNotEmpty(locationIds)) {\n-           userMap.put(JsonKey.LOCATION_IDS, locationIds);\n+        userMap.put(JsonKey.PROFILE_USERTYPE, userTypeDetail);\n+        List<String> locationIds = new ArrayList<>();\n+        List<Map<String, String>> userLocList = new ArrayList<>();\n+        if (CollectionUtils.isNotEmpty(\n+            (List<Map<String, String>>) userMap.get(JsonKey.PROFILE_LOCATION))) {\n+          userLocList = (List<Map<String, String>>) userMap.get(JsonKey.PROFILE_LOCATION);\n+          locationIds =\n+              userLocList.stream().map(m -> m.get(JsonKey.ID)).collect(Collectors.toList());\n         }\n+        userMap.put(JsonKey.PROFILE_LOCATION, userLocList);\n+        userMap.put(JsonKey.LOCATION_IDS, locationIds);\n       }\n       String requestedFields = (String) request.getContext().get(JsonKey.FIELDS);\n       updateUserDetailsWithOrgName(requestedFields, userMapList, request.getRequestContext());\n@@ -165,6 +160,7 @@ private void handleUserSearch(\n     sender().tell(response, self());\n     generateSearchTelemetryEvent(searchDto, filterObjectType, result, request.getContext());\n   }\n+\n   private void handleOrgSearchAsyncRequest(String indexType, SearchDTO searchDto, Request request) {\n     Future<Map<String, Object>> futureResponse =\n         esService.search(searchDto, indexType, request.getRequestContext());"
  },
  {
    "sha": "f7ca4778412fdeff7493a91ced079a8c937e5455",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActor.java",
    "status": "modified",
    "additions": 20,
    "deletions": 3,
    "changes": 23,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActor.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActor.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActor.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,5 +1,6 @@\n package org.sunbird.learner.actors.syncjobmanager;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.text.MessageFormat;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -27,6 +28,7 @@\n import org.sunbird.helper.ServiceFactory;\n import org.sunbird.learner.util.Util;\n import org.sunbird.learner.util.Util.DbInfo;\n+import org.sunbird.models.organisation.OrgTypeEnum;\n \n /** Background sync of data between Cassandra and Elastic Search. */\n @ActorConfig(\n@@ -169,9 +171,24 @@ private String getType(String objectType) {\n   }\n \n   private Map<String, Object> getOrgDetails(Entry<String, Object> entry, RequestContext context) {\n-    logger.info(context, \"EsSyncBackgroundActor: getOrgDetails called\");\n+    logger.debug(context, \"EsSyncBackgroundActor: getOrgDetails called\");\n     Map<String, Object> orgMap = (Map<String, Object>) entry.getValue();\n-    orgMap.remove(JsonKey.ORG_TYPE);\n+    String orgLocation = (String) orgMap.get(JsonKey.ORG_LOCATION);\n+\n+    try {\n+      if (orgMap.containsKey(JsonKey.ORG_TYPE) && null != orgMap.get(JsonKey.ORG_TYPE)) {\n+        orgMap.put(\n+            JsonKey.ORG_TYPE, OrgTypeEnum.getTypeByValue((Integer) orgMap.get(JsonKey.ORG_TYPE)));\n+      }\n+      if (StringUtils.isNotBlank(orgLocation)) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        List<Map<String, String>> orgLoc = mapper.readValue(orgLocation, List.class);\n+        orgMap.put(JsonKey.ORG_LOCATION, orgLoc);\n+      }\n+    } catch (Exception ex) {\n+      logger.error(\"Exception occurred while parsing orgLocation\", ex);\n+    }\n+\n     if (orgMap.containsKey(JsonKey.ADDRESS_ID)\n         && !StringUtils.isBlank((String) orgMap.get(JsonKey.ADDRESS_ID))) {\n       orgMap.put(\n@@ -181,7 +198,7 @@ private String getType(String objectType) {\n               (String) orgMap.get(JsonKey.ADDRESS_ID),\n               context));\n     }\n-    logger.info(context, \"EsSyncBackgroundActor: getOrgDetails returned\");\n+    logger.debug(context, \"EsSyncBackgroundActor: getOrgDetails returned\");\n     return orgMap;\n   }\n "
  },
  {
    "sha": "ac6e34027bf99d137c4debcf7af3d20cd0982985",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/OrgDao.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/OrgDao.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/OrgDao.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/OrgDao.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -7,6 +7,6 @@\n \n   Map<String, Object> getOrgById(String orgId, RequestContext context);\n \n-  Map<String, Object> esGetOrgByExternalId(\n+  Map<String, Object> getOrgByExternalId(\n       String externalId, String provider, RequestContext context);\n }"
  },
  {
    "sha": "3e67d3115c5bb5baf6e7493e2abbb96a4b2865f8",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImpl.java",
    "status": "modified",
    "additions": 24,
    "deletions": 25,
    "changes": 49,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImpl.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImpl.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImpl.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,30 +1,27 @@\n package org.sunbird.learner.organisation.dao.impl;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.sunbird.cassandra.CassandraOperation;\n-import org.sunbird.common.ElasticSearchHelper;\n-import org.sunbird.common.factory.EsClientFactory;\n-import org.sunbird.common.inf.ElasticSearchService;\n import org.sunbird.common.models.response.Response;\n import org.sunbird.common.models.util.JsonKey;\n import org.sunbird.common.models.util.LoggerUtil;\n-import org.sunbird.common.models.util.ProjectUtil;\n import org.sunbird.common.request.RequestContext;\n-import org.sunbird.dto.SearchDTO;\n import org.sunbird.helper.ServiceFactory;\n import org.sunbird.learner.organisation.dao.OrgDao;\n+import org.sunbird.learner.organisation.external.identity.service.OrgExternalService;\n import org.sunbird.learner.util.Util;\n-import scala.concurrent.Future;\n+import org.sunbird.models.organisation.OrgTypeEnum;\n \n public class OrgDaoImpl implements OrgDao {\n \n   private LoggerUtil logger = new LoggerUtil(OrgDaoImpl.class);\n-  private ElasticSearchService esUtil = EsClientFactory.getInstance(JsonKey.REST);\n   private CassandraOperation cassandraOperation = ServiceFactory.getInstance();\n+  private OrgExternalService orgExternalService = new OrgExternalService();\n   private static OrgDao orgDao = null;\n \n   public static OrgDao getInstance() {\n@@ -43,30 +40,32 @@ public static OrgDao getInstance() {\n         (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n     if (CollectionUtils.isNotEmpty(responseList)) {\n       Map<String, Object> orgMap = responseList.get(0);\n+      String orgLocation = (String) orgMap.get(JsonKey.ORG_LOCATION);\n+      try {\n+        if (orgMap.containsKey(JsonKey.ORG_TYPE) && null != orgMap.get(JsonKey.ORG_TYPE)) {\n+          orgMap.put(\n+              JsonKey.ORG_TYPE, OrgTypeEnum.getTypeByValue((Integer) orgMap.get(JsonKey.ORG_TYPE)));\n+        }\n+        if (StringUtils.isNotBlank(orgLocation)) {\n+          ObjectMapper mapper = new ObjectMapper();\n+          orgMap.put(JsonKey.ORG_LOCATION, mapper.readValue(orgLocation, List.class));\n+        }\n+      } catch (Exception e) {\n+        logger.info(\n+            context,\n+            \"Exception occurred while converting orgLocation to List<Map<String,String>>.\");\n+      }\n       orgMap.remove(JsonKey.CONTACT_DETAILS);\n       return orgMap;\n     }\n     return Collections.emptyMap();\n   }\n \n   @Override\n-  public Map<String, Object> esGetOrgByExternalId(\n+  public Map<String, Object> getOrgByExternalId(\n       String externalId, String provider, RequestContext context) {\n-    Map<String, Object> map = null;\n-    SearchDTO searchDto = new SearchDTO();\n-    Map<String, Object> filter = new HashMap<>();\n-    filter.put(JsonKey.EXTERNAL_ID, externalId);\n-    filter.put(JsonKey.PROVIDER, provider);\n-    searchDto.getAdditionalProperties().put(JsonKey.FILTERS, filter);\n-    Future<Map<String, Object>> esResponseF =\n-        esUtil.search(searchDto, ProjectUtil.EsType.organisation.getTypeName(), context);\n-    Map<String, Object> esResponse =\n-        (Map<String, Object>) ElasticSearchHelper.getResponseFromFuture(esResponseF);\n-    List<Map<String, Object>> list = (List<Map<String, Object>>) esResponse.get(JsonKey.CONTENT);\n-    if (!list.isEmpty()) {\n-      map = list.get(0);\n-      map.put(JsonKey.CONTACT_DETAILS, String.valueOf(map.get(JsonKey.CONTACT_DETAILS)));\n-    }\n-    return map;\n+    String orgId =\n+        orgExternalService.getOrgIdFromOrgExternalIdAndProvider(externalId, provider, context);\n+    return getOrgById(orgId, context);\n   }\n }"
  },
  {
    "sha": "0d31d2a8ac73f65191d88d181682a6a3c150dd6f",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalService.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalService.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalService.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalService.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,15 +1,18 @@\n package org.sunbird.learner.organisation.external.identity.service;\n \n+import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.sunbird.cassandra.CassandraOperation;\n import org.sunbird.common.models.response.Response;\n import org.sunbird.common.models.util.JsonKey;\n import org.sunbird.common.request.RequestContext;\n import org.sunbird.helper.ServiceFactory;\n+import org.sunbird.learner.util.Util;\n \n public class OrgExternalService {\n \n@@ -35,6 +38,26 @@ public String getOrgIdFromOrgExternalIdAndProvider(\n     return null;\n   }\n \n+  public Map<String, Object> getOrgByOrgExternalIdAndProvider(\n+      String externalId, String provider, RequestContext context) {\n+    String orgId = getOrgIdFromOrgExternalIdAndProvider(externalId, provider, context);\n+    if (StringUtils.isNotBlank(orgId)) {\n+      Util.DbInfo orgDbInfo = Util.dbInfoMap.get(JsonKey.ORG_DB);\n+      Response orgResponse =\n+          getCassandraOperation()\n+              .getRecordById(KEYSPACE_NAME, orgDbInfo.getTableName(), orgId, context);\n+      List<Map<String, Object>> orgResList =\n+          (List<Map<String, Object>>) orgResponse.getResult().get(JsonKey.RESPONSE);\n+      if (CollectionUtils.isNotEmpty(orgResList)) {\n+        Map<String, Object> orgMap = orgResList.get(0);\n+        if (MapUtils.isNotEmpty(orgMap)) {\n+          return orgMap;\n+        }\n+      }\n+    }\n+    return Collections.emptyMap();\n+  }\n+\n   private CassandraOperation getCassandraOperation() {\n     return ServiceFactory.getInstance();\n   }"
  },
  {
    "sha": "e1ead7f0f20cfdc35316a5966a452085b799bbab",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/OrgService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/OrgService.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/OrgService.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/OrgService.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -7,6 +7,6 @@\n \n   Map<String, Object> getOrgById(String orgId, RequestContext context);\n \n-  Map<String, Object> esGetOrgByExternalId(\n+  Map<String, Object> getOrgByExternalIdAndProvider(\n       String externalId, String provider, RequestContext context);\n }"
  },
  {
    "sha": "1f2d3af1fcdce1e9e1a0fe0b937fbc4d5fa319a2",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/impl/OrgServiceImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/impl/OrgServiceImpl.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/impl/OrgServiceImpl.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/organisation/service/impl/OrgServiceImpl.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,15 +1,13 @@\n package org.sunbird.learner.organisation.service.impl;\n \n import java.util.Map;\n-import org.sunbird.common.models.util.LoggerUtil;\n import org.sunbird.common.request.RequestContext;\n import org.sunbird.learner.organisation.dao.OrgDao;\n import org.sunbird.learner.organisation.dao.impl.OrgDaoImpl;\n import org.sunbird.learner.organisation.service.OrgService;\n \n public class OrgServiceImpl implements OrgService {\n \n-  private LoggerUtil logger = new LoggerUtil(OrgServiceImpl.class);\n   private OrgDao orgDao = OrgDaoImpl.getInstance();\n   private static OrgService orgService = null;\n \n@@ -26,8 +24,8 @@ public static OrgService getInstance() {\n   }\n \n   @Override\n-  public Map<String, Object> esGetOrgByExternalId(\n+  public Map<String, Object> getOrgByExternalIdAndProvider(\n       String externalId, String provider, RequestContext context) {\n-    return orgDao.esGetOrgByExternalId(externalId, provider, context);\n+    return orgDao.getOrgByExternalId(externalId, provider, context);\n   }\n }"
  },
  {
    "sha": "ec5249845d8886a904db590144856010b81c1a50",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/DataCacheHandler.java",
    "status": "modified",
    "additions": 1,
    "deletions": 24,
    "changes": 25,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/DataCacheHandler.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/DataCacheHandler.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/DataCacheHandler.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -26,7 +26,6 @@\n \n   private static Map<String, Object> roleMap = new ConcurrentHashMap<>();\n   private static Map<String, Object> telemetryPdata = new ConcurrentHashMap<>(3);\n-  private static Map<String, String> orgTypeMap = new ConcurrentHashMap<>();\n   private static Map<String, String> configSettings = new ConcurrentHashMap<>();\n   private static Map<String, Map<String, List<Map<String, String>>>> frameworkCategoriesMap =\n       new ConcurrentHashMap<>();\n@@ -68,7 +67,7 @@\n   public static String[] bulkOrgAllowedFields = {\n     JsonKey.ORGANISATION_NAME,\n     JsonKey.CHANNEL,\n-    JsonKey.IS_ROOT_ORG,\n+    JsonKey.IS_TENANT,\n     JsonKey.PROVIDER,\n     JsonKey.EXTERNAL_ID,\n     JsonKey.DESCRIPTION,\n@@ -87,7 +86,6 @@\n   public void run() {\n     logger.info(\"DataCacheHandler:run: Cache refresh started.\");\n     roleCache();\n-    orgTypeCache();\n     cacheSystemConfig();\n     cacheRoleForRead();\n     cacheTelemetryPdata();\n@@ -197,22 +195,6 @@ private void cacheSystemConfig() {\n     configSettings = tempConfigSettings;\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  private void orgTypeCache() {\n-    Map<String, String> tempOrgTypeMap = new ConcurrentHashMap();\n-    Response response = cassandraOperation.getAllRecords(KEY_SPACE_NAME, JsonKey.ORG_TYPE_DB, null);\n-    List<Map<String, Object>> responseList =\n-        (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n-    if (null != responseList && !responseList.isEmpty()) {\n-      for (Map<String, Object> resultMap : responseList) {\n-        tempOrgTypeMap.put(\n-            ((String) resultMap.get(JsonKey.NAME)).toLowerCase(),\n-            (String) resultMap.get(JsonKey.ID));\n-      }\n-      orgTypeMap = tempOrgTypeMap;\n-    }\n-  }\n-\n   @SuppressWarnings(\"unchecked\")\n   private void roleCache() {\n     Map<String, Object> tempRoleMap = new ConcurrentHashMap();\n@@ -272,11 +254,6 @@ private void roleCache() {\n     return roleList;\n   }\n \n-  /** @return the orgTypeMap */\n-  public static Map<String, String> getOrgTypeMap() {\n-    return orgTypeMap;\n-  }\n-\n   /** @return the configSettings */\n   public static Map<String, String> getConfigSettings() {\n     return configSettings;"
  },
  {
    "sha": "d90333f1ef4371b7366ac2e653403b4b04684c88",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/Util.java",
    "status": "modified",
    "additions": 25,
    "deletions": 6,
    "changes": 31,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/Util.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/Util.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/learner/util/Util.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -120,9 +120,6 @@ private static void initializeDBProperty() {\n     dbInfoMap.put(JsonKey.USER_DB, getDbInfoObject(KEY_SPACE_NAME, \"user\"));\n     dbInfoMap.put(JsonKey.ORG_DB, getDbInfoObject(KEY_SPACE_NAME, \"organisation\"));\n     dbInfoMap.put(JsonKey.ADDRESS_DB, getDbInfoObject(KEY_SPACE_NAME, \"address\"));\n-\n-    dbInfoMap.put(JsonKey.ORG_MAP_DB, getDbInfoObject(KEY_SPACE_NAME, \"org_mapping\"));\n-    dbInfoMap.put(JsonKey.ORG_TYPE_DB, getDbInfoObject(KEY_SPACE_NAME, \"org_type\"));\n     dbInfoMap.put(JsonKey.ROLE, getDbInfoObject(KEY_SPACE_NAME, \"role\"));\n     dbInfoMap.put(JsonKey.URL_ACTION, getDbInfoObject(KEY_SPACE_NAME, \"url_action\"));\n     dbInfoMap.put(JsonKey.ACTION_GROUP, getDbInfoObject(KEY_SPACE_NAME, \"action_group\"));\n@@ -134,7 +131,6 @@ private static void initializeDBProperty() {\n     dbInfoMap.put(JsonKey.MEDIA_TYPE_DB, getDbInfoObject(KEY_SPACE_NAME, \"media_type\"));\n     dbInfoMap.put(\n         JsonKey.TENANT_PREFERENCE_DB, getDbInfoObject(KEY_SPACE_NAME, \"tenant_preference\"));\n-    dbInfoMap.put(JsonKey.GEO_LOCATION_DB, getDbInfoObject(KEY_SPACE_NAME, \"geo_location\"));\n     dbInfoMap.put(JsonKey.SYSTEM_SETTINGS_DB, getDbInfoObject(KEY_SPACE_NAME, \"system_settings\"));\n     dbInfoMap.put(JsonKey.USER_CERT, getDbInfoObject(KEY_SPACE_NAME, JsonKey.USER_CERT));\n     dbInfoMap.put(JsonKey.USER_FEED_DB, getDbInfoObject(KEY_SPACE_NAME, JsonKey.USER_FEED_DB));\n@@ -706,7 +702,7 @@ public static void upsertUserOrgData(Map<String, Object> userMap, RequestContext\n       logger.error(context, e.getMessage(), e);\n     }\n     String username = \"\";\n-    if (!(userList.isEmpty())) {\n+    if (CollectionUtils.isNotEmpty(userList)) {\n       userDetails = userList.get(0);\n       username = (String) userDetails.get(JsonKey.USERNAME);\n       logger.info(context, \"Util:getUserDetails: userId = \" + userId);\n@@ -729,7 +725,30 @@ public static void upsertUserOrgData(Map<String, Object> userMap, RequestContext\n       userDetails.remove(JsonKey.PASSWORD);\n       addEmailAndPhone(userDetails);\n       checkEmailAndPhoneVerified(userDetails);\n-\n+      List<Map<String, String>> userLocList = new ArrayList<>();\n+      String profLocation = (String) userDetails.get(JsonKey.PROFILE_LOCATION);\n+      if (StringUtils.isNotBlank(profLocation)) {\n+        try {\n+          userLocList = mapper.readValue(profLocation, List.class);\n+        } catch (Exception e) {\n+          logger.info(\n+              context,\n+              \"Exception occurred while converting profileLocation to List<Map<String,String>>.\");\n+        }\n+      }\n+      userDetails.put(JsonKey.PROFILE_LOCATION, userLocList);\n+      Map<String, Object> userTypeDetail = new HashMap<>();\n+      String profUserType = (String) userDetails.get(JsonKey.PROFILE_USERTYPE);\n+      if (StringUtils.isNotBlank(profUserType)) {\n+        try {\n+          userTypeDetail = mapper.readValue(profUserType, Map.class);\n+        } catch (Exception e) {\n+          logger.info(\n+              context,\n+              \"Exception occurred while converting profileUserType to Map<String,String>.\");\n+        }\n+      }\n+      userDetails.put(JsonKey.PROFILE_USERTYPE, userTypeDetail);\n     } else {\n       logger.info(\n           context,"
  },
  {
    "sha": "b68ec493afce20c60409db7cf7cb3db471811136",
    "filename": "actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/models/user/User.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/models/user/User.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/models/user/User.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/main/java/org/sunbird/models/user/User.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -75,6 +75,8 @@\n   private Map<String, String> allTncAccepted;\n   private Boolean emailVerified;\n   private Boolean phoneVerified;\n+  private String profileUserType;\n+  private String profileLocation;\n \n   public Boolean getEmailVerified() {\n     return emailVerified;\n@@ -525,4 +527,20 @@ public String getUserSubType() {\n   public void setUserSubType(String userSubType) {\n     this.userSubType = userSubType;\n   }\n+\n+  public String getProfileUserType() {\n+    return profileUserType;\n+  }\n+\n+  public void setProfileUserType(String profileUserType) {\n+    this.profileUserType = profileUserType;\n+  }\n+\n+  public String getProfileLocation() {\n+    return profileLocation;\n+  }\n+\n+  public void setProfileLocation(String profileLocation) {\n+    this.profileLocation = profileLocation;\n+  }\n }"
  },
  {
    "sha": "d8035430ffad7b93897b1bdf29d65564f9e21fca",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/BackgroundJobManagerTest.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/BackgroundJobManagerTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/BackgroundJobManagerTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/BackgroundJobManagerTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -0,0 +1,143 @@\n+package org.sunbird.learner.actors;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import akka.actor.ActorRef;\n+import akka.actor.ActorSystem;\n+import akka.actor.Props;\n+import akka.dispatch.Futures;\n+import akka.testkit.javadsl.TestKit;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.sunbird.cassandraimpl.CassandraOperationImpl;\n+import org.sunbird.common.ElasticSearchHelper;\n+import org.sunbird.common.ElasticSearchRestHighImpl;\n+import org.sunbird.common.factory.EsClientFactory;\n+import org.sunbird.common.inf.ElasticSearchService;\n+import org.sunbird.common.models.response.Response;\n+import org.sunbird.common.models.util.ActorOperations;\n+import org.sunbird.common.models.util.JsonKey;\n+import org.sunbird.common.models.util.ProjectUtil;\n+import org.sunbird.common.request.Request;\n+import org.sunbird.helper.ServiceFactory;\n+import org.sunbird.learner.util.Util;\n+import scala.concurrent.Promise;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({\n+  ServiceFactory.class,\n+  Util.class,\n+  ElasticSearchRestHighImpl.class,\n+  ElasticSearchHelper.class,\n+  EsClientFactory.class,\n+  ProjectUtil.class\n+})\n+@PowerMockIgnore({\n+  \"javax.management.*\",\n+  \"javax.net.ssl.*\",\n+  \"javax.security.*\",\n+  \"jdk.internal.reflect.*\",\n+  \"javax.crypto.*\"\n+})\n+public class BackgroundJobManagerTest {\n+  private ActorSystem system = ActorSystem.create(\"system\");\n+  private static final Props props = Props.create(BackgroundJobManager.class);\n+  private static CassandraOperationImpl cassandraOperation;\n+  private ElasticSearchService esService;\n+\n+  @Before\n+  public void beforeEachTest() {\n+    PowerMockito.mockStatic(ServiceFactory.class);\n+    PowerMockito.mockStatic(Util.class);\n+    PowerMockito.mockStatic(ProjectUtil.class);\n+    when(ProjectUtil.registertag(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(\"\");\n+    cassandraOperation = mock(CassandraOperationImpl.class);\n+    when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n+    PowerMockito.mockStatic(EsClientFactory.class);\n+    PowerMockito.mockStatic(ElasticSearchHelper.class);\n+    esService = mock(ElasticSearchRestHighImpl.class);\n+    PowerMockito.mockStatic(EsClientFactory.class);\n+    when(EsClientFactory.getInstance(Mockito.anyString())).thenReturn(esService);\n+    when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n+\n+    Promise<Boolean> promise = Futures.promise();\n+    promise.success(true);\n+\n+    when(esService.bulkInsert(Mockito.anyString(), Mockito.anyList(), Mockito.any()))\n+        .thenReturn(promise.future());\n+  }\n+\n+  @Test\n+  public void testInsertOrgInfoToEs() {\n+    when(cassandraOperation.getRecordById(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any()))\n+        .thenReturn(cassandraGetRecord());\n+    TestKit probe = new TestKit(system);\n+    ActorRef subject = system.actorOf(props);\n+    Request reqObj = new Request();\n+    reqObj.setOperation(ActorOperations.INSERT_ORG_INFO_ELASTIC.getValue());\n+    Map<String, Object> reqMap = new HashMap<>();\n+    reqMap.put(JsonKey.ID, \"1321546897\");\n+    reqObj.getRequest().put(JsonKey.ORGANISATION, reqMap);\n+    subject.tell(reqObj, probe.getRef());\n+    probe.expectNoMessage();\n+    assertTrue(true);\n+  }\n+\n+  @Test\n+  public void testInsertOrgInfoToEsFailure() {\n+    when(cassandraOperation.getRecordById(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any()))\n+        .thenReturn(cassandraGetRecord2());\n+    TestKit probe = new TestKit(system);\n+    ActorRef subject = system.actorOf(props);\n+    Request reqObj = new Request();\n+    reqObj.setOperation(ActorOperations.INSERT_ORG_INFO_ELASTIC.getValue());\n+    Map<String, Object> reqMap = new HashMap<>();\n+    reqMap.put(JsonKey.ID, \"1321546897\");\n+    reqObj.getRequest().put(JsonKey.ORGANISATION, reqMap);\n+    subject.tell(reqObj, probe.getRef());\n+    probe.expectNoMessage();\n+    assertTrue(true);\n+  }\n+\n+  private static Response cassandraGetRecord() {\n+    Response response = new Response();\n+    List<Map<String, Object>> list = new ArrayList();\n+    Map<String, Object> map = new HashMap<>();\n+    map.put(JsonKey.ID, \"anyId\");\n+    String loc =\n+        \"[{\\\"id\\\":\\\"6dd69f1c-ba40-4b3b-8981-4fb6813c5e71\\\",\\\"type\\\":\\\"district\\\"},{\\\"id\\\":\\\"e9207c22-41cf-4a0d-81fb-1fbe3e34ae24\\\",\\\"type\\\":\\\"cluster\\\"},{\\\"id\\\":\\\"ccc7be29-8e40-4d0a-915b-26ec9228ac4a\\\",\\\"type\\\":\\\"state\\\"}]\";\n+    map.put(JsonKey.ORG_LOCATION, loc);\n+    list.add(map);\n+    response.put(JsonKey.RESPONSE, list);\n+    return response;\n+  }\n+\n+  private static Response cassandraGetRecord2() {\n+    Response response = new Response();\n+    List<Map<String, Object>> list = new ArrayList();\n+    Map<String, Object> map = new HashMap<>();\n+    map.put(JsonKey.ID, \"anyId\");\n+    String loc =\n+        \"{\\\"id\\\":\\\"6dd69f1c-ba40-4b3b-8981-4fb6813c5e71\\\",\\\"type\\\":\\\"district\\\"},{\\\"id\\\":\\\"e9207c22-41cf-4a0d-81fb-1fbe3e34ae24\\\",\\\"type\\\":\\\"cluster\\\"},{\\\"id\\\":\\\"ccc7be29-8e40-4d0a-915b-26ec9228ac4a\\\",\\\"type\\\":\\\"state\\\"}\";\n+    map.put(JsonKey.ORG_LOCATION, loc);\n+    list.add(map);\n+    response.put(JsonKey.RESPONSE, list);\n+    return response;\n+  }\n+}"
  },
  {
    "sha": "ab9ce407672b9a5f3ae5898091a5da940007bd9e",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/HealthActorTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/HealthActorTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/HealthActorTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/HealthActorTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -54,7 +54,7 @@\n public class HealthActorTest {\n \n   private static ActorSystem system;\n-  Util.DbInfo orgTypeDbInfo = Util.dbInfoMap.get(JsonKey.ORG_TYPE_DB);\n+  Util.DbInfo orgTypeDbInfo = Util.dbInfoMap.get(JsonKey.ROLE);\n   private CassandraOperation cassandraOperation;\n   private static final Props props = Props.create(HealthActor.class);\n "
  },
  {
    "sha": "0bb8734d9e0f7ea51502f906adbe4d0ac3253f5e",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/OrgManagementActorTest.java",
    "status": "modified",
    "additions": 228,
    "deletions": 114,
    "changes": 342,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/OrgManagementActorTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/OrgManagementActorTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/OrgManagementActorTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -4,8 +4,10 @@\n import static org.junit.Assert.assertTrue;\n import static org.powermock.api.mockito.PowerMockito.mock;\n import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.powermock.api.mockito.PowerMockito.whenNew;\n \n import akka.actor.ActorRef;\n+import akka.actor.ActorSelection;\n import akka.actor.ActorSystem;\n import akka.actor.Props;\n import akka.dispatch.Futures;\n@@ -15,14 +17,18 @@\n import java.util.List;\n import java.util.Map;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mockito;\n import org.powermock.api.mockito.PowerMockito;\n import org.powermock.core.classloader.annotations.PowerMockIgnore;\n import org.powermock.core.classloader.annotations.PrepareForTest;\n import org.powermock.modules.junit4.PowerMockRunner;\n+import org.sunbird.actor.router.RequestRouter;\n+import org.sunbird.actor.service.BaseMWService;\n+import org.sunbird.actor.service.SunbirdMWService;\n+import org.sunbird.actorutil.location.LocationClient;\n+import org.sunbird.actorutil.location.impl.LocationClientImpl;\n import org.sunbird.cassandraimpl.CassandraOperationImpl;\n import org.sunbird.common.ElasticSearchRestHighImpl;\n import org.sunbird.common.exception.ProjectCommonException;\n@@ -33,8 +39,11 @@\n import org.sunbird.common.models.util.JsonKey;\n import org.sunbird.common.models.util.ProjectUtil;\n import org.sunbird.common.request.Request;\n+import org.sunbird.common.request.RequestContext;\n import org.sunbird.common.responsecode.ResponseCode;\n import org.sunbird.helper.ServiceFactory;\n+import org.sunbird.learner.organisation.external.identity.service.OrgExternalService;\n+import org.sunbird.learner.organisation.service.impl.OrgServiceImpl;\n import org.sunbird.learner.util.Util;\n import org.sunbird.validator.location.LocationRequestValidator;\n import scala.concurrent.Promise;\n@@ -46,7 +55,15 @@\n   ElasticSearchRestHighImpl.class,\n   ProjectUtil.class,\n   LocationRequestValidator.class,\n-  EsClientFactory.class\n+  EsClientFactory.class,\n+  LocationClient.class,\n+  LocationClientImpl.class,\n+  RequestRouter.class,\n+  BaseMWService.class,\n+  SunbirdMWService.class,\n+  ActorSelection.class,\n+  OrgExternalService.class,\n+  OrgServiceImpl.class\n })\n @PowerMockIgnore({\n   \"javax.management.*\",\n@@ -59,15 +76,12 @@\n   \"com.sun.org.apache.xerces.*\",\n   \"org.xml.*\"\n })\n-@Ignore\n public class OrgManagementActorTest {\n \n   private ActorSystem system = ActorSystem.create(\"system\");\n   private static final Props props = Props.create(OrganisationManagementActor.class);\n   private static CassandraOperationImpl cassandraOperation;\n   private static Map<String, Object> basicRequestData;\n-  private static final String ADD_MEMBER_TO_ORG =\n-      ActorOperations.ADD_MEMBER_ORGANISATION.getValue();\n   private static ElasticSearchService esService;\n \n   @Before\n@@ -76,8 +90,13 @@ public void beforeEachTest() {\n     PowerMockito.mockStatic(Util.class);\n     PowerMockito.mockStatic(ProjectUtil.class);\n     PowerMockito.mockStatic(EsClientFactory.class);\n+    PowerMockito.mockStatic(BaseMWService.class);\n+    PowerMockito.mockStatic(SunbirdMWService.class);\n+    SunbirdMWService.tellToBGRouter(Mockito.any(), Mockito.any());\n+    ActorSelection selection = PowerMockito.mock(ActorSelection.class);\n+    when(BaseMWService.getRemoteRouter(Mockito.anyString())).thenReturn(selection);\n \n-    CassandraOperationImpl cassandraOperation = mock(CassandraOperationImpl.class);\n+    cassandraOperation = mock(CassandraOperationImpl.class);\n     esService = mock(ElasticSearchRestHighImpl.class);\n     when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n     when(EsClientFactory.getInstance(Mockito.anyString())).thenReturn(esService);\n@@ -91,10 +110,10 @@ public void beforeEachTest() {\n         .thenReturn(getAllRecords());\n     when(cassandraOperation.insertRecord(\n             Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n-        .thenReturn(getRecordsByProperty(false));\n+        .thenReturn(getUpsertRecords());\n     when(cassandraOperation.updateRecord(\n             Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n-        .thenReturn(getRecordsByProperty(false));\n+        .thenReturn(getUpsertRecords());\n     when(cassandraOperation.getRecordById(\n             Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n         .thenReturn(getRecordsByProperty(false))\n@@ -109,134 +128,160 @@ public void beforeEachTest() {\n \n     when(Util.validateRoles(Mockito.anyList())).thenReturn(\"SUCCESS\");\n     when(Util.encryptData(Mockito.anyString())).thenReturn(\"userExtId\");\n+    when(Util.registerChannel(Mockito.anyMap(), Mockito.any())).thenReturn(true);\n     when(ProjectUtil.getUniqueIdFromTimestamp(Mockito.anyInt())).thenReturn(\"time\");\n     when(ProjectUtil.getFormattedDate()).thenReturn(\"date\");\n     when(ProjectUtil.getConfigValue(JsonKey.SUNBIRD_VALID_LOCATION_TYPES)).thenReturn(\"dummy\");\n     when(ProjectUtil.getConfigValue(JsonKey.SUNBIRD_API_REQUEST_LOWER_CASE_FIELDS))\n         .thenReturn(\"lowercase\");\n-    PowerMockito.mockStatic(LocationRequestValidator.class);\n-  }\n-\n-  // @Test\n-  public void testUpdateOrgStatus() {\n-    Request reqObj = new Request();\n-    Map<String, Object> requestData = new HashMap<>();\n-    requestData.put(JsonKey.REQUESTED_BY, \"as23-12asd234-123\");\n-    requestData.put(JsonKey.ORGANISATION_ID, \"orgId\");\n-    reqObj.setRequest(requestData);\n-    reqObj.setOperation(ActorOperations.UPDATE_ORG_STATUS.getValue());\n-    when(cassandraOperation.getRecordById(\n-            Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any()))\n-        .thenReturn(getRecordsByProperty(false));\n-    boolean result = testScenario(reqObj, null);\n-    assertTrue(result);\n+    when(ProjectUtil.getConfigValue(\"org_index_alias\")).thenReturn(\"org_alias\");\n   }\n \n   @Test\n-  public void testAddUserToOrgSuccessWithUserIdAndOrgId() {\n+  public void testCreateOrgFailureWithMandatoryParamOrgTypeMissing() {\n+    Map<String, Object> req = getRequestDataForOrgCreate(basicRequestData);\n+    req.remove(JsonKey.ORG_TYPE);\n     boolean result =\n         testScenario(\n-            getRequest(\n-                getRequestData(true, true, false, false, basicRequestData), ADD_MEMBER_TO_ORG),\n-            null);\n-    assertTrue(result);\n-  }\n-\n-  @Test\n-  public void testAddUserToOrgFailureWithBlankUserIdAndOrgId() {\n-    Map<String, Object> reqMap = getRequestData(false, true, false, false, basicRequestData);\n-    Request request = getRequest(reqMap, ADD_MEMBER_TO_ORG);\n-    boolean result = testScenario(request, ResponseCode.usrValidationError);\n+            getRequest(req, ActorOperations.CREATE_ORG.getValue()),\n+            ResponseCode.mandatoryParamsMissing);\n     assertTrue(result);\n   }\n \n   @Test\n-  public void testAddUserToOrgFailureWithUserIdAndBlankOrgId() {\n-    Map<String, Object> reqMap = getRequestData(true, false, false, true, basicRequestData);\n-    reqMap.remove(JsonKey.PROVIDER);\n-    Request request = getRequest(reqMap, ADD_MEMBER_TO_ORG);\n-    boolean result = testScenario(request, ResponseCode.sourceAndExternalIdValidationError);\n+  public void testCreateOrgFailureWithInvalidEmailFormat() {\n+    Map<String, Object> req = getRequestDataForOrgCreate(basicRequestData);\n+    req.put(JsonKey.EMAIL, \"invalid_email_format.com\");\n+    boolean result =\n+        testScenario(\n+            getRequest(req, ActorOperations.CREATE_ORG.getValue()), ResponseCode.emailFormatError);\n     assertTrue(result);\n   }\n \n   @Test\n-  public void testAddUserToOrgSuccessWithUserIdAndOrgExtId() {\n-\n+  public void testCreateOrgFailureWithInvalidOrgTypeValue() {\n+    Map<String, Object> req = getRequestDataForOrgCreate(basicRequestData);\n+    req.put(JsonKey.ORG_TYPE, \"invalidValue\");\n     boolean result =\n         testScenario(\n-            getRequest(\n-                getRequestData(true, false, false, true, basicRequestData), ADD_MEMBER_TO_ORG),\n-            null);\n+            getRequest(req, ActorOperations.CREATE_ORG.getValue()), ResponseCode.invalidValue);\n     assertTrue(result);\n   }\n \n-  // @Test\n-  public void testAddUserToOrgFailureWithUserNotFoundWithUserId() {\n+  @Test\n+  public void testCreateOrgFailureWithDuplicateChannel() {\n+    Map<String, Object> req = getRequestDataForOrgCreate(basicRequestData);\n+    req.put(JsonKey.ORG_TYPE, \"board\");\n+    req.put(JsonKey.IS_TENANT, true);\n     boolean result =\n         testScenario(\n-            getRequest(\n-                getRequestData(true, false, true, true, basicRequestData), ADD_MEMBER_TO_ORG),\n-            ResponseCode.invalidUsrData);\n+            getRequest(req, ActorOperations.CREATE_ORG.getValue()),\n+            ResponseCode.channelUniquenessInvalid);\n     assertTrue(result);\n   }\n \n   @Test\n-  public void testAddUserToOrgFailureWithOrgNotFoundWithOrgId() {\n+  public void testCreateOrgSuccessWithExternalIdAndProvider() {\n+    when(cassandraOperation.getRecordsByCompositeKey(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getRecordsByProperty(true));\n+    when(cassandraOperation.insertRecord(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getSuccess());\n     Promise<Map<String, Object>> promise = Futures.promise();\n-    promise.success(getEsResponse(true));\n+    promise.success(getValidateChannelEsResponse(true));\n+\n     when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n         .thenReturn(promise.future());\n-    boolean result =\n-        testScenario(\n-            getRequest(\n-                getRequestData(true, false, true, true, basicRequestData), ADD_MEMBER_TO_ORG),\n-            ResponseCode.invalidOrgData);\n+    Request req =\n+        getRequest(\n+            getRequestDataForOrgCreate(basicRequestData), ActorOperations.CREATE_ORG.getValue());\n+    boolean result = testScenario(req, null);\n     assertTrue(result);\n   }\n \n   @Test\n-  public void testAddUserToOrgFailureWithUserNotFoundWithUserExtId() {\n-    boolean result =\n-        testScenario(\n-            getRequest(\n-                getRequestData(false, false, true, true, basicRequestData), ADD_MEMBER_TO_ORG),\n-            ResponseCode.invalidUsrData);\n+  public void testCreateOrgSuccess() {\n+    when(cassandraOperation.getRecordsByCompositeKey(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getRecordsByProperty(true));\n+    when(cassandraOperation.insertRecord(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getSuccess());\n+    Promise<Map<String, Object>> promise = Futures.promise();\n+    Map<String, Object> esMap = getValidateChannelEsResponse(true);\n+    esMap.put(JsonKey.CONTENT, new ArrayList<>());\n+    promise.success(esMap);\n+\n+    when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n+        .thenReturn(promise.future());\n+\n+    Map<String, Object> req = getRequestDataForOrgCreate(basicRequestData);\n+    req.put(JsonKey.ADDRESS, new HashMap<>());\n+    req.put(JsonKey.HASHTAGID, \"orgId\");\n+    req.put(JsonKey.IS_TENANT, true);\n+    Request reqst = getRequest(req, ActorOperations.CREATE_ORG.getValue());\n+    reqst.getContext().put(JsonKey.CALLER_ID, JsonKey.BULK_ORG_UPLOAD);\n+    boolean result = testScenario(reqst, null);\n     assertTrue(result);\n   }\n \n   @Test\n-  public void testAddUserToOrgFailureWithOrgNotFoundWithOrgExtId() {\n+  public void testCreateOrgFailure() {\n+    when(cassandraOperation.getRecordsByCompositeKey(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getRecordsByProperty(true));\n+    when(cassandraOperation.insertRecord(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getSuccess());\n     Promise<Map<String, Object>> promise = Futures.promise();\n-    promise.success(getEsResponse(true));\n+    Map<String, Object> esMap = getValidateChannelEsResponse(true);\n+    esMap.put(JsonKey.CONTENT, new ArrayList<>());\n+    promise.success(esMap);\n+    Promise<Map<String, Object>> promise2 = Futures.promise();\n+    promise2.success(getValidateChannelEsResponse(true));\n+\n     when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n-        .thenReturn(promise.future());\n+        .thenReturn(promise.future())\n+        .thenReturn(promise2.future());\n+\n+    Map<String, Object> req = getRequestDataForOrgCreate(basicRequestData);\n+    req.put(JsonKey.IS_TENANT, true);\n     boolean result =\n         testScenario(\n-            getRequest(\n-                getRequestData(true, false, true, true, basicRequestData), ADD_MEMBER_TO_ORG),\n-            ResponseCode.invalidOrgData);\n+            getRequest(req, ActorOperations.CREATE_ORG.getValue()), ResponseCode.slugIsNotUnique);\n     assertTrue(result);\n   }\n \n   @Test\n-  public void testCreateOrgSuccessWithExternalIdAndProvider() {\n+  public void testCreateOrgFailure2() {\n     when(cassandraOperation.getRecordsByCompositeKey(\n             Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n         .thenReturn(getRecordsByProperty(true));\n     when(cassandraOperation.insertRecord(\n             Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n         .thenReturn(getSuccess());\n     Promise<Map<String, Object>> promise = Futures.promise();\n-    promise.success(getValidateChannelEsResponse(true));\n+    Map<String, Object> esMap = getValidateChannelEsResponse(true);\n+    esMap.put(JsonKey.CONTENT, new ArrayList<>());\n+    promise.success(esMap);\n+    Promise<Map<String, Object>> promise2 = Futures.promise();\n+    promise2.success(esMap);\n+\n+    Promise<Map<String, Object>> promise3 = Futures.promise();\n+    promise3.success(getValidateChannelEsResponse(true));\n \n     when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n-        .thenReturn(promise.future());\n+        .thenReturn(promise.future())\n+        .thenReturn(promise2.future())\n+        .thenReturn(promise3.future());\n+\n+    Map<String, Object> req = getRequestDataForOrgCreate(basicRequestData);\n+    req.put(JsonKey.IS_TENANT, true);\n+    req.put(JsonKey.HASHTAGID, \"orgId\");\n     boolean result =\n         testScenario(\n-            getRequest(\n-                getRequestDataForOrgCreate(basicRequestData),\n-                ActorOperations.CREATE_ORG.getValue()),\n-            null);\n+            getRequest(req, ActorOperations.CREATE_ORG.getValue()), ResponseCode.invalidHashTagId);\n     assertTrue(result);\n   }\n \n@@ -281,14 +326,38 @@ public void testUpdateOrgSuccess() {\n \n     when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n         .thenReturn(promise.future());\n+    when(Util.updateChannel(Mockito.anyMap(), Mockito.any())).thenReturn(true);\n+    Map<String, Object> req = getRequestDataForOrgUpdate();\n+    req.put(JsonKey.ADDRESS, new HashMap<>());\n+    req.put(JsonKey.HASHTAGID, \"orgId\");\n+    Request reqst = getRequest(req, ActorOperations.UPDATE_ORG.getValue());\n+    reqst.getContext().put(JsonKey.CALLER_ID, JsonKey.BULK_ORG_UPLOAD);\n+    boolean result = testScenario(reqst, null);\n+    assertTrue(result);\n+  }\n+\n+  @Test\n+  public void testUpdateOrgFailureWithInvalidReqData() {\n+    when(cassandraOperation.getRecordsByCompositeKey(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getRecordsByProperty(true));\n+    Promise<Map<String, Object>> promise = Futures.promise();\n+    promise.success(getValidateChannelEsResponse(true));\n+\n+    when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n+        .thenReturn(promise.future());\n+    when(Util.updateChannel(Mockito.anyMap(), Mockito.any())).thenReturn(true);\n+    Map<String, Object> req = getRequestDataForOrgUpdate();\n+    req.remove(JsonKey.ORGANISATION_ID);\n     boolean result =\n         testScenario(\n-            getRequest(getRequestDataForOrgUpdate(), ActorOperations.UPDATE_ORG.getValue()), null);\n+            getRequest(req, ActorOperations.UPDATE_ORG.getValue()),\n+            ResponseCode.invalidRequestData);\n     assertTrue(result);\n   }\n \n   @Test\n-  public void testUpdateOrgFailureWithDuplicateChannel() {\n+  public void testUpdateOrgFailureWithInvalidExternalAndProviderId() throws Exception {\n     when(cassandraOperation.getRecordsByCompositeKey(\n             Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n         .thenReturn(getRecordsByProperty(true));\n@@ -297,24 +366,78 @@ public void testUpdateOrgFailureWithDuplicateChannel() {\n \n     when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n         .thenReturn(promise.future());\n+    when(Util.updateChannel(Mockito.anyMap(), Mockito.any())).thenReturn(true);\n+    Map<String, Object> req = getRequestDataForOrgUpdate();\n+    req.remove(JsonKey.ORGANISATION_ID);\n+    req.put(JsonKey.EXTERNAL_ID, \"extId\");\n+    req.put(JsonKey.PROVIDER, \"provider\");\n+    OrgExternalService orgExternalService = PowerMockito.mock(OrgExternalService.class);\n+    whenNew(OrgExternalService.class).withNoArguments().thenReturn(orgExternalService);\n+    when(orgExternalService.getOrgIdFromOrgExternalIdAndProvider(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.any(RequestContext.class)))\n+        .thenReturn(\"\");\n+    boolean result =\n+        testScenario(\n+            getRequest(req, ActorOperations.UPDATE_ORG.getValue()),\n+            ResponseCode.invalidRequestData);\n+    assertTrue(result);\n+  }\n+\n+  @Test\n+  public void testUpdateOrgSuccess2() {\n+    Response res = getRecordsByProperty(true);\n+    res.getResult().put(JsonKey.EXTERNAL_ID, \"extId\");\n+    when(cassandraOperation.getRecordsByCompositeKey(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(res);\n+    Promise<Map<String, Object>> promise = Futures.promise();\n+    promise.success(getValidateChannelEsResponse(true));\n+\n+    when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n+        .thenReturn(promise.future());\n+    when(Util.updateChannel(Mockito.anyMap(), Mockito.any())).thenReturn(true);\n+    Map<String, Object> req = getRequestDataForOrgUpdate();\n+    req.remove(JsonKey.CHANNEL);\n+    req.put(JsonKey.EXTERNAL_ID, \"extId\");\n+    Request request =\n+        getRequest(\n+            getRequestDataForOrgCreate(basicRequestData), ActorOperations.CREATE_ORG.getValue());\n+    boolean result = testScenario(request, null);\n+    assertTrue(result);\n+  }\n+\n+  @Test\n+  public void testUpdateOrgFailureWithInvalidEmailFormat() {\n     Map<String, Object> map = getRequestDataForOrgUpdate();\n-    map.put(JsonKey.IS_ROOT_ORG, true);\n+    map.put(JsonKey.EMAIL, \"invalid_email_format.com\");\n     boolean result =\n         testScenario(\n-            getRequest(map, ActorOperations.UPDATE_ORG.getValue()),\n-            ResponseCode.channelUniquenessInvalid);\n+            getRequest(map, ActorOperations.UPDATE_ORG.getValue()), ResponseCode.emailFormatError);\n     assertTrue(result);\n   }\n \n-  private Response getOrgStatus() {\n-    Response res = new Response();\n-    List<Map<String, Object>> list = new ArrayList<>();\n-    Map<String, Object> map = new HashMap<>();\n-    map.put(JsonKey.STATUS, 1);\n-    map.put(JsonKey.ID, \"id\");\n-    list.add(map);\n-    res.put(JsonKey.RESPONSE, list);\n-    return res;\n+  @Test\n+  public void testUpdateOrgFailureWithDuplicateChannel() {\n+    when(cassandraOperation.getRecordsByCompositeKey(\n+            Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+        .thenReturn(getRecordsByProperty(true));\n+    Promise<Map<String, Object>> promise = Futures.promise();\n+    Map<String, Object> esMap = getValidateChannelEsResponse(true);\n+    List<Map<String, Object>> list = (List<Map<String, Object>>) esMap.get(JsonKey.CONTENT);\n+    Map<String, Object> data = list.get(0);\n+    data.put(JsonKey.ID, \"id\");\n+    promise.success(esMap);\n+\n+    when(esService.search(Mockito.any(), Mockito.anyString(), Mockito.any()))\n+        .thenReturn(promise.future());\n+    when(Util.updateChannel(Mockito.anyMap(), Mockito.any())).thenReturn(true);\n+    Map<String, Object> map = getRequestDataForOrgUpdate();\n+    map.put(JsonKey.IS_TENANT, true);\n+    boolean result =\n+        testScenario(\n+            getRequest(map, ActorOperations.UPDATE_ORG.getValue()),\n+            ResponseCode.channelUniquenessInvalid);\n+    assertTrue(result);\n   }\n \n   private Response getSuccess() {\n@@ -327,50 +450,40 @@ private Response getSuccess() {\n     Map<String, Object> map = new HashMap<>();\n     map.put(JsonKey.CHANNEL, \"channel\");\n     map.put(JsonKey.ORGANISATION_ID, \"orgId\");\n+    map.put(JsonKey.ORG_TYPE, \"board\");\n     return map;\n   }\n \n   private Map<String, Object> getRequestDataForOrgCreate(Map<String, Object> map) {\n     map.put(JsonKey.CHANNEL, \"channel\");\n-    map.put(JsonKey.IS_ROOT_ORG, false);\n+    map.put(JsonKey.IS_TENANT, false);\n     map.put(JsonKey.EXTERNAL_ID, \"externalId\");\n+    map.put(JsonKey.ORG_TYPE, \"board\");\n \n     return map;\n   }\n \n-  private Map<String, Object> getRequestData(\n-      boolean userId, boolean orgId, boolean userExtId, boolean OrgExtId, Map<String, Object> map) {\n-    List<String> rolesList = new ArrayList<>();\n-    rolesList.add(\"dummyRole\");\n-    map.put(JsonKey.ROLES, rolesList);\n-    if (userId) {\n-      map.put(JsonKey.USER_ID, \"userId\");\n-    }\n-    if (orgId) {\n-      map.put(JsonKey.ORGANISATION_ID, \"orgId\");\n-    }\n-    if (userExtId) {\n-      map.put(JsonKey.USER_EXTERNAL_ID, \"userExtId\");\n-    }\n-    if (OrgExtId) {\n-      map.put(JsonKey.EXTERNAL_ID, \"externalId\");\n-    }\n-    return map;\n-  }\n-\n   private Response getRecordsByProperty(boolean empty) {\n     Response res = new Response();\n     List<Map<String, Object>> list = new ArrayList<>();\n     if (!empty) {\n       Map<String, Object> map = new HashMap<>();\n-      map.put(JsonKey.ID, \"userId\");\n+      map.put(JsonKey.ID, \"orgId\");\n       map.put(JsonKey.IS_DELETED, true);\n+      map.put(JsonKey.CHANNEL, \"channel1\");\n+      map.put(JsonKey.IS_TENANT, true);\n       list.add(map);\n     }\n     res.put(JsonKey.RESPONSE, list);\n     return res;\n   }\n \n+  private Response getUpsertRecords() {\n+    Response res = new Response();\n+    res.put(JsonKey.RESPONSE, JsonKey.SUCCESS);\n+    return res;\n+  }\n+\n   private Response getAllRecords() {\n     Response res = new Response();\n     List<Map<String, Object>> list = new ArrayList<>();\n@@ -389,6 +502,7 @@ private Response getAllRecords() {\n       Map<String, Object> content = new HashMap<>();\n       content.put(JsonKey.ORGANISATION_ID, \"orgId\");\n       content.put(JsonKey.HASHTAGID, \"hashtagId\");\n+      content.put(JsonKey.ID, \"id\");\n       contentList.add(content);\n     }\n     response.put(JsonKey.CONTENT, contentList);\n@@ -401,7 +515,7 @@ private Response getAllRecords() {\n     if (isValidChannel) {\n       Map<String, Object> content = new HashMap<>();\n       content.put(JsonKey.STATUS, 1);\n-      content.put(JsonKey.ID, \"id\");\n+      content.put(JsonKey.ID, \"orgId\");\n       contentList.add(content);\n     }\n     response.put(JsonKey.CONTENT, contentList);"
  },
  {
    "sha": "5582f9c2197e72ea711ab2878d6d877b46c9fed5",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/SearchHandlerActorTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/SearchHandlerActorTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/SearchHandlerActorTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/SearchHandlerActorTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -135,12 +135,12 @@ public void searchUser() {\n     List<String> objectType = new ArrayList<String>();\n     objectType.add(\"user\");\n     filters.put(JsonKey.OBJECT_TYPE, objectType);\n-    filters.put(JsonKey.PROFILE_USERTYPE,\"teacher\");\n-    filters.put(JsonKey.PROFILE_LOCATION,\"location\");\n-    filters.put(JsonKey.USER_TYPE,\"userType\");\n-    filters.put(JsonKey.USER_SUB_TYPE,\"userSubType\");\n-    filters.put(JsonKey.LOCATION_ID,\"locationID\");\n-    filters.put(JsonKey.LOCATION_TYPE,\"type\");\n+    filters.put(JsonKey.PROFILE_USERTYPE, \"teacher\");\n+    filters.put(JsonKey.PROFILE_LOCATION, \"location\");\n+    filters.put(JsonKey.USER_TYPE, \"userType\");\n+    filters.put(JsonKey.USER_SUB_TYPE, \"userSubType\");\n+    filters.put(JsonKey.LOCATION_ID, \"locationID\");\n+    filters.put(JsonKey.LOCATION_TYPE, \"type\");\n     filters.put(JsonKey.ROOT_ORG_ID, \"ORG_001\");\n     innerMap.put(JsonKey.FILTERS, filters);\n     innerMap.put(JsonKey.LIMIT, 1);"
  },
  {
    "sha": "398b18be37db17619e12d5c5a7de79445b27cb79",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActorTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActorTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActorTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/bulkupload/BulkUploadManagementActorTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -354,7 +354,7 @@ private Response getCassandraRecordByIdForOrgResponse() {\n     List<Map<String, Object>> list = new ArrayList<>();\n     Map<String, Object> orgMap = new HashMap<>();\n     orgMap.put(JsonKey.ORGANISATION_ID, refOrgId);\n-    orgMap.put(JsonKey.IS_ROOT_ORG, true);\n+    orgMap.put(JsonKey.IS_TENANT, true);\n     orgMap.put(JsonKey.EXTERNAL_ID, \"externalId\");\n     orgMap.put(JsonKey.PROVIDER, \"provider\");\n     orgMap.put(JsonKey.ID, refOrgId);"
  },
  {
    "sha": "1d34274a9cc6edc615df0c3aebe462d040e77f7c",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActorTest.java",
    "status": "modified",
    "additions": 77,
    "deletions": 9,
    "changes": 86,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActorTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActorTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/actors/syncjobmanager/EsSyncBackgroundActorTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -68,14 +68,6 @@ public void beforeEachTest() {\n     when(EsClientFactory.getInstance(Mockito.anyString())).thenReturn(esService);\n     when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n \n-    when(cassandraOperation.getRecordsByProperty(\n-            Mockito.anyString(),\n-            Mockito.anyString(),\n-            Mockito.anyString(),\n-            Mockito.anyList(),\n-            Mockito.any()))\n-        .thenReturn(cassandraGetRecord());\n-\n     Promise<Boolean> promise = Futures.promise();\n     promise.success(true);\n \n@@ -85,6 +77,13 @@ public void beforeEachTest() {\n \n   @Test\n   public void testSync() {\n+    when(cassandraOperation.getRecordsByProperty(\n+            Mockito.anyString(),\n+            Mockito.anyString(),\n+            Mockito.anyString(),\n+            Mockito.anyList(),\n+            Mockito.any()))\n+        .thenReturn(cassandraGetLocationRecord());\n     TestKit probe = new TestKit(system);\n     ActorRef subject = system.actorOf(props);\n     Request reqObj = new Request();\n@@ -100,7 +99,76 @@ public void testSync() {\n     assertTrue(true);\n   }\n \n-  private static Response cassandraGetRecord() {\n+  @Test\n+  public void testSyncOrg() {\n+    when(cassandraOperation.getRecordsByProperty(\n+            Mockito.anyString(),\n+            Mockito.anyString(),\n+            Mockito.anyString(),\n+            Mockito.anyList(),\n+            Mockito.any()))\n+        .thenReturn(cassandraGetOrgRecord());\n+    TestKit probe = new TestKit(system);\n+    ActorRef subject = system.actorOf(props);\n+    Request reqObj = new Request();\n+    reqObj.setOperation(ActorOperations.BACKGROUND_SYNC.getValue());\n+    Map<String, Object> reqMap = new HashMap<>();\n+    List<String> ids = new ArrayList<>();\n+    ids.add(\"1544646556\");\n+    reqMap.put(JsonKey.OBJECT_IDS, ids);\n+    reqMap.put(JsonKey.OBJECT_TYPE, JsonKey.ORGANISATION);\n+    reqObj.getRequest().put(JsonKey.DATA, reqMap);\n+    subject.tell(reqObj, probe.getRef());\n+    probe.expectNoMessage();\n+    assertTrue(true);\n+  }\n+\n+  @Test\n+  public void testSyncOrgFailure() {\n+    Response response = cassandraGetOrgRecord();\n+    Map<String, Object> org =\n+        (Map<String, Object>) ((List) response.getResult().get(JsonKey.RESPONSE)).get(0);\n+    org.put(JsonKey.ORG_LOCATION, \"\\\"1\\\",\\\"type\\\":\\\"state\\\"},{\\\"id\\\":\\\"2\\\",\\\"type\\\":\\\"district\\\"}\");\n+    when(cassandraOperation.getRecordsByProperty(\n+            Mockito.anyString(),\n+            Mockito.anyString(),\n+            Mockito.anyString(),\n+            Mockito.anyList(),\n+            Mockito.any()))\n+        .thenReturn(cassandraGetOrgRecord());\n+    TestKit probe = new TestKit(system);\n+    ActorRef subject = system.actorOf(props);\n+    Request reqObj = new Request();\n+    reqObj.setOperation(ActorOperations.BACKGROUND_SYNC.getValue());\n+    Map<String, Object> reqMap = new HashMap<>();\n+    List<String> ids = new ArrayList<>();\n+    ids.add(\"1544646556\");\n+    reqMap.put(JsonKey.OBJECT_IDS, ids);\n+    reqMap.put(JsonKey.OBJECT_TYPE, JsonKey.ORGANISATION);\n+    reqObj.getRequest().put(JsonKey.DATA, reqMap);\n+    subject.tell(reqObj, probe.getRef());\n+    probe.expectNoMessage();\n+    assertTrue(true);\n+  }\n+\n+  private static Response cassandraGetOrgRecord() {\n+    Response response = new Response();\n+    List<Map<String, Object>> list = new ArrayList();\n+    Map<String, Object> map = new HashMap<>();\n+    map.put(JsonKey.ID, \"anyId\");\n+    map.put(JsonKey.ORG_TYPE, \"type\");\n+    map.put(JsonKey.ORG_NAME, \"name\");\n+    map.put(JsonKey.CHANNEL, \"ch\");\n+    map.put(JsonKey.ADDRESS_ID, \"454981351\");\n+    map.put(\n+        JsonKey.ORG_LOCATION,\n+        \"[{\\\"id\\\":\\\"1\\\",\\\"type\\\":\\\"state\\\"},{\\\"id\\\":\\\"2\\\",\\\"type\\\":\\\"district\\\"}]\");\n+    list.add(map);\n+    response.put(JsonKey.RESPONSE, list);\n+    return response;\n+  }\n+\n+  private static Response cassandraGetLocationRecord() {\n     Response response = new Response();\n     List<Map<String, Object>> list = new ArrayList();\n     Map<String, Object> map = new HashMap<>();"
  },
  {
    "sha": "45f300fc73e5e431c4ad6901f0e594044642b7f4",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImplTest.java",
    "status": "modified",
    "additions": 54,
    "deletions": 64,
    "changes": 118,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImplTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImplTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/dao/impl/OrgDaoImplTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,15 +1,13 @@\n package org.sunbird.learner.organisation.dao.impl;\n \n-import static org.powermock.api.mockito.PowerMockito.mock;\n import static org.powermock.api.mockito.PowerMockito.when;\n \n-import akka.dispatch.Futures;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import org.junit.Assert;\n-import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mockito;\n@@ -20,27 +18,22 @@\n import org.sunbird.cassandra.CassandraOperation;\n import org.sunbird.cassandraimpl.CassandraOperationImpl;\n import org.sunbird.common.CassandraUtil;\n-import org.sunbird.common.ElasticSearchHelper;\n-import org.sunbird.common.ElasticSearchRestHighImpl;\n-import org.sunbird.common.factory.EsClientFactory;\n-import org.sunbird.common.inf.ElasticSearchService;\n import org.sunbird.common.models.response.Response;\n import org.sunbird.common.models.util.JsonKey;\n import org.sunbird.common.request.RequestContext;\n import org.sunbird.helper.ServiceFactory;\n import org.sunbird.learner.organisation.dao.OrgDao;\n+import org.sunbird.learner.organisation.external.identity.service.OrgExternalService;\n import org.sunbird.learner.util.Util;\n-import scala.concurrent.Promise;\n+import org.sunbird.models.organisation.OrgTypeEnum;\n \n @RunWith(PowerMockRunner.class)\n @PrepareForTest({\n   CassandraOperationImpl.class,\n   ServiceFactory.class,\n   CassandraOperation.class,\n   CassandraUtil.class,\n-  ElasticSearchRestHighImpl.class,\n-  ElasticSearchHelper.class,\n-  EsClientFactory.class,\n+  OrgExternalService.class,\n   Util.class\n })\n @PowerMockIgnore({\n@@ -52,35 +45,35 @@\n })\n public class OrgDaoImplTest {\n \n-  private CassandraOperation cassandraOperation;\n-  private static ElasticSearchService esService;\n+  private static CassandraOperation cassandraOperation;\n+  private static OrgExternalService orgExternalService = null;\n \n-  @Before\n-  public void setUp() {\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n     PowerMockito.mockStatic(Util.class);\n-    PowerMockito.mockStatic(EsClientFactory.class);\n-    esService = mock(ElasticSearchRestHighImpl.class);\n-    when(EsClientFactory.getInstance(Mockito.anyString())).thenReturn(esService);\n+    orgExternalService = PowerMockito.mock(OrgExternalService.class);\n+    PowerMockito.whenNew(OrgExternalService.class).withNoArguments().thenReturn(orgExternalService);\n+    cassandraOperation = PowerMockito.mock(CassandraOperation.class);\n+    PowerMockito.mockStatic(ServiceFactory.class);\n+    when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n   }\n \n   @Test\n   public void testGetOrgById() {\n     try {\n-      cassandraOperation = PowerMockito.mock(CassandraOperation.class);\n-      PowerMockito.mockStatic(ServiceFactory.class);\n-      when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n       Response response = new Response();\n       List<Map<String, Object>> orgList = new ArrayList<>();\n       Map<String, Object> map = new HashMap<>();\n       map.put(JsonKey.CONTACT_DETAILS, \"contact\");\n       map.put(JsonKey.ID, \"contact\");\n+      map.put(JsonKey.ORG_TYPE, OrgTypeEnum.BOARD.getValue());\n+      map.put(\n+          JsonKey.ORG_LOCATION,\n+          \"[{\\\"id\\\":\\\"1\\\",\\\"type\\\":\\\"state\\\"},{\\\"id\\\":\\\"2\\\",\\\"type\\\":\\\"district\\\"}]\");\n       orgList.add(map);\n       response.put(JsonKey.RESPONSE, orgList);\n       when(cassandraOperation.getRecordById(\n-              Mockito.anyString(),\n-              Mockito.anyString(),\n-              Mockito.anyString(),\n-              Mockito.any(RequestContext.class)))\n+              Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any()))\n           .thenReturn(response);\n       OrgDao orgDao = OrgDaoImpl.getInstance();\n       Map<String, Object> resp = orgDao.getOrgById(\"1234567890\", null);\n@@ -94,9 +87,6 @@ public void testGetOrgById() {\n   @Test\n   public void testGetOrgByIdWithEmptyResponse() {\n     try {\n-      cassandraOperation = PowerMockito.mock(CassandraOperation.class);\n-      PowerMockito.mockStatic(ServiceFactory.class);\n-      when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n       Response response = new Response();\n       List<Map<String, Object>> orgList = new ArrayList<>();\n       response.put(JsonKey.RESPONSE, orgList);\n@@ -118,12 +108,26 @@ public void testGetOrgByIdWithEmptyResponse() {\n   @Test\n   public void testGetOrgByExternalId() {\n     try {\n-      PowerMockito.mockStatic(EsClientFactory.class);\n-      ElasticSearchService esService = mock(ElasticSearchRestHighImpl.class);\n-      when(EsClientFactory.getInstance(Mockito.anyString())).thenReturn(esService);\n-      setEsSearchResponse(getOrgSearchResponseMap());\n+      Response response = new Response();\n+      List<Map<String, Object>> orgList = new ArrayList<>();\n+      Map<String, Object> map = new HashMap<>();\n+      map.put(JsonKey.CONTACT_DETAILS, \"contact\");\n+      map.put(JsonKey.ID, \"contact\");\n+      orgList.add(map);\n+      response.put(JsonKey.RESPONSE, orgList);\n+      when(cassandraOperation.getRecordById(\n+              Mockito.anyString(),\n+              Mockito.anyString(),\n+              Mockito.anyString(),\n+              Mockito.any(RequestContext.class)))\n+          .thenReturn(response);\n+\n+      PowerMockito.when(\n+              orgExternalService.getOrgIdFromOrgExternalIdAndProvider(\n+                  Mockito.anyString(), Mockito.anyString(), Mockito.any(RequestContext.class)))\n+          .thenReturn(\"\");\n       OrgDao orgDao = OrgDaoImpl.getInstance();\n-      Map<String, Object> resp = orgDao.esGetOrgByExternalId(\"1234567890\", \"provider\", null);\n+      Map<String, Object> resp = orgDao.getOrgByExternalId(\"1234567890\", \"provider\", null);\n       Assert.assertNotNull(resp);\n \n     } catch (Exception e) {\n@@ -134,42 +138,28 @@ public void testGetOrgByExternalId() {\n   @Test\n   public void testGetOrgByExternalIdWithEmptyResponse() {\n     try {\n-      PowerMockito.mockStatic(EsClientFactory.class);\n-      ElasticSearchService esService = mock(ElasticSearchRestHighImpl.class);\n-      when(EsClientFactory.getInstance(Mockito.anyString())).thenReturn(esService);\n-      setEsSearchResponse(getOrgSearchEmptyResponseMap());\n+      cassandraOperation = PowerMockito.mock(CassandraOperation.class);\n+      PowerMockito.mockStatic(ServiceFactory.class);\n+      when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n+      Response response = new Response();\n+      List<Map<String, Object>> orgList = new ArrayList<>();\n+      response.put(JsonKey.RESPONSE, orgList);\n+      when(cassandraOperation.getRecordById(\n+              Mockito.anyString(),\n+              Mockito.anyString(),\n+              Mockito.anyString(),\n+              Mockito.any(RequestContext.class)))\n+          .thenReturn(response);\n+      PowerMockito.when(\n+              orgExternalService.getOrgIdFromOrgExternalIdAndProvider(\n+                  Mockito.anyString(), Mockito.anyString(), Mockito.any(RequestContext.class)))\n+          .thenReturn(\"\");\n       OrgDao orgDao = OrgDaoImpl.getInstance();\n-      Map<String, Object> resp = orgDao.esGetOrgByExternalId(\"1234567890\", \"provider\", null);\n+      Map<String, Object> resp = orgDao.getOrgByExternalId(\"1234567890\", \"provider\", null);\n       Assert.assertNotNull(resp);\n \n     } catch (Exception e) {\n       Assert.assertNotNull(e);\n     }\n   }\n-\n-  public void setEsSearchResponse(Map<String, Object> esResponse) {\n-    Promise<Map<String, Object>> promise = Futures.promise();\n-    promise.success(esResponse);\n-    when(esService.search(\n-            Mockito.anyObject(), Mockito.anyString(), Mockito.any(RequestContext.class)))\n-        .thenReturn(promise.future());\n-  }\n-\n-  private static Map<String, Object> getOrgSearchResponseMap() {\n-    Map<String, Object> map = new HashMap<>();\n-    Map<String, Object> response = new HashMap<>();\n-    response.put(JsonKey.ID, \"123\");\n-    response.put(JsonKey.ORG_NAME, \"Name\");\n-    List contentList = new ArrayList<>();\n-    contentList.add(response);\n-    map.put(JsonKey.CONTENT, contentList);\n-    return map;\n-  }\n-\n-  private static Map<String, Object> getOrgSearchEmptyResponseMap() {\n-    Map<String, Object> map = new HashMap<>();\n-    List contentList = new ArrayList<>();\n-    map.put(JsonKey.CONTENT, contentList);\n-    return map;\n-  }\n }"
  },
  {
    "sha": "2260928ccacf68771c0beb1791465cb2b19180cd",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalServiceTest.java",
    "status": "modified",
    "additions": 66,
    "deletions": 2,
    "changes": 68,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalServiceTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalServiceTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalServiceTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -10,6 +10,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n import org.powermock.api.mockito.PowerMockito;\n import org.powermock.core.classloader.annotations.PowerMockIgnore;\n import org.powermock.core.classloader.annotations.PrepareForTest;\n@@ -27,13 +28,19 @@\n   CassandraOperationImpl.class,\n   ServiceFactory.class,\n   CassandraOperation.class,\n-  CassandraUtil.class\n+  CassandraUtil.class,\n+  Util.class\n })\n @PowerMockIgnore({\n   \"javax.management.*\",\n   \"javax.net.ssl.*\",\n   \"javax.security.*\",\n-  \"jdk.internal.reflect.*\"\n+  \"jdk.internal.reflect.*\",\n+  \"javax.crypto.*\",\n+  \"javax.script.*\",\n+  \"javax.xml.*\",\n+  \"com.sun.org.apache.xerces.*\",\n+  \"org.xml.*\"\n })\n public class OrgExternalServiceTest {\n \n@@ -47,6 +54,7 @@ public void setUp() {\n     cassandraOperation = PowerMockito.mock(CassandraOperation.class);\n     PowerMockito.mockStatic(ServiceFactory.class);\n     when(ServiceFactory.getInstance()).thenReturn(cassandraOperation);\n+    PowerMockito.mockStatic(Util.class);\n   }\n \n   @Test\n@@ -97,4 +105,60 @@ public void testGetOrgIdFromOrgExtIdSuccess() {\n       Assert.assertTrue(false);\n     }\n   }\n+\n+  @Test\n+  public void testGetOrgByOrgExtIdSuccess() {\n+    try {\n+      Map<String, Object> dbRequestMap = new HashMap<>();\n+      dbRequestMap.put(JsonKey.EXTERNAL_ID, \"orgextid\");\n+      dbRequestMap.put(JsonKey.PROVIDER, \"provider\");\n+      Response response = new Response();\n+      List<Map<String, Object>> orgList = new ArrayList<>();\n+      Map<String, Object> map = new HashMap<>();\n+      map.put(JsonKey.ORG_ID, \"anyOrgId\");\n+      orgList.add(map);\n+      response.put(JsonKey.RESPONSE, orgList);\n+      when(cassandraOperation.getRecordsByCompositeKey(\n+              Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+          .thenReturn(response);\n+      when(cassandraOperation.getRecordById(\n+              Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any()))\n+          .thenReturn(response);\n+      Map<String, Object> resp =\n+          orgExternalService.getOrgByOrgExternalIdAndProvider(\"OrgExtid\", \"provider\", null);\n+      Assert.assertNotNull(resp);\n+\n+    } catch (Exception e) {\n+      Assert.assertTrue(false);\n+    }\n+  }\n+\n+  @Test\n+  public void testGetEmptyOrgByOrgExtIdSuccess() {\n+    try {\n+      Map<String, Object> dbRequestMap = new HashMap<>();\n+      dbRequestMap.put(JsonKey.EXTERNAL_ID, \"orgextid\");\n+      dbRequestMap.put(JsonKey.PROVIDER, \"provider\");\n+      Response response = new Response();\n+      List<Map<String, Object>> orgList = new ArrayList<>();\n+      Map<String, Object> map = new HashMap<>();\n+      map.put(JsonKey.ORG_ID, \"anyOrgId\");\n+      orgList.add(map);\n+      response.put(JsonKey.RESPONSE, orgList);\n+      when(cassandraOperation.getRecordsByCompositeKey(\n+              Mockito.anyString(), Mockito.anyString(), Mockito.anyMap(), Mockito.any()))\n+          .thenReturn(response);\n+      Response response1 = new Response();\n+      response1.put(JsonKey.RESPONSE, null);\n+      when(cassandraOperation.getRecordById(\n+              Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any()))\n+          .thenReturn(response1);\n+      Map<String, Object> resp =\n+          orgExternalService.getOrgByOrgExternalIdAndProvider(\"OrgExtid\", \"provider\", null);\n+      Assert.assertNotNull(resp);\n+\n+    } catch (Exception e) {\n+      Assert.assertTrue(false);\n+    }\n+  }\n }"
  },
  {
    "sha": "8cab4724b05d3f49fa12edf5fcf72b7d8565e662",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/service/impl/OrgServiceImplTest.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/service/impl/OrgServiceImplTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/service/impl/OrgServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/organisation/service/impl/OrgServiceImplTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -0,0 +1,63 @@\n+package org.sunbird.learner.organisation.service.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.sunbird.common.models.util.JsonKey;\n+import org.sunbird.common.request.RequestContext;\n+import org.sunbird.learner.organisation.dao.OrgDao;\n+import org.sunbird.learner.organisation.dao.impl.OrgDaoImpl;\n+import org.sunbird.learner.organisation.service.OrgService;\n+import org.sunbird.learner.util.Util;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({OrgDao.class, OrgDaoImpl.class, Util.class})\n+@PowerMockIgnore({\n+  \"javax.management.*\",\n+  \"javax.net.ssl.*\",\n+  \"javax.security.*\",\n+  \"jdk.internal.reflect.*\",\n+  \"javax.crypto.*\",\n+  \"javax.script.*\",\n+  \"javax.xml.*\",\n+  \"com.sun.org.apache.xerces.*\",\n+  \"org.xml.*\"\n+})\n+public class OrgServiceImplTest {\n+  private OrgService orgService = null;\n+\n+  @Before\n+  public void setUp() {\n+    PowerMockito.mockStatic(OrgDaoImpl.class);\n+    OrgDao orgDao = PowerMockito.mock(OrgDao.class);\n+    PowerMockito.when(OrgDaoImpl.getInstance()).thenReturn(orgDao);\n+    Map<String, Object> map = new HashMap<>();\n+    map.put(JsonKey.ORG_ID, \"anyOrgId\");\n+    PowerMockito.when(\n+            orgDao.getOrgByExternalId(Mockito.anyString(), Mockito.anyString(), Mockito.any()))\n+        .thenReturn(map);\n+    PowerMockito.when(orgDao.getOrgById(Mockito.anyString(), Mockito.any())).thenReturn(map);\n+    orgService = OrgServiceImpl.getInstance();\n+  }\n+\n+  @Test\n+  public void testGetOrgById() {\n+    Map<String, Object> map = orgService.getOrgById(\"id\", new RequestContext());\n+    Assert.assertNotNull(map);\n+  }\n+\n+  @Test\n+  public void testGetOrgByExternalIdAndProvider() {\n+    Map<String, Object> map =\n+        orgService.getOrgByExternalIdAndProvider(\"extId\", \"provider\", new RequestContext());\n+    Assert.assertNotNull(map);\n+  }\n+}"
  },
  {
    "sha": "82a893c6b66d87894ceef20ff2440fdea49ae609",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UserUtilityTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 20,
    "changes": 40,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UserUtilityTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UserUtilityTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UserUtilityTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -21,12 +21,12 @@ public void encryptSpecificUserDataSuccess() {\n     userMap.put(JsonKey.FIRST_NAME, \"test user\");\n     userMap.put(JsonKey.EMAIL, email);\n     userMap.put(JsonKey.USER_NAME, userName);\n-    userMap.put(JsonKey.PROFILE_USERTYPE,\"teacher\");\n-    userMap.put(JsonKey.PROFILE_LOCATION,\"location\");\n-    userMap.put(JsonKey.USER_TYPE,\"userType\");\n-    userMap.put(JsonKey.USER_SUB_TYPE,\"userSubType\");\n-    userMap.put(JsonKey.LOCATION_ID,\"locationID\");\n-    userMap.put(JsonKey.LOCATION_TYPE,\"type\");\n+    userMap.put(JsonKey.PROFILE_USERTYPE, \"teacher\");\n+    userMap.put(JsonKey.PROFILE_LOCATION, \"location\");\n+    userMap.put(JsonKey.USER_TYPE, \"userType\");\n+    userMap.put(JsonKey.USER_SUB_TYPE, \"userSubType\");\n+    userMap.put(JsonKey.LOCATION_ID, \"locationID\");\n+    userMap.put(JsonKey.LOCATION_TYPE, \"type\");\n     List<Map<String, Object>> addressList = new ArrayList<Map<String, Object>>();\n     Map<String, Object> address = new HashMap<String, Object>();\n     address.put(JsonKey.COUNTRY, \"India\");\n@@ -60,9 +60,9 @@ public void encryptUserSearchFilterQueryDataUserType() {\n     String city = \"Bangalore\";\n     String addressLine1 = \"xyz\";\n     Map<String, Object> filterMap = new HashMap<String, Object>();\n-    filterMap.put(JsonKey.USER_TYPE,\"userType\");\n+    filterMap.put(JsonKey.USER_TYPE, \"userType\");\n     Map<String, Object> map = new HashMap<String, Object>();\n-    map.put(JsonKey.FILTERS,filterMap);\n+    map.put(JsonKey.FILTERS, filterMap);\n     Map<String, Object> response = null;\n     try {\n       response = UserUtility.encryptUserSearchFilterQueryData(map);\n@@ -80,9 +80,9 @@ public void encryptUserSearchFilterQueryDataUserSubType() {\n     String city = \"Bangalore\";\n     String addressLine1 = \"xyz\";\n     Map<String, Object> filterMap = new HashMap<String, Object>();\n-    filterMap.put(JsonKey.USER_SUB_TYPE,\"userSubType\");\n+    filterMap.put(JsonKey.USER_SUB_TYPE, \"userSubType\");\n     Map<String, Object> map = new HashMap<String, Object>();\n-    map.put(JsonKey.FILTERS,filterMap);\n+    map.put(JsonKey.FILTERS, filterMap);\n     Map<String, Object> response = null;\n     try {\n       response = UserUtility.encryptUserSearchFilterQueryData(map);\n@@ -100,9 +100,9 @@ public void encryptUserSearchFilterQueryDataLocationID() {\n     String city = \"Bangalore\";\n     String addressLine1 = \"xyz\";\n     Map<String, Object> filterMap = new HashMap<String, Object>();\n-    filterMap.put(JsonKey.LOCATION_ID,\"locationID\");\n+    filterMap.put(JsonKey.LOCATION_ID, \"locationID\");\n     Map<String, Object> map = new HashMap<String, Object>();\n-    map.put(JsonKey.FILTERS,filterMap);\n+    map.put(JsonKey.FILTERS, filterMap);\n     Map<String, Object> response = null;\n     try {\n       response = UserUtility.encryptUserSearchFilterQueryData(map);\n@@ -120,9 +120,9 @@ public void encryptUserSearchFilterQueryDataLocationType() {\n     String city = \"Bangalore\";\n     String addressLine1 = \"xyz\";\n     Map<String, Object> filterMap = new HashMap<String, Object>();\n-    filterMap.put(JsonKey.LOCATION_TYPE,\"type\");\n+    filterMap.put(JsonKey.LOCATION_TYPE, \"type\");\n     Map<String, Object> map = new HashMap<String, Object>();\n-    map.put(JsonKey.FILTERS,filterMap);\n+    map.put(JsonKey.FILTERS, filterMap);\n     Map<String, Object> response = null;\n     try {\n       response = UserUtility.encryptUserSearchFilterQueryData(map);\n@@ -167,12 +167,12 @@ public void decryptUserDataSuccess() {\n     userMap.put(JsonKey.FIRST_NAME, \"test user\");\n     userMap.put(JsonKey.EMAIL, email);\n     userMap.put(JsonKey.USER_NAME, userName);\n-    userMap.put(JsonKey.PROFILE_USERTYPE,\"teacher\");\n-    userMap.put(JsonKey.PROFILE_LOCATION,\"location\");\n-    userMap.put(JsonKey.USER_TYPE,\"userType\");\n-    userMap.put(JsonKey.USER_SUB_TYPE,\"userSubType\");\n-    userMap.put(JsonKey.LOCATION_ID,\"locationID\");\n-    userMap.put(JsonKey.LOCATION_TYPE,\"type\");\n+    userMap.put(JsonKey.PROFILE_USERTYPE, \"teacher\");\n+    userMap.put(JsonKey.PROFILE_LOCATION, \"location\");\n+    userMap.put(JsonKey.USER_TYPE, \"userType\");\n+    userMap.put(JsonKey.USER_SUB_TYPE, \"userSubType\");\n+    userMap.put(JsonKey.LOCATION_ID, \"locationID\");\n+    userMap.put(JsonKey.LOCATION_TYPE, \"type\");\n     List<Map<String, Object>> addressList = new ArrayList<Map<String, Object>>();\n     Map<String, Object> address = new HashMap<String, Object>();\n     address.put(JsonKey.COUNTRY, \"India\");"
  },
  {
    "sha": "c7f12d850762aee5974396c1ad6b1bcf095df70f",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UtilTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UtilTest.java",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UtilTest.java",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/java/org/sunbird/learner/util/UtilTest.java?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -90,7 +90,7 @@ public void testGetUserOrgDetails() {\n \n   public static Map<String, Object> getEsResponseMap() {\n     Map<String, Object> map = new HashMap<>();\n-    map.put(JsonKey.IS_ROOT_ORG, true);\n+    map.put(JsonKey.IS_TENANT, true);\n     map.put(JsonKey.ID, \"rootOrgId\");\n     map.put(JsonKey.CHANNEL, \"anyChannel\");\n     return map;\n@@ -99,7 +99,7 @@ public void testGetUserOrgDetails() {\n   public static Map<String, Map<String, Object>> getEs2ResponseMap() {\n     Map<String, Map<String, Object>> map2 = new HashMap<>();\n     Map<String, Object> map = new HashMap<>();\n-    map.put(JsonKey.IS_ROOT_ORG, true);\n+    map.put(JsonKey.IS_TENANT, true);\n     map.put(JsonKey.ID, \"rootOrgId\");\n     map.put(JsonKey.CHANNEL, \"anyChannel\");\n     map2.put(JsonKey.RESPONSE, map);"
  },
  {
    "sha": "a1023be3e6cf14f4d5880ab0a51f8eb91fc86617",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadEmptyFile.csv",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadEmptyFile.csv",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadEmptyFile.csv",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadEmptyFile.csv?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1 +1 @@\n-orgName,isRootOrg,channel,externalId,provider,description,homeUrl,orgCode,orgType,preferredLanguage,theme,contactDetail,hashTagId\n\\ No newline at end of file\n+orgName,isTenant,channel,externalId,provider,description,homeUrl,orgCode,organisationType,preferredLanguage,theme,contactDetail,hashTagId\n\\ No newline at end of file"
  },
  {
    "sha": "6ff22d5c4528e8f47f8a7a6ea152bd2c58ec960a",
    "filename": "actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadSample.csv",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/project-sunbird/sunbird-lms-service/blob/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadSample.csv",
    "raw_url": "https://github.com/project-sunbird/sunbird-lms-service/raw/2047f0f18bc05fd975f65aea37f625494c75bca2/actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadSample.csv",
    "contents_url": "https://api.github.com/repos/project-sunbird/sunbird-lms-service/contents/actors/sunbird-lms-mw/actors/common/src/test/resources/BulkOrgUploadSample.csv?ref=2047f0f18bc05fd975f65aea37f625494c75bca2",
    "patch": "@@ -1,2 +1,2 @@\n-orgName,isRootOrg,channel,externalId,provider,description,homeUrl,orgCode,orgType,preferredLanguage,theme,contactDetail,hashTagId\n+orgName,isTenant,channel,externalId,provider,description,homeUrl,orgCode,organisationType,preferredLanguage,theme,contactDetail,hashTagId\n hello001,false,,1119,ugc,technical,googlehome,122,,hindi,sunbied,\"[{'name':'abcd','age':110},{'fax':123456}]\",ggy6dnuyy7ct4\n\\ No newline at end of file"
  }
]
