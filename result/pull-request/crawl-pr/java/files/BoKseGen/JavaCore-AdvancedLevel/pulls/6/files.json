[
  {
    "sha": "36d823c8c1a4367284a1333a4f1b69cfb80c8c50",
    "filename": "HW6/Client.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/BoKseGen/JavaCore-AdvancedLevel/blob/e6230cea94ed9d786310d241881822f31522296c/HW6/Client.java",
    "raw_url": "https://github.com/BoKseGen/JavaCore-AdvancedLevel/raw/e6230cea94ed9d786310d241881822f31522296c/HW6/Client.java",
    "contents_url": "https://api.github.com/repos/BoKseGen/JavaCore-AdvancedLevel/contents/HW6/Client.java?ref=e6230cea94ed9d786310d241881822f31522296c",
    "patch": "@@ -0,0 +1,74 @@\n+package anotherAttempt;\n+\n+import java.io.*;\n+import java.net.Socket;\n+import java.net.UnknownHostException;\n+import java.util.Scanner;\n+\n+public class Client {\n+\n+    private static final String SERVER_ADDR = \"localhost\";\n+    private static final int SERVER_PORT = 8200;\n+    private static final String stopWord = \"stop\";\n+\n+    private static Scanner consoleReader = new Scanner(System.in);\n+    private static Socket clientSocket;\n+    private static BufferedReader in;\n+    private static PrintWriter out;\n+\n+    public static void main(String[] args){\n+        startClient();\n+    }\n+\n+    private static void startClient(){\n+\n+        try {\n+            clientSocket = new Socket(SERVER_ADDR, SERVER_PORT);\n+            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n+            out = new PrintWriter(clientSocket.getOutputStream());\n+\n+            sendMessageToServer(out, consoleReader); //поток для отправки сообщений\n+            readMessageFromServer(in);\n+\n+        } catch (IOException ioException) {\n+            ioException.printStackTrace();\n+        } finally { // в любом случае необходимо закрыть сокет и потоки\n+            try {\n+                in.close();\n+                out.close();\n+                clientSocket.close();\n+//                consoleReader.close();\n+            } catch (IOException ioException) {\n+                ioException.printStackTrace();\n+            }\n+            System.out.println(\"You've been disconnected from server\");\n+        }\n+    }\n+\n+    private static void sendMessageToServer(PrintWriter out, Scanner consoleReader){\n+        Thread writeToServer = new Thread(() -> {\n+            String messageToServer;\n+            while(true){\n+                messageToServer = consoleReader.nextLine();\n+                out.println(messageToServer);\n+                out.flush();\n+            }\n+        });\n+        writeToServer.setDaemon(true);\n+        writeToServer.start();\n+    }\n+\n+    private static void readMessageFromServer(BufferedReader in){\n+        String serverMessage = \"\";\n+        try {\n+            while ((serverMessage = in.readLine()) != null) {\n+                if (serverMessage.equalsIgnoreCase(stopWord)){\n+                    break;\n+                }\n+                System.out.println(\"Message from server : \" + serverMessage);\n+            }\n+        } catch (IOException ioException){\n+            ioException.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "ec3ba7a1356168e1c7330f4ae86b5947cfade781",
    "filename": "HW6/Server.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/BoKseGen/JavaCore-AdvancedLevel/blob/e6230cea94ed9d786310d241881822f31522296c/HW6/Server.java",
    "raw_url": "https://github.com/BoKseGen/JavaCore-AdvancedLevel/raw/e6230cea94ed9d786310d241881822f31522296c/HW6/Server.java",
    "contents_url": "https://api.github.com/repos/BoKseGen/JavaCore-AdvancedLevel/contents/HW6/Server.java?ref=e6230cea94ed9d786310d241881822f31522296c",
    "patch": "@@ -0,0 +1,87 @@\n+package anotherAttempt;\n+\n+import java.io.*;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.Scanner;\n+\n+public class Server {\n+\n+    private static final int SERVER_PORT = 8200;\n+    private static final String stopWord = \"stop\";\n+\n+    private static Socket client;\n+    private static BufferedReader in;\n+    private static PrintWriter out;\n+    private static Scanner consoleReader = new Scanner(System.in);;\n+\n+    public static void main(String[] args){\n+        startServer();\n+    }\n+\n+    private static void startServer() {\n+        try (ServerSocket serverSocket = new ServerSocket(SERVER_PORT)) {\n+            System.out.println(\"Server is listening\");\n+            //пытаемся подключить клиента\n+            try {\n+                client = serverSocket.accept();\n+                in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n+                out = new PrintWriter(client.getOutputStream());\n+\n+                //если мы оказались в этом блоке, значит клиент к серверу подключился\n+                System.out.println(\"Client is connected\");\n+                //отправляем первое сообщение клиенту\n+                out.println(\"Hello, client\");\n+                out.flush();\n+\n+                sendMessageToClient(out, consoleReader); //поток для отправки сообщений\n+                readMessageFromClient(in);\n+\n+            } catch (IOException ex) {\n+                ex.printStackTrace();\n+            }\n+        } catch (IOException ioException) {\n+            ioException.printStackTrace();\n+        } finally {\n+            try {\n+//                consoleReader.close();\n+                in.close();\n+                out.close();\n+                client.close();\n+            } catch (IOException ioException) {\n+                ioException.printStackTrace();\n+            }\n+            System.out.println(\"Client was disconnected from server\");\n+        }\n+    }\n+\n+        private static void sendMessageToClient(PrintWriter out, Scanner scanner){\n+        Thread writeClientThread = new Thread(() -> {\n+            String messageToClient;\n+            while(true){\n+                messageToClient = scanner.nextLine();\n+                out.println(messageToClient);\n+                out.flush();\n+            }\n+        });\n+        writeClientThread.setDaemon(true); //чтоб поток завершился одновременно с основным\n+        writeClientThread.start();\n+    }\n+\n+    private static void readMessageFromClient(BufferedReader in){\n+        String clientMessage = \"\";\n+        try {\n+            while ((clientMessage = in.readLine()) != null) {\n+                if (clientMessage.equalsIgnoreCase(stopWord)){\n+                    break;\n+                }\n+                System.out.println(\"Message from client : \" + clientMessage);\n+            }\n+        } catch (IOException ioException) {\n+            ioException.printStackTrace();\n+        } finally {\n+            System.out.println(\"Client decided to disconnect\");\n+        }\n+    }\n+\n+}"
  }
]
