[
  {
    "sha": "d62878fa0e041563bc3fe9ed38f84d046af951a7",
    "filename": "Zoo-DTO/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-DTO/pom.xml",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-DTO/pom.xml",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-DTO/pom.xml?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -11,7 +11,7 @@\n     <parent>\n         <groupId>com.nekromant</groupId>\n         <artifactId>Zoo</artifactId>\n-        <version>${revision}</version>\n+        <version>1.0-SNAPSHOT</version>\n     </parent>\n \n     <dependencies>"
  },
  {
    "sha": "8de8525580bfd5f09250abbb3f0779943da9ce9b",
    "filename": "Zoo-orchestrator/pom.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/pom.xml",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/pom.xml",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/pom.xml?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -109,6 +109,10 @@\n             <artifactId>Zoo-DTO</artifactId>\n             <version>${revision}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework.kafka</groupId>\n+            <artifactId>spring-kafka</artifactId>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "8e55f3795bb944a8fc35be6a69748c7f87d1a9d7",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/InitData.java",
    "status": "modified",
    "additions": 0,
    "deletions": 25,
    "changes": 25,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/InitData.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/InitData.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/InitData.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -2,7 +2,6 @@\n \n import com.github.javafaker.Faker;\n import com.nekromant.zoo.dao.AnimalRequestDAO;\n-import com.nekromant.zoo.dao.BookDAO;\n import com.nekromant.zoo.dao.PriceDAO;\n import com.nekromant.zoo.dao.RoomDAO;\n import com.nekromant.zoo.model.*;\n@@ -43,9 +42,6 @@\n     @Autowired\n     private PriceDAO priceDAO;\n \n-    @Autowired\n-    private BookDAO bookDAO;\n-\n     private Faker faker = new Faker(new Locale(\"ru\"));\n \n \n@@ -54,8 +50,6 @@ public void initData() {\n         initAnimalRequest();\n         initPrices();\n         initRooms();\n-        initBooks();\n-        initBusyBook();\n     }\n \n     private void initUserAndRoles() {\n@@ -146,23 +140,4 @@ private void initRooms(){\n         roomDAO.save(room2);\n         roomDAO.save(room3);\n     }\n-\n-    private void initBooks(){\n-        Book book1 = new Book(0L,11,1,LocalDate.of(2010,1,3),LocalDate.of(2010,1,7));\n-        Book book2 = new Book(0L,11,1,LocalDate.of(2010,1,21),LocalDate.of(2010,1,22));\n-        bookDAO.save(book1);\n-        bookDAO.save(book2);\n-    }\n-\n-    private void initBusyBook(){\n-        Book left = new Book(0L,11,1,LocalDate.of(2010,1,3),LocalDate.of(2010,1,11));\n-        Book right = new Book(0L,11,1,LocalDate.of(2010,1,14),LocalDate.of(2010,1,17));\n-        Book inside = new Book(0L,11,1,LocalDate.of(2010,1,11),LocalDate.of(2010,1,12));\n-        Book outside = new Book(0L,11,1,LocalDate.of(2010,1,3),LocalDate.of(2010,1,20));\n-\n-//        bookDAO.save(left);\n-//        bookDAO.save(right);\n-//        bookDAO.save(inside);\n-//        bookDAO.save(outside);\n-    }\n }"
  },
  {
    "sha": "528c1f2a6bf516cbce126130d7182362cbb58d51",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConfig.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConfig.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConfig.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConfig.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,35 @@\n+package com.nekromant.zoo.config.kafka;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.kafka.core.KafkaAdmin;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Configuration\n+@PropertySource(\"classpath:config/kafka.properties\")\n+public class KafkaConfig {\n+\n+    @Value(value = \"${kafka.bootstrapAddress}\")\n+    private String bootstrapAddress;\n+\n+    @Value(value = \"${kafka.orchestratorToBookingTopic}\")\n+    private String topic;\n+\n+    @Bean\n+    public KafkaAdmin kafkaAdmin() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);\n+        return new KafkaAdmin(configs);\n+    }\n+\n+    @Bean\n+    public NewTopic bookingProducer() {\n+        return new NewTopic(topic, 1, (short) 1);\n+    }\n+}"
  },
  {
    "sha": "7dff9d79e12d75fb03f27a69f3a2dd243dadf189",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConsumerConfig.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConsumerConfig.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConsumerConfig.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaConsumerConfig.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,52 @@\n+package com.nekromant.zoo.config.kafka;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.annotation.EnableKafka;\n+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@EnableKafka\n+@Configuration\n+public class KafkaConsumerConfig {\n+    @Value(value = \"${kafka.bootstrapAddress}\")\n+    private String bootstrapAddress;\n+\n+    @Value(value = \"${kafka.bookingToOrchestratorGroup}\")\n+    private String groupId;\n+\n+    @Bean\n+    public ConsumerFactory<String, String> consumerFactory() {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\n+                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,\n+                bootstrapAddress);\n+        props.put(\n+                ConsumerConfig.GROUP_ID_CONFIG,\n+                groupId);\n+        props.put(\n+                ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n+                StringDeserializer.class);\n+        props.put(\n+                ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,\n+                StringDeserializer.class);\n+        return new DefaultKafkaConsumerFactory<>(props);\n+    }\n+\n+    @Bean\n+    public ConcurrentKafkaListenerContainerFactory<String, String>\n+    kafkaListenerContainerFactory() {\n+\n+        ConcurrentKafkaListenerContainerFactory<String, String> factory =\n+                new ConcurrentKafkaListenerContainerFactory<>();\n+        factory.setConsumerFactory(consumerFactory());\n+        return factory;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8b8e35e27a7886b60f05bab3e0f54bb23cbffe43",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaProducerConfig.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaProducerConfig.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaProducerConfig.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/config/kafka/KafkaProducerConfig.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,41 @@\n+package com.nekromant.zoo.config.kafka;\n+\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.protocol.types.Field;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Configuration\n+public class KafkaProducerConfig {\n+\n+    @Value(value = \"${kafka.bootstrapAddress}\")\n+    private String bootstrapAddress;\n+\n+    @Bean\n+    public ProducerFactory<String, String> producerFactory() {\n+        Map<String, Object> configProps = new HashMap<>();\n+        configProps.put(\n+                ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\n+                bootstrapAddress);\n+        configProps.put(\n+                ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n+                StringSerializer.class);\n+        configProps.put(\n+                ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n+                StringSerializer.class);\n+        return new DefaultKafkaProducerFactory<>(configProps);\n+    }\n+\n+    @Bean\n+    public KafkaTemplate<String, String> kafkaTemplate() {\n+        return new KafkaTemplate<>(producerFactory());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ce962fff5e8333e1885b215402e9922a3f6e253b",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/controller/rest/BookRestController.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/controller/rest/BookRestController.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/controller/rest/BookRestController.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/controller/rest/BookRestController.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -1,7 +1,5 @@\n package com.nekromant.zoo.controller.rest;\n \n-import com.nekromant.zoo.model.Book;\n-import com.nekromant.zoo.model.Room;\n import com.nekromant.zoo.service.BookService;\n import dto.RoomDTO;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -16,12 +14,12 @@\n     private BookService bookService;\n \n     @GetMapping\n-    public List<Book> getBooks(){\n+    public List getBooks(){\n         return bookService.findAll();\n     }\n \n     @PostMapping(\"/bookRoom/{id}\")\n-    public Book book(@PathVariable String id, @RequestBody RoomDTO roomDTO){\n-        return bookService.bookAnimalRequest(id,roomDTO);\n+    public void bookKafka(@PathVariable String id, @RequestBody RoomDTO roomDTO){\n+        bookService.bookAnimalRequest(id,roomDTO);\n     }\n }"
  },
  {
    "sha": "3d3269f809e9a05bee0e4cd776029c4da2399e34",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/dao/BookDAO.java",
    "status": "removed",
    "additions": 0,
    "deletions": 20,
    "changes": 20,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/f56aafaf139cdc8fbefec500754bc95b03b7df52/Zoo-orchestrator/src/main/java/com/nekromant/zoo/dao/BookDAO.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/f56aafaf139cdc8fbefec500754bc95b03b7df52/Zoo-orchestrator/src/main/java/com/nekromant/zoo/dao/BookDAO.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/dao/BookDAO.java?ref=f56aafaf139cdc8fbefec500754bc95b03b7df52",
    "patch": "@@ -1,20 +0,0 @@\n-package com.nekromant.zoo.dao;\n-\n-import com.nekromant.zoo.model.Book;\n-import org.springframework.data.jpa.repository.Query;\n-import org.springframework.data.repository.CrudRepository;\n-import org.springframework.data.repository.query.Param;\n-\n-import java.time.LocalDate;\n-import java.util.List;\n-\n-public interface BookDAO extends CrudRepository<Book,Long> {\n-    List<Book> findAll();\n-\n-    @Query(\"select b from Book b where b.roomId = :roomId and ((:endDate between b.beginDate and b.endDate) or \" +\n-            \"(:beginDate between b.beginDate and b.endDate) or \" +\n-            \"((:beginDate < b.beginDate) and (:endDate > b.endDate)))\")\n-    List<Book> findBookByRoomIdAndDate(@Param(\"roomId\") long id,\n-                                     @Param(\"beginDate\") LocalDate beginDate,\n-                                     @Param(\"endDate\") LocalDate endDate);\n-}"
  },
  {
    "sha": "3d1beeaa13755fd7ee3a1d38c65cb0e1bcdb8ef0",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/domain/BookParams.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/domain/BookParams.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/domain/BookParams.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/domain/BookParams.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,26 @@\n+package com.nekromant.zoo.domain;\n+\n+import enums.AnimalType;\n+import enums.RoomType;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class BookParams {\n+    private Long animalRequestId;\n+\n+    private Long id;\n+\n+    private AnimalType animalType;\n+\n+    private RoomType roomType;\n+\n+    private Boolean videoSupported;\n+\n+    private String begin;\n+\n+    private String end;\n+}"
  },
  {
    "sha": "67bf494a611085ccd905d2aa843c38ae545b17d7",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookConsumer.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookConsumer.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookConsumer.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookConsumer.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,14 @@\n+package com.nekromant.zoo.kafka;\n+\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.kafka.annotation.KafkaListener;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@PropertySource(\"classpath:config/kafka.properties\")\n+public class KafkaBookConsumer {\n+    @KafkaListener(topics = \"${kafka.bookingToOrchestratorTopic}\", groupId = \"${kafka.bookingToOrchestratorGroup}\")\n+    public void listenBookReturn(String message) {\n+        System.out.println(\"Received Message in group foo: \" + message);\n+    }\n+}"
  },
  {
    "sha": "5465b7c313bf5787fe02d196fb0f278ff2b260a1",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookProducer.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookProducer.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookProducer.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/kafka/KafkaBookProducer.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,19 @@\n+package com.nekromant.zoo.kafka;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class KafkaBookProducer {\n+    @Value(\"${kafka.orchestratorToBookingTopic}\")\n+    private String topicName;\n+\n+    @Autowired\n+    private KafkaTemplate<String, String> kafkaTemplate;\n+\n+    public void sendMessage(String msg) {\n+        kafkaTemplate.send(topicName, msg);\n+    }\n+}"
  },
  {
    "sha": "5119520afd45b858d561bd881775c125d7d7f5d9",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/model/Book.java",
    "status": "removed",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/f56aafaf139cdc8fbefec500754bc95b03b7df52/Zoo-orchestrator/src/main/java/com/nekromant/zoo/model/Book.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/f56aafaf139cdc8fbefec500754bc95b03b7df52/Zoo-orchestrator/src/main/java/com/nekromant/zoo/model/Book.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/model/Book.java?ref=f56aafaf139cdc8fbefec500754bc95b03b7df52",
    "patch": "@@ -1,30 +0,0 @@\n-package com.nekromant.zoo.model;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-\n-import javax.persistence.*;\n-import java.time.LocalDate;\n-\n-@Entity\n-@Data\n-@AllArgsConstructor\n-@NoArgsConstructor\n-public class Book {\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private long id;\n-\n-    @Column\n-    private long animalRequestId;\n-\n-    @Column\n-    private long roomId;\n-\n-    @Column(columnDefinition = \"DATE\")\n-    private LocalDate beginDate;\n-\n-    @Column(columnDefinition = \"DATE\")\n-    private LocalDate endDate;\n-}"
  },
  {
    "sha": "d5a62feba5621a1f14b99faaaab6cdc464eefad4",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/BookService.java",
    "status": "modified",
    "additions": 48,
    "deletions": 43,
    "changes": 91,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/BookService.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/BookService.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/BookService.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -1,67 +1,72 @@\n package com.nekromant.zoo.service;\n \n-import com.nekromant.zoo.dao.BookDAO;\n-import com.nekromant.zoo.mapper.RoomMapper;\n-import com.nekromant.zoo.model.AnimalRequest;\n-import com.nekromant.zoo.model.Book;\n-import com.nekromant.zoo.model.Room;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.nekromant.zoo.domain.BookParams;\n+import dto.BookDTO;\n import dto.RoomDTO;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.kafka.core.KafkaTemplate;\n import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.client.RestTemplate;\n \n import java.time.LocalDate;\n import java.util.List;\n-import java.util.Optional;\n+\n \n @Service\n+@PropertySource(value = \"classpath:config/booking.properties\")\n public class BookService {\n     @Autowired\n-    private BookDAO bookDAO;\n-\n-    @Autowired\n-    private AnimalRequestService animalRequestService;\n+    private KafkaTemplate<String,String> kafkaTemplate;\n \n     @Autowired\n-    private RoomMapper roomMapper;\n+    private ObjectMapper objectMapper;\n \n-    public List<Book> findAll() {\n-        return bookDAO.findAll();\n-    }\n+    @Value(value = \"${kafka.orchestratorToBookingTopic}\")\n+    private String topic;\n \n-    /**\n-     * Booking room with {@link AnimalRequest} id and {@link Room}\n-     * {@link AnimalRequest} request status must be {@link enums.RequestStatus} APPLIED\n-     * @param id - {@link AnimalRequest}\n-     * @param roomDTO - {@link RoomDTO} room to book\n-     * @return new {@link Book} or null\n-     */\n-    @Transactional\n-    public Book bookAnimalRequest(String id, RoomDTO roomDTO) {\n-        Optional<AnimalRequest> animalRequest = animalRequestService.findById(id);\n-        return animalRequest.map(request -> bookRoom(roomMapper.dtoToEntity(roomDTO), request)).orElse(null);\n-    }\n+    private RestTemplate restTemplate = new RestTemplate();\n \n-    private Book bookRoom(Room room, AnimalRequest animalRequest) {\n-        Book book = new Book(\n-                0L,\n-                animalRequest.getId(),\n-                room.getId(),\n-                animalRequest.getBeginDate(),\n-                animalRequest.getEndDate()\n-        );\n-        bookDAO.save(book);\n+    @Value(\"${booking.getAllUrl}\")\n+    private String getAllUrl;\n \n-        animalRequestService.setInProgressAnimalRequest(animalRequest.getId().toString());\n+    @Value(\"${booking.postSpareUrl}\")\n+    private String postSpareUrl;\n \n-        return book;\n+    public List findAll() {\n+        return restTemplate.getForObject(getAllUrl, List.class);\n     }\n \n-    public List<Book> findByRoomIdAndDate(String id, LocalDate begin, LocalDate end){\n-        return bookDAO.findBookByRoomIdAndDate(\n-                Long.parseLong(id),\n-                begin,\n-                end\n+    public void bookAnimalRequest(String animalRequestId, RoomDTO roomDTO) {\n+        BookParams bookParams = new BookParams(\n+                Long.parseLong(animalRequestId),\n+                roomDTO.getId(),\n+                roomDTO.getAnimalType(),\n+                roomDTO.getRoomType(),\n+                roomDTO.getVideoSupported(),\n+                roomDTO.getBegin().toString(),\n+                roomDTO.getEnd().toString()\n         );\n+        try {\n+            kafkaTemplate.send(topic, objectMapper.writeValueAsString(bookParams));\n+        } catch (JsonProcessingException e){\n+            System.out.println(e);\n+        }\n+    }\n+\n+    public List<BookDTO> findByRoomIdAndDate(String id, LocalDate begin, LocalDate end){\n+        return restTemplate.postForObject(\n+                postSpareUrl,\n+                new BookDTO(\n+                        0L,\n+                        0L,\n+                        Long.parseLong(id),\n+                        begin,\n+                        end\n+                ),\n+                List.class);\n     }\n }"
  },
  {
    "sha": "73161acf52d172ed7aa5b8b0e84c222a7b6a6577",
    "filename": "Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/RoomService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/RoomService.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/RoomService.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/java/com/nekromant/zoo/service/RoomService.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -1,8 +1,9 @@\n package com.nekromant.zoo.service;\n \n import com.nekromant.zoo.dao.RoomDAO;\n-import com.nekromant.zoo.model.Book;\n+import com.nekromant.zoo.domain.BookParams;\n import com.nekromant.zoo.model.Room;\n+import dto.BookDTO;\n import dto.RoomDTO;\n import enums.AnimalType;\n import enums.RoomType;\n@@ -58,7 +59,7 @@ public Room insert(Room room){\n                 roomDTO.getVideoSupported()\n         );\n         for(Room room : rooms) {\n-            List<Book> books = bookService.findByRoomIdAndDate(\n+            List<BookDTO> books = bookService.findByRoomIdAndDate(\n                     String.valueOf(room.getId()),\n                     roomDTO.getBegin(),\n                     roomDTO.getEnd()"
  },
  {
    "sha": "2650bfcec0e9deaa009ed52e4356cad0bbff8381",
    "filename": "Zoo-orchestrator/src/main/resources/config/booking.properties",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/resources/config/booking.properties",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/resources/config/booking.properties",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/resources/config/booking.properties?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,2 @@\n+booking.getAllUrl=http://localhost:8081/api/book/allBooks\n+booking.postSpareUrl=http://localhost:8081/api/book/findByRoomAndDate\n\\ No newline at end of file"
  },
  {
    "sha": "1293866b815243786df524cc59b488fda967ac2f",
    "filename": "Zoo-orchestrator/src/main/resources/config/kafka.properties",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/resources/config/kafka.properties",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/main/resources/config/kafka.properties",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/main/resources/config/kafka.properties?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -0,0 +1,4 @@\n+kafka.bootstrapAddress=http://localhost:9092\n+kafka.orchestratorToBookingTopic=bookAnimalRequest\n+kafka.bookingToOrchestratorGroup=2\n+kafka.bookingToOrchestratorTopic=bookAnimalRequestReturn\n\\ No newline at end of file"
  },
  {
    "sha": "6a3e5d62d124970da69eb702dbcd34e05186b50d",
    "filename": "Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/BookServiceTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 79,
    "changes": 79,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/f56aafaf139cdc8fbefec500754bc95b03b7df52/Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/BookServiceTest.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/f56aafaf139cdc8fbefec500754bc95b03b7df52/Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/BookServiceTest.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/BookServiceTest.java?ref=f56aafaf139cdc8fbefec500754bc95b03b7df52",
    "patch": "@@ -1,79 +0,0 @@\n-package com.nekromant.zoo.service;\n-\n-import com.nekromant.zoo.dao.BookDAO;\n-import com.nekromant.zoo.model.AnimalRequest;\n-import com.nekromant.zoo.model.Room;\n-import dto.RoomDTO;\n-import enums.AnimalType;\n-import enums.Location;\n-import enums.RequestStatus;\n-import enums.RoomType;\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.Mockito;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n-import org.springframework.test.context.junit4.SpringRunner;\n-\n-import java.time.LocalDate;\n-import java.util.Optional;\n-\n-import static org.mockito.ArgumentMatchers.any;\n-\n-@RunWith(SpringRunner.class)\n-@DataJpaTest\n-public class BookServiceTest {\n-    @InjectMocks\n-    BookService bookService;\n-\n-    @Autowired\n-    BookDAO bookDAO;\n-\n-    @Mock\n-    AnimalRequestService animalRequestService;\n-\n-    private RoomDTO fillDefaultRoomDTO(){\n-        return new RoomDTO(\n-                0L,\n-                AnimalType.DOG,\n-                RoomType.VIP,\n-                true,\n-                \"\",\n-                LocalDate.now(),\n-                LocalDate.now()\n-        );\n-    }\n-\n-    @Test\n-    public void bookAnimalRequestTransactionTest() {\n-        Mockito.when(animalRequestService.findById(any())).thenReturn(\n-                Optional.of(\n-                    new AnimalRequest(\n-                            228L,\n-                            RequestStatus.NEW,\n-                            AnimalType.DOG,\n-                            LocalDate.now(),\n-                            LocalDate.now(),\n-                            RoomType.VIP,\n-                            true,\n-                            \"\",\n-                            \"\",\n-                            \"\",\n-                            \"\",\n-                            \"\",\n-                            Location.MOSCOW\n-                    )\n-        ));\n-        RoomDTO roomDTO = fillDefaultRoomDTO();\n-\n-        Mockito.when(animalRequestService.setInProgressAnimalRequest(any())).thenThrow(new RuntimeException());\n-        try {\n-            bookService.bookAnimalRequest(\"228\", roomDTO);\n-        } catch (RuntimeException e) {\n-            Assert.assertEquals(bookDAO.findAll().size(), 0);\n-        }\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "cb59995ac335de56bc67ba8eb673fa6c8d4e15a6",
    "filename": "Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/RoomServiceTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/nekromant322/zoo-orchestrator/blob/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/RoomServiceTest.java",
    "raw_url": "https://github.com/nekromant322/zoo-orchestrator/raw/7e50424b3b41d3dd19c1595d151cd5258a6a806f/Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/RoomServiceTest.java",
    "contents_url": "https://api.github.com/repos/nekromant322/zoo-orchestrator/contents/Zoo-orchestrator/src/test/java/com/nekromant/zoo/service/RoomServiceTest.java?ref=7e50424b3b41d3dd19c1595d151cd5258a6a806f",
    "patch": "@@ -1,8 +1,8 @@\n package com.nekromant.zoo.service;\n \n import com.nekromant.zoo.dao.RoomDAO;\n-import com.nekromant.zoo.model.Book;\n import com.nekromant.zoo.model.Room;\n+import dto.BookDTO;\n import dto.RoomDTO;\n import enums.AnimalType;\n import enums.RoomType;\n@@ -77,25 +77,25 @@ public void findAllSpareRoomWithExistBook() {\n                 LocalDate.of(2002, 4, 21))).thenReturn(\n                 Arrays.asList(\n                         //left\n-                        new Book(bookId,\n+                        new BookDTO(bookId,\n                                 animalRequestId,\n                                 roomId,\n                                 LocalDate.of(2020, 4, 10),\n                                 LocalDate.of(2020, 4, 20)),\n                         //right\n-                        new Book(bookId,\n+                        new BookDTO(bookId,\n                                 animalRequestId,\n                                 roomId,\n                                 LocalDate.of(2020, 4, 20),\n                                 LocalDate.of(2020, 4, 25)),\n                         //inside\n-                        new Book(bookId,\n+                        new BookDTO(bookId,\n                                 animalRequestId,\n                                 roomId,\n                                 LocalDate.of(2020, 4, 15),\n                                 LocalDate.of(2020, 4, 17)),\n                         //outside\n-                        new Book(bookId,\n+                        new BookDTO(bookId,\n                                 animalRequestId,\n                                 roomId,\n                                 LocalDate.of(2020, 4, 1),"
  }
]
