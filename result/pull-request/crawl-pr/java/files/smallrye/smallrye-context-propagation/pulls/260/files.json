[
  {
    "sha": "2ed265f7064f454354a8e8a58fbaf66d18f46d98",
    "filename": "api/src/main/java/io/smallrye/context/spi/WrappingThreadContextSnapshot.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/api/src/main/java/io/smallrye/context/spi/WrappingThreadContextSnapshot.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/api/src/main/java/io/smallrye/context/spi/WrappingThreadContextSnapshot.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/api/src/main/java/io/smallrye/context/spi/WrappingThreadContextSnapshot.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * You may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.smallrye.context.spi;\n+\n+import java.util.concurrent.Callable;\n+\n+import org.eclipse.microprofile.context.spi.ThreadContextSnapshot;\n+\n+/**\n+ * An extension of {code ThreadContextSnapshot} which enables the snapshot to\n+ * perform propagation by wrapping the task.\n+ *\n+ * @author <a href=\"mailto:darran.lofthouse@jboss.com\">Darran Lofthouse</a>\n+ */\n+@FunctionalInterface\n+public interface WrappingThreadContextSnapshot extends ThreadContextSnapshot {\n+\n+    /**\n+     * Does this snapshot need to wrap the underlying task instead of directly\n+     * manipulating ThreadLocals.\n+     *\n+     * @return {@code true} if this snapshot needs to wrap the underlying task.\n+     */\n+    default boolean needsToWrap() {\n+        return false;\n+    }\n+\n+    /**\n+     * Wrap the provided task to ensure the context being propagated is correctly\n+     * established and cleared as the underlying task is called.\n+     *\n+     * @param task the task to wrap.\n+     * @return the wrapped task.\n+     */\n+    default <T> Callable<T> wrap(Callable<T> callable) {\n+        return callable;\n+    }\n+\n+}"
  },
  {
    "sha": "6df2e712618e71532fac11899b05fc00be4d558c",
    "filename": "core/src/main/java/io/smallrye/context/CleanAutoCloseable.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/CleanAutoCloseable.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/CleanAutoCloseable.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/CleanAutoCloseable.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -3,8 +3,10 @@\n /**\n  * AutoCloseable interface which doesn't throw.\n  */\n-@FunctionalInterface\n-public interface CleanAutoCloseable extends AutoCloseable {\n+public interface CleanAutoCloseable<T> extends AutoCloseable {\n+\n+    T callNoChecked();\n+\n     /**\n      * Close this resource, no exception thrown.\n      */"
  },
  {
    "sha": "64c7aea6bf52bf80416ba67a0ab946014afedaa6",
    "filename": "core/src/main/java/io/smallrye/context/SmallRyeThreadContext.java",
    "status": "modified",
    "additions": 22,
    "deletions": 10,
    "changes": 32,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/SmallRyeThreadContext.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/SmallRyeThreadContext.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/SmallRyeThreadContext.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -68,6 +68,12 @@\n             .threadLocal(SmallRyeThreadContextStorageDeclaration.class);\n \n     private final static CleanAutoCloseable NULL_THREAD_STATE = new CleanAutoCloseable() {\n+\n+        @Override\n+        public Object callNoChecked() {\n+            throw new IllegalStateException();\n+        }\n+\n         @Override\n         public void close() {\n             currentThreadContext.remove();\n@@ -84,7 +90,7 @@ public void execute(Runnable command) {\n     /**\n      * Updates the current @{link SmallRyeThreadContext} in use by the current thread, and returns an\n      * object suitable for use in try-with-resource to restore the previous value.\n-     * \n+     *\n      * @param threadContext the @{link SmallRyeThreadContext} to use\n      * @return an object suitable for use in try-with-resource to restore the previous value.\n      */\n@@ -96,6 +102,12 @@ public static CleanAutoCloseable withThreadContext(SmallRyeThreadContext threadC\n             return NULL_THREAD_STATE;\n         } else {\n             return new CleanAutoCloseable() {\n+\n+                @Override\n+                public Object callNoChecked() {\n+                    throw new IllegalStateException();\n+                }\n+\n                 @Override\n                 public void close() {\n                     currentThreadContext.set(oldValue);\n@@ -108,7 +120,7 @@ public void close() {\n     /**\n      * Invokes the given @{link Runnable} with the current @{link SmallRyeThreadContext} updated to the given value\n      * for the current thread.\n-     * \n+     *\n      * @param threadContext the @{link SmallRyeThreadContext} to use\n      * @param f the @{link Runnable} to invoke\n      */\n@@ -129,7 +141,7 @@ public static void withThreadContext(SmallRyeThreadContext threadContext, Runnab\n     /**\n      * Returns the current thread's @{link SmallRyeThreadContext} if set, or a @{link SmallRyeThreadContext}\n      * which propagates all contexts.\n-     * \n+     *\n      * @return the current thread's @{link SmallRyeThreadContext} if set, or a @{link SmallRyeThreadContext}\n      *         which propagates all contexts.\n      */\n@@ -140,7 +152,7 @@ public static SmallRyeThreadContext getCurrentThreadContextOrPropagatedContexts(\n     /**\n      * Returns the current thread's @{link SmallRyeThreadContext} if set, or a @{link SmallRyeThreadContext}\n      * which clears all contexts.\n-     * \n+     *\n      * @return the current thread's @{link SmallRyeThreadContext} if set, or a @{link SmallRyeThreadContext}\n      *         which clears all contexts.\n      */\n@@ -151,7 +163,7 @@ public static SmallRyeThreadContext getCurrentThreadContextOrClearedContexts() {\n     /**\n      * Returns the current thread's @{link SmallRyeThreadContext} if set, or the given @{link SmallRyeThreadContext}\n      * default value.\n-     * \n+     *\n      * @param defaultValue the default value to use\n      * @return the current thread's @{link SmallRyeThreadContext} if set, or the given @{link SmallRyeThreadContext}\n      *         default value.\n@@ -163,7 +175,7 @@ public static SmallRyeThreadContext getCurrentThreadContext(SmallRyeThreadContex\n \n     /**\n      * Returns the current thread's @{link SmallRyeThreadContext} if set, or null.\n-     * \n+     *\n      * @return the current thread's @{link SmallRyeThreadContext} if set, or null.\n      */\n     public static SmallRyeThreadContext getCurrentThreadContext() {\n@@ -200,7 +212,7 @@ public ExecutorService getDefaultExecutor() {\n     /**\n      * Returns true if this thread context has no context to propagate nor clear, and so\n      * will not contextualise anything.\n-     * \n+     *\n      * @return true if this thread context has no context to propagate nor clear\n      */\n     public boolean isEmpty() {\n@@ -209,7 +221,7 @@ public boolean isEmpty() {\n \n     /**\n      * Returns true if the given lambda instance is already contextualized\n-     * \n+     *\n      * @param lambda the lambda to test\n      * @return true if the given lambda instance is already contextualized\n      */\n@@ -236,7 +248,7 @@ public static Builder builder() {\n      * or the default executor service as set by\n      * {@link SmallRyeContextManager.Builder#withDefaultExecutorService(ExecutorService)},\n      * or otherwise have no default executor.\n-     * \n+     *\n      * If this thread context has no default executor, the new stage and all dependent stages created from it, and so forth,\n      * have no default asynchronous execution facility and must raise {@link java.lang.UnsupportedOperationException}\n      * for all <code>*Async</code> methods that do not specify an executor. For example,\n@@ -284,7 +296,7 @@ public static Builder builder() {\n      * or the default executor service as set by\n      * {@link SmallRyeContextManager.Builder#withDefaultExecutorService(ExecutorService)},\n      * or otherwise have no default executor.\n-     * \n+     *\n      * If this thread context has no default executor, the new stage and all dependent stages created from it, and so forth,\n      * and/or cleared as described in the documentation of the {@link ManagedExecutor} class, except that\n      * this ThreadContext instance takes the place of the default asynchronous execution facility in"
  },
  {
    "sha": "c5889a5ecd8d2a23a387a47fa7967a31ceb9c95d",
    "filename": "core/src/main/java/io/smallrye/context/impl/CapturedContextState.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/CapturedContextState.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/CapturedContextState.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/CapturedContextState.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -1,8 +1,10 @@\n package io.smallrye.context.impl;\n \n+import java.util.concurrent.Callable;\n+\n import io.smallrye.context.CleanAutoCloseable;\n \n @FunctionalInterface\n public interface CapturedContextState {\n-    CleanAutoCloseable begin();\n+    <T> CleanAutoCloseable<T> begin(Callable<T> callable);\n }"
  },
  {
    "sha": "0fde879c5b58359dc24ff94f46a9b4e06a7742ed",
    "filename": "core/src/main/java/io/smallrye/context/impl/SlowActiveContextState.java",
    "status": "modified",
    "additions": 22,
    "deletions": 3,
    "changes": 25,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/SlowActiveContextState.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/SlowActiveContextState.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/SlowActiveContextState.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -1,36 +1,55 @@\n package io.smallrye.context.impl;\n \n import java.util.List;\n+import java.util.concurrent.Callable;\n \n import org.eclipse.microprofile.context.spi.ThreadContextController;\n import org.eclipse.microprofile.context.spi.ThreadContextSnapshot;\n \n import io.smallrye.context.CleanAutoCloseable;\n import io.smallrye.context.SmallRyeThreadContext;\n+import io.smallrye.context.spi.WrappingThreadContextSnapshot;\n \n /**\n  * Restores a context and allows you to clean it up (unrestore it).\n  */\n-public class SlowActiveContextState implements CleanAutoCloseable {\n+public class SlowActiveContextState<T> implements CleanAutoCloseable<T> {\n \n     private final ThreadContextController[] activeContext;\n     private final CleanAutoCloseable activeThreadContext;\n+    private final Callable<T> callable;\n \n     /**\n      * Restores a previously captured context.\n-     * \n+     *\n      * @param threadContext the thread context\n      * @param threadContextSnapshots the captured snapshots\n      */\n-    public SlowActiveContextState(SmallRyeThreadContext threadContext, List<ThreadContextSnapshot> threadContextSnapshots) {\n+    public SlowActiveContextState(SmallRyeThreadContext threadContext, List<ThreadContextSnapshot> threadContextSnapshots,\n+            Callable<T> callable) {\n         activeContext = new ThreadContextController[threadContextSnapshots.size()];\n         int i = 0;\n         for (ThreadContextSnapshot threadContextSnapshot : threadContextSnapshots) {\n             activeContext[i++] = threadContextSnapshot.begin();\n+            if (threadContextSnapshot instanceof WrappingThreadContextSnapshot\n+                    && ((WrappingThreadContextSnapshot) threadContextSnapshot).needsToWrap()) {\n+                callable = ((WrappingThreadContextSnapshot) threadContextSnapshot).wrap(callable);\n+            }\n         }\n+        this.callable = callable;\n         activeThreadContext = SmallRyeThreadContext.withThreadContext(threadContext);\n     }\n \n+    @Override\n+    public T callNoChecked() {\n+        try {\n+            return callable.call();\n+        } catch (Exception e) {\n+            Util.rethrow(e);\n+            return null;\n+        }\n+    }\n+\n     /**\n      * Unrestores / clean-up a previously restored context.\n      */"
  },
  {
    "sha": "970395d562007132e98c5e271bcbf2d839dab12f",
    "filename": "core/src/main/java/io/smallrye/context/impl/SlowCapturedContextState.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/SlowCapturedContextState.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/SlowCapturedContextState.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/SlowCapturedContextState.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -1,6 +1,7 @@\n package io.smallrye.context.impl;\n \n import java.util.List;\n+import java.util.concurrent.Callable;\n \n import org.eclipse.microprofile.context.spi.ThreadContextSnapshot;\n \n@@ -17,7 +18,7 @@\n \n     /**\n      * Captures the current context according to the given ThreadContext\n-     * \n+     *\n      * @param threadContext the thread context\n      */\n     public SlowCapturedContextState(SmallRyeThreadContext threadContext) {\n@@ -27,10 +28,10 @@ public SlowCapturedContextState(SmallRyeThreadContext threadContext) {\n \n     /**\n      * Restores the captured context and returns an instance that can unrestore (cleanup) it.\n-     * \n+     *\n      * @return the captured context state\n      */\n-    public SlowActiveContextState begin() {\n-        return new SlowActiveContextState(threadContext, threadContextSnapshots);\n+    public <T> SlowActiveContextState<T> begin(Callable<T> callable) {\n+        return new SlowActiveContextState<T>(threadContext, threadContextSnapshots, callable);\n     }\n }"
  },
  {
    "sha": "938e9ee7d53058a8019d250d9963541540dc0f40",
    "filename": "core/src/main/java/io/smallrye/context/impl/Util.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/Util.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/Util.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/Util.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -0,0 +1,10 @@\n+package io.smallrye.context.impl;\n+\n+/**\n+ * @author <a href=\"mailto:kabir.khan@jboss.com\">Kabir Khan</a>\n+ */\n+public class Util {\n+    public static <T extends Throwable> void rethrow(Throwable t) throws T {\n+        throw (T) t;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1e0ba9dd616bc7fd44f2dc476e04f3014322d4a4",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiConsumer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiConsumer.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiConsumer.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiConsumer.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -17,8 +17,11 @@ public SlowContextualBiConsumer(CapturedContextState state, BiConsumer<T, U> con\n \n     @Override\n     public void accept(T t, U u) {\n-        try (CleanAutoCloseable activeState = state.begin()) {\n+        try (CleanAutoCloseable<Void> activeState = state.begin(() -> {\n             consumer.accept(t, u);\n+            return null;\n+        })) {\n+            activeState.callNoChecked();\n         }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "7d76df48eea1c2231b53e576642b8986e5523219",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiFunction.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiFunction.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiFunction.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualBiFunction.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -17,8 +17,8 @@ public SlowContextualBiFunction(CapturedContextState state, BiFunction<T, U, R>\n \n     @Override\n     public R apply(T t, U u) {\n-        try (CleanAutoCloseable activeState = state.begin()) {\n-            return function.apply(t, u);\n+        try (CleanAutoCloseable<R> activeState = state.begin(() -> function.apply(t, u))) {\n+            return activeState.callNoChecked();\n         }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "23989b6ef4026c80d9cde37fc97089d5a9c53bf0",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualCallable.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualCallable.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualCallable.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualCallable.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -17,8 +17,8 @@ public SlowContextualCallable(CapturedContextState state, Callable<R> callable)\n \n     @Override\n     public R call() throws Exception {\n-        try (CleanAutoCloseable activeState = state.begin()) {\n-            return callable.call();\n+        try (CleanAutoCloseable<R> activeState = state.begin(callable)) {\n+            return activeState.callNoChecked();\n         }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "e57316814866a0a1be40cb82b52e300dede332a3",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualConsumer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualConsumer.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualConsumer.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualConsumer.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -17,8 +17,11 @@ public SlowContextualConsumer(CapturedContextState state, Consumer<T> consumer)\n \n     @Override\n     public void accept(T t) {\n-        try (CleanAutoCloseable activeState = state.begin()) {\n+        try (CleanAutoCloseable<Void> activeState = state.begin(() -> {\n             consumer.accept(t);\n+            return null;\n+        })) {\n+            activeState.callNoChecked();\n         }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "3285504f7a279170dbc7ed4a3d0da767443bfd9f",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualExecutor.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualExecutor.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualExecutor.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualExecutor.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -15,8 +15,11 @@ public SlowContextualExecutor(CapturedContextState state) {\n \n     @Override\n     public void execute(Runnable command) {\n-        try (CleanAutoCloseable foo = state.begin()) {\n+        try (CleanAutoCloseable<Void> foo = state.begin(() -> {\n             command.run();\n+            return null;\n+        })) {\n+            foo.callNoChecked();\n         }\n     }\n "
  },
  {
    "sha": "8f7b78eb80d00b01f8fd3e73fb5284b279164450",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualFunction.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualFunction.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualFunction.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualFunction.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -17,8 +17,8 @@ public SlowContextualFunction(CapturedContextState state, Function<T, R> functio\n \n     @Override\n     public R apply(T t) {\n-        try (CleanAutoCloseable activeState = state.begin()) {\n-            return function.apply(t);\n+        try (CleanAutoCloseable<R> activeState = state.begin(() -> function.apply(t))) {\n+            return activeState.callNoChecked();\n         }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "342257555f790a0cd3c591c38ab0e4facc8911c0",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualRunnable.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualRunnable.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualRunnable.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualRunnable.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -15,8 +15,11 @@ public SlowContextualRunnable(CapturedContextState state, Runnable runnable) {\n \n     @Override\n     public void run() {\n-        try (CleanAutoCloseable activeState = state.begin()) {\n+        try (CleanAutoCloseable<Void> activeState = state.begin(() -> {\n             runnable.run();\n+            return null;\n+        })) {\n+            activeState.callNoChecked();\n         }\n     }\n }"
  },
  {
    "sha": "5d5359ab0211e4492cf0dee2caff31245f2cbd6e",
    "filename": "core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualSupplier.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualSupplier.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualSupplier.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/core/src/main/java/io/smallrye/context/impl/wrappers/SlowContextualSupplier.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -17,8 +17,8 @@ public SlowContextualSupplier(CapturedContextState state, Supplier<R> supplier)\n \n     @Override\n     public R get() {\n-        try (CleanAutoCloseable activeState = state.begin()) {\n-            return supplier.get();\n+        try (CleanAutoCloseable<R> activeState = state.begin(supplier::get)) {\n+            return activeState.callNoChecked();\n         }\n     }\n }"
  },
  {
    "sha": "44b22628ffba46eb4002677c56255e34540f666f",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/pom.xml",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/pom.xml",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/pom.xml?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -105,6 +105,7 @@\n         <module>application</module>\n         <module>propagators-rxjava1</module>\n         <module>propagators-rxjava2</module>\n+        <module>security</module>\n         <module>tests</module>\n         <module>tck</module>\n         <module>api</module>"
  },
  {
    "sha": "e4d3dc64f90a29cf160c4cdc160d2a6f553f59c9",
    "filename": "security/pom.xml",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/security/pom.xml",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/security/pom.xml",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/security/pom.xml?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.smallrye</groupId>\n+        <artifactId>smallrye-context-propagation-parent</artifactId>\n+        <version>1.1.1-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>smallrye-context-propagation-security</artifactId>\n+    <name>smallrye-context-propagation-security</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>smallrye-context-propagation-api</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.microprofile.context-propagation</groupId>\n+            <artifactId>microprofile-context-propagation-api</artifactId>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+        <profile>\n+            <id>coverage</id>\n+            <properties>\n+                <argLine>@{jacocoArgLine}</argLine>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.jacoco</groupId>\n+                        <artifactId>jacoco-maven-plugin</artifactId>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+</project>"
  },
  {
    "sha": "ec96e47c66385a58f9206eb1ed47a5aac9aeb20d",
    "filename": "security/src/main/java/io/smallrye/context/security/context/propagation/SecurityContextProvider.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/security/src/main/java/io/smallrye/context/security/context/propagation/SecurityContextProvider.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/security/src/main/java/io/smallrye/context/security/context/propagation/SecurityContextProvider.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/security/src/main/java/io/smallrye/context/security/context/propagation/SecurityContextProvider.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -0,0 +1,84 @@\n+package io.smallrye.context.security.context.propagation;\n+\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import org.eclipse.microprofile.context.ThreadContext;\n+import org.eclipse.microprofile.context.spi.ThreadContextController;\n+import org.eclipse.microprofile.context.spi.ThreadContextProvider;\n+import org.eclipse.microprofile.context.spi.ThreadContextSnapshot;\n+\n+import io.smallrye.context.spi.WrappingThreadContextSnapshot;\n+\n+public class SecurityContextProvider implements ThreadContextProvider {\n+\n+    private static final ThreadContextController NOOP_THREAD_CONTEXT_CONTROLLER = new ThreadContextController() {\n+        @Override\n+        public void endContext() throws IllegalStateException {\n+        }\n+    };\n+\n+    @Override\n+    public ThreadContextSnapshot currentContext(Map<String, String> props) {\n+        return new SecurityThreadContextSnapshot(true);\n+    }\n+\n+    @Override\n+    public ThreadContextSnapshot clearedContext(Map<String, String> props) {\n+        return new SecurityThreadContextSnapshot(false);\n+    }\n+\n+    @Override\n+    public String getThreadContextType() {\n+        return ThreadContext.SECURITY;\n+    }\n+\n+    static final class SecurityThreadContextSnapshot implements WrappingThreadContextSnapshot {\n+\n+        private final AccessControlContext accessControlContext;\n+\n+        SecurityThreadContextSnapshot(final boolean capture) {\n+            if (capture) {\n+                accessControlContext = AccessController.getContext();\n+            } else {\n+                accessControlContext = null;\n+            }\n+        }\n+\n+        @Override\n+        public ThreadContextController begin() {\n+            return NOOP_THREAD_CONTEXT_CONTROLLER;\n+        }\n+\n+        @Override\n+        public boolean needsToWrap() {\n+            return accessControlContext != null;\n+        }\n+\n+        @Override\n+        public <T> Callable<T> wrap(Callable<T> callable) {\n+            if (accessControlContext == null) {\n+                return callable;\n+            }\n+\n+            return new Callable<T>() {\n+\n+                @Override\n+                public T call() throws Exception {\n+                    try {\n+                        return AccessController.doPrivilegedWithCombiner((PrivilegedExceptionAction<T>) callable::call,\n+                                accessControlContext);\n+                    } catch (PrivilegedActionException e) {\n+                        throw e.getException();\n+                    }\n+                }\n+            };\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "c250a3d5b1ed02963286760220b6b4b4c119a800",
    "filename": "security/src/main/resources/META-INF/services/org.eclipse.microprofile.context.spi.ThreadContextProvider",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/security/src/main/resources/META-INF/services/org.eclipse.microprofile.context.spi.ThreadContextProvider",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/security/src/main/resources/META-INF/services/org.eclipse.microprofile.context.spi.ThreadContextProvider",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/security/src/main/resources/META-INF/services/org.eclipse.microprofile.context.spi.ThreadContextProvider?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -0,0 +1 @@\n+io.smallrye.context.security.context.propagation.SecurityContextProvider\n\\ No newline at end of file"
  },
  {
    "sha": "e57884994a1be365f6ac01245e58b1cff9236b5b",
    "filename": "tests/pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/tests/pom.xml",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/tests/pom.xml",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/tests/pom.xml?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -78,6 +78,12 @@\n             <classifier>tests</classifier>\n             <type>test-jar</type>\n         </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>smallrye-context-propagation-security</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.jboss.weld.se</groupId>\n             <artifactId>weld-se-shaded</artifactId>"
  },
  {
    "sha": "faea13a1001c6cd7ce5795fc81841f1c4f7a630a",
    "filename": "tests/src/test/java/io/smallrye/context/test/CompletableFutureTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/tests/src/test/java/io/smallrye/context/test/CompletableFutureTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/tests/src/test/java/io/smallrye/context/test/CompletableFutureTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/tests/src/test/java/io/smallrye/context/test/CompletableFutureTest.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -297,7 +297,7 @@ public void testExistingCFWrapping() throws InterruptedException, ExecutionExcep\n             SmallRyeThreadContext threadContext = managedExecutor.getThreadContext();\n             Assert.assertNotNull(threadContext);\n             ThreadContextProviderPlan plan = threadContext.getPlan();\n-            Assert.assertEquals(4, plan.clearedProviders.size());\n+            Assert.assertEquals(5, plan.clearedProviders.size());\n             Assert.assertTrue(plan.unchangedProviders.isEmpty());\n             Assert.assertEquals(1, plan.propagatedProviders.size());\n "
  },
  {
    "sha": "6f823a0f5b2b13bddb4be2131557e7b87cd1fb54",
    "filename": "tests/src/test/java/io/smallrye/context/test/SecurityTest.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/smallrye/smallrye-context-propagation/blob/1373c8cfd1af94af87f319dbdfefde8a21df25f0/tests/src/test/java/io/smallrye/context/test/SecurityTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-context-propagation/raw/1373c8cfd1af94af87f319dbdfefde8a21df25f0/tests/src/test/java/io/smallrye/context/test/SecurityTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-context-propagation/contents/tests/src/test/java/io/smallrye/context/test/SecurityTest.java?ref=1373c8cfd1af94af87f319dbdfefde8a21df25f0",
    "patch": "@@ -0,0 +1,122 @@\n+package io.smallrye.context.test;\n+\n+import static org.junit.Assert.assertSame;\n+\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import javax.security.auth.Subject;\n+\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.context.ThreadContext;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import io.smallrye.context.SmallRyeManagedExecutor;\n+\n+/**\n+ * The most basic level of security propagation could be the propagation of both a JAAS Subject,\n+ * and AccessControlContext - before vendor specific representations are added these are the\n+ * original approaches available.\n+ *\n+ * This test adds tests to verify a Subject can be successfully propagated.\n+ */\n+public class SecurityTest {\n+\n+    private static Subject identity;\n+    private ExecutorService executorService;\n+\n+    @BeforeClass\n+    public static void setupSubject() {\n+        Subject identity = new Subject();\n+        identity.setReadOnly();\n+\n+        // We don't need content as we can verify the instance was propagated.\n+        SecurityTest.identity = identity;\n+    }\n+\n+    @AfterClass\n+    public static void clearSubject() {\n+        identity = null;\n+    }\n+\n+    @Before\n+    public void createExecutor() throws Exception {\n+        executorService = Executors.newSingleThreadExecutor();\n+        // Ensure we initialise the initial Thread so we don't accidentally\n+        // capture the AccessControlContext.\n+        Future<?> result = executorService.submit(() -> {\n+        });\n+        result.get();\n+    }\n+\n+    @After\n+    public void shutDownExecutor() {\n+        executorService.shutdown();\n+        executorService = null;\n+    }\n+\n+    @Test\n+    public void testManagedExecutor() {\n+        Subject.doAs(identity, (PrivilegedAction<Void>) () -> {\n+            _testManagedExecutor();\n+            return null;\n+        });\n+    }\n+\n+    private void _testManagedExecutor() {\n+        assertCorrectSubject();\n+\n+        ManagedExecutor executor = SmallRyeManagedExecutor.builder()\n+                .withExecutorService(executorService)\n+                .propagated(ThreadContext.SECURITY)\n+                .build();\n+\n+        CompletableFuture<Void> future = executor.runAsync(this::assertCorrectSubject);\n+        future.join();\n+\n+        executor.shutdown();\n+    }\n+\n+    private void assertCorrectSubject() {\n+        AccessControlContext accessControllContext = AccessController.getContext();\n+        Subject currentSubject = Subject.getSubject(accessControllContext);\n+\n+        assertSame(\"Same Subject\", identity, currentSubject);\n+    }\n+\n+    @Test\n+    public void testThreadContext() throws Exception {\n+        Subject.doAs(identity, (PrivilegedExceptionAction<Void>) () -> {\n+            _testThreadContext();\n+            return null;\n+        });\n+    }\n+\n+    private void _testThreadContext() throws InterruptedException, ExecutionException {\n+        assertCorrectSubject();\n+\n+        ThreadContext threadContext = ThreadContext.builder()\n+                .propagated(ThreadContext.SECURITY)\n+                .build();\n+\n+        Runnable runnable = threadContext.contextualRunnable(this::assertCorrectSubject);\n+\n+        Future<?> future = executorService.submit(runnable);\n+        future.get();\n+    }\n+\n+    // TODO Opposite Tests, i.e. Threads with an AccessControlContext and Subject should be\n+    // cleared for execution.\n+\n+}"
  }
]
