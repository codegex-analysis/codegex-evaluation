[
  {
    "sha": "973e43c8eaffc1ee30d40101789ff37c7e61ee60",
    "filename": "smallrye-reactive-messaging-mqtt/pom.xml",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/pom.xml",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/pom.xml",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/pom.xml?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -14,6 +14,19 @@\n   <name>SmallRye Reactive Messaging : Connector :: MQTT</name>\n \n   <dependencies>\n+\n+    <dependency>\n+      <groupId>com.hivemq</groupId>\n+      <artifactId>hivemq-mqtt-client</artifactId>\n+      <version>1.2.1</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.smallrye.reactive</groupId>\n+      <artifactId>mutiny-rxjava</artifactId>\n+      <version>${mutiny.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>${project.groupId}</groupId>\n       <artifactId>smallrye-reactive-messaging-provider</artifactId>"
  },
  {
    "sha": "216afa176d16e175e5da74f57b5b9334efe3b8de",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSink.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSink.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSink.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSink.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -21,7 +21,7 @@\n import io.vertx.mutiny.core.buffer.Buffer;\n import io.vertx.mutiny.mqtt.MqttClient;\n \n-public class MqttSink {\n+public class MqttSink implements Sink {\n \n     private final String host;\n     private final int port;"
  },
  {
    "sha": "0633709dcf53f178d32a419797f82ce592e93f2f",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSource.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSource.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSource.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSource.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -13,7 +13,7 @@\n import io.vertx.mutiny.core.Vertx;\n import io.vertx.mutiny.mqtt.messages.MqttPublishMessage;\n \n-public class MqttSource {\n+public class MqttSource implements Source {\n \n     private final PublisherBuilder<MqttMessage<?>> source;\n     private final AtomicBoolean subscribed = new AtomicBoolean();\n@@ -78,11 +78,11 @@ private MqttFailureHandler createFailureHandler(MqttFailureHandler.Strategy stra\n         }\n     }\n \n-    PublisherBuilder<MqttMessage<?>> getSource() {\n+    public PublisherBuilder<MqttMessage<?>> getSource() {\n         return source;\n     }\n \n-    boolean isSubscribed() {\n+    public boolean isSubscribed() {\n         return subscribed.get();\n     }\n }"
  },
  {
    "sha": "0949b8876ef364d20236171fa5a066f189b1e903",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Sink.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Sink.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Sink.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Sink.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,10 @@\n+package io.smallrye.reactive.messaging.mqtt;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+public interface Sink {\n+    public SubscriberBuilder<? extends Message<?>, Void> getSink();\n+\n+    public boolean isReady();\n+}"
  },
  {
    "sha": "545952a53958459fdbb56a4f268fa81f60f28c0a",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Source.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Source.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Source.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/Source.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,10 @@\n+package io.smallrye.reactive.messaging.mqtt;\n+\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+\n+public interface Source {\n+\n+    PublisherBuilder<MqttMessage<?>> getSource();\n+\n+    boolean isSubscribed();\n+}"
  },
  {
    "sha": "9f1e1d200461432e2541907feea88d4c5bf040dc",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQClients.java",
    "status": "added",
    "additions": 203,
    "deletions": 0,
    "changes": 203,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQClients.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQClients.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQClients.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,203 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import static io.smallrye.reactive.messaging.mqtt.i18n.MqttLogging.log;\n+import static java.lang.String.format;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import com.hivemq.client.mqtt.MqttClientSslConfigBuilder;\n+import com.hivemq.client.mqtt.mqtt3.Mqtt3BlockingClient;\n+import com.hivemq.client.mqtt.mqtt3.Mqtt3Client;\n+import com.hivemq.client.mqtt.mqtt3.Mqtt3ClientBuilder;\n+import com.hivemq.client.mqtt.mqtt3.Mqtt3RxClient;\n+import com.hivemq.client.mqtt.mqtt3.message.connect.connack.Mqtt3ConnAck;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.mutiny.converters.uni.UniRxConverters;\n+import io.smallrye.reactive.messaging.health.HealthReport;\n+\n+public class HiveMQClients {\n+\n+    private static final Map<String, ClientHolder> clients = new ConcurrentHashMap<>();\n+\n+    private HiveMQClients() {\n+        // avoid direct instantiation.\n+    }\n+\n+    static Uni<Mqtt3RxClient> getConnectedClient(HiveMQMqttConnectorCommonConfiguration options) {\n+\n+        ClientHolder holder = getHolder(options);\n+\n+        return holder.connect();\n+    }\n+\n+    static ClientHolder getHolder(HiveMQMqttConnectorCommonConfiguration options) {\n+\n+        String host = options.getHost();\n+        int def = options.getSsl() ? 8883 : 1883;\n+        int port = options.getPort().orElse(def);\n+        String server = options.getServerName().orElse(\"\");\n+        String clientId = options.getClientId().orElse(\"\");\n+\n+        String id = host + \":\" + port + \"<\" + server + \">-[\" + clientId + \"]\";\n+\n+        return clients.computeIfAbsent(id, key -> new ClientHolder(options));\n+    }\n+\n+    static Mqtt3RxClient create(HiveMQMqttConnectorCommonConfiguration options) {\n+\n+        final Mqtt3ClientBuilder builder = Mqtt3Client.builder()\n+                .serverHost(options.getHost())\n+                .serverPort(options.getPort().orElse(options.getSsl() ? 8883 : 1883));\n+\n+        if (options.getAutoGeneratedClientId()) {\n+            builder.identifier(UUID.randomUUID().toString());\n+        }\n+        options.getClientId().ifPresent(clientid -> builder.identifier(clientid));\n+\n+        options.getUsername().ifPresent(username -> {\n+            builder.simpleAuth()\n+                    .username(username)\n+                    .password(options.getPassword().orElseThrow(\n+                            () -> new IllegalArgumentException(\"password null with authentication enabled (username not null)\"))\n+                            .getBytes())\n+                    .applySimpleAuth();\n+        });\n+\n+        if (options.getSsl()) {\n+            final MqttClientSslConfigBuilder.Nested<? extends Mqtt3ClientBuilder> nested = builder.sslConfig();\n+            options.getCaCartFile()\n+                    .ifPresent(file -> nested.trustManagerFactory(createSelfSignedTrustManagerFactory(file)));\n+            nested.applySslConfig();\n+        }\n+\n+        return builder\n+                .automaticReconnectWithDefaultConfig()\n+                .addConnectedListener(context -> {\n+                    log.info(format(\"connected to %s:%d\", context.getClientConfig().getServerHost(),\n+                            context.getClientConfig().getServerPort()));\n+                }).buildRx();\n+    }\n+\n+    /**\n+     * Removed all the stored clients.\n+     */\n+    public static void clear() {\n+        clients.forEach((name, holder) -> holder.close());\n+        clients.clear();\n+    }\n+\n+    public static void checkLiveness(HealthReport.HealthReportBuilder builder) {\n+        clients.forEach((name, holder) -> builder.add(name, holder.checkLiveness()));\n+    }\n+\n+    public static void checkReadiness(HealthReport.HealthReportBuilder builder) {\n+        clients.forEach((name, holder) -> builder.add(name, holder.checkReadiness()));\n+    }\n+\n+    public static class ClientHolder {\n+\n+        private final Mqtt3RxClient client;\n+        private final Uni<Mqtt3ConnAck> connection;\n+        private final int livenessTimeout;\n+        private final int readinessTimeout;\n+        private final Boolean checkTopicEnabled;\n+\n+        private long lastMqttUpdate = 0;\n+\n+        public ClientHolder(HiveMQMqttConnectorCommonConfiguration options) {\n+            client = create(options);\n+\n+            livenessTimeout = options.getLivenessTimeout();\n+            readinessTimeout = options.getReadinessTimeout();\n+            checkTopicEnabled = options.getCheckTopicEnabled();\n+\n+            if (checkTopicEnabled) {\n+                client.toAsync().subscribeWith()\n+                        .topicFilter(options.getCheckTopicName())\n+                        .callback(m -> {\n+                            log.debug(new String(m.getPayloadAsBytes()));\n+                            lastMqttUpdate = System.currentTimeMillis();\n+                        })\n+                        .send();\n+            }\n+\n+            connection = Uni.createFrom().converter(UniRxConverters.fromSingle(), client.connect()).memoize()\n+                    .indefinitely();\n+\n+        }\n+\n+        public Uni<Mqtt3RxClient> connect() {\n+            return connection\n+                    .map(ignored -> client);\n+        }\n+\n+        public boolean checkLiveness() {\n+            if (!checkTopicEnabled) {\n+                return true;\n+            }\n+\n+            return (System.currentTimeMillis() - lastMqttUpdate) < livenessTimeout;\n+        }\n+\n+        public boolean checkReadiness() {\n+            if (!checkTopicEnabled) {\n+                return true;\n+            }\n+\n+            return (System.currentTimeMillis() - lastMqttUpdate) < readinessTimeout;\n+        }\n+\n+        public void close() {\n+            final Mqtt3BlockingClient mqtt3BlockingClient = client.toBlocking();\n+            if (mqtt3BlockingClient.getState().isConnected()) {\n+                mqtt3BlockingClient.disconnect();\n+            }\n+        }\n+    }\n+\n+    public static TrustManagerFactory createSelfSignedTrustManagerFactory(String selfSignedTrustManager) {\n+        try {\n+            // Add support for self-signed (local) SSL certificates\n+            // Based on http://developer.android.com/training/articles/security-ssl.html#UnknownCa\n+\n+            // Load CAs from an InputStream\n+            // (could be from a resource or ByteArrayInputStream or ...)\n+            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+            // From https://www.washington.edu/itconnect/security/ca/load-der.crt\n+            InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(selfSignedTrustManager);\n+            Certificate ca;\n+            try (InputStream caInput = new BufferedInputStream(is)) {\n+                ca = cf.generateCertificate(caInput);\n+            }\n+\n+            // Create a KeyStore containing our trusted CAs\n+            String keyStoreType = KeyStore.getDefaultType();\n+            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n+            keyStore.load(null, null);\n+            keyStore.setCertificateEntry(\"ca\", ca);\n+\n+            // Create a TrustManager that trusts the CAs in our KeyStore\n+            String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\n+            TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);\n+            tmf.init(keyStore);\n+\n+            return tmf;\n+        } catch (CertificateException | IOException | KeyStoreException | NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "8a830615063d8de6911ca222925606afbd6efa9e",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttConnector.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttConnector.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttConnector.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttConnector.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,128 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import static io.smallrye.reactive.messaging.annotations.ConnectorAttribute.Direction.*;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Destroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+import io.smallrye.reactive.messaging.annotations.ConnectorAttribute;\n+import io.smallrye.reactive.messaging.connectors.ExecutionHolder;\n+import io.smallrye.reactive.messaging.health.HealthReport;\n+import io.smallrye.reactive.messaging.health.HealthReporter;\n+import io.vertx.mutiny.core.Vertx;\n+\n+@ApplicationScoped\n+@Connector(HiveMQMqttConnector.CONNECTOR_NAME)\n+@ConnectorAttribute(name = \"client-id\", type = \"string\", direction = INCOMING_AND_OUTGOING, description = \"Set the client identifier\")\n+@ConnectorAttribute(name = \"auto-generated-client-id\", type = \"boolean\", direction = INCOMING_AND_OUTGOING, description = \"Set if the MQTT client must generate clientId automatically\", defaultValue = \"true\")\n+@ConnectorAttribute(name = \"auto-keep-alive\", type = \"boolean\", direction = INCOMING_AND_OUTGOING, description = \"Set if the MQTT client must handle `PINGREQ` automatically\", defaultValue = \"true\")\n+@ConnectorAttribute(name = \"ssl\", type = \"boolean\", direction = INCOMING_AND_OUTGOING, description = \"Set whether SSL/TLS is enabled\", defaultValue = \"false\")\n+@ConnectorAttribute(name = \"keep-alive-seconds\", type = \"int\", description = \"Set the keep alive timeout in seconds\", defaultValue = \"30\", direction = INCOMING_AND_OUTGOING)\n+@ConnectorAttribute(name = \"max-inflight-queue\", type = \"int\", direction = INCOMING_AND_OUTGOING, description = \"Set max count of unacknowledged messages\", defaultValue = \"10\")\n+@ConnectorAttribute(name = \"auto-clean-session\", type = \"boolean\", direction = INCOMING_AND_OUTGOING, description = \"Set to start with a clean session (`true` by default)\", defaultValue = \"true\")\n+@ConnectorAttribute(name = \"will-flag\", type = \"boolean\", direction = INCOMING_AND_OUTGOING, description = \"Set if will information are provided on connection\", defaultValue = \"false\")\n+@ConnectorAttribute(name = \"will-retain\", type = \"boolean\", direction = INCOMING_AND_OUTGOING, description = \"Set if the will message must be retained\", defaultValue = \"false\")\n+@ConnectorAttribute(name = \"will-qos\", type = \"int\", direction = INCOMING_AND_OUTGOING, description = \"Set the QoS level for the will message\", defaultValue = \"0\")\n+@ConnectorAttribute(name = \"max-message-size\", type = \"int\", direction = INCOMING_AND_OUTGOING, description = \"Set max MQTT message size in bytes\", defaultValue = \"8092\")\n+@ConnectorAttribute(name = \"reconnect-attempts\", type = \"int\", direction = INCOMING_AND_OUTGOING, description = \"Set the max reconnect attempts\", defaultValue = \"5\")\n+@ConnectorAttribute(name = \"reconnect-interval-seconds\", type = \"int\", direction = INCOMING_AND_OUTGOING, description = \"Set the reconnect interval in seconds\", defaultValue = \"1\")\n+@ConnectorAttribute(name = \"username\", type = \"string\", direction = INCOMING_AND_OUTGOING, description = \"Set the username to connect to the server\")\n+@ConnectorAttribute(name = \"password\", type = \"string\", direction = INCOMING_AND_OUTGOING, description = \"Set the password to connect to the server\")\n+@ConnectorAttribute(name = \"connect-timeout-seconds\", type = \"int\", direction = INCOMING_AND_OUTGOING, description = \"Set the connect timeout (in seconds)\", defaultValue = \"60\")\n+@ConnectorAttribute(name = \"trust-all\", type = \"boolean\", direction = INCOMING_AND_OUTGOING, description = \"Set whether all server certificates should be trusted\", defaultValue = \"false\")\n+@ConnectorAttribute(name = \"host\", type = \"string\", direction = INCOMING_AND_OUTGOING, description = \"Set the MQTT server host name/IP\", mandatory = true)\n+@ConnectorAttribute(name = \"port\", type = \"int\", description = \"Set the MQTT server port. Default to 8883 if ssl is enabled, or 1883 without ssl\", direction = INCOMING_AND_OUTGOING)\n+@ConnectorAttribute(name = \"server-name\", type = \"string\", direction = INCOMING_AND_OUTGOING, description = \"Set the SNI server name\")\n+@ConnectorAttribute(name = \"topic\", type = \"string\", direction = INCOMING_AND_OUTGOING, description = \"Set the MQTT topic. If not set, the channel name is used\")\n+@ConnectorAttribute(name = \"qos\", type = \"int\", defaultValue = \"0\", direction = INCOMING_AND_OUTGOING, description = \"Set the QoS level when subscribing to the topic or when sending a message\")\n+@ConnectorAttribute(name = \"broadcast\", description = \"Whether or not the messages should be dispatched to multiple consumers\", type = \"boolean\", direction = INCOMING, defaultValue = \"false\")\n+@ConnectorAttribute(name = \"failure-strategy\", type = \"string\", direction = INCOMING, description = \"Specify the failure strategy to apply when a message produced from a MQTT message is nacked. Values can be `fail` (default), or `ignore`\", defaultValue = \"fail\")\n+@ConnectorAttribute(name = \"merge\", direction = OUTGOING, description = \"Whether the connector should allow multiple upstreams\", type = \"boolean\", defaultValue = \"false\")\n+@ConnectorAttribute(name = \"ca-cart-file\", direction = INCOMING_AND_OUTGOING, description = \"File containing the self-signed CA for SSL connection\", type = \"string\")\n+@ConnectorAttribute(name = \"check-topic-enabled\", direction = INCOMING_AND_OUTGOING, description = \"Enable check for liveness/readiness\", type = \"boolean\", defaultValue = \"false\")\n+@ConnectorAttribute(name = \"check-topic-name\", direction = INCOMING_AND_OUTGOING, description = \"Topic Used to check liveness/readiness\", type = \"string\", defaultValue = \"$SYS/broker/uptime\")\n+@ConnectorAttribute(name = \"readiness-timeout\", direction = INCOMING_AND_OUTGOING, description = \"Timeout to declare the MQTT Client not ready\", type = \"int\", defaultValue = \"20000\")\n+@ConnectorAttribute(name = \"liveness-timeout\", direction = INCOMING_AND_OUTGOING, description = \"Timeout to declare the MQTT Client not alive\", type = \"int\", defaultValue = \"120000\")\n+public class HiveMQMqttConnector implements IncomingConnectorFactory, OutgoingConnectorFactory, HealthReporter {\n+\n+    public static final String CONNECTOR_NAME = \"smallrye-mqtt-hivemq\";\n+\n+    @Inject\n+    private ExecutionHolder executionHolder;\n+\n+    private Vertx vertx;\n+    private final List<HiveMQMqttSource> sources = new CopyOnWriteArrayList<>();\n+    private final List<HiveMQMqttSink> sinks = new CopyOnWriteArrayList<>();\n+\n+    @PostConstruct\n+    void init() {\n+        this.vertx = executionHolder.vertx();\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(Config config) {\n+        HiveMQMqttSource source = new HiveMQMqttSource(new HiveMQMqttConnectorIncomingConfiguration(config));\n+        sources.add(source);\n+        return source.getSource();\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(Config config) {\n+        HiveMQMqttSink sink = new HiveMQMqttSink(vertx, new HiveMQMqttConnectorOutgoingConfiguration(config));\n+        sinks.add(sink);\n+        return sink.getSink();\n+    }\n+\n+    public boolean isReady() {\n+        boolean ready = isSourceReady();\n+\n+        for (HiveMQMqttSink sink : sinks) {\n+            ready = ready && sink.isReady();\n+        }\n+\n+        return ready;\n+    }\n+\n+    public boolean isSourceReady() {\n+        boolean ready = true;\n+        for (HiveMQMqttSource source : sources) {\n+            ready = ready && source.isSubscribed();\n+        }\n+        return ready;\n+    }\n+\n+    public void destroy(@Observes @Destroyed(ApplicationScoped.class) final Object context) {\n+        HiveMQClients.clear();\n+    }\n+\n+    public HealthReport getReadiness() {\n+        HealthReport.HealthReportBuilder builder = HealthReport.builder();\n+\n+        HiveMQClients.checkReadiness(builder);\n+\n+        return builder.build();\n+    }\n+\n+    public HealthReport getLiveness() {\n+        HealthReport.HealthReportBuilder builder = HealthReport.builder();\n+\n+        HiveMQClients.checkLiveness(builder);\n+\n+        return builder.build();\n+    }\n+\n+}"
  },
  {
    "sha": "877b4cc8ba1bfb9fe649aa45b5e5ed0c251914ec",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSink.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSink.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSink.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSink.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,158 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import static io.smallrye.reactive.messaging.mqtt.i18n.MqttLogging.log;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+import com.hivemq.client.mqtt.datatypes.MqttQos;\n+import com.hivemq.client.mqtt.mqtt3.Mqtt3Client;\n+import com.hivemq.client.mqtt.mqtt3.Mqtt3RxClient;\n+import com.hivemq.client.mqtt.mqtt3.message.publish.Mqtt3Publish;\n+import com.hivemq.client.mqtt.mqtt3.message.publish.Mqtt3PublishResult;\n+\n+import io.reactivex.Flowable;\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.mutiny.converters.uni.UniRxConverters;\n+import io.smallrye.reactive.messaging.mqtt.MqttMessage;\n+import io.smallrye.reactive.messaging.mqtt.SendingMqttMessage;\n+import io.smallrye.reactive.messaging.mqtt.Sink;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+\n+public class HiveMQMqttSink implements Sink {\n+\n+    private final String topic;\n+    private final int qos;\n+\n+    private final SubscriberBuilder<? extends Message<?>, Void> sink;\n+    private final AtomicBoolean connected = new AtomicBoolean();\n+\n+    public HiveMQMqttSink(Vertx vertx, HiveMQMqttConnectorOutgoingConfiguration config) {\n+        topic = config.getTopic().orElseGet(config::getChannel);\n+        qos = config.getQos();\n+\n+        AtomicReference<Mqtt3RxClient> reference = new AtomicReference<>();\n+        sink = ReactiveStreams.<Message<?>> builder()\n+                .flatMapCompletionStage(msg -> {\n+                    Mqtt3RxClient client = reference.get();\n+                    if (client != null) {\n+                        if (client.getState().isConnected()) {\n+                            connected.set(true);\n+                            return CompletableFuture.completedFuture(msg);\n+                        } else {\n+                            CompletableFuture<Message<?>> future = new CompletableFuture<>();\n+                            vertx.setPeriodic(100, id -> {\n+                                if (client.getState().isConnected()) {\n+                                    vertx.cancelTimer(id);\n+                                    connected.set(true);\n+                                    future.complete(msg);\n+                                }\n+                            });\n+                            return future;\n+                        }\n+                    } else {\n+                        return HiveMQClients.getConnectedClient(config)\n+                                .map(c -> {\n+                                    reference.set(c);\n+                                    connected.set(true);\n+                                    return msg;\n+                                })\n+                                .subscribeAsCompletionStage();\n+                    }\n+                })\n+                .flatMapCompletionStage(msg -> send(reference, msg))\n+                .onComplete(() -> {\n+                    Mqtt3Client c = reference.getAndSet(null);\n+                    if (c != null) {\n+                        connected.set(false);\n+                        c.toBlocking().disconnect();\n+                    }\n+                })\n+                .onError(log::errorWhileSendingMessageToBroker)\n+                .ignore();\n+    }\n+\n+    private CompletionStage<?> send(AtomicReference<Mqtt3RxClient> reference, Message<?> msg) {\n+        Mqtt3RxClient client = reference.get();\n+        String actualTopicToBeUsed = this.topic;\n+        MqttQos actualQoS = MqttQos.fromCode(this.qos);\n+        boolean isRetain = false;\n+\n+        if (msg instanceof SendingMqttMessage) {\n+            MqttMessage<?> mm = ((SendingMqttMessage<?>) msg);\n+            actualTopicToBeUsed = mm.getTopic() == null ? topic : mm.getTopic();\n+            actualQoS = MqttQos.fromCode(mm.getQosLevel() == null ? actualQoS.getCode() : mm.getQosLevel().value());\n+            isRetain = mm.isRetain();\n+        }\n+\n+        if (actualTopicToBeUsed == null) {\n+            log.ignoringNoTopicSet();\n+            return CompletableFuture.completedFuture(msg);\n+        }\n+\n+        final Flowable<Mqtt3PublishResult> publish = client.publish(Flowable.just(Mqtt3Publish.builder()\n+                .topic(actualTopicToBeUsed)\n+                .qos(actualQoS)\n+                .payload(convert(msg.getPayload()))\n+                .retain(isRetain)\n+                .build()));\n+\n+        return Uni.createFrom().converter(UniRxConverters.fromFlowable(), publish)\n+                .onItemOrFailure().transformToUni((s, f) -> {\n+                    if (f != null) {\n+                        return Uni.createFrom().completionStage(msg.nack(f).thenApply(x -> msg));\n+                    } else {\n+                        return Uni.createFrom().completionStage(msg.ack().thenApply(x -> msg));\n+                    }\n+                })\n+                .subscribeAsCompletionStage();\n+    }\n+\n+    private ByteBuffer convert(Object payload) {\n+        final Buffer buffer = toBuffer(payload);\n+\n+        return ByteBuffer.wrap(buffer.getBytes());\n+    }\n+\n+    private Buffer toBuffer(Object payload) {\n+        if (payload instanceof JsonObject) {\n+            return new Buffer(((JsonObject) payload).toBuffer());\n+        }\n+        if (payload instanceof JsonArray) {\n+            return new Buffer(((JsonArray) payload).toBuffer());\n+        }\n+        if (payload instanceof String || payload.getClass().isPrimitive()) {\n+            return new Buffer(io.vertx.core.buffer.Buffer.buffer(payload.toString()));\n+        }\n+        if (payload instanceof byte[]) {\n+            return new Buffer(io.vertx.core.buffer.Buffer.buffer((byte[]) payload));\n+        }\n+        if (payload instanceof Buffer) {\n+            return (Buffer) payload;\n+        }\n+        if (payload instanceof io.vertx.core.buffer.Buffer) {\n+            return new Buffer((io.vertx.core.buffer.Buffer) payload);\n+        }\n+        // Convert to Json\n+        return new Buffer(Json.encodeToBuffer(payload));\n+    }\n+\n+    public SubscriberBuilder<? extends Message<?>, Void> getSink() {\n+        return sink;\n+    }\n+\n+    public boolean isReady() {\n+        return connected.get();\n+    }\n+}"
  },
  {
    "sha": "9f42e00a2f33f029eb495cdedb27f939228ad326",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSource.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSource.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSource.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSource.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,91 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import static io.smallrye.reactive.messaging.mqtt.i18n.MqttExceptions.ex;\n+import static io.smallrye.reactive.messaging.mqtt.i18n.MqttLogging.log;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+\n+import com.hivemq.client.mqtt.datatypes.MqttQos;\n+import com.hivemq.client.mqtt.mqtt3.message.publish.Mqtt3Publish;\n+\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.converters.multi.MultiRxConverters;\n+import io.smallrye.reactive.messaging.mqtt.*;\n+\n+public class HiveMQMqttSource implements Source {\n+\n+    private final PublisherBuilder<MqttMessage<?>> source;\n+    private final AtomicBoolean subscribed = new AtomicBoolean();\n+    private final Pattern pattern;\n+\n+    public HiveMQMqttSource(HiveMQMqttConnectorIncomingConfiguration config) {\n+        String topic = config.getTopic().orElseGet(config::getChannel);\n+        int qos = config.getQos();\n+        boolean broadcast = config.getBroadcast();\n+        MqttFailureHandler.Strategy strategy = MqttFailureHandler.Strategy.from(config.getFailureStrategy());\n+        MqttFailureHandler onNack = createFailureHandler(strategy, config.getChannel());\n+\n+        if (topic.contains(\"#\") || topic.contains(\"+\")) {\n+            String replace = topic.replace(\"+\", \"[^/]+\")\n+                    .replace(\"#\", \".+\");\n+            pattern = Pattern.compile(replace);\n+        } else {\n+            pattern = null;\n+        }\n+\n+        HiveMQClients.ClientHolder holder = HiveMQClients.getHolder(config);\n+\n+        this.source = ReactiveStreams.fromPublisher(\n+                holder.connect()\n+                        .onItem()\n+                        .transformToMulti(client -> Multi.createFrom()\n+                                .converter(MultiRxConverters.fromFlowable(), client.subscribePublishesWith()\n+                                        .topicFilter(topic).qos(MqttQos.fromCode(qos))\n+                                        .applySubscribe().doOnSingle(subAck -> {\n+                                            subscribed.set(true);\n+                                        }))\n+                                //TODO: do we really need this ?\n+                                .filter(m -> matches(topic, m))\n+                                .onItem()\n+                                .transform(x -> new HiveMQReceivingMqttMessage(x, onNack)))\n+                        .stage(multi -> {\n+                            if (broadcast) {\n+                                return multi.broadcast().toAllSubscribers();\n+                            }\n+                            return multi;\n+                        })\n+                        .onCancellation().invoke(() -> subscribed.set(false))\n+                        .onFailure().invoke(log::unableToConnectToBroker));\n+    }\n+\n+    private boolean matches(String topic, Mqtt3Publish m) {\n+        String topicName = m.getTopic().toString();\n+        if (pattern != null) {\n+            return pattern.matcher(topicName).matches();\n+        }\n+        return topicName.equals(topic);\n+    }\n+\n+    private MqttFailureHandler createFailureHandler(MqttFailureHandler.Strategy strategy, String channel) {\n+        switch (strategy) {\n+            case IGNORE:\n+                return new MqttIgnoreFailure(channel);\n+            case FAIL:\n+                return new MqttFailStop(channel);\n+            default:\n+                throw ex.illegalArgumentUnknownStrategy(strategy.toString());\n+        }\n+    }\n+\n+    public PublisherBuilder<MqttMessage<?>> getSource() {\n+        return source;\n+    }\n+\n+    public boolean isSubscribed() {\n+        return subscribed.get();\n+    }\n+}"
  },
  {
    "sha": "3e09d76fa306f52c6a0d3f8c63e3db69f1238774",
    "filename": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQReceivingMqttMessage.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQReceivingMqttMessage.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQReceivingMqttMessage.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQReceivingMqttMessage.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,55 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import com.hivemq.client.mqtt.mqtt3.message.publish.Mqtt3Publish;\n+\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import io.smallrye.reactive.messaging.mqtt.MqttFailureHandler;\n+import io.smallrye.reactive.messaging.mqtt.MqttMessage;\n+\n+public class HiveMQReceivingMqttMessage implements MqttMessage<byte[]> {\n+    final Mqtt3Publish message;\n+    final MqttFailureHandler onNack;\n+\n+    HiveMQReceivingMqttMessage(Mqtt3Publish message, MqttFailureHandler onNack) {\n+        this.message = message;\n+        this.onNack = onNack;\n+    }\n+\n+    @Override\n+    public byte[] getPayload() {\n+        return this.message.getPayloadAsBytes();\n+    }\n+\n+    public int getMessageId() {\n+        return -1;\n+    }\n+\n+    public MqttQoS getQosLevel() {\n+        return MqttQoS.valueOf(message.getQos().getCode());\n+    }\n+\n+    public boolean isDuplicate() {\n+        return false;\n+    }\n+\n+    public boolean isRetain() {\n+        return message.isRetain();\n+    }\n+\n+    public String getTopic() {\n+        return message.getTopic().toString();\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> nack(Throwable reason) {\n+        return this.onNack.handle(reason);\n+    }\n+\n+    @Override\n+    public Function<Throwable, CompletionStage<Void>> getNack() {\n+        return this::nack;\n+    }\n+}"
  },
  {
    "sha": "34df23c8cc1056c150e1645445a13fb9761df819",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/DynamicMqttTopicSourceTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/DynamicMqttTopicSourceTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/DynamicMqttTopicSourceTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/DynamicMqttTopicSourceTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -17,7 +17,6 @@\n import org.eclipse.microprofile.reactive.messaging.Channel;\n import org.eclipse.microprofile.reactive.messaging.Emitter;\n import org.eclipse.microprofile.reactive.messaging.Incoming;\n-import org.eclipse.microprofile.reactive.messaging.spi.ConnectorLiteral;\n import org.jboss.weld.environment.se.Weld;\n import org.jboss.weld.environment.se.WeldContainer;\n import org.junit.jupiter.api.AfterEach;\n@@ -30,6 +29,12 @@\n \n     private WeldContainer container;\n \n+    private MqttFactory vertxMqttFactory = new VertxMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return vertxMqttFactory;\n+    }\n+\n     @AfterEach\n     public void cleanup() {\n         if (container != null) {\n@@ -39,12 +44,10 @@ public void cleanup() {\n \n     private void awaitAndVerify() {\n         DynamicTopicApp bean = container.getBeanManager().createInstance().select(DynamicTopicApp.class).get();\n-        MqttConnector connector = this.container\n-                .select(MqttConnector.class, ConnectorLiteral.of(\"smallrye-mqtt\")).get();\n \n         await()\n                 .pollInterval(Duration.ofSeconds(1))\n-                .until(connector::isSourceReady);\n+                .until(() -> mqttFactory().connectorIsSourceReady(container));\n \n         bean.publish();\n \n@@ -110,7 +113,7 @@ private MapBasedConfig getConfig(String pattern) {\n         String prefix = \"mp.messaging.outgoing.out.\";\n         Map<String, Object> config = new HashMap<>();\n         config.put(prefix + \"topic\", \"not-used\");\n-        config.put(prefix + \"connector\", MqttConnector.CONNECTOR_NAME);\n+        config.put(prefix + \"connector\", mqttFactory().connectorName());\n         config.put(prefix + \"host\", System.getProperty(\"mqtt-host\"));\n         config.put(prefix + \"port\", Integer.valueOf(System.getProperty(\"mqtt-port\")));\n         if (System.getProperty(\"mqtt-user\") != null) {\n@@ -120,7 +123,7 @@ private MapBasedConfig getConfig(String pattern) {\n \n         prefix = \"mp.messaging.incoming.mqtt.\";\n         config.put(prefix + \"topic\", pattern);\n-        config.put(prefix + \"connector\", MqttConnector.CONNECTOR_NAME);\n+        config.put(prefix + \"connector\", mqttFactory().connectorName());\n         config.put(prefix + \"host\", System.getProperty(\"mqtt-host\"));\n         config.put(prefix + \"port\", Integer.valueOf(System.getProperty(\"mqtt-port\")));\n         if (System.getProperty(\"mqtt-user\") != null) {"
  },
  {
    "sha": "30089135f6cf38c1e855dc5b39690e328e0926fc",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/FailureHandlerTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 9,
    "changes": 19,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/FailureHandlerTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/FailureHandlerTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/FailureHandlerTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -14,7 +14,6 @@\n \n import org.eclipse.microprofile.config.ConfigProvider;\n import org.eclipse.microprofile.reactive.messaging.Incoming;\n-import org.eclipse.microprofile.reactive.messaging.spi.ConnectorLiteral;\n import org.jboss.weld.environment.se.Weld;\n import org.jboss.weld.environment.se.WeldContainer;\n import org.junit.jupiter.api.AfterEach;\n@@ -27,6 +26,12 @@\n \n     private WeldContainer container;\n \n+    private MqttFactory vertxMqttFactory = new VertxMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return vertxMqttFactory;\n+    }\n+\n     @AfterEach\n     public void cleanup() {\n         if (container != null) {\n@@ -50,9 +55,7 @@ public void testFailStrategy() {\n         MyReceiverBean bean = deploy();\n         AtomicInteger counter = new AtomicInteger();\n \n-        MqttConnector connector = container.getBeanManager().createInstance().select(MqttConnector.class,\n-                ConnectorLiteral.of(MqttConnector.CONNECTOR_NAME)).get();\n-        await().until(connector::isReady);\n+        await().until(() -> mqttFactory().connectorIsReady(container));\n \n         usage.produceStrings(\"fail\", 10, null, () -> Integer.toString(counter.getAndIncrement()));\n \n@@ -67,9 +70,7 @@ public void testIgnoreStrategy() {\n         MyReceiverBean bean = deploy();\n         AtomicInteger counter = new AtomicInteger();\n \n-        MqttConnector connector = container.getBeanManager().createInstance().select(MqttConnector.class,\n-                ConnectorLiteral.of(MqttConnector.CONNECTOR_NAME)).get();\n-        await().until(connector::isReady);\n+        await().until(() -> mqttFactory().connectorIsReady(container));\n \n         usage.produceStrings(\"ignore\", 10, null, () -> Integer.toString(counter.getAndIncrement()));\n \n@@ -82,7 +83,7 @@ public void testIgnoreStrategy() {\n     private void getFailConfig() {\n         new MapBasedConfig()\n                 .put(\"mp.messaging.incoming.mqtt.topic\", \"fail\")\n-                .put(\"mp.messaging.incoming.mqtt.connector\", MqttConnector.CONNECTOR_NAME)\n+                .put(\"mp.messaging.incoming.mqtt.connector\", mqttFactory().connectorName())\n                 .put(\"mp.messaging.incoming.mqtt.host\", address)\n                 .put(\"mp.messaging.incoming.mqtt.port\", port)\n                 .put(\"mp.messaging.incoming.mqtt.durable\", true)\n@@ -93,7 +94,7 @@ private void getFailConfig() {\n     private void getIgnoreConfig() {\n         new MapBasedConfig()\n                 .put(\"mp.messaging.incoming.mqtt.topic\", \"ignore\")\n-                .put(\"mp.messaging.incoming.mqtt.connector\", MqttConnector.CONNECTOR_NAME)\n+                .put(\"mp.messaging.incoming.mqtt.connector\", mqttFactory().connectorName())\n                 .put(\"mp.messaging.incoming.mqtt.host\", address)\n                 .put(\"mp.messaging.incoming.mqtt.port\", port)\n                 .put(\"mp.messaging.incoming.mqtt.durable\", true)"
  },
  {
    "sha": "5fb34bc76ece009971a481cfed403ffdb9bf298f",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttFactory.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttFactory.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttFactory.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttFactory.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,21 @@\n+package io.smallrye.reactive.messaging.mqtt;\n+\n+import java.util.Map;\n+\n+import org.jboss.weld.environment.se.WeldContainer;\n+\n+import io.vertx.mutiny.core.Vertx;\n+\n+public interface MqttFactory {\n+    String connectorName();\n+\n+    boolean connectorIsReady(WeldContainer container);\n+\n+    boolean connectorIsSourceReady(WeldContainer container);\n+\n+    void clearClients();\n+\n+    Source createSource(Vertx vertx, Map<String, Object> config);\n+\n+    Sink createSink(Vertx vertx, Map<String, Object> config);\n+}"
  },
  {
    "sha": "e2353c3b136f3a7920c1ab18a7c0ec40ea7703fe",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSinkTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 5,
    "changes": 16,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSinkTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSinkTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSinkTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -26,12 +26,18 @@\n \n     private WeldContainer container;\n \n+    private MqttFactory vertxMqttFactory = new VertxMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return vertxMqttFactory;\n+    }\n+\n     @AfterEach\n     public void cleanup() {\n         if (container != null) {\n             container.close();\n         }\n-        Clients.clear();\n+        mqttFactory().clearClients();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -48,7 +54,7 @@ public void testSinkUsingInteger() throws InterruptedException {\n         config.put(\"topic\", topic);\n         config.put(\"host\", address);\n         config.put(\"port\", port);\n-        MqttSink sink = new MqttSink(vertx, new MqttConnectorOutgoingConfiguration(new MapBasedConfig(config)));\n+        Sink sink = mqttFactory().createSink(vertx, config);\n \n         Subscriber<? extends Message<?>> subscriber = sink.getSink().build();\n         Flowable.range(0, 10)\n@@ -74,7 +80,7 @@ public void testSinkUsingChannelName() throws InterruptedException {\n         config.put(\"channel-name\", topic);\n         config.put(\"host\", address);\n         config.put(\"port\", port);\n-        MqttSink sink = new MqttSink(vertx, new MqttConnectorOutgoingConfiguration(new MapBasedConfig(config)));\n+        Sink sink = mqttFactory().createSink(vertx, config);\n \n         Subscriber<? extends Message<?>> subscriber = sink.getSink().build();\n         Flowable.range(0, 10)\n@@ -100,7 +106,7 @@ public void testSinkUsingString() throws InterruptedException {\n         config.put(\"topic\", topic);\n         config.put(\"host\", address);\n         config.put(\"port\", port);\n-        MqttSink sink = new MqttSink(vertx, new MqttConnectorOutgoingConfiguration(new MapBasedConfig(config)));\n+        Sink sink = mqttFactory().createSink(vertx, config);\n \n         Subscriber<? extends Message<?>> subscriber = sink.getSink().build();\n         Flowable.range(0, 10)\n@@ -132,7 +138,7 @@ private MapBasedConfig getConfig() {\n         String prefix = \"mp.messaging.outgoing.sink.\";\n         Map<String, Object> config = new HashMap<>();\n         config.put(prefix + \"topic\", \"sink\");\n-        config.put(prefix + \"connector\", MqttConnector.CONNECTOR_NAME);\n+        config.put(prefix + \"connector\", mqttFactory().connectorName());\n         config.put(prefix + \"host\", System.getProperty(\"mqtt-host\"));\n         config.put(prefix + \"port\", Integer.valueOf(System.getProperty(\"mqtt-port\")));\n         if (System.getProperty(\"mqtt-user\") != null) {"
  },
  {
    "sha": "9804e37ffd8f5782af7c546c68de3a53eac7397b",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSourceTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 11,
    "changes": 27,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSourceTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSourceTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSourceTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -9,7 +9,6 @@\n import java.util.stream.Collectors;\n \n import org.eclipse.microprofile.reactive.messaging.Message;\n-import org.eclipse.microprofile.reactive.messaging.spi.ConnectorLiteral;\n import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n import org.jboss.weld.environment.se.Weld;\n import org.jboss.weld.environment.se.WeldContainer;\n@@ -20,14 +19,20 @@\n \n public class MqttSourceTest extends MqttTestBase {\n \n-    private WeldContainer container;\n+    protected WeldContainer container;\n+\n+    private MqttFactory vertxMqttFactory = new VertxMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return vertxMqttFactory;\n+    }\n \n     @AfterEach\n     public void cleanup() {\n         if (container != null) {\n             container.close();\n         }\n-        Clients.clear();\n+        mqttFactory().clearClients();\n     }\n \n     @Test\n@@ -38,7 +43,7 @@ public void testSource() {\n         config.put(\"host\", address);\n         config.put(\"port\", port);\n         config.put(\"channel-name\", topic);\n-        MqttSource source = new MqttSource(vertx, new MqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n+        Source source = mqttFactory().createSource(vertx, config);\n \n         List<MqttMessage<?>> messages = new ArrayList<>();\n         PublisherBuilder<MqttMessage<?>> stream = source.getSource();\n@@ -64,7 +69,7 @@ public void testSourceUsingChannelName() {\n         config.put(\"channel-name\", topic);\n         config.put(\"host\", address);\n         config.put(\"port\", port);\n-        MqttSource source = new MqttSource(vertx, new MqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n+        Source source = mqttFactory().createSource(vertx, config);\n \n         List<MqttMessage<?>> messages = new ArrayList<>();\n         PublisherBuilder<MqttMessage<?>> stream = source.getSource();\n@@ -93,7 +98,7 @@ public void testBroadcast() {\n         config.put(\"channel-name\", topic);\n         config.put(\"broadcast\", true);\n \n-        MqttSource source = new MqttSource(vertx, new MqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n+        Source source = mqttFactory().createSource(vertx, config);\n \n         List<MqttMessage<?>> messages1 = new ArrayList<>();\n         List<MqttMessage<?>> messages2 = new ArrayList<>();\n@@ -134,7 +139,7 @@ public void testWithVeryLargeMessage() {\n         config.put(\"port\", port);\n         config.put(\"channel-name\", topic);\n         config.put(\"max-message-size\", 20 * 1024);\n-        MqttSource source = new MqttSource(vertx, new MqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n+        Source source = mqttFactory().createSource(vertx, config);\n \n         byte[] large = new byte[10 * 1024];\n         random.nextBytes(large);\n@@ -154,11 +159,11 @@ public void testWithVeryLargeMessage() {\n                         .contains(large);\n     }\n \n-    static MapBasedConfig getConfig() {\n+    public static MapBasedConfig getConfigForConnector(String connectorName) {\n         String prefix = \"mp.messaging.incoming.data.\";\n         Map<String, Object> config = new HashMap<>();\n         config.put(prefix + \"topic\", \"data\");\n-        config.put(prefix + \"connector\", MqttConnector.CONNECTOR_NAME);\n+        config.put(prefix + \"connector\", connectorName);\n         config.put(prefix + \"host\", System.getProperty(\"mqtt-host\"));\n         config.put(prefix + \"port\", Integer.valueOf(System.getProperty(\"mqtt-port\")));\n         if (System.getProperty(\"mqtt-user\") != null) {\n@@ -173,7 +178,7 @@ public void testABeanConsumingTheMQTTMessages() {\n         ConsumptionBean bean = deploy();\n \n         await()\n-                .until(() -> container.select(MqttConnector.class, ConnectorLiteral.of(\"smallrye-mqtt\")).get().isReady());\n+                .until(() -> mqttFactory().connectorIsReady(container));\n \n         List<Integer> list = bean.getResults();\n         assertThat(list).isEmpty();\n@@ -187,7 +192,7 @@ public void testABeanConsumingTheMQTTMessages() {\n     }\n \n     private ConsumptionBean deploy() {\n-        Weld weld = baseWeld(getConfig());\n+        Weld weld = baseWeld(getConfigForConnector(mqttFactory().connectorName()));\n         weld.addBeanClass(ConsumptionBean.class);\n         container = weld.initialize();\n         return container.getBeanManager().createInstance().select(ConsumptionBean.class).get();"
  },
  {
    "sha": "42232ce0282ef2c3382f9d6fd488a873d4f433ae",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttTestBase.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttTestBase.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttTestBase.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttTestBase.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -20,6 +20,7 @@\n import io.smallrye.reactive.messaging.extension.ReactiveMessagingExtension;\n import io.smallrye.reactive.messaging.impl.ConfiguredChannelFactory;\n import io.smallrye.reactive.messaging.impl.InternalChannelRegistry;\n+import io.smallrye.reactive.messaging.mqtt.hivemq.HiveMQMqttConnector;\n import io.smallrye.reactive.messaging.test.common.config.MapBasedConfig;\n import io.smallrye.reactive.messaging.wiring.Wiring;\n import io.vertx.mutiny.core.Vertx;\n@@ -30,10 +31,10 @@\n             .withExposedPorts(1883)\n             .waitingFor(Wait.forLogMessage(\".*listen socket on port 1883.*\\\\n\", 2));\n \n-    Vertx vertx;\n-    String address;\n-    Integer port;\n-    MqttUsage usage;\n+    protected Vertx vertx;\n+    protected String address;\n+    protected Integer port;\n+    protected MqttUsage usage;\n \n     @BeforeAll\n     public static void startBroker() {\n@@ -73,7 +74,7 @@ public void tearDown() {\n                 .releaseConfig(ConfigProvider.getConfig(this.getClass().getClassLoader()));\n     }\n \n-    static Weld baseWeld(MapBasedConfig config) {\n+    public static Weld baseWeld(MapBasedConfig config) {\n         addConfig(config);\n         Weld weld = new Weld();\n         weld.disableDiscovery();\n@@ -87,6 +88,7 @@ static Weld baseWeld(MapBasedConfig config) {\n         weld.addPackages(EmitterImpl.class.getPackage());\n         weld.addExtension(new ReactiveMessagingExtension());\n         weld.addBeanClass(MqttConnector.class);\n+        weld.addBeanClass(HiveMQMqttConnector.class);\n \n         // Add SmallRye Config\n         weld.addExtension(new io.smallrye.config.inject.ConfigExtension());"
  },
  {
    "sha": "86795c7ea116ba85bc9edc8123f99f170270a71d",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttSourceTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttSourceTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttSourceTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttSourceTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -1,6 +1,6 @@\n package io.smallrye.reactive.messaging.mqtt;\n \n-import static io.smallrye.reactive.messaging.mqtt.MqttSourceTest.getConfig;\n+import static io.smallrye.reactive.messaging.mqtt.MqttSourceTest.getConfigForConnector;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.awaitility.Awaitility.await;\n \n@@ -16,12 +16,16 @@\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n \n-import io.smallrye.reactive.messaging.test.common.config.MapBasedConfig;\n-\n public class SecureMqttSourceTest extends SecureMqttTestBase {\n \n     private WeldContainer container;\n \n+    private MqttFactory vertxMqttFactory = new VertxMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return vertxMqttFactory;\n+    }\n+\n     @AfterEach\n     public void cleanup() {\n         if (container != null) {\n@@ -40,7 +44,7 @@ public void testSecureSource() {\n         config.put(\"username\", \"user\");\n         config.put(\"password\", \"foo\");\n         config.put(\"channel-name\", topic);\n-        MqttSource source = new MqttSource(vertx, new MqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n+        Source source = mqttFactory().createSource(vertx, config);\n \n         List<MqttMessage<?>> messages = new ArrayList<>();\n         PublisherBuilder<MqttMessage<?>> stream = source.getSource();\n@@ -85,7 +89,7 @@ void pause() {\n     }\n \n     private ConsumptionBean deploy() {\n-        Weld weld = MqttTestBase.baseWeld(getConfig());\n+        Weld weld = MqttTestBase.baseWeld(getConfigForConnector(mqttFactory().connectorName()));\n         weld.addBeanClass(ConsumptionBean.class);\n         container = weld.initialize();\n         return container.getBeanManager().createInstance().select(ConsumptionBean.class).get();"
  },
  {
    "sha": "87ba9066f156bed14750174f78dcff9171abc057",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttTestBase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttTestBase.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttTestBase.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/SecureMqttTestBase.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -21,7 +21,7 @@\n             .withFileSystemBind(\"src/test/resources/mosquitto-secure\", \"/mosquitto/config\", BindMode.READ_WRITE)\n             .waitingFor(Wait.forLogMessage(\".*listen socket on port 1883.*\\\\n\", 2));\n \n-    Vertx vertx;\n+    protected Vertx vertx;\n     protected String address;\n     protected Integer port;\n     protected MqttUsage usage;"
  },
  {
    "sha": "76f034a6a12768ddc99dc90aa52a15777209b81e",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/VertxMqttFactory.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/VertxMqttFactory.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/VertxMqttFactory.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/VertxMqttFactory.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,44 @@\n+package io.smallrye.reactive.messaging.mqtt;\n+\n+import java.util.Map;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorLiteral;\n+import org.jboss.weld.environment.se.WeldContainer;\n+\n+import io.smallrye.reactive.messaging.test.common.config.MapBasedConfig;\n+import io.vertx.mutiny.core.Vertx;\n+\n+public class VertxMqttFactory implements MqttFactory {\n+\n+    @Override\n+    public String connectorName() {\n+        return MqttConnector.CONNECTOR_NAME;\n+    }\n+\n+    @Override\n+    public boolean connectorIsReady(WeldContainer container) {\n+        return container.select(MqttConnector.class, ConnectorLiteral.of(connectorName())).get()\n+                .isReady();\n+    }\n+\n+    @Override\n+    public boolean connectorIsSourceReady(WeldContainer container) {\n+        return container\n+                .select(MqttConnector.class, ConnectorLiteral.of(\"smallrye-mqtt\")).get().isSourceReady();\n+    }\n+\n+    @Override\n+    public void clearClients() {\n+        Clients.clear();\n+    }\n+\n+    @Override\n+    public Source createSource(Vertx vertx, Map<String, Object> config) {\n+        return new MqttSource(vertx, new MqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n+    }\n+\n+    @Override\n+    public Sink createSink(Vertx vertx, Map<String, Object> config) {\n+        return new MqttSink(vertx, new MqttConnectorOutgoingConfiguration(new MapBasedConfig(config)));\n+    }\n+}"
  },
  {
    "sha": "957057fec47e5c88e25c878a7a5ab4fa858af81c",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQDynamicMqttTopicSourceTest.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQDynamicMqttTopicSourceTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQDynamicMqttTopicSourceTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQDynamicMqttTopicSourceTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,18 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import org.jboss.weld.environment.se.WeldContainer;\n+\n+import io.smallrye.reactive.messaging.mqtt.DynamicMqttTopicSourceTest;\n+import io.smallrye.reactive.messaging.mqtt.MqttFactory;\n+\n+public class HiveMQDynamicMqttTopicSourceTest extends DynamicMqttTopicSourceTest {\n+\n+    private WeldContainer container;\n+\n+    private MqttFactory hivemqMqttFactory = new HiveMQMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return hivemqMqttFactory;\n+    }\n+\n+}"
  },
  {
    "sha": "e11a4293ff151ee5f7dcaa1eced7ae6996a2f622",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQFailureHandlerTest.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQFailureHandlerTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQFailureHandlerTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQFailureHandlerTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,13 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import io.smallrye.reactive.messaging.mqtt.FailureHandlerTest;\n+import io.smallrye.reactive.messaging.mqtt.MqttFactory;\n+\n+public class HiveMQFailureHandlerTest extends FailureHandlerTest {\n+    private MqttFactory hivemqMqttFactory = new HiveMQMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return hivemqMqttFactory;\n+    }\n+\n+}"
  },
  {
    "sha": "822fd3bc7c634d2d37fee50c48950b23d7a1bd08",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttFactory.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttFactory.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttFactory.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttFactory.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,47 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import java.util.Map;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorLiteral;\n+import org.jboss.weld.environment.se.WeldContainer;\n+\n+import io.smallrye.reactive.messaging.mqtt.MqttFactory;\n+import io.smallrye.reactive.messaging.mqtt.Sink;\n+import io.smallrye.reactive.messaging.mqtt.Source;\n+import io.smallrye.reactive.messaging.test.common.config.MapBasedConfig;\n+import io.vertx.mutiny.core.Vertx;\n+\n+public class HiveMQMqttFactory implements MqttFactory {\n+\n+    @Override\n+    public String connectorName() {\n+        return HiveMQMqttConnector.CONNECTOR_NAME;\n+    }\n+\n+    @Override\n+    public boolean connectorIsReady(WeldContainer container) {\n+        return container.select(HiveMQMqttConnector.class, ConnectorLiteral.of(connectorName())).get()\n+                .isReady();\n+    }\n+\n+    @Override\n+    public boolean connectorIsSourceReady(WeldContainer container) {\n+        return container\n+                .select(HiveMQMqttConnector.class, ConnectorLiteral.of(connectorName())).get().isSourceReady();\n+    }\n+\n+    @Override\n+    public void clearClients() {\n+        HiveMQClients.clear();\n+    }\n+\n+    @Override\n+    public Source createSource(Vertx vertx, Map<String, Object> config) {\n+        return new HiveMQMqttSource(new HiveMQMqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n+    }\n+\n+    @Override\n+    public Sink createSink(Vertx vertx, Map<String, Object> config) {\n+        return new HiveMQMqttSink(vertx, new HiveMQMqttConnectorOutgoingConfiguration(new MapBasedConfig(config)));\n+    }\n+}"
  },
  {
    "sha": "fc002467306607f15dfb83e3155a3b5e8a94358d",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSinkTest.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSinkTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSinkTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSinkTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,13 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import io.smallrye.reactive.messaging.mqtt.MqttFactory;\n+\n+public class HiveMQMqttSinkTest extends io.smallrye.reactive.messaging.mqtt.MqttSinkTest {\n+\n+    private MqttFactory hivemqMqttFactory = new HiveMQMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return hivemqMqttFactory;\n+    }\n+\n+}"
  },
  {
    "sha": "a177d3c8d59ef8546dc9080e3ed5b02f350eb6a8",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSourceTest.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSourceTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSourceTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQMqttSourceTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,13 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import io.smallrye.reactive.messaging.mqtt.MqttFactory;\n+\n+public class HiveMQMqttSourceTest extends io.smallrye.reactive.messaging.mqtt.MqttSourceTest {\n+\n+    MqttFactory hiveMQMqttFactory = new HiveMQMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return hiveMQMqttFactory;\n+    }\n+\n+}"
  },
  {
    "sha": "d6797db213af2c05bf56d2bd77b97754d32d082f",
    "filename": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQSecureMqttSourceTest.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/smallrye/smallrye-reactive-messaging/blob/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQSecureMqttSourceTest.java",
    "raw_url": "https://github.com/smallrye/smallrye-reactive-messaging/raw/d9bd0a58fe1f69f58843304219c29797ff43c602/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQSecureMqttSourceTest.java",
    "contents_url": "https://api.github.com/repos/smallrye/smallrye-reactive-messaging/contents/smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/hivemq/HiveMQSecureMqttSourceTest.java?ref=d9bd0a58fe1f69f58843304219c29797ff43c602",
    "patch": "@@ -0,0 +1,14 @@\n+package io.smallrye.reactive.messaging.mqtt.hivemq;\n+\n+import io.smallrye.reactive.messaging.mqtt.MqttFactory;\n+import io.smallrye.reactive.messaging.mqtt.SecureMqttSourceTest;\n+\n+public class HiveMQSecureMqttSourceTest extends SecureMqttSourceTest {\n+\n+    MqttFactory hiveMQMqttFactory = new HiveMQMqttFactory();\n+\n+    protected MqttFactory mqttFactory() {\n+        return hiveMQMqttFactory;\n+    }\n+\n+}"
  }
]
