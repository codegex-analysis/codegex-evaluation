[
  {
    "sha": "b2af145528bb90ce2ae3b0dc003cb47aee3131da",
    "filename": "Day04_IntersectionOfTwoLinkedlist/Solution.java.txt",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day04_IntersectionOfTwoLinkedlist/Solution.java.txt",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day04_IntersectionOfTwoLinkedlist/Solution.java.txt",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day04_IntersectionOfTwoLinkedlist/Solution.java.txt?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,63 @@\n+\r\n+Link to this Challenge:  https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/588/week-1-march-1st-march-7th/3660/\r\n+/**\r\n+ * Definition for singly-linked list.\r\n+ * public class ListNode {\r\n+ *     int val;\r\n+ *     ListNode next;\r\n+ *     ListNode(int x) {\r\n+ *         val = x;\r\n+ *         next = null;\r\n+ *     }\r\n+ * }\r\n+ */\r\n+public class Solution {\r\n+    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n+        ListNode NodeA=headA;\r\n+        ListNode NodeB=headB;\r\n+        int lengthlist1=0,lengthlist2=0;\r\n+\r\n+        if(NodeA==null || NodeB==null) {\r\n+            return null;\r\n+        }\r\n+\r\n+        //find length of each list\r\n+        //length of list1\r\n+        while(NodeA !=null){\r\n+            lengthlist1++;\r\n+            NodeA=NodeA.next;\r\n+        }\r\n+        //length of list2\r\n+        while(NodeB !=null){\r\n+            lengthlist2++;\r\n+            NodeB=NodeB.next;\r\n+        }\r\n+        //find difference in lengths of list1 and list2\r\n+        int difference=0;\r\n+        ListNode nodeA=headA,nodeB=headB;\r\n+        if(lengthlist1>lengthlist2){\r\n+            difference=lengthlist1-lengthlist2;\r\n+            int i=0;\r\n+            while (i<difference){\r\n+              nodeA=nodeA.next;\r\n+              i++;\r\n+            }\r\n+        } else {\r\n+            difference=lengthlist2-lengthlist1;\r\n+            int i=0;\r\n+            while (i<difference){\r\n+               nodeB=nodeB.next;\r\n+               i++;\r\n+            }\r\n+        }\r\n+        //loop through list to find intersection\r\n+        while(nodeA !=null && nodeB !=null){\r\n+            if (nodeA ==nodeB){\r\n+                return nodeA;\r\n+            }\r\n+            nodeA=nodeA.next;\r\n+            nodeB=nodeB.next;\r\n+        }\r\n+        return null;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "d68f314e18cc2eb91dc65b1daa05f6ca0664f261",
    "filename": "Day4_PersonObject",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day4_PersonObject",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day4_PersonObject",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day4_PersonObject?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,53 @@\n+\n+Link to challenge:   https://www.hackerrank.com/challenges/30-class-vs-instance\n+import java.io.*;\n+import java.util.*;\n+\n+public class Person {\n+    private int age;\t\n+  \n+\tpublic Person(int initialAge) {\n+  \t\t// Add some more code to run some checks on initialAge\n+          if(initialAge>0){\n+              age=initialAge;\n+          } else{\n+              age=0;\n+              System.out.println(\"Age is not valid, setting age to 0.\");\n+          }\n+\t}\n+\n+\tpublic void amIOld() {\n+  \t\t// Write code determining if this person's age is old and print the correct statement:\n+        if(this.age<13){\n+            System.out.println(\"You are young.\");\n+        }\n+        else if (this.age>=13 && this.age<18){\n+            System.out.println(\"You are a teenager.\");\n+        } \n+        else {\n+            System.out.println(\"You are old.\");\n+        }\n+        \n+\t}\n+\n+\tpublic void yearPasses() {\n+  \t\t// Increment this person's age.\n+          this.age++;\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\tScanner sc = new Scanner(System.in);\n+\t\tint T = sc.nextInt();\n+\t\tfor (int i = 0; i < T; i++) {\n+\t\t\tint age = sc.nextInt();\n+\t\t\tPerson p = new Person(age);\n+\t\t\tp.amIOld();\n+\t\t\tfor (int j = 0; j < 3; j++) {\n+\t\t\t\tp.yearPasses();\n+\t\t\t}\n+\t\t\tp.amIOld();\n+\t\t\tSystem.out.println();\n+        }\n+\t\tsc.close();\n+    }\n+}"
  },
  {
    "sha": "d68f314e18cc2eb91dc65b1daa05f6ca0664f261",
    "filename": "Day4_PersonObject.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day4_PersonObject.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day4_PersonObject.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day4_PersonObject.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,53 @@\n+\n+Link to challenge:   https://www.hackerrank.com/challenges/30-class-vs-instance\n+import java.io.*;\n+import java.util.*;\n+\n+public class Person {\n+    private int age;\t\n+  \n+\tpublic Person(int initialAge) {\n+  \t\t// Add some more code to run some checks on initialAge\n+          if(initialAge>0){\n+              age=initialAge;\n+          } else{\n+              age=0;\n+              System.out.println(\"Age is not valid, setting age to 0.\");\n+          }\n+\t}\n+\n+\tpublic void amIOld() {\n+  \t\t// Write code determining if this person's age is old and print the correct statement:\n+        if(this.age<13){\n+            System.out.println(\"You are young.\");\n+        }\n+        else if (this.age>=13 && this.age<18){\n+            System.out.println(\"You are a teenager.\");\n+        } \n+        else {\n+            System.out.println(\"You are old.\");\n+        }\n+        \n+\t}\n+\n+\tpublic void yearPasses() {\n+  \t\t// Increment this person's age.\n+          this.age++;\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\tScanner sc = new Scanner(System.in);\n+\t\tint T = sc.nextInt();\n+\t\tfor (int i = 0; i < T; i++) {\n+\t\t\tint age = sc.nextInt();\n+\t\t\tPerson p = new Person(age);\n+\t\t\tp.amIOld();\n+\t\t\tfor (int j = 0; j < 3; j++) {\n+\t\t\t\tp.yearPasses();\n+\t\t\t}\n+\t\t\tp.amIOld();\n+\t\t\tSystem.out.println();\n+        }\n+\t\tsc.close();\n+    }\n+}"
  },
  {
    "sha": "43c28c11fce71ca75f591e1c8b139e1748d02fbe",
    "filename": "Day5/Day5Challeng1Loop.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day5/Day5Challeng1Loop.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day5/Day5Challeng1Loop.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day5/Day5Challeng1Loop.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,18 @@\n+import java.util.Scanner;\n+public class Day5Challeng1Loop {\n+    //main method\n+    public static void main(String [] args){\n+        System.out.println(\"This Program prints up to 10 multiples of a a given integer.\");\n+        //create scanner object to take input from user\n+        Scanner scan =new Scanner(System.in);\n+        System.out.print(\"Enter the number: \");\n+        int num=scan.nextInt();\n+        System.out.println(\"-------------------------\");\n+        //print up to 10, the multiples of the number with a while loop\n+        int i=1;\n+        while (i<=10){\n+            System.out.println(num+\" x \"+i+\" = \"+num*i);\n+            i++;\n+        }\n+    }\n+}"
  },
  {
    "sha": "348435ef97a6c8f2d98da9dc63bc3b245ef33349",
    "filename": "Day5/Day5Challenge2Tree.java",
    "status": "added",
    "additions": 169,
    "deletions": 0,
    "changes": 169,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day5/Day5Challenge2Tree.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day5/Day5Challenge2Tree.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day5/Day5Challenge2Tree.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,169 @@\n+// Java program to find averages of all levels\n+// in a binary tree.\n+import java.util.*;\n+import java.util.LinkedList;\n+\n+class Day5Challenge2Tree {\n+\n+\n+    /* A binary tree node has data, pointer to\n+    left child and a pointer to right child */\n+    static class Node {\n+        int val;\n+        Node left, right;\n+    }\n+\n+    /* Function to print the average value of the\n+    nodes on each level */\n+\n+    /*public List<Double> averageOfLevels(TreeNode root) {\n+        List<Double> res = new ArrayList<>();\n+        if (root == null) {\n+            return res;\n+        }\n+        ArrayList<TreeNode> qw = new ArrayList<>();\n+        qw.add(root);\n+        while (!qw.isEmpty()) {\n+            int size = qw.size();\n+            long sum = 0;\n+            for (int i = 0; i < size; ++i) {\n+                root = qw.remove(0);\n+                sum += root.val;\n+                if (root.left != null) {\n+                    qw.add(root.left);\n+                }\n+                if (root.right != null) {\n+                    qw.add(root.right);\n+                }\n+            }\n+            res.add(sum / (double)size);\n+        }\n+        return res;\n+    }\n+}*/\n+    static void averageOfLevels(Node root)\n+    {\n+        //vector<float> res;\n+\n+        // Traversing level by level\n+        Queue<Node> queue = new LinkedList<>();\n+        LinkedList list=new LinkedList();\n+        queue.add(root);\n+        long sum = 0, count  = 0;\n+\n+        while (!queue.isEmpty()) {\n+\n+            // Compute sum of nodes and\n+            // count of nodes in current\n+            // level.\n+            sum = 0;\n+            count = 0;\n+            Queue<Node> tempQueue = new LinkedList<> ();\n+            while (!queue.isEmpty()) {\n+                Node node = queue.peek();\n+                queue.remove();\n+                sum += node.val;\n+                count++;\n+                if (node.left != null)\n+                    tempQueue.add(node.left);\n+                if (node.right != null)\n+                    tempQueue.add(node.right);\n+            }\n+            queue = tempQueue;\n+            double levelAvverage=(sum*1.0/count);\n+            list.add(levelAvverage);\n+            System.out.print((sum * 1.0 / count) + \" \");\n+\n+        }\n+    }\n+\n+    /* Helper function that allocates a\n+    new node with the given data and\n+    NULL left and right pointers. */\n+    static Node newNode(int data)\n+    {\n+        Node temp = new Node();\n+        temp.val = data;\n+        temp.left = null;\n+        temp.right = null;\n+        return temp;\n+    }\n+\n+    // Driver code\n+    public static void main(String[] args)\n+    {\n+    /* Let us construct a Binary Tree\n+        4\n+    / \\\n+    2 9\n+    / \\ \\\n+    3 5 7 */\n+\n+        Node root = null;\n+        root = newNode(2147483647);\n+        root.left = newNode(2147483647);\n+        root.right = newNode(2147483647);\n+       /* root.left.left = newNode(3);\n+        root.left.right = newNode(5);\n+        root.right.right = newNode(7);*/\n+        System.out.println(\"Averages of levels : \");\n+        System.out.print(\"[\");\n+        averageOfLevels(root);\n+        System.out.println(\"]\");\n+    }\n+}\n+\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ *//*\n+class Solution {\n+    public List<Double> averageOfLevels(TreeNode root) {\n+        // Traversing level by level\n+        //queue to store node values\n+        Queue<TreeNode> queue = new LinkedList<>();\n+\n+        // list to store levels average\n+        LinkedList list=new LinkedList();\n+        queue.add(root);\n+        long sum = 0, count  = 0;\n+\n+        while (!queue.isEmpty()) {\n+\n+            //find sum of nodes and count to obtain average\n+            sum = 0;\n+            count = 0;\n+            Queue<TreeNode> tempQueue = new LinkedList<> ();\n+            while (!queue.isEmpty()) {\n+                TreeNode node = queue.peek();\n+                queue.remove();\n+                sum += node.val;\n+                count++;\n+                if (node.left != null)\n+                    tempQueue.add(node.left);\n+                if (node.right != null)\n+                    tempQueue.add(node.right);\n+\n+\n+            }\n+            queue = tempQueue;\n+            double levelAverage=(sum*1.0/count);\n+            list.add(levelAverage);\n+\n+\n+        }\n+        return list;\n+    }\n+}\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "d5f72527aa82a0e5c322122b32ec92e6d9c15760",
    "filename": "Day5/Day5Challenge3RotateArray.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day5/Day5Challenge3RotateArray.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day5/Day5Challenge3RotateArray.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day5/Day5Challenge3RotateArray.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,58 @@\n+import java.util.*;\n+import java.lang.*;\n+//Challenge link: https://practice.geeksforgeeks.org/problems/rotate-array-by-n-elements/0#\n+\n+public class Day5Challenge3RotateArray {\n+    /**\n+     * A method to perform array rotation\n+     * @param arr- Array to be rotated\n+     * @param D- number of elements rotation\n+     * @return- Rotated Array\n+     */\n+        public static int [] rotateArray(int[] arr, int D){\n+            int N=arr.length;\n+            //create new array to store rotated array\n+            int [] rotatedArray=new int[N];\n+            for(int i=0;i<N;i++){\n+                int newIndex=(i+N-D)%N; //new index of right rotated element\n+                rotatedArray[newIndex]=arr[i];\n+            }\n+            return rotatedArray;\n+        }\n+        public static void main (String[] args) {\n+            //code\n+            /*\n+            *input format\n+            * T            testcases\n+            * N D          Array length(N) and Number of right Rotations(D)\n+            * 1 2 3 4      array elements\n+            * N D\n+            * 43 12 32 2    array elements\n+             */\n+            Scanner scan=new Scanner(System.in);\n+            System.out.println(\"How many test Cases?  \");\n+            int T=scan.nextInt();\n+            for (int i=0;i<T;i++){\n+                System.out.println(\"Enter array length: \");\n+                int N=scan.nextInt();\n+                System.out.println(\"Enter the number of rotations to go: \");\n+                int D=scan.nextInt();\n+\n+\n+                int []array=new int[N];\n+                System.out.println(\"Enter array Values separated by space:  \");\n+                for(int j=0;j<N;j++){\n+                    array[j]=scan.nextInt();\n+                }\n+                int [] rotated=rotateArray(array,D);\n+                for (int it=0;it<rotated.length;it++){\n+                    System.out.print(rotated[it]+\" \");\n+\n+                }\n+                System.out.println(\" \");\n+\n+            }\n+\n+        }\n+    }\n+"
  },
  {
    "sha": "d0696e1612c2274ed3198c73924dafa1b1f3e1d1",
    "filename": "Day6/Day6Challenge1StringOperation.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day6/Day6Challenge1StringOperation.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day6/Day6Challenge1StringOperation.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day6/Day6Challenge1StringOperation.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+Link to this challenge:  https://www.hackerrank.com/challenges/30-review-loop/problem\n+ */\n+import java.util.*;\n+\n+    public class Day6Challenge1StringOperation {\n+\n+        public static void main(String[] args) {\n+            /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n+            System.out.println(\"This program divides and prints with a space between the even and odd positions of \" +\n+                    \"characters of  string in one line.\");\n+            Scanner scan =new Scanner(System.in);\n+            System.out.print(\"Enter the number of test cases: \");\n+            int T =scan.nextInt();\n+            for(int i=0;i<T;i++){\n+                //use StringBuilder to store characters at even and odd positions\n+                StringBuilder evenIndexed=new StringBuilder();\n+                StringBuilder oddIndexed=new StringBuilder();\n+                System.out.print(\"Enter a word: \");\n+                String S=scan.next();\n+\n+                for(int j=0;j<S.length();j++){\n+                    if(j%2 !=0) oddIndexed.append(S.charAt(j));\n+                    else evenIndexed.append(S.charAt(j));\n+                }\n+                System.out.println(evenIndexed.toString()+\" \"+oddIndexed.toString());\n+\n+            }\n+        }\n+}"
  },
  {
    "sha": "10e4980f4751f86f73a30776887ec150d8410ba0",
    "filename": "Day6/Day6Challenge2WordsEncoding.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day6/Day6Challenge2WordsEncoding.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day6/Day6Challenge2WordsEncoding.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day6/Day6Challenge2WordsEncoding.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,24 @@\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+public class Day6Challenge2WordsEncoding {\n+  //A method to return the length of the shortest reference string possible for any valid encoding of words\n+    public int minimumLengthEncoding(String[] words) {\n+        //HashSet to store list of words\n+        HashSet<String> hashSet = new HashSet<>(Arrays.asList(words));\n+        //check for suffixes of words list and remove any matches from our set\n+        for (String word : words)\n+            if (hashSet.contains(word))\n+                for (int i = 1; i < word.length(); i++)\n+                    hashSet.remove(word.substring(i));\n+        int length = hashSet.size();\n+        for (String word : hashSet) length += word.length();\n+        return length;\n+    }\n+\n+    public static void main(String[] args) {\n+        Day6Challenge2WordsEncoding encoding=new Day6Challenge2WordsEncoding();\n+        String[] words = {\"time\", \"me\", \"bell\"};\n+        System.out.println(encoding.minimumLengthEncoding(words));\n+    }\n+}"
  },
  {
    "sha": "fce270d2533b89ea2f7ace098866da4d0e05ac1c",
    "filename": "Day7/Day7Challenge1Arrays.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day7/Day7Challenge1Arrays.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day7/Day7Challenge1Arrays.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day7/Day7Challenge1Arrays.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,32 @@\n+\n+import java.util.*;\n+\n+public class Day7Challenge1Arrays {\n+\n+\n+        public static void main(String[] args) {\n+            Scanner scanner = new Scanner(System.in);\n+            System.out.println(\"What is the length of the Array? \");\n+            int n = scanner.nextInt();\n+\n+\n+            int[] arr = new int[n];\n+\n+            //String[] arrItems = scanner.nextLine().split(\" \");\n+\n+            System.out.println(\"Enter Array elements separated by spaces: \");\n+            for (int i = 0; i < n; i++) {\n+                //int arrItem = Integer.parseInt(arrItems[i]);\n+                //arr[i] = arrItem;\n+                arr[i]=scanner.nextInt();\n+            }\n+            //declare array with n length\n+\n+            while(n>0){\n+                System.out.print(arr[n-1]+\" \");\n+                n--;\n+            }\n+\n+            scanner.close();\n+        }\n+    }"
  },
  {
    "sha": "5e3bf7401bc8edfa19b3de0f8cb6ed73a7cd116b",
    "filename": "Day7/Day7Challenge2MyHasMap.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day7/Day7Challenge2MyHasMap.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day7/Day7Challenge2MyHasMap.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day7/Day7Challenge2MyHasMap.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,44 @@\n+import java.util.*;\n+\n+public class Day7Challenge2MyHasMap {\n+    /** Initialize your data structure here. */\n+    int[] data;\n+    public Day7Challenge2MyHasMap() {\n+        data = new int[1000000];\n+        //Arrays.fill(data,-1);\n+    }\n+\n+    /** value will always be non-negative. */\n+    public void put(int key, int value) {\n+        data[key] = value+1;\n+    }\n+\n+    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n+    public int get(int key) {\n+        return data[key]-1;\n+    }\n+\n+    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n+    public void remove(int key) {\n+        data[key] = 0;\n+    }\n+\n+\n+    /**\n+     * Your MyHashMap object will be instantiated and called as such:\n+     * MyHashMap obj = new MyHashMap();\n+     * obj.put(key,value);\n+     * int param_2 = obj.get(key);\n+     * obj.remove(key);\n+     */\n+\n+    public static void main(String[] args) {\n+        Day7Challenge2MyHasMap obj=new Day7Challenge2MyHasMap();\n+\n+    obj.put(5,8);\n+    int param_2 = obj.get(5);\n+    System.out.println(param_2);\n+    obj.remove(5);\n+    System.out.println(obj.get(5));\n+    }\n+}"
  },
  {
    "sha": "4352a056fafbea6d278202810aa59a05a3cb8e39",
    "filename": "Day7/Day7Challenge3LeftRotate.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day7/Day7Challenge3LeftRotate.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day7/Day7Challenge3LeftRotate.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day7/Day7Challenge3LeftRotate.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,48 @@\n+import java.util.*;\n+public class Day7Challenge3LeftRotate {\n+        void leftRotate(int[] arr, int n, int d) {\n+            int []A=new int[d],B=new int[n-d],Ar=new int[A.length],Br=new int[B.length],ArBr=new int[n],BrAr=new int[n];\n+            for(int i=0;i<A.length;i++){\n+                A[i]=arr[i];\n+                Ar[i]=A[(A.length-1)-i];\n+            }\n+            for(int i=0;i<A.length;i++){\n+                Ar[i]=A[(A.length-1)-i];\n+            }\n+\n+            for(int i=0;i<B.length;i++) {\n+                B[i]=arr[d+i];\n+                Br[i]=B[(B.length-1)-i];\n+            }\n+            for(int i=0;i<B.length;i++) {\n+\n+                Br[i]=B[(B.length-1)-i];\n+            }\n+\n+            for (int i=0;i<A.length;i++) {\n+\n+                ArBr[i] = Ar[i];\n+            }\n+\n+            for (int i=0;i<B.length;i++) {\n+                ArBr[d+i] = Br[i];\n+            }\n+\n+            for (int i=0;i<arr.length;i++) {\n+                BrAr[i] = ArBr[(n - 1) - i];\n+                arr[i]=BrAr[i];\n+            }\n+\n+\n+            System.out.println(Arrays.toString(arr));\n+        }\n+\n+    public static void main(String[] args) {\n+        Day7Challenge3LeftRotate sol=new Day7Challenge3LeftRotate();\n+        int n=7;\n+        int arr[] = {1, 2, 3, 4, 5, 6, 7};\n+        int []arr2={7,9};\n+        int d=2;\n+        sol.leftRotate(arr,n,d);\n+    }\n+}"
  },
  {
    "sha": "120a8d77f5111adb2c0b9e6989baba5ea128579d",
    "filename": "Day8/Day8Challenge1KeyMapping.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day8/Day8Challenge1KeyMapping.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day8/Day8Challenge1KeyMapping.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day8/Day8Challenge1KeyMapping.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,33 @@\n+\n+/*\n+Link to challenge: https://www.hackerrank.com/challenges/30-dictionaries-and-maps/problem\n+ */\n+import java.util.*;\n+\n+\n+public class Day8Challenge1KeyMapping {\n+\n+        public static void main(String []argh){\n+            HashMap<String,Integer> hashMap=new HashMap<>();\n+            Scanner in = new Scanner(System.in);\n+            int n = in.nextInt();\n+            for(int i = 0; i < n; i++){\n+                String name = in.next();\n+                int phone = in.nextInt();\n+                // Write code here\n+                hashMap.put(name,phone);\n+            }\n+            while(in.hasNext()){\n+                String s = in.next();\n+                // Write code here\n+                if(hashMap.get(s)==null){\n+                    System.out.println(\"Not found\");\n+                }\n+                else {\n+                    System.out.println(s+\"=\"+hashMap.get(s));\n+                }\n+            }\n+            in.close();\n+        }\n+\n+}"
  },
  {
    "sha": "9572b23fa76b8ae0ecf7b47db39eccc4ba81ed9a",
    "filename": "Day8/Day8Challenge3_2DArray.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day8/Day8Challenge3_2DArray.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day8/Day8Challenge3_2DArray.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day8/Day8Challenge3_2DArray.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,79 @@\n+/*\n+Given a 6x6 2D Array, arr :\n+\n+1 1 1 0 0 0\n+0 1 0 0 0 0\n+1 1 1 0 0 0\n+0 0 0 0 0 0\n+0 0 0 0 0 0\n+0 0 0 0 0 0\n+An hourglass in A is a subset of values with indices falling in this pattern in arr's graphical representation:\n+\n+a b c\n+  d\n+e f g\n+There are 16 hourglasses in arr. An hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every\n+hourglass in arr, then print the maximum hourglass sum. The array will always be 6x6 .\n+\n+Example\n+-9 -9 -9  1 1 1\n+ 0 -9  0  4 3 2\n+-9 -9 -9  1 2 3\n+ 0  0  8  6 6 0\n+ 0  0  0 -2 0 0\n+ 0  0  1  2 4 0\n+The 16 hourglass sums are:\n+\n+-63, -34, -9, 12,\n+-10,   0, 28, 23,\n+-27, -11, -2, 10,\n+  9,  17, 25, 18\n+The highest hourglass sum is 28 from the hourglass beginning at row 1 , column 2:\n+\n+0 4 3\n+  1\n+8 6 6\n+\n+ */\n+\n+\n+public class Day8Challenge3_2DArray {\n+\n+\n+        // Complete the hourglassSum function below.\n+        static int hourglassSum(int[][] arr) {\n+            int totalsum=-1000;\n+            for(int i=0;i<4;i++){\n+                for(int j=0;j<4;j++){\n+                    int topsum=arr[i][j]+arr[i][j+1]+arr[i][j+2];\n+                    int middlesum=arr[i+1][j+1];\n+                    int bottomsum=arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2];\n+                    int sum=topsum+middlesum+bottomsum;\n+                    if(sum>totalsum){\n+                        totalsum=sum;\n+                    }\n+                }\n+            }\n+            return totalsum;\n+        }\n+\n+\n+\n+\n+    public static void main(String[] args){\n+\n+//        int[][] arr = new int[6][6];\n+        int arr[][]={{-9,-9,-9,1,1,1},\n+                {0,-9,0,4,3,2},\n+                {-9,-9,-9,1,2,3},\n+                {0,0,8,6,6,0},\n+                {0,0,0,-2,0,0},\n+                {0,0,1,2,4,0}\n+        };\n+\n+        int result = hourglassSum(arr);\n+        System.out.println(result);\n+\n+    }\n+}\n+"
  },
  {
    "sha": "bd6fedfa00fe0b95cd1a48ed6778dfdd3806d3c8",
    "filename": "Day8/Day8Challenge_2.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day8/Day8Challenge_2.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day8/Day8Challenge_2.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day8/Day8Challenge_2.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,29 @@\n+/*\n+Link to this challenge : https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3665/\n+*/\n+public class Day8Challenge_2 {\n+    public int removePalindromeSub(String s) {\n+        int miniSum=0;\n+        int n=s.length();\n+        if(n==0){\n+            return 0;\n+        }\n+        if(n==1 || isPalindrome(s)) {\n+            return 1;\n+        }\n+        else{\n+            for(int i=0;i<n;i++){\n+                if(isPalindrome(s.substring(0,i)) && isPalindrome(s.substring(i,n-1))){\n+                    return 2;\n+                }\n+            }\n+        }\n+        return 2;\n+    }\n+\n+    public boolean isPalindrome(String str){\n+        if(str.length()==0 || str.length()==1) return true;\n+        if(str.charAt(0) != str.charAt(str.length()-1)) return false;\n+        return isPalindrome(str.substring(1,str.length()-1));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e3eec87077161930581bb042195e2f4b53cb042a",
    "filename": "Day9/Day9Recursion.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/75b527f949a563a153048ac03a99b821cf14ce87/Day9/Day9Recursion.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/75b527f949a563a153048ac03a99b821cf14ce87/Day9/Day9Recursion.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day9/Day9Recursion.java?ref=75b527f949a563a153048ac03a99b821cf14ce87",
    "patch": "@@ -0,0 +1,22 @@\n+import java.util.Scanner;\n+\n+public class Day9Recursion {\n+\n+\n+        // factorial function using recursion.\n+        public static int factorial(int n) {\n+            if(n<=1){\n+                return 1;\n+            }\n+            return n*factorial(n-1);\n+\n+        }\n+\n+    public static void main(String[] args) {\n+         Scanner scanner = new Scanner(System.in);\n+         System.out.println(\"Enter a number: \");\n+         int n=scanner.nextInt();\n+         System.out.println(n+\" factorial is \"+factorial(n));\n+    }\n+\n+}"
  }
]
