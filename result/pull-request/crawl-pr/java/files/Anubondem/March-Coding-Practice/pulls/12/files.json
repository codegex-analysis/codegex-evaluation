[
  {
    "sha": "d95a603428f602df64e18fde8783034d96d49425",
    "filename": "Day05_Level_Traversal.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day05_Level_Traversal.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day05_Level_Traversal.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day05_Level_Traversal.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,44 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class Solution {\n+    public List<Double> averageOfLevels(TreeNode root) {\n+        \n+       //Creates a queue q\n+        Queue<TreeNode> q = new LinkedList<>();\n+        \n+        //Creates a list to store the result\n+        List<Double> result = new ArrayList<>();\n+        \n+        //Adds the root of the tree to the queue\n+        q.add(root);\n+        \n+        //Checks if queue is not empty \n+        while(!q.isEmpty()){\n+            int size = q.size(); // Adds the size of each level to the variable size\n+            long sum = 0;\n+            for(int i = 0; i < size; i++){\n+                TreeNode curr = q.poll(); //removes the element at the front of the queue and stores it in the variable curr (Dequeues the queue)\n+                \n+                sum+=curr.val; //computes the sum at each level\n+                if(curr.left != null) q.add(curr.left);\n+                if(curr.right != null) q.add(curr.right);\n+            }\n+            result.add((double)sum/size); // computes the average at aech level\n+        }\n+        return result;\n+    }\n+   \n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4b4233a6ce3fc72b62140c8e48763ff4359ee6d9",
    "filename": "Day05_Loops.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day05_Loops.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day05_Loops.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day05_Loops.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,26 @@\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class Solution {\n+\n+\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) {\n+        int n = scanner.nextInt();\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+        \n+        for(int i = 1; i <= 10; i++){\n+            int result = n * i;\n+            System.out.println(n + \" x \" + i + \" = \" + result);\n+        }\n+\n+        scanner.close();\n+    }\n+}"
  },
  {
    "sha": "404038c5b6f86dd25b21783429b416cb72102dde",
    "filename": "Day06_Let'sReview.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day06_Let'sReview.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day06_Let'sReview.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day06_Let'sReview.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,40 @@\n+\n+/**\n+* Question Link: https://www.hackerrank.com/challenges/30-review-loop/problem\n+\n+*/\n+\n+\n+import java.io.*;\n+import java.util.*;\n+\n+public class Solution {\n+\n+    public static void main(String[] args) {\n+        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n+        \n+        Scanner scan = new Scanner(System.in);\n+        \n+        int T = scan.nextInt();\n+    for(int k = 1; k <= T; k++){\n+         String s = scan.next();\n+       \n+        for(int i = 0; i< s.length(); i++){\n+            if(i%2 == 0){\n+             System.out.print(s.charAt(i));   \n+            }\n+        }  \n+          \n+        System.out.print(\" \");\n+            \n+        for(int i = 0; i< s.length(); i++){\n+            if(i%2 != 0){\n+             System.out.print(s.charAt(i));   \n+            }\n+            \n+        }\n+        System.out.println(\" \");\n+        \n+    }    \n+    }\n+}"
  },
  {
    "sha": "749d7e1c35e7d36c90c97baba2211100d239c938",
    "filename": "Day06_ShortEncoding of words.cpp",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day06_ShortEncoding%20of%20words.cpp",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day06_ShortEncoding%20of%20words.cpp",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day06_ShortEncoding%20of%20words.cpp?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,25 @@\n+\n+//Question Link: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/588/week-1-march-1st-march-7th/3662/\n+\n+\n+class Solution {\n+public:\n+    int minimumLengthEncoding(vector<string>& words) {\n+        \n+        //Creates two sets containing the words\n+        set<string>s1(words.begin(),words.end());\n+        set<string>s2(words.begin(),words.end());\n+        \n+        for(auto parts: s1){\n+            \n+            //Erases any substring in set 2 that is in both sets like me\n+            for(int i = 1; i <parts.size(); i++)\n+                s2.erase(parts.substr(i));\n+        }\n+        int sum = 0;\n+        for(auto parts: s2){\n+            sum += parts.size() + 1;\n+     }\n+        return sum;\n+    }\n+};\n\\ No newline at end of file"
  },
  {
    "sha": "9edaa2a898b2404ef43a278763a2f74653f90bc9",
    "filename": "Day07_Arrays.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day07_Arrays.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day07_Arrays.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day07_Arrays.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,46 @@\n+\n+/**\n+* Question Link: https://www.hackerrank.com/challenges/30-arrays/problem\n+\n+*/\n+\n+\n+\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class Solution {\n+\n+\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) {\n+        int n = scanner.nextInt();\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+\n+        int[] arr = new int[n];\n+\n+        String[] arrItems = scanner.nextLine().split(\" \");\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+        \n+        \n+        for (int i = 0; i < n; i++) {\n+            int arrItem = Integer.parseInt(arrItems[i]);\n+            arr[i] = arrItem;\n+            \n+            \n+        }\n+        for(int k = arr.length-1; k >=0; k--){\n+            System.out.print(arr[k] + \" \");\n+        }\n+        \n+\n+        scanner.close();\n+    }\n+}"
  },
  {
    "sha": "01976785a0fd8f7604cb405516cf788606729364",
    "filename": "Day07_DesignHashMap.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day07_DesignHashMap.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day07_DesignHashMap.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day07_DesignHashMap.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,46 @@\n+/**\n+* Question Link: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/588/week-1-march-1st-march-7th/3663/\n+\n+*/\n+\n+\n+class MyHashMap {\n+\n+    /** Initialize your data structure here. */\n+    \n+    int[] map;\n+    public MyHashMap() {\n+        map = new int[1000000];\n+        for(int i = 0; i < map.length; i++){\n+            map[i] = -1; //initially no value in the hashmap\n+        }\n+    }\n+    \n+    /** value will always be non-negative. */\n+    public void put(int key, int value) {\n+        map[key] = value; //updates key index with the value\n+        \n+    }\n+    \n+    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n+    public int get(int key) {\n+        return map[key]; //returns the value in the key index\n+    }\n+    \n+    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n+    public void remove(int key) {\n+        map[key] = -1; // -1 denotes the is no value present\n+    \n+    }\n+    \n+}\n+    \n+\n+\n+/**\n+ * Your MyHashMap object will be instantiated and called as such:\n+ * MyHashMap obj = new MyHashMap();\n+ * obj.put(key,value);\n+ * int param_2 = obj.get(key);\n+ * obj.remove(key);\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "d6f02d499f6cf2187e752a99614319935a8018d2",
    "filename": "Day08_Dictionaries&Maps.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day08_Dictionaries&Maps.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day08_Dictionaries&Maps.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day08_Dictionaries&Maps.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,35 @@\n+//Complete this code or write your own from scratch\n+import java.util.*;\n+import java.io.*;\n+\n+class Solution{\n+    public static void main(String []argh){\n+        Scanner in = new Scanner(System.in);\n+        int n = in.nextInt();\n+        Map<String, Integer> map = new HashMap<>();\n+        for(int i = 0; i < n; i++){\n+            String name = in.next();\n+            int phone = in.nextInt();\n+            // Write code here\n+            \n+            map.put(name, phone);\n+            \n+        \n+        }\n+        \n+        while(in.hasNext()){\n+            String s = in.next();\n+            // Write code here\n+            \n+            if(map.containsKey(s)){\n+                System.out.println(s+\"=\"+map.get(s));\n+            }\n+            else\n+            System.out.println(\"Not found\");\n+            \n+            \n+        }\n+        \n+        in.close();\n+    }\n+}"
  },
  {
    "sha": "aef8fd661b09dba49e04c91739799421405415ba",
    "filename": "Day08_RemovePalindromicSequences.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day08_RemovePalindromicSequences.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day08_RemovePalindromicSequences.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day08_RemovePalindromicSequences.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,30 @@\n+\n+// Question: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3665/\n+\n+\n+class Solution {\n+    public int removePalindromeSub(String s) {\n+        \n+        if(s.isBlank())return 0; //checks if string is blank\n+        if(isPalindrome(s)) {\n+            return 1;\n+    \n+        }\n+        return 2;\n+    } \n+    boolean isPalindrome(String s){\n+        int left = 0;\n+        int right = s.length()-1;\n+        \n+        while(left<right){\n+            if(s.charAt(left) != s.charAt(right)){\n+                return false;\n+            }\n+            left++;\n+            right--;\n+        \n+        \n+        }\n+        return true;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2c7b25f20908f92027838c955e5ac05b8be338b6",
    "filename": "Day09_AddOneRowToTree.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day09_AddOneRowToTree.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day09_AddOneRowToTree.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day09_AddOneRowToTree.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,61 @@\n+\n+\n+// Question: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3666/\n+\n+\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class Solution {\n+    public TreeNode addOneRow(TreeNode root, int v, int d) {\n+        \n+        if(d == 1){ //base case when depth is 1\n+            TreeNode node = new TreeNode(v);\n+            node.left = root;\n+            return node;\n+        }\n+        \n+        Queue<TreeNode> q = new LinkedList<>();\n+        q.add(root);\n+        \n+        int currentDepth = 1;\n+        while(currentDepth < d-1){\n+            Queue<TreeNode> temp = new LinkedList<>();\n+            while(!q.isEmpty()){\n+                TreeNode curr = q.remove();\n+                if(curr.left != null) temp.add(curr.left);\n+                if(curr.right != null) temp.add(curr.right);\n+            }\n+            currentDepth++;\n+            q = temp;\n+        }\n+        while(!q.isEmpty()){\n+            TreeNode node = q.remove(); //stores node that is removed from the queue to node\n+            TreeNode temp = node.left; // attaches the left of that node to a temporary variable temp\n+            node.left = new TreeNode(v); //attaches a new node v to the left of the node\n+            node.left.left = temp; // Attaches the left of node left back to the temporary variable temp\n+            temp = node.right;\n+            node.right = new TreeNode(v);\n+            node.right.right = temp;\n+        }\n+        \n+        return root;\n+        \n+        \n+        \n+        \n+        \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "771636109a44963efd7efbc50d35173f8d5cdfda",
    "filename": "Day09_Recursion3.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day09_Recursion3.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day09_Recursion3.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day09_Recursion3.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,40 @@\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class Solution {\n+\n+    // Complete the factorial function below.\n+    static int factorial(int n) {\n+        \n+        if( n <= 1){\n+            return 1;\n+        }\n+        else{\n+            return (n * factorial(n-1));\n+        }\n+        \n+    }\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) throws IOException {\n+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n+\n+        int n = scanner.nextInt();\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+\n+        int result = factorial(n);\n+\n+        bufferedWriter.write(String.valueOf(result));\n+        bufferedWriter.newLine();\n+\n+        bufferedWriter.close();\n+\n+        scanner.close();\n+    }\n+}"
  },
  {
    "sha": "771636109a44963efd7efbc50d35173f8d5cdfda",
    "filename": "Day10_BinaryNumbers.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day10_BinaryNumbers.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day10_BinaryNumbers.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day10_BinaryNumbers.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,40 @@\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class Solution {\n+\n+    // Complete the factorial function below.\n+    static int factorial(int n) {\n+        \n+        if( n <= 1){\n+            return 1;\n+        }\n+        else{\n+            return (n * factorial(n-1));\n+        }\n+        \n+    }\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) throws IOException {\n+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n+\n+        int n = scanner.nextInt();\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+\n+        int result = factorial(n);\n+\n+        bufferedWriter.write(String.valueOf(result));\n+        bufferedWriter.newLine();\n+\n+        bufferedWriter.close();\n+\n+        scanner.close();\n+    }\n+}"
  },
  {
    "sha": "bead2b316e1eeb809eab3fb02fbe1d2e4248d388",
    "filename": "Day10_IntegerToRoman.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day10_IntegerToRoman.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day10_IntegerToRoman.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day10_IntegerToRoman.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,19 @@\n+//Question: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3667/\n+\n+class Solution {\n+    public String intToRoman(int num) {\n+        \n+    int[] inCode = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n+    String[] code     = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n+       \n+        StringBuilder sb = new StringBuilder();\n+        \n+        for(int i = 0; i < inCode.length; i++){\n+            while(num >= inCode[i]){\n+                sb.append(code[i]);\n+                num-=inCode[i];\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9000610db4a9423b740a275af160421bdac10916",
    "filename": "Day11_2DArrays.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day11_2DArrays.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day11_2DArrays.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day11_2DArrays.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,45 @@\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class Solution {\n+\n+\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) {\n+        int[][] arr = new int[6][6];\n+\n+        for (int i = 0; i < 6; i++) {\n+            String[] arrRowItems = scanner.nextLine().split(\" \");\n+            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+\n+            for (int j = 0; j < 6; j++) {\n+                int arrItem = Integer.parseInt(arrRowItems[j]);\n+                arr[i][j] = arrItem;\n+\n+            }\n+        }\n+        \n+        int sum[] = new int[16];\n+        int h = 0;\n+        \n+        for(int i = 0; i <4; i++){\n+            \n+            for(int j =0; j<4; j++){\n+              \n+              sum[h] = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2]                         [j] + arr[i+2][j+1] + arr[i+2][j+2];  \n+                        h++;\n+            }\n+        }\n+        Arrays.sort(sum);\n+        System.out.println(sum[15]);\n+\n+        scanner.close();\n+    }\n+}"
  },
  {
    "sha": "25465e016ac7a61acf158ff113727dd1e4fa73f9",
    "filename": "Day11_CoinChange.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day11_CoinChange.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day11_CoinChange.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day11_CoinChange.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,21 @@\n+\n+//Question: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3668/\n+\n+\n+\n+class Solution {\n+    public int coinChange(int[] coins, int amount) {\n+        \n+        int[] dp = new int[amount+1];\n+        Arrays.fill(dp, amount+1);\n+        dp[0] = 0;\n+        \n+        for(int coin: coins){\n+            for(int i=coin; i<=amount; i++){\n+                dp[i] = Math.min(dp[i], dp[i-coin] +1);\n+            }\n+        }\n+        \n+        return dp[amount] <= amount ? dp[amount] : -1;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "965842fe358b161bbcdcc21d59adec7ef87963cd",
    "filename": "Day12_BinaryCodes.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day12_BinaryCodes.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day12_BinaryCodes.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day12_BinaryCodes.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,17 @@\n+\n+//Question: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3669/\n+\n+\n+\n+\n+class Solution {\n+    public boolean hasAllCodes(String s, int k) {\n+        \n+        Set<String> set = new HashSet();\n+        \n+        for(int i = 0; i <= s.length()-k; i++){\n+            set.add(s.substring(i, i + k));\n+        }\n+        return set.size() == Math.pow(2,k);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "cde71c9042fd51a021ebefca4fced399703c321a",
    "filename": "Day12_Inherrritance.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day12_Inherrritance.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day12_Inherrritance.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day12_Inherrritance.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,63 @@\n+\n+\n+class Student extends Person{\n+\tprivate int[] testScores;\n+\n+    /*\t\n+    *   Class Constructor\n+    *   \n+    *   @param firstName - A string denoting the Person's first name.\n+    *   @param lastName - A string denoting the Person's last name.\n+    *   @param id - An integer denoting the Person's ID number.\n+    *   @param scores - An array of integers denoting the Person's test scores.\n+    */\n+    // Write your constructor here\n+\n+    /*\t\n+    *   Method Name: calculate\n+    *   @return A character denoting the grade.\n+    */\n+    // Write your method here\n+    \n+    public Student(String firstName, String lastName, int identification, int[]              testScores)\n+    {\n+        super(firstName, lastName, identification);\n+        this.testScores = testScores;\n+    }\n+\n+    char calculate()\n+    {\n+        int sum = 0;\n+        int avg = 0;\n+        char grade = ' '; \n+        for(int n : testScores)\n+        {\n+            sum += n;\n+        }\n+        if(testScores.length != 0)\n+            avg = (int)Math.ceil(sum/testScores.length);\n+\n+        //System.out.println(\"sum : \" + sum);    \n+        //System.out.println(\"avg : \" + avg);    \n+\n+        if(avg >=90 && avg <=100)\n+            grade = 'O';\n+        else if(avg >=80 && avg <90)\n+            grade = 'E';\n+        else if(avg >=70 && avg <80)\n+            grade = 'A';\n+        else if(avg >=55 && avg <70)\n+            grade = 'P';\n+        else if(avg >=40 && avg <55)\n+            grade = 'D';\n+        else if(avg <40)\n+            grade = 'T';\n+\n+        return grade;\n+    }\n+}\n+\n+    \n+    \n+\n+"
  },
  {
    "sha": "2337668ce03e6b9b025668f40e8f3f285cd97771",
    "filename": "Day13_AbstractClasses.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day13_AbstractClasses.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day13_AbstractClasses.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day13_AbstractClasses.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,41 @@\n+\n+\n+// Declare your class here. Do not use the 'public' access modifier.\n+    // Declare the price instance variable\n+    \n+    \n+    \n+    class MyBook extends Book{\n+        \n+        int price;\n+        \n+        MyBook(String title, String author, int price){\n+            super(title, author);\n+            this.price = price;\n+        }\n+        \n+        void display(){\n+            System.out.println(\"Title: \"+title);\n+            System.out.println(\"Author: \"+author);\n+            System.out.println(\"Price: \"+price);\n+        }\n+    }\n+    \n+    /**   \n+    *   Class Constructor\n+    *   \n+    *   @param title The book's title.\n+    *   @param author The book's author.\n+    *   @param price The book's price.\n+    **/\n+    // Write your constructor here\n+    \n+    /**   \n+    *   Method Name: display\n+    *   \n+    *   Print the title, author, and price in the specified format.\n+    **/\n+    // Write your method here\n+    \n+// End class\n+"
  },
  {
    "sha": "71d414cb091ac78d1e276b76ceae03979352abd5",
    "filename": "Day13_BinaryTreeWithFactors.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day13_BinaryTreeWithFactors.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day13_BinaryTreeWithFactors.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day13_BinaryTreeWithFactors.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,49 @@\n+\n+//Question: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3670/\n+\n+\n+\n+\n+\n+class Solution {\n+public:\n+    int numFactoredBinaryTrees(vector<int>& arr) {\n+       map<int, long long int>m;\n+       sort(arr.begin(), arr.end());\n+       \n+        for(int x = 0; x < arr.size(); x++){\n+            m.insert({arr[x],1});\n+        }\n+        \n+        \n+        \n+        for(int i = 1; i < arr.size(); i++){\n+            auto it3 = m.find(arr[i]);\n+            long long int count = 0;\n+            for(int j = 0; j < i; j++){\n+                \n+                if(arr[i] % arr[j] == 0){\n+                    \n+                  auto it = m.find(arr[i]/arr[j]);\n+                  auto it2 = m.find(arr[j]);\n+                  if(it != m.end()){\n+                      \n+                      count+=(it->second)*(it2->second);\n+                  }\n+                }\n+            }\n+            it3->second+=count;\n+        }\n+        \n+        long long int sum=0;\n+        for(auto it4=m.begin(); it4!=m.end(); it4++){\n+           \n+            sum+=it4->second;\n+            \n+        }\n+        \n+        return sum%(1000000007);\n+        \n+    \n+    }\n+};\n\\ No newline at end of file"
  },
  {
    "sha": "cf6e58e95c7b51b902514fc6c607076f63bcbcb8",
    "filename": "Day14_LinkedList.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day14_LinkedList.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day14_LinkedList.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day14_LinkedList.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,45 @@\n+\n+\n+\n+Question: https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3671/\n+\n+\n+\n+/**\n+ * Definition for singly-linked list.\n+ * public class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode() {}\n+ *     ListNode(int val) { this.val = val; }\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n+ * }\n+ */\n+class Solution {\n+    public ListNode swapNodes(ListNode head, int k) {\n+        \n+        k = k-1;\n+        \n+        ListNode firstN = head;\n+        \n+        while(k>0){\n+            firstN = firstN.next;\n+            k--;\n+        }\n+        \n+        ListNode f = firstN;\n+        ListNode secondN = head;\n+        \n+        while(f.next != null){\n+           secondN = secondN.next;\n+            f = f.next;\n+        }\n+        \n+        int temp = firstN.val;\n+        firstN.val = secondN.val;\n+        secondN.val = temp;\n+        \n+        return head;\n+        \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "24616afe07bb781ee677c8417a3d741f3def1c58",
    "filename": "Day14_Scope.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/Day14_Scope.java",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/Day14_Scope.java",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/Day14_Scope.java?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -0,0 +1,16 @@\n+\n+\n+\t// Add your code here\n+\n+    \n+    Difference(int[] arr){\n+        elements = arr;\n+    }\n+    \n+    void computeDifference(){\n+        Arrays.sort(elements);\n+        maximumDifference = Math.abs(elements[0] - elements[elements.length-1]);\n+    }\n+  \n+\n+"
  },
  {
    "sha": "7690947ec680115be92184904479021c3e78a7b5",
    "filename": "README.md",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/Anubondem/March-Coding-Practice/blob/e9d096e07dfb2439777d659f3df46c3981a95837/README.md",
    "raw_url": "https://github.com/Anubondem/March-Coding-Practice/raw/e9d096e07dfb2439777d659f3df46c3981a95837/README.md",
    "contents_url": "https://api.github.com/repos/Anubondem/March-Coding-Practice/contents/README.md?ref=e9d096e07dfb2439777d659f3df46c3981a95837",
    "patch": "@@ -1,8 +1,8 @@\n # March-Coding-Practice\n \n-# In this repo we will be solving the coding challenges for the month of March\n+In this repo we will be solving the coding challenges for the month of March\n \n-# At least two challenges will be posted each day\n+At least two challenges will be posted each day\n \n-# Please endeavour to submit your solution to every coding challenge within the required time\n+Please endeavour to submit your solution to every coding challenge within the required time\n "
  }
]
