[
  {
    "sha": "12bab9896756a3c505e0cd0cd0122b8fd8a92b42",
    "filename": "atak-civ/plugin-examples/plugintemplate/.idea/caches/build_file_checksums.ser",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/FuadYoussef/TwistOnTime/blob/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/.idea/caches/build_file_checksums.ser",
    "raw_url": "https://github.com/FuadYoussef/TwistOnTime/raw/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/.idea/caches/build_file_checksums.ser",
    "contents_url": "https://api.github.com/repos/FuadYoussef/TwistOnTime/contents/atak-civ/plugin-examples/plugintemplate/.idea/caches/build_file_checksums.ser?ref=45fd1a967029d0ad73c14c5bb57533f4dad6a076"
  },
  {
    "sha": "29b1e5b839ff7c78434cf30e09bc811b2f71d6a1",
    "filename": "atak-civ/plugin-examples/plugintemplate/app/src/main/AndroidManifest.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/FuadYoussef/TwistOnTime/blob/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/FuadYoussef/TwistOnTime/raw/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/FuadYoussef/TwistOnTime/contents/atak-civ/plugin-examples/plugintemplate/app/src/main/AndroidManifest.xml?ref=45fd1a967029d0ad73c14c5bb57533f4dad6a076",
    "patch": "@@ -13,7 +13,9 @@\n         <meta-data android:name=\"plugin-api\" android:value=\"${atakApiVersion}\"/>\n         <meta-data android:name=\"app_desc\" android:value=\"@string/app_desc\"/>\n \n+        <receiver android:name=\"com.atakmap.android.plugintemplate.TimerNotificationActionReceiver\"\n+            android:enabled=\"true\"/>\n+        <receiver android:name=\".TimerNotificationActionReceiver\" />\n \n     </application>\n-\n </manifest>"
  },
  {
    "sha": "ef7602ae4a0151d30612eedf38cc13be2e8b3377",
    "filename": "atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/ActiveTimer.java",
    "status": "modified",
    "additions": 175,
    "deletions": 24,
    "changes": 199,
    "blob_url": "https://github.com/FuadYoussef/TwistOnTime/blob/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/ActiveTimer.java",
    "raw_url": "https://github.com/FuadYoussef/TwistOnTime/raw/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/ActiveTimer.java",
    "contents_url": "https://api.github.com/repos/FuadYoussef/TwistOnTime/contents/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/ActiveTimer.java?ref=45fd1a967029d0ad73c14c5bb57533f4dad6a076",
    "patch": "@@ -1,17 +1,34 @@\n package com.atakmap.android.plugintemplate;\n \n+import android.app.Activity;\n+import android.app.NotificationChannel;\n+import android.app.NotificationManager;\n+import android.app.PendingIntent;\n import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.graphics.Color;\n import android.media.MediaPlayer;\n import android.media.Ringtone;\n import android.media.RingtoneManager;\n import android.net.Uri;\n+import android.os.Build;\n import android.os.CountDownTimer;\n+import android.util.Log;\n \n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import com.atakmap.android.maps.MapComponent;\n+import com.atakmap.android.maps.MapView;\n import com.atakmap.android.plugintemplate.plugin.R;\n \n import java.io.Serializable;\n import java.text.DecimalFormat;\n-import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static android.app.PendingIntent.FLAG_UPDATE_CURRENT;\n \n /**\n  * The ActiveTimer class is used to represent a timer that is running or will be run soon\n@@ -20,7 +37,7 @@\n  * paused (when the timer is paused, newly created, or reset), running (when the timer is running)\n  * finished (when the timer is finished), dismissed (when the timer is dismissed)\n  */\n-public class ActiveTimer implements Serializable {\n+public class ActiveTimer extends Activity implements Serializable {\n     public enum ActiveTimerState { RUNNING, PAUSED, FINISHED, DISMISSED}\n \n     private Timer timer;\n@@ -29,23 +46,44 @@\n     private ActiveTimerState state;\n     public TimerListAdapter containingAdapter;\n     public Context context;\n+    private String CHANNEL_ID = \"TIMER\";\n+    private final MapView mapView;\n+    private final int notifyID;\n+    private TimerNotificationActionReceiver timerNotificationActionReceiver;\n+    public boolean updateNotification = false;\n+    private String notificationStr = getDurationRemainingString();\n+\n \n     /**\n      * The constructor for an active timer takes in a timer, the adapter that will display the active\n      * timer, and a context. An active timer starts in the paused state which can be changed with\n      * various functions in the class\n      * @param timer timer object to based ActiveTimer off of\n+     * @param notificationID the ID the notify should use\n      * @param containingAdapter the adapter that will display the timer. This is used so that the\n      * activeTimer can notify the containingAdapter to update as the\n      * activeTimer ticks\n      * @param context the relevant context. This is used by the active timer when creating a sound\n+     * @param mapView used to get the actual notification context\n      */\n-    public ActiveTimer(Timer timer, TimerListAdapter containingAdapter, Context context) {\n+    public ActiveTimer(Timer timer, int notificationID, TimerListAdapter containingAdapter, Context context, MapView mapView) {\n         this.timer = timer;\n         this.remainingDurationMillis = timer.getDurationMillis();\n         this.state = ActiveTimerState.PAUSED;\n         this.containingAdapter = containingAdapter;\n         this.context = context;\n+        this.mapView = mapView;\n+        this.notifyID = notificationID;\n+        createNotificationChannel();\n+        this.timerNotificationActionReceiver = new TimerNotificationActionReceiver();\n+        this.CHANNEL_ID = \"TIMER\";\n+\n+        mapView.getContext().registerReceiver(this.timerNotificationActionReceiver, new IntentFilter(\"PAUSE\"));\n+        mapView.getContext().registerReceiver(this.timerNotificationActionReceiver, new IntentFilter(\"RESUME\"));\n+        mapView.getContext().registerReceiver(this.timerNotificationActionReceiver, new IntentFilter(\"CANCEL\"));\n+        mapView.getContext().registerReceiver(this.timerNotificationActionReceiver, new IntentFilter(\"RESTART\"));\n+        mapView.getContext().registerReceiver(this.timerNotificationActionReceiver, new IntentFilter(\"DELETE\"));\n+\n     }\n \n     /**\n@@ -61,28 +99,145 @@ public ActiveTimerState getState() {\n      * currentDurationMillis seconds, calling the ActiveTimer tick() method with each tick of the\n      * CountDownTimer. When the CountDownTimer is finished. It changes the ActiveTimer state to\n      * finished.\n+     * Also, updates notification at each onTick when it should\n      */\n     public void start() {\n         state = ActiveTimerState.RUNNING;\n+        containingAdapter.notifyDataSetChanged();\n+        final Set<Integer> notificationSet = new HashSet<>();\n+        for(String notification: timer.getNotifications()) {\n+            int cur = notificationToMillis(notification)/1000;\n+            notificationSet.add(cur);\n+        }\n         countDown = new CountDownTimer(remainingDurationMillis, 1000) {\n             @Override\n             public void onTick(long l) {\n                 remainingDurationMillis = l;\n                 containingAdapter.notifyDataSetChanged();\n-\n+                int cur = (int)l/1000;\n+                notificationStr = getDurationRemainingString();\n+                if (notificationSet.contains(cur) && cur != 0) {\n+                    makeSound();\n+                    updateNotification = true;\n+                    createNotification();\n+                }\n+                if(updateNotification) createNotification();\n             }\n-\n             @Override\n             public void onFinish() {\n-                // set state to finished\n                 ActiveTimer.this.state = ActiveTimerState.FINISHED;\n                 containingAdapter.notifyDataSetChanged();\n                 ActiveTimer.this.makeSound();\n+                createNotification();\n             }\n         };\n         countDown.start();\n     }\n \n+    /**\n+     * Creates a notification channel for each timer\n+     */\n+    private void createNotificationChannel() {\n+        Context actualContext = mapView.getContext();\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && NotificationManagerCompat.from(actualContext) != null) {\n+            CharSequence name = \"Timer Notification\";\n+            String description = \"Notification for a timer\";\n+            int importance = NotificationManager.IMPORTANCE_LOW;\n+            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);\n+            channel.setDescription(description);\n+            channel.setShowBadge(false);\n+            NotificationManager notificationManager = actualContext.getSystemService(NotificationManager.class);\n+            notificationManager.createNotificationChannel(channel);\n+            channel.setSound(null, null);\n+        }\n+    }\n+\n+    /**\n+     * Creates (and updates a notification)\n+     * Allows for user to pause or resume a timer using TimerNotificationActionReceiver\n+     *\n+     */\n+    private void createNotification() {\n+        Context actualContext = mapView.getContext();\n+\n+        Intent pauseIntent = new Intent(\"PAUSE\");\n+        pauseIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+        pauseIntent.putExtra(\"activeTimer\", notifyID);\n+        PendingIntent pausePendingIntent =\n+                PendingIntent.getBroadcast(actualContext, 0, pauseIntent, FLAG_UPDATE_CURRENT);\n+\n+        Intent resumeIntent = new Intent(\"RESUME\");\n+        resumeIntent.putExtra(\"activeTimer\", notifyID);\n+        PendingIntent resumePendingIntent =\n+                PendingIntent.getBroadcast(actualContext, 0, resumeIntent, FLAG_UPDATE_CURRENT);\n+\n+        Intent cancelIntent = new Intent(\"CANCEL\");\n+        cancelIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+        cancelIntent.putExtra(\"activeTimer\", notifyID);\n+        PendingIntent cancelPendingIntent =\n+                PendingIntent.getBroadcast(actualContext, 0, cancelIntent, FLAG_UPDATE_CURRENT);\n+\n+        Intent restartIntent = new Intent(\"RESTART\");\n+        restartIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+        restartIntent.putExtra(\"activeTimer\", notifyID);\n+        PendingIntent pendingRestartIntent =\n+                PendingIntent.getBroadcast(actualContext, 0, restartIntent, FLAG_UPDATE_CURRENT);\n+\n+        Intent deleteNotif = new Intent(\"DELETE\");\n+        deleteNotif.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+        deleteNotif.putExtra(\"activeTimer\", notifyID);\n+        PendingIntent deleteNotifPending =\n+                PendingIntent.getBroadcast(actualContext, 0, deleteNotif, FLAG_UPDATE_CURRENT);\n+\n+        NotificationCompat.Action pauseAction = new NotificationCompat.Action.Builder(android.R.drawable.ic_media_pause, \"Pause\", pausePendingIntent).build();\n+        NotificationCompat.Action resumeAction = new NotificationCompat.Action.Builder(android.R.drawable.ic_media_play, \"Resume\", resumePendingIntent).build();\n+        NotificationCompat.Action cancelAction = new NotificationCompat.Action.Builder(android.R.drawable.ic_media_play, \"Cancel\", cancelPendingIntent).build();\n+        NotificationCompat.Action restartAction = new NotificationCompat.Action.Builder(android.R.drawable.ic_media_play, \"Restart\", pendingRestartIntent).build();\n+\n+        NotificationCompat.Builder builder;\n+        if(state == ActiveTimerState.PAUSED) {\n+            notificationStr = getDurationRemainingString();\n+            builder = new NotificationCompat.Builder(actualContext, CHANNEL_ID)\n+                    .setSmallIcon(android.R.drawable.alert_light_frame)\n+                    .setContentTitle(timer.getName() + \" Paused\")\n+                    .setContentText(notificationStr)\n+                    .setPriority(NotificationCompat.PRIORITY_LOW)\n+                    .setColor(Color.blue(1))\n+                    .setOnlyAlertOnce(true)\n+                    .setSound(null)\n+                    .setDeleteIntent(deleteNotifPending)\n+                    .addAction(resumeAction)\n+                    .addAction(cancelAction)\n+                    .addAction(restartAction);\n+        } else if (state == ActiveTimerState.RUNNING){\n+            notificationStr = getDurationRemainingString();\n+            builder = new NotificationCompat.Builder(actualContext, CHANNEL_ID)\n+                    .setSmallIcon(android.R.drawable.alert_light_frame)\n+                    .setContentTitle(timer.getName())\n+                    .setContentText(notificationStr)\n+                    .setPriority(NotificationCompat.PRIORITY_LOW)\n+                    .setColor(Color.blue(1))\n+                    .setOnlyAlertOnce(true)\n+                    .setDeleteIntent(deleteNotifPending)\n+                    .setSound(null)\n+                    .addAction(pauseAction);\n+        } else {\n+            notificationStr = \"Finished\";\n+            builder = new NotificationCompat.Builder(actualContext, CHANNEL_ID)\n+                    .setSmallIcon(android.R.drawable.alert_light_frame)\n+                    .setContentTitle(timer.getName())\n+                    .setContentText(notificationStr)\n+                    .setPriority(NotificationCompat.PRIORITY_LOW)\n+                    .setColor(Color.blue(1))\n+                    .setOnlyAlertOnce(true)\n+                    .setDeleteIntent(deleteNotifPending)\n+                    .setSound(null)\n+                    .addAction(cancelAction)\n+                    .addAction(restartAction);\n+        }\n+        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(actualContext);\n+        notificationManager.notify(notifyID, builder.build());\n+    }\n     /**\n      * This method pauses an active timer. It does this by cancelling the running CountDownTimer\n      * if there is one.\n@@ -92,6 +247,8 @@ public void pause() {\n             countDown.cancel();\n         }\n         state = ActiveTimerState.PAUSED;\n+        if(updateNotification) createNotification();\n+        containingAdapter.notifyDataSetChanged();\n     }\n \n     /**\n@@ -123,6 +280,10 @@ public void reset() {\n             countDown.cancel();\n         }\n         state = ActiveTimerState.PAUSED;\n+        Context actualContext = mapView.getContext();\n+        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(actualContext);\n+        notificationManager.cancel(notifyID);\n+        containingAdapter.notifyDataSetChanged();\n     }\n \n     /**\n@@ -134,6 +295,12 @@ public void dismiss() {\n             countDown.cancel();\n         }\n         state = ActiveTimerState.DISMISSED;\n+        Context actualContext = mapView.getContext();\n+        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(actualContext);\n+        notificationManager.cancel(notifyID);\n+\n+        PluginTemplateDropDownReceiver.timers.remove(this);\n+        containingAdapter.notifyDataSetChanged();\n     }\n \n     /**\n@@ -171,23 +338,7 @@ public void makeNotificationSound() {\n         r.play();\n     }\n \n-    /**\n-     * This method checks if the active timer should make a notification\n-     * If the timer is running, this method checks each of the timer's notification to see if it\n-     * matches with the currentDurationMillis\n-     * @return boolean indicating if a notification corresponding to this active timer should be displayed\n-     */\n-    public boolean shouldMakeNotification() {\n-        if (state == ActiveTimerState.RUNNING) {\n-            ArrayList<String> notifications = timer.getNotifications();\n-            for (String notification : notifications) {\n-                if (notificationToMillis(notification) == remainingDurationMillis) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n+\n \n     /**\n      * This method converts a string notification to the corresponding millis value\n@@ -227,5 +378,5 @@ public Timer getTimer() {\n     }\n \n     public long getRemainingDurationMillis() { return remainingDurationMillis; }\n-}\n \n+}"
  },
  {
    "sha": "cb55d9651d7a9e499cd41fc561ecfb829acc8f75",
    "filename": "atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/CreateTimerDropDown.java",
    "status": "modified",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/FuadYoussef/TwistOnTime/blob/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/CreateTimerDropDown.java",
    "raw_url": "https://github.com/FuadYoussef/TwistOnTime/raw/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/CreateTimerDropDown.java",
    "contents_url": "https://api.github.com/repos/FuadYoussef/TwistOnTime/contents/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/CreateTimerDropDown.java?ref=45fd1a967029d0ad73c14c5bb57533f4dad6a076",
    "patch": "@@ -20,10 +20,12 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n \n-// TODO: Add detailed description of class\n \n /**\n- * This class is used for the setup and creation of the Create Timer screen.\n+ * This class is used to create and edit timers. In the case of creating a timer,\n+ * it will create a Timer.class object and pass this serializable object back to the home screen.\n+ * If a serializable Timer object is passed into it through the Intent, then this class will\n+ * function to edit that timer, and the details of that timer will be displayed\n  */\n \n public class CreateTimerDropDown extends DropDownReceiver implements OnStateListener {\n@@ -42,6 +44,13 @@\n     private CheckBox preset;                // Whether or not timer is marked as preset\n     private Button changeSoundButton;       // Button on UI to change the sound\n     private TextView changeSoundText;       // Text on UI to represent selected sound\n+\n+    /**\n+     * Constructor for the dropdown\n+     * Initializes buttons and texts so that they may be changed later\n+     * @param mapView mapview needed for constructor\n+     * @param context context needed for constructor\n+     */\n     public CreateTimerDropDown(final MapView mapView,\n                                 final Context context) {\n         super(mapView);\n@@ -134,7 +143,12 @@ public void disposeImpl() {\n \n     /**\n      * Determines what screen the intent is coming from to set the data appropriately for editing\n-     * an existing timer or for creating a new timer.\n+     * an existing timer or for creating a new timer. The action from the intent is used to\n+     * determine whether this screen should be used at all. If the action is SHOW_CREATE, then\n+     * the plugin determines what screen the plugin is coming from based on the extras within\n+     * the intent. For example, if there is a extra string \"SELECTED_SOUND\" then it is coming\n+     * from the ChangeSoundsDropDown screen and the timer object details will be updated\n+     * appropriately.\n      * @param context context of the previous screen\n      * @param intent intent of the previous screen\n      */"
  },
  {
    "sha": "93ce9b761bb0cec3bbadf541d159d9aeddeb93e1",
    "filename": "atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/PluginTemplateDropDownReceiver.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/FuadYoussef/TwistOnTime/blob/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/PluginTemplateDropDownReceiver.java",
    "raw_url": "https://github.com/FuadYoussef/TwistOnTime/raw/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/PluginTemplateDropDownReceiver.java",
    "contents_url": "https://api.github.com/repos/FuadYoussef/TwistOnTime/contents/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/PluginTemplateDropDownReceiver.java?ref=45fd1a967029d0ad73c14c5bb57533f4dad6a076",
    "patch": "@@ -7,6 +7,7 @@\n import android.view.View;\n import android.view.View.OnClickListener;\n import java.util.ArrayList;\n+import java.util.HashMap;\n \n import com.atak.plugins.impl.PluginLayoutInflater;\n import com.atakmap.android.dropdown.DropDown.OnStateListener;\n@@ -35,8 +36,11 @@\n     private final View templateView;\n     private final Context pluginContext;\n     private RecyclerView mainScreenTimerList;\n-    private static ArrayList<ActiveTimer> timers = new ArrayList<>();\n+    public static ArrayList<ActiveTimer> timers = new ArrayList<>();\n+    public static HashMap<Integer, ActiveTimer> timerNotifMap = new HashMap<>();\n     private TimerListAdapter adapter;\n+    private final MapView mapView;\n+    private int notificationCount = 0;\n \n \n     /**************************** CONSTRUCTOR *****************************/\n@@ -45,6 +49,7 @@ public PluginTemplateDropDownReceiver(final MapView mapView,\n                                           final Context context) {\n         super(mapView);\n         this.pluginContext = context;\n+        this.mapView = mapView;\n         // Remember to use the PluginLayoutInflator if you are actually inflating a custom view\n         // In this case, using it is not necessary - but I am putting it here to remind\n         // developers to look at this Inflator\n@@ -112,7 +117,8 @@ public void onReceive(Context context, Intent intent) {\n                 Timer timer = (Timer) intent.getSerializableExtra(\"TIMER\");\n                 //we pass the adapter we use for our recycler view to each ActiveTimer so that as it counts down it forces the adapter to update\n                 //we pass the plugin context to the ActiveTimer so that it knows the context to make a sound\n-                timers.add(new ActiveTimer(timer, adapter, pluginContext));\n+                timers.add(new ActiveTimer(timer,  notificationCount++, adapter, pluginContext, mapView));\n+                timerNotifMap.put(notificationCount-1, timers.get(timers.size()-1));\n                 adapter.notifyDataSetChanged();\n             }\n         }"
  },
  {
    "sha": "eb4cd5c1192952c2db8805e03dbc013dfb132447",
    "filename": "atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerListAdapter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/FuadYoussef/TwistOnTime/blob/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerListAdapter.java",
    "raw_url": "https://github.com/FuadYoussef/TwistOnTime/raw/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerListAdapter.java",
    "contents_url": "https://api.github.com/repos/FuadYoussef/TwistOnTime/contents/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerListAdapter.java?ref=45fd1a967029d0ad73c14c5bb57533f4dad6a076",
    "patch": "@@ -94,6 +94,7 @@ public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n      * @param viewHolder the viewholder we created by inflating the timer_cell that we want to fill with data\n      * @param position  The position of the item within the recyclerview\n      */\n+\n     @Override\n     public void onBindViewHolder(@NonNull final ViewHolder viewHolder, final int position) {\n \n@@ -110,23 +111,20 @@ public void onBindViewHolder(@NonNull final ViewHolder viewHolder, final int pos\n             @Override\n             public void onClick(View v) {\n                 currentTimer.start();\n-                notifyDataSetChanged();\n             }\n         });\n         // PAUSE button\n         viewHolder.pauseTimerButton.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View v) {\n                 currentTimer.pause();\n-                notifyDataSetChanged();\n             }\n         });\n         // RESET button\n         viewHolder.resetTimerButton.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View v) {\n                 currentTimer.reset();\n-                notifyDataSetChanged();\n             }\n         });\n         // DISMISS button"
  },
  {
    "sha": "4a4038d220b42cc56fe548bc6da7c6e3f74bd083",
    "filename": "atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerNotificationActionReceiver.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/FuadYoussef/TwistOnTime/blob/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerNotificationActionReceiver.java",
    "raw_url": "https://github.com/FuadYoussef/TwistOnTime/raw/45fd1a967029d0ad73c14c5bb57533f4dad6a076/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerNotificationActionReceiver.java",
    "contents_url": "https://api.github.com/repos/FuadYoussef/TwistOnTime/contents/atak-civ/plugin-examples/plugintemplate/app/src/main/java/com/atakmap/android/plugintemplate/TimerNotificationActionReceiver.java?ref=45fd1a967029d0ad73c14c5bb57533f4dad6a076",
    "patch": "@@ -0,0 +1,49 @@\n+package com.atakmap.android.plugintemplate;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+/**\n+ * This class interfaces with notifications to process actions like pause or resume\n+ */\n+public class TimerNotificationActionReceiver extends BroadcastReceiver {\n+    /**\n+     * Override the onreceive function of broadcast receiver\n+     * @param context application context\n+     * @param intent passed in when creating the notification\n+     */\n+    @Override\n+    public void onReceive(Context context, Intent intent) {\n+        int notifyId = intent.getIntExtra(\"activeTimer\", -1);\n+        //break if notifyId is messed up\n+        if(notifyId == -1) {\n+            return;\n+        }\n+        ActiveTimer cur = PluginTemplateDropDownReceiver.timerNotifMap.get(notifyId);\n+        String action = intent.getAction();\n+        if(action.equals(\"PAUSE\")){\n+            Toast.makeText(context,cur.getName() + \" Paused\", Toast.LENGTH_SHORT).show();\n+            cur.pause();\n+\n+        } else if(action.equals(\"RESUME\")){\n+            Toast.makeText(context,cur.getName() + \" Resumed\", Toast.LENGTH_SHORT).show();\n+            cur.start();\n+\n+        } else if(action.equals(\"CANCEL\")) {\n+            Toast.makeText(context,cur.getName() + \" Cancelled\", Toast.LENGTH_SHORT).show();\n+            cur.dismiss();\n+        } else if(action.equals(\"RESTART\")) {\n+            Toast.makeText(context,cur.getName() + \" Restarted\", Toast.LENGTH_SHORT).show();\n+            cur.reset();\n+        } else if (action.equals(\"DELETE\")) {\n+            cur.updateNotification = false;\n+        }\n+        Intent it = new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);\n+        context.sendBroadcast(it);\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  }
]
