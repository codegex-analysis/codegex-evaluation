[
  {
    "sha": "b0896498df113b61dfcc930497500e82edd422c6",
    "filename": "lktgt15/BOJ/12000/12015/README.md",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/ssafy-algoga/algorithm-study/blob/606e02b5418180c6d25945cec48f41f1c2e23eb5/lktgt15/BOJ/12000/12015/README.md",
    "raw_url": "https://github.com/ssafy-algoga/algorithm-study/raw/606e02b5418180c6d25945cec48f41f1c2e23eb5/lktgt15/BOJ/12000/12015/README.md",
    "contents_url": "https://api.github.com/repos/ssafy-algoga/algorithm-study/contents/lktgt15/BOJ/12000/12015/README.md?ref=606e02b5418180c6d25945cec48f41f1c2e23eb5",
    "patch": "@@ -0,0 +1,72 @@\n+# 12015번 가장 긴 증가하는 부분 수열 2\n+[문제 보러가기](https://www.acmicpc.net/problem/12015)\n+\n+## 🅰 설계\n+이 문제는 사실 well-known이라고 불리는.. 사실은 알면 알고 모르면 모르는 그런 유명한 문제였습니다.  \n+\n+LIS를 구하는 방법 중에 이분탐색으로 구하는 방법이 있습니다.  \n+\n+입력이 (10,20,10,30,20,50) 으로 들어올 때 가장 긴 증가하는 부분수열을 저장하는 리스트를 따로 만들어서 업데이트하면서 만들어가면 됩니다.  \n+\n+`ArrayList<Integer> lis` 로 LIS를 담는 리스트에서 *입력으로 들어오는 수보다 크거나 같은 수 중에 가장 작은 수*를 입력받은 수로 대체해가면서 업데이트 해주겠습니다.\n+\n+1. 10 => lis에 10보다 크거나 같은 수가 없으므로 `lis.add(10)` => lis = {10}  \n+2. 20 => lis에 20보다 크거나 같은 수가 없으므로 `lis.add(20)` => lis = {10,20}  \n+3. 10 => lis에 10보다 크거나 같으면서 가장 작은수 = 10의 인덱스 = 0, `lis.set(0,10)` => lis = {10,20}  \n+4. 30 => lis에 30보다 크거나 같은 수가 없으므로 `lis.add(30)` => lis = {10,20,30}  \n+5. 20 => lis에 20보다 크거나 같으면서 가장 작은수 = 20의 인덱스 = 1, `lis.set(1,20)` => lis = {10,20,30}  \n+\n+이런식으로 업데이트 해주면 이 lis 리스트 자체가 가장 긴 증가하는 부분수열은 되지 않지만 길이는 동일하게 됩니다.  \n+\n+```java\n+import java.io.*;\n+import java.util.*;\n+\n+public class Main {\n+\tstatic BufferedReader br;\n+\tstatic StringTokenizer st;\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n+\t\tList<Integer> lis = new ArrayList<>(); // lis를 담는 배열\n+\t\tint n = Integer.parseInt(br.readLine());\n+\t\tst = new StringTokenizer(br.readLine());\n+\t\tfor(int i=0;i<n;i++) {\n+\t\t\tint x = Integer.parseInt(st.nextToken());\n+\t\t\tint l = -1; // left 범위\n+\t\t\tint r = lis.size(); // right 범위\n+\t\t\tint mid = 0;\n+\t\t\twhile(l+1<r) {\n+\t\t\t\tmid = (l+r)/2;\n+\t\t\t\tif(lis.get(mid) < x) l = mid; // lis[mid]가 x보다 작으면 l범위를 좁힘\n+\t\t\t\telse r = mid; // lis[mid]가 x보다 크거나 같으면 r범위를 좁힘\n+\t\t\t}\n+\t\t\tif(r == lis.size()) { // r 이 lis의 size면 r보다 크거나 같은 lis 원소가 존재하지 않음 \n+\t\t\t\tlis.add(x);\n+\t\t\t}\n+\t\t\telse { // 그렇지 않으면 lis[r]이 x보다 크거나 같으면서 가장 작은 원소가 됨\n+\t\t\t\tlis.set(r, x);\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println(lis.size());\n+\t}\n+}\n+```\n+\n+\n+## ✅ 후기\n+```java\n+else { // 그렇지 않으면 lis[r]이 x보다 크거나 같으면서 가장 작은 원소가 됨\n+\tlis.set(r, x);\n+}\n+```\n+이 부분을\n+\n+```java\n+else {\n+    Integer c = lis.get(r);\n+    c = x;\n+}\n+```\n+이렇게 고치면 저는 List에 c의 레퍼런스가 들어있고 그 c를 바꿔주면 List에는 c의 레퍼런스가 들어있으니 같이 바뀔거라고 생각했는데 틀렸습니다.. 혹시 훈수 가능하신분 해주시면 감사하겠습니다\n+"
  },
  {
    "sha": "1f56fad5593187bcfc77c7c107611feaaf80b94f",
    "filename": "lktgt15/BOJ/12000/12015/answer.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/ssafy-algoga/algorithm-study/blob/606e02b5418180c6d25945cec48f41f1c2e23eb5/lktgt15/BOJ/12000/12015/answer.java",
    "raw_url": "https://github.com/ssafy-algoga/algorithm-study/raw/606e02b5418180c6d25945cec48f41f1c2e23eb5/lktgt15/BOJ/12000/12015/answer.java",
    "contents_url": "https://api.github.com/repos/ssafy-algoga/algorithm-study/contents/lktgt15/BOJ/12000/12015/answer.java?ref=606e02b5418180c6d25945cec48f41f1c2e23eb5",
    "patch": "@@ -0,0 +1,32 @@\n+import java.io.*;\n+import java.util.*;\n+\n+public class Main {\n+\tstatic BufferedReader br;\n+\tstatic StringTokenizer st;\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n+\t\tList<Integer> lis = new ArrayList<>(); // lis를 담는 배열\n+\t\tint n = Integer.parseInt(br.readLine());\n+\t\tst = new StringTokenizer(br.readLine());\n+\t\tfor(int i=0;i<n;i++) {\n+\t\t\tint x = Integer.parseInt(st.nextToken());\n+\t\t\tint l = -1; // left 범위\n+\t\t\tint r = lis.size(); // right 범위\n+\t\t\tint mid = 0;\n+\t\t\twhile(l+1<r) {\n+\t\t\t\tmid = (l+r)/2;\n+\t\t\t\tif(lis.get(mid) < x) l = mid; // lis[mid]가 x보다 작으면 l범위를 좁힘\n+\t\t\t\telse r = mid; // lis[mid]가 x보다 크거나 같으면 r범위를 좁힘\n+\t\t\t}\n+\t\t\tif(r == lis.size()) { // r 이 lis의 size면 r보다 크거나 같은 lis 원소가 존재하지 않음 \n+\t\t\t\tlis.add(x);\n+\t\t\t}\n+\t\t\telse { // 그렇지 않으면 lis[r]이 x보다 크거나 같으면서 가장 작은 원소가 됨\n+\t\t\t\tlis.set(r, x);\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println(lis.size());\n+\t}\n+}\n\\ No newline at end of file"
  }
]
