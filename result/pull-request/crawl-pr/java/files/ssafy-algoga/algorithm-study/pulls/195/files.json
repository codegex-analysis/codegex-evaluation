[
  {
    "sha": "a3e321025e5f18e5fbd2a1b15f6a5fc194086275",
    "filename": "minkue777/BOJ/17000/17143/README.md",
    "status": "added",
    "additions": 167,
    "deletions": 0,
    "changes": 167,
    "blob_url": "https://github.com/ssafy-algoga/algorithm-study/blob/d0aea96e051984bb3210323cf3d4d838c06a9824/minkue777/BOJ/17000/17143/README.md",
    "raw_url": "https://github.com/ssafy-algoga/algorithm-study/raw/d0aea96e051984bb3210323cf3d4d838c06a9824/minkue777/BOJ/17000/17143/README.md",
    "contents_url": "https://api.github.com/repos/ssafy-algoga/algorithm-study/contents/minkue777/BOJ/17000/17143/README.md?ref=d0aea96e051984bb3210323cf3d4d838c06a9824",
    "patch": "@@ -0,0 +1,167 @@\n+# 17143번 낚시왕\n+[문제 보러가기](https://www.acmicpc.net/problem/17143)\n+\n+## 🅰 설계\n+크게 두 가지의 메소드로 나누어서 구현했습니다.\n+1. 물고기를 잡는 `fishing()` 메소드\n+2. 상어가 1초동안 움직이는 `move()` 메소드\n+\n+사실 fishing 메소드는 구현이 간단합니다. `map`의 row를 탐색하면서 상어가 있으면\n+잡아서 그 상어를 `dead` 처리 해주면 됩니다.\n+\n+```java \n+static void fishing(int col) {\n+    for(int r=0; r<row; r++) {\n+        if(map[r][col] != 0) {\n+            int idx = map[r][col];\n+            caughtWeight += sharks[idx].size;\n+            map[r][col] = 0;\n+            sharks[idx].alive = false;\n+            break;\n+        }\n+    }\n+}\n+```\n+\n+문제는 `move()`인데요. `move()`의 구현을 어렵게 만드는 요소는 <b> 같은 칸에 중복되게 상어가\n+존재할 수 있다는 점입니다.</b> 만약 상어를 동시에 움직이게 할 수 있다면 중복되는 곳에서\n+잡아먹는 부분만 구현하면 되지만 실제 코드상에선 어쩔 수 없이 상어를 한마리씩 움직여야 하기 때문에\n+상어가 맵에 중복되게 있어도 잡아먹어도 되는지 아닌지를 판단해야 합니다. 이 부분을 위해 \n+`Shark`클래스에 일견 필요없어 보이는 idx 필드를 추가해서 상어마다 번호를 부여했습니다.\n+그리고 idx 순서대로 상어를 이동시키면서 만약 중복되는 곳에 나보다 idx가 작은 상어가 존재한다면\n+한쪽을 잡아먹고 idx 크다면 다음턴에 이동할 상어이므로 그냥 그대로 놔둡니다.\n+\n+```java \n+int already = map[r][c];\n+if(already == 0 || already > idx) {\n+    map[r][c] = idx;\n+    return;\n+}\n+if(sharks[already].size > sharks[idx].size) {\n+    sharks[idx].alive = false;\n+} else {\n+    map[r][c] = idx;\n+    sharks[already].alive = false;\n+}\n+```\n+\n+나머지 부분은 코드만 길었지 특별할 것 없는 단순 구현입니다.\n+\n+###전체 코드\n+```java\n+import java.io.*;\n+import java.util.*;\n+\n+public class Main {\n+    static class shark {\n+        int r;\n+        int c;\n+        int speed;\n+        int dir;\n+        int size;\n+        int idx;\n+        boolean alive;\n+\n+        shark(int r, int c, int speed, int dir, int size, int idx, boolean alive) {\n+            this.r = r;\n+            this.c = c;\n+            this.speed = speed;\n+            this.dir = dir;\n+            this.size = size;\n+            this.idx = idx;\n+            this.alive = alive;\n+        }\n+\n+        void move() {\n+            if(map[r][c] == idx) map[r][c] = 0;\n+            int cnt = 0;\n+            int nr;\n+            int nc;\n+\n+            while(cnt != speed) {\n+                nr = r + dr[dir];\n+                nc = c + dc[dir];\n+                if(nr < 0 || nr >= row || nc < 0 || nc >= col) {\n+                    dir = change[dir];\n+                }\n+                r += dr[dir];\n+                c += dc[dir];\n+                cnt++;\n+            }\n+\n+            int already = map[r][c];\n+            if(already == 0 || already > idx) {\n+                map[r][c] = idx;\n+                return;\n+            }\n+            if(sharks[already].size > sharks[idx].size) {\n+                sharks[idx].alive = false;\n+            } else {\n+                map[r][c] = idx;\n+                sharks[already].alive = false;\n+            }\n+        }\n+    }\n+\n+    static void fishing(int col) {\n+        for(int r=0; r<row; r++) {\n+            if(map[r][col] != 0) {\n+                int idx = map[r][col];\n+                caughtWeight += sharks[idx].size;\n+                map[r][col] = 0;\n+                sharks[idx].alive = false;\n+                break;\n+            }\n+        }\n+    }\n+\n+    static int[][] map;\n+    static int[] dr = {-1, 1, 0, 0};\n+    static int[] dc = {0, 0, 1, -1};\n+    static int[] change = {1, 0, 3, 2};\n+    static int row;\n+    static int col;\n+    static int numOfSharks;\n+    static shark[] sharks;\n+    static int caughtWeight;\n+\n+    public static void main(String[] args) throws IOException {\n+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+        StringTokenizer st = new StringTokenizer(br.readLine());\n+        row = Integer.parseInt(st.nextToken());\n+        col = Integer.parseInt(st.nextToken());\n+        map = new int[row][col];\n+        numOfSharks = Integer.parseInt(st.nextToken());\n+        sharks = new shark[numOfSharks+1];\n+        for(int idx = 1; idx<=numOfSharks; idx++) {\n+            st = new StringTokenizer(br.readLine());\n+            sharks[idx] = new shark(Integer.parseInt(st.nextToken())-1,\n+                    Integer.parseInt(st.nextToken())-1,\n+                    Integer.parseInt(st.nextToken()),\n+                    Integer.parseInt(st.nextToken())-1,\n+                    Integer.parseInt(st.nextToken()),\n+                    idx, true);\n+            map[sharks[idx].r][sharks[idx].c] = idx;\n+            if(sharks[idx].dir == 0 || sharks[idx].dir == 1) {\n+                sharks[idx].speed %= 2*(row-1);\n+            }\n+            else sharks[idx].speed %= 2*(col-1);\n+        }\n+\n+        for(int cur = 0; cur < col; cur++) {\n+            fishing(cur);\n+            for(int idx = 1; idx <= numOfSharks; idx++) {\n+                if(sharks[idx].alive) {\n+                    sharks[idx].move();\n+                }\n+            }\n+        }\n+        System.out.println(caughtWeight);\n+    }\n+}\n+```\n+\n+\n+## ✅ 후기\n+매번 느끼지만 구현 문제는 참 리드미쓰기가 어렵습니다.. 긴 구현 내용을 다 설명하기도\n+그렇고 어떤 부분을 공유하는게 좋을지도 애매하고.. 음 그냥 그렇다구요.\n\\ No newline at end of file"
  },
  {
    "sha": "137720e58e7e4de3c7e354519c57dc965d3ea66c",
    "filename": "minkue777/BOJ/17000/17143/answer.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/ssafy-algoga/algorithm-study/blob/d0aea96e051984bb3210323cf3d4d838c06a9824/minkue777/BOJ/17000/17143/answer.java",
    "raw_url": "https://github.com/ssafy-algoga/algorithm-study/raw/d0aea96e051984bb3210323cf3d4d838c06a9824/minkue777/BOJ/17000/17143/answer.java",
    "contents_url": "https://api.github.com/repos/ssafy-algoga/algorithm-study/contents/minkue777/BOJ/17000/17143/answer.java?ref=d0aea96e051984bb3210323cf3d4d838c06a9824",
    "patch": "@@ -0,0 +1,110 @@\n+import java.io.*;\n+import java.util.*;\n+\n+public class Main {\n+    static class shark {\n+        int r;\n+        int c;\n+        int speed;\n+        int dir;\n+        int size;\n+        int idx;\n+        boolean alive;\n+\n+        shark(int r, int c, int speed, int dir, int size, int idx, boolean alive) {\n+            this.r = r;\n+            this.c = c;\n+            this.speed = speed;\n+            this.dir = dir;\n+            this.size = size;\n+            this.idx = idx;\n+            this.alive = alive;\n+        }\n+\n+        void move() {\n+            if(map[r][c] == idx) map[r][c] = 0;\n+            int cnt = 0;\n+            int nr;\n+            int nc;\n+\n+            while(cnt != speed) {\n+                nr = r + dr[dir];\n+                nc = c + dc[dir];\n+                if(nr < 0 || nr >= row || nc < 0 || nc >= col) {\n+                    dir = change[dir];\n+                }\n+                r += dr[dir];\n+                c += dc[dir];\n+                cnt++;\n+            }\n+\n+            int already = map[r][c];\n+            if(already == 0 || already > idx) {\n+                map[r][c] = idx;\n+                return;\n+            }\n+            if(sharks[already].size > sharks[idx].size) {\n+                sharks[idx].alive = false;\n+            } else {\n+                map[r][c] = idx;\n+                sharks[already].alive = false;\n+            }\n+        }\n+    }\n+\n+    static void fishing(int col) {\n+        for(int r=0; r<row; r++) {\n+            if(map[r][col] != 0) {\n+                int idx = map[r][col];\n+                caughtWeight += sharks[idx].size;\n+                map[r][col] = 0;\n+                sharks[idx].alive = false;\n+                break;\n+            }\n+        }\n+    }\n+\n+    static int[][] map;\n+    static int[] dr = {-1, 1, 0, 0};\n+    static int[] dc = {0, 0, 1, -1};\n+    static int[] change = {1, 0, 3, 2};\n+    static int row;\n+    static int col;\n+    static int numOfSharks;\n+    static shark[] sharks;\n+    static int caughtWeight;\n+\n+    public static void main(String[] args) throws IOException {\n+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+        StringTokenizer st = new StringTokenizer(br.readLine());\n+        row = Integer.parseInt(st.nextToken());\n+        col = Integer.parseInt(st.nextToken());\n+        map = new int[row][col];\n+        numOfSharks = Integer.parseInt(st.nextToken());\n+        sharks = new shark[numOfSharks+1];\n+        for(int idx = 1; idx<=numOfSharks; idx++) {\n+            st = new StringTokenizer(br.readLine());\n+            sharks[idx] = new shark(Integer.parseInt(st.nextToken())-1,\n+                    Integer.parseInt(st.nextToken())-1,\n+                    Integer.parseInt(st.nextToken()),\n+                    Integer.parseInt(st.nextToken())-1,\n+                    Integer.parseInt(st.nextToken()),\n+                    idx, true);\n+            map[sharks[idx].r][sharks[idx].c] = idx;\n+            if(sharks[idx].dir == 0 || sharks[idx].dir == 1) {\n+                sharks[idx].speed %= 2*(row-1);\n+            }\n+            else sharks[idx].speed %= 2*(col-1);\n+        }\n+\n+        for(int cur = 0; cur < col; cur++) {\n+            fishing(cur);\n+            for(int idx = 1; idx <= numOfSharks; idx++) {\n+                if(sharks[idx].alive) {\n+                    sharks[idx].move();\n+                }\n+            }\n+        }\n+        System.out.println(caughtWeight);\n+    }\n+}\n\\ No newline at end of file"
  }
]
