[
  {
    "sha": "9242aeed988d01e1f5ec6ec57649c0f21600e5de",
    "filename": "src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorApplication.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorApplication.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorApplication.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorApplication.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -6,14 +6,17 @@\n  */\n package org.gridsuite.merge.orchestrator.server;\n \n+import com.powsybl.network.store.client.NetworkStoreService;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.ComponentScan;\n \n /**\n  * @author Jon Harper <jon.harper at rte-france.com>\n  */\n @SuppressWarnings(\"checkstyle:HideUtilityClassConstructor\")\n @SpringBootApplication\n+@ComponentScan(basePackageClasses = {MergeOrchestratorApplication.class, NetworkStoreService.class})\n public class MergeOrchestratorApplication {\n \n     public static void main(String[] args) {"
  },
  {
    "sha": "c414636fa7ed09891e5d440c25df455d19bf13b0",
    "filename": "src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorConfigService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 7,
    "changes": 17,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorConfigService.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorConfigService.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorConfigService.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -6,11 +6,9 @@\n  */\n package org.gridsuite.merge.orchestrator.server;\n \n+import com.powsybl.network.store.client.NetworkStoreService;\n import org.gridsuite.merge.orchestrator.server.dto.ProcessConfig;\n-import org.gridsuite.merge.orchestrator.server.repositories.IgmRepository;\n-import org.gridsuite.merge.orchestrator.server.repositories.MergeRepository;\n-import org.gridsuite.merge.orchestrator.server.repositories.ProcessConfigEntity;\n-import org.gridsuite.merge.orchestrator.server.repositories.ProcessConfigRepository;\n+import org.gridsuite.merge.orchestrator.server.repositories.*;\n import org.springframework.stereotype.Service;\n \n import java.util.List;\n@@ -30,12 +28,16 @@\n \n     private final IgmRepository igmRepository;\n \n+    private final NetworkStoreService networkStoreService;\n+\n     public MergeOrchestratorConfigService(ProcessConfigRepository processConfigRepository,\n                                           IgmRepository igmRepository,\n-                                          MergeRepository mergeRepository) {\n+                                          MergeRepository mergeRepository,\n+                                          NetworkStoreService networkStoreService) {\n         this.processConfigRepository = processConfigRepository;\n         this.mergeRepository = mergeRepository;\n         this.igmRepository = igmRepository;\n+        this.networkStoreService = networkStoreService;\n     }\n \n     List<ProcessConfig> getConfigs() {\n@@ -51,9 +53,10 @@ void addConfig(ProcessConfig processConfig) {\n     }\n \n     public void deleteConfig(String process) {\n-        processConfigRepository.deleteById(process);\n-        mergeRepository.deleteByProcess(process);\n+        igmRepository.findByProcess(process).stream().map(IgmEntity::getNetworkUuid).forEach(networkStoreService::deleteNetwork);\n         igmRepository.deleteByProcess(process);\n+        mergeRepository.deleteByProcess(process);\n+        processConfigRepository.deleteById(process);\n     }\n \n     private ProcessConfig toProcessConfig(ProcessConfigEntity processConfigEntity) {"
  },
  {
    "sha": "96f3f6d8b49d7acabf240483e3ac66028b995021",
    "filename": "src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorService.java",
    "status": "modified",
    "additions": 74,
    "deletions": 85,
    "changes": 159,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorService.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorService.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/main/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorService.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -11,7 +11,6 @@\n import groovy.lang.Binding;\n import groovy.lang.GroovyShell;\n import groovy.lang.Script;\n-import org.apache.commons.lang3.StringUtils;\n import org.gridsuite.merge.orchestrator.server.dto.*;\n import org.gridsuite.merge.orchestrator.server.repositories.IgmEntity;\n import org.gridsuite.merge.orchestrator.server.repositories.IgmRepository;\n@@ -37,6 +36,8 @@\n import java.util.logging.Level;\n import java.util.stream.Collectors;\n \n+import static org.gridsuite.merge.orchestrator.server.dto.ProcessConfig.ACCEPTED_FORMAT;\n+\n /**\n  * @author Jon Harper <jon.harper at rte-france.com>\n  * @author Franck Lecuyer <franck.lecuyer at rte-france.com>\n@@ -49,10 +50,10 @@\n     private static final String CATEGORY_BROKER_INPUT = MergeOrchestratorService.class.getName()\n             + \".input-broker-messages\";\n \n-    private static final String DATE_HEADER_KEY         = \"date\";\n-    private static final String TSO_CODE_HEADER_KEY     = \"tso\";\n-    private static final String UUID_HEADER_KEY         = \"uuid\";\n-    private static final String FORMAT_HEADER_KEY       = \"format\";\n+    private static final String DATE_HEADER_KEY = \"date\";\n+    private static final String TSO_CODE_HEADER_KEY = \"tso\";\n+    private static final String UUID_HEADER_KEY = \"uuid\";\n+    private static final String FORMAT_HEADER_KEY = \"format\";\n     private static final String BUSINESS_PROCESS_HEADER_KEY = \"businessProcess\";\n     private static final String UNDERSCORE = \"_\";\n     private static final String CGM = \"CGM\";\n@@ -61,8 +62,6 @@\n     private static final String GROOVY_PROCESS_NAME_PARAMETER = \"processName\";\n     private static final String GROOVY_BUSINESS_PROCESS_PARAMETER = \"businessProcess\";\n \n-    private static final String ACCEPTED_FORMAT = \"CGMES\";\n-\n     private MergeRepository mergeRepository;\n \n     private IgmRepository igmRepository;\n@@ -119,93 +118,83 @@ public MergeOrchestratorService(NetworkStoreService networkStoreService,\n         return f -> f.log(CATEGORY_BROKER_INPUT, Level.FINE).subscribe(this::consume);\n     }\n \n-    private boolean isMatching(ProcessConfig config, String tso) {\n-        return config.getTsos().stream().anyMatch(ts -> ts.equals(tso));\n-    }\n-\n-    private boolean checkTso(List<ProcessConfig> configs, String tso, String format, String businessProcess) {\n-        return StringUtils.equals(format, ACCEPTED_FORMAT) &&\n-                StringUtils.isNotEmpty(businessProcess) &&\n-                configs.stream().anyMatch(c -> isMatching(c, tso) && c.getBusinessProcess().equals(businessProcess));\n-    }\n-\n     public void consume(Message<String> message) {\n         try {\n-            List<ProcessConfig> processConfigs = mergeConfigService.getConfigs();\n-\n             MessageHeaders mh = message.getHeaders();\n             String date = (String) mh.get(DATE_HEADER_KEY);\n             String tso = (String) mh.get(TSO_CODE_HEADER_KEY);\n-            UUID caseUuid = UUID.fromString((String) mh.get(UUID_HEADER_KEY));\n+            UUID caseUuid = UUID.fromString((String) Objects.requireNonNull(mh.get(UUID_HEADER_KEY)));\n             String format = (String) mh.get(FORMAT_HEADER_KEY);\n             String businessProcess = (String) mh.get(BUSINESS_PROCESS_HEADER_KEY);\n+            ZonedDateTime dateTime = ZonedDateTime.parse(Objects.requireNonNull(date));\n \n-            if (checkTso(processConfigs, tso, format, businessProcess)) {\n-                // required tso received\n-                ZonedDateTime dateTime = ZonedDateTime.parse(date);\n+            // Get all matching process configs\n+            List<ProcessConfig> matchingProcessConfigList = mergeConfigService.getConfigs().stream()\n+                    .filter(c -> c.isMatching(tso, format, businessProcess))\n+                    .collect(Collectors.toList());\n \n-                for (ProcessConfig processConfig : processConfigs) {\n-                    if (processConfig.getTsos().stream().anyMatch(ts -> ts.equals(tso)) &&\n-                            processConfig.getBusinessProcess().equals(businessProcess)) {\n-                        LOGGER.info(\"Merge {} of process {} {} : IGM in format {} from TSO {} received\", date, processConfig.getProcess(), processConfig.getBusinessProcess(), format, tso);\n-                        mergeEventService.addMergeIgmEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, tso, IgmStatus.AVAILABLE, null, null, null, null);\n-                    }\n-                }\n+            // Send all availability messages\n+            matchingProcessConfigList.forEach(processConfig -> {\n+                LOGGER.info(\"Merge {} of process {} {} : IGM in format {} from TSO {} received\", date, processConfig.getProcess(), processConfig.getBusinessProcess(), format, tso);\n \n-                if (!processConfigs.isEmpty()) {\n-                    // import IGM into the network store\n-                    UUID networkUuid = caseFetcherService.importCase(caseUuid);\n-                    // check IGM quality\n-                    boolean valid = igmQualityCheckService.check(networkUuid);\n+                // if already received delete old network\n+                Optional<IgmEntity> igmEntityOptional = igmRepository.findByProcessAndDateAndTso(processConfig.getProcess(), LocalDateTime.ofInstant(dateTime.toInstant(), ZoneOffset.UTC), tso);\n+                igmEntityOptional.ifPresent(igmEntity -> networkStoreService.deleteNetwork(igmEntity.getNetworkUuid()));\n \n-                    merge(processConfigs.get(0), dateTime, date, tso, valid, networkUuid, caseUuid, businessProcess, null, null);\n+                mergeEventService.addMergeIgmEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, tso, IgmStatus.AVAILABLE, null, null, null, null);\n+            });\n \n-                    for (ProcessConfig processConfig : processConfigs.subList(1, processConfigs.size())) {\n-                        // import IGM into the network store\n-                        UUID processConfigNetworkUuid = caseFetcherService.importCase(caseUuid);\n-                        merge(processConfig, dateTime, date, tso, valid, processConfigNetworkUuid, caseUuid, businessProcess, null, null);\n-                    }\n+            if (!matchingProcessConfigList.isEmpty()) {\n+                // import IGM into the network store\n+                UUID networkUuid = caseFetcherService.importCase(caseUuid);\n+                // check IGM quality\n+                boolean valid = igmQualityCheckService.check(networkUuid);\n+\n+                merge(matchingProcessConfigList.get(0), dateTime, date, tso, valid, networkUuid, caseUuid, null, null);\n+\n+                for (ProcessConfig processConfig : matchingProcessConfigList.subList(1, matchingProcessConfigList.size())) {\n+                    // import IGM into the network store\n+                    UUID processConfigNetworkUuid = caseFetcherService.importCase(caseUuid);\n+                    merge(processConfig, dateTime, date, tso, valid, processConfigNetworkUuid, caseUuid, null, null);\n                 }\n             }\n         } catch (Exception e) {\n-            LOGGER.error(\"Error : {}\", e.getMessage());\n+            LOGGER.error(\"Merge error : \", e);\n         }\n     }\n \n-    void merge(ProcessConfig processConfig, ZonedDateTime dateTime, String date, String tso,\n-               boolean valid, UUID networkUuid, UUID caseUuid, String businessProcess,\n-               ZonedDateTime replacingDate, String replacingBusinessProcess) {\n-        if (processConfig.getTsos().stream().anyMatch(ts -> ts.equals(tso)) &&\n-                processConfig.getBusinessProcess().equals(businessProcess)) {\n-            LOGGER.info(\"Merge {} of process {} {} : IGM from TSO {} is {}valid\", date, processConfig.getProcess(), processConfig.getBusinessProcess(), tso, valid ? \" \" : \"not \");\n-            mergeEventService.addMergeIgmEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, tso,\n-                    valid ? IgmStatus.VALIDATION_SUCCEED : IgmStatus.VALIDATION_FAILED, networkUuid, caseUuid,\n-                    replacingDate, replacingBusinessProcess);\n-\n-            // get list of network UUID for validated IGMs\n-            List<IgmEntity> igmEntities = findValidatedIgms(dateTime, processConfig.getProcess());\n-            List<UUID> networkUuids = igmEntities.stream().map(IgmEntity::getNetworkUuid).collect(Collectors.toList());\n-            if (networkUuids.size() == processConfig.getTsos().size()) {\n-                // all IGMs are available and valid for the merging process\n-                LOGGER.info(\"Merge {} of process {} {} : all IGMs have been received and are valid\", date, processConfig.getProcess(), processConfig.getBusinessProcess());\n-\n-                if (processConfig.isRunBalancesAdjustment()) {\n-                    // balances adjustment on the merge network\n-                    balancesAdjustmentService.doBalance(networkUuids);\n-\n-                    LOGGER.info(\"Merge {} of process {} {} : balance adjustment complete\", date, processConfig.getProcess(), processConfig.getBusinessProcess());\n-\n-                    // TODO check balance adjustment status\n-                    mergeEventService.addMergeEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, MergeStatus.BALANCE_ADJUSTMENT_SUCCEED);\n-                } else {\n-                    // load flow on the merged network\n-                    loadFlowService.run(networkUuids);\n-\n-                    LOGGER.info(\"Merge {} of process {} {} : loadflow complete\", date, processConfig.getProcess(), processConfig.getBusinessProcess());\n-\n-                    // TODO check loadflow status\n-                    mergeEventService.addMergeEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, MergeStatus.LOADFLOW_SUCCEED);\n-                }\n+    private void merge(ProcessConfig processConfig, ZonedDateTime dateTime, String date, String tso,\n+                       boolean valid, UUID networkUuid, UUID caseUuid,\n+                       ZonedDateTime replacingDate, String replacingBusinessProcess) {\n+        LOGGER.info(\"Merge {} of process {} {} : IGM from TSO {} is {}valid\", date, processConfig.getProcess(), processConfig.getBusinessProcess(), tso, valid ? \"\" : \"not \");\n+\n+        mergeEventService.addMergeIgmEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, tso,\n+                valid ? IgmStatus.VALIDATION_SUCCEED : IgmStatus.VALIDATION_FAILED, networkUuid, caseUuid,\n+                replacingDate, replacingBusinessProcess);\n+\n+        // get list of network UUID for validated IGMs\n+        List<IgmEntity> igmEntities = findValidatedIgms(dateTime, processConfig.getProcess());\n+        List<UUID> networkUuids = igmEntities.stream().map(IgmEntity::getNetworkUuid).collect(Collectors.toList());\n+        if (networkUuids.size() == processConfig.getTsos().size()) {\n+            // all IGMs are available and valid for the merging process\n+            LOGGER.info(\"Merge {} of process {} {} : all IGMs have been received and are valid\", date, processConfig.getProcess(), processConfig.getBusinessProcess());\n+\n+            if (processConfig.isRunBalancesAdjustment()) {\n+                // balances adjustment on the merge network\n+                balancesAdjustmentService.doBalance(networkUuids);\n+\n+                LOGGER.info(\"Merge {} of process {} {} : balance adjustment complete\", date, processConfig.getProcess(), processConfig.getBusinessProcess());\n+\n+                // TODO check balance adjustment status\n+                mergeEventService.addMergeEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, MergeStatus.BALANCE_ADJUSTMENT_SUCCEED);\n+            } else {\n+                // load flow on the merged network\n+                loadFlowService.run(networkUuids);\n+\n+                LOGGER.info(\"Merge {} of process {} {} : loadflow complete\", date, processConfig.getProcess(), processConfig.getBusinessProcess());\n+\n+                // TODO check loadflow status\n+                mergeEventService.addMergeEvent(processConfig.getProcess(), processConfig.getBusinessProcess(), dateTime, MergeStatus.LOADFLOW_SUCCEED);\n             }\n         }\n     }\n@@ -250,12 +239,12 @@ void merge(ProcessConfig processConfig, ZonedDateTime dateTime, String date, Str\n     }\n \n     FileInfos exportMerge(String process, ZonedDateTime processDate, String format) {\n-        List<IgmEntity> igmEntities =  findValidatedIgms(processDate, process);\n+        List<IgmEntity> igmEntities = findValidatedIgms(processDate, process);\n         List<UUID> networkUuids = igmEntities.stream().map(IgmEntity::getNetworkUuid).collect(Collectors.toList());\n         List<UUID> caseUuid = igmEntities.stream().map(IgmEntity::getCaseUuid).collect(Collectors.toList());\n         String businessProcess = mergeConfigService.getConfig(process).orElseThrow(() -> new PowsyblException(\"Business process \" + process + \"does not exist\")).getBusinessProcess();\n         DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyyMMdd'T'HHmm'Z'\");\n-        String baseFileName = processDate.toLocalDateTime().format(formatter) + UNDERSCORE + businessProcess + UNDERSCORE + CGM + UNDERSCORE +  process;\n+        String baseFileName = processDate.toLocalDateTime().format(formatter) + UNDERSCORE + businessProcess + UNDERSCORE + CGM + UNDERSCORE + process;\n         return networkConversionService.exportMerge(networkUuids, caseUuid, format, baseFileName);\n     }\n \n@@ -270,15 +259,15 @@ private static Merge toMerge(MergeEntity mergeEntity) {\n         return new Merge(mergeEntity.getKey().getProcess(), date, mergeEntity.getStatus() != null ? MergeStatus.valueOf(mergeEntity.getStatus()) : null, new ArrayList<>());\n     }\n \n-    public Map<String, IgmReplacingInfo> replaceIGMs(String processName, ZonedDateTime processDate) {\n+    public Map<String, IgmReplacingInfo> replaceIGMs(String configName, ZonedDateTime processDate) {\n         LocalDateTime ldt = LocalDateTime.ofInstant(processDate.toInstant(), ZoneOffset.UTC);\n \n         // find missing or invalid igms\n         List<String> missingOrInvalidTsos = new ArrayList<>();\n-        ProcessConfig config = mergeConfigService.getConfig(processName).orElse(null);\n+        ProcessConfig config = mergeConfigService.getConfig(configName).orElse(null);\n         if (config != null) {\n             for (String tso : config.getTsos()) {\n-                Optional<IgmEntity> entity = igmRepository.findByProcessAndDateAndTso(processName, ldt, tso);\n+                Optional<IgmEntity> entity = igmRepository.findByProcessAndDateAndTso(configName, ldt, tso);\n                 if (!entity.isPresent() || !entity.get().getStatus().equals(IgmStatus.VALIDATION_SUCCEED.name())) {\n                     missingOrInvalidTsos.add(tso);\n                 }\n@@ -313,8 +302,8 @@ private static Merge toMerge(MergeEntity mergeEntity) {\n     }\n \n     private Map<String, IgmReplacingInfo> findReplacingIGM(ProcessConfig config,\n-                                  ZonedDateTime processDate,\n-                                  List<String> missingOrInvalidTsos) {\n+                                                           ZonedDateTime processDate,\n+                                                           List<String> missingOrInvalidTsos) {\n         Map<String, IgmReplacingInfo> replacingIGMs = new HashMap<>();\n \n         LocalDateTime localDateTime = LocalDateTime.ofInstant(processDate.toInstant(), ZoneOffset.UTC);\n@@ -328,7 +317,7 @@ private static Merge toMerge(MergeEntity mergeEntity) {\n         // handle each missing or invalid igms\n         for (String tso : missingOrInvalidTsos) {\n             for (ReplacingDate elt : resScript) {\n-                ZonedDateTime replacingDate  = ZonedDateTime.parse(elt.getDate(), DateTimeFormatter.ISO_ZONED_DATE_TIME.withZone(ZoneId.of(\"UTC\")));\n+                ZonedDateTime replacingDate = ZonedDateTime.parse(elt.getDate(), DateTimeFormatter.ISO_ZONED_DATE_TIME.withZone(ZoneId.of(\"UTC\")));\n \n                 String replacingBusinessProcess = elt.getBusinessProcess();\n \n@@ -388,7 +377,7 @@ private static Merge toMerge(MergeEntity mergeEntity) {\n                     config.getProcess(), config.getBusinessProcess(), tso, formattedReplacingDate);\n \n             merge(config, processDate, formattedDate, tso, true, igmReplace.getNetworkUuid(), igmReplace.getCaseUuid(),\n-                    config.getBusinessProcess(), igmReplace.getDate(), igmReplace.getBusinessProcess());\n+                    igmReplace.getDate(), igmReplace.getBusinessProcess());\n         }\n \n         return replacingIGMs;"
  },
  {
    "sha": "ce95e899c3caa2e4a552656c1d683154a754e9e8",
    "filename": "src/main/java/org/gridsuite/merge/orchestrator/server/dto/Igm.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/dto/Igm.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/dto/Igm.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/main/java/org/gridsuite/merge/orchestrator/server/dto/Igm.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -10,6 +10,7 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n+import lombok.ToString;\n \n import java.time.ZonedDateTime;\n \n@@ -20,6 +21,7 @@\n @AllArgsConstructor\n @NoArgsConstructor\n @Getter\n+@ToString\n @ApiModel(\"IGM attributes\")\n public class Igm {\n "
  },
  {
    "sha": "4052041f2758a6e4f1bb4bbf5c7f912ea5ba66f3",
    "filename": "src/main/java/org/gridsuite/merge/orchestrator/server/dto/Merge.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/dto/Merge.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/dto/Merge.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/main/java/org/gridsuite/merge/orchestrator/server/dto/Merge.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -10,6 +10,7 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n+import lombok.ToString;\n \n import java.time.ZonedDateTime;\n import java.util.List;\n@@ -21,6 +22,7 @@\n @AllArgsConstructor\n @NoArgsConstructor\n @Getter\n+@ToString\n @ApiModel(\"Merge attributes\")\n public class Merge {\n "
  },
  {
    "sha": "edc92a200fd72d3ff52c6d9e0c35a4c916c33d91",
    "filename": "src/main/java/org/gridsuite/merge/orchestrator/server/dto/ProcessConfig.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/dto/ProcessConfig.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/main/java/org/gridsuite/merge/orchestrator/server/dto/ProcessConfig.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/main/java/org/gridsuite/merge/orchestrator/server/dto/ProcessConfig.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -10,6 +10,7 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n+import org.apache.commons.lang3.StringUtils;\n \n import java.util.List;\n \n@@ -23,11 +24,26 @@\n @ApiModel(\"Process config\")\n public class ProcessConfig {\n \n+    public static final String ACCEPTED_FORMAT = \"CGMES\";\n+\n     private String process;\n \n     private String businessProcess;\n \n     private List<String> tsos;\n \n     private boolean runBalancesAdjustment;\n+\n+    private boolean isMatching(String tso) {\n+        return this.getTsos().stream().anyMatch(ts -> ts.equals(tso));\n+    }\n+\n+    private boolean isMatching(String tso, String businessProcess) {\n+        return this.isMatching(tso) && this.getBusinessProcess().equals(businessProcess);\n+    }\n+\n+    public boolean isMatching(String tso, String format, String businessProcess) {\n+        return StringUtils.isNotEmpty(tso) && StringUtils.isNotEmpty(format) && StringUtils.isNotEmpty(businessProcess) &&\n+                StringUtils.equals(format, ACCEPTED_FORMAT) && this.isMatching(tso, businessProcess);\n+    }\n }"
  },
  {
    "sha": "fcaa97a1a9f5bbc6c07615291c238108e5e9458a",
    "filename": "src/test/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorIT.java",
    "status": "modified",
    "additions": 232,
    "deletions": 30,
    "changes": 262,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorIT.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorIT.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/test/java/org/gridsuite/merge/orchestrator/server/MergeOrchestratorIT.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -6,27 +6,15 @@\n  */\n package org.gridsuite.merge.orchestrator.server;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.ArgumentMatchers.any;\n-\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.*;\n-\n-import javax.inject.Inject;\n-\n+import com.powsybl.iidm.network.NetworkFactory;\n import com.powsybl.network.store.client.NetworkStoreService;\n import com.powsybl.network.store.client.PreloadingStrategy;\n import org.gridsuite.merge.orchestrator.server.dto.*;\n import org.gridsuite.merge.orchestrator.server.repositories.*;\n-import com.powsybl.iidm.network.NetworkFactory;\n-import org.gridsuite.merge.orchestrator.server.repositories.MergeEntity;\n-import org.gridsuite.merge.orchestrator.server.repositories.IgmEntity;\n-import org.gridsuite.merge.orchestrator.server.repositories.IgmRepository;\n-import org.gridsuite.merge.orchestrator.server.repositories.MergeRepository;\n+import org.gridsuite.merge.orchestrator.server.utils.MatcherIgm;\n+import org.gridsuite.merge.orchestrator.server.utils.MatcherIgmEntity;\n+import org.gridsuite.merge.orchestrator.server.utils.MatcherMerge;\n+import org.gridsuite.merge.orchestrator.server.utils.MatcherMergeEntity;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -45,8 +33,16 @@\n import org.springframework.test.context.ContextHierarchy;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import java.util.List;\n-import java.util.UUID;\n+import javax.inject.Inject;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.IntStream;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n \n /**\n  * @author Jon Harper <jon.harper at rte-france.com>\n@@ -55,8 +51,8 @@\n @RunWith(SpringRunner.class)\n @SpringBootTest(\n         webEnvironment = WebEnvironment.MOCK)\n-@ContextHierarchy({ @ContextConfiguration(classes = { MergeOrchestratorApplication.class,\n-        TestChannelBinderConfiguration.class }), })\n+@ContextHierarchy({@ContextConfiguration(classes = {MergeOrchestratorApplication.class,\n+        TestChannelBinderConfiguration.class})})\n public class MergeOrchestratorIT extends AbstractEmbeddedCassandraSetup {\n \n     @Inject\n@@ -109,29 +105,32 @@\n \n     private static final UUID UUID_CASE_ID_PT = UUID.fromString(\"7928181c-7977-4592-ba19-88027e4254e6\");\n     private static final UUID UUID_NETWORK_ID_PT = UUID.fromString(\"7928181c-7977-4592-ba19-88027e4254e6\");\n+    private static final UUID UUID_CASE_ID_PT_1 = UUID.fromString(\"d8babb72-f60e-4766-bc5c-8f312c1984e4\");\n+    private static final UUID UUID_NETWORK_ID_PT_1 = UUID.fromString(\"d8babb72-f60e-4766-bc5c-8f312c1984e4\");\n \n     private static final UUID UUID_CASE_ID_UNKNOWN = UUID.fromString(\"7928181c-7977-4592-ba19-88027e4254e9\");\n \n     private final NetworkFactory networkFactory = NetworkFactory.find(\"Default\");\n     private final ZonedDateTime dateTime = ZonedDateTime.of(2019, 5, 1, 9, 0, 0, 0, ZoneId.of(\"UTC\"));\n \n+    private void createProcessConfigs() {\n+        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"SWE_1D\", \"1D\", List.of(\"FR\", \"ES\", \"PT\"), false));\n+        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"SWE_2D\", \"2D\", List.of(\"FR\", \"ES\", \"PT\"), false));\n+        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"FRES_2D\", \"2D\", List.of(\"FR\", \"ES\"), false));\n+    }\n+\n     @Before\n     public void setUp() {\n         MockitoAnnotations.initMocks(this);\n-        ArrayList<String> tsos = new ArrayList<>();\n-        tsos.add(\"FR\");\n-        tsos.add(\"ES\");\n-        tsos.add(\"PT\");\n-        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"SWE_1D\", \"1D\", tsos, false));\n-        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"SWE_2D\", \"2D\", tsos, false));\n-        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"FRES_2D\", \"2D\", tsos.subList(0, 2), false));\n \n         Mockito.when(caseFetcherService.importCase(UUID_CASE_ID_FR))\n                 .thenReturn(UUID_NETWORK_ID_FR);\n         Mockito.when(caseFetcherService.importCase(UUID_CASE_ID_ES))\n                 .thenReturn(UUID_NETWORK_ID_ES);\n         Mockito.when(caseFetcherService.importCase(UUID_CASE_ID_PT))\n                 .thenReturn(UUID_NETWORK_ID_PT);\n+        Mockito.when(caseFetcherService.importCase(UUID_CASE_ID_PT_1))\n+                .thenReturn(UUID_NETWORK_ID_PT_1);\n \n         Mockito.when(networkStoreService.getNetwork(UUID_NETWORK_ID_FR, PreloadingStrategy.COLLECTION))\n                 .thenReturn(networkFactory.createNetwork(\"fr\", \"iidm\"));\n@@ -146,10 +145,14 @@ public void setUp() {\n                 .thenReturn(true);\n         Mockito.when(igmQualityCheckService.check(UUID_NETWORK_ID_PT))\n                 .thenReturn(true);\n+        Mockito.when(igmQualityCheckService.check(UUID_NETWORK_ID_PT_1))\n+                .thenReturn(true);\n     }\n \n     @Test\n     public void testSingleMerge() {\n+        createProcessConfigs();\n+\n         // send first tso FR with business process = 1D, expect only one AVAILABLE and one VALIDATION_SUCCEED message\n         Mockito.when(caseFetcherService.getCases(any(), any(), any(), any()))\n                 .thenReturn(List.of(new CaseInfos(\"fr\", UUID_CASE_ID_FR, \"\", \"FR\", \"1D\")));\n@@ -271,6 +274,8 @@ public void testSingleMerge() {\n \n     @Test\n     public void testMultipleMerge() {\n+        createProcessConfigs();\n+\n         // send first tso FR with business process = 2D, expect two AVAILABLE and two VALIDATION_SUCCEED message\n         // (for both process SWE_2D and FRES_2D)\n         Mockito.when(caseFetcherService.getCases(any(), any(), any(), any()))\n@@ -449,8 +454,205 @@ public void testMultipleMerge() {\n         mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"SWE_2D\", \"2D\", tsos, false));\n     }\n \n+    private void testImportIgmMessages(int nbOfTimes, boolean withMerge) {\n+        IntStream.range(0, nbOfTimes).forEach(i ->\n+                assertEquals(\"AVAILABLE\", output.receive(1000).getHeaders().get(\"status\"))\n+        );\n+\n+        IntStream.range(0, nbOfTimes).forEach(i ->\n+                assertEquals(\"VALIDATION_SUCCEED\", output.receive(1000).getHeaders().get(\"status\"))\n+        );\n+\n+        if (withMerge) {\n+            assertEquals(runBalancesAdjustment ? \"BALANCE_ADJUSTMENT_SUCCEED\" : \"LOADFLOW_SUCCEED\", output.receive(1000).getHeaders().get(\"status\"));\n+        }\n+    }\n+\n+    private void testMergeOk(Merge merge, List<String> tsos) {\n+        MergeStatus mergeStatusOk = runBalancesAdjustment ? MergeStatus.BALANCE_ADJUSTMENT_SUCCEED : MergeStatus.LOADFLOW_SUCCEED;\n+        assertThat(merge, new MatcherMerge(merge.getProcess(), dateTime, mergeStatusOk));\n+        assertEquals(tsos.size(), merge.getIgms().size());\n+        IntStream.range(0, tsos.size()).forEach(i -> assertThat(merge.getIgms().get(i), new MatcherIgm(tsos.get(i), IgmStatus.VALIDATION_SUCCEED)));\n+    }\n+\n+    @Test\n+    public void testDeleteMerge() {\n+        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"FRES_2D\", \"2D\", List.of(\"FR\", \"ES\"), false));\n+        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"FRPT_2D\", \"2D\", List.of(\"FR\", \"PT\"), false));\n+\n+        // send tsos FR, ES and PT with business process = 2D\n+        input.send(MessageBuilder.withPayload(\"\")\n+                .setHeader(\"tso\", \"FR\")\n+                .setHeader(\"date\", \"2019-05-01T10:00:00.000+01:00\")\n+                .setHeader(\"uuid\", UUID_CASE_ID_FR.toString())\n+                .setHeader(\"format\", \"CGMES\")\n+                .setHeader(\"businessProcess\", \"2D\")\n+                .build());\n+        input.send(MessageBuilder.withPayload(\"\")\n+                .setHeader(\"tso\", \"ES\")\n+                .setHeader(\"date\", \"2019-05-01T10:00:00.000+01:00\")\n+                .setHeader(\"uuid\", UUID_CASE_ID_ES.toString())\n+                .setHeader(\"format\", \"CGMES\")\n+                .setHeader(\"businessProcess\", \"2D\")\n+                .build());\n+        input.send(MessageBuilder.withPayload(\"\")\n+                .setHeader(\"tso\", \"PT\")\n+                .setHeader(\"date\", \"2019-05-01T10:00:00.000+01:00\")\n+                .setHeader(\"uuid\", UUID_CASE_ID_PT.toString())\n+                .setHeader(\"format\", \"CGMES\")\n+                .setHeader(\"businessProcess\", \"2D\")\n+                .build());\n+\n+        testImportIgmMessages(2, false);\n+        testImportIgmMessages(1, true);\n+        testImportIgmMessages(1, true);\n+\n+        testMergeOk(mergeOrchestratorService.getMerges(\"FRES_2D\").get(0), List.of(\"ES\", \"FR\"));\n+        testMergeOk(mergeOrchestratorService.getMerges(\"FRPT_2D\").get(0), List.of(\"FR\", \"PT\"));\n+\n+        assertEquals(2, mergeRepository.findAll().size());\n+        assertEquals(4, igmRepository.findAll().size());\n+\n+        mergeOrchestratorConfigService.deleteConfig(\"FRPT_2D\");\n+        assertEquals(1, mergeRepository.findAll().size());\n+        assertEquals(2, igmRepository.findAll().size());\n+\n+        mergeOrchestratorConfigService.deleteConfig(\"FRES_2D\");\n+        assertEquals(0, mergeRepository.findAll().size());\n+        assertEquals(0, igmRepository.findAll().size());\n+\n+        assertNull(output.receive(1000));\n+    }\n+\n+    @Test\n+    public void testImportIgmByOnlyMatchingConfigs() {\n+        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"FRES_2D\", \"2D\", List.of(\"FR\", \"ES\"), false));\n+        mergeOrchestratorConfigService.addConfig(new ProcessConfig(\"FRPT_2D\", \"2D\", List.of(\"FR\", \"PT\"), false));\n+        MergeStatus mergeStatusOk = runBalancesAdjustment ? MergeStatus.BALANCE_ADJUSTMENT_SUCCEED : MergeStatus.LOADFLOW_SUCCEED;\n+\n+        // send first tso FR with business process = 2D, expect two AVAILABLE and two VALIDATION_SUCCEED message\n+        // (for both process FRES_2D and FRPT_2D)\n+        input.send(MessageBuilder.withPayload(\"\")\n+                .setHeader(\"tso\", \"FR\")\n+                .setHeader(\"date\", \"2019-05-01T10:00:00.000+01:00\")\n+                .setHeader(\"uuid\", UUID_CASE_ID_FR.toString())\n+                .setHeader(\"format\", \"CGMES\")\n+                .setHeader(\"businessProcess\", \"2D\")\n+                .build());\n+\n+        // Imported twice\n+        testImportIgmMessages(2, false);\n+\n+        List<MergeEntity> mergeEntities = mergeRepository.findAll();\n+        mergeEntities.sort(Comparator.comparing(merge -> merge.getKey().getProcess()));\n+        assertEquals(2, mergeEntities.size());\n+        assertThat(mergeEntities.get(0),\n+                new MatcherMergeEntity(\"FRES_2D\", dateTime.toLocalDateTime(), null));\n+        assertThat(mergeEntities.get(1),\n+                new MatcherMergeEntity(\"FRPT_2D\", dateTime.toLocalDateTime(), null));\n+\n+        List<IgmEntity> igmEntities = igmRepository.findAll();\n+        igmEntities.sort(Comparator.comparing(igm -> igm.getKey().getProcess()));\n+        assertEquals(2, igmEntities.size());\n+        assertThat(igmEntities.get(0),\n+                new MatcherIgmEntity(\"FRES_2D\", dateTime.toLocalDateTime(), \"FR\", IgmStatus.VALIDATION_SUCCEED, UUID_NETWORK_ID_FR));\n+        assertThat(igmEntities.get(1),\n+                new MatcherIgmEntity(\"FRPT_2D\", dateTime.toLocalDateTime(), \"FR\", IgmStatus.VALIDATION_SUCCEED, UUID_NETWORK_ID_FR));\n+\n+        // send second tso ES with business process 2D, expect one AVAILABLE and one VALIDATION_SUCCEED message\n+        // (for process FRES_2D),\n+        // and expect BALANCE_ADJUSTMENT_SUCCEED or LOADFLOW_SUCCEED message (merge done for process FRES_2D)\n+        input.send(MessageBuilder.withPayload(\"\")\n+                .setHeader(\"tso\", \"ES\")\n+                .setHeader(\"date\", \"2019-05-01T10:00:00.000+01:00\")\n+                .setHeader(\"uuid\", UUID_CASE_ID_ES.toString())\n+                .setHeader(\"format\", \"CGMES\")\n+                .setHeader(\"businessProcess\", \"2D\")\n+                .build());\n+\n+        // Imported once\n+        testImportIgmMessages(1, true);\n+\n+        mergeEntities = mergeRepository.findAll();\n+        mergeEntities.sort(Comparator.comparing(merge -> merge.getKey().getProcess()));\n+        assertEquals(2, mergeEntities.size());\n+        assertThat(mergeEntities.get(0),\n+                new MatcherMergeEntity(\"FRES_2D\", dateTime.toLocalDateTime(), mergeStatusOk));\n+\n+        igmEntities = igmRepository.findAll();\n+        igmEntities.sort(Comparator.comparing(igm -> igm.getKey().getProcess()));\n+        assertEquals(3, igmEntities.size());\n+        assertThat(igmEntities.get(0),\n+                new MatcherIgmEntity(\"FRES_2D\", dateTime.toLocalDateTime(), \"ES\", IgmStatus.VALIDATION_SUCCEED, UUID_NETWORK_ID_ES));\n+\n+        // send third tso PT with business process 2D, expect one AVAILABLE and one VALIDATION_SUCCEED message\n+        // (for process FRPT_2D),\n+        // and expect BALANCE_ADJUSTMENT_SUCCEED or LOADFLOW_SUCCEED message (merge done for process FRPT_2D)\n+        input.send(MessageBuilder.withPayload(\"\")\n+                .setHeader(\"tso\", \"PT\")\n+                .setHeader(\"date\", \"2019-05-01T10:00:00.000+01:00\")\n+                .setHeader(\"uuid\", UUID_CASE_ID_PT.toString())\n+                .setHeader(\"format\", \"CGMES\")\n+                .setHeader(\"businessProcess\", \"2D\")\n+                .build());\n+\n+        // Imported once\n+        testImportIgmMessages(1, true);\n+\n+        mergeEntities = mergeRepository.findAll();\n+        mergeEntities.sort(Comparator.comparing(merge -> merge.getKey().getProcess()));\n+        assertEquals(2, mergeEntities.size());\n+        assertThat(mergeEntities.get(1),\n+                new MatcherMergeEntity(\"FRPT_2D\", dateTime.toLocalDateTime(), mergeStatusOk));\n+\n+        igmEntities = igmRepository.findAll();\n+        igmEntities.sort(Comparator.comparing(igm -> igm.getKey().getProcess()));\n+        assertEquals(4, igmEntities.size());\n+        assertThat(igmEntities.get(3),\n+                new MatcherIgmEntity(\"FRPT_2D\", dateTime.toLocalDateTime(), \"PT\", IgmStatus.VALIDATION_SUCCEED, UUID_NETWORK_ID_PT));\n+\n+        List<Merge> mergeInfos = mergeOrchestratorService.getMerges(\"FRES_2D\");\n+        assertEquals(1, mergeInfos.size());\n+        testMergeOk(mergeInfos.get(0), List.of(\"ES\", \"FR\"));\n+\n+        mergeInfos = mergeOrchestratorService.getMerges(\"FRPT_2D\");\n+        assertEquals(1, mergeInfos.size());\n+        testMergeOk(mergeInfos.get(0), List.of(\"FR\", \"PT\"));\n+\n+        // send again tso PT with business process 2D, expect one AVAILABLE and one VALIDATION_SUCCEED message\n+        // (for process FRPT_2D),\n+        // and expect BALANCE_ADJUSTMENT_SUCCEED or LOADFLOW_SUCCEED message (merge done for process FRPT_2D)\n+        input.send(MessageBuilder.withPayload(\"\")\n+                .setHeader(\"tso\", \"PT\")\n+                .setHeader(\"date\", \"2019-05-01T10:00:00.000+01:00\")\n+                .setHeader(\"uuid\", UUID_CASE_ID_PT_1.toString())\n+                .setHeader(\"format\", \"CGMES\")\n+                .setHeader(\"businessProcess\", \"2D\")\n+                .build());\n+\n+        // Imported once\n+        testImportIgmMessages(1, true);\n+\n+        igmEntities = igmRepository.findAll();\n+        igmEntities.sort(Comparator.comparing(igm -> igm.getKey().getProcess()));\n+        assertEquals(4, igmEntities.size());\n+        assertThat(igmEntities.get(3),\n+                new MatcherIgmEntity(\"FRPT_2D\", dateTime.toLocalDateTime(), \"PT\", IgmStatus.VALIDATION_SUCCEED, UUID_CASE_ID_PT_1));\n+\n+        mergeInfos = mergeOrchestratorService.getMerges(\"FRES_2D\");\n+        assertEquals(1, mergeInfos.size());\n+        testMergeOk(mergeInfos.get(0), List.of(\"ES\", \"FR\"));\n+\n+        mergeInfos = mergeOrchestratorService.getMerges(\"FRPT_2D\");\n+        assertEquals(1, mergeInfos.size());\n+        testMergeOk(mergeInfos.get(0), List.of(\"FR\", \"PT\"));\n+\n+        assertNull(output.receive(1000));\n+    }\n+\n     @Test\n     public void parametersRepositoryTest() {\n+        createProcessConfigs();\n         assertEquals(3, processConfigRepository.findAll().size());\n         List<String> tsos = new ArrayList<>();\n         tsos.add(\"FR\");\n@@ -505,7 +707,7 @@ public void replacingIGMsTest() {\n         UUID uuidReplacingCaseES = UUID.fromString(\"7928181c-7977-4592-ba19-88027e4254e5\");\n         ZonedDateTime replacingDateES = ZonedDateTime.of(2019, 5, 1, 12, 30, 0, 0, ZoneId.of(\"UTC\"));\n \n-        Mockito.when(caseFetcherService.getCases(Arrays.asList(\"ES\"), replacingDateES, \"CGMES\", \"2D\"))\n+        Mockito.when(caseFetcherService.getCases(List.of(\"ES\"), replacingDateES, \"CGMES\", \"2D\"))\n                 .thenReturn(List.of(new CaseInfos(\"20190501T1230Z_1D_REE_001.zip\", uuidReplacingCaseES, \"CGMES\", \"ES\", \"2D\")));\n \n         UUID uuidReplacingNetworkES = UUID.fromString(\"7928181c-7977-4592-ba19-88027e4254e6\");\n@@ -567,7 +769,7 @@ public void replacingIGMsTest() {\n         UUID uuidReplacingCasePT = UUID.fromString(\"7928181c-7977-4592-ba19-88027e4254f1\");\n         ZonedDateTime replacingDatePT = ZonedDateTime.of(2019, 5, 1, 17, 30, 0, 0, ZoneId.of(\"UTC\"));\n \n-        Mockito.when(caseFetcherService.getCases(Arrays.asList(\"PT\"), replacingDatePT, \"CGMES\", \"2D\"))\n+        Mockito.when(caseFetcherService.getCases(List.of(\"PT\"), replacingDatePT, \"CGMES\", \"2D\"))\n                 .thenReturn(List.of(new CaseInfos(\"20190501T1730Z_1D_REN_001.zip\", uuidReplacingCasePT, \"CGMES\", \"PT\", \"2D\")));\n \n         UUID uuidReplacingNetworkPT = UUID.fromString(\"7928181c-7977-4592-ba19-88027e4254f2\");"
  },
  {
    "sha": "b8696bbda809c3a5cf88a1bcf7faf6d4bbe63427",
    "filename": "src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgm.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgm.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgm.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgm.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -0,0 +1,39 @@\n+/*\n+  Copyright (c) 2021, RTE (http://www.rte-france.com)\n+  This Source Code Form is subject to the terms of the Mozilla Public\n+  License, v. 2.0. If a copy of the MPL was not distributed with this\n+  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.gridsuite.merge.orchestrator.server.utils;\n+\n+import org.gridsuite.merge.orchestrator.server.dto.Igm;\n+import org.gridsuite.merge.orchestrator.server.dto.IgmStatus;\n+import org.hamcrest.Description;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.util.Objects;\n+\n+/**\n+ * @author Slimane Amar <slimane.amar at rte-france.com>\n+ */\n+public class MatcherIgm extends TypeSafeMatcher<Igm> {\n+\n+    Igm reference;\n+\n+    public MatcherIgm(String tso, IgmStatus status) {\n+        this.reference = new Igm(tso, status, null, null);\n+    }\n+\n+    @Override\n+    public boolean matchesSafely(Igm m) {\n+        return reference.getTso().equals(m.getTso()) &&\n+                reference.getStatus().equals(m.getStatus()) &&\n+                Objects.equals(reference.getReplacingDate(), m.getReplacingDate()) &&\n+                Objects.equals(reference.getReplacingBusinessProcess(), m.getReplacingBusinessProcess());\n+    }\n+\n+    @Override\n+    public void describeTo(Description description) {\n+        description.appendValue(reference);\n+    }\n+}"
  },
  {
    "sha": "573ad006c627707e7231e18ae7db6487a3bdc483",
    "filename": "src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgmEntity.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgmEntity.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgmEntity.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherIgmEntity.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -0,0 +1,42 @@\n+/*\n+  Copyright (c) 2021, RTE (http://www.rte-france.com)\n+  This Source Code Form is subject to the terms of the Mozilla Public\n+  License, v. 2.0. If a copy of the MPL was not distributed with this\n+  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.gridsuite.merge.orchestrator.server.utils;\n+\n+import org.gridsuite.merge.orchestrator.server.dto.IgmStatus;\n+import org.gridsuite.merge.orchestrator.server.repositories.IgmEntity;\n+import org.gridsuite.merge.orchestrator.server.repositories.IgmEntityKey;\n+import org.hamcrest.Description;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.time.LocalDateTime;\n+import java.util.UUID;\n+\n+/**\n+ * @author Slimane Amar <slimane.amar at rte-france.com>\n+ */\n+public class MatcherIgmEntity extends TypeSafeMatcher<IgmEntity> {\n+\n+    IgmEntity reference;\n+\n+    public MatcherIgmEntity(String process, LocalDateTime date, String tso, IgmStatus status, UUID networkUuid) {\n+        this.reference = new IgmEntity(new IgmEntityKey(process, date, tso), status.name(), networkUuid, networkUuid, null, null);\n+    }\n+\n+    @Override\n+    public boolean matchesSafely(IgmEntity m) {\n+        return reference.getKey().getProcess().equals(m.getKey().getProcess()) &&\n+                reference.getKey().getDate().equals(m.getKey().getDate()) &&\n+                reference.getKey().getTso().equals(m.getKey().getTso()) &&\n+                reference.getStatus().equals(m.getStatus()) &&\n+                reference.getNetworkUuid().equals(m.getNetworkUuid());\n+    }\n+\n+    @Override\n+    public void describeTo(Description description) {\n+        description.appendValue(reference);\n+    }\n+}"
  },
  {
    "sha": "4180aeede46d06dddd111c5e278f5813cada8f37",
    "filename": "src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMerge.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMerge.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMerge.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMerge.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -0,0 +1,39 @@\n+/*\n+  Copyright (c) 2021, RTE (http://www.rte-france.com)\n+  This Source Code Form is subject to the terms of the Mozilla Public\n+  License, v. 2.0. If a copy of the MPL was not distributed with this\n+  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.gridsuite.merge.orchestrator.server.utils;\n+\n+import org.gridsuite.merge.orchestrator.server.dto.Merge;\n+import org.gridsuite.merge.orchestrator.server.dto.MergeStatus;\n+import org.hamcrest.Description;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+/**\n+ * @author Slimane Amar <slimane.amar at rte-france.com>\n+ */\n+public class MatcherMerge extends TypeSafeMatcher<Merge> {\n+\n+    Merge reference;\n+\n+    public MatcherMerge(String process, ZonedDateTime date, MergeStatus status) {\n+        this.reference = new Merge(process, date, status, List.of());\n+    }\n+\n+    @Override\n+    public boolean matchesSafely(Merge m) {\n+        return reference.getProcess().equals(m.getProcess()) &&\n+                reference.getDate().equals(m.getDate()) &&\n+                reference.getStatus().equals(m.getStatus());\n+    }\n+\n+    @Override\n+    public void describeTo(Description description) {\n+        description.appendValue(reference);\n+    }\n+}"
  },
  {
    "sha": "8ef20125607315794d9977d3450127299a2ba08f",
    "filename": "src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMergeEntity.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/gridsuite/merge-orchestrator-server/blob/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMergeEntity.java",
    "raw_url": "https://github.com/gridsuite/merge-orchestrator-server/raw/4a336cb821823f284b18a682d455c844def9407b/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMergeEntity.java",
    "contents_url": "https://api.github.com/repos/gridsuite/merge-orchestrator-server/contents/src/test/java/org/gridsuite/merge/orchestrator/server/utils/MatcherMergeEntity.java?ref=4a336cb821823f284b18a682d455c844def9407b",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+  Copyright (c) 2021, RTE (http://www.rte-france.com)\n+  This Source Code Form is subject to the terms of the Mozilla Public\n+  License, v. 2.0. If a copy of the MPL was not distributed with this\n+  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.gridsuite.merge.orchestrator.server.utils;\n+\n+import org.gridsuite.merge.orchestrator.server.dto.MergeStatus;\n+import org.gridsuite.merge.orchestrator.server.repositories.MergeEntity;\n+import org.gridsuite.merge.orchestrator.server.repositories.MergeEntityKey;\n+import org.hamcrest.Description;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.time.LocalDateTime;\n+import java.util.Objects;\n+\n+/**\n+ * @author Slimane Amar <slimane.amar at rte-france.com>\n+ */\n+public class MatcherMergeEntity extends TypeSafeMatcher<MergeEntity> {\n+\n+    MergeEntity reference;\n+\n+    public MatcherMergeEntity(String process, LocalDateTime date, MergeStatus status) {\n+        this.reference = new MergeEntity(new MergeEntityKey(process, date), status == null ? null : status.name());\n+    }\n+\n+    @Override\n+    public boolean matchesSafely(MergeEntity m) {\n+        return reference.getKey().getProcess().equals(m.getKey().getProcess()) &&\n+                reference.getKey().getDate().equals(m.getKey().getDate()) &&\n+                Objects.equals(reference.getStatus(), m.getStatus());\n+    }\n+\n+    @Override\n+    public void describeTo(Description description) {\n+        description.appendValue(reference);\n+    }\n+}"
  }
]
