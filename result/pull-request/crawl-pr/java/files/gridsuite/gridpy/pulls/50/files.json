[
  {
    "sha": "6bf4e52aa54a46bf5db9407fc776684067a15650",
    "filename": "cpp/src/bindings.cpp",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/cpp/src/bindings.cpp",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/cpp/src/bindings.cpp",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/cpp/src/bindings.cpp?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -55,6 +55,7 @@ PYBIND11_MODULE(_gridpy, m) {\n             .value(\"LCC_CONVERTER_STATION\", element_type::LCC_CONVERTER_STATION)\n             .value(\"VSC_CONVERTER_STATION\", element_type::VSC_CONVERTER_STATION)\n             .value(\"STATIC_VAR_COMPENSATOR\", element_type::STATIC_VAR_COMPENSATOR)\n+            .value(\"SWITCH\", element_type::SWITCH)\n             .export_values();\n \n     m.def(\"get_network_elements_ids\", &gridpy::getNetworkElementsIds, \"Get network elements ids for a given element type\",\n@@ -362,5 +363,13 @@ PYBIND11_MODULE(_gridpy, m) {\n \n     bindArray<gridpy::SeriesArray>(m, \"SeriesArray\");\n \n+    m.def(\"update_network_elements_with_int_series\", &gridpy::updateNetworkElementsWithIntSeries, \"Update network elements for a given element type with an integer series\",\n+          py::arg(\"network\"), py::arg(\"element_type\"), py::arg(\"series_name\"), py::arg(\"ids\"), py::arg(\"values\"),\n+          py::arg(\"element_count\"));\n+\n+    m.def(\"update_network_elements_with_double_series\", &gridpy::updateNetworkElementsWithDoubleSeries, \"Update network elements for a given element type with a double series\",\n+          py::arg(\"network\"), py::arg(\"element_type\"), py::arg(\"series_name\"), py::arg(\"ids\"), py::arg(\"values\"),\n+          py::arg(\"element_count\"));\n+\n     m.def(\"destroy_object_handle\", &gridpy::destroyObjectHandle, \"Destroy Java object handle\", py::arg(\"object_handle\"));\n }"
  },
  {
    "sha": "ff43b06cfc5e1d1e079f1e288c6872a1cf55aba0",
    "filename": "cpp/src/gridpy.cpp",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/cpp/src/gridpy.cpp",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/cpp/src/gridpy.cpp",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/cpp/src/gridpy.cpp?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -116,6 +116,17 @@ class ToCharPtrPtr : public ToPtr<char*> {\n     }\n };\n \n+class ToIntPtr : public ToPtr<int> {\n+public:\n+    explicit ToIntPtr(const std::vector<int>& ints)\n+            : ToPtr<int>(ints.size())\n+    {\n+        for (int i = 0; i < ints.size(); i++) {\n+            ptr_[i] = ints[i];\n+        }\n+    }\n+};\n+\n class ToDoublePtr : public ToPtr<double> {\n public:\n     explicit ToDoublePtr(const std::vector<double>& doubles)\n@@ -298,6 +309,24 @@ SeriesArray* createNetworkElementsSeriesArray(void* network, element_type elemen\n     return new SeriesArray(handleException<array*>(::createNetworkElementsSeriesArray, guard.thread(), network, elementType));\n }\n \n+void updateNetworkElementsWithIntSeries(void* network, element_type elementType, const std::string& seriesName, const std::vector<std::string>& ids,\n+                                        const std::vector<int>& values, int elementCount) {\n+    GraalVmGuard guard;\n+    ToCharPtrPtr idPtr(ids);\n+    ToIntPtr valuePtr(values);\n+    handleException(::updateNetworkElementsWithIntSeries, guard.thread(), network, elementType, (char *) seriesName.c_str(),\n+                    idPtr.get(), valuePtr.get(), elementCount);\n+}\n+\n+void updateNetworkElementsWithDoubleSeries(void* network, element_type elementType, const std::string& seriesName, const std::vector<std::string>& ids,\n+                                           const std::vector<double>& values, int elementCount) {\n+    GraalVmGuard guard;\n+    ToCharPtrPtr idPtr(ids);\n+    ToDoublePtr valuePtr(values);\n+    handleException(::updateNetworkElementsWithDoubleSeries, guard.thread(), network, elementType, (char *) seriesName.c_str(),\n+                    idPtr.get(), valuePtr.get(), elementCount);\n+}\n+\n void destroyObjectHandle(void* objectHandle) {\n     GraalVmGuard guard;\n     destroyObjectHandle(guard.thread(), objectHandle);"
  },
  {
    "sha": "0ec830ea0cb49af783303250384cee48af011aeb",
    "filename": "cpp/src/gridpy.h",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/cpp/src/gridpy.h",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/cpp/src/gridpy.h",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/cpp/src/gridpy.h?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -146,6 +146,12 @@ matrix* getReferenceFlows(void* sensitivityAnalysisResultContext, const std::str\n \n SeriesArray* createNetworkElementsSeriesArray(void* network, element_type elementType);\n \n+void updateNetworkElementsWithIntSeries(void* network, element_type elementType, const std::string& seriesName, const std::vector<std::string>& ids,\n+                                        const std::vector<int>& values, int elementCount);\n+\n+void updateNetworkElementsWithDoubleSeries(void* network, element_type elementType, const std::string& seriesName, const std::vector<std::string>& ids,\n+                                           const std::vector<double>& values, int elementCount);\n+\n void destroyObjectHandle(void* objectHandle);\n \n }"
  },
  {
    "sha": "7d47094c87de3484fe08e779a15e57f982bf078e",
    "filename": "gridpy/network.py",
    "status": "modified",
    "additions": 26,
    "deletions": 2,
    "changes": 28,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/gridpy/network.py",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/gridpy/network.py",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/gridpy/network.py?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -8,12 +8,15 @@\n from _gridpy import Bus\n from _gridpy import Generator\n from _gridpy import Load\n+from _gridpy import GridPyError\n from _gridpy import ElementType\n from gridpy.util import ObjectHandle\n from typing import List\n from typing import Set\n import pandas as pd\n-\n+from pandas.api.types import is_integer_dtype\n+from pandas.api.types import is_numeric_dtype\n+from pandas.api.types import is_bool_dtype\n \n Bus.__repr__ = lambda self: f\"{self.__class__.__name__}(\"\\\n                             f\"id={self.id!r}\"\\\n@@ -99,7 +102,7 @@ def create_elements_data_frame(self, element_type: _gridpy.ElementType) -> pd.Da\n             elif series.type == 3:  # boolean\n                 series_dict[series.name] = series.boolean_data\n             else:\n-                raise RuntimeError(f'Unsupported series type ${series.type}')\n+                raise GridPyError(f'Unsupported series type ${series.type}')\n         return pd.DataFrame(series_dict, index = index)\n \n     def create_buses_data_frame(self) -> pd.DataFrame:\n@@ -135,6 +138,27 @@ def create_vsc_converter_stations_data_frame(self) -> pd.DataFrame:\n     def create_static_var_compensators_data_frame(self) -> pd.DataFrame:\n         return self.create_elements_data_frame(_gridpy.ElementType.STATIC_VAR_COMPENSATOR)\n \n+    def create_switches_data_frame(self) -> pd.DataFrame:\n+        return self.create_elements_data_frame(_gridpy.ElementType.SWITCH)\n+\n+    def update_elements_with_data_frame(self, element_type: _gridpy.ElementType, df: pd.DataFrame):\n+        for seriesName in df.columns.values:\n+            series = df[seriesName]\n+            if is_integer_dtype(series) or is_bool_dtype(series):\n+                _gridpy.update_network_elements_with_int_series(self.ptr, element_type, seriesName, df.index.values,\n+                                                                series.values, len(series))\n+            elif is_numeric_dtype(series):\n+                _gridpy.update_network_elements_with_double_series(self.ptr, element_type, seriesName, df.index.values,\n+                                                                   series.values, len(series))\n+            else:\n+                raise GridPyError(f'Unsupported series type ${series.dtype}')\n+\n+    def update_switches_with_data_frame(self, df: pd.DataFrame):\n+        return self.update_elements_with_data_frame(_gridpy.ElementType.SWITCH, df)\n+\n+    def update_generators_with_data_frame(self, df: pd.DataFrame):\n+        return self.update_elements_with_data_frame(_gridpy.ElementType.GENERATOR, df)\n+\n \n def create_empty(id: str = \"Default\") -> Network:\n     return Network(_gridpy.create_empty_network(id))"
  },
  {
    "sha": "b562ca17f6b68dad2c7dd8d63f960ad50ca0ce6e",
    "filename": "java/src/main/java/org/gridsuite/gridpy/GridPyApiHeader.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/GridPyApiHeader.java",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/GridPyApiHeader.java",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/java/src/main/java/org/gridsuite/gridpy/GridPyApiHeader.java?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -373,7 +373,8 @@ private GridPyApiHeader() {\n         DANGLING_LINE,\n         LCC_CONVERTER_STATION,\n         VSC_CONVERTER_STATION,\n-        STATIC_VAR_COMPENSATOR;\n+        STATIC_VAR_COMPENSATOR,\n+        SWITCH;\n \n         @CEnumValue\n         public native int getCValue();"
  },
  {
    "sha": "422b30190d336a22a4aee4f4a2681bf461e9bbbb",
    "filename": "java/src/main/java/org/gridsuite/gridpy/GridPyApiLib.java",
    "status": "modified",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/GridPyApiLib.java",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/GridPyApiLib.java",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/java/src/main/java/org/gridsuite/gridpy/GridPyApiLib.java?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -8,6 +8,7 @@\n \n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.ieeecdf.converter.IeeeCdfNetworkFactory;\n import com.powsybl.iidm.export.Exporters;\n import com.powsybl.iidm.import_.Importers;\n@@ -33,6 +34,7 @@\n import org.graalvm.nativeimage.c.type.CCharPointer;\n import org.graalvm.nativeimage.c.type.CCharPointerPointer;\n import org.graalvm.nativeimage.c.type.CDoublePointer;\n+import org.graalvm.nativeimage.c.type.CIntPointer;\n import org.graalvm.word.WordBase;\n import org.graalvm.word.WordFactory;\n import org.slf4j.LoggerFactory;\n@@ -694,6 +696,14 @@ private static String getBusId(Terminal t) {\n                             .addStringSeries(\"bus_id\", svc -> getBusId(svc.getTerminal())))\n                             .build();\n \n+                case SWITCH:\n+                    List<Switch> switches = network.getSwitchStream().collect(Collectors.toList());\n+                    return addProperties(new SeriesPointerArrayBuilder<>(switches)\n+                            .addStringSeries(\"id\", Switch::getId)\n+                            .addEnumSeries(\"kind\", Switch::getKind)\n+                            .addBooleanSeries(\"open\", Switch::isOpen))\n+                            .build();\n+\n                 default:\n                     throw new UnsupportedOperationException(\"Element type not supported: \" + elementType);\n             }\n@@ -710,6 +720,76 @@ public static void freeNetworkElementsSeriesArray(IsolateThread thread, ArrayPoi\n         freeArrayPointer(seriesPtrArrayPtr);\n     }\n \n+    @CEntryPoint(name = \"updateNetworkElementsWithIntSeries\")\n+    public static void updateNetworkElementsWithIntSeries(IsolateThread thread, ObjectHandle networkHandle,\n+                                                          ElementType elementType, CCharPointer seriesNamePtr,\n+                                                          CCharPointerPointer elementIdPtrPtr, CIntPointer valuePtr,\n+                                                          int elementCount, ExceptionHandlerPointer exceptionHandlerPtr) {\n+        doCatch(exceptionHandlerPtr, () -> {\n+            Network network = ObjectHandles.getGlobal().get(networkHandle);\n+            String seriesName = CTypeUtil.toString(seriesNamePtr);\n+            for (int i = 0; i < elementCount; i++) {\n+                CCharPointer elementIdPtr = elementIdPtrPtr.read(i);\n+                String id = CTypeUtil.toString(elementIdPtr);\n+                int value = valuePtr.read(i);\n+                switch (elementType) {\n+                    case SWITCH:\n+                        Switch sw = network.getSwitch(id);\n+                        if (sw == null) {\n+                            throw new PowsyblException(\"Switch '\" + id + \"' not found\");\n+                        }\n+                        switch (seriesName) {\n+                            case \"open\":\n+                                sw.setOpen(value == 1);\n+                                break;\n+\n+                            default:\n+                                throw new UnsupportedOperationException(\"Series name not supported for switch elements: \" + seriesName);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new UnsupportedOperationException(\"Element type not supported: \" + elementType);\n+                }\n+            }\n+        });\n+    }\n+\n+    @CEntryPoint(name = \"updateNetworkElementsWithDoubleSeries\")\n+    public static void updateNetworkElementsWithDoubleSeries(IsolateThread thread, ObjectHandle networkHandle,\n+                                                             ElementType elementType, CCharPointer seriesNamePtr,\n+                                                             CCharPointerPointer elementIdPtrPtr, CDoublePointer valuePtr,\n+                                                             int elementCount, ExceptionHandlerPointer exceptionHandlerPtr) {\n+        doCatch(exceptionHandlerPtr, () -> {\n+            Network network = ObjectHandles.getGlobal().get(networkHandle);\n+            String seriesName = CTypeUtil.toString(seriesNamePtr);\n+            for (int i = 0; i < elementCount; i++) {\n+                CCharPointer elementIdPtr = elementIdPtrPtr.read(i);\n+                String id = CTypeUtil.toString(elementIdPtr);\n+                double value = valuePtr.read(i);\n+                switch (elementType) {\n+                    case GENERATOR:\n+                        Generator g = network.getGenerator(id);\n+                        if (g == null) {\n+                            throw new PowsyblException(\"Generator '\" + id + \"' not found\");\n+                        }\n+                        switch (seriesName) {\n+                            case \"target_p\":\n+                                g.setTargetP(value);\n+                                break;\n+\n+                            default:\n+                                throw new UnsupportedOperationException(\"Series name not supported for switch elements: \" + seriesName);\n+                        }\n+                        break;\n+\n+                    default:\n+                        throw new UnsupportedOperationException(\"Element type not supported: \" + elementType);\n+                }\n+            }\n+        });\n+    }\n+\n     @CEntryPoint(name = \"destroyObjectHandle\")\n     public static void destroyObjectHandle(IsolateThread thread, ObjectHandle objectHandle) {\n         ObjectHandles.getGlobal().destroy(objectHandle);"
  },
  {
    "sha": "c878dcc510b108799f6ff8cf78162f873cb07f8e",
    "filename": "java/src/main/java/org/gridsuite/gridpy/SeriesPointerArrayBuilder.java",
    "status": "modified",
    "additions": 3,
    "deletions": 8,
    "changes": 11,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/SeriesPointerArrayBuilder.java",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/SeriesPointerArrayBuilder.java",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/java/src/main/java/org/gridsuite/gridpy/SeriesPointerArrayBuilder.java?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -26,11 +26,6 @@\n  */\n class SeriesPointerArrayBuilder<T> {\n \n-    private static final int STRING_SERIES_TYPE = 0;\n-    private static final int DOUBLE_SERIES_TYPE = 1;\n-    private static final int INT_SERIES_TYPE = 2;\n-    private static final int BOOLEAN_SERIES_TYPE = 3;\n-\n     interface Series<T> {\n \n         String getName();\n@@ -65,7 +60,7 @@ public String getName() {\n \n         @Override\n         public int getType() {\n-            return DOUBLE_SERIES_TYPE;\n+            return SeriesType.DOUBLE.ordinal();\n         }\n \n         public PointerBase createDataPtr(List<T> elements) {\n@@ -89,7 +84,7 @@ public PointerBase createDataPtr(List<T> elements) {\n \n         @Override\n         public int getType() {\n-            return STRING_SERIES_TYPE;\n+            return SeriesType.STRING.ordinal();\n         }\n \n         @Override\n@@ -117,7 +112,7 @@ public PointerBase createDataPtr(List<T> elements) {\n \n         @Override\n         public int getType() {\n-            return bool ? BOOLEAN_SERIES_TYPE : INT_SERIES_TYPE;\n+            return bool ? SeriesType.BOOLEAN.ordinal() : SeriesType.INT.ordinal();\n         }\n \n         @Override"
  },
  {
    "sha": "73d25d01818fd9d8f6c177c4112f06955fe7356e",
    "filename": "java/src/main/java/org/gridsuite/gridpy/SeriesType.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/SeriesType.java",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/java/org/gridsuite/gridpy/SeriesType.java",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/java/src/main/java/org/gridsuite/gridpy/SeriesType.java?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -0,0 +1,17 @@\n+/**\n+ * Copyright (c) 2021, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.gridsuite.gridpy;\n+\n+/**\n+ * @author Geoffroy Jamgotchian {@literal <geoffroy.jamgotchian at rte-france.com>}\n+ */\n+public enum SeriesType {\n+    STRING,\n+    DOUBLE,\n+    INT,\n+    BOOLEAN\n+}"
  },
  {
    "sha": "49651528b394c73459ba242a6ef52dcb9081cd56",
    "filename": "java/src/main/resources/gridpy-api.h",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/resources/gridpy-api.h",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/java/src/main/resources/gridpy-api.h",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/java/src/main/resources/gridpy-api.h?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -83,6 +83,7 @@ typedef enum {\n     LCC_CONVERTER_STATION,\n     VSC_CONVERTER_STATION,\n     STATIC_VAR_COMPENSATOR,\n+    SWITCH,\n } element_type;\n \n typedef struct matrix_struct {"
  },
  {
    "sha": "42a71b0f05db241508ed58e719a243b834b3bb1a",
    "filename": "tests/test.py",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/gridsuite/gridpy/blob/e63388b9cfa8b19e896429ae6b2b8b854491a680/tests/test.py",
    "raw_url": "https://github.com/gridsuite/gridpy/raw/e63388b9cfa8b19e896429ae6b2b8b854491a680/tests/test.py",
    "contents_url": "https://api.github.com/repos/gridsuite/gridpy/contents/tests/test.py?ref=e63388b9cfa8b19e896429ae6b2b8b854491a680",
    "patch": "@@ -11,7 +11,7 @@\n import gridpy.security_analysis\n import gridpy.sensitivity_analysis\n import gridpy as gp\n-\n+import pandas as pd\n \n class GridPyTestCase(unittest.TestCase):\n     @staticmethod\n@@ -98,6 +98,15 @@ def test_create_generators_data_frame(self):\n         self.assertEqual('OTHER', df['energy_source']['GEN'])\n         self.assertEqual(607, df['target_p']['GEN'])\n \n+    def test_update_generators_data_frame(self):\n+        n = gp.network.create_eurostag_tutorial_example1_network()\n+        df = n.create_generators_data_frame()\n+        self.assertEqual(607, df['target_p']['GEN'])\n+        df2 = pd.DataFrame(data=[608.0], columns=['target_p'], index=['GEN'])\n+        n.update_generators_with_data_frame(df2)\n+        df3 = n.create_generators_data_frame()\n+        self.assertEqual(608, df3['target_p']['GEN'])\n+\n     def test_sensitivity_analysis(self):\n         n = gp.network.create_ieee14()\n         sa = gp.sensitivity_analysis.create()"
  }
]
