[
  {
    "sha": "74403e397427b637e0067f0ed8449e28cad18b15",
    "filename": "_build-and-test-all.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/_build-and-test-all.sh",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/_build-and-test-all.sh",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/_build-and-test-all.sh?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -4,15 +4,11 @@ set -e\n \n docker=\"./gradlew ${DATABASE?}${MODE?}Compose\"\n \n-. ./set-env-${DATABASE?}.sh\n-\n ./gradlew testClasses assemble\n \n ${docker}Down\n ${docker}Up\n \n-./wait-for-services.sh $DOCKER_HOST_IP \"8099\"\n-\n ./gradlew build\n \n ${docker}Down"
  },
  {
    "sha": "087777026a512ff5d8888ab81da8e82872af2046",
    "filename": "_set-env.sh",
    "status": "removed",
    "additions": 0,
    "deletions": 16,
    "changes": 16,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/21f6d238ac0ad013e08faa62d6bb084abfc404c9/_set-env.sh",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/21f6d238ac0ad013e08faa62d6bb084abfc404c9/_set-env.sh",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/_set-env.sh?ref=21f6d238ac0ad013e08faa62d6bb084abfc404c9",
    "patch": "@@ -1,16 +0,0 @@\n-if [ -z \"$DOCKER_HOST_IP\" ] ; then\n-    if [ -z \"$DOCKER_HOST\" ] ; then\n-      export DOCKER_HOST_IP=`hostname`\n-    else\n-      echo using ${DOCKER_HOST?}\n-      XX=${DOCKER_HOST%\\:*}\n-      export DOCKER_HOST_IP=${XX#tcp\\:\\/\\/}\n-    fi\n-fi\n-\n-echo DOCKER_HOST_IP is $DOCKER_HOST_IP\n-\n-\n-export EVENTUATE_HTTP_PROXY_ZOOKEEPER_CONNECTION_STRING=$DOCKER_HOST_IP:2181\n-export EVENTUATE_HTTP_PROXY_BASE_URL=\"http://$DOCKER_HOST_IP:8098/subscriptions\"\n-export EVENTUATE_HTTP_CONSUMER_BASE_URL=\"http://$DOCKER_HOST_IP:8080/messages\""
  },
  {
    "sha": "c3fc5b51b094af80cb9f0b6d23521f0d35b23a7b",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 11,
    "deletions": 46,
    "changes": 57,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/build.gradle",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/build.gradle",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/build.gradle?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -2,41 +2,28 @@ buildscript {\n     repositories {\n         jcenter()\n         mavenCentral()\n+        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }\n     }\n     dependencies {\n         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'\n         classpath \"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\"\n         classpath \"com.avast.gradle:gradle-docker-compose-plugin:0.9.2\"\n+        classpath \"io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion\"\n     }\n }\n \n apply plugin: 'docker-compose'\n+apply plugin: \"io.eventuate.plugins.gradle.publish.EventuatePublish\"\n+apply plugin: \"io.eventuate.plugins.gradle.publish.EventuatePublishDockerImages\"\n \n allprojects {\n     group = \"io.eventuate.messaging.http\"\n }\n \n subprojects {\n-\n-    apply plugin: \"java\"\n-    apply plugin: 'maven'\n-    apply plugin: 'com.jfrog.bintray'\n-\n     sourceCompatibility = 1.8\n     targetCompatibility = 1.8\n \n-    bintray {\n-        user = System.getenv('BINTRAY_USER')\n-        key = System.getenv('BINTRAY_KEY')\n-        configurations = ['archives']\n-        pkg {\n-            repo = \"eventuate-maven-$bintrayRepoType\"\n-            name = 'eventuate-tram-messaging-http'\n-            licenses = ['Apache-2.0']\n-            vcsUrl = 'https://github.com/eventuate-tram/eventuate-tram-messaging-http'\n-        }\n-    }\n-\n     repositories {\n         mavenCentral()\n         jcenter()\n@@ -45,44 +32,22 @@ subprojects {\n         }\n         eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }\n     }\n-\n-    configurations {\n-        deployerJars\n-    }\n-\n-    dependencies {\n-        deployerJars 'org.springframework.build:aws-maven:5.0.0.RELEASE'\n-    }\n-\n-    uploadArchives {\n-        repositories {\n-            mavenDeployer {\n-                configuration = configurations.deployerJars\n-                repository(url: deployUrl) {\n-                    authentication(userName: System.getenv('S3_REPO_AWS_ACCESS_KEY'), password: System.getenv('S3_REPO_AWS_SECRET_ACCESS_KEY'))\n-                }\n-                pom.project {\n-                    licenses {\n-                        license {\n-                            name 'The Apache Software License, Version 2.0'\n-                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n-                            distribution 'repo'\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n }\n \n dockerCompose {\n     environment.put \"EVENTUATE_COMMON_VERSION\", eventuateCommonImageVersion\n     environment.put \"EVENTUATE_CDC_VERSION\", eventuateCdcImageVersion\n     environment.put \"PROXY_SERVICE_VERSION\", version\n \n+    environment.put \"DOCKER_IMAGE_TAG\", dockerImageTag\n+\n     mysqlbinlog {\n         projectName = null\n         useComposeFiles = [\"docker-compose-mysql-binlog.yml\"]\n     }\n+\n+    publish {\n+        projectName = null\n+        useComposeFiles = [\"docker-compose-mysql-binlog.yml\"]\n+    }\n }"
  },
  {
    "sha": "f61752742b8b958925bb3938f79e3feea48582bf",
    "filename": "deploy-artifacts.sh",
    "status": "modified",
    "additions": 2,
    "deletions": 36,
    "changes": 38,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/deploy-artifacts.sh",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/deploy-artifacts.sh",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/deploy-artifacts.sh?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -1,41 +1,7 @@\n #! /bin/bash -e\n \n-BRANCH=$(git rev-parse --abbrev-ref HEAD)\n-\n-if [  $BRANCH == \"master\" ] ; then\n-  VERSION=$(sed -e '/^version=/!d' -e 's/^version=\\(.*\\)-SNAPSHOT$/\\1.BUILD-SNAPSHOT/' < gradle.properties)\n-  echo master: publishing $VERSION\n-  ./gradlew -P version=$VERSION -P deployUrl=${S3_REPO_DEPLOY_URL} uploadArchives\n-else\n-\n-  if ! [[  $BRANCH =~ ^[0-9]+ ]] ; then\n-    echo Not release $BRANCH - no PUSH\n-    exit 0\n-  elif [[  $BRANCH =~ RELEASE$ ]] ; then\n-    BINTRAY_REPO_TYPE=release\n-  elif [[  $BRANCH =~ M[0-9]+$ ]] ; then\n-      BINTRAY_REPO_TYPE=milestone\n-  elif [[  $BRANCH =~ RC[0-9]+$ ]] ; then\n-      BINTRAY_REPO_TYPE=rc\n-  else\n-    echo cannot figure out bintray for this branch $BRANCH\n-    exit -1\n-  fi\n-\n-  echo BINTRAY_REPO_TYPE=${BINTRAY_REPO_TYPE}\n-\n-  VERSION=$BRANCH\n-\n-  $PREFIX ./gradlew -P version=${VERSION} \\\n-    -P bintrayRepoType=${BINTRAY_REPO_TYPE} \\\n-    -P deployUrl=https://dl.bintray.com/eventuateio-oss/eventuate-maven-${BINTRAY_REPO_TYPE} \\\n-    testClasses assemble bintrayUpload\n-\n-fi\n-\n docker login -u ${DOCKER_USER_ID?} -p ${DOCKER_PASSWORD?}\n \n-$PREFIX ./gradlew -P version=${VERSION} assemble mysqlbinlogComposeBuild\n-\n-$PREFIX ./gradlew -P version=${VERSION} mysqlbinlogComposePush\n+./gradlew  publishEventuateArtifacts\n \n+./gradlew publishEventuateDockerImages"
  },
  {
    "sha": "a97ed017af98e67ebeb774b85eb0abb030d29977",
    "filename": "docker-compose-mysql-binlog.yml",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/docker-compose-mysql-binlog.yml",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/docker-compose-mysql-binlog.yml",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/docker-compose-mysql-binlog.yml?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -32,15 +32,15 @@ services:\n \n   proxy:\n     build: ./eventuate-tram-messaging-proxy-service\n-    image: eventuateio/eventuate-tram-http-proxy-service:$PROXY_SERVICE_VERSION\n+    image: eventuateio/eventuate-tram-http-proxy-service:$DOCKER_IMAGE_TAG\n     ports:\n       - \"8098:8080\"\n     depends_on:\n       - mysql\n       - kafka\n       - zookeeper\n     environment:\n-      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n+      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n       EVENTUATE_HTTP_PROXY_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n       SPRING_DATASOURCE_URL: jdbc:mysql://mysql/eventuate\n       SPRING_DATASOURCE_USERNAME: mysqluser\n@@ -50,22 +50,21 @@ services:\n \n   proxy-follower:\n     build: ./eventuate-tram-messaging-proxy-service\n-    image: eventuateio/eventuate-tram-http-proxy-service:$PROXY_SERVICE_VERSION\n     ports:\n       - \"8097:8080\"\n     depends_on:\n       - mysql\n       - kafka\n       - zookeeper\n     environment:\n-      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n+      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n       EVENTUATE_HTTP_PROXY_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n       SPRING_DATASOURCE_URL: jdbc:mysql://mysql/eventuate\n       SPRING_DATASOURCE_USERNAME: mysqluser\n       SPRING_DATASOURCE_PASSWORD: mysqlpw\n       SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n \n-  cdcservice:\n+  cdc-service:\n     image: eventuateio/eventuate-cdc-service:$EVENTUATE_CDC_VERSION\n     ports:\n       - \"8099:8080\"\n@@ -78,11 +77,12 @@ services:\n       SPRING_DATASOURCE_USERNAME: mysqluser\n       SPRING_DATASOURCE_PASSWORD: mysqlpw\n       SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n-      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n+      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n       EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n       EVENTUATELOCAL_CDC_DB_USER_NAME: root\n       EVENTUATELOCAL_CDC_DB_PASSWORD: rootpassword\n       EVENTUATELOCAL_CDC_READER_NAME: MySqlReader\n       EVENTUATELOCAL_CDC_OFFSET_STORE_KEY: MySqlBinlog\n       EVENTUATELOCAL_CDC_MYSQL_BINLOG_CLIENT_UNIQUE_ID: 1234567890\n       EVENTUATELOCAL_CDC_READ_OLD_DEBEZIUM_DB_OFFSET_STORAGE_TOPIC: \"false\"\n+      EVENTUATE_OUTBOX_ID: 1\n\\ No newline at end of file"
  },
  {
    "sha": "3024619c7bbf7fde3e083c736328266128281a1d",
    "filename": "eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/EventuateHttpHeaders.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/EventuateHttpHeaders.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/EventuateHttpHeaders.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/EventuateHttpHeaders.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,7 @@\n+package io.eventuate.tram.consumer.http.common;\n+\n+public class EventuateHttpHeaders {\n+  public static final String SUBSCRIBER_ID = \"EVENTUATE_SUBSCRIBER_ID\";\n+  public static final String MESSAGE_ID = \"EVENTUATE_MESSAGE_ID\";\n+  public static final String COMMAND_REPLY_HEADERS = \"EVENTUATE_COMMAND_REPLY_HEADERS\";\n+}"
  },
  {
    "sha": "c87d4e85ad91bff72aea0c17b8316308f79046c9",
    "filename": "eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/SubscribeRequest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/SubscribeRequest.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/SubscribeRequest.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-consumer-http-common/src/main/java/io/eventuate/tram/consumer/http/common/SubscribeRequest.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -13,7 +13,10 @@\n   public SubscribeRequest() {\n   }\n \n-  public SubscribeRequest(String subscriberId, Set<String> channels, String callbackUrl) {\n+  public SubscribeRequest(String subscriberId,\n+                          Set<String> channels,\n+                          String callbackUrl) {\n+\n     this.subscriberId = subscriberId;\n     this.channels = channels;\n     this.callbackUrl = callbackUrl;"
  },
  {
    "sha": "f0c7b6c719069ab1bf4b2f353b406a98c355796b",
    "filename": "eventuate-tram-consumer-http-micronaut/src/test/java/io/eventuate/tram/consumer/http/HttpConsumerTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-micronaut/src/test/java/io/eventuate/tram/consumer/http/HttpConsumerTest.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-micronaut/src/test/java/io/eventuate/tram/consumer/http/HttpConsumerTest.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-consumer-http-micronaut/src/test/java/io/eventuate/tram/consumer/http/HttpConsumerTest.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -176,11 +176,12 @@ private boolean isProxyAvailable() {\n   private void sendMessage() {\n     Message message = MessageBuilder\n             .withPayload(payload)\n-            .withHeader(Message.ID, id)\n             .withHeader(Message.DESTINATION, channel)\n             .build();\n \n     messageProducerImplementation.send(message);\n+\n+    id = message.getId();\n   }\n \n   private String generateId() {"
  },
  {
    "sha": "c987282ec276b0ca754cb12ce8a52fcf039200c5",
    "filename": "eventuate-tram-consumer-http-micronaut/src/test/resources/application.yml",
    "status": "modified",
    "additions": 13,
    "deletions": 4,
    "changes": 17,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-micronaut/src/test/resources/application.yml",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-consumer-http-micronaut/src/test/resources/application.yml",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-consumer-http-micronaut/src/test/resources/application.yml?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -2,11 +2,20 @@ jackson:\n   bean-introspection-module: true\n datasources:\n   default:\n-    url: ${DATASOURCE_URL}\n-    username: ${DATASOURCE_USERNAME}\n-    password: ${DATASOURCE_PASSWORD}\n-    driverClassName: ${DATASOURCE_DRIVERCLASSNAME}\n+    url: jdbc:mysql://${DOCKER_HOST_IP:localhost}/eventuate\n+    username: mysqluser\n+    password: mysqlpw\n+    driverClassName: com.mysql.jdbc.Driver\n micronaut:\n     server:\n         port: 8080\n \n+eventuate:\n+  http:\n+    consumer:\n+      base:\n+        url: http://${DOCKER_HOST_IP:localhost}:8080/messages\n+    proxy:\n+      base:\n+        url: http://${DOCKER_HOST_IP:localhost}:8098/subscriptions\n+"
  },
  {
    "sha": "f80690a3ea2b0c5a0f44ebbf32ce191642a1a9c0",
    "filename": "eventuate-tram-http-spring-consumer/build.gradle",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/build.gradle",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/build.gradle",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-http-spring-consumer/build.gradle?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,13 @@\n+apply plugin: \"io.spring.dependency-management\"\n+\n+dependencies {\n+    compile (project(\":eventuate-tram-consumer-http-common\")) {\n+        exclude group: \"io.micronaut\"\n+    }\n+\n+    compile \"io.eventuate.tram.core:eventuate-tram-spring-consumer-jdbc:$eventuateTramVersion\"\n+\n+    compile \"org.springframework.boot:spring-boot-starter-web:$springBootVersion\"\n+    compile \"org.springframework.boot:spring-boot-starter-aop:$springBootVersion\"\n+    compile \"org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion\"\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2865bf192cade4d59d90f59012aa3fc79138b951",
    "filename": "eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandler.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandler.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandler.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandler.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,8 @@\n+package io.eventuate.tram.http.spring.consumer.duplicatedetection;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface IdempotentHandler {\n+}"
  },
  {
    "sha": "534a62158091e3e1fc03736609875cdd28ebabf1",
    "filename": "eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerAspect.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerAspect.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerAspect.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerAspect.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,44 @@\n+package io.eventuate.tram.http.spring.consumer.duplicatedetection;\n+\n+import io.eventuate.tram.consumer.common.DuplicateMessageDetector;\n+import io.eventuate.tram.consumer.http.common.EventuateHttpHeaders;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.springframework.transaction.support.TransactionTemplate;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+@Aspect\n+public class IdempotentHandlerAspect {\n+  private TransactionTemplate transactionTemplate;\n+  private DuplicateMessageDetector duplicateMessageDetector;\n+\n+  public IdempotentHandlerAspect(TransactionTemplate transactionTemplate, DuplicateMessageDetector duplicateMessageDetector) {\n+    this.transactionTemplate = transactionTemplate;\n+    this.duplicateMessageDetector = duplicateMessageDetector;\n+  }\n+\n+  @Around(\"@annotation(io.eventuate.tram.http.spring.consumer.duplicatedetection.IdempotentHandler)\")\n+  public Object check(ProceedingJoinPoint proceedingJoinPoint) {\n+    return transactionTemplate.execute(status -> {\n+      try {\n+        HttpServletRequest request =\n+                ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n+\n+        String subscriberId = request.getHeader(EventuateHttpHeaders.SUBSCRIBER_ID);\n+        String messageId = request.getHeader(EventuateHttpHeaders.MESSAGE_ID);\n+\n+        if (messageId == null || !duplicateMessageDetector.isDuplicate(subscriberId, messageId)) {\n+          return proceedingJoinPoint.proceed();\n+        }\n+\n+        return null;\n+      } catch (Throwable t) {\n+        throw new RuntimeException(t);\n+      }\n+    });\n+  }\n+}"
  },
  {
    "sha": "529b5e9fb7f2d6447377a1cdcc67651b79d13e60",
    "filename": "eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerConfiguration.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerConfiguration.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerConfiguration.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-http-spring-consumer/src/main/java/io/eventuate/tram/http/spring/consumer/duplicatedetection/IdempotentHandlerConfiguration.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,15 @@\n+package io.eventuate.tram.http.spring.consumer.duplicatedetection;\n+\n+import io.eventuate.tram.consumer.common.DuplicateMessageDetector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+@Configuration\n+public class IdempotentHandlerConfiguration {\n+  @Bean\n+  public IdempotentHandlerAspect duplicatePublishingAspect(TransactionTemplate transactionTemplate,\n+                                                           DuplicateMessageDetector duplicateMessageDetector) {\n+    return new IdempotentHandlerAspect(transactionTemplate, duplicateMessageDetector);\n+  }\n+}"
  },
  {
    "sha": "a30f57fb8ef95064cb9f95caad28b2182f79e0bb",
    "filename": "eventuate-tram-messaging-proxy-service/build.gradle",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/build.gradle",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/build.gradle",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/build.gradle?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -6,17 +6,30 @@ dependencies {\n         exclude group: \"io.micronaut\"\n     }\n \n+\n     compile \"io.eventuate.tram.core:eventuate-tram-spring-consumer-jdbc:$eventuateTramVersion\"\n     compile \"io.eventuate.tram.core:eventuate-tram-spring-consumer-kafka:$eventuateTramVersion\"\n+    compile \"io.eventuate.tram.core:eventuate-tram-events:$eventuateTramVersion\"\n+    compile \"io.eventuate.tram.core:eventuate-tram-commands:$eventuateTramVersion\"\n \n     compile \"org.springframework.boot:spring-boot-starter\"\n     compile \"org.springframework.boot:spring-boot-starter-actuator\"\n     compile \"org.springframework.boot:spring-boot-starter-web\"\n+    compile \"org.springframework.boot:spring-boot-starter-aop\"\n \n     compile('org.apache.curator:curator-recipes:4.2.0')\n \n+    testCompile project(\":eventuate-tram-http-spring-consumer\")\n+\n     testCompile \"junit:junit:4.12\"\n     testCompile \"org.springframework.boot:spring-boot-starter-test\"\n     testCompile \"io.eventuate.util:eventuate-util-test:$eventuateUtilVersion\"\n+\n+    testCompile \"io.eventuate.tram.core:eventuate-tram-spring-producer-jdbc:$eventuateTramVersion\"\n+    testCompile \"io.eventuate.tram.core:eventuate-tram-spring-events-publisher:$eventuateTramVersion\"\n+    testCompile \"io.eventuate.tram.core:eventuate-tram-spring-commands:$eventuateTramVersion\"\n }\n \n+test {\n+    forkEvery 1\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1fa3874faddf6b70366cf6158806c883795a91e7",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/CommandSubscriptionData.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/CommandSubscriptionData.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/CommandSubscriptionData.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/CommandSubscriptionData.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,40 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+public class CommandSubscriptionData {\n+  private String channel;\n+  private String resource;\n+  private String baseUrl;\n+  private String commands;\n+\n+  public String getChannel() {\n+    return channel;\n+  }\n+\n+  public void setChannel(String channel) {\n+    this.channel = channel;\n+  }\n+\n+  public String getResource() {\n+    return resource;\n+  }\n+\n+  public void setResource(String resource) {\n+    this.resource = resource;\n+  }\n+\n+  public String getBaseUrl() {\n+    return baseUrl;\n+  }\n+\n+  public void setBaseUrl(String baseUrl) {\n+    this.baseUrl = baseUrl;\n+  }\n+\n+  public String getCommands() {\n+    return commands;\n+  }\n+\n+  public void setCommands(String commands) {\n+    this.commands = commands;\n+  }\n+}"
  },
  {
    "sha": "ba7451c646e136d49ca8847886b4aaab9f9ca1c6",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventSubscriptionData.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventSubscriptionData.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventSubscriptionData.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventSubscriptionData.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,31 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+public class EventSubscriptionData {\n+  private String aggregate;\n+  private String events;\n+  private String baseUrl;\n+\n+  public String getAggregate() {\n+    return aggregate;\n+  }\n+\n+  public void setAggregate(String aggregate) {\n+    this.aggregate = aggregate;\n+  }\n+\n+  public String getEvents() {\n+    return events;\n+  }\n+\n+  public void setEvents(String events) {\n+    this.events = events;\n+  }\n+\n+  public String getBaseUrl() {\n+    return baseUrl;\n+  }\n+\n+  public void setBaseUrl(String baseUrl) {\n+    this.baseUrl = baseUrl;\n+  }\n+}"
  },
  {
    "sha": "b48347a99168834880f8f215fdd40ed39995b9ce",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateMessageSubscriberConfiguration.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateMessageSubscriberConfiguration.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateMessageSubscriberConfiguration.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateMessageSubscriberConfiguration.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,20 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+import io.eventuate.tram.messaging.proxy.service.ProxyConfiguration;\n+import io.eventuate.tram.messaging.proxy.service.SubscriptionService;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+@Configuration\n+@EnableConfigurationProperties(EventuateSubscriptionProperties.class)\n+@Import(ProxyConfiguration.class)\n+public class EventuateMessageSubscriberConfiguration {\n+\n+  @Bean\n+  public EventuateTramHttpMessageSubscriptionInitializer eventuateTramRestMessageSubscriptionInitializer(SubscriptionService subscriptionService,\n+                                                                                                         EventuateSubscriptionProperties eventuateSubscriptionProperties) {\n+    return new EventuateTramHttpMessageSubscriptionInitializer(eventuateSubscriptionProperties, subscriptionService);\n+  }\n+}"
  },
  {
    "sha": "39b6445e4c1475a418b4a8098464e15fd7dfc041",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionProperties.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionProperties.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionProperties.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionProperties.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,46 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+@ConfigurationProperties(prefix = \"eventuate.subscription\")\n+public class EventuateSubscriptionProperties {\n+  private Map<String, ReplySubscriptionData> reply = Collections.emptyMap();\n+  private Map<String, CommandSubscriptionData> command = Collections.emptyMap();\n+  private Map<String, MessageSubscriptionData> message = Collections.emptyMap();\n+  private Map<String, EventSubscriptionData> event = Collections.emptyMap();\n+\n+  public Map<String, ReplySubscriptionData> getReply() {\n+    return reply;\n+  }\n+\n+  public void setReply(Map<String, ReplySubscriptionData> reply) {\n+    this.reply = reply;\n+  }\n+\n+  public Map<String, CommandSubscriptionData> getCommand() {\n+    return command;\n+  }\n+\n+  public void setCommand(Map<String, CommandSubscriptionData> command) {\n+    this.command = command;\n+  }\n+\n+  public Map<String, MessageSubscriptionData> getMessage() {\n+    return message;\n+  }\n+\n+  public void setMessage(Map<String, MessageSubscriptionData> message) {\n+    this.message = message;\n+  }\n+\n+  public Map<String, EventSubscriptionData> getEvent() {\n+    return event;\n+  }\n+\n+  public void setEvent(Map<String, EventSubscriptionData> event) {\n+    this.event = event;\n+  }\n+}"
  },
  {
    "sha": "647350ca1ec79c542669ea163acd1349cd316c16",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateTramHttpMessageSubscriptionInitializer.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateTramHttpMessageSubscriptionInitializer.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateTramHttpMessageSubscriptionInitializer.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/EventuateTramHttpMessageSubscriptionInitializer.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,79 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+import io.eventuate.tram.messaging.proxy.service.SubscriptionService;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventuateTramHttpMessageSubscriptionInitializer {\n+  private EventuateSubscriptionProperties eventuateSubscriptionProperties;\n+  private SubscriptionService subscriptionService;\n+\n+  public EventuateTramHttpMessageSubscriptionInitializer(EventuateSubscriptionProperties eventuateSubscriptionProperties,\n+                                                         SubscriptionService subscriptionService) {\n+\n+    this.eventuateSubscriptionProperties = eventuateSubscriptionProperties;\n+    this.subscriptionService = subscriptionService;\n+  }\n+\n+  @PostConstruct\n+  public void subscribe() {\n+    subscribeToMessages();\n+    subscribeToEvents();\n+    subscribeToCommands();\n+    subscribeToReplies();\n+  }\n+\n+  private void subscribeToMessages() {\n+    eventuateSubscriptionProperties.getMessage().keySet().forEach(subscriberId -> {\n+      MessageSubscriptionData messageSubscriptionData = eventuateSubscriptionProperties.getMessage().get(subscriberId);\n+\n+      subscriptionService.subscribeToMessage(subscriberId,\n+              stringToSet(messageSubscriptionData.getChannels()),\n+              messageSubscriptionData.getBaseUrl(),\n+              subscriberId);\n+    });\n+  }\n+\n+  private void subscribeToEvents() {\n+    eventuateSubscriptionProperties.getEvent().keySet().forEach(subscriberId -> {\n+      EventSubscriptionData eventSubscriptionData = eventuateSubscriptionProperties.getEvent().get(subscriberId);\n+\n+      subscriptionService.subscribeToEvent(subscriberId,\n+              eventSubscriptionData.getAggregate(),\n+              stringToSet(eventSubscriptionData.getEvents()),\n+              eventSubscriptionData.getBaseUrl());\n+    });\n+  }\n+\n+  private void subscribeToCommands() {\n+    eventuateSubscriptionProperties.getCommand().keySet().forEach(dispatcherId -> {\n+      CommandSubscriptionData commandSubscriptionData = eventuateSubscriptionProperties.getCommand().get(dispatcherId);\n+\n+      subscriptionService.subscribeToCommand(dispatcherId,\n+              commandSubscriptionData.getChannel(),\n+              Optional.ofNullable(commandSubscriptionData.getResource()),\n+              stringToSet(commandSubscriptionData.getCommands()),\n+              commandSubscriptionData.getBaseUrl());\n+    });\n+  }\n+\n+  private void subscribeToReplies() {\n+    eventuateSubscriptionProperties.getReply().keySet().forEach(subscriberId -> {\n+      ReplySubscriptionData replySubscriptionData = eventuateSubscriptionProperties.getReply().get(subscriberId);\n+\n+      subscriptionService.subscribeToReply(subscriberId,\n+              replySubscriptionData.getReplyChannel(),\n+              Optional.ofNullable(replySubscriptionData.getResource()),\n+              stringToSet(replySubscriptionData.getCommands()),\n+              replySubscriptionData.getBaseUrl());\n+    });\n+  }\n+\n+  private Set<String> stringToSet(String value) {\n+    return Arrays.stream(value.split(\",\")).collect(Collectors.toSet());\n+  }\n+}"
  },
  {
    "sha": "833f36e6cbe35a384252c1a48d49beed30a1ea18",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/MessageSubscriptionData.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/MessageSubscriptionData.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/MessageSubscriptionData.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/MessageSubscriptionData.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,22 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+public class MessageSubscriptionData {\n+  private String channels;\n+  private String baseUrl;\n+\n+  public String getChannels() {\n+    return channels;\n+  }\n+\n+  public void setChannels(String channels) {\n+    this.channels = channels;\n+  }\n+\n+  public String getBaseUrl() {\n+    return baseUrl;\n+  }\n+\n+  public void setBaseUrl(String baseUrl) {\n+    this.baseUrl = baseUrl;\n+  }\n+}"
  },
  {
    "sha": "ab27ad4e9ff8ae88ca05757f9ffb9db66cd1b62a",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/ReplySubscriptionData.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/ReplySubscriptionData.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/ReplySubscriptionData.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/consumer/ReplySubscriptionData.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,40 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+public class ReplySubscriptionData {\n+  private String replyChannel;\n+  private String resource;\n+  private String baseUrl;\n+  private String commands;\n+\n+  public String getReplyChannel() {\n+    return replyChannel;\n+  }\n+\n+  public void setReplyChannel(String replyChannel) {\n+    this.replyChannel = replyChannel;\n+  }\n+\n+  public String getResource() {\n+    return resource;\n+  }\n+\n+  public void setResource(String resource) {\n+    this.resource = resource;\n+  }\n+\n+  public String getBaseUrl() {\n+    return baseUrl;\n+  }\n+\n+  public void setBaseUrl(String baseUrl) {\n+    this.baseUrl = baseUrl;\n+  }\n+\n+  public String getCommands() {\n+    return commands;\n+  }\n+\n+  public void setCommands(String commands) {\n+    this.commands = commands;\n+  }\n+}"
  },
  {
    "sha": "e6e1e61a98dc46a65a14c80280f641d1a7b5643b",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/ProxyConfiguration.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/ProxyConfiguration.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/ProxyConfiguration.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/ProxyConfiguration.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -19,7 +19,9 @@\n import org.springframework.web.client.RestTemplate;\n \n @Configuration\n-@Import({TramConsumerJdbcAutoConfiguration.class, EventuateTramKafkaMessageConsumerConfiguration.class, EventuateCommonJdbcOperationsConfiguration.class})\n+@Import({TramConsumerJdbcAutoConfiguration.class,\n+        EventuateTramKafkaMessageConsumerConfiguration.class,\n+        EventuateCommonJdbcOperationsConfiguration.class})\n public class ProxyConfiguration {\n \n   @Bean\n@@ -61,10 +63,12 @@ public CuratorFramework curatorFramework(ProxyProperties proxyProperties) {\n   public SubscriptionService subscriptionService(SubscriptionPersistenceService subscriptionPersistenceService,\n                                                  SubscriptionRequestManager subscriptionRequestManager,\n                                                  RestTemplate restTemplate,\n-                                                 MessageConsumerImplementation messageConsumerImplementation,\n-                                                 ProxyProperties proxyProperties) {\n+                                                 MessageConsumerImplementation messageConsumerImplementation) {\n \n-    return new SubscriptionService(subscriptionPersistenceService, subscriptionRequestManager, restTemplate, new SynchronizedMessageConsumerImplementation(messageConsumerImplementation));\n+    return new SubscriptionService(subscriptionPersistenceService,\n+            subscriptionRequestManager,\n+            restTemplate,\n+            new SynchronizedMessageConsumerImplementation(messageConsumerImplementation));\n   }\n \n   @Bean"
  },
  {
    "sha": "6b3fdef7704cb32aadaef49afc53583feddc0f70",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionController.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionController.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionController.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -4,8 +4,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.web.bind.annotation.*;\n \n-import java.util.Optional;\n-\n @RestController\n public class SubscriptionController {\n \n@@ -15,7 +13,7 @@\n   @RequestMapping(value = \"/subscriptions\", method = RequestMethod.POST)\n   public String subscribe(@RequestBody SubscribeRequest subscribeRequest) {\n     return subscriptionService.makeSubscriptionRequest(subscribeRequest.getSubscriberId(),\n-            subscribeRequest.getChannels(), subscribeRequest.getCallbackUrl(), Optional.empty());\n+            subscribeRequest.getChannels(), subscribeRequest.getCallbackUrl());\n   }\n \n   @RequestMapping(value = \"/subscriptions/{subscriptionInstanceId}/heartbeat\", method = RequestMethod.POST)"
  },
  {
    "sha": "e590df3c9b0cc19330a58b1331a0b589835c4097",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionInfo.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionInfo.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionInfo.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionInfo.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -15,7 +15,10 @@\n   public SubscriptionInfo() {\n   }\n \n-  public SubscriptionInfo(String subscriptionInstanceId, String subscriberId, Set<String> channels, String callbackUrl) {\n+  public SubscriptionInfo(String subscriptionInstanceId,\n+                          String subscriberId,\n+                          Set<String> channels,\n+                          String callbackUrl) {\n     this.subscriptionInstanceId = subscriptionInstanceId;\n     this.subscriberId = subscriberId;\n     this.channels = channels;\n@@ -54,6 +57,7 @@ public void setCallbackUrl(String callbackUrl) {\n     this.callbackUrl = callbackUrl;\n   }\n \n+\n   @Override\n   public boolean equals(Object o) {\n     return EqualsBuilder.reflectionEquals(this, o);"
  },
  {
    "sha": "b49c4624fa2fd01627913252465cf2717782757c",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionLoader.java",
    "status": "modified",
    "additions": 4,
    "deletions": 5,
    "changes": 9,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionLoader.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionLoader.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionLoader.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -1,7 +1,6 @@\n package io.eventuate.tram.messaging.proxy.service;\n \n import javax.annotation.PostConstruct;\n-import java.util.Optional;\n \n public class SubscriptionLoader {\n \n@@ -27,18 +26,18 @@ private void loadPersistentSubscriptions() {\n     subscriptionPersistenceService\n             .loadSubscriptionInfos()\n             .forEach(subscriptionInfo ->\n-                    subscriptionService.subscribe(subscriptionInfo.getSubscriberId(),\n+                    subscriptionService.subscribeToMessage(subscriptionInfo.getSubscriberId(),\n                             subscriptionInfo.getChannels(),\n                             subscriptionInfo.getCallbackUrl(),\n-                            Optional.of(subscriptionInfo.getSubscriptionInstanceId())));\n+                            subscriptionInfo.getSubscriptionInstanceId()));\n   }\n \n   private void followToSubscriptions() {\n     subscriptionRequestManager.subscribe(subscriptionInfo -> {\n-      subscriptionService.subscribe(subscriptionInfo.getSubscriberId(),\n+      subscriptionService.subscribeToMessage(subscriptionInfo.getSubscriberId(),\n               subscriptionInfo.getChannels(),\n               subscriptionInfo.getCallbackUrl(),\n-              Optional.of(subscriptionInfo.getSubscriptionInstanceId()));\n+              subscriptionInfo.getSubscriptionInstanceId());\n     }, subscriptionInfo -> subscriptionService.unsubscribe(subscriptionInfo.getSubscriptionInstanceId()));\n   }\n }"
  },
  {
    "sha": "f45bec5974dd806b11ab7b2adb781f6d1ba83f4a",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionService.java",
    "status": "modified",
    "additions": 205,
    "deletions": 13,
    "changes": 218,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionService.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionService.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/java/io/eventuate/tram/messaging/proxy/service/SubscriptionService.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -1,15 +1,31 @@\n package io.eventuate.tram.messaging.proxy.service;\n \n+import io.eventuate.common.json.mapper.JSonMapper;\n+import io.eventuate.tram.commands.common.CommandMessageHeaders;\n+import io.eventuate.tram.commands.common.CommandReplyOutcome;\n+import io.eventuate.tram.commands.common.ReplyMessageHeaders;\n+import io.eventuate.tram.commands.common.paths.ResourcePath;\n+import io.eventuate.tram.commands.common.paths.ResourcePathPattern;\n import io.eventuate.tram.consumer.common.MessageConsumerImplementation;\n+import io.eventuate.tram.consumer.http.common.EventuateHttpHeaders;\n import io.eventuate.tram.consumer.http.common.HttpMessage;\n+import io.eventuate.tram.events.common.EventMessageHeaders;\n+import io.eventuate.tram.messaging.common.Message;\n import io.eventuate.tram.messaging.consumer.MessageSubscription;\n+import io.eventuate.tram.messaging.producer.MessageBuilder;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n import org.springframework.web.client.RestTemplate;\n \n+import java.util.Collections;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.Collectors;\n \n public class SubscriptionService {\n   private SubscriptionPersistenceService subscriptionPersistenceService;\n@@ -30,39 +46,210 @@ public SubscriptionService(SubscriptionPersistenceService subscriptionPersistenc\n   private ConcurrentMap<String, MessageSubscription> messageSubscriptions = new ConcurrentHashMap<>();\n \n   public String makeSubscriptionRequest(String subscriberId,\n-                          Set<String> channels,\n-                          String callbackUrl,\n-                          Optional<String> optionalSubscriptionInstanceId) {\n+                                        Set<String> channels,\n+                                        String callbackUrl) {\n \n-    String subscriptionInstanceId = optionalSubscriptionInstanceId.orElseGet(this::generateId);\n+    String subscriptionInstanceId = generateId();\n+\n+    subscriptionRequestManager.createSubscriptionRequest(new SubscriptionInfo(subscriptionInstanceId,\n+            subscriberId, channels, callbackUrl));\n \n-    subscriptionRequestManager.createSubscriptionRequest(new SubscriptionInfo(subscriptionInstanceId, subscriberId, channels, callbackUrl));\n     subscriptionPersistenceService.saveSubscriptionInfo(new SubscriptionInfo(subscriptionInstanceId,\n             subscriberId, channels, callbackUrl));\n \n     return subscriptionInstanceId;\n   }\n \n-  public String subscribe(String subscriberId,\n-                          Set<String> channels,\n-                          String callbackUrl,\n-                          Optional<String> optionalSubscriptionInstanceId) {\n+  public void subscribeToReply(String subscriberId,\n+                               String replyChannel,\n+                               Optional<String> resource,\n+                               Set<String> commands,\n+                               String callbackUrl) {\n+    messageSubscriptions.computeIfAbsent(subscriberId, instanceId -> {\n+      MessageSubscription messageSubscription = messageConsumerImplementation.subscribe(subscriberId,\n+              Collections.singleton(replyChannel),\n+              message -> publishReply(message, callbackUrl, subscriberId, commands, resource));\n+\n+      return messageSubscription;\n+    });\n+  }\n+\n+  private void publishReply(Message message,\n+                            String callbackUrl,\n+                            String subscriberId,\n+                            Set<String> commands,\n+                            Optional<String> resource) {\n+    String command = message.getRequiredHeader(CommandMessageHeaders.inReply(CommandMessageHeaders.COMMAND_TYPE));\n+\n+    if (!commands.contains(command)) {\n+      return;\n+    }\n+\n+    if (!shouldPublishResource(resource, message.getHeader(CommandMessageHeaders.inReply(CommandMessageHeaders.RESOURCE)))) {\n+      return;\n+    }\n+\n+    String location = String.format(\"%s/%s/%s/%s/%s/%s%s\",\n+            callbackUrl,\n+            subscriberId,\n+            command,\n+            message.getRequiredHeader(ReplyMessageHeaders.IN_REPLY_TO),\n+            message.getRequiredHeader(ReplyMessageHeaders.REPLY_TYPE),\n+            message.getRequiredHeader(ReplyMessageHeaders.REPLY_OUTCOME),\n+            message.getHeader(CommandMessageHeaders.inReply(CommandMessageHeaders.RESOURCE)).orElse(\"\"));\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+    restTemplate.postForLocation(location, new HttpEntity<>(message.getPayload(), headers));\n+  }\n+\n+  public String subscribeToCommand(String commandDispatcherId,\n+                                   String channel,\n+                                   Optional<String> resource,\n+                                   Set<String> commands,\n+                                   String callbackUrl) {\n+    messageSubscriptions.computeIfAbsent(commandDispatcherId, instanceId -> {\n+      MessageSubscription messageSubscription = messageConsumerImplementation.subscribe(commandDispatcherId,\n+              Collections.singleton(channel),\n+              message -> publishCommand(message, commandDispatcherId, resource, commands, callbackUrl));\n+\n+      return messageSubscription;\n+    });\n \n-    String subscriptionInstanceId = optionalSubscriptionInstanceId.orElseGet(this::generateId);\n+    return commandDispatcherId;\n+  }\n+\n+  public String subscribeToEvent(String subscriberId,\n+                                 String aggregate,\n+                                 Set<String> events,\n+                                 String callbackUrl) {\n+    messageSubscriptions.computeIfAbsent(subscriberId, instanceId -> {\n+      MessageSubscription messageSubscription = messageConsumerImplementation.subscribe(subscriberId,\n+              Collections.singleton(aggregate),\n+              message -> publishEvent(message, aggregate, events, callbackUrl, subscriberId));\n \n+      return messageSubscription;\n+    });\n+\n+    return subscriberId;\n+  }\n+\n+  public String subscribeToMessage(String subscriberId,\n+                                   Set<String> channels,\n+                                   String callbackUrl,\n+                                   String subscriptionInstanceId) {\n     messageSubscriptions.computeIfAbsent(subscriptionInstanceId, instanceId -> {\n       MessageSubscription messageSubscription = messageConsumerImplementation.subscribe(subscriberId,\n               channels,\n-              message ->\n-                restTemplate.postForLocation(callbackUrl + \"/\" + subscriptionInstanceId,\n-                        new HttpMessage(message.getId(), message.getHeaders(), message.getPayload())));\n+              message -> publishMessage(message, callbackUrl, subscriberId, subscriptionInstanceId));\n \n       return messageSubscription;\n     });\n \n     return subscriptionInstanceId;\n   }\n \n+  private void publishMessage(Message message,\n+                              String callbackUrl,\n+                              String subscriberId,\n+                              String subscriptionInstanceId) {\n+    String location = callbackUrl + \"/\" + subscriptionInstanceId;\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+    addCommonHeaders(headers, subscriberId, message.getId());\n+\n+    HttpMessage httpMessage = new HttpMessage(message.getId(), message.getHeaders(), message.getPayload());\n+\n+    restTemplate.postForLocation(location, new HttpEntity<>(httpMessage, headers));\n+  }\n+\n+  private void publishEvent(Message message,\n+                            String aggregate,\n+                            Set<String> events,\n+                            String callbackUrl,\n+                            String subscriberId) {\n+\n+    String event = message.getRequiredHeader(EventMessageHeaders.EVENT_TYPE);\n+\n+    if (!events.contains(event)) {\n+      return;\n+    }\n+\n+    String location = String.format(\"%s/%s/%s/%s/%s/%s\",\n+            callbackUrl,\n+            subscriberId,\n+            aggregate,\n+            message.getRequiredHeader(EventMessageHeaders.AGGREGATE_ID),\n+            event,\n+            message.getRequiredHeader(Message.ID));\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+    addCommonHeaders(headers, subscriberId, message.getId());\n+    restTemplate.postForLocation(location, new HttpEntity<>(message.getPayload(), headers));\n+  }\n+\n+  private void publishCommand(Message message,\n+                              String commandDispatcherId,\n+                              Optional<String> resource,\n+                              Set<String> commands,\n+                              String callbackUrl) {\n+\n+    String command = message.getRequiredHeader(CommandMessageHeaders.COMMAND_TYPE);\n+\n+    if (!commands.contains(command)) {\n+      return;\n+    }\n+\n+    if (!shouldPublishResource(resource, message.getHeader(CommandMessageHeaders.RESOURCE))) {\n+      return;\n+    }\n+\n+    String replyChannel = message.getRequiredHeader(CommandMessageHeaders.REPLY_TO);\n+\n+    String location =\n+            String.format(\"%s/%s/%s/%s/%s%s\",\n+                    callbackUrl,\n+                    commandDispatcherId,\n+                    message.getId(),\n+                    command,\n+                    replyChannel,\n+                    resource.isPresent() ? message.getRequiredHeader(CommandMessageHeaders.RESOURCE) : \"\");\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setContentType(MediaType.APPLICATION_JSON);\n+    Map<String, String> correlationHeaders = correlationHeaders(message.getHeaders());\n+    headers.add(EventuateHttpHeaders.COMMAND_REPLY_HEADERS, JSonMapper.toJson(correlationHeaders));\n+    addCommonHeaders(headers, commandDispatcherId, message.getId());\n+    restTemplate.postForLocation(location, new HttpEntity<>(message.getPayload(), headers));\n+  }\n+\n+  private boolean shouldPublishResource(Optional<String> resource, Optional<String> messageResource) {\n+    if (resource.isPresent()) {\n+      return messageResource\n+              .map(mr -> {\n+                ResourcePathPattern resourcePathPattern = ResourcePathPattern.parse(resource.get());\n+                ResourcePath resourcePath = ResourcePath.parse(mr);\n+                return resourcePathPattern.isSatisfiedBy(resourcePath);\n+              })\n+              .orElse(false);\n+\n+    }\n+\n+    return true;\n+  }\n+\n+  private Map<String, String> correlationHeaders(Map<String, String> headers) {\n+    Map<String, String> m = headers.entrySet()\n+            .stream()\n+            .filter(e -> e.getKey().startsWith(CommandMessageHeaders.COMMAND_HEADER_PREFIX))\n+            .collect(Collectors.toMap(e -> CommandMessageHeaders.inReply(e.getKey()),\n+                    Map.Entry::getValue));\n+    m.put(ReplyMessageHeaders.IN_REPLY_TO, headers.get(Message.ID));\n+    return m;\n+  }\n+\n   public void updateSubscription(String subscriptionInstanceId) {\n     Optional\n             .ofNullable(messageSubscriptions.get(subscriptionInstanceId))\n@@ -84,4 +271,9 @@ public void unsubscribe(String subscriptionInstanceId) {\n   private String generateId() {\n     return UUID.randomUUID().toString();\n   }\n+\n+  private void addCommonHeaders(HttpHeaders headers, String subscriberId, String messageId) {\n+    headers.add(EventuateHttpHeaders.SUBSCRIBER_ID, subscriberId);\n+    headers.add(EventuateHttpHeaders.MESSAGE_ID, messageId);\n+  }\n }"
  },
  {
    "sha": "c5f4521a40b07d1ad51439d46a228f4e2a2f7a00",
    "filename": "eventuate-tram-messaging-proxy-service/src/main/resources/application.properties",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/resources/application.properties",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/main/resources/application.properties?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -1 +1,8 @@\n # logging.level.root=DEBUG\n+eventuate.http.proxy.zookeeper.connection.string=${DOCKER_HOST_IP:localhost}:2181\n+\n+spring.datasource.url=jdbc:mysql://${DOCKER_HOST_IP:localhost}/eventuate\n+spring.datasource.username=mysqluser\n+spring.datasource.password=mysqlpw\n+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n+eventuatelocal.kafka.bootstrap.servers=${DOCKER_HOST_IP:localhost}:9092\n\\ No newline at end of file"
  },
  {
    "sha": "832bcdb4ac579ef569d574896061b7715aa15175",
    "filename": "eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateHttpMessageSubscriberTest.java",
    "status": "added",
    "additions": 191,
    "deletions": 0,
    "changes": 191,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateHttpMessageSubscriberTest.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateHttpMessageSubscriberTest.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateHttpMessageSubscriberTest.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,191 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+import io.eventuate.tram.commands.common.CommandReplyOutcome;\n+import io.eventuate.tram.commands.producer.CommandProducer;\n+import io.eventuate.tram.consumer.http.common.HttpMessage;\n+import io.eventuate.tram.events.publisher.DomainEventPublisher;\n+import io.eventuate.tram.http.spring.consumer.duplicatedetection.IdempotentHandlerConfiguration;\n+import io.eventuate.tram.messaging.common.Message;\n+import io.eventuate.tram.messaging.producer.MessageBuilder;\n+import io.eventuate.tram.messaging.producer.common.MessageProducerImplementation;\n+import io.eventuate.tram.messaging.proxy.service.ProxyConfiguration;\n+import io.eventuate.tram.messaging.proxy.service.SubscriptionController;\n+import io.eventuate.tram.spring.commands.producer.TramCommandProducerConfiguration;\n+import io.eventuate.tram.spring.events.publisher.TramEventsPublisherConfiguration;\n+import io.eventuate.tram.spring.messaging.producer.jdbc.TramMessageProducerJdbcConfiguration;\n+import io.eventuate.util.test.async.Eventually;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.EnableAspectJAutoProxy;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = EventuateHttpMessageSubscriberTest.Config.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)\n+public class EventuateHttpMessageSubscriberTest {\n+  @Configuration\n+  @Import({ProxyConfiguration.class,\n+          EventuateMessageSubscriberConfiguration.class,\n+          TramMessageProducerJdbcConfiguration.class,\n+          TramEventsPublisherConfiguration.class,\n+          TramCommandProducerConfiguration.class,\n+          IdempotentHandlerConfiguration.class})\n+  @EnableAutoConfiguration\n+  @ComponentScan\n+  @EnableAspectJAutoProxy\n+  public static class Config {\n+    @Bean\n+    public SubscriptionController subscriptionController() {\n+      return new SubscriptionController();\n+    }\n+  }\n+\n+  @Autowired\n+  private MessageProducerImplementation messageProducerImplementation;\n+\n+  @Autowired\n+  private DomainEventPublisher domainEventPublisher;\n+\n+  @Autowired\n+  private TestController testController;\n+\n+  @Autowired\n+  private CommandProducer commandProducer;\n+\n+  @Autowired\n+  private JdbcTemplate jdbcTemplate;\n+\n+  private String messageChannel = \"test-channel\";\n+  private String commandChannel = \"test-command-channel\";\n+  private String commandReplyChannel = \"test-reply-channel\";\n+  private String commandResource;\n+\n+  private String aggregateId;\n+\n+  private String messageId;\n+  private String payload;\n+\n+  @Before\n+  public void init() {\n+    payload = generateId();\n+    commandResource = generateId();\n+    aggregateId = generateId();\n+  }\n+\n+  @Test\n+  public void testMessageHandled() throws InterruptedException {\n+    sendMessage();\n+    assertMessage();\n+    assertMessageCheckedForDuplicate(messageId);\n+  }\n+\n+  @Test\n+  public void testEventHandled() throws InterruptedException {\n+    sendEvent();\n+    assertEvent();\n+    assertMessageCheckedForDuplicate(messageId);\n+  }\n+\n+  @Test\n+  public void testCommandHandled() throws InterruptedException {\n+    sendCommand();\n+    assertCommand();\n+    assertReply();\n+    assertMessageCheckedForDuplicate(messageId);\n+  }\n+\n+  private void sendCommand() {\n+    messageId = commandProducer.send(commandChannel,\n+            String.format(\"/test-resource/%s\", commandResource),\n+            new TestCommand(payload),\n+            commandReplyChannel,\n+            Collections.emptyMap());\n+  }\n+\n+  private void assertCommand() throws InterruptedException {\n+    TestCommandInfo testCommandInfo = testController.getReceivedCommands().poll(30, TimeUnit.SECONDS);\n+    assertNotNull(testCommandInfo);\n+    assertNotNull(testCommandInfo.getMessageId());\n+    messageId = testCommandInfo.getMessageId();\n+    assertEquals(payload, testCommandInfo.getTestCommand().getSomeImportantData());\n+    assertEquals(commandReplyChannel, testCommandInfo.getReplyChannel());\n+    assertEquals(commandResource, testCommandInfo.getValue());\n+\n+    Map<String, String> headers = testCommandInfo.getHeaders();\n+\n+    assertEquals(\"/test-resource/\" + commandResource, headers.get(\"commandreply_resource\"));\n+    assertEquals(commandChannel, headers.get(\"commandreply__destination\"));\n+    assertEquals(commandReplyChannel, headers.get(\"commandreply_reply_to\"));\n+    assertEquals(TestCommand.class.getName(), headers.get(\"commandreply_type\"));\n+    assertEquals(messageId, headers.get(\"reply_to_message_id\"));\n+  }\n+\n+  private void assertReply() throws InterruptedException {\n+    TestReplyInfo testReplyInfo = testController.getReceivedReplies().poll(30, TimeUnit.SECONDS);\n+\n+    assertNotNull(testReplyInfo);\n+    assertEquals(CommandReplyOutcome.SUCCESS, testReplyInfo.getOutcome());\n+    assertEquals(String.format(\"reply to %s\", messageId), testReplyInfo.getReply().getSomeImportantData());\n+    assertEquals(messageId, testReplyInfo.getReplyToCommandId());\n+    assertEquals(TestReply.class.getName(), testReplyInfo.getReplyType());\n+    assertEquals(commandResource, testReplyInfo.getResourceValue());\n+  }\n+\n+  private void sendEvent() {\n+    domainEventPublisher.publish(\"TestAggregate\", aggregateId, singletonList(new TestEvent(payload)));\n+  }\n+\n+  private void assertEvent() throws InterruptedException {\n+    TestEventInfo testEventInfo = testController.getReceivedEvents().poll(30, TimeUnit.SECONDS);\n+    assertNotNull(testEventInfo);\n+    messageId = testEventInfo.getEventId();\n+    assertNotNull(messageId);\n+    assertEquals(payload, testEventInfo.getTestEvent().getSomeImportantData());\n+    assertEquals(aggregateId, testEventInfo.getAggregateId());\n+  }\n+\n+  private void sendMessage() {\n+    Message message = MessageBuilder\n+            .withPayload(payload)\n+            .withHeader(Message.DESTINATION, messageChannel)\n+            .build();\n+\n+    messageProducerImplementation.send(message);\n+\n+    messageId = message.getId();\n+  }\n+\n+  private void assertMessage() throws InterruptedException {\n+    HttpMessage message = testController.getReceivedMessages().poll(30, TimeUnit.SECONDS);\n+    assertNotNull(message);\n+    assertEquals(messageId, message.getId());\n+    assertEquals(payload, message.getPayload());\n+    assertEquals(messageChannel, message.getHeaders().get(Message.DESTINATION));\n+  }\n+\n+  private void assertMessageCheckedForDuplicate(String id) {\n+    Eventually.eventually(() ->\n+      assertEquals(1, jdbcTemplate.queryForList(\"select * from eventuate.received_messages where message_id = ?\", id).size()));\n+  }\n+\n+  private String generateId() {\n+    return UUID.randomUUID().toString();\n+  }\n+}"
  },
  {
    "sha": "f91f9683b46c6a8c5610f30fe17947f6cb69ade4",
    "filename": "eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionPropertiesTest.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionPropertiesTest.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionPropertiesTest.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/EventuateSubscriptionPropertiesTest.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,50 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = EventuateSubscriptionPropertiesTest.Config.class)\n+public class EventuateSubscriptionPropertiesTest {\n+  @Configuration\n+  @EnableConfigurationProperties(EventuateSubscriptionProperties.class)\n+  public static class Config {\n+  }\n+\n+  @Autowired\n+  private EventuateSubscriptionProperties eventuateSubscriptionProperties;\n+\n+  @Test\n+  public void testProperties() {\n+    assertEquals(3, eventuateSubscriptionProperties.getMessage().size());\n+\n+    MessageSubscriptionData messageSubscription1 = eventuateSubscriptionProperties.getMessage().get(\"s1\");\n+\n+    assertEquals(\"orders,order-history\", messageSubscription1.getChannels());\n+    assertTrue(messageSubscription1.getBaseUrl().endsWith(\"messages\"));\n+\n+    MessageSubscriptionData messageSubscription2 = eventuateSubscriptionProperties.getMessage().get(\"s2\");\n+\n+    assertEquals(\"customers,customer-history\", messageSubscription2.getChannels());\n+    assertTrue(messageSubscription2.getBaseUrl().endsWith(\"messages\"));\n+\n+    MessageSubscriptionData messageSubscription3 = eventuateSubscriptionProperties.getMessage().get(\"s3\");\n+\n+    assertEquals(\"test-channel\", messageSubscription3.getChannels());\n+    assertTrue(messageSubscription3.getBaseUrl().endsWith(\"messages\"));\n+\n+    EventSubscriptionData eventSubscription4 = eventuateSubscriptionProperties.getEvent().get(\"s4\");\n+\n+    assertEquals(\"TestAggregate\", eventSubscription4.getAggregate());\n+    assertEquals(\"io.eventuate.tram.messaging.proxy.consumer.TestEvent\", eventSubscription4.getEvents());\n+    assertTrue(eventSubscription4.getBaseUrl().endsWith(\"/events\"));\n+  }\n+}"
  },
  {
    "sha": "5c6ea5b4c145bfa29aa5b27802a97848db925ac9",
    "filename": "eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/TestCommand.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/blob/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/TestCommand.java",
    "raw_url": "https://github.com/eventuate-tram/eventuate-tram-messaging-http/raw/4f0676db163624444f0b540c4ccf0c7b38e334c8/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/TestCommand.java",
    "contents_url": "https://api.github.com/repos/eventuate-tram/eventuate-tram-messaging-http/contents/eventuate-tram-messaging-proxy-service/src/test/java/io/eventuate/tram/messaging/proxy/consumer/TestCommand.java?ref=4f0676db163624444f0b540c4ccf0c7b38e334c8",
    "patch": "@@ -0,0 +1,22 @@\n+package io.eventuate.tram.messaging.proxy.consumer;\n+\n+import io.eventuate.tram.commands.common.Command;\n+\n+public class TestCommand implements Command {\n+  private String someImportantData;\n+\n+  public TestCommand() {\n+  }\n+\n+  public TestCommand(String someImportantData) {\n+    this.someImportantData = someImportantData;\n+  }\n+\n+  public String getSomeImportantData() {\n+    return someImportantData;\n+  }\n+\n+  public void setSomeImportantData(String someImportantData) {\n+    this.someImportantData = someImportantData;\n+  }\n+}"
  }
]
