[
  {
    "sha": "7d4e6dc56b703a1c3290e7154144b896d0ee2332",
    "filename": "src/main/java/com/ulrica/idea/extensions/GitPrePushHandler.java",
    "status": "modified",
    "additions": 15,
    "deletions": 8,
    "changes": 23,
    "blob_url": "https://github.com/visionarygit/auto-yapi/blob/af4f9ca208fad31fa5ef4c5e780b525a417b2f83/src/main/java/com/ulrica/idea/extensions/GitPrePushHandler.java",
    "raw_url": "https://github.com/visionarygit/auto-yapi/raw/af4f9ca208fad31fa5ef4c5e780b525a417b2f83/src/main/java/com/ulrica/idea/extensions/GitPrePushHandler.java",
    "contents_url": "https://api.github.com/repos/visionarygit/auto-yapi/contents/src/main/java/com/ulrica/idea/extensions/GitPrePushHandler.java?ref=af4f9ca208fad31fa5ef4c5e780b525a417b2f83",
    "patch": "@@ -2,6 +2,9 @@\n \r\n import com.intellij.dvcs.push.PrePushHandler;\r\n import com.intellij.dvcs.push.PushInfo;\r\n+import com.intellij.notification.Notification;\r\n+import com.intellij.notification.NotificationType;\r\n+import com.intellij.notification.Notifications;\r\n import com.intellij.openapi.diagnostic.Logger;\r\n import com.intellij.openapi.progress.ProgressIndicator;\r\n import com.intellij.openapi.project.Project;\r\n@@ -82,20 +85,21 @@ public Result handle(@NotNull List<PushInfo> list, @NotNull ProgressIndicator pr\n                     if (!referencePsiFile.contains(psiFile)) {\r\n                         referencePsiFile.add(psiFile);\r\n                     }\r\n-                    getReferencePsiFile(psiFile, referencePsiFile,globalSearchScope);\r\n+                    getReferencePsiFile(psiFile, referencePsiFile, globalSearchScope);\r\n                 }\r\n             }\r\n         }\r\n-        List<PsiFile> needExportPsiFile = getNeedExportPsiFile(listenerDir, referencePsiFile);\r\n-        exportAll(needExportPsiFile, currentProject);\r\n+        StringBuffer allExportClasses = new StringBuffer();\r\n+        List<PsiFile> needExportPsiFile = getNeedExportPsiFile(listenerDir, referencePsiFile, allExportClasses);\r\n+        exportAll(needExportPsiFile, currentProject, allExportClasses.toString());\r\n \r\n         return Result.OK;\r\n     }\r\n \r\n \r\n-    void getReferencePsiFile(PsiFile psiFile, List<PsiFile> referencePsiFile,GlobalSearchScope globalSearchScope) {\r\n+    void getReferencePsiFile(PsiFile psiFile, List<PsiFile> referencePsiFile, GlobalSearchScope globalSearchScope) {\r\n         PsiElement child = PsiTreeUtil.findChildOfType(psiFile, PsiClass.class);\r\n-        Query<PsiReference> search = ReferencesSearch.search(child,globalSearchScope);\r\n+        Query<PsiReference> search = ReferencesSearch.search(child, globalSearchScope);\r\n         Collection<PsiReference> all = search.findAll();\r\n \r\n         for (PsiReference psiReference : all) {\r\n@@ -106,19 +110,20 @@ void getReferencePsiFile(PsiFile psiFile, List<PsiFile> referencePsiFile,GlobalS\n             if (!referencePsiFile.contains(containingFile)) {\r\n                 referencePsiFile.add(containingFile);\r\n                 /*递归查询*/\r\n-                getReferencePsiFile(containingFile, referencePsiFile,globalSearchScope);\r\n+                getReferencePsiFile(containingFile, referencePsiFile, globalSearchScope);\r\n             }\r\n         }\r\n         return;\r\n     }\r\n \r\n-    List<PsiFile> getNeedExportPsiFile(String listenerDir, List<PsiFile> referencePsiFile) {\r\n+    List<PsiFile> getNeedExportPsiFile(String listenerDir, List<PsiFile> referencePsiFile, StringBuffer sb) {\r\n         List<PsiFile> psiFiles = new ArrayList<>();\r\n         for (PsiFile psiFile : referencePsiFile) {\r\n             String path = psiFile.getVirtualFile().getPath();\r\n             if (FileUtil.ifContains(path, listenerDir)) {\r\n                 if (isInterface(psiFile)) {\r\n                     psiFiles.add(psiFile);\r\n+                    sb.append(psiFile.getName() + \"<br/>\");\r\n                 }\r\n             }\r\n         }\r\n@@ -133,7 +138,9 @@ boolean isInterface(PsiFile psiFile) {\n         return false;\r\n     }\r\n \r\n-    void exportAll(List<PsiFile> needExportPsiFiles, Project currentProject){\r\n+    void exportAll(List<PsiFile> needExportPsiFiles, Project currentProject,String content) {\r\n         YapiExporter.exportByPsiFiles(currentProject, needExportPsiFiles);\r\n+        Notification notification = new Notification(\"groupId\", \"以下接口导出成功\", content, NotificationType.INFORMATION);\r\n+        Notifications.Bus.notify(notification);\r\n     }\r\n }\r"
  }
]
