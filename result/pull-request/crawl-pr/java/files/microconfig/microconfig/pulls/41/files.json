[
  {
    "sha": "9ccacf8a089a9041fa91080a96a450b8c805fee1",
    "filename": "microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigType.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigType.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigType.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigType.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -8,4 +8,6 @@\n     Set<String> getSourceExtensions();\n \n     String getResultFileName();\n+\n+    String getResultFileExtension();\n }"
  },
  {
    "sha": "8f4e2eb77494f7ee2fcf3ff89b2147b004193472",
    "filename": "microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigTypeFilters.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigTypeFilters.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigTypeFilters.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-api/src/main/java/io/microconfig/core/configtypes/ConfigTypeFilters.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -6,6 +6,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n+import java.util.regex.Pattern;\n \n import static io.microconfig.utils.CollectionUtils.setOf;\n import static io.microconfig.utils.FileUtils.getExtension;\n@@ -52,6 +53,19 @@ public static ConfigTypeFilter configTypeWithExtensionOf(File file) {\n                 .orElseThrow(() -> new IllegalArgumentException(\"Unsupported config extension '\" + ext + \"'\"));\n     }\n \n+    public static ConfigTypeFilter configTypeWithResultFileExtension(String resultFileExtension){\n+        if(resultFileExtension==null){\n+            return types -> types;\n+        } else if(!Pattern.matches(\"\\\\G\\\\.[^\\\\.]\\\\S+\", resultFileExtension)){\n+            throw new IllegalArgumentException(\"Result file extension [\" + resultFileExtension + \"] is not valid. Must start with a . and not be empty or contain spaces\");\n+        }\n+        return types -> types.stream()\n+                .filter(t -> t.getResultFileExtension().equals(resultFileExtension))\n+                .findFirst()\n+                .map(Collections::singletonList)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Unsupported result file extension [\"+resultFileExtension+\"]\"));\n+    }\n+\n     private static void validateNames(Set<String> names, List<ConfigType> supportedTypes) {\n         Set<String> supportedNames = supportedTypes.stream().map(ConfigType::getName).collect(toSet());\n         List<String> unsupportedNames = filter(names, n -> !supportedNames.contains(n));"
  },
  {
    "sha": "c64e262f38ad69297a8bf5971505610c2cd6ddb6",
    "filename": "microconfig-api/src/test/java/io/microconfig/core/configtypes/ConfigTypeFiltersTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-api/src/test/java/io/microconfig/core/configtypes/ConfigTypeFiltersTest.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-api/src/test/java/io/microconfig/core/configtypes/ConfigTypeFiltersTest.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-api/src/test/java/io/microconfig/core/configtypes/ConfigTypeFiltersTest.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -70,11 +70,36 @@ void failOnFileWithoutExtension() {\n         assertThrows(IllegalArgumentException.class, () -> configTypeWithExtensionOf(badFile).selectTypes(supportedTypes));\n     }\n \n+    @Test\n+    void selectByResultFileExtension(){\n+        assertEquals(\n+                asList(app),\n+                configTypeWithResultFileExtension(\".app\").selectTypes(supportedTypes)\n+        );\n+        assertEquals(\n+                supportedTypes,\n+                configTypeWithResultFileExtension(null).selectTypes(supportedTypes)\n+        );\n+    }\n+\n+    @Test\n+    void failOnInvalidResultFileExtensions(){\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\"nodot\"));\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\"\"));\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\" \"));\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\".\"));\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\". \"));\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\"..\"));\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\" .almostgood\"));\n+        assertThrows(IllegalArgumentException.class, () -> configTypeWithResultFileExtension(\".so close\"));\n+    }\n+\n     private ConfigType type(String name) {\n         ConfigType ct = mock(ConfigType.class);\n         when(ct.getName()).thenReturn(name);\n         when(ct.getResultFileName()).thenReturn(\"file-\" + name);\n         when(ct.getSourceExtensions()).thenReturn(setOf(\".\" + name));\n+        when(ct.getResultFileExtension()).thenReturn(\".\" + name);\n         return ct;\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "93dd03005d5cb60fe6d474c1080dcdbacdad087b",
    "filename": "microconfig-core/src/main/java/io/microconfig/core/configtypes/ConfigTypeImpl.java",
    "status": "modified",
    "additions": 14,
    "deletions": 2,
    "changes": 16,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/configtypes/ConfigTypeImpl.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/configtypes/ConfigTypeImpl.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/main/java/io/microconfig/core/configtypes/ConfigTypeImpl.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -1,33 +1,45 @@\n package io.microconfig.core.configtypes;\n \n+import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n \n import java.util.List;\n import java.util.Set;\n+import java.util.regex.Pattern;\n \n import static io.microconfig.utils.StreamUtils.filter;\n import static java.util.Collections.singleton;\n \n @Getter\n @ToString\n @RequiredArgsConstructor\n+@AllArgsConstructor\n public class ConfigTypeImpl implements ConfigType {\n     private final String name;\n     private final Set<String> sourceExtensions;\n     private final String resultFileName;\n+    private String resultFileExtension;\n \n     public static ConfigType byName(String name) {\n         return byNameAndExtensions(name, singleton('.' + name), name);\n     }\n \n     public static ConfigType byNameAndExtensions(String name, Set<String> sourceExtensions, String resultFileName) {\n+        return byNameAndExtensionsAndResultFileExtension(name, sourceExtensions, resultFileName, null);\n+    }\n+\n+    public static ConfigType byNameAndExtensionsAndResultFileExtension(String name, Set<String> sourceExtensions, String resultFileName, String resultFileExtension){\n         List<String> badExtensions = filter(sourceExtensions, ext -> !ext.startsWith(\".\"));\n         if (!badExtensions.isEmpty()) {\n-            throw new IllegalArgumentException(\"File extension must start with '.'. Current: \" + badExtensions);\n+            throw new IllegalArgumentException(\"Source file extensions must start with '.'. Current: \" + badExtensions);\n+        }\n+\n+        if(resultFileExtension!=null && !Pattern.matches(\"\\\\G\\\\.[^\\\\.]\\\\S+\", resultFileExtension)){\n+            throw new IllegalArgumentException(\"Result file extension [\" + resultFileExtension + \"] is not valid. Must start with a . and not be empty or contain spaces\");\n         }\n \n-        return new ConfigTypeImpl(name, sourceExtensions, resultFileName);\n+        return new ConfigTypeImpl(name, sourceExtensions, resultFileName, resultFileExtension);\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "0c4030390cd6bd3b61e12a23143445e01e629de7",
    "filename": "microconfig-core/src/main/java/io/microconfig/core/configtypes/CustomConfigTypeRepository.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/configtypes/CustomConfigTypeRepository.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/configtypes/CustomConfigTypeRepository.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/main/java/io/microconfig/core/configtypes/CustomConfigTypeRepository.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -11,7 +11,7 @@\n import java.util.Set;\n \n import static io.microconfig.core.configtypes.ConfigTypeImpl.byName;\n-import static io.microconfig.core.configtypes.ConfigTypeImpl.byNameAndExtensions;\n+import static io.microconfig.core.configtypes.ConfigTypeImpl.byNameAndExtensionsAndResultFileExtension;\n import static io.microconfig.utils.Logger.announce;\n import static io.microconfig.utils.StreamUtils.forEach;\n import static java.util.Collections.emptyList;\n@@ -52,6 +52,7 @@ public static ConfigTypeRepository findDescriptorIn(File rootDir, FsReader fsRea\n         private static final String CONFIG_TYPES = \"configTypes\";\n         private static final String SOURCE_EXTENSIONS = \"sourceExtensions\";\n         private static final String RESULT_FILE_NAME = \"resultFileName\";\n+        private static final String RESULT_FILE_EXTENSION = \"resultFileExtension\";\n \n         private final String content;\n \n@@ -73,8 +74,9 @@ private ConfigType parse(Object configTypeObject) {\n             Map<String, Object> attributes = (Map<String, Object>) configType.get(type);\n             Set<String> sourceExtensions = attributes.containsKey(SOURCE_EXTENSIONS) ? new LinkedHashSet<>((List<String>) attributes.get(SOURCE_EXTENSIONS)) : singleton(type);\n             String resultFileName = (String) attributes.getOrDefault(RESULT_FILE_NAME, type);\n+            String resultFileExtension = (String) attributes.getOrDefault(RESULT_FILE_EXTENSION, null);\n \n-            return byNameAndExtensions(type, sourceExtensions, resultFileName);\n+            return byNameAndExtensionsAndResultFileExtension(type, sourceExtensions, resultFileName, resultFileExtension);\n         }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "2bfa1056fb93bdaf938bb1fae23bf6e08d828355",
    "filename": "microconfig-core/src/main/java/io/microconfig/core/configtypes/StandardConfigType.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/configtypes/StandardConfigType.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/configtypes/StandardConfigType.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/main/java/io/microconfig/core/configtypes/StandardConfigType.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -27,4 +27,5 @@\n     private final String name;\n     private final Set<String> sourceExtensions;\n     private final String resultFileName;\n+    private String resultFileExtension;\n }\n\\ No newline at end of file"
  },
  {
    "sha": "efe561efb2f3ab330ef5af9a940a43a3fb611432",
    "filename": "microconfig-core/src/main/java/io/microconfig/core/properties/serializers/PropertySerializers.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/properties/serializers/PropertySerializers.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/main/java/io/microconfig/core/properties/serializers/PropertySerializers.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/main/java/io/microconfig/core/properties/serializers/PropertySerializers.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -1,5 +1,6 @@\n package io.microconfig.core.properties.serializers;\n \n+import io.microconfig.core.configtypes.ConfigType;\n import io.microconfig.core.configtypes.ConfigTypeImpl;\n import io.microconfig.core.environments.EnvironmentRepository;\n import io.microconfig.core.properties.ConfigFormat;\n@@ -38,7 +39,7 @@\n \n     public static PropertySerializer<File> toFileIn(File dir, BiConsumer<File, Collection<Property>> listener) {\n         return (properties, templates, configType, componentName, __) -> {\n-            Function<ConfigFormat, File> getResultFile = cf -> new File(dir, componentName + \"/\" + configType.getResultFileName() + cf.extension());\n+            Function<ConfigFormat, File> getResultFile = cf -> new File(dir, componentName + \"/\" + configType.getResultFileName() + getFileExtension(cf, configType));\n \n             File resultFile = getResultFile.apply(extensionByConfigFormat(properties));\n             listener.accept(resultFile, properties);\n@@ -54,6 +55,12 @@\n         };\n     }\n \n+    private static String getFileExtension(ConfigFormat configFormat, ConfigType configType){\n+        return configType.getResultFileExtension() == null\n+                ? configFormat.extension()\n+                : configType.getResultFileExtension();\n+    }\n+\n     private static void copyTemplate(Template template, String componentName) {\n         write(template.getDestination(), template.getContent());\n         copyPermissions(template.getSource().toPath(), template.getDestination().toPath());"
  },
  {
    "sha": "c2423a02642659444c24cd02605ce140fb94ef39",
    "filename": "microconfig-core/src/test/java/io/microconfig/core/configtypes/ConfigTypeImplTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/java/io/microconfig/core/configtypes/ConfigTypeImplTest.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/java/io/microconfig/core/configtypes/ConfigTypeImplTest.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/test/java/io/microconfig/core/configtypes/ConfigTypeImplTest.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -6,18 +6,31 @@\n \n import static io.microconfig.core.configtypes.ConfigTypeImpl.byName;\n import static io.microconfig.core.configtypes.ConfigTypeImpl.byNameAndExtensions;\n+import static io.microconfig.core.configtypes.ConfigTypeImpl.byNameAndExtensionsAndResultFileExtension;\n import static io.microconfig.utils.CollectionUtils.setOf;\n import static java.util.Collections.singleton;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n class ConfigTypeImplTest {\n+\n+    @Test\n+    void createByNameAndExtensionAndResultFileExtension() {\n+        ConfigType app = byNameAndExtensionsAndResultFileExtension(\"app\", singleton(\".yaml\"), \"application\",\".app\");\n+        assertEquals(\"app\", app.getName());\n+        assertEquals(\"application\", app.getResultFileName());\n+        assertEquals(singleton(\".yaml\"), app.getSourceExtensions());\n+        assertEquals(\".app\", app.getResultFileExtension());\n+    }\n+\n     @Test\n     void createByNameAndExtension() {\n         ConfigType app = byNameAndExtensions(\"app\", singleton(\".yaml\"), \"application\");\n         assertEquals(\"app\", app.getName());\n         assertEquals(\"application\", app.getResultFileName());\n         assertEquals(singleton(\".yaml\"), app.getSourceExtensions());\n+        assertNull(app.getResultFileExtension());\n     }\n \n     @Test\n@@ -26,6 +39,7 @@ void createByName() {\n         assertEquals(\"app\", app.getName());\n         assertEquals(\"app\", app.getResultFileName());\n         assertEquals(singleton(\".app\"), app.getSourceExtensions());\n+        assertNull(app.getResultFileExtension());\n     }\n \n     @Test"
  },
  {
    "sha": "0d49f098242c60754f4b41995119cdcfa8a827d0",
    "filename": "microconfig-core/src/test/java/io/microconfig/core/configtypes/CustomConfigTypeRepositoryTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/java/io/microconfig/core/configtypes/CustomConfigTypeRepositoryTest.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/java/io/microconfig/core/configtypes/CustomConfigTypeRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/test/java/io/microconfig/core/configtypes/CustomConfigTypeRepositoryTest.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -3,18 +3,22 @@\n import io.microconfig.io.DumpedFsReader;\n import org.junit.jupiter.api.Test;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import static io.microconfig.core.ClasspathReader.classpathFile;\n import static io.microconfig.core.configtypes.CustomConfigTypeRepository.findDescriptorIn;\n+import static java.util.Collections.singleton;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n class CustomConfigTypeRepositoryTest {\n     @Test\n     void loadCustomFilesFromFile() {\n         ConfigTypeRepository customRepo = findDescriptorIn(classpathFile(\"configTypes\"), new DumpedFsReader());\n \n-        List<ConfigType> expected = new StandardConfigTypeRepository().getConfigTypes();\n+        List<ConfigType> expected = new ArrayList<>(new StandardConfigTypeRepository().getConfigTypes());\n+        expected.add(ConfigTypeImpl.byNameAndExtensionsAndResultFileExtension(\"custom\", singleton(\".custom\"),\"customName\",\".cust\"));\n+\n         List<ConfigType> actual = customRepo.getConfigTypes();\n \n         assertEquals(expected.size(), actual.size());\n@@ -24,6 +28,7 @@ void loadCustomFilesFromFile() {\n             assertEquals(e.getName(), a.getName());\n             assertEquals(e.getResultFileName(), a.getResultFileName());\n             assertEquals(e.getSourceExtensions(), a.getSourceExtensions());\n+            assertEquals(e.getResultFileExtension(), a.getResultFileExtension());\n         }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1035df88ce0a9823fc829c7d0c0a86e124ce6c33",
    "filename": "microconfig-core/src/test/java/io/microconfig/core/configtypes/StandardConfigTypeTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/java/io/microconfig/core/configtypes/StandardConfigTypeTest.java",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/java/io/microconfig/core/configtypes/StandardConfigTypeTest.java",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/test/java/io/microconfig/core/configtypes/StandardConfigTypeTest.java?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -5,6 +5,7 @@\n import static io.microconfig.core.configtypes.StandardConfigType.APPLICATION;\n import static io.microconfig.utils.CollectionUtils.setOf;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n class StandardConfigTypeTest {\n     @Test\n@@ -13,5 +14,6 @@ public void shouldImplementConfigType() {\n         assertEquals(\"app\", app.getName());\n         assertEquals(setOf(\".yml\", \".yaml\", \".properties\"), app.getSourceExtensions());\n         assertEquals(\"application\", app.getResultFileName());\n+        assertNull(app.getResultFileExtension());\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "83e1b69392bd746c4cb603616b6372d2bfcbd1f6",
    "filename": "microconfig-core/src/test/resources/configTypes/microconfig.yaml",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/microconfig/microconfig/blob/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/resources/configTypes/microconfig.yaml",
    "raw_url": "https://github.com/microconfig/microconfig/raw/ba7bdd5397b37c4933ac6e1514e072136ee86638/microconfig-core/src/test/resources/configTypes/microconfig.yaml",
    "contents_url": "https://api.github.com/repos/microconfig/microconfig/contents/microconfig-core/src/test/resources/configTypes/microconfig.yaml?ref=ba7bdd5397b37c4933ac6e1514e072136ee86638",
    "patch": "@@ -22,4 +22,10 @@ configTypes:\n   - env\n   - secret\n   - log4j\n-  - log4j2\n\\ No newline at end of file\n+  - log4j2\n+\n+  - custom:\n+      resultFileName: customName\n+      resultFileExtension: .cust\n+      sourceExtensions:\n+        - .custom\n\\ No newline at end of file"
  }
]
