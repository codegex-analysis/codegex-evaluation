[
  {
    "sha": "35e3d5758995f295d1a29096515845e58b69b18c",
    "filename": "app/src/main/java/net/gsantner/markor/activity/DocumentShareIntoFragment.java",
    "status": "modified",
    "additions": 60,
    "deletions": 17,
    "changes": 77,
    "blob_url": "https://github.com/gsantner/markor/blob/4e7248b47f61177545e24cb7ec4bbf8af2a59208/app/src/main/java/net/gsantner/markor/activity/DocumentShareIntoFragment.java",
    "raw_url": "https://github.com/gsantner/markor/raw/4e7248b47f61177545e24cb7ec4bbf8af2a59208/app/src/main/java/net/gsantner/markor/activity/DocumentShareIntoFragment.java",
    "contents_url": "https://api.github.com/repos/gsantner/markor/contents/app/src/main/java/net/gsantner/markor/activity/DocumentShareIntoFragment.java?ref=4e7248b47f61177545e24cb7ec4bbf8af2a59208",
    "patch": "@@ -19,6 +19,7 @@\n import android.support.v7.preference.Preference;\n import android.support.v7.preference.PreferenceGroup;\n import android.text.TextUtils;\n+import android.util.Patterns;\n import android.util.TypedValue;\n import android.view.View;\n import android.widget.Toast;\n@@ -41,6 +42,8 @@\n import net.gsantner.opoc.ui.FilesystemViewerData;\n \n import java.io.File;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import butterknife.BindView;\n import butterknife.OnTextChanged;\n@@ -54,17 +57,7 @@ public static DocumentShareIntoFragment newInstance(Intent intent) {\n         DocumentShareIntoFragment f = new DocumentShareIntoFragment();\n         Bundle args = new Bundle();\n \n-        String sharedText = intent.getStringExtra(Intent.EXTRA_TEXT) == null ? \"\" : intent.getStringExtra(Intent.EXTRA_TEXT);\n-        String tmp;\n-        if (intent.hasExtra(Intent.EXTRA_SUBJECT) && (tmp = intent.getStringExtra(Intent.EXTRA_SUBJECT)) != null && !sharedText.contains(tmp)) {\n-            if (!tmp.trim().contains(\"\\n\") && !sharedText.trim().contains(\"\\n\") && !sharedText.trim().contains(\" \") && (sharedText.startsWith(\"http://\") || sharedText.startsWith(\"https://\"))) {\n-                tmp = \"[\" + tmp.trim().replace(\"[\", \"\\\\[\").replace(\"]\", \"\\\\]\") + \"]\";\n-                sharedText = \"(\" + sharedText.trim().replace(\"(\", \"\\\\(\").replace(\")\", \"\\\\)\") + \" )\";\n-            } else {\n-                tmp += \" \";\n-            }\n-            sharedText = tmp + sharedText;\n-        }\n+        final String sharedText = formatLink(intent.getStringExtra(Intent.EXTRA_SUBJECT), intent.getStringExtra(Intent.EXTRA_TEXT));\n \n         Object intentFile = intent.getSerializableExtra(DocumentIO.EXTRA_PATH);\n         if (intentFile != null && intent.getBooleanExtra(DocumentIO.EXTRA_PATH_IS_FOLDER, false)) {\n@@ -139,7 +132,6 @@ public boolean onBackPressed() {\n     public static class ShareIntoImportOptionsFragment extends GsPreferenceFragmentCompat<AppSettings> {\n         public static final String TAG = \"ShareIntoImportOptionsFragment\";\n         private static final String EXTRA_TEXT = Intent.EXTRA_TEXT;\n-        private static final String SEP_RULER = \"\\n---\\n\";\n         private File workingDir;\n \n         @Override\n@@ -209,14 +201,14 @@ public void setText(String text) {\n             }\n         }\n \n-        private void appendToExistingDocument(File file, String seperator, boolean showEditor) {\n+        private void appendToExistingDocument(final File file, final String separator, final boolean showEditor) {\n             Bundle args = new Bundle();\n             args.putSerializable(DocumentIO.EXTRA_PATH, file);\n             args.putBoolean(DocumentIO.EXTRA_PATH_IS_FOLDER, false);\n             Document document = DocumentIO.loadDocument(getContext(), args, null);\n             String trimmedContent = document.getContent().trim();\n             String currentContent = TextUtils.isEmpty(trimmedContent) ? \"\" : (trimmedContent + \"\\n\");\n-            DocumentIO.saveDocument(document, currentContent + seperator + _sharedText, new ShareUtil(getContext()), getContext());\n+            DocumentIO.saveDocument(document, currentContent + separator + _sharedText, new ShareUtil(getContext()), getContext());\n             if (showEditor) {\n                 showInDocumentActivity(document);\n             }\n@@ -254,7 +246,7 @@ public void onFsViewerConfig(FilesystemViewerData.Options dopt) {\n \n                 @Override\n                 public void onFsViewerSelected(String request, File file) {\n-                    appendToExistingDocument(file, SEP_RULER, true);\n+                    appendToExistingDocument(file, getSeparator(_sharedText), true);\n                 }\n \n             }, getFragmentManager(), getActivity(), FilesystemViewerCreator.IsMimeText);\n@@ -320,7 +312,7 @@ public Boolean onPreferenceClicked(Preference preference, String key, int keyId)\n                 }\n                 case R.string.pref_key__share_into__quicknote: {\n                     if (permc.doIfExtStoragePermissionGranted()) {\n-                        appendToExistingDocument(_appSettings.getQuickNoteFile(), _sharedText.length() > 200 ? SEP_RULER : \"\\n\", false);\n+                        appendToExistingDocument(_appSettings.getQuickNoteFile(), getSeparator(_sharedText), false);\n                         close = true;\n                     }\n                     break;\n@@ -364,7 +356,7 @@ public Boolean onPreferenceClicked(Preference preference, String key, int keyId)\n \n             if (preference.getKey().startsWith(\"/\")) {\n                 if (permc.doIfExtStoragePermissionGranted()) {\n-                    appendToExistingDocument(new File(preference.getKey()), SEP_RULER, true);\n+                    appendToExistingDocument(new File(preference.getKey()), getSeparator(_sharedText), true);\n                     close = false;\n                 }\n             }\n@@ -398,4 +390,55 @@ private void addDocumentToPrefgroup(String filepath, final PreferenceGroup prefG\n             }\n         }\n     }\n+\n+    /**\n+     * Convert text and link into a formatted link, if the text and string appear to be a link\n+     * @param text Link description\n+     * @param link Link url\n+     * @return formatted URL of format [text](url)\n+     */\n+    private static String formatLink(String text, String link) {\n+        link = link == null ? \"\" : link;\n+        text = text == null ? \"\" : text;\n+\n+        final String formattedLink;\n+        final Matcher linkMatch = Patterns.WEB_URL.matcher(link.trim());\n+        if (linkMatch.matches() && !link.trim().matches(\"\\\\s\") && !text.trim().matches(\"\\\\s\")) {\n+            // Get a resonable default text if one is not present. group 4 is the domain name\n+            try {\n+                text = TextUtils.isEmpty(text) ? linkMatch.group(4).replaceAll(\"\\\\.$\", \"\") : text;\n+            } catch (IllegalStateException | IndexOutOfBoundsException e) {\n+                text = \"\";\n+            }\n+\n+            formattedLink = String.format(\"[%s](%s )\",\n+                    text.trim().replace(\"[\", \"\\\\[\").replace(\"]\", \"\\\\]\"),\n+                    link.trim().replace(\"(\", \"\\\\(\").replace(\")\", \"\\\\)\")\n+            );\n+        } else {\n+            formattedLink = text + \" \" + link;\n+        }\n+        return formattedLink;\n+    }\n+\n+    /**\n+     * Get separator for use with appendToExistingDocument\n+     * If a small amount of text is being inserted, a newline is a sufficient separator.\n+     * If a larger amount of text is being inserted, a horizontal line `----` is added as well\n+     * @param s String to be inserted\n+     * @return Separator to be used\n+     */\n+    private static String getSeparator(final String s) {\n+        int length = 0;\n+        if (!TextUtils.isEmpty(s)) {\n+            length = s.length();\n+            // Detect if string to be inserted is a formatted link. If so, only count characters in the description\n+            final Matcher match = Pattern.compile(\"\\\\[(.*)(?<!\\\\\\\\)\\\\]\\\\(.*(?<!\\\\\\\\)\\\\)\").matcher(s);\n+            if (match.matches()) {\n+                length = match.group(1).length();\n+            }\n+        }\n+        return (length > 400) ? \"\\n----\\n\" : \"\\n\";\n+    }\n+\n }"
  }
]
