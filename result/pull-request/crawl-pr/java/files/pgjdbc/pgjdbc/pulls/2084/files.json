[
  {
    "sha": "b89462d355827d62beb70016888ea90310ee8290",
    "filename": "build.gradle.kts",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/pgjdbc/pgjdbc/blob/3bd5de593670c1556562b6e4976bfdcd95661850/build.gradle.kts",
    "raw_url": "https://github.com/pgjdbc/pgjdbc/raw/3bd5de593670c1556562b6e4976bfdcd95661850/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/pgjdbc/pgjdbc/contents/build.gradle.kts?ref=3bd5de593670c1556562b6e4976bfdcd95661850",
    "patch": "@@ -93,6 +93,11 @@ val isReleaseVersion = rootProject.releaseParams.release.get()\n \n val licenseHeaderFile = file(\"config/license.header.java\")\n \n+val releaseNotes = tasks.register<org.postgresql.buildtools.ReleaseNotesTask>(\"releaseNotes\"){\n+    group = \"Release\"\n+    description = \"Updates release notes\"\n+}\n+\n val jacocoReport by tasks.registering(JacocoReport::class) {\n     group = \"Coverage reports\"\n     description = \"Generates an aggregate report from all subprojects\""
  },
  {
    "sha": "602544572e98fa8c6f4d87469122aa36ffa6a420",
    "filename": "buildSrc/src/main/groovy/org/postgresql/buildtools/ReleaseNotesTask.groovy",
    "status": "added",
    "additions": 222,
    "deletions": 0,
    "changes": 222,
    "blob_url": "https://github.com/pgjdbc/pgjdbc/blob/3bd5de593670c1556562b6e4976bfdcd95661850/buildSrc/src/main/groovy/org/postgresql/buildtools/ReleaseNotesTask.groovy",
    "raw_url": "https://github.com/pgjdbc/pgjdbc/raw/3bd5de593670c1556562b6e4976bfdcd95661850/buildSrc/src/main/groovy/org/postgresql/buildtools/ReleaseNotesTask.groovy",
    "contents_url": "https://api.github.com/repos/pgjdbc/pgjdbc/contents/buildSrc/src/main/groovy/org/postgresql/buildtools/ReleaseNotesTask.groovy?ref=3bd5de593670c1556562b6e4976bfdcd95661850",
    "patch": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright (c) 2021, PostgreSQL Global Development Group\n+ * See the LICENSE file in the project root for more information.\n+ */\n+\n+package org.postgresql.buildtools\n+\n+import groovy.io.FileType\n+import groovy.json.JsonBuilder\n+import groovy.json.JsonSlurper\n+import org.gradle.api.DefaultTask\n+import org.gradle.api.file.DirectoryProperty\n+import org.gradle.api.tasks.Internal\n+import org.gradle.api.tasks.TaskAction\n+\n+import javax.inject.Inject\n+\n+class ReleaseNotesTask extends DefaultTask {\n+\n+    @Internal\n+    final File repositoryDirectory\n+\n+    @Inject\n+    public ReleaseNotesTask()  {\n+        repositoryDirectory = getProject().projectDir\n+    }\n+\n+    @TaskAction\n+    def releaseNotes() {\n+        try {\n+\n+            def docsDirectory = new File(\"${repositoryDirectory.getAbsolutePath()}/docs\")\n+\n+            // get current version\n+            def gradleProperties = new Properties()\n+            gradleProperties.load(new FileInputStream(\"${repositoryDirectory.getAbsolutePath()}/gradle.properties\"))\n+            def currentVersion = gradleProperties?.get('pgjdbc.version')\n+            println \"Current Version: ${currentVersion}\"\n+\n+\n+            if (checkCurrentVersionExists(repositoryDirectory, currentVersion)) {\n+                println \"Changelog already updated\"\n+                return\n+            }\n+\n+\n+            Date today = Calendar.getInstance().time\n+            def dateString = \"${new java.text.SimpleDateFormat('yyyy-MM-dd').format(today)}\"\n+            def releaseFileName = \"$dateString-$currentVersion-release.md\"\n+\n+            // does the release file already exist ?\n+            if (docsDirectory.eachFile(FileType.FILES) { it == releaseFileName }) {\n+                println \"Release file exists\"\n+                return\n+            }\n+\n+            // get the previous version\n+            def  describeCommands = [\"git\", \"describe\", \"--match\", \"REL*\", \"--abbrev=0\"]\n+            def previousVersion\n+\n+            def gitProcess = describeCommands.execute(null,  repositoryDirectory)\n+            gitProcess.waitFor()\n+\n+            if (gitProcess.exitValue() == 0 ) {\n+                previousVersion = gitProcess.in.newReader().readLine()\n+            }\n+\n+\n+            // create the new post\n+            def releaseNote = \"\"\"---\n+    title:  PostgreSQL JDBC Driver ${currentVersion} Released\n+    date:   ${new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss Z').format(today)}\n+    categories:\n+    - new_release\n+    version: ${currentVersion}\n+    ---\n+    **Notable changes**\n+\n+    ${notableChanges(repositoryDirectory, previousVersion)}\n+    <!--more-->\n+\n+    **Commits by author**\n+\n+    ${getContributors(repositoryDirectory, previousVersion)}\n+    \"\"\"\n+            println releaseNote\n+            // write release notes\n+            File releaseFile = new File(\"${repositoryDirectory.getAbsolutePath()}/docs/_posts/$releaseFileName\")\n+            releaseFile << releaseNote\n+\n+            // update the changelog\n+            updateChangeLog(repositoryDirectory, currentVersion)\n+\n+        return\n+    } catch( Exception e ) {\n+        print e\n+    }\n+}\n+\n+def updateChangeLog( dir, currentVersion ) {\n+    File tempFile = File.createTempFile(\"CHANGELOG\", \"MD\")\n+    File changeLog= new File(\"${dir.getAbsolutePath()}/CHANGELOG.md\")\n+\n+    changeLog.eachLine {\n+        if ( it.contains(\"[Unreleased]\") ) {\n+            tempFile << \"\"\"## [Unreleased]\n+### Changed\n+\n+### Added\n+\n+### Fixed\n+\n+\"\"\"\n+            tempFile << \"[$currentVersion]\\n\"\n+        } else {\n+            tempFile << it + '\\n'\n+        }\n+    }\n+    tempFile.renameTo(changeLog.getAbsolutePath())\n+}\n+def checkCurrentVersionExists (dir, currentVersion ) {\n+    FileInputStream fis = new FileInputStream(\"${dir.getAbsolutePath()}/CHANGELOG.md\")\n+    fis.eachLine {\n+        if ( it.contains(\"[${currentVersion.substring(3)}]\") ) {\n+            return true\n+        }\n+    }\n+    return false\n+}\n+\n+def notableChanges( dir, previousVersion ){\n+    def currentChanges =\"\"\n+    FileInputStream fis = new FileInputStream(\"${dir.getAbsolutePath()}/CHANGELOG.md\")\n+    int state = 0\n+\n+    fis.eachLine {\n+\n+        if (state == 0 && it.contains('[Unreleased]')) {\n+            state = 1\n+        }\n+        else if (state == 1 ) {\n+\n+            if (!it.contains(\"[${previousVersion.substring(3)}]\")) {\n+                currentChanges += it +'\\n'\n+            } else {\n+                state = 2\n+            }\n+        }\n+    }\n+    return currentChanges\n+}\n+\n+/**\n+ * We are going to change the contributors map here.\n+ * @param contributors\n+ * @param sha\n+ * @return\n+ */\n+def getContributorForSha(Map contributors, sha){\n+\n+    def url = new URL(\"https://api.github.com/repos/pgjdbc/pgjdbc/commits/$sha\")\n+    def jsonSlurper = new JsonSlurper()\n+    def commit = jsonSlurper.parse(url)\n+    def author = commit.commit.author\n+    if (!contributors.containsKey(author.name)) {\n+        if ( author.html_url) {\n+            contributors.put(author.name, author.html_url)\n+        } else {\n+            contributors.put(author.name, author.email)\n+        }\n+    }\n+}\n+\n+def getContributors(File repoPath, previousRelease) {\n+    def authorCommits = \"\"\n+    def jsonSlurper = new JsonSlurper()\n+    File contributorFile = new File(\"$repoPath.path/contributors.json\")\n+    def contributors = jsonSlurper.parse(contributorFile)\n+\n+    String[] commands = [\"git\", \"shortlog\", \"--format=%s@@@%H@@@%h@@@\",\n+                         \"--grep=maven-release-plugin|update versions in readme.md\",\n+                         \"--extended-regexp\", \"--invert-grep\", \"--no-merges\", \"$previousRelease..HEAD\"]\n+\n+    def gitProcess = commands.execute(null, repoPath)\n+    gitProcess.waitFor()\n+\n+    if (gitProcess.exitValue() != 0) {\n+        gitProcess.err.eachLine {\n+            println it\n+        }\n+    } else {\n+        gitProcess.in.eachLine {\n+            if (it.contains('@@@')) {\n+                String[] components = it.split('@@@')\n+                String subject = components[0]\n+                String sha = components[1]\n+                String shortSha = components[2]\n+                getContributorForSha(contributors, shortSha)\n+                def pattern = /\\(?#(\\d+)\\)?/\n+                if (subject =~ pattern) {\n+                    subject = subject.replaceFirst(pattern, \"[PR ${1}](https://github.com/pgjdbc/pgjdbc/pull/${1})\")\n+                    //$matcher.group(1)\"\n+                } else {\n+                    subject = \"\"\n+                }\n+\n+                authorCommits += subject + '\\n'\n+            } else {\n+                authorCommits += it + '\\n'\n+            }\n+\n+        }\n+    }\n+\n+    //TODO: This doesn't write the braces before and after\n+    contributorFile.write(new JsonBuilder(contributors).toPrettyString())\n+    return authorCommits\n+    }\n+\n+}\n+\n+"
  }
]
