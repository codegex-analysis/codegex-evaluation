[
  {
    "sha": "9b2ad5137f3abd358447c74bf09ed9d1f0adab37",
    "filename": ".github/workflows/main.yml",
    "status": "modified",
    "additions": 95,
    "deletions": 10,
    "changes": 105,
    "blob_url": "https://github.com/pgjdbc/pgjdbc/blob/256920dd53123ae0b6f29c1ff60c5d1975a4d442/.github/workflows/main.yml",
    "raw_url": "https://github.com/pgjdbc/pgjdbc/raw/256920dd53123ae0b6f29c1ff60c5d1975a4d442/.github/workflows/main.yml",
    "contents_url": "https://api.github.com/repos/pgjdbc/pgjdbc/contents/.github/workflows/main.yml?ref=256920dd53123ae0b6f29c1ff60c5d1975a4d442",
    "patch": "@@ -14,31 +14,64 @@ on:\n jobs:\n   ubuntu-code-style:\n     name: 'Ubuntu, code style (JDK 8)'\n-    runs-on: ubuntu-latest\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        include:\n+          - os: ubuntu-latest\n+          - os: self-hosted\n+    env:\n+      ACTIONS_STEP_DEBUG: true\n+      ACTIONS_RUNNER_DEBUG: true\n+      ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n     steps:\n     - uses: actions/checkout@v2\n       with:\n         fetch-depth: 50\n+\n+    - name: 'Get test node ARCH'\n+      run: echo \"::set-output name=arch_name::$(uname -i)\"\n+      id: get_arch_name\n+\n     - name: 'Set up JDK 8'\n+      if: ${{ steps.get_arch_name.outputs.arch_name != 'aarch64' }}\n       uses: actions/setup-java@v1\n       with:\n         java-version: 8\n+\n+    - name: 'Setup JDK 8 on ARM64'\n+      if: ${{ steps.get_arch_name.outputs.arch_name == 'aarch64' }}\n+      uses: AdoptOpenJDK/install-jdk@v1\n+      with:\n+        impl: hotspot # or openj9\n+        version: '8'\n+        architecture: aarch64\n+\n     - uses: burrunan/gradle-cache-action@v1\n       name: Verify code style\n       env:\n         S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}\n         S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}\n+        JAVA_HOME: ${{ steps.setup_jdk_arm64.outputs.JAVA_HOME_ARM64 }}\n       with:\n+        read-only: ${{ matrix.os == 'self-hosted' }}\n         job-id: jdk8\n         arguments: autostyleCheck checkstyleAll jandex\n \n   ubuntu-latest:\n-    name: 'Ubuntu, PG latest (JDK ${{ matrix.jdk }})'\n-    runs-on: ubuntu-latest\n+    name: 'Ubuntu, PG latest (JDK ${{ matrix.jdk }}) running on ${{ matrix.os }}'\n+    runs-on: ${{ matrix.os }}\n     strategy:\n       fail-fast: false\n       matrix:\n         jdk: [8, 11]\n+        include:\n+          - os: ubuntu-latest\n+          - os: self-hosted\n+    env:\n+      ACTIONS_STEP_DEBUG: true\n+      ACTIONS_RUNNER_DEBUG: true\n+      ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n # Service must be started after checkout, because we want to use git-stored files for initialization\n # of the Docker container. So we start it with and explicit docker ... command\n #    services:\n@@ -67,10 +100,26 @@ jobs:\n     - name: Start PostgreSQL\n       working-directory: docker\n       run: docker-compose up -d && docker-compose logs\n+\n+    - name: 'Get test node ARCH'\n+      run: echo \"::set-output name=arch_name::$(uname -i)\"\n+      id: get_arch_name\n+\n     - name: 'Set up JDK ${{ matrix.jdk }}'\n+      if: ${{ steps.get_arch_name.outputs.arch_name != 'aarch64' }}\n       uses: actions/setup-java@v1\n       with:\n         java-version: ${{ matrix.jdk }}\n+        architecture: x64\n+\n+    - name: 'Setup JDK ${{ matrix.jdk }} on ARM64'\n+      if: ${{ steps.get_arch_name.outputs.arch_name == 'aarch64' }}\n+      uses: AdoptOpenJDK/install-jdk@v1\n+      with:\n+        impl: hotspot # or openj9\n+        version: ${{ matrix.jdk }}\n+        architecture: aarch64\n+\n     - name: Prepare ssltest.local.properties\n       run: echo enable_ssl_tests=true > ssltest.local.properties\n     - uses: burrunan/gradle-cache-action@v1\n@@ -79,6 +128,7 @@ jobs:\n         S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}\n         S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}\n       with:\n+        read-only: ${{ matrix.os == 'self-hosted' }}\n         job-id: jdk${{ matrix.jdk }}\n         arguments: --scan --no-parallel --no-daemon jandex test\n         properties: |\n@@ -92,6 +142,9 @@ jobs:\n       - uses: actions/checkout@v2\n         with:\n           fetch-depth: 50\n+      - name: 'Get test node ARCH'\n+        run: echo \"::set-output name=arch_name::$(uname -i)\"\n+        id: get_arch_name\n       - name: 'Set up JDK 11'\n         uses: actions/setup-java@v1\n         with:\n@@ -102,6 +155,7 @@ jobs:\n           S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}\n           S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}\n         with:\n+          read-only: ${{ matrix.os == 'self-hosted' }}\n           job-id: checker-jdk11\n           arguments: --scan --no-parallel --no-daemon -PenableCheckerframework classes\n \n@@ -116,15 +170,26 @@ jobs:\n         working-directory: docker\n         run: docker-compose up -d && docker-compose logs\n       - name: 'Set up JDK 11'\n+        if: ${{ steps.get_arch_name.outputs.arch_name != 'aarch64' }}\n         uses: actions/setup-java@v1\n         with:\n           java-version: 11\n+\n+      - name: 'Setup JDK 11 on ARM64'\n+        if: ${{ steps.get_arch_name.outputs.arch_name == 'aarch64' }}\n+        uses: AdoptOpenJDK/install-jdk@v1\n+        with:\n+          impl: hotspot # or openj9\n+          version: '11'\n+          architecture: aarch64\n+\n       - uses: burrunan/gradle-cache-action@v1\n         name: Prepare source distribution\n         env:\n           S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}\n           S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}\n         with:\n+          read-only: ${{ matrix.os == 'self-hosted' }}\n           job-id: source-release-jdk11\n           arguments: --scan --no-parallel --no-daemon sourceDistribution -Ppgjdbc.version=1.0 -Prelease\n       - name: Verify source distribution\n@@ -135,20 +200,39 @@ jobs:\n           mvn --batch-mode --fail-at-end --show-version verify\n \n   gss-encryption:\n-    name: 'Ubuntu, gss encryption (JDK 8)'\n-    runs-on: ubuntu-latest\n+    name: 'Ubuntu, gss encryption (JDK ${{matrix.jdk}}) running on ${{matrix.os}}'\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        jdk: [8, 11]\n+        include:\n+          - os: ubuntu-latest\n+          - os: self-hosted\n \n+    env:\n+      ACTIONS_STEP_DEBUG: true\n+      ACTIONS_RUNNER_DEBUG: true\n+      ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n     steps:\n     - uses: actions/checkout@v2\n+    - name: 'Get test node ARCH'\n+      run: echo \"::set-output name=arch_name::$(uname -i)\"\n+      id: get_arch_name\n+\n     - name: 'Set up JDK 8'\n+      if: ${{ steps.get_arch_name.outputs.arch_name != 'aarch64' }}\n       uses: actions/setup-java@v1\n       with:\n         java-version: 8\n-    - name: 'Install software'\n-      run: |\n-        sudo apt -y update\n-        sudo apt -y install krb5-kdc krb5-admin-server libkrb5-dev postgresql-12\n-        \n+    - name: 'Setup JDK 8 on ARM64'\n+      if: ${{ steps.get_arch_name.outputs.arch_name == 'aarch64' }}\n+      uses: AdoptOpenJDK/install-jdk@v1\n+      with:\n+        impl: hotspot # or openj9\n+        version: '8'\n+        architecture: aarch64\n+\n     - name: 'Update hosts'\n       run: |\n         sudo -- sh -c \"echo 127.0.0.1 localhost auth-test-localhost.postgresql.example.com > /etc/hosts\"\n@@ -157,6 +241,7 @@ jobs:\n     - uses: burrunan/gradle-cache-action@v1\n       name: Build pgjdbc\n       with:\n+        read-only: ${{ matrix.os == 'self-hosted' }}\n         job-id: gss-jdk8\n         arguments: publishToMavenLocal -Ppgjdbc.version=1.0.0-dev-master -PskipJavadoc\n     - name: Run tests"
  }
]
