[
  {
    "sha": "301a384f8ec19acae776f8c0c7f26b882e5144e3",
    "filename": "LevelOne/src/Lessons/lesson7/Online/GameMap.java",
    "status": "modified",
    "additions": 274,
    "deletions": 7,
    "changes": 281,
    "blob_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/blob/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/GameMap.java",
    "raw_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/raw/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/GameMap.java",
    "contents_url": "https://api.github.com/repos/RustemFarkhutdinov/JavaGeekBrains/contents/LevelOne/src/Lessons/lesson7/Online/GameMap.java?ref=946224b77b862161999d5d334d6f56b745a103a5",
    "patch": "@@ -2,17 +2,284 @@\n \n import javax.swing.*;\n import java.awt.*;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.util.Random;\n \n-public class GameMap extends JPanel {\n \n-    public static final int GM_HvsH = 0;\n-    public static final int GM_HvsAI = 1;\n+public class GameMap extends JPanel {\n+    public static final int GM_HVH = 0;\n+    public static final int GM_HVA = 1;\n     public static final int GM_AIvsAI = -1;\n \n-    GameMap(){\n-        setBackground(new Color(116, 149, 226));\n+    private static final int HUMAN_DOT = 1;\n+    private static final int AI_DOT = 2;\n+    private static final int EMPTY_DOT = 0;\n+    private static final int OVAL_PADDING = 5;\n+\n+    private static final Random RANDOM = new Random();\n+\n+    private int[][] map;\n+    private int mapSizeX;\n+    private int mapSizeY;\n+    private int winLength;\n+    private int modeGame;\n+\n+    private int cellWidth;\n+    private int cellHeight;\n+\n+    private boolean initMap;\n+    private boolean isGameOver;\n+\n+    private int currentWinEvent;\n+\n+    private static final int EVENT_DRAW = 0;\n+    private static final int EVENT_WIN_HUMAN = 1;\n+    private static final int EVENT_WIN_AI = 2;\n+\n+    private static final String TEXT_EVENT_WIN_HUMAN = \"Human win!\";\n+    private static final String TEXT_EVENT_WIN_AI = \"AI win!\";\n+    private static final String TEXT_EVENT_WIN_DRAW = \"DRAW!\";\n+\n+\n+    GameMap() {\n+        setBackground(Color.GREEN);\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseReleased(MouseEvent e) {\n+                super.mouseReleased(e);\n+                update(e);\n+            }\n+        });\n+        initMap = false;\n+    }\n+\n+    void startGameWithParams(int mapSizeX, int mapSizeY, int winLength, int modeGame) {\n+        this.mapSizeX = mapSizeX;\n+        this.mapSizeY = mapSizeY;\n+        this.winLength = winLength;\n+        this.modeGame = modeGame;\n+        this.map = new int[mapSizeY][mapSizeX];\n+        initMap = true;\n+        isGameOver = false;\n+        repaint();\n+    }\n+\n+    @Override\n+    protected void paintComponent(Graphics g) {\n+        super.paintComponent(g);\n+        render(g);\n+    }\n+\n+    private void update(MouseEvent e) {\n+        if (!initMap) return;\n+        if (isGameOver) return;\n+\n+        int cellX = e.getX() / cellWidth;\n+        int cellY = e.getY() / cellHeight;\n+\n+        if (!isValidCell(cellX, cellY) || !isEmptyCell(cellX, cellY)) {\n+            return;\n+        }\n+\n+        map[cellY][cellX] = HUMAN_DOT;\n+\n+        if (checkWin(HUMAN_DOT)) {\n+            setGameOverEvent(EVENT_WIN_HUMAN);\n+            return;\n+        }\n+\n+        if (isFullMap()) {\n+            setGameOverEvent(EVENT_DRAW);\n+            return;\n+        }\n+\n+        aiTurn();\n+        repaint();\n+\n+        if (checkWin(AI_DOT)) {\n+            setGameOverEvent(EVENT_WIN_AI);\n+            return;\n+        }\n+\n+        if (isFullMap()) {\n+            setGameOverEvent(EVENT_DRAW);\n+            return;\n+        }\n+\n+    }\n+\n+    private void setGameOverEvent(int valueEvent) {\n+        isGameOver = true;\n+        currentWinEvent = valueEvent;\n+        repaint();\n+    }\n+\n+    private void render(Graphics g) {\n+        if (!initMap) return;\n+\n+        int width = getWidth();\n+        int height = getHeight();\n+\n+        cellWidth = width / mapSizeX;\n+        cellHeight = height / mapSizeY;\n+\n+        g.setColor(Color.WHITE);\n+\n+        for (int i = 0; i < mapSizeY; i++) {\n+            int y = i * cellHeight;\n+            g.drawLine(0, y, width, y);\n+        }\n+\n+        for (int i = 0; i < mapSizeX; i++) {\n+            int x = i * cellWidth;\n+            g.drawLine(x, 0, x, height);\n+        }\n+\n+\n+        for (int y = 0; y < mapSizeY; y++) {\n+            for (int x = 0; x < mapSizeX; x++) {\n+\n+                if (isEmptyCell(x, y)) {\n+                    continue;\n+                }\n+                if (map[y][x] == HUMAN_DOT) {\n+                    g.setColor(new Color(0, 4, 0));\n+                    g.fillOval(x * cellWidth + OVAL_PADDING, y * cellHeight + OVAL_PADDING, cellWidth - OVAL_PADDING * 2, cellHeight - OVAL_PADDING * 2);\n+                } else if (map[y][x] == AI_DOT) {\n+                    g.setColor(new Color(255, 0, 0));\n+                    g.fillOval(x * cellWidth + OVAL_PADDING, y * cellHeight + OVAL_PADDING, cellWidth - OVAL_PADDING * 2, cellHeight - OVAL_PADDING * 2);\n+                } else {\n+                    throw new RuntimeException(\"Invalid render player in y = \" + y + \" x = \" + x);\n+                }\n+            }\n+        }\n+        if (isGameOver) {\n+            showMessageGameOverEvent(g);\n+        }\n+\n+    }\n+\n+    private void showMessageGameOverEvent(Graphics g) {\n+        g.setColor(Color.DARK_GRAY);\n+        g.fillRect(0, 200, getWidth(), 70);\n+        g.setColor(Color.ORANGE);\n+        g.setFont(new Font(\"Times New Roman\", Font.BOLD, 40));\n+        switch (currentWinEvent) {\n+            case EVENT_DRAW:\n+                g.drawString(TEXT_EVENT_WIN_DRAW, 180, getHeight() / 2);\n+                break;\n+            case EVENT_WIN_HUMAN:\n+                g.drawString(TEXT_EVENT_WIN_HUMAN, 150, getHeight() / 2);\n+                break;\n+            case EVENT_WIN_AI:\n+                g.drawString(TEXT_EVENT_WIN_AI, 180, getHeight() / 2);\n+                break;\n+            default:\n+                throw new RuntimeException(\"Invalid winEvent \" + currentWinEvent);\n+        }\n     }\n-    void startGameWithParams(int mapSizeX, int mapSizeY, int winLength, int modeGame){\n-    System.out.println(\"mapSizeX = \" + mapSizeX + \". mapSizeY= \" + mapSizeY + \". winLength = \"  + winLength + \". You Play with = \" + + modeGame);\n+\n+    public void aiTurn() {\n+        if (turnAIWinCell()) {\n+            return;\n+        }\n+        if (turnHumanWinCell()) {\n+            return;\n+        }\n+        int x;\n+        int y;\n+        do {\n+            x = RANDOM.nextInt(mapSizeX);\n+            y = RANDOM.nextInt(mapSizeY);\n+        } while (!isEmptyCell(x, y));\n+        map[y][x] = AI_DOT;\n+    }\n+\n+    private boolean turnAIWinCell() {\n+        for (int i = 0; i < mapSizeY; i++) {\n+            for (int j = 0; j < mapSizeX; j++) {\n+                if (isEmptyCell(j, i)) {\n+                    map[i][j] = AI_DOT;\n+                    if (checkWin(AI_DOT)) {\n+                        return true;\n+                    }\n+                    map[i][j] = EMPTY_DOT;\n+                }\n+            }\n+        }\n+        return false;\n     }\n+\n+    private boolean turnHumanWinCell() {\n+        for (int i = 0; i < mapSizeY; i++) {\n+            for (int j = 0; j < mapSizeX; j++) {\n+                if (isEmptyCell(j, i)) {\n+                    map[i][j] = HUMAN_DOT;\n+                    if (checkWin(HUMAN_DOT)) {\n+                        map[i][j] = AI_DOT;\n+                        return true;\n+                    }\n+                    map[i][j] = EMPTY_DOT;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean checkWin(int player) {\n+        for (int i = 0; i < mapSizeX; i++) {\n+            for (int j = 0; j < mapSizeY; j++) {\n+                if (checkLine(i, j, 1, 0, winLength, player)) {\n+                    return true;\n+                }\n+                if (checkLine(i, j, 1, 1, winLength, player)) {\n+                    return true;\n+                }\n+                if (checkLine(i, j, 0, 1, winLength, player)) {\n+                    return true;\n+                }\n+                if (checkLine(i, j, 1, -1, winLength, player)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean checkLine(int x, int y, int vx, int vy, int len, int player) {\n+        final int farX = x + (len - 1) * vx;\n+        final int farY = y + (len - 1) * vy;\n+        if (!isValidCell(farX, farY)) {\n+            return false;\n+        }\n+        for (int i = 0; i < len; i++) {\n+            if (map[y + i * vy][x + i * vx] != player) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isFullMap() {\n+        for (int i = 0; i < mapSizeY; i++) {\n+            for (int j = 0; j < mapSizeX; j++) {\n+                if (map[i][j] == EMPTY_DOT) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isValidCell(int x, int y) {\n+        return x >= 0 && x < mapSizeX && y >= 0 && y < mapSizeY;\n+    }\n+\n+    public boolean isEmptyCell(int x, int y) {\n+        return map[y][x] == EMPTY_DOT;\n+    }\n+\n }\n+"
  },
  {
    "sha": "b599ff46e785950131029c3c5bbdcb3081b28100",
    "filename": "LevelOne/src/Lessons/lesson7/Online/MainWindows.java",
    "status": "modified",
    "additions": 30,
    "deletions": 24,
    "changes": 54,
    "blob_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/blob/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/MainWindows.java",
    "raw_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/raw/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/MainWindows.java",
    "contents_url": "https://api.github.com/repos/RustemFarkhutdinov/JavaGeekBrains/contents/LevelOne/src/Lessons/lesson7/Online/MainWindows.java?ref=946224b77b862161999d5d334d6f56b745a103a5",
    "patch": "@@ -1,54 +1,60 @@\n package Lessons.lesson7.Online;\n \n+\n import javax.swing.*;\n import java.awt.*;\n import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+class MainWindow extends JFrame {\n \n-public class MainWindows extends JFrame {\n-    private static final int winWIDTH = 500;\n-    private static final int winHEIGHT = 500;\n-    private static final int winPosX = 600;\n-    private static final int winPosY = 250;\n-    private Setting setting;\n+    private static final int WIN_WIDTH = 507;\n+    private static final int WIN_HEIGHT = 550;\n+    private static final int WIN_POS_X = 650;\n+    private static final int WIN_POS_Y = 250;\n+\n+    private Settings settings;\n     private GameMap gameMap;\n \n-    MainWindows(){\n+    MainWindow() {\n         setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n-        setSize(winWIDTH, winHEIGHT);\n-        setLocation(winPosX, winPosY);\n-        setTitle(\"Game X/O\");\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n+        setLocation(WIN_POS_X, WIN_POS_Y);\n+        setTitle(\"Game X-O\");\n         setResizable(false);\n \n-        setting = new Setting(this);\n+        settings = new Settings(this);\n         gameMap = new GameMap();\n \n-        JButton buttonStartGame = new JButton(\"Start New Game\");\n-        buttonStartGame.addActionListener(new AbstractAction() {\n+        JButton btnStartGame = new JButton(\"Start New Game\");\n+        btnStartGame.addActionListener(new ActionListener() {\n             @Override\n             public void actionPerformed(ActionEvent e) {\n-                setting.setVisible(true);\n+                settings.setVisible(true);\n             }\n         });\n \n-        JButton buttonExitGame = new JButton(\"Exit Game\");\n-        buttonExitGame.addActionListener(new AbstractAction() {\n+        JButton btnExitGame = new JButton(\"Exit Game\");\n+        btnExitGame.addActionListener(new ActionListener() {\n             @Override\n             public void actionPerformed(ActionEvent e) {\n-               System.exit(0);\n+                System.exit(0);\n             }\n         });\n \n-       JPanel panelForButton = new JPanel();\n-       panelForButton.setLayout(new GridLayout(1, 2));\n-       panelForButton.add(buttonStartGame);\n-       panelForButton.add(buttonExitGame);\n-\n+        JPanel panelForButton = new JPanel();\n+        panelForButton.setLayout(new GridLayout(1, 2));\n+        panelForButton.add(btnStartGame);\n+        panelForButton.add(btnExitGame);\n \n         add(panelForButton, BorderLayout.SOUTH);\n         add(gameMap);\n+\n         setVisible(true);\n     }\n-    void getParamsFromSettingAndStartGame(int mapSizeX, int mapSizeY, int winLength, int madeGame) {\n-        gameMap.startGameWithParams(mapSizeX, mapSizeY, winLength, madeGame);\n+\n+    void getParamsFromSettingAndStartGame(int mapSizeX, int mapSizeY, int winLength, int modeGame) {\n+        gameMap.startGameWithParams(mapSizeX, mapSizeY, winLength, modeGame);\n     }\n+\n }"
  },
  {
    "sha": "ac041e00075ec4a7c3faa1c98c5b759ce20ea311",
    "filename": "LevelOne/src/Lessons/lesson7/Online/Setting.java",
    "status": "modified",
    "additions": 79,
    "deletions": 73,
    "changes": 152,
    "blob_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/blob/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/Setting.java",
    "raw_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/raw/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/Setting.java",
    "contents_url": "https://api.github.com/repos/RustemFarkhutdinov/JavaGeekBrains/contents/LevelOne/src/Lessons/lesson7/Online/Setting.java?ref=946224b77b862161999d5d334d6f56b745a103a5",
    "patch": "@@ -5,125 +5,131 @@\n import javax.swing.event.ChangeListener;\n import java.awt.*;\n import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n \n-public class Setting extends JFrame {\n-    private static final int winWIDTH = 350;\n-    private static final int winHEIGHT = 250;\n+class Settings extends JFrame {\n \n-    private final int MinMapSize = 3;\n-    private final int MaxMapSize = 10;\n-    private final int MinWinLength = 3;\n-    private final String MapSizePrefix = \"Map size is: \";\n-    private final String WinLenPrefix = \"Win win len is: \";\n-//    private static final int winPosX = 675;\n-//    private static final int winPosY = 350;\n+    public static int gameMode;\n \n+    private static final int WIN_WIDTH = 350;\n+    private static final int WIN_HEIGHT = 250;\n \n-    private MainWindows mainWindows;\n+    private final int MIN_WIN_LENGTH = 3;\n+    private final int MIN_MAP_SIZE = 3;\n+    private final int MAX_MAP_SIZE = 10;\n+\n+    private final String MAP_SIZE_PREFIX = \"Map size is: \";\n+    private final String WIN_LEN_PREFIX = \"Win length is: \";\n+\n+\n+    private MainWindow mainWindow;\n \n     private JRadioButton humanVsHuman;\n-    private JRadioButton humanVsAI;\n+    private JRadioButton humanVsAi;\n     private JRadioButton AIvsAI;\n     private JSlider sliderSetSizeMap;\n     private JSlider sliderSetWinLength;\n-    private JButton buttonStart;\n+    private JButton btnStart;\n \n-    Setting(MainWindows mainWindows){\n-        this.mainWindows = mainWindows;\n-        Rectangle mainWindowBounds = mainWindows.getBounds();\n+    Settings(MainWindow mainWindow) {\n+        this.mainWindow = mainWindow;\n+        Rectangle mainWindowBounds = mainWindow.getBounds();\n+        setBackground(Color.gray);\n \n-        int posX = (int) mainWindowBounds.getCenterX() - winWIDTH / 2;\n-        int posY = (int) mainWindowBounds.getCenterY() - winHEIGHT / 2;\n+        int posX = (int) mainWindowBounds.getCenterX() - WIN_WIDTH / 2;\n+        int posY = (int) mainWindowBounds.getCenterY() - WIN_HEIGHT / 2;\n \n         setLocation(posX, posY);\n-        setSize(winWIDTH, winHEIGHT);\n- //       setLocation(winPosX, winPosY);\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n         setTitle(\"Settings\");\n         setResizable(false);\n         setLayout(new GridLayout(10, 1));\n \n         setGameModeControl();\n         setSizeMapControl();\n-        finishSetting();\n+        finishSettings();\n \n     }\n \n-    private void setGameModeControl(){\n-    add(new JLabel(\"Choose your game mode\"));\n-    humanVsHuman = new JRadioButton(\"Human vs. Human\", true);\n-    humanVsAI = new JRadioButton(\"Human vs. AI\");\n-    AIvsAI = new JRadioButton(\"AI vs. AI\");\n+    private void setGameModeControl() {\n+        add(new JLabel(\"Choose your game mode\"));\n+        humanVsHuman = new JRadioButton(\"Human vs. Human\", true);\n+        humanVsAi = new JRadioButton(\"Human vs. Ai\");\n+      AIvsAI = new JRadioButton(\"AI vs. AI\");\n \n-    ButtonGroup gameModeGroup = new ButtonGroup();\n-    gameModeGroup.add(humanVsAI);\n-    gameModeGroup.add(humanVsHuman);\n-    gameModeGroup.add(AIvsAI);\n+        ButtonGroup gameModeGroup = new ButtonGroup();\n+        gameModeGroup.add(humanVsHuman);\n+        gameModeGroup.add(humanVsAi);\n+      gameModeGroup.add(AIvsAI);\n \n-    add(humanVsHuman);\n-    add(humanVsAI);\n-    add(AIvsAI);\n+        add(humanVsHuman);\n+        add(humanVsAi);\n+       add(AIvsAI);\n     }\n \n-    private void setSizeMapControl(){\n-        JLabel LbMapSize = new JLabel(MapSizePrefix + MinMapSize);\n-        JLabel LbWinLen = new JLabel(WinLenPrefix + MinWinLength);\n \n-        sliderSetSizeMap = new JSlider(MinMapSize, MaxMapSize, MinMapSize);\n+    private void setSizeMapControl() {\n+        JLabel lbMapSize = new JLabel(MAP_SIZE_PREFIX + MIN_MAP_SIZE);\n+        JLabel lbWinLen = new JLabel(WIN_LEN_PREFIX + MIN_WIN_LENGTH);\n+\n+        sliderSetSizeMap = new JSlider(MIN_MAP_SIZE, MAX_MAP_SIZE, MIN_MAP_SIZE);\n         sliderSetSizeMap.addChangeListener(new ChangeListener() {\n             @Override\n             public void stateChanged(ChangeEvent e) {\n-            int currentMapSize = sliderSetSizeMap.getValue();\n-            LbMapSize.setText(MapSizePrefix + currentMapSize);\n-            sliderSetWinLength.setMaximum(currentMapSize);\n+                int currentMapSize = sliderSetSizeMap.getValue();\n+                lbMapSize.setText(MAP_SIZE_PREFIX + currentMapSize);\n+                sliderSetWinLength.setMaximum(currentMapSize);\n             }\n         });\n \n-\n-        sliderSetWinLength = new JSlider(MinWinLength, MaxMapSize, MinMapSize );\n+        sliderSetWinLength = new JSlider(MIN_WIN_LENGTH, MIN_MAP_SIZE, MIN_MAP_SIZE);\n         sliderSetWinLength.addChangeListener(new ChangeListener() {\n-         @Override\n-         public void stateChanged(ChangeEvent e) {\n-             LbWinLen.setText(WinLenPrefix + sliderSetWinLength.getValue());\n-        }\n+            @Override\n+            public void stateChanged(ChangeEvent e) {\n+                lbWinLen.setText(WIN_LEN_PREFIX + sliderSetWinLength.getValue());\n+            }\n         });\n \n-\n-        add(new Label(\"Choose Map size\"));\n-        add(LbMapSize);\n+        add(new JLabel(\"Choose map size\"));\n+        add(lbMapSize);\n         add(sliderSetSizeMap);\n-        add(LbWinLen);\n+        add(lbWinLen);\n         add(sliderSetWinLength);\n     }\n \n-    private void finishSetting(){\n-    buttonStart = new JButton(\"Start Game\");\n-    buttonStart.addActionListener(new AbstractAction() {\n-        @Override\n-        public void actionPerformed(ActionEvent e) {\n-            startNextGame();\n-        }\n-    });\n-    add(buttonStart);\n+    private void finishSettings() {\n+        btnStart = new JButton(\"Start Game\");\n+        btnStart.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                startNextGame();\n+            }\n+        });\n+        add(btnStart);\n+\n     }\n \n-    private void startNextGame(){\n+\n+    private void startNextGame() {\n         int gameMode;\n \n-        if(humanVsHuman.isSelected()){\n-            gameMode = GameMap.GM_HvsH;\n-        } else if (humanVsAI.isSelected()){\n-            gameMode = GameMap.GM_HvsAI;\n-        } else if (AIvsAI.isSelected()){\n-            gameMode = GameMap.GM_AIvsAI;\n-        } else {\n-            throw new RuntimeException(\"Invalid choose game mode\");\n-        }\n+        if (humanVsHuman.isSelected()) {\n+            gameMode = GameMap.GM_HVH;\n+        } else if (humanVsAi.isSelected()) {\n+            gameMode = GameMap.GM_HVA;\n+        } else if (AIvsAI.isSelected()) {\n+                gameMode = GameMap.GM_AIvsAI;\n+            } else {\n+                throw new RuntimeException(\"Invalid choose game mode\");\n+            }\n+\n \n-        int mapSize = sliderSetSizeMap.getValue();\n-        int winLen = sliderSetWinLength.getValue();\n+            int mapSize = sliderSetSizeMap.getValue();\n+            int winLn = sliderSetWinLength.getValue();\n \n-    mainWindows.getParamsFromSettingAndStartGame(mapSize, mapSize, winLen, gameMode);\n+            mainWindow.getParamsFromSettingAndStartGame(mapSize, mapSize, winLn, gameMode);\n \n-    setVisible(false);\n+        setVisible(false);\n     }\n+\n }"
  },
  {
    "sha": "6c1c98a8d204487a047aeb4484bcadc47455b148",
    "filename": "LevelOne/src/Lessons/lesson7/Online/StartCLass.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/blob/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/StartCLass.java",
    "raw_url": "https://github.com/RustemFarkhutdinov/JavaGeekBrains/raw/946224b77b862161999d5d334d6f56b745a103a5/LevelOne/src/Lessons/lesson7/Online/StartCLass.java",
    "contents_url": "https://api.github.com/repos/RustemFarkhutdinov/JavaGeekBrains/contents/LevelOne/src/Lessons/lesson7/Online/StartCLass.java?ref=946224b77b862161999d5d334d6f56b745a103a5",
    "patch": "@@ -2,6 +2,6 @@\n \n public class StartCLass {\n     public static void main(String[] args) {\n-    new MainWindows();\n+        new MainWindow();\n     }\n }"
  }
]
