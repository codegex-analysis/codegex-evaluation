[
  {
    "sha": "b809b3b584f055fb58daf664be2cbb510331ff7e",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/Anummer.java",
    "status": "removed",
    "additions": 0,
    "deletions": 134,
    "changes": 134,
    "blob_url": "https://github.com/freerink/gba/blob/28d2211ec0225615127a617db7bda4798a5b765b/anummers/src/main/java/com/reerinkresearch/anummers/Anummer.java",
    "raw_url": "https://github.com/freerink/gba/raw/28d2211ec0225615127a617db7bda4798a5b765b/anummers/src/main/java/com/reerinkresearch/anummers/Anummer.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/Anummer.java?ref=28d2211ec0225615127a617db7bda4798a5b765b",
    "patch": "@@ -1,134 +0,0 @@\n-package com.reerinkresearch.anummers;\r\n-\r\n-public class Anummer {\r\n-\tprivate final long anummer;\r\n-\tprivate int gemeenteCode;\r\n-\tprivate String error = null;\r\n-\tprivate int errorCode = 0;\r\n-\tprivate long skipTo;\r\n-\r\n-\tpublic Anummer(long anummer, int gemeenteCode) {\r\n-\t\tthis.anummer = anummer;\r\n-\t\tthis.gemeenteCode = gemeenteCode;\r\n-\t}\r\n-\r\n-\tpublic long getAnummer() {\r\n-\t\treturn this.anummer;\r\n-\t}\r\n-\r\n-\tpublic String getError() {\r\n-\t\treturn this.error;\r\n-\t}\r\n-\r\n-\tpublic int getErrorCode() {\r\n-\t\treturn this.errorCode;\r\n-\t}\r\n-\t\r\n-\tprivate void calculateSkipTo(int consecutiveIssueIndex) {\r\n-\t\tchar[] anummer = (\"\" + this.anummer).toCharArray();\r\n-\r\n-\t\tif( anummer[consecutiveIssueIndex] < '9') {\r\n-\t\t\t// Increment digit that causes the issue\r\n-\t\t\tanummer[consecutiveIssueIndex]++;\r\n-\t\t\t// Reset all consecutive digits\r\n-\t\t\tboolean nextDigitIsZero = true;\r\n-\t\t\tfor (int i = consecutiveIssueIndex + 1; i < anummer.length; i++) {\r\n-\t\t\t\tanummer[i] = nextDigitIsZero ? '0' : '1';\r\n-\t\t\t\tnextDigitIsZero = !nextDigitIsZero;\r\n-\t\t\t}\r\n-\t\t\tthis.skipTo = Long.parseLong(new String(anummer));\r\n-\t\t\t// Issue is solved\r\n-\t\t\tthis.errorCode = 0;\r\n-\t\t} else {\r\n-\t\t\t// example v\r\n-\t\t\t//  1010109900 ->\r\n-\t\t\t//  1010110101 ->\r\n-\t\t\t//  1010120101\r\n-\t\t\tif(consecutiveIssueIndex > 2) {\r\n-\t\t\t\tanummer[consecutiveIssueIndex - 2]++;\r\n-\t\t\t\t// Reset all consecutive digits\r\n-\t\t\t\tboolean nextDigitIsZero = true;\r\n-\t\t\t\tfor (int i = consecutiveIssueIndex - 1; i < anummer.length; i++) {\r\n-\t\t\t\t\tanummer[i] = nextDigitIsZero ? '0' : '1';\r\n-\t\t\t\t\tnextDigitIsZero = !nextDigitIsZero;\r\n-\t\t\t\t}\r\n-\t\t\t\tthis.skipTo = Long.parseLong(new String(anummer));\r\n-\t\t\t} else {\r\n-\t\t\t\tthis.skipTo = this.anummer + 1;\r\n-\t\t\t\tthis.error = \"Einde van de reeks\";\r\n-\t\t\t\tthis.errorCode = 99;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic boolean isValid() {\r\n-\t\tchar[] anummer = (\"\" + this.anummer).toCharArray();\r\n-\r\n-\t\t// length exactly 10 digits\r\n-\t\tif (anummer.length != 10) {\r\n-\t\t\tthis.error = \"Lengte moet 10 zijn\";\r\n-\t\t\tthis.errorCode = 10;\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\r\n-\t\t// can't start with 0\r\n-\t\tif (anummer[0] == '0') {\r\n-\t\t\tthis.error = \"a0 mag niet 0 zijn\";\r\n-\t\t\tthis.errorCode = 11;\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\r\n-\t\t// consecutive digits may not be equal\r\n-\t\tfor (int i = 1; i < anummer.length; i++) {\r\n-\t\t\tif (anummer[i - 1] == anummer[i]) {\r\n-\t\t\t\tthis.error = \"Opeenvolgende cijfers moeten ongelijk zijn\";\r\n-\t\t\t\tthis.errorCode = i;\r\n-\t\t\t\tthis.calculateSkipTo(i);\r\n-\t\t\t\treturn false;\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\t// the sum is divisible by 11 with rest 0 or 5\r\n-\t\tint sum = 0;\r\n-\t\tfor (int i = 0; i < anummer.length; i++) {\r\n-\t\t\tsum += anummer[i] - '0';\r\n-\t\t}\r\n-\t\tint rest = sum % 11;\r\n-\t\tif ( !(rest == 0 || rest == 5) ) {\r\n-\t\t\tthis.error = \"Rest na delen door 11 van sum(a0...a9)=\" + sum + \" moet 0 of 5 zijn, rest=\" + rest;\r\n-\t\t\tthis.errorCode = 12;\r\n-\t\t\tthis.skipTo = this.anummer + 1;\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t\t\r\n-\t\t// (1*a0)+(2*a1)+(4*a2)+...+(512*a9) is divisible by 11 with rest 0\r\n-\t\tsum = 0;\r\n-\t\tint multiplier = 1;\r\n-\t\tfor (int i = 0; i < anummer.length; i++) {\r\n-\t\t\tsum += multiplier * (anummer[i] - '0');\r\n-\t\t\tmultiplier *= 2;\r\n-\t\t}\r\n-\t\trest = sum % 11;\r\n-\t\tif ( !(rest == 0) ) {\r\n-\t\t\tthis.error = \"Rest na delen door 11 van sum((1*a0)...(512*a9))=\" + sum + \" moet 0 zijn, rest=\" + rest;\r\n-\t\t\tthis.errorCode = 13;\r\n-\t\t\tthis.skipTo = this.anummer + 1;\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\r\n-\t\tthis.skipTo = this.anummer + 1;\r\n-\t\treturn true;\r\n-\t}\r\n-\r\n-\tpublic long getSkipTo() {\r\n-\t\treturn this.skipTo;\r\n-\t}\r\n-\r\n-\tpublic int getGemeenteCode() {\r\n-\t\treturn gemeenteCode;\r\n-\t}\r\n-\r\n-\tpublic void setGemeenteCode(int gemeenteCode) {\r\n-\t\tthis.gemeenteCode = gemeenteCode;\r\n-\t}\r\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "11f13badb60c6ebc19af53eb86e0e2ce18fe9dd5",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/AnummersApplication.java",
    "status": "modified",
    "additions": 111,
    "deletions": 71,
    "changes": 182,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/AnummersApplication.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/AnummersApplication.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/AnummersApplication.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -3,13 +3,13 @@\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Optional;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n@@ -23,10 +23,12 @@\n import org.springframework.web.client.RestTemplate;\n \n import com.reerinkresearch.anummers.model.Name;\n+import com.reerinkresearch.anummers.model.AllocatedAnummer;\n import com.reerinkresearch.anummers.repo.AddressRepository;\n-import com.reerinkresearch.anummers.repo.AnummerRepository;\n import com.reerinkresearch.anummers.repo.NameRepository;\n+import com.reerinkresearch.anummers.service.AnummerService;\n import com.reerinkresearch.pl.Adres;\n+import com.reerinkresearch.pl.Anummer;\n import com.reerinkresearch.pl.Datum;\n import com.reerinkresearch.pl.Geboorte;\n import com.reerinkresearch.pl.Geslacht;\n@@ -35,14 +37,16 @@\n \n @SpringBootApplication\n @RestController\n-public class AnummersApplication {\n+public class AnummersApplication implements CommandLineRunner {\n+\n+\tprivate static final long FIRST_ANUMMER = 1010101025L;\n \n \tprivate static final long ANUMMER_GENERATE_MAXITERATIONS = 100000L;\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(AnummersApplication.class);\n \n \t@Autowired\n-\tAnummerRepository anummerRepo;\n+\tAnummerService anummerService;\n \n \t@Autowired\n \tNameRepository nameRepo;\n@@ -134,87 +138,85 @@ public Name storeName(@RequestBody Name name) {\n \t}\n \n \t@GetMapping(\"/anummers\")\n-\tpublic Anummer getAnummer(@RequestParam(value = \"startFrom\", required = false) Long startFrom,\n+\tpublic AllocatedAnummer getAnummer(@RequestParam(value = \"startFrom\", required = false) Long startFrom,\n \t\t\t@RequestParam(value = \"maxIterations\", required = false) Long maxIiterations,\n \t\t\t@RequestParam(value = \"anummer\", required = false) Long anummer,\n \t\t\t@RequestParam(value = \"firstAvailable\", required = false) Boolean firstAvailable) {\n \n \t\t// Check the repo for the existence of the A-number\n-\t\tAnummer a;\n+\n \t\tif (anummer != null) {\n \t\t\tif (startFrom != null) {\n \t\t\t\tthrow new BadRequestException(\"Specify anummer or startFrom\");\n \t\t\t}\n \t\t\tif (maxIiterations != null) {\n \t\t\t\tthrow new BadRequestException(\"Specify anummer or maxIiterations\");\n \t\t\t}\n-\t\t\tOptional<com.reerinkresearch.anummers.model.Anummer> persistedAnummer = anummerRepo.findById(anummer);\n-\t\t\tif (!persistedAnummer.isPresent()) {\n+\t\t\tint gemeenteCode = this.anummerService.getGemeenteCode(anummer);\n+\t\t\tif (gemeenteCode == 0) {\n \t\t\t\tthrow new NotFoundException(\"A nummer: \" + anummer);\n \t\t\t}\n-\t\t\tcom.reerinkresearch.anummers.model.Anummer p = persistedAnummer.get();\n-\t\t\ta = new Anummer(anummer, p.getGemeenteCode() != null ? p.getGemeenteCode() : 0);\n+\t\t\treturn new AllocatedAnummer(anummer, gemeenteCode);\n \t\t} else if (firstAvailable != null && firstAvailable) {\n \t\t\t// Return the first available A nummer (where gemeenteCode == 0) from the store\n \t\t\tLOG.info(\"Get first available A nummer\");\n-\t\t\tIterator<com.reerinkresearch.anummers.model.Anummer> it = anummerRepo.findAll().iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tcom.reerinkresearch.anummers.model.Anummer p = it.next();\n-\t\t\t\tLOG.debug(\"A nummer: \" + p.getAnummer() + \", \" + p.getGemeenteCode());\n-\t\t\t\tif (p.getGemeenteCode() == null || p.getGemeenteCode() == 0) {\n-\t\t\t\t\ta = new Anummer(p.getAnummer(), 0);\n-\t\t\t\t\treturn a;\n-\t\t\t\t}\n+\t\t\tanummer = this.anummerService.popUnallocatedAnummer();\n+\t\t\tif (anummer > 0) {\n+\t\t\t\treturn new AllocatedAnummer(anummer, 0);\n \t\t\t}\n \t\t\tthrow new NotFoundException(\"Geen vrij A nummer gevonden\");\n \t\t} else {\n \t\t\tif (startFrom == null) {\n-\t\t\t\tstartFrom = 1010101025L;\n+\t\t\t\tstartFrom = FIRST_ANUMMER;\n \t\t\t}\n \t\t\tif (maxIiterations == null) {\n \t\t\t\tmaxIiterations = 1L;\n \t\t\t}\n-\t\t\ta = new Anummer(startFrom, 0);\n-\t\t\tlong iter = 0L;\n-\t\t\twhile (!a.isValid() && iter < maxIiterations) {\n-\t\t\t\tlong skipTo = a.getSkipTo();\n-\t\t\t\ta = new Anummer(skipTo, 0);\n-\t\t\t\titer++;\n+\t\t\tAnummer n = iterateToFindAnumber(startFrom, maxIiterations);\n+\t\t\tif (n.isValid()) {\n+\t\t\t\treturn new AllocatedAnummer(n.getAnummer(), 0);\n \t\t\t}\n \t\t}\n-\t\treturn a;\n+\t\treturn null;\n+\t}\n+\n+\tprivate Anummer iterateToFindAnumber(long startFrom, long maxIiterations) {\n+\t\tAnummer n = new Anummer(startFrom);\n+\t\tlong iter = 0L;\n+\t\twhile (!n.isValid() && iter < maxIiterations) {\n+\t\t\tlong skipTo = n.getSkipTo();\n+\t\t\tn = new Anummer(skipTo);\n+\t\t\titer++;\n+\t\t}\n+\t\treturn n;\n \t}\n \n \t@PostMapping(\"/anummers\")\n-\tpublic Anummer storeAnummer(@RequestBody Anummer a) {\n+\tpublic AllocatedAnummer storeAnummer(@RequestBody AllocatedAnummer a) {\n+\t\tif (a.getAnummer() == null || a.getGemeenteCode() == null || a.getGemeenteCode() == 0) {\n+\t\t\tthrow new BadRequestException(\"Specify anummer and gemeenteCode (>0)\");\n+\t\t}\n+\n \t\t// Check if we received a valid A number\n-\t\tif (!a.isValid()) {\n-\t\t\tthrow new InvalidAnummerException(a);\n+\t\tAnummer c = new Anummer(a.getAnummer());\n+\t\tif (!c.isValid()) {\n+\t\t\tthrow new InvalidAnummerException(c);\n \t\t}\n-\t\t// Check if we have it already\n-\t\tif (!anummerRepo.existsById(a.getAnummer())) {\n+\n+\t\t// Check if we have it already in the repository\n+\t\tint gemeenteCode = this.anummerService.getGemeenteCode(a.getAnummer());\n+\t\tif (gemeenteCode == 0) {\n \t\t\t// Store it in the database\n-\t\t\tcom.reerinkresearch.anummers.model.Anummer persistedAnummer = new com.reerinkresearch.anummers.model.Anummer(\n-\t\t\t\t\ta.getAnummer(), a.getGemeenteCode());\n-\t\t\tanummerRepo.save(persistedAnummer);\n+\t\t\tthis.anummerService.storeAnummer(a.getAnummer(), a.getGemeenteCode());\n \t\t} else {\n-\t\t\t// Update if the persisted gemeenteCode == 0\n-\t\t\tOptional<com.reerinkresearch.anummers.model.Anummer> p = anummerRepo.findById(a.getAnummer());\n-\t\t\tif (p.isPresent() && p.get().getGemeenteCode() != null && p.get().getGemeenteCode() == 0) {\n-\t\t\t\tp.get().setGemeenteCode(a.getGemeenteCode());\n-\t\t\t\tanummerRepo.save(p.get());\n-\t\t\t} else {\n-\t\t\t\tthrow new AlreadyExistsException(\"Anummer \" + a.getAnummer());\n-\t\t\t}\n+\t\t\tthrow new AlreadyExistsException(\"Anummer \" + a.getAnummer());\n \t\t}\n \t\treturn a;\n \t}\n \n \t@DeleteMapping(\"/anummers\")\n \tpublic long deleteAllAnummers() {\n-\t\tlong count = anummerRepo.count();\n-\t\tanummerRepo.deleteAll();\n-\t\treturn count;\n+\t\treturn this.anummerService.deleteAll();\n \t}\n \n \t@DeleteMapping(\"/names\")\n@@ -231,10 +233,8 @@ public PersoonsLijst generatePLAndStoreAnummer() {\n \t\tLOG.info(\"Random address gemeenteCode: \" + addr.getGemeenteCode());\n \n \t\t// Eerst beschikbare A nummer ophalen\n-\t\tAnummer a = this.generateAnummer();\n-\t\tif (!a.isValid()) {\n-\t\t\tthrow new InvalidAnummerException(a);\n-\t\t}\n+\t\tAllocatedAnummer a = this.generateAnummer();\n+\n \t\t// Store the A nummer for this gemeente\n \t\ta.setGemeenteCode(addr.getGemeenteCode());\n \t\tthis.storeAnummer(a);\n@@ -261,37 +261,47 @@ private String generateGeboorteDatum() {\n \t\tint year = getRandomNumber(1970, 2020);\n \t\tint month = getRandomNumber(1, 12);\n \t\tint day = getRandomNumber(1, 31);\n-\t\t//Date d = new Date(year, month, day);\n+\n \t\tCalendar c = Calendar.getInstance();\n \t\tc.set(year, month - 1, day);\n-\t\t\n+\n \t\tfinal SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\n-\t\t\n+\n \t\treturn format.format(c.getTime());\n \t}\n-\t\n-\tprivate Anummer generateAnummer() {\n-\t\ttry {\n-\t\t\tAnummer a = this.getAnummer(null, null, null, true);\n-\t\t\treturn a;\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.warn(\"No available A-nummer, generate a new one\");\n+\n+\tprivate AllocatedAnummer generateAnummer() {\n+\t\tlong free = this.anummerService.popUnallocatedAnummer();\n+\t\tLOG.info(\"Free A nummer: \" + (free > 0 ? free : \"not found\"));\n+\n+\t\tif (free > 0) {\n+\t\t\treturn new AllocatedAnummer(free, 0);\n \t\t}\n-\t\tboolean foundNewValidAnummer = false;\n-\t\tlong anummer = 0;\n-\t\twhile (!foundNewValidAnummer) {\n-\t\t\tAnummer a = this.getAnummer(anummer == 0 ? null : anummer, ANUMMER_GENERATE_MAXITERATIONS, null, null);\n+\n+\t\t// Generate a fresh one, start from the last (highest) anummer\n+\t\tlong lastAnummer = this.anummerService.getLastAnummer();\n+\t\tboolean stopSearching = false;\n+\t\tlong anummer = (lastAnummer > 0 ? lastAnummer + 1 : FIRST_ANUMMER);\n+\t\twhile (!stopSearching) {\n+\t\t\tAnummer a = iterateToFindAnumber(anummer, ANUMMER_GENERATE_MAXITERATIONS);\n \t\t\tif (a.isValid()) {\n-\t\t\t\t// Check if it already exists\n-\t\t\t\ttry {\n-\t\t\t\t\t// Ignore the result\n-\t\t\t\t\tthis.getAnummer(null, null, a.getAnummer(), null);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t// Not found is OK, other exceptions are not :)\n-\t\t\t\t\treturn a;\n+\t\t\t\t// Check if it was already allocated\n+\t\t\t\tint gemeenteCode = this.anummerService.getGemeenteCode(a.getAnummer());\n+\t\t\t\tif (gemeenteCode == 0) {\n+\t\t\t\t\tLOG.info(\"New unallocated Anummer generated: \" + a.getAnummer());\n+\t\t\t\t\treturn new AllocatedAnummer(a.getAnummer(), 0);\n+\t\t\t\t} else {\n+\t\t\t\t\tLOG.info(\"Anummer \" + a.getAnummer() + \" already allocated to \" + gemeenteCode\n+\t\t\t\t\t\t\t+ \", generating a new one\");\n \t\t\t\t}\n \t\t\t}\n-\t\t\tanummer = a.getSkipTo();\n+\t\t\t// Stop if we're at the end of the anummer range\n+\t\t\tif (a.getErrorCode() == 99) {\n+\t\t\t\tstopSearching = true;\n+\t\t\t} else {\n+\t\t\t\t// Try the suggested next value\n+\t\t\t\tanummer = a.getSkipTo();\n+\t\t\t}\n \t\t}\n \t\treturn null;\n \t}\n@@ -334,4 +344,34 @@ public RestTemplate restTemplate(RestTemplateBuilder builder) {\n \t\treturn builder.build();\n \t}\n \n+\t@Override\n+\tpublic void run(String... args) throws Exception {\n+\t\tint waitSec = 10;\n+\t\tLOG.info(\"Start generating Anummers after \" + waitSec + \" seconds\");\n+\t\tThread.sleep(waitSec * 1000L);\n+\t\t// Use the runner to generate Anummers in a relaxed tempo\n+\t\tlong lastAnummer = this.anummerService.getLastAnummer();\n+\t\tlong anummer = (lastAnummer > 0 ? lastAnummer + 1 : FIRST_ANUMMER);\n+\t\tLOG.info(\"Start generating Anummers from \" + anummer);\n+\t\tboolean isDone = false;\n+\t\twhile (!isDone) {\n+\t\t\tAnummer a = iterateToFindAnumber(anummer, ANUMMER_GENERATE_MAXITERATIONS);\n+\t\t\tif (a.isValid()) {\n+\t\t\t\t// Check if the anummer is allocated\n+\t\t\t\tint gemeenteCode = this.anummerService.getGemeenteCode(a.getAnummer());\n+\t\t\t\tif (gemeenteCode == 0) {\n+\t\t\t\t\t// No, so store it in the free list\n+\t\t\t\t\tthis.anummerService.storeAnummer(a.getAnummer());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// Stop if we're at the end of the anummer range\n+\t\t\tif (a.getErrorCode() == 99) {\n+\t\t\t\tisDone = true;\n+\t\t\t} else {\n+\t\t\t\t// Try the suggested next value\n+\t\t\t\tanummer = a.getSkipTo();\n+\t\t\t}\n+\t\t}\n+\t\tLOG.info(\"Finished generating Anummers, last: \" + anummer);\n+\t}\n }"
  },
  {
    "sha": "76dfec559f6533dbec5e3010c89a6704d185404f",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/InvalidAnummerException.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/InvalidAnummerException.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/InvalidAnummerException.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/InvalidAnummerException.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -1,5 +1,7 @@\n package com.reerinkresearch.anummers;\r\n \r\n+import com.reerinkresearch.pl.Anummer;\r\n+\r\n public class InvalidAnummerException extends RuntimeException {\r\n \r\n \tprivate static final long serialVersionUID = 7197614277344895892L;\r"
  },
  {
    "sha": "dc367d87e383abe86c357cc48e1c81ad872df9e4",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/model/AllocatedAnummer.java",
    "status": "renamed",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/model/AllocatedAnummer.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/model/AllocatedAnummer.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/model/AllocatedAnummer.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -6,19 +6,22 @@\n import org.springframework.data.redis.core.RedisHash;\r\n \r\n @RedisHash(\"anummer\")\r\n-public class Anummer implements Serializable {\r\n+public class AllocatedAnummer implements Serializable {\r\n \r\n \tprivate static final long serialVersionUID = -1698456345510392128L;\r\n \t\r\n \t@Id\r\n \tprivate Long anummer;\r\n \tprivate Integer gemeenteCode;\r\n \r\n-\tpublic Anummer(Long anummer, Integer gemeenteCode) {\r\n+\tpublic AllocatedAnummer() {\r\n+\t}\r\n+\t\r\n+\tpublic AllocatedAnummer(Long anummer, Integer gemeenteCode) {\r\n \t\tthis.anummer = anummer;\r\n \t\tthis.gemeenteCode = gemeenteCode;\r\n \t}\r\n-\t\r\n+\r\n \tpublic Long getAnummer() {\r\n \t\treturn anummer;\r\n \t}\r",
    "previous_filename": "anummers/src/main/java/com/reerinkresearch/anummers/model/Anummer.java"
  },
  {
    "sha": "77e53088bc721610d4960eaf4d49858a5b1ca097",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/model/FreeAnummer.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/model/FreeAnummer.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/model/FreeAnummer.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/model/FreeAnummer.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -0,0 +1,28 @@\n+package com.reerinkresearch.anummers.model;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import org.springframework.data.annotation.Id;\r\n+import org.springframework.data.redis.core.RedisHash;\r\n+\r\n+@RedisHash(\"freeAnummer\")\r\n+public class FreeAnummer implements Serializable  {\r\n+\r\n+\tprivate static final long serialVersionUID = -7412557049832202007L;\r\n+\r\n+\t@Id\r\n+\tprivate Long anummer;\r\n+\r\n+\tpublic FreeAnummer(long anummer) {\r\n+\t\tthis.anummer = anummer;\r\n+\t}\r\n+\r\n+\tpublic Long getAnummer() {\r\n+\t\treturn anummer;\r\n+\t}\r\n+\r\n+\tpublic void setAnummer(Long anummer) {\r\n+\t\tthis.anummer = anummer;\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "f8025e3aea6ab17a0c17e5b9e2d39cda831c80c3",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/repo/AnummerRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/repo/AnummerRepository.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/repo/AnummerRepository.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/repo/AnummerRepository.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -2,7 +2,7 @@\n \r\n import org.springframework.data.repository.CrudRepository;\r\n import org.springframework.stereotype.Repository;\r\n-import com.reerinkresearch.anummers.model.Anummer;\r\n+import com.reerinkresearch.anummers.model.AllocatedAnummer;\r\n \r\n @Repository\r\n-public interface AnummerRepository extends CrudRepository<Anummer, Long> {}\r\n+public interface AnummerRepository extends CrudRepository<AllocatedAnummer, Long> {}\r"
  },
  {
    "sha": "776e296ca05ed1391cb975aeeebb8ceb5d39e7ae",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/repo/FreeAnummerRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/repo/FreeAnummerRepository.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/repo/FreeAnummerRepository.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/repo/FreeAnummerRepository.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -0,0 +1,9 @@\n+package com.reerinkresearch.anummers.repo;\r\n+\r\n+import org.springframework.data.repository.PagingAndSortingRepository;\r\n+import org.springframework.stereotype.Repository;\r\n+\r\n+import com.reerinkresearch.anummers.model.FreeAnummer;\r\n+\r\n+@Repository\r\n+public interface FreeAnummerRepository extends PagingAndSortingRepository<FreeAnummer, Long> {}\r"
  },
  {
    "sha": "3c7d2f478440cc96b8de1a86ce9e8251bd6222c2",
    "filename": "anummers/src/main/java/com/reerinkresearch/anummers/service/AnummerService.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/service/AnummerService.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/main/java/com/reerinkresearch/anummers/service/AnummerService.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/main/java/com/reerinkresearch/anummers/service/AnummerService.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -0,0 +1,133 @@\n+package com.reerinkresearch.anummers.service;\r\n+\r\n+import java.util.Iterator;\r\n+import java.util.Optional;\r\n+\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.data.domain.PageRequest;\r\n+import org.springframework.data.domain.Pageable;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+import com.reerinkresearch.anummers.AlreadyExistsException;\r\n+import com.reerinkresearch.anummers.model.AllocatedAnummer;\r\n+import com.reerinkresearch.anummers.model.FreeAnummer;\r\n+import com.reerinkresearch.anummers.repo.AnummerRepository;\r\n+import com.reerinkresearch.anummers.repo.FreeAnummerRepository;\r\n+\r\n+@Service\r\n+public class AnummerService {\r\n+\r\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(AnummerService.class);\r\n+\r\n+\t@Autowired\r\n+\tAnummerRepository anummerRepo;\r\n+\r\n+\t@Autowired\r\n+\tFreeAnummerRepository freeAnummerRepo;\r\n+\r\n+\t/**\r\n+\t * Add an unallocated anummer to the pool (unless is already exists).\r\n+\t * \r\n+\t * @param anummer\r\n+\t */\r\n+\tpublic void storeAnummer(long anummer) {\r\n+\t\tif (!this.freeAnummerRepo.existsById(anummer)) {\r\n+\t\t\tthis.freeAnummerRepo.save(new FreeAnummer(anummer));\r\n+\t\t} else {\r\n+\t\t\tthrow new AlreadyExistsException(\"Anummer \" + anummer + \" already exists in the free pool.\");\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Add an allocated anummer to the list (unless it already exists).\r\n+\t * \r\n+\t * @param anummer\r\n+\t * @param gemeenteCode\r\n+\t */\r\n+\tpublic void storeAnummer(long anummer, int gemeenteCode) {\r\n+\t\tOptional<AllocatedAnummer> result = this.anummerRepo.findById(anummer);\r\n+\t\tif (result.isEmpty()) {\r\n+\t\t\tthis.anummerRepo.save(new AllocatedAnummer(anummer, gemeenteCode));\r\n+\t\t} else {\r\n+\t\t\tthrow new AlreadyExistsException(\r\n+\t\t\t\t\t\"Anummer \" + anummer + \" is already allocated for gemeente \" + result.get().getGemeenteCode());\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Pop the first unallocated anummer for the pool.\r\n+\t * \r\n+\t * @return the popped anummer or 0 if there are no more unallocated anummers in\r\n+\t *         the pool.\r\n+\t */\r\n+\tpublic long popUnallocatedAnummer() {\r\n+\t\tPageable page = PageRequest.of(0, 1) ;\r\n+\t\t\r\n+\t\tIterator<FreeAnummer> all = this.freeAnummerRepo.findAll(page).iterator();\r\n+\t\tif (all.hasNext()) {\r\n+\t\t\tFreeAnummer free = all.next();\r\n+\t\t\tLOG.info(\"Found free anummer \" + free.getAnummer());\r\n+\t\t\tthis.freeAnummerRepo.deleteById(free.getAnummer());\r\n+\t\t\tLOG.info(\"Popped \" + free.getAnummer());\r\n+\t\t\treturn free.getAnummer();\r\n+\t\t}\r\n+\t\treturn 0L;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Return the last unallocated or allocated anummer (usefull in resuming anummer\r\n+\t * generation)\r\n+\t * \r\n+\t * @return\r\n+\t */\r\n+\tpublic long getLastAnummer() {\r\n+\t\t// Find the anummer with the highest value\r\n+\t\tIterator<FreeAnummer> allFree = this.freeAnummerRepo.findAll().iterator();\r\n+\t\tlong lastAnummer = 0;\r\n+\t\twhile (allFree.hasNext()) {\r\n+\t\t\tFreeAnummer free = allFree.next();\r\n+\t\t\tif (free.getAnummer() > lastAnummer) {\r\n+\t\t\t\tlastAnummer = free.getAnummer();\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tIterator<AllocatedAnummer> allAllocated = this.anummerRepo.findAll().iterator();\r\n+\t\twhile (allAllocated.hasNext()) {\r\n+\t\t\tAllocatedAnummer allocated = allAllocated.next();\r\n+\t\t\tif (allocated.getAnummer() > lastAnummer) {\r\n+\t\t\t\tlastAnummer = allocated.getAnummer();\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn lastAnummer;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * If the anummer is allocated to a gemeente, return the gemeenteCode;\r\n+\t * \r\n+\t * @param anummer\r\n+\t * @return the gemeenteCode or 0 if the anummer is not allocated\r\n+\t */\r\n+\tpublic int getGemeenteCode(long anummer) {\r\n+\t\tOptional<AllocatedAnummer> result = this.anummerRepo.findById(anummer);\r\n+\t\tif (result.isPresent()) {\r\n+\t\t\treturn result.get().getGemeenteCode();\r\n+\t\t}\r\n+\t\treturn 0;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Delete allocated and free Anummers.\r\n+\t * \r\n+\t * @return the deleted number of Anummers.\r\n+\t */\r\n+\tpublic long deleteAll() {\r\n+\t\t// Delete allocated anummers\r\n+\t\tlong count = this.anummerRepo.count();\r\n+\t\tthis.anummerRepo.deleteAll();\r\n+\r\n+\t\tcount += this.freeAnummerRepo.count();\r\n+\t\tthis.freeAnummerRepo.deleteAll();\r\n+\t\treturn count;\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "a589a97443d32bcbaa5cf6e8c52727c667294921",
    "filename": "anummers/src/test/java/com/reerinkresearch/anummers/AnummerTests.java",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/test/java/com/reerinkresearch/anummers/AnummerTests.java",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/anummers/src/test/java/com/reerinkresearch/anummers/AnummerTests.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/test/java/com/reerinkresearch/anummers/AnummerTests.java?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -4,12 +4,14 @@\n \r\n import org.junit.jupiter.api.Test;\r\n \r\n+import com.reerinkresearch.pl.Anummer;\r\n+\r\n class AnummerTests {\r\n \r\n \t@Test\r\n \tvoid testInvalidAnummerSum() {\r\n \t\tlong anummer = 1010101024L;\r\n-\t\tAnummer a = new Anummer(anummer, 0);\r\n+\t\tAnummer a = new Anummer(anummer);\r\n \r\n \t\tboolean isValid = a.isValid();\r\n \t\tassertEquals(\"Rest na delen door 11 van sum(a0...a9)=10 moet 0 of 5 zijn, rest=10\", a.getError());\r\n@@ -21,15 +23,15 @@ void testInvalidAnummerSum() {\n \t@Test\r\n \tvoid testCascade() {\r\n \t\tlong anummer = 1010101024L;\r\n-\t\tAnummer a = new Anummer(anummer, 0);\r\n+\t\tAnummer a = new Anummer(anummer);\r\n \r\n \t\tboolean isValid = a.isValid();\r\n \t\tassertEquals(\"Rest na delen door 11 van sum(a0...a9)=10 moet 0 of 5 zijn, rest=10\", a.getError());\r\n \t\tassertFalse(isValid, \"A nummer should be invalid\");\r\n \t\tassertEquals(anummer, a.getAnummer(), \"Anummer\");\r\n \t\tassertEquals(anummer + 1, a.getSkipTo(), \"skipTo\");\r\n \t\t\r\n-\t\tAnummer b = new Anummer(a.getSkipTo(), 0);\r\n+\t\tAnummer b = new Anummer(a.getSkipTo());\r\n \r\n \t\tisValid = b.isValid();\r\n \t\tassertNull(b.getError(), \"No error\");\r\n@@ -42,7 +44,7 @@ void testCascade() {\n \t@Test\r\n \tvoid testInvalidAnummerSequence() {\r\n \t\tlong anummer = 1010101033L;\r\n-\t\tAnummer a = new Anummer(anummer, 0);\r\n+\t\tAnummer a = new Anummer(anummer);\r\n \r\n \t\tboolean isValid = a.isValid();\r\n \t\tassertEquals(\"Opeenvolgende cijfers moeten ongelijk zijn\", a.getError());\r\n@@ -55,7 +57,7 @@ void testInvalidAnummerSequence() {\n \t@Test\r\n \tvoid testInvalidAnummerEdge() {\r\n \t\tlong anummer = 1010101099L;\r\n-\t\tAnummer a = new Anummer(anummer, 0);\r\n+\t\tAnummer a = new Anummer(anummer);\r\n \r\n \t\tboolean isValid = a.isValid();\r\n \t\tassertEquals(\"Opeenvolgende cijfers moeten ongelijk zijn\", a.getError());\r\n@@ -67,14 +69,14 @@ void testInvalidAnummerEdge() {\n \t@Test\r\n \tvoid testInvalidAnummerLoop() {\r\n \t\tlong anummer = 1010101026L;\r\n-\t\tAnummer a = new Anummer(anummer, 0);\r\n+\t\tAnummer a = new Anummer(anummer);;\r\n \r\n \t\tfor(int i = 0; i < 1000; i++) {\r\n \t\t\tif ( a.isValid() ) {\r\n \t\t\t\tassertEquals(156, i, \"Iterations\");\r\n \t\t\t\tbreak;\r\n \t\t\t}\r\n-\t\t\ta = new Anummer(a.getSkipTo(), 0);\r\n+\t\t\ta = new Anummer(a.getSkipTo());\r\n \t\t}\r\n \t\tboolean isValid = a.isValid();\r\n \t\tassertNull(a.getError(), \"No error\");\r\n@@ -86,7 +88,7 @@ void testInvalidAnummerLoop() {\n \t@Test\r\n \tvoid testInvalidAnummerMultiSum() {\r\n \t\tlong anummer = 1010101034L;\r\n-\t\tAnummer a = new Anummer(anummer, 0);\r\n+\t\tAnummer a = new Anummer(anummer);\r\n \r\n \t\tboolean isValid = a.isValid();\r\n \t\tassertEquals(\"Rest na delen door 11 van sum((1*a0)...(512*a9))=2901 moet 0 zijn, rest=8\", a.getError());\r\n@@ -98,7 +100,7 @@ void testInvalidAnummerMultiSum() {\n \t@Test\r\n \tvoid testInvalidAnummerEnd() {\r\n \t\tlong anummer = 9898989899L;\r\n-\t\tAnummer a = new Anummer(anummer, 0);\r\n+\t\tAnummer a = new Anummer(anummer);\r\n \r\n \t\tboolean isValid = a.isValid();\r\n \t\tassertEquals(\"Opeenvolgende cijfers moeten ongelijk zijn\", a.getError());\r\n@@ -113,7 +115,7 @@ void testSomeValidNummers() {\n \t\t\t\t3525303417L, 8172690967L, 7397613143L };\r\n \r\n \t\tfor (int i = 0; i < anummers.length; i++) {\r\n-\t\t\tAnummer a = new Anummer(anummers[i], 0);\r\n+\t\t\tAnummer a = new Anummer(anummers[i]);\r\n \t\t\tboolean isValid = a.isValid();\r\n \t\t\tassertTrue(isValid, \"A nummer should be valid\" + a.getAnummer());\r\n \t\t\tassertNull(a.getError(), \"No error message expected\");\r"
  },
  {
    "sha": "2b4c052e17026edeb4f1721bba21ddaa5f4ae06a",
    "filename": "anummers/src/test/java/com/reerinkresearch/anummers/AnummersApplicationTests.java",
    "status": "removed",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/freerink/gba/blob/28d2211ec0225615127a617db7bda4798a5b765b/anummers/src/test/java/com/reerinkresearch/anummers/AnummersApplicationTests.java",
    "raw_url": "https://github.com/freerink/gba/raw/28d2211ec0225615127a617db7bda4798a5b765b/anummers/src/test/java/com/reerinkresearch/anummers/AnummersApplicationTests.java",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/anummers/src/test/java/com/reerinkresearch/anummers/AnummersApplicationTests.java?ref=28d2211ec0225615127a617db7bda4798a5b765b",
    "patch": "@@ -1,13 +0,0 @@\n-package com.reerinkresearch.anummers;\n-\n-import org.junit.jupiter.api.Test;\n-import org.springframework.boot.test.context.SpringBootTest;\n-\n-@SpringBootTest\n-class AnummersApplicationTests {\n-\n-\t@Test\n-\tvoid contextLoads() {\n-\t}\n-\n-}"
  },
  {
    "sha": "ae7612b043d83884578e725978083d9201d343b0",
    "filename": "scripts/storeanummers.sh",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/freerink/gba/blob/45dd97589909ef1133a5c95e7b61e0117521f0e1/scripts/storeanummers.sh",
    "raw_url": "https://github.com/freerink/gba/raw/45dd97589909ef1133a5c95e7b61e0117521f0e1/scripts/storeanummers.sh",
    "contents_url": "https://api.github.com/repos/freerink/gba/contents/scripts/storeanummers.sh?ref=45dd97589909ef1133a5c95e7b61e0117521f0e1",
    "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/bash\n-URL=http://192.168.1.245:30913/anummers\n+URL=http://localhost:8080/anummers\n echo \"Store all A-nummers to $URL\"\n IN=anummers-20210125.txt\n TMP=/tmp/anummer.tmp"
  }
]
