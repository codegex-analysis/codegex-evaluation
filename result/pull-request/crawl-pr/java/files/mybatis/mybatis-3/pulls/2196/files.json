[
  {
    "sha": "0b6c33ea7292d61e901a1394eb5114403f253816",
    "filename": "src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -269,6 +269,7 @@ private void settingsElement(Properties props) {\n     configuration.setLogPrefix(props.getProperty(\"logPrefix\"));\n     configuration.setConfigurationFactory(resolveClass(props.getProperty(\"configurationFactory\")));\n     configuration.setShrinkWhitespacesInSql(booleanValueOf(props.getProperty(\"shrinkWhitespacesInSql\"), false));\n+    configuration.setArgNameBasedConstructorAutoMapping(booleanValueOf(props.getProperty(\"argNameBasedConstructorAutoMapping\"), false));\n     configuration.setDefaultSqlProviderType(resolveClass(props.getProperty(\"defaultSqlProviderType\")));\n   }\n "
  },
  {
    "sha": "2cf855e6963264d66089f9071f5d14eae5f46c1d",
    "filename": "src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java",
    "status": "modified",
    "additions": 88,
    "deletions": 34,
    "changes": 122,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2020 the original author or authors.\n+ *    Copyright 2009-2021 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -16,19 +16,24 @@\n package org.apache.ibatis.executor.resultset;\n \n import java.lang.reflect.Constructor;\n+import java.lang.reflect.Parameter;\n import java.sql.CallableStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.text.MessageFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n \n import org.apache.ibatis.annotations.AutomapConstructor;\n+import org.apache.ibatis.annotations.Param;\n import org.apache.ibatis.binding.MapperMethod.ParamMap;\n import org.apache.ibatis.cache.CacheKey;\n import org.apache.ibatis.cursor.Cursor;\n@@ -686,49 +691,35 @@ Object createParameterizedResultObject(ResultSetWrapper rsw, Class<?> resultType\n     return foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : null;\n   }\n \n-  private Object createByConstructorSignature(ResultSetWrapper rsw, Class<?> resultType, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) throws SQLException {\n-    final Constructor<?>[] constructors = resultType.getDeclaredConstructors();\n-    final Constructor<?> defaultConstructor = findDefaultConstructor(constructors);\n-    if (defaultConstructor != null) {\n-      return createUsingConstructor(rsw, resultType, constructorArgTypes, constructorArgs, defaultConstructor);\n-    } else {\n-      for (Constructor<?> constructor : constructors) {\n-        if (allowedConstructorUsingTypeHandlers(constructor, rsw.getJdbcTypes())) {\n-          return createUsingConstructor(rsw, resultType, constructorArgTypes, constructorArgs, constructor);\n-        }\n-      }\n-    }\n-    throw new ExecutorException(\"No constructor found in \" + resultType.getName() + \" matching \" + rsw.getClassNames());\n+  private Object createByConstructorSignature(ResultSetWrapper rsw, Class<?> resultType,\n+      List<Class<?>> constructorArgTypes, List<Object> constructorArgs) throws SQLException {\n+    return applyConstructorAutomapping(rsw, resultType, constructorArgTypes, constructorArgs,\n+        findConstructorForAutomapping(resultType, rsw).orElseThrow(() -> new ExecutorException(\n+            \"No constructor found in \" + resultType.getName() + \" matching \" + rsw.getClassNames())));\n   }\n \n-  private Object createUsingConstructor(ResultSetWrapper rsw, Class<?> resultType, List<Class<?>> constructorArgTypes, List<Object> constructorArgs, Constructor<?> constructor) throws SQLException {\n-    boolean foundValues = false;\n-    for (int i = 0; i < constructor.getParameterTypes().length; i++) {\n-      Class<?> parameterType = constructor.getParameterTypes()[i];\n-      String columnName = rsw.getColumnNames().get(i);\n-      TypeHandler<?> typeHandler = rsw.getTypeHandler(parameterType, columnName);\n-      Object value = typeHandler.getResult(rsw.getResultSet(), columnName);\n-      constructorArgTypes.add(parameterType);\n-      constructorArgs.add(value);\n-      foundValues = value != null || foundValues;\n-    }\n-    return foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : null;\n-  }\n-\n-  private Constructor<?> findDefaultConstructor(final Constructor<?>[] constructors) {\n+  private Optional<Constructor<?>> findConstructorForAutomapping(final Class<?> resultType, ResultSetWrapper rsw) {\n+    Constructor<?>[] constructors = resultType.getDeclaredConstructors();\n     if (constructors.length == 1) {\n-      return constructors[0];\n+      return Optional.of(constructors[0]);\n     }\n-\n     for (final Constructor<?> constructor : constructors) {\n       if (constructor.isAnnotationPresent(AutomapConstructor.class)) {\n-        return constructor;\n+        return Optional.of(constructor);\n       }\n     }\n-    return null;\n+    if (configuration.isArgNameBasedConstructorAutoMapping()) {\n+      // Finding-best-match type implementation is possible,\n+      // but using @AutomapConstructor seems sufficient.\n+      throw new ExecutorException(MessageFormat.format(\n+          \"'argNameBasedConstructorAutoMapping' is enabled and the class ''{0}'' has multiple constructors, so @AutomapConstructor must be added to one of the constructors.\",\n+          resultType.getName()));\n+    } else {\n+      return Arrays.stream(constructors).filter(x -> findUsableConstructorByArgTypes(x, rsw.getJdbcTypes())).findAny();\n+    }\n   }\n \n-  private boolean allowedConstructorUsingTypeHandlers(final Constructor<?> constructor, final List<JdbcType> jdbcTypes) {\n+  private boolean findUsableConstructorByArgTypes(final Constructor<?> constructor, final List<JdbcType> jdbcTypes) {\n     final Class<?>[] parameterTypes = constructor.getParameterTypes();\n     if (parameterTypes.length != jdbcTypes.size()) {\n       return false;\n@@ -741,6 +732,69 @@ private boolean allowedConstructorUsingTypeHandlers(final Constructor<?> constru\n     return true;\n   }\n \n+  private Object applyConstructorAutomapping(ResultSetWrapper rsw, Class<?> resultType, List<Class<?>> constructorArgTypes, List<Object> constructorArgs, Constructor<?> constructor) throws SQLException {\n+    boolean foundValues = false;\n+    if (configuration.isArgNameBasedConstructorAutoMapping()) {\n+      foundValues = applyArgNameBasedConstructorAutoMapping(rsw, resultType, constructorArgTypes, constructorArgs,\n+          constructor, foundValues);\n+    } else {\n+      foundValues = applyColumnOrderBasedConstructorAutomapping(rsw, constructorArgTypes, constructorArgs, constructor,\n+          foundValues);\n+    }\n+    return foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : null;\n+  }\n+\n+  private boolean applyColumnOrderBasedConstructorAutomapping(ResultSetWrapper rsw, List<Class<?>> constructorArgTypes,\n+      List<Object> constructorArgs, Constructor<?> constructor, boolean foundValues) throws SQLException {\n+    for (int i = 0; i < constructor.getParameterTypes().length; i++) {\n+      Class<?> parameterType = constructor.getParameterTypes()[i];\n+      String columnName = rsw.getColumnNames().get(i);\n+      TypeHandler<?> typeHandler = rsw.getTypeHandler(parameterType, columnName);\n+      Object value = typeHandler.getResult(rsw.getResultSet(), columnName);\n+      constructorArgTypes.add(parameterType);\n+      constructorArgs.add(value);\n+      foundValues = value != null || foundValues;\n+    }\n+    return foundValues;\n+  }\n+\n+  private boolean applyArgNameBasedConstructorAutoMapping(ResultSetWrapper rsw, Class<?> resultType,\n+      List<Class<?>> constructorArgTypes, List<Object> constructorArgs, Constructor<?> constructor, boolean foundValues)\n+      throws SQLException {\n+    List<String> missingArgs = null;\n+    Parameter[] params = constructor.getParameters();\n+    for (Parameter param : params) {\n+      boolean columnNotFound = true;\n+      Param paramAnno = param.getAnnotation(Param.class);\n+      String paramName = paramAnno == null ? param.getName() : paramAnno.value();\n+      for (String columnName : rsw.getColumnNames()) {\n+        if (paramName.equalsIgnoreCase(\n+            configuration.isMapUnderscoreToCamelCase() ? columnName.replace(\"_\", \"\") : columnName)) {\n+          Class<?> paramType = param.getType();\n+          TypeHandler<?> typeHandler = rsw.getTypeHandler(paramType, columnName);\n+          Object value = typeHandler.getResult(rsw.getResultSet(), columnName);\n+          constructorArgTypes.add(paramType);\n+          constructorArgs.add(value);\n+          columnNotFound = false;\n+          foundValues = value != null || foundValues;\n+        }\n+      }\n+      if (columnNotFound) {\n+        if (missingArgs == null) {\n+          missingArgs = new ArrayList<>();\n+        }\n+        missingArgs.add(paramName);\n+      }\n+    }\n+    if (foundValues && constructorArgs.size() < params.length) {\n+      throw new ExecutorException(MessageFormat.format(\"Constructor auto-mapping of ''{1}'' failed \"\n+          + \"because ''{0}'' were not found in the result set; \"\n+          + \"Available columns are ''{2}'' and mapUnderscoreToCamelCase is ''{3}''.\",\n+          missingArgs, constructor, rsw.getColumnNames(), configuration.isMapUnderscoreToCamelCase()));\n+    }\n+    return foundValues;\n+  }\n+\n   private Object createPrimitiveResultObject(ResultSetWrapper rsw, ResultMap resultMap, String columnPrefix) throws SQLException {\n     final Class<?> resultType = resultMap.getType();\n     final String columnName;"
  },
  {
    "sha": "8ef2482c1b630072f22dfadaf1bad191b8a7070b",
    "filename": "src/main/java/org/apache/ibatis/session/Configuration.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/main/java/org/apache/ibatis/session/Configuration.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/main/java/org/apache/ibatis/session/Configuration.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/main/java/org/apache/ibatis/session/Configuration.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2020 the original author or authors.\n+ *    Copyright 2009-2021 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -114,6 +114,7 @@\n   protected boolean useActualParamName = true;\n   protected boolean returnInstanceForEmptyRow;\n   protected boolean shrinkWhitespacesInSql;\n+  protected boolean argNameBasedConstructorAutoMapping;\n \n   protected String logPrefix;\n   protected Class<? extends Log> logImpl;\n@@ -297,6 +298,14 @@ public void setShrinkWhitespacesInSql(boolean shrinkWhitespacesInSql) {\n     this.shrinkWhitespacesInSql = shrinkWhitespacesInSql;\n   }\n \n+  public boolean isArgNameBasedConstructorAutoMapping() {\n+    return argNameBasedConstructorAutoMapping;\n+  }\n+\n+  public void setArgNameBasedConstructorAutoMapping(boolean argNameBasedConstructorAutoMapping) {\n+    this.argNameBasedConstructorAutoMapping = argNameBasedConstructorAutoMapping;\n+  }\n+\n   public String getDatabaseId() {\n     return databaseId;\n   }"
  },
  {
    "sha": "a8f9a77e547f632d8b4608d74d19bb0066ceb5bc",
    "filename": "src/site/es/xdoc/configuration.xml",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/es/xdoc/configuration.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/es/xdoc/configuration.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/site/es/xdoc/configuration.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n \n-       Copyright 2009-2020 the original author or authors.\n+       Copyright 2009-2021 the original author or authors.\n \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n@@ -577,6 +577,20 @@ SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environ\n                 Not set\n               </td>\n             </tr>\n+            <tr>\n+              <td>\n+                argNameBasedConstructorAutoMapping\n+              </td>\n+              <td>\n+                When applying constructor auto-mapping, argument name is used to search the column to map instead of relying on the column order. (Since 3.5.7)\n+              </td>\n+              <td>\n+                true | false\n+              </td>\n+              <td>\n+                false\n+              </td>\n+            </tr>\n           </tbody>\n         </table>\n         <p>"
  },
  {
    "sha": "807267444029d0d19cd9104e76c61a69204fd1f9",
    "filename": "src/site/ja/xdoc/configuration.xml",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/ja/xdoc/configuration.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/ja/xdoc/configuration.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/site/ja/xdoc/configuration.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n \n-       Copyright 2009-2020 the original author or authors.\n+       Copyright 2009-2021 the original author or authors.\n \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n@@ -601,6 +601,20 @@ SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environ\n                 未指定\n               </td>\n             </tr>\n+            <tr>\n+              <td>\n+                argNameBasedConstructorAutoMapping\n+              </td>\n+              <td>\n+                引数を受け取るコンストラクタに対して自動マッピングを適用する際、引数名に一致する列をマップ対象にします。<code>false</code> の場合は列の順序依存となります。 (導入されたバージョン: 3.5.7）\n+              </td>\n+              <td>\n+                true | false\n+              </td>\n+              <td>\n+                false\n+              </td>\n+            </tr>\n           </tbody>\n         </table>\n         <p>"
  },
  {
    "sha": "1059848060ac0f027ec7665734217941065dc0fb",
    "filename": "src/site/ko/xdoc/configuration.xml",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/ko/xdoc/configuration.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/ko/xdoc/configuration.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/site/ko/xdoc/configuration.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n \n-       Copyright 2009-2020 the original author or authors.\n+       Copyright 2009-2021 the original author or authors.\n \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n@@ -584,6 +584,20 @@ SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environ\n                 설정하지 않음\n               </td>\n             </tr>\n+            <tr>\n+              <td>\n+                argNameBasedConstructorAutoMapping\n+              </td>\n+              <td>\n+                When applying constructor auto-mapping, argument name is used to search the column to map instead of relying on the column order. (Since 3.5.7)\n+              </td>\n+              <td>\n+                true | false\n+              </td>\n+              <td>\n+                false\n+              </td>\n+            </tr>\n           </tbody>\n         </table>\n         <p>위 설정을 모두 사용한 setting 엘리먼트의 예제이다:</p>"
  },
  {
    "sha": "2cecd48521a2ecb0f8cb09dcbaa7c959c16df34c",
    "filename": "src/site/xdoc/configuration.xml",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/xdoc/configuration.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/xdoc/configuration.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/site/xdoc/configuration.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n \n-       Copyright 2009-2020 the original author or authors.\n+       Copyright 2009-2021 the original author or authors.\n \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n@@ -664,6 +664,20 @@ SqlSessionFactory factory =\n                 Not set\n               </td>\n             </tr>\n+            <tr>\n+              <td>\n+                argNameBasedConstructorAutoMapping\n+              </td>\n+              <td>\n+                When applying constructor auto-mapping, argument name is used to search the column to map instead of relying on the column order. (Since 3.5.7)\n+              </td>\n+              <td>\n+                true | false\n+              </td>\n+              <td>\n+                false\n+              </td>\n+            </tr>\n           </tbody>\n         </table>\n         <p>"
  },
  {
    "sha": "dd9c6009230745cbe84c3ab1f8b7b1d628a6292a",
    "filename": "src/site/zh/xdoc/configuration.xml",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/zh/xdoc/configuration.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/site/zh/xdoc/configuration.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/site/zh/xdoc/configuration.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n \n-       Copyright 2009-2020 the original author or authors.\n+       Copyright 2009-2021 the original author or authors.\n \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n@@ -595,6 +595,20 @@ SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environ\n                 Not set\n               </td>\n             </tr>\n+            <tr>\n+              <td>\n+                argNameBasedConstructorAutoMapping\n+              </td>\n+              <td>\n+                When applying constructor auto-mapping, argument name is used to search the column to map instead of relying on the column order. (Since 3.5.7)\n+              </td>\n+              <td>\n+                true | false\n+              </td>\n+              <td>\n+                false\n+              </td>\n+            </tr>\n           </tbody>\n         </table>\n         <p>"
  },
  {
    "sha": "9cc1abb6a848b4368be5b3b3bfde8bad125a5512",
    "filename": "src/test/java/org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/builder/CustomizedSettingsMapperConfig.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n <!--\n \n-       Copyright 2009-2020 the original author or authors.\n+       Copyright 2009-2021 the original author or authors.\n \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n@@ -55,6 +55,7 @@\n     <setting name=\"configurationFactory\" value=\"java.lang.String\"/>\n     <setting name=\"defaultEnumTypeHandler\" value=\"org.apache.ibatis.type.EnumOrdinalTypeHandler\"/>\n     <setting name=\"shrinkWhitespacesInSql\" value=\"true\"/>\n+    <setting name=\"argNameBasedConstructorAutoMapping\" value=\"true\"/>\n     <setting name=\"defaultSqlProviderType\" value=\"org.apache.ibatis.builder.XmlConfigBuilderTest$MySqlProvider\"/>\n   </settings>\n "
  },
  {
    "sha": "8b480bd731b5aedb886a174e824e646b01d61196",
    "filename": "src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/builder/XmlConfigBuilderTest.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2020 the original author or authors.\n+ *    Copyright 2009-2021 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -101,6 +101,7 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {\n       assertNull(config.getConfigurationFactory());\n       assertThat(config.getTypeHandlerRegistry().getTypeHandler(RoundingMode.class)).isInstanceOf(EnumTypeHandler.class);\n       assertThat(config.isShrinkWhitespacesInSql()).isFalse();\n+      assertThat(config.isArgNameBasedConstructorAutoMapping()).isFalse();\n       assertThat(config.getDefaultSqlProviderType()).isNull();\n     }\n   }\n@@ -197,6 +198,7 @@ void shouldSuccessfullyLoadXMLConfigFile() throws Exception {\n       assertThat(config.getVfsImpl().getName()).isEqualTo(JBoss6VFS.class.getName());\n       assertThat(config.getConfigurationFactory().getName()).isEqualTo(String.class.getName());\n       assertThat(config.isShrinkWhitespacesInSql()).isTrue();\n+      assertThat(config.isArgNameBasedConstructorAutoMapping()).isTrue();\n       assertThat(config.getDefaultSqlProviderType().getName()).isEqualTo(MySqlProvider.class.getName());\n \n       assertThat(config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\")).isEqualTo(Author.class);"
  },
  {
    "sha": "dd26e46e50b67ba461ab896d6204af4714624b95",
    "filename": "src/test/java/org/apache/ibatis/builder/xsd/CustomizedSettingsMapperConfig.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/xsd/CustomizedSettingsMapperConfig.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/xsd/CustomizedSettingsMapperConfig.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/builder/xsd/CustomizedSettingsMapperConfig.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n <!--\n \n-       Copyright 2009-2020 the original author or authors.\n+       Copyright 2009-2021 the original author or authors.\n \n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n@@ -51,6 +51,7 @@\n     <setting name=\"vfsImpl\" value=\"org.apache.ibatis.io.JBoss6VFS\"/>\n     <setting name=\"configurationFactory\" value=\"java.lang.String\"/>\n     <setting name=\"shrinkWhitespacesInSql\" value=\"true\"/>\n+    <setting name=\"argNameBasedConstructorAutoMapping\" value=\"true\"/>\n   </settings>\n \n   <typeAliases>"
  },
  {
    "sha": "3920c837bb47d6dd31c424d9c9b4ff04cbb070a6",
    "filename": "src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/builder/xsd/XmlConfigBuilderTest.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2020 the original author or authors.\n+ *    Copyright 2009-2021 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -85,6 +85,7 @@ void shouldSuccessfullyLoadMinimalXMLConfigFile() throws Exception {\n       assertNull(config.getLogImpl());\n       assertNull(config.getConfigurationFactory());\n       assertFalse(config.isShrinkWhitespacesInSql());\n+      assertFalse(config.isArgNameBasedConstructorAutoMapping());\n     } finally {\n       // System.clearProperty(XPathParser.KEY_USE_XSD);\n     }\n@@ -123,6 +124,7 @@ void shouldSuccessfullyLoadXMLConfigFile() throws Exception {\n       assertEquals(JBoss6VFS.class.getName(), config.getVfsImpl().getName());\n       assertEquals(String.class.getName(), config.getConfigurationFactory().getName());\n       assertTrue(config.isShrinkWhitespacesInSql());\n+      assertTrue(config.isArgNameBasedConstructorAutoMapping());\n \n       assertEquals(Author.class, config.getTypeAliasRegistry().getTypeAliases().get(\"blogauthor\"));\n       assertEquals(Blog.class, config.getTypeAliasRegistry().getTypeAliases().get(\"blog\"));"
  },
  {
    "sha": "ee6b6a6614435c964d78e650d0f0eeb97cc0e2b9",
    "filename": "src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/ArgNameBasedConstructorAutoMappingTest.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/ArgNameBasedConstructorAutoMappingTest.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/ArgNameBasedConstructorAutoMappingTest.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/ArgNameBasedConstructorAutoMappingTest.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -0,0 +1,126 @@\n+/**\n+ *    Copyright 2009-2021 the original author or authors.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *    you may not use this file except in compliance with the License.\n+ *    You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    Unless required by applicable law or agreed to in writing, software\n+ *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *    See the License for the specific language governing permissions and\n+ *    limitations under the License.\n+ */\n+package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.io.Reader;\n+\n+import org.apache.ibatis.BaseDataTest;\n+import org.apache.ibatis.exceptions.PersistenceException;\n+import org.apache.ibatis.executor.ExecutorException;\n+import org.apache.ibatis.io.Resources;\n+import org.apache.ibatis.session.SqlSession;\n+import org.apache.ibatis.session.SqlSessionFactory;\n+import org.apache.ibatis.session.SqlSessionFactoryBuilder;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+class ArgNameBasedConstructorAutoMappingTest {\n+\n+  private static SqlSessionFactory sqlSessionFactory;\n+\n+  @BeforeAll\n+  static void setUp() throws Exception {\n+    // create an SqlSessionFactory\n+    try (Reader reader = Resources\n+        .getResourceAsReader(\"org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/mybatis-config.xml\")) {\n+      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);\n+    }\n+    sqlSessionFactory.getConfiguration().setArgNameBasedConstructorAutoMapping(true);\n+    // populate in-memory database\n+    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),\n+        \"org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/CreateDB.sql\");\n+  }\n+\n+  @Test\n+  void shouldFindResultsInDifferentOrder() {\n+    // This test requires -parameters compiler option\n+    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n+      Mapper mapper = sqlSession.getMapper(Mapper.class);\n+      User user = mapper.selectNameAndId(1);\n+      assertEquals(Integer.valueOf(1), user.getId());\n+      assertEquals(\"User1\", user.getName());\n+    }\n+  }\n+\n+  @Test\n+  void shouldRespectUseColumnLabelSetting() {\n+    // This test requires -parameters compiler option\n+    sqlSessionFactory.getConfiguration().setUseColumnLabel(false);\n+    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n+      Mapper mapper = sqlSession.getMapper(Mapper.class);\n+      User user = mapper.selectNameAndIdWithBogusLabel(1);\n+      assertEquals(Integer.valueOf(1), user.getId());\n+      assertEquals(\"User1\", user.getName());\n+    } finally {\n+      sqlSessionFactory.getConfiguration().setUseColumnLabel(true);\n+    }\n+  }\n+\n+  @Test\n+  void shouldErrorMessageBeHelpful() {\n+    // This test requires -parameters compiler option\n+    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n+      Mapper mapper = sqlSession.getMapper(Mapper.class);\n+      User user = mapper.selectNameAndIdWithBogusLabel(1);\n+      fail(\"Exception should be thrown\");\n+    } catch (PersistenceException e) {\n+      ExecutorException ex = (ExecutorException) e.getCause();\n+      assertEquals(\n+          \"Constructor auto-mapping of 'public org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping.\"\n+              + \"User(java.lang.Integer,java.lang.String)' failed \"\n+              + \"because '[id]' were not found in the result set; \"\n+              + \"Available columns are '[NAME, BAR]' and mapUnderscoreToCamelCase is 'true'.\",\n+          ex.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  void shouldWorkWithExtraColumns() {\n+    // This test requires -parameters compiler option\n+    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n+      Mapper mapper = sqlSession.getMapper(Mapper.class);\n+      User user = mapper.selectNameTeamAndId(1);\n+      assertEquals(Integer.valueOf(1), user.getId());\n+      assertEquals(\"User1\", user.getName());\n+      assertEquals(99, user.getTeam());\n+    }\n+  }\n+\n+  @Test\n+  void shouldRespectParamAnnotation() {\n+    // This test requires -parameters compiler option\n+    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n+      Mapper mapper = sqlSession.getMapper(Mapper.class);\n+      User2 user = mapper.selectUserIdAndUserName(1);\n+      assertEquals(Integer.valueOf(1), user.getUserId());\n+      assertEquals(\"User1\", user.getName());\n+    }\n+  }\n+\n+  @Test\n+  void shouldRespectMapUnderscoreToCamelCaseSetting() {\n+    // This test requires -parameters compiler option\n+    sqlSessionFactory.getConfiguration().setMapUnderscoreToCamelCase(true);\n+    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n+      Mapper mapper = sqlSession.getMapper(Mapper.class);\n+      User2 user = mapper.selectUserIdAndUserNameUnderscore(1);\n+      assertEquals(Integer.valueOf(1), user.getUserId());\n+      assertEquals(\"User1\", user.getName());\n+    }\n+  }\n+}"
  },
  {
    "sha": "aa171dac709d34010e5f897ee1dedfbdbf65eda8",
    "filename": "src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/CreateDB.sql",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/CreateDB.sql",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/CreateDB.sql",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/CreateDB.sql?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -0,0 +1,26 @@\n+--\n+--    Copyright 2009-2021 the original author or authors.\n+--\n+--    Licensed under the Apache License, Version 2.0 (the \"License\");\n+--    you may not use this file except in compliance with the License.\n+--    You may obtain a copy of the License at\n+--\n+--       http://www.apache.org/licenses/LICENSE-2.0\n+--\n+--    Unless required by applicable law or agreed to in writing, software\n+--    distributed under the License is distributed on an \"AS IS\" BASIS,\n+--    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+--    See the License for the specific language governing permissions and\n+--    limitations under the License.\n+--\n+\n+drop table users if exists;\n+\n+create table users (\n+  id int,\n+  name varchar(20),\n+  team int\n+);\n+\n+insert into users (id, name, team) values\n+(1, 'User1', 99);"
  },
  {
    "sha": "6a14bf69d76da50712a23d82024b905ca163608f",
    "filename": "src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/Mapper.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/Mapper.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/Mapper.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/Mapper.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -0,0 +1,36 @@\n+/**\n+ *    Copyright 2009-2021 the original author or authors.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *    you may not use this file except in compliance with the License.\n+ *    You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    Unless required by applicable law or agreed to in writing, software\n+ *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *    See the License for the specific language governing permissions and\n+ *    limitations under the License.\n+ */\n+package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;\n+\n+import org.apache.ibatis.annotations.Select;\n+\n+public interface Mapper {\n+\n+  @Select(\"select name, id from users where id = #{id}\")\n+  User selectNameAndId(Integer id);\n+\n+  @Select(\"select name, id bar from users where id = #{id}\")\n+  User selectNameAndIdWithBogusLabel(Integer id);\n+\n+  @Select(\"select name, team, id from users where id = #{id}\")\n+  User selectNameTeamAndId(Integer id);\n+\n+  @Select(\"select name userName, id userId from users where id = #{id}\")\n+  User2 selectUserIdAndUserName(Integer id);\n+\n+  @Select(\"select name user_name, id user_id from users where id = #{id}\")\n+  User2 selectUserIdAndUserNameUnderscore(Integer id);\n+}"
  },
  {
    "sha": "57ee9587b13d99d06421e7196b42fb937ae85896",
    "filename": "src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -0,0 +1,45 @@\n+/**\n+ *    Copyright 2009-2021 the original author or authors.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *    you may not use this file except in compliance with the License.\n+ *    You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    Unless required by applicable law or agreed to in writing, software\n+ *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *    See the License for the specific language governing permissions and\n+ *    limitations under the License.\n+ */\n+package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;\n+\n+public class User {\n+\n+  private Integer id;\n+  private String name;\n+  private Long team;\n+\n+  public User(Integer id, String name) {\n+    super();\n+    this.id = id;\n+    this.name = name;\n+  }\n+\n+  public Integer getId() {\n+    return id;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setTeam(Long team) {\n+    this.team = team;\n+  }\n+\n+  public Long getTeam() {\n+    return team;\n+  }\n+}"
  },
  {
    "sha": "12ac1e04104fcd427c1cda68d2a90a2061fe563c",
    "filename": "src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User2.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User2.java",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User2.java",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/User2.java?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -0,0 +1,38 @@\n+/**\n+ *    Copyright 2009-2021 the original author or authors.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *    you may not use this file except in compliance with the License.\n+ *    You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    Unless required by applicable law or agreed to in writing, software\n+ *    distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *    See the License for the specific language governing permissions and\n+ *    limitations under the License.\n+ */\n+package org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping;\n+\n+import org.apache.ibatis.annotations.Param;\n+\n+public class User2 {\n+\n+  private Integer userId;\n+  private String name;\n+\n+  public User2(Integer userId, @Param(\"userName\") String name) {\n+    super();\n+    this.userId = userId;\n+    this.name = name;\n+  }\n+\n+  public Integer getUserId() {\n+    return userId;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+}"
  },
  {
    "sha": "6a28314ec19f7b16959f5a91ff4bf6003ecd9858",
    "filename": "src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/mybatis-config.xml",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/mybatis/mybatis-3/blob/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/mybatis-config.xml",
    "raw_url": "https://github.com/mybatis/mybatis-3/raw/dad8c13771a7b98d3814bf9c50bba8d8d36128e4/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/mybatis-config.xml",
    "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src/test/java/org/apache/ibatis/submitted/arg_name_baesd_constructor_automapping/mybatis-config.xml?ref=dad8c13771a7b98d3814bf9c50bba8d8d36128e4",
    "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+\n+       Copyright 2009-2021 the original author or authors.\n+\n+       Licensed under the Apache License, Version 2.0 (the \"License\");\n+       you may not use this file except in compliance with the License.\n+       You may obtain a copy of the License at\n+\n+          http://www.apache.org/licenses/LICENSE-2.0\n+\n+       Unless required by applicable law or agreed to in writing, software\n+       distributed under the License is distributed on an \"AS IS\" BASIS,\n+       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+       See the License for the specific language governing permissions and\n+       limitations under the License.\n+\n+-->\n+<!DOCTYPE configuration\n+    PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n+    \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n+\n+<configuration>\n+\n+  <environments default=\"development\">\n+    <environment id=\"development\">\n+      <transactionManager type=\"JDBC\">\n+        <property name=\"\" value=\"\" />\n+      </transactionManager>\n+      <dataSource type=\"UNPOOLED\">\n+        <property name=\"driver\" value=\"org.hsqldb.jdbcDriver\" />\n+        <property name=\"url\"\n+          value=\"jdbc:hsqldb:mem:argNameBasedConstructorAutoMapping\" />\n+        <property name=\"username\" value=\"sa\" />\n+      </dataSource>\n+    </environment>\n+  </environments>\n+\n+  <mappers>\n+    <mapper\n+      class=\"org.apache.ibatis.submitted.arg_name_baesd_constructor_automapping.Mapper\" />\n+  </mappers>\n+</configuration>"
  }
]
