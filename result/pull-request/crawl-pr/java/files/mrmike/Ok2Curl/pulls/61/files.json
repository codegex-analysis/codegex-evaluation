[
  {
    "sha": "f733e475d4331148f3164c50339abb08a4ad3878",
    "filename": ".github/workflows/push-check.yml",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/.github/workflows/push-check.yml",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/.github/workflows/push-check.yml",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/.github/workflows/push-check.yml?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,23 @@\n+name: Commit check\n+\n+on:\n+  push:\n+    branches: [ $default-branch ]\n+  pull_request:\n+    branches:\n+      - '*'\n+\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: set up JDK 1.8\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 1.8\n+      - name: Grant execute permission for gradlew\n+        run: chmod +x gradlew\n+      - name: Build with Gradle\n+        run: ./gradlew clean build\n\\ No newline at end of file"
  },
  {
    "sha": "134c6e947e53ad348a1be19bf78ec1f7c7de4af7",
    "filename": "README.md",
    "status": "modified",
    "additions": 61,
    "deletions": 33,
    "changes": 94,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/README.md",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/README.md",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/README.md?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -1,9 +1,9 @@\n # Ok2Curl [![Build Status](https://travis-ci.org/mrmike/Ok2Curl.svg)](https://travis-ci.org/mrmike/Ok2Curl) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Ok2Curl-green.svg?style=flat)](https://android-arsenal.com/details/1/2653) [![Release](https://jitpack.io/v/mrmike/Ok2Curl.svg)](https://jitpack.io/#mrmike/Ok2Curl)\n \n-Convert OkHttp requests into curl logs.\n+Simply way to transform OkHttp requests into curl logs.\n \n ## Usage\n-Add library to project dependencies. Library is hosted on jcenter.\n+Add library to project dependencies. The library is hosted on jcenter.\n ```groovy\n repositories {\n     jcenter()\n@@ -15,55 +15,83 @@ dependencies {\n ```\n \n To start logging requests with Ok2Curl add interceptor to OkHttp client.\n-```java\n-OkHttpClient okHttp = new OkHttpClient.Builder()\n-    .addInterceptor(new CurlInterceptor(new Loggable() {\n-            @Override\n-            public void log(String message) {\n-                Log.v(\"Ok2Curl\", message);\n-            }\n-        }))\n-    .build();\n+```kotlin\n+val client = OkHttpClient.Builder()\n+            .addInterceptor(CurlInterceptor(AndroidLogger()))\n+            .build()\n ```\n \n ## Result\n-With Ok2Curl set up correctly every executed request will be transformed into curl log e.g.\n+With Ok2Curl set up correctly, every executed request will be transformed into curl log e.g.\n ```shell\n adb logcat -s \"Ok2Curl\"\n curl -X GET -H \"Cache-Control:max-stale=2147483647, only-if-cached\" https://api.github.com/repos/vmg/redcarpet/issues?state=closed\n ```\n \n ## Network interceptors\n-By default Ok2Curl uses application interceptors from OkHttp which is adequate for most cases. But sometimes you may want to use network interceptor e.g. to log Cookies set via [CookieHandler](http://docs.oracle.com/javase/6/docs/api/java/net/CookieHandler.html). In such a case add interceptor the same way as below:  \n+By default, Ok2Curl uses application interceptors from OkHttp which is adequate for most cases. But sometimes you may want to use a network interceptor e.g. to log Cookies set via [CookieHandler](https://developer.android.com/reference/java/net/CookieHandler). In such case add interceptor the same way as below:  \n \n-```\n-OkHttpClient okHttp = new OkHttpClient.Builder()\n-    .addNetworkInterceptor(new CurlInterceptor())\n-    .build();\n+```kotlin\n+val client = OkHttpClient.Builder()\n+            .addNetworkInterceptor(CurlInterceptor(AndroidLogger()))\n+            .build()\n ```\n \n-To get know more about Interceptor in OkHttp take a look here: https://github.com/square/okhttp/wiki/Interceptors\n+To get know more about Interceptor in OkHttp take a look [here](https://square.github.io/okhttp/interceptors/).\n+\n+## Configuration\n+\n+`CurlInterceptor` accepts an optional configuration object. With `Configuration` you can specify various options like:\n+* header modifiers - custom logic for modifying header values\n+* components - list of required command components\n+* flags - optional curl flags\n+* limit - bytes limit for body\n+* delimiter for command components \n+\n+```kotlin\n+class Configuration(\n+    val headerModifiers: List<HeaderModifier> = emptyList(),\n+    val components: List<CommandComponent> = CommandComponent.DEFAULT,\n+    val flags: Flags = Flags.EMPTY,\n+    val limit: Long = 1024L * 1024L,\n+    val delimiter: String = \" \"\n+)\n+```\n \n ## Header modifiers\n-Ok2Curl allows you to modify any header before creating curl command. All you have to do is create your own modifier that implements [HeaderModifier](https://github.com/mrmike/Ok2Curl/blob/master/ok2curl/src/main/java/com/moczul/ok2curl/modifier/HeaderModifier.java)\n-and add this modifier to CurlInterceptor. See [sample](https://github.com/mrmike/Ok2Curl/blob/master/sample/src/main/java/com/moczul/sample/RequestService.java) for reference.\n+Ok2Curl allows you to modify any header before creating curl command. All you have to do is create your own modifier that implements [HeaderModifier](https://github.com/mrmike/Ok2Curl/blob/master/ok2curl/src/main/java/com/moczul/ok2curl/modifier/HeaderModifier.kt)\n+and add this modifier to CurlInterceptor. See [sample](https://github.com/mrmike/Ok2Curl/blob/master/sample/src/main/java/com/moczul/sample/RequestService.kt) for reference.\n+```\n+val modifier = BasicAuthorizationHeaderModifier(Base64Decoder())\n+val configuration = Configuration(headerModifiers = listOf(modifier))\n+val curlInterceptor = CurlInterceptor(AndroidLogger(), configuration)\n ```\n-final BasicAuthorizationHeaderModifier modifier = new BasicAuthorizationHeaderModifier(new Base64Decoder());\n-final List<HeaderModifier> modifiers = Collections.<HeaderModifier>singletonList(modifier);\n \n-final CurlInterceptor curlInterceptor = new CurlInterceptor(new AndroidLogger(), modifiers);\n+## Command Components\n+With Ok2Curl configuration you can specify a list of components for curl command. For instance,\n+you can skip header, body, and flag components. \n+```kotlin\n+val components = listOf(Curl, Method, Url)\n+val configuration = Configuration(components = components)\n+val curlInterceptor = CurlInterceptor(AndroidLogger(), configuration)\n ```\n \n-## Options\n-Ok2Curl supports basic Curl options. In order to use options use the following code:\n+As a result, CurlInterceptor will receive given simplified command\n+```shell\n+// Headers, body and flags are skipped\n+curl -X GET https://api.github.com/repos/vmg/redcarpet/issues?state=closed\n ```\n-final Options options = Options.builder()\n-                .insecure()\n-                .connectTimeout(120)\n-                .retry(5)\n-                .build();\n \n-final CurlInterceptor interceptor = new CurlInterceptor(logger, options);\n+## Flags\n+Ok2Curl supports basic Curl options. To use options use the following code:\n+```kotlin\n+val flags = Flags.builder()\n+            .insecure()\n+            .connectTimeout(seconds = 120)\n+            .retry(5)\n+            .build()\n+val configuration = Configuration(flags = flags)\n+val curlInterceptor = CurlInterceptor(AndroidLogger(), configuration)\n ```\n Since now every Curl command will start with `curl --insecure --connect-timeout 120 --retry 5...`\n \n@@ -75,13 +103,13 @@ Since now every Curl command will start with `curl --insecure --connect-timeout\n * --compressed\n * --location\n \n-If would like to support any new options please feel free to open PR. Full list of curl options is\n+If would like to support any new options please feel free to open PR. A full list of curl options is\n available [here](https://curl.haxx.se/docs/manpage.html).\n \n \n ## License\n \n-    Copyright 2018 Michał Moczulski\n+    Copyright 2021 Michał Moczulski\n \n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License."
  },
  {
    "sha": "b7c4a4581c310df04b292e088f9fb5663d30196e",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/build.gradle",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/build.gradle",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/build.gradle?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -1,10 +1,13 @@\n buildscript {\n+    ext.kotlin_version = '1.4.30'\n+\n     repositories {\n         google()\n         jcenter()\n     }\n     dependencies {\n-        classpath 'com.android.tools.build:gradle:3.6.3'\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n+        classpath 'com.android.tools.build:gradle:4.1.2'\n         classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'\n     }"
  },
  {
    "sha": "2a563242c11316831a57f9a5df4bfab13a1d21e3",
    "filename": "gradle/wrapper/gradle-wrapper.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/gradle/wrapper/gradle-wrapper.properties",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/gradle/wrapper/gradle-wrapper.properties",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/gradle/wrapper/gradle-wrapper.properties?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -1,5 +1,5 @@\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-6.4-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-6.8.2-bin.zip\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists"
  },
  {
    "sha": "0f8a1797032172f7b7623f1a67e75f5c162ec4e6",
    "filename": "ok2curl/build.gradle",
    "status": "modified",
    "additions": 16,
    "deletions": 11,
    "changes": 27,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/build.gradle",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/build.gradle",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/build.gradle?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -1,20 +1,25 @@\n-apply plugin: 'java'\n-apply plugin: 'maven'\n-apply plugin: 'maven-publish'\n-apply plugin: 'com.jfrog.bintray'\n+plugins {\n+    id 'java-library'\n+    id 'kotlin'\n+    id 'maven'\n+    id 'maven-publish'\n+    id 'com.jfrog.bintray'\n+}\n \n-group='com.github.mrmike'\n-version='0.7.0'\n+java {\n+    sourceCompatibility = JavaVersion.VERSION_1_8\n+    targetCompatibility = JavaVersion.VERSION_1_8\n+}\n \n-targetCompatibility = '1.8'\n-sourceCompatibility = '1.8'\n+group = 'com.github.mrmike'\n+version = '0.7.0'\n \n dependencies {\n-    implementation 'com.squareup.okhttp3:okhttp:4.6.0'\n+    implementation 'com.squareup.okhttp3:okhttp:4.9.0'\n \n-    testImplementation 'junit:junit:4.12'\n+    testImplementation 'junit:junit:4.13.1'\n     testImplementation 'org.mockito:mockito-core:2.23.0'\n-    testImplementation 'com.squareup.okhttp3:mockwebserver:4.2.0'\n+    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'\n }\n \n task sourcesJar(type: Jar, dependsOn: classes) {"
  },
  {
    "sha": "00de226060105b1f27d63108bd5a98f62d5dd011",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/CommandComponent.kt",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/CommandComponent.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/CommandComponent.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/CommandComponent.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,17 @@\n+package com.moczul.ok2curl\n+\n+sealed class CommandComponent {\n+\n+    object Curl : CommandComponent()\n+    object Flags : CommandComponent()\n+    object Method : CommandComponent()\n+    object Header : CommandComponent()\n+    object Body : CommandComponent()\n+    object Url : CommandComponent()\n+\n+    companion object {\n+        @JvmField\n+        val DEFAULT = listOf(Curl, Flags, Method, Header, Body, Url)\n+    }\n+}\n+"
  },
  {
    "sha": "b1a575fd6050941e71bda090afca15cfdd4fe210",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/ConfigurableCurlBuilder.java",
    "status": "removed",
    "additions": 0,
    "deletions": 86,
    "changes": 86,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/ConfigurableCurlBuilder.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/ConfigurableCurlBuilder.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/ConfigurableCurlBuilder.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,86 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import com.moczul.ok2curl.modifier.HeaderModifier;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import okhttp3.Request;\n-\n-import static com.moczul.ok2curl.StringUtil.join;\n-\n-public class ConfigurableCurlBuilder extends CurlBuilder {\n-\n-    public static final int PART_CURL = 0;\n-    public static final int PART_OPTIONS = 1;\n-    public static final int PART_METHOD = 2;\n-    public static final int PART_HEADERS = 3;\n-    public static final int PART_CONTENT_TYPE = 4;\n-    public static final int PART_BODY = 5;\n-    public static final int PART_URL = 6;\n-    protected static final int[] DEFAULT_PARTS_ORDER = new int[]{PART_CURL, PART_OPTIONS, PART_METHOD, PART_HEADERS, PART_CONTENT_TYPE, PART_BODY, PART_URL};\n-\n-    protected final int[] partsOrder;\n-\n-    public ConfigurableCurlBuilder(Request request, long limit, List<HeaderModifier> headerModifiers, Options options, String delimiter) {\n-        this(request, limit, headerModifiers, options, delimiter, DEFAULT_PARTS_ORDER);\n-    }\n-\n-    public ConfigurableCurlBuilder(Request request, long limit, List<HeaderModifier> headerModifiers, Options options, String delimiter, int[] partsOrder) {\n-        super(request, limit, headerModifiers, options, delimiter);\n-        this.partsOrder = partsOrder;\n-    }\n-\n-    @Override\n-    public String build() {\n-        List<String> parts = new ArrayList<>();\n-        for (int part : partsOrder) {\n-            switch (part) {\n-                case PART_CURL: addCurl(parts); break;\n-                case PART_OPTIONS: addOptions(parts); break;\n-                case PART_METHOD: addMethod(parts); break;\n-                case PART_HEADERS: addHeaders(parts); break;\n-                case PART_CONTENT_TYPE: addContentType(parts); break;\n-                case PART_BODY: addBody(parts); break;\n-                case PART_URL: addUrl(parts); break;\n-            }\n-        }\n-\n-        return join(delimiter, parts);\n-    }\n-\n-    private void addCurl(List<String> parts) {\n-        parts.add(\"curl\");\n-    }\n-\n-    private void addOptions(List<String> parts) {\n-        parts.addAll(options);\n-    }\n-\n-    private void addMethod(List<String> parts) {\n-        parts.add(String.format(FORMAT_METHOD, method.toUpperCase()));\n-    }\n-\n-    private void addHeaders(List<String> parts) {\n-        for (Header header : headers) {\n-            final String headerPart = String.format(FORMAT_HEADER, header.name(), header.value());\n-            parts.add(headerPart);\n-        }\n-    }\n-\n-    private void addContentType(List<String> parts) {\n-        if (contentType != null && !containsName(CONTENT_TYPE, headers)) {\n-            parts.add(String.format(FORMAT_HEADER, CONTENT_TYPE, contentType));\n-        }\n-    }\n-\n-    private void addBody(List<String> parts) {\n-        if (body != null) {\n-            parts.add(String.format(FORMAT_BODY, body));\n-        }\n-    }\n-\n-    private void addUrl(List<String> parts) {\n-        parts.add(String.format(FORMAT_URL, url));\n-    }\n-}"
  },
  {
    "sha": "5f1e01afe0491e238a821df757cda233597e052e",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/Configuration.kt",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/Configuration.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/Configuration.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/Configuration.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,11 @@\n+package com.moczul.ok2curl\n+\n+import com.moczul.ok2curl.modifier.HeaderModifier\n+\n+class Configuration @JvmOverloads constructor(\n+    val headerModifiers: List<HeaderModifier> = emptyList(),\n+    val components: List<CommandComponent> = CommandComponent.DEFAULT,\n+    val flags: Flags = Flags.EMPTY,\n+    val limit: Long = 1024L * 1024L,\n+    val delimiter: String = \" \"\n+)\n\\ No newline at end of file"
  },
  {
    "sha": "9bb98cf7ebb7267c6a42ce7e0728083b7755c90a",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/CurlBuilder.java",
    "status": "removed",
    "additions": 0,
    "deletions": 153,
    "changes": 153,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/CurlBuilder.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/CurlBuilder.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/CurlBuilder.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,153 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import com.moczul.ok2curl.modifier.HeaderModifier;\n-\n-import java.io.IOException;\n-import java.nio.charset.Charset;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-import okhttp3.Headers;\n-import okhttp3.MediaType;\n-import okhttp3.Request;\n-import okhttp3.RequestBody;\n-import okio.Buffer;\n-import okio.BufferedSink;\n-import okio.Okio;\n-\n-import static com.moczul.ok2curl.StringUtil.join;\n-\n-public class CurlBuilder {\n-\n-    protected static final String FORMAT_HEADER = \"-H \\\"%1$s:%2$s\\\"\";\n-    protected static final String FORMAT_METHOD = \"-X %1$s\";\n-    protected static final String FORMAT_BODY = \"-d '%1$s'\";\n-    protected static final String FORMAT_URL = \"\\\"%1$s\\\"\";\n-    protected static final String CONTENT_TYPE = \"Content-Type\";\n-\n-    protected final String url;\n-    protected final String method;\n-    protected final String contentType;\n-    protected final String body;\n-    protected final List<String> options;\n-    protected final List<Header> headers;\n-    protected final String delimiter;\n-\n-    public CurlBuilder(Request request) {\n-        this(request, -1L, Collections.emptyList(), Options.EMPTY);\n-    }\n-\n-    public CurlBuilder(Request request, long limit, List<HeaderModifier> headerModifiers, Options options) {\n-        this(request, limit, headerModifiers, options, \" \");\n-    }\n-\n-    public CurlBuilder(Request request, long limit, List<HeaderModifier> headerModifiers, Options options, String delimiter) {\n-        this.url = request.url().toString();\n-        this.method = request.method();\n-        this.options = Collections.unmodifiableList(options.list());\n-        this.delimiter = delimiter;\n-        final RequestBody body = request.body();\n-        if (body != null) {\n-            this.contentType = getContentType(body);\n-            this.body = getBodyAsString(body, limit);\n-        } else {\n-            this.contentType = null;\n-            this.body = null;\n-        }\n-\n-        final Headers headers = request.headers();\n-        final List<Header> modifiableHeaders = new LinkedList<>();\n-        for (int i = 0; i < headers.size(); i++) {\n-            final Header header = new Header(headers.name(i), headers.value(i));\n-            final Header modifiedHeader = modifyHeader(header, headerModifiers);\n-            if (modifiedHeader != null) {\n-                modifiableHeaders.add(modifiedHeader);\n-            }\n-        }\n-        this.headers = Collections.unmodifiableList(modifiableHeaders);\n-    }\n-\n-    private Header modifyHeader(Header header, List<HeaderModifier> headerModifiers) {\n-        for (HeaderModifier modifier : headerModifiers) {\n-            if (modifier.matches(header)) {\n-                return modifier.modify(header);\n-            }\n-        }\n-\n-        return header;\n-    }\n-\n-    private String getContentType(RequestBody body) {\n-        final MediaType mediaType = body.contentType();\n-        if (mediaType != null) {\n-            return mediaType.toString();\n-        }\n-\n-        return null;\n-    }\n-\n-    private String getBodyAsString(RequestBody body, long limit) {\n-        try {\n-            final Buffer sink = new Buffer();\n-\n-            final MediaType mediaType = body.contentType();\n-            final Charset charset = getCharset(mediaType);\n-\n-            if (limit > 0) {\n-                final BufferedSink buffer = Okio.buffer(new LimitedSink(sink, limit));\n-                body.writeTo(buffer);\n-                buffer.flush();\n-            } else {\n-                body.writeTo(sink);\n-            }\n-\n-            return sink.readString(charset);\n-        } catch (IOException e) {\n-            return \"Error while reading body: \" + e.toString();\n-        }\n-    }\n-\n-    private Charset getCharset(MediaType mediaType) {\n-        if (mediaType != null) {\n-            return mediaType.charset(Charset.defaultCharset());\n-        }\n-\n-        return Charset.defaultCharset();\n-    }\n-\n-    public String build() {\n-        List<String> parts = new ArrayList<>();\n-        parts.add(\"curl\");\n-        parts.addAll(options);\n-        parts.add(String.format(FORMAT_METHOD, method.toUpperCase()));\n-\n-        for (Header header : headers) {\n-            final String headerPart = String.format(FORMAT_HEADER, header.name(), header.value());\n-            parts.add(headerPart);\n-        }\n-\n-        if (contentType != null && !containsName(CONTENT_TYPE, headers)) {\n-            parts.add(String.format(FORMAT_HEADER, CONTENT_TYPE, contentType));\n-        }\n-\n-        if (body != null) {\n-            parts.add(String.format(FORMAT_BODY, body));\n-        }\n-\n-        parts.add(String.format(FORMAT_URL, url));\n-\n-        return join(delimiter, parts);\n-    }\n-\n-    protected boolean containsName(String name, List<Header> headers) {\n-        for (Header header : headers) {\n-            if (header.name().equals(name)) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n-    }\n-}"
  },
  {
    "sha": "de656ff8174a09e2e79df2b27714e9ab5b12af9f",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/CurlGenerator.kt",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/CurlGenerator.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/CurlGenerator.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/CurlGenerator.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,111 @@\n+package com.moczul.ok2curl\n+\n+import okhttp3.Headers\n+import okhttp3.HttpUrl\n+import okhttp3.MediaType\n+import okhttp3.Request\n+import okhttp3.RequestBody\n+import okio.Buffer\n+import okio.buffer\n+import java.io.IOException\n+import java.nio.charset.Charset\n+import java.util.*\n+\n+class CurlGenerator(private val configuration: Configuration) {\n+\n+    fun generateCommand(request: Request): String {\n+        return configuration.components\n+            .flatMap { generateCommandComponent(it, request) }\n+            .joinToString(separator = configuration.delimiter)\n+    }\n+\n+    private fun generateCommandComponent(\n+        commandComponent: CommandComponent,\n+        request: Request\n+    ): List<String> {\n+        return when (commandComponent) {\n+            CommandComponent.Curl -> listOf(\"curl\")\n+            CommandComponent.Url -> generateUrl(request.url)\n+            CommandComponent.Flags -> generateFlags()\n+            CommandComponent.Body -> generateBody(request.body)\n+            CommandComponent.Method -> generateMethod(request.method)\n+            CommandComponent.Header -> generateHeaders(request.headers, request.body)\n+        }\n+    }\n+\n+    private fun generateBody(body: RequestBody?): List<String> {\n+        return if (body != null) {\n+            val bodyString = getBodyAsString(body)\n+            listOf(bodyString)\n+        } else {\n+            emptyList()\n+        }\n+    }\n+\n+    private fun getBodyAsString(body: RequestBody) = try {\n+        val sink = Buffer()\n+        val mediaType = body.contentType()\n+        val charset: Charset = getCharset(mediaType)\n+        if (configuration.limit > 0) {\n+            val buffer = LimitedSink(sink, configuration.limit).buffer()\n+            body.writeTo(buffer)\n+            buffer.flush()\n+        } else {\n+            body.writeTo(sink)\n+        }\n+        FORMAT_BODY.format(sink.readString(charset))\n+    } catch (e: IOException) {\n+        \"Error while reading body: $e\"\n+    }\n+\n+    private fun generateHeaders(headers: Headers, body: RequestBody?): List<String> {\n+        return headers\n+            .map { Header(name = it.first, value = it.second) }\n+            .mapNotNull { header -> modifyHeader(header) }\n+            .applyContentTypeHeader(body)\n+            .map { header -> FORMAT_HEADER.format(header.name, header.value) }\n+    }\n+\n+\n+    private fun modifyHeader(header: Header): Header? {\n+        val modifier = configuration.headerModifiers.find { it.matches(header) }\n+        return if (modifier != null) {\n+            modifier.modify(header)\n+        } else {\n+            header\n+        }\n+    }\n+\n+    private fun generateMethod(method: String): List<String> {\n+        return listOf(FORMAT_METHOD.format(method.toUpperCase(Locale.getDefault())))\n+    }\n+\n+    private fun generateFlags(): List<String> = configuration.flags.list()\n+\n+    private fun generateUrl(url: HttpUrl): List<String> = listOf(FORMAT_URL.format(url.toString()))\n+\n+    private fun getCharset(mediaType: MediaType?): Charset {\n+        val default = Charset.defaultCharset()\n+        return mediaType?.charset(default) ?: default\n+    }\n+\n+\n+    private fun List<Header>.applyContentTypeHeader(body: RequestBody?): List<Header> {\n+        val contentTypeHeader = find { it.name.equals(CONTENT_TYPE, ignoreCase = false) }\n+        val contentType = body?.contentType()?.toString()\n+\n+        return if (contentTypeHeader == null && contentType != null) {\n+            this + listOf(Header(CONTENT_TYPE, contentType))\n+        } else {\n+            this\n+        }\n+    }\n+\n+    private companion object {\n+        const val FORMAT_HEADER = \"-H \\\"%1\\$s:%2\\$s\\\"\"\n+        const val FORMAT_METHOD = \"-X %1\\$s\"\n+        const val FORMAT_BODY = \"-d '%1\\$s'\"\n+        const val FORMAT_URL = \"\\\"%1\\$s\\\"\"\n+        const val CONTENT_TYPE = \"Content-Type\"\n+    }\n+}"
  },
  {
    "sha": "0b157db3dea61df99bd50f57469af163bbd68e28",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.java",
    "status": "removed",
    "additions": 0,
    "deletions": 111,
    "changes": 111,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,111 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import com.moczul.ok2curl.logger.Loggable;\n-import com.moczul.ok2curl.modifier.HeaderModifier;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import okhttp3.Interceptor;\n-import okhttp3.Request;\n-import okhttp3.Response;\n-\n-public class CurlInterceptor implements Interceptor {\n-\n-    private static final long DEFAULT_LIMIT = 1024L * 1024L;\n-    private static final String DEFAULT_DELIMITER = \" \";\n-\n-    protected final Loggable logger;\n-    protected final long limit;\n-    protected final List<HeaderModifier> headerModifiers = new ArrayList<>();\n-    protected final Options options;\n-    protected final String delimiter;\n-\n-    /**\n-     * Interceptor responsible for printing curl logs\n-     *\n-     * Logs are pushed to stdout with 1MB limit\n-     *\n-     * @param logger output of logging\n-     */\n-    public CurlInterceptor(Loggable logger) {\n-        this(logger, DEFAULT_LIMIT, Collections.emptyList(), Options.EMPTY, DEFAULT_DELIMITER);\n-    }\n-\n-    /**\n-     * Interceptor responsible for printing curl logs\n-     *\n-     * Logs are pushed to stdout with 1MB limit\n-     *\n-     * @param logger output of logging\n-     * @param options list of curl options\n-     */\n-    public CurlInterceptor(Loggable logger, Options options) {\n-        this(logger, DEFAULT_LIMIT, Collections.emptyList(), options, DEFAULT_DELIMITER);\n-    }\n-\n-    /**\n-     * Interceptor responsible for printing curl logs\n-     *\n-     * @param logger output of logging\n-     * @param headerModifiers list of header modifiers\n-     */\n-    public CurlInterceptor(Loggable logger, List<HeaderModifier> headerModifiers) {\n-        this(logger, DEFAULT_LIMIT, headerModifiers, Options.EMPTY, DEFAULT_DELIMITER);\n-    }\n-\n-    /**\n-     * Interceptor responsible for printing curl logs\n-     *\n-     * @param logger output of logging\n-     * @param limit limit maximal bytes logged, if negative - non limited\n-     */\n-    public CurlInterceptor(Loggable logger, long limit) {\n-        this(logger, limit, Collections.emptyList(), Options.EMPTY, DEFAULT_DELIMITER);\n-    }\n-\n-    /**\n-     *  Interceptor responsible for printing curl logs\n-     * @param logger output of logging\n-     * @param limit limit maximal bytes logged, if negative - non limited\n-     * @param headerModifiers list of header modifiers\n-     * @param options list of curl options\n-     */\n-    public CurlInterceptor(Loggable logger, long limit, List<HeaderModifier> headerModifiers, Options options) {\n-        this(logger, limit, headerModifiers, options, DEFAULT_DELIMITER);\n-    }\n-\n-    /**\n-     *  Interceptor responsible for printing curl logs\n-     * @param logger output of logging\n-     * @param limit limit maximal bytes logged, if negative - non limited\n-     * @param headerModifiers list of header modifiers\n-     * @param options list of curl options\n-     * @param delimiter string delimiter\n-     */\n-    public CurlInterceptor(Loggable logger, long limit, List<HeaderModifier> headerModifiers, Options options, String delimiter) {\n-        this.logger = logger;\n-        this.limit = limit;\n-        this.headerModifiers.addAll(headerModifiers);\n-        this.options = options;\n-        this.delimiter = delimiter;\n-    }\n-\n-    @Override\n-    public Response intercept(Chain chain) throws IOException {\n-        final Request request = chain.request();\n-\n-        final Request copy = request.newBuilder().build();\n-        final String curl = getCurlBuilder(copy).build();\n-\n-        logger.log(curl);\n-\n-        return chain.proceed(request);\n-    }\n-\n-    protected CurlBuilder getCurlBuilder(Request copy) {\n-        return new CurlBuilder(copy, limit, headerModifiers, options, delimiter);\n-    }\n-}"
  },
  {
    "sha": "92396771623436db3eaae0bf9f624f8a64d30e3e",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.kt",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/CurlInterceptor.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,23 @@\n+package com.moczul.ok2curl\n+\n+import com.moczul.ok2curl.logger.Loggable\n+import okhttp3.Interceptor\n+import okhttp3.Response\n+\n+class CurlInterceptor @JvmOverloads constructor(\n+    private val logger: Loggable,\n+    configuration: Configuration = Configuration()\n+) : Interceptor {\n+\n+    private val curlGenerator = CurlGenerator(configuration)\n+\n+    override fun intercept(chain: Interceptor.Chain): Response {\n+        val request = chain.request()\n+\n+        val curl = curlGenerator.generateCommand(request)\n+\n+        logger.log(curl)\n+\n+        return chain.proceed(request)\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1f95bd702c409f82088d222e2658eca9fe81276e",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/Flags.kt",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/Flags.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/Flags.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/Flags.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,64 @@\n+package com.moczul.ok2curl\n+\n+import java.util.*\n+import kotlin.collections.ArrayList\n+import kotlin.collections.HashSet\n+\n+class Flags private constructor(options: Collection<String>) {\n+    private val options: List<String>\n+\n+    fun list(): List<String> {\n+        return options\n+    }\n+\n+    class Builder {\n+        private val options: MutableSet<String> = HashSet()\n+        fun insecure(): Builder {\n+            options.add(\"--insecure\")\n+            return this\n+        }\n+\n+        fun maxTime(seconds: Int): Builder {\n+            options.add(String.format(Locale.getDefault(), \"--max-time %d\", seconds))\n+            return this\n+        }\n+\n+        fun connectTimeout(seconds: Int): Builder {\n+            options.add(String.format(Locale.getDefault(), \"--connect-timeout %d\", seconds))\n+            return this\n+        }\n+\n+        fun retry(num: Int): Builder {\n+            options.add(String.format(Locale.getDefault(), \"--retry %d\", num))\n+            return this\n+        }\n+\n+        fun compressed(): Builder {\n+            options.add(\"--compressed\")\n+            return this\n+        }\n+\n+        fun location(): Builder {\n+            options.add(\"--location\")\n+            return this\n+        }\n+\n+        fun build(): Flags {\n+            return Flags(options)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmField\n+        val EMPTY = Flags(emptyList())\n+\n+        @JvmStatic\n+        fun builder(): Builder {\n+            return Builder()\n+        }\n+    }\n+\n+    init {\n+        this.options = ArrayList(options)\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2b9a8253a73b34a5eccea8a6ec0fc0772e754118",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/Header.java",
    "status": "removed",
    "additions": 0,
    "deletions": 39,
    "changes": 39,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/Header.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/Header.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/Header.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,39 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-public class Header {\n-\n-    private final String name;\n-    private final String value;\n-\n-    public Header(String name, String value) {\n-        this.name = name;\n-        this.value = value;\n-    }\n-\n-    public String name() {\n-        return name;\n-    }\n-\n-    public String value() {\n-        return value;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        Header header = (Header) o;\n-\n-        if (name != null ? !name.equals(header.name) : header.name != null) return false;\n-        return value != null ? value.equals(header.value) : header.value == null;\n-\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = name != null ? name.hashCode() : 0;\n-        result = 31 * result + (value != null ? value.hashCode() : 0);\n-        return result;\n-    }\n-}"
  },
  {
    "sha": "882b85691e7d36e667b66e6bfc7c69c9bc32b000",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/Header.kt",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/Header.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/Header.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/Header.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,3 @@\n+package com.moczul.ok2curl\n+\n+data class Header(val name: String, val value: String)\n\\ No newline at end of file"
  },
  {
    "sha": "a0d32183401838e79748d673955cf96f837cd3db",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.java",
    "status": "removed",
    "additions": 0,
    "deletions": 44,
    "changes": 44,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,44 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import java.io.IOException;\n-\n-import okio.Buffer;\n-import okio.Sink;\n-import okio.Timeout;\n-\n-public class LimitedSink implements Sink {\n-\n-    private final Buffer limited;\n-    private long total;\n-\n-    public LimitedSink(Buffer limited, long limit) {\n-        if (limited == null) throw new NullPointerException(\"limited can not be null\");\n-        if (limit <= 0) throw new IllegalArgumentException(\"limit has to be grater than 0\");\n-        this.limited = limited;\n-        total = limit;\n-    }\n-\n-    @Override\n-    public void write(Buffer source, long byteCount) throws IOException {\n-        if (total > 0) {\n-            long toWrite = Math.min(total, byteCount);\n-            limited.write(source, toWrite);\n-            total -= toWrite;\n-        }\n-    }\n-\n-    @Override\n-    public void flush() throws IOException {\n-        limited.flush();\n-    }\n-\n-    @Override\n-    public Timeout timeout() {\n-        return Timeout.NONE;\n-    }\n-\n-    @Override\n-    public void close() throws IOException {\n-        limited.close();\n-    }\n-}"
  },
  {
    "sha": "8b38266549d0fafea7e0633c09c331fc5bf58273",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.kt",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/LimitedSink.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,37 @@\n+package com.moczul.ok2curl\n+\n+import okio.Buffer\n+import okio.Sink\n+import okio.Timeout\n+\n+class LimitedSink(limited: Buffer?, limit: Long) : Sink {\n+    private val limited: Buffer\n+    private var total: Long\n+\n+    override fun write(source: Buffer, byteCount: Long) {\n+        if (total > 0) {\n+            val toWrite = total.coerceAtMost(byteCount)\n+            limited.write(source, toWrite)\n+            total -= toWrite\n+        }\n+    }\n+\n+    override fun flush() {\n+        limited.flush()\n+    }\n+\n+    override fun timeout(): Timeout {\n+        return Timeout.NONE\n+    }\n+\n+    override fun close() {\n+        limited.close()\n+    }\n+\n+    init {\n+        if (limited == null) throw NullPointerException(\"limited can not be null\")\n+        require(limit > 0) { \"limit has to be grater than 0\" }\n+        this.limited = limited\n+        total = limit\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bbc1c622ddfb359ced8853fb5356073c00e6a3e9",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/Options.java",
    "status": "removed",
    "additions": 0,
    "deletions": 68,
    "changes": 68,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/Options.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/Options.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/Options.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,68 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Set;\n-\n-public class Options {\n-\n-    public static final Options EMPTY = new Options(Collections.emptyList());\n-\n-    private final List<String> options;\n-\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    private Options(Collection<String> options) {\n-        this.options = new ArrayList<>(options);\n-    }\n-\n-    public List<String> list() {\n-        return options;\n-    }\n-\n-    public static class Builder {\n-\n-        private final Set<String> options = new HashSet<>();\n-\n-        public Builder insecure() {\n-            options.add(\"--insecure\");\n-            return this;\n-        }\n-\n-        public Builder maxTime(int seconds) {\n-            options.add(String.format(Locale.getDefault(), \"--max-time %d\", seconds));\n-            return this;\n-        }\n-\n-        public Builder connectTimeout(int seconds) {\n-            options.add(String.format(Locale.getDefault(), \"--connect-timeout %d\", seconds));\n-            return this;\n-        }\n-\n-        public Builder retry(int num) {\n-            options.add(String.format(Locale.getDefault(), \"--retry %d\", num));\n-            return this;\n-        }\n-\n-        public Builder compressed() {\n-            options.add(\"--compressed\");\n-            return this;\n-        }\n-\n-        public Builder location() {\n-            options.add(\"--location\");\n-            return this;\n-        }\n-\n-        public Options build() {\n-            return new Options(options);\n-        }\n-    }\n-\n-}"
  },
  {
    "sha": "450432f67b8267dd15910322641568c484e3bc45",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/StringUtil.java",
    "status": "removed",
    "additions": 0,
    "deletions": 23,
    "changes": 23,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/StringUtil.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/StringUtil.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/StringUtil.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,23 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-public class StringUtil {\n-\n-    /**\n-     * Returns a string containing the tokens joined by delimiters.\n-     * @param tokens an array objects to be joined. Strings will be formed from\n-     *     the objects by calling object.toString().\n-     */\n-    public static String join(CharSequence delimiter, Iterable tokens) {\n-        StringBuilder sb = new StringBuilder();\n-        boolean firstTime = true;\n-        for (Object token: tokens) {\n-            if (firstTime) {\n-                firstTime = false;\n-            } else {\n-                sb.append(delimiter);\n-            }\n-            sb.append(token);\n-        }\n-        return sb.toString();\n-    }\n-}"
  },
  {
    "sha": "9082b75e5e664b8b1837b5c8342c2b603e6e3143",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.java",
    "status": "removed",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,6 +0,0 @@\n-package com.moczul.ok2curl.logger;\n-\n-public interface Loggable {\n-\n-    void log(String message);\n-}"
  },
  {
    "sha": "05396e9ff0d921b2a6fa231aa81bfb64b800aafc",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.kt",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/logger/Loggable.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,5 @@\n+package com.moczul.ok2curl.logger\n+\n+interface Loggable {\n+    fun log(message: String)\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "29cec21f3f68397c4e6622ab928bc3cd6dc50581",
    "filename": "ok2curl/src/main/java/com/moczul/ok2curl/modifier/HeaderModifier.kt",
    "status": "renamed",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/modifier/HeaderModifier.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/main/java/com/moczul/ok2curl/modifier/HeaderModifier.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/main/java/com/moczul/ok2curl/modifier/HeaderModifier.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -1,21 +1,20 @@\n-package com.moczul.ok2curl.modifier;\n+package com.moczul.ok2curl.modifier\n \n-import com.moczul.ok2curl.Header;\n+import com.moczul.ok2curl.Header\n \n /**\n  * HeaderModifier allow for changing header name/value before creating curl log\n  */\n-public interface HeaderModifier {\n-\n+interface HeaderModifier {\n     /**\n      * @param header the header to check\n      * @return true if header should be modified and false otherwise.\n      */\n-    boolean matches(Header header);\n+    fun matches(header: Header): Boolean\n \n     /**\n      * @param header the header to modify\n      * @return modified header or null to omit header in curl log\n      */\n-    Header modify(Header header);\n-}\n+    fun modify(header: Header): Header?\n+}\n\\ No newline at end of file",
    "previous_filename": "ok2curl/src/main/java/com/moczul/ok2curl/modifier/HeaderModifier.java"
  },
  {
    "sha": "b4da299b1bd85f93c7779e9d146ba7967db9d9a7",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 130,
    "changes": 130,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,130 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import com.moczul.ok2curl.util.FakeLogger;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n-\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import okhttp3.Cookie;\n-import okhttp3.CookieJar;\n-import okhttp3.HttpUrl;\n-import okhttp3.MediaType;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.RequestBody;\n-import okhttp3.mockwebserver.MockResponse;\n-import okhttp3.mockwebserver.MockWebServer;\n-import okio.BufferedSink;\n-\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Matchers.contains;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-\n-public class CookieHandlerTest {\n-\n-    private FakeLogger logger;\n-    private MockWebServer server;\n-    private String url;\n-\n-    @Before\n-    public void setUpOkHttp() throws IOException {\n-        logger = mock(FakeLogger.class);\n-\n-        server = new MockWebServer();\n-        server.start();\n-        server.enqueue(new MockResponse().setBody(\"ok\"));\n-        url = server.url(\"/test\").toString();\n-    }\n-\n-    @After\n-    public void tearDown() throws IOException {\n-        server.shutdown();\n-    }\n-\n-    @Test\n-    public void testIfRequestBodyThrowsException_returnInfoAboutError() throws Exception {\n-        final Request request = new Request.Builder().url(url).patch(new RequestBody() {\n-            @Override\n-            public MediaType contentType() {\n-                return MediaType.parse(\"application/json\");\n-            }\n-\n-            @Override\n-            public void writeTo(BufferedSink sink) throws IOException {\n-                throw new IOException(\"exception\");\n-            }\n-        }).build();\n-\n-        OkHttpClient okHttpClient = new OkHttpClient.Builder()\n-                .addInterceptor(new CurlInterceptor(logger))\n-                .cookieJar(getCookieJar())\n-                .build();\n-\n-        try {\n-            okHttpClient.newCall(request).execute();\n-        } catch (IOException ignore) {}\n-\n-        final ArgumentCaptor<String> stringArgumentCaptor = ArgumentCaptor.forClass(String.class);\n-        verify(logger).log(stringArgumentCaptor.capture());\n-        assertTrue(stringArgumentCaptor.getValue().contains(\"Error\"));\n-    }\n-\n-    @Test\n-    public void testApplicationInterceptor() throws IOException {\n-        final Request request = new Request.Builder().url(url).build();\n-\n-        OkHttpClient okHttpClient = new OkHttpClient.Builder()\n-                .addInterceptor(new CurlInterceptor(logger))\n-                .cookieJar(getCookieJar())\n-                .build();\n-\n-        okHttpClient.newCall(request).execute();\n-\n-        final String expectedCurl = String.format(\"curl -X GET \\\"%s\\\"\",  url);\n-        verify(logger).log(expectedCurl);\n-    }\n-\n-    @Test\n-    public void testNetworkInterceptor() throws IOException {\n-        final Request request = new Request.Builder().url(url).build();\n-\n-        OkHttpClient okHttpClient = new OkHttpClient.Builder()\n-                .addNetworkInterceptor(new CurlInterceptor(logger))\n-                .cookieJar(getCookieJar())\n-                .build();\n-\n-        okHttpClient.newCall(request).execute();\n-\n-        verify(logger).log(contains(\"-H \\\"Cookie:foo=bar; banana=rama\\\"\"));\n-    }\n-\n-    private CookieJar getCookieJar() {\n-        return new CookieJar() {\n-            @Override\n-            public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {\n-            }\n-\n-            @Override\n-            public List<Cookie> loadForRequest(HttpUrl url) {\n-                Cookie foo = new Cookie.Builder()\n-                        .name(\"foo\")\n-                        .value(\"bar\")\n-                        .domain(url.host())\n-                        .build();\n-                Cookie banana = new Cookie.Builder()\n-                        .name(\"banana\")\n-                        .value(\"rama\")\n-                        .domain(url.host())\n-                        .build();\n-                return Arrays.asList(foo, banana);\n-            }\n-        };\n-    }\n-}"
  },
  {
    "sha": "f1d4c30e511bad21cf6118663cff07e5f3eeca27",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.kt",
    "status": "added",
    "additions": 120,
    "deletions": 0,
    "changes": 120,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/CookieHandlerTest.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,120 @@\n+package com.moczul.ok2curl\n+\n+import com.moczul.ok2curl.logger.Loggable\n+import okhttp3.Cookie\n+import okhttp3.CookieJar\n+import okhttp3.HttpUrl\n+import okhttp3.MediaType\n+import okhttp3.MediaType.Companion.toMediaTypeOrNull\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import okhttp3.RequestBody\n+import okhttp3.mockwebserver.MockResponse\n+import okhttp3.mockwebserver.MockWebServer\n+import okio.BufferedSink\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.mockito.ArgumentMatchers.contains\n+import org.mockito.Mockito\n+import org.mockito.Mockito.verify\n+import java.io.IOException\n+\n+class CookieHandlerTest {\n+\n+    private val logger: Loggable = Mockito.mock(Loggable::class.java)\n+    private lateinit var server: MockWebServer\n+    private lateinit var url: String\n+\n+    @Before\n+    fun setUpOkHttp() {\n+        server = MockWebServer()\n+        server.start()\n+        server.enqueue(MockResponse().setBody(\"ok\"))\n+        url = server.url(\"/test\").toString()\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        server.shutdown()\n+    }\n+\n+    @Test\n+    fun `should intercept failed request and log error information`() {\n+        // given\n+        val request: Request = Request.Builder().url(url).patch(object : RequestBody() {\n+            override fun contentType(): MediaType? {\n+                return \"application/json\".toMediaTypeOrNull()\n+            }\n+\n+            override fun writeTo(sink: BufferedSink) {\n+                throw IOException(\"exception\")\n+            }\n+        }).build()\n+        val okHttpClient = OkHttpClient.Builder()\n+            .addInterceptor(CurlInterceptor(logger))\n+            .cookieJar(createCookieJar())\n+            .build()\n+\n+        // when\n+        try {\n+            okHttpClient.newCall(request).execute()\n+        } catch (ignore: IOException) {\n+        }\n+\n+        // then\n+        verify(logger).log(contains(\"Error\"))\n+    }\n+\n+    @Test\n+    fun `should intercept request with application interceptor`() {\n+        // given\n+        val request: Request = Request.Builder().url(url).build()\n+        val okHttpClient = OkHttpClient.Builder()\n+            .addInterceptor(CurlInterceptor(logger))\n+            .cookieJar(createCookieJar())\n+            .build()\n+\n+        // when\n+        okHttpClient.newCall(request).execute()\n+\n+        // then\n+        val expectedCurl = String.format(\"curl -X GET \\\"%s\\\"\", url)\n+        verify(logger).log(expectedCurl)\n+    }\n+\n+    @Test\n+    fun `should intercept request with network interceptor`() {\n+        // given\n+        val request: Request = Request.Builder().url(url).build()\n+        val okHttpClient = OkHttpClient.Builder()\n+            .addNetworkInterceptor(CurlInterceptor(logger))\n+            .cookieJar(createCookieJar())\n+            .build()\n+\n+        // when\n+        okHttpClient.newCall(request).execute()\n+\n+        // then\n+        verify(logger).log(contains(\"-H \\\"Cookie:foo=bar; banana=rama\\\"\"))\n+    }\n+\n+    private fun createCookieJar(): CookieJar {\n+        return object : CookieJar {\n+            override fun saveFromResponse(url: HttpUrl, cookies: List<Cookie>) {}\n+            override fun loadForRequest(url: HttpUrl): List<Cookie> {\n+                val foo: Cookie = Cookie.Builder()\n+                    .name(\"foo\")\n+                    .value(\"bar\")\n+                    .domain(url.host)\n+                    .build()\n+                val banana: Cookie = Cookie.Builder()\n+                    .name(\"banana\")\n+                    .value(\"rama\")\n+                    .domain(url.host)\n+                    .build()\n+                return listOf(foo, banana)\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3d2c31848f0b80680f0f9fca393e2f374230c099",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/CurlBuilderTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 123,
    "changes": 123,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/CurlBuilderTest.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/CurlBuilderTest.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/CurlBuilderTest.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,123 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import com.moczul.ok2curl.modifier.HeaderModifier;\n-\n-import org.junit.Test;\n-\n-import java.util.Collections;\n-import java.util.concurrent.TimeUnit;\n-\n-import okhttp3.CacheControl;\n-import okhttp3.FormBody;\n-import okhttp3.Request;\n-import okhttp3.RequestBody;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-public class CurlBuilderTest {\n-\n-    @Test\n-    public void getRequestHasCorrectCommand() {\n-        final Request request = new Request.Builder().url(\"http://example.com/\").build();\n-\n-        final String command = new CurlBuilder(request).build();\n-\n-        assertEquals(\"curl -X GET \\\"http://example.com/\\\"\", command);\n-    }\n-\n-    @Test\n-    public void getRequestHasCorrectHeader() {\n-        final Request request = new Request.Builder()\n-                .url(\"http://example.com/\")\n-                .header(\"Accept\", \"application/json\")\n-                .build();\n-\n-        final String command = new CurlBuilder(request).build();\n-\n-        assertEquals(\"curl -X GET -H \\\"Accept:application/json\\\" \\\"http://example.com/\\\"\", command);\n-    }\n-\n-    @Test\n-    public void getRequestHasCorrectCacheHeader() {\n-        final CacheControl cache  = new CacheControl.Builder()\n-                .maxAge(1, TimeUnit.DAYS)\n-                .onlyIfCached()\n-                .build();\n-\n-        final Request request = new Request.Builder()\n-                .url(\"http://example.com/\")\n-                .cacheControl(cache)\n-                .build();\n-\n-        final String command = new CurlBuilder(request).build();\n-\n-        assertEquals(\"curl -X GET -H \\\"Cache-Control:max-age=86400, only-if-cached\\\" \\\"http://example.com/\\\"\", command);\n-    }\n-\n-    @Test\n-    public void postRequestHasCorrectPostData() {\n-        final Request request = new Request.Builder().url(\"http://example.com/\").post(body()).build();\n-\n-        final String command = new CurlBuilder(request).build();\n-\n-        final String expected = \"curl -X POST -H \\\"Content-Type:application/x-www-form-urlencoded\\\" -d 'key1=value1' \\\"http://example.com/\\\"\";\n-        assertEquals(expected, command);\n-    }\n-\n-    @Test\n-    public void postRequestBodyWithNullMediaType() {\n-        final RequestBody body = RequestBody.create(null, \"StringBody\");\n-        final Request request = new Request.Builder().url(\"http://example.com/\").post(body).build();\n-\n-        final String command = new CurlBuilder(request).build();\n-\n-        final String expected = \"curl -X POST -d 'StringBody' \\\"http://example.com/\\\"\";\n-        assertEquals(expected, command);\n-    }\n-\n-    @Test\n-    public void multipleHeadersWithTheSameNameShouldBeAddedToCurlCommand() {\n-        final Request request = new Request.Builder()\n-                .url(\"http://example.com/\")\n-                .addHeader(\"Cookie\", \"FIRST=foo\")\n-                .addHeader(\"Cookie\", \"SECOND=bar\")\n-                .build();\n-\n-        final String command = new CurlBuilder(request).build();\n-\n-        assertEquals(\"curl -X GET -H \\\"Cookie:FIRST=foo\\\" -H \\\"Cookie:SECOND=bar\\\" \\\"http://example.com/\\\"\", command);\n-    }\n-\n-    @Test\n-    public void getRequestContainsInsecureOption() {\n-        final Request request = new Request.Builder().url(\"http://example.com/\").build();\n-        final Options options = Options.builder().insecure().build();\n-\n-        final String command = new CurlBuilder(request, 1024, Collections.emptyList(), options).build();\n-\n-        assertEquals(\"curl --insecure -X GET \\\"http://example.com/\\\"\", command);\n-    }\n-\n-    @Test\n-    public void getRequestContainsConnectTimeoutOptions() {\n-        final Request request = new Request.Builder().url(\"http://example.com/\").build();\n-        final Options options = Options.builder().connectTimeout(120).build();\n-\n-        final String command = new CurlBuilder(request, 1024, Collections.<HeaderModifier>emptyList(), options).build();\n-\n-        assertEquals(\"curl --connect-timeout 120 -X GET \\\"http://example.com/\\\"\", command);\n-    }\n-\n-    @Test\n-    public void getRequesWithDelimiter() {\n-        final Request request = new Request.Builder().url(\"http://example.com/\").build();\n-\n-        final String command = new CurlBuilder(request, -1L, Collections.emptyList(), Options.EMPTY, \" \\\\\\n\").build();\n-\n-        assertEquals(\"curl \\\\\\n-X GET \\\\\\n\\\"http://example.com/\\\"\", command);\n-    }\n-\n-    private RequestBody body() {\n-        return new FormBody.Builder().add(\"key1\", \"value1\").build();\n-    }\n-}"
  },
  {
    "sha": "003a0226b90dbec1e6aa2194f5d556873a37174e",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/CurlGeneratorTest.kt",
    "status": "added",
    "additions": 185,
    "deletions": 0,
    "changes": 185,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/CurlGeneratorTest.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/CurlGeneratorTest.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/CurlGeneratorTest.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,185 @@\n+package com.moczul.ok2curl\n+\n+import okhttp3.CacheControl\n+import okhttp3.FormBody\n+import okhttp3.Request\n+import okhttp3.RequestBody.Companion.toRequestBody\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+import java.util.concurrent.TimeUnit\n+\n+class CurlGeneratorTest {\n+\n+    private val configuration = Configuration()\n+\n+    @Test\n+    fun `should generate simple GET command`() {\n+        // given\n+        val curlGenerator = CurlGenerator(configuration)\n+        val request: Request = Request.Builder().url(\"http://example.com/\").build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        assertEquals(\"curl -X GET \\\"http://example.com/\\\"\", command)\n+    }\n+\n+    @Test\n+    fun `should generate get command with headers`() {\n+        // given\n+        val curlGenerator = CurlGenerator(configuration)\n+        val request: Request = Request.Builder()\n+            .url(\"http://example.com/\")\n+            .header(\"Accept\", \"application/json\")\n+            .build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        assertEquals(\"curl -X GET -H \\\"Accept:application/json\\\" \\\"http://example.com/\\\"\", command)\n+    }\n+\n+    @Test\n+    fun `should generate GET command with cache-control header`() {\n+        // given\n+        val curlGenerator = CurlGenerator(configuration)\n+        val request: Request = Request.Builder()\n+            .url(\"http://example.com/\")\n+            .cacheControl(oneDayCache())\n+            .build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        assertEquals(\n+            \"curl -X GET -H \\\"Cache-Control:max-age=86400, only-if-cached\\\" \\\"http://example.com/\\\"\",\n+            command\n+        )\n+    }\n+\n+    @Test\n+    fun `should generate POST command with body`() {\n+        // given\n+        val curlGenerator = CurlGenerator(configuration)\n+        val request: Request = Request.Builder().url(\"http://example.com/\").post(body()).build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        val expected =\n+            \"curl -X POST -H \\\"Content-Type:application/x-www-form-urlencoded\\\" -d 'key1=value1' \\\"http://example.com/\\\"\"\n+        assertEquals(expected, command)\n+    }\n+\n+    @Test\n+    fun postRequestBodyWithNullMediaType() {\n+        // given\n+        val curlGenerator = CurlGenerator(configuration)\n+        val body = \"StringBody\".toRequestBody(contentType = null)\n+        val request: Request = Request.Builder().url(\"http://example.com/\").post(body).build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        val expected = \"curl -X POST -d 'StringBody' \\\"http://example.com/\\\"\"\n+        assertEquals(expected, command)\n+    }\n+\n+    @Test\n+    fun `should generate GET command with mutli-value header`() {\n+        // given\n+        val curlGenerator = CurlGenerator(configuration)\n+        val request: Request = Request.Builder()\n+            .url(\"http://example.com/\")\n+            .addHeader(\"Cookie\", \"FIRST=foo\")\n+            .addHeader(\"Cookie\", \"SECOND=bar\")\n+            .build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // when\n+        assertEquals(\n+            \"curl -X GET -H \\\"Cookie:FIRST=foo\\\" -H \\\"Cookie:SECOND=bar\\\" \\\"http://example.com/\\\"\",\n+            command\n+        )\n+    }\n+\n+    @Test\n+    fun `should generate GET command with insecure flag`() {\n+        // given\n+        val insecureConfig = Configuration(flags = Flags.builder().insecure().build())\n+        val curlGenerator = CurlGenerator(insecureConfig)\n+        val request: Request = Request.Builder().url(\"http://example.com/\").build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        assertEquals(\"curl --insecure -X GET \\\"http://example.com/\\\"\", command)\n+    }\n+\n+    @Test\n+    fun `should generate GET command with connect-timeout flag`() {\n+        // given\n+        val timeoutConfig = Configuration(flags = Flags.builder().connectTimeout(120).build())\n+        val curlGenerator = CurlGenerator(timeoutConfig)\n+        val request: Request = Request.Builder().url(\"http://example.com/\").build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // †hen\n+        assertEquals(\"curl --connect-timeout 120 -X GET \\\"http://example.com/\\\"\", command)\n+    }\n+\n+    @Test\n+    fun `should generate GET command using specific delimiter`() {\n+        // given\n+        val delimiterConfig = Configuration(delimiter = \" \\\\\\n\")\n+        val curlGenerator = CurlGenerator(delimiterConfig)\n+        val request: Request = Request.Builder().url(\"http://example.com/\").build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        assertEquals(\"curl \\\\\\n-X GET \\\\\\n\\\"http://example.com/\\\"\", command)\n+    }\n+\n+    @Test\n+    fun `should generate POST command with specified components`() {\n+        // given\n+        val simpleConfig = Configuration(\n+            components = listOf(\n+                CommandComponent.Curl,\n+                CommandComponent.Method,\n+                CommandComponent.Url\n+            )\n+        )\n+        val curlGenerator = CurlGenerator(simpleConfig)\n+        val request: Request = Request.Builder()\n+            .url(\"https://github.com\")\n+            .cacheControl(oneDayCache())\n+            .post(body())\n+            .build()\n+\n+        // when\n+        val command = curlGenerator.generateCommand(request)\n+\n+        // then\n+        assertEquals(\"curl -X POST \\\"https://github.com/\\\"\", command)\n+    }\n+\n+    private companion object {\n+        private fun body() = FormBody.Builder().add(\"key1\", \"value1\").build()\n+\n+        private fun oneDayCache() =\n+            CacheControl.Builder().maxAge(1, TimeUnit.DAYS).onlyIfCached().build()\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "60b4f1dcd8f121691ba62f8dfff5a04a936938d2",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/FlagsTest.kt",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/FlagsTest.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/FlagsTest.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/FlagsTest.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,64 @@\n+package com.moczul.ok2curl\n+\n+import org.hamcrest.CoreMatchers.`is`\n+import org.hamcrest.CoreMatchers.hasItem\n+import org.hamcrest.MatcherAssert.assertThat\n+import org.junit.Test\n+\n+class FlagsTest {\n+\n+    @Test\n+    fun `should return empty options for default builder`() {\n+        // when    \n+        val flags = Flags.builder().build()\n+\n+        // when\n+        assertThat(flags.list().size, `is`(0))\n+    }\n+\n+    @Test\n+    fun `should correctly handle options parameters`() {\n+        // when\n+        val flags = Flags.builder()\n+            .maxTime(120)\n+            .connectTimeout(60)\n+            .retry(3)\n+            .build()\n+\n+        // then\n+        assertThat(flags.list().size, `is`(3))\n+        assertThat<List<String?>>(flags.list(), hasItem(\"--max-time 120\"))\n+        assertThat<List<String?>>(flags.list(), hasItem(\"--connect-timeout 60\"))\n+        assertThat<List<String?>>(flags.list(), hasItem(\"--retry 3\"))\n+    }\n+\n+    @Test\n+    fun `should return correct list of parameters`() {\n+        // when\n+        val flags = Flags.builder()\n+            .insecure()\n+            .compressed()\n+            .location()\n+            .build()\n+\n+        // then\n+        assertThat(flags.list().size, `is`(3))\n+        assertThat<List<String?>>(flags.list(), hasItem(\"--insecure\"))\n+        assertThat<List<String?>>(flags.list(), hasItem(\"--compressed\"))\n+        assertThat<List<String?>>(flags.list(), hasItem(\"--location\"))\n+    }\n+\n+    @Test\n+    fun `should ignore duplicated parameters`() {\n+        // when\n+        val flags = Flags.builder()\n+            .insecure()\n+            .insecure()\n+            .insecure()\n+            .build()\n+\n+        // then\n+        assertThat(flags.list().size, `is`(1))\n+        assertThat<List<String?>>(flags.list(), hasItem(\"--insecure\"))\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7f823272342c06d2c5d265ceb13453a537e1c1ad",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 72,
    "changes": 72,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,72 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import org.junit.Test;\n-\n-import java.nio.charset.Charset;\n-\n-import okio.Buffer;\n-import okio.BufferedSink;\n-import okio.ByteString;\n-import okio.Okio;\n-\n-import static org.junit.Assert.*;\n-\n-public class LimitedSinkTest {\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWhenLimitIs0_throwIllegalArgumentException() throws Exception {\n-        new LimitedSink(new Buffer(), 0L);\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWhenLimitIsNegative_throwIllegalArgumentException() throws Exception {\n-        new LimitedSink(new Buffer(), -1L);\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void testWhenBufferIsNull_throwNullPointerException() throws Exception {\n-        new LimitedSink(null, 10L);\n-    }\n-\n-    @Test\n-    public void testWhenLongResult_writeOnlyLimitedBytes() throws Exception {\n-        final Buffer limited = new Buffer();\n-        final BufferedSink source = Okio.buffer(new LimitedSink(limited, 10L));\n-\n-        source\n-                .write(ByteString.encodeUtf8(\"0123456789012345678901234567890123456789\")); // 40B\n-        source.flush();\n-\n-        assertEquals(\"0123456789\", limited.readString(Charset.forName(\"UTF-8\")));\n-    }\n-\n-    @Test\n-    public void testWhenLongResultWrittenInParts_writeOnlyLimitedBytes() throws Exception {\n-        final Buffer limited = new Buffer();\n-        final BufferedSink source = Okio.buffer(new LimitedSink(limited, 10L));\n-\n-        source\n-                .write(ByteString.encodeUtf8(\"01234\")); // 5B\n-        source.flush();\n-        source\n-                .write(ByteString.encodeUtf8(\"5678901234\")); // 10B\n-        source.flush();\n-        source\n-                .write(ByteString.encodeUtf8(\"5678901234567890123456789\")); // 25B\n-        source.flush();\n-\n-        assertEquals(\"0123456789\", limited.readString(Charset.forName(\"UTF-8\")));\n-    }\n-\n-    @Test\n-    public void testWhenShorterResult_writeOnlyThatData() throws Exception {\n-        final Buffer limited = new Buffer();\n-        final BufferedSink source = Okio.buffer(new LimitedSink(limited, 10L));\n-\n-        source\n-                .write(ByteString.encodeUtf8(\"01234\")); // 5B\n-        source.flush();\n-\n-        assertEquals(\"01234\", limited.readString(Charset.forName(\"UTF-8\")));\n-    }\n-}"
  },
  {
    "sha": "67ddb4c0d9634699b588506a5c970747c1bb4f97",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.kt",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.kt",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/3a0409782197d7c3af082bb158fa280c2f65460c/ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.kt",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/LimitedSinkTest.kt?ref=3a0409782197d7c3af082bb158fa280c2f65460c",
    "patch": "@@ -0,0 +1,72 @@\n+package com.moczul.ok2curl\n+\n+import okio.Buffer\n+import okio.ByteString.Companion.encodeUtf8\n+import okio.buffer\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+import java.nio.charset.Charset\n+\n+class LimitedSinkTest {\n+\n+    @Test(expected = IllegalArgumentException::class)\n+    fun `should throw exception when limit is 0`() {\n+        LimitedSink(Buffer(), 0L)\n+    }\n+\n+    @Test(expected = IllegalArgumentException::class)\n+    fun `should throw exception when limit is negative`() {\n+        LimitedSink(Buffer(), -1L)\n+    }\n+\n+    @Test(expected = NullPointerException::class)\n+    fun `should throw exception when buffer is null`() {\n+        LimitedSink(null, 10L)\n+    }\n+\n+    @Test\n+    fun `should write to buffer only limited amount of bytes`() {\n+        // given\n+        val limited = Buffer()\n+        val source = LimitedSink(limited, 10L).buffer()\n+\n+        // when\n+        source.write(\"0123456789012345678901234567890123456789\".encodeUtf8()) // 40B\n+        source.flush()\n+\n+        // then\n+        assertEquals(\"0123456789\", limited.readString(Charset.forName(\"UTF-8\")))\n+    }\n+\n+    @Test\n+    fun `should write to buffer only limited amount of bytes when written in parts`() {\n+        // given\n+        val limited = Buffer()\n+        val source = LimitedSink(limited, 10L).buffer()\n+\n+        // when\n+        source.write(\"01234\".encodeUtf8()) // 5B\n+        source.flush()\n+        source.write(\"5678901234\".encodeUtf8()) // 10B\n+        source.flush()\n+        source.write(\"5678901234567890123456789\".encodeUtf8()) // 25B\n+        source.flush()\n+\n+        // then\n+        assertEquals(\"0123456789\", limited.readString(Charset.forName(\"UTF-8\")))\n+    }\n+\n+    @Test\n+    fun `should write all bytes when limit is bigger than input`() {\n+        // given\n+        val limited = Buffer()\n+        val source = LimitedSink(limited, 10L).buffer()\n+\n+        // when\n+        source.write(\"01234\".encodeUtf8()) // 5B\n+        source.flush()\n+\n+        // then\n+        assertEquals(\"01234\", limited.readString(Charset.forName(\"UTF-8\")))\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c9fae6c8fa8c311808fb878a701042134223b708",
    "filename": "ok2curl/src/test/java/com/moczul/ok2curl/OptionsTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 58,
    "changes": 58,
    "blob_url": "https://github.com/mrmike/Ok2Curl/blob/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/OptionsTest.java",
    "raw_url": "https://github.com/mrmike/Ok2Curl/raw/2d915240b07975fab214a85e24fbb9aaf47ed840/ok2curl/src/test/java/com/moczul/ok2curl/OptionsTest.java",
    "contents_url": "https://api.github.com/repos/mrmike/Ok2Curl/contents/ok2curl/src/test/java/com/moczul/ok2curl/OptionsTest.java?ref=2d915240b07975fab214a85e24fbb9aaf47ed840",
    "patch": "@@ -1,58 +0,0 @@\n-package com.moczul.ok2curl;\n-\n-import org.junit.Test;\n-\n-import static org.hamcrest.CoreMatchers.hasItem;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-\n-public class OptionsTest {\n-\n-    @Test\n-    public void defaultBuilderShouldReturnEmptyOptions() {\n-        final Options options = Options.builder().build();\n-\n-        assertThat(options.list().size(), is(0));\n-    }\n-\n-    @Test\n-    public void shouldCorrectlyHandleOptionsParameters() {\n-        final Options options = Options\n-                .builder()\n-                .maxTime(120)\n-                .connectTimeout(60)\n-                .retry(3)\n-                .build();\n-\n-        assertThat(options.list().size(), is(3));\n-        assertThat(options.list(), hasItem(\"--max-time 120\"));\n-        assertThat(options.list(), hasItem(\"--connect-timeout 60\"));\n-        assertThat(options.list(), hasItem(\"--retry 3\"));\n-    }\n-\n-    @Test\n-    public void shouldReturnCorrectListOfParameters() {\n-        final Options options = Options.builder()\n-                .insecure()\n-                .compressed()\n-                .location()\n-                .build();\n-\n-        assertThat(options.list().size(), is(3));\n-        assertThat(options.list(), hasItem(\"--insecure\"));\n-        assertThat(options.list(), hasItem(\"--compressed\"));\n-        assertThat(options.list(), hasItem(\"--location\"));\n-    }\n-\n-    @Test\n-    public void shouldIgnoreDuplicatedParameters() {\n-        final Options options = Options.builder()\n-                .insecure()\n-                .insecure()\n-                .insecure()\n-                .build();\n-\n-        assertThat(options.list().size(), is(1));\n-        assertThat(options.list(), hasItem(\"--insecure\"));\n-    }\n-}"
  }
]
