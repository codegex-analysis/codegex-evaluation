[
  {
    "sha": "b850751f0d28cd95af649fb8e9b41cebc90055a8",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/pom.xml",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/pom.xml",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/pom.xml?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -24,7 +24,7 @@\n     <stack.version>4.0.3-SNAPSHOT</stack.version>\n     <junit.version>4.13.1</junit.version>\n     <mockito.version>3.3.3</mockito.version>\n-    <paho.version>1.1.0</paho.version>\n+    <paho.version>1.2.5</paho.version>\n     <fabric8-docker-plugin.version>0.21.0</fabric8-docker-plugin.version>\n     <jar.manifest>${project.basedir}/src/main/resources/META-INF/MANIFEST.MF</jar.manifest>\n   </properties>\n@@ -100,6 +100,12 @@\n       <version>${paho.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.paho</groupId>\n+      <artifactId>org.eclipse.paho.mqttv5.client</artifactId>\n+      <version>${paho.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.mockito</groupId>\n       <artifactId>mockito-core</artifactId>"
  },
  {
    "sha": "d528ecfe5cda5cf63e6f8962da3c9338a3e3518d",
    "filename": "src/main/java/io/vertx/mqtt/MqttEndpoint.java",
    "status": "modified",
    "additions": 201,
    "deletions": 0,
    "changes": 201,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/MqttEndpoint.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/MqttEndpoint.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/MqttEndpoint.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -17,6 +17,7 @@\n package io.vertx.mqtt;\n \n import io.netty.handler.codec.mqtt.MqttConnectReturnCode;\n+import io.netty.handler.codec.mqtt.MqttProperties;\n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.codegen.annotations.CacheReturn;\n import io.vertx.codegen.annotations.Fluent;\n@@ -27,9 +28,21 @@\n import io.vertx.core.Handler;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.net.SocketAddress;\n+import io.vertx.mqtt.messages.MqttDisconnectMessage;\n+import io.vertx.mqtt.messages.MqttPubAckMessage;\n+import io.vertx.mqtt.messages.MqttPubCompMessage;\n+import io.vertx.mqtt.messages.MqttPubRecMessage;\n+import io.vertx.mqtt.messages.MqttPubRelMessage;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n import io.vertx.mqtt.messages.MqttSubscribeMessage;\n import io.vertx.mqtt.messages.MqttUnsubscribeMessage;\n+import io.vertx.mqtt.messages.codes.MqttDisconnectReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubAckReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubCompReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubRecReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubRelReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttSubAckReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttUnsubAckReasonCode;\n \n import javax.net.ssl.SSLSession;\n import java.util.List;\n@@ -163,6 +176,13 @@\n    */\n   boolean isConnected();\n \n+\n+  /**\n+   * @return MQTT properties of the CONNECT message\n+   */\n+  @GenIgnore\n+  MqttProperties connectProperties();\n+\n   /**\n    * Set client identifier if not provided by the remote MQTT client (zero-bytes)\n    *\n@@ -182,6 +202,16 @@\n   @Fluent\n   MqttEndpoint disconnectHandler(Handler<Void> handler);\n \n+  /**\n+   * Set a disconnect handler on the MQTT endpoint. This handler is called when a DISCONNECT\n+   * message is received by the remote MQTT client\n+   *\n+   * @param handler the handler\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  MqttEndpoint disconnectHandlerWithMessage(Handler<MqttDisconnectMessage> handler);\n+\n   /**\n    * Set a subscribe handler on the MQTT endpoint. This handler is called when a SUBSCRIBE\n    * message is received by the remote MQTT client\n@@ -222,6 +252,16 @@\n   @Fluent\n   MqttEndpoint publishAcknowledgeHandler(Handler<Integer> handler);\n \n+  /**\n+   * Set the puback handler on the MQTT endpoint. This handler is called when a PUBACK\n+   * message is received by the remote MQTT client\n+   *\n+   * @param handler the handler\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  MqttEndpoint publishAcknowledgeHandlerWithMessage(Handler<MqttPubAckMessage> handler);\n+\n   /**\n    * Set the pubrec handler on the MQTT endpoint. This handler is called when a PUBREC\n    * message is received by the remote MQTT client\n@@ -232,6 +272,16 @@\n   @Fluent\n   MqttEndpoint publishReceivedHandler(Handler<Integer> handler);\n \n+  /**\n+   * Set the pubrec handler on the MQTT endpoint. This handler is called when a PUBREC\n+   * message is received by the remote MQTT client\n+   *\n+   * @param handler the handler\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  MqttEndpoint publishReceivedHandlerWithMessage(Handler<MqttPubRecMessage> handler);\n+\n   /**\n    * Set the pubrel handler on the MQTT endpoint. This handler is called when a PUBREL\n    * message is received by the remote MQTT client\n@@ -242,6 +292,17 @@\n   @Fluent\n   MqttEndpoint publishReleaseHandler(Handler<Integer> handler);\n \n+  /**\n+   * Set the pubrel handler on the MQTT endpoint. This handler is called when a PUBREL\n+   * message is received by the remote MQTT client\n+   *\n+   * @param handler the handler\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  MqttEndpoint publishReleaseHandlerWithMessage(Handler<MqttPubRelMessage> handler);\n+\n+\n   /**\n    * Set the pubcomp handler on the MQTT endpoint. This handler is called when a PUBCOMP\n    * message is received by the remote MQTT client\n@@ -252,6 +313,16 @@\n   @Fluent\n   MqttEndpoint publishCompletionHandler(Handler<Integer> handler);\n \n+  /**\n+   * Set the pubcomp handler on the MQTT endpoint. This handler is called when a PUBCOMP\n+   * message is received by the remote MQTT client\n+   *\n+   * @param handler the handler\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  MqttEndpoint publishCompletionHandlerWithMessage(Handler<MqttPubCompMessage> handler);\n+\n   /**\n    * Set the pingreq handler on the MQTT endpoint. This handler is called when a PINGREQ\n    * message is received by the remote MQTT client. In any case the endpoint sends the\n@@ -297,6 +368,18 @@\n   @Fluent\n   MqttEndpoint accept(boolean sessionPresent);\n \n+  /**\n+   * Sends the CONNACK message to the remote MQTT client with \"connection accepted\"\n+   * return code. See {@link #reject(MqttConnectReturnCode)} for refusing connection\n+   *\n+   * @param sessionPresent  if a previous session is present\n+   * @param properties CONNACK message properties (MQTT5)\n+   * @return  a reference to this, so the API can be used fluently\n+   */\n+  @GenIgnore\n+  @Fluent\n+  MqttEndpoint accept(boolean sessionPresent, MqttProperties properties);\n+\n   /**\n    * Sends the CONNACK message to the remote MQTT client rejecting the connection\n    * request with specified return code. See {@link #accept(boolean)} for accepting connection\n@@ -307,6 +390,18 @@\n   @Fluent\n   MqttEndpoint reject(MqttConnectReturnCode returnCode);\n \n+  /**\n+   * Sends the CONNACK message to the remote MQTT client rejecting the connection\n+   * request with specified return code. See {@link #accept(boolean)} for accepting connection\n+   *\n+   * @param returnCode  the connect return code\n+   * @param properties CONNACK message properties\n+   * @return  a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  @GenIgnore\n+  MqttEndpoint reject(MqttConnectReturnCode returnCode, MqttProperties properties);\n+\n   /**\n    * Sends the SUBACK message to the remote MQTT client\n    *\n@@ -317,6 +412,18 @@\n   @Fluent\n   MqttEndpoint subscribeAcknowledge(int subscribeMessageId, List<MqttQoS> grantedQoSLevels);\n \n+  /**\n+   * Sends the SUBACK message to the remote MQTT client\n+   *\n+   * @param subscribeMessageId identifier of the SUBSCRIBE message to acknowledge\n+   * @param reasonCodes reason codes\n+   * @param properties MQTT message properties\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  @GenIgnore\n+  MqttEndpoint subscribeAcknowledge(int subscribeMessageId, List<MqttSubAckReasonCode> reasonCodes, MqttProperties properties);\n+\n   /**\n    * Sends the UNSUBACK message to the remote MQTT client\n    *\n@@ -326,6 +433,18 @@\n   @Fluent\n   MqttEndpoint unsubscribeAcknowledge(int unsubscribeMessageId);\n \n+  /**\n+   * Sends the UNSUBACK message to the remote MQTT client\n+   *\n+   * @param unsubscribeMessageId identifier of the UNSUBSCRIBE message to acknowledge\n+   * @param reasonCodes reason codes\n+   * @param properties MQTT message properties\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  @GenIgnore\n+  MqttEndpoint unsubscribeAcknowledge(int unsubscribeMessageId, List<MqttUnsubAckReasonCode> reasonCodes, MqttProperties properties);\n+\n   /**\n    * Sends the PUBACK message to the remote MQTT client\n    *\n@@ -335,6 +454,10 @@\n   @Fluent\n   MqttEndpoint publishAcknowledge(int publishMessageId);\n \n+  @Fluent\n+  @GenIgnore\n+  MqttEndpoint publishAcknowledge(int publishMessageId, MqttPubAckReasonCode reasonCode, MqttProperties properties);\n+\n   /**\n    * Sends the PUBREC message to the remote MQTT client\n    *\n@@ -344,6 +467,18 @@\n   @Fluent\n   MqttEndpoint publishReceived(int publishMessageId);\n \n+  /**\n+   * Sends the PUBREC message to the remote MQTT client\n+   *\n+   * @param publishMessageId identifier of the PUBLISH message to acknowledge\n+   * @param reasonCode code of the outcome\n+   * @param properties MQTT properties\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @GenIgnore\n+  @Fluent\n+  MqttEndpoint publishReceived(int publishMessageId, MqttPubRecReasonCode reasonCode, MqttProperties properties);\n+\n   /**\n    * Sends the PUBREL message to the remote MQTT client\n    *\n@@ -353,6 +488,18 @@\n   @Fluent\n   MqttEndpoint publishRelease(int publishMessageId);\n \n+  /**\n+   * Sends the PUBREL message to the remote MQTT client\n+   *\n+   * @param publishMessageId identifier of the PUBLISH message to acknowledge\n+   * @param reasonCode reason code\n+   * @param properties MQTT message properties\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  @GenIgnore\n+  MqttEndpoint publishRelease(int publishMessageId, MqttPubRelReasonCode reasonCode, MqttProperties properties);\n+\n   /**\n    * Sends the PUBCOMP message to the remote MQTT client\n    *\n@@ -362,6 +509,18 @@\n   @Fluent\n   MqttEndpoint publishComplete(int publishMessageId);\n \n+  /**\n+   * Sends the PUBCOMP message to the remote MQTT client\n+   *\n+   * @param publishMessageId identifier of the PUBLISH message to acknowledge\n+   * @param reasonCode reason code\n+   * @param properties MQTT message properties\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @Fluent\n+  @GenIgnore\n+  MqttEndpoint publishComplete(int publishMessageId, MqttPubCompReasonCode reasonCode, MqttProperties properties);\n+\n   /**\n    * Sends the PUBLISH message to the remote MQTT client\n    *\n@@ -393,6 +552,12 @@\n    */\n   Future<Integer> publish(String topic, Buffer payload, MqttQoS qosLevel, boolean isDup, boolean isRetain, int messageId);\n \n+  /**\n+   * Like {@link #publish(String, Buffer, MqttQoS, boolean, boolean, int, properties, Handler)} but returns a {@code Future} of the asynchronous result\n+   */\n+  @GenIgnore\n+  Future<Integer> publish(String topic, Buffer payload, MqttQoS qosLevel, boolean isDup, boolean isRetain, int messageId, MqttProperties properties);\n+\n   /**\n    * Sends the PUBLISH message to the remote MQTT server explicitly specifying the messageId\n    *\n@@ -408,11 +573,47 @@\n   @Fluent\n   MqttEndpoint publish(String topic, Buffer payload, MqttQoS qosLevel, boolean isDup, boolean isRetain, int messageId, Handler<AsyncResult<Integer>> publishSentHandler);\n \n+  /**\n+   * Sends the PUBLISH message to the remote MQTT server explicitly specifying the messageId\n+   *\n+   * @param topic              topic on which the message is published\n+   * @param payload            message payload\n+   * @param qosLevel           QoS level\n+   * @param isDup              if the message is a duplicate\n+   * @param isRetain           if the message needs to be retained\n+   * @param messageId          message ID\n+   * @param properties         PUBLISH message properties\n+   * @param publishSentHandler handler called after PUBLISH packet sent with a packetId\n+   * @return current MQTT client instance\n+   */\n+  @Fluent\n+  @GenIgnore\n+  MqttEndpoint publish(String topic,\n+                       Buffer payload,\n+                       MqttQoS qosLevel,\n+                       boolean isDup,\n+                       boolean isRetain,\n+                       int messageId,\n+                       MqttProperties properties,\n+                       Handler<AsyncResult<Integer>> publishSentHandler);\n+\n   /**\n    * Sends the PINGRESP message to the remote MQTT client\n    *\n    * @return a reference to this, so the API can be used fluently\n    */\n   @Fluent\n   MqttEndpoint pong();\n+\n+\n+  /**\n+   * Sends the DISCONNECT message to the remote MQTT client\n+   *\n+   * @param code reason code\n+   * @param properties MQTT message properties\n+   * @return a reference to this, so the API can be used fluently\n+   */\n+  @GenIgnore\n+  @Fluent\n+  MqttEndpoint disconnect(MqttDisconnectReasonCode code, MqttProperties properties);\n }"
  },
  {
    "sha": "8d9c6bbd29fcf790b4c4a793499aa1b5dff0c3fc",
    "filename": "src/main/java/io/vertx/mqtt/MqttTopicSubscription.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/MqttTopicSubscription.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/MqttTopicSubscription.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/MqttTopicSubscription.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -17,7 +17,9 @@\n package io.vertx.mqtt;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n+import io.netty.handler.codec.mqtt.MqttSubscriptionOption;\n import io.vertx.codegen.annotations.CacheReturn;\n+import io.vertx.codegen.annotations.GenIgnore;\n import io.vertx.codegen.annotations.VertxGen;\n \n /**\n@@ -37,4 +39,13 @@\n    */\n   @CacheReturn\n   MqttQoS qualityOfService();\n+\n+  /**\n+   * Subscription option\n+   * @return Subscription options\n+   */\n+  @GenIgnore\n+  @CacheReturn\n+  MqttSubscriptionOption subscriptionOption();\n+\n }"
  },
  {
    "sha": "2089b2e3bfaca62fa90b2a7964f850420edcb083",
    "filename": "src/main/java/io/vertx/mqtt/MqttWill.java",
    "status": "modified",
    "additions": 95,
    "deletions": 2,
    "changes": 97,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/MqttWill.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/MqttWill.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/MqttWill.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -16,13 +16,16 @@\n \n package io.vertx.mqtt;\n \n+import io.netty.handler.codec.mqtt.MqttProperties;\n import io.vertx.codegen.annotations.DataObject;\n import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonArray;\n import io.vertx.core.json.JsonObject;\n \n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n-\n+import java.util.Base64;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.*;\n /**\n  * Will information from the remote MQTT client\n  */\n@@ -34,6 +37,7 @@\n   private final Buffer willMessage;\n   private final int willQos;\n   private final boolean isWillRetain;\n+  private final MqttProperties willProperties;\n \n   /**\n    * Constructor\n@@ -43,13 +47,15 @@\n    * @param willMessage  payload of the will\n    * @param willQos      qos level for the will\n    * @param isWillRetain if the will message must be retained\n+   * @param willProperties MQTT properties of the last will message\n    */\n-  public MqttWill(boolean isWillFlag, String willTopic, Buffer willMessage, int willQos, boolean isWillRetain) {\n+  public MqttWill(boolean isWillFlag, String willTopic, Buffer willMessage, int willQos, boolean isWillRetain, MqttProperties willProperties) {\n     this.isWillFlag = isWillFlag;\n     this.willTopic = willTopic;\n     this.willMessage = willMessage;\n     this.willQos = willQos;\n     this.isWillRetain = isWillRetain;\n+    this.willProperties = willProperties;\n   }\n \n   /**\n@@ -63,6 +69,7 @@ public MqttWill(JsonObject json) {\n     this.willMessage = json.getBuffer(\"willMessage\");\n     this.willQos = json.getInteger(\"willQos\");\n     this.isWillRetain = json.getBoolean(\"isWillRetain\");\n+    this.willProperties = propertiesFromJson(json.getJsonArray(\"willProperties\"));\n   }\n \n   /**\n@@ -107,6 +114,13 @@ public boolean isWillRetain() {\n     return this.isWillRetain;\n   }\n \n+  /**\n+   * @return MQTT properties of the last will message\n+   */\n+  public MqttProperties getWillProperties()  {\n+    return this.willProperties;\n+  }\n+\n   /**\n    * Convert instance in JSON\n    *\n@@ -119,6 +133,85 @@ public JsonObject toJson() {\n     json.put(\"willMessage\", this.willMessage);\n     json.put(\"willQos\", this.willQos);\n     json.put(\"isWillRetain\", this.isWillRetain);\n+    json.put(\"willProperties\", propertiesToJson(this.willProperties));\n     return json;\n   }\n+\n+  public static JsonArray propertiesToJson(MqttProperties properties) {\n+    JsonArray array = new JsonArray();\n+    for(MqttProperties.MqttProperty<?> prop: properties.listAll()) {\n+      array.add(propertyToJson(prop));\n+    }\n+    return array;\n+  }\n+\n+  public static JsonObject propertyToJson(MqttProperties.MqttProperty<?> prop) {\n+    JsonObject obj = new JsonObject();\n+    if(prop instanceof MqttProperties.StringProperty ||\n+      prop instanceof MqttProperties.IntegerProperty) {\n+      obj.put(\"id\", prop.propertyId());\n+      obj.put(\"val\", prop.value());\n+    } else if(prop instanceof MqttProperties.BinaryProperty) {\n+      obj.put(\"id\", prop.propertyId());\n+      String value = Base64.getEncoder().encodeToString(((MqttProperties.BinaryProperty) prop).value());\n+      obj.put(\"val\", value);\n+    } else if(prop instanceof MqttProperties.UserProperties) {\n+      for(MqttProperties.StringPair kv: ((MqttProperties.UserProperties) prop).value()) {\n+        obj.put(\"id\", prop.propertyId());\n+        obj.put(\"key\", kv.key);\n+        obj.put(\"val\", kv.value);\n+      }\n+    }\n+    return obj;\n+  }\n+\n+  public static MqttProperties propertiesFromJson(JsonArray array) {\n+    MqttProperties props = new MqttProperties();\n+    for(Object item: array) {\n+      props.add(propertyFromJson((JsonObject) item));\n+    }\n+    return props;\n+  }\n+\n+  public static MqttProperties.MqttProperty<?> propertyFromJson(JsonObject obj) {\n+    int id = obj.getInteger(\"id\");\n+\n+    MqttProperties.MqttPropertyType propType = MqttProperties.MqttPropertyType.valueOf(id);\n+    switch (propType) {\n+      case PAYLOAD_FORMAT_INDICATOR:\n+      case REQUEST_PROBLEM_INFORMATION:\n+      case REQUEST_RESPONSE_INFORMATION:\n+      case MAXIMUM_QOS:\n+      case RETAIN_AVAILABLE:\n+      case WILDCARD_SUBSCRIPTION_AVAILABLE:\n+      case SUBSCRIPTION_IDENTIFIER_AVAILABLE:\n+      case SHARED_SUBSCRIPTION_AVAILABLE:\n+      case SERVER_KEEP_ALIVE:\n+      case RECEIVE_MAXIMUM:\n+      case TOPIC_ALIAS_MAXIMUM:\n+      case TOPIC_ALIAS:\n+      case PUBLICATION_EXPIRY_INTERVAL:\n+      case SESSION_EXPIRY_INTERVAL:\n+      case WILL_DELAY_INTERVAL:\n+      case MAXIMUM_PACKET_SIZE:\n+      case SUBSCRIPTION_IDENTIFIER:\n+        return new MqttProperties.IntegerProperty(id, obj.getInteger(\"val\"));\n+      case CONTENT_TYPE:\n+      case RESPONSE_TOPIC:\n+      case ASSIGNED_CLIENT_IDENTIFIER:\n+      case AUTHENTICATION_METHOD:\n+      case RESPONSE_INFORMATION:\n+      case SERVER_REFERENCE:\n+      case REASON_STRING:\n+        return new MqttProperties.StringProperty(id, obj.getString(\"val\"));\n+      case CORRELATION_DATA:\n+      case AUTHENTICATION_DATA:\n+        return new MqttProperties.BinaryProperty(id, Base64.getDecoder().decode(obj.getString(\"val\")));\n+      case USER_PROPERTY:\n+        String key = obj.getString(\"key\");\n+        return new MqttProperties.UserProperty(key, obj.getString(\"val\"));\n+      default:\n+        throw new IllegalArgumentException(\"Unsupported property type: \" + propType);\n+    }\n+  }\n }"
  },
  {
    "sha": "eb0d04c3bfa31e3d7cab8b0f53b058dfd286cab8",
    "filename": "src/main/java/io/vertx/mqtt/impl/MqttEndpointImpl.java",
    "status": "modified",
    "additions": 214,
    "deletions": 32,
    "changes": 246,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/impl/MqttEndpointImpl.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/impl/MqttEndpointImpl.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/impl/MqttEndpointImpl.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -22,12 +22,17 @@\n import io.netty.handler.codec.mqtt.MqttConnectReturnCode;\n import io.netty.handler.codec.mqtt.MqttFixedHeader;\n import io.netty.handler.codec.mqtt.MqttMessageFactory;\n+import io.netty.handler.codec.mqtt.MqttMessageIdAndPropertiesVariableHeader;\n import io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader;\n import io.netty.handler.codec.mqtt.MqttMessageType;\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.netty.handler.codec.mqtt.MqttPubReplyMessageVariableHeader;\n import io.netty.handler.codec.mqtt.MqttPublishVariableHeader;\n import io.netty.handler.codec.mqtt.MqttQoS;\n+import io.netty.handler.codec.mqtt.MqttReasonCodeAndPropertiesVariableHeader;\n import io.netty.handler.codec.mqtt.MqttSubAckPayload;\n import io.netty.handler.codec.mqtt.MqttUnsubAckPayload;\n+import io.netty.handler.codec.mqtt.MqttVersion;\n import io.vertx.core.AsyncResult;\n import io.vertx.core.Future;\n import io.vertx.core.Handler;\n@@ -40,8 +45,21 @@\n import io.vertx.mqtt.MqttEndpoint;\n import io.vertx.mqtt.MqttTopicSubscription;\n import io.vertx.mqtt.MqttWill;\n+import io.vertx.mqtt.messages.MqttDisconnectMessage;\n+import io.vertx.mqtt.messages.MqttPubAckMessage;\n+import io.vertx.mqtt.messages.MqttPubCompMessage;\n+import io.vertx.mqtt.messages.MqttPubRecMessage;\n+import io.vertx.mqtt.messages.MqttPubRelMessage;\n+import io.vertx.mqtt.messages.codes.MqttDisconnectReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubAckReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubCompReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubRecReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubRelReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttSubAckReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttUnsubAckReasonCode;\n \n import javax.net.ssl.SSLSession;\n+import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n \n@@ -65,6 +83,7 @@\n   private final int protocolVersion;\n   private final String protocolName;\n   private final int keepAliveTimeoutSeconds;\n+  private final MqttProperties connectProperties;\n \n   // handler to call when a subscribe request comes in\n   private Handler<io.vertx.mqtt.messages.MqttSubscribeMessage> subscribeHandler;\n@@ -74,14 +93,19 @@\n   private Handler<io.vertx.mqtt.messages.MqttPublishMessage> publishHandler;\n   // handler to call when a puback message comes in\n   private Handler<Integer> pubackHandler;\n+  private Handler<MqttPubAckMessage> pubackHandlerWithMessage;\n   // handler to call when a pubrec message comes in\n   private Handler<Integer> pubrecHandler;\n+  private Handler<MqttPubRecMessage> pubrecHandlerWithMessage;\n   // handler to call when a pubrel message comes in\n   private Handler<Integer> pubrelHandler;\n+  private Handler<MqttPubRelMessage> pubrelHandlerWithMessage;\n   // handler to call when a pubcomp message comes in\n   private Handler<Integer> pubcompHandler;\n+  private Handler<MqttPubCompMessage> pubcompHandlerWithMessage;\n   // handler to call when a disconnect request comes in\n   private Handler<Void> disconnectHandler;\n+  private Handler<MqttDisconnectMessage> disconnectHandlerWithMessage;\n   // handler to call when a pingreq message comes in\n   private Handler<Void> pingreqHandler;\n   // handler to call when the endpoint is isClosed\n@@ -111,8 +135,9 @@\n    * @param protocolVersion      protocol version required by the client\n    * @param protocolName         protocol name sent by the client\n    * @param keepAliveTimeoutSeconds keep alive timeout (in seconds)\n+   * @param connectProperties    MQTT properties of the CONNECT message\n    */\n-  public MqttEndpointImpl(NetSocketInternal conn, String clientIdentifier, MqttAuth auth, MqttWill will, boolean isCleanSession, int protocolVersion, String protocolName, int keepAliveTimeoutSeconds) {\n+  public MqttEndpointImpl(NetSocketInternal conn, String clientIdentifier, MqttAuth auth, MqttWill will, boolean isCleanSession, int protocolVersion, String protocolName, int keepAliveTimeoutSeconds, MqttProperties connectProperties) {\n     this.conn = conn;\n     this.clientIdentifier = clientIdentifier;\n     this.auth = auth;\n@@ -121,6 +146,7 @@ public MqttEndpointImpl(NetSocketInternal conn, String clientIdentifier, MqttAut\n     this.protocolVersion = protocolVersion;\n     this.protocolName = protocolName;\n     this.keepAliveTimeoutSeconds = keepAliveTimeoutSeconds;\n+    this.connectProperties = connectProperties;\n   }\n \n   public String clientIdentifier() {\n@@ -189,6 +215,11 @@ public boolean isConnected() {\n     }\n   }\n \n+  @Override\n+  public MqttProperties connectProperties() {\n+    return this.connectProperties;\n+  }\n+\n   public MqttEndpoint setClientIdentifier(String clientIdentifier) {\n \n     synchronized (this.conn) {\n@@ -206,6 +237,15 @@ public MqttEndpointImpl disconnectHandler(Handler<Void> handler) {\n     }\n   }\n \n+  public MqttEndpointImpl disconnectHandlerWithMessage(Handler<MqttDisconnectMessage> handler) {\n+    synchronized (this.conn) {\n+      this.checkClosed();\n+      this.disconnectHandlerWithMessage = handler;\n+      return this;\n+    }\n+  }\n+\n+\n   public MqttEndpointImpl subscribeHandler(Handler<io.vertx.mqtt.messages.MqttSubscribeMessage> handler) {\n \n     synchronized (this.conn) {\n@@ -242,6 +282,15 @@ public MqttEndpointImpl publishAcknowledgeHandler(Handler<Integer> handler) {\n     }\n   }\n \n+  public MqttEndpointImpl publishAcknowledgeHandlerWithMessage(Handler<MqttPubAckMessage> handler) {\n+    synchronized (this.conn) {\n+      this.checkClosed();\n+      this.pubackHandlerWithMessage = handler;\n+      return this;\n+    }\n+  }\n+\n+\n   public MqttEndpointImpl publishReceivedHandler(Handler<Integer> handler) {\n \n     synchronized (this.conn) {\n@@ -251,6 +300,15 @@ public MqttEndpointImpl publishReceivedHandler(Handler<Integer> handler) {\n     }\n   }\n \n+  public MqttEndpointImpl publishReceivedHandlerWithMessage(Handler<MqttPubRecMessage> handler) {\n+    synchronized (this.conn) {\n+      this.checkClosed();\n+      this.pubrecHandlerWithMessage = handler;\n+      return this;\n+    }\n+  }\n+\n+\n   public MqttEndpointImpl publishReleaseHandler(Handler<Integer> handler) {\n \n     synchronized (this.conn) {\n@@ -260,6 +318,15 @@ public MqttEndpointImpl publishReleaseHandler(Handler<Integer> handler) {\n     }\n   }\n \n+  public MqttEndpointImpl publishReleaseHandlerWithMessage(Handler<MqttPubRelMessage> handler) {\n+    synchronized (this.conn) {\n+      this.checkClosed();\n+      this.pubrelHandlerWithMessage = handler;\n+      return this;\n+    }\n+  }\n+\n+\n   public MqttEndpointImpl publishCompletionHandler(Handler<Integer> handler) {\n \n     synchronized (this.conn) {\n@@ -269,6 +336,15 @@ public MqttEndpointImpl publishCompletionHandler(Handler<Integer> handler) {\n     }\n   }\n \n+  public MqttEndpointImpl publishCompletionHandlerWithMessage(Handler<MqttPubCompMessage> handler) {\n+    synchronized (this.conn) {\n+      this.checkClosed();\n+      this.pubcompHandlerWithMessage = handler;\n+      return this;\n+    }\n+  }\n+\n+\n   public MqttEndpointImpl pingHandler(Handler<Void> handler) {\n \n     synchronized (this.conn) {\n@@ -296,12 +372,12 @@ public MqttEndpointImpl exceptionHandler(Handler<Throwable> handler) {\n     }\n   }\n \n-  private MqttEndpointImpl connack(MqttConnectReturnCode returnCode, boolean sessionPresent) {\n+  private MqttEndpointImpl connack(MqttConnectReturnCode returnCode, boolean sessionPresent, MqttProperties properties) {\n \n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.CONNACK, false, MqttQoS.AT_MOST_ONCE, false, 0);\n     MqttConnAckVariableHeader variableHeader =\n-      new MqttConnAckVariableHeader(returnCode, sessionPresent);\n+      new MqttConnAckVariableHeader(returnCode, sessionPresent, properties);\n \n     io.netty.handler.codec.mqtt.MqttMessage connack = MqttMessageFactory.newMessage(fixedHeader, variableHeader, null);\n \n@@ -323,36 +399,55 @@ public MqttEndpoint accept() {\n   }\n \n   public MqttEndpointImpl accept(boolean sessionPresent) {\n+    return accept(sessionPresent, MqttProperties.NO_PROPERTIES);\n+  }\n \n+  public MqttEndpointImpl accept(boolean sessionPresent, MqttProperties properties) {\n     synchronized (conn) {\n       if (this.isConnected) {\n         throw new IllegalStateException(\"Connection already accepted\");\n       }\n \n-      return this.connack(MqttConnectReturnCode.CONNECTION_ACCEPTED, sessionPresent);\n+      return this.connack(MqttConnectReturnCode.CONNECTION_ACCEPTED, sessionPresent, properties);\n     }\n   }\n \n   public MqttEndpointImpl reject(MqttConnectReturnCode returnCode) {\n+    return reject(returnCode, MqttProperties.NO_PROPERTIES);\n+  }\n+\n+  public MqttEndpointImpl reject(MqttConnectReturnCode returnCode, MqttProperties properties) {\n \n     synchronized (conn) {\n       if (returnCode == MqttConnectReturnCode.CONNECTION_ACCEPTED) {\n         throw new IllegalArgumentException(\"Need to use the 'accept' method for accepting connection\");\n       }\n \n       // sessionPresent flag has no meaning in this case, the network connection will be closed\n-      return this.connack(returnCode, false);\n+      return this.connack(returnCode, false, properties);\n     }\n   }\n \n+\n   public MqttEndpointImpl subscribeAcknowledge(int subscribeMessageId, List<MqttQoS> grantedQoSLevels) {\n+    return subscribeAcknowledgeWithCode(subscribeMessageId,\n+      grantedQoSLevels.stream().mapToInt(MqttQoS::value).toArray(),\n+      MqttProperties.NO_PROPERTIES);\n+  }\n+\n+  public MqttEndpointImpl subscribeAcknowledge(int subscribeMessageId, List<MqttSubAckReasonCode> reasonCodes, MqttProperties properties) {\n+    return subscribeAcknowledgeWithCode(subscribeMessageId,\n+      reasonCodes.stream().mapToInt(MqttSubAckReasonCode::value).toArray(),\n+      MqttProperties.NO_PROPERTIES);\n+  }\n \n+  private MqttEndpointImpl subscribeAcknowledgeWithCode(int subscribeMessageId, int[] reasonCodes, MqttProperties properties) {\n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.SUBACK, false, MqttQoS.AT_MOST_ONCE, false, 0);\n-    MqttMessageIdVariableHeader variableHeader =\n-      MqttMessageIdVariableHeader.from(subscribeMessageId);\n+    MqttMessageIdAndPropertiesVariableHeader variableHeader =\n+      new MqttMessageIdAndPropertiesVariableHeader(subscribeMessageId, properties);\n \n-    MqttSubAckPayload payload = new MqttSubAckPayload(grantedQoSLevels.stream().mapToInt(MqttQoS::value).toArray());\n+    MqttSubAckPayload payload = new MqttSubAckPayload(reasonCodes);\n \n     io.netty.handler.codec.mqtt.MqttMessage suback = MqttMessageFactory.newMessage(fixedHeader, variableHeader, payload);\n \n@@ -362,12 +457,20 @@ public MqttEndpointImpl subscribeAcknowledge(int subscribeMessageId, List<MqttQo\n   }\n \n   public MqttEndpointImpl unsubscribeAcknowledge(int unsubscribeMessageId) {\n+    return unsubscribeAcknowledge(unsubscribeMessageId, Collections.emptyList(), MqttProperties.NO_PROPERTIES);\n+  }\n \n+  public MqttEndpointImpl unsubscribeAcknowledge(int unsubscribeMessageId, List<MqttUnsubAckReasonCode> reasonCodes, MqttProperties properties) {\n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.UNSUBACK, false, MqttQoS.AT_MOST_ONCE, false, 0);\n-    MqttMessageIdVariableHeader variableHeader =\n-      MqttMessageIdVariableHeader.from(unsubscribeMessageId);\n-    MqttUnsubAckPayload payload = new MqttUnsubAckPayload();\n+    MqttMessageIdAndPropertiesVariableHeader variableHeader =\n+      new MqttMessageIdAndPropertiesVariableHeader(unsubscribeMessageId, properties);\n+\n+    short[] reasoneCodesNum = new short[reasonCodes.size()];\n+    for(int i = 0; i < reasoneCodesNum.length; i++) {\n+      reasoneCodesNum[i] = reasonCodes.get(i).value();\n+    }\n+    MqttUnsubAckPayload payload = new MqttUnsubAckPayload(reasoneCodesNum);\n \n     io.netty.handler.codec.mqtt.MqttMessage unsuback = MqttMessageFactory.newMessage(fixedHeader, variableHeader, payload);\n \n@@ -376,12 +479,18 @@ public MqttEndpointImpl unsubscribeAcknowledge(int unsubscribeMessageId) {\n     return this;\n   }\n \n+\n   public MqttEndpointImpl publishAcknowledge(int publishMessageId) {\n+    return publishAcknowledge(publishMessageId, MqttPubAckReasonCode.SUCCESS, MqttProperties.NO_PROPERTIES);\n+  }\n+\n+  public MqttEndpointImpl publishAcknowledge(int publishMessageId, MqttPubAckReasonCode reasonCode, MqttProperties\n+    properties) {\n \n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.PUBACK, false, MqttQoS.AT_MOST_ONCE, false, 0);\n-    MqttMessageIdVariableHeader variableHeader =\n-      MqttMessageIdVariableHeader.from(publishMessageId);\n+    MqttPubReplyMessageVariableHeader variableHeader =\n+      new MqttPubReplyMessageVariableHeader(publishMessageId, reasonCode.value(), properties);\n \n     io.netty.handler.codec.mqtt.MqttMessage puback = MqttMessageFactory.newMessage(fixedHeader, variableHeader, null);\n \n@@ -391,11 +500,14 @@ public MqttEndpointImpl publishAcknowledge(int publishMessageId) {\n   }\n \n   public MqttEndpointImpl publishReceived(int publishMessageId) {\n+    return publishReceived(publishMessageId, MqttPubRecReasonCode.SUCCESS, MqttProperties.NO_PROPERTIES);\n+  }\n \n+  public MqttEndpointImpl publishReceived(int publishMessageId, MqttPubRecReasonCode reasonCode, MqttProperties properties) {\n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.PUBREC, false, MqttQoS.AT_MOST_ONCE, false, 0);\n-    MqttMessageIdVariableHeader variableHeader =\n-      MqttMessageIdVariableHeader.from(publishMessageId);\n+    MqttMessageIdAndPropertiesVariableHeader variableHeader =\n+      new MqttMessageIdAndPropertiesVariableHeader(publishMessageId, properties);\n \n     io.netty.handler.codec.mqtt.MqttMessage pubrec = MqttMessageFactory.newMessage(fixedHeader, variableHeader, null);\n \n@@ -404,12 +516,16 @@ public MqttEndpointImpl publishReceived(int publishMessageId) {\n     return this;\n   }\n \n+\n   public MqttEndpointImpl publishRelease(int publishMessageId) {\n+    return publishRelease(publishMessageId, MqttPubRelReasonCode.SUCCESS, MqttProperties.NO_PROPERTIES);\n+  }\n \n+  public MqttEndpointImpl publishRelease(int publishMessageId, MqttPubRelReasonCode reasonCode, MqttProperties properties) {\n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.PUBREL, false, MqttQoS.AT_LEAST_ONCE, false, 0);\n-    MqttMessageIdVariableHeader variableHeader =\n-      MqttMessageIdVariableHeader.from(publishMessageId);\n+    MqttMessageIdAndPropertiesVariableHeader variableHeader =\n+      new MqttMessageIdAndPropertiesVariableHeader(publishMessageId, properties);\n \n     io.netty.handler.codec.mqtt.MqttMessage pubrel = MqttMessageFactory.newMessage(fixedHeader, variableHeader, null);\n \n@@ -418,12 +534,17 @@ public MqttEndpointImpl publishRelease(int publishMessageId) {\n     return this;\n   }\n \n+\n   public MqttEndpointImpl publishComplete(int publishMessageId) {\n+    return publishComplete(publishMessageId, MqttPubCompReasonCode.SUCCESS, MqttProperties.NO_PROPERTIES);\n+  }\n+\n+  public MqttEndpointImpl publishComplete(int publishMessageId, MqttPubCompReasonCode reasonCode, MqttProperties properties) {\n \n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.PUBCOMP, false, MqttQoS.AT_MOST_ONCE, false, 0);\n-    MqttMessageIdVariableHeader variableHeader =\n-      MqttMessageIdVariableHeader.from(publishMessageId);\n+    MqttMessageIdAndPropertiesVariableHeader variableHeader =\n+      new MqttMessageIdAndPropertiesVariableHeader(publishMessageId, properties);\n \n     io.netty.handler.codec.mqtt.MqttMessage pubcomp = MqttMessageFactory.newMessage(fixedHeader, variableHeader, null);\n \n@@ -432,6 +553,7 @@ public MqttEndpointImpl publishComplete(int publishMessageId) {\n     return this;\n   }\n \n+\n   @Override\n   public Future<Integer> publish(String topic, Buffer payload, MqttQoS qosLevel, boolean isDup, boolean isRetain) {\n     return publish(topic, payload, qosLevel, isDup, isRetain, this.nextMessageId());\n@@ -444,14 +566,19 @@ public MqttEndpointImpl publish(String topic, Buffer payload, MqttQoS qosLevel,\n \n   @Override\n   public Future<Integer> publish(String topic, Buffer payload, MqttQoS qosLevel, boolean isDup, boolean isRetain, int messageId) {\n+    return publish(topic, payload, qosLevel, isDup, isRetain, messageId, MqttProperties.NO_PROPERTIES);\n+  }\n+\n+  @Override\n+  public Future<Integer> publish(String topic, Buffer payload, MqttQoS qosLevel, boolean isDup, boolean isRetain, int messageId, MqttProperties properties) {\n     if (messageId > MAX_MESSAGE_ID || messageId < 0) {\n       throw new IllegalArgumentException(\"messageId must be non-negative integer not larger than \" + MAX_MESSAGE_ID);\n     }\n \n     MqttFixedHeader fixedHeader =\n       new MqttFixedHeader(MqttMessageType.PUBLISH, isDup, qosLevel, isRetain, 0);\n     MqttPublishVariableHeader variableHeader =\n-      new MqttPublishVariableHeader(topic, messageId);\n+      new MqttPublishVariableHeader(topic, messageId, properties);\n \n     ByteBuf buf = Unpooled.copiedBuffer(payload.getBytes());\n \n@@ -461,8 +588,26 @@ public MqttEndpointImpl publish(String topic, Buffer payload, MqttQoS qosLevel,\n   }\n \n   @Override\n-  public MqttEndpointImpl publish(String topic, Buffer payload, MqttQoS qosLevel, boolean isDup, boolean isRetain, int messageId, Handler<AsyncResult<Integer>> publishSentHandler) {\n-    Future<Integer> fut = publish(topic, payload, qosLevel, isDup, isRetain, messageId);\n+  public MqttEndpointImpl publish(String topic,\n+                                  Buffer payload,\n+                                  MqttQoS qosLevel,\n+                                  boolean isDup,\n+                                  boolean isRetain,\n+                                  int messageId,\n+                                  Handler<AsyncResult<Integer>> publishSentHandler) {\n+    return publish(topic, payload, qosLevel, isDup, isRetain, messageId, MqttProperties.NO_PROPERTIES, publishSentHandler);\n+  }\n+\n+  @Override\n+  public MqttEndpointImpl publish(String topic,\n+                                  Buffer payload,\n+                                  MqttQoS qosLevel,\n+                                  boolean isDup,\n+                                  boolean isRetain,\n+                                  int messageId,\n+                                  MqttProperties properties,\n+                                  Handler<AsyncResult<Integer>> publishSentHandler) {\n+    Future<Integer> fut = publish(topic, payload, qosLevel, isDup, isRetain, messageId, properties);\n     if (publishSentHandler != null) {\n       fut.onComplete(publishSentHandler);\n     }\n@@ -481,6 +626,23 @@ public MqttEndpointImpl pong() {\n     return this;\n   }\n \n+  public MqttEndpointImpl disconnect(MqttDisconnectReasonCode code, MqttProperties properties) {\n+    if(protocolVersion >= MqttVersion.MQTT_5.protocolLevel()) {\n+      MqttFixedHeader fixedHeader =\n+        new MqttFixedHeader(MqttMessageType.DISCONNECT, false, MqttQoS.AT_MOST_ONCE, false, 0);\n+\n+      MqttReasonCodeAndPropertiesVariableHeader variableHeader = new MqttReasonCodeAndPropertiesVariableHeader(code.value(), properties);\n+\n+      io.netty.handler.codec.mqtt.MqttMessage disconnect = MqttMessageFactory.newMessage(fixedHeader, variableHeader, null);\n+\n+      this.write(disconnect);\n+    }\n+\n+    this.close();\n+\n+    return this;\n+  }\n+\n   /**\n    * Used for calling the subscribe handler when the remote MQTT client subscribes to topics\n    *\n@@ -553,27 +715,36 @@ void handlePublish(io.vertx.mqtt.messages.MqttPublishMessage msg) {\n    * Used for calling the puback handler when the remote MQTT client acknowledge a QoS 1 message with puback\n    *\n    * @param pubackMessageId identifier of the message acknowledged by the remote MQTT client\n+   * @param code reason code\n+   * @param properties MQTT properties\n    */\n-  void handlePuback(int pubackMessageId) {\n+  void handlePuback(int pubackMessageId, MqttPubAckReasonCode code, MqttProperties properties) {\n \n     synchronized (this.conn) {\n       if (this.pubackHandler != null) {\n         this.pubackHandler.handle(pubackMessageId);\n       }\n+      if (this.pubackHandlerWithMessage != null) {\n+        this.pubackHandlerWithMessage.handle(MqttPubAckMessage.create(pubackMessageId, code, properties));\n+      }\n     }\n   }\n \n   /**\n    * Used for calling the pubrec handler when the remote MQTT client acknowledge a QoS 2 message with pubrec\n    *\n    * @param pubrecMessageId identifier of the message acknowledged by the remote MQTT client\n+   * @param code reason code\n+   * @param properties MQTT properties\n    */\n-  void handlePubrec(int pubrecMessageId) {\n-\n+  void handlePubrec(int pubrecMessageId, MqttPubRecReasonCode code, MqttProperties properties) {\n     synchronized (this.conn) {\n       if (this.pubrecHandler != null) {\n         this.pubrecHandler.handle(pubrecMessageId);\n       }\n+      if(this.pubrecHandlerWithMessage != null) {\n+        this.pubrecHandlerWithMessage.handle(MqttPubRecMessage.create(pubrecMessageId, code, properties));\n+      }\n \n       if (this.isPublishAutoAck) {\n         this.publishRelease(pubrecMessageId);\n@@ -585,13 +756,18 @@ void handlePubrec(int pubrecMessageId) {\n    * Used for calling the pubrel handler when the remote MQTT client acknowledge a QoS 2 message with pubrel\n    *\n    * @param pubrelMessageId identifier of the message acknowledged by the remote MQTT client\n+   * @param code reason code\n+   * @param properties MQTT message properties\n    */\n-  void handlePubrel(int pubrelMessageId) {\n+  void handlePubrel(int pubrelMessageId, MqttPubRelReasonCode code, MqttProperties properties) {\n \n     synchronized (this.conn) {\n       if (this.pubrelHandler != null) {\n         this.pubrelHandler.handle(pubrelMessageId);\n       }\n+      if (this.pubrelHandlerWithMessage != null) {\n+        this.pubrelHandlerWithMessage.handle(MqttPubRelMessage.create(pubrelMessageId, code, properties));\n+      }\n \n       if (this.isPublishAutoAck) {\n         this.publishComplete(pubrelMessageId);\n@@ -604,12 +780,14 @@ void handlePubrel(int pubrelMessageId) {\n    *\n    * @param pubcompMessageId identifier of the message acknowledged by the remote MQTT client\n    */\n-  void handlePubcomp(int pubcompMessageId) {\n-\n+  void handlePubcomp(int pubcompMessageId, MqttPubCompReasonCode code, MqttProperties properties) {\n     synchronized (this.conn) {\n       if (this.pubcompHandler != null) {\n         this.pubcompHandler.handle(pubcompMessageId);\n       }\n+      if (this.pubcompHandlerWithMessage != null) {\n+        this.pubcompHandlerWithMessage.handle(MqttPubCompMessage.create(pubcompMessageId, code, properties));\n+      }\n     }\n   }\n \n@@ -632,16 +810,20 @@ void handlePingreq() {\n \n   /**\n    * Used for calling the disconnect handler when the remote MQTT client disconnects\n+   * @param code status code\n+   * @param properties MQTT message properties\n    */\n-  void handleDisconnect() {\n+  void handleDisconnect(MqttDisconnectReasonCode code, MqttProperties properties) {\n \n     synchronized (this.conn) {\n       if (this.disconnectHandler != null) {\n         this.disconnectHandler.handle(null);\n-\n-        // if client didn't close the connection, the sever SHOULD close it (MQTT spec)\n-        this.close();\n       }\n+      if (this.disconnectHandlerWithMessage != null) {\n+        this.disconnectHandlerWithMessage.handle(MqttDisconnectMessage.create(code, properties));\n+      }\n+      // if client didn't close the connection, the sever SHOULD close it (MQTT spec)\n+      this.close();\n     }\n   }\n "
  },
  {
    "sha": "121e48dce544df2e22410f5aa474c3ab173ee9e9",
    "filename": "src/main/java/io/vertx/mqtt/impl/MqttServerConnection.java",
    "status": "modified",
    "additions": 54,
    "deletions": 26,
    "changes": 80,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/impl/MqttServerConnection.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/impl/MqttServerConnection.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/impl/MqttServerConnection.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -22,7 +22,10 @@\n import io.netty.handler.codec.DecoderResult;\n import io.netty.handler.codec.mqtt.MqttConnectMessage;\n import io.netty.handler.codec.mqtt.MqttConnectReturnCode;\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.netty.handler.codec.mqtt.MqttPubReplyMessageVariableHeader;\n import io.netty.handler.codec.mqtt.MqttUnacceptableProtocolVersionException;\n+import io.netty.handler.codec.mqtt.MqttVersion;\n import io.netty.handler.timeout.IdleState;\n import io.netty.handler.timeout.IdleStateEvent;\n import io.netty.handler.timeout.IdleStateHandler;\n@@ -40,6 +43,11 @@\n import io.vertx.mqtt.messages.MqttPublishMessage;\n import io.vertx.mqtt.messages.MqttSubscribeMessage;\n import io.vertx.mqtt.messages.MqttUnsubscribeMessage;\n+import io.vertx.mqtt.messages.codes.MqttDisconnectReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubAckReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubCompReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubRecReasonCode;\n+import io.vertx.mqtt.messages.codes.MqttPubRelReasonCode;\n \n import java.util.UUID;\n \n@@ -91,7 +99,7 @@ void handleMessage(Object msg) {\n       if (result.isFailure()) {\n         Throwable cause = result.cause();\n         if (cause instanceof MqttUnacceptableProtocolVersionException) {\n-          endpoint = new MqttEndpointImpl(so, null, null, null, false, 0, null, 0);\n+          endpoint = new MqttEndpointImpl(so, null, null, null, false, 0, null, 0, MqttProperties.NO_PROPERTIES);\n           endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_UNACCEPTABLE_PROTOCOL_VERSION);\n         } else {\n           chctx.pipeline().fireExceptionCaught(result.cause());\n@@ -140,32 +148,39 @@ void handleMessage(Object msg) {\n             publish.fixedHeader().isDup(),\n             publish.fixedHeader().isRetain(),\n             publish.variableHeader().topicName(),\n-            newBuf);\n+            newBuf,\n+            publish.variableHeader().properties());\n           this.handlePublish(mqttPublishMessage);\n           break;\n \n         case PUBACK:\n \n           io.netty.handler.codec.mqtt.MqttPubAckMessage mqttPubackMessage = (io.netty.handler.codec.mqtt.MqttPubAckMessage) mqttMessage;\n-          this.handlePuback(mqttPubackMessage.variableHeader().messageId());\n+          if(mqttPubackMessage.variableHeader() instanceof MqttPubReplyMessageVariableHeader) {\n+            MqttPubReplyMessageVariableHeader variableHeader = (MqttPubReplyMessageVariableHeader) mqttPubackMessage.variableHeader();\n+            this.handlePuback(variableHeader.messageId(), MqttPubAckReasonCode.valueOf(variableHeader.reasonCode()), variableHeader.properties());\n+          } else {\n+            this.handlePuback(mqttPubackMessage.variableHeader().messageId(), MqttPubAckReasonCode.SUCCESS, MqttProperties.NO_PROPERTIES);\n+          }\n           break;\n \n+\n         case PUBREC:\n \n-          int pubrecMessageId = ((io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader) mqttMessage.variableHeader()).messageId();\n-          this.handlePubrec(pubrecMessageId);\n+          MqttPubReplyMessageVariableHeader pubrecVariableHeader = ((io.netty.handler.codec.mqtt.MqttPubReplyMessageVariableHeader) mqttMessage.variableHeader());\n+          this.handlePubrec(pubrecVariableHeader.messageId(), MqttPubRecReasonCode.valueOf(pubrecVariableHeader.reasonCode()), pubrecVariableHeader.properties());\n           break;\n \n         case PUBREL:\n \n-          int pubrelMessageId = ((io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader) mqttMessage.variableHeader()).messageId();\n-          this.handlePubrel(pubrelMessageId);\n+          MqttPubReplyMessageVariableHeader pubrelVariableHeader = (io.netty.handler.codec.mqtt.MqttPubReplyMessageVariableHeader) mqttMessage.variableHeader();\n+          this.handlePubrel(pubrelVariableHeader.messageId(), MqttPubRelReasonCode.valueOf(pubrelVariableHeader.reasonCode()), pubrelVariableHeader.properties());\n           break;\n \n         case PUBCOMP:\n \n-          int pubcompMessageId = ((io.netty.handler.codec.mqtt.MqttMessageIdVariableHeader) mqttMessage.variableHeader()).messageId();\n-          this.handlePubcomp(pubcompMessageId);\n+          MqttPubReplyMessageVariableHeader pubcompVariableHeader = (io.netty.handler.codec.mqtt.MqttPubReplyMessageVariableHeader) mqttMessage.variableHeader();\n+          this.handlePubcomp(pubcompVariableHeader.messageId(), MqttPubCompReasonCode.valueOf(pubcompVariableHeader.reasonCode()), pubcompVariableHeader.properties());\n           break;\n \n         case PINGREQ:\n@@ -175,7 +190,10 @@ void handleMessage(Object msg) {\n \n         case DISCONNECT:\n \n-          this.handleDisconnect();\n+          io.netty.handler.codec.mqtt.MqttReasonCodeAndPropertiesVariableHeader disconnectVariableHeader =\n+            (io.netty.handler.codec.mqtt.MqttReasonCodeAndPropertiesVariableHeader) mqttMessage.variableHeader();\n+          this.handleDisconnect(MqttDisconnectReasonCode.valueOf(disconnectVariableHeader.reasonCode()),\n+            disconnectVariableHeader.properties());\n           break;\n \n         default:\n@@ -209,7 +227,8 @@ private void handleConnect(MqttConnectMessage msg) {\n         msg.payload().willTopic(),\n         msg.payload().willMessageInBytes() != null ? Buffer.buffer(msg.payload().willMessageInBytes()) : null,\n         msg.variableHeader().willQos(),\n-        msg.variableHeader().isWillRetain());\n+        msg.variableHeader().isWillRetain(),\n+        msg.payload().willProperties());\n \n     // retrieve authorization information from CONNECT message\n     MqttAuth auth = (msg.variableHeader().hasUserName() &&\n@@ -241,7 +260,8 @@ private void handleConnect(MqttConnectMessage msg) {\n         msg.variableHeader().isCleanSession(),\n         msg.variableHeader().version(),\n         msg.variableHeader().name(),\n-        msg.variableHeader().keepAliveTimeSeconds());\n+        msg.variableHeader().keepAliveTimeSeconds(),\n+        msg.variableHeader().properties());\n \n     // remove the idle state handler for timeout on CONNECT\n     chctx.pipeline().remove(\"idle\");\n@@ -276,7 +296,11 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n       if (this.exceptionHandler != null) {\n         this.exceptionHandler.handle(new VertxException(\"With zero-length client-id, clean session MUST be true\"));\n       }\n-      this.endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_IDENTIFIER_REJECTED);\n+      if(endpoint.protocolVersion() >= MqttVersion.MQTT_5.protocolLevel()) {\n+        this.endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_CLIENT_IDENTIFIER_NOT_VALID);\n+      } else {\n+        this.endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_IDENTIFIER_REJECTED);\n+      }\n     } else {\n \n       // an exception at connection level is propagated to the endpoint\n@@ -338,11 +362,11 @@ void handlePublish(MqttPublishMessage msg) {\n    *\n    * @param pubackMessageId identifier of the message acknowledged by the remote MQTT client\n    */\n-  void handlePuback(int pubackMessageId) {\n+  void handlePuback(int pubackMessageId, MqttPubAckReasonCode code, MqttProperties properties) {\n \n     synchronized (this.so) {\n       if (this.checkConnected()) {\n-        this.endpoint.handlePuback(pubackMessageId);\n+        this.endpoint.handlePuback(pubackMessageId, code, properties);\n       }\n     }\n   }\n@@ -351,12 +375,14 @@ void handlePuback(int pubackMessageId) {\n    * Used for calling the pubrec handler when the remote MQTT client acknowledge a QoS 2 message with pubrec\n    *\n    * @param pubrecMessageId identifier of the message acknowledged by the remote MQTT client\n+   * @param code reason code\n+   * @param properties MQTT properties\n    */\n-  void handlePubrec(int pubrecMessageId) {\n+  void handlePubrec(int pubrecMessageId, MqttPubRecReasonCode code, MqttProperties properties) {\n \n     synchronized (this.so) {\n       if (this.checkConnected()) {\n-        this.endpoint.handlePubrec(pubrecMessageId);\n+        this.endpoint.handlePubrec(pubrecMessageId, code, properties);\n       }\n     }\n   }\n@@ -366,11 +392,10 @@ void handlePubrec(int pubrecMessageId) {\n    *\n    * @param pubrelMessageId identifier of the message acknowledged by the remote MQTT client\n    */\n-  void handlePubrel(int pubrelMessageId) {\n-\n+  void handlePubrel(int pubrelMessageId, MqttPubRelReasonCode code, MqttProperties properties) {\n     synchronized (this.so) {\n       if (this.checkConnected()) {\n-        this.endpoint.handlePubrel(pubrelMessageId);\n+        this.endpoint.handlePubrel(pubrelMessageId, code, properties);\n       }\n     }\n   }\n@@ -379,12 +404,13 @@ void handlePubrel(int pubrelMessageId) {\n    * Used for calling the pubcomp handler when the remote MQTT client acknowledge a QoS 2 message with pubcomp\n    *\n    * @param pubcompMessageId identifier of the message acknowledged by the remote MQTT client\n+   * @param code reason code\n+   * @param properties MQTT message properties\n    */\n-  void handlePubcomp(int pubcompMessageId) {\n-\n+  void handlePubcomp(int pubcompMessageId, MqttPubCompReasonCode code, MqttProperties properties) {\n     synchronized (this.so) {\n       if (this.checkConnected()) {\n-        this.endpoint.handlePubcomp(pubcompMessageId);\n+        this.endpoint.handlePubcomp(pubcompMessageId, code, properties);\n       }\n     }\n   }\n@@ -403,12 +429,14 @@ void handlePingreq() {\n \n   /**\n    * Used for calling the disconnect handler when the remote MQTT client disconnects\n+   *\n+   * @param code reason code\n+   * @param properties MQTT message properties\n    */\n-  void handleDisconnect() {\n-\n+  void handleDisconnect(MqttDisconnectReasonCode code, MqttProperties properties) {\n     synchronized (this.so) {\n       if (this.checkConnected()) {\n-        this.endpoint.handleDisconnect();\n+        this.endpoint.handleDisconnect(code, properties);\n       }\n     }\n   }"
  },
  {
    "sha": "34013822f2fc8b12428a27ce090f215c7767a369",
    "filename": "src/main/java/io/vertx/mqtt/impl/MqttTopicSubscriptionImpl.java",
    "status": "modified",
    "additions": 13,
    "deletions": 3,
    "changes": 16,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/impl/MqttTopicSubscriptionImpl.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/impl/MqttTopicSubscriptionImpl.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/impl/MqttTopicSubscriptionImpl.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -17,6 +17,7 @@\n package io.vertx.mqtt.impl;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n+import io.netty.handler.codec.mqtt.MqttSubscriptionOption;\n import io.vertx.mqtt.MqttTopicSubscription;\n \n /**\n@@ -25,7 +26,7 @@\n public class MqttTopicSubscriptionImpl implements MqttTopicSubscription {\n \n   private final String topicName;\n-  private final MqttQoS qualityOfService;\n+  private final MqttSubscriptionOption subscriptionOption;\n \n   /**\n    * Constructor\n@@ -34,15 +35,24 @@\n    * @param qualityOfService quality of service level\n    */\n   public MqttTopicSubscriptionImpl(String topicName, MqttQoS qualityOfService) {\n+    this(topicName, MqttSubscriptionOption.onlyFromQos(qualityOfService));\n+  }\n+\n+  public MqttTopicSubscriptionImpl(String topicName, MqttSubscriptionOption subscriptionOption) {\n     this.topicName = topicName;\n-    this.qualityOfService = qualityOfService;\n+    this.subscriptionOption = subscriptionOption;\n   }\n \n+\n   public String topicName() {\n     return this.topicName;\n   }\n \n   public MqttQoS qualityOfService() {\n-    return this.qualityOfService;\n+    return subscriptionOption.qos();\n+  }\n+\n+  public MqttSubscriptionOption subscriptionOption() {\n+    return subscriptionOption;\n   }\n }"
  },
  {
    "sha": "d29fe9841a87dc4a23f3887ab4eb123d03b73eb2",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttConnAckMessage.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttConnAckMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttConnAckMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttConnAckMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -17,7 +17,9 @@\n package io.vertx.mqtt.messages;\n \n import io.netty.handler.codec.mqtt.MqttConnectReturnCode;\n+import io.netty.handler.codec.mqtt.MqttProperties;\n import io.vertx.codegen.annotations.CacheReturn;\n+import io.vertx.codegen.annotations.GenIgnore;\n import io.vertx.codegen.annotations.VertxGen;\n import io.vertx.mqtt.messages.impl.MqttConnAckMessageImpl;\n \n@@ -38,6 +40,19 @@ static MqttConnAckMessage create(MqttConnectReturnCode code, boolean isSessionPr\n     return new MqttConnAckMessageImpl(code, isSessionPresent);\n   }\n \n+  /**\n+   * Create a concrete instance of a Vert.x connack message\n+   *\n+   * @param code  return code from the connection request\n+   * @param isSessionPresent  is an old session is present\n+   * @param properties MQTT properties\n+   * @return\n+   */\n+  @GenIgnore\n+  static MqttConnAckMessage create(MqttConnectReturnCode code, boolean isSessionPresent, MqttProperties properties) {\n+    return new MqttConnAckMessageImpl(code, isSessionPresent, properties);\n+  }\n+\n   /**\n    * @return  return code from the connection request\n    */\n@@ -49,4 +64,8 @@ static MqttConnAckMessage create(MqttConnectReturnCode code, boolean isSessionPr\n    */\n   @CacheReturn\n   boolean isSessionPresent();\n+\n+  @GenIgnore\n+  @CacheReturn\n+  MqttProperties properties();\n }"
  },
  {
    "sha": "52dac096b3741703bb35898737756b59636703ff",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttDisconnectMessage.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttDisconnectMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttDisconnectMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttDisconnectMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.codegen.annotations.CacheReturn;\n+import io.vertx.codegen.annotations.GenIgnore;\n+import io.vertx.codegen.annotations.VertxGen;\n+import io.vertx.mqtt.messages.codes.MqttDisconnectReasonCode;\n+import io.vertx.mqtt.messages.impl.MqttDisconnectMessageImpl;\n+\n+/**\n+ * Represents an MQTT CONNACK message\n+ */\n+@VertxGen\n+public interface MqttDisconnectMessage {\n+\n+  /**\n+   * Create a concrete instance of a Vert.x disconnect message\n+   *\n+   * @param code  return code from the disconnect request\n+   * @param properties MQTT properties of the disconnect message\n+   * @return\n+   */\n+  @GenIgnore\n+  static MqttDisconnectMessage create(MqttDisconnectReasonCode code, MqttProperties properties) {\n+    return new MqttDisconnectMessageImpl(code, properties);\n+  }\n+\n+  /**\n+   * @return  return code from the connection request\n+   */\n+  @CacheReturn\n+  MqttDisconnectReasonCode code();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @GenIgnore\n+  @CacheReturn\n+  MqttProperties properties();\n+}"
  },
  {
    "sha": "941a7e723c70b87c8055f90169822f02823a57c1",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttPubAckMessage.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubAckMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubAckMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttPubAckMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.codegen.annotations.CacheReturn;\n+import io.vertx.codegen.annotations.GenIgnore;\n+import io.vertx.codegen.annotations.VertxGen;\n+import io.vertx.mqtt.messages.codes.MqttPubAckReasonCode;\n+import io.vertx.mqtt.messages.impl.MqttPubAckMessageImpl;\n+\n+/**\n+ * Represents an MQTT PUBACK message\n+ */\n+@VertxGen\n+public interface MqttPubAckMessage {\n+\n+  /**\n+   * Create a concrete instance of a Vert.x puback message\n+   *\n+   * @param messageId message Id\n+   * @param code  return code from the puback\n+   * @param properties MQTT properties of the puback message\n+   * @return\n+   */\n+  @GenIgnore\n+  static MqttPubAckMessage create(int messageId, MqttPubAckReasonCode code, MqttProperties properties) {\n+    return new MqttPubAckMessageImpl(messageId, code, properties);\n+  }\n+\n+  @CacheReturn\n+  int messageId();\n+\n+  /**\n+   * @return  reason code from the puback request\n+   */\n+  @CacheReturn\n+  MqttPubAckReasonCode code();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @CacheReturn\n+  @GenIgnore\n+  MqttProperties properties();\n+}"
  },
  {
    "sha": "d52c3bf09b617a70a4d4596546770c76d86757b6",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttPubCompMessage.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubCompMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubCompMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttPubCompMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.codegen.annotations.CacheReturn;\n+import io.vertx.codegen.annotations.GenIgnore;\n+import io.vertx.codegen.annotations.VertxGen;\n+import io.vertx.mqtt.messages.codes.MqttPubCompReasonCode;\n+import io.vertx.mqtt.messages.impl.MqttPubCompMessageImpl;\n+\n+/**\n+ * Represents an MQTT PUBCOMP message\n+ */\n+@VertxGen\n+public interface MqttPubCompMessage {\n+\n+  /**\n+   * Create a concrete instance of a Vert.x pubcomp message\n+   *\n+   * @param messageId message Id\n+   * @param code  return code from the pubcomp\n+   * @param properties MQTT properties of the pubcomp message\n+   * @return\n+   */\n+  @GenIgnore\n+  static MqttPubCompMessage create(int messageId, MqttPubCompReasonCode code, MqttProperties properties) {\n+    return new MqttPubCompMessageImpl(messageId, code, properties);\n+  }\n+\n+  @CacheReturn\n+  int messageId();\n+\n+  /**\n+   * @return  reason code from the pubcomp message\n+   */\n+  @CacheReturn\n+  MqttPubCompReasonCode code();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @CacheReturn\n+  @GenIgnore\n+  MqttProperties properties();\n+}"
  },
  {
    "sha": "cd8fcb40aa535849ba8d57609024a3c80da8abad",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttPubRecMessage.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubRecMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubRecMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttPubRecMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.codegen.annotations.CacheReturn;\n+import io.vertx.codegen.annotations.GenIgnore;\n+import io.vertx.codegen.annotations.VertxGen;\n+import io.vertx.mqtt.messages.codes.MqttPubRecReasonCode;\n+import io.vertx.mqtt.messages.impl.MqttPubRecMessageImpl;\n+\n+/**\n+ * Represents an MQTT PUBREC message\n+ */\n+@VertxGen\n+public interface MqttPubRecMessage {\n+\n+  /**\n+   * Create a concrete instance of a Vert.x pubrec message\n+   *\n+   * @param messageId message Id\n+   * @param code  return code from the pubrec\n+   * @param properties MQTT properties of the pubrec message\n+   * @return\n+   */\n+  @GenIgnore\n+  static MqttPubRecMessage create(int messageId, MqttPubRecReasonCode code, MqttProperties properties) {\n+    return new MqttPubRecMessageImpl(messageId, code, properties);\n+  }\n+\n+  @CacheReturn\n+  int messageId();\n+\n+  /**\n+   * @return  reason code from the pubrec request\n+   */\n+  @CacheReturn\n+  MqttPubRecReasonCode code();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @CacheReturn\n+  @GenIgnore\n+  MqttProperties properties();\n+}"
  },
  {
    "sha": "3ee937a81b6760cc49450d47e503141fe7ae7949",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttPubRelMessage.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubRelMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPubRelMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttPubRelMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.codegen.annotations.CacheReturn;\n+import io.vertx.codegen.annotations.GenIgnore;\n+import io.vertx.codegen.annotations.VertxGen;\n+import io.vertx.mqtt.messages.codes.MqttPubRelReasonCode;\n+import io.vertx.mqtt.messages.impl.MqttPubRelMessageImpl;\n+\n+/**\n+ * Represents an MQTT PUBREC message\n+ */\n+@VertxGen\n+public interface MqttPubRelMessage {\n+\n+  /**\n+   * Create a concrete instance of a Vert.x pubrel message\n+   *\n+   * @param messageId message Id\n+   * @param code  return code from the pubrel\n+   * @param properties MQTT properties of the pubrel message\n+   * @return\n+   */\n+  @GenIgnore\n+  static MqttPubRelMessage create(int messageId, MqttPubRelReasonCode code, MqttProperties properties) {\n+    return new MqttPubRelMessageImpl(messageId, code, properties);\n+  }\n+\n+  @CacheReturn\n+  int messageId();\n+\n+  /**\n+   * @return  reason code from the pubrel request\n+   */\n+  @CacheReturn\n+  MqttPubRelReasonCode code();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @CacheReturn\n+  @GenIgnore\n+  MqttProperties properties();\n+}"
  },
  {
    "sha": "cf3531eb5f3fe52c22d2614f56d4847750f964bb",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttPublishMessage.java",
    "status": "modified",
    "additions": 26,
    "deletions": 1,
    "changes": 27,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPublishMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttPublishMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttPublishMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -17,6 +17,7 @@\n package io.vertx.mqtt.messages;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.mqtt.MqttProperties;\n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.codegen.annotations.CacheReturn;\n import io.vertx.codegen.annotations.GenIgnore;\n@@ -44,7 +45,24 @@\n   @GenIgnore\n   static MqttPublishMessage create(int messageId, MqttQoS qosLevel, boolean isDup, boolean isRetain, String topicName, ByteBuf payload) {\n \n-    return new MqttPublishMessageImpl(messageId, qosLevel, isDup, isRetain, topicName, payload);\n+    return new MqttPublishMessageImpl(messageId, qosLevel, isDup, isRetain, topicName, payload, MqttProperties.NO_PROPERTIES);\n+  }\n+  /**\n+   * Create a concrete instance of a Vert.x publish message\n+   *\n+   * @param messageId  message identifier\n+   * @param qosLevel   quality of service level\n+   * @param isDup      if the message is a duplicate\n+   * @param isRetain   if the message needs to be retained\n+   * @param topicName  topic on which the message was published\n+   * @param payload    payload message\n+   * @param properties message properties\n+   * @return Vert.x publish message\n+   */\n+  @GenIgnore\n+  static MqttPublishMessage create(int messageId, MqttQoS qosLevel, boolean isDup, boolean isRetain, String topicName, ByteBuf payload, MqttProperties properties) {\n+\n+    return new MqttPublishMessageImpl(messageId, qosLevel, isDup, isRetain, topicName, payload, properties);\n   }\n \n   /**\n@@ -76,4 +94,11 @@ static MqttPublishMessage create(int messageId, MqttQoS qosLevel, boolean isDup,\n    */\n   @CacheReturn\n   Buffer payload();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @CacheReturn\n+  @GenIgnore\n+  MqttProperties properties();\n }"
  },
  {
    "sha": "e3973a9428d0a8a098270a698f5b1739df508fc6",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttSubscribeMessage.java",
    "status": "modified",
    "additions": 23,
    "deletions": 1,
    "changes": 24,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttSubscribeMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttSubscribeMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttSubscribeMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -16,6 +16,7 @@\n \n package io.vertx.mqtt.messages;\n \n+import io.netty.handler.codec.mqtt.MqttProperties;\n import io.vertx.codegen.annotations.CacheReturn;\n import io.vertx.codegen.annotations.GenIgnore;\n import io.vertx.codegen.annotations.VertxGen;\n@@ -40,12 +41,33 @@\n   @GenIgnore\n   static MqttSubscribeMessage create(int messageId, List<io.netty.handler.codec.mqtt.MqttTopicSubscription> topicSubscriptions) {\n \n-    return new MqttSubscribeMessageImpl(messageId, topicSubscriptions);\n+    return new MqttSubscribeMessageImpl(messageId, topicSubscriptions, MqttProperties.NO_PROPERTIES);\n   }\n \n+  /**\n+   * Create a concrete instance of a Vert.x subscribe message\n+   *\n+   * @param messageId          message identifier\n+   * @param topicSubscriptions list with topics and related quality of service levels (from Netty)\n+   * @param properties MQTT message properties\n+   * @return Vert.x subscribe message\n+   */\n+  @GenIgnore\n+  static MqttSubscribeMessage create(int messageId, List<io.netty.handler.codec.mqtt.MqttTopicSubscription> topicSubscriptions, MqttProperties properties) {\n+    return new MqttSubscribeMessageImpl(messageId, topicSubscriptions, properties);\n+  }\n+\n+\n   /**\n    * @return  List with topics and related quolity of service levels\n    */\n   @CacheReturn\n   List<MqttTopicSubscription> topicSubscriptions();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @GenIgnore\n+  @CacheReturn\n+  MqttProperties properties();\n }"
  },
  {
    "sha": "04b357d5cd388fa905258dd1e184ed3751b18674",
    "filename": "src/main/java/io/vertx/mqtt/messages/MqttUnsubscribeMessage.java",
    "status": "modified",
    "additions": 23,
    "deletions": 1,
    "changes": 24,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttUnsubscribeMessage.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/MqttUnsubscribeMessage.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/MqttUnsubscribeMessage.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -16,6 +16,7 @@\n \n package io.vertx.mqtt.messages;\n \n+import io.netty.handler.codec.mqtt.MqttProperties;\n import io.vertx.codegen.annotations.CacheReturn;\n import io.vertx.codegen.annotations.GenIgnore;\n import io.vertx.codegen.annotations.VertxGen;\n@@ -38,12 +39,33 @@\n   @GenIgnore\n   static MqttUnsubscribeMessage create(int messageId, List<String> topics) {\n \n-    return new MqttUnsubscribeMessageImpl(messageId, topics);\n+    return new MqttUnsubscribeMessageImpl(messageId, topics, MqttProperties.NO_PROPERTIES);\n   }\n \n+  /**\n+   * Create a concrete instance of a Vert.x unsubscribe message\n+   *\n+   * @param messageId message identifier\n+   * @param topics    list of topics to unsubscribe\n+   * @param properties UNSUBSCRIBE message properties\n+   */\n+  @GenIgnore\n+  static MqttUnsubscribeMessage create(int messageId, List<String> topics, MqttProperties properties) {\n+\n+    return new MqttUnsubscribeMessageImpl(messageId, topics, properties);\n+  }\n+\n+\n   /**\n    * @return  List of topics to unsubscribe\n    */\n   @CacheReturn\n   List<String> topics();\n+\n+  /**\n+   * @return MQTT properties\n+   */\n+  @CacheReturn\n+  @GenIgnore\n+  MqttProperties properties();\n }"
  },
  {
    "sha": "8ff327cab555246d3d9c250ea2e8bac3e96bdea3",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttDisconnectReasonCode.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttDisconnectReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttDisconnectReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttDisconnectReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,53 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public enum MqttDisconnectReasonCode implements MqttReasonCode {\n+    NORMAL((byte)0x0),\n+    WITH_WILL_MESSAGE((byte)0x04),\n+    UNSPECIFIED_ERROR((byte)0x80),\n+    MALFORMED_PACKET((byte)0x81),\n+    PROTOCOL_ERROR((byte)0x82),\n+    IMPLEMENTATION_SPECIFIC_ERROR((byte)0x83),\n+    NOT_AUTHORIZED((byte)0x87),\n+    SERVER_BUSY((byte)0x89),\n+    SERVER_SHUTTING_DOWN((byte)0x8B),\n+    KEEP_ALIVE_TIMEOUT((byte)0x8D),\n+    SESSION_TAKEN_OVER((byte)0x8E),\n+    TOPIC_FILTER_INVALID((byte)0x8F),\n+    TOPIC_NAME_INVALID((byte)0x90),\n+    RECEIVE_MAXIMUM_EXCEEDED((byte)0x93),\n+    TOPIC_ALIAS_INVALID((byte)0x94),\n+    PACKET_TOO_LARGE((byte)0x95),\n+    MESSAGE_RATE_TOO_HIGH((byte)0x96),\n+    QUOTA_EXCEEDED((byte)0x97),\n+    ADMINISTRATIVE_ACTION((byte)0x98),\n+    PAYLOAD_FORMAT_INVALID((byte)0x99),\n+    RETAIN_NOT_SUPPORTED((byte)0x9A),\n+    QOS_NOT_SUPPORTED((byte)0x9B),\n+    USE_ANOTHER_SERVER((byte)0x9C),\n+    SERVER_MOVED((byte)0x9D),\n+    SHARED_SUBSCRIPTIONS_NOT_SUPPORTED((byte)0x9E),\n+    CONNECTION_RATE_EXCEEDED((byte)0x9F),\n+    MAXIMUM_CONNECT_TIME((byte)0xA0),\n+    SUBSCRIPTION_IDENTIFIERS_NOT_SUPPORTED((byte)0xA1),\n+    WILDCARD_SUBSCRIPTIONS_NOT_SUPPORTED((byte)0xA2);\n+\n+    MqttDisconnectReasonCode(byte byteValue) {\n+        this.byteValue = byteValue;\n+    }\n+\n+    private final byte byteValue;\n+\n+    public byte value() {\n+        return byteValue;\n+    }\n+\n+    private static final MqttDisconnectReasonCode[] VALUES = new MqttDisconnectReasonCode[0xA3];\n+\n+    static {\n+        ReasonCodeUtils.fillValuesByCode(VALUES, values());\n+    }\n+\n+    public static MqttDisconnectReasonCode valueOf(byte b) {\n+        return ReasonCodeUtils.codeLoopkup(VALUES, b, \"DISCONNECT\");\n+    }\n+}"
  },
  {
    "sha": "25eab41e0b0b74a9c9d5be0cbc25ae0fb3f5fad6",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttPubAckReasonCode.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubAckReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubAckReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttPubAckReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,39 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public enum MqttPubAckReasonCode implements MqttReasonCode {\n+    SUCCESS((byte)0x0),\n+    NO_MATCHING_SUBSCRIBERS((byte)0x10),\n+    UNSPECIFIED_ERROR((byte)0x80),\n+    IMPLEMENTATION_SPECIFIC_ERROR((byte)0x83),\n+    NOT_AUTHORIZED((byte)0x87),\n+    TOPIC_NAME_INVALID((byte)0x90),\n+    PACKET_IDENTIFIER_IN_USE((byte)0x91),\n+    QUOTA_EXCEEDED((byte)0x97),\n+    PAYLOAD_FORMAT_INVALID((byte)0x99);\n+\n+    MqttPubAckReasonCode(byte byteValue) {\n+        this.byteValue = byteValue;\n+    }\n+\n+    private final byte byteValue;\n+\n+    private static final MqttPubAckReasonCode[] VALUES = new MqttPubAckReasonCode[0x9A];\n+\n+    static {\n+        ReasonCodeUtils.fillValuesByCode(VALUES, values());\n+    }\n+\n+    public static MqttPubAckReasonCode valueOf(byte b) {\n+        return ReasonCodeUtils.codeLoopkup(VALUES, b, \"PUBACK\");\n+    }\n+\n+    @Override\n+    public byte value() {\n+        return byteValue;\n+    }\n+\n+    public boolean isError() {\n+        return (byteValue & 0x80) != 0;\n+    }\n+\n+}"
  },
  {
    "sha": "db32c97b4bbbf917292cdb936c75d07a8bc84575",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttPubCompReasonCode.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubCompReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubCompReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttPubCompReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,27 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public enum MqttPubCompReasonCode implements MqttReasonCode {\n+    SUCCESS((byte)0x0),\n+    PACKET_IDENTIFIER_NOT_FOUND((byte)0x92);\n+\n+    MqttPubCompReasonCode(byte byteValue) {\n+        this.byteValue = byteValue;\n+    }\n+\n+    private final byte byteValue;\n+\n+    @Override\n+    public byte value() {\n+        return byteValue;\n+    }\n+\n+    public static MqttPubCompReasonCode valueOf(byte b) {\n+        if(b == SUCCESS.byteValue) {\n+            return SUCCESS;\n+        } else if(b == PACKET_IDENTIFIER_NOT_FOUND.byteValue) {\n+            return PACKET_IDENTIFIER_NOT_FOUND;\n+        } else {\n+            throw new IllegalArgumentException(\"unknown PUBCOMP reason code: \" + b);\n+        }\n+    }\n+}"
  },
  {
    "sha": "4587da06c1af71dbdddb4c1bc5a246499392138c",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttPubRecReasonCode.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubRecReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubRecReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttPubRecReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,39 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public enum MqttPubRecReasonCode implements MqttReasonCode {\n+    SUCCESS((byte)0x0),\n+    NO_MATCHING_SUBSCRIBERS((byte)0x10),\n+    UNSPECIFIED_ERROR((byte)0x80),\n+    IMPLEMENTATION_SPECIFIC_ERROR((byte)0x83),\n+    NOT_AUTHORIZED((byte)0x87),\n+    TOPIC_NAME_INVALID((byte)0x90),\n+    PACKET_IDENTIFIER_IN_USE((byte)0x91),\n+    QUOTA_EXCEEDED((byte)0x97),\n+    PAYLOAD_FORMAT_INVALID((byte)0x99);\n+\n+    MqttPubRecReasonCode(byte byteValue) {\n+        this.byteValue = byteValue;\n+    }\n+\n+    private final byte byteValue;\n+\n+    @Override\n+    public byte value() {\n+        return byteValue;\n+    }\n+\n+    public boolean isError() {\n+        return Byte.toUnsignedInt(byteValue) >= Byte.toUnsignedInt(UNSPECIFIED_ERROR.byteValue);\n+    }\n+\n+    private static final MqttPubRecReasonCode[] VALUES = new MqttPubRecReasonCode[0x9A];\n+\n+    static {\n+        ReasonCodeUtils.fillValuesByCode(VALUES, values());\n+    }\n+\n+    public static MqttPubRecReasonCode valueOf(byte b) {\n+        return ReasonCodeUtils.codeLoopkup(VALUES, b, \"PUBREC\");\n+    }\n+\n+}"
  },
  {
    "sha": "c4950627cdacaf957b4cb7ff4353a4ddabd19863",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttPubRelReasonCode.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubRelReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttPubRelReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttPubRelReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,27 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public enum MqttPubRelReasonCode implements MqttReasonCode {\n+    SUCCESS((byte)0x0),\n+    PACKET_IDENTIFIER_NOT_FOUND((byte)0x92);\n+\n+    MqttPubRelReasonCode(byte byteValue) {\n+        this.byteValue = byteValue;\n+    }\n+\n+    private final byte byteValue;\n+\n+    @Override\n+    public byte value() {\n+        return byteValue;\n+    }\n+\n+    public static MqttPubRelReasonCode valueOf(byte b) {\n+        if(b == SUCCESS.byteValue) {\n+            return SUCCESS;\n+        } else if(b == PACKET_IDENTIFIER_NOT_FOUND.byteValue) {\n+            return PACKET_IDENTIFIER_NOT_FOUND;\n+        } else {\n+            throw new IllegalArgumentException(\"unknown PUBREL reason code: \" + b);\n+        }\n+    }\n+}"
  },
  {
    "sha": "82a2131939868283538818138a350b2c4d833bfb",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttReasonCode.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,10 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public interface MqttReasonCode {\n+    byte value();\n+\n+    default boolean isError() {\n+        return (value() & 0x80) != 0;\n+    }\n+\n+}"
  },
  {
    "sha": "d38f437303cfffe46a83ec9eb05a2e3cefbc8ac9",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttSubAckReasonCode.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttSubAckReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttSubAckReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttSubAckReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,48 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+import io.netty.handler.codec.mqtt.MqttQoS;\n+import io.netty.handler.codec.mqtt.MqttVersion;\n+\n+public enum MqttSubAckReasonCode {\n+    //All MQTT versions\n+    GRANTED_QOS0((byte)0x0),\n+    GRANTED_QOS1((byte)0x1),\n+    GRANTED_QOS2((byte)0x2),\n+    UNSPECIFIED_ERROR((byte)0x80),\n+    //MQTT5 or higher\n+    IMPLEMENTATION_SPECIFIC_ERROR((byte)0x83),\n+    NOT_AUTHORIZED((byte)0x87),\n+    TOPIC_FILTER_INVALID((byte)0x8F),\n+    PACKET_IDENTIFIER_IN_USE((byte)0x91),\n+    QUOTA_EXCEEDED((byte)0x97),\n+    SHARED_SUBSCRIPTIONS_NOT_SUPPORTED((byte)0x9E),\n+    SUBSCRIPTION_IDENTIFIERS_NOT_SUPPORTED((byte)0xA1),\n+    WILDCARD_SUBSCRIPTIONS_NOT_SUPPORTED((byte)0xA2);\n+\n+    MqttSubAckReasonCode(byte byteValue) {\n+        this.byteValue = byteValue;\n+    }\n+\n+    private final byte byteValue;\n+\n+    public byte value() {\n+        return byteValue;\n+    }\n+\n+    public static MqttSubAckReasonCode qosGranted(MqttQoS qos) {\n+        switch (qos) {\n+            case AT_MOST_ONCE: return MqttSubAckReasonCode.GRANTED_QOS0;\n+            case AT_LEAST_ONCE: return MqttSubAckReasonCode.GRANTED_QOS1;\n+            case EXACTLY_ONCE: return MqttSubAckReasonCode.GRANTED_QOS2;\n+            case FAILURE: return MqttSubAckReasonCode.UNSPECIFIED_ERROR;\n+            default: return MqttSubAckReasonCode.UNSPECIFIED_ERROR;\n+        }\n+    }\n+\n+    public MqttSubAckReasonCode limitForMqttVersion(MqttVersion version) {\n+        if(version != MqttVersion.MQTT_5 && byteValue > UNSPECIFIED_ERROR.byteValue)\n+            return UNSPECIFIED_ERROR;\n+        else\n+            return this;\n+    }\n+}"
  },
  {
    "sha": "befd391130b9297006e3b820c50db19ff75fc57d",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/MqttUnsubAckReasonCode.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttUnsubAckReasonCode.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/MqttUnsubAckReasonCode.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/MqttUnsubAckReasonCode.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,22 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public enum MqttUnsubAckReasonCode {\n+    SUCCESS((byte)0x0),\n+    NO_SUBSCRIPTION_EXISTED((byte)0x11),\n+    UNSPECIFIED_ERROR((byte)0x80),\n+    IMPLEMENTATION_SPECIFIC_ERROR((byte)0x83),\n+    NOT_AUTHORIZED((byte)0x87),\n+    TOPIC_FILTER_INVALID((byte)0x8F),\n+    PACKET_IDENTIFIER_IN_USE((byte)0x91);\n+\n+    MqttUnsubAckReasonCode(byte byteValue) {\n+        this.byteValue = byteValue;\n+    }\n+\n+    private final byte byteValue;\n+\n+    public byte value() {\n+        return byteValue;\n+    }\n+\n+}"
  },
  {
    "sha": "93592fa3cd3a5f114600db720d8368e6ce7be29a",
    "filename": "src/main/java/io/vertx/mqtt/messages/codes/ReasonCodeUtils.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/ReasonCodeUtils.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/codes/ReasonCodeUtils.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/codes/ReasonCodeUtils.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,25 @@\n+package io.vertx.mqtt.messages.codes;\n+\n+public class ReasonCodeUtils {\n+    static <C extends MqttReasonCode> void fillValuesByCode(C[] valuesByCode, C[] values) {\n+        for (C code : values) {\n+            final int unsignedByte = code.value() & 0xFF;\n+            valuesByCode[unsignedByte] = code;\n+        }\n+    }\n+\n+    static <C> C codeLoopkup(C[] valuesByCode, byte b, String codeType) {\n+        final int unsignedByte = b & 0xFF;\n+        C reasonCode = null;\n+        try {\n+            reasonCode = valuesByCode[unsignedByte];\n+        } catch (ArrayIndexOutOfBoundsException ignored) {\n+            // no op\n+        }\n+        if (reasonCode == null) {\n+            throw new IllegalArgumentException(\"unknown \" + codeType + \" reason code: \" + unsignedByte);\n+        }\n+        return reasonCode;\n+    }\n+\n+}"
  },
  {
    "sha": "92ef9f6b6c2676399e150181b95fae6aac2ade26",
    "filename": "src/main/java/io/vertx/mqtt/messages/impl/MqttConnAckMessageImpl.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttConnAckMessageImpl.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttConnAckMessageImpl.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/impl/MqttConnAckMessageImpl.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -17,6 +17,7 @@\n package io.vertx.mqtt.messages.impl;\n \n import io.netty.handler.codec.mqtt.MqttConnectReturnCode;\n+import io.netty.handler.codec.mqtt.MqttProperties;\n import io.vertx.mqtt.messages.MqttConnAckMessage;\n \n /**\n@@ -26,6 +27,7 @@\n \n   private final MqttConnectReturnCode code;\n   private final boolean isSessionPresent;\n+  private final MqttProperties properties;\n \n   /**\n    * Constructor\n@@ -34,8 +36,20 @@\n    * @param isSessionPresent  is an old session is present\n    */\n   public MqttConnAckMessageImpl(MqttConnectReturnCode code, boolean isSessionPresent) {\n+    this(code, isSessionPresent, MqttProperties.NO_PROPERTIES);\n+  }\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param code  return code from the connection request\n+   * @param isSessionPresent  is an old session is present\n+   * @param properties MQTT properties\n+   */\n+  public MqttConnAckMessageImpl(MqttConnectReturnCode code, boolean isSessionPresent, MqttProperties properties) {\n     this.code = code;\n     this.isSessionPresent = isSessionPresent;\n+    this.properties = properties;\n   }\n \n   public MqttConnectReturnCode code() {\n@@ -45,4 +59,8 @@ public MqttConnectReturnCode code() {\n   public boolean isSessionPresent() {\n     return this.isSessionPresent;\n   }\n+\n+  public MqttProperties properties() {\n+    return this.properties;\n+  }\n }"
  },
  {
    "sha": "b46640780dbd07c34ba5f34b467f4f2507d8e65d",
    "filename": "src/main/java/io/vertx/mqtt/messages/impl/MqttDisconnectMessageImpl.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttDisconnectMessageImpl.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttDisconnectMessageImpl.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/impl/MqttDisconnectMessageImpl.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages.impl;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.mqtt.messages.MqttDisconnectMessage;\n+import io.vertx.mqtt.messages.codes.MqttDisconnectReasonCode;\n+\n+/**\n+ * Represents an MQTT DISCONNECT message\n+ */\n+public class MqttDisconnectMessageImpl implements MqttDisconnectMessage {\n+\n+  private final MqttDisconnectReasonCode code;\n+  private final MqttProperties properties;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param code  reason code from the disconnect request\n+   * @param properties MQTT properties of the message\n+   */\n+  public MqttDisconnectMessageImpl(MqttDisconnectReasonCode code, MqttProperties properties) {\n+    this.code = code;\n+    this.properties = properties;\n+  }\n+\n+  public MqttDisconnectReasonCode code() {\n+    return this.code;\n+  }\n+\n+  public MqttProperties properties() {\n+    return this.properties;\n+  }\n+}"
  },
  {
    "sha": "48f86c9d1353526611e713f9a92011a8ad092337",
    "filename": "src/main/java/io/vertx/mqtt/messages/impl/MqttPubAckMessageImpl.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttPubAckMessageImpl.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttPubAckMessageImpl.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/impl/MqttPubAckMessageImpl.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages.impl;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.mqtt.messages.MqttPubAckMessage;\n+import io.vertx.mqtt.messages.codes.MqttPubAckReasonCode;\n+\n+/**\n+ * Represents an MQTT PUBACK message\n+ */\n+public class MqttPubAckMessageImpl implements MqttPubAckMessage {\n+\n+  private final int messageId;\n+  private final MqttPubAckReasonCode code;\n+  private final MqttProperties properties;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param code  reason code from the puback request\n+   * @param properties MQTT properties of the message\n+   */\n+  public MqttPubAckMessageImpl(int messageId, MqttPubAckReasonCode code, MqttProperties properties) {\n+    this.messageId = messageId;\n+    this.code = code;\n+    this.properties = properties;\n+  }\n+\n+  public int messageId() {\n+    return messageId;\n+  }\n+\n+  public MqttPubAckReasonCode code() {\n+    return this.code;\n+  }\n+\n+  public MqttProperties properties() {\n+    return this.properties;\n+  }\n+}"
  },
  {
    "sha": "f039625057917d8c7864e752ed6ea3d2ad9e5ca8",
    "filename": "src/main/java/io/vertx/mqtt/messages/impl/MqttPubCompMessageImpl.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttPubCompMessageImpl.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttPubCompMessageImpl.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/impl/MqttPubCompMessageImpl.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages.impl;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.mqtt.messages.MqttPubCompMessage;\n+import io.vertx.mqtt.messages.codes.MqttPubCompReasonCode;\n+\n+/**\n+ * Represents an MQTT PUBCOMP message\n+ */\n+public class MqttPubCompMessageImpl implements MqttPubCompMessage {\n+\n+  private final int messageId;\n+  private final MqttPubCompReasonCode code;\n+  private final MqttProperties properties;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param code  reason code from the pubcomp request\n+   * @param properties MQTT properties of the message\n+   */\n+  public MqttPubCompMessageImpl(int messageId, MqttPubCompReasonCode code, MqttProperties properties) {\n+    this.messageId = messageId;\n+    this.code = code;\n+    this.properties = properties;\n+  }\n+\n+  public int messageId() {\n+    return messageId;\n+  }\n+\n+  public MqttPubCompReasonCode code() {\n+    return this.code;\n+  }\n+\n+  public MqttProperties properties() {\n+    return this.properties;\n+  }\n+}"
  },
  {
    "sha": "824ffa5b6038742a5f2f0cd85faf8c12db521e8f",
    "filename": "src/main/java/io/vertx/mqtt/messages/impl/MqttPubRecMessageImpl.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/vert-x3/vertx-mqtt/blob/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttPubRecMessageImpl.java",
    "raw_url": "https://github.com/vert-x3/vertx-mqtt/raw/ee34b87378e49ba4f9cd1c243b8e22a7c6234d62/src/main/java/io/vertx/mqtt/messages/impl/MqttPubRecMessageImpl.java",
    "contents_url": "https://api.github.com/repos/vert-x3/vertx-mqtt/contents/src/main/java/io/vertx/mqtt/messages/impl/MqttPubRecMessageImpl.java?ref=ee34b87378e49ba4f9cd1c243b8e22a7c6234d62",
    "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2016 Red Hat Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.vertx.mqtt.messages.impl;\n+\n+import io.netty.handler.codec.mqtt.MqttProperties;\n+import io.vertx.mqtt.messages.MqttPubRecMessage;\n+import io.vertx.mqtt.messages.codes.MqttPubRecReasonCode;\n+\n+/**\n+ * Represents an MQTT PUBACK message\n+ */\n+public class MqttPubRecMessageImpl implements MqttPubRecMessage {\n+\n+  private final int messageId;\n+  private final MqttPubRecReasonCode code;\n+  private final MqttProperties properties;\n+\n+  /**\n+   * Constructor\n+   *\n+   * @param code  reason code from the disconnect request\n+   * @param properties MQTT properties of the message\n+   */\n+  public MqttPubRecMessageImpl(int messageId, MqttPubRecReasonCode code, MqttProperties properties) {\n+    this.messageId = messageId;\n+    this.code = code;\n+    this.properties = properties;\n+  }\n+\n+  public int messageId() {\n+    return messageId;\n+  }\n+\n+  public MqttPubRecReasonCode code() {\n+    return this.code;\n+  }\n+\n+  public MqttProperties properties() {\n+    return this.properties;\n+  }\n+}"
  }
]
