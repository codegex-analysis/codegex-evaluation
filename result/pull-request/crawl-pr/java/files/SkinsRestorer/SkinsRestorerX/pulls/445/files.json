[
  {
    "sha": "93692d4bcf0c0f58759177e1c3506dcb0ca24fd6",
    "filename": ".travis.yml",
    "status": "removed",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/bec8b0a893d5d96bb16776b8f5a0f52d7587fa22/.travis.yml",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/bec8b0a893d5d96bb16776b8f5a0f52d7587fa22/.travis.yml",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/.travis.yml?ref=bec8b0a893d5d96bb16776b8f5a0f52d7587fa22",
    "patch": "@@ -1,9 +0,0 @@\n-sudo: false\n-dist: xenial\n-language: java\n-jdk:\n-  - openjdk8\n-  - openjdk9\n-cache:\n-  directories:\n-  - $HOME/.m2"
  },
  {
    "sha": "590afd6aa894170e1a36157da21e558276dbb1f1",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/README.md",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/README.md",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/README.md?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -41,22 +41,22 @@ See [Contributors](https://github.com/SkinsRestorer/SkinsRestorerX/graphs/contri\n :rotating_light: Please note that this API is still WIP. Expect breaking changes! :rotating_light:\n \n ##### Maven repository\n-````\n+```xml\n <repository>\n     <id>codemc-snapshots</id>\n     <url>https://repo.codemc.org/repository/maven-snapshots/</url>\n </repository>\n-````\n+```\n \n ##### SkinsRestorer API\n-````\n+```xml\n <!-- SkinsRestorer API -->\n <dependency>\n     <groupId>net.skinsrestorer</groupId>\n     <artifactId>skinsrestorer</artifactId>\n     <version>14.0.0</version>\n </dependency>\n-````\n+```\n \n ##### Example Bukkit plugin\n https://github.com/SkinsRestorer/SkinsRestorerAPIExample"
  },
  {
    "sha": "181fbf0fad9ec71517ebf93fc24770ab0eef190e",
    "filename": "src/main/java/net/skinsrestorer/api/SkinsRestorerAPI.java",
    "status": "modified",
    "additions": 6,
    "deletions": 20,
    "changes": 26,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/api/SkinsRestorerAPI.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/api/SkinsRestorerAPI.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/api/SkinsRestorerAPI.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -21,10 +21,8 @@\n  */\n package net.skinsrestorer.api;\n \n-import com.google.common.annotations.Beta;\n import lombok.Getter;\n import net.skinsrestorer.shared.exception.SkinRequestException;\n-import net.skinsrestorer.shared.interfaces.SRPlugin;\n import net.skinsrestorer.shared.storage.SkinStorage;\n import net.skinsrestorer.shared.utils.MojangAPI;\n \n@@ -34,18 +32,16 @@\n  * Advanced help or getting problems? join our discord before submitting issues!\n  */\n @SuppressWarnings({\"unused\"})\n-public class SkinsRestorerAPI {\n-    private static @Getter\n-    SkinsRestorerAPI api;\n+public abstract class SkinsRestorerAPI {\n+    @Getter\n+    private static SkinsRestorerAPI api;\n     private final MojangAPI mojangAPI;\n     private final SkinStorage skinStorage;\n-    private final SRPlugin plugin;\n \n-    public SkinsRestorerAPI(MojangAPI mojangAPI, SkinStorage skinStorage, SRPlugin plugin) {\n+    protected SkinsRestorerAPI(MojangAPI mojangAPI, SkinStorage skinStorage) {\n         setInstance(this);\n         this.mojangAPI = mojangAPI;\n         this.skinStorage = skinStorage;\n-        this.plugin = plugin;\n     }\n \n     private static void setInstance(SkinsRestorerAPI api) {\n@@ -81,17 +77,7 @@ public void removeSkin(String playerName) {\n         skinStorage.removePlayerSkin(playerName);\n     }\n \n-    @Beta\n-    public void applySkin(PlayerWrapper player, Object props) {\n-        applySkin(player);\n-    }\n+    public abstract void applySkin(PlayerWrapper player, Object props);\n \n-    @Beta\n-    public void applySkin(PlayerWrapper player) {\n-        try {\n-            plugin.getApplier().applySkin(player, this);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n+    public abstract void applySkin(PlayerWrapper player);\n }"
  },
  {
    "sha": "8e550f2d52655b000b26f43d7552800edbb99ccf",
    "filename": "src/main/java/net/skinsrestorer/api/bukkit/BukkitHeadAPI.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/api/bukkit/BukkitHeadAPI.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/api/bukkit/BukkitHeadAPI.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/api/bukkit/BukkitHeadAPI.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -32,7 +32,8 @@\n import java.util.UUID;\n \n public class BukkitHeadAPI {\n-    private BukkitHeadAPI() {}\n+    private BukkitHeadAPI() {\n+    }\n \n     public static void setSkull(ItemStack head, String b64stringTexture) {\n         GameProfile profile = new GameProfile(UUID.randomUUID(), null);"
  },
  {
    "sha": "e7221756d6923a1ec58cba9a8479ce8e77ebcc50",
    "filename": "src/main/java/net/skinsrestorer/bukkit/SkinsGUI.java",
    "status": "modified",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/SkinsGUI.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/SkinsGUI.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/SkinsGUI.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -27,7 +27,7 @@\n import net.skinsrestorer.api.bukkit.BukkitHeadAPI;\n import net.skinsrestorer.shared.storage.Locale;\n import net.skinsrestorer.shared.utils.C;\n-import net.skinsrestorer.shared.utils.SRLogger;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n import org.bukkit.Bukkit;\n import org.bukkit.entity.Player;\n import org.bukkit.event.EventHandler;\n@@ -102,7 +102,7 @@ public Inventory getGUI(Player p, int page, Map<String, Object> skinsList) {\n \n         skinsList.forEach((name, property) -> {\n             if (name.chars().anyMatch(i -> Character.isLetter(i) && Character.isUpperCase(i))) {\n-                this.srLogger.logAlways(\"[SkinsRestorer] ERROR: skin \" + name + \".skin contains a Upper case! \\nPlease rename the file name to a lower case!.\");\n+                srLogger.log(\"[SkinsRestorer] ERROR: skin \" + name + \".skin contains a Upper case! \\nPlease rename the file name to a lower case!.\");\n                 return;\n             }\n \n@@ -126,7 +126,7 @@ public Inventory getGUI(Player p, int page) {\n \n         Map<String, Object> skinsList = plugin.getSkinStorage().getSkins(skinNumber);\n         ++page; // start counting from 1\n-        return this.getGUI(p, page, skinsList);\n+        return getGUI(p, page, skinsList);\n     }\n \n     private ItemStack createSkull(String name, Object property) {\n@@ -142,7 +142,7 @@ private ItemStack createSkull(String name, Object property) {\n         try {\n             BukkitHeadAPI.setSkull(is, ((Property) property).getValue());\n         } catch (Exception e) {\n-            this.srLogger.logAlways(\"[SkinsRestorer] ERROR: could not add '\" + name + \"' to SkinsGUI, skin might be corrupted or invalid!\");\n+            srLogger.log(\"[SkinsRestorer] ERROR: could not add '\" + name + \"' to SkinsGUI, skin might be corrupted or invalid!\");\n             e.printStackTrace();\n         }\n \n@@ -264,10 +264,10 @@ public void onCLick(InventoryClickEvent e) {\n     }\n \n     public static class GuiGlass {\n-        private @Getter\n-        ItemStack itemStack;\n-        private @Getter\n-        String text;\n+        @Getter\n+        private ItemStack itemStack;\n+        @Getter\n+        private String text;\n \n         public GuiGlass(GlassType glassType) {\n             switch (glassType) {\n@@ -276,16 +276,16 @@ public GuiGlass(GlassType glassType) {\n                     text = \" \";\n                     break;\n                 case PREV:\n-                    this.itemStack = XMaterial.YELLOW_STAINED_GLASS_PANE.parseItem();\n-                    this.text = C.c(Locale.SKINSMENU_PREVIOUS_PAGE);\n+                    itemStack = XMaterial.YELLOW_STAINED_GLASS_PANE.parseItem();\n+                    text = C.c(Locale.SKINSMENU_PREVIOUS_PAGE);\n                     break;\n                 case NEXT:\n-                    this.itemStack = XMaterial.GREEN_STAINED_GLASS_PANE.parseItem();\n-                    this.text = C.c(Locale.SKINSMENU_NEXT_PAGE);\n+                    itemStack = XMaterial.GREEN_STAINED_GLASS_PANE.parseItem();\n+                    text = C.c(Locale.SKINSMENU_NEXT_PAGE);\n                     break;\n                 case DELETE:\n-                    this.itemStack = XMaterial.RED_STAINED_GLASS_PANE.parseItem();\n-                    this.text = C.c(Locale.SKINSMENU_REMOVE_SKIN);\n+                    itemStack = XMaterial.RED_STAINED_GLASS_PANE.parseItem();\n+                    text = C.c(Locale.SKINSMENU_REMOVE_SKIN);\n                     break;\n             }\n "
  },
  {
    "sha": "0158153d48633290d6759137c52fcbfc74c45654",
    "filename": "src/main/java/net/skinsrestorer/bukkit/SkinsRestorer.java",
    "status": "modified",
    "additions": 49,
    "deletions": 66,
    "changes": 115,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/SkinsRestorer.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/SkinsRestorer.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/SkinsRestorer.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -24,8 +24,6 @@\n import co.aikar.commands.BukkitCommandIssuer;\n import co.aikar.commands.ConditionFailedException;\n import co.aikar.commands.PaperCommandManager;\n-import com.google.common.annotations.Beta;\n-import io.papermc.lib.PaperLib;\n import lombok.Getter;\n import net.skinsrestorer.api.PlayerWrapper;\n import net.skinsrestorer.api.SkinsRestorerAPI;\n@@ -40,6 +38,8 @@\n import net.skinsrestorer.shared.update.UpdateChecker;\n import net.skinsrestorer.shared.update.UpdateCheckerGitHub;\n import net.skinsrestorer.shared.utils.*;\n+import net.skinsrestorer.shared.utils.log.LoggerImpl;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n import org.bstats.bukkit.Metrics;\n import org.bstats.charts.SingleLineChart;\n import org.bukkit.Bukkit;\n@@ -54,14 +54,13 @@\n import java.nio.file.Files;\n import java.util.Map;\n import java.util.TreeMap;\n-import java.util.logging.Level;\n \n @SuppressWarnings(\"Duplicates\")\n public class SkinsRestorer extends JavaPlugin {\n     @Getter\n     private static SkinsRestorer instance;\n     @Getter\n-    private final String configPath = getDataFolder().getPath();\n+    private final File configPath = getDataFolder();\n     @Getter\n     private SkinFactory factory;\n     @Getter\n@@ -107,9 +106,9 @@ public String getVersion() {\n     @Override\n     public void onEnable() {\n         console = getServer().getConsoleSender();\n-        srLogger = new SRLogger(getDataFolder());\n+        srLogger = new SRLogger(getDataFolder(), new LoggerImpl(getServer().getLogger()), true);\n \n-        File updaterDisabled = new File(configPath, \"noupdate.txt\");\n+        File updaterDisabled = new File(getDataFolder(), \"noupdate.txt\");\n \n         int pluginId = 1669; // SkinsRestorer's ID on bStats, for Bukkit\n         Metrics metrics = new Metrics(this, pluginId);\n@@ -121,20 +120,20 @@ public void onEnable() {\n         instance = this;\n         factory = new UniversalSkinFactory(this);\n \n-        console.sendMessage(\"§e[§2SkinsRestorer§e] §aDetected Minecraft §e\" + ReflectionUtil.serverVersion + \"§a, using §e\" + factory.getClass().getSimpleName() + \"§a.\");\n+        srLogger.log(\"§aDetected Minecraft §e\" + ReflectionUtil.serverVersion + \"§a, using §e\" + factory.getClass().getSimpleName() + \"§a.\");\n \n         // Detect MundoSK\n         if (getServer().getPluginManager().getPlugin(\"MundoSK\") != null) {\n             try {\n-                YamlConfig mundoConfig = new YamlConfig(\"plugins\" + File.separator + \"MundoSK\" + File.separator, \"config\", false);\n+                YamlConfig mundoConfig = new YamlConfig(new File(getDataFolder().getParentFile(), \"MundoSK\"), \"config.yml\", false);\n                 mundoConfig.reload();\n                 if (mundoConfig.getBoolean(\"enable_custom_skin_and_tablist\")) {\n-                    console.sendMessage(\"§e[§2SkinsRestorer§e] §4----------------------------------------------\");\n-                    console.sendMessage(\"§e[§2SkinsRestorer§e] §4             [CRITICAL WARNING]\");\n-                    console.sendMessage(\"§e[§2SkinsRestorer§e] §cWe have detected MundoSK on your server with §e'enable_custom_skin_and_tablist: §4§ntrue§e'§c.\");\n-                    console.sendMessage(\"§e[§2SkinsRestorer§e] §cThat setting is located in §e/plugins/MundoSK/config.yml\");\n-                    console.sendMessage(\"§e[§2SkinsRestorer§e] §cYou have to disable ('false') it to get SkinsRestorer to work!\");\n-                    console.sendMessage(\"§e[§2SkinsRestorer§e] §4----------------------------------------------\");\n+                    srLogger.log(\"§4----------------------------------------------\");\n+                    srLogger.log(\"§4             [CRITICAL WARNING]\");\n+                    srLogger.log(\"§cWe have detected MundoSK on your server with §e'enable_custom_skin_and_tablist: §4§ntrue§e'§c.\");\n+                    srLogger.log(\"§cThat setting is located in §e/plugins/MundoSK/config.yml\");\n+                    srLogger.log(\"§cYou have to disable ('false') it to get SkinsRestorer to work!\");\n+                    srLogger.log(\"§4----------------------------------------------\");\n                 }\n             } catch (Exception ignored) {\n             }\n@@ -153,10 +152,10 @@ public void onEnable() {\n                 checkUpdate(bungeeEnabled, false);\n             }, 20 * 60 * 10, 20 * 60 * 10);\n         } else {\n-            srLogger.logAlways(Level.INFO, \"Updater Disabled\");\n+            srLogger.log(\"Updater Disabled\");\n         }\n \n-        skinStorage = new SkinStorage(SkinStorage.Platform.BUKKIT);\n+        skinStorage = new SkinStorage(srLogger, SkinStorage.Platform.BUKKIT);\n \n         // Init SkinsGUI click listener even when on bungee\n         Bukkit.getPluginManager().registerEvents(new SkinsGUI(this), this);\n@@ -175,7 +174,7 @@ public void onEnable() {\n \n                         if (subChannel.equalsIgnoreCase(\"SkinUpdate\")) {\n                             try {\n-                                factory.applySkin(player, this.skinStorage.createProperty(in.readUTF(), in.readUTF(), in.readUTF()));\n+                                factory.applySkin(player, skinStorage.createProperty(in.readUTF(), in.readUTF(), in.readUTF()));\n                             } catch (IOException ignored) {\n                             }\n                             factory.updateSkin(player);\n@@ -204,7 +203,7 @@ public void onEnable() {\n \n                             SkinsGUI.getMenus().put(p.getName(), 0);\n \n-                            this.requestSkinsFromBungeeCord(p, 0);\n+                            requestSkinsFromBungeeCord(p, 0);\n                         }\n \n                         if (subChannel.equalsIgnoreCase(\"returnSkins\")) {\n@@ -224,7 +223,7 @@ public void onEnable() {\n                             Map<String, Object> newSkinList = new TreeMap<>();\n \n                             skinList.forEach((name, property) -> {\n-                                newSkinList.put(name, this.getSkinStorage().createProperty(property.getName(), property.getValue(), property.getSignature()));\n+                                newSkinList.put(name, getSkinStorage().createProperty(property.getName(), property.getValue(), property.getSignature()));\n                             });\n \n                             SkinsGUI skinsGUI = new SkinsGUI(this);\n@@ -249,19 +248,19 @@ public void onEnable() {\n          * ***************************************** */\n \n         // Init config files\n-        Config.load(configPath, getResource(\"config.yml\"));\n-        Locale.load(configPath);\n+        Config.load(getDataFolder(), getResource(\"config.yml\"));\n+        Locale.load(getDataFolder());\n \n-        this.mojangAPI = new MojangAPI(this.srLogger);\n-        this.mineSkinAPI = new MineSkinAPI(this.srLogger);\n+        mojangAPI = new MojangAPI(srLogger);\n+        mineSkinAPI = new MineSkinAPI(srLogger);\n \n-        this.skinStorage.setMojangAPI(mojangAPI);\n+        skinStorage.setMojangAPI(mojangAPI);\n         // Init storage\n-        if (!this.initStorage())\n+        if (!initStorage())\n             return;\n \n-        this.mojangAPI.setSkinStorage(this.skinStorage);\n-        this.mineSkinAPI.setSkinStorage(this.skinStorage);\n+        mojangAPI.setSkinStorage(skinStorage);\n+        mineSkinAPI.setSkinStorage(skinStorage);\n \n         // Init commands\n         initCommands();\n@@ -270,21 +269,11 @@ public void onEnable() {\n         Bukkit.getPluginManager().registerEvents(new PlayerJoin(this), this);\n \n         // Init API\n-        this.skinsRestorerBukkitAPI = new SkinsRestorerBukkitAPI(this, this.mojangAPI, this.skinStorage);\n+        skinsRestorerBukkitAPI = new SkinsRestorerBukkitAPI(mojangAPI, skinStorage);\n \n         // Run connection check\n         if (!bungeeEnabled) {\n-            ServiceChecker checker = new ServiceChecker();\n-            checker.setMojangAPI(this.mojangAPI);\n-            checker.checkServices();\n-            ServiceChecker.ServiceCheckResponse response = checker.getResponse();\n-\n-            if (response.getWorkingUUID() == 0 || response.getWorkingProfile() == 0) {\n-                console.sendMessage(\"§c[§4Critical§c] ------------------[§2SkinsRestorer §cis §c§l§nOFFLINE§c] --------------------------------- \");\n-                console.sendMessage(\"§c[§4Critical§c] §cPlugin currently can't fetch new skins due to blocked connection!\");\n-                console.sendMessage(\"§c[§4Critical§c] §cSee http://skinsrestorer.net/firewall for steps to resolve your issue!\");\n-                console.sendMessage(\"§c[§4Critical§c] ------------------------------------------------------------------------------------------- \");\n-            }\n+            SharedMethods.runServiceCheck(mojangAPI, srLogger);\n         }\n     }\n \n@@ -350,12 +339,12 @@ private void initCommands() {\n         CommandReplacements.descriptions.forEach((k, v) -> manager.getCommandReplacements().addReplacement(k, v));\n         CommandReplacements.syntax.forEach((k, v) -> manager.getCommandReplacements().addReplacement(k, v));\n \n-        new CommandPropertiesManager(manager, configPath, getResource(\"command-messages.properties\"));\n+        new CommandPropertiesManager(manager, getDataFolder(), getResource(\"command-messages.properties\"));\n \n         SharedMethods.allowIllegalACFNames();\n \n-        this.skinCommand = new SkinCommand(this);\n-        manager.registerCommand(this.skinCommand);\n+        skinCommand = new SkinCommand(this);\n+        manager.registerCommand(skinCommand);\n         manager.registerCommand(new SrCommand(this));\n         manager.registerCommand(new GUICommand(this));\n     }\n@@ -376,19 +365,19 @@ private boolean initStorage() {\n                 mysql.openConnection();\n                 mysql.createTable();\n \n-                this.skinStorage.setMysql(mysql);\n+                skinStorage.setMysql(mysql);\n             } catch (Exception e) {\n-                console.sendMessage(\"§e[§2SkinsRestorer§e] §cCan't connect to MySQL! Disabling SkinsRestorer.\");\n+                srLogger.log(\"§cCan't connect to MySQL! Disabling SkinsRestorer.\");\n                 e.printStackTrace();\n                 Bukkit.getPluginManager().disablePlugin(this);\n                 return false;\n             }\n         } else {\n-            this.skinStorage.loadFolders(getDataFolder());\n+            skinStorage.loadFolders(getDataFolder());\n         }\n \n         // Preload default skins\n-        Bukkit.getScheduler().runTaskAsynchronously(this, this.skinStorage::preloadDefaultSkins);\n+        Bukkit.getScheduler().runTaskAsynchronously(this, skinStorage::preloadDefaultSkins);\n         return true;\n     }\n \n@@ -409,14 +398,14 @@ private void checkBungeeMode() {\n             }\n \n             //override bungeeModeEnabled\n-            File bungeeModeEnabled = new File(\"plugins\" + File.separator + \"SkinsRestorer\" + File.separator + \"enableBungeeMode\");\n+            File bungeeModeEnabled = new File(getDataFolder(), \"enableBungeeMode\");\n             if (!bungeeEnabled && bungeeModeEnabled.exists()) {\n                 bungeeEnabled = true;\n                 return;\n             }\n \n             //override bungeeModeDisabled\n-            File bungeeModeDisabled = new File(\"plugins\" + File.separator + \"SkinsRestorer\" + File.separator + \"disableBungeeMode\");\n+            File bungeeModeDisabled = new File(getDataFolder(),  \"disableBungeeMode\");\n             if (bungeeModeDisabled.exists()) {\n                 bungeeEnabled = false;\n                 return;\n@@ -453,14 +442,13 @@ private void checkBungeeMode() {\n         }\n \n         if (bungeeEnabled) {\n-            this.srLogger.logAlways(\"-------------------------/Warning\\\\-------------------------\");\n-            this.srLogger.logAlways(\"This plugin is running in Bungee mode!\");\n-            this.srLogger.logAlways(\"You have to do all configuration at config file\");\n-            this.srLogger.logAlways(\"inside your Bungeecord server.\");\n-            this.srLogger.logAlways(\"(Bungeecord-Server/plugins/SkinsRestorer/).\");\n-            this.srLogger.logAlways(\"-------------------------\\\\Warning/-------------------------\");\n+            srLogger.log(\"-------------------------/Warning\\\\-------------------------\");\n+            srLogger.log(\"This plugin is running in Bungee mode!\");\n+            srLogger.log(\"You have to do all configuration at config file\");\n+            srLogger.log(\"inside your Bungeecord server.\");\n+            srLogger.log(\"(Bungeecord-Server/plugins/SkinsRestorer/).\");\n+            srLogger.log(\"-------------------------\\\\Warning/-------------------------\");\n         }\n-\n     }\n \n     private void checkUpdate(boolean bungeeMode) {\n@@ -482,6 +470,7 @@ public void updateAvailable(String newVersion, String downloadUrl, boolean hasDi\n                         failReason = updateDownloader.getFailReason().toString();\n                     }\n                 }\n+\n                 updateChecker.getUpdateAvailableMessages(newVersion, downloadUrl, hasDirectDownload, getVersion(), bungeeMode, true, failReason).forEach(msg ->\n                         console.sendMessage(msg));\n             }\n@@ -496,25 +485,19 @@ public void upToDate() {\n         }));\n     }\n \n-    private static class SkinsRestorerBukkitAPI extends SkinsRestorerAPI {\n-        private final SkinsRestorer plugin;\n-\n-        public SkinsRestorerBukkitAPI(SkinsRestorer plugin, MojangAPI mojangAPI, SkinStorage skinStorage) {\n-            super(mojangAPI, skinStorage, null);\n-            this.plugin = plugin;\n+    private class SkinsRestorerBukkitAPI extends SkinsRestorerAPI {\n+        public SkinsRestorerBukkitAPI(MojangAPI mojangAPI, SkinStorage skinStorage) {\n+            super(mojangAPI, skinStorage);\n         }\n \n-        // Todo: We need to refactor applySkin through all platforms to behave the same!\n-        @Beta\n         @Override\n         public void applySkin(PlayerWrapper player, Object props) {\n-            plugin.getFactory().applySkin(player.get(Player.class), props);\n+            getFactory().applySkin(player.get(Player.class), props);\n         }\n \n-        @Beta\n         @Override\n         public void applySkin(PlayerWrapper player) {\n-            plugin.getFactory().applySkin(player.get(Player.class), this.getSkinData(this.getSkinName(player.get(Player.class).getName())));\n+            getFactory().applySkin(player.get(Player.class), getSkinData(getSkinName(player.get(Player.class).getName())));\n         }\n     }\n }"
  },
  {
    "sha": "99fdc2d6ee233cf3bdaf16c87179d1b866897e38",
    "filename": "src/main/java/net/skinsrestorer/bukkit/commands/GUICommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/commands/GUICommand.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/commands/GUICommand.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/commands/GUICommand.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -42,7 +42,7 @@\n     private final SkinsGUI skinsGUI;\n \n     public GUICommand(SkinsRestorer plugin) {\n-        this.skinsGUI = new SkinsGUI(plugin);\n+        skinsGUI = new SkinsGUI(plugin);\n     }\n \n     //todo is help even needed for /skins?\n@@ -63,7 +63,7 @@ public void onDefault(Player p) {\n             p.sendMessage(Locale.SKINSMENU_OPEN);\n \n             SkinsGUI.getMenus().put(p.getName(), 0);\n-            Inventory inventory = this.skinsGUI.getGUI(p, 0);\n+            Inventory inventory = skinsGUI.getGUI(p, 0);\n             Bukkit.getScheduler().scheduleSyncDelayedTask(SkinsRestorer.getInstance(), () -> p.openInventory(inventory));\n         });\n     }"
  },
  {
    "sha": "1b1c989baf46f00a1326aa3bf1114d3e79e4d792",
    "filename": "src/main/java/net/skinsrestorer/bukkit/commands/SkinCommand.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/commands/SkinCommand.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/commands/SkinCommand.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/commands/SkinCommand.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -33,7 +33,7 @@\n import net.skinsrestorer.shared.storage.CooldownStorage;\n import net.skinsrestorer.shared.storage.Locale;\n import net.skinsrestorer.shared.utils.C;\n-import net.skinsrestorer.shared.utils.SRLogger;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n import org.bukkit.Bukkit;\n import org.bukkit.command.CommandSender;\n import org.bukkit.entity.Player;\n@@ -254,7 +254,7 @@ private boolean setSkin(CommandSender sender, Player p, String skin, boolean sav\n                 //todo getOrCreateSkinForPlayer is nested and on different places around bungee/sponge/velocity\n                 plugin.getFactory().applySkin(p, plugin.getSkinStorage().getOrCreateSkinForPlayer(skin, false));\n                 if (!Locale.SKIN_CHANGE_SUCCESS.isEmpty() && !Locale.SKIN_CHANGE_SUCCESS.equals(Locale.PREFIX))\n-                p.sendMessage(Locale.SKIN_CHANGE_SUCCESS);\n+                    p.sendMessage(Locale.SKIN_CHANGE_SUCCESS);\n \n                 return true;\n             } catch (SkinRequestException e) {\n@@ -293,12 +293,12 @@ private boolean setSkin(CommandSender sender, Player p, String skin, boolean sav\n                 plugin.getSkinStorage().setPlayerSkin(pName, skinentry); // set player to \"whitespaced\" name then reload skin\n                 SkinsRestorer.getInstance().getFactory().applySkin(p, plugin.getSkinStorage().getSkinData(skinentry));\n                 if (!Locale.SKIN_CHANGE_SUCCESS.isEmpty() && !Locale.SKIN_CHANGE_SUCCESS.equals(Locale.PREFIX))\n-                p.sendMessage(Locale.SKIN_CHANGE_SUCCESS);\n+                    p.sendMessage(Locale.SKIN_CHANGE_SUCCESS);\n                 return true;\n             } catch (SkinRequestException e) {\n                 sender.sendMessage(e.getMessage());\n             } catch (Exception e) {\n-                log.log(\"[ERROR] Exception: could not generate skin url:\" + skin + \"\\nReason= \" + e.getMessage());\n+                log.debug(\"[ERROR] Exception: could not generate skin url:\" + skin + \"\\nReason= \" + e.getMessage());\n                 sender.sendMessage(Locale.ERROR_INVALID_URLSKIN);\n             }\n         }"
  },
  {
    "sha": "c95e7982ad0305ce8d09dfc32c883e5496ec14ad",
    "filename": "src/main/java/net/skinsrestorer/bukkit/commands/SrCommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/commands/SrCommand.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/commands/SrCommand.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/commands/SrCommand.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -63,8 +63,8 @@ public void onHelp(CommandSender sender, CommandHelp help) {\n     @CommandPermission(\"%srReload\")\n     @Description(\"%helpSrReload\")\n     public void onReload(CommandSender sender) {\n-        Locale.load(SkinsRestorer.getInstance().getConfigPath());\n-        Config.load(SkinsRestorer.getInstance().getConfigPath(), SkinsRestorer.getInstance().getResource(\"config.yml\"));\n+        Locale.load(plugin.getConfigPath());\n+        Config.load(plugin.getConfigPath(), SkinsRestorer.getInstance().getResource(\"config.yml\"));\n \n         sender.sendMessage(Locale.RELOAD);\n     }"
  },
  {
    "sha": "79266f487bf18fef6ac4071bd82db9f5696b1998",
    "filename": "src/main/java/net/skinsrestorer/bukkit/listener/PlayerJoin.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/listener/PlayerJoin.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/listener/PlayerJoin.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/listener/PlayerJoin.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -26,7 +26,7 @@\n import net.skinsrestorer.shared.storage.Config;\n import net.skinsrestorer.shared.storage.SkinStorage;\n import net.skinsrestorer.shared.utils.C;\n-import net.skinsrestorer.shared.utils.SRLogger;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n import org.bukkit.entity.Player;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;"
  },
  {
    "sha": "134d8932dc5c8163f541d3fc9adebf00b3cf76c4",
    "filename": "src/main/java/net/skinsrestorer/bukkit/skinfactory/OldSkinRefresher.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/skinfactory/OldSkinRefresher.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/skinfactory/OldSkinRefresher.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/skinfactory/OldSkinRefresher.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -24,7 +24,7 @@\n import com.google.common.hash.Hashing;\n import net.skinsrestorer.bukkit.SkinsRestorer;\n import net.skinsrestorer.shared.utils.ReflectionUtil;\n-import net.skinsrestorer.shared.utils.SRLogger;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n import nl.matsv.viabackwards.protocol.protocol1_15_2to1_16.Protocol1_15_2To1_16;\n import org.bukkit.Bukkit;\n import org.bukkit.Location;\n@@ -100,7 +100,7 @@\n                 }\n             });\n \n-            log.logAlways(\"[SkinsRestorer] Using SpigotSkinRefresher\");\n+            log.log(\"[SkinsRestorer] Using SpigotSkinRefresher\");\n         } catch (Exception ignored) {\n         }\n     }"
  },
  {
    "sha": "b364fbdf2c09d92853c4d0108068ea939fc400a6",
    "filename": "src/main/java/net/skinsrestorer/bukkit/skinfactory/UniversalSkinFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/skinfactory/UniversalSkinFactory.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/skinfactory/UniversalSkinFactory.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/skinfactory/UniversalSkinFactory.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -46,7 +46,7 @@\n         // Giving warning when using java 9+ regarding illegal reflection access\n         final String version = System.getProperty(\"java.version\");\n         if (!version.startsWith(\"1.\"))\n-             System.out.println(\"[SkinsRestorer] [!] WARNING [!] \\n[SkinsRestorer] Below message about \\\"Illegal reflective access\\\" can be IGNORED, we will fix this in a later release!\");\n+            System.out.println(\"[SkinsRestorer] [!] WARNING [!] \\n[SkinsRestorer] Below message about \\\"Illegal reflective access\\\" can be IGNORED, we will fix this in a later release!\");\n \n         // force OldSkinRefresher for unsupported plugins (ViaVersion & other ProtocolHack).\n         // todo: reuse code"
  },
  {
    "sha": "f2f305809fbf0020047a158f6c8d225ff3cf68ff",
    "filename": "src/main/java/net/skinsrestorer/bukkit/utils/UpdateDownloader.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/utils/UpdateDownloader.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bukkit/utils/UpdateDownloader.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bukkit/utils/UpdateDownloader.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -23,6 +23,7 @@\n \n import lombok.Getter;\n import net.skinsrestorer.bukkit.SkinsRestorer;\n+import net.skinsrestorer.shared.utils.log.SRLogLevel;\n import org.bukkit.Bukkit;\n import org.bukkit.plugin.java.JavaPlugin;\n import org.inventivetalent.update.spiget.ResourceInfo;\n@@ -34,7 +35,6 @@\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.Properties;\n-import java.util.logging.Level;\n \n /**\n  * All credits go to https://github.com/InventivetalentDev/SpigetUpdater\n@@ -88,16 +88,16 @@ public boolean downloadUpdate() {\n             return false;\n         }\n \n-        plugin.getSrLogger().logAlways(\"[SpigetUpdate] Downloading update...\");\n+        plugin.getSrLogger().log(\"[SpigetUpdate] Downloading update...\");\n         Bukkit.getScheduler().runTaskAsynchronously(plugin, org.inventivetalent.update.spiget.download.UpdateDownloader.downloadAsync(latestResourceInfo, updateFile, plugin.getUpdateChecker().getUserAgent(), new DownloadCallback() {\n             @Override\n             public void finished() {\n-                plugin.getSrLogger().logAlways(\"[SpigetUpdate] Update saved as \" + updateFile.getPath());\n+                plugin.getSrLogger().log(\"[SpigetUpdate] Update saved as \" + updateFile.getPath());\n             }\n \n             @Override\n             public void error(Exception exception) {\n-                plugin.getSrLogger().logAlways(Level.WARNING, \"[SpigetUpdate] Could not download update\", exception);\n+                plugin.getSrLogger().log(SRLogLevel.WARNING, \"[SpigetUpdate] Could not download update\", exception);\n             }\n         }));\n "
  },
  {
    "sha": "bed08df6bee5bd4e543580c4a9e1ca292504a7b7",
    "filename": "src/main/java/net/skinsrestorer/bungee/SkinsRestorer.java",
    "status": "modified",
    "additions": 48,
    "deletions": 45,
    "changes": 93,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/SkinsRestorer.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/SkinsRestorer.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bungee/SkinsRestorer.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -29,36 +29,35 @@\n import net.md_5.bungee.api.ProxyServer;\n import net.md_5.bungee.api.chat.TextComponent;\n import net.md_5.bungee.api.plugin.Plugin;\n+import net.skinsrestorer.api.PlayerWrapper;\n import net.skinsrestorer.api.SkinsRestorerAPI;\n import net.skinsrestorer.bungee.commands.GUICommand;\n import net.skinsrestorer.bungee.commands.SkinCommand;\n import net.skinsrestorer.bungee.commands.SrCommand;\n import net.skinsrestorer.bungee.listeners.LoginListener;\n import net.skinsrestorer.bungee.listeners.PluginMessageListener;\n import net.skinsrestorer.bungee.utils.SkinApplierBungee;\n-import net.skinsrestorer.shared.interfaces.SRApplier;\n-import net.skinsrestorer.shared.interfaces.SRPlugin;\n+import net.skinsrestorer.shared.interfaces.ISRPlugin;\n import net.skinsrestorer.shared.storage.Config;\n import net.skinsrestorer.shared.storage.Locale;\n import net.skinsrestorer.shared.storage.MySQL;\n import net.skinsrestorer.shared.storage.SkinStorage;\n import net.skinsrestorer.shared.update.UpdateChecker;\n import net.skinsrestorer.shared.update.UpdateCheckerGitHub;\n import net.skinsrestorer.shared.utils.*;\n+import net.skinsrestorer.shared.utils.log.LoggerImpl;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n import org.bstats.bungeecord.Metrics;\n import org.bstats.charts.SingleLineChart;\n import org.inventivetalent.update.spiget.UpdateCallback;\n \n import java.io.File;\n import java.util.concurrent.TimeUnit;\n-import java.util.logging.Level;\n \n @SuppressWarnings(\"Duplicates\")\n-public class SkinsRestorer extends Plugin implements SRPlugin {\n+public class SkinsRestorer extends Plugin implements ISRPlugin {\n     @Getter\n-    private static SkinsRestorer instance;\n-    @Getter\n-    private final String configPath = getDataFolder().getPath();\n+    private final File configPath = getDataFolder();\n     @Getter\n     private boolean multiBungee;\n     @Getter\n@@ -88,10 +87,9 @@ public String getVersion() {\n \n     @Override\n     public void onEnable() {\n-        srLogger = new SRLogger(getDataFolder());\n-        instance = this;\n+        srLogger = new SRLogger(getDataFolder(), new LoggerImpl(getProxy().getLogger()), true);\n         console = getProxy().getConsole();\n-        File updaterDisabled = new File(this.configPath, \"noupdate.txt\");\n+        File updaterDisabled = new File(getDataFolder(), \"noupdate.txt\");\n \n         int pluginId = 1686; // SkinsRestorer's ID on bStats, for Bungeecord\n         Metrics metrics = new Metrics(this, pluginId);\n@@ -101,65 +99,55 @@ public void onEnable() {\n         metrics.addCustomChart(new SingleLineChart(\"backup_calls\", MetricsCounter::collectBackupCalls));\n \n         if (!updaterDisabled.exists()) {\n-            this.updateChecker = new UpdateCheckerGitHub(2124, this.getDescription().getVersion(), this.srLogger, \"SkinsRestorerUpdater/BungeeCord\");\n-            this.checkUpdate(true);\n+            updateChecker = new UpdateCheckerGitHub(2124, getDescription().getVersion(), srLogger, \"SkinsRestorerUpdater/BungeeCord\");\n+            checkUpdate(true);\n \n-            this.getProxy().getScheduler().schedule(this, this::checkUpdate, 10, 10, TimeUnit.MINUTES);\n+            getProxy().getScheduler().schedule(this, this::checkUpdate, 10, 10, TimeUnit.MINUTES);\n         } else {\n-            srLogger.logAlways(Level.INFO, \"Updater Disabled\");\n+            srLogger.log(\"Updater Disabled\");\n         }\n \n-        this.skinStorage = new SkinStorage(SkinStorage.Platform.BUNGEECORD);\n+        skinStorage = new SkinStorage(srLogger, SkinStorage.Platform.BUNGEECORD);\n \n         // Init config files\n-        Config.load(configPath, getResourceAsStream(\"config.yml\"));\n-        Locale.load(configPath);\n+        Config.load(getDataFolder(), getResourceAsStream(\"config.yml\"));\n+        Locale.load(getDataFolder());\n \n-        this.mojangAPI = new MojangAPI(this.srLogger);\n-        this.mineSkinAPI = new MineSkinAPI(this.srLogger);\n+        mojangAPI = new MojangAPI(srLogger);\n+        mineSkinAPI = new MineSkinAPI(srLogger);\n \n-        this.skinStorage.setMojangAPI(mojangAPI);\n+        skinStorage.setMojangAPI(mojangAPI);\n         // Init storage\n-        if (!this.initStorage())\n+        if (!initStorage())\n             return;\n \n-        this.mojangAPI.setSkinStorage(this.skinStorage);\n-        this.mineSkinAPI.setSkinStorage(this.skinStorage);\n+        mojangAPI.setSkinStorage(skinStorage);\n+        mineSkinAPI.setSkinStorage(skinStorage);\n \n         // Init listener\n-        getProxy().getPluginManager().registerListener(this, new LoginListener(this, this.srLogger));\n+        getProxy().getPluginManager().registerListener(this, new LoginListener(this, srLogger));\n \n         // Init commands\n         initCommands();\n \n         getProxy().registerChannel(\"sr:skinchange\");\n \n         // Init SkinApplier\n-        this.skinApplierBungee = new SkinApplierBungee(this);\n+        skinApplierBungee = new SkinApplierBungee(this);\n         SkinApplierBungee.init();\n \n         // Init message channel\n-        this.getProxy().registerChannel(\"sr:messagechannel\");\n-        this.pluginMessageListener = new PluginMessageListener(this);\n-        this.getProxy().getPluginManager().registerListener(this, this.pluginMessageListener);\n+        getProxy().registerChannel(\"sr:messagechannel\");\n+        pluginMessageListener = new PluginMessageListener(this);\n+        getProxy().getPluginManager().registerListener(this, pluginMessageListener);\n \n         multiBungee = Config.MULTIBUNGEE_ENABLED || ProxyServer.getInstance().getPluginManager().getPlugin(\"RedisBungee\") != null;\n \n         // Init API\n-        this.skinsRestorerBungeeAPI = new SkinsRestorerAPI(this.mojangAPI, this.skinStorage, this);\n+        skinsRestorerBungeeAPI = new SkinsRestorerBungeeAPI(mojangAPI, skinStorage);\n \n         // Run connection check\n-        ServiceChecker checker = new ServiceChecker();\n-        checker.setMojangAPI(this.mojangAPI);\n-        checker.checkServices();\n-        ServiceChecker.ServiceCheckResponse response = checker.getResponse();\n-\n-        if (response.getWorkingUUID() == 0 || response.getWorkingProfile() == 0) {\n-            console.sendMessage(TextComponent.fromLegacyText(\"§c[§4Critical§c] ------------------[§2SkinsRestorer §cis §c§l§nOFFLINE§c] --------------------------------- \"));\n-            console.sendMessage(TextComponent.fromLegacyText(\"§c[§4Critical§c] §cPlugin currently can't fetch new skins due to blocked connection!\"));\n-            console.sendMessage(TextComponent.fromLegacyText(\"§c[§4Critical§c] §cSee http://skinsrestorer.net/firewall for steps to resolve your issue!\"));\n-            console.sendMessage(TextComponent.fromLegacyText(\"§c[§4Critical§c] ------------------------------------------------------------------------------------------- \"));\n-        }\n+        SharedMethods.runServiceCheck(mojangAPI, srLogger);\n     }\n \n     @SuppressWarnings({\"deprecation\"})\n@@ -209,7 +197,7 @@ private boolean initStorage() {\n \n                 this.skinStorage.setMysql(mysql);\n             } catch (Exception e) {\n-                console.sendMessage(TextComponent.fromLegacyText(\"§e[§2SkinsRestorer§e] §cCan't connect to MySQL! Disabling SkinsRestorer.\"));\n+                srLogger.log(\"§cCan't connect to MySQL! Disabling SkinsRestorer.\");\n                 getProxy().getPluginManager().unregisterListeners(this);\n                 getProxy().getPluginManager().unregisterCommands(this);\n                 return false;\n@@ -219,7 +207,7 @@ private boolean initStorage() {\n         }\n \n         // Preload default skins\n-        ProxyServer.getInstance().getScheduler().runAsync(SkinsRestorer.getInstance(), this.skinStorage::preloadDefaultSkins);\n+        ProxyServer.getInstance().getScheduler().runAsync(this, this.skinStorage::preloadDefaultSkins);\n         return true;\n     }\n \n@@ -247,8 +235,23 @@ public void upToDate() {\n         }));\n     }\n \n-    @Override\n-    public SRApplier getApplier() {\n-        return skinApplierBungee;\n+    private class SkinsRestorerBungeeAPI extends SkinsRestorerAPI {\n+        public SkinsRestorerBungeeAPI(MojangAPI mojangAPI, SkinStorage skinStorage) {\n+            super(mojangAPI, skinStorage);\n+        }\n+\n+        @Override\n+        public void applySkin(PlayerWrapper player, Object props) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void applySkin(PlayerWrapper player) {\n+            try {\n+                skinApplierBungee.applySkin(player, this);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n     }\n }"
  },
  {
    "sha": "0fe9b000bce42ce6bff86e594ecd22a76f2168ad",
    "filename": "src/main/java/net/skinsrestorer/bungee/commands/GUICommand.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/commands/GUICommand.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/commands/GUICommand.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bungee/commands/GUICommand.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -53,7 +53,7 @@ public static void onHelp(CommandSender sender, CommandHelp help) {\n     @CommandPermission(\"%skins\")\n     public void onDefault(ProxiedPlayer p) {\n         if (!p.hasPermission(\"skinsrestorer.bypasscooldown\") && CooldownStorage.hasCooldown(p.getName())) {\n-            p.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_COOLDOWN.replace(\"%s\", \"\" + CooldownStorage.getCooldown(p.getName()))));\n+            p.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_COOLDOWN.replace(\"%s\", String.valueOf(CooldownStorage.getCooldown(p.getName())))));\n             return;\n         }\n         p.sendMessage(TextComponent.fromLegacyText(Locale.SKINSMENU_OPEN));"
  },
  {
    "sha": "09826ee7a040a7782069a873764ca69613323277",
    "filename": "src/main/java/net/skinsrestorer/bungee/commands/SkinCommand.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/commands/SkinCommand.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/commands/SkinCommand.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bungee/commands/SkinCommand.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -38,7 +38,7 @@\n import net.skinsrestorer.shared.storage.CooldownStorage;\n import net.skinsrestorer.shared.storage.Locale;\n import net.skinsrestorer.shared.utils.C;\n-import net.skinsrestorer.shared.utils.SRLogger;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n \n import java.util.concurrent.TimeUnit;\n \n@@ -56,7 +56,7 @@ public SkinCommand(SkinsRestorer plugin) {\n     @Default\n     @SuppressWarnings({\"deprecation\"})\n     public void onDefault(CommandSender sender) {\n-        this.onHelp(sender, this.getCurrentCommandManager().generateCommandHelp());\n+        onHelp(sender, getCurrentCommandManager().generateCommandHelp());\n     }\n \n     @Default\n@@ -65,7 +65,7 @@ public void onDefault(CommandSender sender) {\n     @Syntax(\"%SyntaxDefaultCommand\")\n     @SuppressWarnings({\"unused\"})\n     public void onSkinSetShort(ProxiedPlayer p, @Single String skin) {\n-        this.onSkinSetOther(p, new OnlinePlayer(p), skin);\n+        onSkinSetOther(p, new OnlinePlayer(p), skin);\n     }\n \n     @HelpCommand\n@@ -82,7 +82,7 @@ public void onHelp(CommandSender sender, CommandHelp help) {\n     @Description(\"%helpSkinClear\")\n     @SuppressWarnings({\"unused\"})\n     public void onSkinClear(ProxiedPlayer p) {\n-        this.onSkinClearOther(p, new OnlinePlayer(p));\n+        onSkinClearOther(p, new OnlinePlayer(p));\n     }\n \n     @Subcommand(\"clear\")\n@@ -91,7 +91,7 @@ public void onSkinClear(ProxiedPlayer p) {\n     @Syntax(\"%SyntaxSkinClearOther\")\n     @Description(\"%helpSkinClearOther\")\n     public void onSkinClearOther(CommandSender sender, OnlinePlayer target) {\n-        ProxyServer.getInstance().getScheduler().runAsync(SkinsRestorer.getInstance(), () -> {\n+        ProxyServer.getInstance().getScheduler().runAsync(plugin, () -> {\n             if (!sender.hasPermission(\"skinsrestorer.bypasscooldown\") && CooldownStorage.hasCooldown(sender.getName())) {\n                 sender.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_COOLDOWN.replace(\"%s\", \"\" + CooldownStorage.getCooldown(sender.getName()))));\n                 return;\n@@ -104,7 +104,7 @@ public void onSkinClearOther(CommandSender sender, OnlinePlayer target) {\n             // remove users defined skin from database\n             plugin.getSkinStorage().removePlayerSkin(pName);\n \n-            if (this.setSkin(sender, p, skin, false, true)) {\n+            if (setSkin(sender, p, skin, false, true)) {\n                 if (sender == p)\n                     sender.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_CLEAR_SUCCESS));\n                 else\n@@ -127,7 +127,7 @@ public void onSkinUpdate(ProxiedPlayer p) {\n     @Description(\"%helpSkinUpdateOther\")\n     @Syntax(\"%SyntaxSkinUpdateOther\")\n     public void onSkinUpdateOther(CommandSender sender, OnlinePlayer target) {\n-        ProxyServer.getInstance().getScheduler().runAsync(SkinsRestorer.getInstance(), () -> {\n+        ProxyServer.getInstance().getScheduler().runAsync(plugin, () -> {\n             if (!sender.hasPermission(\"skinsrestorer.bypasscooldown\") && CooldownStorage.hasCooldown(sender.getName())) {\n                 sender.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_COOLDOWN.replace(\"%s\", \"\" + CooldownStorage.getCooldown(sender.getName()))));\n                 return;\n@@ -185,7 +185,7 @@ public void onSkinSet(ProxiedPlayer p, String[] skin) {\n     @Description(\"%helpSkinSetOther\")\n     @Syntax(\"%SyntaxSkinSetOther\")\n     public void onSkinSetOther(CommandSender sender, OnlinePlayer target, String skin) {\n-        ProxyServer.getInstance().getScheduler().runAsync(SkinsRestorer.getInstance(), () -> {\n+        ProxyServer.getInstance().getScheduler().runAsync(plugin, () -> {\n             final ProxiedPlayer p = target.getPlayer();\n             if (Config.PER_SKIN_PERMISSIONS && !sender.hasPermission(\"skinsrestorer.skin.\" + skin)) {\n                 if (!sender.hasPermission(\"skinsrestorer.ownskin\") && !sender.getName().equalsIgnoreCase(p.getName()) || !skin.equalsIgnoreCase(sender.getName())) {\n@@ -259,7 +259,7 @@ private boolean setSkin(CommandSender sender, ProxiedPlayer p, String skin, bool\n                 }\n \n                 if (!Locale.SKIN_CHANGE_SUCCESS.isEmpty() && !Locale.SKIN_CHANGE_SUCCESS.equals(Locale.PREFIX))\n-                p.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_CHANGE_SUCCESS)); //todo: should this not be sender? -> hidden skin update?? (maybe when p has no perms)\n+                    p.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_CHANGE_SUCCESS)); //todo: should this not be sender? -> hidden skin update?? (maybe when p has no perms)\n                 return true;\n             } catch (SkinRequestException e) {\n                 if (clear) {\n@@ -305,13 +305,13 @@ private boolean setSkin(CommandSender sender, ProxiedPlayer p, String skin, bool\n                 plugin.getSkinStorage().setPlayerSkin(pName, skinentry); // set player to \"whitespaced\" name then reload skin\n                 plugin.getSkinApplierBungee().applySkin(new PlayerWrapper(p), plugin.getSkinsRestorerBungeeAPI());\n                 if (!Locale.SKIN_CHANGE_SUCCESS.isEmpty() && !Locale.SKIN_CHANGE_SUCCESS.equals(Locale.PREFIX))\n-                p.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_CHANGE_SUCCESS));\n+                    p.sendMessage(TextComponent.fromLegacyText(Locale.SKIN_CHANGE_SUCCESS));\n \n                 return true;\n             } catch (SkinRequestException e) {\n                 sender.sendMessage(TextComponent.fromLegacyText(e.getMessage()));\n             } catch (Exception e) {\n-                log.log(\"[ERROR] could not generate skin url:\" + skin + \" stacktrace:\");\n+                log.debug(\"[ERROR] could not generate skin url:\" + skin + \" stacktrace:\");\n                 if (Config.DEBUG)\n                     e.printStackTrace();\n                 sender.sendMessage(TextComponent.fromLegacyText(Locale.ERROR_INVALID_URLSKIN));\n@@ -331,7 +331,7 @@ private void rollback(ProxiedPlayer p, String oldSkinName, boolean save) {\n     private void sendHelp(CommandSender sender) {\n         if (!Locale.SR_LINE.isEmpty())\n             sender.sendMessage(TextComponent.fromLegacyText(Locale.SR_LINE));\n-        sender.sendMessage(TextComponent.fromLegacyText(Locale.HELP_PLAYER.replace(\"%ver%\", SkinsRestorer.getInstance().getVersion())));\n+        sender.sendMessage(TextComponent.fromLegacyText(Locale.HELP_PLAYER.replace(\"%ver%\", plugin.getVersion())));\n         if (!Locale.SR_LINE.isEmpty())\n             sender.sendMessage(TextComponent.fromLegacyText(Locale.SR_LINE));\n     }"
  },
  {
    "sha": "40ce808e70f30fd4a8a09962064ce94676a26802",
    "filename": "src/main/java/net/skinsrestorer/bungee/commands/SrCommand.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/commands/SrCommand.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/commands/SrCommand.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bungee/commands/SrCommand.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -64,8 +64,8 @@ public void onHelp(CommandSender sender, CommandHelp help) {\n     @CommandPermission(\"%srReload\")\n     @Description(\"%helpSrReload\")\n     public void onReload(CommandSender sender) {\n-        Locale.load(SkinsRestorer.getInstance().getConfigPath());\n-        Config.load(SkinsRestorer.getInstance().getConfigPath(), SkinsRestorer.getInstance().getResourceAsStream(\"config.yml\"));\n+        Locale.load(plugin.getConfigPath());\n+        Config.load(plugin.getConfigPath(), plugin.getResourceAsStream(\"config.yml\"));\n         sender.sendMessage(TextComponent.fromLegacyText(Locale.RELOAD));\n     }\n \n@@ -76,7 +76,7 @@ public void onStatus(CommandSender sender) {\n         sender.sendMessage(TextComponent.fromLegacyText(\"§3----------------------------------------------\"));\n         sender.sendMessage(TextComponent.fromLegacyText(\"§7Checking needed services for SR to work properly...\"));\n \n-        ProxyServer.getInstance().getScheduler().runAsync(SkinsRestorer.getInstance(), () -> {\n+        ProxyServer.getInstance().getScheduler().runAsync(plugin, () -> {\n             ServiceChecker checker = new ServiceChecker();\n             checker.setMojangAPI(plugin.getMojangAPI());\n             checker.checkServices();\n@@ -166,7 +166,7 @@ public void onProps(CommandSender sender, OnlinePlayer target) {\n     @Description(\"%helpSrApplySkin\")\n     @Syntax(\" <target>\")\n     public void onApplySkin(CommandSender sender, OnlinePlayer target) {\n-        ProxyServer.getInstance().getScheduler().runAsync(SkinsRestorer.getInstance(), () -> {\n+        ProxyServer.getInstance().getScheduler().runAsync(plugin, () -> {\n             try {\n                 final ProxiedPlayer p = target.getPlayer();\n                 final String name = p.getName();\n@@ -186,7 +186,7 @@ public void onApplySkin(CommandSender sender, OnlinePlayer target) {\n     @Description(\"%helpSrCreateCustom\")\n     @Syntax(\" <name> <skinurl>\")\n     public void onCreateCustom(CommandSender sender, String name, String skinUrl) {\n-        ProxyServer.getInstance().getScheduler().runAsync(SkinsRestorer.getInstance(), () -> {\n+        ProxyServer.getInstance().getScheduler().runAsync(plugin, () -> {\n             try {\n                 if (C.validUrl(skinUrl)) {\n                     plugin.getSkinStorage().setSkinData(name, plugin.getMineSkinAPI().genSkin(skinUrl),"
  },
  {
    "sha": "dd931b1a4a915992331012124d12f47cf30d814a",
    "filename": "src/main/java/net/skinsrestorer/bungee/listeners/LoginListener.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/listeners/LoginListener.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/listeners/LoginListener.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bungee/listeners/LoginListener.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -34,7 +34,7 @@\n import net.skinsrestorer.shared.exception.SkinRequestException;\n import net.skinsrestorer.shared.storage.Config;\n import net.skinsrestorer.shared.storage.Locale;\n-import net.skinsrestorer.shared.utils.SRLogger;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n \n public class LoginListener implements Listener {\n     private final SkinsRestorer plugin;"
  },
  {
    "sha": "9dfede492ac19560bdcb67c01cc6c787487978c0",
    "filename": "src/main/java/net/skinsrestorer/bungee/utils/SkinApplierBungee.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/utils/SkinApplierBungee.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/bungee/utils/SkinApplierBungee.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/bungee/utils/SkinApplierBungee.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -28,22 +28,22 @@\n import net.skinsrestorer.api.PlayerWrapper;\n import net.skinsrestorer.api.SkinsRestorerAPI;\n import net.skinsrestorer.bungee.SkinsRestorer;\n-import net.skinsrestorer.shared.interfaces.SRApplier;\n+import net.skinsrestorer.shared.interfaces.ISRApplier;\n import net.skinsrestorer.shared.utils.ReflectionUtil;\n-import net.skinsrestorer.shared.utils.SRLogger;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n \n import java.io.ByteArrayOutputStream;\n import java.io.DataOutputStream;\n import java.io.IOException;\n \n-public class SkinApplierBungee implements SRApplier {\n+public class SkinApplierBungee implements ISRApplier {\n     private static Class<?> loginResult;\n     private final SkinsRestorer plugin;\n     private final SRLogger log;\n \n     public SkinApplierBungee(SkinsRestorer plugin) {\n         this.plugin = plugin;\n-        this.log = plugin.getSrLogger();\n+        log = plugin.getSrLogger();\n     }\n \n     public static void init() {\n@@ -88,7 +88,7 @@ public void applySkin(final ProxiedPlayer p, final String nick, InitialHandler h\n         profile.setProperties(newProps);\n         ReflectionUtil.setObject(InitialHandler.class, handler, \"loginProfile\", profile);\n \n-        if (SkinsRestorer.getInstance().isMultiBungee()) {\n+        if (plugin.isMultiBungee()) {\n             if (p != null)\n                 sendUpdateRequest(p, textures);\n         } else {\n@@ -108,7 +108,7 @@ private void sendUpdateRequest(ProxiedPlayer p, Property textures) {\n         if (p.getServer() == null)\n             return;\n \n-        log.log(\"Sending skin update request for \" + p.getName());\n+        log.debug(\"Sending skin update request for \" + p.getName());\n \n         ByteArrayOutputStream b = new ByteArrayOutputStream();\n         DataOutputStream out = new DataOutputStream(b);"
  },
  {
    "sha": "7d69fd98ca6655077a285f4d952b1543043c4d05",
    "filename": "src/main/java/net/skinsrestorer/shared/exception/ReflectionException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/exception/ReflectionException.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/exception/ReflectionException.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/exception/ReflectionException.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -0,0 +1,7 @@\n+package net.skinsrestorer.shared.exception;\n+\n+public class ReflectionException extends Exception {\n+    public ReflectionException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "d4dda73768e62e60c85e75dd7bbf617683ecee80",
    "filename": "src/main/java/net/skinsrestorer/shared/exception/SkinRequestException.java",
    "status": "modified",
    "additions": 2,
    "deletions": 9,
    "changes": 11,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/exception/SkinRequestException.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/exception/SkinRequestException.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/exception/SkinRequestException.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -22,14 +22,7 @@\n package net.skinsrestorer.shared.exception;\n \n public class SkinRequestException extends Exception {\n-    private final String reason;\n-\n-    public SkinRequestException(String reason) {\n-        this.reason = reason;\n-    }\n-\n-    @Override\n-    public String getMessage() {\n-        return reason;\n+    public SkinRequestException(String message) {\n+        super(message);\n     }\n }"
  },
  {
    "sha": "bf16a6b4cd3bb54fc5507c48ad2882190f53b117",
    "filename": "src/main/java/net/skinsrestorer/shared/exception/UpdateException.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/exception/UpdateException.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/exception/UpdateException.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/exception/UpdateException.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -19,7 +19,7 @@\n  * <http://www.gnu.org/licenses/gpl-3.0.html>.\n  * #L%\n  */\n-package net.skinsrestorer.shared.update;\n+package net.skinsrestorer.shared.exception;\n \n public class UpdateException extends RuntimeException {\n     public UpdateException(String message) {",
    "previous_filename": "src/main/java/net/skinsrestorer/shared/update/UpdateException.java"
  },
  {
    "sha": "ec883d8854764fb119003e04de15c130a506b5f9",
    "filename": "src/main/java/net/skinsrestorer/shared/interfaces/ISRApplier.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/interfaces/ISRApplier.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/interfaces/ISRApplier.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/interfaces/ISRApplier.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -24,6 +24,6 @@\n import net.skinsrestorer.api.PlayerWrapper;\n import net.skinsrestorer.api.SkinsRestorerAPI;\n \n-public interface SRApplier {\n+public interface ISRApplier {\n     void applySkin(PlayerWrapper playerWrapper, SkinsRestorerAPI api) throws Exception;\n }",
    "previous_filename": "src/main/java/net/skinsrestorer/shared/interfaces/SRApplier.java"
  },
  {
    "sha": "7e8a7723772e90f49d41764bf4130b32c6fa2920",
    "filename": "src/main/java/net/skinsrestorer/shared/interfaces/ISRLogger.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/interfaces/ISRLogger.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/interfaces/ISRLogger.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/interfaces/ISRLogger.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * #%L\n+ * SkinsRestorer\n+ * %%\n+ * Copyright (C) 2021 SkinsRestorer\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program.  If not, see\n+ * <http://www.gnu.org/licenses/gpl-3.0.html>.\n+ * #L%\n+ */\n+package net.skinsrestorer.shared.interfaces;\n+\n+import net.skinsrestorer.shared.utils.log.SRLogLevel;\n+\n+public interface ISRLogger {\n+    void log(SRLogLevel level, String message);\n+\n+    void log(SRLogLevel level, String message, Throwable throwable);\n+}"
  },
  {
    "sha": "6212e2cd84cafa93291ef30371355dfb4bdd9df0",
    "filename": "src/main/java/net/skinsrestorer/shared/interfaces/ISRPlugin.java",
    "status": "renamed",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/interfaces/ISRPlugin.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/interfaces/ISRPlugin.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/interfaces/ISRPlugin.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -21,6 +21,8 @@\n  */\n package net.skinsrestorer.shared.interfaces;\n \n-public interface SRPlugin {\n-    SRApplier getApplier();\n+import java.io.File;\n+\n+public interface ISRPlugin {\n+    File getDataFolder();\n }",
    "previous_filename": "src/main/java/net/skinsrestorer/shared/interfaces/SRPlugin.java"
  },
  {
    "sha": "9fc73b54db7b76ecf62c44c6646634a869a634d9",
    "filename": "src/main/java/net/skinsrestorer/shared/storage/Config.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/Config.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/Config.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/storage/Config.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -68,8 +68,8 @@\n     // private static YamlConfig config = new YamlConfig(\"plugins\" + File.separator + \"SkinsRestorer\" + File.separator + \"\", \"config\", false);\n     private static YamlConfig config;\n \n-    public static void load(String path, InputStream is) {\n-        config = new YamlConfig(path + File.separator, \"config\", false);\n+    public static void load(File path, InputStream is) {\n+        config = new YamlConfig(path, \"config.yml\", false);\n         config.saveDefaultConfig(is);\n         config.reload();\n         SKINWITHOUTPERM = config.getBoolean(\"SkinWithoutPerm\", SKINWITHOUTPERM);"
  },
  {
    "sha": "30d0467f751a375b2c90445c2c77ddebc6ce4733",
    "filename": "src/main/java/net/skinsrestorer/shared/storage/Locale.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/Locale.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/Locale.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/storage/Locale.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -104,9 +104,9 @@\n     //private static YamlConfig locale = new YamlConfig(\"plugins\" + File.separator + \"SkinsRestorer\" + File.separator + \"\", \"messages\", true);\n     private static YamlConfig locale;\n \n-    public static void load(String path) {\n+    public static void load(File path) {\n         try {\n-            locale = new YamlConfig(path + File.separator, \"messages\", true);\n+            locale = new YamlConfig(path, \"messages.yml\", true);\n             locale.saveDefaultConfig();\n             locale.reload();\n \n@@ -117,7 +117,7 @@ public static void load(String path) {\n \n                 String parsed = C.c(locale.getString(f.getName(), f.get(null)));\n                 if (!Config.DISABLE_PREFIX) {\n-                    if (!Arrays.stream(IGNORE_PREFIX).anyMatch(f.getName()::contains))\n+                    if (Arrays.stream(IGNORE_PREFIX).noneMatch(f.getName()::contains))\n                         parsed = C.c(locale.getString(\"PREFIX\", null)) + parsed;\n                 }\n "
  },
  {
    "sha": "e4548e0fb107e79b2ef6804b42f14b9bc00c4641",
    "filename": "src/main/java/net/skinsrestorer/shared/storage/SkinStorage.java",
    "status": "modified",
    "additions": 35,
    "deletions": 31,
    "changes": 66,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/SkinStorage.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/SkinStorage.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/storage/SkinStorage.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -28,6 +28,8 @@\n import net.skinsrestorer.shared.utils.MojangAPI;\n import net.skinsrestorer.shared.utils.Property;\n import net.skinsrestorer.shared.utils.ReflectionUtil;\n+import net.skinsrestorer.shared.utils.log.SRLogLevel;\n+import net.skinsrestorer.shared.utils.log.SRLogger;\n \n import javax.sql.RowSet;\n import java.io.*;\n@@ -44,15 +46,17 @@\n     @SuppressWarnings(\"unused\")\n     private final boolean isVelocity;\n     private Class<?> property;\n-    private @Getter\n+    @Getter\n     @Setter\n-    MySQL mysql;\n-    private File folder;\n-    private @Getter\n+    private MySQL mysql;\n+    private File pluginFolder;\n+    @Getter\n     @Setter\n-    MojangAPI mojangAPI;\n+    private MojangAPI mojangAPI;\n+    private final SRLogger logger;\n \n-    public SkinStorage(Platform platform) {\n+    public SkinStorage(SRLogger logger, Platform platform) {\n+        this.logger = logger;\n         isBukkit = platform.isBukkit();\n         isBungee = platform.isBungee();\n         isSponge = platform.isSponge();\n@@ -78,12 +82,12 @@ public SkinStorage(Platform platform) {\n     }\n \n     public void loadFolders(File pluginFolder) {\n-        folder = pluginFolder;\n+        this.pluginFolder = pluginFolder;\n \n-        File tempFolder = new File(folder.getAbsolutePath() + File.separator + \"Skins\" + File.separator);\n+        File tempFolder = new File(pluginFolder.getAbsolutePath() + File.separator + \"Skins\" + File.separator);\n         tempFolder.mkdirs();\n \n-        tempFolder = new File(folder.getAbsolutePath() + File.separator + \"Players\" + File.separator);\n+        tempFolder = new File(pluginFolder.getAbsolutePath() + File.separator + \"Players\" + File.separator);\n         tempFolder.mkdirs();\n     }\n \n@@ -101,10 +105,11 @@ public void preloadDefaultSkins() {\n             } catch (SkinRequestException e) {\n                 //removing skin from list\n                 toRemove.add(skin);\n-                System.out.println(\"[SkinsRestorer] [WARNING] DefaultSkin '\" + skin + \"' could not be found or requested! Removing from list..\");\n+                logger.log(SRLogLevel.WARNING, \"[WARNING] DefaultSkin '\" + skin + \"' could not be found or requested! Removing from list..\");\n \n+                logger.debug(\"[DEBUG] DefaultSkin '\" + skin + \"' error: \");\n                 if (Config.DEBUG)\n-                    System.out.println(\"[SkinsRestorer] [DEBUG] DefaultSkin '\" + skin + \"' error: \" + e.getMessage());\n+                    e.printStackTrace();\n             }\n         });\n         Config.DEFAULT_SKINS.removeAll(toRemove);\n@@ -206,7 +211,7 @@ public String getPlayerSkin(String name) {\n         } else {\n             //Escape all windows / linux forbidden printable ASCII characters\n             name = name.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"·\");\n-            final File playerFile = new File(folder.getAbsolutePath() + File.separator + \"Players\" + File.separator + name + \".player\");\n+            final File playerFile = new File(pluginFolder.getAbsolutePath() + File.separator + \"Players\" + File.separator + name + \".player\");\n \n             try {\n                 if (!playerFile.exists())\n@@ -266,15 +271,14 @@ public Object getSkinData(String name, boolean updateOutdated) {\n \n                 } catch (Exception e) {\n                     removeSkinData(name);\n-                    System.out.println(\"[SkinsRestorer] Unsupported player format.. removing (\" + name + \").\");\n+                    logger.log(\"Unsupported player format.. removing (\" + name + \").\");\n                 }\n-\n         } else {\n             // Remove all whitespace\n             name = name.replaceAll(\"\\\\s\", \"\");\n             //Escape all Windows / Linux forbidden printable ASCII characters\n             name = name.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"·\");\n-            File skinFile = new File(folder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + name + \".skin\");\n+            File skinFile = new File(pluginFolder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + name + \".skin\");\n \n             try {\n                 if (!skinFile.exists())\n@@ -313,7 +317,7 @@ public Object getSkinData(String name, boolean updateOutdated) {\n \n             } catch (Exception e) {\n                 removeSkinData(name);\n-                System.out.println(\"[SkinsRestorer] Unsupported player format.. removing (\" + name + \").\");\n+                logger.log(\"Unsupported player format.. removing (\" + name + \").\");\n             }\n         }\n         return null;\n@@ -350,7 +354,7 @@ public void removePlayerSkin(String name) {\n         } else {\n             //Escape all windows / linux forbidden printable ASCII characters\n             name = name.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"·\");\n-            final File playerFile = new File(folder.getAbsolutePath() + File.separator + \"Players\" + File.separator + name + \".player\");\n+            final File playerFile = new File(pluginFolder.getAbsolutePath() + File.separator + \"Players\" + File.separator + name + \".player\");\n \n             if (playerFile.exists()) {\n                 try {\n@@ -377,7 +381,7 @@ public void removeSkinData(String name) {\n             name = name.replaceAll(\"\\\\s\", \"\");\n             //Escape all Windows / Linux forbidden printable ASCII characters\n             name = name.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"·\");\n-            final File skinFile = new File(folder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + name + \".skin\");\n+            final File skinFile = new File(pluginFolder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + name + \".skin\");\n \n             if (skinFile.exists()) {\n                 try {\n@@ -404,7 +408,7 @@ public void setPlayerSkin(String name, String skin) {\n         } else {\n             //Escape all windows / linux forbidden printable ASCII characters\n             name = name.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"·\");\n-            final File playerFile = new File(folder.getAbsolutePath() + File.separator + \"Players\" + File.separator + name + \".player\");\n+            final File playerFile = new File(pluginFolder.getAbsolutePath() + File.separator + \"Players\" + File.separator + name + \".player\");\n \n             try {\n                 if (!playerFile.exists() && !playerFile.createNewFile())\n@@ -450,7 +454,7 @@ public void setSkinData(String name, Object textures, String timestamp) {\n             name = name.replaceAll(\"\\\\s\", \"\");\n             //Escape all Windows / Linux forbidden printable ASCII characters\n             name = name.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"·\");\n-            final File skinFile = new File(folder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + name + \".skin\");\n+            final File skinFile = new File(pluginFolder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + name + \".skin\");\n \n             try {\n                 if (value.isEmpty() || signature.isEmpty() || timestamp.isEmpty())\n@@ -510,7 +514,7 @@ public void setSkinData(String name, Object textures) {\n             // When not using mysql\n         } else {\n             Map<String, Object> list = new TreeMap<>();\n-            final String path = folder.getAbsolutePath() + File.separator + \"Skins\" + File.separator;\n+            final String path = pluginFolder.getAbsolutePath() + File.separator + \"Skins\" + File.separator;\n             final File folder = new File(path);\n \n             //filter out non \"*.skin\" files.\n@@ -567,7 +571,7 @@ public void setSkinData(String name, Object textures) {\n             } catch (java.sql.SQLException ignored) {\n             }\n         } else {\n-            final String path = folder.getAbsolutePath() + File.separator + \"Skins\" + File.separator;\n+            final String path = pluginFolder.getAbsolutePath() + File.separator + \"Skins\" + File.separator;\n             final File folder = new File(path);\n \n             //filter out non \"*.skin\" files.\n@@ -649,7 +653,7 @@ public boolean updateSkinData(String skin) throws SkinRequestException {\n             skin = skin.replaceAll(\"\\\\s\", \"\");\n             //Escape all Windows / Linux forbidden printable ASCII characters\n             skin = skin.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"·\");\n-            File skinFile = new File(folder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + skin + \".skin\");\n+            File skinFile = new File(pluginFolder.getAbsolutePath() + File.separator + \"Skins\" + File.separator + skin + \".skin\");\n \n             try {\n                 if (!skinFile.exists()) {\n@@ -756,14 +760,14 @@ public String getDefaultSkinNameIfEnabled(String player) {\n         SPONGE(false, false, true, false),\n         VELOCITY(false, false, false, true);\n \n-        private final @Getter\n-        boolean isBukkit;\n-        private final @Getter\n-        boolean isBungee;\n-        private final @Getter\n-        boolean isSponge;\n-        private final @Getter\n-        boolean isVelocity;\n+        @Getter\n+        private final boolean isBukkit;\n+        @Getter\n+        private final boolean isBungee;\n+        @Getter\n+        private final boolean isSponge;\n+        @Getter\n+        private final boolean isVelocity;\n \n         Platform(boolean isBukkit, boolean isBungee, boolean isSponge, boolean isVelocity) {\n             this.isBukkit = isBukkit;"
  },
  {
    "sha": "2ffbf78ee71dfeac8798e70ad233ad7dc080a963",
    "filename": "src/main/java/net/skinsrestorer/shared/storage/YamlConfig.java",
    "status": "modified",
    "additions": 14,
    "deletions": 19,
    "changes": 33,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/YamlConfig.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/storage/YamlConfig.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/storage/YamlConfig.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -29,21 +29,20 @@\n import java.util.Scanner;\n \n public class YamlConfig {\n-    private final String path;\n+    private final File path;\n     private final String name;\n     private final File file;\n     private final boolean setMissing;\n     private Object config;\n \n-    public YamlConfig(String path, String name, boolean setMissing) {\n-        File direc = new File(path);\n-        if (!direc.exists())\n-            direc.mkdirs();\n+    public YamlConfig(File path, String name, boolean setMissing) {\n+        if (!path.exists())\n+            path.mkdirs();\n \n         this.path = path;\n-        this.name = name + \".yml\";\n+        this.name = name;\n         this.setMissing = setMissing;\n-        this.file = new File(this.path + this.name);\n+        file = new File(path + name);\n     }\n \n     private void createNewFile() {\n@@ -55,7 +54,7 @@ private void createNewFile() {\n     }\n \n     public void saveDefaultConfig() {\n-        this.saveDefaultConfig(null);\n+        saveDefaultConfig(null);\n     }\n \n     public void saveDefaultConfig(InputStream is) {\n@@ -64,12 +63,12 @@ public void saveDefaultConfig(InputStream is) {\n \n         // create empty file if we got no InputStream with default config\n         if (is == null) {\n-            this.createNewFile();\n+            createNewFile();\n             return;\n         }\n \n-        this.saveResource(is, this.name, false);\n-        this.reload();\n+        saveResource(is, name, false);\n+        reload();\n     }\n \n     public void saveResource(InputStream in, String resourcePath, boolean replace) {\n@@ -119,14 +118,14 @@ public Object get(String path) {\n     }\n \n     public Object get(String path, Object defValue) {\n-        if (get(path) == null && !this.setMissing) {\n-            System.out.println(\"[SkinsRestorer] \" + path + \" is missing in \" + this.name + \"! Using default value.\");\n+        if (get(path) == null && !setMissing) {\n+            System.out.println(\"[SkinsRestorer] \" + path + \" is missing in \" + name + \"! Using default value.\");\n             return defValue;\n         }\n \n         // Save new values if enabled (locale file)\n-        if (get(path) == null && this.setMissing) {\n-            System.out.println(\"[SkinsRestorer] Saving new config value \" + path + \" to \" + this.name);\n+        if (get(path) == null && setMissing) {\n+            System.out.println(\"[SkinsRestorer] Saving new config value \" + path + \" to \" + name);\n             set(path, defValue);\n         }\n \n@@ -141,10 +140,6 @@ public boolean getBoolean(String path, Boolean defValue) {\n         return Boolean.parseBoolean(getString(path, defValue));\n     }\n \n-    public File getFile() {\n-        return file;\n-    }\n-\n     public int getInt(String path) {\n         return Integer.parseInt(getString(path));\n     }"
  },
  {
    "sha": "f3e4939965d8e3c885c934e7ccc047801c9be7f3",
    "filename": "src/main/java/net/skinsrestorer/shared/update/GitHubUpdateDownloader.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/SkinsRestorer/SkinsRestorerX/blob/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/update/GitHubUpdateDownloader.java",
    "raw_url": "https://github.com/SkinsRestorer/SkinsRestorerX/raw/9db2a891a5c10d2fc2e1192db3aee6f8cb23e885/src/main/java/net/skinsrestorer/shared/update/GitHubUpdateDownloader.java",
    "contents_url": "https://api.github.com/repos/SkinsRestorer/SkinsRestorerX/contents/src/main/java/net/skinsrestorer/shared/update/GitHubUpdateDownloader.java?ref=9db2a891a5c10d2fc2e1192db3aee6f8cb23e885",
    "patch": "@@ -21,6 +21,8 @@\n  */\n package net.skinsrestorer.shared.update;\n \n+import net.skinsrestorer.shared.exception.UpdateException;\n+\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;"
  }
]
