[
  {
    "sha": "2c4eade56793b28c97c4fbfc452c62671570f4aa",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/README.md",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/README.md",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/README.md?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -4,7 +4,7 @@\n \n The complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure downloads][microsoft_sdk_download] page, and it ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n \n-For the best development experience, developers should use the official Microsoft Maven packages for libraries. Maven packages are regularly updated with new functionality and hotfixes.\n+For the best development experience, developers should use the official Microsoft Maven packages for libraries. Maven packages will be regularly updated with new functionality and hotfixes.\n \n ### Include the Package\n \n@@ -22,7 +22,7 @@ For the best development experience, developers should use the official Microsof\n \n This project welcomes contributions and suggestions.\n Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n-For details, visit <https://cla.microsoft.com.>\n+For details, visit <https://cla.microsoft.com.>.\n \n When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\n Simply follow the instructions provided by the bot."
  },
  {
    "sha": "81a240c4e2542dc8619091bab69d4da5527fc343",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 10,
    "changes": 15,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/pom.xml",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/pom.xml",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/pom.xml?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -2,7 +2,7 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n+  <modelVersion>4.0.0</modelVersion>\n \n   <parent>\n     <groupId>com.azure</groupId>\n@@ -43,11 +43,6 @@\n       <artifactId>azure-core-http-netty</artifactId>\n       <version>1.8.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n     </dependency>\n-    <dependency>\n-      <groupId>com.azure</groupId>\n-      <artifactId>azure-core-serializer-json-jackson</artifactId>\n-      <version>1.1.2</version> <!-- {x-version-update;com.azure:azure-core-serializer-json-jackson;dependency} -->\n-    </dependency>\n     <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-annotations</artifactId>\n@@ -98,10 +93,10 @@\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-        <groupId>commons-cli</groupId>\n-        <artifactId>commons-cli</artifactId>\n-        <version>1.3</version> <!-- {x-version-update;commons-cli:commons-cli;external_dependency} -->\n-        <scope>test</scope>\n+      <groupId>commons-cli</groupId>\n+      <artifactId>commons-cli</artifactId>\n+      <version>1.3</version> <!-- {x-version-update;commons-cli:commons-cli;external_dependency} -->\n+      <scope>test</scope>\n     </dependency>\n   </dependencies>\n "
  },
  {
    "sha": "3c32ba518affb89ca1a106102dab6ec02ecf52f2",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/DtmiConventions.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/DtmiConventions.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/DtmiConventions.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/DtmiConventions.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import com.azure.core.util.UrlBuilder;\n+import com.azure.iot.modelsrepository.implementation.ModelsRepositoryConstants;\n+import com.azure.iot.modelsrepository.implementation.StandardStrings;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * DtmiConventions implements the core aspects of the IoT model repo conventions\n+ * which includes DTMI validation and calculating a URI path from a DTMI.\n+ */\n+public final class DtmiConventions {\n+\n+    private DtmiConventions() { }\n+\n+    /**\n+     * A DTMI has three components: scheme, path, and version.\n+     * Scheme and path are separated by a colon. Path and version are separated by a semicolon i.e. scheme : path ; version.\n+     * The scheme is the string literal \"dtmi\" in lowercase. The path is a sequence of one or more segments, separated by colons.\n+     * The version is a sequence of one or more digits. Each path segment is a non-empty string containing only letters, digits, and undersc\n+     * The first character may not be a digit, and the last character may not be an underscore.\n+     * The version length is limited to nine digits, because the number 999,999,999 fits in a 32-bit signed integer value.\n+     * The first digit may not be zero, so there is no ambiguity regarding whether version 1 matches version 01 since the latter is invalid.\n+     */\n+    private static final Pattern VALID_DTMI_PATTERN = Pattern.compile(\"^dtmi:[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?(?::[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?)*;[1-9][0-9]{0,8}$\");\n+\n+    /**\n+     * Indicates whether a given string DTMI value is well-formed.\n+     *\n+     * @param dtmi DigitalTwin Model Id\n+     * @return True if dtmi has a valid format. False otherwise.\n+     */\n+    public static boolean isValidDtmi(String dtmi) {\n+        if (dtmi == null || dtmi.isEmpty()) {\n+            return false;\n+        }\n+\n+        return VALID_DTMI_PATTERN.matcher(dtmi).find();\n+    }\n+\n+    /**\n+     * Generates the model URI.\n+     *\n+     * @param dtmi DigitalTwin Model Id.\n+     * @param repositoryUri The repository uri\n+     * @param expanded Is model from precomputed values\n+     * @return The model uri\n+     */\n+    public static URI getModelUri(String dtmi, URI repositoryUri, boolean expanded) {\n+        String dtmiPath = dtmiToPath(dtmi);\n+\n+        if (expanded) {\n+            dtmiPath = dtmiPath.replace(ModelsRepositoryConstants.JSON_EXTENSION, ModelsRepositoryConstants.JSON_EXPANDED_EXTENSION);\n+        }\n+\n+        UrlBuilder urlBuilder = new UrlBuilder();\n+        urlBuilder.setHost(repositoryUri.getHost());\n+        urlBuilder.setScheme(repositoryUri.getScheme());\n+        urlBuilder.setPath(repositoryUri.getPath());\n+        urlBuilder.setQuery(repositoryUri.getQuery());\n+\n+        if (repositoryUri.getPort() > 0) {\n+            urlBuilder.setPort(repositoryUri.getPort());\n+        }\n+\n+        String path = urlBuilder.getPath();\n+\n+        if (path != null && !path.endsWith(\"/\")) {\n+            urlBuilder.setPath(path + \"/\");\n+        }\n+\n+        if (urlBuilder.getPath() == null) {\n+            urlBuilder.setPath(dtmiPath);\n+        } else {\n+            urlBuilder.setPath(urlBuilder.getPath() + dtmiPath);\n+        }\n+\n+        try {\n+            return new URI(urlBuilder.toString());\n+        } catch (Exception e) {\n+            // No exceptions will be thrown as the input is a valid URI format.\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Converts a string to {@link URI}\n+     *\n+     * @param uri String format of the path\n+     * @return {@link URI} representation of the path/uri   .\n+     */\n+    public static URI convertToUri(String uri) {\n+        try {\n+            return new URI(uri);\n+        } catch (URISyntaxException ex) {\n+            Path path = Paths.get(uri).normalize();\n+            return new File(path.toAbsolutePath().toString()).toURI();\n+        }\n+    }\n+\n+    static String dtmiToPath(String dtmi) {\n+        if (!isValidDtmi(dtmi)) {\n+            throw new IllegalArgumentException(String.format(StandardStrings.INVALID_DTMI_FORMAT_S, dtmi));\n+        }\n+\n+        return dtmi\n+            .toLowerCase(Locale.getDefault())\n+            .replaceAll(\":\", \"/\")\n+            .replaceAll(\";\", \"-\")\n+            + ModelsRepositoryConstants.JSON_EXTENSION;\n+    }\n+}"
  },
  {
    "sha": "6318dc105583090f122150c8dd1ddffda88e7fc6",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsDependencyResolution.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsDependencyResolution.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsDependencyResolution.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsDependencyResolution.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+/**\n+ * The model dependency resolution options.\n+ */\n+public enum ModelsDependencyResolution {\n+    /**\n+     * Disable model dependency resolution.\n+     */\n+    DISABLED,\n+\n+    /**\n+     * Enable model dependency resolution. The client will parse models and calculate dependencies recursively.\n+     */\n+    ENABLED,\n+\n+    /**\n+     * Try to get pre-computed model dependencies using .expanded.json.\n+     * If the model expanded form does not exist, it will fall back to {@link ModelsDependencyResolution#ENABLED}.\n+     */\n+    TRY_FROM_EXPANDED,\n+}"
  },
  {
    "sha": "d11a538b8d30f1d13642fd42377073f711bc5002",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryAsyncClient.java",
    "status": "modified",
    "additions": 83,
    "deletions": 22,
    "changes": 105,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryAsyncClient.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryAsyncClient.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryAsyncClient.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -3,53 +3,54 @@\n \n package com.azure.iot.modelsrepository;\n \n+import com.azure.core.annotation.ReturnType;\n import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n import com.azure.core.http.HttpPipeline;\n+import com.azure.core.util.Context;\n import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.serializer.JacksonAdapter;\n-import com.azure.core.util.serializer.JsonSerializer;\n import com.azure.iot.modelsrepository.implementation.ModelsRepositoryAPIImpl;\n import com.azure.iot.modelsrepository.implementation.ModelsRepositoryAPIImplBuilder;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.azure.iot.modelsrepository.implementation.RepositoryHandler;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+import java.util.Map;\n \n import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n \n /**\n  * This class provides a client for interacting asynchronously with a ModelsRepository instance.\n  * This client is instantiated through {@link ModelsRepositoryClientBuilder}.\n- *\n- * <p><strong>Code Samples</strong></p>\n- *\n- * {@codesnippet com.azure.iot.modelsrepository.asyncClient.instantiation}\n- *\n- * <p>\n- * This client allows for TODO: azabbasi\n- * </p>\n  */\n @ServiceClient(builder = ModelsRepositoryClientBuilder.class, isAsync = true)\n public final class ModelsRepositoryAsyncClient {\n-    private static final ClientLogger logger = new ClientLogger(ModelsRepositoryAsyncClient.class);\n-    private final ObjectMapper mapper;\n+    private static final ClientLogger LOGGER = new ClientLogger(ModelsRepositoryAsyncClient.class);\n+    private static final String MODELS_REPOSITORY_TRACING_NAMESPACE_VALUE = \"Azure.IoT.ModelsRepository\";\n     private final ModelsRepositoryServiceVersion serviceVersion;\n-    private final ModelsRepositoryAPIImpl protocolLayer;\n-    private final JsonSerializer serializer;\n-    private static final String MODELS_REPOSITORY_TRACING_NAMESPACE_VALUE = \"Azure.Iot.ModelsRepository\";\n+    private final RepositoryHandler repositoryHandler;\n+    private final ModelsDependencyResolution defaultDependencyResolutionOption;\n \n-    ModelsRepositoryAsyncClient(String serviceEndpoint, HttpPipeline pipeline, ModelsRepositoryServiceVersion serviceVersion, JsonSerializer jsonSerializer) {\n+    ModelsRepositoryAsyncClient(\n+        URI repositoryUri,\n+        HttpPipeline pipeline,\n+        ModelsRepositoryServiceVersion serviceVersion,\n+        ModelsDependencyResolution dependencyResolutionOption) {\n \n         JacksonAdapter jacksonAdapter = new JacksonAdapter();\n-        mapper = jacksonAdapter.serializer(); // Use the same mapper in this layer that the generated layer will use\n         this.serviceVersion = serviceVersion;\n \n-        // Is null by default. If not null, then the user provided a custom json serializer for the convenience layer to use.\n-        // If null, then mapper will be used instead. See DeserializationHelpers for more details\n-        this.serializer = jsonSerializer;\n+        this.defaultDependencyResolutionOption = dependencyResolutionOption;\n \n-        this.protocolLayer = new ModelsRepositoryAPIImplBuilder()\n-            .host(serviceEndpoint)\n+        ModelsRepositoryAPIImpl protocolLayer = new ModelsRepositoryAPIImplBuilder()\n+            .host(repositoryUri.toString())\n             .pipeline(pipeline)\n             .serializerAdapter(jacksonAdapter)\n             .buildClient();\n+\n+        this.repositoryHandler = new RepositoryHandler(repositoryUri, protocolLayer);\n     }\n \n     /**\n@@ -62,4 +63,64 @@\n     public ModelsRepositoryServiceVersion getServiceVersion() {\n         return this.serviceVersion;\n     }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmi A well-formed DTDL model Id. See <a href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL specs</a>. For example 'dtmi:com:example:Thermostat;1'.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Map<String, String>> getModels(String dtmi) {\n+        return getModels(dtmi, this.defaultDependencyResolutionOption);\n+    }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmi A well-formed DTDL model Id. See <a href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL specs</a>. For example 'dtmi:com:example:Thermostat;1'.\n+     * @param dependencyResolution A {@link ModelsDependencyResolution} value to dictate model resolution behavior.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Map<String, String>> getModels(String dtmi, ModelsDependencyResolution dependencyResolution) {\n+        return withContext(context -> getModels(dtmi, dependencyResolution, context));\n+    }\n+\n+    Mono<Map<String, String>> getModels(String dtmi, ModelsDependencyResolution dependencyResolution, Context context) {\n+        context = context.addData(AZ_TRACING_NAMESPACE_KEY, MODELS_REPOSITORY_TRACING_NAMESPACE_VALUE);\n+        return repositoryHandler.processAsync(dtmi, dependencyResolution, context);\n+    }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmis Collection of well-formed DTDL model Ids.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Map<String, String>> getModels(Iterable<String> dtmis) {\n+        return getModels(dtmis, this.defaultDependencyResolutionOption);\n+    }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmis An Iterable of well-formed DTDL model Ids. See <a href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL specs</a>. For example 'dtmi:com:example:Thermostat;1'.\n+     * @param dependencyResolution A {@link ModelsDependencyResolution} value to dictate model resolution behavior.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Map<String, String>> getModels(Iterable<String> dtmis, ModelsDependencyResolution dependencyResolution) {\n+        return withContext(context -> getModels(dtmis, dependencyResolution, context));\n+    }\n+\n+    Mono<Map<String, String>> getModels(Iterable<String> dtmis, ModelsDependencyResolution dependencyResolution, Context context) {\n+        context = context.addData(AZ_TRACING_NAMESPACE_KEY, MODELS_REPOSITORY_TRACING_NAMESPACE_VALUE);\n+        return repositoryHandler.processAsync(dtmis, dependencyResolution, context);\n+    }\n }"
  },
  {
    "sha": "ee8376f7d7897462665d479a944ea862b45e430c",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClient.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClient.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClient.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClient.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,87 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.util.Context;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class provides a client for interacting synchronously with a ModelsRepository instance.\n+ * This client is instantiated through {@link ModelsRepositoryClientBuilder}.\n+ */\n+@ServiceClient(builder = ModelsRepositoryClientBuilder.class)\n+public final class ModelsRepositoryClient {\n+    private final ModelsRepositoryAsyncClient modelsRepositoryAsyncClient;\n+\n+    ModelsRepositoryClient(ModelsRepositoryAsyncClient modelsRepositoryAsyncClient) {\n+        this.modelsRepositoryAsyncClient = modelsRepositoryAsyncClient;\n+    }\n+\n+    /**\n+     * Gets the Azure Models Repository service API version that this client is configured to use for all service requests.\n+     * Unless configured while building this client through {@link ModelsRepositoryClientBuilder#serviceVersion(ModelsRepositoryServiceVersion)},\n+     * this value will be equal to the latest service API version supported by this client.\n+     *\n+     * @return The Azure Models Repository service API version.\n+     */\n+    public ModelsRepositoryServiceVersion getServiceVersion() {\n+        return this.modelsRepositoryAsyncClient.getServiceVersion();\n+    }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmi A well-formed DTDL model Id. See <a href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL specs</a>. For example 'dtmi:com:example:Thermostat;1'.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Map<String, String> getModels(String dtmi) {\n+        return modelsRepositoryAsyncClient.getModels(dtmi).block();\n+    }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmi A well-formed DTDL model Id. See <a href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL specs</a>. For example 'dtmi:com:example:Thermostat;1'.\n+     * @param dependencyResolution A {@link ModelsDependencyResolution} value to dictate model resolution behavior.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Map<String, String> getModels(String dtmi, ModelsDependencyResolution dependencyResolution, Context context) {\n+        return modelsRepositoryAsyncClient.getModels(dtmi, dependencyResolution, context).block();\n+    }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmis Collection of well-formed DTDL model Ids.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Map<String, String> getModels(Iterable<String> dtmis) {\n+        return modelsRepositoryAsyncClient.getModels(dtmis).block();\n+    }\n+\n+    /**\n+     * Gets a collection of model definitions.\n+     *\n+     * @param dtmis An Iterable of well-formed DTDL model Ids. See <a href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\">DTDL specs</a>. For example 'dtmi:com:example:Thermostat;1'.\n+     * @param dependencyResolution A {@link ModelsDependencyResolution} value to dictate model resolution behavior.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A Map containing the model definition(s) and dependencies (if applicable) where the key is the dtmi\n+     * and the value is the raw model definition string.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Map<String, String> getModels(Iterable<String> dtmis, ModelsDependencyResolution dependencyResolution, Context context) {\n+        return modelsRepositoryAsyncClient.getModels(dtmis, dependencyResolution, context).block();\n+    }\n+}"
  },
  {
    "sha": "1ec7b6a6700ef3894df1b82f9d446776e8622964",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClientBuilder.java",
    "status": "modified",
    "additions": 60,
    "deletions": 60,
    "changes": 120,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClientBuilder.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClientBuilder.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryClientBuilder.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -4,39 +4,38 @@\n package com.azure.iot.modelsrepository;\n \n import com.azure.core.annotation.ServiceClientBuilder;\n-import com.azure.core.credential.TokenCredential;\n import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpHeader;\n import com.azure.core.http.HttpHeaders;\n import com.azure.core.http.HttpPipeline;\n-import com.azure.core.http.HttpPipelineBuilder;\n-import com.azure.core.http.policy.AddDatePolicy;\n-import com.azure.core.http.policy.AddHeadersPolicy;\n-import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n import com.azure.core.http.policy.HttpLogOptions;\n-import com.azure.core.http.policy.HttpLoggingPolicy;\n import com.azure.core.http.policy.HttpPipelinePolicy;\n-import com.azure.core.http.policy.HttpPolicyProviders;\n-import com.azure.core.http.policy.RequestIdPolicy;\n import com.azure.core.http.policy.RetryPolicy;\n import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.HttpPipelineBuilder;\n import com.azure.core.util.ClientOptions;\n import com.azure.core.util.Configuration;\n import com.azure.core.util.CoreUtils;\n-import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.iot.modelsrepository.implementation.ModelsRepositoryConstants;\n \n-import java.time.temporal.ChronoUnit;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n /**\n- * This class provides a fluent builder API to help aid the configuration and instantiation of {@link ModelsRepotioryClient}\n- * and {@link ModelsRepositoryAsyncClient ModelsRepositoryAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link ModelsRepositoryClient}\n+ * and {@link ModelsRepositoryAsyncClient}, call {@link #buildClient() buildClient} and {@link\n  * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n  */\n-@ServiceClientBuilder(serviceClients = {ModelsRepotioryClient.class, ModelsRepositoryAsyncClient.class})\n+@ServiceClientBuilder(serviceClients = {ModelsRepositoryClient.class, ModelsRepositoryAsyncClient.class})\n public final class ModelsRepositoryClientBuilder {\n     // This is the name of the properties file in this repo that contains the default properties\n     private static final String MODELS_REPOSITORY_PROPERTIES = \"azure-iot-modelsrepository.properties\";\n@@ -47,8 +46,10 @@\n \n     private final List<HttpPipelinePolicy> additionalPolicies;\n \n-    // mandatory\n-    private String endpoint;\n+    // Fields with default values.\n+    private URI repositoryEndpoint;\n+\n+    private ModelsDependencyResolution modelDependencyResolution = ModelsDependencyResolution.TRY_FROM_EXPANDED;\n \n     // optional/have default values\n     private ModelsRepositoryServiceVersion serviceVersion;\n@@ -57,16 +58,13 @@\n     private HttpClient httpClient;\n     private HttpLogOptions httpLogOptions;\n     private RetryPolicy retryPolicy;\n-    private JsonSerializer jsonSerializer;\n \n     // Right now, Azure Models Repository does not send a retry-after header on its throttling messages. If it adds support later, then\n     // these values should match the header name (for instance, \"x-ms-retry-after-ms\" or \"Retry-After\") and the time unit\n     // of the header's value. These null values are equivalent to just constructing \"new RetryPolicy()\". It is safe\n     // to use a null retryAfterHeader and a null retryAfterTimeUnit when constructing this retry policy as this\n     // constructor interprets that as saying \"this service does not support retry after headers\"\n-    private static final String retryAfterHeader = null;\n-    private static final ChronoUnit retryAfterTimeUnit = null;\n-    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(retryAfterHeader, retryAfterTimeUnit);\n+    private static final RetryPolicy DEFAULT_RETRY_POLICY = new RetryPolicy(null, null);\n \n     private final Map<String, String> properties;\n \n@@ -75,21 +73,25 @@\n     /**\n      * The public constructor for ModelsRepositoryClientBuilder\n      */\n-    public ModelsRepositoryClientBuilder()\n-    {\n+    public ModelsRepositoryClientBuilder() {\n         additionalPolicies = new ArrayList<>();\n         properties = CoreUtils.getProperties(MODELS_REPOSITORY_PROPERTIES);\n         httpLogOptions = new HttpLogOptions();\n+        try {\n+            this.repositoryEndpoint = new URI(ModelsRepositoryConstants.DEFAULT_MODELS_REPOSITORY_ENDPOINT);\n+        } catch (URISyntaxException e) {\n+            // We know it won't throw since it's a known endpoint and has been validated.\n+        }\n     }\n \n-    private static HttpPipeline buildPipeline(String endpoint,\n-                                              HttpLogOptions httpLogOptions,\n-                                              ClientOptions clientOptions,\n-                                              HttpClient httpClient,\n-                                              List<HttpPipelinePolicy> additionalPolicies,\n-                                              RetryPolicy retryPolicy,\n-                                              Configuration configuration,\n-                                              Map<String, String> properties) {\n+    private static HttpPipeline constructPipeline(\n+        HttpLogOptions httpLogOptions,\n+        ClientOptions clientOptions,\n+        HttpClient httpClient,\n+        List<HttpPipelinePolicy> additionalPolicies,\n+        RetryPolicy retryPolicy,\n+        Configuration configuration,\n+        Map<String, String> properties) {\n         // Closest to API goes first, closest to wire goes last.\n         List<HttpPipelinePolicy> policies = new ArrayList<>();\n \n@@ -143,12 +145,12 @@ private static HttpPipeline buildPipeline(String endpoint,\n     }\n \n     /**\n-     * Create a {@link ModelsRepotioryClient} based on the builder settings.\n+     * Create a {@link ModelsRepositoryClient} based on the builder settings.\n      *\n      * @return the created synchronous ModelsRepotioryClient\n      */\n-    public ModelsRepotioryClient buildClient() {\n-        return new ModelsRepotioryClient(buildAsyncClient());\n+    public ModelsRepositoryClient buildClient() {\n+        return new ModelsRepositoryClient(buildAsyncClient());\n     }\n \n     /**\n@@ -157,31 +159,25 @@ public ModelsRepotioryClient buildClient() {\n      * @return the created asynchronous ModelsRepositoryAsyncClient\n      */\n     public ModelsRepositoryAsyncClient buildAsyncClient() {\n-        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n-\n         Configuration buildConfiguration = this.configuration;\n-        if (buildConfiguration == null)\n-        {\n+        if (buildConfiguration == null) {\n             buildConfiguration = Configuration.getGlobalConfiguration().clone();\n         }\n \n         // Set defaults for these fields if they were not set while building the client\n         ModelsRepositoryServiceVersion serviceVersion = this.serviceVersion;\n-        if (serviceVersion == null)\n-        {\n+        if (serviceVersion == null) {\n             serviceVersion = ModelsRepositoryServiceVersion.getLatest();\n         }\n \n         // Default is exponential backoff\n         RetryPolicy retryPolicy = this.retryPolicy;\n-        if (retryPolicy == null)\n-        {\n+        if (retryPolicy == null) {\n             retryPolicy = DEFAULT_RETRY_POLICY;\n         }\n \n         if (this.httpPipeline == null) {\n-            this.httpPipeline = buildPipeline(\n-                this.endpoint,\n+            this.httpPipeline = constructPipeline(\n                 this.httpLogOptions,\n                 this.clientOptions,\n                 this.httpClient,\n@@ -191,17 +187,32 @@ public ModelsRepositoryAsyncClient buildAsyncClient() {\n                 this.properties);\n         }\n \n-        return new ModelsRepositoryAsyncClient(this.endpoint, this.httpPipeline, serviceVersion, this.jsonSerializer);\n+        return new ModelsRepositoryAsyncClient(\n+            this.repositoryEndpoint,\n+            this.httpPipeline,\n+            serviceVersion,\n+            this.modelDependencyResolution);\n+    }\n+\n+    /**\n+     * Set the default dependency resolution option that the built client will use. This field will have a default value.\n+     *\n+     * @param modelDependencyResolution A DependencyResolutionOption value to force model resolution behavior.\n+     * @return the updated ModelsRepositoryClientBuilder instance for fluent building.\n+     */\n+    public ModelsRepositoryClientBuilder modelDependencyResolution(ModelsDependencyResolution modelDependencyResolution) {\n+        this.modelDependencyResolution = modelDependencyResolution;\n+        return this;\n     }\n \n     /**\n      * Set the service endpoint that the built client will communicate with. This field is mandatory to set.\n      *\n-     * @param endpoint URL of the service.\n+     * @param repositoryEndpoint Uri of the service in String format.\n      * @return the updated ModelsRepositoryClientBuilder instance for fluent building.\n      */\n-    public ModelsRepositoryClientBuilder endpoint(String endpoint) {\n-        this.endpoint = endpoint;\n+    public ModelsRepositoryClientBuilder repositoryEndpoint(URI repositoryEndpoint) {\n+        this.repositoryEndpoint = repositoryEndpoint;\n         return this;\n     }\n \n@@ -260,7 +271,7 @@ public ModelsRepositoryClientBuilder addPolicy(HttpPipelinePolicy pipelinePolicy\n \n     /**\n      * Sets the {@link HttpPipelinePolicy} that is used as the retry policy for each request that is sent.\n-     *\n+     * <p>\n      * The default retry policy will be used if not provided. The default retry policy is {@link RetryPolicy#RetryPolicy()}.\n      * For implementing custom retry logic, see {@link RetryPolicy} as an example.\n      *\n@@ -275,7 +286,7 @@ public ModelsRepositoryClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n     /**\n      * Sets the {@link HttpPipeline} to use for the service client.\n      * <p>\n-     * If {@code pipeline} is set, all other settings are ignored, aside from {@link #endpoint(String) endpoint}.\n+     * If {@code pipeline} is set, all other settings are ignored, aside from {@link #repositoryEndpoint(URI) endpoint}.\n      *\n      * @param httpPipeline HttpPipeline to use for sending service requests and receiving responses.\n      * @return the updated ModelsRepositoryClientBuilder instance for fluent building.\n@@ -287,7 +298,7 @@ public ModelsRepositoryClientBuilder pipeline(HttpPipeline httpPipeline) {\n \n     /**\n      * Sets the configuration store that is used during construction of the service client.\n-     *\n+     * <p>\n      * The default configuration store is a clone of the {@link Configuration#getGlobalConfiguration() global\n      * configuration store}, use {@link Configuration#NONE} to bypass using configuration settings during construction.\n      *\n@@ -299,17 +310,6 @@ public ModelsRepositoryClientBuilder configuration(Configuration configuration)\n         return this;\n     }\n \n-    /**\n-     * Custom JSON serializer that is used to handle model types that are not contained in the Azure Models Repository library.\n-     *\n-     * @param jsonSerializer The serializer to deserialize response payloads into user defined models.\n-     * @return The updated ModelsRepositoryClientBuilder object.\n-     */\n-    public ModelsRepositoryClientBuilder serializer(JsonSerializer jsonSerializer) {\n-        this.jsonSerializer = jsonSerializer;\n-        return this;\n-    }\n-\n     /**\n      * Sets the {@link ClientOptions} which enables various options to be set on the client. For example setting an\n      * {@code applicationId} using {@link ClientOptions#setApplicationId(String)} to configure"
  },
  {
    "sha": "553438ed322f8a097d780209c3caadec8db852f7",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryServiceVersion.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryServiceVersion.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryServiceVersion.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepositoryServiceVersion.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -9,7 +9,7 @@\n  * The service API versions of Azure Models Repository that are supported by this client.\n  */\n public enum ModelsRepositoryServiceVersion implements ServiceVersion {\n-    V2020_10_31(\"2020-10-31\");\n+    V2021_03_18(\"V2021_03_18\");\n \n     private final String version;\n \n@@ -27,9 +27,10 @@ public String getVersion() {\n \n     /**\n      * Gets the latest service API version of Azure Models Repository that is supported by this client.\n+     *\n      * @return The latest service API version of Azure Models Repository that is supported by this client.\n      */\n     public static ModelsRepositoryServiceVersion getLatest() {\n-        return V2020_10_31;\n+        return V2021_03_18;\n     }\n }"
  },
  {
    "sha": "ee7b87848f8cee671c23d40985edf2caceaf53d7",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepotioryClient.java",
    "status": "removed",
    "additions": 0,
    "deletions": 34,
    "changes": 34,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/bebfa64637d9e36eaef633dddba944dafd264774/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepotioryClient.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/bebfa64637d9e36eaef633dddba944dafd264774/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepotioryClient.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/ModelsRepotioryClient.java?ref=bebfa64637d9e36eaef633dddba944dafd264774",
    "patch": "@@ -1,34 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.iot.modelsrepository;\n-\n-import com.azure.core.annotation.ServiceClient;\n-\n-/**\n- * This class provides a client for interacting synchronously with a ModelsRepository instance.\n- * This client is instantiated through {@link ModelsRepositoryClientBuilder}.\n- *\n- * <p>\n- * This client allows for TODO: azabbasi\n- * </p>\n- */\n-@ServiceClient(builder = ModelsRepositoryClientBuilder.class)\n-public final class ModelsRepotioryClient {\n-    private final ModelsRepositoryAsyncClient modelsRepositoryAsyncClient;\n-\n-    ModelsRepotioryClient(ModelsRepositoryAsyncClient modelsRepositoryAsyncClient) {\n-        this.modelsRepositoryAsyncClient = modelsRepositoryAsyncClient;\n-    }\n-\n-    /**\n-     * Gets the Azure Models Repository service API version that this client is configured to use for all service requests.\n-     * Unless configured while building this client through {@link ModelsRepositoryClientBuilder#serviceVersion(ModelsRepositoryServiceVersion)},\n-     * this value will be equal to the latest service API version supported by this client.\n-     *\n-     * @return The Azure Models Repository service API version.\n-     */\n-    public ModelsRepositoryServiceVersion getServiceVersion() {\n-        return this.modelsRepositoryAsyncClient.getServiceVersion();\n-    }\n-}"
  },
  {
    "sha": "a5519c6c6d1c7294620211fad3a912e68a7f984d",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/FileModelFetcher.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/FileModelFetcher.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/FileModelFetcher.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/FileModelFetcher.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.core.exception.ServiceResponseException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.iot.modelsrepository.DtmiConventions;\n+import com.azure.iot.modelsrepository.ModelsDependencyResolution;\n+import com.azure.iot.modelsrepository.implementation.models.FetchResult;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+/**\n+ * The {@link FileModelFetcher} is an implementation of {@link ModelFetcher} interface\n+ * for supporting local filesystem based model content fetching.\n+ */\n+class FileModelFetcher implements ModelFetcher {\n+\n+    private final ClientLogger logger;\n+\n+    /**\n+     * Creates an instance of {@link FileModelFetcher}\n+     */\n+    FileModelFetcher() {\n+        this.logger = new ClientLogger(FileModelFetcher.class);\n+    }\n+\n+    @Override\n+    public Mono<FetchResult> fetchAsync(String dtmi, URI repositoryUri, ModelsDependencyResolution resolutionOption, Context context) {\n+        Queue<String> work = new LinkedList<>();\n+\n+        try {\n+            if (resolutionOption == ModelsDependencyResolution.TRY_FROM_EXPANDED) {\n+                work.add(getPath(dtmi, repositoryUri, true));\n+            }\n+            work.add(getPath(dtmi, repositoryUri, false));\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return Mono.error(new AzureException(e));\n+        }\n+\n+        String fnfError = \"\";\n+        while (work.size() != 0) {\n+            String tryContentPath = work.poll();\n+\n+            Path path = Paths.get(new File(tryContentPath).getPath());\n+\n+            logger.info(String.format(StandardStrings.FETCHING_MODEL_CONTENT, path.toString()));\n+\n+            if (Files.exists(path)) {\n+                try {\n+                    return Mono.just(\n+                        new FetchResult()\n+                            .setDefinition(new String(Files.readAllBytes(path), StandardCharsets.UTF_8))\n+                            .setPath(tryContentPath));\n+                } catch (IOException e) {\n+                    return Mono.error(new AzureException(e));\n+                }\n+            }\n+\n+            logger.error(String.format(StandardStrings.ERROR_FETCHING_MODEL_CONTENT, path.toString()));\n+\n+            fnfError = String.format(StandardStrings.ERROR_FETCHING_MODEL_CONTENT, tryContentPath);\n+        }\n+\n+        return Mono.error(new ServiceResponseException(fnfError));\n+    }\n+\n+    private String getPath(String dtmi, URI repositoryUri, boolean expanded) throws URISyntaxException, MalformedURLException {\n+        return DtmiConventions.getModelUri(dtmi, repositoryUri, expanded)\n+            .getPath();\n+    }\n+}"
  },
  {
    "sha": "0ee51a1c0928f815aa522596c05e0b3da04a4053",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/HttpModelFetcher.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/HttpModelFetcher.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/HttpModelFetcher.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/HttpModelFetcher.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.iot.modelsrepository.DtmiConventions;\n+import com.azure.iot.modelsrepository.ModelsDependencyResolution;\n+import com.azure.iot.modelsrepository.implementation.models.FetchResult;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+/**\n+ * The {@link HttpModelFetcher} is an implementation of {@link ModelFetcher} interface\n+ * for supporting http[s] based model content fetching.\n+ */\n+class HttpModelFetcher implements ModelFetcher {\n+    private final ModelsRepositoryAPIImpl protocolLayer;\n+    private final ClientLogger logger;\n+\n+    HttpModelFetcher(ModelsRepositoryAPIImpl protocolLayer) {\n+        this.logger = new ClientLogger(HttpModelFetcher.class);\n+        this.protocolLayer = protocolLayer;\n+    }\n+\n+    @Override\n+    public Mono<FetchResult> fetchAsync(String dtmi, URI repositoryUri, ModelsDependencyResolution resolutionOption, Context context) {\n+        Queue<String> work = new LinkedList<>();\n+        try {\n+            if (resolutionOption == ModelsDependencyResolution.TRY_FROM_EXPANDED) {\n+                work.add(getPath(dtmi, repositoryUri, true));\n+            }\n+            work.add(getPath(dtmi, repositoryUri, false));\n+        } catch (Exception e) {\n+            return Mono.error(new AzureException(e));\n+        }\n+\n+        String tryContentPath = work.poll();\n+\n+        logger.info(String.format(StandardStrings.FETCHING_MODEL_CONTENT, tryContentPath));\n+\n+        return evaluatePath(tryContentPath, context)\n+            .onErrorResume(error -> {\n+                if (work.size() != 0) {\n+                    return evaluatePath(work.poll(), context);\n+                } else {\n+                    return Mono.error(error);\n+                }\n+            })\n+            .map(s -> new FetchResult().setPath(tryContentPath).setDefinition(s));\n+    }\n+\n+    private Mono<String> evaluatePath(String tryContentPath, Context context) {\n+        return protocolLayer\n+            .getModelsRepository()\n+            .getModelFromPathWithResponseAsync(tryContentPath, context)\n+            .flatMap(response -> {\n+                String stringResponse = new String(response, StandardCharsets.UTF_8);\n+                return Mono.just(stringResponse);\n+            });\n+    }\n+\n+    private String getPath(String dtmi, URI repositoryUri, boolean expanded) throws URISyntaxException {\n+        return DtmiConventions.getModelUri(dtmi, repositoryUri, expanded).getPath();\n+    }\n+}"
  },
  {
    "sha": "2b11e3193d977bd57eb93b2d7d193baf8ccb8549",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/IntermediateFetchResult.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/IntermediateFetchResult.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/IntermediateFetchResult.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/IntermediateFetchResult.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+import com.azure.iot.modelsrepository.implementation.models.FetchResult;\n+\n+import java.util.Map;\n+\n+/**\n+ * This type is used to unify the expand operation return types in the recursive function and has no other use cases.\n+ * Do not take any dependencies on this type.\n+ */\n+class IntermediateFetchResult {\n+    private final FetchResult fetchResult;\n+    private final Map<String, String> map;\n+\n+    IntermediateFetchResult(FetchResult fetchResult, Map<String, String> map) {\n+        this.fetchResult = fetchResult;\n+        this.map = map;\n+    }\n+\n+    public FetchResult getFetchResult() {\n+        return fetchResult;\n+    }\n+\n+    public Map<String, String> getMap() {\n+        return map;\n+    }\n+}"
  },
  {
    "sha": "da106772bc4e05fa47ce0ee4ac4d8edb389687df",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelFetcher.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelFetcher.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelFetcher.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelFetcher.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+import com.azure.core.util.Context;\n+import com.azure.iot.modelsrepository.ModelsDependencyResolution;\n+import com.azure.iot.modelsrepository.implementation.models.FetchResult;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+\n+interface ModelFetcher {\n+    Mono<FetchResult> fetchAsync(String dtmi, URI repositoryUri, ModelsDependencyResolution resolutionOption, Context context);\n+}"
  },
  {
    "sha": "3c2dd6e2199dc7dd5e88a0f632907252abee56f9",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsQuery.java",
    "status": "added",
    "additions": 165,
    "deletions": 0,
    "changes": 165,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsQuery.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsQuery.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsQuery.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,165 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+import com.azure.iot.modelsrepository.implementation.models.ModelMetadata;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The {@link ModelsQuery} class is responsible for parsing DTDL v2 models to produce key metadata.\n+ * In the current form this class is focused on determining model dependencies recursively\n+ * via extends and component schemas.\n+ */\n+public class ModelsQuery {\n+\n+    private static final String UTF8_BOM = \"\\uFEFF\";\n+    private final String content;\n+    private final ObjectMapper mapper;\n+\n+    public ModelsQuery(String content) {\n+        mapper = new ObjectMapper();\n+        if (content.startsWith(UTF8_BOM)) {\n+            this.content = content.substring(1);\n+        } else {\n+            this.content = content;\n+        }\n+    }\n+\n+    public ModelMetadata parseModel() throws JsonProcessingException {\n+        JsonNode rootElement = mapper.readValue(this.content, JsonNode.class);\n+        return parseInterface(rootElement);\n+    }\n+\n+    public Map<String, String> listToMap() throws JsonProcessingException {\n+        Map<String, String> result = new HashMap<>();\n+\n+        JsonNode root = mapper.readValue(this.content, JsonNode.class);\n+\n+        if (root.isArray()) {\n+            for (JsonNode node : root) {\n+                if (node.isObject()) {\n+                    String nodeString = node.toString();\n+                    String id = new ModelsQuery(nodeString).parseModel().getId();\n+                    result.put(id, nodeString);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private static ModelMetadata parseInterface(JsonNode root) {\n+        String rootDtmi = parseRootDtmi(root);\n+        List<String> extend = parseExtends(root);\n+        List<String> contents = parseContents(root);\n+\n+        return new ModelMetadata(rootDtmi, extend, contents);\n+    }\n+\n+    private static String parseRootDtmi(JsonNode root) {\n+        if (root.isObject()) {\n+            JsonNode id = root.get(ModelsRepositoryConstants.DTDL_ID);\n+\n+            if (id != null && id.isTextual()) {\n+                return id.textValue();\n+            }\n+        }\n+\n+        return \"\";\n+    }\n+\n+    private static List<String> parseExtends(JsonNode root) {\n+\n+        List<String> dependencies = new ArrayList<>();\n+\n+        if (!root.isObject()) {\n+            return dependencies;\n+        }\n+\n+        JsonNode extend = root.get(ModelsRepositoryConstants.DTDL_EXTENDS);\n+        if (extend == null) {\n+            return dependencies;\n+        }\n+\n+        if (extend.isTextual()) {\n+            dependencies.add(extend.textValue());\n+        } else if (isOfDtdlType(extend, ModelsRepositoryConstants.DTDL_INTERFACE)) {\n+            ModelMetadata metadata = parseInterface(extend);\n+            dependencies.addAll(metadata.getDependencies());\n+        } else if (extend.isArray()) {\n+            for (JsonNode extendNode : extend) {\n+                if (extendNode.isTextual()) {\n+                    dependencies.add(extendNode.textValue());\n+                } else if (isOfDtdlType(extendNode, ModelsRepositoryConstants.DTDL_INTERFACE)) {\n+                    ModelMetadata metadata = parseInterface(extendNode);\n+                    dependencies.addAll(metadata.getDependencies());\n+                }\n+            }\n+        }\n+\n+        return dependencies;\n+    }\n+\n+    private static List<String> parseContents(JsonNode root) {\n+        List<String> dependencies = new ArrayList<>();\n+\n+        if (root.isObject()) {\n+            JsonNode contents = root.get(ModelsRepositoryConstants.DTDL_CONTENTS);\n+            if (contents != null && contents.isArray()) {\n+                for (JsonNode contentNode : contents) {\n+                    if (isOfDtdlType(contentNode, ModelsRepositoryConstants.DTDL_COMPONENT)) {\n+                        dependencies.addAll(parseComponent(contentNode));\n+                    }\n+                }\n+            }\n+        }\n+\n+        return dependencies;\n+    }\n+\n+    private static List<String> parseComponent(JsonNode root) {\n+        List<String> dependencies = new ArrayList<>();\n+\n+        if (root.isObject()) {\n+            JsonNode componentSchema = root.get(ModelsRepositoryConstants.DTDL_SCHEMA);\n+            if (componentSchema != null) {\n+                if (componentSchema.isTextual()) {\n+                    dependencies.add(componentSchema.textValue());\n+                } else if (isOfDtdlType(componentSchema, ModelsRepositoryConstants.DTDL_INTERFACE)) {\n+                    ModelMetadata metadata = parseInterface(componentSchema);\n+                    dependencies.addAll(metadata.getDependencies());\n+                } else if (componentSchema.isArray()) {\n+                    for (JsonNode componentNode : componentSchema) {\n+                        if (componentNode.isTextual()) {\n+                            dependencies.add(componentNode.textValue());\n+                        } else if (isOfDtdlType(componentNode, ModelsRepositoryConstants.DTDL_INTERFACE)) {\n+                            ModelMetadata metadata = parseInterface(componentNode);\n+                            dependencies.addAll(metadata.getDependencies());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return dependencies;\n+    }\n+\n+    private static boolean isOfDtdlType(JsonNode root, String objectTypeString) {\n+        if (root.isObject()) {\n+            JsonNode objectType = root.get(ModelsRepositoryConstants.DTDL_TYPE);\n+            if (objectType != null) {\n+                return objectType.isTextual() && objectType.textValue().equals(objectTypeString);\n+            }\n+        }\n+\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "5ae9e8c82e1f1678409dee5c50f434e5dbbc9b6c",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryAPIImplBuilder.java",
    "status": "modified",
    "additions": 14,
    "deletions": 15,
    "changes": 29,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryAPIImplBuilder.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryAPIImplBuilder.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryAPIImplBuilder.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -7,13 +7,13 @@\n import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.HttpPipelineBuilder;\n-import com.azure.core.http.policy.CookiePolicy;\n import com.azure.core.http.policy.HttpLogOptions;\n-import com.azure.core.http.policy.HttpLoggingPolicy;\n import com.azure.core.http.policy.HttpPipelinePolicy;\n import com.azure.core.http.policy.HttpPolicyProviders;\n import com.azure.core.http.policy.RetryPolicy;\n import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.CookiePolicy;\n import com.azure.core.util.Configuration;\n import com.azure.core.util.serializer.JacksonAdapter;\n import com.azure.core.util.serializer.SerializerAdapter;\n@@ -23,7 +23,9 @@\n import java.util.List;\n import java.util.Map;\n \n-/** A builder for creating a new instance of the ModelsRepositoryAPI type. */\n+/**\n+ * A builder for creating a new instance of the ModelsRepositoryAPI type.\n+ */\n @ServiceClientBuilder(serviceClients = {ModelsRepositoryAPIImpl.class})\n public final class ModelsRepositoryAPIImplBuilder {\n     private static final String SDK_NAME = \"name\";\n@@ -153,7 +155,7 @@ public ModelsRepositoryAPIImplBuilder retryPolicy(RetryPolicy retryPolicy) {\n     /*\n      * The list of Http pipeline policies to add.\n      */\n-    private List<HttpPipelinePolicy> pipelinePolicies;\n+    private final List<HttpPipelinePolicy> pipelinePolicies;\n \n     /**\n      * Adds a custom Http pipeline policy.\n@@ -173,40 +175,37 @@ public ModelsRepositoryAPIImplBuilder addPolicy(HttpPipelinePolicy customPolicy)\n      */\n     public ModelsRepositoryAPIImpl buildClient() {\n         if (host == null) {\n-            this.host = \"https://devicemodels.azure.com/\";\n+            this.host = ModelsRepositoryConstants.DEFAULT_MODELS_REPOSITORY_ENDPOINT;\n         }\n         if (pipeline == null) {\n             this.pipeline = createHttpPipeline();\n         }\n         if (serializerAdapter == null) {\n             this.serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n         }\n-        ModelsRepositoryAPIImpl client = new ModelsRepositoryAPIImpl(pipeline, serializerAdapter, host);\n-        return client;\n+        return new ModelsRepositoryAPIImpl(pipeline, serializerAdapter, host);\n     }\n \n     private HttpPipeline createHttpPipeline() {\n         Configuration buildConfiguration =\n-                (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;\n+            (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;\n         if (httpLogOptions == null) {\n             httpLogOptions = new HttpLogOptions();\n         }\n         List<HttpPipelinePolicy> policies = new ArrayList<>();\n         String clientName = properties.getOrDefault(SDK_NAME, \"UnknownName\");\n         String clientVersion = properties.getOrDefault(SDK_VERSION, \"UnknownVersion\");\n         policies.add(\n-                new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion, buildConfiguration));\n+            new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion, buildConfiguration));\n         HttpPolicyProviders.addBeforeRetryPolicies(policies);\n         policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n         policies.add(new CookiePolicy());\n         policies.addAll(this.pipelinePolicies);\n         HttpPolicyProviders.addAfterRetryPolicies(policies);\n         policies.add(new HttpLoggingPolicy(httpLogOptions));\n-        HttpPipeline httpPipeline =\n-                new HttpPipelineBuilder()\n-                        .policies(policies.toArray(new HttpPipelinePolicy[0]))\n-                        .httpClient(httpClient)\n-                        .build();\n-        return httpPipeline;\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n     }\n }"
  },
  {
    "sha": "9e969f0a0c7bdd814c925f10833bab3b07c7491e",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryConstants.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryConstants.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryConstants.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryConstants.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+public class ModelsRepositoryConstants {\n+    public static final String FILE = \"file\";\n+    public static final String JSON_EXTENSION = \".json\";\n+    public static final String JSON_EXPANDED_EXTENSION = \".expanded.json\";\n+    public static final String DEFAULT_MODELS_REPOSITORY_ENDPOINT = \"https://devicemodels.azure.com\";\n+\n+    // DTDL conventions\n+    public static final String DTDL_TYPE = \"@type\";\n+    public static final String DTDL_ID = \"@id\";\n+    public static final String DTDL_INTERFACE = \"Interface\";\n+    public static final String DTDL_COMPONENT = \"Component\";\n+    public static final String DTDL_EXTENDS = \"extends\";\n+    public static final String DTDL_SCHEMA = \"schema\";\n+    public static final String DTDL_CONTENTS = \"contents\";\n+}"
  },
  {
    "sha": "513030e271f80f9185eda55df8bd2beb3726b7c9",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryImpl.java",
    "status": "modified",
    "additions": 42,
    "deletions": 39,
    "changes": 81,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryImpl.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryImpl.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/ModelsRepositoryImpl.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -5,24 +5,29 @@\n \n import com.azure.core.annotation.ExpectedResponses;\n import com.azure.core.annotation.Get;\n-import com.azure.core.annotation.HeaderParam;\n import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.ServiceInterface;\n import com.azure.core.annotation.HostParam;\n import com.azure.core.annotation.PathParam;\n-import com.azure.core.annotation.QueryParam;\n-import com.azure.core.annotation.ReturnType;\n-import com.azure.core.annotation.ServiceInterface;\n import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.exception.ServiceResponseException;\n import com.azure.core.http.rest.RestProxy;\n import com.azure.core.util.Context;\n import reactor.core.publisher.Mono;\n \n-/** An instance of this class provides access to all the operations defined in ModelsRepository. */\n+/**\n+ * An instance of this class provides access to all the operations defined in ModelsRepository.\n+ */\n public final class ModelsRepositoryImpl {\n-    /** The proxy service used to perform REST calls. */\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n     private final ModelsRepositoryService service;\n \n-    /** The service client containing this operation class. */\n+    /**\n+     * The service client containing this operation class.\n+     */\n     private final ModelsRepositoryAPIImpl client;\n \n     /**\n@@ -32,53 +37,51 @@\n      */\n     ModelsRepositoryImpl(ModelsRepositoryAPIImpl client) {\n         this.service =\n-                RestProxy.create(ModelsRepositoryService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+            RestProxy.create(ModelsRepositoryService.class, client.getHttpPipeline());\n         this.client = client;\n     }\n \n-    /**\n-     * The interface defining all the services for ModelsRepositoryAPI to be used by the proxy service to\n-     * perform REST calls.\n-     */\n-    @Host(\"{$host}\")\n-    @ServiceInterface(name = \"ModelsRepositoryAPI\")\n-    private interface ModelsRepositoryService {\n-        @Get(\"{path}\")\n-        @ExpectedResponses({200})\n-        Mono<String> getById(\n-                @HostParam(\"$host\") String host,\n-                @HeaderParam(\"traceparent\") String traceparent,\n-                @HeaderParam(\"tracestate\") String tracestate,\n-                @PathParam(\"id\") String id,\n-                @QueryParam(\"api-version\") String apiVersion,\n-                Context context);\n-    }\n-\n     /**\n      * Retrieves a dtmi model. Status codes: * 200 OK * 400 Bad Request * InvalidArgument\n      *\n-     * @param path The path of the dtmi. The id is unique within the service and case sensitive.\n+     * @param path    The path of the dtmi. The id is unique within the service and case sensitive.\n      * @param context The context to associate with this operation.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      * @return any object.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<String> getByIdWithResponseAsync(\n-            String path, Context context) {\n+    public Mono<byte[]> getModelFromPathWithResponseAsync(\n+        String path, Context context) {\n         if (this.client.getHost() == null) {\n             return Mono.error(\n-                    new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\"));\n+                new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\"));\n         }\n         if (path == null) {\n-            return Mono.error(new IllegalArgumentException(\"Parameter id is required and cannot be null.\"));\n+            return Mono.error(new IllegalArgumentException(\"Parameter 'path' is required and cannot be null.\"));\n         }\n \n-        String traceparentInternal = null;\n-        String traceparent = traceparentInternal;\n-        String tracestateInternal = null;\n-        String tracestate = tracestateInternal;\n-        return service.getById(\n-                this.client.getHost(), traceparent, tracestate, path, this.client.getApiVersion(), context);\n+        return service.getModelFromPath(\n+            this.client.getHost(), path, context)\n+            .onErrorMap(error ->\n+                new ServiceResponseException(\n+                    String.format(StandardStrings.ERROR_FETCHING_MODEL_CONTENT, path),\n+                    error));\n+    }\n+\n+    /**\n+     * The interface defining all the services for ModelsRepositoryAPI to be used by the proxy service to\n+     * perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"ModelsRepositoryAPI\")\n+    private interface ModelsRepositoryService {\n+\n+        @Get(\"{path}\")\n+        @ExpectedResponses({200})\n+        Mono<byte[]> getModelFromPath(\n+            @HostParam(\"$host\") String host,\n+            @PathParam(\"path\") String path,\n+            Context context);\n     }\n }"
  },
  {
    "sha": "c6746564d277848df74105ba0944294e0363f13d",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/RepositoryHandler.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/RepositoryHandler.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/RepositoryHandler.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/RepositoryHandler.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,135 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+import com.azure.core.exception.AzureException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.iot.modelsrepository.DtmiConventions;\n+import com.azure.iot.modelsrepository.ModelsDependencyResolution;\n+import com.azure.iot.modelsrepository.implementation.models.FetchResult;\n+import com.azure.iot.modelsrepository.implementation.models.ModelMetadata;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.List;\n+import java.util.LinkedList;\n+import java.util.Locale;\n+\n+\n+public final class RepositoryHandler {\n+\n+    private final URI repositoryUri;\n+    private final ModelFetcher modelFetcher;\n+    private final ClientLogger logger;\n+\n+    public RepositoryHandler(URI repositoryUri, ModelsRepositoryAPIImpl protocolLayer) {\n+        this.repositoryUri = repositoryUri;\n+        this.logger = new ClientLogger(RepositoryHandler.class);\n+\n+        if (this.repositoryUri.getScheme().toLowerCase(Locale.getDefault()).startsWith(ModelsRepositoryConstants.FILE)) {\n+            this.modelFetcher = new FileModelFetcher();\n+        } else {\n+            this.modelFetcher = new HttpModelFetcher(protocolLayer);\n+        }\n+    }\n+\n+    public Mono<Map<String, String>> processAsync(String dtmi, ModelsDependencyResolution resolutionOptions, Context context) {\n+        return processAsync(Collections.singletonList(dtmi), resolutionOptions, context);\n+    }\n+\n+    public Mono<Map<String, String>> processAsync(Iterable<String> dtmis, ModelsDependencyResolution\n+        resolutionOptions, Context context) {\n+\n+        Map<String, String> processedModels = new HashMap<>();\n+        Queue<String> modelsToProcess = prepareWork(dtmis);\n+\n+        return processAsync(modelsToProcess, resolutionOptions, context, processedModels)\n+            .last()\n+            .map(IntermediateFetchResult::getMap);\n+    }\n+\n+    private Flux<IntermediateFetchResult> processAsync(\n+        Queue<String> remainingWork,\n+        ModelsDependencyResolution resolutionOption,\n+        Context context,\n+        Map<String, String> currentResults) {\n+\n+        if (remainingWork.isEmpty()) {\n+            return Flux.empty();\n+        }\n+\n+        String targetDtmi = remainingWork.poll();\n+\n+        logger.info(String.format(StandardStrings.PROCESSING_DTMIS, targetDtmi));\n+\n+        return modelFetcher.fetchAsync(targetDtmi, repositoryUri, resolutionOption, context)\n+            .map(result -> new IntermediateFetchResult(result, currentResults))\n+            .expand(customType -> {\n+                Map<String, String> results = customType.getMap();\n+                FetchResult response = customType.getFetchResult();\n+\n+                if (response.isFromExpanded()) {\n+                    try {\n+                        Map<String, String> expanded = new ModelsQuery(response.getDefinition()).listToMap();\n+                        for (Map.Entry<String, String> item : expanded.entrySet()) {\n+                            if (!results.containsKey(item.getKey())) {\n+                                results.put(item.getKey(), item.getValue());\n+                            }\n+                        }\n+\n+                        return processAsync(remainingWork, resolutionOption, context, results);\n+                    } catch (Exception e) {\n+                        return Mono.error(e);\n+                    }\n+                }\n+\n+                try {\n+                    ModelMetadata metadata = new ModelsQuery(response.getDefinition()).parseModel();\n+\n+                    if (resolutionOption == ModelsDependencyResolution.ENABLED || resolutionOption == ModelsDependencyResolution.TRY_FROM_EXPANDED) {\n+                        List<String> dependencies = metadata.getDependencies();\n+\n+                        if (dependencies.size() > 0) {\n+                            logger.info(StandardStrings.DISCOVERED_DEPENDENCIES, String.join(\"\\\", \\\"\", dependencies));\n+                        }\n+\n+                        remainingWork.addAll(dependencies);\n+                    }\n+\n+                    String parsedDtmi = metadata.getId();\n+                    if (!parsedDtmi.equals(targetDtmi)) {\n+                        logger.error(String.format(StandardStrings.INCORRECT_DTMI_CASING, targetDtmi, parsedDtmi));\n+                        String errorMessage = String.format(StandardStrings.GENERIC_GET_MODELS_ERROR, targetDtmi) + String.format(StandardStrings.INCORRECT_DTMI_CASING, targetDtmi, parsedDtmi);\n+\n+                        return Mono.error(new AzureException(errorMessage));\n+                    }\n+\n+                    results.put(targetDtmi, response.getDefinition());\n+                    return processAsync(remainingWork, resolutionOption, context, results);\n+\n+                } catch (Exception e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    private Queue<String> prepareWork(Iterable<String> dtmis) {\n+        Queue<String> modelsToProcess = new LinkedList<>();\n+        for (String dtmi : dtmis) {\n+            if (!DtmiConventions.isValidDtmi(dtmi)) {\n+                logger.logExceptionAsError(new IllegalArgumentException(String.format(StandardStrings.INVALID_DTMI_FORMAT_S, dtmi)));\n+            }\n+\n+            modelsToProcess.add(dtmi);\n+        }\n+\n+        return modelsToProcess;\n+    }\n+}"
  },
  {
    "sha": "f0ec60466903034db494cebe48e3f8122d43cbf2",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/StandardStrings.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/StandardStrings.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/StandardStrings.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/StandardStrings.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation;\n+\n+public class StandardStrings {\n+    public static final String GENERIC_GET_MODELS_ERROR = \"Failure handling \\\"%s\\\".\";\n+    public static final String INVALID_DTMI_FORMAT_S = \"Invalid DTMI format \\\"%s\\\".\";\n+    public static final String PROCESSING_DTMIS = \"Processing DTMI \\\"%s\\\". \";\n+    public static final String DISCOVERED_DEPENDENCIES = \"Discovered dependencies \\\"%s\\\".\";\n+    public static final String FETCHING_MODEL_CONTENT = \"Attempting to fetch model content from \\\"%s\\\".\";\n+    public static final String ERROR_FETCHING_MODEL_CONTENT = \"Model file \\\"%s\\\" not found or not accessible in target repository.\";\n+    public static final String INCORRECT_DTMI_CASING = \"Fetched model has incorrect DTMI casing. Expected \\\"%s\\\", parsed \\\"%s\\\".\";\n+}"
  },
  {
    "sha": "78111f08c57e7f2fbd4b1ad720c66cc927f04f5b",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/FetchResult.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/FetchResult.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/FetchResult.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/FetchResult.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.iot.modelsrepository.implementation.ModelsRepositoryConstants;\n+\n+import java.util.Locale;\n+\n+/**\n+ * The FetchResult class has the purpose of containing key elements of\n+ * an IModelFetcher Fetch() operation including model definition, path and whether\n+ * it was from an expanded (pre-calculated) fetch.\n+ */\n+@Fluent\n+public class FetchResult {\n+\n+    private String definition;\n+    private String path;\n+\n+    /**\n+     * Gets the dtmi model definition\n+     *\n+     * @return Model definition\n+     */\n+    public String getDefinition() {\n+        return this.definition;\n+    }\n+\n+    /**\n+     * Sets the model definition\n+     *\n+     * @param definition the model definition\n+     * @return the FetchResult object itself\n+     */\n+    public FetchResult setDefinition(String definition) {\n+        this.definition = definition;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the dtmi path.\n+     *\n+     * @return dtmi path.\n+     */\n+    public String getPath() {\n+        return this.path;\n+    }\n+\n+    /**\n+     * Sets the dtmi path.\n+     *\n+     * @param path the dtmi path.\n+     * @return the {@link FetchResult} object itself\n+     */\n+    public FetchResult setPath(String path) {\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Whether the result is from an expanded (pre-calculated) fetch or not.\n+     *\n+     * @return true: if result is from an expanded fetch operation.\n+     * false: if path is null or result is not from an expanded fetch operation.\n+     */\n+    public boolean isFromExpanded() {\n+        if (this.path == null) {\n+            return false;\n+        }\n+\n+        return this.path.toLowerCase(Locale.getDefault()).endsWith(ModelsRepositoryConstants.JSON_EXPANDED_EXTENSION);\n+    }\n+}"
  },
  {
    "sha": "832ebfe6f3ca8c6747bf1f173750a9aecd3126a2",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/ModelMetadata.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/ModelMetadata.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/ModelMetadata.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/com/azure/iot/modelsrepository/implementation/models/ModelMetadata.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository.implementation.models;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+/**\n+ * ModelMetadata is designated to store KPIs from model parsing.\n+ */\n+public class ModelMetadata {\n+    private final String id;\n+    private final List<String> extend;\n+    private final List<String> componentSchemas;\n+    private final List<String> dependencies;\n+\n+    public ModelMetadata(String id, List<String> extend, List<String> componentSchemas) {\n+        this.id = id;\n+        this.extend = extend;\n+        this.componentSchemas = componentSchemas;\n+        HashSet<String> mergedList = new HashSet<>(extend);\n+        mergedList.addAll(componentSchemas);\n+        this.dependencies = new ArrayList<>(mergedList);\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public List<String> getExtend() {\n+        return this.extend;\n+    }\n+\n+    public List<String> getComponentSchemas() {\n+        return this.componentSchemas;\n+    }\n+\n+    public List<String> getDependencies() {\n+        return this.dependencies;\n+    }\n+}"
  },
  {
    "sha": "15d7957592362d7089ac8c062fc5e5476b24bc7c",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/module-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/module-info.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/main/java/module-info.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -8,4 +8,5 @@\n \n     opens com.azure.iot.modelsrepository to com.fasterxml.jackson.databind;\n     opens com.azure.iot.modelsrepository.implementation to com.fasterxml.jackson.databind, com.azure.core;\n+    opens com.azure.iot.modelsrepository.implementation.models to com.fasterxml.jackson.databind, com.azure.core;\n }"
  },
  {
    "sha": "ea97823e89be07714a6ce813c44ed218970bad40",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/DtmiConventionTests.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/DtmiConventionTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/DtmiConventionTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/DtmiConventionTests.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+class DtmiConventionTests {\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+        \"dtmi:com:Example:Model;1, dtmi/com/example/model-1.json\",\n+        \"dtmi:com:example:Model;1, dtmi/com/example/model-1.json\",\n+        \"dtmi:com:example:Model:1, \",\n+        \"'',\",\n+        \",\"\n+    })\n+    public void dtmiToPathTest(String input, String expected) {\n+\n+        if (expected == null) {\n+            Assertions.assertThrows(IllegalArgumentException.class, () -> DtmiConventions.dtmiToPath(input));\n+            return;\n+        }\n+\n+        String actualValue = DtmiConventions.dtmiToPath(input);\n+        Assertions.assertEquals(expected, actualValue);\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+        \"https://localhost/repository/, https://localhost/repository/dtmi/com/example/thermostat-1.json\",\n+        \"https://localhost/REPOSITORY,  https://localhost/REPOSITORY/dtmi/com/example/thermostat-1.json\",\n+        \"file:///path/to/repository/,   file:///path/to/repository/dtmi/com/example/thermostat-1.json\",\n+        \"file://path/to/RepoSitory,     file://path/to/RepoSitory/dtmi/com/example/thermostat-1.json\",\n+        \"C:\\\\path\\\\to\\\\repository\\\\, file:///C:/path/to/repository/dtmi/com/example/thermostat-1.json\",\n+        \"\\\\\\\\server\\\\repository,    file:////server/repository/dtmi/com/example/thermostat-1.json\"\n+    })\n+    public void getModelUriTests(String repository, String expectedUri) throws URISyntaxException {\n+        final String dtmi = \"dtmi:com:example:Thermostat;1\";\n+\n+        URI repositoryUri = DtmiConventions.convertToUri(repository);\n+\n+        if (expectedUri == null || expectedUri.isEmpty()) {\n+            Assertions.assertThrows(IllegalArgumentException.class, () -> DtmiConventions.getModelUri(dtmi, repositoryUri, false));\n+            return;\n+        }\n+\n+        URI modelUri = DtmiConventions.getModelUri(dtmi, repositoryUri, false);\n+        Assertions.assertEquals(expectedUri, modelUri.toString());\n+    }\n+    \n+    @ParameterizedTest\n+    @CsvSource({\n+        \"dtmi:com:example:Thermostat;1, true\",\n+        \"dtmi:contoso:scope:entity;2, true\",\n+        \"dtmi:com:example:Thermostat:1, false\",\n+        \"dtmi:com:example::Thermostat;1, false\",\n+        \"com:example:Thermostat;1, false\",\n+        \"'', false\",\n+        \"null, false\"\n+    })\n+    public void isValidDtmi(String dtmi, boolean expected) {\n+        Assertions.assertEquals(expected, DtmiConventions.isValidDtmi(dtmi));\n+    }\n+}"
  },
  {
    "sha": "a646a85bec9019ef038369ae57ad76a3fdaef235",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelQueryTests.java",
    "status": "added",
    "additions": 303,
    "deletions": 0,
    "changes": 303,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelQueryTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelQueryTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelQueryTests.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,303 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import com.azure.iot.modelsrepository.implementation.ModelsQuery;\n+import com.azure.iot.modelsrepository.implementation.models.ModelMetadata;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+class ModelQueryTests {\n+    public static final String MODEL_TEMPLATE = \"\"\n+        +\n+        \"{\\n\"\n+        +\n+        \"%s \\n\"\n+        +\n+        \"\\\"@type\\\": \\\"Interface\\\",\\n\"\n+        +\n+        \"\\\"displayName\\\": \\\"Phone\\\",\\n\"\n+        +\n+        \"%s \\n\"\n+        +\n+        \"%s \\n\"\n+        +\n+        \"\\\"@context\\\": \\\"dtmi:dtdl:context;2\\\"\\n\"\n+        +\n+        \"}\";\n+\n+    @ParameterizedTest\n+    @CsvSource(\n+        value = {\n+            \"\\\"@id\\\":\\\"dtmi:com:example:thermostat;1\\\", | dtmi:com:example:thermostat;1\",\n+            \"\\\"@id\\\": \\\"\\\", | ''\"\n+        },\n+        delimiter = '|')\n+    public void getIdTests(String id, String expected) throws JsonProcessingException {\n+        String modelContent = String.format(MODEL_TEMPLATE, id, \"\", \"\");\n+        ModelsQuery query = new ModelsQuery(modelContent);\n+        String modelId = query.parseModel().getId();\n+\n+        Assertions.assertEquals(expected, modelId);\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource(\n+        value = {\n+            \"\\\"contents\\\": \"\n+                +\n+                \" [\"\n+                +\n+                \"     {\"\n+                +\n+                \"         \\\"@type\\\": \\\"Property\\\",\"\n+                +\n+                \"         \\\"name\\\": \\\"capacity\\\",\"\n+                +\n+                \"         \\\"schema\\\": \\\"integer\\\"\"\n+                +\n+                \"     },\"\n+                +\n+                \"     {\"\n+                +\n+                \"             \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"         \\\"name\\\": \\\"frontCamera\\\",\"\n+                +\n+                \"         \\\"schema\\\": \\\"dtmi:com:example:Camera;3\\\"\"\n+                +\n+                \"     },\"\n+                +\n+                \"     {\"\n+                +\n+                \"         \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"         \\\"name\\\": \\\"backCamera\\\",\"\n+                +\n+                \"         \\\"schema\\\": \\\"dtmi:com:example:Camera;3\\\"\"\n+                +\n+                \"     },\"\n+                +\n+                \"     {\"\n+                +\n+                \"         \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"         \\\"name\\\": \\\"deviceInfo\\\",\"\n+                +\n+                \"         \\\"schema\\\": \\\"dtmi:azure:DeviceManagement:DeviceInformation;1\\\"\"\n+                +\n+                \"     }\"\n+                +\n+                \" ],\"\n+                +\n+                \"| dtmi:com:example:Camera;3,dtmi:com:example:Camera;3,dtmi:azure:DeviceManagement:DeviceInformation;1\",\n+            \"\\\"contents\\\": \"\n+                +\n+                \"[\"\n+                +\n+                \"   {\"\n+                +\n+                \"       \\\"@type\\\": \\\"Property\\\",\"\n+                +\n+                \"       \\\"name\\\": \\\"capacity\\\",\"\n+                +\n+                \"       \\\"schema\\\": \\\"integer\\\"\"\n+                +\n+                \"   }\"\n+                +\n+                \"],\"\n+                +\n+                \"| ''\",\n+        },\n+        delimiter = '|')\n+    public void getComponentSchemaTests(String contents, String expected) throws JsonProcessingException {\n+        List<String> expectedDtmis;\n+\n+        if (expected.isEmpty()) {\n+            expectedDtmis = new ArrayList<>();\n+        } else {\n+            expectedDtmis = Arrays.asList(expected.split(\",\"));\n+        }\n+\n+        String modelContent = String.format(MODEL_TEMPLATE, \"\", \"\", contents);\n+        ModelsQuery query = new ModelsQuery(modelContent);\n+        List<String> componentSchemas = query.parseModel().getComponentSchemas();\n+\n+        Assertions.assertEquals(expectedDtmis.size(), componentSchemas.size(), \"number of expected dtmis should match the parsed version\");\n+\n+        Assertions.assertTrue(expectedDtmis.containsAll(componentSchemas));\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource(\n+        value = {\n+            \"\\\"extends\\\": [\\\"dtmi:com:example:Camera;3\\\",\\\"dtmi:azure:DeviceManagement:DeviceInformation;1\\\"],\"\n+                +\n+                \"|\"\n+                + \"dtmi:com:example:Camera;3,dtmi:azure:DeviceManagement:DeviceInformation;1\",\n+            \"\\\"extends\\\":[], | ''\",\n+            \"\\\"extends\\\": \\\"dtmi:com:example:Camera;3\\\", | dtmi:com:example:Camera;3\"\n+        },\n+        delimiter = '|')\n+    public void getExtendsTests(String extend, String expected) throws JsonProcessingException {\n+        List<String> expectedDtmis;\n+\n+        if (expected.isEmpty()) {\n+            expectedDtmis = new ArrayList<>();\n+        } else {\n+            expectedDtmis = Arrays.asList(expected.split(\",\"));\n+        }\n+\n+        String modelContent = String.format(MODEL_TEMPLATE, \"\", extend, \"\");\n+        ModelsQuery query = new ModelsQuery(modelContent);\n+        List<String> componentSchemas = query.parseModel().getExtend();\n+\n+        Assertions.assertEquals(expectedDtmis.size(), componentSchemas.size(), \"number of expected dtmis should match the parsed value\");\n+\n+        Assertions.assertTrue(expectedDtmis.containsAll(componentSchemas));\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource(\n+        value = {\n+            \"\\\"@id\\\": \\\"dtmi:com:example:thermostat;1\\\",\"\n+                +\n+                \"|\"\n+                +\n+                \"\\\"extends\\\": [\\\"dtmi:com:example:Camera;3\\\",\\\"dtmi:azure:DeviceManagement:DeviceInformation;1\\\"],\"\n+                +\n+                \"|\"\n+                +\n+                \"\\\"contents\\\": \"\n+                +\n+                \"   [\"\n+                +\n+                \"       {\"\n+                +\n+                \"           \\\"@type\\\": \\\"Property\\\",\"\n+                +\n+                \"           \\\"name\\\": \\\"capacity\\\",\"\n+                +\n+                \"           \\\"schema\\\": \\\"integer\\\"\"\n+                +\n+                \"       },\"\n+                +\n+                \"       {\"\n+                +\n+                \"           \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"           \\\"name\\\": \\\"frontCamera\\\",\"\n+                +\n+                \"           \\\"schema\\\": \\\"dtmi:com:example:Camera;3\\\"\"\n+                +\n+                \"       },\"\n+                +\n+                \"       {\"\n+                +\n+                \"           \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"           \\\"name\\\": \\\"backCamera\\\",\"\n+                +\n+                \"           \\\"schema\\\": \\\"dtmi:com:example:Camera;3\\\"\"\n+                +\n+                \"       },\"\n+                +\n+                \"       {\"\n+                +\n+                \"           \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"           \\\"name\\\": \\\"deviceInfo\\\",\"\n+                +\n+                \"           \\\"schema\\\": \\\"dtmi:azure:DeviceManagement:DeviceInformation;1\\\"\"\n+                +\n+                \"       }],\"\n+                +\n+                \"|\"\n+                +\n+                \"dtmi:com:example:Camera;3,dtmi:azure:DeviceManagement:DeviceInformation;1\",\n+\n+            \"\\\"@id\\\": \\\"dtmi:example:Interface1;1\\\",\"\n+                +\n+                \"|\"\n+                +\n+                \"\\\"extends\\\": [\"\n+                +\n+                \"   \\\"dtmi:example:Interface2;1\\\", \"\n+                +\n+                \"   {\"\n+                +\n+                \"       \\\"@id\\\": \\\"dtmi:example:Interface3;1\\\",\"\n+                +\n+                \"       \\\"@type\\\": \\\"Interface\\\",\"\n+                +\n+                \"       \\\"contents\\\": \"\n+                +\n+                \"        [\"\n+                +\n+                \"           {\"\n+                +\n+                \"               \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"               \\\"name\\\": \\\"comp1\\\",\"\n+                +\n+                \"               \\\"schema\\\": [\\\"dtmi:example:Interface4;1\\\"]\"\n+                +\n+                \"            },\"\n+                +\n+                \"            {\"\n+                +\n+                \"               \\\"@type\\\": \\\"Component\\\",\"\n+                +\n+                \"               \\\"name\\\": \\\"comp2\\\",\"\n+                +\n+                \"               \\\"schema\\\": \"\n+                +\n+                \"               {\"\n+                +\n+                \"                   \\\"@id\\\": \\\"dtmi:example:Interface5;1\\\",\"\n+                +\n+                \"                   \\\"@type\\\": \\\"Interface\\\",\"\n+                +\n+                \"                   \\\"extends\\\": \\\"dtmi:example:Interface6;1\\\"\"\n+                +\n+                \"               }\"\n+                +\n+                \"             }\"\n+                +\n+                \"       ]\"\n+                +\n+                \"   }],\"\n+                +\n+                \"| ''\"\n+                +\n+                \"|\"\n+                +\n+                \"dtmi:example:Interface2;1,dtmi:example:Interface4;1,dtmi:example:Interface6;1\"\n+        },\n+        delimiter = '|')\n+    public void getModelDependenciesTests(String id, String extend, String contents, String expected) throws JsonProcessingException {\n+        List<String> expectedDtmis;\n+\n+        if (expected.isEmpty()) {\n+            expectedDtmis = new ArrayList<>();\n+        } else {\n+            expectedDtmis = Arrays.asList(expected.split(\",\"));\n+        }\n+\n+        String modelContent = String.format(MODEL_TEMPLATE, id, extend, contents);\n+        ModelsQuery query = new ModelsQuery(modelContent);\n+        ModelMetadata metadata = query.parseModel();\n+\n+        Assertions.assertEquals(expectedDtmis.size(), metadata.getDependencies().size());\n+        Assertions.assertTrue(expectedDtmis.containsAll(metadata.getDependencies()));\n+    }\n+\n+\n+}"
  },
  {
    "sha": "41bd6d6ee0e9d9595aec7bbdca6da1a98a01c7e2",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelRepositoryIntegrationTests.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelRepositoryIntegrationTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelRepositoryIntegrationTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelRepositoryIntegrationTests.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import com.azure.core.exception.ServiceResponseException;\n+import com.azure.core.http.HttpClient;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.iot.modelsrepository.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+\n+class ModelRepositoryIntegrationTests extends ModelsRepositoryTestBase {\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.iot.modelsrepository.TestHelper#getTestParameters\")\n+    public void getModelsSingleDtmiNoDependencies(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        final String dtmi = \"dtmi:com:example:Thermostat;1\";\n+\n+        ModelsRepositoryAsyncClient client = getAsyncClient(httpClient, serviceVersion, repositoryUri);\n+\n+        StepVerifier\n+            .create(client.getModels(dtmi))\n+            .assertNext(model -> Assertions.assertTrue(model.keySet().size() == 1 && model.containsKey(dtmi)))\n+            .verifyComplete();\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.iot.modelsrepository.TestHelper#getTestParameters\")\n+    public void getModelsSingleDtmiDoesNotExist(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        final String dtmi = \"dtmi:com:example:Thermostatddd;1\";\n+\n+        ModelsRepositoryAsyncClient client = getAsyncClient(httpClient, serviceVersion, repositoryUri);\n+\n+        StepVerifier\n+            .create(client.getModels(dtmi))\n+            .verifyErrorSatisfies(error -> Assertions.assertTrue(error.getClass() == ServiceResponseException.class));\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.iot.modelsrepository.TestHelper#getTestParameters\")\n+    public void getModelsSingleDtmiWithDependencies(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        final String dtmi = \"dtmi:com:example:TemperatureController;1\";\n+        List<String> expectedDependencies = Arrays.asList(\"dtmi:com:example:Thermostat;1\", \"dtmi:azure:DeviceManagement:DeviceInformation;1\");\n+        List<String> expectedDtmis = new ArrayList<>(expectedDependencies);\n+        expectedDtmis.add(dtmi);\n+\n+        ModelsRepositoryAsyncClient client = getAsyncClient(httpClient, serviceVersion, repositoryUri);\n+\n+        StepVerifier\n+            .create(client.getModels(dtmi))\n+            .assertNext(model -> Assertions.assertTrue(model.keySet().size() == expectedDtmis.size() && model.keySet().containsAll(expectedDependencies)))\n+            .verifyComplete();\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.iot.modelsrepository.TestHelper#getTestParameters\")\n+    public void getModelsEnsureNoDuplicates(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        List<String> inputDtmis = Arrays.asList(\n+            \"dtmi:azure:DeviceManagement:DeviceInformation;1\",\n+            \"dtmi:azure:DeviceManagement:DeviceInformation;1\"\n+        );\n+\n+        ModelsRepositoryAsyncClient client = getAsyncClient(httpClient, serviceVersion, repositoryUri);\n+\n+        StepVerifier\n+            .create(client.getModels(inputDtmis))\n+            .assertNext(model -> Assertions.assertEquals(model.keySet().size(), 1))\n+            .verifyComplete();\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.iot.modelsrepository.TestHelper#getTestParameters\")\n+    public void getModelsSingleDtmiWithDepsDisableDependencyResolution(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        final String dtmi = \"dtmi:com:example:Thermostat;1\";\n+        ModelsRepositoryAsyncClient client = getAsyncClient(httpClient, serviceVersion, repositoryUri);\n+\n+        StepVerifier\n+            .create(client.getModels(dtmi, ModelsDependencyResolution.DISABLED))\n+            .assertNext(model -> Assertions.assertTrue(model.keySet().size() == 1 && model.containsKey(dtmi)))\n+            .verifyComplete();\n+    }\n+}"
  },
  {
    "sha": "4ad47695759992d5b762a574935a1e509eb06e73",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelsRepositoryTestBase.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelsRepositoryTestBase.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelsRepositoryTestBase.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/ModelsRepositoryTestBase.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.test.TestBase;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+class ModelsRepositoryTestBase extends TestBase {\n+\n+    private static final String PLAYBACK_ENDPOINT = \"https://playback.net/\";\n+\n+\n+    protected ModelsRepositoryClientBuilder getModelsRepositoryClientbuilder(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        ModelsRepositoryClientBuilder builder = new ModelsRepositoryClientBuilder();\n+        URI playbackRepositoryUri = new URI(PLAYBACK_ENDPOINT);\n+        builder.serviceVersion(serviceVersion);\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+            // Use fake credentials for playback mode.\n+            // Connect to a special host when running tests in playback mode.\n+            builder.repositoryEndpoint(playbackRepositoryUri);\n+            return builder;\n+        }\n+\n+        // If it is record mode, we add record mode policies to the builder.\n+        // There is no isRecordMode method on interceptorManger.\n+        if (!interceptorManager.isLiveMode()) {\n+            builder.addPolicy(interceptorManager.getRecordPolicy());\n+        }\n+\n+        builder.repositoryEndpoint(repositoryUri);\n+        builder.httpClient(httpClient);\n+        builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n+\n+        return builder;\n+    }\n+\n+    protected ModelsRepositoryClient getClient(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        return getModelsRepositoryClientbuilder(httpClient, serviceVersion, repositoryUri)\n+            .buildClient();\n+    }\n+\n+    protected ModelsRepositoryAsyncClient getAsyncClient(HttpClient httpClient, ModelsRepositoryServiceVersion serviceVersion, URI repositoryUri) throws URISyntaxException {\n+        return getModelsRepositoryClientbuilder(httpClient, serviceVersion, repositoryUri)\n+            .buildAsyncClient();\n+    }\n+}"
  },
  {
    "sha": "23a2b72060b4edc9731f2d2c73555d67c84084bb",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestHelper.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestHelper.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestHelper.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestHelper.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.iot.modelsrepository.implementation.ModelsRepositoryConstants;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.azure.core.test.TestBase.AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL;\n+import static com.azure.core.test.TestBase.getHttpClients;\n+\n+class TestHelper {\n+    public static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_IOT_MODELSREPOSITORY_TEST_SERVICE_VERSIONS = \"AZURE_IOT_MODELSREPOSITORY_TEST_SERVICE_VERSIONS\";\n+    private static final String LOCAL_TEST_REPOSITORY_PATH = System.getProperty(\"user.dir\") + \"/src/test/resources/TestModelRepo/\";\n+\n+    private static final String SERVICE_VERSION_FROM_ENV =\n+        Configuration.getGlobalConfiguration().get(AZURE_IOT_MODELSREPOSITORY_TEST_SERVICE_VERSIONS);\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getApplicableRepositoryUris()\n+            .forEach(uri ->\n+                getHttpClients()\n+                    .forEach(httpClient -> Arrays\n+                        .stream(ModelsRepositoryServiceVersion.values())\n+                        .filter(TestHelper::shouldServiceVersionBeTested)\n+                        .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion, uri)))));\n+\n+        return argumentsList.stream();\n+    }\n+\n+    static Stream<URI> getApplicableRepositoryUris() {\n+        ArrayList<URI> uriList = new ArrayList<>();\n+        uriList.add(DtmiConventions.convertToUri(ModelsRepositoryConstants.DEFAULT_MODELS_REPOSITORY_ENDPOINT));\n+        uriList.add(DtmiConventions.convertToUri(LOCAL_TEST_REPOSITORY_PATH));\n+        return StreamSupport.stream(uriList.spliterator(), false);\n+    }\n+\n+    /**\n+     * Returns whether the given service version match the rules of test framework.\n+     *\n+     * <ul>\n+     * <li>Using latest service version as default if no environment variable is set.</li>\n+     * <li>If it's set to ALL, all Service versions in {@link ModelsRepositoryServiceVersion} will be tested.</li>\n+     * <li>Otherwise, Service version string should match env variable.</li>\n+     * </ul>\n+     * <p>\n+     * Environment values currently supported are: \"ALL\", \"${version}\".\n+     * Use comma to separate http clients want to test.\n+     * e.g. {@code set AZURE_TEST_SERVICE_VERSIONS = V1_0, V2_0}\n+     *\n+     * @param serviceVersion ServiceVersion needs to check\n+     * @return Boolean indicates whether filters out the service version or not.\n+     */\n+    private static boolean shouldServiceVersionBeTested(ModelsRepositoryServiceVersion serviceVersion) {\n+        if (CoreUtils.isNullOrEmpty(SERVICE_VERSION_FROM_ENV)) {\n+            return ModelsRepositoryServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        if (AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL.equalsIgnoreCase(SERVICE_VERSION_FROM_ENV)) {\n+            return true;\n+        }\n+        String[] configuredServiceVersionList = SERVICE_VERSION_FROM_ENV.split(\",\");\n+        return Arrays.stream(configuredServiceVersionList).anyMatch(configuredServiceVersion ->\n+            serviceVersion.getVersion().equals(configuredServiceVersion.trim()));\n+    }\n+}"
  },
  {
    "sha": "07c93842d20d85f94017398f23609c26a6a7ab0b",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestsAssetsHelpers.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestsAssetsHelpers.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestsAssetsHelpers.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/java/com/azure/iot/modelsrepository/TestsAssetsHelpers.java?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.iot.modelsrepository;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+class TestsAssetsHelpers {\n+    public static String readResourceFile(String filePathFromResources) throws IOException {\n+        String pathToResources = System.getProperty(\"user.dir\") + \"/src/test/resources/\" + filePathFromResources;\n+\n+        return new String(Files.readAllBytes(Paths.get(pathToResources)));\n+    }\n+}"
  },
  {
    "sha": "8a37e6d2c2c37c8407da2a6d324e0890a1eb6a35",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-1.json",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-1.json",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-1.json",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-1.json?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,64 @@\n+{\n+  \"@context\": \"dtmi:dtdl:context;2\",\n+  \"@id\": \"dtmi:azure:DeviceManagement:DeviceInformation;1\",\n+  \"@type\": \"Interface\",\n+  \"displayName\": \"Device Information\",\n+  \"contents\": [\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"manufacturer\",\n+      \"displayName\": \"Manufacturer\",\n+      \"schema\": \"string\",\n+      \"description\": \"Company name of the device manufacturer. This could be the same as the name of the original equipment manufacturer (OEM). Ex. Contoso.\"\n+    },\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"model\",\n+      \"displayName\": \"Device model\",\n+      \"schema\": \"string\",\n+      \"description\": \"Device model name or ID. Ex. Surface Book 2.\"\n+    },\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"swVersion\",\n+      \"displayName\": \"Software version\",\n+      \"schema\": \"string\",\n+      \"description\": \"Version of the software on your device. This could be the version of your firmware. Ex. 1.3.45\"\n+    },\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"osName\",\n+      \"displayName\": \"Operating system name\",\n+      \"schema\": \"string\",\n+      \"description\": \"Name of the operating system on the device. Ex. Windows 10 IoT Core.\"\n+    },\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"processorArchitecture\",\n+      \"displayName\": \"Processor architecture\",\n+      \"schema\": \"string\",\n+      \"description\": \"Architecture of the processor on the device. Ex. x64 or ARM.\"\n+    },\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"processorManufacturer\",\n+      \"displayName\": \"Processor manufacturer\",\n+      \"schema\": \"string\",\n+      \"description\": \"Name of the manufacturer of the processor on the device. Ex. Intel.\"\n+    },\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"totalStorage\",\n+      \"displayName\": \"Total storage\",\n+      \"schema\": \"double\",\n+      \"description\": \"Total available storage on the device in kilobytes. Ex. 2048000 kilobytes.\"\n+    },\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"totalMemory\",\n+      \"displayName\": \"Total memory\",\n+      \"schema\": \"double\",\n+      \"description\": \"Total available memory on the device in kilobytes. Ex. 256000 kilobytes.\"\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d35b8a3e3a1d5e71cc5bb3a5d6e3327067dc02b6",
    "filename": "sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-2.json",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-2.json",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a50da569384a162a25dc7a26ecbf9f40c9c8cb8c/sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-2.json",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/modelsrepository/azure-iot-modelsrepository/src/test/resources/TestModelRepo/dtmi/azure/devicemanagement/deviceinformation-2.json?ref=a50da569384a162a25dc7a26ecbf9f40c9c8cb8c",
    "patch": "@@ -0,0 +1,16 @@\n+{\n+  \"@context\": \"dtmi:dtdl:context;2\",\n+  \"@id\": \"dtmi:azure:DeviceManagement:DeviceInformation;2\",\n+  \"@type\": \"Interface\",\n+  \"extends\": \"dtmi:azure:DeviceManagement:DeviceInformation;1\",\n+  \"displayName\": \"Device Information\",\n+  \"contents\": [\n+    {\n+      \"@type\": \"Property\",\n+      \"name\": \"osKernelVersion\",\n+      \"displayName\": \"OS Kernel Version\",\n+      \"schema\": \"string\",\n+      \"description\": \"OS Kernel Version. Ex. Linux 4.15.0-54-generic x86_64.\"\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  }
]
