[
  {
    "sha": "8ac63f07fb8b3ffeab9c17288d7462f402442e93",
    "filename": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java",
    "status": "modified",
    "additions": 16,
    "deletions": 9,
    "changes": 25,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -121,10 +121,10 @@ public Object invoke(Object proxy, final Method method, Object[] args) {\n             }\n \n             final SwaggerMethodParser methodParser = getMethodParser(method);\n-            final HttpRequest request = createHttpRequest(methodParser, args);\n             Context context = methodParser.setContext(args)\n                 .addData(\"caller-method\", methodParser.getFullyQualifiedMethodName())\n                 .addData(\"azure-eagerly-read-response\", isReturnTypeDecodable(methodParser.getReturnType()));\n+            final HttpRequest request = createHttpRequest(methodParser, args, context);\n             context = startTracingSpan(method, context);\n \n             if (request.getBody() != null) {\n@@ -204,7 +204,7 @@ private Context startTracingSpan(Method method, Context context) {\n      * @return a HttpRequest\n      * @throws IOException thrown if the body contents cannot be serialized\n      */\n-    private HttpRequest createHttpRequest(SwaggerMethodParser methodParser, Object[] args) throws IOException {\n+    private HttpRequest createHttpRequest(SwaggerMethodParser methodParser, Object[] args, Context context) throws IOException {\n         // Sometimes people pass in a full URL for the value of their PathParam annotated argument.\n         // This definitely happens in paging scenarios. In that case, just use the full URL and\n         // ignore the Host annotation.\n@@ -235,7 +235,7 @@ private HttpRequest createHttpRequest(SwaggerMethodParser methodParser, Object[]\n \n         final URL url = urlBuilder.toUrl();\n         final HttpRequest request = configRequest(new HttpRequest(methodParser.getHttpMethod(), url),\n-            methodParser, args);\n+            methodParser, args, context);\n \n         // Headers from Swagger method arguments always take precedence over inferred headers from body types\n         HttpHeaders httpHeaders = request.getHeaders();\n@@ -246,7 +246,7 @@ private HttpRequest createHttpRequest(SwaggerMethodParser methodParser, Object[]\n \n     @SuppressWarnings(\"unchecked\")\n     private HttpRequest configRequest(final HttpRequest request, final SwaggerMethodParser methodParser,\n-        final Object[] args) throws IOException {\n+        final Object[] args, Context context) throws IOException {\n         final Object bodyContentObject = methodParser.setBody(args);\n         if (bodyContentObject == null) {\n             request.getHeaders().set(\"Content-Length\", \"0\");\n@@ -257,7 +257,8 @@ private HttpRequest configRequest(final HttpRequest request, final SwaggerMethod\n             // If this is null or empty, the service interface definition is incomplete and should\n             // be fixed to ensure correct definitions are applied\n             if (contentType == null || contentType.isEmpty()) {\n-                if (bodyContentObject instanceof byte[] || bodyContentObject instanceof String) {\n+                if ((bodyContentObject instanceof byte[] && !context.getData(\"json-payload\").isPresent())\n+                    || bodyContentObject instanceof String) {\n                     contentType = ContentType.APPLICATION_OCTET_STREAM;\n                 } else {\n                     contentType = ContentType.APPLICATION_JSON;\n@@ -280,11 +281,17 @@ private HttpRequest configRequest(final HttpRequest request, final SwaggerMethod\n             }\n \n             if (isJson) {\n-                ByteArrayOutputStream stream = new AccessibleByteArrayOutputStream();\n-                serializer.serialize(bodyContentObject, SerializerEncoding.JSON, stream);\n+                if (bodyContentObject instanceof byte[] && context.getData(\"json-payload\").isPresent()) {\n+                    byte[] body = (byte[]) bodyContentObject;\n+                    request.setHeader(\"Content-Length\", String.valueOf(body.length));\n+                    request.setBody(Flux.defer(() -> Flux.just(ByteBuffer.wrap(body, 0, body.length))));\n+                } else {\n+                    ByteArrayOutputStream stream = new AccessibleByteArrayOutputStream();\n+                    serializer.serialize(bodyContentObject, SerializerEncoding.JSON, stream);\n \n-                request.setHeader(\"Content-Length\", String.valueOf(stream.size()));\n-                request.setBody(Flux.defer(() -> Flux.just(ByteBuffer.wrap(stream.toByteArray(), 0, stream.size()))));\n+                    request.setHeader(\"Content-Length\", String.valueOf(stream.size()));\n+                    request.setBody(Flux.defer(() -> Flux.just(ByteBuffer.wrap(stream.toByteArray(), 0, stream.size()))));\n+                }\n             } else if (FluxUtil.isFluxByteBuffer(methodParser.getBodyJavaType())) {\n                 // Content-Length or Transfer-Encoding: chunked must be provided by a user-specified header when a\n                 // Flowable<byte[]> is given for the body."
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/CHANGELOG.md",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/CHANGELOG.md",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/CHANGELOG.md?ref=7ad4c16edffc39708049086b6861a1ce404141f5"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/README.md",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/README.md",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/README.md",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/README.md?ref=7ad4c16edffc39708049086b6861a1ce404141f5"
  },
  {
    "sha": "636d8ba16ddc8555b71220c284023a846f624d3e",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/pom.xml",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/pom.xml",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/pom.xml",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/pom.xml?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version><!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-ai-textanalytics-perf</artifactId>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-ai-textanalytics-perf;current} -->\n+  <packaging>jar</packaging>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>perf-test-core</artifactId>\n+      <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:perf-test-core;current} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-ai-textanalytics</artifactId>\n+      <version>5.1.0-beta.5</version> <!-- {x-version-update;com.azure:azure-ai-textanalytics;current} -->\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-assembly-plugin</artifactId>\n+        <version>3.2.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-assembly-plugin;external_dependency} -->\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>single</goal>\n+            </goals>\n+            <configuration>\n+              <archive>\n+                <manifest>\n+                  <mainClass>\n+                    com.azure.ai.textanalytics.perf.App\n+                  </mainClass>\n+                </manifest>\n+              </archive>\n+              <descriptorRefs>\n+                <descriptorRef>jar-with-dependencies</descriptorRef>\n+              </descriptorRefs>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"
  },
  {
    "sha": "6d1c10272874d0661256610380c78b6d024efd3c",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/App.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/App.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/App.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/App.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -0,0 +1,10 @@\n+package com.azure.ai.textanalytics.perf;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+\n+public class App {\n+    public static void main(String[] args) {\n+        PerfStressProgram.run(\n+            new Class<?>[]{ DetectLanguageTest.class }, args);\n+    }\n+}"
  },
  {
    "sha": "80a5c2925a39e27abe4f1c1d2f1dc9b39592b68f",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/DetectLanguageTest.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/DetectLanguageTest.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/DetectLanguageTest.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/DetectLanguageTest.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -0,0 +1,51 @@\n+package com.azure.ai.textanalytics.perf;\n+\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.util.DetectLanguageResultCollection;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+public class DetectLanguageTest extends ServiceTest<TextAnalyticsStressOptions>{\n+\n+    /**\n+     * Creates an instance of performance test.\n+     * @param options the options configured for the test.\n+     */\n+    public DetectLanguageTest(TextAnalyticsStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public void run() {\n+        DetectLanguageResultCollection result = textAnalyticsClient.detectLanguageBatch(getDocuments(), \"US\",\n+            new TextAnalyticsRequestOptions().setIncludeStatistics(true));\n+        long count = result.stream().count();\n+        assert count == options.getDocumentCount();\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return textAnalyticsAsyncClient.detectLanguageBatch(getDocuments(), \"US\",\n+            new TextAnalyticsRequestOptions().setIncludeStatistics(true))\n+            .map(result -> result.stream().count())\n+            .handle((val, sink) -> {\n+                if(val == options.getDocumentCount()) {\n+                    sink.next(val);\n+                } else {\n+                    sink.error(new IllegalStateException(\"The result count doesn't match the input doc \" +\n+                        \"count\"));\n+                }\n+            })\n+            .then();\n+    }\n+\n+    private Iterable<String> getDocuments() {\n+        List<String> documents = new ArrayList<>();\n+        IntStream.range(0, options.getDocumentCount())\n+            .forEach(i -> documents.add(\"The quick brown fox jumps over the lazy dog\"));\n+        return documents;\n+    }\n+}"
  },
  {
    "sha": "61e62b7ab23944e4a2d6c3ad67f78bee289dd85e",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/LocalHttpClient.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/LocalHttpClient.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/LocalHttpClient.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/LocalHttpClient.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -0,0 +1,80 @@\n+package com.azure.ai.textanalytics.perf;\n+\n+import com.azure.ai.textanalytics.implementation.models.LanguageResult;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.Context;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+public class LocalHttpClient implements HttpClient {\n+\n+    private final int docCount;\n+\n+    public LocalHttpClient(int docCount) {\n+        this.docCount = docCount;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest httpRequest) {\n+        System.out.println(\"Called send without context\");\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request, Context context) {\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        try {\n+            JsonGenerator generator = new JsonFactory().createGenerator(outputStream);\n+\n+            generator.writeStartObject();\n+            generator.writeArrayFieldStart(\"documents\");\n+            for (int i = 0; i < docCount; i++) {\n+                generator.writeStartObject();\n+                generator.writeFieldName(\"id\");\n+                generator.writeString(String.valueOf(i));\n+\n+                generator.writeFieldName(\"detectedLanguage\");\n+                generator.writeStartObject();\n+                generator.writeFieldName(\"name\");\n+                generator.writeString(\"English\");\n+                generator.writeFieldName(\"iso6391Name\");\n+                generator.writeString(\"en\");\n+                generator.writeFieldName(\"confidenceScore\");\n+                generator.writeNumber(0.90);\n+                generator.writeEndObject();\n+\n+                generator.writeArrayFieldStart(\"warnings\");\n+                generator.writeEndArray();\n+\n+                generator.writeEndObject();\n+\n+            }\n+            generator.writeEndArray();\n+\n+            generator.writeArrayFieldStart(\"errors\");\n+            generator.writeEndArray();\n+\n+            generator.writeFieldName(\"statistics\");\n+            generator.writeStartObject();\n+            generator.writeFieldName(\"charactersCount\");\n+            generator.writeNumber(90);\n+            generator.writeFieldName(\"transactionsCount\");\n+            generator.writeNumber(90);\n+            generator.writeEndObject();\n+\n+            generator.writeEndObject();\n+\n+            generator.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return Mono.just(new MockHttpResponse(request, 200, new HttpHeaders(), outputStream.toByteArray()));\n+    }\n+}"
  },
  {
    "sha": "2cf04d771810dd5c1cac556b9d5d686059f84c87",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/MockHttpResponse.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/MockHttpResponse.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/MockHttpResponse.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/MockHttpResponse.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.perf;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+public class MockHttpResponse extends HttpResponse {\n+    private static final SerializerAdapter SERIALIZER = new JacksonAdapter();\n+\n+    private final int statusCode;\n+\n+    private final HttpHeaders headers;\n+\n+    private final byte[] bodyBytes;\n+\n+    public MockHttpResponse(HttpRequest request, int statusCode, HttpHeaders headers, byte[] bodyBytes) {\n+        super(request);\n+        this.statusCode = statusCode;\n+        this.headers = headers;\n+        this.bodyBytes = bodyBytes;\n+    }\n+\n+    public MockHttpResponse(HttpRequest request, int statusCode) {\n+        this(request, statusCode, new HttpHeaders(), new byte[0]);\n+    }\n+\n+    public MockHttpResponse(HttpRequest request, int statusCode, HttpHeaders headers) {\n+        this(request, statusCode, headers, new byte[0]);\n+    }\n+\n+    public MockHttpResponse(HttpRequest request, int statusCode, HttpHeaders headers, Object serializable) {\n+        this(request, statusCode, headers, serialize(serializable));\n+    }\n+\n+    public MockHttpResponse(HttpRequest request, int statusCode, Object serializable) {\n+        this(request, statusCode, new HttpHeaders(), serialize(serializable));\n+    }\n+\n+    private static byte[] serialize(Object serializable) {\n+        try {\n+            ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+            SERIALIZER.serialize(serializable, SerializerEncoding.JSON, stream);\n+\n+            return stream.toByteArray();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public int getStatusCode() {\n+        return statusCode;\n+    }\n+\n+    @Override\n+    public String getHeaderValue(String name) {\n+        return headers.getValue(name);\n+    }\n+\n+    @Override\n+    public HttpHeaders getHeaders() {\n+        return new HttpHeaders(headers);\n+    }\n+\n+    @Override\n+    public Mono<byte[]> getBodyAsByteArray() {\n+        if (bodyBytes == null) {\n+            return Mono.empty();\n+        } else {\n+            return Mono.just(bodyBytes);\n+        }\n+    }\n+\n+    @Override\n+    public Flux<ByteBuffer> getBody() {\n+        if (bodyBytes == null) {\n+            return Flux.empty();\n+        } else {\n+            return Flux.just(ByteBuffer.wrap(bodyBytes));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<String> getBodyAsString() {\n+        return getBodyAsString(StandardCharsets.UTF_8);\n+    }\n+\n+    @Override\n+    public Mono<String> getBodyAsString(Charset charset) {\n+        if (bodyBytes == null) {\n+            return Mono.empty();\n+        } else {\n+            return Mono.just(new String(bodyBytes, charset));\n+        }\n+    }\n+}"
  },
  {
    "sha": "f7ac765717d9c94874471125c8ae957539ea80a1",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/ServiceTest.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/ServiceTest.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/ServiceTest.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/ServiceTest.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -0,0 +1,33 @@\n+package com.azure.ai.textanalytics.perf;\n+\n+import com.azure.ai.textanalytics.TextAnalyticsAsyncClient;\n+import com.azure.ai.textanalytics.TextAnalyticsClient;\n+import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.Configuration;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+public abstract class ServiceTest<TOptions> extends PerfStressTest<TextAnalyticsStressOptions> {\n+    protected final TextAnalyticsAsyncClient textAnalyticsAsyncClient;\n+    protected final TextAnalyticsClient textAnalyticsClient;\n+\n+    /**\n+     * Creates an instance of performance test.\n+     * @param options the options configured for the test.\n+     */\n+    public ServiceTest(TextAnalyticsStressOptions options) {\n+        super(options);\n+        textAnalyticsAsyncClient = new TextAnalyticsClientBuilder()\n+            .endpoint(Configuration.getGlobalConfiguration().get(\"AZURE_TA_ENDPOINT\"))\n+            .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get(\"AZURE_TA_ACCESS_KEY\")))\n+            .httpClient(new LocalHttpClient(options.getDocumentCount()))\n+            .buildAsyncClient();\n+\n+        textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .endpoint(Configuration.getGlobalConfiguration().get(\"AZURE_TA_ENDPOINT\"))\n+            .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get(\"AZURE_TA_ACCESS_KEY\")))\n+            .httpClient(new LocalHttpClient(options.getDocumentCount()))\n+            .buildClient();\n+    }\n+\n+}"
  },
  {
    "sha": "1d6dfac78b9bb13d88e370708da136281c1df5a8",
    "filename": "sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/TextAnalyticsStressOptions.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/TextAnalyticsStressOptions.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/TextAnalyticsStressOptions.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics-perf/src/main/java/com/azure/ai/textanalytics/perf/TextAnalyticsStressOptions.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -0,0 +1,18 @@\n+package com.azure.ai.textanalytics.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.beust.jcommander.Parameter;\n+\n+public class TextAnalyticsStressOptions extends PerfStressOptions {\n+\n+    @Parameter(names = {\"-dc\", \"--docCount\"}, description = \"Number of documents to send in request\")\n+    private int docCount = 10;\n+\n+    /**\n+     * Get the configured document count option for performance test.\n+     * @return The document count.\n+     */\n+    public int getDocumentCount() {\n+        return docCount;\n+    }\n+}"
  },
  {
    "sha": "47c2b12eb9506e5e6d5b795f28cfefeed15df345",
    "filename": "sdk/textanalytics/azure-ai-textanalytics/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics/pom.xml",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics/pom.xml",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics/pom.xml?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -36,7 +36,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.13.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.14.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>"
  },
  {
    "sha": "dc272e898735f9b3ac9f84e7aa25cf00d602a40b",
    "filename": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/DetectLanguageAsyncClient.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/DetectLanguageAsyncClient.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/DetectLanguageAsyncClient.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/DetectLanguageAsyncClient.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -4,6 +4,7 @@\n package com.azure.ai.textanalytics;\n \n import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.Utility;\n import com.azure.ai.textanalytics.implementation.models.DocumentError;\n import com.azure.ai.textanalytics.implementation.models.DocumentLanguage;\n import com.azure.ai.textanalytics.implementation.models.LanguageBatchInput;\n@@ -154,11 +155,10 @@\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n-            .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n-            .doOnSuccess(response -> logger.info(\"Detected languages for a batch of documents - {}\",\n+            .doOnSuccess(response -> logger.verbose(\"Detected languages for a batch of documents - {}\",\n                 response.getValue()))\n             .doOnError(error -> logger.warning(\"Failed to detect language - {}\", error))\n             .map(this::toTextAnalyticsResultDocumentResponse)\n-            .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n+            .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n     }\n }"
  },
  {
    "sha": "2c1df29a7ea64335e1c36df1e3e342440ccc8159",
    "filename": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/TextAnalyticsClientImpl.java",
    "status": "modified",
    "additions": 47,
    "deletions": 1,
    "changes": 48,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/TextAnalyticsClientImpl.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/TextAnalyticsClientImpl.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/TextAnalyticsClientImpl.java?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -15,6 +15,7 @@\n import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n import com.azure.ai.textanalytics.implementation.models.KeyPhraseResult;\n import com.azure.ai.textanalytics.implementation.models.LanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.LanguageInput;\n import com.azure.ai.textanalytics.implementation.models.LanguageResult;\n import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n import com.azure.ai.textanalytics.implementation.models.PiiResult;\n@@ -43,7 +44,13 @@\n import com.azure.core.util.Context;\n import com.azure.core.util.serializer.JacksonAdapter;\n import com.azure.core.util.serializer.SerializerAdapter;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import reactor.core.publisher.Mono;\n \n /** Initializes a new instance of the TextAnalyticsClient type. */\n@@ -240,6 +247,16 @@ public SerializerAdapter getSerializerAdapter() {\n                 @BodyParam(\"application/json\") LanguageBatchInput input,\n                 Context context);\n \n+        @Post(\"/languages\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ErrorResponseException.class)\n+        Mono<Response<LanguageResult>> languages(\n+            @HostParam(\"Endpoint\") String endpoint,\n+            @QueryParam(\"model-version\") String modelVersion,\n+            @QueryParam(\"showStats\") Boolean showStats,\n+            @BodyParam(\"application/json\") byte[] input,\n+            Context context);\n+\n         @Post(\"/sentiment\")\n         @ExpectedResponses({200})\n         @UnexpectedResponseExceptionType(ErrorResponseException.class)\n@@ -478,7 +495,36 @@ public SerializerAdapter getSerializerAdapter() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<LanguageResult>> languagesWithResponseAsync(\n             LanguageBatchInput input, String modelVersion, Boolean showStats, Context context) {\n-        return service.languages(this.getEndpoint(), modelVersion, showStats, input, context);\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        try {\n+            JsonGenerator generator = new JsonFactory().createGenerator(outputStream);\n+\n+            generator.writeStartObject();\n+            generator.writeArrayFieldStart(\"documents\");\n+\n+            for (LanguageInput languageInput : input.getDocuments()) {\n+                generator.writeStartObject();\n+                generator.writeFieldName(\"id\");\n+                generator.writeString(languageInput.getId());\n+                generator.writeFieldName(\"text\");\n+                generator.writeString(languageInput.getText());\n+                if (languageInput.getCountryHint() != null) {\n+                    generator.writeFieldName(\"countryHint\");\n+                    generator.writeString(languageInput.getCountryHint());\n+                }\n+                generator.writeEndObject();\n+            }\n+            generator.writeEndArray();\n+            generator.writeEndObject();\n+            generator.close();\n+\n+            return service.languages(this.getEndpoint(), modelVersion, showStats, outputStream.toByteArray(),\n+                context.addData(\"json-payload\", true));\n+        } catch (IOException e) {\n+            return Mono.error(e);\n+        }\n+        // return service.languages(this.getEndpoint(), modelVersion, showStats, input, context);\n     }\n \n     /**"
  },
  {
    "sha": "d87325ccea20e4dea099a46e6bcb0f40ca753d3a",
    "filename": "sdk/textanalytics/pom.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/pom.xml",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7ad4c16edffc39708049086b6861a1ce404141f5/sdk/textanalytics/pom.xml",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/textanalytics/pom.xml?ref=7ad4c16edffc39708049086b6861a1ce404141f5",
    "patch": "@@ -52,7 +52,11 @@\n       </activation>\n       <modules>\n         <module>azure-ai-textanalytics</module>\n+        <module>../core/azure-core</module>\n       </modules>\n     </profile>\n   </profiles>\n+  <modules>\n+    <module>azure-ai-textanalytics-perf</module>\n+  </modules>\n </project>"
  }
]
