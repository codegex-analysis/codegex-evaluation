[
  {
    "sha": "00c269627d033851c00e4db657077b61f58e3c60",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/pom.xml",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/pom.xml",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/pom.xml",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/pom.xml?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -34,7 +34,7 @@\n     <jacoco.min.branchcoverage>0.10</jacoco.min.branchcoverage>\n \n     <!-- If skipping test coverage is absolutely necessary, for example resources cannot be provisioned uncomment this -->\n-    <!--<jacoco.skip.coverage.check>false</jacoco.skip.coverage.check>-->\n+    <jacoco.skip.coverage.check>false</jacoco.skip.coverage.check>\n   </properties>\n \n   <dependencies>\n@@ -61,5 +61,23 @@\n       <version>5.7.1</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-params;external_dependency} -->\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>3.6.28</version> <!-- {x-version-update;org.mockito:mockito-core;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.projectreactor</groupId>\n+      <artifactId>reactor-test</artifactId>\n+      <version>3.4.3</version> <!-- {x-version-update;io.projectreactor:reactor-test;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-test</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n </project>"
  },
  {
    "sha": "9c1ffd1a3df4b99db8b2a5e1a65a8ecc7abfa151",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/AccessTokenCache.java",
    "status": "added",
    "additions": 167,
    "deletions": 0,
    "changes": 167,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/AccessTokenCache.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/AccessTokenCache.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/AccessTokenCache.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,167 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.authentication;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Signal;\n+import reactor.core.publisher.Sinks;\n+\n+import java.time.Duration;\n+import java.time.OffsetDateTime;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A token cache that supports caching a token and refreshing it.\n+ */\n+class AccessTokenCache {\n+    // The delay after a refresh to attempt another token refresh\n+    private static final Duration REFRESH_DELAY = Duration.ofSeconds(30);\n+    // the offset before token expiry to attempt proactive token refresh\n+    private static final Duration REFRESH_OFFSET = Duration.ofMinutes(5);\n+    private volatile AccessToken cache;\n+    private volatile OffsetDateTime nextTokenRefresh = OffsetDateTime.now();\n+    private final AtomicReference<Sinks.One<AccessToken>> wip;\n+    private final ContainerRegistryTokenCredential tokenCredential;\n+    private ContainerRegistryTokenRequestContext tokenRequestContext;\n+    private final Predicate<AccessToken> shouldRefresh;\n+    private final ClientLogger logger = new ClientLogger(AccessTokenCache.class);\n+\n+    /**\n+     * Creates an instance of AccessTokenCache with default scheme \"Bearer\".\n+     *\n+     * @param tokenCredential the credential to be used to acquire token from.\n+     */\n+    AccessTokenCache(ContainerRegistryTokenCredential tokenCredential) {\n+        Objects.requireNonNull(tokenCredential, \"The token credential cannot be null\");\n+        this.wip = new AtomicReference<>();\n+        this.tokenCredential = tokenCredential;\n+        this.shouldRefresh = accessToken -> OffsetDateTime.now()\n+            .isAfter(accessToken.getExpiresAt().minus(REFRESH_OFFSET));\n+    }\n+\n+    /**\n+     * Asynchronously get a token from either the cache or replenish the cache with a new token.\n+     *\n+     * @param tokenRequestContext The request context for token acquisition.\n+     * @return The Publisher that emits an AccessToken\n+     */\n+    public Mono<AccessToken> getToken(ContainerRegistryTokenRequestContext tokenRequestContext) {\n+        return Mono.defer(retrieveToken(tokenRequestContext))\n+            // Keep resubscribing as long as Mono.defer [token acquisition] emits empty().\n+            .repeatWhenEmpty((Flux<Long> longFlux) -> longFlux.concatMap(ignored -> Flux.just(true)));\n+    }\n+\n+    private Supplier<Mono<? extends AccessToken>> retrieveToken(ContainerRegistryTokenRequestContext tokenRequestContext) {\n+        return () -> {\n+            try {\n+                if (wip.compareAndSet(null, Sinks.one())) {\n+                    final Sinks.One<AccessToken> sinksOne = wip.get();\n+                    OffsetDateTime now = OffsetDateTime.now();\n+                    Mono<AccessToken> tokenRefresh;\n+                    Mono<AccessToken> fallback;\n+\n+                    Supplier<Mono<AccessToken>> tokenSupplier = () -> {\n+                        Objects.requireNonNull(this.tokenRequestContext);\n+                        return tokenCredential.getToken(this.tokenRequestContext);\n+                    };\n+\n+                    boolean forceRefresh = checkIfWeShouldForceRefresh(tokenRequestContext);\n+\n+                    if (forceRefresh) {\n+                        this.tokenRequestContext = tokenRequestContext;\n+                        tokenRefresh = Mono.defer(tokenSupplier);\n+                        fallback = Mono.empty();\n+                    } else if (cache != null && !shouldRefresh.test(cache)) {\n+                        // fresh cache & no need to refresh\n+                        tokenRefresh = Mono.empty();\n+                        fallback = Mono.just(cache);\n+                    } else if (cache == null || cache.isExpired()) {\n+                        // no token to use\n+                        if (now.isAfter(nextTokenRefresh)) {\n+                            // refresh immediately\n+                            tokenRefresh = Mono.defer(tokenSupplier);\n+                        } else {\n+                            // wait for timeout, then refresh\n+                            tokenRefresh = Mono.defer(tokenSupplier)\n+                                .delaySubscription(Duration.between(now, nextTokenRefresh));\n+                        }\n+                        // cache doesn't exist or expired, no fallback\n+                        fallback = Mono.empty();\n+                    } else {\n+                        // token available, but close to expiry\n+                        if (now.isAfter(nextTokenRefresh)) {\n+                            // refresh immediately\n+                            tokenRefresh = Mono.defer(tokenSupplier);\n+                        } else {\n+                            // still in timeout, do not refresh\n+                            tokenRefresh = Mono.empty();\n+                        }\n+                        // cache hasn't expired, ignore refresh error this time\n+                        fallback = Mono.just(cache);\n+                    }\n+                    return tokenRefresh\n+                        .materialize()\n+                        .flatMap(processTokenRefreshResult(sinksOne, now, fallback))\n+                        .doOnError(sinksOne::tryEmitError)\n+                        .doFinally(ignored -> wip.set(null));\n+                } else {\n+                    return Mono.empty();\n+                }\n+            } catch (Throwable t) {\n+                return Mono.error(t);\n+            }\n+        };\n+    }\n+\n+    private boolean checkIfWeShouldForceRefresh(ContainerRegistryTokenRequestContext tokenRequestContext) {\n+        return !(this.tokenRequestContext != null\n+            && this.tokenRequestContext.getScope().equals(tokenRequestContext.getScope()));\n+    }\n+\n+    private Function<Signal<AccessToken>, Mono<? extends AccessToken>> processTokenRefreshResult(\n+        Sinks.One<AccessToken> sinksOne, OffsetDateTime now, Mono<AccessToken> fallback) {\n+        return signal -> {\n+            AccessToken accessToken = signal.get();\n+            Throwable error = signal.getThrowable();\n+            if (signal.isOnNext() && accessToken != null) { // SUCCESS\n+                logger.info(refreshLog(cache, now, \"Acquired a new access token\"));\n+                cache = accessToken;\n+                sinksOne.tryEmitValue(accessToken);\n+                nextTokenRefresh = OffsetDateTime.now().plus(REFRESH_DELAY);\n+                return Mono.just(accessToken);\n+            } else if (signal.isOnError() && error != null) { // ERROR\n+                logger.error(refreshLog(cache, now, \"Failed to acquire a new access token\"));\n+                nextTokenRefresh = OffsetDateTime.now().plus(REFRESH_DELAY);\n+                return fallback.switchIfEmpty(Mono.error(error));\n+            } else { // NO REFRESH\n+                sinksOne.tryEmitEmpty();\n+                return fallback;\n+            }\n+        };\n+    }\n+\n+    private static String refreshLog(AccessToken cache, OffsetDateTime now, String log) {\n+        StringBuilder info = new StringBuilder(log);\n+        if (cache == null) {\n+            info.append(\".\");\n+        } else {\n+            Duration tte = Duration.between(now, cache.getExpiresAt());\n+            info.append(\" at \").append(tte.abs().getSeconds()).append(\" seconds \")\n+                .append(tte.isNegative() ? \"after\" : \"before\").append(\" expiry. \")\n+                .append(\"Retry may be attempted after \").append(REFRESH_DELAY.getSeconds()).append(\" seconds.\");\n+            if (!tte.isNegative()) {\n+                info.append(\" The token currently cached will be used.\");\n+            }\n+        }\n+        return info.toString();\n+    }\n+\n+}"
  },
  {
    "sha": "97210d32076efa42e3af11de37e21e5c4f705ec0",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryCredentialsPolicy.java",
    "status": "added",
    "additions": 154,
    "deletions": 0,
    "changes": 154,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryCredentialsPolicy.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryCredentialsPolicy.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryCredentialsPolicy.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.authentication;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import reactor.core.publisher.Mono;\n+\n+\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.HashMap;\n+\n+/**\n+ * <p>Credential policy for the container registry. It follows the challenge based authorization scheme.</p>\n+ *\n+ * <p>For example GET /api/v1/acr/repositories translates into the following calls.</p>\n+ *\n+ * <p>Step1: GET /api/v1/acr/repositories\n+ * Return Header: 401: www-authenticate header - Bearer realm=&quot;{url}&quot;,service=&quot;{serviceName}&quot;,scope=&quot;{scope}&quot;,error=&quot;invalid_token&quot;.</p>\n+ *\n+ * <p>Step2: Parse the serviceName, scope from the service.</p>\n+ *\n+ * <p>Step3: POST /api/oauth2/exchange  Request Body : {service, scope, grant-type, aadToken with ARM scope}\n+ * Response Body: {acrRefreshToken}</p>\n+ *\n+ * <p>Step4: POST /api/oauth2/token  Request Body: {acrRefreshToken, scope, grant-type}\n+ * Response Body: {acrAccessToken}</p>\n+ *\n+ * <p>Step5: GET /api/v1/acr/repositories\n+ * Request Header: {Bearer acrTokenAccess}</p>\n+ */\n+class ContainerRegistryCredentialsPolicy implements HttpPipelinePolicy {\n+\n+    private static final String BEARER = \"Bearer\";\n+    public static final Pattern AUTHENTICATION_CHALLENGE_PARAMS_PATTERN =\n+        Pattern.compile(\"(?:(\\\\w+)=\\\"([^\\\"\\\"]*)\\\")+\");\n+    public static final String WWW_AUTHENTICATE = \"WWW-Authenticate\";\n+    public static final String SCOPES_PARAMETER = \"scope\";\n+    public static final String SERVICE_PARAMETER = \"service\";\n+    public static final String AUTHORIZATION = \"Authorization\";\n+\n+    private final ContainerRegistryTokenService tokenService;\n+    private final ClientLogger logger = new ClientLogger(ContainerRegistryCredentialsPolicy.class);\n+\n+    /**\n+     * Creates an instance of ContainerRegistryCredentialsPolicy.\n+     *\n+     * @param credential the AAD credentials passed to the client.\n+     * @param url the url for the container registry.\n+     * @param pipeline the http pipeline to be used to make the rest calls.\n+     * @param serializerAdapter the serializer adapter to be used to make the rest calls.\n+     */\n+    public ContainerRegistryCredentialsPolicy(TokenCredential credential, String url, HttpPipeline pipeline, SerializerAdapter serializerAdapter) {\n+        this(new ContainerRegistryTokenService(credential, url, pipeline, serializerAdapter));\n+    }\n+\n+    /**\n+     * Creates an instance of ContainerRegistryCredentialsPolicy.\n+     *\n+     * @param tokenService the token generation service.\n+     */\n+    ContainerRegistryCredentialsPolicy(ContainerRegistryTokenService tokenService) {\n+        this.tokenService = tokenService;\n+    }\n+\n+    /**\n+     * Creates an instance of ContainerRegistryCredentialsPolicy.\n+     *\n+     * @param context call context for the http pipeline.\n+     * @param next next http policy to run.\n+     */\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {\n+            return Mono.error(new RuntimeException(\"token credentials require a URL using the HTTPS protocol scheme\"));\n+        } else {\n+            HttpPipelineNextPolicy nextPolicy = next.clone();\n+            return next.process()\n+                .flatMap((httpResponse) -> {\n+                    String authHeader = httpResponse.getHeaderValue(WWW_AUTHENTICATE);\n+                    return httpResponse.getStatusCode() == 401 && authHeader != null\n+                        ? this.onChallenge(context, httpResponse).flatMap((retry) -> {\n+                            return retry ? nextPolicy.process() : Mono.just(httpResponse); })\n+                        : Mono.just(httpResponse);\n+                });\n+        }\n+    }\n+\n+    /**\n+     * Authorizes the request with the bearer token acquired using the specified {@code tokenRequestContext}\n+     *\n+     * @param context the HTTP pipeline context.\n+     * @param tokenRequestContext the token request conext to be used for token acquisition.\n+     * @return a {@link Mono} containing {@link Void}\n+     */\n+    public Mono<Void> authorizeRequest(HttpPipelineCallContext context, ContainerRegistryTokenRequestContext tokenRequestContext) {\n+        return tokenService.getToken(tokenRequestContext)\n+            .flatMap((token) -> {\n+                context.getHttpRequest().getHeaders().set(AUTHORIZATION, BEARER + \" \" + token.getToken());\n+                return Mono.empty();\n+            });\n+    }\n+\n+    /**\n+     * Handles the authentication challenge in the event a 401 response with a WWW-Authenticate authentication\n+     * challenge header is received after the initial request and returns appropriate {@link ContainerRegistryTokenRequestContext} to\n+     * be used for re-authentication.\n+     *\n+     * @param context The request context.\n+     * @param response The Http Response containing the authentication challenge header.\n+     * @return A {@link Mono} containing {@link ContainerRegistryTokenRequestContext}\n+     */\n+    public Mono<Boolean> onChallenge(HttpPipelineCallContext context, HttpResponse response) {\n+        return Mono.defer(() -> {\n+            String authHeader = response.getHeaderValue(WWW_AUTHENTICATE);\n+            if (!(response.getStatusCode() == 401 && authHeader != null)) {\n+                return Mono.just(false);\n+            } else {\n+                Map<String, String> extractedChallengeParams = parseBearerChallenge(authHeader);\n+                if (extractedChallengeParams != null && extractedChallengeParams.containsKey(SCOPES_PARAMETER)) {\n+                    String scope = extractedChallengeParams.get(SCOPES_PARAMETER);\n+                    String serviceName = extractedChallengeParams.get(SERVICE_PARAMETER);\n+                    return authorizeRequest(context, new ContainerRegistryTokenRequestContext(serviceName, scope)).then(Mono.just(true));\n+                }\n+                return Mono.just(false);\n+            }\n+        });\n+    }\n+\n+    private Map<String, String> parseBearerChallenge(String header) {\n+        if (header.startsWith(BEARER)) {\n+            String challengeParams = header.substring(BEARER.length());\n+\n+            Matcher matcher2 = AUTHENTICATION_CHALLENGE_PARAMS_PATTERN.matcher(challengeParams);\n+\n+            Map<String, String> challengeParameters = new HashMap<>();\n+            while (matcher2.find()) {\n+                challengeParameters.put(matcher2.group(1), matcher2.group(2));\n+            }\n+            return challengeParameters;\n+        }\n+\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "9e12d11ea7ec8c6258dbe16b1901a015c25c7d0e",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenCredential.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenCredential.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenCredential.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenCredential.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,44 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.authentication;\n+\n+import com.azure.containers.containerregistry.implementation.authentication.TokenServiceImpl;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Token credentials representing the container registry refresh token.\n+ * This token is unique per registry operation.\n+ */\n+class ContainerRegistryTokenCredential {\n+\n+    private final TokenCredential tokenCredential;\n+    private final TokenServiceImpl tokenService;\n+    public static final String AAD_DEFAULT_SCOPE = \"https://management.core.windows.net/.default\";\n+\n+    /**\n+     * Creates an instance of RefreshTokenCredential with default scheme \"Bearer\".\n+     * @param tokenService the container registry token service that calls the token rest APIs.\n+     * @param aadTokenCredential the ARM access token.\n+     */\n+    ContainerRegistryTokenCredential(TokenServiceImpl tokenService, TokenCredential aadTokenCredential) {\n+        this.tokenService = tokenService;\n+        this.tokenCredential = aadTokenCredential;\n+    }\n+\n+    /**\n+     * Creates the container registry refresh token for the given context.\n+     *\n+     * @param context the context for the token to be generated.\n+     */\n+    public Mono<AccessToken> getToken(ContainerRegistryTokenRequestContext context) {\n+        String serviceName = context.getServiceName();\n+\n+        return Mono.defer(() -> tokenCredential.getToken(new TokenRequestContext().addScopes(AAD_DEFAULT_SCOPE))\n+            .flatMap(token -> this.tokenService.getAcrRefreshTokenAsync(token.getToken(), serviceName)));\n+    }\n+\n+}"
  },
  {
    "sha": "6745ecca2b2739781e7c867de180a9ea60a8dc06",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenRequestContext.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenRequestContext.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenRequestContext.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenRequestContext.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.authentication;\n+\n+/**\n+ * A token request context associated with a given container registry token.\n+ */\n+class ContainerRegistryTokenRequestContext {\n+    private final String scope;\n+    private final String serviceName;\n+\n+    /**\n+     * Creates an instance of TokenRequestContext.\n+     * @param serviceName the service name of the registry.\n+     * @param scope token scope.\n+     */\n+    public ContainerRegistryTokenRequestContext(String serviceName, String scope) {\n+        this.serviceName = serviceName;\n+        this.scope = scope;\n+    }\n+\n+    /**\n+     * Get the service name.\n+     * @return service name.\n+     */\n+    public String getServiceName() {\n+        return this.serviceName;\n+    }\n+\n+    /**\n+     * Get's the token scope.\n+     * @return scope for the context.\n+     */\n+    public String getScope() {\n+        return this.scope;\n+    }\n+\n+}"
  },
  {
    "sha": "f0abc8491a3b6c90f3bbfc4b36ef3de5750adab8",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenService.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenService.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenService.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenService.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.authentication;\n+\n+import com.azure.containers.containerregistry.implementation.authentication.TokenServiceImpl;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A token service for obtaining tokens to be used by the container registry service.\n+ */\n+class ContainerRegistryTokenService {\n+    private AccessTokenCache refreshTokenCache;\n+    private TokenServiceImpl tokenService;\n+    private final ClientLogger logger = new ClientLogger(ContainerRegistryTokenService.class);\n+\n+    /**\n+     * Creates an instance of AccessTokenCache with default scheme \"Bearer\".\n+     *\n+     * @param tokenCredential the credential to be used to acquire the token.\n+     * @param url the container registry endpoint.\n+     * @param pipeline the pipeline to be used for the rest calls to the service.\n+     * @param serializerAdapter the serializer adapter to be used for the rest calls to the service.\n+     */\n+    ContainerRegistryTokenService(TokenCredential tokenCredential, String url, HttpPipeline pipeline, SerializerAdapter serializerAdapter) {\n+        Objects.requireNonNull(tokenCredential);\n+        Objects.requireNonNull(url);\n+        Objects.requireNonNull(pipeline);\n+        Objects.requireNonNull(serializerAdapter);\n+\n+        this.tokenService = new TokenServiceImpl(url, pipeline, serializerAdapter);\n+        this.refreshTokenCache = new AccessTokenCache(new ContainerRegistryTokenCredential(tokenService, tokenCredential));\n+    }\n+\n+    ContainerRegistryTokenService setTokenService(TokenServiceImpl tokenServiceImpl) {\n+        this.tokenService = tokenServiceImpl;\n+        return this;\n+    }\n+\n+    ContainerRegistryTokenService setRefreshTokenCache(AccessTokenCache tokenCache) {\n+        this.refreshTokenCache = tokenCache;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets a token against the token request context.\n+     *\n+     * @param tokenRequestContext the token request context to be used to get the token.\n+     */\n+    public Mono<AccessToken> getToken(ContainerRegistryTokenRequestContext tokenRequestContext) {\n+        String scope = tokenRequestContext.getScope();\n+        String serviceName = tokenRequestContext.getServiceName();\n+\n+        return Mono.defer(() -> this.refreshTokenCache.getToken(tokenRequestContext)\n+            .flatMap(refreshToken -> {\n+                return this.tokenService.getAcrAccessTokenAsync(refreshToken.getToken(), scope, serviceName);\n+            }).doOnError(err -> logger.error(\"Could not fetch the ACR error token.\", err)));\n+    }\n+}"
  },
  {
    "sha": "106c4b56b624b914156298ae2f1cd3fb4a6cde83",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/package-info.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/package-info.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/package-info.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/authentication/package-info.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,7 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+/**\n+ * This package contains classes for the container registry project.\n+ */\n+package com.azure.containers.containerregistry.authentication;"
  },
  {
    "sha": "e94b4a51056168c34c77d3f67b283d34ec8b925a",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/AccessTokensImpl.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/AccessTokensImpl.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/AccessTokensImpl.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/AccessTokensImpl.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.implementation.authentication;\n+\n+import com.azure.containers.containerregistry.implementation.models.AcrAccessToken;\n+import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.Post;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.FormParam;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in AccessTokensService. */\n+public final class AccessTokensImpl {\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final AccessTokensService service;\n+\n+    /** Registry login URL. */\n+    private final String url;\n+\n+    /**\n+     * Gets Registry login URL.\n+     *\n+     * @return the url value.\n+     */\n+    public String getUrl() {\n+        return this.url;\n+    }\n+\n+    /**\n+     * Initializes an instance of AccessTokensImpl.\n+     *\n+     * @param url the service endpoint.\n+     * @param httpPipeline the pipeline to use to make the call.\n+     * @param serializerAdapter the serializer adapter for the rest client.\n+     *\n+     */\n+    public AccessTokensImpl(String url, HttpPipeline httpPipeline, SerializerAdapter serializerAdapter) {\n+        this.service =\n+            RestProxy.create(AccessTokensService.class, httpPipeline, serializerAdapter);\n+        this.url = url;\n+    }\n+\n+    /**\n+     * The interface defining all the services for AccessTokens to be used by the proxy service to\n+     * perform REST calls.\n+     */\n+    @Host(\"{url}\")\n+    @ServiceInterface(name = \"ContainerRegistryAcc\")\n+    private interface AccessTokensService {\n+        @Post(\"/oauth2/token\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(AcrErrorsException.class)\n+        Mono<Response<AcrAccessToken>> getAccessToken(\n+            @HostParam(\"url\") String url,\n+            @FormParam(value = \"grant_type\") String grantType,\n+            @FormParam(value = \"service\") String service,\n+            @FormParam(value = \"scope\") String scope,\n+            @FormParam(value = \"refresh_token\") String refreshToken,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Exchange ACR Refresh token for an ACR Access Token.\n+     *\n+     * @param refreshToken The refreshToken parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws AcrErrorsException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<AcrAccessToken>> getAccessTokenWithResponseAsync(\n+        String grantType,\n+        String serviceName,\n+        String scope,\n+        String refreshToken) {\n+        final String accept = \"application/json\";\n+        return FluxUtil.withContext(\n+            context -> service.getAccessToken(getUrl(), grantType, serviceName, scope, refreshToken, accept, context));\n+    }\n+    /**\n+     * Exchange ACR Refresh token for an ACR Access Token.\n+     *\n+     * @param refreshToken The refreshToken parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws AcrErrorsException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<AcrAccessToken> getAccessTokenAsync(\n+        String grantType,\n+        String serviceName,\n+        String scope,\n+        String refreshToken) {\n+        return getAccessTokenWithResponseAsync(grantType, serviceName, scope, refreshToken)\n+            .flatMap(\n+                (Response<AcrAccessToken> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+}"
  },
  {
    "sha": "d733e11d457bf4dad842361717fedfb60710bfb5",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/JsonWebToken.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/JsonWebToken.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/JsonWebToken.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/JsonWebToken.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.implementation.authentication;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Base64;\n+\n+class JsonWebToken {\n+\n+    /**\n+     * Retrieves the expiration date from the specified JWT value.\n+     *\n+     * @param jwtValue The JWT value.\n+     * @return The date the JWT expires or null if the expiration couldn't be retrieved.\n+     * @throws IllegalArgumentException If the {@code jwtValue} is null or empty.\n+     */\n+    public static OffsetDateTime retrieveExpiration(String jwtValue) {\n+        if (CoreUtils.isNullOrEmpty(jwtValue)) {\n+            throw new IllegalArgumentException(\"Value cannot be null or empty: 'jwtValue'.\");\n+        }\n+\n+        String[] jwtParts = jwtValue.split(\"[.]\");\n+\n+        // Would normally be 3, but 2 is the minimum here since Java's split ignores trailing empty strings.\n+        if (jwtParts.length < 2) {\n+            return null;\n+        }\n+\n+        String jwtPayloadEncoded = jwtParts[1];\n+\n+        if (CoreUtils.isNullOrEmpty(jwtPayloadEncoded)) {\n+            return null;\n+        }\n+\n+        byte[] jwtPayloadDecodedData = Base64.getDecoder().decode(jwtPayloadEncoded);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        JsonNode rootNode;\n+        try {\n+            rootNode = mapper.readTree(jwtPayloadDecodedData);\n+        } catch (IOException exception) {\n+            return null;\n+        }\n+\n+        if (!rootNode.has(\"exp\")) {\n+            return null;\n+        }\n+\n+        long expirationValue = rootNode.get(\"exp\").asLong();\n+        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(expirationValue), ZoneOffset.UTC);\n+    }\n+}"
  },
  {
    "sha": "e51bf4ec187c87fe851e5a456f8fc533b27ac4d6",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/RefreshTokensImpl.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/RefreshTokensImpl.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/RefreshTokensImpl.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/RefreshTokensImpl.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.implementation.authentication;\n+\n+import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;\n+import com.azure.containers.containerregistry.implementation.models.AcrRefreshToken;\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.Post;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.FormParam;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in RefreshTokensService. */\n+public final class RefreshTokensImpl {\n+    /** The proxy service used to perform REST calls. */\n+    private final RefreshTokenService service;\n+\n+    /** Registry login URL. */\n+    private final String url;\n+\n+    /**\n+     * Gets Registry login URL.\n+     *\n+     * @return the url value.\n+     */\n+    private String getUrl() {\n+        return this.url;\n+    }\n+\n+    /**\n+     * Initializes an instance of RefreshTokensImpl.\n+     *\n+     * @param url the service endpoint.\n+     * @param httpPipeline the pipeline to use to make the call.\n+     * @param serializerAdapter the serializer adapter for the rest client.\n+     *\n+     */\n+    public RefreshTokensImpl(String url, HttpPipeline httpPipeline, SerializerAdapter serializerAdapter) {\n+        this.service =\n+            RestProxy.create(\n+                RefreshTokenService.class,\n+                httpPipeline,\n+                serializerAdapter);\n+        this.url = url;\n+    }\n+\n+    /**\n+     * The interface defining all the services for RegistryRefreshTokens to be used by the\n+     * proxy service to perform REST calls.\n+     */\n+    @Host(\"{url}\")\n+    @ServiceInterface(name = \"ContainerRegistryCon\")\n+    private interface RefreshTokenService {\n+        // @Multipart not supported by RestProxy\n+        @Post(\"/oauth2/exchange\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(AcrErrorsException.class)\n+        Mono<Response<AcrRefreshToken>> getRefreshToken(\n+            @HostParam(\"url\") String url,\n+            @FormParam(value = \"grant-type\", encoded = true) String grantType,\n+            @FormParam(value = \"service\", encoded = true) String service,\n+            @FormParam(value = \"access_token\", encoded = true) String accessToken,\n+            @FormParam(value = \"tenant\", encoded = true) String tenant,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Exchange AAD tokens for an ACR refresh Token.\n+     *\n+     * @param accessToken The accessToken parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws AcrErrorsException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<AcrRefreshToken>> getRefreshTokenWithResponseAsync(\n+        String grantType,\n+        String accessToken,\n+        String tenant,\n+        String serviceValue) {\n+        final String accept = \"application/json\";\n+        return FluxUtil.withContext(\n+            context -> service.getRefreshToken(this.getUrl(), grantType, serviceValue, accessToken, tenant, accept, context));\n+    }\n+\n+    /**\n+     * Exchange AAD tokens for an ACR refresh Token.\n+     *\n+     * @param accessToken The accessToken parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws AcrErrorsException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<AcrRefreshToken> getRefreshTokenAsync(\n+        String grantType, String accessToken, String tenant, String service) {\n+        return getRefreshTokenWithResponseAsync(grantType, accessToken, tenant, service)\n+            .flatMap(\n+                (Response<AcrRefreshToken> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+}"
  },
  {
    "sha": "cec2a3453a3bbb1643f3182ce5df0042a35c59d8",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/TokenServiceImpl.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/TokenServiceImpl.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/TokenServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/authentication/TokenServiceImpl.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.implementation.authentication;\n+\n+import com.azure.containers.containerregistry.implementation.models.PostContentSchemaGrantType;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+\n+/**\n+ * Token service implementation that wraps the authentication rest APIs for ACR.\n+ */\n+public class TokenServiceImpl {\n+\n+    private final AccessTokensImpl accessTokensImpl;\n+    private final RefreshTokensImpl refreshTokenImpl;\n+\n+    /**\n+     * Creates an instance of the token service impl class.TokenServiceImpl.java\n+     *  @param url the service endpoint.\n+     * @param pipeline the pipeline to use to make the call.\n+     * @param serializerAdapter the serializer adapter for the rest client.\n+     *\n+     */\n+    public TokenServiceImpl(String url, HttpPipeline pipeline, SerializerAdapter serializerAdapter) {\n+        if (serializerAdapter == null) {\n+            serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n+        }\n+\n+        this.accessTokensImpl = new AccessTokensImpl(url, pipeline, serializerAdapter);\n+        this.refreshTokenImpl = new RefreshTokensImpl(url, pipeline, serializerAdapter);\n+    }\n+\n+    /**\n+     * Gets the ACR access token.\n+     * @param acrRefreshToken Given the ACRs refresh token.\n+     * @param scope - Token scope.\n+     * @param serviceName The name of the service.\n+     *\n+     */\n+    public Mono<AccessToken> getAcrAccessTokenAsync(String acrRefreshToken, String scope, String serviceName) {\n+        return this.accessTokensImpl.getAccessTokenAsync(PostContentSchemaGrantType.REFRESH_TOKEN.toString(), serviceName, scope, acrRefreshToken)\n+            .map(token -> {\n+                String accessToken = token.getAccessToken();\n+                OffsetDateTime expirationTime = JsonWebToken.retrieveExpiration(accessToken);\n+                return new AccessToken(accessToken, expirationTime);\n+            });\n+    }\n+\n+    /**\n+     * Gets an ACR refresh token.\n+     * @param aadAccessToken Given the ACR access token.\n+     * @param serviceName Given the ACR service.\n+     *\n+     */\n+    public Mono<AccessToken> getAcrRefreshTokenAsync(String aadAccessToken, String serviceName) {\n+        return this.refreshTokenImpl.getRefreshTokenAsync(\n+            PostContentSchemaGrantType.ACCESS_TOKEN.toString(),\n+            aadAccessToken,\n+            null,\n+            serviceName).map(token -> {\n+                String refreshToken = token.getRefreshToken();\n+                OffsetDateTime expirationTime = JsonWebToken.retrieveExpiration(refreshToken);\n+                return new AccessToken(refreshToken, expirationTime);\n+            });\n+    }\n+}"
  },
  {
    "sha": "d9ff2319f464b3d404ac58b2fdd21c0513d099ee",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrAccessToken.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrAccessToken.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrAccessToken.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrAccessToken.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The AccessToken model. */\n+@Fluent\n+public final class AcrAccessToken {\n+    /*\n+     * The access token for performing authenticated requests\n+     */\n+    @JsonProperty(value = \"access_token\")\n+    private String accessToken;\n+\n+    /**\n+     * Get the accessToken property: The access token for performing authenticated requests.\n+     *\n+     * @return the accessToken value.\n+     */\n+    public String getAccessToken() {\n+        return this.accessToken;\n+    }\n+\n+    /**\n+     * Set the accessToken property: The access token for performing authenticated requests.\n+     *\n+     * @param accessToken the accessToken value to set.\n+     * @return the AccessToken object itself.\n+     */\n+    public AcrAccessToken setAccessToken(String accessToken) {\n+        this.accessToken = accessToken;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "190232330ee15ec31e6020052d0da132f32e934e",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorInfo.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorInfo.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorInfo.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorInfo.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** Error information. */\n+@Fluent\n+public final class AcrErrorInfo {\n+    /*\n+     * Error code\n+     */\n+    @JsonProperty(value = \"code\")\n+    private String code;\n+\n+    /*\n+     * Error message\n+     */\n+    @JsonProperty(value = \"message\")\n+    private String message;\n+\n+    /*\n+     * Error details\n+     */\n+    @JsonProperty(value = \"detail\")\n+    private Object detail;\n+\n+    /**\n+     * Get the code property: Error code.\n+     *\n+     * @return the code value.\n+     */\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    /**\n+     * Set the code property: Error code.\n+     *\n+     * @param code the code value to set.\n+     * @return the AcrErrorInfo object itself.\n+     */\n+    public AcrErrorInfo setCode(String code) {\n+        this.code = code;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the message property: Error message.\n+     *\n+     * @return the message value.\n+     */\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    /**\n+     * Set the message property: Error message.\n+     *\n+     * @param message the message value to set.\n+     * @return the AcrErrorInfo object itself.\n+     */\n+    public AcrErrorInfo setMessage(String message) {\n+        this.message = message;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the detail property: Error details.\n+     *\n+     * @return the detail value.\n+     */\n+    public Object getDetail() {\n+        return this.detail;\n+    }\n+\n+    /**\n+     * Set the detail property: Error details.\n+     *\n+     * @param detail the detail value to set.\n+     * @return the AcrErrorInfo object itself.\n+     */\n+    public AcrErrorInfo setDetail(Object detail) {\n+        this.detail = detail;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "e8b607810439e93f76593f3362019f549b2b1350",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrors.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrors.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrors.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrors.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** Acr error response describing why the operation failed. */\n+@Fluent\n+public final class AcrErrors {\n+    /*\n+     * Array of detailed error\n+     */\n+    @JsonProperty(value = \"errors\")\n+    private List<AcrErrorInfo> errors;\n+\n+    /**\n+     * Get the errors property: Array of detailed error.\n+     *\n+     * @return the errors value.\n+     */\n+    public List<AcrErrorInfo> getErrors() {\n+        return this.errors;\n+    }\n+\n+    /**\n+     * Set the errors property: Array of detailed error.\n+     *\n+     * @param errors the errors value to set.\n+     * @return the AcrErrors object itself.\n+     */\n+    public AcrErrors setErrors(List<AcrErrorInfo> errors) {\n+        this.errors = errors;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "9684100072526eff5c1d54201bbec11d75ee620d",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorsException.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorsException.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorsException.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrErrorsException.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpResponse;\n+\n+/** Exception thrown for an invalid response with AcrErrors information. */\n+public final class AcrErrorsException extends HttpResponseException {\n+    /**\n+     * Initializes a new instance of the AcrErrorsException class.\n+     *\n+     * @param message the exception message or the response content if a message is not available.\n+     * @param response the HTTP response.\n+     */\n+    public AcrErrorsException(String message, HttpResponse response) {\n+        super(message, response);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the AcrErrorsException class.\n+     *\n+     * @param message the exception message or the response content if a message is not available.\n+     * @param response the HTTP response.\n+     * @param value the deserialized response value.\n+     */\n+    public AcrErrorsException(String message, HttpResponse response, AcrErrors value) {\n+        super(message, response, value);\n+    }\n+\n+    @Override\n+    public AcrErrors getValue() {\n+        return (AcrErrors) super.getValue();\n+    }\n+}"
  },
  {
    "sha": "d30a6fc8f47b4e7e0c79853e57564cfa2f8a18aa",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrRefreshToken.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrRefreshToken.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrRefreshToken.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/AcrRefreshToken.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RefreshToken model. */\n+@Fluent\n+public final class AcrRefreshToken {\n+    /*\n+     * The refresh token to be used for generating access tokens\n+     */\n+    @JsonProperty(value = \"refresh_token\")\n+    private String refreshToken;\n+\n+    /**\n+     * Get the refreshToken property: The refresh token to be used for generating access tokens.\n+     *\n+     * @return the refreshToken value.\n+     */\n+    public String getRefreshToken() {\n+        return this.refreshToken;\n+    }\n+\n+    /**\n+     * Set the refreshToken property: The refresh token to be used for generating access tokens.\n+     *\n+     * @param refreshToken the refreshToken value to set.\n+     * @return the RefreshToken object itself.\n+     */\n+    public AcrRefreshToken setRefreshToken(String refreshToken) {\n+        this.refreshToken = refreshToken;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "040c4014fe568428ecfabd81537aebc953ee8162",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2ExchangePostRequestbody.java",
    "status": "added",
    "additions": 154,
    "deletions": 0,
    "changes": 154,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2ExchangePostRequestbody.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2ExchangePostRequestbody.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2ExchangePostRequestbody.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema model. */\n+@Fluent\n+public final class Oauth2ExchangePostRequestbody {\n+    /*\n+     * Can take a value of access_token_refresh_token, or access_token, or\n+     * refresh_token\n+     */\n+    @JsonProperty(value = \"grant_type\", required = true)\n+    private PostContentSchemaGrantType grantType;\n+\n+    /*\n+     * Indicates the name of your Azure container registry.\n+     */\n+    @JsonProperty(value = \"service\", required = true)\n+    private String service;\n+\n+    /*\n+     * AAD tenant associated to the AAD credentials.\n+     */\n+    @JsonProperty(value = \"tenant\")\n+    private String tenant;\n+\n+    /*\n+     * AAD refresh token, mandatory when grant_type is\n+     * access_token_refresh_token or refresh_token\n+     */\n+    @JsonProperty(value = \"refresh_token\")\n+    private String refreshToken;\n+\n+    /*\n+     * AAD access token, mandatory when grant_type is\n+     * access_token_refresh_token or access_token.\n+     */\n+    @JsonProperty(value = \"access_token\")\n+    private String accessToken;\n+\n+    /**\n+     * Get the grantType property: Can take a value of access_token_refresh_token, or access_token, or refresh_token.\n+     *\n+     * @return the grantType value.\n+     */\n+    public PostContentSchemaGrantType getGrantType() {\n+        return this.grantType;\n+    }\n+\n+    /**\n+     * Set the grantType property: Can take a value of access_token_refresh_token, or access_token, or refresh_token.\n+     *\n+     * @param grantType the grantType value to set.\n+     * @return the Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2ExchangePostRequestbody setGrantType(\n+            PostContentSchemaGrantType grantType) {\n+        this.grantType = grantType;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the service property: Indicates the name of your Azure container registry.\n+     *\n+     * @return the service value.\n+     */\n+    public String getService() {\n+        return this.service;\n+    }\n+\n+    /**\n+     * Set the service property: Indicates the name of your Azure container registry.\n+     *\n+     * @param service the service value to set.\n+     * @return the Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2ExchangePostRequestbody setService(\n+            String service) {\n+        this.service = service;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the tenant property: AAD tenant associated to the AAD credentials.\n+     *\n+     * @return the tenant value.\n+     */\n+    public String getTenant() {\n+        return this.tenant;\n+    }\n+\n+    /**\n+     * Set the tenant property: AAD tenant associated to the AAD credentials.\n+     *\n+     * @param tenant the tenant value to set.\n+     * @return the Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2ExchangePostRequestbody setTenant(\n+            String tenant) {\n+        this.tenant = tenant;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the refreshToken property: AAD refresh token, mandatory when grant_type is access_token_refresh_token or\n+     * refresh_token.\n+     *\n+     * @return the refreshToken value.\n+     */\n+    public String getRefreshToken() {\n+        return this.refreshToken;\n+    }\n+\n+    /**\n+     * Set the refreshToken property: AAD refresh token, mandatory when grant_type is access_token_refresh_token or\n+     * refresh_token.\n+     *\n+     * @param refreshToken the refreshToken value to set.\n+     * @return the Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2ExchangePostRequestbody setRefreshToken(\n+            String refreshToken) {\n+        this.refreshToken = refreshToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the accessToken property: AAD access token, mandatory when grant_type is access_token_refresh_token or\n+     * access_token.\n+     *\n+     * @return the accessToken value.\n+     */\n+    public String getAccessToken() {\n+        return this.accessToken;\n+    }\n+\n+    /**\n+     * Set the accessToken property: AAD access token, mandatory when grant_type is access_token_refresh_token or\n+     * access_token.\n+     *\n+     * @param accessToken the accessToken value to set.\n+     * @return the Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2ExchangePostRequestbody setAccessToken(\n+            String accessToken) {\n+        this.accessToken = accessToken;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "26737e9bddeb6a4e1a8abba0f81f40bd724a3727",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2TokenPostRequestbody.java",
    "status": "added",
    "additions": 115,
    "deletions": 0,
    "changes": 115,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2TokenPostRequestbody.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2TokenPostRequestbody.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/Oauth2TokenPostRequestbody.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema model. */\n+@Fluent\n+public final class Oauth2TokenPostRequestbody {\n+    /*\n+     * Grant type is expected to be refresh_token\n+     */\n+    @JsonProperty(value = \"grant_type\", required = true)\n+    private String grantType;\n+\n+    /*\n+     * Indicates the name of your Azure container registry.\n+     */\n+    @JsonProperty(value = \"service\", required = true)\n+    private String service;\n+\n+    /*\n+     * Which is expected to be a valid scope, and can be specified more than\n+     * once for multiple scope requests. You obtained this from the\n+     * Www-Authenticate response header from the challenge.\n+     */\n+    @JsonProperty(value = \"scope\", required = true)\n+    private String scope;\n+\n+    /*\n+     * Must be a valid ACR refresh token\n+     */\n+    @JsonProperty(value = \"refresh_token\", required = true)\n+    private String refreshToken;\n+\n+    /** Creates an instance of PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema class. */\n+    public Oauth2TokenPostRequestbody() {\n+        grantType = \"refresh_token\";\n+    }\n+\n+    /**\n+     * Get the grantType property: Grant type is expected to be refresh_token.\n+     *\n+     * @return the grantType value.\n+     */\n+    public String getGrantType() {\n+        return this.grantType;\n+    }\n+\n+    /**\n+     * Get the service property: Indicates the name of your Azure container registry.\n+     *\n+     * @return the service value.\n+     */\n+    public String getService() {\n+        return this.service;\n+    }\n+\n+    /**\n+     * Set the service property: Indicates the name of your Azure container registry.\n+     *\n+     * @param service the service value to set.\n+     * @return the PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2TokenPostRequestbody setService(String service) {\n+        this.service = service;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the scope property: Which is expected to be a valid scope, and can be specified more than once for multiple\n+     * scope requests. You obtained this from the Www-Authenticate response header from the challenge.\n+     *\n+     * @return the scope value.\n+     */\n+    public String getScope() {\n+        return this.scope;\n+    }\n+\n+    /**\n+     * Set the scope property: Which is expected to be a valid scope, and can be specified more than once for multiple\n+     * scope requests. You obtained this from the Www-Authenticate response header from the challenge.\n+     *\n+     * @param scope the scope value to set.\n+     * @return the PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2TokenPostRequestbody setScope(String scope) {\n+        this.scope = scope;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the refreshToken property: Must be a valid ACR refresh token.\n+     *\n+     * @return the refreshToken value.\n+     */\n+    public String getRefreshToken() {\n+        return this.refreshToken;\n+    }\n+\n+    /**\n+     * Set the refreshToken property: Must be a valid ACR refresh token.\n+     *\n+     * @param refreshToken the refreshToken value to set.\n+     * @return the PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema object itself.\n+     */\n+    public Oauth2TokenPostRequestbody setRefreshToken(\n+            String refreshToken) {\n+        this.refreshToken = refreshToken;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "07b369a48116209378e6e8309ed852a6412775b2",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/PostContentSchemaGrantType.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/PostContentSchemaGrantType.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/PostContentSchemaGrantType.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/com/azure/containers/containerregistry/implementation/models/PostContentSchemaGrantType.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.containers.containerregistry.implementation.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Collection;\n+\n+/** Defines values for PostContentSchemaGrantType. */\n+public final class PostContentSchemaGrantType extends ExpandableStringEnum<PostContentSchemaGrantType> {\n+    /** Static value access_token_refresh_token for PostContentSchemaGrantType. */\n+    public static final PostContentSchemaGrantType ACCESS_TOKEN_REFRESH_TOKEN =\n+            fromString(\"access_token_refresh_token\");\n+\n+    /** Static value access_token for PostContentSchemaGrantType. */\n+    public static final PostContentSchemaGrantType ACCESS_TOKEN = fromString(\"access_token\");\n+\n+    /** Static value refresh_token for PostContentSchemaGrantType. */\n+    public static final PostContentSchemaGrantType REFRESH_TOKEN = fromString(\"refresh_token\");\n+\n+    /**\n+     * Creates or finds a PostContentSchemaGrantType from its string representation.\n+     *\n+     * @param name a name to look for.\n+     * @return the corresponding PostContentSchemaGrantType.\n+     */\n+    @JsonCreator\n+    public static PostContentSchemaGrantType fromString(String name) {\n+        return fromString(name, PostContentSchemaGrantType.class);\n+    }\n+\n+    /** @return known PostContentSchemaGrantType values. */\n+    public static Collection<PostContentSchemaGrantType> values() {\n+        return values(PostContentSchemaGrantType.class);\n+    }\n+}"
  },
  {
    "sha": "11e0465500d4ca89800906907522afc720d4a81a",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/main/java/module-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/module-info.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/main/java/module-info.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -2,5 +2,6 @@\n // Licensed under the MIT License.\n \n module com.azure.containers.containerregistry {\n+    requires transitive com.azure.core;\n     exports com.azure.containers.containerregistry;\n }"
  },
  {
    "sha": "47c32cad06c87c5366b4e043bd48be6f83957133",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryClientPolicyTest.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryClientPolicyTest.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryClientPolicyTest.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryClientPolicyTest.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.authentication;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpMethod;\n+import com.azure.core.test.http.MockHttpResponse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+public class ContainerRegistryClientPolicyTest {\n+\n+    public static final String WWW_AUTHENTICATE = \"WWW-Authenticate\";\n+    public static final String AUTHENTICATE_HEADER = \"Bearer realm=\\\"https://mytest.azurecr.io/oauth2/token\\\",service=\\\"mytest.azurecr.io\\\",scope=\\\"registry:catalog:*\\\",error=\\\"invalid_token\\\"\";\n+    public static final Integer UNAUTHORIZED = 401;\n+    public static final Integer SUCCESS = 200;\n+    public static final String AUTHORIZATION = \"Authorization\";\n+    public static final String BEARER = \"Bearer\";\n+    public static final String TOKENVALUE = \"tokenValue\";\n+    public static final String SERVICENAME = \"mytest.azurecr.io\";\n+    public static final String SCOPENAME = \"registry:catalog:*\";\n+\n+    private ContainerRegistryTokenService service;\n+    private HttpRequest request;\n+    private HttpResponse unauthorizedHttpResponse;\n+    private HttpResponse unauthorizedHttpResponseWithoutHeader;\n+    private HttpPipelineCallContext callContext;\n+    private HttpResponse successResponse;\n+    private HttpPipelineNextPolicy nextPolicy;\n+    private HttpPipelineNextPolicy nextClonePolicy;\n+\n+    @BeforeEach\n+    public void setup() {\n+        AccessToken accessToken = new AccessToken(\"tokenValue\", OffsetDateTime.now().plusMinutes(30));\n+\n+        ContainerRegistryTokenService mockService = mock(ContainerRegistryTokenService.class);\n+        when(mockService.getToken(any(ContainerRegistryTokenRequestContext.class))).thenReturn(Mono.just(accessToken));\n+\n+        HttpRequest request = new HttpRequest(HttpMethod.GET, \"https://mytest.azurecr.io\");\n+\n+        HttpPipelineCallContext context = mock(HttpPipelineCallContext.class);\n+        when(context.getHttpRequest()).thenReturn(request);\n+\n+        MockHttpResponse unauthorizedResponseWithHeader = new MockHttpResponse(\n+            mock(HttpRequest.class),\n+            UNAUTHORIZED,\n+            new HttpHeaders().set(WWW_AUTHENTICATE, AUTHENTICATE_HEADER)\n+        );\n+\n+        MockHttpResponse unauthorizedResponseWithoutHeader = new MockHttpResponse(\n+            mock(HttpRequest.class),\n+            UNAUTHORIZED);\n+\n+        MockHttpResponse successResponse = new MockHttpResponse(\n+            mock(HttpRequest.class),\n+            SUCCESS\n+        );\n+\n+        HttpPipelineNextPolicy mockNextClone = mock(HttpPipelineNextPolicy.class);\n+        when(mockNextClone.process()).thenReturn(Mono.just(successResponse));\n+        HttpPipelineNextPolicy mockNext = mock(HttpPipelineNextPolicy.class);\n+        when(mockNext.clone()).thenReturn(mockNextClone);\n+        when(mockNext.process()).thenReturn(Mono.just(unauthorizedResponseWithHeader));\n+\n+        this.service = mockService;\n+        this.unauthorizedHttpResponse = unauthorizedResponseWithHeader;\n+        this.unauthorizedHttpResponseWithoutHeader = unauthorizedResponseWithoutHeader;\n+        this.callContext = context;\n+        this.request = request;\n+        this.successResponse = successResponse;\n+        this.nextClonePolicy = mockNextClone;\n+        this.nextPolicy = mockNext;\n+    }\n+\n+    @Test\n+    public void requestNoRetryOnOtherErrorCodes() {\n+        ContainerRegistryCredentialsPolicy policy = new ContainerRegistryCredentialsPolicy(this.service);\n+        ContainerRegistryCredentialsPolicy spyPolicy = Mockito.spy(policy);\n+\n+        when(nextPolicy.process()).thenReturn(Mono.just(successResponse));\n+        policy.process(this.callContext, this.nextPolicy).block();\n+\n+        // Make sure no call being done to the authorize request.\n+        verify(spyPolicy, times(0)).authorizeRequest(any(HttpPipelineCallContext.class), any(ContainerRegistryTokenRequestContext.class));\n+\n+        when(nextPolicy.process()).thenReturn(Mono.just(unauthorizedHttpResponseWithoutHeader));\n+        policy.process(this.callContext, this.nextPolicy).block();\n+\n+        // Make sure no call being done to the authorize request.\n+        verify(spyPolicy, times(0)).authorizeRequest(any(HttpPipelineCallContext.class), any(ContainerRegistryTokenRequestContext.class));\n+    }\n+\n+    @Test\n+    public void requestAddBearerTokenToRequest() {\n+        ContainerRegistryCredentialsPolicy policy = new ContainerRegistryCredentialsPolicy(this.service);\n+        ContainerRegistryCredentialsPolicy spyPolicy = Mockito.spy(policy);\n+        Boolean onChallenge = spyPolicy.onChallenge(this.callContext, this.unauthorizedHttpResponse).block();\n+\n+        // Validate that the onChallenge ran successfully.\n+        assertTrue(onChallenge);\n+\n+        // Validate that the request has the correct authorization header.\n+        String tokenValue = this.callContext.getHttpRequest().getHeaders().getValue(AUTHORIZATION);\n+        assertFalse(tokenValue.isEmpty());\n+        assertTrue(tokenValue.startsWith(BEARER));\n+        assertTrue(tokenValue.endsWith(tokenValue));\n+\n+        // Validate that the token creation was called with the correct arguments.\n+        ArgumentCaptor<ContainerRegistryTokenRequestContext> argument = ArgumentCaptor.forClass(ContainerRegistryTokenRequestContext.class);\n+        verify(spyPolicy).authorizeRequest(any(HttpPipelineCallContext.class), argument.capture());\n+\n+        ContainerRegistryTokenRequestContext requestContext = argument.getValue();\n+        assertEquals(SERVICENAME, requestContext.getServiceName());\n+        assertEquals(SCOPENAME, requestContext.getScope());\n+    }\n+}"
  },
  {
    "sha": "f92f49a4a72d8cefbbe3169bd5ea425b53ed8eb2",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenServiceTest.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenServiceTest.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenServiceTest.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/test/java/com/azure/containers/containerregistry/authentication/ContainerRegistryTokenServiceTest.java?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.containers.containerregistry.authentication;\n+\n+import com.azure.containers.containerregistry.implementation.authentication.TokenServiceImpl;\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.time.OffsetDateTime;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.*;\n+\n+public class ContainerRegistryTokenServiceTest {\n+\n+    private TokenCredential tokenCredential;\n+    private HttpPipeline httpPipeline;\n+    private SerializerAdapter serializerAdapter;\n+    private TokenServiceImpl tokenServiceImpl;\n+    private AccessTokenCache refreshTokenCache;\n+    private ContainerRegistryTokenRequestContext requestContext;\n+    private ContainerRegistryTokenCredential refreshTokenCredential;\n+\n+    private static final String SCOPE = \"scope\";\n+    private static final String SERVICENAME = \"serviceName\";\n+    private static final String REFRESHTOKEN = \"refresh_token\";\n+    private static final String ACCESSTOKEN = \"access_token\";\n+\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.httpPipeline = mock(HttpPipeline.class);\n+        this.serializerAdapter = mock(SerializerAdapter.class);\n+\n+        TokenServiceImpl impl = mock(TokenServiceImpl.class);\n+        AccessToken refreshToken = new AccessToken(REFRESHTOKEN, OffsetDateTime.now().plusMinutes(30));\n+        AccessToken accessToken = new AccessToken(ACCESSTOKEN, OffsetDateTime.now().plusMinutes(30));\n+        when(impl.getAcrAccessTokenAsync(anyString(), anyString(), anyString())).thenReturn(Mono.just(accessToken));\n+        when(impl.getAcrRefreshTokenAsync(anyString(), anyString())).thenReturn(Mono.just(refreshToken));\n+\n+        TokenCredential tokenCredential = mock(TokenCredential.class);\n+        when(tokenCredential.getToken(any(TokenRequestContext.class))).thenReturn(Mono.just(accessToken));\n+\n+        ContainerRegistryTokenRequestContext tokenRequestContext = mock(ContainerRegistryTokenRequestContext.class);\n+        when(tokenRequestContext.getScope()).thenReturn(SCOPE);\n+        when(tokenRequestContext.getServiceName()).thenReturn(SERVICENAME);\n+\n+        ContainerRegistryTokenCredential spyRefreshTokenCredential = spy(mock(ContainerRegistryTokenCredential.class));\n+        doReturn(Mono.just(refreshToken)).when(spyRefreshTokenCredential).getToken(any(ContainerRegistryTokenRequestContext.class));\n+\n+\n+\n+        AccessTokenCache refreshTokenCache = new AccessTokenCache(spyRefreshTokenCredential);\n+        this.tokenCredential = tokenCredential;\n+        this.refreshTokenCache = refreshTokenCache;\n+        this.refreshTokenCredential = spyRefreshTokenCredential;\n+        this.requestContext = tokenRequestContext;\n+        this.tokenServiceImpl = impl;\n+    }\n+\n+    @Test\n+    public void refreshTokenRestAPICalledOnlyOnce() throws Exception {\n+        ContainerRegistryTokenService service = new ContainerRegistryTokenService(\n+            this.tokenCredential,\n+            \"myString\",\n+            this.httpPipeline,\n+            this.serializerAdapter\n+        );\n+\n+        service.setTokenService(this.tokenServiceImpl);\n+        service.setRefreshTokenCache(this.refreshTokenCache);\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+\n+        Flux.range(1, 10)\n+            .flatMap(i -> Mono.just(OffsetDateTime.now())\n+                // Runs cache.getToken() on 10 different threads\n+                .subscribeOn(Schedulers.newParallel(\"pool\", 10))\n+                .flatMap(\n+                    start -> service.getToken(this.requestContext).map(accessToken -> 1))\n+                )\n+                .doOnComplete(latch::countDown)\n+                .subscribe();\n+\n+        latch.await();\n+\n+        // We call the acrrefreshToken method only once.\n+        verify(this.refreshTokenCredential, times(1)).getToken(this.requestContext);\n+\n+    }\n+}"
  },
  {
    "sha": "ca6ee9cea8ec189a088d50559325d4e84ff8ad09",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1 @@\n+mock-maker-inline\n\\ No newline at end of file"
  },
  {
    "sha": "872d1d4f91b3a0de1ea60f2a7ea453d3cdda5869",
    "filename": "sdk/containerregistry/azure-containers-containerregistry/swagger/readme.md",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/swagger/readme.md",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55/sdk/containerregistry/azure-containers-containerregistry/swagger/readme.md",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/containerregistry/azure-containers-containerregistry/swagger/readme.md?ref=7cbec67d81e3a2a3ea8fff7b3c10df79bd290c55",
    "patch": "@@ -0,0 +1,54 @@\n+# Azure Containers ContainerRegistry APIs for Java\n+\n+> see https://aka.ms/autorest\n+\n+## Getting Started\n+\n+To build the client SDK for ContainerRegistry simply [Install AutoRest](https://github.com/Azure/autorest/blob/master/docs/install/readme.md) and in this folder, run:\n+\n+### Setup\n+```ps\n+You need to have the following installed on your machine:\n+\n+Node.JS v10.x - v13.x\n+Java 8+\n+Maven 3.x\n+You need to have autorest-beta installed through NPM:\n+\n+npm i -g autorest\n+```\n+\n+### Generation\n+\n+There is one swagger for Container Registry APIs.\n+\n+```ps\n+cd <swagger-folder>\n+autorest --java --use=C:/work/autorest.java\n+```\n+\n+### Code generation settings\n+``` yaml\n+input-file: https://github.com/Azure/azure-rest-api-specs/blob/255757f41275e8ec474361690ea8886cae8a503b/specification/containerregistry/data-plane/Microsoft.ContainerRegistry/preview/2019-08-15/containerregistry.json\n+java: true\n+output-folder: c:\\temp\n+generate-client-as-impl: true\n+generate-sync-async-clients: true\n+namespace: com.azure.containers.containerregistry\n+generate-client-interfaces: false\n+sync-methods: all\n+license-header: MICROSOFT_MIT_SMALL\n+add-context-parameter: true\n+models-subpackage: implementation.models\n+directive:\n+    - rename-model:\n+        from: ChangeableAttributes\n+        to: ContentPermissions\n+    - rename-model:\n+        from: RepositoryAttributes\n+        to: RepositoryProperties\n+# custom-types-subpackage: models\n+# custom-types: ChangeableAttributes;RepositoryAttributes\n+context-client-method-parameter: true\n+enable-xml: false\n+```"
  }
]
