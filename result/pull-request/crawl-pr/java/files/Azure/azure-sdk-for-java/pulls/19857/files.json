[
  {
    "sha": "98cd3fd999b157661f955ffdfbeab372b79c98e2",
    "filename": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/DefaultJsonSerializer.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/DefaultJsonSerializer.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/DefaultJsonSerializer.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/DefaultJsonSerializer.java?ref=a8b0faccab7ec45661a8b8f3aa58d366054bfabe",
    "patch": "@@ -20,9 +20,9 @@\n  * Jackson based implementation of the {@link JsonSerializer}. This can be used as a default Json serializer if\n  * no JsonSerializerProvider is in the class path.\n  */\n-public class JacksonSerializer implements JsonSerializer {\n+public final class DefaultJsonSerializer implements JsonSerializer {\n     private final SerializerAdapter jacksonAdapter = JacksonAdapter.createDefaultSerializerAdapter();\n-    private final ClientLogger logger = new ClientLogger(JacksonSerializer.class);\n+    private final ClientLogger logger = new ClientLogger(DefaultJsonSerializer.class);\n \n     @Override\n     public <T> T deserialize(InputStream stream, TypeReference<T> typeReference) {",
    "previous_filename": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/JacksonSerializer.java"
  },
  {
    "sha": "cf8611774ed5fc2c6ba3db2289b96d6786d0142a",
    "filename": "sdk/core/azure-core/src/main/java/com/azure/core/models/CloudEvent.java",
    "status": "modified",
    "additions": 2,
    "deletions": 13,
    "changes": 15,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/models/CloudEvent.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/models/CloudEvent.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/main/java/com/azure/core/models/CloudEvent.java?ref=a8b0faccab7ec45661a8b8f3aa58d366054bfabe",
    "patch": "@@ -4,7 +4,6 @@\n package com.azure.core.models;\n \n import com.azure.core.annotation.Fluent;\n-import com.azure.core.implementation.serializer.JacksonSerializer;\n import com.azure.core.util.BinaryData;\n import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.serializer.JsonSerializer;\n@@ -67,21 +66,11 @@\n public final class CloudEvent {\n     private static final String SPEC_VERSION = \"1.0\";\n \n-    private static final JsonSerializer SERIALIZER;\n-    static {\n-        JsonSerializer tmp;\n-        try {\n-            tmp = JsonSerializerProviders.createInstance();\n-        } catch (IllegalStateException e) {\n-            tmp = new JacksonSerializer();\n-        }\n-        SERIALIZER = tmp;\n-    }\n+    private static final JsonSerializer SERIALIZER = JsonSerializerProviders.createInstance(true);\n \n     // May get SERIALIZER's object mapper in the future.\n     private static final ObjectMapper BINARY_DATA_OBJECT_MAPPER = new ObjectMapper();\n-    private static final Map<String, Object> EMPTY_ATTRIBUTES_MAP = Collections.unmodifiableMap(\n-        new HashMap<String, Object>());\n+    private static final Map<String, Object> EMPTY_ATTRIBUTES_MAP = Collections.unmodifiableMap(new HashMap<>());\n \n     private static final TypeReference<List<CloudEvent>> DESERIALIZER_TYPE_REFERENCE =\n         new TypeReference<List<CloudEvent>>() {"
  },
  {
    "sha": "de67096612a04c1b4bbbdb8219413b951d5b9a3a",
    "filename": "sdk/core/azure-core/src/main/java/com/azure/core/util/BinaryData.java",
    "status": "modified",
    "additions": 21,
    "deletions": 33,
    "changes": 54,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/util/BinaryData.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/util/BinaryData.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/main/java/com/azure/core/util/BinaryData.java?ref=a8b0faccab7ec45661a8b8f3aa58d366054bfabe",
    "patch": "@@ -5,6 +5,7 @@\n \n import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.JsonSerializerProvider;\n import com.azure.core.util.serializer.JsonSerializerProviders;\n import com.azure.core.util.serializer.ObjectSerializer;\n import com.azure.core.util.serializer.TypeReference;\n@@ -59,14 +60,13 @@\n     private static final BinaryData EMPTY_DATA = new BinaryData(new byte[0]);\n     private static final int STREAM_READ_SIZE = 1024;\n \n-    private static final Object LOCK = new Object();\n-\n-    private static volatile JsonSerializer defaultJsonSerializer;\n+    private static final JsonSerializer SERIALIZER = JsonSerializerProviders.createInstance(true);\n \n     private final byte[] data;\n \n     private String dataAsStringCache;\n \n+\n     /**\n      * Create an instance of {@link BinaryData} from the given byte array.\n      *\n@@ -203,19 +203,19 @@ public static BinaryData fromBytes(byte[] data) {\n      * <p>\n      * If {@code data} is null an empty {@link BinaryData} will be returned.\n      * <p>\n-     * <b>Note:</b> A {@link JsonSerializer} implementation must be available on the classpath.\n+     * <b>Note:</b> This method first looks for a {@link JsonSerializerProvider} implementation on the classpath. If no\n+     * implementation is found, a default Jackson-based implementation will be used to serialize the object.\n      *\n      * <p><strong>Creating an instance from an Object</strong></p>\n      *\n      * {@codesnippet com.azure.core.util.BinaryData.fromObject#Object}\n      *\n      * @param data The object that will be JSON serialized that {@link BinaryData} will represent.\n      * @return A {@link BinaryData} representing the JSON serialized object.\n-     * @throws IllegalStateException If a {@link JsonSerializer} implementation cannot be found on the classpath.\n      * @see JsonSerializer\n      */\n     public static BinaryData fromObject(Object data) {\n-        return fromObject(data, getDefaultSerializer());\n+        return fromObject(data, SERIALIZER);\n     }\n \n     /**\n@@ -224,19 +224,19 @@ public static BinaryData fromObject(Object data) {\n      * <p>\n      * If {@code data} is null an empty {@link BinaryData} will be returned.\n      * <p>\n-     * <b>Note:</b> A {@link JsonSerializer} implementation must be available on the classpath.\n+     * <b>Note:</b> This method first looks for a {@link JsonSerializerProvider} implementation on the classpath. If no\n+     * implementation is found, a default Jackson-based implementation will be used to serialize the object.\n      *\n      * <p><strong>Creating an instance from an Object</strong></p>\n      *\n      * {@codesnippet com.azure.core.util.BinaryData.fromObjectAsync#Object}\n      *\n      * @param data The object that will be JSON serialized that {@link BinaryData} will represent.\n      * @return A {@link Mono} of {@link BinaryData} representing the JSON serialized object.\n-     * @throws IllegalStateException If a {@link JsonSerializer} implementation cannot be found on the classpath.\n      * @see JsonSerializer\n      */\n     public static Mono<BinaryData> fromObjectAsync(Object data) {\n-        return fromObjectAsync(data, getDefaultSerializer());\n+        return fromObjectAsync(data, SERIALIZER);\n     }\n \n     /**\n@@ -337,7 +337,8 @@ public String toString() {\n      * The type, represented by {@link Class}, should be a non-generic class, for generic classes use {@link\n      * #toObject(TypeReference)}.\n      * <p>\n-     * <b>Note:</b> A {@link JsonSerializer} implementation must be available on the classpath.\n+     * <b>Note:</b> This method first looks for a {@link JsonSerializerProvider} implementation on the classpath. If no\n+     * implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n      *\n      * <p><strong>Get a non-generic Object from the BinaryData</strong></p>\n      *\n@@ -347,11 +348,10 @@ public String toString() {\n      * @param <T> Type of the deserialized Object.\n      * @return An {@link Object} representing the JSON deserialized {@link BinaryData}.\n      * @throws NullPointerException If {@code clazz} is null.\n-     * @throws IllegalStateException If a {@link JsonSerializer} implementation cannot be found on the classpath.\n      * @see JsonSerializer\n      */\n     public <T> T toObject(Class<T> clazz) {\n-        return toObject(TypeReference.createInstance(clazz), getDefaultSerializer());\n+        return toObject(TypeReference.createInstance(clazz), SERIALIZER);\n     }\n \n     /**\n@@ -362,7 +362,8 @@ public String toString() {\n      * generic create a sub-type of {@link TypeReference}, if the type is non-generic use {@link\n      * TypeReference#createInstance(Class)}.\n      * <p>\n-     * <b>Note:</b> A {@link JsonSerializer} implementation must be available on the classpath.\n+     * <b>Note:</b> This method first looks for a {@link JsonSerializerProvider} implementation on the classpath. If no\n+     * implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n      *\n      * <p><strong>Get a non-generic Object from the BinaryData</strong></p>\n      *\n@@ -376,11 +377,10 @@ public String toString() {\n      * @param <T> Type of the deserialized Object.\n      * @return An {@link Object} representing the JSON deserialized {@link BinaryData}.\n      * @throws NullPointerException If {@code typeReference} is null.\n-     * @throws IllegalStateException If a {@link JsonSerializer} implementation cannot be found on the classpath.\n      * @see JsonSerializer\n      */\n     public <T> T toObject(TypeReference<T> typeReference) {\n-        return toObject(typeReference, getDefaultSerializer());\n+        return toObject(typeReference, SERIALIZER);\n     }\n \n     /**\n@@ -464,7 +464,8 @@ public String toString() {\n      * The type, represented by {@link Class}, should be a non-generic class, for generic classes use {@link\n      * #toObject(TypeReference)}.\n      * <p>\n-     * <b>Note:</b> A {@link JsonSerializer} implementation must be available on the classpath.\n+     * <b>Note:</b> This method first looks for a {@link JsonSerializerProvider} implementation on the classpath. If no\n+     * implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n      *\n      * <p><strong>Get a non-generic Object from the BinaryData</strong></p>\n      *\n@@ -474,11 +475,10 @@ public String toString() {\n      * @param <T> Type of the deserialized Object.\n      * @return A {@link Mono} of {@link Object} representing the JSON deserialized {@link BinaryData}.\n      * @throws NullPointerException If {@code clazz} is null.\n-     * @throws IllegalStateException If a {@link JsonSerializer} implementation cannot be found on the classpath.\n      * @see JsonSerializer\n      */\n     public <T> Mono<T> toObjectAsync(Class<T> clazz) {\n-        return toObjectAsync(TypeReference.createInstance(clazz), getDefaultSerializer());\n+        return toObjectAsync(TypeReference.createInstance(clazz), SERIALIZER);\n     }\n \n     /**\n@@ -489,7 +489,8 @@ public String toString() {\n      * generic create a sub-type of {@link TypeReference}, if the type is non-generic use {@link\n      * TypeReference#createInstance(Class)}.\n      * <p>\n-     * <b>Note:</b> A {@link JsonSerializer} implementation must be available on the classpath.\n+     * <b>Note:</b> This method first looks for a {@link JsonSerializerProvider} implementation on the classpath. If no\n+     * implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n      *\n      * <p><strong>Get a non-generic Object from the BinaryData</strong></p>\n      *\n@@ -503,11 +504,10 @@ public String toString() {\n      * @param <T> Type of the deserialized Object.\n      * @return A {@link Mono} of {@link Object} representing the JSON deserialized {@link BinaryData}.\n      * @throws NullPointerException If {@code typeReference} is null.\n-     * @throws IllegalStateException If a {@link JsonSerializer} implementation cannot be found on the classpath.\n      * @see JsonSerializer\n      */\n     public <T> Mono<T> toObjectAsync(TypeReference<T> typeReference) {\n-        return toObjectAsync(typeReference, getDefaultSerializer());\n+        return toObjectAsync(typeReference, SERIALIZER);\n     }\n \n     /**\n@@ -608,16 +608,4 @@ public InputStream toStream() {\n     public ByteBuffer toByteBuffer() {\n         return ByteBuffer.wrap(this.data).asReadOnlyBuffer();\n     }\n-\n-    /* This will ensure lazy instantiation to avoid hard dependency on Json Serializer. */\n-    private static JsonSerializer getDefaultSerializer() {\n-        if (defaultJsonSerializer == null) {\n-            synchronized (LOCK) {\n-                if (defaultJsonSerializer == null) {\n-                    defaultJsonSerializer = JsonSerializerProviders.createInstance();\n-                }\n-            }\n-        }\n-        return defaultJsonSerializer;\n-    }\n }"
  },
  {
    "sha": "e7d0c8b6cf19998dd40026984e4afd331fc72dc0",
    "filename": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializerProviders.java",
    "status": "modified",
    "additions": 32,
    "deletions": 11,
    "changes": 43,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializerProviders.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializerProviders.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializerProviders.java?ref=a8b0faccab7ec45661a8b8f3aa58d366054bfabe",
    "patch": "@@ -3,6 +3,8 @@\n \n package com.azure.core.util.serializer;\n \n+import com.azure.core.implementation.serializer.DefaultJsonSerializer;\n+\n import java.util.Iterator;\n import java.util.ServiceLoader;\n \n@@ -17,36 +19,55 @@\n         + \"Additionally, refer to https://aka.ms/azsdk/java/docs/custom-jsonserializer to learn about writing your own \"\n         + \"implementation.\";\n \n-    private static JsonSerializerProvider defaultProvider;\n+    private static JsonSerializerProvider jsonSerializerProvider;\n     private static boolean attemptedLoad;\n \n     /**\n      * Creates an instance of {@link JsonSerializer} using the first {@link JsonSerializerProvider} found in the\n      * classpath.\n      *\n      * @return A new instance of {@link JsonSerializer}.\n+     * @throws IllegalStateException if a {@link JsonSerializerProvider} is not found in the classpath.\n      */\n     public static JsonSerializer createInstance() {\n-        if (defaultProvider == null) {\n-            loadFromClasspath();\n+        return createInstance(false);\n+    }\n+\n+    /**\n+     * Creates an instance of {@link JsonSerializer} using the first {@link JsonSerializerProvider} found in the\n+     * classpath. If no provider is found in classpath, a default provider will be included if {@code useDefaultIfAbsent}\n+     * is set to true.\n+     *\n+     * @param useDefaultIfAbsent If no provider is found in classpath, a default provider will be used.\n+     * if {@code useDefaultIfAbsent} is set to true.\n+     * @return A new instance of {@link JsonSerializer}.\n+     * @throws IllegalStateException if a {@link JsonSerializerProvider} is not found in the classpath and\n+     * {@code useDefaultIfAbsent} is set to false.\n+     */\n+    public static JsonSerializer createInstance(boolean useDefaultIfAbsent) {\n+        if (jsonSerializerProvider == null) {\n+            loadDefaultSerializer();\n         }\n \n-        return defaultProvider.createInstance();\n+        if (jsonSerializerProvider != null) {\n+            return jsonSerializerProvider.createInstance();\n+        }\n+\n+        if (useDefaultIfAbsent) {\n+            return new DefaultJsonSerializer();\n+        }\n+        throw new IllegalStateException(CANNOT_FIND_JSON_SERIALIZER_PROVIDER);\n     }\n \n-    private static synchronized void loadFromClasspath() {\n-        if (attemptedLoad && defaultProvider != null) {\n+    private static synchronized void loadDefaultSerializer() {\n+        if (attemptedLoad) {\n             return;\n-        } else if (attemptedLoad) {\n-            throw new IllegalStateException(CANNOT_FIND_JSON_SERIALIZER_PROVIDER);\n         }\n \n         attemptedLoad = true;\n         Iterator<JsonSerializerProvider> iterator = ServiceLoader.load(JsonSerializerProvider.class).iterator();\n         if (iterator.hasNext()) {\n-            defaultProvider = iterator.next();\n-        } else {\n-            throw new IllegalStateException(CANNOT_FIND_JSON_SERIALIZER_PROVIDER);\n+            jsonSerializerProvider = iterator.next();\n         }\n     }\n "
  },
  {
    "sha": "c5345c4fb0f39c6c2d1b6e696a3e7b37f84d684f",
    "filename": "sdk/core/azure-core/src/samples/java/com/azure/core/util/BinaryDataJavaDocCodeSnippet.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/samples/java/com/azure/core/util/BinaryDataJavaDocCodeSnippet.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/samples/java/com/azure/core/util/BinaryDataJavaDocCodeSnippet.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/samples/java/com/azure/core/util/BinaryDataJavaDocCodeSnippet.java?ref=a8b0faccab7ec45661a8b8f3aa58d366054bfabe",
    "patch": "@@ -670,7 +670,7 @@ public void toReadOnlyByteBuffer() {\n     }\n \n     public static class MyJsonSerializer implements JsonSerializer {\n-        private final ClientLogger logger = new ClientLogger(BinaryDataTest.MyJsonSerializer.class);\n+        private final ClientLogger logger = new ClientLogger(MyJsonSerializer.class);\n         private final ObjectMapper mapper;\n         private final TypeFactory typeFactory;\n "
  },
  {
    "sha": "d87a7ac39947f3804d6d11b8454cb71c71b73b22",
    "filename": "sdk/core/azure-core/src/test/java/com/azure/core/models/CloudEventTests.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/test/java/com/azure/core/models/CloudEventTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/test/java/com/azure/core/models/CloudEventTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/test/java/com/azure/core/models/CloudEventTests.java?ref=a8b0faccab7ec45661a8b8f3aa58d366054bfabe",
    "patch": "@@ -3,7 +3,7 @@\n \n package com.azure.core.models;\n \n-import com.azure.core.implementation.serializer.JacksonSerializer;\n+import com.azure.core.implementation.serializer.DefaultJsonSerializer;\n import com.azure.core.util.BinaryData;\n import com.azure.core.util.serializer.TypeReference;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -37,7 +37,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n public class CloudEventTests {\n-    private static final JacksonSerializer SERIALIZER = new JacksonSerializer();\n+    private static final DefaultJsonSerializer SERIALIZER = new DefaultJsonSerializer();\n \n     @Test\n     public void testRoundTripCloudEvents() throws IOException {"
  },
  {
    "sha": "e3de25a25fa0c450ad9cc3b9a5fe3e042139b31b",
    "filename": "sdk/core/azure-core/src/test/java/com/azure/core/util/BinaryDataTest.java",
    "status": "modified",
    "additions": 90,
    "deletions": 10,
    "changes": 100,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/test/java/com/azure/core/util/BinaryDataTest.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/a8b0faccab7ec45661a8b8f3aa58d366054bfabe/sdk/core/azure-core/src/test/java/com/azure/core/util/BinaryDataTest.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core/src/test/java/com/azure/core/util/BinaryDataTest.java?ref=a8b0faccab7ec45661a8b8f3aa58d366054bfabe",
    "patch": "@@ -34,7 +34,7 @@\n  * Test class for {@link BinaryData}.\n  */\n public class BinaryDataTest {\n-    private static final ObjectSerializer DEFAULT_SERIALIZER = new MyJsonSerializer();\n+    private static final ObjectSerializer CUSTOM_SERIALIZER = new MyJsonSerializer();\n \n     @Test\n     public void fromCustomObject() {\n@@ -43,11 +43,11 @@ public void fromCustomObject() {\n         final Person expectedValue = new Person().setName(\"John Doe\").setAge(50);\n \n         // Act\n-        final BinaryData data = BinaryData.fromObject(actualValue, DEFAULT_SERIALIZER);\n+        final BinaryData data = BinaryData.fromObject(actualValue, CUSTOM_SERIALIZER);\n \n         // Assert\n         assertEquals(expectedValue, data.toObject(TypeReference.createInstance(expectedValue.getClass()),\n-            DEFAULT_SERIALIZER));\n+            CUSTOM_SERIALIZER));\n     }\n \n     @Test\n@@ -57,11 +57,11 @@ public void fromDouble() {\n         final Double expectedValue = Double.valueOf(\"10.1\");\n \n         // Act\n-        final BinaryData data = BinaryData.fromObject(actualValue, DEFAULT_SERIALIZER);\n+        final BinaryData data = BinaryData.fromObject(actualValue, CUSTOM_SERIALIZER);\n \n         // Assert\n         assertEquals(expectedValue, data.toObject(TypeReference.createInstance(expectedValue.getClass()),\n-            DEFAULT_SERIALIZER));\n+            CUSTOM_SERIALIZER));\n     }\n \n     @Test\n@@ -71,7 +71,7 @@ public void anyTypeToByteArray() {\n         final byte[] expectedValue = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":50}\".getBytes(StandardCharsets.UTF_8);\n \n         // Act\n-        final BinaryData data = BinaryData.fromObject(actualValue, DEFAULT_SERIALIZER);\n+        final BinaryData data = BinaryData.fromObject(actualValue, CUSTOM_SERIALIZER);\n \n         // Assert\n         assertArrayEquals(expectedValue, data.toBytes());\n@@ -203,11 +203,11 @@ public void createFromStreamAsync() {\n     public void createFromObjectAsync() {\n         // Arrange\n         final Person expected = new Person().setName(\"Jon\").setAge(50);\n-        final BinaryData expectedBinaryData = BinaryData.fromObjectAsync(expected, DEFAULT_SERIALIZER).block();\n+        final BinaryData expectedBinaryData = BinaryData.fromObjectAsync(expected, CUSTOM_SERIALIZER).block();\n \n         // Act & Assert\n         StepVerifier.create(expectedBinaryData\n-            .toObjectAsync(TypeReference.createInstance(Person.class), DEFAULT_SERIALIZER))\n+            .toObjectAsync(TypeReference.createInstance(Person.class), CUSTOM_SERIALIZER))\n             .assertNext(actual -> {\n                 System.out.println(actual.getName());\n                 System.out.println(actual.getAge());\n@@ -225,11 +225,11 @@ public void createFromObjectAsyncWithGenerics() {\n         personList.add(person1);\n         personList.add(person2);\n \n-        final BinaryData expectedBinaryData = BinaryData.fromObjectAsync(personList, DEFAULT_SERIALIZER).block();\n+        final BinaryData expectedBinaryData = BinaryData.fromObjectAsync(personList, CUSTOM_SERIALIZER).block();\n \n         // Act & Assert\n         StepVerifier.create(expectedBinaryData\n-            .toObjectAsync(new TypeReference<List<Person>>() { }, DEFAULT_SERIALIZER))\n+            .toObjectAsync(new TypeReference<List<Person>>() { }, CUSTOM_SERIALIZER))\n             .assertNext(persons -> {\n                 assertEquals(2, persons.size());\n                 assertEquals(\"Jon\", persons.get(0).getName());\n@@ -298,6 +298,86 @@ public void toReadOnlyByteBufferThrowsOnMutation() {\n         assertThrows(ReadOnlyBufferException.class, () -> binaryData.toByteBuffer().put((byte) 0));\n     }\n \n+    @Test\n+    public void fromCustomObjectWithDefaultSerializer() {\n+        // Arrange\n+        final Person actualValue = new Person().setName(\"John Doe\").setAge(50);\n+        final Person expectedValue = new Person().setName(\"John Doe\").setAge(50);\n+\n+        // Act\n+        final BinaryData data = BinaryData.fromObject(actualValue);\n+\n+        // Assert\n+        assertEquals(expectedValue, data.toObject(TypeReference.createInstance(expectedValue.getClass())));\n+    }\n+\n+    @Test\n+    public void fromDoubleWithDefaultSerializer() {\n+        // Arrange\n+        final Double actualValue = Double.valueOf(\"10.1\");\n+        final Double expectedValue = Double.valueOf(\"10.1\");\n+\n+        // Act\n+        final BinaryData data = BinaryData.fromObject(actualValue);\n+\n+        // Assert\n+        assertEquals(expectedValue, data.toObject(TypeReference.createInstance(expectedValue.getClass())));\n+    }\n+\n+    @Test\n+    public void anyTypeToByteArrayWithDefaultSerializer() {\n+        // Assert\n+        final Person actualValue = new Person().setName(\"John Doe\").setAge(50);\n+        final byte[] expectedValue = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":50}\".getBytes(StandardCharsets.UTF_8);\n+\n+        // Act\n+        final BinaryData data = BinaryData.fromObject(actualValue);\n+\n+        // Assert\n+        assertArrayEquals(expectedValue, data.toBytes());\n+    }\n+\n+    @Test\n+    public void createFromObjectAsyncWithDefaultSerializer() {\n+        // Arrange\n+        final Person expected = new Person().setName(\"Jon\").setAge(50);\n+        final BinaryData expectedBinaryData = BinaryData.fromObjectAsync(expected).block();\n+\n+        // Act & Assert\n+        StepVerifier.create(expectedBinaryData\n+            .toObjectAsync(TypeReference.createInstance(Person.class)))\n+            .assertNext(actual -> {\n+                System.out.println(actual.getName());\n+                System.out.println(actual.getAge());\n+                Assertions.assertEquals(expected, actual);\n+            })\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    public void createFromObjectAsyncWithGenericsWithDefaultSerializer() {\n+        // Arrange\n+        final Person person1 = new Person().setName(\"Jon\").setAge(50);\n+        final Person person2 = new Person().setName(\"Jack\").setAge(25);\n+        List<Person> personList = new ArrayList<>();\n+        personList.add(person1);\n+        personList.add(person2);\n+\n+        final BinaryData expectedBinaryData = BinaryData.fromObjectAsync(personList).block();\n+\n+        // Act & Assert\n+        StepVerifier.create(expectedBinaryData\n+            .toObjectAsync(new TypeReference<List<Person>>() { }))\n+            .assertNext(persons -> {\n+                assertEquals(2, persons.size());\n+                assertEquals(\"Jon\", persons.get(0).getName());\n+                assertEquals(\"Jack\", persons.get(1).getName());\n+                assertEquals(50, persons.get(0).getAge());\n+                assertEquals(25, persons.get(1).getAge());\n+            })\n+            .verifyComplete();\n+    }\n+\n     public static class MyJsonSerializer implements JsonSerializer {\n         private final ClientLogger logger = new ClientLogger(MyJsonSerializer.class);\n         private final ObjectMapper mapper;"
  }
]
