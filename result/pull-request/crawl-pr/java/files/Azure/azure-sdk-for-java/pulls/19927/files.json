[
  {
    "sha": "3c75164e88186461d55d5cc38c1c2cc513d51585",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArray.java",
    "status": "modified",
    "additions": 15,
    "deletions": 174,
    "changes": 189,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArray.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArray.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArray.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,15 +3,14 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n import com.azure.core.util.logging.ClientLogger;\n \n import java.util.AbstractList;\n import java.util.Collection;\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.ListIterator;\n-import java.util.NoSuchElementException;\n import java.util.Objects;\n import java.util.function.Predicate;\n import java.util.function.UnaryOperator;\n@@ -21,7 +20,9 @@\n  *\n  * @param <T> The type of geometry coordinates.\n  */\n-public class GeoArray<T> extends AbstractList<T> {\n+@Immutable\n+final class GeoArray<T> extends AbstractList<T> {\n+    private static final String NO_MUTATION_MESSAGE = \"GeoArray cannot be mutated.\";\n     private final ClientLogger logger = new ClientLogger(GeoArray.class);\n \n     private final Object container;\n@@ -37,8 +38,8 @@ public T get(int index) {\n             return (T) ((List<?>) container).get(index);\n         } else if (container instanceof GeoPointCollection) {\n             return (T) ((GeoPointCollection) container).getPoints().get(index).getCoordinates();\n-        } else if (container instanceof GeoLineCollection) {\n-            return (T) ((GeoLineCollection) container).getLines().get(index).getCoordinates();\n+        } else if (container instanceof GeoLineStringCollection) {\n+            return (T) ((GeoLineStringCollection) container).getLines().get(index).getCoordinates();\n         } else if (container instanceof GeoPolygon) {\n             return (T) ((GeoPolygon) container).getRings().get(index).getCoordinates();\n         } else if (container instanceof GeoPolygonCollection) {\n@@ -54,8 +55,8 @@ public int size() {\n             return ((List<?>) container).size();\n         } else if (container instanceof GeoPointCollection) {\n             return ((GeoPointCollection) container).getPoints().size();\n-        } else if (container instanceof GeoLineCollection) {\n-            return ((GeoLineCollection) container).getLines().size();\n+        } else if (container instanceof GeoLineStringCollection) {\n+            return ((GeoLineStringCollection) container).getLines().size();\n         } else if (container instanceof GeoPolygon) {\n             return ((GeoPolygon) container).getRings().size();\n         } else if (container instanceof GeoPolygonCollection) {\n@@ -67,84 +68,7 @@ public int size() {\n \n     @Override\n     public Iterator<T> iterator() {\n-        return new GeoArrayIterator();\n-    }\n-\n-    @Override\n-    public ListIterator<T> listIterator(int index) {\n-        return new GeoArrayListIterator(index);\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException} as GeoArray doesn't support mutation.\n-     *\n-     * @param t The element that would be added.\n-     * @return Throws an exception.\n-     * @throws UnsupportedOperationException GeoArray doesn't support mutation.\n-     */\n-    @Override\n-    public boolean add(T t) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException} as GeoArray doesn't support mutation.\n-     *\n-     * @param index The index where the element would be added.\n-     * @param element The element that would be added.\n-     * @throws UnsupportedOperationException GeoArray doesn't support mutation.\n-     */\n-    @Override\n-    public void add(int index, T element) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException} as GeoArray doesn't support mutation.\n-     *\n-     * @param index The index where the element would be added.\n-     * @param element The element that would be added.\n-     * @return Throws an exception.\n-     * @throws UnsupportedOperationException GeoArray doesn't support mutation.\n-     */\n-    @Override\n-    public T set(int index, T element) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException} as GeoArray doesn't support mutation.\n-     *\n-     * @param index The index where the element would be removed.\n-     * @return Throws an exception.\n-     * @throws UnsupportedOperationException GeoArray doesn't support mutation.\n-     */\n-    @Override\n-    public T remove(int index) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException} as GeoArray doesn't support mutation.\n-     *\n-     * @throws UnsupportedOperationException GeoArray doesn't support mutation.\n-     */\n-    @Override\n-    public void clear() {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException} as GeoArray doesn't support mutation.\n-     *\n-     * @param index The index where the element would be added.\n-     * @param c The collection of elements that would be added.\n-     * @return Throws an exception.\n-     * @throws UnsupportedOperationException GeoArray doesn't support mutation.\n-     */\n-    @Override\n-    public boolean addAll(int index, Collection<? extends T> c) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n+        return new GeoArrayIterator<>(this);\n     }\n \n     /**\n@@ -156,19 +80,7 @@ public boolean addAll(int index, Collection<? extends T> c) {\n      */\n     @Override\n     public boolean remove(Object o) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException} as GeoArray doesn't support mutation.\n-     *\n-     * @param c The collection of elements that would be added.\n-     * @return Throws an exception.\n-     * @throws UnsupportedOperationException GeoArray doesn't support mutation.\n-     */\n-    @Override\n-    public boolean addAll(Collection<? extends T> c) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n+        throw logger.logExceptionAsError(new UnsupportedOperationException(NO_MUTATION_MESSAGE));\n     }\n \n     /**\n@@ -180,7 +92,7 @@ public boolean addAll(Collection<? extends T> c) {\n      */\n     @Override\n     public boolean removeAll(Collection<?> c) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n+        throw logger.logExceptionAsError(new UnsupportedOperationException(NO_MUTATION_MESSAGE));\n     }\n \n     /**\n@@ -192,7 +104,7 @@ public boolean removeAll(Collection<?> c) {\n      */\n     @Override\n     public boolean retainAll(Collection<?> c) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n+        throw logger.logExceptionAsError(new UnsupportedOperationException(NO_MUTATION_MESSAGE));\n     }\n \n     /**\n@@ -203,7 +115,7 @@ public boolean retainAll(Collection<?> c) {\n      */\n     @Override\n     public void replaceAll(UnaryOperator<T> operator) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n+        throw logger.logExceptionAsError(new UnsupportedOperationException(NO_MUTATION_MESSAGE));\n     }\n \n     /**\n@@ -214,7 +126,7 @@ public void replaceAll(UnaryOperator<T> operator) {\n      */\n     @Override\n     public void sort(Comparator<? super T> c) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n+        throw logger.logExceptionAsError(new UnsupportedOperationException(NO_MUTATION_MESSAGE));\n     }\n \n     /**\n@@ -226,7 +138,7 @@ public void sort(Comparator<? super T> c) {\n      */\n     @Override\n     public boolean removeIf(Predicate<? super T> filter) {\n-        throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n+        throw logger.logExceptionAsError(new UnsupportedOperationException(NO_MUTATION_MESSAGE));\n     }\n \n     /**\n@@ -260,75 +172,4 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return Objects.hashCode(container);\n     }\n-\n-    private class GeoArrayIterator implements Iterator<T> {\n-        transient int cursor;\n-\n-        @Override\n-        public boolean hasNext() {\n-            return cursor != size();\n-        }\n-\n-        @Override\n-        public T next() {\n-            try {\n-                int i = cursor;\n-                T value = get(i);\n-                cursor = i + 1;\n-\n-                return value;\n-            } catch (IndexOutOfBoundsException ex) {\n-                throw logger.logExceptionAsError(new NoSuchElementException());\n-            }\n-        }\n-    }\n-\n-    private final class GeoArrayListIterator extends GeoArrayIterator implements ListIterator<T> {\n-        private GeoArrayListIterator(int index) {\n-            cursor = index;\n-        }\n-\n-        @Override\n-        public boolean hasPrevious() {\n-            return cursor != 0;\n-        }\n-\n-        @Override\n-        public T previous() {\n-            try {\n-                int i = cursor - 1;\n-                T value = get(i);\n-                cursor = i;\n-\n-                return value;\n-            } catch (IndexOutOfBoundsException ex) {\n-                throw logger.logExceptionAsError(new NoSuchElementException());\n-            }\n-        }\n-\n-        @Override\n-        public int nextIndex() {\n-            return cursor;\n-        }\n-\n-        @Override\n-        public int previousIndex() {\n-            return cursor - 1;\n-        }\n-\n-        @Override\n-        public void remove() {\n-            throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-        }\n-\n-        @Override\n-        public void set(T t) {\n-            throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-        }\n-\n-        @Override\n-        public void add(T t) {\n-            throw logger.logExceptionAsError(new UnsupportedOperationException(\"GeoArray cannot be mutated.\"));\n-        }\n-    }\n }"
  },
  {
    "sha": "5a8a0aad89e7490419cc3ea2b78f7047e3199653",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArrayIterator.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArrayIterator.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArrayIterator.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoArrayIterator.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.geojson;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+final class GeoArrayIterator<T> implements Iterator<T> {\n+    private final ClientLogger logger = new ClientLogger(GeoArrayIterator.class);\n+\n+    private final GeoArray<T> container;\n+\n+    private transient int cursor;\n+\n+    GeoArrayIterator(GeoArray<T> container) {\n+        this.container = container;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return cursor < container.size();\n+    }\n+\n+    @Override\n+    public T next() {\n+        try {\n+            int i = cursor;\n+            T value = container.get(i);\n+            cursor = i + 1;\n+\n+            return value;\n+        } catch (IndexOutOfBoundsException ex) {\n+            throw logger.logExceptionAsError(new NoSuchElementException());\n+        }\n+    }\n+}"
  },
  {
    "sha": "71ecc25eb6a62e54a553c10a8f637a269c197b27",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoBoundingBox.java",
    "status": "modified",
    "additions": 58,
    "deletions": 7,
    "changes": 65,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoBoundingBox.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoBoundingBox.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoBoundingBox.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,12 +3,18 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.logging.ClientLogger;\n+\n import java.util.Objects;\n \n /**\n  * Represents a geometric bounding box.\n  */\n+@Immutable\n public final class GeoBoundingBox {\n+    private final ClientLogger logger = new ClientLogger(GeoBoundingBox.class);\n+\n     private final double west;\n     private final double south;\n     private final double east;\n@@ -26,7 +32,7 @@\n      * @param north North latitudinal boundary.\n      */\n     public GeoBoundingBox(double west, double south, double east, double north) {\n-        this(west, south, east, north, null, null);\n+        this(west, south, east, north, null, null, null);\n     }\n \n     /**\n@@ -39,8 +45,16 @@ public GeoBoundingBox(double west, double south, double east, double north) {\n      * @param minAltitude Minimum altitude boundary.\n      * @param maxAltitude Maximum altitude boundary.\n      */\n-    public GeoBoundingBox(double west, double south, double east, double north, Double minAltitude,\n-        Double maxAltitude) {\n+    public GeoBoundingBox(double west, double south, double east, double north, double minAltitude,\n+        double maxAltitude) {\n+        this(west, south, east, north, minAltitude, maxAltitude, null);\n+    }\n+\n+    /*\n+     * This constructor allows the one above to require both min altitude and max altitude to be non-null.\n+     */\n+    private GeoBoundingBox(double west, double south, double east, double north, Double minAltitude,\n+        Double maxAltitude, String ignored) {\n         this.west = west;\n         this.south = south;\n         this.east = east;\n@@ -119,11 +133,48 @@ public boolean equals(Object obj) {\n         }\n \n         GeoBoundingBox other = (GeoBoundingBox) obj;\n-        return west == other.west\n-            && south == other.south\n-            && east == other.east\n-            && north == other.north\n+        return Double.compare(west, other.west) == 0\n+            && Double.compare(south, other.south) == 0\n+            && Double.compare(east, other.east) == 0\n+            && Double.compare(north, other.north) == 0\n             && Objects.equals(minAltitude, other.minAltitude)\n             && Objects.equals(maxAltitude, other.maxAltitude);\n     }\n+\n+    /**\n+     * Accesses the coordinates of the {@link GeoBoundingBox} as if it were in a JSON representation.\n+     *\n+     * @param i Index to access.\n+     * @return The double value of the index.\n+     * @throws IndexOutOfBoundsException If the {@link GeoBoundingBox} doesn't have altitude coordinates and {@code i}\n+     * is greater than {@code 3} or {@link GeoBoundingBox} has altitude coordinates and {@code i} is greater than\n+     */\n+    public double get(int i) {\n+        if (minAltitude != null && maxAltitude != null) {\n+            switch (i) {\n+                case 0: return west;\n+                case 1: return south;\n+                case 2: return minAltitude;\n+                case 3: return east;\n+                case 4: return north;\n+                case 5: return maxAltitude;\n+                default: throw logger.logExceptionAsWarning(new IndexOutOfBoundsException());\n+            }\n+        } else {\n+            switch (i) {\n+                case 0: return west;\n+                case 1: return south;\n+                case 2: return east;\n+                case 3: return north;\n+                default: throw logger.logExceptionAsWarning(new IndexOutOfBoundsException());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return (minAltitude != null && maxAltitude != null)\n+            ? String.format(\"[%s, %s, %s, %s, %s, %s]\", west, south, minAltitude, east, north, maxAltitude)\n+            : String.format(\"[%s, %s, %s, %s]\", west, south, east, north);\n+    }\n }"
  },
  {
    "sha": "4a09951bd0c347088e3bc8868663827a74799f04",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoCollection.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoCollection.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoCollection.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoCollection.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,6 +3,8 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -12,6 +14,7 @@\n /**\n  * Represents a heterogeneous collection of {@link GeoObject GeoObjects}.\n  */\n+@Immutable\n public final class GeoCollection extends GeoObject {\n     private final List<GeoObject> geometries;\n \n@@ -71,7 +74,6 @@ public boolean equals(Object obj) {\n         }\n \n         GeoCollection other = (GeoCollection) obj;\n-\n         return super.equals(other) && Objects.equals(geometries, other.geometries);\n     }\n }"
  },
  {
    "sha": "766b0977eb35353b47ef83f5ba81a4bb0768be72",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonDeserializer.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonDeserializer.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonDeserializer.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonDeserializer.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -52,10 +52,10 @@\n         MODULE = new SimpleModule()\n             .addDeserializer(GeoObject.class, new GeoJsonDeserializer())\n             .addDeserializer(GeoPoint.class, geoSubclassDeserializer(GeoPoint.class))\n-            .addDeserializer(GeoLine.class, geoSubclassDeserializer(GeoLine.class))\n+            .addDeserializer(GeoLineString.class, geoSubclassDeserializer(GeoLineString.class))\n             .addDeserializer(GeoPolygon.class, geoSubclassDeserializer(GeoPolygon.class))\n             .addDeserializer(GeoPointCollection.class, geoSubclassDeserializer(GeoPointCollection.class))\n-            .addDeserializer(GeoLineCollection.class, geoSubclassDeserializer(GeoLineCollection.class))\n+            .addDeserializer(GeoLineStringCollection.class, geoSubclassDeserializer(GeoLineStringCollection.class))\n             .addDeserializer(GeoPolygonCollection.class, geoSubclassDeserializer(GeoPolygonCollection.class))\n             .addDeserializer(GeoCollection.class, geoSubclassDeserializer(GeoCollection.class));\n     }\n@@ -87,7 +87,7 @@ private static GeoObject read(JsonNode node) {\n             case POINT_TYPE:\n                 return new GeoPoint(readCoordinate(coordinates), boundingBox, properties);\n             case LINE_STRING_TYPE:\n-                return new GeoLine(readCoordinates(coordinates), boundingBox, properties);\n+                return new GeoLineString(readCoordinates(coordinates), boundingBox, properties);\n             case POLYGON_TYPE:\n                 List<GeoLinearRing> rings = new ArrayList<>();\n                 coordinates.forEach(ring -> rings.add(new GeoLinearRing(readCoordinates(ring))));\n@@ -99,10 +99,10 @@ private static GeoObject read(JsonNode node) {\n \n                 return new GeoPointCollection(points, boundingBox, properties);\n             case MULTI_LINE_STRING_TYPE:\n-                List<GeoLine> lines = new ArrayList<>();\n-                coordinates.forEach(line -> lines.add(new GeoLine(readCoordinates(line))));\n+                List<GeoLineString> lines = new ArrayList<>();\n+                coordinates.forEach(line -> lines.add(new GeoLineString(readCoordinates(line))));\n \n-                return new GeoLineCollection(lines, boundingBox, properties);\n+                return new GeoLineStringCollection(lines, boundingBox, properties);\n             case MULTI_POLYGON_TYPE:\n                 return readMultiPolygon(coordinates, boundingBox, properties);\n             default:"
  },
  {
    "sha": "f938b6f50c20a27430abc8cb804cf5cdbfc75e69",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonSerializer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonSerializer.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonSerializer.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoJsonSerializer.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -39,10 +39,10 @@ private static void write(GeoObject value, JsonGenerator gen) throws IOException\n             writeType(GeoJsonDeserializer.POINT_TYPE, gen);\n             gen.writeFieldName(GeoJsonDeserializer.COORDINATES_PROPERTY);\n             writePosition(((GeoPoint) value).getCoordinates(), gen);\n-        } else if (value instanceof GeoLine) {\n+        } else if (value instanceof GeoLineString) {\n             writeType(GeoJsonDeserializer.LINE_STRING_TYPE, gen);\n             gen.writeFieldName(GeoJsonDeserializer.COORDINATES_PROPERTY);\n-            writePositions(((GeoLine) value).getCoordinates(), gen);\n+            writePositions(((GeoLineString) value).getCoordinates(), gen);\n         } else if (value instanceof GeoPolygon) {\n             writeType(GeoJsonDeserializer.POLYGON_TYPE, gen);\n             gen.writeArrayFieldStart(GeoJsonDeserializer.COORDINATES_PROPERTY);\n@@ -57,10 +57,10 @@ private static void write(GeoObject value, JsonGenerator gen) throws IOException\n                 writePosition(point.getCoordinates(), gen);\n             }\n             gen.writeEndArray();\n-        } else if (value instanceof GeoLineCollection) {\n+        } else if (value instanceof GeoLineStringCollection) {\n             writeType(GeoJsonDeserializer.MULTI_LINE_STRING_TYPE, gen);\n             gen.writeArrayFieldStart(GeoJsonDeserializer.COORDINATES_PROPERTY);\n-            for (GeoLine line : ((GeoLineCollection) value).getLines()) {\n+            for (GeoLineString line : ((GeoLineStringCollection) value).getLines()) {\n                 writePositions(line.getCoordinates(), gen);\n             }\n             gen.writeEndArray();"
  },
  {
    "sha": "8f8e68cfdf7fba4b0d966650f67ab10b089a7fe2",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineString.java",
    "status": "renamed",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineString.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineString.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineString.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,6 +3,8 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -11,7 +13,8 @@\n /**\n  * Represents a geometric line.\n  */\n-public final class GeoLine extends GeoObject {\n+@Immutable\n+public final class GeoLineString extends GeoObject {\n     private final GeoArray<GeoPosition> coordinates;\n \n     /**\n@@ -20,7 +23,7 @@\n      * @param positions Geometric positions that define the line.\n      * @throws NullPointerException If {@code positions} is {@code null}.\n      */\n-    public GeoLine(List<GeoPosition> positions) {\n+    public GeoLineString(List<GeoPosition> positions) {\n         this(positions, null, null);\n     }\n \n@@ -32,7 +35,7 @@ public GeoLine(List<GeoPosition> positions) {\n      * @param customProperties Additional properties of the geometric line.\n      * @throws NullPointerException If {@code positions} is {@code null}.\n      */\n-    public GeoLine(List<GeoPosition> positions, GeoBoundingBox boundingBox, Map<String, Object> customProperties) {\n+    public GeoLineString(List<GeoPosition> positions, GeoBoundingBox boundingBox, Map<String, Object> customProperties) {\n         super(boundingBox, customProperties);\n \n         Objects.requireNonNull(positions, \"'positions' cannot be null.\");\n@@ -44,7 +47,7 @@ public GeoLine(List<GeoPosition> positions, GeoBoundingBox boundingBox, Map<Stri\n      *\n      * @return An unmodifiable representation of the {@link GeoPosition geometric positions} representing this line.\n      */\n-    public GeoArray<GeoPosition> getCoordinates() {\n+    GeoArray<GeoPosition> getCoordinates() {\n         return coordinates;\n     }\n \n@@ -60,15 +63,15 @@ public int hashCode() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (!(obj instanceof GeoLine)) {\n+        if (!(obj instanceof GeoLineString)) {\n             return false;\n         }\n \n         if (this == obj) {\n             return true;\n         }\n \n-        GeoLine other = (GeoLine) obj;\n+        GeoLineString other = (GeoLineString) obj;\n         return super.equals(other) && Objects.equals(coordinates, other.coordinates);\n     }\n }",
    "previous_filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLine.java"
  },
  {
    "sha": "0728ab02251b41bd8a578f52480bd1fbc91c800a",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineStringCollection.java",
    "status": "renamed",
    "additions": 17,
    "deletions": 13,
    "changes": 30,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineStringCollection.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineStringCollection.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineStringCollection.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,37 +3,41 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n /**\n- * Represents a collection of {@link GeoLine GeoLines}.\n+ * Represents a collection of {@link GeoLineString GeoLines}.\n  */\n-public final class GeoLineCollection extends GeoObject {\n-    private final List<GeoLine> lines;\n+@Immutable\n+public final class GeoLineStringCollection extends GeoObject {\n+    private final List<GeoLineString> lines;\n \n     /**\n-     * Constructs a {@link GeoLineCollection}.\n+     * Constructs a {@link GeoLineStringCollection}.\n      *\n      * @param lines The geometric lines that define the multi-line.\n      * @throws NullPointerException If {@code lines} is {@code null}.\n      */\n-    public GeoLineCollection(List<GeoLine> lines) {\n+    public GeoLineStringCollection(List<GeoLineString> lines) {\n         this(lines, null, null);\n     }\n \n     /**\n-     * Constructs a {@link GeoLineCollection}.\n+     * Constructs a {@link GeoLineStringCollection}.\n      *\n      * @param lines The geometric lines that define the multi-line.\n      * @param boundingBox Bounding box for the multi-line.\n      * @param customProperties Additional properties of the multi-line.\n      * @throws NullPointerException If {@code lines} is {@code null}.\n      */\n-    public GeoLineCollection(List<GeoLine> lines, GeoBoundingBox boundingBox, Map<String, Object> customProperties) {\n+    public GeoLineStringCollection(List<GeoLineString> lines, GeoBoundingBox boundingBox,\n+        Map<String, Object> customProperties) {\n         super(boundingBox, customProperties);\n \n         Objects.requireNonNull(lines, \"'lines' cannot be null.\");\n@@ -42,11 +46,11 @@ public GeoLineCollection(List<GeoLine> lines, GeoBoundingBox boundingBox, Map<St\n     }\n \n     /**\n-     * Unmodifiable representation of the {@link GeoLine geometric lines} representing this multi-line.\n+     * Unmodifiable representation of the {@link GeoLineString geometric lines} representing this multi-line.\n      *\n-     * @return An unmodifiable representation of the {@link GeoLine geometric lines} representing this multi-line.\n+     * @return An unmodifiable representation of the {@link GeoLineString geometric lines} representing this multi-line.\n      */\n-    public List<GeoLine> getLines() {\n+    public List<GeoLineString> getLines() {\n         return lines;\n     }\n \n@@ -56,7 +60,7 @@ public GeoLineCollection(List<GeoLine> lines, GeoBoundingBox boundingBox, Map<St\n      * @return An unmodifiable representation of the {@link GeoPosition geometric positions} representing this\n      * multi-line.\n      */\n-    public GeoArray<GeoArray<GeoPosition>> getCoordinates() {\n+    GeoArray<GeoArray<GeoPosition>> getCoordinates() {\n         return new GeoArray<>(this);\n     }\n \n@@ -72,15 +76,15 @@ public int hashCode() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (!(obj instanceof GeoLineCollection)) {\n+        if (!(obj instanceof GeoLineStringCollection)) {\n             return false;\n         }\n \n         if (this == obj) {\n             return true;\n         }\n \n-        GeoLineCollection other = (GeoLineCollection) obj;\n+        GeoLineStringCollection other = (GeoLineStringCollection) obj;\n \n         return super.equals(obj) && Objects.equals(lines, other.lines);\n     }",
    "previous_filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLineCollection.java"
  },
  {
    "sha": "68de5b3439fa93df06a2b972532d606f7286da69",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLinearRing.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLinearRing.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLinearRing.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoLinearRing.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,6 +3,7 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n import com.azure.core.util.logging.ClientLogger;\n \n import java.util.ArrayList;\n@@ -12,6 +13,7 @@\n /**\n  * Represents a linear ring that is part of a {@link GeoPolygon}.\n  */\n+@Immutable\n public final class GeoLinearRing {\n     private final GeoArray<GeoPosition> coordinates;\n \n@@ -47,7 +49,7 @@ public GeoLinearRing(List<GeoPosition> coordinates) {\n      * @return An unmodifiable representation of the {@link GeoPosition geometric positions} representing this linear\n      * ring.\n      */\n-    public GeoArray<GeoPosition> getCoordinates() {\n+    GeoArray<GeoPosition> getCoordinates() {\n         return coordinates;\n     }\n "
  },
  {
    "sha": "8f9ddbe27c81bce4a55f3ece148fd03cd1df9dc0",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoObject.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoObject.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoObject.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoObject.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,6 +3,7 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n import com.fasterxml.jackson.annotation.JsonSubTypes;\n \n import java.util.Collections;\n@@ -15,13 +16,14 @@\n  */\n @JsonSubTypes({\n     @JsonSubTypes.Type(GeoPoint.class),\n-    @JsonSubTypes.Type(GeoLine.class),\n+    @JsonSubTypes.Type(GeoLineString.class),\n     @JsonSubTypes.Type(GeoPolygon.class),\n     @JsonSubTypes.Type(GeoPointCollection.class),\n-    @JsonSubTypes.Type(GeoLineCollection.class),\n+    @JsonSubTypes.Type(GeoLineStringCollection.class),\n     @JsonSubTypes.Type(GeoPolygonCollection.class),\n     @JsonSubTypes.Type(GeoCollection.class)\n })\n+@Immutable\n public abstract class GeoObject {\n     private final GeoBoundingBox boundingBox;\n     private final Map<String, Object> customProperties;"
  },
  {
    "sha": "c0fb14af1248658be4a77bb99ffcacec47543e65",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPoint.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPoint.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPoint.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPoint.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,12 +3,15 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+\n import java.util.Map;\n import java.util.Objects;\n \n /**\n  * Represents a geometric point.\n  */\n+@Immutable\n public final class GeoPoint extends GeoObject {\n     private final GeoPosition coordinates;\n \n@@ -62,7 +65,7 @@ public GeoPoint(GeoPosition position, GeoBoundingBox boundingBox, Map<String, Ob\n      *\n      * @return The {@link GeoPosition geometric position} of the point.\n      */\n-    public GeoPosition getCoordinates() {\n+    GeoPosition getCoordinates() {\n         return coordinates;\n     }\n "
  },
  {
    "sha": "d2b68ecbdacfa0f0827da4bdfff9ba440b403f41",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPointCollection.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPointCollection.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPointCollection.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPointCollection.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,6 +3,8 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -12,6 +14,7 @@\n /**\n  * Represents a collection of {@link GeoPoint GeoPoints}.\n  */\n+@Immutable\n public final class GeoPointCollection extends GeoObject {\n     private final List<GeoPoint> points;\n \n@@ -55,7 +58,7 @@ public GeoPointCollection(List<GeoPoint> points, GeoBoundingBox boundingBox, Map\n      * @return An unmodifiable representation of the {@link GeoPosition geometric positions} representing this\n      * multi-point.\n      */\n-    public GeoArray<GeoPosition> getCoordinates() {\n+    GeoArray<GeoPosition> getCoordinates() {\n         return new GeoArray<>(this);\n     }\n "
  },
  {
    "sha": "8affec69248371d45bc826cf56205bef56b384c7",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygon.java",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygon.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygon.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygon.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,6 +3,8 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -12,6 +14,7 @@\n /**\n  * Represents a geometric polygon.\n  */\n+@Immutable\n public final class GeoPolygon extends GeoObject {\n     private final List<GeoLinearRing> rings;\n \n@@ -72,12 +75,21 @@ public GeoPolygon(List<GeoLinearRing> rings, GeoBoundingBox boundingBox, Map<Str\n         return rings;\n     }\n \n+    /**\n+     * Gets the outer ring of the polygon.\n+     *\n+     * @return Outer ring of the polygon.\n+     */\n+    public GeoLinearRing getOuterRing() {\n+        return rings.get(0);\n+    }\n+\n     /**\n      * Unmodifiable representation of the {@link GeoPosition geometric positions} representing this polygon.\n      *\n      * @return Unmodifiable representation of the {@link GeoPosition geometric positions} representing this polygon.\n      */\n-    public GeoArray<GeoArray<GeoPosition>> getCoordinates() {\n+    GeoArray<GeoArray<GeoPosition>> getCoordinates() {\n         return new GeoArray<>(this);\n     }\n "
  },
  {
    "sha": "118ed7b2c4345d479bf2094bee8e89369a096c93",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygonCollection.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygonCollection.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygonCollection.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPolygonCollection.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,6 +3,8 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n+\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -12,6 +14,7 @@\n /**\n  * Represents a collection of {@link GeoPolygon GeoPolygons}.\n  */\n+@Immutable\n public final class GeoPolygonCollection extends GeoObject {\n     private final List<GeoPolygon> polygons;\n \n@@ -57,7 +60,7 @@ public GeoPolygonCollection(List<GeoPolygon> polygons, GeoBoundingBox boundingBo\n      * @return An unmodifiable representation of the {@link GeoPosition geometric positions} representing this\n      * multi-polygon.\n      */\n-    public GeoArray<GeoArray<GeoArray<GeoPosition>>> getCoordinates() {\n+    GeoArray<GeoArray<GeoArray<GeoPosition>>> getCoordinates() {\n         return new GeoArray<>(this);\n     }\n "
  },
  {
    "sha": "e994227ea0d1e26d27cdd04524d4916ef21361d7",
    "filename": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPosition.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPosition.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPosition.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/geojson/GeoPosition.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -3,13 +3,15 @@\n \n package com.azure.core.experimental.geojson;\n \n+import com.azure.core.annotation.Immutable;\n import com.azure.core.util.logging.ClientLogger;\n \n import java.util.Objects;\n \n /**\n  * Represents a geo position.\n  */\n+@Immutable\n public final class GeoPosition {\n     private final ClientLogger logger = new ClientLogger(GeoPosition.class);\n \n@@ -147,4 +149,11 @@ public boolean equals(Object obj) {\n             && Double.compare(latitude, other.latitude) == 0\n             && Objects.equals(altitude, other.altitude);\n     }\n+\n+    @Override\n+    public String toString() {\n+        return (altitude != null)\n+            ? String.format(\"[%s, %s, %s]\", longitude, latitude, altitude)\n+            : String.format(\"[%s, %s]\", longitude, latitude);\n+    }\n }"
  },
  {
    "sha": "8e3da29174232e7fbc01a8fd0cec9863beedcec1",
    "filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoArrayTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoArrayTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoArrayTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoArrayTests.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -51,7 +51,7 @@ public void pointCollectionCoordinates() {\n \n     @Test\n     public void lineCoordinates() {\n-        GeoLine line = new GeoLine(Arrays.asList(\n+        GeoLineString line = new GeoLineString(Arrays.asList(\n             new GeoPosition(1, 2), new GeoPosition(3, 4), new GeoPosition(5, 6)\n         ));\n \n@@ -69,9 +69,9 @@ public void lineCoordinates() {\n \n     @Test\n     public void lineCollectionCoordinates() {\n-        GeoLineCollection lineCollection = new GeoLineCollection(Arrays.asList(\n-            new GeoLine(Arrays.asList(new GeoPosition(1, 2), new GeoPosition(3, 4))),\n-            new GeoLine(Arrays.asList(new GeoPosition(5, 6), new GeoPosition(7, 8)))\n+        GeoLineStringCollection lineCollection = new GeoLineStringCollection(Arrays.asList(\n+            new GeoLineString(Arrays.asList(new GeoPosition(1, 2), new GeoPosition(3, 4))),\n+            new GeoLineString(Arrays.asList(new GeoPosition(5, 6), new GeoPosition(7, 8)))\n         ));\n \n         assertEquals(2, lineCollection.getCoordinates().size());"
  },
  {
    "sha": "01a9a0c8f8e6b809f61e3307b6f2a708c989ca35",
    "filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonDeserializerTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonDeserializerTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonDeserializerTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonDeserializerTests.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -93,8 +93,8 @@ public void collectionWithoutGeometriesThrows() {\n \n         List<GeoPosition> positions = Arrays.asList(new GeoPosition(0, 0, 1D),\n             new GeoPosition(1, 1, 1D));\n-        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLine> lineSupplier =\n-            (box, properties) -> new GeoLine(positions, box, properties);\n+        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLineString> lineSupplier =\n+            (box, properties) -> new GeoLineString(positions, box, properties);\n \n         List<GeoLinearRing> rings = Collections.singletonList(new GeoLinearRing(Arrays.asList(\n             new GeoPosition(0, 0, 1D), new GeoPosition(0, 1, 1D),\n@@ -107,8 +107,8 @@ public void collectionWithoutGeometriesThrows() {\n             (box, properties) -> new GeoPointCollection(Arrays.asList(pointSupplier.apply(null, null),\n                 pointSupplier.apply(null, null)), box, properties);\n \n-        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLineCollection> multiLineSupplier =\n-            (box, properties) -> new GeoLineCollection(Arrays.asList(lineSupplier.apply(null, null),\n+        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLineStringCollection> multiLineSupplier =\n+            (box, properties) -> new GeoLineStringCollection(Arrays.asList(lineSupplier.apply(null, null),\n                 lineSupplier.apply(null, null)), box, properties);\n \n         BiFunction<GeoBoundingBox, Map<String, Object>, GeoPolygonCollection> multiPolygonSuppluer ="
  },
  {
    "sha": "09640d808bb2dfc817c8030aff08f56316ccc0c6",
    "filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonSerializerTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonSerializerTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonSerializerTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoJsonSerializerTests.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -67,8 +67,8 @@ public GeoObjectType getType() {\n \n         List<GeoPosition> positions = Arrays.asList(new GeoPosition(0, 0, 1D),\n             new GeoPosition(1, 1, 1D));\n-        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLine> lineSupplier =\n-            (box, properties) -> new GeoLine(positions, box, properties);\n+        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLineString> lineSupplier =\n+            (box, properties) -> new GeoLineString(positions, box, properties);\n \n         List<GeoLinearRing> rings = Collections.singletonList(new GeoLinearRing(Arrays.asList(\n             new GeoPosition(0, 0, 1D), new GeoPosition(0, 1, 1D),\n@@ -81,8 +81,8 @@ public GeoObjectType getType() {\n             (box, properties) -> new GeoPointCollection(Arrays.asList(pointSupplier.apply(null, null),\n                 pointSupplier.apply(box, properties)), box, properties);\n \n-        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLineCollection> multiLineSupplier =\n-            (box, properties) -> new GeoLineCollection(Arrays.asList(lineSupplier.apply(null, null),\n+        BiFunction<GeoBoundingBox, Map<String, Object>, GeoLineStringCollection> multiLineSupplier =\n+            (box, properties) -> new GeoLineStringCollection(Arrays.asList(lineSupplier.apply(null, null),\n                 lineSupplier.apply(box, properties)), box, properties);\n \n         BiFunction<GeoBoundingBox, Map<String, Object>, GeoPolygonCollection> multiPolygonSuppluer ="
  },
  {
    "sha": "620ac8c486c84b4a0ac11bb900dc88cc219428de",
    "filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringCollectionTests.java",
    "status": "renamed",
    "additions": 16,
    "deletions": 16,
    "changes": 32,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringCollectionTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringCollectionTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringCollectionTests.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -23,19 +23,19 @@\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n /**\n- * Tests {@link GeoLineCollection}.\n+ * Tests {@link GeoLineStringCollection}.\n  */\n-public class GeoLineCollectionTests {\n+public class GeoLineStringCollectionTests {\n     @Test\n     public void nullLinesThrows() {\n-        Assertions.assertThrows(NullPointerException.class, () -> new GeoLineCollection(null));\n+        Assertions.assertThrows(NullPointerException.class, () -> new GeoLineStringCollection(null));\n     }\n \n     @Test\n     public void simpleConstructor() {\n-        List<GeoLine> expectedLines = Arrays.asList(SQUARE_LINE.get(), TRIANGLE_LINE.get());\n+        List<GeoLineString> expectedLines = Arrays.asList(SQUARE_LINE.get(), TRIANGLE_LINE.get());\n \n-        GeoLineCollection multiLine = new GeoLineCollection(expectedLines);\n+        GeoLineStringCollection multiLine = new GeoLineStringCollection(expectedLines);\n \n         assertEquals(expectedLines, multiLine.getLines());\n \n@@ -45,12 +45,12 @@ public void simpleConstructor() {\n \n     @Test\n     public void complexConstructor() {\n-        List<GeoLine> expectedLines = Arrays.asList(SQUARE_LINE.get(), TRIANGLE_LINE.get());\n+        List<GeoLineString> expectedLines = Arrays.asList(SQUARE_LINE.get(), TRIANGLE_LINE.get());\n \n         GeoBoundingBox boundingBox = new GeoBoundingBox(0, 0, 1, 1);\n         Map<String, Object> properties = Collections.singletonMap(\"key\", \"value\");\n \n-        GeoLineCollection multiLine = new GeoLineCollection(expectedLines, boundingBox, properties);\n+        GeoLineStringCollection multiLine = new GeoLineStringCollection(expectedLines, boundingBox, properties);\n \n         assertEquals(expectedLines, multiLine.getLines());\n         assertEquals(boundingBox, multiLine.getBoundingBox());\n@@ -59,11 +59,11 @@ public void complexConstructor() {\n \n     @Test\n     public void constructorCopiesLines() {\n-        List<GeoLine> expectedLines = new ArrayList<>();\n+        List<GeoLineString> expectedLines = new ArrayList<>();\n         expectedLines.add(SQUARE_LINE.get());\n         expectedLines.add(TRIANGLE_LINE.get());\n \n-        GeoLineCollection multiLine = new GeoLineCollection(expectedLines);\n+        GeoLineStringCollection multiLine = new GeoLineStringCollection(expectedLines);\n         assertEquals(expectedLines, multiLine.getLines());\n \n         expectedLines.add(RECTANGLE_LINE.get());\n@@ -72,19 +72,19 @@ public void constructorCopiesLines() {\n \n     @ParameterizedTest\n     @MethodSource(\"equalsSupplier\")\n-    public void multiLineGeometriesEqual(GeoLineCollection multiLine, Object obj, boolean expected) {\n+    public void multiLineGeometriesEqual(GeoLineStringCollection multiLine, Object obj, boolean expected) {\n         assertEquals(expected, multiLine.equals(obj));\n     }\n \n     private static Stream<Arguments> equalsSupplier() {\n-        List<GeoLine> lines = Arrays.asList(SQUARE_LINE.get(), RECTANGLE_LINE.get());\n-        List<GeoLine> lines1 = Arrays.asList(SQUARE_LINE.get(), TRIANGLE_LINE.get());\n+        List<GeoLineString> lines = Arrays.asList(SQUARE_LINE.get(), RECTANGLE_LINE.get());\n+        List<GeoLineString> lines1 = Arrays.asList(SQUARE_LINE.get(), TRIANGLE_LINE.get());\n \n         GeoBoundingBox boundingBox = new GeoBoundingBox(0, 0, 1, 1);\n         Map<String, Object> properties = Collections.singletonMap(\"key\", \"value\");\n \n-        GeoLineCollection multiLine = new GeoLineCollection(lines);\n-        GeoLineCollection multiLine1 = new GeoLineCollection(lines1, boundingBox, properties);\n+        GeoLineStringCollection multiLine = new GeoLineStringCollection(lines);\n+        GeoLineStringCollection multiLine1 = new GeoLineStringCollection(lines1, boundingBox, properties);\n \n         return Stream.of(\n             // Other is null.\n@@ -102,8 +102,8 @@ public void multiLineGeometriesEqual(GeoLineCollection multiLine, Object obj, bo\n             Arguments.of(multiLine1, multiLine, false),\n \n             // Other is the same value.\n-            Arguments.of(multiLine, new GeoLineCollection(lines), true),\n-            Arguments.of(multiLine1, new GeoLineCollection(lines1, boundingBox, properties), true)\n+            Arguments.of(multiLine, new GeoLineStringCollection(lines), true),\n+            Arguments.of(multiLine1, new GeoLineStringCollection(lines1, boundingBox, properties), true)\n         );\n     }\n }",
    "previous_filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineCollectionTests.java"
  },
  {
    "sha": "374c83f32b407bbd97bcd9c9a5ab2f0919f9fd68",
    "filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringTests.java",
    "status": "renamed",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringTests.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringTests.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineStringTests.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -20,20 +20,20 @@\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n /**\n- * Tests {@link GeoLine}.\n+ * Tests {@link GeoLineString}.\n  */\n-public class GeoLineTests {\n+public class GeoLineStringTests {\n     @Test\n     public void nullPositionsThrows() {\n-        Assertions.assertThrows(NullPointerException.class, () -> new GeoLine(null));\n+        Assertions.assertThrows(NullPointerException.class, () -> new GeoLineString(null));\n     }\n \n     @Test\n     public void simpleConstructor() {\n         GeoArray<GeoPosition> expectedPositions = new GeoArray<>(Arrays.asList(new GeoPosition(0, 0),\n             new GeoPosition(0, 1)));\n \n-        GeoLine line = new GeoLine(expectedPositions);\n+        GeoLineString line = new GeoLineString(expectedPositions);\n \n         assertEquals(expectedPositions, line.getCoordinates());\n \n@@ -48,7 +48,7 @@ public void complexConstructor() {\n         GeoBoundingBox expectedBoundingBox = new GeoBoundingBox(0, 0, 1, 1);\n         Map<String, Object> expectedProperties = Collections.singletonMap(\"key\", \"value\");\n \n-        GeoLine line = new GeoLine(expectedPositions, expectedBoundingBox, expectedProperties);\n+        GeoLineString line = new GeoLineString(expectedPositions, expectedBoundingBox, expectedProperties);\n \n         assertEquals(expectedPositions, line.getCoordinates());\n         assertEquals(expectedBoundingBox, line.getBoundingBox());\n@@ -61,7 +61,7 @@ public void constructorCopiesPositions() {\n         expectedPositions.add(new GeoPosition(0, 0));\n         expectedPositions.add(new GeoPosition(0, 1));\n \n-        GeoLine line = new GeoLine(expectedPositions);\n+        GeoLineString line = new GeoLineString(expectedPositions);\n         assertEquals(new GeoArray<>(expectedPositions), line.getCoordinates());\n \n         expectedPositions.add(new GeoPosition(1, 1));\n@@ -70,7 +70,7 @@ public void constructorCopiesPositions() {\n \n     @ParameterizedTest\n     @MethodSource(\"equalsSupplier\")\n-    public void lineGeometriesEqual(GeoLine line, Object obj, boolean expected) {\n+    public void lineGeometriesEqual(GeoLineString line, Object obj, boolean expected) {\n         assertEquals(expected, line.equals(obj));\n     }\n \n@@ -81,8 +81,8 @@ public void lineGeometriesEqual(GeoLine line, Object obj, boolean expected) {\n         GeoBoundingBox boundingBox = new GeoBoundingBox(0, 0, 1, 1);\n         Map<String, Object> properties = Collections.singletonMap(\"key\", \"value\");\n \n-        GeoLine line = new GeoLine(positions);\n-        GeoLine line1 = new GeoLine(positions1, boundingBox, properties);\n+        GeoLineString line = new GeoLineString(positions);\n+        GeoLineString line1 = new GeoLineString(positions1, boundingBox, properties);\n \n         return Stream.of(\n             // Other is null.\n@@ -100,8 +100,8 @@ public void lineGeometriesEqual(GeoLine line, Object obj, boolean expected) {\n             Arguments.of(line1, line, false),\n \n             // Other is the same value.\n-            Arguments.of(line, new GeoLine(positions), true),\n-            Arguments.of(line1, new GeoLine(positions1, boundingBox, properties), true)\n+            Arguments.of(line, new GeoLineString(positions), true),\n+            Arguments.of(line1, new GeoLineString(positions1, boundingBox, properties), true)\n         );\n     }\n }",
    "previous_filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoLineTests.java"
  },
  {
    "sha": "c7a7cd6d1cf196fc7413f498c7ca932bbb4fb830",
    "filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoSerializationTestHelpers.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoSerializationTestHelpers.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoSerializationTestHelpers.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoSerializationTestHelpers.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -20,14 +20,14 @@\n     static String geoToJson(GeoObject geoObject) {\n         if (geoObject instanceof GeoPoint) {\n             return pointToJson((GeoPoint) geoObject);\n-        } else if (geoObject instanceof GeoLine) {\n-            return lineToJson((GeoLine) geoObject);\n+        } else if (geoObject instanceof GeoLineString) {\n+            return lineToJson((GeoLineString) geoObject);\n         } else if (geoObject instanceof GeoPolygon) {\n             return polygonToJson((GeoPolygon) geoObject);\n         } else if (geoObject instanceof GeoPointCollection) {\n             return multiPointToJson((GeoPointCollection) geoObject);\n-        } else if (geoObject instanceof GeoLineCollection) {\n-            return multiLineToJson((GeoLineCollection) geoObject);\n+        } else if (geoObject instanceof GeoLineStringCollection) {\n+            return multiLineToJson((GeoLineStringCollection) geoObject);\n         } else if (geoObject instanceof GeoPolygonCollection) {\n             return multiPolygonToJson((GeoPolygonCollection) geoObject);\n         } else if (geoObject instanceof GeoCollection) {\n@@ -51,7 +51,7 @@ private static String pointToJson(GeoPoint point) {\n         return builder.toString();\n     }\n \n-    private static String lineToJson(GeoLine line) {\n+    private static String lineToJson(GeoLineString line) {\n         StringBuilder builder = new StringBuilder(\"{\");\n         addType(GeoJsonDeserializer.LINE_STRING_TYPE, builder);\n \n@@ -94,7 +94,7 @@ private static String multiPointToJson(GeoPointCollection multiPoint) {\n \n     }\n \n-    private static String multiLineToJson(GeoLineCollection multiLine) {\n+    private static String multiLineToJson(GeoLineStringCollection multiLine) {\n         StringBuilder builder = new StringBuilder(\"{\");\n         addType(GeoJsonDeserializer.MULTI_LINE_STRING_TYPE, builder);\n "
  },
  {
    "sha": "24501f11f12336d37ba2f0b8014856d8a83bc6d8",
    "filename": "sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoTestHelpers.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/Azure/azure-sdk-for-java/blob/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoTestHelpers.java",
    "raw_url": "https://github.com/Azure/azure-sdk-for-java/raw/973956aacc290d91bbfb0e72b4b0bede93db0560/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoTestHelpers.java",
    "contents_url": "https://api.github.com/repos/Azure/azure-sdk-for-java/contents/sdk/core/azure-core-experimental/src/test/java/com/azure/core/experimental/geojson/GeoTestHelpers.java?ref=973956aacc290d91bbfb0e72b4b0bede93db0560",
    "patch": "@@ -28,7 +28,7 @@\n         new GeoPosition(0, 1), new GeoPosition(0, 0)\n     );\n \n-    public static final Supplier<GeoLine> TRIANGLE_LINE = () -> new GeoLine(TRIANGLE_LINE_POSITIONS);\n+    public static final Supplier<GeoLineString> TRIANGLE_LINE = () -> new GeoLineString(TRIANGLE_LINE_POSITIONS);\n \n     public static final Supplier<GeoPolygon> TRIANGLE_POLYGON = () ->\n         new GeoPolygon(new GeoLinearRing(TRIANGLE_LINE_POSITIONS));\n@@ -38,7 +38,7 @@\n         new GeoPosition(1, 0), new GeoPosition(0, 0)\n     );\n \n-    public static final Supplier<GeoLine> SQUARE_LINE = () -> new GeoLine(SQUARE_LINE_POSITIONS);\n+    public static final Supplier<GeoLineString> SQUARE_LINE = () -> new GeoLineString(SQUARE_LINE_POSITIONS);\n \n     public static final Supplier<GeoPolygon> SQUARE_POLYGON = () ->\n         new GeoPolygon(new GeoLinearRing(SQUARE_LINE_POSITIONS));\n@@ -48,7 +48,7 @@\n         new GeoPosition(1, 0), new GeoPosition(0, 0)\n     );\n \n-    public static final Supplier<GeoLine> RECTANGLE_LINE = () -> new GeoLine(RECTANGLE_LINE_POSITIONS);\n+    public static final Supplier<GeoLineString> RECTANGLE_LINE = () -> new GeoLineString(RECTANGLE_LINE_POSITIONS);\n \n     public static final Supplier<GeoPolygon> RECTANGLE_POLYGON = () ->\n         new GeoPolygon(new GeoLinearRing(RECTANGLE_LINE_POSITIONS));"
  }
]
