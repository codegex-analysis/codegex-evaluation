[
  {
    "sha": "bdfaf9db96e31ef502a6d9fcab5e29bc3c6381fe",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/Androidgen.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/Androidgen.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/Androidgen.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/Androidgen.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -1,10 +1,13 @@\n package com.azure.autorest.android;\n \n+import com.azure.autorest.android.mapper.AndroidMapperFactory;\n+import com.azure.autorest.android.template.AndroidTemplateFactory;\n import com.azure.autorest.extension.base.jsonrpc.Connection;\n import com.azure.autorest.extension.base.model.codemodel.CodeModel;\n import com.azure.autorest.extension.base.plugin.JavaSettings;\n import com.azure.autorest.extension.base.plugin.NewPlugin;\n import com.azure.autorest.extension.base.plugin.PluginLogger;\n+import com.azure.autorest.mapper.MapperFactory;\n import com.azure.autorest.mapper.Mappers;\n import com.azure.autorest.model.clientmodel.AsyncSyncClient;\n import com.azure.autorest.model.clientmodel.Client;\n@@ -17,6 +20,7 @@\n import com.azure.autorest.model.clientmodel.XmlSequenceWrapper;\n import com.azure.autorest.model.javamodel.JavaFile;\n import com.azure.autorest.model.javamodel.JavaPackage;\n+import com.azure.autorest.template.Templates;\n import com.azure.autorest.util.ClientModelUtil;\n import com.google.googlejavaformat.java.Formatter;\n import org.slf4j.Logger;\n@@ -72,9 +76,11 @@ protected NodeTuple representJavaBeanProperty(Object javaBean, Property property\n             CodeModel codeModel = newYaml.loadAs(file, CodeModel.class);\n \n             // Step 2: Map\n+            Mappers.setFactory(new AndroidMapperFactory());\n             Client client = Mappers.getClientMapper().map(codeModel);\n \n             // Step 3: Write to templates\n+            Templates.setFactory(new AndroidTemplateFactory());\n             JavaPackage javaPackage = new JavaPackage(this);\n             // Service client\n             javaPackage"
  },
  {
    "sha": "01819b03b90fceec64e6e6b946a68f75fc72cf68",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidClientMethodMapper.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidClientMethodMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidClientMethodMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidClientMethodMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,113 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.android.model.clientmodel.AndroidClientMethod;\n+import com.azure.autorest.extension.base.model.codemodel.Operation;\n+import com.azure.autorest.mapper.ClientMethodMapper;\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.ClientMethod;\n+import com.azure.autorest.model.clientmodel.ClientMethodParameter;\n+import com.azure.autorest.model.clientmodel.GenericType;\n+import com.azure.autorest.model.clientmodel.IType;\n+import com.azure.autorest.model.clientmodel.ProxyMethod;\n+import com.azure.autorest.model.clientmodel.ReturnValue;\n+\n+public class AndroidClientMethodMapper extends ClientMethodMapper {\n+    private static ClientMethodMapper instance = new AndroidClientMethodMapper();\n+\n+    private static final ClientMethodParameter ANDROID_CONTEXT_PARAM = new ClientMethodParameter.Builder()\n+            .description(\"The context to associate with this operation.\")\n+            .wireType(ClassType.AndroidContext)\n+            .name(\"context\")\n+            .annotations(new java.util.ArrayList<>())\n+            .isConstant(false)\n+            .defaultValue(null)\n+            .fromClient(false)\n+            .isFinal(false)\n+            .isRequired(false)\n+            .build();\n+\n+    protected AndroidClientMethodMapper() {\n+    }\n+\n+    public static ClientMethodMapper getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected ClientMethod.Builder getClientMethodBuilder() {\n+        return new AndroidClientMethod.Builder();\n+    }\n+\n+    @Override\n+    protected ClientMethodParameter getContextParameter() {\n+        return ANDROID_CONTEXT_PARAM;\n+    }\n+\n+    @Override\n+    protected IType getContextType() {\n+        return ClassType.AndroidContext;\n+    }\n+\n+    @Override\n+    protected IType createPagedRestResponseReturnType(IType elementType) {\n+        return GenericType.AndroidCompletableFuture(GenericType.AndroidPagedResponse(elementType));\n+    }\n+\n+    @Override\n+    protected IType createPagedAsyncReturnType(IType elementType) {\n+        return GenericType.AndroidPagedResponse(elementType);\n+    }\n+\n+    @Override\n+    protected IType createPagedSyncReturnType(IType elementType) {\n+        return GenericType.AndroidPagedResponse(elementType);\n+    }\n+\n+    @Override\n+    protected IType createAsyncBinaryReturnType() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected IType createAsyncBodyReturnType(IType restAPIMethodReturnBodyClientType) {\n+        return GenericType.AndroidCompletableFuture(restAPIMethodReturnBodyClientType);\n+    }\n+\n+    @Override\n+    protected IType createAsyncVoidReturnType() {\n+        return GenericType.AndroidCompletableFuture(ClassType.Void);\n+    }\n+\n+    @Override\n+    protected IType createSyncReturnWithResponseType(IType syncReturnType) {\n+        return (GenericType.AndroidResponse(syncReturnType));\n+    }\n+\n+    @Override\n+    protected boolean shouldGeneratePagingMethods() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected ReturnValue createSimpleSyncRestResponseReturnValue(Operation operation, IType syncReturnWithResponse) {\n+        return new ReturnValue(returnTypeDescription(operation, syncReturnWithResponse, syncReturnWithResponse), syncReturnWithResponse);\n+    }\n+\n+    @Override\n+    protected ReturnValue createSimpleAsyncRestResponseReturnValue(Operation operation, ProxyMethod proxyMethod, IType syncReturnType) {\n+        IType asyncWithResponseType = GenericType.AndroidCompletableFuture(GenericType.AndroidResponse(syncReturnType));\n+        return new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(), syncReturnType),\n+                asyncWithResponseType);\n+    }\n+\n+    @Override\n+    protected ReturnValue createSimpleSyncReturnValue(Operation operation, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, syncReturnType, syncReturnType), syncReturnType);\n+    }\n+\n+    @Override\n+    protected ReturnValue createSimpleAsyncReturnValue(Operation operation, IType asyncReturnType, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType), asyncReturnType);\n+    }\n+\n+}"
  },
  {
    "sha": "16aeabbb5e4446b355ba7d3359da46906206909f",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidExceptionMapper.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidExceptionMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidExceptionMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidExceptionMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,21 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.android.model.clientmodel.AndroidClientException;\n+import com.azure.autorest.mapper.ExceptionMapper;\n+import com.azure.autorest.model.clientmodel.ClientException;\n+\n+public class AndroidExceptionMapper extends ExceptionMapper {\n+    private static ExceptionMapper instance = new AndroidExceptionMapper();\n+\n+    protected AndroidExceptionMapper() {\n+    }\n+\n+    public static ExceptionMapper getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected ClientException.Builder createClientExceptionBuilder() {\n+        return new AndroidClientException.Builder();\n+    }\n+}"
  },
  {
    "sha": "6e0de5e2dfdc22a1bf6eb4d7759c1a39a61c2828",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMapperFactory.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMapperFactory.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMapperFactory.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMapperFactory.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,47 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.mapper.ClientMethodMapper;\n+import com.azure.autorest.mapper.DefaultMapperFactory;\n+import com.azure.autorest.mapper.ExceptionMapper;\n+import com.azure.autorest.mapper.MethodGroupMapper;\n+import com.azure.autorest.mapper.ModelMapper;\n+import com.azure.autorest.mapper.ProxyMethodMapper;\n+import com.azure.autorest.mapper.ProxyParameterMapper;\n+import com.azure.autorest.mapper.ServiceClientMapper;\n+\n+public class AndroidMapperFactory extends DefaultMapperFactory {\n+    @Override\n+    public ClientMethodMapper getClientMethodMapper() {\n+        return AndroidClientMethodMapper.getInstance();\n+    }\n+\n+    @Override\n+    public ProxyMethodMapper getProxyMethodMapper() {\n+        return AndroidProxyMethodMapper.getInstance();\n+    }\n+\n+    @Override\n+    public ProxyParameterMapper getProxyParameterMapper() {\n+        return AndroidProxyParameterMapper.getInstance();\n+    }\n+\n+    @Override\n+    public MethodGroupMapper getMethodGroupMapper() {\n+        return AndroidMethodGroupMapper.getInstance();\n+    }\n+\n+    @Override\n+    public ServiceClientMapper getServiceClientMapper() {\n+        return AndroidServiceClientMapper.getInstance();\n+    }\n+\n+    @Override\n+    public ModelMapper getModelMapper() {\n+        return AndroidModelMapper.getInstance();\n+    }\n+\n+    @Override\n+    public ExceptionMapper getExceptionMapper() {\n+        return AndroidExceptionMapper.getInstance();\n+    }\n+}"
  },
  {
    "sha": "855e38e4ec1bcd73fb1f3ffc68329fdd765ed2e7",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMethodGroupMapper.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMethodGroupMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMethodGroupMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidMethodGroupMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,28 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.android.model.clientmodel.AndroidMethodGroupClient;\n+import com.azure.autorest.android.model.clientmodel.AndroidProxy;\n+import com.azure.autorest.mapper.MethodGroupMapper;\n+import com.azure.autorest.model.clientmodel.MethodGroupClient;\n+import com.azure.autorest.model.clientmodel.Proxy;\n+\n+public class AndroidMethodGroupMapper extends MethodGroupMapper {\n+    private static MethodGroupMapper instance = new AndroidMethodGroupMapper();\n+\n+    protected AndroidMethodGroupMapper() {\n+    }\n+\n+    public static MethodGroupMapper getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected Proxy.Builder createProxyBuilder() {\n+        return new AndroidProxy.Builder();\n+    }\n+\n+    @Override\n+    protected MethodGroupClient.Builder createMethodGroupClientBuilder() {\n+        return new AndroidMethodGroupClient.Builder();\n+    }\n+}"
  },
  {
    "sha": "4e58cb55ec6dd0e373d0733b6d33402a4835f598",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidModelMapper.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidModelMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidModelMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidModelMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,21 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.android.model.clientmodel.AndroidClientModel;\n+import com.azure.autorest.mapper.ModelMapper;\n+import com.azure.autorest.model.clientmodel.ClientModel;\n+\n+public class AndroidModelMapper extends ModelMapper {\n+    private static ModelMapper instance = new AndroidModelMapper();\n+\n+    protected AndroidModelMapper() {\n+    }\n+\n+    public static ModelMapper getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected ClientModel.Builder createModelBuilder() {\n+        return new AndroidClientModel.Builder();\n+    }\n+}"
  },
  {
    "sha": "865844d6269dfc74852c89e2911c6e4c7649fd27",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyMethodMapper.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyMethodMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyMethodMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyMethodMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,79 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.android.model.clientmodel.AndroidProxyMethod;\n+import com.azure.autorest.mapper.ProxyMethodMapper;\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.GenericType;\n+import com.azure.autorest.model.clientmodel.IType;\n+import com.azure.autorest.model.clientmodel.PrimitiveType;\n+import com.azure.autorest.model.clientmodel.ProxyMethod;\n+import com.azure.autorest.model.clientmodel.ProxyMethodParameter;\n+\n+import java.util.List;\n+\n+import static com.azure.autorest.extension.base.model.codemodel.RequestParameterLocation.None;\n+\n+public class AndroidProxyMethodMapper extends ProxyMethodMapper {\n+    private static ProxyMethodMapper instance = new AndroidProxyMethodMapper();\n+\n+    protected AndroidProxyMethodMapper() {\n+    }\n+\n+    public static ProxyMethodMapper getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected ProxyMethod.Builder createProxyMethodBuilder() {\n+        return new AndroidProxyMethod.Builder();\n+    }\n+\n+    @Override\n+    protected IType createBinaryContentAsyncReturnType() {\n+        return PrimitiveType.Void;\n+    }\n+\n+    @Override\n+    protected IType createStreamContentAsyncReturnType() {\n+        return PrimitiveType.Void;\n+    }\n+\n+    @Override\n+    protected IType createAsyncResponseReturnType(ClassType clientResponseClassType) {\n+        return PrimitiveType.Void; // return GenericType.CompletableFuture(clientResponseClassType);\n+    }\n+\n+    @Override\n+    protected IType createSingleValueAsyncReturnType(IType singleValueType) {\n+        return PrimitiveType.Void; // return GenericType.CompletableFuture(singleValueType);\n+    }\n+\n+    @Override\n+    protected ClassType getContextClass() {\n+        return ClassType.AndroidContext;\n+    }\n+\n+    @Override\n+    protected ClassType getHttpResponseExceptionType() {\n+        return ClassType.AndroidHttpResponseException;\n+    }\n+\n+    @Override\n+    protected void appendCallbackParameter(List<ProxyMethodParameter> parameters, IType responseBodyType) {\n+        ProxyMethodParameter callbackParameter = new ProxyMethodParameter.Builder()\n+                .description(\"The async callback associated with this operation.\")\n+                .wireType(GenericType.AndroidCallback(GenericType.AndroidResponse(responseBodyType)))\n+                .clientType(GenericType.AndroidCallback(GenericType.AndroidResponse(responseBodyType)))\n+                .name(\"callback\")\n+                .requestParameterLocation(None)\n+                .requestParameterName(\"callback\")\n+                .alreadyEncoded(true)\n+                .isConstant(false)\n+                .isRequired(false)\n+                .isNullable(false)\n+                .fromClient(false)\n+                .parameterReference(\"callback\")\n+                .build();\n+        parameters.add(callbackParameter);\n+    }\n+}"
  },
  {
    "sha": "d2dad159dd375aa28c216c588594c034cf1f44fc",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyParameterMapper.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyParameterMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyParameterMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidProxyParameterMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,21 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.android.model.clientmodel.AndroidProxyMethodParameter;\n+import com.azure.autorest.mapper.ProxyParameterMapper;\n+import com.azure.autorest.model.clientmodel.ProxyMethodParameter;\n+\n+public class AndroidProxyParameterMapper extends ProxyParameterMapper {\n+    private static ProxyParameterMapper instance = new AndroidProxyParameterMapper();\n+\n+    protected AndroidProxyParameterMapper() {\n+    }\n+\n+    public static ProxyParameterMapper getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected ProxyMethodParameter.Builder createProxyMethodParameterBuilder() {\n+        return new AndroidProxyMethodParameter.Builder();\n+    }\n+}"
  },
  {
    "sha": "6c0fd781ed38e4db256b8fa4be0b2be5edcc0b9d",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidServiceClientMapper.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidServiceClientMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidServiceClientMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/mapper/AndroidServiceClientMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,63 @@\n+package com.azure.autorest.android.mapper;\n+\n+import com.azure.autorest.android.model.clientmodel.AndroidServiceClient;\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.mapper.ServiceClientMapper;\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.ServiceClient;\n+import com.azure.autorest.model.clientmodel.ServiceClientProperty;\n+import com.azure.autorest.model.javamodel.JavaVisibility;\n+\n+import java.util.List;\n+\n+public class AndroidServiceClientMapper extends ServiceClientMapper {\n+\n+    private static ServiceClientMapper instance = new AndroidServiceClientMapper();\n+\n+    protected AndroidServiceClientMapper() {\n+    }\n+\n+    public static ServiceClientMapper getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    protected ServiceClient.Builder createClientBuilder() {\n+        return new AndroidServiceClient.Builder();\n+    }\n+\n+    @Override\n+    protected void addHttpPipelineProperty(List<ServiceClientProperty> serviceClientProperties) {\n+        serviceClientProperties.add(new ServiceClientProperty(\"The HTTP pipeline to send requests through.\",\n+                ClassType.AndroidHttpPipeline, \"httpPipeline\", true, null));\n+    }\n+\n+    @Override\n+    protected void addSerializerAdapterProperty(List<ServiceClientProperty> serviceClientProperties, JavaSettings settings) {\n+        serviceClientProperties.add(new ServiceClientProperty(\"The serializer to serialize an object into a string.\",\n+                ClassType.AndroidJacksonSerder, \"jacksonSerder\", true, null,\n+                settings.isFluent() ? JavaVisibility.PackagePrivate : JavaVisibility.Public));\n+    }\n+\n+    @Override\n+    protected com.azure.autorest.model.clientmodel.IType getHttpPipelineClassType() {\n+        return ClassType.AndroidHttpPipeline;\n+    }\n+\n+    @Override\n+    protected com.azure.autorest.model.clientmodel.ClientMethodParameter createSerializerAdapterParameter() {\n+        return  new com.azure.autorest.model.clientmodel.ClientMethodParameter.Builder()\n+                .description(\"The serializer to serialize an object into a string\")\n+                .isFinal(false)\n+                .wireType(com.azure.autorest.model.clientmodel.ClassType.AndroidJacksonSerder)\n+                .name(\"jacksonSerder\")\n+                .isRequired(true)\n+                .isConstant(false)\n+                .fromClient(true)\n+                .defaultValue(null)\n+                .annotations(JavaSettings.getInstance().shouldNonNullAnnotations()\n+                        ? java.util.Arrays.asList(ClassType.NonNull)\n+                        : new java.util.ArrayList<>())\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "199f80aa23a55d02c720d3e671da960699161df5",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientException.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientException.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientException.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientException.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,27 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.ClientException;\n+\n+public class AndroidClientException extends ClientException {\n+    protected AndroidClientException(String package_Keyword, String name, String errorName, com.azure.autorest.model.clientmodel.IType parentType) {\n+        super(package_Keyword,\n+                name,\n+                errorName,\n+                parentType);\n+    }\n+\n+    public static class Builder extends ClientException.Builder{\n+\n+        @Override\n+        public ClientException build() {\n+            if (parentType.equals(ClassType.HttpResponseException)) {\n+                parentType = ClassType.AndroidHttpResponseException;\n+            }\n+            return new AndroidClientException(packageName,\n+                    name,\n+                    errorName,\n+                    parentType);\n+        }\n+    }\n+}"
  },
  {
    "sha": "a005a6762526f37fc3413a33ff12e3a5386881fc",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientMethod.java",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientMethod.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientMethod.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientMethod.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,108 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.model.clientmodel.ClientMethod;\n+import com.azure.autorest.model.clientmodel.ClientMethodParameter;\n+import com.azure.autorest.model.clientmodel.ClientMethodType;\n+import com.azure.autorest.model.clientmodel.MethodPageDetails;\n+import com.azure.autorest.model.clientmodel.MethodTransformationDetail;\n+import com.azure.autorest.model.clientmodel.ProxyMethod;\n+import com.azure.autorest.model.clientmodel.ReturnValue;\n+import com.azure.autorest.model.javamodel.JavaVisibility;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class AndroidClientMethod extends ClientMethod {\n+\n+    /**\n+     * Create a new ClientMethod with the provided properties.\n+     * @param description The description of this ClientMethod.\n+     * @param returnValue The return value of this ClientMethod.\n+     * @param name The name of this ClientMethod.\n+     * @param parameters The parameters of this ClientMethod.\n+     * @param onlyRequiredParameters Whether or not this ClientMethod has omitted optional parameters.\n+     * @param type The type of this ClientMethod.\n+     * @param proxyMethod The ProxyMethod that this ClientMethod eventually calls.\n+     * @param validateExpressions The expressions (parameters and service client properties) that need to be validated in this ClientMethod.\n+     * @param clientReference The reference to the service client.\n+     * @param requiredNullableParameterExpressions The parameter expressions which are required.\n+     * @param isGroupedParameterRequired The parameter that needs to transformed before pagination.\n+     * @param groupedParameterTypeName The type name of groupedParameter.\n+     * @param methodPageDetails The pagination information if this is a paged method.\n+     * @param methodTransformationDetails The parameter transformations before calling ProxyMethod.\n+     */\n+    protected AndroidClientMethod(String description, ReturnValue returnValue, String name,\n+                                  List<ClientMethodParameter> parameters, boolean onlyRequiredParameters,\n+                                  ClientMethodType type, ProxyMethod proxyMethod, Map<String, String> validateExpressions,\n+                                  String clientReference, List<String> requiredNullableParameterExpressions,\n+                                  boolean isGroupedParameterRequired, String groupedParameterTypeName,\n+                                  MethodPageDetails methodPageDetails, List<MethodTransformationDetail> methodTransformationDetails,\n+                                  JavaVisibility methodVisibility) {\n+        super(description,\n+                returnValue,\n+                name,\n+                parameters,\n+                onlyRequiredParameters,\n+                type,\n+                proxyMethod,\n+                validateExpressions,\n+                clientReference,\n+                requiredNullableParameterExpressions,\n+                isGroupedParameterRequired,\n+                groupedParameterTypeName,\n+                methodPageDetails,\n+                methodTransformationDetails,\n+                methodVisibility);\n+    }\n+\n+    @Override\n+    public void addImportsTo(Set<String> imports, boolean includeImplementationImports, JavaSettings settings) {\n+        getReturnValue().addImportsTo(imports, includeImplementationImports);\n+\n+        imports.add(\"com.azure.android.core.rest.annotation.ServiceMethod\");\n+        imports.add(\"com.azure.android.core.rest.annotation.ReturnType\");\n+        imports.add(\"java.util.concurrent.ExecutionException\");\n+\n+        for (ClientMethodParameter parameter : getParameters()) {\n+            parameter.addImportsTo(imports, includeImplementationImports);\n+        }\n+\n+        if (getMethodPageDetails() != null) {\n+            imports.add(\"com.azure.android.core.rest.PagedResponseBase\");\n+        }\n+\n+        if (includeImplementationImports) {\n+            getProxyMethod().addImportsTo(imports, includeImplementationImports, settings);\n+            for (com.azure.autorest.model.clientmodel.ProxyMethodParameter parameter : getProxyMethod().getParameters()) {\n+                parameter.getClientType().addImportsTo(imports, true);\n+            }\n+        }\n+    }\n+\n+    public static class Builder extends ClientMethod.Builder {\n+        @Override\n+        /**\n+         * @return an immutable ClientMethod instance with the configurations on this builder.\n+         */\n+        public ClientMethod build() {\n+            return new AndroidClientMethod(\n+                    description,\n+                    returnValue,\n+                    name,\n+                    parameters,\n+                    onlyRequiredParameters,\n+                    type,\n+                    proxyMethod,\n+                    validateExpressions,\n+                    clientReference,\n+                    requiredNullableParameterExpressions,\n+                    isGroupedParameterRequired,\n+                    groupedParameterTypeName,\n+                    methodPageDetails,\n+                    methodTransformationDetails,\n+                    methodVisibility);\n+        }\n+    }\n+}"
  },
  {
    "sha": "26cd3c01a0a4c48f00d508ea82e27770e6689b5f",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientModel.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientModel.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientModel.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidClientModel.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,59 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.model.clientmodel.ClientModel;\n+\n+public class AndroidClientModel extends ClientModel {\n+    protected AndroidClientModel(String package_Keyword, String name, java.util.List<String> imports, String description,\n+                          boolean isPolymorphic, String polymorphicDiscriminator, String serializedName, boolean needsFlatten,\n+                          String parentModelName, java.util.List<com.azure.autorest.model.clientmodel.ClientModel> derivedModels, String xmlName, String xmlNamespace,\n+                          java.util.List<com.azure.autorest.model.clientmodel.ClientModelProperty> properties, java.util.List<com.azure.autorest.model.clientmodel.ClientModelPropertyReference> propertyReferences) {\n+        super(package_Keyword,\n+                name,\n+                imports,\n+                description,\n+                isPolymorphic,\n+                polymorphicDiscriminator,\n+                serializedName,\n+                needsFlatten,\n+                parentModelName,\n+                derivedModels,\n+                xmlName,\n+                xmlNamespace,\n+                properties,\n+                propertyReferences);\n+    }\n+\n+    @Override\n+    protected void addFluentAnnotationImport(java.util.Set<String> imports) {\n+        imports.add(\"com.azure.android.core.rest.annotation.Fluent\");\n+    }\n+\n+    @Override\n+    protected void addImmutableAnnotationImport(java.util.Set<String> imports) {\n+        imports.add(\"com.azure.android.core.rest.annotation.Immutable\");\n+    }\n+\n+    @Override\n+    protected void addJsonFlattenAnnotationImport(java.util.Set<String> imports) {\n+    }\n+\n+    public static class Builder extends ClientModel.Builder {\n+        @Override\n+        public ClientModel build() {\n+            return new AndroidClientModel(packageName,\n+                    name,\n+                    imports,\n+                    description,\n+                    isPolymorphic,\n+                    polymorphicDiscriminator,\n+                    serializedName,\n+                    needsFlatten,\n+                    parentModelName,\n+                    derivedModels,\n+                    xmlName,\n+                    xmlNamespace,\n+                    properties,\n+                    propertyReferences);\n+        }\n+    }\n+}"
  },
  {
    "sha": "79398514fde47c2fdd1b6ed274d88c47016fd743",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidMethodGroupClient.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidMethodGroupClient.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidMethodGroupClient.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidMethodGroupClient.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,59 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.ClientMethod;\n+import com.azure.autorest.model.clientmodel.IType;\n+import com.azure.autorest.model.clientmodel.MethodGroupClient;\n+import com.azure.autorest.model.clientmodel.Proxy;\n+\n+import java.util.List;\n+\n+public class AndroidMethodGroupClient extends MethodGroupClient {\n+    protected AndroidMethodGroupClient(String package_Keyword,\n+                                       String className,\n+                                       String interfaceName,\n+                                       List<String> implementedInterfaces,\n+                                       Proxy proxy,\n+                                       String serviceClientName,\n+                                       String variableType,\n+                                       String variableName,\n+                                       List<ClientMethod> clientMethods,\n+                                       List<IType> supportedInterfaces,\n+                                       String classBaseName) {\n+        super(package_Keyword,\n+                className,\n+                interfaceName,\n+                implementedInterfaces,\n+                proxy,\n+                serviceClientName,\n+                variableType,\n+                variableName,\n+                clientMethods,\n+                supportedInterfaces,\n+                classBaseName != null\n+                    ? classBaseName\n+                    : (className.endsWith(\"Impl\") ? className.substring(0, className.length() - 4) : className));\n+    }\n+\n+    @Override\n+    protected ClassType getProxyClassType() {\n+        return ClassType.AndroidRestProxy;\n+    }\n+\n+    public static class Builder extends MethodGroupClient.Builder {\n+        @Override\n+        public MethodGroupClient build() {\n+            return new AndroidMethodGroupClient(packageName,\n+                    className,\n+                    interfaceName,\n+                    implementedInterfaces,\n+                    proxy,\n+                    serviceClientName,\n+                    variableType,\n+                    variableName,\n+                    clientMethods,\n+                    supportedInterfaces,\n+                    classBaseName);\n+        }\n+    }\n+}"
  },
  {
    "sha": "00272103428c56e84d371d22ba00877e298219d5",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxy.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxy.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxy.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxy.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,39 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.model.clientmodel.Proxy;\n+import com.azure.autorest.model.clientmodel.ProxyMethod;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AndroidProxy extends Proxy {\n+    protected AndroidProxy(String name, String clientTypeName, String baseURL, List<ProxyMethod> methods) {\n+        super(name,\n+                clientTypeName,\n+                baseURL,\n+                methods);\n+    }\n+\n+    @Override\n+    public void addImportsTo(Set<String> imports, boolean includeImplementationImports, JavaSettings settings) {\n+        if (includeImplementationImports) {\n+            imports.add(\"com.azure.android.core.rest.annotation.Host\");\n+            imports.add(\"com.azure.android.core.rest.annotation.ServiceInterface\");\n+        }\n+\n+        for (ProxyMethod method : getMethods()) {\n+            method.addImportsTo(imports, includeImplementationImports, settings);\n+        }\n+    }\n+\n+    public static final class Builder extends Proxy.Builder {\n+        @Override\n+        public Proxy build() {\n+            return new AndroidProxy(name,\n+                    clientTypeName,\n+                    baseURL,\n+                    methods);\n+        }\n+    }\n+}"
  },
  {
    "sha": "78432c7fde711d3c2d79efc555ed090f874ef28a",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethod.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethod.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethod.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethod.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,109 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.IType;\n+import com.azure.autorest.model.clientmodel.ProxyMethod;\n+import com.azure.autorest.model.clientmodel.ProxyMethodParameter;\n+import com.azure.core.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class AndroidProxyMethod extends ProxyMethod {\n+\n+    /**\n+     * Create a new RestAPIMethod with the provided properties.\n+     * @param requestContentType The Content-Type of the request.\n+     * @param returnType The type of value that is returned from this method.\n+     * @param httpMethod The HTTP method that will be used for this method.\n+     * @param urlPath The path of this method's request URL.\n+     * @param responseExpectedStatusCodes The status codes that are expected in the response.\n+     * @param returnValueWireType The return value's type as it is received from the network (across the wire).\n+     * @param unexpectedResponseExceptionType The exception type to throw if this method receives and unexpected response status code.\n+     * @param name The name of this REST API method.\n+     * @param parameters The parameters that are provided to this method.\n+     * @param description The description of this method.\n+     * @param isResumable Whether or not this method is resumable.\n+     * @param responseContentTypes The metia-types in response.\n+     */\n+    protected AndroidProxyMethod(String requestContentType, IType returnType, HttpMethod httpMethod, String urlPath,\n+                                 List<HttpResponseStatus> responseExpectedStatusCodes,\n+                                 ClassType unexpectedResponseExceptionType,\n+                                 Map<ClassType, List<HttpResponseStatus>> unexpectedResponseExceptionTypes,\n+                                 String name, List<ProxyMethodParameter> parameters, String description,\n+                                 IType returnValueWireType, boolean isResumable, Set<String> responseContentTypes) {\n+        super(requestContentType,\n+                returnType,\n+                httpMethod,\n+                urlPath,\n+                responseExpectedStatusCodes,\n+                unexpectedResponseExceptionType,\n+                unexpectedResponseExceptionTypes,\n+                name,\n+                parameters,\n+                description,\n+                returnValueWireType,\n+                isResumable,\n+                responseContentTypes);\n+    }\n+\n+    @Override\n+    public void addImportsTo(Set<String> imports, boolean includeImplementationImports, JavaSettings settings) {\n+\n+        if (includeImplementationImports) {\n+            if (getUnexpectedResponseExceptionType() != null) {\n+                imports.add(\"com.azure.android.core.rest.annotation.UnexpectedResponseExceptionTypes\");\n+                imports.add(\"com.azure.android.core.rest.annotation.UnexpectedResponseExceptionType\");\n+                getUnexpectedResponseExceptionType().addImportsTo(imports, includeImplementationImports);\n+            }\n+            if (getUnexpectedResponseExceptionTypes() != null) {\n+                imports.add(\"com.azure.android.core.rest.annotation.UnexpectedResponseExceptionTypes\");\n+                getUnexpectedResponseExceptionTypes().keySet().forEach(e -> e.addImportsTo(imports, includeImplementationImports));\n+            }\n+            if (getIsResumable()) {\n+                imports.add(\"com.azure.android.core.rest.annotation.ResumeOperation\");\n+            }\n+            imports.add(String.format(\"com.azure.android.core.rest.annotation.%1$s\", com.azure.autorest.util.CodeNamer\n+                    .toPascalCase(getHttpMethod().toString().toLowerCase())));\n+\n+            if (settings.isFluent()) {\n+                imports.add(\"com.azure.android.core.rest.annotation.Headers\");\n+            }\n+            imports.add(\"com.azure.android.core.rest.annotation.ExpectedResponses\");\n+\n+            if (getReturnValueWireType() != null) {\n+                imports.add(\"com.azure.android.core.rest.annotation.ReturnValueWireType\");\n+                returnValueWireType.addImportsTo(imports, includeImplementationImports);\n+            }\n+\n+            returnType.addImportsTo(imports, includeImplementationImports);\n+\n+            for (ProxyMethodParameter parameter : parameters) {\n+                parameter.addImportsTo(imports, includeImplementationImports, settings);\n+            }\n+        }\n+    }\n+\n+    public static class Builder extends ProxyMethod.Builder {\n+\n+        @Override\n+        public ProxyMethod build() {\n+            return new AndroidProxyMethod(requestContentType,\n+                    returnType,\n+                    httpMethod,\n+                    urlPath,\n+                    responseExpectedStatusCodes,\n+                    unexpectedResponseExceptionType,\n+                    unexpectedResponseExceptionTypes,\n+                    name,\n+                    parameters,\n+                    description,\n+                    returnValueWireType,\n+                    isResumable,\n+                    responseContentTypes);\n+        }\n+    }\n+}"
  },
  {
    "sha": "e255535660e3a0cb27a661b822d6beff5dd2deeb",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethodParameter.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethodParameter.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethodParameter.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidProxyMethodParameter.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,98 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.extension.base.model.codemodel.RequestParameterLocation;\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.model.clientmodel.IType;\n+import com.azure.autorest.model.clientmodel.ProxyMethodParameter;\n+import com.azure.autorest.util.CodeNamer;\n+import com.azure.core.util.serializer.CollectionFormat;\n+\n+import java.util.Set;\n+\n+public class AndroidProxyMethodParameter extends ProxyMethodParameter {\n+\n+    /**\n+     * Create a new RestAPIParameter based on the provided properties.\n+     * @param description The description of this parameter.\n+     * @param wireType The type of this parameter.\n+     * @param clientType The type of this parameter users interact with.\n+     * @param name The name of this parameter when it is used as a variable.\n+     * @param requestParameterLocation The location within the REST API method's HttpRequest where this parameter will be added.\n+     * @param requestParameterName The name of the HttpRequest's parameter to substitute with this parameter's value.\n+     * @param alreadyEncoded Whether or not the value of this parameter will already be encoded (and can therefore be skipped when other parameters' values are being encoded.\n+     * @param isConstant Whether or not this parameter is a constant value.\n+     * @param isRequired Whether or not this parameter is required.\n+     * @param isNullable Whether or not this parameter is nullable.\n+     * @param fromClient Whether or not this parameter's value comes from a ServiceClientProperty.\n+     * @param headerCollectionPrefix The x-ms-header-collection-prefix extension value.\n+     * @param parameterReference The reference to this parameter from a caller.\n+     * @param defaultValue The default value of the parameter.\n+     * @param collectionFormat The collection format if the parameter is a list type.\n+     */\n+    protected AndroidProxyMethodParameter(String description,\n+                                          IType wireType,\n+                                          IType clientType,\n+                                          String name,\n+                                          RequestParameterLocation requestParameterLocation,\n+                                          String requestParameterName,\n+                                          boolean alreadyEncoded,\n+                                          boolean isConstant,\n+                                          boolean isRequired,\n+                                          boolean isNullable,\n+                                          boolean fromClient,\n+                                          String headerCollectionPrefix,\n+                                          String parameterReference,\n+                                          String defaultValue,\n+                                          CollectionFormat collectionFormat) {\n+        super(description,\n+                wireType,\n+                clientType,\n+                name,\n+                requestParameterLocation,\n+                requestParameterName,\n+                alreadyEncoded,\n+                isConstant,\n+                isRequired,\n+                isNullable,\n+                fromClient,\n+                headerCollectionPrefix,\n+                parameterReference,\n+                defaultValue,\n+                collectionFormat);\n+    }\n+\n+    @Override\n+    public void addImportsTo(Set<String> imports, boolean includeImplementationImports, JavaSettings settings) {\n+        if (getRequestParameterLocation() != RequestParameterLocation.None) {\n+            imports.add(String.format(\"com.azure.android.core.rest.annotation.%1$sParam\", CodeNamer.toPascalCase(getRequestParameterLocation().toString())));\n+        }\n+        if (getRequestParameterLocation() != RequestParameterLocation.Body) {\n+            if (getClientType() == com.azure.autorest.model.clientmodel.ArrayType.ByteArray) {\n+                imports.add(\"com.azure.android.core.util.Base64Util\");\n+            }\n+        }\n+\n+        getWireType().addImportsTo(imports, includeImplementationImports);\n+    }\n+\n+    public static class Builder extends ProxyMethodParameter.Builder{\n+        @Override\n+        public ProxyMethodParameter build() {\n+            return new AndroidProxyMethodParameter(description,\n+                    wireType,\n+                    clientType,\n+                    name,\n+                    requestParameterLocation,\n+                    requestParameterName,\n+                    alreadyEncoded,\n+                    isConstant,\n+                    isRequired,\n+                    isNullable,\n+                    fromClient,\n+                    headerCollectionPrefix,\n+                    parameterReference,\n+                    defaultValue,\n+                    collectionFormat);\n+        }\n+    }\n+}"
  },
  {
    "sha": "9b7fe2f719210f953bdf22c44337accfbc4d53d9",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidServiceClient.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidServiceClient.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidServiceClient.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/model/clientmodel/AndroidServiceClient.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,73 @@\n+package com.azure.autorest.android.model.clientmodel;\n+\n+import com.azure.autorest.model.clientmodel.ClientMethod;\n+import com.azure.autorest.model.clientmodel.ClientMethodParameter;\n+import com.azure.autorest.model.clientmodel.Constructor;\n+import com.azure.autorest.model.clientmodel.MethodGroupClient;\n+import com.azure.autorest.model.clientmodel.Proxy;\n+import com.azure.autorest.model.clientmodel.ServiceClient;\n+import com.azure.autorest.model.clientmodel.ServiceClientProperty;\n+\n+import java.util.List;\n+\n+public class AndroidServiceClient extends ServiceClient {\n+\n+    protected AndroidServiceClient(String packageName,\n+                                   String className,\n+                                   String interfaceName,\n+                                   Proxy proxy,\n+                                   List<MethodGroupClient> methodGroupClients,\n+                                   List<ServiceClientProperty> properties,\n+                                   List<Constructor> constructors,\n+                                   List<ClientMethod> clientMethods,\n+                                   ClientMethodParameter azureEnvironmentParameter,\n+                                   ClientMethodParameter tokenCredentialParameter,\n+                                   ClientMethodParameter httpPipelineParameter,\n+                                   ClientMethodParameter serializerAdapterParameter,\n+                                   ClientMethodParameter defaultPollIntervalParameter) {\n+        super(packageName,\n+                className,\n+                interfaceName,\n+                proxy,\n+                methodGroupClients,\n+                properties,\n+                constructors,\n+                clientMethods,\n+                azureEnvironmentParameter,\n+                tokenCredentialParameter,\n+                httpPipelineParameter,\n+                serializerAdapterParameter,\n+                defaultPollIntervalParameter);\n+    }\n+\n+    @Override\n+    protected void addPipelineBuilderImport(java.util.Set<String> imports) {\n+        imports.add(\"com.azure.android.core.http.HttpPipelineBuilder\");\n+    }\n+\n+    @Override\n+    protected void addHttpPolicyImports(java.util.Set<String> imports) {\n+        imports.add(\"com.azure.android.core.http.policy.CookiePolicy\");\n+        imports.add(\"com.azure.android.core.http.policy.RetryPolicy\");\n+        imports.add(\"com.azure.android.core.http.policy.UserAgentPolicy\");\n+    }\n+\n+    public static class Builder extends ServiceClient.Builder {\n+        @Override\n+        public ServiceClient build() {\n+            return new AndroidServiceClient(packageName,\n+                    className,\n+                    interfaceName,\n+                    proxy,\n+                    methodGroupClients,\n+                    properties,\n+                    constructors,\n+                    clientMethods,\n+                    azureEnvironmentParameter,\n+                    tokenCredentialParameter,\n+                    httpPipelineParameter,\n+                    serializerAdapterParameter,\n+                    defaultPollIntervalParameter);\n+        }\n+    }\n+}"
  },
  {
    "sha": "38e1aa5d0023ef3dc934e0003ec201d164376b3d",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidClientMethodTemplate.java",
    "status": "added",
    "additions": 209,
    "deletions": 0,
    "changes": 209,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidClientMethodTemplate.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidClientMethodTemplate.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidClientMethodTemplate.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,209 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.ClientMethod;\n+import com.azure.autorest.model.clientmodel.ClientMethodParameter;\n+import com.azure.autorest.model.clientmodel.ClientMethodType;\n+import com.azure.autorest.model.clientmodel.GenericType;\n+import com.azure.autorest.model.clientmodel.IType;\n+import com.azure.autorest.model.clientmodel.PrimitiveType;\n+import com.azure.autorest.model.clientmodel.ProxyMethod;\n+import com.azure.autorest.model.clientmodel.ProxyMethodParameter;\n+import com.azure.autorest.model.javamodel.JavaType;\n+import com.azure.autorest.template.ClientMethodTemplate;\n+\n+import java.util.stream.Stream;\n+\n+public class AndroidClientMethodTemplate extends ClientMethodTemplate {\n+\n+    private static ClientMethodTemplate _instance = new AndroidClientMethodTemplate();\n+\n+    protected AndroidClientMethodTemplate() {\n+    }\n+\n+    public static ClientMethodTemplate getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    protected IType getContextType() {\n+        return ClassType.AndroidContext;\n+    }\n+\n+    @Override\n+    protected void generatePagingSync(ClientMethod clientMethod, JavaType typeBlock, ProxyMethod restAPIMethod, JavaSettings settings) {\n+    }\n+\n+    @Override\n+    protected void generatePagingAsync(ClientMethod clientMethod, JavaType typeBlock, ProxyMethod restAPIMethod, JavaSettings settings) {\n+    }\n+\n+    @Override\n+    protected void generatePagedAsyncSinglePage(ClientMethod clientMethod, JavaType typeBlock, ProxyMethod restAPIMethod, JavaSettings settings) {\n+        typeBlock.annotation(\"ServiceMethod(returns = ReturnType.SINGLE)\");\n+        writeMethod(typeBlock, clientMethod.getMethodVisibility(), clientMethod.getDeclaration(), function -> {\n+            AddValidations(function, clientMethod.getRequiredNullableParameterExpressions(), clientMethod.getValidateExpressions(), settings);\n+            AddOptionalAndConstantVariables(function, clientMethod, restAPIMethod.getParameters(), settings);\n+            ApplyParameterTransformations(function, clientMethod, settings);\n+            //ConvertClientTypesToWireTypes(function, clientMethod, restAPIMethod.getParameters(), clientMethod.getClientReference(), settings);\n+\n+            if (clientMethod.getMethodPageDetails().nonNullNextLink()) {\n+                final String completeFutureVariableName = \"completableFuture\";\n+                function.line(declareCompletableFuture(clientMethod, completeFutureVariableName));\n+\n+                final String callbackVariableName = \"callbackVariable\";\n+                function.line(declareSinglePageCallback(restAPIMethod, completeFutureVariableName, callbackVariableName));\n+\n+                String serviceMethodCall = generateProxyMethodCall(clientMethod, restAPIMethod, settings, callbackVariableName);\n+                function.line(serviceMethodCall);\n+                function.methodReturn(completeFutureVariableName);\n+            } else {\n+                // REVISIT: Is there a use case for this?\n+            }\n+        });\n+    }\n+\n+    private String declareSinglePageCallback(ProxyMethod restAPIMethod, String completeFutureVariableName, String callbackVariableName) {\n+        ProxyMethodParameter callbackParam = restAPIMethod.getParameters().stream().filter(param -> param.getName().equals(\"callback\")).findFirst().get();\n+        IType callbackDataType = ((GenericType) callbackParam.getClientType()).getTypeArguments()[0];\n+\n+        StringBuilder callbackBuilder = new StringBuilder();\n+        callbackBuilder.append(String.format(\"Callback<%1$s> %2$s = new Callback<%1$s>() {\\n\", callbackDataType, callbackVariableName));\n+        callbackBuilder.append(\"\\t@Override\\n\");\n+        callbackBuilder.append(String.format(\"\\tpublic void onSuccess(%s response) {\\n\", callbackDataType));\n+        callbackBuilder.append(String.format(\"\\t\\t%s.complete(new PagedResponseBase<>(response.getRequest(),\\n\" +\n+                \"response.getStatusCode(),\\n\" +\n+                \"response.getHeaders(),\\n\" +\n+                \"response.getValue().getValue(),\\n\" +\n+                \"response.getValue().getNextLink(),\\n\" +\n+                \"null));\\n\", completeFutureVariableName));\n+        callbackBuilder.append(\"\\t}\\n\");\n+        callbackBuilder.append(\"\\t@Override\\n\");\n+        callbackBuilder.append(\"\\tpublic void onFailure(Throwable error) {\\n\");\n+        callbackBuilder.append(String.format(\"\\t\\t%s.completeExceptionally(error);\\n\", completeFutureVariableName));\n+        callbackBuilder.append(\"\\t}\\n\");\n+        callbackBuilder.append(\"};\\n\");\n+\n+        return callbackBuilder.toString();\n+    }\n+\n+    @Override\n+    protected void generateResumable(ClientMethod clientMethod, JavaType typeBlock, ProxyMethod restAPIMethod, JavaSettings settings) {\n+    }\n+\n+    @Override\n+    protected void generateSimpleAsyncRestResponse(ClientMethod clientMethod, JavaType typeBlock, ProxyMethod restAPIMethod, JavaSettings settings) {\n+        typeBlock.annotation(\"ServiceMethod(returns = ReturnType.SINGLE)\");\n+        writeMethod(typeBlock, clientMethod.getMethodVisibility(), clientMethod.getDeclaration(), function -> {\n+            AddValidations(function, clientMethod.getRequiredNullableParameterExpressions(), clientMethod.getValidateExpressions(), settings);\n+            AddOptionalAndConstantVariables(function, clientMethod, restAPIMethod.getParameters(), settings);\n+            ApplyParameterTransformations(function, clientMethod, settings);\n+            // REVISIT: Restore this call for Android\n+            // ConvertClientTypesToWireTypes(function, clientMethod, restAPIMethod.getParameters(), clientMethod.getClientReference(), settings);\n+\n+            final String completeFutureVariableName = \"completableFuture\";\n+            function.line(declareCompletableFuture(clientMethod, completeFutureVariableName));\n+\n+            final String callbackVariableName = \"callbackVariable\";\n+            function.line(declareCallback(clientMethod, completeFutureVariableName, callbackVariableName));\n+\n+            String serviceMethodCall = generateProxyMethodCall(clientMethod, restAPIMethod, settings, callbackVariableName);\n+            function.line(serviceMethodCall);\n+            function.methodReturn(completeFutureVariableName);\n+        });\n+    }\n+\n+    private String declareCompletableFuture(ClientMethod clientMethod, String completeFutureVariableName) {\n+        return String.format(\"%1$s %2$s = new CompletableFuture<>();\", clientMethod.getReturnValue().getType(), completeFutureVariableName);\n+    }\n+\n+    private String declareCallback(ClientMethod clientMethod, String completeFutureVariableName, String callbackVariableName) {\n+        GenericType clientReturnGenericType = (GenericType) clientMethod.getReturnValue().getType().getClientType();\n+        IType responseType = clientReturnGenericType.getTypeArguments()[0];\n+        StringBuilder callbackBuilder = new StringBuilder();\n+        callbackBuilder.append(String.format(\"Callback<%1$s> %2$s = new Callback<%1$s>() {\\n\", responseType, callbackVariableName));\n+        callbackBuilder.append(\"\\t@Override\\n\");\n+        callbackBuilder.append(String.format(\"\\tpublic void onSuccess(%s response) {\\n\", responseType));\n+        callbackBuilder.append(String.format(\"\\t\\t%s.complete(response);\\n\", completeFutureVariableName));\n+        callbackBuilder.append(\"\\t}\\n\");\n+        callbackBuilder.append(\"\\t@Override\\n\");\n+        callbackBuilder.append(\"\\tpublic void onFailure(Throwable error) {\\n\");\n+        callbackBuilder.append(String.format(\"\\t\\t%s.completeExceptionally(error);\\n\", completeFutureVariableName));\n+        callbackBuilder.append(\"\\t}\\n\");\n+        callbackBuilder.append(\"};\\n\");\n+\n+        return callbackBuilder.toString();\n+    }\n+\n+    private String generateProxyMethodCall(ClientMethod clientMethod, ProxyMethod restAPIMethod, JavaSettings settings, String callbackVariableName) {\n+        java.util.List<String> serviceMethodArgs = clientMethod.getProxyMethodArguments(settings)\n+                .stream()\n+                .map(argVal -> {\n+                    if (clientMethod.getParameters().stream().filter(param -> param.getName().equals(argVal))\n+                            .anyMatch(param -> clientMethod.getMethodTransformationDetails().stream()\n+                                    .anyMatch(transformation -> param.getName().equals(transformation.getOutParameter().getName())))) {\n+                        return argVal + \"Local\";\n+                    }\n+\n+                    if (!contextInParameters(clientMethod) && argVal.equals(\"context\")) {\n+                        return \"Context.NONE\";\n+                    }\n+\n+                    if (argVal.startsWith(\"callback\")) {\n+                        return callbackVariableName;\n+                    }\n+                    return argVal;\n+                })\n+                .collect(java.util.stream.Collectors.toList());\n+        String restAPIMethodArgumentList = String.join(\", \", serviceMethodArgs);\n+        return String.format(\"service.%s(%s);\", restAPIMethod.getName(), restAPIMethodArgumentList);\n+    }\n+\n+    @Override\n+    protected void generateSimpleAsync(ClientMethod clientMethod, JavaType typeBlock, ProxyMethod restAPIMethod, JavaSettings settings) {\n+        typeBlock.annotation(\"ServiceMethod(returns = ReturnType.SINGLE)\");\n+        writeMethod(typeBlock, clientMethod.getMethodVisibility(), clientMethod.getDeclaration(), (function -> {\n+            AddOptionalVariables(function, clientMethod, restAPIMethod.getParameters(), settings);\n+            function.line(\"return %s(%s).thenApply(response -> response.getValue());\", clientMethod.getProxyMethod().getSimpleAsyncRestResponseMethodName(), clientMethod.getArgumentList());\n+        }));\n+    }\n+\n+    @Override\n+    protected void generateSyncMethod(ClientMethod clientMethod, JavaType typeBlock, ProxyMethod restAPIMethod, JavaSettings settings) {\n+        String asyncMethodName = clientMethod.getSimpleAsyncMethodName();\n+        if (clientMethod.getType() == ClientMethodType.SimpleSyncRestResponse) {\n+            asyncMethodName = clientMethod.getSimpleWithResponseAsyncMethodName();\n+        }\n+        String effectiveAsyncMethodName = asyncMethodName;\n+        typeBlock.annotation(\"ServiceMethod(returns = ReturnType.SINGLE)\");\n+        typeBlock.publicMethod(clientMethod.getDeclaration(), function -> {\n+            AddOptionalVariables(function, clientMethod, restAPIMethod.getParameters(), settings);\n+            if (clientMethod.getReturnValue().getType() == ClassType.InputStream) {\n+                throw new UnsupportedOperationException(\"Return type 'ClassType.InputStream' not implemented for android\");\n+            } else {\n+                IType returnType = clientMethod.getReturnValue().getType();\n+                if (returnType instanceof PrimitiveType\n+                        && returnType != PrimitiveType.Void) {\n+                    function.methodReturn(String.format(\"%s(%s).get()\", effectiveAsyncMethodName, clientMethod.getArgumentList()));\n+                } else {\n+                    String proxyMethodCall = String.format(\"%s(%s).get()\", effectiveAsyncMethodName, clientMethod.getArgumentList());\n+\n+                    function.line(\"try {\");\n+                    if (returnType != PrimitiveType.Void) {\n+                        function.methodReturn(proxyMethodCall);\n+                    } else {\n+                        function.line(proxyMethodCall + \";\");\n+                    }\n+                    function.line(\"} catch (InterruptedException e) {\");\n+                    function.line(\"throw new RuntimeException(e);\");\n+                    function.line(\"} catch (ExecutionException e) {\");\n+                    function.line(\"throw new RuntimeException(e);\");\n+                    function.line(\"}\");\n+                }\n+            }\n+        });\n+    }\n+\n+\n+}"
  },
  {
    "sha": "728ca636140d11a526f74118ace446de10754bee",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidEnumTemplate.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidEnumTemplate.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidEnumTemplate.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidEnumTemplate.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,20 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.template.EnumTemplate;\n+\n+public class AndroidEnumTemplate extends EnumTemplate {\n+\n+    private static EnumTemplate _instance = new AndroidEnumTemplate();\n+\n+    private AndroidEnumTemplate() {\n+    }\n+\n+    public static EnumTemplate getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    protected String getStringEnumImport() {\n+        return \"com.azure.android.core.util.ExpandableStringEnum\";\n+    }\n+}"
  },
  {
    "sha": "073afc994faac7271f3279207f9949e0f9764a1b",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidExceptionTemplate.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidExceptionTemplate.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidExceptionTemplate.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidExceptionTemplate.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,19 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.template.ExceptionTemplate;\n+\n+public class AndroidExceptionTemplate extends ExceptionTemplate {\n+    private static ExceptionTemplate _instance = new AndroidExceptionTemplate();\n+\n+    protected AndroidExceptionTemplate() {\n+    }\n+\n+    public static ExceptionTemplate getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    protected String getHttpResponseImport() {\n+        return \"com.azure.android.core.http.HttpResponse\";\n+    }\n+}"
  },
  {
    "sha": "a4586f38404581e780e74222fafc8235326f21a0",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidMethodGroupTemplate.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidMethodGroupTemplate.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidMethodGroupTemplate.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidMethodGroupTemplate.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,25 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.MethodGroupClient;\n+import com.azure.autorest.model.javamodel.JavaBlock;\n+import com.azure.autorest.template.MethodGroupTemplate;\n+\n+public class AndroidMethodGroupTemplate extends MethodGroupTemplate {\n+    private static MethodGroupTemplate _instance = new AndroidMethodGroupTemplate();\n+\n+    protected AndroidMethodGroupTemplate() {\n+    }\n+\n+    public static MethodGroupTemplate getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    protected void writeServiceProxyConstruction(JavaBlock constructor, MethodGroupClient methodGroupClient) {\n+        ClassType proxyType = ClassType.AndroidRestProxy;\n+        constructor.line(String.format(\"this.service = %1$s.create(%2$s.class, client.getHttpPipeline(), client.getJacksonSerder());\",\n+                proxyType.getName(), methodGroupClient.getProxy().getName()));\n+    }\n+}\n+"
  },
  {
    "sha": "a50f65c3e55b84fc2364176a071bd316dcadf605",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidProxyTemplate.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidProxyTemplate.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidProxyTemplate.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidProxyTemplate.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,62 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.GenericType;\n+import com.azure.autorest.model.clientmodel.IType;\n+import com.azure.autorest.model.clientmodel.ProxyMethod;\n+import com.azure.autorest.model.javamodel.JavaInterface;\n+import com.azure.autorest.template.ProxyTemplate;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class AndroidProxyTemplate extends ProxyTemplate {\n+    private static ProxyTemplate _instance = new AndroidProxyTemplate();\n+\n+    protected AndroidProxyTemplate() {\n+    }\n+\n+    public static ProxyTemplate getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    protected void writeUnexpectedExceptions(ProxyMethod restAPIMethod, JavaInterface interfaceBlock) {\n+        StringBuilder annotationBuilder = new StringBuilder();\n+        annotationBuilder.append(\"UnexpectedResponseExceptionTypes({\\n\");\n+        for (java.util.Map.Entry<ClassType, List<HttpResponseStatus>> exception : restAPIMethod.getUnexpectedResponseExceptionTypes().entrySet()) {\n+            annotationBuilder.append(String.format(\"\\t@UnexpectedResponseExceptionType(value = %1$s.class, code = {%2$s})\\n\",\n+                    exception.getKey(), exception.getValue().stream().map(status -> String.valueOf(status.code())).collect(java.util.stream.Collectors.joining(\", \"))));\n+        }\n+        annotationBuilder.append(\"})\\n\");\n+        interfaceBlock.annotation(annotationBuilder.toString());\n+    }\n+\n+    @Override\n+    protected void writeSingleUnexpectedException(ProxyMethod restAPIMethod, JavaInterface interfaceBlock) {\n+        StringBuilder annotationBuilder = new StringBuilder();\n+        annotationBuilder.append(\"UnexpectedResponseExceptionTypes({\\n\");\n+        annotationBuilder.append(String.format(\"\\t@UnexpectedResponseExceptionType(%1$s.class)\\n\", restAPIMethod.getUnexpectedResponseExceptionType()));\n+        annotationBuilder.append(\"})\\n\");\n+        interfaceBlock.annotation(annotationBuilder.toString());\n+    }\n+/*\n+    @Override\n+    protected void writeProxyMethodSignature(ArrayList<String> parameterDeclarationList, ProxyMethod restAPIMethod, JavaInterface interfaceBlock) {\n+        String parameterDeclarations = String.join(\", \", parameterDeclarationList);\n+        IType restAPIMethodReturnValueClientType = restAPIMethod.getReturnType().getClientType();\n+        if(restAPIMethodReturnValueClientType instanceof GenericType) {\n+            GenericType genericReturnType = (GenericType) restAPIMethodReturnValueClientType;\n+            if (genericReturnType.getName().startsWith(\"Mono\")) {\n+                restAPIMethodReturnValueClientType = Arrays.stream(genericReturnType.getTypeArguments()).findFirst().get();\n+            }\n+        }\n+        parameterDeclarations += String.format(\", Callback<%1$s> callback\", restAPIMethodReturnValueClientType.toString());\n+        interfaceBlock.publicMethod(String.format(\"void %1$s(%2$s)\", restAPIMethod.getName(), parameterDeclarations));\n+        interfaceBlock.publicMethod(String.format(\"%1$s %2$s(%3$s)\", restAPIMethodReturnValueClientType, restAPIMethod.getName(), parameterDeclarations));\n+    }\n+\n+ */\n+}"
  },
  {
    "sha": "ca6fa1b29707b3640648c38acb81314d33673f38",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java",
    "status": "added",
    "additions": 131,
    "deletions": 0,
    "changes": 131,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,131 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.model.clientmodel.ClassType;\n+import com.azure.autorest.model.clientmodel.ListType;\n+import com.azure.autorest.model.clientmodel.ServiceClientProperty;\n+import com.azure.autorest.model.javamodel.JavaClass;\n+import com.azure.autorest.template.ServiceClientBuilderTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class AndroidServiceClientBuilderTemplate extends ServiceClientBuilderTemplate {\n+    private static ServiceClientBuilderTemplate _instance = new AndroidServiceClientBuilderTemplate();\n+\n+    protected AndroidServiceClientBuilderTemplate() {\n+    }\n+\n+    public static ServiceClientBuilderTemplate getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    protected String getSerializerMemberName() {\n+        return \"jacksonSerder\";\n+    }\n+\n+    @Override\n+    protected ArrayList<ServiceClientProperty> addCommonClientProperties(JavaSettings settings) {\n+        ArrayList<ServiceClientProperty> commonProperties = new ArrayList<ServiceClientProperty>();\n+\n+\n+        commonProperties.add(new ServiceClientProperty(\"The HTTP pipeline to send requests through\",\n+                ClassType.AndroidHttpPipeline,\n+                \"pipeline\",\n+                false,\n+                \"createHttpPipeline()\"));\n+\n+        commonProperties.add(new ServiceClientProperty(\"The serializer to serialize an object into a string\",\n+                ClassType.AndroidJacksonSerder,\n+                getSerializerMemberName(),\n+                false,\n+                \"JacksonSerder.createDefault()\"));\n+\n+        commonProperties.add(new ServiceClientProperty(\"The HTTP client used to send the request.\",\n+                ClassType.AndroidHttpClient,\n+                \"httpClient\",\n+                false,\n+                null));\n+\n+        commonProperties.add(new ServiceClientProperty(\"The logging configuration for HTTP requests and \"\n+                + \"responses.\",\n+                ClassType.AndroidHttpLogOptions,\n+                \"httpLogOptions\",\n+                false,\n+                null));\n+        commonProperties.add(new ServiceClientProperty(\"The retry policy that will attempt to retry failed \"\n+                + \"requests, if applicable.\",\n+                ClassType.AndroidRetryPolicy,\n+                \"retryPolicy\",\n+                false,\n+                null));\n+\n+        commonProperties.add(new ServiceClientProperty(\"The list of Http pipeline policies to add.\",\n+                new ListType(ClassType.AndroidHttpPipelinePolicy),\n+                \"pipelinePolicies\",\n+                true,\n+                null));\n+\n+        return commonProperties;\n+    }\n+\n+    @Override\n+    protected void addServiceClientBuilderAnnotationImport(Set<String> imports) {\n+        imports.add(\"com.azure.android.core.rest.annotation.ServiceClientBuilder\");\n+    }\n+\n+    @Override\n+    protected void addHttpPolicyImports(Set<String> imports) {\n+        imports.add(\"com.azure.android.core.http.policy.HttpLoggingPolicy\");\n+    }\n+\n+    @Override\n+    protected void addImportForCoreUtils(Set<String> imports) {\n+    }\n+\n+    @Override\n+    protected void addSerializerImport(Set<String> imports, JavaSettings settings) {\n+    }\n+\n+    @Override\n+    protected void addCreateHttpPipelineMethod(JavaSettings settings,\n+                                               String buildReturnType,\n+                                               JavaClass classBlock,\n+                                               List<ServiceClientProperty> clientProperties,\n+                                               String buildMethodName) {\n+        classBlock.privateMethod(String.format(\"HttpPipeline createHttpPipeline()\", buildReturnType,\n+                buildMethodName), function -> {\n+\n+            function.ifBlock(\"httpLogOptions == null\", action -> {\n+                function.line(\"httpLogOptions = new HttpLogOptions();\");\n+            });\n+\n+            function.line(\"List<HttpPipelinePolicy> policies = new ArrayList<>();\");\n+\n+            function.line(\"String clientName = properties.get(SDK_NAME);\");\n+            function.line(\"if (clientName == null) {\");\n+            function.increaseIndent();\n+            function.line(\"clientName = \\\"UnknownName\\\";\");\n+            function.decreaseIndent();\n+            function.line(\"}\");\n+            function.line(\"String clientVersion = properties.get(SDK_VERSION);\");\n+            function.line(\"if (clientVersion == null) {\");\n+            function.increaseIndent();\n+            function.line(\"clientVersion = \\\"UnknownVersion\\\";\");\n+            function.decreaseIndent();\n+            function.line(\"}\");\n+\n+            function.line(\"policies.add(new UserAgentPolicy(null, clientName, clientVersion));\");\n+            function.line(\"policies.add(retryPolicy == null ? RetryPolicy.withExponentialBackoff() : retryPolicy);\");\n+            function.line(\"policies.add(new CookiePolicy());\");\n+            function.line(\"policies.addAll(this.pipelinePolicies);\");\n+            function.line(\"policies.add(new HttpLoggingPolicy(httpLogOptions));\");\n+\n+            function.line(\"HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new \"\n+                    + \"HttpPipelinePolicy[0])).httpClient(httpClient).build();\");\n+            function.methodReturn(\"httpPipeline\");\n+        });\n+    }\n+}"
  },
  {
    "sha": "b0eac5e02b468feeafab011a7f7db3f076b88503",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientTemplate.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientTemplate.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientTemplate.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientTemplate.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,40 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.template.ServiceClientTemplate;\n+\n+public class AndroidServiceClientTemplate extends ServiceClientTemplate {\n+    private static ServiceClientTemplate _instance = new AndroidServiceClientTemplate();\n+\n+\n+    protected AndroidServiceClientTemplate() {\n+    }\n+\n+    public static ServiceClientTemplate getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    protected void addServiceClientAnnotationImport(java.util.Set<String> imports) {\n+        imports.add(\"com.azure.android.core.rest.annotation.ServiceClient\");\n+    }\n+\n+    @Override\n+    protected void addSerializerImport(java.util.Set<String> imports) {\n+        imports.add(\"com.azure.android.core.serde.jackson.JacksonSerder\");\n+    }\n+\n+    @Override\n+    protected String writeSerializerInitialization() {\n+        return \"JacksonSerder.createDefault()\";\n+    }\n+\n+    @Override\n+    protected String writeRetryPolicyInitialization() {\n+        return \"RetryPolicy.withExponentialBackoff()\";\n+    }\n+\n+    @Override\n+    protected void writeSerializerMemberInitialization(com.azure.autorest.model.javamodel.JavaBlock constructorBlock) {\n+        constructorBlock.line(\"this.jacksonSerder = jacksonSerder;\");\n+    }\n+}"
  },
  {
    "sha": "dad53ed2b563b503d270f6600435b211ac0638ef",
    "filename": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidTemplateFactory.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidTemplateFactory.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/androidgen/src/main/java/com/azure/autorest/android/template/AndroidTemplateFactory.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/androidgen/src/main/java/com/azure/autorest/android/template/AndroidTemplateFactory.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -0,0 +1,48 @@\n+package com.azure.autorest.android.template;\n+\n+import com.azure.autorest.template.ClientMethodTemplate;\n+import com.azure.autorest.template.DefaultTemplateFactory;\n+import com.azure.autorest.template.EnumTemplate;\n+import com.azure.autorest.template.ExceptionTemplate;\n+import com.azure.autorest.template.MethodGroupTemplate;\n+import com.azure.autorest.template.ProxyTemplate;\n+import com.azure.autorest.template.ServiceClientBuilderTemplate;\n+import com.azure.autorest.template.ServiceClientTemplate;\n+\n+public class AndroidTemplateFactory extends DefaultTemplateFactory {\n+\n+    @Override\n+    public ProxyTemplate getProxyTemplate() {\n+        return AndroidProxyTemplate.getInstance();\n+    }\n+\n+    @Override\n+    public ClientMethodTemplate getClientMethodTemplate() {\n+        return AndroidClientMethodTemplate.getInstance();\n+    }\n+\n+    @Override\n+    public MethodGroupTemplate getMethodGroupTemplate() {\n+        return AndroidMethodGroupTemplate.getInstance();\n+    }\n+\n+    @Override\n+    public ServiceClientTemplate getServiceClientTemplate() {\n+        return AndroidServiceClientTemplate.getInstance();\n+    }\n+\n+    @Override\n+    public ServiceClientBuilderTemplate getServiceClientBuilderTemplate() {\n+        return AndroidServiceClientBuilderTemplate.getInstance();\n+    }\n+\n+    @Override\n+    public EnumTemplate getEnumTemplate() {\n+        return AndroidEnumTemplate.getInstance();\n+    }\n+\n+    @Override\n+    public ExceptionTemplate getExceptionTemplate() {\n+        return AndroidExceptionTemplate.getInstance();\n+    }\n+}"
  },
  {
    "sha": "78d2f0831193b9d48a5873fee0923b63201547ef",
    "filename": "javagen/src/main/java/com/azure/autorest/mapper/ClientMethodMapper.java",
    "status": "modified",
    "additions": 131,
    "deletions": 49,
    "changes": 180,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ClientMethodMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ClientMethodMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/javagen/src/main/java/com/azure/autorest/mapper/ClientMethodMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -62,13 +62,13 @@ public static ClientMethodMapper getInstance() {\n \n         List<ClientMethod> methods = new ArrayList<>();\n \n-        ClientMethod.Builder builder = new ClientMethod.Builder()\n+        ClientMethod.Builder builder = getClientMethodBuilder()\n                 .description(operation.getLanguage().getJava().getDescription())\n                 .clientReference((operation.getOperationGroup() == null || operation.getOperationGroup().getLanguage().getJava().getName().isEmpty()) ? \"this\": \"this.client\");\n \n         IType asyncRestResponseReturnType;\n-        IType asyncReturnType;\n-        IType syncReturnType;\n+        IType asyncReturnType = PrimitiveType.Void;\n+        IType syncReturnType = PrimitiveType.Void;\n         IType syncReturnWithResponse;\n \n         if (operation.getExtensions() != null && operation.getExtensions().getXmsPageable() != null) {\n@@ -89,19 +89,19 @@ public static ClientMethodMapper getInstance() {\n             }\n             IType listType = itemPropertyOpt.get().getWireType();\n             IType elementType = ((ListType) listType).getElementType();\n-            asyncRestResponseReturnType = GenericType.Mono(GenericType.PagedResponse(elementType));\n-            asyncReturnType = GenericType.PagedFlux(elementType);\n-            syncReturnType = GenericType.PagedIterable(elementType);\n+            asyncRestResponseReturnType = createPagedRestResponseReturnType(elementType);\n+            asyncReturnType = createPagedAsyncReturnType(elementType);\n+            syncReturnType = createPagedSyncReturnType(elementType);\n         } else {\n             asyncRestResponseReturnType = null;\n             IType responseBodyType = SchemaUtil.getOperationResponseType(operation);\n             IType restAPIMethodReturnBodyClientType = responseBodyType.getClientType();\n             if (operation.getResponses().stream().anyMatch(r -> Boolean.TRUE.equals(r.getBinary()))) {\n-                asyncReturnType = GenericType.Flux(ClassType.ByteBuffer);\n+                asyncReturnType = createAsyncBinaryReturnType();\n             } else if (restAPIMethodReturnBodyClientType != PrimitiveType.Void) {\n-                asyncReturnType = GenericType.Mono(restAPIMethodReturnBodyClientType);\n+                asyncReturnType = createAsyncBodyReturnType(restAPIMethodReturnBodyClientType);\n             } else {\n-                asyncReturnType = GenericType.Mono(ClassType.Void);\n+                asyncReturnType = createAsyncVoidReturnType();\n             }\n             if (operation.getResponses().stream().anyMatch(r -> Boolean.TRUE.equals(r.getBinary()))) {\n                 syncReturnType = ClassType.InputStream;\n@@ -113,7 +113,7 @@ public static ClientMethodMapper getInstance() {\n         if (syncReturnType == ClassType.InputStream) {\n             syncReturnWithResponse = ClassType.StreamResponse;\n         } else {\n-            syncReturnWithResponse = GenericType.Response(syncReturnType);\n+            syncReturnWithResponse = createSyncReturnWithResponseType(syncReturnType);\n         }\n \n         for (Request request : operation.getRequests()) {\n@@ -207,7 +207,9 @@ public static ClientMethodMapper getInstance() {\n                     .methodTransformationDetails(methodTransformationDetails)\n                     .methodPageDetails(null);\n \n-            if (operation.getExtensions() != null && operation.getExtensions().getXmsPageable() != null) {\n+            if (operation.getExtensions() != null\n+                    && operation.getExtensions().getXmsPageable() != null\n+                    && shouldGeneratePagingMethods()) {\n                 String pageableItemName = getPageableItemName(operation);\n                 if (pageableItemName != null) {\n                     boolean isNextMethod = operation.getExtensions().getXmsPageable().getNextOperation() == operation;\n@@ -229,9 +231,7 @@ public static ClientMethodMapper getInstance() {\n                     if (!(!settings.getRequiredParameterClientMethods() && settings.isContextClientMethodParameter()\n                             && SyncMethodsGeneration.NONE.equals(settings.getSyncMethods()))) {\n                         methods.add(builder\n-                                .returnValue(new ReturnValue(\n-                                        returnTypeDescription(operation, asyncRestResponseReturnType, syncReturnType),\n-                                        asyncRestResponseReturnType))\n+                                .returnValue(createPagingAsyncSinglePageReturnValue(operation, asyncRestResponseReturnType, syncReturnType))\n                                 .name(proxyMethod.getPagingAsyncSinglePageMethodName())\n                                 .onlyRequiredParameters(false)\n                                 .type(ClientMethodType.PagingAsyncSinglePage)\n@@ -243,17 +243,14 @@ public static ClientMethodMapper getInstance() {\n                         builder.methodVisibility(methodVisibility(ClientMethodType.PagingAsyncSinglePage, true));\n                         addClientMethodWithContext(methods, builder, proxyMethod, parameters,\n                                 ClientMethodType.PagingAsyncSinglePage, proxyMethod.getPagingAsyncSinglePageMethodName(),\n-                                new ReturnValue(returnTypeDescription(operation, asyncRestResponseReturnType, syncReturnType),\n-                                        asyncRestResponseReturnType),\n+                                createPagingAsyncSinglePageReturnValue(operation, asyncRestResponseReturnType, syncReturnType),\n                                 details);\n                     }\n \n                     if (!isNextMethod) {\n                         if (settings.getSyncMethods() != JavaSettings.SyncMethodsGeneration.NONE) {\n                             methods.add(builder\n-                                    .returnValue(\n-                                            new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType),\n-                                                    asyncReturnType))\n+                                    .returnValue(createPagingAsyncReturnValue(operation, asyncReturnType, syncReturnType))\n                                     .name(proxyMethod.getSimpleAsyncMethodName())\n                                     .onlyRequiredParameters(false)\n                                     .type(ClientMethodType.PagingAsync)\n@@ -275,16 +272,15 @@ public static ClientMethodMapper getInstance() {\n                                             pageableItemName,\n                                             nextMethods.stream()\n                                                     .filter(m -> m.getType() == ClientMethodType.PagingAsyncSinglePage)\n-                                                    .filter(m -> m.getMethodParameters().stream().anyMatch(p -> ClassType.Context.equals(p.getClientType()))).findFirst().get(),\n+                                                    .filter(m -> m.getMethodParameters().stream().anyMatch(p -> getContextType().equals(p.getClientType()))).findFirst().get(),\n                                             lroIntermediateType);\n                                 }\n \n                                 addClientMethodWithContext(methods,\n                                         builder.methodVisibility(methodVisibility(ClientMethodType.PagingAsync, true)),\n                                         proxyMethod, parameters,\n                                         ClientMethodType.PagingAsync, proxyMethod.getSimpleAsyncMethodName(),\n-                                        new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType),\n-                                                asyncReturnType),\n+                                        createPagingAsyncReturnValue(operation, asyncReturnType, syncReturnType),\n                                         detailsWithContext);\n                             }\n                         }\n@@ -293,8 +289,7 @@ public static ClientMethodMapper getInstance() {\n                             builder.methodVisibility(VISIBLE);\n \n                             builder\n-                                    .returnValue(new ReturnValue(returnTypeDescription(operation, syncReturnType, syncReturnType),\n-                                            syncReturnType))\n+                                    .returnValue(createPagingSyncReturnValue(operation, syncReturnType))\n                                     .name(proxyMethod.getName())\n                                     .onlyRequiredParameters(false)\n                                     .type(ClientMethodType.PagingSync)\n@@ -322,8 +317,7 @@ public static ClientMethodMapper getInstance() {\n                     && !syncReturnType.equals(ClassType.InputStream)) {         // temporary skip InputStream, no idea how to do this in PollerFlux\n                 // WithResponseAsync, with required and optional parameters\n                 methods.add(builder\n-                        .returnValue(new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(), syncReturnType),\n-                                proxyMethod.getReturnType().getClientType()))\n+                        .returnValue(createSimpleAsyncRestResponseReturnValue(operation, proxyMethod, syncReturnType))\n                         .name(proxyMethod.getSimpleAsyncRestResponseMethodName())\n                         .onlyRequiredParameters(false)\n                         .type(ClientMethodType.SimpleAsyncRestResponse)\n@@ -340,8 +334,7 @@ public static ClientMethodMapper getInstance() {\n                 if (settings.getSyncMethods() != JavaSettings.SyncMethodsGeneration.NONE) {\n                     // begin method async\n                     methods.add(builder\n-                            .returnValue(new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(), syncReturnType),\n-                                    GenericType.PollerFlux(GenericType.PollResult(syncReturnType.asNullable()), syncReturnType.asNullable())))\n+                            .returnValue(createLongRunningBeginAsyncReturnValue(operation, proxyMethod, syncReturnType))\n                             .name(\"begin\" + CodeNamer.toPascalCase(proxyMethod.getSimpleAsyncMethodName()))\n                             .onlyRequiredParameters(false)\n                             .type(ClientMethodType.LongRunningBeginAsync)\n@@ -361,8 +354,7 @@ public static ClientMethodMapper getInstance() {\n \n                     // begin method sync\n                     methods.add(builder\n-                            .returnValue(new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(), syncReturnType),\n-                                    GenericType.SyncPoller(GenericType.PollResult(syncReturnType.asNullable()), syncReturnType.asNullable())))\n+                            .returnValue(createLongRunningBeginSyncReturnValue(operation, proxyMethod, syncReturnType))\n                             .name(\"begin\" + CodeNamer.toPascalCase(proxyMethod.getName()))\n                             .onlyRequiredParameters(false)\n                             .type(ClientMethodType.LongRunningBeginSync)\n@@ -376,8 +368,7 @@ public static ClientMethodMapper getInstance() {\n \n                 if (settings.getSyncMethods() != JavaSettings.SyncMethodsGeneration.NONE) {\n                     methods.add(builder\n-                            .returnValue(new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType),\n-                                    asyncReturnType))\n+                            .returnValue(createLongRunningAsyncReturnValue(operation, asyncReturnType, syncReturnType))\n                             .name(proxyMethod.getSimpleAsyncMethodName())\n                             .onlyRequiredParameters(false)\n                             .type(ClientMethodType.LongRunningAsync)\n@@ -402,8 +393,7 @@ public static ClientMethodMapper getInstance() {\n                     builder.methodVisibility(VISIBLE);\n \n                     methods.add(builder\n-                            .returnValue(new ReturnValue(returnTypeDescription(operation, syncReturnType, syncReturnType),\n-                                    syncReturnType))\n+                            .returnValue(createLongRunningSyncReturnValue(operation, syncReturnType))\n                             .name(proxyMethod.getName())\n                             .onlyRequiredParameters(false)\n                             .type(ClientMethodType.LongRunningSync)\n@@ -427,10 +417,7 @@ public static ClientMethodMapper getInstance() {\n \n                     methods.add(builder\n                         .parameters(parameters) // update builder parameters to include context\n-                        .returnValue(new ReturnValue(\n-                            returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(),\n-                                syncReturnType),\n-                            proxyMethod.getReturnType().getClientType()))\n+                        .returnValue(createSimpleAsyncRestResponseReturnValue(operation, proxyMethod, syncReturnType))\n                         .name(proxyMethod.getSimpleAsyncRestResponseMethodName())\n                         .onlyRequiredParameters(false)\n                         .type(ClientMethodType.SimpleAsyncRestResponse)\n@@ -444,15 +431,13 @@ public static ClientMethodMapper getInstance() {\n                         builder.methodVisibility(methodVisibility(ClientMethodType.SimpleAsyncRestResponse, true)),\n                         proxyMethod, parameters,\n                         ClientMethodType.SimpleAsyncRestResponse, proxyMethod.getSimpleAsyncRestResponseMethodName(),\n-                        new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(),\n-                            syncReturnType), proxyMethod.getReturnType().getClientType()),\n+                        createSimpleAsyncRestResponseReturnValue(operation, proxyMethod, syncReturnType),\n                         null);\n                 }\n \n                 if (settings.getSyncMethods() != JavaSettings.SyncMethodsGeneration.NONE) {\n                     methods.add(builder\n-                            .returnValue(new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType),\n-                                    asyncReturnType))\n+                            .returnValue(createSimpleAsyncReturnValue(operation, asyncReturnType, syncReturnType))\n                             .name(proxyMethod.getSimpleAsyncMethodName())\n                             .onlyRequiredParameters(false)\n                             .type(ClientMethodType.SimpleAsync)\n@@ -480,8 +465,7 @@ public static ClientMethodMapper getInstance() {\n                     builder.methodVisibility(VISIBLE);\n \n                     builder\n-                            .returnValue(new ReturnValue(returnTypeDescription(operation, syncReturnType, syncReturnType),\n-                                    syncReturnType))\n+                            .returnValue(createSimpleSyncReturnValue(operation, syncReturnType))\n                             .name(proxyMethod.getName())\n                             .onlyRequiredParameters(false)\n                             .type(ClientMethodType.SimpleSync)\n@@ -503,8 +487,7 @@ public static ClientMethodMapper getInstance() {\n                         builder.type(ClientMethodType.SimpleSyncRestResponse)\n                                 .onlyRequiredParameters(false)\n                                 .name(proxyMethod.getSimpleRestResponseMethodName())\n-                                .returnValue(new ReturnValue(returnTypeDescription(operation, syncReturnWithResponse,\n-                                        syncReturnWithResponse), syncReturnWithResponse));\n+                                .returnValue(createSimpleSyncRestResponseReturnValue(operation, syncReturnWithResponse));\n                         addClientMethodWithContext(methods, builder, parameters);\n                     }\n                 }\n@@ -514,6 +497,101 @@ public static ClientMethodMapper getInstance() {\n         return methods;\n     }\n \n+    protected IType getContextType() {\n+        return ClassType.Context;\n+    }\n+\n+    protected IType createSyncReturnWithResponseType(IType syncReturnType) {\n+        return GenericType.Response(syncReturnType);\n+    }\n+\n+    protected ReturnValue createSimpleSyncRestResponseReturnValue(Operation operation, IType syncReturnWithResponse) {\n+        return new ReturnValue(returnTypeDescription(operation, syncReturnWithResponse,\n+                syncReturnWithResponse), syncReturnWithResponse);\n+    }\n+\n+    protected ReturnValue createSimpleAsyncRestResponseReturnValue(Operation operation, ProxyMethod proxyMethod, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(), syncReturnType),\n+                proxyMethod.getReturnType().getClientType());\n+    }\n+\n+    protected ReturnValue createSimpleSyncReturnValue(Operation operation, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, syncReturnType, syncReturnType),\n+                syncReturnType);\n+    }\n+\n+    protected ReturnValue createSimpleAsyncReturnValue(Operation operation, IType asyncReturnType, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType),\n+                asyncReturnType);\n+    }\n+\n+    protected ReturnValue createLongRunningSyncReturnValue(Operation operation, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, syncReturnType, syncReturnType),\n+                syncReturnType);\n+    }\n+\n+    protected ReturnValue createLongRunningAsyncReturnValue(Operation operation, IType asyncReturnType, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType),\n+                asyncReturnType);\n+    }\n+\n+    private ReturnValue createLongRunningBeginSyncReturnValue(Operation operation, ProxyMethod proxyMethod, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(), syncReturnType),\n+                GenericType.SyncPoller(GenericType.PollResult(syncReturnType.asNullable()), syncReturnType.asNullable()));\n+    }\n+\n+    protected ReturnValue createLongRunningBeginAsyncReturnValue(Operation operation, ProxyMethod proxyMethod, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, proxyMethod.getReturnType().getClientType(), syncReturnType),\n+                GenericType.PollerFlux(GenericType.PollResult(syncReturnType.asNullable()), syncReturnType.asNullable()));\n+    }\n+\n+    protected ReturnValue createPagingSyncReturnValue(Operation operation, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, syncReturnType, syncReturnType),\n+                syncReturnType);\n+    }\n+\n+    protected ReturnValue createPagingAsyncReturnValue(Operation operation, IType asyncReturnType, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, asyncReturnType, syncReturnType),\n+                asyncReturnType);\n+    }\n+\n+    protected ReturnValue createPagingAsyncSinglePageReturnValue(Operation operation, IType asyncRestResponseReturnType, IType syncReturnType) {\n+        return new ReturnValue(returnTypeDescription(operation, asyncRestResponseReturnType, syncReturnType),\n+                asyncRestResponseReturnType);\n+    }\n+\n+    protected boolean shouldGeneratePagingMethods() {\n+        return true;\n+    }\n+\n+    protected IType createAsyncVoidReturnType() {\n+        return GenericType.Mono(ClassType.Void);\n+    }\n+\n+    protected IType createAsyncBodyReturnType(IType restAPIMethodReturnBodyClientType) {\n+        return GenericType.Mono(restAPIMethodReturnBodyClientType);\n+    }\n+\n+    protected IType createAsyncBinaryReturnType() {\n+        return GenericType.Flux(ClassType.ByteBuffer);\n+    }\n+\n+    protected IType createPagedSyncReturnType(IType elementType) {\n+        return GenericType.PagedIterable(elementType);\n+    }\n+\n+    protected IType createPagedAsyncReturnType(IType elementType) {\n+        return GenericType.PagedFlux(elementType);\n+    }\n+\n+    protected IType createPagedRestResponseReturnType(IType elementType) {\n+        return GenericType.Mono(GenericType.PagedResponse(elementType));\n+    }\n+\n+    protected ClientMethod.Builder getClientMethodBuilder() {\n+        return new ClientMethod.Builder();\n+    }\n+\n     protected static final JavaVisibility NOT_VISIBLE = JavaVisibility.Private;\n     protected static final JavaVisibility VISIBLE = JavaVisibility.Public;\n     protected static final JavaVisibility NOT_GENERATE = null;\n@@ -547,7 +625,7 @@ private void addClientMethodWithContext(List<ClientMethod> methods, Builder buil\n         List<ClientMethodParameter> parameters, ClientMethodType clientMethodType, String proxyMethodName,\n         ReturnValue returnValue, MethodPageDetails details) {\n         List<ClientMethodParameter> withContextParameters = new ArrayList<>(parameters);\n-        withContextParameters.add(CONTEXT_PARAM);\n+        withContextParameters.add(getContextParameter());\n \n         methods.add(builder\n             .parameters(withContextParameters) // update builder parameters to include context\n@@ -562,10 +640,14 @@ private void addClientMethodWithContext(List<ClientMethod> methods, Builder buil\n         builder.parameters(parameters);\n     }\n \n+    protected ClientMethodParameter getContextParameter() {\n+        return CONTEXT_PARAM;\n+    }\n+\n     private void addClientMethodWithContext(List<ClientMethod> methods, Builder builder,\n                                             List<ClientMethodParameter> parameters) {\n         List<ClientMethodParameter> withContextParameters = new ArrayList<>(parameters);\n-        withContextParameters.add(CONTEXT_PARAM);\n+        withContextParameters.add(getContextParameter());\n \n         methods.add(builder\n                 .parameters(withContextParameters) // update builder parameters to include context\n@@ -588,7 +670,7 @@ private static boolean hasNonRequiredParameters(List<ClientMethodParameter> para\n         return parameters.stream().anyMatch(p -> !p.getIsRequired());\n     }\n \n-    private static String returnTypeDescription(Operation operation, IType returnType, IType baseType) {\n+    protected static String returnTypeDescription(Operation operation, IType returnType, IType baseType) {\n         String description = null;\n         if (returnType != PrimitiveType.Void) {\n             if (operation.getLanguage() != null && operation.getLanguage().getDefault() != null) {"
  },
  {
    "sha": "f7835ddb47454c9743ac8a5f35325e2e750ce599",
    "filename": "javagen/src/main/java/com/azure/autorest/mapper/ExceptionMapper.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ExceptionMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ExceptionMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/javagen/src/main/java/com/azure/autorest/mapper/ExceptionMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -48,11 +48,15 @@ protected ClientException buildException(ObjectSchema compositeType, JavaSetting\n                 : settings.getModelsSubpackage();\n         String packageName = settings.getPackage(exceptionSubPackage);\n \n-        ClientException exception = new ClientException.Builder()\n+        ClientException exception = createClientExceptionBuilder()\n                 .packageName(packageName)\n                 .name(methodOperationExceptionTypeName)\n                 .errorName(errorName)\n                 .build();\n         return exception;\n     }\n+\n+    protected ClientException.Builder createClientExceptionBuilder() {\n+        return new ClientException.Builder();\n+    }\n }"
  },
  {
    "sha": "c66baf323ddb343972ef92cd2bf10c501ec40770",
    "filename": "javagen/src/main/java/com/azure/autorest/mapper/MethodGroupMapper.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/MethodGroupMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/MethodGroupMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/javagen/src/main/java/com/azure/autorest/mapper/MethodGroupMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -33,7 +33,7 @@ public MethodGroupClient map(OperationGroup methodGroup) {\n         if (parsed.containsKey(methodGroup)) {\n             return parsed.get(methodGroup);\n         }\n-        MethodGroupClient.Builder builder = new MethodGroupClient.Builder();\n+        MethodGroupClient.Builder builder = createMethodGroupClientBuilder();\n \n         String classBaseName = methodGroup.getLanguage().getJava().getName();\n         builder.classBaseName(classBaseName);\n@@ -56,7 +56,7 @@ public MethodGroupClient map(OperationGroup methodGroup) {\n         }\n         builder.className(className);\n \n-        Proxy.Builder proxyBuilder = new Proxy.Builder();\n+        Proxy.Builder proxyBuilder = createProxyBuilder();\n \n         String restAPIName = CodeNamer.toPascalCase(CodeNamer.getPlural(methodGroup.getLanguage().getJava().getName()));\n         restAPIName += \"Service\";\n@@ -125,6 +125,14 @@ public MethodGroupClient map(OperationGroup methodGroup) {\n         return methodGroupClient;\n     }\n \n+    protected MethodGroupClient.Builder createMethodGroupClientBuilder() {\n+        return new MethodGroupClient.Builder();\n+    }\n+\n+    protected Proxy.Builder createProxyBuilder() {\n+        return new Proxy.Builder();\n+    }\n+\n     protected List<IType> supportedInterfaces(OperationGroup operationGroup, List<ClientMethod> clientMethods) {\n         return Collections.emptyList();\n     }"
  },
  {
    "sha": "66ceed58ba47da697083a52e8fd4e7a1124534d8",
    "filename": "javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -3,7 +3,6 @@\n \n package com.azure.autorest.mapper;\n \n-import com.azure.autorest.extension.base.model.codemodel.AnySchema;\n import com.azure.autorest.extension.base.model.codemodel.ArraySchema;\n import com.azure.autorest.extension.base.model.codemodel.DictionarySchema;\n import com.azure.autorest.extension.base.model.codemodel.Language;\n@@ -48,7 +47,7 @@ public ClientModel map(ObjectSchema compositeType) {\n         String modelName = modelType.getName();\n         ClientModel result = serviceModels.getModel(modelType.getName());\n         if (result == null && !ObjectMapper.isPlainObject(compositeType) && (!settings.isFluent() || !isPredefinedModel(modelType))) {\n-            ClientModel.Builder builder = new ClientModel.Builder()\n+            ClientModel.Builder builder = createModelBuilder()\n                     .name(modelName)\n                     .packageName(modelType.getPackage());\n \n@@ -228,6 +227,10 @@ public ClientModel map(ObjectSchema compositeType) {\n         return result;\n     }\n \n+    protected ClientModel.Builder createModelBuilder() {\n+        return new ClientModel.Builder();\n+    }\n+\n     private static boolean hasFlattenedProperty(ObjectSchema compositeType, Collection<ObjectSchema> parentsNeedFlatten) {\n         boolean ret = compositeType.getProperties().stream()\n                 .anyMatch(p -> p.getFlattenedNames() != null && !p.getFlattenedNames().isEmpty());"
  },
  {
    "sha": "90f9ccc4e450f2625117252eae7263d93ad35dfc",
    "filename": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java",
    "status": "modified",
    "additions": 44,
    "deletions": 12,
    "changes": 56,
    "blob_url": "https://github.com/Azure/autorest.java/blob/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java",
    "raw_url": "https://github.com/Azure/autorest.java/raw/6656f40d1264c540fd5f39f458d9aa40f71ad242/javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java",
    "contents_url": "https://api.github.com/repos/Azure/autorest.java/contents/javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java?ref=6656f40d1264c540fd5f39f458d9aa40f71ad242",
    "patch": "@@ -49,7 +49,7 @@ public static ProxyMethodMapper getInstance() {\n         JavaSettings settings = JavaSettings.getInstance();\n         Map<Request, ProxyMethod> result = new LinkedHashMap<>();\n \n-        ProxyMethod.Builder builder = new ProxyMethod.Builder()\n+        ProxyMethod.Builder builder = createProxyMethodBuilder()\n                 .description(operation.getDescription())\n                 .name(operation.getLanguage().getJava().getName())\n                 .isResumable(false);\n@@ -63,24 +63,21 @@ public static ProxyMethodMapper getInstance() {\n \n         IType responseBodyType = SchemaUtil.getOperationResponseType(operation);\n \n-        IType returnType;\n         if (operation.getExtensions() != null && operation.getExtensions().isXmsLongRunningOperation() && settings.isFluent()\n                 && (operation.getExtensions().getXmsPageable() == null || !(operation.getExtensions().getXmsPageable().getNextOperation() == operation))\n                 && operation.getResponses().stream().noneMatch(r -> Boolean.TRUE.equals(r.getBinary()))) {  // temporary skip InputStream, no idea how to do this in PollerFlux\n-            returnType = GenericType.Response(GenericType.FluxByteBuffer);    // raw response for LRO\n-            builder.returnType(GenericType.Mono(returnType));\n+            builder.returnType(createBinaryContentAsyncReturnType());\n         } else if (operation.getResponses().stream().anyMatch(r -> Boolean.TRUE.equals(r.getBinary()))) {\n             // BinaryResponse\n-            IType singleValueType = ClassType.StreamResponse;\n-            builder.returnType(GenericType.Mono(singleValueType));\n+            builder.returnType(createStreamContentAsyncReturnType());\n         } else if (operation.getResponses().stream()\n                 .filter(r -> r.getProtocol() != null && r.getProtocol().getHttp() != null && r.getProtocol().getHttp().getHeaders() != null)\n                 .flatMap(r -> r.getProtocol().getHttp().getHeaders().stream().map(Header::getSchema))\n                 .anyMatch(Objects::nonNull)) {\n             // SchemaResponse\n             // method with schema in headers would require a ClientResponse\n             ClassType clientResponseClassType = ClientMapper.getClientResponseClassType(operation, settings);\n-            builder.returnType(GenericType.Mono(clientResponseClassType));\n+            builder.returnType(createAsyncResponseReturnType(clientResponseClassType));\n         } else {\n             IType singleValueType;\n             if (responseBodyType.equals(GenericType.FluxByteBuffer)) {\n@@ -90,7 +87,7 @@ public static ProxyMethodMapper getInstance() {\n             } else {\n                 singleValueType = GenericType.Response(responseBodyType);\n             }\n-            builder.returnType(GenericType.Mono(singleValueType));\n+            builder.returnType(createSingleValueAsyncReturnType(singleValueType));\n         }\n \n         buildUnexpectedResponseExceptionTypes(builder, operation, expectedStatusCodes, settings);\n@@ -144,10 +141,11 @@ public static ProxyMethodMapper getInstance() {\n                 parameters.add(proxyMethodParameter);\n             }\n             if (settings.getAddContextParameter()) {\n+                ClassType contextClassType = getContextClass();\n                 ProxyMethodParameter contextParameter = new ProxyMethodParameter.Builder()\n                         .description(\"The context to associate with this operation.\")\n-                        .wireType(ClassType.Context)\n-                        .clientType(ClassType.Context)\n+                        .wireType(contextClassType)\n+                        .clientType(contextClassType)\n                         .name(\"context\")\n                         .requestParameterLocation(RequestParameterLocation.None)\n                         .requestParameterName(\"context\")\n@@ -159,7 +157,8 @@ public static ProxyMethodMapper getInstance() {\n                         .parameterReference(\"context\")\n                         .build();\n                 parameters.add(contextParameter);\n-            }    \n+            }\n+            appendCallbackParameter(parameters, responseBodyType);\n             builder.parameters(parameters);\n \n             ProxyMethod proxyMethod = builder.build();\n@@ -170,6 +169,35 @@ public static ProxyMethodMapper getInstance() {\n         return result;\n     }\n \n+    protected ClassType getContextClass() {\n+        return ClassType.Context;\n+    }\n+\n+    protected void appendCallbackParameter(java.util.List<ProxyMethodParameter> parameters, IType responseBodyType) {\n+    }\n+\n+    protected IType createSingleValueAsyncReturnType(IType singleValueType) {\n+        return GenericType.Mono(singleValueType);\n+    }\n+\n+    protected IType createAsyncResponseReturnType(ClassType clientResponseClassType) {\n+        return GenericType.Mono(clientResponseClassType);\n+    }\n+\n+    protected IType createStreamContentAsyncReturnType() {\n+        IType singleValueType = ClassType.StreamResponse;\n+        return GenericType.Mono(singleValueType);\n+    }\n+\n+    protected IType createBinaryContentAsyncReturnType() {\n+        IType returnType = GenericType.Response(GenericType.FluxByteBuffer);    // raw response for LRO\n+        return GenericType.Mono(returnType);\n+    }\n+\n+    protected ProxyMethod.Builder createProxyMethodBuilder() {\n+        return new ProxyMethod.Builder();\n+    }\n+\n     /**\n      * Extension for configure on unexpected response exception types to builder.\n      *\n@@ -205,7 +233,11 @@ protected void buildUnexpectedResponseExceptionTypes(ProxyMethod.Builder builder\n                     .name(exceptionName)\n                     .build());\n         } else {\n-            builder.unexpectedResponseExceptionType(ClassType.HttpResponseException);\n+            builder.unexpectedResponseExceptionType(getHttpResponseExceptionType());\n         }\n     }\n+\n+    protected ClassType getHttpResponseExceptionType() {\n+        return ClassType.HttpResponseException;\n+    }\n }"
  }
]
