[
  {
    "sha": "f39b997d3c5d1de89ee10da8cb1c903d274ff8c3",
    "filename": "Example/index.js",
    "status": "modified",
    "additions": 21,
    "deletions": 1,
    "changes": 22,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/Example/index.js",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/Example/index.js",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/Example/index.js?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -35,7 +35,27 @@ const Example = (props) => {\n       await _requestAudioPermission();\n       await _requestCameraPermission();\n     }\n-    twilioVideo.current.connect({ accessToken: token, enableNetworkQualityReporting: true});\n+    twilioVideo.current.connect({ roomName: \"test_room\", accessToken: token, \n+        enableAudio: true,\n+        enableVideo: true,\n+        enableNetworkQualityReporting: false,\n+        dominantSpeakerEnabled: false, \n+        encodingParameters: {\n+          audioBitrate: 16, // Ideal bitrate for speech\n+          videoBitrate: 0, // Use default video bitrate\n+        },\n+        bandwidthProfileOptions: {\n+          mode: \"COLLABORATION\",\n+          maxSubscriptionBitrate: 2500,\n+        }\n+      })\n+\n+    // Enabled local camera and specify the resolution and framerate (only applicable for Android)\n+    twilioVideo.current.setLocalVideoEnabled(true, {\n+      maxDimensions: \"640x480\",\n+      maxFPS: 25\n+    })\n+\n     setStatus(\"connecting\");\n   };\n "
  },
  {
    "sha": "f71ec2e92124d52f49fcd7654b920d8b4afa07d4",
    "filename": "Example/package.json",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/Example/package.json",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/Example/package.json",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/Example/package.json?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -18,6 +18,9 @@\n     \"react-native-twilio-video-webrtc\": \"file:../\",\n     \"react-test-renderer\": \"16.8.3\"\n   },\n+  \"resolutions\": {\n+    \"graceful-fs\": \"^4.2.4\"\n+  },\n   \"jest\": {\n     \"preset\": \"react-native\"\n   }"
  },
  {
    "sha": "4e155a0888144e3622d047cd3cb8375f6301b9f4",
    "filename": "android/src/main/java/com/twiliorn/library/CustomTwilioVideoView.java",
    "status": "modified",
    "additions": 264,
    "deletions": 17,
    "changes": 281,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/android/src/main/java/com/twiliorn/library/CustomTwilioVideoView.java",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/android/src/main/java/com/twiliorn/library/CustomTwilioVideoView.java",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/android/src/main/java/com/twiliorn/library/CustomTwilioVideoView.java?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -22,22 +22,30 @@\n import android.os.Build;\n import android.os.Handler;\n import android.os.HandlerThread;\n-import android.support.annotation.NonNull;\n-import android.support.annotation.StringDef;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringDef;\n+\n import android.util.Log;\n import android.view.View;\n \n import com.facebook.react.bridge.LifecycleEventListener;\n+import com.facebook.react.bridge.ReactContext;\n+import com.facebook.react.bridge.ReadableMap;\n import com.facebook.react.bridge.WritableArray;\n import com.facebook.react.bridge.WritableMap;\n import com.facebook.react.bridge.WritableNativeArray;\n import com.facebook.react.bridge.WritableNativeMap;\n import com.facebook.react.uimanager.ThemedReactContext;\n import com.facebook.react.uimanager.events.RCTEventEmitter;\n import com.twilio.video.AudioTrackPublication;\n+import com.twilio.video.BandwidthProfileMode;\n+import com.twilio.video.BandwidthProfileOptions;\n import com.twilio.video.BaseTrackStats;\n import com.twilio.video.CameraCapturer;\n import com.twilio.video.ConnectOptions;\n+import com.twilio.video.EncodingParameters;\n+import com.twilio.video.H264Codec;\n import com.twilio.video.LocalAudioTrack;\n import com.twilio.video.LocalAudioTrackPublication;\n import com.twilio.video.LocalAudioTrackStats;\n@@ -66,9 +74,12 @@\n import com.twilio.video.Room.State;\n import com.twilio.video.StatsListener;\n import com.twilio.video.StatsReport;\n+import com.twilio.video.TrackPriority;\n import com.twilio.video.TrackPublication;\n+import com.twilio.video.TrackSwitchOffMode;\n import com.twilio.video.TwilioException;\n import com.twilio.video.Video;\n+import com.twilio.video.VideoBandwidthProfileOptions;\n import com.twilio.video.VideoConstraints;\n import com.twilio.video.VideoDimensions;\n \n@@ -105,10 +116,22 @@\n public class CustomTwilioVideoView extends View implements LifecycleEventListener, AudioManager.OnAudioFocusChangeListener {\n     private static final String TAG = \"CustomTwilioVideoView\";\n     private static final String DATA_TRACK_MESSAGE_THREAD_NAME = \"DataTrackMessages\";\n-    private boolean enableRemoteAudio = false;\n+\n+    private static final VideoDimensions DEFAULT_MAX_CAPTURE_RESOLUTION = VideoDimensions.CIF_VIDEO_DIMENSIONS;\n+    private static final int DEFAULT_MAX_CAPTURE_FPS = 25;\n+\n     private boolean enableNetworkQualityReporting = false;\n     private boolean isVideoEnabled = false;\n     private boolean dominantSpeakerEnabled = false;\n+    private boolean enableH264Codec = false;\n+\n+    private int audioBitrate = -1;\n+    private int videoBitrate = -1;\n+\n+    private BandwidthProfileOptions bandwidthProfile;\n+\n+    private VideoDimensions maxCaptureDimensions = CustomTwilioVideoView.DEFAULT_MAX_CAPTURE_RESOLUTION;\n+    private int maxCaptureFPS  = CustomTwilioVideoView.DEFAULT_MAX_CAPTURE_FPS;\n \n     @Retention(RetentionPolicy.SOURCE)\n     @StringDef({Events.ON_CAMERA_SWITCHED,\n@@ -234,11 +257,12 @@ public CustomTwilioVideoView(ThemedReactContext context) {\n     // ===== SETUP =================================================================================\n \n     private VideoConstraints buildVideoConstraints() {\n+        Log.d(TAG,\"Setting camera constraints. Max Dimensions: \"\n+            + this.maxCaptureDimensions + \" - Max FPS: \" + this.maxCaptureFPS);\n+\n         return new VideoConstraints.Builder()\n-                .minVideoDimensions(VideoDimensions.CIF_VIDEO_DIMENSIONS)\n-                .maxVideoDimensions(VideoDimensions.CIF_VIDEO_DIMENSIONS)\n-                .minFps(5)\n-                .maxFps(15)\n+                .maxVideoDimensions(this.maxCaptureDimensions)\n+                .maxFps(this.maxCaptureFPS)\n                 .build();\n     }\n \n@@ -391,26 +415,188 @@ public void releaseResource() {\n \n     public void connectToRoomWrapper(\n             String roomName, String accessToken, boolean enableAudio, boolean enableVideo,\n-            boolean enableRemoteAudio, boolean enableNetworkQualityReporting, boolean dominantSpeakerEnabled) {\n+            ReadableMap encodingParameters, boolean enableNetworkQualityReporting, boolean dominantSpeakerEnabled,\n+            ReadableMap bandwidthProfileOptions) {\n         this.roomName = roomName;\n         this.accessToken = accessToken;\n-        this.enableRemoteAudio = enableAudio;\n         this.enableNetworkQualityReporting = enableNetworkQualityReporting;\n         this.dominantSpeakerEnabled = dominantSpeakerEnabled;\n \n+        if (encodingParameters.hasKey(\"enableH264Codec\")) {\n+            this.enableH264Codec = encodingParameters.getBoolean(\"enableH264Codec\");\n+        }\n+\n+        if (encodingParameters.hasKey(\"audioBitrate\")) {\n+            this.audioBitrate = encodingParameters.getInt(\"audioBitrate\");\n+        }\n+\n+        if (encodingParameters.hasKey(\"videoBitrate\")) {\n+            this.videoBitrate = encodingParameters.getInt(\"videoBitrate\");\n+        }\n+\n+        this.bandwidthProfile = prepareBandwidthProfile(bandwidthProfileOptions);\n+\n         // Share your microphone\n         localAudioTrack = LocalAudioTrack.create(getContext(), enableAudio);\n \n         if (cameraCapturer == null) {\n-            boolean createVideoStatus = createLocalVideo(enableVideo);\n-            if (!createVideoStatus) {\n-                // No need to connect to room if video creation failed\n-                return;\n+                boolean createVideoStatus = createLocalVideo(enableVideo);\n+                if (!createVideoStatus) {\n+                    // No need to connect to room if video creation failed\n+                    return;\n+            }\n         }\n-    }\n+\n         connectToRoom(enableAudio);\n     }\n \n+    // Functions to parse the bandwidth profile map\n+    private TrackPriority parsePriorityString(@Nullable String priority) {\n+        if (priority != null && !priority.trim().isEmpty()) {\n+            if (priority.toUpperCase().equals(\"LOW\")) {\n+                return TrackPriority.LOW;\n+            } else if (priority.toUpperCase().equals(\"STANDARD\")) {\n+                return TrackPriority.STANDARD;\n+            } else if (priority.toUpperCase().equals(\"HIGH\")) {\n+                return TrackPriority.HIGH;\n+            } else if (priority.toUpperCase().equals(\"NULL\")) {\n+                return null;\n+            } else {\n+                Log.w(TAG, \"Unknown priority string\" + priority);\n+                return null;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    private VideoDimensions parseDimensionsString(@Nullable String dimensions) {\n+        if (dimensions != null && !dimensions.trim().isEmpty()) {\n+            String[] dimensions_array = dimensions.split(\"x\");\n+\n+            // There can only be 2 items for a correct <width>x<height> string\n+            if (dimensions_array.length != 2) {\n+                return null;\n+            }\n+\n+            int w = Integer.parseInt(dimensions_array[0]);\n+            int h = Integer.parseInt(dimensions_array[1]);\n+\n+            return new VideoDimensions(w,h);\n+        }\n+\n+        return null;\n+    }\n+\n+    private BandwidthProfileOptions prepareBandwidthProfile(ReadableMap options) {\n+\n+        BandwidthProfileMode mode = null;\n+        TrackSwitchOffMode trackSwitchOffMode = null;\n+        @Nullable Long maxTracks = null;\n+        @Nullable Long maxSubscriptionBitrate = null;\n+        TrackPriority dominantSpeakerPriority = null;\n+        Map<TrackPriority, VideoDimensions> renderDimensions = new HashMap<>();\n+\n+        if (options.hasKey(\"mode\")) {\n+            String modeString = options.getString(\"mode\");\n+\n+            // Parse mode of the current call\n+            if (modeString != null) {\n+                if (modeString.toUpperCase().equals(\"GRID\")) {\n+                    mode = BandwidthProfileMode.GRID;\n+                } else if (modeString.toUpperCase().equals(\"COLLABORATION\")) {\n+                    mode = BandwidthProfileMode.COLLABORATION;\n+                } else if (modeString.toUpperCase().equals(\"PRESENTATION\")) {\n+                    mode = BandwidthProfileMode.PRESENTATION;\n+                } else {\n+                    Log.w(TAG, \"Unknown Bandwidth Profile Mode\" + modeString);\n+                }\n+            }\n+        }\n+\n+        if (options.hasKey(\"trackSwitchOffMode\")) {\n+            String trackSwitchOffModeString = options.getString(\"trackSwitchOffMode\");\n+\n+            // Parse mode of the current call\n+            if (trackSwitchOffModeString != null) {\n+                if (trackSwitchOffModeString.toUpperCase().equals(\"DISABLED\")) {\n+                    trackSwitchOffMode = TrackSwitchOffMode.DISABLED;\n+                } else if (trackSwitchOffModeString.toUpperCase().equals(\"PREDICTED\")) {\n+                    trackSwitchOffMode = TrackSwitchOffMode.PREDICTED;\n+                } else if (trackSwitchOffModeString.toUpperCase().equals(\"DETECTED\")) {\n+                    trackSwitchOffMode = TrackSwitchOffMode.DETECTED;\n+                } else {\n+                    Log.w(TAG, \"Unknown Track Switch Off Mode\" + trackSwitchOffModeString);\n+                }\n+            }\n+        }\n+\n+        // Parse max tracks to enabled during a call\n+        if (options.hasKey(\"maxTracks\")) {\n+            int maxTracksAsInt = options.getInt(\"maxTracks\");\n+            if (maxTracksAsInt > 0) {\n+                maxTracks = (long) maxTracksAsInt;\n+            }\n+        }\n+\n+        // Parse max subscription bit rate\n+        if (options.hasKey(\"maxSubscriptionBitrate\")) {\n+            int maxSubscriptionBitrateAsInt = options.getInt(\"maxSubscriptionBitrate\");\n+            if (maxSubscriptionBitrateAsInt > 0) {\n+                maxSubscriptionBitrate = (long) maxSubscriptionBitrateAsInt;\n+            }\n+        }\n+\n+        // Parse priority for dominant speaker\n+        if (options.hasKey(\"dominantSpeakerPriority\")) {\n+            dominantSpeakerPriority = parsePriorityString(options.getString(\"dominantSpeakerPriority\"));\n+        }\n+\n+        // Parse Render Dimensions\n+        if (options.hasKey(\"renderDimensions\")) {\n+            ReadableMap renderDimensionsMap = options.getMap(\"renderDimensions\");\n+            if (renderDimensionsMap != null) {\n+                if (renderDimensionsMap.hasKey(\"low\")) {\n+                    VideoDimensions dimensions = parseDimensionsString(renderDimensionsMap.getString(\"low\"));\n+                    if (dimensions != null) {\n+                        renderDimensions.put(TrackPriority.LOW, dimensions);\n+                    }\n+                }\n+\n+                if (renderDimensionsMap.hasKey(\"standard\")) {\n+                    VideoDimensions dimensions = parseDimensionsString(renderDimensionsMap.getString(\"standard\"));\n+                    if (dimensions != null) {\n+                        renderDimensions.put(TrackPriority.STANDARD, dimensions);\n+                    }\n+                }\n+\n+                if (renderDimensionsMap.hasKey(\"high\")) {\n+                    VideoDimensions dimensions = parseDimensionsString(renderDimensionsMap.getString(\"high\"));\n+                    if (dimensions != null) {\n+                        renderDimensions.put(TrackPriority.HIGH, dimensions);\n+                    }\n+                }\n+            }\n+        }\n+\n+        Log.d(TAG, \"BandwidthProfile - mode: \" + mode);\n+        Log.d(TAG, \"BandwidthProfile - maxTracks: \" + maxTracks);\n+        Log.d(TAG, \"BandwidthProfile - dominantSpeakerPriority: \" + dominantSpeakerPriority);\n+        Log.d(TAG, \"BandwidthProfile - renderDimensions: \" + renderDimensions);\n+        Log.d(TAG, \"BandwidthProfile - trackSwitchOffMode: \" + trackSwitchOffMode);\n+\n+        VideoBandwidthProfileOptions videoBandwidthProfileOptions = new VideoBandwidthProfileOptions.Builder()\n+                .mode(mode)\n+                .maxTracks(maxTracks)\n+                .dominantSpeakerPriority(dominantSpeakerPriority)\n+                .maxSubscriptionBitrate(maxSubscriptionBitrate)\n+                .renderDimensions(renderDimensions)\n+                .trackSwitchOffMode(trackSwitchOffMode)\n+                .build();\n+\n+        return new BandwidthProfileOptions(videoBandwidthProfileOptions);\n+    }\n+\n     public void connectToRoom(boolean enableAudio) {\n         /*\n          * Create a VideoClient allowing you to connect to a Room\n@@ -445,6 +631,25 @@ public void connectToRoom(boolean enableAudio) {\n                      NetworkQualityVerbosity.NETWORK_QUALITY_VERBOSITY_MINIMAL));\n          }\n \n+         // If we have specified bit rates then use them\n+        if (this.audioBitrate >= 0 && this.videoBitrate >= 0) {\n+            connectOptionsBuilder.encodingParameters(new EncodingParameters(this.audioBitrate, this.videoBitrate));\n+            Log.d(TAG, \"Setting max audio rate\" + String.valueOf(this.audioBitrate) + \" and max video rate: \" + String.valueOf(this.videoBitrate));\n+        } else {\n+            // If we have specified only 1 of the bit rate values\n+            if (this.audioBitrate >= 0 || this.videoBitrate >= 0) {\n+                // Then warn the user that we are ignoring the value\n+                Log.w(TAG, \"Ignoring audio or video bitrate as only 1 of them is defined. Audio: \" + String.valueOf(this.audioBitrate) + \" Video:\" + String.valueOf(this.videoBitrate));\n+            }\n+        }\n+\n+         if (this.enableH264Codec) {\n+             connectOptionsBuilder.preferVideoCodecs(Collections.singletonList(new H264Codec()));\n+             Log.d(TAG, \"Preferring H264 Codec\");\n+         }\n+\n+        connectOptionsBuilder.bandwidthProfile(this.bandwidthProfile);\n+\n         room = Video.connect(getContext(), connectOptionsBuilder.build(), roomListener());\n     }\n \n@@ -565,8 +770,35 @@ public void switchCamera() {\n         }\n     }\n \n-    public void toggleVideo(boolean enabled) {\n-      isVideoEnabled = enabled;\n+    public void toggleVideo(boolean enabled, ReadableMap cameraSettings) {\n+\n+        if (cameraSettings != null) {\n+            if (cameraSettings.hasKey(\"maxDimensions\")) {\n+                this.maxCaptureDimensions = parseDimensionsString(cameraSettings.getString(\"maxDimensions\"));\n+            }\n+\n+            if (cameraSettings.hasKey(\"maxFPS\")) {\n+                this.maxCaptureFPS = cameraSettings.getInt(\"maxFPS\");\n+            }\n+        }\n+\n+        if (this.maxCaptureDimensions == null) {\n+            this.maxCaptureDimensions = CustomTwilioVideoView.DEFAULT_MAX_CAPTURE_RESOLUTION;\n+        }\n+\n+        if (this.maxCaptureFPS < 1) {\n+            this.maxCaptureFPS = CustomTwilioVideoView.DEFAULT_MAX_CAPTURE_FPS;;\n+        }\n+\n+        if (enabled && localVideoTrack == null) {\n+            createLocalVideo(enabled);\n+            if (localParticipant != null) {\n+                localParticipant.publishTrack(localVideoTrack);\n+            }\n+        }\n+        \n+        isVideoEnabled = enabled;\n+\n         if (localVideoTrack != null) {\n             localVideoTrack.enable(enabled);\n \n@@ -616,6 +848,22 @@ public void toggleRemoteAudio(boolean enabled) {\n         }\n     }\n \n+    public void setTrackPriority(String trackSid, String trackPriorityString) {\n+        TrackPriority priority = this.parsePriorityString(trackPriorityString);\n+\n+        for (RemoteParticipant participant : room.getRemoteParticipants()) {\n+            for (RemoteVideoTrackPublication publication : participant.getRemoteVideoTracks()) {\n+                RemoteVideoTrack track = publication.getRemoteVideoTrack();\n+                if (track == null) {\n+                    continue;\n+                }\n+                if (publication.getTrackSid().equals(trackSid)) {\n+                    track.setPriority(priority);\n+                }\n+            }\n+        }\n+    }\n+\n     public void publishLocalVideo(boolean enabled) {\n         if (localParticipant != null && localVideoTrack != null) {\n             if (enabled) {\n@@ -912,7 +1160,6 @@ private void addRemoteDataTrack(RemoteParticipant remoteParticipant, RemoteDataT\n         return new RemoteParticipant.Listener() {\n             @Override\n             public void onAudioTrackSubscribed(RemoteParticipant participant, RemoteAudioTrackPublication publication, RemoteAudioTrack audioTrack) {\n-              audioTrack.enablePlayback(enableRemoteAudio);\n               WritableMap event = buildParticipantVideoEvent(participant, publication);\n               pushEvent(CustomTwilioVideoView.this, ON_PARTICIPANT_ADDED_AUDIO_TRACK, event);\n             }"
  },
  {
    "sha": "a0cad3f775bb4c0b55b06fe0008e75ca6691df03",
    "filename": "android/src/main/java/com/twiliorn/library/CustomTwilioVideoViewManager.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/android/src/main/java/com/twiliorn/library/CustomTwilioVideoViewManager.java",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/android/src/main/java/com/twiliorn/library/CustomTwilioVideoViewManager.java",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/android/src/main/java/com/twiliorn/library/CustomTwilioVideoViewManager.java?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -11,6 +11,7 @@\n import android.support.annotation.Nullable;\n \n import com.facebook.react.bridge.ReadableArray;\n+import com.facebook.react.bridge.ReadableMap;\n import com.facebook.react.common.MapBuilder;\n import com.facebook.react.uimanager.SimpleViewManager;\n import com.facebook.react.uimanager.ThemedReactContext;\n@@ -59,6 +60,7 @@\n     private static final int SEND_STRING = 12;\n     private static final int PUBLISH_VIDEO = 13;\n     private static final int PUBLISH_AUDIO = 14;\n+    private static final int SET_TRACK_PRIORITY = 15;\n \n     @Override\n     public String getName() {\n@@ -78,10 +80,14 @@ public void receiveCommand(CustomTwilioVideoView view, int commandId, @Nullable\n                 String accessToken = args.getString(1);\n                 boolean enableAudio = args.getBoolean(2);\n                 boolean enableVideo = args.getBoolean(3);\n-                boolean enableRemoteAudio = args.getBoolean(4);\n+                ReadableMap encodingParameters = args.getMap(4);\n                 boolean enableNetworkQualityReporting = args.getBoolean(5);\n                 boolean dominantSpeakerEnabled = args.getBoolean(6);\n-                view.connectToRoomWrapper(roomName, accessToken, enableAudio, enableVideo, enableRemoteAudio, enableNetworkQualityReporting, dominantSpeakerEnabled);\n+                ReadableMap bandwidthProfileOptions = args.getMap(7);\n+                view.connectToRoomWrapper(roomName, accessToken\n+                    , enableAudio, enableVideo, encodingParameters\n+                    , enableNetworkQualityReporting, dominantSpeakerEnabled\n+                    , bandwidthProfileOptions);\n                 break;\n             case DISCONNECT:\n                 view.disconnect();\n@@ -91,7 +97,8 @@ public void receiveCommand(CustomTwilioVideoView view, int commandId, @Nullable\n                 break;\n             case TOGGLE_VIDEO:\n                 Boolean videoEnabled = args.getBoolean(0);\n-                view.toggleVideo(videoEnabled);\n+                ReadableMap cameraSettings = args.getMap(1);\n+                view.toggleVideo(videoEnabled, cameraSettings);\n                 break;\n             case TOGGLE_SOUND:\n                 Boolean audioEnabled = args.getBoolean(0);\n@@ -127,6 +134,11 @@ public void receiveCommand(CustomTwilioVideoView view, int commandId, @Nullable\n             case PUBLISH_AUDIO:\n                 view.publishLocalAudio(args.getBoolean(0));\n                 break;\n+            case SET_TRACK_PRIORITY:\n+                String trackSid = args.getString(0);\n+                String trackPriorityString = args.getString(1);\n+                view.setTrackPriority(trackSid, trackPriorityString);\n+                break;\n         }\n     }\n \n@@ -184,6 +196,7 @@ public Map getExportedCustomDirectEventTypeConstants() {\n                 .put(\"toggleRemoteSound\", TOGGLE_REMOTE_SOUND)\n                 .put(\"toggleBluetoothHeadset\", TOGGLE_BLUETOOTH_HEADSET)\n                 .put(\"sendString\", SEND_STRING)\n+                .put(\"setTrackPriority\", SET_TRACK_PRIORITY)\n                 .build();\n     }\n }"
  },
  {
    "sha": "90681faa2804ee0126c46dafa34076e687866fa6",
    "filename": "index.d.ts",
    "status": "modified",
    "additions": 43,
    "deletions": 12,
    "changes": 55,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/index.d.ts",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/index.d.ts",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/index.d.ts?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -94,7 +94,34 @@ declare module \"react-native-twilio-video-webrtc\" {\n     ref?: React.Ref<any>;\n   };\n \n-  type iOSConnectParams = {\n+  export type BandwidthProfileMode = \"GRID\" | \"COLLABORATION\" | \"PRESENTATION\";\n+\n+  export type TrackPriority = \"LOW\" | \"STANDARD\" | \"HIGH\" | \"NULL\";\n+\n+  export type TrackSwitchOffMode = \"DISABLED\" | \"PREDICTED\" | \"DETECTED\";\n+\n+  export type CameraSettings = {\n+    maxDimensions: string;\n+    maxFPS: number;\n+  };\n+\n+  // Dimensions are provided in the string in the format of <width>x<height>\n+  export type RenderDimensions = {\n+    \"low\"?: string,\n+    \"standard\"?: string,\n+    \"high\"?: string,\n+  }\n+\n+  export type BandwidthProfileOptions = {\n+    mode?: BandwidthProfileMode\n+    maxTracks?: number,\n+    maxSubscriptionBitrate?: number,\n+    dominantSpeakerPriority?: TrackPriority,\n+    renderDimensions?: RenderDimensions,\n+    trackSwitchOffMode?: TrackSwitchOffMode,\n+  }\n+\n+  type ConnectParams = {\n     accessToken: string;\n     roomName?: string;\n     enableAudio?: boolean;\n@@ -106,23 +133,16 @@ declare module \"react-native-twilio-video-webrtc\" {\n       videoBitrate?: number;\n     };\n     enableNetworkQualityReporting?: boolean;\n-  };\n-\n-  type androidConnectParams = {\n-    roomName?: string;\n-    accessToken: string;\n-    enableAudio?: boolean;\n-    enableVideo?: boolean;\n-    enableRemoteAudio?: boolean;\n-    enableNetworkQualityReporting?: boolean;\n+    dominantSpeakerEnabled?: boolean;\n+    bandwidthProfileOptions?: BandwidthProfileOptions;\n   };\n \n   class TwilioVideo extends React.Component<TwilioVideoProps> {\n-    setLocalVideoEnabled: (enabled: boolean) => Promise<boolean>;\n+    setLocalVideoEnabled: (enabled: boolean, cameraSettings?: CameraSettings) => Promise<boolean>;\n     setLocalAudioEnabled: (enabled: boolean) => Promise<boolean>;\n     setRemoteAudioEnabled: (enabled: boolean) => Promise<boolean>;\n     setBluetoothHeadsetConnected: (enabled: boolean) => Promise<boolean>;\n-    connect: (options: iOSConnectParams | androidConnectParams) => void;\n+    connect: (options: ConnectParams) => void;\n     disconnect: () => void;\n     flipCamera: () => void;\n     toggleSoundSetup: (speaker: boolean) => void;\n@@ -132,6 +152,7 @@ declare module \"react-native-twilio-video-webrtc\" {\n     publishLocalVideo: () => void;\n     unpublishLocalVideo: () => void;\n     sendString: (message: string) => void;\n+    setTrackPriority: (trackSid: string, trackPriority: TrackPriority) => void;\n   }\n \n   class TwilioVideoLocalView extends React.Component<\n@@ -143,4 +164,14 @@ declare module \"react-native-twilio-video-webrtc\" {\n   > {}\n \n   export { TwilioVideoLocalView, TwilioVideoParticipantView, TwilioVideo };\n+\n+  export class TwilioStereoTonePlayer {\n+      preload: (filename: string) => Promise<boolean>;\n+      play: (filename: string, isLooping: boolean, volume: number, playbackSpeed: number) => Promise<void>;\n+      pause: () => void;\n+      setVolume: (volume: number) => void;\n+      setPlaybackSpeed: (speed: number) => void;\n+      release: (filename: string) => void;\n+      terminate: () => void;\n+  }\n }"
  },
  {
    "sha": "a2b7a71dcb70ad61b075f66e8c717ceeacab3ffd",
    "filename": "ios/RCTTWVideoModule.m",
    "status": "modified",
    "additions": 170,
    "deletions": 11,
    "changes": 181,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/ios/RCTTWVideoModule.m",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/ios/RCTTWVideoModule.m",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/ios/RCTTWVideoModule.m?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -36,11 +36,8 @@\n static NSString* statsReceived                = @\"statsReceived\";\n static NSString* networkQualityLevelsChanged  = @\"networkQualityLevelsChanged\";\n \n-static const CMVideoDimensions kRCTTWVideoAppCameraSourceDimensions = (CMVideoDimensions){900, 720};\n \n-static const int32_t kRCTTWVideoCameraSourceFrameRate = 15;\n-\n-TVIVideoFormat *RCTTWVideoModuleCameraSourceSelectVideoFormatBySize(AVCaptureDevice *device, CMVideoDimensions targetSize) {\n+TVIVideoFormat *RCTTWVideoModuleCameraSourceSelectVideoFormatBySize(AVCaptureDevice *device, CMVideoDimensions targetSize, NSUInteger targetFps) {\n     TVIVideoFormat *selectedFormat = nil;\n     // Ordered from smallest to largest.\n     NSOrderedSet<TVIVideoFormat *> *formats = [TVICameraSource supportedFormatsForDevice:device];\n@@ -49,11 +46,14 @@\n         if (format.pixelFormat != TVIPixelFormatYUV420BiPlanarFullRange) {\n             continue;\n         }\n+        \n         selectedFormat = format;\n-        // ^ Select whatever is available until we find one we like and short-circuit\n+        \n+        // ^ Select whatever is available until we find one we like and break the loop\n         CMVideoDimensions dimensions = format.dimensions;\n+        NSUInteger fps = format.frameRate;\n \n-        if (dimensions.width >= targetSize.width && dimensions.height >= targetSize.height) {\n+        if (dimensions.width >= targetSize.width && dimensions.height >= targetSize.height && fps >= targetFps) {\n             break;\n         }\n     }\n@@ -81,6 +81,7 @@ @implementation RCTTWVideoModule\n \n - (void)dealloc {\n   [self clearCameraInstance];\n+  [self stopLocalAudio];\n }\n \n - (dispatch_queue_t)methodQueue {\n@@ -290,6 +291,19 @@ - (bool)_setLocalVideoEnabled:(bool)enabled {\n   }\n }\n \n+RCT_EXPORT_METHOD(setTrackPriority:(NSString *)trackSid trackPriority:(NSString *)trackPriority) {\n+    for (TVIRemoteParticipant *participant in [self.room remoteParticipants]) {\n+        if (participant) {\n+            for (TVIRemoteVideoTrackPublication *publication in participant.remoteVideoTracks) {\n+              if ([publication.trackSid isEqualToString:trackSid]) {\n+                  TVITrackPriority priority = [self parsePriorityString:trackPriority];\n+                  [publication.remoteTrack setPriority:priority];\n+              }\n+            }\n+        }\n+    }\n+}\n+\n -(void)convertBaseTrackStats:(TVIBaseTrackStats *)stats result:(NSMutableDictionary *)result {\n   result[@\"trackSid\"] = stats.trackSid;\n   result[@\"packetsLost\"] = @(stats.packetsLost);\n@@ -385,15 +399,142 @@ -(NSMutableDictionary*)convertLocalVideoTrackStats:(TVILocalVideoTrackStats *)st\n   }\n }\n \n-RCT_EXPORT_METHOD(connect:(NSString *)accessToken roomName:(NSString *)roomName enableVideo:(BOOL *)enableVideo encodingParameters:(NSDictionary *)encodingParameters enableNetworkQualityReporting:(BOOL *)enableNetworkQualityReporting dominantSpeakerEnabled:(BOOL *)dominantSpeakerEnabled) {\n+-(TVITrackPriority)parsePriorityString:(NSString *)priority {\n+    if (priority == nil) {\n+        return nil;\n+    }\n+    \n+    if ([[priority uppercaseString] isEqualToString:@\"LOW\"]) {\n+        return TVITrackPriorityLow;\n+    } else if ([[priority uppercaseString] isEqualToString:@\"STANDARD\"]) {\n+        return TVITrackPriorityStandard;\n+    } else if ([[priority uppercaseString] isEqualToString:@\"HIGH\"]) {\n+        return TVITrackPriorityHigh;\n+    } else if ([[priority uppercaseString] isEqualToString:@\"NULL\"]) {\n+        return nil;\n+    }\n+    return nil;\n+}\n+\n+-(TVIVideoDimensions*)parseDimensionString:(NSString *)dimension {\n+    if (dimension == nil) {\n+        return nil;\n+    }\n+    \n+    NSArray* dimensionArray = [dimension componentsSeparatedByString:@\"x\"];\n+    if ([dimensionArray count] != 2) {\n+        NSLog(@\"Malformed dimension. Ignoring: %@\", dimension);\n+        return nil;\n+    }\n+    \n+    unsigned int width = [[dimensionArray objectAtIndex:0] unsignedIntValue];\n+    unsigned int height = [[dimensionArray objectAtIndex:1] unsignedIntValue];\n+    \n+    return [TVIVideoDimensions dimensionsWithWidth:width height:height];\n+}\n+\n+-(TVIVideoBandwidthProfileOptions*)prepareBandwidthProfile:(NSDictionary *)bandwidthProfileOptions {\n+    return [TVIVideoBandwidthProfileOptions optionsWithBlock:^(TVIVideoBandwidthProfileOptionsBuilder * _Nonnull builder) {\n+    \n+        if (bandwidthProfileOptions[@\"mode\"]) {\n+            TVIBandwidthProfileMode mode;\n+            \n+            NSString *comparisonString = [(NSString *)[bandwidthProfileOptions objectForKey:@\"mode\"] uppercaseString];\n+            \n+            if ([comparisonString isEqualToString:@\"GRID\"]) {\n+                mode = TVIBandwidthProfileModeGrid;\n+            } else if ([comparisonString isEqualToString:@\"COLLABORATION\"]) {\n+                mode = TVIBandwidthProfileModeCollaboration;\n+            } else if ([comparisonString isEqualToString:@\"PRESENTATION\"]) {\n+                mode = TVIBandwidthProfileModePresentation;\n+            }\n+            \n+            NSLog(@\"BandwidthProfile - mode: %@\", mode);\n+            builder.mode = mode;\n+        }\n+        \n+        if (bandwidthProfileOptions[@\"trackSwitchOffMode\"]) {\n+            TVITrackSwitchOffMode mode;\n+            \n+            NSString *comparisonString = [(NSString *)[bandwidthProfileOptions objectForKey:@\"trackSwitchOffMode\"] uppercaseString];\n+            \n+            if ([comparisonString isEqualToString:@\"DISABLED\"]) {\n+                mode = TVITrackSwitchOffModeDisabled;\n+            } else if ([comparisonString isEqualToString:@\"PREDICTED\"]) {\n+                mode = TVITrackSwitchOffModePredicted;\n+            } else if ([comparisonString isEqualToString:@\"DETECTED\"]) {\n+                mode = TVITrackSwitchOffModeDetected;\n+            }\n+            \n+            builder.trackSwitchOffMode = mode;\n+            NSLog(@\"BandwidthProfile - trackSwitchOffMode: %@\", mode);\n+        }\n+        \n+        if (bandwidthProfileOptions[@\"maxTracks\"]) {\n+            NSNumber *numberValue = @([bandwidthProfileOptions[@\"maxTracks\"] integerValue]);\n+            \n+            if (numberValue > 0) {\n+                builder.maxTracks = numberValue;\n+                NSLog(@\"BandwidthProfile - maxTracks: %@\", numberValue);\n+            } else {\n+                NSLog(@\"maxTracks cant be less than 1. Ignoring.\");\n+            }\n+        }\n+        \n+        if (bandwidthProfileOptions[@\"maxSubscriptionBitrate\"]) {\n+            NSNumber *numberValue = @([bandwidthProfileOptions[@\"maxSubscriptionBitrate\"] integerValue]);\n+            \n+            if (numberValue > 0) {\n+                builder.maxSubscriptionBitrate = numberValue;\n+                NSLog(@\"BandwidthProfile - maxSubscriptionBitrate: %@\", numberValue);\n+            } else {\n+                NSLog(@\"maxSubscriptionBitrate cant be less than 1. Ignoring.\");\n+            }\n+        }\n+        \n+        if (bandwidthProfileOptions[@\"dominantSpeakerPriority\"]) {\n+            builder.dominantSpeakerPriority = [self parsePriorityString:(NSString *)[bandwidthProfileOptions objectForKey:@\"dominantSpeakerPriority\"]];\n+            NSLog(@\"BandwidthProfile - dominantSpeakerPriority: %@\", builder.dominantSpeakerPriority);\n+        }\n+        \n+        if (bandwidthProfileOptions[@\"renderDimensions\"]) {\n+            NSDictionary *renderDimensionsDict = [bandwidthProfileOptions objectForKey:@\"renderDimensions\"];\n+            \n+            TVIVideoRenderDimensions *dimensions = [TVIVideoRenderDimensions alloc];\n+            \n+            if (renderDimensionsDict[@\"low\"]) {\n+                dimensions.low = [self parseDimensionString:(NSString *)[renderDimensionsDict objectForKey:@\"low\"]];\n+                NSLog(@\"BandwidthProfile - renderDimensions - low: %lux%lu\", (unsigned long)dimensions.low.width, (unsigned long)dimensions.low.height);\n+            }\n+            \n+            if (renderDimensionsDict[@\"standard\"]) {\n+                dimensions.standard = [self parseDimensionString:(NSString *)[renderDimensionsDict objectForKey:@\"standard\"]];\n+                NSLog(@\"BandwidthProfile - renderDimensions - standard: %lux%lu\", (unsigned long)dimensions.standard.width, (unsigned long)dimensions.standard.height);\n+            }\n+            \n+            if (renderDimensionsDict[@\"high\"]) {\n+                dimensions.high = [self parseDimensionString:(NSString *)[renderDimensionsDict objectForKey:@\"high\"]];\n+                NSLog(@\"BandwidthProfile - renderDimensions - high: %lux%lu\", (unsigned long)dimensions.high.width, (unsigned long)dimensions.high.height);\n+            }\n+            \n+            builder.renderDimensions = dimensions;\n+        }\n+    }];\n+}\n+\n+RCT_EXPORT_METHOD(connect:(NSString *)accessToken roomName:(NSString *)roomName enableAudio:(BOOL *)enableAudio enableVideo:(BOOL *)enableVideo encodingParameters:(NSDictionary *)encodingParameters enableNetworkQualityReporting:(BOOL *)enableNetworkQualityReporting dominantSpeakerEnabled:(BOOL *)dominantSpeakerEnabled bandwidthProfileOptions:(NSDictionary *)bandwidthProfileOptions) {\n+\n   [self _setLocalVideoEnabled:enableVideo];\n+    \n+  TVIVideoBandwidthProfileOptions* videoBandwidthProfile = [self prepareBandwidthProfile:bandwidthProfileOptions];\n \n   TVIConnectOptions *connectOptions = [TVIConnectOptions optionsWithToken:accessToken block:^(TVIConnectOptionsBuilder * _Nonnull builder) {\n     if (self.localVideoTrack) {\n       builder.videoTracks = @[self.localVideoTrack];\n     }\n \n     if (self.localAudioTrack) {\n+      [self.localAudioTrack setEnabled:enableAudio];\n       builder.audioTracks = @[self.localAudioTrack];\n     }\n \n@@ -408,20 +549,37 @@ -(NSMutableDictionary*)convertLocalVideoTrackStats:(TVILocalVideoTrackStats *)st\n     builder.roomName = roomName;\n \n     if(encodingParameters[@\"enableH264Codec\"]){\n-      builder.preferredVideoCodecs = @[ [TVIH264Codec new] ];\n+        if ([encodingParameters[@\"enableH264Codec\"] boolValue] == true) {\n+            builder.preferredVideoCodecs = @[ [TVIH264Codec new] ];\n+            NSLog(@\"Preferring H264 Codec\");\n+        }\n     }\n \n-    if(encodingParameters[@\"audioBitrate\"] || encodingParameters[@\"videoBitrate\"]){\n+    if (encodingParameters[@\"audioBitrate\"] && encodingParameters[@\"videoBitrate\"]) {\n       NSInteger audioBitrate = [encodingParameters[@\"audioBitrate\"] integerValue];\n       NSInteger videoBitrate = [encodingParameters[@\"videoBitrate\"] integerValue];\n-      builder.encodingParameters = [[TVIEncodingParameters alloc] initWithAudioBitrate:(audioBitrate) ? audioBitrate : 40 videoBitrate:(videoBitrate) ? videoBitrate : 1500];\n+        \n+        if (audioBitrate >= 0 && videoBitrate >= 0) {\n+            builder.encodingParameters = [[TVIEncodingParameters alloc] initWithAudioBitrate:audioBitrate videoBitrate:videoBitrate];\n+            NSLog(@\"Audio encoding bitrate %li - Video encoding bitrate %li\", (long)audioBitrate, (long)videoBitrate);\n+        } else {\n+            // If we have specified only 1 of the bit rate values\n+            if ((audioBitrate >= 0) || (videoBitrate >= 0)) {\n+                // Log a warning\n+                NSLog(@\"Either audio bitrate: %li or video bitrate: %li has an incorrect value. Ignoring both values.\", (long)audioBitrate, (long)videoBitrate);\n+            }\n+        }\n+    } else if (encodingParameters[@\"audioBitrate\"] || encodingParameters[@\"videoBitrate\"]) {\n+        NSLog(@\"Either audio or video bit rate is not specified. Ignoring both values\");\n     }\n \n     if (enableNetworkQualityReporting) {\n       builder.networkQualityEnabled = true;\n       builder.networkQualityConfiguration = [ [TVINetworkQualityConfiguration alloc] initWithLocalVerbosity:TVINetworkQualityVerbosityMinimal remoteVerbosity:TVINetworkQualityVerbosityMinimal];\n     }\n-\n+      \n+    builder.bandwidthProfileOptions = [[TVIBandwidthProfileOptions alloc] initWithVideoOptions:videoBandwidthProfile];\n+      \n   }];\n \n   self.room = [TwilioVideoSDK connectWithOptions:connectOptions delegate:self];\n@@ -435,6 +593,7 @@ -(NSMutableDictionary*)convertLocalVideoTrackStats:(TVILocalVideoTrackStats *)st\n \n RCT_EXPORT_METHOD(disconnect) {\n   [self clearCameraInstance];\n+  [self stopLocalAudio];\n   [self.room disconnect];\n }\n "
  },
  {
    "sha": "39ac85b1f3aa302e3a9d3d8f4846db5a8aca111c",
    "filename": "src/TwilioVideo.android.js",
    "status": "modified",
    "additions": 27,
    "deletions": 6,
    "changes": 33,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/src/TwilioVideo.android.js",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/src/TwilioVideo.android.js",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/src/TwilioVideo.android.js?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -169,18 +169,35 @@ class CustomTwilioVideoView extends Component {\n     accessToken,\n     enableAudio = true,\n     enableVideo = true,\n-    enableRemoteAudio = true,\n+    encodingParameters = {\n+      \"enableH264Codec\": false,\n+      \"audioBitrate\": -1,\n+      \"videoBitrate\": -1\n+    },\n     enableNetworkQualityReporting = false,\n-    dominantSpeakerEnabled = false\n+    dominantSpeakerEnabled = false,\n+    bandwidthProfileOptions = {\n+      \"mode\":\"\",\n+      \"maxTracks\": -1,\n+      \"maxSubscriptionBitrate\": -1,\n+      \"dominantSpeakerPriority\": \"\",\n+      \"renderDimensions\": {\n+        \"low\": \"\",\n+        \"standard\": \"\",\n+        \"high\": \"\",\n+      },\n+      \"trackSwitchOffMode\":\"\",\n+    }\n   }) {\n     this.runCommand(nativeEvents.connectToRoom, [\n       roomName,\n       accessToken,\n       enableAudio,\n       enableVideo,\n-      enableRemoteAudio,\n+      encodingParameters,\n       enableNetworkQualityReporting,\n-      dominantSpeakerEnabled\n+      dominantSpeakerEnabled,\n+      bandwidthProfileOptions\n     ])\n   }\n \n@@ -218,8 +235,8 @@ class CustomTwilioVideoView extends Component {\n     this.runCommand(nativeEvents.switchCamera, [])\n   }\n \n-  setLocalVideoEnabled (enabled) {\n-    this.runCommand(nativeEvents.toggleVideo, [enabled])\n+  setLocalVideoEnabled (enabled, cameraSettings) {\n+    this.runCommand(nativeEvents.toggleVideo, [enabled, cameraSettings])\n     return Promise.resolve(enabled)\n   }\n \n@@ -237,6 +254,10 @@ class CustomTwilioVideoView extends Component {\n     this.runCommand(nativeEvents.toggleBluetoothHeadset, [enabled])\n     return Promise.resolve(enabled)\n   }\n+  \n+  setTrackPriority (trackSid, priority) {\n+    this.runCommand(nativeEvents.setTrackPriority, [trackSid, priority])\n+  }\n \n   getStats () {\n     this.runCommand(nativeEvents.getStats, [])"
  },
  {
    "sha": "9e98f6b7de4d3f0b30b09cad99ff9d01ef010993",
    "filename": "src/TwilioVideo.ios.js",
    "status": "modified",
    "additions": 22,
    "deletions": 7,
    "changes": 29,
    "blob_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/blob/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/src/TwilioVideo.ios.js",
    "raw_url": "https://github.com/blackuy/react-native-twilio-video-webrtc/raw/4e9f692021f24e6a69a3a1d4a23c20baa1d64b49/src/TwilioVideo.ios.js",
    "contents_url": "https://api.github.com/repos/blackuy/react-native-twilio-video-webrtc/contents/src/TwilioVideo.ios.js?ref=4e9f692021f24e6a69a3a1d4a23c20baa1d64b49",
    "patch": "@@ -162,7 +162,7 @@ export default class TwilioVideo extends Component {\n \n   componentWillMount () {\n     this._registerEvents()\n-    this._startLocalVideo()\n+    this._startLocalVideo(false)\n     this._startLocalAudio()\n   }\n \n@@ -188,9 +188,11 @@ export default class TwilioVideo extends Component {\n   }\n \n   /**\n-   * Enable or disable local video\n+   * Enable or disable local video.\n+   * NOTE: cameraSettings are ignored on iOS\n    */\n-  setLocalVideoEnabled (enabled) {\n+  setLocalVideoEnabled (enabled, cameraSettings) {\n+    this._startLocalVideo(enabled)\n     return TWVideoModule.setLocalVideoEnabled(enabled)\n   }\n \n@@ -202,7 +204,16 @@ export default class TwilioVideo extends Component {\n   }\n \n   /**\n-   * Filp between the front and back camera\n+   * Specifies the priority a remote participants video track should get\n+   * @param {*} trackSid the SID of the track setting the priority for\n+   * @param {*} trackPriority the priority of the track. Can be low, standard, high or null\n+   */\n+  setTrackPriority (trackSid, trackPriority) {\n+    TWVideoModule.setTrackPriority(trackSid, trackPriority)\n+  }\n+\n+  /**\n+   * Flip between the front and back camera\n    */\n   flipCamera () {\n     TWVideoModule.flipCamera()\n@@ -226,11 +237,15 @@ export default class TwilioVideo extends Component {\n    * Connect to given room name using the JWT access token\n    * @param  {String} roomName    The connecting room name\n    * @param  {String} accessToken The Twilio's JWT access token\n-   * @param  {String} encodingParameters Control Encoding config\n+   * @param  {boolean} enableAudio Enable  audio on call connect\n+   * @param  {boolean} enableVideo Enable video on call connect\n+   * @param  {object} encodingParameters Control Encoding config\n    * @param  {Boolean} enableNetworkQualityReporting Report network quality of participants\n+   * @param  {Boolean} dominantSpeakerEnabled Report network quality of participants\n+   * @param  {object} bandwidthProfileOptions Report network quality of participants\n    */\n-  connect ({ roomName, accessToken, enableVideo = true, encodingParameters = null, enableNetworkQualityReporting = false, dominantSpeakerEnabled = false }) {\n-    TWVideoModule.connect(accessToken, roomName, enableVideo, encodingParameters, enableNetworkQualityReporting, dominantSpeakerEnabled)\n+  connect ({ roomName, accessToken, enableAudio = true, enableVideo = true, encodingParameters = null, enableNetworkQualityReporting = false, dominantSpeakerEnabled = false, bandwidthProfileOptions = null }) {\n+    TWVideoModule.connect(accessToken, roomName, enableAudio, enableVideo, encodingParameters, enableNetworkQualityReporting, dominantSpeakerEnabled, bandwidthProfileOptions);\n   }\n \n   /**"
  }
]
