[
  {
    "sha": "d67d0544fefcf6e27d5685f9abcd3b7b336da191",
    "filename": "google-ads-examples/src/main/java/com/google/ads/googleads/examples/accountmanagement/ApproveMerchantCenterLink.java",
    "status": "removed",
    "additions": 0,
    "deletions": 187,
    "changes": 187,
    "blob_url": "https://github.com/googleads/google-ads-java/blob/5b704f3f9a71e56c4fcbbbf27906604603aa5a20/google-ads-examples/src/main/java/com/google/ads/googleads/examples/accountmanagement/ApproveMerchantCenterLink.java",
    "raw_url": "https://github.com/googleads/google-ads-java/raw/5b704f3f9a71e56c4fcbbbf27906604603aa5a20/google-ads-examples/src/main/java/com/google/ads/googleads/examples/accountmanagement/ApproveMerchantCenterLink.java",
    "contents_url": "https://api.github.com/repos/googleads/google-ads-java/contents/google-ads-examples/src/main/java/com/google/ads/googleads/examples/accountmanagement/ApproveMerchantCenterLink.java?ref=5b704f3f9a71e56c4fcbbbf27906604603aa5a20",
    "patch": "@@ -1,187 +0,0 @@\n-// Copyright 2020 Google LLC\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//     https://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package com.google.ads.googleads.examples.accountmanagement;\n-\n-import com.beust.jcommander.Parameter;\n-import com.google.ads.googleads.examples.utils.ArgumentNames;\n-import com.google.ads.googleads.examples.utils.CodeSampleParams;\n-import com.google.ads.googleads.lib.GoogleAdsClient;\n-import com.google.ads.googleads.lib.utils.FieldMasks;\n-import com.google.ads.googleads.v6.enums.MerchantCenterLinkStatusEnum.MerchantCenterLinkStatus;\n-import com.google.ads.googleads.v6.errors.GoogleAdsError;\n-import com.google.ads.googleads.v6.errors.GoogleAdsException;\n-import com.google.ads.googleads.v6.resources.MerchantCenterLink;\n-import com.google.ads.googleads.v6.services.ListMerchantCenterLinksRequest;\n-import com.google.ads.googleads.v6.services.ListMerchantCenterLinksResponse;\n-import com.google.ads.googleads.v6.services.MerchantCenterLinkOperation;\n-import com.google.ads.googleads.v6.services.MerchantCenterLinkServiceClient;\n-import com.google.ads.googleads.v6.services.MutateMerchantCenterLinkResponse;\n-import com.google.ads.googleads.v6.services.MutateMerchantCenterLinkResult;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-\n-/**\n- * Demonstrates how to approve a Merchant Center link request.\n- *\n- * <p>Prerequisite: You need to have access to a Merchant Center account. You can find instructions\n- * to create a Merchant Center account here: https://support.google.com/merchants/answer/188924.\n- *\n- * <p>To run this example, you must use the Merchant Center UI or the Content API for Shopping to\n- * send a link request between your Merchant Center and Google Ads accounts.\n- */\n-public class ApproveMerchantCenterLink {\n-\n-  private static class ApproveMerchantCenterLinkParams extends CodeSampleParams {\n-\n-    @Parameter(names = ArgumentNames.CUSTOMER_ID, required = true)\n-    private Long customerId;\n-\n-    @Parameter(names = ArgumentNames.MERCHANT_CENTER_ACCOUNT_ID, required = true)\n-    private Long merchantCenterAccountId;\n-  }\n-\n-  public static void main(String[] args) {\n-    ApproveMerchantCenterLinkParams params = new ApproveMerchantCenterLinkParams();\n-    if (!params.parseArguments(args)) {\n-      // Either pass the required parameters for this example on the command line, or insert them\n-      // into the code here. See the parameter class definition above for descriptions.\n-      params.customerId = Long.parseLong(\"INSERT_CUSTOMER_ID_HERE\");\n-      params.merchantCenterAccountId = Long.parseLong(\"INSERT_MERCHANT_CENTER_ACCOUNT_ID_HERE\");\n-    }\n-\n-    GoogleAdsClient googleAdsClient = null;\n-    try {\n-      googleAdsClient = GoogleAdsClient.newBuilder().fromPropertiesFile().build();\n-    } catch (FileNotFoundException fnfe) {\n-      System.err.printf(\n-          \"Failed to load GoogleAdsClient configuration from file. Exception: %s%n\", fnfe);\n-      System.exit(1);\n-    } catch (IOException ioe) {\n-      System.err.printf(\"Failed to create GoogleAdsClient. Exception: %s%n\", ioe);\n-      System.exit(1);\n-    }\n-\n-    try {\n-      new ApproveMerchantCenterLink()\n-          .runExample(googleAdsClient, params.customerId, params.merchantCenterAccountId);\n-    } catch (GoogleAdsException gae) {\n-      // GoogleAdsException is the base class for most exceptions thrown by an API request.\n-      // Instances of this exception have a message and a GoogleAdsFailure that contains a\n-      // collection of GoogleAdsErrors that indicate the underlying causes of the\n-      // GoogleAdsException.\n-      System.err.printf(\n-          \"Request ID %s failed due to GoogleAdsException. Underlying errors:%n\",\n-          gae.getRequestId());\n-      int i = 0;\n-      for (GoogleAdsError googleAdsError : gae.getGoogleAdsFailure().getErrorsList()) {\n-        System.err.printf(\"  Error %d: %s%n\", i++, googleAdsError);\n-      }\n-      System.exit(1);\n-    }\n-  }\n-\n-  /**\n-   * Runs the example.\n-   *\n-   * @param googleAdsClient the Google Ads API client.\n-   * @param customerId the client customer ID of the Google Ads account to approve the link request.\n-   * @param merchantCenterAccountId the Merchant Center account ID for the account requesting to\n-   *     link.\n-   * @throws GoogleAdsException if an API request failed with one or more service errors.\n-   */\n-  private void runExample(\n-      GoogleAdsClient googleAdsClient, long customerId, long merchantCenterAccountId) {\n-\n-    // Approves a pending link request for a Google Ads account with customerId from a Merchant\n-    // Center account with merchantCenterAccountId.\n-    try (MerchantCenterLinkServiceClient merchantCenterLinkService =\n-        googleAdsClient.getLatestVersion().createMerchantCenterLinkServiceClient()) {\n-      // [START ApproveMerchantCenterLink]\n-      ListMerchantCenterLinksResponse response =\n-          merchantCenterLinkService.listMerchantCenterLinks(\n-              ListMerchantCenterLinksRequest.newBuilder()\n-                  .setCustomerId(Long.toString(customerId))\n-                  .build());\n-\n-      System.out.printf(\n-          \"%d Merchant Center link(s) found with the following details:%n\",\n-          response.getMerchantCenterLinksCount());\n-      // [END ApproveMerchantCenterLink]\n-\n-      for (MerchantCenterLink merchantCenterLink : response.getMerchantCenterLinksList()) {\n-        // [START ApproveMerchantCenterLink_1]\n-        System.out.printf(\n-            \"Link '%s' has status '%s'.%n\",\n-            merchantCenterLink.getResourceName(), merchantCenterLink.getStatus());\n-        // [END ApproveMerchantCenterLink_1]\n-\n-        // Checks if there is a link for the Merchant Center account we are looking for, then only\n-        // approves the link if it is in a 'PENDING' state.\n-        if (merchantCenterAccountId == merchantCenterLink.getId()\n-            && merchantCenterLink.getStatus() == MerchantCenterLinkStatus.PENDING) {\n-          // Updates the status of Merchant Center link to 'ENABLED' to approve the link.\n-          updateMerchantCenterLinkStatus(\n-              merchantCenterLinkService,\n-              customerId,\n-              merchantCenterLink,\n-              MerchantCenterLinkStatus.ENABLED);\n-        }\n-      }\n-    }\n-  }\n-\n-  /**\n-   * Updates the status of a Merchant Center link request for a given resource name.\n-   *\n-   * @param merchantCenterLinkServiceClient the MerchantCenterLinkService client.\n-   * @param customerId the client customer ID of the Google Ads account to approve the link request.\n-   * @param merchantCenterLink the MerchantCenterLink object to update.\n-   * @param status the new status to set on the link.\n-   * @throws GoogleAdsException if an API request failed with one or more service errors.\n-   */\n-  // [START ApproveMerchantCenterLink_2]\n-  private void updateMerchantCenterLinkStatus(\n-      MerchantCenterLinkServiceClient merchantCenterLinkServiceClient,\n-      long customerId,\n-      MerchantCenterLink merchantCenterLink,\n-      MerchantCenterLinkStatus status) {\n-    // Creates an updated MerchantCenterLink object derived from the original, but with the new\n-    // status.\n-    MerchantCenterLink updatedMerchantCenterLink =\n-        merchantCenterLink.toBuilder().setStatus(status).build();\n-\n-    // Constructs an operation that will update the merchantCenterLink, using the FieldMasks compare\n-    // utility to derive the update mask from the changes. This mask tells the Google Ads API which\n-    // attributes of the merchantCenterLink to change. In this case we only want to change the\n-    // MerchantCenterLinkStatus.\n-    MerchantCenterLinkOperation operation =\n-        MerchantCenterLinkOperation.newBuilder()\n-            .setUpdate(updatedMerchantCenterLink)\n-            .setUpdateMask(FieldMasks.compare(merchantCenterLink, updatedMerchantCenterLink))\n-            .build();\n-\n-    // Sends the operation in a mutate request.\n-    MutateMerchantCenterLinkResponse response =\n-        merchantCenterLinkServiceClient.mutateMerchantCenterLink(\n-            String.valueOf(customerId), operation);\n-\n-    // Prints the resource name of the updated object.\n-    MutateMerchantCenterLinkResult merchantCenterLinkResult = response.getResult();\n-    System.out.printf(\n-        \"Updated Merchant Center link with resource name: '%s'.%n\",\n-        merchantCenterLinkResult.getResourceName());\n-  }\n-  // [END ApproveMerchantCenterLink_2]\n-}"
  }
]
