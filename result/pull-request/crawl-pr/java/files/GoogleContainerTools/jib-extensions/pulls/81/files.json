[
  {
    "sha": "44192db3d45264e18c353bca08b8524f04c2a67c",
    "filename": "README.md",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/GoogleContainerTools/jib-extensions/blob/168138103bf1c8986c0b9efac22d02163199cd9a/README.md",
    "raw_url": "https://github.com/GoogleContainerTools/jib-extensions/raw/168138103bf1c8986c0b9efac22d02163199cd9a/README.md",
    "contents_url": "https://api.github.com/repos/GoogleContainerTools/jib-extensions/contents/README.md?ref=168138103bf1c8986c0b9efac22d02163199cd9a",
    "patch": "@@ -17,6 +17,7 @@ The Jib Extension Framework enables anyone to easily extend Jib's behavior to th\n    - [Gradle](#using-jib-plugin-extensions-gradle)\n - [Writing Your Own Extensions](#writing-your-own-extensions)\n    - [Project Setup](#project-setup)\n+   - [Using Dependency Injection (Maven)](#using-dependency-injection-maven)\n    - [Updating Container Build Plan](#updating-container-build-plan)\n    - [Defining Extension-Specific Configuration](#defining-extension-specific-configuration)\n    - [Version Matrix](#version-matrix)\n@@ -212,6 +213,24 @@ It is easy to write an extension! If you have written a useful extension, let us\n 2. Add a text file `src/main/resources/META-INF/services/com.google.cloud.tools.jib.maven.extension.JibMavenPluginExtension` (Maven) / `src/main/resources/META-INF/services/com.google.cloud.tools.jib.gradle.extension.JibGradlePluginExtension` (Gradle) and list your classes that implements the Jib Maven/Gradle Plugin Extension API below. See the [Maven](first-party/jib-ownership-extension-maven/src/main/resources/META-INF/services/com.google.cloud.tools.jib.maven.extension.JibMavenPluginExtension) and [Gradle](first-party/jib-ownership-extension-gradle/src/main/resources/META-INF/services/com.google.cloud.tools.jib.gradle.extension.JibGradlePluginExtension) examples.\n 3. Implement [`JibMavenPluginExtension`](https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin-extension-api/src/main/java/com/google/cloud/tools/jib/maven/extension/JibMavenPluginExtension.java) (Maven) / [`JibGradlePluginExtension`](https://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin-extension-api/src/main/java/com/google/cloud/tools/jib/gradle/extension/JibGradlePluginExtension.java) (Gradle).\n \n+### Using Dependency Injection (Maven)<a name=\"using-dependency-injection-maven\"></a>\n+\n+The approach described above uses JDK service loader to create the instance of the extension. With Maven you can alternatively let your extension being created by the [Maven dependency injection container](https://maven.apache.org/maven-jsr330.html). This allows you to inject shared Maven components into you extension to perform more sophisticated tasks.\n+\n+1. Instead of `src/main/resources/META-INF/services/com.google.cloud.tools.jib.maven.extension.JibMavenPluginExtension`, create a text file `src/main/resources/META-INF/sisu/javax.inject.Named` and list your classes that implements the Jib Maven Plugin Extension API. Maven dependency injection container needs this file to find the classes to consider. See an example file in [`jib-layer-filter-extension-maven`](https://github.com/GoogleContainerTools/jib-extensions/blob/master/first-party/jib-layer-filter-extension-maven/src/main/resources/META-INF/sisu/javax.inject.Named). Alternatively you can use the [`sisu-maven-plugin`](https://www.eclipse.org/sisu/docs/api/org.eclipse.sisu.mojos/) to generate this file, as described in the [Maven documentation](https://maven.apache.org/maven-jsr330.html#how-to-use-jsr-330-in-plugins).\n+\n+2. Add the `@javax.inject.Named` and `@javax.inject.Singleton` annotations to your classes that implement the Jib Maven Plugin Extension API to make it Maven components. Use `javax.inject.Inject` annotation on fields, constructors or methods to get shared Maven components.\n+\n+```java\n+@Named\n+@Singleton\n+public class MyExtension implements JibMavenPluginExtension<Configuration> {\n+  \n+  // example for injected shared Maven component\n+  @Inject ProjectDependenciesResolver dependencyResolver;\n+}\n+```\n+\n ### Updating Container Build Plan\n \n The extension API passes in [`ContainerBuildPlan`](https://github.com/GoogleContainerTools/jib/blob/master/jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java), which is the container build plan originally prepared by Jib plugins. The build plan describes in a declarative way how it plans to build a container image."
  },
  {
    "sha": "37a3a3aa6a211beb1bf45fb4cf441b5c1678c002",
    "filename": "first-party/jib-layer-filter-extension-maven/README.md",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/GoogleContainerTools/jib-extensions/blob/168138103bf1c8986c0b9efac22d02163199cd9a/first-party/jib-layer-filter-extension-maven/README.md",
    "raw_url": "https://github.com/GoogleContainerTools/jib-extensions/raw/168138103bf1c8986c0b9efac22d02163199cd9a/first-party/jib-layer-filter-extension-maven/README.md",
    "contents_url": "https://api.github.com/repos/GoogleContainerTools/jib-extensions/contents/first-party/jib-layer-filter-extension-maven/README.md?ref=168138103bf1c8986c0b9efac22d02163199cd9a",
    "patch": "@@ -52,6 +52,8 @@ Check out the [genenal instructions](../../README.md#using-jib-plugin-extensions\n             </filter>\n           </filters>\n         </configuration>\n+        <!-- To create separate layers for parent dependencies-->\n+        <createParentDependencyLayers>true</createParentDependencyLayers>\n       </pluginExtension>\n     </pluginExtensions>\n   </configuration>\n@@ -66,3 +68,11 @@ Check out the [genenal instructions](../../README.md#using-jib-plugin-extensions\n - You cannot move files into Jib's built-in layers. You can only create new layers when moving files. If you see an error message \"moving files into built-in layer is not supported\", it means you accidentally chose a name already in use by Jib. Simply use a different `toLayer` name.\n - New layers are created in the order they appear in `filters`.\n - The extension does not create an empty layer when no files are matched.\n+\n+## Separate Layers for Parent Dependencies\n+\n+Setting `createParentDependencyLayers` to `true` will move all dependencies that come from the parent POM to separate layers with layer name suffixed by `-parent`.\n+\n+- This runs after the filtering. Hence, it also considers each `toLayer` that has been created.\n+- The extension will never create an empty parent dependency layer.\n+- If a layer contains only parent dependencies, it will be removed, since all its content will be moved to its corresponding parent dependency layer. \n\\ No newline at end of file"
  }
]
