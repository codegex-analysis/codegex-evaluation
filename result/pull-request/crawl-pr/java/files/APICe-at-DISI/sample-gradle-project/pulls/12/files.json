[
  {
    "sha": "dc35247bb148fce08826d0502fec551186b005d8",
    "filename": ".github/build-steps/build.sh",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/APICe-at-DISI/sample-gradle-project/blob/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/build.sh",
    "raw_url": "https://github.com/APICe-at-DISI/sample-gradle-project/raw/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/build.sh",
    "contents_url": "https://api.github.com/repos/APICe-at-DISI/sample-gradle-project/contents/.github/build-steps/build.sh?ref=68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a",
    "patch": "@@ -0,0 +1,26 @@\n+#!/bin/bash\n+set -e\n+CUSTOM_BUILD_SCRIPT=${CUSTOM_BUILD_SCRIPT:-.github/scripts/build}\n+if [ -x $CUSTOM_BUILD_SCRIPT ]; then\n+    echo 'Detected custom build instructions'\n+    $CUSTOM_BUILD_SCRIPT\n+elif [ -x 'gradlew' ]; then\n+    echo 'Detected gradle wrapper, checking for known tasks'\n+    if ./gradlew tasks | grep '^assemble\\s'; then\n+        echo 'Detected assemble task'\n+        ./gradlew assemble --parallel\n+    elif ./gradlew tasks | grep '^build\\s'; then\n+        echo 'Detected build task'\n+        ./gradlew build --parallel\n+    else\n+        echo 'No known tasks, fall back to the default tasks'\n+        ./gradlew\n+    fi\n+elif [ -f 'pom.xml' ]; then\n+    echo 'Detected Maven pom.xml, running mvn package'\n+    mvn package -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+else\n+    echo 'No valid configuration detected, failing'\n+    echo \"To fix, provide an *executable* build script in $CUSTOM_BUILD_SCRIPT\"\n+    exit 1\n+fi"
  },
  {
    "sha": "743683d1b65af6fe4f0074266a2e034871fd65c5",
    "filename": ".github/build-steps/check.sh",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/APICe-at-DISI/sample-gradle-project/blob/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/check.sh",
    "raw_url": "https://github.com/APICe-at-DISI/sample-gradle-project/raw/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/check.sh",
    "contents_url": "https://api.github.com/repos/APICe-at-DISI/sample-gradle-project/contents/.github/build-steps/check.sh?ref=68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a",
    "patch": "@@ -0,0 +1,21 @@\n+#!/bin/bash\n+set -e\n+CUSTOM_BUILD_SCRIPT=${CUSTOM_BUILD_SCRIPT:-.github/scripts/check}\n+if [ -x $CUSTOM_BUILD_SCRIPT ]; then\n+    echo 'Detected custom check instructions'\n+    $CUSTOM_BUILD_SCRIPT\n+elif [ -x 'gradlew' ]; then\n+    echo 'Detected gradle wrapper, checking for known tasks'\n+    if ./gradlew tasks | grep '^check\\s'; then\n+        echo 'Detected check task'\n+        ./gradlew check --parallel\n+        if ./gradlew tasks | grep '^jacocoTestReport\\s'; then\n+            ./gradlew jacocoTestReport --parallel\n+        fi\n+    else\n+        echo 'No known check tasks'\n+    fi\n+else\n+    echo 'No valid configuration detected, skipping checks'\n+    echo \"To fix, provide an *executable* build script in $CUSTOM_BUILD_SCRIPT\"\n+fi"
  },
  {
    "sha": "8b8e85e371018ef3a8afde61229700d79e77d025",
    "filename": ".github/build-steps/compatibility_check.sh",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/APICe-at-DISI/sample-gradle-project/blob/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/compatibility_check.sh",
    "raw_url": "https://github.com/APICe-at-DISI/sample-gradle-project/raw/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/compatibility_check.sh",
    "contents_url": "https://api.github.com/repos/APICe-at-DISI/sample-gradle-project/contents/.github/build-steps/compatibility_check.sh?ref=68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a",
    "patch": "@@ -0,0 +1,11 @@\n+#!/bin/bash\n+if [ -x .github/scripts/compatibility_check ]; then\n+    .github/scripts/compatibility_check\n+else\n+    COMPATIBLE=true\n+    echo \"COMPATIBLE=$COMPATIBLE\"\n+    echo \"COMPATIBLE=$COMPATIBLE\" >> $GITHUB_ENV\n+    REFERENCE=$([ \"$OS\" = 'ubuntu' ] && [ \"$JAVA_VERSION\" = 8 ] && echo 'true' || echo 'false')\n+    echo \"REFERENCE=$REFERENCE\"\n+    echo \"REFERENCE=$REFERENCE\" >> $GITHUB_ENV\n+fi"
  },
  {
    "sha": "7782f33e6f3da339b89e1067ad790c7b908a716d",
    "filename": ".github/build-steps/deploy.sh",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/APICe-at-DISI/sample-gradle-project/blob/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/deploy.sh",
    "raw_url": "https://github.com/APICe-at-DISI/sample-gradle-project/raw/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/build-steps/deploy.sh",
    "contents_url": "https://api.github.com/repos/APICe-at-DISI/sample-gradle-project/contents/.github/build-steps/deploy.sh?ref=68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a",
    "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+set -e\n+CUSTOM_BUILD_SCRIPT=${CUSTOM_BUILD_SCRIPT:-.github/scripts/deploy}\n+if [ -x $CUSTOM_BUILD_SCRIPT ]; then\n+    echo 'Detected custom deploy instructions'\n+    $CUSTOM_BUILD_SCRIPT\n+elif [ -x 'gradlew' ]; then\n+    echo 'Detected gradle wrapper, checking for known tasks'\n+    if ./gradlew tasks | grep '^deploy\\s'; then\n+        echo 'Detected deploy task'\n+        ./gradlew deploy --parallel\n+    elif ./gradlew tasks | grep '^publish\\s'; then\n+        echo 'Detected publish task'\n+        ./gradlew publish --parallel\n+    else\n+        echo 'No deploy task'\n+    fi\n+elif [ -f 'pom.xml' ]; then\n+    echo 'Detected Maven pom.xml, running mvn deploy'\n+    mvn deploy -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn\n+else\n+    echo 'No valid configuration detected, failing'\n+    echo \"To fix, provide an *executable* build script in $CUSTOM_BUILD_SCRIPT\"\n+    exit 1\n+fi"
  },
  {
    "sha": "7fb1bab9cbdc19c2bb34ad7d06980e8fef6f0973",
    "filename": ".github/workflows/build-and-deploy.yml",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/APICe-at-DISI/sample-gradle-project/blob/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/workflows/build-and-deploy.yml",
    "raw_url": "https://github.com/APICe-at-DISI/sample-gradle-project/raw/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/workflows/build-and-deploy.yml",
    "contents_url": "https://api.github.com/repos/APICe-at-DISI/sample-gradle-project/contents/.github/workflows/build-and-deploy.yml?ref=68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a",
    "patch": "@@ -0,0 +1,143 @@\n+name: CI\n+on:\n+  push:\n+  schedule:\n+    - cron: '0 3 * * SUN'\n+\n+jobs:\n+  Build:\n+    strategy:\n+      matrix:\n+        os: [windows, macos, ubuntu]\n+        jvm_version: [8, 11, 14]\n+    runs-on: ${{ matrix.os }}-latest\n+    env:\n+      JAVA_VERSION: ${{ matrix.jvm_version }}\n+      OS: ${{ matrix.os }}\n+      TERM: dumb\n+    steps:\n+      # Checkout the repository\n+      - name: Checkout\n+        uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0\n+          submodules: recursive\n+      - name: Fetch tags\n+        shell: bash\n+        run: git fetch --tags -f\n+      - name: Populate TAG and BRANCH environment variables\n+        shell: bash\n+        run: |\n+          TAG=$(git describe --tags --exact-match HEAD || echo '')\n+          echo \"Current tag is: '$TAG' (setup in the TAG environment variable)\"\n+          echo \"TAG=$TAG\" >> $GITHUB_ENV\n+          BRANCH=$([ -z \"$TAG\" ] && echo ${GITHUB_REF#refs/heads/} || echo $TAG)\n+          echo \"Current tag is: '$BRANCH' (setup in BRANCH TAG environment variable)\"\n+          echo \"BRANCH=$BRANCH\" >> $GITHUB_ENV\n+      # Check if the configuration is supported\n+      # COMPATIBLE means the build can run on this matrix combination\n+      # REFERENCE means this is the combination that produces the reference artifacts\n+      # (hence, artifacts from REFERENCE configuration shall be deployed)\n+      # Only one matrix entry should be REFERENCE=true\n+      # If REFERENCE=true, then also COMPATIBLE=true\n+      - shell: bash\n+        run: .github/build-steps/compatibility_check.sh\n+      # Install the JDK\n+      - uses: joschi/setup-jdk@v2.3.0\n+        if: ${{ env.COMPATIBLE == 'true' }}\n+        with:\n+          java-version: ${{ matrix.jvm_version }}\n+          server-id: ossrh\n+          server-username: MAVEN_CENTRAL_USERNAME\n+          server-password: MAVEN_CENTRAL_PASSWORD\n+          gpg-private-key: ${{ secrets.SIGNING_KEY }}\n+          gpg-passphrase: SIGNING_PASSWORD\n+      # Install additional packages\n+      - name: Configure Linux\n+        shell: bash\n+        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'ubuntu') }}\n+        run: |\n+          if [ -x .github/scripts/configure_linux ]; then\n+            .github/scripts/configure_linux\n+          fi\n+      - name: Configure MacOS X\n+        shell: bash\n+        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'macos') }}\n+        run: |\n+          if [ -f .github/scripts/configure_macos ]; then\n+            .github/scripts/configure_macos\n+          fi\n+      - name: Configure the Windows Pagefile\n+        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'windows') }}\n+        uses: al-cheb/configure-pagefile-action@v1.2\n+      - name: Configure Windows\n+        shell: bash\n+        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'windows') }}\n+        run: |\n+          if [ -f .github/scripts/configure_windows ]; then\n+            .github/scripts/configure_windows\n+          fi\n+      - name: Build\n+        if: ${{ env.COMPATIBLE == 'true' }}\n+        shell: bash\n+        run: .github/build-steps/build.sh || .github/build-steps/build.sh\n+      - name: Check\n+        if: ${{ env.COMPATIBLE == 'true' }}\n+        shell: bash\n+        run: .github/build-steps/check.sh || .github/build-steps/check.sh\n+      - name: CodeCov\n+        if: ${{ env.REFERENCE == 'true' }}\n+        uses: codecov/codecov-action@v1\n+      - name: Deploy\n+        if: ${{ env.REFERENCE == 'true' }}\n+        shell: bash\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+          githubToken: ${{ secrets.AUTOMERGE_TOKEN }}\n+          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}\n+          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}\n+          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}\n+          MAVEN_CENTRAL_USERNAME: danysk\n+          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}\n+          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}\n+          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}\n+          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}\n+          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}\n+        run: .github/build-steps/deploy.sh || .github/build-steps/deploy.sh\n+  Build-Success:\n+    runs-on: ubuntu-latest\n+    needs: Build\n+    steps:\n+      - shell: bash\n+        run: touch ok\n+      - uses: actions/upload-artifact@v2\n+        with:\n+          name: success\n+          path: ok\n+  CI-Complete:\n+    needs: Build-Success\n+    if: always()\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/download-artifact@v2\n+        with:\n+          name: success\n+      - shell: bash\n+        run: '[ -f ok ]'\n+  Automerge:\n+    needs: CI-Complete\n+    runs-on: ubuntu-latest\n+    if: always()\n+    steps:\n+      - name: automerge\n+        uses: \"DanySK/yaagha@master\"\n+        env:\n+          GITHUB_TOKEN: \"${{ secrets.AUTOMERGE_TOKEN }}\"\n+          MERGE_FORKS: \"false\"\n+          MERGE_LABELS: \"version-upgrade\"\n+          BLOCK_LABELS: \"blocked, wontfix, invalid\"\n+          MERGE_METHOD: \"rebase\"\n+          CLOSE_ON_CONFLICT: \"true\"\n+          DELETE_BRANCH_ON_CLOSE: \"true\"\n+          GIT_USER_NAME: \"Danilo Pianini\"\n+          GIT_USER_EMAIL: \"danilo.pianini@gmail.com\""
  },
  {
    "sha": "2ca429a2a1a18c7c3ef0147b927ce0f5288e5705",
    "filename": ".github/workflows/build-external-pull-requests.yml",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/APICe-at-DISI/sample-gradle-project/blob/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/workflows/build-external-pull-requests.yml",
    "raw_url": "https://github.com/APICe-at-DISI/sample-gradle-project/raw/68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a/.github/workflows/build-external-pull-requests.yml",
    "contents_url": "https://api.github.com/repos/APICe-at-DISI/sample-gradle-project/contents/.github/workflows/build-external-pull-requests.yml?ref=68d01a3d8f50b4fc2e0ae8b166dde7a4b98d8e5a",
    "patch": "@@ -0,0 +1,83 @@\n+name: Pull Request CI\n+on:\n+  pull_request:\n+\n+jobs:\n+  Build-Foreign-Pull-Request:\n+    if: ${{ github.event.pull_request.head.repo.full_name != github.repository }}\n+    strategy:\n+      matrix:\n+        os: [windows, macos, ubuntu]\n+        jvm_version: [8, 11, 14]\n+    runs-on: ${{ matrix.os }}-latest\n+    env:\n+      JAVA_VERSION: ${{ matrix.jvm_version }}\n+      OS: ${{ matrix.os }}\n+      TERM: dumb\n+    steps:\n+      # Checkout the repository\n+      - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0\n+          submodules: recursive\n+      - name: Fetch tags\n+        shell: bash\n+        run: git fetch --tags -f\n+      - name: Populate TAG and BRANCH environment variables\n+        shell: bash\n+        run: |\n+          TAG=$(git describe --tags --exact-match HEAD || echo '')\n+          echo \"Current tag is: '$TAG' (setup in the TAG environment variable)\"\n+          echo \"TAG=$TAG\" >> $GITHUB_ENV\n+          BRANCH=$([ -z \"$TAG\" ] && echo ${GITHUB_REF#refs/heads/} || echo $TAG)\n+          echo \"Current tag is: '$BRANCH' (setup in BRANCH TAG environment variable)\"\n+          echo \"BRANCH=$BRANCH\" >> $GITHUB_ENV\n+      # Check if the configuration is supported\n+      # COMPATIBLE means the build can run on this matrix combination\n+      # REFERENCE means this is the combination that produces the reference artifacts\n+      # (hence, artifacts from REFERENCE configuration shall be deployed)\n+      # Only one matrix entry should be REFERENCE=true\n+      # If REFERENCE=true, then also COMPATIBLE=true\n+      - shell: bash\n+        run: .github/build-steps/compatibility_check.sh\n+      # Install the JDK\n+      - uses: joschi/setup-jdk@v2.3.0\n+        if: ${{ env.COMPATIBLE }}\n+        with:\n+          java-version: ${{ matrix.jvm_version }}\n+      # Install additional packages\n+      - name: Configure Linux\n+        shell: bash\n+        if: ${{ env.COMPATIBLE && contains(matrix.os, 'ubuntu') }}\n+        run: |\n+          if [ -x .github/scripts/configure_linux ]; then\n+            .github/scripts/configure_linux\n+          fi\n+      - name: Configure MacOS X\n+        shell: bash\n+        if: ${{ env.COMPATIBLE && contains(matrix.os, 'macos') }}\n+        run: |\n+          if [ -f .github/scripts/configure_macos ]; then\n+            .github/scripts/configure_macos\n+          fi\n+      - name: Configure the Windows Pagefile\n+        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'windows') }}\n+        uses: al-cheb/configure-pagefile-action@v1.2\n+      - name: Configure Windows\n+        shell: bash\n+        if: ${{ env.COMPATIBLE && contains(matrix.os, 'windows') }}\n+        run: |\n+          if [ -f .github/scripts/configure_windows ]; then\n+            .github/scripts/configure_windows\n+          fi\n+      - name: Build\n+        if: ${{ env.COMPATIBLE == 'true' }}\n+        shell: bash\n+        run: .github/build-steps/build.sh\n+      - name: Check\n+        if: ${{ env.COMPATIBLE == 'true' }}\n+        shell: bash\n+        run: .github/build-steps/check.sh\n+      - name: CodeCov\n+        if: ${{ env.REFERENCE == 'true' }}\n+        uses: codecov/codecov-action@v1"
  }
]
