[
  {
    "sha": "3d1bbcb8872e5af9ce325a32325cf44c5da8e2c5",
    "filename": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusSecurityIdentity.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/7aea1c45eb5431be6181522f67f2f172aaff5d82/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusSecurityIdentity.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/7aea1c45eb5431be6181522f67f2f172aaff5d82/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusSecurityIdentity.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusSecurityIdentity.java?ref=7aea1c45eb5431be6181522f67f2f172aaff5d82",
    "patch": "@@ -22,13 +22,15 @@\n     private final Set<Credential> credentials;\n     private final Map<String, Object> attributes;\n     private final List<Function<Permission, Uni<Boolean>>> permissionCheckers;\n+    private final boolean anonymous;\n \n     private QuarkusSecurityIdentity(Builder builder) {\n         this.principal = builder.principal;\n         this.roles = Collections.unmodifiableSet(builder.roles);\n         this.credentials = Collections.unmodifiableSet(builder.credentials);\n         this.attributes = Collections.unmodifiableMap(builder.attributes);\n         this.permissionCheckers = Collections.unmodifiableList(builder.permissionCheckers);\n+        this.anonymous = builder.anonymous;\n     }\n \n     @Override\n@@ -38,7 +40,7 @@ public Principal getPrincipal() {\n \n     @Override\n     public boolean isAnonymous() {\n-        return false;\n+        return anonymous;\n     }\n \n     @Override\n@@ -121,11 +123,13 @@ public static Builder builder() {\n     }\n \n     public static Builder builder(SecurityIdentity identity) {\n-        return new Builder()\n+        Builder builder = new Builder()\n                 .addAttributes(identity.getAttributes())\n                 .addCredentials(identity.getCredentials())\n                 .addRoles(identity.getRoles())\n                 .setPrincipal(identity.getPrincipal());\n+        builder.anonymous = identity.isAnonymous();\n+        return builder;\n     }\n \n     public static class Builder {\n@@ -135,6 +139,7 @@ public static Builder builder(SecurityIdentity identity) {\n         Set<Credential> credentials = new HashSet<>();\n         Map<String, Object> attributes = new HashMap<>();\n         List<Function<Permission, Uni<Boolean>>> permissionCheckers = new ArrayList<>();\n+        private boolean anonymous;\n         boolean built = false;\n \n         public Builder setPrincipal(Principal principal) {\n@@ -212,6 +217,10 @@ public Builder addPermissionChecker(Function<Permission, Uni<Boolean>> function)\n         }\n \n         public QuarkusSecurityIdentity build() {\n+            if (principal == null && !anonymous) {\n+                throw new IllegalStateException(\"Principal is null but anonymous status is true\");\n+            }\n+\n             built = true;\n             return new QuarkusSecurityIdentity(this);\n         }"
  },
  {
    "sha": "f632d4454bdd08441310652da7a36dcda1a535d3",
    "filename": "extensions/security/runtime/src/test/java/io/quarkus/security/runtime/QuarkusSecurityIdentityTest.java",
    "status": "modified",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/7aea1c45eb5431be6181522f67f2f172aaff5d82/extensions/security/runtime/src/test/java/io/quarkus/security/runtime/QuarkusSecurityIdentityTest.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/7aea1c45eb5431be6181522f67f2f172aaff5d82/extensions/security/runtime/src/test/java/io/quarkus/security/runtime/QuarkusSecurityIdentityTest.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/security/runtime/src/test/java/io/quarkus/security/runtime/QuarkusSecurityIdentityTest.java?ref=7aea1c45eb5431be6181522f67f2f172aaff5d82",
    "patch": "@@ -1,11 +1,23 @@\n package io.quarkus.security.runtime;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.security.Permission;\n+import java.security.Principal;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n \n import org.junit.jupiter.api.Test;\n \n+import io.quarkus.security.credential.Credential;\n import io.quarkus.security.credential.PasswordCredential;\n import io.quarkus.security.identity.SecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n \n public class QuarkusSecurityIdentityTest {\n \n@@ -18,11 +30,121 @@ public void testCopyIdentity() throws Exception {\n                 .addAttribute(\"key\", \"value\")\n                 .build();\n \n+        assertFalse(identity1.isAnonymous());\n+\n         SecurityIdentity identity2 = QuarkusSecurityIdentity.builder(identity1).build();\n+        assertFalse(identity1.isAnonymous());\n \n         assertEquals(identity1.getAttributes(), identity2.getAttributes());\n         assertEquals(identity1.getPrincipal(), identity2.getPrincipal());\n         assertEquals(identity1.getCredentials(), identity2.getCredentials());\n         assertEquals(identity1.getRoles(), identity2.getRoles());\n     }\n+\n+    @Test\n+    public void testAnonymousPrincipalWithCustomIdentity() throws Exception {\n+        SecurityIdentity identity1 = new TestSecurityIdentityAnonymousPrincipal();\n+        assertTrue(identity1.isAnonymous());\n+        assertEquals(\"anonymous-principal\", identity1.getPrincipal().getName());\n+\n+        SecurityIdentity identity2 = QuarkusSecurityIdentity.builder(identity1).build();\n+        assertTrue(identity2.isAnonymous());\n+        assertEquals(\"anonymous-principal\", identity2.getPrincipal().getName());\n+    }\n+\n+    @Test\n+    public void testPrincipalNullAnonymousFalseWithBuilder() throws Exception {\n+        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder()\n+                .addRole(\"admin\")\n+                .addCredential(new PasswordCredential(\"password\".toCharArray()))\n+                .addAttribute(\"key\", \"value\");\n+        ;\n+\n+        assertThrows(IllegalStateException.class, () -> builder.build());\n+    }\n+\n+    @Test\n+    public void testPrincipalNullAnonymousFalseWithCustomIdentity() throws Exception {\n+        SecurityIdentity identity1 = new TestSecurityIdentityPrincipalNullAnonymousFalse();\n+        assertFalse(identity1.isAnonymous());\n+        assertNull(identity1.getPrincipal());\n+\n+        assertThrows(IllegalStateException.class, () -> QuarkusSecurityIdentity.builder(identity1).build());\n+    }\n+\n+    static class TestSecurityIdentityAnonymousPrincipal extends AbstractTestSecurityIdentity {\n+\n+        @Override\n+        public Principal getPrincipal() {\n+            return new Principal() {\n+                @Override\n+                public String getName() {\n+                    return \"anonymous-principal\";\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public boolean isAnonymous() {\n+            return true;\n+        }\n+\n+    }\n+\n+    static class TestSecurityIdentityPrincipalNullAnonymousFalse extends AbstractTestSecurityIdentity {\n+\n+        @Override\n+        public Principal getPrincipal() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isAnonymous() {\n+            return false;\n+        }\n+\n+    }\n+\n+    static abstract class AbstractTestSecurityIdentity implements SecurityIdentity {\n+\n+        @Override\n+        public Set<String> getRoles() {\n+            return Collections.emptySet();\n+        }\n+\n+        @Override\n+        public boolean hasRole(String role) {\n+            // TODO Auto-generated method stub\n+            return false;\n+        }\n+\n+        @Override\n+        public <T extends Credential> T getCredential(Class<T> credentialType) {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public Set<Credential> getCredentials() {\n+            return Collections.emptySet();\n+        }\n+\n+        @Override\n+        public <T> T getAttribute(String name) {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public Map<String, Object> getAttributes() {\n+            return Collections.emptyMap();\n+        }\n+\n+        @Override\n+        public Uni<Boolean> checkPermission(Permission permission) {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+    }\n }"
  }
]
