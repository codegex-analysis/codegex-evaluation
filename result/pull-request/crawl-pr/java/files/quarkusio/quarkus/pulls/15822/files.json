[
  {
    "sha": "5b747e2bf0643b5629db9f0375869a53a0ca35e8",
    "filename": "core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalIndexedClassesBuildItem.java",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalIndexedClassesBuildItem.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalIndexedClassesBuildItem.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalIndexedClassesBuildItem.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -1,17 +1,25 @@\n package io.quarkus.deployment.builditem;\n \n-import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class AdditionalIndexedClassesBuildItem extends MultiBuildItem {\n \n-    private final Set<String> classesToIndex = new HashSet<>();\n+    private final Set<String> classesToIndex;\n \n     public AdditionalIndexedClassesBuildItem(String... classesToIndex) {\n-        this.classesToIndex.addAll(Arrays.asList(classesToIndex));\n+        Set<String> toIndex = new HashSet<>(classesToIndex.length);\n+        for (String s : classesToIndex) {\n+            toIndex.add(s);\n+        }\n+        this.classesToIndex = toIndex;\n+    }\n+\n+    public AdditionalIndexedClassesBuildItem(String classToIndex) {\n+        this.classesToIndex = Collections.singleton(classToIndex);\n     }\n \n     public Set<String> getClassesToIndex() {"
  },
  {
    "sha": "0cc2ef6d9bdf1524cefe611c78244bee2fdcbe24",
    "filename": "extensions/hibernate-envers/deployment/src/main/java/io/quarkus/hibernate/envers/deployment/HibernateEnversProcessor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-envers/deployment/src/main/java/io/quarkus/hibernate/envers/deployment/HibernateEnversProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-envers/deployment/src/main/java/io/quarkus/hibernate/envers/deployment/HibernateEnversProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-envers/deployment/src/main/java/io/quarkus/hibernate/envers/deployment/HibernateEnversProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -36,8 +36,8 @@ CapabilityBuildItem capability() {\n     @BuildStep\n     List<AdditionalJpaModelBuildItem> addJpaModelClasses() {\n         return Arrays.asList(\n-                new AdditionalJpaModelBuildItem(org.hibernate.envers.DefaultRevisionEntity.class),\n-                new AdditionalJpaModelBuildItem(org.hibernate.envers.DefaultTrackingModifiedEntitiesRevisionEntity.class));\n+                new AdditionalJpaModelBuildItem(\"org.hibernate.envers.DefaultRevisionEntity\"),\n+                new AdditionalJpaModelBuildItem(\"org.hibernate.envers.DefaultTrackingModifiedEntitiesRevisionEntity\"));\n     }\n \n     @BuildStep"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "extensions/hibernate-orm/banned-signatures.txt",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/banned-signatures.txt",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/banned-signatures.txt",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/banned-signatures.txt?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172"
  },
  {
    "sha": "bb6c77957b0c2f36824e9ff6fb55f1059601b831",
    "filename": "extensions/hibernate-orm/deployment/banned-signatures.txt",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/banned-signatures.txt",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/banned-signatures.txt",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/banned-signatures.txt?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -0,0 +1 @@\n+java.lang.Class#getName()\n\\ No newline at end of file"
  },
  {
    "sha": "5d1f38976396c4487a9d536f76ab265f0917f7f1",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/AdditionalJpaModelBuildItem.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/AdditionalJpaModelBuildItem.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/AdditionalJpaModelBuildItem.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/AdditionalJpaModelBuildItem.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -1,5 +1,7 @@\n package io.quarkus.hibernate.orm.deployment;\n \n+import java.util.Objects;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n@@ -11,8 +13,9 @@\n \n     private final String className;\n \n-    public AdditionalJpaModelBuildItem(Class<?> klass) {\n-        this.className = klass.getName();\n+    public AdditionalJpaModelBuildItem(String className) {\n+        Objects.requireNonNull(className);\n+        this.className = className;\n     }\n \n     public String getClassName() {"
  },
  {
    "sha": "d32e1e307a20236a009c9504c90341f948699d36",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/Dialects.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/Dialects.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/Dialects.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/Dialects.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -0,0 +1,44 @@\n+package io.quarkus.hibernate.orm.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.datasource.common.runtime.DatabaseKind;\n+import io.quarkus.deployment.configuration.ConfigurationError;\n+\n+public final class Dialects {\n+\n+    private Dialects() {\n+        //utility\n+    }\n+\n+    public static Optional<String> guessDialect(String resolvedDbKind) {\n+        // For now select the latest dialect from the driver\n+        // later, we can keep doing that but also avoid DCE\n+        // of all the dialects we want in so that people can override them\n+        if (DatabaseKind.isDB2(resolvedDbKind)) {\n+            return Optional.of(\"org.hibernate.dialect.DB297Dialect\");\n+        }\n+        if (DatabaseKind.isPostgreSQL(resolvedDbKind)) {\n+            return Optional.of(\"io.quarkus.hibernate.orm.runtime.dialect.QuarkusPostgreSQL10Dialect\");\n+        }\n+        if (DatabaseKind.isH2(resolvedDbKind)) {\n+            return Optional.of(\"io.quarkus.hibernate.orm.runtime.dialect.QuarkusH2Dialect\");\n+        }\n+        if (DatabaseKind.isMariaDB(resolvedDbKind)) {\n+            return Optional.of(\"org.hibernate.dialect.MariaDB103Dialect\");\n+        }\n+        if (DatabaseKind.isMySQL(resolvedDbKind)) {\n+            return Optional.of(\"org.hibernate.dialect.MySQL8Dialect\");\n+        }\n+        if (DatabaseKind.isDerby(resolvedDbKind)) {\n+            return Optional.of(\"org.hibernate.dialect.DerbyTenSevenDialect\");\n+        }\n+        if (DatabaseKind.isMsSQL(resolvedDbKind)) {\n+            return Optional.of(\"org.hibernate.dialect.SQLServer2012Dialect\");\n+        }\n+\n+        String error = \"Hibernate extension could not guess the dialect from the database kind '\" + resolvedDbKind\n+                + \"'. Add an explicit '\" + HibernateOrmProcessor.HIBERNATE_ORM_CONFIG_PREFIX + \"dialect' property.\";\n+        throw new ConfigurationError(error);\n+    }\n+}"
  },
  {
    "sha": "915e252996ff1f952d0cb35107504163fb7fbc55",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmAnnotations.java",
    "status": "modified",
    "additions": 16,
    "deletions": 31,
    "changes": 47,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmAnnotations.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmAnnotations.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmAnnotations.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -4,21 +4,6 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.hibernate.annotations.AnyMetaDef;\n-import org.hibernate.annotations.AnyMetaDefs;\n-import org.hibernate.annotations.FetchProfile;\n-import org.hibernate.annotations.FetchProfiles;\n-import org.hibernate.annotations.FilterDef;\n-import org.hibernate.annotations.FilterDefs;\n-import org.hibernate.annotations.GenericGenerator;\n-import org.hibernate.annotations.GenericGenerators;\n-import org.hibernate.annotations.ListIndexBase;\n-import org.hibernate.annotations.NamedNativeQueries;\n-import org.hibernate.annotations.NamedNativeQuery;\n-import org.hibernate.annotations.NamedQueries;\n-import org.hibernate.annotations.NamedQuery;\n-import org.hibernate.annotations.TypeDef;\n-import org.hibernate.annotations.TypeDefs;\n import org.jboss.jandex.DotName;\n \n public final class HibernateOrmAnnotations {\n@@ -27,20 +12,20 @@ private HibernateOrmAnnotations() {\n     }\n \n     public static final List<DotName> PACKAGE_ANNOTATIONS = Collections.unmodifiableList(Arrays.asList(\n-            DotName.createSimple(AnyMetaDef.class.getName()),\n-            DotName.createSimple(AnyMetaDefs.class.getName()),\n-            DotName.createSimple(FetchProfile.class.getName()),\n-            DotName.createSimple(FetchProfile.FetchOverride.class.getName()),\n-            DotName.createSimple(FetchProfiles.class.getName()),\n-            DotName.createSimple(FilterDef.class.getName()),\n-            DotName.createSimple(FilterDefs.class.getName()),\n-            DotName.createSimple(GenericGenerator.class.getName()),\n-            DotName.createSimple(GenericGenerators.class.getName()),\n-            DotName.createSimple(ListIndexBase.class.getName()),\n-            DotName.createSimple(NamedNativeQueries.class.getName()),\n-            DotName.createSimple(NamedNativeQuery.class.getName()),\n-            DotName.createSimple(NamedQueries.class.getName()),\n-            DotName.createSimple(NamedQuery.class.getName()),\n-            DotName.createSimple(TypeDef.class.getName()),\n-            DotName.createSimple(TypeDefs.class.getName())));\n+            DotName.createSimple(\"org.hibernate.annotations.AnyMetaDef\"),\n+            DotName.createSimple(\"org.hibernate.annotations.AnyMetaDefs\"),\n+            DotName.createSimple(\"org.hibernate.annotations.FetchProfile\"),\n+            DotName.createSimple(\"org.hibernate.annotations.FetchProfile$FetchOverride\"),\n+            DotName.createSimple(\"org.hibernate.annotations.FetchProfiles\"),\n+            DotName.createSimple(\"org.hibernate.annotations.FilterDef\"),\n+            DotName.createSimple(\"org.hibernate.annotations.FilterDefs\"),\n+            DotName.createSimple(\"org.hibernate.annotations.GenericGenerator\"),\n+            DotName.createSimple(\"org.hibernate.annotations.GenericGenerators\"),\n+            DotName.createSimple(\"org.hibernate.annotations.ListIndexBase\"),\n+            DotName.createSimple(\"org.hibernate.annotations.NamedNativeQueries\"),\n+            DotName.createSimple(\"org.hibernate.annotations.NamedNativeQuery\"),\n+            DotName.createSimple(\"org.hibernate.annotations.NamedQueries\"),\n+            DotName.createSimple(\"org.hibernate.annotations.NamedQuery\"),\n+            DotName.createSimple(\"org.hibernate.annotations.TypeDef\"),\n+            DotName.createSimple(\"org.hibernate.annotations.TypeDefs\")));\n }"
  },
  {
    "sha": "3585e445b13fb9475d4ae28fc73e4d4c0cc2f1ee",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmCdiProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -6,8 +6,6 @@\n \n import javax.enterprise.inject.Default;\n import javax.inject.Singleton;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n \n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n@@ -33,19 +31,19 @@\n \n public class HibernateOrmCdiProcessor {\n \n-    private static final List<DotName> SESSION_FACTORY_EXPOSED_TYPES = Arrays.asList(\n-            DotName.createSimple(EntityManagerFactory.class.getName()),\n-            DotName.createSimple(SessionFactory.class.getName()));\n-    private static final List<DotName> SESSION_EXPOSED_TYPES = Arrays.asList(\n-            DotName.createSimple(EntityManager.class.getName()),\n-            DotName.createSimple(Session.class.getName()));\n+    public static final List<DotName> SESSION_FACTORY_EXPOSED_TYPES = Arrays.asList(\n+            DotName.createSimple(\"javax.persistence.EntityManagerFactory\"),\n+            DotName.createSimple(\"org.hibernate.SessionFactory\"));\n+    public static final List<DotName> SESSION_EXPOSED_TYPES = Arrays.asList(\n+            DotName.createSimple(\"javax.persistence.EntityManager\"),\n+            DotName.createSimple(\"org.hibernate.Session\"));\n \n-    private static final DotName PERSISTENCE_UNIT_QUALIFIER = DotName.createSimple(PersistenceUnit.class.getName());\n+    public static final DotName PERSISTENCE_UNIT_QUALIFIER = DotName.createSimple(\"io.quarkus.hibernate.orm.PersistenceUnit\");\n \n-    private static final DotName JPA_PERSISTENCE_UNIT = DotName.createSimple(javax.persistence.PersistenceUnit.class.getName());\n+    public static final DotName JPA_PERSISTENCE_UNIT = DotName.createSimple(\"javax.persistence.PersistenceUnit\");\n \n-    private static final DotName JPA_PERSISTENCE_CONTEXT = DotName\n-            .createSimple(javax.persistence.PersistenceContext.class.getName());\n+    public static final DotName JPA_PERSISTENCE_CONTEXT = DotName\n+            .createSimple(\"javax.persistence.PersistenceContext\");\n \n     @BuildStep\n     AnnotationsTransformerBuildItem convertJpaResourceAnnotationsToQualifier("
  },
  {
    "sha": "8557ea2f0185f96a937b753968c9b1b1bd366044",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java",
    "status": "modified",
    "additions": 22,
    "deletions": 67,
    "changes": 89,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -31,30 +31,20 @@\n import javax.enterprise.inject.Default;\n import javax.inject.Singleton;\n import javax.persistence.AttributeConverter;\n-import javax.persistence.Entity;\n-import javax.persistence.MappedSuperclass;\n import javax.persistence.SharedCacheMode;\n import javax.persistence.ValidationMode;\n-import javax.persistence.metamodel.StaticMetamodel;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n import javax.transaction.TransactionManager;\n \n import org.hibernate.MultiTenancyStrategy;\n-import org.hibernate.annotations.Proxy;\n import org.hibernate.boot.archive.scan.spi.ClassDescriptor;\n import org.hibernate.boot.archive.scan.spi.PackageDescriptor;\n import org.hibernate.cfg.AvailableSettings;\n import org.hibernate.cfg.beanvalidation.BeanValidationIntegrator;\n-import org.hibernate.dialect.DB297Dialect;\n-import org.hibernate.dialect.DerbyTenSevenDialect;\n-import org.hibernate.dialect.MariaDB103Dialect;\n-import org.hibernate.dialect.MySQL8Dialect;\n-import org.hibernate.dialect.SQLServer2012Dialect;\n import org.hibernate.integrator.spi.Integrator;\n import org.hibernate.internal.util.collections.ArrayHelper;\n import org.hibernate.jpa.boot.internal.ParsedPersistenceXmlDescriptor;\n import org.hibernate.loader.BatchFetchStyle;\n-import org.hibernate.proxy.HibernateProxy;\n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.jandex.AnnotationTarget.Kind;\n import org.jboss.jandex.AnnotationValue;\n@@ -78,7 +68,6 @@\n import io.quarkus.arc.deployment.staticmethods.InterceptedStaticMethodsTransformersRegisteredBuildItem;\n import io.quarkus.arc.processor.DotNames;\n import io.quarkus.datasource.common.runtime.DataSourceUtil;\n-import io.quarkus.datasource.common.runtime.DatabaseKind;\n import io.quarkus.deployment.Capabilities;\n import io.quarkus.deployment.Capability;\n import io.quarkus.deployment.Feature;\n@@ -121,13 +110,10 @@\n import io.quarkus.hibernate.orm.runtime.boot.QuarkusPersistenceUnitDefinition;\n import io.quarkus.hibernate.orm.runtime.boot.scan.QuarkusScanner;\n import io.quarkus.hibernate.orm.runtime.cdi.QuarkusArcBeanContainer;\n-import io.quarkus.hibernate.orm.runtime.dialect.QuarkusH2Dialect;\n-import io.quarkus.hibernate.orm.runtime.dialect.QuarkusPostgreSQL10Dialect;\n import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrationStaticDescriptor;\n import io.quarkus.hibernate.orm.runtime.proxies.PreGeneratedProxies;\n import io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver;\n import io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver;\n-import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n import io.quarkus.panache.common.deployment.HibernateEnhancersRegisteredBuildItem;\n import io.quarkus.panache.common.deployment.HibernateModelClassCandidatesForFieldAccessBuildItem;\n import io.quarkus.runtime.LaunchMode;\n@@ -151,19 +137,21 @@\n \n     private static final Logger LOG = Logger.getLogger(HibernateOrmProcessor.class);\n \n-    private static final DotName TENANT_CONNECTION_RESOLVER = DotName.createSimple(TenantConnectionResolver.class.getName());\n-    private static final DotName TENANT_RESOLVER = DotName.createSimple(TenantResolver.class.getName());\n+    public static final DotName TENANT_CONNECTION_RESOLVER = DotName\n+            .createSimple(\"io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver\");\n+    public static final DotName TENANT_RESOLVER = DotName\n+            .createSimple(\"io.quarkus.hibernate.orm.runtime.tenant.TenantResolver\");\n \n-    private static final DotName STATIC_METAMODEL = DotName.createSimple(StaticMetamodel.class.getName());\n-    private static final DotName PERSISTENCE_UNIT = DotName.createSimple(PersistenceUnit.class.getName());\n-    private static final DotName PERSISTENCE_UNIT_REPEATABLE_CONTAINER = DotName\n-            .createSimple(PersistenceUnit.List.class.getName());\n-    private static final DotName JPA_ENTITY = DotName.createSimple(Entity.class.getName());\n-    private static final DotName MAPPED_SUPERCLASS = DotName.createSimple(MappedSuperclass.class.getName());\n+    public static final DotName STATIC_METAMODEL = DotName.createSimple(\"javax.persistence.metamodel.StaticMetamodel\");\n+    public static final DotName PERSISTENCE_UNIT = DotName.createSimple(\"io.quarkus.hibernate.orm.PersistenceUnit\");\n+    public static final DotName PERSISTENCE_UNIT_REPEATABLE_CONTAINER = DotName\n+            .createSimple(\"io.quarkus.hibernate.orm.PersistenceUnit$List\");\n+    public static final DotName JPA_ENTITY = DotName.createSimple(\"javax.persistence.Entity\");\n+    public static final DotName MAPPED_SUPERCLASS = DotName.createSimple(\"javax.persistence.MappedSuperclass\");\n+    public static final DotName PROXY = DotName.createSimple(\"org.hibernate.annotations.Proxy\");\n \n     private static final String INTEGRATOR_SERVICE_FILE = \"META-INF/services/org.hibernate.integrator.spi.Integrator\";\n-\n-    private static final String PROXY_CACHE = HibernateOrmProcessor.class.getName() + \".proxyCache\";\n+    public static final String HIBERNATE_PROXY_INTERFACENAME = \"org.hibernate.proxy.HibernateProxy\";\n \n     @BuildStep\n     CapabilityBuildItem capability() {\n@@ -200,7 +188,7 @@ void includeArchivesHostingEntityPackagesInIndex(HibernateOrmConfig hibernateOrm\n \n     @BuildStep\n     AdditionalIndexedClassesBuildItem addPersistenceUnitAnnotationToIndex() {\n-        return new AdditionalIndexedClassesBuildItem(PersistenceUnit.class.getName());\n+        return new AdditionalIndexedClassesBuildItem(PERSISTENCE_UNIT.toString());\n     }\n \n     // We do our own enhancement during the compilation phase, so disable any\n@@ -776,7 +764,7 @@ private static void producePersistenceUnitDescriptorFromConfig(\n \n         Optional<String> dialect = persistenceUnitConfig.dialect.dialect;\n         if (!dialect.isPresent()) {\n-            dialect = guessDialect(jdbcDataSource.getDbKind());\n+            dialect = Dialects.guessDialect(jdbcDataSource.getDbKind());\n         }\n \n         if (!dialect.isPresent()) {\n@@ -938,37 +926,6 @@ private static void producePersistenceUnitDescriptorFromConfig(\n                         false, false));\n     }\n \n-    public static Optional<String> guessDialect(String resolvedDbKind) {\n-        // For now select the latest dialect from the driver\n-        // later, we can keep doing that but also avoid DCE\n-        // of all the dialects we want in so that people can override them\n-        if (DatabaseKind.isDB2(resolvedDbKind)) {\n-            return Optional.of(DB297Dialect.class.getName());\n-        }\n-        if (DatabaseKind.isPostgreSQL(resolvedDbKind)) {\n-            return Optional.of(QuarkusPostgreSQL10Dialect.class.getName());\n-        }\n-        if (DatabaseKind.isH2(resolvedDbKind)) {\n-            return Optional.of(QuarkusH2Dialect.class.getName());\n-        }\n-        if (DatabaseKind.isMariaDB(resolvedDbKind)) {\n-            return Optional.of(MariaDB103Dialect.class.getName());\n-        }\n-        if (DatabaseKind.isMySQL(resolvedDbKind)) {\n-            return Optional.of(MySQL8Dialect.class.getName());\n-        }\n-        if (DatabaseKind.isDerby(resolvedDbKind)) {\n-            return Optional.of(DerbyTenSevenDialect.class.getName());\n-        }\n-        if (DatabaseKind.isMsSQL(resolvedDbKind)) {\n-            return Optional.of(SQLServer2012Dialect.class.getName());\n-        }\n-\n-        String error = \"Hibernate extension could not guess the dialect from the database kind '\" + resolvedDbKind\n-                + \"'. Add an explicit '\" + HIBERNATE_ORM_CONFIG_PREFIX + \"dialect' property.\";\n-        throw new ConfigurationError(error);\n-    }\n-\n     private static void setMaxFetchDepth(ParsedPersistenceXmlDescriptor descriptor, OptionalInt maxFetchDepth) {\n         descriptor.getProperties().setProperty(AvailableSettings.MAX_FETCH_DEPTH, String.valueOf(maxFetchDepth.getAsInt()));\n     }\n@@ -1263,7 +1220,7 @@ private PreGeneratedProxies generatedProxies(Set<String> managedClassAndPackageN\n         //create a map of entity to proxy type\n         PreGeneratedProxies preGeneratedProxies = new PreGeneratedProxies();\n         Map<String, String> proxyAnnotations = new HashMap<>();\n-        for (AnnotationInstance i : combinedIndex.getAnnotations(DotName.createSimple(Proxy.class.getName()))) {\n+        for (AnnotationInstance i : combinedIndex.getAnnotations(PROXY)) {\n             AnnotationValue proxyClass = i.value(\"proxyClass\");\n             if (proxyClass == null) {\n                 continue;\n@@ -1277,18 +1234,18 @@ private PreGeneratedProxies generatedProxies(Set<String> managedClassAndPackageN\n                         && !isModified(managedClassOrPackageName, changedClasses, combinedIndex)) {\n                     result = proxyCache.cache.get(managedClassOrPackageName);\n                 } else {\n-                    Set<Class<?>> proxyInterfaces = new HashSet<>();\n-                    proxyInterfaces.add(HibernateProxy.class); //always added\n+                    Set<String> proxyInterfaceNames = new TreeSet<>();\n+                    proxyInterfaceNames.add(HIBERNATE_PROXY_INTERFACENAME); //always added\n                     String proxy = proxyAnnotations.get(managedClassOrPackageName);\n                     if (proxy == null) {\n                         if (!proxyHelper.isProxiable(managedClassOrPackageName)) {\n                             //if there is no @Proxy we need to make sure the actual class is proxiable\n                             continue;\n                         }\n                     } else {\n-                        proxyInterfaces.add(proxyHelper.uninitializedClass(proxy));\n+                        proxyInterfaceNames.add(proxy);\n                     }\n-                    Class<?> mappedClass = proxyHelper.uninitializedClass(managedClassOrPackageName);\n+                    final String mappedClass = managedClassOrPackageName;\n                     for (ClassInfo subclass : combinedIndex\n                             .getAllKnownSubclasses(DotName.createSimple(managedClassOrPackageName))) {\n                         String subclassName = subclass.name().toString();\n@@ -1298,13 +1255,11 @@ private PreGeneratedProxies generatedProxies(Set<String> managedClassAndPackageN\n                         }\n                         proxy = proxyAnnotations.get(subclassName);\n                         if (proxy != null) {\n-                            proxyInterfaces.add(proxyHelper.uninitializedClass(proxy));\n+                            proxyInterfaceNames.add(proxy);\n                         }\n                     }\n-                    DynamicType.Unloaded<?> unloaded = proxyHelper.buildUnloadedProxy(mappedClass,\n-                            toArray(proxyInterfaces));\n-                    result = new CachedProxy(unloaded,\n-                            proxyInterfaces.stream().map(Class::getName).collect(Collectors.toSet()));\n+                    DynamicType.Unloaded<?> unloaded = proxyHelper.buildUnloadedProxy(mappedClass, proxyInterfaceNames);\n+                    result = new CachedProxy(unloaded, proxyInterfaceNames);\n                     proxyCache.cache.put(managedClassOrPackageName, result);\n                 }\n                 for (Entry<TypeDescription, byte[]> i : result.proxyDef.getAllTypes().entrySet()) {"
  },
  {
    "sha": "3e47c390639ee8498e8ce61f97977f55581119d4",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateUserTypeProcessor.java",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateUserTypeProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateUserTypeProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateUserTypeProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -5,9 +5,6 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import org.hibernate.annotations.Type;\n-import org.hibernate.annotations.TypeDef;\n-import org.hibernate.annotations.TypeDefs;\n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.jandex.AnnotationValue;\n import org.jboss.jandex.DotName;\n@@ -21,9 +18,9 @@\n public final class HibernateUserTypeProcessor {\n     private static final String TYPE_VALUE = \"type\";\n     private static final String TYPE_CLASS_VALUE = \"typeClass\";\n-    private static final DotName TYPE = DotName.createSimple(Type.class.getName());\n-    private static final DotName TYPE_DEFINITION = DotName.createSimple(TypeDef.class.getName());\n-    private static final DotName TYPE_DEFINITIONS = DotName.createSimple(TypeDefs.class.getName());\n+    public static final DotName TYPE = DotName.createSimple(\"org.hibernate.annotations.Type\");\n+    public static final DotName TYPE_DEFINITION = DotName.createSimple(\"org.hibernate.annotations.TypeDef\");\n+    public static final DotName TYPE_DEFINITIONS = DotName.createSimple(\"org.hibernate.annotations.TypeDefs\");\n \n     @BuildStep\n     public void build(BuildProducer<ReflectiveClassBuildItem> reflectiveClass, CombinedIndexBuildItem combinedIndexBuildItem) {"
  },
  {
    "sha": "1d15ac09263493afa44e5d4d4fad37407cf9bc59",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java",
    "status": "modified",
    "additions": 9,
    "deletions": 15,
    "changes": 24,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaJandexScavenger.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -9,12 +9,6 @@\n import java.util.TreeSet;\n import java.util.stream.Collectors;\n \n-import javax.persistence.ElementCollection;\n-import javax.persistence.Embeddable;\n-import javax.persistence.Embedded;\n-import javax.persistence.Entity;\n-import javax.persistence.MappedSuperclass;\n-\n import org.jboss.jandex.AnnotationInstance;\n import org.jboss.jandex.AnnotationTarget;\n import org.jboss.jandex.ClassInfo;\n@@ -38,16 +32,16 @@\n  * @author Emmanuel Bernard emmanuel@hibernate.org\n  * @author Sanne Grinovero <sanne@hibernate.org>\n  */\n-final class JpaJandexScavenger {\n+public final class JpaJandexScavenger {\n \n-    private static final DotName JPA_ENTITY = DotName.createSimple(Entity.class.getName());\n-    private static final DotName EMBEDDABLE = DotName.createSimple(Embeddable.class.getName());\n-    private static final List<DotName> EMBEDDED_ANNOTATIONS = Arrays.asList(\n-            DotName.createSimple(Embedded.class.getName()),\n-            DotName.createSimple(ElementCollection.class.getName()));\n-    private static final DotName MAPPED_SUPERCLASS = DotName.createSimple(MappedSuperclass.class.getName());\n+    public static final DotName JPA_ENTITY = DotName.createSimple(\"javax.persistence.Entity\");\n+    public static final DotName EMBEDDABLE = DotName.createSimple(\"javax.persistence.Embeddable\");\n+    public static final List<DotName> EMBEDDED_ANNOTATIONS = Arrays.asList(\n+            DotName.createSimple(\"javax.persistence.Embedded\"),\n+            DotName.createSimple(\"javax.persistence.ElementCollection\"));\n+    public static final DotName MAPPED_SUPERCLASS = DotName.createSimple(\"javax.persistence.MappedSuperclass\");\n \n-    private static final DotName ENUM = DotName.createSimple(Enum.class.getName());\n+    public static final DotName ENUM = DotName.createSimple(\"java.lang.Enum\");\n \n     private final List<PersistenceXmlDescriptorBuildItem> explicitDescriptors;\n     private final BuildProducer<ReflectiveClassBuildItem> reflectiveClass;\n@@ -96,7 +90,7 @@ public JpaEntitiesBuildItem discoverModelAndRegisterForReflection() throws IOExc\n         domainObjectCollector.registerAllForReflection(reflectiveClass);\n \n         if (!enumTypeCollector.isEmpty()) {\n-            reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, Enum.class.getName()));\n+            reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, \"java.lang.Enum\"));\n             for (String className : enumTypeCollector) {\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, className));\n             }"
  },
  {
    "sha": "3419488fa8a2cd2b843bd1a70e762d0507284ec9",
    "filename": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ProxyBuildingHelper.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ProxyBuildingHelper.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ProxyBuildingHelper.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/ProxyBuildingHelper.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -1,6 +1,7 @@\n package io.quarkus.hibernate.orm.deployment;\n \n import java.lang.reflect.Modifier;\n+import java.util.Set;\n \n import org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl;\n import org.hibernate.proxy.pojo.bytebuddy.ByteBuddyProxyHelper;\n@@ -22,7 +23,13 @@ public ProxyBuildingHelper(ClassLoader contextClassLoader) {\n         this.contextClassLoader = contextClassLoader;\n     }\n \n-    public DynamicType.Unloaded<?> buildUnloadedProxy(Class<?> mappedClass, Class[] interfaces) {\n+    public DynamicType.Unloaded<?> buildUnloadedProxy(String mappedClassName, Set<String> interfaceNames) {\n+        final Class[] interfaces = new Class[interfaceNames.size()];\n+        int i = 0;\n+        for (String name : interfaceNames) {\n+            interfaces[i++] = uninitializedClass(name);\n+        }\n+        final Class<?> mappedClass = uninitializedClass(mappedClassName);\n         return getByteBuddyProxyHelper().buildUnloadedProxy(mappedClass, interfaces);\n     }\n \n@@ -36,7 +43,7 @@ private ByteBuddyProxyHelper getByteBuddyProxyHelper() {\n         return this.byteBuddyProxyHelper;\n     }\n \n-    public Class<?> uninitializedClass(String entity) {\n+    private Class<?> uninitializedClass(String entity) {\n         try {\n             return Class.forName(entity, false, contextClassLoader);\n         } catch (ClassNotFoundException e) {"
  },
  {
    "sha": "0ae7c70b4f583ee00cdcd0e9a97e6bf022c233d0",
    "filename": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/ConstantsTest.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/ConstantsTest.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/ConstantsTest.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/ConstantsTest.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -0,0 +1,114 @@\n+package io.quarkus.hibernate.orm;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.metamodel.StaticMetamodel;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.dialect.DB297Dialect;\n+import org.hibernate.dialect.DerbyTenSevenDialect;\n+import org.hibernate.dialect.MariaDB103Dialect;\n+import org.hibernate.dialect.MySQL8Dialect;\n+import org.hibernate.dialect.SQLServer2012Dialect;\n+import org.hibernate.proxy.HibernateProxy;\n+import org.jboss.jandex.DotName;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.datasource.common.runtime.DatabaseKind;\n+import io.quarkus.hibernate.orm.deployment.Dialects;\n+import io.quarkus.hibernate.orm.deployment.HibernateOrmCdiProcessor;\n+import io.quarkus.hibernate.orm.deployment.HibernateOrmProcessor;\n+import io.quarkus.hibernate.orm.deployment.HibernateUserTypeProcessor;\n+import io.quarkus.hibernate.orm.deployment.JpaJandexScavenger;\n+import io.quarkus.hibernate.orm.runtime.dialect.QuarkusH2Dialect;\n+import io.quarkus.hibernate.orm.runtime.dialect.QuarkusPostgreSQL10Dialect;\n+\n+public class ConstantsTest {\n+\n+    @Test\n+    public void testConstantsInHibernateOrmProcessor() {\n+        assertMatch(HibernateOrmProcessor.TENANT_CONNECTION_RESOLVER,\n+                io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver.class);\n+        assertMatch(HibernateOrmProcessor.TENANT_RESOLVER, io.quarkus.hibernate.orm.runtime.tenant.TenantResolver.class);\n+        assertMatch(HibernateOrmProcessor.STATIC_METAMODEL, StaticMetamodel.class);\n+        assertMatch(HibernateOrmProcessor.PERSISTENCE_UNIT, PersistenceUnit.class);\n+        assertMatch(HibernateOrmProcessor.PERSISTENCE_UNIT_REPEATABLE_CONTAINER, PersistenceUnit.List.class);\n+        assertMatch(HibernateOrmProcessor.JPA_ENTITY, javax.persistence.Entity.class);\n+        assertMatch(HibernateOrmProcessor.MAPPED_SUPERCLASS, javax.persistence.MappedSuperclass.class);\n+        assertMatch(HibernateOrmProcessor.PROXY, org.hibernate.annotations.Proxy.class);\n+        Assertions.assertEquals(HibernateProxy.class.getName(), HibernateOrmProcessor.HIBERNATE_PROXY_INTERFACENAME);\n+    }\n+\n+    @Test\n+    public void testHibernateUserTypeProcessor() {\n+        assertMatch(HibernateUserTypeProcessor.TYPE, org.hibernate.annotations.Type.class);\n+        assertMatch(HibernateUserTypeProcessor.TYPE_DEFINITION, org.hibernate.annotations.TypeDef.class);\n+        assertMatch(HibernateUserTypeProcessor.TYPE_DEFINITIONS, org.hibernate.annotations.TypeDefs.class);\n+    }\n+\n+    @Test\n+    public void testHibernateOrmCdiProcessor() {\n+        assertMatch(HibernateOrmCdiProcessor.SESSION_FACTORY_EXPOSED_TYPES, EntityManagerFactory.class, SessionFactory.class);\n+        assertMatch(HibernateOrmCdiProcessor.SESSION_EXPOSED_TYPES, EntityManager.class, Session.class);\n+        assertMatch(HibernateOrmCdiProcessor.PERSISTENCE_UNIT_QUALIFIER, PersistenceUnit.class);\n+        assertMatch(HibernateOrmCdiProcessor.JPA_PERSISTENCE_UNIT, javax.persistence.PersistenceUnit.class);\n+        assertMatch(HibernateOrmCdiProcessor.JPA_PERSISTENCE_CONTEXT, javax.persistence.PersistenceContext.class);\n+    }\n+\n+    @Test\n+    public void testJpaJandexScavenger() {\n+        assertMatch(JpaJandexScavenger.JPA_ENTITY, Entity.class);\n+        assertMatch(JpaJandexScavenger.EMBEDDABLE, Embeddable.class);\n+        assertMatch(JpaJandexScavenger.EMBEDDED_ANNOTATIONS, Embedded.class, ElementCollection.class);\n+        assertMatch(JpaJandexScavenger.MAPPED_SUPERCLASS, MappedSuperclass.class);\n+        assertMatch(JpaJandexScavenger.ENUM, Enum.class);\n+    }\n+\n+    @Test\n+    public void testDialectNames() {\n+        assertDialectMatch(DatabaseKind.DB2, DB297Dialect.class);\n+        assertDialectMatch(DatabaseKind.POSTGRESQL, QuarkusPostgreSQL10Dialect.class);\n+        assertDialectMatch(DatabaseKind.H2, QuarkusH2Dialect.class);\n+        assertDialectMatch(DatabaseKind.MARIADB, MariaDB103Dialect.class);\n+        assertDialectMatch(DatabaseKind.MYSQL, MySQL8Dialect.class);\n+        assertDialectMatch(DatabaseKind.DERBY, DerbyTenSevenDialect.class);\n+        assertDialectMatch(DatabaseKind.MSSQL, SQLServer2012Dialect.class);\n+    }\n+\n+    private void assertDialectMatch(String dbName, Class<?> dialectClass) {\n+        final Optional<String> guessDialect = Dialects.guessDialect(dbName);\n+        Assertions.assertTrue(guessDialect.isPresent());\n+        Assertions.assertEquals(dialectClass.getName(), guessDialect.get());\n+    }\n+\n+    private void assertMatch(final DotName dotName, final Class<?> clazz) {\n+        Assertions.assertEquals(dotName.toString(), clazz.getName());\n+    }\n+\n+    private void assertMatch(final Collection<DotName> dotNames, final Class<?>... clazzez) {\n+        Assertions.assertEquals(dotNames.size(), clazzez.length);\n+        for (Class c : clazzez) {\n+            Assertions.assertTrue(oneMatches(dotNames, c));\n+        }\n+    }\n+\n+    private boolean oneMatches(Collection<DotName> dotNames, Class c) {\n+        int matches = 0;\n+        for (DotName d : dotNames) {\n+            if (c.getName().equals(d.toString()))\n+                matches++;\n+        }\n+        return 1 == matches;\n+    }\n+\n+}"
  },
  {
    "sha": "75100dfbfe3b02963e78cc3ac50451d8a784fceb",
    "filename": "extensions/hibernate-orm/pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/pom.xml",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/pom.xml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/pom.xml?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -72,6 +72,9 @@\n                                     <bundledSignature>jdk-internal-14</bundledSignature>\n                                     <bundledSignature>jdk-internal-15</bundledSignature>\n                                 </bundledSignatures>\n+                                <signaturesFiles>\n+                                    <signaturesFile>./banned-signatures.txt</signaturesFile>\n+                                </signaturesFiles>\n                                 <failOnMissingClasses>false</failOnMissingClasses>\n                                 <ignoreSignaturesOfMissingClasses>true</ignoreSignaturesOfMissingClasses>\n                             </configuration>"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "extensions/hibernate-orm/runtime/banned-signatures.txt",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/runtime/banned-signatures.txt",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-orm/runtime/banned-signatures.txt",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-orm/runtime/banned-signatures.txt?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172"
  },
  {
    "sha": "d348bf410d9929cfe84ea7276231008a710d603e",
    "filename": "extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/hibernate-reactive/deployment/src/main/java/io/quarkus/hibernate/reactive/deployment/HibernateReactiveProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -43,6 +43,7 @@\n import io.quarkus.deployment.configuration.ConfigurationError;\n import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.hibernate.orm.deployment.Dialects;\n import io.quarkus.hibernate.orm.deployment.HibernateConfigUtil;\n import io.quarkus.hibernate.orm.deployment.HibernateOrmConfig;\n import io.quarkus.hibernate.orm.deployment.HibernateOrmConfigPersistenceUnit;\n@@ -206,7 +207,7 @@ private static ParsedPersistenceXmlDescriptor generateReactivePersistenceUnit(\n         //we have no persistence.xml so we will create a default one\n         Optional<String> dialect = persistenceUnitConfig.dialect.dialect;\n         if (!dialect.isPresent()) {\n-            dialect = HibernateOrmProcessor.guessDialect(dbKind);\n+            dialect = Dialects.guessDialect(dbKind);\n         }\n \n         String dialectClassName = dialect.get();"
  },
  {
    "sha": "966e49b16c752014d09e45f7761a77cbe679ab7b",
    "filename": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -203,10 +203,10 @@ private void processCompanions(CombinedIndexBuildItem index,\n     }\n \n     @BuildStep\n-    List<AdditionalJpaModelBuildItem> produceModel() {\n+    AdditionalJpaModelBuildItem produceModel() {\n         // only useful for the index resolution: hibernate will register it to be transformed, but BuildMojo\n         // only transforms classes from the application jar, so we do our own transforming\n-        return Collections.singletonList(new AdditionalJpaModelBuildItem(PanacheEntity.class));\n+        return new AdditionalJpaModelBuildItem(\"io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity\");\n     }\n \n     @BuildStep"
  },
  {
    "sha": "af4c8273f01a6fd62a3d1fc4f722394f54392613",
    "filename": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -64,11 +64,10 @@ FeatureBuildItem featureBuildItem() {\n     }\n \n     @BuildStep\n-    List<AdditionalJpaModelBuildItem> produceModel() {\n+    AdditionalJpaModelBuildItem produceModel() {\n         // only useful for the index resolution: hibernate will register it to be transformed, but BuildMojo\n         // only transforms classes from the application jar, so we do our own transforming\n-        return Collections.singletonList(\n-                new AdditionalJpaModelBuildItem(PanacheEntity.class));\n+        return new AdditionalJpaModelBuildItem(\"io.quarkus.hibernate.orm.panache.PanacheEntity\");\n     }\n \n     @BuildStep"
  },
  {
    "sha": "5e77edd5fa9adcc95318175279fa76e56912f58d",
    "filename": "extensions/panache/hibernate-reactive-panache/deployment/src/main/java/io/quarkus/hibernate/reactive/panache/deployment/PanacheHibernateResourceProcessor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/panache/hibernate-reactive-panache/deployment/src/main/java/io/quarkus/hibernate/reactive/panache/deployment/PanacheHibernateResourceProcessor.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/b0ab87ff4963e201682bea9786a1978b9fbcb172/extensions/panache/hibernate-reactive-panache/deployment/src/main/java/io/quarkus/hibernate/reactive/panache/deployment/PanacheHibernateResourceProcessor.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/extensions/panache/hibernate-reactive-panache/deployment/src/main/java/io/quarkus/hibernate/reactive/panache/deployment/PanacheHibernateResourceProcessor.java?ref=b0ab87ff4963e201682bea9786a1978b9fbcb172",
    "patch": "@@ -56,11 +56,10 @@ FeatureBuildItem featureBuildItem() {\n     }\n \n     @BuildStep\n-    List<AdditionalJpaModelBuildItem> produceModel() {\n+    AdditionalJpaModelBuildItem produceModel() {\n         // only useful for the index resolution: hibernate will register it to be transformed, but BuildMojo\n         // only transforms classes from the application jar, so we do our own transforming\n-        return Collections.singletonList(\n-                new AdditionalJpaModelBuildItem(PanacheEntity.class));\n+        return new AdditionalJpaModelBuildItem(\"io.quarkus.hibernate.reactive.panache.PanacheEntity\");\n     }\n \n     @BuildStep"
  }
]
