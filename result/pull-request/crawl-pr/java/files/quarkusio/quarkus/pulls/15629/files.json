[
  {
    "sha": "140825a7d144b3f4e2e4c90cde412872f3fb4bcb",
    "filename": "integration-tests/narayana-jta/src/test/java/io/quarkus/narayana/jta/TransactionConfPropTest.java",
    "status": "modified",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/quarkusio/quarkus/blob/2931a05d8e72c49de46db0817c4856cd3c8e2556/integration-tests/narayana-jta/src/test/java/io/quarkus/narayana/jta/TransactionConfPropTest.java",
    "raw_url": "https://github.com/quarkusio/quarkus/raw/2931a05d8e72c49de46db0817c4856cd3c8e2556/integration-tests/narayana-jta/src/test/java/io/quarkus/narayana/jta/TransactionConfPropTest.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus/contents/integration-tests/narayana-jta/src/test/java/io/quarkus/narayana/jta/TransactionConfPropTest.java?ref=2931a05d8e72c49de46db0817c4856cd3c8e2556",
    "patch": "@@ -1,5 +1,15 @@\n package io.quarkus.narayana.jta;\n \n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+\n+import javax.inject.Inject;\n+import javax.transaction.TransactionManager;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n@@ -10,6 +20,9 @@\n @QuarkusTest\n public class TransactionConfPropTest {\n \n+    @Inject\n+    TransactionManager tm;\n+\n     /*\n      * verify that the objectStore directory path for JTA can be configured\n      */\n@@ -19,4 +32,123 @@ void testObjectStoreDirPath() {\n         Assertions.assertEquals(\"target/tx-object-store\", // this value is set via application.properties\n                 arjPropertyManager.getObjectStoreEnvironmentBean().getObjectStoreDir());\n     }\n+\n+    @Test\n+    public void testObjectStoreExist() throws Exception {\n+\n+        tm.begin();\n+        assertTrue(tm.getTransaction().enlistResource(new XAResource() {\n+\n+            @Override\n+            public void start(Xid arg0, int arg1) throws XAException {\n+\n+            }\n+\n+            @Override\n+            public boolean setTransactionTimeout(int arg0) throws XAException {\n+                return false;\n+            }\n+\n+            @Override\n+            public void rollback(Xid arg0) throws XAException {\n+\n+            }\n+\n+            @Override\n+            public Xid[] recover(int arg0) throws XAException {\n+                return null;\n+            }\n+\n+            @Override\n+            public int prepare(Xid arg0) throws XAException {\n+                return 0;\n+            }\n+\n+            @Override\n+            public boolean isSameRM(XAResource arg0) throws XAException {\n+                return false;\n+            }\n+\n+            @Override\n+            public int getTransactionTimeout() throws XAException {\n+                return 0;\n+            }\n+\n+            @Override\n+            public void forget(Xid arg0) throws XAException {\n+\n+            }\n+\n+            @Override\n+            public void end(Xid arg0, int arg1) throws XAException {\n+\n+            }\n+\n+            @Override\n+            public void commit(Xid arg0, boolean arg1) throws XAException {\n+\n+            }\n+        }));\n+        assertTrue(tm.getTransaction().enlistResource(new XAResource() {\n+\n+            @Override\n+            public void start(Xid xid, int flags) throws XAException {\n+\n+            }\n+\n+            @Override\n+            public boolean setTransactionTimeout(int seconds) throws XAException {\n+                return false;\n+            }\n+\n+            @Override\n+            public void rollback(Xid xid) throws XAException {\n+\n+            }\n+\n+            @Override\n+            public Xid[] recover(int flag) throws XAException {\n+                return null;\n+            }\n+\n+            @Override\n+            public int prepare(Xid xid) throws XAException {\n+                return 0;\n+            }\n+\n+            @Override\n+            public boolean isSameRM(XAResource xares) throws XAException {\n+                return false;\n+            }\n+\n+            @Override\n+            public int getTransactionTimeout() throws XAException {\n+                return 0;\n+            }\n+\n+            @Override\n+            public void forget(Xid xid) throws XAException {\n+\n+            }\n+\n+            @Override\n+            public void end(Xid xid, int flags) throws XAException {\n+            }\n+\n+            @Override\n+            public void commit(Xid xid, boolean onePhase) throws XAException {\n+\n+            }\n+        }));\n+        try {\n+            tm.commit();\n+        } catch (Exception e) {\n+            tm.rollback();\n+        }\n+\n+        // checking if the object-store is present in expected location\n+        File f = new File(\"target/tx-object-store\");\n+        assertTrue(f.exists());\n+\n+    }\n }"
  }
]
