[
  {
    "sha": "392032a19e39bc03b20aab9f8a1deb23012c61c3",
    "filename": "amazon-dynamodb-quickstart/README.md",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-dynamodb-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-dynamodb-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-dynamodb-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -5,7 +5,11 @@ This example showcases how to use the AWS DynamoDB client with Quarkus. As a pre\n # DynamoDB local instance\n \n Just run it as follows:\n-`docker run --rm --name local-dynamo -p 8000:4569 -e SERVICES=dynamodb -e START_WEB=0 -d localstack/localstack`\n+`docker run --rm --name local-dynamo -p 8000:4566 -e SERVICES=dynamodb -e START_WEB=0 -d localstack/localstack`\n+\n+or use the provided docker-compose file\n+\n+> docker-compose up -d\n \n DynamoDB listens on `localhost:8000` for REST endpoints.\n \n@@ -67,7 +71,7 @@ Stop your localstack container you started at the beginning\n `docker stop local-dynamo`\n \n Start localstack and connect to the network\n-`docker run --rm --network=localstack --name localstack -p 8000:4569 -e SERVICES=dynamodb -e START_WEB=0 -d localstack/localstack`\n+`docker run --rm --network=localstack --name localstack -p 8000:4566 -e SERVICES=dynamodb -e START_WEB=0 -d localstack/localstack`\n \n Create Dynamo table\n ```"
  },
  {
    "sha": "59268a583c883b8acf8054b4d4ef8074a7487607",
    "filename": "amazon-dynamodb-quickstart/docker-compose.yaml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-dynamodb-quickstart/docker-compose.yaml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-dynamodb-quickstart/docker-compose.yaml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-dynamodb-quickstart/docker-compose.yaml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -0,0 +1,11 @@\n+version: '3.5'\n+\n+services:\n+  localstack:\n+    image: localstack/localstack:0.11.2\n+    container_name: local-dynamo\n+    ports:\n+    - 8000:4566\n+    environment:\n+      SERVICES: dynamodb\n+      START_WEB: 0"
  },
  {
    "sha": "f798b67b8f492a6fe437c97430889ea042d6f548",
    "filename": "amazon-s3-quickstart/README.md",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-s3-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-s3-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-s3-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -5,7 +5,11 @@ This example showcases how to use the AWS S3 client with Quarkus. As a prerequis\n # S3 local instance\n \n Just run it as follows:\n-`docker run --rm --name local-s3 -p 8008:4572 -e SERVICES=s3 -e START_WEB=0 -d localstack/localstack`\n+`docker run --rm --name local-s3 -p 8008:4566 -e SERVICES=s3 -e START_WEB=0 -d localstack/localstack`\n+\n+or use the provided docker-compose file\n+\n+> docker-compose up -d\n \n S3 listens on `localhost:8008` for REST endpoints.\n "
  },
  {
    "sha": "becfb87ca0f1f8628f044ab3b46a21485f9344a0",
    "filename": "amazon-s3-quickstart/docker-compose.yaml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-s3-quickstart/docker-compose.yaml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-s3-quickstart/docker-compose.yaml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-s3-quickstart/docker-compose.yaml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -0,0 +1,11 @@\n+version: '3.5'\n+\n+services:\n+  localstack:\n+    image: localstack/localstack:0.11.2\n+    container_name: local-s3\n+    ports:\n+    - 8008:4566\n+    environment:\n+      SERVICES: s3\n+      START_WEB: 0"
  },
  {
    "sha": "1cd40ec4add14f99cb23cd80612fdba9d5bd9f66",
    "filename": "amazon-s3-quickstart/src/main/java/org/acme/s3/S3AsyncClientResource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-s3-quickstart/src/main/java/org/acme/s3/S3AsyncClientResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-s3-quickstart/src/main/java/org/acme/s3/S3AsyncClientResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-s3-quickstart/src/main/java/org/acme/s3/S3AsyncClientResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -64,7 +64,7 @@\n         return Uni.createFrom()\n                 .completionStage(() -> s3.getObject(buildGetRequest(objectKey), AsyncResponseTransformer.toFile(tempFile)))\n                 .onItem()\n-                .apply(object -> Response.ok(tempFile)\n+                .transform(object -> Response.ok(tempFile)\n                         .header(\"Content-Disposition\", \"attachment;filename=\" + objectKey)\n                         .header(\"Content-Type\", object.contentType()).build());\n     }"
  },
  {
    "sha": "e94f42e86a19d047cf2cbbd876d3d465105982ed",
    "filename": "amazon-ses-quickstart/README.md",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-ses-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -7,7 +7,11 @@ Local instance of SES only mocks service APIs and doesn't send any emails.\n # AWS SES local instance\n \n Just run it as follows in order to start SES locally:\n-`docker run --rm --name local-ses -p 8012:4579 -e SERVICES=ses -e START_WEB=0 -d localstack/localstack:0.11.1`\n+`docker run --rm --name local-ses -p 8012:4566 -e SERVICES=ses -e START_WEB=0 -d localstack/localstack:0.11.1`\n+\n+or use the provided docker-compose file\n+> docker-compose up -d\n+\n SES listens on `localhost:8012` for REST endpoints.\n \n Create an AWS profile for your local instance using AWS CLI:"
  },
  {
    "sha": "e7c8bab83a2b4392fadcb70b34b4653e8184385d",
    "filename": "amazon-ses-quickstart/docker-compose.yaml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/docker-compose.yaml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/docker-compose.yaml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-ses-quickstart/docker-compose.yaml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -0,0 +1,11 @@\n+version: '3.5'\n+\n+services:\n+  localstack:\n+    image: localstack/localstack:0.11.1\n+    container_name: local-ses\n+    ports:\n+    - 8012:4566\n+    environment:\n+      SERVICES: ses\n+      START_WEB: 0"
  },
  {
    "sha": "4f46564e75bff9087028e2d0d1f05e4a34368365",
    "filename": "amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesAsyncResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesAsyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesAsyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesAsyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -20,7 +20,7 @@\n     SesAsyncClient ses;\n \n     @POST\n-    @Path(\"/email\")\n+    @Path(\"email\")\n     public Uni<String> encrypt(Email data) {\n         return Uni.createFrom()\n             .completionStage(\n@@ -32,4 +32,4 @@\n                         .body(b -> b.text(txt -> txt.data(data.getBody()))))))\n             .onItem().transform(SendEmailResponse::messageId);\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "8bc5a90576a131e24d68e81ee3858d313faeb839",
    "filename": "amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesSyncResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesSyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesSyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-ses-quickstart/src/main/java/org/acme/ses/QuarkusSesSyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -18,7 +18,7 @@\n     SesClient ses;\n \n     @POST\n-    @Path(\"/email\")\n+    @Path(\"email\")\n     public String encrypt(Email data) {\n         return ses.sendEmail(req -> req\n             .source(data.getFrom())\n@@ -27,4 +27,4 @@ public String encrypt(Email data) {\n                 .subject(sub -> sub.data(data.getSubject()))\n                 .body(b -> b.text(txt -> txt.data(data.getBody()))))).messageId();\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "93cc3e339951a3dd24b2f1206d2a87a0fc6b9608",
    "filename": "amazon-ses-quickstart/src/test/java/org/acme/ses/SesResourcesTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/src/test/java/org/acme/ses/SesResourcesTest.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-ses-quickstart/src/test/java/org/acme/ses/SesResourcesTest.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-ses-quickstart/src/test/java/org/acme/ses/SesResourcesTest.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -25,7 +25,7 @@ void testResource(final String testedResource) {\n         given()\n             .pathParam(\"resource\", testedResource)\n             .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)\n-            .body(String.format(JSON, SesResource.FROM_EMAIL, SesResource.TO_EMAIL, \"Hello from Quarkus\", \"Quarkus is awsome\"))\n+            .body(String.format(JSON, SesResource.FROM_EMAIL, SesResource.TO_EMAIL, \"Hello from Quarkus\", \"Quarkus is awesome\"))\n             .when()\n             .post(\"/{resource}/email\")\n             .then()"
  },
  {
    "sha": "eaeded83aec6408122bde31aa3ceb3071955f312",
    "filename": "amazon-sns-quickstart/README.md",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sns-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -5,9 +5,13 @@ This example showcases how to use the AWS SNS client with Quarkus. As a prerequi\n # AWS SNS local instance\n \n  Just run it as follows in order to start SNS locally:\n-`docker run --rm --name local-sns -p 8009:4575 -e SERVICES=sns -e START_WEB=0 -d localstack/localstack:0.11.1`\n+`docker run --rm --name local-sns -p 8009:4566 -e SERVICES=sns -e START_WEB=0 -d localstack/localstack:0.11.1`\n SNS listens on `localhost:8009` for REST endpoints.\n \n+or use the provided docker-compose file\n+\n+> docker-compose up -d\n+\n Create an AWS profile for your local instance using AWS CLI:\n \n ```\n@@ -21,7 +25,7 @@ Default output format [None]:\n ## Create topic\n Create a topic using AWS CLI with the localstack profile and store the generated ARN in the environment variable\n ```\n-$> TOPIC_ARN=`aws sns create-topic --name=QuarksCollider --profile localstack --endpoint-url=http://localhost:8009`\n+$> export TOPIC_ARN=`aws sns create-topic --name=QuarksCollider --profile localstack --endpoint-url=http://localhost:8009 | jq -r .TopicArn`\n ```\n \n # Run the demo on dev mode"
  },
  {
    "sha": "61b2f1b6385a0cf12392f12ad39b7ee0f973c703",
    "filename": "amazon-sns-quickstart/docker-compose.yaml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/docker-compose.yaml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/docker-compose.yaml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sns-quickstart/docker-compose.yaml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -0,0 +1,11 @@\n+version: '3.5'\n+\n+services:\n+  localstack:\n+    image: localstack/localstack:0.11.1\n+    container_name: local-sns\n+    ports:\n+    - 8009:4566\n+    environment:\n+      SERVICES: sns\n+      START_WEB: 0"
  },
  {
    "sha": "6c5a77dc7e6dd996701b4c13b2b12b21cadd3756",
    "filename": "amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonAsyncResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonAsyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonAsyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonAsyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -32,7 +32,7 @@\n     static ObjectWriter QUARK_WRITER = new ObjectMapper().writerFor(Quark.class);\n \n     @POST\n-    @Path(\"/shoot\")\n+    @Path(\"shoot\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Uni<Response> publish(Quark quark) throws Exception {\n         String message = QUARK_WRITER.writeValueAsString(quark);\n@@ -42,4 +42,4 @@\n             .onItem().transform(PublishResponse::messageId)\n             .onItem().transform(id -> Response.ok().entity(id).build());\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "753aa8277993746df5eab99c5e0cb16f9e667da8",
    "filename": "amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonSyncResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonSyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonSyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksCannonSyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -30,12 +30,12 @@\n     static ObjectWriter QUARK_WRITER = new ObjectMapper().writerFor(Quark.class);\n \n     @POST\n-    @Path(\"/shoot\")\n+    @Path(\"shoot\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response publish(Quark quark) throws Exception {\n         String message = QUARK_WRITER.writeValueAsString(quark);\n         PublishResponse response = sns.publish(p -> p.topicArn(topicArn).message(message));\n         LOGGER.infov(\"Fired Quark[{0}, {1}}]\", quark.getFlavor(), quark.getSpin());\n         return Response.ok().entity(response.messageId()).build();\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "be89ca45908831287436ac531b94ba8dbbe5f9bc",
    "filename": "amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldAsyncResource.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldAsyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldAsyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldAsyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -79,7 +79,7 @@\n     }\n \n     @POST\n-    @Path(\"/subscribe\")\n+    @Path(\"subscribe\")\n     public Uni<Response> subscribe() {\n         return Uni.createFrom()\n             .completionStage(sns.subscribe(s -> s.topicArn(topicArn).protocol(\"http\").endpoint(notificationEndpoint())))\n@@ -90,7 +90,7 @@\n     }\n \n     @POST\n-    @Path(\"/unsubscribe\")\n+    @Path(\"unsubscribe\")\n     public Uni<Response> unsubscribe() {\n         if (subscriptionArn != null) {\n             return Uni.createFrom()\n@@ -121,4 +121,4 @@ private void setSubscriptionArn(String arn) {\n         }\n         return object;\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "cfb8c8e12a3837fbe4fb32bf062fff41ee746973",
    "filename": "amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldSyncResource.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldSyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldSyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sns-quickstart/src/main/java/org/acme/sns/QuarksShieldSyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -73,7 +73,7 @@ public Response notificationEndpoint(@HeaderParam(\"x-amz-sns-message-type\") Stri\n     }\n \n     @POST\n-    @Path(\"/subscribe\")\n+    @Path(\"subscribe\")\n     public Response subscribe() {\n         String notificationEndpoint = notificationEndpoint();\n         SubscribeResponse response = sns.subscribe(s -> s.topicArn(topicArn).protocol(\"http\").endpoint(notificationEndpoint));\n@@ -83,7 +83,7 @@ public Response subscribe() {\n     }\n \n     @POST\n-    @Path(\"/unsubscribe\")\n+    @Path(\"unsubscribe\")\n     public Response unsubscribe() {\n         if (subscriptionArn != null) {\n             sns.unsubscribe(s -> s.subscriptionArn(subscriptionArn));\n@@ -109,4 +109,4 @@ private String notificationEndpoint() {\n         }\n         return object;\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "0e24ce79b84f9dcc79665a4a1261d574a3991086",
    "filename": "amazon-sqs-quickstart/README.md",
    "status": "modified",
    "additions": 11,
    "deletions": 7,
    "changes": 18,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sqs-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -5,7 +5,11 @@ This example showcases how to use the AWS SQS client with Quarkus. As a prerequi\n # AWS SQS local instance\n \n Just run it as follows in order to start SQS locally:\n-`docker run --rm --name local-sqs -p 8010:4576 -e SERVICES=sqs -e START_WEB=0 -d localstack/localstack:0.11.1`\n+`docker run --rm --name local-sqs -p 8010:4566 -e SERVICES=sqs -e START_WEB=0 -d localstack/localstack:0.11.1`\n+\n+or use the provided docker compose file\n+> docker-compose up -d\n+\n SQS listens on `localhost:8010` for REST endpoints.\n \n Create an AWS profile for your local instance using AWS CLI:\n@@ -22,7 +26,7 @@ Default output format [None]:\n \n Create a SQS queue and store Queue url in environment variable as we will need to provide it to the our app\n ```\n-$> QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue --profile localstack --endpoint-url=http://localhost:8010`\n+$> export QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue --profile localstack --endpoint-url=http://localhost:8010 | jq -r .QueueUrl`\n ```\n \n # Run the demo on dev mode\n@@ -38,7 +42,7 @@ curl -XPOST -H\"Content-type: application/json\" http://localhost:8080/sync/cannon\n ```\n And receive it from the queue\n ```\n-curl http://localhost:8080/sync/cannon/shoot\n+curl http://localhost:8080/sync/shield\n ```\n \n Repeat the same using async endpoints\n@@ -48,7 +52,7 @@ curl -XPOST -H\"Content-type: application/json\" http://localhost:8080/async/canno\n ```\n And receive it from the queue\n ```\n-curl http://localhost:8080/async/cannon/shoot\n+curl http://localhost:8080/async/shield\n ```\n \n # Running in native\n@@ -81,10 +85,10 @@ Start localstack and connect to the network\n \n Create queue\n ```\n-$> QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue --profile localstack --endpoint-url=http://localhost:8010`\n+xport QUEUE_URL=`aws sqs create-queue --queue-name=ColliderQueue --profile localstack --endpoint-url=http://localhost:8010 | jq -r .QueueUrl`\n ```\n Run quickstart container connected to that network (note that we're using internal port of the localstack)\n-`docker run -i --rm --network=localstack -p 8080:8080 quarkus/amazon-sqs-quickstart -Dquarkus.sqs.endpoint-override=http://localstack:4576`\n+`docker run -i --rm --network=localstack -p 8080:8080 quarkus/amazon-sqs-quickstart -Dquarkus.sqs.endpoint-override=http://localstack:4566`\n \n Send messsage\n ```\n@@ -93,5 +97,5 @@ curl -XPOST -H\"Content-type: application/json\" http://localhost:8080/sync/cannon\n \n Receive message\n ```\n-curl http://localhost:8080/sync/cannon/shoot\n+curl http://localhost:8080/sync/shield\n ```"
  },
  {
    "sha": "4dae2d17420f1f835e128141806224d9bc497d82",
    "filename": "amazon-sqs-quickstart/docker-compose.yaml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/docker-compose.yaml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/docker-compose.yaml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sqs-quickstart/docker-compose.yaml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -0,0 +1,11 @@\n+version: '3.5'\n+\n+services:\n+  localstack:\n+    image: localstack/localstack:0.11.1\n+    container_name: local-sqs\n+    ports:\n+    - 8010:4566\n+    environment:\n+      SERVICES: sqs\n+      START_WEB: 0"
  },
  {
    "sha": "0e13f9be04b17832f7ffa8015d9d798ca1b874a8",
    "filename": "amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonAsyncResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonAsyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonAsyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonAsyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -32,7 +32,7 @@\n     static ObjectWriter QUARK_WRITER = new ObjectMapper().writerFor(Quark.class);\n \n     @POST\n-    @Path(\"/shoot\")\n+    @Path(\"shoot\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Uni<Response> sendMessage(Quark quark) throws Exception {\n         String message = QUARK_WRITER.writeValueAsString(quark);\n@@ -42,4 +42,4 @@\n             .onItem().transform(SendMessageResponse::messageId)\n             .onItem().transform(id -> Response.ok().entity(id).build());\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "d007672aa4f837ec51e10ed57f99085c81abd474",
    "filename": "amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonSyncResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonSyncResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonSyncResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amazon-sqs-quickstart/src/main/java/org/acme/sqs/QuarksCannonSyncResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -30,12 +30,12 @@\n     static ObjectWriter QUARK_WRITER = new ObjectMapper().writerFor(Quark.class);\n \n     @POST\n-    @Path(\"/shoot\")\n+    @Path(\"shoot\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response sendMessage(Quark quark) throws Exception {\n         String message = QUARK_WRITER.writeValueAsString(quark);\n         SendMessageResponse response = sqs.sendMessage(m -> m.queueUrl(queueUrl).messageBody(message));\n         LOGGER.infov(\"Fired Quark[{0}, {1}}]\", quark.getFlavor(), quark.getSpin());\n         return Response.ok().entity(response.messageId()).build();\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "f0f81fe45177c8ac9aed05d1efcc64750df67656",
    "filename": "amqp-quickstart/README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/amqp-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/amqp-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/amqp-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -5,7 +5,7 @@ This project illustrates how you can interact with AMQP 1.0 (Apache Artemis in t\n \n ## AMQP Broker\n \n-First you need an AMQP broker. You can follow the instructions from the [Apache Artemis web site](https://activemq.apache.org/components/artemis/) or run `docker-compose up` if you have docker installed on your machine.\n+First you need an AMQP broker. You can follow the instructions from the [Apache Artemis web site](https://activemq.apache.org/components/artemis/) or run `docker-compose up -d` if you have docker installed on your machine.\n \n ## Start the application\n \n@@ -39,4 +39,4 @@ You can compile the application into a native binary using:\n \n and run with:\n \n-`./target/amqp-quickstart-1.0.0-SNAPSHOT-runner` \n\\ No newline at end of file\n+`./target/amqp-quickstart-1.0.0-SNAPSHOT-runner` "
  },
  {
    "sha": "f0414bf5283a36cef113488eff899a6e25097ba1",
    "filename": "getting-started-reactive/src/main/java/org/acme/getting/started/ReactiveGreetingService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/getting-started-reactive/src/main/java/org/acme/getting/started/ReactiveGreetingService.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/getting-started-reactive/src/main/java/org/acme/getting/started/ReactiveGreetingService.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/getting-started-reactive/src/main/java/org/acme/getting/started/ReactiveGreetingService.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -18,8 +18,6 @@\n     public Multi<String> greetings(int count, String name) {\n         return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n                 .onItem().transform(n -> String.format(\"hello %s - %d\", name, n))\n-                .transform().byTakingFirstItems(count);\n-\n+                .select().first(count);\n     }\n-\n }"
  },
  {
    "sha": "aa5b7669c65d702fcc42fe5507274f182ff66b55",
    "filename": "hibernate-orm-multi-tenancy-quickstart/README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-multi-tenancy-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-multi-tenancy-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-multi-tenancy-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -76,6 +76,9 @@ Make sure you have two PostgreSQL instances running. To set up two PostgreSQL da\n \n > docker run -it --rm=true --ulimit memlock=-1:-1 --memory-swappiness=0 --name mycompany -p 127.0.0.1:5433:5432 -e POSTGRES_USER=mycompany -e POSTGRES_PASSWORD=mycompany -e POSTGRES_DB=mycompany postgres:12.2\n \n+or use the provided docker-compose file:\n+docker-compose up -d\n+\n The 'quarkus_test' database should be listening on port 5432 and the 'mycompany' on port 5433.\n \n Connection properties for the Agroal datasource are defined in the standard Quarkus configuration file, [src/main/resources/application.properties](src/main/resources/application.properties).\n@@ -91,6 +94,7 @@ The Maven Quarkus plugin provides a development mode that supports live coding.\n \n In this mode you can make changes to the code and have the changes immediately applied, by just refreshing your browser.\n \n+\n #### Run Quarkus as native executable\n \n You can also create a native executable from this application without making any source code changes. A native executable removes the dependency on the JVM:"
  },
  {
    "sha": "b86c4c30ca5ec5865626a91efb4d392c2f41d1f8",
    "filename": "hibernate-orm-multi-tenancy-quickstart/docker-compose.yml",
    "status": "modified",
    "additions": 24,
    "deletions": 14,
    "changes": 38,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-multi-tenancy-quickstart/docker-compose.yml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-multi-tenancy-quickstart/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-multi-tenancy-quickstart/docker-compose.yml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -3,30 +3,40 @@ version: '3'\n services:\n \n   database1:\n-    image: postgres\n+    image: library/postgres:12.2\n+    container_name: quarkus_test\n     environment:\n       POSTGRES_USER: \"quarkus_test\"\n       POSTGRES_PASSWORD: \"quarkus_test\"\n     ports:\n       - 5432:5432\n+    ulimits:\n+      memlock: -1\n+    mem_swappiness: 0\n \n   database2:\n-    image: postgres\n+    image: library/postgres:12.2\n+    container_name: mycompany\n     environment:\n       POSTGRES_USER: \"mycompany\"\n       POSTGRES_PASSWORD: \"mycompany\"\n     ports:\n       - 5433:5432\n+    ulimits:\n+      memlock: -1\n+    mem_swappiness: 0\n \n-  quarkus:\n-    image: quarkus/hibernate-orm-multi-tenancy\n-    environment:\n-      DB_HOST_TENANT_BASE: \"database1\"\n-      DB_HOST_TENANT_MYCOMPANY: \"database2\"\n-      DB_PORT_TENANT_BASE: \"5432\"\n-      DB_PORT_TENANT_MYCOMPANY: \"5432\"\n-    depends_on:\n-      - database1\n-      - database2\n-    ports:\n-      - 8080:8080\n+#\n+#\n+#  quarkus:\n+#    image: quarkus/hibernate-orm-multi-tenancy\n+#    environment:\n+#      DB_HOST_TENANT_BASE: \"database1\"\n+#      DB_HOST_TENANT_MYCOMPANY: \"database2\"\n+#      DB_PORT_TENANT_BASE: \"5432\"\n+#      DB_PORT_TENANT_MYCOMPANY: \"5432\"\n+#    depends_on:\n+#      - database1\n+#      - database2\n+#    ports:\n+#      - 8080:8080"
  },
  {
    "sha": "4dcea4ceb1fd10519be3a821ea9a83e76e2986f5",
    "filename": "hibernate-orm-multi-tenancy-quickstart/src/test/java/org/acme/hibernate/orm/FruitsEndpointTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-multi-tenancy-quickstart/src/test/java/org/acme/hibernate/orm/FruitsEndpointTest.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-multi-tenancy-quickstart/src/test/java/org/acme/hibernate/orm/FruitsEndpointTest.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-multi-tenancy-quickstart/src/test/java/org/acme/hibernate/orm/FruitsEndpointTest.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -147,8 +147,7 @@ private Fruit find(String tenantPrefix, String fruitName) {\n             return null;\n         }\n         if (response.statusCode() == 200) {\n-            Fruit fruit = response.as(Fruit.class);\n-            return fruit;\n+            return response.as(Fruit.class);\n         }\n         throw new IllegalStateException(\"Unknown status finding '\" + fruitName + \": \" + response);\n     }"
  },
  {
    "sha": "43bf0e5d99b5bf097363c01893b432384dfa0328",
    "filename": "hibernate-orm-panache-quickstart/README.md",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-panache-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-panache-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-panache-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -43,6 +43,9 @@ Make sure you have a PostgreSQL instance running. To set up a PostgreSQL databas\n \n > docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:10.5\n \n+or use the provided docker-compose file\n+> docker-compose up -d\n+\n Connection properties for the Agroal datasource are defined in the standard Quarkus configuration file,\n `src/main/resources/application.properties`.\n "
  },
  {
    "sha": "a41a5ddbc153908fc05e49f7b68759c6c1c40855",
    "filename": "hibernate-orm-panache-quickstart/docker-compose.yaml",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-panache-quickstart/docker-compose.yaml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-panache-quickstart/docker-compose.yaml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-panache-quickstart/docker-compose.yaml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -0,0 +1,16 @@\n+version: '3.5'\n+\n+services:\n+  postgres:\n+    image: library/postgres:10.5\n+    container_name: quarkus_test\n+    ports:\n+    - 5432:5432\n+    ulimits:\n+      memlock: -1\n+    mem_swappiness: 0\n+    environment:\n+      POSTGRES_USER: quarkus_test\n+      POSTGRES_PASSWORD: quarkus_test\n+      POSTGRES_DB: quarkus_test\n+"
  },
  {
    "sha": "c8081627e3e5d215ec0efb722a5617ef9d04284e",
    "filename": "hibernate-orm-panache-quickstart/src/main/java/org/acme/hibernate/orm/panache/FruitResource.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-panache-quickstart/src/main/java/org/acme/hibernate/orm/panache/FruitResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-panache-quickstart/src/main/java/org/acme/hibernate/orm/panache/FruitResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-panache-quickstart/src/main/java/org/acme/hibernate/orm/panache/FruitResource.java?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -13,6 +13,7 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n@@ -27,8 +28,8 @@\n \n @Path(\"fruits\")\n @ApplicationScoped\n-@Produces(\"application/json\")\n-@Consumes(\"application/json\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Consumes(MediaType.APPLICATION_JSON)\n public class FruitResource {\n \n     private static final Logger LOGGER = Logger.getLogger(FruitResource.class.getName());"
  },
  {
    "sha": "acb454a926ddbc3aff2c644033ef5b81e53e82ca",
    "filename": "hibernate-orm-quickstart/README.md",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-quickstart/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-quickstart/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-quickstart/README.md?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -43,6 +43,9 @@ Make sure you have a PostgreSQL instance running. To set up a PostgreSQL databas\n \n > docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:10.5\n \n+or use the provided docker-compose file\n+> docker-compose up -d\n+\n Connection properties for the Agroal datasource are defined in the standard Quarkus configuration file,\n `src/main/resources/application.properties`.\n "
  },
  {
    "sha": "a41a5ddbc153908fc05e49f7b68759c6c1c40855",
    "filename": "hibernate-orm-quickstart/docker-compose.yaml",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/quarkusio/quarkus-quickstarts/blob/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-quickstart/docker-compose.yaml",
    "raw_url": "https://github.com/quarkusio/quarkus-quickstarts/raw/3200e9c5f229ec1b44bea89121061631277619d5/hibernate-orm-quickstart/docker-compose.yaml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-quickstarts/contents/hibernate-orm-quickstart/docker-compose.yaml?ref=3200e9c5f229ec1b44bea89121061631277619d5",
    "patch": "@@ -0,0 +1,16 @@\n+version: '3.5'\n+\n+services:\n+  postgres:\n+    image: library/postgres:10.5\n+    container_name: quarkus_test\n+    ports:\n+    - 5432:5432\n+    ulimits:\n+      memlock: -1\n+    mem_swappiness: 0\n+    environment:\n+      POSTGRES_USER: quarkus_test\n+      POSTGRES_PASSWORD: quarkus_test\n+      POSTGRES_DB: quarkus_test\n+"
  }
]
