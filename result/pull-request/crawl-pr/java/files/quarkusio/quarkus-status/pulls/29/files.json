[
  {
    "sha": "d764f6e43d11023929dc35716e5bf94448c3ec00",
    "filename": "README.md",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/README.md",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/README.md",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/README.md?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -18,6 +18,16 @@ STATUS_TOKEN=<TOKEN>\n \n The token only needs read access to the repository.\n \n+A lot of API calls are made to gather flaky tests statistics. If you would like to\n+use a different API token for it, you can add it to the .env file:\n+```\n+FLAKY_TESTS_TOKEN=<ANOTHER_TOKEN>\n+```\n+\n+If not provided, the `STATUS_TOKEN` will be used.\n+\n+**NOTE** in dev mode, gathering flaky tests is mocked.\n+\n ## Running the application in dev mode\n \n You can run your application in dev mode that enables live coding using:"
  },
  {
    "sha": "210539b277507482e90c8ae64707073f6483e0df",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/pom.xml",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/pom.xml",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/pom.xml?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -59,11 +59,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-openshift</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-smallrye-fault-tolerance</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>org.ocpsoft.prettytime</groupId>\n             <artifactId>prettytime</artifactId>\n             <version>5.0.0.Final</version>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-compress</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-junit5</artifactId>"
  },
  {
    "sha": "90734698b8744d636d91209b7fb1d9a811eab82a",
    "filename": "src/main/java/io/quarkus/status/StatusResource.java",
    "status": "modified",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/StatusResource.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/StatusResource.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/StatusResource.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -3,17 +3,22 @@\n import java.io.IOException;\n import java.time.LocalDateTime;\n import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n import java.util.Date;\n \n import javax.inject.Inject;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n \n import io.quarkus.qute.TemplateExtension;\n import io.quarkus.qute.TemplateInstance;\n import io.quarkus.qute.api.CheckedTemplate;\n+import io.quarkus.status.flaky.FlakyService;\n+import io.quarkus.status.flaky.model.TestStats;\n import io.quarkus.status.model.Stats;\n import io.quarkus.status.model.Status;\n import org.ocpsoft.prettytime.PrettyTime;\n@@ -30,10 +35,20 @@\n     @Inject\n     LabelsService labelsService;\n \n+    @Inject\n+    FlakyService flakyService;\n+\n     @CheckedTemplate\n     public static class Templates {\n         public static native TemplateInstance index(Status status);\n         public static native TemplateInstance issues(Status status, Stats stats, boolean isBugs);\n+        public static native TemplateInstance testFailures(String testName,\n+                                                           Status status,\n+                                                           TestStats testStats,\n+                                                           ZonedDateTime lastUpdatedOn);\n+        public static native TemplateInstance tests(Status status,\n+                                                    Collection<String> tests,\n+                                                    ZonedDateTime lastUpdatedOn);\n     }\n \n     @GET\n@@ -49,6 +64,26 @@ public TemplateInstance bugs() throws IOException {\n         return Templates.issues(statusService.getStatus(), issuesService.getBugsMonthlyStats(), true);\n     }\n \n+    @GET\n+    @Path(\"tests\")\n+    @Produces(MediaType.TEXT_HTML)\n+    public TemplateInstance tests() throws IOException {\n+        return Templates.tests(statusService.getStatus(), flakyService.getTests(),\n+                flakyService.getLastUpdatedOn());\n+    }\n+    @GET\n+    @Path(\"testFailures\")\n+    @Produces(MediaType.TEXT_HTML)\n+    public TemplateInstance testFailures(@QueryParam(\"testName\") String testName) throws IOException {\n+        // TODO: match test by substring?\n+        // TODO: chart of failures in time/builds\n+        // TODO: github-like array of red/green showing per PR statistics,\n+        // TODO: URL to PR\n+        // TODO: show the failure on click\n+        return Templates.testFailures(testName, statusService.getStatus(), flakyService.getTestStats(testName),\n+                flakyService.getLastUpdatedOn());\n+    }\n+\n     @GET\n     @Path(\"enhancements\")\n     @Produces(MediaType.TEXT_HTML)"
  },
  {
    "sha": "433f17046647274765902afb27f956505f8ca642",
    "filename": "src/main/java/io/quarkus/status/flaky/FlakyData.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/FlakyData.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/FlakyData.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/FlakyData.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,50 @@\n+package io.quarkus.status.flaky;\n+\n+import io.quarkus.status.flaky.model.CheckRun;\n+import io.quarkus.status.flaky.model.Test;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.concurrent.ConcurrentSkipListSet;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+public class FlakyData {\n+    private final List<CheckRun> allChecks = new CopyOnWriteArrayList<>();\n+    private final SortedMap<String, Test> tests = new ConcurrentSkipListMap<>();\n+    private final Set<Integer> scannedChecks = new ConcurrentSkipListSet<>();\n+\n+    private ZonedDateTime newestFetched;\n+\n+    private volatile ZonedDateTime lastUpdateFinish;\n+\n+    public void setNewestFetched(ZonedDateTime newestFetched) {\n+        this.newestFetched = newestFetched;\n+    }\n+\n+    public void setLastUpdateFinish(ZonedDateTime lastUpdateFinish) {\n+        this.lastUpdateFinish = lastUpdateFinish;\n+    }\n+\n+    public List<CheckRun> getAllChecks() {\n+        return allChecks;\n+    }\n+\n+    public SortedMap<String, Test> getTests() {\n+        return tests;\n+    }\n+\n+    public Set<Integer> getScannedChecks() {\n+        return scannedChecks;\n+    }\n+\n+    public ZonedDateTime getNewestFetched() {\n+        return newestFetched;\n+    }\n+\n+    public ZonedDateTime getLastUpdateFinish() {\n+        return lastUpdateFinish;\n+    }\n+}"
  },
  {
    "sha": "40b538350c375a59212e7389c442a4504eaa3cf9",
    "filename": "src/main/java/io/quarkus/status/flaky/FlakyProvider.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/FlakyProvider.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/FlakyProvider.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/FlakyProvider.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,8 @@\n+package io.quarkus.status.flaky;\n+\n+import java.time.ZonedDateTime;\n+\n+public interface FlakyProvider {\n+\n+    void update(ZonedDateTime startFrom, FlakyData flakyData);\n+}"
  },
  {
    "sha": "ac8a6c780814b1acab1510cff14b527347d5d8b6",
    "filename": "src/main/java/io/quarkus/status/flaky/FlakyService.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/FlakyService.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/FlakyService.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/FlakyService.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,109 @@\n+package io.quarkus.status.flaky;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.status.flaky.model.CheckRun;\n+import io.quarkus.status.flaky.model.InvocationStatus;\n+import io.quarkus.status.flaky.model.Status;\n+import io.quarkus.status.flaky.model.Test;\n+import io.quarkus.status.flaky.model.TestStats;\n+import org.jboss.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+@ApplicationScoped\n+public class FlakyService {\n+\n+    private static final Logger log = Logger.getLogger(FlakyService.class);\n+    private static final int DAYS = 10;\n+    private static final ExecutorService executor = Executors.newSingleThreadExecutor();\n+\n+    private final FlakyData flakyData = new FlakyData();\n+\n+    @Inject\n+    FlakyProvider flakyProvider;\n+\n+    @Scheduled(every = \"PT1H\")\n+    void update() {\n+        dropOld();\n+        ZonedDateTime fetchStart = flakyData.getNewestFetched() == null\n+                ? ZonedDateTime.now().minusDays(DAYS)\n+                : flakyData.getNewestFetched().minusMinutes(5);\n+        fetchNewerThan(fetchStart); // to minimize the chance of missing a run\n+    }\n+\n+    private void dropOld() {\n+        ZonedDateTime evictionCutOff = ZonedDateTime.now().minusDays(DAYS);\n+\n+        List<CheckRun> checksToEvict = new ArrayList<>();\n+\n+        for (CheckRun check : flakyData.getAllChecks()) {\n+            if (check.getTime().isBefore(evictionCutOff)) {\n+                checksToEvict.add(check);\n+            }\n+        }\n+\n+        flakyData.getAllChecks().removeAll(checksToEvict);\n+        for (CheckRun check : checksToEvict) {\n+            flakyData.getScannedChecks().remove(check.getTestRunId());\n+            for (Test test : flakyData.getTests().values()) {\n+                test.getErrors().remove(check);\n+                test.getFailures().remove(check);\n+            }\n+        }\n+        log.debugf(\"Dropped %d old checks\", checksToEvict.size());\n+    }\n+\n+    // todo info that test data is processed until it's finished\n+\n+    public void start(@Observes StartupEvent ignored) {\n+        fetchNewerThan(ZonedDateTime.now().minusDays(30));\n+    }\n+\n+    private void fetchNewerThan(ZonedDateTime startDate) {\n+        executor.execute(() -> flakyProvider.update(startDate, flakyData));\n+    }\n+\n+\n+\n+    public TestStats getTestStats(String testName) {\n+        if (testName == null) {\n+            return null;\n+        }\n+        Test test = flakyData.getTests().get(testName);\n+        if (test == null) {\n+            return null;\n+        }\n+\n+        List<InvocationStatus> invocationStatuses = new ArrayList<>();\n+        for (CheckRun check : flakyData.getAllChecks()) {\n+            Status status;\n+            if (test.getErrors().contains(check)) {\n+                status = Status.ERROR;\n+            } else if (test.getFailures().contains(check)) {\n+                status = Status.FAILURE;\n+            } else {\n+                status = Status.NO_DATA;\n+            }\n+\n+            invocationStatuses.add(new InvocationStatus(status, check));\n+        }\n+        return new TestStats(testName, invocationStatuses);\n+    }\n+\n+    public ZonedDateTime getLastUpdatedOn() {\n+        return flakyData.getLastUpdateFinish();\n+    }\n+\n+    public Set<String> getTests() {\n+        return flakyData.getTests().keySet();\n+    }\n+}"
  },
  {
    "sha": "8d3878c199bcde1043a295f30bf538a87df7a41c",
    "filename": "src/main/java/io/quarkus/status/flaky/GithubFlakyTestsProvider.java",
    "status": "added",
    "additions": 234,
    "deletions": 0,
    "changes": 234,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/GithubFlakyTestsProvider.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/GithubFlakyTestsProvider.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/GithubFlakyTestsProvider.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,234 @@\n+package io.quarkus.status.flaky;\n+\n+import io.quarkus.arc.profile.IfBuildProfile;\n+import io.quarkus.status.flaky.model.CheckRun;\n+import io.quarkus.status.flaky.model.Test;\n+import io.quarkus.status.flaky.client.GithubClient;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.client.jaxrs.engines.ApacheHttpClient43Engine;\n+import org.jboss.resteasy.client.jaxrs.internal.ResteasyClientBuilderImpl;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+// TODO: artifact-> name suggests the failed job name, it may be worth showing it\n+@IfBuildProfile(\"prod\")\n+@ApplicationScoped\n+public class GithubFlakyTestsProvider implements FlakyProvider {\n+\n+    private static final Logger log = Logger.getLogger(GithubFlakyTestsProvider.class);\n+\n+    private static final Pattern TEST_RESULT_PATTERN = Pattern.compile(\".*Tests run.*in.*$\");\n+    private static final Pattern TEST_NAME_PATTERN = Pattern.compile(\"(?<=in ).*$\");\n+    private static final Pattern TEST_FAILURES_PATTERN = Pattern.compile(\"(?<=Failures: )\\\\d+\");\n+    private static final Pattern TEST_ERRORS_PATTERN = Pattern.compile(\"(?<=Errors: )\\\\d+\");\n+    private static final String ORG = \"quarkusio\";\n+    private static final String REPO = \"quarkus\";\n+    private static final String QUARKUS_CI = \"Quarkus CI\";\n+    private static final String REPORTS_FILE = \"test-reports.tgz\";\n+\n+    private static final int RUN_BATCH_SIZE = 50;\n+    private static final String GITHUB_API_HOST = \"api.github.com\";\n+\n+    private final AtomicBoolean updateInProgress = new AtomicBoolean(false);\n+\n+    private final String bearerToken;\n+    private final GithubClient client;\n+\n+    @Inject\n+    GithubFlakyTestsProvider(\n+            @ConfigProperty(name = \"flaky.tests.token\") Optional<String> token,\n+            @ConfigProperty(name = \"status.token\") String defaultToken) {\n+        this.bearerToken = \"Bearer \" + token.orElse(defaultToken);\n+\n+        ApacheHttpClient43Engine httpEngine = new ApacheHttpClient43Engine();\n+        httpEngine.setFollowRedirects(true);\n+        // good old resteasy client builder because it can do redirects:\n+        client = new ResteasyClientBuilderImpl().httpEngine(httpEngine).build().target(\"https://\" + GITHUB_API_HOST)\n+                .proxy(GithubClient.class);\n+    }\n+\n+    @Override\n+    public void update(ZonedDateTime startDate, FlakyData flakyData) {\n+        if (updateInProgress.compareAndSet(false, true)) {\n+            log.info(\"requested flaky test data update while previous is in progress, ignoring\");\n+            return;\n+        }\n+        log.infof(\"Started gathering flaky tests starting from %s\", startDate);\n+        // go through PR runs and collect check runs and failures\n+        long fetchStartTime = System.currentTimeMillis();\n+        GithubClient.WorkflowList workflows = client.workflows(ORG, REPO, bearerToken);\n+\n+        Integer quarkusCi = null;\n+        for (GithubClient.Workflow workflow : workflows.getWorkflows()) {\n+            if (QUARKUS_CI.equals(workflow.getName())) {\n+                quarkusCi = workflow.getId();\n+                break;\n+            }\n+        }\n+        if (quarkusCi == null) {\n+            throw new IllegalStateException(\"Quarkus CI workflow not found. Exiting\");\n+        }\n+\n+        boolean done = false;\n+        for (int pageNo = 1; !done; pageNo++) {\n+            GithubClient.WorkflowRunList runs = client.runs(ORG, REPO, quarkusCi, RUN_BATCH_SIZE, pageNo, bearerToken);\n+            log.debugf(\"fetched %d runs\", runs.getWorkflow_runs().size());\n+            for (GithubClient.WorkflowRun run : runs.getWorkflow_runs()) {\n+\n+                if (run.getCreated_at().isBefore(startDate)) {\n+                    // we have at last one run that is too old, skip this one\n+                    // and don't fetch the next page\n+                    done = true;\n+                    continue;\n+                }\n+\n+                if (flakyData.getScannedChecks().add(run.getId())) {\n+\n+                    ZonedDateTime newestFetched = flakyData.getNewestFetched();\n+                    if (newestFetched == null || newestFetched.isBefore(run.getCreated_at())) {\n+                        flakyData.setNewestFetched(run.getCreated_at());\n+                    }\n+\n+                    // get archived items for the run\n+                    int runId = run.getId();\n+                    List<GithubClient.Artifact> artifacts = fetchTestReports(runId);\n+\n+                    addTestResults(run, artifacts, flakyData);\n+                }\n+            }\n+        }\n+        flakyData.setLastUpdateFinish(ZonedDateTime.now());\n+        log.infof(\"Flaky test gathering done in %s s\", (System.currentTimeMillis() - fetchStartTime) / 1000);\n+        updateInProgress.set(false);\n+    }\n+\n+    private void addTestResults(GithubClient.WorkflowRun run, List<GithubClient.Artifact> artifacts, FlakyData flakyData) {\n+        CheckRun checkRun = new CheckRun(run.getId(), run.getHtml_url(), run.getName(), run.getCreated_at());\n+        flakyData.getAllChecks().add(checkRun);\n+        for (GithubClient.Artifact artifact : artifacts) {\n+            if (artifact.isExpired()) {\n+                log.infof(\"test results archive expired for run %s\", run.getHtml_url());\n+            } else {\n+                InputStream archive = client.artifact(ORG, REPO, artifact.getId(), bearerToken);\n+                addTestResultsFromZip(archive, checkRun, flakyData);\n+            }\n+        }\n+    }\n+\n+    private void addTestResultsFromZip(InputStream input, CheckRun checkRun, FlakyData flakyData) {\n+        byte[] buffer = new byte[100_000];\n+        ByteArrayOutputStream tgzFile;\n+        try {\n+            tgzFile = readTgzFromZipFile(input);\n+        } catch (IOException e) {\n+            log.error(\"Failed to decompress tgz file\", e); // TODO: more info\n+            return;\n+        }\n+\n+        try (GzipCompressorInputStream gzip = new GzipCompressorInputStream(new ByteArrayInputStream(tgzFile.toByteArray()));\n+             TarArchiveInputStream tarGz = new TarArchiveInputStream(gzip)) {\n+            TarArchiveEntry entry;\n+\n+            while ((entry = (TarArchiveEntry) tarGz.getNextEntry()) != null) {\n+                if (entry.getName().endsWith(\".txt\")) {\n+                    ByteArrayOutputStream txtFileContents = new ByteArrayOutputStream();\n+                    int read;\n+                    while ((read = tarGz.read(buffer)) != -1) {\n+                        txtFileContents.write(buffer, 0, read);\n+                    }\n+\n+                    extractTestData(txtFileContents.toString(), checkRun, flakyData);\n+                }\n+            }\n+        } catch (IOException e) {\n+            log.error(\"Failed to read test results tgz file\", e);\n+        }\n+\n+    }\n+\n+    private void extractTestData(String text, CheckRun checkRun, FlakyData flakyData) {\n+        String[] lines = text.split(\"\\n\");\n+        Arrays.stream(lines).filter(line -> TEST_RESULT_PATTERN.matcher(line).matches())\n+                .forEach(line -> collectTestResults(line, checkRun, flakyData));\n+    }\n+\n+    private void collectTestResults(String line, CheckRun checkRun, FlakyData flakyData) {\n+        // Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.127 s - in io.quarkus.test.common.TestResourceManagerTest\n+        String testName = getSingleMatch(line, TEST_NAME_PATTERN);\n+        int failures = getSingleInt(line, TEST_FAILURES_PATTERN);\n+        int errors = getSingleInt(line, TEST_ERRORS_PATTERN);\n+\n+        Test test = flakyData.getTests().computeIfAbsent(testName, Test::new);\n+        if (errors > 0) {\n+            test.addError(checkRun);\n+        } else if (failures > 0) {\n+            test.addFailure(checkRun);\n+        }\n+    }\n+\n+    private List<GithubClient.Artifact> fetchTestReports(int runId) {\n+        List<GithubClient.Artifact> result = new ArrayList<>();\n+        int totalCount;\n+        do {\n+            GithubClient.ArtifactList artifactList = client.actionArtifacts(ORG, REPO, runId, bearerToken, 100, 0);\n+            result.addAll(artifactList.getArtifacts());\n+            totalCount = artifactList.getTotal_count();\n+        } while (result.size() < totalCount);\n+\n+        return result.stream()\n+                .filter(a -> a.getName().startsWith(\"test-reports\"))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static ByteArrayOutputStream readTgzFromZipFile(InputStream inputStream) throws IOException {\n+        ByteArrayOutputStream zipBytes = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[10_000];\n+        try (ZipInputStream zip = new ZipInputStream(inputStream)) {\n+            for (ZipEntry zipEntry = zip.getNextEntry(); zipEntry != null; zipEntry = zip.getNextEntry()) {\n+                if (!zipEntry.isDirectory() && zipEntry.getName().endsWith(REPORTS_FILE)) {\n+                    int read;\n+                    while ((read = zip.read(buffer)) > 0) {\n+                        zipBytes.write(buffer, 0, read);\n+                    }\n+                }\n+                zip.closeEntry();\n+            }\n+            return zipBytes;\n+        }\n+    }\n+\n+    private static int getSingleInt(String logLine, Pattern pattern) {\n+        String runAsString = getSingleMatch(logLine, pattern);\n+        return Integer.parseInt(runAsString);\n+    }\n+\n+    private static String getSingleMatch(String logLine, Pattern pattern) {\n+        Matcher matcher = pattern.matcher(logLine);\n+        if (matcher.find()) {\n+            return matcher.group();\n+        } else {\n+            throw new IllegalArgumentException(\"failed to determine test name from \" + logLine);\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "d60db061b9cfd6ca8bf99b9a3bca9bd9953aad51",
    "filename": "src/main/java/io/quarkus/status/flaky/MockFlakyTestsProvider.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/MockFlakyTestsProvider.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/MockFlakyTestsProvider.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/MockFlakyTestsProvider.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,56 @@\n+package io.quarkus.status.flaky;\n+\n+import io.quarkus.arc.profile.UnlessBuildProfile;\n+import io.quarkus.status.flaky.model.CheckRun;\n+import io.quarkus.status.flaky.model.Test;\n+import org.jboss.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+@UnlessBuildProfile(\"prod\")\n+@ApplicationScoped\n+public class MockFlakyTestsProvider implements FlakyProvider {\n+\n+    private static final Logger log = Logger.getLogger(MockFlakyTestsProvider.class);\n+\n+    private static final String TEST_A = \"com.example.TestA\";\n+    private static final String TEST_B = \"com.example.TestB\";\n+    private static final String TEST_C = \"com.example.TestC\";\n+\n+    // we only do mock update once\n+    private AtomicBoolean initialRun = new AtomicBoolean(true);\n+\n+    @Override\n+    public void update(ZonedDateTime startFrom, FlakyData flakyData) {\n+        // three check runs, on first only com.example.TestA fails, on second\n+        // com.example.TestB and com.example.TestC, on third no test fail\n+\n+        ZonedDateTime failureTime = ZonedDateTime.now().minusHours(10);\n+        if (initialRun.compareAndSet(true, false)) {\n+\n+            CheckRun checkRun1 = new CheckRun(1, \"http://example.com/check1\", \"Quarkus CI\", failureTime);\n+            CheckRun checkRun2 = new CheckRun(2, \"http://example.com/check1\", \"Quarkus CI\", failureTime);\n+            CheckRun checkRun3 = new CheckRun(3, \"http://example.com/check1\", \"Quarkus CI\", failureTime);\n+\n+            flakyData.getTests()\n+                    .put(TEST_A, new Test(TEST_A).addError(checkRun1)\n+                            .addFailure(checkRun2));\n+            flakyData.getTests()\n+                    .put(TEST_B, new Test(TEST_B).addFailure(checkRun2));\n+            flakyData.getTests()\n+                    .put(TEST_C, new Test(TEST_C).addError(checkRun2));\n+\n+            Stream.of(checkRun1, checkRun2, checkRun3)\n+                    .forEach(ch -> {\n+                        flakyData.getScannedChecks().add(ch.getTestRunId());\n+                        flakyData.getAllChecks().add(ch);\n+                    });\n+            flakyData.setNewestFetched(failureTime);\n+            flakyData.setLastUpdateFinish(ZonedDateTime.now());\n+            log.info(\"Mock test data initialized\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "97822e6f5334673fe95c8511ef5e9ce77d7be986",
    "filename": "src/main/java/io/quarkus/status/flaky/client/GithubClient.java",
    "status": "added",
    "additions": 220,
    "deletions": 0,
    "changes": 220,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/client/GithubClient.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/client/GithubClient.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/client/GithubClient.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,220 @@\n+package io.quarkus.status.flaky.client;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.eclipse.microprofile.faulttolerance.Retry;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import java.io.InputStream;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+\n+@Path(\"/repos/{owner}/{repo}\")\n+@Produces(\"application/vnd.github.v3+json\")\n+@Retry(delay = 1, delayUnit = ChronoUnit.MINUTES)\n+public interface GithubClient {\n+    @GET\n+    @Path(\"/actions/runs/{runId}/artifacts\")\n+    ArtifactList actionArtifacts(@PathParam(\"owner\") String owner,\n+                                 @PathParam(\"repo\") String repo,\n+                                 @PathParam(\"runId\") long runId,\n+                                 @HeaderParam(\"Authorization\") String bearerToken,\n+                                 @QueryParam(\"per_page\") int per_page,\n+                                 @QueryParam(\"page\") int page);\n+\n+    @GET\n+    @Path(\"/actions/workflows\")\n+    WorkflowList workflows(@PathParam(\"owner\") String owner,\n+                           @PathParam(\"repo\") String repo,\n+                           @HeaderParam(\"Authorization\") String bearerToken);\n+\n+    @GET\n+    @Path(\"/actions/workflows/{workflowId}/runs\")\n+    WorkflowRunList runs(@PathParam(\"owner\") String owner,\n+                         @PathParam(\"repo\") String repo,\n+                         @PathParam(\"workflowId\") int workflowId,\n+                         @QueryParam(\"per_page\") int pageSize,\n+                         @QueryParam(\"page\") int pageNumber,\n+                         @HeaderParam(\"Authorization\") String bearerToken);\n+\n+    @GET\n+    @Path(\"/actions/artifacts/{artifactId}/zip\")\n+    InputStream artifact(@PathParam(\"owner\") String owner,\n+                         @PathParam(\"repo\") String repo,\n+                         @PathParam(\"artifactId\") int id,\n+                         @HeaderParam(\"Authorization\") String bearerToken);\n+\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    class Workflow {\n+        String name;\n+        int id;\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    class WorkflowList {\n+        int total_count;\n+        List<Workflow> workflows;\n+\n+        public int getTotal_count() {\n+            return total_count;\n+        }\n+\n+        public void setTotal_count(int total_count) {\n+            this.total_count = total_count;\n+        }\n+\n+        public List<Workflow> getWorkflows() {\n+            return workflows;\n+        }\n+\n+        public void setWorkflows(List<Workflow> workflows) {\n+            this.workflows = workflows;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    class WorkflowRun {\n+        private int id;\n+        private String html_url;\n+        private String name;\n+        private ZonedDateTime created_at;\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+\n+        public String getHtml_url() {\n+            return html_url;\n+        }\n+\n+        public void setHtml_url(String html_url) {\n+            this.html_url = html_url;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        public ZonedDateTime getCreated_at() {\n+            return created_at;\n+        }\n+\n+        public void setCreated_at(ZonedDateTime created_at) {\n+            this.created_at = created_at;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    class WorkflowRunList {\n+        int total_count;\n+        List<WorkflowRun> workflow_runs;\n+\n+        public int getTotal_count() {\n+            return total_count;\n+        }\n+\n+        public void setTotal_count(int total_count) {\n+            this.total_count = total_count;\n+        }\n+\n+        public List<WorkflowRun> getWorkflow_runs() {\n+            return workflow_runs;\n+        }\n+\n+        public void setWorkflow_runs(List<WorkflowRun> workflow_runs) {\n+            this.workflow_runs = workflow_runs;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    class ArtifactList {\n+        int total_count;\n+        List<Artifact> artifacts;\n+\n+        public int getTotal_count() {\n+            return total_count;\n+        }\n+\n+        public void setTotal_count(int total_count) {\n+            this.total_count = total_count;\n+        }\n+\n+        public List<Artifact> getArtifacts() {\n+            return artifacts;\n+        }\n+\n+        public void setArtifacts(List<Artifact> artifacts) {\n+            this.artifacts = artifacts;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    class Artifact {\n+        int id;\n+        String archive_download_url;\n+        boolean expired;\n+        String name; // test-report\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+\n+        public String getArchive_download_url() {\n+            return archive_download_url;\n+        }\n+\n+        public void setArchive_download_url(String archive_download_url) {\n+            this.archive_download_url = archive_download_url;\n+        }\n+\n+        public boolean isExpired() {\n+            return expired;\n+        }\n+\n+        public void setExpired(boolean expired) {\n+            this.expired = expired;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+    }\n+}"
  },
  {
    "sha": "a973e9b45898208a22058c4c053254fd3baea980",
    "filename": "src/main/java/io/quarkus/status/flaky/model/CheckRun.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/CheckRun.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/CheckRun.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/model/CheckRun.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,51 @@\n+package io.quarkus.status.flaky.model;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+\n+public class CheckRun {\n+    private int testRunId;\n+    private String githubActionsUrl;\n+    private String jobName;\n+    private ZonedDateTime time;\n+\n+    public CheckRun(int testRunId, String githubActionsUrl, String jobName, ZonedDateTime time) {\n+        this.testRunId = testRunId;\n+        this.githubActionsUrl = githubActionsUrl;\n+        this.jobName = jobName;\n+        this.time = time;\n+    }\n+\n+    public int getTestRunId() {\n+        return testRunId;\n+    }\n+\n+    public String getGithubActionsUrl() {\n+        return githubActionsUrl;\n+    }\n+\n+    public String getJobName() {\n+        return jobName;\n+    }\n+\n+    public void setJobName(String jobName) {\n+        this.jobName = jobName;\n+    }\n+\n+    public ZonedDateTime getTime() {\n+        return time;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        CheckRun checkRun = (CheckRun) o;\n+        return Objects.equals(testRunId, checkRun.testRunId);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(testRunId);\n+    }\n+}"
  },
  {
    "sha": "2945f97aaf08d5a1fd297518578a3015456ca85c",
    "filename": "src/main/java/io/quarkus/status/flaky/model/InvocationStatus.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/InvocationStatus.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/InvocationStatus.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/model/InvocationStatus.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,19 @@\n+package io.quarkus.status.flaky.model;\n+\n+public class InvocationStatus {\n+    private final Status status;\n+    private final CheckRun checkRun;\n+\n+    public InvocationStatus(Status status, CheckRun checkRun) {\n+        this.status = status;\n+        this.checkRun = checkRun;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    public CheckRun getCheckRun() {\n+        return checkRun;\n+    }\n+}"
  },
  {
    "sha": "b31aedde6158c8ae41e6c1e94df792fd7270f18c",
    "filename": "src/main/java/io/quarkus/status/flaky/model/Status.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/Status.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/Status.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/model/Status.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,7 @@\n+package io.quarkus.status.flaky.model;\n+\n+public enum Status {\n+    NO_DATA, // in future, split to SKIPPED and SUCCESS\n+    ERROR, // at least one test method failed with error\n+    FAILURE // at least one test method failed with failure\n+}"
  },
  {
    "sha": "be860682afe7021b89754bcf4fae341ca7fea7b6",
    "filename": "src/main/java/io/quarkus/status/flaky/model/Test.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/Test.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/Test.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/model/Test.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,37 @@\n+package io.quarkus.status.flaky.model;\n+\n+import io.vertx.core.impl.ConcurrentHashSet;\n+\n+import java.util.Set;\n+\n+public class Test {\n+    private String testName;\n+    private final Set<CheckRun> failures = new ConcurrentHashSet<>(); // this will hopefully be very small\n+    private final Set<CheckRun> errors = new ConcurrentHashSet<>(); // this will hopefully be very small\n+\n+    public Test(String testName) {\n+        this.testName = testName;\n+    }\n+\n+    public Test addFailure(CheckRun checkRun) {\n+        failures.add(checkRun);\n+        return this;\n+    }\n+\n+    public Test addError(CheckRun checkRun) {\n+        errors.add(checkRun);\n+        return this;\n+    }\n+\n+    public String getTestName() {\n+        return testName;\n+    }\n+\n+    public Set<CheckRun> getFailures() {\n+        return failures;\n+    }\n+\n+    public Set<CheckRun> getErrors() {\n+        return errors;\n+    }\n+}"
  },
  {
    "sha": "fc065281b5a0fda05a93297ef9a7a6cf3600b3ea",
    "filename": "src/main/java/io/quarkus/status/flaky/model/TestStats.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/TestStats.java",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/java/io/quarkus/status/flaky/model/TestStats.java",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/java/io/quarkus/status/flaky/model/TestStats.java?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,22 @@\n+package io.quarkus.status.flaky.model;\n+\n+import java.util.List;\n+\n+public class TestStats {\n+    private final String testName;\n+    private final List<InvocationStatus> invocations;\n+\n+    public TestStats(String testName,\n+                      List<InvocationStatus> invocations) {\n+        this.testName = testName;\n+        this.invocations = invocations;\n+    }\n+\n+    public String getTestName() {\n+        return testName;\n+    }\n+\n+    public List<InvocationStatus> getInvocations() {\n+        return invocations;\n+    }\n+}"
  },
  {
    "sha": "21b0f24e0d38f4740c0ff0a0087a5a019bd3b560",
    "filename": "src/main/resources/META-INF/resources/css/main.css",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/META-INF/resources/css/main.css",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/META-INF/resources/css/main.css",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/resources/META-INF/resources/css/main.css?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -34,3 +34,14 @@\n .ui.icon.message > i.icon:not(.close) {\n \tfont-size: 1em;\n }\n+\n+.flaky-input {\n+    margin: 2em\n+}\n+\n+.flaky-results {\n+    margin: 2em;\n+    padding: 2em;\n+    background-color: #fafafa;\n+    box-shadow: 2px 2px 2px #909090\n+}"
  },
  {
    "sha": "3ec7539742c4b31e6776ff496cad827f80f9b37a",
    "filename": "src/main/resources/templates/StatusResource/base.html",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/templates/StatusResource/base.html",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/templates/StatusResource/base.html",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/resources/templates/StatusResource/base.html?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -16,7 +16,7 @@\n \t\t\tStatus\n \t\t</a>\n \t\t{#for section in status.sections}\n-\t\t<a class=\"header item\" href=\"#{section.key}\">\n+\t\t<a class=\"header item\" href=\"/#{section.key}\">\n \t\t\t<small>{section.value.name}</small>&nbsp;&nbsp;\n \t\t\t{#if section.value.failure}\n \t\t\t\t<i class=\"red icon exclamation circle\"></i>\n@@ -28,6 +28,9 @@\n \t\t<a class=\"header item\" href=\"/bugs/\">\n \t\t\tIssues Deep Dive\n \t\t</a>\n+\t\t<a class=\"header item\" href=\"/tests/\">\n+\t\t\tPR Test Failures\n+\t\t</a>\n \t</div>\n \t<div class=\"main-content\">\n \t\t{#insert body /}"
  },
  {
    "sha": "b2af64dd11ddfa73dcc782ca7945e67a718da2f6",
    "filename": "src/main/resources/templates/StatusResource/testFailures.html",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/templates/StatusResource/testFailures.html",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/templates/StatusResource/testFailures.html",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/resources/templates/StatusResource/testFailures.html?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,52 @@\n+{#include StatusResource/base}\n+\n+{#body}\n+<div class=\"ui main container\">\n+\n+    <a href=\"/tests\">&lt; List of tests</a>\n+\n+    <div class=\"flaky-input\">\n+        <label for=\"testName\">Fully qualified test class name:</label><input type=\"text\" id=\"testName\">\n+        <button type=\"button\" onclick=\"showTestStats()\">Show test failures</button>\n+    </div>\n+\n+    <div class=\"flaky-results\">\n+            {#if testStats != null}\n+            <h4>Test failures and errors for {testName}</h4>\n+            <ul>\n+                {#for invocation in testStats.invocations}\n+                    {#when invocation.status}\n+                        {#is in ERROR FAILURE}\n+                            <li>{invocation.status} in\n+                                <a href=\"{invocation.checkRun.githubActionsUrl}\">check id: {invocation.checkRun.testRunId}\n+                                    at {invocation.checkRun.time.format('yyyy/MM/dd HH:mm')}</a>\n+                            </li>\n+                    {/when}\n+                {/for}\n+            </ul>\n+            {#else}\n+            {#if testName != null}\n+                <h4>No test failures for {testName} found. Make sure you are using fully qualified class name</h4>\n+                {/if}\n+             {/if}\n+    </div>\n+</div>\n+{/body}\n+\n+{#scripts}\n+<script>\n+    var testNameInput = document.getElementById(\"testName\");\n+    testNameInput.onkeydown = e => \\{if (e.key==\"Enter\")  showTestStats()\\}\n+\n+    function showTestStats() {\n+        console.log(\"in showTestStats\");\n+        var testName = document.getElementById(\"testName\").value;\n+        console.log(\"element: \", document.getElementById(\"testName\"));\n+        console.log(\"value: \", testName);\n+        window.location.href = '/testFailures?testName=' + testName;\n+    }\n+\n+</script>\n+{/scripts}\n+\n+{/include}\n\\ No newline at end of file"
  },
  {
    "sha": "1d944b9cba3adaa56eba849f7b7984ebd47fdf68",
    "filename": "src/main/resources/templates/StatusResource/tests.html",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/quarkusio/quarkus-status/blob/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/templates/StatusResource/tests.html",
    "raw_url": "https://github.com/quarkusio/quarkus-status/raw/4100252ec6e852338bd0ac62bcb86fd4c12d3a0a/src/main/resources/templates/StatusResource/tests.html",
    "contents_url": "https://api.github.com/repos/quarkusio/quarkus-status/contents/src/main/resources/templates/StatusResource/tests.html?ref=4100252ec6e852338bd0ac62bcb86fd4c12d3a0a",
    "patch": "@@ -0,0 +1,38 @@\n+{#include StatusResource/base}\n+\n+{#body}\n+<div class=\"ui main container\">\n+\n+    <div class=\"flaky-input\">\n+        <label for=\"testName\">Find test by fully qualified test class name:</label><input type=\"text\" id=\"testName\">\n+        <button type=\"button\" onclick=\"showTestStats()\">Show test failures</button>\n+    </div>\n+\n+    <div class=\"flaky-results\">\n+        <h4>Known tests</h4>\n+        <ul>\n+            {#for test in tests}\n+                <li><a href=\"/testFailures?testName={test}\">{test}</a></li>\n+            {/for}\n+        </ul>\n+    </div>\n+</div>\n+{/body}\n+\n+{#scripts}\n+<script>\n+    var testNameInput = document.getElementById(\"testName\");\n+    testNameInput.onkeydown = e => \\{if (e.key==\"Enter\")  showTestStats()\\}\n+\n+    function showTestStats() {\n+        console.log(\"in showTestStats\");\n+        var testName = document.getElementById(\"testName\").value;\n+        console.log(\"element: \", document.getElementById(\"testName\"));\n+        console.log(\"value: \", testName);\n+        window.location.href = '/testFailures?test=' + testName;\n+    }\n+\n+</script>\n+{/scripts}\n+\n+{/include}\n\\ No newline at end of file"
  }
]
