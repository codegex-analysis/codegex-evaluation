[
  {
    "sha": "afd496712c93ab9201ecf6c4e1023f1302f0ccee",
    "filename": "buildSrc/src/main/java/Versions.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/buildSrc/src/main/java/Versions.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/buildSrc/src/main/java/Versions.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/buildSrc/src/main/java/Versions.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -1,4 +1,7 @@\n public interface Versions {\n     String guava = \"28.2-jre\";\n     String junit_jupiter = \"5.4.2\";\n+    String sockjs = \"1.1.2\";\n+    String stomp = \"2.3.3-1\";\n+    String bootstrap = \"4.4.1-1\";\n }\n\\ No newline at end of file"
  },
  {
    "sha": "28b2b7ab3878c7721a3fb177f6fc2553738f45a0",
    "filename": "hw30-messageSystem/MessageSystem/build.gradle",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/build.gradle",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/build.gradle",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/build.gradle?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,31 @@\n+plugins {\n+    id 'java'\n+}\n+\n+sourceCompatibility = JavaVersion.VERSION_13\n+targetCompatibility = JavaVersion.VERSION_13\n+\n+dependencies {\n+\n+    implementation(\"ch.qos.logback:logback-classic\")\n+\n+    testImplementation(\"org.junit.jupiter:junit-jupiter-engine\")\n+    testImplementation(\"org.junit.jupiter:junit-jupiter-params\")\n+    testImplementation(\"org.assertj:assertj-core\")\n+    testImplementation(\"org.mockito:mockito-junit-jupiter\")\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+compileJava.options.encoding = 'UTF-8'\n+\n+tasks.withType(JavaCompile) {\n+    options.with {\n+        encoding = 'UTF-8'\n+    }\n+}"
  },
  {
    "sha": "9f568dba961beaff849e44304259052e0ba8fe94",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStore.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStore.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStore.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStore.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.otus.messagesystem;\n+\n+import ru.otus.messagesystem.client.ResultDataType;\n+import ru.otus.messagesystem.message.MessageType;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public interface HandlersStore {\n+    RequestHandler<? extends ResultDataType> getHandlerByType(String messageTypeName);\n+\n+    void addHandler(MessageType messageType, RequestHandler<? extends ResultDataType> handler);\n+}"
  },
  {
    "sha": "e224d5f22bf1967655a103df057e4ce1f57f6e49",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStoreImpl.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStoreImpl.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStoreImpl.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/HandlersStoreImpl.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,23 @@\n+package ru.otus.messagesystem;\n+\n+import ru.otus.messagesystem.client.ResultDataType;\n+import ru.otus.messagesystem.message.MessageType;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class HandlersStoreImpl implements HandlersStore {\n+    private final Map<String, RequestHandler<? extends ResultDataType>> handlers = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public RequestHandler<? extends ResultDataType> getHandlerByType(String messageTypeName) {\n+        return handlers.get(messageTypeName);\n+    }\n+\n+    @Override\n+    public void addHandler(MessageType messageType, RequestHandler<? extends ResultDataType> handler) {\n+        handlers.put(messageType.getName(), handler);\n+    }\n+\n+\n+}"
  },
  {
    "sha": "b87a6a60bfd0cb365f68e3d9c763ae4665c9dc7b",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystem.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystem.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystem.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystem.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.otus.messagesystem;\n+\n+import ru.otus.messagesystem.client.MsClient;\n+import ru.otus.messagesystem.message.Message;\n+\n+public interface MessageSystem {\n+\n+    void addClient(MsClient msClient);\n+\n+    void removeClient(String clientId);\n+\n+    boolean newMessage(Message msg);\n+\n+    void dispose() throws InterruptedException;\n+\n+    void dispose(Runnable callback) throws InterruptedException;\n+\n+    void start();\n+\n+    int currentQueueSize();\n+}\n+"
  },
  {
    "sha": "67fe9bf7b1a7c1741d5c4a2dee04845d4b1a0008",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystemImpl.java",
    "status": "added",
    "additions": 170,
    "deletions": 0,
    "changes": 170,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystemImpl.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystemImpl.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/MessageSystemImpl.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,170 @@\n+package ru.otus.messagesystem;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.otus.messagesystem.client.MsClient;\n+import ru.otus.messagesystem.message.Message;\n+import ru.otus.messagesystem.message.MessageBuilder;\n+\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\n+public final class MessageSystemImpl implements MessageSystem {\n+    private static final Logger logger = LoggerFactory.getLogger(MessageSystemImpl.class);\n+    private static final int MESSAGE_QUEUE_SIZE = 100_000;\n+    private static final int MSG_HANDLER_THREAD_LIMIT = 2;\n+\n+    private final AtomicBoolean runFlag = new AtomicBoolean(true);\n+\n+    private final Map<String, MsClient> clientMap = new ConcurrentHashMap<>();\n+    private final BlockingQueue<Message> messageQueue = new ArrayBlockingQueue<>(MESSAGE_QUEUE_SIZE);\n+\n+    private Runnable disposeCallback;\n+\n+    private final ExecutorService msgProcessor = Executors.newSingleThreadExecutor(runnable -> {\n+        Thread thread = new Thread(runnable);\n+        thread.setName(\"msg-processor-thread\");\n+        return thread;\n+    });\n+\n+    private final ExecutorService msgHandler = Executors.newFixedThreadPool(MSG_HANDLER_THREAD_LIMIT,\n+            new ThreadFactory() {\n+\n+        private final AtomicInteger threadNameSeq = new AtomicInteger(0);\n+\n+        @Override\n+        public Thread newThread(Runnable runnable) {\n+            Thread thread = new Thread(runnable);\n+            thread.setName(\"msg-handler-thread-\" + threadNameSeq.incrementAndGet());\n+            return thread;\n+        }\n+    });\n+\n+    public MessageSystemImpl() {\n+        start();\n+    }\n+\n+    public MessageSystemImpl(boolean startProcessing) {\n+        if (startProcessing) {\n+            start();\n+        }\n+    }\n+\n+    @Override\n+    public void start() {\n+        msgProcessor.submit(this::processMessages);\n+    }\n+\n+    @Override\n+    public int currentQueueSize() {\n+        return messageQueue.size();\n+    }\n+\n+    @Override\n+    public void addClient(MsClient msClient) {\n+        logger.info(\"new client:{}\", msClient.getName());\n+        if (clientMap.containsKey(msClient.getName())) {\n+            throw new IllegalArgumentException(\"Error. client: \" + msClient.getName() + \" already exists\");\n+        }\n+        clientMap.put(msClient.getName(), msClient);\n+    }\n+\n+    @Override\n+    public void removeClient(String clientId) {\n+        MsClient removedClient = clientMap.remove(clientId);\n+        if (removedClient == null) {\n+            logger.warn(\"client not found: {}\", clientId);\n+        } else {\n+            logger.info(\"removed client:{}\", removedClient);\n+        }\n+    }\n+\n+    @Override\n+    public boolean newMessage(Message msg) {\n+        if (runFlag.get()) {\n+            return messageQueue.offer(msg);\n+        } else {\n+            logger.warn(\"MS is being shutting down... rejected:{}\", msg);\n+            return false;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() throws InterruptedException {\n+        logger.info(\"now in the messageQueue {} messages\", currentQueueSize());\n+        runFlag.set(false);\n+        insertStopMessage();\n+        msgProcessor.shutdown();\n+        msgHandler.awaitTermination(60, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose(Runnable callback) throws InterruptedException {\n+        disposeCallback = callback;\n+        dispose();\n+    }\n+\n+    private void processMessages() {\n+        logger.info(\"msgProcessor started, {}\", currentQueueSize());\n+        while (runFlag.get() || !messageQueue.isEmpty()) {\n+            try {\n+                Message msg = messageQueue.take();\n+                if (msg == MessageBuilder.getVoidMessage()) {\n+                    logger.info(\"received the stop message\");\n+                } else {\n+                    MsClient clientTo = clientMap.get(msg.getTo());\n+                    if (clientTo == null) {\n+                        logger.warn(\"client not found\");\n+                    } else {\n+                        msgHandler.submit(() -> handleMessage(clientTo, msg));\n+                    }\n+                }\n+            } catch (InterruptedException ex) {\n+                logger.error(ex.getMessage(), ex);\n+                Thread.currentThread().interrupt();\n+            } catch (Exception ex) {\n+                logger.error(ex.getMessage(), ex);\n+            }\n+        }\n+\n+        if (disposeCallback != null) {\n+            msgHandler.submit(disposeCallback);\n+        }\n+        msgHandler.submit(this::messageHandlerShutdown);\n+        logger.info(\"msgProcessor finished\");\n+    }\n+\n+    private void messageHandlerShutdown() {\n+        msgHandler.shutdown();\n+        logger.info(\"msgHandler has been shut down\");\n+    }\n+\n+\n+    private void handleMessage(MsClient msClient, Message msg) {\n+        try {\n+            msClient.handle(msg);\n+        } catch (Exception ex) {\n+            logger.error(ex.getMessage(), ex);\n+            logger.error(\"message:{}\", msg);\n+        }\n+    }\n+\n+    private void insertStopMessage() throws InterruptedException {\n+        boolean result = messageQueue.offer(MessageBuilder.getVoidMessage());\n+        while (!result) {\n+            Thread.sleep(100);\n+            result = messageQueue.offer(MessageBuilder.getVoidMessage());\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "06ff1ab1616311e3682c0c0950ca5854ecea7c7f",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/RequestHandler.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/RequestHandler.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/RequestHandler.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/RequestHandler.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.otus.messagesystem;\n+\n+\n+import ru.otus.messagesystem.client.ResultDataType;\n+import ru.otus.messagesystem.message.Message;\n+\n+import java.util.Optional;\n+\n+\n+public interface RequestHandler<T extends ResultDataType> {\n+    Optional<Message> handle(Message msg);\n+}"
  },
  {
    "sha": "3ef4e9e91c494f76362b80b286e21590fb26daee",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackId.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackId.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackId.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackId.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,37 @@\n+package ru.otus.messagesystem.client;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+public class CallbackId implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+    private final String id;\n+\n+    public CallbackId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CallbackId{\" +\n+                \"id=\" + id +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        CallbackId that = (CallbackId) o;\n+        return Objects.equals(id, that.id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);\n+    }\n+}"
  },
  {
    "sha": "333967c20c823b109bcdaa838855549ccd67a7ae",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistry.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistry.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistry.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistry.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.otus.messagesystem.client;\n+\n+public interface CallbackRegistry {\n+    void put(CallbackId id, MessageCallback<? extends ResultDataType> callback);\n+\n+    MessageCallback<? extends ResultDataType> getAndRemove(CallbackId id);\n+}"
  },
  {
    "sha": "4634d4f526c33b0b66c696bb9ce41ac94318c372",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistryImpl.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistryImpl.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistryImpl.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/CallbackRegistryImpl.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.otus.messagesystem.client;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class CallbackRegistryImpl implements CallbackRegistry {\n+\n+    private final Map<CallbackId, MessageCallback<? extends ResultDataType>> callbackRegistry = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public void put(CallbackId id, MessageCallback<? extends ResultDataType> callback) {\n+        callbackRegistry.put(id, callback);\n+    }\n+\n+    @Override\n+    public MessageCallback<? extends ResultDataType> getAndRemove(CallbackId id) {\n+        return callbackRegistry.remove(id);\n+    }\n+}"
  },
  {
    "sha": "5b7b0eb1b28c40605f3e7c082a3004d4d6e38924",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MessageCallback.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MessageCallback.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MessageCallback.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MessageCallback.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,6 @@\n+package ru.otus.messagesystem.client;\n+\n+import java.util.function.Consumer;\n+\n+public interface MessageCallback<T extends ResultDataType> extends Consumer<T> {\n+}"
  },
  {
    "sha": "9baba6740470d1c99017b546d34201b5faf02bda",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClient.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClient.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClient.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClient.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,15 @@\n+package ru.otus.messagesystem.client;\n+\n+import ru.otus.messagesystem.message.Message;\n+import ru.otus.messagesystem.message.MessageType;\n+\n+public interface MsClient {\n+\n+    boolean sendMessage(Message msg);\n+\n+    void handle(Message msg);\n+\n+    String getName();\n+\n+    <T extends ResultDataType> Message produceMessage(String to, T data, MessageType msgType, MessageCallback<T> callback);\n+}"
  },
  {
    "sha": "941c1e7e54b6dde11c71f78cef5c40beaeda3b57",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClientImpl.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClientImpl.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClientImpl.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/MsClientImpl.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,80 @@\n+package ru.otus.messagesystem.client;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.otus.messagesystem.HandlersStore;\n+import ru.otus.messagesystem.message.Message;\n+import ru.otus.messagesystem.message.MessageBuilder;\n+import ru.otus.messagesystem.MessageSystem;\n+import ru.otus.messagesystem.message.MessageType;\n+import ru.otus.messagesystem.RequestHandler;\n+\n+import java.util.Objects;\n+\n+public class MsClientImpl implements MsClient {\n+    private static final Logger logger = LoggerFactory.getLogger(MsClientImpl.class);\n+\n+    private final String name;\n+    private final MessageSystem messageSystem;\n+    private final HandlersStore handlersStore;\n+    private final CallbackRegistry callbackRegistry;\n+\n+    public MsClientImpl(String name, MessageSystem messageSystem, HandlersStore handlersStore,\n+                        CallbackRegistry callbackRegistry) {\n+        this.name = name;\n+        this.messageSystem = messageSystem;\n+        this.handlersStore = handlersStore;\n+        this.callbackRegistry = callbackRegistry;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public boolean sendMessage(Message msg) {\n+        boolean result = messageSystem.newMessage(msg);\n+        if (!result) {\n+            logger.error(\"the last message was rejected: {}\", msg);\n+        }\n+        return result;\n+    }\n+\n+    @SuppressWarnings(\"all\")\n+    @Override\n+    public void handle(Message msg) {\n+        logger.info(\"new message:{}\", msg);\n+        try {\n+            RequestHandler requestHandler = handlersStore.getHandlerByType(msg.getType());\n+            if (requestHandler != null) {\n+                requestHandler.handle(msg).ifPresent(message -> sendMessage((Message) message));\n+            } else {\n+                logger.error(\"handler not found for the message type:{}\", msg.getType());\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"msg:{}\", msg, ex);\n+        }\n+    }\n+\n+    @Override\n+    public <T extends ResultDataType> Message produceMessage(String to, T data, MessageType msgType,\n+                                                                MessageCallback<T> callback) {\n+        Message message = MessageBuilder.buildMessage(name, to, null, data, msgType);\n+        callbackRegistry.put(message.getCallbackId(), callback);\n+        return message;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        MsClientImpl msClient = (MsClientImpl) o;\n+        return Objects.equals(name, msClient.name);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(name);\n+    }\n+}"
  },
  {
    "sha": "468a24b20b07dba9b2cdf49f2ceaa69f1003fa86",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/ResultDataType.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/ResultDataType.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/ResultDataType.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/client/ResultDataType.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.otus.messagesystem.client;\n+\n+import java.io.Serializable;\n+\n+public class ResultDataType implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+}"
  },
  {
    "sha": "aa8c6ea17ed8b29c0b917d7f1a0992b8dd98638a",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Message.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Message.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Message.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Message.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,92 @@\n+package ru.otus.messagesystem.message;\n+\n+import ru.otus.messagesystem.client.CallbackId;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public class Message implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    private final MessageId id;\n+    private final String from;\n+    private final String to;\n+    private final MessageId sourceMessageId;\n+    private final String type;\n+    private final byte[] payload;\n+    private final CallbackId callbackId;\n+\n+    Message(MessageId messageId, String from, String to, MessageId sourceMessageId, String type,\n+            byte[] payload, CallbackId callbackId) {\n+        this.id = messageId;\n+        this.from = from;\n+        this.to = to;\n+        this.sourceMessageId = sourceMessageId;\n+        this.type = type;\n+        this.payload = payload;\n+        this.callbackId = callbackId;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Message message = (Message) o;\n+        return Objects.equals(id, message.id) &&\n+                Objects.equals(from, message.from) &&\n+                Objects.equals(to, message.to) &&\n+                Objects.equals(sourceMessageId, message.sourceMessageId) &&\n+                Objects.equals(type, message.type) &&\n+                Arrays.equals(payload, message.payload) &&\n+                Objects.equals(callbackId, message.callbackId);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = Objects.hash(id, from, to, sourceMessageId, type, callbackId);\n+        result = 31 * result + Arrays.hashCode(payload);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Message{\" +\n+                \"id=\" + id +\n+                \", from='\" + from + '\\'' +\n+                \", to='\" + to + '\\'' +\n+                \", sourceMessageId=\" + sourceMessageId +\n+                \", type='\" + type + '\\'' +\n+                \", callbackId=\" + callbackId +\n+                '}';\n+    }\n+\n+    public MessageId getId() {\n+        return id;\n+    }\n+\n+    public String getFrom() {\n+        return from;\n+    }\n+\n+    public String getTo() {\n+        return to;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public byte[] getPayload() {\n+        return payload;\n+    }\n+\n+    public CallbackId getCallbackId() {\n+        return callbackId;\n+    }\n+\n+    public Optional<MessageId> getSourceMessageId() {\n+        return Optional.ofNullable(sourceMessageId);\n+    }\n+}"
  },
  {
    "sha": "c5a89c7aeaba996c0fcd1570ec797aa5fe065b68",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageBuilder.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageBuilder.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageBuilder.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageBuilder.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.otus.messagesystem.message;\n+\n+import ru.otus.messagesystem.client.CallbackId;\n+import ru.otus.messagesystem.client.ResultDataType;\n+\n+import java.util.UUID;\n+\n+public class MessageBuilder {\n+    private static final Message VOID_MESSAGE =\n+            new Message(new MessageId(UUID.randomUUID().toString()), null, null,\n+                    null, \"voidTechnicalMessage\", new byte[1],  null);\n+\n+    private MessageBuilder() {\n+    }\n+\n+    public static Message getVoidMessage() {\n+        return VOID_MESSAGE;\n+    }\n+\n+    public static <T extends ResultDataType> Message buildMessage(String from, String to, MessageId sourceMessageId,\n+                                                                     T data, MessageType msgType) {\n+        return buildMessage(from, to, sourceMessageId, data, msgType, null);\n+    }\n+\n+    public static <T extends ResultDataType> Message buildReplyMessage(Message message, T data) {\n+        return buildMessage(message.getTo(), message.getFrom(), message.getId(), data,\n+                MessageType.USER_DATA, message.getCallbackId());\n+    }\n+\n+    private static <T extends ResultDataType> Message buildMessage(String from, String to, MessageId sourceMessageId,\n+                                                                     T data, MessageType msgType, CallbackId callbackId) {\n+        String id = UUID.randomUUID().toString();\n+        return new Message(new MessageId(id), from, to, sourceMessageId, msgType.getName(),\n+                Serializers.serialize(data), callbackId == null ? new CallbackId(id) : callbackId);\n+    }\n+}"
  },
  {
    "sha": "5db5f71afa93646a39b97c1b2bfac2ac9029d70b",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageHelper.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageHelper.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageHelper.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageHelper.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.otus.messagesystem.message;\n+\n+public class MessageHelper {\n+    private MessageHelper() {\n+    }\n+\n+    public static <T> T getPayload(Message msg) {\n+        return (T) Serializers.deserialize(msg.getPayload());\n+    }\n+\n+    public static byte[] serializeMessage(Message msg) {\n+        return Serializers.serialize(msg);\n+    }\n+\n+    public static Message deSerializeMessage(byte[] bytes) {\n+        return (Message) Serializers.deserialize(bytes);\n+    }\n+}"
  },
  {
    "sha": "19bbec4f91cc667466f9d444b17becc04c6ba52d",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageId.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageId.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageId.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageId.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,37 @@\n+package ru.otus.messagesystem.message;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+public class MessageId implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+    private final String id;\n+\n+    public MessageId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MessageId{\" +\n+                \"id=\" + id +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        MessageId messageId = (MessageId) o;\n+        return Objects.equals(id, messageId.id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);\n+    }\n+}"
  },
  {
    "sha": "354d09d141edfe758cff0e6946a4f453d0002f41",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageType.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageType.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageType.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/MessageType.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.otus.messagesystem.message;\n+\n+public enum MessageType {\n+    USER_DATA(\"UserData\"),\n+    GET_USER(\"GetUser\"),\n+    GET_ALL(\"GetAll\"),\n+    GET_RANDOM(\"GetRandom\"),\n+    SAVE_USER(\"SaveUser\");\n+\n+    private final String name;\n+\n+    MessageType(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+}"
  },
  {
    "sha": "2f0494946951841eaf519e173b9293133a5edab9",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/SerializerError.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/SerializerError.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/SerializerError.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/SerializerError.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,8 @@\n+package ru.otus.messagesystem.message;\n+\n+public class SerializerError extends RuntimeException {\n+\n+    public SerializerError(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}"
  },
  {
    "sha": "a4e8f32ec73c322cb3a9c052a6660149b0615846",
    "filename": "hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Serializers.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Serializers.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Serializers.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/main/java/ru/otus/messagesystem/message/Serializers.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,31 @@\n+package ru.otus.messagesystem.message;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+class Serializers {\n+    private Serializers() {\n+    }\n+\n+    static byte[] serialize(Object data) {\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+             ObjectOutputStream os = new ObjectOutputStream(baos)) {\n+            os.writeObject(data);\n+            os.flush();\n+            return baos.toByteArray();\n+        } catch (Exception e) {\n+            throw new SerializerError(\"Serialization error\", e);\n+        }\n+    }\n+\n+    static Object deserialize(byte[] data) {\n+        try (ByteArrayInputStream bis = new ByteArrayInputStream(data);\n+             ObjectInputStream is = new ObjectInputStream(bis)) {\n+            return is.readObject();\n+        } catch (Exception e) {\n+            throw new SerializerError(\"DeSerialization error\", e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "992e2b68d50cfa81e443944e1d4f8a8f9a6efaa2",
    "filename": "hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/MessageHelperTest.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/MessageHelperTest.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/MessageHelperTest.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/MessageHelperTest.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,29 @@\n+package ru.otus.messagesystem.message;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.otus.messagesystem.client.CallbackId;\n+import java.util.UUID;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class MessageHelperTest {\n+\n+    @Test\n+    void serializeDeSerializeMessage() {\n+        Message msgExpected = new Message(new MessageId(UUID.randomUUID().toString()), \"from\", \"to\",\n+                new MessageId(UUID.randomUUID().toString()), \"type\",\n+                new byte[12], new CallbackId(UUID.randomUUID().toString()));\n+\n+        byte[] data = MessageHelper.serializeMessage(msgExpected);\n+\n+        Message msg = MessageHelper.deSerializeMessage(data);\n+\n+        assertThat(msg.getId()).isEqualTo(msgExpected.getId());\n+        assertThat(msg.getFrom()).isEqualTo(msgExpected.getFrom());\n+        assertThat(msg.getTo()).isEqualTo(msgExpected.getTo());\n+        assertThat(msg.getSourceMessageId()).isEqualTo(msgExpected.getSourceMessageId());\n+        assertThat(msg.getType()).isEqualTo(msgExpected.getType());\n+        assertThat(msg.getPayload()).isEqualTo(msgExpected.getPayload());\n+        assertThat(msg.getCallbackId()).isEqualTo(msgExpected.getCallbackId());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "14b36e1f1139ddde761778da469c65052b39b220",
    "filename": "hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/SerializersTest.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/SerializersTest.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/SerializersTest.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/SerializersTest.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,23 @@\n+package ru.otus.messagesystem.message;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.otus.messagesystem.client.CallbackId;\n+import ru.otus.messagesystem.client.MessageCallback;\n+import ru.otus.messagesystem.client.ResultDataType;\n+\n+import java.util.function.Consumer;\n+\n+import static org.assertj.core.api.Assertions.*;\n+\n+class SerializersTest {\n+\n+    @Test\n+    void serializeDeSerialize() {\n+        TestData testData = new TestData(1, \"str\", 2);\n+\n+        byte[] data = Serializers.serialize(testData);\n+\n+        TestData object = (TestData) Serializers.deserialize(data);\n+        assertThat(object).isEqualTo(testData);\n+    }\n+}"
  },
  {
    "sha": "c1b2aa0fc7172822d4482a84c1b520c390bedcc2",
    "filename": "hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/TestData.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/TestData.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/TestData.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/MessageSystem/src/test/java/ru/otus/messagesystem/message/TestData.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,40 @@\n+package ru.otus.messagesystem.message;\n+\n+import ru.otus.messagesystem.client.ResultDataType;\n+import java.util.Objects;\n+\n+class TestData extends ResultDataType {\n+    int x;\n+    String str;\n+    int y;\n+\n+    TestData(int x, String str, int y) {\n+        this.x = x;\n+        this.str = str;\n+        this.y = y;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        TestData testData = (TestData) o;\n+        return x == testData.x &&\n+                y == testData.y &&\n+                Objects.equals(str, testData.str);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(x, str, y);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TestData{\" +\n+                \"x=\" + x +\n+                \", str='\" + str + '\\'' +\n+                \", y=\" + y +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "be54f59f4bdf679d86e5af4ba430096e9b15e477",
    "filename": "hw30-messageSystem/docker/runDB.cmd",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/docker/runDB.cmd",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/docker/runDB.cmd",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/docker/runDB.cmd?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1 @@\n+docker run --rm --name pg-docker -e POSTGRES_PASSWORD=pwd -e POSTGRES_USER=usr -e POSTGRES_DB=demoDB -p 5432:5432 postgres:12\n\\ No newline at end of file"
  },
  {
    "sha": "719a426cbcf7e153f1bfd699dfbe7d866ffb16d7",
    "filename": "hw30-messageSystem/homework/build.gradle",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/build.gradle",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/build.gradle",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/homework/build.gradle?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,34 @@\n+plugins {\n+    id 'java'\n+    id 'org.springframework.boot' version '2.4.2'\n+}\n+\n+sourceCompatibility = JavaVersion.VERSION_13\n+targetCompatibility = JavaVersion.VERSION_13\n+\n+dependencies {\n+    implementation project(\":hw30-messageSystem:MessageSystem\")\n+\n+    implementation(\"org.springframework.boot:spring-boot-starter-websocket\")\n+    implementation(\"org.springframework.boot:spring-boot-starter-data-jpa\")\n+    implementation(\"org.springframework.boot:spring-boot-starter-thymeleaf\")\n+\n+    implementation(\"org.postgresql:postgresql\")\n+\n+    implementation(\"org.webjars:webjars-locator-core\")\n+    implementation(\"org.webjars:sockjs-client:${Versions.sockjs}\")\n+    implementation(\"org.webjars:stomp-websocket:${Versions.stomp}\")\n+    implementation(\"org.webjars:bootstrap:${Versions.bootstrap}\")\n+    implementation(\"org.webjars:jquery:3.1.1-1\")\n+\n+    implementation(\"org.apache.commons:commons-lang3\")\n+    implementation(\"ch.qos.logback:logback-classic\")\n+}\n+\n+compileJava.options.encoding = 'UTF-8'\n+\n+tasks.withType(JavaCompile) {\n+    options.with {\n+        encoding = 'UTF-8'\n+    }\n+}"
  },
  {
    "sha": "e238f13d2cfef8f926d69e233c7cee8b8a44e8fa",
    "filename": "hw30-messageSystem/homework/src/main/java/ru/otus/DbConfig.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/DbConfig.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/DbConfig.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/homework/src/main/java/ru/otus/DbConfig.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,17 @@\n+package ru.otus;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import ru.otus.model.User;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+@Configuration\n+public class DbConfig {\n+\n+    @Bean\n+    public Map<String, User> cache() {\n+        return new WeakHashMap<>();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4679b7f0ed52b1401b1f66a0518b4377b63d5627",
    "filename": "hw30-messageSystem/homework/src/main/java/ru/otus/MessageSystemConfig.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/MessageSystemConfig.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/MessageSystemConfig.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/homework/src/main/java/ru/otus/MessageSystemConfig.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,111 @@\n+package ru.otus;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import ru.otus.db.handlers.GetAllUserRequestHandler;\n+import ru.otus.db.handlers.GetRandomUserRequestHandler;\n+import ru.otus.db.handlers.GetUserRequestHandler;\n+import ru.otus.db.handlers.SaveUserRequestHandler;\n+import ru.otus.db.service.UserService;\n+import ru.otus.front.FrontendService;\n+import ru.otus.front.FrontendServiceImpl;\n+import ru.otus.front.handlers.GetUserDataResponseHandler;\n+import ru.otus.messagesystem.HandlersStore;\n+import ru.otus.messagesystem.HandlersStoreImpl;\n+import ru.otus.messagesystem.MessageSystem;\n+import ru.otus.messagesystem.MessageSystemImpl;\n+import ru.otus.messagesystem.client.CallbackRegistry;\n+import ru.otus.messagesystem.client.CallbackRegistryImpl;\n+import ru.otus.messagesystem.client.MsClient;\n+import ru.otus.messagesystem.client.MsClientImpl;\n+import ru.otus.messagesystem.message.MessageType;\n+\n+@Configuration\n+public class MessageSystemConfig {\n+    private static final Logger logger = LoggerFactory.getLogger(MessageSystemConfig.class);\n+\n+    private static final String FRONTEND_SERVICE_CLIENT_NAME = \"frontendService\";\n+    private static final String DATABASE_SERVICE_CLIENT_NAME = \"databaseService\";\n+\n+    @Bean\n+    public MessageSystem messageSystem() {\n+        return new MessageSystemImpl();\n+    }\n+\n+    @Bean\n+    public CallbackRegistry callbackRegistry() {\n+        return new CallbackRegistryImpl();\n+    }\n+\n+    // MS::Front\n+    @Bean\n+    public FrontendService frontendService(MessageSystem messageSystem, MsClient frontendMsClient) {\n+        return new FrontendServiceImpl(frontendMsClient, DATABASE_SERVICE_CLIENT_NAME);\n+    }\n+\n+    @Bean(name = \"frontendMsClient\")\n+    public MsClient frontendMsClient(MessageSystem messageSystem, HandlersStore requestHandlerFrontendStore,\n+                                     CallbackRegistry callbackRegistry) {\n+        MsClient databaseMsClient = new MsClientImpl(FRONTEND_SERVICE_CLIENT_NAME, messageSystem,\n+                requestHandlerFrontendStore, callbackRegistry);\n+        messageSystem.addClient(databaseMsClient);\n+        return databaseMsClient;\n+    }\n+\n+    @Bean(name = \"requestHandlerFrontendStore\")\n+    public HandlersStore requestHandlerFrontendStore(GetUserDataResponseHandler getUserDataResponseHandler) {\n+        HandlersStore requestHandlerFrontendStore = new HandlersStoreImpl();\n+        requestHandlerFrontendStore.addHandler(MessageType.USER_DATA, getUserDataResponseHandler);\n+        return requestHandlerFrontendStore;\n+    }\n+\n+    @Bean\n+    public GetUserDataResponseHandler getUserDataResponseHandler(CallbackRegistry callbackRegistry) {\n+        return new GetUserDataResponseHandler(callbackRegistry);\n+    }\n+\n+    // MS::DB\n+    @Bean(name = \"databaseMsClient\")\n+    public MsClient databaseMsClient(MessageSystem messageSystem, HandlersStore requestHandlerDatabaseStore,\n+                                     CallbackRegistry callbackRegistry) {\n+        MsClient databaseMsClient = new MsClientImpl(DATABASE_SERVICE_CLIENT_NAME, messageSystem,\n+                requestHandlerDatabaseStore, callbackRegistry);\n+        messageSystem.addClient(databaseMsClient);\n+        return databaseMsClient;\n+    }\n+\n+    @Bean(name = \"requestHandlerDatabaseStore\")\n+    public HandlersStore requestHandlerDatabaseStore(GetUserRequestHandler getUserRequestHandler,\n+                                                     GetAllUserRequestHandler getAllUserRequestHandler,\n+                                                     GetRandomUserRequestHandler getRandomUserRequestHandler,\n+                                                     SaveUserRequestHandler saveUserRequestHandler) {\n+        HandlersStore requestHandlerDatabaseStore = new HandlersStoreImpl();\n+        requestHandlerDatabaseStore.addHandler(MessageType.GET_USER, getUserRequestHandler);\n+        requestHandlerDatabaseStore.addHandler(MessageType.GET_ALL, getAllUserRequestHandler);\n+        requestHandlerDatabaseStore.addHandler(MessageType.GET_RANDOM, getRandomUserRequestHandler);\n+        requestHandlerDatabaseStore.addHandler(MessageType.SAVE_USER, saveUserRequestHandler);\n+        return requestHandlerDatabaseStore;\n+    }\n+\n+    @Bean\n+    public GetUserRequestHandler getUserDataRequestHandler(UserService userService) {\n+        return new GetUserRequestHandler(userService);\n+    }\n+\n+    @Bean\n+    public GetAllUserRequestHandler getAllUserRequestHandler(UserService userService) {\n+        return new GetAllUserRequestHandler(userService);\n+    }\n+\n+    @Bean\n+    public GetRandomUserRequestHandler getRandomUserRequestHandler(UserService userService) {\n+        return new GetRandomUserRequestHandler(userService);\n+    }\n+\n+    @Bean\n+    public SaveUserRequestHandler saveUserRequestHandler(UserService userService) {\n+        return new SaveUserRequestHandler(userService);\n+    }\n+}"
  },
  {
    "sha": "f945c480349ca766c256e8cb12ebf68bf44b6e66",
    "filename": "hw30-messageSystem/homework/src/main/java/ru/otus/WsConfig.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/WsConfig.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/WsConfig.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/homework/src/main/java/ru/otus/WsConfig.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,23 @@\n+package ru.otus;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.simp.config.MessageBrokerRegistry;\n+import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\n+import org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n+import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n+\n+@Configuration\n+@EnableWebSocketMessageBroker\n+public class WsConfig implements WebSocketMessageBrokerConfigurer {\n+\n+    @Override\n+    public void configureMessageBroker(MessageBrokerRegistry config) {\n+        config.enableSimpleBroker(\"/topic\");\n+        config.setApplicationDestinationPrefixes(\"/app\");\n+    }\n+\n+    @Override\n+    public void registerStompEndpoints(StompEndpointRegistry registry) {\n+        registry.addEndpoint(\"/gs-guide-websocket\").withSockJS();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5ac7a691af106e3a60d643a778ebb24c3c208f87",
    "filename": "hw30-messageSystem/homework/src/main/java/ru/otus/WsSBAServer.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/blob/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/WsSBAServer.java",
    "raw_url": "https://github.com/SGrechnev/2020-09-otus-java-grechnev/raw/28e08507fe60895e1d34df7ee6883990076bc200/hw30-messageSystem/homework/src/main/java/ru/otus/WsSBAServer.java",
    "contents_url": "https://api.github.com/repos/SGrechnev/2020-09-otus-java-grechnev/contents/hw30-messageSystem/homework/src/main/java/ru/otus/WsSBAServer.java?ref=28e08507fe60895e1d34df7ee6883990076bc200",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.otus;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class WsSBAServer {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(WsSBAServer.class, args);\n+    }\n+}\n\\ No newline at end of file"
  }
]
