[
  {
    "sha": "6c9807b096e091650c45373796851abdfdd8a772",
    "filename": "modules/library/common-index-model/src/main/java/org/fao/geonet/index/model/gn/Link.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/library/common-index-model/src/main/java/org/fao/geonet/index/model/gn/Link.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/library/common-index-model/src/main/java/org/fao/geonet/index/model/gn/Link.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/library/common-index-model/src/main/java/org/fao/geonet/index/model/gn/Link.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -6,8 +6,10 @@\n package org.fao.geonet.index.model.gn;\n \n import lombok.Data;\n+import javax.xml.bind.annotation.XmlType;\n \n @Data\n+@XmlType(name = \"ResourceLink\")\n public class Link {\n \n   private String protocol;"
  },
  {
    "sha": "dccb533c7575c17181c37f7d07291dc6c3366e19",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CapabilitiesApiController.java",
    "status": "modified",
    "additions": 45,
    "deletions": 7,
    "changes": 52,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CapabilitiesApiController.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CapabilitiesApiController.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CapabilitiesApiController.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -5,21 +5,32 @@\n \n package org.fao.geonet.ogcapi.records.controller;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import io.swagger.annotations.Api;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Map;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.xml.transform.SourceLocator;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n import org.fao.geonet.common.search.SearchConfiguration;\n import org.fao.geonet.common.search.SearchConfiguration.Operations;\n import org.fao.geonet.domain.Source;\n+import org.fao.geonet.index.model.gn.IndexRecord;\n+import org.fao.geonet.ogcapi.records.controller.model.CollectionInfo;\n+import org.fao.geonet.ogcapi.records.controller.model.CollectionInfoExtended;\n import org.fao.geonet.ogcapi.records.controller.model.Content;\n import org.fao.geonet.ogcapi.records.controller.model.Link;\n import org.fao.geonet.ogcapi.records.controller.model.Root;\n import org.fao.geonet.ogcapi.records.model.XsltModel;\n+import org.fao.geonet.ogcapi.records.service.CollectionService;\n import org.fao.geonet.ogcapi.records.util.CollectionInfoBuilder;\n import org.fao.geonet.ogcapi.records.util.LinksItemsBuilder;\n import org.fao.geonet.ogcapi.records.util.MediaTypeUtil;\n@@ -70,6 +81,12 @@\n   @Autowired\n   MediaTypeUtil mediaTypeUtil;\n \n+  @Autowired\n+  CollectionService collectionService;\n+\n+  @Autowired\n+  CollectionInfoBuilder collectionInfoBuilder;\n+\n   /**\n    * Landing page end-point.\n    *\n@@ -91,6 +108,10 @@\n   public ResponseEntity<Root> getLandingPage(@ApiIgnore HttpServletRequest request,\n       @ApiIgnore HttpServletResponse response,\n       @ApiIgnore Model model) throws Exception {\n+\n+    Locale locale = LocaleContextHolder.getLocale();\n+    String language = locale.getISO3Language();\n+\n     String baseUrl = request.getRequestURL().toString();\n \n     MediaType mediaType = mediaTypeUtil.calculatePriorityMediaTypeFromRequest(request);\n@@ -116,9 +137,21 @@\n       List<Source> sources = sourceRepository.findAll();\n       XsltModel modelSource = new XsltModel();\n       modelSource.setOutputFormats(configuration.getFormats(Operations.collections));\n-      modelSource.setCollections(sources);\n+\n+      List<CollectionInfoExtended> collectionInfoExtendedList = new ArrayList<>();\n+      sources.forEach(s -> {\n+        IndexRecord serviceRecord = collectionService\n+            .retrieveServiceMetadataForCollection(request, s);\n+\n+        CollectionInfoExtended collectionInfo = collectionInfoBuilder\n+            .buildExtendedFromSource(s, serviceRecord, language, baseUrl, mediaType);\n+\n+        collectionInfoExtendedList.add(collectionInfo);\n+      });\n+\n+      modelSource.setCollections(collectionInfoExtendedList);\n+\n       model.addAttribute(\"source\", modelSource.toSource());\n-      Locale locale = LocaleContextHolder.getLocale();\n       viewUtility.addi18n(model, locale, request);\n \n       View view = viewResolver.resolveViewName(\"ogcapir/landingpage\", locale);\n@@ -176,10 +209,9 @@ private void addOpenApiLinks(Root root, String baseUrl) {\n           .toString();\n \n       List<Source> sources = sourceRepository.findAll();\n-      sources.forEach(s -> {\n-        content.addCollectionsItem(\n-            CollectionInfoBuilder.buildFromSource(s, language, baseUrl, mediaType));\n-      });\n+      List<CollectionInfo> collectionInfoList =\n+          collectionInfoBuilder.buildFromSources(request, sources, language, baseUrl, mediaType);\n+      content.setCollections(collectionInfoList);\n \n       // TODO: Accept format parameter.\n       List<Link> linkList = LinksItemsBuilder.build(mediaType, baseUrl, language);\n@@ -190,8 +222,14 @@ private void addOpenApiLinks(Root root, String baseUrl) {\n       List<Source> sources = sourceRepository.findAll();\n       XsltModel modelSource = new XsltModel();\n       modelSource.setOutputFormats(configuration.getFormats(Operations.collections));\n-      modelSource.setCollections(sources);\n+\n+      List<CollectionInfoExtended> collectionInfoExtendedList =\n+          collectionInfoBuilder.buildExtendedFromSources(request, sources,\n+              language, baseUrl, mediaType);\n+\n+      modelSource.setCollections(collectionInfoExtendedList);\n       model.addAttribute(\"source\", modelSource.toSource());\n+      \n       viewUtility.addi18n(model, locale, request);\n \n       View view = viewResolver.resolveViewName(\"ogcapir/collections\", locale);"
  },
  {
    "sha": "84dfdb9915f4195c6613c508df95d1fd8d09b1b0",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CollectionApiController.java",
    "status": "modified",
    "additions": 18,
    "deletions": 3,
    "changes": 21,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CollectionApiController.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CollectionApiController.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CollectionApiController.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -1,5 +1,6 @@\n package org.fao.geonet.ogcapi.records.controller;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiParam;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n@@ -20,9 +21,11 @@\n import org.fao.geonet.common.search.SearchConfiguration;\n import org.fao.geonet.common.search.SearchConfiguration.Operations;\n import org.fao.geonet.domain.Source;\n+import org.fao.geonet.index.model.gn.IndexRecord;\n import org.fao.geonet.index.model.opensearch.OpenSearchDescription;\n import org.fao.geonet.index.model.opensearch.OpenSearchDescription.Url;\n import org.fao.geonet.ogcapi.records.controller.model.CollectionInfo;\n+import org.fao.geonet.ogcapi.records.controller.model.CollectionInfoExtended;\n import org.fao.geonet.ogcapi.records.model.XsltModel;\n import org.fao.geonet.ogcapi.records.service.CollectionService;\n import org.fao.geonet.ogcapi.records.util.CollectionInfoBuilder;\n@@ -75,6 +78,9 @@\n   @Autowired\n   MediaTypeUtil mediaTypeUtil;\n \n+  @Autowired\n+  CollectionInfoBuilder collectionInfoBuilder;\n+\n   /**\n    * Describe a collection.\n    */\n@@ -126,15 +132,24 @@\n         String baseUrl = request.getRequestURL()\n             .toString().replace(collectionId, \"\");\n \n-        CollectionInfo collectionInfo = CollectionInfoBuilder\n-            .buildFromSource(source, language, baseUrl, mediaType);\n+        IndexRecord serviceRecord = collectionService\n+            .retrieveServiceMetadataForCollection(request, source);\n+\n+        CollectionInfo collectionInfo = collectionInfoBuilder\n+            .buildFromSource(source, serviceRecord, language, baseUrl, mediaType);\n \n         return ResponseEntity.ok(collectionInfo);\n \n       } else {\n         XsltModel modelSource = new XsltModel();\n         modelSource.setOutputFormats(configuration.getFormats(Operations.collection));\n-        modelSource.setCollection(source);\n+        IndexRecord serviceRecord = collectionService\n+            .retrieveServiceMetadataForCollection(request, source);\n+\n+        CollectionInfoExtended collectionInfo = collectionInfoBuilder\n+            .buildExtendedFromSource(source, serviceRecord, language, baseUrl, mediaType);\n+\n+        modelSource.setCollection(collectionInfo);\n         model.addAttribute(\"source\", modelSource.toSource());\n \n         viewUtility.addi18n(model, locale, request);"
  },
  {
    "sha": "906c9c0972021bd223b9f121ae732c62753afe33",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/ItemApiController.java",
    "status": "modified",
    "additions": 30,
    "deletions": 4,
    "changes": 34,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/ItemApiController.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/ItemApiController.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/ItemApiController.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -51,15 +51,19 @@\n import org.fao.geonet.index.model.dcat2.Dataset;\n import org.fao.geonet.index.model.gn.IndexRecord;\n import org.fao.geonet.index.model.gn.IndexRecordFieldNames;\n+import org.fao.geonet.ogcapi.records.controller.model.CollectionInfo;\n+import org.fao.geonet.ogcapi.records.controller.model.CollectionInfoExtended;\n import org.fao.geonet.ogcapi.records.model.Item;\n import org.fao.geonet.ogcapi.records.model.XsltModel;\n import org.fao.geonet.ogcapi.records.service.CollectionService;\n+import org.fao.geonet.ogcapi.records.util.CollectionInfoBuilder;\n import org.fao.geonet.ogcapi.records.util.MediaTypeUtil;\n import org.fao.geonet.ogcapi.records.util.RecordsEsQueryBuilder;\n import org.fao.geonet.ogcapi.records.util.XmlUtil;\n import org.fao.geonet.repository.MetadataRepository;\n import org.fao.geonet.view.ViewUtility;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.MessageSource;\n import org.springframework.context.i18n.LocaleContextHolder;\n import org.springframework.http.HttpStatus;\n@@ -84,6 +88,9 @@\n @Slf4j(topic = \"org.fao.geonet.ogcapi.records\")\n public class ItemApiController {\n \n+  @Value(\"${gn.baseurl}\")\n+  String baseUrl;\n+\n   @Autowired\n   ElasticSearchProxy proxy;\n   @Autowired\n@@ -102,6 +109,8 @@\n   SearchConfiguration searchConfiguration;\n   @Autowired\n   MediaTypeUtil mediaTypeUtil;\n+  @Autowired\n+  CollectionInfoBuilder collectionInfoBuilder;\n \n   /**\n    * Describe a collection item.\n@@ -406,7 +415,15 @@\n       }\n       modelSource.setRequestParameters(request.getParameterMap());\n       modelSource.setOutputFormats(searchConfiguration.getFormats(Operations.item));\n-      modelSource.setCollection(source);\n+\n+      IndexRecord serviceRecord = collectionService\n+          .retrieveServiceMetadataForCollection(request, source);\n+\n+      CollectionInfoExtended collectionInfo = collectionInfoBuilder\n+          .buildExtendedFromSource(source, serviceRecord, language, baseUrl, MediaType.TEXT_HTML);\n+\n+      modelSource.setCollection(collectionInfo);\n+\n       modelSource.setItems(List.of(\n           new Item(recordId, null, record.getData())\n       ));\n@@ -545,8 +562,6 @@ private String search(\n       HttpServletResponse response,\n       Model model) throws Exception {\n \n-    Locale locale = LocaleContextHolder.getLocale();\n-    String language = locale.getISO3Language();\n     Source source = collectionService.retrieveSourceForCollection(collectionId);\n \n     if (source == null) {\n@@ -574,7 +589,18 @@ private String search(\n       parameterMap.put(\"startindex\", new String[]{startindex + \"\"});\n     }\n     modelSource.setRequestParameters(parameterMap);\n-    modelSource.setCollection(source);\n+\n+    Locale locale = LocaleContextHolder.getLocale();\n+    String language = locale.getISO3Language();\n+\n+    IndexRecord serviceRecord = collectionService\n+        .retrieveServiceMetadataForCollection(request, source);\n+\n+    CollectionInfoExtended collectionInfo = collectionInfoBuilder\n+        .buildExtendedFromSource(source, serviceRecord, language, baseUrl, MediaType.TEXT_HTML);\n+\n+    modelSource.setCollection(collectionInfo);\n+\n     modelSource.setResults(results);\n     modelSource.setOutputFormats(searchConfiguration.getFormats(Operations.items));\n     model.addAttribute(\"source\", modelSource.toSource());"
  },
  {
    "sha": "56a14000ed1843860d25de78b582a3ed0084b203",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfo.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfo.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfo.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfo.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -209,7 +209,7 @@ public String toString() {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+  protected String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }"
  },
  {
    "sha": "0e27e8391176f8febee51be844b8fed35e053740",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfoExtended.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfoExtended.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfoExtended.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/model/CollectionInfoExtended.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -0,0 +1,104 @@\n+package org.fao.geonet.ogcapi.records.controller.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import io.swagger.annotations.ApiModelProperty;\n+import java.util.Objects;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import org.fao.geonet.domain.Source;\n+import org.fao.geonet.index.model.gn.IndexRecord;\n+\n+/**\n+ * CollectionInfoExtended entity.\n+ */\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public class CollectionInfoExtended  extends CollectionInfo {\n+\n+  @JsonProperty(\"source\")\n+  @JacksonXmlProperty(localName = \"source\")\n+  private Source source;\n+\n+  @JsonProperty(\"record\")\n+  @JacksonXmlProperty(localName = \"record\")\n+  private IndexRecord record;\n+\n+  /**\n+   * Get source.\n+   */\n+  @ApiModelProperty(required = true, value = \"\")\n+  public Source getSource() {\n+    return source;\n+  }\n+\n+  public void setSource(Source source) {\n+    this.source = source;\n+  }\n+\n+  /**\n+   * Get record.\n+   */\n+  @ApiModelProperty(value = \"\")\n+  public IndexRecord getRecord() {\n+    return record;\n+  }\n+\n+  public void setRecord(IndexRecord record) {\n+    this.record = record;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+    CollectionInfoExtended that = (CollectionInfoExtended) o;\n+    return Objects.equals(source, that.source) && Objects.equals(record, that.record);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(super.hashCode(), source, record);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"class CollectionInfoExtended {\\n\");\n+\n+    sb.append(\"    name: \").append(toIndentedString(getId())).append(\"\\n\");\n+    sb.append(\"    title: \").append(toIndentedString(getTitle())).append(\"\\n\");\n+    sb.append(\"    description: \").append(toIndentedString(getDescription())).append(\"\\n\");\n+    sb.append(\"    links: \").append(toIndentedString(getLinks())).append(\"\\n\");\n+    sb.append(\"    extent: \").append(toIndentedString(getExtent())).append(\"\\n\");\n+    sb.append(\"    crs: \").append(toIndentedString(getCrs())).append(\"\\n\");\n+    sb.append(\"    source: \").append(toIndentedString(source)).append(\"\\n\");\n+    sb.append(\"    record: \").append(toIndentedString(record)).append(\"\\n\");\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+\n+\n+  /**\n+   * Builds a CollectionInfoExtended from a CollectionInfo instance.\n+   *\n+   */\n+  public static CollectionInfoExtended from(CollectionInfo collectionInfo) {\n+    CollectionInfoExtended collectionInfoExtended = new CollectionInfoExtended();\n+    collectionInfoExtended.setId(collectionInfo.getId());\n+    collectionInfoExtended.setTitle(collectionInfo.getTitle());\n+    collectionInfoExtended.setDescription(collectionInfo.getDescription());\n+    collectionInfoExtended.setCrs(collectionInfo.getCrs());\n+    collectionInfoExtended.setExtent(collectionInfo.getExtent());\n+    collectionInfoExtended.setLinks(collectionInfo.getLinks());\n+\n+    return collectionInfoExtended;\n+  }\n+}\n+"
  },
  {
    "sha": "8f9d2de19bf2ea202479039afc2e9b93a65f49f4",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/model/XsltModel.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/model/XsltModel.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/model/XsltModel.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/model/XsltModel.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -24,6 +24,7 @@\n import org.fao.geonet.common.search.SearchConfiguration.Format;\n import org.fao.geonet.common.search.domain.es.EsSearchResults;\n import org.fao.geonet.domain.Source;\n+import org.fao.geonet.ogcapi.records.controller.model.CollectionInfoExtended;\n \n @Data\n @NoArgsConstructor\n@@ -41,8 +42,8 @@\n \n   @XmlElementWrapper(name = \"collections\")\n   @XmlElement(name = \"collection\")\n-  List<Source> collections;\n-  Source collection;\n+  List<CollectionInfoExtended> collections;\n+  CollectionInfoExtended collection;\n \n   @XmlElementWrapper(name = \"items\")\n   @XmlElement(name = \"item\")"
  },
  {
    "sha": "6bb372bd751d6ee10fa38f4f30879da1853b5d68",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/service/CollectionService.java",
    "status": "modified",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/service/CollectionService.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/service/CollectionService.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/service/CollectionService.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -9,15 +9,27 @@\n import java.util.List;\n import java.util.Optional;\n import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang.StringUtils;\n+import org.fao.geonet.common.search.ElasticSearchProxy;\n import org.fao.geonet.common.search.SearchConfiguration;\n+import org.fao.geonet.domain.Setting;\n import org.fao.geonet.domain.Source;\n import org.fao.geonet.domain.SourceType;\n import org.fao.geonet.domain.UiSetting;\n+import org.fao.geonet.index.JsonUtils;\n+import org.fao.geonet.index.model.gn.IndexRecord;\n+import org.fao.geonet.index.model.gn.IndexRecordFieldNames;\n+import org.fao.geonet.ogcapi.records.util.RecordsEsQueryBuilder;\n+import org.fao.geonet.repository.SettingRepository;\n import org.fao.geonet.repository.SourceRepository;\n import org.fao.geonet.repository.UiSettingsRepository;\n+import org.fao.geonet.repository.specification.SettingSpec;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Service;\n+import org.springframework.web.server.ResponseStatusException;\n \n \n @Service\n@@ -33,6 +45,15 @@\n   @Autowired\n   private UiSettingsRepository uiSettingsRepository;\n \n+  @Autowired\n+  RecordsEsQueryBuilder recordsEsQueryBuilder;\n+\n+  @Autowired\n+  ElasticSearchProxy proxy;\n+\n+  @Autowired\n+  SettingRepository settingRepository;\n+\n   /**\n    * Checks if a collection is defined.\n    */\n@@ -117,4 +138,57 @@ public String retrieveCollectionFilter(Source source) {\n     return sortables;\n   }\n \n+\n+  /**\n+   * Retrieves the service metadata related to a collection.\n+   *\n+   */\n+  public IndexRecord retrieveServiceMetadataForCollection(HttpServletRequest request,\n+      Source source) {\n+    String serviceRecordUuid = \"\";\n+\n+    if (source.getType() == SourceType.portal) {\n+      Setting setting = settingRepository.getOne(\"system/csw/capabilityRecordUuid\");\n+      if (setting != null) {\n+        serviceRecordUuid = setting.getValue();\n+      }\n+    } else {\n+      serviceRecordUuid = source.getServiceRecord();\n+    }\n+\n+    if (StringUtils.isEmpty(serviceRecordUuid)) {\n+      return null;\n+    }\n+\n+    try {\n+      String collectionFilter = retrieveCollectionFilter(source);\n+      String query = recordsEsQueryBuilder.buildQuerySingleRecord(serviceRecordUuid,\n+          collectionFilter, null);\n+\n+      String queryResponse = proxy.searchAndGetResult(request.getSession(), request, query, null);\n+\n+      ObjectMapper mapper =  JsonUtils.getObjectMapper();\n+      JsonFactory factory = mapper.getFactory();\n+      JsonParser parser = factory.createParser(queryResponse);\n+      JsonNode recordAsJson = mapper.readTree(parser);\n+\n+      JsonNode totalValue = recordAsJson.get(\"hits\").get(\"total\").get(\"value\");\n+\n+      if ((totalValue == null) || (totalValue.intValue() == 0)) {\n+        return null;\n+      }\n+\n+      IndexRecord recordPojo = mapper.readValue(\n+          recordAsJson.get(\"hits\").get(\"hits\").get(0)\n+              .get(IndexRecordFieldNames.source).toPrettyString(), IndexRecord.class);\n+\n+      return recordPojo;\n+    } catch (Exception ex) {\n+      // TODO: Log exception\n+      ex.printStackTrace();\n+    }\n+\n+    return null;\n+  }\n+\n }"
  },
  {
    "sha": "a64f1d5d896160a85a83cd8bfebda4145aebb3b7",
    "filename": "modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/util/CollectionInfoBuilder.java",
    "status": "modified",
    "additions": 168,
    "deletions": 14,
    "changes": 182,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/util/CollectionInfoBuilder.java",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/util/CollectionInfoBuilder.java",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/util/CollectionInfoBuilder.java?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -1,36 +1,133 @@\n package org.fao.geonet.ogcapi.records.util;\n \n-\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.math.BigDecimal;\n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.commons.lang.StringUtils;\n import org.fao.geonet.domain.Source;\n import org.fao.geonet.domain.SourceType;\n+import org.fao.geonet.index.JsonUtils;\n+import org.fao.geonet.index.model.gn.IndexRecord;\n import org.fao.geonet.ogcapi.records.controller.model.CollectionInfo;\n+import org.fao.geonet.ogcapi.records.controller.model.CollectionInfoExtended;\n import org.fao.geonet.ogcapi.records.controller.model.Extent;\n import org.fao.geonet.ogcapi.records.controller.model.Extent.CrsEnum;\n import org.fao.geonet.ogcapi.records.controller.model.Extent.TrsEnum;\n import org.fao.geonet.ogcapi.records.controller.model.Link;\n+import org.fao.geonet.ogcapi.records.service.CollectionService;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n \n+@Component\n public class CollectionInfoBuilder {\n \n+  @Autowired\n+  CollectionService collectionService;\n+\n+  /**\n+   * Build Collection info lists from sources table.\n+   */\n+  public List<CollectionInfo> buildFromSources(HttpServletRequest request,\n+      List<Source> sources, String language, String baseUrl, MediaType mediaType) {\n+\n+    List<CollectionInfo> collectionInfoList = new ArrayList<>();\n+\n+    sources.forEach(s -> {\n+      IndexRecord serviceRecord = collectionService\n+          .retrieveServiceMetadataForCollection(request, s);\n+\n+      collectionInfoList.add(\n+          buildFromSource(s, serviceRecord, language, baseUrl, mediaType));\n+    });\n+\n+    return collectionInfoList;\n+  }\n+\n+  /**\n+   * Build Collection info extended list from source table.\n+   */\n+  public List<CollectionInfoExtended> buildExtendedFromSources(HttpServletRequest request,\n+      List<Source> sources, String language, String baseUrl, MediaType mediaType) {\n+\n+    List<CollectionInfoExtended> collectionInfoList = new ArrayList<>();\n+\n+    sources.forEach(s -> {\n+      IndexRecord serviceRecord = collectionService\n+          .retrieveServiceMetadataForCollection(request, s);\n+\n+      collectionInfoList.add(\n+          buildExtendedFromSource(s, serviceRecord, language, baseUrl, mediaType));\n+    });\n+\n+    return collectionInfoList;\n+  }\n+\n   /**\n    * Build Collection info from source table.\n    */\n-  public static CollectionInfo buildFromSource(Source source, String language,\n+  public CollectionInfo buildFromSource(Source source, IndexRecord serviceRecord, String language,\n       String baseUrl, MediaType mediaType) {\n     String name;\n \n+    CollectionInfo collectionInfo;\n+\n+    if (serviceRecord != null) {\n+      collectionInfo = buildFromServiceRecordInfo(serviceRecord, language);\n+    } else {\n+      collectionInfo = buildFromSourceInfo(source, language);\n+    }\n+\n     if (source.getType() == SourceType.portal) {\n       name = \"main\";\n     } else {\n       name = source.getUuid();\n     }\n+    collectionInfo.setId(name);\n+\n+    // TODO: Accept format parameter.\n+    baseUrl = baseUrl + (!baseUrl.endsWith(\"/\") ? \"/\" : \"\");\n+    URI collectionUri = URI.create(baseUrl).resolve(name);\n+    Link currentDoc = new Link();\n+    currentDoc.setRel(\"self\");\n+    currentDoc.setHref(collectionUri.toString());\n+    currentDoc.setType(mediaType.toString());\n+    currentDoc.setHreflang(language);\n+\n+    List<Link> linkList = LinksItemsBuilder.build(mediaType, collectionUri.toString(), language);\n+    linkList.forEach(l -> collectionInfo.addLinksItem(l));\n+\n+    return collectionInfo;\n+  }\n+\n+  /**\n+   * Build Collection info extended from source table.\n+   */\n+  public CollectionInfoExtended buildExtendedFromSource(Source source, IndexRecord serviceRecord,\n+      String language, String baseUrl, MediaType mediaType) {\n+    \n+    CollectionInfo collectionInfo =\n+        buildFromSource(source, serviceRecord, language, baseUrl, mediaType);\n+\n+    CollectionInfoExtended collectionInfoExtended = CollectionInfoExtended.from(collectionInfo);\n+    collectionInfoExtended.setSource(source);\n+    collectionInfoExtended.setRecord(serviceRecord);\n+    \n+    return collectionInfoExtended;\n+  }\n \n+  \n+  private CollectionInfo buildFromSourceInfo(Source source, String language) {\n     CollectionInfo collectionInfo = new CollectionInfo();\n-    collectionInfo.setId(name);\n+\n     String label = source.getLabel(language);\n     // The source label may contain a description\n     // eg. \"INSPIRE|Data sets and services for the environment\"\n@@ -42,27 +139,84 @@ public static CollectionInfo buildFromSource(Source source, String language,\n     collectionInfo\n         .setCrs(Arrays.asList(CrsEnum.HTTP_WWW_OPENGIS_NET_DEF_CRS_OGC_1_3_CRS84.getValue()));\n \n-    // TODO: Review values\n     Extent extent = new Extent();\n     extent.crs(CrsEnum.HTTP_WWW_OPENGIS_NET_DEF_CRS_OGC_1_3_CRS84);\n+    extent.setTrs(TrsEnum.HTTP_WWW_OPENGIS_NET_DEF_UOM_ISO_8601_0_GREGORIAN);\n     extent.setSpatial(Arrays.asList(new BigDecimal(-180), new BigDecimal(-90),\n         new BigDecimal(180), new BigDecimal(90)));\n+\n     collectionInfo.setExtent(extent);\n+    collectionInfo.setCrs(Arrays.asList(extent.getCrs().getValue()));\n+\n+    return collectionInfo;\n+  }\n+\n+  private CollectionInfo buildFromServiceRecordInfo(IndexRecord serviceRecord, String language) {\n+    CollectionInfo collectionInfo = new CollectionInfo();\n+\n+    collectionInfo.setTitle(\n+        getTranslationForRecordProperty(serviceRecord.getResourceTitle(), language));\n+    collectionInfo.setDescription(\n+        getTranslationForRecordProperty(serviceRecord.getResourceAbstract(), language));\n \n+    Extent extent = new Extent();\n+    extent.crs(CrsEnum.HTTP_WWW_OPENGIS_NET_DEF_CRS_OGC_1_3_CRS84);\n     extent.setTrs(TrsEnum.HTTP_WWW_OPENGIS_NET_DEF_UOM_ISO_8601_0_GREGORIAN);\n \n-    // TODO: Accept format parameter.\n-    baseUrl = baseUrl + (!baseUrl.endsWith(\"/\") ? \"/\" : \"\");\n-    URI collectionUri = URI.create(baseUrl).resolve(name);\n-    Link currentDoc = new Link();\n-    currentDoc.setRel(\"self\");\n-    currentDoc.setHref(collectionUri.toString());\n-    currentDoc.setType(mediaType.toString());\n-    currentDoc.setHreflang(language);\n+    List<BigDecimal> coordinates = parseRecordCoordinates(serviceRecord);\n \n-    List<Link> linkList = LinksItemsBuilder.build(mediaType, collectionUri.toString(), language);\n-    linkList.forEach(l -> collectionInfo.addLinksItem(l));\n+    if (!coordinates.isEmpty()) {\n+      extent.setSpatial(coordinates);\n+    } else {\n+      extent.setSpatial(Arrays.asList(new BigDecimal(-180), new BigDecimal(-90),\n+          new BigDecimal(180), new BigDecimal(90)));\n+    }\n+\n+    collectionInfo.setCrs(Arrays.asList(extent.getCrs().getValue()));\n+\n+    collectionInfo.setExtent(extent);\n \n     return collectionInfo;\n   }\n+\n+  private List<BigDecimal> parseRecordCoordinates(IndexRecord record) {\n+    List<BigDecimal> coordinatesList = new ArrayList<>();\n+\n+    if (record.getGeometries().size() > 0) {\n+      String coordinates = record.getGeometries().get(0);\n+\n+      try {\n+        ObjectMapper mapper =  JsonUtils.getObjectMapper();\n+        JsonFactory factory = mapper.getFactory();\n+        JsonParser parser = factory.createParser(coordinates);\n+        JsonNode coordinatesAsJson = mapper.readTree(parser);\n+\n+        JsonNode coordinatesNode = coordinatesAsJson.get(\"coordinates\");\n+\n+        if ((coordinatesNode != null) && (coordinatesNode.size() > 0)) {\n+          JsonNode coordinatesArrayNode = coordinatesNode.get(0);\n+\n+          if (coordinatesArrayNode.isArray()) {\n+            coordinatesList.add(new BigDecimal(coordinatesArrayNode.get(0).get(0).doubleValue()));\n+            coordinatesList.add(new BigDecimal(coordinatesArrayNode.get(0).get(1).doubleValue()));\n+            coordinatesList.add(new BigDecimal(coordinatesArrayNode.get(2).get(0).doubleValue()));\n+            coordinatesList.add(new BigDecimal(coordinatesArrayNode.get(2).get(1).doubleValue()));\n+          }\n+        }\n+\n+      } catch (Exception ex) {\n+        // TODO: Log exception\n+      }\n+\n+    }\n+\n+    return coordinatesList;\n+  }\n+\n+\n+  private String getTranslationForRecordProperty(Map<String, String> translations,\n+      String language) {\n+    return StringUtils.isNotEmpty(translations.get(\"lang\" + language))\n+        ? translations.get(\"lang\" + language) : translations.get(\"default\");\n+  }\n }"
  },
  {
    "sha": "5068e5327dab7369b75fa0649554b1c76df00a76",
    "filename": "modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection-fn.xsl",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection-fn.xsl",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection-fn.xsl",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection-fn.xsl?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -6,14 +6,18 @@\n \n   <xsl:function name=\"gn-ogcapir-util:getCollectionName\" as=\"xs:string\">\n     <xsl:param name=\"collection\" as=\"element(collection)\"/>\n-    <xsl:param name=\"language\" as=\"xs:string\"/>\n \n     <xsl:value-of select=\"$collection/(\n-                            labelTranslations/entry[key = $language3letters]/value[. != '']\n+                            title[. != '']\n                             |name[. != '']\n                             |uuid)[1]\"/>\n   </xsl:function>\n \n+  <xsl:function name=\"gn-ogcapir-util:getCollectionDescription\" as=\"xs:string\">\n+    <xsl:param name=\"collection\" as=\"element(collection)\"/>\n+\n+    <xsl:value-of select=\"$collection/description[. != '']\"/>\n+  </xsl:function>\n \n   <!-- Collection logo is:\n    * in logo folder for main portal and harvester.\n@@ -22,8 +26,8 @@\n   <xsl:function name=\"gn-ogcapir-util:getCollectionLogo\" as=\"xs:string\">\n     <xsl:param name=\"collection\" as=\"element(collection)\"/>\n \n-    <xsl:value-of select=\"if ($collection/type = ('harvester', 'portal'))\n-                          then concat($geonetworkUrl, '/', $logoFolder, '/', $collection/uuid, '.png')\n-                          else concat($geonetworkUrl, '/', $harvestingFolder, '/', $collection/logo)\"/>\n+    <xsl:value-of select=\"if ($collection/source/type = ('harvester', 'portal'))\n+                          then concat($geonetworkUrl, '/', $logoFolder, '/', $collection/source/uuid, '.png')\n+                          else concat($geonetworkUrl, '/', $harvestingFolder, '/', $collection/source/logo)\"/>\n   </xsl:function>\n </xsl:stylesheet>\n\\ No newline at end of file"
  },
  {
    "sha": "0b61c0dfe77ce34e4d5cba0c6bb086537d6de01b",
    "filename": "modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection.xsl",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection.xsl",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection.xsl",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collection.xsl?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -20,7 +20,11 @@\n                   as=\"node()?\"/>\n \n     <xsl:variable name=\"label\"\n-                  select=\"gn-ogcapir-util:getCollectionName($collection, $language)\"\n+                  select=\"gn-ogcapir-util:getCollectionName($collection)\"\n+                  as=\"xs:string\"/>\n+\n+    <xsl:variable name=\"description\"\n+                  select=\"gn-ogcapir-util:getCollectionDescription($collection)\"\n                   as=\"xs:string\"/>\n \n     <xsl:variable name=\"properties\"\n@@ -32,7 +36,7 @@\n                   as=\"node()*\"/>\n \n     <xsl:variable name=\"title\"\n-                    select=\"if (empty($properties[1])) then name else $properties[1]\"/>\n+                    select=\"if (empty($properties[1])) then source/name else $properties[1]\"/>\n     <xsl:variable name=\"subTitle\"\n                     select=\"if (empty($properties[2])) then '' else $properties[2]\"/>\n     <html>\n@@ -58,6 +62,12 @@\n                         select=\"model/results/total/total\"/>\n \n           <div class=\"container mx-auto flex flex-wrap pt-4 pb-12 text-gray-800 md:px-4\">\n+            <xsl:if test=\"string($description)\">\n+              <div class=\"w-2/3\">\n+                <h2><xsl:value-of select=\"$description\" /></h2>\n+              </div>\n+            </xsl:if>\n+\n             <div class=\"w-2/3\">\n               <xsl:choose>\n                 <xsl:when test=\"model/results\">"
  },
  {
    "sha": "d277ab8c50448a00111a2bc835a5e5e0cb101d17",
    "filename": "modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collections.xsl",
    "status": "modified",
    "additions": 10,
    "deletions": 9,
    "changes": 19,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collections.xsl",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collections.xsl",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/collections.xsl?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -21,16 +21,17 @@\n                   as=\"node()*\"/>\n \n     <xsl:variable name=\"mainCollection\"\n-                  select=\"$collections[type = 'portal']\"\n+                  select=\"$collections[source/type = 'portal']\"\n                   as=\"node()?\"/>\n     <xsl:variable name=\"mainCollectionName\"\n-                  select=\"gn-ogcapir-util:getCollectionName($mainCollection, $language)\"/>\n+                  select=\"gn-ogcapir-util:getCollectionName($mainCollection)\"/>\n+\n \n     <xsl:variable name=\"portals\"\n-                  select=\"$collections[type = 'subportal']\"\n+                  select=\"$collections[source/type = 'subportal']\"\n                   as=\"node()*\"/>\n     <xsl:variable name=\"harvesters\"\n-                  select=\"$collections[type = 'harvester']\"\n+                  select=\"$collections[source/type = 'harvester']\"\n                   as=\"node()*\"/>\n     <xsl:variable name=\"outputFormats\"\n                   select=\"/model/outputFormats/outputFormat/name\"\n@@ -44,7 +45,7 @@\n \n       <xsl:call-template name=\"html-body\">\n         <xsl:with-param name=\"logo\">\n-          <img src=\"{gn-ogcapir-util:getCollectionLogo($mainCollection)}\"\n+         <img src=\"{gn-ogcapir-util:getCollectionLogo($mainCollection)}\"\n                class=\"\"/>\n         </xsl:with-param>\n         <xsl:with-param name=\"title\">\n@@ -108,7 +109,7 @@\n           <div class=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n             <xsl:for-each select=\"$collections\">\n               <xsl:variable name=\"label\"\n-                            select=\"gn-ogcapir-util:getCollectionName(., $language)\"\n+                            select=\"gn-ogcapir-util:getCollectionName(.)\"\n                             as=\"xs:string\"/>\n \n               <xsl:variable name=\"properties\"\n@@ -117,11 +118,11 @@\n \n               <xsl:call-template name=\"render-collection\">\n                 <xsl:with-param name=\"title\"\n-                                select=\"if (empty($properties[1])) then name else $properties[1]\"/>\n+                                select=\"if (empty($properties[1])) then source/name else $properties[1]\"/>\n                 <xsl:with-param name=\"subTitle\"\n                                 select=\"if (empty($properties[2])) then '' else $properties[2]\"/>\n                 <xsl:with-param name=\"logo\" select=\"gn-ogcapir-util:getCollectionLogo(.)\"/>\n-                <xsl:with-param name=\"url\" select=\"concat($requestUrl, '/', uuid)\"/>\n+                <xsl:with-param name=\"url\" select=\"concat($requestUrl, '/', source/uuid)\"/>\n               </xsl:call-template>\n             </xsl:for-each>\n           </div>\n@@ -149,7 +150,7 @@\n             </h3>\n             <p class=\"leading-relaxed text-sm text-gray-700 clamp-3 hover:text-gray-800\">\n               <xsl:value-of select=\"$subTitle\"/>\n-              \n+\n             </p>\n           </div>\n         </div>"
  },
  {
    "sha": "eb9577c3a049b037a6d6b7d8736a7ec59707c9c8",
    "filename": "modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/landingpage.xsl",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/geonetwork/geonetwork-microservices/blob/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/landingpage.xsl",
    "raw_url": "https://github.com/geonetwork/geonetwork-microservices/raw/d2da8119c714aa0feb83c4a0a70ba96782d911be/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/landingpage.xsl",
    "contents_url": "https://api.github.com/repos/geonetwork/geonetwork-microservices/contents/modules/services/ogc-api-records/src/main/resources/xslt/ogcapir/landingpage.xsl?ref=d2da8119c714aa0feb83c4a0a70ba96782d911be",
    "patch": "@@ -16,21 +16,23 @@\n   <xsl:import href=\"html-util.xsl\"/>\n \n   <xsl:template match=\"/\">\n+    <xsl:message><xsl:copy-of select=\"model\" /></xsl:message>\n+\n     <xsl:variable name=\"collections\"\n                   select=\"model/collections/collection\"\n                   as=\"node()*\"/>\n \n     <xsl:variable name=\"mainCollection\"\n-                  select=\"$collections[type = 'portal']\"\n+                  select=\"$collections[source/type = 'portal']\"\n                   as=\"node()?\"/>\n     <xsl:variable name=\"mainCollectionName\"\n-                  select=\"gn-ogcapir-util:getCollectionName($mainCollection, $language)\"/>\n+                  select=\"gn-ogcapir-util:getCollectionName($mainCollection)\"/>\n \n     <xsl:variable name=\"portals\"\n-                  select=\"$collections[type = 'subportal']\"\n+                  select=\"$collections[source/type = 'subportal']\"\n                   as=\"node()*\"/>\n     <xsl:variable name=\"harvesters\"\n-                  select=\"$collections[type = 'harvester']\"\n+                  select=\"$collections[source/type = 'harvester']\"\n                   as=\"node()*\"/>\n     <xsl:variable name=\"outputFormats\"\n                   select=\"/model/outputFormats/outputFormat/name\"\n@@ -70,6 +72,4 @@\n     </html>\n   </xsl:template>\n \n-\n-\n </xsl:stylesheet>\n\\ No newline at end of file"
  }
]
