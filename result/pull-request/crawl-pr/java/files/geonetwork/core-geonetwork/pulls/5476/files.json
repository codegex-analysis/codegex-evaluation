[
  {
    "sha": "6f11e07b2bab5cc1108c91a5ad8d4e45e01838c3",
    "filename": "core/pom.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/core/pom.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/core/pom.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/core/pom.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -527,6 +527,10 @@\n       <artifactId>aws-java-sdk-s3</artifactId>\n       <version>1.11.618</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.jasypt</groupId>\n+      <artifactId>jasypt</artifactId>\n+    </dependency>\n   </dependencies>\n \n   <build>"
  },
  {
    "sha": "54f30f09de075a6ddc1a9891f6b4aff30771ca38",
    "filename": "core/src/main/java/org/fao/geonet/kernel/setting/HarvesterSettingsManager.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/core/src/main/java/org/fao/geonet/kernel/setting/HarvesterSettingsManager.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/core/src/main/java/org/fao/geonet/kernel/setting/HarvesterSettingsManager.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/core/src/main/java/org/fao/geonet/kernel/setting/HarvesterSettingsManager.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -216,7 +216,12 @@ public boolean setValues(Map<String, Object> values) {\n      * When adding to a newly created node, path must be 'id:...'.\n      */\n     public String add(String path, Object name, Object value) {\n-        if (name == null)\n+        return add(path, name, value, false);\n+    }\n+\n+    public String add(String path, Object name, Object value, boolean encrypted) {\n+\n+            if (name == null)\n             throw new IllegalArgumentException(\"Name cannot be null\");\n \n         String sName = makeString(name);\n@@ -231,7 +236,8 @@ public String add(String path, Object name, Object value) {\n         if (parent == null)\n             return null;\n \n-        HarvesterSetting child = new HarvesterSetting().setParent(parent).setName(sName).setValue(sValue);\n+        HarvesterSetting child = new HarvesterSetting().setParent(parent)\n+            .setName(sName).setValue(sValue).setEncrypted(encrypted);\n \n         settingsRepo.save(child);\n         return Integer.toString(child.getId());"
  },
  {
    "sha": "13bbafa60034f108c9fe493e95c48f07193b0aa4",
    "filename": "domain/pom.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/pom.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/pom.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/pom.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -110,7 +110,14 @@\n       <artifactId>h2</artifactId>\n       <scope>test</scope>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>org.jasypt</groupId>\n+      <artifactId>jasypt</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.jasypt</groupId>\n+      <artifactId>jasypt-hibernate5</artifactId>\n+    </dependency>\n   </dependencies>\n \n   <build>"
  },
  {
    "sha": "c9eccaf8e9da4f40317dec022b33d9c49a35fc74",
    "filename": "domain/src/main/java/org/fao/geonet/domain/HarvesterSetting.java",
    "status": "modified",
    "additions": 80,
    "deletions": 41,
    "changes": 121,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/HarvesterSetting.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/HarvesterSetting.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/java/org/fao/geonet/domain/HarvesterSetting.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2001-2016 Food and Agriculture Organization of the\n+ * Copyright (C) 2001-2021 Food and Agriculture Organization of the\n  * United Nations (FAO-UN), United Nations World Food Programme (WFP)\n  * and United Nations Environment Programme (UNEP)\n  *\n@@ -27,9 +27,6 @@\n \n import org.fao.geonet.entitylistener.HarvesterSettingEntityListenerManager;\n import org.hibernate.annotations.Type;\n-import static javax.persistence.CascadeType.DETACH;\n-import static javax.persistence.CascadeType.MERGE;\n-import static javax.persistence.CascadeType.PERSIST;\n \n import java.util.HashSet;\n import java.util.Set;\n@@ -53,13 +50,8 @@\n import javax.persistence.Table;\n import javax.persistence.Transient;\n \n-import org.fao.geonet.entitylistener.HarvesterSettingEntityListenerManager;\n import org.hibernate.annotations.OnDelete;\n import org.hibernate.annotations.OnDeleteAction;\n-import org.hibernate.annotations.Type;\n-import org.hibernate.engine.internal.Cascade;\n-\n-import com.google.common.collect.Sets;\n \n /**\n  * An entity representing a harvester configuration setting.\n@@ -78,10 +70,18 @@\n     static final String ID_SEQ_NAME = \"harvester_setting_id_seq\";\n     private static final HashSet<String> EXCLUDE_FROM_XML = Sets.newHashSet(\"valueAsBool\", \"valueAsInt\");\n \n-    private int _id;\n-    private HarvesterSetting _parent;\n-    private String _name;\n-    private String _value;\n+    private int id;\n+    private HarvesterSetting parent;\n+    private String name;\n+    /**\n+     * If the setting is not encrypted: value = storedValue, otherwise value contains the unencrypted value.\n+     *\n+     * Should be used the methods for value property. storedValue is managed in\n+     * {@link org.fao.geonet.entitylistener.HarvesterSettingValueSetter}.\n+     */\n+    private String storedValue;\n+    private String value;\n+    private char encrypted = Constants.YN_FALSE;\n \n     /**\n      * Get the setting id. This is a generated value and as such new instances should not have this\n@@ -93,7 +93,7 @@\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = ID_SEQ_NAME)\n     @Column(name = \"id\", nullable = false)\n     public int getId() {\n-        return _id;\n+        return id;\n     }\n \n     /**\n@@ -104,7 +104,7 @@ public int getId() {\n      * @return this setting object\n      */\n     public HarvesterSetting setId(int id) {\n-        this._id = id;\n+        this.id = id;\n         return this;\n     }\n \n@@ -117,7 +117,7 @@ public HarvesterSetting setId(int id) {\n     public\n     @Nullable\n     HarvesterSetting getParent() {\n-        return _parent;\n+        return parent;\n     }\n \n     /**\n@@ -129,7 +129,7 @@ HarvesterSetting getParent() {\n     public\n     @Nonnull\n     HarvesterSetting setParent(@Nullable HarvesterSetting parent) {\n-        this._parent = parent;\n+        this.parent = parent;\n         return this;\n     }\n \n@@ -142,7 +142,7 @@ HarvesterSetting setParent(@Nullable HarvesterSetting parent) {\n     public\n     @Nonnull\n     String getName() {\n-        return _name;\n+        return name;\n     }\n \n     /**\n@@ -154,7 +154,7 @@ String getName() {\n     public\n     @Nonnull\n     HarvesterSetting setName(@Nonnull String name) {\n-        this._name = name;\n+        this.name = name;\n         return this;\n     }\n \n@@ -167,23 +167,33 @@ HarvesterSetting setName(@Nonnull String name) {\n     // this is a work around for postgres so postgres can correctly load clobs\n     public\n     @Nullable\n-    String getValue() {\n-        return _value;\n+    String getStoredValue() {\n+        return storedValue;\n     }\n \n     /**\n-     * Set the value of setting with a boolean.\n+     * Set the value of setting.\n      *\n      * @param value the new value\n      * @return this setting object\n      */\n-    public HarvesterSetting setValue(boolean value) {\n-        return setValue(String.valueOf(value));\n+    public HarvesterSetting setStoredValue(@Nullable String value) {\n+        this.storedValue = value;\n+        return this;\n     }\n \n-    public HarvesterSetting setValue(@Nullable String value) {\n-        this._value = value;\n-        return this;\n+    /**\n+     * Get the values as a boolean. Returns false if the values is not a boolean.\n+     *\n+     * @return the values as a boolean\n+     * @throws NullPointerException if the value is null.\n+     */\n+    @Transient\n+    public boolean getValueAsBool() throws NullPointerException {\n+        if (getValue() == null) {\n+            throw new NullPointerException(\"Setting value of \" + getName() + \" is null\");\n+        }\n+        return Boolean.parseBoolean(value);\n     }\n \n     /**\n@@ -201,27 +211,56 @@ public int getValueAsInt() throws NullPointerException, NumberFormatException {\n     }\n \n     /**\n-     * Set the value of setting with an integer.\n+     * For backwards compatibility we need the activated column to be either 'n' or 'y'.\n+     * This is a workaround to allow this until future\n+     * versions of JPA that allow different ways of controlling how types are mapped to the database.\n+     */\n+    @Column(name = \"encrypted\", nullable = false, length = 1, columnDefinition=\"char default 'n'\")\n+    protected char getEncrypted_JpaWorkaround() {\n+        return encrypted;\n+    }\n+\n+    /**\n+     * Set the column value. Constants.YN_ENABLED for true Constants.YN_DISABLED for false.\n      *\n-     * @param value the new value\n-     * @return this setting object\n+     * @param encryptedValue the column value. Constants.YN_ENABLED for true Constants.YN_DISABLED for false.\n+     * @return\n      */\n-    public HarvesterSetting setValue(int value) {\n-        return setValue(String.valueOf(value));\n+    protected void setEncrypted_JpaWorkaround(char encryptedValue) {\n+        encrypted = encryptedValue;\n     }\n \n     /**\n-     * Get the values as a boolean. Returns false if the values is not a boolean.\n+     * Return true if the setting is public.\n      *\n-     * @return the values as a boolean\n-     * @throws NullPointerException if the value is null.\n+     * @return true if the setting is public.\n      */\n     @Transient\n-    public boolean getValueAsBool() throws NullPointerException {\n-        if (getValue() == null) {\n-            throw new NullPointerException(\"Setting value of \" + getName() + \" is null\");\n-        }\n-        return Boolean.parseBoolean(_value);\n+    public boolean isEncrypted() {\n+        return Constants.toBoolean_fromYNChar(getEncrypted_JpaWorkaround());\n+    }\n+\n+    /**\n+     * Set true if the setting is private.\n+     *\n+     * @param encrypted true if the setting is private.\n+     */\n+    public HarvesterSetting setEncrypted(boolean encrypted) {\n+        setEncrypted_JpaWorkaround(Constants.toYN_EnabledChar(encrypted));\n+        return this;\n+    }\n+\n+    @Transient\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public HarvesterSetting setValue(@Nullable String value) {\n+        this.value = value;\n+        // Required to trigger PreUpdate event in  {@link org.fao.geonet.entitylistener.SettingEntityListenerManager},\n+        // otherwise doesn't work with transient properties\n+        this.setStoredValue(value);\n+        return this;\n     }\n \n     @Override\n@@ -231,6 +270,6 @@ public boolean getValueAsBool() throws NullPointerException {\n \n     @Override\n     public String toString() {\n-        return \"Setting [id=\" + _id + \", name=\" + _name + \", value=\" + _value + \"]\";\n+        return \"Setting [id=\" + id + \", name=\" + name + \", value=\" + value + \"]\";\n     }\n }"
  },
  {
    "sha": "0ac56ef5be96f9aa284d67a6a3c529251e523ca9",
    "filename": "domain/src/main/java/org/fao/geonet/domain/MapServer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/MapServer.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/MapServer.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/java/org/fao/geonet/domain/MapServer.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2001-2016 Food and Agriculture Organization of the\n+ * Copyright (C) 2001-2021 Food and Agriculture Organization of the\n  * United Nations (FAO-UN), United Nations World Food Programme (WFP)\n  * and United Nations Environment Programme (UNEP)\n  *\n@@ -24,12 +24,10 @@\n package org.fao.geonet.domain;\n \n import org.fao.geonet.entitylistener.MapServerEntityListenerManager;\n+import org.hibernate.annotations.Type;\n \n-import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n import javax.persistence.*;\n \n-import java.util.Map;\n \n /**\n  * An entity representing mapserver used for publishing records as WMS, WFS, WCS.\n@@ -38,6 +36,7 @@\n  *\n  * @author Francois\n  */\n+\n @Entity\n @Table(name = \"Mapservers\")\n @Cacheable\n@@ -232,6 +231,7 @@ public MapServer setUsername(String _username) {\n      * @return the password.\n      */\n     @Column(length = 128)\n+    @Type(type=\"encryptedString\")\n     public String getPassword() {\n         return _password;\n     }"
  },
  {
    "sha": "0eb848d20c0abb79ef17143db914097968355d70",
    "filename": "domain/src/main/java/org/fao/geonet/domain/Setting.java",
    "status": "modified",
    "additions": 77,
    "deletions": 8,
    "changes": 85,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/Setting.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/Setting.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/java/org/fao/geonet/domain/Setting.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2001-2016 Food and Agriculture Organization of the\n+ * Copyright (C) 2001-2021 Food and Agriculture Organization of the\n  * United Nations (FAO-UN), United Nations World Food Programme (WFP)\n  * and United Nations Environment Programme (UNEP)\n  *\n@@ -23,13 +23,21 @@\n \n package org.fao.geonet.domain;\n \n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import org.fao.geonet.entitylistener.SettingEntityListenerManager;\n import org.hibernate.annotations.Type;\n \n-import javax.persistence.*;\n+import javax.annotation.Nullable;\n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n \n /**\n  * An entity representing a system configuration setting.\n@@ -47,10 +55,18 @@\n @JsonSerialize(using = SettingToObjectSerializer.class)\n public class Setting extends GeonetEntity {\n     private String name;\n+    /**\n+     * If the setting is not encrypted: value = storedValue, otherwise value contains the unencrypted value.\n+     *\n+     * Should be used the methods for value property. storedValue is managed in\n+     * {@link org.fao.geonet.entitylistener.SettingValueSetter}.\n+     */\n+    private String storedValue;\n     private String value;\n     private SettingDataType dataType = SettingDataType.STRING;\n     private int position = 0;\n     private char internal = Constants.YN_TRUE;\n+    private char encrypted  = Constants.YN_FALSE;\n \n     @Id\n     @Column(name = \"name\", nullable = false, length = 255/* mysql cannot accept it any bigger if it is to be the id */)\n@@ -67,12 +83,12 @@ public Setting setName(String name) {\n     @Column(name = \"value\", nullable = true)\n     @Type(type = \"org.hibernate.type.TextType\")\n     // this is a work around for postgres so postgres can correctly load clobs\n-    public String getValue() {\n-        return value;\n+    public String getStoredValue() {\n+        return storedValue;\n     }\n \n-    public Setting setValue(String value) {\n-        this.value = value;\n+    public Setting setStoredValue(String storedValue) {\n+        this.storedValue = storedValue;\n         return this;\n     }\n \n@@ -136,6 +152,59 @@ public Setting setInternal(boolean internal) {\n         return this;\n     }\n \n+    /**\n+     * For backwards compatibility we need the activated column to be either 'n' or 'y'.\n+     * This is a workaround to allow this until future\n+     * versions of JPA that allow different ways of controlling how types are mapped to the database.\n+     */\n+    @Column(name = \"encrypted\", nullable = false, length = 1, columnDefinition=\"char default 'n'\")\n+    protected char getEncrypted_JpaWorkaround() {\n+        return encrypted;\n+    }\n+\n+    /**\n+     * Set the column value. Constants.YN_ENABLED for true Constants.YN_DISABLED for false.\n+     *\n+     * @param encryptedValue the column value. Constants.YN_ENABLED for true Constants.YN_DISABLED for false.\n+     * @return\n+     */\n+    protected void setEncrypted_JpaWorkaround(char encryptedValue) {\n+        encrypted = encryptedValue;\n+    }\n+\n+    /**\n+     * Return true if the setting is public.\n+     *\n+     * @return true if the setting is public.\n+     */\n+    @Transient\n+    public boolean isEncrypted() {\n+        return Constants.toBoolean_fromYNChar(getEncrypted_JpaWorkaround());\n+    }\n+\n+    /**\n+     * Set true if the setting is private.\n+     *\n+     * @param encrypted true if the setting is private.\n+     */\n+    public Setting setEncrypted(boolean encrypted) {\n+        setEncrypted_JpaWorkaround(Constants.toYN_EnabledChar(encrypted));\n+        return this;\n+    }\n+\n+    @Transient\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public Setting setValue(@Nullable String value) {\n+        this.value = value;\n+        // Required to trigger PreUpdate event in  {@link org.fao.geonet.entitylistener.SettingEntityListenerManager},\n+        // otherwise doesn't work with transient properties\n+        this.setStoredValue(value);\n+        return this;\n+    }\n+\n     @Override\n     public String toString() {\n         return \"Setting{'\" + name + \"' = '\" + value + \"'}\";"
  },
  {
    "sha": "0149f9ed4bc0f50029c6608dd7ee8d49bdecb7d6",
    "filename": "domain/src/main/java/org/fao/geonet/domain/package-info.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/package-info.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/domain/package-info.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/java/org/fao/geonet/domain/package-info.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -21,10 +21,28 @@\n  * Rome - Italy. email: geonetwork@osgeo.org\n  */\n \n+\n /**\n  * Domain objects geonetwork.  These are JPA entities and are configured via javax.persistence\n  * annotations.\n  *\n  * @author Jesse\n  */\n+@TypeDefs\n+    ({\n+        @TypeDef(\n+            name=\"encryptedString\",\n+            typeClass= EncryptedStringType.class,\n+            parameters={\n+                @Parameter(name=\"encryptorRegisteredName\",\n+                    value=\"STRING_ENCRYPTOR\")\n+            }\n+        )\n+    })\n+\n package org.fao.geonet.domain;\n+\n+import org.hibernate.annotations.Parameter;\n+import org.hibernate.annotations.TypeDef;\n+import org.hibernate.annotations.TypeDefs;\n+import org.jasypt.hibernate5.type.EncryptedStringType;"
  },
  {
    "sha": "07d350abd0305dd3dfac5efde5b9cd0b340d8c4c",
    "filename": "domain/src/main/java/org/fao/geonet/entitylistener/HarvesterSettingValueSetter.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/entitylistener/HarvesterSettingValueSetter.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/entitylistener/HarvesterSettingValueSetter.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/java/org/fao/geonet/entitylistener/HarvesterSettingValueSetter.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (C) 2001-2021 Food and Agriculture Organization of the\n+ * United Nations (FAO-UN), United Nations World Food Programme (WFP)\n+ * and United Nations Environment Programme (UNEP)\n+ *\n+ * This program is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+ *\n+ * Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+ * Rome - Italy. email: geonetwork@osgeo.org\n+ */\n+\n+package org.fao.geonet.entitylistener;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.fao.geonet.domain.HarvesterSetting;\n+import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+\n+/**\n+ * Handler for database events to manage encrypt/decrypt of encrypted harvester settings.\n+ *\n+ */\n+public class HarvesterSettingValueSetter implements GeonetworkEntityListener<HarvesterSetting> {\n+    @Autowired\n+    private StandardPBEStringEncryptor encryptor;\n+\n+    @Override\n+    public Class<HarvesterSetting> getEntityClass() {\n+        return HarvesterSetting.class;\n+    }\n+\n+    @Override\n+    public void handleEvent(final PersistentEventType type, final HarvesterSetting entity) {\n+        if ((type == PersistentEventType.PrePersist) || (type == PersistentEventType.PreUpdate)) {\n+            if (entity.isEncrypted() && StringUtils.isNotEmpty(entity.getValue())) {\n+                entity.setStoredValue(this.encryptor.encrypt(entity.getValue()));\n+            } else {\n+                entity.setStoredValue(entity.getValue());\n+            }\n+\n+        } else if ((type == PersistentEventType.PostLoad) ||  (type == PersistentEventType.PostUpdate)) {\n+            if (entity.isEncrypted() && StringUtils.isNotEmpty(entity.getStoredValue())) {\n+                entity.setValue(this.encryptor.decrypt(entity.getStoredValue()));\n+            } else {\n+                entity.setValue(entity.getStoredValue());\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "f4dedca88ab9c8d2a69ea5ae966c4de714fc5c3a",
    "filename": "domain/src/main/java/org/fao/geonet/entitylistener/SettingValueSetter.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/entitylistener/SettingValueSetter.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/entitylistener/SettingValueSetter.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/java/org/fao/geonet/entitylistener/SettingValueSetter.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (C) 2001-2021 Food and Agriculture Organization of the\n+ * United Nations (FAO-UN), United Nations World Food Programme (WFP)\n+ * and United Nations Environment Programme (UNEP)\n+ *\n+ * This program is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+ *\n+ * Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+ * Rome - Italy. email: geonetwork@osgeo.org\n+ */\n+\n+package org.fao.geonet.entitylistener;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.fao.geonet.domain.Setting;\n+import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Handler for database events to manage encrypt/decrypt of encrypted settings.\n+ *\n+ */\n+public class SettingValueSetter implements GeonetworkEntityListener<Setting> {\n+    @Autowired\n+    private StandardPBEStringEncryptor encryptor;\n+\n+    @Override\n+    public Class<Setting> getEntityClass() {\n+        return Setting.class;\n+    }\n+\n+    @Override\n+    public void handleEvent(final PersistentEventType type, final Setting entity) {\n+        if ((type == PersistentEventType.PrePersist) || (type == PersistentEventType.PreUpdate)) {\n+            if (entity.isEncrypted() && StringUtils.isNotEmpty(entity.getValue())) {\n+                entity.setStoredValue(this.encryptor.encrypt(entity.getValue()));\n+            } else {\n+                entity.setStoredValue(entity.getValue());\n+            }\n+\n+        } else if ((type == PersistentEventType.PostLoad) ||  (type == PersistentEventType.PostUpdate)) {\n+            if (entity.isEncrypted() && StringUtils.isNotEmpty(entity.getStoredValue())) {\n+                entity.setValue(this.encryptor.decrypt(entity.getStoredValue()));\n+            } else {\n+                entity.setValue(entity.getStoredValue());\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "c28295c8b64fd1d9f0d66c01f449be0abced4447",
    "filename": "domain/src/main/java/org/fao/geonet/repository/HarvesterSettingRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/repository/HarvesterSettingRepository.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/java/org/fao/geonet/repository/HarvesterSettingRepository.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/java/org/fao/geonet/repository/HarvesterSettingRepository.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -63,7 +63,7 @@\n      * @param value the setting value.\n      * @return All settings with the given name and value.\n      */\n-    List<HarvesterSetting> findAllByNameAndValue(@Nonnull String name, @Nonnull String value);\n+    List<HarvesterSetting> findAllByNameAndStoredValue(@Nonnull String name, @Nonnull String value);\n \n     /**\n      * Find the settings with the given name and value. Null is returned if not found.\n@@ -73,5 +73,5 @@\n      * @return The setting with the given name and value.\n      */\n     @Nullable\n-    HarvesterSetting findOneByNameAndValue(@Nonnull String name, @Nonnull String value);\n+    HarvesterSetting findOneByNameAndStoredValue(@Nonnull String name, @Nonnull String value);\n }"
  },
  {
    "sha": "23f50b235b0a7207620c535058f018c4840a34d0",
    "filename": "domain/src/main/resources/config-spring-geonetwork.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/resources/config-spring-geonetwork.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/main/resources/config-spring-geonetwork.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/main/resources/config-spring-geonetwork.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -38,6 +38,12 @@\n   <bean id=\"userNodeIdSetter\"\n         class=\"org.fao.geonet.entitylistener.UserNodeIdSetter\"/>\n \n+  <bean id=\"settingValueSetter\"\n+        class=\"org.fao.geonet.entitylistener.SettingValueSetter\"/>\n+\n+  <bean id=\"harvesterSettingValueSetter\"\n+        class=\"org.fao.geonet.entitylistener.HarvesterSettingValueSetter\"/>\n+\n   <bean id=\"entityManagerFactory\"\n         class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n     <property name=\"dataSource\" ref=\"jdbcDataSource\"/>"
  },
  {
    "sha": "54c41abb22d0fd17ddce541fb4c305df5e5623ef",
    "filename": "domain/src/test/java/org/fao/geonet/repository/HarvesterSettingRepositoryTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/java/org/fao/geonet/repository/HarvesterSettingRepositoryTest.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/java/org/fao/geonet/repository/HarvesterSettingRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/test/java/org/fao/geonet/repository/HarvesterSettingRepositoryTest.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -47,7 +47,7 @@\n \n     public static HarvesterSetting newSetting(AtomicInteger inc) {\n         int id = inc.incrementAndGet();\n-        return new HarvesterSetting().setName(\"name \" + id).setValue(\"value \" + id);\n+        return new HarvesterSetting().setName(\"name \" + id).setStoredValue(\"value \" + id);\n     }\n \n     @Test"
  },
  {
    "sha": "e80d0ef6b8a1b1ddea3afb65445a4499e8acc52d",
    "filename": "domain/src/test/java/org/fao/geonet/repository/MapServerTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/java/org/fao/geonet/repository/MapServerTest.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/java/org/fao/geonet/repository/MapServerTest.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/test/java/org/fao/geonet/repository/MapServerTest.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -25,6 +25,9 @@\n \n \n import org.fao.geonet.domain.MapServer;\n+import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\n+import org.jasypt.hibernate5.encryptor.HibernatePBEEncryptorRegistry;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -47,6 +50,17 @@\n \n     private AtomicInteger _nextId = new AtomicInteger();\n \n+    @BeforeClass\n+    public static void init() {\n+        StandardPBEStringEncryptor strongEncryptor = new StandardPBEStringEncryptor();\n+        strongEncryptor.setPassword(\"testpassword\");\n+\n+        HibernatePBEEncryptorRegistry registry =\n+            HibernatePBEEncryptorRegistry.getInstance();\n+        registry.registerPBEStringEncryptor(\"STRING_ENCRYPTOR\", strongEncryptor);\n+    }\n+\n+\n     public static MapServer newMapServer(AtomicInteger nextId) {\n         int id = nextId.incrementAndGet();\n         return new MapServer()"
  },
  {
    "sha": "e6f2cbf25d1e4fef1e8135459993354a3b169fb4",
    "filename": "domain/src/test/resources/domain-repository-test-context.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/resources/domain-repository-test-context.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/resources/domain-repository-test-context.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/test/resources/domain-repository-test-context.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -80,4 +80,13 @@\n     <entry key=\"hibernate.enable_lazy_load_no_trans\" value=\"true\"/>\n   </util:map>\n \n+  <bean id=\"strongEncryptor\"\n+        class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\">\n+    <property name=\"algorithm\">\n+      <value>PBEWithMD5AndDES</value>\n+    </property>\n+    <property name=\"password\">\n+      <value>jasypt</value>\n+    </property>\n+  </bean>\n </beans>"
  },
  {
    "sha": "0f780f01d13457a69c14fded4695e37ab4ac5a25",
    "filename": "domain/src/test/resources/issue1876-context.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/resources/issue1876-context.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/domain/src/test/resources/issue1876-context.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/domain/src/test/resources/issue1876-context.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -81,4 +81,14 @@\n \t<bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n \t\t<property name=\"entityManagerFactory\" ref=\"entityManagerFactory\" />\n \t</bean>\n+\n+  <bean id=\"strongEncryptor\"\n+        class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\">\n+    <property name=\"algorithm\">\n+      <value>PBEWithMD5AndDES</value>\n+    </property>\n+    <property name=\"password\">\n+      <value>jasypt</value>\n+    </property>\n+  </bean>\n </beans>"
  },
  {
    "sha": "f514708afc2d20a035499ac84d78962964fd1911",
    "filename": "harvesters/src/main/java/org/fao/geonet/kernel/harvest/harvester/AbstractHarvester.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/harvesters/src/main/java/org/fao/geonet/kernel/harvest/harvester/AbstractHarvester.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/harvesters/src/main/java/org/fao/geonet/kernel/harvest/harvester/AbstractHarvester.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/harvesters/src/main/java/org/fao/geonet/kernel/harvest/harvester/AbstractHarvester.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -946,7 +946,7 @@ private void storeNode(P params, String path) throws SQLException {\n         String useAccId = harvesterSettingsManager.add(ID_PREFIX + siteId, \"useAccount\", params.isUseAccount());\n \n         harvesterSettingsManager.add(ID_PREFIX + useAccId, \"username\", params.getUsername());\n-        harvesterSettingsManager.add(ID_PREFIX + useAccId, \"password\", params.getPassword());\n+        harvesterSettingsManager.add(ID_PREFIX + useAccId, \"password\", params.getPassword(), true);\n \n         //--- setup options node ---------------------------------------\n "
  },
  {
    "sha": "f6602c7a50a53d515a4710c3b8023998807ca2ab",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/pom.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/pom.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/pom.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -1119,6 +1119,16 @@\n         <artifactId>pdfbox</artifactId>\n         <version>2.0.19</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.jasypt</groupId>\n+        <artifactId>jasypt</artifactId>\n+        <version>${jasypt.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.jasypt</groupId>\n+        <artifactId>jasypt-hibernate5</artifactId>\n+        <version>${jasypt.version}</version>\n+      </dependency>\n     </dependencies>\n   </dependencyManagement>\n \n@@ -1476,7 +1486,6 @@\n      request the list of hosts (but JPA cache db queries). -->\n     <cors.allowedHosts>*</cors.allowedHosts>\n \n-\n     <jetty.version>9.4.27.v20200227</jetty.version>\n     <jetty.file>jetty-distribution-${jetty.version}</jetty.file>\n     <jetty.download>https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/${jetty.version}/${jetty.file}.tar.gz</jetty.download>\n@@ -1511,6 +1520,7 @@\n     <xbean.version>3.18</xbean.version>\n     <jolokia.version>1.6.0</jolokia.version>\n     <httpcomponents.version>4.5.9</httpcomponents.version>\n+    <jasypt.version>1.9.3</jasypt.version>\n \n     <skipIT>true</skipIT> <!-- disable integration tests by default, use the \"it\" profile to run them which enables them -->\n   </properties>"
  },
  {
    "sha": "e25be40d398a6244fdf3b146eaaccfcd9f06d5ea",
    "filename": "services/src/test/java/org/fao/geonet/api/mapservers/MapServersApiTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/services/src/test/java/org/fao/geonet/api/mapservers/MapServersApiTest.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/services/src/test/java/org/fao/geonet/api/mapservers/MapServersApiTest.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/services/src/test/java/org/fao/geonet/api/mapservers/MapServersApiTest.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -29,8 +29,11 @@\n import org.fao.geonet.domain.MapServer;\n import org.fao.geonet.repository.MapServerRepository;\n import org.fao.geonet.services.AbstractServiceIntegrationTest;\n+import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\n+import org.jasypt.hibernate5.encryptor.HibernatePBEEncryptorRegistry;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n@@ -68,6 +71,16 @@ public void setUp() {\n         createTestData();\n     }\n \n+    @BeforeClass\n+    public static void init() {\n+        StandardPBEStringEncryptor strongEncryptor = new StandardPBEStringEncryptor();\n+        strongEncryptor.setPassword(\"testpassword\");\n+\n+        HibernatePBEEncryptorRegistry registry =\n+            HibernatePBEEncryptorRegistry.getInstance();\n+        registry.registerPBEStringEncryptor(\"STRING_ENCRYPTOR\", strongEncryptor);\n+    }\n+\n     @Test\n     public void getMapservers() throws Exception {\n         Long mapServersCount = mapServerRepo.count();"
  },
  {
    "sha": "05b8d67943e425b4e237aa79c1407e901a36ef82",
    "filename": "services/src/test/resources/services-repository-test-context.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/services/src/test/resources/services-repository-test-context.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/services/src/test/resources/services-repository-test-context.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/services/src/test/resources/services-repository-test-context.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -62,4 +62,13 @@\n         class=\"org.fao.geonet.api.records.formatters.cache.NoCachingStore\">\n   </bean>\n \n+  <bean id=\"strongEncryptor\"\n+        class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\">\n+    <property name=\"algorithm\">\n+      <value>PBEWithMD5AndDES</value>\n+    </property>\n+    <property name=\"password\">\n+      <value>jasypt</value>\n+    </property>\n+  </bean>\n </beans>"
  },
  {
    "sha": "715b5e34654464ad7bb48e8fa31f7590682e41e6",
    "filename": "web/src/main/java/org/fao/geonet/EncryptorInitializer.java",
    "status": "added",
    "additions": 324,
    "deletions": 0,
    "changes": 324,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/java/org/fao/geonet/EncryptorInitializer.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/java/org/fao/geonet/EncryptorInitializer.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/java/org/fao/geonet/EncryptorInitializer.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -0,0 +1,324 @@\n+//=============================================================================\n+//===\tCopyright (C) 2001-2021 Food and Agriculture Organization of the\n+//===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+\n+package org.fao.geonet;\n+\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.kernel.GeonetworkDataDirectory;\n+import org.fao.geonet.utils.Log;\n+import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\n+import org.jasypt.exceptions.EncryptionInitializationException;\n+import org.jasypt.hibernate5.encryptor.HibernatePBEEncryptorRegistry;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.sql.DataSource;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.NoSuchAlgorithmException;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class EncryptorInitializer {\n+    private final static String LOG_MODULE = Geonet.GEONETWORK + \".encryptor\";\n+    private final static String ALGORITHM_KEY = \"encryptor.algorithm\";\n+    private final static String PASSWORD_KEY = \"encryptor.password\";\n+    private final static String DEFAULT_ALGORITHM = \"PBEWithMD5AndDES\";\n+\n+    @Autowired\n+    StandardPBEStringEncryptor encryptor;\n+\n+    @Autowired\n+    DataSource dataSource;\n+\n+    public void init(GeonetworkDataDirectory dataDirectory) throws Exception {\n+        PropertiesConfiguration conf = getEncryptorPropertiesFile(dataDirectory);\n+\n+        // Values in the current properties file\n+        String encryptorAlgorithmPropFile = (String) conf.getProperty(ALGORITHM_KEY);\n+        String encryptorPasswordPropFile = (String) conf.getProperty(PASSWORD_KEY);\n+\n+        // Values to track changes (if values are provided in environment variables)\n+        String encryptorAlgorithm;\n+        String encryptorPassword;\n+\n+        // Has the configuration change?\n+        boolean updateConfiguration = false;\n+\n+        if (StringUtils.isEmpty(encryptorAlgorithmPropFile)) {\n+            encryptorAlgorithmPropFile = getPropertyFromEnv(ALGORITHM_KEY, DEFAULT_ALGORITHM);\n+            encryptorAlgorithm = encryptorAlgorithmPropFile;\n+            // No algorithm configured yet\n+            updateConfiguration = true;\n+        } else {\n+            String encryptorAlgorithmFromEnv = getPropertyFromEnv(ALGORITHM_KEY, \"\");\n+            if (StringUtils.isNotEmpty(encryptorAlgorithmFromEnv)) {\n+                encryptorAlgorithm = encryptorAlgorithmFromEnv;\n+            } else {\n+                encryptorAlgorithm = encryptorAlgorithmPropFile;\n+            }\n+\n+            // Different algorithm provided in environment variables\n+            updateConfiguration = !encryptorAlgorithm.equals(encryptorAlgorithmPropFile);\n+        }\n+\n+\n+        if (StringUtils.isEmpty(encryptorPasswordPropFile)) {\n+            encryptorPasswordPropFile = getPropertyFromEnv(PASSWORD_KEY, \"\");\n+            // Creates a random encryptor password if the password is empty\n+            if (StringUtils.isEmpty(encryptorPasswordPropFile)) {\n+                Log.info(LOG_MODULE, \"Generating a random password for the database password encryptor\");\n+                encryptorPasswordPropFile = RandomStringUtils.randomAlphanumeric(10);\n+            }\n+            encryptorPassword = encryptorPasswordPropFile;\n+            // No password configured yet\n+            updateConfiguration = true;\n+        } else {\n+            String encryptorPasswordFromEnv = getPropertyFromEnv(PASSWORD_KEY, \"\");\n+            if (StringUtils.isNotEmpty(encryptorPasswordFromEnv)) {\n+                encryptorPassword = encryptorPasswordFromEnv;\n+            } else {\n+                encryptorPassword = encryptorPasswordPropFile;\n+            }\n+\n+            // Different password provided in environment variables\n+            updateConfiguration = updateConfiguration || !encryptorPassword.equals(encryptorPasswordPropFile);\n+        }\n+\n+        Log.info(LOG_MODULE, String.format(\"Password database encryptor initialized - Keep the file %s safe and make \" +\n+            \"a backup. When upgrading to a newer version of GeoNetwork the file must be restored, otherwise \" +\n+            \"GeoNetwork will not be able to decrypt passwords already stored in the database.\", conf.getPath()));\n+\n+        encryptor.setAlgorithm(encryptorAlgorithm);\n+        encryptor.setPassword(encryptorPassword);\n+\n+        try {\n+            encryptor.initialize();\n+        } catch (EncryptionInitializationException ex) {\n+            if (ex.getCause() instanceof NoSuchAlgorithmException) {\n+                Log.error(LOG_MODULE, String.format(\"Encryptor algorithm %s is not supported\", encryptorAlgorithm));\n+            } else {\n+                Log.error(LOG_MODULE, ex.getMessage(), ex);\n+            }\n+\n+            throw new RuntimeException(String.format(\"Password encryptor could not be initialised, review the \" +\n+                \"configuration in %s or the environment variables if provided.\", conf.getPath()));\n+        }\n+\n+\n+        /**\n+         * Updates the database rows with passwords. Uses SQL updates to avoid interfere with the Hibernate TypeDef\n+         * to encrypt database fields. For example in {@link org.fao.geonet.domain.MapServer}.\n+         *\n+         * Can't be done in a database upgrade as when the {@link javax.sql.DataSource} and\n+         * {@link org.springframework.orm.jpa.JpaTransactionManager} beans are initialized the data directory bean is\n+         * not yet ready.\n+         *\n+         * Adding a migration upgrade that depends on this bean to be initialized doesn't work as the database version\n+         * has been already updated in the previous upgrades.\n+         */\n+        if (updateConfiguration) {\n+            conf.setProperty(ALGORITHM_KEY, encryptorAlgorithm);\n+            conf.setProperty(PASSWORD_KEY, encryptorPassword);\n+\n+            // Save the encryptor.properties file\n+            conf.save();\n+\n+            Log.info(LOG_MODULE, \"Password database encryptor - encrypting passwords stored in the database\");\n+\n+            // Encryptor configuration change: should be unencrypted the passwords with the previous configuration\n+            // and encrypted with the new one.\n+            if (!encryptorPassword.equals(encryptorPasswordPropFile) ||\n+                !encryptorAlgorithm.equals(encryptorAlgorithmPropFile)) {\n+\n+                StandardPBEStringEncryptor previousEncryptor = new StandardPBEStringEncryptor();\n+                previousEncryptor.setAlgorithm(encryptorAlgorithmPropFile);\n+                previousEncryptor.setPassword(encryptorPasswordPropFile);\n+                previousEncryptor.initialize();\n+                updateDb(previousEncryptor);\n+            } else {\n+                updateDb(null);\n+            }\n+        }\n+\n+        // Register encryptor in HibernatePBEEncryptorRegistry class\n+        HibernatePBEEncryptorRegistry registry =\n+            HibernatePBEEncryptorRegistry.getInstance();\n+        registry.registerPBEStringEncryptor(\"STRING_ENCRYPTOR\", encryptor);\n+\n+    }\n+\n+    private void updateDb(StandardPBEStringEncryptor previousEncryptor) throws SQLException {\n+\n+        try (Connection connection = dataSource.getConnection();\n+             Statement statement = connection.createStatement()) {\n+            final String encryptedSettings = \"SELECT name, value FROM Settings WHERE encrypted = 'y'\";\n+\n+            ResultSet settingsResultSet = statement.executeQuery(encryptedSettings);\n+            int numberOfSettings = 0;\n+            Map<String, String> updates = new HashMap<String, String>();\n+\n+            try {\n+                while (settingsResultSet.next()) {\n+                    String name = settingsResultSet.getString(1);\n+                    String value = settingsResultSet.getString(2);\n+                    if (StringUtils.isNotEmpty(value)) {\n+                        if (previousEncryptor != null) {\n+                            value = previousEncryptor.decrypt(value);\n+                        }\n+\n+                        value = encryptor.encrypt(value);\n+                        updates.put(name, value);\n+                        numberOfSettings++;\n+                    }\n+                }\n+                Log.debug(LOG_MODULE, \"  Number of settings of type password to update: \" + numberOfSettings);\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            } finally {\n+                settingsResultSet.close();\n+            }\n+\n+            for(String key : updates.keySet()) {\n+                statement.execute(\"UPDATE Settings SET value='\" + updates.get(key) + \"' WHERE name='\" + key + \"'\");\n+            }\n+\n+            final String encryptedHarvesterSettings = \"SELECT name, value FROM HarvesterSettings WHERE name = 'password'\";\n+            ResultSet harvesterSettingsResultSet = statement.executeQuery(encryptedHarvesterSettings);\n+            int numberOfHarvesterSettings = 0;\n+            updates = new HashMap<String, String>();\n+            try {\n+                while (harvesterSettingsResultSet.next()) {\n+                    String name = harvesterSettingsResultSet.getString(1);\n+                    String value = harvesterSettingsResultSet.getString(2);\n+                    if (StringUtils.isNotEmpty(value)) {\n+                        if (previousEncryptor != null) {\n+                            value = previousEncryptor.decrypt(value);\n+                        }\n+\n+                        value = encryptor.encrypt(value);\n+                        updates.put(name, value);\n+\n+                        numberOfHarvesterSettings++;\n+                    }\n+                }\n+\n+                Log.debug(LOG_MODULE, \"  Number of harvester settings of type password to update: \" + numberOfHarvesterSettings);\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            } finally {\n+                harvesterSettingsResultSet.close();\n+            }\n+\n+            for(String key : updates.keySet()) {\n+                statement.execute(\"UPDATE HarvesterSettings SET value='\" + updates.get(key) + \"' WHERE name='\" + key + \"'\");\n+            }\n+\n+\n+            final String encryptedMapServerPasswords = \"SELECT id, password FROM Mapservers\";\n+            ResultSet mapServerResultSet = statement.executeQuery(encryptedMapServerPasswords);\n+            int numberOfMapServers = 0;\n+            Map<Integer, String> updatesMapServers = new HashMap<Integer, String>();\n+            try {\n+                while (mapServerResultSet.next()) {\n+                    Integer id = mapServerResultSet.getInt(1);\n+                    String password = mapServerResultSet.getString(2);\n+                    if (StringUtils.isNotEmpty(password)) {\n+                        if (previousEncryptor != null) {\n+                            password = previousEncryptor.decrypt(password);\n+                        }\n+\n+                        password = encryptor.encrypt(password);\n+                        updatesMapServers.put(id, password);\n+                        numberOfMapServers++;\n+                    }\n+                }\n+\n+                Log.debug(LOG_MODULE, \"  Number of map server passwords to update: \" + numberOfMapServers);\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            } finally {\n+                harvesterSettingsResultSet.close();\n+            }\n+\n+            for(Integer key : updatesMapServers.keySet()) {\n+                statement.execute(\"UPDATE Mapservers SET password='\" + updatesMapServers.get(key) + \"' WHERE id='\" + key + \"'\");\n+            }\n+\n+            connection.commit();\n+        }\n+    }\n+\n+\n+    /**\n+     * Retrieves the encryptor properties file from the data directory. If the file doesn't exists, it's created.\n+     *\n+     * @param dataDirectory\n+     * @return\n+     * @throws Exception\n+     */\n+    private PropertiesConfiguration getEncryptorPropertiesFile(GeonetworkDataDirectory dataDirectory)\n+        throws Exception {\n+        Path securityPropsPath = dataDirectory.getConfigDir().resolve(\"encryptor\")\n+            .resolve(\"encryptor.properties\");\n+\n+        // Create the file if doesn't exists\n+        if (!Files.exists(securityPropsPath)) {\n+            Files.createFile(securityPropsPath);\n+        }\n+\n+        return new PropertiesConfiguration(securityPropsPath.toFile());\n+    }\n+\n+    /**\n+     * Retrieves an environment variable with this priority:\n+     *  - Java environment variable.\n+     *  - System environment variable.\n+     *  - Default value provided as parameter.\n+     *\n+     * @param propertyName\n+     * @param defaultValue\n+     * @return\n+     */\n+    private String getPropertyFromEnv(String propertyName, String defaultValue) {\n+        // Check if provided in Java environment variable\n+        String propertyValue = System.getProperty(propertyName);\n+\n+        if (StringUtils.isEmpty(propertyValue)) {\n+            // System environment variable\n+            propertyValue = System.getenv(propertyName.replace('.', '_'));\n+        }\n+\n+        if (StringUtils.isEmpty(propertyValue)) {\n+            propertyValue = defaultValue;\n+        }\n+\n+        return propertyValue;\n+    }\n+}"
  },
  {
    "sha": "8bc0a35c728833f03533b9dcc1bfad3517cac868",
    "filename": "web/src/main/java/org/fao/geonet/Geonetwork.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/java/org/fao/geonet/Geonetwork.java",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/java/org/fao/geonet/Geonetwork.java",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/java/org/fao/geonet/Geonetwork.java?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -1,5 +1,5 @@\n //=============================================================================\n-//===\tCopyright (C) 2001-2007 Food and Agriculture Organization of the\n+//===\tCopyright (C) 2001-2021 Food and Agriculture Organization of the\n //===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n //===\tand United Nations Environment Programme (UNEP)\n //===\n@@ -149,6 +149,8 @@ public Object start(Element config, ServiceContext context) throws Exception {\n         final GeonetworkDataDirectory dataDirectory = _applicationContext.getBean(GeonetworkDataDirectory.class);\n         dataDirectory.init(webappName, appPath, handlerConfig, context.getServlet());\n \n+\n+\n         // Get config handler properties\n         String systemDataDir = handlerConfig.getMandatoryValue(Geonet.Config.SYSTEM_DATA_DIR);\n         String thesauriDir = handlerConfig.getMandatoryValue(Geonet.Config.CODELIST_DIR);\n@@ -157,6 +159,11 @@ public Object start(Element config, ServiceContext context) throws Exception {\n \n         setProps(appPath, handlerConfig);\n \n+        // Initialize password encryptor\n+        logger.info(\"Initializing database password encryptor\");\n+        final EncryptorInitializer encryptorInitializer = _applicationContext.getBean(EncryptorInitializer.class);\n+        encryptorInitializer.init(dataDirectory);\n+\n         importDatabaseData(context);\n \n         JeevesJCS.setConfigFilename(appPath.resolve(\"WEB-INF/classes/cache.ccf\"));"
  },
  {
    "sha": "ad69c91a7f9b601b357b928c6592c3c6ec12af24",
    "filename": "web/src/main/webResources/WEB-INF/config-spring-geonetwork.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webResources/WEB-INF/config-spring-geonetwork.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webResources/WEB-INF/config-spring-geonetwork.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webResources/WEB-INF/config-spring-geonetwork.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -172,4 +172,10 @@\n     <bean primary=\"true\" class=\"org.fao.geonet.kernel.datamanager.base.BaseMetadataManager\"/>\n     <bean primary=\"true\" class=\"org.fao.geonet.kernel.datamanager.base.BaseMetadataUtils\"/>\n -->\n+\n+  <bean id=\"strongEncryptor\"\n+        class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\" />\n+\n+  <bean id=\"encryptorInitialiser\"\n+        class=\"org.fao.geonet.EncryptorInitializer\" />\n </beans>"
  },
  {
    "sha": "a82a34f02e70443b71ebf70b67e00985ae85fd96",
    "filename": "web/src/main/webapp/WEB-INF/classes/log4j-dev.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j-dev.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j-dev.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webapp/WEB-INF/classes/log4j-dev.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -30,6 +30,9 @@\n     <appender-ref ref=\"consoleAppender\"/>\n     <appender-ref ref=\"fileAppender\"/>\n   </logger>\n+  <logger name=\"geonetwork.encryptor\">\n+    <level value=\"DEBUG\"/>\n+  </logger>\n   <logger name=\"geonetwork.databasemigration\">\n     <level value=\"DEBUG\"/>\n   </logger>"
  },
  {
    "sha": "c509f63de5cbce119c8f2f4577738e9a3d3d75d9",
    "filename": "web/src/main/webapp/WEB-INF/classes/log4j-index.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j-index.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j-index.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webapp/WEB-INF/classes/log4j-index.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -30,6 +30,9 @@\n     <appender-ref ref=\"consoleAppender\"/>\n     <appender-ref ref=\"fileAppender\"/>\n   </logger>\n+  <logger name=\"geonetwork.encryptor\">\n+    <level value=\"INFO\"/>\n+  </logger>\n   <logger name=\"geonetwork.search\" additivity=\"false\">\n     <level value=\"WARN\"/>\n   </logger>"
  },
  {
    "sha": "0602321f9b0353078e9959dd6d0c0cafc5896cfc",
    "filename": "web/src/main/webapp/WEB-INF/classes/log4j-search.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j-search.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j-search.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webapp/WEB-INF/classes/log4j-search.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -30,6 +30,9 @@\n     <appender-ref ref=\"consoleAppender\"/>\n     <appender-ref ref=\"fileAppender\"/>\n   </logger>\n+  <logger name=\"geonetwork.encryptor\">\n+    <level value=\"INFO\"/>\n+  </logger>\n   <logger name=\"geonetwork.search\" additivity=\"true\">\n     <level value=\"DEBUG\"/>\n   </logger>"
  },
  {
    "sha": "d34335fa3f7f6e5bcc4eb9d3d2233c30f9f3d96f",
    "filename": "web/src/main/webapp/WEB-INF/classes/log4j.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j.xml",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/log4j.xml",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webapp/WEB-INF/classes/log4j.xml?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -30,6 +30,9 @@\n     <appender-ref ref=\"consoleAppender\"/>\n     <appender-ref ref=\"fileAppender\"/>\n   </logger>\n+  <logger name=\"geonetwork.encryptor\">\n+    <level value=\"INFO\"/>\n+  </logger>\n   <logger name=\"geonetwork.resources\">\n     <level value=\"ERROR\"/>\n   </logger>"
  },
  {
    "sha": "dcac78c6e9494efb7bf68ce1ef414156b0529725",
    "filename": "web/src/main/webapp/WEB-INF/classes/setup/sql/data/data-db-default.sql",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/setup/sql/data/data-db-default.sql",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/setup/sql/data/data-db-default.sql",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webapp/WEB-INF/classes/setup/sql/data/data-db-default.sql?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -591,14 +591,14 @@ INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/proxy/host', NULL, 0, 520, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/proxy/port', NULL, 1, 530, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/proxy/username', NULL, 0, 540, 'y');\n-INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/proxy/password', NULL, 0, 550, 'y');\n+INSERT INTO Settings (name, value, datatype, position, internal, encrypted) VALUES ('system/proxy/password', NULL, 0, 550, 'y', 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/proxy/ignorehostlist', NULL, 0, 560, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/cors/allowedHosts', '*', 0, 561, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/email', 'root@localhost', 0, 610, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/mailServer/host', '', 0, 630, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/mailServer/port', '25', 1, 640, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/mailServer/username', '', 0, 642, 'y');\n-INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/mailServer/password', '', 0, 643, 'y');\n+INSERT INTO Settings (name, value, datatype, position, internal, encrypted) VALUES ('system/feedback/mailServer/password', '', 0, 643, 'y', 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/mailServer/ssl', 'false', 2, 641, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/mailServer/tls', 'false', 2, 644, 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/feedback/mailServer/ignoreSslCertificateErrors', 'false', 2, 645, 'y');\n@@ -696,7 +696,7 @@ INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/publication/doi/doienabled', 'false', 2, 100191, 'n');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/publication/doi/doiurl', '', 0, 100192, 'n');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/publication/doi/doiusername', '', 0, 100193, 'n');\n-INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/publication/doi/doipassword', '', 0, 100194, 'y');\n+INSERT INTO Settings (name, value, datatype, position, internal, encrypted) VALUES ('system/publication/doi/doipassword', '', 0, 100194, 'y', 'y');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/publication/doi/doikey', '', 0, 110095, 'n');\n INSERT INTO Settings (name, value, datatype, position, internal) VALUES ('system/publication/doi/doilandingpagetemplate', 'http://localhost:8080/geonetwork/srv/resources/records/{{uuid}}', 0, 100195, 'n');\n "
  },
  {
    "sha": "052b674731d4f71ac81b97e6a2e3010ef5d2ad6e",
    "filename": "web/src/main/webapp/WEB-INF/classes/setup/sql/migrate/v404/migrate-default.sql",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/setup/sql/migrate/v404/migrate-default.sql",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/classes/setup/sql/migrate/v404/migrate-default.sql",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webapp/WEB-INF/classes/setup/sql/migrate/v404/migrate-default.sql?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -1,2 +1,7 @@\n UPDATE Settings SET value='4.0.4' WHERE name='system/platform/version';\n UPDATE Settings SET value='SNAPSHOT' WHERE name='system/platform/subVersion';\n+\n+-- ALTER TABLE Settings ADD COLUMN encrypted VARCHAR(1) DEFAULT 'n';\n+UPDATE Settings SET encrypted='y' WHERE name='system/proxy/password';\n+UPDATE Settings SET encrypted='y' WHERE name='system/feedback/mailServer/password';\n+UPDATE Settings SET encrypted='y' WHERE name='system/publication/doi/doipassword';"
  },
  {
    "sha": "464b35955c79a24e623e939c26fe9f083f404bb9",
    "filename": "web/src/main/webapp/WEB-INF/data/config/encryptor/encryptor.properties",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/geonetwork/core-geonetwork/blob/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/data/config/encryptor/encryptor.properties",
    "raw_url": "https://github.com/geonetwork/core-geonetwork/raw/1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47/web/src/main/webapp/WEB-INF/data/config/encryptor/encryptor.properties",
    "contents_url": "https://api.github.com/repos/geonetwork/core-geonetwork/contents/web/src/main/webapp/WEB-INF/data/config/encryptor/encryptor.properties?ref=1ab1004d37c0176fe3b6e8e3b80ab33e82b77f47",
    "patch": "@@ -0,0 +1,3 @@\n+# Password encripter configuration\n+encryptor.algorithm = PBEWithMD5AndDES\n+encryptor.password ="
  }
]
