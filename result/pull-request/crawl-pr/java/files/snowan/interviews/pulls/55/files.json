[
  {
    "sha": "67cf9d0db723ced78ce3cee7f9b4d808a71ac936",
    "filename": "2021/java/946.validate-stack.sequences.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/snowan/interviews/blob/ed511703501e430df07b3201607e8a9ec8aa60cc/2021/java/946.validate-stack.sequences.java",
    "raw_url": "https://github.com/snowan/interviews/raw/ed511703501e430df07b3201607e8a9ec8aa60cc/2021/java/946.validate-stack.sequences.java",
    "contents_url": "https://api.github.com/repos/snowan/interviews/contents/2021/java/946.validate-stack.sequences.java?ref=ed511703501e430df07b3201607e8a9ec8aa60cc",
    "patch": "@@ -0,0 +1,21 @@\n+class Solution {\n+    public boolean validateStackSequences(int[] pushed, int[] popped) {\n+        if (pushed.length != popped.length) return false;\n+        Stack<Integer> stack = new Stack<>();\n+        int len = pushed.length;\n+        int i = 0, j = 0;\n+        while (i < len && j < len) {\n+            if (pushed[i] != popped[j]) {\n+                stack.push(pushed[i++]);\n+            } else {\n+                i++;\n+                j++;\n+                while (!stack.isEmpty() && j < len && stack.peek() == popped[j]) {\n+                    stack.pop();\n+                    j++;\n+                }\n+            }\n+        }\n+        return stack.isEmpty();\n+    }\n+}"
  },
  {
    "sha": "48044e86cb878a073d8f44ee584442358e2a9c37",
    "filename": "2021/python/946.validate-stack-sequences.py",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/snowan/interviews/blob/ed511703501e430df07b3201607e8a9ec8aa60cc/2021/python/946.validate-stack-sequences.py",
    "raw_url": "https://github.com/snowan/interviews/raw/ed511703501e430df07b3201607e8a9ec8aa60cc/2021/python/946.validate-stack-sequences.py",
    "contents_url": "https://api.github.com/repos/snowan/interviews/contents/2021/python/946.validate-stack-sequences.py?ref=ed511703501e430df07b3201607e8a9ec8aa60cc",
    "patch": "@@ -0,0 +1,37 @@\n+\"\"\"\n+946. Validate Stack Sequences\n+\n+Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.\n+\n+Example 1:\n+\n+Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n+Output: true\n+Explanation: We might do the following sequence:\n+push(1), push(2), push(3), push(4), pop() -> 4,\n+push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n+Example 2:\n+\n+Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n+Output: false\n+Explanation: 1 cannot be popped before 2.\n+ \n+\n+Constraints:\n+\n+0 <= pushed.length == popped.length <= 1000\n+0 <= pushed[i], popped[i] < 1000\n+pushed is a permutation of popped.\n+pushed and popped have distinct values.\n+\n+\"\"\"\n+def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n+    if len(pushed) != len(popped):\n+        return False\n+    stack, idx = [], 0\n+    for v in pushed:\n+        stack.append(v)\n+        while stack and idx < len(pushed) and stack[-1] == popped[idx]:\n+            stack.pop()\n+            idx += 1\n+    return not stack"
  }
]
