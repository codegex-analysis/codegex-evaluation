[
  {
    "sha": "458c5629f3cef91b7a175fceff4e31a8b3f2e11f",
    "filename": ".gitignore",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1/.gitignore",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1/.gitignore",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/.gitignore?ref=cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1",
    "patch": "@@ -0,0 +1,2 @@\n+__pycache__\n+old/\n\\ No newline at end of file"
  },
  {
    "sha": "1bb789614951138298142eed979350e5706d65a7",
    "filename": "Internship_Dev_All_Rev1.pdf",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/f3a029adbb030922c07f496ea336c41239546351/Internship_Dev_All_Rev1.pdf",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/f3a029adbb030922c07f496ea336c41239546351/Internship_Dev_All_Rev1.pdf",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/Internship_Dev_All_Rev1.pdf?ref=f3a029adbb030922c07f496ea336c41239546351"
  },
  {
    "sha": "312da0d428c8fa64b52411e9e7c4dea0fc3128b0",
    "filename": "Q1Tester.java",
    "status": "removed",
    "additions": 0,
    "deletions": 72,
    "changes": 72,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/f3a029adbb030922c07f496ea336c41239546351/Q1Tester.java",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/f3a029adbb030922c07f496ea336c41239546351/Q1Tester.java",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/Q1Tester.java?ref=f3a029adbb030922c07f496ea336c41239546351",
    "patch": "@@ -1,72 +0,0 @@\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import java.util.Scanner;\r\n-\r\n-public class Q1Tester {\r\n-\r\n-    public static ArrayList<String> getFirstUpper(List<String> inputs)\r\n-    {\r\n-        ArrayList<String> result = new ArrayList<>();\r\n-        for(String str: inputs)\r\n-        {\r\n-            String[] temp = str.split(\"\\\\s+\");\r\n-            StringBuilder arr = new StringBuilder();\r\n-            for(String st:temp)\r\n-            {\r\n-                if(st.length()>0)\r\n-                {\r\n-                    if(Character.isUpperCase(st.charAt(0)))\r\n-                    {\r\n-                        arr.append(st.charAt(0));\r\n-                    }\r\n-                }\r\n-            }\r\n-            result.add(arr.toString());\r\n-        }\r\n-        return result;\r\n-    }\r\n-\r\n-    public static void printReverse(String[] toPrint)\r\n-    {\r\n-        for(int i = toPrint.length-1;i>=0;i--)\r\n-        {\r\n-            if(toPrint[i].length()>0)\r\n-            {\r\n-                System.out.println(toPrint[i]);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public static void main(String arguments[])\r\n-    {\r\n-        try\r\n-        {\r\n-            ArrayList<String> result = new ArrayList<>();\r\n-            System.out.println(\"Enter number of inputs: \");\r\n-            Scanner in = new Scanner(System.in);\r\n-            List<String> inputs = null;\r\n-            int inp = Integer.parseInt(in.nextLine());\r\n-            for(int i = 0;i < inp;i++)\r\n-            {\r\n-                System.out.println(\"Enter input no. \"+ (i+1) +\" \");\r\n-                String tmp = in.nextLine();\r\n-                if(inputs==null)\r\n-                {\r\n-                    inputs = new ArrayList<>();\r\n-                }\r\n-                inputs.add(tmp);\r\n-            }\r\n-            result = Q1Tester.getFirstUpper(inputs);\r\n-            String[] res = new String[result.size()];\r\n-            res = result.toArray(res);\r\n-            Arrays.sort(res, (y, x) -> x.compareTo(y));\r\n-            Arrays.sort(res,(x,y) -> Integer.compare(x.length(),y.length()));\r\n-            printReverse(res);\r\n-        }\r\n-        catch (Exception e)\r\n-        {\r\n-            e.printStackTrace();\r\n-        }\r\n-    }\r\n-}\r"
  },
  {
    "sha": "bf31f2d7857b0f06f9273cf71b6a7cd799c92596",
    "filename": "Q2Tester.java",
    "status": "removed",
    "additions": 0,
    "deletions": 108,
    "changes": 108,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/f3a029adbb030922c07f496ea336c41239546351/Q2Tester.java",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/f3a029adbb030922c07f496ea336c41239546351/Q2Tester.java",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/Q2Tester.java?ref=f3a029adbb030922c07f496ea336c41239546351",
    "patch": "@@ -1,108 +0,0 @@\n-import java.util.Scanner;\r\n-\r\n-public class Q2Tester\r\n-{\r\n-    public static boolean isPrime(int n)\r\n-    {\r\n-        if (n <= 1) {\r\n-            return false;\r\n-        }\r\n-        for (int i = 2; i < Math.sqrt(n); i++) {\r\n-            if (n % i == 0) {\r\n-                return false;\r\n-            }\r\n-        }\r\n-        return true;\r\n-    }\r\n-    public static boolean lengthCounter(String num)\r\n-    {\r\n-        int len = 0;\r\n-        boolean ret = false;\r\n-        String[] temp = String.valueOf(num).split(\"\\\\.\");\r\n-        for(String str :temp)\r\n-        {\r\n-            len += str.length();\r\n-        }\r\n-        if(len>0 && len <13)\r\n-        {\r\n-            ret = true;\r\n-        }\r\n-        return ret;\r\n-    }\r\n-    public static int afterPoint(double num)\r\n-    {\r\n-        String[] temp = String.valueOf(num).split(\"\\\\.\");\r\n-        return temp[1].length();\r\n-    }\r\n-    public  static void main(String[] arguments)\r\n-    {\r\n-        try {\r\n-            String number  = null;\r\n-            boolean bCont = true;\r\n-            Scanner in = new Scanner(System.in);\r\n-            while(true)\r\n-            {\r\n-                System.out.println(\"Enter a decimal number: \");\r\n-                number = in.nextLine();\r\n-                if(number.compareTo(\"0.0\")==0)\r\n-                {\r\n-                    break;\r\n-                }\r\n-                boolean test = Q2Tester.lengthCounter(number);\r\n-                if(test)\r\n-                {\r\n-                    double num = Double.parseDouble(number);\r\n-                    if(num>1.0 && num<10.0)\r\n-                    {\r\n-                        int len = afterPoint(num);\r\n-                        int count = 0;\r\n-                        for(int i=1;i<=3;i++)\r\n-                        {\r\n-                            if(i>len)\r\n-                            {\r\n-                                break;\r\n-                            }\r\n-                            int round = (int) (num * Math.pow(10, i));\r\n-                            if (!Q2Tester.isPrime(round))\r\n-                            {\r\n-                                count++;\r\n-                            }\r\n-                        }\r\n-                        if((len<3 && count==len)|(count==3))\r\n-                        {\r\n-                            System.out.println(\"FALSE\");\r\n-                        }\r\n-                        else\r\n-                        {\r\n-                            System.out.println(\"TRUE\");\r\n-                        }\r\n-                    }\r\n-                    else if(num==0.0)\r\n-                    {\r\n-                        break;\r\n-                    }\r\n-                    else\r\n-                    {\r\n-                        System.out.println(\"Decimal input must be between 1.0 and 10.0\");\r\n-                    }\r\n-                }\r\n-                else\r\n-                {\r\n-                    System.out.println(\"Total digits of number entered must not exceed 12 digits \");\r\n-                }\r\n-            }\r\n-\r\n-        }\r\n-        catch (Exception e)\r\n-        {\r\n-            if(e instanceof NumberFormatException)\r\n-            {\r\n-                System.out.println(\"Error - Please enter a decimal number\");\r\n-            }\r\n-            else\r\n-            {\r\n-                e.printStackTrace();\r\n-            }\r\n-        }\r\n-    }\r\n-}\r"
  },
  {
    "sha": "d86fd91ec1e301b6e3de6b7b6732a8dbd4c42f09",
    "filename": "Q3Tester.java",
    "status": "removed",
    "additions": 0,
    "deletions": 145,
    "changes": 145,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/f3a029adbb030922c07f496ea336c41239546351/Q3Tester.java",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/f3a029adbb030922c07f496ea336c41239546351/Q3Tester.java",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/Q3Tester.java?ref=f3a029adbb030922c07f496ea336c41239546351",
    "patch": "@@ -1,145 +0,0 @@\n-import java.util.ArrayList;\r\n-import java.util.Scanner;\r\n-\r\n-public class Q3Tester\r\n-{\r\n-    public static String addSpace(Integer[] num)\r\n-    {\r\n-        String ret = \"\";\r\n-        for(int i=0;i<num.length;i++)\r\n-        {\r\n-            if(i>0)\r\n-            {\r\n-                ret = ret + \" \" + num[i];\r\n-            }\r\n-            else\r\n-            {\r\n-                ret = ret + num[i];\r\n-            }\r\n-        }\r\n-        return ret;\r\n-\r\n-    }\r\n-    public static ArrayList<Integer> returnPos(String str,ArrayList<Integer> num)\r\n-    {\r\n-        ArrayList<Integer> res = new ArrayList<>();\r\n-        for(int i=0;i<str.length();i++)\r\n-        {\r\n-            for(int k=0;k<num.size();k++)\r\n-            {\r\n-                String tmp = Integer.toString(num.get(k));\r\n-                if(tmp.compareTo(String.valueOf(str.charAt(i))) == 0)\r\n-                {\r\n-//                    System.out.println(\"---\"+str.charAt(i)+\"---\");\r\n-                    res.add(i);\r\n-                }\r\n-            }\r\n-        }\r\n-        return res;\r\n-    }\r\n-    public static void printGuess(String question,ArrayList<Integer> indices,ArrayList<Integer> wrong) {\r\n-        int j = 0;\r\n-        String result = \"\";\r\n-        for (int i = 0; i < question.length(); i++)\r\n-        {\r\n-            int tester = 0;\r\n-            if (j < indices.size())\r\n-            {\r\n-                if (i == indices.get(j))\r\n-                {\r\n-                    result = result + question.charAt(i);\r\n-                    j++;\r\n-                    tester = 1;\r\n-                }\r\n-            }\r\n-                if (question.charAt(i) != ' ' && tester==0)\r\n-                {\r\n-                    result = result + \"_\";\r\n-                }\r\n-                else if(question.charAt(i) == ' ')\r\n-                {\r\n-                    result = result + \" \";\r\n-                }\r\n-        }\r\n-        if(wrong.size()>0)\r\n-        {\r\n-            result = result + \"  \";\r\n-            for(int i=0;i<wrong.size();i++)\r\n-            {\r\n-                result = result + wrong.get(i) + \" \";\r\n-            }\r\n-        }\r\n-        System.out.println(result);\r\n-    }\r\n-    public static void main(String[] arguments)\r\n-    {\r\n-        try\r\n-        {\r\n-            Scanner in = new Scanner(System.in);\r\n-            Integer[] question = new Integer[12];\r\n-            int score = 0;\r\n-            ArrayList<Integer> guess = new ArrayList<>();\r\n-            ArrayList<Integer> wrong = new ArrayList<>();\r\n-            for(int i=0;i<12;i++)\r\n-            {\r\n-                System.out.println(\"Enter an integer:\");\r\n-                String inp = in.nextLine();\r\n-                int num = Integer.parseInt(inp);\r\n-                if(num>=0 && num<10)\r\n-                {\r\n-                    question[i] = num;\r\n-                }\r\n-                else\r\n-                {\r\n-                    System.out.println(\"Integer should be from 0 to 9\");\r\n-                    i--;\r\n-                }\r\n-            }\r\n-            String res = Q3Tester.addSpace(question);\r\n-            System.out.println(res);\r\n-            System.out.println(\"_ _ _ _ _ _ _ _ _ _ _ _\");\r\n-            ArrayList<Integer> ret = new ArrayList<>();\r\n-            for(int i=0;i<5;i++)\r\n-            {\r\n-                System.out.println(\"Chance \"+(i+1));\r\n-                String inp2 = in.nextLine();\r\n-                int num2 = Integer.parseInt(inp2);\r\n-                if(num2>=0 && num2<10)\r\n-                {\r\n-                    if(!guess.contains(num2))\r\n-                    {\r\n-                        guess.add(num2);\r\n-                        if(!res.contains(String.valueOf(num2)))\r\n-                        {\r\n-                            wrong.add(num2);\r\n-                        }\r\n-                        ret = Q3Tester.returnPos(res,guess);\r\n-                    }\r\n-                    printGuess(res,ret,wrong);\r\n-                    if(i==4)\r\n-                    {\r\n-                        score = ret.size();\r\n-                    }\r\n-                }\r\n-                else\r\n-                {\r\n-                    System.out.println(\"Integer should be from 0 to 9\");\r\n-                    i--;\r\n-                }\r\n-\r\n-            }\r\n-            System.out.println(\"Score: \"+score);\r\n-        }\r\n-        catch(Exception e)\r\n-        {\r\n-            if(e instanceof NumberFormatException)\r\n-            {\r\n-                System.out.println(\"Error - Please enter an integer\");\r\n-            }\r\n-            else\r\n-            {\r\n-                e.printStackTrace();\r\n-            }\r\n-        }\r\n-    }\r\n-}\r"
  },
  {
    "sha": "61e825e00295b0bb76a364bd3daaff8b552d3e95",
    "filename": "Q4.java",
    "status": "removed",
    "additions": 0,
    "deletions": 61,
    "changes": 61,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/f3a029adbb030922c07f496ea336c41239546351/Q4.java",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/f3a029adbb030922c07f496ea336c41239546351/Q4.java",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/Q4.java?ref=f3a029adbb030922c07f496ea336c41239546351",
    "patch": "@@ -1,61 +0,0 @@\n-import org.jsoup.Jsoup;\r\n-import org.jsoup.nodes.Document;\r\n-import org.jsoup.nodes.Element;\r\n-import org.jsoup.select.Elements;\r\n-import java.net.URL;\r\n-import java.net.URLConnection;\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.Scanner;\r\n-\r\n-public class Q4\r\n-{\r\n-    public static int[] getIndex(String[] converted,ArrayList<String> original)\r\n-    {\r\n-        int[] index = new int[converted.length];\r\n-        for(int i=0;i<converted.length;i++)\r\n-        {\r\n-            index[i] = original.indexOf(converted[i]);\r\n-        }\r\n-        return index;\r\n-    }\r\n-    public static void main(String[] arguments)\r\n-    {\r\n-\r\n-        try {\r\n-            ArrayList<String> companyies = new ArrayList<>();\r\n-            ArrayList<String> description = new ArrayList<>();\r\n-            String content = null;\r\n-            URLConnection connection = null;\r\n-            connection = new URL(\"https://theinternship.io/\").openConnection();\r\n-            Scanner scanner = null;\r\n-            scanner = new Scanner(connection.getInputStream());\r\n-            scanner.useDelimiter(\"\\\\Z\");\r\n-            content = scanner.next();\r\n-            Document doc =  Jsoup.parse(content);\r\n-            Elements urls = doc.select(\"div.partner img[src]\");\r\n-            for(Element company: urls)\r\n-            {\r\n-                companyies.add(company.attr(\"src\"));\r\n-            }\r\n-            Elements descriptions = doc.select(\"span.list-company\");\r\n-            for(Element des: descriptions)\r\n-            {\r\n-                description.add(des.text());\r\n-            }\r\n-            Object[] desArray = description.toArray();\r\n-            String[] descript = Arrays.copyOf(desArray, desArray.length, String[].class);\r\n-            Arrays.sort(descript, (x, y) -> Integer.compare(x.length(),y.length()));\r\n-            int[] index = Q4.getIndex(descript,description);\r\n-            for (int value : index) {\r\n-                System.out.println(companyies.get(value));\r\n-            }\r\n-            scanner.close();\r\n-        }\r\n-        catch(Exception e)\r\n-        {\r\n-            e.printStackTrace();\r\n-        }\r\n-    }\r\n-\r\n-}\r"
  },
  {
    "sha": "1c15218f1c5609b7505d8d2f29b32451b176c158",
    "filename": "q1.py",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1/q1.py",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1/q1.py",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/q1.py?ref=cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1",
    "patch": "@@ -0,0 +1,41 @@\n+from utils.utils import get_input, \\\n+    is_empty_string, get_int, get_trimmed_input, \\\n+    sort_string_by_length\n+from typing import List\n+\n+def get_acronym(text: str) -> str:\n+    chars = list()\n+    for part in text.split():\n+        if part[0].isupper():\n+            chars.append(part[0])\n+    return \"\".join(chars)\n+    \n+    \n+\n+def get_sorted_acronyms(texts: List[str]) -> List[str]:\n+    acronyms = list()\n+    for text in texts:\n+        acronym = get_acronym(text)\n+        if not is_empty_string(acronym):\n+            acronyms.append(acronym)\n+    return sort_string_by_length(acronyms)\n+\n+\n+\n+def get_unempty_inputs(num_inputs: int) -> List[str]:\n+    texts = list()\n+    for i in range(num_inputs):\n+        text = get_trimmed_input(f\"Enter input no. {i+1} \")\n+        if not is_empty_string(text):\n+            texts.append(text)\n+    return texts\n+\n+\n+def main():\n+    try:\n+        num_inputs = get_int(\"Enter number of inputs: \")\n+        texts = get_unempty_inputs(num_inputs)\n+        print(get_sorted_acronyms(texts))\n+    except Exception as e:\n+        print(str(e))\n+main()\n\\ No newline at end of file"
  },
  {
    "sha": "87c73d6f8547fe5ef4e027150d7d2fd191d0e7a9",
    "filename": "utils/utils.py",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/ppkgtmm/the-internship/blob/cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1/utils/utils.py",
    "raw_url": "https://github.com/ppkgtmm/the-internship/raw/cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1/utils/utils.py",
    "contents_url": "https://api.github.com/repos/ppkgtmm/the-internship/contents/utils/utils.py?ref=cc82b927151a2e2d56b2a9a3738a3cd14bdd1bf1",
    "patch": "@@ -0,0 +1,22 @@\n+from typing import List\n+\n+def get_input(message: str) -> str: \n+    inp = input(message)\n+    return inp\n+\n+def is_empty_string(string: str) -> bool:\n+    return len(string.strip()) == 0\n+\n+def get_trimmed_input(message: str) -> str: \n+    inp = get_input(message)\n+    return inp.strip()\n+\n+def get_int(message: str):\n+    inp = get_trimmed_input(message)\n+    try:\n+        return int(inp)\n+    except Exception:\n+        raise Exception(\"unable to convert input to integer\")\n+\n+def sort_string_by_length(texts: List[str]):\n+    return sorted(texts, key=lambda x: len(x), reverse=True)\n\\ No newline at end of file"
  }
]
