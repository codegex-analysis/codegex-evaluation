[
  {
    "sha": "024463906ca76dbde3142cfe46b54d5041fda223",
    "filename": "src/main/java/org/mariadb/jdbc/internal/com/read/resultset/rowprotocol/BinaryRowProtocol.java",
    "status": "modified",
    "additions": 97,
    "deletions": 108,
    "changes": 205,
    "blob_url": "https://github.com/mariadb-corporation/mariadb-connector-j/blob/e80754400eadc952e1251569e04ca7eefb1fa482/src/main/java/org/mariadb/jdbc/internal/com/read/resultset/rowprotocol/BinaryRowProtocol.java",
    "raw_url": "https://github.com/mariadb-corporation/mariadb-connector-j/raw/e80754400eadc952e1251569e04ca7eefb1fa482/src/main/java/org/mariadb/jdbc/internal/com/read/resultset/rowprotocol/BinaryRowProtocol.java",
    "contents_url": "https://api.github.com/repos/mariadb-corporation/mariadb-connector-j/contents/src/main/java/org/mariadb/jdbc/internal/com/read/resultset/rowprotocol/BinaryRowProtocol.java?ref=e80754400eadc952e1251569e04ca7eefb1fa482",
    "patch": "@@ -52,6 +52,11 @@\n \n package org.mariadb.jdbc.internal.com.read.resultset.rowprotocol;\n \n+import org.mariadb.jdbc.internal.ColumnType;\n+import org.mariadb.jdbc.internal.com.read.resultset.ColumnDefinition;\n+import org.mariadb.jdbc.internal.util.exceptions.ExceptionFactory;\n+import org.mariadb.jdbc.util.Options;\n+\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.nio.charset.StandardCharsets;\n@@ -61,10 +66,6 @@\n import java.time.format.DateTimeParseException;\n import java.util.Calendar;\n import java.util.TimeZone;\n-import org.mariadb.jdbc.internal.ColumnType;\n-import org.mariadb.jdbc.internal.com.read.resultset.ColumnDefinition;\n-import org.mariadb.jdbc.internal.util.exceptions.ExceptionFactory;\n-import org.mariadb.jdbc.util.Options;\n \n public class BinaryRowProtocol extends RowProtocol {\n \n@@ -452,42 +453,37 @@ public long getInternalLong(ColumnDefinition columnInfo) throws SQLException {\n         value = getInternalMediumInt(columnInfo);\n         break;\n       case BIGINT:\n-        value =\n-            ((buf[pos] & 0xff)\n-                + ((long) (buf[pos + 1] & 0xff) << 8)\n-                + ((long) (buf[pos + 2] & 0xff) << 16)\n-                + ((long) (buf[pos + 3] & 0xff) << 24)\n-                + ((long) (buf[pos + 4] & 0xff) << 32)\n-                + ((long) (buf[pos + 5] & 0xff) << 40)\n-                + ((long) (buf[pos + 6] & 0xff) << 48)\n-                + ((long) (buf[pos + 7] & 0xff) << 56));\n-        if (columnInfo.isSigned()) {\n-          return value;\n+        if (columnInfo.isSigned() || (buf[pos + 7] & 0x80) == 0) {\n+          return (buf[pos] & 0xff)\n+              | ((long) (buf[pos + 1] & 0xff) << 8)\n+              | ((long) (buf[pos + 2] & 0xff) << 16)\n+              | ((long) (buf[pos + 3] & 0xff) << 24)\n+              | ((long) (buf[pos + 4] & 0xff) << 32)\n+              | ((long) (buf[pos + 5] & 0xff) << 40)\n+              | ((long) (buf[pos + 6] & 0xff) << 48)\n+              | ((long) (buf[pos + 7] & 0xff) << 56);\n         }\n         BigInteger unsignedValue =\n             new BigInteger(\n-                1,\n                 new byte[] {\n-                  (byte) (value >> 56),\n-                  (byte) (value >> 48),\n-                  (byte) (value >> 40),\n-                  (byte) (value >> 32),\n-                  (byte) (value >> 24),\n-                  (byte) (value >> 16),\n-                  (byte) (value >> 8),\n-                  (byte) value\n+                  0, // to indicate sign\n+                  buf[pos + 7],\n+                  buf[pos + 6],\n+                  buf[pos + 5],\n+                  buf[pos + 4],\n+                  buf[pos + 3],\n+                  buf[pos + 2],\n+                  buf[pos + 1],\n+                  buf[pos]\n                 });\n-        if (unsignedValue.compareTo(new BigInteger(String.valueOf(Long.MAX_VALUE))) > 0) {\n-          throw new SQLException(\n-              \"Out of range value for column '\"\n-                  + columnInfo.getName()\n-                  + \"' : value \"\n-                  + unsignedValue\n-                  + \" is not in Long range\",\n-              \"22003\",\n-              1264);\n-        }\n-        return unsignedValue.longValue();\n+        throw new SQLException(\n+            \"Out of range value for column '\"\n+                + columnInfo.getName()\n+                + \"' : value \"\n+                + unsignedValue\n+                + \" is not in Long range\",\n+            \"22003\",\n+            1264);\n       case FLOAT:\n         Float floatValue = getInternalFloat(columnInfo);\n         if (floatValue.compareTo((float) Long.MAX_VALUE) >= 1) {\n@@ -560,30 +556,28 @@ public float getInternalFloat(ColumnDefinition columnInfo) throws SQLException {\n         value = getInternalMediumInt(columnInfo);\n         break;\n       case BIGINT:\n-        value =\n-            ((buf[pos] & 0xff)\n-                + ((long) (buf[pos + 1] & 0xff) << 8)\n-                + ((long) (buf[pos + 2] & 0xff) << 16)\n-                + ((long) (buf[pos + 3] & 0xff) << 24)\n-                + ((long) (buf[pos + 4] & 0xff) << 32)\n-                + ((long) (buf[pos + 5] & 0xff) << 40)\n-                + ((long) (buf[pos + 6] & 0xff) << 48)\n-                + ((long) (buf[pos + 7] & 0xff) << 56));\n-        if (columnInfo.isSigned()) {\n-          return value;\n+        if (columnInfo.isSigned() || (buf[pos + 7] & 0x80) == 0) {\n+          return (buf[pos] & 0xff)\n+              | ((long) (buf[pos + 1] & 0xff) << 8)\n+              | ((long) (buf[pos + 2] & 0xff) << 16)\n+              | ((long) (buf[pos + 3] & 0xff) << 24)\n+              | ((long) (buf[pos + 4] & 0xff) << 32)\n+              | ((long) (buf[pos + 5] & 0xff) << 40)\n+              | ((long) (buf[pos + 6] & 0xff) << 48)\n+              | ((long) (buf[pos + 7] & 0xff) << 56);\n         }\n         BigInteger unsignedValue =\n             new BigInteger(\n-                1,\n                 new byte[] {\n-                  (byte) (value >> 56),\n-                  (byte) (value >> 48),\n-                  (byte) (value >> 40),\n-                  (byte) (value >> 32),\n-                  (byte) (value >> 24),\n-                  (byte) (value >> 16),\n-                  (byte) (value >> 8),\n-                  (byte) value\n+                  0, // to indicate sign\n+                  buf[pos + 7],\n+                  buf[pos + 6],\n+                  buf[pos + 5],\n+                  buf[pos + 4],\n+                  buf[pos + 3],\n+                  buf[pos + 2],\n+                  buf[pos + 1],\n+                  buf[pos]\n                 });\n         return unsignedValue.floatValue();\n       case FLOAT:\n@@ -654,32 +648,30 @@ public double getInternalDouble(ColumnDefinition columnInfo) throws SQLException\n       case MEDIUMINT:\n         return getInternalMediumInt(columnInfo);\n       case BIGINT:\n-        long valueLong =\n-            ((buf[pos] & 0xff)\n-                + ((long) (buf[pos + 1] & 0xff) << 8)\n-                + ((long) (buf[pos + 2] & 0xff) << 16)\n-                + ((long) (buf[pos + 3] & 0xff) << 24)\n-                + ((long) (buf[pos + 4] & 0xff) << 32)\n-                + ((long) (buf[pos + 5] & 0xff) << 40)\n-                + ((long) (buf[pos + 6] & 0xff) << 48)\n-                + ((long) (buf[pos + 7] & 0xff) << 56));\n-        if (columnInfo.isSigned()) {\n-          return valueLong;\n-        } else {\n-          return new BigInteger(\n-                  1,\n-                  new byte[] {\n-                    (byte) (valueLong >> 56),\n-                    (byte) (valueLong >> 48),\n-                    (byte) (valueLong >> 40),\n-                    (byte) (valueLong >> 32),\n-                    (byte) (valueLong >> 24),\n-                    (byte) (valueLong >> 16),\n-                    (byte) (valueLong >> 8),\n-                    (byte) valueLong\n-                  })\n-              .doubleValue();\n+        if (columnInfo.isSigned() || (buf[pos + 7] & 0x80) == 0) {\n+          return (buf[pos] & 0xff)\n+              | ((long) (buf[pos + 1] & 0xff) << 8)\n+              | ((long) (buf[pos + 2] & 0xff) << 16)\n+              | ((long) (buf[pos + 3] & 0xff) << 24)\n+              | ((long) (buf[pos + 4] & 0xff) << 32)\n+              | ((long) (buf[pos + 5] & 0xff) << 40)\n+              | ((long) (buf[pos + 6] & 0xff) << 48)\n+              | ((long) (buf[pos + 7] & 0xff) << 56);\n         }\n+        BigInteger unsignedValue =\n+            new BigInteger(\n+                new byte[] {\n+                  0, // to indicate sign\n+                  buf[pos + 7],\n+                  buf[pos + 6],\n+                  buf[pos + 5],\n+                  buf[pos + 4],\n+                  buf[pos + 3],\n+                  buf[pos + 2],\n+                  buf[pos + 1],\n+                  buf[pos]\n+                });\n+        return unsignedValue.doubleValue();\n       case FLOAT:\n         return getInternalFloat(columnInfo);\n       case DOUBLE:\n@@ -742,35 +734,32 @@ public BigDecimal getInternalBigDecimal(ColumnDefinition columnInfo) throws SQLE\n       case MEDIUMINT:\n         return BigDecimal.valueOf(getInternalMediumInt(columnInfo));\n       case BIGINT:\n-        long value =\n-            ((buf[pos] & 0xff)\n-                + ((long) (buf[pos + 1] & 0xff) << 8)\n-                + ((long) (buf[pos + 2] & 0xff) << 16)\n-                + ((long) (buf[pos + 3] & 0xff) << 24)\n-                + ((long) (buf[pos + 4] & 0xff) << 32)\n-                + ((long) (buf[pos + 5] & 0xff) << 40)\n-                + ((long) (buf[pos + 6] & 0xff) << 48)\n-                + ((long) (buf[pos + 7] & 0xff) << 56));\n-        if (columnInfo.isSigned()) {\n-          return new BigDecimal(String.valueOf(BigInteger.valueOf(value)))\n-              .setScale(columnInfo.getDecimals());\n-        } else {\n-          return new BigDecimal(\n-                  String.valueOf(\n-                      new BigInteger(\n-                          1,\n-                          new byte[] {\n-                            (byte) (value >> 56),\n-                            (byte) (value >> 48),\n-                            (byte) (value >> 40),\n-                            (byte) (value >> 32),\n-                            (byte) (value >> 24),\n-                            (byte) (value >> 16),\n-                            (byte) (value >> 8),\n-                            (byte) value\n-                          })))\n-              .setScale(columnInfo.getDecimals());\n+        if (columnInfo.isSigned() || (buf[pos + 7] & 0x80) == 0) {\n+          long value =\n+              (buf[pos] & 0xff)\n+                  | ((long) (buf[pos + 1] & 0xff) << 8)\n+                  | ((long) (buf[pos + 2] & 0xff) << 16)\n+                  | ((long) (buf[pos + 3] & 0xff) << 24)\n+                  | ((long) (buf[pos + 4] & 0xff) << 32)\n+                  | ((long) (buf[pos + 5] & 0xff) << 40)\n+                  | ((long) (buf[pos + 6] & 0xff) << 48)\n+                  | ((long) (buf[pos + 7] & 0xff) << 56);\n+          return BigDecimal.valueOf(value).setScale(columnInfo.getDecimals());\n         }\n+        BigInteger unsignedValue =\n+            new BigInteger(\n+                new byte[] {\n+                  0, // to indicate sign\n+                  buf[pos + 7],\n+                  buf[pos + 6],\n+                  buf[pos + 5],\n+                  buf[pos + 4],\n+                  buf[pos + 3],\n+                  buf[pos + 2],\n+                  buf[pos + 1],\n+                  buf[pos]\n+                });\n+        return new BigDecimal(unsignedValue).setScale(columnInfo.getDecimals());\n       case FLOAT:\n         return BigDecimal.valueOf(getInternalFloat(columnInfo));\n       case DOUBLE:"
  }
]
