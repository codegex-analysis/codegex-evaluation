[
  {
    "sha": "2589d1dedfe80d04da45bdc337df44a31a0f8807",
    "filename": "README.md",
    "status": "modified",
    "additions": 42,
    "deletions": 3,
    "changes": 45,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/README.md",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/README.md",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/README.md?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -7,11 +7,11 @@ with Java 1.8+ using Git for version control.\n \n ### Usage\n \n-This plugin works together with the [Maven Release Plugin] to create \n-conventional commit compliant releases for your Maven projects\n+This plugin works together with the [Maven Release Plugin] to create\n+a conventional commit compliant releases for your Maven projects\n \n #### Install the Plugin\n- \n+\n In your main `pom.xml` file add the plugin:\n \n     <plugins>\n@@ -22,11 +22,50 @@ In your main `pom.xml` file add the plugin:\n         </plugin>\n     </plugins>\n \n+You can provide the link to you tracking system as parameter in configuration. In generated change log there will be\n+ the link to the ticket.\n+\n+    <trackingSystemUrlFormat>http://example.com/%s</trackingSystemUrlFormat>\n+\n+`%s` - will be replaced by ticket id provided at the begging of message in square brackets.\n+For example:\n+\n+`fix: [ticket-id] message`\n+\n+Also, you can provide the pattern for repository URL. In the generated change log\n+there will be a commit hash with URL to the commit in the remote repository.\n+\n+    <repoUrlFormat>http://example.com/%s</repoUrlFormat>\n+\n #### Release a Version\n \n     mvn conventional-commits:version release:prepare\n     mvn release:perform\n \n+#### With generated change logs\n+\n+     mvn conventional-commits:version conventional-commits:changelog release:prepare\n+     mvn release:perform\n+\n+#### Changelog example\n+\n+##### Commit messages:\n+breaking change: [ticket-23] change public API\n+\n+ci: add build step\n+\n+##### Generated change log (CHANGELOG.MD):\n+## 1.0.0 (2020-11-14)\n+### Breaking changes\n+* change public API [(ticket-23)](http://example.com/ticket-23) [(23b1e004c4)](http://example.com/23b1e004c45b56b633f09656a05875a5a5ff7e86)\n+### CI\n+* add build step\n+\n+**Note**: changelog goal performs a commit that includes updated CHANGELOG.MD\n+this commit will not be rolled back on release:clean - this is because of well-known\n+maven limitation - release plugin does not allow committing additional files on release:prepare\n+stage\n+\n ## Gradle Plugin\n \n A [Gradle] plugin is planned for future release."
  },
  {
    "sha": "41725a1b01d77e5cec262d2e439f5176440bdad0",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/Commit.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/Commit.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/Commit.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/Commit.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -2,11 +2,13 @@\n \n import java.util.Objects;\n import java.util.Optional;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class Commit\n {\n     private static final Pattern BREAKING_REGEX = Pattern.compile(\"^(fix|feat)!.+\", Pattern.CASE_INSENSITIVE);\n+    private static final String  TRACKING_SYSTEM_REGEX_STRING = \"^\\\\s*\\\\[\\\\s*(.*)\\\\s*\\\\]\\\\s*\";\n \n     private final CommitAdapter commit;\n \n@@ -67,6 +69,36 @@ public boolean isConventional()\n         return Optional.ofNullable(type);\n     }\n \n+    public Optional<String> getCommitMessageDescription() {\n+        return getCommitMessageFullDescription()\n+            .map(fullCommitMessage -> fullCommitMessage.replaceFirst(TRACKING_SYSTEM_REGEX_STRING, \"\"));\n+     }\n+\n+    public Optional<String> getTrackingSystemId() {\n+        return getCommitMessageFullDescription().map(commitMessage -> {\n+            if(\"\".equals(commitMessage.trim())) {\n+                return null;\n+            }\n+\n+            Matcher matcher = Pattern.compile(TRACKING_SYSTEM_REGEX_STRING + \".*\", Pattern.CASE_INSENSITIVE).matcher(commitMessage);\n+            return matcher.matches() ? matcher.group(1).trim() : null;\n+        });\n+    }\n+\n+    public String getCommitHash() {\n+        return this.commit.getCommitHash();\n+    }\n+\n+    private Optional<String> getCommitMessageFullDescription() {\n+        String message = getMessageForComparison();\n+        String[] split = message.split(\":\");\n+        if(split.length <= 1) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(split[1].trim());\n+    }\n+\n     private String getMessageForComparison()\n     {\n         String msg = commit.getShortMessage();"
  },
  {
    "sha": "985f65addeae5fdf5f3410e8d7a15fb70afbddfd",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/CommitAdapter.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/CommitAdapter.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/CommitAdapter.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/CommitAdapter.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -5,4 +5,6 @@\n     String getShortMessage();\n \n     T getCommit();\n+\n+    String getCommitHash();\n }"
  },
  {
    "sha": "0ddf7343f2aa90dd305044564819400195e5d209",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/GitCommitAdapter.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/GitCommitAdapter.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/GitCommitAdapter.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/GitCommitAdapter.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -8,7 +8,7 @@\n {\n     private final RevCommit commit;\n \n-    GitCommitAdapter(RevCommit commit)\n+    public GitCommitAdapter(RevCommit commit)\n     {\n         Objects.requireNonNull(commit, \"commit cannot be null\");\n         this.commit = commit;\n@@ -25,4 +25,10 @@ public RevCommit getCommit()\n     {\n         return commit;\n     }\n+\n+    @Override\n+    public String getCommitHash()\n+    {\n+        return commit.getName();\n+    }\n }"
  },
  {
    "sha": "7929f28677336f99b9f645100ca14ff7a612e7c9",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/LogHandler.java",
    "status": "modified",
    "additions": 15,
    "deletions": 16,
    "changes": 31,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/LogHandler.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/LogHandler.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/LogHandler.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -5,8 +5,10 @@\n import org.eclipse.jgit.lib.ObjectId;\n import org.eclipse.jgit.lib.Ref;\n import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.lib.RepositoryCache;\n import org.eclipse.jgit.revplot.PlotWalk;\n import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.util.FS;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -15,34 +17,33 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class LogHandler\n-{\n+public class LogHandler {\n+    public static final String HEAD_COMMIT_ALIAS = \"HEAD\";\n     private final Logger logger = LoggerFactory.getLogger(LogHandler.class);\n \n     private final Repository repository;\n     private final Git git;\n \n-    public LogHandler(Repository repository)\n-    {\n+    public LogHandler(Repository repository) {\n         Objects.requireNonNull(repository, \"repository cannot be null\");\n+        if (!RepositoryCache.FileKey.isGitRepository(repository.getDirectory(), FS.DETECTED)) {\n+            throw new IllegalArgumentException(\"Current working directory is not a git repository or \" + HEAD_COMMIT_ALIAS + \" is missing\");\n+        }\n         this.repository = repository;\n         this.git = Git.wrap(repository);\n     }\n \n-    RevCommit getLastTaggedCommit() throws IOException, GitAPIException\n-    {\n+    RevCommit getLastTaggedCommit() throws IOException, GitAPIException {\n         List<Ref> tags = git.tagList().call();\n         List<ObjectId> peeledTags = tags.stream().map(t -> repository.peel(t).getPeeledObjectId()).collect(Collectors.toList());\n         PlotWalk walk = new PlotWalk(repository);\n-        RevCommit start = walk.parseCommit(repository.resolve(\"HEAD\"));\n+        RevCommit start = walk.parseCommit(repository.resolve(HEAD_COMMIT_ALIAS));\n \n         walk.markStart(start);\n \n         RevCommit revCommit;\n-        while ((revCommit = walk.next()) != null)\n-        {\n-            if (peeledTags.contains(revCommit.getId()))\n-            {\n+        while ((revCommit = walk.next()) != null) {\n+            if (peeledTags.contains(revCommit.getId())) {\n                 logger.debug(\"Found commit matching last tag: {}\", revCommit);\n                 break;\n             }\n@@ -53,13 +54,11 @@ RevCommit getLastTaggedCommit() throws IOException, GitAPIException\n         return revCommit;\n     }\n \n-    public Iterable<RevCommit> getCommitsSinceLastTag() throws IOException, GitAPIException\n-    {\n-        ObjectId start = repository.resolve(\"HEAD\");\n+    public Iterable<RevCommit> getCommitsSinceLastTag() throws IOException, GitAPIException {\n+        ObjectId start = repository.resolve(HEAD_COMMIT_ALIAS);\n         RevCommit lastCommit = this.getLastTaggedCommit();\n \n-        if (lastCommit == null)\n-        {\n+        if (lastCommit == null) {\n             logger.warn(\"No annotated tags found matching any commits on branch\");\n             return git.log().call();\n         }"
  },
  {
    "sha": "a35246db963c09deab49bd109d1eb6932ec51317",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogExtractor.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogExtractor.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogExtractor.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogExtractor.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -0,0 +1,16 @@\n+package com.smartling.cc4j.semantic.release.common.changelog;\n+\n+import com.smartling.cc4j.semantic.release.common.Commit;\n+import com.smartling.cc4j.semantic.release.common.ConventionalCommitType;\n+import com.smartling.cc4j.semantic.release.common.scm.ScmApiException;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+public interface ChangelogExtractor {\n+    /**\n+     * Extracts and groups commits by their commit types\n+     * @return - commits grouped by commit type\n+     */\n+    Map<ConventionalCommitType, Set<Commit>> getGroupedCommitsByCommitTypes() throws ScmApiException;\n+}"
  },
  {
    "sha": "18959a802fc3738ed953e22ca44f8c6412fb98b9",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogGenerator.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogGenerator.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogGenerator.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/ChangelogGenerator.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -0,0 +1,118 @@\n+package com.smartling.cc4j.semantic.release.common.changelog;\n+\n+import com.smartling.cc4j.semantic.release.common.Commit;\n+import com.smartling.cc4j.semantic.release.common.ConventionalCommitType;\n+import com.smartling.cc4j.semantic.release.common.LogHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDate;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class ChangelogGenerator {\n+    public static final int COMMIT_HASH_DISPLAYED_LENGTH = 10;\n+    private final Logger logger = LoggerFactory.getLogger(LogHandler.class);\n+\n+    private static final String CHANGELOG_FORMAT = \"## %s (%s)\" +\n+        \"%s\";\n+    private static final String MD_LINK_FORMAT = \"[%s](%s)\";\n+    private static final String BUG_FIXES_HEADER = \"Bug fixes\";\n+    private static final String FEATURE_HEADER = \"Feature\";\n+    private static final String BREAKING_HEADER = \"Breaking changes\";\n+    private static final String DOCS_HEADER = \"Docs\";\n+    private static final String CI_HEADER = \"CI\";\n+    private static final String BUILD_HEADER = \"Build\";\n+\n+    private final String repoUrlFormat;\n+    private final String trackingSystemUrlFormat;\n+\n+    public ChangelogGenerator(String repoUrlFormat, String trackingSystemUrlFormat) {\n+        this.repoUrlFormat = repoUrlFormat;\n+        this.trackingSystemUrlFormat = trackingSystemUrlFormat;\n+    }\n+\n+    public String generate(String nextVersion, Map<ConventionalCommitType, Set<Commit>> commitsByCommitType) {\n+        Objects.requireNonNull(nextVersion, \"next version can not be null\");\n+        Objects.requireNonNull(commitsByCommitType, \"commits by type can not be null\");\n+\n+        List<String> sections = new ArrayList<>();\n+\n+        if (commitsByCommitType.get(ConventionalCommitType.BREAKING_CHANGE) != null) {\n+            getSection(BREAKING_HEADER, commitsByCommitType.get(ConventionalCommitType.BREAKING_CHANGE)).ifPresent(sections::add);\n+        }\n+\n+        if (commitsByCommitType.get(ConventionalCommitType.FIX) != null) {\n+            getSection(BUG_FIXES_HEADER, commitsByCommitType.get(ConventionalCommitType.FIX)).ifPresent(sections::add);\n+        }\n+\n+        if (commitsByCommitType.get(ConventionalCommitType.FEAT) != null) {\n+            getSection(FEATURE_HEADER, commitsByCommitType.get(ConventionalCommitType.FEAT)).ifPresent(sections::add);\n+        }\n+\n+        if (commitsByCommitType.get(ConventionalCommitType.DOCS) != null) {\n+            getSection(DOCS_HEADER, commitsByCommitType.get(ConventionalCommitType.DOCS)).ifPresent(sections::add);\n+        }\n+\n+        if (commitsByCommitType.get(ConventionalCommitType.CI) != null) {\n+            getSection(CI_HEADER, commitsByCommitType.get(ConventionalCommitType.CI)).ifPresent(sections::add);\n+        }\n+\n+        if (commitsByCommitType.get(ConventionalCommitType.BUILD) != null) {\n+            getSection(BUILD_HEADER, commitsByCommitType.get(ConventionalCommitType.BUILD)).ifPresent(sections::add);\n+        }\n+\n+        sections = sections.stream().filter(Objects::nonNull).collect(Collectors.toList());\n+\n+        return String.format(CHANGELOG_FORMAT, nextVersion, LocalDate.now(), \"\\n\" + String.join(\"\\n\", sections));\n+    }\n+\n+    private Optional<String> getSection(String header, Set<Commit> commits) {\n+        String sectionEntries = getSectionEntries(commits);\n+        if (sectionEntries != null && !sectionEntries.trim().equals(\"\")) {\n+            return Optional.of(\"###\" + header + \"\\n\" + sectionEntries);\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    private String getSectionEntries(Set<Commit> commits) {\n+        Set<String> uniqueMessages = new HashSet<>();\n+        return commits.stream()\n+            .filter(commit -> commit.getCommitMessageDescription().isPresent() && uniqueMessages.add(commit.getCommitMessageDescription().get()))\n+            .map(this::getChangeLogEntry)\n+            .filter(Optional::isPresent)\n+            .map(Optional::get)\n+            .sorted()\n+            .collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    private Optional<String> getChangeLogEntry(Commit commit) {\n+        if (!commit.getCommitMessageDescription().isPresent()) {\n+            logger.warn(\"Skipping message for commit: {}\", commit.getCommitHash());\n+        }\n+        return commit.getCommitMessageDescription().map(message -> {\n+            if (commit.getCommitMessageDescription().get().trim().equals(\"\")) {\n+                logger.warn(\"Skipping message for commit: {}\", commit.getCommitHash());\n+                return null;\n+            }\n+            return \"* \" + commit.getCommitMessageDescription().get() + getTrackingSystemLink(commit) + getCommitHashLink(commit);\n+        });\n+    }\n+\n+    private String getCommitHashLink(Commit commit) {\n+        if (this.repoUrlFormat == null) {\n+            return \" (\" + commit.getCommitHash().substring(0, COMMIT_HASH_DISPLAYED_LENGTH) + \")\";\n+        } else {\n+            return \" \" + String.format(MD_LINK_FORMAT, \"(\" + commit.getCommitHash().substring(0, COMMIT_HASH_DISPLAYED_LENGTH) + \")\", String.format(this.repoUrlFormat, commit.getCommitHash()));\n+        }\n+    }\n+\n+    private String getTrackingSystemLink(Commit commit) {\n+        if (this.trackingSystemUrlFormat == null || !commit.getTrackingSystemId().isPresent()) {\n+            return commit.getTrackingSystemId().map(s -> \" (\" + s + \")\").orElse(\"\");\n+        } else {\n+            return \" \" + String.format(MD_LINK_FORMAT, \"(\" + commit.getTrackingSystemId().get() + \")\", String.format(this.trackingSystemUrlFormat, commit.getTrackingSystemId().get()));\n+        }\n+    }\n+}"
  },
  {
    "sha": "c825436f4a43297d60dcb56a1c7819d69c39c52c",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/GitChangelogExtractor.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/GitChangelogExtractor.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/GitChangelogExtractor.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/changelog/GitChangelogExtractor.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -0,0 +1,52 @@\n+package com.smartling.cc4j.semantic.release.common.changelog;\n+\n+import com.smartling.cc4j.semantic.release.common.*;\n+import com.smartling.cc4j.semantic.release.common.scm.ScmApiException;\n+import org.eclipse.jgit.api.errors.GitAPIException;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class GitChangelogExtractor implements ChangelogExtractor {\n+    private ConventionalVersioning conventionalVersioning;\n+\n+    public GitChangelogExtractor(ConventionalVersioning conventionalVersioning) {\n+        this.conventionalVersioning = conventionalVersioning;\n+    }\n+\n+    @Override\n+    public Map<ConventionalCommitType, Set<Commit>> getGroupedCommitsByCommitTypes() throws ScmApiException {\n+\n+        LogHandler logHandler = conventionalVersioning.logHandler();\n+\n+        try {\n+            Iterable<RevCommit> commits = logHandler.getCommitsSinceLastTag();\n+            Map<ConventionalCommitType, Set<Commit>> res = new HashMap<>();\n+\n+            if (commits == null) {\n+                return res;\n+            }\n+\n+            List<Commit> commitList = new ArrayList<>();\n+            commits.iterator().forEachRemaining(c -> commitList.add(new Commit(new GitCommitAdapter(c))));\n+\n+            for (Commit c : commitList) {\n+                if (c.isConventional() && c.getCommitType().isPresent()) {\n+                    Optional<ConventionalCommitType> commitType = c.getCommitType();\n+                    res.compute(commitType.get(), (type, commitsForType) -> {\n+                        if (commitsForType == null) {\n+                            return new HashSet<>(Collections.singletonList(c));\n+                        }\n+                        commitsForType.add(c);\n+                        return commitsForType;\n+                    });\n+                }\n+            }\n+\n+            return res;\n+        } catch (GitAPIException | IOException e) {\n+            throw new ScmApiException(\"Git operation failed\", e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "4134fc8e84f9110ee05627bbf375fa9caa7bc859",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/GitRepositoryAdapter.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/GitRepositoryAdapter.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/GitRepositoryAdapter.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/GitRepositoryAdapter.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -0,0 +1,38 @@\n+package com.smartling.cc4j.semantic.release.common.scm;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.api.errors.GitAPIException;\n+import org.eclipse.jgit.lib.Repository;\n+\n+import java.util.Objects;\n+\n+public class GitRepositoryAdapter implements RepositoryAdapter {\n+\n+    private final Repository repository;\n+    private final Git git;\n+\n+    public GitRepositoryAdapter(Repository repository) {\n+        this.repository = repository;\n+        this.git = Git.wrap(repository);\n+    }\n+\n+    @Override\n+    public void addFile(String pattern) throws ScmApiException {\n+        try {\n+            this.git.add().addFilepattern(pattern).call();\n+        } catch (GitAPIException e) {\n+            throw new ScmApiException(\"Failed to add file: \" + pattern, e);\n+        }\n+    }\n+\n+    @Override\n+    public void commit(String message) throws ScmApiException {\n+        Objects.requireNonNull(message, \"commit message can not be null\");\n+\n+        try {\n+            this.git.commit().setMessage(message).call();\n+        } catch (GitAPIException e) {\n+            throw new ScmApiException(\"Failed to perform commit\", e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "8fc02cde55ca8c9449f71f34fd5ea7b8ad0596fd",
    "filename": "conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/RepositoryAdapter.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/RepositoryAdapter.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/RepositoryAdapter.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/main/java/com/smartling/cc4j/semantic/release/common/scm/RepositoryAdapter.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -0,0 +1,6 @@\n+package com.smartling.cc4j.semantic.release.common.scm;\n+\n+public interface RepositoryAdapter {\n+    void addFile(String pattern) throws ScmApiException;\n+    void commit(String message) throws ScmApiException;\n+}"
  },
  {
    "sha": "7e4fdffcf70a2c885ada006ab6aeecc836811beb",
    "filename": "conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/ChangelogGeneratorTest.java",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/ChangelogGeneratorTest.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/ChangelogGeneratorTest.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/ChangelogGeneratorTest.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -0,0 +1,108 @@\n+package com.smartling.cc4j.semantic.release.common;\n+\n+import com.smartling.cc4j.semantic.release.common.changelog.ChangelogGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.time.LocalDate;\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ChangelogGeneratorTest {\n+    private static final String COMMIT_HASH = \"2717635691\";\n+    private static final String TRACKING_SYSTEM_URL_FORMAT = \"http://test.com?id=%s\";\n+    private static final String REPO_URL_FORMAT = \"http://repo.com?id=%s\";\n+\n+    private ChangelogGenerator changelogGenerator;\n+\n+    private static final String EXPECTED_CHANGELOG =\n+        \"###Breaking changes\\n\" +\n+        \"* breaking change test [(2717635691)](http://repo.com?id=2717635691)\\n\" +\n+        \"###Bug fixes\\n\" +\n+        \"* fix test 2 [(2717635691)](http://repo.com?id=2717635691)\\n\" +\n+        \"* fix test [(2717635691)](http://repo.com?id=2717635691)\\n\" +\n+        \"* fix ui test [(ticket-id)](http://test.com?id=ticket-id) [(2717635691)](http://repo.com?id=2717635691)\\n\" +\n+        \"###Feature\\n\" +\n+        \"* fix test [(2717635691)](http://repo.com?id=2717635691)\\n\" +\n+        \"###Docs\\n\" +\n+        \"* docs test [(2717635691)](http://repo.com?id=2717635691)\\n\" +\n+        \"###CI\\n\" +\n+        \"* ci test [(2717635691)](http://repo.com?id=2717635691)\\n\" +\n+        \"###Build\\n\" +\n+        \"* build test [(2717635691)](http://repo.com?id=2717635691)\";\n+\n+    private static final String EXPECTED_CHANGELOG_NO_URLS = \"###Breaking changes\\n\" +\n+        \"* breaking change test (2717635691)\\n\" +\n+        \"###Bug fixes\\n\" +\n+        \"* fix test (2717635691)\\n\" +\n+        \"* fix test 2 (2717635691)\\n\" +\n+        \"* fix ui test (ticket-id) (2717635691)\\n\" +\n+        \"###Feature\\n\" +\n+        \"* fix test (2717635691)\\n\" +\n+        \"###Docs\\n\" +\n+        \"* docs test (2717635691)\\n\" +\n+        \"###CI\\n\" +\n+        \"* ci test (2717635691)\\n\" +\n+        \"###Build\\n\" +\n+        \"* build test (2717635691)\";\n+\n+    @Before\n+    public void setUp() {\n+        changelogGenerator = new ChangelogGenerator(REPO_URL_FORMAT, TRACKING_SYSTEM_URL_FORMAT);\n+    }\n+\n+    @Test\n+    public void testOnlyHeaderGeneratedOnEmptyChanges() {\n+        Map<ConventionalCommitType, Set<Commit>> commits = new HashMap<>();\n+        assertEquals(getExpectedChangelogHeader(\"0.0.1\"), changelogGenerator.generate(\"0.0.1\", commits));\n+\n+        commits.put(ConventionalCommitType.FEAT, new HashSet<>(Collections.singletonList(\n+            new Commit(\n+                new DummyCommitAdapter(\"ci this message will not be included to changelog as there is no colon\", COMMIT_HASH)))));\n+        assertEquals(getExpectedChangelogHeader(\"0.0.1\"), changelogGenerator.generate(\"0.0.1\", commits));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testVersionIsMandatory() {\n+        changelogGenerator.generate(null, Collections.emptyMap());\n+    }\n+\n+    @Test\n+    public void testChangelogGenerated() {\n+        Map<ConventionalCommitType, Set<Commit>> commitsByCommitType = getCommitsByCommitType();\n+        String changelog = changelogGenerator.generate(\"0.2.7\", commitsByCommitType);\n+        assertEquals(EXPECTED_CHANGELOG, changelog.substring(changelog.indexOf(\"\\n\") + 1));\n+    }\n+\n+    @Test\n+    public void testChangelogGeneratedNoUrlFormatsProvided() {\n+        Map<ConventionalCommitType, Set<Commit>> commitsByCommitType = getCommitsByCommitType();\n+        String changelog = new ChangelogGenerator(null, null).generate(\"0.2.7\", commitsByCommitType);\n+        assertEquals(EXPECTED_CHANGELOG_NO_URLS, changelog.substring(changelog.indexOf(\"\\n\") + 1));\n+    }\n+\n+    private Map<ConventionalCommitType, Set<Commit>> getCommitsByCommitType() {\n+        Map<ConventionalCommitType, Set<Commit>> res = new HashMap<>();\n+        res.put(ConventionalCommitType.BREAKING_CHANGE,\n+            new HashSet<>(Collections.singletonList(new Commit(new DummyCommitAdapter(\"breaking change: breaking change test\", COMMIT_HASH)))));\n+        res.put(ConventionalCommitType.FEAT,\n+            new HashSet<>(Collections.singletonList(new Commit(new DummyCommitAdapter(\"feat(ui): fix test\", COMMIT_HASH)))));\n+        res.put(ConventionalCommitType.FIX,\n+            new HashSet<>(Arrays.asList(new Commit(new DummyCommitAdapter(\"fix(ui): [TICKET-ID] fix ui test\", COMMIT_HASH)),\n+                new Commit(new DummyCommitAdapter(\"fix(ui): fix test\", COMMIT_HASH)),\n+                new Commit(new DummyCommitAdapter(\"fix(ui): fix test 2\", COMMIT_HASH)))));\n+        res.put(ConventionalCommitType.CI,\n+            new HashSet<>(Arrays.asList(new Commit(new DummyCommitAdapter(\"ci: ci test\", COMMIT_HASH)),\n+                new Commit(new DummyCommitAdapter(\"ci this message will not me included to changelog as there is no colon\", COMMIT_HASH)))));\n+        res.put(ConventionalCommitType.BUILD,\n+            new HashSet<>(Collections.singletonList(new Commit(new DummyCommitAdapter(\"build: build test\", COMMIT_HASH)))));\n+        res.put(ConventionalCommitType.DOCS,\n+            new HashSet<>(Collections.singletonList(new Commit(new DummyCommitAdapter(\"docs: docs test\", COMMIT_HASH)))));\n+        return res;\n+    }\n+\n+    private String getExpectedChangelogHeader(String version) {\n+        return \"## \" + version + \" (\" + LocalDate.now() + \")\\n\";\n+    }\n+}"
  },
  {
    "sha": "411944900d393c512782eac0f3299e8cc5377f32",
    "filename": "conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/CommitTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/CommitTest.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/CommitTest.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/CommitTest.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -48,6 +48,22 @@ public void getCommitTypeFix()\n         assertEquals(ConventionalCommitType.FIX, create(\"fix(scope): foo\").getCommitType().get());\n     }\n \n+    @Test\n+    public void getMessage() {\n+        assertEquals(\"commit message\", create(\"fix: commit message\").getCommitMessageDescription().get());\n+        assertEquals(\"commit message\", create(\"fix: [22] commit message\").getCommitMessageDescription().get());\n+        assertFalse( create(\"fix commit message\").getCommitMessageDescription().isPresent());\n+    }\n+\n+    @Test\n+    public void getTrackingSystemId() {\n+        assertEquals(\"22\", create(\"fix: [22] commit message\").getTrackingSystemId().get());\n+        assertEquals(\"22\", create(\"fix: [22 ] commit message\").getTrackingSystemId().get());\n+        assertEquals(\"22\", create(\"fix:[ 22 ] commit message\").getTrackingSystemId().get());\n+        assertFalse(create(\"fix [22] commit message\").getTrackingSystemId().isPresent());\n+        assertFalse(create(\"fix: commit message\").getTrackingSystemId().isPresent());\n+    }\n+\n     static Commit create(String shortMessage)\n     {\n         return new Commit(new DummyCommitAdapter(shortMessage));"
  },
  {
    "sha": "510b40c095c08447125136bff0f61c5b79d4b50f",
    "filename": "conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/DummyCommitAdapter.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/DummyCommitAdapter.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/DummyCommitAdapter.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-common/src/test/java/com/smartling/cc4j/semantic/release/common/DummyCommitAdapter.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -3,10 +3,18 @@\n class DummyCommitAdapter implements CommitAdapter<DummyCommitAdapter>\n {\n     private final String shortMessage;\n+    private final String hash;\n \n     DummyCommitAdapter(String shortMessage)\n     {\n         this.shortMessage = shortMessage;\n+        this.hash = null;\n+    }\n+\n+    DummyCommitAdapter(String shortMessage, String hash)\n+    {\n+        this.shortMessage = shortMessage;\n+        this.hash = hash;\n     }\n \n     @Override\n@@ -20,4 +28,9 @@ public DummyCommitAdapter getCommit()\n     {\n         return null;\n     }\n+\n+    @Override\n+    public String getCommitHash() {\n+        return this.hash;\n+    }\n }"
  },
  {
    "sha": "cb6c90f7ff9df3c815406cf2586487ff71fa655f",
    "filename": "conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/AbstractVersioningMojo.java",
    "status": "modified",
    "additions": 25,
    "deletions": 12,
    "changes": 37,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/AbstractVersioningMojo.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/AbstractVersioningMojo.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/AbstractVersioningMojo.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -4,6 +4,10 @@\n import com.smartling.cc4j.semantic.release.common.ConventionalVersioning;\n import com.smartling.cc4j.semantic.release.common.SemanticVersion;\n import com.smartling.cc4j.semantic.release.common.SemanticVersionChange;\n+import com.smartling.cc4j.semantic.release.common.changelog.ChangelogExtractor;\n+import com.smartling.cc4j.semantic.release.common.changelog.GitChangelogExtractor;\n+import com.smartling.cc4j.semantic.release.common.scm.GitRepositoryAdapter;\n+import com.smartling.cc4j.semantic.release.common.scm.RepositoryAdapter;\n import com.smartling.cc4j.semantic.release.common.scm.ScmApiException;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugins.annotations.Parameter;\n@@ -14,16 +18,14 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.List;\n-import java.util.Objects;\n import java.util.Properties;\n \n-abstract class AbstractVersioningMojo extends AbstractMojo\n-{\n+abstract class AbstractVersioningMojo extends AbstractMojo {\n     private final static String MVN_RELEASE_VERSION_PROPERTY = \"releaseVersion\";\n     private final static String MVN_DEVELOPMENT_VERSION_PROPERTY = \"developmentVersion\";\n \n     @Parameter(defaultValue = \"${project.basedir}\", required = true)\n-    private File baseDir;\n+    protected File baseDir;\n \n     @Parameter(defaultValue = \"${project.build.directory}\", property = \"outputDir\", required = true)\n     File outputDirectory;\n@@ -34,33 +36,44 @@\n     @Parameter(defaultValue = \"${reactorProjects}\", readonly = true, required = true)\n     private List<MavenProject> reactorProjects;\n \n-    ConventionalVersioning getConventionalVersioning() throws IOException\n-    {\n+    ConventionalVersioning getConventionalVersioning() throws IOException {\n         Repository repository = new RepositoryBuilder().setWorkTree(baseDir).build();\n         //Repository repository = new RepositoryBuilder().findGitDir().build();\n         MavenConventionalVersioning mvnConventionalVersioning = new MavenConventionalVersioning(repository);\n         return mvnConventionalVersioning.getConventionalVersioning();\n     }\n \n-    Properties createReleaseProperties() throws IOException, ScmApiException\n-    {\n-        ConventionalVersioning versioning =  this.getConventionalVersioning();\n+    RepositoryAdapter getRepositoryAdapter() throws IOException {\n+        Repository repository = new RepositoryBuilder().setWorkTree(baseDir).build();\n+        return new GitRepositoryAdapter(repository);\n+    }\n+\n+    ChangelogExtractor getChangelogExtractor() throws IOException {\n+        return new GitChangelogExtractor(this.getConventionalVersioning());\n+    }\n+\n+    Properties createReleaseProperties() throws IOException, ScmApiException {\n         Properties props = new Properties();\n \n-        SemanticVersion nextVersion = versioning.getNextVersion(SemanticVersion.parse(versionString.replace(\"-SNAPSHOT\", \"\")));\n+        SemanticVersion nextVersion = getNextVersion();\n         SemanticVersion nextDevelopmentVersion = nextVersion.nextVersion(SemanticVersionChange.PATCH);\n \n         // set properties for release plugin\n         props.setProperty(MVN_RELEASE_VERSION_PROPERTY, nextVersion.toString());\n         props.setProperty(MVN_DEVELOPMENT_VERSION_PROPERTY, nextDevelopmentVersion.toString() + \"-SNAPSHOT\");\n \n-        for (MavenProject project : reactorProjects)\n-        {\n+        for (MavenProject project : reactorProjects) {\n             String projectKey = project.getGroupId() + \":\" + project.getArtifactId();\n             props.setProperty(\"project.rel.\" + projectKey, nextVersion.toString());\n             props.setProperty(\"project.dev.\" + projectKey, nextDevelopmentVersion.toString());\n         }\n \n         return props;\n     }\n+\n+    SemanticVersion getNextVersion() throws IOException, ScmApiException {\n+        return this.getConventionalVersioning()\n+            .getNextVersion(SemanticVersion\n+            .parse(versionString.replace(\"-SNAPSHOT\", \"\")));\n+    }\n }"
  },
  {
    "sha": "1ef80bcbf62ef30fedd3c1c6b3aba85d12e6fa02",
    "filename": "conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/ConventionalChangelogMojo.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/ConventionalChangelogMojo.java",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/ConventionalChangelogMojo.java",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/conventional-commits-maven-plugin/src/main/java/com/smartling/cc4j/semantic/plugin/maven/ConventionalChangelogMojo.java?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -0,0 +1,65 @@\n+package com.smartling.cc4j.semantic.plugin.maven;\n+\n+import com.smartling.cc4j.semantic.release.common.Commit;\n+import com.smartling.cc4j.semantic.release.common.ConventionalCommitType;\n+import com.smartling.cc4j.semantic.release.common.changelog.ChangelogGenerator;\n+import com.smartling.cc4j.semantic.release.common.scm.RepositoryAdapter;\n+import com.smartling.cc4j.semantic.release.common.scm.ScmApiException;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+\n+@Mojo(name = \"changelog\", aggregator = true, defaultPhase = LifecyclePhase.VALIDATE)\n+public class ConventionalChangelogMojo extends AbstractVersioningMojo {\n+\n+    private static final String CHANGELOG_FILE_NAME = \"CHANGELOG.MD\";\n+\n+    @Parameter( property = \"conventional-commits-maven-plugin.repoUrlFormat\")\n+    private String repoUrlFormat;\n+\n+    @Parameter( property = \"conventional-commits-maven-plugin.trackingSystemUrlFormat\")\n+    private String trackingSystemUrlFormat;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException {\n+        try {\n+            Map<ConventionalCommitType, Set<Commit>> commitsByCommitTypes = this\n+                .getChangelogExtractor()\n+                .getGroupedCommitsByCommitTypes();\n+\n+            ChangelogGenerator changelogGenerator = new ChangelogGenerator(repoUrlFormat, trackingSystemUrlFormat);\n+            String changeLogs = changelogGenerator.generate(this.getNextVersion().toString(), commitsByCommitTypes);\n+            appendChangeLogs(changeLogs);\n+            commitChanges();\n+        } catch (IOException | ScmApiException e) {\n+            throw new MojoExecutionException(\"SCM error: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private void appendChangeLogs(String changeLogs) throws IOException {\n+        Path changelogPath = Paths.get(this.baseDir.getAbsolutePath(), CHANGELOG_FILE_NAME);\n+        if(!Files.exists(changelogPath)) {\n+            Files.createFile(changelogPath);\n+        }\n+\n+        List<String> resultChangeLogs = new ArrayList<>();\n+        resultChangeLogs.add(changeLogs);\n+        List<String> prevChangeLogs = Files.readAllLines(changelogPath);\n+        resultChangeLogs.addAll(prevChangeLogs);\n+        Files.write(changelogPath, resultChangeLogs);\n+    }\n+\n+    private void commitChanges() throws IOException, ScmApiException {\n+        RepositoryAdapter repositoryAdapter = getRepositoryAdapter();\n+        repositoryAdapter.addFile(CHANGELOG_FILE_NAME);\n+        repositoryAdapter.commit(\"ci: update changelog\");\n+    }\n+}"
  },
  {
    "sha": "be77b422ef3dc58683f4b923fa5e4b166edd1d56",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/foo4u/conventional-commits-for-java/blob/a38b6a58a520ece6b01096ed8167e4dba76e7637/pom.xml",
    "raw_url": "https://github.com/foo4u/conventional-commits-for-java/raw/a38b6a58a520ece6b01096ed8167e4dba76e7637/pom.xml",
    "contents_url": "https://api.github.com/repos/foo4u/conventional-commits-for-java/contents/pom.xml?ref=a38b6a58a520ece6b01096ed8167e4dba76e7637",
    "patch": "@@ -66,7 +66,9 @@\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <version>3.8.1</version>\n                 <configuration>\n-                    <release>8</release>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <verbose>true</verbose>\n                 </configuration>\n             </plugin>\n             <plugin>"
  }
]
