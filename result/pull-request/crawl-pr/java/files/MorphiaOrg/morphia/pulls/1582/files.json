[
  {
    "sha": "e8cdf084404d0b075e447d1da051236f56b1e1f8",
    "filename": "core/src/main/java/dev/morphia/mapping/DiscriminatorLookup.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/MorphiaOrg/morphia/blob/8cfaea03577a1764eb5e342aa7ecc79b70abab04/core/src/main/java/dev/morphia/mapping/DiscriminatorLookup.java",
    "raw_url": "https://github.com/MorphiaOrg/morphia/raw/8cfaea03577a1764eb5e342aa7ecc79b70abab04/core/src/main/java/dev/morphia/mapping/DiscriminatorLookup.java",
    "contents_url": "https://api.github.com/repos/MorphiaOrg/morphia/contents/core/src/main/java/dev/morphia/mapping/DiscriminatorLookup.java?ref=8cfaea03577a1764eb5e342aa7ecc79b70abab04",
    "patch": "@@ -34,14 +34,16 @@\n public final class DiscriminatorLookup {\n     private final Map<String, Class<?>> discriminatorClassMap = new ConcurrentHashMap<>();\n     private final Set<String> packages;\n+    private final ClassLoader classLoader;\n \n     /**\n      * Creates a new lookup\n-     *\n-     * @param entityModels the models to map\n+     *  @param entityModels the models to map\n      * @param packages     the packages to search\n+     * @param classLoader\n      */\n-    public DiscriminatorLookup(Map<Class<?>, EntityModel> entityModels, Set<String> packages) {\n+    public DiscriminatorLookup(Map<Class<?>, EntityModel> entityModels, Set<String> packages, ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n         for (EntityModel entityModel : entityModels.values()) {\n             discriminatorClassMap.put(entityModel.getDiscriminator(), entityModel.getType());\n         }\n@@ -85,7 +87,7 @@ public void addModel(EntityModel entityModel) {\n     private Class<?> getClassForName(String discriminator) {\n         Class<?> clazz = null;\n         try {\n-            clazz = Class.forName(discriminator);\n+            clazz = Class.forName(discriminator, true, classLoader);\n         } catch (ClassNotFoundException e) {\n             // Ignore\n         }"
  },
  {
    "sha": "2525cfce988ace20268a4820d0c48e74260db981",
    "filename": "core/src/main/java/dev/morphia/mapping/Mapper.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/MorphiaOrg/morphia/blob/8cfaea03577a1764eb5e342aa7ecc79b70abab04/core/src/main/java/dev/morphia/mapping/Mapper.java",
    "raw_url": "https://github.com/MorphiaOrg/morphia/raw/8cfaea03577a1764eb5e342aa7ecc79b70abab04/core/src/main/java/dev/morphia/mapping/Mapper.java",
    "contents_url": "https://api.github.com/repos/MorphiaOrg/morphia/contents/core/src/main/java/dev/morphia/mapping/Mapper.java?ref=8cfaea03577a1764eb5e342aa7ecc79b70abab04",
    "patch": "@@ -73,7 +73,9 @@\n     //EntityInterceptors; these are called after EntityListeners and lifecycle methods on an Entity, for all Entities\n     private final List<EntityInterceptor> interceptors = new LinkedList<>();\n     private final MapperOptions options;\n-    private final DiscriminatorLookup discriminatorLookup = new DiscriminatorLookup(Collections.emptyMap(), Collections.emptySet());\n+    private final DiscriminatorLookup discriminatorLookup;\n+\n+\n     private final MorphiaCodecProvider morphiaCodecProvider;\n     private final Datastore datastore;\n     private final CodecRegistry codecRegistry;\n@@ -90,6 +92,8 @@ public Mapper(Datastore datastore, CodecRegistry codecRegistry, MapperOptions op\n         this.datastore = datastore;\n         this.options = options;\n         morphiaCodecProvider = new MorphiaCodecProvider(this, datastore);\n+        discriminatorLookup = new DiscriminatorLookup(Collections.emptyMap(), Collections.emptySet(), options.getClassLoader());\n+\n         this.codecRegistry = fromProviders(new MorphiaTypesCodecProvider(this),\n             new PrimitiveCodecRegistry(codecRegistry),\n             new EnumCodecProvider(),\n@@ -485,7 +489,7 @@ public boolean isMapped(Class c) {\n      */\n     public synchronized void mapPackage(String packageName) {\n         try {\n-            getClasses(getClass().getClassLoader(), packageName, getOptions().isMapSubPackages())\n+            getClasses(options.getClassLoader(), packageName, getOptions().isMapSubPackages())\n                 .stream()\n                 .map(type -> {\n                     try {"
  },
  {
    "sha": "a993f3cc1cc31abfd318550846982f57bf59c20d",
    "filename": "core/src/test/java/dev/morphia/test/mapping/TestClassLoader.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/MorphiaOrg/morphia/blob/8cfaea03577a1764eb5e342aa7ecc79b70abab04/core/src/test/java/dev/morphia/test/mapping/TestClassLoader.java",
    "raw_url": "https://github.com/MorphiaOrg/morphia/raw/8cfaea03577a1764eb5e342aa7ecc79b70abab04/core/src/test/java/dev/morphia/test/mapping/TestClassLoader.java",
    "contents_url": "https://api.github.com/repos/MorphiaOrg/morphia/contents/core/src/test/java/dev/morphia/test/mapping/TestClassLoader.java?ref=8cfaea03577a1764eb5e342aa7ecc79b70abab04",
    "patch": "@@ -0,0 +1,93 @@\n+package dev.morphia.test.mapping;\n+\n+import static org.testng.Assert.assertTrue;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecConfigurationException;\n+import org.bson.types.ObjectId;\n+import org.testng.annotations.Test;\n+\n+import com.mongodb.client.MongoCollection;\n+\n+import dev.morphia.Datastore;\n+import dev.morphia.Morphia;\n+import dev.morphia.annotations.Entity;\n+import dev.morphia.annotations.Id;\n+import dev.morphia.mapping.DiscriminatorFunction;\n+import dev.morphia.mapping.MapperOptions;\n+import dev.morphia.test.TestBase;\n+import net.bytebuddy.ByteBuddy;\n+import net.bytebuddy.dynamic.loading.ByteArrayClassLoader;\n+import net.bytebuddy.jar.asm.Opcodes;\n+\n+public class TestClassLoader extends TestBase {\n+    private static class AppClassLoader extends ClassLoader {\n+\n+        @Override\n+        public Class<?> loadClass(String name) throws ClassNotFoundException {\n+            return super.loadClass(name);\n+        }\n+    }\n+\n+    @Entity(useDiscriminator = false)\n+    static class BasicEntity {\n+        @Id\n+        ObjectId id;\n+        Base data;\n+    }\n+\n+    @Entity\n+    public abstract static class Base {\n+    }\n+\n+    @Test\n+    public void testUsingClassLoader() {\n+        useClassLoading(this::recreateCollection);\n+    }\n+\n+    @Test(expectedExceptions = CodecConfigurationException.class)\n+    public void testNotUsingClassLoader() {\n+        useClassLoading(cl -> getMapper().getCollection(BasicEntity.class));\n+    }\n+\n+\n+    private void useClassLoading(Function<ClassLoader, MongoCollection<BasicEntity>> collectionCreator) {\n+        storePreviousInstance();\n+        ClassLoader classLoader = new ByteArrayClassLoader(new AppClassLoader(), false, Map.of());\n+        Class<?> childClass = loadDynamicClass(classLoader);\n+\n+        BasicEntity res = collectionCreator.apply(classLoader).find().first();\n+        assertTrue(childClass.isInstance(res.data));\n+    }\n+\n+    private void storePreviousInstance() {\n+        Document data = new Document(\"_t\", \"dev.morphia.test.mapping.ChildEmbed\");\n+        data.put(\"type\", \"one\");\n+        getMapper()\n+                .getCollection(BasicEntity.class)\n+                .withDocumentClass(Document.class)\n+                .insertOne(new Document(\"data\", data));\n+    }\n+\n+    private Class<?> loadDynamicClass(ClassLoader classLoader) {\n+        return new ByteBuddy().subclass(Base.class)\n+                .name(\"dev.morphia.test.mapping.ChildEmbed\")\n+                .defineField(\"type\", String.class, Opcodes.ACC_PUBLIC)\n+                .annotateType(Base.class.getAnnotation(Entity.class))\n+                .make()\n+                .load(classLoader)\n+                .getLoaded();\n+    }\n+\n+    private MongoCollection<BasicEntity> recreateCollection(ClassLoader classLoader) {\n+        MapperOptions options = MapperOptions.builder()\n+                .discriminator(DiscriminatorFunction.className())\n+                .classLoader(classLoader)\n+                .build();\n+        Datastore datastore = Morphia.createDatastore(getMongoClient(), TEST_DB_NAME, options);\n+        return datastore.getMapper().getCollection(BasicEntity.class);\n+    }\n+}"
  }
]
