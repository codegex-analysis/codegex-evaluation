[
  {
    "sha": "919ce1f1f77253454105acb2aad9997c1047a0e6",
    "filename": ".idea/codeStyles/Project.xml",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/vershininvv/CloudStorage/blob/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/.idea/codeStyles/Project.xml",
    "raw_url": "https://github.com/vershininvv/CloudStorage/raw/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/.idea/codeStyles/Project.xml",
    "contents_url": "https://api.github.com/repos/vershininvv/CloudStorage/contents/.idea/codeStyles/Project.xml?ref=be8fdf61d2afe6b000e7e86a779a1dfa63875f37",
    "patch": "@@ -0,0 +1,7 @@\n+<component name=\"ProjectCodeStyleConfiguration\">\n+  <code_scheme name=\"Project\" version=\"173\">\n+    <ScalaCodeStyleSettings>\n+      <option name=\"MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE\" value=\"true\" />\n+    </ScalaCodeStyleSettings>\n+  </code_scheme>\n+</component>\n\\ No newline at end of file"
  },
  {
    "sha": "a55e7a179bde3e4e772c29c0c85e53354aa54618",
    "filename": ".idea/codeStyles/codeStyleConfig.xml",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/vershininvv/CloudStorage/blob/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/.idea/codeStyles/codeStyleConfig.xml",
    "raw_url": "https://github.com/vershininvv/CloudStorage/raw/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/.idea/codeStyles/codeStyleConfig.xml",
    "contents_url": "https://api.github.com/repos/vershininvv/CloudStorage/contents/.idea/codeStyles/codeStyleConfig.xml?ref=be8fdf61d2afe6b000e7e86a779a1dfa63875f37",
    "patch": "@@ -0,0 +1,5 @@\n+<component name=\"ProjectCodeStyleConfiguration\">\n+  <state>\n+    <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\" />\n+  </state>\n+</component>\n\\ No newline at end of file"
  },
  {
    "sha": "09fbbea311c55e6ada6d057a9538abf02bb3b04d",
    "filename": "src/main/java/nio/NIOClass.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/vershininvv/CloudStorage/blob/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/src/main/java/nio/NIOClass.java",
    "raw_url": "https://github.com/vershininvv/CloudStorage/raw/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/src/main/java/nio/NIOClass.java",
    "contents_url": "https://api.github.com/repos/vershininvv/CloudStorage/contents/src/main/java/nio/NIOClass.java?ref=be8fdf61d2afe6b000e7e86a779a1dfa63875f37",
    "patch": "@@ -0,0 +1,133 @@\n+package nio;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.List;\n+\n+public class NIOClass {\n+    public static void main(String[] args) throws IOException {\n+        Path path = Paths.get(\"client\");\n+        Path path1 = Path.of(\"client\" + File.separator + \"1.txt\");\n+\n+//\t\tpath.toAbsolutePath().iterator().forEachRemaining(System.out::println);\n+//\t\tSystem.out.println(\"1.txt exists: \" + Files.exists(path1));\n+\n+        // создание\n+        Path path2 = Path.of(\"client\", \"dir1\", \"dir2\", \"1.txt\");\n+//        Path path2 = Path.of(\"client\", \"1.txt\");\n+        Path pathDir2 = Path.of(\"client\", \"dir1\", \"dir2\");\n+        if (!Files.exists(path2)) {\n+            Files.createFile(path2);\n+        }\n+\n+        // перемещение\n+//\t\tPath path3 = Files.move(Path.of(\"client\" + File.separator + \"2.txt\"), path2, StandardCopyOption.ATOMIC_MOVE);\n+\n+        // копирование\n+//\t\tPath path4 = Files.copy(Path.of(\"client\" + File.separator + \"3.txt\"), path2, StandardCopyOption.REPLACE_EXISTING);\n+\n+        // запись в файл\n+//\t\tFiles.writeString(path2, \"new line\", StandardOpenOption.WRITE);\n+//\t\tFiles.writeString(path2, \"new line2\", StandardOpenOption.APPEND);\n+//\t\tFiles.writeString(path2, \"new line3\", StandardOpenOption.CREATE);\n+//\n+//\t\t// удаление файла\n+//\t\tFiles.delete(Path.of(\"client\", \"dir1\"));\n+//\n+        // создание директорий\n+//\t\tFiles.createDirectories(Paths.get(\"client\", \"dir3\", \"dir4\", \"dir5/dir6\"));\n+\n+        // обход всего дерева\n+//\t\tFiles.walkFileTree(path, new FileVisitor<Path>() {\n+//\t\t\t@Override\n+//\t\t\tpublic FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n+//\t\t\t\tSystem.out.println(\"pre - \" + dir.getFileName());\n+//\t\t\t\treturn FileVisitResult.CONTINUE;\n+//\t\t\t}\n+//\n+//\t\t\t@Override\n+//\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+//\t\t\t\tSystem.out.println(\"visit - \" + file.getFileName());\n+//\t\t\t\treturn FileVisitResult.CONTINUE;\n+//\t\t\t}\n+//\n+//\t\t\t@Override\n+//\t\t\tpublic FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n+//\t\t\t\tSystem.out.println(\"fail - \" + file.getFileName());\n+//\t\t\t\treturn FileVisitResult.CONTINUE;\n+//\t\t\t}\n+//\n+//\t\t\t@Override\n+//\t\t\tpublic FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n+//\t\t\t\tSystem.out.println(\"post - \" + dir.getFileName());\n+//\t\t\t\treturn FileVisitResult.CONTINUE;\n+//\t\t\t}\n+//\t\t});\n+\n+        // поиска файла\n+//\t\tFiles.walkFileTree(path, new SimpleFileVisitor<>() {\n+//\t\t\t@Override\n+//\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+//\t\t\t\tif (\"6.txt\".equals(file.getFileName().toString())) {\n+//\t\t\t\t\tSystem.out.println(file.getFileName() + \" is founded. Paht: \" + file.toAbsolutePath());\n+//\t\t\t\t\treturn FileVisitResult.TERMINATE;\n+//\t\t\t\t}\n+//\t\t\t\treturn FileVisitResult.CONTINUE;\n+//\t\t\t}\n+//\t\t});\n+\n+\n+        // считывание файла (1ый способ)\n+//\t\tFiles.readAllLines(path2).forEach(System.out::println);\n+//\t\tList<String> list = Files.readAllLines(path2);\n+//\t\tfor (String line : list) {\n+//\t\t\tSystem.out.println(line);\n+//\t\t}\n+\n+//         считывание файла (2ой способ)\n+//\t\tFiles.newBufferedReader(path2)\n+//\t\t\t\t.lines()\n+//\t\t\t\t.forEach(System.out::println);\n+\n+        // считывание файла (3ий способ)\n+//\t\tbyte[] bytes = Files.readAllBytes(path2);\n+//\t\tfor (byte b : bytes) {\n+//\t\t\tSystem.out.print((char) b);\n+//\t\t}\n+\n+        RandomAccessFile raf = new RandomAccessFile(\"client\" + File.separator + \"1.txt\", \"rw\");\n+        FileChannel fileChannel = raf.getChannel();\n+        ByteBuffer buffer = ByteBuffer.allocate(55);\n+        System.out.println(buffer);\n+        System.out.println(fileChannel.size());\n+        int bytesRead = fileChannel.read(buffer);\n+        System.out.println(buffer);\n+\n+        while (bytesRead != -1) {\n+            buffer.flip(); // перевод в режим чтения из буфера\n+            while (buffer.hasRemaining()) {\n+                System.out.print((char) buffer.get());\n+            }\n+            buffer.clear();\n+            bytesRead = fileChannel.read(buffer);\n+            System.out.println(\"---\");\n+        }\n+\n+        String data = \"new String hello wolrd\";\n+        buffer.put(data.getBytes(StandardCharsets.UTF_8));\n+\n+        buffer.flip();\n+        fileChannel.position(0);\n+        while (buffer.hasRemaining()) {\n+            fileChannel.write(buffer);\n+        }\n+\n+        raf.close();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f36b7f60f023720db8b08c872825a83fc91a5473",
    "filename": "src/main/java/nio/NioTelnetServer.java",
    "status": "added",
    "additions": 218,
    "deletions": 0,
    "changes": 218,
    "blob_url": "https://github.com/vershininvv/CloudStorage/blob/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/src/main/java/nio/NioTelnetServer.java",
    "raw_url": "https://github.com/vershininvv/CloudStorage/raw/be8fdf61d2afe6b000e7e86a779a1dfa63875f37/src/main/java/nio/NioTelnetServer.java",
    "contents_url": "https://api.github.com/repos/vershininvv/CloudStorage/contents/src/main/java/nio/NioTelnetServer.java?ref=be8fdf61d2afe6b000e7e86a779a1dfa63875f37",
    "patch": "@@ -0,0 +1,218 @@\n+package nio;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.*;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class NioTelnetServer {\n+    private final ByteBuffer buffer = ByteBuffer.allocate(512);\n+\n+    public static final String LS_COMMAND = \"\\tls                            view all files from current directory\\n\";\n+    public static final String MKDIR_COMMAND = \"\\tmkdir                         create new dir in current directory\\n\";\n+    public static final String TOUCH_COMMAND = \"\\ttouch (имя файла)             create new file in current directory\\n\";\n+    public static final String CD_COMMAND = \"\\tcd (path)                     moving through directories\\n\";\n+    public static final String RM_COMMAND = \"\\trm (имя файла или папки)      delete file or dir in current directory\\n\";\n+    public static final String COPY_COMMAND = \"\\tcopy (src, target)            copy file in current directory\\n\";\n+    public static final String CAT_COMMAND = \"\\tcat (имя файла)               view file in current directory\\n\";\n+\n+    String curPath = new File(\"server\").getAbsolutePath();\n+\n+    public NioTelnetServer() throws IOException {\n+        ServerSocketChannel server = ServerSocketChannel.open(); // открыли\n+        server.bind(new InetSocketAddress(1234));\n+        server.configureBlocking(false); // ВАЖНО\n+        Selector selector = Selector.open();\n+        server.register(selector, SelectionKey.OP_ACCEPT);\n+        System.out.println(\"Server started\");\n+        while (server.isOpen()) {\n+            selector.select();\n+            var selectionKeys = selector.selectedKeys();\n+            var iterator = selectionKeys.iterator();\n+            while (iterator.hasNext()) {\n+                var key = iterator.next();\n+                if (key.isAcceptable()) {\n+                    handleAccept(key, selector);\n+                } else if (key.isReadable()) {\n+                    handleRead(key, selector);\n+                }\n+                iterator.remove();\n+            }\n+        }\n+    }\n+\n+    private void handleRead(SelectionKey key, Selector selector) throws IOException {\n+        SocketChannel channel = (SocketChannel) key.channel();\n+        int readBytes = channel.read(buffer);\n+        if (readBytes < 0) {\n+            channel.close();\n+            return;\n+        } else if (readBytes == 0) {\n+            return;\n+        }\n+\n+        buffer.flip();\n+        StringBuilder sb = new StringBuilder();\n+        while (buffer.hasRemaining()) {\n+            sb.append((char) buffer.get());\n+        }\n+        buffer.clear();\n+\n+        // TODO: 05.03.2021\n+        // touch (имя файла) - создание файла\n+        // mkdir (имя директории) - создание директории\n+        // cd (path) - перемещение по дереву папок\n+        // rm (имя файла или папки) - удаление объекта\n+        // copy (src, target) - копирование файла (подумать с замещением или нет)\n+        // cat (имя файла) - вывод в консоль содержимого (если не просматривается то вывети сообщение что не задано для данного типа данных)\n+\n+        if (key.isValid()) {\n+            String command1 = sb.toString()\n+                    .replace(\"\\n\", \"\")\n+                    .replace(\"\\r\", \"\");\n+            String[] command = command1.split(\" \");\n+\n+            if (\"--help\".equals(command[0])) {\n+                sendMessage(LS_COMMAND, selector);\n+                sendMessage(MKDIR_COMMAND, selector);\n+                sendMessage(TOUCH_COMMAND, selector);\n+                sendMessage(CD_COMMAND, selector);\n+                sendMessage(RM_COMMAND, selector);\n+                sendMessage(COPY_COMMAND, selector);\n+                sendMessage(CAT_COMMAND, selector);\n+            } else if (\"ls\".equals(command[0])) {\n+                sendMessage(getFilesList().concat(\"\\n\"), selector);\n+            } else if (\"exit\".equals(command[0])) {\n+                System.out.println(\"Client logged out. IP: \" + channel.getRemoteAddress());\n+                channel.close();\n+                return;\n+            } else if (\"touch\".equals(command[0])) {\n+                if (command.length == 2) touchFile(command[1], selector);\n+                else sendMessage(\"Incorrect command\".concat(\"\\n\"), selector);\n+            } else if (\"mkdir\".equals(command[0])) {\n+                if (command.length == 2) mkdir(command[1]);\n+                else sendMessage(\"Incorrect command\".concat(\"\\n\"), selector);\n+            } else if (\"cd\".equals(command[0])) {\n+                if (command.length == 2) cd(command[1], selector);\n+                else sendMessage(\"Incorrect command\".concat(\"\\n\"), selector);\n+            } else if (\"rm\".equals(command[0])) {\n+                if (command.length == 2) rm(command[1], selector);\n+                else sendMessage(\"Incorrect command\".concat(\"\\n\"), selector);\n+            } else if (\"copy\".equals(command[0])) {\n+                if (command.length == 3) copy(command[1], command[2], selector);\n+                else sendMessage(\"Incorrect command\".concat(\"\\n\"), selector);\n+            } else if (\"cat\".equals(command[0])) {\n+                if (command.length == 2) cat(command[1], selector);\n+                else sendMessage(\"Incorrect command\".concat(\"\\n\"), selector);\n+            }\n+        }\n+        sendName(channel);\n+    }\n+\n+    private void cat(String name, Selector selector) throws IOException {\n+        if (Files.exists(Path.of(curPath + File.separator + name))) {\n+            try {\n+                List<String> list = Files.readAllLines(Path.of(curPath + File.separator + name));\n+                for (String line : list) {\n+                    sendMessage(line.concat(\"\\n\"), selector);\n+                }\n+            } catch (IOException e) {\n+                sendMessage(\"This type of file can't be read\".concat(\"\\n\"), selector);\n+                e.printStackTrace();\n+            }\n+        } else\n+            sendMessage(\"File is no exist\".concat(\"\\n\"), selector);\n+    }\n+\n+    private void copy(String srcName, String targetName, Selector selector) throws IOException {\n+        if (Files.exists(Path.of(curPath + File.separator + srcName))) {\n+            Files.copy(Path.of(curPath + File.separator + srcName), Path.of(curPath + File.separator + targetName),\n+                    StandardCopyOption.REPLACE_EXISTING);\n+        } else\n+            sendMessage(\"File is no exist\".concat(\"\\n\"), selector);\n+    }\n+\n+    private void rm(String name, Selector selector) throws IOException {\n+        if (Files.exists(Path.of(curPath + File.separator + name))) {\n+            Files.delete(Path.of(curPath + File.separator + name));\n+        } else\n+            sendMessage(\"File is no exist\".concat(\"\\n\"), selector);\n+    }\n+\n+    private void cd(String dirName, Selector selector) throws IOException {\n+        String newPath = curPath + File.separator + dirName;\n+        if (dirName.equals(\"..\")) {\n+            if (new File(new File(\"server\").getAbsolutePath()).getParent()\n+                    .equals(new File(curPath).getParent())) {\n+                sendMessage(\"This dir is the root\".concat(\"\\n\"), selector);\n+            } else {\n+                curPath = new File(curPath).getParent();\n+            }\n+\n+            sendMessage(curPath.concat(\"\\n\"), selector);\n+        } else if (Files.exists(Path.of(newPath))) {\n+            curPath = newPath;\n+            sendMessage(curPath.concat(\"\\n\"), selector);\n+        } else\n+            sendMessage(\"The dir: \" + dirName + \" - is not exist\".concat(\"\\n\"), selector);\n+    }\n+\n+    private void mkdir(String name) throws IOException {\n+        Files.createDirectories(Path.of(curPath + File.separator + name));\n+    }\n+\n+    private void touchFile(String name, Selector selector) throws IOException {\n+\n+        if (!Files.exists(Path.of(curPath + File.separator + name))) {\n+            Files.createFile(Path.of(curPath + File.separator + name));\n+        } else\n+            sendMessage(\"File is already exist\".concat(\"\\n\"), selector);\n+\n+    }\n+\n+    private void sendName(SocketChannel channel) throws IOException {\n+        channel.write(\n+                ByteBuffer.wrap(channel\n+                        .getRemoteAddress().toString()\n+                        .concat(\">: \")\n+                        .getBytes(StandardCharsets.UTF_8)\n+                )\n+        );\n+    }\n+\n+    private String getFilesList() {\n+        return String.join(\"\\t\", Objects.requireNonNull(new File(curPath).list()));\n+    }\n+\n+    private void sendMessage(String message, Selector selector) throws IOException {\n+        for (SelectionKey key : selector.keys()) {\n+            if (key.isValid() && key.channel() instanceof SocketChannel) {\n+                ((SocketChannel) key.channel())\n+                        .write(ByteBuffer.wrap(message.getBytes(StandardCharsets.UTF_8)));\n+            }\n+        }\n+    }\n+\n+    private void handleAccept(SelectionKey key, Selector selector) throws IOException {\n+\n+\n+        SocketChannel channel = ((ServerSocketChannel) key.channel()).accept();\n+        channel.configureBlocking(false);\n+        System.out.println(\"Client accepted. IP: \" + channel.getRemoteAddress());\n+        channel.register(selector, SelectionKey.OP_READ, \"some attach\");\n+        channel.write(ByteBuffer.wrap(\"Hello user!\\n\".getBytes(StandardCharsets.UTF_8)));\n+        channel.write(ByteBuffer.wrap(\"Enter --help for support info\\n\".getBytes(StandardCharsets.UTF_8)));\n+        sendName(channel);\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        new NioTelnetServer();\n+    }\n+}\n\\ No newline at end of file"
  }
]
