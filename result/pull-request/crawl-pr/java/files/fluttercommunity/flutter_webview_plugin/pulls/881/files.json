[
  {
    "sha": "1739677935efc145f660bfb79e7c19ecc169935b",
    "filename": ".github/workflows/android_ut.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/fluttercommunity/flutter_webview_plugin/blob/bb905d781a70ce626838d308d0fc110369e6c87b/.github/workflows/android_ut.yml",
    "raw_url": "https://github.com/fluttercommunity/flutter_webview_plugin/raw/bb905d781a70ce626838d308d0fc110369e6c87b/.github/workflows/android_ut.yml",
    "contents_url": "https://api.github.com/repos/fluttercommunity/flutter_webview_plugin/contents/.github/workflows/android_ut.yml?ref=bb905d781a70ce626838d308d0fc110369e6c87b",
    "patch": "@@ -14,7 +14,7 @@ jobs:\n           java-version: '12.x'\n       - uses: subosito/flutter-action@v1\n         with:\n-          flutter-version: '1.7.8+hotfix.4'\n+          flutter-version: '2.0.1'\n       - run: flutter doctor\n       - run: flutter pub get\n       - run: sh android_test.sh "
  },
  {
    "sha": "f5599884c5bcd52283d6ebd771fde29ed83344d3",
    "filename": ".github/workflows/flutter_ut.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/fluttercommunity/flutter_webview_plugin/blob/bb905d781a70ce626838d308d0fc110369e6c87b/.github/workflows/flutter_ut.yml",
    "raw_url": "https://github.com/fluttercommunity/flutter_webview_plugin/raw/bb905d781a70ce626838d308d0fc110369e6c87b/.github/workflows/flutter_ut.yml",
    "contents_url": "https://api.github.com/repos/fluttercommunity/flutter_webview_plugin/contents/.github/workflows/flutter_ut.yml?ref=bb905d781a70ce626838d308d0fc110369e6c87b",
    "patch": "@@ -14,7 +14,7 @@ jobs:\n           java-version: '12.x'\n       - uses: subosito/flutter-action@v1\n         with:\n-          flutter-version: '1.7.8+hotfix.4'\n+          flutter-version: '2.0.1'\n       - run: flutter doctor\n       - run: flutter pub get\n       - run: flutter test"
  },
  {
    "sha": "6f0fe0d63c62b654a1fee0d23bc66da53f4da2a8",
    "filename": "lib/src/base.dart",
    "status": "modified",
    "additions": 44,
    "deletions": 42,
    "changes": 86,
    "blob_url": "https://github.com/fluttercommunity/flutter_webview_plugin/blob/bb905d781a70ce626838d308d0fc110369e6c87b/lib/src/base.dart",
    "raw_url": "https://github.com/fluttercommunity/flutter_webview_plugin/raw/bb905d781a70ce626838d308d0fc110369e6c87b/lib/src/base.dart",
    "contents_url": "https://api.github.com/repos/fluttercommunity/flutter_webview_plugin/contents/lib/src/base.dart?ref=bb905d781a70ce626838d308d0fc110369e6c87b",
    "patch": "@@ -17,19 +17,19 @@ enum WebViewState { shouldStart, startLoad, finishLoad, abortLoad }\n /// Singleton class that communicate with a Webview Instance\n class FlutterWebviewPlugin {\n   factory FlutterWebviewPlugin() {\n-    if(_instance == null) {\n+    if (_instance == null) {\n       const MethodChannel methodChannel = const MethodChannel(_kChannel);\n       _instance = FlutterWebviewPlugin.private(methodChannel);\n     }\n-    return _instance;\n+    return _instance!;\n   }\n \n   @visibleForTesting\n   FlutterWebviewPlugin.private(this._channel) {\n     _channel.setMethodCallHandler(_handleMessages);\n   }\n \n-  static FlutterWebviewPlugin _instance;\n+  static FlutterWebviewPlugin? _instance;\n \n   final MethodChannel _channel;\n \n@@ -44,9 +44,7 @@ class FlutterWebviewPlugin {\n   final _onPostMessage = StreamController<JavascriptMessage>.broadcast();\n \n   final Map<String, JavascriptChannel> _javascriptChannels =\n-      // ignoring warning as min SDK version doesn't support collection literals yet\n-      // ignore: prefer_collection_literals\n-      Map<String, JavascriptChannel>();\n+      <String, JavascriptChannel>{};\n \n   Future<Null> _handleMessages(MethodCall call) async {\n     switch (call.method) {\n@@ -143,39 +141,40 @@ class FlutterWebviewPlugin {\n   /// - [ignoreSSLErrors]: use to bypass Android/iOS SSL checks e.g. for self-signed certificates\n   Future<Null> launch(\n     String url, {\n-    Map<String, String> headers,\n-    Set<JavascriptChannel> javascriptChannels,\n-    bool withJavascript,\n-    bool clearCache,\n-    bool clearCookies,\n-    bool mediaPlaybackRequiresUserGesture,\n-    bool hidden,\n-    bool enableAppScheme,\n-    Rect rect,\n-    String userAgent,\n-    bool withZoom,\n-    bool displayZoomControls,\n-    bool withLocalStorage,\n-    bool withLocalUrl,\n-    String localUrlScope,\n-    bool withOverviewMode,\n-    bool scrollBar,\n-    bool supportMultipleWindows,\n-    bool appCacheEnabled,\n-    bool allowFileURLs,\n-    bool useWideViewPort,\n-    String invalidUrlRegex,\n-    bool geolocationEnabled,\n-    bool debuggingEnabled,\n-    bool ignoreSSLErrors,\n+    Map<String, String>? headers,\n+    Set<JavascriptChannel>? javascriptChannels,\n+    bool? withJavascript,\n+    bool? clearCache,\n+    bool? clearCookies,\n+    bool? mediaPlaybackRequiresUserGesture,\n+    bool? hidden,\n+    bool? enableAppScheme,\n+    Rect? rect,\n+    String? userAgent,\n+    bool? withZoom,\n+    bool? displayZoomControls,\n+    bool? withLocalStorage,\n+    bool? withLocalUrl,\n+    String? localUrlScope,\n+    bool? withOverviewMode,\n+    bool? scrollBar,\n+    bool? supportMultipleWindows,\n+    bool? appCacheEnabled,\n+    bool? allowFileURLs,\n+    bool? useWideViewPort,\n+    String? invalidUrlRegex,\n+    bool? geolocationEnabled,\n+    bool? debuggingEnabled,\n+    bool? ignoreSSLErrors,\n   }) async {\n     final args = <String, dynamic>{\n       'url': url,\n       'withJavascript': withJavascript ?? true,\n       'clearCache': clearCache ?? false,\n       'hidden': hidden ?? false,\n       'clearCookies': clearCookies ?? false,\n-      'mediaPlaybackRequiresUserGesture': mediaPlaybackRequiresUserGesture ?? true,\n+      'mediaPlaybackRequiresUserGesture':\n+          mediaPlaybackRequiresUserGesture ?? true,\n       'enableAppScheme': enableAppScheme ?? true,\n       'userAgent': userAgent,\n       'withZoom': withZoom ?? false,\n@@ -226,7 +225,7 @@ class FlutterWebviewPlugin {\n   }\n \n   /// Execute Javascript inside webview\n-  Future<String> evalJavascript(String code) async {\n+  Future<String?> evalJavascript(String code) async {\n     final res = await _channel.invokeMethod('eval', {'code': code});\n     return res;\n   }\n@@ -248,7 +247,8 @@ class FlutterWebviewPlugin {\n   Future<bool> canGoBack() async => await _channel.invokeMethod('canGoBack');\n \n   /// Checks if webview can navigate back\n-  Future<bool> canGoForward() async => await _channel.invokeMethod('canGoForward');\n+  Future<bool> canGoForward() async =>\n+      await _channel.invokeMethod('canGoForward');\n \n   /// Navigates forward on the Webview.\n   Future<Null> goForward() async => await _channel.invokeMethod('forward');\n@@ -263,7 +263,7 @@ class FlutterWebviewPlugin {\n   Future<Null> clearCache() async => await _channel.invokeMethod('cleanCache');\n \n   // Reload webview with a url\n-  Future<Null> reloadUrl(String url, {Map<String, String> headers}) async {\n+  Future<Null> reloadUrl(String url, {Map<String, String>? headers}) async {\n     final args = <String, dynamic>{'url': url};\n     if (headers != null) {\n       args['headers'] = headers;\n@@ -274,7 +274,8 @@ class FlutterWebviewPlugin {\n   // Clean cookies on WebView\n   Future<Null> cleanCookies() async {\n     // one liner to clear javascript cookies\n-    await evalJavascript('document.cookie.split(\";\").forEach(function(c) { document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\"); });');\n+    await evalJavascript(\n+        'document.cookie.split(\";\").forEach(function(c) { document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\"); });');\n     return await _channel.invokeMethod('cleanCookies');\n   }\n \n@@ -300,7 +301,7 @@ class FlutterWebviewPlugin {\n     final cookies = <String, String>{};\n \n     if (cookiesString?.isNotEmpty == true) {\n-      cookiesString.split(';').forEach((String cookie) {\n+      cookiesString?.split(';').forEach((String cookie) {\n         final split = cookie.split('=');\n         cookies[split[0]] = split[1];\n       });\n@@ -321,22 +322,21 @@ class FlutterWebviewPlugin {\n     await _channel.invokeMethod('resize', args);\n   }\n \n-  Set<String> _extractJavascriptChannelNames(Set<JavascriptChannel> channels) {\n+  Set<String> _extractJavascriptChannelNames(Set<JavascriptChannel>? channels) {\n     final Set<String> channelNames = channels == null\n-        // ignore: prefer_collection_literals\n-        ? Set<String>()\n+        ? <String>{}\n         : channels.map((JavascriptChannel channel) => channel.name).toSet();\n     return channelNames;\n   }\n \n   void _handleJavascriptChannelMessage(\n       final String channelName, final String message) {\n     _javascriptChannels[channelName]\n-        .onMessageReceived(JavascriptMessage(message));\n+        ?.onMessageReceived(JavascriptMessage(message));\n   }\n \n   void _assertJavascriptChannelNamesAreUnique(\n-      final Set<JavascriptChannel> channels) {\n+      final Set<JavascriptChannel>? channels) {\n     if (channels == null || channels.isEmpty) {\n       return;\n     }\n@@ -363,6 +363,8 @@ class WebViewStateChanged {\n       case 'abortLoad':\n         t = WebViewState.abortLoad;\n         break;\n+      default:\n+        throw ArgumentError('unknown webview state');\n     }\n     return WebViewStateChanged(t, map['url'], map['navigationType']);\n   }"
  },
  {
    "sha": "5551c2d3b1420b38b9a2059818aa54015b9ee9c5",
    "filename": "lib/src/javascript_channel.dart",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/fluttercommunity/flutter_webview_plugin/blob/bb905d781a70ce626838d308d0fc110369e6c87b/lib/src/javascript_channel.dart",
    "raw_url": "https://github.com/fluttercommunity/flutter_webview_plugin/raw/bb905d781a70ce626838d308d0fc110369e6c87b/lib/src/javascript_channel.dart",
    "contents_url": "https://api.github.com/repos/fluttercommunity/flutter_webview_plugin/contents/lib/src/javascript_channel.dart?ref=bb905d781a70ce626838d308d0fc110369e6c87b",
    "patch": "@@ -1,4 +1,3 @@\n-import 'package:flutter/foundation.dart';\n import 'package:flutter_webview_plugin/flutter_webview_plugin.dart';\n \n final RegExp _validChannelNames = RegExp('^[a-zA-Z_][a-zA-Z0-9]*\\$');\n@@ -9,11 +8,9 @@ class JavascriptChannel {\n   ///\n   /// The parameters `name` and `onMessageReceived` must not be null.\n   JavascriptChannel({\n-    @required this.name,\n-    @required this.onMessageReceived,\n-  })  : assert(name != null),\n-        assert(onMessageReceived != null),\n-        assert(_validChannelNames.hasMatch(name));\n+    required this.name,\n+    required this.onMessageReceived,\n+  }) : assert(_validChannelNames.hasMatch(name));\n \n   /// The channel's name.\n   ///"
  },
  {
    "sha": "409b1855db53eba7764eabe3c0b85c6aee26b69c",
    "filename": "lib/src/webview_scaffold.dart",
    "status": "modified",
    "additions": 42,
    "deletions": 41,
    "changes": 83,
    "blob_url": "https://github.com/fluttercommunity/flutter_webview_plugin/blob/bb905d781a70ce626838d308d0fc110369e6c87b/lib/src/webview_scaffold.dart",
    "raw_url": "https://github.com/fluttercommunity/flutter_webview_plugin/raw/bb905d781a70ce626838d308d0fc110369e6c87b/lib/src/webview_scaffold.dart",
    "contents_url": "https://api.github.com/repos/fluttercommunity/flutter_webview_plugin/contents/lib/src/webview_scaffold.dart?ref=bb905d781a70ce626838d308d0fc110369e6c87b",
    "patch": "@@ -9,9 +9,9 @@ import 'base.dart';\n \n class WebviewScaffold extends StatefulWidget {\n   const WebviewScaffold({\n-    Key key,\n+    Key? key,\n     this.appBar,\n-    @required this.url,\n+    required this.url,\n     this.headers,\n     this.javascriptChannels,\n     this.withJavascript,\n@@ -43,35 +43,35 @@ class WebviewScaffold extends StatefulWidget {\n     this.ignoreSSLErrors = false,\n   }) : super(key: key);\n \n-  final PreferredSizeWidget appBar;\n+  final PreferredSizeWidget? appBar;\n   final String url;\n-  final Map<String, String> headers;\n-  final Set<JavascriptChannel> javascriptChannels;\n-  final bool withJavascript;\n-  final bool clearCache;\n-  final bool clearCookies;\n+  final Map<String, String>? headers;\n+  final Set<JavascriptChannel>? javascriptChannels;\n+  final bool? withJavascript;\n+  final bool? clearCache;\n+  final bool? clearCookies;\n   final bool mediaPlaybackRequiresUserGesture;\n-  final bool enableAppScheme;\n-  final String userAgent;\n+  final bool? enableAppScheme;\n+  final String? userAgent;\n   final bool primary;\n-  final List<Widget> persistentFooterButtons;\n-  final Widget bottomNavigationBar;\n-  final bool withZoom;\n-  final bool displayZoomControls;\n-  final bool withLocalStorage;\n-  final bool withLocalUrl;\n-  final String localUrlScope;\n-  final bool scrollBar;\n-  final bool supportMultipleWindows;\n-  final bool appCacheEnabled;\n+  final List<Widget>? persistentFooterButtons;\n+  final Widget? bottomNavigationBar;\n+  final bool? withZoom;\n+  final bool? displayZoomControls;\n+  final bool? withLocalStorage;\n+  final bool? withLocalUrl;\n+  final String? localUrlScope;\n+  final bool? scrollBar;\n+  final bool? supportMultipleWindows;\n+  final bool? appCacheEnabled;\n   final bool hidden;\n-  final Widget initialChild;\n-  final bool allowFileURLs;\n+  final Widget? initialChild;\n+  final bool? allowFileURLs;\n   final bool resizeToAvoidBottomInset;\n-  final String invalidUrlRegex;\n-  final bool geolocationEnabled;\n-  final bool withOverviewMode;\n-  final bool useWideViewPort;\n+  final String? invalidUrlRegex;\n+  final bool? geolocationEnabled;\n+  final bool? withOverviewMode;\n+  final bool? useWideViewPort;\n   final bool debuggingEnabled;\n   final bool ignoreSSLErrors;\n \n@@ -81,9 +81,9 @@ class WebviewScaffold extends StatefulWidget {\n \n class _WebviewScaffoldState extends State<WebviewScaffold> {\n   final webviewReference = FlutterWebviewPlugin();\n-  Rect _rect;\n-  Timer _resizeTimer;\n-  StreamSubscription<WebViewStateChanged> _onStateChanged;\n+  Rect? _rect;\n+  Timer? _resizeTimer;\n+  StreamSubscription<WebViewStateChanged>? _onStateChanged;\n \n   var _onBack;\n \n@@ -137,7 +137,7 @@ class _WebviewScaffoldState extends State<WebviewScaffold> {\n     _resizeTimer?.cancel();\n     webviewReference.close();\n     if (widget.hidden) {\n-      _onStateChanged.cancel();\n+      _onStateChanged?.cancel();\n     }\n     webviewReference.dispose();\n   }\n@@ -160,7 +160,8 @@ class _WebviewScaffoldState extends State<WebviewScaffold> {\n               withJavascript: widget.withJavascript,\n               clearCache: widget.clearCache,\n               clearCookies: widget.clearCookies,\n-              mediaPlaybackRequiresUserGesture: widget.mediaPlaybackRequiresUserGesture,\n+              mediaPlaybackRequiresUserGesture:\n+                  widget.mediaPlaybackRequiresUserGesture,\n               hidden: widget.hidden,\n               enableAppScheme: widget.enableAppScheme,\n               userAgent: widget.userAgent,\n@@ -187,7 +188,7 @@ class _WebviewScaffoldState extends State<WebviewScaffold> {\n               _resizeTimer?.cancel();\n               _resizeTimer = Timer(const Duration(milliseconds: 250), () {\n                 // avoid resizing to fast when build is called multiple time\n-                webviewReference.resize(_rect);\n+                webviewReference.resize(_rect!);\n               });\n             }\n           }\n@@ -201,9 +202,9 @@ class _WebviewScaffoldState extends State<WebviewScaffold> {\n \n class _WebviewPlaceholder extends SingleChildRenderObjectWidget {\n   const _WebviewPlaceholder({\n-    Key key,\n-    @required this.onRectChanged,\n-    Widget child,\n+    Key? key,\n+    required this.onRectChanged,\n+    Widget? child,\n   }) : super(key: key, child: child);\n \n   final ValueChanged<Rect> onRectChanged;\n@@ -224,15 +225,15 @@ class _WebviewPlaceholder extends SingleChildRenderObjectWidget {\n \n class _WebviewPlaceholderRender extends RenderProxyBox {\n   _WebviewPlaceholderRender({\n-    RenderBox child,\n-    ValueChanged<Rect> onRectChanged,\n+    RenderBox? child,\n+    ValueChanged<Rect>? onRectChanged,\n   })  : _callback = onRectChanged,\n         super(child);\n \n-  ValueChanged<Rect> _callback;\n-  Rect _rect;\n+  ValueChanged<Rect>? _callback;\n+  Rect? _rect;\n \n-  Rect get rect => _rect;\n+  Rect? get rect => _rect;\n \n   set onRectChanged(ValueChanged<Rect> callback) {\n     if (callback != _callback) {\n@@ -243,7 +244,7 @@ class _WebviewPlaceholderRender extends RenderProxyBox {\n \n   void notifyRect() {\n     if (_callback != null && _rect != null) {\n-      _callback(_rect);\n+      _callback!(_rect!);\n     }\n   }\n "
  },
  {
    "sha": "abf2a319bc07034f90c875d046b083a4c6512001",
    "filename": "pubspec.yaml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/fluttercommunity/flutter_webview_plugin/blob/bb905d781a70ce626838d308d0fc110369e6c87b/pubspec.yaml",
    "raw_url": "https://github.com/fluttercommunity/flutter_webview_plugin/raw/bb905d781a70ce626838d308d0fc110369e6c87b/pubspec.yaml",
    "contents_url": "https://api.github.com/repos/fluttercommunity/flutter_webview_plugin/contents/pubspec.yaml?ref=bb905d781a70ce626838d308d0fc110369e6c87b",
    "patch": "@@ -10,7 +10,7 @@ homepage: https://github.com/dart-flitter/flutter_webview_plugin\n version: 0.3.11\n \n environment:\n-  sdk: \">=2.0.0 <3.0.0\"\n+  sdk: \">=2.12.0 <3.0.0\"\n \n flutter:\n   plugin:\n@@ -22,6 +22,6 @@ dependencies:\n     sdk: flutter\n \n dev_dependencies:\n-  mockito: ^4.1.0\n+  mockito: ^5.0.0\n   flutter_test:\n     sdk: flutter"
  },
  {
    "sha": "920578612235f097131bff3c84e599d3de0035b6",
    "filename": "test/flutter_webview_plugin_test.dart",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/fluttercommunity/flutter_webview_plugin/blob/bb905d781a70ce626838d308d0fc110369e6c87b/test/flutter_webview_plugin_test.dart",
    "raw_url": "https://github.com/fluttercommunity/flutter_webview_plugin/raw/bb905d781a70ce626838d308d0fc110369e6c87b/test/flutter_webview_plugin_test.dart",
    "contents_url": "https://api.github.com/repos/fluttercommunity/flutter_webview_plugin/contents/test/flutter_webview_plugin_test.dart?ref=bb905d781a70ce626838d308d0fc110369e6c87b",
    "patch": "@@ -4,8 +4,8 @@ import 'package:flutter_webview_plugin/flutter_webview_plugin.dart';\n import 'package:mockito/mockito.dart';\n \n void main() {\n-  MockMethodChannel methodChannel;\n-  FlutterWebviewPlugin webview;\n+  late MockMethodChannel methodChannel;\n+  late FlutterWebviewPlugin webview;\n \n   setUp(() {\n     methodChannel = MockMethodChannel();"
  }
]
