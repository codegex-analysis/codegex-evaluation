[
  {
    "sha": "9fdd8a69bc11254f59229131480bc83f78a7b7f9",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 33,
    "deletions": 2,
    "changes": 35,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/pom.xml",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/pom.xml",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/pom.xml?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -17,7 +17,7 @@\n \t<description>Demo project for Spring Boot</description>\n \n \t<properties>\n-\t\t<java.version>11</java.version>\n+\t\t<java.version>15</java.version>\n \t</properties>\n \n \t<dependencies>\n@@ -40,14 +40,45 @@\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.hibernate</groupId>\n+\t\t\t<artifactId>hibernate-core</artifactId>\n+\t\t\t<version>5.4.28.Final</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>mysql</groupId>\n+\t\t\t<artifactId>mysql-connector-java</artifactId>\n+\t\t\t<version>8.0.23</version>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.hibernate</groupId>\n+\t\t\t<artifactId>hibernate-validator</artifactId>\n+\t\t\t<version>5.4.3.Final</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n+\t\t</dependency>\n+\n \t</dependencies>\n \n \t<build>\n \t\t<plugins>\n \t\t\t<plugin>\n \t\t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<excludes>\n+\t\t\t\t\t\t<exclude>\n+\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t\t\t\t</exclude>\n+\t\t\t\t\t</excludes>\n+\t\t\t\t</configuration>\n \t\t\t</plugin>\n \t\t</plugins>\n \t</build>\n-</project>\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "dc1d2c02efbbb40b94aba1e08723d863f14202ea",
    "filename": "products.sql",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/products.sql",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/products.sql",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/products.sql?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS products CASCADE;\n+create table if not exists products\n+(\n+    id    bigint auto_increment primary key,\n+    title varchar(128)   null,\n+    cost  decimal(10, 2) null\n+);\n+INSERT INTO products (title, cost)\n+VALUES ('Phone', 20000),\n+       ('Notebook', 30000),\n+       ('Table', 15000),\n+       ('Bookreader', 10000),\n+       ('Powerbank', 3000);"
  },
  {
    "sha": "e566bc8766db02f6699c15beece33c1ca2b6debd",
    "filename": "src/main/java/ru/geekbrains/boot/SpringBootProjectApplication.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/SpringBootProjectApplication.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/SpringBootProjectApplication.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/SpringBootProjectApplication.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -2,10 +2,12 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import ru.geekbrains.boot.services.PrepareDataApp;\n \n @SpringBootApplication\n public class SpringBootProjectApplication {\n \tpublic static void main(String[] args) {\n-\t\tSpringApplication.run(SpringBootProjectApplication.class, args);\n+\t\tPrepareDataApp.forcePrepareData();\n+\t\tSpringApplication.run(ru.geekbrains.boot.SpringBootProjectApplication.class, args);\n \t}\n }"
  },
  {
    "sha": "6dbd63764008107223fdf9e433c3f900643f1b4e",
    "filename": "src/main/java/ru/geekbrains/boot/controllers/ProductController.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/controllers/ProductController.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/controllers/ProductController.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/controllers/ProductController.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,51 @@\n+package ru.geekbrains.boot.controllers;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.boot.model.Product;\n+import ru.geekbrains.boot.services.ProductService;\n+\n+import java.util.Optional;\n+\n+@Controller\n+@RequestMapping(\"/products\")\n+@RequiredArgsConstructor\n+public class ProductController {\n+    private ProductService productService;\n+\n+    public void ProductsController(ProductService productService) {\n+        this.productService = productService;\n+    }\n+\n+    @GetMapping(\"/all\")\n+    public String getAll(Model model) {\n+        model.addAttribute(\"products\", productService.getAll());\n+        return \"all_products\";\n+    }\n+\n+    @GetMapping(\"/{id}\")\n+    public String getProductById(@PathVariable String id, Model model) {\n+        Optional<Product> product = productService.get(Integer.parseInt(id));\n+        if (product.isPresent()) {\n+            model.addAttribute(\"product\", product.get());\n+            return \"product\";\n+        } else {\n+            model.addAttribute(\"product\", id);\n+            return \"product_not_found\";\n+        }\n+    }\n+\n+    @GetMapping(\"/delete/{id}\")\n+    public String deleteProductById(@PathVariable Integer id) {\n+        productService.delete(id);\n+        return \"redirect:/products/all\";\n+    }\n+\n+    @PostMapping(\"/add\")\n+    public String addNewProduct(@ModelAttribute Product product) {\n+        productService.save(product);\n+        return \"redirect:/products/all\";\n+    }\n+}"
  },
  {
    "sha": "f89569ea609fc27cedbbad06d8d532f9ee5b3848",
    "filename": "src/main/java/ru/geekbrains/boot/controllers/StudentController.java",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/controllers/StudentController.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/controllers/StudentController.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/controllers/StudentController.java?ref=27cce8cc48c7ed5bd000601a2bd52331b1c29fea",
    "patch": "@@ -1,38 +0,0 @@\n-package ru.geekbrains.boot.controllers;\n-\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import ru.geekbrains.boot.model.Student;\n-import ru.geekbrains.boot.services.StudentService;\n-\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-@Controller\n-@RequestMapping(\"/students\")\n-@RequiredArgsConstructor\n-public class StudentController {\n-    private final StudentService studentService;\n-\n-    @GetMapping // GET http://localhost:8189/app/students\n-    public String showAll(Model model,\n-                          @RequestParam(required = false, name = \"min_score\") Integer minScore,\n-                          @RequestParam(required = false, name = \"max_score\") Integer maxScore\n-    ) {\n-        model.addAttribute(\"students\", studentService.findAll(minScore, maxScore));\n-        return \"students\";\n-    }\n-\n-    @GetMapping(\"/delete/{id}\")\n-    public String deleteStudentById(@PathVariable Long id, HttpServletResponse response) {\n-        studentService.deleteBydId(id);\n-        return \"redirect:/students\"; // [http://localhost:8189/app]/students\n-    }\n-}"
  },
  {
    "sha": "d133a5a1c95be9256f25abfe7ee6559347893ef9",
    "filename": "src/main/java/ru/geekbrains/boot/model/Product.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/model/Product.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/model/Product.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/model/Product.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.geekbrains.boot.model;\n+\n+import lombok.*;\n+\n+import javax.persistence.*;\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@RequiredArgsConstructor\n+@Entity\n+@Table(name = \"products\")\n+public class Product {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+    @NonNull\n+    private String title;\n+    @NonNull\n+    private float cost;\n+}"
  },
  {
    "sha": "0a303c431f9046e9d216c15054e02e968bb899d4",
    "filename": "src/main/java/ru/geekbrains/boot/model/Student.java",
    "status": "removed",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/model/Student.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/model/Student.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/model/Student.java?ref=27cce8cc48c7ed5bd000601a2bd52331b1c29fea",
    "patch": "@@ -1,12 +0,0 @@\n-package ru.geekbrains.boot.model;\n-\n-import lombok.*;\n-\n-@Data\n-@NoArgsConstructor\n-@AllArgsConstructor\n-public class Student {\n-    private Long id;\n-    private String name;\n-    private int score;\n-}"
  },
  {
    "sha": "104277f3ec27c1e65d155cc369aed412a85e6165",
    "filename": "src/main/java/ru/geekbrains/boot/repositories/ProductDatabaseRepository.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/repositories/ProductDatabaseRepository.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/repositories/ProductDatabaseRepository.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/repositories/ProductDatabaseRepository.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,93 @@\n+package ru.geekbrains.boot.repositories;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Component;\n+import ru.geekbrains.boot.services.PrepareDataApp;\n+import ru.geekbrains.boot.model.Product;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.List;\n+\n+@Component\n+@Primary\n+public class ProductDatabaseRepository implements ProductRepository {\n+\n+    private static SessionFactory factory;\n+\n+    @PostConstruct\n+    public static void init() {\n+        PrepareDataApp.forcePrepareData();\n+        factory = new Configuration()\n+                .configure(\"hibernate.cfg.xml\")\n+                .buildSessionFactory();\n+    }\n+\n+    @Override\n+    public void create(String title, float cost) {\n+        try (Session session = factory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product product = new Product(title, cost);\n+            session.save(product);\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+    @Override\n+    public Product get(int id) {\n+        Product product;\n+        try (Session session = factory.getCurrentSession()) {\n+            session.beginTransaction();\n+            product = session.get(Product.class, id);\n+            session.getTransaction().commit();\n+        }\n+        return product;\n+    }\n+\n+    @Override\n+    public List<Product> getAll() {\n+        List<Product> products;\n+        try (Session session = factory.getCurrentSession()) {\n+            session.beginTransaction();\n+            products = session.createQuery(\"from Product\", Product.class).getResultList();\n+            session.getTransaction().commit();\n+        }\n+        return products;\n+    }\n+\n+    @Override\n+    public void update(int id, String title, float cost) {\n+        try (Session session = factory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product product = session.get(Product.class, id);\n+            if (product != null) {\n+                product.setTitle(title);\n+                product.setCost(cost);\n+            }\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+    @Override\n+    public void delete(int id) {\n+        try (Session session = factory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product product = session.get(Product.class, id);\n+            if (product != null) {\n+                session.delete(product);\n+            }\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+    @Override\n+    public void save(Product product) {\n+        try (Session session = factory.getCurrentSession()) {\n+            session.beginTransaction();\n+            session.save(product);\n+            session.getTransaction().commit();\n+        }\n+    }\n+}"
  },
  {
    "sha": "6a39ba51354b1f7ec8c76389a79e196aa773e510",
    "filename": "src/main/java/ru/geekbrains/boot/repositories/ProductInMemoryRepository.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/repositories/ProductInMemoryRepository.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/repositories/ProductInMemoryRepository.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/repositories/ProductInMemoryRepository.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,72 @@\n+package ru.geekbrains.boot.repositories;\n+\n+import org.springframework.stereotype.Component;\n+import ru.geekbrains.boot.model.Product;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.*;\n+\n+@Component\n+public class ProductInMemoryRepository implements ProductRepository {\n+    private List<Product> products;\n+\n+    @PostConstruct\n+    public void init() {\n+        Random random = new Random();\n+        products = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            products.add(Product.builder()\n+                    .id(i)\n+                    .title(\"Product \" + i)\n+                    .cost((float) Math.abs(random.nextInt(100) * 1.2))\n+                    .build());\n+        }\n+    }\n+\n+\n+    @Override\n+    public void create(String title, float cost) {\n+        save(Product.builder()\n+                .id(products.size())\n+                .title(title)\n+                .cost(cost)\n+                .build()\n+        );\n+    }\n+\n+    @Override\n+    public Product get(int id) {\n+        for (Product product : products) {\n+            if (product.getId() == id) {\n+                return product;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public List<Product> getAll() {\n+        products.sort(Comparator.comparingInt(Product::getId));\n+        return Collections.unmodifiableList(products);\n+    }\n+\n+    @Override\n+    public void update(int id, String title, float cost) {\n+        Product product = get(id);\n+        if (product != null) {\n+            product.setTitle(title);\n+            product.setCost(cost);\n+        }\n+    }\n+\n+    @Override\n+        public void delete ( int id){\n+            products.removeIf(product -> product.getId() == id);\n+        }\n+\n+\n+    @Override\n+    public void save(Product product) {\n+            products.add(product);\n+    }\n+}"
  },
  {
    "sha": "81e5bf13479d2b8b43ab369cfe0883f0541e9a1e",
    "filename": "src/main/java/ru/geekbrains/boot/repositories/ProductRepository.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/repositories/ProductRepository.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/repositories/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/repositories/ProductRepository.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.geekbrains.boot.repositories;\n+\n+import ru.geekbrains.boot.model.Product;\n+\n+import java.util.List;\n+\n+public interface ProductRepository {\n+    void create(String title, float cost);\n+\n+    Product get(int id);\n+\n+    List<Product> getAll();\n+\n+    void update(int id, String title, float cost);\n+\n+    void delete(int id);\n+\n+    void save(Product product);\n+}"
  },
  {
    "sha": "60e03432a358b9a8b75d51448d97ac35207108f7",
    "filename": "src/main/java/ru/geekbrains/boot/repositories/StudentInMemoryRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 50,
    "changes": 50,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/repositories/StudentInMemoryRepository.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/repositories/StudentInMemoryRepository.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/repositories/StudentInMemoryRepository.java?ref=27cce8cc48c7ed5bd000601a2bd52331b1c29fea",
    "patch": "@@ -1,50 +0,0 @@\n-package ru.geekbrains.boot.repositories;\n-\n-import org.springframework.stereotype.Component;\n-import ru.geekbrains.boot.exceptions.ResourceNotFoundException;\n-import ru.geekbrains.boot.model.Student;\n-\n-import javax.annotation.PostConstruct;\n-import java.util.*;\n-\n-@Component\n-public class StudentInMemoryRepository {\n-    private List<Student> students;\n-\n-    @PostConstruct\n-    public void init() {\n-        this.students = new ArrayList<>(Arrays.asList(\n-                new Student(1L, \"Bob\", 70),\n-                new Student(2L, \"John\", 80),\n-                new Student(3L, \"Jack\", 60)\n-        ));\n-    }\n-\n-    public Student saveOrUpdate(Student s) {\n-        if (s.getId() != null) {\n-            for (int i = 0; i < students.size(); i++) {\n-                if (students.get(i).getId().equals(s.getId())) {\n-                    students.set(i, s);\n-                    return s;\n-                }\n-            }\n-        }\n-\n-        Long newId = students.stream().mapToLong(Student::getId).max().orElseGet(() -> 0L) + 1L;\n-        s.setId(newId);\n-        students.add(s);\n-        return s;\n-    }\n-\n-    public List<Student> findAll() {\n-        return Collections.unmodifiableList(students);\n-    }\n-\n-    public Optional<Student> findById(Long id) {\n-        return students.stream().filter(s -> s.getId().equals(id)).findFirst();\n-    }\n-\n-    public void deleteById(Long id) {\n-        students.removeIf(s -> s.getId().equals(id));\n-    }\n-}"
  },
  {
    "sha": "f8a139bb9049f382a0609fabc2bcde7d7f6e4cbc",
    "filename": "src/main/java/ru/geekbrains/boot/services/PrepareDataApp.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/services/PrepareDataApp.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/services/PrepareDataApp.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/services/PrepareDataApp.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,40 @@\n+package ru.geekbrains.boot.services;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.stream.Collectors;\n+\n+public class PrepareDataApp {\n+    public static void forcePrepareData() {\n+        SessionFactory factory = new Configuration()\n+                .configure(\"hibernate.cfg.xml\")\n+                .buildSessionFactory();\n+        Session session = null;\n+        try {\n+            String sql = Files.lines(Paths.get(\"full.sql\")).collect(Collectors.joining(\" \"));\n+            String[] strings = sql.split(\";\");\n+            session = factory.getCurrentSession();\n+            session.beginTransaction();\n+            for (String string : strings) {\n+                session.createNativeQuery(string).executeUpdate();\n+            }\n+            session.getTransaction().commit();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        } finally {\n+            factory.close();\n+            if (session != null) {\n+                session.close();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        forcePrepareData();\n+    }\n+}"
  },
  {
    "sha": "9d00ef216bb3b84805733b7f33646a9352268cbc",
    "filename": "src/main/java/ru/geekbrains/boot/services/ProductService.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/services/ProductService.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/java/ru/geekbrains/boot/services/ProductService.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/services/ProductService.java?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,63 @@\n+package ru.geekbrains.boot.services;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import ru.geekbrains.boot.model.Product;\n+import ru.geekbrains.boot.repositories.ProductRepository;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Component\n+@Service\n+@RequiredArgsConstructor\n+public class ProductService {\n+\n+    private ProductRepository productRepository;\n+\n+    @Autowired\n+    public void setProductRepository(ProductRepository productRepository) {\n+        this.productRepository = productRepository;\n+    }\n+\n+    public void create(String title, float cost) {\n+        productRepository.create(title, cost);\n+    }\n+\n+    public void save(Product product) {\n+        productRepository.save(product);\n+    }\n+\n+    public Optional<Product> get(int id) {\n+        return Optional.ofNullable(productRepository.get(id));\n+    }\n+\n+    public List<Product> getAll() {\n+        return productRepository.getAll();\n+    }\n+\n+    public void update(int id, String title, float cost) {\n+        productRepository.update(id, title, cost);\n+    }\n+\n+    public void delete(int id) {\n+        productRepository.delete(id);\n+    }\n+\n+    public int count() {\n+        return getAll().size();\n+    }\n+\n+\n+\n+    public float averageCost() {\n+        List<Product> products = getAll();\n+        float avg = 0;\n+        for (Product product : products) {\n+            avg += product.getCost();\n+        }\n+        return avg;\n+    }\n+}"
  },
  {
    "sha": "f36fbdb8e375c29a9510de3193cd962989035c57",
    "filename": "src/main/java/ru/geekbrains/boot/services/StudentService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/services/StudentService.java",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/27cce8cc48c7ed5bd000601a2bd52331b1c29fea/src/main/java/ru/geekbrains/boot/services/StudentService.java",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/java/ru/geekbrains/boot/services/StudentService.java?ref=27cce8cc48c7ed5bd000601a2bd52331b1c29fea",
    "patch": "@@ -1,45 +0,0 @@\n-package ru.geekbrains.boot.services;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.springframework.stereotype.Component;\n-import org.springframework.stereotype.Service;\n-import ru.geekbrains.boot.model.Student;\n-import ru.geekbrains.boot.repositories.StudentInMemoryRepository;\n-\n-import javax.swing.text.html.Option;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-@Service\n-@RequiredArgsConstructor\n-public class StudentService {\n-    private final StudentInMemoryRepository studentInMemoryRepository;\n-\n-    public Optional<Student> findById(Long id) {\n-        return studentInMemoryRepository.findById(id);\n-    }\n-\n-    public List<Student> findAll() {\n-        return studentInMemoryRepository.findAll();\n-    }\n-\n-    public List<Student> findAll(Integer minScore, Integer maxScore) {\n-        List<Student> out = findAll();\n-        if (minScore != null) {\n-            out = out.stream().filter(s -> s.getScore() >= minScore).collect(Collectors.toList());\n-        }\n-        if (maxScore != null) {\n-            out = out.stream().filter(s -> s.getScore() <= maxScore).collect(Collectors.toList());\n-        }\n-        return out;\n-    }\n-\n-    public Student saveOrUpdate(Student s) {\n-        return studentInMemoryRepository.saveOrUpdate(s);\n-    }\n-\n-    public void deleteBydId(Long id) {\n-        studentInMemoryRepository.deleteById(id);\n-    }\n-}"
  },
  {
    "sha": "c6634c6ef238340a7edb8147fbe3f54611f8db68",
    "filename": "src/main/resources/hibernate.cfg.xml",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/hibernate.cfg.xml",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/hibernate.cfg.xml",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/resources/hibernate.cfg.xml?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,18 @@\n+<!DOCTYPE hibernate-configuration PUBLIC\n+        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\n+\n+<hibernate-configuration>\n+    <session-factory>\n+        <property name=\"connection.driver_class\">com.mysql.cj.jdbc.Driver</property>\n+        <property name=\"connection.url\">jdbc:mysql://localhost:3306/shop</property>\n+        <property name=\"connection.username\">root</property>\n+        <property name=\"connection.password\">root</property>\n+        <property name=\"connection.pool_size\">8</property>\n+        <property name=\"dialect\">org.hibernate.dialect.MySQLDialect</property>\n+        <property name=\"show_sql\">true</property>\n+        <property name=\"current_session_context_class\">thread</property>\n+\n+        <mapping class=\"ru.geekbrains.boot.model.Product\"/>\n+    </session-factory>\n+</hibernate-configuration>\n\\ No newline at end of file"
  },
  {
    "sha": "ce5b2ac7b286357f40ddd9e1032ac0eb08c8d8c6",
    "filename": "src/main/resources/templates/all_products.html",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/templates/all_products.html",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/templates/all_products.html",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/resources/templates/all_products.html?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,51 @@\n+<!DOCTYPE html>\n+\n+<html xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n+\n+<head>\n+    <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\"/>\n+    <title>Spring MVC WebApp</title>\n+\n+    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" rel=\"stylesheet\">\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n+    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\n+</head>\n+\n+<body>\n+<div class=\"container\">\n+    <h1>Список товаров:</h1>\n+    <table class=\"table table-success table-striped\" th:if=\"${products.size() > 0}\">\n+        <thead>\n+        <tr>\n+            <td>Id</td>\n+            <td>Название</td>\n+            <td>Цена</td>\n+            <td>Действия</td>\n+        </tr>\n+        </thead>\n+        <tbody>\n+\n+        <tr th:each=\"p : ${products}\">\n+            <td><a th:href=\"@{'/products/'+ ${p.id}}\"> <span th:text=\"${p.id}\"></span> </a></td>\n+            <td th:text=\"${p.title}\"></td>\n+            <td th:text=\"${p.cost}\"></td>\n+            <td><a class=\"btn btn-danger\" th:href=\"@{'/products/remove/' + ${p.id}}\">Удалить</a></td>\n+        </tr>\n+        </tbody>\n+    </table>\n+    <span th:unless=\"${products.size() > 0}\">Товаров нет</span>\n+    <span th:if=\"${products.size() > 0}\" th:text=\"'Количество товаров: ' + ${products.size()}\"></span>\n+    <form method=\"post\" th:action=\"@{'/products/add'}\">\n+        <label>title</label>\n+        <label>\n+            <input name=\"title\" type=\"text\">\n+        </label>\n+        <label>cost</label>\n+        <label>\n+            <input name=\"cost\" step=\"0.01\" type=\"number\">\n+        </label>\n+        <button class=\"btn btn-primary\" type=\"submit\">Создать</button>\n+    </form>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "995aa8a6809a8a753ee0d89a16f6b081637d2468",
    "filename": "src/main/resources/templates/product_not_found.html",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/templates/product_not_found.html",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/templates/product_not_found.html",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/resources/templates/product_not_found.html?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -0,0 +1,17 @@\n+<!DOCTYPE html>\n+<html xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n+\n+<head>\n+    <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\"/>\n+    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" rel=\"stylesheet\">\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n+    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\n+    <title>Product not found</title>\n+</head>\n+\n+<body>\n+<div class=\"alert-danger\">\n+    <span th:text=\"'Product with id = ' + ${product} + ' not found'\"></span>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "c9dbf65a2b5d987cf9c1134442eeeecb372c8645",
    "filename": "src/main/resources/templates/products.html",
    "status": "renamed",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/PaulFrere/spring-boot-project/blob/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/templates/products.html",
    "raw_url": "https://github.com/PaulFrere/spring-boot-project/raw/b4d387a75fd733b89040e3da49dde9e906986fdd/src/main/resources/templates/products.html",
    "contents_url": "https://api.github.com/repos/PaulFrere/spring-boot-project/contents/src/main/resources/templates/products.html?ref=b4d387a75fd733b89040e3da49dde9e906986fdd",
    "patch": "@@ -3,7 +3,7 @@\n \n <head>\n     <meta charset=\"utf-8\"/>\n-    <title>Students</title>\n+    <title>Products</title>\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n     <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\n@@ -13,28 +13,28 @@\n \n <div class=\"container\">\n     <h1>Фильтр</h1>\n-    <form method=\"get\" th:action=\"@{'/students'}\">\n-        <input class=\"form-control\" th:value=\"${param.min_score != null ? param.min_score : ''}\" type=\"number\" placeholder=\"Минимальный балл\" name=\"min_score\"/>\n-        <input class=\"form-control\" th:value=\"${param.max_score != null ? param.max_score : ''}\" type=\"number\" placeholder=\"Максимальный балл\" name=\"max_score\"/>\n+    <form method=\"get\" th:action=\"@{'/products'}\">\n+        <input class=\"form-control\" th:value=\"${param.min_cost != null ? param.min_cost : ''}\" type=\"number\" placeholder=\"Минимальная цена\" name=\"min_cost\"/>\n+        <input class=\"form-control\" th:value=\"${param.max_cost != null ? param.max_cost : ''}\" type=\"number\" placeholder=\"Максимальная цена\" name=\"max_cost\"/>\n         <button class=\"btn btn-primary\" type=\"submit\">Найти</button>\n     </form>\n-    <h1>Список студентов</h1>\n+    <h1>Список продуктов</h1>\n     <table class=\"table table-hover\">\n         <thead class=\"thead-dark\">\n         <tr>\n             <th>ID</th>\n-            <th>Имя</th>\n-            <th>Средний балл</th>\n+            <th>Наименование</th>\n+            <th>Средния цена</th>\n             <th>Действия</th>\n         </tr>\n         </thead>\n         <tbody>\n-        <tr th:each=\"s : ${students}\">\n-            <td th:text=\"${s.id}\"/>\n-            <td th:text=\"${s.name}\"/>\n-            <td th:text=\"${s.score}\"/>\n+        <tr th:each=\"p : ${products}\">\n+            <td th:text=\"${p.id}\"/>\n+            <td th:text=\"${p.title}\"/>\n+            <td th:text=\"${p.cost}\"/>\n             <td>\n-                <a class=\"btn btn-danger\" th:href=\"@{'/students/delete/' + ${s.id}}\">Удалить</a>\n+                <a class=\"btn btn-danger\" th:href=\"@{'/products/delete/' + ${p.id}}\">Удалить</a>\n             </td>\n         </tr>\n         </tbody>",
    "previous_filename": "src/main/resources/templates/students.html"
  }
]
