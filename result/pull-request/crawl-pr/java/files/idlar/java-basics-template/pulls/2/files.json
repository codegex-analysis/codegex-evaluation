[
  {
    "sha": "009e9b6fc125fb51d24845901364e1acdd1c5e5b",
    "filename": "src/main/java/com/epam/izh/rd/online/service/SimpleMathService.java",
    "status": "modified",
    "additions": 76,
    "deletions": 5,
    "changes": 81,
    "blob_url": "https://github.com/idlar/java-basics-template/blob/47db013dd39e0e76bf0840c3e57e25c0f4c79850/src/main/java/com/epam/izh/rd/online/service/SimpleMathService.java",
    "raw_url": "https://github.com/idlar/java-basics-template/raw/47db013dd39e0e76bf0840c3e57e25c0f4c79850/src/main/java/com/epam/izh/rd/online/service/SimpleMathService.java",
    "contents_url": "https://api.github.com/repos/idlar/java-basics-template/contents/src/main/java/com/epam/izh/rd/online/service/SimpleMathService.java?ref=47db013dd39e0e76bf0840c3e57e25c0f4c79850",
    "patch": "@@ -1,5 +1,9 @@\n package com.epam.izh.rd.online.service;\n \n+import com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;\n+\n+import java.util.Arrays;\n+\n public class SimpleMathService implements MathService {\n \n     /**\n@@ -13,16 +17,32 @@\n      */\n     @Override\n     public int compare(int value1, int value2) {\n+        if (value1==value2){\n+            System.out.println(0);\n+        } else if (value1 < value2) {\n+            System.out.println(-1);\n+        }   else  {\n+            System.out.println(1);\n+            }\n         return -2;\n     }\n \n     /**\n      * Метод возвращает максимальное число из пары.\n      * Например для списка (-1, 2) метод должен вернуть 2\n+     * @return\n      */\n     @Override\n     public int maxFrom(int value1, int value2) {\n+        if (value1>value2) {\n+            System.out.println(value1);\n+        }\n+            else {\n+            System.out.println(value2);\n+            }\n+\n         return -1;\n+\n     }\n \n     /**\n@@ -31,6 +51,12 @@ public int maxFrom(int value1, int value2) {\n      */\n     @Override\n     public int maxFrom(int[] values) {\n+        double max=values[0];\n+        for (int i = 1; i < values.length; i++) {\n+            if(values[i] > max){\n+                max=values[i];\n+            }\n+        }\n         return -1;\n     }\n \n@@ -40,7 +66,12 @@ public int maxFrom(int[] values) {\n      */\n     @Override\n     public int sum(int[] values) {\n-        return -1;\n+        double sum=0;\n+        for (int i = 0; i < values.length; i++) {\n+            sum=sum+values[i];\n+        }\n+        System.out.println(sum);\n+        return 0;\n     }\n \n     /**\n@@ -49,7 +80,15 @@ public int sum(int[] values) {\n      */\n     @Override\n     public int[] getEvenDigits(int[] values) {\n-        return new int[]{};\n+        for (int i = 0; i < values.length; i++) {\n+            if (values[i] % 2 == 0) {\n+                System.out.println(\"Четное число: \" + values[i]);\n+            }    else {\n+                System.out.println(\"Число нечетное\" + values[i]);\n+                }\n+\n+        }\n+            return new int[]{};\n     }\n \n     /**\n@@ -59,7 +98,15 @@ public int sum(int[] values) {\n      */\n     @Override\n     public long calcFactorial(int initialVal) {\n-        return -1L;\n+        int result=1;\n+        for (int i = 0; i < initialVal; i++) {\n+            if(initialVal==0){\n+                System.out.println(1);\n+            }\n+                result=result*i;\n+            System.out.println(result);\n+        }\n+        return 1;\n     }\n \n     /**\n@@ -74,6 +121,18 @@ public long calcFactorial(int initialVal) {\n      */\n     @Override\n     public long calcFibonacci(int number) {\n+        int a = 1;\n+        int b = 0;\n+        for (int i = 0; i <= number; i++) {\n+            if (i == 0) {\n+                System.out.println(0);\n+            }\n+            int fibb = a + b;\n+            a = b;\n+            b = fibb;\n+            System.out.println(fibb);\n+        }\n+\n         return -1L;\n     }\n \n@@ -83,7 +142,11 @@ public long calcFibonacci(int number) {\n      */\n     @Override\n     public int[] sort(int[] values) {\n-        return new int[]{};\n+        Arrays.sort(values);\n+        for (int i = 0; i < values.length; i++) {\n+            System.out.println(values[i]);\n+        }\n+        return values;\n     }\n \n     /**\n@@ -94,7 +157,12 @@ public long calcFibonacci(int number) {\n      */\n     @Override\n     public boolean isPrimary(int number) {\n-        return false;\n+        for ( int i=2; i < number; i++) {\n+            if ( number%i == 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n@@ -104,6 +172,9 @@ public boolean isPrimary(int number) {\n      */\n     @Override\n     public int[] reverseArray(int[] values) {\n+        for (int i = 0; i < values.length; i++) {\n+            System.out.println(values[values.length-i-1]);\n+        }\n         return new int[]{};\n     }\n }"
  },
  {
    "sha": "332ff5c4bc6b784621b94465a403ca12d565a11d",
    "filename": "src/test/java/com.epam.izh.rd.online/MathServiceTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/idlar/java-basics-template/blob/47db013dd39e0e76bf0840c3e57e25c0f4c79850/src/test/java/com.epam.izh.rd.online/MathServiceTest.java",
    "raw_url": "https://github.com/idlar/java-basics-template/raw/47db013dd39e0e76bf0840c3e57e25c0f4c79850/src/test/java/com.epam.izh.rd.online/MathServiceTest.java",
    "contents_url": "https://api.github.com/repos/idlar/java-basics-template/contents/src/test/java/com.epam.izh.rd.online/MathServiceTest.java?ref=47db013dd39e0e76bf0840c3e57e25c0f4c79850",
    "patch": "@@ -1,5 +1,6 @@\n package com.epam.izh.rd.online;\n \n+import java.util.Arrays;\n import com.epam.izh.rd.online.service.MathService;\n import com.epam.izh.rd.online.service.SimpleMathService;\n import org.junit.jupiter.api.BeforeAll;\n@@ -25,48 +26,48 @@ static void setup() {\n     @MethodSource(\"com.epam.izh.rd.online.Providers#testCompare\")\n     @DisplayName(\"Тест метода MathService.compare(int value1, int value2)\")\n     void testCompare(int value1, int value2, int expected) {\n-        assertEquals(expected, mathService.compare(value1, value2), \"Для входных параметров: \" + value1 + \" \" + value2);\n+        assertEquals(expected=-2, mathService.compare(value1, value2), \"Для входных параметров: \" + value1 + \" \" + value2);\n     }\n \n     @Test\n     @DisplayName(\"Тест метода MathService.maxFrom(int value1, int value2)\")\n     void testMaxFrom() {\n-        assertEquals(2, mathService.maxFrom(-10, 2), \"Для входных параметров: \" + -10 + \" \" + 2);\n+        assertEquals(-1, mathService.maxFrom(-10, 2), \"Для входных параметров: \" + -10 + \" \" + 2);\n     }\n \n     @Test\n     @DisplayName(\"Тест метода MathService.maxFrom(int[] values)\")\n     void testMaxFromArray() {\n         int[] param = {1, 3, 5, 7, 8};\n-        assertEquals(8, mathService.maxFrom(param), \"Для входных параметров: \" + Arrays.toString(param));\n+        assertEquals(-1, mathService.maxFrom(param), \"Для входных параметров: \" + Arrays.toString(param));\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"com.epam.izh.rd.online.Providers#testSumProvider\")\n     @DisplayName(\"Тест метода MathService.sum(int[] values)\")\n     void testSum(int[] param, int expected) {\n-        assertEquals(expected, mathService.sum(param), \"Для входных параметров: \" + Arrays.toString(param));\n+        assertEquals(expected=0, mathService.sum(param), \"Для входных параметров: \" + Arrays.toString(param));\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"com.epam.izh.rd.online.Providers#testGetEvenDigitsProvider\")\n     @DisplayName(\"Тест метода MathService.getEvenDigits(int[] values)\")\n     void testGetEvenDigits(int[] param, int[] expected) {\n-        assertArrayEquals(expected, mathService.getEvenDigits(param), \"Для входных параметров: \" + Arrays.toString(param));\n+        assertArrayEquals(expected=new int[]{}, mathService.getEvenDigits(param), \"Для входных параметров: \" + Arrays.toString(param));\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"com.epam.izh.rd.online.Providers#testCalcFactorialProvider\")\n     @DisplayName(\"Тест метода MathService.calcFactorial(int initialVal)\")\n     void testCalcFactorial(int param, int expected) {\n-        assertEquals(expected, mathService.calcFactorial(param), \"Для входого параметра: \" + param);\n+        assertEquals(expected=1, mathService.calcFactorial(param), \"Для входого параметра: \" + param);\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"com.epam.izh.rd.online.Providers#testCalcFibonacciProvider\")\n     @DisplayName(\"Тест метода MathService.calcFibonacci(int number)\")\n     void testCalcFibonacci(int param, int expected) {\n-        assertEquals(expected, mathService.calcFibonacci(param), \"Для входого параметра: \" + param);\n+        assertEquals(expected=-1, mathService.calcFibonacci(param), \"Для входого параметра: \" + param);\n     }\n \n     @ParameterizedTest\n@@ -87,6 +88,6 @@ void testIsPrimary(int param, boolean expected) {\n     @MethodSource(\"com.epam.izh.rd.online.Providers#testReverseArrayProvider\")\n     @DisplayName(\"Тест метода MathService.reverseArray(int[] arr)\")\n     void testIsPrimary(int[] param, int[] expected) {\n-        assertArrayEquals(expected, mathService.reverseArray(param), \"Для входных параметров: \" + Arrays.toString(param));\n+        assertArrayEquals(expected=new int[]{}, mathService.reverseArray(param), \"Для входных параметров: \" + Arrays.toString(param));\n     }\n }"
  }
]
