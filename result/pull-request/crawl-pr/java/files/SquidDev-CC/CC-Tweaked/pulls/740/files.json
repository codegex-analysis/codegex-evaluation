[
  {
    "sha": "4f7c9aca1ca4697c06559eb3e48661ad7e89e403",
    "filename": "src/test/java/dan200/computercraft/core/terminal/TerminalTest.java",
    "status": "added",
    "additions": 477,
    "deletions": 0,
    "changes": 477,
    "blob_url": "https://github.com/SquidDev-CC/CC-Tweaked/blob/f019920a43c8f66a2f878c304805345a27551a40/src/test/java/dan200/computercraft/core/terminal/TerminalTest.java",
    "raw_url": "https://github.com/SquidDev-CC/CC-Tweaked/raw/f019920a43c8f66a2f878c304805345a27551a40/src/test/java/dan200/computercraft/core/terminal/TerminalTest.java",
    "contents_url": "https://api.github.com/repos/SquidDev-CC/CC-Tweaked/contents/src/test/java/dan200/computercraft/core/terminal/TerminalTest.java?ref=f019920a43c8f66a2f878c304805345a27551a40",
    "patch": "@@ -0,0 +1,477 @@\n+package dan200.computercraft.core.terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n+\n+class TerminalTest\n+{\n+    private static class MockOnChangedCallback implements Runnable {\n+        private int timesCalled = 0;\n+\n+        @Override\n+        public void run()\n+        {\n+            timesCalled++;\n+        }\n+\n+        public void assertCalledTimes(int expectedTimesCalled) {\n+            assertEquals(expectedTimesCalled, timesCalled, \"onChanged callback was not called the correct number of times\");\n+        }\n+\n+        public void assertNotCalled() {\n+            assertEquals(0, timesCalled, \"onChanged callback should not have been called\");\n+        }\n+\n+        public void mockClear() {\n+            this.timesCalled = 0;\n+        }\n+    }\n+\n+    private static class TerminalTestHelper {\n+        private final List<String> textLines;\n+        private final List<String> textColourLines;\n+        private final List<String> backgroundColourLines;\n+\n+        public TerminalTestHelper( Terminal terminal ) {\n+            textLines = new ArrayList<>( terminal.getHeight() );\n+            textColourLines = new ArrayList<>( terminal.getHeight() );\n+            backgroundColourLines = new ArrayList<>(terminal.getHeight());\n+\n+            for ( int i = 0; i < terminal.getHeight(); i++ ) {\n+                textLines.add(terminal.getLine(i).toString());\n+                textColourLines.add(terminal.getTextColourLine(i).toString());\n+                backgroundColourLines.add(terminal.getBackgroundColourLine(i).toString());\n+            }\n+        }\n+\n+        public TerminalTestHelper assertTextMatches( String[] snapshot ) {\n+            List<String> snapshotLines = new ArrayList<>(Arrays.asList(snapshot));\n+            assertLinesMatch(snapshotLines, textLines);\n+            return this;\n+        }\n+\n+        public TerminalTestHelper assertTextColourMatches( String[] snapshot ) {\n+            List<String> snapshotLines = new ArrayList<>(Arrays.asList(snapshot));\n+            assertLinesMatch(snapshotLines, textColourLines);\n+            return this;\n+        }\n+\n+        public TerminalTestHelper assertBackgroundColourMatches( String[] snapshot ) {\n+            List<String> snapshotLines = new ArrayList<>(Arrays.asList(snapshot));\n+            assertLinesMatch(snapshotLines, backgroundColourLines);\n+            return this;\n+        }\n+    }\n+\n+    @Test\n+    void testCreation()\n+    {\n+        Terminal terminal = new Terminal( 16, 9 );\n+        assertEquals( 16, terminal.getWidth() );\n+        assertEquals( 9, terminal.getHeight() );\n+    }\n+\n+    @Test\n+    void testSetAndGetLine()\n+    {\n+        Terminal terminal = new Terminal( 16, 9 );\n+        terminal.setLine(1, \"ABCDEFGHIJKLMNOP\", \"0123456789abcdef\", \"fedcba9876543210\");\n+        assertEquals( \"ABCDEFGHIJKLMNOP\", terminal.getLine(1).toString() );\n+        assertEquals( \"0123456789abcdef\", terminal.getTextColourLine(1).toString() );\n+        assertEquals( \"fedcba9876543210\", terminal.getBackgroundColourLine(1).toString() );\n+    }\n+\n+    @Test\n+    void testDefaults()\n+    {\n+        Terminal terminal = new Terminal( 16, 9 );\n+        assertEquals( 0, terminal.getCursorX() );\n+        assertEquals( 0, terminal.getCursorY() );\n+        assertFalse(terminal.getCursorBlink());\n+        assertEquals(0, terminal.getTextColour());\n+        assertEquals(15, terminal.getBackgroundColour());\n+    }\n+\n+    @Test\n+    void testDefaultTextBuffer()\n+    {\n+        new TerminalTestHelper(new Terminal(4, 3))\n+            .assertTextMatches( new String[] {\n+                \"    \",\n+                \"    \",\n+                \"    \",\n+            } );\n+    }\n+\n+    @Test\n+    void testDefaultTextColourBuffer()\n+    {\n+        new TerminalTestHelper(new Terminal(4, 3))\n+            .assertTextColourMatches( new String[] {\n+                \"0000\",\n+                \"0000\",\n+                \"0000\",\n+            } );\n+    }\n+\n+    @Test\n+    void testDefaultBackgroundColourBuffer()\n+    {\n+        new TerminalTestHelper(new Terminal(4, 3))\n+            .assertBackgroundColourMatches( new String[] {\n+                \"ffff\",\n+                \"ffff\",\n+                \"ffff\",\n+            } );\n+    }\n+\n+    @Test\n+    void testResizeHeight()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+        terminal.resize(4, 5);\n+\n+        new TerminalTestHelper( terminal )\n+            .assertTextMatches( new String[] {\n+                \"    \",\n+                \"    \",\n+                \"    \",\n+                \"    \",\n+                \"    \",\n+            } ).assertTextColourMatches( new String[] {\n+                \"0000\",\n+                \"0000\",\n+                \"0000\",\n+                \"0000\",\n+                \"0000\",\n+            } ).assertBackgroundColourMatches( new String[] {\n+                \"ffff\",\n+                \"ffff\",\n+                \"ffff\",\n+                \"ffff\",\n+                \"ffff\",\n+            } );\n+\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testResizeWidth()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+        terminal.resize(6, 3);\n+\n+        new TerminalTestHelper( terminal )\n+            .assertTextMatches( new String[] {\n+                \"      \",\n+                \"      \",\n+                \"      \",\n+            } ).assertTextColourMatches( new String[] {\n+                \"000000\",\n+                \"000000\",\n+                \"000000\",\n+            } ).assertBackgroundColourMatches( new String[] {\n+                \"ffffff\",\n+                \"ffffff\",\n+                \"ffffff\",\n+            } );\n+\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testResizeWidthAndHeight()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+        terminal.resize(6, 4);\n+\n+        new TerminalTestHelper( terminal )\n+        .assertTextMatches( new String[] {\n+            \"      \",\n+            \"      \",\n+            \"      \",\n+            \"      \",\n+        } ).assertTextColourMatches( new String[] {\n+            \"000000\",\n+            \"000000\",\n+            \"000000\",\n+            \"000000\",\n+        } ).assertBackgroundColourMatches( new String[] {\n+            \"ffffff\",\n+            \"ffffff\",\n+            \"ffffff\",\n+            \"ffffff\",\n+        } );\n+\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testResizeSmaller()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+        terminal.resize(2, 2);\n+\n+        new TerminalTestHelper( terminal )\n+        .assertTextMatches( new String[] {\n+            \"  \",\n+            \"  \",\n+        } ).assertTextColourMatches( new String[] {\n+            \"00\",\n+            \"00\",\n+        } ).assertBackgroundColourMatches( new String[] {\n+            \"ff\",\n+            \"ff\",\n+        } );\n+\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testResizeWithSameDimensions()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+        terminal.resize(4, 3);\n+\n+        new TerminalTestHelper( terminal )\n+        .assertTextMatches( new String[] {\n+            \"    \",\n+            \"    \",\n+            \"    \",\n+        } ).assertTextColourMatches( new String[] {\n+            \"0000\",\n+            \"0000\",\n+            \"0000\",\n+        } ).assertBackgroundColourMatches( new String[] {\n+            \"ffff\",\n+            \"ffff\",\n+            \"ffff\",\n+        } );\n+\n+        mockOnChangedCallback.assertNotCalled();\n+    }\n+\n+    @Test\n+    void testSetAndGetCursorPos()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setCursorPos(2, 1);\n+\n+        assertEquals(2, terminal.getCursorX());\n+        assertEquals(1, terminal.getCursorY());\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testSetCursorPosUnchanged()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setCursorPos(2, 1);\n+        mockOnChangedCallback.mockClear();\n+        terminal.setCursorPos(2, 1);\n+\n+        assertEquals(2, terminal.getCursorX());\n+        assertEquals(1, terminal.getCursorY());\n+        mockOnChangedCallback.assertNotCalled();\n+    }\n+\n+    @Test\n+    void testSetCursorBlink()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setCursorBlink(true);\n+\n+        assertTrue(terminal.getCursorBlink());\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testSetCursorBlinkUnchanged()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setCursorBlink(true);\n+        mockOnChangedCallback.mockClear();\n+        terminal.setCursorBlink(true);\n+\n+        assertTrue(terminal.getCursorBlink());\n+        mockOnChangedCallback.assertNotCalled();\n+    }\n+\n+    @Test\n+    void testSetTextColour()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setTextColour(5);\n+\n+        assertEquals(terminal.getTextColour(), 5);\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testSetTextColourUnchanged()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setTextColour(5);\n+        mockOnChangedCallback.mockClear();\n+        terminal.setTextColour(5);\n+\n+        assertEquals(terminal.getTextColour(), 5);\n+        mockOnChangedCallback.assertNotCalled();\n+    }\n+\n+    @Test\n+    void testSetBackgroundColour()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setBackgroundColour(5);\n+\n+        assertEquals(terminal.getBackgroundColour(), 5);\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testSetBackgroundColourUnchanged()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setBackgroundColour(5);\n+        mockOnChangedCallback.mockClear();\n+        terminal.setBackgroundColour(5);\n+\n+        assertEquals(terminal.getBackgroundColour(), 5);\n+        mockOnChangedCallback.assertNotCalled();\n+    }\n+\n+    @Test\n+    void testBlitFromOrigin()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.blit(\"test\", \"1234\", \"abcd\");\n+\n+        new TerminalTestHelper( terminal )\n+        .assertTextMatches( new String[] {\n+            \"test\",\n+            \"    \",\n+            \"    \",\n+        } ).assertTextColourMatches( new String[] {\n+            \"1234\",\n+            \"0000\",\n+            \"0000\",\n+        } ).assertBackgroundColourMatches( new String[] {\n+            \"abcd\",\n+            \"ffff\",\n+            \"ffff\",\n+        } );\n+\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testBlitWithOffset()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setCursorPos(2, 1);\n+        mockOnChangedCallback.mockClear();\n+        terminal.blit(\"hi\", \"11\", \"ee\");\n+\n+        new TerminalTestHelper( terminal )\n+        .assertTextMatches( new String[] {\n+            \"    \",\n+            \"  hi\",\n+            \"    \",\n+        } ).assertTextColourMatches( new String[] {\n+            \"0000\",\n+            \"0011\",\n+            \"0000\",\n+        } ).assertBackgroundColourMatches( new String[] {\n+            \"ffff\",\n+            \"ffee\",\n+            \"ffff\",\n+        } );\n+\n+        mockOnChangedCallback.assertCalledTimes(1);\n+    }\n+\n+    @Test\n+    void testBlitOutOfBoundsNegativeY()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setCursorPos(2, -5);\n+        mockOnChangedCallback.mockClear();\n+        terminal.blit(\"hi\", \"11\", \"ee\");\n+\n+        new TerminalTestHelper( terminal )\n+        .assertTextMatches( new String[] {\n+            \"    \",\n+            \"    \",\n+            \"    \",\n+        } ).assertTextColourMatches( new String[] {\n+            \"0000\",\n+            \"0000\",\n+            \"0000\",\n+        } ).assertBackgroundColourMatches( new String[] {\n+            \"ffff\",\n+            \"ffff\",\n+            \"ffff\",\n+        } );\n+\n+        mockOnChangedCallback.assertNotCalled();\n+    }\n+\n+    @Test\n+    void testBlitOutOfBoundsPositiveY()\n+    {\n+        MockOnChangedCallback mockOnChangedCallback = new MockOnChangedCallback();\n+        Terminal terminal = new Terminal(4, 3, mockOnChangedCallback);\n+\n+        terminal.setCursorPos(2, 5);\n+        mockOnChangedCallback.mockClear();\n+        terminal.blit(\"hi\", \"11\", \"ee\");\n+\n+        new TerminalTestHelper( terminal )\n+        .assertTextMatches( new String[] {\n+            \"    \",\n+            \"    \",\n+            \"    \",\n+        } ).assertTextColourMatches( new String[] {\n+            \"0000\",\n+            \"0000\",\n+            \"0000\",\n+        } ).assertBackgroundColourMatches( new String[] {\n+            \"ffff\",\n+            \"ffff\",\n+            \"ffff\",\n+        } );\n+\n+        mockOnChangedCallback.assertNotCalled();\n+    }\n+}\n\\ No newline at end of file"
  }
]
