[
  {
    "sha": "c18a7361fa9ffe4316d2adc99ff234729466a96d",
    "filename": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java",
    "status": "modified",
    "additions": 68,
    "deletions": 12,
    "changes": 80,
    "blob_url": "https://github.com/joelhess/testcontainers-java/blob/64b36fe04a3d0f571b32a8400aa773c4cf64bad0/modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java",
    "raw_url": "https://github.com/joelhess/testcontainers-java/raw/64b36fe04a3d0f571b32a8400aa773c4cf64bad0/modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java",
    "contents_url": "https://api.github.com/repos/joelhess/testcontainers-java/contents/modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java?ref=64b36fe04a3d0f571b32a8400aa773c4cf64bad0",
    "patch": "@@ -21,9 +21,15 @@\n     private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n-    private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n+    private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 120;\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n+    private Boolean useAuth = false;\n+    private String username = \"root\";\n+    private String password = \"testContainers\";\n+\n+    private Boolean useReplicaSet = false;\n+\n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n@@ -41,20 +47,31 @@ public MongoDBContainer(final DockerImageName dockerImageName) {\n \n         dockerImageName.assertCompatibleWith(DEFAULT_IMAGE_NAME);\n \n-        withExposedPorts(MONGODB_INTERNAL_PORT);\n-        withCommand(\"--replSet\", \"docker-rs\");\n-        waitingFor(\n-            Wait.forLogMessage(\"(?i).*waiting for connections.*\", 1)\n-        );\n+        addExposedPorts(MONGODB_INTERNAL_PORT);\n+\n+        this.waitStrategy = Wait.\n+            forLogMessage(\"(?i).*waiting for connections.*\", 1);\n+    }\n+\n+    @Override\n+    protected void configure() {\n+        if (this.useAuth) {\n+            withEnv(\"MONGO_INITDB_ROOT_USERNAME\", this.username);\n+            withEnv(\"MONGO_INITDB_ROOT_PASSWORD\", this.password);\n+        }\n+\n+        if (this.useReplicaSet) {\n+            withCommand(\"--replSet\", \"docker-rs\");\n+        }\n     }\n \n     /**\n      * Gets a replica set url for the default {@value #MONGODB_DATABASE_NAME_DEFAULT} database.\n      *\n      * @return a replica set url.\n      */\n-    public String getReplicaSetUrl() {\n-        return getReplicaSetUrl(MONGODB_DATABASE_NAME_DEFAULT);\n+    public String getConnectionUri() {\n+        return getConnectionUri(MONGODB_DATABASE_NAME_DEFAULT);\n     }\n \n     /**\n@@ -63,21 +80,33 @@ public String getReplicaSetUrl() {\n      * @param databaseName a database name.\n      * @return a replica set url.\n      */\n-    public String getReplicaSetUrl(final String databaseName) {\n+    public String getConnectionUri(final String databaseName) {\n         if (!isRunning()) {\n             throw new IllegalStateException(\"MongoDBContainer should be started first\");\n         }\n         return String.format(\n-            \"mongodb://%s:%d/%s\",\n+            \"mongodb://%s%s:%d/%s%s\",\n+            (useAuth ? String.format(\"%s:%s@\", getUsername(), getPassword()) : \"\"),\n             getContainerIpAddress(),\n             getMappedPort(MONGODB_INTERNAL_PORT),\n-            databaseName\n+            databaseName,\n+            (useAuth ? \"?authSource=admin\" : \"\")\n         );\n     }\n \n+    public String getUsername() {\n+        return this.username;\n+    }\n+\n+    public String getPassword() {\n+        return this.password;\n+    }\n+\n     @Override\n     protected void containerIsStarted(InspectContainerResponse containerInfo) {\n-        initReplicaSet();\n+//        if (useReplicaSet) {\n+//            initReplicaSet();\n+//        }\n     }\n \n     private String[] buildMongoEvalCommand(final String command) {\n@@ -92,6 +121,33 @@ private void checkMongoNodeExitCode(final Container.ExecResult execResult) {\n         }\n     }\n \n+    public MongoDBContainer withReplicaSet() {\n+        this.useReplicaSet = true;\n+        return this;\n+    }\n+\n+    public MongoDBContainer withAuth() {\n+        this.useAuth = true;\n+        return this;\n+    }\n+\n+    public MongoDBContainer withAuth(String username, String password) {\n+        this.useAuth = true;\n+        withUsername(username);\n+        withPassword(password);\n+        return this;\n+    }\n+\n+    public MongoDBContainer withUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    public MongoDBContainer withPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n     private String buildMongoWaitCommand() {\n         return String.format(\n             \"var attempt = 0; \" +"
  },
  {
    "sha": "37691a532615f1898329192790a6b97baaedf64f",
    "filename": "modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java",
    "status": "modified",
    "additions": 48,
    "deletions": 3,
    "changes": 51,
    "blob_url": "https://github.com/joelhess/testcontainers-java/blob/64b36fe04a3d0f571b32a8400aa773c4cf64bad0/modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java",
    "raw_url": "https://github.com/joelhess/testcontainers-java/raw/64b36fe04a3d0f571b32a8400aa773c4cf64bad0/modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java",
    "contents_url": "https://api.github.com/repos/joelhess/testcontainers-java/contents/modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java?ref=64b36fe04a3d0f571b32a8400aa773c4cf64bad0",
    "patch": "@@ -13,6 +13,7 @@\n import org.junit.Test;\n import org.testcontainers.utility.DockerImageName;\n \n+import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.CoreMatchers.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n@@ -28,15 +29,15 @@\n     public void shouldExecuteTransactions() {\n         try (\n             // creatingMongoDBContainer {\n-            final MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse(\"mongo:4.0.10\"))\n+            final MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse(\"mongo:4.0.10\")).withReplicaSet()\n             // }\n         ) {\n \n             // startingMongoDBContainer {\n             mongoDBContainer.start();\n             // }\n \n-            final String mongoRsUrl = mongoDBContainer.getReplicaSetUrl();\n+            final String mongoRsUrl = mongoDBContainer.getConnectionUri();\n             assertNotNull(mongoRsUrl);\n             final MongoClient mongoSyncClient = MongoClients.create(mongoRsUrl);\n             mongoSyncClient.getDatabase(\"mydb1\").getCollection(\"foo\")\n@@ -92,7 +93,51 @@ public void shouldTestDatabaseName() {\n         ) {\n             mongoDBContainer.start();\n             final String databaseName = \"my-db\";\n-            assertThat(mongoDBContainer.getReplicaSetUrl(databaseName), endsWith(databaseName));\n+            assertThat(mongoDBContainer.getConnectionUri(databaseName), endsWith(databaseName));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldTestAuth() {\n+        try (\n+            final MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse(\"mongo:4.0.10\")).withAuth()\n+        ) {\n+            mongoDBContainer.start();\n+\n+            //Basic We connected test.\n+            final MongoClient mongoSyncClient = MongoClients.create(mongoDBContainer.getConnectionUri());\n+            assertNotNull(mongoSyncClient.listDatabaseNames().first());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldTestAuthAndReplica() {\n+        try (\n+            final MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse(\"mongo:4.0.10\"))\n+                .withReplicaSet()\n+                .withAuth()\n+        ) {\n+            mongoDBContainer.start();\n+\n+            //Basic We connected test.\n+            final MongoClient mongoSyncClient = MongoClients.create(mongoDBContainer.getConnectionUri());\n+            assertNotNull(mongoSyncClient.listDatabaseNames().first());\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldTestAuthOverrideUNAndPW() {\n+        try (\n+            final MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse(\"mongo:4.0.10\"))\n+                .withAuth(\"testUser\", \"testPassword\")\n+        ) {\n+            mongoDBContainer.start();\n+\n+            assertThat(mongoDBContainer.getConnectionUri(), containsString(\"testUser:testPassword@\"));\n+            //Basic We connected test.\n+            final MongoClient mongoSyncClient = MongoClients.create(mongoDBContainer.getConnectionUri());\n+            assertNotNull(mongoSyncClient.listDatabaseNames().first());\n         }\n     }\n }"
  }
]
