[
  {
    "sha": "decea47facff38c421e87a902b566b3a764b4eed",
    "filename": "src/main/java/org/seedstack/feign/FeignConfig.java",
    "status": "modified",
    "additions": 92,
    "deletions": 1,
    "changes": 93,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/FeignConfig.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/FeignConfig.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/main/java/org/seedstack/feign/FeignConfig.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -10,6 +10,7 @@\n import feign.Contract;\n import feign.Logger;\n import feign.RequestInterceptor;\n+import feign.Retryer;\n import feign.Target;\n import feign.Target.HardCodedTarget;\n import feign.codec.Decoder;\n@@ -44,6 +45,25 @@ public void addEndpoint(Class<?> endpointClass, EndpointConfig endpoint) {\n     public enum HystrixWrapperMode {\n         AUTO, ENABLED, DISABLED,\n     }\n+    private Class<?extends Retryer> retryer;\n+    private RetryConfig retry;\n+\n+    public FeignConfig setRetryer(Class<? extends Retryer> retryerClass){\n+        this.retryer=retryerClass;\n+        return this;\n+    }\n+    public Class<?extends Retryer> getRetryer(){\n+        return this.retryer;\n+    }\n+\n+    public FeignConfig setRetry(RetryConfig retryConfig){\n+        this.retry=retryConfig;\n+        return this;\n+    }\n+\n+    public RetryConfig getRetry(){\n+        return this.retry;\n+    }\n \n     @SuppressWarnings(\"rawtypes\")\n     public static class EndpointConfig {\n@@ -74,6 +94,8 @@ public void addEndpoint(Class<?> endpointClass, EndpointConfig endpoint) {\n         private HystrixWrapperMode hystrixWrapper = HystrixWrapperMode.AUTO;\n         private Class<?> fallback;\n         private Class<?extends ErrorDecoder> errorDecoder;\n+        private Class<? extends Retryer> retryer;\n+        private RetryConfig retry;\n \n         public String getBaseUrl() {\n             return baseUrl;\n@@ -217,8 +239,77 @@ public void addInterceptor(Class<? extends RequestInterceptor> interceptor) {\n             return errorDecoder;\n         }\n \n-        public void setErrorDecoder(Class<? extends ErrorDecoder> errorDecoder) {\n+        public EndpointConfig setErrorDecoder(Class<? extends ErrorDecoder> errorDecoder) {\n             this.errorDecoder = errorDecoder;\n+            return this;\n+        }\n+\n+        public Class<? extends Retryer> getRetryer(){return retryer;}\n+\n+        public EndpointConfig setRetryer(Class<? extends Retryer> retryer){\n+            this.retryer=retryer;\n+            return this;\n+        }\n+\n+        public EndpointConfig setRetry(RetryConfig retryConfig){\n+            this.retry=retryConfig;\n+            return this;\n+        }\n+\n+        public RetryConfig getRetry(){\n+            return this.retry;\n+        }\n+    }\n+    public static class RetryConfig{\n+        //Retry default configuration this is the Feign actual default values\n+        //As we are wrapping the feign default retryer, we need to redefine them here.\n+        public static final int DEFAULT_PERIOD_IN_MILLIS = 100;\n+        public static final long DEFAULT_MAX_PERIOD_IN_MILLIS = TimeUnit.SECONDS.toMillis(1);\n+        public static final int DEFAULT_MAX_ATTEMPTS = 5;\n+        public static final boolean DEFAULT_ACTIVE_RETRY = true;\n+\n+        private boolean active= DEFAULT_ACTIVE_RETRY;\n+        @Min(0)\n+        private long period= DEFAULT_PERIOD_IN_MILLIS;\n+        @Min(0)\n+        private long maxPeriod= DEFAULT_MAX_PERIOD_IN_MILLIS;\n+        @Min(1)\n+        private int maxAttempts= DEFAULT_MAX_ATTEMPTS;\n+\n+        public RetryConfig setActive(boolean retryActive){\n+            this.active=retryActive;\n+            return this;\n+        }\n+\n+        public boolean isActive(){\n+            return this.active;\n+        }\n+\n+        public RetryConfig setPeriod(long period){\n+            this.period=period;\n+            return this;\n+        }\n+\n+        public long getPeriod(){\n+            return this.period;\n+        }\n+\n+        public RetryConfig setMaxPeriod(long maxPeriod){\n+            this.maxPeriod=maxPeriod;\n+            return this;\n+        }\n+\n+        public long getMaxPeriod(){\n+            return this.maxPeriod;\n+        }\n+\n+        public RetryConfig setMaxAttempts(int maxAttempts){\n+            this.maxAttempts=maxAttempts;\n+            return this;\n+        }\n+\n+        public int getMaxAttempts(){\n+            return this.maxAttempts;\n         }\n     }\n }"
  },
  {
    "sha": "354e10a3f70cdce36f9ef37a7576a87d319c7b7d",
    "filename": "src/main/java/org/seedstack/feign/internal/FeignConfigurableRetryer.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignConfigurableRetryer.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignConfigurableRetryer.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/main/java/org/seedstack/feign/internal/FeignConfigurableRetryer.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Â© 2013-2020, The SeedStack authors <http://seedstack.org>\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.seedstack.feign.internal;\n+\n+import feign.Retryer;\n+\n+/**\n+ * This Retryer wraps Feign's default one with the required parameters\n+ */\n+public class FeignConfigurableRetryer extends Retryer.Default {\n+\n+    /**\n+     * Invokes default retryer constructor with required parameters\n+     * @param period Startng retry period between to retrys\n+     * @param maxPeriod maximum period between two retrys ( period is increaded by 1.5 between each attempt)\n+     * @param maxAttempts maximum attempts to perform\n+     */\n+    public FeignConfigurableRetryer(long period, long maxPeriod, int maxAttempts){\n+        super(period, maxPeriod, maxAttempts);\n+    }\n+}"
  },
  {
    "sha": "3041b658e49932110b3831ded859113f2e639deb",
    "filename": "src/main/java/org/seedstack/feign/internal/FeignErrorCode.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignErrorCode.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignErrorCode.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/main/java/org/seedstack/feign/internal/FeignErrorCode.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -19,5 +19,8 @@\n     ERROR_INSTANTIATING_FALLBACK,\n     ERROR_INSTANTIATING_LOGGER,\n     ERROR_INSTANTIATING_ERROR_DECODER,\n-    HYSTRIX_NOT_PRESENT\n+    ERROR_INSTANTIATING_RETRYER,\n+    HYSTRIX_NOT_PRESENT,\n+    ERROR_TWO_RETRYER_ENDPOINT_CONFIGURATIONS,\n+    ERROR_TWO_RETRYER_GLOBAL_CONFIGURATIONS\n }"
  },
  {
    "sha": "7eabfb842f996556db9fa1649e0e62f81113908e",
    "filename": "src/main/java/org/seedstack/feign/internal/FeignPlugin.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignPlugin.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignPlugin.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/main/java/org/seedstack/feign/internal/FeignPlugin.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -64,6 +64,9 @@ protected InitState initialize(InitContext initContext) {\n             if(endpointConfig.getErrorDecoder() !=null) {\n                 bindings.add(endpointConfig.getErrorDecoder());\n             }\n+            if(endpointConfig.getRetryer() !=null){\n+                bindings.add(endpointConfig.getRetryer());\n+            }\n             bindings.add(endpointConfig.getLogger());\n             Class<?> fallback = endpointConfig.getFallback();\n             if (fallback != null) {\n@@ -77,6 +80,10 @@ protected InitState initialize(InitContext initContext) {\n         // Retrieve SSL context if any\n         initContext.dependency(CryptoPlugin.class).sslContext().ifPresent(sslContext -> this.sslContext = sslContext);\n \n+        //Adds binding for general retryer\n+        if(getConfiguration(FeignConfig.class).getRetryer()!=null) {\n+            bindings.add(getConfiguration(FeignConfig.class).getRetryer());\n+        }\n         return InitState.INITIALIZED;\n     }\n "
  },
  {
    "sha": "843e65e27cd549f3a882f8c23f554592260bb7e5",
    "filename": "src/main/java/org/seedstack/feign/internal/FeignProvider.java",
    "status": "modified",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignProvider.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/java/org/seedstack/feign/internal/FeignProvider.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/main/java/org/seedstack/feign/internal/FeignProvider.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -58,6 +58,9 @@ public Object get() {\n             builder.errorDecoder(instantiateErrorDecoder(endpointConfig.getErrorDecoder()));\n         }\n \n+        //Retry configuration\n+        setUpRetryOption(builder, endpointConfig);\n+\n         // Logger\n         builder.logger(instantiateLogger(endpointConfig.getLogger()));\n         builder.logLevel(endpointConfig.getLogLevel());\n@@ -124,6 +127,51 @@ public Object get() {\n         }\n     }\n \n+    private void setUpRetryOption(Feign.Builder builder, FeignConfig.EndpointConfig endpointConfig){\n+        //If an endpoint has specific retry configuration, this configuration has priority\n+        //Else, applying global configuration if found, and finally, the builder will use default Feign configuration\n+        if(endpointConfig.getRetryer() !=null  || endpointConfig.getRetry()!=null){\n+            //Setting up specific retry configuration for this builder\n+            setUpEndPointConfiguredRetryOption(builder, endpointConfig);\n+        }\n+        else if(config.getRetryer() !=null || config.getRetry() !=null){\n+            //Applying global configuration for this builder\n+            setUpGlobalConfiguredRetryOption(builder);\n+        }\n+    }\n+\n+    private void setUpEndPointConfiguredRetryOption(Feign.Builder builder, FeignConfig.EndpointConfig endpointConfig){\n+        if(endpointConfig.getRetryer() !=null  && endpointConfig.getRetry()!=null){\n+            throw SeedException.createNew(FeignErrorCode.ERROR_TWO_RETRYER_ENDPOINT_CONFIGURATIONS).put(\"endpoint\", feignApi.getName());\n+        }\n+        if(endpointConfig.getRetryer() !=null){\n+            builder.retryer(instanciateRetryer(endpointConfig.getRetryer()));\n+        }\n+        else{\n+            applyRetryConfigurationToBuilder( builder, endpointConfig.getRetry());\n+        }\n+    }\n+    private void setUpGlobalConfiguredRetryOption(Feign.Builder builder){\n+        if(config.getRetryer() !=null  && config.getRetry()!=null){\n+            throw SeedException.createNew(FeignErrorCode.ERROR_TWO_RETRYER_GLOBAL_CONFIGURATIONS);\n+        }\n+        if(config.getRetryer() !=null){\n+            builder.retryer(instanciateRetryer(config.getRetryer()));\n+        }\n+        else {\n+            applyRetryConfigurationToBuilder(builder, config.getRetry());\n+        }\n+    }\n+\n+    private void applyRetryConfigurationToBuilder(Feign.Builder builder, FeignConfig.RetryConfig retryConfig){\n+        if(retryConfig.isActive()){\n+            builder.retryer(new FeignConfigurableRetryer(retryConfig.getPeriod(), retryConfig.getMaxPeriod(), retryConfig.getMaxAttempts()));\n+        }else{\n+            //De-activating retry for this builder\n+            builder.retryer(Retryer.NEVER_RETRY);\n+        }\n+    }\n+\n     private Object instantiateFallback(Class<?> fallback) {\n         try {\n             return injector.getInstance(fallback);\n@@ -169,6 +217,16 @@ private ErrorDecoder instantiateErrorDecoder(Class<? extends ErrorDecoder> error\n         }\n     }\n \n+    private Retryer instanciateRetryer(Class<? extends Retryer> retryerClass){\n+        try{\n+            return injector.getInstance(retryerClass);\n+        }\n+        catch(Exception e){\n+            throw SeedException.wrap(e, FeignErrorCode.ERROR_INSTANTIATING_RETRYER)\n+                    .put(\"class\", retryerClass);\n+        }\n+    }\n+\n     private Target<T> instantiateTarget(EndpointConfig endpointConfig) {\n         Class<? extends Target<T>> targetClass = endpointConfig.getTarget(feignApi);\n         if (HardCodedTarget.class.equals(targetClass)) {"
  },
  {
    "sha": "aa030481684cc821e91c664f7fe1737fa47164fd",
    "filename": "src/main/resources/org/seedstack/feign/internal/FeignErrorCode.properties",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/resources/org/seedstack/feign/internal/FeignErrorCode.properties",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/main/resources/org/seedstack/feign/internal/FeignErrorCode.properties",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/main/resources/org/seedstack/feign/internal/FeignErrorCode.properties?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -17,6 +17,10 @@ ERROR_INSTANTIATING_DECODER=The class ${class} cannot be instantiated.\n ERROR_INSTANTIATING_DECODER.fix=Check the property \"decoder\", it must be the fully qualified name of a valid decoder.\n ERROR_INSTANTIATING_ENCODER=The class ${class} cannot be instantiated.\n ERROR_INSTANTIATING_ENCODER.fix=Check the property \"encoder\", it must be the fully qualified name of a valid encoder.\n+ERROR_INSTANTIATING_ERROR_DECODER=The class ${class} cannot be instantiated.\n+ERROR_INSTANTIATING_ERROR_DECODER.fix=Check the property \"errorDecoder\", it must be a fully qualified name of a valid error decoder.\n+ERROR_INSTANTIATING_RETRYER=The class ${class} cannot be instantiated.\n+ERROR_INSTANTIATING_RETRYER.fix=Check the property \"retryer\", it must be the fully qualified name of a valid retryer.\n ERROR_INSTANTIATING_TARGET=The class ${class} cannot be instantiated.\n ERROR_INSTANTIATING_TARGET.fix=Check the property \"target\", it must be the fully qualified name of a valid target. Target must have a no-args constructor.\n ERROR_INSTANTIATING_FALLBACK=The class ${class} cannot be instantiated.\n@@ -25,3 +29,7 @@ ERROR_INSTANTIATING_LOGGER=The class ${class} cannot be instantiated.\n ERROR_INSTANTIATING_LOGGER.fix=Check the property \"logger\", it must be the fully qualified name of a valid logger.\n HYSTRIX_NOT_PRESENT=Hystrix is not present in the classpath and endpoint fallback is not available.\n HYSTRIX_NOT_PRESENT.fix=Disable the fallback for endpoint '${endpoint}' or add the 'hystrix-core' dependency to your project classpath.\n+ERROR_TWO_RETRY_ENDPOINT_CONFIGURATIONS=Bad retry configuration for endpoint '${endpoint}'.\n+ERROR_TWO_RETRY_ENDPOINT_CONFIGURATIONS.fix=Use either Retryer custom class or set up retry parameters.\n+ERROR_TWO_RETRY_GLOBAL_CONFIGURATIONS=Bad feign global retry configuration.\n+ERROR_TWO_RETRY_GLOBAL_CONFIGURATIONS.fix=Use either Retryer custom class or set up retry parameters."
  },
  {
    "sha": "c04520a62e01db469dcebc64e6b4552aba5000ec",
    "filename": "src/test/java/org/seedstack/feign/AbstractFeignIT.java",
    "status": "modified",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/AbstractFeignIT.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/AbstractFeignIT.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/java/org/seedstack/feign/AbstractFeignIT.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -12,8 +12,10 @@\n import org.junit.runner.RunWith;\n import org.seedstack.feign.fixtures.FeignTestException;\n import org.seedstack.feign.fixtures.Message;\n+import org.seedstack.feign.fixtures.RetryErrorDecoder;\n import org.seedstack.feign.fixtures.TestContract;\n import org.seedstack.feign.fixtures.TestInterceptor;\n+import org.seedstack.feign.fixtures.TestRetryer;\n import org.seedstack.feign.fixtures.apis.*;\n import org.seedstack.seed.Configuration;\n import org.seedstack.seed.Logging;\n@@ -56,6 +58,15 @@\n     @Inject\n     private ErrorDecoderTestAPI errorDecoderTestAPI;\n \n+    @Inject\n+    private RetryerTestAPI retryerTestAPI;\n+\n+    @Inject\n+    private RetryTestAPI retryTestAPI;\n+\n+    @Inject\n+    private RetryGlobalConfTestAPI retryGlobalConfTestAPI;\n+\n     @Test\n     public void feignClientIsInjectable() throws Exception {\n         assertThat(testAPI).isNotNull();\n@@ -163,4 +174,57 @@ public void testErrorDecoderAPI(){\n         assertThat(exceptionHasBeenRaised).isTrue();\n     }\n \n+    /**\n+     * Test endPoint retryer configuration\n+     * The retryer is set on the endpoint configuration, it should be called.\n+     */\n+    @Test\n+    public void testRetryer(){\n+        try {\n+            retryerTestAPI.fakeRequest();\n+        }\n+        catch (Exception e){\n+            assertThat(TestRetryer.getCountCalls()).isGreaterThan(0);\n+        }\n+        assertThat(TestRetryer.isCalled()).isTrue();\n+    }\n+\n+    /**\n+     * Test for retry configured on a particular endPoint\n+     * the maxAttempts is configured to 4, expecting 4 calls\n+     * This configuration should overide global retry configuration\n+     */\n+    @Test\n+    public void testRetryConfEndpoint(){\n+        RetryErrorDecoder.resetCount();\n+        boolean exceptionThrown=false;\n+        try{\n+            retryTestAPI.fakeRequest();\n+        }\n+        catch (Exception e){\n+            //Configuration to 4 attempts\n+            assertThat(RetryErrorDecoder.getCallCount()).isEqualTo(4);\n+            exceptionThrown=true;\n+        }\n+        assertThat(exceptionThrown).isTrue();\n+    }\n+\n+    /**\n+     * Test for retry global configuration.\n+     * The retry feature is de-activated globally, expecting only one call\n+     */\n+    @Test\n+    public void testRetryGlobalConfiguration(){\n+        RetryErrorDecoder.resetCount();\n+        boolean exceptionThrown=false;\n+        try{\n+            retryGlobalConfTestAPI.fakeRequest();\n+        }\n+        catch (Exception e){\n+            //Retry is de-activated globally, expecting only 1 call\n+            assertThat(RetryErrorDecoder.getCallCount()).isEqualTo(1);\n+            exceptionThrown=true;\n+        }\n+        assertThat(exceptionThrown).isTrue();\n+    }\n }"
  },
  {
    "sha": "0c9b765525287f9d4b16f55dc9e46ea3b52ccff6",
    "filename": "src/test/java/org/seedstack/feign/fixtures/RetryErrorDecoder.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/RetryErrorDecoder.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/RetryErrorDecoder.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/java/org/seedstack/feign/fixtures/RetryErrorDecoder.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Â© 2013-2020, The SeedStack authors <http://seedstack.org>\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.seedstack.feign.fixtures;\n+\n+import feign.Response;\n+import feign.RetryableException;\n+import feign.codec.ErrorDecoder;\n+\n+import java.util.Date;\n+\n+public class RetryErrorDecoder implements ErrorDecoder {\n+\n+    private static int callCount=0;\n+\n+    /**\n+     * If the response status id HTTP 500, feign should throw a RetryableException\n+     * @param methodKey the request method key\n+     * @param response the response to analyse\n+     * @return Exception to throw or null\n+     */\n+    @Override\n+    public Exception decode(String methodKey, Response response) {\n+        increaseCount();\n+        if(response.status()==500){\n+            return new RetryableException(response.status(),\"Server error\", response.request().httpMethod(),new Date(5000), response.request());\n+        }\n+        return null;\n+    }\n+\n+    public static void increaseCount(){\n+        callCount++;\n+    }\n+\n+    public static void resetCount(){\n+        callCount=0;\n+    }\n+\n+    public static int getCallCount(){\n+        return callCount;\n+    }\n+}"
  },
  {
    "sha": "efdf67eb94dc7cafa995629eb0b70f86d78af7bd",
    "filename": "src/test/java/org/seedstack/feign/fixtures/TestResource.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/TestResource.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/TestResource.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/java/org/seedstack/feign/fixtures/TestResource.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -13,9 +13,17 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import feign.Request;\n+import feign.RetryableException;\n+import feign.Util;\n import org.seedstack.seed.Logging;\n import org.slf4j.Logger;\n \n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.util.Collections;\n+import java.util.Date;\n+\n @Path(\"/feign\")\n public class TestResource {\n     @Logging\n@@ -60,4 +68,10 @@ public Message targetSay() {\n     public Response notFound(){\n         return Response.status(Response.Status.NOT_FOUND).entity(\"There is no content here\").build();\n     }\n+\n+    @GET\n+    @Path(\"/testRetry\")\n+    public Response testRetryer() throws UnknownHostException {\n+        return Response.serverError().build();\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "551a24717d90b332109f00109080bfe2fe677a3c",
    "filename": "src/test/java/org/seedstack/feign/fixtures/TestRetryer.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/TestRetryer.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/TestRetryer.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/java/org/seedstack/feign/fixtures/TestRetryer.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Â© 2013-2020, The SeedStack authors <http://seedstack.org>\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.seedstack.feign.fixtures;\n+\n+import feign.RetryableException;\n+import feign.Retryer;\n+import org.seedstack.seed.Logging;\n+import org.slf4j.Logger;\n+\n+public class TestRetryer implements Retryer {\n+    @Logging\n+    private static Logger logger;\n+\n+    private static final int MAX_RETRYS=3;\n+    private static boolean called=false;\n+    private static int countCalls;\n+\n+    public TestRetryer(){\n+        countCalls=1;\n+    }\n+    @Override\n+    public void continueOrPropagate(RetryableException e) {\n+        int currentCount = TestRetryer.getCountCalls();\n+        logger.info(\"Retrying. Current attempt : {} - Max attempts : {}\", currentCount, MAX_RETRYS);\n+        increaseCountCalls();\n+        if(currentCount<MAX_RETRYS){\n+            return;\n+        }\n+        throw e;\n+    }\n+\n+    private static void increaseCountCalls(){\n+        countCalls++;\n+        called=true;\n+    }\n+\n+    public static int getCountCalls(){\n+        return countCalls;\n+    }\n+\n+    public static boolean isCalled(){\n+        return called;\n+    }\n+\n+    @Override\n+    public Retryer clone() {\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "edb17cde29ae7bb6ac21120299bda480dcd14e36",
    "filename": "src/test/java/org/seedstack/feign/fixtures/apis/RetryGlobalConfTestAPI.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/apis/RetryGlobalConfTestAPI.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/apis/RetryGlobalConfTestAPI.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/java/org/seedstack/feign/fixtures/apis/RetryGlobalConfTestAPI.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Â© 2013-2020, The SeedStack authors <http://seedstack.org>\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.seedstack.feign.fixtures.apis;\n+\n+import feign.RequestLine;\n+import org.seedstack.feign.FeignApi;\n+import org.seedstack.feign.fixtures.Message;\n+\n+@FeignApi\n+public interface RetryGlobalConfTestAPI {\n+\n+    /**\n+     * Requesting the endpoint responding HTTP 404\n+     */\n+    @RequestLine(\"GET /testRetry\")\n+    Message fakeRequest();\n+}"
  },
  {
    "sha": "031a2f711505335663511c92aa42ce706cb7aca8",
    "filename": "src/test/java/org/seedstack/feign/fixtures/apis/RetryTestAPI.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/apis/RetryTestAPI.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/apis/RetryTestAPI.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/java/org/seedstack/feign/fixtures/apis/RetryTestAPI.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Â© 2013-2020, The SeedStack authors <http://seedstack.org>\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.seedstack.feign.fixtures.apis;\n+\n+import feign.RequestLine;\n+import org.seedstack.feign.FeignApi;\n+import org.seedstack.feign.fixtures.Message;\n+\n+@FeignApi\n+public interface RetryTestAPI {\n+\n+    /**\n+     * Requesting the endpoint responding HTTP 404\n+     */\n+    @RequestLine(\"GET /testRetry\")\n+    Message fakeRequest();\n+}"
  },
  {
    "sha": "3b1df4614c8878e1291a5ef162b873f56f260d2e",
    "filename": "src/test/java/org/seedstack/feign/fixtures/apis/RetryerTestAPI.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/apis/RetryerTestAPI.java",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/java/org/seedstack/feign/fixtures/apis/RetryerTestAPI.java",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/java/org/seedstack/feign/fixtures/apis/RetryerTestAPI.java?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Â© 2013-2020, The SeedStack authors <http://seedstack.org>\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package org.seedstack.feign.fixtures.apis;\n+\n+import feign.RequestLine;\n+import org.seedstack.feign.FeignApi;\n+import org.seedstack.feign.fixtures.Message;\n+\n+@FeignApi\n+public interface RetryerTestAPI {\n+\n+    /**\n+     * Requesting the endpoint responding HTTP 404\n+     */\n+    @RequestLine(\"GET /testRetry\")\n+    Message fakeRequest();\n+}"
  },
  {
    "sha": "3ae1816c0490cda0744e5cbf9787730cf117391e",
    "filename": "src/test/resources/application.yaml",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/seedstack/feign-addon/blob/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/resources/application.yaml",
    "raw_url": "https://github.com/seedstack/feign-addon/raw/5ffefd8f7baa7388884003e980f67a4882d7ebee/src/test/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/seedstack/feign-addon/contents/src/test/resources/application.yaml?ref=5ffefd8f7baa7388884003e980f67a4882d7ebee",
    "patch": "@@ -29,6 +29,8 @@ crypto<https>:\n         ssl: changeMe\n \n feign:\n+  retry:\n+    active: false\n   endpoints:\n     org.seedstack.feign.fixtures.apis.TestAPI:\n       baseUrl: ${runtime.web.baseUrl}/feign\n@@ -68,6 +70,21 @@ feign:\n       baseUrl: ${runtime.web.baseUrl}/feign\n       errorDecoder: org.seedstack.feign.fixtures.TestErrorDecoder\n       hystrixWrapper: DISABLED\n+    org.seedstack.feign.fixtures.apis.RetryerTestAPI:\n+      baseUrl: ${runtime.web.baseUrl}/feign\n+      errorDecoder: org.seedstack.feign.fixtures.RetryErrorDecoder\n+      retryer: org.seedstack.feign.fixtures.TestRetryer\n+      hystrixWrapper: DISABLED\n+    org.seedstack.feign.fixtures.apis.RetryTestAPI:\n+      baseUrl: ${runtime.web.baseUrl}/feign\n+      errorDecoder: org.seedstack.feign.fixtures.RetryErrorDecoder\n+      retry:\n+        maxAttempts: 4\n+      hystrixWrapper: DISABLED\n+    org.seedstack.feign.fixtures.apis.RetryGlobalConfTestAPI:\n+      baseUrl: ${runtime.web.baseUrl}/feign\n+      errorDecoder: org.seedstack.feign.fixtures.RetryErrorDecoder\n+      hystrixWrapper: DISABLED\n \n security:\n   users:"
  }
]
