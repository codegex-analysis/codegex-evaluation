[
  {
    "sha": "2eb1c2ea29260aa04e70b894ec0849b80d207cef",
    "filename": "engine/src/main/java/org/destinationsol/assets/fonts/ScaledFontProducer.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/assets/fonts/ScaledFontProducer.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/assets/fonts/ScaledFontProducer.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/assets/fonts/ScaledFontProducer.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,72 @@\n+package org.destinationsol.assets.fonts;\n+\n+import com.badlogic.gdx.graphics.g2d.BitmapFont;\n+import org.terasology.gestalt.assets.AssetDataProducer;\n+import org.terasology.gestalt.assets.ResourceUrn;\n+import org.terasology.gestalt.assets.management.AssetManager;\n+import org.terasology.gestalt.assets.module.annotations.RegisterAssetDataProducer;\n+import org.terasology.gestalt.naming.Name;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * An {@link AssetDataProducer} that returns the specified font scaled to the size provided in the base ResourceUrn's\n+ * fragment part.\n+ *\n+ * For example, a font of \"engine:main#2\" would return the font data from \"engine:main\" scaled by a factor\n+ * of 2x. The scale can be fractional, for example \"engine:main#0.5\" would produce a font that is half the size.\n+ */\n+@RegisterAssetDataProducer\n+public class ScaledFontProducer implements AssetDataProducer<FontData> {\n+    /**\n+     * The asset manager used to obtain the base font data.\n+     */\n+    private final AssetManager assetManager;\n+\n+    /**\n+     * Creates a new {@link ScaledFontProducer} to produce scaled fonts assets depending on the ResourceUrn provided.\n+     * @param assetManager the asset manager to use when obtaining base font data\n+     */\n+    public ScaledFontProducer(AssetManager assetManager) {\n+        this.assetManager = assetManager;\n+    }\n+\n+    @Override\n+    public Set<ResourceUrn> getAvailableAssetUrns() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Set<Name> getModulesProviding(Name resourceName) {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public ResourceUrn redirect(ResourceUrn urn) {\n+        return urn;\n+    }\n+\n+    @Override\n+    public Optional<FontData> getAssetData(ResourceUrn urn) throws IOException {\n+        if (urn.getFragmentName().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        // The 1/scale value is due to the rendering scaling performed in UIFont.java, which uses the existing scale.\n+        // Without this, large values would be displayed as smaller and smaller values as larger.\n+        float scale = 1.0f / Float.parseFloat(urn.getFragmentName().toString());\n+        Optional<Font> fontAsset = assetManager.getAsset(urn.getRootUrn(), Font.class);\n+        if (!fontAsset.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        BitmapFont bitmapFont = fontAsset.get().getBitmapFont();\n+        BitmapFont.BitmapFontData fontData = new BitmapFont.BitmapFontData(bitmapFont.getData().getFontFile(), bitmapFont.getData().flipped);\n+        fontData.setScale(scale);\n+\n+        return Optional.of(new FontData(new BitmapFont(fontData, bitmapFont.getRegions(), bitmapFont.isFlipped())));\n+    }\n+}"
  },
  {
    "sha": "e18c2f29ba7f9793fa4433922067c83732416618",
    "filename": "engine/src/main/java/org/destinationsol/game/PlayerCreator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/PlayerCreator.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/PlayerCreator.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/PlayerCreator.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -185,7 +185,7 @@ private Pilot createPilot(SolGame game, boolean isMouseControl) {\n         if (isMouseControl) {\n             return new AiPilot(new BeaconDestProvider(), true, Faction.LAANI, false, \"you\", Const.AI_DET_DIST);\n         } else {\n-            return new UiControlledPilot(game.getScreens().mainGameScreen);\n+            return new UiControlledPilot(game.getScreens().mainGameScreen.shipControl);\n         }\n     }\n "
  },
  {
    "sha": "8eb5dbb18ba2e7dfaa331448d4c83df3e480c0dd",
    "filename": "engine/src/main/java/org/destinationsol/game/SolGame.java",
    "status": "modified",
    "additions": 22,
    "deletions": 2,
    "changes": 24,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/SolGame.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/SolGame.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/SolGame.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -23,6 +23,7 @@\n import org.destinationsol.Const;\n import org.destinationsol.GameOptions;\n import org.destinationsol.SolApplication;\n+import org.destinationsol.assets.Assets;\n import org.destinationsol.assets.sound.OggSoundManager;\n import org.destinationsol.assets.sound.SpecialSounds;\n import org.destinationsol.common.DebugCol;\n@@ -61,8 +62,11 @@\n import org.destinationsol.ui.TutorialManager;\n import org.destinationsol.ui.UiDrawer;\n import org.destinationsol.ui.Waypoint;\n+import org.destinationsol.ui.nui.screens.MainGameScreen;\n import org.destinationsol.util.InjectionHelper;\n+import org.terasology.gestalt.assets.ResourceUrn;\n import org.terasology.gestalt.entitysystem.entity.EntityRef;\n+import org.terasology.nui.asset.UIElement;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -71,6 +75,9 @@\n import java.util.TreeMap;\n \n public class SolGame {\n+    private static final String NUI_MAIN_GAME_SCREEN_DESKTOP_URI = \"engine:mainGameScreen_desktop\";\n+    private static final String NUI_MAIN_GAME_SCREEN_MOBILE_URI = \"engine:mainGameScreen_mobile\";\n+\n     private final GameScreens gameScreens;\n     private final SolCam camera;\n     private final ObjectManager objectManager;\n@@ -101,6 +108,7 @@\n     private final TutorialManager tutorialManager;\n     private final GalaxyFiller galaxyFiller;\n     private final SolContactListener contactListener;\n+    private final MainGameScreen mainGameScreen;\n     private Hero hero;\n     private float timeStep;\n     private float time;\n@@ -128,8 +136,16 @@ public SolGame(String shipName, boolean isTutorial, boolean isNewGame, CommonDra\n         drawableManager = new DrawableManager(drawer);\n         camera = new SolCam();\n         gameScreens = new GameScreens(solApplication, context);\n+\n+        boolean isMobile = solApplication.isMobile();\n+        if (!isMobile) {\n+            mainGameScreen = (MainGameScreen) Assets.getAssetHelper().get(new ResourceUrn(NUI_MAIN_GAME_SCREEN_DESKTOP_URI), UIElement.class).get().getRootWidget();\n+        } else {\n+            mainGameScreen = (MainGameScreen) Assets.getAssetHelper().get(new ResourceUrn(NUI_MAIN_GAME_SCREEN_MOBILE_URI), UIElement.class).get().getRootWidget();\n+        }\n+\n         if (isTutorial) {\n-            tutorialManager = new TutorialManager(gameScreens, solApplication.isMobile(), solApplication.getOptions(), this);\n+            tutorialManager = new TutorialManager(gameScreens, mainGameScreen, isMobile, solApplication.getOptions(), this);\n             context.put(TutorialManager.class, tutorialManager);\n         } else {\n             tutorialManager = null;\n@@ -160,7 +176,6 @@ public SolGame(String shipName, boolean isTutorial, boolean isNewGame, CommonDra\n         mountDetectDrawer = new MountDetectDrawer();\n         beaconHandler = new BeaconHandler();\n         timeFactor = 1;\n-\n     }\n \n     public void createUpdateSystems(Context context) {\n@@ -233,6 +248,10 @@ public void run() {\n             }\n         }, 0, 30);\n         gameScreens.consoleScreen.init(this);\n+        solApplication.getNuiManager().pushScreen(mainGameScreen);\n+        if (isTutorial) {\n+            tutorialManager.start();\n+        }\n     }\n \n     private void createGame(String shipName, boolean shouldSpawnOnGalaxySpawnPosition) {\n@@ -294,6 +313,7 @@ public void onGameEnd(Context context) {\n         }\n         FactionInfo.clearValues();\n         objectManager.dispose();\n+        solApplication.getNuiManager().clearScreens();\n     }\n \n     private void saveShip() {"
  },
  {
    "sha": "01ce59fa498208e467be253d0a97d0915774a736",
    "filename": "engine/src/main/java/org/destinationsol/game/input/UiControlledPilot.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/input/UiControlledPilot.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/input/UiControlledPilot.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/input/UiControlledPilot.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -19,16 +19,16 @@\n import org.destinationsol.Const;\n import org.destinationsol.game.Faction;\n import org.destinationsol.game.SolGame;\n-import org.destinationsol.game.screens.MainGameScreen;\n+import org.destinationsol.game.screens.ShipUiControl;\n import org.destinationsol.game.ship.FarShip;\n import org.destinationsol.game.ship.SolShip;\n \n public class UiControlledPilot implements Pilot {\n \n-    private final MainGameScreen myScreen;\n+    private final ShipUiControl uiControls;\n \n-    public UiControlledPilot(MainGameScreen screen) {\n-        myScreen = screen;\n+    public UiControlledPilot(ShipUiControl controls) {\n+        uiControls = controls;\n     }\n \n     @Override\n@@ -37,27 +37,27 @@ public void update(SolGame game, SolShip ship, SolShip nearestEnemy) {\n \n     @Override\n     public boolean isUp() {\n-        return myScreen.isUp();\n+        return uiControls.isUp();\n     }\n \n     @Override\n     public boolean isLeft() {\n-        return myScreen.isLeft();\n+        return uiControls.isLeft();\n     }\n \n     @Override\n     public boolean isRight() {\n-        return myScreen.isRight();\n+        return uiControls.isRight();\n     }\n \n     @Override\n     public boolean isShoot() {\n-        return myScreen.isShoot();\n+        return uiControls.isShoot();\n     }\n \n     @Override\n     public boolean isShoot2() {\n-        return myScreen.isShoot2();\n+        return uiControls.isShoot2();\n     }\n \n     @Override\n@@ -67,7 +67,7 @@ public boolean collectsItems() {\n \n     @Override\n     public boolean isAbility() {\n-        return myScreen.isAbility();\n+        return uiControls.isAbility();\n     }\n \n     @Override"
  },
  {
    "sha": "7d4b124ef6a69fbd2767976d2915494b443fc19e",
    "filename": "engine/src/main/java/org/destinationsol/game/screens/MainGameScreen.java",
    "status": "modified",
    "additions": 10,
    "deletions": 172,
    "changes": 182,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/screens/MainGameScreen.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/screens/MainGameScreen.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/screens/MainGameScreen.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -15,7 +15,6 @@\n  */\n package org.destinationsol.game.screens;\n \n-import com.badlogic.gdx.Input;\n import com.badlogic.gdx.graphics.Color;\n import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n import com.badlogic.gdx.math.MathUtils;\n@@ -50,6 +49,7 @@\n import org.destinationsol.ui.SolUiScreen;\n import org.destinationsol.ui.UiDrawer;\n import org.destinationsol.ui.nui.screens.ConsoleScreen;\n+import org.destinationsol.ui.nui.screens.UIShipControlsScreen;\n import org.terasology.gestalt.assets.ResourceUrn;\n import org.terasology.nui.asset.UIElement;\n \n@@ -69,15 +69,8 @@\n     private static final float HELPER_ROW_3 = HELPER_ROW_2 - .5f * CELL_SZ;\n \n     public final ShipUiControl shipControl;\n-    public final SolUiControl mapControl;\n-    public final SolUiControl inventoryControl;\n-    public final SolUiControl talkControl;\n-    private final SolUiControl mercControl;\n     private final SolUiControl freeCamControl;\n-    private final SolUiControl menuControl;\n     private final SolUiControl pauseControl;\n-    private final SolUiControl consoleControlGrave;\n-    private final SolUiControl consoleControlF1;\n     private final CameraKeyboardControl cameraControl;\n \n     private final ZoneNameAnnouncer zoneNameAnnouncer;\n@@ -99,7 +92,6 @@\n     private final TextPlace myChargesExcessTp;\n     private final TextPlace myMoneyExcessTp;\n     private final SolApplication solApplication;\n-    private final ConsoleScreen consoleScreen;\n \n     private List<SolUiScreen> gameOverlayScreens = new ArrayList<>();\n     private List<WarnDrawer> warnDrawers = new ArrayList<>();\n@@ -112,7 +104,11 @@\n \n         switch (gameOptions.controlType) {\n             case KEYBOARD:\n-                shipControl = new ShipKbControl(solApplication, controls);\n+                UIShipControlsScreen shipControlsScreen =\n+                        (UIShipControlsScreen) Assets.getAssetHelper().get(\n+                                new ResourceUrn(\"engine:uiShipControlsScreen\"), UIElement.class).get().getRootWidget();\n+                solApplication.getNuiManager().pushScreen(shipControlsScreen);\n+                shipControl = shipControlsScreen;\n                 break;\n             case MOUSE:\n                 shipControl = new ShipMouseControl();\n@@ -128,38 +124,13 @@\n \n         boolean mobile = solApplication.isMobile();\n         float lastCol = displayDimensions.getRatio() - MainGameScreen.CELL_SZ;\n-        Rectangle menuArea = mobile ? btn(0, HELPER_ROW_2, true) : rightPaneLayout.buttonRect(0);\n-        menuControl = new SolUiControl(menuArea, true, gameOptions.getKeyMenu());\n-        menuControl.setDisplayName(\"Menu\");\n-        controls.add(menuControl);\n-        Rectangle mapArea = mobile ? btn(0, HELPER_ROW_1, true) : rightPaneLayout.buttonRect(1);\n-        mapControl = new SolUiControl(mapArea, true, gameOptions.getKeyMap());\n-        mapControl.setDisplayName(\"Map\");\n-        controls.add(mapControl);\n-        Rectangle invArea = mobile ? btn(lastCol, HELPER_ROW_1, true) : rightPaneLayout.buttonRect(2);\n-        inventoryControl = new SolUiControl(invArea, true, gameOptions.getKeyInventory());\n-        inventoryControl.setDisplayName(\"Items\");\n-        controls.add(inventoryControl);\n-        Rectangle talkArea = mobile ? btn(lastCol, HELPER_ROW_2, true) : rightPaneLayout.buttonRect(3);\n-        talkControl = new SolUiControl(talkArea, true, gameOptions.getKeyTalk());\n-        talkControl.setDisplayName(\"Talk\");\n-        controls.add(talkControl);\n-        Rectangle mercArea = mobile ? btn(lastCol, HELPER_ROW_3, true) : rightPaneLayout.buttonRect(4);\n-        mercControl = new SolUiControl(mercArea, true, gameOptions.getKeyMercenaryInteraction());\n-        mercControl.setDisplayName(\"Mercs\");\n-        controls.add(mercControl);\n         // No button, since on mobile, it should be ideally controlled straightly by dragging.\n         freeCamControl = new SolUiControl(null, false, gameOptions.getKeyFreeCameraMovement());\n         controls.add(freeCamControl);\n         pauseControl = new SolUiControl(null, true, gameOptions.getKeyPause());\n         controls.add(pauseControl);\n         cameraControl = new CameraKeyboardControl(gameOptions, controls);\n \n-        consoleControlGrave = new SolUiControl(null, true, Input.Keys.GRAVE);\n-        consoleControlF1 = new SolUiControl(null, true, Input.Keys.F1);\n-        controls.add(consoleControlGrave);\n-        controls.add(consoleControlF1);\n-\n         // possible warning messages in order of importance, so earlier one will be drawn on the center\n         warnDrawers.add(new SunWarnDrawer());\n         warnDrawers.add(new DmgWarnDrawer());\n@@ -178,8 +149,6 @@\n         compassTexture = Assets.getAtlasRegion(\"engine:uiCompass\");\n         myCompassTint = SolColor.col(1, 0);\n \n-        consoleScreen = (ConsoleScreen) Assets.getAssetHelper().get(new ResourceUrn(\"engine:console\"), UIElement.class).get().getRootWidget();\n-\n         myLifeTp = new TextPlace(SolColor.W50);\n         myRepairsExcessTp = new TextPlace(SolColor.WHITE);\n         myShieldLifeTp = new TextPlace(SolColor.W50);\n@@ -245,130 +214,27 @@ public void updateCustom(SolApplication solApplication, SolInputManager.InputPoi\n \n         zoneNameAnnouncer.update(game);\n \n-        if (menuControl.isJustOff()) {\n-            inputMan.setScreen(solApplication, screens.menuScreen);\n-        }\n         boolean controlsEnabled = inputMan.getTopScreen() == this;\n         shipControl.update(solApplication, controlsEnabled);\n \n-        if (mapControl.isJustOff()) {\n-            inputMan.setScreen(solApplication, screens.mapScreen);\n-        }\n-\n-        inventoryControl.setEnabled(hero.isNonTranscendent());\n-        if (hero.isNonTranscendent() && !inputMan.isScreenOn(screens.inventoryScreen)) {\n-            if (hero.getItemContainer().hasNew()) {\n-                inventoryControl.enableWarn();\n-            }\n-        }\n-        if (inventoryControl.isJustOff()) {\n-            InventoryScreen is = screens.inventoryScreen;\n-            boolean isOn = inputMan.isScreenOn(is);\n-            inputMan.setScreen(solApplication, screens.mainGameScreen);\n-            if (!isOn) {\n-                is.showInventory.setTarget(hero.getShip());\n-                is.setOperations(is.showInventory);\n-                inputMan.addScreen(solApplication, is);\n-            }\n-        }\n-\n-        mercControl.setEnabled(hero.isNonTranscendent());\n-        if (hero.isNonTranscendent() && !inputMan.isScreenOn(screens.inventoryScreen)) {\n-            if (hero.getMercs().hasNew()) {\n-                mercControl.enableWarn();\n-            }\n-        }\n-        if (mercControl.isJustOff()) {\n-            InventoryScreen is = screens.inventoryScreen;\n-            boolean isOn = inputMan.isScreenOn(is);\n-            inputMan.setScreen(solApplication, screens.mainGameScreen);\n-            if (!isOn) {\n-                is.setOperations(is.chooseMercenaryScreen);\n-                inputMan.addScreen(solApplication, is);\n-                \n-                game.getHero().getMercs().markAllAsSeen();\n-            }\n-        }\n-\n         SolCam.DIRECT_CAM_CONTROL = freeCamControl.isOn();\n \n-        updateTalk(game);\n-\n-        if (solApplication.getNuiManager().hasScreen(consoleScreen)) {\n+        if (solApplication.getNuiManager().hasScreenOfType(ConsoleScreen.class)) {\n             controls.forEach(x -> x.setEnabled(false));\n-            consoleControlGrave.setEnabled(true);\n-            consoleControlF1.setEnabled(true);\n-        }\n-\n-        if (pauseControl.isJustOff()) {\n-            game.setPaused(!game.isPaused());\n-        }\n-\n-        if (consoleScreen.isConsoleJustClosed()) {\n+        } else if (!inputMan.isScreenOn(screens.menuScreen)) {\n             game.setPaused(false);\n             controls.forEach(x -> x.setEnabled(true));\n-            consoleControlGrave.setEnabled(true);\n-            consoleControlF1.setEnabled(true);\n         }\n \n-        if (consoleControlGrave.isJustOff() || consoleControlF1.isJustOff()) {\n-            if (solApplication.getNuiManager().hasScreen(consoleScreen)) {\n-                solApplication.getNuiManager().removeScreen(consoleScreen);\n-            } else {\n-                solApplication.getNuiManager().pushScreen(consoleScreen);\n-                game.setPaused(true);\n-            }\n+        if (pauseControl.isJustOff()) {\n+            game.setPaused(!game.isPaused());\n         }\n \n         for (SolUiScreen screen : gameOverlayScreens) {\n             screen.updateCustom(solApplication, inputPointers, clickedOutside);\n         }\n     }\n \n-    private void updateTalk(SolGame game) {\n-        Hero hero = game.getHero();\n-        if (hero.isTranscendent()) {\n-            talkControl.setEnabled(false);\n-            return;\n-        }\n-        FactionManager factionManager = game.getFactionMan();\n-\n-        SolShip target = null;\n-        float minDist = TalkScreen.MAX_TALK_DIST;\n-        float har = hero.getHull().config.getApproxRadius();\n-        List<SolObject> objs = game.getObjectManager().getObjects();\n-        for (SolObject o : objs) {\n-            if (!(o instanceof SolShip)) {\n-                continue;\n-            }\n-            SolShip ship = (SolShip) o;\n-            if (factionManager.areEnemies(hero.getShip(), ship)) {\n-                continue;\n-            }\n-            if (ship.getTradeContainer() == null) {\n-                continue;\n-            }\n-            float dst = ship.getPosition().dst(hero.getPosition());\n-            float ar = ship.getHull().config.getApproxRadius();\n-            if (minDist < dst - har - ar) {\n-                continue;\n-            }\n-            target = ship;\n-            minDist = dst;\n-        }\n-        talkControl.setEnabled(target != null);\n-        if (talkControl.isJustOff()) {\n-            TalkScreen talkScreen = game.getScreens().talkScreen;\n-            SolInputManager inputMan = solApplication.getInputManager();\n-            boolean isOn = inputMan.isScreenOn(talkScreen);\n-            inputMan.setScreen(solApplication, this);\n-            if (!isOn) {\n-                talkScreen.setTarget(target);\n-                inputMan.addScreen(solApplication, talkScreen);\n-            }\n-        }\n-    }\n-\n     private boolean drawGunStat(UiDrawer uiDrawer, Hero hero, boolean secondary, float col0, float col1,\n                                 float col2, float y) {\n         Gun g = hero.getHull().getGun(secondary);\n@@ -546,34 +412,6 @@ public void blurCustom(SolApplication solApplication) {\n         }\n     }\n \n-    public boolean isLeft() {\n-        return shipControl.isLeft();\n-    }\n-\n-    public boolean isRight() {\n-        return shipControl.isRight();\n-    }\n-\n-    public boolean isUp() {\n-        return shipControl.isUp();\n-    }\n-\n-    public boolean isDown() {\n-        return shipControl.isDown();\n-    }\n-\n-    public boolean isShoot() {\n-        return shipControl.isShoot();\n-    }\n-\n-    public boolean isShoot2() {\n-        return shipControl.isShoot2();\n-    }\n-\n-    public boolean isAbility() {\n-        return shipControl.isAbility();\n-    }\n-\n     public boolean isCameraUp() {\n         return cameraControl.isUp();\n     }"
  },
  {
    "sha": "9154287a09ffb674f136c63d8c7d856e83dce1b9",
    "filename": "engine/src/main/java/org/destinationsol/game/screens/ShipMixedControl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/screens/ShipMixedControl.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/screens/ShipMixedControl.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/screens/ShipMixedControl.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -83,7 +83,7 @@ public void update(SolApplication solApplication, boolean enabled) {\n                     turnLeft = true;\n                 }\n             }\n-            if (!im.isMouseOnUi()) {\n+            if (!im.isMouseOnUi() && !solApplication.getNuiManager().isMouseOnUi()) {\n                 if (Gdx.input.isButtonPressed(Input.Buttons.LEFT)) {\n                     shootCtrl.maybeFlashPressed(gameOptions.getKeyShoot());\n                 }"
  },
  {
    "sha": "5aa7e8b9b91c2f86787cc15a14b8da7305a3c2f4",
    "filename": "engine/src/main/java/org/destinationsol/game/screens/TalkScreen.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/screens/TalkScreen.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/game/screens/TalkScreen.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/screens/TalkScreen.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -30,7 +30,7 @@\n import org.destinationsol.ui.UiDrawer;\n \n public class TalkScreen extends SolUiBaseScreen {\n-    static final float MAX_TALK_DIST = 1f;\n+    public static final float MAX_TALK_DIST = 1f;\n \n     public final SolUiControl buyControl;\n     public final SolUiControl closeControl;"
  },
  {
    "sha": "d263881261da9f65f0054e89f67d8f9ac5907973",
    "filename": "engine/src/main/java/org/destinationsol/ui/TutorialManager.java",
    "status": "modified",
    "additions": 125,
    "deletions": 35,
    "changes": 160,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/TutorialManager.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/TutorialManager.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/ui/TutorialManager.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -25,50 +25,67 @@\n import org.destinationsol.game.screens.GameScreens;\n import org.destinationsol.game.screens.InventoryScreen;\n import org.destinationsol.game.screens.MainGameScreen;\n-import org.destinationsol.game.screens.ShipKbControl;\n import org.destinationsol.game.screens.ShipMixedControl;\n+import org.destinationsol.ui.nui.screens.UIShipControlsScreen;\n+import org.destinationsol.ui.nui.widgets.UIWarnButton;\n+import org.terasology.nui.widgets.UIButton;\n \n import java.util.ArrayList;\n import java.util.List;\n \n public class TutorialManager implements UpdateAwareSystem {\n     private DisplayDimensions displayDimensions;\n     private final Rectangle background;\n-    private final ArrayList<Step> steps;\n+    private ArrayList<Step> steps;\n+    private final GameScreens screens;\n+    private final org.destinationsol.ui.nui.screens.MainGameScreen nuiMain;\n+    private final boolean mobile;\n+    private final GameOptions gameOptions;\n+    private final SolGame game;\n \n     private int stepIndex;\n \n-    public TutorialManager(GameScreens screens, boolean mobile, GameOptions gameOptions, SolGame game) {\n+    public TutorialManager(GameScreens screens, org.destinationsol.ui.nui.screens.MainGameScreen nuiMain, boolean mobile, GameOptions gameOptions, SolGame game) {\n+        this.screens = screens;\n+        this.nuiMain = nuiMain;\n+        this.mobile = mobile;\n+        this.gameOptions = gameOptions;\n+        this.game = game;\n+\n         displayDimensions = SolApplication.displayDimensions;\n \n         float backgroundW = displayDimensions.getRatio() * .5f;\n         float backgroundH = .2f;\n         background = new Rectangle(displayDimensions.getRatio() / 2 - backgroundW / 2, 1 - backgroundH, backgroundW, backgroundH);\n         steps = new ArrayList<>();\n         stepIndex = 0;\n+    }\n \n+    public void start() {\n         MainGameScreen main = screens.mainGameScreen;\n         boolean mouseCtrl = main.shipControl instanceof ShipMixedControl;\n-        SolUiControl shootCtrl;\n+        SolUiControl shootCtrl = null;\n         String shootKey;\n         String shootKey2;\n-        SolUiControl upCtrl;\n-        SolUiControl leftCtrl;\n-        SolUiControl abilityCtrl;\n+        SolUiControl upCtrl = null;\n+        SolUiControl abilityCtrl = null;\n+        UIWarnButton nuiShootCtrl = null;\n+        UIWarnButton nuiUpCtrl = null;\n+        UIWarnButton nuiLeftCtrl = null;\n+        UIWarnButton nuiAbilityCtrl = null;\n         if (mouseCtrl) {\n             ShipMixedControl mixedControl = (ShipMixedControl) main.shipControl;\n             shootCtrl = mixedControl.shootCtrl;\n             shootKey = \"(LEFT mouse button)\";\n             shootKey2 = \"(Click LEFT mouse button)\";\n             upCtrl = mixedControl.upCtrl;\n-            leftCtrl = null;\n             abilityCtrl = mixedControl.abilityCtrl;\n         } else {\n-            ShipKbControl kbControl = (ShipKbControl) main.shipControl;\n-            shootCtrl = kbControl.shootCtrl;\n-            upCtrl = kbControl.upCtrl;\n-            leftCtrl = kbControl.leftCtrl;\n-            abilityCtrl = kbControl.abilityCtrl;\n+            UIShipControlsScreen kbControl = (UIShipControlsScreen) main.shipControl;\n+            nuiShootCtrl = kbControl.getGun1Button();\n+            nuiUpCtrl = kbControl.getForwardButton();\n+            nuiLeftCtrl = kbControl.getLeftButton();\n+            nuiAbilityCtrl = kbControl.getAbilityButton();\n             if (mobile) {\n                 shootKey = \"(GUN 1 button)\";\n                 shootKey2 = \"(Press GUN 1 button)\";\n@@ -78,20 +95,25 @@ public TutorialManager(GameScreens screens, boolean mobile, GameOptions gameOpti\n             }\n         }\n \n-        addStep(\"Hi! Shoot your main gun\\n\" + shootKey, shootCtrl);\n+        if (mouseCtrl) {\n+            addStep(\"Hi! Shoot your main gun\\n\" + shootKey, shootCtrl);\n+        } else {\n+            addStep(\"Hi! Shoot your main gun\\n\" + shootKey, nuiShootCtrl);\n+        }\n \n-        if (leftCtrl != null) {\n+        if (nuiLeftCtrl != null) {\n             if (mobile) {\n-                addStep(\"Great! Turn left.\\nDon't fly away yet!\", leftCtrl);\n+                addStep(\"Great! Turn left.\\nDon't fly away yet!\", nuiLeftCtrl);\n             } else {\n-                addStep(\"Great! Turn left (\" + gameOptions.getKeyLeftName() + \" key). \\nDon't fly away yet!\", leftCtrl);\n+                addStep(\"Great! Turn left (\" + gameOptions.getKeyLeftName() + \" key). \\nDon't fly away yet!\", nuiLeftCtrl);\n             }\n         }\n \n+        UIWarnButton mapButton = nuiMain.getMapButton();\n         if (mobile) {\n-            addStep(\"Have a look at the map\", main.mapControl, true);\n+            addStep(\"Have a look at the map\", mapButton, true);\n         } else {\n-            addStep(\"Have a look at the map\\n(\" + gameOptions.getKeyMapName() + \" key)\", main.mapControl, true);\n+            addStep(\"Have a look at the map\\n(\" + gameOptions.getKeyMapName() + \" key)\", mapButton, true);\n         }\n \n         if (mouseCtrl) {\n@@ -109,10 +131,11 @@ public TutorialManager(GameScreens screens, boolean mobile, GameOptions gameOpti\n                     screens.mapScreen.closeControl, true);\n         }\n \n+        UIWarnButton inventoryButton = nuiMain.getInventoryButton();\n         if (mouseCtrl || mobile) {\n-            addStep(\"Have a look\\nat your inventory\", main.inventoryControl, true);\n+            addStep(\"Have a look\\nat your inventory\", inventoryButton, true);\n         } else {\n-            addStep(\"Have a look\\nat your inventory (\" + gameOptions.getKeyInventoryName() + \" key)\", main.inventoryControl, true);\n+            addStep(\"Have a look\\nat your inventory (\" + gameOptions.getKeyInventoryName() + \" key)\", inventoryButton, true);\n         }\n \n         if (mouseCtrl || mobile) {\n@@ -164,15 +187,16 @@ public TutorialManager(GameScreens screens, boolean mobile, GameOptions gameOpti\n         if (mouseCtrl) {\n             addStep(\"Move forward (\" + gameOptions.getKeyUpMouseName() + \" key).\\nThere's no stop!\", upCtrl);\n         } else if (mobile) {\n-            addStep(\"Move forward.\\nThere's no stop!\", upCtrl);\n+            addStep(\"Move forward.\\nThere's no stop!\", nuiUpCtrl);\n         } else {\n-            addStep(\"Move forward (\" + gameOptions.getKeyUpName() + \" key).\\nThere's no stop!\", upCtrl);\n+            addStep(\"Move forward (\" + gameOptions.getKeyUpName() + \" key).\\nThere's no stop!\", nuiUpCtrl);\n         }\n \n+        UIWarnButton talkButton = nuiMain.getTalkButton();\n         if (mobile) {\n-            addStep(\"Fly closer to the station\\nand talk with it\", main.talkControl, true);\n+            addStep(\"Fly closer to the station\\nand talk with it\", talkButton, true);\n         } else {\n-            addStep(\"Fly closer to the station\\nand talk with it (\" + gameOptions.getKeyTalkName() + \" key)\", main.talkControl, true);\n+            addStep(\"Fly closer to the station\\nand talk with it (\" + gameOptions.getKeyTalkName() + \" key)\", talkButton, true);\n         }\n \n         if (mouseCtrl || mobile) {\n@@ -197,29 +221,50 @@ public TutorialManager(GameScreens screens, boolean mobile, GameOptions gameOpti\n             addStep(\"Use the ability of your ship\\n(MIDDLE mouse button or \" + gameOptions.getKeyAbilityName() + \" key)\",\n                     abilityCtrl, true);\n         } else if (mobile) {\n-            addStep(\"Use the ability of your ship\", abilityCtrl, true);\n+            addStep(\"Use the ability of your ship\", nuiAbilityCtrl, true);\n         } else {\n-            addStep(\"Use the ability of your ship\\n(\" + gameOptions.getKeyAbilityName() + \" key)\", abilityCtrl, true);\n+            addStep(\"Use the ability of your ship\\n(\" + gameOptions.getKeyAbilityName() + \" key)\", nuiAbilityCtrl, true);\n         }\n \n-        addStep(\"Here's a couple of hints...\\n\" + shootKey2, shootCtrl);\n-        addStep(\"Enemies are orange icons, allies are blue\\n\" + shootKey2, shootCtrl);\n-        addStep(\"Avoid enemies with skull icon\\n\" + shootKey2, shootCtrl);\n-        addStep(\"To repair, have repair kits and just stay idle\\n\" + shootKey2, shootCtrl);\n-        addStep(\"Destroy asteroids to find money\\n\" + shootKey2, shootCtrl);\n-        addStep(\"Find or buy shields, armor, guns; equip them\\n\" + shootKey2, shootCtrl);\n-        addStep(\"Buy new ships, hire mercenaries\\n\" + shootKey2, shootCtrl);\n-        addStep(\"Tutorial is complete and will exit now!\\n\" + shootKey2, shootCtrl);\n+        if (mouseCtrl) {\n+            addStep(\"Here's a couple of hints...\\n\" + shootKey2, shootCtrl);\n+            addStep(\"Enemies are orange icons, allies are blue\\n\" + shootKey2, shootCtrl);\n+            addStep(\"Avoid enemies with skull icon\\n\" + shootKey2, shootCtrl);\n+            addStep(\"To repair, have repair kits and just stay idle\\n\" + shootKey2, shootCtrl);\n+            addStep(\"Destroy asteroids to find money\\n\" + shootKey2, shootCtrl);\n+            addStep(\"Find or buy shields, armor, guns; equip them\\n\" + shootKey2, shootCtrl);\n+            addStep(\"Buy new ships, hire mercenaries\\n\" + shootKey2, shootCtrl);\n+            addStep(\"Tutorial is complete and will exit now!\\n\" + shootKey2, shootCtrl);\n+        } else {\n+            addStep(\"Here's a couple of hints...\\n\" + shootKey2, nuiShootCtrl);\n+            addStep(\"Enemies are orange icons, allies are blue\\n\" + shootKey2, nuiShootCtrl);\n+            addStep(\"Avoid enemies with skull icon\\n\" + shootKey2, nuiShootCtrl);\n+            addStep(\"To repair, have repair kits and just stay idle\\n\" + shootKey2, nuiShootCtrl);\n+            addStep(\"Destroy asteroids to find money\\n\" + shootKey2, nuiShootCtrl);\n+            addStep(\"Find or buy shields, armor, guns; equip them\\n\" + shootKey2, nuiShootCtrl);\n+            addStep(\"Buy new ships, hire mercenaries\\n\" + shootKey2, nuiShootCtrl);\n+            addStep(\"Tutorial is complete and will exit now!\\n\" + shootKey2, nuiShootCtrl);\n+        }\n+\n+        steps.get(0).start();\n     }\n \n     private void addStep(String text, SolUiControl ctrl) {\n         addStep(text, ctrl, false);\n     }\n \n+    private void addStep(String text, UIWarnButton ctrl) {\n+        addStep(text, ctrl, false);\n+    }\n+\n     private void addStep(String text, SolUiControl ctrl, boolean checkOn) {\n         steps.add(new Step(text, ctrl, checkOn));\n     }\n \n+    private void addStep(String text, UIWarnButton ctrl, boolean checkOn) {\n+        steps.add(new NuiStep(text, ctrl, checkOn));\n+    }\n+\n     private void addStep(Step step) {\n         steps.add(step);\n     }\n@@ -230,6 +275,9 @@ public void update(SolGame game, float timeStep) {\n         step.highlight();\n         if (step.canProgressToNextStep()) {\n             stepIndex++;\n+            if (stepIndex < steps.size()) {\n+                steps.get(stepIndex).start();\n+            }\n         }\n     }\n \n@@ -260,6 +308,10 @@ public Step(String text, SolUiControl ctrl, boolean checkOn) {\n             this.checkOn = checkOn;\n         }\n \n+        public void start() {\n+            // Empty, as it is only used in NuiStep\n+        }\n+\n         // highlight control that needs to be pressed\n         public void highlight() {\n             if (ctrl != null) {\n@@ -276,6 +328,44 @@ public boolean canProgressToNextStep() {\n         }\n     }\n \n+    public static class NuiStep extends Step {\n+        public final UIWarnButton nuiCtrl;\n+        private boolean buttonPressed;\n+\n+        public NuiStep(String text, UIWarnButton ctrl, boolean checkOn) {\n+            super(text, null, checkOn);\n+            nuiCtrl = ctrl;\n+        }\n+\n+        @Override\n+        public void start() {\n+            nuiCtrl.subscribe(widget -> {\n+                buttonPressed = true;\n+            });\n+        }\n+\n+        // highlight control that needs to be pressed\n+        @Override\n+        public void highlight() {\n+            if (nuiCtrl != null) {\n+                nuiCtrl.enableWarn();\n+            }\n+        }\n+\n+        @Override\n+        public boolean canProgressToNextStep() {\n+            boolean pressed = buttonPressed;\n+            buttonPressed = false;\n+            if (checkOn) {\n+                // TODO: The following line should work but doesn't currently due a nui-libgdx issue\n+                //return nuiCtrl.getMode().equals(UIButton.DOWN_MODE);\n+                return pressed;\n+            } else {\n+                return pressed;\n+            }\n+        }\n+    }\n+\n     public static class SelectEquippedItemStep extends Step {\n         InventoryScreen inventoryScreen;\n         SolGame game;"
  },
  {
    "sha": "1ba41da94823c9f77e6eb3f2fe4b67f36ebb6b3b",
    "filename": "engine/src/main/java/org/destinationsol/ui/nui/NUIManager.java",
    "status": "modified",
    "additions": 49,
    "deletions": 2,
    "changes": 51,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/NUIManager.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/NUIManager.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/ui/nui/NUIManager.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -24,8 +24,11 @@\n import org.destinationsol.assets.sound.OggSound;\n import org.destinationsol.game.context.Context;\n import org.destinationsol.util.InjectionHelper;\n+import org.joml.Rectanglei;\n+import org.joml.Vector2i;\n import org.terasology.gestalt.assets.ResourceUrn;\n import org.terasology.input.InputType;\n+import org.terasology.input.Keyboard;\n import org.terasology.input.MouseInput;\n import org.terasology.input.device.KeyboardAction;\n import org.terasology.input.device.KeyboardDevice;\n@@ -40,16 +43,20 @@\n import org.terasology.nui.backends.libgdx.LibGDXMouseDevice;\n import org.terasology.nui.backends.libgdx.NUIInputProcessor;\n import org.terasology.nui.canvas.CanvasImpl;\n+import org.terasology.nui.canvas.CanvasRenderer;\n import org.terasology.nui.events.NUIKeyEvent;\n import org.terasology.nui.events.NUIMouseButtonEvent;\n import org.terasology.nui.events.NUIMouseWheelEvent;\n import org.terasology.nui.skin.UISkin;\n+import org.terasology.nui.util.RectUtility;\n import org.terasology.nui.widgets.UIButton;\n import org.terasology.nui.widgets.UIText;\n \n import java.util.Deque;\n import java.util.Iterator;\n import java.util.LinkedList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  *  The NUI Manager is responsible for the initialisation and interaction between the NUI library and the game.\n@@ -64,7 +71,7 @@\n     /**\n      * The game's canvas, which is used for all NUI rendering operations. See also {@link NUIManager#canvasRenderer}.\n      */\n-    private CanvasImpl canvas;\n+    private SolCanvas canvas;\n     /**\n      * A blank white texture, used by-default for the text cursor.\n      */\n@@ -116,6 +123,11 @@ public NUIManager(SolApplication solApplication, Context context, CommonDrawer c\n         NUIInputProcessor.CONSUME_INPUT = true;\n         this.context = context;\n \n+        // TODO: Re-enable tabbing when it works\n+        TabbingManager.tabForwardInput = Keyboard.Key.NONE;\n+        TabbingManager.tabBackInputModifier = Keyboard.Key.NONE;\n+        TabbingManager.activateInput = Keyboard.Key.NONE;\n+\n         mouse = new LibGDXMouseDevice();\n         keyboard = new LibGDXKeyboardDevice();\n         canvasRenderer = new LibGDXCanvasRenderer(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(),\n@@ -124,7 +136,7 @@ public NUIManager(SolApplication solApplication, Context context, CommonDrawer c\n         whiteTexture = Assets.getDSTexture(WHITE_TEXTURE_URN).getUiTexture();\n         skin = Assets.getAssetHelper().get(new ResourceUrn(DEFAULT_SKIN_URN), UISkin.class).get();\n \n-        canvas = new CanvasImpl(canvasRenderer, focusManager, keyboard, mouse, whiteTexture, skin, 100);\n+        canvas = new SolCanvas(canvasRenderer, focusManager, keyboard, mouse, whiteTexture, skin, 100);\n         TabbingManager.setFocusManager(focusManager);\n \n         OggSound sound = Assets.getSound(BUTTON_CLICK_URN);\n@@ -301,6 +313,16 @@ public boolean hasScreenOfType(Class<? extends NUIScreenLayer> type) {\n         return uiScreens;\n     }\n \n+    /**\n+     * Removes all of the UI screens currently on UI stack.\n+     */\n+    public void clearScreens() {\n+        for (NUIScreenLayer uiScreen : uiScreens) {\n+            uiScreen.onRemoved();\n+        }\n+        uiScreens.clear();\n+    }\n+\n     /**\n      * Returns the default {@link UISkin} for widgets.\n      * @return the default {@link UISkin}\n@@ -317,6 +339,21 @@ public void setContext(Context context) {\n         this.context = context;\n     }\n \n+    /**\n+     * Returns if the mouse is currently over an interactive UI element.\n+     * @return true, if the mouse is currently over an interactive UI element, otherwise false\n+     */\n+    public boolean isMouseOnUi() {\n+        // TODO: Find better way of doing this.\n+        Vector2i mousePosition = mouse.getMousePosition();\n+        for (Rectanglei interactionRegion : canvas.getInteractionRegions()) {\n+            if (RectUtility.contains(interactionRegion, mousePosition)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     /**\n      * Re-sizes the current canvas to a particular width and height. This is not always the same as the game's current\n      * rendering resolution.\n@@ -336,4 +373,14 @@ public void setUiScale(float scale) {\n         canvas.setUiScale(scale);\n         canvasRenderer.setUiScale(1.0f / scale);\n     }\n+\n+    private class SolCanvas extends CanvasImpl {\n+        public SolCanvas(CanvasRenderer renderer, FocusManager focusManager, KeyboardDevice keyboard, MouseDevice mouse, UITextureRegion whiteTexture, UISkin defaultSkin, int uiScale) {\n+            super(renderer, focusManager, keyboard, mouse, whiteTexture, defaultSkin, uiScale);\n+        }\n+\n+        public List<Rectanglei> getInteractionRegions() {\n+            return interactionRegions.stream().map(region -> region.region).collect(Collectors.toList());\n+        }\n+    }\n }"
  },
  {
    "sha": "e83a02b7b559e36c9e024eca5c0245347c31b0aa",
    "filename": "engine/src/main/java/org/destinationsol/ui/nui/NUIScreenLayer.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/NUIScreenLayer.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/NUIScreenLayer.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/ui/nui/NUIScreenLayer.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -15,6 +15,7 @@\n  */\n package org.destinationsol.ui.nui;\n \n+import org.destinationsol.ui.nui.widgets.KeyActivatedButton;\n import org.joml.Vector2i;\n import org.terasology.input.ButtonState;\n import org.terasology.input.Keyboard;\n@@ -126,6 +127,12 @@ public boolean onKeyEvent(NUIKeyEvent event) {\n             return true;\n         }\n \n+        // Send key events to all KeyActivatedButton sub-widgets. These buttons are supposed to react to key events\n+        // even when they are not in-focus.\n+        for (UIWidget widget : contents.findAll(KeyActivatedButton.class)) {\n+            widget.onKeyEvent(event);\n+        }\n+\n         return super.onKeyEvent(event);\n     }\n "
  },
  {
    "sha": "62d6e0dfa8812a8346bb1075345aed809c47f58e",
    "filename": "engine/src/main/java/org/destinationsol/ui/nui/screens/MainGameScreen.java",
    "status": "added",
    "additions": 273,
    "deletions": 0,
    "changes": 273,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/screens/MainGameScreen.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/screens/MainGameScreen.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/ui/nui/screens/MainGameScreen.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,273 @@\n+package org.destinationsol.ui.nui.screens;\n+\n+import org.destinationsol.GameOptions;\n+import org.destinationsol.SolApplication;\n+import org.destinationsol.assets.Assets;\n+import org.destinationsol.common.In;\n+import org.destinationsol.game.FactionManager;\n+import org.destinationsol.game.Hero;\n+import org.destinationsol.game.SolGame;\n+import org.destinationsol.game.SolObject;\n+import org.destinationsol.game.screens.GameScreens;\n+import org.destinationsol.game.screens.TalkScreen;\n+import org.destinationsol.game.ship.SolShip;\n+import org.destinationsol.ui.SolInputManager;\n+import org.destinationsol.ui.nui.NUIScreenLayer;\n+import org.destinationsol.ui.nui.widgets.KeyActivatedButton;\n+import org.destinationsol.ui.nui.widgets.UIWarnButton;\n+import org.terasology.gestalt.assets.ResourceUrn;\n+import org.terasology.input.ButtonState;\n+import org.terasology.input.Keyboard;\n+import org.terasology.nui.AbstractWidget;\n+import org.terasology.nui.UIWidget;\n+import org.terasology.nui.asset.UIElement;\n+import org.terasology.nui.backends.libgdx.GDXInputUtil;\n+import org.terasology.nui.events.NUIKeyEvent;\n+\n+import java.util.List;\n+\n+/**\n+ * The main HUD screen displayed when in-game. This screen is responsible for the menu buttons shown\n+ * on the right-hand side of the UI. Through it, the menu, map, current ship inventory, communications UI\n+ * and mercenaries UI can be accessed.\n+ */\n+public class MainGameScreen extends NUIScreenLayer {\n+    private SolShip talkTarget;\n+    private UIWarnButton menuButton;\n+    private UIWarnButton mapButton;\n+    private UIWarnButton inventoryButton;\n+    private UIWarnButton talkButton;\n+    private UIWarnButton mercsButton;\n+    private ConsoleScreen consoleScreen;\n+\n+    @In\n+    private SolApplication solApplication;\n+\n+    @Override\n+    public void initialise() {\n+        consoleScreen = (ConsoleScreen) Assets.getAssetHelper().get(new ResourceUrn(\"engine:console\"), UIElement.class).get().getRootWidget();\n+\n+        GameOptions gameOptions = solApplication.getOptions();\n+\n+        menuButton = find(\"menuButton\", UIWarnButton.class);\n+        menuButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyMenu()));\n+        menuButton.subscribe(this::onMenuButtonClicked);\n+\n+        mapButton = find(\"mapButton\", UIWarnButton.class);\n+        mapButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyMap()));\n+        mapButton.subscribe(this::onMapButtonClicked);\n+\n+        inventoryButton = find(\"itemsButton\", UIWarnButton.class);\n+        inventoryButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyInventory()));\n+        inventoryButton.subscribe(this::onItemsButtonClicked);\n+\n+        talkButton = find(\"talkButton\", UIWarnButton.class);\n+        talkButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyTalk()));\n+        talkButton.subscribe(this::onTalkButtonClicked);\n+\n+        mercsButton = find(\"mercsButton\", UIWarnButton.class);\n+        mercsButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyMercenaryInteraction()));\n+        mercsButton.subscribe(this::onMercsButtonClicked);\n+    }\n+\n+    @Override\n+    public void update(float delta) {\n+        super.update(delta);\n+        SolInputManager solInputManager = solApplication.getInputManager();\n+        GameScreens gameScreens = solApplication.getGame().getScreens();\n+        if (!solInputManager.isScreenOn(gameScreens.menuScreen) &&\n+                !solInputManager.isScreenOn(gameScreens.mapScreen)) {\n+            ((AbstractWidget) contents).setVisible(true);\n+        } else {\n+            ((AbstractWidget) contents).setVisible(false);\n+        }\n+\n+        if (solInputManager.getTopScreen() != gameScreens.mainGameScreen) {\n+            // User is in an original UI menu, so disable the escape key toggling the pause menu.\n+            menuButton.setKey(Keyboard.Key.NONE);\n+        } else {\n+            menuButton.setKey(GDXInputUtil.GDXToNuiKey(solApplication.getOptions().getKeyMenu()));\n+        }\n+\n+        // NOTE: Copied directly from the original MainGameScreen class. The logic hasn't been changed\n+        //       but some variables have been re-named to be more descriptive.\n+        SolGame game = solApplication.getGame();\n+        Hero hero = game.getHero();\n+\n+        if (hero.isNonTranscendent() && !solInputManager.isScreenOn(gameScreens.inventoryScreen)) {\n+            if (hero.getItemContainer().hasNew()) {\n+                inventoryButton.enableWarn();\n+            }\n+\n+            if (hero.getMercs().hasNew()) {\n+                mercsButton.enableWarn();\n+            }\n+        }\n+\n+        mercsButton.setEnabled(hero.isNonTranscendent());\n+        if (hero.isTranscendent()) {\n+            talkButton.setEnabled(false);\n+            return;\n+        }\n+\n+        FactionManager factionManager = game.getFactionMan();\n+\n+        // The ship can only communicate if there is a friendly target in range.\n+        talkTarget = null;\n+        float minDist = TalkScreen.MAX_TALK_DIST;\n+        float heroApproxRadius = hero.getHull().config.getApproxRadius();\n+        List<SolObject> objs = game.getObjectManager().getObjects();\n+        for (SolObject obj : objs) {\n+            if (!(obj instanceof SolShip)) {\n+                continue;\n+            }\n+            SolShip ship = (SolShip) obj;\n+            if (factionManager.areEnemies(hero.getShip(), ship)) {\n+                continue;\n+            }\n+            if (ship.getTradeContainer() == null) {\n+                continue;\n+            }\n+            float distance = ship.getPosition().dst(hero.getPosition());\n+            float shipApproxRadius = ship.getHull().config.getApproxRadius();\n+            if (minDist < distance - heroApproxRadius - shipApproxRadius) {\n+                continue;\n+            }\n+            talkTarget = ship;\n+            minDist = distance;\n+        }\n+        talkButton.setEnabled(talkTarget != null);\n+\n+        if (consoleScreen.isConsoleJustClosed()) {\n+            game.setPaused(false);\n+        }\n+    }\n+\n+    @Override\n+    protected boolean escapeCloses() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean onKeyEvent(NUIKeyEvent event) {\n+        if (event.getState() == ButtonState.UP &&\n+                (event.getKey() == Keyboard.Key.GRAVE || event.getKey() == Keyboard.Key.F1) &&\n+                nuiManager.hasScreen(consoleScreen)) {\n+            nuiManager.removeScreen(consoleScreen);\n+            return true;\n+        }\n+\n+        if (!contents.isVisible()) {\n+            return false;\n+        }\n+\n+        if (event.getState() == ButtonState.UP &&\n+                (event.getKey() == Keyboard.Key.GRAVE || event.getKey() == Keyboard.Key.F1)) {\n+            if (!nuiManager.hasScreen(consoleScreen)) {\n+                nuiManager.pushScreen(consoleScreen);\n+                solApplication.getGame().setPaused(true);\n+            }\n+            return true;\n+        }\n+\n+        return super.onKeyEvent(event);\n+    }\n+\n+    @Override\n+    public void onRemoved() {\n+        menuButton.unsubscribe(this::onMenuButtonClicked);\n+        mapButton.unsubscribe(this::onMapButtonClicked);\n+        inventoryButton.unsubscribe(this::onItemsButtonClicked);\n+        talkButton.unsubscribe(this::onTalkButtonClicked);\n+        mercsButton.unsubscribe(this::onMercsButtonClicked);\n+    }\n+\n+    /**\n+     * Returns the \"Menu\" UI Button element.\n+     * @return the \"Menu\" UI Button\n+     */\n+    public UIWarnButton getMenuButton() {\n+        return menuButton;\n+    }\n+\n+    /**\n+     * Returns the \"Map\" UI Button element.\n+     * @return The \"Map\" UI Button\n+     */\n+    public UIWarnButton getMapButton() {\n+        return mapButton;\n+    }\n+\n+    /**\n+     * Returns the \"Items\" UI Button element.\n+     * @return The \"Items\" UI Button\n+     */\n+    public UIWarnButton getInventoryButton() {\n+        return inventoryButton;\n+    }\n+\n+    /**\n+     * Returns the \"Talk\" UI Button element.\n+     * @return The \"Talk\" UI Button\n+     */\n+    public UIWarnButton getTalkButton() {\n+        return talkButton;\n+    }\n+\n+    /**\n+     * Returns the \"Mercs\" UI Button element.\n+     * @return The \"Mercs\" UI Button\n+     */\n+    public UIWarnButton getMercsButton() {\n+        return mercsButton;\n+    }\n+\n+    private void onMenuButtonClicked(UIWidget widget) {\n+        SolInputManager solInputManager = solApplication.getInputManager();\n+        GameScreens gameScreens = solApplication.getGame().getScreens();\n+\n+        solInputManager.setScreen(solApplication, gameScreens.menuScreen);\n+    }\n+\n+    private void onMapButtonClicked(UIWidget widget) {\n+        SolInputManager solInputManager = solApplication.getInputManager();\n+        GameScreens gameScreens = solApplication.getGame().getScreens();\n+\n+        solInputManager.setScreen(solApplication, gameScreens.mapScreen);\n+    }\n+\n+    private void onItemsButtonClicked(UIWidget widget) {\n+        SolInputManager solInputManager = solApplication.getInputManager();\n+        GameScreens gameScreens = solApplication.getGame().getScreens();\n+\n+        solInputManager.setScreen(solApplication, gameScreens.mainGameScreen);\n+        if (!solInputManager.isScreenOn(gameScreens.inventoryScreen)) {\n+            gameScreens.inventoryScreen.showInventory.setTarget(solApplication.getGame().getHero().getShip());\n+            gameScreens.inventoryScreen.setOperations(gameScreens.inventoryScreen.showInventory);\n+            solInputManager.addScreen(solApplication, gameScreens.inventoryScreen);\n+        }\n+    }\n+\n+    private void onTalkButtonClicked(UIWidget widget) {\n+        SolInputManager solInputManager = solApplication.getInputManager();\n+        GameScreens gameScreens = solApplication.getGame().getScreens();\n+\n+        solInputManager.setScreen(solApplication, gameScreens.mainGameScreen);\n+        if (!solInputManager.isScreenOn(gameScreens.talkScreen)) {\n+            gameScreens.talkScreen.setTarget(talkTarget);\n+            solInputManager.addScreen(solApplication, gameScreens.talkScreen);\n+        }\n+    }\n+\n+    private void onMercsButtonClicked(UIWidget widget) {\n+        SolInputManager solInputManager = solApplication.getInputManager();\n+        GameScreens gameScreens = solApplication.getGame().getScreens();\n+\n+        solInputManager.setScreen(solApplication, gameScreens.mainGameScreen);\n+        if (!solInputManager.isScreenOn(gameScreens.inventoryScreen)) {\n+            gameScreens.inventoryScreen.setOperations(gameScreens.inventoryScreen.chooseMercenaryScreen);\n+            solInputManager.addScreen(solApplication, gameScreens.inventoryScreen);\n+            solApplication.getGame().getHero().getMercs().markAllAsSeen();\n+        }\n+    }\n+}"
  },
  {
    "sha": "e558fc5d66a01acb7e050b4d01dba25785dc9977",
    "filename": "engine/src/main/java/org/destinationsol/ui/nui/screens/UIShipControlsScreen.java",
    "status": "added",
    "additions": 216,
    "deletions": 0,
    "changes": 216,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/screens/UIShipControlsScreen.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/screens/UIShipControlsScreen.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/ui/nui/screens/UIShipControlsScreen.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,216 @@\n+package org.destinationsol.ui.nui.screens;\n+\n+import org.destinationsol.GameOptions;\n+import org.destinationsol.SolApplication;\n+import org.destinationsol.common.In;\n+import org.destinationsol.game.Hero;\n+import org.destinationsol.game.item.Gun;\n+import org.destinationsol.game.screens.ShipUiControl;\n+import org.destinationsol.ui.nui.NUIScreenLayer;\n+import org.destinationsol.ui.nui.widgets.KeyActivatedButton;\n+import org.destinationsol.ui.nui.widgets.UIWarnButton;\n+import org.terasology.input.ButtonState;\n+import org.terasology.input.Keyboard;\n+import org.terasology.nui.AbstractWidget;\n+import org.terasology.nui.backends.libgdx.GDXInputUtil;\n+import org.terasology.nui.events.NUIKeyEvent;\n+import org.terasology.nui.widgets.UIButton;\n+\n+/**\n+ * This screen contains the touchscreen controls used when playing the game on mobile platforms.\n+ * It is the implementation of {@link ShipUiControl} used when the control type is set to \"Keyboard\".\n+ */\n+public class UIShipControlsScreen extends NUIScreenLayer implements ShipUiControl {\n+    public UIWarnButton leftButton;\n+    public UIWarnButton rightButton;\n+    public UIWarnButton forwardButton;\n+    public UIWarnButton gun1Button;\n+    public UIWarnButton gun2Button;\n+    public UIWarnButton abilityButton;\n+    private Keyboard.Key downKey;\n+    private boolean downKeyHeld;\n+\n+    @In\n+    private SolApplication solApplication;\n+\n+    @Override\n+    public void initialise() {\n+        GameOptions gameOptions = solApplication.getOptions();\n+\n+        leftButton = find(\"leftButton\", UIWarnButton.class);\n+        leftButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyLeft()));\n+\n+        rightButton = find(\"rightButton\", UIWarnButton.class);\n+        rightButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyRight()));\n+\n+        forwardButton = find(\"forwardButton\", UIWarnButton.class);\n+        forwardButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyUp()));\n+\n+        gun1Button = find(\"gun1Button\", UIWarnButton.class);\n+        gun1Button.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyShoot()));\n+\n+        gun2Button = find(\"gun2Button\", UIWarnButton.class);\n+        gun2Button.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyShoot2()));\n+\n+        abilityButton = find(\"abilityButton\", UIWarnButton.class);\n+        abilityButton.setKey(GDXInputUtil.GDXToNuiKey(gameOptions.getKeyAbility()));\n+\n+        downKey = GDXInputUtil.GDXToNuiKey(gameOptions.getKeyDown());\n+\n+        // Hide touchscreen controls if not on mobile\n+        if (!solApplication.isMobile()) {\n+            leftButton.setVisible(false);\n+            rightButton.setVisible(false);\n+            forwardButton.setVisible(false);\n+            gun1Button.setVisible(false);\n+            gun2Button.setVisible(false);\n+            abilityButton.setVisible(false);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of {@link org.terasology.nui.UIWidget#update(float)}\n+     * @param delta the time elapsed since the last update cycle\n+     */\n+    @Override\n+    public void update(float delta) {\n+        // Hide and disable controls if the main game screen is not visible.\n+        boolean mainGameScreenVisible = solApplication.getInputManager().isScreenOn(solApplication.getGame().getScreens().mainGameScreen);\n+        ((AbstractWidget)contents).setVisible(mainGameScreenVisible);\n+        contents.setEnabled(mainGameScreenVisible);\n+        super.update(delta);\n+    }\n+\n+    /**\n+     * Implementation of {@link ShipUiControl#update(SolApplication, boolean)}\n+     * @param solApplication an instance of the game's {@link SolApplication}\n+     * @param enabled are the UI controls currently enabled\n+     */\n+    @Override\n+    public void update(SolApplication solApplication, boolean enabled) {\n+        if (!enabled) {\n+            leftButton.setEnabled(false);\n+            rightButton.setEnabled(false);\n+            forwardButton.setEnabled(false);\n+            gun1Button.setEnabled(false);\n+            gun2Button.setEnabled(false);\n+            abilityButton.setEnabled(false);\n+            return;\n+        }\n+\n+        Hero hero = solApplication.getGame().getHero();\n+        boolean hasEngine = hero.isNonTranscendent() && hero.getHull().getEngine() != null;\n+        forwardButton.setEnabled(hasEngine);\n+        leftButton.setEnabled(hasEngine);\n+        rightButton.setEnabled(hasEngine);\n+\n+        Gun g1 = hero.isTranscendent() ? null : hero.getHull().getGun(false);\n+        gun1Button.setEnabled(g1 != null && g1.ammo > 0);\n+        Gun g2 = hero.isTranscendent() ? null : hero.getHull().getGun(true);\n+        gun2Button.setEnabled(g2 != null && g2.ammo > 0);\n+\n+        // The ability button needs to de-press before it is disabled,\n+        // as otherwise it causes the button to be pressed again when it is enabled.\n+        if (!abilityButton.getMode().equals(UIButton.DOWN_MODE)) {\n+            abilityButton.setEnabled(hero.isNonTranscendent() && hero.canUseAbility());\n+        }\n+    }\n+\n+    @Override\n+    public boolean onKeyEvent(NUIKeyEvent event) {\n+        if (event.getKey() == downKey) {\n+            downKeyHeld = (event.getState() == ButtonState.DOWN);\n+            return true;\n+        }\n+\n+        return super.onKeyEvent(event);\n+    }\n+\n+    /**\n+     * Returns the \"Left\" touchscreen control button element.\n+     * @return the \"Left\" UI Button\n+     */\n+    public UIWarnButton getLeftButton() {\n+        return leftButton;\n+    }\n+\n+    /**\n+     * Returns the \"Right\" touchscreen control button element.\n+     * @return the \"Right\" UI Button\n+     */\n+    public UIWarnButton getRightButton() {\n+        return rightButton;\n+    }\n+\n+    /**\n+     * Returns the \"Fwd\" touchscreen control button element.\n+     * @return the \"Fwd\" UI Button\n+     */\n+    public UIWarnButton getForwardButton() {\n+        return forwardButton;\n+    }\n+\n+    /**\n+     * Returns the \"Gun\" touchscreen control button element.\n+     * @return the \"Gun\" UI Button\n+     */\n+    public UIWarnButton getGun1Button() {\n+        return gun1Button;\n+    }\n+\n+    /**\n+     * Returns the \"Gun2\" touchscreen control button element.\n+     * @return the \"Gun2\" UI Button\n+     */\n+    public UIWarnButton getGun2Button() {\n+        return gun2Button;\n+    }\n+\n+    /**\n+     * Returns the \"Ability\" touchscreen control button element.\n+     * @return the \"Ability\" UI Button\n+     */\n+    public UIWarnButton getAbilityButton() {\n+        return abilityButton;\n+    }\n+\n+    @Override\n+    public boolean isLeft() {\n+        return leftButton.getMode().equals(UIButton.DOWN_MODE);\n+    }\n+\n+    @Override\n+    public boolean isRight() {\n+        return rightButton.getMode().equals(UIButton.DOWN_MODE);\n+    }\n+\n+    @Override\n+    public boolean isUp() {\n+        return forwardButton.getMode().equals(UIButton.DOWN_MODE);\n+    }\n+\n+    @Override\n+    public boolean isDown() {\n+        return downKeyHeld;\n+    }\n+\n+    @Override\n+    public boolean isShoot() {\n+        return gun1Button.getMode().equals(UIButton.DOWN_MODE);\n+    }\n+\n+    @Override\n+    public boolean isShoot2() {\n+        return gun2Button.getMode().equals(UIButton.DOWN_MODE);\n+    }\n+\n+    @Override\n+    public boolean isAbility() {\n+        return abilityButton.getMode().equals(UIButton.DOWN_MODE);\n+    }\n+\n+    @Override\n+    protected boolean escapeCloses() {\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "b980218725808cc7ea82e3a66ba33380eb79acf7",
    "filename": "engine/src/main/java/org/destinationsol/ui/nui/widgets/KeyActivatedButton.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/widgets/KeyActivatedButton.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/widgets/KeyActivatedButton.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/ui/nui/widgets/KeyActivatedButton.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,87 @@\n+package org.destinationsol.ui.nui.widgets;\n+\n+import org.terasology.input.ButtonState;\n+import org.terasology.input.Input;\n+import org.terasology.input.Keyboard;\n+import org.terasology.nui.LayoutConfig;\n+import org.terasology.nui.databinding.Binding;\n+import org.terasology.nui.databinding.DefaultBinding;\n+import org.terasology.nui.events.NUIKeyEvent;\n+import org.terasology.nui.widgets.UIButton;\n+\n+/**\n+ * A {@link UIButton} this can also be activated when a specific key is pressed.\n+ */\n+public class KeyActivatedButton extends UIButton {\n+    /**\n+     * The {@code Binding} containing the key that activates this button.\n+     */\n+    @LayoutConfig\n+    private Binding<String> key = new DefaultBinding<>(Keyboard.Key.NONE.getName());\n+\n+    /**\n+     * The {@code Binding} stating if the button should still activate on key presses when invisible.\n+     * The default value is false, as this is consistent with the default behaviour of a UIButton.\n+     *\n+     * Setting the value to true allows the button to be activated by a key press when invisible,\n+     * which is consistent with the default behaviour of {@link org.destinationsol.ui.SolUiControl}.\n+     */\n+    @LayoutConfig\n+    private Binding<Boolean> activateWhenInvisible = new DefaultBinding<>(false);\n+\n+    /**\n+     * Retrieves the key used to activate this {@code KeyActivatedButton}.\n+     *\n+     * @return The key used to activate this {@code KeyActivatedButton}\n+     */\n+    public Input getKey() {\n+        return Keyboard.Key.find(key.get());\n+    }\n+\n+    /**\n+     * Sets the key used to activate this {@code KeyActivatedButton}.\n+     *\n+     * @param key The key used to activate this {@code KeyActivatedButton}\n+     */\n+    public void setKey(Keyboard.Key key) {\n+        this.key.set(key.getName());\n+    }\n+\n+    /**\n+     * Returns true if the button should be activated by key presses when invisible.\n+     * @return true, if the button should be activated by key presses when invisible, otherwise false\n+     */\n+    // This method should really be called \"shouldActivateWhenInvisible\" but the widget de-serialisation logic\n+    // seems to require get* and set* method names to populate the bindings.\n+    public boolean getActivateWhenInvisible() {\n+        return activateWhenInvisible.get();\n+    }\n+\n+    /**\n+     * Sets if the button should be activated by key presses when invisible.\n+     * @param value true, if the button should be activated by key presses when invisible, otherwise false\n+     */\n+    public void setActivateWhenInvisible(boolean value) {\n+        activateWhenInvisible.set(value);\n+    }\n+\n+    @Override\n+    public boolean onKeyEvent(NUIKeyEvent event) {\n+        if ((!isVisible() && !activateWhenInvisible.get()) || !isEnabled()) {\n+            setActive(false);\n+            return super.onKeyEvent(event);\n+        }\n+\n+        if (event.getKey() == getKey()) {\n+            if (event.getState() == ButtonState.UP) {\n+                activateWidget();\n+                setActive(false);\n+            } else if (event.getState() == ButtonState.DOWN) {\n+                setActive(true);\n+            }\n+            return true;\n+        }\n+\n+        return super.onKeyEvent(event);\n+    }\n+}"
  },
  {
    "sha": "1e9550a8f7cee43e38281500308dbbe4762e21fb",
    "filename": "engine/src/main/java/org/destinationsol/ui/nui/widgets/UIWarnButton.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/widgets/UIWarnButton.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/java/org/destinationsol/ui/nui/widgets/UIWarnButton.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/ui/nui/widgets/UIWarnButton.java?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,72 @@\n+package org.destinationsol.ui.nui.widgets;\n+\n+import org.destinationsol.Const;\n+import org.joml.Math;\n+import org.terasology.nui.Canvas;\n+import org.terasology.nui.widgets.UIButton;\n+\n+/**\n+ * A standard {@link UIButton} that has been adapted to use the {@link UIWarnButton#WARN_MODE} style mode\n+ * when the user should be notified of an event e.g. a new item in their inventory.\n+ */\n+public class UIWarnButton extends KeyActivatedButton {\n+    public static final String WARN_MODE = \"warn\";\n+\n+    // Warn colour code taken from SolInputManager\n+    private static final int WARN_COUNTER_MAX = 2;\n+    private static final float WARN_PERC_GROWTH_TIME = 1f;\n+    private static final float WARN_PERC_MIN = 0f;\n+    private static final float WARN_PERC_MAX = 1f;\n+\n+    private int warnCounter = 0;\n+    private float warnPercentage;\n+    private boolean warnPercGrows;\n+    private float warnAlpha = 1f;\n+\n+    @Override\n+    public void onDraw(Canvas canvas) {\n+        if (warnCounter > 0) {\n+            canvas.drawBackground();\n+            canvas.setMode(WARN_MODE);\n+            canvas.setAlpha(warnAlpha);\n+            canvas.drawBackground();\n+            canvas.setAlpha(1);\n+            canvas.setMode(getMode());\n+        } else {\n+            canvas.drawBackground();\n+        }\n+        super.onDraw(canvas);\n+    }\n+\n+    @Override\n+    public void update(float delta) {\n+        super.update(delta);\n+\n+        float dif = (warnPercGrows ? 1 : -1) * Const.REAL_TIME_STEP / WARN_PERC_GROWTH_TIME;\n+        warnPercentage += dif;\n+        if (warnPercentage < WARN_PERC_MIN || WARN_PERC_MAX < warnPercentage) {\n+            warnPercentage = Math.clamp(WARN_PERC_MIN, WARN_PERC_MAX, warnPercentage);\n+            warnPercGrows = !warnPercGrows;\n+        }\n+        warnAlpha = warnPercentage * .5f;\n+\n+        if (warnCounter > 0) {\n+            warnCounter--;\n+        }\n+    }\n+\n+    /**\n+     * Starts the \"warn\" phase of the button, causing it to pulsate briefly\n+     * the colour specified for the mode {@link UIWarnButton#WARN_MODE}.\n+     *\n+     * This can be used to notify the user of an event, such as a new item that is now in their inventory.\n+     */\n+    public void enableWarn() {\n+        warnCounter = WARN_COUNTER_MAX;\n+    }\n+\n+    @Override\n+    public boolean isSkinAppliedByCanvas() {\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "30e1c583e330bd8e10c63d30b03bd9a987ff88f3",
    "filename": "engine/src/main/resources/org/destinationsol/assets/skins/default.skin",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/skins/default.skin",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/skins/default.skin",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/resources/org/destinationsol/assets/skins/default.skin?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -311,8 +311,11 @@\n           \"text-color\": \"FFFF00FF\"\n         },\n         \"disabled\": {\n-          \"background\": \"button\",\n+          \"background\": \"buttonDisabled\",\n           \"text-color\": \"BBBBBBFF\"\n+        },\n+        \"warn\": {\n+          \"background\": \"buttonWarn\"\n         }\n       }\n     },"
  },
  {
    "sha": "c7be7742eede25e38851078e81d01d10aae86cab",
    "filename": "engine/src/main/resources/org/destinationsol/assets/skins/mainGameScreen.skin",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/skins/mainGameScreen.skin",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/skins/mainGameScreen.skin",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/resources/org/destinationsol/assets/skins/mainGameScreen.skin?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,17 @@\n+{\n+  \"inherit\": \"engine:default\",\n+  \"families\": {\n+    \"sideUIButton\": {\n+      \"elements\": {\n+        \"UIButton\": {\n+          \"min-width\": 160,\n+          \"min-height\": 64\n+        }\n+      },\n+      \"font\": \"engine:main#2\"\n+    },\n+    \"controlsUIButton\": {\n+      \"font\": \"engine:main#2\"\n+    }\n+  }\n+}"
  },
  {
    "sha": "6615815fdbf92fc1a7502b27f8afaa05e3c6e869",
    "filename": "engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonDisabled.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonDisabled.png",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonDisabled.png",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonDisabled.png?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46"
  },
  {
    "sha": "99938e81303d152593c36a64848ab1bd243dd0b8",
    "filename": "engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonWarn.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonWarn.png",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonWarn.png",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/resources/org/destinationsol/assets/textures/ui/nui/buttonWarn.png?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46"
  },
  {
    "sha": "7e11eb81c532a97bc56ab5a31b221bf0815e3d4f",
    "filename": "engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_desktop.ui",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_desktop.ui",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_desktop.ui",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_desktop.ui?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,51 @@\n+{\n+  \"type\": \"MainGameScreen\",\n+  \"skin\": \"engine:mainGameScreen\",\n+  \"contents\": {\n+    \"type\": \"relativeLayout\",\n+    \"contents\": [\n+      {\n+        \"type\": \"ColumnLayout\",\n+        \"id\": \"menuList\",\n+        \"layoutInfo\": {\n+          \"use-content-width\": true,\n+          \"use-content-height\": true,\n+          \"position-vertical-center\": {\n+            \"offset\": -100\n+          },\n+          \"position-right\": {}\n+        },\n+        \"columns\": 1,\n+        \"verticalSpacing\": 8,\n+        \"family\": \"sideUIButton\",\n+        \"contents\": [\n+          {\n+          \"type\": \"UIWarnButton\",\n+          \"text\": \"Menu\",\n+          \"id\": \"menuButton\"\n+          },\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Map\",\n+            \"id\": \"mapButton\"\n+          },\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Items\",\n+            \"id\": \"itemsButton\"\n+          },\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Talk\",\n+            \"id\": \"talkButton\"\n+          },\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Mercs\",\n+            \"id\": \"mercsButton\"\n+          }\n+        ]\n+      }\n+    ]\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "11ff594fcd240464728a07d456c82efc522fdd39",
    "filename": "engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_mobile.ui",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_mobile.ui",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_mobile.ui",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/resources/org/destinationsol/assets/ui/mainGameScreen_mobile.ui?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,68 @@\n+{\n+  \"type\": \"MainGameScreen\",\n+  \"skin\": \"engine:mainGameScreen\",\n+  \"contents\": {\n+    \"type\": \"relativeLayout\",\n+    \"contents\": [\n+      {\n+        \"type\": \"ColumnLayout\",\n+        \"id\": \"leftMenuList\",\n+        \"layoutInfo\": {\n+          \"use-content-width\": true,\n+          \"use-content-height\": true,\n+          \"position-vertical-center\": {\n+            \"offset\": -100\n+          },\n+          \"position-left\": {}\n+        },\n+        \"columns\": 1,\n+        \"verticalSpacing\": 8,\n+        \"family\": \"sideUIButton\",\n+        \"contents\": [\n+          {\n+          \"type\": \"UIWarnButton\",\n+          \"text\": \"Menu\",\n+          \"id\": \"menuButton\"\n+          },\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Map\",\n+            \"id\": \"mapButton\"\n+          }\n+        ]\n+      },\n+      {\n+        \"type\": \"ColumnLayout\",\n+        \"id\": \"rightMenuList\",\n+        \"layoutInfo\": {\n+          \"use-content-width\": true,\n+          \"use-content-height\": true,\n+          \"position-vertical-center\": {\n+            \"offset\": -100\n+          },\n+          \"position-right\": {}\n+        },\n+        \"columns\": 1,\n+        \"verticalSpacing\": 8,\n+        \"family\": \"sideUIButton\",\n+        \"contents\": [\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Mercs\",\n+            \"id\": \"mercsButton\"\n+          },\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Talk\",\n+            \"id\": \"talkButton\"\n+          },\n+          {\n+            \"type\": \"UIWarnButton\",\n+            \"text\": \"Items\",\n+            \"id\": \"itemsButton\"\n+          }\n+        ]\n+      }\n+    ]\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6da43deb3f8b679f80c6b3ae70b0357a30e74c85",
    "filename": "engine/src/main/resources/org/destinationsol/assets/ui/uiShipControlsScreen.ui",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/ui/uiShipControlsScreen.ui",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46/engine/src/main/resources/org/destinationsol/assets/ui/uiShipControlsScreen.ui",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/resources/org/destinationsol/assets/ui/uiShipControlsScreen.ui?ref=fbb5ef10b2a6ec9ee709fa28124a22ef7120ab46",
    "patch": "@@ -0,0 +1,104 @@\n+{\n+  \"type\": \"UIShipControlsScreen\",\n+  \"skin\": \"engine:mainGameScreen\",\n+  \"family\": \"controlsUIButton\",\n+  \"contents\": {\n+    \"type\": \"relativeLayout\",\n+    \"contents\": [\n+      {\n+        \"type\": \"UIWarnButton\",\n+        \"text\": \"Right\",\n+        \"clickSound\": null,\n+        \"activateWhenInvisible\": true,\n+        \"id\": \"rightButton\",\n+        \"layoutInfo\": {\n+          \"position-bottom\": {},\n+          \"position-right\": {},\n+          \"width\": 100,\n+          \"height\": 100\n+        }\n+      },\n+      {\n+        \"type\": \"UIWarnButton\",\n+        \"text\": \"Left\",\n+        \"clickSound\": null,\n+        \"activateWhenInvisible\": true,\n+        \"id\": \"leftButton\",\n+        \"layoutInfo\": {\n+          \"position-bottom\": {},\n+          \"position-right\": {\n+            \"widget\": \"rightButton\",\n+            \"target\": \"LEFT\",\n+            \"offset\": 10\n+          },\n+          \"width\": 100,\n+          \"height\": 100\n+        }\n+      },\n+      {\n+        \"type\": \"UIWarnButton\",\n+        \"text\": \"Ability\",\n+        \"clickSound\": null,\n+        \"activateWhenInvisible\": true,\n+        \"id\": \"abilityButton\",\n+        \"layoutInfo\": {\n+          \"position-bottom\": {\n+            \"widget\": \"rightButton\",\n+            \"target\": \"TOP\",\n+            \"offset\": 10\n+          },\n+          \"position-right\": {},\n+          \"width\": 100,\n+          \"height\": 100\n+        }\n+      },\n+      {\n+        \"type\": \"UIWarnButton\",\n+        \"text\": \"Fwd\",\n+        \"clickSound\": null,\n+        \"activateWhenInvisible\": true,\n+        \"id\": \"forwardButton\",\n+        \"layoutInfo\": {\n+          \"position-bottom\": {},\n+          \"position-left\": {},\n+          \"width\": 100,\n+          \"height\": 100\n+        }\n+      },\n+      {\n+        \"type\": \"UIWarnButton\",\n+        \"text\": \"Gun2\",\n+        \"clickSound\": null,\n+        \"activateWhenInvisible\": true,\n+        \"id\": \"gun2Button\",\n+        \"layoutInfo\": {\n+          \"position-bottom\": {},\n+          \"position-left\": {\n+            \"widget\": \"forwardButton\",\n+            \"target\": \"RIGHT\",\n+            \"offset\": 10\n+          },\n+          \"width\": 100,\n+          \"height\": 100\n+        }\n+      },\n+      {\n+        \"type\": \"UIWarnButton\",\n+        \"text\": \"Gun1\",\n+        \"clickSound\": null,\n+        \"activateWhenInvisible\": true,\n+        \"id\": \"gun1Button\",\n+        \"layoutInfo\": {\n+          \"position-bottom\": {\n+            \"widget\": \"forwardButton\",\n+            \"target\": \"TOP\",\n+            \"offset\": 10\n+          },\n+          \"position-left\": {},\n+          \"width\": 100,\n+          \"height\": 100\n+        }\n+      }\n+    ]\n+  }\n+}\n\\ No newline at end of file"
  }
]
