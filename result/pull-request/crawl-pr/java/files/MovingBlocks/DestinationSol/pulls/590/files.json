[
  {
    "sha": "267c06eb23fc92ffe00a080d2ccded6c2efcc440",
    "filename": "engine/src/main/java/org/destinationsol/SolApplication.java",
    "status": "modified",
    "additions": 8,
    "deletions": 3,
    "changes": 11,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/SolApplication.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/SolApplication.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/SolApplication.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -41,6 +41,8 @@\n import org.destinationsol.health.components.Health;\n import org.destinationsol.location.components.Angle;\n import org.destinationsol.location.components.Velocity;\n+import org.destinationsol.material.MaterialType;\n+import org.destinationsol.material.components.Material;\n import org.destinationsol.moneyDropping.components.DropsMoneyOnDestruction;\n import org.destinationsol.rendering.RenderableElement;\n import org.destinationsol.rendering.components.Renderable;\n@@ -272,7 +274,7 @@ private void draw() {\n             if (!entityCreated) {\n \n                 Size size = new Size();\n-                size.size = 2;\n+                size.size = 1;\n \n                 RenderableElement element = new RenderableElement();\n                 element.texture = SolRandom.randomElement(Assets.listTexturesMatching(\"engine:asteroid_.*\"));\n@@ -286,13 +288,16 @@ private void draw() {\n \n                 Position position = new Position();\n                 position.position = solGame.getHero().getShip().getPosition().cpy();\n-                position.position.y += 3;\n+                position.position.y += 1;\n \n                 Health health = new Health();\n                 health.currentHealth = 1;\n+                Material material = new Material();\n+                material.materialType = MaterialType.ROCK;\n \n                 EntityRef entityRef = entitySystemManager.getEntityManager().createEntity(graphicsComponent, position, size,\n-                        new Angle(), new Velocity(), new AsteroidMesh(), health, new DropsMoneyOnDestruction(), new CreatesRubbleOnDestruction());\n+                        new Angle(), new Velocity(), new AsteroidMesh(), health, new DropsMoneyOnDestruction(),\n+                        new CreatesRubbleOnDestruction(), material);\n                 \n                 entityRef.setComponent(new BodyLinked());\n                 entityCreated = true;"
  },
  {
    "sha": "0545680604b22a2d600007ea7d418d35a95c548d",
    "filename": "engine/src/main/java/org/destinationsol/assets/sound/OggSoundManager.java",
    "status": "modified",
    "additions": 109,
    "deletions": 7,
    "changes": 116,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/assets/sound/OggSoundManager.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/assets/sound/OggSoundManager.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/assets/sound/OggSoundManager.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -20,6 +20,7 @@\n import org.destinationsol.Const;\n import org.destinationsol.SolApplication;\n import org.destinationsol.assets.Assets;\n+import org.destinationsol.common.NotNull;\n import org.destinationsol.common.Nullable;\n import org.destinationsol.common.SolMath;\n import org.destinationsol.common.SolRandom;\n@@ -33,6 +34,7 @@\n import org.destinationsol.game.context.Context;\n import org.destinationsol.game.planet.Planet;\n import org.destinationsol.game.sound.DebugHintDrawer;\n+import org.terasology.gestalt.entitysystem.entity.EntityRef;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -69,7 +71,14 @@\n      * {@code SolObject} is the object the sound belongs to, inner map's {@code OggSound} is the sound in question,\n      * {@code Float} is an absolute time the sound will stop playing. (Absolute as in not relative to the current time)\n      */\n-    private final Map<SolObject, Map<OggSound, Float>> loopedSoundMap;\n+    private final Map<SolObject, Map<OggSound, Float>> loopedSoundMapOfSolObjects;\n+    /**\n+     * A container for working with looping sounds. Looped sounds are stored here per-entity, and this map is every so often\n+     * cleared, on the basis provided by calling each entity's {@link EntityRef#exists()} method.\n+     * {@code EntityRef} is the object the sound belongs to, inner map's {@code OggSound} is the sound in question,\n+     * {@code Float} is an absolute time the sound will stop playing. (Absolute as in not relative to the current time)\n+     */\n+    private final Map<EntityRef, Map<OggSound, Float>> loopedSoundMapOfEntities;\n     /**\n      * Used for drawing debug hints when {@link DebugOptions#SOUND_INFO} flag is set. See\n      * {@link #drawDebug(GameDrawer, SolCam)} for more info.\n@@ -90,7 +99,8 @@\n \n     public OggSoundManager(Context context) {\n         soundMap = new HashMap<>();\n-        loopedSoundMap = new HashMap<>();\n+        loopedSoundMapOfSolObjects = new HashMap<>();\n+        loopedSoundMapOfEntities = new HashMap<>();\n         debugHintDrawer = new DebugHintDrawer();\n         solApplication = context.get(SolApplication.class);\n         this.solCam = context.get(SolCam.class);\n@@ -192,6 +202,63 @@ public void play(SolGame game, PlayableSound playableSound, @Nullable Vector2 po\n         gdxSound.play(volume, pitch, 0);\n     }\n \n+    /**\n+     * Plays a sound at a particular position. If the sound has an associated loop, this will loop the sound, coming\n+     * from the entity.\n+     * <p>\n+     * {@code source} must not be null if the sound is specified to loop, and at least one of {@code source} or\n+     * {@code position} must be specified.\n+     *\n+     * @param game          Game to play the sound in\n+     * @param playableSound The sound to play\n+     * @param position      Position to play the sound at\n+     * @param soundSource   Bearer of a sound. Must not be null for looped sounds.\n+     */\n+    public void play(SolGame game, PlayableSound playableSound, @NotNull Vector2 position, @NotNull EntityRef soundSource) {\n+        play(game, playableSound, position, soundSource, 1f);\n+    }\n+\n+    /**\n+     * Plays a sound at a particular position. If the sound has an associated loop, this will loop the sound, coming\n+     * from the entity.\n+     *\n+     * @param game             Game to play the sound in\n+     * @param playableSound    The sound to play\n+     * @param position         Position to play the sound at\n+     * @param soundSource      Bearer of a sound. Must not be null for looped sounds.\n+     * @param volumeMultiplier Multiplier for sound volume\n+     */\n+    public void play(SolGame game, PlayableSound playableSound, @NotNull Vector2 position, @NotNull EntityRef soundSource, float volumeMultiplier) {\n+\n+        if (playableSound == null) {\n+            return;\n+        }\n+        if (soundSource == null || position == null) {\n+            throw new AssertionError(\"Position and source must be non-null\");\n+        }\n+\n+        OggSound sound = playableSound.getOggSound();\n+\n+        float volume = getVolume(game, position, volumeMultiplier, sound);\n+        if (volume <= 0) {\n+            return;\n+        }\n+\n+        // Calculate the pitch for the sound\n+        float pitch = SolRandom.randomFloat(.97f, 1.03f) * game.getTimeFactor() * playableSound.getBasePitch();\n+\n+        if (skipLooped(soundSource, sound, game.getTime())) {\n+            return;\n+        }\n+\n+        if (DebugOptions.SOUND_INFO) {\n+            debugHintDrawer.add(soundSource, position, sound.toString());\n+        }\n+\n+        Sound gdxSound = sound.getSound();\n+        gdxSound.play(volume, pitch, 0);\n+    }\n+\n     /**\n      * Calculates the volume a sound should be played at.\n      * This method takes several factors in account, more exactly: global game's volume, spreading of sound in vacuum\n@@ -246,10 +313,43 @@ private boolean skipLooped(SolObject source, OggSound sound, float time) {\n             return false;\n         }\n \n-        Map<OggSound, Float> looped = loopedSoundMap.get(source);\n+        Map<OggSound, Float> looped = loopedSoundMapOfSolObjects.get(source);\n+        if (looped == null) {\n+            looped = new HashMap<>();\n+            loopedSoundMapOfSolObjects.put(source, looped);\n+            return false;\n+        } else {\n+            Float endTime = looped.get(sound);\n+            if (endTime == null || endTime <= time) {\n+                looped.put(sound, time + sound.getLoopTime()); // argh, performance loss\n+                return false;\n+            } else {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns true when sound should not be played because of loop, false otherwise.\n+     * <p>\n+     * Sound should not be played when its {@code loopTime > 0} and {@code loopTime} time units have not yet passed\n+     * since it was last played on the object.\n+     * TODO: now handles even adding the sound to the list of looping sounds. Possibly extract that?\n+     *\n+     * @param source Object playing this sound.\n+     * @param sound  Sound to be played.\n+     * @param time   Game's current time.\n+     * @return true when sound should not be played because of loop, false otherwise.\n+     */\n+    private boolean skipLooped(EntityRef source, OggSound sound, float time) {\n+        if (sound.getLoopTime() == 0) {\n+            return false;\n+        }\n+\n+        Map<OggSound, Float> looped = loopedSoundMapOfEntities.get(source);\n         if (looped == null) {\n             looped = new HashMap<>();\n-            loopedSoundMap.put(source, looped);\n+            loopedSoundMapOfEntities.put(source, looped);\n             return false;\n         } else {\n             Float endTime = looped.get(sound);\n@@ -293,14 +393,16 @@ public void update(SolGame game, float timeStep) {\n     }\n \n     /**\n-     * Iterates {@link #loopedSoundMap} and removes any entries that are no longer in the game.\n+     * Iterates {@link #loopedSoundMapOfSolObjects} and {@link #loopedSoundMapOfEntities} and removes any entries that\n+     * are no longer in the game.\n      * <p>\n-     * (See {@link SolObject#shouldBeRemoved(SolGame)})\n+     * (See {@link SolObject#shouldBeRemoved(SolGame)} and {@link EntityRef#exists()})\n      *\n      * @param game Game currently in progress.\n      */\n     private void cleanLooped(SolGame game) {\n-        loopedSoundMap.keySet().removeIf(o -> o.shouldBeRemoved(game));\n+        loopedSoundMapOfSolObjects.keySet().removeIf(o -> o.shouldBeRemoved(game));\n+        loopedSoundMapOfEntities.keySet().removeIf(entity -> !entity.exists());\n     }\n \n     /**"
  },
  {
    "sha": "f06ef520450944f5ccc70474c887a99171cf42d5",
    "filename": "engine/src/main/java/org/destinationsol/assets/sound/SpecialSounds.java",
    "status": "modified",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/assets/sound/SpecialSounds.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/assets/sound/SpecialSounds.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/assets/sound/SpecialSounds.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -20,6 +20,7 @@\n import org.destinationsol.game.DmgType;\n import org.destinationsol.game.SolGame;\n import org.destinationsol.game.SolObject;\n+import org.destinationsol.material.MaterialType;\n \n import java.util.Arrays;\n \n@@ -106,4 +107,48 @@ public void playColl(SolGame game, float absImpulse, SolObject o, Vector2 positi\n         }\n         game.getSoundManager().play(game, metal ? metalColl : rockColl, position, o, absImpulse * Const.IMPULSE_TO_COLL_VOL);\n     }\n+\n+    /**\n+     * Gets the damage sound associated with the given {@link MaterialType} and {@link DmgType}. If no sound is defined,\n+     * null is returned.\n+     *\n+     * @param materialType the material type of the damaged entity\n+     * @param damageType   the type of damage done\n+     * @return the sound of the damage\n+     */\n+    public PlayableSound getHitSound(MaterialType materialType, DmgType damageType) {\n+        if (damageType == DmgType.ENERGY) {\n+            if (materialType == MaterialType.METAL) {\n+                return metalEnergyHit;\n+            }\n+            if (materialType == MaterialType.ROCK) {\n+                return rockEnergyHit;\n+            }\n+        }\n+        if (damageType == DmgType.BULLET) {\n+            if (materialType == MaterialType.METAL) {\n+                return metalBulletHit;\n+            }\n+            if (materialType == MaterialType.ROCK) {\n+                return rockBulletHit;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Gets the collision sound associated with the given {@link MaterialType}. If no sound is defined, null is returned.\n+     *\n+     * @param materialType the material type of the entity\n+     * @return the sound of the collision\n+     */\n+    public PlayableSound getCollisionSound(MaterialType materialType) {\n+        if (materialType == MaterialType.METAL) {\n+            return metalColl;\n+        }\n+        if (materialType == MaterialType.ROCK) {\n+            return rockColl;\n+        }\n+        return null;\n+    }\n }"
  },
  {
    "sha": "024afe39373c4e1faa385456f5c3f864b5fede23",
    "filename": "engine/src/main/java/org/destinationsol/asteroids/systems/AsteroidSoundSystem.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/asteroids/systems/AsteroidSoundSystem.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/asteroids/systems/AsteroidSoundSystem.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/asteroids/systems/AsteroidSoundSystem.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 The Terasology Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.destinationsol.asteroids.systems;\n+\n+import org.destinationsol.assets.sound.SpecialSounds;\n+import org.destinationsol.asteroids.components.AsteroidMesh;\n+import org.destinationsol.common.In;\n+import org.destinationsol.common.SolMath;\n+import org.destinationsol.entitysystem.EntitySystemManager;\n+import org.destinationsol.entitysystem.EventReceiver;\n+import org.destinationsol.location.components.Position;\n+import org.destinationsol.removal.events.DeletionEvent;\n+import org.destinationsol.removal.systems.DestructionSystem;\n+import org.destinationsol.size.components.Size;\n+import org.destinationsol.sound.events.SoundEvent;\n+import org.terasology.gestalt.entitysystem.entity.EntityRef;\n+import org.terasology.gestalt.entitysystem.event.Before;\n+import org.terasology.gestalt.entitysystem.event.EventResult;\n+import org.terasology.gestalt.entitysystem.event.ReceiveEvent;\n+\n+/**\n+ * This system plays asteroid-specific sounds.\n+ */\n+public class AsteroidSoundSystem implements EventReceiver {\n+\n+    @In\n+    private EntitySystemManager entitySystemManager;\n+\n+    @In\n+    private SpecialSounds specialSounds;\n+\n+    /**\n+     * When an asteroid is destroyed, this plays the asteroid destruction sound.\n+     */\n+    @ReceiveEvent(components = {AsteroidMesh.class, Position.class})\n+    @Before(DestructionSystem.class)\n+    public EventResult playDeathSound(DeletionEvent event, EntityRef entity) {\n+        float volumeMultiplier = 1;\n+        if (entity.hasComponent(Size.class)) {\n+            float size = entity.getComponent(Size.class).get().size;\n+            volumeMultiplier = SolMath.clamp(size / .5f);\n+        }\n+        entitySystemManager.sendEvent(new SoundEvent(specialSounds.asteroidCrack, volumeMultiplier), entity);\n+        return EventResult.CONTINUE;\n+    }\n+}"
  },
  {
    "sha": "d2063b988685348ebcbfebdb1f72636e8be6997f",
    "filename": "engine/src/main/java/org/destinationsol/game/SolGame.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/SolGame.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/SolGame.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/SolGame.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -126,6 +126,7 @@ public SolGame(String shipName, boolean isTutorial, boolean isNewGame, CommonDra\n \n         //TODO this no longer needs to be instantiated in SolGame\n         soundManager = solApplication.getSoundManager();\n+        context.put(OggSoundManager.class, soundManager);\n         SpecialSounds specialSounds = new SpecialSounds(soundManager);\n         context.put(SpecialSounds.class, specialSounds);\n "
  },
  {
    "sha": "18556320368ba2bc80cd05e89b7ac446b1c4a95c",
    "filename": "engine/src/main/java/org/destinationsol/game/projectile/Projectile.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/projectile/Projectile.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/projectile/Projectile.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/projectile/Projectile.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -132,12 +132,12 @@ public void update(SolGame game) {\n                         while (iterator.next()) {\n                             Vector2 entityPosition = iterator.getEntity().getComponent(Position.class).get().position;\n                             if (getPosition().dst2(entityPosition) <= config.aoeRadius) {\n-                                game.getEntitySystemManager().sendEvent(new DamageEvent(config.dmg), entity);\n+                                game.getEntitySystemManager().sendEvent(new DamageEvent(config.dmg, config.dmgType), entity);\n                             }\n                         }\n \n                     } else {\n-                        game.getEntitySystemManager().sendEvent(new DamageEvent(config.dmg), entity);\n+                        game.getEntitySystemManager().sendEvent(new DamageEvent(config.dmg, config.dmgType), entity);\n                     }\n                 }\n "
  },
  {
    "sha": "1a9b75b841383282d5a89ee1d8128414b9f01b6e",
    "filename": "engine/src/main/java/org/destinationsol/game/sound/DebugHint.java",
    "status": "modified",
    "additions": 16,
    "deletions": 1,
    "changes": 17,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/sound/DebugHint.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/sound/DebugHint.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/sound/DebugHint.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -22,6 +22,8 @@\n import org.destinationsol.game.SolCam;\n import org.destinationsol.game.SolGame;\n import org.destinationsol.game.SolObject;\n+import org.destinationsol.location.components.Position;\n+import org.terasology.gestalt.entitysystem.entity.EntityRef;\n \n import java.util.HashMap;\n import java.util.Iterator;\n@@ -35,8 +37,11 @@\n     private SolObject myOwner;\n     private String myMsg;\n \n-    public DebugHint(SolObject owner, Vector2 position) {\n+    private EntityRef entity;\n+\n+    public DebugHint(SolObject owner, EntityRef entity, Vector2 position) {\n         myOwner = owner;\n+        this.entity = entity;\n         this.position = new Vector2(position);\n         myMsgs = new HashMap<>();\n     }\n@@ -66,6 +71,16 @@ public void update(SolGame game) {\n             }\n         }\n \n+        if (entity != null) {\n+            if (!entity.exists()) {\n+                entity = null;\n+            } else {\n+                entity.getComponent(Position.class).ifPresent(entityPosition -> {\n+                    position.set(entityPosition.position);\n+                });\n+            }\n+        }\n+\n         long now = TimeUtils.millis();\n         boolean needsRebuild = false;\n         Iterator<Map.Entry<String, Long>> it = myMsgs.entrySet().iterator();"
  },
  {
    "sha": "8521f8801efba692a90aca9896065dfb5d8e2bee",
    "filename": "engine/src/main/java/org/destinationsol/game/sound/DebugHintDrawer.java",
    "status": "modified",
    "additions": 23,
    "deletions": 10,
    "changes": 33,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/sound/DebugHintDrawer.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/game/sound/DebugHintDrawer.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/sound/DebugHintDrawer.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -21,33 +21,43 @@\n import org.destinationsol.game.SolCam;\n import org.destinationsol.game.SolGame;\n import org.destinationsol.game.SolObject;\n+import org.terasology.gestalt.entitysystem.entity.EntityRef;\n \n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n \n public class DebugHintDrawer {\n-    private final Map<SolObject, DebugHint> myTracedNotes;\n-    private final Map<Vector2, DebugHint> myFreeNotes;\n+    private final Map<SolObject, DebugHint> tracedSolObjectNotes;\n+    private final Map<Vector2, DebugHint> freeNotes;\n+    private final Map<EntityRef, DebugHint> tracedEntityNotes;\n \n     public DebugHintDrawer() {\n-        myTracedNotes = new HashMap<>();\n-        myFreeNotes = new HashMap<>();\n+        tracedSolObjectNotes = new HashMap<>();\n+        freeNotes = new HashMap<>();\n+        tracedEntityNotes = new HashMap<>();\n     }\n \n     public void add(@Nullable SolObject owner, Vector2 position, String value) {\n         DebugHint dh;\n         if (owner == null) {\n-            dh = myFreeNotes.computeIfAbsent(position, p -> new DebugHint(null, p));\n+            dh = freeNotes.computeIfAbsent(position, p -> new DebugHint(null, null, p));\n         } else {\n-            dh = myTracedNotes.computeIfAbsent(owner, o -> new DebugHint(o, o.getPosition()));\n+            dh = tracedSolObjectNotes.computeIfAbsent(owner, o -> new DebugHint(o, null, o.getPosition()));\n         }\n         dh.add(value);\n     }\n \n+    public void add(EntityRef entity, Vector2 position, String value) {\n+        DebugHint debugHint;\n+        debugHint = tracedEntityNotes.computeIfAbsent(entity, entityRef -> new DebugHint(null, entityRef, position));\n+        debugHint.add(value);\n+    }\n+\n     public void update(SolGame game) {\n-        updateEach(game, myTracedNotes.values().iterator());\n-        updateEach(game, myFreeNotes.values().iterator());\n+        updateEach(game, tracedSolObjectNotes.values().iterator());\n+        updateEach(game, freeNotes.values().iterator());\n+        updateEach(game, tracedEntityNotes.values().iterator());\n     }\n \n     private void updateEach(SolGame game, Iterator<DebugHint> it) {\n@@ -61,10 +71,13 @@ private void updateEach(SolGame game, Iterator<DebugHint> it) {\n     }\n \n     public void draw(GameDrawer drawer, SolCam solCam) {\n-        for (DebugHint n : myTracedNotes.values()) {\n+        for (DebugHint n : tracedSolObjectNotes.values()) {\n+            n.draw(drawer, solCam);\n+        }\n+        for (DebugHint n : freeNotes.values()) {\n             n.draw(drawer, solCam);\n         }\n-        for (DebugHint n : myFreeNotes.values()) {\n+        for (DebugHint n : tracedEntityNotes.values()) {\n             n.draw(drawer, solCam);\n         }\n     }"
  },
  {
    "sha": "2034c0d1ad39230eab5ce152ae223a3c1c33fecb",
    "filename": "engine/src/main/java/org/destinationsol/game/sound/OggSoundManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 199,
    "changes": 199,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/134894b66130b92372b05a51a6603bb0bb8bc161/engine/src/main/java/org/destinationsol/game/sound/OggSoundManager.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/134894b66130b92372b05a51a6603bb0bb8bc161/engine/src/main/java/org/destinationsol/game/sound/OggSoundManager.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/sound/OggSoundManager.java?ref=134894b66130b92372b05a51a6603bb0bb8bc161",
    "patch": "@@ -1,199 +0,0 @@\n-/*\n- * Copyright 2016 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.destinationsol.game.sound;\n-\n-import com.badlogic.gdx.audio.Sound;\n-import com.badlogic.gdx.math.Vector2;\n-import org.destinationsol.Const;\n-import org.destinationsol.assets.Assets;\n-import org.destinationsol.assets.sound.OggSound;\n-import org.destinationsol.assets.sound.PlayableSound;\n-import org.destinationsol.common.Nullable;\n-import org.destinationsol.common.SolMath;\n-import org.destinationsol.common.SolRandom;\n-import org.destinationsol.game.DebugOptions;\n-import org.destinationsol.game.GameDrawer;\n-import org.destinationsol.game.Hero;\n-import org.destinationsol.game.SolCam;\n-import org.destinationsol.game.SolGame;\n-import org.destinationsol.game.SolObject;\n-import org.destinationsol.game.planet.Planet;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public class OggSoundManager {\n-    // private static Logger logger = LoggerFactory.getLogger(OggSoundManager.class);\n-    private final Map<String, OggSound> soundMap;\n-    private final Map<SolObject, Map<OggSound, Float>> loopedSoundMap;\n-    private final DebugHintDrawer debugHintDrawer;\n-\n-    private float myLoopAwait;\n-\n-    public OggSoundManager() {\n-        this.soundMap = new HashMap<>();\n-        this.loopedSoundMap = new HashMap<>();\n-        this.debugHintDrawer = new DebugHintDrawer();\n-    }\n-\n-    public OggSound getSound(String path) {\n-        return getSound(path, 1.0f);\n-    }\n-\n-    public OggSound getSound(String path, float basePitch) {\n-        if (soundMap.containsKey(path)) {\n-            return soundMap.get(path);\n-        }\n-\n-        OggSound sound = Assets.getSound(path);\n-        sound.setBasePitch(basePitch);\n-        soundMap.put(path, sound);\n-        return sound;\n-    }\n-\n-    /**\n-     * Plays a sound. Source must not be null.\n-     *\n-     * @param position         position of a sound. If null, source.getPosition() will be used\n-     * @param source           bearer of a sound. Must not be null for looped sounds\n-     * @param volumeMultiplier multiplier for sound volume\n-     */\n-    public void play(SolGame game, PlayableSound playableSound, @Nullable Vector2 position, @Nullable SolObject source, float volumeMultiplier) {\n-        if (playableSound == null) {\n-            return;\n-        }\n-\n-        OggSound sound = playableSound.getOggSound();\n-        // logger.debug(\"Playing sound: {}\", sound.getUrn().toString());\n-\n-        // Perform some initial argument validation\n-        if (source == null && position == null) {\n-            throw new AssertionError(\"Either position or source must be non-null\");\n-        }\n-        if (source == null && sound.getLoopTime() > 0) {\n-            throw new AssertionError(\"Attempted to loop a sound without a parent object: \" + sound.getUrn());\n-        }\n-        if (position == null) {\n-            position = source.getPosition();\n-        }\n-\n-        // Calculate the volume multiplier for the sound\n-        float globalVolumeMultiplier = game.getSolApplication().getOptions().sfxVolume.getVolume();\n-        if (globalVolumeMultiplier == 0) {\n-            return;\n-        }\n-\n-        Vector2 cameraPosition = game.getCam().getPosition();\n-        Planet nearestPlanet = game.getPlanetManager().getNearestPlanet();\n-\n-        float airPercentage = 0;\n-        if (nearestPlanet.getConfig().skyConfig != null) {\n-            float distanceToAtmosphere = cameraPosition.dst(nearestPlanet.getPosition()) - nearestPlanet.getGroundHeight() - Const.ATM_HEIGHT / 2;\n-            airPercentage = SolMath.clamp(1 - distanceToAtmosphere / (Const.ATM_HEIGHT / 2));\n-        }\n-        if (DebugOptions.SOUND_IN_SPACE) {\n-            airPercentage = 1;\n-        }\n-\n-        float maxSoundDist = 1 + 1.5f * Const.CAM_VIEW_DIST_GROUND * airPercentage;\n-\n-        Hero hero = game.getHero();\n-        float soundRadius = hero.isTranscendent() ? 0 : hero.getHull().config.getApproxRadius();\n-        float distance = position.dst(cameraPosition) - soundRadius;\n-        float distanceMultiplier = SolMath.clamp(1 - distance / maxSoundDist);\n-\n-        float volume = sound.getBaseVolume() * volumeMultiplier * distanceMultiplier * globalVolumeMultiplier;\n-\n-        if (volume <= 0) {\n-            return;\n-        }\n-\n-        // Calculate the pitch for the sound\n-        float pitch = SolRandom.randomFloat(.97f, 1.03f) * game.getTimeFactor() * playableSound.getBasePitch();\n-\n-        if (skipLooped(source, sound, game.getTime())) {\n-            return;\n-        }\n-\n-        if (DebugOptions.SOUND_INFO) {\n-            debugHintDrawer.add(source, position, sound.toString());\n-        }\n-\n-        Sound gdxSound = sound.getSound();\n-        gdxSound.play(volume, pitch, 0);\n-    }\n-\n-    /**\n-     * Plays a sound. Source must not be null.\n-     *\n-     * @param position position of a sound. If null, source.getPosition() will be used\n-     * @param source   bearer of a sound. Must not be null for looped sounds\n-     */\n-    public void play(SolGame game, PlayableSound sound, @Nullable Vector2 position, @Nullable SolObject source) {\n-        this.play(game, sound, position, source, 1f);\n-    }\n-\n-    private boolean skipLooped(SolObject source, OggSound sound, float time) {\n-        if (sound.getLoopTime() == 0) {\n-            return false;\n-        }\n-\n-        boolean playing;\n-        Map<OggSound, Float> looped = loopedSoundMap.get(source);\n-        if (looped == null) {\n-            looped = new HashMap<>();\n-            loopedSoundMap.put(source, looped);\n-            playing = false;\n-        } else {\n-            Float endTime = looped.get(sound);\n-            if (endTime == null || endTime <= time) {\n-                looped.put(sound, time + sound.getLoopTime()); // argh, performance loss\n-                playing = false;\n-            } else {\n-                playing = time < endTime;\n-            }\n-        }\n-        return playing;\n-    }\n-\n-    public void drawDebug(GameDrawer drawer, SolCam solCam) {\n-        if (DebugOptions.SOUND_INFO) {\n-            debugHintDrawer.draw(drawer, solCam);\n-        }\n-    }\n-\n-    public void update(SolGame game) {\n-        if (DebugOptions.SOUND_INFO) {\n-            debugHintDrawer.update(game);\n-        }\n-\n-        myLoopAwait -= game.getTimeStep();\n-        if (myLoopAwait <= 0) {\n-            myLoopAwait = 30;\n-            cleanLooped(game);\n-        }\n-    }\n-\n-    private void cleanLooped(SolGame game) {\n-        loopedSoundMap.keySet().removeIf(o -> o.shouldBeRemoved(game));\n-    }\n-\n-    public void dispose() {\n-        for (OggSound sound : soundMap.values()) {\n-            sound.doDispose();\n-        }\n-    }\n-}"
  },
  {
    "sha": "93be81378e97cd04762fd473c4e0871ff2a2b120",
    "filename": "engine/src/main/java/org/destinationsol/game/sound/OggSoundSet.java",
    "status": "removed",
    "additions": 0,
    "deletions": 54,
    "changes": 54,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/134894b66130b92372b05a51a6603bb0bb8bc161/engine/src/main/java/org/destinationsol/game/sound/OggSoundSet.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/134894b66130b92372b05a51a6603bb0bb8bc161/engine/src/main/java/org/destinationsol/game/sound/OggSoundSet.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/sound/OggSoundSet.java?ref=134894b66130b92372b05a51a6603bb0bb8bc161",
    "patch": "@@ -1,54 +0,0 @@\n-/*\n- * Copyright 2016 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.destinationsol.game.sound;\n-\n-import org.destinationsol.assets.sound.OggSound;\n-import org.destinationsol.assets.sound.PlayableSound;\n-import org.destinationsol.common.SolRandom;\n-\n-import java.util.List;\n-\n-/**\n- * Represents a set of random OggSound urns with a single basePitch assigned to every of them.\n- * <p>\n- * This is an alternative to sounds being randomly fetched from a specified folder -\n- * a workflow that isn't viable with gestalt.\n- */\n-public class OggSoundSet implements PlayableSound {\n-    private final OggSoundManager oggSoundManager;\n-    private final List<String> urnList;\n-    private final float basePitch;\n-\n-    public OggSoundSet(OggSoundManager oggSoundManager, List<String> urnList, float basePitch) {\n-        this.oggSoundManager = oggSoundManager;\n-        this.urnList = urnList;\n-        this.basePitch = basePitch;\n-    }\n-\n-    public OggSoundSet(OggSoundManager oggSoundManager, List<String> urnList) {\n-        this(oggSoundManager, urnList, 1.0f);\n-    }\n-\n-    @Override\n-    public OggSound getOggSound() {\n-        return oggSoundManager.getSound(SolRandom.randomElement(urnList));\n-    }\n-\n-    @Override\n-    public float getBasePitch() {\n-        return basePitch;\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "ef2aa2cfd60e65ee9246b9213248df9df75731cb",
    "filename": "engine/src/main/java/org/destinationsol/game/sound/SpecialSounds.java",
    "status": "removed",
    "additions": 0,
    "deletions": 110,
    "changes": 110,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/134894b66130b92372b05a51a6603bb0bb8bc161/engine/src/main/java/org/destinationsol/game/sound/SpecialSounds.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/134894b66130b92372b05a51a6603bb0bb8bc161/engine/src/main/java/org/destinationsol/game/sound/SpecialSounds.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/game/sound/SpecialSounds.java?ref=134894b66130b92372b05a51a6603bb0bb8bc161",
    "patch": "@@ -1,110 +0,0 @@\n-/*\n- * Copyright 2017 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.destinationsol.game.sound;\n-\n-import com.badlogic.gdx.math.Vector2;\n-import org.destinationsol.Const;\n-import org.destinationsol.assets.sound.PlayableSound;\n-import org.destinationsol.game.DmgType;\n-import org.destinationsol.game.SolGame;\n-import org.destinationsol.game.SolObject;\n-\n-import java.util.Arrays;\n-\n-public class SpecialSounds {\n-\n-    public final PlayableSound metalColl;\n-    public final PlayableSound metalEnergyHit;\n-    public final PlayableSound rockColl;\n-    public final PlayableSound rockEnergyHit;\n-    public final PlayableSound asteroidCrack;\n-    public final PlayableSound shipExplosion;\n-    public final PlayableSound forceBeaconWork;\n-    public final PlayableSound doorMove;\n-    public final PlayableSound abilityRecharged;\n-    public final PlayableSound abilityRefused;\n-    public final PlayableSound controlDisabled;\n-    public final PlayableSound controlEnabled;\n-    public final PlayableSound lootThrow;\n-    public final PlayableSound transcendentCreated;\n-    public final PlayableSound transcendentFinished;\n-\n-    public final PlayableSound metalBulletHit;\n-    public final PlayableSound rockBulletHit;\n-    public final PlayableSound burning;\n-    public final PlayableSound transcendentMove;\n-\n-    public SpecialSounds(OggSoundManager soundManager) {\n-        // OggSound\n-        metalColl = soundManager.getSound(\"core:metalCollision\");\n-        metalEnergyHit = soundManager.getSound(\"core:empty\");\n-        rockColl = soundManager.getSound(\"core:rockCollision\");\n-        rockEnergyHit = soundManager.getSound(\"core:empty\");\n-        asteroidCrack = soundManager.getSound(\"core:asteroidCrack\");\n-        shipExplosion = soundManager.getSound(\"core:shipExplosion\");\n-        forceBeaconWork = soundManager.getSound(\"core:forceBeaconWork\");\n-        doorMove = soundManager.getSound(\"core:controlEnabled\");\n-        abilityRecharged = soundManager.getSound(\"core:abilityRecharged\");\n-        abilityRefused = soundManager.getSound(\"core:abilityRefused\");\n-        controlDisabled = soundManager.getSound(\"core:controlDisabled\");\n-        controlEnabled = soundManager.getSound(\"core:controlEnabled\");\n-        lootThrow = soundManager.getSound(\"core:rocketLauncherShoot\");\n-        transcendentCreated = soundManager.getSound(\"core:teleport\");\n-        transcendentFinished = soundManager.getSound(\"core:teleport\");\n-\n-        // OggSoundSet\n-        metalBulletHit = new OggSoundSet(soundManager, Arrays.asList(\"core:metalBulletHit0\", \"core:metalBulletHit1\", \"core:metalBulletHit2\"), 1.1f);\n-        rockBulletHit = new OggSoundSet(soundManager, Arrays.asList(\"core:rockBulletHit0\", \"core:rockBulletHit1\"));\n-        burning = new OggSoundSet(soundManager, Arrays.asList(\"core:burning2\", \"core:burning3\", \"core:burning4\"));\n-        transcendentMove = new OggSoundSet(soundManager, Arrays.asList(\"core:transcendentMove\", \"core:transcendentMove2\", \"core:transcendentMove3\", \"core:transcendentMove4\"));\n-    }\n-\n-    public PlayableSound hitSound(boolean forMetal, DmgType dmgType) {\n-        if (dmgType == DmgType.ENERGY) {\n-            return forMetal ? metalEnergyHit : rockEnergyHit;\n-        }\n-        if (dmgType == DmgType.BULLET) {\n-            return forMetal ? metalBulletHit : rockBulletHit;\n-        }\n-        return null;\n-    }\n-\n-    public void playHit(SolGame game, SolObject o, Vector2 position, DmgType dmgType) {\n-        if (o == null) {\n-            return;\n-        }\n-        Boolean metal = o.isMetal();\n-        if (metal == null) {\n-            return;\n-        }\n-        PlayableSound sound = hitSound(metal, dmgType);\n-        if (sound == null) {\n-            return;\n-        }\n-        game.getSoundManager().play(game, sound, position, o);\n-    }\n-\n-    public void playColl(SolGame game, float absImpulse, SolObject o, Vector2 position) {\n-        if (o == null || absImpulse < .1f) {\n-            return;\n-        }\n-        Boolean metal = o.isMetal();\n-        if (metal == null) {\n-            return;\n-        }\n-        game.getSoundManager().play(game, metal ? metalColl : rockColl, position, o, absImpulse * Const.IMPULSE_TO_COLL_VOL);\n-    }\n-}"
  },
  {
    "sha": "ae5ed57ae42147bb55f70bcfb35b8e726ebdd972",
    "filename": "engine/src/main/java/org/destinationsol/health/events/DamageEvent.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/health/events/DamageEvent.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/health/events/DamageEvent.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/health/events/DamageEvent.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -15,6 +15,7 @@\n  */\n package org.destinationsol.health.events;\n \n+import org.destinationsol.game.DmgType;\n import org.terasology.gestalt.entitysystem.event.Event;\n \n /**\n@@ -23,12 +24,22 @@\n public class DamageEvent implements Event {\n \n     private float damage;\n+    private DmgType damageType;\n \n     public DamageEvent(float damage) {\n         this.damage = damage;\n     }\n \n+    public DamageEvent(float damage, DmgType damageType) {\n+        this.damage = damage;\n+        this.damageType = damageType;\n+    }\n+\n     public float getDamage() {\n         return damage;\n     }\n+\n+    public DmgType getDamageType() {\n+        return damageType;\n+    }\n }"
  },
  {
    "sha": "adae0b62b3edaaa2c39914d637dc3740f7033f1a",
    "filename": "engine/src/main/java/org/destinationsol/material/MaterialType.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/material/MaterialType.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/material/MaterialType.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/material/MaterialType.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 The Terasology Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.destinationsol.material;\n+\n+/**\n+ * The types of materials that an entity can be composed of.\n+ */\n+public enum MaterialType {\n+    METAL, ROCK\n+}"
  },
  {
    "sha": "61f664ab3f511dbdbc69c9cc071ae49d896007b0",
    "filename": "engine/src/main/java/org/destinationsol/material/components/Material.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/material/components/Material.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/material/components/Material.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/material/components/Material.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 The Terasology Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.destinationsol.material.components;\n+\n+import org.destinationsol.material.MaterialType;\n+import org.terasology.gestalt.entitysystem.component.Component;\n+\n+/**\n+ * Indicates what type of material the entity is made of.\n+ */\n+public class Material implements Component<Material> {\n+\n+    public MaterialType materialType;\n+\n+    @Override\n+    public void copy(Material other) {\n+        this.materialType = other.materialType;\n+    }\n+}"
  },
  {
    "sha": "f429f84274d3ac4910d468c3ecbcc591cc23d527",
    "filename": "engine/src/main/java/org/destinationsol/sound/events/SoundEvent.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/sound/events/SoundEvent.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/sound/events/SoundEvent.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/sound/events/SoundEvent.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 The Terasology Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.destinationsol.sound.events;\n+\n+import org.destinationsol.assets.sound.PlayableSound;\n+import org.terasology.gestalt.entitysystem.event.Event;\n+\n+/**\n+ * Plays a sound emitting from an entity.\n+ */\n+public class SoundEvent implements Event {\n+\n+    public final PlayableSound playableSound;\n+    public final float volumeMultplier;\n+\n+    public SoundEvent(PlayableSound playableSound, float volumeMultplier) {\n+        this.playableSound = playableSound;\n+        this.volumeMultplier = volumeMultplier;\n+    }\n+}"
  },
  {
    "sha": "44c1cfb592a2d2e41d58a11beb31c9f2f308b0e8",
    "filename": "engine/src/main/java/org/destinationsol/sound/systems/SoundPlayingSystem.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/MovingBlocks/DestinationSol/blob/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/sound/systems/SoundPlayingSystem.java",
    "raw_url": "https://github.com/MovingBlocks/DestinationSol/raw/c90790ffdd1e275f8084883a4ab65a36587f4eb5/engine/src/main/java/org/destinationsol/sound/systems/SoundPlayingSystem.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/DestinationSol/contents/engine/src/main/java/org/destinationsol/sound/systems/SoundPlayingSystem.java?ref=c90790ffdd1e275f8084883a4ab65a36587f4eb5",
    "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 The Terasology Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.destinationsol.sound.systems;\n+\n+import com.badlogic.gdx.math.Vector2;\n+import org.destinationsol.Const;\n+import org.destinationsol.assets.sound.OggSoundManager;\n+import org.destinationsol.assets.sound.PlayableSound;\n+import org.destinationsol.assets.sound.SpecialSounds;\n+import org.destinationsol.common.In;\n+import org.destinationsol.entitysystem.EventReceiver;\n+import org.destinationsol.force.events.ImpulseEvent;\n+import org.destinationsol.game.DmgType;\n+import org.destinationsol.game.SolGame;\n+import org.destinationsol.health.events.DamageEvent;\n+import org.destinationsol.location.components.Position;\n+import org.destinationsol.material.MaterialType;\n+import org.destinationsol.material.components.Material;\n+import org.destinationsol.sound.events.SoundEvent;\n+import org.terasology.gestalt.entitysystem.entity.EntityRef;\n+import org.terasology.gestalt.entitysystem.event.EventResult;\n+import org.terasology.gestalt.entitysystem.event.ReceiveEvent;\n+\n+/**\n+ * This system plays sounds emitting from entities with a {@link Position} component, using the {@link OggSoundManager}.\n+ */\n+public class SoundPlayingSystem implements EventReceiver {\n+\n+    @In\n+    private SolGame game;\n+\n+    @In\n+    private OggSoundManager soundManager;\n+\n+    @In\n+    private SpecialSounds specialSounds;\n+\n+    /**\n+     * Plays a given sound emitting from an entity, at that entity's {@link Position}.\n+     */\n+    @ReceiveEvent(components = Position.class)\n+    public EventResult playSound(SoundEvent event, EntityRef entity) {\n+        Vector2 position = entity.getComponent(Position.class).get().position;\n+        soundManager.play(game, event.playableSound, position, entity, event.volumeMultplier);\n+        return EventResult.CONTINUE;\n+    }\n+\n+    /**\n+     * When an entity takes damage, this plays a sound based on the type of damage taken and the type of material that\n+     * the entity is. No sound will be played if there is no defined sound for the {@link DmgType}/{@link MaterialType}\n+     * combination, or if either the {@link DmgType} or {@link MaterialType} is null.\n+     */\n+    @ReceiveEvent(components = {Position.class, Material.class})\n+    public EventResult playDamageSound(DamageEvent event, EntityRef entity) {\n+        MaterialType materialType = entity.getComponent(Material.class).get().materialType;\n+        PlayableSound sound = specialSounds.getHitSound(materialType, event.getDamageType());\n+        if (sound != null) {\n+            Vector2 position = entity.getComponent(Position.class).get().position;\n+            soundManager.play(game, sound, position, entity);\n+        }\n+        return EventResult.CONTINUE;\n+    }\n+\n+    /**\n+     * When an entity experiences a collision, this plays a sound based on the type of material that the entity is. No\n+     * sound will be played if there is no defined collision sound for the {@link MaterialType}, or if the\n+     * {@link MaterialType} is null.\n+     */\n+    @ReceiveEvent(components = {Position.class, Material.class})\n+    public EventResult playCollisionSound(ImpulseEvent event, EntityRef entity) {\n+        float magnitude = event.getMagnitude();\n+        if (magnitude >= .1f) {\n+            Vector2 position = entity.getComponent(Position.class).get().position;\n+            MaterialType materialType = entity.getComponent(Material.class).get().materialType;\n+            PlayableSound collisionSound = specialSounds.getCollisionSound(materialType);\n+            if (collisionSound != null) {\n+                soundManager.play(game, collisionSound, position, entity, magnitude * Const.IMPULSE_TO_COLL_VOL);\n+            }\n+        }\n+        return EventResult.CONTINUE;\n+    }\n+}"
  }
]
