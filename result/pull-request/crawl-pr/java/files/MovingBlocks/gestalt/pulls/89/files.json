[
  {
    "sha": "0475464e50fbbb9fbdc44d909e15c796b1755769",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/DefaultBeanContext.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/DefaultBeanContext.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/DefaultBeanContext.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/DefaultBeanContext.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -7,6 +7,8 @@\n import org.terasology.context.AbstractBeanDefinition;\n import org.terasology.context.BeanDefinition;\n import org.terasology.gestalt.di.exceptions.BeanResolutionException;\n+import org.terasology.gestalt.di.function.Function0;\n+import org.terasology.gestalt.di.function.Function2;\n import org.terasology.gestalt.di.injection.Qualifier;\n import org.terasology.gestalt.di.instance.BeanProvider;\n import org.terasology.gestalt.di.instance.ClassProvider;\n@@ -87,10 +89,12 @@ private void bindRegistry(ServiceRegistry registry) {\n             qualifierMapping.put(expression.qualifier, key);\n         }\n \n-        if (expression.supplier == null) {\n+        if (expression.function == null) {\n             providers.put(key, new ClassProvider(environment, expression.lifetime, expression.target));\n         } else {\n-            providers.put(key, new SupplierProvider(environment, expression.lifetime, expression.target, expression.supplier));\n+            if (expression.function instanceof Function0) {\n+                providers.put(key, new SupplierProvider(environment, expression.lifetime, expression.target, (Function0) expression.function));\n+            }\n         }\n     }\n \n@@ -227,7 +231,7 @@ private void bindRegistry(ServiceRegistry registry) {\n         return getBean(identifier);\n     }\n \n-    \n+\n     @Override\n     public <T> List<T> getBeans(BeanKey<T> identifier) {\n         Optional<BeanContext> cntx = Optional.of(this);\n@@ -256,7 +260,7 @@ private void bindRegistry(ServiceRegistry registry) {\n                 .qualifiedBy(qualifier);\n         return getBeans(identifier);\n     }\n-    \n+\n     private <T> Stream<T> internalMultipleResolve(BeanKey identifier, DefaultBeanContext targetContext) {\n        return getBeanKeys(identifier)\n                .map( key -> {"
  },
  {
    "sha": "95e13b4ee7bfa87db50a174a311d35652136109e",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/ReflectionAnnotationValue.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/ReflectionAnnotationValue.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/ReflectionAnnotationValue.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/ReflectionAnnotationValue.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,100 @@\n+package org.terasology.gestalt.di;\n+\n+import org.terasology.context.AnnotationValue;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class ReflectionAnnotationValue<S extends Annotation> implements AnnotationValue<S> {\n+    public ReflectionAnnotationValue(Annotation annotation){\n+\n+    }\n+\n+    @Override\n+    public String getAnnotationName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<S> getAnnotationType() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean hasAnnotation(String annotation) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean hasAnnotation(Class<? extends Annotation> annotation) {\n+        return false;\n+    }\n+\n+    @Override\n+    public <T extends Annotation> AnnotationValue<T>[] getAnnotation(Class<T> annotation) {\n+        return new AnnotationValue[0];\n+    }\n+\n+    @Override\n+    public AnnotationValue<Annotation>[] getAnnotation(String annotation) {\n+        return new AnnotationValue[0];\n+    }\n+\n+    @Override\n+    public boolean hasStereotype(Class<? extends Annotation> ann) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean hasStereotype(String ann) {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<AnnotationValue<Annotation>> getAnnotationsByStereotype(String stereotype) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<AnnotationValue<Annotation>> getAnnotationsByStereotype(Class<? extends Annotation> stereotype) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<AnnotationValue<Annotation>> findAnnotations(String annotation) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<AnnotationValue<Annotation>> findAnnotations(Class<? extends Annotation> annotation) {\n+        return null;\n+    }\n+\n+    @Override\n+    public OptionalInt intValue(String field) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Optional<String> stringValue(String field) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public boolean hasField(String field) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Object getRawValue(String field) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Iterator<AnnotationValue<Annotation>[]> iterator() {\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "a6e009a9b1badd1e2e9b1f73acbbec8889e3b628",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/ServiceRegistry.java",
    "status": "modified",
    "additions": 57,
    "deletions": 3,
    "changes": 60,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/ServiceRegistry.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/ServiceRegistry.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/ServiceRegistry.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -1,13 +1,24 @@\n package org.terasology.gestalt.di;\n \n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import org.terasology.gestalt.di.function.BeanFunction;\n+import org.terasology.gestalt.di.function.Function0;\n+import org.terasology.gestalt.di.function.Function1;\n+import org.terasology.gestalt.di.function.Function2;\n+import org.terasology.gestalt.di.function.Function3;\n+import org.terasology.gestalt.di.function.Function4;\n+import org.terasology.gestalt.di.function.Function5;\n+import org.terasology.gestalt.di.function.Function6;\n+import org.terasology.gestalt.di.function.Function7;\n+import org.terasology.gestalt.di.function.Function8;\n import org.terasology.gestalt.di.injection.Qualifier;\n import org.terasology.gestalt.di.injection.Qualifiers;\n \n import java.lang.annotation.Annotation;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n public class ServiceRegistry {\n@@ -42,12 +53,15 @@ public void registerScanner(BeanScanner scanner) {\n     }\n \n     public static class InstanceExpression<T> {\n+\n+\n         protected final Class<T> root;\n         protected Class<? extends T> target;\n         protected Lifetime lifetime;\n-        protected Supplier<? extends T> supplier;\n         protected Qualifier<?> qualifier;\n \n+        protected BeanFunction function;\n+\n         public InstanceExpression<T> lifetime(Lifetime lifetime) {\n             this.lifetime = lifetime;\n             return this;\n@@ -60,8 +74,48 @@ public InstanceExpression(Class<T> root) {\n         }\n \n         @CanIgnoreReturnValue\n-        public InstanceExpression<T> use(Supplier<T> instance) {\n-            this.supplier = instance;\n+        public InstanceExpression<T> use(Function0<T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1> InstanceExpression<T> use(Function1<T1,T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1,T2> InstanceExpression<T> use(Function2<T1, T2, T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1,T2,T3> InstanceExpression<T> use(Function3<T1,T2,T3,T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1,T2,T3,T4> InstanceExpression<T> use(Function4<T1,T2,T3,T4,T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1,T2,T3,T4,T5> InstanceExpression<T> use(Function5<T1,T2,T3,T4,T5,T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1,T2,T3,T4,T5,T6> InstanceExpression<T> use(Function6<T1,T2,T3,T4,T5,T6,T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1,T2,T3,T4,T5,T6,T7> InstanceExpression<T> use(Function7<T1,T2,T3,T4,T5,T6,T7,T> instance) {\n+            this.function = instance;\n+            return this;\n+        }\n+        @CanIgnoreReturnValue\n+        public <T1,T2,T3,T4,T5,T6,T7,T8> InstanceExpression<T> use(Function8<T1,T2,T3,T4,T5,T6,T7,T8,T> instance) {\n+            this.function = instance;\n             return this;\n         }\n "
  },
  {
    "sha": "7281deb888583fa18842dce540d9b2a2d6bf6721",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/BeanFunction.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/BeanFunction.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/BeanFunction.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/BeanFunction.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,4 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface BeanFunction {\n+}"
  },
  {
    "sha": "82d32938bd8e09bd57a91e13e9c0734ca9669dcf",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function0.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function0.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function0.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function0.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,6 @@\n+package org.terasology.gestalt.di.function;\n+\n+@FunctionalInterface\n+public interface Function0< R> extends BeanFunction {\n+    R apply();\n+}"
  },
  {
    "sha": "e14d91cfcb7cb84541fae14c5984733a04e6edd6",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function1.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function1.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function1.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function1.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,6 @@\n+package org.terasology.gestalt.di.function;\n+\n+@FunctionalInterface\n+public interface Function1<T1, R> extends BeanFunction {\n+    R apply(T1 t1);\n+}"
  },
  {
    "sha": "3a820101d31d533267375c5f4644c3cc68a4e21f",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function2.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function2.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function2.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function2.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,5 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface Function2<T1, T2, R> extends BeanFunction {\n+    R apply(T1 t1, T2 t2);\n+}"
  },
  {
    "sha": "e7c7264f2bb357d7525318320539a04285a932c0",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function3.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function3.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function3.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function3.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,5 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface Function3<T1, T2, T3, R> extends BeanFunction {\n+    R apply(T1 t1, T2 t2, T3 t3);\n+}"
  },
  {
    "sha": "f338343cd2da39daf83b3ad710099621ff3e4af5",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function4.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function4.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function4.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function4.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,6 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface Function4<T1, T2, T3, T4, R>extends BeanFunction {\n+\n+    R apply(T1 t1, T2 t2, T3 t3, T4 t4);\n+}"
  },
  {
    "sha": "669a5640d888260e2e3ec53bfba68781d0f76000",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function5.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function5.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function5.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function5.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,6 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface Function5<T1, T2, T3, T4, T5, R> extends BeanFunction {\n+\n+    R apply(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);\n+}"
  },
  {
    "sha": "0a79bbbc12f27b109981ceb8970d9f90c674b319",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function6.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function6.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function6.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function6.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,6 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface Function6<T1, T2, T3, T4, T5, T6, R> extends BeanFunction {\n+\n+    R apply(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6);\n+}"
  },
  {
    "sha": "04d3a2c6b5a8c9878d9728182f6972abb1f56819",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function7.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function7.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function7.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function7.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,6 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface Function7<T1, T2, T3, T4, T5, T6, T7, R>extends BeanFunction {\n+\n+    R apply(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7);\n+}"
  },
  {
    "sha": "bc60266c0a10a955d3e32cbb9a5ce687ebdbadab",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function8.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function8.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function8.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/Function8.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,5 @@\n+package org.terasology.gestalt.di.function;\n+\n+public interface Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>  extends BeanFunction {\n+    R apply(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8);\n+}"
  },
  {
    "sha": "130b78c898c40cb0c498a546b67e496da1588c29",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/FunctionBeanDefinition.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/FunctionBeanDefinition.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/FunctionBeanDefinition.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/FunctionBeanDefinition.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,102 @@\n+package org.terasology.gestalt.di.function;\n+\n+import org.terasology.context.AbstractBeanDefinition;\n+import org.terasology.context.Argument;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+\n+public class FunctionBeanDefinition<T> extends AbstractBeanDefinition<T> {\n+    Argument[] arguments;\n+\n+    public FunctionBeanDefinition(BeanFunction function) throws NoSuchMethodException {\n+        if (function instanceof Function1) {\n+            Method method = function.getClass().getMethod(\"apply\", Function1.class);\n+            Parameter[] parameters = method.getParameters();\n+\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0])\n+            };\n+        } else if (function instanceof Function2) {\n+            Method method = function.getClass().getMethod(\"apply\", Function2.class);\n+            Parameter[] parameters = method.getParameters();\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0]),\n+                    new ReflectionArgument(parameters[1])\n+            };\n+        } else if (function instanceof Function3) {\n+            Method method = function.getClass().getMethod(\"apply\", Function2.class);\n+            Parameter[] parameters = method.getParameters();\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0]),\n+                    new ReflectionArgument(parameters[1]),\n+                    new ReflectionArgument(parameters[2])\n+            };\n+        } else if (function instanceof Function4) {\n+            Method method = function.getClass().getMethod(\"apply\", Function2.class);\n+            Parameter[] parameters = method.getParameters();\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0]),\n+                    new ReflectionArgument(parameters[1]),\n+                    new ReflectionArgument(parameters[2]),\n+                    new ReflectionArgument(parameters[3])\n+            };\n+        } else if (function instanceof Function5) {\n+            Method method = function.getClass().getMethod(\"apply\", Function2.class);\n+            Parameter[] parameters = method.getParameters();\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0]),\n+                    new ReflectionArgument(parameters[1]),\n+                    new ReflectionArgument(parameters[2]),\n+                    new ReflectionArgument(parameters[3]),\n+                    new ReflectionArgument(parameters[4])\n+            };\n+        } else if (function instanceof Function6) {\n+            Method method = function.getClass().getMethod(\"apply\", Function2.class);\n+            Parameter[] parameters = method.getParameters();\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0]),\n+                    new ReflectionArgument(parameters[1]),\n+                    new ReflectionArgument(parameters[2]),\n+                    new ReflectionArgument(parameters[3]),\n+                    new ReflectionArgument(parameters[4]),\n+                    new ReflectionArgument(parameters[5])\n+            };\n+        } else if (function instanceof Function7) {\n+            Method method = function.getClass().getMethod(\"apply\", Function2.class);\n+            Parameter[] parameters = method.getParameters();\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0]),\n+                    new ReflectionArgument(parameters[1]),\n+                    new ReflectionArgument(parameters[2]),\n+                    new ReflectionArgument(parameters[3]),\n+                    new ReflectionArgument(parameters[4]),\n+                    new ReflectionArgument(parameters[5]),\n+                    new ReflectionArgument(parameters[6])\n+            };\n+        } else if (function instanceof Function8) {\n+            Method method = function.getClass().getMethod(\"apply\", Function2.class);\n+            Parameter[] parameters = method.getParameters();\n+            arguments = new Argument[]{\n+                    new ReflectionArgument(parameters[0]),\n+                    new ReflectionArgument(parameters[1]),\n+                    new ReflectionArgument(parameters[2]),\n+                    new ReflectionArgument(parameters[3]),\n+                    new ReflectionArgument(parameters[4]),\n+                    new ReflectionArgument(parameters[5]),\n+                    new ReflectionArgument(parameters[6]),\n+                    new ReflectionArgument(parameters[7])\n+            };\n+        }\n+    }\n+\n+    @Override\n+    public Argument[] getArguments() {\n+        return arguments;\n+    }\n+\n+    @Override\n+    public Class targetClass() {\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "54f710d7379e840e44cb2b2c3c6975b702e82ed6",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/function/ReflectionArgument.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/ReflectionArgument.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/function/ReflectionArgument.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/function/ReflectionArgument.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,29 @@\n+package org.terasology.gestalt.di.function;\n+\n+import org.terasology.context.AnnotationMetadata;\n+import org.terasology.context.Argument;\n+\n+import java.lang.reflect.Parameter;\n+\n+public class ReflectionArgument<T> implements Argument<T> {\n+    Class<T> clazz;\n+    public ReflectionArgument(Parameter parameter) {\n+        this.clazz = (Class<T>) parameter.getClass();\n+\n+    }\n+\n+    @Override\n+    public Class<T> getType() {\n+        return this.clazz;\n+    }\n+\n+    @Override\n+    public AnnotationMetadata getAnnotation() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "57a8dfb2eed64dd87e7fc1a551a23bcd1137ddfd",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/instance/FunctionProvider.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/instance/FunctionProvider.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/instance/FunctionProvider.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/instance/FunctionProvider.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -0,0 +1,45 @@\n+package org.terasology.gestalt.di.instance;\n+\n+import org.terasology.context.Argument;\n+import org.terasology.context.DefaultArgument;\n+import org.terasology.gestalt.di.BeanContext;\n+import org.terasology.gestalt.di.BeanEnvironment;\n+import org.terasology.gestalt.di.BeanKey;\n+import org.terasology.gestalt.di.Lifetime;\n+import org.terasology.gestalt.di.function.BeanFunction;\n+import org.terasology.gestalt.di.function.Function0;\n+import org.terasology.gestalt.di.function.Function1;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.Optional;\n+\n+public class FunctionProvider<T> extends BeanProvider<T>  {\n+    BeanFunction function;\n+    Argument[] args;\n+    public FunctionProvider(BeanEnvironment environment, Lifetime lifetime, BeanFunction function) throws NoSuchMethodException {\n+        super(environment, lifetime);\n+        this.function = function;\n+\n+        if(function instanceof Function1) {\n+            Method method = function.getClass().getMethod(\"apply\", Function0.class);\n+//            method.getReturnType();\n+            Parameter[] parameters = method.getParameters();\n+            args = new Argument[]{\n+                    new DefaultArgument(parameters.getClass(), null)\n+            };\n+        }\n+    }\n+\n+    @Override\n+    public Optional<T> get(BeanKey identifier, BeanContext current, BeanContext scopedTo) {\n+        return Optional.empty();\n+\n+\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+\n+    }\n+}"
  },
  {
    "sha": "f233bd820979463d9235e9ce717bed5a26931def",
    "filename": "gestalt-di/src/main/java/org/terasology/gestalt/di/instance/SupplierProvider.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/MovingBlocks/gestalt/blob/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/instance/SupplierProvider.java",
    "raw_url": "https://github.com/MovingBlocks/gestalt/raw/eb1885489d00949456b7413490ce3680bff75d33/gestalt-di/src/main/java/org/terasology/gestalt/di/instance/SupplierProvider.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/gestalt/contents/gestalt-di/src/main/java/org/terasology/gestalt/di/instance/SupplierProvider.java?ref=eb1885489d00949456b7413490ce3680bff75d33",
    "patch": "@@ -7,22 +7,23 @@\n import org.terasology.gestalt.di.BeanKey;\n import org.terasology.gestalt.di.DefaultBeanResolution;\n import org.terasology.gestalt.di.Lifetime;\n+import org.terasology.gestalt.di.function.Function0;\n \n import java.util.Optional;\n import java.util.function.Supplier;\n \n public class SupplierProvider<T> extends BeanProvider<T> {\n-    private final Supplier<T> supplier;\n+    private final Function0<T> supplier;\n     private final Class<T> target;\n \n-    public SupplierProvider(BeanEnvironment environment, Lifetime lifetime, Class<T> target, Supplier<T> supplier) {\n+    public SupplierProvider(BeanEnvironment environment, Lifetime lifetime, Class<T> target, Function0<T> supplier) {\n         super(environment, lifetime);\n         this.supplier = supplier;\n         this.target = target;\n     }\n     @Override\n     public Optional<T> get(BeanKey identifier, BeanContext current, BeanContext scopedTo) {\n-        Optional<T> result = Optional.ofNullable(supplier.get());\n+        Optional<T> result = Optional.ofNullable(supplier.apply());\n         result.ifPresent(k -> {\n             BeanDefinition<T> definition = (BeanDefinition<T>)environment.getDefinition(target);\n             if (definition instanceof AbstractBeanDefinition) {"
  }
]
