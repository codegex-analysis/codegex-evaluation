[
  {
    "sha": "f37204e500eb45390dced443be29a9d57dbd6150",
    "filename": "engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterInputSystem.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterInputSystem.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterInputSystem.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterInputSystem.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -21,6 +21,7 @@\n import org.terasology.engine.core.modes.SingleStepLoadProcess;\n import org.terasology.engine.input.InputSystem;\n import org.terasology.engine.input.cameraTarget.CameraTargetSystem;\n+import org.terasology.engine.logic.players.LocalPlayerControlSystem;\n import org.terasology.engine.logic.players.LocalPlayerSystem;\n \n /**\n@@ -45,6 +46,10 @@ public boolean step() {\n         componentSystemManager.register(localPlayerSystem, \"engine:localPlayerSystem\");\n         context.put(LocalPlayerSystem.class, localPlayerSystem);\n \n+        LocalPlayerControlSystem localPlayerControlSystem = new LocalPlayerControlSystem();\n+        componentSystemManager.register(localPlayerControlSystem, \"engine:localPlayerControlSystem\");\n+        context.put(LocalPlayerControlSystem.class, localPlayerControlSystem);\n+\n         CameraTargetSystem cameraTargetSystem = new CameraTargetSystem();\n         context.put(CameraTargetSystem.class, cameraTargetSystem);\n         componentSystemManager.register(cameraTargetSystem, \"engine:CameraTargetSystem\");"
  },
  {
    "sha": "d17a80106a02b61f718e6ea87306461c90762102",
    "filename": "engine/src/main/java/org/terasology/entitySystem/DoNotPersist.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/entitySystem/DoNotPersist.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/entitySystem/DoNotPersist.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/entitySystem/DoNotPersist.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2021 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.entitySystem;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface DoNotPersist {\n+}"
  },
  {
    "sha": "6f4522818d9df5dbccbab375e616aff1d1aee7ec",
    "filename": "engine/src/main/java/org/terasology/logic/players/LocalPlayerComponent.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerComponent.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerComponent.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/logic/players/LocalPlayerComponent.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2021 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.logic.players;\n+\n+import org.terasology.engine.entitySystem.Component;\n+import org.terasology.engine.entitySystem.DoNotPersist;\n+\n+@DoNotPersist\n+public class LocalPlayerComponent implements Component {\n+}"
  },
  {
    "sha": "25378a0387682399ae9439d82d46e1227eff409c",
    "filename": "engine/src/main/java/org/terasology/logic/players/LocalPlayerControlComponent.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerControlComponent.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerControlComponent.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/logic/players/LocalPlayerControlComponent.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2021 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.logic.players;\n+\n+import org.joml.Vector3f;\n+import org.terasology.engine.entitySystem.Component;\n+import org.terasology.engine.entitySystem.DoNotPersist;\n+\n+@DoNotPersist\n+public class LocalPlayerControlComponent implements Component {\n+    public double lookPitchDelta;\n+    public double lookYawDelta;\n+    public float lookPitch;\n+    public float lookYaw;\n+    public Vector3f relativeMovement = new Vector3f();\n+    public boolean runPerDefault = true;\n+    public boolean run = runPerDefault;\n+    public boolean crouchPerDefault;\n+    public boolean crouch;\n+    public boolean jump;\n+    public int inputSequenceNumber = 1;\n+}"
  },
  {
    "sha": "9fb698f0f8ed2daf4c9e5c79db6d005758b8ab76",
    "filename": "engine/src/main/java/org/terasology/logic/players/LocalPlayerControlSystem.java",
    "status": "added",
    "additions": 219,
    "deletions": 0,
    "changes": 219,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerControlSystem.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerControlSystem.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/logic/players/LocalPlayerControlSystem.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -0,0 +1,219 @@\n+// Copyright 2021 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.logic.players;\n+\n+import org.terasology.engine.core.SimpleUri;\n+import org.terasology.engine.core.subsystem.config.BindsManager;\n+import org.terasology.engine.entitySystem.entity.EntityRef;\n+import org.terasology.engine.entitySystem.event.EventPriority;\n+import org.terasology.engine.entitySystem.event.ReceiveEvent;\n+import org.terasology.engine.entitySystem.systems.BaseComponentSystem;\n+import org.terasology.engine.input.InputSystem;\n+import org.terasology.engine.input.binds.movement.AutoMoveButton;\n+import org.terasology.engine.input.binds.movement.CrouchButton;\n+import org.terasology.engine.input.binds.movement.CrouchModeButton;\n+import org.terasology.engine.input.binds.movement.ForwardsMovementAxis;\n+import org.terasology.engine.input.binds.movement.ForwardsRealMovementAxis;\n+import org.terasology.engine.input.binds.movement.JumpButton;\n+import org.terasology.engine.input.binds.movement.RotationPitchAxis;\n+import org.terasology.engine.input.binds.movement.RotationYawAxis;\n+import org.terasology.engine.input.binds.movement.StrafeMovementAxis;\n+import org.terasology.engine.input.binds.movement.StrafeRealMovementAxis;\n+import org.terasology.engine.input.binds.movement.ToggleSpeedPermanentlyButton;\n+import org.terasology.engine.input.binds.movement.ToggleSpeedTemporarilyButton;\n+import org.terasology.engine.input.binds.movement.VerticalMovementAxis;\n+import org.terasology.engine.input.binds.movement.VerticalRealMovementAxis;\n+import org.terasology.engine.input.events.MouseAxisEvent;\n+import org.terasology.engine.logic.characters.CharacterMovementComponent;\n+import org.terasology.engine.logic.players.event.LocalPlayerInitializedEvent;\n+import org.terasology.engine.registry.In;\n+import org.terasology.input.ButtonState;\n+import org.terasology.input.Input;\n+\n+import java.util.List;\n+\n+public class LocalPlayerControlSystem extends BaseComponentSystem {\n+\n+    @In\n+    private InputSystem inputSystem;\n+    @In\n+    private BindsManager bindsManager;\n+\n+    private boolean isAutoMove;\n+\n+    @ReceiveEvent(components = {LocalPlayerComponent.class})\n+    public void onLocalPlayerInit(LocalPlayerInitializedEvent event, EntityRef entity) {\n+        entity.addComponent(new LocalPlayerControlComponent());\n+    }\n+\n+    @ReceiveEvent(components = LocalPlayerControlComponent.class)\n+    public void onMouseMove(MouseAxisEvent event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        MouseAxisEvent.MouseAxis axis = event.getMouseAxis();\n+        if (axis == MouseAxisEvent.MouseAxis.X) {\n+            control.lookYawDelta = event.getValue();\n+        } else if (axis == MouseAxisEvent.MouseAxis.Y) {\n+            control.lookPitchDelta = event.getValue();\n+        }\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateRotationYaw(RotationYawAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.lookYawDelta = event.getValue();\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateRotationPitch(RotationPitchAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.lookPitchDelta = event.getValue();\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class, CharacterMovementComponent.class})\n+    public void onJump(JumpButton event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        if (event.getState() == ButtonState.DOWN) {\n+            control.jump = true;\n+            event.consume();\n+        } else {\n+            control.jump = false;\n+        }\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateForwardsMovement(ForwardsMovementAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.relativeMovement.z = (float) event.getValue();\n+        if (control.relativeMovement.z == 0f && isAutoMove) {\n+            stopAutoMove();\n+        }\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateStrafeMovement(StrafeMovementAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.relativeMovement.x =  (float)event.getValue();\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateVerticalMovement(VerticalMovementAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.relativeMovement.y = (float) event.getValue();\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateForwardsMovement(ForwardsRealMovementAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.relativeMovement.z =  (float)event.getValue();\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateStrafeMovement(StrafeRealMovementAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.relativeMovement.x = (float) event.getValue();\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class})\n+    public void updateVerticalMovement(VerticalRealMovementAxis event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        control.relativeMovement.y =  (float)event.getValue();\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n+    public void onToggleSpeedTemporarily(ToggleSpeedTemporarilyButton event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        boolean toggle = event.isDown();\n+        control.run = control.runPerDefault ^ toggle;\n+        event.consume();\n+    }\n+\n+    // Crouches if button is pressed. Stands if button is released.\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n+    public void onCrouchTemporarily(CrouchButton event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        boolean toggle = event.isDown();\n+        control.crouch = control.crouchPerDefault ^ toggle;\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n+    public void onCrouchMode(CrouchModeButton event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        if (event.isDown()) {\n+            control.crouchPerDefault = !control.crouchPerDefault;\n+            control.crouch = !control.crouch;\n+        }\n+        event.consume();\n+    }\n+\n+    // To check if a valid key has been assigned, either primary or secondary and return it\n+    private Input getValidKey(List<Input> inputs) {\n+        for (Input input : inputs) {\n+            if (input != null) {\n+                return input;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Auto move is disabled when the associated key is pressed again.\n+     * This cancels the simulated repeated key stroke for the forward input button.\n+     */\n+    private void stopAutoMove() {\n+        List<Input> inputs = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:forwards\"));\n+        Input forwardKey = getValidKey(inputs);\n+        if (forwardKey != null) {\n+            inputSystem.cancelSimulatedKeyStroke(forwardKey);\n+            isAutoMove = false;\n+        }\n+\n+    }\n+\n+    /**\n+     * Append the input for moving forward to the keyboard command queue to simulate pressing of the forward key.\n+     * For an input that repeats, the key must be in Down state before Repeat state can be applied to it.\n+     */\n+    private void startAutoMove() {\n+        isAutoMove = false;\n+        List<Input> inputs = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:forwards\"));\n+        Input forwardKey = getValidKey(inputs);\n+        if (forwardKey != null) {\n+            isAutoMove = true;\n+            inputSystem.simulateSingleKeyStroke(forwardKey);\n+            inputSystem.simulateRepeatedKeyStroke(forwardKey);\n+        }\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n+    public void onAutoMoveMode(AutoMoveButton event, EntityRef entity) {\n+        if (event.isDown()) {\n+            if (!isAutoMove) {\n+                startAutoMove();\n+            } else {\n+                stopAutoMove();\n+            }\n+        }\n+        event.consume();\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerControlComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n+    public void onToggleSpeedPermanently(ToggleSpeedPermanentlyButton event, EntityRef entity) {\n+        LocalPlayerControlComponent control = entity.getComponent(LocalPlayerControlComponent.class);\n+        if (event.isDown()) {\n+            control.runPerDefault = !control.runPerDefault;\n+            control.run = !control.run;\n+        }\n+        event.consume();\n+    }\n+}"
  },
  {
    "sha": "82ec027418d85cbf404c8b6959e751deec7bbdf7",
    "filename": "engine/src/main/java/org/terasology/logic/players/LocalPlayerSystem.java",
    "status": "modified",
    "additions": 58,
    "deletions": 235,
    "changes": 293,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerSystem.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/LocalPlayerSystem.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/logic/players/LocalPlayerSystem.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -8,49 +8,31 @@\n import org.joml.Vector3f;\n import org.terasology.assets.ResourceUrn;\n import org.terasology.engine.config.Config;\n-import org.terasology.engine.core.SimpleUri;\n import org.terasology.engine.core.Time;\n import org.terasology.engine.core.subsystem.config.BindsManager;\n+import org.terasology.engine.entitySystem.entity.EntityManager;\n import org.terasology.engine.entitySystem.entity.EntityRef;\n-import org.terasology.engine.entitySystem.event.EventPriority;\n+import org.terasology.engine.entitySystem.entity.lifecycleEvents.OnChangedComponent;\n import org.terasology.engine.entitySystem.event.ReceiveEvent;\n import org.terasology.engine.entitySystem.systems.BaseComponentSystem;\n import org.terasology.engine.entitySystem.systems.RenderSystem;\n import org.terasology.engine.entitySystem.systems.UpdateSubscriberSystem;\n-import org.terasology.engine.logic.characters.CharacterComponent;\n-import org.terasology.engine.logic.characters.CharacterMoveInputEvent;\n-import org.terasology.engine.logic.characters.CharacterMovementComponent;\n-import org.terasology.engine.logic.characters.MovementMode;\n-import org.terasology.engine.logic.location.LocationComponent;\n-import org.terasology.engine.logic.players.event.LocalPlayerInitializedEvent;\n-import org.terasology.engine.logic.players.event.OnPlayerSpawnedEvent;\n-import org.terasology.input.ButtonState;\n-import org.terasology.input.Input;\n import org.terasology.engine.input.InputSystem;\n import org.terasology.engine.input.binds.interaction.FrobButton;\n import org.terasology.engine.input.binds.inventory.UseItemButton;\n-import org.terasology.engine.input.binds.movement.AutoMoveButton;\n-import org.terasology.engine.input.binds.movement.CrouchButton;\n-import org.terasology.engine.input.binds.movement.CrouchModeButton;\n-import org.terasology.engine.input.binds.movement.ForwardsMovementAxis;\n-import org.terasology.engine.input.binds.movement.ForwardsRealMovementAxis;\n-import org.terasology.engine.input.binds.movement.JumpButton;\n-import org.terasology.engine.input.binds.movement.RotationPitchAxis;\n-import org.terasology.engine.input.binds.movement.RotationYawAxis;\n-import org.terasology.engine.input.binds.movement.StrafeMovementAxis;\n-import org.terasology.engine.input.binds.movement.StrafeRealMovementAxis;\n-import org.terasology.engine.input.binds.movement.ToggleSpeedPermanentlyButton;\n-import org.terasology.engine.input.binds.movement.ToggleSpeedTemporarilyButton;\n-import org.terasology.engine.input.binds.movement.VerticalMovementAxis;\n-import org.terasology.engine.input.binds.movement.VerticalRealMovementAxis;\n-import org.terasology.engine.input.events.MouseAxisEvent;\n-import org.terasology.engine.input.events.MouseAxisEvent.MouseAxis;\n-import org.terasology.joml.geom.AABBf;\n+import org.terasology.engine.logic.characters.CharacterComponent;\n import org.terasology.engine.logic.characters.CharacterHeldItemComponent;\n+import org.terasology.engine.logic.characters.CharacterMoveInputEvent;\n+import org.terasology.engine.logic.characters.CharacterMovementComponent;\n+import org.terasology.engine.logic.characters.MovementMode;\n import org.terasology.engine.logic.characters.events.OnItemUseEvent;\n import org.terasology.engine.logic.characters.events.ScaleToRequest;\n import org.terasology.engine.logic.characters.interactions.InteractionUtil;\n import org.terasology.engine.logic.delay.DelayManager;\n+import org.terasology.engine.logic.location.LocationComponent;\n+import org.terasology.engine.logic.players.event.LocalPlayerInitializedEvent;\n+import org.terasology.engine.logic.players.event.OnPlayerSpawnedEvent;\n+import org.terasology.engine.logic.players.event.OnPlayerSpawnedOrRestoredEvent;\n import org.terasology.engine.network.ClientComponent;\n import org.terasology.engine.network.NetworkMode;\n import org.terasology.engine.network.NetworkSystem;\n@@ -65,8 +47,8 @@\n import org.terasology.engine.world.block.Block;\n import org.terasology.engine.world.block.BlockComponent;\n import org.terasology.engine.world.block.regions.BlockRegionComponent;\n-\n-import java.util.List;\n+import org.terasology.input.ButtonState;\n+import org.terasology.joml.geom.AABBf;\n \n // TODO: This needs a really good cleanup\n // TODO: Move more input stuff to a specific input system?\n@@ -92,33 +74,19 @@\n     @In\n     private BindsManager bindsManager;\n \n+    @In\n+    private EntityManager entityManager;\n+\n     private Camera playerCamera;\n-    private boolean localPlayerInitialized = false;\n \n     private float bobFactor;\n     private float lastStepDelta;\n \n-    // Input\n-    private Vector3f relativeMovement = new Vector3f();\n-    private boolean isAutoMove;\n-    private boolean runPerDefault = true;\n-    private boolean run = runPerDefault;\n-    private boolean crouchPerDefault = false;\n-    private boolean crouch = false;\n-\n-    private boolean jump;\n-    private float lookPitch;\n-    private double lookPitchDelta;\n-    private float lookYaw;\n-    private double lookYawDelta;\n-\n     @In\n     private Time time;\n \n     private BlockOverlayRenderer aabbRenderer = new AABBRenderer(new AABBf());\n \n-    private int inputSequenceNumber = 1;\n-\n     private AABBf aabb = new AABBf();\n \n     public void setPlayerCamera(Camera camera) {\n@@ -127,230 +95,85 @@ public void setPlayerCamera(Camera camera) {\n \n     @Override\n     public void update(float delta) {\n-        if (!localPlayerInitialized && localPlayer.isValid()) {\n-            localPlayer.getClientEntity().send(new LocalPlayerInitializedEvent());\n-            localPlayerInitialized = true;\n+        for (EntityRef entity : entityManager.getEntitiesWith(CharacterMovementComponent.class, LocalPlayerControlComponent.class)) {\n+            processInput(entity);\n         }\n \n-        if (localPlayerInitialized) {\n-            EntityRef entity = localPlayer.getCharacterEntity();\n-            CharacterMovementComponent characterMovementComponent = entity.getComponent(CharacterMovementComponent.class);\n-\n-            processInput(entity, characterMovementComponent);\n-            updateCamera(characterMovementComponent, localPlayer.getViewPosition(new Vector3f()), localPlayer.getViewRotation(new Quaternionf()));\n+        for (EntityRef entity : entityManager.getEntitiesWith(CharacterMovementComponent.class, LocalPlayerComponent.class)) {\n+            updateCamera(entity.getComponent(CharacterMovementComponent.class), localPlayer.getViewPosition(new Vector3f()), localPlayer.getViewRotation(new Quaternionf()));\n         }\n     }\n \n-    private void processInput(EntityRef entity, CharacterMovementComponent characterMovementComponent) {\n-        lookYaw = (float) ((lookYaw - lookYawDelta) % 360);\n-        lookYawDelta = 0f;\n-        lookPitch = (float) Math.clamp(-89, 89,lookPitch + lookPitchDelta);\n-        lookPitchDelta = 0f;\n+    private void processInput(EntityRef entity) {\n+        CharacterMovementComponent characterMovementComponent = entity.getComponent(CharacterMovementComponent.class);\n+        LocalPlayerControlComponent controlComponent = entity.getComponent(LocalPlayerControlComponent.class);\n+        controlComponent.lookYaw = (float) ((controlComponent.lookYaw - controlComponent.lookYawDelta) % 360);\n+        controlComponent.lookYawDelta = 0f;\n+        controlComponent.lookPitch = (float) Math.clamp(-89, 89,controlComponent.lookPitch + controlComponent.lookPitchDelta);\n+        controlComponent.lookPitchDelta = 0f;\n \n-        Vector3f relMove = new Vector3f(relativeMovement);\n+        Vector3f relMove = new Vector3f(controlComponent.relativeMovement);\n         relMove.y = 0;\n \n         Quaternionf viewRotation =  new Quaternionf();\n         switch (characterMovementComponent.mode) {\n             case CROUCHING:\n             case WALKING:\n                 if (!config.getRendering().isVrSupport()) {\n-                    viewRotation.rotationYXZ(Math.toRadians(lookYaw), 0, 0);\n+                    viewRotation.rotationYXZ(Math.toRadians(controlComponent.lookYaw), 0, 0);\n                     playerCamera.setOrientation(viewRotation);\n                 }\n                 playerCamera.getOrientation(new Quaternionf()).transform(relMove);\n                 break;\n             case CLIMBING:\n                 // Rotation is applied in KinematicCharacterMover\n-                relMove.y += relativeMovement.y;\n+                relMove.y += controlComponent.relativeMovement.y;\n                 break;\n             default:\n                 if (!config.getRendering().isVrSupport()) {\n-                    viewRotation.rotationYXZ(Math.toRadians(lookYaw), Math.toRadians(lookPitch), 0);\n+                    viewRotation.rotationYXZ(Math.toRadians(controlComponent.lookYaw), Math.toRadians(controlComponent.lookPitch), 0);\n                     playerCamera.setOrientation(viewRotation);\n                 }\n                 playerCamera.getOrientation(new Quaternionf()).transform(relMove);\n-                relMove.y += relativeMovement.y;\n+                relMove.y += controlComponent.relativeMovement.y;\n                 break;\n         }\n         // For some reason, Quat4f.rotate is returning NaN for valid inputs. This prevents those NaNs from causing trouble down the line.\n         if (relMove.isFinite()) {\n-            entity.send(new CharacterMoveInputEvent(inputSequenceNumber++, lookPitch, lookYaw, relMove, run, crouch, jump, time.getGameDeltaInMs()));\n-        }\n-        jump = false;\n-    }\n-\n-    // To check if a valid key has been assigned, either primary or secondary and return it\n-    private Input getValidKey(List<Input> inputs) {\n-        for (Input input : inputs) {\n-            if (input != null) {\n-                return input;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Auto move is disabled when the associated key is pressed again.\n-     * This cancels the simulated repeated key stroke for the forward input button.\n-     */\n-    private void stopAutoMove() {\n-        List<Input> inputs = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:forwards\"));\n-        Input forwardKey = getValidKey(inputs);\n-        if (forwardKey != null) {\n-            inputSystem.cancelSimulatedKeyStroke(forwardKey);\n-            isAutoMove = false;\n-        }\n-\n-    }\n-\n-    /**\n-     * Append the input for moving forward to the keyboard command queue to simulate pressing of the forward key.\n-     * For an input that repeats, the key must be in Down state before Repeat state can be applied to it.\n-     */\n-    private void startAutoMove() {\n-        isAutoMove = false;\n-        List<Input> inputs = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:forwards\"));\n-        Input forwardKey = getValidKey(inputs);\n-        if (forwardKey != null) {\n-            isAutoMove = true;\n-            inputSystem.simulateSingleKeyStroke(forwardKey);\n-            inputSystem.simulateRepeatedKeyStroke(forwardKey);\n+            entity.send(new CharacterMoveInputEvent(controlComponent.inputSequenceNumber++, controlComponent.lookPitch,\n+                    controlComponent.lookYaw, relMove,\n+                    controlComponent.run, controlComponent.crouch, controlComponent.jump, time.getGameDeltaInMs()));\n         }\n+        controlComponent.jump = false;\n     }\n \n     @ReceiveEvent\n-    public void onPlayerSpawn(OnPlayerSpawnedEvent event, EntityRef character) {\n-        if (character.equals(localPlayer.getCharacterEntity())) {\n-            // update character height as given in player settings\n-            ScaleToRequest scaleRequest = new ScaleToRequest(config.getPlayer().getHeight());\n-            localPlayer.getCharacterEntity().send(scaleRequest);\n-\n-            // Trigger updating the player camera position as soon as the local player is spawned.\n-            // This is not done while the game is still loading, since systems are not updated.\n-            // RenderableWorldImpl pre-generates chunks around the player camera and therefore needs\n-            // the correct location.\n-            lookYaw = 0f;\n-            lookPitch = 0f;\n-            update(0);\n+    public void onClientComponentChange(OnChangedComponent event, EntityRef entity, ClientComponent clientComponent) {\n+        // character is set by PlayerSystem just before the player is spawned.\n+        if (clientComponent.local && clientComponent.character != null\n+                && !clientComponent.character.hasComponent(LocalPlayerComponent.class)) {\n+            clientComponent.character.addComponent(new LocalPlayerComponent());\n         }\n     }\n \n-    @ReceiveEvent(components = CharacterComponent.class)\n-    public void onMouseMove(MouseAxisEvent event, EntityRef entity) {\n-        MouseAxis axis = event.getMouseAxis();\n-        if (axis == MouseAxis.X) {\n-            lookYawDelta = event.getValue();\n-        } else if (axis == MouseAxis.Y) {\n-            lookPitchDelta = event.getValue();\n-        }\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {CharacterComponent.class})\n-    public void updateRotationYaw(RotationYawAxis event, EntityRef entity) {\n-        lookYawDelta = event.getValue();\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {CharacterComponent.class})\n-    public void updateRotationPitch(RotationPitchAxis event, EntityRef entity) {\n-        lookPitchDelta = event.getValue();\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {CharacterComponent.class, CharacterMovementComponent.class})\n-    public void onJump(JumpButton event, EntityRef entity) {\n-        if (event.getState() == ButtonState.DOWN) {\n-            jump = true;\n-            event.consume();\n-        } else {\n-            jump = false;\n-        }\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class})\n-    public void updateForwardsMovement(ForwardsMovementAxis event, EntityRef entity) {\n-        relativeMovement.z = (float) event.getValue();\n-        if (relativeMovement.z == 0f && isAutoMove) {\n-            stopAutoMove();\n-        }\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class})\n-    public void updateStrafeMovement(StrafeMovementAxis event, EntityRef entity) {\n-        relativeMovement.x =  (float)event.getValue();\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class})\n-    public void updateVerticalMovement(VerticalMovementAxis event, EntityRef entity) {\n-        relativeMovement.y = (float) event.getValue();\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class})\n-    public void updateForwardsMovement(ForwardsRealMovementAxis event, EntityRef entity) {\n-        relativeMovement.z =  (float)event.getValue();\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class})\n-    public void updateStrafeMovement(StrafeRealMovementAxis event, EntityRef entity) {\n-        relativeMovement.x = (float) event.getValue();\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class})\n-    public void updateVerticalMovement(VerticalRealMovementAxis event, EntityRef entity) {\n-        relativeMovement.y =  (float)event.getValue();\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n-    public void onToggleSpeedTemporarily(ToggleSpeedTemporarilyButton event, EntityRef entity) {\n-        boolean toggle = event.isDown();\n-        run = runPerDefault ^ toggle;\n-        event.consume();\n-    }\n-\n-    // Crouches if button is pressed. Stands if button is released.\n-    @ReceiveEvent(components = {ClientComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n-    public void onCrouchTemporarily(CrouchButton event, EntityRef entity) {\n-        boolean toggle = event.isDown();\n-        crouch = crouchPerDefault ^ toggle;\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n-    public void onCrouchMode(CrouchModeButton event, EntityRef entity) {\n-        if (event.isDown()) {\n-            crouchPerDefault = !crouchPerDefault;\n-            crouch = !crouch;\n-        }\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n-    public void onAutoMoveMode(AutoMoveButton event, EntityRef entity) {\n-        if (event.isDown()) {\n-            if (!isAutoMove) {\n-                startAutoMove();\n-            } else {\n-                stopAutoMove();\n-            }\n-        }\n-        event.consume();\n-    }\n-\n-    @ReceiveEvent(components = {ClientComponent.class}, priority = EventPriority.PRIORITY_NORMAL)\n-    public void onToggleSpeedPermanently(ToggleSpeedPermanentlyButton event, EntityRef entity) {\n-        if (event.isDown()) {\n-            runPerDefault = !runPerDefault;\n-            run = !run;\n-        }\n-        event.consume();\n+    @ReceiveEvent(components = {LocalPlayerComponent.class})\n+    public void onPlayerSpawn(OnPlayerSpawnedEvent event, EntityRef character) {\n+        // update character height as given in player settings\n+        ScaleToRequest scaleRequest = new ScaleToRequest(config.getPlayer().getHeight());\n+        localPlayer.getCharacterEntity().send(scaleRequest);\n+    }\n+\n+    @ReceiveEvent(components = {LocalPlayerComponent.class})\n+    public void onPlayerSpawnedOrRestored(OnPlayerSpawnedOrRestoredEvent event, EntityRef character) {\n+        character.send(new LocalPlayerInitializedEvent());\n+\n+        // Trigger updating the player camera position as soon as the local player is spawned.\n+        // This is not done while the game is still loading, since systems are not updated.\n+        // RenderableWorldImpl pre-generates chunks around the player camera and therefore needs\n+        // the correct location.\n+        character.getComponent(LocalPlayerControlComponent.class).lookYaw = 0f;\n+        character.getComponent(LocalPlayerControlComponent.class).lookPitch = 0f;\n+        update(0);\n     }\n \n     @ReceiveEvent"
  },
  {
    "sha": "4a50ba8f9837f1a303ea6826bde97cd378758a85",
    "filename": "engine/src/main/java/org/terasology/logic/players/PlayerSystem.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/PlayerSystem.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/PlayerSystem.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/logic/players/PlayerSystem.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -25,6 +25,7 @@\n import org.terasology.engine.logic.location.LocationComponent;\n import org.terasology.engine.logic.players.event.OnPlayerRespawnedEvent;\n import org.terasology.engine.logic.players.event.OnPlayerSpawnedEvent;\n+import org.terasology.engine.logic.players.event.OnPlayerSpawnedOrRestoredEvent;\n import org.terasology.engine.logic.players.event.RespawnRequestEvent;\n import org.terasology.engine.logic.health.BeforeDestroyEvent;\n import org.terasology.engine.network.Client;\n@@ -171,6 +172,7 @@ private void restoreCharacter(EntityRef entity, EntityRef character) {\n                 respawnPlayer(entity);\n             }\n             Location.attachChild(character, entity, new Vector3f(), new Quaternionf());\n+            character.send(new OnPlayerSpawnedOrRestoredEvent());\n         } else {\n             character.destroy();\n             spawnPlayer(entity);\n@@ -264,6 +266,7 @@ private void spawnPlayer(EntityRef clientEntity) {\n         updateRelevanceEntity(clientEntity, distance);\n         client.character = playerCharacter;\n         clientEntity.saveComponent(client);\n+        playerCharacter.send(new OnPlayerSpawnedOrRestoredEvent());\n         playerCharacter.send(new OnPlayerSpawnedEvent());\n     }\n "
  },
  {
    "sha": "26d1445330d2975589d4ef05aa96b0930d49e08f",
    "filename": "engine/src/main/java/org/terasology/logic/players/event/OnPlayerSpawnedOrRestoredEvent.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/event/OnPlayerSpawnedOrRestoredEvent.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/logic/players/event/OnPlayerSpawnedOrRestoredEvent.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/logic/players/event/OnPlayerSpawnedOrRestoredEvent.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2021 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.logic.players.event;\n+\n+import org.terasology.engine.entitySystem.event.Event;\n+\n+public class OnPlayerSpawnedOrRestoredEvent implements Event {\n+}"
  },
  {
    "sha": "95a6812584c296bb8da0404cee1ff1d04eeb759a",
    "filename": "engine/src/main/java/org/terasology/persistence/serializers/ComponentSerializeCheck.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/persistence/serializers/ComponentSerializeCheck.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/66ee0872d681a7f588e3dda3d7628c5dfa58824e/engine/src/main/java/org/terasology/persistence/serializers/ComponentSerializeCheck.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/persistence/serializers/ComponentSerializeCheck.java?ref=66ee0872d681a7f588e3dda3d7628c5dfa58824e",
    "patch": "@@ -17,6 +17,7 @@\n package org.terasology.engine.persistence.serializers;\n \n import org.terasology.engine.entitySystem.Component;\n+import org.terasology.engine.entitySystem.DoNotPersist;\n import org.terasology.engine.entitySystem.entity.internal.EntityInfoComponent;\n import org.terasology.engine.entitySystem.metadata.ComponentMetadata;\n \n@@ -40,7 +41,7 @@ public static ComponentSerializeCheck create() {\n \n         @Override\n         public boolean serialize(ComponentMetadata<? extends Component> metadata) {\n-            return metadata.getType() != EntityInfoComponent.class;\n+            return metadata.getType() != EntityInfoComponent.class && metadata.getType().getAnnotation(DoNotPersist.class) == null;\n         }\n     }\n }"
  }
]
