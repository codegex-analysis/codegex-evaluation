[
  {
    "sha": "9a06501690b218034b4051f6377a728435b369da",
    "filename": "engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterMods.java",
    "status": "modified",
    "additions": 14,
    "deletions": 19,
    "changes": 33,
    "blob_url": "https://github.com/MovingBlocks/Terasology/blob/d33dba4699e9d7e54fa90c22402de7945784ffb0/engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterMods.java",
    "raw_url": "https://github.com/MovingBlocks/Terasology/raw/d33dba4699e9d7e54fa90c22402de7945784ffb0/engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterMods.java",
    "contents_url": "https://api.github.com/repos/MovingBlocks/Terasology/contents/engine/src/main/java/org/terasology/engine/modes/loadProcesses/RegisterMods.java?ref=d33dba4699e9d7e54fa90c22402de7945784ffb0",
    "patch": "@@ -1,21 +1,10 @@\n-/*\n- * Copyright 2013 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2021 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n \n package org.terasology.engine.modes.loadProcesses;\n \n+import ch.qos.logback.classic.pattern.TargetLengthBasedClassNameAbbreviator;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.terasology.context.Context;\n@@ -34,6 +23,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n import java.util.stream.Collectors;\n \n /**\n@@ -44,7 +35,7 @@\n \n     private final Context context;\n     private final GameManifest gameManifest;\n-    private Thread applyModulesThread;\n+    private Future<?> applyModulesThread;\n     private ModuleEnvironment oldEnvironment;\n \n     public RegisterMods(Context context, GameManifest gameManifest) {\n@@ -64,7 +55,7 @@ public String getMessage() {\n     @Override\n     public boolean step() {\n         if (applyModulesThread != null) {\n-            if (!applyModulesThread.isAlive()) {\n+            if (applyModulesThread.isDone()) {\n                 if (oldEnvironment != null) {\n                     oldEnvironment.close();\n                 }\n@@ -87,8 +78,12 @@ public boolean step() {\n                 }\n \n                 EnvironmentSwitchHandler environmentSwitchHandler = context.get(EnvironmentSwitchHandler.class);\n-                applyModulesThread = new Thread(() -> environmentSwitchHandler.handleSwitchToGameEnvironment(context));\n-                applyModulesThread.start();\n+\n+                applyModulesThread = Executors.newSingleThreadExecutor(\n+                        new ThreadFactoryBuilder()\n+                                .setNameFormat(new TargetLengthBasedClassNameAbbreviator(36).abbreviate(getClass().getName()) + \"-%d\")\n+                                .setDaemon(true)\n+                                .build()).submit(() -> environmentSwitchHandler.handleSwitchToGameEnvironment(context));\n                 return false;\n             } else {\n                 logger.warn(\"Missing at least one required module (or dependency) from the following list: {}\", moduleIds);"
  }
]
