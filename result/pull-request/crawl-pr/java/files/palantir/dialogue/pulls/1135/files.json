[
  {
    "sha": "9cee5ce117c19be6f78fad9b101bc11b4fdc93d9",
    "filename": "dialogue-annotations-processor/build.gradle",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/build.gradle",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/build.gradle",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations-processor/build.gradle?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,9 @@\n+//apply from: \"$rootDir/gradle/publish-jar.gradle\"\n+\n+dependencies {\n+    implementation project(':dialogue-annotations')\n+\n+    testCompileOnly 'org.immutables:value::annotations'\n+\n+    testImplementation 'org.junit.jupiter:junit-jupiter'\n+}"
  },
  {
    "sha": "52a8235b2bbf562d8bd6a4c5f7e1e4761a57d15d",
    "filename": "dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/CustomStringDeserializer.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/CustomStringDeserializer.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/CustomStringDeserializer.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/CustomStringDeserializer.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.myservice.service;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.io.ByteStreams;\n+import com.palantir.dialogue.Response;\n+import com.palantir.dialogue.annotations.StdDeserializer;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+/**\n+ * Deserializes a string out of CSV like: {@code \"mystring,<value>\"}, cause why not.\n+ */\n+public final class CustomStringDeserializer extends StdDeserializer<String> {\n+\n+    private static final Splitter SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n+\n+    public CustomStringDeserializer() {\n+        super(\"text/csv\");\n+    }\n+\n+    @Override\n+    public String deserialize(Response response) {\n+        try (InputStream is = response.body()) {\n+            String csv = new String(ByteStreams.toByteArray(is), StandardCharsets.UTF_8);\n+            List<String> fields = SPLITTER.splitToList(csv);\n+            Preconditions.checkState(fields.size() == 2);\n+            Preconditions.checkState(\"mystring\".equals(fields.get(0)));\n+            Preconditions.checkState(!Strings.isNullOrEmpty(fields.get(1)));\n+            return fields.get(1);\n+        } catch (IOException e) {\n+            throw new SafeRuntimeException(\"Failed to serialize payload\", e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "7ecdb166dd4b64400ca78ed85c027f6a2f3c0e33",
    "filename": "dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyCustomParamType.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyCustomParamType.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyCustomParamType.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyCustomParamType.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.myservice.service;\n+\n+public final class MyCustomParamType {\n+\n+    private final String value;\n+\n+    public MyCustomParamType(String value) {\n+        this.value = value;\n+    }\n+\n+    public String valueOf() {\n+        return value;\n+    }\n+}"
  },
  {
    "sha": "fb51dc16f3aabb42ffe6428411883be5f6ae8d1e",
    "filename": "dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyService.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyService.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyService.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyService.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.myservice.service;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.palantir.dialogue.DialogueService;\n+import com.palantir.dialogue.HttpMethod;\n+import com.palantir.dialogue.RequestBody;\n+import com.palantir.dialogue.Response;\n+import com.palantir.dialogue.annotations.Request;\n+import java.util.OptionalInt;\n+import java.util.UUID;\n+\n+@DialogueService(MyServiceDialogue.class)\n+public interface MyService {\n+\n+    @Request(method = HttpMethod.POST, path = \"/greet\")\n+    String greet(\n+            // Idea is that Json.class provides the encoder to transform the\n+            // greeting string into application/json. Another hand-written\n+            // CustomJson.class may provide a custom ObjectMapper, but we\n+            // should make it relatively easy to implement this sort of thing.\n+            @Request.Body String greeting);\n+\n+    // Support blocking and listenablefuture based on the return type\n+    @Request(method = HttpMethod.GET, path = \"/greeting\", accept = CustomStringDeserializer.class)\n+    ListenableFuture<String> getGreetingAsync();\n+\n+    // No decoders allowed (void method)\n+    // No encoders allowed (RequestBody is pre-encoded)\n+    @Request(method = HttpMethod.PUT, path = \"/custom/request\")\n+    void customRequest(RequestBody requestBody);\n+\n+    // No decoders allowed (Response is raw)\n+    // Unclear: If the response status is non-200, do we throw?\n+    // No encoders allowed (no body)\n+    // Should we support custom static request headers via\n+    // method level annotations? e.g.\n+    // @Request.Header(name=\"Accept\", value=\"text/plain\")\n+    // This is the dialogue Response object\n+    @Request(method = HttpMethod.PUT, path = \"/custom/request1\")\n+    Response customResponse();\n+\n+    @Request(method = HttpMethod.POST, path = \"/params/{myPathParam}/{myPathParam2}\")\n+    void params(\n+            @Request.QueryParam(\"q\") String query,\n+            // Path parameter variable name must match the request path component\n+            @Request.PathParam UUID myPathParam,\n+            @Request.PathParam MyCustomParamType myPathParam2,\n+            @Request.Header(\"Custom-Header\") int requestHeaderValue,\n+            // Headers can be optional\n+            @Request.Header(\"Custom-Optional-Header\") OptionalInt maybeRequestHeaderValue,\n+            // Custom encoding classes may be provided for the request and response.\n+            // JSON should be easiest (default?).\n+            // By changing this to MySpecialJson.class you can have\n+            // it's own object mapper; this is same as BodySerDe in dialogue\n+            @Request.Body(SerializableTypeBodySerializer.class) SerializableType body);\n+}"
  },
  {
    "sha": "f92e7ca2d04bc3970cb37065ccc77c968f19cb06",
    "filename": "dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyServiceDialogue.java",
    "status": "added",
    "additions": 279,
    "deletions": 0,
    "changes": 279,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyServiceDialogue.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyServiceDialogue.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/MyServiceDialogue.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,279 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.myservice.service;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.palantir.dialogue.BodySerDe;\n+import com.palantir.dialogue.ConjureRuntime;\n+import com.palantir.dialogue.Deserializer;\n+import com.palantir.dialogue.DialogueServiceFactory;\n+import com.palantir.dialogue.Endpoint;\n+import com.palantir.dialogue.EndpointChannel;\n+import com.palantir.dialogue.EndpointChannelFactory;\n+import com.palantir.dialogue.HttpMethod;\n+import com.palantir.dialogue.PathTemplate;\n+import com.palantir.dialogue.PlainSerDe;\n+import com.palantir.dialogue.Request;\n+import com.palantir.dialogue.RequestBody;\n+import com.palantir.dialogue.Response;\n+import com.palantir.dialogue.Serializer;\n+import com.palantir.dialogue.TypeMarker;\n+import com.palantir.dialogue.UrlBuilder;\n+import com.palantir.dialogue.annotations.Json;\n+import com.palantir.dialogue.annotations.RequestDeserializer;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+import java.util.UUID;\n+\n+interface MyServiceDialogue extends DialogueServiceFactory<MyService> {\n+\n+    @Override\n+    default MyService create(EndpointChannelFactory endpointChannelFactory, ConjureRuntime runtime) {\n+        return new MyService() {\n+\n+            private final PlainSerDe plainSerDe = runtime.plainSerDe();\n+            private final BodySerDe bodySerDe = runtime.bodySerDe();\n+            private final Json json = new Json();\n+\n+            private final EndpointChannel greetChannel = endpointChannelFactory.endpoint(Endpoints.greet);\n+            private final Serializer<String> greetBodySerializer = json.serializerFor(new TypeMarker<String>() {});\n+            private final Deserializer<String> greetBodyDeserializer =\n+                    json.deserializerFor(new TypeMarker<String>() {});\n+\n+            private final EndpointChannel greetingAsyncChannel =\n+                    endpointChannelFactory.endpoint(Endpoints.greetingAsync);\n+            private final Deserializer<String> greetingAsyncDeserializer = new CustomStringDeserializer();\n+\n+            private final EndpointChannel customRequestChannel =\n+                    endpointChannelFactory.endpoint(Endpoints.customRequest);\n+            private final Deserializer<Void> customRequestDeserializer = bodySerDe.emptyBodyDeserializer();\n+\n+            private final EndpointChannel customResponseChannel =\n+                    endpointChannelFactory.endpoint(Endpoints.customResponse);\n+            private final Deserializer<Response> customResponseDeserializer = RequestDeserializer.INSTANCE;\n+\n+            private final EndpointChannel paramsChannel = endpointChannelFactory.endpoint(Endpoints.params);\n+            private final Serializer<SerializableType> paramsBodySerializer = new SerializableTypeBodySerializer();\n+            private final Deserializer<Void> paramsDeserializer = bodySerDe.emptyBodyDeserializer();\n+\n+            @Override\n+            public String greet(String body) {\n+                Request.Builder request = Request.builder();\n+                request.body(greetBodySerializer.serialize(body));\n+                return runtime.clients().callBlocking(greetChannel, request.build(), greetBodyDeserializer);\n+            }\n+\n+            @Override\n+            public ListenableFuture<String> getGreetingAsync() {\n+                Request.Builder request = Request.builder();\n+                return runtime.clients().call(greetingAsyncChannel, request.build(), greetingAsyncDeserializer);\n+            }\n+\n+            @Override\n+            public void customRequest(RequestBody requestBody) {\n+                Request.Builder request = Request.builder();\n+                request.body(requestBody);\n+                runtime.clients().callBlocking(customRequestChannel, request.build(), customRequestDeserializer);\n+            }\n+\n+            @Override\n+            public Response customResponse() {\n+                Request.Builder request = Request.builder();\n+                return runtime.clients()\n+                        .callBlocking(customResponseChannel, request.build(), customResponseDeserializer);\n+            }\n+\n+            @Override\n+            public void params(\n+                    String query,\n+                    UUID myPathParam,\n+                    MyCustomParamType myPathParam2,\n+                    int requestHeaderValue,\n+                    OptionalInt maybeRequestHeaderValue,\n+                    SerializableType body) {\n+                Request.Builder request = Request.builder();\n+                request.putQueryParams(\"q\", query);\n+                request.putPathParams(\"myPathParam\", plainSerDe.serializeUuid(myPathParam));\n+                request.putPathParams(\"myPathParam2\", myPathParam2.valueOf());\n+                request.putHeaderParams(\"Custom-Header\", plainSerDe.serializeInteger(requestHeaderValue));\n+                if (maybeRequestHeaderValue.isPresent()) {\n+                    request.putHeaderParams(\n+                            \"Custom-Optional-Header\", plainSerDe.serializeInteger(maybeRequestHeaderValue.getAsInt()));\n+                }\n+                request.body(paramsBodySerializer.serialize(body));\n+                runtime.clients().callBlocking(paramsChannel, request.build(), paramsDeserializer);\n+            }\n+        };\n+    }\n+\n+    enum Endpoints implements Endpoint {\n+        greet {\n+            private final PathTemplate pathTemplate =\n+                    PathTemplate.builder().fixed(\"greet\").build();\n+\n+            @Override\n+            public void renderPath(Map<String, String> params, UrlBuilder url) {\n+                pathTemplate.fill(params, url);\n+            }\n+\n+            @Override\n+            public HttpMethod httpMethod() {\n+                return HttpMethod.POST;\n+            }\n+\n+            @Override\n+            public String serviceName() {\n+                return SERVICE_NAME;\n+            }\n+\n+            @Override\n+            public String endpointName() {\n+                return \"greet\";\n+            }\n+\n+            @Override\n+            public String version() {\n+                return VERSION;\n+            }\n+        },\n+        greetingAsync {\n+            private final PathTemplate pathTemplate =\n+                    PathTemplate.builder().fixed(\"greeting\").build();\n+\n+            @Override\n+            public void renderPath(Map<String, String> params, UrlBuilder url) {\n+                pathTemplate.fill(params, url);\n+            }\n+\n+            @Override\n+            public HttpMethod httpMethod() {\n+                return HttpMethod.GET;\n+            }\n+\n+            @Override\n+            public String serviceName() {\n+                return SERVICE_NAME;\n+            }\n+\n+            @Override\n+            public String endpointName() {\n+                return \"getGreetingAsync\";\n+            }\n+\n+            @Override\n+            public String version() {\n+                return VERSION;\n+            }\n+        },\n+        customRequest {\n+            private final PathTemplate pathTemplate =\n+                    PathTemplate.builder().fixed(\"custom\").fixed(\"request\").build();\n+\n+            @Override\n+            public void renderPath(Map<String, String> params, UrlBuilder url) {\n+                pathTemplate.fill(params, url);\n+            }\n+\n+            @Override\n+            public HttpMethod httpMethod() {\n+                return HttpMethod.PUT;\n+            }\n+\n+            @Override\n+            public String serviceName() {\n+                return SERVICE_NAME;\n+            }\n+\n+            @Override\n+            public String endpointName() {\n+                return \"customResponse\";\n+            }\n+\n+            @Override\n+            public String version() {\n+                return VERSION;\n+            }\n+        },\n+        customResponse {\n+            private final PathTemplate pathTemplate =\n+                    PathTemplate.builder().fixed(\"custom\").fixed(\"request1\").build();\n+\n+            @Override\n+            public void renderPath(Map<String, String> params, UrlBuilder url) {\n+                pathTemplate.fill(params, url);\n+            }\n+\n+            @Override\n+            public HttpMethod httpMethod() {\n+                return HttpMethod.PUT;\n+            }\n+\n+            @Override\n+            public String serviceName() {\n+                return SERVICE_NAME;\n+            }\n+\n+            @Override\n+            public String endpointName() {\n+                return \"customRequest\";\n+            }\n+\n+            @Override\n+            public String version() {\n+                return VERSION;\n+            }\n+        },\n+        params {\n+            private final PathTemplate pathTemplate = PathTemplate.builder()\n+                    .fixed(\"params\")\n+                    .variable(\"myPathParam\")\n+                    .variable(\"myPathParam2\")\n+                    .build();\n+\n+            @Override\n+            public void renderPath(Map<String, String> params, UrlBuilder url) {\n+                pathTemplate.fill(params, url);\n+            }\n+\n+            @Override\n+            public HttpMethod httpMethod() {\n+                return HttpMethod.POST;\n+            }\n+\n+            @Override\n+            public String serviceName() {\n+                return SERVICE_NAME;\n+            }\n+\n+            @Override\n+            public String endpointName() {\n+                return \"params\";\n+            }\n+\n+            @Override\n+            public String version() {\n+                return VERSION;\n+            }\n+        };\n+\n+        private static final String SERVICE_NAME = \"MyService\";\n+        private static final String VERSION = Optional.ofNullable(\n+                        Endpoints.class.getPackage().getImplementationVersion())\n+                .orElse(\"0.0.0\");\n+    }\n+}"
  },
  {
    "sha": "6dff5ca42d124a1c8327df38d0217dcf905ad596",
    "filename": "dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableType.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableType.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableType.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableType.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.myservice.service;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface SerializableType {}"
  },
  {
    "sha": "06be1354c7d9282d6954b97b29222946b4dcd0f0",
    "filename": "dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableTypeBodySerializer.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableTypeBodySerializer.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableTypeBodySerializer.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations-processor/src/test/java/com/palantir/myservice/service/SerializableTypeBodySerializer.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.myservice.service;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.palantir.dialogue.RequestBody;\n+import com.palantir.dialogue.Serializer;\n+import com.palantir.dialogue.TypeMarker;\n+import com.palantir.dialogue.annotations.Json;\n+import com.palantir.dialogue.annotations.StdSerializer;\n+\n+public final class SerializableTypeBodySerializer extends StdSerializer<SerializableType> {\n+\n+    private static final Serializer<SerializableType> SERIALIZER = new Json(\n+                    new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT))\n+            .serializerFor(new TypeMarker<SerializableType>() {});\n+\n+    @Override\n+    public RequestBody serialize(SerializableType value) {\n+        return SERIALIZER.serialize(value);\n+    }\n+}"
  },
  {
    "sha": "47534ca223ac761a4b7cc5672cbc351d64be7442",
    "filename": "dialogue-annotations/build.gradle",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/build.gradle",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/build.gradle",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/build.gradle?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,17 @@\n+//apply from: \"$rootDir/gradle/publish-jar.gradle\"\n+\n+dependencies {\n+    api project(':dialogue-target')\n+\n+    implementation project(':dialogue-serde')\n+    implementation 'com.fasterxml.jackson.core:jackson-databind'\n+    implementation 'com.google.code.findbugs:jsr305'\n+    implementation 'com.palantir.safe-logging:preconditions'\n+    implementation 'com.palantir.safe-logging:safe-logging'\n+\n+    testCompileOnly 'org.immutables:value::annotations'\n+\n+    testImplementation project(':dialogue-core')\n+    testImplementation project(':dialogue-test-common')\n+    testImplementation 'org.junit.jupiter:junit-jupiter'\n+}"
  },
  {
    "sha": "9891fcaedf5a9b6884c8b2ba22600f103c9cb4c8",
    "filename": "dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/DeserializerFactory.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/DeserializerFactory.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/DeserializerFactory.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/DeserializerFactory.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.dialogue.annotations;\n+\n+import com.palantir.dialogue.Deserializer;\n+import com.palantir.dialogue.TypeMarker;\n+\n+public interface DeserializerFactory<U> {\n+    <T extends U> Deserializer<T> deserializerFor(TypeMarker<T> type);\n+}"
  },
  {
    "sha": "49a0e1e836881a64d8533b8d548204ac5530fc61",
    "filename": "dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Json.java",
    "status": "added",
    "additions": 136,
    "deletions": 0,
    "changes": 136,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Json.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Json.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Json.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,136 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.dialogue.annotations;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+import com.palantir.conjure.java.dialogue.serde.DefaultConjureRuntime;\n+import com.palantir.conjure.java.dialogue.serde.Encoding;\n+import com.palantir.conjure.java.dialogue.serde.Encodings;\n+import com.palantir.dialogue.BodySerDe;\n+import com.palantir.dialogue.TypeMarker;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.annotation.Nullable;\n+\n+public final class Json implements DeserializerFactory<Object>, SerializerFactory<Object> {\n+\n+    private static final BodySerDe DEFAULT_BODY_SERDE =\n+            DefaultConjureRuntime.builder().encodings(Encodings.json()).build().bodySerDe();\n+\n+    private final BodySerDe bodySerDe;\n+\n+    public Json() {\n+        this(DEFAULT_BODY_SERDE);\n+    }\n+\n+    public Json(ObjectMapper mapper) {\n+        this(DefaultConjureRuntime.builder().encodings(json(mapper)).build().bodySerDe());\n+    }\n+\n+    private Json(BodySerDe bodySerDe) {\n+        this.bodySerDe = bodySerDe;\n+    }\n+\n+    @Override\n+    public <T> com.palantir.dialogue.Deserializer<T> deserializerFor(TypeMarker<T> type) {\n+        return bodySerDe.deserializer(type);\n+    }\n+\n+    @Override\n+    public <T> com.palantir.dialogue.Serializer<T> serializerFor(TypeMarker<T> type) {\n+        return bodySerDe.serializer(type);\n+    }\n+\n+    // Copied code, tbd how to share.\n+\n+    private static Encoding json(ObjectMapper mapper) {\n+        return new AbstractJacksonEncoding(mapper) {\n+            private static final String CONTENT_TYPE = \"application/json\";\n+\n+            @Override\n+            public String getContentType() {\n+                return CONTENT_TYPE;\n+            }\n+\n+            @Override\n+            public boolean supportsContentType(String contentType) {\n+                return matchesContentType(CONTENT_TYPE, contentType);\n+            }\n+        };\n+    }\n+\n+    private abstract static class AbstractJacksonEncoding implements Encoding {\n+\n+        private final ObjectMapper mapper;\n+\n+        AbstractJacksonEncoding(ObjectMapper mapper) {\n+            this.mapper = Preconditions.checkNotNull(mapper, \"ObjectMapper is required\");\n+        }\n+\n+        @Override\n+        public final <T> Serializer<T> serializer(TypeMarker<T> type) {\n+            ObjectWriter writer = mapper.writerFor(mapper.constructType(type.getType()));\n+            return (value, output) -> {\n+                Preconditions.checkNotNull(value, \"cannot serialize null value\");\n+                try {\n+                    writer.writeValue(output, value);\n+                } catch (IOException e) {\n+                    throw new SafeRuntimeException(\"Failed to serialize payload\", e);\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public final <T> Deserializer<T> deserializer(TypeMarker<T> type) {\n+            ObjectReader reader = mapper.readerFor(mapper.constructType(type.getType()));\n+            return input -> {\n+                try (InputStream inputStream = input) {\n+                    T value = reader.readValue(inputStream);\n+                    // Bad input should result in a 4XX response status, throw IAE rather than NPE.\n+                    Preconditions.checkArgument(value != null, \"cannot deserialize a JSON null value\");\n+                    return value;\n+                } catch (MismatchedInputException e) {\n+                    throw new SafeRuntimeException(\n+                            \"Failed to deserialize response stream. Syntax error?\",\n+                            e,\n+                            SafeArg.of(\"type\", type.getType()));\n+                } catch (IOException e) {\n+                    throw new SafeRuntimeException(\n+                            \"Failed to deserialize response stream\", e, SafeArg.of(\"type\", type.getType()));\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public final String toString() {\n+            return \"AbstractJacksonEncoding{\" + getContentType() + '}';\n+        }\n+    }\n+\n+    static boolean matchesContentType(String contentType, @Nullable String typeToCheck) {\n+        // TODO(ckozak): support wildcards? See javax.ws.rs.core.MediaType.isCompatible\n+        return typeToCheck != null\n+                // Use startsWith to avoid failures due to charset\n+                && typeToCheck.startsWith(contentType);\n+    }\n+}"
  },
  {
    "sha": "3754fd44fcad8a79b055e341bdc0317ee6932d99",
    "filename": "dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Request.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Request.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Request.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/Request.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.dialogue.annotations;\n+\n+import com.palantir.dialogue.Deserializer;\n+import com.palantir.dialogue.HttpMethod;\n+import com.palantir.dialogue.Serializer;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotates an RPC endpoint.\n+ *\n+ * This annotation provides namespace for annotations for dialogue client generation.\n+ */\n+@Documented\n+@Retention(RetentionPolicy.SOURCE)\n+@Target(ElementType.METHOD)\n+public @interface Request {\n+    HttpMethod method();\n+\n+    /**\n+     * Request path.\n+     *\n+     * Tell the people what the format here is!\n+     */\n+    String path();\n+\n+    /**\n+     * Custom response body {@link Deserializer}.\n+     *\n+     * @return class that implements a zero-arg constructor to be used to deserialize the response\n+     */\n+    Class<? extends DeserializerFactory> accept() default Json.class;\n+\n+    /** Annotates the request body. */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @Target(ElementType.PARAMETER)\n+    @interface Body {\n+\n+        /**\n+         * Custom body {@link Serializer}.\n+         *\n+         * @return class that implements a zero-arg constructor to be used to serialize the body. Defaults to\n+         * {@link Json}\n+         */\n+        Class<? extends SerializerFactory> value() default Json.class;\n+    }\n+\n+    /** Annotates a header param. */\n+    @Retention(RetentionPolicy.SOURCE)\n+    @Target(ElementType.PARAMETER)\n+    @interface Header {\n+        String value();\n+    }\n+\n+    @Retention(RetentionPolicy.SOURCE)\n+    @Target(ElementType.PARAMETER)\n+    @interface PathParam {}\n+\n+    @Retention(RetentionPolicy.SOURCE)\n+    @Target(ElementType.PARAMETER)\n+    @interface QueryParam {\n+        String value();\n+    }\n+}"
  },
  {
    "sha": "02eca64deef8679d50c321742cdbc45c7cf09c75",
    "filename": "dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/RequestDeserializer.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/RequestDeserializer.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/RequestDeserializer.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/RequestDeserializer.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.dialogue.annotations;\n+\n+import com.palantir.dialogue.Deserializer;\n+import com.palantir.dialogue.Response;\n+import java.util.Optional;\n+\n+public enum RequestDeserializer implements Deserializer<Response> {\n+    INSTANCE;\n+\n+    @Override\n+    public Response deserialize(Response response) {\n+        return response;\n+    }\n+\n+    @Override\n+    public Optional<String> accepts() {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"EmptyBodyDeserializer{}\";\n+    }\n+}"
  },
  {
    "sha": "e371ea6dbed25b394d6f4179a5843836e0a2426c",
    "filename": "dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/SerializerFactory.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/SerializerFactory.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/SerializerFactory.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/SerializerFactory.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.dialogue.annotations;\n+\n+import com.palantir.dialogue.Serializer;\n+import com.palantir.dialogue.TypeMarker;\n+\n+public interface SerializerFactory<U> {\n+    <T extends U> Serializer<T> serializerFor(TypeMarker<T> type);\n+}"
  },
  {
    "sha": "d05f8133bb15ef0f886f8c1352c4a029067c5c20",
    "filename": "dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdDeserializer.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdDeserializer.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdDeserializer.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdDeserializer.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.dialogue.annotations;\n+\n+import com.palantir.dialogue.Deserializer;\n+import com.palantir.dialogue.TypeMarker;\n+import java.util.Optional;\n+\n+@SuppressWarnings({\"RawTypes\", \"unchecked\"})\n+public abstract class StdDeserializer<T> implements DeserializerFactory<T>, Deserializer<T> {\n+\n+    private final Optional<String> accepts;\n+\n+    public StdDeserializer(String accepts) {\n+        this.accepts = Optional.of(accepts);\n+    }\n+\n+    @Override\n+    public final Optional<String> accepts() {\n+        return accepts;\n+    }\n+\n+    @Override\n+    public final <T1 extends T> Deserializer<T1> deserializerFor(TypeMarker<T1> _type) {\n+        return (Deserializer<T1>) this;\n+    }\n+}"
  },
  {
    "sha": "9b5794398140fb9c13ef7e6d4e4157db08126b07",
    "filename": "dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdSerializer.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdSerializer.java",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdSerializer.java",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/dialogue-annotations/src/main/java/com/palantir/dialogue/annotations/StdSerializer.java?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.dialogue.annotations;\n+\n+import com.palantir.dialogue.Serializer;\n+import com.palantir.dialogue.TypeMarker;\n+\n+@SuppressWarnings({\"RawTypes\", \"unchecked\"})\n+public abstract class StdSerializer<T> implements SerializerFactory<T>, Serializer<T> {\n+\n+    @Override\n+    public final <T1 extends T> Serializer<T1> serializerFor(TypeMarker<T1> _type) {\n+        return (Serializer<T1>) this;\n+    }\n+}"
  },
  {
    "sha": "e4073998109cc9738cf4e23d3e7cd75c17f5dfbe",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/palantir/dialogue/blob/ae25c84da2beeca883b957e0f529c966359a2c8e/settings.gradle",
    "raw_url": "https://github.com/palantir/dialogue/raw/ae25c84da2beeca883b957e0f529c966359a2c8e/settings.gradle",
    "contents_url": "https://api.github.com/repos/palantir/dialogue/contents/settings.gradle?ref=ae25c84da2beeca883b957e0f529c966359a2c8e",
    "patch": "@@ -1,5 +1,7 @@\n rootProject.name = 'dialogue'\n \n+include 'dialogue-annotations'\n+include 'dialogue-annotations-processor'\n include 'dialogue-apache-hc5-client'\n include 'dialogue-blocking-channels'\n include 'dialogue-test-common'"
  }
]
