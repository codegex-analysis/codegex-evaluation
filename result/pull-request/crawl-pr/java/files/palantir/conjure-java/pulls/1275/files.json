[
  {
    "sha": "4287feaf8a9355f9645bb5e75d27cb41e2266bb8",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/build.gradle",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/build.gradle",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/build.gradle?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -48,6 +48,7 @@ allprojects {\n     group 'com.palantir.conjure.java'\n \n     repositories {\n+        mavenLocal()\n         jcenter()\n         maven {\n             url 'https://dl.bintray.com/palantir/releases/'"
  },
  {
    "sha": "f1c2daacf2ffa0b9e0a13b802cb64f67dd11d6ab",
    "filename": "changelog/@unreleased/pr-1275.v2.yml",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/changelog/@unreleased/pr-1275.v2.yml",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/changelog/@unreleased/pr-1275.v2.yml",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/changelog/@unreleased/pr-1275.v2.yml?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -0,0 +1,5 @@\n+type: improvement\n+improvement:\n+  description: Errors declared on endpoints are now exposed in Undertow and Dialogue interfaces as checked exceptions.\n+  links:\n+  - https://github.com/palantir/conjure-java/pull/1275"
  },
  {
    "sha": "fcec83e68c272c1e3cde186d7e635db14de867a9",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/ConjureErrors.java",
    "status": "modified",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/ConjureErrors.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/ConjureErrors.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/ConjureErrors.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -1,10 +1,15 @@\n package com.palantir.product;\n \n+import com.palantir.conjure.java.api.errors.CheckedRemoteException;\n+import com.palantir.conjure.java.api.errors.CheckedServiceException;\n import com.palantir.conjure.java.api.errors.ErrorType;\n+import com.palantir.conjure.java.api.errors.RemoteException;\n import com.palantir.conjure.java.api.errors.ServiceException;\n+import com.palantir.logsafe.Arg;\n import com.palantir.logsafe.SafeArg;\n import com.palantir.logsafe.UnsafeArg;\n import javax.annotation.Generated;\n+import javax.annotation.Nullable;\n \n @Generated(\"com.palantir.conjure.java.types.ErrorGenerator\")\n public final class ConjureErrors {\n@@ -20,6 +25,12 @@\n     public static final ErrorType INVALID_TYPE_DEFINITION =\n             ErrorType.create(ErrorType.Code.INVALID_ARGUMENT, \"Conjure:InvalidTypeDefinition\");\n \n+    /**\n+     * This should be a checked exception.\n+     */\n+    public static final ErrorType SHOULD_BE_CHECKED =\n+            ErrorType.create(ErrorType.Code.INVALID_ARGUMENT, \"Conjure:ShouldBeChecked\");\n+\n     private ConjureErrors() {}\n \n     /**\n@@ -55,6 +66,14 @@ public static ServiceException invalidTypeDefinition(Throwable cause, String typ\n                 INVALID_TYPE_DEFINITION, cause, SafeArg.of(\"typeName\", typeName), UnsafeArg.of(\"typeDef\", typeDef));\n     }\n \n+    public static ShouldBeCheckedServiceException shouldBeChecked() {\n+        return new ShouldBeCheckedServiceException(SHOULD_BE_CHECKED);\n+    }\n+\n+    public static ShouldBeCheckedServiceException shouldBeChecked(Throwable cause) {\n+        return new ShouldBeCheckedServiceException(SHOULD_BE_CHECKED, cause);\n+    }\n+\n     /**\n      * Throws a {@link ServiceException} of type InvalidServiceDefinition when {@code shouldThrow} is true.\n      * @param shouldThrow Cause the method to throw when true\n@@ -78,4 +97,30 @@ public static void throwIfInvalidTypeDefinition(boolean shouldThrow, String type\n             throw invalidTypeDefinition(typeName, typeDef);\n         }\n     }\n+\n+    /**\n+     * Throws a {@link ServiceException} of type ShouldBeChecked when {@code shouldThrow} is true.\n+     * @param shouldThrow Cause the method to throw when true\n+     */\n+    public static void throwIfShouldBeChecked(boolean shouldThrow) throws ShouldBeCheckedServiceException {\n+        if (shouldThrow) {\n+            throw shouldBeChecked();\n+        }\n+    }\n+\n+    public static final class ShouldBeCheckedServiceException extends CheckedServiceException {\n+        private ShouldBeCheckedServiceException(ErrorType errorType, Arg<?>... parameters) {\n+            super(errorType, parameters);\n+        }\n+\n+        private ShouldBeCheckedServiceException(ErrorType errorType, @Nullable Throwable cause, Arg<?>... parameters) {\n+            super(errorType, cause, parameters);\n+        }\n+    }\n+\n+    public static final class ShouldBeCheckedRemoteException extends CheckedRemoteException {\n+        ShouldBeCheckedRemoteException(RemoteException remote) {\n+            super(remote.getError(), remote.getStatus());\n+        }\n+    }\n }"
  },
  {
    "sha": "dede57185fd17c323011a52e48af6dbfbb54882f",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/DialogueEteEndpoints.java",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/DialogueEteEndpoints.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/DialogueEteEndpoints.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/DialogueEteEndpoints.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -970,6 +970,36 @@ public String endpointName() {\n             return \"receiveSetOfOptionals\";\n         }\n \n+        @Override\n+        public String version() {\n+            return \"1.2.3\";\n+        }\n+    },\n+\n+    throwsCheckedException {\n+        private final PathTemplate pathTemplate =\n+                PathTemplate.builder().fixed(\"base\").fixed(\"errors\").build();\n+\n+        @Override\n+        public void renderPath(Map<String, String> params, UrlBuilder url) {\n+            pathTemplate.fill(params, url);\n+        }\n+\n+        @Override\n+        public HttpMethod httpMethod() {\n+            return HttpMethod.PUT;\n+        }\n+\n+        @Override\n+        public String serviceName() {\n+            return \"EteService\";\n+        }\n+\n+        @Override\n+        public String endpointName() {\n+            return \"throwsCheckedException\";\n+        }\n+\n         @Override\n         public String version() {\n             return \"1.2.3\";"
  },
  {
    "sha": "1e11de0fa752d473b518895df912f80a736cca6b",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/EteService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteService.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteService.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/EteService.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -194,6 +194,10 @@ void receiveListOfOptionals(\n     void receiveSetOfOptionals(\n             @HeaderParam(\"Authorization\") @NotNull AuthHeader authHeader, @NotNull Set<Optional<String>> value);\n \n+    @PUT\n+    @Path(\"base/errors\")\n+    void throwsCheckedException(@HeaderParam(\"Authorization\") @NotNull AuthHeader authHeader);\n+\n     @Deprecated\n     default Optional<Long> optionalExternalLongQuery(AuthHeader authHeader) {\n         return optionalExternalLongQuery(authHeader, Optional.empty());"
  },
  {
    "sha": "5979865bfd1d99e5cea6f816841ac44ea5236882",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceAsync.java",
    "status": "modified",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceAsync.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceAsync.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceAsync.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -1,6 +1,7 @@\n package com.palantir.product;\n \n import com.google.common.util.concurrent.ListenableFuture;\n+import com.palantir.conjure.java.api.errors.RemoteException;\n import com.palantir.conjure.java.lib.SafeLong;\n import com.palantir.dialogue.Channel;\n import com.palantir.dialogue.ConjureRuntime;\n@@ -205,6 +206,12 @@\n      */\n     ListenableFuture<Void> receiveSetOfOptionals(AuthHeader authHeader, Set<Optional<String>> value);\n \n+    /**\n+     * @apiNote {@code PUT /base/errors}\n+     */\n+    ListenableFuture<Void> throwsCheckedException(AuthHeader authHeader)\n+            throws ExampleErrors.ExampleErrorRemoteException;\n+\n     /**\n      * Creates an asynchronous/non-blocking client for a EteService service.\n      */\n@@ -400,6 +407,12 @@ static EteServiceAsync of(EndpointChannelFactory _endpointChannelFactory, Conjur\n             private final Deserializer<Void> receiveSetOfOptionalsDeserializer =\n                     _runtime.bodySerDe().emptyBodyDeserializer();\n \n+            private final EndpointChannel throwsCheckedExceptionChannel =\n+                    _endpointChannelFactory.endpoint(DialogueEteEndpoints.throwsCheckedException);\n+\n+            private final Deserializer<Void> throwsCheckedExceptionDeserializer =\n+                    _runtime.bodySerDe().emptyBodyDeserializer();\n+\n             @Override\n             public ListenableFuture<String> string(AuthHeader authHeader) {\n                 Request.Builder _request = Request.builder();\n@@ -695,6 +708,24 @@ static EteServiceAsync of(EndpointChannelFactory _endpointChannelFactory, Conjur\n                         .call(receiveSetOfOptionalsChannel, _request.build(), receiveSetOfOptionalsDeserializer);\n             }\n \n+            @Override\n+            public ListenableFuture<Void> throwsCheckedException(AuthHeader authHeader)\n+                    throws ExampleErrors.ExampleErrorRemoteException {\n+                Request.Builder _request = Request.builder();\n+                _request.putHeaderParams(\"Authorization\", authHeader.toString());\n+                try {\n+                    return _runtime.clients()\n+                            .call(throwsCheckedExceptionChannel, _request.build(), throwsCheckedExceptionDeserializer);\n+                } catch (RemoteException remoteException) {\n+                    String name = remoteException.getError().errorName();\n+                    if (name.equals(\"Example:ExampleError\")) {\n+                        throw new ExampleErrors.ExampleErrorRemoteException(remoteException);\n+                    } else {\n+                        throw remoteException;\n+                    }\n+                }\n+            }\n+\n             @Override\n             public String toString() {\n                 return \"EteServiceAsync{_endpointChannelFactory=\" + _endpointChannelFactory + \", runtime=\" + _runtime"
  },
  {
    "sha": "983eb1e5cf13a9a91173f97d7066f96ec1aed316",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceBlocking.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceBlocking.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceBlocking.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceBlocking.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -1,6 +1,7 @@\n package com.palantir.product;\n \n import com.google.errorprone.annotations.MustBeClosed;\n+import com.palantir.conjure.java.api.errors.RemoteException;\n import com.palantir.conjure.java.lib.SafeLong;\n import com.palantir.dialogue.Channel;\n import com.palantir.dialogue.ConjureRuntime;\n@@ -201,6 +202,11 @@ void complexQueryParameters(\n      */\n     void receiveSetOfOptionals(AuthHeader authHeader, Set<Optional<String>> value);\n \n+    /**\n+     * @apiNote {@code PUT /base/errors}\n+     */\n+    void throwsCheckedException(AuthHeader authHeader) throws ExampleErrors.ExampleErrorRemoteException;\n+\n     /**\n      * Creates a synchronous/blocking client for a EteService service.\n      */\n@@ -396,6 +402,12 @@ static EteServiceBlocking of(EndpointChannelFactory _endpointChannelFactory, Con\n             private final Deserializer<Void> receiveSetOfOptionalsDeserializer =\n                     _runtime.bodySerDe().emptyBodyDeserializer();\n \n+            private final EndpointChannel throwsCheckedExceptionChannel =\n+                    _endpointChannelFactory.endpoint(DialogueEteEndpoints.throwsCheckedException);\n+\n+            private final Deserializer<Void> throwsCheckedExceptionDeserializer =\n+                    _runtime.bodySerDe().emptyBodyDeserializer();\n+\n             @Override\n             public String string(AuthHeader authHeader) {\n                 Request.Builder _request = Request.builder();\n@@ -691,6 +703,26 @@ public void receiveSetOfOptionals(AuthHeader authHeader, Set<Optional<String>> v\n                                 receiveSetOfOptionalsChannel, _request.build(), receiveSetOfOptionalsDeserializer);\n             }\n \n+            @Override\n+            public void throwsCheckedException(AuthHeader authHeader) throws ExampleErrors.ExampleErrorRemoteException {\n+                Request.Builder _request = Request.builder();\n+                _request.putHeaderParams(\"Authorization\", authHeader.toString());\n+                try {\n+                    _runtime.clients()\n+                            .callBlocking(\n+                                    throwsCheckedExceptionChannel,\n+                                    _request.build(),\n+                                    throwsCheckedExceptionDeserializer);\n+                } catch (RemoteException remoteException) {\n+                    String name = remoteException.getError().errorName();\n+                    if (name.equals(\"Example:ExampleError\")) {\n+                        throw new ExampleErrors.ExampleErrorRemoteException(remoteException);\n+                    } else {\n+                        throw remoteException;\n+                    }\n+                }\n+            }\n+\n             @Override\n             public String toString() {\n                 return \"EteServiceBlocking{_endpointChannelFactory=\" + _endpointChannelFactory + \", runtime=\" + _runtime"
  },
  {
    "sha": "8c7edfe6e53d2ae1a953289abf5cb88c1bd3aed8",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceEndpoints.java",
    "status": "modified",
    "additions": 46,
    "deletions": 1,
    "changes": 47,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceEndpoints.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceEndpoints.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceEndpoints.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -73,7 +73,8 @@ public static UndertowService of(UndertowEteService delegate) {\n                 new AliasLongEndpointEndpoint(runtime, delegate),\n                 new ComplexQueryParametersEndpoint(runtime, delegate),\n                 new ReceiveListOfOptionalsEndpoint(runtime, delegate),\n-                new ReceiveSetOfOptionalsEndpoint(runtime, delegate));\n+                new ReceiveSetOfOptionalsEndpoint(runtime, delegate),\n+                new ThrowsCheckedExceptionEndpoint(runtime, delegate));\n     }\n \n     private static final class StringEndpoint implements HttpHandler, Endpoint {\n@@ -1543,4 +1544,48 @@ public HttpHandler handler() {\n             return this;\n         }\n     }\n+\n+    private static final class ThrowsCheckedExceptionEndpoint implements HttpHandler, Endpoint {\n+        private final UndertowRuntime runtime;\n+\n+        private final UndertowEteService delegate;\n+\n+        ThrowsCheckedExceptionEndpoint(UndertowRuntime runtime, UndertowEteService delegate) {\n+            this.runtime = runtime;\n+            this.delegate = delegate;\n+        }\n+\n+        @Override\n+        public void handleRequest(HttpServerExchange exchange)\n+                throws IOException, ExampleErrors.ExampleErrorServiceException {\n+            AuthHeader authHeader = runtime.auth().header(exchange);\n+            delegate.throwsCheckedException(authHeader);\n+            exchange.setStatusCode(StatusCodes.NO_CONTENT);\n+        }\n+\n+        @Override\n+        public HttpString method() {\n+            return Methods.PUT;\n+        }\n+\n+        @Override\n+        public String template() {\n+            return \"/base/errors\";\n+        }\n+\n+        @Override\n+        public String serviceName() {\n+            return \"EteService\";\n+        }\n+\n+        @Override\n+        public String name() {\n+            return \"throwsCheckedException\";\n+        }\n+\n+        @Override\n+        public HttpHandler handler() {\n+            return this;\n+        }\n+    }\n }"
  },
  {
    "sha": "575168ff2a4640ac9fca6e7009716eee98b8247c",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceRetrofit.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceRetrofit.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceRetrofit.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/EteServiceRetrofit.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -184,6 +184,10 @@\n     ListenableFuture<Void> receiveSetOfOptionals(\n             @Header(\"Authorization\") AuthHeader authHeader, @Body Set<Optional<String>> value);\n \n+    @PUT(\"./base/errors\")\n+    @Headers({\"hr-path-template: /base/errors\", \"Accept: application/json\"})\n+    ListenableFuture<Void> throwsCheckedException(@Header(\"Authorization\") AuthHeader authHeader);\n+\n     @Deprecated\n     default ListenableFuture<Optional<Long>> optionalExternalLongQuery(@Header(\"Authorization\") AuthHeader authHeader) {\n         return optionalExternalLongQuery(authHeader, Optional.empty());"
  },
  {
    "sha": "8da184b79468bded8f8585da78ebfd3735a1287b",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/ExampleErrors.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/ExampleErrors.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/ExampleErrors.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/ExampleErrors.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -0,0 +1,54 @@\n+package com.palantir.product;\n+\n+import com.palantir.conjure.java.api.errors.CheckedRemoteException;\n+import com.palantir.conjure.java.api.errors.CheckedServiceException;\n+import com.palantir.conjure.java.api.errors.ErrorType;\n+import com.palantir.conjure.java.api.errors.RemoteException;\n+import com.palantir.logsafe.Arg;\n+import javax.annotation.Generated;\n+import javax.annotation.Nullable;\n+\n+@Generated(\"com.palantir.conjure.java.types.ErrorGenerator\")\n+public final class ExampleErrors {\n+    /**\n+     * This should be a checked exception.\n+     */\n+    public static final ErrorType EXAMPLE_ERROR =\n+            ErrorType.create(ErrorType.Code.INVALID_ARGUMENT, \"Example:ExampleError\");\n+\n+    private ExampleErrors() {}\n+\n+    public static ExampleErrorServiceException exampleError() {\n+        return new ExampleErrorServiceException(EXAMPLE_ERROR);\n+    }\n+\n+    public static ExampleErrorServiceException exampleError(Throwable cause) {\n+        return new ExampleErrorServiceException(EXAMPLE_ERROR, cause);\n+    }\n+\n+    /**\n+     * Throws a {@link ServiceException} of type ExampleError when {@code shouldThrow} is true.\n+     * @param shouldThrow Cause the method to throw when true\n+     */\n+    public static void throwIfExampleError(boolean shouldThrow) throws ExampleErrorServiceException {\n+        if (shouldThrow) {\n+            throw exampleError();\n+        }\n+    }\n+\n+    public static final class ExampleErrorServiceException extends CheckedServiceException {\n+        private ExampleErrorServiceException(ErrorType errorType, Arg<?>... parameters) {\n+            super(errorType, parameters);\n+        }\n+\n+        private ExampleErrorServiceException(ErrorType errorType, @Nullable Throwable cause, Arg<?>... parameters) {\n+            super(errorType, cause, parameters);\n+        }\n+    }\n+\n+    public static final class ExampleErrorRemoteException extends CheckedRemoteException {\n+        ExampleErrorRemoteException(RemoteException remote) {\n+            super(remote.getError(), remote.getStatus());\n+        }\n+    }\n+}"
  },
  {
    "sha": "6ac966afac72ae0bde2d7a46b77030494dfba77d",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowEteService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowEteService.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowEteService.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowEteService.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -177,4 +177,9 @@ void complexQueryParameters(\n      * @apiNote {@code PUT /base/set/optionals}\n      */\n     void receiveSetOfOptionals(AuthHeader authHeader, Set<Optional<String>> value);\n+\n+    /**\n+     * @apiNote {@code PUT /base/errors}\n+     */\n+    void throwsCheckedException(AuthHeader authHeader) throws ExampleErrors.ExampleErrorServiceException;\n }"
  },
  {
    "sha": "3ae7d9b0aebf0b5ba12857c0fb9cc39eaaf56683",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/ConjureTags.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/ConjureTags.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/ConjureTags.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/ConjureTags.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -26,7 +26,7 @@\n import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n import com.squareup.javapoet.AnnotationSpec;\n import java.util.Collection;\n-import java.util.List;\n+import java.util.Set;\n \n public final class ConjureTags {\n \n@@ -46,7 +46,7 @@ public static boolean isUnsafe(Collection<String> tags) {\n \n     public static ImmutableList<AnnotationSpec> tagAnnotations(ArgumentDefinition argument) {\n         validateTags(argument);\n-        List<String> tags = argument.getTags();\n+        Set<String> tags = argument.getTags();\n         ImmutableList.Builder<AnnotationSpec> builder = ImmutableList.builderWithExpectedSize(1);\n         if (isSafe(tags)) {\n             builder.add(AnnotationSpec.builder(Safe.class).build());\n@@ -58,7 +58,7 @@ public static boolean isUnsafe(Collection<String> tags) {\n     }\n \n     public static void validateTags(ArgumentDefinition argument) {\n-        List<String> tags = argument.getTags();\n+        Set<String> tags = argument.getTags();\n         validateTags(tags);\n \n         boolean hasSafeMarker = argument.getMarkers().stream()"
  },
  {
    "sha": "7335a6b31255d46beaf17d64b9367c465bd57df3",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceGenerator.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceGenerator.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -20,6 +20,7 @@\n import com.palantir.conjure.java.Options;\n import com.palantir.conjure.java.types.ClassNameVisitor;\n import com.palantir.conjure.java.types.DefaultClassNameVisitor;\n+import com.palantir.conjure.java.types.ErrorMapper;\n import com.palantir.conjure.java.types.SpecializeBinaryClassNameVisitor;\n import com.palantir.conjure.java.types.TypeMapper;\n import com.palantir.conjure.java.undertow.lib.BinaryResponseBody;\n@@ -50,13 +51,16 @@ public UndertowServiceGenerator(Options options) {\n         TypeMapper returnTypeMapper = new TypeMapper(\n                 types,\n                 new SpecializeBinaryClassNameVisitor(defaultVisitor, types, ClassName.get(BinaryResponseBody.class)));\n+        ErrorMapper errorMapper = new ErrorMapper(conjureDefinition);\n \n         UndertowServiceInterfaceGenerator interfaceGenerator = new UndertowServiceInterfaceGenerator(options);\n         UndertowServiceHandlerGenerator handlerGenerator = new UndertowServiceHandlerGenerator(options);\n \n         return conjureDefinition.getServices().stream()\n                 .flatMap(serviceDef -> Stream.of(\n-                        interfaceGenerator.generateServiceInterface(serviceDef, typeMapper, returnTypeMapper),\n-                        handlerGenerator.generateServiceHandler(serviceDef, types, typeMapper, returnTypeMapper)));\n+                        interfaceGenerator.generateServiceInterface(\n+                                serviceDef, typeMapper, returnTypeMapper, errorMapper),\n+                        handlerGenerator.generateServiceHandler(\n+                                serviceDef, types, typeMapper, returnTypeMapper, errorMapper)));\n     }\n }"
  },
  {
    "sha": "d498e0c8f91eb61451d205f7bcf5bc49f2f7811a",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java",
    "status": "modified",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -27,6 +27,7 @@\n import com.palantir.conjure.java.ConjureTags;\n import com.palantir.conjure.java.Options;\n import com.palantir.conjure.java.types.CodeBlocks;\n+import com.palantir.conjure.java.types.ErrorMapper;\n import com.palantir.conjure.java.types.TypeMapper;\n import com.palantir.conjure.java.undertow.lib.Deserializer;\n import com.palantir.conjure.java.undertow.lib.Endpoint;\n@@ -112,7 +113,8 @@ public JavaFile generateServiceHandler(\n             ServiceDefinition serviceDefinition,\n             Map<com.palantir.conjure.spec.TypeName, TypeDefinition> typeDefinitions,\n             TypeMapper typeMapper,\n-            TypeMapper returnTypeMapper) {\n+            TypeMapper returnTypeMapper,\n+            ErrorMapper errorMapper) {\n         String serviceName = serviceDefinition.getServiceName().getName();\n         // class name\n         ClassName serviceClass = ClassName.get(\n@@ -175,7 +177,13 @@ public JavaFile generateServiceHandler(\n                 .addTypes(Lists.transform(\n                         serviceDefinition.getEndpoints(),\n                         e -> generateEndpointHandler(\n-                                e, serviceDefinition, serviceClass, typeDefinitions, typeMapper, returnTypeMapper)))\n+                                e,\n+                                serviceDefinition,\n+                                serviceClass,\n+                                typeDefinitions,\n+                                typeMapper,\n+                                returnTypeMapper,\n+                                errorMapper)))\n                 .build();\n \n         return JavaFile.builder(\n@@ -204,14 +212,20 @@ private TypeSpec generateEndpointHandler(\n             ClassName serviceClass,\n             Map<com.palantir.conjure.spec.TypeName, TypeDefinition> typeDefinitions,\n             TypeMapper typeMapper,\n-            TypeMapper returnTypeMapper) {\n+            TypeMapper returnTypeMapper,\n+            ErrorMapper errorMapper) {\n         MethodSpec.Builder handleMethodBuilder = MethodSpec.methodBuilder(\"handleRequest\")\n                 .addAnnotation(Override.class)\n                 .addModifiers(Modifier.PUBLIC)\n                 .addParameter(HttpServerExchange.class, EXCHANGE_VAR_NAME)\n                 .addException(IOException.class)\n                 .addCode(endpointInvocation(endpointDefinition, typeDefinitions, typeMapper, returnTypeMapper));\n \n+        for (com.palantir.conjure.spec.TypeName errorName : endpointDefinition.getErrors()) {\n+            ClassName errorClass = errorMapper.getServiceClassNameForError(errorName);\n+            handleMethodBuilder.addException(errorClass);\n+        }\n+\n         endpointDefinition\n                 .getDeprecated()\n                 .ifPresent(deprecatedDocsValue ->"
  },
  {
    "sha": "c0af011e77e4c6c6eed71384d97c4c472559f4ed",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -19,6 +19,7 @@\n import com.google.common.collect.ImmutableList;\n import com.palantir.conjure.java.ConjureAnnotations;\n import com.palantir.conjure.java.Options;\n+import com.palantir.conjure.java.types.ErrorMapper;\n import com.palantir.conjure.java.types.TypeMapper;\n import com.palantir.conjure.java.util.JavaNameSanitizer;\n import com.palantir.conjure.java.util.Javadoc;\n@@ -30,6 +31,7 @@\n import com.palantir.conjure.spec.EndpointDefinition;\n import com.palantir.conjure.spec.HeaderAuthType;\n import com.palantir.conjure.spec.ServiceDefinition;\n+import com.palantir.conjure.spec.TypeName;\n import com.palantir.tokens.auth.AuthHeader;\n import com.palantir.tokens.auth.BearerToken;\n import com.squareup.javapoet.ClassName;\n@@ -51,7 +53,10 @@\n     }\n \n     public JavaFile generateServiceInterface(\n-            ServiceDefinition serviceDefinition, TypeMapper typeMapper, TypeMapper returnTypeMapper) {\n+            ServiceDefinition serviceDefinition,\n+            TypeMapper typeMapper,\n+            TypeMapper returnTypeMapper,\n+            ErrorMapper errorMapper) {\n         TypeSpec.Builder serviceBuilder = TypeSpec.interfaceBuilder((options.undertowServicePrefix() ? \"Undertow\" : \"\")\n                         + serviceDefinition.getServiceName().getName())\n                 .addModifiers(Modifier.PUBLIC)\n@@ -61,7 +66,7 @@ public JavaFile generateServiceInterface(\n         serviceDefinition.getDocs().ifPresent(docs -> serviceBuilder.addJavadoc(\"$L\", Javadoc.render(docs)));\n \n         serviceBuilder.addMethods(serviceDefinition.getEndpoints().stream()\n-                .map(endpoint -> generateServiceInterfaceMethod(endpoint, typeMapper, returnTypeMapper))\n+                .map(endpoint -> generateServiceInterfaceMethod(endpoint, typeMapper, returnTypeMapper, errorMapper))\n                 .collect(Collectors.toList()));\n \n         return JavaFile.builder(\n@@ -74,14 +79,22 @@ public JavaFile generateServiceInterface(\n     }\n \n     private MethodSpec generateServiceInterfaceMethod(\n-            EndpointDefinition endpointDef, TypeMapper typeMapper, TypeMapper returnTypeMapper) {\n+            EndpointDefinition endpointDef,\n+            TypeMapper typeMapper,\n+            TypeMapper returnTypeMapper,\n+            ErrorMapper errorMapper) {\n         String methodName =\n                 JavaNameSanitizer.sanitize(endpointDef.getEndpointName().get());\n         MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(methodName)\n                 .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n                 .addParameters(createServiceMethodParameters(endpointDef, typeMapper))\n                 .addAnnotations(ConjureAnnotations.incubating(endpointDef));\n \n+        for (TypeName errorName : endpointDef.getErrors()) {\n+            ClassName errorClass = errorMapper.getServiceClassNameForError(errorName);\n+            methodBuilder.addException(errorClass);\n+        }\n+\n         endpointDef.getDeprecated().ifPresent(deprecatedDocsValue -> methodBuilder.addAnnotation(Deprecated.class));\n \n         methodBuilder.addJavadoc(\"$L\", ServiceGenerators.getJavaDocWithRequestLine(endpointDef));"
  },
  {
    "sha": "d55eeff5b9ec0d7d7d078cc9de84d67afb5767a8",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DefaultStaticFactoryMethodGenerator.java",
    "status": "modified",
    "additions": 65,
    "deletions": 2,
    "changes": 67,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DefaultStaticFactoryMethodGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DefaultStaticFactoryMethodGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DefaultStaticFactoryMethodGenerator.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -18,13 +18,16 @@\n \n import com.google.common.collect.ImmutableMap;\n import com.palantir.conjure.java.Options;\n+import com.palantir.conjure.java.api.errors.RemoteException;\n import com.palantir.conjure.java.services.Auth;\n+import com.palantir.conjure.java.types.ErrorMapper;\n import com.palantir.conjure.spec.ArgumentDefinition;\n import com.palantir.conjure.spec.AuthType;\n import com.palantir.conjure.spec.BodyParameterType;\n import com.palantir.conjure.spec.CookieAuthType;\n import com.palantir.conjure.spec.EndpointDefinition;\n import com.palantir.conjure.spec.EndpointName;\n+import com.palantir.conjure.spec.ErrorDefinition;\n import com.palantir.conjure.spec.ExternalReference;\n import com.palantir.conjure.spec.HeaderAuthType;\n import com.palantir.conjure.spec.HeaderParameterType;\n@@ -64,6 +67,7 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import javax.lang.model.element.Modifier;\n \n public final class DefaultStaticFactoryMethodGenerator implements StaticFactoryMethodGenerator {\n@@ -75,18 +79,21 @@\n     private final ParameterTypeMapper parameterTypes;\n     private final ReturnTypeMapper returnTypes;\n     private final StaticFactoryMethodType methodType;\n+    private final ErrorMapper errorMapper;\n \n     public DefaultStaticFactoryMethodGenerator(\n             Options options,\n             TypeNameResolver typeNameResolver,\n             ParameterTypeMapper parameterTypes,\n             ReturnTypeMapper returnTypes,\n+            ErrorMapper errorMapper,\n             StaticFactoryMethodType methodType) {\n         this.options = options;\n         this.typeNameResolver = typeNameResolver;\n         this.parameterTypes = parameterTypes;\n         this.returnTypes = returnTypes;\n         this.methodType = methodType;\n+        this.errorMapper = errorMapper;\n     }\n \n     @Override\n@@ -225,6 +232,7 @@ private MethodSpec clientImpl(EndpointDefinition def) {\n                 .build();\n         String codeBlock = methodType.switchBy(\n                 \"$L.clients().callBlocking($L, $L.build(), $L);\", \"$L.clients().call($L, $L.build\" + \"(), $L);\");\n+\n         CodeBlock execute = CodeBlock.of(\n                 codeBlock,\n                 StaticFactoryMethodGenerator.RUNTIME,\n@@ -239,8 +247,63 @@ private MethodSpec clientImpl(EndpointDefinition def) {\n                         .orElseGet(() -> def.getEndpointName().get() + \"Deserializer\"));\n \n         methodBuilder.addCode(request);\n-        methodBuilder.addCode(methodType.switchBy(def.getReturns().isPresent() ? \"return \" : \"\", \"return \"));\n-        methodBuilder.addCode(execute);\n+\n+        CodeBlock contents = CodeBlock.builder()\n+                .add(methodType.switchBy(def.getReturns().isPresent() ? \"return \" : \"\", \"return \"))\n+                .add(execute)\n+                .build();\n+\n+        if (def.getErrors().size() > 0) {\n+            CodeBlock.Builder tryCatchBuilder = CodeBlock.builder()\n+                    .beginControlFlow(\"try\")\n+                    .add(contents)\n+                    .nextControlFlow(\"catch ($T remoteException)\", RemoteException.class)\n+                    .addStatement(\"$T name = $N.getError().errorName()\", String.class, \"remoteException\");\n+\n+            List<ErrorDefinition> errors =\n+                    def.getErrors().stream().map(errorMapper::getError).collect(Collectors.toList());\n+\n+            errors.forEach(\n+                    error -> methodBuilder.addException(errorMapper.getRemoteClassNameForError(error.getErrorName())));\n+\n+            CodeBlock.Builder ifElseBuilder = CodeBlock.builder();\n+\n+            // first\n+            errors.stream().findFirst().ifPresent(e -> ifElseBuilder\n+                    .beginControlFlow(\n+                            \"if ($N.equals(\\\"$L:$L\\\"))\",\n+                            \"name\",\n+                            e.getNamespace().get(),\n+                            e.getErrorName().getName())\n+                    .addStatement(\n+                            \"throw new $T($N)\",\n+                            errorMapper.getRemoteClassNameForError(e.getErrorName()),\n+                            \"remoteException\"));\n+\n+            // rest\n+            errors.stream().skip(1).forEach(e -> ifElseBuilder\n+                    .nextControlFlow(\n+                            \"else if ($T.equals(\\\"$L:$L\\\"))\",\n+                            \"name\",\n+                            e.getNamespace().get(),\n+                            e.getErrorName().getName())\n+                    .addStatement(\n+                            \"throw new $T($N)\",\n+                            errorMapper.getRemoteClassNameForError(e.getErrorName()),\n+                            \"remoteException\"));\n+\n+            ifElseBuilder\n+                    .nextControlFlow(\"else\")\n+                    .addStatement(\"throw $N\", \"remoteException\")\n+                    .endControlFlow();\n+\n+            tryCatchBuilder.add(ifElseBuilder.build());\n+            tryCatchBuilder.endControlFlow();\n+\n+            methodBuilder.addCode(tryCatchBuilder.build());\n+        } else {\n+            methodBuilder.addCode(contents);\n+        }\n \n         return methodBuilder.build();\n     }"
  },
  {
    "sha": "917a08f3ba552d3cdf92649d8f592232f049d717",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueInterfaceGenerator.java",
    "status": "modified",
    "additions": 20,
    "deletions": 7,
    "changes": 27,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueInterfaceGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueInterfaceGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueInterfaceGenerator.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -23,6 +23,7 @@\n import com.palantir.conjure.java.Options;\n import com.palantir.conjure.java.services.IsUndertowAsyncMarkerVisitor;\n import com.palantir.conjure.java.services.ServiceGenerators;\n+import com.palantir.conjure.java.types.ErrorMapper;\n import com.palantir.conjure.java.util.Packages;\n import com.palantir.conjure.spec.EndpointDefinition;\n import com.palantir.conjure.spec.ServiceDefinition;\n@@ -64,19 +65,23 @@ public DialogueInterfaceGenerator(\n         this.returnTypes = returnTypes;\n     }\n \n-    public JavaFile generateBlocking(ServiceDefinition def, StaticFactoryMethodGenerator methodGenerator) {\n-        return generate(def, Names.blockingClassName(def, options), returnTypes::baseType, methodGenerator);\n+    public JavaFile generateBlocking(\n+            ServiceDefinition def, StaticFactoryMethodGenerator methodGenerator, ErrorMapper errorMapper) {\n+        return generate(\n+                def, Names.blockingClassName(def, options), returnTypes::baseType, methodGenerator, errorMapper);\n     }\n \n-    public JavaFile generateAsync(ServiceDefinition def, StaticFactoryMethodGenerator methodGenerator) {\n-        return generate(def, Names.asyncClassName(def, options), returnTypes::async, methodGenerator);\n+    public JavaFile generateAsync(\n+            ServiceDefinition def, StaticFactoryMethodGenerator methodGenerator, ErrorMapper errorMapper) {\n+        return generate(def, Names.asyncClassName(def, options), returnTypes::async, methodGenerator, errorMapper);\n     }\n \n     private JavaFile generate(\n             ServiceDefinition def,\n             ClassName className,\n             Function<Optional<Type>, TypeName> returnTypeMapper,\n-            StaticFactoryMethodGenerator methodGenerator) {\n+            StaticFactoryMethodGenerator methodGenerator,\n+            ErrorMapper errorMapper) {\n         TypeSpec.Builder serviceBuilder = TypeSpec.interfaceBuilder(className)\n                 .addModifiers(Modifier.PUBLIC)\n                 .addAnnotation(ConjureAnnotations.getConjureGeneratedAnnotation(DialogueInterfaceGenerator.class))\n@@ -100,7 +105,7 @@ private JavaFile generate(\n         def.getDocs().ifPresent(docs -> serviceBuilder.addJavadoc(\"$L\", StringUtils.appendIfMissing(docs.get(), \"\\n\")));\n \n         serviceBuilder.addMethods(def.getEndpoints().stream()\n-                .map(endpoint -> apiMethod(endpoint, returnTypeMapper))\n+                .map(endpoint -> apiMethod(endpoint, returnTypeMapper, errorMapper))\n                 .collect(toList()));\n \n         MethodSpec staticFactoryMethod = methodGenerator.generate(def);\n@@ -148,7 +153,10 @@ private JavaFile generate(\n                 .build();\n     }\n \n-    private MethodSpec apiMethod(EndpointDefinition endpointDef, Function<Optional<Type>, TypeName> returnTypeMapper) {\n+    private MethodSpec apiMethod(\n+            EndpointDefinition endpointDef,\n+            Function<Optional<Type>, TypeName> returnTypeMapper,\n+            ErrorMapper errorMapper) {\n         MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(\n                         endpointDef.getEndpointName().get())\n                 .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n@@ -166,6 +174,11 @@ private MethodSpec apiMethod(EndpointDefinition endpointDef, Function<Optional<T\n                 .forEach(referenceType -> methodBuilder.addAnnotation(\n                         ClassName.get(referenceType.getPackage(), referenceType.getName())));\n \n+        endpointDef.getErrors().forEach(errorName -> {\n+            ClassName errorClass = errorMapper.getRemoteClassNameForError(errorName);\n+            methodBuilder.addException(errorClass);\n+        });\n+\n         endpointDef.getDeprecated().ifPresent(deprecatedDocsValue -> methodBuilder.addAnnotation(Deprecated.class));\n         methodBuilder.addJavadoc(\"$L\", ServiceGenerators.getJavaDocWithRequestLine(endpointDef));\n "
  },
  {
    "sha": "2860a23e06092dde58e4d48d2b525010aa54cbf1",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueServiceGenerator.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueServiceGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueServiceGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/dialogue/DialogueServiceGenerator.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -19,6 +19,7 @@\n import com.palantir.conjure.java.Generator;\n import com.palantir.conjure.java.Options;\n import com.palantir.conjure.java.types.DefaultClassNameVisitor;\n+import com.palantir.conjure.java.types.ErrorMapper;\n import com.palantir.conjure.java.types.SpecializeBinaryClassNameVisitor;\n import com.palantir.conjure.java.types.TypeMapper;\n import com.palantir.conjure.java.util.TypeFunctions;\n@@ -63,6 +64,8 @@ public DialogueServiceGenerator(Options options) {\n         Map<TypeName, TypeDefinition> typeDefinitionsByName = conjureDefinition.getTypes().stream()\n                 .collect(Collectors.toMap(type -> type.accept(TypeDefinitionVisitor.TYPE_NAME), Function.identity()));\n \n+        ErrorMapper errorMapper = new ErrorMapper(conjureDefinition);\n+\n         DialogueInterfaceGenerator interfaceGenerator = new DialogueInterfaceGenerator(\n                 options, new ParameterTypeMapper(parameterTypes), new ReturnTypeMapper(returnTypes));\n \n@@ -74,19 +77,21 @@ public DialogueServiceGenerator(Options options) {\n                 typeNameResolver,\n                 new ParameterTypeMapper(parameterTypes),\n                 new ReturnTypeMapper(returnTypes),\n+                errorMapper,\n                 StaticFactoryMethodType.ASYNC);\n \n         StaticFactoryMethodGenerator blockingGenerator = new DefaultStaticFactoryMethodGenerator(\n                 options,\n                 typeNameResolver,\n                 new ParameterTypeMapper(parameterTypes),\n                 new ReturnTypeMapper(returnTypes),\n+                errorMapper,\n                 StaticFactoryMethodType.BLOCKING);\n \n         return conjureDefinition.getServices().stream()\n                 .flatMap(serviceDef -> Stream.of(\n                         endpoints.endpointsClass(serviceDef),\n-                        interfaceGenerator.generateBlocking(serviceDef, blockingGenerator),\n-                        interfaceGenerator.generateAsync(serviceDef, asyncGenerator)));\n+                        interfaceGenerator.generateBlocking(serviceDef, blockingGenerator, errorMapper),\n+                        interfaceGenerator.generateAsync(serviceDef, asyncGenerator, errorMapper)));\n     }\n }"
  },
  {
    "sha": "e653e60d29b55360d3e7a3e3f0c2dfbb3f7ef127",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorGenerator.java",
    "status": "modified",
    "additions": 75,
    "deletions": 9,
    "changes": 84,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorGenerator.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -21,7 +21,10 @@\n import com.palantir.conjure.java.ConjureAnnotations;\n import com.palantir.conjure.java.Generator;\n import com.palantir.conjure.java.Options;\n+import com.palantir.conjure.java.api.errors.CheckedRemoteException;\n+import com.palantir.conjure.java.api.errors.CheckedServiceException;\n import com.palantir.conjure.java.api.errors.ErrorType;\n+import com.palantir.conjure.java.api.errors.RemoteException;\n import com.palantir.conjure.java.api.errors.ServiceException;\n import com.palantir.conjure.java.util.Javadoc;\n import com.palantir.conjure.java.util.Packages;\n@@ -31,22 +34,28 @@\n import com.palantir.conjure.spec.ErrorNamespace;\n import com.palantir.conjure.spec.FieldDefinition;\n import com.palantir.conjure.spec.TypeDefinition;\n+import com.palantir.logsafe.Arg;\n import com.palantir.logsafe.SafeArg;\n import com.palantir.logsafe.UnsafeArg;\n+import com.squareup.javapoet.ArrayTypeName;\n import com.squareup.javapoet.ClassName;\n import com.squareup.javapoet.CodeBlock;\n import com.squareup.javapoet.FieldSpec;\n import com.squareup.javapoet.JavaFile;\n import com.squareup.javapoet.MethodSpec;\n+import com.squareup.javapoet.ParameterSpec;\n+import com.squareup.javapoet.ParameterizedTypeName;\n import com.squareup.javapoet.TypeName;\n import com.squareup.javapoet.TypeSpec;\n+import com.squareup.javapoet.WildcardTypeName;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import javax.annotation.Nullable;\n import javax.lang.model.element.Modifier;\n import org.apache.commons.lang3.StringUtils;\n \n@@ -62,13 +71,15 @@ public ErrorGenerator(Options options) {\n     public Stream<JavaFile> generate(ConjureDefinition definition) {\n         List<TypeDefinition> types = definition.getTypes();\n         TypeMapper typeMapper = new TypeMapper(TypeFunctions.toTypesMap(types), options);\n+        ErrorMapper errorMapper = new ErrorMapper(definition);\n         return splitErrorDefsByNamespace(definition.getErrors()).entrySet().stream()\n                 .flatMap(entry -> entry.getValue().entrySet().stream()\n                         .map(innerEntry -> generateErrorTypesForNamespace(\n                                 typeMapper,\n                                 Packages.getPrefixedPackage(entry.getKey(), options.packagePrefix()),\n                                 innerEntry.getKey(),\n-                                innerEntry.getValue())));\n+                                innerEntry.getValue(),\n+                                errorMapper)));\n     }\n \n     private static Map<String, Map<ErrorNamespace, List<ErrorDefinition>>> splitErrorDefsByNamespace(\n@@ -91,7 +102,8 @@ private static JavaFile generateErrorTypesForNamespace(\n             TypeMapper typeMapper,\n             String conjurePackage,\n             ErrorNamespace namespace,\n-            List<ErrorDefinition> errorTypeDefinitions) {\n+            List<ErrorDefinition> errorTypeDefinitions,\n+            ErrorMapper errorMapper) {\n         ClassName className = errorTypesClassName(conjurePackage, namespace);\n \n         // Generate ErrorType definitions\n@@ -116,14 +128,60 @@ private static JavaFile generateErrorTypesForNamespace(\n                 })\n                 .collect(Collectors.toList());\n \n+        Map<ErrorDefinition, TypeSpec> checkedServiceExceptions = errorTypeDefinitions.stream()\n+                .filter(errorMapper::isChecked)\n+                .collect(Collectors.toMap(Function.identity(), entry -> TypeSpec.classBuilder(\n+                                errorMapper.getNameForServiceException(entry))\n+                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)\n+                        .superclass(CheckedServiceException.class)\n+                        .addMethod(MethodSpec.constructorBuilder()\n+                                .addModifiers(Modifier.PRIVATE)\n+                                .addParameter(ClassName.get(ErrorType.class), \"errorType\")\n+                                .addParameter(\n+                                        ArrayTypeName.of(ParameterizedTypeName.get(\n+                                                ClassName.get(Arg.class), WildcardTypeName.subtypeOf(Object.class))),\n+                                        \"parameters\")\n+                                .varargs()\n+                                .addStatement(\"super($N, $N)\", \"errorType\", \"parameters\")\n+                                .build())\n+                        .addMethod(MethodSpec.constructorBuilder()\n+                                .addModifiers(Modifier.PRIVATE)\n+                                .addParameter(ClassName.get(ErrorType.class), \"errorType\")\n+                                .addParameter(ParameterSpec.builder(ClassName.get(Throwable.class), \"cause\")\n+                                        .addAnnotation(Nullable.class)\n+                                        .build())\n+                                .addParameter(\n+                                        ArrayTypeName.of(ParameterizedTypeName.get(\n+                                                ClassName.get(Arg.class), WildcardTypeName.subtypeOf(Object.class))),\n+                                        \"parameters\")\n+                                .varargs()\n+                                .addStatement(\"super($N, $N, $N)\", \"errorType\", \"cause\", \"parameters\")\n+                                .build())\n+                        .build()));\n+\n+        List<TypeSpec> checkedRemoteExceptions = errorTypeDefinitions.stream()\n+                .filter(errorMapper::isChecked)\n+                .map(entry -> TypeSpec.classBuilder(errorMapper.getNameForRemoteException(entry))\n+                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)\n+                        .superclass(CheckedRemoteException.class)\n+                        .addMethod(MethodSpec.constructorBuilder()\n+                                .addParameter(ClassName.get(RemoteException.class), \"remote\")\n+                                .addStatement(\"super($N.getError(), $N.getStatus())\", \"remote\", \"remote\")\n+                                .build())\n+                        .build())\n+                .collect(Collectors.toList());\n+\n         // Generate ServiceException factory methods\n         List<MethodSpec> methodSpecs = errorTypeDefinitions.stream()\n-                .map(entry -> {\n-                    MethodSpec withoutCause = generateExceptionFactory(typeMapper, entry, false);\n-                    MethodSpec withCause = generateExceptionFactory(typeMapper, entry, true);\n+                .flatMap(entry -> {\n+                    boolean isChecked = errorMapper.isChecked(entry);\n+                    ClassName exceptionClass = isChecked\n+                            ? className.nestedClass(checkedServiceExceptions.get(entry).name)\n+                            : ClassName.get(ServiceException.class);\n+                    MethodSpec withoutCause = generateExceptionFactory(typeMapper, entry, false, exceptionClass);\n+                    MethodSpec withCause = generateExceptionFactory(typeMapper, entry, true, exceptionClass);\n                     return Stream.of(withoutCause, withCause);\n                 })\n-                .flatMap(Function.identity())\n                 .collect(Collectors.toList());\n \n         // Generate ServiceException factory check methods\n@@ -144,6 +202,12 @@ private static JavaFile generateErrorTypesForNamespace(\n                             entry.getErrorName().getName(),\n                             shouldThrowVar);\n                     methodBuilder.addJavadoc(\"@param $L $L\\n\", shouldThrowVar, \"Cause the method to throw when true\");\n+\n+                    if (errorMapper.isChecked(entry)) {\n+                        ClassName exception = className.nestedClass(checkedServiceExceptions.get(entry).name);\n+                        methodBuilder.addException(exception);\n+                    }\n+\n                     Streams.concat(entry.getSafeArgs().stream(), entry.getUnsafeArgs().stream())\n                             .forEach(arg -> {\n                                 methodBuilder.addParameter(\n@@ -176,6 +240,8 @@ private static JavaFile generateErrorTypesForNamespace(\n                 .addMethod(privateConstructor())\n                 .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n                 .addFields(fieldSpecs)\n+                .addTypes(checkedServiceExceptions.values())\n+                .addTypes(checkedRemoteExceptions)\n                 .addMethods(methodSpecs)\n                 .addMethods(checkMethodSpecs)\n                 .addAnnotation(ConjureAnnotations.getConjureGeneratedAnnotation(ErrorGenerator.class));\n@@ -187,17 +253,17 @@ private static JavaFile generateErrorTypesForNamespace(\n     }\n \n     private static MethodSpec generateExceptionFactory(\n-            TypeMapper typeMapper, ErrorDefinition entry, boolean withCause) {\n+            TypeMapper typeMapper, ErrorDefinition entry, boolean withCause, ClassName exceptionClass) {\n         String methodName = CaseFormat.UPPER_CAMEL.to(\n                 CaseFormat.LOWER_CAMEL, entry.getErrorName().getName());\n         String typeName = CaseFormat.UPPER_CAMEL.to(\n                 CaseFormat.UPPER_UNDERSCORE, entry.getErrorName().getName());\n \n         MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(methodName)\n                 .addModifiers(Modifier.PUBLIC, Modifier.STATIC)\n-                .returns(ClassName.get(ServiceException.class));\n+                .returns(exceptionClass);\n \n-        methodBuilder.addCode(\"return new $T($L\", ServiceException.class, typeName);\n+        methodBuilder.addCode(\"return new $T($L\", exceptionClass, typeName);\n \n         if (withCause) {\n             methodBuilder.addParameter(Throwable.class, \"cause\");"
  },
  {
    "sha": "d5ac44a5ae8f289a34cb7d7b422d89047e4fd6b3",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorMapper.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorMapper.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorMapper.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/types/ErrorMapper.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.conjure.java.types;\n+\n+import com.google.common.base.Preconditions;\n+import com.palantir.conjure.spec.ConjureDefinition;\n+import com.palantir.conjure.spec.ErrorDefinition;\n+import com.palantir.conjure.spec.TypeName;\n+import com.squareup.javapoet.ClassName;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class ErrorMapper {\n+\n+    private final Map<TypeName, ErrorDefinition> errors;\n+    private final Set<TypeName> checkedExceptions;\n+\n+    public ErrorMapper(ConjureDefinition conjureDefinition) {\n+        this.errors = conjureDefinition.getErrors().stream()\n+                .collect(Collectors.toMap(ErrorDefinition::getErrorName, Function.identity()));\n+        this.checkedExceptions = conjureDefinition.getServices().stream()\n+                .flatMap(stream -> stream.getEndpoints().stream())\n+                .flatMap(endpoint -> endpoint.getErrors().stream())\n+                .collect(Collectors.toSet());\n+    }\n+\n+    public final boolean isChecked(ErrorDefinition errorDefinition) {\n+        return checkedExceptions.contains(errorDefinition.getErrorName());\n+    }\n+\n+    public final ErrorDefinition getError(TypeName typeName) {\n+        return Preconditions.checkNotNull(errors.get(typeName), \"No error found with name %s\", typeName.getName());\n+    }\n+\n+    public final ClassName getServiceClassNameForError(TypeName typeName) {\n+        ErrorDefinition error = getError(typeName);\n+        return ClassName.get(\n+                typeName.getPackage(), error.getNamespace().get() + \"Errors\", typeName.getName() + \"ServiceException\");\n+    }\n+\n+    public final ClassName getRemoteClassNameForError(TypeName typeName) {\n+        ErrorDefinition error = getError(typeName);\n+        return ClassName.get(\n+                typeName.getPackage(), error.getNamespace().get() + \"Errors\", typeName.getName() + \"RemoteException\");\n+    }\n+\n+    public final String getNameForServiceException(ErrorDefinition error) {\n+        return String.format(\"%sServiceException\", error.getErrorName().getName());\n+    }\n+\n+    public final String getNameForRemoteException(ErrorDefinition error) {\n+        return String.format(\"%sRemoteException\", error.getErrorName().getName());\n+    }\n+}"
  },
  {
    "sha": "c5da7887473716c8f748bc0d0dd339b1f3fb5eba",
    "filename": "conjure-java-core/src/test/java/com/palantir/conjure/java/EteResource.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/java/com/palantir/conjure/java/EteResource.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/java/com/palantir/conjure/java/EteResource.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/test/java/com/palantir/conjure/java/EteResource.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -193,5 +193,10 @@ public void receiveListOfOptionals(AuthHeader _authHeader, List<Optional<String>\n     @Override\n     public void receiveSetOfOptionals(AuthHeader _authHeader, Set<Optional<String>> _value) {}\n \n+    @Override\n+    public void throwsCheckedException(@NotNull AuthHeader _authHeader) {\n+        // nop\n+    }\n+\n     interface Streaming extends StreamingOutput, BinaryResponseBody {}\n }"
  },
  {
    "sha": "acb541f28e14d877ab37db6137ec29cfe6557df5",
    "filename": "conjure-java-core/src/test/java/com/palantir/conjure/java/UndertowServiceEteTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/java/com/palantir/conjure/java/UndertowServiceEteTest.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/java/com/palantir/conjure/java/UndertowServiceEteTest.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/test/java/com/palantir/conjure/java/UndertowServiceEteTest.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -38,6 +38,7 @@\n import com.palantir.conjure.java.okhttp.HostMetricsRegistry;\n import com.palantir.conjure.java.serialization.ObjectMappers;\n import com.palantir.conjure.java.services.UndertowServiceGenerator;\n+import com.palantir.conjure.java.types.ErrorGenerator;\n import com.palantir.conjure.java.types.ObjectGenerator;\n import com.palantir.conjure.java.undertow.runtime.ConjureHandler;\n import com.palantir.conjure.spec.ConjureDefinition;\n@@ -521,7 +522,10 @@ public static void beforeClass() throws IOException {\n                 .build();\n         List<Path> files = new GenerationCoordinator(\n                         MoreExecutors.directExecutor(),\n-                        ImmutableSet.of(new UndertowServiceGenerator(options), new ObjectGenerator(options)))\n+                        ImmutableSet.of(\n+                                new UndertowServiceGenerator(options),\n+                                new ObjectGenerator(options),\n+                                new ErrorGenerator(options)))\n                 .emit(def, folder);\n         validateGeneratorOutput(files, Paths.get(\"src/integrationInput/java/com/palantir/product\"));\n     }"
  },
  {
    "sha": "b2f318557bf7ab5afa5d7ae7f9fe5cc79e2affdc",
    "filename": "conjure-java-core/src/test/resources/ete-service.yml",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/resources/ete-service.yml",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/resources/ete-service.yml",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/test/resources/ete-service.yml?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -20,6 +20,11 @@ types:\n           - VALUE\n       LongAlias:\n         alias: Long\n+    errors:\n+      ExampleError:\n+        namespace: Example\n+        code: INVALID_ARGUMENT\n+        docs: This should be a checked exception.\n \n services:\n   EmptyPathService:\n@@ -235,4 +240,9 @@ services:\n       receiveSetOfOptionals:\n         http: PUT /set/optionals\n         args:\n-          value: set<optional<string>>\n\\ No newline at end of file\n+          value: set<optional<string>>\n+\n+      throwsCheckedException:\n+        http: PUT /errors\n+        errors:\n+          - ExampleError\n\\ No newline at end of file"
  },
  {
    "sha": "7bff6d22b8b7778516d4137138aebf05cc7d2c0a",
    "filename": "conjure-java-core/src/test/resources/example-errors.yml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/resources/example-errors.yml",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-core/src/test/resources/example-errors.yml",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/test/resources/example-errors.yml?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -31,3 +31,17 @@ types:\n         namespace: Conjure\n         docs: Different package.\n         code: INTERNAL\n+      ShouldBeChecked:\n+        namespace: Conjure\n+        code: INVALID_ARGUMENT\n+        docs: This should be a checked exception.\n+services:\n+  StubService:\n+    name: A stub service.\n+    package: com.palantir.product\n+    default-auth: header\n+    endpoints:\n+      stubEndpoint:\n+        http: GET /stub\n+        errors:\n+          - ShouldBeChecked\n\\ No newline at end of file"
  },
  {
    "sha": "7e936abc3058ff50f2f4f6b9f65bc6d77ffe0290",
    "filename": "conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptions.java",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptions.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptions.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptions.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -16,11 +16,13 @@\n \n package com.palantir.conjure.java.undertow.runtime;\n \n+import com.palantir.conjure.java.api.errors.CheckedServiceException;\n import com.palantir.conjure.java.api.errors.ErrorType;\n import com.palantir.conjure.java.api.errors.QosException;\n import com.palantir.conjure.java.api.errors.RemoteException;\n import com.palantir.conjure.java.api.errors.SerializableError;\n import com.palantir.conjure.java.api.errors.ServiceException;\n+import com.palantir.conjure.java.api.errors.TypedException;\n import com.palantir.conjure.java.undertow.lib.ExceptionHandler;\n import com.palantir.conjure.java.undertow.lib.Serializer;\n import com.palantir.conjure.java.undertow.lib.TypeMarker;\n@@ -56,6 +58,8 @@ public void handle(HttpServerExchange exchange, Throwable throwable) {\n         setFailure(exchange, throwable);\n         if (throwable instanceof ServiceException) {\n             serviceException(exchange, (ServiceException) throwable);\n+        } else if (throwable instanceof CheckedServiceException) {\n+            checkedServiceException(exchange, (CheckedServiceException) throwable);\n         } else if (throwable instanceof QosException) {\n             qosException(exchange, (QosException) throwable);\n         } else if (throwable instanceof RemoteException) {\n@@ -84,6 +88,14 @@ private static void serviceException(HttpServerExchange exchange, ServiceExcepti\n                 exception.getErrorType().httpErrorCode());\n     }\n \n+    private static void checkedServiceException(HttpServerExchange exchange, CheckedServiceException exception) {\n+        log(exception);\n+        writeResponse(\n+                exchange,\n+                Optional.of(SerializableError.forCheckedException(exception)),\n+                exception.getErrorType().httpErrorCode());\n+    }\n+\n     private static void qosException(HttpServerExchange exchange, QosException exception) {\n         exception.accept(QOS_EXCEPTION_HEADERS).accept(exchange);\n         log.debug(\"Possible quality-of-service intervention\", exception);\n@@ -201,7 +213,7 @@ private static boolean isResponseStarted(HttpServerExchange exchange) {\n         return false;\n     }\n \n-    private static void log(ServiceException serviceException, Throwable exceptionForLogging) {\n+    private static void log(TypedException serviceException, Throwable exceptionForLogging) {\n         if (serviceException.getErrorType().httpErrorCode() / 100 == 4 /* client error */) {\n             log.info(\n                     \"Error handling request\",\n@@ -221,6 +233,10 @@ private static void log(ServiceException exception) {\n         log(exception, exception);\n     }\n \n+    private static void log(CheckedServiceException exception) {\n+        log(exception, exception);\n+    }\n+\n     private static void setFailure(HttpServerExchange exchange, Throwable failure) {\n         // Optimistically set the value, and revert in the unlikely case it has already been set.\n         Throwable previous = exchange.putAttachment(Attachments.FAILURE, failure);"
  },
  {
    "sha": "289c5ac5d3b0e2cd283b18b4be4584d228166faa",
    "filename": "conjure-java-undertow-runtime/src/test/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptionHandlerTest.java",
    "status": "modified",
    "additions": 65,
    "deletions": 6,
    "changes": 71,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-undertow-runtime/src/test/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptionHandlerTest.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/conjure-java-undertow-runtime/src/test/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptionHandlerTest.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-undertow-runtime/src/test/java/com/palantir/conjure/java/undertow/runtime/ConjureExceptionHandlerTest.java?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -20,16 +20,20 @@\n import static org.assertj.core.api.Assertions.assertThatCode;\n \n import com.google.common.collect.ImmutableList;\n+import com.palantir.conjure.java.api.errors.CheckedRemoteException;\n+import com.palantir.conjure.java.api.errors.CheckedServiceException;\n import com.palantir.conjure.java.api.errors.ErrorType;\n import com.palantir.conjure.java.api.errors.QosException;\n import com.palantir.conjure.java.api.errors.RemoteException;\n import com.palantir.conjure.java.api.errors.SerializableError;\n import com.palantir.conjure.java.api.errors.ServiceException;\n import com.palantir.conjure.java.undertow.HttpServerExchanges;\n import com.palantir.conjure.java.undertow.lib.TypeMarker;\n+import com.palantir.logsafe.Arg;\n import com.palantir.logsafe.SafeArg;\n import io.undertow.Undertow;\n import io.undertow.server.HttpHandler;\n+import io.undertow.server.HttpServerExchange;\n import io.undertow.server.handlers.BlockingHandler;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -48,18 +52,39 @@\n             .followRedirects(false) // we want to explicitly test the 'Location' header\n             .build();\n \n-    private RuntimeException exception;\n+    private RuntimeException exception = null;\n+    private Exception checkedException;\n     private Undertow server;\n \n+    private static class TestCheckedServiceException extends CheckedServiceException {\n+        protected TestCheckedServiceException(ErrorType errorType, Arg<?>... parameters) {\n+            super(errorType, parameters);\n+        }\n+    }\n+\n+    private static class TestCheckedRemoteException extends CheckedRemoteException {\n+        protected TestCheckedRemoteException(SerializableError error, int status) {\n+            super(error, status);\n+        }\n+    }\n+\n+    private class Delegate implements HttpHandler {\n+        @Override\n+        public void handleRequest(HttpServerExchange exchange) throws Exception {\n+            if (exception != null) {\n+                throw exception;\n+            } else {\n+                throw checkedException;\n+            }\n+        }\n+    }\n+\n     @BeforeEach\n     public void before() {\n         server = Undertow.builder()\n                 .addHttpListener(12345, \"localhost\")\n-                .setHandler(new BlockingHandler(new ConjureExceptionHandler(\n-                        _exchange -> {\n-                            throw exception;\n-                        },\n-                        ConjureExceptions.INSTANCE)))\n+                .setHandler(\n+                        new BlockingHandler(new ConjureExceptionHandler(new Delegate(), ConjureExceptions.INSTANCE)))\n                 .build();\n         server.start();\n     }\n@@ -79,6 +104,17 @@ public void handlesServiceException() throws IOException {\n         assertThat(response.code()).isEqualTo(ErrorType.CONFLICT.httpErrorCode());\n     }\n \n+    @Test\n+    public void handlesCheckedServiceException() throws IOException {\n+        exception = null;\n+        checkedException = new TestCheckedServiceException(ErrorType.INVALID_ARGUMENT, SafeArg.of(\"bar\", \"baz\"));\n+        Response response = execute();\n+        assertThat(response.body().string())\n+                .contains(\"{\\\"errorCode\\\":\\\"INVALID_ARGUMENT\\\"\")\n+                .contains(\"\\\"parameters\\\":{\\\"bar\\\":\\\"baz\\\"}}\");\n+        assertThat(response.code()).isEqualTo(ErrorType.INVALID_ARGUMENT.httpErrorCode());\n+    }\n+\n     @Test\n     public void handlesRemoteException() throws IOException {\n         SerializableError remoteError =\n@@ -101,6 +137,29 @@ public void handlesRemoteException() throws IOException {\n         assertThat(response.code()).isEqualTo(ErrorType.INTERNAL.httpErrorCode());\n     }\n \n+    @Test\n+    public void handlesCheckedRemoteException() throws IOException {\n+        SerializableError remoteError = SerializableError.forException(\n+                new ServiceException(ErrorType.INVALID_ARGUMENT, SafeArg.of(\"bar\", \"baz\")));\n+        exception = null;\n+        checkedException = new TestCheckedRemoteException(remoteError, ErrorType.INVALID_ARGUMENT.httpErrorCode());\n+        Response response = execute();\n+\n+        // Propagates errorInstanceId and changes error code and name to INTERNAL\n+        // Does not propagate args\n+        SerializableError expectedPropagatedError = SerializableError.builder()\n+                .errorCode(ErrorType.INTERNAL.code().toString())\n+                .errorName(ErrorType.INTERNAL.name())\n+                .errorInstanceId(remoteError.errorInstanceId())\n+                .build();\n+        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+        Encodings.json().serializer(new TypeMarker<SerializableError>() {}).serialize(expectedPropagatedError, stream);\n+\n+        assertThat(response.body().string()).isEqualTo(stream.toString());\n+        // remote exceptions should result in 500 status\n+        assertThat(response.code()).isEqualTo(ErrorType.INTERNAL.httpErrorCode());\n+    }\n+\n     @Test\n     public void handles401RemoteException() throws IOException {\n         SerializableError remoteError ="
  },
  {
    "sha": "cf4414a82ba51815d0a173b356f49c9be5239ee0",
    "filename": "versions.lock",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/versions.lock",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/versions.lock",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/versions.lock?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -3,30 +3,30 @@ com.atlassian.commonmark:commonmark:0.12.1 (1 constraints: 36052a3b)\n com.fasterxml.jackson:jackson-bom:2.12.1 (14 constraints: 18375425)\n com.fasterxml.jackson.core:jackson-annotations:2.12.1 (12 constraints: 75d0c342)\n com.fasterxml.jackson.core:jackson-core:2.12.1 (16 constraints: f94aad4f)\n-com.fasterxml.jackson.core:jackson-databind:2.12.1 (28 constraints: 340f54d6)\n+com.fasterxml.jackson.core:jackson-databind:2.12.1 (28 constraints: 360f23db)\n com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.1 (3 constraints: 91421c9e)\n com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.12.1 (2 constraints: 312ba986)\n-com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.1 (4 constraints: e7338c8f)\n+com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.1 (4 constraints: e833bf8f)\n com.fasterxml.jackson.datatype:jackson-datatype-guava:2.12.1 (3 constraints: df3949fb)\n-com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.1 (7 constraints: a86d933e)\n+com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.1 (7 constraints: a96d6a3f)\n com.fasterxml.jackson.datatype:jackson-datatype-joda:2.12.1 (3 constraints: df3949fb)\n com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.1 (3 constraints: df3949fb)\n com.fasterxml.jackson.module:jackson-module-afterburner:2.12.1 (5 constraints: ea5f9e03)\n com.fasterxml.jackson.module:jackson-module-parameter-names:2.12.1 (3 constraints: 6b3099a1)\n com.github.ben-manes.caffeine:caffeine:2.9.0 (9 constraints: de9b3d0f)\n com.google.code.findbugs:jsr305:3.0.2 (20 constraints: a03e988f)\n-com.google.errorprone:error_prone_annotations:2.5.1 (17 constraints: 581162cf)\n+com.google.errorprone:error_prone_annotations:2.5.1 (17 constraints: 5a116ed4)\n com.google.errorprone:javac-shaded:9+181-r4173-1 (1 constraints: b1140fc6)\n com.google.guava:failureaccess:1.0.1 (1 constraints: 140ae1b4)\n-com.google.guava:guava:30.1-jre (31 constraints: 212d31eb)\n+com.google.guava:guava:30.1-jre (31 constraints: 232df6f5)\n com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava (1 constraints: bd17c918)\n com.google.j2objc:j2objc-annotations:1.3 (1 constraints: b809eda0)\n com.palantir.common:streams:1.9.1 (1 constraints: 0d050c36)\n-com.palantir.conjure:conjure-api-objects:4.14.0 (2 constraints: 59229fe3)\n-com.palantir.conjure:conjure-generator-common:4.14.0 (2 constraints: fd139f82)\n-com.palantir.conjure.java.api:errors:2.16.2 (5 constraints: 56541555)\n-com.palantir.conjure.java.api:service-config:2.16.2 (4 constraints: 3c48d14e)\n-com.palantir.conjure.java.api:ssl-config:2.16.2 (2 constraints: a8252139)\n+com.palantir.conjure:conjure-api-objects:4.15.0-15-g6054f67 (2 constraints: ed27e30e)\n+com.palantir.conjure:conjure-generator-common:4.15.0-15-g6054f67 (2 constraints: 91199d6d)\n+com.palantir.conjure.java.api:errors:2.16.2-25-g76157f0 (5 constraints: e659bf39)\n+com.palantir.conjure.java.api:service-config:2.16.2-25-g76157f0 (4 constraints: 3c48d14e)\n+com.palantir.conjure.java.api:ssl-config:2.16.2-25-g76157f0 (2 constraints: 702824bf)\n com.palantir.conjure.java.runtime:client-config:6.15.0 (6 constraints: d27b5a1f)\n com.palantir.conjure.java.runtime:conjure-java-jackson-serialization:6.15.0 (6 constraints: 07761400)\n com.palantir.conjure.java.runtime:keystores:6.15.0 (5 constraints: 0c5d84b7)\n@@ -101,8 +101,8 @@ com.netflix.feign:feign-jackson:8.18.0 (1 constraints: c718909e)\n com.netflix.feign:feign-jaxrs:8.18.0 (1 constraints: c718909e)\n com.netflix.feign:feign-okhttp:8.18.0 (1 constraints: c718909e)\n com.netflix.feign:feign-slf4j:8.18.0 (1 constraints: c718909e)\n-com.palantir.conjure:conjure-core:4.14.0 (1 constraints: 3b05473b)\n-com.palantir.conjure.java.api:test-utils:2.16.2 (1 constraints: 3d05433b)\n+com.palantir.conjure:conjure-core:4.15.0-15-g6054f67 (1 constraints: 0508788b)\n+com.palantir.conjure.java.api:test-utils:2.16.2-25-g76157f0 (1 constraints: 05086f8b)\n com.palantir.conjure.java.runtime:conjure-java-jaxrs-client:6.15.0 (1 constraints: 3e05563b)\n com.palantir.conjure.java.runtime:conjure-java-jersey-server:6.15.0 (1 constraints: 3e05563b)\n com.palantir.conjure.java.runtime:conjure-java-retrofit2-client:6.15.0 (1 constraints: 3e05563b)"
  },
  {
    "sha": "aabb507f48eca95d2c8298ac4c78de1d298785ea",
    "filename": "versions.props",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/palantir/conjure-java/blob/da7660c77f96a900fc003d5e2ea63e10d5df0925/versions.props",
    "raw_url": "https://github.com/palantir/conjure-java/raw/da7660c77f96a900fc003d5e2ea63e10d5df0925/versions.props",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/versions.props?ref=da7660c77f96a900fc003d5e2ea63e10d5df0925",
    "patch": "@@ -4,10 +4,10 @@ com.google.code.findbugs:jsr305 = 3.0.2\n com.google.errorprone:error_prone_annotations = 2.5.1\n com.google.guava:guava = 30.1-jre\n com.palantir.common:streams = 1.9.1\n-com.palantir.conjure.java.api:* = 2.16.2\n+com.palantir.conjure.java.api:* = 2.16.2-25-g76157f0\n com.palantir.conjure.java.runtime:* = 6.15.0\n com.palantir.conjure.verification:* = 0.18.5\n-com.palantir.conjure:* = 4.14.0\n+com.palantir.conjure:* = 4.15.0-15-g6054f67\n com.palantir.dialogue:* = 1.104.2\n com.palantir.ri:resource-identifier = 1.1.0\n com.palantir.safe-logging:* = 1.14.0"
  }
]
