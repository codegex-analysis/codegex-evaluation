[
  {
    "sha": "1369001020e33df5d69cc77c1abe61f8cab81159",
    "filename": "changelog/@unreleased/pr-1273.v2.yml",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/changelog/@unreleased/pr-1273.v2.yml",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/changelog/@unreleased/pr-1273.v2.yml",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/changelog/@unreleased/pr-1273.v2.yml?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -0,0 +1,8 @@\n+type: feature\n+feature:\n+  description: conjure-undertow supports an additional `ServerRequestContext` parameter\n+    providing access to arbitrary request headers and query parameters. This feature is\n+    enabled on an opt-in basis by adding the `server-request-context` tag to an endpoint.\n+    Note that this is still considered an experimental feature.\n+  links:\n+  - https://github.com/palantir/conjure-java/pull/1273"
  },
  {
    "sha": "9ad4610fb8a8bc3823acf6aede575429428afedb",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/NameCollisionServiceEndpoints.java",
    "status": "modified",
    "additions": 106,
    "deletions": 1,
    "changes": 107,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/integrationInput/java/com/palantir/product/NameCollisionServiceEndpoints.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/integrationInput/java/com/palantir/product/NameCollisionServiceEndpoints.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/NameCollisionServiceEndpoints.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -1,6 +1,7 @@\n package com.palantir.product;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n import com.palantir.conjure.java.undertow.lib.Deserializer;\n import com.palantir.conjure.java.undertow.lib.Endpoint;\n import com.palantir.conjure.java.undertow.lib.Serializer;\n@@ -14,10 +15,12 @@\n import io.undertow.util.HttpString;\n import io.undertow.util.Methods;\n import io.undertow.util.PathTemplateMatch;\n+import io.undertow.util.StatusCodes;\n import java.io.IOException;\n import java.util.Deque;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import javax.annotation.Generated;\n \n @Generated(\"com.palantir.conjure.java.services.UndertowServiceHandlerGenerator\")\n@@ -34,7 +37,10 @@ public static UndertowService of(UndertowNameCollisionService delegate) {\n \n     @Override\n     public List<Endpoint> endpoints(UndertowRuntime runtime) {\n-        return ImmutableList.of(new IntEndpoint(runtime, delegate));\n+        return ImmutableList.of(\n+                new IntEndpoint(runtime, delegate),\n+                new NoContextEndpoint(runtime, delegate),\n+                new ContextEndpoint(runtime, delegate));\n     }\n \n     private static final class IntEndpoint implements HttpHandler, Endpoint {\n@@ -104,4 +110,103 @@ public HttpHandler handler() {\n             return this;\n         }\n     }\n+\n+    private static final class NoContextEndpoint implements HttpHandler, Endpoint {\n+        private final UndertowRuntime runtime;\n+\n+        private final UndertowNameCollisionService delegate;\n+\n+        private final Deserializer<String> deserializer;\n+\n+        NoContextEndpoint(UndertowRuntime runtime, UndertowNameCollisionService delegate) {\n+            this.runtime = runtime;\n+            this.delegate = delegate;\n+            this.deserializer = runtime.bodySerDe().deserializer(new TypeMarker<String>() {});\n+        }\n+\n+        @Override\n+        public void handleRequest(HttpServerExchange exchange) throws IOException {\n+            String requestContext = deserializer.deserialize(exchange);\n+            delegate.noContext(requestContext);\n+            exchange.setStatusCode(StatusCodes.NO_CONTENT);\n+        }\n+\n+        @Override\n+        public HttpString method() {\n+            return Methods.POST;\n+        }\n+\n+        @Override\n+        public String template() {\n+            return \"/no/context\";\n+        }\n+\n+        @Override\n+        public String serviceName() {\n+            return \"NameCollisionService\";\n+        }\n+\n+        @Override\n+        public String name() {\n+            return \"noContext\";\n+        }\n+\n+        @Override\n+        public HttpHandler handler() {\n+            return this;\n+        }\n+    }\n+\n+    private static final class ContextEndpoint implements HttpHandler, Endpoint {\n+        private static final ImmutableSet<String> TAGS = ImmutableSet.of(\"server-request-context\");\n+\n+        private final UndertowRuntime runtime;\n+\n+        private final UndertowNameCollisionService delegate;\n+\n+        private final Deserializer<String> deserializer;\n+\n+        ContextEndpoint(UndertowRuntime runtime, UndertowNameCollisionService delegate) {\n+            this.runtime = runtime;\n+            this.delegate = delegate;\n+            this.deserializer = runtime.bodySerDe().deserializer(new TypeMarker<String>() {});\n+        }\n+\n+        @Override\n+        public Set<String> tags() {\n+            return TAGS;\n+        }\n+\n+        @Override\n+        public void handleRequest(HttpServerExchange exchange) throws IOException {\n+            String requestContext_ = deserializer.deserialize(exchange);\n+            delegate.context(requestContext_, runtime.contexts().createContext(exchange, this));\n+            exchange.setStatusCode(StatusCodes.NO_CONTENT);\n+        }\n+\n+        @Override\n+        public HttpString method() {\n+            return Methods.POST;\n+        }\n+\n+        @Override\n+        public String template() {\n+            return \"/context\";\n+        }\n+\n+        @Override\n+        public String serviceName() {\n+            return \"NameCollisionService\";\n+        }\n+\n+        @Override\n+        public String name() {\n+            return \"context\";\n+        }\n+\n+        @Override\n+        public HttpHandler handler() {\n+            return this;\n+        }\n+    }\n }"
  },
  {
    "sha": "61a588bc75baf20a209f6a6618ac3154a50aec39",
    "filename": "conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowNameCollisionService.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowNameCollisionService.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowNameCollisionService.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/integrationInput/java/com/palantir/product/UndertowNameCollisionService.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -1,5 +1,6 @@\n package com.palantir.product;\n \n+import com.palantir.conjure.java.undertow.lib.RequestContext;\n import com.palantir.tokens.auth.AuthHeader;\n import javax.annotation.Generated;\n \n@@ -17,4 +18,14 @@ String int_(\n             String delegate,\n             String result,\n             String deserializer);\n+\n+    /**\n+     * @apiNote {@code POST /no/context}\n+     */\n+    void noContext(String requestContext);\n+\n+    /**\n+     * @apiNote {@code POST /context}\n+     */\n+    void context(String requestContext_, RequestContext requestContext);\n }"
  },
  {
    "sha": "4c49444689ec837ae8954d1d634bc48b4d82ef8c",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java",
    "status": "modified",
    "additions": 13,
    "deletions": 7,
    "changes": 20,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceHandlerGenerator.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -38,6 +38,7 @@\n import com.palantir.conjure.java.util.JavaNameSanitizer;\n import com.palantir.conjure.java.util.Packages;\n import com.palantir.conjure.java.util.ParameterOrder;\n+import com.palantir.conjure.java.util.Tags;\n import com.palantir.conjure.java.util.TypeFunctions;\n import com.palantir.conjure.java.visitor.DefaultTypeVisitor;\n import com.palantir.conjure.java.visitor.MoreVisitors;\n@@ -434,12 +435,16 @@ private CodeBlock endpointInvocation(\n         // query parameters\n         addQueryParamsCode(code, endpointDefinition, typeDefinitions, typeMapper);\n \n-        List<String> methodArgs = new ArrayList<>();\n-        authVarName.ifPresent(methodArgs::add);\n-        methodArgs.addAll(ParameterOrder.sorted(endpointDefinition.getArgs()).stream()\n+        List<CodeBlock> methodArgs = new ArrayList<>();\n+        authVarName.ifPresent(name -> methodArgs.add(CodeBlock.of(\"$N\", name)));\n+        ParameterOrder.sorted(endpointDefinition.getArgs()).stream()\n                 .map(arg -> arg.getArgName().get())\n                 .map(arg -> sanitizeVarName(arg, endpointDefinition))\n-                .collect(ImmutableList.toImmutableList()));\n+                .map(arg -> CodeBlock.of(\"$N\", arg))\n+                .forEach(methodArgs::add);\n+        if (Tags.hasServerRequestContext(endpointDefinition)) {\n+            methodArgs.add(CodeBlock.of(\"$N.contexts().createContext($N, this)\", RUNTIME_VAR_NAME, EXCHANGE_VAR_NAME));\n+        }\n \n         boolean async = UndertowTypeFunctions.isAsync(endpointDefinition, options);\n         if (async || endpointDefinition.getReturns().isPresent()) {\n@@ -453,13 +458,13 @@ private CodeBlock endpointInvocation(\n                     DELEGATE_VAR_NAME,\n                     JavaNameSanitizer.sanitize(\n                             endpointDefinition.getEndpointName().get()),\n-                    String.join(\", \", methodArgs));\n+                    methodArgs.stream().collect(CodeBlock.joining(\",\")));\n         } else {\n             code.addStatement(\n                     \"$1N.$2L($3L)\",\n                     DELEGATE_VAR_NAME,\n                     endpointDefinition.getEndpointName(),\n-                    String.join(\", \", methodArgs));\n+                    methodArgs.stream().collect(CodeBlock.joining(\",\")));\n         }\n         if (UndertowTypeFunctions.isAsync(endpointDefinition, options)) {\n             code.add(CodeBlocks.statement(\n@@ -1062,7 +1067,8 @@ private static String deserializeFunctionName(Type type) {\n     private static String sanitizeVarName(String input, EndpointDefinition endpoint) {\n         String value = JavaNameSanitizer.sanitizeParameterName(input, endpoint);\n         if (RESERVED_PARAM_NAMES.contains(value)\n-                || (endpoint.getReturns().isPresent() && RESULT_VAR_NAME.equals(value))) {\n+                || (endpoint.getReturns().isPresent() && RESULT_VAR_NAME.equals(value))\n+                || (Tags.hasServerRequestContext(endpoint) && Tags.SERVER_REQUEST_CONTEXT_PARAMETER.equals(value))) {\n             return sanitizeVarName(value + \"_\", endpoint);\n         }\n         return value;"
  },
  {
    "sha": "cc10c57a8900d9ff63ef3a5f4ea3cf1f60c41934",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/services/UndertowServiceInterfaceGenerator.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -20,10 +20,12 @@\n import com.palantir.conjure.java.ConjureAnnotations;\n import com.palantir.conjure.java.Options;\n import com.palantir.conjure.java.types.TypeMapper;\n+import com.palantir.conjure.java.undertow.lib.RequestContext;\n import com.palantir.conjure.java.util.JavaNameSanitizer;\n import com.palantir.conjure.java.util.Javadoc;\n import com.palantir.conjure.java.util.Packages;\n import com.palantir.conjure.java.util.ParameterOrder;\n+import com.palantir.conjure.java.util.Tags;\n import com.palantir.conjure.spec.ArgumentDefinition;\n import com.palantir.conjure.spec.AuthType;\n import com.palantir.conjure.spec.CookieAuthType;\n@@ -121,6 +123,12 @@ public ParameterSpec visitUnknown(String unknownType) {\n         List<ArgumentDefinition> sortedArgList = ParameterOrder.sorted(endpointDef.getArgs());\n         sortedArgList.forEach(def -> parameterSpecs.add(createServiceMethodParameterArg(typeMapper, def, endpointDef)));\n \n+        if (Tags.hasServerRequestContext(endpointDef)) {\n+            parameterSpecs.add(\n+                    ParameterSpec.builder(ClassName.get(RequestContext.class), Tags.SERVER_REQUEST_CONTEXT_PARAMETER)\n+                            .build());\n+        }\n+\n         return ImmutableList.copyOf(parameterSpecs);\n     }\n "
  },
  {
    "sha": "12c059e575263b20c8362c6bf7255e121fd0cd1d",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/util/JavaNameSanitizer.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/util/JavaNameSanitizer.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/util/JavaNameSanitizer.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/util/JavaNameSanitizer.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -73,6 +73,9 @@ public String visitUnknown(String unknownType) {\n         if (maybeAuthParamName.isPresent() && maybeAuthParamName.get().equals(value)) {\n             return sanitizeParameterName(escape(value), endpoint);\n         }\n+        if (Tags.hasServerRequestContext(endpoint) && Tags.SERVER_REQUEST_CONTEXT_PARAMETER.equals(value)) {\n+            return sanitizeParameterName(escape(value), endpoint);\n+        }\n         return value;\n     }\n "
  },
  {
    "sha": "0e59158d6cbf24f551550e3abdfb870ed2e413a0",
    "filename": "conjure-java-core/src/main/java/com/palantir/conjure/java/util/Tags.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/util/Tags.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/main/java/com/palantir/conjure/java/util/Tags.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/main/java/com/palantir/conjure/java/util/Tags.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.conjure.java.util;\n+\n+import com.palantir.conjure.spec.EndpointDefinition;\n+\n+public final class Tags {\n+\n+    public static final String SERVER_REQUEST_CONTEXT_TAG = \"server-request-context\";\n+    public static final String SERVER_REQUEST_CONTEXT_PARAMETER = \"requestContext\";\n+\n+    public static boolean hasServerRequestContext(EndpointDefinition endpointDefinition) {\n+        return endpointDefinition.getTags().contains(SERVER_REQUEST_CONTEXT_TAG);\n+    }\n+\n+    private Tags() {}\n+}"
  },
  {
    "sha": "1ad75426a528d6e60800c8d1cfec07ea10d374ec",
    "filename": "conjure-java-core/src/test/resources/dangerous-name-service.yml",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/test/resources/dangerous-name-service.yml",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-core/src/test/resources/dangerous-name-service.yml",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-core/src/test/resources/dangerous-name-service.yml?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -52,3 +52,12 @@ services:\n             markers:\n               - Safe\n         returns: string\n+      noContext:\n+        http: POST /no/context\n+        args:\n+          requestContext: string\n+      context:\n+        http: POST /context\n+        args:\n+          requestContext: string\n+        tags: [server-request-context]\n\\ No newline at end of file"
  },
  {
    "sha": "6c641eae6acfb4714077bfa7c81aaf1a7994c5ad",
    "filename": "conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureContexts.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureContexts.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureContexts.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureContexts.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.conjure.java.undertow.runtime;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.palantir.conjure.java.undertow.lib.Contexts;\n+import com.palantir.conjure.java.undertow.lib.Endpoint;\n+import com.palantir.conjure.java.undertow.lib.RequestContext;\n+import io.undertow.server.HttpServerExchange;\n+import io.undertow.util.HeaderValues;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+enum ConjureContexts implements Contexts {\n+    INSTANCE;\n+\n+    @Override\n+    public RequestContext createContext(HttpServerExchange exchange, Endpoint _endpoint) {\n+        return new ConjureServerRequestContext(exchange);\n+    }\n+\n+    private static final class ConjureServerRequestContext implements RequestContext {\n+\n+        private final HttpServerExchange exchange;\n+\n+        private ImmutableListMultimap<String, String> cachedQueryParams;\n+\n+        ConjureServerRequestContext(HttpServerExchange exchange) {\n+            this.exchange = exchange;\n+        }\n+\n+        @Override\n+        public List<String> header(String headerName) {\n+            HeaderValues header = exchange.getRequestHeaders().get(headerName);\n+            return header == null ? ImmutableList.of() : Collections.unmodifiableList(header);\n+        }\n+\n+        @Override\n+        public Optional<String> firstHeader(String headerName) {\n+            return Optional.ofNullable(exchange.getRequestHeaders().getFirst(headerName));\n+        }\n+\n+        @Override\n+        public ImmutableListMultimap<String, String> queryParameters() {\n+            ImmutableListMultimap<String, String> cachedQueryParamsSnapshot = cachedQueryParams;\n+            if (cachedQueryParamsSnapshot == null) {\n+                cachedQueryParamsSnapshot = buildQueryParameters();\n+                cachedQueryParams = cachedQueryParamsSnapshot;\n+            }\n+            return cachedQueryParamsSnapshot;\n+        }\n+\n+        private ImmutableListMultimap<String, String> buildQueryParameters() {\n+            Map<String, Deque<String>> rawQueryParameters = exchange.getQueryParameters();\n+            if (rawQueryParameters.isEmpty()) {\n+                return ImmutableListMultimap.of();\n+            }\n+            ImmutableListMultimap.Builder<String, String> builder = ImmutableListMultimap.builder();\n+            exchange.getQueryParameters().forEach(builder::putAll);\n+            return builder.build();\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ConjureServerRequestContext{exchange=\" + exchange + '}';\n+        }\n+    }\n+}"
  },
  {
    "sha": "3712692036fae0a3c32a559f6fb48d6d0b43155f",
    "filename": "conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureUndertowRuntime.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureUndertowRuntime.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureUndertowRuntime.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-java-undertow-runtime/src/main/java/com/palantir/conjure/java/undertow/runtime/ConjureUndertowRuntime.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -21,6 +21,7 @@\n import com.palantir.conjure.java.undertow.lib.AsyncRequestProcessing;\n import com.palantir.conjure.java.undertow.lib.AuthorizationExtractor;\n import com.palantir.conjure.java.undertow.lib.BodySerDe;\n+import com.palantir.conjure.java.undertow.lib.Contexts;\n import com.palantir.conjure.java.undertow.lib.ExceptionHandler;\n import com.palantir.conjure.java.undertow.lib.MarkerCallback;\n import com.palantir.conjure.java.undertow.lib.PlainSerDe;\n@@ -84,6 +85,11 @@ public ExceptionHandler exceptionHandler() {\n         return exceptionHandler;\n     }\n \n+    @Override\n+    public Contexts contexts() {\n+        return ConjureContexts.INSTANCE;\n+    }\n+\n     public static final class Builder {\n \n         private Duration asyncTimeout = Duration.ofMinutes(3);"
  },
  {
    "sha": "cb1f6057abd161cf64a2ad3873ba4cb708b47e06",
    "filename": "conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/Contexts.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/Contexts.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/Contexts.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/Contexts.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.conjure.java.undertow.lib;\n+\n+import com.google.common.annotations.Beta;\n+import io.undertow.server.HttpServerExchange;\n+\n+/**\n+ * Factory for {@link RequestContext} objects when the {@code server-request-context} tag is used.\n+ * This is an internal interface that should only be used by generated code, it may change without\n+ * warning, and guarantees are only made for generated code.\n+ */\n+@Beta\n+public interface Contexts {\n+\n+    /** Returns a new {@link RequestContext} which describes the incoming request. */\n+    RequestContext createContext(HttpServerExchange exchange, Endpoint endpoint);\n+}"
  },
  {
    "sha": "17d17c827d0242f41334fce85bfaaa29d3c02579",
    "filename": "conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/RequestContext.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/RequestContext.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/RequestContext.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/RequestContext.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * (c) Copyright 2021 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.conjure.java.undertow.lib;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.collect.ListMultimap;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Interface providing a view over data provided by the the original HTTP request including request headers and query\n+ * parameters. This is a read only interface which should only be implemented by {@code conjure-java-undertow-runtime}.\n+ */\n+@Beta\n+public interface RequestContext {\n+\n+    /**\n+     * Returns all values of the header named {@code headerName}. The name is case insensitive. An empty list is\n+     * returned if no such header exists.\n+     */\n+    List<String> header(String headerName);\n+\n+    /**\n+     * Returns the value of the first header named {@code headerName}. The name is case insensitive.\n+     * An {@link Optional#empty()} is returned if no such header exists.\n+     */\n+    Optional<String> firstHeader(String headerName);\n+\n+    /**\n+     * Returns all query parameters associated with the current request.\n+     */\n+    ListMultimap<String, String> queryParameters();\n+}"
  },
  {
    "sha": "77c2e9f72b8816c587963c6b4f30a3feeaa46749",
    "filename": "conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/UndertowRuntime.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/palantir/conjure-java/blob/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/UndertowRuntime.java",
    "raw_url": "https://github.com/palantir/conjure-java/raw/b996059d3d24cd6f03c02ef641847dbeac908377/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/UndertowRuntime.java",
    "contents_url": "https://api.github.com/repos/palantir/conjure-java/contents/conjure-undertow-lib/src/main/java/com/palantir/conjure/java/undertow/lib/UndertowRuntime.java?ref=b996059d3d24cd6f03c02ef641847dbeac908377",
    "patch": "@@ -16,6 +16,8 @@\n \n package com.palantir.conjure.java.undertow.lib;\n \n+import com.google.common.annotations.Beta;\n+\n /**\n  * {@link UndertowRuntime} is the anchor for all non-generated logic used by generated handlers.\n  *\n@@ -41,4 +43,8 @@\n \n     /** Provides the {@link ExceptionHandler} used to map {@link Throwable failures} to Conjure responses. */\n     ExceptionHandler exceptionHandler();\n+\n+    /** Provides the {@link Contexts} which safely expose request details to resources. */\n+    @Beta\n+    Contexts contexts();\n }"
  }
]
