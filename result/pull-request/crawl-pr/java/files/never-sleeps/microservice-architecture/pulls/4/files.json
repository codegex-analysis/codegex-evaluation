[
  {
    "sha": "0be22490f4c3be2cfd1ad523848d18a541f8c88e",
    "filename": "docker-commands.md",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/docker-commands.md",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/docker-commands.md",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/docker-commands.md?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,7 @@\n+```shell script\n+docker build -t neversleeps/otus-arch-homework-01 .\n+```\n+\n+```shell script\n+docker push neversleeps/otus-arch-homework-01\n+```"
  },
  {
    "sha": "92197947af956894baeb31fbc6b2a087a3b9e625",
    "filename": "homework-05-APIgateway/README.md",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/README.md",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/README.md",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/README.md?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,50 @@\n+## Microservice Architecture\n+### Тема: API Gateway и Backends For Frontends\n+#### Задание №5:\n+\n+Добавить в приложение аутентификацию и регистрацию пользователей.\n+\n+Реализовать сценарий \"Изменение и просмотр данных в профиле клиента\": \n+- Пользователь регистрируется. \n+- Заходит под собой и по определенному урлу получает данные о своем профиле. \n+- Может поменять данные в профиле. \n+- Данные профиля для чтения и редактирования не должны быть доступны другим клиентам (аутентифицированным или нет). \n+\n+На выходе должны быть\n+1) описание архитектурного решения и схема взаимодействия сервисов (в виде картинки)\n+2) команда установки приложения (из helm-а или из манифестов). Обязательно указать в каком namespace нужно устанавливать. \n+2*) команда установки api-gateway, если он отличен от nginx-ingress.\n+3) тесты постмана, которые прогоняют сценарий: \n+- регистрация пользователя 1\n+- проверка, что изменение и получение профиля пользователя недоступно без логина\n+- вход пользователя 1\n+- изменение профиля пользователя 1\n+- проверка, что профиль поменялся\n+- выход* (если есть)\n+- регистрация пользователя 2\n+- вход пользователя 2\n+- проверка, что пользователь2 не имеет доступа на чтение и редактирование профиля пользователя1. \n+\n+В тестах обязательно \n+- наличие {{baseUrl}} для урла\n+- использование домена arch.homework в качестве initial значения {{baseUrl}}\n+- использование сгенерированных случайно данных в сценарии\n+- отображение данных запроса и данных ответа при запуске из командной строки с помощью newman.\n+\n+------------------------------------------------------------------\n+#### Примечания по решению:\n+\n+docker images:\n+- neversleeps/otus-arch-homework-05-auth\n+- neversleeps/otus-arch-homework-05-users\n+\n+Установить зависимости, релиз и чарт:\n+\n+```shell script\n+helm dependency update ./auth\n+helm install auth ./auth\n+helm dependency update ./app\n+helm install app ./app\n+```\n+\n+![sequence-diagram.png](sequence-diagram.png.png)\n\\ No newline at end of file"
  },
  {
    "sha": "7bc6b8c0ee07af06454785b82fbdaf2527dd5d65",
    "filename": "homework-05-APIgateway/applications/auth-service/.gitignore",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/.gitignore",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/.gitignore",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/.gitignore?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,36 @@\n+HELP.md\n+target/\n+!.mvn/wrapper/maven-wrapper.jar\n+!**/src/main/**/target/\n+!**/src/test/**/target/\n+\n+### STS ###\n+.apt_generated\n+.classpath\n+.factorypath\n+.project\n+.settings\n+.springBeans\n+.sts4-cache\n+\n+### IntelliJ IDEA ###\n+.idea\n+*.iws\n+*.iml\n+*.ipr\n+\n+### NetBeans ###\n+/nbproject/private/\n+/nbbuild/\n+/dist/\n+/nbdist/\n+/.nb-gradle/\n+build/\n+!**/src/main/**/build/\n+!**/src/test/**/build/\n+\n+### VS Code ###\n+.vscode/\n+/mvnw\n+/mvnw.cmd\n+/.mvn/"
  },
  {
    "sha": "440940b648742dcb224f2cc2817428b9a6e7e50e",
    "filename": "homework-05-APIgateway/applications/auth-service/Dockerfile",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/Dockerfile",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/Dockerfile",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/Dockerfile?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,13 @@\n+FROM maven:latest as builder\n+LABEL maintainer=\"iakonyakina@gmail.com\"\n+RUN mkdir /app\n+WORKDIR /app\n+COPY . .\n+RUN mvn clean package\n+\n+FROM openjdk:8\n+RUN mkdir /app\n+WORKDIR /app\n+COPY --from=builder /app/target/auth-service-0.0.1-SNAPSHOT.jar .\n+EXPOSE 8080\n+ENTRYPOINT [\"java\", \"-jar\", \"auth-service-0.0.1-SNAPSHOT.jar\"]\n\\ No newline at end of file"
  },
  {
    "sha": "57ced83769b687adf6e11d87d58161a9a2cc33c9",
    "filename": "homework-05-APIgateway/applications/auth-service/pom.xml",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/pom.xml",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/pom.xml",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/pom.xml?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.4.3</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>ru.microservice-architecture</groupId>\n+\t<artifactId>auth-service</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>auth-service</name>\n+\t<description>Demo project for Spring Boot</description>\n+\t<properties>\n+\t\t<java.version>8</java.version>\n+\t\t<lombok.version>1.18.12</lombok.version>\n+\t</properties>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.postgresql</groupId>\n+\t\t\t<artifactId>postgresql</artifactId>\n+\t\t\t<scope>runtime</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>${lombok.version}</version>\n+\t\t\t<scope>compile</scope>\n+\t\t</dependency>\n+\n+\t</dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n+\t\t\t</plugin>\n+\t\t</plugins>\n+\t</build>\n+\n+</project>"
  },
  {
    "sha": "4ea004e630ee133ae1a891c029ae63207930fa63",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/AuthServiceApplication.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/AuthServiceApplication.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/AuthServiceApplication.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/AuthServiceApplication.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,28 @@\n+package ru.microservicearchitecture;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+@SpringBootApplication\n+public class AuthServiceApplication {\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tSpringApplication application = new SpringApplication(AuthServiceApplication.class);\n+\n+\t\tProperties properties = new Properties();\n+\t\tproperties.load(new FileInputStream(\"./config/application.properties\"));\n+\t\tproperties.put(\"spring.datasource.username\", System.getenv(\"dbuser\"));\n+\t\tproperties.put(\"spring.datasource.password\", System.getenv(\"dbpswd\"));\n+\t\tapplication.setDefaultProperties(properties);\n+\n+\t\tSystem.out.println(\"Properties loaded: \" + properties);\n+\n+\t\tapplication.run(args);\n+\t}\n+\n+}"
  },
  {
    "sha": "d1250164f827f571956cd8702a7d8e80e858b935",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,28 @@\n+package ru.microservicearchitecture.controller;\n+\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+@RestController\n+public class HealthController {\n+\n+    @GetMapping(\"/health\")\n+    public String healthCheck() {\n+        return \"{\\\"status\\\": \\\"OK\\\"}\";\n+    }\n+\n+    @GetMapping(\"/\")\n+    public String sayHello() {\n+        String hostName;\n+        try {\n+            InetAddress myHost = InetAddress.getLocalHost();\n+            hostName = myHost.getHostName();\n+        } catch (UnknownHostException e) {\n+            hostName = \"UnknownHost\";\n+        }\n+        return \"Hello from \" + hostName;\n+    }\n+}"
  },
  {
    "sha": "09e6b77b8f60202473f4f9a7bfbecab1a1d30ad3",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/UserController.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/UserController.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/UserController.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/controller/UserController.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,130 @@\n+package ru.microservicearchitecture.controller;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import ru.microservicearchitecture.dto.UserDto;\n+import ru.microservicearchitecture.model.Session;\n+import ru.microservicearchitecture.model.User;\n+import ru.microservicearchitecture.service.SecurityService;\n+import ru.microservicearchitecture.service.SessionService;\n+import ru.microservicearchitecture.service.UserService;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletResponse;\n+\n+@Slf4j\n+@RestController\n+@RequiredArgsConstructor\n+public class UserController {\n+\n+    private final UserService userService;\n+    private final SessionService sessionService;\n+    private final SecurityService securityService;\n+    public static final String AUTH_COOKIE_NAME = \"arch_homework_auth_cookie\";\n+\n+    /**\n+     * Пользователь регистрируется в приложении\n+     * @param userDto данные пользователя\n+     * @return ResponseEntity\n+     */\n+    @PostMapping(\"/registration\")\n+    private ResponseEntity<?> registerUser(@RequestBody UserDto userDto) {\n+        if (userService.findUserByLogin(userDto.getLogin()) != null) {\n+            log.warn(\"Пользователь с логином '\" + userDto.getLogin() + \"' не найден\");\n+            ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n+        }\n+        User user = userService.registerUser(userDto);\n+        log.info(\"Пользователь '\" + user.toString() + \"' зарегистрирован\");\n+        return ResponseEntity.status(HttpStatus.OK).build();\n+    }\n+\n+    /**\n+     * Пользователь авторизовывается\n+     * @param userDto данные пользователя\n+     * @param httpServletResponse HttpServletResponse\n+     * @return ResponseEntity\n+     */\n+    @PostMapping(\"/login\")\n+    public ResponseEntity<?> loginUser(\n+            @RequestBody UserDto userDto,\n+            HttpServletResponse httpServletResponse\n+    ) {\n+        User user = userService.findUserByLogin(userDto.getLogin());\n+        // Проверяем наличие пользователя с таким логином\n+        if (user == null) {\n+            log.warn(\"Пользователь с логином '\" + userDto.getLogin() + \"' не найден\");\n+            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n+        }\n+        // Проверяем, что у найденного пользователя такой же пароль\n+        if (!securityService.encodePassword(userDto.getPassword()).equals(user.getPassword())) {\n+            log.warn(\"Пользователь '\" + userDto.getLogin() + \"': пароль неверный\");\n+            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n+        }\n+        // Сохраняем сессию для пользователя\n+        Session session = sessionService.saveSessionForUser(user);\n+        log.warn(\"Пользователь '\" + userDto.getLogin() + \"' авторизован\");\n+        // Добавляем куку с сессией\n+        Cookie cookie = new Cookie(AUTH_COOKIE_NAME, session.getId().toString());\n+        cookie.setHttpOnly(true);\n+        cookie.setPath(\"/\");\n+        httpServletResponse.addCookie(cookie);\n+        return ResponseEntity.status(HttpStatus.OK).build();\n+    }\n+\n+    /**\n+     * Пользователь выходит из системы\n+     * @param sessionId сессия\n+     * @param response HttpServletResponse\n+     * @return ResponseEntity\n+     */\n+    @PostMapping(\"/logout\")\n+    public ResponseEntity<?> logoutUser(\n+            @CookieValue(name = AUTH_COOKIE_NAME, required = false) String sessionId,\n+            HttpServletResponse response\n+    ) {\n+        // Проверяем, что кука сессии не равно null\n+        if (sessionId == null) {\n+            log.warn(\"Кука сессии = null\");\n+            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        // Проверяем, что сессия с такой кукой существует\n+        if (sessionService.findSession(sessionId) == null) {\n+            log.warn(\"Кука '\" + sessionId + \"' не найдена\");\n+            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n+        }\n+        // Удаляем сессию\n+        sessionService.deleteSession(sessionId);\n+        log.warn(\"Сессия '\" + sessionId + \"' удалена из бд\");\n+        // Добавляем пустую куку с сессией\n+        Cookie cookie = new Cookie(AUTH_COOKIE_NAME, \"\");\n+        cookie.setHttpOnly(true);\n+        cookie.setMaxAge(0);\n+        response.addCookie(cookie);\n+        return ResponseEntity.status(HttpStatus.OK).build();\n+    }\n+\n+    @GetMapping(\"/auth\")\n+    public ResponseEntity<?> auth(\n+            @CookieValue(name = AUTH_COOKIE_NAME, required = false) String sessionId,\n+            HttpServletResponse response\n+    ) {\n+        // Проверяем, что кука сессии не равно null\n+        if (sessionId == null) {\n+            log.warn(\"Кука сессии = null\");\n+            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+        // Проверяем, что сессия с такой кукой существует\n+        Session session = sessionService.findSession(sessionId);\n+        if (session == null) {\n+            log.warn(\"Кука '\" + sessionId + \"' не найдена\");\n+            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+        // добавляем userId в параметр x-user-id\n+        response.addHeader(\"x-user-id\", String.valueOf(session.getUserId()));\n+        log.info(\"Параметр 'x-user-id'='\" + session.getUserId() + \"' был добавлен для сессии '\" + sessionId + \"'\");\n+        return ResponseEntity.status(HttpStatus.OK).build();\n+    }\n+}"
  },
  {
    "sha": "cf1ec787c0f471a6ce2574aa66c965d4d84e014e",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.microservicearchitecture.dto;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class UserDto {\n+    private String login;\n+    private String password;\n+}"
  },
  {
    "sha": "0927a48d8f13e406dab7f4e626a6378edb2dd827",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/Session.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/Session.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/Session.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/Session.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,25 @@\n+package ru.microservicearchitecture.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.persistence.*;\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Entity\n+@Table(name = \"SESSIONS\")\n+public class Session {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\", nullable = false, unique = true)\n+    private Long id;\n+\n+    @Column(name = \"userId\", nullable = false)\n+    private Long userId;\n+}\n+"
  },
  {
    "sha": "4aa8272e606d298a750e794d1b33ff649e426e63",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/User.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/User.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/User.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/model/User.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,25 @@\n+package ru.microservicearchitecture.model;\n+\n+import lombok.*;\n+\n+import javax.persistence.*;\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Entity\n+@Table(name = \"USERS\")\n+public class User {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\", nullable = false, unique = true)\n+    private Long id;\n+\n+    @Column(name = \"login\", nullable = false, unique = true)\n+    private String login;\n+\n+    @ToString.Exclude\n+    @Column(name = \"password\", nullable = false)\n+    private String password;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8e302537b45d24d4c80d603ba3c695663cff082f",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/SessionRepository.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/SessionRepository.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/SessionRepository.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/SessionRepository.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.microservicearchitecture.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import ru.microservicearchitecture.model.Session;\n+\n+public interface SessionRepository extends JpaRepository<Session, Long> {\n+}"
  },
  {
    "sha": "ea03459f2c4f0a06135a1e325fc9d1434dcb8511",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/UserRepository.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/UserRepository.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/UserRepository.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/repository/UserRepository.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,10 @@\n+package ru.microservicearchitecture.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import ru.microservicearchitecture.model.User;\n+\n+import java.util.Optional;\n+\n+public interface UserRepository extends JpaRepository<User, Long> {\n+    Optional<User> findByLogin(String login);\n+}"
  },
  {
    "sha": "ea31adffd422ae653a89ad3e2596878605a56031",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SecurityService.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SecurityService.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SecurityService.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SecurityService.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,5 @@\n+package ru.microservicearchitecture.service;\n+\n+public interface SecurityService {\n+    String encodePassword(String password);\n+}"
  },
  {
    "sha": "45191163097aeb710256d3fdbd8dcf01329ace80",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SessionService.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SessionService.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SessionService.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/SessionService.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.microservicearchitecture.service;\n+\n+import ru.microservicearchitecture.model.Session;\n+import ru.microservicearchitecture.model.User;\n+\n+public interface SessionService {\n+    Session saveSessionForUser(User user);\n+\n+    Session findSession(String sessionId);\n+\n+    void deleteSession(String sessionId);\n+}"
  },
  {
    "sha": "b2e203573fc2e6fa7517a720df29a850b6e2a2b4",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/UserService.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/UserService.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/UserService.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/UserService.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.microservicearchitecture.service;\n+\n+import ru.microservicearchitecture.dto.UserDto;\n+import ru.microservicearchitecture.model.User;\n+\n+public interface UserService {\n+\n+    User registerUser(UserDto userDto);\n+\n+    User findUserByLogin(String login);\n+}"
  },
  {
    "sha": "da13e5659a7291b48d6ca33599ca7a0afa2679c0",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SecurityServiceImpl.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SecurityServiceImpl.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SecurityServiceImpl.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SecurityServiceImpl.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.microservicearchitecture.service.impl;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.stereotype.Service;\n+import ru.microservicearchitecture.service.SecurityService;\n+\n+import java.util.Base64;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class SecurityServiceImpl implements SecurityService {\n+\n+    @Override\n+    public String encodePassword(String password) {\n+//        password = password + \"salt\";\n+//        return Base64.getEncoder().encodeToString(password.getBytes());\n+        return password;\n+    }\n+}"
  },
  {
    "sha": "309cc2aff15f33ec494d3ae403cee02341d6afee",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SessionServiceImpl.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SessionServiceImpl.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SessionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/SessionServiceImpl.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.microservicearchitecture.service.impl;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.stereotype.Service;\n+import ru.microservicearchitecture.model.Session;\n+import ru.microservicearchitecture.model.User;\n+import ru.microservicearchitecture.repository.SessionRepository;\n+import ru.microservicearchitecture.service.SessionService;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class SessionServiceImpl implements SessionService {\n+\n+    private final SessionRepository sessionRepository;\n+\n+    @Override\n+    public Session saveSessionForUser(User user) {\n+        Session session = Session.builder()\n+                .userId(user.getId())\n+                .build();\n+        return sessionRepository.save(session);\n+    }\n+\n+    @Override\n+    public Session findSession(String sessionId) {\n+        return sessionRepository.findById(Long.parseLong(sessionId)).orElse(null);\n+    }\n+\n+    @Override\n+    public void deleteSession(String sessionId) {\n+        sessionRepository.deleteById(Long.parseLong(sessionId));\n+    }\n+}"
  },
  {
    "sha": "ebd79a9613b5d8f29d9f723ed2cc3dce06b8a112",
    "filename": "homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/UserServiceImpl.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/UserServiceImpl.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/UserServiceImpl.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/auth-service/src/main/java/ru/microservicearchitecture/service/impl/UserServiceImpl.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,30 @@\n+package ru.microservicearchitecture.service.impl;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.stereotype.Service;\n+import ru.microservicearchitecture.dto.UserDto;\n+import ru.microservicearchitecture.model.User;\n+import ru.microservicearchitecture.repository.UserRepository;\n+import ru.microservicearchitecture.service.SecurityService;\n+import ru.microservicearchitecture.service.UserService;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class UserServiceImpl implements UserService {\n+    private final UserRepository userRepository;\n+    private final SecurityService securityService;\n+\n+    @Override\n+    public User registerUser(UserDto userDto) {\n+        User newUser = User.builder()\n+                .login(userDto.getLogin())\n+                .password(securityService.encodePassword(userDto.getPassword()))\n+                .build();\n+        return userRepository.save(newUser);\n+    }\n+\n+    @Override\n+    public User findUserByLogin(String login) {\n+        return userRepository.findByLogin(login).orElse(null);\n+    }\n+}"
  },
  {
    "sha": "e7b373bc3258182298dc70eea4c43d8548011ec6",
    "filename": "homework-05-APIgateway/applications/user-service/.gitignore",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/.gitignore",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/.gitignore",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/.gitignore?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,36 @@\n+HELP.md\n+target/\n+!.mvn/wrapper/maven-wrapper.jar\n+!**/src/main/**/target/\n+!**/src/test/**/target/\n+\n+### STS ###\n+.apt_generated\n+.classpath\n+.factorypath\n+.project\n+.settings\n+.springBeans\n+.sts4-cache\n+\n+### IntelliJ IDEA ###\n+.idea\n+*.iws\n+*.iml\n+*.ipr\n+\n+### NetBeans ###\n+/nbproject/private/\n+/nbbuild/\n+/dist/\n+/nbdist/\n+/.nb-gradle/\n+build/\n+!**/src/main/**/build/\n+!**/src/test/**/build/\n+\n+### VS Code ###\n+.vscode/\n+/.mvn/\n+/mvnw\n+/mvnw.cmd"
  },
  {
    "sha": "50d3bf76088e5d5b39dbd9c2c85e1604d25a0176",
    "filename": "homework-05-APIgateway/applications/user-service/Dockerfile",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/Dockerfile",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/Dockerfile",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/Dockerfile?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,13 @@\n+FROM maven:latest as builder\n+LABEL maintainer=\"iakonyakina@gmail.com\"\n+RUN mkdir /app\n+WORKDIR /app\n+COPY . .\n+RUN mvn clean package\n+\n+FROM openjdk:8\n+RUN mkdir /app\n+WORKDIR /app\n+COPY --from=builder /app/target/user-service-0.0.1-SNAPSHOT.jar .\n+EXPOSE 8080 \n+ENTRYPOINT [\"java\", \"-jar\", \"user-service-0.0.1-SNAPSHOT.jar\"]\n\\ No newline at end of file"
  },
  {
    "sha": "afccfe0e942f7a6f83982815af42f4949b5153c8",
    "filename": "homework-05-APIgateway/applications/user-service/pom.xml",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/pom.xml",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/pom.xml",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/pom.xml?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.4.3</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>ru.microservice-architecture</groupId>\n+\t<artifactId>user-service</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>user-service</name>\n+\t<description>Demo project for Spring Boot</description>\n+\t<properties>\n+\t\t<java.version>8</java.version>\n+\t\t<lombok.version>1.18.12</lombok.version>\n+\t</properties>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.postgresql</groupId>\n+\t\t\t<artifactId>postgresql</artifactId>\n+\t\t\t<scope>runtime</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>${lombok.version}</version>\n+\t\t\t<scope>compile</scope>\n+\t\t</dependency>\n+\n+\t\t<!-- Monitoring stuff: Prometheus and others-->\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.micrometer</groupId>\n+\t\t\t<artifactId>micrometer-core</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.micrometer</groupId>\n+\t\t\t<artifactId>micrometer-registry-prometheus</artifactId>\n+\t\t</dependency>\n+\t</dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n+\t\t\t</plugin>\n+\t\t</plugins>\n+\t</build>\n+\n+</project>"
  },
  {
    "sha": "3105b8a4d453f6ea73c82cf522cbb5ac5373a604",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/UserServiceApplication.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/UserServiceApplication.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/UserServiceApplication.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/UserServiceApplication.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,26 @@\n+package ru.microservicearchitecture;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+@SpringBootApplication\n+public class UserServiceApplication {\n+\n+\tpublic static void main(String[] args) throws IOException  {\n+\t\tSpringApplication application = new SpringApplication(UserServiceApplication.class);\n+\n+\t\tProperties properties = new Properties();\n+\t\tproperties.load(new FileInputStream(\"./config/application.properties\"));\n+\t\tproperties.put(\"spring.datasource.username\", System.getenv(\"dbuser\"));\n+\t\tproperties.put(\"spring.datasource.password\", System.getenv(\"dbpswd\"));\n+\t\tapplication.setDefaultProperties(properties);\n+\n+\t\tSystem.out.println(\"Properties loaded: \" + properties);\n+\n+\t\tapplication.run(args);\n+\t}\n+}"
  },
  {
    "sha": "d1250164f827f571956cd8702a7d8e80e858b935",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/HealthController.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,28 @@\n+package ru.microservicearchitecture.controller;\n+\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+@RestController\n+public class HealthController {\n+\n+    @GetMapping(\"/health\")\n+    public String healthCheck() {\n+        return \"{\\\"status\\\": \\\"OK\\\"}\";\n+    }\n+\n+    @GetMapping(\"/\")\n+    public String sayHello() {\n+        String hostName;\n+        try {\n+            InetAddress myHost = InetAddress.getLocalHost();\n+            hostName = myHost.getHostName();\n+        } catch (UnknownHostException e) {\n+            hostName = \"UnknownHost\";\n+        }\n+        return \"Hello from \" + hostName;\n+    }\n+}"
  },
  {
    "sha": "1e74ccf891900101350efe721f42a84a84356673",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/UserController.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/UserController.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/UserController.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/controller/UserController.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,55 @@\n+package ru.microservicearchitecture.controller;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import ru.microservicearchitecture.dto.ResponseDto;\n+import ru.microservicearchitecture.dto.UserDto;\n+import ru.microservicearchitecture.model.User;\n+import ru.microservicearchitecture.service.UserService;\n+\n+@Slf4j\n+@RestController\n+@AllArgsConstructor\n+public class UserController {\n+    private final UserService userService;\n+\n+    /**\n+     * Пользователь получает данные о своем профиле\n+     * @param userId ID пользователя\n+     * @return объект ResponseDto с полями success и User\n+     */\n+    @GetMapping(\"/users/me\")\n+    @ResponseStatus(HttpStatus.OK)\n+    public ResponseDto getUserProfile(\n+            @RequestHeader(\"x-user-id\") String userId\n+    ){\n+        log.info(\"Получение данных профиля: 'x-user-id'=\" + userId);\n+        if (userId != null) {\n+            User user = userService.findById(Long.parseLong(userId));\n+            if (user != null) {\n+                return new ResponseDto(true, new UserDto(user));\n+            }\n+        }\n+        return new ResponseDto(false, null);\n+    }\n+\n+    /**\n+     * Пользователь редактирует данные в своём профиле\n+     * @param userId ID пользователя\n+     * @param userDTO обновлённые данные профиля\n+     * @return ResponseEntity\n+     */\n+    @PostMapping(\"/users/me\")\n+    @ResponseStatus(HttpStatus.ACCEPTED)\n+    public ResponseEntity<?> updateUserProfile(\n+            @RequestHeader(\"x-user-id\") String userId,\n+            @RequestBody UserDto userDTO\n+    ) {\n+        log.info(\"Обновление данных профиля 'x-user-id'=\" + userId);\n+        userService.saveUser(Long.parseLong(userId), userDTO);\n+        return ResponseEntity.ok().build();\n+    }\n+}"
  },
  {
    "sha": "6f919a9a9954be4140f99ef07e29e6d23a5e0b66",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/ResponseDto.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/ResponseDto.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/ResponseDto.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/ResponseDto.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.microservicearchitecture.dto;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@AllArgsConstructor\n+@Data\n+public class ResponseDto {\n+    private boolean success;\n+    private UserDto user;\n+}"
  },
  {
    "sha": "a66623954f08df21211360238bbda6fd5febf08a",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/dto/UserDto.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,17 @@\n+package ru.microservicearchitecture.dto;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import ru.microservicearchitecture.model.User;\n+\n+@Data\n+@AllArgsConstructor\n+public class UserDto {\n+    private String name;\n+    private String mail;\n+\n+    public UserDto(User user) {\n+        this.name = user.getName();\n+        this.mail = user.getMail();\n+    }\n+}"
  },
  {
    "sha": "428eed3f7888474871f6d1839d15034b4db8c3c5",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/model/User.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/model/User.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/model/User.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/model/User.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.microservicearchitecture.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.persistence.*;\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Entity\n+@Table(name = \"USERS\")\n+public class User {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\", nullable = false, unique = true)\n+    private long id;\n+\n+    @Column(name = \"name\", nullable = false)\n+    private String name;\n+\n+    @Column(name = \"mail\")\n+    private String mail;\n+}"
  },
  {
    "sha": "a26196e35bd40053568dd261966f9c54104a4a59",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/repositories/UserRepository.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/repositories/UserRepository.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/repositories/UserRepository.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/repositories/UserRepository.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.microservicearchitecture.repositories;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import ru.microservicearchitecture.model.User;\n+\n+public interface UserRepository extends JpaRepository<User, Long> {\n+}"
  },
  {
    "sha": "d1cf00ca46a73733bf444c1acfe63e0e58ce496c",
    "filename": "homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/service/UserService.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/never-sleeps/microservice-architecture/blob/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/service/UserService.java",
    "raw_url": "https://github.com/never-sleeps/microservice-architecture/raw/0b277509e3bc84967698262047c4ce9778774977/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/service/UserService.java",
    "contents_url": "https://api.github.com/repos/never-sleeps/microservice-architecture/contents/homework-05-APIgateway/applications/user-service/src/main/java/ru/microservicearchitecture/service/UserService.java?ref=0b277509e3bc84967698262047c4ce9778774977",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.microservicearchitecture.service;\n+\n+import ru.microservicearchitecture.dto.UserDto;\n+import ru.microservicearchitecture.model.User;\n+\n+public interface UserService {\n+\n+    User findById(long id);\n+\n+    User saveUser(long userId, UserDto user);\n+}"
  }
]
