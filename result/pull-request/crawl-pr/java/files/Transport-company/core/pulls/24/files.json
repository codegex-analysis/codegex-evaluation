[
  {
    "sha": "472b1892ef86d3370d730be23178405b5b3583a8",
    "filename": "src/main/java/com/training/core/dto/request/TariffRequest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Transport-company/core/blob/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/dto/request/TariffRequest.java",
    "raw_url": "https://github.com/Transport-company/core/raw/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/dto/request/TariffRequest.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/main/java/com/training/core/dto/request/TariffRequest.java?ref=b28d12dea0ddcb04f9eac92fd327d11347a38af5",
    "patch": "@@ -123,7 +123,7 @@\n             required = true, example = \"0.125\")\n     @NotNull(message = \"The field is required\")\n     @Positive\n-    private final Float volumeThreashold;\n+    private final Float volumeThreshold;\n \n     /**\n      * Ratio increase for each additional volume unit."
  },
  {
    "sha": "472191ff61652a33caddee6a2fd1ec9ac2585737",
    "filename": "src/main/java/com/training/core/dto/response/TariffResponse.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Transport-company/core/blob/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/dto/response/TariffResponse.java",
    "raw_url": "https://github.com/Transport-company/core/raw/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/dto/response/TariffResponse.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/main/java/com/training/core/dto/response/TariffResponse.java?ref=b28d12dea0ddcb04f9eac92fd327d11347a38af5",
    "patch": "@@ -100,7 +100,7 @@\n      * The maximum volume value above which the additional payment is set.\n      */\n     @Schema(description = \"the maximum volume value above which the additional payment is set\")\n-    private final float volumeThreashold;\n+    private final float volumeThreshold;\n \n     /**\n      * Ratio increase for each additional volume unit."
  },
  {
    "sha": "caa2accce97518909f02d1ef3b64742302a40003",
    "filename": "src/main/java/com/training/core/mapper/dto/TariffRequestToTariffConverter.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Transport-company/core/blob/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/mapper/dto/TariffRequestToTariffConverter.java",
    "raw_url": "https://github.com/Transport-company/core/raw/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/mapper/dto/TariffRequestToTariffConverter.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/main/java/com/training/core/mapper/dto/TariffRequestToTariffConverter.java?ref=b28d12dea0ddcb04f9eac92fd327d11347a38af5",
    "patch": "@@ -18,6 +18,12 @@ public Tariff convert(TariffRequest tariffRequest) {\n                 .minDistance(tariffRequest.getMinDistance())\n                 .distanceThreshold(tariffRequest.getDistanceThreshold())\n                 .reductionFactor(tariffRequest.getReductionFactor())\n+                .weightUnit(tariffRequest.getWeightUnit())\n+                .weightThreshold(tariffRequest.getWeightThreshold())\n+                .weightRatioIncrease(tariffRequest.getWeightRatioIncrease())\n+                .volumeUnit(tariffRequest.getVolumeUnit())\n+                .volumeThreshold(tariffRequest.getVolumeThreshold())\n+                .volumeRatioIncrease(tariffRequest.getVolumeRatioIncrease())\n                 .build();\n     }\n }"
  },
  {
    "sha": "52c65a77161f43115af5557cb1276b8e794d9c80",
    "filename": "src/main/java/com/training/core/mapper/model/TariffToTariffResponseConverter.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Transport-company/core/blob/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/mapper/model/TariffToTariffResponseConverter.java",
    "raw_url": "https://github.com/Transport-company/core/raw/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/main/java/com/training/core/mapper/model/TariffToTariffResponseConverter.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/main/java/com/training/core/mapper/model/TariffToTariffResponseConverter.java?ref=b28d12dea0ddcb04f9eac92fd327d11347a38af5",
    "patch": "@@ -18,6 +18,12 @@ public TariffResponse convert(Tariff tariff) {\n                 .minDistance(tariff.getMinDistance())\n                 .distanceThreshold(tariff.getDistanceThreshold())\n                 .reductionFactor(tariff.getReductionFactor())\n+                .weightUnit(tariff.getWeightUnit())\n+                .weightThreshold(tariff.getWeightThreshold())\n+                .weightRatioIncrease(tariff.getWeightRatioIncrease())\n+                .volumeUnit(tariff.getVolumeUnit())\n+                .volumeThreshold(tariff.getVolumeThreshold())\n+                .volumeRatioIncrease(tariff.getVolumeRatioIncrease())\n                 .created(tariff.getCreated())\n                 .updated(tariff.getUpdated())\n                 .build();"
  },
  {
    "sha": "429239ad08d3830b58ed4304a7d98dea19ff1af1",
    "filename": "src/test/java/com/training/core/service/impl/DeliverySumCalculatingServiceImplTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/Transport-company/core/blob/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/test/java/com/training/core/service/impl/DeliverySumCalculatingServiceImplTest.java",
    "raw_url": "https://github.com/Transport-company/core/raw/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/test/java/com/training/core/service/impl/DeliverySumCalculatingServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/test/java/com/training/core/service/impl/DeliverySumCalculatingServiceImplTest.java?ref=b28d12dea0ddcb04f9eac92fd327d11347a38af5",
    "patch": "@@ -2,7 +2,7 @@\n \n import com.training.core.model.Tariff;\n import com.training.core.service.TariffService;\n-import com.training.core.util.TestTariff;\n+import com.training.core.util.TestTariffs;\n import org.junit.jupiter.api.Test;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n@@ -28,7 +28,7 @@\n     void givenDistanceLessThanMin_whenGetSum_thenCalculateSum() {\n \n         int distance = 1;\n-        Tariff tariff = TestTariff.first();\n+        Tariff tariff = TestTariffs.first();\n         float weight = 1f;\n         float volume = 0.1f;\n \n@@ -53,7 +53,7 @@ void givenDistanceLessThanMin_whenGetSum_thenCalculateSum() {\n     void givenNormalDistance_whenGetSum_thenCalculateSum() {\n \n         int distance = 200;\n-        Tariff tariff = TestTariff.first();\n+        Tariff tariff = TestTariffs.first();\n         float weight = 1f;\n         float volume = 0.1f;\n \n@@ -78,7 +78,7 @@ void givenNormalDistance_whenGetSum_thenCalculateSum() {\n     void givenDistanceMoreThanThreshold_whenGetSum_thenCalculateSum() {\n \n         int distance = 2000;\n-        Tariff tariff = TestTariff.first();\n+        Tariff tariff = TestTariffs.first();\n         float weight = 1f;\n         float volume = 0.1f;\n \n@@ -107,7 +107,7 @@ void givenDistanceMoreThanThreshold_whenGetSum_thenCalculateSum() {\n     void givenNormalDistanceAndExcessWeight_whenGetSum_thenCalculateSum() {\n \n         int distance = 200;\n-        Tariff tariff = TestTariff.first();\n+        Tariff tariff = TestTariffs.first();\n         float weight = 2f;\n         float volume = 0.1f;\n \n@@ -136,7 +136,7 @@ void givenNormalDistanceAndExcessWeight_whenGetSum_thenCalculateSum() {\n     void givenNormalDistanceAndExcessVolume_whenGetSum_thenCalculateSum() {\n \n         int distance = 200;\n-        Tariff tariff = TestTariff.first();\n+        Tariff tariff = TestTariffs.first();\n         float weight = 1f;\n         float volume = 0.2f;\n \n@@ -165,7 +165,7 @@ void givenNormalDistanceAndExcessVolume_whenGetSum_thenCalculateSum() {\n     void givenNormalDistanceAndExcessWeightAndExcessVolume_whenGetSum_thenCalculateSum() {\n \n         int distance = 200;\n-        Tariff tariff = TestTariff.first();\n+        Tariff tariff = TestTariffs.first();\n         float weight = 2.5f;\n         float volume = 0.2f;\n "
  },
  {
    "sha": "d64c8da9c99848af4103120a9615da9895905a4a",
    "filename": "src/test/java/com/training/core/service/impl/TariffServiceImplTest.java",
    "status": "added",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/Transport-company/core/blob/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/test/java/com/training/core/service/impl/TariffServiceImplTest.java",
    "raw_url": "https://github.com/Transport-company/core/raw/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/test/java/com/training/core/service/impl/TariffServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/test/java/com/training/core/service/impl/TariffServiceImplTest.java?ref=b28d12dea0ddcb04f9eac92fd327d11347a38af5",
    "patch": "@@ -0,0 +1,153 @@\n+package com.training.core.service.impl;\n+\n+import com.training.core.exception.TariffNotFoundException;\n+import com.training.core.model.Tariff;\n+import com.training.core.repository.TariffRepository;\n+import com.training.core.util.TestTariffs;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.PageRequest;\n+\n+import java.time.LocalDate;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class TariffServiceImplTest extends BaseTest {\n+\n+    @InjectMocks\n+    private TariffServiceImpl tariffService;\n+\n+    @Mock\n+    private TariffRepository tariffRepository;\n+\n+    @Test\n+    void givenPageSizeAndPageNumber_whenGetList_thenReturnPageWithList() {\n+        int pageSize = 10;\n+        int pageNumber = 0;\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageSize);\n+        List<Tariff> testData = TestTariffs.list();\n+\n+        when(tariffRepository.findAll(pageRequest))\n+                .thenReturn(\n+                        new PageImpl<>(\n+                                pageSize < testData.size()\n+                                        ? testData.stream()\n+                                        .limit(pageSize)\n+                                        .collect(Collectors.toList())\n+                                        : testData,\n+                                pageRequest,\n+                                testData.size()));\n+\n+        Page<Tariff> page = tariffService.getList(pageRequest);\n+\n+        assertNotNull(page);\n+        assertEquals(Math.min(pageSize, testData.size()), page.getContent().size());\n+        assertEquals(testData.size(), page.getTotalElements());\n+    }\n+\n+    @Test\n+    void givenId_whenGetById_thenReturnTariff() {\n+        Long id = 1L;\n+        Tariff tariff = TestTariffs.first();\n+\n+        when(tariffRepository.findById(id))\n+                .thenReturn(Optional.of(tariff));\n+\n+        Tariff fetched = tariffService.getById(id);\n+\n+        assertNotNull(fetched);\n+        assertEquals(tariff, fetched);\n+    }\n+\n+    @Test\n+    void givenNotExistingId_whenGetById_thenThrowTariffNotFoundException() {\n+        Long id = 999L;\n+\n+        when(tariffRepository.findById(id))\n+                .thenReturn(Optional.empty());\n+\n+        assertThrows(TariffNotFoundException.class, () -> tariffService.getById(id));\n+    }\n+\n+    @Test\n+    void givenDate_whenGetForDate_thenReturnTariff() {\n+        LocalDate date = LocalDate.now();\n+        Tariff tariff = TestTariffs.first();\n+\n+        when(tariffRepository.findForDate(date))\n+                .thenReturn(Optional.of(tariff));\n+\n+        Tariff fetched = tariffService.getForDate(date);\n+\n+        assertNotNull(fetched);\n+        assertEquals(tariff, fetched);\n+    }\n+\n+    @Test\n+    void givenTariff_whenSave_thenReturnSavedTariff() {\n+        Tariff tariff = TestTariffs.first();\n+\n+        when(tariffRepository.save(tariff))\n+                .thenReturn(tariff);\n+\n+        assertNotNull(tariffService.save(tariff));\n+    }\n+\n+    @Test\n+    void givenIdAndTariff_whenUpdate_thenReturnUpdatedTariff() {\n+        Long id = 1L;\n+        Tariff tariff = TestTariffs.first();\n+\n+        when(tariffRepository.findById(id))\n+                .thenReturn(Optional.of(tariff));\n+        when(tariffRepository.save(tariff))\n+                .thenReturn(tariff);\n+\n+        assertNotNull(tariffService.update(id, tariff));\n+    }\n+\n+    @Test\n+    void givenNotExistingIdAndTariff_whenUpdate_thenThrowTariffNotFoundExceptionf() {\n+        Long id = 1L;\n+        Tariff tariff = TestTariffs.first();\n+\n+        when(tariffRepository.findById(id))\n+                .thenReturn(Optional.empty());\n+\n+        assertThrows(TariffNotFoundException.class, () -> tariffService.update(id, tariff));\n+    }\n+\n+    @Test\n+    void givenId_whenDelete_thenNoReturn() {\n+        Long id = 1L;\n+        Tariff tariff = TestTariffs.first();\n+\n+        when(tariffRepository.findById(id))\n+                .thenReturn(Optional.of(tariff));\n+\n+        tariffService.delete(id);\n+\n+        verify(tariffRepository, times(1)).deleteById(id);\n+    }\n+\n+    @Test\n+    void givenNotExistingId_whenDelete_thenThrowTariffNotFoundException() {\n+        Long id = 1L;\n+\n+        when(tariffRepository.findById(id))\n+                .thenReturn(Optional.empty());\n+\n+        assertThrows(TariffNotFoundException.class, () -> tariffService.delete(id));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "215654e30a738d5e179ddb7589f8b67f8b94b3f8",
    "filename": "src/test/java/com/training/core/util/TestTariff.java",
    "status": "removed",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/Transport-company/core/blob/7e46ffd5eb5a01d8e27d946404b3af5be45300c0/src/test/java/com/training/core/util/TestTariff.java",
    "raw_url": "https://github.com/Transport-company/core/raw/7e46ffd5eb5a01d8e27d946404b3af5be45300c0/src/test/java/com/training/core/util/TestTariff.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/test/java/com/training/core/util/TestTariff.java?ref=7e46ffd5eb5a01d8e27d946404b3af5be45300c0",
    "patch": "@@ -1,30 +0,0 @@\n-package com.training.core.util;\n-\n-import com.training.core.model.Tariff;\n-\n-import java.math.BigDecimal;\n-import java.time.LocalDate;\n-\n-public class TestTariff {\n-    private TestTariff() {\n-    }\n-\n-    public static Tariff first() {\n-        return Tariff.builder()\n-                .id(1L)\n-                .effectiveDate(LocalDate.of(1900, 1, 1))\n-                .orderSum(new BigDecimal(\"100.00\"))\n-                .courierSum(new BigDecimal(\"500.00\"))\n-                .distancePrice(new BigDecimal(\"0.50\"))\n-                .minDistance(10)\n-                .distanceThreshold(800)\n-                .reductionFactor(new BigDecimal(\"0.5\"))\n-                .weightUnit(1f)\n-                .weightThreshold(1f)\n-                .weightRatioIncrease(0.1f)\n-                .volumeUnit(0.1f)\n-                .volumeThreshold(0.125f)\n-                .volumeRatioIncrease(0.1f)\n-                .build();\n-    }\n-}"
  },
  {
    "sha": "4d5791cb40d02f0cfb883c4f63a24970bdc5bc3d",
    "filename": "src/test/java/com/training/core/util/TestTariffs.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Transport-company/core/blob/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/test/java/com/training/core/util/TestTariffs.java",
    "raw_url": "https://github.com/Transport-company/core/raw/b28d12dea0ddcb04f9eac92fd327d11347a38af5/src/test/java/com/training/core/util/TestTariffs.java",
    "contents_url": "https://api.github.com/repos/Transport-company/core/contents/src/test/java/com/training/core/util/TestTariffs.java?ref=b28d12dea0ddcb04f9eac92fd327d11347a38af5",
    "patch": "@@ -0,0 +1,59 @@\n+package com.training.core.util;\n+\n+import com.training.core.model.Tariff;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestTariffs {\n+    private TestTariffs() {\n+    }\n+\n+    public static Tariff first() {\n+        return Tariff.builder()\n+                .id(1L)\n+                .effectiveDate(LocalDate.of(1900, 1, 1))\n+                .orderSum(new BigDecimal(\"100.00\"))\n+                .courierSum(new BigDecimal(\"500.00\"))\n+                .distancePrice(new BigDecimal(\"0.50\"))\n+                .minDistance(10)\n+                .distanceThreshold(800)\n+                .reductionFactor(new BigDecimal(\"0.50\"))\n+                .weightUnit(1f)\n+                .weightThreshold(1f)\n+                .weightRatioIncrease(0.1f)\n+                .volumeUnit(0.1f)\n+                .volumeThreshold(0.125f)\n+                .volumeRatioIncrease(0.1f)\n+                .build();\n+    }\n+\n+    public static Tariff from2020() {\n+        return Tariff.builder()\n+                .id(2L)\n+                .effectiveDate(LocalDate.of(2020, 1, 1))\n+                .orderSum(new BigDecimal(\"110.00\"))\n+                .courierSum(new BigDecimal(\"490.00\"))\n+                .distancePrice(new BigDecimal(\"0.50\"))\n+                .minDistance(12)\n+                .distanceThreshold(1000)\n+                .reductionFactor(new BigDecimal(\"0.50\"))\n+                .weightUnit(1f)\n+                .weightThreshold(1f)\n+                .weightRatioIncrease(0.1f)\n+                .volumeUnit(0.1f)\n+                .volumeThreshold(0.125f)\n+                .volumeRatioIncrease(0.1f)\n+                .build();\n+    }\n+\n+    public static List<Tariff> list() {\n+        List<Tariff> list = new ArrayList<>();\n+        list.add(first());\n+        list.add(from2020());\n+\n+        return list;\n+    }\n+}"
  }
]
