[
  {
    "sha": "b5ee26e45e8c8368cc90ac5b35951f56253531a1",
    "filename": "src/main/java/core/basesyntax/ArrayList.java",
    "status": "modified",
    "additions": 62,
    "deletions": 9,
    "changes": 71,
    "blob_url": "https://github.com/mate-academy/jv-array-list/blob/5417e2cce3f72525b340c23287ef15a69873b2f6/src/main/java/core/basesyntax/ArrayList.java",
    "raw_url": "https://github.com/mate-academy/jv-array-list/raw/5417e2cce3f72525b340c23287ef15a69873b2f6/src/main/java/core/basesyntax/ArrayList.java",
    "contents_url": "https://api.github.com/repos/mate-academy/jv-array-list/contents/src/main/java/core/basesyntax/ArrayList.java?ref=5417e2cce3f72525b340c23287ef15a69873b2f6",
    "patch": "@@ -1,49 +1,102 @@\n package core.basesyntax;\n \n+import java.util.NoSuchElementException;\n+\n public class ArrayList<T> implements List<T> {\n+    private static final int MAX_ITEMS_NUMBER = 10;\n+    private Object[] items = new Object[MAX_ITEMS_NUMBER];\n+    private int size = 0;\n \n     @Override\n     public void add(T value) {\n-\n+        if (size == items.length) {\n+            grow((int) (items.length * 1.5));\n+        }\n+        items[size] = value;\n+        size++;\n     }\n \n     @Override\n     public void add(T value, int index) {\n-\n+        if (size == items.length) {\n+            grow((int) (items.length * 1.5));\n+        }\n+        if (index > size || index < 0) {\n+            throw new ArrayListIndexOutOfBoundsException(\"\");\n+        }\n+        Object[] addArray = new Object[items.length];\n+        System.arraycopy(items, 0, addArray, 0, index);\n+        addArray[index] = value;\n+        System.arraycopy(items, index, addArray, index + 1, size - index);\n+        items = addArray;\n+        size++;\n     }\n \n     @Override\n     public void addAll(List<T> list) {\n-\n+        for (int i = 0; i < list.size(); i++) {\n+            add(list.get(i));\n+        }\n     }\n \n     @Override\n     public T get(int index) {\n-        return null;\n+        if (index >= size || index < 0) {\n+            throw new ArrayListIndexOutOfBoundsException(\"Index: \" + index + \" is wrong!\");\n+        }\n+        return (T) items[index];\n     }\n \n     @Override\n     public void set(T value, int index) {\n-\n+        if (index < 0 || index >= size) {\n+            throw new ArrayListIndexOutOfBoundsException(\" \");\n+        }\n+        items[index] = value;\n     }\n \n     @Override\n     public T remove(int index) {\n-        return null;\n+        if (index < 0 || index > size) {\n+            throw new ArrayListIndexOutOfBoundsException(\"\");\n+        }\n+        T removeElem = (T) items[index];\n+        System.arraycopy(items, index + 1, items, index, size - index - 1);\n+        size--;\n+        return removeElem;\n     }\n \n     @Override\n     public T remove(T element) {\n-        return null;\n+        int indexOfElem = -1;\n+        for (int i = 0; i < items.length; i++) {\n+            if (items[i] == null && element == null || items[i] != null\n+                    && items[i].equals(element)) {\n+                indexOfElem = i;\n+                break;\n+            }\n+        }\n+        if (indexOfElem == -1) {\n+            throw new NoSuchElementException(\"There there is no such element present\");\n+        }\n+        System.arraycopy(items, indexOfElem + 1, items, indexOfElem, size - indexOfElem - 1);\n+        size--;\n+        return element;\n     }\n \n     @Override\n     public int size() {\n-        return 0;\n+        return size;\n     }\n \n     @Override\n     public boolean isEmpty() {\n-        return false;\n+        return size == 0;\n+    }\n+\n+    private void grow(int newLength) {\n+        Object[] newArray = new Object[newLength];\n+        System.arraycopy(items, 0, newArray, 0, size);\n+        items = newArray;\n     }\n }"
  }
]
