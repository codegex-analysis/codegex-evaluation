[
  {
    "sha": "d93e66cf1be3a425a241ef440a5c3bf37b84b3f2",
    "filename": "projects/stage-0/user-platform/pom.xml",
    "status": "modified",
    "additions": 88,
    "deletions": 2,
    "changes": 90,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/pom.xml",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/pom.xml",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/pom.xml?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -25,7 +25,17 @@\n         <javax.ws.rs-api.version>2.0.1</javax.ws.rs-api.version>\n         <jstl.version>1.2</jstl.version>\n         <commons-lang.version>2.6</commons-lang.version>\n+        <commons-validator.version>1.7</commons-validator.version>\n+        <commons-configuration.version>1.10</commons-configuration.version>\n         <derby.version>10.1.3.1</derby.version>\n+        <hibernate.version>5.4.29.Final</hibernate.version>\n+        <hibernate.validator.version>6.1.7.Final</hibernate.validator.version>\n+\n+        <!-- MicroProfile 版本-->\n+        <microprofile-config-api.version>2.0</microprofile-config-api.version>\n+\n+        <!-- Testing 版本 -->\n+        <junit.version>4.13</junit.version>\n \n         <!-- Maven Plugins 版本 -->\n         <maven.compiler.version>3.8.1</maven.compiler.version>\n@@ -69,12 +79,61 @@\n                 <version>${commons-lang.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>commons-validator</groupId>\n+                <artifactId>commons-validator</artifactId>\n+                <version>${commons-validator.version}</version>\n+            </dependency>\n+\n+            <dependency>\n+                <groupId>commons-configuration</groupId>\n+                <artifactId>commons-configuration</artifactId>\n+                <version>${commons-configuration.version}</version>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>org.apache.derby</groupId>\n                 <artifactId>derby</artifactId>\n                 <version>${derby.version}</version>\n             </dependency>\n \n+            <!-- Hibernate ORM Core -->\n+            <dependency>\n+                <groupId>org.hibernate</groupId>\n+                <artifactId>hibernate-core</artifactId>\n+                <version>${hibernate.version}</version>\n+            </dependency>\n+\n+            <!-- Hibernate JPA support -->\n+            <dependency>\n+                <groupId>org.hibernate</groupId>\n+                <artifactId>hibernate-entitymanager</artifactId>\n+                <version>${hibernate.version}</version>\n+            </dependency>\n+\n+            <!-- Hibernate Validator -->\n+            <dependency>\n+                <groupId>org.hibernate.validator</groupId>\n+                <artifactId>hibernate-validator</artifactId>\n+                <version>${hibernate.validator.version}</version>\n+            </dependency>\n+\n+            <!-- MicroProfile -->\n+            <dependency>\n+                <groupId>org.eclipse.microprofile.config</groupId>\n+                <artifactId>microprofile-config-api</artifactId>\n+                <version>${microprofile-config-api.version}</version>\n+            </dependency>\n+\n+            <!-- JUnit -->\n+            <dependency>\n+                <groupId>junit</groupId>\n+                <artifactId>junit</artifactId>\n+                <version>${junit.version}</version>\n+                <scope>test</scope>\n+            </dependency>\n+\n+\n         </dependencies>\n \n     </dependencyManagement>\n@@ -115,8 +174,15 @@\n \n                 <plugin>\n                     <groupId>org.apache.tomcat.maven</groupId>\n-                    <artifactId>tomcat8-maven-plugin</artifactId>\n-                    <version>3.0-r1756463</version>\n+                    <artifactId>tomcat7-maven-plugin</artifactId>\n+                    <version>2.1</version>\n+                    <dependencies>\n+                        <dependency>\n+                            <groupId>org.apache.derby</groupId>\n+                            <artifactId>derby</artifactId>\n+                            <version>${derby.version}</version>\n+                        </dependency>\n+                    </dependencies>\n                     <executions>\n                         <execution>\n                             <id>tomcat-run</id>\n@@ -128,10 +194,30 @@\n                             <configuration>\n                                 <!-- ServletContext 路径 -->\n                                 <path>/</path>\n+                                <enableNaming>true</enableNaming>\n                             </configuration>\n                         </execution>\n                     </executions>\n                 </plugin>\n+                <!--                <plugin>-->\n+                <!--                    <groupId>org.apache.tomcat.maven</groupId>-->\n+                <!--                    <artifactId>tomcat8-maven-plugin</artifactId>-->\n+                <!--                    <version>3.0-r1756463</version>-->\n+                <!--                    <executions>-->\n+                <!--                        <execution>-->\n+                <!--                            <id>tomcat-run</id>-->\n+                <!--                            <goals>-->\n+                <!--                                &lt;!&ndash; 最终打包成可执行的jar包 &ndash;&gt;-->\n+                <!--                                <goal>exec-war-only</goal>-->\n+                <!--                            </goals>-->\n+                <!--                            <phase>package</phase>-->\n+                <!--                            <configuration>-->\n+                <!--                                &lt;!&ndash; ServletContext 路径 &ndash;&gt;-->\n+                <!--                                <path>/</path>-->\n+                <!--                            </configuration>-->\n+                <!--                        </execution>-->\n+                <!--                    </executions>-->\n+                <!--                </plugin>-->\n             </plugins>\n         </pluginManagement>\n "
  },
  {
    "sha": "c91ca2caed42547380f7c8424c9fd3030c609530",
    "filename": "projects/stage-0/user-platform/user-web/pom.xml",
    "status": "modified",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/pom.xml",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/pom.xml",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/pom.xml?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -22,6 +22,7 @@\n             <version>${revision}</version>\n         </dependency>\n \n+\n         <!-- Servlet API -->\n         <dependency>\n             <groupId>javax.servlet</groupId>\n@@ -34,20 +35,81 @@\n             <artifactId>jstl</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>commons-validator</groupId>\n+            <artifactId>commons-validator</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>commons-configuration</groupId>\n+            <artifactId>commons-configuration</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.apache.derby</groupId>\n             <artifactId>derby</artifactId>\n         </dependency>\n \n+        <!-- Hibernate ORM Core -->\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-core</artifactId>\n+        </dependency>\n+\n+        <!-- Hibernate ORM JPA -->\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-entitymanager</artifactId>\n+        </dependency>\n+\n+        <!-- Hibernate Validator -->\n+        <dependency>\n+            <groupId>org.hibernate.validator</groupId>\n+            <artifactId>hibernate-validator</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.el</groupId>\n+            <artifactId>javax.el-api</artifactId>\n+            <version>3.0.0</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.glassfish</groupId>\n+            <artifactId>javax.el</artifactId>\n+            <version>3.0.1-b11</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.eclipse.microprofile.config</groupId>\n+            <artifactId>microprofile-config-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n     </dependencies>\n \n     <build>\n         <plugins>\n             <!-- Tomcat Maven 插件用于构建可执行 war -->\n+            <!-- Tomcat 7.x 官方文档：\n+            http://tomcat.apache.org/tomcat-7.0-doc/index.html\n+            -->\n             <plugin>\n                 <groupId>org.apache.tomcat.maven</groupId>\n                 <artifactId>tomcat7-maven-plugin</artifactId>\n                 <version>2.1</version>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>org.apache.derby</groupId>\n+                        <artifactId>derby</artifactId>\n+                        <version>${derby.version}</version>\n+                    </dependency>\n+                </dependencies>\n                 <executions>\n                     <execution>\n                         <id>tomcat-run</id>\n@@ -59,6 +121,7 @@\n                         <configuration>\n                             <!-- ServletContext 路径 -->\n                             <path>/</path>\n+                            <enableNaming>true</enableNaming>\n                         </configuration>\n                     </execution>\n                 </executions>"
  },
  {
    "sha": "19f5cd03367185734afce6f480057fe661a125ac",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfig.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfig.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfig.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfig.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,86 @@\n+package org.geektimes.configuration.microprofile.config;\n+\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigValue;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.eclipse.microprofile.config.spi.Converter;\n+import org.geektimes.configuration.microprofile.config.converter.Converters;\n+import org.geektimes.configuration.microprofile.config.source.ConfigSources;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static java.util.stream.StreamSupport.stream;\n+\n+class DefaultConfig implements Config {\n+\n+    private final ConfigSources configSources;\n+\n+    private final Converters converters;\n+\n+    DefaultConfig(ConfigSources configSources, Converters converters) {\n+        this.configSources = configSources;\n+        this.converters = converters;\n+    }\n+\n+    @Override\n+    public <T> T getValue(String propertyName, Class<T> propertyType) {\n+        String propertyValue = getPropertyValue(propertyName);\n+        // String 转换成目标类型\n+        Converter<T> converter = doGetConverter(propertyType);\n+        return converter == null ? null : converter.convert(propertyValue);\n+    }\n+\n+    @Override\n+    public ConfigValue getConfigValue(String propertyName) {\n+        return null;\n+    }\n+\n+    protected String getPropertyValue(String propertyName) {\n+        String propertyValue = null;\n+        for (ConfigSource configSource : configSources) {\n+            propertyValue = configSource.getValue(propertyName);\n+            if (propertyValue != null) {\n+                break;\n+            }\n+        }\n+        return propertyValue;\n+    }\n+\n+    @Override\n+    public <T> Optional<T> getOptionalValue(String propertyName, Class<T> propertyType) {\n+        T value = getValue(propertyName, propertyType);\n+        return Optional.ofNullable(value);\n+    }\n+\n+    @Override\n+    public Iterable<String> getPropertyNames() {\n+        return stream(configSources.spliterator(), false)\n+                .map(ConfigSource::getPropertyNames)\n+                .collect(LinkedHashSet::new, Set::addAll, Set::addAll);\n+    }\n+\n+    @Override\n+    public Iterable<ConfigSource> getConfigSources() {\n+        return configSources;\n+    }\n+\n+    @Override\n+    public <T> Optional<Converter<T>> getConverter(Class<T> forType) {\n+        Converter converter = doGetConverter(forType);\n+        return converter == null ? Optional.empty() : Optional.of(converter);\n+    }\n+\n+    protected <T> Converter<T> doGetConverter(Class<T> forType) {\n+        List<Converter> converters = this.converters.getConverters(forType);\n+        return converters.isEmpty() ? null : converters.get(0);\n+    }\n+\n+    @Override\n+    public <T> T unwrap(Class<T> type) {\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "e15af3f11a90002a3b407f863e60f2f95826258f",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigBuilder.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigBuilder.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigBuilder.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigBuilder.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,72 @@\n+package org.geektimes.configuration.microprofile.config;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigBuilder;\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.eclipse.microprofile.config.spi.Converter;\n+import org.geektimes.configuration.microprofile.config.converter.Converters;\n+import org.geektimes.configuration.microprofile.config.source.ConfigSources;\n+\n+/**\n+ * @see {@link ConfigSources}\n+ */\n+public class DefaultConfigBuilder implements ConfigBuilder {\n+\n+    private final ConfigSources configSources;\n+\n+    private final Converters converters;\n+\n+    public DefaultConfigBuilder(ClassLoader classLoader) {\n+        this.configSources = new ConfigSources(classLoader);\n+        converters = new Converters(classLoader);\n+    }\n+\n+    @Override\n+    public ConfigBuilder addDefaultSources() {\n+        configSources.addDefaultSources();\n+        return this;\n+    }\n+\n+    @Override\n+    public ConfigBuilder addDiscoveredSources() {\n+        configSources.addDiscoveredSources();\n+        return this;\n+    }\n+\n+    @Override\n+    public ConfigBuilder addDiscoveredConverters() {\n+        converters.addDiscoveredConverters();\n+        return this;\n+    }\n+\n+    @Override\n+    public ConfigBuilder forClassLoader(ClassLoader loader) {\n+        configSources.setClassLoader(loader);\n+        converters.setClassLoader(loader);\n+        return this;\n+    }\n+\n+    @Override\n+    public ConfigBuilder withSources(ConfigSource... sources) {\n+        configSources.addConfigSources(sources);\n+        return this;\n+    }\n+\n+    @Override\n+    public ConfigBuilder withConverters(Converter<?>... converters) {\n+        this.converters.addConverters(converters);\n+        return this;\n+    }\n+\n+    @Override\n+    public <T> ConfigBuilder withConverter(Class<T> type, int priority, Converter<T> converter) {\n+        this.converters.addConverter(converter, priority, type);\n+        return this;\n+    }\n+\n+    @Override\n+    public Config build() {\n+        Config config = new DefaultConfig(configSources, converters);\n+        return config;\n+    }\n+}"
  },
  {
    "sha": "b922c016ad6d8d1e10a7b961210ee3f346da65c6",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigProviderResolver.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigProviderResolver.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigProviderResolver.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/DefaultConfigProviderResolver.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,70 @@\n+package org.geektimes.configuration.microprofile.config;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigBuilder;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+public class DefaultConfigProviderResolver extends ConfigProviderResolver {\n+\n+    private ConcurrentMap<ClassLoader, Config> configsRepository = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public Config getConfig() {\n+        return getConfig(null);\n+    }\n+\n+    @Override\n+    public Config getConfig(ClassLoader loader) {\n+        return configsRepository.computeIfAbsent(loader, this::newConfig);\n+    }\n+\n+    private ClassLoader resolveClassLoader(ClassLoader classLoader) {\n+        return classLoader == null ? this.getClass().getClassLoader() : classLoader;\n+    }\n+\n+//    private Config loadConfig(ClassLoader classLoader) {\n+//        ServiceLoader<Config> serviceLoader = ServiceLoader.load(Config.class, classLoader);\n+//        Iterator<Config> iterator = serviceLoader.iterator();\n+//        if (iterator.hasNext()) {\n+//            // 获取 Config SPI 第一个实现\n+//            return iterator.next();\n+//        }\n+//        throw new IllegalStateException(\"No Config implementation found!\");\n+//    }\n+\n+    @Override\n+    public ConfigBuilder getBuilder() {\n+        return newConfigBuilder(null);\n+    }\n+\n+    protected ConfigBuilder newConfigBuilder(ClassLoader classLoader) {\n+        return new DefaultConfigBuilder(resolveClassLoader(classLoader));\n+    }\n+\n+    protected Config newConfig(ClassLoader classLoader) {\n+        return newConfigBuilder(classLoader).build();\n+    }\n+\n+    @Override\n+    public void registerConfig(Config config, ClassLoader classLoader) {\n+        configsRepository.put(classLoader, config);\n+    }\n+\n+    @Override\n+    public void releaseConfig(Config config) {\n+        List<ClassLoader> targetKeys = new LinkedList<>();\n+        for (Map.Entry<ClassLoader, Config> entry : configsRepository.entrySet()) {\n+            if (Objects.equals(config, entry.getValue())) {\n+                targetKeys.add(entry.getKey());\n+            }\n+        }\n+        targetKeys.forEach(configsRepository::remove);\n+    }\n+}"
  },
  {
    "sha": "89c5fa6c22acd00a6db51ac7d5c7043f654424b1",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/AbstractConverter.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/AbstractConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/AbstractConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/AbstractConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,16 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+import org.eclipse.microprofile.config.spi.Converter;\n+\n+public abstract class AbstractConverter<T> implements Converter<T> {\n+\n+    @Override\n+    public T convert(String value) {\n+        if (value == null) {\n+            throw new NullPointerException(\"The value must not be null!\");\n+        }\n+        return doConvert(value);\n+    }\n+\n+    protected abstract T doConvert(String value);\n+}"
  },
  {
    "sha": "c2975ac3c67c69c3a54af989f586c24554d43290",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/BooleanConverter.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/BooleanConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/BooleanConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/BooleanConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,9 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+public class BooleanConverter extends AbstractConverter<Boolean> {\n+\n+    @Override\n+    protected Boolean doConvert(String value) {\n+        return Boolean.parseBoolean(value);\n+    }\n+}"
  },
  {
    "sha": "229e02787e73c5cc92c28d552bb3a2b5d73c3bbf",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ByteConverter.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ByteConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ByteConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ByteConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,9 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+public class ByteConverter extends AbstractConverter<Byte> {\n+\n+    @Override\n+    protected Byte doConvert(String value) {\n+        return Byte.valueOf(value);\n+    }\n+}"
  },
  {
    "sha": "035d9762f9227625dedee538109ff5f393d2194a",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/Converters.java",
    "status": "added",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/Converters.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/Converters.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/Converters.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,153 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+import org.eclipse.microprofile.config.spi.Converter;\n+\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.*;\n+\n+import static java.util.ServiceLoader.load;\n+\n+public class Converters implements Iterable<Converter> {\n+\n+    public static final int DEFAULT_PRIORITY = 100;\n+\n+    private final Map<Class<?>, PriorityQueue<PrioritizedConverter>> typedConverters = new HashMap<>();\n+\n+    private ClassLoader classLoader;\n+\n+    private boolean addedDiscoveredConverters = false;\n+\n+    public Converters() {\n+        this(Thread.currentThread().getContextClassLoader());\n+    }\n+\n+    public Converters(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    public void addDiscoveredConverters() {\n+        if (addedDiscoveredConverters) {\n+            return;\n+        }\n+        addConverters(load(Converter.class, classLoader));\n+        addedDiscoveredConverters = true;\n+    }\n+\n+    public void addConverters(Iterable<Converter> converters) {\n+        converters.forEach(this::addConverter);\n+    }\n+\n+    public void addConverter(Converter converter) {\n+        addConverter(converter, DEFAULT_PRIORITY);\n+    }\n+\n+    public void addConverter(Converter converter, int priority) {\n+        Class<?> convertedType = resolveConvertedType(converter);\n+        addConverter(converter, priority, convertedType);\n+    }\n+\n+    public void addConverter(Converter converter, int priority, Class<?> convertedType) {\n+        PriorityQueue priorityQueue = typedConverters.computeIfAbsent(convertedType, t -> new PriorityQueue<>());\n+        priorityQueue.offer(new PrioritizedConverter(converter, priority));\n+    }\n+\n+    public void setClassLoader(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    protected Class<?> resolveConvertedType(Converter<?> converter) {\n+        assertConverter(converter);\n+        Class<?> convertedType = null;\n+        Class<?> converterClass = converter.getClass();\n+        while (converterClass != null) {\n+            convertedType = resolveConvertedType(converterClass);\n+            if (convertedType != null) {\n+                break;\n+            }\n+\n+            Type superType = converterClass.getGenericSuperclass();\n+            if (superType instanceof ParameterizedType) {\n+                convertedType = resolveConvertedType(superType);\n+            }\n+\n+            if (convertedType != null) {\n+                break;\n+            }\n+            // recursively\n+            converterClass = converterClass.getSuperclass();\n+\n+        }\n+\n+        return convertedType;\n+    }\n+\n+    private void assertConverter(Converter<?> converter) {\n+        Class<?> converterClass = converter.getClass();\n+        if (converterClass.isInterface()) {\n+            throw new IllegalArgumentException(\"The implementation class of Converter must not be an interface!\");\n+        }\n+        if (Modifier.isAbstract(converterClass.getModifiers())) {\n+            throw new IllegalArgumentException(\"The implementation class of Converter must not be abstract!\");\n+        }\n+    }\n+\n+\n+    private Class<?> resolveConvertedType(Class<?> converterClass) {\n+        Class<?> convertedType = null;\n+\n+        for (Type superInterface : converterClass.getGenericInterfaces()) {\n+            convertedType = resolveConvertedType(superInterface);\n+            if (convertedType != null) {\n+                break;\n+            }\n+        }\n+\n+        return convertedType;\n+    }\n+\n+    private Class<?> resolveConvertedType(Type type) {\n+        Class<?> convertedType = null;\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType pType = (ParameterizedType) type;\n+            if (pType.getRawType() instanceof Class) {\n+                Class<?> rawType = (Class) pType.getRawType();\n+                if (Converter.class.isAssignableFrom(rawType)) {\n+                    Type[] arguments = pType.getActualTypeArguments();\n+                    if (arguments.length == 1 && arguments[0] instanceof Class) {\n+                        convertedType = (Class) arguments[0];\n+                    }\n+                }\n+            }\n+        }\n+        return convertedType;\n+    }\n+\n+    public void addConverters(Converter... converters) {\n+        addConverters(Arrays.asList(converters));\n+    }\n+\n+    public List<Converter> getConverters(Class<?> convertedType) {\n+        PriorityQueue<PrioritizedConverter> prioritizedConverters = typedConverters.get(convertedType);\n+        if (prioritizedConverters == null || prioritizedConverters.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        List<Converter> converters = new LinkedList<>();\n+        for (PrioritizedConverter prioritizedConverter : prioritizedConverters) {\n+            converters.add(prioritizedConverter.getConverter());\n+        }\n+        return converters;\n+    }\n+\n+    @Override\n+    public Iterator<Converter> iterator() {\n+        List<Converter> allConverters = new LinkedList<>();\n+        for (PriorityQueue<PrioritizedConverter> converters : typedConverters.values()) {\n+            for (PrioritizedConverter converter : converters) {\n+                allConverters.add(converter.getConverter());\n+            }\n+        }\n+        return allConverters.iterator();\n+    }\n+}"
  },
  {
    "sha": "7c9e8d549560e7165676a51b05dd7a9c5ff9eea3",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/DoubleConverter.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/DoubleConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/DoubleConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/DoubleConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,9 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+public class DoubleConverter extends AbstractConverter<Double> {\n+\n+    @Override\n+    protected Double doConvert(String value) {\n+        return Double.valueOf(value);\n+    }\n+}"
  },
  {
    "sha": "184c82064a0df3046cea6822288de3b77a8059b9",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/FloatConverter.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/FloatConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/FloatConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/FloatConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,9 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+public class FloatConverter extends AbstractConverter<Float> {\n+\n+    @Override\n+    protected Float doConvert(String value) {\n+        return Float.valueOf(value);\n+    }\n+}"
  },
  {
    "sha": "eb2c8659eebc9e80331315b648f0d23f503009e4",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/IntegerConverter.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/IntegerConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/IntegerConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/IntegerConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,9 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+public class IntegerConverter extends AbstractConverter<Integer> {\n+\n+    @Override\n+    protected Integer doConvert(String value) {\n+        return Integer.valueOf(value);\n+    }\n+}"
  },
  {
    "sha": "1cc40b48a980077a7cd115418ac627bfa5e8cdf6",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/LongConverter.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/LongConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/LongConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/LongConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,9 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+public class LongConverter extends AbstractConverter<Long> {\n+\n+    @Override\n+    protected Long doConvert(String value) {\n+        return Long.valueOf(value);\n+    }\n+}"
  },
  {
    "sha": "92eac194f8bb7dea8a84eed9c55aaf577c3d32f7",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/PrioritizedConverter.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/PrioritizedConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/PrioritizedConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/PrioritizedConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,33 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+import org.eclipse.microprofile.config.spi.Converter;\n+\n+class PrioritizedConverter<T> implements Converter<T>, Comparable<PrioritizedConverter<T>> {\n+\n+    private final Converter<T> converter;\n+\n+    private final int priority;\n+\n+    public PrioritizedConverter(Converter<T> converter, int priority) {\n+        this.converter = converter;\n+        this.priority = priority;\n+    }\n+\n+    @Override\n+    public T convert(String value) throws IllegalArgumentException, NullPointerException {\n+        return converter.convert(value);\n+    }\n+\n+    public int getPriority() {\n+        return priority;\n+    }\n+\n+    public Converter<T> getConverter() {\n+        return converter;\n+    }\n+\n+    @Override\n+    public int compareTo(PrioritizedConverter<T> other) {\n+        return Integer.compare(other.getPriority(), this.getPriority());\n+    }\n+}"
  },
  {
    "sha": "7fcf0e4560137b8e1d73f7ebfe2e9224360bc34e",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ShortConverter.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ShortConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ShortConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/ShortConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,9 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+public class ShortConverter extends AbstractConverter<Short> {\n+\n+    @Override\n+    protected Short doConvert(String value) {\n+        return Short.valueOf(value);\n+    }\n+}"
  },
  {
    "sha": "0da2a357f66b6dcab33d7428fc5f9d4dd4a61e7a",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/StringConverter.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/StringConverter.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/StringConverter.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/converter/StringConverter.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,11 @@\n+package org.geektimes.configuration.microprofile.config.converter;\n+\n+import org.eclipse.microprofile.config.spi.Converter;\n+\n+public class StringConverter implements Converter<String> {\n+\n+    @Override\n+    public String convert(String value) throws IllegalArgumentException, NullPointerException {\n+        return value;\n+    }\n+}"
  },
  {
    "sha": "5216cea7111fbf3f19c41165b7d07b3d6dec0619",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSourceOrdinalComparator.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSourceOrdinalComparator.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSourceOrdinalComparator.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSourceOrdinalComparator.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,24 @@\n+package org.geektimes.configuration.microprofile.config.source;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * {@link ConfigSource} 优先级比较器\n+ */\n+public class ConfigSourceOrdinalComparator implements Comparator<ConfigSource> {\n+\n+    /**\n+     * Singleton instance {@link ConfigSourceOrdinalComparator}\n+     */\n+    public static final Comparator<ConfigSource> INSTANCE = new ConfigSourceOrdinalComparator();\n+\n+    private ConfigSourceOrdinalComparator() {\n+    }\n+\n+    @Override\n+    public int compare(ConfigSource o1, ConfigSource o2) {\n+        return Integer.compare(o2.getOrdinal(), o1.getOrdinal());\n+    }\n+}"
  },
  {
    "sha": "8ee4d24ea1469b09ffc38c4801ec7f2e4e47eb7c",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSources.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSources.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSources.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/ConfigSources.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,95 @@\n+package org.geektimes.configuration.microprofile.config.source;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static java.util.Collections.sort;\n+import static java.util.ServiceLoader.load;\n+import static java.util.stream.Stream.of;\n+\n+public class ConfigSources implements Iterable<ConfigSource> {\n+\n+    private boolean addedDefaultConfigSources;\n+\n+    private boolean addedDiscoveredConfigSources;\n+\n+    private List<ConfigSource> configSources = new LinkedList<>();\n+\n+    private ClassLoader classLoader;\n+\n+    public ConfigSources(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    public void setClassLoader(ClassLoader classLoader) {\n+        this.classLoader = classLoader;\n+    }\n+\n+    public void addDefaultSources() {\n+        if (addedDefaultConfigSources) {\n+            return;\n+        }\n+        addConfigSources(JavaSystemPropertiesConfigSource.class,\n+                OperationSystemEnvironmentVariablesConfigSource.class,\n+                DefaultResourceConfigSource.class\n+        );\n+        addedDefaultConfigSources = true;\n+    }\n+\n+    public void addDiscoveredSources() {\n+        if (addedDiscoveredConfigSources) {\n+            return;\n+        }\n+\n+        addConfigSources(load(ConfigSource.class, classLoader));\n+        addedDiscoveredConfigSources = true;\n+    }\n+\n+    public void addConfigSources(Class<? extends ConfigSource>... configSourceClasses) {\n+        addConfigSources(\n+                of(configSourceClasses)\n+                        .map(this::newInstance)\n+                        .toArray(ConfigSource[]::new)\n+        );\n+    }\n+\n+    public void addConfigSources(ConfigSource... configSources) {\n+        addConfigSources(Arrays.asList(configSources));\n+    }\n+\n+    public void addConfigSources(Iterable<ConfigSource> configSources) {\n+        configSources.forEach(this.configSources::add);\n+        sort(this.configSources, ConfigSourceOrdinalComparator.INSTANCE);\n+    }\n+\n+    private ConfigSource newInstance(Class<? extends ConfigSource> configSourceClass) {\n+        ConfigSource instance = null;\n+        try {\n+            instance = configSourceClass.newInstance();\n+        } catch (InstantiationException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public Iterator<ConfigSource> iterator() {\n+        return configSources.iterator();\n+    }\n+\n+    public boolean isAddedDefaultConfigSources() {\n+        return addedDefaultConfigSources;\n+    }\n+\n+    public boolean isAddedDiscoveredConfigSources() {\n+        return addedDiscoveredConfigSources;\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        return classLoader;\n+    }\n+}"
  },
  {
    "sha": "54f5f6e4d59676b71e65d4705b8648369b377f47",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DefaultResourceConfigSource.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DefaultResourceConfigSource.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DefaultResourceConfigSource.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DefaultResourceConfigSource.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,33 @@\n+package org.geektimes.configuration.microprofile.config.source;\n+\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+public class DefaultResourceConfigSource extends MapBasedConfigSource {\n+\n+    private static final String configFileLocation = \"META-INF/microprofile-config.properties\";\n+\n+    private final Logger logger = Logger.getLogger(this.getClass().getName());\n+\n+    public DefaultResourceConfigSource() {\n+        super(\"Default Config File\", 100);\n+    }\n+\n+    @Override\n+    protected void prepareConfigData(Map configData) throws Throwable {\n+        ClassLoader classLoader = getClass().getClassLoader();\n+        URL resource = classLoader.getResource(configFileLocation);\n+        if (resource == null) {\n+            logger.info(\"The default config file can't be found in the classpath : \" + configFileLocation);\n+            return;\n+        }\n+        try (InputStream inputStream = resource.openStream()) {\n+            Properties properties = new Properties();\n+            properties.load(inputStream);\n+            configData.putAll(properties);\n+        }\n+    }\n+}"
  },
  {
    "sha": "0b39674e45b6a4e3e3d5ac1b1b3032e4fff3a419",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DynamicConfigSource.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DynamicConfigSource.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DynamicConfigSource.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/DynamicConfigSource.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,24 @@\n+package org.geektimes.configuration.microprofile.config.source;\n+\n+import java.util.Map;\n+\n+/**\n+ * 动态配置源\n+ */\n+public class DynamicConfigSource extends MapBasedConfigSource {\n+\n+    private Map configData;\n+\n+    public DynamicConfigSource() {\n+        super(\"DynamicConfigSource\", 500);\n+    }\n+\n+    @Override\n+    protected void prepareConfigData(Map configData) throws Throwable {\n+        this.configData = configData;\n+    }\n+\n+    public void onUpdate(String data) {\n+        // 更新（异步）\n+    }\n+}"
  },
  {
    "sha": "86428f1301d7d250b15472c761342d96e147e5ff",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/JavaSystemPropertiesConfigSource.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/JavaSystemPropertiesConfigSource.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/JavaSystemPropertiesConfigSource.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/JavaSystemPropertiesConfigSource.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,23 @@\n+package org.geektimes.configuration.microprofile.config.source;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class JavaSystemPropertiesConfigSource extends MapBasedConfigSource {\n+\n+    public JavaSystemPropertiesConfigSource() {\n+        super(\"Java System Properties\", 400);\n+    }\n+\n+    /**\n+     * Java 系统属性最好通过本地变量保存，使用 Map 保存，尽可能运行期不去调整\n+     * -Dapplication.name=user-web\n+     *\n+     * @return {@link System#getProperties()}\n+     */\n+    @Override\n+    public void prepareConfigData(Map configData){\n+        configData.putAll(System.getProperties());\n+    }\n+\n+}"
  },
  {
    "sha": "cab28f60423ade9df41dc67919d140c0b0c8a23a",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/MapBasedConfigSource.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/MapBasedConfigSource.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/MapBasedConfigSource.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/MapBasedConfigSource.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,69 @@\n+package org.geektimes.configuration.microprofile.config.source;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * 基于 Map 数据结构 {@link ConfigSource} 实现\n+ */\n+public abstract class MapBasedConfigSource implements ConfigSource {\n+\n+    private final String name;\n+\n+    private final int ordinal;\n+\n+    private final Map<String, String> source;\n+\n+    protected MapBasedConfigSource(String name, int ordinal) {\n+        this.name = name;\n+        this.ordinal = ordinal;\n+        this.source = getProperties();\n+    }\n+\n+    /**\n+     * 获取配置数据 Map\n+     *\n+     * @return 不可变 Map 类型的配置数据\n+     */\n+    public final Map<String, String> getProperties() {\n+        Map<String,String> configData = new HashMap<>();\n+        try {\n+            prepareConfigData(configData);\n+        } catch (Throwable cause) {\n+            throw new IllegalStateException(\"准备配置数据发生错误\",cause);\n+        }\n+        return Collections.unmodifiableMap(configData);\n+    }\n+\n+    /**\n+     * 准备配置数据\n+     * @param configData\n+     * @throws Throwable\n+     */\n+    protected abstract void prepareConfigData(Map configData) throws Throwable;\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public final int getOrdinal() {\n+        return ordinal;\n+    }\n+\n+    @Override\n+    public Set<String> getPropertyNames() {\n+        return source.keySet();\n+    }\n+\n+    @Override\n+    public String getValue(String propertyName) {\n+        return source.get(propertyName);\n+    }\n+\n+}"
  },
  {
    "sha": "6e8cc32651e2b21a88d8885478d11066729ffddb",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/OperationSystemEnvironmentVariablesConfigSource.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/OperationSystemEnvironmentVariablesConfigSource.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/OperationSystemEnvironmentVariablesConfigSource.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/configuration/microprofile/config/source/OperationSystemEnvironmentVariablesConfigSource.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,18 @@\n+package org.geektimes.configuration.microprofile.config.source;\n+\n+import java.util.Map;\n+\n+/**\n+ * 操作系统环境变量 ConfigSource\n+ */\n+public class OperationSystemEnvironmentVariablesConfigSource extends MapBasedConfigSource {\n+\n+    public OperationSystemEnvironmentVariablesConfigSource() {\n+        super(\"Operation System Environment Variables\", 300);\n+    }\n+\n+    @Override\n+    public void prepareConfigData(Map configData){\n+        configData.putAll(System.getenv());\n+    }\n+}"
  },
  {
    "sha": "7c3ed52a731c877dd74acf359f0b36c91f8f6293",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/context/ComponentContext.java",
    "status": "added",
    "additions": 253,
    "deletions": 0,
    "changes": 253,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/context/ComponentContext.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/context/ComponentContext.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/context/ComponentContext.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,253 @@\n+package org.geektimes.context;\n+\n+import org.geektimes.function.ThrowableAction;\n+import org.geektimes.function.ThrowableFunction;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.annotation.Resource;\n+import javax.naming.*;\n+import javax.servlet.ServletContext;\n+import java.lang.reflect.Modifier;\n+import java.util.*;\n+import java.util.logging.Logger;\n+import java.util.stream.Stream;\n+\n+/**\n+ * 组件上下文（Web 应用全局使用）\n+ */\n+public class ComponentContext {\n+\n+    public static final String CONTEXT_NAME = ComponentContext.class.getName();\n+\n+    private static final String COMPONENT_ENV_CONTEXT_NAME = \"java:comp/env\";\n+\n+    private static final Logger logger = Logger.getLogger(CONTEXT_NAME);\n+\n+    private static ServletContext servletContext; // 请注意\n+    // 假设一个 Tomcat JVM 进程，三个 Web Apps，会不会相互冲突？（不会冲突）\n+    // static 字段是 JVM 缓存吗？（是 ClassLoader 缓存）\n+\n+//    private static ApplicationContext applicationContext;\n+\n+//    public void setApplicationContext(ApplicationContext applicationContext){\n+//        ComponentContext.applicationContext = applicationContext;\n+//        WebApplicationContextUtils.getRootWebApplicationContext()\n+//    }\n+\n+    private Context envContext; // Component Env Context\n+\n+    private ClassLoader classLoader;\n+\n+    private Map<String, Object> componentsMap = new LinkedHashMap<>();\n+\n+    /**\n+     * 获取 ComponentContext\n+     *\n+     * @return\n+     */\n+    public static ComponentContext getInstance() {\n+        return (ComponentContext) servletContext.getAttribute(CONTEXT_NAME);\n+    }\n+\n+    private static void close(Context context) {\n+        if (context != null) {\n+            ThrowableAction.execute(context::close);\n+        }\n+    }\n+\n+    public void init(ServletContext servletContext) throws RuntimeException {\n+        ComponentContext.servletContext = servletContext;\n+        servletContext.setAttribute(CONTEXT_NAME, this);\n+        // 获取当前 ServletContext（WebApp）ClassLoader\n+        this.classLoader = servletContext.getClassLoader();\n+        initEnvContext();\n+        instantiateComponents();\n+        initializeComponents();\n+    }\n+\n+    /**\n+     * 实例化组件\n+     */\n+    protected void instantiateComponents() {\n+        // 遍历获取所有的组件名称\n+        List<String> componentNames = listAllComponentNames();\n+        // 通过依赖查找，实例化对象（ Tomcat BeanFactory setter 方法的执行，仅支持简单类型）\n+        componentNames.forEach(name -> componentsMap.put(name, lookupComponent(name)));\n+    }\n+\n+    /**\n+     * 初始化组件（支持 Java 标准 Commons Annotation 生命周期）\n+     * <ol>\n+     *  <li>注入阶段 - {@link Resource}</li>\n+     *  <li>初始阶段 - {@link PostConstruct}</li>\n+     *  <li>销毁阶段 - {@link PreDestroy}</li>\n+     * </ol>\n+     */\n+    protected void initializeComponents() {\n+        componentsMap.values().forEach(component -> {\n+            Class<?> componentClass = component.getClass();\n+            // 注入阶段 - {@link Resource}\n+            injectComponents(component, componentClass);\n+            // 初始阶段 - {@link PostConstruct}\n+            processPostConstruct(component, componentClass);\n+            // TODO 实现销毁阶段 - {@link PreDestroy}\n+            processPreDestroy();\n+        });\n+    }\n+\n+    private void injectComponents(Object component, Class<?> componentClass) {\n+        Stream.of(componentClass.getDeclaredFields())\n+                .filter(field -> {\n+                    int mods = field.getModifiers();\n+                    return !Modifier.isStatic(mods) &&\n+                            field.isAnnotationPresent(Resource.class);\n+                }).forEach(field -> {\n+            Resource resource = field.getAnnotation(Resource.class);\n+            String resourceName = resource.name();\n+            Object injectedObject = lookupComponent(resourceName);\n+            field.setAccessible(true);\n+            try {\n+                // 注入目标对象\n+                field.set(component, injectedObject);\n+            } catch (IllegalAccessException e) {\n+            }\n+        });\n+    }\n+\n+    private void processPostConstruct(Object component, Class<?> componentClass) {\n+        Stream.of(componentClass.getMethods())\n+                .filter(method ->\n+                        !Modifier.isStatic(method.getModifiers()) &&      // 非 static\n+                                method.getParameterCount() == 0 &&        // 没有参数\n+                                method.isAnnotationPresent(PostConstruct.class) // 标注 @PostConstruct\n+                ).forEach(method -> {\n+            // 执行目标方法\n+            try {\n+                method.invoke(component);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+\n+    private void processPreDestroy() {\n+        // TODO\n+    }\n+\n+    /**\n+     * 在 Context 中执行，通过指定 ThrowableFunction 返回计算结果\n+     *\n+     * @param function ThrowableFunction\n+     * @param <R>      返回结果类型\n+     * @return 返回\n+     * @see ThrowableFunction#apply(Object)\n+     */\n+    protected <R> R executeInContext(ThrowableFunction<Context, R> function) {\n+        return executeInContext(function, false);\n+    }\n+\n+    /**\n+     * 在 Context 中执行，通过指定 ThrowableFunction 返回计算结果\n+     *\n+     * @param function         ThrowableFunction\n+     * @param ignoredException 是否忽略异常\n+     * @param <R>              返回结果类型\n+     * @return 返回\n+     * @see ThrowableFunction#apply(Object)\n+     */\n+    protected <R> R executeInContext(ThrowableFunction<Context, R> function, boolean ignoredException) {\n+        return executeInContext(this.envContext, function, ignoredException);\n+    }\n+\n+    private <R> R executeInContext(Context context, ThrowableFunction<Context, R> function,\n+                                   boolean ignoredException) {\n+        R result = null;\n+        try {\n+            result = ThrowableFunction.execute(context, function);\n+        } catch (Throwable e) {\n+            if (ignoredException) {\n+                logger.warning(e.getMessage());\n+            } else {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public <C> C lookupComponent(String name) {\n+        return executeInContext(context -> (C) context.lookup(name));\n+    }\n+\n+    /**\n+     * 通过名称进行依赖查找\n+     *\n+     * @param name\n+     * @param <C>\n+     * @return\n+     */\n+    public <C> C getComponent(String name) {\n+        return (C) componentsMap.get(name);\n+    }\n+\n+    /**\n+     * 获取所有的组件名称\n+     *\n+     * @return\n+     */\n+    public List<String> getComponentNames() {\n+        return new ArrayList<>(componentsMap.keySet());\n+    }\n+\n+    private List<String> listAllComponentNames() {\n+        return listComponentNames(\"/\");\n+    }\n+\n+    protected List<String> listComponentNames(String name) {\n+        return executeInContext(context -> {\n+            NamingEnumeration<NameClassPair> e = executeInContext(context, ctx -> ctx.list(name), true);\n+\n+            // 目录 - Context\n+            // 节点 -\n+            if (e == null) { // 当前 JNDI 名称下没有子节点\n+                return Collections.emptyList();\n+            }\n+\n+            List<String> fullNames = new LinkedList<>();\n+            while (e.hasMoreElements()) {\n+                NameClassPair element = e.nextElement();\n+                String className = element.getClassName();\n+                Class<?> targetClass = classLoader.loadClass(className);\n+                if (Context.class.isAssignableFrom(targetClass)) {\n+                    // 如果当前名称是目录（Context 实现类）的话，递归查找\n+                    fullNames.addAll(listComponentNames(element.getName()));\n+                } else {\n+                    // 否则，当前名称绑定目标类型的话话，添加该名称到集合中\n+                    String fullName = name.startsWith(\"/\") ?\n+                            element.getName() : name + \"/\" + element.getName();\n+                    fullNames.add(fullName);\n+                }\n+            }\n+            return fullNames;\n+        });\n+    }\n+\n+    public void destroy() throws RuntimeException {\n+        close(this.envContext);\n+    }\n+\n+    private void initEnvContext() throws RuntimeException {\n+        if (this.envContext != null) {\n+            return;\n+        }\n+        Context context = null;\n+        try {\n+            context = new InitialContext();\n+            this.envContext = (Context) context.lookup(COMPONENT_ENV_CONTEXT_NAME);\n+        } catch (NamingException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            close(context);\n+        }\n+    }\n+}"
  },
  {
    "sha": "32ffd8ad6aa0d4f0a664694bd61eda88b3f4613e",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/function/ThrowableAction.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/function/ThrowableAction.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/function/ThrowableAction.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/function/ThrowableAction.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.geektimes.function;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * A function interface for action with {@link Throwable}\n+ *\n+ * @see Function\n+ * @see Throwable\n+ */\n+@FunctionalInterface\n+public interface ThrowableAction {\n+\n+    /**\n+     * Executes the action\n+     *\n+     * @throws Throwable if met with error\n+     */\n+    void execute() throws Throwable;\n+\n+    /**\n+     * Executes {@link ThrowableAction}\n+     *\n+     * @param action {@link ThrowableAction}\n+     * @throws RuntimeException wrap {@link Exception} to {@link RuntimeException}\n+     */\n+    static void execute(ThrowableAction action) throws RuntimeException {\n+        try {\n+            action.execute();\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "c309ccf0d0e32909b57608e7bc2d81ecea2fde65",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/domain/User.java",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/domain/User.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/domain/User.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/domain/User.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -1,22 +1,40 @@\n package org.geektimes.projects.user.domain;\n \n+import javax.persistence.*;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import java.io.Serializable;\n import java.util.Objects;\n \n+import static javax.persistence.GenerationType.AUTO;\n+\n /**\n  * 用户领域对象\n  *\n  * @since 1.0\n  */\n-public class User {\n+@Entity\n+@Table(name = \"users\")\n+public class User implements Serializable {\n \n+    @Id\n+    @GeneratedValue(strategy = AUTO)\n+    @NotNull\n     private Long id;\n \n+    @Column\n     private String name;\n \n+    @Column\n+    @Max(32)\n+    @Min(6)\n     private String password;\n \n+    @Column\n     private String email;\n \n+    @Column\n     private String phoneNumber;\n \n     public Long getId() {"
  },
  {
    "sha": "1629b95c7bcecbb5c61c67cd69743857953f72eb",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/enums/UserType.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/enums/UserType.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/enums/UserType.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/enums/UserType.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,15 @@\n+package org.geektimes.projects.user.enums;\n+\n+public enum UserType { // 底层实际 public final class UserType extends java.lang.Enum\n+\n+    NORMAL,\n+    VIP;\n+\n+     UserType(){ // 枚举中构造器是 private\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        UserType.VIP.ordinal();\n+    }\n+}"
  },
  {
    "sha": "c5f91ce0d047ccb5b2fd56b783ed43f63efea785",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/logging/UserWebLoggingConfiguration.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/logging/UserWebLoggingConfiguration.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/logging/UserWebLoggingConfiguration.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/logging/UserWebLoggingConfiguration.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,36 @@\n+package org.geektimes.projects.user.logging;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+\n+public class UserWebLoggingConfiguration {\n+\n+    public UserWebLoggingConfiguration() throws Exception {\n+        System.out.println(\"UserWebLoggingConfiguration\");\n+        // 通过代码的方式调整日志级别\n+        Logger logger = Logger.getLogger(\"org.geektimes\");\n+        ConsoleHandler consoleHandler = new ConsoleHandler();\n+        consoleHandler.setEncoding(\"UTF-8\");\n+        consoleHandler.setLevel(Level.WARNING);\n+        logger.addHandler(consoleHandler);\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        Logger logger = Logger.getLogger(\"org.geektimes\");\n+\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        try (InputStream inputStream = classLoader.getResourceAsStream(\"META-INF/logging.properties\")) {\n+            LogManager logManager = LogManager.getLogManager();\n+            // 读取日志配置\n+            logManager.readConfiguration(inputStream);\n+        }\n+\n+        logger.info(\"Hello,World\");\n+        logger.warning(\"2021\");\n+    }\n+}"
  },
  {
    "sha": "88726be02bbada8a696bc65113679a7786d7ca25",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/PlatformJMXMBeansDemo.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/PlatformJMXMBeansDemo.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/PlatformJMXMBeansDemo.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/PlatformJMXMBeansDemo.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,14 @@\n+package org.geektimes.projects.user.management;\n+\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+\n+public class PlatformJMXMBeansDemo {\n+\n+    public static void main(String[] args) {\n+        // 客户端去获取 ClassLoadingMXBean 对象（代理对象）\n+        ClassLoadingMXBean classLoadingMXBean = ManagementFactory.getClassLoadingMXBean();\n+\n+        classLoadingMXBean.getLoadedClassCount();\n+    }\n+}"
  },
  {
    "sha": "0aee3fca2f6292b29c74420866fadf6ae3f2c6f2",
    "filename": "projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/StandardMBeanDemo.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/renjie-zhang/geekbang-lessons/blob/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/StandardMBeanDemo.java",
    "raw_url": "https://github.com/renjie-zhang/geekbang-lessons/raw/4e80270b4ac20241e9e8848745393e5099c8c834/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/StandardMBeanDemo.java",
    "contents_url": "https://api.github.com/repos/renjie-zhang/geekbang-lessons/contents/projects/stage-0/user-platform/user-web/src/main/java/org/geektimes/projects/user/management/StandardMBeanDemo.java?ref=4e80270b4ac20241e9e8848745393e5099c8c834",
    "patch": "@@ -0,0 +1,18 @@\n+package org.geektimes.projects.user.management;\n+\n+import org.geektimes.projects.user.domain.User;\n+\n+import javax.management.MBeanInfo;\n+import javax.management.StandardMBean;\n+\n+public class StandardMBeanDemo {\n+\n+    public static void main(String[] args) throws Exception {\n+        // 将静态的 MBean 接口转化成 DynamicMBean\n+        StandardMBean standardMBean = new StandardMBean(new UserManager(new User()), UserManagerMBean.class);\n+\n+        MBeanInfo mBeanInfo = standardMBean.getMBeanInfo();\n+\n+        System.out.println(mBeanInfo);\n+    }\n+}"
  }
]
