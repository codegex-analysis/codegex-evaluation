[
  {
    "sha": "666b1e9daf2c6ff171edca70bba0006bc46e27f8",
    "filename": "fabric-recipe-api-v1/build.gradle",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/build.gradle",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/build.gradle",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/build.gradle?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,6 @@\n+archivesBaseName = \"fabric-recipe-api-v1\"\n+version = getSubprojectVersion(project, \"1.0.0\")\n+\n+moduleDependencies(project, [\n+\t\t'fabric-api-base'\n+])"
  },
  {
    "sha": "0baf968525f1242fdf1fb0f218791127c2700cdf",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeLoadingEvents.java",
    "status": "added",
    "additions": 173,
    "deletions": 0,
    "changes": 173,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeLoadingEvents.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeLoadingEvents.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeLoadingEvents.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.recipe.v1;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.recipe.Recipe;\n+import net.minecraft.recipe.RecipeType;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Represents the recipe loading events.\n+ * <p>Triggered when the recipes are loaded.</p>\n+ *\n+ * @version 1.0.0\n+ * @since 1.0.0\n+ */\n+public final class RecipeLoadingEvents {\n+\t/**\n+\t * Recipe loading event, triggered when the recipes are loaded.\n+\t */\n+\tpublic static final Event<RecipeLoadingCallback> REGISTER = EventFactory.createArrayBacked(RecipeLoadingCallback.class,\n+\t\t\tcallbacks -> handler -> {\n+\t\t\t\tfor (RecipeLoadingCallback callback : callbacks) {\n+\t\t\t\t\tcallback.onRecipeLoading(handler);\n+\t\t\t\t}\n+\t\t\t});\n+\tpublic static final Event<RecipeModifyCallback> MODIFY = EventFactory.createArrayBacked(RecipeModifyCallback.class,\n+\t\t\tcallbacks -> handler -> {\n+\t\t\t\tfor (RecipeModifyCallback callback : callbacks) {\n+\t\t\t\t\tcallback.onRecipeModify(handler);\n+\t\t\t\t}\n+\t\t\t});\n+\n+\tprivate RecipeLoadingEvents() {\n+\t\tthrow new UnsupportedOperationException(\"Someone tampered with the universe.\");\n+\t}\n+\n+\t/**\n+\t * Callback called to register additional recipes when recipes are loaded.\n+\t */\n+\t@FunctionalInterface\n+\tpublic interface RecipeLoadingCallback {\n+\t\t/**\n+\t\t * Called when recipes are loaded.\n+\t\t * <p>{@code handler} is used to add recipes into the {@linkplain net.minecraft.recipe.RecipeManager recipe manager}.</p>\n+\t\t *\n+\t\t * @param handler the recipe handler\n+\t\t */\n+\t\tvoid onRecipeLoading(RecipeHandler handler);\n+\n+\t\t/**\n+\t\t * This interface should not be extended by users.\n+\t\t */\n+\t\t@ApiStatus.NonExtendable\n+\t\tinterface RecipeHandler {\n+\t\t\t/**\n+\t\t\t * Registers a recipe into the {@link net.minecraft.recipe.RecipeManager}.\n+\t\t\t *\n+\t\t\t * <p>The recipe factory is only called if the recipe can be registered.</p>\n+\t\t\t *\n+\t\t\t * @param id      identifier of the recipe\n+\t\t\t * @param factory the recipe factory\n+\t\t\t */\n+\t\t\tvoid register(Identifier id, Function<Identifier, Recipe<?>> factory);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Callback called to modify or replace recipes after recipes are loaded.\n+\t */\n+\t@FunctionalInterface\n+\tpublic interface RecipeModifyCallback {\n+\t\t/**\n+\t\t * Called after recipes are loaded to modify and replace recipes.\n+\t\t *\n+\t\t * @param handler the recipe handler\n+\t\t */\n+\t\tvoid onRecipeModify(RecipeHandler handler);\n+\n+\t\t/**\n+\t\t * This interface should not be extended by users.\n+\t\t */\n+\t\t@ApiStatus.NonExtendable\n+\t\tinterface RecipeHandler {\n+\t\t\t/**\n+\t\t\t * Replaces a recipe in the {@link net.minecraft.recipe.RecipeManager}.\n+\t\t\t *\n+\t\t\t * @param recipe the recipe\n+\t\t\t */\n+\t\t\tvoid replace(Recipe<?> recipe);\n+\n+\t\t\t/**\n+\t\t\t * Returns the recipe type of the specified recipe.\n+\t\t\t *\n+\t\t\t * @param id the identifier of the recipe\n+\t\t\t * @return the recipe type if the recipe is present, else {@code null}\n+\t\t\t */\n+\t\t\t@Nullable RecipeType<?> getTypeOf(Identifier id);\n+\n+\t\t\t/**\n+\t\t\t * Returns whether or not the {@link net.minecraft.recipe.RecipeManager} contains the specified recipe.\n+\t\t\t *\n+\t\t\t * @param id the identifier of the recipe\n+\t\t\t * @return {@code true} if the recipe is present in the {@link net.minecraft.recipe.RecipeManager}, else {@code false}\n+\t\t\t */\n+\t\t\tboolean contains(Identifier id);\n+\n+\t\t\t/**\n+\t\t\t * Returns whether or not the {@link net.minecraft.recipe.RecipeManager} contains the specified recipe of the specified recipe type.\n+\t\t\t *\n+\t\t\t * @param id   the identifier of the recipe\n+\t\t\t * @param type the type of the recipe\n+\t\t\t * @return {@code true} if the recipe is present in the {@link net.minecraft.recipe.RecipeManager}, else {@code false}\n+\t\t\t */\n+\t\t\tboolean contains(Identifier id, RecipeType<?> type);\n+\n+\t\t\t/**\n+\t\t\t * Returns the recipe in {@link net.minecraft.recipe.RecipeManager} from its identifier.\n+\t\t\t *\n+\t\t\t * @param id the identifier of the recipe\n+\t\t\t * @return the recipe if present, else {@code null}\n+\t\t\t */\n+\t\t\t@Nullable Recipe<?> getRecipe(Identifier id);\n+\n+\t\t\t/**\n+\t\t\t * Returns the recipe of the specified recipe type in {@link net.minecraft.recipe.RecipeManager} from its identifier.\n+\t\t\t *\n+\t\t\t * @param id   the identifier of the recipe\n+\t\t\t * @param type the type of the recipe\n+\t\t\t * @return the recipe if present and of the correct type, else {@code null}\n+\t\t\t */\n+\t\t\t@Nullable <T extends Recipe<?>> T getRecipe(Identifier id, RecipeType<T> type);\n+\n+\t\t\t/**\n+\t\t\t * Returns all registered recipes.\n+\t\t\t *\n+\t\t\t * @return the registered recipes\n+\t\t\t */\n+\t\t\tMap<RecipeType<?>, Map<Identifier, Recipe<?>>> getRecipes();\n+\n+\t\t\t/**\n+\t\t\t * Returns all registered recipes of the specified type.\n+\t\t\t *\n+\t\t\t * @param type the recipe type\n+\t\t\t * @return all registered recipes of the specified type\n+\t\t\t */\n+\t\t\tCollection<Recipe<?>> getRecipesOfType(RecipeType<?> type);\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "987e0284f503d2dc9e2e9e543ec82ab4583872b6",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeManagerHelper.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeManagerHelper.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeManagerHelper.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/RecipeManagerHelper.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.recipe.v1;\n+\n+import net.minecraft.recipe.Recipe;\n+\n+import net.fabricmc.fabric.impl.recipe.RecipeManagerImpl;\n+\n+/**\n+ * Represents a helper for the {@link net.minecraft.recipe.RecipeManager}.\n+ *\n+ * @version 1.0.0\n+ * @since 1.0.0\n+ */\n+public final class RecipeManagerHelper {\n+\tprivate RecipeManagerHelper() {\n+\t\tthrow new UnsupportedOperationException(\"Someone tampered with the universe.\");\n+\t}\n+\n+\t/**\n+\t * Registers a static recipe.\n+\t * <p>A static recipe is a recipe that is registered at mod startup (or later) and is kept during the whole lifecycle\n+\t * of the game.</p>\n+\t * <p>Static recipes are automatically added to the {@linkplain net.minecraft.recipe.RecipeManager recipe manager}\n+\t * when recipes are loaded, and only is added if no other recipe with the same identifier is already registered.</p>\n+\t *\n+\t * @param recipe the recipe to register\n+\t * @return the registered recipe\n+\t * @throws IllegalStateException if another recipe with the same identifier is already registered\n+\t */\n+\tpublic static Recipe<?> registerStaticRecipe(Recipe<?> recipe) {\n+\t\tRecipeManagerImpl.registerStaticRecipe(recipe);\n+\t\treturn recipe;\n+\t}\n+\n+\t/**\n+\t * Registers a dynamic recipes provider.\n+\t * <p>The dynamic recipes provider is called when the recipes are loaded.</p>\n+\t *\n+\t * @param callback the dynamic recipes provider\n+\t */\n+\tpublic static void registerDynamicRecipes(RecipeLoadingEvents.RecipeLoadingCallback callback) {\n+\t\tRecipeLoadingEvents.REGISTER.register(callback);\n+\t}\n+\n+\t/**\n+\t * Modifies recipes in the {@link net.minecraft.recipe.RecipeManager}.\n+\t *\n+\t * @param callback the recipe modifier\n+\t */\n+\tpublic static void modifyRecipes(RecipeLoadingEvents.RecipeModifyCallback callback) {\n+\t\tRecipeLoadingEvents.MODIFY.register(callback);\n+\t}\n+}"
  },
  {
    "sha": "51c22fa3d483316bca12a100d2b6469601b1d10a",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/VanillaRecipeBuilders.java",
    "status": "added",
    "additions": 395,
    "deletions": 0,
    "changes": 395,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/VanillaRecipeBuilders.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/VanillaRecipeBuilders.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/VanillaRecipeBuilders.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.recipe.v1;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import it.unimi.dsi.fastutil.chars.Char2ObjectMap;\n+import it.unimi.dsi.fastutil.chars.Char2ObjectOpenHashMap;\n+import it.unimi.dsi.fastutil.chars.CharArraySet;\n+import it.unimi.dsi.fastutil.chars.CharSet;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemConvertible;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.recipe.BlastingRecipe;\n+import net.minecraft.recipe.CampfireCookingRecipe;\n+import net.minecraft.recipe.Ingredient;\n+import net.minecraft.recipe.ShapedRecipe;\n+import net.minecraft.recipe.ShapelessRecipe;\n+import net.minecraft.recipe.SmeltingRecipe;\n+import net.minecraft.recipe.SmokingRecipe;\n+import net.minecraft.recipe.StonecuttingRecipe;\n+import net.minecraft.tag.Tag;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.collection.DefaultedList;\n+\n+/**\n+ * Provides some recipe builders for Vanilla recipes.\n+ *\n+ * @version 1.0.0\n+ * @since 1.0.0\n+ */\n+public final class VanillaRecipeBuilders {\n+\tprivate VanillaRecipeBuilders() {\n+\t\tthrow new UnsupportedOperationException(\"Someone tampered with the universe.\");\n+\t}\n+\n+\t/**\n+\t * Returns the list of ingredients for shaped crafting recipes.\n+\t *\n+\t * @param pattern the pattern of the shaped crafting recipe\n+\t * @param keys    the keys and ingredients of the recipe\n+\t * @param width   the width of the shaped crafting recipe\n+\t * @param height  the height of the shaped crafting recipe\n+\t * @return the ingredients\n+\t * @throws IllegalStateException if a key has no assigned ingredient or if there is an ingredient but no assigned key\n+\t */\n+\tpublic static DefaultedList<Ingredient> getIngredients(String[] pattern, Char2ObjectMap<Ingredient> keys, int width, int height) {\n+\t\tDefaultedList<Ingredient> ingredients = DefaultedList.ofSize(width * height, Ingredient.EMPTY);\n+\t\tCharSet patternSet = new CharArraySet(keys.keySet());\n+\t\tpatternSet.remove(' ');\n+\n+\t\tfor (int i = 0; i < pattern.length; ++i) {\n+\t\t\tfor (int j = 0; j < pattern[i].length(); ++j) {\n+\t\t\t\tchar key = pattern[i].charAt(j);\n+\t\t\t\tIngredient ingredient = keys.get(key);\n+\n+\t\t\t\tif (ingredient == null) {\n+\t\t\t\t\tthrow new IllegalStateException(\"Pattern references symbol '\" + key + \"' but it's not defined in the key\");\n+\t\t\t\t}\n+\n+\t\t\t\tpatternSet.remove(key);\n+\t\t\t\tingredients.set(j + width * i, ingredient);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (!patternSet.isEmpty()) {\n+\t\t\tthrow new IllegalStateException(\"Key defines symbols that aren't used in pattern: \" + patternSet);\n+\t\t} else {\n+\t\t\treturn ingredients;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns a new shaped crafting recipe builder.\n+\t *\n+\t * @param pattern the pattern of the shaped crafting recipe\n+\t * @return the builder\n+\t */\n+\tpublic static ShapedRecipeBuilder shapedRecipe(String[] pattern) {\n+\t\treturn new ShapedRecipeBuilder(pattern);\n+\t}\n+\n+\t/**\n+\t * Returns a new shapeless crafting recipe builder.\n+\t *\n+\t * @param output the output stack\n+\t * @return the builder\n+\t */\n+\tpublic static ShapelessRecipeBuilder shapelessRecipe(ItemStack output) {\n+\t\treturn new ShapelessRecipeBuilder(output);\n+\t}\n+\n+\t/**\n+\t * Returns a new stone cutting recipe.\n+\t *\n+\t * @param id     the identifier of the recipe\n+\t * @param group  the group of the recipe\n+\t * @param input  the input ingredient\n+\t * @param output the output item stack\n+\t * @return the stone cutting recipe\n+\t */\n+\tpublic static StonecuttingRecipe stonecuttingRecipe(Identifier id, String group, Ingredient input, ItemStack output) {\n+\t\tif (input == Ingredient.EMPTY) throw new IllegalArgumentException(\"Input cannot be empty.\");\n+\n+\t\treturn new StonecuttingRecipe(id, group, input, output);\n+\t}\n+\n+\t/**\n+\t * Returns a new smelting recipe.\n+\t *\n+\t * @param id         the identifier of the recipe\n+\t * @param group      the group of the recipe\n+\t * @param input      the input ingredient\n+\t * @param output     the output item stack\n+\t * @param experience the experience given\n+\t * @param cookTime   the cook time in ticks\n+\t * @return the smelting recipe\n+\t */\n+\tpublic static SmeltingRecipe smeltingRecipe(Identifier id, String group, Ingredient input, ItemStack output, float experience, int cookTime) {\n+\t\tif (input == Ingredient.EMPTY) throw new IllegalArgumentException(\"Input cannot be empty.\");\n+\t\tif (cookTime < 0) throw new IllegalArgumentException(\"Cook time must be equal or greater than 0\");\n+\n+\t\treturn new SmeltingRecipe(id, group, input, output, experience, cookTime);\n+\t}\n+\n+\t/**\n+\t * Returns a new blasting recipe.\n+\t *\n+\t * @param id         the identifier of the recipe\n+\t * @param group      the group of the recipe\n+\t * @param input      the input ingredient\n+\t * @param output     the output item stack\n+\t * @param experience the experience given\n+\t * @param cookTime   the cook time in ticks\n+\t * @return the blasting recipe\n+\t */\n+\tpublic static BlastingRecipe blastingRecipe(Identifier id, String group, Ingredient input, ItemStack output, float experience, int cookTime) {\n+\t\tif (input == Ingredient.EMPTY) throw new IllegalArgumentException(\"Input cannot be empty.\");\n+\t\tif (cookTime < 0) throw new IllegalArgumentException(\"Cook time must be equal or greater than 0\");\n+\n+\t\treturn new BlastingRecipe(id, group, input, output, experience, cookTime);\n+\t}\n+\n+\t/**\n+\t * Returns a new smoking recipe.\n+\t *\n+\t * @param id         the identifier of the recipe\n+\t * @param group      the group of the recipe\n+\t * @param input      the input ingredient\n+\t * @param output     the output item stack\n+\t * @param experience the experience given\n+\t * @param cookTime   the cook time in ticks\n+\t * @return the smoking recipe\n+\t */\n+\tpublic static SmokingRecipe smokingRecipe(Identifier id, String group, Ingredient input, ItemStack output, float experience, int cookTime) {\n+\t\tif (input == Ingredient.EMPTY) throw new IllegalArgumentException(\"Input cannot be empty.\");\n+\t\tif (cookTime < 0) throw new IllegalArgumentException(\"Cook time must be equal or greater than 0\");\n+\n+\t\treturn new SmokingRecipe(id, group, input, output, experience, cookTime);\n+\t}\n+\n+\t/**\n+\t * Returns a new campfire cooking recipe.\n+\t *\n+\t * @param id         the identifier of the recipe\n+\t * @param group      the group of the recipe\n+\t * @param input      the input ingredient\n+\t * @param output     the output item stack\n+\t * @param experience the experience given\n+\t * @param cookTime   the cook time in ticks\n+\t * @return the campfire cooking recipe\n+\t */\n+\tpublic static CampfireCookingRecipe campfireCookingRecipe(Identifier id, String group, Ingredient input,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tItemStack output, float experience, int cookTime) {\n+\t\tif (input == Ingredient.EMPTY) throw new IllegalArgumentException(\"Input cannot be empty.\");\n+\t\tif (cookTime < 0) throw new IllegalArgumentException(\"Cook time must be equal or greater than 0\");\n+\n+\t\treturn new CampfireCookingRecipe(id, group, input, output, experience, cookTime);\n+\t}\n+\n+\t/**\n+\t * Represents a shaped crafting recipe builder.\n+\t */\n+\tpublic static final class ShapedRecipeBuilder {\n+\t\tprivate final String[] pattern;\n+\t\tprivate final int width;\n+\t\tprivate final int height;\n+\t\tprivate final Char2ObjectMap<Ingredient> ingredients = new Char2ObjectOpenHashMap<>();\n+\t\tprivate ItemStack output;\n+\n+\t\t/**\n+\t\t * Creates a new shaped recipe builder.\n+\t\t *\n+\t\t * @param pattern the pattern of the shaped recipe. Each string in this array is a line of ingredients.\n+\t\t *                A character represents an ingredient and space is no ingredient\n+\t\t */\n+\t\tpublic ShapedRecipeBuilder(String[] pattern) {\n+\t\t\tthis.pattern = pattern;\n+\t\t\tthis.width = pattern[0].length();\n+\t\t\tthis.height = pattern.length;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Puts the specified ingredient at the specified key.\n+\t\t *\n+\t\t * @param key        the key of the ingredient\n+\t\t * @param ingredient the ingredient\n+\t\t * @return this builder\n+\t\t */\n+\t\tpublic ShapedRecipeBuilder ingredient(char key, Ingredient ingredient) {\n+\t\t\tboolean success = false;\n+\n+\t\t\tfor (String line : pattern) {\n+\t\t\t\tfor (int i = 0; i < line.length(); i++) {\n+\t\t\t\t\tchar c = line.charAt(i);\n+\n+\t\t\t\t\tif (c == key) {\n+\t\t\t\t\t\tthis.ingredients.put(key, ingredient);\n+\n+\t\t\t\t\t\tsuccess = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (success) break;\n+\t\t\t}\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Puts the specified items as the accepted ingredient at the specified key.\n+\t\t *\n+\t\t * @param key   the key of the ingredient\n+\t\t * @param items the items as ingredient\n+\t\t * @return this builder\n+\t\t * @see #ingredient(char, Ingredient)\n+\t\t */\n+\t\tpublic ShapedRecipeBuilder ingredient(char key, ItemConvertible... items) {\n+\t\t\treturn this.ingredient(key, Ingredient.ofItems(items));\n+\t\t}\n+\n+\t\t/**\n+\t\t * Puts the specified item tag as the accepted ingredient at the specified key.\n+\t\t *\n+\t\t * @param key the key of the ingredient\n+\t\t * @param tag the item tag as ingredient\n+\t\t * @return this builder\n+\t\t * @see #ingredient(char, Ingredient)\n+\t\t */\n+\t\tpublic ShapedRecipeBuilder ingredient(char key, Tag<Item> tag) {\n+\t\t\treturn this.ingredient(key, Ingredient.fromTag(tag));\n+\t\t}\n+\n+\t\t/**\n+\t\t * Puts the specified item stacks as the accepted ingredient at the specified key.\n+\t\t *\n+\t\t * @param key    the key of the ingredient\n+\t\t * @param stacks the item stacks as ingredient\n+\t\t * @return this builder\n+\t\t * @see #ingredient(char, Ingredient)\n+\t\t */\n+\t\tpublic ShapedRecipeBuilder ingredient(char key, ItemStack... stacks) {\n+\t\t\treturn this.ingredient(key, Ingredient.ofStacks(stacks));\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the output of the shaped crafting recipe.\n+\t\t *\n+\t\t * @param stack the output item stack.\n+\t\t * @return this builder\n+\t\t */\n+\t\tpublic ShapedRecipeBuilder output(ItemStack stack) {\n+\t\t\tthis.output = stack;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Builds the shaped crafting recipe.\n+\t\t *\n+\t\t * @param id    the identifier of the recipe\n+\t\t * @param group the group of the recipe\n+\t\t * @return the shaped recipe\n+\t\t */\n+\t\tpublic ShapedRecipe build(Identifier id, String group) {\n+\t\t\tObjects.requireNonNull(this.output, \"The output stack cannot be null.\");\n+\t\t\tDefaultedList<Ingredient> ingredients = getIngredients(this.pattern, this.ingredients, this.width, this.height);\n+\t\t\treturn new ShapedRecipe(id, group, this.width, this.height, ingredients, this.output);\n+\t\t}\n+\t}\n+\n+\tpublic static final class ShapelessRecipeBuilder {\n+\t\tprivate final Set<Ingredient> ingredients = new HashSet<>();\n+\t\tprivate ItemStack output;\n+\n+\t\tpublic ShapelessRecipeBuilder(ItemStack output) {\n+\t\t\tthis.output = output;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Adds an ingredient.\n+\t\t *\n+\t\t * @param ingredient the ingredient\n+\t\t * @return this builder\n+\t\t */\n+\t\tpublic ShapelessRecipeBuilder ingredient(Ingredient ingredient) {\n+\t\t\tthis.ingredients.add(ingredient);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Puts the specified items as the accepted ingredient at the specified key.\n+\t\t *\n+\t\t * @param items the items as ingredient\n+\t\t * @return this builder\n+\t\t * @see #ingredient(Ingredient)\n+\t\t */\n+\t\tpublic ShapelessRecipeBuilder ingredient(ItemConvertible... items) {\n+\t\t\treturn this.ingredient(Ingredient.ofItems(items));\n+\t\t}\n+\n+\t\t/**\n+\t\t * Adds the specified item tag as an ingredient.\n+\t\t *\n+\t\t * @param tag the item tag as ingredient\n+\t\t * @return this builder\n+\t\t * @see #ingredient(Ingredient)\n+\t\t */\n+\t\tpublic ShapelessRecipeBuilder ingredient(Tag<Item> tag) {\n+\t\t\treturn this.ingredient(Ingredient.fromTag(tag));\n+\t\t}\n+\n+\t\t/**\n+\t\t * Adds item stacks as an ingredient.\n+\t\t *\n+\t\t * @param stacks the item stacks as ingredient\n+\t\t * @return this builder\n+\t\t * @see #ingredient(Ingredient)\n+\t\t */\n+\t\tpublic ShapelessRecipeBuilder ingredient(ItemStack... stacks) {\n+\t\t\treturn this.ingredient(Ingredient.ofStacks(stacks));\n+\t\t}\n+\n+\t\t/**\n+\t\t * Sets the output of the shapeless crafting recipe.\n+\t\t *\n+\t\t * @param stack the output item stack.\n+\t\t * @return this builder\n+\t\t */\n+\t\tpublic ShapelessRecipeBuilder output(ItemStack stack) {\n+\t\t\tthis.output = stack;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Builds the shapeless crafting recipe.\n+\t\t *\n+\t\t * @param id    the identifier of the recipe\n+\t\t * @param group the group of the recipe\n+\t\t * @return the shapeless crafting recipe\n+\t\t */\n+\t\tpublic ShapelessRecipe build(Identifier id, String group) {\n+\t\t\tObjects.requireNonNull(this.output, \"The output stack cannot be null.\");\n+\n+\t\t\tif (ingredients.size() == 0) throw new IllegalStateException(\"Cannot build a recipe without ingredients.\");\n+\n+\t\t\tDefaultedList<Ingredient> ingredients = DefaultedList.ofSize(this.ingredients.size(), Ingredient.EMPTY);\n+\t\t\tint i = 0;\n+\n+\t\t\tfor (Ingredient ingredient : this.ingredients) {\n+\t\t\t\tingredients.set(i, ingredient);\n+\t\t\t\ti++;\n+\t\t\t}\n+\n+\t\t\treturn new ShapelessRecipe(id, group, this.output, ingredients);\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "2d2eaf28cb0f933c00fb57c7294ff8da44319046",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/package-info.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/package-info.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/package-info.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/package-info.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * The Recipe API, version 1.\n+ *\n+ * <p><h3>Quick note about vocabulary in the Recipe API:</h3>\n+ * <ul>\n+ *  <li>A static recipe is a recipe which is registered in the API once and is automatically added to\n+ *  the {@linkplain net.minecraft.recipe.RecipeManager recipe manager} when recipes are loaded.</li>\n+ *  <li>A dynamic recipe is a recipe which is registered when recipes are loaded.</li>\n+ * </ul>\n+ * </p>\n+ *\n+ * <p><h3>{@link net.fabricmc.fabric.api.recipe.v1.RecipeManagerHelper RecipeManagerHelper}</h3>\n+ * The {@link net.fabricmc.fabric.api.recipe.v1.RecipeManagerHelper RecipeManagerHelper} is a helper class focused\n+ * around the {@link net.minecraft.recipe.RecipeManager}, it allows you to register static and dynamic recipes,\n+ * it also allows you to replace recipes.\n+ * </p>\n+ *\n+ * <p><h3>{@link net.fabricmc.fabric.api.recipe.v1.RecipeLoadingEvents RecipeLoadingEvents}</h3>\n+ * Contains some events to register and modify recipes.</p>\n+ */\n+\n+package net.fabricmc.fabric.api.recipe.v1;"
  },
  {
    "sha": "a7c4265f980310d64b4db5c9d2ef124adce51704",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/serializer/FabricRecipeSerializer.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/serializer/FabricRecipeSerializer.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/serializer/FabricRecipeSerializer.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/api/recipe/v1/serializer/FabricRecipeSerializer.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.recipe.v1.serializer;\n+\n+import com.google.gson.JsonObject;\n+\n+import net.minecraft.recipe.Recipe;\n+import net.minecraft.recipe.RecipeSerializer;\n+\n+/**\n+ * Represents a recipe serializer for mods to implement.\n+ * <p>This will allow serialization to JSON of recipes. Useful for recipe dumping.</p>\n+ *\n+ * @param <T> the recipe\n+ * @version 1.0.0\n+ * @since 1.0.0\n+ */\n+public interface FabricRecipeSerializer<T extends Recipe<?>> extends RecipeSerializer<T> {\n+\t/**\n+\t * Serializes the recipe to JSON.\n+\t *\n+\t * @param recipe the recipe\n+\t * @return the serialized recipe\n+\t */\n+\tJsonObject toJson(T recipe);\n+}"
  },
  {
    "sha": "a357f8bc7d26efcfcea045b18427d876ab4a1edf",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/ImmutableMapBuilderUtil.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/ImmutableMapBuilderUtil.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/ImmutableMapBuilderUtil.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/ImmutableMapBuilderUtil.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.recipe;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.ApiStatus;\n+\n+@ApiStatus.Internal\n+public final class ImmutableMapBuilderUtil {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final MethodHandle ENTRIES_GETTER;\n+\tprivate static final MethodHandle SIZE_GETTER;\n+\n+\tprivate ImmutableMapBuilderUtil() {\n+\t\tthrow new UnsupportedOperationException(\"Someone tampered with the universe.\");\n+\t}\n+\n+\tstatic {\n+\t\ttry {\n+\t\t\tField field = ImmutableMap.Builder.class.getDeclaredField(\"entries\");\n+\t\t\tfield.setAccessible(true);\n+\t\t\tENTRIES_GETTER = MethodHandles.lookup().unreflectGetter(field);\n+\t\t\tfield = ImmutableMap.Builder.class.getDeclaredField(\"size\");\n+\t\t\tfield.setAccessible(true);\n+\t\t\tSIZE_GETTER = MethodHandles.lookup().unreflectGetter(field);\n+\t\t} catch (NoSuchFieldException | IllegalAccessException e) {\n+\t\t\tLOGGER.error(\"Could not access ImmutableMap$Builder entries or size fields. Which is necessary for the Recipe API.\");\n+\t\t\tthrow new IllegalStateException(e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Builds a mutable map from an immutable map.\n+\t * <p>This exists only because a builder will throw if a value is added 2 times. And copying a map is a bit bad.</p>\n+\t *\n+\t * @param builder the builder\n+\t * @param <K>     the key type\n+\t * @param <V>     the value type\n+\t * @return a mutable map\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <K, V> Map<K, V> specialBuild(ImmutableMap.Builder<K, V> builder) {\n+\t\ttry {\n+\t\t\tMap.Entry<K, V>[] entries = (Map.Entry<K, V>[]) ENTRIES_GETTER.invoke(builder);\n+\t\t\tint size = (int) SIZE_GETTER.invoke(builder);\n+\t\t\tMap<K, V> map = new Object2ObjectOpenHashMap<>(size);\n+\n+\t\t\tfor (Map.Entry<K, V> entry : entries) {\n+\t\t\t\tif (entry == null) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tmap.put(entry.getKey(), entry.getValue());\n+\t\t\t}\n+\n+\t\t\treturn map;\n+\t\t} catch (Throwable throwable) {\n+\t\t\tLOGGER.error(\"Could not get values of ImmutableMap$Builder entries or size fields.\");\n+\t\t\tthrow new IllegalStateException(throwable);\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "8af11b294270bfd3861c262acdb9b9db5348c725",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/RecipeManagerImpl.java",
    "status": "added",
    "additions": 309,
    "deletions": 0,
    "changes": 309,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/RecipeManagerImpl.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/RecipeManagerImpl.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/impl/recipe/RecipeManagerImpl.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,309 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.recipe;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.internal.Streams;\n+import com.google.gson.stream.JsonWriter;\n+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.ApiStatus;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.recipe.Recipe;\n+import net.minecraft.recipe.RecipeManager;\n+import net.minecraft.recipe.RecipeType;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.recipe.v1.RecipeLoadingEvents;\n+import net.fabricmc.fabric.api.recipe.v1.serializer.FabricRecipeSerializer;\n+\n+@ApiStatus.Internal\n+public final class RecipeManagerImpl {\n+\t/**\n+\t * Stores the static recipes which are added to the {@link net.minecraft.recipe.RecipeManager} when recipes are\n+\t * loaded.\n+\t */\n+\tprivate static final Map<Identifier, Recipe<?>> STATIC_RECIPES = new Object2ObjectOpenHashMap<>();\n+\tprivate static final boolean DEBUG_MODE = Boolean.getBoolean(\"fabric-recipe-api-v1--debug\");\n+\tprivate static final boolean DUMP_MODE = Boolean.getBoolean(\"fabric-recipe-api-v1--dump\");\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\n+\tprivate RecipeManagerImpl() {\n+\t\tthrow new UnsupportedOperationException(\"Someone tampered with the universe.\");\n+\t}\n+\n+\tpublic static void registerStaticRecipe(Recipe<?> recipe) {\n+\t\tif (STATIC_RECIPES.putIfAbsent(recipe.getId(), recipe) != null) {\n+\t\t\tthrow new IllegalArgumentException(\"Cannot register \" + recipe.getId()\n+\t\t\t\t\t+ \" as another recipe with the same identifier already exists.\");\n+\t\t}\n+\t}\n+\n+\tpublic static void apply(Map<Identifier, JsonElement> map,\n+\t\t\t\t\t\t\tMap<RecipeType<?>, ImmutableMap.Builder<Identifier, Recipe<?>>> builderMap) {\n+\t\tRegisterRecipeHandlerImpl handler = new RegisterRecipeHandlerImpl(map, builderMap);\n+\t\tRecipeLoadingEvents.REGISTER.invoker().onRecipeLoading(handler);\n+\t\tSTATIC_RECIPES.values().forEach(handler::register);\n+\t\tLOGGER.info(\"Registered {} custom recipes.\", handler.registered);\n+\t}\n+\n+\tpublic static void applyModifications(RecipeManager recipeManager, Map<RecipeType<?>, Map<Identifier, Recipe<?>>> recipes) {\n+\t\tModifyRecipeHandlerImpl handler = new ModifyRecipeHandlerImpl(recipeManager, recipes);\n+\t\tRecipeLoadingEvents.MODIFY.invoker().onRecipeModify(handler);\n+\t\tLOGGER.info(\"Modified {} recipes.\", handler.counter);\n+\n+\t\tif (DUMP_MODE) {\n+\t\t\tdump(recipes.values());\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate static void dump(Collection<Map<Identifier, Recipe<?>>> recipes) {\n+\t\tPath debugPath = Paths.get(\"debug\", \"fabric-recipe-api-v1\").normalize();\n+\n+\t\tif (!Files.exists(debugPath)) {\n+\t\t\ttry {\n+\t\t\t\tFiles.createDirectories(debugPath);\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOGGER.error(\"Failed to create debug directory for recipe dumping.\", e);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (Map<Identifier, Recipe<?>> map : recipes) {\n+\t\t\tfor (Recipe<?> recipe : map.values()) {\n+\t\t\t\tif (!(recipe.getSerializer() instanceof FabricRecipeSerializer)) break;\n+\n+\t\t\t\tFabricRecipeSerializer<Recipe<?>> serializer = (FabricRecipeSerializer<Recipe<?>>) recipe.getSerializer();\n+\t\t\t\tJsonObject serialized = serializer.toJson(recipe);\n+\n+\t\t\t\tPath path = debugPath.resolve(recipe.getId().getNamespace() + \"/recipes/\" + recipe.getId().getPath() + \".json\");\n+\t\t\t\tPath parent = path.getParent();\n+\n+\t\t\t\tif (!Files.exists(parent)) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tFiles.createDirectories(parent);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\tLOGGER.error(\"Failed to create parent recipe directory {}. Cannot dump recipe {}.\",\n+\t\t\t\t\t\t\t\tparent, recipe.getId(), e);\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tStringWriter stringWriter = new StringWriter();\n+\t\t\t\tJsonWriter jsonWriter = new JsonWriter(stringWriter);\n+\t\t\t\tjsonWriter.setLenient(true);\n+\t\t\t\tjsonWriter.setIndent(\"  \");\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tStreams.write(serialized, jsonWriter);\n+\t\t\t\t\tFiles.write(path, stringWriter.toString().getBytes(StandardCharsets.UTF_8),\n+\t\t\t\t\t\t\tStandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tLOGGER.error(\"Failed to write JSON for recipe {}.\", recipe.getId(), e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tjsonWriter.close();\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\tLOGGER.error(\"Failed to close JSON writer for recipe {}.\", recipe.getId(), e);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static class RegisterRecipeHandlerImpl implements RecipeLoadingEvents.RecipeLoadingCallback.RecipeHandler {\n+\t\tprivate final Map<Identifier, JsonElement> resourceMap;\n+\t\tprivate final Map<RecipeType<?>, ImmutableMap.Builder<Identifier, Recipe<?>>> builderMap;\n+\t\tint registered = 0;\n+\n+\t\tprivate RegisterRecipeHandlerImpl(Map<Identifier, JsonElement> resourceMap,\n+\t\t\t\t\t\t\t\t\t\tMap<RecipeType<?>, ImmutableMap.Builder<Identifier, Recipe<?>>> builderMap) {\n+\t\t\tthis.resourceMap = resourceMap;\n+\t\t\tthis.builderMap = builderMap;\n+\t\t}\n+\n+\t\tvoid register(Recipe<?> recipe) {\n+\t\t\tif (!this.resourceMap.containsKey(recipe.getId())) {\n+\t\t\t\tImmutableMap.Builder<Identifier, Recipe<?>> recipeBuilder =\n+\t\t\t\t\t\tthis.builderMap.computeIfAbsent(recipe.getType(), o -> ImmutableMap.builder());\n+\t\t\t\trecipeBuilder.put(recipe.getId(), recipe);\n+\t\t\t\tthis.registered++;\n+\n+\t\t\t\tif (DEBUG_MODE) {\n+\t\t\t\t\tLOGGER.info(\"Added recipe {} with type {} in register phase.\", recipe.getId(), recipe.getType());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void register(Identifier id, Function<Identifier, Recipe<?>> factory) {\n+\t\t\t// Add the recipe only if nothing already provides the recipe.\n+\t\t\tif (!this.resourceMap.containsKey(id)) {\n+\t\t\t\tRecipe<?> recipe = factory.apply(id);\n+\n+\t\t\t\tif (!id.equals(recipe.getId())) {\n+\t\t\t\t\tthrow new IllegalStateException(\"The recipe \" + recipe.getId() + \" tried to be registered as \" + id);\n+\t\t\t\t}\n+\n+\t\t\t\tImmutableMap.Builder<Identifier, Recipe<?>> recipeBuilder =\n+\t\t\t\t\t\tthis.builderMap.computeIfAbsent(recipe.getType(), o -> ImmutableMap.builder());\n+\t\t\t\trecipeBuilder.put(recipe.getId(), recipe);\n+\t\t\t\tthis.registered++;\n+\n+\t\t\t\tif (DEBUG_MODE) {\n+\t\t\t\t\tLOGGER.info(\"Added recipe {} with type {} in register phase.\", id, recipe.getType());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static class ModifyRecipeHandlerImpl implements RecipeLoadingEvents.RecipeModifyCallback.RecipeHandler {\n+\t\tfinal RecipeManager recipeManager;\n+\t\tfinal Map<RecipeType<?>, Map<Identifier, Recipe<?>>> recipes;\n+\t\tint counter = 0;\n+\n+\t\tprivate ModifyRecipeHandlerImpl(RecipeManager recipeManager, Map<RecipeType<?>, Map<Identifier, Recipe<?>>> recipes) {\n+\t\t\tthis.recipeManager = recipeManager;\n+\t\t\tthis.recipes = recipes;\n+\t\t}\n+\n+\t\tprivate void add(Recipe<?> recipe) {\n+\t\t\tMap<Identifier, Recipe<?>> type = this.recipes.get(recipe.getType());\n+\n+\t\t\tif (type == null) {\n+\t\t\t\tthrow new IllegalStateException(\"The given recipe \" + recipe.getId()\n+\t\t\t\t\t\t+ \" do not have its recipe type \" + recipe.getType() + \" in the recipe manager.\");\n+\t\t\t}\n+\n+\t\t\ttype.put(recipe.getId(), recipe);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void replace(Recipe<?> recipe) {\n+\t\t\tRecipeType<?> oldType = this.getTypeOf(recipe.getId());\n+\n+\t\t\tif (oldType == null) {\n+\t\t\t\tif (DEBUG_MODE) {\n+\t\t\t\t\tLOGGER.info(\"Add new recipe {} with type {} in modify phase.\", recipe.getId(), recipe.getType());\n+\t\t\t\t}\n+\n+\t\t\t\tthis.add(recipe);\n+\t\t\t} else if (oldType == recipe.getType()) {\n+\t\t\t\tif (DEBUG_MODE) {\n+\t\t\t\t\tLOGGER.info(\"Replace recipe {} with same type {} in modify phase.\", recipe.getId(), recipe.getType());\n+\t\t\t\t}\n+\n+\t\t\t\tthis.recipes.get(oldType).put(recipe.getId(), recipe);\n+\t\t\t} else {\n+\t\t\t\tif (DEBUG_MODE) {\n+\t\t\t\t\tLOGGER.info(\"Replace new recipe {} with type {} (and old type {}) in modify phase.\",\n+\t\t\t\t\t\t\trecipe.getId(), recipe.getType(), oldType);\n+\t\t\t\t}\n+\n+\t\t\t\tthis.recipes.get(oldType).remove(recipe.getId());\n+\t\t\t\tthis.add(recipe);\n+\t\t\t}\n+\n+\t\t\tthis.counter++;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic @Nullable RecipeType<?> getTypeOf(Identifier id) {\n+\t\t\treturn this.recipes.entrySet().stream()\n+\t\t\t\t\t.filter(entry -> entry.getValue().containsKey(id))\n+\t\t\t\t\t.findFirst()\n+\t\t\t\t\t.map(Map.Entry::getKey)\n+\t\t\t\t\t.orElse(null);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean contains(Identifier id) {\n+\t\t\tfor (Map<Identifier, Recipe<?>> recipes : this.recipes.values()) {\n+\t\t\t\tif (recipes.containsKey(id)) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean contains(Identifier id, RecipeType<?> type) {\n+\t\t\tMap<Identifier, Recipe<?>> recipes = this.recipes.get(type);\n+\n+\t\t\tif (recipes == null) return false;\n+\n+\t\t\treturn recipes.containsKey(id);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic @Nullable Recipe<?> getRecipe(Identifier id) {\n+\t\t\tfor (Map<Identifier, Recipe<?>> recipes : this.recipes.values()) {\n+\t\t\t\tRecipe<?> recipe = recipes.get(id);\n+\n+\t\t\t\tif (recipe != null) {\n+\t\t\t\t\treturn recipe;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\t@Override\n+\t\tpublic <T extends Recipe<?>> @Nullable T getRecipe(Identifier id, RecipeType<T> type) {\n+\t\t\tMap<Identifier, Recipe<?>> recipes = this.recipes.get(type);\n+\n+\t\t\tif (recipes == null) return null;\n+\n+\t\t\treturn (T) recipes.get(id);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Map<RecipeType<?>, Map<Identifier, Recipe<?>>> getRecipes() {\n+\t\t\treturn this.recipes;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Collection<Recipe<?>> getRecipesOfType(RecipeType<?> type) {\n+\t\t\tMap<Identifier, Recipe<?>> recipes = this.recipes.get(type);\n+\n+\t\t\tif (recipes == null) {\n+\t\t\t\treturn ImmutableList.of();\n+\t\t\t}\n+\n+\t\t\treturn recipes.values();\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "ca799624fc10de594c8d8667f81533f08f5cfea3",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CookingRecipeSerializerMixin.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CookingRecipeSerializerMixin.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CookingRecipeSerializerMixin.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CookingRecipeSerializerMixin.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.recipe;\n+\n+import com.google.gson.JsonObject;\n+import org.spongepowered.asm.mixin.Mixin;\n+\n+import net.minecraft.data.server.recipe.CookingRecipeJsonFactory;\n+import net.minecraft.recipe.AbstractCookingRecipe;\n+import net.minecraft.recipe.CookingRecipeSerializer;\n+\n+import net.fabricmc.fabric.api.recipe.v1.serializer.FabricRecipeSerializer;\n+\n+@Mixin(CookingRecipeSerializer.class)\n+public abstract class CookingRecipeSerializerMixin<T extends AbstractCookingRecipe> implements FabricRecipeSerializer<T> {\n+\t@Override\n+\tpublic JsonObject toJson(T recipe) {\n+\t\treturn new CookingRecipeJsonFactory.CookingRecipeJsonProvider(recipe.getId(), recipe.getGroup(),\n+\t\t\t\trecipe.getPreviewInputs().get(0), recipe.getOutput().getItem(),\n+\t\t\t\trecipe.getExperience(), recipe.getCookTime(), null, null, this)\n+\t\t\t\t.toJson();\n+\t}\n+}"
  },
  {
    "sha": "c05d55a6290d71fb0894a07d5d09373198358130",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CuttingRecipeSerializerMixin.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CuttingRecipeSerializerMixin.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CuttingRecipeSerializerMixin.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/CuttingRecipeSerializerMixin.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.recipe;\n+\n+import com.google.gson.JsonObject;\n+import org.spongepowered.asm.mixin.Mixin;\n+\n+import net.minecraft.data.server.recipe.SingleItemRecipeJsonFactory.SingleItemRecipeJsonProvider;\n+import net.minecraft.recipe.CuttingRecipe;\n+\n+import net.fabricmc.fabric.api.recipe.v1.serializer.FabricRecipeSerializer;\n+\n+@Mixin(CuttingRecipe.Serializer.class)\n+public abstract class CuttingRecipeSerializerMixin<T extends CuttingRecipe> implements FabricRecipeSerializer<T> {\n+\t@Override\n+\tpublic JsonObject toJson(T recipe) {\n+\t\treturn new SingleItemRecipeJsonProvider(recipe.getId(), this, recipe.getGroup(),\n+\t\t\t\trecipe.getPreviewInputs().get(0), recipe.getOutput().getItem(), recipe.getOutput().getCount(),\n+\t\t\t\tnull, null)\n+\t\t\t\t.toJson();\n+\t}\n+}"
  },
  {
    "sha": "5e245a8f620595649609f99b747c0a70bbb27d8f",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/RecipeManagerMixin.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/RecipeManagerMixin.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/RecipeManagerMixin.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/RecipeManagerMixin.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.recipe;\n+\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.JsonElement;\n+import org.jetbrains.annotations.ApiStatus;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.recipe.Recipe;\n+import net.minecraft.recipe.RecipeManager;\n+import net.minecraft.recipe.RecipeType;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.fabricmc.fabric.impl.recipe.ImmutableMapBuilderUtil;\n+import net.fabricmc.fabric.impl.recipe.RecipeManagerImpl;\n+\n+@ApiStatus.Internal\n+@Mixin(RecipeManager.class)\n+public class RecipeManagerMixin {\n+\t@Shadow\n+\tprivate Map<RecipeType<?>, Map<Identifier, Recipe<?>>> recipes;\n+\n+\t@Inject(\n+\t\t\tmethod = \"apply\",\n+\t\t\tat = @At(value = \"INVOKE\", target = \"Ljava/util/Map;entrySet()Ljava/util/Set;\", ordinal = 1),\n+\t\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t)\n+\tprivate void onReload(Map<Identifier, JsonElement> map, ResourceManager resourceManager, Profiler profiler,\n+\t\t\t\t\t\tCallbackInfo ci, Map<RecipeType<?>, ImmutableMap.Builder<Identifier, Recipe<?>>> builderMap) {\n+\t\tRecipeManagerImpl.apply(map, builderMap);\n+\t}\n+\n+\t/**\n+\t * Synthetic method in {@link RecipeManager#apply(Map, ResourceManager, Profiler)} as an argument of {@code toImmutableMap}.\n+\t *\n+\t * @author Fabric API\n+\t * @reason Replaces immutable maps for mutable maps instead.\n+\t */\n+\t@Overwrite\n+\tprivate static Map<Identifier, Recipe<?>> method_20703(Map.Entry<RecipeType<?>, ImmutableMap.Builder<Identifier, Recipe<?>>> entry) {\n+\t\t// This is cursed. Do not look.\n+\t\treturn ImmutableMapBuilderUtil.specialBuild(entry.getValue());\n+\t}\n+\n+\t@Inject(\n+\t\t\tmethod = \"apply\",\n+\t\t\tat = @At(value = \"INVOKE\", target = \"Lorg/apache/logging/log4j/Logger;info(Ljava/lang/String;Ljava/lang/Object;)V\", remap = false)\n+\t)\n+\tprivate void onReloadEnd(Map<Identifier, JsonElement> map, ResourceManager resourceManager, Profiler profiler,\n+\t\t\t\t\t\t\tCallbackInfo ci) {\n+\t\tRecipeManagerImpl.applyModifications((RecipeManager) (Object) this, this.recipes);\n+\t}\n+}"
  },
  {
    "sha": "8179e91d7c67c96374c111e26f7658b71467a1c7",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapedRecipeSerializerMixin.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapedRecipeSerializerMixin.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapedRecipeSerializerMixin.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapedRecipeSerializerMixin.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.recipe;\n+\n+import com.google.gson.JsonObject;\n+import it.unimi.dsi.fastutil.objects.Object2CharMap;\n+import it.unimi.dsi.fastutil.objects.Object2CharOpenHashMap;\n+import org.spongepowered.asm.mixin.Mixin;\n+\n+import net.minecraft.data.server.recipe.ShapedRecipeJsonFactory;\n+import net.minecraft.recipe.Ingredient;\n+import net.minecraft.recipe.ShapedRecipe;\n+import net.minecraft.util.collection.DefaultedList;\n+\n+import net.fabricmc.fabric.api.recipe.v1.serializer.FabricRecipeSerializer;\n+\n+@Mixin(ShapedRecipe.Serializer.class)\n+public abstract class ShapedRecipeSerializerMixin implements FabricRecipeSerializer<ShapedRecipe> {\n+\t@Override\n+\tpublic JsonObject toJson(ShapedRecipe recipe) {\n+\t\tShapedRecipeJsonFactory factory = new ShapedRecipeJsonFactory(recipe.getOutput().getItem(), recipe.getOutput().getCount());\n+\n+\t\tfactory.criterion(\"dummy\", null);\n+\n+\t\tfactory.group(recipe.getGroup());\n+\n+\t\tDefaultedList<Ingredient> recipeIngredients = recipe.getPreviewInputs();\n+\t\tObject2CharMap<Ingredient> ingredients = new Object2CharOpenHashMap<>();\n+\t\tingredients.defaultReturnValue(' ');\n+\t\tchar currentChar = 'A';\n+\n+\t\tfor (Ingredient ingredient : recipeIngredients) {\n+\t\t\tif (!ingredient.isEmpty()\n+\t\t\t\t\t&& ingredients.putIfAbsent(ingredient, currentChar) == ingredients.defaultReturnValue()) {\n+\t\t\t\tcurrentChar++;\n+\t\t\t}\n+\t\t}\n+\n+\t\tStringBuilder patternLine = new StringBuilder();\n+\n+\t\tfor (int i = 0; i < recipeIngredients.size(); i++) {\n+\t\t\tif (i != 0 && i % recipe.getWidth() == 0) {\n+\t\t\t\tfactory.pattern(patternLine.toString());\n+\t\t\t\tpatternLine.setLength(0);\n+\t\t\t}\n+\n+\t\t\tIngredient ingredient = recipeIngredients.get(i);\n+\t\t\tpatternLine.append(ingredients.getChar(ingredient));\n+\t\t}\n+\n+\t\tfactory.pattern(patternLine.toString());\n+\n+\t\tingredients.forEach(((ingredient, keyName) -> factory.input(keyName, ingredient)));\n+\n+\t\tJsonObject[] root = new JsonObject[1];\n+\t\tfactory.offerTo(provider -> root[0] = provider.toJson());\n+\t\treturn root[0];\n+\t}\n+}"
  },
  {
    "sha": "8e9fc2657ac9cd6c680a4ec1d66e17b5a6b4a878",
    "filename": "fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapelessRecipeSerializerMixin.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapelessRecipeSerializerMixin.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapelessRecipeSerializerMixin.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/java/net/fabricmc/fabric/mixin/recipe/ShapelessRecipeSerializerMixin.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.recipe;\n+\n+import com.google.gson.JsonObject;\n+import org.spongepowered.asm.mixin.Mixin;\n+\n+import net.minecraft.data.server.recipe.ShapelessRecipeJsonFactory.ShapelessRecipeJsonProvider;\n+import net.minecraft.recipe.ShapelessRecipe;\n+\n+import net.fabricmc.fabric.api.recipe.v1.serializer.FabricRecipeSerializer;\n+\n+@Mixin(ShapelessRecipe.Serializer.class)\n+public abstract class ShapelessRecipeSerializerMixin implements FabricRecipeSerializer<ShapelessRecipe> {\n+\t@Override\n+\tpublic JsonObject toJson(ShapelessRecipe recipe) {\n+\t\treturn new ShapelessRecipeJsonProvider(recipe.getId(), recipe.getOutput().getItem(), recipe.getOutput().getCount(),\n+\t\t\t\trecipe.getGroup(), recipe.getPreviewInputs(), null, null).toJson();\n+\t}\n+}"
  },
  {
    "sha": "2931efbf610873c0084debb8690902b0103d27fe",
    "filename": "fabric-recipe-api-v1/src/main/resources/assets/fabric-recipe-api-v1/icon.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/resources/assets/fabric-recipe-api-v1/icon.png",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/resources/assets/fabric-recipe-api-v1/icon.png",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/resources/assets/fabric-recipe-api-v1/icon.png?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9"
  },
  {
    "sha": "fbb730e1c1d66bd98cd4a9acdc281d7fb5d20c5d",
    "filename": "fabric-recipe-api-v1/src/main/resources/fabric-recipe-api-v1.mixins.json",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/resources/fabric-recipe-api-v1.mixins.json",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/resources/fabric-recipe-api-v1.mixins.json",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/resources/fabric-recipe-api-v1.mixins.json?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,15 @@\n+{\n+  \"required\": true,\n+  \"package\": \"net.fabricmc.fabric.mixin.recipe\",\n+  \"compatibilityLevel\": \"JAVA_8\",\n+  \"mixins\": [\n+    \"CookingRecipeSerializerMixin\",\n+    \"CuttingRecipeSerializerMixin\",\n+    \"RecipeManagerMixin\",\n+    \"ShapedRecipeSerializerMixin\",\n+    \"ShapelessRecipeSerializerMixin\"\n+  ],\n+  \"injectors\": {\n+    \"defaultRequire\": 1\n+  }\n+}"
  },
  {
    "sha": "12ae0a795e8133db80eb437a9ae80966a4c634d1",
    "filename": "fabric-recipe-api-v1/src/main/resources/fabric.mod.json",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/resources/fabric.mod.json",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/main/resources/fabric.mod.json",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/main/resources/fabric.mod.json?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,28 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-recipe-api-v1\",\n+  \"name\": \"Fabric Recipe API (v1)\",\n+  \"version\": \"${version}\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"icon\": \"assets/fabric-recipe-api-v1/icon.png\",\n+  \"description\": \"Recipe API.\",\n+  \"contact\": {\n+    \"homepage\": \"https://fabricmc.net\",\n+    \"irc\": \"irc://irc.esper.net:6667/fabric\",\n+    \"issues\": \"https://github.com/FabricMC/fabric/issues\",\n+    \"sources\": \"https://github.com/FabricMC/fabric\"\n+  },\n+  \"authors\": [\n+    \"FabricMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.4.0\"\n+  },\n+  \"mixins\": [\n+    \"fabric-recipe-api-v1.mixins.json\"\n+  ],\n+  \"custom\": {\n+    \"fabric-api:module-lifecycle\": \"stable\"\n+  }\n+}"
  },
  {
    "sha": "9e62a3ee58fbc3a993e185646b0eed935f1da16d",
    "filename": "fabric-recipe-api-v1/src/testmod/java/net/fabricmc/fabric/test/recipe/RecipeApiTestMod.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/testmod/java/net/fabricmc/fabric/test/recipe/RecipeApiTestMod.java",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/testmod/java/net/fabricmc/fabric/test/recipe/RecipeApiTestMod.java",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/testmod/java/net/fabricmc/fabric/test/recipe/RecipeApiTestMod.java?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.recipe;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.tag.ItemTags;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.recipe.v1.RecipeManagerHelper;\n+import net.fabricmc.fabric.api.recipe.v1.VanillaRecipeBuilders;\n+\n+public class RecipeApiTestMod implements ModInitializer {\n+\tpublic static final String NAMESPACE = \"fabric-recipe-api-v1-testmod\";\n+\tprivate static final Random RANDOM = new Random();\n+\tprivate static final List<Item> RANDOM_ITEMS_POOL = Arrays.asList(\n+\t\t\tItems.COMMAND_BLOCK,\n+\t\t\tItems.COMMAND_BLOCK_MINECART,\n+\t\t\tItems.ELYTRA,\n+\t\t\tItems.CHAIN_COMMAND_BLOCK,\n+\t\t\tItems.REPEATING_COMMAND_BLOCK\n+\t);\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Recipe with stick -> diamond\n+\t\tRecipeManagerHelper.registerStaticRecipe(\n+\t\t\t\tVanillaRecipeBuilders.shapelessRecipe(new ItemStack(Items.DIAMOND))\n+\t\t\t\t\t\t.ingredient(Items.STICK)\n+\t\t\t\t\t\t.build(new Identifier(NAMESPACE, \"test1\"), \"\"));\n+\n+\t\tRecipeManagerHelper.registerDynamicRecipes(handler -> {\n+\t\t\thandler.register(new Identifier(NAMESPACE, \"test2\"),\n+\t\t\t\t\tid -> VanillaRecipeBuilders.shapedRecipe(new String[] {\"IG\", \"C#\"})\n+\t\t\t\t\t\t\t.ingredient('I', Items.IRON_INGOT)\n+\t\t\t\t\t\t\t.ingredient('G', Items.GOLD_INGOT)\n+\t\t\t\t\t\t\t.ingredient('C', Items.COAL)\n+\t\t\t\t\t\t\t.ingredient('#', Items.CHARCOAL)\n+\t\t\t\t\t\t\t.output(pickRandomStack())\n+\t\t\t\t\t\t\t.build(id, \"\"));\n+\t\t});\n+\n+\t\tRecipeManagerHelper.modifyRecipes(handler -> {\n+\t\t\thandler.replace(VanillaRecipeBuilders.shapelessRecipe(new ItemStack(Items.NETHER_STAR))\n+\t\t\t\t\t.ingredient(Items.ACACIA_PLANKS)\n+\t\t\t\t\t.build(new Identifier(\"acacia_button\"), \"\"));\n+\t\t\thandler.replace(VanillaRecipeBuilders.shapedRecipe(new String[] {\"A\", \"C\"})\n+\t\t\t\t\t.ingredient('A', ItemTags.PLANKS)\n+\t\t\t\t\t.ingredient('C', Items.COAL)\n+\t\t\t\t\t.output(new ItemStack(Items.NETHER_BRICK))\n+\t\t\t\t\t.build(new Identifier(\"oak_button\"), \"\"));\n+\t\t});\n+\t}\n+\n+\tprivate static ItemStack pickRandomStack() {\n+\t\tItem item = RANDOM_ITEMS_POOL.get(RANDOM.nextInt(RANDOM_ITEMS_POOL.size()));\n+\t\treturn new ItemStack(item);\n+\t}\n+}"
  },
  {
    "sha": "b267180067fa7153808ef7f7d67006230ff1c34d",
    "filename": "fabric-recipe-api-v1/src/testmod/resources/fabric.mod.json",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/testmod/resources/fabric.mod.json",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/fabric-recipe-api-v1/src/testmod/resources/fabric.mod.json",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/fabric-recipe-api-v1/src/testmod/resources/fabric.mod.json?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -0,0 +1,16 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"fabric-recipe-api-v1-testmod\",\n+  \"name\": \"Fabric Recipe API (v1) Test Mod\",\n+  \"version\": \"1.0.0\",\n+  \"environment\": \"*\",\n+  \"license\": \"Apache-2.0\",\n+  \"depends\": {\n+    \"fabric-recipe-api-v1\": \"*\"\n+  },\n+  \"entrypoints\": {\n+    \"main\": [\n+      \"net.fabricmc.fabric.test.recipe.RecipeApiTestMod\"\n+    ]\n+  }\n+}"
  },
  {
    "sha": "8c10bd7327ef7a9756068ad6e77542c3d3f30496",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/FabricMC/fabric/blob/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/settings.gradle",
    "raw_url": "https://github.com/FabricMC/fabric/raw/9ffcb9e8e2caf6fc64490102dc54999a8158d7a9/settings.gradle",
    "contents_url": "https://api.github.com/repos/FabricMC/fabric/contents/settings.gradle?ref=9ffcb9e8e2caf6fc64490102dc54999a8158d7a9",
    "patch": "@@ -41,6 +41,7 @@ include 'fabric-networking-blockentity-v0'\n include 'fabric-object-builder-api-v1'\n include 'fabric-object-builders-v0'\n include 'fabric-particles-v1'\n+include 'fabric-recipe-api-v1'\n include 'fabric-registry-sync-v0'\n include 'fabric-renderer-api-v1'\n include 'fabric-renderer-indigo'"
  }
]
