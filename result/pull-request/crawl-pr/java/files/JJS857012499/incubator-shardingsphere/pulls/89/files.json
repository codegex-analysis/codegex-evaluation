[
  {
    "sha": "5d597bbe112d0d4a7b3aab3326d71e46be225079",
    "filename": "examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalReadWriteSplittingConfiguration.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalReadWriteSplittingConfiguration.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalReadWriteSplittingConfiguration.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalReadWriteSplittingConfiguration.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -43,7 +43,7 @@ public LocalReadWriteSplittingConfiguration(final GovernanceConfiguration govern\n     @Override\n     public DataSource getDataSource() throws SQLException {\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"demo_read_write_splitting_ds\", \"demo_write_ds\", Arrays.asList(\"demo_read_ds_0\", \"demo_read_ds_1\"), null);\n+                \"demo_read_write_splitting_ds\", \"\", \"demo_write_ds\", Arrays.asList(\"demo_read_ds_0\", \"demo_read_ds_1\"), null);\n         ReadWriteSplittingRuleConfiguration ruleConfig = new ReadWriteSplittingRuleConfiguration(Collections.singleton(dataSourceConfig), Collections.emptyMap());\n         return GovernanceShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singleton(ruleConfig), new Properties(), governanceConfig);\n     }"
  },
  {
    "sha": "e21b8b7dae42ac25ccc755882b51871d96095330",
    "filename": "examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalShardingReadWriteSplittingConfiguration.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalShardingReadWriteSplittingConfiguration.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalShardingReadWriteSplittingConfiguration.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/examples/shardingsphere-jdbc-example/governance-example/governance-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/governance/raw/jdbc/config/local/LocalShardingReadWriteSplittingConfiguration.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -86,9 +86,9 @@ private static KeyGenerateStrategyConfiguration getKeyGeneratorConfiguration() {\n     \n     private ReadWriteSplittingRuleConfiguration getReadWriteSplittingRuleConfiguration() {\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfiguration1 = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"ds_0\", \"demo_write_ds_0\", Arrays.asList(\"demo_write_ds_0_read_0\", \"demo_write_ds_0_read_1\"), null);\n+                \"ds_0\", \"\", \"demo_write_ds_0\", Arrays.asList(\"demo_write_ds_0_read_0\", \"demo_write_ds_0_read_1\"), null);\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfiguration2 = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"ds_1\", \"demo_write_ds_1\", Arrays.asList(\"demo_write_ds_1_read_0\", \"demo_write_ds_1_read_1\"), null);\n+                \"ds_1\", \"\", \"demo_write_ds_1\", Arrays.asList(\"demo_write_ds_1_read_0\", \"demo_write_ds_1_read_1\"), null);\n         return new ReadWriteSplittingRuleConfiguration(Arrays.asList(dataSourceConfiguration1, dataSourceConfiguration2), Collections.emptyMap());\n     }\n     "
  },
  {
    "sha": "b5c938dfe01932431f74a621de5e760a9c2914f6",
    "filename": "examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadWriteSplittingShadowDatabasesConfiguration.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadWriteSplittingShadowDatabasesConfiguration.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadWriteSplittingShadowDatabasesConfiguration.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/examples/shardingsphere-jdbc-example/other-feature-example/shadow-example/shadow-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/shadow/table/raw/jdbc/config/ReadWriteSplittingShadowDatabasesConfiguration.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -45,7 +45,7 @@ public DataSource getDataSource() throws SQLException {\n     }\n     \n     private ReadWriteSplittingRuleConfiguration getReadWriteSplittingRuleConfiguration() {\n-        ReadWriteSplittingDataSourceRuleConfiguration config = new ReadWriteSplittingDataSourceRuleConfiguration(\"pr_ds\", \"write_ds\", Collections.singletonList(\"read_ds\"), null);\n+        ReadWriteSplittingDataSourceRuleConfiguration config = new ReadWriteSplittingDataSourceRuleConfiguration(\"pr_ds\", \"\", \"write_ds\", Collections.singletonList(\"read_ds\"), null);\n         return new ReadWriteSplittingRuleConfiguration(Collections.singletonList(config), Collections.emptyMap());\n     }\n }"
  },
  {
    "sha": "175da524cb7807e6799d26b793cf22a7f9244834",
    "filename": "examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ReadWriteSplittingConfiguration.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ReadWriteSplittingConfiguration.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ReadWriteSplittingConfiguration.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ReadWriteSplittingConfiguration.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -36,7 +36,7 @@\n     @Override\n     public DataSource getDataSource() throws SQLException {\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"demo_read_query_ds\", \"demo_write_ds\", Arrays.asList(\"demo_read_ds_0\", \"demo_read_ds_1\"), null);\n+                \"demo_read_query_ds\", \"\", \"demo_write_ds\", Arrays.asList(\"demo_read_ds_0\", \"demo_read_ds_1\"), null);\n         ReadWriteSplittingRuleConfiguration ruleConfig = new ReadWriteSplittingRuleConfiguration(Collections.singleton(dataSourceConfig), Collections.emptyMap());\n         return ShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Collections.singleton(ruleConfig), new Properties());\n     }"
  },
  {
    "sha": "519cba93a7b50724f533480d292d02199cdf1149",
    "filename": "examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationPrecise.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationPrecise.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationPrecise.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationPrecise.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -82,9 +82,9 @@ private static ShardingTableRuleConfiguration createOrderItemTableRuleConfigurat\n     \n     private static ReadWriteSplittingRuleConfiguration createReadWriteSplittingConfiguration() {\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfiguration1 = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"ds_0\", \"demo_write_ds_0\", Arrays.asList(\"demo_write_ds_0_read_0\", \"demo_write_ds_0_read_1\"), null);\n+                \"ds_0\", \"\", \"demo_write_ds_0\", Arrays.asList(\"demo_write_ds_0_read_0\", \"demo_write_ds_0_read_1\"), null);\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfiguration2 = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"ds_1\", \"demo_write_ds_1\", Arrays.asList(\"demo_write_ds_1_read_0\", \"demo_write_ds_1_read_1\"), null);\n+                \"ds_1\", \"\",\"demo_write_ds_1\", Arrays.asList(\"demo_write_ds_1_read_0\", \"demo_write_ds_1_read_1\"), null);\n         return new ReadWriteSplittingRuleConfiguration(Arrays.asList(dataSourceConfiguration1, dataSourceConfiguration2), Collections.emptyMap());\n     }\n     "
  },
  {
    "sha": "ea62bbde6e35dbe9bd7f93f4300c7352666e5496",
    "filename": "examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationRange.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationRange.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationRange.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/examples/shardingsphere-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/config/ShardingReadWriteSplittingConfigurationRange.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -83,9 +83,9 @@ private static ShardingTableRuleConfiguration createOrderItemTableRuleConfigurat\n \n     private static ReadWriteSplittingRuleConfiguration createReadWriteSplittingConfiguration() {\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfiguration1 = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"ds_0\", \"demo_write_ds_0\", Arrays.asList(\"demo_write_ds_0_read_0\", \"demo_write_ds_0_read_1\"), null);\n+                \"ds_0\", \"\", \"demo_write_ds_0\", Arrays.asList(\"demo_write_ds_0_read_0\", \"demo_write_ds_0_read_1\"), null);\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfiguration2 = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"ds_1\", \"demo_write_ds_1\", Arrays.asList(\"demo_write_ds_1_read_0\", \"demo_write_ds_1_read_1\"), null);\n+                \"ds_1\", \"\", \"demo_write_ds_1\", Arrays.asList(\"demo_write_ds_1_read_0\", \"demo_write_ds_1_read_1\"), null);\n         return new ReadWriteSplittingRuleConfiguration(Arrays.asList(dataSourceConfiguration1, dataSourceConfiguration2), Collections.emptyMap());\n     }\n     "
  },
  {
    "sha": "e80e66eba369a9255fed6b0ffdea05b8a98d3bf3",
    "filename": "shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/aware/DatabaseDiscoveryDataSourceNameAware.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/aware/DatabaseDiscoveryDataSourceNameAware.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/aware/DatabaseDiscoveryDataSourceNameAware.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/aware/DatabaseDiscoveryDataSourceNameAware.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.discovery.common.aware;\n+\n+import org.apache.shardingsphere.db.discovery.common.rule.DatabaseDiscoveryRule;\n+import org.apache.shardingsphere.infra.aware.DataSourceNameAware;\n+import org.apache.shardingsphere.infra.rule.ShardingSphereRule;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Data base discovery data source name aware.\n+ */\n+public class DatabaseDiscoveryDataSourceNameAware implements DataSourceNameAware {\n+    \n+    private DatabaseDiscoveryRule rule;\n+    \n+    @Override\n+    public void setRule(final ShardingSphereRule rule) {\n+        this.rule = (DatabaseDiscoveryRule) rule;\n+    }\n+    \n+    @Override\n+    public String getPrimaryDataSourceName(final String dataSourceName) {\n+        return rule.getDataSourceRules().get(dataSourceName).getPrimaryDataSourceName();\n+    }\n+    \n+    @Override\n+    public Collection<String> getReplicaDataSourceNames(final String dataSourceName) {\n+        return rule.getDataSourceRules().get(dataSourceName).getReplicaDataSourceNames();\n+    }\n+    \n+    @Override\n+    public String getType() {\n+        return \"database-discovery\";\n+    }\n+}"
  },
  {
    "sha": "6fc9dc40a8f784eab36fe9bfc12f61f134c94df8",
    "filename": "shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/constant/DatabaseDiscoveryOrder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/constant/DatabaseDiscoveryOrder.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/constant/DatabaseDiscoveryOrder.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/constant/DatabaseDiscoveryOrder.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -29,10 +29,10 @@\n     /**\n      * Data base discovery order.\n      */\n-    public static final int ORDER = 2;\n+    public static final int ORDER = 20;\n     \n     /**\n      * Algorithm provider data base discovery order.\n      */\n-    public static final int ALGORITHM_PROVIDER_DB_DISCOVERY_ORDER = 3;\n+    public static final int ALGORITHM_PROVIDER_DB_DISCOVERY_ORDER = 21;\n }"
  },
  {
    "sha": "dae872c4a53dcc73c7b1384340108d7c7a5933c8",
    "filename": "shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryDataSourceRule.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryDataSourceRule.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryDataSourceRule.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryDataSourceRule.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -70,6 +70,15 @@ private void checkConfiguration(final DatabaseDiscoveryDataSourceRuleConfigurati\n         return dataSourceNames.stream().filter(each -> !disabledDataSourceNames.contains(each)).collect(Collectors.toList());\n     }\n     \n+    /**\n+     * Get replica data source names.\n+     *\n+     * @return available replica data source names\n+     */\n+    public List<String> getReplicaDataSourceNames() {\n+        return dataSourceNames.stream().filter(each -> !disabledDataSourceNames.contains(each) && !primaryDataSourceName.equals(each)).collect(Collectors.toList());\n+    }\n+    \n     /**\n      * Update disabled data source names.\n      *"
  },
  {
    "sha": "857b00a40e152ad6caec393f4971971e21030112",
    "filename": "shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryRule.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryRule.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryRule.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/DatabaseDiscoveryRule.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -19,8 +19,11 @@\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;\n+import lombok.Getter;\n import org.apache.shardingsphere.db.discovery.common.algorithm.config.AlgorithmProvidedDatabaseDiscoveryRuleConfiguration;\n import org.apache.shardingsphere.db.discovery.spi.DatabaseDiscoveryType;\n+import org.apache.shardingsphere.infra.aware.DataSourceNameAware;\n+import org.apache.shardingsphere.infra.aware.DataSourceNameAwareFactory;\n import org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmFactory;\n import org.apache.shardingsphere.infra.database.type.DatabaseType;\n import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n@@ -50,10 +53,12 @@\n     \n     static {\n         ShardingSphereServiceLoader.register(DatabaseDiscoveryType.class);\n+        ShardingSphereServiceLoader.register(DataSourceNameAware.class);\n     }\n     \n     private final Map<String, DatabaseDiscoveryType> discoveryTypes = new LinkedHashMap<>();\n     \n+    @Getter\n     private final Map<String, DatabaseDiscoveryDataSourceRule> dataSourceRules;\n     \n     public DatabaseDiscoveryRule(final DatabaseDiscoveryRuleConfiguration config, final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final String schemaName) {\n@@ -84,6 +89,7 @@ public DatabaseDiscoveryRule(final DatabaseDiscoveryRuleConfiguration config, fi\n                 throw new ShardingSphereException(ex);\n             }\n         }\n+        initAware();\n     }\n     \n     public DatabaseDiscoveryRule(final AlgorithmProvidedDatabaseDiscoveryRuleConfiguration config, final DatabaseType databaseType, \n@@ -114,6 +120,12 @@ public DatabaseDiscoveryRule(final AlgorithmProvidedDatabaseDiscoveryRuleConfigu\n                 throw new ShardingSphereException(ex);\n             }\n         }\n+        initAware();\n+    }\n+    \n+    private void initAware() {\n+        Optional<DataSourceNameAware> awareOptional = DataSourceNameAwareFactory.getInstance().getDataSourceNameAware();\n+        awareOptional.ifPresent(dataSourceNameAware -> dataSourceNameAware.setRule(this));\n     }\n     \n     /**"
  },
  {
    "sha": "8998505daa00c83f90e0f2c8e5d2e65cd1f64a31",
    "filename": "shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/biulder/DatabaseDiscoveryRuleBuilder.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/biulder/DatabaseDiscoveryRuleBuilder.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/biulder/DatabaseDiscoveryRuleBuilder.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/java/org/apache/shardingsphere/db/discovery/common/rule/biulder/DatabaseDiscoveryRuleBuilder.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -27,9 +27,8 @@\n import org.apache.shardingsphere.infra.rule.builder.aware.ResourceAware;\n \n import javax.sql.DataSource;\n-import java.util.HashSet;\n+import java.util.HashMap;\n import java.util.Map;\n-import java.util.Set;\n \n /**\n  * Data base discovery rule builder.\n@@ -45,12 +44,13 @@\n     \n     @Override\n     public DatabaseDiscoveryRule build(final DatabaseDiscoveryRuleConfiguration ruleConfig) {\n-        Set<String> dataSourceSet = new HashSet<>(128, 1);\n+        Map<String, DataSource> realDataSourceMap = new HashMap<>();\n         for (DatabaseDiscoveryDataSourceRuleConfiguration each : ruleConfig.getDataSources()) {\n-            dataSourceSet.addAll(each.getDataSourceNames());\n+            for (String datasourceName : each.getDataSourceNames()) {\n+                realDataSourceMap.put(datasourceName, dataSourceMap.get(datasourceName));\n+            }\n         }\n-        dataSourceMap.entrySet().removeIf(entry -> !dataSourceSet.contains(entry.getKey()));\n-        return new DatabaseDiscoveryRule(ruleConfig, databaseType, dataSourceMap, schemaName);\n+        return new DatabaseDiscoveryRule(ruleConfig, databaseType, realDataSourceMap, schemaName);\n     }\n     \n     @Override\n@@ -62,4 +62,5 @@ public int getOrder() {\n     public Class<DatabaseDiscoveryRuleConfiguration> getTypeClass() {\n         return DatabaseDiscoveryRuleConfiguration.class;\n     }\n+    \n }"
  },
  {
    "sha": "3be03ed97f7ad147788907a08d7be6f405524c94",
    "filename": "shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.aware.DataSourceNameAware",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.aware.DataSourceNameAware",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.aware.DataSourceNameAware",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-db-discovery/shardingsphere-db-discovery-common/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.aware.DataSourceNameAware?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -0,0 +1,18 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.apache.shardingsphere.db.discovery.common.aware.DatabaseDiscoveryDataSourceNameAware"
  },
  {
    "sha": "022d62b2dbd954c2dff19fe153e789870cbcb44b",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-api/src/main/java/org/apache/shardingsphere/readwrite/splitting/api/rule/ReadWriteSplittingDataSourceRuleConfiguration.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-api/src/main/java/org/apache/shardingsphere/readwrite/splitting/api/rule/ReadWriteSplittingDataSourceRuleConfiguration.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-api/src/main/java/org/apache/shardingsphere/readwrite/splitting/api/rule/ReadWriteSplittingDataSourceRuleConfiguration.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-api/src/main/java/org/apache/shardingsphere/readwrite/splitting/api/rule/ReadWriteSplittingDataSourceRuleConfiguration.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -31,6 +31,8 @@\n     \n     private final String name;\n     \n+    private final String autoAwareDataSourceName;\n+    \n     private final String writeDataSourceName;\n     \n     private final List<String> readDataSourceNames;"
  },
  {
    "sha": "7e8b729f72777b9a4143d20b9c3d8188993e6a94",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRule.java",
    "status": "modified",
    "additions": 20,
    "deletions": 4,
    "changes": 24,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRule.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRule.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRule.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -21,6 +21,8 @@\n import com.google.common.base.Strings;\n import lombok.AccessLevel;\n import lombok.Getter;\n+import org.apache.shardingsphere.infra.aware.DataSourceNameAware;\n+import org.apache.shardingsphere.infra.aware.DataSourceNameAwareFactory;\n import org.apache.shardingsphere.readwrite.splitting.api.rule.ReadWriteSplittingDataSourceRuleConfiguration;\n import org.apache.shardingsphere.readwrite.splitting.spi.ReplicaLoadBalanceAlgorithm;\n \n@@ -30,6 +32,7 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n /**\n@@ -40,6 +43,8 @@\n     \n     private final String name;\n     \n+    private final String autoAwareDataSourceName;\n+    \n     private final String writeDataSourceName;\n     \n     private final List<String> readDataSourceNames;\n@@ -52,15 +57,18 @@\n     public ReadWriteSplittingDataSourceRule(final ReadWriteSplittingDataSourceRuleConfiguration config, final ReplicaLoadBalanceAlgorithm loadBalancer) {\n         checkConfiguration(config);\n         name = config.getName();\n+        autoAwareDataSourceName = config.getAutoAwareDataSourceName();\n         writeDataSourceName = config.getWriteDataSourceName();\n         readDataSourceNames = config.getReadDataSourceNames();\n         this.loadBalancer = loadBalancer;\n     }\n     \n     private void checkConfiguration(final ReadWriteSplittingDataSourceRuleConfiguration config) {\n         Preconditions.checkArgument(!Strings.isNullOrEmpty(config.getName()), \"Name is required.\");\n-        Preconditions.checkArgument(!Strings.isNullOrEmpty(config.getWriteDataSourceName()), \"Write data source name is required.\");\n-        Preconditions.checkArgument(null != config.getReadDataSourceNames() && !config.getReadDataSourceNames().isEmpty(), \"Read data source names are required.\");\n+        if (Strings.isNullOrEmpty(config.getAutoAwareDataSourceName())) {\n+            Preconditions.checkArgument(!Strings.isNullOrEmpty(config.getWriteDataSourceName()), \"Write data source name is required.\");\n+            Preconditions.checkArgument(null != config.getReadDataSourceNames() && !config.getReadDataSourceNames().isEmpty(), \"Read data source names are required.\");\n+        }\n     }\n     \n     /**\n@@ -94,8 +102,16 @@ public void updateDisabledDataSourceNames(final String dataSourceName, final boo\n     public Map<String, Collection<String>> getDataSourceMapper() {\n         Map<String, Collection<String>> result = new HashMap<>(1, 1);\n         Collection<String> actualDataSourceNames = new LinkedList<>();\n-        actualDataSourceNames.add(writeDataSourceName);\n-        actualDataSourceNames.addAll(readDataSourceNames);\n+        if (Strings.isNullOrEmpty(autoAwareDataSourceName)) {\n+            actualDataSourceNames.add(writeDataSourceName);\n+            actualDataSourceNames.addAll(readDataSourceNames);\n+        } else {\n+            Optional<DataSourceNameAware> dataSourceNameAware = DataSourceNameAwareFactory.getInstance().getDataSourceNameAware();\n+            if (dataSourceNameAware.isPresent()) {\n+                actualDataSourceNames.add(dataSourceNameAware.get().getPrimaryDataSourceName(autoAwareDataSourceName));\n+                actualDataSourceNames.addAll(dataSourceNameAware.get().getReplicaDataSourceNames(autoAwareDataSourceName));\n+            }\n+        }\n         result.put(name, actualDataSourceNames);\n         return result;\n     }"
  },
  {
    "sha": "4b652f3819c3c1d3100efc639cb8574249e9cf61",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/config/rule/YamlReadWriteSplittingDataSourceRuleConfiguration.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/config/rule/YamlReadWriteSplittingDataSourceRuleConfiguration.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/config/rule/YamlReadWriteSplittingDataSourceRuleConfiguration.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/config/rule/YamlReadWriteSplittingDataSourceRuleConfiguration.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -34,6 +34,8 @@\n     \n     private String name;\n     \n+    private String autoAwareDataSourceName;\n+    \n     private String writeDataSourceName;\n     \n     private List<String> readDataSourceNames = new ArrayList<>();"
  },
  {
    "sha": "9367e9417b053d0cf59401d84936c873bd9c15e1",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -51,6 +51,7 @@ public YamlReadWriteSplittingRuleConfiguration swapToYamlConfiguration(final Alg\n     private YamlReadWriteSplittingDataSourceRuleConfiguration swapToYamlConfiguration(final ReadWriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig) {\n         YamlReadWriteSplittingDataSourceRuleConfiguration result = new YamlReadWriteSplittingDataSourceRuleConfiguration();\n         result.setName(dataSourceRuleConfig.getName());\n+        result.setAutoAwareDataSourceName(dataSourceRuleConfig.getAutoAwareDataSourceName());\n         result.setWriteDataSourceName(dataSourceRuleConfig.getWriteDataSourceName());\n         result.setReadDataSourceNames(dataSourceRuleConfig.getReadDataSourceNames());\n         result.setLoadBalancerName(dataSourceRuleConfig.getLoadBalancerName());\n@@ -69,7 +70,7 @@ public AlgorithmProvidedReadWriteSplittingRuleConfiguration swapToObject(final Y\n     }\n     \n     private ReadWriteSplittingDataSourceRuleConfiguration swapToObject(final String name, final YamlReadWriteSplittingDataSourceRuleConfiguration yamlDataSourceRuleConfig) {\n-        return new ReadWriteSplittingDataSourceRuleConfiguration(name, \n+        return new ReadWriteSplittingDataSourceRuleConfiguration(name, yamlDataSourceRuleConfig.getAutoAwareDataSourceName(),\n                 yamlDataSourceRuleConfig.getWriteDataSourceName(), yamlDataSourceRuleConfig.getReadDataSourceNames(), yamlDataSourceRuleConfig.getLoadBalancerName());\n     }\n     "
  },
  {
    "sha": "db372335a72a28a8b10ed4a27632db2ef6936650",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapper.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapper.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/main/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapper.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -55,6 +55,7 @@ public YamlReadWriteSplittingRuleConfiguration swapToYamlConfiguration(final Rea\n     private YamlReadWriteSplittingDataSourceRuleConfiguration swapToYamlConfiguration(final ReadWriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig) {\n         YamlReadWriteSplittingDataSourceRuleConfiguration result = new YamlReadWriteSplittingDataSourceRuleConfiguration();\n         result.setName(dataSourceRuleConfig.getName());\n+        result.setAutoAwareDataSourceName(dataSourceRuleConfig.getAutoAwareDataSourceName());\n         result.setWriteDataSourceName(dataSourceRuleConfig.getWriteDataSourceName());\n         result.setReadDataSourceNames(dataSourceRuleConfig.getReadDataSourceNames());\n         result.setLoadBalancerName(dataSourceRuleConfig.getLoadBalancerName());\n@@ -75,7 +76,7 @@ public ReadWriteSplittingRuleConfiguration swapToObject(final YamlReadWriteSplit\n     }\n     \n     private ReadWriteSplittingDataSourceRuleConfiguration swapToObject(final String name, final YamlReadWriteSplittingDataSourceRuleConfiguration yamlDataSourceRuleConfig) {\n-        return new ReadWriteSplittingDataSourceRuleConfiguration(name, \n+        return new ReadWriteSplittingDataSourceRuleConfiguration(name, yamlDataSourceRuleConfig.getAutoAwareDataSourceName(),\n                 yamlDataSourceRuleConfig.getWriteDataSourceName(), yamlDataSourceRuleConfig.getReadDataSourceNames(), yamlDataSourceRuleConfig.getLoadBalancerName());\n     }\n     "
  },
  {
    "sha": "5b0a0349c2dffd4302c1083eaa05466deb06e45e",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRuleTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRuleTest.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRuleTest.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingDataSourceRuleTest.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -34,27 +34,27 @@\n public final class ReadWriteSplittingDataSourceRuleTest {\n     \n     private final ReadWriteSplittingDataSourceRule readWriteSplittingDataSourceRule = new ReadWriteSplittingDataSourceRule(\n-            new ReadWriteSplittingDataSourceRuleConfiguration(\"test_pr\", \"write_ds\", Arrays.asList(\"read_ds_0\", \"read_ds_1\"), \"random\"), new RandomReplicaLoadBalanceAlgorithm());\n+            new ReadWriteSplittingDataSourceRuleConfiguration(\"test_pr\", \"\", \"write_ds\", Arrays.asList(\"read_ds_0\", \"read_ds_1\"), \"random\"), new RandomReplicaLoadBalanceAlgorithm());\n     \n     @Test(expected = IllegalArgumentException.class)\n     public void assertNewReadWriteSplittingDataSourceRuleWithoutName() {\n-        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"\", \"write_ds\", Collections.singletonList(\"read_ds\"), null), \n+        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"\", \"\", \"write_ds\", Collections.singletonList(\"read_ds\"), null), \n                 new RoundRobinReplicaLoadBalanceAlgorithm());\n     }\n     \n     @Test(expected = IllegalArgumentException.class)\n     public void assertNewReadWriteSplittingDataSourceRuleWithoutPrimaryDataSourceName() {\n-        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"\", Collections.singletonList(\"read_ds\"), null), new RoundRobinReplicaLoadBalanceAlgorithm());\n+        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"\", \"\", Collections.singletonList(\"read_ds\"), null), new RoundRobinReplicaLoadBalanceAlgorithm());\n     }\n     \n     @Test(expected = IllegalArgumentException.class)\n     public void assertNewReadWriteSplittingDataSourceRuleWithNullReadDataSourceName() {\n-        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"write_ds\", null, null), new RoundRobinReplicaLoadBalanceAlgorithm());\n+        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"\", \"write_ds\", null, null), new RoundRobinReplicaLoadBalanceAlgorithm());\n     }\n     \n     @Test(expected = IllegalArgumentException.class)\n     public void assertNewReadWriteSplittingDataSourceRuleWithEmptyReadDataSourceName() {\n-        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"write_ds\", Collections.emptyList(), null), new RoundRobinReplicaLoadBalanceAlgorithm());\n+        new ReadWriteSplittingDataSourceRule(new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"\", \"write_ds\", Collections.emptyList(), null), new RoundRobinReplicaLoadBalanceAlgorithm());\n     }\n     \n     @Test"
  },
  {
    "sha": "d17ea6069759164d9cc60418137d5c5888914331",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingRuleTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingRuleTest.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingRuleTest.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/ReadWriteSplittingRuleTest.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -56,7 +56,7 @@ public void assertGetSingleDataSourceRule() {\n     \n     private ReadWriteSplittingRule createReadWriteSplittingRule() {\n         ReadWriteSplittingDataSourceRuleConfiguration config = \n-                new ReadWriteSplittingDataSourceRuleConfiguration(\"test_pr\", \"write_ds\", Arrays.asList(\"read_ds_0\", \"read_ds_1\"), \"random\");\n+                new ReadWriteSplittingDataSourceRuleConfiguration(\"test_pr\", \"\", \"write_ds\", Arrays.asList(\"read_ds_0\", \"read_ds_1\"), \"random\");\n         return new ReadWriteSplittingRule(new ReadWriteSplittingRuleConfiguration(\n                 Collections.singleton(config), ImmutableMap.of(\"random\", new ShardingSphereAlgorithmConfiguration(\"RANDOM\", new Properties()))));\n     }"
  },
  {
    "sha": "b44ccc1a2fb150ea4e59d724c583fb0e048fb86e",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/AlgorithmProvidedReadWriteSplittingRuleBuilderTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/AlgorithmProvidedReadWriteSplittingRuleBuilderTest.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/AlgorithmProvidedReadWriteSplittingRuleBuilderTest.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/AlgorithmProvidedReadWriteSplittingRuleBuilderTest.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -43,7 +43,7 @@\n     public void assertBuild() {\n         AlgorithmProvidedReadWriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock(AlgorithmProvidedReadWriteSplittingRuleConfiguration.class);\n         ReadWriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"name\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n+                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n         when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig));\n         ShardingSphereRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(\n                 Collections.singletonList(algorithmProvidedRuleConfig), ShardingSphereRuleBuilder.class).get(algorithmProvidedRuleConfig);"
  },
  {
    "sha": "fdc88d39d849ca6afaaad7ac09a7de27c3bc94ab",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/ReadWriteSplittingRuleBuilderTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/ReadWriteSplittingRuleBuilderTest.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/ReadWriteSplittingRuleBuilderTest.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/rule/biulder/ReadWriteSplittingRuleBuilderTest.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -43,7 +43,7 @@\n     public void assertBuild() {\n         ReadWriteSplittingRuleConfiguration ruleConfig = mock(ReadWriteSplittingRuleConfiguration.class);\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceRuleConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\n-                \"name\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n+                \"name\", \"pr_ds\", \"writeDataSourceName\", Collections.singletonList(\"name\"), \"loadBalancerName\");\n         when(ruleConfig.getDataSources()).thenReturn(Collections.singletonList(dataSourceRuleConfig));\n         ShardingSphereRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(Collections.singletonList(ruleConfig), ShardingSphereRuleBuilder.class).get(ruleConfig);\n         assertThat(builder.build(ruleConfig), instanceOf(ReadWriteSplittingRule.class));"
  },
  {
    "sha": "75949461767e85694ef9ddee03b316c2f9e8d02f",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapperTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapperTest.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapperTest.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleAlgorithmProviderConfigurationYamlSwapperTest.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -84,7 +84,7 @@ public void assertGetOrder() {\n     }\n     \n     private YamlReadWriteSplittingRuleConfiguration createYamlReadWriteSplittingRuleConfiguration() {\n-        ReadWriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\"name\", \"writeDataSourceName\",\n+        ReadWriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\"name\", \"\", \"writeDataSourceName\",\n                 Collections.singletonList(\"readDataSourceName\"), \"loadBalancerName\");\n         return swapper.swapToYamlConfiguration(\n                 new AlgorithmProvidedReadWriteSplittingRuleConfiguration(Collections.singletonList(ruleConfig), ImmutableMap.of(\"name\", new RandomReplicaLoadBalanceAlgorithm())));"
  },
  {
    "sha": "d73af315e6bfaff91bfabb2f468fd36235c3271e",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapperTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapperTest.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapperTest.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-common/src/test/java/org/apache/shardingsphere/readwrite/splitting/common/yaml/swapper/ReadWriteSplittingRuleConfigurationYamlSwapperTest.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -50,7 +50,7 @@\n     @Test\n     public void assertSwapToYamlWithLoadBalanceAlgorithm() {\n         ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfig = \n-                new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"write\", Collections.singletonList(\"read\"), \"roundRobin\");\n+                new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"\", \"write\", Collections.singletonList(\"read\"), \"roundRobin\");\n         YamlReadWriteSplittingRuleConfiguration actual = getReplicaQueryRuleConfigurationYamlSwapper().swapToYamlConfiguration(new ReadWriteSplittingRuleConfiguration(\n                 Collections.singleton(dataSourceConfig), ImmutableMap.of(\"roundRobin\", new ShardingSphereAlgorithmConfiguration(\"ROUND_ROBIN\", new Properties()))));\n         assertThat(actual.getDataSources().get(\"ds\").getName(), is(\"ds\"));\n@@ -61,7 +61,7 @@ public void assertSwapToYamlWithLoadBalanceAlgorithm() {\n     \n     @Test\n     public void assertSwapToYamlWithoutLoadBalanceAlgorithm() {\n-        ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"write\", Collections.singletonList(\"read\"), null);\n+        ReadWriteSplittingDataSourceRuleConfiguration dataSourceConfig = new ReadWriteSplittingDataSourceRuleConfiguration(\"ds\", \"\", \"write\", Collections.singletonList(\"read\"), null);\n         YamlReadWriteSplittingRuleConfiguration actual = getReplicaQueryRuleConfigurationYamlSwapper().swapToYamlConfiguration(\n                 new ReadWriteSplittingRuleConfiguration(Collections.singleton(dataSourceConfig), Collections.emptyMap()));\n         assertThat(actual.getDataSources().get(\"ds\").getName(), is(\"ds\"));"
  },
  {
    "sha": "72c0817448f8e9ef3855f2bb1f1d91c611b28082",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/main/java/org/apache/shardingsphere/readwrite/splitting/route/engine/impl/ReadWriteSplittingDataSourceRouter.java",
    "status": "modified",
    "additions": 24,
    "deletions": 1,
    "changes": 25,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/main/java/org/apache/shardingsphere/readwrite/splitting/route/engine/impl/ReadWriteSplittingDataSourceRouter.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/main/java/org/apache/shardingsphere/readwrite/splitting/route/engine/impl/ReadWriteSplittingDataSourceRouter.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/main/java/org/apache/shardingsphere/readwrite/splitting/route/engine/impl/ReadWriteSplittingDataSourceRouter.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -17,13 +17,20 @@\n \n package org.apache.shardingsphere.readwrite.splitting.route.engine.impl;\n \n+import com.google.common.base.Strings;\n import lombok.RequiredArgsConstructor;\n+import org.apache.shardingsphere.infra.aware.DataSourceNameAware;\n+import org.apache.shardingsphere.infra.aware.DataSourceNameAwareFactory;\n import org.apache.shardingsphere.infra.hint.HintManager;\n import org.apache.shardingsphere.readwrite.splitting.common.rule.ReadWriteSplittingDataSourceRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.SelectStatement;\n import org.apache.shardingsphere.sql.parser.sql.dialect.handler.dml.SelectStatementHandler;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Optional;\n+\n /**\n  * Data source router for read write splitting.\n  */\n@@ -41,7 +48,23 @@\n     public String route(final SQLStatement sqlStatement) {\n         if (isPrimaryRoute(sqlStatement)) {\n             PrimaryVisitedManager.setPrimaryVisited();\n-            return rule.getWriteDataSourceName();\n+            String autoAwareDataSourceName = rule.getAutoAwareDataSourceName();\n+            if (Strings.isNullOrEmpty(autoAwareDataSourceName)) {\n+                return rule.getWriteDataSourceName();\n+            }\n+            Optional<DataSourceNameAware> dataSourceNameAware = DataSourceNameAwareFactory.getInstance().getDataSourceNameAware();\n+            if (dataSourceNameAware.isPresent()) {\n+                return dataSourceNameAware.get().getPrimaryDataSourceName(autoAwareDataSourceName);\n+            }\n+        }\n+        String autoAwareDataSourceName = rule.getAutoAwareDataSourceName();\n+        if (Strings.isNullOrEmpty(autoAwareDataSourceName)) {\n+            return rule.getLoadBalancer().getDataSource(rule.getName(), rule.getWriteDataSourceName(), rule.getReadDataSourceNames());\n+        }\n+        Optional<DataSourceNameAware> dataSourceNameAware = DataSourceNameAwareFactory.getInstance().getDataSourceNameAware();\n+        if (dataSourceNameAware.isPresent()) {\n+            Collection<String> replicaDataSourceNames = dataSourceNameAware.get().getReplicaDataSourceNames(autoAwareDataSourceName);\n+            return rule.getLoadBalancer().getDataSource(rule.getName(), rule.getWriteDataSourceName(), new ArrayList<>(replicaDataSourceNames));\n         }\n         return rule.getLoadBalancer().getDataSource(rule.getName(), rule.getWriteDataSourceName(), rule.getReadDataSourceNames());\n     }"
  },
  {
    "sha": "51215a78f2ac21fb204d250b5ef79acf39a3d077",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/test/java/org/apache/shardingsphere/readwrite/splitting/route/engine/ReadWriteSplittingSQLRouterTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/test/java/org/apache/shardingsphere/readwrite/splitting/route/engine/ReadWriteSplittingSQLRouterTest.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/test/java/org/apache/shardingsphere/readwrite/splitting/route/engine/ReadWriteSplittingSQLRouterTest.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-route/src/test/java/org/apache/shardingsphere/readwrite/splitting/route/engine/ReadWriteSplittingSQLRouterTest.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -81,7 +81,7 @@\n     @Before\n     public void setUp() {\n         rule = new ReadWriteSplittingRule(new ReadWriteSplittingRuleConfiguration(Collections.singleton(\n-                new ReadWriteSplittingDataSourceRuleConfiguration(DATASOURCE_NAME, WRITE_DATASOURCE, Collections.singletonList(READ_DATASOURCE), null)), Collections.emptyMap()));\n+                new ReadWriteSplittingDataSourceRuleConfiguration(DATASOURCE_NAME, \"\", WRITE_DATASOURCE, Collections.singletonList(READ_DATASOURCE), null)), Collections.emptyMap()));\n         sqlRouter = (ReadWriteSplittingSQLRouter) OrderedSPIRegistry.getRegisteredServices(Collections.singleton(rule), SQLRouter.class).get(rule);\n     }\n     "
  },
  {
    "sha": "d4d89ab465f29a85b6ab95e88a27ab2b98efbdf2",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/parser/ReadWriteSplittingRuleBeanDefinitionParser.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/parser/ReadWriteSplittingRuleBeanDefinitionParser.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/parser/ReadWriteSplittingRuleBeanDefinitionParser.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/parser/ReadWriteSplittingRuleBeanDefinitionParser.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -60,6 +60,7 @@ protected AbstractBeanDefinition parseInternal(final Element element, final Pars\n     private BeanDefinition parseReadWriteSplittingDataSourceRuleConfiguration(final Element element) {\n         BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ReadWriteSplittingDataSourceRuleConfiguration.class);\n         factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.READ_WRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE));\n+        factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.AUTO_AWARE_DATA_SOURCE_NAME));\n         factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.WRITE_DATA_SOURCE_NAME_ATTRIBUTE));\n         factory.addConstructorArgValue(parseReplicaDataSourcesRef(element));\n         factory.addConstructorArgValue(element.getAttribute(ReadWriteSplittingRuleBeanDefinitionTag.LOAD_BALANCE_ALGORITHM_REF_ATTRIBUTE));"
  },
  {
    "sha": "4d4a1dac2d541d0517b351732589ac849ccdf90a",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/tag/ReadWriteSplittingRuleBeanDefinitionTag.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/tag/ReadWriteSplittingRuleBeanDefinitionTag.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/tag/ReadWriteSplittingRuleBeanDefinitionTag.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/java/org/apache/shardingsphere/readwrite/splitting/spring/namespace/tag/ReadWriteSplittingRuleBeanDefinitionTag.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -32,6 +32,8 @@\n     \n     public static final String READ_WRITE_SPLITTING_DATA_SOURCE_ID_ATTRIBUTE = \"id\";\n     \n+    public static final String AUTO_AWARE_DATA_SOURCE_NAME = \"auto-aware-data-source-name\";\n+    \n     public static final String WRITE_DATA_SOURCE_NAME_ATTRIBUTE = \"write-data-source-name\";\n     \n     public static final String READ_DATA_SOURCE_NAMES_ATTRIBUTE = \"read-data-source-names\";"
  },
  {
    "sha": "867a42d100c9a6be5feb1d5a5fb33d5c30a90dca",
    "filename": "shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/resources/META-INF/namespace/read-write-splitting.xsd",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/resources/META-INF/namespace/read-write-splitting.xsd",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/resources/META-INF/namespace/read-write-splitting.xsd",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-features/shardingsphere-read-write-splitting/shardingsphere-read-write-splitting-spring/shardingsphere-read-write-splitting-spring-namespace/src/main/resources/META-INF/namespace/read-write-splitting.xsd?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -31,10 +31,11 @@\n             <xsd:attribute name=\"id\" type=\"xsd:string\" use=\"required\" />\n         </xsd:complexType>\n     </xsd:element>\n-    \n+\n     <xsd:element name=\"data-source-rule\">\n         <xsd:complexType>\n             <xsd:attribute name=\"id\" type=\"xsd:string\" use=\"required\" />\n+            <xsd:attribute name=\"auto-aware-data-source-name\" type=\"xsd:string\"/>\n             <xsd:attribute name=\"write-data-source-name\" type=\"xsd:string\" use=\"required\" />\n             <xsd:attribute name=\"read-data-source-names\" type=\"xsd:string\" use=\"required\" />\n             <xsd:attribute name=\"load-balance-algorithm-ref\" type=\"xsd:string\" />"
  },
  {
    "sha": "ed3b8ef3df0b26323ce60745d7559b0d7c9a57b7",
    "filename": "shardingsphere-governance/shardingsphere-governance-core/src/main/java/org/apache/shardingsphere/governance/core/registry/checker/AbstractReadWriteSplittingRuleConfigurationChecker.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-governance/shardingsphere-governance-core/src/main/java/org/apache/shardingsphere/governance/core/registry/checker/AbstractReadWriteSplittingRuleConfigurationChecker.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-governance/shardingsphere-governance-core/src/main/java/org/apache/shardingsphere/governance/core/registry/checker/AbstractReadWriteSplittingRuleConfigurationChecker.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-governance/shardingsphere-governance-core/src/main/java/org/apache/shardingsphere/governance/core/registry/checker/AbstractReadWriteSplittingRuleConfigurationChecker.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -18,6 +18,7 @@\n package org.apache.shardingsphere.governance.core.registry.checker;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n import org.apache.shardingsphere.infra.config.RuleConfiguration;\n import org.apache.shardingsphere.readwrite.splitting.api.rule.ReadWriteSplittingDataSourceRuleConfiguration;\n \n@@ -31,7 +32,11 @@\n public abstract class AbstractReadWriteSplittingRuleConfigurationChecker<T extends RuleConfiguration> implements RuleConfigurationChecker<T> {\n     \n     protected void checkDataSources(final String schemaName, final Collection<ReadWriteSplittingDataSourceRuleConfiguration> dataSources) {\n-        dataSources.forEach(each -> Preconditions.checkState(\n-                !each.getWriteDataSourceName().isEmpty(), \"No available read-write-splitting rule configuration in `%s` for governance.\", schemaName));\n+        dataSources.forEach(each -> {\n+            if (Strings.isNullOrEmpty(each.getAutoAwareDataSourceName())) {\n+                Preconditions.checkState(\n+                        !each.getWriteDataSourceName().isEmpty(), \"No available read-write-splitting rule configuration in `%s` for governance.\", schemaName);\n+            }\n+        });\n     }\n }"
  },
  {
    "sha": "6c86b4a2c097fd75a51a3ec40174a80d073cabc8",
    "filename": "shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/audit/SQLCheckEngine.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/JJS857012499/incubator-shardingsphere/blob/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/audit/SQLCheckEngine.java",
    "raw_url": "https://github.com/JJS857012499/incubator-shardingsphere/raw/b1e86074473ddb909daf17af6bc1189089d134e0/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/audit/SQLCheckEngine.java",
    "contents_url": "https://api.github.com/repos/JJS857012499/incubator-shardingsphere/contents/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/audit/SQLCheckEngine.java?ref=b1e86074473ddb909daf17af6bc1189089d134e0",
    "patch": "@@ -34,6 +34,8 @@\n @NoArgsConstructor(access = AccessLevel.PRIVATE)\n public final class SQLCheckEngine {\n     \n+    private static final Collection<SQLChecker> AUDITORS = OrderedSPIRegistry.getRegisteredServices(SQLChecker.class);\n+    \n     static {\n         ShardingSphereServiceLoader.register(SQLChecker.class);\n     }\n@@ -47,8 +49,7 @@\n      * @param auth auth\n      */\n     public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final ShardingSphereMetaData metaData, final Authentication auth) {\n-        Collection<SQLChecker> auditors = OrderedSPIRegistry.getRegisteredServices(SQLChecker.class);\n-        for (SQLChecker each : auditors) {\n+        for (SQLChecker each : AUDITORS) {\n             SQLCheckResult auditResult = each.check(sqlStatement, parameters, metaData, auth);\n             if (!auditResult.isPassed()) {\n                 throw new SQLCheckException(each.getSQLCheckType(), auditResult.getErrorMessage());"
  }
]
