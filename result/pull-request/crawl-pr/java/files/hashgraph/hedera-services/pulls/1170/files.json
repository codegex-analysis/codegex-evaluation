[
  {
    "sha": "e83fca1664f3c2993e4bf9d40d3c6d88df8d9c7e",
    "filename": "docs/scheduled-transactions/revised-spec.md",
    "status": "added",
    "additions": 217,
    "deletions": 0,
    "changes": 217,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/docs/scheduled-transactions/revised-spec.md",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/docs/scheduled-transactions/revised-spec.md",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/docs/scheduled-transactions/revised-spec.md?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -0,0 +1,217 @@\n+# Scheduled transactions \n+\n+An ordinary transaction must be submitted to the network with the signatures \n+of enough Ed25519 keys to activate all the Hedera keys required to sign it. \n+Otherwise it will resolve to `INVALID_SIGNATURE`. \n+\n+Here we describe a new kind of _scheduled_ transaction that is not directly \n+submitted to the network, but rather created as part of a _schedule entity_ in \n+the network's action queue. An Ed25519 key \"signs\" a scheduled transaction\n+by signing an ordinary transaction that either creates or affirms the \n+schedule entity.\n+\n+Along with a scheduled transaction, a schedule entity (or simply _schedule_) also contains,\n+  1. An optional memo. \n+  2. An optional admin key that can be used to delete the schedule.\n+  3. An optional account to be charged the service fee for the scheduled transaction.\n+  4. A list of the Ed25519 keys that the network deems to have signed the scheduled transaction.\n+\n+The schedule entity type is managed by four new HAPI operations,\n+  1. The `ScheduleCreate` transaction creates a new schedule (possibly with a non-empty list of signing keys).\n+  2. The `ScheduleSign` transaction adds one or more Ed25519 keys to a schedule's list of affirmed signers.\n+  3. The `ScheduleDelete` transaction marks a schedule as deleted; its transaction will not be executed.\n+  4. The `GetScheduleInfo` query gets the current state of a schedule.\n+\n+It is important to understand that the bytes of the inner scheduled transaction are never \n+directly signed by an Ed25519 key. Only `ScheduleCreate` or `ScheduleSign` bytes\n+are ever signed, in the ordinary way. \n+\n+## Ready-to-execute status\n+\n+A scheduled transaction is _ready-to-execute_ if its schedule has a list of \n+Ed25519 signing keys which, taken together, meet the _signing requirements_ of all the\n+Hedera keys _prerequisite_ to the scheduled transaction. (See the \n+[next section](#prerequisite-signing-keys) for more discussion on prerequisite keys.)\n+\n+Because Hedera keys can include key lists and threshold keys, sometimes there are \n+many different lists of Ed25519 signing keys which could meet a Hedera key's signing \n+requirements. \n+\n+For example, suppose Alice has an account whose key is a 1-of-3 threshold made up of \n+Ed25519 keys `KeyA`, `KeyB`, and `KeyC`.  As long as any of `KeyA`, `KeyB`, or `KeyC` have signed, \n+the signing requirement for the Hedera key on Alice's account is met.\n+\n+(We often say a Hedera key has \"signed a transaction\" when enough Ed25519 keys\n+have signed to meet the Hedera key's signing requirements; but notice this is \n+a bit imprecise---only Ed25519 keys ever \"sign\" in the cryptographic sense.)\n+\n+### Prerequisite signing keys\n+\n+First, if a schedule lists an account to be charged the service fee for\n+its scheduled transaction, the Hedera key of that account is prerequisite \n+to the scheduled transaction.\n+\n+Second, if some non-payer Hedera key would need to sign a scheduled transaction \n+if it was submitted directly to the network, that non-payer key is prerequisite\n+to the scheduled transaction. Consider three examples.\n+  1. A scheduled `CryptoTransfer` of 1‚Ñè from account `0.0.X` to account `0.0.Y`,\n+     which has `receiverSigRequired=true`. The keys on accounts `0.0.X` and\n+     `0.0.Y` are both prerequisite.\n+  2. A scheduled `SubmitMessage` to a topic `0.0.Z` which has a submit key. The\n+     submit key on topic `0.0.Z` is prerequisite.\n+  3. A scheduled `TokenMint` for a token `0.0.T` with a supply key. The supply\n+     key on token `0.0.T` is prerequisite. (Although `TokenMint` is \n+     not currently in the [scheduling whitelist](https://github.com/hashgraph/hedera-services/blob/master/hedera-node/src/main/resources/bootstrap.properties#L64),\n+     eventually all transaction types will be.)\n+\n+## Triggered execution\n+\n+A schedule is _triggered_ when the network handles a `ScheduleCreate` \n+or `ScheduleSign` that adds enough signing keys to make its scheduled\n+transaction ready-to-execute. (You may create a schedule whose initial \n+signing keys are already triggering.) A scheduled transaction executes \n+immediately after its schedule is triggered. \n+\n+It is crucial to understand that in Hedera Services 0.13.0, a scheduled \n+transaction **only** executes when its schedule is triggered by a \n+`ScheduleCreate` or `ScheduleSign`! The network does not proactively monitor \n+how changes to Hedera keys may impact the ready-to-execute status of \n+existing scheduled transactions.\n+ \n+For example, suppose the Hedera key on account `0.0.X` is a key list of two\n+Ed25519 keys `KeyA` and `KeyB`; and is the sole prerequisite to a scheduled transaction \n+whose schedule `0.0.S` already lists `A` as a signer. Say we now update account \n+`0.0.X` to remove `KeyB` from its key. Schedule `0.0.S` is **not** automatically\n+triggered! We need to submit a `ScheduleSign` for `0.0.S` to trigger it. (This\n+`ScheduleSign` can be signed by just a payer key, since we made the scheduled\n+transaction ready-to-execute by weakening the signing requirement for the key\n+on account `0.0.X`.)\n+\n+## The `ScheduleCreate` transaction\n+  \n+```  \n+message ScheduleCreateTransactionBody {  \n+  SchedulableTransactionBody scheduledTransactionBody = 1; // The scheduled transaction\n+  string memo = 2; // An optional memo with a UTF-8 encoding of no more than 100 bytes\n+  Key adminKey = 3; // An optional Hedera key which can be used to sign a `ScheduleDelete` and make the schedule un-triggerable\n+  AccountID payerAccountID = 4; // An optional id of the account to be charged the service fee for the scheduled transaction at the consensus time that it executes (if ever); defaults to the `ScheduleCreate` payer if not given\n+}  \n+```  \n+\n+The new `SchedulableTransactionBody` message is a strict subset of the `TransactionBody` message which omits the\n+top-level `TransactionID`, `nodeAccountID`, and `transactionValidDuration` fields; and does not allow the \n+`ScheduleCreateTransactionBody` and `ScheduleSignTransactionBody` messages in its `data` element. Any \n+unknown fields in the submitted `SchedulableTransactionBody` will be ignored, although they _will_ affect\n+the \"identity\" of the schedule (see [below](#receipts-and-duplicate-creations)).\n+\n+As with all other entity types, a schedule remains in network state until it expires, even if its scheduled \n+transaction has already been executed or it has been marked deleted.\n+\n+### Paying for scheduled transactions\n+\n+If the `ScheduleCreate` gives a `payerAccountID`, the network will charge this payer the service fee \n+for the scheduled transaction at the consensus time that it executes (if ever). If no such payer is specified, \n+the network will charge the payer of the originating `ScheduleCreate`.\n+\n+### Receipts and duplicate creations\n+\n+When a `ScheduleCreate` resolves to `SUCCESS`, its receipt includes a new `ScheduleID` field\n+with the id of the created schedule. Its receipt _also_ includes a new \n+`scheduledTransactionID` field with the `TransactionID` that can be used to query for the \n+record of the scheduled transaction's execution. \n+\n+This `scheduledTransactionID` will be the `TransactionID` of the `ScheduleCreate`, \n+with a new additional field `scheduled=true`.  However, clients should always use the id \n+from the receipt instead of relying on this correspondence.\n+\n+#### Duplicate creations\n+There is a special case in which a `ScheduleCreate` transaction tries to re-create a\n+schedule that already exists in state. When this happens, the `ScheduleCreate` resolves \n+to a new status of `IDENTICAL_SCHEDULE_ALREADY_CREATED`, and the `ScheduleID` in its receipt points\n+to the existing schedule. (It also contains the `TransactionID` used to query for the\n+record of the existing scheduled transaction.) A client receiving `IDENTICAL_SCHEDULE_ALREADY_CREATED` \n+can then submit a `ScheduleSign` (see below) with the given `ScheduleID`, signing with\n+the same Ed25519 keys it used for its own create attempt. \n+\n+Two <tt>ScheduleCreate</tt> transactions are <i>identical</i> if they are equal in all their fields \n+other than, possibly, <tt>payerAccountID</tt>. (Here \"equal\" should be understood in the sense of \n+gRPC object equality in the network software runtime. In particular, a gRPC object with \n+[unknown fields](https://developers.google.com/protocol-buffers/docs/proto3#unknowns)\n+is not equal to a gRPC object without unknown fields, even if they agree on all known fields.)\n+  \n+### Enforced checks and the scheduling whitelist\n+\n+The only body-specific precheck enforced for a `ScheduleCreate` transaction is that the \n+`memo` field is valid. At consensus, the following checks are enforced:\n+  1. The `memo` must be valid.\n+  2. The type of the `scheduledTransactionBody` must be in the `scheduling.whitelist`; and it \n+     must reference only non-deleted entities that exist in state at the time the `ScheduleCreate` \n+     reaches consensus. \n+  3. The `adminKey` must be valid, if present.\n+  \n+## The `ScheduleSign` transaction\n+  \n+```  \n+message ScheduleSignTransactionBody {  \n+  ScheduleID scheduleID = 1; // The id of an existing schedule to affirm signing keys for\n+}  \n+```  \n+\n+Suppose we use the `scheduleID` field to point to schedule `0.0.12345`, which contains a \n+scheduled transaction `X`. If any of the Ed25519 keys required to sign `X` sign \n+our `ScheduleSign` ordinary transaction, then the network will update the state of \n+schedule `0.0.12345` with these keys.\n+\n+(It is permissible, though pointless, to sign the `ScheduleSign` with keys not \n+required for the execution of `X`.)\n+\n+### Receipts\n+\n+When a `ScheduleSign` resolves to `SUCCESS`, its receipt includes a new \n+`scheduledTransactionID` field which is the `TransactionID` that can be used to query \n+for the record of the execution of the scheduled transaction in the signed schedule.\n+  \n+## The `ScheduleDelete` transaction\n+  \n+```  \n+message ScheduleDeleteTransactionBody {  \n+  ScheduleID scheduleID = 1; // The id of an existing schedule to delete\n+}  \n+```  \n+\n+When a `ScheduleDelete` resolves to `SUCCESS`, its target schedule is marked as \n+as deleted. Any future attempts to trigger this schedule will result in `SCHEDULE_WAS_DELETED`.\n+However, the schedule will remain in network state until it expires. (Note that if we try \n+to delete a schedule that already executed, our `ScheduleDelete` will resolve\n+to `SCHEDULE_WAS_EXECUTED` and have no effect.)\n+  \n+## The `ScheduleGetInfo` query\n+  \n+```  \n+message ScheduleGetInfoQuery {  \n+  QueryHeader header = 1; // Standard query metadata, including payment\n+  ScheduleID schedule = 2; // The id of an existing schedule\n+}  \n+  \n+message ScheduleGetInfoResponse {  \n+  ScheduleID scheduleID = 1; // The id of the schedule\n+  Timestamp deletionTime = 2; // If the schedule has been deleted, the consensus time when this occurred\n+  Timestamp executionTime = 3; // If the schedule has been executed, the consensus time when this occurred\n+  Timestamp expirationTime = 4; // The time at which the schedule will expire\n+  SchedulableTransactionBody scheduledTransactionBody = 5; // The scheduled transaction\n+  string memo = 6; // The publicly visible memo of the schedule\n+  Key adminKey = 7; // The key used to delete the schedule from state\n+  KeyList signers = 8; // The Ed25519 keys the network deems to have signed the scheduled transaction\n+  AccountID creatorAccountID = 9; // The id of the account that created the schedule\n+  AccountID payerAccountID = 10; // The id of the account responsible for the service fee of the scheduled transaction\n+  TransactionID scheduledTransactionID = 11; // The transaction id that will be used in the record of the scheduled transaction (if it executes)\n+}  \n+```  \n+  \n+## Records of scheduled transactions\n+\n+Just as an ordinary transaction, a scheduled transaction that achieves execution has a unique consensus timestamp.\n+It also has a record in the record stream. However, there _are_ two items that distinguish the record of a \n+scheduled transaction.\n+  1. Its `TransactionID` will contain the new `scheduled=true` flag.\n+  2. It will have a new `scheduleRef` field with the `ScheduleID` of the schedule that managed its execution."
  },
  {
    "sha": "c10be4de6ed479117c222a7541256fa33e34ea09",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/TxnUsageEstimator.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/TxnUsageEstimator.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/TxnUsageEstimator.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/TxnUsageEstimator.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -92,4 +92,8 @@ public TxnUsageEstimator addNetworkRbs(long networkRbs) {\n \t\tthis.networkRbs += networkRbs;\n \t\treturn this;\n \t}\n+\n+\tpublic SigUsage getSigUsage() {\n+\t\treturn sigUsage;\n+\t}\n }"
  },
  {
    "sha": "e5b6dacc5ca9481278c75e602c0a7170c66d81b1",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/crypto/CryptoOpsUsage.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/crypto/CryptoOpsUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/crypto/CryptoOpsUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/crypto/CryptoOpsUsage.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -24,7 +24,6 @@\n import com.hedera.services.usage.QueryUsage;\n import com.hedera.services.usage.SigUsage;\n import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hedera.services.usage.token.entities.TokenEntitySizes;\n import com.hederahashgraph.api.proto.java.CryptoCreateTransactionBody;\n import com.hederahashgraph.api.proto.java.FeeData;\n import com.hederahashgraph.api.proto.java.Query;"
  },
  {
    "sha": "61ce2178dba1f9d14d8b19f53181f5ef49983c4d",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/ExtantScheduleContext.java",
    "status": "added",
    "additions": 161,
    "deletions": 0,
    "changes": 161,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ExtantScheduleContext.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ExtantScheduleContext.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ExtantScheduleContext.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -0,0 +1,161 @@\n+package com.hedera.services.usage.schedule;\n+\n+/*-\n+ * ‚Äå\n+ * Hedera Services API Fees\n+ * ‚Äã\n+ * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n+ * ‚Äã\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ‚Äç\n+ */\n+\n+import com.hedera.services.usage.schedule.entities.ScheduleEntitySizes;\n+import com.hederahashgraph.api.proto.java.Key;\n+import com.hederahashgraph.api.proto.java.SchedulableTransactionBody;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_RICH_INSTANT_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_TX_ID_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BOOL_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.KEY_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.getAccountKeyStorageSize;\n+\n+public class ExtantScheduleContext {\n+\tstatic final int METADATA_SIZE =\n+\t\t\t/* The schedule id, the scheduling account, and the responsible payer */\n+\t\t\t3 * BASIC_ENTITY_ID_SIZE +\n+\t\t\t\t\t/* The expiration time */\n+\t\t\t\t\tBASIC_RICH_INSTANT_SIZE +\n+\t\t\t\t\t/* The scheduled transaction id */\n+\t\t\t\t\tBASIC_TX_ID_SIZE + BOOL_SIZE;\n+\n+\tprivate final int numSigners;\n+\tprivate final Key adminKey;\n+\tprivate final String memo;\n+\tprivate final boolean resolved;\n+\tprivate final SchedulableTransactionBody scheduledTxn;\n+\n+\tprivate ExtantScheduleContext(ExtantScheduleContext.Builder builder) {\n+\t\tresolved = builder.resolved;\n+\t\tnumSigners = builder.numSigners;\n+\t\tmemo = builder.memo;\n+\t\tadminKey = builder.adminKey;\n+\t\tscheduledTxn = builder.scheduledTxn;\n+\t}\n+\n+\tpublic long nonBaseRb() {\n+\t\treturn METADATA_SIZE\n+\t\t\t\t/* If the schedule has been resolved (i.e. deleted or executed), then\n+\t\t\t\twe store the resolution timestamp. */\n+\t\t\t\t+ (resolved ? BASIC_RICH_INSTANT_SIZE : 0)\n+\t\t\t\t+ memo.getBytes(StandardCharsets.UTF_8).length\n+\t\t\t\t+ getAccountKeyStorageSize(adminKey)\n+\t\t\t\t+ scheduledTxn.getSerializedSize()\n+\t\t\t\t+ SCHEDULE_ENTITY_SIZES.bytesUsedForSigningKeys(numSigners);\n+\t}\n+\n+\tpublic Key adminKey() {\n+\t\treturn adminKey;\n+\t}\n+\n+\tpublic int numSigners() {\n+\t\treturn numSigners;\n+\t}\n+\n+\tpublic String memo() {\n+\t\treturn memo;\n+\t}\n+\n+\tpublic boolean isResolved() {\n+\t\treturn resolved;\n+\t}\n+\n+\tpublic SchedulableTransactionBody scheduledTxn() {\n+\t\treturn scheduledTxn;\n+\t}\n+\n+\tpublic static ExtantScheduleContext.Builder newBuilder() {\n+\t\treturn new ExtantScheduleContext.Builder();\n+\t}\n+\n+\tpublic static class Builder {\n+\t\tprivate static final int IS_RESOLVED_MASK = 1 << 0;\n+\t\tprivate static final int SCHEDULED_TXN_MASK = 1 << 1;\n+\t\tprivate static final int MEMO_MASK = 1 << 2;\n+\t\tprivate static final int ADMIN_KEY_MASK = 1 << 3;\n+\t\tprivate static final int NUM_SIGNERS_MASK = 1 << 4;\n+\n+\t\tprivate static final int ALL_FIELDS_MASK = NUM_SIGNERS_MASK\n+\t\t\t\t| SCHEDULED_TXN_MASK\n+\t\t\t\t| MEMO_MASK\n+\t\t\t\t| ADMIN_KEY_MASK\n+\t\t\t\t| IS_RESOLVED_MASK;\n+\t\tprivate int mask = 0;\n+\n+\t\tprivate int numSigners;\n+\t\tprivate Key adminKey;\n+\t\tprivate String memo;\n+\t\tprivate boolean resolved;\n+\t\tprivate SchedulableTransactionBody scheduledTxn;\n+\n+\t\tprivate Builder() {\n+\t\t}\n+\n+\t\tpublic ExtantScheduleContext build() {\n+\t\t\tif (mask != ALL_FIELDS_MASK) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Field mask is %d, not %d!\", mask, ALL_FIELDS_MASK));\n+\t\t\t}\n+\t\t\treturn new ExtantScheduleContext(this);\n+\t\t}\n+\n+\t\tpublic ExtantScheduleContext.Builder setNumSigners(int numSigners) {\n+\t\t\tthis.numSigners = numSigners;\n+\t\t\tmask |= NUM_SIGNERS_MASK;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ExtantScheduleContext.Builder setScheduledTxn(SchedulableTransactionBody scheduledTxn) {\n+\t\t\tthis.scheduledTxn = scheduledTxn;\n+\t\t\tmask |= SCHEDULED_TXN_MASK;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ExtantScheduleContext.Builder setMemo(String memo) {\n+\t\t\tthis.memo = memo;\n+\t\t\tmask |= MEMO_MASK;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ExtantScheduleContext.Builder setAdminKey(Key adminKey) {\n+\t\t\tthis.adminKey = adminKey;\n+\t\t\tmask |= ADMIN_KEY_MASK;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ExtantScheduleContext.Builder setNoAdminKey() {\n+\t\t\tthis.adminKey = null;\n+\t\t\tmask |= ADMIN_KEY_MASK;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ExtantScheduleContext.Builder setResolved(boolean flag) {\n+\t\t\tthis.resolved = flag;\n+\t\t\tmask |= IS_RESOLVED_MASK;\n+\t\t\treturn this;\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "46451dda84ec1ff48539e8b5be1af03d7a64feeb",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleCreateUsage.java",
    "status": "removed",
    "additions": 0,
    "deletions": 93,
    "changes": 93,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleCreateUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleCreateUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleCreateUsage.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,93 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.google.protobuf.InvalidProtocolBufferException;\n-import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hederahashgraph.api.proto.java.FeeData;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n-\n-import static com.hedera.services.usage.SingletonEstimatorUtils.ESTIMATOR_UTILS;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_TX_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BOOL_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.getAccountKeyStorageSize;\n-\n-public class ScheduleCreateUsage extends ScheduleTxnUsage<ScheduleCreateUsage> {\n-\tprivate int expirationTimeSecs;\n-\n-\tprivate ScheduleCreateUsage(TransactionBody scheduleCreationOp, TxnUsageEstimator usageEstimator) {\n-\t\tsuper(scheduleCreationOp, usageEstimator);\n-\t}\n-\n-\tpublic static ScheduleCreateUsage newEstimate(TransactionBody scheduleCreationOp, SigUsage sigUsage) {\n-\t\treturn new ScheduleCreateUsage(scheduleCreationOp, estimatorFactory.get(sigUsage, scheduleCreationOp, ESTIMATOR_UTILS));\n-\t}\n-\n-\tpublic ScheduleCreateUsage givenScheduledTxExpirationTimeSecs(int scheduledTxExpirationTimeSecs) {\n-\t\tthis.expirationTimeSecs = scheduledTxExpirationTimeSecs;\n-\t\treturn self();\n-\t}\n-\n-\t@Override\n-\tScheduleCreateUsage self() {\n-\t\treturn this;\n-\t}\n-\n-\tpublic FeeData get() {\n-\t\tvar op = this.op.getScheduleCreate();\n-\n-\t\tvar txBytes = op.getTransactionBody().size() + op.getMemoBytes().size();\n-\t\tvar ramBytes = scheduleEntitySizes.bytesInBaseReprGiven(op.getTransactionBody().toByteArray(), op.getMemoBytes());\n-\t\tif (op.hasAdminKey()) {\n-\t\t\tlong keySize = getAccountKeyStorageSize(op.getAdminKey());\n-\t\t\ttxBytes += keySize;\n-\t\t\tramBytes += keySize;\n-\t\t}\n-\n-\t\tif (op.hasPayerAccountID()) {\n-\t\t\ttxBytes += BASIC_ENTITY_ID_SIZE;\n-\t\t}\n-\n-\t\tvar scheduledTxSigs = 0;\n-\t\tif (op.hasSigMap()) {\n-\t\t\ttxBytes += scheduleEntitySizes.bptScheduleReprGiven(op.getSigMap());\n-\t\t\tramBytes += scheduleEntitySizes.sigBytesInScheduleReprGiven(op.getSigMap());\n-\t\t\tscheduledTxSigs = op.getSigMap().getSigPairCount();\n-\t\t}\n-\n-\t\tusageEstimator.addBpt(txBytes);\n-\t\tusageEstimator.addRbs(ramBytes * this.expirationTimeSecs);\n-\t\tusageEstimator.addVpt(scheduledTxSigs);\n-\n-\t\t/* A ScheduleCreate record includes the created ScheduleID and the TransactionID\n-\t\tof the scheduled transaction (which always has scheduled = true). */\n-\t\tvar nonceBytes = 0;\n-\t\ttry {\n-\t\t\tvar txn = TransactionBody.parseFrom(op.getTransactionBody());\n-\t\t\tnonceBytes = txn.getTransactionID().getNonce().size();\n-\t\t} catch (InvalidProtocolBufferException ignore) { }\n-\t\taddNetworkRecordRb(BASIC_ENTITY_ID_SIZE + BASIC_TX_ID_SIZE + BOOL_SIZE + nonceBytes);\n-\n-\t\treturn usageEstimator.get();\n-\t}\n-}"
  },
  {
    "sha": "120755c69455a4c20760fcbf6ca07c5a7acc8ae2",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleDeleteUsage.java",
    "status": "removed",
    "additions": 0,
    "deletions": 48,
    "changes": 48,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleDeleteUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleDeleteUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleDeleteUsage.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,48 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hederahashgraph.api.proto.java.FeeData;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n-\n-import static com.hedera.services.usage.SingletonEstimatorUtils.ESTIMATOR_UTILS;\n-\n-public class ScheduleDeleteUsage extends ScheduleTxnUsage<ScheduleDeleteUsage> {\n-\tprivate ScheduleDeleteUsage(TransactionBody scheduleDeleteOp, TxnUsageEstimator usageEstimator) {\n-\t\tsuper(scheduleDeleteOp, usageEstimator);\n-\t}\n-\n-\tpublic static ScheduleDeleteUsage newEstimate(TransactionBody scheduleCreationOp, SigUsage sigUsage) {\n-\t\treturn new ScheduleDeleteUsage(scheduleCreationOp, estimatorFactory.get(sigUsage, scheduleCreationOp, ESTIMATOR_UTILS));\n-\t}\n-\n-\t@Override\n-\tScheduleDeleteUsage self() {\n-\t\treturn this;\n-\t}\n-\n-\tpublic FeeData get() {\n-\t\taddEntityBpt();\n-\t\treturn usageEstimator.get();\n-\t}\n-}"
  },
  {
    "sha": "2863fca47d66dc21adfd365267e4850122a62d92",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsage.java",
    "status": "removed",
    "additions": 0,
    "deletions": 71,
    "changes": 71,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsage.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,71 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.google.protobuf.ByteString;\n-import com.hedera.services.usage.QueryUsage;\n-import com.hederahashgraph.api.proto.java.Key;\n-import com.hederahashgraph.api.proto.java.KeyList;\n-import com.hederahashgraph.api.proto.java.Query;\n-import com.hederahashgraph.api.proto.java.TransactionID;\n-import com.hederahashgraph.fee.FeeBuilder;\n-\n-import java.util.Optional;\n-\n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-\n-public class ScheduleGetInfoUsage extends QueryUsage {\n-\tprivate ScheduleGetInfoUsage(Query query) {\n-\t\tsuper(query.getScheduleGetInfo().getHeader().getResponseType());\n-\t\tupdateTb(BASIC_ENTITY_ID_SIZE);\n-\t\tupdateRb(SCHEDULE_ENTITY_SIZES.fixedBytesInScheduleRepr());\n-\t}\n-\n-\tpublic static ScheduleGetInfoUsage newEstimate(Query query) {\n-\t\treturn new ScheduleGetInfoUsage(query);\n-\t}\n-\n-\tpublic ScheduleGetInfoUsage givenCurrentAdminKey(Optional<Key> adminKey) {\n-\t\tadminKey.map(FeeBuilder::getAccountKeyStorageSize).ifPresent(this::updateRb);\n-\t\treturn this;\n-\t}\n-\n-\tpublic ScheduleGetInfoUsage givenTransaction(byte[] transactionBody) {\n-\t\tthis.updateRb(transactionBody.length);\n-\t\treturn this;\n-\t}\n-\n-\tpublic ScheduleGetInfoUsage givenMemo(ByteString memo) {\n-\t\tthis.updateRb(memo.size());\n-\t\treturn this;\n-\t}\n-\n-\tpublic ScheduleGetInfoUsage givenSignatories(Optional<KeyList> signatories) {\n-\t\tsignatories.map(kl -> kl.toByteArray().length).ifPresent(this::updateRb);\n-\t\treturn this;\n-\t}\n-\n-\tpublic ScheduleGetInfoUsage givenScheduledTxnId(TransactionID txnId) {\n-\t\tthis.updateRb(txnId.getSerializedSize());\n-\t\treturn this;\n-\t}\n-}"
  },
  {
    "sha": "3c07a4ad8f42a058be4114eec88fbae53ef71af0",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleOpsUsage.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleOpsUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleOpsUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleOpsUsage.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -0,0 +1,118 @@\n+package com.hedera.services.usage.schedule;\n+\n+/*-\n+ * ‚Äå\n+ * Hedera Services API Fees\n+ * ‚Äã\n+ * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n+ * ‚Äã\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ‚Äç\n+ */\n+\n+import com.hedera.services.usage.EstimatorFactory;\n+import com.hedera.services.usage.QueryUsage;\n+import com.hedera.services.usage.SigUsage;\n+import com.hedera.services.usage.TxnUsageEstimator;\n+import com.hederahashgraph.api.proto.java.FeeData;\n+import com.hederahashgraph.api.proto.java.Query;\n+import com.hederahashgraph.api.proto.java.ResponseType;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+\n+import java.util.function.Function;\n+\n+import static com.hedera.services.usage.SingletonEstimatorUtils.ESTIMATOR_UTILS;\n+import static com.hedera.services.usage.SingletonUsageProperties.USAGE_PROPERTIES;\n+import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_RICH_INSTANT_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_TX_ID_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BOOL_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.getAccountKeyStorageSize;\n+\n+public class ScheduleOpsUsage {\n+\t/* Scheduled transaction ids have the scheduled=true flag set */\n+\tprivate static final long SCHEDULED_TXN_ID_SIZE = BASIC_TX_ID_SIZE + BOOL_SIZE;\n+\n+\tstatic EstimatorFactory txnEstimateFactory = TxnUsageEstimator::new;\n+\tstatic Function<ResponseType, QueryUsage> queryEstimateFactory = QueryUsage::new;\n+\n+\tpublic FeeData scheduleInfoUsage(Query scheduleInfo, ExtantScheduleContext ctx) {\n+\t\tvar op = scheduleInfo.getScheduleGetInfo();\n+\n+\t\tvar estimate = queryEstimateFactory.apply(op.getHeader().getResponseType());\n+\t\testimate.updateTb(BASIC_ENTITY_ID_SIZE);\n+\t\testimate.updateRb(ctx.nonBaseRb());\n+\n+\t\treturn estimate.get();\n+\t}\n+\n+\tpublic FeeData scheduleCreateUsage(TransactionBody scheduleCreate, SigUsage sigUsage, long lifetimeSecs) {\n+\t\tvar op = scheduleCreate.getScheduleCreate();\n+\n+\t\tvar scheduledTxn = op.getScheduledTransactionBody();\n+\t\tlong msgBytesUsed = scheduledTxn.getSerializedSize() + op.getMemoBytes().size();\n+\t\tif (op.hasPayerAccountID()) {\n+\t\t\tmsgBytesUsed += BASIC_ENTITY_ID_SIZE;\n+\t\t}\n+\n+\t\tvar creationCtx = ExtantScheduleContext.newBuilder()\n+\t\t\t\t.setScheduledTxn(scheduledTxn)\n+\t\t\t\t.setNumSigners(SCHEDULE_ENTITY_SIZES.estimatedScheduleSigs(sigUsage))\n+\t\t\t\t.setMemo(op.getMemo())\n+\t\t\t\t.setResolved(false);\n+\t\tif (op.hasAdminKey()) {\n+\t\t\tvar adminKey = op.getAdminKey();\n+\t\t\tmsgBytesUsed += getAccountKeyStorageSize(adminKey);\n+\t\t\tcreationCtx.setAdminKey(adminKey);\n+\t\t} else {\n+\t\t\tcreationCtx.setNoAdminKey();\n+\t\t}\n+\n+\t\tvar estimate = txnEstimateFactory.get(sigUsage, scheduleCreate, ESTIMATOR_UTILS);\n+\t\testimate.addBpt(msgBytesUsed);\n+\t\testimate.addRbs(creationCtx.build().nonBaseRb() * lifetimeSecs);\n+\n+\t\t/* The receipt of a schedule create includes both the id of the created schedule\n+\t\tand the transaction id to use for querying the record of the scheduled txn. */\n+\t\testimate.addNetworkRbs((BASIC_ENTITY_ID_SIZE + SCHEDULED_TXN_ID_SIZE)\n+\t\t\t\t* USAGE_PROPERTIES.legacyReceiptStorageSecs());\n+\n+\t\treturn estimate.get();\n+\t}\n+\n+\tpublic FeeData scheduleSignUsage(TransactionBody scheduleSign, SigUsage sigUsage, long scheduleExpiry) {\n+\t\tvar estimate = txnEstimateFactory.get(sigUsage, scheduleSign, ESTIMATOR_UTILS);\n+\n+\t\testimate.addBpt(BASIC_ENTITY_ID_SIZE);\n+\n+\t\tint estNewSigners = SCHEDULE_ENTITY_SIZES.estimatedScheduleSigs(sigUsage);\n+\t\tlong lifetime = ESTIMATOR_UTILS.relativeLifetime(scheduleSign, scheduleExpiry);\n+\t\testimate.addRbs(SCHEDULE_ENTITY_SIZES.bytesUsedForSigningKeys(estNewSigners) * lifetime);\n+\n+\t\testimate.addNetworkRbs(SCHEDULED_TXN_ID_SIZE * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n+\n+\t\treturn estimate.get();\n+\t}\n+\n+\tpublic FeeData scheduleDeleteUsage(TransactionBody scheduleDelete, SigUsage sigUsage, long scheduleExpiry) {\n+\t\tvar estimate = txnEstimateFactory.get(sigUsage, scheduleDelete, ESTIMATOR_UTILS);\n+\n+\t\testimate.addBpt(BASIC_ENTITY_ID_SIZE);\n+\n+\t\tlong lifetime = ESTIMATOR_UTILS.relativeLifetime(scheduleDelete, scheduleExpiry);\n+\t\testimate.addRbs(BASIC_RICH_INSTANT_SIZE * lifetime);\n+\n+\t\treturn estimate.get();\n+\t}\n+}"
  },
  {
    "sha": "496d91d8bff6f5a708e065e7ee5a66552a3c4b27",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleSignUsage.java",
    "status": "removed",
    "additions": 0,
    "deletions": 81,
    "changes": 81,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleSignUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleSignUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleSignUsage.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,81 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hederahashgraph.api.proto.java.FeeData;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n-\n-import static com.hedera.services.usage.SingletonEstimatorUtils.ESTIMATOR_UTILS;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_TX_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BOOL_SIZE;\n-\n-public class ScheduleSignUsage extends ScheduleTxnUsage<ScheduleSignUsage> {\n-\tprivate int nonceBytes;\n-\tprivate long expiry;\n-\n-\tprivate ScheduleSignUsage(TransactionBody scheduleSignOp, TxnUsageEstimator usageEstimator) {\n-\t\tsuper(scheduleSignOp, usageEstimator);\n-\t}\n-\n-\tpublic static ScheduleSignUsage newEstimate(TransactionBody scheduleSignOp, SigUsage sigUsage) {\n-\t\treturn new ScheduleSignUsage(scheduleSignOp, estimatorFactory.get(sigUsage, scheduleSignOp, ESTIMATOR_UTILS));\n-\t}\n-\n-\tpublic ScheduleSignUsage givenExpiry(long expiry) {\n-\t\tthis.expiry = expiry;\n-\t\treturn self();\n-\t}\n-\n-\tpublic ScheduleSignUsage givenNonceBytes(int nonceBytes) {\n-\t\tthis.nonceBytes = nonceBytes;\n-\t\treturn self();\n-\t}\n-\n-\t@Override\n-\tScheduleSignUsage self() {\n-\t\treturn this;\n-\t}\n-\n-\tpublic FeeData get() {\n-\t\tvar op = this.op.getScheduleSign();\n-\n-\t\tvar txnBytes = BASIC_ENTITY_ID_SIZE;\n-\t\tvar ramBytes = 0;\n-\t\tvar scheduledTxSigs = 0;\n-\t\tif (op.hasSigMap()) {\n-\t\t\ttxnBytes += scheduleEntitySizes.bptScheduleReprGiven(op.getSigMap());\n-\t\t\tramBytes += scheduleEntitySizes.sigBytesInScheduleReprGiven(op.getSigMap());\n-\t\t\tscheduledTxSigs += op.getSigMap().getSigPairCount();\n-\t\t}\n-\t\tlong lifetime = ESTIMATOR_UTILS.relativeLifetime(this.op, this.expiry);\n-\t\tusageEstimator.addBpt(txnBytes);\n-\t\tusageEstimator.addRbs(ramBytes * lifetime);\n-\t\tusageEstimator.addVpt(scheduledTxSigs);\n-\n-\t\t/* A ScheduleSign record includes the TransactionID of the associated\n-\t\tscheduled transaction (which always has scheduled = true). */\n-\t\taddNetworkRecordRb(BASIC_TX_ID_SIZE + BOOL_SIZE + nonceBytes);\n-\t\treturn usageEstimator.get();\n-\t}\n-}"
  },
  {
    "sha": "bf237101c62ee6d164f6259073a15a03034674a8",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleTxnUsage.java",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleTxnUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleTxnUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/ScheduleTxnUsage.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,38 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*-\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.hedera.services.usage.TxnUsage;\n-import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hedera.services.usage.schedule.entities.ScheduleEntitySizes;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n-\n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n-\n-public abstract class ScheduleTxnUsage<T extends ScheduleTxnUsage<T>> extends TxnUsage {\n-\tstatic ScheduleEntitySizes scheduleEntitySizes = SCHEDULE_ENTITY_SIZES;\n-\n-\tabstract T self();\n-\n-\tprotected ScheduleTxnUsage(TransactionBody scheduleOp, TxnUsageEstimator usageEstimator) {\n-\t\tsuper(scheduleOp, usageEstimator);\n-\t}\n-}"
  },
  {
    "sha": "237af153eea8090619c71a6bbc11ac8d74a0b6f3",
    "filename": "hapi-fees/src/main/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizes.java",
    "status": "modified",
    "additions": 5,
    "deletions": 32,
    "changes": 37,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizes.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/main/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizes.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/main/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizes.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -20,45 +20,18 @@\n  * ‚Äç\n  */\n \n-import com.google.protobuf.ByteString;\n-import com.hederahashgraph.api.proto.java.SignatureMap;\n+import com.hedera.services.usage.SigUsage;\n \n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_RICH_INSTANT_SIZE;\n import static com.hederahashgraph.fee.FeeBuilder.KEY_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.LONG_SIZE;\n \n public enum ScheduleEntitySizes {\n \tSCHEDULE_ENTITY_SIZES;\n \n-\t/* { expiry } */\n-\tstatic int NUM_LONG_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION = 1;\n-\t/* { payer, schedulingAccount } */\n-\tstatic int NUM_ENTITY_ID_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION = 2;\n-\t/* { schedulingTXValidStart } */\n-\tstatic int NUM_RICH_INSTANT_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION = 1;\n-\n-\tpublic int fixedBytesInScheduleRepr() {\n-\t\treturn NUM_LONG_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * LONG_SIZE\n-\t\t\t\t+ NUM_ENTITY_ID_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * BASIC_ENTITY_ID_SIZE\n-\t\t\t\t+ NUM_RICH_INSTANT_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * BASIC_RICH_INSTANT_SIZE;\n-\t}\n-\n-\tpublic int bytesInBaseReprGiven(byte[] transactionBody, ByteString memo) {\n-\t\treturn fixedBytesInScheduleRepr() + transactionBody.length + memo.size();\n-\t}\n-\n-\t/**\n-\t * Signature map is not stored in state, we only need it for bpt\n-\t */\n-\tpublic int bptScheduleReprGiven(SignatureMap sigMap) {\n-\t\treturn sigMap.toByteArray().length;\n+\tpublic int bytesUsedForSigningKeys(int n) {\n+\t\treturn n * KEY_SIZE;\n \t}\n \n-\t/**\n-\t * For a given Scheduled Entity, a set of simple JKEYs are stored\n-\t */\n-\tpublic int sigBytesInScheduleReprGiven(SignatureMap sigMap) {\n-\t\treturn sigMap.getSigPairCount() * KEY_SIZE;\n+\tpublic int estimatedScheduleSigs(SigUsage sigUsage) {\n+\t\treturn Math.max(sigUsage.numSigs() - sigUsage.numPayerKeys(), 1);\n \t}\n }"
  },
  {
    "sha": "ac2972ac23846fd8334acfb7b856623ce8b092e3",
    "filename": "hapi-fees/src/test/java/com/hedera/services/usage/schedule/ExtantScheduleContextTest.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ExtantScheduleContextTest.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ExtantScheduleContextTest.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ExtantScheduleContextTest.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -0,0 +1,119 @@\n+package com.hedera.services.usage.schedule;\n+\n+import com.hedera.services.test.KeyUtils;\n+import com.hederahashgraph.api.proto.java.Key;\n+import com.hederahashgraph.api.proto.java.SchedulableTransactionBody;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.EnumSet;\n+\n+import static com.hedera.services.usage.schedule.ExtantScheduleContextTest.SettableField.ADMIN_KEY;\n+import static com.hedera.services.usage.schedule.ExtantScheduleContextTest.SettableField.NO_ADMIN_KEY;\n+import static com.hedera.services.usage.schedule.ExtantScheduleContextTest.SettableField.NUM_SIGNERS;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_RICH_INSTANT_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.KEY_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.getAccountKeyStorageSize;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class ExtantScheduleContextTest {\n+\tint numSigners = 2;\n+\tboolean resolved = true;\n+\tKey adminKey = KeyUtils.A_THRESHOLD_KEY;\n+\tString memo = \"Not since life began\";\n+\tSchedulableTransactionBody scheduledTxn = SchedulableTransactionBody.newBuilder().setTransactionFee(123).build();\n+\n+\tenum SettableField { NUM_SIGNERS, NO_ADMIN_KEY, ADMIN_KEY, MEMO, SCHEDULED_TXN, IS_RESOLVED }\n+\n+\t@Test\n+\tvoid buildsAsExpectedWithAllPresent() {\n+\t\t// given:\n+\t\tvar ctx = builderWith(EnumSet.allOf(SettableField.class)).build();\n+\t\t// and:\n+\t\tlong expectedNonBaseRb = ExtantScheduleContext.METADATA_SIZE\n+\t\t\t\t+ BASIC_RICH_INSTANT_SIZE\n+\t\t\t\t+ memo.getBytes().length\n+\t\t\t\t+ getAccountKeyStorageSize(adminKey)\n+\t\t\t\t+ scheduledTxn.getSerializedSize()\n+\t\t\t\t+ numSigners * KEY_SIZE;\n+\n+\t\t// then:\n+\t\tassertTrue(ctx.isResolved());\n+\t\tassertSame(memo, ctx.memo());\n+\t\tassertSame(scheduledTxn, ctx.scheduledTxn());\n+\t\tassertSame(adminKey, ctx.adminKey());\n+\t\tassertEquals(numSigners, ctx.numSigners());\n+\t\t// and:\n+\t\tassertEquals(expectedNonBaseRb, ctx.nonBaseRb());\n+\t}\n+\n+\t@Test\n+\tvoid buildsAsExpected() {\n+\t\t// given:\n+\t\tvar ctx = builderWith(EnumSet.complementOf(EnumSet.of(ADMIN_KEY))).build();\n+\t\t// and:\n+\t\tlong expectedNonBaseRb = ExtantScheduleContext.METADATA_SIZE\n+\t\t\t\t+ BASIC_RICH_INSTANT_SIZE\n+\t\t\t\t+ memo.getBytes().length\n+\t\t\t\t+ scheduledTxn.getSerializedSize()\n+\t\t\t\t+ ctx.numSigners() * KEY_SIZE;\n+\n+\t\t// then:\n+\t\tassertTrue(ctx.isResolved());\n+\t\tassertNull(ctx.adminKey());\n+\t\tassertEquals(memo, ctx.memo());\n+\t\tassertSame(scheduledTxn, ctx.scheduledTxn());\n+\t\tassertEquals(numSigners, ctx.numSigners());\n+\t\t// and:\n+\t\tassertEquals(expectedNonBaseRb, ctx.nonBaseRb());\n+\t}\n+\n+\t@Test\n+\tvoid requiresAllFieldsSet() {\n+\t\t// expect:\n+\t\tAssertions.assertThrows(IllegalStateException.class,\n+\t\t\t\t() -> builderWith(EnumSet.complementOf(EnumSet.of(NUM_SIGNERS))).build());\n+\t\tAssertions.assertThrows(IllegalStateException.class,\n+\t\t\t\t() -> builderWith(EnumSet.complementOf(\n+\t\t\t\t\t\tEnumSet.of(SettableField.ADMIN_KEY, NO_ADMIN_KEY))).build());\n+\t\tAssertions.assertThrows(IllegalStateException.class,\n+\t\t\t\t() -> builderWith(EnumSet.of(SettableField.MEMO)).build());\n+\t\tAssertions.assertThrows(IllegalStateException.class,\n+\t\t\t\t() -> builderWith(EnumSet.complementOf(EnumSet.of(SettableField.SCHEDULED_TXN))).build());\n+\t\tAssertions.assertThrows(IllegalStateException.class,\n+\t\t\t\t() -> builderWith(EnumSet.complementOf(EnumSet.of(SettableField.IS_RESOLVED))).build());\n+\n+\t}\n+\n+\tprivate ExtantScheduleContext.Builder builderWith(EnumSet<SettableField> fieldsSet) {\n+\t\tvar builder = ExtantScheduleContext.newBuilder();\n+\n+\t\tfor (SettableField field : fieldsSet) {\n+\t\t\tswitch (field) {\n+\t\t\t\tcase NUM_SIGNERS:\n+\t\t\t\t\tbuilder.setNumSigners(numSigners);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase NO_ADMIN_KEY:\n+\t\t\t\t\tbuilder.setNoAdminKey();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ADMIN_KEY:\n+\t\t\t\t\tbuilder.setAdminKey(adminKey);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase MEMO:\n+\t\t\t\t\tbuilder.setMemo(memo);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase SCHEDULED_TXN:\n+\t\t\t\t\tbuilder.setScheduledTxn(scheduledTxn);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase IS_RESOLVED:\n+\t\t\t\t\tbuilder.setResolved(resolved);\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn builder;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3e97df02e00628681b9c05e96ab4fc39a351428c",
    "filename": "hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleCreateUsageTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 279,
    "changes": 279,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleCreateUsageTest.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleCreateUsageTest.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleCreateUsageTest.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,279 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.google.protobuf.ByteString;\n-import com.hedera.services.test.IdUtils;\n-import com.hedera.services.test.KeyUtils;\n-import com.hedera.services.usage.EstimatorFactory;\n-import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.TxnUsage;\n-import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hederahashgraph.api.proto.java.AccountID;\n-import com.hederahashgraph.api.proto.java.Key;\n-import com.hederahashgraph.api.proto.java.ScheduleCreateTransactionBody;\n-import com.hederahashgraph.api.proto.java.SignatureMap;\n-import com.hederahashgraph.api.proto.java.SignaturePair;\n-import com.hederahashgraph.api.proto.java.Timestamp;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n-import com.hederahashgraph.api.proto.java.TransactionID;\n-import com.hederahashgraph.fee.FeeBuilder;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import static com.hedera.services.test.UsageUtils.A_USAGES_MATRIX;\n-import static com.hedera.services.usage.SingletonUsageProperties.USAGE_PROPERTIES;\n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_TX_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BOOL_SIZE;\n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.given;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-\n-public class ScheduleCreateUsageTest {\n-\tKey adminKey = KeyUtils.A_THRESHOLD_KEY;\n-\tbyte[] nonce = \"abcdefghijklmnop\".getBytes();\n-\tbyte[] transactionBody = TransactionBody.newBuilder()\n-\t\t\t.setTransactionID(TransactionID.newBuilder()\n-\t\t\t\t\t.setNonce(ByteString.copyFrom(nonce)))\n-\t\t\t.build().toByteArray();\n-\n-\tlong now = 1_000L;\n-\tint scheduledTXExpiry = 1000;\n-\tAccountID payer = IdUtils.asAccount(\"0.0.2\");\n-\tString memo = \"Just some memo!\";\n-\n-\tint scheduledTxnIdSize = BASIC_TX_ID_SIZE + BOOL_SIZE + nonce.length;\n-\n-\tint numSigs = 3, sigSize = 100, numPayerKeys = 1;\n-\tSigUsage sigUsage = new SigUsage(numSigs, sigSize, numPayerKeys);\n-\tSignatureMap sigMap = SignatureMap.newBuilder()\n-\t\t\t.addSigPair(\n-\t\t\t\t\tSignaturePair.newBuilder()\n-\t\t\t\t\t\t\t.setPubKeyPrefix(ByteString.copyFrom(new byte[]{0x01}))\n-\t\t\t\t\t\t\t.setECDSA384(ByteString.copyFrom(new byte[]{0x01, 0x02}))\n-\t\t\t\t\t\t\t.build()\n-\t\t\t)\n-\t\t\t.addSigPair(\n-\t\t\t\t\tSignaturePair.newBuilder()\n-\t\t\t\t\t\t\t.setPubKeyPrefix(ByteString.copyFrom(new byte[]{0x02}))\n-\t\t\t\t\t\t\t.setECDSA384(ByteString.copyFrom(new byte[]{0x01, 0x02}))\n-\t\t\t\t\t\t\t.build()\n-\t\t\t)\n-\t\t\t.build();\n-\n-\tScheduleCreateTransactionBody op;\n-\tTransactionBody txn;\n-\n-\tEstimatorFactory factory;\n-\tTxnUsageEstimator base;\n-\tScheduleCreateUsage subject;\n-\n-\t@BeforeEach\n-\tpublic void setUp() throws Exception {\n-\t\tbase = mock(TxnUsageEstimator.class);\n-\t\tgiven(base.get()).willReturn(A_USAGES_MATRIX);\n-\n-\t\tfactory = mock(EstimatorFactory.class);\n-\t\tgiven(factory.get(any(), any(), any())).willReturn(base);\n-\n-\t\tTxnUsage.estimatorFactory = factory;\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDeltaForTXExpiry() {\n-\t\t// setup:\n-\t\tvar expectedTxBytes = transactionBody.length;\n-\t\tvar expectedRamBytes = baseRamBytes();\n-\t\tgivenBaseOp();\n-\n-\t\t// and:\n-\t\tsubject = ScheduleCreateUsage.newEstimate(txn, sigUsage)\n-\t\t\t.givenScheduledTxExpirationTimeSecs(scheduledTXExpiry);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(expectedTxBytes);\n-\t\tverify(base).addRbs(expectedRamBytes * scheduledTXExpiry);\n-\t\tverify(base).addVpt(0);\n-\t\tverify(base).addNetworkRbs(\n-\t\t\t\t(BASIC_ENTITY_ID_SIZE + scheduledTxnIdSize) * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDeltaForAdminKey() {\n-\t\t// setup:\n-\t\tvar expectedTxBytes = transactionBody.length + FeeBuilder.getAccountKeyStorageSize(adminKey);\n-\t\tvar expectedRamBytes = baseRamBytes() + FeeBuilder.getAccountKeyStorageSize(adminKey);\n-\t\tgivenOpWithAdminKey();\n-\n-\t\t// and:\n-\t\tsubject = ScheduleCreateUsage.newEstimate(txn, sigUsage)\n-\t\t\t\t.givenScheduledTxExpirationTimeSecs(scheduledTXExpiry);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(expectedTxBytes);\n-\t\tverify(base).addRbs(expectedRamBytes * scheduledTXExpiry);\n-\t\tverify(base).addVpt(0);\n-\t\tverify(base).addNetworkRbs(\n-\t\t\t\t(BASIC_ENTITY_ID_SIZE + scheduledTxnIdSize) * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDeltaForPayer() {\n-\t\t// setup:\n-\t\tvar expectedTxBytes = transactionBody.length + BASIC_ENTITY_ID_SIZE;\n-\t\tvar expectedRamBytes = baseRamBytes();\n-\t\tgivenOpWithPayer();\n-\n-\t\t// and:\n-\t\tsubject = ScheduleCreateUsage.newEstimate(txn, sigUsage)\n-\t\t\t\t.givenScheduledTxExpirationTimeSecs(scheduledTXExpiry);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(expectedTxBytes);\n-\t\tverify(base).addRbs(expectedRamBytes * scheduledTXExpiry);\n-\t\tverify(base).addVpt(0);\n-\t\tverify(base).addNetworkRbs(\n-\t\t\t\t(BASIC_ENTITY_ID_SIZE + scheduledTxnIdSize) * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDeltaForMemo() {\n-\t\t// setup:\n-\t\tvar expectedTxBytes = transactionBody.length + memo.length();\n-\t\tvar expectedRamBytes = baseRamBytesWithMemo();\n-\t\tgivenOpWithMemo();\n-\n-\t\t// and:\n-\t\tsubject = ScheduleCreateUsage.newEstimate(txn, sigUsage)\n-\t\t\t\t.givenScheduledTxExpirationTimeSecs(scheduledTXExpiry);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(expectedTxBytes);\n-\t\tverify(base).addRbs(expectedRamBytes * scheduledTXExpiry);\n-\t\tverify(base).addVpt(0);\n-\t\tverify(base).addNetworkRbs(\n-\t\t\t\t(BASIC_ENTITY_ID_SIZE + scheduledTxnIdSize) * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDeltaForSigMap() {\n-\t\t// setup:\n-\t\tvar expectedTxBytes = transactionBody.length + SCHEDULE_ENTITY_SIZES.bptScheduleReprGiven(sigMap);\n-\t\tvar expectedRamBytes = baseRamBytes() + SCHEDULE_ENTITY_SIZES.sigBytesInScheduleReprGiven(sigMap);\n-\t\tgivenOpWithSigMap();\n-\n-\t\t// and:\n-\t\tsubject = ScheduleCreateUsage.newEstimate(txn, sigUsage)\n-\t\t\t\t.givenScheduledTxExpirationTimeSecs(scheduledTXExpiry);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(expectedTxBytes);\n-\t\tverify(base).addRbs(expectedRamBytes * scheduledTXExpiry);\n-\t\tverify(base).addVpt(sigMap.getSigPairCount());\n-\t\tverify(base).addNetworkRbs(\n-\t\t\t\t(BASIC_ENTITY_ID_SIZE + scheduledTxnIdSize) * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n-\t}\n-\n-\tprivate long baseRamBytes() {\n-\t\treturn SCHEDULE_ENTITY_SIZES.bytesInBaseReprGiven(transactionBody, ByteString.EMPTY);\n-\t}\n-\n-\tprivate long baseRamBytesWithMemo() {\n-\t\treturn SCHEDULE_ENTITY_SIZES.bytesInBaseReprGiven(transactionBody, ByteString.copyFromUtf8(memo));\n-\t}\n-\n-\tprivate void givenBaseOp() {\n-\t\top = ScheduleCreateTransactionBody.newBuilder()\n-\t\t\t\t.setTransactionBody(ByteString.copyFrom(transactionBody))\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void givenOpWithAdminKey() {\n-\t\top = ScheduleCreateTransactionBody.newBuilder()\n-\t\t\t\t.setTransactionBody(ByteString.copyFrom(transactionBody))\n-\t\t\t\t.setAdminKey(adminKey)\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void givenOpWithPayer() {\n-\t\top = ScheduleCreateTransactionBody.newBuilder()\n-\t\t\t\t.setTransactionBody(ByteString.copyFrom(transactionBody))\n-\t\t\t\t.setPayerAccountID(payer)\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void givenOpWithSigMap() {\n-\t\top = ScheduleCreateTransactionBody.newBuilder()\n-\t\t\t\t.setTransactionBody(ByteString.copyFrom(transactionBody))\n-\t\t\t\t.setSigMap(sigMap)\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void givenOpWithMemo() {\n-\t\top = ScheduleCreateTransactionBody.newBuilder()\n-\t\t\t\t.setTransactionBody(ByteString.copyFrom(transactionBody))\n-\t\t\t\t.setMemo(memo)\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void setTxn() {\n-\t\ttxn = TransactionBody.newBuilder()\n-\t\t\t\t.setTransactionID(TransactionID.newBuilder()\n-\t\t\t\t\t\t.setTransactionValidStart(Timestamp.newBuilder()\n-\t\t\t\t\t\t\t\t.setSeconds(now)))\n-\t\t\t\t.setScheduleCreate(op)\n-\t\t\t\t.build();\n-\t}\n-}"
  },
  {
    "sha": "16bfa7a417606433aa5f4db5bf940cdcfe7f0251",
    "filename": "hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleDeleteUsageTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 108,
    "changes": 108,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleDeleteUsageTest.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleDeleteUsageTest.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleDeleteUsageTest.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,108 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.hedera.services.test.IdUtils;\n-import com.hedera.services.usage.EstimatorFactory;\n-import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.TxnUsage;\n-import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hederahashgraph.api.proto.java.ScheduleDeleteTransactionBody;\n-import com.hederahashgraph.api.proto.java.ScheduleID;\n-import com.hederahashgraph.api.proto.java.Timestamp;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n-import com.hederahashgraph.api.proto.java.TransactionID;\n-import com.hederahashgraph.fee.FeeBuilder;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import static com.hedera.services.test.UsageUtils.A_USAGES_MATRIX;\n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.given;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-\n-public class ScheduleDeleteUsageTest {\n-\n-\tlong now = 1_000L;\n-\tScheduleID scheduleID = IdUtils.asSchedule(\"0.0.1\");\n-\tint numSigs = 3, sigSize = 100, numPayerKeys = 1;\n-\tSigUsage sigUsage = new SigUsage(numSigs, sigSize, numPayerKeys);\n-\n-\tScheduleDeleteTransactionBody op;\n-\tTransactionBody txn;\n-\n-\tEstimatorFactory factory;\n-\tTxnUsageEstimator base;\n-\tScheduleDeleteUsage subject;\n-\n-\t@BeforeEach\n-\tpublic void setUp() throws Exception {\n-\t\tbase = mock(TxnUsageEstimator.class);\n-\t\tgiven(base.get()).willReturn(A_USAGES_MATRIX);\n-\n-\t\tfactory = mock(EstimatorFactory.class);\n-\t\tgiven(factory.get(any(), any(), any())).willReturn(base);\n-\n-\t\tTxnUsage.estimatorFactory = factory;\n-\t}\n-\n-\t@Test\n-\tpublic void returnsSelf() {\n-\t\tgivenOp();\n-\t\t// and:\n-\t\tsubject = ScheduleDeleteUsage.newEstimate(txn, sigUsage);\n-\n-\t\tassertEquals(subject, subject.self());\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDelta() {\n-\t\tgivenOp();\n-\t\t// and:\n-\t\tsubject = ScheduleDeleteUsage.newEstimate(txn, sigUsage);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(FeeBuilder.BASIC_ENTITY_ID_SIZE);\n-\t}\n-\n-\tprivate void givenOp() {\n-\t\top = ScheduleDeleteTransactionBody.newBuilder()\n-\t\t\t\t.setScheduleID(scheduleID)\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void setTxn() {\n-\t\ttxn = TransactionBody.newBuilder()\n-\t\t\t\t.setTransactionID(TransactionID.newBuilder()\n-\t\t\t\t\t\t.setTransactionValidStart(Timestamp.newBuilder()\n-\t\t\t\t\t\t\t\t.setSeconds(now)))\n-\t\t\t\t.setScheduleDelete(op)\n-\t\t\t\t.build();\n-\t}\n-}"
  },
  {
    "sha": "9a003a7bdc81c1916d7223dc127ad75ab762ebdc",
    "filename": "hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsageTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 95,
    "changes": 95,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsageTest.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsageTest.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleGetInfoUsageTest.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,95 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.google.protobuf.ByteString;\n-import com.hedera.services.test.IdUtils;\n-import com.hedera.services.test.KeyUtils;\n-import com.hederahashgraph.api.proto.java.Key;\n-import com.hederahashgraph.api.proto.java.KeyList;\n-import com.hederahashgraph.api.proto.java.Query;\n-import com.hederahashgraph.api.proto.java.ScheduleGetInfoQuery;\n-import com.hederahashgraph.api.proto.java.ScheduleID;\n-import com.hederahashgraph.api.proto.java.TransactionID;\n-import com.hederahashgraph.fee.FeeBuilder;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import java.util.Optional;\n-\n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_QUERY_RES_HEADER;\n-import static org.junit.Assert.assertEquals;\n-\n-public class ScheduleGetInfoUsageTest {\n-\tTransactionID scheduledTxnId = TransactionID.newBuilder()\n-\t\t\t.setScheduled(true)\n-\t\t\t.setAccountID(IdUtils.asAccount(\"0.0.2\"))\n-\t\t\t.setNonce(ByteString.copyFromUtf8(\"Something something something\"))\n-\t\t\t.build();\n-\tOptional<Key> adminKey = Optional.of(KeyUtils.A_COMPLEX_KEY);\n-\tOptional<KeyList> signers = Optional.of(KeyUtils.DUMMY_KEY_LIST);\n-\tScheduleID id = IdUtils.asSchedule(\"0.0.1\");\n-\tbyte[] transactionBody = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};\n-\tScheduleGetInfoUsage subject;\n-\tByteString memo = ByteString.copyFromUtf8(\"This is just a memo?\");\n-\n-\t@BeforeEach\n-\tpublic void setup() {\n-\t\tsubject = ScheduleGetInfoUsage.newEstimate(scheduleQuery());\n-\t}\n-\n-\t@Test\n-\tpublic void assessesRequiredBytes() {\n-\t\t// given:\n-\t\tsubject.givenCurrentAdminKey(adminKey)\n-\t\t\t\t.givenSignatories(signers)\n-\t\t\t\t.givenTransaction(transactionBody)\n-\t\t\t\t.givenMemo(memo)\n-\t\t\t\t.givenScheduledTxnId(scheduledTxnId);\n-\n-\t\t// and:\n-\t\tvar expectedAdminBytes = FeeBuilder.getAccountKeyStorageSize(adminKey.get());\n-\t\tvar signersBytes = signers.get().toByteArray().length;\n-\t\tvar expectedBytes = BASIC_QUERY_RES_HEADER\n-\t\t\t\t+ scheduledTxnId.toByteArray().length\n-\t\t\t\t+ expectedAdminBytes\n-\t\t\t\t+ signersBytes\n-\t\t\t\t+ SCHEDULE_ENTITY_SIZES.bytesInBaseReprGiven(transactionBody, memo);\n-\n-\t\t// when:\n-\t\tvar usage = subject.get();\n-\n-\t\t// then:\n-\t\tvar node = usage.getNodedata();\n-\t\tassertEquals(FeeBuilder.BASIC_QUERY_HEADER + BASIC_ENTITY_ID_SIZE, node.getBpt());\n-\t\tassertEquals(expectedBytes, node.getBpr());\n-\n-\t}\n-\n-\tprivate Query scheduleQuery() {\n-\t\tvar op = ScheduleGetInfoQuery.newBuilder()\n-\t\t\t\t.setScheduleID(id)\n-\t\t\t\t.build();\n-\t\treturn Query.newBuilder().setScheduleGetInfo(op).build();\n-\t}\n-}"
  },
  {
    "sha": "ba9a6ec77851c4bedd3a98974e03fd7e90dc0159",
    "filename": "hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleOpsUsageTest.java",
    "status": "added",
    "additions": 219,
    "deletions": 0,
    "changes": 219,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleOpsUsageTest.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleOpsUsageTest.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleOpsUsageTest.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -0,0 +1,219 @@\n+package com.hedera.services.usage.schedule;\n+\n+import com.hedera.services.test.IdUtils;\n+import com.hedera.services.test.KeyUtils;\n+import com.hedera.services.usage.EstimatorFactory;\n+import com.hedera.services.usage.QueryUsage;\n+import com.hedera.services.usage.SigUsage;\n+import com.hedera.services.usage.TxnUsageEstimator;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.CryptoDeleteTransactionBody;\n+import com.hederahashgraph.api.proto.java.Duration;\n+import com.hederahashgraph.api.proto.java.Key;\n+import com.hederahashgraph.api.proto.java.KeyList;\n+import com.hederahashgraph.api.proto.java.Query;\n+import com.hederahashgraph.api.proto.java.QueryHeader;\n+import com.hederahashgraph.api.proto.java.ResponseType;\n+import com.hederahashgraph.api.proto.java.SchedulableTransactionBody;\n+import com.hederahashgraph.api.proto.java.ScheduleCreateTransactionBody;\n+import com.hederahashgraph.api.proto.java.ScheduleDeleteTransactionBody;\n+import com.hederahashgraph.api.proto.java.ScheduleGetInfoQuery;\n+import com.hederahashgraph.api.proto.java.ScheduleID;\n+import com.hederahashgraph.api.proto.java.ScheduleSignTransactionBody;\n+import com.hederahashgraph.api.proto.java.Timestamp;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionID;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.function.Function;\n+\n+import static com.hedera.services.test.UsageUtils.A_USAGES_MATRIX;\n+import static com.hedera.services.usage.SingletonUsageProperties.USAGE_PROPERTIES;\n+import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n+import static com.hederahashgraph.api.proto.java.ResponseType.ANSWER_STATE_PROOF;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_RICH_INSTANT_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BASIC_TX_ID_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.BOOL_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.KEY_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.getAccountKeyStorageSize;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+class ScheduleOpsUsageTest {\n+\tint numSigs = 3, sigSize = 144, numPayerKeys = 1;\n+\tint scheduledTxnIdSize = BASIC_TX_ID_SIZE + BOOL_SIZE;\n+\tlong now = 1_234_567L;\n+\tlong lifetimeSecs = 1800L;\n+\tSigUsage sigUsage = new SigUsage(numSigs, sigSize, numPayerKeys);\n+\n+\tKey adminKey = KeyUtils.A_COMPLEX_KEY;\n+\tScheduleID id = IdUtils.asSchedule(\"0.0.1\");\n+\tString memo = \"This is just a memo?\";\n+\tAccountID payer = IdUtils.asAccount(\"0.0.2\");\n+\tSchedulableTransactionBody scheduledTxn = SchedulableTransactionBody.newBuilder()\n+\t\t\t.setTransactionFee(1_234_567L)\n+\t\t\t.setCryptoDelete(CryptoDeleteTransactionBody.newBuilder()\n+\t\t\t\t\t.setDeleteAccountID(payer))\n+\t\t\t.build();\n+\n+\tEstimatorFactory factory;\n+\tTxnUsageEstimator base;\n+\tFunction<ResponseType, QueryUsage> queryEstimatorFactory;\n+\tQueryUsage queryBase;\n+\n+\tScheduleOpsUsage subject = new ScheduleOpsUsage();\n+\n+\t@BeforeEach\n+\t@SuppressWarnings(\"unchecked\")\n+\tvoid setUp() {\n+\t\tbase = mock(TxnUsageEstimator.class);\n+\t\tgiven(base.get()).willReturn(A_USAGES_MATRIX);\n+\t\tqueryBase = mock(QueryUsage.class);\n+\t\tgiven(queryBase.get()).willReturn(A_USAGES_MATRIX);\n+\n+\t\tfactory = mock(EstimatorFactory.class);\n+\t\tgiven(factory.get(any(), any(), any())).willReturn(base);\n+\t\tqueryEstimatorFactory = mock(Function.class);\n+\t\tgiven(queryEstimatorFactory.apply(ANSWER_STATE_PROOF)).willReturn(queryBase);\n+\n+\t\tScheduleOpsUsage.txnEstimateFactory = factory;\n+\t\tScheduleOpsUsage.queryEstimateFactory = queryEstimatorFactory;\n+\t}\n+\n+\t@Test\n+\tpublic void estimatesSignAsExpected() {\n+\t\t// setup:\n+\t\tlong lifetimeSecs = 1800L;\n+\n+\t\t// when:\n+\t\tvar estimate = subject.scheduleSignUsage(signingTxn(), sigUsage, now + lifetimeSecs);\n+\n+\t\t// then:\n+\t\tassertSame(A_USAGES_MATRIX, estimate);\n+\t\t// and:\n+\t\tverify(base).addBpt(BASIC_ENTITY_ID_SIZE);\n+\t\tverify(base).addRbs(2 * KEY_SIZE * lifetimeSecs);\n+\t\tverify(base).addNetworkRbs(\n+\t\t\t\tscheduledTxnIdSize * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n+\t}\n+\n+\t@Test\n+\tpublic void estimatesDeleteExpected() {\n+\t\t// setup:\n+\t\tlong lifetimeSecs = 1800L;\n+\n+\t\t// when:\n+\t\tvar estimate = subject.scheduleDeleteUsage(deletionTxn(), sigUsage, now + lifetimeSecs);\n+\n+\t\t// then:\n+\t\tassertSame(A_USAGES_MATRIX, estimate);\n+\t\t// and:\n+\t\tverify(base).addBpt(BASIC_ENTITY_ID_SIZE);\n+\t\tverify(base).addRbs(BASIC_RICH_INSTANT_SIZE * lifetimeSecs);\n+\t}\n+\n+\t@Test\n+\tpublic void estimatesCreateAsExpected() {\n+\t\t// given:\n+\t\tvar createdCtx = ExtantScheduleContext.newBuilder()\n+\t\t\t\t.setAdminKey(adminKey)\n+\t\t\t\t.setMemo(memo)\n+\t\t\t\t.setScheduledTxn(scheduledTxn)\n+\t\t\t\t.setNumSigners(SCHEDULE_ENTITY_SIZES.estimatedScheduleSigs(sigUsage))\n+\t\t\t\t.setResolved(false)\n+\t\t\t\t.build();\n+\t\tvar expectedRamBytes = createdCtx.nonBaseRb();\n+\t\t// and:\n+\t\tvar expectedTxBytes = scheduledTxn.getSerializedSize()\n+\t\t\t\t+ getAccountKeyStorageSize(adminKey)\n+\t\t\t\t+ memo.length()\n+\t\t\t\t+ BASIC_ENTITY_ID_SIZE;\n+\n+\t\t// when:\n+\t\tvar estimate = subject.scheduleCreateUsage(creationTxn(), sigUsage, lifetimeSecs);\n+\n+\t\t// then:\n+\t\tassertSame(A_USAGES_MATRIX, estimate);\n+\t\t// and:\n+\t\tverify(base).addBpt(expectedTxBytes);\n+\t\tverify(base).addRbs(expectedRamBytes * lifetimeSecs);\n+\t\tverify(base).addNetworkRbs(\n+\t\t\t\t(BASIC_ENTITY_ID_SIZE + scheduledTxnIdSize) * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n+\t}\n+\n+\t@Test\n+\tpublic void estimatesGetInfoAsExpected() {\n+\t\t// given:\n+\t\tvar ctx = ExtantScheduleContext.newBuilder()\n+\t\t\t\t.setAdminKey(adminKey)\n+\t\t\t\t.setMemo(memo)\n+\t\t\t\t.setNumSigners(2)\n+\t\t\t\t.setResolved(true)\n+\t\t\t\t.setScheduledTxn(scheduledTxn)\n+\t\t\t\t.build();\n+\n+\t\t// when:\n+\t\tvar estimate = subject.scheduleInfoUsage(scheduleQuery(), ctx);\n+\n+\t\t// then:\n+\t\tassertSame(A_USAGES_MATRIX, estimate);\n+\t\t// and:\n+\t\tverify(queryBase).updateTb(BASIC_ENTITY_ID_SIZE);\n+\t\tverify(queryBase).updateRb(ctx.nonBaseRb());\n+\t}\n+\n+\tprivate Query scheduleQuery() {\n+\t\tvar op = ScheduleGetInfoQuery.newBuilder()\n+\t\t\t\t.setHeader(QueryHeader.newBuilder()\n+\t\t\t\t\t\t.setResponseType(ANSWER_STATE_PROOF)\n+\t\t\t\t\t\t.build())\n+\t\t\t\t.setScheduleID(id)\n+\t\t\t\t.build();\n+\t\treturn Query.newBuilder().setScheduleGetInfo(op).build();\n+\t}\n+\n+\tprivate TransactionBody creationTxn() {\n+\t\treturn baseTxn().setScheduleCreate(creationOp()).build();\n+\t}\n+\n+\tprivate TransactionBody deletionTxn() {\n+\t\treturn baseTxn().setScheduleDelete(deletionOp()).build();\n+\t}\n+\n+\tprivate TransactionBody signingTxn() {\n+\t\treturn baseTxn().setScheduleSign(signingOp()).build();\n+\t}\n+\n+\tprivate TransactionBody.Builder baseTxn() {\n+\t\treturn TransactionBody.newBuilder()\n+\t\t\t\t.setTransactionID(TransactionID.newBuilder()\n+\t\t\t\t\t\t.setTransactionValidStart(Timestamp.newBuilder().setSeconds(now))\n+\t\t\t\t\t\t.build());\n+\t}\n+\n+\tprivate ScheduleCreateTransactionBody creationOp() {\n+\t\treturn ScheduleCreateTransactionBody.newBuilder()\n+\t\t\t\t.setMemo(memo)\n+\t\t\t\t.setAdminKey(adminKey)\n+\t\t\t\t.setPayerAccountID(payer)\n+\t\t\t\t.setScheduledTransactionBody(scheduledTxn)\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate ScheduleDeleteTransactionBody deletionOp() {\n+\t\treturn ScheduleDeleteTransactionBody.newBuilder()\n+\t\t\t\t.setScheduleID(id)\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate ScheduleSignTransactionBody signingOp() {\n+\t\treturn ScheduleSignTransactionBody.newBuilder()\n+\t\t\t\t.setScheduleID(id)\n+\t\t\t\t.build();\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d332f96d457104ed1dcda3fb365d88f63a29fd3c",
    "filename": "hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleSignUsageTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 154,
    "changes": 154,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleSignUsageTest.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/0ad046698887d5f9cfff3f534dc7aff7625388da/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleSignUsageTest.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/test/java/com/hedera/services/usage/schedule/ScheduleSignUsageTest.java?ref=0ad046698887d5f9cfff3f534dc7aff7625388da",
    "patch": "@@ -1,154 +0,0 @@\n-package com.hedera.services.usage.schedule;\n-\n-/*\n- * ‚Äå\n- * Hedera Services API Fees\n- * ‚Äã\n- * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n- * ‚Äã\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ‚Äç\n- */\n-\n-import com.google.protobuf.ByteString;\n-import com.hedera.services.test.IdUtils;\n-import com.hedera.services.usage.EstimatorFactory;\n-import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.TxnUsage;\n-import com.hedera.services.usage.TxnUsageEstimator;\n-import com.hederahashgraph.api.proto.java.ScheduleID;\n-import com.hederahashgraph.api.proto.java.ScheduleSignTransactionBody;\n-import com.hederahashgraph.api.proto.java.SignatureMap;\n-import com.hederahashgraph.api.proto.java.SignaturePair;\n-import com.hederahashgraph.api.proto.java.Timestamp;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n-import com.hederahashgraph.api.proto.java.TransactionID;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import static com.hedera.services.test.UsageUtils.A_USAGES_MATRIX;\n-import static com.hedera.services.usage.SingletonUsageProperties.USAGE_PROPERTIES;\n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_TX_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BOOL_SIZE;\n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.given;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-\n-public class ScheduleSignUsageTest {\n-\tint nonceBytes = 32;\n-\tint scheduledTxnIdSize = BASIC_TX_ID_SIZE + BOOL_SIZE + nonceBytes;\n-\tlong now = 1_000L;\n-\tlong scheduledTXExpiry = 2_700;\n-\tScheduleID scheduleID = IdUtils.asSchedule(\"0.0.1\");\n-\tint numSigs = 3, sigSize = 100, numPayerKeys = 1;\n-\tSigUsage sigUsage = new SigUsage(numSigs, sigSize, numPayerKeys);\n-\tSignatureMap sigMap = SignatureMap.newBuilder()\n-\t\t\t.addSigPair(\n-\t\t\t\t\tSignaturePair.newBuilder()\n-\t\t\t\t\t\t\t.setPubKeyPrefix(ByteString.copyFrom(new byte[]{0x01}))\n-\t\t\t\t\t\t\t.setECDSA384(ByteString.copyFrom(new byte[]{0x01, 0x02}))\n-\t\t\t\t\t\t\t.build()\n-\t\t\t).build();\n-\n-\tScheduleSignTransactionBody op;\n-\tTransactionBody txn;\n-\n-\tEstimatorFactory factory;\n-\tTxnUsageEstimator base;\n-\tScheduleSignUsage subject;\n-\n-\t@BeforeEach\n-\tpublic void setUp() throws Exception {\n-\t\tbase = mock(TxnUsageEstimator.class);\n-\t\tgiven(base.get()).willReturn(A_USAGES_MATRIX);\n-\n-\t\tfactory = mock(EstimatorFactory.class);\n-\t\tgiven(factory.get(any(), any(), any())).willReturn(base);\n-\n-\t\tTxnUsage.estimatorFactory = factory;\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDeltaForTXExpiry() {\n-\t\t// setup:\n-\t\tvar expectedTxBytes = BASIC_ENTITY_ID_SIZE;\n-\t\tgivenBaseOp();\n-\n-\t\t// and:\n-\t\tsubject = ScheduleSignUsage.newEstimate(txn, sigUsage)\n-\t\t\t\t.givenNonceBytes(nonceBytes)\n-\t\t\t\t.givenExpiry(scheduledTXExpiry);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(expectedTxBytes);\n-\t\tverify(base).addRbs(0L);\n-\t\tverify(base).addVpt(0);\n-\t\tverify(base).addNetworkRbs(scheduledTxnIdSize * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n-\t}\n-\n-\t@Test\n-\tpublic void createsExpectedDeltaForSigMap() {\n-\t\t// setup:\n-\t\tvar expectedTxBytes = BASIC_ENTITY_ID_SIZE + SCHEDULE_ENTITY_SIZES.bptScheduleReprGiven(sigMap);\n-\t\tvar expectedRamBytes = SCHEDULE_ENTITY_SIZES.sigBytesInScheduleReprGiven(sigMap);\n-\t\tgivenOpWithSigMap();\n-\n-\t\t// and:\n-\t\tsubject = ScheduleSignUsage.newEstimate(txn, sigUsage)\n-\t\t\t\t.givenNonceBytes(nonceBytes)\n-\t\t\t\t.givenExpiry(scheduledTXExpiry);\n-\n-\t\t// when:\n-\t\tvar actual = subject.get();\n-\n-\t\t// then:\n-\t\tassertEquals(A_USAGES_MATRIX, actual);\n-\t\t// and:\n-\t\tverify(base).addBpt(expectedTxBytes);\n-\t\tverify(base).addRbs(expectedRamBytes * (scheduledTXExpiry - now));\n-\t\tverify(base).addVpt(sigMap.getSigPairCount());\n-\t\tverify(base).addNetworkRbs(scheduledTxnIdSize * USAGE_PROPERTIES.legacyReceiptStorageSecs());\n-\t}\n-\n-\tprivate void givenBaseOp() {\n-\t\top = ScheduleSignTransactionBody.newBuilder()\n-\t\t\t\t.setScheduleID(scheduleID)\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void givenOpWithSigMap() {\n-\t\top = ScheduleSignTransactionBody.newBuilder()\n-\t\t\t\t.setSigMap(sigMap)\n-\t\t\t\t.build();\n-\t\tsetTxn();\n-\t}\n-\n-\tprivate void setTxn() {\n-\t\ttxn = TransactionBody.newBuilder()\n-\t\t\t\t.setTransactionID(TransactionID.newBuilder()\n-\t\t\t\t\t\t.setTransactionValidStart(Timestamp.newBuilder()\n-\t\t\t\t\t\t\t\t.setSeconds(now)))\n-\t\t\t\t.setScheduleSign(op)\n-\t\t\t\t.build();\n-\t}\n-}"
  },
  {
    "sha": "2423362299153765dd5e1ea4f6440644adc5e94e",
    "filename": "hapi-fees/src/test/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizesTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 33,
    "changes": 42,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/test/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizesTest.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hapi-fees/src/test/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizesTest.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hapi-fees/src/test/java/com/hedera/services/usage/schedule/entities/ScheduleEntitySizesTest.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -20,51 +20,27 @@\n  * ‚Äç\n  */\n \n-import com.google.protobuf.ByteString;\n+import com.hedera.services.usage.SigUsage;\n import org.junit.jupiter.api.Test;\n \n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.NUM_ENTITY_ID_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION;\n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.NUM_LONG_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION;\n-import static com.hedera.services.usage.schedule.entities.ScheduleEntitySizes.NUM_RICH_INSTANT_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_ENTITY_ID_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.BASIC_RICH_INSTANT_SIZE;\n-import static com.hederahashgraph.fee.FeeBuilder.LONG_SIZE;\n+import static com.hederahashgraph.fee.FeeBuilder.KEY_SIZE;\n import static org.junit.Assert.assertEquals;\n \n public class ScheduleEntitySizesTest {\n-\n \tScheduleEntitySizes subject = ScheduleEntitySizes.SCHEDULE_ENTITY_SIZES;\n \n \t@Test\n-\tpublic void fixedSizesAsExpected() {\n-\t\t// setup:\n-\t\tlong expected = NUM_LONG_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * LONG_SIZE\n-\t\t\t\t+ NUM_ENTITY_ID_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * BASIC_ENTITY_ID_SIZE\n-\t\t\t\t+ NUM_RICH_INSTANT_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * BASIC_RICH_INSTANT_SIZE;\n-\n-\t\t// given:\n-\t\tlong actual = subject.fixedBytesInScheduleRepr();\n-\n+\tvoid estimatesSigsAsExpected() {\n \t\t// expect:\n-\t\tassertEquals(expected, actual);\n+\t\tassertEquals(2,\n+\t\t\t\tsubject.estimatedScheduleSigs(new SigUsage(3, 100, 1)));\n+\t\tassertEquals(1,\n+\t\t\t\tsubject.estimatedScheduleSigs(new SigUsage(3, 100, 10)));\n \t}\n \n \t@Test\n-\tpublic void bytesInBaseReprGivenAsExpected() {\n-\t\t// setup:\n-\t\tvar transactionBody = new byte[]{0x00, 0x01, 0x02, 0x03};\n-\t\tvar memo = \"memo\";\n-\t\tlong expected = NUM_LONG_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * LONG_SIZE\n-\t\t\t\t+ NUM_ENTITY_ID_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * BASIC_ENTITY_ID_SIZE\n-\t\t\t\t+ NUM_RICH_INSTANT_FIELDS_IN_BASE_SCHEDULE_REPRESENTATION * BASIC_RICH_INSTANT_SIZE\n-\t\t\t\t+ transactionBody.length\n-\t\t\t\t+ memo.length();\n-\n-\t\t// given:\n-\t\tlong actual = subject.bytesInBaseReprGiven(transactionBody, ByteString.copyFromUtf8(memo));\n-\n+\tvoid estimatesSig() {\n \t\t// expect:\n-\t\tassertEquals(expected, actual);\n+\t\tassertEquals(7 * KEY_SIZE, subject.bytesUsedForSigningKeys(7));\n \t}\n-\n }"
  },
  {
    "sha": "5080eda4d6ec9ab044ac9205fe0d659a59dbad9a",
    "filename": "hedera-node/src/main/java/com/hedera/services/context/ServicesContext.java",
    "status": "modified",
    "additions": 24,
    "deletions": 8,
    "changes": 32,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/context/ServicesContext.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/context/ServicesContext.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/context/ServicesContext.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -196,6 +196,7 @@\n import com.hedera.services.state.initialization.HfsSystemFilesManager;\n import com.hedera.services.state.initialization.SystemAccountsCreator;\n import com.hedera.services.state.initialization.SystemFilesManager;\n+import com.hedera.services.state.logic.AwareNodeDiligenceScreen;\n import com.hedera.services.state.merkle.MerkleAccount;\n import com.hedera.services.state.merkle.MerkleBlobMeta;\n import com.hedera.services.state.merkle.MerkleDiskFs;\n@@ -278,6 +279,7 @@\n import com.hedera.services.txns.validation.OptionValidator;\n import com.hedera.services.usage.crypto.CryptoOpsUsage;\n import com.hedera.services.usage.file.FileOpsUsage;\n+import com.hedera.services.usage.schedule.ScheduleOpsUsage;\n import com.hedera.services.utils.EntityIdUtils;\n import com.hedera.services.utils.MiscUtils;\n import com.hedera.services.utils.Pause;\n@@ -495,6 +497,7 @@\n \tprivate CharacteristicsFactory characteristics;\n \tprivate AccountRecordsHistorian recordsHistorian;\n \tprivate GlobalDynamicProperties globalDynamicProperties;\n+\tprivate AwareNodeDiligenceScreen nodeDiligenceScreen;\n \tprivate InHandleActivationHelper activationHelper;\n \tprivate PlatformSubmissionManager submissionManager;\n \tprivate SmartContractRequestHandler contracts;\n@@ -566,7 +569,7 @@ public void rebuildStoreViewsIfPresent() {\n \n \tpublic SigFactoryCreator sigFactoryCreator() {\n \t\tif (sigFactoryCreator == null) {\n-\t\t\tsigFactoryCreator = new SigFactoryCreator(this::schedules);\n+\t\t\tsigFactoryCreator = new SigFactoryCreator();\n \t\t}\n \t\treturn sigFactoryCreator;\n \t}\n@@ -595,6 +598,13 @@ public MiscSpeedometers speedometers() {\n \t\treturn speedometers;\n \t}\n \n+\tpublic AwareNodeDiligenceScreen nodeDiligenceScreen() {\n+\t\tif (nodeDiligenceScreen == null) {\n+\t\t\tnodeDiligenceScreen = new AwareNodeDiligenceScreen(validator(), txnCtx(), backingAccounts());\n+\t\t}\n+\t\treturn nodeDiligenceScreen;\n+\t}\n+\n \tpublic SemanticVersions semVers() {\n \t\tif (semVers == null) {\n \t\t\tsemVers = new SemanticVersions();\n@@ -864,6 +874,7 @@ public FeeCalculator fees() {\n \t\t\tCryptoOpsUsage cryptoOpsUsage = new CryptoOpsUsage();\n \t\t\tFileFeeBuilder fileFees = new FileFeeBuilder();\n \t\t\tCryptoFeeBuilder cryptoFees = new CryptoFeeBuilder();\n+\t\t\tScheduleOpsUsage scheduleOpsUsage = new ScheduleOpsUsage();\n \t\t\tSmartContractFeeBuilder contractFees = new SmartContractFeeBuilder();\n \n \t\t\tfees = new UsageBasedFeeCalculator(\n@@ -890,9 +901,10 @@ public FeeCalculator fees() {\n \t\t\t\t\t\t\t/* Token */\n \t\t\t\t\t\t\tnew GetTokenInfoResourceUsage(),\n \t\t\t\t\t\t\t/* Schedule */\n-\t\t\t\t\t\t\tnew GetScheduleInfoResourceUsage()\n+\t\t\t\t\t\t\tnew GetScheduleInfoResourceUsage(scheduleOpsUsage)\n \t\t\t\t\t),\n-\t\t\t\t\ttxnUsageEstimators(cryptoOpsUsage, fileOpsUsage, fileFees, cryptoFees, contractFees)\n+\t\t\t\t\ttxnUsageEstimators(\n+\t\t\t\t\t\t\tcryptoOpsUsage, fileOpsUsage, fileFees, cryptoFees, contractFees, scheduleOpsUsage)\n \t\t\t);\n \t\t}\n \t\treturn fees;\n@@ -903,8 +915,11 @@ public FeeCalculator fees() {\n \t\t\tFileOpsUsage fileOpsUsage,\n \t\t\tFileFeeBuilder fileFees,\n \t\t\tCryptoFeeBuilder cryptoFees,\n-\t\t\tSmartContractFeeBuilder contractFees\n+\t\t\tSmartContractFeeBuilder contractFees,\n+\t\t\tScheduleOpsUsage scheduleOpsUsage\n \t) {\n+\t\tvar props = globalDynamicProperties();\n+\n \t\tMap<HederaFunctionality, List<TxnResourceUsageEstimator>> estimatorsMap = Map.ofEntries(\n \t\t\t\t/* Crypto */\n \t\t\t\tentry(CryptoCreate, List.of(new CryptoCreateResourceUsage(cryptoOpsUsage))),\n@@ -940,14 +955,15 @@ public FeeCalculator fees() {\n \t\t\t\tentry(TokenAssociateToAccount, List.of(new TokenAssociateResourceUsage())),\n \t\t\t\tentry(TokenDissociateFromAccount, List.of(new TokenDissociateResourceUsage())),\n \t\t\t\t/* Schedule */\n-\t\t\t\tentry(ScheduleCreate, List.of(new ScheduleCreateResourceUsage(globalDynamicProperties()))),\n-\t\t\t\tentry(ScheduleDelete, List.of(new ScheduleDeleteResourceUsage())),\n-\t\t\t\tentry(ScheduleSign, List.of(new ScheduleSignResourceUsage(globalDynamicProperties()))),\n+\t\t\t\tentry(ScheduleCreate, List.of(new ScheduleCreateResourceUsage(props, scheduleOpsUsage))),\n+\t\t\t\tentry(ScheduleDelete, List.of(new ScheduleDeleteResourceUsage(scheduleOpsUsage, props))),\n+\t\t\t\tentry(ScheduleSign, List.of(new ScheduleSignResourceUsage(scheduleOpsUsage, props))),\n \t\t\t\t/* System */\n \t\t\t\tentry(Freeze, List.of(new FreezeResourceUsage())),\n \t\t\t\tentry(SystemDelete, List.of(new SystemDeleteFileResourceUsage(fileFees))),\n \t\t\t\tentry(SystemUndelete, List.of(new SystemUndeleteFileResourceUsage(fileFees)))\n \t\t);\n+\n \t\treturn estimatorsMap::get;\n \t}\n \n@@ -1359,7 +1375,7 @@ public TokenStore tokenStore() {\n \n \tpublic ScheduleStore scheduleStore() {\n \t\tif (scheduleStore == null) {\n-\t\t\tscheduleStore = new HederaScheduleStore(globalDynamicProperties(), ids(), this::schedules);\n+\t\t\tscheduleStore = new HederaScheduleStore(globalDynamicProperties(), ids(), txnCtx(), this::schedules);\n \t\t}\n \t\treturn scheduleStore;\n \t}"
  },
  {
    "sha": "60b2ba6088a29b702059d38e4a15ca7ea5ca37af",
    "filename": "hedera-node/src/main/java/com/hedera/services/context/primitives/StateView.java",
    "status": "modified",
    "additions": 8,
    "deletions": 3,
    "changes": 11,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/context/primitives/StateView.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/context/primitives/StateView.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/context/primitives/StateView.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -295,13 +295,18 @@ public StateView(\n \n \t\t\tvar info = ScheduleInfo.newBuilder()\n \t\t\t\t\t.setScheduleID(id)\n+\t\t\t\t\t.setScheduledTransactionBody(schedule.scheduledTxn())\n \t\t\t\t\t.setScheduledTransactionID(schedule.scheduledTransactionId())\n-\t\t\t\t\t.setTransactionBody(ByteString.copyFrom(schedule.transactionBody()))\n \t\t\t\t\t.setCreatorAccountID(schedule.schedulingAccount().toGrpcAccountId())\n-\t\t\t\t\t.setPayerAccountID(schedule.payer().toGrpcAccountId())\n-\t\t\t\t\t.setSignatories(signatoriesList)\n+\t\t\t\t\t.setPayerAccountID(schedule.effectivePayer().toGrpcAccountId())\n+\t\t\t\t\t.setSigners(signatoriesList)\n \t\t\t\t\t.setExpirationTime(Timestamp.newBuilder().setSeconds(schedule.expiry()));\n \t\t\tschedule.memo().ifPresent(info::setMemo);\n+\t\t\tif (schedule.isDeleted()) {\n+\t\t\t\tinfo.setDeletionTime(schedule.deletionTime());\n+\t\t\t} else if (schedule.isExecuted()) {\n+\t\t\t\tinfo.setExecutionTime(schedule.executionTime());\n+\t\t\t}\n \n \t\t\tvar adminCandidate = schedule.adminKey();\n \t\t\tadminCandidate.ifPresent(k -> info.setAdminKey(asKeyUnchecked(k)));"
  },
  {
    "sha": "5cb499065b3f0b92c5ee57919b99d283c922ddc6",
    "filename": "hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/queries/GetScheduleInfoResourceUsage.java",
    "status": "modified",
    "additions": 18,
    "deletions": 17,
    "changes": 35,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/queries/GetScheduleInfoResourceUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/queries/GetScheduleInfoResourceUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/queries/GetScheduleInfoResourceUsage.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -22,26 +22,28 @@\n \n import com.hedera.services.context.primitives.StateView;\n import com.hedera.services.fees.calculation.QueryResourceUsageEstimator;\n-import com.hedera.services.usage.schedule.ScheduleGetInfoUsage;\n+import com.hedera.services.usage.schedule.ExtantScheduleContext;\n+import com.hedera.services.usage.schedule.ScheduleOpsUsage;\n import com.hederahashgraph.api.proto.java.FeeData;\n import com.hederahashgraph.api.proto.java.Query;\n import com.hederahashgraph.api.proto.java.ResponseType;\n-import com.hederahashgraph.api.proto.java.ScheduleInfo;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n import java.util.Map;\n import java.util.Optional;\n-import java.util.function.Function;\n-import java.util.function.Predicate;\n \n import static com.hedera.services.queries.AnswerService.NO_QUERY_CTX;\n import static com.hedera.services.queries.schedule.GetScheduleInfoAnswer.SCHEDULE_INFO_CTX_KEY;\n \n public class GetScheduleInfoResourceUsage implements QueryResourceUsageEstimator {\n \tprivate static final Logger log = LogManager.getLogger(GetScheduleInfoResourceUsage.class);\n \n-\tstatic Function<Query, ScheduleGetInfoUsage> factory = ScheduleGetInfoUsage::newEstimate;\n+\tprivate final ScheduleOpsUsage scheduleOpsUsage;\n+\n+\tpublic GetScheduleInfoResourceUsage(ScheduleOpsUsage scheduleOpsUsage) {\n+\t\tthis.scheduleOpsUsage = scheduleOpsUsage;\n+\t}\n \n \t@Override\n \tpublic boolean applicableTo(Query query) {\n@@ -72,20 +74,19 @@ private FeeData usageFor(Query query, StateView view, Optional<Map<String, Objec\n \t\tif (optionalInfo.isPresent()) {\n \t\t\tvar info = optionalInfo.get();\n \t\t\tqueryCtx.ifPresent(ctx -> ctx.put(SCHEDULE_INFO_CTX_KEY, info));\n-\t\t\tvar estimate = factory.apply(query)\n-\t\t\t\t\t.givenScheduledTxnId(info.getScheduledTransactionID())\n-\t\t\t\t\t.givenTransaction(info.getTransactionBody().toByteArray())\n-\t\t\t\t\t.givenMemo(info.getMemoBytes())\n-\t\t\t\t\t.givenSignatories(ifPresent(info, ScheduleInfo::hasSignatories, ScheduleInfo::getSignatories))\n-\t\t\t\t\t.givenCurrentAdminKey(ifPresent(info, ScheduleInfo::hasAdminKey, ScheduleInfo::getAdminKey));\n-\t\t\treturn estimate.get();\n+\t\t\tvar scheduleCtxBuilder = ExtantScheduleContext.newBuilder()\n+\t\t\t\t\t.setScheduledTxn(info.getScheduledTransactionBody())\n+\t\t\t\t\t.setMemo(info.getMemo())\n+\t\t\t\t\t.setNumSigners(info.getSigners().getKeysCount())\n+\t\t\t\t\t.setResolved(info.hasExpirationTime() || info.hasDeletionTime());\n+\t\t\tif (info.hasAdminKey()) {\n+\t\t\t\tscheduleCtxBuilder.setAdminKey(info.getAdminKey());\n+\t\t\t} else {\n+\t\t\t\tscheduleCtxBuilder.setNoAdminKey();\n+\t\t\t}\n+\t\t\treturn scheduleOpsUsage.scheduleInfoUsage(query, scheduleCtxBuilder.build());\n \t\t} else {\n \t\t\treturn FeeData.getDefaultInstance();\n \t\t}\n \t}\n-\n-\tprivate static <T, K> Optional<T> ifPresent(K info, Predicate<K> check, Function<K, T> getter) {\n-\t\treturn check.test(info) ? Optional.of(getter.apply(info)) : Optional.empty();\n-\t}\n-\n }"
  },
  {
    "sha": "6dcd77970b47ac5b0b59e8ed56ef8d1baae83ab2",
    "filename": "hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleCreateResourceUsage.java",
    "status": "modified",
    "additions": 23,
    "deletions": 22,
    "changes": 45,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleCreateResourceUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleCreateResourceUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleCreateResourceUsage.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -24,33 +24,34 @@\n import com.hedera.services.context.properties.GlobalDynamicProperties;\n import com.hedera.services.fees.calculation.TxnResourceUsageEstimator;\n import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.schedule.ScheduleCreateUsage;\n+import com.hedera.services.usage.schedule.ScheduleOpsUsage;\n import com.hederahashgraph.api.proto.java.FeeData;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import com.hederahashgraph.exception.InvalidTxBodyException;\n import com.hederahashgraph.fee.SigValueObj;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n \n-import java.util.function.BiFunction;\n \n public class ScheduleCreateResourceUsage implements TxnResourceUsageEstimator {\n-\n-    static BiFunction<TransactionBody, SigUsage, ScheduleCreateUsage> factory = ScheduleCreateUsage::newEstimate;\n-\n-    private final GlobalDynamicProperties dynamicProperties;\n-\n-    public ScheduleCreateResourceUsage(GlobalDynamicProperties dynamicProperties) {\n-        this.dynamicProperties = dynamicProperties;\n-    }\n-\n-    @Override\n-    public boolean applicableTo(TransactionBody txn) {\n-        return txn.hasScheduleCreate();\n-    }\n-\n-    @Override\n-    public FeeData usageGiven(TransactionBody txn, SigValueObj svo, StateView view) throws InvalidTxBodyException {\n-        var sigUsage = new SigUsage(svo.getTotalSigCount(), svo.getSignatureSize(), svo.getPayerAcctSigCount());\n-        var estimate = factory.apply(txn, sigUsage);\n-        return estimate.givenScheduledTxExpirationTimeSecs(dynamicProperties.scheduledTxExpiryTimeSecs()).get();\n-    }\n+\tprivate static final Logger log = LogManager.getLogger(ScheduleCreateResourceUsage.class);\n+\n+\tprivate final ScheduleOpsUsage scheduleOpsUsage;\n+\tprivate final GlobalDynamicProperties dynamicProperties;\n+\n+\tpublic ScheduleCreateResourceUsage(GlobalDynamicProperties dynamicProperties, ScheduleOpsUsage scheduleOpsUsage) {\n+\t\tthis.scheduleOpsUsage = scheduleOpsUsage;\n+\t\tthis.dynamicProperties = dynamicProperties;\n+\t}\n+\n+\t@Override\n+\tpublic boolean applicableTo(TransactionBody txn) {\n+\t\treturn txn.hasScheduleCreate();\n+\t}\n+\n+\t@Override\n+\tpublic FeeData usageGiven(TransactionBody txn, SigValueObj svo, StateView view) throws InvalidTxBodyException {\n+\t\tvar sigUsage = new SigUsage(svo.getTotalSigCount(), svo.getSignatureSize(), svo.getPayerAcctSigCount());\n+\t\treturn scheduleOpsUsage.scheduleCreateUsage(txn, sigUsage, dynamicProperties.scheduledTxExpiryTimeSecs());\n+\t}\n }"
  },
  {
    "sha": "64c4ee47fcde3c2db44688198d7ee8dcbb10d8c5",
    "filename": "hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleDeleteResourceUsage.java",
    "status": "modified",
    "additions": 22,
    "deletions": 4,
    "changes": 26,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleDeleteResourceUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleDeleteResourceUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleDeleteResourceUsage.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -21,19 +21,27 @@\n  */\n \n import com.hedera.services.context.primitives.StateView;\n+import com.hedera.services.context.properties.GlobalDynamicProperties;\n import com.hedera.services.fees.calculation.TxnResourceUsageEstimator;\n import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.schedule.ScheduleDeleteUsage;\n+import com.hedera.services.usage.schedule.ScheduleOpsUsage;\n import com.hederahashgraph.api.proto.java.FeeData;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import com.hederahashgraph.exception.InvalidTxBodyException;\n import com.hederahashgraph.fee.SigValueObj;\n \n-import java.util.function.BiFunction;\n \n public class ScheduleDeleteResourceUsage implements TxnResourceUsageEstimator {\n+    private final ScheduleOpsUsage scheduleOpsUsage;\n+    private final GlobalDynamicProperties properties;\n \n-    static BiFunction<TransactionBody, SigUsage, ScheduleDeleteUsage> factory = ScheduleDeleteUsage::newEstimate;\n+    public ScheduleDeleteResourceUsage(\n+            ScheduleOpsUsage scheduleOpsUsage,\n+            GlobalDynamicProperties properties\n+    ) {\n+        this.scheduleOpsUsage = scheduleOpsUsage;\n+        this.properties = properties;\n+    }\n \n     @Override\n     public boolean applicableTo(TransactionBody txn) {\n@@ -42,7 +50,17 @@ public boolean applicableTo(TransactionBody txn) {\n \n     @Override\n     public FeeData usageGiven(TransactionBody txn, SigValueObj svo, StateView view) throws InvalidTxBodyException {\n+        var op = txn.getScheduleDelete();\n         var sigUsage = new SigUsage(svo.getTotalSigCount(), svo.getSignatureSize(), svo.getPayerAcctSigCount());\n-        return factory.apply(txn, sigUsage).get();\n+\n+        var optionalInfo = view.infoForSchedule(op.getScheduleID());\n+        if (optionalInfo.isPresent()) {\n+            var info = optionalInfo.get();\n+            return scheduleOpsUsage.scheduleDeleteUsage(txn, sigUsage, info.getExpirationTime().getSeconds());\n+        } else {\n+            long latestExpiry = txn.getTransactionID().getTransactionValidStart().getSeconds()\n+                    + properties.scheduledTxExpiryTimeSecs();\n+            return scheduleOpsUsage.scheduleDeleteUsage(txn, sigUsage, latestExpiry);\n+        }\n     }\n }"
  },
  {
    "sha": "d00f19c7f19a95993688fc4b8d8b7f84c203b879",
    "filename": "hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleSignResourceUsage.java",
    "status": "modified",
    "additions": 12,
    "deletions": 14,
    "changes": 26,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleSignResourceUsage.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleSignResourceUsage.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/fees/calculation/schedule/txns/ScheduleSignResourceUsage.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -24,20 +24,22 @@\n import com.hedera.services.context.properties.GlobalDynamicProperties;\n import com.hedera.services.fees.calculation.TxnResourceUsageEstimator;\n import com.hedera.services.usage.SigUsage;\n-import com.hedera.services.usage.schedule.ScheduleSignUsage;\n+import com.hedera.services.usage.schedule.ScheduleOpsUsage;\n import com.hederahashgraph.api.proto.java.FeeData;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import com.hederahashgraph.exception.InvalidTxBodyException;\n import com.hederahashgraph.fee.SigValueObj;\n \n-import java.util.function.BiFunction;\n \n public class ScheduleSignResourceUsage implements TxnResourceUsageEstimator {\n-    static BiFunction<TransactionBody, SigUsage, ScheduleSignUsage> factory = ScheduleSignUsage::newEstimate;\n-\n+    private final ScheduleOpsUsage scheduleOpsUsage;\n     private final GlobalDynamicProperties properties;\n \n-    public ScheduleSignResourceUsage(GlobalDynamicProperties properties) {\n+    public ScheduleSignResourceUsage(\n+            ScheduleOpsUsage scheduleOpsUsage,\n+            GlobalDynamicProperties properties\n+    ) {\n+        this.scheduleOpsUsage = scheduleOpsUsage;\n         this.properties = properties;\n     }\n \n@@ -48,21 +50,17 @@ public boolean applicableTo(TransactionBody txn) {\n \n     @Override\n     public FeeData usageGiven(TransactionBody txn, SigValueObj svo, StateView view) throws InvalidTxBodyException {\n-        var op = txn.getScheduleSign();\n+    \tvar op = txn.getScheduleSign();\n         var sigUsage = new SigUsage(svo.getTotalSigCount(), svo.getSignatureSize(), svo.getPayerAcctSigCount());\n-        var estimate = factory.apply(txn, sigUsage);\n \n         var optionalInfo = view.infoForSchedule(op.getScheduleID());\n         if (optionalInfo.isPresent()) {\n             var info = optionalInfo.get();\n-            return estimate\n-                    .givenExpiry(info.getExpirationTime().getSeconds())\n-                    .givenNonceBytes(info.getScheduledTransactionID().getNonce().size())\n-                    .get();\n+            return scheduleOpsUsage.scheduleSignUsage(txn, sigUsage, info.getExpirationTime().getSeconds());\n         } else {\n-            return estimate\n-                    .givenExpiry(properties.scheduledTxExpiryTimeSecs())\n-                    .get();\n+            long latestExpiry = txn.getTransactionID().getTransactionValidStart().getSeconds()\n+                    + properties.scheduledTxExpiryTimeSecs();\n+            return scheduleOpsUsage.scheduleSignUsage(txn, sigUsage, latestExpiry);\n         }\n     }\n }"
  },
  {
    "sha": "f9170341f1ff9cac04adaabcb7db471240816a69",
    "filename": "hedera-node/src/main/java/com/hedera/services/keys/HederaKeyActivation.java",
    "status": "modified",
    "additions": 4,
    "deletions": 60,
    "changes": 64,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/keys/HederaKeyActivation.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/keys/HederaKeyActivation.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/keys/HederaKeyActivation.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -20,7 +20,6 @@\n  * ‚Äç\n  */\n \n-import com.google.protobuf.ByteString;\n import com.hedera.services.legacy.core.jproto.JKey;\n import com.hedera.services.legacy.core.jproto.JKeyList;\n import com.hedera.services.legacy.core.jproto.JThresholdKey;\n@@ -34,15 +33,12 @@\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n-import java.util.function.BiFunction;\n import java.util.function.BiPredicate;\n import java.util.function.Function;\n \n import static com.hedera.services.keys.DefaultActivationCharacteristics.DEFAULT_ACTIVATION_CHARACTERISTICS;\n import static com.swirlds.common.crypto.VerificationStatus.INVALID;\n import static com.swirlds.common.crypto.VerificationStatus.VALID;\n-import static java.util.stream.Collectors.toMap;\n \n /**\n  * Provides a static method to determine if a Hedera key is <i>active</i> relative to\n@@ -52,12 +48,7 @@\n  * @see JKey\n  */\n public class HederaKeyActivation {\n-\tstatic Function<List<TransactionSignature>, Function<byte[], TransactionSignature>> nonScheduleFactory =\n-\t\t\tHederaKeyActivation::pkToSigMapFrom;\n-\tstatic BiFunction<byte[], List<TransactionSignature>, Function<byte[], TransactionSignature>> scheduleFactory =\n-\t\t\tHederaKeyActivation::scopedPkToSigMapFrom;\n-\n-\tpublic static final TransactionSignature INVALID_SIG = new InvalidSignature();\n+\tpublic static final TransactionSignature INVALID_MISSING_SIG = new InvalidSignature();\n \n \tpublic static final BiPredicate<JKey, TransactionSignature> ONLY_IF_SIG_IS_VALID =\n \t\t\t(ignoredKey, sig) -> VALID.equals( sig.getSignatureStatus() );\n@@ -84,7 +75,7 @@ public static boolean payerSigIsActive(\n \n \t\treturn isActive(\n \t\t\t\tpayerSummary.getPayerKey(),\n-\t\t\t\taproposPkToSigMapFrom(accessor, accessor.getPlatformTxn().getSignatures()),\n+\t\t\t\tpkToSigMapFrom(accessor.getPlatformTxn().getSignatures()),\n \t\t\t\tONLY_IF_SIG_IS_VALID);\n \t}\n \n@@ -128,67 +119,20 @@ public static boolean isActive(\n \t\t}\n \t}\n \n-\tpublic static Function<byte[], TransactionSignature> aproposPkToSigMapFrom(\n-\t\tTxnAccessor accessor,\n-\t\tList<TransactionSignature> sigs\n-\t) {\n-\t\tswitch (accessor.getFunction()) {\n-\t\t\tcase ScheduleSign:\n-\t\t\tcase ScheduleCreate:\n-\t\t\t\treturn scheduleFactory.apply(accessor.getTxnBytes(), sigs);\n-\t\t\tdefault:\n-\t\t\t\treturn nonScheduleFactory.apply(sigs);\n-\t\t}\n-\t}\n-\n \t/**\n \t * Factory for a source of platform signatures backed by a list.\n \t *\n \t * @param sigs the backing list of platform sigs.\n \t * @return a supplier that produces the backing list sigs by public key.\n \t */\n \tpublic static Function<byte[], TransactionSignature> pkToSigMapFrom(List<TransactionSignature> sigs) {\n-\t\tfinal Map<ByteString, TransactionSignature> pkSigs = sigs\n-\t\t\t\t.stream()\n-\t\t\t\t.collect(toMap(s -> ByteString.copyFrom(s.getExpandedPublicKeyDirect()), s -> s, (a, b) -> a));\n-\n-\t\treturn ed25519 -> pkSigs.getOrDefault(ByteString.copyFrom(ed25519), INVALID_SIG);\n-\t}\n-\n-\t/**\n-\t * Factory for a source of platform signatures backed by a list, filtered\n-\t * by signatures applying to a specific message.\n-\t *\n-\t * @param sigs the backing list of platform sigs.\n-\t * @param correctMsg the message that sigs should apply to.\n-\t * @return a supplier that produces the backing list sigs by public key.\n-\t */\n-\tpublic static Function<byte[], TransactionSignature> scopedPkToSigMapFrom(\n-\t\t\tbyte[] correctMsg,\n-\t\t\tList<TransactionSignature> sigs\n-\t) {\n-\t\treturn matchingPkToSigMapFrom(correctMsg, true, sigs);\n-\t}\n-\n-\tpublic static Function<byte[], TransactionSignature> matchingPkToSigMapFrom(\n-\t\t\tbyte[] msg,\n-\t\t\tboolean shouldMatch,\n-\t\t\tList<TransactionSignature> sigs\n-\t) {\n \t\treturn key -> {\n \t\t\tfor (TransactionSignature sig : sigs) {\n-\t\t\t\tif (!Arrays.equals(key, sig.getExpandedPublicKeyDirect())) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tvar i = sig.getMessageOffset();\n-\t\t\t\tvar isRelevant = shouldMatch == Arrays.equals(\n-\t\t\t\t\t\tmsg, 0, msg.length,\n-\t\t\t\t\t\tsig.getContentsDirect(), i, i + sig.getMessageLength());\n-\t\t\t\tif (isRelevant) {\n+\t\t\t\tif (Arrays.equals(key, sig.getExpandedPublicKeyDirect())) {\n \t\t\t\t\treturn sig;\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn INVALID_SIG;\n+\t\t\treturn INVALID_MISSING_SIG;\n \t\t};\n \t}\n "
  },
  {
    "sha": "588aee0edad5aa5ef8ea2b0432026ffc7d45bc5b",
    "filename": "hedera-node/src/main/java/com/hedera/services/keys/InHandleActivationHelper.java",
    "status": "modified",
    "additions": 43,
    "deletions": 30,
    "changes": 73,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/keys/InHandleActivationHelper.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/keys/InHandleActivationHelper.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/keys/InHandleActivationHelper.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -38,6 +38,16 @@\n import static com.hedera.services.keys.HederaKeyTraversal.visitSimpleKeys;\n import static com.hedera.services.sigs.Rationalization.IN_HANDLE_SUMMARY_FACTORY;\n \n+/**\n+ * Provides information about the Ed25519 keys that compose the Hedera keys\n+ * linked to the active transaction (and the schedule it references, if\n+ * applicable).\n+ *\n+ * In particular, lets a visitor traverse these Ed25519 keys along with\n+ * their expanded {@code TransactionSignature}s (if present).\n+ *\n+ * @author Michael Tinker\n+ */\n public class InHandleActivationHelper {\n \tprivate static final Logger log = LogManager.getLogger(InHandleActivationHelper.class);\n \n@@ -49,16 +59,14 @@\n \tstatic Function<\n \t\t\tList<TransactionSignature>,\n \t\t\tFunction<byte[], TransactionSignature>> sigsFnSource = HederaKeyActivation::pkToSigMapFrom;\n-\tstatic PkToSigMapFactory scopedSigsFnSource = HederaKeyActivation::matchingPkToSigMapFrom;\n \n \tprivate final HederaSigningOrder keyOrderer;\n \tprivate final CharacteristicsFactory characteristics;\n \tprivate final Supplier<TxnAccessor> accessorSource;\n \n \tprivate List<JKey> otherParties = NO_OTHER_PARTIES;\n \tprivate TxnAccessor accessor = NO_LAST_ACCESSOR;\n-\tprivate Function<byte[], TransactionSignature> scheduledSigsFn = NO_LAST_SIGS_FN;\n-\tprivate Function<byte[], TransactionSignature> nonScheduledSigsFn = NO_LAST_SIGS_FN;\n+\tprivate Function<byte[], TransactionSignature> sigsFn = NO_LAST_SIGS_FN;\n \n \tpublic InHandleActivationHelper(\n \t\t\tHederaSigningOrder keyOrderer,\n@@ -70,37 +78,64 @@ public InHandleActivationHelper(\n \t\tthis.accessorSource = accessorSource;\n \t}\n \n+\n+\t/**\n+\t * Returns true if the set of Ed25519 signing keys for the active transaction\n+\t * suffice to meet the signing requirements of all Hedera keys prerequisite\n+\t * to the active transaction.\n+\t *\n+\t * @param tests the predicate(s) to use for testing if an Ed25519 key has signed\n+\t */\n \tpublic boolean areOtherPartiesActive(BiPredicate<JKey, TransactionSignature> tests) {\n \t\tensureUpToDate();\n \t\treturn arePartiesActive(false, accessor.getTxn(), tests);\n \t}\n \n+\t/**\n+\t * Returns true if the set of Ed25519 signing keys for the active transaction\n+\t * suffice to meet the signing requirements of all Hedera keys prerequisite\n+\t * to the schedule referenced by the active transaction.\n+\t *\n+\t * @param tests the predicate(s) to use for testing if an Ed25519 key has signed\n+\t */\n \tpublic boolean areScheduledPartiesActive(\n \t\t\tTransactionBody scheduledTxn,\n \t\t\tBiPredicate<JKey, TransactionSignature> tests\n \t) {\n \t\tensureUpToDate();\n-\t\tensureScheduledSigsFnPresent();\n \t\treturn arePartiesActive(true, scheduledTxn, tests);\n \t}\n \n+\t/**\n+\t * Permits a visitor to traverse the Ed25519 keys, and their expanded signatures,\n+\t * that constitute the Hedera keys prerequisite to the schedule referenced by\n+\t * the active transaction.\n+\t *\n+\t * @param visitor the consumer to give the tour to\n+\t */\n \tpublic void visitScheduledCryptoSigs(BiConsumer<JKey, TransactionSignature> visitor) {\n \t\tensureUpToDate();\n-\t\tensureScheduledSigsFnPresent();\n \t\tfor (JKey req : otherParties) {\n \t\t\tif (req.isForScheduledTxn()) {\n-\t\t\t\tvisitSimpleKeys(req, key -> visitor.accept(key, scheduledSigsFn.apply(key.getEd25519())));\n+\t\t\t\tvisitSimpleKeys(req, key -> visitor.accept(key, sigsFn.apply(key.getEd25519())));\n \t\t\t}\n \t\t}\n \t}\n \n+\t/**\n+\t * Returns the canonical mapping between Ed25519 public keys and expanded\n+\t * signatures for the active transaction.\n+\t */\n+\tpublic Function<byte[], TransactionSignature> currentSigsFn() {\n+\t\treturn sigsFn;\n+\t}\n+\n \tprivate boolean arePartiesActive(\n \t\t\tboolean useScheduleKeys,\n \t\t\tTransactionBody txn,\n \t\t\tBiPredicate<JKey, TransactionSignature> givenTests\n \t) {\n \t\tvar activeCharacter = characteristics.inferredFor(txn);\n-\t\tFunction<byte[], TransactionSignature> sigsFn = useScheduleKeys ? scheduledSigsFn : nonScheduledSigsFn;\n \t\tfor (JKey req : otherParties) {\n \t\t\tif (req.isForScheduledTxn() != useScheduleKeys) {\n \t\t\t\tcontinue;\n@@ -112,12 +147,6 @@ private boolean arePartiesActive(\n \t\treturn true;\n \t}\n \n-\tprivate void ensureScheduledSigsFnPresent() {\n-\t\tif (scheduledSigsFn == NO_LAST_SIGS_FN) {\n-\t\t\tthrow new IllegalStateException(\"No scheduled sigs function available!\");\n-\t\t}\n-\t}\n-\n \tprivate void ensureUpToDate() {\n \t\tvar current = accessorSource.get();\n \t\tif (accessor != current) {\n@@ -129,19 +158,8 @@ private void ensureUpToDate() {\n \t\t\t} else {\n \t\t\t\totherParties = otherOrderingResult.getOrderedKeys();\n \t\t\t}\n-\n \t\t\tvar sigs = current.getPlatformTxn().getSignatures();\n-\t\t\tswitch (current.getFunction()) {\n-\t\t\t\tcase ScheduleSign:\n-\t\t\t\tcase ScheduleCreate:\n-\t\t\t\t\tvar scopedTxnBytes = current.getTxnBytes();\n-\t\t\t\t\tnonScheduledSigsFn = scopedSigsFnSource.get(scopedTxnBytes, true, sigs);\n-\t\t\t\t\tscheduledSigsFn = scopedSigsFnSource.get(scopedTxnBytes, false, sigs);\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tscheduledSigsFn = NO_LAST_SIGS_FN;\n-\t\t\t\t\tnonScheduledSigsFn = sigsFnSource.apply(sigs);\n-\t\t\t}\n+\t\t\tsigsFn = sigsFnSource.apply(sigs);\n \t\t\taccessor = current;\n \t\t}\n \t}\n@@ -154,9 +172,4 @@ boolean test(\n \t\t\t\tBiPredicate<JKey, TransactionSignature> tests,\n \t\t\t\tKeyActivationCharacteristics characteristics);\n \t}\n-\n-\t@FunctionalInterface\n-\tinterface PkToSigMapFactory {\n-\t\tFunction<byte[], TransactionSignature> get(byte[] msg, boolean shouldMatch, List<TransactionSignature> sigs);\n-\t}\n }"
  },
  {
    "sha": "bb244e665ebd224edfa700d125e1be989e6c51bb",
    "filename": "hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatus.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatus.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatus.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatus.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -160,8 +160,7 @@ public String toLogMessage() {\n \t\tformatArguments.add(scheduled.toString());\n \t\tformatArguments.add(errorReport.getResponseCode().toString());\n \t\tbreak;\n-      case UNPARSEABLE_SCHEDULED_TRANSACTION:\n-      case UNSCHEDULABLE_TRANSACTION:\n+      case SCHEDULED_TRANSACTION_NOT_IN_WHITELIST:\n       case GENERAL_PAYER_ERROR:\n       case GENERAL_TRANSACTION_ERROR:\n       case KEY_COUNT_MISMATCH:"
  },
  {
    "sha": "639d8985c3c7f430d773540ee024101f90507fd7",
    "filename": "hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatusCode.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatusCode.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatusCode.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/legacy/crypto/SignatureStatusCode.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -47,9 +47,7 @@\n   INVALID_SCHEDULE_ID(\"Invalid Schedule ID [ source = '%s', transactionId = '%s', scheduleId = '%s' ]\"),\n   UNRESOLVABLE_REQUIRED_SIGNERS(\n           \"Cannot resolve required signers for scheduled txn [ source = '%s', scheduled = '%s', error = '%s' ]\"),\n-  UNPARSEABLE_SCHEDULED_TRANSACTION(\n-          \"Cannot parse scheduled txn [ source = '%s', transactionId = '%s' ]\"),\n-  UNSCHEDULABLE_TRANSACTION(\n+  SCHEDULED_TRANSACTION_NOT_IN_WHITELIST(\n           \"Specified txn cannot be scheduled [ source = '%s', transactionId = '%s' ]\");\n \n   private String message;"
  },
  {
    "sha": "a29a28b0e792889fdaa6ffa3f6529f7521b0a7b2",
    "filename": "hedera-node/src/main/java/com/hedera/services/legacy/services/state/AwareProcessLogic.java",
    "status": "modified",
    "additions": 4,
    "deletions": 49,
    "changes": 53,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/legacy/services/state/AwareProcessLogic.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/legacy/services/state/AwareProcessLogic.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/legacy/services/state/AwareProcessLogic.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -27,7 +27,6 @@\n import com.hedera.services.state.logic.ServicesTxnManager;\n import com.hedera.services.stream.RecordStreamObject;\n import com.hedera.services.txns.ProcessLogic;\n-import com.hedera.services.txns.diligence.DuplicateClassification;\n import com.hedera.services.utils.PlatformTxnAccessor;\n import com.hedera.services.utils.TxnAccessor;\n import com.hederahashgraph.api.proto.java.ResponseCodeEnum;\n@@ -66,9 +65,8 @@\n import static com.hederahashgraph.api.proto.java.ResponseCodeEnum.KEY_PREFIX_MISMATCH;\n import static com.hederahashgraph.api.proto.java.ResponseCodeEnum.MODIFYING_IMMUTABLE_CONTRACT;\n import static com.hederahashgraph.api.proto.java.ResponseCodeEnum.OK;\n-import static com.hederahashgraph.api.proto.java.ResponseCodeEnum.UNPARSEABLE_SCHEDULED_TRANSACTION;\n import static com.hederahashgraph.api.proto.java.ResponseCodeEnum.UNRESOLVABLE_REQUIRED_SIGNERS;\n-import static com.hederahashgraph.api.proto.java.ResponseCodeEnum.UNSCHEDULABLE_TRANSACTION;\n+import static com.hederahashgraph.api.proto.java.ResponseCodeEnum.SCHEDULED_TRANSACTION_NOT_IN_WHITELIST;\n import static java.time.ZoneOffset.UTC;\n import static java.time.temporal.ChronoUnit.SECONDS;\n \n@@ -86,8 +84,7 @@\n \t\t\tMODIFYING_IMMUTABLE_CONTRACT,\n \t\t\tINVALID_CONTRACT_ID,\n \t\t\tUNRESOLVABLE_REQUIRED_SIGNERS,\n-\t\t\tUNPARSEABLE_SCHEDULED_TRANSACTION,\n-\t\t\tUNSCHEDULABLE_TRANSACTION);\n+\t\t\tSCHEDULED_TRANSACTION_NOT_IN_WHITELIST);\n \n \tprivate final ServicesTxnManager txnManager = new ServicesTxnManager(\n \t\t\tthis::processTxnInCtx,\n@@ -227,7 +224,8 @@ private void doProcess(TxnAccessor accessor, Instant consensusTime) {\n \t\tvar duplicity = (recentHistory == null)\n \t\t\t\t? BELIEVED_UNIQUE\n \t\t\t\t: recentHistory.currentDuplicityFor(ctx.txnCtx().submittingSwirldsMember());\n-\t\tif (nodeIgnoredDueDiligence(duplicity)) {\n+\n+\t\tif (ctx.nodeDiligenceScreen().nodeIgnoredDueDiligence(duplicity)) {\n \t\t\tctx.txnChargingPolicy().applyForIgnoredDueDiligence(ctx.charging(), fee);\n \t\t\treturn;\n \t\t}\n@@ -289,49 +287,6 @@ private boolean hasActivePayerSig(TxnAccessor accessor) {\n \t\treturn false;\n \t}\n \n-\tprivate boolean nodeIgnoredDueDiligence(DuplicateClassification duplicity) {\n-\t\tInstant consensusTime = ctx.txnCtx().consensusTime();\n-\t\tTxnAccessor accessor = ctx.txnCtx().accessor();\n-\n-\t\tvar swirldsMemberAccount = ctx.txnCtx().submittingNodeAccount();\n-\t\tvar designatedNodeAccount = accessor.getTxn().getNodeAccountID();\n-\t\tboolean designatedNodeExists = ctx.backingAccounts().contains(designatedNodeAccount);\n-\t\tif (!designatedNodeExists || !swirldsMemberAccount.equals(designatedNodeAccount)) {\n-\t\t\tlog.warn(\"Node {} (Member #{}) submitted a txn designated for {} node {} :: {}\",\n-\t\t\t\t\treadableId(swirldsMemberAccount),\n-\t\t\t\t\tctx.txnCtx().submittingSwirldsMember(),\n-\t\t\t\t\tdesignatedNodeExists ? \"other\" : \"nonexistent\",\n-\t\t\t\t\treadableId(designatedNodeAccount),\n-\t\t\t\t\taccessor.getSignedTxn4Log());\n-\t\t\tctx.txnCtx().setStatus(INVALID_NODE_ACCOUNT);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tif (!ctx.txnCtx().isPayerSigKnownActive()) {\n-\t\t\tctx.txnCtx().setStatus(INVALID_PAYER_SIGNATURE);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tif (duplicity == NODE_DUPLICATE) {\n-\t\t\tctx.txnCtx().setStatus(DUPLICATE_TRANSACTION);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tlong txnDuration = accessor.getTxn().getTransactionValidDuration().getSeconds();\n-\t\tif (!ctx.validator().isValidTxnDuration(txnDuration)) {\n-\t\t\tctx.txnCtx().setStatus(INVALID_TRANSACTION_DURATION);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tvar cronStatus = ctx.validator().chronologyStatus(accessor, consensusTime);\n-\t\tif (cronStatus != OK) {\n-\t\t\tctx.txnCtx().setStatus(cronStatus);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\treturn false;\n-\t}\n-\n \tprivate SignatureStatus rationalizeWithPreConsensusSigs(TxnAccessor accessor) {\n \t\tvar sigProvider = new ScopedSigBytesProvider(accessor);\n \t\tvar sigStatus = rationalizeIn("
  },
  {
    "sha": "8c90a8ee519e1aaa23b3bd1f4e677b24c7c47ad6",
    "filename": "hedera-node/src/main/java/com/hedera/services/sigs/PlatformSigOps.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/hashgraph/hedera-services/blob/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/sigs/PlatformSigOps.java",
    "raw_url": "https://github.com/hashgraph/hedera-services/raw/ffb4d7db0f802229a5642642a1353b3f4fa05a07/hedera-node/src/main/java/com/hedera/services/sigs/PlatformSigOps.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-services/contents/hedera-node/src/main/java/com/hedera/services/sigs/PlatformSigOps.java?ref=ffb4d7db0f802229a5642642a1353b3f4fa05a07",
    "patch": "@@ -20,6 +20,7 @@\n  * ‚Äç\n  */\n \n+import com.hedera.services.legacy.exception.KeyPrefixMismatchException;\n import com.hedera.services.sigs.factories.TxnScopedPlatformSigFactory;\n import com.hedera.services.sigs.sourcing.PubKeyToSigBytes;\n import com.hedera.services.legacy.core.jproto.JKey;\n@@ -72,17 +73,16 @@ private static void createPlatformSigFor(\n \t\t}\n \n \t\ttry {\n-\t\t\tvar sigBytes = ed25519Key.isForScheduledTxn()\n-\t\t\t\t\t? sigBytesFn.sigBytesForScheduled(ed25519Key.getEd25519())\n-\t\t\t\t\t: sigBytesFn.sigBytesFor(ed25519Key.getEd25519());\n+\t\t\tvar sigBytes = sigBytesFn.sigBytesFor(ed25519Key.getEd25519());\n \t\t\tif (sigBytes.length > 0) {\n \t\t\t\tvar sig = copyFrom(sigBytes);\n \t\t\t\tvar cryptoKey = copyFrom(ed25519Key.getEd25519());\n-\t\t\t\tif (ed25519Key.isForScheduledTxn()) {\n-\t\t\t\t\tresult.getPlatformSigs().add(factory.createForScheduled(cryptoKey, sig));\n-\t\t\t\t} else {\n-\t\t\t\t\tresult.getPlatformSigs().add(factory.create(cryptoKey, sig));\n-\t\t\t\t}\n+\t\t\t\tresult.getPlatformSigs().add(factory.create(cryptoKey, sig));\n+\t\t\t}\n+\t\t} catch (KeyPrefixMismatchException kmpe) {\n+\t\t\t/* Nbd if a signature map is ambiguous for a key linked to a scheduled transaction. */\n+\t\t\tif (!ed25519Key.isForScheduledTxn())\t{\n+\t\t\t\tresult.setTerminatingEx(kmpe);\n \t\t\t}\n \t\t} catch (Exception e) {\n \t\t\tresult.setTerminatingEx(e);"
  }
]
