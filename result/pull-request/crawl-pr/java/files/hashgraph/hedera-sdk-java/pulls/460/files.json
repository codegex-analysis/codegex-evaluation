[
  {
    "sha": "9886087fce6ccbaa30adea5ac1d9dbe249718896",
    "filename": "sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/hashgraph/hedera-sdk-java/blob/cac9ee641a5554e9f4e0b53fed45cb812ab98b65/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java",
    "raw_url": "https://github.com/hashgraph/hedera-sdk-java/raw/cac9ee641a5554e9f4e0b53fed45cb812ab98b65/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java",
    "contents_url": "https://api.github.com/repos/hashgraph/hedera-sdk-java/contents/sdk/src/main/java/com/hedera/hashgraph/sdk/Executable.java?ref=cac9ee641a5554e9f4e0b53fed45cb812ab98b65",
    "patch": "@@ -18,19 +18,19 @@\n abstract class Executable<SdkRequestT, ProtoRequestT, ResponseT, O> implements WithExecute<O> {\n     private static final Logger logger = LoggerFactory.getLogger(Executable.class);\n \n-    protected int maxRetries = 10;\n+    protected int maxAttempts = 10;\n     protected int nextNodeIndex = 0;\n     protected List<AccountId> nodeAccountIds = Collections.emptyList();\n \n     Executable() {\n     }\n \n-    public final int getMaxRetry() {\n-        return maxRetries;\n+    public final int getMaxAttempts() {\n+        return maxAttempts;\n     }\n \n-    public final SdkRequestT setMaxRetry(int count) {\n-        maxRetries = count;\n+    public final SdkRequestT setMaxAttempts(int count) {\n+        maxAttempts = count;\n         // noinspection unchecked\n         return (SdkRequestT) this;\n     }\n@@ -70,7 +70,7 @@ public SdkRequestT setNodeAccountIds(List<AccountId> nodeAccountIds) {\n     }\n \n     private CompletableFuture<O> executeAsync(Client client, int attempt, @Nullable Throwable lastException) {\n-        if (attempt > maxRetries) {\n+        if (attempt > maxAttempts) {\n             return CompletableFuture.<O>failedFuture(new Exception(\"Failed to get gRPC response within maximum retry count\", lastException));\n         }\n "
  }
]
