[
  {
    "sha": "7ec623c2057e9a2e28496e9e18fafd31b09ac229",
    "filename": "kubernetes/saraswati-editofhir-converter-service.yaml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/kubernetes/saraswati-editofhir-converter-service.yaml",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/kubernetes/saraswati-editofhir-converter-service.yaml",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/kubernetes/saraswati-editofhir-converter-service.yaml?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,11 @@\n+apiVersion: v1\n+kind: Service\n+metadata:\n+  name: saraswati-editofhir-converter-service\n+spec:\n+  selector:\n+    app: saraswati-editofhir-converter\n+  ports:\n+    - protocol: TCP\n+      port: 80\n+      targetPort: 8080\n\\ No newline at end of file"
  },
  {
    "sha": "82c997ff7c029d0d6bd80fd4d47b0b2ffe1d1fd2",
    "filename": "kubernetes/saraswati-editofhir-deployment.yaml",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/kubernetes/saraswati-editofhir-deployment.yaml",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/kubernetes/saraswati-editofhir-deployment.yaml",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/kubernetes/saraswati-editofhir-deployment.yaml?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,40 @@\n+apiVersion: apps/v1\n+kind: Deployment\n+metadata:\n+  annotations:\n+  labels:\n+    app: saraswati-editofhir-converter\n+  name: saraswati-editofhir-converter-deployment\n+spec:\n+  replicas: 1\n+  selector:\n+    matchLabels:\n+      app: saraswati-editofhir-converter\n+  template:\n+    metadata:\n+      labels:\n+        app: saraswati-editofhir-converter\n+    spec:\n+      containers:\n+      - env:\n+        - name: SPRING_KAFKA_BOOTSTRAPSERVERS\n+          value: b-1.saraswatikafkacluster.12345.c9.kafka.us-east-1.amazonaws.com:9094,b-2.saraswatikafkacluster.12345.c9.kafka.us-east-1.amazonaws.com:9094\n+        image: amidatech/saraswati-editofhir-converter\n+        imagePullPolicy: Always\n+        name: saraswati-editofhir-converter\n+        ports:\n+        - containerPort: 8080\n+        # volumeMounts:\n+        # - mountPath: /tmp/kafka.client.truststore.jks\n+        #   name: kafka-client-truststore\n+        #   subPath: kafka.client.truststore.jks\n+      imagePullSecrets:\n+      - name: regcred\n+      restartPolicy: Always\n+      # volumes:\n+      # - configMap:\n+      #     items:\n+      #     - key: kafka.client.truststore.jks\n+      #       path: kafka.client.truststore.jks\n+      #     name: kafka-client-truststore\n+      #   name: kafka-client-truststore"
  },
  {
    "sha": "e81cac282ee4397cfc960d91e80041938dd05b6d",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/pom.xml",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/pom.xml",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/pom.xml?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -18,6 +18,7 @@\n \t\t<spring-cloud.version>2020.0.1</spring-cloud.version>\n \t\t<testcontainers.version>1.15.1</testcontainers.version>\n \t\t<springdoc.openapi.version>1.2.30</springdoc.openapi.version>\n+\t\t<spring.cloud.stream.binding.version>3.1.1</spring.cloud.stream.binding.version>\n \t</properties>\n \t<dependencies>\n \t\t<!-- HAPI FHIR -->\n@@ -90,13 +91,31 @@\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.kafka</groupId>\n \t\t\t<artifactId>spring-kafka</artifactId>\n+\t\t\t<version>2.6.6</version>\n \t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.kafka</groupId>\n \t\t\t<artifactId>spring-kafka-test</artifactId>\n+\t\t\t<version>2.6.6</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n \n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.cloud</groupId>\n+\t\t\t<artifactId>spring-cloud-stream</artifactId>\n+\t\t\t<version>${spring.cloud.stream.binding.version}</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.cloud</groupId>\n+\t\t\t<artifactId>spring-cloud-stream-binder-kafka</artifactId>\n+\t\t\t<version>${spring.cloud.stream.binding.version}</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.cloud</groupId>\n+\t\t\t<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>\n+\t\t\t<version>${spring.cloud.stream.binding.version}</version>\n+\t\t</dependency>\n+\n \t\t<dependency>\n \t\t\t<groupId>org.projectlombok</groupId>\n \t\t\t<artifactId>lombok</artifactId>"
  },
  {
    "sha": "0d7b9b8ac63cc50adb1bd6b80aa7fff60dce5149",
    "filename": "src/main/java/com/amida/saraswati/edifhir/ConverterApplication.java",
    "status": "modified",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/ConverterApplication.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/ConverterApplication.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/ConverterApplication.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -1,13 +1,44 @@\n package com.amida.saraswati.edifhir;\n \n+import com.amida.saraswati.edifhir.exception.StreamException;\n+import com.amida.saraswati.edifhir.service.stream.KafkaStreamService;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.kafka.annotation.EnableKafka;\n+import org.springframework.kafka.annotation.KafkaListener;\n+\n+import java.util.Arrays;\n \n @SpringBootApplication\n+@Slf4j\n+@EnableKafka\n public class ConverterApplication {\n \n+\t@Value(value = \"${FEATURE_KAFKA}\")\n+\tprivate boolean hasKafka;\n+\n+\t@Value(value = \"${kafka.consumer.topic}\")\n+\tprivate String subscribeTopic;\n+\n+\t@Autowired\n+\tKafkaStreamService service;\n+\n \tpublic static void main(String[] args) {\n \t\tSpringApplication.run(ConverterApplication.class, args);\n \t}\n \n+\t@KafkaListener(id = \"x12Listener\", topics = \"#{'${kafka.consumer.topic}'}\",\n+\t\t\tautoStartup = \"true\", concurrency = \"2\")\n+\tpublic void listen(ConsumerRecord<String, String> record) {\n+\t\tlog.info(\"Receive message from {}, key={}\", subscribeTopic, record.key());\n+\t\tservice.processMessage(record);\n+\t\tlog.info(\"message from {} processed.\", subscribeTopic);\n+\t}\n+\n }"
  },
  {
    "sha": "00a304514d07a616a1e10b6fb1f87198f2bc9951",
    "filename": "src/main/java/com/amida/saraswati/edifhir/configure/KafkaConfigure.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/configure/KafkaConfigure.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/configure/KafkaConfigure.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/configure/KafkaConfigure.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,122 @@\n+package com.amida.saraswati.edifhir.configure;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.CommonClientConfigs;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.annotation.EnableKafka;\n+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+import org.springframework.kafka.config.KafkaListenerContainerFactory;\n+import org.springframework.kafka.core.*;\n+import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Configures Kafka clients.\n+ *\n+ * @author Warren Lin\n+ */\n+@Configuration\n+@EnableKafka\n+@Slf4j\n+public class KafkaConfigure {\n+\n+    private static final int TIME_OUT = 3000;\n+\n+    @Value(value = \"${kafka.usessl}\")\n+    private boolean useSsl;\n+\n+    @Value(value = \"${kafka.producer.bootstrapAddress}\")\n+    private String bootstrapAddressProducer;\n+\n+    @Value(value = \"${kafka.consumer.bootstrapaddress}\")\n+    private String bootstrapAddressConsumer;\n+\n+    @Value(value = \"${kafka.consumer.group}\")\n+    private String consumerGroupId;\n+\n+    // SSL settings.\n+    @Value(value = \"${ssl.truststore.location}\")\n+    private String truststoreLocation;\n+\n+    @Value(value = \"${ssl.protocol}\")\n+    private String sslProtocol;\n+\n+    @Bean\n+    public KafkaConsumer<String, String> consumer() {\n+        Map<String, Object> props = consumerConfigs();\n+        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"false\");\n+        log.info(\"kafka consumer setup: {}\", props.toString());\n+        return new KafkaConsumer<>(props);\n+    }\n+\n+    private void setSSL(Map<String, Object> props) {\n+        props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, \"SSL\");\n+        props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, truststoreLocation);\n+        props.put(SslConfigs.SSL_PROTOCOL_CONFIG, sslProtocol);\n+    }\n+\n+    // Producer template configuration\n+    //------------------------------------\n+\n+    private ProducerFactory<String, String> producerFactory() {\n+        return new DefaultKafkaProducerFactory<>(producerConfigs());\n+    }\n+\n+    private Map<String, Object> producerConfigs() {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddressProducer);\n+        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        if (useSsl) {\n+            log.info(\"Configure Kafka producer for SSL connection.\");\n+            setSSL(props);\n+        }\n+        return props;\n+    }\n+\n+    @Bean\n+    public KafkaTemplate<String, String> kafkaTemplate() {\n+        return new KafkaTemplate<>(producerFactory());\n+    }\n+\n+    // Kafka listener configuration\n+\n+    @Bean\n+    KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<Integer, String>>\n+    kafkaListenerContainerFactory() {\n+        ConcurrentKafkaListenerContainerFactory<Integer, String> factory =\n+                new ConcurrentKafkaListenerContainerFactory<>();\n+        factory.setConsumerFactory(consumerFactory());\n+        factory.setConcurrency(2);\n+        factory.getContainerProperties().setPollTimeout(TIME_OUT);\n+        return factory;\n+    }\n+\n+    private ConsumerFactory<Integer, String> consumerFactory() {\n+        return new DefaultKafkaConsumerFactory<>(consumerConfigs());\n+    }\n+\n+    private Map<String, Object> consumerConfigs() {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddressConsumer);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"true\");\n+        if (useSsl) {\n+            log.info(\"kafka consumer setup for Kafka listener: {}\", props.toString());\n+            setSSL(props);\n+        }\n+        return props;\n+    }\n+}"
  },
  {
    "sha": "8fd188f123478135aae0684c005c97bc7e9c87c7",
    "filename": "src/main/java/com/amida/saraswati/edifhir/controller/X12EDIController.java",
    "status": "modified",
    "additions": 76,
    "deletions": 2,
    "changes": 78,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/controller/X12EDIController.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/controller/X12EDIController.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/controller/X12EDIController.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -1,13 +1,19 @@\n package com.amida.saraswati.edifhir.controller;\n \n import com.amida.saraswati.edifhir.exception.InvalidDataException;\n+import com.amida.saraswati.edifhir.exception.StreamException;\n import com.amida.saraswati.edifhir.exception.X12ToFhirException;\n import com.amida.saraswati.edifhir.model.fhir.Fhir837;\n+import com.amida.saraswati.edifhir.model.streammessage.EdiFhirMessage;\n+import com.amida.saraswati.edifhir.model.x12passer.X12LoopInfo;\n import com.amida.saraswati.edifhir.service.X12ToFhirService;\n+import com.amida.saraswati.edifhir.service.stream.KafkaStreamService;\n import com.amida.saraswati.edifhir.util.X12ParserUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.imsweb.x12.reader.X12Reader;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.*;\n@@ -50,13 +56,26 @@ public static X12DATA_TYPE getType(String name) {\n         }\n     }\n \n+    @Value(value = \"${kafka.consumer.topic}\")\n+    private String consumerTopic;\n+\n+    @Value(value = \"${kafka.publish.topic}\")\n+    private String publishTopic;\n+\n+    @Value(value = \"${kafka.publish.key}\")\n+    private String messageKey;\n+\n     @Autowired\n     private X12ToFhirService service;\n \n+    @Autowired\n+    private KafkaStreamService streamService;\n+\n     @PostMapping(\"/x12loop\")\n     public ResponseEntity<String> getX12Loops(\n             @RequestBody String x12Data,\n             @RequestParam(required = false, name = \"showSegment\") boolean showSegment,\n+            @RequestParam(required = false, name = \"showFhirMappingInfo\") boolean showFhirMappingInfo,\n             @RequestParam(required = false, name = \"x12DataType\") String x12DataType)\n     {\n         X12Reader.FileType x12ReadFileType = getX12ReaderFileType(x12DataType);\n@@ -71,8 +90,17 @@ public static X12DATA_TYPE getType(String name) {\n             if (!reader.getFatalErrors().isEmpty()) {\n                 return ResponseEntity.badRequest().body(reader.getFatalErrors().get(0));\n             }\n-            String result = X12ParserUtil.loopTravise(reader.getLoops(), 1,\n-                    Optional.of(showSegment).orElse(false));\n+            String result;\n+            if (showFhirMappingInfo) {\n+                x12DataType = x12DataType == null ? \"837\" : x12DataType;\n+                List<X12LoopInfo> info =\n+                        X12ParserUtil.loopTraviseWithInfo(reader.getLoops(), X12DATA_TYPE.getType(x12DataType));\n+                ObjectMapper mapper = new ObjectMapper();\n+                result = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(info);\n+            } else {\n+                result = X12ParserUtil.loopTravise(reader.getLoops(), 1,\n+                        Optional.of(showSegment).orElse(false));\n+            }\n             return ResponseEntity.ok(result);\n         } catch (IOException e) {\n             return ResponseEntity.badRequest().body(\"Unsupported EDI X12-837 data.\");\n@@ -111,6 +139,45 @@ public static X12DATA_TYPE getType(String name) {\n         }\n     }\n \n+    @PostMapping(\"/poststream\")\n+    public ResponseEntity<String> postmessage(\n+            @RequestBody String data, @RequestParam(name = \"topic\") String topic\n+    ) {\n+        log.info(\"postmessage to {}\", Optional.ofNullable(topic).orElse(\"Not Provided!\"));\n+        try {\n+            if (consumerTopic.equals(topic) || publishTopic.equals(topic)) {\n+                streamService.publishMessage(topic, messageKey, data);\n+                return ResponseEntity.ok(\"message posted\");\n+            } else {\n+                return ResponseEntity.badRequest().body(\"Unsupported topic.\");\n+            }\n+        } catch (StreamException e) {\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());\n+        }\n+    }\n+\n+    @GetMapping(\"/getstreammessage\")\n+    public ResponseEntity<String> getMessage(\n+            @RequestParam(name = \"topic\") String topic,\n+            @RequestParam(required = false, name = \"isCommitting\") boolean isCommitting\n+    ) {\n+        log.info(\"getstreammessage from {}\", Optional.ofNullable(topic).orElse(\"Not Provided!\"));\n+        try {\n+            List<EdiFhirMessage> result = streamService.pollMessage(topic, isCommitting);\n+            StringBuilder msg = new StringBuilder();\n+            String headline = String.format(\"Total messages received from the topic, %s: %d\\n\",\n+                    topic, result.size());\n+            msg.append(headline);\n+            result.forEach(r -> {\n+                msg.append(\"\\n\").append(\"key : \").append(r.getKey()).append(\"\\n\");\n+                msg.append(r.getValue()).append(\"\\n\");\n+            });\n+            return ResponseEntity.ok(msg.toString());\n+        } catch (StreamException e) {\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());\n+        }\n+    }\n+\n     @GetMapping(\"/healthy\")\n     public ResponseEntity<String> healthy() {\n         String resp = \"I'm good. I support the following endpoints.\" + \"\\n\\n\" +\n@@ -123,6 +190,13 @@ public static X12DATA_TYPE getType(String name) {\n                 \"/edi/x12ToFhir: convert EDI 837 to a list of FHIR bundles\\n\" +\n                 \"              parameter: x12DataType = 837. It is optional, default to 837.\" + \"\\n\" +\n                 \"              body: 837 transaction text.\" +\n+                \"\\n\" +\n+                \"/edi/poststream: post an EDI 837 transaction to a kafka topic\\n\" +\n+                \"              parameter: topic, e.g., ?topic=Edi837.\" + \"\\n\" +\n+                \"              body: 837 transaction text.\" +\n+                \"\\n\" +\n+                \"/edi/getstreammessage: get a list of messages in a kafka topic.\\n\" +\n+                \"              parameter: topic, e.g., ?topic=Edi837.\" +\n                 \"\\n\";\n         return ResponseEntity.ok(resp);\n     }"
  },
  {
    "sha": "2f2623d20e7ef7b72f712a9d9b10c4f98d6c6f88",
    "filename": "src/main/java/com/amida/saraswati/edifhir/exception/StreamException.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/exception/StreamException.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/exception/StreamException.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/exception/StreamException.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,17 @@\n+package com.amida.saraswati.edifhir.exception;\n+\n+/**\n+ * Exception in stream service.\n+ *\n+ * @author warren\n+ */\n+public class StreamException extends Exception {\n+\n+    public StreamException() {\n+        super(\"SteamException\");\n+    }\n+\n+    public StreamException(String msg, Throwable cause) {\n+        super(msg, cause);\n+    }\n+}"
  },
  {
    "sha": "3583d304d41e9817232412cd7d18348c7ec90caa",
    "filename": "src/main/java/com/amida/saraswati/edifhir/model/streammessage/EdiFhirMessage.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/model/streammessage/EdiFhirMessage.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/model/streammessage/EdiFhirMessage.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/model/streammessage/EdiFhirMessage.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,19 @@\n+package com.amida.saraswati.edifhir.model.streammessage;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * It represents a text message from Kafka stream.\n+ *\n+ * @author warren lin\n+ */\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class EdiFhirMessage {\n+    private String topic;\n+    private String key;\n+    private String value;\n+}"
  },
  {
    "sha": "2a27fbae84ec0e35287f427c2c44409651e7f26c",
    "filename": "src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12LoopInfo.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12LoopInfo.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12LoopInfo.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12LoopInfo.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,24 @@\n+package com.amida.saraswati.edifhir.model.x12passer;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Warren Lin\n+ */\n+@Data\n+@NoArgsConstructor\n+public class X12LoopInfo {\n+    private String loopName;\n+    private String description;\n+    private String fhirMappingInfo;\n+    private String segmanetNames;\n+\n+    private List<X12LoopInfo> subloops;\n+\n+    @JsonIgnore\n+    private List<X12SegmentInfo> segments;\n+}"
  },
  {
    "sha": "21da1301389fb761c8f52c4b9ac2b37e903eb382",
    "filename": "src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12SegmentInfo.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12SegmentInfo.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12SegmentInfo.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/model/x12passer/X12SegmentInfo.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,21 @@\n+package com.amida.saraswati.edifhir.model.x12passer;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * @author Warren Lin\n+ */\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class X12SegmentInfo {\n+    private String segmentName;\n+    private String description;\n+    private String fhirMappingInfo;\n+\n+    public X12SegmentInfo(String name) {\n+        segmentName = name;\n+    }\n+}"
  },
  {
    "sha": "dbfca82b97ff31b9c0de51f0bcfb94284dd18a94",
    "filename": "src/main/java/com/amida/saraswati/edifhir/service/X12ToFhirService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/X12ToFhirService.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/X12ToFhirService.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/service/X12ToFhirService.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -49,11 +49,20 @@\n     /**\n      * Converts the given X12Reader to a Set of Fhir837.\n      *\n-     * @param x12Reader A X12Reader containing a x12-837 .\n+     * @param x12Reader A X12Reader containing an x12-837 transaction.\n      * @return a set of Fhir837\n      * @throws X12ToFhirException error occurs.\n      * @throws InvalidDataException x12 transaction data in X12Reader is invalid.\n      */\n     List<Fhir837> get837FhirBundles(X12Reader x12Reader) throws X12ToFhirException, InvalidDataException;\n \n+    /**\n+     * Converts the given string to a Set of Fhir837.\n+     *\n+     * @param x837 A text of an x12-837.\n+     * @return a set of Fhir837\n+     * @throws X12ToFhirException error occurs.\n+     * @throws InvalidDataException x12 transaction data in X12Reader is invalid.\n+     */\n+    List<Fhir837> get837FhirBundles(String x837) throws X12ToFhirException, InvalidDataException;\n }"
  },
  {
    "sha": "114a964a611ea6d46fb4ab892913ec82329d6ee1",
    "filename": "src/main/java/com/amida/saraswati/edifhir/service/impl/X12ToFhirServiceImpl.java",
    "status": "modified",
    "additions": 22,
    "deletions": 2,
    "changes": 24,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/impl/X12ToFhirServiceImpl.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/impl/X12ToFhirServiceImpl.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/service/impl/X12ToFhirServiceImpl.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -13,6 +13,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.util.List;\n@@ -31,12 +32,12 @@\n \n     @Override\n     public Fhir834 get834FhirBundle(File x834file) throws X12ToFhirException {\n-        return null;\n+        return null;  // TODO: to be implemented.\n     }\n \n     @Override\n     public Fhir835 get835FhirBundle(File x835file) throws X12ToFhirException {\n-        return null;\n+        return null;  // TODO: to be implemented.\n     }\n \n     @Override\n@@ -56,4 +57,23 @@ public Fhir835 get835FhirBundle(File x835file) throws X12ToFhirException {\n             throws X12ToFhirException, InvalidDataException {\n         return x837Mapper.getFhirBundles(x12Reader);\n     }\n+\n+    @Override\n+    public List<Fhir837> get837FhirBundles(String x837) throws X12ToFhirException, InvalidDataException {\n+        X12Reader reader;\n+        try {\n+            reader = new X12Reader(X12Reader.FileType.ANSI837_5010_X222,\n+                    new ByteArrayInputStream(x837.getBytes()));\n+            log.error(\"Invalid EDI X12 837 data {}. {}\",\n+                    reader.getErrors().size(), reader.getErrors().get(0));\n+            reader.getErrors().forEach(log::error);\n+            if (!reader.getFatalErrors().isEmpty()) {\n+                throw new InvalidDataException(reader.getFatalErrors().get(0));\n+            }\n+            return get837FhirBundles(reader);\n+        } catch (IOException e) {\n+            log.error(\"Failed to read the given x12-837 data.\", e);\n+            throw new X12ToFhirException(\"X12Reader error\", e);\n+        }\n+    }\n }"
  },
  {
    "sha": "b63e6f3a8aeb0bb9a2f1787727870ea01c5da7b0",
    "filename": "src/main/java/com/amida/saraswati/edifhir/service/mapper/SubscriberMapper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/mapper/SubscriberMapper.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/mapper/SubscriberMapper.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/service/mapper/SubscriberMapper.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -25,6 +25,7 @@\n \n     private static final String CLAIM_FILING_TYPE_URL = \"x12-837/claimfilingtype\";\n     private static final String SUBSCRIBER_RELATION_URL = \"x12-837/subscriberrelation\";\n+    private static final String INSURANCE_PLAN_URL = \"x12-837/insurancepolicy\";\n \n     public static Patient mapSubscriber(Loop loop2000B) {\n         Patient subscriber = getSubscriberInfo(loop2000B);\n@@ -64,6 +65,7 @@ private static Patient getSubscriberInfo(Loop loop2000B) {\n         SBR837 sbr837 = new SBR837(sbr);\n         Extension ext = subscriber.addExtension();\n         ext.setId(\"Insurance Policy\");\n+        ext.setUrl(INSURANCE_PLAN_URL);  // TODO: Fhir InsurancePlan resource ID?\n         CodeType insPolicyInfo = new CodeType(sbr837.getPlanName());\n         ext.setValue(insPolicyInfo);\n         ext = subscriber.addExtension();"
  },
  {
    "sha": "2c1a6b38a1613deec53f481dd4562907873a9d4b",
    "filename": "src/main/java/com/amida/saraswati/edifhir/service/stream/KafkaStreamService.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/stream/KafkaStreamService.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/stream/KafkaStreamService.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/service/stream/KafkaStreamService.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,39 @@\n+package com.amida.saraswati.edifhir.service.stream;\n+\n+import com.amida.saraswati.edifhir.exception.StreamException;\n+import com.amida.saraswati.edifhir.model.streammessage.EdiFhirMessage;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+\n+import java.util.List;\n+\n+public interface KafkaStreamService {\n+\n+    /**\n+     * Push a message to a topic in Kafka stream.\n+     *\n+     * @param topic stream topic.\n+     * @param key message key.\n+     * @param message message string.\n+     * @throws StreamException error occurs.\n+     */\n+    void publishMessage(String topic, String key, String message) throws StreamException;\n+\n+    /**\n+     * Poll messages from a topic in Kafa stream. It is intended to be used for test/verify\n+     * the Kafka stream service in this application.\n+     *\n+     * @param topic stream topic.\n+     * @param isCommitting indicates whether to commit after polling the message.\n+     * @return a list of {@link EdiFhirMessage}.\n+     * @throws StreamException error occurs.\n+     */\n+    List<EdiFhirMessage> pollMessage(String topic, boolean isCommitting) throws StreamException;\n+\n+    /**\n+     * Processes a Kafka message.\n+     *\n+     * @param record A Kafka message record.\n+     * @return a message about the processing.\n+     */\n+    String processMessage(ConsumerRecord<String, String> record);\n+}"
  },
  {
    "sha": "5d975ed5f5826cdab8146778e39115ab3a570721",
    "filename": "src/main/java/com/amida/saraswati/edifhir/service/stream/impl/KafkaStreamServiceImpl.java",
    "status": "added",
    "additions": 136,
    "deletions": 0,
    "changes": 136,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/stream/impl/KafkaStreamServiceImpl.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/service/stream/impl/KafkaStreamServiceImpl.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/service/stream/impl/KafkaStreamServiceImpl.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,136 @@\n+package com.amida.saraswati.edifhir.service.stream.impl;\n+\n+import com.amida.saraswati.edifhir.exception.InvalidDataException;\n+import com.amida.saraswati.edifhir.exception.StreamException;\n+import com.amida.saraswati.edifhir.exception.X12ToFhirException;\n+import com.amida.saraswati.edifhir.model.fhir.Fhir837;\n+import com.amida.saraswati.edifhir.model.streammessage.EdiFhirMessage;\n+import com.amida.saraswati.edifhir.service.X12ToFhirService;\n+import com.amida.saraswati.edifhir.service.stream.KafkaStreamService;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * It implements the service for kafka stream.\n+ *\n+ * @author warren lin\n+ */\n+@Service\n+@Slf4j\n+public class KafkaStreamServiceImpl implements KafkaStreamService {\n+\n+    private static final int TIME_OUT = 1000;\n+    private static final String UNSUPPORTED_MESSAGE = \"The message is not supported.\";\n+\n+    @Value(value = \"${kafka.consumer.messagekey}\")\n+    private String inboundMessageKey;\n+\n+    @Value(value = \"${kafka.publish.key}\")\n+    private String publishMsgKey;\n+\n+    @Value(value = \"${kafka.publish.topic}\")\n+    private String publishTopic;\n+\n+    @Autowired\n+    private KafkaConsumer<String, String> consumer;\n+\n+    @Autowired\n+    private KafkaTemplate<String, String> template;\n+\n+    @Autowired\n+    private X12ToFhirService x12MapService;\n+\n+    private synchronized ConsumerRecords<String, String> pollKafkaMessage(\n+            List<String> topics, boolean isCommitting) throws StreamException {\n+        try {\n+            log.info(\"pollKafkaMessage from topics: {}\", topics.toString());\n+            consumer.subscribe(topics);\n+            ConsumerRecords<String, String> result = consumer.poll(Duration.ofMillis(TIME_OUT));\n+            if (isCommitting) {\n+                consumer.commitSync();\n+            }\n+            consumer.unsubscribe();  // TODO: put it in final?\n+            return result;\n+        } catch (Exception e) {\n+            throw new StreamException(\"Failed polling Kafka message for topics: {}\" +\n+                    String.join(\",\", topics), e);\n+        }\n+    }\n+\n+    @Override\n+    public void publishMessage(String topic, String key, String message)\n+                throws StreamException {\n+        try {\n+            ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, message);\n+            template.send(record).get(10, TimeUnit.SECONDS);\n+            log.info(\"post a message of {} bytes to topic: {} for key: {}\",\n+                    message.length(), topic, key);\n+        } catch (Exception e) {\n+            log.error(\"Post kafka message to topic {} failed.\", topic, e);\n+            throw new StreamException(\"failed to post to topic \" + topic, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<EdiFhirMessage> pollMessage(String topic, boolean isCommitting) throws StreamException {\n+        try {\n+            ConsumerRecords<String, String> records =\n+                    pollKafkaMessage(Collections.singletonList(topic), isCommitting);\n+            List<EdiFhirMessage> result = new ArrayList<>();\n+            records.forEach(r -> result.add(\n+                    new EdiFhirMessage(topic, Optional.ofNullable(r.key()).orElse(\"\"), r.value())));\n+            log.info(\"{} messags pulled from {}\", result.size(), topic);\n+            return result;\n+        } catch (StreamException e) {\n+            String errMsg = String.format(\"Failed to poll Kafka message for topic, %s.\", topic);\n+            log.error(errMsg, e);\n+            throw new StreamException(errMsg, e);\n+        }\n+    }\n+\n+    @Override\n+    public String processMessage(ConsumerRecord<String, String> record) {\n+            log.info(\"Messge topic: {}, key: {} \\n{}\",\n+                    record.topic(), record.key(), record.value());\n+            if (inboundMessageKey.equals(record.key())) {\n+                try {\n+                    List<Fhir837> result = x12MapService.get837FhirBundles(record.value());\n+                    log.info(\"Convert the 837 message to {} Fhir bundles.\", result.size());\n+                    Integer cnt = result.stream().map(r -> {\n+                        try {\n+                            publishMessage(publishTopic, publishMsgKey, r.toJson());\n+                            return 1;\n+                        } catch (StreamException e) {\n+                            log.error(\"failed to post {}\", r.toJson());\n+                            return 0;\n+                        }\n+                    }).mapToInt(Integer::intValue).sum();\n+                    String returnMsg = String.format(\"Published %d Fhir bundles to %s\", cnt, publishMsgKey);\n+                    log.info(returnMsg);\n+                    return returnMsg;\n+                } catch (X12ToFhirException | InvalidDataException e) {\n+                    String errMsg = String.format(\"x12 837 mapping error. %s\", e.getMessage());\n+                    log.error(errMsg, e);\n+                    return errMsg;\n+                }\n+            } else {\n+                return UNSUPPORTED_MESSAGE;\n+            }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "c85198ebb9b77563dbf371d6d9d3ee023c602377",
    "filename": "src/main/java/com/amida/saraswati/edifhir/util/X12ParserUtil.java",
    "status": "modified",
    "additions": 187,
    "deletions": 1,
    "changes": 188,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/util/X12ParserUtil.java",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/java/com/amida/saraswati/edifhir/util/X12ParserUtil.java",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/java/com/amida/saraswati/edifhir/util/X12ParserUtil.java?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -1,13 +1,17 @@\n package com.amida.saraswati.edifhir.util;\n \n+import com.amida.saraswati.edifhir.controller.X12EDIController;\n import com.amida.saraswati.edifhir.model.edi.component.x837.segment.DTP837;\n import com.amida.saraswati.edifhir.model.edi.component.x837.segment.HI837;\n import com.amida.saraswati.edifhir.model.edi.component.x837.segment.PWK837;\n import com.amida.saraswati.edifhir.model.edi.component.x837.segment.REF837;\n+import com.amida.saraswati.edifhir.model.x12passer.X12LoopInfo;\n+import com.amida.saraswati.edifhir.model.x12passer.X12SegmentInfo;\n import com.imsweb.x12.Loop;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n \n@@ -28,7 +32,8 @@\n      * @param showSegments also retrieval segments when true.\n      * @return a text of the retrieval information.\n      */\n-    public static String loopTravise(List<Loop> loops, int indent, boolean showSegments) {\n+    public static String loopTravise(List<Loop> loops, int indent,\n+                                     boolean showSegments) {\n         StringBuilder loogTrace = new StringBuilder();\n         loops.forEach(l -> {\n             loogTrace.append(\n@@ -72,6 +77,187 @@ public static void logLoopTravise(List<Loop> loops, int indent, boolean showSegm\n         });\n     }\n \n+    public static List<X12LoopInfo> loopTraviseWithInfo(List<Loop> loops, X12EDIController.X12DATA_TYPE type)\n+    {\n+        return loops.stream().map(l -> mapToLoopInfo(type, l)).collect(Collectors.toList());\n+    }\n+\n+    private static X12LoopInfo mapToLoopInfo(X12EDIController.X12DATA_TYPE type, Loop l) {\n+        X12LoopInfo loopInfo = new X12LoopInfo();\n+        List<X12SegmentInfo> segments = new ArrayList<>();\n+        loopInfo.setLoopName(l.getId());\n+        loopInfo.setDescription(getLoopDescrition(l.getId(), type));\n+        loopInfo.setFhirMappingInfo(getLoopFhirMapInfo(l.getId(), type));\n+        l.getSegments().forEach(s -> segments.add(new X12SegmentInfo(s.getId())));\n+        String segmentlist =\n+                segments.stream().map(X12SegmentInfo::getSegmentName).collect(Collectors.joining(\", \"));\n+        loopInfo.setSegments(segments);\n+        loopInfo.setSegmanetNames(segmentlist);\n+        List<X12LoopInfo> subloops = loopTraviseWithInfo(l.getLoops(), type);\n+        loopInfo.setSubloops(subloops);\n+        return loopInfo;\n+    }\n+\n+    private static String getLoopDescrition(String loopId, X12EDIController.X12DATA_TYPE dataType) {\n+        switch (dataType) {\n+            case EDI835:\n+                return get835LoopDescription(loopId);\n+            case EDI837:\n+                return get837LoopDescription(loopId);\n+            case EDI834:\n+                return get834LoopDescription(loopId);\n+            default:\n+                return \"\";\n+        }\n+    }\n+\n+    private static String getLoopFhirMapInfo(String loopId, X12EDIController.X12DATA_TYPE dataType) {\n+        switch (dataType) {\n+            case EDI835:\n+                return \"\";  // TODO: to be finished.\n+            case EDI837:\n+                return get837LoopFhirMapInfo(loopId);\n+            case EDI834:\n+                return \"\"; // TODO: to be finished.\n+            default:\n+                return \"\";\n+        }\n+    }\n+\n+    private static String get837LoopDescription(String loopId) {\n+        switch (loopId) {\n+            case \"1000A\":\n+                return \"Claim Submitter name and contact information\";\n+            case \"1000B\":\n+                return \"Individual or organization name for the receiver\";\n+            case \"2000A\":\n+                return \"Billing Provider Information\";\n+            case \"2000AA\":\n+                return \"Billing provider name\";\n+            case \"2000AB\":\n+                return \"Pay-to address.\";\n+            case \"2000B\":\n+                return \"Subscriber and patient information\";\n+            case \"2010BA\":\n+                return \"Subscriber name\";\n+            case \"2010BB\":\n+                return \"Payer name\";\n+            case \"2000C\":\n+                return \"Patient information\";\n+            case \"2010CA\":\n+                return \"Patient name\";\n+            case \"2300\":\n+                return \"Claim information\";\n+            case \"2310A\":\n+                return \"Referring Provider Name\";\n+            case \"2310B\":\n+                return \"Rendering Provider Name\";\n+            case \"2310C\":\n+                return \"Service Facility Location\";\n+            case \"2310D\":\n+                return \"Supervising Provider Name\";\n+            case \"2310E\":\n+                return \"Ambulance Pick-up Location\";\n+            case \"2310F\":\n+                return \"Ambulance drop-off Location\";\n+            case \"2400\":\n+                return \"Service Line Number\";\n+            case \"2410\":\n+                return \"Drug information\";\n+            case \"2420A\":\n+                return \"Rendering Provider Name\";\n+            case \"2420B\":\n+                return \"Purchased Service Provider Name\";\n+            case \"2420C\":\n+                return \"Service Facility Location Name\";\n+            case \"2420D\":\n+                return \"Supervising Provider Name\";\n+            case \"2420E\":\n+                return \"Ordering Provider Name\";\n+            case \"2420F\":\n+                return \"Referring Provider Name\";\n+            case \"2420G\":\n+                return \"Ambulance Pick-up Location\";\n+            case \"2420H\":\n+                return \"Ambulance drop-off Location\";\n+            case \"2440\":\n+                return \"Form Identification Code\";\n+            default:\n+                return \"\";\n+        }\n+    }\n+\n+    private static String get834LoopDescription(String loopId) {\n+        return \"\";  // TODO: finish it later.\n+    }\n+\n+    private static String get835LoopDescription(String loopId) {\n+        return \"\";  // TODO: finish it later.\n+    }\n+\n+    private static String get837LoopFhirMapInfo(String loopId) {\n+        switch (loopId) {\n+            case \"1000A\":\n+                return \"Map Submitter to FHIR Person resource.\";\n+            case \"1000B\":\n+                return \"Map Receiver to FHIR Person resource.\";\n+            case \"2000A\":\n+                return \"Map Billing Privider to FHIR Practitioner or Organization.\";\n+            case \"2000AA\":\n+                return \"Map to FHIR Practitioner/Organization name, address, id.\";\n+            case \"2000AB\":\n+                return \"Pay-to address not mapped.\";\n+            case \"2000B\":\n+                return \"Map to FHIR Patient resource.\";\n+            case \"2010BA\":\n+                return \"Add to FHIR Patient contact as subscriber.\";\n+            case \"2010BB\":\n+                return \"Add to FHIR Patient contact as payer.\";\n+            case \"2000C\":\n+                return \"Patient information not mapped.\";\n+            case \"2010CA\":\n+                return \"Patient name not mapped.\";\n+            case \"2300\":\n+                return \"Map to FHIR Claim resource.\";\n+            case \"2310A\":\n+                return \"Referring Privider Name not mapped\";\n+            case \"2310B\":\n+                return \"Rendering Provider Name not mapped\";\n+            case \"2310C\":\n+                return \"Service Facility Location not mapped\";\n+            case \"2310D\":\n+                return \"Supervising Provider Name not mapped\";\n+            case \"2310E\":\n+                return \"Ambulance Pick-up Location not mapped\";\n+            case \"2310F\":\n+                return \"Ambulance drop-off Location not mapped\";\n+            case \"2400\":\n+                return \"Map to FHIR Claim.ItemComponent.\";\n+            case \"2410\":\n+                return \"Drug information not mapped\";\n+            case \"2420A\":\n+                return \"Redering Provider Name not mapped\";\n+            case \"2420B\":\n+                return \"Pruchased Service Provider Name not mapped\";\n+            case \"2420C\":\n+                return \"Service Facility Location Name not mapped\";\n+            case \"2420D\":\n+                return \"Supervising Provider Name not mapped\";\n+            case \"2420E\":\n+                return \"Ordering Provider Name not mapped\";\n+            case \"2420F\":\n+                return \"Referring Provider Name not mapped\";\n+            case \"2420G\":\n+                return \"Ambulance Pick-up Location not mapped\";\n+            case \"2420H\":\n+                return \"Ambulance drop-off Location not mapped\";\n+            case \"2440\":\n+                return \"Form Identification Code not mapped\";\n+            default:\n+                return \"\";\n+        }\n+    }\n+\n     // Get X12Reader loop elements\n     ///////////////////////////////////////////////////////\n "
  },
  {
    "sha": "03b627dee0cd9c32c7ee5181618194b8e455e686",
    "filename": "src/main/resources/application-local.properties",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/resources/application-local.properties",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/resources/application-local.properties",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/resources/application-local.properties?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -0,0 +1,5 @@\n+SPRING_KAFKA_BOOTSTRAPSERVERS=localhost:9092\n+USE_SSL=false\n+SPRING_KAFKA_CONSUMER_TOPIC=Edi837\n+SPRING_KAFKA_PRODUCER_TOPIC=Fhir837\n+server.port=8082\n\\ No newline at end of file"
  },
  {
    "sha": "a9a90cb65a214d61c69f1f5b4752af0a41ce9970",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 23,
    "deletions": 1,
    "changes": 24,
    "blob_url": "https://github.com/amida-tech/saraswati-editofhir-converter/blob/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/resources/application.properties",
    "raw_url": "https://github.com/amida-tech/saraswati-editofhir-converter/raw/1db452e78291a667f1ef3231caeb7fffc9889457/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/amida-tech/saraswati-editofhir-converter/contents/src/main/resources/application.properties?ref=1db452e78291a667f1ef3231caeb7fffc9889457",
    "patch": "@@ -1 +1,23 @@\n-server.port = 8080\n+\n+# kafka setup\n+FEATURE_KAFKA=true\n+\n+kafka.producer.bootstrapAddress=${SPRING_KAFKA_BOOTSTRAPSERVERS}\n+\n+kafka.publish.key=EDI837\n+kafka.publish.topic=${SPRING_KAFKA_PRODUCER_TOPIC:Fhir837}\n+\n+kafka.consumer.bootstrapaddress=${SPRING_KAFKA_BOOTSTRAPSERVERS}\n+kafka.consumer.topic=${SPRING_KAFKA_CONSUMER_TOPIC:Edi837}\n+kafka.consumer.messagekey=EDI837\n+kafka.consumer.group=edix12\n+\n+kafka.usessl=${USE_SSL:false}\n+security.protocol=SSL\n+ssl.truststore.location=/tmp/kafka.client.truststore.jks\n+ssl.protocol=TLSv1.2\n+\n+# spring stream binding\n+#spring.kafka.bootstrap-servers=broker:29092\n+#spring.cloud.stream.bindings.input.destination: ${INPUT_STREAM:Edi837}\n+#spring.cloud.stream.bindings.output.destination: ${OUTPUT_STREAM:Fhir837}\n\\ No newline at end of file"
  }
]
