[
  {
    "sha": "45297bcd653a76c4841644befa8c3108d9d4651d",
    "filename": "myproject/src/main/java/com/software/myproject/config/JwtTokenUtil.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/LuuPhamVan/learning/blob/52d84e5f734432bdd30260e2aa0c4678c29248ff/myproject/src/main/java/com/software/myproject/config/JwtTokenUtil.java",
    "raw_url": "https://github.com/LuuPhamVan/learning/raw/52d84e5f734432bdd30260e2aa0c4678c29248ff/myproject/src/main/java/com/software/myproject/config/JwtTokenUtil.java",
    "contents_url": "https://api.github.com/repos/LuuPhamVan/learning/contents/myproject/src/main/java/com/software/myproject/config/JwtTokenUtil.java?ref=52d84e5f734432bdd30260e2aa0c4678c29248ff",
    "patch": "@@ -0,0 +1,73 @@\n+package com.software.myproject.config;\n+\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+@Component\n+public class JwtTokenUtil implements Serializable {\n+\n+    private static final long serialVersionUID = -2550185165626007488L;\n+    public static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;\n+\n+    @Value(\"${jwt.secret}\")\n+    private String secret;\n+\n+    // for retrieveing any information from token we will need the secret key\n+    public Claims getAllClaimsFromToken(String token) {\n+        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();\n+    }\n+\n+    public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {\n+        final Claims claims = getAllClaimsFromToken(token);\n+        return claimsResolver.apply(claims);\n+    }\n+\n+    //Retrive username from jwt token\n+    public String getUserNameFromToken(String token) {\n+        return getClaimFromToken(token, Claims::getSubject);\n+    }\n+\n+    // retrieve expiration date from jwt token\n+    public Date getExpirationDateFromToken(String token) {\n+        return getClaimFromToken(token, Claims::getExpiration);\n+    }\n+\n+    //check if the token has expired\n+    private Boolean isTokenExpired(String token) {\n+        final Date expiration = getExpirationDateFromToken(token);\n+        return expiration.before(new Date());\n+    }\n+\n+    //Generate token for user\n+    public String generateToken(UserDetails userDetails) {\n+        Map<String, Object> claims = new HashMap<>();\n+        return doGenerateToken(claims, userDetails.getUsername());\n+    }\n+\n+    // while creating the token -\n+    // 1. Define claims of the token, like Issuer, Expiration, Subject, and the ID\n+    // 2. Sign the JWT using the HS512 algorithm and secret key.\n+    // 3. According to JWS Compact\n+    // Serialization(https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#section-3.1)\n+    // compaction of the JWT to a URL-safe string\n+    private String doGenerateToken(Map<String, Object> claims, String subject) {\n+        return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))\n+                .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY)).signWith(SignatureAlgorithm.HS512, secret).compact();\n+    }\n+\n+    //validate token\n+    public Boolean validateToken(String token, UserDetails userDetails) {\n+        final String userName = getUserNameFromToken(token);\n+        return (userName.equals(userDetails.getUsername()) && !isTokenExpired(token));\n+    }\n+}"
  }
]
