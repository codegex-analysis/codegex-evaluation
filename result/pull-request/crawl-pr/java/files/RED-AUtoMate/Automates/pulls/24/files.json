[
  {
    "sha": "10ac773640cab5dfb05d4ec33b153faea7da7166",
    "filename": "algorithme de minimisation.txt",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/RED-AUtoMate/Automates/blob/90de7b31c0e9e0b72870a356a53b8f2c61f20a68/algorithme%20de%20minimisation.txt",
    "raw_url": "https://github.com/RED-AUtoMate/Automates/raw/90de7b31c0e9e0b72870a356a53b8f2c61f20a68/algorithme%20de%20minimisation.txt",
    "contents_url": "https://api.github.com/repos/RED-AUtoMate/Automates/contents/algorithme%20de%20minimisation.txt?ref=90de7b31c0e9e0b72870a356a53b8f2c61f20a68",
    "patch": "@@ -0,0 +1,42 @@\n+public Automate minimisation(){\r\n+\t\tif(this.estDeterministe()) return Moore.minimisation(this);\r\n+\t\telse return Moore.minimisation(this.determinise());\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Cree l'automate de l'arbre representant une expression rationnelle\r\n+\t * @param arbre arbre d'une expression rationnelle\r\n+\t */\r\n+\tprivate void fromArbre(Arbre arbre){\r\n+\t\tinitiaux.clear();\r\n+\t\tthis.clear();\r\n+\t\t\r\n+\t\tint idCompteur = 0;\r\n+\t\tHashMap<Feuille, Etat> map = new HashMap<Feuille, Etat>();\r\n+\t\tMap<Feuille, Set<Feuille>> succ = arbre.succ();\r\n+\t\tStack<Feuille> pile = new Stack<Feuille>();\r\n+\t\t\r\n+\t\tEtat etatInit = new Etat(true, arbre.contientMotVide, idCompteur++);\r\n+\t\tFeuille feuilleInit = new Feuille(Arbre.MOT_VIDE);\r\n+\t\tthis.ajouteEtatSeul(etatInit);\r\n+\t\tsucc.put(feuilleInit, arbre.premiers);\r\n+\t\tmap.put(feuilleInit, etatInit);\r\n+\t\tpile.push(feuilleInit);\r\n+\t\t\r\n+\t\twhile(!pile.isEmpty()){\r\n+\t\t\tFeuille feuilleCourante = pile.pop();\r\n+\t\t\tif(succ.get(feuilleCourante) != null){\r\n+\t\t\t\tfor(Feuille feuilleSucc : succ.get(feuilleCourante)){\r\n+\t\t\t\t\tEtat etatCourant = map.get(feuilleSucc);\r\n+\t\t\t\t\tif(etatCourant == null){\r\n+\t\t\t\t\t\tetatCourant = new Etat(false, arbre.derniers.contains(feuilleSucc), idCompteur++);\r\n+\t\t\t\t\t\tthis.ajouteEtatSeul(etatCourant);\r\n+\t\t\t\t\t\tmap.put(feuilleSucc, etatCourant);\r\n+\t\t\t\t\t\tpile.push(feuilleSucc);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tmap.get(feuilleCourante).ajouteTransition(feuilleSucc.symbole, etatCourant);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\t\n\\ No newline at end of file"
  }
]
