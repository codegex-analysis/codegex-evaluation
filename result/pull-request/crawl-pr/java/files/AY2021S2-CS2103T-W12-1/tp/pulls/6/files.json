[
  {
    "sha": "b2f25311dc9ee28612c534d3f76297c7979e761d",
    "filename": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "status": "modified",
    "additions": 228,
    "deletions": 226,
    "changes": 454,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/commands/EditCommand.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,226 +1,228 @@\n-package seedu.address.logic.commands;\n-\n-import static java.util.Objects.requireNonNull;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n-import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-\n-import seedu.address.commons.core.Messages;\n-import seedu.address.commons.core.index.Index;\n-import seedu.address.commons.util.CollectionUtil;\n-import seedu.address.logic.commands.exceptions.CommandException;\n-import seedu.address.model.Model;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * Edits the details of an existing person in the address book.\n- */\n-public class EditCommand extends Command {\n-\n-    public static final String COMMAND_WORD = \"edit\";\n-\n-    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the details of the person identified \"\n-            + \"by the index number used in the displayed person list. \"\n-            + \"Existing values will be overwritten by the input values.\\n\"\n-            + \"Parameters: INDEX (must be a positive integer) \"\n-            + \"[\" + PREFIX_NAME + \"NAME] \"\n-            + \"[\" + PREFIX_PHONE + \"PHONE] \"\n-            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"\n-            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"\n-            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"\n-            + \"Example: \" + COMMAND_WORD + \" 1 \"\n-            + PREFIX_PHONE + \"91234567 \"\n-            + PREFIX_EMAIL + \"johndoe@example.com\";\n-\n-    public static final String MESSAGE_EDIT_PERSON_SUCCESS = \"Edited Person: %1$s\";\n-    public static final String MESSAGE_NOT_EDITED = \"At least one field to edit must be provided.\";\n-    public static final String MESSAGE_DUPLICATE_PERSON = \"This person already exists in the address book.\";\n-\n-    private final Index index;\n-    private final EditPersonDescriptor editPersonDescriptor;\n-\n-    /**\n-     * @param index of the person in the filtered person list to edit\n-     * @param editPersonDescriptor details to edit the person with\n-     */\n-    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {\n-        requireNonNull(index);\n-        requireNonNull(editPersonDescriptor);\n-\n-        this.index = index;\n-        this.editPersonDescriptor = new EditPersonDescriptor(editPersonDescriptor);\n-    }\n-\n-    @Override\n-    public CommandResult execute(Model model) throws CommandException {\n-        requireNonNull(model);\n-        List<Person> lastShownList = model.getFilteredPersonList();\n-\n-        if (index.getZeroBased() >= lastShownList.size()) {\n-            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n-        }\n-\n-        Person personToEdit = lastShownList.get(index.getZeroBased());\n-        Person editedPerson = createEditedPerson(personToEdit, editPersonDescriptor);\n-\n-        if (!personToEdit.isSamePerson(editedPerson) && model.hasPerson(editedPerson)) {\n-            throw new CommandException(MESSAGE_DUPLICATE_PERSON);\n-        }\n-\n-        model.setPerson(personToEdit, editedPerson);\n-        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n-        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));\n-    }\n-\n-    /**\n-     * Creates and returns a {@code Person} with the details of {@code personToEdit}\n-     * edited with {@code editPersonDescriptor}.\n-     */\n-    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {\n-        assert personToEdit != null;\n-\n-        Name updatedName = editPersonDescriptor.getName().orElse(personToEdit.getName());\n-        Phone updatedPhone = editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());\n-        Email updatedEmail = editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());\n-        Address updatedAddress = editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());\n-        Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());\n-\n-        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        // short circuit if same object\n-        if (other == this) {\n-            return true;\n-        }\n-\n-        // instanceof handles nulls\n-        if (!(other instanceof EditCommand)) {\n-            return false;\n-        }\n-\n-        // state check\n-        EditCommand e = (EditCommand) other;\n-        return index.equals(e.index)\n-                && editPersonDescriptor.equals(e.editPersonDescriptor);\n-    }\n-\n-    /**\n-     * Stores the details to edit the person with. Each non-empty field value will replace the\n-     * corresponding field value of the person.\n-     */\n-    public static class EditPersonDescriptor {\n-        private Name name;\n-        private Phone phone;\n-        private Email email;\n-        private Address address;\n-        private Set<Tag> tags;\n-\n-        public EditPersonDescriptor() {}\n-\n-        /**\n-         * Copy constructor.\n-         * A defensive copy of {@code tags} is used internally.\n-         */\n-        public EditPersonDescriptor(EditPersonDescriptor toCopy) {\n-            setName(toCopy.name);\n-            setPhone(toCopy.phone);\n-            setEmail(toCopy.email);\n-            setAddress(toCopy.address);\n-            setTags(toCopy.tags);\n-        }\n-\n-        /**\n-         * Returns true if at least one field is edited.\n-         */\n-        public boolean isAnyFieldEdited() {\n-            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);\n-        }\n-\n-        public void setName(Name name) {\n-            this.name = name;\n-        }\n-\n-        public Optional<Name> getName() {\n-            return Optional.ofNullable(name);\n-        }\n-\n-        public void setPhone(Phone phone) {\n-            this.phone = phone;\n-        }\n-\n-        public Optional<Phone> getPhone() {\n-            return Optional.ofNullable(phone);\n-        }\n-\n-        public void setEmail(Email email) {\n-            this.email = email;\n-        }\n-\n-        public Optional<Email> getEmail() {\n-            return Optional.ofNullable(email);\n-        }\n-\n-        public void setAddress(Address address) {\n-            this.address = address;\n-        }\n-\n-        public Optional<Address> getAddress() {\n-            return Optional.ofNullable(address);\n-        }\n-\n-        /**\n-         * Sets {@code tags} to this object's {@code tags}.\n-         * A defensive copy of {@code tags} is used internally.\n-         */\n-        public void setTags(Set<Tag> tags) {\n-            this.tags = (tags != null) ? new HashSet<>(tags) : null;\n-        }\n-\n-        /**\n-         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}\n-         * if modification is attempted.\n-         * Returns {@code Optional#empty()} if {@code tags} is null.\n-         */\n-        public Optional<Set<Tag>> getTags() {\n-            return (tags != null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();\n-        }\n-\n-        @Override\n-        public boolean equals(Object other) {\n-            // short circuit if same object\n-            if (other == this) {\n-                return true;\n-            }\n-\n-            // instanceof handles nulls\n-            if (!(other instanceof EditPersonDescriptor)) {\n-                return false;\n-            }\n-\n-            // state check\n-            EditPersonDescriptor e = (EditPersonDescriptor) other;\n-\n-            return getName().equals(e.getName())\n-                    && getPhone().equals(e.getPhone())\n-                    && getEmail().equals(e.getEmail())\n-                    && getAddress().equals(e.getAddress())\n-                    && getTags().equals(e.getTags());\n-        }\n-    }\n-}\n+package seedu.address.logic.commands;\r\n+\r\n+import static java.util.Objects.requireNonNull;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\r\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Optional;\r\n+import java.util.Set;\r\n+\r\n+import seedu.address.commons.core.Messages;\r\n+import seedu.address.commons.core.index.Index;\r\n+import seedu.address.commons.util.CollectionUtil;\r\n+import seedu.address.logic.commands.exceptions.CommandException;\r\n+import seedu.address.model.Model;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.tag.Tag;\r\n+import seedu.address.model.person.Remark;\r\n+\r\n+/**\r\n+ * Edits the details of an existing person in the address book.\r\n+ */\r\n+public class EditCommand extends Command {\r\n+\r\n+    public static final String COMMAND_WORD = \"edit\";\r\n+\r\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the details of the person identified \"\r\n+            + \"by the index number used in the displayed person list. \"\r\n+            + \"Existing values will be overwritten by the input values.\\n\"\r\n+            + \"Parameters: INDEX (must be a positive integer) \"\r\n+            + \"[\" + PREFIX_NAME + \"NAME] \"\r\n+            + \"[\" + PREFIX_PHONE + \"PHONE] \"\r\n+            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"\r\n+            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"\r\n+            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"\r\n+            + \"Example: \" + COMMAND_WORD + \" 1 \"\r\n+            + PREFIX_PHONE + \"91234567 \"\r\n+            + PREFIX_EMAIL + \"johndoe@example.com\";\r\n+\r\n+    public static final String MESSAGE_EDIT_PERSON_SUCCESS = \"Edited Person: %1$s\";\r\n+    public static final String MESSAGE_NOT_EDITED = \"At least one field to edit must be provided.\";\r\n+    public static final String MESSAGE_DUPLICATE_PERSON = \"This person already exists in the address book.\";\r\n+\r\n+    private final Index index;\r\n+    private final EditPersonDescriptor editPersonDescriptor;\r\n+\r\n+    /**\r\n+     * @param index of the person in the filtered person list to edit\r\n+     * @param editPersonDescriptor details to edit the person with\r\n+     */\r\n+    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {\r\n+        requireNonNull(index);\r\n+        requireNonNull(editPersonDescriptor);\r\n+\r\n+        this.index = index;\r\n+        this.editPersonDescriptor = new EditPersonDescriptor(editPersonDescriptor);\r\n+    }\r\n+\r\n+    @Override\r\n+    public CommandResult execute(Model model) throws CommandException {\r\n+        requireNonNull(model);\r\n+        List<Person> lastShownList = model.getFilteredPersonList();\r\n+\r\n+        if (index.getZeroBased() >= lastShownList.size()) {\r\n+            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\r\n+        }\r\n+\r\n+        Person personToEdit = lastShownList.get(index.getZeroBased());\r\n+        Person editedPerson = createEditedPerson(personToEdit, editPersonDescriptor);\r\n+\r\n+        if (!personToEdit.isSamePerson(editedPerson) && model.hasPerson(editedPerson)) {\r\n+            throw new CommandException(MESSAGE_DUPLICATE_PERSON);\r\n+        }\r\n+\r\n+        model.setPerson(personToEdit, editedPerson);\r\n+        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\r\n+        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates and returns a {@code Person} with the details of {@code personToEdit}\r\n+     * edited with {@code editPersonDescriptor}.\r\n+     */\r\n+    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {\r\n+        assert personToEdit != null;\r\n+\r\n+        Name updatedName = editPersonDescriptor.getName().orElse(personToEdit.getName());\r\n+        Phone updatedPhone = editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());\r\n+        Email updatedEmail = editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());\r\n+        Address updatedAddress = editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());\r\n+        Remark updatedRemark = personToEdit.getRemark(); // edit command does not allow editing remarks\r\n+        Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());\r\n+\r\n+        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object other) {\r\n+        // short circuit if same object\r\n+        if (other == this) {\r\n+            return true;\r\n+        }\r\n+\r\n+        // instanceof handles nulls\r\n+        if (!(other instanceof EditCommand)) {\r\n+            return false;\r\n+        }\r\n+\r\n+        // state check\r\n+        EditCommand e = (EditCommand) other;\r\n+        return index.equals(e.index)\r\n+                && editPersonDescriptor.equals(e.editPersonDescriptor);\r\n+    }\r\n+\r\n+    /**\r\n+     * Stores the details to edit the person with. Each non-empty field value will replace the\r\n+     * corresponding field value of the person.\r\n+     */\r\n+    public static class EditPersonDescriptor {\r\n+        private Name name;\r\n+        private Phone phone;\r\n+        private Email email;\r\n+        private Address address;\r\n+        private Set<Tag> tags;\r\n+\r\n+        public EditPersonDescriptor() {}\r\n+\r\n+        /**\r\n+         * Copy constructor.\r\n+         * A defensive copy of {@code tags} is used internally.\r\n+         */\r\n+        public EditPersonDescriptor(EditPersonDescriptor toCopy) {\r\n+            setName(toCopy.name);\r\n+            setPhone(toCopy.phone);\r\n+            setEmail(toCopy.email);\r\n+            setAddress(toCopy.address);\r\n+            setTags(toCopy.tags);\r\n+        }\r\n+\r\n+        /**\r\n+         * Returns true if at least one field is edited.\r\n+         */\r\n+        public boolean isAnyFieldEdited() {\r\n+            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);\r\n+        }\r\n+\r\n+        public void setName(Name name) {\r\n+            this.name = name;\r\n+        }\r\n+\r\n+        public Optional<Name> getName() {\r\n+            return Optional.ofNullable(name);\r\n+        }\r\n+\r\n+        public void setPhone(Phone phone) {\r\n+            this.phone = phone;\r\n+        }\r\n+\r\n+        public Optional<Phone> getPhone() {\r\n+            return Optional.ofNullable(phone);\r\n+        }\r\n+\r\n+        public void setEmail(Email email) {\r\n+            this.email = email;\r\n+        }\r\n+\r\n+        public Optional<Email> getEmail() {\r\n+            return Optional.ofNullable(email);\r\n+        }\r\n+\r\n+        public void setAddress(Address address) {\r\n+            this.address = address;\r\n+        }\r\n+\r\n+        public Optional<Address> getAddress() {\r\n+            return Optional.ofNullable(address);\r\n+        }\r\n+\r\n+        /**\r\n+         * Sets {@code tags} to this object's {@code tags}.\r\n+         * A defensive copy of {@code tags} is used internally.\r\n+         */\r\n+        public void setTags(Set<Tag> tags) {\r\n+            this.tags = (tags != null) ? new HashSet<>(tags) : null;\r\n+        }\r\n+\r\n+        /**\r\n+         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}\r\n+         * if modification is attempted.\r\n+         * Returns {@code Optional#empty()} if {@code tags} is null.\r\n+         */\r\n+        public Optional<Set<Tag>> getTags() {\r\n+            return (tags != null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean equals(Object other) {\r\n+            // short circuit if same object\r\n+            if (other == this) {\r\n+                return true;\r\n+            }\r\n+\r\n+            // instanceof handles nulls\r\n+            if (!(other instanceof EditPersonDescriptor)) {\r\n+                return false;\r\n+            }\r\n+\r\n+            // state check\r\n+            EditPersonDescriptor e = (EditPersonDescriptor) other;\r\n+\r\n+            return getName().equals(e.getName())\r\n+                    && getPhone().equals(e.getPhone())\r\n+                    && getEmail().equals(e.getEmail())\r\n+                    && getAddress().equals(e.getAddress())\r\n+                    && getTags().equals(e.getTags());\r\n+        }\r\n+    }\r\n+}\r"
  },
  {
    "sha": "b6a2d768642a744283bf24e81c96a6d6974e7453",
    "filename": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/commands/RemarkCommand.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -0,0 +1,93 @@\n+package seedu.address.logic.commands;\r\n+\r\n+import seedu.address.commons.core.Messages;\r\n+import seedu.address.commons.core.index.Index;\r\n+import seedu.address.logic.commands.exceptions.CommandException;\r\n+import seedu.address.model.Model;\r\n+\r\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\r\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\r\n+\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Remark;\r\n+\r\n+import java.util.List;\r\n+\r\n+\r\n+/**\r\n+ * Changes the remark of an existing person in the address book.\r\n+ */\r\n+public class RemarkCommand extends Command {\r\n+\r\n+    public static final String COMMAND_WORD = \"remark\";\r\n+\r\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the remark of the person identified \"\r\n+            + \"by the index number used in the last person listing. \"\r\n+            + \"Existing remark will be overwritten by the input.\\n\"\r\n+            + \"Parameters: INDEX (must be a positive integer) \"\r\n+            + PREFIX_REMARK + \"[REMARK]\\n\"\r\n+            + \"Example: \" + COMMAND_WORD + \" 1 \"\r\n+            + PREFIX_REMARK + \"Likes to swim.\";\r\n+\r\n+    public static final String MESSAGE_ARGUMENTS = \"Index: %1$d, Remark: %2$s\";\r\n+    public static final String MESSAGE_ADD_REMARK_SUCCESS = \"Added remark to Person: %1$s\";\r\n+    public static final String MESSAGE_DELETE_REMARK_SUCCESS = \"Removed remark from Person: %1$s\";\r\n+    private final Index index;\r\n+    private final Remark remark;\r\n+\r\n+    /**\r\n+     * @param index of the person in the filtered person list to edit the remark\r\n+     * @param remark of the person to be updated to\r\n+     */\r\n+    public RemarkCommand(Index index, Remark remark) {\r\n+        requireAllNonNull(index, remark);\r\n+\r\n+        this.index = index;\r\n+        this.remark = remark;\r\n+    }\r\n+    @Override\r\n+    public CommandResult execute(Model model) throws CommandException {\r\n+        List<Person> lastShownList = model.getFilteredPersonList();\r\n+\r\n+        if (index.getZeroBased() >= lastShownList.size()) {\r\n+            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\r\n+        }\r\n+\r\n+        Person personToEdit = lastShownList.get(index.getZeroBased());\r\n+        Person editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),\r\n+                personToEdit.getAddress(), remark, personToEdit.getTags());\r\n+\r\n+        model.setPerson(personToEdit, editedPerson);\r\n+        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\r\n+\r\n+        return new CommandResult(generateSuccessMessage(editedPerson));\r\n+    }\r\n+\r\n+    /**\r\n+     * Generates a command execution success message based on whether the remark is added to or removed from\r\n+     * {@code personToEdit}.\r\n+     */\r\n+    private String generateSuccessMessage(Person personToEdit) {\r\n+        String message = !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;\r\n+        return String.format(message, personToEdit);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object other) {\r\n+        // short circuit if same object\r\n+        if (other == this) {\r\n+            return true;\r\n+        }\r\n+\r\n+        // instanceof handles nulls\r\n+        if (!(other instanceof RemarkCommand)) {\r\n+            return false;\r\n+        }\r\n+\r\n+        // state check\r\n+        RemarkCommand e = (RemarkCommand) other;\r\n+        return index.equals(e.index)\r\n+                && remark.equals(e.remark);\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6b00678d9ea7824a5cb5f8bb7d94375b98c82687",
    "filename": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "status": "modified",
    "additions": 62,
    "deletions": 60,
    "changes": 122,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/parser/AddCommandParser.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,60 +1,62 @@\n-package seedu.address.logic.parser;\n-\n-import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n-\n-import java.util.Set;\n-import java.util.stream.Stream;\n-\n-import seedu.address.logic.commands.AddCommand;\n-import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * Parses input arguments and creates a new AddCommand object\n- */\n-public class AddCommandParser implements Parser<AddCommand> {\n-\n-    /**\n-     * Parses the given {@code String} of arguments in the context of the AddCommand\n-     * and returns an AddCommand object for execution.\n-     * @throws ParseException if the user input does not conform the expected format\n-     */\n-    public AddCommand parse(String args) throws ParseException {\n-        ArgumentMultimap argMultimap =\n-                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\n-\n-        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)\n-                || !argMultimap.getPreamble().isEmpty()) {\n-            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\n-        }\n-\n-        Name name = ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());\n-        Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\n-        Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\n-        Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());\n-        Set<Tag> tagList = ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));\n-\n-        Person person = new Person(name, phone, email, address, tagList);\n-\n-        return new AddCommand(person);\n-    }\n-\n-    /**\n-     * Returns true if none of the prefixes contains empty {@code Optional} values in the given\n-     * {@code ArgumentMultimap}.\n-     */\n-    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {\n-        return Stream.of(prefixes).allMatch(prefix -> argumentMultimap.getValue(prefix).isPresent());\n-    }\n-\n-}\n+package seedu.address.logic.parser;\r\n+\r\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\r\n+\r\n+import java.util.Set;\r\n+import java.util.stream.Stream;\r\n+\r\n+import seedu.address.logic.commands.AddCommand;\r\n+import seedu.address.logic.parser.exceptions.ParseException;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.person.Remark;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * Parses input arguments and creates a new AddCommand object\r\n+ */\r\n+public class AddCommandParser implements Parser<AddCommand> {\r\n+\r\n+    /**\r\n+     * Parses the given {@code String} of arguments in the context of the AddCommand\r\n+     * and returns an AddCommand object for execution.\r\n+     * @throws ParseException if the user input does not conform the expected format\r\n+     */\r\n+    public AddCommand parse(String args) throws ParseException {\r\n+        ArgumentMultimap argMultimap =\r\n+                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\r\n+\r\n+        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)\r\n+                || !argMultimap.getPreamble().isEmpty()) {\r\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\r\n+        }\r\n+\r\n+        Name name = ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());\r\n+        Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\r\n+        Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\r\n+        Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());\r\n+        Remark remark = new Remark(\"\"); // add command does not allow adding remarks straight away\r\n+        Set<Tag> tagList = ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));\r\n+\r\n+        Person person = new Person(name, phone, email, address, remark, tagList);\r\n+\r\n+        return new AddCommand(person);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns true if none of the prefixes contains empty {@code Optional} values in the given\r\n+     * {@code ArgumentMultimap}.\r\n+     */\r\n+    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {\r\n+        return Stream.of(prefixes).allMatch(prefix -> argumentMultimap.getValue(prefix).isPresent());\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "b650f13a6b9b436ebac924958193b175c3fc0ad8",
    "filename": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/parser/AddressBookParser.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -15,6 +15,7 @@\n import seedu.address.logic.commands.FindCommand;\n import seedu.address.logic.commands.HelpCommand;\n import seedu.address.logic.commands.ListCommand;\n+import seedu.address.logic.commands.RemarkCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n \n /**\n@@ -68,6 +69,9 @@ public Command parseCommand(String userInput) throws ParseException {\n         case HelpCommand.COMMAND_WORD:\n             return new HelpCommand();\n \n+        case RemarkCommand.COMMAND_WORD:\n+            return new RemarkCommandParser().parse(arguments);\n+\n         default:\n             throw new ParseException(MESSAGE_UNKNOWN_COMMAND);\n         }"
  },
  {
    "sha": "96be13b3772054877f32a657a7ffd8f9c85ad303",
    "filename": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/parser/CliSyntax.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -11,5 +11,6 @@\n     public static final Prefix PREFIX_EMAIL = new Prefix(\"e/\");\n     public static final Prefix PREFIX_ADDRESS = new Prefix(\"a/\");\n     public static final Prefix PREFIX_TAG = new Prefix(\"t/\");\n+    public static final Prefix PREFIX_REMARK = new Prefix(\"r/\");\n \n }"
  },
  {
    "sha": "093896e40044924911371afc13c86ca99d48fef9",
    "filename": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "status": "modified",
    "additions": 82,
    "deletions": 82,
    "changes": 164,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/parser/EditCommandParser.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,82 +1,82 @@\n-package seedu.address.logic.parser;\n-\n-import static java.util.Objects.requireNonNull;\n-import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Optional;\n-import java.util.Set;\n-\n-import seedu.address.commons.core.index.Index;\n-import seedu.address.logic.commands.EditCommand;\n-import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n-import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * Parses input arguments and creates a new EditCommand object\n- */\n-public class EditCommandParser implements Parser<EditCommand> {\n-\n-    /**\n-     * Parses the given {@code String} of arguments in the context of the EditCommand\n-     * and returns an EditCommand object for execution.\n-     * @throws ParseException if the user input does not conform the expected format\n-     */\n-    public EditCommand parse(String args) throws ParseException {\n-        requireNonNull(args);\n-        ArgumentMultimap argMultimap =\n-                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\n-\n-        Index index;\n-\n-        try {\n-            index = ParserUtil.parseIndex(argMultimap.getPreamble());\n-        } catch (ParseException pe) {\n-            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);\n-        }\n-\n-        EditPersonDescriptor editPersonDescriptor = new EditPersonDescriptor();\n-        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {\n-            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));\n-        }\n-        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {\n-            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));\n-        }\n-        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {\n-            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));\n-        }\n-        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {\n-            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));\n-        }\n-        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);\n-\n-        if (!editPersonDescriptor.isAnyFieldEdited()) {\n-            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);\n-        }\n-\n-        return new EditCommand(index, editPersonDescriptor);\n-    }\n-\n-    /**\n-     * Parses {@code Collection<String> tags} into a {@code Set<Tag>} if {@code tags} is non-empty.\n-     * If {@code tags} contain only one element which is an empty string, it will be parsed into a\n-     * {@code Set<Tag>} containing zero tags.\n-     */\n-    private Optional<Set<Tag>> parseTagsForEdit(Collection<String> tags) throws ParseException {\n-        assert tags != null;\n-\n-        if (tags.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        Collection<String> tagSet = tags.size() == 1 && tags.contains(\"\") ? Collections.emptySet() : tags;\n-        return Optional.of(ParserUtil.parseTags(tagSet));\n-    }\n-\n-}\n+package seedu.address.logic.parser;\r\n+\r\n+import static java.util.Objects.requireNonNull;\r\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Optional;\r\n+import java.util.Set;\r\n+\r\n+import seedu.address.commons.core.index.Index;\r\n+import seedu.address.logic.commands.EditCommand;\r\n+import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\r\n+import seedu.address.logic.parser.exceptions.ParseException;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * Parses input arguments and creates a new EditCommand object\r\n+ */\r\n+public class EditCommandParser implements Parser<EditCommand> {\r\n+\r\n+    /**\r\n+     * Parses the given {@code String} of arguments in the context of the EditCommand\r\n+     * and returns an EditCommand object for execution.\r\n+     * @throws ParseException if the user input does not conform the expected format\r\n+     */\r\n+    public EditCommand parse(String args) throws ParseException {\r\n+        requireNonNull(args);\r\n+        ArgumentMultimap argMultimap =\r\n+                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\r\n+\r\n+        Index index;\r\n+\r\n+        try {\r\n+            index = ParserUtil.parseIndex(argMultimap.getPreamble());\r\n+        } catch (ParseException pe) {\r\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);\r\n+        }\r\n+\r\n+        EditPersonDescriptor editPersonDescriptor = new EditPersonDescriptor();\r\n+        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {\r\n+            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));\r\n+        }\r\n+        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {\r\n+            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));\r\n+        }\r\n+        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {\r\n+            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));\r\n+        }\r\n+        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {\r\n+            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));\r\n+        }\r\n+        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);\r\n+\r\n+        if (!editPersonDescriptor.isAnyFieldEdited()) {\r\n+            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);\r\n+        }\r\n+\r\n+        return new EditCommand(index, editPersonDescriptor);\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses {@code Collection<String> tags} into a {@code Set<Tag>} if {@code tags} is non-empty.\r\n+     * If {@code tags} contain only one element which is an empty string, it will be parsed into a\r\n+     * {@code Set<Tag>} containing zero tags.\r\n+     */\r\n+    private Optional<Set<Tag>> parseTagsForEdit(Collection<String> tags) throws ParseException {\r\n+        assert tags != null;\r\n+\r\n+        if (tags.isEmpty()) {\r\n+            return Optional.empty();\r\n+        }\r\n+        Collection<String> tagSet = tags.size() == 1 && tags.contains(\"\") ? Collections.emptySet() : tags;\r\n+        return Optional.of(ParserUtil.parseTags(tagSet));\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "f8aeae3f181b22a4e2c163b533822d1a603da4ee",
    "filename": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "status": "modified",
    "additions": 124,
    "deletions": 124,
    "changes": 248,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/parser/ParserUtil.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,124 +1,124 @@\n-package seedu.address.logic.parser;\n-\n-import static java.util.Objects.requireNonNull;\n-\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import seedu.address.commons.core.index.Index;\n-import seedu.address.commons.util.StringUtil;\n-import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * Contains utility methods used for parsing strings in the various *Parser classes.\n- */\n-public class ParserUtil {\n-\n-    public static final String MESSAGE_INVALID_INDEX = \"Index is not a non-zero unsigned integer.\";\n-\n-    /**\n-     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be\n-     * trimmed.\n-     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).\n-     */\n-    public static Index parseIndex(String oneBasedIndex) throws ParseException {\n-        String trimmedIndex = oneBasedIndex.trim();\n-        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {\n-            throw new ParseException(MESSAGE_INVALID_INDEX);\n-        }\n-        return Index.fromOneBased(Integer.parseInt(trimmedIndex));\n-    }\n-\n-    /**\n-     * Parses a {@code String name} into a {@code Name}.\n-     * Leading and trailing whitespaces will be trimmed.\n-     *\n-     * @throws ParseException if the given {@code name} is invalid.\n-     */\n-    public static Name parseName(String name) throws ParseException {\n-        requireNonNull(name);\n-        String trimmedName = name.trim();\n-        if (!Name.isValidName(trimmedName)) {\n-            throw new ParseException(Name.MESSAGE_CONSTRAINTS);\n-        }\n-        return new Name(trimmedName);\n-    }\n-\n-    /**\n-     * Parses a {@code String phone} into a {@code Phone}.\n-     * Leading and trailing whitespaces will be trimmed.\n-     *\n-     * @throws ParseException if the given {@code phone} is invalid.\n-     */\n-    public static Phone parsePhone(String phone) throws ParseException {\n-        requireNonNull(phone);\n-        String trimmedPhone = phone.trim();\n-        if (!Phone.isValidPhone(trimmedPhone)) {\n-            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);\n-        }\n-        return new Phone(trimmedPhone);\n-    }\n-\n-    /**\n-     * Parses a {@code String address} into an {@code Address}.\n-     * Leading and trailing whitespaces will be trimmed.\n-     *\n-     * @throws ParseException if the given {@code address} is invalid.\n-     */\n-    public static Address parseAddress(String address) throws ParseException {\n-        requireNonNull(address);\n-        String trimmedAddress = address.trim();\n-        if (!Address.isValidAddress(trimmedAddress)) {\n-            throw new ParseException(Address.MESSAGE_CONSTRAINTS);\n-        }\n-        return new Address(trimmedAddress);\n-    }\n-\n-    /**\n-     * Parses a {@code String email} into an {@code Email}.\n-     * Leading and trailing whitespaces will be trimmed.\n-     *\n-     * @throws ParseException if the given {@code email} is invalid.\n-     */\n-    public static Email parseEmail(String email) throws ParseException {\n-        requireNonNull(email);\n-        String trimmedEmail = email.trim();\n-        if (!Email.isValidEmail(trimmedEmail)) {\n-            throw new ParseException(Email.MESSAGE_CONSTRAINTS);\n-        }\n-        return new Email(trimmedEmail);\n-    }\n-\n-    /**\n-     * Parses a {@code String tag} into a {@code Tag}.\n-     * Leading and trailing whitespaces will be trimmed.\n-     *\n-     * @throws ParseException if the given {@code tag} is invalid.\n-     */\n-    public static Tag parseTag(String tag) throws ParseException {\n-        requireNonNull(tag);\n-        String trimmedTag = tag.trim();\n-        if (!Tag.isValidTagName(trimmedTag)) {\n-            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);\n-        }\n-        return new Tag(trimmedTag);\n-    }\n-\n-    /**\n-     * Parses {@code Collection<String> tags} into a {@code Set<Tag>}.\n-     */\n-    public static Set<Tag> parseTags(Collection<String> tags) throws ParseException {\n-        requireNonNull(tags);\n-        final Set<Tag> tagSet = new HashSet<>();\n-        for (String tagName : tags) {\n-            tagSet.add(parseTag(tagName));\n-        }\n-        return tagSet;\n-    }\n-}\n+package seedu.address.logic.parser;\r\n+\r\n+import static java.util.Objects.requireNonNull;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import seedu.address.commons.core.index.Index;\r\n+import seedu.address.commons.util.StringUtil;\r\n+import seedu.address.logic.parser.exceptions.ParseException;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * Contains utility methods used for parsing strings in the various *Parser classes.\r\n+ */\r\n+public class ParserUtil {\r\n+\r\n+    public static final String MESSAGE_INVALID_INDEX = \"Index is not a non-zero unsigned integer.\";\r\n+\r\n+    /**\r\n+     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be\r\n+     * trimmed.\r\n+     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).\r\n+     */\r\n+    public static Index parseIndex(String oneBasedIndex) throws ParseException {\r\n+        String trimmedIndex = oneBasedIndex.trim();\r\n+        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {\r\n+            throw new ParseException(MESSAGE_INVALID_INDEX);\r\n+        }\r\n+        return Index.fromOneBased(Integer.parseInt(trimmedIndex));\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses a {@code String name} into a {@code Name}.\r\n+     * Leading and trailing whitespaces will be trimmed.\r\n+     *\r\n+     * @throws ParseException if the given {@code name} is invalid.\r\n+     */\r\n+    public static Name parseName(String name) throws ParseException {\r\n+        requireNonNull(name);\r\n+        String trimmedName = name.trim();\r\n+        if (!Name.isValidName(trimmedName)) {\r\n+            throw new ParseException(Name.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        return new Name(trimmedName);\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses a {@code String phone} into a {@code Phone}.\r\n+     * Leading and trailing whitespaces will be trimmed.\r\n+     *\r\n+     * @throws ParseException if the given {@code phone} is invalid.\r\n+     */\r\n+    public static Phone parsePhone(String phone) throws ParseException {\r\n+        requireNonNull(phone);\r\n+        String trimmedPhone = phone.trim();\r\n+        if (!Phone.isValidPhone(trimmedPhone)) {\r\n+            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        return new Phone(trimmedPhone);\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses a {@code String address} into an {@code Address}.\r\n+     * Leading and trailing whitespaces will be trimmed.\r\n+     *\r\n+     * @throws ParseException if the given {@code address} is invalid.\r\n+     */\r\n+    public static Address parseAddress(String address) throws ParseException {\r\n+        requireNonNull(address);\r\n+        String trimmedAddress = address.trim();\r\n+        if (!Address.isValidAddress(trimmedAddress)) {\r\n+            throw new ParseException(Address.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        return new Address(trimmedAddress);\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses a {@code String email} into an {@code Email}.\r\n+     * Leading and trailing whitespaces will be trimmed.\r\n+     *\r\n+     * @throws ParseException if the given {@code email} is invalid.\r\n+     */\r\n+    public static Email parseEmail(String email) throws ParseException {\r\n+        requireNonNull(email);\r\n+        String trimmedEmail = email.trim();\r\n+        if (!Email.isValidEmail(trimmedEmail)) {\r\n+            throw new ParseException(Email.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        return new Email(trimmedEmail);\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses a {@code String tag} into a {@code Tag}.\r\n+     * Leading and trailing whitespaces will be trimmed.\r\n+     *\r\n+     * @throws ParseException if the given {@code tag} is invalid.\r\n+     */\r\n+    public static Tag parseTag(String tag) throws ParseException {\r\n+        requireNonNull(tag);\r\n+        String trimmedTag = tag.trim();\r\n+        if (!Tag.isValidTagName(trimmedTag)) {\r\n+            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        return new Tag(trimmedTag);\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses {@code Collection<String> tags} into a {@code Set<Tag>}.\r\n+     */\r\n+    public static Set<Tag> parseTags(Collection<String> tags) throws ParseException {\r\n+        requireNonNull(tags);\r\n+        final Set<Tag> tagSet = new HashSet<>();\r\n+        for (String tagName : tags) {\r\n+            tagSet.add(parseTag(tagName));\r\n+        }\r\n+        return tagSet;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "c9e409ca70350ea192a1c258f7762ae24d5fe5e6",
    "filename": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -0,0 +1,36 @@\n+package seedu.address.logic.parser;\r\n+\r\n+import seedu.address.commons.core.index.Index;\r\n+import seedu.address.commons.exceptions.IllegalValueException;\r\n+import seedu.address.logic.commands.RemarkCommand;\r\n+import seedu.address.logic.parser.exceptions.ParseException;\r\n+\r\n+import static java.util.Objects.requireNonNull;\r\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\r\n+import seedu.address.model.person.Remark;\r\n+/**\r\n+ * Parses input arguments and creates a new {@code RemarkCommand} object\r\n+ */\r\n+public class RemarkCommandParser implements Parser<RemarkCommand> {\r\n+    /**\r\n+     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}\r\n+     * and returns a {@code RemarkCommand} object for execution.\r\n+     * @throws ParseException if the user input does not conform the expected format\r\n+     */\r\n+    public RemarkCommand parse(String args) throws ParseException {\r\n+        requireNonNull(args);\r\n+        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(args, PREFIX_REMARK);\r\n+\r\n+        Index index;\r\n+        try {\r\n+            index = ParserUtil.parseIndex(argMultimap.getPreamble());\r\n+        } catch (IllegalValueException ive) {\r\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);\r\n+        }\r\n+\r\n+        String remark = argMultimap.getValue(PREFIX_REMARK).orElse(\"\");\r\n+\r\n+        return new RemarkCommand(index, new Remark(remark));\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b54d87b195519e38c27f5a714501288f9902dc16",
    "filename": "src/main/java/seedu/address/model/person/Address.java",
    "status": "modified",
    "additions": 57,
    "deletions": 57,
    "changes": 114,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/person/Address.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/person/Address.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/model/person/Address.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,57 +1,57 @@\n-package seedu.address.model.person;\n-\n-import static java.util.Objects.requireNonNull;\n-import static seedu.address.commons.util.AppUtil.checkArgument;\n-\n-/**\n- * Represents a Person's address in the address book.\n- * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}\n- */\n-public class Address {\n-\n-    public static final String MESSAGE_CONSTRAINTS = \"Addresses can take any values, and it should not be blank\";\n-\n-    /*\n-     * The first character of the address must not be a whitespace,\n-     * otherwise \" \" (a blank string) becomes a valid input.\n-     */\n-    public static final String VALIDATION_REGEX = \"[^\\\\s].*\";\n-\n-    public final String value;\n-\n-    /**\n-     * Constructs an {@code Address}.\n-     *\n-     * @param address A valid address.\n-     */\n-    public Address(String address) {\n-        requireNonNull(address);\n-        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);\n-        value = address;\n-    }\n-\n-    /**\n-     * Returns true if a given string is a valid email.\n-     */\n-    public static boolean isValidAddress(String test) {\n-        return test.matches(VALIDATION_REGEX);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return value;\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other == this // short circuit if same object\n-                || (other instanceof Address // instanceof handles nulls\n-                && value.equals(((Address) other).value)); // state check\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return value.hashCode();\n-    }\n-\n-}\n+package seedu.address.model.person;\r\n+\r\n+import static java.util.Objects.requireNonNull;\r\n+import static seedu.address.commons.util.AppUtil.checkArgument;\r\n+\r\n+/**\r\n+ * Represents a Person's address in the address book.\r\n+ * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}\r\n+ */\r\n+public class Address {\r\n+\r\n+    public static final String MESSAGE_CONSTRAINTS = \"Addresses can take any values, and it should not be blank\";\r\n+\r\n+    /*\r\n+     * The first character of the address must not be a whitespace,\r\n+     * otherwise \" \" (a blank string) becomes a valid input.\r\n+     */\r\n+    public static final String VALIDATION_REGEX = \"[^\\\\s].*\";\r\n+\r\n+    public final String value;\r\n+\r\n+    /**\r\n+     * Constructs an {@code Address}.\r\n+     *\r\n+     * @param address A valid address.\r\n+     */\r\n+    public Address(String address) {\r\n+        requireNonNull(address);\r\n+        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);\r\n+        value = address;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns true if a given string is a valid email.\r\n+     */\r\n+    public static boolean isValidAddress(String test) {\r\n+        return test.matches(VALIDATION_REGEX);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return value;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object other) {\r\n+        return other == this // short circuit if same object\r\n+                || (other instanceof Address // instanceof handles nulls\r\n+                && value.equals(((Address) other).value)); // state check\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        return value.hashCode();\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "2f1921ffd77c558c6495a48b1e8e17863d736010",
    "filename": "src/main/java/seedu/address/model/person/Person.java",
    "status": "modified",
    "additions": 131,
    "deletions": 123,
    "changes": 254,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/person/Person.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/person/Person.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/model/person/Person.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,123 +1,131 @@\n-package seedu.address.model.person;\n-\n-import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Objects;\n-import java.util.Set;\n-\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * Represents a Person in the address book.\n- * Guarantees: details are present and not null, field values are validated, immutable.\n- */\n-public class Person {\n-\n-    // Identity fields\n-    private final Name name;\n-    private final Phone phone;\n-    private final Email email;\n-\n-    // Data fields\n-    private final Address address;\n-    private final Set<Tag> tags = new HashSet<>();\n-\n-    /**\n-     * Every field must be present and not null.\n-     */\n-    public Person(Name name, Phone phone, Email email, Address address, Set<Tag> tags) {\n-        requireAllNonNull(name, phone, email, address, tags);\n-        this.name = name;\n-        this.phone = phone;\n-        this.email = email;\n-        this.address = address;\n-        this.tags.addAll(tags);\n-    }\n-\n-    public Name getName() {\n-        return name;\n-    }\n-\n-    public Phone getPhone() {\n-        return phone;\n-    }\n-\n-    public Email getEmail() {\n-        return email;\n-    }\n-\n-    public Address getAddress() {\n-        return address;\n-    }\n-\n-    /**\n-     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}\n-     * if modification is attempted.\n-     */\n-    public Set<Tag> getTags() {\n-        return Collections.unmodifiableSet(tags);\n-    }\n-\n-    /**\n-     * Returns true if both persons have the same name.\n-     * This defines a weaker notion of equality between two persons.\n-     */\n-    public boolean isSamePerson(Person otherPerson) {\n-        if (otherPerson == this) {\n-            return true;\n-        }\n-\n-        return otherPerson != null\n-                && otherPerson.getName().equals(getName());\n-    }\n-\n-    /**\n-     * Returns true if both persons have the same identity and data fields.\n-     * This defines a stronger notion of equality between two persons.\n-     */\n-    @Override\n-    public boolean equals(Object other) {\n-        if (other == this) {\n-            return true;\n-        }\n-\n-        if (!(other instanceof Person)) {\n-            return false;\n-        }\n-\n-        Person otherPerson = (Person) other;\n-        return otherPerson.getName().equals(getName())\n-                && otherPerson.getPhone().equals(getPhone())\n-                && otherPerson.getEmail().equals(getEmail())\n-                && otherPerson.getAddress().equals(getAddress())\n-                && otherPerson.getTags().equals(getTags());\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        // use this method for custom fields hashing instead of implementing your own\n-        return Objects.hash(name, phone, email, address, tags);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        final StringBuilder builder = new StringBuilder();\n-        builder.append(getName())\n-                .append(\"; Phone: \")\n-                .append(getPhone())\n-                .append(\"; Email: \")\n-                .append(getEmail())\n-                .append(\"; Address: \")\n-                .append(getAddress());\n-\n-        Set<Tag> tags = getTags();\n-        if (!tags.isEmpty()) {\n-            builder.append(\"; Tags: \");\n-            tags.forEach(builder::append);\n-        }\n-        return builder.toString();\n-    }\n-\n-}\n+package seedu.address.model.person;\r\n+\r\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Objects;\r\n+import java.util.Set;\r\n+\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * Represents a Person in the address book.\r\n+ * Guarantees: details are present and not null, field values are validated, immutable.\r\n+ */\r\n+public class Person {\r\n+\r\n+    // Identity fields\r\n+    private final Name name;\r\n+    private final Phone phone;\r\n+    private final Email email;\r\n+\r\n+    // Data fields\r\n+    private final Address address;\r\n+    private final Remark remark;\r\n+    private final Set<Tag> tags = new HashSet<>();\r\n+\r\n+    /**\r\n+     * Every field must be present and not null.\r\n+     */\r\n+    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set<Tag> tags) {\r\n+        requireAllNonNull(name, phone, email, address, tags);\r\n+        this.name = name;\r\n+        this.phone = phone;\r\n+        this.email = email;\r\n+        this.address = address;\r\n+        this.remark = remark;\r\n+        this.tags.addAll(tags);\r\n+    }\r\n+\r\n+    public Name getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public Phone getPhone() {\r\n+        return phone;\r\n+    }\r\n+\r\n+    public Email getEmail() {\r\n+        return email;\r\n+    }\r\n+\r\n+    public Address getAddress() {\r\n+        return address;\r\n+    }\r\n+\r\n+    public Remark getRemark() {\r\n+        return remark;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}\r\n+     * if modification is attempted.\r\n+     */\r\n+    public Set<Tag> getTags() {\r\n+        return Collections.unmodifiableSet(tags);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns true if both persons have the same name.\r\n+     * This defines a weaker notion of equality between two persons.\r\n+     */\r\n+    public boolean isSamePerson(Person otherPerson) {\r\n+        if (otherPerson == this) {\r\n+            return true;\r\n+        }\r\n+\r\n+        return otherPerson != null\r\n+                && otherPerson.getName().equals(getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns true if both persons have the same identity and data fields.\r\n+     * This defines a stronger notion of equality between two persons.\r\n+     */\r\n+    @Override\r\n+    public boolean equals(Object other) {\r\n+        if (other == this) {\r\n+            return true;\r\n+        }\r\n+\r\n+        if (!(other instanceof Person)) {\r\n+            return false;\r\n+        }\r\n+\r\n+        Person otherPerson = (Person) other;\r\n+        return otherPerson.getName().equals(getName())\r\n+                && otherPerson.getPhone().equals(getPhone())\r\n+                && otherPerson.getEmail().equals(getEmail())\r\n+                && otherPerson.getAddress().equals(getAddress())\r\n+                && otherPerson.getTags().equals(getTags());\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        // use this method for custom fields hashing instead of implementing your own\r\n+        return Objects.hash(name, phone, email, address, tags);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        final StringBuilder builder = new StringBuilder();\r\n+        builder.append(getName())\r\n+                .append(\"; Phone: \")\r\n+                .append(getPhone())\r\n+                .append(\"; Email: \")\r\n+                .append(getEmail())\r\n+                .append(\"; Address: \")\r\n+                .append(getAddress())\r\n+                .append(\" Remark: \")\r\n+                .append(getRemark());\r\n+\r\n+        Set<Tag> tags = getTags();\r\n+        if (!tags.isEmpty()) {\r\n+            builder.append(\"; Tags: \");\r\n+            tags.forEach(builder::append);\r\n+        }\r\n+        return builder.toString();\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "86af084a1b48dd4a38f524cc211241724fc445e5",
    "filename": "src/main/java/seedu/address/model/person/Remark.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/person/Remark.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/person/Remark.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/model/person/Remark.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -0,0 +1,33 @@\n+package seedu.address.model.person;\r\n+\r\n+import static java.util.Objects.requireNonNull;\r\n+\r\n+/**\r\n+ * Represents a Person's remark in the address book.\r\n+ * Guarantees: immutable; is always valid\r\n+ */\r\n+public class Remark {\r\n+    public final String value;\r\n+\r\n+    public Remark(String remark) {\r\n+        requireNonNull(remark);\r\n+        value = remark;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return value;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object other) {\r\n+        return other == this // short circuit if same object\r\n+                || (other instanceof Remark // instanceof handles nulls\r\n+                && value.equals(((Remark) other).value)); // state check\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        return value.hashCode();\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e36fa29188eb757b950c4f88df413168f42a4855",
    "filename": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "status": "modified",
    "additions": 64,
    "deletions": 60,
    "changes": 124,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/model/util/SampleDataUtil.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,60 +1,64 @@\n-package seedu.address.model.util;\n-\n-import java.util.Arrays;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import seedu.address.model.AddressBook;\n-import seedu.address.model.ReadOnlyAddressBook;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * Contains utility methods for populating {@code AddressBook} with sample data.\n- */\n-public class SampleDataUtil {\n-    public static Person[] getSamplePersons() {\n-        return new Person[] {\n-            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),\n-                new Address(\"Blk 30 Geylang Street 29, #06-40\"),\n-                getTagSet(\"friends\")),\n-            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),\n-                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),\n-                getTagSet(\"colleagues\", \"friends\")),\n-            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),\n-                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),\n-                getTagSet(\"neighbours\")),\n-            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),\n-                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),\n-                getTagSet(\"family\")),\n-            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),\n-                new Address(\"Blk 47 Tampines Street 20, #17-35\"),\n-                getTagSet(\"classmates\")),\n-            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),\n-                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),\n-                getTagSet(\"colleagues\"))\n-        };\n-    }\n-\n-    public static ReadOnlyAddressBook getSampleAddressBook() {\n-        AddressBook sampleAb = new AddressBook();\n-        for (Person samplePerson : getSamplePersons()) {\n-            sampleAb.addPerson(samplePerson);\n-        }\n-        return sampleAb;\n-    }\n-\n-    /**\n-     * Returns a tag set containing the list of strings given.\n-     */\n-    public static Set<Tag> getTagSet(String... strings) {\n-        return Arrays.stream(strings)\n-                .map(Tag::new)\n-                .collect(Collectors.toSet());\n-    }\n-\n-}\n+package seedu.address.model.util;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import seedu.address.model.AddressBook;\r\n+import seedu.address.model.ReadOnlyAddressBook;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.person.Remark;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * Contains utility methods for populating {@code AddressBook} with sample data.\r\n+ */\r\n+public class SampleDataUtil {\r\n+\r\n+    public static final Remark EMPTY_REMARK = new Remark(\"\");\r\n+\r\n+    public static Person[] getSamplePersons() {\r\n+        return new Person[] {\r\n+                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),\r\n+                        new Address(\"Blk 30 Geylang Street 29, #06-40\"), EMPTY_REMARK,\r\n+                        getTagSet(\"friends\")),\r\n+                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),\r\n+                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK,\r\n+                        getTagSet(\"colleagues\", \"friends\")),\r\n+                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),\r\n+                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK,\r\n+                        getTagSet(\"neighbours\")),\r\n+                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),\r\n+                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_REMARK,\r\n+                        getTagSet(\"family\")),\r\n+                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),\r\n+                        new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK,\r\n+                        getTagSet(\"classmates\")),\r\n+                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),\r\n+                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_REMARK,\r\n+                        getTagSet(\"colleagues\"))\r\n+        };\r\n+    }\r\n+\r\n+    public static ReadOnlyAddressBook getSampleAddressBook() {\r\n+        AddressBook sampleAb = new AddressBook();\r\n+        for (Person samplePerson : getSamplePersons()) {\r\n+            sampleAb.addPerson(samplePerson);\r\n+        }\r\n+        return sampleAb;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a tag set containing the list of strings given.\r\n+     */\r\n+    public static Set<Tag> getTagSet(String... strings) {\r\n+        return Arrays.stream(strings)\r\n+                .map(Tag::new)\r\n+                .collect(Collectors.toSet());\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "33b1a1ba3df6c4de4a18f5f9cb0807abbe62edca",
    "filename": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "status": "modified",
    "additions": 118,
    "deletions": 109,
    "changes": 227,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/storage/JsonAdaptedPerson.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,109 +1,118 @@\n-package seedu.address.storage;\n-\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-import seedu.address.commons.exceptions.IllegalValueException;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * Jackson-friendly version of {@link Person}.\n- */\n-class JsonAdaptedPerson {\n-\n-    public static final String MISSING_FIELD_MESSAGE_FORMAT = \"Person's %s field is missing!\";\n-\n-    private final String name;\n-    private final String phone;\n-    private final String email;\n-    private final String address;\n-    private final List<JsonAdaptedTag> tagged = new ArrayList<>();\n-\n-    /**\n-     * Constructs a {@code JsonAdaptedPerson} with the given person details.\n-     */\n-    @JsonCreator\n-    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,\n-            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,\n-            @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n-        this.name = name;\n-        this.phone = phone;\n-        this.email = email;\n-        this.address = address;\n-        if (tagged != null) {\n-            this.tagged.addAll(tagged);\n-        }\n-    }\n-\n-    /**\n-     * Converts a given {@code Person} into this class for Jackson use.\n-     */\n-    public JsonAdaptedPerson(Person source) {\n-        name = source.getName().fullName;\n-        phone = source.getPhone().value;\n-        email = source.getEmail().value;\n-        address = source.getAddress().value;\n-        tagged.addAll(source.getTags().stream()\n-                .map(JsonAdaptedTag::new)\n-                .collect(Collectors.toList()));\n-    }\n-\n-    /**\n-     * Converts this Jackson-friendly adapted person object into the model's {@code Person} object.\n-     *\n-     * @throws IllegalValueException if there were any data constraints violated in the adapted person.\n-     */\n-    public Person toModelType() throws IllegalValueException {\n-        final List<Tag> personTags = new ArrayList<>();\n-        for (JsonAdaptedTag tag : tagged) {\n-            personTags.add(tag.toModelType());\n-        }\n-\n-        if (name == null) {\n-            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));\n-        }\n-        if (!Name.isValidName(name)) {\n-            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);\n-        }\n-        final Name modelName = new Name(name);\n-\n-        if (phone == null) {\n-            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));\n-        }\n-        if (!Phone.isValidPhone(phone)) {\n-            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);\n-        }\n-        final Phone modelPhone = new Phone(phone);\n-\n-        if (email == null) {\n-            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));\n-        }\n-        if (!Email.isValidEmail(email)) {\n-            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);\n-        }\n-        final Email modelEmail = new Email(email);\n-\n-        if (address == null) {\n-            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));\n-        }\n-        if (!Address.isValidAddress(address)) {\n-            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);\n-        }\n-        final Address modelAddress = new Address(address);\n-\n-        final Set<Tag> modelTags = new HashSet<>(personTags);\n-        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);\n-    }\n-\n-}\n+package seedu.address.storage;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import com.fasterxml.jackson.annotation.JsonCreator;\r\n+import com.fasterxml.jackson.annotation.JsonProperty;\r\n+\r\n+import seedu.address.commons.exceptions.IllegalValueException;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.person.Remark;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * Jackson-friendly version of {@link Person}.\r\n+ */\r\n+class JsonAdaptedPerson {\r\n+\r\n+    public static final String MISSING_FIELD_MESSAGE_FORMAT = \"Person's %s field is missing!\";\r\n+\r\n+    private final String name;\r\n+    private final String phone;\r\n+    private final String email;\r\n+    private final String address;\r\n+    private final String remark;\r\n+    private final List<JsonAdaptedTag> tagged = new ArrayList<>();\r\n+\r\n+    /**\r\n+     * Constructs a {@code JsonAdaptedPerson} with the given person details.\r\n+     */\r\n+    @JsonCreator\r\n+    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,\r\n+                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,\r\n+                             @JsonProperty(\"remark\") String remark, @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\r\n+        this.name = name;\r\n+        this.phone = phone;\r\n+        this.email = email;\r\n+        this.address = address;\r\n+        this.remark = remark;\r\n+        if (tagged != null) {\r\n+            this.tagged.addAll(tagged);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Converts a given {@code Person} into this class for Jackson use.\r\n+     */\r\n+    public JsonAdaptedPerson(Person source) {\r\n+        name = source.getName().fullName;\r\n+        phone = source.getPhone().value;\r\n+        email = source.getEmail().value;\r\n+        address = source.getAddress().value;\r\n+        remark = source.getRemark().value;\r\n+        tagged.addAll(source.getTags().stream()\r\n+                .map(JsonAdaptedTag::new)\r\n+                .collect(Collectors.toList()));\r\n+    }\r\n+\r\n+    /**\r\n+     * Converts this Jackson-friendly adapted person object into the model's {@code Person} object.\r\n+     *\r\n+     * @throws IllegalValueException if there were any data constraints violated in the adapted person.\r\n+     */\r\n+    public Person toModelType() throws IllegalValueException {\r\n+        final List<Tag> personTags = new ArrayList<>();\r\n+        for (JsonAdaptedTag tag : tagged) {\r\n+            personTags.add(tag.toModelType());\r\n+        }\r\n+\r\n+        if (name == null) {\r\n+            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));\r\n+        }\r\n+        if (!Name.isValidName(name)) {\r\n+            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        final Name modelName = new Name(name);\r\n+\r\n+        if (phone == null) {\r\n+            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));\r\n+        }\r\n+        if (!Phone.isValidPhone(phone)) {\r\n+            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        final Phone modelPhone = new Phone(phone);\r\n+\r\n+        if (email == null) {\r\n+            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));\r\n+        }\r\n+        if (!Email.isValidEmail(email)) {\r\n+            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        final Email modelEmail = new Email(email);\r\n+\r\n+        if (address == null) {\r\n+            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));\r\n+        }\r\n+        if (!Address.isValidAddress(address)) {\r\n+            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);\r\n+        }\r\n+        final Address modelAddress = new Address(address);\r\n+\r\n+        if (remark == null) {\r\n+            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));\r\n+        }\r\n+        final Remark modelRemark = new Remark(remark);\r\n+\r\n+        final Set<Tag> modelTags = new HashSet<>(personTags);\r\n+        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags);\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5d0950c5c7f8abb5af290000af939785b30e34d2",
    "filename": "src/main/java/seedu/address/ui/PersonCard.java",
    "status": "modified",
    "additions": 80,
    "deletions": 77,
    "changes": 157,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/ui/PersonCard.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/java/seedu/address/ui/PersonCard.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/java/seedu/address/ui/PersonCard.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,77 +1,80 @@\n-package seedu.address.ui;\n-\n-import java.util.Comparator;\n-\n-import javafx.fxml.FXML;\n-import javafx.scene.control.Label;\n-import javafx.scene.layout.FlowPane;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Region;\n-import seedu.address.model.person.Person;\n-\n-/**\n- * An UI component that displays information of a {@code Person}.\n- */\n-public class PersonCard extends UiPart<Region> {\n-\n-    private static final String FXML = \"PersonListCard.fxml\";\n-\n-    /**\n-     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.\n-     * As a consequence, UI elements' variable names cannot be set to such keywords\n-     * or an exception will be thrown by JavaFX during runtime.\n-     *\n-     * @see <a href=\"https://github.com/se-edu/addressbook-level4/issues/336\">The issue on AddressBook level 4</a>\n-     */\n-\n-    public final Person person;\n-\n-    @FXML\n-    private HBox cardPane;\n-    @FXML\n-    private Label name;\n-    @FXML\n-    private Label id;\n-    @FXML\n-    private Label phone;\n-    @FXML\n-    private Label address;\n-    @FXML\n-    private Label email;\n-    @FXML\n-    private FlowPane tags;\n-\n-    /**\n-     * Creates a {@code PersonCode} with the given {@code Person} and index to display.\n-     */\n-    public PersonCard(Person person, int displayedIndex) {\n-        super(FXML);\n-        this.person = person;\n-        id.setText(displayedIndex + \". \");\n-        name.setText(person.getName().fullName);\n-        phone.setText(person.getPhone().value);\n-        address.setText(person.getAddress().value);\n-        email.setText(person.getEmail().value);\n-        person.getTags().stream()\n-                .sorted(Comparator.comparing(tag -> tag.tagName))\n-                .forEach(tag -> tags.getChildren().add(new Label(tag.tagName)));\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        // short circuit if same object\n-        if (other == this) {\n-            return true;\n-        }\n-\n-        // instanceof handles nulls\n-        if (!(other instanceof PersonCard)) {\n-            return false;\n-        }\n-\n-        // state check\n-        PersonCard card = (PersonCard) other;\n-        return id.getText().equals(card.id.getText())\n-                && person.equals(card.person);\n-    }\n-}\n+package seedu.address.ui;\r\n+\r\n+import java.util.Comparator;\r\n+\r\n+import javafx.fxml.FXML;\r\n+import javafx.scene.control.Label;\r\n+import javafx.scene.layout.FlowPane;\r\n+import javafx.scene.layout.HBox;\r\n+import javafx.scene.layout.Region;\r\n+import seedu.address.model.person.Person;\r\n+\r\n+/**\r\n+ * An UI component that displays information of a {@code Person}.\r\n+ */\r\n+public class PersonCard extends UiPart<Region> {\r\n+\r\n+    private static final String FXML = \"PersonListCard.fxml\";\r\n+\r\n+    /**\r\n+     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.\r\n+     * As a consequence, UI elements' variable names cannot be set to such keywords\r\n+     * or an exception will be thrown by JavaFX during runtime.\r\n+     *\r\n+     * @see <a href=\"https://github.com/se-edu/addressbook-level4/issues/336\">The issue on AddressBook level 4</a>\r\n+     */\r\n+\r\n+    public final Person person;\r\n+\r\n+    @FXML\r\n+    private HBox cardPane;\r\n+    @FXML\r\n+    private Label name;\r\n+    @FXML\r\n+    private Label id;\r\n+    @FXML\r\n+    private Label phone;\r\n+    @FXML\r\n+    private Label address;\r\n+    @FXML\r\n+    private Label email;\r\n+    @FXML\r\n+    private Label remark;\r\n+    @FXML\r\n+    private FlowPane tags;\r\n+\r\n+    /**\r\n+     * Creates a {@code PersonCode} with the given {@code Person} and index to display.\r\n+     */\r\n+    public PersonCard(Person person, int displayedIndex) {\r\n+        super(FXML);\r\n+        this.person = person;\r\n+        id.setText(displayedIndex + \". \");\r\n+        name.setText(person.getName().fullName);\r\n+        phone.setText(person.getPhone().value);\r\n+        address.setText(person.getAddress().value);\r\n+        email.setText(person.getEmail().value);\r\n+        remark.setText(person.getRemark().value);\r\n+        person.getTags().stream()\r\n+                .sorted(Comparator.comparing(tag -> tag.tagName))\r\n+                .forEach(tag -> tags.getChildren().add(new Label(tag.tagName)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object other) {\r\n+        // short circuit if same object\r\n+        if (other == this) {\r\n+            return true;\r\n+        }\r\n+\r\n+        // instanceof handles nulls\r\n+        if (!(other instanceof PersonCard)) {\r\n+            return false;\r\n+        }\r\n+\r\n+        // state check\r\n+        PersonCard card = (PersonCard) other;\r\n+        return id.getText().equals(card.id.getText())\r\n+                && person.equals(card.person);\r\n+    }\r\n+}\r"
  },
  {
    "sha": "a31c57a4abeac252e67e06f0b3d55fdf41e0b05a",
    "filename": "src/main/resources/view/PersonListCard.fxml",
    "status": "modified",
    "additions": 37,
    "deletions": 36,
    "changes": 73,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/resources/view/PersonListCard.fxml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/main/resources/view/PersonListCard.fxml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/main/resources/view/PersonListCard.fxml?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,36 +1,37 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n-<?import javafx.geometry.Insets?>\n-<?import javafx.scene.control.Label?>\n-<?import javafx.scene.layout.ColumnConstraints?>\n-<?import javafx.scene.layout.FlowPane?>\n-<?import javafx.scene.layout.GridPane?>\n-<?import javafx.scene.layout.HBox?>\n-<?import javafx.scene.layout.Region?>\n-<?import javafx.scene.layout.VBox?>\n-\n-<HBox id=\"cardPane\" fx:id=\"cardPane\" xmlns=\"http://javafx.com/javafx/8\" xmlns:fx=\"http://javafx.com/fxml/1\">\n-  <GridPane HBox.hgrow=\"ALWAYS\">\n-    <columnConstraints>\n-      <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10\" prefWidth=\"150\" />\n-    </columnConstraints>\n-    <VBox alignment=\"CENTER_LEFT\" minHeight=\"105\" GridPane.columnIndex=\"0\">\n-      <padding>\n-        <Insets top=\"5\" right=\"5\" bottom=\"5\" left=\"15\" />\n-      </padding>\n-      <HBox spacing=\"5\" alignment=\"CENTER_LEFT\">\n-        <Label fx:id=\"id\" styleClass=\"cell_big_label\">\n-          <minWidth>\n-            <!-- Ensures that the label text is never truncated -->\n-            <Region fx:constant=\"USE_PREF_SIZE\" />\n-          </minWidth>\n-        </Label>\n-        <Label fx:id=\"name\" text=\"\\$first\" styleClass=\"cell_big_label\" />\n-      </HBox>\n-      <FlowPane fx:id=\"tags\" />\n-      <Label fx:id=\"phone\" styleClass=\"cell_small_label\" text=\"\\$phone\" />\n-      <Label fx:id=\"address\" styleClass=\"cell_small_label\" text=\"\\$address\" />\n-      <Label fx:id=\"email\" styleClass=\"cell_small_label\" text=\"\\$email\" />\n-    </VBox>\n-  </GridPane>\n-</HBox>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+\r\n+<?import javafx.geometry.Insets?>\r\n+<?import javafx.scene.control.Label?>\r\n+<?import javafx.scene.layout.ColumnConstraints?>\r\n+<?import javafx.scene.layout.FlowPane?>\r\n+<?import javafx.scene.layout.GridPane?>\r\n+<?import javafx.scene.layout.HBox?>\r\n+<?import javafx.scene.layout.Region?>\r\n+<?import javafx.scene.layout.VBox?>\r\n+\r\n+<HBox id=\"cardPane\" fx:id=\"cardPane\" xmlns=\"http://javafx.com/javafx/8\" xmlns:fx=\"http://javafx.com/fxml/1\">\r\n+  <GridPane HBox.hgrow=\"ALWAYS\">\r\n+    <columnConstraints>\r\n+      <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10\" prefWidth=\"150\" />\r\n+    </columnConstraints>\r\n+    <VBox alignment=\"CENTER_LEFT\" minHeight=\"105\" GridPane.columnIndex=\"0\">\r\n+      <padding>\r\n+        <Insets top=\"5\" right=\"5\" bottom=\"5\" left=\"15\" />\r\n+      </padding>\r\n+      <HBox spacing=\"5\" alignment=\"CENTER_LEFT\">\r\n+        <Label fx:id=\"id\" styleClass=\"cell_big_label\">\r\n+          <minWidth>\r\n+            <!-- Ensures that the label text is never truncated -->\r\n+            <Region fx:constant=\"USE_PREF_SIZE\" />\r\n+          </minWidth>\r\n+        </Label>\r\n+        <Label fx:id=\"name\" text=\"\\$first\" styleClass=\"cell_big_label\" />\r\n+      </HBox>\r\n+      <FlowPane fx:id=\"tags\" />\r\n+      <Label fx:id=\"phone\" styleClass=\"cell_small_label\" text=\"\\$phone\" />\r\n+      <Label fx:id=\"address\" styleClass=\"cell_small_label\" text=\"\\$address\" />\r\n+      <Label fx:id=\"email\" styleClass=\"cell_small_label\" text=\"\\$email\" />\r\n+      <Label fx:id=\"remark\" styleClass=\"cell_small_label\" text=\"\\$remark\" />\r\n+    </VBox>\r\n+  </GridPane>\r\n+</HBox>\r"
  },
  {
    "sha": "dfa3262be9afcc08477e2b324991af74de6218b2",
    "filename": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,13 +1,13 @@\n-{\n-  \"persons\": [ {\n-    \"name\": \"Valid Person\",\n-    \"phone\": \"9482424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n-  }, {\n-    \"name\": \"Person With Invalid Phone Field\",\n-    \"phone\": \"948asdf2424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n-  } ]\n-}\n+{\r\n+  \"persons\": [ {\r\n+    \"name\": \"Valid Person\",\r\n+    \"phone\": \"9482424\",\r\n+    \"email\": \"hans@example.com\",\r\n+    \"address\": \"4th street\"\r\n+  }, {\r\n+    \"name\": \"Person With Invalid Phone Field\",\r\n+    \"phone\": \"948asdf2424\",\r\n+    \"email\": \"hans@example.com\",\r\n+    \"address\": \"4th street\"\r\n+  } ]\r\n+}\r"
  },
  {
    "sha": "b7e2e881822eab4f4dd32a07277a35969a136c72",
    "filename": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,8 +1,8 @@\n-{\n-  \"persons\": [ {\n-    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",\n-    \"phone\": \"9482424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n-  } ]\n-}\n+{\r\n+  \"persons\": [ {\r\n+    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",\r\n+    \"phone\": \"9482424\",\r\n+    \"email\": \"hans@example.com\",\r\n+    \"address\": \"4th street\"\r\n+  } ]\r\n+}\r"
  },
  {
    "sha": "62832f0e50837f7f924758a7f0e1b0d47ffd4fb8",
    "filename": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "status": "modified",
    "additions": 16,
    "deletions": 14,
    "changes": 30,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,14 +1,16 @@\n-{\n-  \"persons\": [ {\n-    \"name\": \"Alice Pauline\",\n-    \"phone\": \"94351253\",\n-    \"email\": \"alice@example.com\",\n-    \"address\": \"123, Jurong West Ave 6, #08-111\",\n-    \"tagged\": [ \"friends\" ]\n-  }, {\n-    \"name\": \"Alice Pauline\",\n-    \"phone\": \"94351253\",\n-    \"email\": \"pauline@example.com\",\n-    \"address\": \"4th street\"\n-  } ]\n-}\n+{\r\n+  \"persons\": [ {\r\n+    \"name\": \"Alice Pauline\",\r\n+    \"phone\": \"94351253\",\r\n+    \"email\": \"alice@example.com\",\r\n+    \"address\": \"123, Jurong West Ave 6, #08-111\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\": [ \"friends\" ]\r\n+  }, {\r\n+    \"name\": \"Alice Pauline\",\r\n+    \"phone\": \"94351253\",\r\n+    \"email\": \"pauline@example.com\",\r\n+    \"address\": \"4th street\",\r\n+    \"remark\" : \"\"\r\n+  } ]\r\n+}\r"
  },
  {
    "sha": "f8255b0b6d8f94a9646d58767ff7cf61bd179443",
    "filename": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,8 +1,8 @@\n-{\n-  \"persons\": [ {\n-    \"name\": \"Hans Muster\",\n-    \"phone\": \"9482424\",\n-    \"email\": \"invalid@email!3e\",\n-    \"address\": \"4th street\"\n-  } ]\n-}\n+{\r\n+  \"persons\": [ {\r\n+    \"name\": \"Hans Muster\",\r\n+    \"phone\": \"9482424\",\r\n+    \"email\": \"invalid@email!3e\",\r\n+    \"address\": \"4th street\"\r\n+  } ]\r\n+}\r"
  },
  {
    "sha": "6f7d0405e83f26c21a61af868f2fcc0011f53c9d",
    "filename": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "status": "modified",
    "additions": 53,
    "deletions": 46,
    "changes": 99,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,46 +1,53 @@\n-{\n-  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",\n-  \"persons\" : [ {\n-    \"name\" : \"Alice Pauline\",\n-    \"phone\" : \"94351253\",\n-    \"email\" : \"alice@example.com\",\n-    \"address\" : \"123, Jurong West Ave 6, #08-111\",\n-    \"tagged\" : [ \"friends\" ]\n-  }, {\n-    \"name\" : \"Benson Meier\",\n-    \"phone\" : \"98765432\",\n-    \"email\" : \"johnd@example.com\",\n-    \"address\" : \"311, Clementi Ave 2, #02-25\",\n-    \"tagged\" : [ \"owesMoney\", \"friends\" ]\n-  }, {\n-    \"name\" : \"Carl Kurz\",\n-    \"phone\" : \"95352563\",\n-    \"email\" : \"heinz@example.com\",\n-    \"address\" : \"wall street\",\n-    \"tagged\" : [ ]\n-  }, {\n-    \"name\" : \"Daniel Meier\",\n-    \"phone\" : \"87652533\",\n-    \"email\" : \"cornelia@example.com\",\n-    \"address\" : \"10th street\",\n-    \"tagged\" : [ \"friends\" ]\n-  }, {\n-    \"name\" : \"Elle Meyer\",\n-    \"phone\" : \"9482224\",\n-    \"email\" : \"werner@example.com\",\n-    \"address\" : \"michegan ave\",\n-    \"tagged\" : [ ]\n-  }, {\n-    \"name\" : \"Fiona Kunz\",\n-    \"phone\" : \"9482427\",\n-    \"email\" : \"lydia@example.com\",\n-    \"address\" : \"little tokyo\",\n-    \"tagged\" : [ ]\n-  }, {\n-    \"name\" : \"George Best\",\n-    \"phone\" : \"9482442\",\n-    \"email\" : \"anna@example.com\",\n-    \"address\" : \"4th street\",\n-    \"tagged\" : [ ]\n-  } ]\n-}\n+{\r\n+  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",\r\n+  \"persons\" : [ {\r\n+    \"name\" : \"Alice Pauline\",\r\n+    \"phone\" : \"94351253\",\r\n+    \"email\" : \"alice@example.com\",\r\n+    \"address\" : \"123, Jurong West Ave 6, #08-111\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\" : [ \"friends\" ]\r\n+  }, {\r\n+    \"name\" : \"Benson Meier\",\r\n+    \"phone\" : \"98765432\",\r\n+    \"email\" : \"johnd@example.com\",\r\n+    \"address\" : \"311, Clementi Ave 2, #02-25\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\" : [ \"owesMoney\", \"friends\" ]\r\n+  }, {\r\n+    \"name\" : \"Carl Kurz\",\r\n+    \"phone\" : \"95352563\",\r\n+    \"email\" : \"heinz@example.com\",\r\n+    \"address\" : \"wall street\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\" : [ ]\r\n+  }, {\r\n+    \"name\" : \"Daniel Meier\",\r\n+    \"phone\" : \"87652533\",\r\n+    \"email\" : \"cornelia@example.com\",\r\n+    \"address\" : \"10th street\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\" : [ \"friends\" ]\r\n+  }, {\r\n+    \"name\" : \"Elle Meyer\",\r\n+    \"phone\" : \"9482224\",\r\n+    \"email\" : \"werner@example.com\",\r\n+    \"address\" : \"michegan ave\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\" : [ ]\r\n+  }, {\r\n+    \"name\" : \"Fiona Kunz\",\r\n+    \"phone\" : \"9482427\",\r\n+    \"email\" : \"lydia@example.com\",\r\n+    \"address\" : \"little tokyo\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\" : [ ]\r\n+  }, {\r\n+    \"name\" : \"George Best\",\r\n+    \"phone\" : \"9482442\",\r\n+    \"email\" : \"anna@example.com\",\r\n+    \"address\" : \"4th street\",\r\n+    \"remark\" : \"\",\r\n+    \"tagged\" : [ ]\r\n+  } ]\r\n+}\r"
  },
  {
    "sha": "56e1e39622914c7b0d623a293bb75957e4d2b3a6",
    "filename": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "status": "added",
    "additions": 136,
    "deletions": 0,
    "changes": 136,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -0,0 +1,136 @@\n+package seedu.address.logic.commands;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;\r\n+import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;\r\n+import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;\r\n+import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\r\n+import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;\r\n+import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+import seedu.address.commons.core.Messages;\r\n+import seedu.address.commons.core.index.Index;\r\n+import seedu.address.model.AddressBook;\r\n+import seedu.address.model.Model;\r\n+import seedu.address.model.ModelManager;\r\n+import seedu.address.model.UserPrefs;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Remark;\r\n+import seedu.address.testutil.PersonBuilder;\r\n+\r\n+/**\r\n+ * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand.\r\n+ */\r\n+public class RemarkCommandTest {\r\n+\r\n+    private static final String REMARK_STUB = \"Some remark\";\r\n+\r\n+    private Model model = new ModelManager(getTypicalAddressBook(), new UserPrefs());\r\n+\r\n+    @Test\r\n+    public void execute_addRemarkUnfilteredList_success() {\r\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\r\n+        Person editedPerson = new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();\r\n+\r\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));\r\n+\r\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);\r\n+\r\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\r\n+        expectedModel.setPerson(firstPerson, editedPerson);\r\n+\r\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void execute_deleteRemarkUnfilteredList_success() {\r\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\r\n+        Person editedPerson = new PersonBuilder(firstPerson).withRemark(\"\").build();\r\n+\r\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON,\r\n+                new Remark(editedPerson.getRemark().toString()));\r\n+\r\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);\r\n+\r\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\r\n+        expectedModel.setPerson(firstPerson, editedPerson);\r\n+\r\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void execute_filteredList_success() {\r\n+        showPersonAtIndex(model, INDEX_FIRST_PERSON);\r\n+\r\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\r\n+        Person editedPerson = new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))\r\n+                .withRemark(REMARK_STUB).build();\r\n+\r\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));\r\n+\r\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);\r\n+\r\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\r\n+        expectedModel.setPerson(firstPerson, editedPerson);\r\n+\r\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void execute_invalidPersonIndexUnfilteredList_failure() {\r\n+        Index outOfBoundIndex = Index.fromOneBased(model.getFilteredPersonList().size() + 1);\r\n+        RemarkCommand remarkCommand = new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));\r\n+\r\n+        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\r\n+    }\r\n+\r\n+    /**\r\n+     * Edit filtered list where index is larger than size of filtered list,\r\n+     * but smaller than size of address book\r\n+     */\r\n+    @Test\r\n+    public void execute_invalidPersonIndexFilteredList_failure() {\r\n+        showPersonAtIndex(model, INDEX_FIRST_PERSON);\r\n+        Index outOfBoundIndex = INDEX_SECOND_PERSON;\r\n+        // ensures that outOfBoundIndex is still in bounds of address book list\r\n+        assertTrue(outOfBoundIndex.getZeroBased() < model.getAddressBook().getPersonList().size());\r\n+\r\n+        RemarkCommand remarkCommand = new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));\r\n+\r\n+        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void equals() {\r\n+        final RemarkCommand standardCommand = new RemarkCommand(INDEX_FIRST_PERSON,\r\n+                new Remark(VALID_REMARK_AMY));\r\n+\r\n+        // same values -> returns true\r\n+        RemarkCommand commandWithSameValues = new RemarkCommand(INDEX_FIRST_PERSON,\r\n+                new Remark(VALID_REMARK_AMY));\r\n+        assertTrue(standardCommand.equals(commandWithSameValues));\r\n+\r\n+        // same object -> returns true\r\n+        assertTrue(standardCommand.equals(standardCommand));\r\n+\r\n+        // null -> returns false\r\n+        assertFalse(standardCommand.equals(null));\r\n+\r\n+        // different types -> returns false\r\n+        assertFalse(standardCommand.equals(new ClearCommand()));\r\n+\r\n+        // different index -> returns false\r\n+        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON,\r\n+                new Remark(VALID_REMARK_AMY))));\r\n+\r\n+        // different remark -> returns false\r\n+        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON,\r\n+                new Remark(VALID_REMARK_BOB))));\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "198173c522cbb16d9e0c00cef88ca93926d130d1",
    "filename": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "status": "modified",
    "additions": 141,
    "deletions": 141,
    "changes": 282,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,141 +1,141 @@\n-package seedu.address.logic.parser;\n-\n-import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;\n-import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;\n-import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;\n-import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;\n-import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;\n-import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;\n-import static seedu.address.testutil.TypicalPersons.AMY;\n-import static seedu.address.testutil.TypicalPersons.BOB;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import seedu.address.logic.commands.AddCommand;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-import seedu.address.testutil.PersonBuilder;\n-\n-public class AddCommandParserTest {\n-    private AddCommandParser parser = new AddCommandParser();\n-\n-    @Test\n-    public void parse_allFieldsPresent_success() {\n-        Person expectedPerson = new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();\n-\n-        // whitespace only preamble\n-        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n-\n-        // multiple names - last name accepted\n-        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n-\n-        // multiple phones - last phone accepted\n-        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n-\n-        // multiple emails - last email accepted\n-        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n-\n-        // multiple addresses - last address accepted\n-        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n-\n-        // multiple tags - all accepted\n-        Person expectedPersonMultipleTags = new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n-                .build();\n-        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n-                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));\n-    }\n-\n-    @Test\n-    public void parse_optionalFieldsMissing_success() {\n-        // zero tags\n-        Person expectedPerson = new PersonBuilder(AMY).withTags().build();\n-        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,\n-                new AddCommand(expectedPerson));\n-    }\n-\n-    @Test\n-    public void parse_compulsoryFieldMissing_failure() {\n-        String expectedMessage = String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);\n-\n-        // missing name prefix\n-        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,\n-                expectedMessage);\n-\n-        // missing phone prefix\n-        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,\n-                expectedMessage);\n-\n-        // missing email prefix\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,\n-                expectedMessage);\n-\n-        // missing address prefix\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,\n-                expectedMessage);\n-\n-        // all prefixes missing\n-        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,\n-                expectedMessage);\n-    }\n-\n-    @Test\n-    public void parse_invalidValue_failure() {\n-        // invalid name\n-        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n-                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);\n-\n-        // invalid phone\n-        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n-                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);\n-\n-        // invalid email\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB\n-                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);\n-\n-        // invalid address\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC\n-                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);\n-\n-        // invalid tag\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n-                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);\n-\n-        // two invalid values, only first invalid value reported\n-        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,\n-                Name.MESSAGE_CONSTRAINTS);\n-\n-        // non-empty preamble\n-        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,\n-                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\n-    }\n-}\n+package seedu.address.logic.parser;\r\n+\r\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\r\n+import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;\r\n+import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;\r\n+import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;\r\n+import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;\r\n+import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;\r\n+import static seedu.address.testutil.TypicalPersons.AMY;\r\n+import static seedu.address.testutil.TypicalPersons.BOB;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+import seedu.address.logic.commands.AddCommand;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.tag.Tag;\r\n+import seedu.address.testutil.PersonBuilder;\r\n+\r\n+public class AddCommandParserTest {\r\n+    private AddCommandParser parser = new AddCommandParser();\r\n+\r\n+    @Test\r\n+    public void parse_allFieldsPresent_success() {\r\n+        Person expectedPerson = new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();\r\n+\r\n+        // whitespace only preamble\r\n+        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\r\n+                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\r\n+\r\n+        // multiple names - last name accepted\r\n+        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\r\n+                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\r\n+\r\n+        // multiple phones - last phone accepted\r\n+        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB\r\n+                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\r\n+\r\n+        // multiple emails - last email accepted\r\n+        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB\r\n+                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\r\n+\r\n+        // multiple addresses - last address accepted\r\n+        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY\r\n+                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\r\n+\r\n+        // multiple tags - all accepted\r\n+        Person expectedPersonMultipleTags = new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\r\n+                .build();\r\n+        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\r\n+                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_optionalFieldsMissing_success() {\r\n+        // zero tags\r\n+        Person expectedPerson = new PersonBuilder(AMY).withTags().build();\r\n+        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,\r\n+                new AddCommand(expectedPerson));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_compulsoryFieldMissing_failure() {\r\n+        String expectedMessage = String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);\r\n+\r\n+        // missing name prefix\r\n+        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,\r\n+                expectedMessage);\r\n+\r\n+        // missing phone prefix\r\n+        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,\r\n+                expectedMessage);\r\n+\r\n+        // missing email prefix\r\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,\r\n+                expectedMessage);\r\n+\r\n+        // missing address prefix\r\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,\r\n+                expectedMessage);\r\n+\r\n+        // all prefixes missing\r\n+        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,\r\n+                expectedMessage);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_invalidValue_failure() {\r\n+        // invalid name\r\n+        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\r\n+                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // invalid phone\r\n+        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\r\n+                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // invalid email\r\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB\r\n+                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // invalid address\r\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC\r\n+                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // invalid tag\r\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\r\n+                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // two invalid values, only first invalid value reported\r\n+        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,\r\n+                Name.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // non-empty preamble\r\n+        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\r\n+                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,\r\n+                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\r\n+    }\r\n+}\r"
  },
  {
    "sha": "960ded11fe47204d951306f7f3558de687e98645",
    "filename": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "status": "modified",
    "additions": 211,
    "deletions": 211,
    "changes": 422,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,211 +1,211 @@\n-package seedu.address.logic.parser;\n-\n-import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;\n-import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;\n-import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n-import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;\n-import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;\n-import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n-import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;\n-import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import seedu.address.commons.core.index.Index;\n-import seedu.address.logic.commands.EditCommand;\n-import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-import seedu.address.testutil.EditPersonDescriptorBuilder;\n-\n-public class EditCommandParserTest {\n-\n-    private static final String TAG_EMPTY = \" \" + PREFIX_TAG;\n-\n-    private static final String MESSAGE_INVALID_FORMAT =\n-            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);\n-\n-    private EditCommandParser parser = new EditCommandParser();\n-\n-    @Test\n-    public void parse_missingParts_failure() {\n-        // no index specified\n-        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);\n-\n-        // no field specified\n-        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);\n-\n-        // no index and no field specified\n-        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);\n-    }\n-\n-    @Test\n-    public void parse_invalidPreamble_failure() {\n-        // negative index\n-        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);\n-\n-        // zero index\n-        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);\n-\n-        // invalid arguments being parsed as preamble\n-        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);\n-\n-        // invalid prefix being parsed as preamble\n-        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);\n-    }\n-\n-    @Test\n-    public void parse_invalidValue_failure() {\n-        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name\n-        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone\n-        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email\n-        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address\n-        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag\n-\n-        // invalid phone followed by valid email\n-        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);\n-\n-        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone\n-        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}\n-        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);\n-\n-        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,\n-        // parsing it together with a valid tag results in error\n-        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);\n-        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\n-        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\n-\n-        // multiple invalid values, but only the first invalid value is captured\n-        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,\n-                Name.MESSAGE_CONSTRAINTS);\n-    }\n-\n-    @Test\n-    public void parse_allFieldsSpecified_success() {\n-        Index targetIndex = INDEX_SECOND_PERSON;\n-        String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND\n-                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;\n-\n-        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)\n-                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)\n-                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n-\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-    }\n-\n-    @Test\n-    public void parse_someFieldsSpecified_success() {\n-        Index targetIndex = INDEX_FIRST_PERSON;\n-        String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;\n-\n-        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\n-                .withEmail(VALID_EMAIL_AMY).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n-\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-    }\n-\n-    @Test\n-    public void parse_oneFieldSpecified_success() {\n-        // name\n-        Index targetIndex = INDEX_THIRD_PERSON;\n-        String userInput = targetIndex.getOneBased() + NAME_DESC_AMY;\n-        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-\n-        // phone\n-        userInput = targetIndex.getOneBased() + PHONE_DESC_AMY;\n-        descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-\n-        // email\n-        userInput = targetIndex.getOneBased() + EMAIL_DESC_AMY;\n-        descriptor = new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-\n-        // address\n-        userInput = targetIndex.getOneBased() + ADDRESS_DESC_AMY;\n-        descriptor = new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-\n-        // tags\n-        userInput = targetIndex.getOneBased() + TAG_DESC_FRIEND;\n-        descriptor = new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-    }\n-\n-    @Test\n-    public void parse_multipleRepeatedFields_acceptsLast() {\n-        Index targetIndex = INDEX_FIRST_PERSON;\n-        String userInput = targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY\n-                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND\n-                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;\n-\n-        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\n-                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n-                .build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n-\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-    }\n-\n-    @Test\n-    public void parse_invalidValueFollowedByValidValue_success() {\n-        // no other valid values specified\n-        Index targetIndex = INDEX_FIRST_PERSON;\n-        String userInput = targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;\n-        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-\n-        // other valid values specified\n-        userInput = targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB\n-                + PHONE_DESC_BOB;\n-        descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\n-                .withAddress(VALID_ADDRESS_BOB).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-    }\n-\n-    @Test\n-    public void parse_resetTags_success() {\n-        Index targetIndex = INDEX_THIRD_PERSON;\n-        String userInput = targetIndex.getOneBased() + TAG_EMPTY;\n-\n-        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withTags().build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n-\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-    }\n-}\n+package seedu.address.logic.parser;\r\n+\r\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\r\n+import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;\r\n+import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;\r\n+import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;\r\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\r\n+import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;\r\n+import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;\r\n+import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\r\n+import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;\r\n+import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+import seedu.address.commons.core.index.Index;\r\n+import seedu.address.logic.commands.EditCommand;\r\n+import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.tag.Tag;\r\n+import seedu.address.testutil.EditPersonDescriptorBuilder;\r\n+\r\n+public class EditCommandParserTest {\r\n+\r\n+    private static final String TAG_EMPTY = \" \" + PREFIX_TAG;\r\n+\r\n+    private static final String MESSAGE_INVALID_FORMAT =\r\n+            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);\r\n+\r\n+    private EditCommandParser parser = new EditCommandParser();\r\n+\r\n+    @Test\r\n+    public void parse_missingParts_failure() {\r\n+        // no index specified\r\n+        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);\r\n+\r\n+        // no field specified\r\n+        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);\r\n+\r\n+        // no index and no field specified\r\n+        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_invalidPreamble_failure() {\r\n+        // negative index\r\n+        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);\r\n+\r\n+        // zero index\r\n+        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);\r\n+\r\n+        // invalid arguments being parsed as preamble\r\n+        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);\r\n+\r\n+        // invalid prefix being parsed as preamble\r\n+        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_invalidValue_failure() {\r\n+        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name\r\n+        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone\r\n+        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email\r\n+        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address\r\n+        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag\r\n+\r\n+        // invalid phone followed by valid email\r\n+        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone\r\n+        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}\r\n+        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,\r\n+        // parsing it together with a valid tag results in error\r\n+        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);\r\n+        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\r\n+        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\r\n+\r\n+        // multiple invalid values, but only the first invalid value is captured\r\n+        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,\r\n+                Name.MESSAGE_CONSTRAINTS);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_allFieldsSpecified_success() {\r\n+        Index targetIndex = INDEX_SECOND_PERSON;\r\n+        String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND\r\n+                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;\r\n+\r\n+        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)\r\n+                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)\r\n+                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();\r\n+        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_someFieldsSpecified_success() {\r\n+        Index targetIndex = INDEX_FIRST_PERSON;\r\n+        String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;\r\n+\r\n+        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\r\n+                .withEmail(VALID_EMAIL_AMY).build();\r\n+        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_oneFieldSpecified_success() {\r\n+        // name\r\n+        Index targetIndex = INDEX_THIRD_PERSON;\r\n+        String userInput = targetIndex.getOneBased() + NAME_DESC_AMY;\r\n+        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();\r\n+        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+\r\n+        // phone\r\n+        userInput = targetIndex.getOneBased() + PHONE_DESC_AMY;\r\n+        descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();\r\n+        expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+\r\n+        // email\r\n+        userInput = targetIndex.getOneBased() + EMAIL_DESC_AMY;\r\n+        descriptor = new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();\r\n+        expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+\r\n+        // address\r\n+        userInput = targetIndex.getOneBased() + ADDRESS_DESC_AMY;\r\n+        descriptor = new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();\r\n+        expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+\r\n+        // tags\r\n+        userInput = targetIndex.getOneBased() + TAG_DESC_FRIEND;\r\n+        descriptor = new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();\r\n+        expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_multipleRepeatedFields_acceptsLast() {\r\n+        Index targetIndex = INDEX_FIRST_PERSON;\r\n+        String userInput = targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY\r\n+                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND\r\n+                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;\r\n+\r\n+        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\r\n+                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\r\n+                .build();\r\n+        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_invalidValueFollowedByValidValue_success() {\r\n+        // no other valid values specified\r\n+        Index targetIndex = INDEX_FIRST_PERSON;\r\n+        String userInput = targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;\r\n+        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();\r\n+        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+\r\n+        // other valid values specified\r\n+        userInput = targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB\r\n+                + PHONE_DESC_BOB;\r\n+        descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\r\n+                .withAddress(VALID_ADDRESS_BOB).build();\r\n+        expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parse_resetTags_success() {\r\n+        Index targetIndex = INDEX_THIRD_PERSON;\r\n+        String userInput = targetIndex.getOneBased() + TAG_EMPTY;\r\n+\r\n+        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withTags().build();\r\n+        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\r\n+\r\n+        assertParseSuccess(parser, userInput, expectedCommand);\r\n+    }\r\n+}\r"
  },
  {
    "sha": "09575334be09d3d95a55bfa0d213e7b54ea22c04",
    "filename": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "status": "modified",
    "additions": 196,
    "deletions": 196,
    "changes": 392,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/logic/parser/ParserUtilTest.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,196 +1,196 @@\n-package seedu.address.logic.parser;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;\n-import static seedu.address.testutil.Assert.assertThrows;\n-import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-\n-public class ParserUtilTest {\n-    private static final String INVALID_NAME = \"R@chel\";\n-    private static final String INVALID_PHONE = \"+651234\";\n-    private static final String INVALID_ADDRESS = \" \";\n-    private static final String INVALID_EMAIL = \"example.com\";\n-    private static final String INVALID_TAG = \"#friend\";\n-\n-    private static final String VALID_NAME = \"Rachel Walker\";\n-    private static final String VALID_PHONE = \"123456\";\n-    private static final String VALID_ADDRESS = \"123 Main Street #0505\";\n-    private static final String VALID_EMAIL = \"rachel@example.com\";\n-    private static final String VALID_TAG_1 = \"friend\";\n-    private static final String VALID_TAG_2 = \"neighbour\";\n-\n-    private static final String WHITESPACE = \" \\t\\r\\n\";\n-\n-    @Test\n-    public void parseIndex_invalidInput_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseIndex(\"10 a\"));\n-    }\n-\n-    @Test\n-    public void parseIndex_outOfRangeInput_throwsParseException() {\n-        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()\n-            -> ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));\n-    }\n-\n-    @Test\n-    public void parseIndex_validInput_success() throws Exception {\n-        // No whitespaces\n-        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));\n-\n-        // Leading and trailing whitespaces\n-        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));\n-    }\n-\n-    @Test\n-    public void parseName_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseName((String) null));\n-    }\n-\n-    @Test\n-    public void parseName_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseName(INVALID_NAME));\n-    }\n-\n-    @Test\n-    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {\n-        Name expectedName = new Name(VALID_NAME);\n-        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));\n-    }\n-\n-    @Test\n-    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {\n-        String nameWithWhitespace = WHITESPACE + VALID_NAME + WHITESPACE;\n-        Name expectedName = new Name(VALID_NAME);\n-        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));\n-    }\n-\n-    @Test\n-    public void parsePhone_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parsePhone((String) null));\n-    }\n-\n-    @Test\n-    public void parsePhone_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parsePhone(INVALID_PHONE));\n-    }\n-\n-    @Test\n-    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {\n-        Phone expectedPhone = new Phone(VALID_PHONE);\n-        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));\n-    }\n-\n-    @Test\n-    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {\n-        String phoneWithWhitespace = WHITESPACE + VALID_PHONE + WHITESPACE;\n-        Phone expectedPhone = new Phone(VALID_PHONE);\n-        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));\n-    }\n-\n-    @Test\n-    public void parseAddress_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseAddress((String) null));\n-    }\n-\n-    @Test\n-    public void parseAddress_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseAddress(INVALID_ADDRESS));\n-    }\n-\n-    @Test\n-    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {\n-        Address expectedAddress = new Address(VALID_ADDRESS);\n-        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));\n-    }\n-\n-    @Test\n-    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {\n-        String addressWithWhitespace = WHITESPACE + VALID_ADDRESS + WHITESPACE;\n-        Address expectedAddress = new Address(VALID_ADDRESS);\n-        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));\n-    }\n-\n-    @Test\n-    public void parseEmail_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseEmail((String) null));\n-    }\n-\n-    @Test\n-    public void parseEmail_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseEmail(INVALID_EMAIL));\n-    }\n-\n-    @Test\n-    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {\n-        Email expectedEmail = new Email(VALID_EMAIL);\n-        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));\n-    }\n-\n-    @Test\n-    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {\n-        String emailWithWhitespace = WHITESPACE + VALID_EMAIL + WHITESPACE;\n-        Email expectedEmail = new Email(VALID_EMAIL);\n-        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));\n-    }\n-\n-    @Test\n-    public void parseTag_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseTag(null));\n-    }\n-\n-    @Test\n-    public void parseTag_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseTag(INVALID_TAG));\n-    }\n-\n-    @Test\n-    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {\n-        Tag expectedTag = new Tag(VALID_TAG_1);\n-        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));\n-    }\n-\n-    @Test\n-    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {\n-        String tagWithWhitespace = WHITESPACE + VALID_TAG_1 + WHITESPACE;\n-        Tag expectedTag = new Tag(VALID_TAG_1);\n-        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));\n-    }\n-\n-    @Test\n-    public void parseTags_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseTags(null));\n-    }\n-\n-    @Test\n-    public void parseTags_collectionWithInvalidTags_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));\n-    }\n-\n-    @Test\n-    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {\n-        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());\n-    }\n-\n-    @Test\n-    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {\n-        Set<Tag> actualTagSet = ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));\n-        Set<Tag> expectedTagSet = new HashSet<Tag>(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));\n-\n-        assertEquals(expectedTagSet, actualTagSet);\n-    }\n-}\n+package seedu.address.logic.parser;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;\r\n+import static seedu.address.testutil.Assert.assertThrows;\r\n+import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+import seedu.address.logic.parser.exceptions.ParseException;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+public class ParserUtilTest {\r\n+    private static final String INVALID_NAME = \"R@chel\";\r\n+    private static final String INVALID_PHONE = \"+651234\";\r\n+    private static final String INVALID_ADDRESS = \" \";\r\n+    private static final String INVALID_EMAIL = \"example.com\";\r\n+    private static final String INVALID_TAG = \"#friend\";\r\n+\r\n+    private static final String VALID_NAME = \"Rachel Walker\";\r\n+    private static final String VALID_PHONE = \"123456\";\r\n+    private static final String VALID_ADDRESS = \"123 Main Street #0505\";\r\n+    private static final String VALID_EMAIL = \"rachel@example.com\";\r\n+    private static final String VALID_TAG_1 = \"friend\";\r\n+    private static final String VALID_TAG_2 = \"neighbour\";\r\n+\r\n+    private static final String WHITESPACE = \" \\t\\r\\n\";\r\n+\r\n+    @Test\r\n+    public void parseIndex_invalidInput_throwsParseException() {\r\n+        assertThrows(ParseException.class, () -> ParserUtil.parseIndex(\"10 a\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseIndex_outOfRangeInput_throwsParseException() {\r\n+        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()\r\n+            -> ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseIndex_validInput_success() throws Exception {\r\n+        // No whitespaces\r\n+        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));\r\n+\r\n+        // Leading and trailing whitespaces\r\n+        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseName_null_throwsNullPointerException() {\r\n+        assertThrows(NullPointerException.class, () -> ParserUtil.parseName((String) null));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseName_invalidValue_throwsParseException() {\r\n+        assertThrows(ParseException.class, () -> ParserUtil.parseName(INVALID_NAME));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {\r\n+        Name expectedName = new Name(VALID_NAME);\r\n+        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {\r\n+        String nameWithWhitespace = WHITESPACE + VALID_NAME + WHITESPACE;\r\n+        Name expectedName = new Name(VALID_NAME);\r\n+        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parsePhone_null_throwsNullPointerException() {\r\n+        assertThrows(NullPointerException.class, () -> ParserUtil.parsePhone((String) null));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parsePhone_invalidValue_throwsParseException() {\r\n+        assertThrows(ParseException.class, () -> ParserUtil.parsePhone(INVALID_PHONE));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {\r\n+        Phone expectedPhone = new Phone(VALID_PHONE);\r\n+        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {\r\n+        String phoneWithWhitespace = WHITESPACE + VALID_PHONE + WHITESPACE;\r\n+        Phone expectedPhone = new Phone(VALID_PHONE);\r\n+        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseAddress_null_throwsNullPointerException() {\r\n+        assertThrows(NullPointerException.class, () -> ParserUtil.parseAddress((String) null));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseAddress_invalidValue_throwsParseException() {\r\n+        assertThrows(ParseException.class, () -> ParserUtil.parseAddress(INVALID_ADDRESS));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {\r\n+        Address expectedAddress = new Address(VALID_ADDRESS);\r\n+        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {\r\n+        String addressWithWhitespace = WHITESPACE + VALID_ADDRESS + WHITESPACE;\r\n+        Address expectedAddress = new Address(VALID_ADDRESS);\r\n+        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseEmail_null_throwsNullPointerException() {\r\n+        assertThrows(NullPointerException.class, () -> ParserUtil.parseEmail((String) null));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseEmail_invalidValue_throwsParseException() {\r\n+        assertThrows(ParseException.class, () -> ParserUtil.parseEmail(INVALID_EMAIL));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {\r\n+        Email expectedEmail = new Email(VALID_EMAIL);\r\n+        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {\r\n+        String emailWithWhitespace = WHITESPACE + VALID_EMAIL + WHITESPACE;\r\n+        Email expectedEmail = new Email(VALID_EMAIL);\r\n+        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTag_null_throwsNullPointerException() {\r\n+        assertThrows(NullPointerException.class, () -> ParserUtil.parseTag(null));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTag_invalidValue_throwsParseException() {\r\n+        assertThrows(ParseException.class, () -> ParserUtil.parseTag(INVALID_TAG));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {\r\n+        Tag expectedTag = new Tag(VALID_TAG_1);\r\n+        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {\r\n+        String tagWithWhitespace = WHITESPACE + VALID_TAG_1 + WHITESPACE;\r\n+        Tag expectedTag = new Tag(VALID_TAG_1);\r\n+        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTags_null_throwsNullPointerException() {\r\n+        assertThrows(NullPointerException.class, () -> ParserUtil.parseTags(null));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTags_collectionWithInvalidTags_throwsParseException() {\r\n+        assertThrows(ParseException.class, () -> ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {\r\n+        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {\r\n+        Set<Tag> actualTagSet = ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));\r\n+        Set<Tag> expectedTagSet = new HashSet<Tag>(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));\r\n+\r\n+        assertEquals(expectedTagSet, actualTagSet);\r\n+    }\r\n+}\r"
  },
  {
    "sha": "eac7328364cab563d556e055f8a5bcede9948c8a",
    "filename": "src/test/java/seedu/address/model/person/AddressTest.java",
    "status": "modified",
    "additions": 36,
    "deletions": 36,
    "changes": 72,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/model/person/AddressTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/model/person/AddressTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/model/person/AddressTest.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,36 +1,36 @@\n-package seedu.address.model.person;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.testutil.Assert.assertThrows;\n-\n-import org.junit.jupiter.api.Test;\n-\n-public class AddressTest {\n-\n-    @Test\n-    public void constructor_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> new Address(null));\n-    }\n-\n-    @Test\n-    public void constructor_invalidAddress_throwsIllegalArgumentException() {\n-        String invalidAddress = \"\";\n-        assertThrows(IllegalArgumentException.class, () -> new Address(invalidAddress));\n-    }\n-\n-    @Test\n-    public void isValidAddress() {\n-        // null address\n-        assertThrows(NullPointerException.class, () -> Address.isValidAddress(null));\n-\n-        // invalid addresses\n-        assertFalse(Address.isValidAddress(\"\")); // empty string\n-        assertFalse(Address.isValidAddress(\" \")); // spaces only\n-\n-        // valid addresses\n-        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));\n-        assertTrue(Address.isValidAddress(\"-\")); // one character\n-        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address\n-    }\n-}\n+package seedu.address.model.person;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+import static seedu.address.testutil.Assert.assertThrows;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+public class AddressTest {\r\n+\r\n+    @Test\r\n+    public void constructor_null_throwsNullPointerException() {\r\n+        assertThrows(NullPointerException.class, () -> new Address(null));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void constructor_invalidAddress_throwsIllegalArgumentException() {\r\n+        String invalidAddress = \"\";\r\n+        assertThrows(IllegalArgumentException.class, () -> new Address(invalidAddress));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void isValidAddress() {\r\n+        // null address\r\n+        assertThrows(NullPointerException.class, () -> Address.isValidAddress(null));\r\n+\r\n+        // invalid addresses\r\n+        assertFalse(Address.isValidAddress(\"\")); // empty string\r\n+        assertFalse(Address.isValidAddress(\" \")); // spaces only\r\n+\r\n+        // valid addresses\r\n+        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));\r\n+        assertTrue(Address.isValidAddress(\"-\")); // one character\r\n+        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address\r\n+    }\r\n+}\r"
  },
  {
    "sha": "7b48b9622ea317d3f24b81eac70bf71805ffff0e",
    "filename": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "status": "modified",
    "additions": 115,
    "deletions": 110,
    "changes": 225,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,110 +1,115 @@\n-package seedu.address.storage;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;\n-import static seedu.address.testutil.Assert.assertThrows;\n-import static seedu.address.testutil.TypicalPersons.BENSON;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import seedu.address.commons.exceptions.IllegalValueException;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Phone;\n-\n-public class JsonAdaptedPersonTest {\n-    private static final String INVALID_NAME = \"R@chel\";\n-    private static final String INVALID_PHONE = \"+651234\";\n-    private static final String INVALID_ADDRESS = \" \";\n-    private static final String INVALID_EMAIL = \"example.com\";\n-    private static final String INVALID_TAG = \"#friend\";\n-\n-    private static final String VALID_NAME = BENSON.getName().toString();\n-    private static final String VALID_PHONE = BENSON.getPhone().toString();\n-    private static final String VALID_EMAIL = BENSON.getEmail().toString();\n-    private static final String VALID_ADDRESS = BENSON.getAddress().toString();\n-    private static final List<JsonAdaptedTag> VALID_TAGS = BENSON.getTags().stream()\n-            .map(JsonAdaptedTag::new)\n-            .collect(Collectors.toList());\n-\n-    @Test\n-    public void toModelType_validPersonDetails_returnsPerson() throws Exception {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(BENSON);\n-        assertEquals(BENSON, person.toModelType());\n-    }\n-\n-    @Test\n-    public void toModelType_invalidName_throwsIllegalValueException() {\n-        JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = Name.MESSAGE_CONSTRAINTS;\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_nullName_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_invalidPhone_throwsIllegalValueException() {\n-        JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = Phone.MESSAGE_CONSTRAINTS;\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_nullPhone_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_invalidEmail_throwsIllegalValueException() {\n-        JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = Email.MESSAGE_CONSTRAINTS;\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_nullEmail_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_invalidAddress_throwsIllegalValueException() {\n-        JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = Address.MESSAGE_CONSTRAINTS;\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_nullAddress_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);\n-        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_invalidTags_throwsIllegalValueException() {\n-        List<JsonAdaptedTag> invalidTags = new ArrayList<>(VALID_TAGS);\n-        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));\n-        JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);\n-        assertThrows(IllegalValueException.class, person::toModelType);\n-    }\n-\n-}\n+package seedu.address.storage;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;\r\n+import static seedu.address.testutil.Assert.assertThrows;\r\n+import static seedu.address.testutil.TypicalPersons.BENSON;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+import seedu.address.commons.exceptions.IllegalValueException;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Phone;\r\n+\r\n+public class JsonAdaptedPersonTest {\r\n+    private static final String INVALID_NAME = \"R@chel\";\r\n+    private static final String INVALID_PHONE = \"+651234\";\r\n+    private static final String INVALID_ADDRESS = \" \";\r\n+    private static final String INVALID_EMAIL = \"example.com\";\r\n+    private static final String INVALID_TAG = \"#friend\";\r\n+\r\n+    private static final String VALID_NAME = BENSON.getName().toString();\r\n+    private static final String VALID_PHONE = BENSON.getPhone().toString();\r\n+    private static final String VALID_EMAIL = BENSON.getEmail().toString();\r\n+    private static final String VALID_ADDRESS = BENSON.getAddress().toString();\r\n+    private static final String VALID_REMARK = BENSON.getRemark().toString();\r\n+    private static final List<JsonAdaptedTag> VALID_TAGS = BENSON.getTags().stream()\r\n+            .map(JsonAdaptedTag::new)\r\n+            .collect(Collectors.toList());\r\n+\r\n+    @Test\r\n+    public void toModelType_validPersonDetails_returnsPerson() throws Exception {\r\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(BENSON);\r\n+        assertEquals(BENSON, person.toModelType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_invalidName_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = Name.MESSAGE_CONSTRAINTS;\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_nullName_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_invalidPhone_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = Phone.MESSAGE_CONSTRAINTS;\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_nullPhone_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_invalidEmail_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = Email.MESSAGE_CONSTRAINTS;\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_nullEmail_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_invalidAddress_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = Address.MESSAGE_CONSTRAINTS;\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_nullAddress_throwsIllegalValueException() {\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_REMARK, VALID_TAGS);\r\n+        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());\r\n+        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void toModelType_invalidTags_throwsIllegalValueException() {\r\n+        List<JsonAdaptedTag> invalidTags = new ArrayList<>(VALID_TAGS);\r\n+        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));\r\n+        JsonAdaptedPerson person =\r\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, invalidTags);\r\n+        assertThrows(IllegalValueException.class, person::toModelType);\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "04e8c4ebca3a00874c435afc9ac4834af0d6a3fa",
    "filename": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "status": "modified",
    "additions": 87,
    "deletions": 87,
    "changes": 174,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,87 +1,87 @@\n-package seedu.address.testutil;\n-\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * A utility class to help with building EditPersonDescriptor objects.\n- */\n-public class EditPersonDescriptorBuilder {\n-\n-    private EditPersonDescriptor descriptor;\n-\n-    public EditPersonDescriptorBuilder() {\n-        descriptor = new EditPersonDescriptor();\n-    }\n-\n-    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {\n-        this.descriptor = new EditPersonDescriptor(descriptor);\n-    }\n-\n-    /**\n-     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}'s details\n-     */\n-    public EditPersonDescriptorBuilder(Person person) {\n-        descriptor = new EditPersonDescriptor();\n-        descriptor.setName(person.getName());\n-        descriptor.setPhone(person.getPhone());\n-        descriptor.setEmail(person.getEmail());\n-        descriptor.setAddress(person.getAddress());\n-        descriptor.setTags(person.getTags());\n-    }\n-\n-    /**\n-     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.\n-     */\n-    public EditPersonDescriptorBuilder withName(String name) {\n-        descriptor.setName(new Name(name));\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.\n-     */\n-    public EditPersonDescriptorBuilder withPhone(String phone) {\n-        descriptor.setPhone(new Phone(phone));\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.\n-     */\n-    public EditPersonDescriptorBuilder withEmail(String email) {\n-        descriptor.setEmail(new Email(email));\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.\n-     */\n-    public EditPersonDescriptorBuilder withAddress(String address) {\n-        descriptor.setAddress(new Address(address));\n-        return this;\n-    }\n-\n-    /**\n-     * Parses the {@code tags} into a {@code Set<Tag>} and set it to the {@code EditPersonDescriptor}\n-     * that we are building.\n-     */\n-    public EditPersonDescriptorBuilder withTags(String... tags) {\n-        Set<Tag> tagSet = Stream.of(tags).map(Tag::new).collect(Collectors.toSet());\n-        descriptor.setTags(tagSet);\n-        return this;\n-    }\n-\n-    public EditPersonDescriptor build() {\n-        return descriptor;\n-    }\n-}\n+package seedu.address.testutil;\r\n+\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * A utility class to help with building EditPersonDescriptor objects.\r\n+ */\r\n+public class EditPersonDescriptorBuilder {\r\n+\r\n+    private EditPersonDescriptor descriptor;\r\n+\r\n+    public EditPersonDescriptorBuilder() {\r\n+        descriptor = new EditPersonDescriptor();\r\n+    }\r\n+\r\n+    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {\r\n+        this.descriptor = new EditPersonDescriptor(descriptor);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}'s details\r\n+     */\r\n+    public EditPersonDescriptorBuilder(Person person) {\r\n+        descriptor = new EditPersonDescriptor();\r\n+        descriptor.setName(person.getName());\r\n+        descriptor.setPhone(person.getPhone());\r\n+        descriptor.setEmail(person.getEmail());\r\n+        descriptor.setAddress(person.getAddress());\r\n+        descriptor.setTags(person.getTags());\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.\r\n+     */\r\n+    public EditPersonDescriptorBuilder withName(String name) {\r\n+        descriptor.setName(new Name(name));\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.\r\n+     */\r\n+    public EditPersonDescriptorBuilder withPhone(String phone) {\r\n+        descriptor.setPhone(new Phone(phone));\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.\r\n+     */\r\n+    public EditPersonDescriptorBuilder withEmail(String email) {\r\n+        descriptor.setEmail(new Email(email));\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.\r\n+     */\r\n+    public EditPersonDescriptorBuilder withAddress(String address) {\r\n+        descriptor.setAddress(new Address(address));\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses the {@code tags} into a {@code Set<Tag>} and set it to the {@code EditPersonDescriptor}\r\n+     * that we are building.\r\n+     */\r\n+    public EditPersonDescriptorBuilder withTags(String... tags) {\r\n+        Set<Tag> tagSet = Stream.of(tags).map(Tag::new).collect(Collectors.toSet());\r\n+        descriptor.setTags(tagSet);\r\n+        return this;\r\n+    }\r\n+\r\n+    public EditPersonDescriptor build() {\r\n+        return descriptor;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "ec363dcc69a4209961dde65d3a71b85aced9d3f3",
    "filename": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "status": "modified",
    "additions": 107,
    "deletions": 96,
    "changes": 203,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/testutil/PersonBuilder.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,96 +1,107 @@\n-package seedu.address.testutil;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import seedu.address.model.person.Address;\n-import seedu.address.model.person.Email;\n-import seedu.address.model.person.Name;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.Phone;\n-import seedu.address.model.tag.Tag;\n-import seedu.address.model.util.SampleDataUtil;\n-\n-/**\n- * A utility class to help with building Person objects.\n- */\n-public class PersonBuilder {\n-\n-    public static final String DEFAULT_NAME = \"Amy Bee\";\n-    public static final String DEFAULT_PHONE = \"85355255\";\n-    public static final String DEFAULT_EMAIL = \"amy@gmail.com\";\n-    public static final String DEFAULT_ADDRESS = \"123, Jurong West Ave 6, #08-111\";\n-\n-    private Name name;\n-    private Phone phone;\n-    private Email email;\n-    private Address address;\n-    private Set<Tag> tags;\n-\n-    /**\n-     * Creates a {@code PersonBuilder} with the default details.\n-     */\n-    public PersonBuilder() {\n-        name = new Name(DEFAULT_NAME);\n-        phone = new Phone(DEFAULT_PHONE);\n-        email = new Email(DEFAULT_EMAIL);\n-        address = new Address(DEFAULT_ADDRESS);\n-        tags = new HashSet<>();\n-    }\n-\n-    /**\n-     * Initializes the PersonBuilder with the data of {@code personToCopy}.\n-     */\n-    public PersonBuilder(Person personToCopy) {\n-        name = personToCopy.getName();\n-        phone = personToCopy.getPhone();\n-        email = personToCopy.getEmail();\n-        address = personToCopy.getAddress();\n-        tags = new HashSet<>(personToCopy.getTags());\n-    }\n-\n-    /**\n-     * Sets the {@code Name} of the {@code Person} that we are building.\n-     */\n-    public PersonBuilder withName(String name) {\n-        this.name = new Name(name);\n-        return this;\n-    }\n-\n-    /**\n-     * Parses the {@code tags} into a {@code Set<Tag>} and set it to the {@code Person} that we are building.\n-     */\n-    public PersonBuilder withTags(String ... tags) {\n-        this.tags = SampleDataUtil.getTagSet(tags);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the {@code Address} of the {@code Person} that we are building.\n-     */\n-    public PersonBuilder withAddress(String address) {\n-        this.address = new Address(address);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the {@code Phone} of the {@code Person} that we are building.\n-     */\n-    public PersonBuilder withPhone(String phone) {\n-        this.phone = new Phone(phone);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the {@code Email} of the {@code Person} that we are building.\n-     */\n-    public PersonBuilder withEmail(String email) {\n-        this.email = new Email(email);\n-        return this;\n-    }\n-\n-    public Person build() {\n-        return new Person(name, phone, email, address, tags);\n-    }\n-\n-}\n+package seedu.address.testutil;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import seedu.address.model.person.Address;\r\n+import seedu.address.model.person.Email;\r\n+import seedu.address.model.person.Name;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.person.Phone;\r\n+import seedu.address.model.person.Remark;\r\n+import seedu.address.model.tag.Tag;\r\n+import seedu.address.model.util.SampleDataUtil;\r\n+\r\n+/**\r\n+ * A utility class to help with building Person objects.\r\n+ */\r\n+public class PersonBuilder {\r\n+\r\n+    public static final String DEFAULT_NAME = \"Alice Pauline\";\r\n+    public static final String DEFAULT_PHONE = \"85355255\";\r\n+    public static final String DEFAULT_EMAIL = \"alice@gmail.com\";\r\n+    public static final String DEFAULT_ADDRESS = \"123, Jurong West Ave 6, #08-111\";\r\n+    public static final String DEFAULT_REMARK = \"She likes aardvarks.\";\r\n+    private Name name;\r\n+    private Phone phone;\r\n+    private Email email;\r\n+    private Address address;\r\n+    private Remark remark;\r\n+    private Set<Tag> tags;\r\n+\r\n+    public PersonBuilder() {\r\n+        name = new Name(DEFAULT_NAME);\r\n+        phone = new Phone(DEFAULT_PHONE);\r\n+        email = new Email(DEFAULT_EMAIL);\r\n+        address = new Address(DEFAULT_ADDRESS);\r\n+        remark = new Remark(DEFAULT_REMARK);\r\n+        tags = new HashSet<>();\r\n+    }\r\n+\r\n+    /**\r\n+     * Initializes the PersonBuilder with the data of {@code personToCopy}.\r\n+     */\r\n+    public PersonBuilder(Person personToCopy) {\r\n+        name = personToCopy.getName();\r\n+        phone = personToCopy.getPhone();\r\n+        email = personToCopy.getEmail();\r\n+        address = personToCopy.getAddress();\r\n+        remark = personToCopy.getRemark();\r\n+        tags = new HashSet<>(personToCopy.getTags());\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Name} of the {@code Person} that we are building.\r\n+     */\r\n+    public PersonBuilder withName(String name) {\r\n+        this.name = new Name(name);\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses the {@code tags} into a {@code Set<Tag>} and set it to the {@code Person} that we are building.\r\n+     */\r\n+    public PersonBuilder withTags(String ... tags) {\r\n+        this.tags = SampleDataUtil.getTagSet(tags);\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Address} of the {@code Person} that we are building.\r\n+     */\r\n+    public PersonBuilder withAddress(String address) {\r\n+        this.address = new Address(address);\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Phone} of the {@code Person} that we are building.\r\n+     */\r\n+    public PersonBuilder withPhone(String phone) {\r\n+        this.phone = new Phone(phone);\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Email} of the {@code Person} that we are building.\r\n+     */\r\n+    public PersonBuilder withEmail(String email) {\r\n+        this.email = new Email(email);\r\n+        return this;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the {@code Remark} of the {@code Person} that we are building.\r\n+     */\r\n+    public PersonBuilder withRemark(String remark) {\r\n+        this.remark = new Remark(remark);\r\n+        return this;\r\n+    }\r\n+\r\n+\r\n+\r\n+    public Person build() {\r\n+        return new Person(name, phone, email, address, remark, tags);\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "666d1d08fc3f1224992884c6a743bd77427209d3",
    "filename": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "status": "modified",
    "additions": 62,
    "deletions": 62,
    "changes": 124,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/PersonUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/PersonUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/testutil/PersonUtil.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -1,62 +1,62 @@\n-package seedu.address.testutil;\n-\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n-\n-import java.util.Set;\n-\n-import seedu.address.logic.commands.AddCommand;\n-import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.tag.Tag;\n-\n-/**\n- * A utility class for Person.\n- */\n-public class PersonUtil {\n-\n-    /**\n-     * Returns an add command string for adding the {@code person}.\n-     */\n-    public static String getAddCommand(Person person) {\n-        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);\n-    }\n-\n-    /**\n-     * Returns the part of command string for the given {@code person}'s details.\n-     */\n-    public static String getPersonDetails(Person person) {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(PREFIX_NAME + person.getName().fullName + \" \");\n-        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");\n-        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");\n-        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");\n-        person.getTags().stream().forEach(\n-            s -> sb.append(PREFIX_TAG + s.tagName + \" \")\n-        );\n-        return sb.toString();\n-    }\n-\n-    /**\n-     * Returns the part of command string for the given {@code EditPersonDescriptor}'s details.\n-     */\n-    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {\n-        StringBuilder sb = new StringBuilder();\n-        descriptor.getName().ifPresent(name -> sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));\n-        descriptor.getPhone().ifPresent(phone -> sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));\n-        descriptor.getEmail().ifPresent(email -> sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));\n-        descriptor.getAddress().ifPresent(address -> sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));\n-        if (descriptor.getTags().isPresent()) {\n-            Set<Tag> tags = descriptor.getTags().get();\n-            if (tags.isEmpty()) {\n-                sb.append(PREFIX_TAG);\n-            } else {\n-                tags.forEach(s -> sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));\n-            }\n-        }\n-        return sb.toString();\n-    }\n-}\n+package seedu.address.testutil;\r\n+\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\r\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\r\n+\r\n+import java.util.Set;\r\n+\r\n+import seedu.address.logic.commands.AddCommand;\r\n+import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\r\n+import seedu.address.model.person.Person;\r\n+import seedu.address.model.tag.Tag;\r\n+\r\n+/**\r\n+ * A utility class for Person.\r\n+ */\r\n+public class PersonUtil {\r\n+\r\n+    /**\r\n+     * Returns an add command string for adding the {@code person}.\r\n+     */\r\n+    public static String getAddCommand(Person person) {\r\n+        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the part of command string for the given {@code person}'s details.\r\n+     */\r\n+    public static String getPersonDetails(Person person) {\r\n+        StringBuilder sb = new StringBuilder();\r\n+        sb.append(PREFIX_NAME + person.getName().fullName + \" \");\r\n+        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");\r\n+        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");\r\n+        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");\r\n+        person.getTags().stream().forEach(\r\n+            s -> sb.append(PREFIX_TAG + s.tagName + \" \")\r\n+        );\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the part of command string for the given {@code EditPersonDescriptor}'s details.\r\n+     */\r\n+    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {\r\n+        StringBuilder sb = new StringBuilder();\r\n+        descriptor.getName().ifPresent(name -> sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));\r\n+        descriptor.getPhone().ifPresent(phone -> sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));\r\n+        descriptor.getEmail().ifPresent(email -> sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));\r\n+        descriptor.getAddress().ifPresent(address -> sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));\r\n+        if (descriptor.getTags().isPresent()) {\r\n+            Set<Tag> tags = descriptor.getTags().get();\r\n+            if (tags.isEmpty()) {\r\n+                sb.append(PREFIX_TAG);\r\n+            } else {\r\n+                tags.forEach(s -> sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));\r\n+            }\r\n+        }\r\n+        return sb.toString();\r\n+    }\r\n+}\r"
  },
  {
    "sha": "328c34eeb30208beca5a1c597d90eee790887850",
    "filename": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/blob/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/TypicalPersons.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W12-1/tp/raw/a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91/src/test/java/seedu/address/testutil/TypicalPersons.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W12-1/tp/contents/src/test/java/seedu/address/testutil/TypicalPersons.java?ref=a1eb6ccc91ee929a29cdbe8dd13511a8e0dbcc91",
    "patch": "@@ -25,10 +25,10 @@\n \n     public static final Person ALICE = new PersonBuilder().withName(\"Alice Pauline\")\n             .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")\n-            .withPhone(\"94351253\")\n+            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\")\n             .withTags(\"friends\").build();\n     public static final Person BENSON = new PersonBuilder().withName(\"Benson Meier\")\n-            .withAddress(\"311, Clementi Ave 2, #02-25\")\n+            .withAddress(\"311, Clementi Ave 2, #02-25\").withRemark(\"He can't take beer!\")\n             .withEmail(\"johnd@example.com\").withPhone(\"98765432\")\n             .withTags(\"owesMoney\", \"friends\").build();\n     public static final Person CARL = new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
  }
]
