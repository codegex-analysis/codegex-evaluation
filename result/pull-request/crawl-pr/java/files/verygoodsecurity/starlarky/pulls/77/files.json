[
  {
    "sha": "9815ebfb7aa2449f52b3ce5d8e52121ffecae8c3",
    "filename": ".circleci/config.yml",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/.circleci/config.yml",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/.circleci/config.yml",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/.circleci/config.yml?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1",
    "patch": "@@ -11,6 +11,7 @@ job-defaults: &job-defaults\n     - MAVEN_OPTS: -Xmx6400m\n     - GRAALVM_HOME: /home/circleci/starlarky/.graalvm\n     - HOMEBREW_REQUIRED_RUBY_VERSION: 2.4.6\n+    - LARKY_HOME: /home/circleci/starlarky\n \n install-java: &install-java\n   run:\n@@ -124,6 +125,13 @@ attach-dist: &attach-dist\n   attach_workspace:\n     at: *dist_directory\n \n+get-resouces: &get-resources\n+  run:\n+    name: Get Additional Resources\n+    command: |\n+      ./scripts/get_resources.sh\n+\n+\n # === JOBS ===\n version: 2\n jobs:\n@@ -134,6 +142,7 @@ jobs:\n     steps:\n       - checkout\n       - <<: *install-java\n+      - <<: *get-resources\n       - <<: *restore-maven-cache\n       - run: mkdir -p $TEST_RESULTS_PATH/junit/\n       - run: mkdir -p $TEST_RESULTS_PATH/coverage/\n@@ -155,6 +164,7 @@ jobs:\n     machine: true\n     steps:\n       - checkout\n+      - <<: *get-resources\n       - <<: *restore-maven-cache\n       - run: mkdir -p $TEST_RESULTS_PATH/junit/\n       - run: mkdir -p $TEST_RESULTS_PATH/coverage/\n@@ -177,6 +187,7 @@ jobs:\n     steps:\n       - checkout\n       - <<: *install-java\n+      - <<: *get-resources\n       - <<: *restore-maven-cache\n       - <<: *setup-maven-distributions\n       - run:\n@@ -194,6 +205,13 @@ jobs:\n             mvn clean dependency:go-offline package -pl larky -U -Dmaven.test.skip.exec -T 2.0C -B\n             mvn deploy -DskipTests -pl larky -Pgithub\n             mvn deploy -DskipTests -pl larky -Pbintray\n+      - run:\n+          name: Build and deploy larky-api\n+          command: |\n+            mvn versions:set -DnewVersion=${CIRCLE_TAG} -pl larky-api\n+            mvn clean dependency:go-offline package -pl larky-api -U -Dmaven.test.skip.exec -T 2.0C -B\n+            mvn deploy -DskipTests -pl larky-api -Pgithub\n+            mvn deploy -DskipTests -pl larky-api -Pbintray\n       - <<: *save-maven-cache\n \n   build-dist-linux:\n@@ -204,6 +222,7 @@ jobs:\n       - checkout\n       - <<: *install-java\n       - <<: *setup-maven-distributions\n+      - <<: *get-resources\n       - <<: *restore-maven-cache\n       - <<: *restore-graalvm-cache\n       - <<: *install-graalvm\n@@ -240,6 +259,12 @@ jobs:\n             # add gu to PATH\n             ln -s \"$GRAALVM_HOME/bin/gu\" /usr/local/bin\n             gu install native-image\n+      - run:\n+          name: MacOS Setup for get-resources\n+          command: |\n+            echo 'export LARKY_HOME=/Users/distiller/starlarky' >> $BASH_ENV\n+            source $BASH_ENV\n+      - <<: *get-resources\n       - <<: *setup-maven-distributions\n       - <<: *build-quarkus-runnable\n       - <<: *install_python"
  },
  {
    "sha": "81a3d0b16bd2ad553822b18e74d37c971a8a6cea",
    "filename": "larky-api/pom.xml",
    "status": "added",
    "additions": 200,
    "deletions": 0,
    "changes": 200,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/pom.xml",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/pom.xml",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/larky-api/pom.xml?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1",
    "patch": "@@ -0,0 +1,200 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>com.verygood.security</groupId>\n+    <artifactId>larky-api</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+    <name>larky-api</name>\n+    <description>The interface for using Starlarky</description>\n+\n+    <repositories>\n+        <repository>\n+            <id>maven</id>\n+            <url>https://repo.maven.apache.org/maven2</url>\n+        </repository>\n+        <repository>\n+            <id>github</id>\n+            <url>https://maven.pkg.github.com/verygoodsecurity/starlarky</url>\n+        </repository>\n+        <repository>\n+            <id>vgs-oss</id>\n+            <url>https://dl.bintray.com/vg/vgs-oss</url>\n+        </repository>\n+    </repositories>\n+\n+    <pluginRepositories>\n+        <pluginRepository>\n+            <id>jfog</id>\n+            <name>jfrog</name>\n+            <url>https://dl.bintray.com/vg/vgs-oss</url>\n+            <snapshots>\n+                <enabled>true</enabled>\n+            </snapshots>\n+        </pluginRepository>\n+    </pluginRepositories>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-beans</artifactId>\n+            <version>5.2.13.RELEASE</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+            <version>${slf4j.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>${org.projectlombok.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.code.findbugs</groupId>\n+            <artifactId>jsr305</artifactId>\n+            <version>${google.findbugs.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>src/main/java</directory>\n+            </resource>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+            </resource>\n+            <resource>\n+                <directory>src/test/java</directory>\n+            </resource>\n+            <resource>\n+                <directory>src/test/resources</directory>\n+            </resource>\n+        </resources>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-source-plugin</artifactId>\n+                <version>${maven.source.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>attach-sources</id>\n+                        <goals>\n+                            <goal>jar</goal>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <inherited>true</inherited>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>${maven.compiler.plugin.version}</version>\n+                <configuration>\n+                    <fork>true</fork>\n+                    <debug>false</debug>\n+                    <showWarnings>true</showWarnings>\n+                    <failOnWarning>false</failOnWarning>\n+                    <showDeprecation>true</showDeprecation>\n+                    <source>${maven.compiler.source}</source>\n+                    <target>${maven.compiler.target}</target>\n+                    <forceJavacCompilerUse>true</forceJavacCompilerUse>\n+                    <annotationProcessorPaths>\n+                        <path>\n+                            <groupId>com.google.errorprone</groupId>\n+                            <artifactId>error_prone_core</artifactId>\n+                            <version>${google.errorprone.version}</version>\n+                        </path>\n+                        <path>\n+                            <groupId>org.projectlombok</groupId>\n+                            <artifactId>lombok</artifactId>\n+                            <version>${org.projectlombok.version}</version>\n+                        </path>\n+                    </annotationProcessorPaths>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>2.19.1</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>3.1.1</version>\n+                <configuration>\n+                    <descriptorRefs>\n+                        <descriptorRef>jar-with-dependencies</descriptorRef>\n+                    </descriptorRefs>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>make-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+        <extensions>\n+            <extension>\n+                <groupId>kr.motd.maven</groupId>\n+                <artifactId>os-maven-plugin</artifactId>\n+                <version>${os-maven-plugin.version}</version>\n+            </extension>\n+        </extensions>\n+    </build>\n+\n+    <properties>\n+        <maven.compiler.source>8</maven.compiler.source>\n+        <maven.compiler.target>8</maven.compiler.target>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+\n+        <slf4j.version>1.7.30</slf4j.version>\n+        <org.projectlombok.version>1.18.12</org.projectlombok.version>\n+        <junit.version>4.13.1</junit.version>\n+        <google.findbugs.version>3.0.2</google.findbugs.version>\n+        <maven.source.plugin.version>3.2.1</maven.source.plugin.version>\n+        <maven.compiler.plugin.version>3.6.2</maven.compiler.plugin.version>\n+        <os-maven-plugin.version>1.7.0</os-maven-plugin.version>\n+        <google.errorprone.version>2.5.1</google.errorprone.version>\n+    </properties>\n+\n+    <profiles>\n+        <profile>\n+            <id>bintray</id>\n+            <distributionManagement>\n+                <repository>\n+                    <id>bintray-vg-vgs-oss</id>\n+                    <url>https://api.bintray.com/maven/vg/vgs-oss/larky-api/;publish=1</url>\n+                </repository>\n+            </distributionManagement>\n+        </profile>\n+        <profile>\n+            <id>github</id>\n+            <distributionManagement>\n+                <repository>\n+                    <id>github</id>\n+                    <url>https://maven.pkg.github.com/verygoodsecurity/starlarky</url>\n+                </repository>\n+            </distributionManagement>\n+        </profile>\n+    </profiles>\n+</project>"
  },
  {
    "sha": "4b05e4b8a40b31a37b3a8970a02cae499d564b69",
    "filename": "larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngine.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngine.java",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngine.java",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngine.java?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1",
    "patch": "@@ -0,0 +1,28 @@\n+package com.verygood.security.larkyapi;\n+\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import java.io.Reader;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public interface VersionedLarkyEngine extends ScriptEngine {\n+\n+    Object executeScript(String script, String outputVar, ScriptContext context)\n+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n+            ScriptException, NullPointerException;\n+\n+    Object executeScript(String script, String outputVar)\n+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n+            ScriptException, NullPointerException;\n+\n+    Object executeScript(Reader script, String outputVar, ScriptContext context)\n+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n+            ScriptException, NullPointerException;\n+\n+    Object executeScript(Reader script, String outputVar)\n+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n+            ScriptException, NullPointerException;\n+\n+    String getVersion();\n+}"
  },
  {
    "sha": "9ef3af615339b2e8dc51e52da6a5febb8610737f",
    "filename": "larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngineImpl.java",
    "status": "added",
    "additions": 227,
    "deletions": 0,
    "changes": 227,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngineImpl.java",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngineImpl.java",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/larky-api/src/main/java/com/verygood/security/larkyapi/VersionedLarkyEngineImpl.java?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1",
    "patch": "@@ -0,0 +1,227 @@\n+package com.verygood.security.larkyapi;\n+\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+\n+import javax.annotation.Nonnull;\n+import javax.script.CompiledScript;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import javax.script.Bindings;\n+import javax.script.ScriptEngineFactory;\n+import java.io.Reader;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class VersionedLarkyEngineImpl implements VersionedLarkyEngine {\n+\n+  final private Class engineClass;\n+  final private Class scriptClass;\n+  final private Class parseClass;\n+  final private ScriptEngine engineInstanceObj;\n+  final private String version;\n+\n+\n+  // Instantiating the static map\n+  private static Map<String, URL> larkyJarByVersion;\n+  static {\n+    detectVersions();\n+  }\n+\n+  private static void detectVersions() {\n+    larkyJarByVersion = new HashMap<>();\n+    try {\n+      PathMatchingResourcePatternResolver resolver =\n+              new PathMatchingResourcePatternResolver(VersionedLarkyEngineImpl.class.getClassLoader());\n+      // Get jars with format `larky-\\d{>=1}.\\d{>=1}.\\d{>=1}-fat.jar`\n+      Resource[] resources = resolver.getResources( // uses AntPathMatcher\n+              \"classpath*:larky-{\\\\d+}.{\\\\d+}.{\\\\d+}-fat.jar\"\n+      );\n+      for (Resource resource: resources) {\n+        String fileName = resource.getFilename();\n+        URL fileURL = resource.getURL();\n+\n+        Pattern pattern = Pattern.compile(\"\\\\d+.\\\\d+.\\\\d+\");\n+        Matcher matcher = pattern.matcher(fileName);\n+        if (matcher.find()) {\n+          larkyJarByVersion.put(matcher.group(), fileURL);\n+        }\n+      }\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  public VersionedLarkyEngineImpl(String inputVersion)\n+          throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InstantiationException {\n+\n+    if ( !getSupportedVersions().contains(inputVersion) ) {\n+      throw new IllegalArgumentException(\"Engine Version not Found\");\n+    }\n+\n+    this.version = inputVersion;\n+    URL larkyJarPath = larkyJarByVersion.get(version);\n+    URLClassLoader childLoader = new URLClassLoader(\n+            new URL[] {larkyJarPath},\n+            VersionedLarkyEngineImpl.class.getClassLoader()\n+    );\n+\n+    // equivalent to: import com.verygood.security.larky.jsr223.LarkyCompiledScript;\n+    this.engineClass = Class.forName(\n+            \"com.verygood.security.larky.jsr223.LarkyScriptEngine\",\n+            true, childLoader);\n+\n+    // equivalent to: import com.verygood.security.larky.jsr223.LarkyScriptEngine;\n+    this.scriptClass = Class.forName(\n+            \"com.verygood.security.larky.jsr223.LarkyCompiledScript\",\n+            true, childLoader);\n+\n+    // equivalent to: import com.verygood.security.larky.parser.ParsedStarFile;\n+    this.parseClass = Class.forName(\n+            \"com.verygood.security.larky.parser.ParsedStarFile\",\n+            true, childLoader);\n+\n+    // create engine object\n+    this.engineInstanceObj = (ScriptEngine) engineClass.newInstance();\n+  }\n+\n+  @Override\n+  public Object executeScript(String script, String outputVar)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n+          ScriptException, NullPointerException {\n+\n+    Method compile = engineClass.getMethod(\"compile\", String.class);\n+    CompiledScript compiledScript = (CompiledScript) compile.invoke(engineInstanceObj, script);\n+\n+    Object starFile = compiledScript.eval();\n+\n+    Method getGlblVar = parseClass.getMethod(\n+            \"getGlobalEnvironmentVariable\",\n+            String.class, Class.class);\n+    Object result = getGlblVar.invoke(starFile, outputVar, Object.class);\n+\n+    return result;\n+  }\n+\n+  @Override\n+  public Object executeScript(String script, String outputVar, ScriptContext context)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, ScriptException {\n+    setContext(context);\n+    return executeScript(script, outputVar);\n+  }\n+\n+  @Override\n+  public Object executeScript(Reader script, String outputVar, ScriptContext context)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, ScriptException  {\n+    setContext(context);\n+    return executeScript(script, outputVar);\n+  }\n+\n+  @Override\n+  public Object executeScript(Reader script, String outputVar)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, ScriptException  {\n+\n+    Method compile = engineClass.getMethod(\"compile\", Reader.class);\n+    CompiledScript compiledScript = (CompiledScript) compile.invoke(engineInstanceObj, script);\n+\n+    Object starFile = compiledScript.eval();\n+\n+    Method getGlblVar = parseClass.getMethod(\n+            \"getGlobalEnvironmentVariable\",\n+            String.class, Class.class);\n+    Object result = getGlblVar.invoke(starFile, outputVar, Object.class);\n+\n+    return result;\n+  }\n+\n+  public static Set<String> getSupportedVersions() {\n+    return larkyJarByVersion.keySet();\n+  }\n+\n+  @Override\n+  public String getVersion() {\n+    return version;\n+  }\n+\n+\n+  @Override\n+  public Object eval(String script, ScriptContext context) throws ScriptException {\n+    return engineInstanceObj.eval(script, context);\n+  }\n+\n+  @Override\n+  public Object eval(Reader reader, ScriptContext context) throws ScriptException {\n+    return engineInstanceObj.eval(reader, context);\n+  }\n+\n+  @Override\n+  public Object eval(String script) throws ScriptException {\n+    return engineInstanceObj.eval(script);\n+  }\n+\n+  @Override\n+  public Object eval(Reader reader) throws ScriptException {\n+    return engineInstanceObj.eval(reader);\n+  }\n+\n+  @Override\n+  public Object eval(String script, Bindings n) throws ScriptException {\n+    return engineInstanceObj.eval(script, n);\n+  }\n+\n+  @Override\n+  public Object eval(Reader reader, Bindings n) throws ScriptException {\n+    return engineInstanceObj.eval(reader, n);\n+  }\n+\n+  @Override\n+  public void put(String key, Object value) {\n+    engineInstanceObj.put(key, value);\n+  }\n+\n+  @Override\n+  public Object get(String key) {\n+    return engineInstanceObj.get(key);\n+  }\n+\n+  @Override\n+  public Bindings getBindings(int scope) {\n+    return engineInstanceObj.getBindings(scope);\n+  }\n+\n+  @Override\n+  public void setBindings(Bindings bindings, int scope) {\n+    engineInstanceObj.setBindings(bindings, scope);\n+  }\n+\n+  @Override\n+  public Bindings createBindings() {\n+    return engineInstanceObj.createBindings();\n+  }\n+\n+  @Override\n+  public ScriptContext getContext() {\n+    return engineInstanceObj.getContext();\n+  }\n+\n+  @Override\n+  public void setContext(@Nonnull ScriptContext context) {\n+    engineInstanceObj.setContext(context);\n+  }\n+\n+  @Override\n+  public ScriptEngineFactory getFactory() {\n+    return null;\n+  }\n+\n+}"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "larky-api/src/main/resources/.gitkeep",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/main/resources/.gitkeep",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/main/resources/.gitkeep",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/larky-api/src/main/resources/.gitkeep?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1"
  },
  {
    "sha": "240c6c904b54e92cdc3e0961bb4a1330104bab9f",
    "filename": "larky-api/src/test/java/com/verygood/security/larkyapi/VersionedLarkyEngineImplTest.java",
    "status": "added",
    "additions": 308,
    "deletions": 0,
    "changes": 308,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/test/java/com/verygood/security/larkyapi/VersionedLarkyEngineImplTest.java",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/larky-api/src/test/java/com/verygood/security/larkyapi/VersionedLarkyEngineImplTest.java",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/larky-api/src/test/java/com/verygood/security/larkyapi/VersionedLarkyEngineImplTest.java?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1",
    "patch": "@@ -0,0 +1,308 @@\n+package com.verygood.security.larkyapi;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import javax.script.Bindings;\n+import javax.script.ScriptContext;\n+import javax.script.SimpleBindings;\n+import javax.script.SimpleScriptContext;\n+\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertTrue;\n+\n+\n+public class VersionedLarkyEngineImplTest {\n+\n+  private static String version = \"0.4.0\";\n+  private VersionedLarkyEngineImpl engine;\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    synchronized (this) {\n+      // General\n+      engine = new VersionedLarkyEngineImpl(version);\n+    }\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    engine = null;\n+  }\n+\n+  @Test\n+  public void testEngine_ok() {\n+    // Assert\n+    assertNotNull(engine);\n+  }\n+\n+\n+  @Test\n+  public void testEngine_execScript_V0_2_0_exception() throws Exception {\n+    // Expect\n+    exceptionRule.expect(NullPointerException.class);\n+\n+    // Setup\n+    String regxScript = String.join(\"\\n\",\n+            \"load(\\\"@stdlib/re\\\", \\\"re\\\")\",\n+            \"def re_escape():\",\n+            \"    return re.escape(r\\\"1243*&[]_dsfAd\\\")\",\n+            \"output = re_escape()\"\n+    );\n+    String v_2_0 = \"0.2.0\";\n+\n+    // Execute\n+    engine = new VersionedLarkyEngineImpl(v_2_0);\n+    engine.executeScript(regxScript, \"output\");\n+  }\n+\n+  @Test\n+  public void testEngine_execScript_V0_2_1_ok() throws Exception {\n+    // Expect\n+    String expResult = \"1243\\\\*\\\\&\\\\[\\\\]_dsfAd\";\n+\n+    // Setup\n+    String regxScript = String.join(\"\\n\",\n+            \"load(\\\"@stdlib/re\\\", \\\"re\\\")\",\n+            \"def re_escape():\",\n+            \"    return re.escape(r\\\"1243*&[]_dsfAd\\\")\",\n+            \"output = re_escape()\"\n+    );\n+    String v_2_1 = \"0.2.1\";\n+\n+    // Execute\n+    engine = new VersionedLarkyEngineImpl(v_2_1);\n+    Object output = engine.executeScript(regxScript, \"output\");\n+\n+    // Assert\n+    assertEquals(expResult,output.toString());\n+  }\n+\n+\n+  @Test\n+  public void testEngine_getVersion_ok() throws Exception {\n+    // Assert\n+    assertEquals(engine.getVersion(), version);\n+  }\n+\n+  @Test\n+  public void testEngine_badVersion_exception() throws Exception {\n+    // Expect\n+    exceptionRule.expect(IllegalArgumentException.class);\n+    exceptionRule.expectMessage(\"Engine Version not Found\");\n+\n+    engine = new VersionedLarkyEngineImpl(\"0.0.0\");\n+  }\n+\n+\n+  @Test\n+  public void testEngine_setBindings_ok() throws Exception {\n+    // Expect\n+    Object expResult = \"message: Hello From LarkyEngine!\";\n+\n+    // Setup\n+    String msgScript =\n+            \"def message():\\n\" +\n+                    \"    return \\\"message: {}\\\".format(msg)\\n\" +\n+                    \"\\n\" +\n+                    \"output = message()\\n\";\n+    Bindings bindings = new SimpleBindings();\n+    bindings.put(\"msg\", \"Hello From LarkyEngine!\");\n+\n+    // Execute\n+    engine.setBindings(bindings, ScriptContext.ENGINE_SCOPE);\n+    Object output = engine.executeScript(msgScript, \"output\");\n+\n+    // Assert\n+    assertEquals(output.toString(), expResult);\n+  }\n+\n+  @Test\n+  public void testEngine_context_ok() throws Exception {\n+    // Expect\n+    String expResult = \"context_keys: [\\\"value2\\\", \\\"value1\\\"] context_values: [\\\"key2\\\", \\\"key1\\\"]\\n\";\n+\n+    // Setup\n+    String ctxScript =\n+            \"def process(input, ctx):\\n\" +\n+                    \"    print( \" +\n+                    \"'{}: {} context_values: {}'\" +\n+                    \".format(str(input),str(ctx.keys()), str(ctx.values()))\" +\n+                    \")\\n\" +\n+                    \"process(msg,my_ctx)\";\n+\n+\n+    String larkyMsg = \"context_keys\";\n+    ConcurrentMap<String, Object> larkyCTX = new ConcurrentHashMap<>();\n+    larkyCTX.put(\"value1\", \"key1\");\n+    larkyCTX.put(\"value2\", \"key2\");\n+\n+    // Execute\n+    SimpleScriptContext context = new SimpleScriptContext();\n+    context.setAttribute(\"my_ctx\", larkyCTX, ScriptContext.ENGINE_SCOPE);\n+    context.setAttribute(\"msg\", larkyMsg, ScriptContext.ENGINE_SCOPE);\n+    StringWriter sw = new StringWriter();\n+    context.setWriter(new PrintWriter(sw));\n+\n+    engine.executeScript(ctxScript, \"output\", context);\n+\n+    // Assert\n+    assertEquals(expResult, sw.toString());\n+  }\n+\n+\n+  @Test\n+  public void testEngine_readerBasic_ok() throws Exception {\n+    // Expect\n+    String expResult = \"Hello World\";\n+\n+    // Setup\n+    String helloScript =\n+            \"def hello():\\n\" +\n+            \"    return \\\"Hello World\\\"\\n\" +\n+            \"output=hello()\";\n+\n+    Reader helloReader = new StringReader(helloScript);\n+\n+    // Execute\n+    Object output = engine.executeScript(helloReader, \"output\");\n+\n+    // Assert\n+    assertEquals(expResult, output.toString());\n+  }\n+\n+  @Test\n+  public void testEngine_readerContext_ok() throws Exception {\n+    // Expect\n+    String expResult = \"Hello World, I am Larky!\";\n+\n+    // Setup\n+    String helloContextScript =\n+            \"def hello(msg):\\n\" +\n+                    \"    return \\\"Hello World, {}!\\\".format(msg)\\n\" +\n+                    \"output=hello(my_msg)\";\n+\n+    Reader helloContextReader = new StringReader(helloContextScript);\n+    Bindings bindings = new SimpleBindings();\n+    bindings.put(\"my_msg\", \"I am Larky\");\n+    SimpleScriptContext context = new SimpleScriptContext();\n+    context.setBindings(bindings,ScriptContext.ENGINE_SCOPE);\n+\n+    // Execute\n+    Object output = engine.executeScript(helloContextReader, \"output\", context);\n+\n+    // Assert\n+    assertEquals(expResult, output.toString());\n+  }\n+\n+  @Test\n+  public void testEngine_createBindings_ok() {\n+    // Execute\n+    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n+    Bindings result = engine.createBindings();\n+\n+    // Assert\n+    assertNotNull(result);\n+    assertNotSame(bindings, result);\n+  }\n+\n+  @Test\n+  public void testEngine_getContext_ok() {\n+    // Execute\n+    ScriptContext context = engine.getContext();\n+\n+    // Assert\n+    assertNotNull(context);\n+  }\n+\n+  @Test\n+  public void testEngine_getBindings_ok() {\n+    // Execute\n+    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n+\n+    // Assert\n+    assertNotNull(bindings);\n+    assertTrue(bindings instanceof SimpleBindings);\n+    assertEquals(0, bindings.size());\n+  }\n+\n+  @Test\n+  public void testEngine_put_exceptionNull() {\n+    // Expect\n+    exceptionRule.expect(NullPointerException.class);\n+    exceptionRule.expectMessage(\"key can not be null\");\n+\n+    // Setup\n+    String key = null;\n+    Object value = null;\n+\n+    // Execute\n+    engine.put(key,value);\n+\n+  }\n+\n+  @Test\n+  public void testEngine_put_exceptionIllegalArgument() {\n+    // Expect\n+    exceptionRule.expect(IllegalArgumentException.class);\n+    exceptionRule.expectMessage(\"key can not be empty\");\n+\n+    // Setup\n+    String key = \"\";\n+    Object value = null;\n+\n+    // Execute\n+    engine.put(key,value);\n+\n+  }\n+\n+  @Test\n+  public void testEngine_get_ok() {\n+\n+    // Expect\n+    String expResult1 = \"result1\";\n+    String expResult2 = \"result2_2\";\n+    String expResult3 = \"result3_3\";\n+\n+    // Setup\n+    engine.put(\"value1\", \"result1\");\n+    engine.put(\"value2\", new ArrayList<String>() {{\n+      add(\"result2_1\");\n+      add(\"result2_2\");\n+      add(\"result2_3\");\n+    }});\n+    engine.put(\"value3\",  new HashMap<String,String>() {{\n+      put(\"key3_1\",\"result3_1\");\n+      put(\"key3_2\",\"result3_2\");\n+      put(\"key3_3\",\"result3_3\");\n+    }});\n+\n+    // Execute\n+    String result1 = (String) engine.get(\"value1\");\n+    String result2 = ((ArrayList<String>) engine.get(\"value2\")).get(1);\n+    String result3 = ((HashMap<String,String>) engine.get(\"value3\")).get(\"key3_3\");\n+\n+    // Assert\n+    assertEquals(expResult1, result1);\n+    assertEquals(expResult2, result2);\n+    assertEquals(expResult3, result3);\n+  }\n+\n+}"
  },
  {
    "sha": "1abbfdc0365e2e99bb73c79cd9257f5ab3b72576",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/pom.xml",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/pom.xml",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/pom.xml?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1",
    "patch": "@@ -12,6 +12,7 @@\n     <modules>\n         <module>libstarlark</module>\n         <module>larky</module>\n+        <module>larky-api</module>\n         <module>runlarky</module>\n     </modules>\n "
  },
  {
    "sha": "6c85fa5fd721d64e5b2d276a481881d512394a36",
    "filename": "scripts/get_resources.sh",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/verygoodsecurity/starlarky/blob/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/scripts/get_resources.sh",
    "raw_url": "https://github.com/verygoodsecurity/starlarky/raw/6cabcac7eae8e6887538364d388cfc2ee3e08ff1/scripts/get_resources.sh",
    "contents_url": "https://api.github.com/repos/verygoodsecurity/starlarky/contents/scripts/get_resources.sh?ref=6cabcac7eae8e6887538364d388cfc2ee3e08ff1",
    "patch": "@@ -0,0 +1,65 @@\n+#!/bin/bash\n+\n+if [[ -z \"${LARKY_HOME}\" ]]; then\n+  echo \"LARKY_HOME not found\"\n+  exit 1\n+fi\n+\n+# Construct GraphQL query to get Larky package versions and jar files\n+gql_query='query {\n+  repository(owner: \\\"verygoodsecurity\\\", name: \\\"starlarky\\\") {\n+    packages(first:1, names: [\\\"com.verygood.security.larky\\\"]) {\n+      nodes {\n+        versions(first:100) {\n+          nodes {\n+            version\n+            files(first:20) {\n+              nodes {\n+                name\n+                url\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}'\n+\n+\n+# Get packages from github registry using GraphQL API\n+# Parse and clean output into {\"packages\": [ {v1,jar1},{v2,jar2},...,{vN,jarN} ] }\n+package_json=$(\n+  curl  -H 'Content-Type: application/json' \\\n+        -H \"Authorization: bearer $GITHUB_API_TOKEN\" \\\n+        -X POST \\\n+        -d \"{\\\"query\\\": \\\"$(echo $gql_query)\\\"}\" \\\n+        https://api.github.com/graphql \\\n+  | jq \"{ packages: [\n+          .data.repository.packages.nodes[].versions.nodes[]\n+            | { version: .version,\n+                url:  ( .files.nodes[]\n+                        | select(.name\n+                            | test(\\\"^.*with-dependencies\\\\\\.jar$\\\")\n+                          )\n+                        | .url\n+                      )\n+              }\n+          ]\n+        }\"\n+)\n+\n+# Download fat jar files from github registry\n+API_RESOURCE_HOME=$LARKY_HOME/larky-api/src/main/resources\n+echo $package_json | jq -c '.packages[]'| while read i; do\n+    # get cleaned verion & jar name\n+    version=$(jq \".version\" <<< $i | sed -e 's/^\"//' -e 's/\"$//')\n+    url=$(jq \".url\" <<< $i | sed -e 's/^\"//' -e 's/\"$//')\n+\n+    # construct output jar paths\n+    LARKY_API_JAR=$API_RESOURCE_HOME/larky-$version-fat.jar\n+\n+    # get jar\n+    curl -o $LARKY_API_JAR -L $url\n+\n+done\n\\ No newline at end of file"
  }
]
