[
  {
    "sha": "3c4876e820747a6c83ed13fcddda12415f3f79e0",
    "filename": "src/main/java/lesson1/Lesson1Tasks.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Alex80804/geekbrains-java-base1/blob/46e6a1ff233c5c26895fa70d6302b195ef2280fc/src/main/java/lesson1/Lesson1Tasks.java",
    "raw_url": "https://github.com/Alex80804/geekbrains-java-base1/raw/46e6a1ff233c5c26895fa70d6302b195ef2280fc/src/main/java/lesson1/Lesson1Tasks.java",
    "contents_url": "https://api.github.com/repos/Alex80804/geekbrains-java-base1/contents/src/main/java/lesson1/Lesson1Tasks.java?ref=46e6a1ff233c5c26895fa70d6302b195ef2280fc",
    "previous_filename": "src/main/java/lesson1/lesson1Tasks.java"
  },
  {
    "sha": "1a3ffaa958d268e891a97da84773fc3c29e6726a",
    "filename": "src/main/java/lesson2/Lesson2Tasks.java",
    "status": "added",
    "additions": 263,
    "deletions": 0,
    "changes": 263,
    "blob_url": "https://github.com/Alex80804/geekbrains-java-base1/blob/46e6a1ff233c5c26895fa70d6302b195ef2280fc/src/main/java/lesson2/Lesson2Tasks.java",
    "raw_url": "https://github.com/Alex80804/geekbrains-java-base1/raw/46e6a1ff233c5c26895fa70d6302b195ef2280fc/src/main/java/lesson2/Lesson2Tasks.java",
    "contents_url": "https://api.github.com/repos/Alex80804/geekbrains-java-base1/contents/src/main/java/lesson2/Lesson2Tasks.java?ref=46e6a1ff233c5c26895fa70d6302b195ef2280fc",
    "patch": "@@ -0,0 +1,263 @@\n+package lesson2;\n+\n+public class lesson2Tasks {\n+\n+    // Метод для печати целочисленного массива\n+    static void printIntArray(int arr[]) {\n+        for (int i = 0; i < arr.length; i++) {\n+            System.out.print(arr[i] + \" \");\n+        }\n+        System.out.println();\n+    }\n+\n+    // Метод для заполнения целочисленного массива случайными значениями\n+    static int[] fillRandomArray(int arr[], int limit) {\n+        for (int i = 0; i < arr.length; i++) {\n+                 arr[i] = (int) Math.round((Math.random() - Math.random()) * (limit+1));\n+        }\n+        return arr;\n+    }\n+\n+    // Задание 1\n+    // Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].\n+    // С помощью цикла и условия заменить 0 на 1, 1 на 0;\n+    static void replaceZerosAndOnes(int[] arr) {\n+        for (int i = 0; i < arr.length; i++) {\n+            if (arr[i] == 0) {\n+                arr[i] = 1;\n+            }\n+            else {\n+                arr[i] = 0;\n+            }\n+        };\n+    }\n+    // Задание 2\n+    // Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21\n+    static void fillArrayWith3FactorVals(int[] arr) {\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = i*3;\n+        }\n+    }\n+\n+    // Задание 3\n+    // Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2\n+    static void replaceMultBy2(int[] arr) {\n+        for (int i = 0; i < arr.length; i++) {\n+            if (arr[i] < 6 ) {\n+                arr[i]*=2;\n+            }\n+        }\n+    }\n+\n+    // Задание 4\n+    // Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое)\n+    // и с помощью цикла(-ов) заполнить его диагональные элементы единицами\n+    static void fillDiagonalWithOnes(int[][] arr) {\n+        for (int i = 0; i < arr.length; i++) {\n+            for (int j = 0; j < arr[i].length; j++) {\n+                if (i == j || i+j == arr.length-1) {\n+                    arr[i][j] = 1;\n+                }\n+            }\n+        }\n+    }\n+\n+    // Задание 5\n+    // Задать одномерный массив и найти в нем минимальный и максимальный элементы\n+    static int[] countMinMax(int[] arr) {\n+        int[] minMaxVals = new int[2];\n+        int minValue = arr[0], maxValue = arr[0];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            if (arr[i] < minValue) {\n+                minValue = arr[i];\n+            }\n+            if (arr[i] > maxValue) {\n+                maxValue = arr[i];\n+            }\n+        }\n+\n+        minMaxVals[0] = minValue;\n+        minMaxVals[1] = maxValue;\n+\n+        return minMaxVals;\n+    }\n+\n+    // Задание 6\n+    // Метод, в который передается не пустой одномерный целочисленный массив, метод должен вернуть true,\n+    // если в массиве есть место, в котором сумма левой и правой части массива равны.\n+    // Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,\n+    // граница показана символами ||, эти символы в массив не входят.\n+\n+    static boolean isBalancedSpot(int[] arr){\n+        int sumLeft = 0, sumRight = 0;\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            sumLeft = 0; sumRight = 0;\n+            // считаем сумму элементов левой части\n+            for (int jleft = 0; jleft < i; jleft++) {\n+                sumLeft+=arr[jleft];\n+            }\n+\n+            // считаем сумму элементов правой части\n+            for (int jright = i; jright < arr.length; jright++) {\n+                sumRight+=arr[jright];\n+            }\n+            // есть ли баланс сумм элементов\n+            if (sumLeft == sumRight) {\n+                // если нашли\n+                return true;\n+            }\n+        }\n+        // если не нашли\n+        return false;\n+    }\n+\n+    // Задание 7 - пока не получилось :)\n+    // Метод, которому на вход подается одномерный массив и число n (может быть положительным, или отрицательным),\n+    // при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично.\n+    // Для усложнения задачи нельзя пользоваться вспомогательными массивами.\n+    // Примеры:\n+    // [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ];\n+    // [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].\n+    // При каком n в какую сторону сдвиг можете выбирать сами\n+\n+    /*\n+    // заменяем значение в массиве и возвращаем замененное значение\n+    static int replaceItem(int[] arr, int newValue, int index) {\n+        int oldValue = arr[index];\n+        arr[index] = newValue;\n+        return oldValue;\n+    }\n+\n+    static int[] shiftArray(int[] arr, int n) {\n+\n+        // Если смещение больше размерности массива - выходим\n+        if (n > arr.length) {\n+        return arr;\n+        }\n+\n+        int val = arr[0];\n+        int idxReplace = 0;\n+\n+        for (int i = 0; i < arr.length-1; i++) {\n+\n+                idxReplace = n + i;\n+                val = arr[i];\n+\n+            if (idxReplace>=arr.length){\n+                break;\n+            }\n+            val = replaceItem(arr, val, idxReplace);\n+            arr[i] = val;\n+        }\n+        return arr;\n+    }\n+*/\n+\n+\n+\n+    public static void main(String[] args) {\n+        // вызов replaceZerosAndOnes (задание 1)\n+        int[] arrReplace = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};\n+\n+        System.out.println(\"Task 1 initial array:\");\n+        printIntArray(arrReplace);\n+\n+        replaceZerosAndOnes(arrReplace);\n+\n+        System.out.println(\"Task 1 result array:\");\n+        printIntArray(arrReplace);\n+\n+        System.out.println();\n+\n+        // вызов fillArrayWith3FactorVals (задание 2)\n+        int[] arrFill3Factor = new int[8];\n+        System.out.println(\"Task 2 initial array:\");\n+        printIntArray(arrFill3Factor);\n+\n+        fillArrayWith3FactorVals(arrFill3Factor);\n+\n+        System.out.println(\"Task 2 result array:\");\n+        printIntArray(arrFill3Factor);\n+\n+        System.out.println();\n+\n+        // вызов fillArrayWith3FactorVals (задание 3)\n+        int[] arrMultBy2 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};\n+\n+        System.out.println(\"Task 3 initial array:\");\n+        printIntArray(arrMultBy2);\n+\n+        replaceMultBy2(arrMultBy2);\n+\n+        System.out.println(\"Task 3 result array:\");\n+        printIntArray(arrMultBy2);\n+\n+        System.out.println();\n+\n+        // вызов fillDiagonalsWithOnes (задание 4)\n+        int[][] arrTwoDims = new int[20][20];\n+\n+        System.out.println(\"Task 4 initial array:\");\n+        for (int i = 0; i < arrTwoDims.length; i++) {\n+            printIntArray(arrTwoDims[i]);\n+        }\n+\n+        fillDiagonalWithOnes(arrTwoDims);\n+\n+        System.out.println(\"Task 4 result array:\");\n+        for (int i = 0; i < arrTwoDims.length; i++) {\n+            printIntArray(arrTwoDims[i]);\n+        }\n+\n+        // вызов countMinMax (задание 5)\n+        int[] arrRandom = new int[10];\n+\n+        System.out.println();\n+        fillRandomArray(arrRandom, 100);\n+\n+        System.out.println(\"Task 5 initial array:\");\n+        printIntArray(arrRandom);\n+\n+        System.out.println(\"Task 5 results:\");\n+        int[] minMaxArr = countMinMax(arrRandom);\n+        System.out.println(\"Min = \" + minMaxArr[0] + \", Max = \" + minMaxArr[1]);\n+\n+        System.out.println();\n+\n+        // вызов hasBalancedSpot (задание 6)\n+        //int[] arrBalance  = {2, 2, 2, 1, 2, 2, 10, 1};\n+        //int[] arrBalance  = {1, 1, 1, 2, 1};\n+        int[] arrBalance = new int[20];\n+        fillRandomArray(arrBalance, 2);\n+\n+        System.out.println(\"Task 6 initial array:\");\n+        printIntArray(arrBalance);\n+\n+        System.out.println(\"Array has balanced spot: \" + isBalancedSpot(arrBalance));\n+        // Повезло :)\n+        // Task 6 initial array:\n+        // 2 0 0 -1 0 0 0 0 1 -1 -1 -1 |здесь баланс -1| 1 0 0 0 0 -1 1 -2\n+        // Array has balanced spot: true\n+\n+\n+/*         7 задание не получилось пока\n+        // вызов shiftArray (задание 7)\n+        //int[] arrForShift = new int[10];\n+        int[] arrForShift = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+\n+        System.out.println();\n+        //\n+        //fillRandomArray(arrForShift, 100);\n+\n+        System.out.println(\"Task 7 initial array:\");\n+        printIntArray(arrForShift);\n+\n+        int[] arrShifted = shiftArray(arrForShift, 3);\n+        System.out.println(\"Task 7 result array:\");\n+        printIntArray(arrShifted);\n+*/\n+\n+    }\n+}"
  }
]
