[
  {
    "sha": "3b90b398f3e4bf27173e580cd36f439417799f64",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/LoginController.java",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/LoginController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/LoginController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/LoginController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -18,6 +18,8 @@\n package io.vertigo.chatbot.designer.admin.controllers;\n \n import javax.inject.Inject;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n \n import org.springframework.stereotype.Controller;\n@@ -27,7 +29,9 @@\n import org.springframework.web.bind.annotation.RequestParam;\n \n import io.vertigo.chatbot.designer.admin.services.LoginServices;\n+import io.vertigo.chatbot.designer.utils.UserSessionUtils;\n import io.vertigo.core.lang.VUserException;\n+import io.vertigo.core.lang.WrappedException;\n import io.vertigo.core.util.StringUtil;\n import io.vertigo.ui.core.ViewContext;\n import io.vertigo.ui.core.ViewContextKey;\n@@ -49,7 +53,7 @@\n \n \t@GetMapping(\"/\")\n \tpublic String initContext(final ViewContext viewContext, final UiMessageStack uiMessageStack, @RequestParam(name = \"code\", required = false) final Integer code) {\n-\t\tif (!loginServices.isAuthenticated()) {\n+\t\tif (!UserSessionUtils.isAuthenticated()) {\n \t\t\tif (code != null && code.equals(401)) {\n \t\t\t\tuiMessageStack.warning(\"You have been disconnected\");\n \t\t\t\treturn REDIRECT_LOGIN;\n@@ -74,9 +78,20 @@ public String doLogin(@RequestParam(\"login\") final String login, @RequestParam(\"\n \t}\n \n \t@GetMapping(\"/_logout\")\n-\tpublic String logout(final HttpSession httpSession) {\n+\tpublic String logout(final HttpServletRequest request, final HttpSession httpSession) {\n+\t\ttry {\n+\t\t\trequest.logout();\n+\t\t} catch (final ServletException e) {\n+\t\t\tthrow WrappedException.wrap(e);\n+\t\t}\n \t\tloginServices.logout(httpSession);\n \t\treturn REDIRECT_LOGIN;\n \t}\n \n+\t@GetMapping(\"/_reloadAuthorizations\")\n+\tpublic String reloadAuthorizations() {\n+\t\tloginServices.reloadAuthorizations();\n+\t\treturn REDIRECT_HOME;\n+\t}\n+\n }"
  },
  {
    "sha": "2cdb49b7ef7b0d59c6865dbf55e62048ad869805",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonDetailController.java",
    "status": "modified",
    "additions": 18,
    "deletions": 53,
    "changes": 71,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonDetailController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonDetailController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonDetailController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -17,9 +17,6 @@\n  */\n package io.vertigo.chatbot.designer.admin.controllers;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n import javax.inject.Inject;\n \n import org.springframework.stereotype.Controller;\n@@ -28,12 +25,11 @@\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n-import io.vertigo.chatbot.commons.domain.Chatbot;\n-import io.vertigo.chatbot.commons.domain.Person;\n-import io.vertigo.chatbot.commons.domain.PersonRole;\n-import io.vertigo.chatbot.designer.admin.services.LoginServices;\n import io.vertigo.chatbot.designer.admin.services.PersonServices;\n-import io.vertigo.chatbot.designer.builder.services.DesignerServices;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n+import io.vertigo.chatbot.designer.domain.commons.PersonRole;\n+import io.vertigo.chatbot.designer.domain.commons.PersonRoleEnum;\n+import io.vertigo.chatbot.designer.utils.UserSessionUtils;\n import io.vertigo.ui.core.ViewContext;\n import io.vertigo.ui.core.ViewContextKey;\n import io.vertigo.ui.impl.springmvc.argumentresolvers.ViewAttribute;\n@@ -46,79 +42,48 @@\n \n \t@Inject\n \tprivate PersonServices personServices;\n-\t@Inject\n-\tprivate DesignerServices designerServices;\n-\t@Inject\n-\tprivate LoginServices loginServices;\n \n \tprivate static final ViewContextKey<Person> personKey = ViewContextKey.of(\"person\");\n-\t/** ClÃ© de context du mode changePassword. */\n-\tpublic static final ViewContextKey<Boolean> MODE_CHANGE_PASSWORD_CONTEXT_KEY = ViewContextKey\n-\t\t\t.of(\"modeChangePassword\");\n \tpublic static final ViewContextKey<PersonRole> ROLES_CONTEXT_KEY = ViewContextKey.of(\"roles\");\n-\tpublic static final ViewContextKey<Chatbot> CHATBOTS_CONTEXT_KEY = ViewContextKey.of(\"chatbots\");\n-\tpublic static final ViewContextKey<Long[]> CHATBOT_SELECTED_CONTEXT_KEY = ViewContextKey.of(\"chatbotsSelected\");\n-\tpublic static final ViewContextKey<String> CHATBOT_SELECTED_STR_CONTEXT_KEY = ViewContextKey\n-\t\t\t.of(\"chatbotsSelectedStr\");\n \tpublic static final ViewContextKey<Boolean> IS_SAME_USER_KEY = ViewContextKey.of(\"isSameUser\");\n-\n-\tprivate void initCommonContext(final ViewContext viewContext) {\n-\t\tviewContext.publishMdl(ROLES_CONTEXT_KEY, PersonRole.class, null); // all\n-\t\tviewContext.publishDtList(CHATBOTS_CONTEXT_KEY, designerServices.getAllChatbots());\n-\t\tviewContext.publishRef(CHATBOT_SELECTED_STR_CONTEXT_KEY, \"\");\n-\t}\n+\tpublic static final ViewContextKey<Boolean> IS_LAST_ADMIN = ViewContextKey.of(\"isLastAdmin\");\n \n \t@GetMapping(\"/{perId}\")\n \tpublic void initContext(final ViewContext viewContext, @PathVariable(\"perId\") final Long perId) {\n-\t\tinitCommonContext(viewContext);\n \t\tfinal Person person = personServices.getPersonById(perId);\n \t\tviewContext.publishDto(personKey, person);\n-\t\tviewContext.publishRef(MODE_CHANGE_PASSWORD_CONTEXT_KEY, false);\n \t\tviewContext.publishRef(IS_SAME_USER_KEY, isPersonConnected(person));\n-\n-\t\tfinal List<Long> selectedBotIds = person.chatbots().get().stream().map(Chatbot::getBotId)\n-\t\t\t\t.collect(Collectors.toList());\n-\t\tviewContext.publishRef(CHATBOT_SELECTED_CONTEXT_KEY, selectedBotIds.toArray(new Long[selectedBotIds.size()]));\n-\n+\t\tviewContext.publishMdl(ROLES_CONTEXT_KEY, PersonRole.class, null); // all\n+\t\tviewContext.publishRef(IS_LAST_ADMIN, isLastAdmin(person));\n \t\ttoModeReadOnly();\n \t}\n \n-\t@GetMapping(\"/new\")\n-\tpublic void initContext(final ViewContext viewContext) {\n-\t\tinitCommonContext(viewContext);\n-\t\tviewContext.publishDto(personKey, new Person());\n-\t\tviewContext.publishRef(MODE_CHANGE_PASSWORD_CONTEXT_KEY, true);\n-\t\tviewContext.publishRef(CHATBOT_SELECTED_CONTEXT_KEY, new Long[0]);\n-\t\ttoModeCreate();\n-\t}\n-\n \t@PostMapping(\"/_edit\")\n \tpublic void doEdit() {\n \t\ttoModeEdit();\n \t}\n \n-\t@PostMapping(\"/_changePassword\")\n-\tpublic void doChangePassword(final ViewContext viewContext) {\n-\t\tviewContext.publishRef(MODE_CHANGE_PASSWORD_CONTEXT_KEY, true);\n-\t\ttoModeEdit();\n-\t}\n-\n \t@PostMapping(\"/_save\")\n \tpublic String doSave(final ViewContext viewContext, final UiMessageStack uiMessageStack,\n-\t\t\t@ViewAttribute(\"person\") final Person person, @ViewAttribute(\"chatbotsSelectedStr\") final String chatbotsSelectedStr) {\n+\t\t\t@ViewAttribute(\"person\") final Person person) {\n \t\t//save person, with its supervised chatbot\n-\t\tfinal Person savedPerson = personServices.savePerson(person, chatbotsSelectedStr);\n+\t\tfinal Person savedPerson = personServices.savePerson(person);\n \t\treturn \"redirect:/person/\" + savedPerson.getPerId();\n \t}\n \n-\tprivate Boolean isPersonConnected(Person person) {\n-\t\tfinal Person personConnected = loginServices.getLoggedPerson();\n+\tprivate Boolean isPersonConnected(final Person person) {\n+\t\tfinal Person personConnected = UserSessionUtils.getLoggedPerson();\n \t\treturn person.getPerId().equals(personConnected.getPerId());\n \t}\n \n+\tprivate Boolean isLastAdmin(final Person person) {\n+\t\treturn personServices.getAdminPerNumber().equals(1L) && person.getRolCd().equals(PersonRoleEnum.RAdmin.name());\n+\t}\n+\n \t@PostMapping(\"/_delete\")\n-\tprivate String deletePerson(@ViewAttribute(\"person\") Person person) {\n-\t\tthis.personServices.deletePerson(person);\n+\tprivate String deletePerson(@ViewAttribute(\"person\") final Person person) {\n+\t\tpersonServices.deletePerson(person);\n \t\treturn \"redirect:/persons/\";\n \t}\n+\n }"
  },
  {
    "sha": "aa2af244c64db161ad82702a27221814d94484ee",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonListController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonListController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonListController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/controllers/PersonListController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -23,8 +23,8 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n-import io.vertigo.chatbot.commons.domain.Person;\n import io.vertigo.chatbot.designer.admin.services.PersonServices;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n import io.vertigo.ui.core.ViewContext;\n import io.vertigo.ui.core.ViewContextKey;\n import io.vertigo.ui.impl.springmvc.controller.AbstractVSpringMvcController;"
  },
  {
    "sha": "511b6f45e5abae208226eeefaa818e5a86e94cd0",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/AuthorizationServices.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/AuthorizationServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/AuthorizationServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/AuthorizationServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,81 @@\n+package io.vertigo.chatbot.designer.admin.services;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import io.vertigo.account.authorization.AuthorizationManager;\n+import io.vertigo.account.authorization.UserAuthorizations;\n+import io.vertigo.account.authorization.definitions.Authorization;\n+import io.vertigo.account.authorization.definitions.AuthorizationName;\n+import io.vertigo.chatbot.authorization.GlobalAuthorizations;\n+import io.vertigo.chatbot.authorization.SecuredEntities.ChatbotAuthorizations;\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotProfilServices;\n+import io.vertigo.chatbot.designer.domain.admin.ChatbotProfilesEnum;\n+import io.vertigo.chatbot.designer.domain.admin.ProfilPerChatbot;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n+import io.vertigo.chatbot.designer.domain.commons.PersonRoleEnum;\n+import io.vertigo.commons.transaction.Transactional;\n+import io.vertigo.core.node.Node;\n+import io.vertigo.core.node.component.Component;\n+import io.vertigo.core.node.definition.DefinitionSpace;\n+\n+@Transactional\n+public class AuthorizationServices implements Component {\n+\n+\t@Inject\n+\tprivate AuthorizationManager authorizationManager;\n+\t@Inject\n+\tprivate ChatbotProfilServices chatbotProfilServices;\n+\n+\tprivate List<Authorization> obtainAuthorizationPerRole(final String role) {\n+\t\tif (PersonRoleEnum.RAdmin.name().equals(role)) {\n+\t\t\treturn resolveAuthorizations(GlobalAuthorizations.AtzSuperAdm, GlobalAuthorizations.AtzBotUser, ChatbotAuthorizations.AtzChatbot$botSuperAdmin);\n+\t\t} else if (PersonRoleEnum.RUser.name().equals(role)) {\n+\t\t\treturn resolveAuthorizations(GlobalAuthorizations.AtzBotUser, ChatbotAuthorizations.AtzChatbot$botVisitor,\n+\t\t\t\t\tChatbotAuthorizations.AtzChatbot$botContributor, ChatbotAuthorizations.AtzChatbot$botAdm);\n+\t\t}\n+\t\tthrow new IllegalArgumentException(\"Unsupported role \" + role);\n+\t}\n+\n+\tprivate List<Authorization> resolveAuthorizations(final AuthorizationName... authNames) {\n+\t\tfinal DefinitionSpace definitionSpace = Node.getNode().getDefinitionSpace();\n+\t\tfinal List<Authorization> authorizations = Arrays.stream(authNames)\n+\t\t\t\t.map(name -> definitionSpace.resolve(name.name(), Authorization.class))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn authorizations;\n+\t}\n+\n+\tprivate void addAuthorizationByChatbotProfil(final UserAuthorizations userAuthorizations, final ProfilPerChatbot profil) {\n+\t\tfinal String chatbotProfile = profil.getChpCd();\n+\t\tfinal ChatbotProfilesEnum chatbotEnum = ChatbotProfilesEnum.valueOf(chatbotProfile);\n+\n+\t\t//Not break to add the lower security\n+\t\tswitch (chatbotEnum) {\n+\t\t\tcase ADMINISTRATEUR:\n+\t\t\t\tuserAuthorizations.withSecurityKeys(\"botAdm\", profil.getBotId());\n+\t\t\tcase CONTRIBUTEUR:\n+\t\t\t\tuserAuthorizations.withSecurityKeys(\"botContributor\", profil.getBotId());\n+\t\t\tcase VISITEUR:\n+\t\t\t\tuserAuthorizations.withSecurityKeys(\"botVisitor\", profil.getBotId());\n+\t\t\tdefault:\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\tpublic void addUserAuthorization(final Person person) {\n+\t\tfinal UserAuthorizations userAuthorizations = authorizationManager.obtainUserAuthorizations();\n+\t\tobtainAuthorizationPerRole(person.getRolCd()).stream()\n+\t\t\t\t.forEach(auth -> userAuthorizations.addAuthorization(auth));\n+\n+\t\tchatbotProfilServices.getProfilByPerId().stream().forEach(profil -> addAuthorizationByChatbotProfil(userAuthorizations, profil));\n+\t}\n+\n+\tpublic void reloadUserAuthorization(final Person person) {\n+\t\tfinal UserAuthorizations userAuthorizations = authorizationManager.obtainUserAuthorizations();\n+\t\tuserAuthorizations.clearRoles();\n+\t\taddUserAuthorization(person);\n+\t}\n+}"
  },
  {
    "sha": "ce037355080e6f143c384a0668bc0d02a989e6a2",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/KeycloakPersonServices.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/KeycloakPersonServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/KeycloakPersonServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/KeycloakPersonServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,84 @@\n+package io.vertigo.chatbot.designer.admin.services;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.keycloak.representations.IDToken;\n+\n+import io.vertigo.chatbot.designer.dao.commons.PersonDAO;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n+import io.vertigo.chatbot.designer.domain.commons.PersonRoleEnum;\n+import io.vertigo.commons.transaction.Transactional;\n+import io.vertigo.core.lang.Assertion;\n+import io.vertigo.core.node.component.Component;\n+\n+@Transactional\n+public class KeycloakPersonServices implements Component {\n+\n+\t@Inject\n+\tprivate PersonDAO personDAO;\n+\n+\t/**\n+\t * Init person and save it\n+\t * Empty collections is the default value for chatbot\n+\t * \n+\t * @param login of the user\n+\t * @param rol\n+\t * @param name\n+\t * @return the person created\n+\t */\n+\tpublic Person initPerson(final String login, final String name, final String rol) {\n+\t\tPerson newPerson = new Person();\n+\t\tnewPerson.setLogin(login.toLowerCase());\n+\t\tnewPerson.setName(name);\n+\t\tnewPerson.setRolCd(rol);\n+\t\tnewPerson = createPerson(newPerson);\n+\t\t//By default user has no profil\n+\t\treturn newPerson;\n+\t}\n+\n+\t/**\n+\t * Create a person\n+\t * \n+\t * @param newPerson to create\n+\t * @return the person after the creation\n+\t */\n+\tpublic Person createPerson(Person newPerson) {\n+\t\treturn personDAO.create(newPerson);\n+\n+\t}\n+\n+\t/**\n+\t * Get the role from keycloak groups\n+\t * By default the groups RUser is used\n+\t * \n+\t * @param token\n+\t * @return the role\n+\t */\n+\tpublic String getRoleFromToken(IDToken token) {\n+\t\tList<?> groups = (List<?>) token.getOtherClaims().get(\"groups\");\n+\t\tif (groups.isEmpty()) {\n+\t\t\treturn PersonRoleEnum.RUser.name();\n+\t\t}\n+\t\treturn (String) groups.get(0);\n+\t}\n+\n+\t/**\n+\t * Get the username from the auth token\n+\t * \n+\t * @param token\n+\t * @return the name of connected user\n+\t */\n+\tpublic String getNameFromToken(IDToken token) {\n+\t\tfinal String name = token.getName() != null ? token.getName() : \"\";\n+\t\treturn name;\n+\t}\n+\n+\tpublic Person getPersonToConnect(final Long perId) {\n+\t\tAssertion.check().isNotNull(perId);\n+\t\t// ---\n+\t\tfinal Person person = personDAO.get(perId);\n+\t\treturn person;\n+\t}\n+}"
  },
  {
    "sha": "04a480b034728f79aad96feee8d4c90cdbb7f10f",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/LoginServices.java",
    "status": "modified",
    "additions": 18,
    "deletions": 81,
    "changes": 99,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/LoginServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/LoginServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/LoginServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -18,10 +18,8 @@\n package io.vertigo.chatbot.designer.admin.services;\n \n import java.io.IOException;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n import javax.servlet.http.HttpServletRequest;\n@@ -33,29 +31,17 @@\n \n import io.vertigo.account.account.Account;\n import io.vertigo.account.authentication.AuthenticationManager;\n-import io.vertigo.account.authorization.AuthorizationManager;\n-import io.vertigo.account.authorization.UserAuthorizations;\n-import io.vertigo.account.authorization.VSecurityException;\n-import io.vertigo.account.authorization.definitions.Authorization;\n-import io.vertigo.account.authorization.definitions.AuthorizationName;\n import io.vertigo.account.impl.authentication.UsernameAuthenticationToken;\n import io.vertigo.account.impl.authentication.UsernamePasswordAuthenticationToken;\n-import io.vertigo.account.security.VSecurityManager;\n-import io.vertigo.chatbot.authorization.GlobalAuthorizations;\n-import io.vertigo.chatbot.authorization.SecuredEntities.ChatbotAuthorizations;\n-import io.vertigo.chatbot.commons.domain.Person;\n-import io.vertigo.chatbot.commons.domain.PersonRoleEnum;\n-import io.vertigo.chatbot.designer.commons.DesignerUserSession;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n+import io.vertigo.chatbot.designer.utils.UserSessionUtils;\n import io.vertigo.commons.transaction.Transactional;\n import io.vertigo.connectors.keycloak.KeycloakDeploymentConnector;\n import io.vertigo.core.lang.Assertion;\n import io.vertigo.core.lang.VUserException;\n import io.vertigo.core.lang.WrappedException;\n-import io.vertigo.core.locale.MessageText;\n-import io.vertigo.core.node.Node;\n import io.vertigo.core.node.component.Activeable;\n import io.vertigo.core.node.component.Component;\n-import io.vertigo.core.node.definition.DefinitionSpace;\n import io.vertigo.vega.impl.servlet.filter.AbstactKeycloakDelegateAuthenticationHandler;\n \n @Transactional\n@@ -64,70 +50,33 @@\n \t@Inject\n \tprivate AuthenticationManager authenticationManager;\n \t@Inject\n-\tprivate AuthorizationManager authorizationManager;\n-\t@Inject\n-\tprivate VSecurityManager securityManager;\n+\tprivate AuthorizationServices authorizationServices;\n \t@Inject\n \tprivate List<KeycloakDeploymentConnector> keycloakDeploymentConnectors;\n \t@Inject\n-\tprivate PersonServices personServices;\n+\tprivate KeycloakPersonServices keycloakPersonServices;\n \n+\t//don't use anymore\n \tpublic void login(final String login, final String password) {\n \t\tfinal Optional<Account> loggedAccount = authenticationManager.login(new UsernamePasswordAuthenticationToken(login, password));\n \t\tif (!loggedAccount.isPresent()) {\n \t\t\tthrow new VUserException(\"Login or Password invalid\");\n \t\t}\n \t\tfinal Account account = loggedAccount.get();\n-\t\tfinal Person person = personServices.getPersonById(Long.valueOf(account.getId()));\n-\t\tgetUserSession().setLoggedPerson(person);\n-\n-\t\tfinal UserAuthorizations userAuthorizations = authorizationManager.obtainUserAuthorizations();\n-\t\tobtainAuthorizationPerRole(person.getRolCd()).stream()\n-\t\t\t\t.forEach(auth -> userAuthorizations.addAuthorization(auth));\n-\n-\t\tperson.chatbots().load();\n-\t\tperson.chatbots().get().stream()\n-\t\t\t\t.forEach(chatbot -> userAuthorizations.withSecurityKeys(\"botId\", chatbot.getBotId()));\n-\t}\n+\t\tfinal Person person = keycloakPersonServices.getPersonToConnect(Long.valueOf(account.getId()));\n+\t\tUserSessionUtils.getUserSession().setLoggedPerson(person);\n \n-\tprivate List<Authorization> obtainAuthorizationPerRole(final String role) {\n-\t\tif (PersonRoleEnum.RAdmin.name().equals(role)) {\n-\t\t\treturn resolveAuthorizations(GlobalAuthorizations.AtzAdmPer, GlobalAuthorizations.AtzSuperAdmBot, GlobalAuthorizations.AtzAdmBot, ChatbotAuthorizations.AtzChatbot$admin);\n-\t\t} else if (PersonRoleEnum.RUser.name().equals(role)) {\n-\t\t\treturn resolveAuthorizations(GlobalAuthorizations.AtzAdmBot, ChatbotAuthorizations.AtzChatbot$read, ChatbotAuthorizations.AtzChatbot$write);\n-\t\t}\n-\t\tthrow new IllegalArgumentException(\"Unsupported role \" + role);\n-\t}\n-\n-\tprivate static List<Authorization> resolveAuthorizations(final AuthorizationName... authNames) {\n-\t\tfinal DefinitionSpace definitionSpace = Node.getNode().getDefinitionSpace();\n-\t\tfinal List<Authorization> authorizations = Arrays.stream(authNames)\n-\t\t\t\t.map(name -> definitionSpace.resolve(name.name(), Authorization.class))\n-\t\t\t\t.collect(Collectors.toList());\n-\t\treturn authorizations;\n-\t}\n-\n-\tpublic boolean isAuthenticated() {\n-\t\tfinal Optional<DesignerUserSession> userSession = securityManager.<DesignerUserSession>getCurrentUserSession();\n-\t\treturn !userSession.isPresent() ? false : userSession.get().isAuthenticated();\n-\t}\n-\n-\tpublic Person getLoggedPerson() {\n-\t\treturn getUserSession().getLoggedPerson();\n+\t\tauthorizationServices.addUserAuthorization(person);\n \t}\n \n \tpublic void logout(final HttpSession httpSession) {\n \t\tauthenticationManager.logout();\n \t\thttpSession.invalidate();\n \t}\n \n-\tprivate DesignerUserSession getUserSession() {\n-\t\treturn securityManager.<DesignerUserSession>getCurrentUserSession().orElseThrow(() -> new VSecurityException(MessageText.of(\"No active session found\")));\n-\t}\n-\n \t@Override\n-\tpublic boolean doLogin(HttpServletRequest request, HttpServletResponse response) {\n-\t\tif (!isAuthenticated()) {\n+\tpublic boolean doLogin(final HttpServletRequest request, final HttpServletResponse response) {\n+\t\tif (!UserSessionUtils.isAuthenticated()) {\n \t\t\t// we should have a Principal\n \t\t\tfinal KeycloakPrincipal keycloakPrincipal = (KeycloakPrincipal) request.getUserPrincipal();\n \n@@ -150,30 +99,18 @@ private void loginWithPrincipal(final KeycloakPrincipal principal) {\n \t\tfinal Account loggedAccount = authenticationManager.login(new UsernameAuthenticationToken(login)).orElseGet(\n \t\t\t\t() -> {\n \t\t\t\t\t// auto provisionning an account when using keycloak\n-\t\t\t\t\tfinal String name = getNameFromToken(token);\n-\t\t\t\t\tfinal String rol = getRoleFromToken(token);\n-\t\t\t\t\tfinal Person newPerson = personServices.initPerson(login, name, rol);\n+\t\t\t\t\tfinal String name = keycloakPersonServices.getNameFromToken(token);\n+\t\t\t\t\tfinal String rol = keycloakPersonServices.getRoleFromToken(token);\n+\t\t\t\t\tkeycloakPersonServices.initPerson(login, name, rol);\n \t\t\t\t\treturn authenticationManager.login(new UsernameAuthenticationToken(login)).get();\n \t\t\t\t});\n-\t\tfinal Person person = personServices.getPersonById(Long.valueOf(loggedAccount.getId()));\n-\t\tgetUserSession().setLoggedPerson(person);\n-\t\tfinal UserAuthorizations userAuthorizations = authorizationManager.obtainUserAuthorizations();\n-\t\tobtainAuthorizationPerRole(person.getRolCd()).stream()\n-\t\t\t\t.forEach(auth -> userAuthorizations.addAuthorization(auth));\n-\n-\t\tperson.chatbots().load();\n-\t\tperson.chatbots().get().stream()\n-\t\t\t\t.forEach(chatbot -> userAuthorizations.withSecurityKeys(\"botId\", chatbot.getBotId()));\n-\t}\n-\n-\tprivate String getRoleFromToken(IDToken token) {\n-\t\tList<?> groups = (List<?>) token.getOtherClaims().get(\"groups\");\n-\t\treturn (String) groups.get(0);\n+\t\tfinal Person person = keycloakPersonServices.getPersonToConnect(Long.valueOf(loggedAccount.getId()));\n+\t\tUserSessionUtils.getUserSession().setLoggedPerson(person);\n+\t\tauthorizationServices.addUserAuthorization(person);\n \t}\n \n-\tprivate String getNameFromToken(IDToken token) {\n-\t\tfinal String name = token.getName() != null ? token.getName() : \"\";\n-\t\treturn name;\n+\tpublic void reloadAuthorizations() {\n+\t\tauthorizationServices.reloadUserAuthorization(UserSessionUtils.getLoggedPerson());\n \t}\n \n \t@Override"
  },
  {
    "sha": "2a51319a8a0024cff5102802d7e5008f2170c19b",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/PersonServices.java",
    "status": "modified",
    "additions": 14,
    "deletions": 88,
    "changes": 102,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/PersonServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/PersonServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/admin/services/PersonServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -17,28 +17,21 @@\n  */\n package io.vertigo.chatbot.designer.admin.services;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n import javax.inject.Inject;\n \n-import io.vertigo.chatbot.commons.dao.PersonDAO;\n-import io.vertigo.chatbot.commons.domain.Chatbot;\n-import io.vertigo.chatbot.commons.domain.Person;\n+import io.vertigo.account.authorization.annotations.Secured;\n import io.vertigo.chatbot.designer.admin.person.PersonPAO;\n+import io.vertigo.chatbot.designer.dao.commons.PersonDAO;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n import io.vertigo.commons.transaction.Transactional;\n import io.vertigo.core.lang.Assertion;\n import io.vertigo.core.node.component.Component;\n import io.vertigo.datamodel.criteria.Criterions;\n-import io.vertigo.datamodel.structure.definitions.association.DtListURIForNNAssociation;\n import io.vertigo.datamodel.structure.model.DtList;\n import io.vertigo.datamodel.structure.model.DtListState;\n-import io.vertigo.datamodel.structure.model.UID;\n-import io.vertigo.datastore.entitystore.EntityStoreManager;\n \n @Transactional\n+@Secured(\"SuperAdm\")\n public class PersonServices implements Component {\n \n \t@Inject\n@@ -47,103 +40,36 @@\n \t@Inject\n \tprivate PersonDAO personDAO;\n \n-\t@Inject\n-\tprivate EntityStoreManager entityStoreManager;\n-\n \tpublic DtList<Person> getAllPersons() {\n \t\treturn personDAO.findAll(Criterions.alwaysTrue(), DtListState.of(100));\n \t}\n \n+\tpublic Long getAdminPerNumber() {\n+\t\treturn personPAO.countAllAdminPer();\n+\t}\n+\n \tpublic Person getPersonById(final Long perId) {\n \t\tAssertion.check().isNotNull(perId);\n \t\t// ---\n \t\tfinal Person person = personDAO.get(perId);\n-\t\tperson.chatbots().load();\n \t\treturn person;\n \t}\n \n \t/**\n-\t * Save the person with its chatbots\n-\t * \n+\t * Save the person\n+\t *\n \t * @param person person to save\n-\t * @param chatbotsSelectedStr the chatbots list in string\n \t * @return the person updated\n \t */\n-\tpublic Person savePerson(final Person person, final String chatbotsSelectedStr) {\n+\tpublic Person savePerson(final Person person) {\n \t\tAssertion.check().isNotNull(person);\n-\n \t\tfinal Person savedPerson = personDAO.save(person);\n-\n-\t\tupdateChatBotListUID(savedPerson, createListChatbot(chatbotsSelectedStr));\n \t\treturn savedPerson;\n \t}\n \n-\t/**\n-\t * Create the chatbot list UID from the chatbots string\n-\t * \n-\t * @param chatbotsSelectedStr the chatbotsString\n-\t * @return the UID list\n-\t */\n-\tprivate List<UID> createListChatbot(final String chatbotsSelectedStr) {\n-\t\tif (chatbotsSelectedStr.isEmpty()) {\n-\t\t\treturn Collections.emptyList();\n-\t\t} else {\n-\t\t\treturn Arrays.stream(chatbotsSelectedStr.split(\",\"))\n-\t\t\t\t\t.map(Long::parseLong)\n-\t\t\t\t\t.map(id -> UID.of(Chatbot.class, id))\n-\t\t\t\t\t.collect(Collectors.toList());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Init person and save it\n-\t * Empty collections is the default value for chatbot\n-\t * \n-\t * @param login of the user\n-\t * @param rol\n-\t * @param name\n-\t * @return the person created\n-\t */\n-\tpublic Person initPerson(String login, String name, String rol) {\n-\t\tPerson newPerson = new Person();\n-\t\tnewPerson.setLogin(login.toLowerCase());\n-\t\tnewPerson.setName(name);\n-\t\tnewPerson.setRolCd(rol);\n-\t\tnewPerson = createPerson(newPerson);\n-\t\tupdateChatBotList(newPerson, Collections.emptyList());\n-\t\treturn newPerson;\n-\t}\n-\n-\t/**\n-\t * Create a person\n-\t * \n-\t * @param newPerson to create\n-\t * @return the person after the creation\n-\t */\n-\tpublic Person createPerson(Person newPerson) {\n-\t\treturn personDAO.create(newPerson);\n-\n-\t}\n-\n-\t/**\n-\t * Update the chatbots list of a person\n-\t * \n-\t * @param person to update\n-\t * @param chatbotIds the new list\n-\t */\n-\tprivate void updateChatBotList(Person person, List<Chatbot> chatbots) {\n-\t\tList<UID> chatbotIds = chatbots.stream().map(id -> UID.of(Chatbot.class, id)).collect(Collectors.toList());\n-\t\tthis.updateChatBotListUID(person, chatbotIds);\n-\t}\n-\n-\tprivate void updateChatBotListUID(Person person, List<UID> chatbotIds) {\n-\t\tentityStoreManager.getBrokerNN()\n-\t\t\t\t.updateNN(DtListURIForNNAssociation.class.cast(person.chatbots().getDtListURI()), chatbotIds);\n-\t}\n-\n \tpublic void deletePerson(final Person person) {\n-\t\tLong perId = person.getPerId();\n-\t\tthis.personPAO.removeAllChaPerRightByPerId(perId);\n-\t\tthis.personDAO.delete(perId);\n+\t\tfinal Long perId = person.getPerId();\n+\t\tpersonPAO.removeAllChaPerRightByPerId(perId);\n+\t\tpersonDAO.delete(perId);\n \t}\n }"
  },
  {
    "sha": "e42d79366bb2d1bacc4ef24f84a553abbf69cf57",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/analytics/controllers/AnalyticsController.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/analytics/controllers/AnalyticsController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/analytics/controllers/AnalyticsController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/analytics/controllers/AnalyticsController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -33,6 +33,8 @@\n import io.vertigo.chatbot.designer.analytics.services.AnalyticsServices;\r\n import io.vertigo.chatbot.designer.analytics.services.TimeOption;\r\n import io.vertigo.chatbot.designer.builder.services.DesignerServices;\r\n+import io.vertigo.chatbot.designer.builder.services.NodeServices;\r\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotServices;\r\n import io.vertigo.chatbot.designer.domain.SentenseDetail;\r\n import io.vertigo.chatbot.designer.domain.StatCriteria;\r\n import io.vertigo.chatbot.designer.domain.TopIntent;\r\n@@ -68,12 +70,18 @@\n \t@Inject\r\n \tprivate DesignerServices designerServices;\r\n \r\n+\t@Inject\r\n+\tprivate ChatbotServices chatbotServices;\r\n+\r\n+\t@Inject\r\n+\tprivate NodeServices nodeServices;\r\n+\r\n \t@GetMapping(\"/\")\r\n \tpublic void initContext(final ViewContext viewContext,\r\n \t\t\t@RequestParam(\"botId\") final Optional<Long> botId,\r\n \t\t\t@RequestParam(\"nodId\") final Optional<Long> nodId,\r\n \t\t\t@RequestParam(\"time\") final Optional<TimeOption> timeOption) {\r\n-\t\tviewContext.publishDtList(botsKey, designerServices.getMySupervisedChatbots());\r\n+\t\tviewContext.publishDtList(botsKey, chatbotServices.getMySupervisedChatbots());\r\n \t\tviewContext.publishDtList(nodesKey, new DtList<ChatbotNode>(ChatbotNode.class));\r\n \r\n \t\tfinal StatCriteria statCriteria = new StatCriteria();\r\n@@ -99,7 +107,7 @@ public ViewContext doUpdateStats(final ViewContext viewContext,\n \r\n \tprivate void updateGraph(final ViewContext viewContext, final StatCriteria criteria) {\r\n \t\tif (criteria.getBotId() != null) {\r\n-\t\t\tviewContext.publishDtList(nodesKey, designerServices.getAllNodesByBotId(criteria.getBotId()));\r\n+\t\t\tviewContext.publishDtList(nodesKey, nodeServices.getAllNodesByBotId(criteria.getBotId()));\r\n \t\t}\r\n \r\n \t\tviewContext.publishRef(sessionStatsKey, analyticsServices.getSessionsStats(criteria));\r"
  },
  {
    "sha": "f6e0132bb9112d61535c3e34cfecaea46f16a34b",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/boot/ChatbotMasterDataDefinitionProvider.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/boot/ChatbotMasterDataDefinitionProvider.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/boot/ChatbotMasterDataDefinitionProvider.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/boot/ChatbotMasterDataDefinitionProvider.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -20,8 +20,9 @@\n  */\n package io.vertigo.chatbot.designer.boot;\n \n-import io.vertigo.chatbot.commons.domain.PersonRole;\n import io.vertigo.chatbot.commons.domain.ResponseType;\n+import io.vertigo.chatbot.designer.domain.admin.ChatbotProfiles;\n+import io.vertigo.chatbot.designer.domain.commons.PersonRole;\n import io.vertigo.datastore.impl.entitystore.AbstractMasterDataDefinitionProvider;\n \n /**\n@@ -35,6 +36,7 @@\n \tpublic void declareMasterDataLists() {\n \t\tregisterDtMasterDatas(ResponseType.class);\n \t\tregisterDtMasterDatas(PersonRole.class);\n+\t\tregisterDtMasterDatas(ChatbotProfiles.class);\n \t}\n \n }"
  },
  {
    "sha": "cbc4f580aa24c4c3b7c83fb3a6496e1caf72dc6c",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/chatbot/services/ChatbotServicesImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 81,
    "changes": 81,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/d12b505cabf37df102fec1b4ee8ef1a495db4d9c/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/chatbot/services/ChatbotServicesImpl.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/d12b505cabf37df102fec1b4ee8ef1a495db4d9c/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/chatbot/services/ChatbotServicesImpl.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/chatbot/services/ChatbotServicesImpl.java?ref=d12b505cabf37df102fec1b4ee8ef1a495db4d9c",
    "patch": "@@ -1,81 +0,0 @@\n-package io.vertigo.chatbot.designer.builder.chatbot.services;\n-\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import io.vertigo.chatbot.commons.dao.ChatbotDAO;\n-import io.vertigo.chatbot.commons.dao.MediaFileInfoDAO;\n-import io.vertigo.chatbot.commons.domain.Chatbot;\n-import io.vertigo.chatbot.designer.builder.BuilderPAO;\n-import io.vertigo.chatbot.designer.builder.chatbot.ChatbotPAO;\n-import io.vertigo.commons.transaction.Transactional;\n-import io.vertigo.core.node.component.Component;\n-\n-@Transactional\n-public class ChatbotServicesImpl implements Component {\n-\n-\t@Inject\n-\tprivate BuilderPAO builderPAO;\n-\n-\t@Inject\n-\tprivate ChatbotPAO chatbotPAO;\n-\n-\t@Inject\n-\tprivate ChatbotDAO chatbotDAO;\n-\n-\t@Inject\n-\tprivate MediaFileInfoDAO mediaFileInfoDAO;\n-\n-\tpublic Boolean deleteChatbot(Chatbot bot) {\n-\n-\t\t// Delete link with person\n-\t\tchatbotPAO.removeAllChaPerRightByBotId(bot.getBotId());\n-\t\t// Delete avatar file\n-\t\tdeleteFil(bot);\n-\t\t// Delete node\n-\t\tdeleteChatbotNode(bot);\n-\t\t// Delete training and all media file\n-\t\tdeleteTraining(bot);\n-\t\tdeleteUtterText(bot);\n-\t\tdeleteResponseButton(bot);\n-\t\t// Delete training, reponsetype and smallTalk\n-\t\tdeleteSmallTalkCascade(bot);\n-\t\tchatbotDAO.delete(bot.getBotId());\n-\t\treturn true;\n-\t}\n-\n-\tprivate void deleteSmallTalkCascade(Chatbot bot) {\n-\t\tLong botId = bot.getBotId();\n-\t\tbuilderPAO.removeAllNluTrainingSentenceByBotId(botId);\n-\t\tbuilderPAO.removeAllSmallTalkByBotId(botId);\n-\n-\t}\n-\n-\tprivate void deleteResponseButton(Chatbot bot) {\n-\t\tbuilderPAO.removeAllButtonsByBotId(bot.getBotId());\n-\n-\t}\n-\n-\tprivate void deleteUtterText(Chatbot bot) {\n-\t\tbuilderPAO.removeAllUtterTextByBotId(bot.getBotId());\n-\t}\n-\n-\tprivate void deleteTraining(Chatbot bot) {\n-\t\tLong botId = bot.getBotId();\n-\t\tList<Long> filesId = builderPAO.getAllTrainingFilIdsByBotId(botId);\n-\t\tbuilderPAO.removeTrainingByBotId(botId);\n-\t\tbuilderPAO.removeTrainingFileByFilIds(filesId);\n-\t}\n-\n-\tprivate void deleteChatbotNode(Chatbot bot) {\n-\t\tbuilderPAO.removeChatbotNodeByBotId(bot.getBotId());\n-\t}\n-\n-\tprivate void deleteFil(Chatbot bot) {\n-\t\tif (bot.getFilIdAvatar() != null) {\n-\t\t\tmediaFileInfoDAO.delete(bot.getFilIdAvatar());\n-\t\t}\n-\t}\n-\n-}"
  },
  {
    "sha": "467debac7d0060c4a8975b58139c93020239e093",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/BotListController.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/BotListController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/BotListController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/BotListController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -24,7 +24,7 @@\n import org.springframework.web.bind.annotation.RequestMapping;\r\n \r\n import io.vertigo.chatbot.commons.domain.Chatbot;\r\n-import io.vertigo.chatbot.designer.builder.services.DesignerServices;\r\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotServices;\r\n import io.vertigo.ui.core.ViewContext;\r\n import io.vertigo.ui.core.ViewContextKey;\r\n import io.vertigo.ui.impl.springmvc.controller.AbstractVSpringMvcController;\r\n@@ -36,7 +36,7 @@\n \tprivate static final ViewContextKey<Chatbot> botsKey = ViewContextKey.of(\"bots\");\r\n \r\n \t@Inject\r\n-\tprivate DesignerServices chatbotServices;\r\n+\tprivate ChatbotServices chatbotServices;\r\n \r\n \t@GetMapping(\"/\")\r\n \tpublic void initContext(final ViewContext viewContext) {\r"
  },
  {
    "sha": "1ce05f6d22743afe425d99b271bec13379fb8a42",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/AbstractCommonBotController.java",
    "status": "renamed",
    "additions": 51,
    "deletions": 70,
    "changes": 121,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/AbstractCommonBotController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/AbstractCommonBotController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/AbstractCommonBotController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -1,70 +1,51 @@\n-/**\r\n- * vertigo - simple java starter\r\n- *\r\n- * Copyright (C) 2020, Vertigo.io, team@vertigo.io\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package io.vertigo.chatbot.designer.builder.controllers.bot;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.inject.Inject;\r\n-\r\n-import org.springframework.stereotype.Controller;\r\n-import org.springframework.web.bind.annotation.GetMapping;\r\n-import org.springframework.web.bind.annotation.PathVariable;\r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-\r\n-import io.vertigo.account.authorization.AuthorizationManager;\r\n-import io.vertigo.chatbot.commons.domain.Chatbot;\r\n-import io.vertigo.chatbot.designer.builder.services.DesignerServices;\r\n-import io.vertigo.datastore.filestore.model.VFile;\r\n-import io.vertigo.ui.core.ViewContext;\r\n-import io.vertigo.ui.core.ViewContextKey;\r\n-\r\n-@Controller\r\n-@RequestMapping(\"/bot/\")\r\n-public class CommonBotDetailController {\r\n-\r\n-\t@Inject\r\n-\tprivate DesignerServices designerServices;\r\n-\t@Inject\r\n-\tprivate AuthorizationManager authorizationManager;\r\n-\r\n-\tprivate static final ViewContextKey<String[]> chatBotAuthorizedOperationsKey = ViewContextKey.of(\"chatBotAuthorizedOperations\");\r\n-\tprivate static final ViewContextKey<Chatbot> botKey = ViewContextKey.of(\"bot\");\r\n-\r\n-\tpublic Chatbot initCommonContext(final ViewContext viewContext, final Long botId) {\r\n-\t\tfinal Chatbot chatbot = designerServices.getChatbotById(botId);\r\n-\t\tviewContext.publishDto(botKey, chatbot);\r\n-\t\tfinal List<String> authorizedOperations = authorizationManager.getAuthorizedOperations(chatbot);\r\n-\t\tviewContext.publishRef(chatBotAuthorizedOperationsKey, authorizedOperations.toArray(new String[authorizedOperations.size()]));\r\n-\t\treturn chatbot;\r\n-\t}\r\n-\r\n-\tpublic void initEmptyCommonContext(final ViewContext viewContext) {\r\n-\t\tviewContext.publishDto(botKey, designerServices.getNewChatbot());\r\n-\t}\r\n-\r\n-\t@GetMapping(\"/{botId}/avatar\")\r\n-\tpublic VFile getAvatar(@PathVariable(\"botId\") final Long botId) {\r\n-\t\treturn designerServices.getAvatar(designerServices.getChatbotById(botId));\r\n-\t}\r\n-\r\n-\t@GetMapping(\"/avatar\")\r\n-\tpublic VFile getAvatar() {\r\n-\t\treturn designerServices.getNoAvatar();\r\n-\t}\r\n-\r\n-}\r\n+package io.vertigo.chatbot.designer.builder.controllers.bot;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+\n+import io.vertigo.account.authorization.AuthorizationManager;\n+import io.vertigo.chatbot.commons.domain.Chatbot;\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotServices;\n+import io.vertigo.datastore.filestore.model.VFile;\n+import io.vertigo.ui.core.ViewContext;\n+import io.vertigo.ui.core.ViewContextKey;\n+import io.vertigo.ui.impl.springmvc.controller.AbstractVSpringMvcController;\n+\n+public class AbstractCommonBotController extends AbstractVSpringMvcController {\n+\n+\t@Inject\n+\tprivate ChatbotServices chatbotServices;\n+\t@Inject\n+\tprivate AuthorizationManager authorizationManager;\n+\n+\tprivate static final ViewContextKey<String[]> chatBotAuthorizedOperationsKey = ViewContextKey.of(\"chatBotAuthorizedOperations\");\n+\tprivate static final ViewContextKey<Chatbot> botKey = ViewContextKey.of(\"bot\");\n+\n+\tpublic Chatbot initCommonContext(final ViewContext viewContext, final Long botId) {\n+\t\tfinal Chatbot chatbot = chatbotServices.getChatbotById(botId);\n+\t\tviewContext.publishDto(botKey, chatbot);\n+\t\tfinal List<String> authorizedOperations = authorizationManager.getAuthorizedOperations(chatbot);\n+\t\tviewContext.publishRef(chatBotAuthorizedOperationsKey, authorizedOperations.toArray(new String[authorizedOperations.size()]));\n+\t\treturn chatbot;\n+\t}\n+\n+\tpublic void initEmptyCommonContext(final ViewContext viewContext) {\n+\t\tviewContext.publishRef(chatBotAuthorizedOperationsKey, new String[0]);\n+\t\tviewContext.publishDto(botKey, chatbotServices.getNewChatbot());\n+\t}\n+\n+\t@GetMapping(\"/{botId}/avatar\")\n+\tpublic VFile getAvatar(@PathVariable(\"botId\") final Long botId) {\n+\t\treturn chatbotServices.getAvatar(chatbotServices.getChatbotById(botId));\n+\t}\n+\n+\t@GetMapping(\"/avatar\")\n+\tpublic VFile getAvatar() {\n+\t\treturn chatbotServices.getNoAvatar();\n+\t}\n+\n+}",
    "previous_filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/CommonBotDetailController.java"
  },
  {
    "sha": "9915fac459e0a95715c6d553514cc51c11bc87e8",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/BotDetailController.java",
    "status": "modified",
    "additions": 18,
    "deletions": 13,
    "changes": 31,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/BotDetailController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/BotDetailController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/BotDetailController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -28,35 +28,36 @@\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestParam;\r\n \r\n+import io.vertigo.account.authorization.annotations.Secured;\r\n import io.vertigo.chatbot.commons.ChatbotUtils;\r\n import io.vertigo.chatbot.commons.domain.Chatbot;\r\n import io.vertigo.chatbot.commons.domain.ChatbotNode;\r\n import io.vertigo.chatbot.commons.domain.ResponseButton;\r\n import io.vertigo.chatbot.commons.domain.SmallTalk;\r\n import io.vertigo.chatbot.commons.domain.UtterText;\r\n-import io.vertigo.chatbot.designer.builder.chatbot.services.ChatbotServicesImpl;\r\n import io.vertigo.chatbot.designer.builder.services.DesignerServices;\r\n+import io.vertigo.chatbot.designer.builder.services.NodeServices;\r\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotServices;\r\n import io.vertigo.datamodel.structure.model.DtList;\r\n import io.vertigo.datastore.filestore.model.FileInfoURI;\r\n import io.vertigo.ui.core.ViewContext;\r\n import io.vertigo.ui.core.ViewContextKey;\r\n import io.vertigo.ui.impl.springmvc.argumentresolvers.ViewAttribute;\r\n-import io.vertigo.ui.impl.springmvc.controller.AbstractVSpringMvcController;\r\n import io.vertigo.vega.webservice.stereotype.QueryParam;\r\n import io.vertigo.vega.webservice.validation.UiMessageStack;\r\n \r\n @Controller\r\n @RequestMapping(\"/bot\")\r\n-public class BotDetailController extends AbstractVSpringMvcController {\r\n+public class BotDetailController extends AbstractCommonBotController {\r\n \r\n \t@Inject\r\n \tprivate DesignerServices designerServices;\r\n \r\n \t@Inject\r\n-\tprivate CommonBotDetailController commonBotDetailController;\r\n+\tprivate NodeServices nodeServices;\r\n \r\n \t@Inject\r\n-\tprivate ChatbotServicesImpl chatbotServices;\r\n+\tprivate ChatbotServices chatbotServices;\r\n \r\n \tprivate static final ViewContextKey<UtterText> defaultKey = ViewContextKey.of(\"default\");\r\n \tprivate static final ViewContextKey<ResponseButton> defaultButtonsKey = ViewContextKey.of(\"defaultButtons\");\r\n@@ -72,7 +73,7 @@\n \r\n \t@GetMapping(\"/{botId}\")\r\n \tpublic void initContext(final ViewContext viewContext, @PathVariable(\"botId\") final Long botId) {\r\n-\t\tfinal Chatbot bot = commonBotDetailController.initCommonContext(viewContext, botId);\r\n+\t\tfinal Chatbot bot = initCommonContext(viewContext, botId);\r\n \r\n \t\tviewContext.publishDto(defaultKey, designerServices.getDefaultTextByBot(bot));\r\n \t\tviewContext.publishDto(welcomeKey, designerServices.getWelcomeTextByBot(bot));\r\n@@ -81,7 +82,7 @@ public void initContext(final ViewContext viewContext, @PathVariable(\"botId\") fi\n \t\tviewContext.publishDtListModifiable(welcomeButtonsKey, designerServices.getWelcomeButtonsByBot(bot));\r\n \t\tviewContext.publishDtList(smallTalkKey, designerServices.getAllSmallTalksByBotId(botId));\r\n \r\n-\t\tviewContext.publishDtList(nodeListKey, designerServices.getAllNodesByBotId(botId));\r\n+\t\tviewContext.publishDtList(nodeListKey, nodeServices.getNodesByBotId(botId));\r\n \r\n \t\tviewContext.publishRef(deletePopinKey, false);\r\n \t\tinitNodeEdit(viewContext);\r\n@@ -100,7 +101,7 @@ private void initNodeEdit(final ViewContext viewContext) {\n \r\n \t@GetMapping(\"/new\")\r\n \tpublic void initContext(final ViewContext viewContext) {\r\n-\t\tcommonBotDetailController.initEmptyCommonContext(viewContext);\r\n+\t\tinitEmptyCommonContext(viewContext);\r\n \r\n \t\tfinal UtterText newDefault = new UtterText();\r\n \t\tnewDefault.setText(\"Sorry, I don't understand.\");\r\n@@ -126,12 +127,14 @@ public void doEdit() {\n \t}\r\n \r\n \t@PostMapping(\"/_delete\")\r\n+\t@Secured(\"BotUser\")\r\n \tpublic String doDelete(final ViewContext viewContext, @ViewAttribute(\"bot\") final Chatbot bot) {\r\n \t\tchatbotServices.deleteChatbot(bot);\r\n \t\treturn \"redirect:/bots/\";\r\n \t}\r\n \r\n \t@PostMapping(\"/_save\")\r\n+\t@Secured(\"BotUser\")\r\n \tpublic String doSave(final ViewContext viewContext, final UiMessageStack uiMessageStack,\r\n \t\t\t@ViewAttribute(\"bot\") final Chatbot bot,\r\n \t\t\t@QueryParam(\"botTmpPictureUri\") final Optional<FileInfoURI> personPictureFile,\r\n@@ -142,34 +145,36 @@ public String doSave(final ViewContext viewContext, final UiMessageStack uiMessa\n \t\tfinal DtList<ResponseButton> welcomeButtons = ChatbotUtils\r\n \t\t\t\t.getRawDtList(viewContext.getUiListModifiable(welcomeButtonsKey), uiMessageStack);\r\n \r\n-\t\tfinal Chatbot savedChatbot = designerServices.saveChatbot(bot, personPictureFile, defaultText, defaultButtons,\r\n+\t\tfinal Chatbot savedChatbot = chatbotServices.saveChatbot(bot, personPictureFile, defaultText, defaultButtons,\r\n \t\t\t\twelcome, welcomeButtons);\r\n \r\n \t\treturn \"redirect:/bot/\" + savedChatbot.getBotId();\r\n \t}\r\n \r\n \t@PostMapping(\"/_saveNode\")\r\n+\t@Secured(\"SuperAdmin\")\r\n \tpublic ViewContext doSaveNode(final ViewContext viewContext, @ViewAttribute(\"bot\") final Chatbot bot,\r\n \t\t\t@ViewAttribute(\"nodeEdit\") final ChatbotNode nodeEdit) {\r\n \r\n \t\tnodeEdit.setBotId(bot.getBotId());\r\n \r\n-\t\tdesignerServices.saveNode(nodeEdit);\r\n+\t\tnodeServices.saveNode(nodeEdit);\r\n \r\n-\t\tviewContext.publishDtList(nodeListKey, designerServices.getAllNodesByBotId(bot.getBotId()));\r\n+\t\tviewContext.publishDtList(nodeListKey, nodeServices.getNodesByBot(bot));\r\n \t\tviewContext.publishDto(nodeEditKey, new ChatbotNode()); // reset nodeEdit so previous values are not used for\r\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// subsequent requests\r\n \r\n \t\treturn viewContext;\r\n \t}\r\n \r\n \t@PostMapping(\"/_deleteNode\")\r\n+\t@Secured(\"SuperAdmin\")\r\n \tpublic ViewContext doDeleteNode(final ViewContext viewContext, @ViewAttribute(\"bot\") final Chatbot bot,\r\n \t\t\t@RequestParam(\"nodId\") final Long nodId) {\r\n \r\n-\t\tdesignerServices.deleteNode(nodId);\r\n+\t\tnodeServices.deleteNode(nodId);\r\n \r\n-\t\tviewContext.publishDtList(nodeListKey, designerServices.getAllNodesByBotId(bot.getBotId()));\r\n+\t\tviewContext.publishDtList(nodeListKey, nodeServices.getNodesByBot(bot));\r\n \r\n \t\treturn viewContext;\r\n \t}\r"
  },
  {
    "sha": "9feb79d080d74098ddb2d733136b082ea2bbeb8f",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/CommonBotHeaderController.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/CommonBotHeaderController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/CommonBotHeaderController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/CommonBotHeaderController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,47 @@\n+/**\r\n+ * vertigo - simple java starter\r\n+ *\r\n+ * Copyright (C) 2020, Vertigo.io, team@vertigo.io\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package io.vertigo.chatbot.designer.builder.controllers.bot;\r\n+\r\n+import javax.inject.Inject;\r\n+\r\n+import org.springframework.stereotype.Controller;\r\n+import org.springframework.web.bind.annotation.GetMapping;\r\n+import org.springframework.web.bind.annotation.PathVariable;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+\r\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotServices;\r\n+import io.vertigo.datastore.filestore.model.VFile;\r\n+\r\n+@Controller\r\n+@RequestMapping(\"/botHeader/\")\r\n+public class CommonBotHeaderController {\r\n+\r\n+\t@Inject\r\n+\tprivate ChatbotServices chatbotServices;\r\n+\r\n+\t@GetMapping(\"/{botId}/avatar\")\r\n+\tpublic VFile getAvatar(@PathVariable(\"botId\") final Long botId) {\r\n+\t\treturn chatbotServices.getAvatar(chatbotServices.getChatbotById(botId));\r\n+\t}\r\n+\r\n+\t@GetMapping(\"/avatar\")\r\n+\tpublic VFile getAvatar() {\r\n+\t\treturn chatbotServices.getNoAvatar();\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "a742f688bf1ac5f3b5f5f981bf330a5359d0a53a",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/ModelListController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 9,
    "changes": 16,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/ModelListController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/ModelListController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/ModelListController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -28,24 +28,25 @@\n import org.springframework.web.bind.annotation.RequestParam;\r\n import org.springframework.web.bind.annotation.ResponseBody;\r\n \r\n+import io.vertigo.account.authorization.annotations.Secured;\r\n import io.vertigo.chatbot.commons.ChatbotUtils;\r\n import io.vertigo.chatbot.commons.domain.Chatbot;\r\n import io.vertigo.chatbot.commons.domain.ChatbotNode;\r\n import io.vertigo.chatbot.commons.domain.RunnerInfo;\r\n import io.vertigo.chatbot.commons.domain.TrainerInfo;\r\n import io.vertigo.chatbot.commons.domain.Training;\r\n-import io.vertigo.chatbot.designer.builder.services.DesignerServices;\r\n+import io.vertigo.chatbot.designer.builder.services.NodeServices;\r\n import io.vertigo.chatbot.designer.builder.services.TrainingServices;\r\n import io.vertigo.core.lang.VUserException;\r\n import io.vertigo.datamodel.structure.model.DtList;\r\n import io.vertigo.ui.core.ViewContext;\r\n import io.vertigo.ui.core.ViewContextKey;\r\n import io.vertigo.ui.impl.springmvc.argumentresolvers.ViewAttribute;\r\n-import io.vertigo.ui.impl.springmvc.controller.AbstractVSpringMvcController;\r\n \r\n @Controller\r\n @RequestMapping(\"/bot/{botId}/models\")\r\n-public class ModelListController extends AbstractVSpringMvcController {\r\n+@Secured(\"BotUser\")\r\n+public class ModelListController extends AbstractCommonBotController {\r\n \r\n \tprivate static final ViewContextKey<RunnerInfo> runnerStateKey = ViewContextKey.of(\"runnerState\");\r\n \tprivate static final ViewContextKey<TrainerInfo> trainerStateKey = ViewContextKey.of(\"trainerState\");\r\n@@ -56,18 +57,15 @@\n \r\n \tprivate static final ViewContextKey<ChatbotNode> nodeListKey = ViewContextKey.of(\"nodeList\");\r\n \r\n-\t@Inject\r\n-\tprivate DesignerServices designerServices;\r\n-\r\n \t@Inject\r\n \tprivate TrainingServices trainingServices;\r\n \r\n \t@Inject\r\n-\tprivate CommonBotDetailController commonBotDetailController;\r\n+\tprivate NodeServices nodeServices;\r\n \r\n \t@GetMapping(\"/\")\r\n \tpublic void initContext(final ViewContext viewContext, @PathVariable(\"botId\") final Long botId) {\r\n-\t\tfinal Chatbot bot = commonBotDetailController.initCommonContext(viewContext, botId);\r\n+\t\tfinal Chatbot bot = initCommonContext(viewContext, botId);\r\n \r\n \t\tviewContext.publishRef(autoscrollKey, Boolean.TRUE);\r\n \r\n@@ -98,7 +96,7 @@ public ViewContext refreshTrainerState(final ViewContext viewContext, @ViewAttri\n \tpublic ViewContext refreshTrainings(final ViewContext viewContext, @ViewAttribute(\"bot\") final Chatbot bot) {\r\n \t\tviewContext.publishDtList(trainingListKey, trainingServices.getAllTrainings(bot.getBotId()));\r\n \r\n-\t\tviewContext.publishDtList(nodeListKey, designerServices.getAllNodesByBotId(bot.getBotId()));\r\n+\t\tviewContext.publishDtList(nodeListKey, nodeServices.getNodesByBot(bot));\r\n \r\n \t\treturn viewContext;\r\n \t}\r"
  },
  {
    "sha": "455670ac65c9f0a9b16b028c4ca930d67e013c37",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/PersonChatbotDetailController.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/PersonChatbotDetailController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/PersonChatbotDetailController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/PersonChatbotDetailController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,71 @@\n+package io.vertigo.chatbot.designer.builder.controllers.bot;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import io.vertigo.account.authorization.annotations.Secured;\n+import io.vertigo.chatbot.commons.domain.Chatbot;\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotProfilServices;\n+import io.vertigo.chatbot.designer.domain.admin.ChatbotProfiles;\n+import io.vertigo.chatbot.designer.domain.admin.PersonChatbotProfil;\n+import io.vertigo.chatbot.designer.domain.admin.SelectProfilChatbotPerson;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n+import io.vertigo.core.lang.VSystemException;\n+import io.vertigo.datamodel.structure.model.DtList;\n+import io.vertigo.ui.core.ViewContext;\n+import io.vertigo.ui.core.ViewContextKey;\n+import io.vertigo.ui.impl.springmvc.argumentresolvers.ViewAttribute;\n+\n+@Controller\n+@RequestMapping(\"/bot/{botId}/personChatbot\")\n+@Secured(\"BotUser\")\n+public class PersonChatbotDetailController extends AbstractCommonBotController {\n+\n+\t// for all users\n+\tprivate static final ViewContextKey<Person> personsListKey = ViewContextKey.of(\"personList\");\n+\t// All the profils of chatbot\n+\tprivate static final ViewContextKey<PersonChatbotProfil> personsProfilListKey = ViewContextKey.of(\"personProfilList\");\n+\t// All persons with profil on the chatbot\n+\tprivate static final ViewContextKey<ChatbotProfiles> chatbotProfilList = ViewContextKey.of(\"chatbotProfilesList\");\n+\t// return of the select\n+\tprivate static final ViewContextKey<SelectProfilChatbotPerson> selectionList = ViewContextKey.of(\"selectionList\");\n+\n+\t@Inject\n+\tprivate ChatbotProfilServices chatbotProfilServices;\n+\n+\t@GetMapping(\"/\")\n+\tpublic void initContext(final ViewContext viewContext, @PathVariable(\"botId\") final Long botId) {\n+\t\tfinal Chatbot chatbot = initCommonContext(viewContext, botId);\n+\t\tviewContext.publishDtListModifiable(personsProfilListKey, chatbotProfilServices.getPersonProfilIHMbyChatbotId(chatbot));\n+\t\tviewContext.publishMdl(chatbotProfilList, ChatbotProfiles.class, null);\n+\t\tviewContext.publishDtListModifiable(personsListKey, chatbotProfilServices.getAllUsers(chatbot));\n+\t\tviewContext.publishDto(selectionList, new SelectProfilChatbotPerson());\n+\t\ttoModeReadOnly();\n+\t}\n+\n+\t@PostMapping(\"/_addUsers\")\n+\tpublic void addUsersToProfil(final ViewContext viewContext, @ViewAttribute(\"selectionList\") final SelectProfilChatbotPerson selection, @ViewAttribute(\"bot\") final Chatbot chatbot) {\n+\t\tfinal DtList<PersonChatbotProfil> newList = chatbotProfilServices.updateChatbotProfils(selection.getPrfId(), selection.getPerId(), chatbot);\n+\t\tviewContext.publishDtListModifiable(personsProfilListKey, newList);\n+\t\tviewContext.publishDto(selectionList, new SelectProfilChatbotPerson());\n+\t}\n+\n+\t@PostMapping(\"/_delete\")\n+\tpublic ViewContext deleteUser(final ViewContext viewContext, @ViewAttribute(\"personProfilList\") final DtList<PersonChatbotProfil> persons,\n+\t\t\t@RequestParam(\"rowId\") final Long chpId, @ViewAttribute(\"bot\") final Chatbot bot) {\n+\t\tfinal PersonChatbotProfil persToDelete = persons.stream()\n+\t\t\t\t.filter(pers -> pers.getChpId().equals(chpId))\n+\t\t\t\t.findFirst().orElseThrow(() -> new VSystemException(\"the person and profil was not found\"));\n+\t\tchatbotProfilServices.deleteProfilForChatbot(bot, persToDelete);\n+\t\tpersons.remove(persToDelete);\n+\t\tviewContext.publishDtListModifiable(personsProfilListKey, persons);\n+\t\treturn viewContext;\n+\t}\n+\n+}"
  },
  {
    "sha": "18960b6bcdd40bd87afa36f19cc5d2ffe8d7b2cc",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkDetailController.java",
    "status": "modified",
    "additions": 5,
    "deletions": 10,
    "changes": 15,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkDetailController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkDetailController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkDetailController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -26,6 +26,7 @@\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestParam;\r\n \r\n+import io.vertigo.account.authorization.annotations.Secured;\r\n import io.vertigo.chatbot.commons.ChatbotUtils;\r\n import io.vertigo.chatbot.commons.domain.NluTrainingSentence;\r\n import io.vertigo.chatbot.commons.domain.ResponseButton;\r\n@@ -40,12 +41,12 @@\n import io.vertigo.ui.core.ViewContext;\r\n import io.vertigo.ui.core.ViewContextKey;\r\n import io.vertigo.ui.impl.springmvc.argumentresolvers.ViewAttribute;\r\n-import io.vertigo.ui.impl.springmvc.controller.AbstractVSpringMvcController;\r\n import io.vertigo.vega.webservice.validation.UiMessageStack;\r\n \r\n @Controller\r\n @RequestMapping(\"/bot/{botId}/smallTalk\")\r\n-public class SmallTalkDetailController extends AbstractVSpringMvcController {\r\n+@Secured(\"BotUser\")\r\n+public class SmallTalkDetailController extends AbstractCommonBotController {\r\n \r\n \tprivate static final ViewContextKey<SmallTalk> smallTalkKey = ViewContextKey.of(\"smallTalk\");\r\n \r\n@@ -65,13 +66,11 @@\n \t@Inject\r\n \tprivate DesignerServices designerServices;\r\n \r\n-\t@Inject\r\n-\tprivate CommonBotDetailController commonBotDetailController;\r\n-\r\n \t@GetMapping(\"/{intId}\")\r\n \tpublic void initContext(final ViewContext viewContext, @PathVariable(\"botId\") final Long botId,\r\n \t\t\t@PathVariable(\"intId\") final Long intId) {\r\n \t\tinitCommonContext(viewContext, botId);\r\n+\t\tviewContext.publishMdl(responseTypeKey, ResponseType.class, null); // all\r\n \r\n \t\tfinal SmallTalk smallTalk = designerServices.getSmallTalkById(intId);\r\n \r\n@@ -98,6 +97,7 @@ public void initContext(final ViewContext viewContext, @PathVariable(\"botId\") fi\n \t@GetMapping(\"/new\")\r\n \tpublic void initContext(final ViewContext viewContext, @PathVariable(\"botId\") final Long botId) {\r\n \t\tinitCommonContext(viewContext, botId);\r\n+\t\tviewContext.publishMdl(responseTypeKey, ResponseType.class, null); // all\r\n \r\n \t\tviewContext.publishDto(smallTalkKey, designerServices.getNewSmallTalk(botId));\r\n \r\n@@ -117,11 +117,6 @@ public void initContext(final ViewContext viewContext, @PathVariable(\"botId\") fi\n \t\ttoModeCreate();\r\n \t}\r\n \r\n-\tprivate void initCommonContext(final ViewContext viewContext, final Long botId) {\r\n-\t\tcommonBotDetailController.initCommonContext(viewContext, botId);\r\n-\t\tviewContext.publishMdl(responseTypeKey, ResponseType.class, null); // all\r\n-\t}\r\n-\r\n \t@PostMapping(\"/_edit\")\r\n \tpublic void doEdit() {\r\n \t\ttoModeEdit();\r"
  },
  {
    "sha": "8ed2430c5ffac82ac7ead3ded1a737128f80be0a",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkListController.java",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkListController.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkListController.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/controllers/bot/SmallTalkListController.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -24,28 +24,25 @@\n import org.springframework.web.bind.annotation.PathVariable;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n \r\n+import io.vertigo.account.authorization.annotations.Secured;\r\n import io.vertigo.chatbot.commons.domain.SmallTalk;\r\n import io.vertigo.chatbot.designer.builder.services.DesignerServices;\r\n import io.vertigo.ui.core.ViewContext;\r\n import io.vertigo.ui.core.ViewContextKey;\r\n-import io.vertigo.ui.impl.springmvc.controller.AbstractVSpringMvcController;\r\n \r\n @Controller\r\n @RequestMapping(\"/bot/{botId}/smallTalks\")\r\n-public class SmallTalkListController extends AbstractVSpringMvcController {\r\n+@Secured(\"BotUser\")\r\n+public class SmallTalkListController extends AbstractCommonBotController {\r\n \r\n \tprivate static final ViewContextKey<SmallTalk> smallTalkKey = ViewContextKey.of(\"smallTalks\");\r\n-\t//\tprivate static final ViewContextKey<Long> botIdKey = ViewContextKey.of(\"botId\");\r\n \r\n \t@Inject\r\n \tprivate DesignerServices designerServices;\r\n \r\n-\t@Inject\r\n-\tprivate CommonBotDetailController commonBotDetailController;\r\n-\r\n \t@GetMapping(\"/\")\r\n \tpublic void initContext(final ViewContext viewContext, @PathVariable(\"botId\") final Long botId) {\r\n-\t\tcommonBotDetailController.initCommonContext(viewContext, botId);\r\n+\t\tinitCommonContext(viewContext, botId);\r\n \r\n \t\tviewContext.publishDtList(smallTalkKey, designerServices.getAllSmallTalksByBotId(botId));\r\n \t\t//\t\tviewContext.publishRef(botIdKey, botId);\r"
  },
  {
    "sha": "303ce0545eb5bcf312cfbeb1e942a0653886ead4",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/DesignerServices.java",
    "status": "modified",
    "additions": 1,
    "deletions": 175,
    "changes": 176,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/DesignerServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/DesignerServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/DesignerServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -17,8 +17,6 @@\n  */\r\n package io.vertigo.chatbot.designer.builder.services;\r\n \r\n-import java.time.LocalDate;\r\n-import java.util.Optional;\r\n import java.util.stream.Stream;\r\n \r\n import javax.inject.Inject;\r\n@@ -27,58 +25,35 @@\n import org.owasp.html.PolicyFactory;\r\n import org.owasp.html.Sanitizers;\r\n \r\n-import io.vertigo.account.authorization.AuthorizationManager;\r\n-import io.vertigo.account.authorization.VSecurityException;\r\n import io.vertigo.account.authorization.annotations.Secured;\r\n-import io.vertigo.account.authorization.annotations.SecuredOperation;\r\n-import io.vertigo.account.security.VSecurityManager;\r\n-import io.vertigo.chatbot.authorization.GlobalAuthorizations;\r\n-import io.vertigo.chatbot.authorization.SecuredEntities.ChatbotOperations;\r\n-import io.vertigo.chatbot.commons.dao.ChatbotDAO;\r\n-import io.vertigo.chatbot.commons.dao.ChatbotNodeDAO;\r\n import io.vertigo.chatbot.commons.dao.NluTrainingSentenceDAO;\r\n import io.vertigo.chatbot.commons.dao.ResponseButtonDAO;\r\n import io.vertigo.chatbot.commons.dao.SmallTalkDAO;\r\n import io.vertigo.chatbot.commons.dao.UtterTextDAO;\r\n import io.vertigo.chatbot.commons.domain.Chatbot;\r\n-import io.vertigo.chatbot.commons.domain.ChatbotNode;\r\n import io.vertigo.chatbot.commons.domain.NluTrainingSentence;\r\n import io.vertigo.chatbot.commons.domain.ResponseButton;\r\n import io.vertigo.chatbot.commons.domain.ResponseTypeEnum;\r\n import io.vertigo.chatbot.commons.domain.SmallTalk;\r\n import io.vertigo.chatbot.commons.domain.UtterText;\r\n import io.vertigo.chatbot.designer.builder.BuilderPAO;\r\n-import io.vertigo.chatbot.designer.commons.DesignerUserSession;\r\n-import io.vertigo.chatbot.designer.commons.services.FileServices;\r\n-import io.vertigo.chatbot.domain.DtDefinitions.ChatbotNodeFields;\r\n import io.vertigo.chatbot.domain.DtDefinitions.NluTrainingSentenceFields;\r\n import io.vertigo.chatbot.domain.DtDefinitions.ResponseButtonFields;\r\n import io.vertigo.chatbot.domain.DtDefinitions.SmallTalkFields;\r\n import io.vertigo.chatbot.domain.DtDefinitions.UtterTextFields;\r\n import io.vertigo.commons.transaction.Transactional;\r\n import io.vertigo.core.lang.Assertion;\r\n-import io.vertigo.core.locale.MessageText;\r\n import io.vertigo.core.node.component.Component;\r\n import io.vertigo.core.util.StringUtil;\r\n import io.vertigo.datamodel.criteria.Criterions;\r\n import io.vertigo.datamodel.structure.model.DtList;\r\n import io.vertigo.datamodel.structure.model.DtListState;\r\n import io.vertigo.datamodel.structure.util.VCollectors;\r\n-import io.vertigo.datastore.filestore.model.FileInfoURI;\r\n-import io.vertigo.datastore.filestore.model.VFile;\r\n-import io.vertigo.datastore.impl.entitystore.StoreListVAccessor;\r\n-import io.vertigo.datastore.impl.filestore.model.StreamFile;\r\n \r\n-@Secured(\"AdmBot\")\r\n+@Secured(\"BotUser\")\r\n @Transactional\r\n public class DesignerServices implements Component {\r\n \r\n-\t@Inject\r\n-\tprivate FileServices fileServices;\r\n-\r\n-\t@Inject\r\n-\tprivate ChatbotDAO chatbotDAO;\r\n-\r\n \t@Inject\r\n \tprivate SmallTalkDAO smallTalkDAO;\r\n \r\n@@ -91,62 +66,9 @@\n \t@Inject\r\n \tprivate UtterTextDAO utterTextDAO;\r\n \r\n-\t@Inject\r\n-\tprivate ChatbotNodeDAO chatbotNodeDAO;\r\n-\r\n \t@Inject\r\n \tprivate BuilderPAO builderPAO;\r\n \r\n-\t@Inject\r\n-\tprivate AuthorizationManager authorizationManager;\r\n-\r\n-\t@Inject\r\n-\tprivate VSecurityManager securityManager;\r\n-\r\n-\tpublic DtList<Chatbot> getMySupervisedChatbots() {\r\n-\t\tif (authorizationManager.hasAuthorization(GlobalAuthorizations.AtzSuperAdmBot)) {\r\n-\t\t\treturn getAllChatbots();\r\n-\t\t}\r\n-\t\tfinal StoreListVAccessor<Chatbot> chatbotLoader = getUserSession().getLoggedPerson().chatbots();\r\n-\t\tchatbotLoader.load();\r\n-\t\treturn chatbotLoader.get();\r\n-\t}\r\n-\r\n-\t@Secured(\"SuperAdmBot\")\r\n-\tpublic DtList<Chatbot> getAllChatbots() {\r\n-\t\treturn chatbotDAO.findAll(Criterions.alwaysTrue(), DtListState.of(100));\r\n-\t}\r\n-\r\n-\t@Secured(\"SuperAdmBot\")\r\n-\tpublic Chatbot getNewChatbot() {\r\n-\t\tfinal Chatbot newChatbot = new Chatbot();\r\n-\t\tnewChatbot.setCreationDate(LocalDate.now());\r\n-\r\n-\t\treturn newChatbot;\r\n-\t}\r\n-\r\n-\tpublic Chatbot getChatbotById(final Long botId) {\r\n-\t\tAssertion.check().isNotNull(botId);\r\n-\t\t// ---\r\n-\t\tfinal Chatbot chatbot = chatbotDAO.get(botId);\r\n-\t\tcheckRights(chatbot, ChatbotOperations.read);\r\n-\t\treturn chatbot;\r\n-\t}\r\n-\r\n-\tpublic VFile getAvatar(final Chatbot bot) {\r\n-\t\tif (bot.getFilIdAvatar() == null) {\r\n-\t\t\treturn getNoAvatar();\r\n-\t\t}\r\n-\t\treturn fileServices.getFile(bot.getFilIdAvatar());\r\n-\t}\r\n-\r\n-\tpublic VFile getNoAvatar() {\r\n-\t\treturn StreamFile.of(\r\n-\t\t\t\t\"noAvatar.png\",\r\n-\t\t\t\t\"image/png\",\r\n-\t\t\t\tDesignerServices.class.getResource(\"/noAvatar.png\"));\r\n-\t}\r\n-\r\n \tpublic UtterText getDefaultTextByBot(final Chatbot bot) {\r\n \t\tAssertion.check().isNotNull(bot);\r\n \t\t// ---\r\n@@ -159,62 +81,6 @@ public UtterText getWelcomeTextByBot(final Chatbot bot) {\n \t\treturn utterTextDAO.get(bot.getUttIdWelcome());\r\n \t}\r\n \r\n-\tpublic Chatbot saveChatbot(@SecuredOperation(\"write\") final Chatbot chatbot, final Optional<FileInfoURI> personPictureFile,\r\n-\t\t\tfinal UtterText defaultText, final DtList<ResponseButton> defaultButtons,\r\n-\t\t\tfinal UtterText welcomeText, final DtList<ResponseButton> welcomeButtons) {\r\n-\r\n-\t\tAssertion.check().isNotNull(chatbot);\r\n-\t\tAssertion.check().isNotNull(defaultText);\r\n-\t\tAssertion.check().isNotNull(defaultButtons);\r\n-\t\tAssertion.check().isNotNull(welcomeText);\r\n-\t\tAssertion.check().isNotNull(welcomeButtons);\r\n-\t\t// ---\r\n-\r\n-\t\t// default text\r\n-\t\tutterTextDAO.save(defaultText);\r\n-\t\tchatbot.setUttIdDefault(defaultText.getUttId());\r\n-\r\n-\t\t// welcome\r\n-\t\tutterTextDAO.save(welcomeText);\r\n-\t\tchatbot.setUttIdWelcome(welcomeText.getUttId());\r\n-\r\n-\t\t// Avatar\r\n-\t\tLong oldAvatar = null;\r\n-\t\tif (personPictureFile.isPresent()) {\r\n-\t\t\toldAvatar = chatbot.getFilIdAvatar();\r\n-\t\t\tfinal VFile fileTmp = fileServices.getFileTmp(personPictureFile.get());\r\n-\t\t\tfinal FileInfoURI fileInfoUri = fileServices.saveFile(fileTmp);\r\n-\t\t\tchatbot.setFilIdAvatar((Long) fileInfoUri.getKey());\r\n-\t\t}\r\n-\r\n-\t\t// chatbot save\r\n-\t\tchatbot.setStatus(\"OK\");\r\n-\t\tfinal Chatbot savedChatbot = chatbotDAO.save(chatbot);\r\n-\r\n-\t\t// clean old avatar\r\n-\t\tif (oldAvatar != null) {\r\n-\t\t\tfileServices.deleteFile(oldAvatar);\r\n-\t\t}\r\n-\r\n-\t\t// clear old buttons\r\n-\t\tbuilderPAO.removeAllButtonsByBotId(chatbot.getBotId());\r\n-\r\n-\t\t// save new buttons\r\n-\t\tfor (final ResponseButton btn : defaultButtons) {\r\n-\t\t\tbtn.setBtnId(null); // force creation\r\n-\t\t\tbtn.setBotIdDefault(chatbot.getBotId());\r\n-\t\t\tresponseButtonDAO.save(btn);\r\n-\t\t}\r\n-\r\n-\t\tfor (final ResponseButton btn : welcomeButtons) {\r\n-\t\t\tbtn.setBtnId(null); // force creation\r\n-\t\t\tbtn.setBotIdWelcome(chatbot.getBotId());\r\n-\t\t\tresponseButtonDAO.save(btn);\r\n-\t\t}\r\n-\r\n-\t\treturn savedChatbot;\r\n-\t}\r\n-\r\n \tpublic SmallTalk getSmallTalkById(final Long movId) {\r\n \t\tAssertion.check().isNotNull(movId);\r\n \t\t// ---\r\n@@ -409,44 +275,4 @@ public void deleteSmallTalk(final SmallTalk smallTalk) {\n \t\t\t\tDtListState.of(1000, 0, ResponseButtonFields.btnId.name(), false));\r\n \t}\r\n \r\n-\tpublic DtList<ChatbotNode> getAllNodesByBotId(final Long botId) {\r\n-\t\treturn chatbotNodeDAO.findAll(Criterions.isEqualTo(ChatbotNodeFields.botId, botId), DtListState.of(100));\r\n-\t}\r\n-\r\n-\tpublic Optional<ChatbotNode> getDevNodeByBotId(final Long botId) {\r\n-\t\treturn chatbotNodeDAO.findOptional(\r\n-\t\t\t\tCriterions.isEqualTo(ChatbotNodeFields.botId, botId)\r\n-\t\t\t\t\t\t.and(Criterions.isEqualTo(ChatbotNodeFields.isDev, true)));\r\n-\t}\r\n-\r\n-\tpublic void saveNode(final ChatbotNode node) {\r\n-\t\tif (node.getNodId() != null) {\r\n-\t\t\t// enforce previous values\r\n-\t\t\tfinal ChatbotNode previousValues = chatbotNodeDAO.get(node.getNodId());\r\n-\r\n-\t\t\tnode.setBotId(previousValues.getBotId());\r\n-\t\t\tnode.setTraId(previousValues.getTraId());\r\n-\t\t}\r\n-\r\n-\t\tif (Boolean.TRUE.equals(node.getIsDev())) {\r\n-\t\t\t// enforce only one dev node\r\n-\t\t\tbuilderPAO.resetDevNode(node.getBotId());\r\n-\t\t}\r\n-\r\n-\t\tchatbotNodeDAO.save(node);\r\n-\t}\r\n-\r\n-\tpublic void deleteNode(final Long nodId) {\r\n-\t\tchatbotNodeDAO.delete(nodId);\r\n-\t}\r\n-\r\n-\tprivate DesignerUserSession getUserSession() {\r\n-\t\treturn securityManager.<DesignerUserSession>getCurrentUserSession().get();\r\n-\t}\r\n-\r\n-\tprivate void checkRights(final Chatbot chatbot, final ChatbotOperations chatbotOperation) {\r\n-\t\tif (!authorizationManager.isAuthorized(chatbot, chatbotOperation)) {\r\n-\t\t\tthrow new VSecurityException(MessageText.of(\"Not enought authorizations\"));//no too sharp info here : may use log\r\n-\t\t}\r\n-\t}\r\n }\r"
  },
  {
    "sha": "0545e27c3caa5b6a96007c20dd9b19a115bb558f",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/NodeServices.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/NodeServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/NodeServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/NodeServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,86 @@\n+package io.vertigo.chatbot.designer.builder.services;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import io.vertigo.account.authorization.AuthorizationManager;\n+import io.vertigo.chatbot.authorization.SecuredEntities.ChatbotOperations;\n+import io.vertigo.chatbot.commons.dao.ChatbotNodeDAO;\n+import io.vertigo.chatbot.commons.domain.Chatbot;\n+import io.vertigo.chatbot.commons.domain.ChatbotNode;\n+import io.vertigo.chatbot.designer.builder.BuilderPAO;\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotServices;\n+import io.vertigo.chatbot.domain.DtDefinitions.ChatbotNodeFields;\n+import io.vertigo.commons.transaction.Transactional;\n+import io.vertigo.core.node.component.Component;\n+import io.vertigo.datamodel.criteria.Criterions;\n+import io.vertigo.datamodel.structure.model.DtList;\n+import io.vertigo.datamodel.structure.model.DtListState;\n+\n+@Transactional\n+public class NodeServices implements Component {\n+\n+\t@Inject\n+\tprivate BuilderPAO builderPAO;\n+\n+\t@Inject\n+\tprivate ChatbotNodeDAO chatbotNodeDAO;\n+\n+\t@Inject\n+\tprivate ChatbotServices chatbotServices;\n+\n+\t@Inject\n+\tprivate AuthorizationManager authorizationManager;\n+\n+\tpublic ChatbotNode getNodeByNodeId(final Long nodId) {\n+\t\treturn chatbotNodeDAO.get(nodId);\n+\t}\n+\n+\tpublic DtList<ChatbotNode> getAllNodesByBotId(final Long botId) {\n+\t\treturn chatbotNodeDAO.findAll(Criterions.isEqualTo(ChatbotNodeFields.botId, botId), DtListState.of(100));\n+\t}\n+\n+\tpublic Optional<ChatbotNode> getDevNodeByBotId(final Long botId) {\n+\t\treturn chatbotNodeDAO.findOptional(\n+\t\t\t\tCriterions.isEqualTo(ChatbotNodeFields.botId, botId)\n+\t\t\t\t\t\t.and(Criterions.isEqualTo(ChatbotNodeFields.isDev, true)));\n+\t}\n+\n+\tpublic void saveNode(final ChatbotNode node) {\n+\t\tif (node.getNodId() != null) {\n+\t\t\t// enforce previous values\n+\t\t\tfinal ChatbotNode previousValues = chatbotNodeDAO.get(node.getNodId());\n+\n+\t\t\tnode.setBotId(previousValues.getBotId());\n+\t\t\tnode.setTraId(previousValues.getTraId());\n+\t\t}\n+\n+\t\tif (Boolean.TRUE.equals(node.getIsDev())) {\n+\t\t\t// enforce only one dev node\n+\t\t\tbuilderPAO.resetDevNode(node.getBotId());\n+\t\t}\n+\n+\t\tchatbotNodeDAO.save(node);\n+\t}\n+\n+\tpublic void deleteNode(final Long nodId) {\n+\t\tchatbotNodeDAO.delete(nodId);\n+\t}\n+\n+\tpublic DtList<ChatbotNode> getNodesByBotId(final Long botId) {\n+\t\treturn getNodesByBot(chatbotServices.getChatbotById(botId));\n+\t}\n+\n+\tpublic DtList<ChatbotNode> getNodesByBot(final Chatbot chatbot) {\n+\t\tif (authorizationManager.isAuthorized(chatbot, ChatbotOperations.botAdm)) {\n+\t\t\treturn getAllNodesByBotId(chatbot.getBotId());\n+\t\t}\n+\t\tfinal DtList<ChatbotNode> nodes = new DtList<ChatbotNode>(ChatbotNode.class);\n+\t\tfinal Optional<ChatbotNode> devNode = getDevNodeByBotId(chatbot.getBotId());\n+\t\tif (devNode.isPresent()) {\n+\t\t\tnodes.add(devNode.get());\n+\t\t}\n+\t\treturn nodes;\n+\t}\n+}"
  },
  {
    "sha": "99fba10406baf917ec29d49dcb21527ff824dee2",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/TrainingServices.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/TrainingServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/TrainingServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/TrainingServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -57,6 +57,7 @@\n import io.vertigo.chatbot.commons.domain.Training;\r\n import io.vertigo.chatbot.commons.domain.UtterText;\r\n import io.vertigo.chatbot.designer.builder.BuilderPAO;\r\n+import io.vertigo.chatbot.designer.builder.services.bot.ChatbotServices;\r\n import io.vertigo.chatbot.designer.commons.services.FileServices;\r\n import io.vertigo.chatbot.domain.DtDefinitions.ChatbotNodeFields;\r\n import io.vertigo.chatbot.domain.DtDefinitions.TrainingFields;\r\n@@ -80,6 +81,9 @@\n @Transactional\r\n public class TrainingServices implements Component {\r\n \r\n+\t@Inject\r\n+\tprivate ChatbotServices chatbotServices;\r\n+\r\n \t@Inject\r\n \tprivate DesignerServices designerServices;\r\n \r\n@@ -107,14 +111,17 @@\n \t@Inject\r\n \tprivate JaxrsProvider jaxrsProvider;\r\n \r\n+\t@Inject\r\n+\tprivate NodeServices nodeServices;\r\n+\r\n \tprivate static final Logger LOGGER = LogManager.getLogger(TrainingServices.class);\r\n \r\n \tpublic Training trainAgent(final Long botId) {\r\n \t\tbuilderPAO.cleanOldTrainings(botId);\r\n \r\n \t\tfinal Long versionNumber = builderPAO.getNextModelNumber(botId);\r\n \r\n-\t\tfinal ChatbotNode devNode = designerServices.getDevNodeByBotId(botId)\r\n+\t\tfinal ChatbotNode devNode = nodeServices.getDevNodeByBotId(botId)\r\n \t\t\t\t.orElseThrow(() -> new VUserException(\"No training node configured\"));\r\n \r\n \t\tfinal Training training = new Training();\r\n@@ -151,7 +158,7 @@ private String getMessageFromVUserResponse(final Response response) {\n \t}\r\n \r\n \tpublic void stopAgent(final Long botId) {\r\n-\t\tfinal ChatbotNode devNode = designerServices.getDevNodeByBotId(botId).get();\r\n+\t\tfinal ChatbotNode devNode = nodeServices.getDevNodeByBotId(botId).get();\r\n \r\n \t\tjaxrsProvider.getWebTarget(devNode.getUrl()).path(\"/api/chatbot/admin/train\")\r\n \t\t\t\t.request(MediaType.APPLICATION_JSON)\r\n@@ -161,7 +168,7 @@ public void stopAgent(final Long botId) {\n \t}\r\n \r\n \tpublic TrainerInfo getTrainingState(final Long botId) {\r\n-\t\tfinal Optional<ChatbotNode> optDevNode = designerServices.getDevNodeByBotId(botId);\r\n+\t\tfinal Optional<ChatbotNode> optDevNode = nodeServices.getDevNodeByBotId(botId);\r\n \r\n \t\tif (!optDevNode.isPresent()) {\r\n \t\t\tfinal TrainerInfo trainerInfo = new TrainerInfo();\r\n@@ -201,7 +208,7 @@ public TrainerInfo getTrainingState(final Long botId) {\n \t}\r\n \r\n \tpublic RunnerInfo getRunnerState(final Long botId) {\r\n-\t\tfinal Optional<ChatbotNode> optDevNode = designerServices.getDevNodeByBotId(botId);\r\n+\t\tfinal Optional<ChatbotNode> optDevNode = nodeServices.getDevNodeByBotId(botId);\r\n \r\n \t\tif (!optDevNode.isPresent()) {\r\n \t\t\tfinal RunnerInfo runnerInfo = new RunnerInfo();\r\n@@ -241,7 +248,7 @@ public RunnerInfo getRunnerState(final Long botId) {\n \t}\r\n \r\n \tprivate BotExport exportBot(final Long botId) {\r\n-\t\tfinal Chatbot bot = designerServices.getChatbotById(botId);\r\n+\t\tfinal Chatbot bot = chatbotServices.getChatbotById(botId);\r\n \t\tfinal UtterText welcomeText = designerServices.getWelcomeTextByBot(bot);\r\n \t\tfinal UtterText defaultText = designerServices.getDefaultTextByBot(bot);\r\n \t\tfinal DtList<ResponseButton> welcomeButtons = designerServices.getWelcomeButtonsByBot(bot);\r\n@@ -298,7 +305,7 @@ public void loadModel(final Long traId, final Long nodId) {\n \t\t\t\t.isNotNull(nodId);\r\n \r\n \t\tfinal Training training = getTraining(traId);\r\n-\t\tfinal ChatbotNode node = chatbotNodeDAO.get(nodId);\r\n+\t\tfinal ChatbotNode node = nodeServices.getNodeByNodeId(nodId);\r\n \r\n \t\tAssertion.check().isTrue(training.getBotId().equals(node.getBotId()), \"Incohérence des paramètres\");\r\n \r\n@@ -308,7 +315,7 @@ public void loadModel(final Long traId, final Long nodId) {\n \r\n \t\t// update node-training link\r\n \t\tnode.setTraId(traId);\r\n-\t\tchatbotNodeDAO.save(node);\r\n+\t\tnodeServices.saveNode(node);\r\n \t}\r\n \r\n \tprivate void doLoadModel(final Training training, final VFile model, final ChatbotNode node) {\r"
  },
  {
    "sha": "ab979cf5799871167936c2e3b6804af1b54c822e",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotProfilServices.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotProfilServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotProfilServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotProfilServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,89 @@\n+package io.vertigo.chatbot.designer.builder.services.bot;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import io.vertigo.account.authorization.annotations.Secured;\n+import io.vertigo.account.authorization.annotations.SecuredOperation;\n+import io.vertigo.chatbot.commons.domain.Chatbot;\n+import io.vertigo.chatbot.designer.builder.chatbot.ChatbotPAO;\n+import io.vertigo.chatbot.designer.dao.admin.ProfilPerChatbotDAO;\n+import io.vertigo.chatbot.designer.dao.commons.PersonDAO;\n+import io.vertigo.chatbot.designer.domain.admin.PersonChatbotProfil;\n+import io.vertigo.chatbot.designer.domain.admin.ProfilPerChatbot;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n+import io.vertigo.chatbot.designer.domain.commons.PersonRoleEnum;\n+import io.vertigo.chatbot.designer.utils.UserSessionUtils;\n+import io.vertigo.chatbot.domain.DtDefinitions.PersonFields;\n+import io.vertigo.chatbot.domain.DtDefinitions.ProfilPerChatbotFields;\n+import io.vertigo.commons.transaction.Transactional;\n+import io.vertigo.core.node.component.Component;\n+import io.vertigo.datamodel.criteria.Criteria;\n+import io.vertigo.datamodel.criteria.Criterions;\n+import io.vertigo.datamodel.structure.model.DtList;\n+import io.vertigo.datamodel.structure.model.DtListState;\n+\n+@Transactional\n+@Secured(\"BotUser\")\n+public class ChatbotProfilServices implements Component {\n+\n+\t@Inject\n+\tprivate ChatbotPAO chatbotPAO;\n+\n+\t@Inject\n+\tprivate ProfilPerChatbotDAO profilPerChatbotDAO;\n+\n+\t@Inject\n+\tprivate PersonDAO personDAO;\n+\n+\tpublic DtList<PersonChatbotProfil> getPersonProfilIHMbyChatbotId(@SecuredOperation(\"botAdm\") final Chatbot chatbot) {\n+\t\treturn chatbotPAO.getPersonProfilIHM(chatbot.getBotId());\n+\t}\n+\n+\tpublic DtList<PersonChatbotProfil> updateChatbotProfils(final String profil, final List<Long> persId, @SecuredOperation(\"botAdm\") final Chatbot bot) {\n+\t\tfinal Long botId = bot.getBotId();\n+\t\tfor (final Long perId : persId) {\n+\t\t\tCriteria<ProfilPerChatbot> criteria = Criterions.isEqualTo(ProfilPerChatbotFields.botId, botId);\n+\t\t\tcriteria = criteria.and(Criterions.isEqualTo(ProfilPerChatbotFields.perId, perId));\n+\n+\t\t\tfinal Optional<ProfilPerChatbot> optional = profilPerChatbotDAO.findOptional(criteria);\n+\t\t\t//Only one profil by chatbot\n+\t\t\tif (optional.isPresent()) {\n+\t\t\t\tfinal ProfilPerChatbot profilLoad = optional.get();\n+\t\t\t\tprofilLoad.setChpCd(profil);\n+\t\t\t\tprofilPerChatbotDAO.update(profilLoad);\n+\t\t\t} else {\n+\t\t\t\tfinal ProfilPerChatbot newProfil = new ProfilPerChatbot();\n+\t\t\t\tnewProfil.setBotId(botId);\n+\t\t\t\tnewProfil.setChpCd(profil);\n+\t\t\t\tnewProfil.setPerId(perId);\n+\t\t\t\tprofilPerChatbotDAO.create(newProfil);\n+\t\t\t}\n+\t\t}\n+\t\treturn getPersonProfilIHMbyChatbotId(bot);\n+\t}\n+\n+\t/**\n+\t * Get all persons with the user profil\n+\t *\n+\t * @return the list of users\n+\t */\n+\tpublic DtList<Person> getAllUsers(@SecuredOperation(\"botAdm\") final Chatbot chatbot) {\n+\t\treturn personDAO.findAll(Criterions.isEqualTo(PersonFields.rolCd, PersonRoleEnum.RUser.name()), DtListState.of(100));\n+\t}\n+\n+\tpublic void deleteProfilForChatbot(@SecuredOperation(\"botAdm\") final Chatbot chatbot, final PersonChatbotProfil persToDelete) {\n+\t\tprofilPerChatbotDAO.delete(persToDelete.getChpId());\n+\t}\n+\n+\tpublic DtList<ProfilPerChatbot> getProfilByPerId() {\n+\t\tfinal Long perId = UserSessionUtils.getLoggedPerson().getPerId();\n+\t\treturn profilPerChatbotDAO.findAll(Criterions.isEqualTo(ProfilPerChatbotFields.perId, perId), DtListState.of(100));\n+\t}\n+\n+\tpublic void deleteAllProfilByBot(@SecuredOperation(\"botAdm\") final Chatbot bot) {\n+\t\tchatbotPAO.removeAllProfilByBotId(bot.getBotId());\n+\t}\n+}"
  },
  {
    "sha": "05d220420aee47d8d9bb0e29ef7cba6d9cb5d1de",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotServices.java",
    "status": "added",
    "additions": 213,
    "deletions": 0,
    "changes": 213,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotServices.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotServices.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/builder/services/bot/ChatbotServices.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,213 @@\n+package io.vertigo.chatbot.designer.builder.services.bot;\n+\n+import java.time.LocalDate;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import io.vertigo.account.authorization.AuthorizationManager;\n+import io.vertigo.account.authorization.annotations.Secured;\n+import io.vertigo.account.authorization.annotations.SecuredOperation;\n+import io.vertigo.chatbot.authorization.GlobalAuthorizations;\n+import io.vertigo.chatbot.authorization.SecuredEntities.ChatbotOperations;\n+import io.vertigo.chatbot.commons.dao.ChatbotDAO;\n+import io.vertigo.chatbot.commons.dao.MediaFileInfoDAO;\n+import io.vertigo.chatbot.commons.dao.ResponseButtonDAO;\n+import io.vertigo.chatbot.commons.dao.UtterTextDAO;\n+import io.vertigo.chatbot.commons.domain.Chatbot;\n+import io.vertigo.chatbot.commons.domain.ResponseButton;\n+import io.vertigo.chatbot.commons.domain.UtterText;\n+import io.vertigo.chatbot.designer.builder.BuilderPAO;\n+import io.vertigo.chatbot.designer.builder.services.DesignerServices;\n+import io.vertigo.chatbot.designer.commons.services.FileServices;\n+import io.vertigo.chatbot.designer.utils.AuthorizationUtils;\n+import io.vertigo.chatbot.designer.utils.UserSessionUtils;\n+import io.vertigo.commons.transaction.Transactional;\n+import io.vertigo.core.lang.Assertion;\n+import io.vertigo.core.node.component.Component;\n+import io.vertigo.datamodel.criteria.Criterions;\n+import io.vertigo.datamodel.structure.model.DtList;\n+import io.vertigo.datamodel.structure.model.DtListState;\n+import io.vertigo.datastore.filestore.model.FileInfoURI;\n+import io.vertigo.datastore.filestore.model.VFile;\n+import io.vertigo.datastore.impl.filestore.model.StreamFile;\n+\n+@Transactional\n+@Secured(\"BotUser\")\n+public class ChatbotServices implements Component {\n+\n+\t@Inject\n+\tprivate BuilderPAO builderPAO;\n+\n+\t@Inject\n+\tprivate ChatbotDAO chatbotDAO;\n+\n+\t@Inject\n+\tprivate ResponseButtonDAO responseButtonDAO;\n+\n+\t@Inject\n+\tprivate UtterTextDAO utterTextDAO;\n+\n+\t@Inject\n+\tprivate MediaFileInfoDAO mediaFileInfoDAO;\n+\n+\t@Inject\n+\tprivate AuthorizationManager authorizationManager;\n+\n+\t@Inject\n+\tprivate FileServices fileServices;\n+\n+\t@Inject\n+\tprivate ChatbotProfilServices chatbotProfilServices;\n+\n+\tpublic Chatbot saveChatbot(@SecuredOperation(\"botAdm\") final Chatbot chatbot, final Optional<FileInfoURI> personPictureFile,\n+\t\t\tfinal UtterText defaultText, final DtList<ResponseButton> defaultButtons,\n+\t\t\tfinal UtterText welcomeText, final DtList<ResponseButton> welcomeButtons) {\n+\n+\t\tAssertion.check().isNotNull(chatbot);\n+\t\tAssertion.check().isNotNull(defaultText);\n+\t\tAssertion.check().isNotNull(defaultButtons);\n+\t\tAssertion.check().isNotNull(welcomeText);\n+\t\tAssertion.check().isNotNull(welcomeButtons);\n+\t\t// ---\n+\n+\t\t// default text\n+\t\tutterTextDAO.save(defaultText);\n+\t\tchatbot.setUttIdDefault(defaultText.getUttId());\n+\n+\t\t// welcome\n+\t\tutterTextDAO.save(welcomeText);\n+\t\tchatbot.setUttIdWelcome(welcomeText.getUttId());\n+\n+\t\t// Avatar\n+\t\tLong oldAvatar = null;\n+\t\tif (personPictureFile.isPresent()) {\n+\t\t\toldAvatar = chatbot.getFilIdAvatar();\n+\t\t\tfinal VFile fileTmp = fileServices.getFileTmp(personPictureFile.get());\n+\t\t\tfinal FileInfoURI fileInfoUri = fileServices.saveFile(fileTmp);\n+\t\t\tchatbot.setFilIdAvatar((Long) fileInfoUri.getKey());\n+\t\t}\n+\n+\t\t// chatbot save\n+\t\tchatbot.setStatus(\"OK\");\n+\t\tfinal Chatbot savedChatbot = chatbotDAO.save(chatbot);\n+\n+\t\t// clean old avatar\n+\t\tif (oldAvatar != null) {\n+\t\t\tfileServices.deleteFile(oldAvatar);\n+\t\t}\n+\n+\t\t// clear old buttons\n+\t\tbuilderPAO.removeAllButtonsByBotId(chatbot.getBotId());\n+\n+\t\t// save new buttons\n+\t\tfor (final ResponseButton btn : defaultButtons) {\n+\t\t\tbtn.setBtnId(null); // force creation\n+\t\t\tbtn.setBotIdDefault(chatbot.getBotId());\n+\t\t\tresponseButtonDAO.save(btn);\n+\t\t}\n+\n+\t\tfor (final ResponseButton btn : welcomeButtons) {\n+\t\t\tbtn.setBtnId(null); // force creation\n+\t\t\tbtn.setBotIdWelcome(chatbot.getBotId());\n+\t\t\tresponseButtonDAO.save(btn);\n+\t\t}\n+\n+\t\treturn savedChatbot;\n+\t}\n+\n+\tpublic Boolean deleteChatbot(@SecuredOperation(\"botAdm\") final Chatbot bot) {\n+\n+\t\t// Delete avatar file\n+\t\tdeleteFil(bot);\n+\t\t// Delete node\n+\t\tdeleteChatbotNode(bot);\n+\t\t// Delete training and all media file\n+\t\tdeleteTraining(bot);\n+\t\tdeleteUtterText(bot);\n+\t\tdeleteResponseButton(bot);\n+\t\t// Delete training, reponsetype and smallTalk\n+\t\tdeleteSmallTalkCascade(bot);\n+\n+\t\tchatbotProfilServices.deleteAllProfilByBot(bot);\n+\t\tchatbotDAO.delete(bot.getBotId());\n+\t\treturn true;\n+\t}\n+\n+\tprivate void deleteSmallTalkCascade(final Chatbot bot) {\n+\t\tfinal Long botId = bot.getBotId();\n+\t\tbuilderPAO.removeAllNluTrainingSentenceByBotId(botId);\n+\t\tbuilderPAO.removeAllSmallTalkByBotId(botId);\n+\n+\t}\n+\n+\tprivate void deleteResponseButton(final Chatbot bot) {\n+\t\tbuilderPAO.removeAllButtonsByBotId(bot.getBotId());\n+\n+\t}\n+\n+\tprivate void deleteUtterText(final Chatbot bot) {\n+\t\tbuilderPAO.removeAllUtterTextByBotId(bot.getBotId());\n+\t}\n+\n+\tprivate void deleteTraining(final Chatbot bot) {\n+\t\tfinal Long botId = bot.getBotId();\n+\t\tfinal List<Long> filesId = builderPAO.getAllTrainingFilIdsByBotId(botId);\n+\t\tbuilderPAO.removeTrainingByBotId(botId);\n+\t\tbuilderPAO.removeTrainingFileByFilIds(filesId);\n+\t}\n+\n+\tprivate void deleteChatbotNode(final Chatbot bot) {\n+\t\tbuilderPAO.removeChatbotNodeByBotId(bot.getBotId());\n+\t}\n+\n+\tprivate void deleteFil(final Chatbot bot) {\n+\t\tif (bot.getFilIdAvatar() != null) {\n+\t\t\tmediaFileInfoDAO.delete(bot.getFilIdAvatar());\n+\t\t}\n+\t}\n+\n+\tpublic DtList<Chatbot> getMySupervisedChatbots() {\n+\t\tif (authorizationManager.hasAuthorization(GlobalAuthorizations.AtzSuperAdm)) {\n+\t\t\treturn getAllChatbots();\n+\t\t}\n+\t\treturn chatbotDAO.getChatbotByPerId(UserSessionUtils.getLoggedPerson().getPerId());\n+\t}\n+\n+\t@Secured(\"SuperAdm\")\n+\tpublic DtList<Chatbot> getAllChatbots() {\n+\t\treturn chatbotDAO.findAll(Criterions.alwaysTrue(), DtListState.of(100));\n+\t}\n+\n+\t@Secured(\"SuperAdm\")\n+\tpublic Chatbot getNewChatbot() {\n+\t\tfinal Chatbot newChatbot = new Chatbot();\n+\t\tnewChatbot.setCreationDate(LocalDate.now());\n+\n+\t\treturn newChatbot;\n+\t}\n+\n+\tpublic Chatbot getChatbotById(final Long botId) {\n+\t\tAssertion.check().isNotNull(botId);\n+\t\t// ---\n+\t\tfinal Chatbot chatbot = chatbotDAO.get(botId);\n+\t\tAuthorizationUtils.checkRights(chatbot, ChatbotOperations.botVisitor, \"can't get the chatbot : not enough right\");\n+\t\treturn chatbot;\n+\t}\n+\n+\tpublic VFile getAvatar(@SecuredOperation(\"botVisitor\") final Chatbot bot) {\n+\t\tif (bot.getFilIdAvatar() == null) {\n+\t\t\treturn getNoAvatar();\n+\t\t}\n+\t\treturn fileServices.getFile(bot.getFilIdAvatar());\n+\t}\n+\n+\tpublic VFile getNoAvatar() {\n+\t\treturn StreamFile.of(\n+\t\t\t\t\"noAvatar.png\",\n+\t\t\t\t\"image/png\",\n+\t\t\t\tDesignerServices.class.getResource(\"/noAvatar.png\"));\n+\t}\n+\n+}"
  },
  {
    "sha": "ba0f3f7740aed88c0b3a9eee35c8adb65d89523e",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/commons/DesignerUserSession.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/commons/DesignerUserSession.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/commons/DesignerUserSession.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/commons/DesignerUserSession.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -23,7 +23,7 @@\n import java.util.Locale;\n \n import io.vertigo.account.security.UserSession;\n-import io.vertigo.chatbot.commons.domain.Person;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n import io.vertigo.datastore.filestore.model.FileInfoURI;\n \n /**"
  },
  {
    "sha": "303d753312abee3063e9c0c8bf9818b3791185e5",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/dao/DAOFeatures.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/dao/DAOFeatures.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/dao/DAOFeatures.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/dao/DAOFeatures.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,16 @@\n+package io.vertigo.chatbot.designer.dao;\n+\n+import io.vertigo.core.node.config.discovery.ModuleDiscoveryFeatures;\n+\n+public class DAOFeatures extends ModuleDiscoveryFeatures<DAOFeatures> {\n+\n+\tpublic DAOFeatures() {\n+\t\tsuper(\"ChatbotDAO\"); // Nous donnons un nom signifiant à notre module métier\n+\t}\n+\n+\t@Override\n+\tprotected String getPackageRoot() {\n+\t\treturn this.getClass().getPackage().getName(); // nous utilisons la localisation de la classe de manisfeste comme racine du module\n+\t}\n+\n+}"
  },
  {
    "sha": "94da579a862ea1c8fb7f305e067cb243bc968186",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/AuthorizationUtils.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/AuthorizationUtils.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/AuthorizationUtils.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/AuthorizationUtils.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,23 @@\n+package io.vertigo.chatbot.designer.utils;\n+\n+import io.vertigo.account.authorization.AuthorizationManager;\n+import io.vertigo.account.authorization.VSecurityException;\n+import io.vertigo.account.authorization.definitions.OperationName;\n+import io.vertigo.core.locale.MessageText;\n+import io.vertigo.core.node.Node;\n+import io.vertigo.datamodel.structure.model.KeyConcept;\n+\n+public class AuthorizationUtils {\n+\n+\tprivate AuthorizationUtils() {\n+\t\t//Classe utilitaire\n+\t}\n+\n+\tprivate static final AuthorizationManager authorizationManager = Node.getNode().getComponentSpace().resolve(AuthorizationManager.class);\n+\n+\tpublic static <K extends KeyConcept> void checkRights(final K keyConcept, final OperationName<K> operation, final String message) {\n+\t\tif (!authorizationManager.isAuthorized(keyConcept, operation)) {\n+\t\t\tthrow new VSecurityException(MessageText.of(message));//no too sharp info here : may use log\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "029496113dc80d371366b0922c42c2cb036e5c6c",
    "filename": "vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/UserSessionUtils.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/UserSessionUtils.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/UserSessionUtils.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/java/io/vertigo/chatbot/designer/utils/UserSessionUtils.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -0,0 +1,33 @@\n+package io.vertigo.chatbot.designer.utils;\n+\n+import java.util.Optional;\n+\n+import io.vertigo.account.authorization.VSecurityException;\n+import io.vertigo.account.security.VSecurityManager;\n+import io.vertigo.chatbot.designer.commons.DesignerUserSession;\n+import io.vertigo.chatbot.designer.domain.commons.Person;\n+import io.vertigo.core.locale.MessageText;\n+import io.vertigo.core.node.Node;\n+\n+public class UserSessionUtils {\n+\n+\tprivate UserSessionUtils() {\n+\t\t//classe utilitaire\n+\t}\n+\n+\tprivate static VSecurityManager securityManager = Node.getNode().getComponentSpace().resolve(VSecurityManager.class);\n+\n+\tpublic static DesignerUserSession getUserSession() {\n+\t\treturn securityManager.<DesignerUserSession>getCurrentUserSession().orElseThrow(() -> new VSecurityException(MessageText.of(\"No active session found\")));\n+\t}\n+\n+\tpublic static boolean isAuthenticated() {\n+\t\tfinal Optional<DesignerUserSession> userSession = securityManager.<DesignerUserSession>getCurrentUserSession();\n+\t\treturn !userSession.isPresent() ? false : userSession.get().isAuthenticated();\n+\t}\n+\n+\tpublic static Person getLoggedPerson() {\n+\t\treturn getUserSession().getLoggedPerson();\n+\t}\n+\n+}"
  },
  {
    "sha": "307966a6ddd816d9323ab12c84b5cab639f96f37",
    "filename": "vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/GlobalAuthorizations.java",
    "status": "modified",
    "additions": 4,
    "deletions": 8,
    "changes": 12,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/GlobalAuthorizations.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/GlobalAuthorizations.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/GlobalAuthorizations.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -12,17 +12,13 @@\n public enum GlobalAuthorizations implements AuthorizationName {\r\n \r\n \t/**\r\n-\t * AdmBot.\r\n+\t * BotUser.\r\n \t */\r\n-\tAtzAdmBot,\r\n+\tAtzBotUser,\r\n \t/**\r\n-\t * AdmPer.\r\n+\t * Super Adm of the application.\r\n \t */\r\n-\tAtzAdmPer,\r\n-\t/**\r\n-\t * Create or view all bots..\r\n-\t */\r\n-\tAtzSuperAdmBot;\r\n+\tAtzSuperAdm;\r\n \r\n \t/**\r\n \t * Get the associated authorization.\r"
  },
  {
    "sha": "1a12395faa718f3e0a604fc89aedc4e938cf03fb",
    "filename": "vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/SecuredEntities.java",
    "status": "modified",
    "additions": 14,
    "deletions": 10,
    "changes": 24,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/SecuredEntities.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/SecuredEntities.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/authorization/SecuredEntities.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -21,12 +21,14 @@ private SecuredEntities() {\n \t * Authorizations of Chatbot.\r\n \t */\r\n \tpublic enum ChatbotAuthorizations implements AuthorizationName {\r\n+\t\t/** adm operation for bot. */\r\n+\t\tAtzChatbot$botAdm,\r\n+\t\t/** contributor operation for bot. */\r\n+\t\tAtzChatbot$botContributor,\r\n \t\t/** Visibilité globale pour le super admin. Sans régles = toujours ok.. */\r\n-\t\tAtzChatbot$admin,\r\n-\t\t/** Visibilité si affecté à l'utilisateur'.. */\r\n-\t\tAtzChatbot$read,\r\n-\t\t/** Modification si affecté à l'utilisateur.. */\r\n-\t\tAtzChatbot$write;\r\n+\t\tAtzChatbot$botSuperAdmin,\r\n+\t\t/** visitor operation for bot. */\r\n+\t\tAtzChatbot$botVisitor;\r\n \r\n \t\t/**\r\n \t\t * Get the associated authorization.\r\n@@ -52,11 +54,13 @@ public Authorization getAuthorization() {\n \t * Operations of Chatbot.\r\n \t */\r\n \tpublic enum ChatbotOperations implements OperationName<Chatbot> {\r\n+\t\t/** adm operation for bot. */\r\n+\t\tbotAdm,\r\n+\t\t/** contributor operation for bot. */\r\n+\t\tbotContributor,\r\n \t\t/** Visibilité globale pour le super admin. Sans régles = toujours ok.. */\r\n-\t\tadmin,\r\n-\t\t/** Visibilité si affecté à l'utilisateur'.. */\r\n-\t\tread,\r\n-\t\t/** Modification si affecté à l'utilisateur.. */\r\n-\t\twrite;\r\n+\t\tbotSuperAdmin,\r\n+\t\t/** visitor operation for bot. */\r\n+\t\tbotVisitor;\r\n \t}\r\n }\r"
  },
  {
    "sha": "23ad10bbb601b55e5157e8ee8938d98e98ae36a3",
    "filename": "vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/commons/dao/ChatbotDAO.java",
    "status": "modified",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/vertigo-io/vertigo-bot-factory/blob/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/commons/dao/ChatbotDAO.java",
    "raw_url": "https://github.com/vertigo-io/vertigo-bot-factory/raw/33c76a57eef47c9b3b2559d91271b70b100cf138/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/commons/dao/ChatbotDAO.java",
    "contents_url": "https://api.github.com/repos/vertigo-io/vertigo-bot-factory/contents/vertigo-bot-designer/src/main/javagen/io/vertigo/chatbot/commons/dao/ChatbotDAO.java?ref=33c76a57eef47c9b3b2559d91271b70b100cf138",
    "patch": "@@ -3,6 +3,10 @@\n import javax.inject.Inject;\r\n \r\n import io.vertigo.core.lang.Generated;\r\n+import io.vertigo.core.node.Node;\r\n+import io.vertigo.datamodel.task.definitions.TaskDefinition;\r\n+import io.vertigo.datamodel.task.model.Task;\r\n+import io.vertigo.datamodel.task.model.TaskBuilder;\r\n import io.vertigo.datamodel.structure.model.UID;\r\n import io.vertigo.datastore.entitystore.EntityStoreManager;\r\n import io.vertigo.datastore.impl.dao.DAO;\r\n@@ -50,4 +54,38 @@ public Chatbot readOneForUpdate(final UID<Chatbot> uid) {\n \tpublic Chatbot readOneForUpdate(final java.lang.Long id) {\r\n \t\treturn readOneForUpdate(createDtObjectUID(id));\r\n \t}\r\n+\r\n+\t/**\r\n+\t * Creates a taskBuilder.\r\n+\t * @param name  the name of the task\r\n+\t * @return the builder \r\n+\t */\r\n+\tprivate static TaskBuilder createTaskBuilder(final String name) {\r\n+\t\tfinal TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);\r\n+\t\treturn Task.builder(taskDefinition);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Execute la tache TkGetChatbotByPerId.\r\n+\t * @param perId Long\r\n+\t * @return DtList de Chatbot perIHM\r\n+\t*/\r\n+\t@io.vertigo.datamodel.task.proxy.TaskAnnotation(\r\n+\t\t\tname = \"TkGetChatbotByPerId\",\r\n+\t\t\trequest = \"select \" + \n+ \"\t\t\t\tbot.*\" + \n+ \"\t\t\tfrom chatbot bot\" + \n+ \"\t\t\tjoin profil_per_chatbot ppc on (bot.bot_id = ppc.bot_id)\" + \n+ \"\t\t\twhere ppc.per_id = #perId#\",\r\n+\t\t\ttaskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)\r\n+\t@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = \"STyDtChatbot\")\r\n+\tpublic io.vertigo.datamodel.structure.model.DtList<io.vertigo.chatbot.commons.domain.Chatbot> getChatbotByPerId(@io.vertigo.datamodel.task.proxy.TaskInput(name = \"perId\", smartType = \"STyId\") final Long perId) {\r\n+\t\tfinal Task task = createTaskBuilder(\"TkGetChatbotByPerId\")\r\n+\t\t\t\t.addValue(\"perId\", perId)\r\n+\t\t\t\t.build();\r\n+\t\treturn getTaskManager()\r\n+\t\t\t\t.execute(task)\r\n+\t\t\t\t.getResult();\r\n+\t}\r\n+\r\n }\r"
  }
]
