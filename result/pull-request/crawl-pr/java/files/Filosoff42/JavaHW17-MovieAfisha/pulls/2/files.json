[
  {
    "sha": "a488466df80fb9371b15794fd2985708a30167fa",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/pom.xml",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/pom.xml",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/pom.xml?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -11,6 +11,84 @@\n     <properties>\n         <maven.compiler.source>11</maven.compiler.source>\n         <maven.compiler.target>11</maven.compiler.target>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>5.7.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>1.18.16</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-junit-jupiter</artifactId>\n+            <version>3.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>2.22.2</version>\n+                <configuration>\n+                    <failIfNoTests>true</failIfNoTests>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.5</version>\n+                <configuration>\n+                    <haltOnFailure>false</haltOnFailure>\n+                    <rules>\n+                        <rule>\n+                            <element>PACKAGE</element>\n+                            <excludes>\n+                                <exclude>domain</exclude>\n+                            </excludes>\n+                            <limits>\n+                                <limit>\n+                                    <counter>BRANCH</counter>\n+                                    <value>COVEREDRATIO</value>\n+                                    <minimum>100%</minimum>\n+                                </limit>\n+                            </limits>\n+                        </rule>\n+                    </rules>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "352a3272ff44c3599b15aacf8608e9e8005e49ff",
    "filename": "src/main/java/domain/Movie.java",
    "status": "modified",
    "additions": 10,
    "deletions": 33,
    "changes": 43,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/main/java/domain/Movie.java",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/main/java/domain/Movie.java",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/src/main/java/domain/Movie.java?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -1,40 +1,17 @@\n package domain;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Data\n+\n+\n public class Movie {\n-    private String id;\n+    private int id;\n     private String imageUrl;\n     private String name;\n     private String genre;\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public void setId(String id) {\n-        this.id = id;\n-    }\n-\n-    public String getImageUrl() {\n-        return imageUrl;\n-    }\n-\n-    public void setImageUrl(String imageUrl) {\n-        this.imageUrl = imageUrl;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public String getGenre() {\n-        return genre;\n-    }\n-\n-    public void setGenre(String genre) {\n-        this.genre = genre;\n-    }\n }"
  },
  {
    "sha": "deed37949184f21254e4f028cb8d42a2789e8083",
    "filename": "src/main/java/manager/MovieManager.java",
    "status": "modified",
    "additions": 53,
    "deletions": 3,
    "changes": 56,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/main/java/manager/MovieManager.java",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/main/java/manager/MovieManager.java",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/src/main/java/manager/MovieManager.java?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -1,13 +1,63 @@\n package manager;\n \n import domain.Movie;\n+import lombok.NoArgsConstructor;\n+import repository.MovieRepository;\n+\n+\n+@NoArgsConstructor\n \n public class MovieManager {\n-    private Movie[] movies;\n+    private MovieRepository repository;\n+    private int showMovies;\n+\n+    public MovieManager(int showMovies) {\n+        this.showMovies = showMovies;\n+    }\n+\n+//    public Movie[] getRepository() {\n+//        Movie[] moviesInRepository = repository.findAll();\n+//        return moviesInRepository;\n+//    }\n+\n+    public void setRepository(MovieRepository repository) {\n+        this.repository = repository;\n+    }\n+\n+    public int getShowMovies() {\n+        return showMovies;\n+    }\n+\n+    public void setShowMovies(int showMovies) {\n+        this.showMovies = showMovies;\n+    }\n+\n+    public void addMovie(Movie movie) {\n+        repository.save(movie);\n+    }\n \n     public Movie[] getMoviesForFeed() {\n-        // TODO: add logic\n-        return null;\n+        Movie[] movies = repository.findAll();\n+        int moviesCount = movies.length;\n+        if (moviesCount <= 0) {\n+            return null;\n+        }\n+        if (moviesCount > showMovies) {\n+            Movie[] result = new Movie[showMovies];\n+            for (int i = 0; i < result.length; i++) {\n+                int index = result.length - i - 1;\n+                result[i] = movies[index];\n+            }\n+            return result;\n+        }\n+\n+        Movie[] result = new Movie[repository.findAll().length];\n+        for (int i = 0; i < result.length; i++) {\n+            int index = result.length - i - 1;\n+            result[i] = movies[index];\n+        }\n+        return result;\n+\n     }\n }\n "
  },
  {
    "sha": "795774c4f9039d05863a62f7ec589d9fff39d68b",
    "filename": "src/main/java/repository/MovieRepository.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/main/java/repository/MovieRepository.java",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/main/java/repository/MovieRepository.java",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/src/main/java/repository/MovieRepository.java?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -0,0 +1,56 @@\n+package repository;\n+\n+import domain.Movie;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Data\n+\n+public class MovieRepository {\n+    private Movie[] movies = new Movie[0];\n+\n+\n+    public Movie[] findAll() {\n+        return movies;\n+    }\n+\n+    public void save(Movie movie) {\n+        int length = movies.length + 1;\n+        Movie[] tmp = new Movie[length];\n+        System.arraycopy(movies, 0, tmp, 0, movies.length);\n+        int lastIndex = tmp.length - 1;\n+        tmp[lastIndex] = movie;\n+        movies = tmp;\n+    }\n+\n+    public Movie findById(int id) {\n+        int i = 0;\n+        for (Movie movie : movies) {\n+            if (movie.getId() == id) {\n+                return movies[i];\n+            }\n+            i++;\n+        }\n+        return null;\n+    }\n+\n+    public void removeById(int id) {\n+        int length = movies.length - 1;\n+        Movie[] tmp = new Movie[length];\n+        int i = 0;\n+        for (Movie movie : movies) {\n+            if (movie.getId() != id) {\n+                tmp[i] = movie;\n+                i++;\n+            }\n+        }\n+        movies = tmp;\n+    }\n+\n+    public void removeAll() {\n+        movies = new Movie[0];\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f4ed35f90e77c886bff3eef9f2b126d94372f427",
    "filename": "src/test/java/manager/MovieManagerIf10Test.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/manager/MovieManagerIf10Test.java",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/manager/MovieManagerIf10Test.java",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/src/test/java/manager/MovieManagerIf10Test.java?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -0,0 +1,68 @@\n+package manager;\n+\n+import domain.Movie;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import repository.MovieRepository;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.mockito.Mockito.doReturn;\n+\n+@ExtendWith(MockitoExtension.class)\n+class MovieManagerIf10Test {\n+    @Mock\n+    private MovieRepository repository;\n+    @InjectMocks\n+    private MovieManager manager = new MovieManager(10);\n+\n+    private Movie first = new Movie(1, \"url1\", \"First Movie\", \"action\");\n+    private Movie second = new Movie(2, \"url2\", \"Second Movie\", \"horror\");\n+    private Movie third = new Movie(3, \"url3\", \"Third Movie\", \"comedy\");\n+    private Movie fourth = new Movie(4, \"url4\", \"Fourth Movie\", \"documentary\");\n+    private Movie fifth = new Movie(5, \"url5\", \"Fifth Movie\", \"action\");\n+    private Movie sixth = new Movie(6, \"url6\", \"Sixth Movie\", \"horror\");\n+    private Movie seventh = new Movie(7, \"url7\", \"Seventh Movie\", \"comedy\");\n+    private Movie eighth = new Movie(8, \"url8\", \"Eighth Movie\", \"documentary\");\n+    private Movie ninth = new Movie(9, \"url9\", \"Ninth Movie\", \"action\");\n+    private Movie tenth = new Movie(10, \"url10\", \"Tenth Movie\", \"horror\");\n+    private Movie eleventh = new Movie(11, \"url11\", \"Eleventh Movie\", \"comedy\");\n+\n+//    @BeforeEach\n+//    public void setUp() {\n+//        manager.addMovie(first);\n+//        manager.addMovie(second);\n+//        manager.addMovie(third);\n+//        manager.addMovie(fourth);\n+//        manager.addMovie(fifth);\n+//        manager.addMovie(sixth);\n+//        manager.addMovie(seventh);\n+//        manager.addMovie(eighth);\n+//        manager.addMovie(ninth);\n+//        manager.addMovie(tenth);\n+//    }\n+\n+    @Test\n+    void shouldAddMovie() {\n+        Movie[] returned = new Movie[]{first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth};\n+        doReturn(returned).when(repository).findAll();\n+        manager.addMovie(eleventh);\n+        Movie[] actual = repository.findAll();\n+        Movie[] expected = new Movie[]{first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldGetMoviesForFeed() {\n+        Movie[] returned = new Movie[]{first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth};\n+        doReturn(returned).when(repository).findAll();\n+        manager.addMovie(eleventh);\n+        Movie[] actual = manager.getMoviesForFeed();\n+        Movie[] expected = new Movie[]{tenth, ninth, eighth, seventh, sixth, fifth, fourth, third, second, first};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c13b94cdf5d183d3dc3f3a29a1e068cb06fc68a7",
    "filename": "src/test/java/manager/MovieManagerIfEmptyTest.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/manager/MovieManagerIfEmptyTest.java",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/manager/MovieManagerIfEmptyTest.java",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/src/test/java/manager/MovieManagerIfEmptyTest.java?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -0,0 +1,42 @@\n+package manager;\n+\n+import domain.Movie;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import repository.MovieRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith(MockitoExtension.class)\n+class MovieManagerIfEmptyTest {\n+    @Mock\n+    private MovieRepository repository;\n+    @InjectMocks\n+    private MovieManager manager = new MovieManager(10);\n+\n+    private Movie first = new Movie(1, \"url1\", \"First Movie\", \"action\");\n+\n+    @Test\n+    void shouldAddMovie() {\n+        Movie[] returned = new Movie[0];\n+        doReturn(returned).when(repository).findAll();\n+        manager.addMovie(first);\n+        Movie[] actual = repository.findAll();\n+        Movie[] expected = new Movie[]{first};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldGetMoviesForFeed() {\n+        Movie[] returned = new Movie[0];\n+        doReturn(returned).when(repository).findAll();\n+        Movie[] actual = manager.getMoviesForFeed();\n+        Movie[] expected = null;\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f792a62eb25c233675fa151b8bf4c302ced18dff",
    "filename": "src/test/java/manager/MovieManagerIfNotEmptyTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/manager/MovieManagerIfNotEmptyTest.java",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/manager/MovieManagerIfNotEmptyTest.java",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/src/test/java/manager/MovieManagerIfNotEmptyTest.java?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -0,0 +1,53 @@\n+package manager;\n+\n+import domain.Movie;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import repository.MovieRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.doReturn;\n+\n+@ExtendWith(MockitoExtension.class)\n+class MovieManagerIfNotEmptyTest {\n+    @Mock\n+    private MovieRepository repository;\n+    @InjectMocks\n+    private MovieManager manager = new MovieManager(10);\n+\n+    private Movie first = new Movie(1, \"url1\", \"First Movie\", \"action\");\n+    private Movie second = new Movie(2, \"url2\", \"Second Movie\", \"horror\");\n+    private Movie third = new Movie(3, \"url3\", \"Third Movie\", \"comedy\");\n+    private Movie fourth = new Movie(4, \"url4\", \"Fourth Movie\", \"documentary\");\n+\n+//    @BeforeEach\n+//    public void setUp() {\n+//        manager.addMovie(first);\n+//        manager.addMovie(second);\n+//        manager.addMovie(third);\n+//    }\n+\n+    @Test\n+    void shouldAddMovie() {\n+        Movie[] returned = new Movie[]{first, second, third};\n+        doReturn(returned).when(repository).findAll();\n+        manager.addMovie(fourth);\n+        Movie[] actual = repository.findAll();\n+        Movie[] expected = new Movie[]{first, second, third, fourth};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldGetMoviesForFeed() {\n+        Movie[] returned = new Movie[]{first, second, third};\n+        doReturn(returned).when(repository).findAll();\n+        Movie[] actual = manager.getMoviesForFeed();\n+        Movie[] expected = new Movie[]{third, second, first};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "011b8a0ed7ac4b17d9746501f36843e1419d427d",
    "filename": "src/test/java/repository/MovieRepositoryTest.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/blob/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/repository/MovieRepositoryTest.java",
    "raw_url": "https://github.com/Filosoff42/JavaHW17-MovieAfisha/raw/00666f8c2ea7527b86b7208a4e2f7207a42df6d8/src/test/java/repository/MovieRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/Filosoff42/JavaHW17-MovieAfisha/contents/src/test/java/repository/MovieRepositoryTest.java?ref=00666f8c2ea7527b86b7208a4e2f7207a42df6d8",
    "patch": "@@ -0,0 +1,54 @@\n+package repository;\n+\n+import domain.Movie;\n+import manager.MovieManager;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class MovieRepositoryTest {\n+    private MovieRepository movies = new MovieRepository();\n+    private Movie first = new Movie(1, \"url1\", \"First Movie\", \"action\");\n+    private Movie second = new Movie(2, \"url2\", \"Second Movie\", \"horror\");\n+    private Movie third = new Movie(3, \"url3\", \"Third Movie\", \"comedy\");\n+    private Movie fourth = new Movie(4, \"url4\", \"Fourth Movie\", \"documentary\");\n+\n+    @BeforeEach\n+    public void setUp() {\n+        movies.save(first);\n+        movies.save(second);\n+        movies.save(third);\n+    }\n+\n+    @Test\n+    void shouldSave() {\n+        movies.save(fourth);\n+        Movie[] actual = movies.findAll();\n+        Movie[] expected = new Movie[]{first, second, third, fourth};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldFindById() {\n+        Movie actual = movies.findById(2);\n+        Movie expected = second;\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldRemoveById() {\n+        movies.removeById(2);\n+        Movie[] actual = movies.findAll();\n+        Movie[] expected = new Movie[]{first, third};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldRemoveAll() {\n+        movies.removeAll();\n+        Movie[] actual = movies.findAll();\n+        Movie[] expected = new Movie[0];\n+        assertArrayEquals(expected, actual);\n+    }\n+}\n\\ No newline at end of file"
  }
]
