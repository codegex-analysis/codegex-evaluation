[
  {
    "sha": "60fa258b4d7eb7eba657ff255d120a2843cbee50",
    "filename": "src/main/java/co/aikar/timings/Timings.java",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/co/aikar/timings/Timings.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/co/aikar/timings/Timings.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/co/aikar/timings/Timings.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -48,7 +48,7 @@ private Timings() {\n     public static Timing of(final PluginContainer plugin, final String name) {\n         Objects.requireNonNull(plugin, \"PluginContainer cannot be null!\");\n         Objects.requireNonNull(name, \"Timing name cannot be null!\");\n-        return Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).of(plugin, name, null);\n+        return Sponge.game().factoryProvider().provide(TimingsFactory.class).of(plugin, name, null);\n     }\n \n     /**\n@@ -68,7 +68,7 @@ public static Timing of(final PluginContainer plugin, final String name, final T\n         Objects.requireNonNull(plugin, \"PluginContainer cannot be null!\");\n         Objects.requireNonNull(name, \"Timing name cannot be null!\");\n         Objects.requireNonNull(groupHandler, \"Group Handler cannot be null!\");\n-        return Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).of(plugin, name, groupHandler);\n+        return Sponge.game().factoryProvider().provide(TimingsFactory.class).of(plugin, name, groupHandler);\n     }\n \n     /**\n@@ -122,7 +122,7 @@ public static Timing ofStart(final PluginContainer plugin, final String name, fi\n      * @return Enabled or not\n      */\n     public static boolean isTimingsEnabled() {\n-        return Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).isTimingsEnabled();\n+        return Sponge.game().factoryProvider().provide(TimingsFactory.class).isTimingsEnabled();\n     }\n \n     /**\n@@ -132,7 +132,7 @@ public static boolean isTimingsEnabled() {\n      * @param enabled Should timings be reported\n      */\n     public static void setTimingsEnabled(final boolean enabled) {\n-        Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).setTimingsEnabled(enabled);\n+        Sponge.game().factoryProvider().provide(TimingsFactory.class).setTimingsEnabled(enabled);\n     }\n \n     /**\n@@ -142,7 +142,7 @@ public static void setTimingsEnabled(final boolean enabled) {\n      * @return Enabled or not\n      */\n     public static boolean isVerboseTimingsEnabled() {\n-        return Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).isVerboseTimingsEnabled();\n+        return Sponge.game().factoryProvider().provide(TimingsFactory.class).isVerboseTimingsEnabled();\n     }\n \n     /**\n@@ -153,7 +153,7 @@ public static boolean isVerboseTimingsEnabled() {\n      * @param enabled Should high-frequency timings be reported\n      */\n     public static void setVerboseTimingsEnabled(final boolean enabled) {\n-        Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).setVerboseTimingsEnabled(enabled);\n+        Sponge.game().factoryProvider().provide(TimingsFactory.class).setVerboseTimingsEnabled(enabled);\n     }\n \n     /**\n@@ -162,7 +162,7 @@ public static void setVerboseTimingsEnabled(final boolean enabled) {\n      * @return Interval in ticks\n      */\n     public static int getHistoryInterval() {\n-        return Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).getHistoryInterval();\n+        return Sponge.game().factoryProvider().provide(TimingsFactory.class).getHistoryInterval();\n     }\n \n     /**\n@@ -174,7 +174,7 @@ public static int getHistoryInterval() {\n      * @param interval Interval in ticks\n      */\n     public static void setHistoryInterval(final int interval) {\n-        Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).setHistoryInterval(interval);\n+        Sponge.game().factoryProvider().provide(TimingsFactory.class).setHistoryInterval(interval);\n     }\n \n     /**\n@@ -183,13 +183,13 @@ public static void setHistoryInterval(final int interval) {\n      * @return Duration in ticks\n      */\n     public static int getHistoryLength() {\n-        return Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).getHistoryLength();\n+        return Sponge.game().factoryProvider().provide(TimingsFactory.class).getHistoryLength();\n     }\n \n     /**\n      * Sets how long timing history reports are kept for the server.\n      *\n-     * <p>This value is capped at a maximum of getHistoryInterval() *\n+     * <p>This value is capped at a maximum of historyInterval() *\n      * MAX_HISTORY_FRAMES (12).</p>\n      *\n      * <p>Will not reset timing data but may truncate old history if the new\n@@ -198,14 +198,14 @@ public static int getHistoryLength() {\n      * @param length Duration in ticks\n      */\n     public static void setHistoryLength(final int length) {\n-        Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).setHistoryLength(length);\n+        Sponge.game().factoryProvider().provide(TimingsFactory.class).setHistoryLength(length);\n     }\n \n     /**\n      * Resets all timing data.\n      */\n     public static void reset() {\n-        Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).reset();\n+        Sponge.game().factoryProvider().provide(TimingsFactory.class).reset();\n     }\n \n     /**\n@@ -215,7 +215,7 @@ public static void reset() {\n      * @param channel The channel to send report to\n      */\n     public static void generateReport(final Audience channel) {\n-        Sponge.getGame().getFactoryProvider().provide(TimingsFactory.class).generateReport(channel);\n+        Sponge.game().factoryProvider().provide(TimingsFactory.class).generateReport(channel);\n     }\n \n }"
  },
  {
    "sha": "079a8035e32096b37e89744f388a3c15fa7845ea",
    "filename": "src/main/java/org/spongepowered/api/Client.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Client.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Client.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/Client.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -48,7 +48,7 @@\n      *\n      * @return The local player or {@link Optional#empty()} if it is not found\n      */\n-    Optional<LocalPlayer> getPlayer();\n+    Optional<LocalPlayer> player();\n \n     /**\n      * Gets the {@link LocalServer server} that powers a local SinglePlayer game instance\n@@ -60,7 +60,7 @@\n      *\n      * @return The local server or {@link Optional#empty()} if it is not found\n      */\n-    Optional<LocalServer> getServer();\n+    Optional<LocalServer> server();\n \n     /**\n      * Gets the {@link ClientWorld world} that a typical Minecraft client will be viewing\n@@ -72,13 +72,13 @@\n      *\n      * @return The client world or {@link Optional#empty()}} if it is not found\n      */\n-    Optional<ClientWorld> getWorld();\n+    Optional<ClientWorld> world();\n \n     /**\n      * Gets the {@link ClientSideConnection} that is currently active, this is only the case\n      * if the client is connected to a server.\n      *\n      * @return The client side connection, if present\n      */\n-    Optional<ClientSideConnection> getConnection();\n+    Optional<ClientSideConnection> connection();\n }"
  },
  {
    "sha": "895389834ef10425aae032e3a4c0ef742a4216b0",
    "filename": "src/main/java/org/spongepowered/api/Engine.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Engine.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Engine.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/Engine.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -37,22 +37,22 @@\n      * Gets the {@link Game} that launched this engine;\n      * @return The game\n      */\n-    Game getGame();\n+    Game game();\n \n     /**\n      * Gets the {@link CauseStackManager} for handling the current event cause\n      * stack and context information.\n      *\n      * @return The cause stack manager\n      */\n-    CauseStackManager getCauseStackManager();\n+    CauseStackManager causeStackManager();\n \n     /**\n      * Gets the {@link Scheduler} used to schedule sync tasks on this {@link Engine}.\n      *\n      * @return The sync scheduler\n      */\n-    Scheduler getScheduler();\n+    Scheduler scheduler();\n \n     /**\n      * Checks if the {@link Thread#currentThread() current thread} is the main thread of the engine."
  },
  {
    "sha": "dcf829536fa0bfab02ca2db9288526cbe1a54994",
    "filename": "src/main/java/org/spongepowered/api/Game.java",
    "status": "modified",
    "additions": 19,
    "deletions": 19,
    "changes": 38,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Game.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Game.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/Game.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -57,14 +57,14 @@\n      *\n      * @return The async scheduler\n      */\n-    Scheduler getAsyncScheduler();\n+    Scheduler asyncScheduler();\n \n     /**\n      * Gets the directory where the game's files are located.\n      *\n      * @return The game directory\n      */\n-    Path getGameDirectory();\n+    Path gameDirectory();\n \n     /**\n      * Returns if the {@link Server} is available for use. The result of this method is entirely\n@@ -80,23 +80,23 @@\n      * @return The server\n      * @throws IllegalStateException If the Server isn't currently available\n      */\n-    Server getServer();\n+    Server server();\n \n     /**\n      * Gets the {@link SystemSubject}. Depending on the implementation, this\n      * may also represent the game console.\n      *\n      * @return The {@link SystemSubject}\n      */\n-    SystemSubject getSystemSubject();\n+    SystemSubject systemSubject();\n \n     /**\n      * Gets a locale for the specified locale code, e.g. {@code en_US}.\n      *\n      * @param locale The locale to lookup (e.g. {@code en_US}.\n      * @return The locale\n      */\n-    Locale getLocale(String locale);\n+    Locale locale(String locale);\n \n     /**\n      * Returns if the {@link Client} is available for use. The result of this method is entirely\n@@ -115,7 +115,7 @@ default boolean isClientAvailable() {\n      * @throws UnsupportedEngineException If the client engine is not supported\n      * @throws IllegalStateException If the Client isn't currently available\n      */\n-    default Client getClient() {\n+    default Client client() {\n         throw new UnsupportedEngineException(\"The client engine is not supported.\");\n     }\n \n@@ -124,72 +124,72 @@ default Client getClient() {\n      *\n      * @return The current implementation\n      */\n-    Platform getPlatform();\n+    Platform platform();\n \n     /**\n      * Gets the {@link GameRegistry}.\n      *\n      * @return The game registry\n      */\n-    GameRegistry getRegistry();\n+    GameRegistry registry();\n \n     /**\n      * Retrieves the {@link BuilderProvider}.\n      *\n      * @return The builder provider\n      */\n-    BuilderProvider getBuilderProvider();\n+    BuilderProvider builderProvider();\n \n     /**\n      * Retrieves the {@link FactoryProvider}.\n      *\n      * @return The factory provider\n      */\n-    FactoryProvider getFactoryProvider();\n+    FactoryProvider factoryProvider();\n \n     /**\n      * Gets the {@link DataManager} instance to register\n      * {@link DataSerializable}s, and get the related {@link DataBuilder}s.\n      *\n      * @return The serialization service\n      */\n-    DataManager getDataManager();\n+    DataManager dataManager();\n \n     /**\n      * Gets the {@link PluginManager}.\n      *\n      * @return The plugin manager\n      */\n-    PluginManager getPluginManager();\n+    PluginManager pluginManager();\n \n     /**\n      * Gets the {@link EventManager}.\n      *\n      * @return The event manager\n      */\n-    EventManager getEventManager();\n+    EventManager eventManager();\n \n     /**\n      * Gets the {@link AssetManager}.\n      *\n      * @return The asset manager\n      */\n-    AssetManager getAssetManager();\n+    AssetManager assetManager();\n \n     /**\n      * Gets the {@link ConfigManager} used to load and manage configuration files\n      * for plugins.\n      *\n      * @return The configuration manager\n      */\n-    ConfigManager getConfigManager();\n+    ConfigManager configManager();\n \n     /**\n      * Gets the {@link ChannelRegistry} for creating network channels.\n      *\n      * @return The channel registry\n      */\n-    ChannelRegistry getChannelRegistry();\n+    ChannelRegistry channelRegistry();\n \n     /**\n      * Gets the {@link MetricsConfigManager} instance, allowing data/metric gathering\n@@ -198,14 +198,14 @@ default Client getClient() {\n      *\n      * @return The {@link MetricsConfigManager} instance\n      */\n-    MetricsConfigManager getMetricsConfigManager();\n+    MetricsConfigManager metricsConfigManager();\n \n     /**\n      * Gets the {@link SqlManager} for grabbing sql data sources.\n      *\n      * @return The {@link SqlManager} instance.\n      */\n-    SqlManager getSqlManager();\n+    SqlManager sqlManager();\n     \n     /**\n      * Gets the {@link ServiceProvider.GameScoped}, used to provide Sponge\n@@ -218,5 +218,5 @@ default Client getClient() {\n      *\n      * @return The service manager\n      */\n-    ServiceProvider.GameScoped getServiceProvider();\n+    ServiceProvider.GameScoped serviceProvider();\n }"
  },
  {
    "sha": "43920eb336799b1740474a7cfff94124b38f7e90",
    "filename": "src/main/java/org/spongepowered/api/MinecraftVersion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/MinecraftVersion.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/MinecraftVersion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/MinecraftVersion.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -45,7 +45,7 @@\n      *\n      * @return The version name\n      */\n-    String getName();\n+    String name();\n \n     /**\n      * Returns whether this version is an older version that doesn't support\n@@ -69,5 +69,5 @@\n      *\n      * @return The data version\n      */\n-    OptionalInt getDataVersion();\n+    OptionalInt dataVersion();\n }"
  },
  {
    "sha": "04fbda6c85210ed8f6bdb9d0315a2c5ae22c7039",
    "filename": "src/main/java/org/spongepowered/api/Platform.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Platform.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Platform.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/Platform.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -41,18 +41,18 @@\n      *\n      * @return The current type\n      */\n-    Type getType();\n+    Type type();\n \n     /**\n      * Retrieves the current {@link Type} the platform is executing on.\n      *\n      * <p>A Minecraft instance will have a client and server thread. If the\n      * server is executing, this will return {@linkplain Type#SERVER} but\n-     * {@link Platform#getType()} would return {@linkplain Type#CLIENT}.</p>\n+     * {@link Platform#type()} would return {@linkplain Type#CLIENT}.</p>\n      *\n      * @return The execution type\n      */\n-    Type getExecutionType();\n+    Type executionType();\n \n     /**\n      * Returns the {@link PluginContainer} for the specified platform\n@@ -61,14 +61,14 @@\n      * @param component The platform component\n      * @return The plugin container for the component\n      */\n-    PluginContainer getContainer(Component component);\n+    PluginContainer container(Component component);\n \n     /**\n      * Gets the current Minecraft version of this platform.\n      *\n      * @return The Minecraft version\n      */\n-    MinecraftVersion getMinecraftVersion();\n+    MinecraftVersion minecraftVersion();\n \n     /**\n      * Returns this platform instance, as a key-value map."
  },
  {
    "sha": "20e2207d14aa1c5501dd1618a69c016c0b62b9a4",
    "filename": "src/main/java/org/spongepowered/api/ResourceKey.java",
    "status": "modified",
    "additions": 5,
    "deletions": 23,
    "changes": 28,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/ResourceKey.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/ResourceKey.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/ResourceKey.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -109,7 +109,7 @@ static ResourceKey sponge(final String value) {\n      * @return The new builder instance\n      */\n     static Builder builder() {\n-        return Sponge.getGame().getBuilderProvider().provide(Builder.class);\n+        return Sponge.game().builderProvider().provide(Builder.class);\n     }\n \n     /**\n@@ -120,7 +120,7 @@ static Builder builder() {\n      * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).of(Objects.requireNonNull(namespace, \"mamespace\"), Objects.requireNonNull(value, \"value\"));\n+        return Sponge.game().factoryProvider().provide(Factory.class).of(Objects.requireNonNull(namespace, \"mamespace\"), Objects.requireNonNull(value, \"value\"));\n     }\n \n     /**\n@@ -131,7 +131,7 @@ static ResourceKey of(final String namespace, final String value) {\n      * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer plugin, final String value) {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).of(Objects.requireNonNull(plugin, \"plugin\"), Objects.requireNonNull(value, \"value\"));\n+        return Sponge.game().factoryProvider().provide(Factory.class).of(Objects.requireNonNull(plugin, \"plugin\"), Objects.requireNonNull(value, \"value\"));\n     }\n \n     /**\n@@ -144,25 +144,7 @@ static ResourceKey of(final PluginContainer plugin, final String value) {\n      * @return A new resource key\n      */\n     static ResourceKey resolve(final String formatted) {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).resolve(formatted);\n-    }\n-\n-    /**\n-     * Gets the namespace.\n-     *\n-     * @return The namespace\n-     */\n-    default String getNamespace() {\n-        return this.namespace();\n-    }\n-\n-    /**\n-     * Gets the value.\n-     *\n-     * @return The value\n-     */\n-    default String getValue() {\n-        return this.value();\n+        return Sponge.game().factoryProvider().provide(Factory.class).resolve(formatted);\n     }\n \n     /**\n@@ -174,7 +156,7 @@ default String getValue() {\n      *\n      * @return The key, formatted\n      */\n-    default String getFormatted() {\n+    default String formatted() {\n         return this.asString();\n     }\n "
  },
  {
    "sha": "8f411466bb8abf53a92cea2822913acf3b6bf8fb",
    "filename": "src/main/java/org/spongepowered/api/ResourceKeyed.java",
    "status": "modified",
    "additions": 1,
    "deletions": 8,
    "changes": 9,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/ResourceKeyed.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/ResourceKeyed.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/ResourceKeyed.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -24,17 +24,10 @@\n  */\n package org.spongepowered.api;\n \n-import net.kyori.adventure.key.Key;\n import net.kyori.adventure.key.Keyed;\n-import org.checkerframework.checker.nullness.qual.NonNull;\n \n public interface ResourceKeyed extends Keyed {\n \n-    ResourceKey getKey();\n+    ResourceKey key();\n \n-    @Override\n-    @NonNull\n-    default Key key() {\n-        return this.getKey();\n-    }\n }"
  },
  {
    "sha": "fb20a659f47df5a7bdc3642a8db113f77e45bc68",
    "filename": "src/main/java/org/spongepowered/api/Server.java",
    "status": "modified",
    "additions": 26,
    "deletions": 26,
    "changes": 52,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Server.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Server.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/Server.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -65,7 +65,7 @@\n      *\n      * @return The world manager\n      */\n-    WorldManager getWorldManager();\n+    WorldManager worldManager();\n \n     /**\n      * Gets if multiple {@link ServerWorld worlds} will be loaded by the server.\n@@ -82,14 +82,14 @@\n      *\n      * @return The world generator config\n      */\n-    WorldGenerationConfig getWorldGenerationConfig();\n+    WorldGenerationConfig worldGenerationConfig();\n \n     /**\n      * Gets the max {@link ServerPlayer players} allowed to join.\n      *\n      * @return The max players\n      */\n-    int getMaxPlayers();\n+    int maxPlayers();\n \n     /**\n      * Gets if the whitelist is currently enforced.\n@@ -111,14 +111,14 @@\n      *\n      * @return The message of the day\n      */\n-    Component getMOTD();\n+    Component motd();\n \n     /**\n      * Gets the {@link ResourcePack pack} sent to clients when they join.\n      *\n      * @return The resource pack\n      */\n-    Optional<ResourcePack> getResourcePack();\n+    Optional<ResourcePack> resourcePack();\n \n     /**\n      * Gets the player idle timeout, in minutes.\n@@ -127,7 +127,7 @@\n      *\n      * @return The player idle timeout\n      */\n-    int getPlayerIdleTimeout();\n+    int playerIdleTimeout();\n \n     /**\n      * Gets if hardcode mode has been enabled.\n@@ -141,19 +141,19 @@\n      *\n      * @return The difficulty\n      */\n-    Difficulty getDifficulty();\n+    Difficulty difficulty();\n \n     /**\n      * Gets the {@link GameMode}.\n      *\n      * @return The gamemode\n      */\n-    GameMode getGameMode();\n+    GameMode gameMode();\n \n     /**\n      * Gets if {@link ServerPlayer players} will have their {@link GameMode game mode} set to the default.\n      *\n-     * {@link Server#getGameMode()}\n+     * {@link Server#gameMode()}\n      *\n      * @return True if enforced, false if not\n      */\n@@ -201,29 +201,29 @@\n      *\n      * @return The user manager\n      */\n-    UserManager getUserManager();\n+    UserManager userManager();\n \n     /**\n      * Gets the {@link TeleportHelper}, used to find safe {@link ServerLocation}s.\n      *\n      * @return The teleport helper\n      */\n-    TeleportHelper getTeleportHelper();\n+    TeleportHelper teleportHelper();\n \n     /**\n      * Gets the {@link ServerPlayer}s currently online.\n      *\n      * @return A {@link Collection} of online players\n      */\n-    Collection<ServerPlayer> getOnlinePlayers();\n+    Collection<ServerPlayer> onlinePlayers();\n \n     /**\n      * Gets a {@link ServerPlayer} by their UUID.\n      *\n      * @param uniqueId The UUID to get the player from\n      * @return The {@link ServerPlayer} or empty if not found\n      */\n-    Optional<ServerPlayer> getPlayer(UUID uniqueId);\n+    Optional<ServerPlayer> player(UUID uniqueId);\n \n     /**\n      * Gets a {@link ServerPlayer} by their name.\n@@ -236,7 +236,7 @@\n      * @param name The name to get the player from\n      * @return The {@link ServerPlayer} or empty if not found\n      */\n-    Optional<ServerPlayer> getPlayer(String name);\n+    Optional<ServerPlayer> player(String name);\n \n     /**\n      * Gets the 'server' scoreboard. In Vanilla, this is the scoreboard of\n@@ -251,15 +251,15 @@\n      *\n      * @return the server scoreboard, if available.\n      */\n-    Optional<? extends Scoreboard> getServerScoreboard();\n+    Optional<? extends Scoreboard> serverScoreboard();\n \n     /**\n      * Returns information about the chunk layout used by this server\n      * implementation.\n      *\n      * @return The chunk layout used by the implementation\n      */\n-    ChunkLayout getChunkLayout();\n+    ChunkLayout chunkLayout();\n \n     /**\n      * Gets the time, in ticks, since this server began running for the current\n@@ -270,14 +270,14 @@\n      *\n      * @return The number of ticks since this server started running\n      */\n-    int getRunningTimeTicks();\n+    int runningTimeTicks();\n \n     /**\n      * Gets the message channel that server-wide messages are sent through.\n      *\n      * @return The server-wide broadcast channel\n      */\n-    Audience getBroadcastAudience();\n+    Audience broadcastAudience();\n \n     /**\n      * Sets the channel that server-wide messages should be sent through.\n@@ -292,7 +292,7 @@\n      *\n      * @return The address or Optional.empty() if not found\n      */\n-    Optional<InetSocketAddress> getBoundAddress();\n+    Optional<InetSocketAddress> boundAddress();\n \n     /**\n      * Sets whether the server is utilizing a whitelist.\n@@ -322,22 +322,22 @@\n      *\n      * @return This server's game profile manager\n      */\n-    GameProfileManager getGameProfileManager();\n+    GameProfileManager gameProfileManager();\n \n     /**\n      * Gets the current ticks per second. A tick represents one cycle of the\n      * game loop.\n      *\n      * @return The current ticks per second\n      */\n-    double getTicksPerSecond();\n+    double ticksPerSecond();\n \n     /**\n      * Gets the current average milliseconds per tick.\n      *\n      * @return The current average tick time.\n      */\n-    double getAverageTickTime();\n+    double averageTickTime();\n \n     /**\n      * Gets the target ticks per second for this server.\n@@ -346,7 +346,7 @@\n      *\n      * @return The target tick per second rate.\n      */\n-    int getTargetTicksPerSecond();\n+    int targetTicksPerSecond();\n \n     /**\n      * Sets the player idle timeout, in minutes.\n@@ -368,7 +368,7 @@\n      *\n      * @return The service manager\n      */\n-    ServiceProvider.ServerScoped getServiceProvider();\n+    ServiceProvider.ServerScoped serviceProvider();\n \n     /**\n      * Gets the {@link CommandManager} for executing and inspecting commands.\n@@ -378,7 +378,7 @@\n      *\n      * @return The {@link CommandManager} instance.\n      */\n-    CommandManager getCommandManager();\n+    CommandManager commandManager();\n \n     /**\n      * Gets the map storage for this server\n@@ -388,5 +388,5 @@\n      *\n      * @return MapStorage\n      */\n-    MapStorage getMapStorage();\n+    MapStorage mapStorage();\n }"
  },
  {
    "sha": "86407ee9eb8e3478568c7d670857f211c208f97a",
    "filename": "src/main/java/org/spongepowered/api/Sponge.java",
    "status": "modified",
    "additions": 39,
    "deletions": 40,
    "changes": 79,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Sponge.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/Sponge.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/Sponge.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -26,7 +26,6 @@\n \n import com.google.inject.Inject;\n import org.spongepowered.api.asset.AssetManager;\n-import org.spongepowered.api.command.manager.CommandManager;\n import org.spongepowered.api.config.ConfigManager;\n import org.spongepowered.api.data.DataManager;\n import org.spongepowered.api.event.EventManager;\n@@ -53,7 +52,7 @@\n      *\n      * @return The game instance\n      */\n-    public static Game getGame() {\n+    public static Game game() {\n         if (Sponge.game == null) {\n             throw new IllegalStateException(\"Sponge has not been initialized!\");\n         }\n@@ -66,53 +65,53 @@ public static Game getGame() {\n      *\n      * @return The current implementation\n      */\n-    public static Platform getPlatform() {\n-        return Sponge.getGame().getPlatform();\n+    public static Platform platform() {\n+        return Sponge.game().platform();\n     }\n \n     /**\n      * Gets the {@link GameRegistry} instance.\n      *\n      * @return The game registry instance\n      */\n-    public static GameRegistry getRegistry() {\n-        return Sponge.getGame().getRegistry();\n+    public static GameRegistry registry() {\n+        return Sponge.game().registry();\n     }\n \n     /**\n      * Gets the {@link DataManager} instance.\n      *\n      * @return The data manager instance\n      */\n-    public static DataManager getDataManager() {\n-        return Sponge.getGame().getDataManager();\n+    public static DataManager dataManager() {\n+        return Sponge.game().dataManager();\n     }\n \n     /**\n      * Gets the {@link PluginManager} instance.\n      *\n      * @return The plugin manager instance\n      */\n-    public static PluginManager getPluginManager() {\n-        return Sponge.getGame().getPluginManager();\n+    public static PluginManager pluginManager() {\n+        return Sponge.game().pluginManager();\n     }\n \n     /**\n      * Gets the {@link EventManager} instance.\n      *\n      * @return The event manager instance\n      */\n-    public static EventManager getEventManager() {\n-        return Sponge.getGame().getEventManager();\n+    public static EventManager eventManager() {\n+        return Sponge.game().eventManager();\n     }\n \n     /**\n      * Gets the {@link AssetManager} instance.\n      *\n      * @return The asset manager instance\n      */\n-    public static AssetManager getAssetManager() {\n-        return Sponge.getGame().getAssetManager();\n+    public static AssetManager assetManager() {\n+        return Sponge.game().assetManager();\n     }\n \n     /**\n@@ -121,54 +120,54 @@ public static AssetManager getAssetManager() {\n      *\n      * @return The configuration manager\n      */\n-    public static ConfigManager getConfigManager() {\n-        return Sponge.getGame().getConfigManager();\n+    public static ConfigManager configManager() {\n+        return Sponge.game().configManager();\n     }\n \n     /**\n      * Gets the {@link ChannelRegistry} for creating network channels.\n      *\n      * @return The channel registry\n      */\n-    public static ChannelRegistry getChannelRegistry() {\n-        return Sponge.getGame().getChannelRegistry();\n+    public static ChannelRegistry channelRegistry() {\n+        return Sponge.game().channelRegistry();\n     }\n \n     /**\n      * Gets whether a {@link Server} instance is available without throwing an\n-     * exception from calling {@link #getServer()}.\n+     * exception from calling {@link #server()}.\n      *\n      * @see Game#isServerAvailable()\n      * @return True if the server instance is available\n      */\n     public static boolean isServerAvailable() {\n-        return Sponge.getGame().isServerAvailable();\n+        return Sponge.game().isServerAvailable();\n     }\n \n     /**\n      * Gets the {@link Server} instance from the {@link Game} instance.\n      *\n      * <p>Note: During various {@link LifecycleEvent events}, a {@link Server} instance\n-     * may <strong>NOT</strong> be available. Calling {@link Game#getServer()} during one\n+     * may <strong>NOT</strong> be available. Calling {@link Game#server()} during one\n      * will throw an exception. To double check, call {@link #isServerAvailable()}</p>\n      *\n-     * @see Game#getServer()\n+     * @see Game#server()\n      * @see Game#isServerAvailable()\n      * @return The server instance\n      */\n-    public static Server getServer() {\n-        return Sponge.getGame().getServer();\n+    public static Server server() {\n+        return Sponge.game().server();\n     }\n \n     /**\n      * Gets whether a {@link Client} instance is available without throwing an\n-     * exception from calling {@link #getClient()}.\n+     * exception from calling {@link #client()}.\n      *\n      * @see Game#isClientAvailable()\n      * @return True if the client instance is available\n      */\n     public static boolean isClientAvailable() {\n-        return Sponge.getGame().isClientAvailable();\n+        return Sponge.game().isClientAvailable();\n     }\n \n     /**\n@@ -177,22 +176,22 @@ public static boolean isClientAvailable() {\n      * <p>Note: Not all implementations support a client, consult your\n      * vendor for further information.</p>\n      *\n-     * @see Game#getClient()\n+     * @see Game#client()\n      * @see Game#isClientAvailable()\n      * @return The client instance\n      */\n-    public static Client getClient() {\n-        return Sponge.getGame().getClient();\n+    public static Client client() {\n+        return Sponge.game().client();\n     }\n \n     /**\n      * Gets the {@link SystemSubject} instance from the {@link Game} instance.\n      *\n-     * @see Game#getSystemSubject() ()\n+     * @see Game#systemSubject() ()\n      * @return The system subject\n      */\n-    public static SystemSubject getSystemSubject() {\n-        return Sponge.getGame().getSystemSubject();\n+    public static SystemSubject systemSubject() {\n+        return Sponge.game().systemSubject();\n     }\n \n     /**\n@@ -202,26 +201,26 @@ public static SystemSubject getSystemSubject() {\n      *\n      * @return The {@link MetricsConfigManager} instance\n      */\n-    public static MetricsConfigManager getMetricsConfigManager() {\n-        return Sponge.getGame().getMetricsConfigManager();\n+    public static MetricsConfigManager metricsConfigManager() {\n+        return Sponge.game().metricsConfigManager();\n     }\n \n     /**\n      * Gets the {@link Scheduler} used to schedule async tasks.\n      *\n      * @return The async scheduler\n      */\n-    public static Scheduler getAsyncScheduler() {\n-        return Sponge.getGame().getAsyncScheduler();\n+    public static Scheduler asyncScheduler() {\n+        return Sponge.game().asyncScheduler();\n     }\n \n     /**\n      * Gets the {@link SqlManager} for grabbing sql data sources.\n      *\n      * @return The {@link SqlManager} instance.\n      */\n-    public static SqlManager getSqlManager() {\n-        return Sponge.getGame().getSqlManager();\n+    public static SqlManager sqlManager() {\n+        return Sponge.game().sqlManager();\n     }\n \n     /**\n@@ -233,7 +232,7 @@ public static SqlManager getSqlManager() {\n      *\n      * @return The service provider.\n      */\n-    public static ServiceProvider.GameScoped getServiceProvider() {\n-        return Sponge.getGame().getServiceProvider();\n+    public static ServiceProvider.GameScoped serviceProvider() {\n+        return Sponge.game().serviceProvider();\n     }\n }"
  },
  {
    "sha": "17c6e7a12afc6f7a293bb22be4a53848e59f418a",
    "filename": "src/main/java/org/spongepowered/api/advancement/Advancement.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/Advancement.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/Advancement.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/Advancement.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -48,7 +48,7 @@\n      * @return The new builder\n      */\n     static Builder builder() {\n-        return Sponge.getGame().getBuilderProvider().provide(Builder.class);\n+        return Sponge.game().builderProvider().provide(Builder.class);\n     }\n \n     /**\n@@ -58,14 +58,14 @@ static Builder builder() {\n      *\n      * @return The advancement tree\n      */\n-    Optional<AdvancementTree> getTree();\n+    Optional<AdvancementTree> tree();\n \n     /**\n      * Gets all the children {@link Advancement}s.\n      *\n      * @return The children advancements\n      */\n-    Collection<Advancement> getChildren();\n+    Collection<Advancement> children();\n \n     /**\n      * Gets all the {@link AdvancementCriterion} that should be achieved\n@@ -77,21 +77,21 @@ static Builder builder() {\n      *\n      * @return The criterion\n      */\n-    AdvancementCriterion getCriterion();\n+    AdvancementCriterion criterion();\n \n     /**\n      * Gets the parent {@link Advancement}, if present.\n      *\n      * @return The parent advancement, if present\n      */\n-    Optional<Advancement> getParent();\n+    Optional<Advancement> parent();\n \n     /**\n      * Gets the {@link DisplayInfo} of this advancement, if present.\n      *\n      * @return The display info, if present\n      */\n-    Optional<DisplayInfo> getDisplayInfo();\n+    Optional<DisplayInfo> displayInfo();\n \n     /**\n      * Gets the {@link Component} lines that would be used to"
  },
  {
    "sha": "fc6ffacf40ee029d5948d65e49a67e099598d11b",
    "filename": "src/main/java/org/spongepowered/api/advancement/AdvancementProgress.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementProgress.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementProgress.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/AdvancementProgress.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -41,7 +41,7 @@\n      *\n      * @return The advancement\n      */\n-    Advancement getAdvancement();\n+    Advancement advancement();\n \n     /**\n      * Gets the {@link CriterionProgress} for the given"
  },
  {
    "sha": "2f892b76e05c446f1d40935f5cd7ddaf35bc8a69",
    "filename": "src/main/java/org/spongepowered/api/advancement/AdvancementTree.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementTree.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementTree.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/AdvancementTree.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -40,13 +40,13 @@\n      *\n      * @return The root advancement\n      */\n-    Advancement getRootAdvancement();\n+    Advancement rootAdvancement();\n \n     /**\n      * Gets the background texture of this tree.\n      *\n      * @return The background texture\n      */\n-    Optional<ResourceKey> getBackgroundPath();\n+    Optional<ResourceKey> backgroundPath();\n \n }"
  },
  {
    "sha": "b1d387fcbbfa65a78335bfbb6573bd37c9dae6ed",
    "filename": "src/main/java/org/spongepowered/api/advancement/AdvancementType.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementType.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementType.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/AdvancementType.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -40,6 +40,6 @@\n      *\n      * @return The text format\n      */\n-    TextColor getTextColor();\n+    TextColor textColor();\n \n }"
  },
  {
    "sha": "9f4c573ed6a15a990c7872603f8bc3d9a01b13a1",
    "filename": "src/main/java/org/spongepowered/api/advancement/AdvancementTypes.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementTypes.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/AdvancementTypes.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/AdvancementTypes.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -75,6 +75,6 @@ private AdvancementTypes() {\n     }\n \n     private static DefaultedRegistryReference<AdvancementType> key(final ResourceKey location) {\n-        return RegistryKey.of(RegistryTypes.ADVANCEMENT_TYPE, location).asDefaultedReference(() -> Sponge.getGame().registries());\n+        return RegistryKey.of(RegistryTypes.ADVANCEMENT_TYPE, location).asDefaultedReference(() -> Sponge.game().registries());\n     }\n }"
  },
  {
    "sha": "8825c827c4589651c6e5c8c3185770e2915e70a3",
    "filename": "src/main/java/org/spongepowered/api/advancement/DisplayInfo.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/DisplayInfo.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/DisplayInfo.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/DisplayInfo.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -41,36 +41,36 @@\n      * @return The new builder\n      */\n     static Builder builder() {\n-        return Sponge.getGame().getBuilderProvider().provide(Builder.class);\n+        return Sponge.game().builderProvider().provide(Builder.class);\n     }\n \n     /**\n      * Gets the {@link AdvancementType}.\n      *\n      * @return The advancement type\n      */\n-    AdvancementType getType();\n+    AdvancementType type();\n \n     /**\n      * Gets the description.\n      *\n      * @return The description\n      */\n-    Component getDescription();\n+    Component description();\n \n     /**\n      * Gets the icon.\n      *\n      * @return The icon\n      */\n-    ItemStackSnapshot getIcon();\n+    ItemStackSnapshot icon();\n \n     /**\n      * Gets the title.\n      *\n      * @return The title\n      */\n-    Component getTitle();\n+    Component title();\n \n     /**\n      * Gets whether a toast should be shown."
  },
  {
    "sha": "8a9b4a15ab8c619132232cabd3ef3ef409353b48",
    "filename": "src/main/java/org/spongepowered/api/advancement/TreeLayout.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/TreeLayout.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/TreeLayout.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/TreeLayout.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -37,15 +37,15 @@\n      *\n      * @return The tree\n      */\n-    AdvancementTree getTree();\n+    AdvancementTree tree();\n \n     /**\n      * Gets all the {@link TreeLayoutElement}s that are\n      * present in this layout.\n      *\n      * @return The tree layout elements\n      */\n-    Collection<TreeLayoutElement> getElements();\n+    Collection<TreeLayoutElement> elements();\n \n     /**\n      * Gets the {@link TreeLayoutElement} for the specified {@link Advancement},\n@@ -55,6 +55,6 @@\n      * @param advancement The advancement\n      * @return The tree layout element\n      */\n-    Optional<TreeLayoutElement> getElement(Advancement advancement);\n+    Optional<TreeLayoutElement> element(Advancement advancement);\n \n }"
  },
  {
    "sha": "1c942ec0f823c519a210461c9bf4bd5469539c50",
    "filename": "src/main/java/org/spongepowered/api/advancement/TreeLayoutElement.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/TreeLayoutElement.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/TreeLayoutElement.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/TreeLayoutElement.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -36,14 +36,14 @@\n      *\n      * @return The advancement\n      */\n-    Advancement getAdvancement();\n+    Advancement advancement();\n \n     /**\n      * Gets the position of the {@link Advancement}.\n      *\n      * @return The position\n      */\n-    Vector2d getPosition();\n+    Vector2d position();\n \n     /**\n      * Sets the position of the {@link Advancement}."
  },
  {
    "sha": "3c49e4a3c6c31972988d1be0dd8352c6d61853f1",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/AdvancementCriterion.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/AdvancementCriterion.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/AdvancementCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/AdvancementCriterion.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -45,7 +45,7 @@\n      * @return The empty advancement criterion\n      */\n     static AdvancementCriterion empty() {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).empty();\n+        return Sponge.game().factoryProvider().provide(Factory.class).empty();\n     }\n \n     /**\n@@ -55,7 +55,7 @@ static AdvancementCriterion empty() {\n      * @return The dummy advancement criterion\n      */\n     static AdvancementCriterion dummy() {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).dummy();\n+        return Sponge.game().factoryProvider().provide(Factory.class).dummy();\n     }\n \n     /**\n@@ -64,7 +64,7 @@ static AdvancementCriterion dummy() {\n      * @return The new builder\n      */\n     static Builder builder() {\n-        return Sponge.getGame().getBuilderProvider().provide(Builder.class);\n+        return Sponge.game().builderProvider().provide(Builder.class);\n     }\n \n     /**\n@@ -125,7 +125,7 @@ static Builder builder() {\n      *\n      * @return The trigger\n      */\n-    Optional<FilteredTrigger<?>> getTrigger();\n+    Optional<FilteredTrigger<?>> trigger();\n \n     /**\n      * A builder to create {@link AdvancementCriterion}s."
  },
  {
    "sha": "e332085a6d0af74c94a9e3ff44492106cf81c4e1",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/AndCriterion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/AndCriterion.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/AndCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/AndCriterion.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -45,7 +45,7 @@\n      * @return The AND operation\n      */\n     static AdvancementCriterion of(AdvancementCriterion... criteria) {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).of(criteria);\n+        return Sponge.game().factoryProvider().provide(Factory.class).of(criteria);\n     }\n \n     /**\n@@ -60,7 +60,7 @@ static AdvancementCriterion of(AdvancementCriterion... criteria) {\n      * @return The AND operation\n      */\n     static AdvancementCriterion of(Iterable<AdvancementCriterion> criteria) {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).of(criteria);\n+        return Sponge.game().factoryProvider().provide(Factory.class).of(criteria);\n     }\n \n     interface Factory {"
  },
  {
    "sha": "8bd191e3df9d235cb8c8118965367af37f95c7e3",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/CriterionProgress.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/CriterionProgress.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/CriterionProgress.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/CriterionProgress.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -36,6 +36,6 @@\n      *\n      * @return The criterion\n      */\n-    AdvancementCriterion getCriterion();\n+    AdvancementCriterion criterion();\n \n }"
  },
  {
    "sha": "72551f5593fbdeda41ef375c1fe857ce8617ef41",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/OperatorCriterion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/OperatorCriterion.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/OperatorCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/OperatorCriterion.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -54,14 +54,14 @@\n      *\n      * @return The criteria\n      */\n-    Collection<AdvancementCriterion> getCriteria();\n+    Collection<AdvancementCriterion> criteria();\n \n     /**\n      * Gets the leaf {@link AdvancementCriterion}s. This means that there will\n      * never be any {@link OperatorCriterion}s in this list.\n      *\n      * @return The leaf criteria\n      */\n-    Collection<AdvancementCriterion> getLeafCriteria();\n+    Collection<AdvancementCriterion> leafCriteria();\n \n }"
  },
  {
    "sha": "fe55c6887b7bc1c7ee52ba2f1542f94d1361d292",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/OrCriterion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/OrCriterion.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/OrCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/OrCriterion.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -44,7 +44,7 @@\n      * @return The OR operation\n      */\n     static AdvancementCriterion of(AdvancementCriterion... criteria) {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).of(criteria);\n+        return Sponge.game().factoryProvider().provide(Factory.class).of(criteria);\n     }\n \n     /**\n@@ -59,7 +59,7 @@ static AdvancementCriterion of(AdvancementCriterion... criteria) {\n      * @return The OR operation\n      */\n     static AdvancementCriterion of(Iterable<AdvancementCriterion> criteria) {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).of(criteria);\n+        return Sponge.game().factoryProvider().provide(Factory.class).of(criteria);\n     }\n \n     interface Factory {"
  },
  {
    "sha": "80c47ee25017d5a23f25ea40743fefd01498c475",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/ScoreAdvancementCriterion.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/ScoreAdvancementCriterion.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/ScoreAdvancementCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/ScoreAdvancementCriterion.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -28,7 +28,7 @@\n \n /**\n  * Represents a {@link AdvancementCriterion} that requires a\n- * specific score ({@link #getGoal()}) to be achieved.\n+ * specific score ({@link #goal()}) to be achieved.\n  */\n public interface ScoreAdvancementCriterion extends AdvancementCriterion {\n \n@@ -39,15 +39,15 @@\n      * @return The new builder\n      */\n     static Builder builder() {\n-        return Sponge.getGame().getBuilderProvider().provide(Builder.class);\n+        return Sponge.game().builderProvider().provide(Builder.class);\n     }\n \n     /**\n      * Gets the goal value.\n      *\n      * @return The goal value\n      */\n-    int getGoal();\n+    int goal();\n \n     /**\n      * A builder to create {@link ScoreAdvancementCriterion}s."
  },
  {
    "sha": "db7d26245972ad1db16afbcdd19d573a35da4e17",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/ScoreCriterionProgress.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/ScoreCriterionProgress.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/ScoreCriterionProgress.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/ScoreCriterionProgress.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -33,27 +33,27 @@\n public interface ScoreCriterionProgress extends CriterionProgress {\n \n     @Override\n-    ScoreAdvancementCriterion getCriterion();\n+    ScoreAdvancementCriterion criterion();\n \n     /**\n      * Gets the goal value.\n      *\n      * @return The goal value\n      */\n-    default int getGoal() {\n-        return this.getCriterion().getGoal();\n+    default int goal() {\n+        return this.criterion().goal();\n     }\n \n     /**\n      * Gets the score value.\n      *\n      * @return The score value\n      */\n-    int getScore();\n+    int score();\n \n     /**\n      * Adds the target score value, the score cannot exceed\n-     * the goal value ({@link #getGoal()}) or be under zero.\n+     * the goal value ({@link #goal()}) or be under zero.\n      * The achieved time will be returned if the goal is met.\n      *\n      * @param score The score to set\n@@ -63,7 +63,7 @@ default int getGoal() {\n \n     /**\n      * Adds the target score value, the score cannot exceed\n-     * the goal value ({@link #getGoal()}). The achieved time\n+     * the goal value ({@link #goal()}). The achieved time\n      * will be returned if the goal is met.\n      *\n      * @param score The score to add"
  },
  {
    "sha": "4ff86b3cdaa432f70f23d99662892e20c37fafab",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/trigger/FilteredTrigger.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/trigger/FilteredTrigger.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/trigger/FilteredTrigger.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/trigger/FilteredTrigger.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -41,22 +41,22 @@\n      * @return The builder\n      */\n     static Builder<?> builder() {\n-        return Sponge.getGame().getBuilderProvider().provide(Builder.class);\n+        return Sponge.game().builderProvider().provide(Builder.class);\n     }\n \n     /**\n      * Gets the {@link Trigger}.\n      *\n      * @return The type\n      */\n-    Trigger<C> getType();\n+    Trigger<C> type();\n \n     /**\n      * Gets the {@link FilteredTriggerConfiguration} of this trigger.\n      *\n      * @return The trigger configuration\n      */\n-    C getConfiguration();\n+    C configuration();\n \n     /**\n      * A builder to create {@link FilteredTrigger}s."
  },
  {
    "sha": "3765add97cc3e133182107f8bddb6a79899fa2c5",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/trigger/Trigger.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/trigger/Trigger.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/trigger/Trigger.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/trigger/Trigger.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -65,7 +65,7 @@\n      * @return The builder\n      */\n     static Builder<?> builder() {\n-        return Sponge.getGame().getBuilderProvider().provide(Builder.class);\n+        return Sponge.game().builderProvider().provide(Builder.class);\n     }\n \n     /**\n@@ -75,7 +75,7 @@\n      *\n      * @return The configuration type\n      */\n-    Type getConfigurationType();\n+    Type configurationType();\n \n     /**\n      * Triggers the {@link Trigger} for all the online\n@@ -126,7 +126,7 @@\n          *\n          * <p>By default, the configuration will be loaded with\n          * Sponge-default options, with serializers as defined in\n-         * {@link ConfigManager#getSerializers()}.</p>\n+         * {@link ConfigManager#serializers()}.</p>\n          *\n          * @param configClass The configuration class\n          * @param <T> The configuration type\n@@ -154,7 +154,7 @@\n          *\n          * <p>The configuration will be loaded with the returned\n          * derivation of Sponge-default options, with serializers as defined in\n-         * {@link ConfigManager#getSerializers()}.</p>\n+         * {@link ConfigManager#serializers()}.</p>\n          *\n          * @param configClass The configuration class\n          * @param options A callback that will receive options to modify\n@@ -171,7 +171,7 @@\n          *\n          * <p>By default, the configuration will be loaded with\n          * Sponge-default options, with serializers as defined in\n-         * {@link ConfigManager#getSerializers()}.</p>\n+         * {@link ConfigManager#serializers()}.</p>\n          *\n          * @param configClass The configuration class\n          * @param <T> The configuration type\n@@ -200,7 +200,7 @@\n          *\n          * <p>The configuration will be loaded with the returned\n          * derivation of Sponge-default options, with serializers as defined in\n-         * {@link ConfigManager#getSerializers()}.</p>\n+         * {@link ConfigManager#serializers()}.</p>\n          *\n          * @param configClass The configuration class\n          * @param options A callback that will receive options to modify"
  },
  {
    "sha": "02edd02b4a27649f95a87bb94aa434f8407a6dce",
    "filename": "src/main/java/org/spongepowered/api/advancement/criteria/trigger/Triggers.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/trigger/Triggers.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/advancement/criteria/trigger/Triggers.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/advancement/criteria/trigger/Triggers.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -135,6 +135,6 @@ private Triggers() {\n     }\n \n     private static DefaultedRegistryReference<Trigger<?>> key(final ResourceKey location) {\n-        return RegistryKey.of(RegistryTypes.TRIGGER, location).asDefaultedReference(() -> Sponge.getGame().registries());\n+        return RegistryKey.of(RegistryTypes.TRIGGER, location).asDefaultedReference(() -> Sponge.game().registries());\n     }\n }"
  },
  {
    "sha": "9165f5511150a8040d7a378dc300408ed5f54130",
    "filename": "src/main/java/org/spongepowered/api/adventure/AdventureRegistry.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/adventure/AdventureRegistry.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/adventure/AdventureRegistry.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/adventure/AdventureRegistry.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -43,56 +43,56 @@\n      *\n      * @return The registry\n      */\n-    OfType<TextDecoration> getDecorations();\n+    OfType<TextDecoration> decorations();\n \n     /**\n      * Gets the registry of {@link NamedTextColor}s.\n      *\n      * @return The registry\n      */\n-    OfType<NamedTextColor> getNamedColors();\n+    OfType<NamedTextColor> namedColors();\n \n     /**\n      * Gets the registry of {@link ClickEvent.Action}s.\n      *\n      * @return The registry\n      */\n-    OfType<ClickEvent.Action> getClickEventActions();\n+    OfType<ClickEvent.Action> clickEventActions();\n \n     /**\n      * Gets the registry of {@link HoverEvent.Action}s.\n      *\n      * @return The registry\n      */\n-    OfType<HoverEvent.Action<?>> getHoverEventActions();\n+    OfType<HoverEvent.Action<?>> hoverEventActions();\n \n     /**\n      * Gets the registry of {@link BossBar.Color}s.\n      *\n      * @return The registry\n      */\n-    OfType<BossBar.Color> getBossBarColors();\n+    OfType<BossBar.Color> bossBarColors();\n \n     /**\n      * Gets the registry of {@link BossBar.Overlay}s.\n      *\n      * @return The registry\n      */\n-    OfType<BossBar.Overlay> getBossBarOverlays();\n+    OfType<BossBar.Overlay> bossBarOverlays();\n \n     /**\n      * Gets the registry of {@link BossBar.Flag}s.\n      *\n      * @return The registry\n      */\n-    OfType<BossBar.Flag> getBossBarFlags();\n+    OfType<BossBar.Flag> bossBarFlags();\n \n     /**\n      * Gets the registry of {@link Sound.Source}s.\n      *\n      * @return The registry\n      */\n-    OfType<Sound.Source> getSoundSources();\n+    OfType<Sound.Source> soundSources();\n \n     /**\n      * A registry for an Adventure type.\n@@ -106,15 +106,15 @@\n          * @param value the value\n          * @return the key\n          */\n-        String getKey(final T value);\n+        String key(final T value);\n \n         /**\n          * Gets a value by its key.\n          *\n          * @param key the key\n          * @return the value\n          */\n-        Optional<T> getValue(final String key);\n+        Optional<T> value(final String key);\n \n         /**\n          * Gets the keys."
  },
  {
    "sha": "1a864f6939692973a0ed13d2500e46852e330f4a",
    "filename": "src/main/java/org/spongepowered/api/adventure/Audiences.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/adventure/Audiences.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/c1bbfb296619852809d71f3afdf183a29eb9b955/src/main/java/org/spongepowered/api/adventure/Audiences.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/adventure/Audiences.java?ref=c1bbfb296619852809d71f3afdf183a29eb9b955",
    "patch": "@@ -40,7 +40,7 @@\n      * @return An audience\n      */\n     public static Audience server() {\n-        return Sponge.getGame().getServer();\n+        return Sponge.game().server();\n     }\n \n     /**\n@@ -49,7 +49,7 @@ public static Audience server() {\n      * @return An audience\n      */\n     public static Audience onlinePlayers() {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).onlinePlayers();\n+        return Sponge.game().factoryProvider().provide(Factory.class).onlinePlayers();\n     }\n \n     /**\n@@ -61,7 +61,7 @@ public static Audience onlinePlayers() {\n      */\n     public static Audience withPermission(final String permission) {\n         Objects.requireNonNull(permission);\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class).withPermission(permission);\n+        return Sponge.game().factoryProvider().provide(Factory.class).withPermission(permission);\n     }\n \n     /**\n@@ -70,11 +70,11 @@ public static Audience withPermission(final String permission) {\n      * @return An audience\n      */\n     public static Audience system() {\n-        return Sponge.getGame().getSystemSubject();\n+        return Sponge.game().systemSubject();\n     }\n \n     private static Factory factory() {\n-        return Sponge.getGame().getFactoryProvider().provide(Factory.class);\n+        return Sponge.game().factoryProvider().provide(Factory.class);\n     }\n \n     public interface Factory {"
  }
]
