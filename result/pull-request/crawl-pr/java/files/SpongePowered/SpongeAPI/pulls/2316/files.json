[
  {
    "sha": "eefb30f6ac2a2d42519480b6c07744e49bae4980",
    "filename": "src/main/java/org/spongepowered/api/util/metric/MetricsConfigManager.java",
    "status": "modified",
    "additions": 67,
    "deletions": 9,
    "changes": 76,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/8d6141724ba11ac14ed369723b99307f65153238/src/main/java/org/spongepowered/api/util/metric/MetricsConfigManager.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/8d6141724ba11ac14ed369723b99307f65153238/src/main/java/org/spongepowered/api/util/metric/MetricsConfigManager.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/util/metric/MetricsConfigManager.java?ref=8d6141724ba11ac14ed369723b99307f65153238",
    "patch": "@@ -24,27 +24,52 @@\n  */\n package org.spongepowered.api.util.metric;\n \n+import com.google.inject.Inject;\n import org.spongepowered.api.util.Tristate;\n import org.spongepowered.plugin.PluginContainer;\n \n /**\n  * Provides information about whether a server has granted permission for\n  * server metric data to be transmitted on a per plugin basis.\n  *\n- * <p>This manager is {@code @Inject}able into plugin classes.</p>\n+ * <p>This manager may be {@link Inject injected} into plugin classes.</p>\n  */\n public interface MetricsConfigManager {\n \n     /**\n      * Gets the current <em>global</em> state of collection. The collection state determines\n      * how data collection should be handled.\n      *\n-     * Global state determines how an undefined state for a specific plugin should be handled.\n-     * If a plugin has a state specified then it will override the global state.\n+     * <p>Global state determines how an undefined state for a specific plugin should be\n+     * handled. If a plugin has a state specified then it will override the global state.</p>\n      *\n-     * {@link Tristate#TRUE} Permits data collection\n-     * {@link Tristate#FALSE} Disallows data collection, this has been explicitly set\n-     * {@link Tristate#UNDEFINED} Disallows data collection, this is set by default\n+     * <table>\n+     *     <tr>\n+     *         <th>State</th>\n+     *         <th>Data Collection Permitted</th>\n+     *         <th>Comment</th>\n+     *     </tr>\n+     *     <tr>\n+     *         <td>{@link Tristate#TRUE TRUE}</td>\n+     *         <td>Allowed</td>\n+     *         <td>Server administrator enabled metrics globally.</td>\n+     *     </tr>\n+     *     <tr>\n+     *         <td>{@link Tristate#FALSE FALSE}</td>\n+     *         <td>Disallowed (explicitly)</td>\n+     *         <td>Server administrator disabled metrics globally.</td>\n+     *     </tr>\n+     *     <tr>\n+     *         <td>{@link Tristate#UNDEFINED UNDEFINED} (default)</td>\n+     *         <td>Disallowed (implicitly)</td>\n+     *         <td>The server administrator has made no specific global choice on allowing\n+     *         plugins to perform data collection, and defaults to disallowed.</td>\n+     *     </tr>\n+     * </table>\n+     *\n+     * <p>The value returned from this <em>should not be stored</em>. As the\n+     * configuration/permission can be updated at any time, it is best to check this each\n+     * time server metric collection is due to occur.</p>\n      *\n      * @return The global state of collection\n      */\n@@ -54,9 +79,42 @@\n      * Gets the current state of collection for the specified plugin. The collection state\n      * determines how data collection should be handled.\n      *\n-     * {@link Tristate#TRUE} Permits data collection\n-     * {@link Tristate#FALSE} Disallows data collection, this has been explicitly set\n-     * {@link Tristate#UNDEFINED} Inherit from {@link MetricsConfigManager#getGlobalCollectionState()}, this is set by default\n+     * <p>The plugin collection state acts as an override of the\n+     * {@link #getGlobalCollectionState() global state}, taking precedence when establishing\n+     * whether a plugin is allowed to perform data collection.</p>\n+     *\n+     * <table>\n+     *     <tr>\n+     *         <th>State</th>\n+     *         <th>Data Collection Permitted</th>\n+     *         <th>Comment</th>\n+     *     </tr>\n+     *     <tr>\n+     *         <td>{@link Tristate#TRUE TRUE}</td>\n+     *         <td>Allowed</td>\n+     *         <td>Server administrator enabled metrics for the plugin specifically.</td>\n+     *     </tr>\n+     *     <tr>\n+     *         <td>{@link Tristate#FALSE FALSE}</td>\n+     *         <td>Disallowed</td>\n+     *         <td>Server administrator disabled metrics for the plugin specifically.</td>\n+     *     </tr>\n+     *     <tr>\n+     *         <td>{@link Tristate#UNDEFINED UNDEFINED} (default)</td>\n+     *         <td>Refer to the {@link #getGlobalCollectionState() global state}</td>\n+     *         <td>The server administrator has made no specific choice for this plugin, and\n+     *         the {@link #getGlobalCollectionState() global state} should be used.</td>\n+     *     </tr>\n+     * </table>\n+     *\n+     * <p>The value returned from this <em>should not be stored</em>. As the\n+     * configuration/permission can be updated at any time, it is best to check this each\n+     * time server metric collection is due to occur.</p>\n+     *\n+     * <p>Plugin authors may wish to seek permission to perform data collection, noting that\n+     * a {@link Tristate#FALSE false} state is explicitly set by the server administrator,\n+     * plugins should only seek permission when both the plugin and global states are\n+     * {@link Tristate#UNDEFINED undefined}.</p>\n      *\n      * @param container The {@link PluginContainer}\n      * @return The current collection state"
  }
]
