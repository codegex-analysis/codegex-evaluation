[
  {
    "sha": "7d1a319a94d32e82229987f8eb4ff940fc2be4c3",
    "filename": "src/main/java/org/spongepowered/api/block/transaction/NotificationTicket.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75/src/main/java/org/spongepowered/api/block/transaction/NotificationTicket.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75/src/main/java/org/spongepowered/api/block/transaction/NotificationTicket.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/block/transaction/NotificationTicket.java?ref=7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.block.transaction;\n+\n+import org.spongepowered.api.block.BlockSnapshot;\n+import org.spongepowered.api.world.LocatableBlock;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+public interface NotificationTicket {\n+\n+    LocatableBlock notifier();\n+\n+    default Vector3i notifierPosition() {\n+        return this.notifier().getBlockPosition();\n+    }\n+\n+    BlockSnapshot target();\n+\n+    default Vector3i targetPosition() {\n+        return this.target().getPosition();\n+    }\n+\n+    boolean valid();\n+\n+    void valid(boolean valid);\n+\n+}"
  },
  {
    "sha": "6e605fc3e937351a623953a574339b4b70c41562",
    "filename": "src/main/java/org/spongepowered/api/event/block/NotifyNeighborBlockEvent.java",
    "status": "modified",
    "additions": 19,
    "deletions": 36,
    "changes": 55,
    "blob_url": "https://github.com/SpongePowered/SpongeAPI/blob/7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75/src/main/java/org/spongepowered/api/event/block/NotifyNeighborBlockEvent.java",
    "raw_url": "https://github.com/SpongePowered/SpongeAPI/raw/7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75/src/main/java/org/spongepowered/api/event/block/NotifyNeighborBlockEvent.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/SpongeAPI/contents/src/main/java/org/spongepowered/api/event/block/NotifyNeighborBlockEvent.java?ref=7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75",
    "patch": "@@ -24,52 +24,35 @@\n  */\n package org.spongepowered.api.event.block;\n \n-import org.spongepowered.api.block.BlockState;\n-import org.spongepowered.api.block.BlockType;\n+import org.spongepowered.api.block.transaction.NotificationTicket;\n import org.spongepowered.api.event.Cancellable;\n import org.spongepowered.api.event.Event;\n-import org.spongepowered.api.util.Direction;\n+import org.spongepowered.math.vector.Vector3i;\n \n-import java.util.Map;\n+import java.util.List;\n import java.util.function.Predicate;\n \n /**\n- * Called when a block triggers an update to neighboring {link BlockType}s in\n- * one or more {@link Direction}s. There is a way to mark an \"update\" as being \n- * \"invalid\" or \"cancelled\": {@link #filterDirections(Predicate)} will apply a\n- * {@link Predicate} such that if the predicate returns <code>false</code>, the\n- * {@link Direction} will be removed from the {@link #getNeighbors()} map.\n+ *\n  */\n public interface NotifyNeighborBlockEvent extends Event, Cancellable {\n \n-    /**\n-     * Gets the immutable {@link Map} of {@link Direction} to {@link \n-     * BlockState} of the {@link BlockType} that would normally be\n-     * notified of changes.\n-     *\n-     * @return The original directions map\n-     */\n-    Map<Direction, BlockState> getOriginalNeighbors();\n+    List<NotificationTicket> tickets();\n \n-    /**\n-     * Gets an immutable {@link Map} of {@link Direction} to\n-     * {@link BlockState} of the {@link BlockType} that will be notified of\n-     * an update. If a {@link Direction} is not required or needing to be\n-     * excluded from an update, {@link #filterDirections(Predicate)} will\n-     * perform that exclusion.\n-     *\n-     * @return The map\n-     */\n-    Map<Direction, BlockState> getNeighbors();\n+    default void filterTargetPositions(final Predicate<Vector3i> predicate) {\n+        this.tickets().forEach(ticket -> {\n+            if (predicate.test(ticket.targetPosition())) {\n+                ticket.valid(false);\n+            }\n+        });\n+    }\n \n-    /**\n-     * Filters out {@link Direction}s of the {@link BlockState}s to be\n-     * marked as \"valid\" after this event. If the\n-     * {@link Predicate#test(Object)} returns <code>false</code>, the\n-     * {@link BlockState} is removed from {@link #getNeighbors()} map.\n-     *\n-     * @param predicate The predicate to use for filtering.\n-     */\n-    void filterDirections(Predicate<Direction> predicate);\n+    default void filterTickets(final Predicate<NotificationTicket> predicate) {\n+        this.tickets().forEach(ticket ->{\n+            if (predicate.test(ticket)) {\n+                ticket.valid(false);\n+            }\n+        });\n+    }\n \n }"
  }
]
