[
  {
    "sha": "c1bbfb296619852809d71f3afdf183a29eb9b955",
    "filename": "SpongeAPI",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": null,
    "raw_url": null,
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/SpongeAPI?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -1 +1 @@\n-Subproject commit bea03431744f5f9be3f6af80074c90c8eb435ba6\n+Subproject commit c1bbfb296619852809d71f3afdf183a29eb9b955"
  },
  {
    "sha": "06381bdbf2ed26bc644308cc94eaed0c41f00318",
    "filename": "src/launch/java/org/spongepowered/common/launch/Launch.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/launch/java/org/spongepowered/common/launch/Launch.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/launch/java/org/spongepowered/common/launch/Launch.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/launch/java/org/spongepowered/common/launch/Launch.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -89,7 +89,7 @@ public final boolean isDeveloperEnvironment() {\n \n     public final PluginContainer getMinecraftPlugin() {\n         if (this.minecraftPlugin == null) {\n-            this.minecraftPlugin = this.pluginManager.getPlugin(\"minecraft\").orElse(null);\n+            this.minecraftPlugin = this.pluginManager.plugin(\"minecraft\").orElse(null);\n \n             if (this.minecraftPlugin == null) {\n                 throw new RuntimeException(\"Could not find the plugin representing Minecraft, this is a serious issue!\");\n@@ -101,7 +101,7 @@ public final PluginContainer getMinecraftPlugin() {\n \n     public final PluginContainer getApiPlugin() {\n         if (this.apiPlugin == null) {\n-            this.apiPlugin = this.pluginManager.getPlugin(\"spongeapi\").orElse(null);\n+            this.apiPlugin = this.pluginManager.plugin(\"spongeapi\").orElse(null);\n \n             if (this.apiPlugin == null) {\n                 throw new RuntimeException(\"Could not find the plugin representing SpongeAPI, this is a serious issue!\");\n@@ -113,7 +113,7 @@ public final PluginContainer getApiPlugin() {\n \n     public final PluginContainer getCommonPlugin() {\n         if (this.commonPlugin == null) {\n-            this.commonPlugin = this.pluginManager.getPlugin(\"sponge\").orElse(null);\n+            this.commonPlugin = this.pluginManager.plugin(\"sponge\").orElse(null);\n \n             if (this.commonPlugin == null) {\n                 throw new RuntimeException(\"Could not find the plugin representing Sponge, this is a serious issue!\");"
  },
  {
    "sha": "863350ebe7164145183bc82f14dbbbceb9d951bb",
    "filename": "src/main/java/org/spongepowered/common/AbstractResourceKeyed.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/AbstractResourceKeyed.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/AbstractResourceKeyed.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/AbstractResourceKeyed.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -36,7 +36,7 @@ public AbstractResourceKeyed(final ResourceKey key) {\n     }\n \n     @Override\n-    public final ResourceKey getKey() {\n+    public final ResourceKey key() {\n         return this.key;\n     }\n }"
  },
  {
    "sha": "6f5a835f9abd89910342816cee4e6f7e3f4fb9fb",
    "filename": "src/main/java/org/spongepowered/common/SpongeBootstrap.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeBootstrap.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeBootstrap.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/SpongeBootstrap.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -70,7 +70,7 @@ public static void perform(final String engineName, final Runnable engineStart)\n         SpongeBootstrap.lifecycle.establishGameServices();\n         SpongeBootstrap.lifecycle.establishDataKeyListeners();\n \n-        SpongePacketHandler.init((SpongeChannelRegistry) Sponge.getChannelRegistry());\n+        SpongePacketHandler.init((SpongeChannelRegistry) Sponge.channelRegistry());\n \n         Launch.getInstance().getLogger().info(\"Loading Minecraft {}, please wait...\", engineName);\n         engineStart.run();"
  },
  {
    "sha": "6aa1b82976b2e2ef4a1566773d008ead50d68d8d",
    "filename": "src/main/java/org/spongepowered/common/SpongeCommon.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeCommon.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeCommon.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/SpongeCommon.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -69,7 +69,7 @@ private SpongeCommon() {\n             final @Nullable SpongeGame game = SpongeCommon.game;\n             if (game != null) {\n                 try {\n-                    game.getConfigManager().close();\n+                    game.configManager().close();\n                 } catch (final IOException e) {\n                     SpongeCommon.getLogger().error(\"Failed to shut down configuration watch service\", e);\n                 }\n@@ -95,19 +95,19 @@ public static SpongeGame getGame() {\n     }\n \n     public static MinecraftServer getServer() {\n-        return (MinecraftServer) Sponge.getServer();\n+        return (MinecraftServer) Sponge.server();\n     }\n \n     public static SpongeGameRegistry getRegistry() {\n-        return (SpongeGameRegistry) Sponge.getRegistry();\n+        return (SpongeGameRegistry) Sponge.registry();\n     }\n \n     public static ServerScheduler getServerScheduler() {\n-        return (ServerScheduler) Sponge.getServer().getScheduler();\n+        return (ServerScheduler) Sponge.server().scheduler();\n     }\n \n     public static AsyncScheduler getAsyncScheduler() {\n-        return SpongeCommon.getGame().getAsyncScheduler();\n+        return SpongeCommon.getGame().asyncScheduler();\n     }\n \n     public static Path getGameDirectory() {\n@@ -157,12 +157,12 @@ public static void setActivePlugin(@Nullable final PluginContainer plugin) {\n      * @return True if the event is cancellable and is cancelled, false if not cancelled\n      */\n     public static boolean postEvent(Event event) {\n-        return Sponge.getEventManager().post(event);\n+        return Sponge.eventManager().post(event);\n     }\n \n     @Deprecated\n     public static boolean postEvent(Event event, boolean allowClientThread) {\n-        return Sponge.getEventManager().post(event);\n+        return Sponge.eventManager().post(event);\n     }\n \n     public static int directionToIndex(Direction direction) {"
  },
  {
    "sha": "4c523a075eb579a05a90e5c19663164216979c1e",
    "filename": "src/main/java/org/spongepowered/common/SpongeGame.java",
    "status": "modified",
    "additions": 21,
    "deletions": 22,
    "changes": 43,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeGame.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeGame.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/SpongeGame.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -33,7 +33,6 @@\n import org.spongepowered.api.Platform;\n import org.spongepowered.api.Server;\n import org.spongepowered.api.asset.AssetManager;\n-import org.spongepowered.api.command.manager.CommandManager;\n import org.spongepowered.api.data.DataManager;\n import org.spongepowered.api.event.EventManager;\n import org.spongepowered.api.network.channel.ChannelRegistry;\n@@ -106,106 +105,106 @@ public SpongeGame(final Platform platform, final GameRegistry registry, final Bu\n     }\n \n     @Override\n-    public Path getGameDirectory() {\n+    public Path gameDirectory() {\n         return SpongeCommon.getGameDirectory();\n     }\n \n     @Override\n-    public ServerConsoleSystemSubject getSystemSubject() {\n+    public ServerConsoleSystemSubject systemSubject() {\n         if (this.systemSubject == null) {\n             this.systemSubject = new ServerConsoleSystemSubject();\n         }\n         return this.systemSubject;\n     }\n \n     @Override\n-    public Platform getPlatform() {\n+    public Platform platform() {\n         return this.platform;\n     }\n \n     @Override\n-    public GameRegistry getRegistry() {\n+    public GameRegistry registry() {\n         return this.registry;\n     }\n \n     @Override\n-    public BuilderProvider getBuilderProvider() {\n+    public BuilderProvider builderProvider() {\n         return this.builderProvider;\n     }\n \n     @Override\n-    public FactoryProvider getFactoryProvider() {\n+    public FactoryProvider factoryProvider() {\n         return this.factoryProvider;\n     }\n \n     @Override\n-    public DataManager getDataManager() {\n+    public DataManager dataManager() {\n         return this.dataManager;\n     }\n \n     @Override\n-    public PluginManager getPluginManager() {\n+    public PluginManager pluginManager() {\n         return this.pluginManager;\n     }\n \n     @Override\n-    public EventManager getEventManager() {\n+    public EventManager eventManager() {\n         return this.eventManager;\n     }\n \n     @Override\n-    public AssetManager getAssetManager() {\n+    public AssetManager assetManager() {\n         return this.assetManager;\n     }\n \n     @Override\n-    public PluginConfigManager getConfigManager() {\n+    public PluginConfigManager configManager() {\n         return this.configManager;\n     }\n \n     @Override\n-    public ChannelRegistry getChannelRegistry() {\n+    public ChannelRegistry channelRegistry() {\n         return this.channelRegistry;\n     }\n \n     @Override\n-    public MetricsConfigManager getMetricsConfigManager() {\n+    public MetricsConfigManager metricsConfigManager() {\n         return this.metricsConfigManager;\n     }\n \n     @Override\n-    public SqlManager getSqlManager() {\n+    public SqlManager sqlManager() {\n         return this.sqlManager;\n     }\n \n     @Override\n-    public ServiceProvider.GameScoped getServiceProvider() {\n+    public ServiceProvider.GameScoped serviceProvider() {\n         return this.serviceProvider;\n     }\n \n     @Override\n-    public AsyncScheduler getAsyncScheduler() {\n+    public AsyncScheduler asyncScheduler() {\n         return this.asyncScheduler;\n     }\n \n     @Override\n-    public Locale getLocale(final String locale) {\n+    public Locale locale(final String locale) {\n         return LocaleCache.getLocale(Preconditions.checkNotNull(locale));\n     }\n \n     @Override\n     public boolean isServerAvailable() {\n         if (this.client != null) {\n-            return this.client.getServer().isPresent();\n+            return this.client.server().isPresent();\n         }\n \n         return this.server != null;\n     }\n \n     @Override\n-    public Server getServer() {\n+    public Server server() {\n         if (this.client != null) {\n-            return this.client.getServer().orElseThrow(() -> new IllegalStateException(\"The singleplayer server is not available!\"));\n+            return this.client.server().orElseThrow(() -> new IllegalStateException(\"The singleplayer server is not available!\"));\n         }\n \n         Preconditions.checkState(this.server != null, \"The dedicated server is not available!\");\n@@ -222,7 +221,7 @@ public boolean isClientAvailable() {\n     }\n \n     @Override\n-    public Client getClient() {\n+    public Client client() {\n         Preconditions.checkState(this.client != null, \"The client is not available!\");\n         return this.client;\n     }"
  },
  {
    "sha": "07cc1c7f1e3fa5a3f9132f549f76182782e541ec",
    "filename": "src/main/java/org/spongepowered/common/SpongeLifecycle.java",
    "status": "modified",
    "additions": 28,
    "deletions": 28,
    "changes": 56,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeLifecycle.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeLifecycle.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/SpongeLifecycle.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -78,20 +78,20 @@ public SpongeLifecycle(final Game game, final Injector injector) {\n     }\n \n     public void establishFactories() {\n-        ((SpongeFactoryProvider) this.game.getFactoryProvider()).registerDefaultFactories();\n+        ((SpongeFactoryProvider) this.game.factoryProvider()).registerDefaultFactories();\n     }\n \n     public void establishBuilders() {\n-        ((SpongeBuilderProvider) this.game.getBuilderProvider()).registerDefaultBuilders();\n-        ((SpongeDataManager) this.game.getDataManager()).registerDefaultBuilders();\n+        ((SpongeBuilderProvider) this.game.builderProvider()).registerDefaultBuilders();\n+        ((SpongeDataManager) this.game.dataManager()).registerDefaultBuilders();\n     }\n \n     public void callRegisterFactoryEvent() {\n-        this.game.getEventManager().post(new RegisterFactoryEventImpl(Cause.of(EventContext.empty(), this.game), this.game));\n+        this.game.eventManager().post(new RegisterFactoryEventImpl(Cause.of(EventContext.empty(), this.game), this.game));\n     }\n \n     public void callRegisterBuilderEvent() {\n-        this.game.getEventManager().post(new RegisterBuilderEventImpl(Cause.of(EventContext.empty(), this.game), this.game));\n+        this.game.eventManager().post(new RegisterBuilderEventImpl(Cause.of(EventContext.empty(), this.game), this.game));\n     }\n \n     public void establishGlobalRegistries() {\n@@ -101,21 +101,21 @@ public void establishGlobalRegistries() {\n \n         SpongeRegistries.registerGlobalRegistries((SpongeRegistryHolder) this.game.registries());\n \n-        this.game.getEventManager().post(new AbstractRegisterRegistryEvent.GameScopedImpl(Cause.of(EventContext.empty(), this.game), this.game));\n-        this.game.getEventManager().post(new AbstractRegisterRegistryValueEvent.GameScopedImpl(Cause.of(EventContext.empty(), this.game), this.game));\n+        this.game.eventManager().post(new AbstractRegisterRegistryEvent.GameScopedImpl(Cause.of(EventContext.empty(), this.game), this.game));\n+        this.game.eventManager().post(new AbstractRegisterRegistryValueEvent.GameScopedImpl(Cause.of(EventContext.empty(), this.game), this.game));\n     }\n \n     public void callRegisterDataEvent() {\n-        this.game.getEventManager().post(new RegisterDataEventImpl(Cause.of(EventContext.empty(), Sponge.getGame()), Sponge.getGame(),\n-            (SpongeDataManager) this.game.getDataManager()));\n+        this.game.eventManager().post(new RegisterDataEventImpl(Cause.of(EventContext.empty(), Sponge.game()), Sponge.game(),\n+            (SpongeDataManager) this.game.dataManager()));\n     }\n \n     public void establishDataProviders() {\n-        ((SpongeDataManager) this.game.getDataManager()).registerDefaultProviders();\n+        ((SpongeDataManager) this.game.dataManager()).registerDefaultProviders();\n     }\n \n     public void establishDataKeyListeners() {\n-        ((SpongeDataManager) this.game.getDataManager()).registerKeyListeners();\n+        ((SpongeDataManager) this.game.dataManager()).registerKeyListeners();\n     }\n \n     public void callRegisterDataPackValueEvent(final Path datapackDir) {\n@@ -129,24 +129,24 @@ public void callRegisterDataPackValueEvent(final Path datapackDir) {\n     }\n \n     public void callRegisterChannelEvent() {\n-        ((SpongeChannelRegistry) this.game.getChannelRegistry()).postRegistryEvent();\n+        ((SpongeChannelRegistry) this.game.channelRegistry()).postRegistryEvent();\n     }\n \n     public void initTimings() {\n-        ((SpongeTimingsFactory) this.game.getFactoryProvider().provide(TimingsFactory.class)).init();\n+        ((SpongeTimingsFactory) this.game.factoryProvider().provide(TimingsFactory.class)).init();\n     }\n \n     public void establishGameServices() {\n-        ((SpongeServiceProvider) this.game.getServiceProvider()).init();\n+        ((SpongeServiceProvider) this.game.serviceProvider()).init();\n     }\n \n     public void establishServerServices() {\n-        ((MinecraftServerBridge) this.game.getServer()).bridge$initServices(this.game, this.injector);\n+        ((MinecraftServerBridge) this.game.server()).bridge$initServices(this.game, this.injector);\n     }\n \n     public void establishServerFeatures() {\n         // Yes this looks odd but prevents having to do sided lifecycle solely to always point at the Server\n-        ((SpongeServer) this.game.getServer()).getUsernameCache().load();\n+        ((SpongeServer) this.game.server()).getUsernameCache().load();\n     }\n \n     public SpongeCommandManager createCommandManager() {\n@@ -156,54 +156,54 @@ public SpongeCommandManager createCommandManager() {\n     }\n \n     public void registerPluginListeners() {\n-        for (final PluginContainer plugin : this.filterInternalPlugins(this.game.getPluginManager().getPlugins())) {\n-            this.game.getEventManager().registerListeners(plugin, plugin.getInstance());\n+        for (final PluginContainer plugin : this.filterInternalPlugins(this.game.pluginManager().plugins())) {\n+            this.game.eventManager().registerListeners(plugin, plugin.getInstance());\n         }\n     }\n \n     // Methods are in order of the SpongeCommon lifecycle\n \n     public void callConstructEvent() {\n-        for (final PluginContainer plugin : this.filterInternalPlugins(this.game.getPluginManager().getPlugins())) {\n-            ((SpongeEventManager) this.game.getEventManager()).post(SpongeEventFactory.createConstructPluginEvent(Cause.of(EventContext.empty(),\n+        for (final PluginContainer plugin : this.filterInternalPlugins(this.game.pluginManager().plugins())) {\n+            ((SpongeEventManager) this.game.eventManager()).post(SpongeEventFactory.createConstructPluginEvent(Cause.of(EventContext.empty(),\n                     this.game), this.game, plugin), plugin);\n         }\n     }\n \n     public void establishServerRegistries(final Server server) {\n         SpongeRegistries.registerServerRegistries((SpongeRegistryHolder) server.registries());\n \n-        this.game.getEventManager().post(new AbstractRegisterRegistryEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game), this.game,\n+        this.game.eventManager().post(new AbstractRegisterRegistryEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game), this.game,\n          server));\n \n-        this.game.getEventManager().post(new AbstractRegisterRegistryValueEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game),\n+        this.game.eventManager().post(new AbstractRegisterRegistryValueEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game),\n                 this.game, server));\n     }\n \n     public void establishClientRegistries(final Client client) {\n-        this.game.getEventManager().post(new AbstractRegisterRegistryEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game), this.game,\n+        this.game.eventManager().post(new AbstractRegisterRegistryEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game), this.game,\n                 client));\n \n-        this.game.getEventManager().post(new AbstractRegisterRegistryValueEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game),\n+        this.game.eventManager().post(new AbstractRegisterRegistryValueEvent.EngineScopedImpl<>(Cause.of(EventContext.empty(), this.game),\n                 this.game, client));\n     }\n \n     public void callStartingEngineEvent(final Engine engine) {\n-        this.game.getEventManager().post(SpongeEventFactory.createStartingEngineEvent(PhaseTracker.getCauseStackManager().getCurrentCause(),\n+        this.game.eventManager().post(SpongeEventFactory.createStartingEngineEvent(PhaseTracker.getCauseStackManager().currentCause(),\n                 engine, this.game, (TypeToken<Engine>) TypeToken.get(engine.getClass())));\n     }\n \n     public void callStartedEngineEvent(final Engine engine) {\n-        this.game.getEventManager().post(SpongeEventFactory.createStartedEngineEvent(PhaseTracker.getCauseStackManager().getCurrentCause(),\n+        this.game.eventManager().post(SpongeEventFactory.createStartedEngineEvent(PhaseTracker.getCauseStackManager().currentCause(),\n                 engine, this.game, (TypeToken<Engine>) TypeToken.get(engine.getClass())));\n     }\n \n     public void callLoadedGameEvent() {\n-        this.game.getEventManager().post(SpongeEventFactory.createLoadedGameEvent(PhaseTracker.getCauseStackManager().getCurrentCause(), this.game));\n+        this.game.eventManager().post(SpongeEventFactory.createLoadedGameEvent(PhaseTracker.getCauseStackManager().currentCause(), this.game));\n     }\n \n     public void callStoppingEngineEvent(final Engine engine) {\n-        this.game.getEventManager().post(SpongeEventFactory.createStoppingEngineEvent(PhaseTracker.getCauseStackManager().getCurrentCause(),\n+        this.game.eventManager().post(SpongeEventFactory.createStoppingEngineEvent(PhaseTracker.getCauseStackManager().currentCause(),\n                 engine, this.game, (TypeToken<Engine>) TypeToken.get(engine.getClass())));\n     }\n "
  },
  {
    "sha": "da54941fde99db40666fb868ce43e254662097e4",
    "filename": "src/main/java/org/spongepowered/common/SpongeMinecraftVersion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeMinecraftVersion.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeMinecraftVersion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/SpongeMinecraftVersion.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -51,7 +51,7 @@ public static int compare(ProtocolMinecraftVersion version, MinecraftVersion to)\n     }\n \n     @Override\n-    public String getName() {\n+    public String name() {\n         return this.name;\n     }\n \n@@ -66,7 +66,7 @@ public boolean isLegacy() {\n     }\n \n     @Override\n-    public OptionalInt getDataVersion() {\n+    public OptionalInt dataVersion() {\n         return OptionalInt.of(Constants.MINECRAFT_DATA_VERSION);\n     }\n "
  },
  {
    "sha": "ad7987ab35864ca75ecbbcf32b33378472268532",
    "filename": "src/main/java/org/spongepowered/common/SpongePlatform.java",
    "status": "modified",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongePlatform.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongePlatform.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/SpongePlatform.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -67,35 +67,35 @@ public SpongePlatform(MinecraftVersion minecraftVersion) {\n         this.minecraftPlugin = Launch.getInstance().getMinecraftPlugin();\n \n         final PluginContainer common = Launch.getInstance().getCommonPlugin();\n-        this.platformMap.put(\"Type\", this.getType());\n+        this.platformMap.put(\"Type\", this.type());\n         this.platformMap.put(\"ApiName\", this.apiPlugin.getMetadata().getName());\n         this.platformMap.put(\"ApiVersion\", this.apiPlugin.getMetadata().getVersion());\n         this.platformMap.put(\"CommonName\", common.getMetadata().getName());\n         this.platformMap.put(\"CommonVersion\", common.getMetadata().getVersion());\n         this.platformMap.put(\"ImplementationName\", this.platformPlugin.getMetadata().getName());\n         this.platformMap.put(\"ImplementationVersion\", this.platformPlugin.getMetadata().getVersion());\n-        this.platformMap.put(\"MinecraftVersion\", this.getMinecraftVersion());\n+        this.platformMap.put(\"MinecraftVersion\", this.minecraftVersion());\n     }\n \n     @Override\n-    public Type getType() {\n+    public Type type() {\n         return !Launch.getInstance().isDedicatedServer() ? Type.CLIENT : Type.SERVER;\n     }\n \n     @Override\n-    public Type getExecutionType() {\n-        if (Sponge.isServerAvailable() && Sponge.getServer().onMainThread()) {\n+    public Type executionType() {\n+        if (Sponge.isServerAvailable() && Sponge.server().onMainThread()) {\n             return Type.SERVER;\n         }\n-        if (Sponge.isClientAvailable() && Sponge.getClient().onMainThread()) {\n+        if (Sponge.isClientAvailable() && Sponge.client().onMainThread()) {\n             return Type.CLIENT;\n         }\n \n         return Type.UNKNOWN;\n     }\n \n     @Override\n-    public PluginContainer getContainer(Component component) {\n+    public PluginContainer container(Component component) {\n         switch (component) {\n             case API:\n                 return this.apiPlugin;\n@@ -109,7 +109,7 @@ public PluginContainer getContainer(Component component) {\n     }\n \n     @Override\n-    public final MinecraftVersion getMinecraftVersion() {\n+    public final MinecraftVersion minecraftVersion() {\n         return this.minecraftVersion;\n     }\n \n@@ -121,11 +121,11 @@ public final MinecraftVersion getMinecraftVersion() {\n     @Override\n     public String toString() {\n         return MoreObjects.toStringHelper(this)\n-                .add(\"type\", this.getType())\n-                .add(\"executionType\", this.getExecutionType())\n+                .add(\"type\", this.type())\n+                .add(\"executionType\", this.executionType())\n                 .add(\"api\", this.apiPlugin.getMetadata().getId())\n                 .add(\"implementation\", this.platformPlugin.getMetadata().getId())\n-                .add(\"minecraftVersion\", this.getMinecraftVersion())\n+                .add(\"minecraftVersion\", this.minecraftVersion())\n                 .toString();\n     }\n }"
  },
  {
    "sha": "7cd22834443d9999646992ba07e54e8b50be3839",
    "filename": "src/main/java/org/spongepowered/common/SpongeServer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeServer.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/SpongeServer.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/SpongeServer.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -34,14 +34,15 @@\n public interface SpongeServer extends SpongeEngine, Server {\n \n     @Override\n-    ServerScheduler getScheduler();\n+    ServerScheduler scheduler();\n     \n     @Override\n-    SpongeWorldManager getWorldManager();\n+    SpongeWorldManager worldManager();\n \n     SpongePlayerDataManager getPlayerDataManager();\n \n     UsernameCache getUsernameCache();\n \n-    SpongeCommandManager getCommandManager();\n+    @Override\n+    SpongeCommandManager commandManager();\n }"
  },
  {
    "sha": "51be743c0874e4918ed0f9e4874e7a9907a68a94",
    "filename": "src/main/java/org/spongepowered/common/advancement/SpongeAdvancementBuilder.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeAdvancementBuilder.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeAdvancementBuilder.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/SpongeAdvancementBuilder.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -103,17 +103,17 @@ public Advancement build0() {\n         final ResourceLocation resourceLocation = (ResourceLocation) (Object) key;\n \n         final net.minecraft.advancements.DisplayInfo displayInfo = this.displayInfo == null ? null : new net.minecraft.advancements.DisplayInfo(\n-                ItemStackUtil.fromSnapshotToNative(this.displayInfo.getIcon()),\n-                SpongeAdventure.asVanilla(this.displayInfo.getTitle()),\n-                SpongeAdventure.asVanilla(this.displayInfo.getDescription()),\n+                ItemStackUtil.fromSnapshotToNative(this.displayInfo.icon()),\n+                SpongeAdventure.asVanilla(this.displayInfo.title()),\n+                SpongeAdventure.asVanilla(this.displayInfo.description()),\n                 this.backgroundPath,\n-                (FrameType) (Object) this.displayInfo.getType(),\n+                (FrameType) (Object) this.displayInfo.type(),\n                 this.displayInfo.doesShowToast(),\n                 this.displayInfo.doesAnnounceToChat(),\n                 this.displayInfo.isHidden());\n         final net.minecraft.advancements.Advancement parent = (net.minecraft.advancements.Advancement) this.parent;\n         final Advancement advancement = (Advancement) new net.minecraft.advancements.Advancement(\n-                resourceLocation, parent, displayInfo, rewards, result.getFirst(), result.getSecond());\n+                resourceLocation, parent, displayInfo, rewards, result.first(), result.second());\n         ((AdvancementBridge) advancement).bridge$setCriterion(this.criterion);\n         return advancement;\n     }"
  },
  {
    "sha": "7fb28b8db294ae7fb7a7659fabb50b884d32fef6",
    "filename": "src/main/java/org/spongepowered/common/advancement/SpongeCriterionTrigger.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeCriterionTrigger.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeCriterionTrigger.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/SpongeCriterionTrigger.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -105,7 +105,7 @@ public SpongeFilteredTrigger createInstance(final JsonObject json, final Deseria\n     @Override\n     public void bridge$trigger(final ServerPlayer player) {\n         final PlayerAdvancements playerAdvancements = ((net.minecraft.server.level.ServerPlayer) player).getAdvancements();\n-        final Cause cause = PhaseTracker.getCauseStackManager().getCurrentCause();\n+        final Cause cause = PhaseTracker.getCauseStackManager().currentCause();\n \n         @SuppressWarnings(\"unchecked\") // correct type verified in builder\n         final TypeToken<FilteredTriggerConfiguration> typeToken = (TypeToken<FilteredTriggerConfiguration>) TypeToken.get(this.triggerConfigurationType);\n@@ -118,12 +118,12 @@ public SpongeFilteredTrigger createInstance(final JsonObject json, final Deseria\n                 typeToken, player, (FilteredTrigger) listener.getTriggerInstance(), this.eventHandler == null);\n             if (this.eventHandler != null) {\n                 this.eventHandler.accept(event);\n-                if (!event.getResult()) {\n+                if (!event.result()) {\n                     continue;\n                 }\n             }\n             SpongeCommon.postEvent(event);\n-            if (event.getResult()) {\n+            if (event.result()) {\n                 listener.run(playerAdvancements);\n             }\n         }"
  },
  {
    "sha": "a3110e18ecba314eb519daade3fc7a85142fd092",
    "filename": "src/main/java/org/spongepowered/common/advancement/SpongeDisplayInfoBuilder.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeDisplayInfoBuilder.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeDisplayInfoBuilder.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/SpongeDisplayInfoBuilder.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -110,13 +110,13 @@ public DisplayInfo build() {\n \n     @Override\n     public DisplayInfo.Builder from(final DisplayInfo value) {\n-        this.icon = value.getIcon();\n-        this.description = value.getDescription();\n-        this.advancementType = value.getType();\n+        this.icon = value.icon();\n+        this.description = value.description();\n+        this.advancementType = value.type();\n         this.announceToChat = value.doesAnnounceToChat();\n         this.hidden = value.isHidden();\n         this.showToast = value.doesShowToast();\n-        this.title = value.getTitle();\n+        this.title = value.title();\n         return this;\n     }\n "
  },
  {
    "sha": "28e9c1287b717e919c57771d3e795c88e2d0a5f3",
    "filename": "src/main/java/org/spongepowered/common/advancement/SpongeFilteredTrigger.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeFilteredTrigger.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeFilteredTrigger.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/SpongeFilteredTrigger.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -57,12 +57,12 @@ public ResourceLocation getCriterion() {\n     }\n \n     @Override\n-    public Trigger getType() {\n+    public Trigger type() {\n         return (Trigger) this.triggerType;\n     }\n \n     @Override\n-    public FilteredTriggerConfiguration getConfiguration() {\n+    public FilteredTriggerConfiguration configuration() {\n         return this.configuration;\n     }\n "
  },
  {
    "sha": "ffb6348ab57d78127e4372de67a93df95f8b5214",
    "filename": "src/main/java/org/spongepowered/common/advancement/SpongeFilteredTriggerBuilder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeFilteredTriggerBuilder.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeFilteredTriggerBuilder.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/SpongeFilteredTriggerBuilder.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -60,8 +60,8 @@\n \n     @Override\n     public FilteredTrigger.Builder<C> from(final FilteredTrigger<C> value) {\n-        this.config = value.getConfiguration();\n-        this.type = value.getType();\n+        this.config = value.configuration();\n+        this.type = value.type();\n         return this;\n     }\n "
  },
  {
    "sha": "7b7b1731fbb313e154c9e98281bbf69d4b2d9d62",
    "filename": "src/main/java/org/spongepowered/common/advancement/SpongeTreeLayout.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeTreeLayout.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeTreeLayout.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/SpongeTreeLayout.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -44,35 +44,35 @@ public SpongeTreeLayout(final AdvancementTree tree) {\n     }\n \n     @Override\n-    public AdvancementTree getTree() {\n+    public AdvancementTree tree() {\n         return this.tree;\n     }\n \n     @Override\n-    public Collection<TreeLayoutElement> getElements() {\n+    public Collection<TreeLayoutElement> elements() {\n         final ImmutableSet.Builder<TreeLayoutElement> elements = ImmutableSet.builder();\n-        SpongeTreeLayout.collectElements(this.tree.getRootAdvancement(), elements);\n+        SpongeTreeLayout.collectElements(this.tree.rootAdvancement(), elements);\n         return elements.build();\n     }\n \n     private static void collectElements(final Advancement advancement, final ImmutableSet.Builder<TreeLayoutElement> elements) {\n-        advancement.getDisplayInfo().ifPresent(displayInfo -> elements.add((TreeLayoutElement) displayInfo));\n-        advancement.getChildren().forEach(child -> SpongeTreeLayout.collectElements(child, elements));\n+        advancement.displayInfo().ifPresent(displayInfo -> elements.add((TreeLayoutElement) displayInfo));\n+        advancement.children().forEach(child -> SpongeTreeLayout.collectElements(child, elements));\n     }\n     @Override\n-    public Optional<TreeLayoutElement> getElement(final Advancement advancement) {\n-        final Optional<AdvancementTree> tree = advancement.getTree();\n-        if (!tree.isPresent() || !advancement.getDisplayInfo().isPresent() || !tree.get().equals(this.tree)) {\n+    public Optional<TreeLayoutElement> element(final Advancement advancement) {\n+        final Optional<AdvancementTree> tree = advancement.tree();\n+        if (!tree.isPresent() || !advancement.displayInfo().isPresent() || !tree.get().equals(this.tree)) {\n             return Optional.empty();\n         }\n-        return SpongeTreeLayout.findElementInfo(this.tree.getRootAdvancement(), advancement.getKey()).map(TreeLayoutElement.class::cast);\n+        return SpongeTreeLayout.findElementInfo(this.tree.rootAdvancement(), advancement.key()).map(TreeLayoutElement.class::cast);\n     }\n \n     private static Optional<DisplayInfo> findElementInfo(Advancement advancement, ResourceKey key) {\n-        if (advancement.getKey().equals(key)) {\n-            return advancement.getDisplayInfo();\n+        if (advancement.key().equals(key)) {\n+            return advancement.displayInfo();\n         }\n-        for (Advancement child : advancement.getChildren()) {\n+        for (Advancement child : advancement.children()) {\n             final Optional<DisplayInfo> info = SpongeTreeLayout.findElementInfo(child, key);\n             if (info.isPresent()) {\n                 return info;"
  },
  {
    "sha": "ac1fc87d901a1d9e53012aaee2532a4c62189f10",
    "filename": "src/main/java/org/spongepowered/common/advancement/SpongeTriggerBuilder.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeTriggerBuilder.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/SpongeTriggerBuilder.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/SpongeTriggerBuilder.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -86,7 +86,7 @@\n \n     private static ConfigurationOptions defaultOptions() {\n         return ConfigurationOptions.defaults()\n-                .serializers(SpongeCommon.getGame().getConfigManager().getSerializers());\n+                .serializers(SpongeCommon.getGame().configManager().serializers());\n     }\n \n     @Override\n@@ -178,7 +178,7 @@ private static ConfigurationOptions defaultOptions() {\n \n     @Override\n     public Trigger.Builder<C> from(final Trigger<C> value) {\n-        this.configType = value.getConfigurationType();\n+        this.configType = value.configurationType();\n         if (value instanceof SpongeCriterionTrigger) {\n             this.constructor = (Function<JsonObject, C>) ((SpongeCriterionTrigger) value).constructor;\n             this.eventHandler = (Consumer) ((SpongeCriterionTrigger) value).getEventHandler();\n@@ -223,7 +223,7 @@ private DataSerializableConstructor(final Class<C> dataConfigClass) {\n \n         @Override\n         public C apply(final JsonObject jsonObject) {\n-            final DataBuilder<C> builder = Sponge.getDataManager().getBuilder(this.dataConfigClass).get();\n+            final DataBuilder<C> builder = Sponge.dataManager().builder(this.dataConfigClass).get();\n             try {\n                 final DataView dataView = JsonDataFormat.serialize(SpongeTriggerBuilder.GSON, jsonObject);\n                 return builder.build(dataView).get();"
  },
  {
    "sha": "2c5381c32fe653c45bb74d18cb801009fffe4c23",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/AbstractCriterionBuilder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/AbstractCriterionBuilder.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/AbstractCriterionBuilder.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/AbstractCriterionBuilder.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -64,8 +64,8 @@ public T build() {\n \n     @Override\n     public B from(T value) {\n-        this.trigger = value.getTrigger().orElse(null);\n-        this.name = value.getName();\n+        this.trigger = value.trigger().orElse(null);\n+        this.name = value.name();\n         return (B) this;\n     }\n "
  },
  {
    "sha": "84314436d97769c2b47c9e110090c24f8e660003",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeAndCriterionProgress.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeAndCriterionProgress.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeAndCriterionProgress.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeAndCriterionProgress.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -37,14 +37,14 @@ public SpongeAndCriterionProgress(final AdvancementProgress progress, final Spon\n     }\n \n     @Override\n-    public SpongeAndCriterion getCriterion() {\n-        return (SpongeAndCriterion) super.getCriterion();\n+    public SpongeAndCriterion criterion() {\n+        return (SpongeAndCriterion) super.criterion();\n     }\n \n     @Override\n     public Optional<Instant> get0() {\n         Optional<Instant> time = Optional.empty();\n-        for (final AdvancementCriterion criterion : this.getCriterion().getCriteria()) {\n+        for (final AdvancementCriterion criterion : this.criterion().criteria()) {\n             final Optional<Instant> time1 = this.progress.get(criterion).get().get();\n             if (!time1.isPresent()) {\n                 return Optional.empty();"
  },
  {
    "sha": "4f05ef56c981c7d26afea36f0e8645fd79acc475",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeEmptyCriterion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeEmptyCriterion.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeEmptyCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeEmptyCriterion.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -31,12 +31,12 @@\n public final class SpongeEmptyCriterion implements DefaultedAdvancementCriterion {\n \n     @Override\n-    public String getName() {\n+    public String name() {\n         return \"empty\";\n     }\n \n     @Override\n-    public Optional<FilteredTrigger<?>> getTrigger() {\n+    public Optional<FilteredTrigger<?>> trigger() {\n         return Optional.empty();\n     }\n }"
  },
  {
    "sha": "6f5f5e13f5fbe6f8fca4cc0fcfff28856d09b55c",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterion.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterion.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterion.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -44,17 +44,17 @@\n     @Nullable private Collection<AdvancementCriterion> leafChildrenCriteria;\n \n     SpongeOperatorCriterion(final String namePrefix, final Collection<AdvancementCriterion> criteria) {\n-        this.name = namePrefix + Arrays.toString(criteria.stream().map(AdvancementCriterion::getName).toArray(String[]::new));\n+        this.name = namePrefix + Arrays.toString(criteria.stream().map(AdvancementCriterion::name).toArray(String[]::new));\n         this.criteria = ImmutableSet.copyOf(criteria);\n     }\n \n     @Override\n-    public String getName() {\n+    public String name() {\n         return this.name;\n     }\n \n     @Override\n-    public Optional<FilteredTrigger<?>> getTrigger() {\n+    public Optional<FilteredTrigger<?>> trigger() {\n         return Optional.empty();\n     }\n \n@@ -79,12 +79,12 @@ public String getName() {\n     }\n \n     @Override\n-    public Collection<AdvancementCriterion> getCriteria() {\n+    public Collection<AdvancementCriterion> criteria() {\n         return this.criteria;\n     }\n \n     @Override\n-    public Collection<AdvancementCriterion> getLeafCriteria() {\n+    public Collection<AdvancementCriterion> leafCriteria() {\n         if (this.leafChildrenCriteria == null) {\n             this.leafChildrenCriteria = this.getAllChildrenCriteria0(true);\n         }\n@@ -94,13 +94,13 @@ public String getName() {\n     @Override\n     public Collection<AdvancementCriterion> find(final String name) {\n         return this.getRecursiveChildren().stream()\n-                .filter(c -> c.getName().equals(name)).collect(ImmutableSet.toImmutableSet());\n+                .filter(c -> c.name().equals(name)).collect(ImmutableSet.toImmutableSet());\n     }\n \n     @Override\n     public Optional<AdvancementCriterion> findFirst(final String name) {\n         return this.getRecursiveChildren().stream()\n-                .filter(c -> c.getName().equals(name)).findFirst();\n+                .filter(c -> c.name().equals(name)).findFirst();\n     }\n \n     @Override"
  },
  {
    "sha": "49e97a955c88fbe74651c37ef45adcd4b5a7994b",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterionProgress.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterionProgress.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterionProgress.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOperatorCriterionProgress.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -47,7 +47,7 @@\n     }\n \n     @Override\n-    public SpongeOperatorCriterion getCriterion() {\n+    public SpongeOperatorCriterion criterion() {\n         return this.criterion;\n     }\n \n@@ -64,7 +64,7 @@ public SpongeOperatorCriterion getCriterion() {\n     @Override\n     public Instant grant() {\n         Instant time = null;\n-        for (final AdvancementCriterion criterion : this.criterion.getCriteria()) {\n+        for (final AdvancementCriterion criterion : this.criterion.criteria()) {\n             final Instant time1 = this.progress.get(criterion).get().grant();\n             if (time == null || time1.isAfter(time)) {\n                 time = time1;\n@@ -77,7 +77,7 @@ public Instant grant() {\n     @Override\n     public Optional<Instant> revoke() {\n         final Optional<Instant> previousState = this.get();\n-        for (final AdvancementCriterion criterion : this.criterion.getCriteria()) {\n+        for (final AdvancementCriterion criterion : this.criterion.criteria()) {\n             this.progress.get(criterion).get().revoke();\n         }\n         return previousState;"
  },
  {
    "sha": "f4ea9bce0077a498c5dc7f0e330b154be46c017b",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeOrCriterionProgress.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOrCriterionProgress.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOrCriterionProgress.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeOrCriterionProgress.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -26,8 +26,6 @@\n \n import org.spongepowered.api.advancement.AdvancementProgress;\n import org.spongepowered.api.advancement.criteria.AdvancementCriterion;\n-import org.spongepowered.common.advancement.criterion.SpongeOperatorCriterionProgress;\n-import org.spongepowered.common.advancement.criterion.SpongeOrCriterion;\n \n import java.time.Instant;\n import java.util.Optional;\n@@ -39,13 +37,13 @@ public SpongeOrCriterionProgress(final AdvancementProgress progress, final Spong\n     }\n \n     @Override\n-    public SpongeOrCriterion getCriterion() {\n-        return (SpongeOrCriterion) super.getCriterion();\n+    public SpongeOrCriterion criterion() {\n+        return (SpongeOrCriterion) super.criterion();\n     }\n \n     @Override\n     public boolean achieved() {\n-        for (final AdvancementCriterion criterion : this.getCriterion().getCriteria()) {\n+        for (final AdvancementCriterion criterion : this.criterion().criteria()) {\n             final Optional<Instant> time = this.progress.get(criterion).get().get();\n             if (time.isPresent()) {\n                 return true;\n@@ -57,7 +55,7 @@ public boolean achieved() {\n     @Override\n     public Optional<Instant> get0() {\n         Optional<Instant> time = Optional.empty();\n-        for (final AdvancementCriterion criterion : this.getCriterion().getCriteria()) {\n+        for (final AdvancementCriterion criterion : this.criterion().criteria()) {\n             final Optional<Instant> time1 = this.progress.get(criterion).get().get();\n             if (time1.isPresent() && (!time.isPresent() || time1.get().isAfter(time.get()))) {\n                 time = time1;"
  },
  {
    "sha": "02caa87c0e9e11284b172fb146b7ff2bbc78fee8",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterion.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterion.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterion.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterion.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -67,19 +67,19 @@ public SpongeScoreCriterion(final String name, final List<DefaultedAdvancementCr\n     }\n \n     @Override\n-    public int getGoal() {\n+    public int goal() {\n         return this.internalCriteria.size();\n     }\n \n     @Override\n-    public String getName() {\n+    public String name() {\n         return this.name;\n     }\n \n     @Override\n-    public Optional<FilteredTrigger<?>> getTrigger() {\n+    public Optional<FilteredTrigger<?>> trigger() {\n         // The first internal criterion holds the trigger\n-        return this.internalCriteria.get(0).getTrigger();\n+        return this.internalCriteria.get(0).trigger();\n     }\n \n     @Override"
  },
  {
    "sha": "c4aeead89a57db7da612ec7892ed45fd94a01935",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionBuilder.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionBuilder.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionBuilder.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionBuilder.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -45,7 +45,7 @@ ScoreAdvancementCriterion build0() {\n \n     @Override\n     public ScoreAdvancementCriterion.Builder from(final ScoreAdvancementCriterion value) {\n-        this.goal = value.getGoal();\n+        this.goal = value.goal();\n         return super.from(value);\n     }\n "
  },
  {
    "sha": "79bb20ba350569acb0aa475366b7b625b8f27d59",
    "filename": "src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionProgress.java",
    "status": "modified",
    "additions": 15,
    "deletions": 15,
    "changes": 30,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionProgress.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionProgress.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/advancement/criterion/SpongeScoreCriterionProgress.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -57,12 +57,12 @@ public SpongeScoreCriterionProgress(final AdvancementProgress progress, final Sp\n     }\n \n     @Override\n-    public ScoreAdvancementCriterion getCriterion() {\n+    public ScoreAdvancementCriterion criterion() {\n         return this.criterion;\n     }\n \n     @Override\n-    public int getScore() {\n+    public int score() {\n         if (this.score == -1) {\n             this.score = 0;\n             for (final AdvancementCriterion criterion : this.criterion.internalCriteria) {\n@@ -77,31 +77,31 @@ public int getScore() {\n \n     @Override\n     public Optional<Instant> set(final int score) {\n-        checkState(score >= 0 && score <= this.getGoal(), \"Score cannot be negative or greater than the goal.\");\n-        int lastScore = this.getScore();\n+        checkState(score >= 0 && score <= this.goal(), \"Score cannot be negative or greater than the goal.\");\n+        int lastScore = this.score();\n         if (lastScore == score) {\n             return this.get();\n         }\n         final CriterionEvent.Score.Change event;\n-        final Cause cause = PhaseTracker.getCauseStackManager().getCurrentCause();\n-        final Advancement advancement = this.progress.getAdvancement();\n+        final Cause cause = PhaseTracker.getCauseStackManager().currentCause();\n+        final Advancement advancement = this.progress.advancement();\n         final ServerPlayer player = ((PlayerAdvancementsBridge) ((AdvancementProgressBridge) this.progress).bridge$getPlayerAdvancements()).bridge$getPlayer();\n-        if (lastScore == this.getGoal()) {\n+        if (lastScore == this.goal()) {\n             event = SpongeEventFactory.createCriterionEventScoreRevoke(\n-                    cause, advancement, this.getCriterion(), player, lastScore, score);\n-        } else if (score == this.getGoal()) {\n+                    cause, advancement, this.criterion(), player, lastScore, score);\n+        } else if (score == this.goal()) {\n             event = SpongeEventFactory.createCriterionEventScoreGrant(\n-                    cause, advancement, this.getCriterion(), player, Instant.now(), lastScore, score);\n+                    cause, advancement, this.criterion(), player, Instant.now(), lastScore, score);\n         } else {\n             event = SpongeEventFactory.createCriterionEventScoreChange(\n-                    cause, advancement, this.getCriterion(), player, lastScore, score);\n+                    cause, advancement, this.criterion(), player, lastScore, score);\n         }\n         if (SpongeCommon.postEvent(event)) {\n             return this.get();\n         }\n         SpongeScoreCriterion.BYPASS_EVENT = true;\n         // This is the only case a instant will be returned\n-        if (score == this.getGoal()) {\n+        if (score == this.goal()) {\n             Instant instant = null;\n             for (final AdvancementCriterion criterion : this.criterion.internalCriteria) {\n                 final org.spongepowered.api.advancement.criteria.CriterionProgress progress = this.progress.get(criterion).get();\n@@ -136,12 +136,12 @@ public int getScore() {\n \n     @Override\n     public Optional<Instant> add(final int score) {\n-        return this.set(Mth.clamp(this.getScore() + score, 0, this.getGoal()));\n+        return this.set(Mth.clamp(this.score() + score, 0, this.goal()));\n     }\n \n     @Override\n     public Optional<Instant> remove(final int score) {\n-        return this.set(Mth.clamp(this.getScore() - score, 0, this.getGoal()));\n+        return this.set(Mth.clamp(this.score() - score, 0, this.goal()));\n     }\n \n     @Override\n@@ -160,7 +160,7 @@ public int getScore() {\n \n     @Override\n     public Instant grant() {\n-        return this.set(this.getGoal()).get();\n+        return this.set(this.goal()).get();\n     }\n \n     @Override"
  },
  {
    "sha": "787d834a7339ad651686c2b19f433ccf6faa12e5",
    "filename": "src/main/java/org/spongepowered/common/adventure/AdventureRegistryImpl.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/adventure/AdventureRegistryImpl.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/adventure/AdventureRegistryImpl.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/adventure/AdventureRegistryImpl.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -49,42 +49,42 @@\n     private final OfType<Sound.Source> soundSources = new ForIndex<>(Sound.Source.NAMES);\n \n     @Override\n-    public OfType<TextDecoration> getDecorations() {\n+    public OfType<TextDecoration> decorations() {\n         return this.decorations;\n     }\n \n     @Override\n-    public OfType<NamedTextColor> getNamedColors() {\n+    public OfType<NamedTextColor> namedColors() {\n         return this.namedColors;\n     }\n \n     @Override\n-    public OfType<ClickEvent.Action> getClickEventActions() {\n+    public OfType<ClickEvent.Action> clickEventActions() {\n         return this.clickEventActions;\n     }\n \n     @Override\n-    public OfType<HoverEvent.Action<?>> getHoverEventActions() {\n+    public OfType<HoverEvent.Action<?>> hoverEventActions() {\n         return this.hoverEventActions;\n     }\n \n     @Override\n-    public OfType<BossBar.Color> getBossBarColors() {\n+    public OfType<BossBar.Color> bossBarColors() {\n         return this.bossBarColors;\n     }\n \n     @Override\n-    public OfType<BossBar.Overlay> getBossBarOverlays() {\n+    public OfType<BossBar.Overlay> bossBarOverlays() {\n         return this.bossBarOverlays;\n     }\n \n     @Override\n-    public OfType<BossBar.Flag> getBossBarFlags() {\n+    public OfType<BossBar.Flag> bossBarFlags() {\n         return this.bossBarFlags;\n     }\n \n     @Override\n-    public OfType<Sound.Source> getSoundSources() {\n+    public OfType<Sound.Source> soundSources() {\n         return this.soundSources;\n     }\n \n@@ -96,12 +96,12 @@\n         }\n \n         @Override\n-        public String getKey(final T value) {\n+        public String key(final T value) {\n             return this.registry.key(value);\n         }\n \n         @Override\n-        public Optional<T> getValue(final String key) {\n+        public Optional<T> value(final String key) {\n             return Optional.ofNullable(this.registry.value(key));\n         }\n "
  },
  {
    "sha": "f6bd09ebd20da8f535a01d3d7fbd84439bb28565",
    "filename": "src/main/java/org/spongepowered/common/adventure/SpongeCallback.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/adventure/SpongeCallback.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/adventure/SpongeCallback.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/adventure/SpongeCallback.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -62,9 +62,9 @@\n \n         this.executors.invalidateAll();\n         return Command.builder()\n-                .setShortDescription(Component.text(\"Execute a callback registered as part of a TextComponent. Primarily for internal use\"))\n-                .parameter(Parameter.builder(TypeTokens.COMMAND_CAUSE_CONSUMER).setKey(this.executorKey).parser(new CallbackValueParameter()).build())\n-                .setExecutor(this::commandCallback)\n+                .shortDescription(Component.text(\"Execute a callback registered as part of a TextComponent. Primarily for internal use\"))\n+                .addParameter(Parameter.builder(TypeTokens.COMMAND_CAUSE_CONSUMER).key(this.executorKey).addParser(new CallbackValueParameter()).build())\n+                .executor(this::commandCallback)\n                 .build();\n     }\n \n@@ -75,7 +75,7 @@ public UUID registerCallback(final Consumer<CommandCause> causeConsumer) {\n     }\n \n     public CommandResult commandCallback(@NonNull final CommandContext context) throws CommandException {\n-        context.requireOne(this.executorKey).accept(context.getCause());\n+        context.requireOne(this.executorKey).accept(context.cause());\n         return CommandResult.success();\n     }\n \n@@ -90,7 +90,7 @@ public CommandResult commandCallback(@NonNull final CommandContext context) thro\n \n         @Override\n         @NonNull\n-        public Optional<? extends Consumer<CommandCause>> getValue(\n+        public Optional<? extends Consumer<CommandCause>> parseValue(\n                 final Parameter.@NonNull Key<? super Consumer<CommandCause>> parameterKey,\n                 final ArgumentReader.@NonNull Mutable reader,\n                 final CommandContext.@NonNull Builder context) throws ArgumentParseException {"
  },
  {
    "sha": "f1cffa0dd28a2293e0d547847941896a848cee5e",
    "filename": "src/main/java/org/spongepowered/common/adventure/SpongeResolveOperation.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/adventure/SpongeResolveOperation.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/adventure/SpongeResolveOperation.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/adventure/SpongeResolveOperation.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -50,7 +50,7 @@ public static SpongeResolveOperation newCustomTranslations() {\n         return new SpongeResolveOperation() {\n             @Override\n             public Component resolve(final Component input, final CommandCause senderContext, final @Nullable Entity viewer) {\n-                final Locale targetLocale = viewer instanceof ServerPlayer ? ((ServerPlayer) viewer).getLocale() : Locale.getDefault();\n+                final Locale targetLocale = viewer instanceof ServerPlayer ? ((ServerPlayer) viewer).locale() : Locale.getDefault();\n                 return GlobalTranslator.render(input, targetLocale);\n             }\n         };"
  },
  {
    "sha": "37e038734c0fdbca0c038037deaec6457010aed4",
    "filename": "src/main/java/org/spongepowered/common/asset/SpongeAsset.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/asset/SpongeAsset.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d/src/main/java/org/spongepowered/common/asset/SpongeAsset.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/asset/SpongeAsset.java?ref=6b51ec7b2dd87dbf040e9e4718254f9f59cbb78d",
    "patch": "@@ -40,12 +40,12 @@\n     }\n \n     @Override\n-    public PluginContainer getOwner() {\n+    public PluginContainer owner() {\n         return this.plugin;\n     }\n \n     @Override\n-    public URL getUrl() {\n+    public URL url() {\n         return this.url;\n     }\n }"
  }
]
