[
  {
    "sha": "7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75",
    "filename": "SpongeAPI",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": null,
    "raw_url": null,
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/SpongeAPI?ref=f2aa1102383ce2ae7cc6898ef8270e030614ee61",
    "patch": "@@ -1 +1 @@\n-Subproject commit cdc08dd49caa3bbe4713ae2d0c23d6f124d94377\n+Subproject commit 7e7067ede3f8ee9c783579d8dc9e8f2ac4796d75"
  },
  {
    "sha": "f5c58b666593f510a6354c5c1fe0bbdc09d1f3fe",
    "filename": "src/main/java/org/spongepowered/common/block/SpongeNotificationTicket.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/block/SpongeNotificationTicket.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/block/SpongeNotificationTicket.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/block/SpongeNotificationTicket.java?ref=f2aa1102383ce2ae7cc6898ef8270e030614ee61",
    "patch": "@@ -0,0 +1,91 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.block;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.block.BlockSnapshot;\n+import org.spongepowered.api.block.transaction.NotificationTicket;\n+import org.spongepowered.api.world.LocatableBlock;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public final class SpongeNotificationTicket implements NotificationTicket {\n+\n+    private final LocatableBlock notifier;\n+    private final BlockSnapshot target;\n+    private boolean valid = true;\n+\n+    public SpongeNotificationTicket(final LocatableBlock notifier, final BlockSnapshot target) {\n+        this.notifier = notifier;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public LocatableBlock notifier() {\n+        return this.notifier;\n+    }\n+\n+    @Override\n+    public BlockSnapshot target() {\n+        return this.target;\n+    }\n+\n+    @Override\n+    public boolean valid() {\n+        return this.valid;\n+    }\n+\n+    @Override\n+    public void valid(final boolean valid) {\n+        this.valid = valid;\n+    }\n+\n+    @Override\n+    public boolean equals(final @Nullable Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || this.getClass() != o.getClass()) {\n+            return false;\n+        }\n+        final SpongeNotificationTicket that = (SpongeNotificationTicket) o;\n+        return this.valid == that.valid && this.notifier.equals(that.notifier) && this.target.equals(that.target);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(this.notifier, this.target, this.valid);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new StringJoiner(\", \", SpongeNotificationTicket.class.getSimpleName() + \"[\", \"]\")\n+            .add(\"notifier=\" + this.notifier)\n+            .add(\"target=\" + this.target)\n+            .add(\"valid=\" + this.valid)\n+            .toString();\n+    }\n+}"
  },
  {
    "sha": "a85a6c5deaaccf990536884ae2932a56f4f40f00",
    "filename": "src/main/java/org/spongepowered/common/block/package-info.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/block/package-info.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/block/package-info.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/block/package-info.java?ref=f2aa1102383ce2ae7cc6898ef8270e030614ee61",
    "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+@DefaultQualifier(NonNull.class)\n+package org.spongepowered.common.block;\n+\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.framework.qual.DefaultQualifier;\n\\ No newline at end of file"
  },
  {
    "sha": "8da973b4ed5473f2d09eb645fb82e0851914f919",
    "filename": "src/main/java/org/spongepowered/common/event/SpongeCommonEventFactory.java",
    "status": "modified",
    "additions": 0,
    "deletions": 39,
    "changes": 39,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/event/SpongeCommonEventFactory.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/event/SpongeCommonEventFactory.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/event/SpongeCommonEventFactory.java?ref=f2aa1102383ce2ae7cc6898ef8270e030614ee61",
    "patch": "@@ -499,45 +499,6 @@ public static ChangeBlockEvent callChangeBlockEventModifyLiquidBreak(\n         }\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    @Nullable\n-    public static NotifyNeighborBlockEvent callNotifyNeighborEvent(final World world, final BlockPos sourcePos, final EnumSet<net.minecraft.core.Direction> notifiedSides) {\n-        final PhaseContext<?> context = PhaseTracker.getInstance().getPhaseContext();\n-        // Don't fire notify events during world gen or while restoring\n-        if (context.isWorldGeneration() || context.isRestoring()) {\n-            return null;\n-        }\n-        try (final CauseStackManager.StackFrame frame = PhaseTracker.getCauseStackManager().pushCauseFrame()) {\n-            final BlockState blockstate = (BlockState) ((net.minecraft.world.level.Level) world).getBlockState(sourcePos);\n-            final LocatableBlock locatable = new SpongeLocatableBlockBuilder().world((org.spongepowered.api.world.server.ServerWorld) world).position(sourcePos.getX(), sourcePos.getY(),\n-                    sourcePos.getZ())\n-                    .state(blockstate)\n-                    .build();\n-            if (context.getNotifier().isPresent()) {\n-                context.addCreatorAndNotifierToCauseStack(frame);\n-            } else {\n-\n-                final LevelChunkBridge mixinChunk = (LevelChunkBridge) ((ServerLevel) world).getChunkAt(sourcePos);\n-                mixinChunk.bridge$getBlockCreator(sourcePos).ifPresent(creator -> frame.addContext(EventContextKeys.CREATOR, creator));\n-                mixinChunk.bridge$getBlockNotifier(sourcePos).ifPresent(user -> frame.addContext(EventContextKeys.NOTIFIER, user));\n-            }\n-            PhaseTracker.getCauseStackManager().pushCause(locatable);\n-\n-            final Map<Direction, BlockState> neighbors = new EnumMap<>(Direction.class);\n-            for (final net.minecraft.core.Direction notificationSide : notifiedSides) {\n-                final BlockPos offset = sourcePos.relative(notificationSide);\n-                final Direction direction = DirectionFacingProvider.INSTANCE.getKey(notificationSide).get();\n-                final net.minecraft.world.level.block.state.BlockState notificationState = ((ServerLevel) world).getBlockState(offset);\n-                neighbors.put(direction, (BlockState) notificationState);\n-            }\n-\n-            final NotifyNeighborBlockEvent event =\n-                    SpongeEventFactory.createNotifyNeighborBlockEvent(PhaseTracker.getCauseStackManager().getCurrentCause(), neighbors, neighbors);\n-            SpongeCommon.postEvent(event);\n-            return event;\n-        }\n-    }\n-\n     public static InteractEntityEvent.Primary callInteractEntityEventPrimary(final net.minecraft.server.level.ServerPlayer player, final ItemStack stack, final net.minecraft.world.entity.Entity entity, final InteractionHand hand) {\n         try (final CauseStackManager.StackFrame frame = PhaseTracker.getCauseStackManager().pushCauseFrame()) {\n             SpongeCommonEventFactory.applyCommonInteractContext(player, stack, hand, null, entity, frame);"
  },
  {
    "sha": "aa2a205a50445b358eae942007e4218b88697790",
    "filename": "src/main/java/org/spongepowered/common/event/tracking/context/transaction/NeighborNotification.java",
    "status": "modified",
    "additions": 65,
    "deletions": 28,
    "changes": 93,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/event/tracking/context/transaction/NeighborNotification.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/event/tracking/context/transaction/NeighborNotification.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/event/tracking/context/transaction/NeighborNotification.java?ref=f2aa1102383ce2ae7cc6898ef8270e030614ee61",
    "patch": "@@ -26,33 +26,34 @@\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMultimap;\n+import net.minecraft.core.BlockPos;\n+import net.minecraft.server.level.ServerLevel;\n+import net.minecraft.world.level.block.Block;\n+import net.minecraft.world.level.block.entity.BlockEntity;\n+import net.minecraft.world.level.block.state.BlockState;\n import org.checkerframework.checker.nullness.qual.NonNull;\n import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.block.transaction.NotificationTicket;\n import org.spongepowered.api.event.Cause;\n import org.spongepowered.api.event.CauseStackManager;\n import org.spongepowered.api.event.Event;\n import org.spongepowered.api.event.SpongeEventFactory;\n import org.spongepowered.api.event.block.NotifyNeighborBlockEvent;\n-import org.spongepowered.api.util.Direction;\n import org.spongepowered.api.world.LocatableBlock;\n+import org.spongepowered.common.block.SpongeBlockSnapshot;\n+import org.spongepowered.common.block.SpongeBlockSnapshotBuilder;\n+import org.spongepowered.common.block.SpongeNotificationTicket;\n import org.spongepowered.common.event.tracking.PhaseContext;\n import org.spongepowered.common.event.tracking.context.transaction.type.TransactionType;\n import org.spongepowered.common.event.tracking.context.transaction.type.TransactionTypes;\n-import org.spongepowered.common.util.DirectionUtil;\n import org.spongepowered.common.util.PrettyPrinter;\n import org.spongepowered.common.world.server.SpongeLocatableBlockBuilder;\n+import org.spongepowered.math.vector.Vector3i;\n \n-import java.util.Collections;\n-import java.util.EnumMap;\n-import java.util.Map;\n import java.util.Optional;\n import java.util.StringJoiner;\n import java.util.function.BiConsumer;\n import java.util.function.Supplier;\n-import net.minecraft.core.BlockPos;\n-import net.minecraft.server.level.ServerLevel;\n-import net.minecraft.world.level.block.Block;\n-import net.minecraft.world.level.block.state.BlockState;\n \n final class NeighborNotification extends GameTransaction<NotifyNeighborBlockEvent> {\n     final BlockState original;\n@@ -64,10 +65,14 @@\n     final BlockState originalState;\n     private final Supplier<ServerLevel> serverWorld;\n     private Supplier<LocatableBlock> locatableBlock;\n+    private Supplier<SpongeBlockSnapshot> targetSnapshot;\n+    private Supplier<NotificationTicket> ticketSupplier;\n \n-    NeighborNotification(final Supplier<ServerLevel> serverWorldSupplier,\n+    NeighborNotification(\n+        final Supplier<ServerLevel> serverWorldSupplier,\n         final BlockState notifyState, final BlockPos notifyPos,\n-        final Block sourceBlock, final BlockPos sourcePos\n+        final Block sourceBlock, final BlockPos sourcePos,\n+        @Nullable final BlockEntity existingTile\n     ) {\n         super(TransactionTypes.NEIGHBOR_NOTIFICATION.get(), ((org.spongepowered.api.world.server.ServerWorld) serverWorldSupplier.get()).getKey());\n         this.affectedPosition = sourcePos;\n@@ -87,6 +92,25 @@\n             this.locatableBlock = () -> locatableBlock;\n             return locatableBlock;\n         };\n+        this.targetSnapshot = () -> {\n+            final SpongeBlockSnapshotBuilder pooled = SpongeBlockSnapshotBuilder.pooled();\n+            pooled.world(this.serverWorld.get())\n+                .position(new Vector3i(notifyPos.getX(), notifyPos.getY(), notifyPos.getZ()))\n+                .blockState(notifyState);\n+            if (existingTile != null) {\n+                pooled.tileEntity(existingTile);\n+            }\n+            final SpongeBlockSnapshot snapshot = pooled.build();\n+            this.targetSnapshot = () -> snapshot;\n+            return snapshot;\n+        };\n+        this.ticketSupplier = () -> {\n+            final LocatableBlock notifier = this.locatableBlock.get();\n+            final SpongeBlockSnapshot target = this.targetSnapshot.get();\n+            final SpongeNotificationTicket ticket = new SpongeNotificationTicket(notifier, target);\n+            this.ticketSupplier = () -> ticket;\n+            return ticket;\n+        };\n     }\n \n     @Override\n@@ -106,10 +130,13 @@ public String toString() {\n \n     @Override\n     public Optional<BiConsumer<PhaseContext<@NonNull ?>, CauseStackManager.StackFrame>> getFrameMutator(\n-        @Nullable GameTransaction<@NonNull ?> parent\n+        @Nullable final GameTransaction<@NonNull ?> parent\n     ) {\n         return Optional.of((context, frame) -> {\n-            frame.pushCause(this.locatableBlock.get());\n+            if (parent instanceof ChangeBlock) {\n+                frame.pushCause(((ChangeBlock) parent).original);\n+            }\n+            frame.pushCause(this.ticketSupplier.get());\n         });\n     }\n \n@@ -120,27 +147,19 @@ public void addToPrinter(final PrettyPrinter printer) {\n             .add(\" %s : %s, %s\", \"Notification\", this.originalState, this.notifyPos);\n     }\n \n+    @SuppressWarnings(\"UnstableApiUsage\")\n     @Override\n     public Optional<NotifyNeighborBlockEvent> generateEvent(final PhaseContext<@NonNull ?> context,\n         final @Nullable GameTransaction<@NonNull ?> parent,\n         final ImmutableList<GameTransaction<NotifyNeighborBlockEvent>> transactions,\n         final Cause currentCause,\n-        ImmutableMultimap.Builder<TransactionType, ? extends Event> transactionPostEventBuilder\n+        final ImmutableMultimap.Builder<TransactionType, ? extends Event> transactionPostEventBuilder\n     ) {\n-        final Map<Direction, org.spongepowered.api.block.BlockState> neighbors = new EnumMap<Direction, org.spongepowered.api.block.BlockState>(Direction.class);\n-        for (GameTransaction<NotifyNeighborBlockEvent> transaction : transactions) {\n-            final NeighborNotification neighborNotification = (NeighborNotification) transaction;\n-            final BlockPos sourcePos = neighborNotification.sourcePos;\n-            final BlockPos notifyPos = neighborNotification.notifyPos;\n-            int var6 = Integer.signum(notifyPos.getX() - sourcePos.getX());\n-            int var7 = Integer.signum(notifyPos.getY() - sourcePos.getY());\n-            int var8 = Integer.signum(notifyPos.getZ() - sourcePos.getZ());\n-            final net.minecraft.core.Direction dir = net.minecraft.core.Direction.fromNormal(var6, var7, var8);\n+        final ImmutableList<NotificationTicket> tickets = transactions.stream()\n+            .map(transaction -> ((NeighborNotification) transaction).ticketSupplier.get())\n+            .collect(ImmutableList.toImmutableList());\n \n-            neighbors.put(DirectionUtil.getFor(dir), ((org.spongepowered.api.block.BlockState) neighborNotification.originalState));\n-        }\n-\n-        return Optional.of(SpongeEventFactory.createNotifyNeighborBlockEvent(currentCause, neighbors, neighbors));\n+        return Optional.of(SpongeEventFactory.createNotifyNeighborBlockEvent(currentCause, tickets));\n     }\n \n     @Override\n@@ -152,7 +171,25 @@ public void restore() {\n     public boolean markCancelledTransactions(final NotifyNeighborBlockEvent event,\n         final ImmutableList<? extends GameTransaction<NotifyNeighborBlockEvent>> blockTransactions\n     ) {\n-        return false;\n+        boolean cancelledAny = false;\n+        for (final NotificationTicket transaction : event.tickets()) {\n+            if (!transaction.valid()) {\n+                cancelledAny = true;\n+                for (final GameTransaction<NotifyNeighborBlockEvent> gameTransaction : blockTransactions) {\n+                    final NeighborNotification blockTransaction = (NeighborNotification) gameTransaction;\n+                    final Vector3i position = transaction.targetPosition();\n+                    final BlockPos affectedPosition = blockTransaction.affectedPosition;\n+                    if (position.getX() == affectedPosition.getX()\n+                        && position.getY() == affectedPosition.getY()\n+                        && position.getZ() == affectedPosition.getZ()\n+                    ) {\n+                        gameTransaction.markCancelled();\n+                    }\n+                }\n+            }\n+        }\n+\n+        return cancelledAny;\n     }\n \n }"
  },
  {
    "sha": "2d8281a704dc0b5ef245b89aab7c7bba6b179edd",
    "filename": "src/main/java/org/spongepowered/common/event/tracking/context/transaction/TransactionalCaptureSupplier.java",
    "status": "modified",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/event/tracking/context/transaction/TransactionalCaptureSupplier.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/f2aa1102383ce2ae7cc6898ef8270e030614ee61/src/main/java/org/spongepowered/common/event/tracking/context/transaction/TransactionalCaptureSupplier.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/src/main/java/org/spongepowered/common/event/tracking/context/transaction/TransactionalCaptureSupplier.java?ref=f2aa1102383ce2ae7cc6898ef8270e030614ee61",
    "patch": "@@ -26,6 +26,18 @@\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMultimap;\n+import net.minecraft.core.BlockPos;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.server.level.ServerLevel;\n+import net.minecraft.world.damagesource.CombatEntry;\n+import net.minecraft.world.damagesource.DamageSource;\n+import net.minecraft.world.entity.Entity;\n+import net.minecraft.world.entity.LivingEntity;\n+import net.minecraft.world.level.Level;\n+import net.minecraft.world.level.block.Block;\n+import net.minecraft.world.level.block.entity.BlockEntity;\n+import net.minecraft.world.level.block.state.BlockState;\n+import net.minecraft.world.level.chunk.LevelChunk;\n import org.checkerframework.checker.nullness.qual.MonotonicNonNull;\n import org.checkerframework.checker.nullness.qual.NonNull;\n import org.checkerframework.checker.nullness.qual.Nullable;\n@@ -39,8 +51,8 @@\n import org.spongepowered.common.accessor.world.damagesource.CombatEntryAccessor;\n import org.spongepowered.common.accessor.world.damagesource.CombatTrackerAccessor;\n import org.spongepowered.common.block.SpongeBlockSnapshot;\n-import org.spongepowered.common.bridge.world.level.TrackerBlockEventDataBridge;\n import org.spongepowered.common.bridge.world.TrackedWorldBridge;\n+import org.spongepowered.common.bridge.world.level.TrackerBlockEventDataBridge;\n import org.spongepowered.common.event.tracking.PhaseContext;\n import org.spongepowered.common.event.tracking.PhaseTracker;\n import org.spongepowered.common.event.tracking.TrackingUtil;\n@@ -58,18 +70,6 @@\n import java.util.StringJoiner;\n import java.util.function.BiConsumer;\n import java.util.function.Supplier;\n-import net.minecraft.core.BlockPos;\n-import net.minecraft.nbt.CompoundTag;\n-import net.minecraft.server.level.ServerLevel;\n-import net.minecraft.world.damagesource.CombatEntry;\n-import net.minecraft.world.damagesource.DamageSource;\n-import net.minecraft.world.entity.Entity;\n-import net.minecraft.world.entity.LivingEntity;\n-import net.minecraft.world.level.Level;\n-import net.minecraft.world.level.block.Block;\n-import net.minecraft.world.level.block.entity.BlockEntity;\n-import net.minecraft.world.level.block.state.BlockState;\n-import net.minecraft.world.level.chunk.LevelChunk;\n \n @SuppressWarnings(\"rawtypes\")\n public final class TransactionalCaptureSupplier implements ICaptureSupplier {\n@@ -199,7 +199,7 @@ public void logNeighborNotification(final Supplier<ServerLevel> serverWorldSuppl\n         final BlockPos immutableTarget, final BlockState targetBlockState,\n         @Nullable final BlockEntity existingTile\n     ) {\n-        final NeighborNotification notificationTransaction = new NeighborNotification(serverWorldSupplier, targetBlockState, immutableTarget, blockIn, immutableFrom);\n+        final NeighborNotification notificationTransaction = new NeighborNotification(serverWorldSupplier, targetBlockState, immutableTarget, blockIn, immutableFrom, existingTile);\n         this.logTransaction(notificationTransaction);\n     }\n "
  },
  {
    "sha": "3cefcb3ed1a4af32bc23bd157de2b4218887a9f0",
    "filename": "testplugins/src/main/java/org/spongepowered/test/notifyneighbor/NotifyNeighborTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 9,
    "changes": 17,
    "blob_url": "https://github.com/SpongePowered/Sponge/blob/f2aa1102383ce2ae7cc6898ef8270e030614ee61/testplugins/src/main/java/org/spongepowered/test/notifyneighbor/NotifyNeighborTest.java",
    "raw_url": "https://github.com/SpongePowered/Sponge/raw/f2aa1102383ce2ae7cc6898ef8270e030614ee61/testplugins/src/main/java/org/spongepowered/test/notifyneighbor/NotifyNeighborTest.java",
    "contents_url": "https://api.github.com/repos/SpongePowered/Sponge/contents/testplugins/src/main/java/org/spongepowered/test/notifyneighbor/NotifyNeighborTest.java?ref=f2aa1102383ce2ae7cc6898ef8270e030614ee61",
    "patch": "@@ -27,18 +27,13 @@\n import com.google.inject.Inject;\n import net.kyori.adventure.text.Component;\n import org.spongepowered.api.Sponge;\n-import org.spongepowered.api.block.BlockState;\n import org.spongepowered.api.command.parameter.CommandContext;\n import org.spongepowered.api.event.Listener;\n import org.spongepowered.api.event.block.NotifyNeighborBlockEvent;\n-import org.spongepowered.api.util.Direction;\n-import org.spongepowered.api.world.LocatableBlock;\n import org.spongepowered.plugin.PluginContainer;\n import org.spongepowered.plugin.jvm.Plugin;\n import org.spongepowered.test.LoadableModule;\n \n-import java.util.Map;\n-\n @Plugin(\"notifyneighbor\")\n public final class NotifyNeighborTest implements LoadableModule {\n \n@@ -57,11 +52,15 @@ public void enable(final CommandContext ctx) {\n     public static class NotifyNeighborListener {\n         @Listener\n         public void onChangeBlock(final NotifyNeighborBlockEvent event) {\n-            final LocatableBlock causeBlock = event.getCause().first(LocatableBlock.class).get();\n-            for (Map.Entry<Direction, BlockState> entry : event.getNeighbors().entrySet()) {\n+            final Object root = event.getCause().root();\n+            Sponge.getGame().getSystemSubject().sendMessage(Component.text(root + \" is the cause\"));\n+            event.tickets().forEach(ticket -> {\n                 Sponge.getGame().getSystemSubject().sendMessage(\n-                        Component.text(causeBlock.getBlockPosition() + \" \" + causeBlock.getBlockState() + \" notified \" + entry.getValue() + \" in direction \" + entry.getKey()));\n-            }\n+                    Component.text(ticket.notifier().getBlockPosition() + \" \"\n+                        + ticket.notifier().getBlockState() + \" notified \" + ticket.target().getState()\n+                        + \" in direction \" + ticket.target()));\n+\n+            });\n         }\n     }\n }"
  }
]
