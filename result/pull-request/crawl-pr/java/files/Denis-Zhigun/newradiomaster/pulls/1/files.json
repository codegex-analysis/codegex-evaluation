[
  {
    "sha": "3fbf45e06875d3f1ad5bc046735b37456950b4f4",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 27,
    "deletions": 15,
    "changes": 42,
    "blob_url": "https://github.com/Denis-Zhigun/newradiomaster/blob/a44d79bb254afc48ec546941e340814686ba8765/pom.xml",
    "raw_url": "https://github.com/Denis-Zhigun/newradiomaster/raw/a44d79bb254afc48ec546941e340814686ba8765/pom.xml",
    "contents_url": "https://api.github.com/repos/Denis-Zhigun/newradiomaster/contents/pom.xml?ref=a44d79bb254afc48ec546941e340814686ba8765",
    "patch": "@@ -53,26 +53,38 @@\n                     </execution>\n                     <execution>\n                         <id>check</id>\n-                        <phase>verify</phase>\n                         <goals>\n                             <goal>check</goal>\n                         </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule>\n+                                    <element>CLASS</element>\n+                                    <limits>\n+                                        <limit>\n+                                            <counter>BRANCH</counter>\n+                                            <value>COVEREDRATIO</value>\n+                                        </limit>\n+                                    </limits>\n+                                </rule>\n+                                <rule>\n+                                    <element>METHOD</element>\n+                                    <includes>\n+                                        <include>next*</include>\n+                                        <include>prev*</include>\n+                                    </includes>\n+                                    <limits>\n+                                        <limit>\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+                                        </limit>\n+                                    </limits>\n+                                </rule>\n+                            </rules>\n+                        </configuration>\n                     </execution>\n                 </executions>\n-                <configuration>\n-                    <rules>\n-                        <rule>\n-                            <limits>\n-                                <limit>\n-                                    <counter>LINE</counter>\n-                                    <value>COVEREDRATIO</value>\n-                                    <minimum>100%</minimum>\n-                                </limit>\n-                            </limits>\n-                        </rule>\n-                    </rules>\n-                </configuration>\n-            </plugin>\n+                            </plugin>\n         </plugins>\n     </build>\n </project>"
  },
  {
    "sha": "0d51a37356d9cb14d653fb505b0f02b1d2dc47ad",
    "filename": "src/main/java/ru/netology/domain/Radio.java",
    "status": "modified",
    "additions": 6,
    "deletions": 71,
    "changes": 77,
    "blob_url": "https://github.com/Denis-Zhigun/newradiomaster/blob/a44d79bb254afc48ec546941e340814686ba8765/src/main/java/ru/netology/domain/Radio.java",
    "raw_url": "https://github.com/Denis-Zhigun/newradiomaster/raw/a44d79bb254afc48ec546941e340814686ba8765/src/main/java/ru/netology/domain/Radio.java",
    "contents_url": "https://api.github.com/repos/Denis-Zhigun/newradiomaster/contents/src/main/java/ru/netology/domain/Radio.java?ref=a44d79bb254afc48ec546941e340814686ba8765",
    "patch": "@@ -2,11 +2,15 @@\n \n public class Radio {\n     private int minStation = 0;\n-    private int maxStation = 9;\n+    private int maxStation = 10;\n     private int currentStation;\n     private int currentVolume;\n     private int minVolume = 0;\n-    private int maxVolume = 10;\n+    private int maxVolume = 100;\n+\n+    public Radio (int maxStation) {\n+        this.maxStation = maxStation;\n+    }\n \n     public int getCurrentStation() {\n         return currentStation;\n@@ -82,72 +86,3 @@ public void soundVolumeMinos () {\n     }\n \n \n-//package ru.netology.domain;\n-//\n-//public class Radio {\n-//    private int currentStation;\n-//    private int stationMin = 0;\n-//    private int stationMax = 9;\n-//    private int currentVolume;\n-//    private int volumeMax = 10;\n-//    private int volumeMin = 0;\n-//\n-//    public int getCurrentStationConsole() {\n-//        return currentStation;\n-//    }\n-//\n-//    public void setCurrentStationConsole(int currentStation) {\n-//        if (currentStation >= stationMin && currentStation <= stationMax) {\n-//            this.currentStation = currentStation;\n-//        }\n-//    }\n-//\n-//    public void NextRadioStation(int currentStation) {\n-//        if (currentStation < stationMax) {\n-////            this.currentStation = stationMin;\n-////            return;\n-////        }\n-//        currentStation++;\n-////        return;\n-//    }\n-//\n-////    public void PrevRadioStation(int currentStation) {\n-////        if (currentStation == stationMin) {\n-////            this.currentStation = stationMax;\n-////            return;\n-////        }\n-////        currentStation--;\n-////        return;\n-////    }\n-////\n-////\n-////    public int getCurrentVolumeConsole() {\n-////        return currentVolume;\n-////    }\n-////\n-////    public void setCurrentVolumeConsole(int currentVolume) {\n-////        if (currentVolume >= volumeMin && currentVolume <= volumeMax) {\n-////            this.currentVolume = currentVolume;\n-////        }\n-////    }\n-////\n-////\n-////    public void VolumePlus(int currentVolume) {\n-////        if (currentVolume >= volumeMax) {\n-////            this.currentVolume = volumeMax;\n-////            return;\n-////        }\n-////        currentVolume++;\n-////        return;\n-////    }\n-////\n-////    public void VolumeMinos(int currentVolume){\n-////        if (currentVolume<=volumeMin){\n-////            this.currentVolume=volumeMin;\n-////            return;\n-////        }\n-////        currentVolume--;\n-////        return;\n-//   }\n-//\n-//}\n\\ No newline at end of file"
  },
  {
    "sha": "d7440310367d6b961fa002d2c8fedb75938fc0cb",
    "filename": "src/test/java/ru/netology/domain/RadioTest.java",
    "status": "modified",
    "additions": 52,
    "deletions": 52,
    "changes": 104,
    "blob_url": "https://github.com/Denis-Zhigun/newradiomaster/blob/a44d79bb254afc48ec546941e340814686ba8765/src/test/java/ru/netology/domain/RadioTest.java",
    "raw_url": "https://github.com/Denis-Zhigun/newradiomaster/raw/a44d79bb254afc48ec546941e340814686ba8765/src/test/java/ru/netology/domain/RadioTest.java",
    "contents_url": "https://api.github.com/repos/Denis-Zhigun/newradiomaster/contents/src/test/java/ru/netology/domain/RadioTest.java?ref=a44d79bb254afc48ec546941e340814686ba8765",
    "patch": "@@ -5,129 +5,129 @@\n import static org.junit.jupiter.api.Assertions.*;\n \n class RadioTest {\n-    Radio orange = new Radio();\n+    Radio fruit = new Radio(10);\n \n     @Test\n     public void shouldNextStation() {\n-        int currentStation = 9;\n-        orange.setCurrentStation(currentStation);\n-        orange.nextRadioStation();\n-        assertEquals(0, orange.getCurrentStation());\n+        int currentStation = 10;\n+        fruit.setCurrentStation(currentStation);\n+        fruit.nextRadioStation();\n+        assertEquals(0, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldNextStation1() {\n         int currentStation = 5;\n-        orange.setCurrentStation(currentStation);\n-        orange.nextRadioStation();\n-        assertEquals(6, orange.getCurrentStation());\n+        fruit.setCurrentStation(currentStation);\n+        fruit.nextRadioStation();\n+        assertEquals(6, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldNextStation2() {\n-        int currentStation = 10;\n-        orange.setCurrentStation(currentStation);\n-        orange.nextRadioStation();\n-        assertEquals(1, orange.getCurrentStation());\n+        int currentStation = 11;\n+        fruit.setCurrentStation(currentStation);\n+        fruit.nextRadioStation();\n+        assertEquals(1, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldPrevStation() {\n         int currentStation = 0;\n-        orange.setCurrentStation(currentStation);\n-        orange.prevRadioStation();\n-        assertEquals(9, orange.getCurrentStation());\n+        fruit.setCurrentStation(currentStation);\n+        fruit.prevRadioStation();\n+        assertEquals(10, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldPrevStation1() {\n         int currentStation = -1;\n-        orange.setCurrentStation(currentStation);\n-        orange.prevRadioStation();\n-        assertEquals(9, orange.getCurrentStation());\n+        fruit.setCurrentStation(currentStation);\n+        fruit.prevRadioStation();\n+        assertEquals(10, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldPrevStation2() {\n         int currentStation = 5;\n-        orange.setCurrentStation(currentStation);\n-        orange.prevRadioStation();\n-        assertEquals(4, orange.getCurrentStation());\n+        fruit.setCurrentStation(currentStation);\n+        fruit.prevRadioStation();\n+        assertEquals(4, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldInputRadioStation() {\n         int RadioStation = 7;\n         int currentStation = 2;\n-        orange.setCurrentStation(currentStation);\n-        orange.inputRadioStation(RadioStation);\n-        assertEquals(7, orange.getCurrentStation());\n+        fruit.setCurrentStation(currentStation);\n+        fruit.inputRadioStation(RadioStation);\n+        assertEquals(7, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldInputRadioStation1() {\n         int RadioStation = 10;\n         int currentStation = 2;\n-        orange.setCurrentStation(currentStation);\n-        orange.inputRadioStation(RadioStation);\n-        assertEquals(2, orange.getCurrentStation());\n+        fruit.setCurrentStation(currentStation);\n+        fruit.inputRadioStation(RadioStation);\n+        assertEquals(10, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldInputRadioStation2() {\n         int RadioStation = -1;\n         int currentStation = 2;\n-        orange.setCurrentStation(currentStation);\n-        orange.inputRadioStation(RadioStation);\n-        assertEquals(2, orange.getCurrentStation());\n+        fruit.setCurrentStation(currentStation);\n+        fruit.inputRadioStation(RadioStation);\n+        assertEquals(2, fruit.getCurrentStation());\n     }\n \n     @Test\n     public void shouldSoundVolumePlus() {\n-        int currentVolume = 10;\n-        orange.setCurrentVolume(currentVolume);\n-        orange.soundVolumePlus();\n-        assertEquals(10, orange.getCurrentVolume());\n+        int currentVolume = 99;\n+        fruit.setCurrentVolume(currentVolume);\n+        fruit.soundVolumePlus();\n+        assertEquals(100, fruit.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldSoundVolumePlus1() {\n-        int currentVolume = 5;\n-        orange.setCurrentVolume(currentVolume);\n-        orange.soundVolumePlus();\n-        assertEquals(6, orange.getCurrentVolume());\n+        int currentVolume = 55;\n+        fruit.setCurrentVolume(currentVolume);\n+        fruit.soundVolumePlus();\n+        assertEquals(56, fruit.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldSoundVolumePlus2() {\n-        int currentVolume = 11;\n-        orange.setCurrentVolume(currentVolume);\n-        orange.soundVolumePlus();\n-        assertEquals(1, orange.getCurrentVolume());\n+        int currentVolume = 0;\n+        fruit.setCurrentVolume(currentVolume);\n+        fruit.soundVolumePlus();\n+        assertEquals(1, fruit.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldSoundVolumeMinos() {\n-        int currentVolume = 5;\n-        orange.setCurrentVolume(currentVolume);\n-        orange.soundVolumeMinos();\n-        assertEquals(4, orange.getCurrentVolume());\n+        int currentVolume = 1;\n+        fruit.setCurrentVolume(currentVolume);\n+        fruit.soundVolumeMinos();\n+        assertEquals(0, fruit.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldSoundVolumeMinos1() {\n         int currentVolume = 0;\n-        orange.setCurrentVolume(currentVolume);\n-        orange.soundVolumeMinos();\n-        assertEquals(0, orange.getCurrentVolume());\n+        fruit.setCurrentVolume(currentVolume);\n+        fruit.soundVolumeMinos();\n+        assertEquals(0, fruit.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldSoundVolumeMinos2() {\n         int currentVolume = -1;\n-            orange.setCurrentVolume(currentVolume);\n-        orange.soundVolumeMinos();\n-        assertEquals(0, orange.getCurrentVolume());\n+        fruit.setCurrentVolume(currentVolume);\n+        fruit.soundVolumeMinos();\n+        assertEquals(0, fruit.getCurrentVolume());\n     }\n \n "
  }
]
