[
  {
    "sha": "3b5fb23374929a0188e7e4580236baa78c7c7ecf",
    "filename": "HW/Lesson6/HW6.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson6/HW6.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson6/HW6.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson6/HW6.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,72 @@\n+package HW.Lesson6;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.Scanner;\n+\n+public class HW6 {\n+    private final static Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) {\n+\n+        writeText(\"Text1.txt\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\");\n+        writeText(\"Text2.txt\", \"ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\");\n+        rewriteText(\"Text1.txt\", \"TextNew.txt\");\n+        rewriteText(\"Text2.txt\", \"TextNew.txt\");\n+        StringBuilder searchText = new StringBuilder();\n+        writeStringBuilder(\"TextNew.txt\", searchText);\n+        String searchWord = scanner.nextLine();\n+        String search = searchText.toString();\n+        System.out.println(search);\n+        System.out.println(\"Слово \" + searchWord + \" есть в тексте? \" + search.contains(searchWord));\n+\n+\n+    }\n+\n+    public static void writeText(String nameText, String text) {\n+        try {\n+            FileOutputStream fileOutputStream = new FileOutputStream(nameText);\n+            PrintStream ps = new PrintStream(fileOutputStream);\n+            ps.println(text);\n+            ps.close();\n+            fileOutputStream.flush();\n+            fileOutputStream.close();\n+        } catch (IOException exception) {\n+            System.out.println(exception.getMessage());\n+        }\n+    }\n+\n+    public static void rewriteText(String nameTextOut, String nameTextIn) {\n+        try {\n+            FileInputStream fileInputStream = new FileInputStream(nameTextOut);\n+            int inputByteData;\n+            while ((inputByteData = fileInputStream.read()) != -1) {\n+                FileOutputStream fileOutputStream = new FileOutputStream(nameTextIn, true);\n+                PrintStream ps = new PrintStream(fileOutputStream);\n+                ps.print((char) inputByteData);\n+                ps.close();\n+                fileOutputStream.flush();\n+                fileOutputStream.close();\n+            }\n+        } catch (IOException ioexception) {\n+            System.out.println(ioexception.getMessage());\n+        }\n+\n+    }\n+\n+    public static void writeStringBuilder(String nameTextOut, StringBuilder stringBuilderName) {\n+        try {\n+            FileInputStream fileInputStream = new FileInputStream(nameTextOut);\n+            int inputByteData;\n+            while ((inputByteData = fileInputStream.read()) != -1) {\n+                stringBuilderName.append((char) inputByteData);\n+            }\n+        } catch (IOException ioexception) {\n+            System.out.println(ioexception.getMessage());\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "43cddb20fcc1ffb8f2eb947c581e93a8557f9fe0",
    "filename": "HW/Lesson7/GameMap.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/GameMap.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/GameMap.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/GameMap.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,16 @@\n+package HW.Lesson7;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+\n+public class GameMap extends JPanel {\n+    public static final int GM_HVH = 0;\n+    public static final int GM_HVA = 1;\n+\n+    GameMap() {\n+        setBackground(new Color(81, 179, 182));\n+    }\n+    void startGameWithParams(int mapSize_X, int mapSize_Y, int winLength, int modeGame) {\n+        System.out.println(\"mapSize_X= \" + mapSize_X + \"mapSize_X= \" + mapSize_Y + \"winLength= \" + winLength + \"modeGame= \" + modeGame);\n+    }\n+}"
  },
  {
    "sha": "9b85c73548bdade4b21a5b75ab8ea190cafb416d",
    "filename": "HW/Lesson7/HW7.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/HW7.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/HW7.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/HW7.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,7 @@\n+package HW.Lesson7;\n+\n+public class HW7 {\n+    public static void main(String[] args) {\n+        new MainWindow();\n+    }\n+}"
  },
  {
    "sha": "204793426b09844043085eed48e4fd0cf879847a",
    "filename": "HW/Lesson7/MainWindow.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/MainWindow.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/MainWindow.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/MainWindow.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,59 @@\n+package HW.Lesson7;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class MainWindow extends JFrame {\n+    private static final int WIN_WIDTH = 500;\n+    private static final int WIN_HEIGHT = 550;\n+    private static final int WIN_POS_X = 650;\n+    private static final int WIN_POS_Y = 200;\n+\n+    private Settings settings;\n+    private GameMap gameMap;\n+\n+    MainWindow() {\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n+        setLocation(WIN_POS_X, WIN_POS_Y);\n+        setTitle(\"Game\");\n+        setResizable(false);\n+\n+        settings = new Settings(this);\n+        gameMap = new GameMap();\n+\n+        JButton btnStartGame = new JButton(\"Start new game\");\n+        btnStartGame.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                settings.setVisible(true);\n+            }\n+        });\n+\n+        JButton btnExitGame = new JButton(\"Exit game\");\n+        btnExitGame.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                System.exit(0);\n+            }\n+        });\n+\n+        JPanel panelForButton = new JPanel();\n+        panelForButton.setLayout(new GridLayout(1, 2));\n+        panelForButton.add(btnExitGame);\n+        panelForButton.add(btnStartGame);\n+        add(panelForButton, BorderLayout.SOUTH);\n+        add(gameMap);\n+\n+        setVisible(true);\n+\n+    }\n+\n+    void getParamsSettingAndStartGameStartGameWithParams(int mapSize_X, int mapSize_Y, int winLength, int modeGame) {\n+        gameMap.startGameWithParams(mapSize_X, mapSize_Y, winLength, modeGame);\n+    }\n+\n+\n+}"
  },
  {
    "sha": "b9451b82e7b42507a20c02efdd508196c2e21a72",
    "filename": "HW/Lesson7/Settings.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/Settings.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/Settings.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/Settings.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,113 @@\n+package HW.Lesson7;\n+\n+import javax.swing.*;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class Settings extends JFrame {\n+    private static final int WIN_WIDTH = 350;\n+    private static final int WIN_HEIGHT = 250;\n+\n+    private final int MIN_MAP_SIZE = 3;\n+    private final int MAX_MAP_SIZE = 10;\n+    private final int MIN_WIN_LENGTH = 3;\n+    private final String MAP_SIZE_PREFIX = \"Map size is: \";\n+    private final String WIN_LENGTH_PREFIX = \"Win Length is: \";\n+    private MainWindow mainWindow;\n+    private JRadioButton humanVsHuman;\n+    private JRadioButton humanVsAi;\n+    private JSlider sliderSetSizeMap;\n+    private JSlider sliderSetWinLength;\n+    private JButton btnStart;\n+\n+    Settings(MainWindow mainWindow) {\n+        this.mainWindow = mainWindow;\n+        Rectangle mainWindowBounds = mainWindow.getBounds();\n+        int posX = (int) mainWindowBounds.getCenterX() - WIN_WIDTH / 2;\n+        int posY = (int) mainWindowBounds.getCenterY() - WIN_HEIGHT / 2;\n+\n+        setLocation(posX, posY);\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n+        setTitle(\"Settings\");\n+        setResizable(false);\n+        setLayout(new GridLayout(10, 1));\n+        setGameModeControl();\n+        setSizeMapControl();\n+        finishSettings();\n+    }\n+\n+    private void startNextGame() {\n+\n+        int gameMode;\n+        if (humanVsHuman.isSelected()) {\n+            gameMode = GameMap.GM_HVH;\n+        } else if (humanVsAi.isSelected()) {\n+            gameMode = GameMap.GM_HVA;\n+        } else {\n+            throw new RuntimeException(\"Invalid choose game mode\");\n+        }\n+\n+        int mapSize = sliderSetSizeMap.getValue();\n+        int winLn = sliderSetWinLength.getValue();\n+        mainWindow.getParamsSettingAndStartGameStartGameWithParams(mapSize, mapSize, winLn, gameMode);\n+\n+        setVisible(false);\n+    }\n+\n+    private void setGameModeControl() {\n+        add(new JLabel(\"Choose your game mode\"));\n+        humanVsHuman = new JRadioButton(\"Human Vs Human\", true);\n+        humanVsAi = new JRadioButton(\"Human Vs Ai\");\n+        ButtonGroup gameModeGroup = new ButtonGroup();\n+        gameModeGroup.add(humanVsHuman);\n+        gameModeGroup.add(humanVsAi);\n+        add(humanVsHuman);\n+        add(humanVsAi);\n+    }\n+\n+    private void setSizeMapControl() {\n+        JLabel lbMapSize = new JLabel(MAP_SIZE_PREFIX + MIN_MAP_SIZE);\n+        JLabel lbWinLen = new JLabel(WIN_LENGTH_PREFIX + MIN_WIN_LENGTH);\n+\n+        sliderSetSizeMap = new JSlider(MIN_MAP_SIZE, MAX_MAP_SIZE, MIN_MAP_SIZE);\n+        sliderSetSizeMap.addChangeListener(new ChangeListener() {\n+            @Override\n+            public void stateChanged(ChangeEvent e) {\n+                int currentMapSize = sliderSetSizeMap.getValue();\n+                lbMapSize.setText(MAP_SIZE_PREFIX + currentMapSize);\n+                sliderSetWinLength.setMaximum(currentMapSize);\n+            }\n+        });\n+\n+        sliderSetWinLength = new JSlider(MIN_WIN_LENGTH, MIN_MAP_SIZE, MIN_WIN_LENGTH);\n+        sliderSetWinLength.addChangeListener(new ChangeListener() {\n+            @Override\n+            public void stateChanged(ChangeEvent e) {\n+                lbWinLen.setText(WIN_LENGTH_PREFIX + sliderSetWinLength.getValue());\n+            }\n+        });\n+\n+\n+        add(new JLabel(\"Choose map size\"));\n+        add(lbMapSize);\n+        add(sliderSetSizeMap);\n+        add(lbWinLen);\n+        add(sliderSetWinLength);\n+    }\n+\n+    private void finishSettings() {\n+        btnStart = new JButton(\"Start Game\");\n+        btnStart.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                startNextGame();\n+            }\n+        });\n+        add(btnStart);\n+\n+    }\n+\n+}"
  },
  {
    "sha": "30ef3c3a4a019e09059106c1a47a124fed9358fe",
    "filename": "HW/Lesson7/work/GameMap.java",
    "status": "added",
    "additions": 314,
    "deletions": 0,
    "changes": 314,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/GameMap.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/GameMap.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/work/GameMap.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,314 @@\n+package lesson7.work;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.Random;\n+\n+/**\n+ * Created by Aleksandr Gladkov [Anticisco]\n+ * Date: 06.03.2021\n+ */\n+\n+public class GameMap extends JPanel {\n+    public static final int GM_HVH = 0;\n+    public static final int GM_HVA = 1;\n+\n+    private static final int HUMAN_DOT = 1;\n+    private static final int AI_DOT = 2;\n+    private static final int EMPTY_DOT = 0;\n+    private static final int OVAL_PADDING = 5;\n+\n+    private static final Random RANDOM = new Random();\n+    private static final int EVENT_DRAW = 0;\n+    private static final int EVENT_WIN_HUMAN = 1;\n+    private static final int EVENT_WIN_AI = 2;\n+    private static final String TEXT_EVENT_WIN_HUMAN = \"Human win!\";\n+    private static final String TEXT_EVENT_WIN_AI = \"AI win!\";\n+    private static final String TEXT_EVENT_WIN_DRAW = \"DRAW!\";\n+    private int[][] map;\n+    private int mapSizeX;\n+    private int mapSizeY;\n+    private int winLength;\n+    private int modeGame;\n+    private int cellWidth;\n+    private int cellHeight;\n+    private boolean initMap;\n+    private boolean isGameOver;\n+    private int currentWinEvent;\n+\n+\n+    GameMap() {\n+        setBackground(Color.BLACK);\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseReleased(MouseEvent e) {\n+                super.mouseReleased(e);\n+                update(e);\n+            }\n+        });\n+        initMap = false;\n+    }\n+\n+    void startGameWithParams(int mapSizeX, int mapSizeY, int winLength, int modeGame) {\n+        this.mapSizeX = mapSizeX;\n+        this.mapSizeY = mapSizeY;\n+        this.winLength = winLength;\n+        this.modeGame = modeGame;\n+        this.map = new int[mapSizeY][mapSizeX];\n+        initMap = true;\n+        isGameOver = false;\n+        repaint();\n+    }\n+\n+    @Override\n+    protected void paintComponent(Graphics g) {\n+        super.paintComponent(g);\n+        render(g);\n+    }\n+\n+    private void update(MouseEvent e) {\n+        if (!initMap) return;\n+        if (isGameOver) return;\n+\n+        int cellX = e.getX() / cellWidth;\n+        int cellY = e.getY() / cellHeight;\n+        System.out.println(\"x=\" + cellX + \"y=\" + cellY);\n+        if (!isValidCell(cellX, cellY) || !isEmptyCell(cellX, cellY)) {\n+            System.out.println(\"3x=\" + cellX + \"3y=\" + cellY);\n+            return;\n+        }\n+        System.out.println(\"human=1;empty=0 \" + map[cellY][cellX]);\n+        map[cellY][cellX] = HUMAN_DOT;\n+        System.out.println(\"human=1;empty=0 \" + map[cellY][cellX]);\n+        System.out.println(\"2x=\" + cellX + \"2y=\" + cellY);\n+        if (checkWin(HUMAN_DOT)) {\n+            setGameOverEvent(EVENT_WIN_HUMAN);\n+            return;\n+        }\n+\n+        if (isFullMap()) {\n+            setGameOverEvent(EVENT_DRAW);\n+            return;\n+        }\n+        repaint();\n+        aiTurn();\n+        repaint();\n+\n+        if (checkWin(AI_DOT)) {\n+            setGameOverEvent(EVENT_WIN_AI);\n+            return;\n+        }\n+\n+        if (isFullMap()) {\n+            setGameOverEvent(EVENT_DRAW);\n+            return;\n+        }\n+\n+    }\n+\n+    private void setGameOverEvent(int valueEvent) {\n+        isGameOver = true;\n+        currentWinEvent = valueEvent;\n+        repaint();\n+    }\n+\n+    private void render(Graphics g) {\n+        if (!initMap) return;\n+\n+        int width = getWidth();\n+        int height = getHeight();\n+\n+        cellWidth = width / mapSizeX;\n+        cellHeight = height / mapSizeY;\n+\n+        g.setColor(Color.WHITE);\n+\n+        for (int i = 0; i < mapSizeY; i++) {\n+            int y = i * cellHeight;\n+            g.drawLine(0, y, width, y);\n+        }\n+\n+        for (int i = 0; i < mapSizeX; i++) {\n+            int x = i * cellWidth;\n+            g.drawLine(x, 0, x, height);\n+        }\n+\n+\n+        for (int y = 0; y < mapSizeY; y++) {\n+            for (int x = 0; x < mapSizeX; x++) {\n+\n+                if (isEmptyCell(x, y)) {\n+                    continue;\n+                }\n+                if (map[y][x] == HUMAN_DOT) {\n+                    g.setColor(new Color(0, 255, 0));\n+                    g.fillOval(x * cellWidth + OVAL_PADDING, y * cellHeight + OVAL_PADDING, cellWidth - OVAL_PADDING * 2, cellHeight - OVAL_PADDING * 2);\n+                } else if (map[y][x] == AI_DOT) {\n+                    g.setColor(new Color(255, 0, 0));\n+                    g.fillOval(x * cellWidth + OVAL_PADDING, y * cellHeight + OVAL_PADDING, cellWidth - OVAL_PADDING * 2, cellHeight - OVAL_PADDING * 2);\n+                } else {\n+                    throw new RuntimeException(\"Invalid render player in y = \" + y + \" x = \" + x);\n+                }\n+            }\n+        }\n+        if (isGameOver) {\n+            showMessageGameOverEvent(g);\n+        }\n+\n+    }\n+\n+    private void showMessageGameOverEvent(Graphics g) {\n+        g.setColor(Color.DARK_GRAY);\n+        g.fillRect(0, 200, getWidth(), 70);\n+        g.setColor(Color.ORANGE);\n+        g.setFont(new Font(\"Times New Roman\", Font.BOLD, 40));\n+        switch (currentWinEvent) {\n+            case EVENT_DRAW:\n+                g.drawString(TEXT_EVENT_WIN_DRAW, 180, getHeight() / 2);\n+                break;\n+            case EVENT_WIN_HUMAN:\n+                g.drawString(TEXT_EVENT_WIN_HUMAN, 150, getHeight() / 2);\n+                break;\n+            case EVENT_WIN_AI:\n+                g.drawString(TEXT_EVENT_WIN_AI, 180, getHeight() / 2);\n+                break;\n+            default:\n+                throw new RuntimeException(\"Invalid winEvent \" + currentWinEvent);\n+        }\n+    }\n+\n+    public void aiTurn() {\n+\n+        if (turnAIWinCell()) {\n+            return;\n+        }\n+        if (turnHumanWinCell()) {\n+            return;\n+        }\n+\n+\n+        if (isEmptyCell(1, 1)) {\n+            map[1][1] = AI_DOT;\n+            return;\n+        }\n+        if (isEmptyCell(0, 0)) {\n+            map[0][0] = AI_DOT;\n+            return;\n+        }\n+        if (map[0][0] == HUMAN_DOT && map[1][1] == AI_DOT && map[2][2] == HUMAN_DOT && map[1][0] == EMPTY_DOT) {\n+\n+            map[1][0] = AI_DOT;\n+            return;\n+\n+        }\n+        if (map[2][0] == HUMAN_DOT && map[1][1] == AI_DOT && map[0][2] == HUMAN_DOT && map[1][0] == EMPTY_DOT) {\n+            if (isEmptyCell(0, 1)) {\n+                map[1][0] = AI_DOT;\n+                return;\n+            }\n+        }\n+        if (map[0][0] == AI_DOT && map[1][1] == HUMAN_DOT && map[2][2] == HUMAN_DOT && map[0][2] == EMPTY_DOT) {\n+            map[0][2] = AI_DOT;\n+            return;\n+        }\n+        int x;\n+        int y;\n+        do {\n+            x = RANDOM.nextInt(mapSizeX);\n+            y = RANDOM.nextInt(mapSizeY);\n+        } while (!isEmptyCell(x, y));\n+        map[y][x] = AI_DOT;\n+    }\n+\n+    private boolean turnAIWinCell() {\n+        for (int i = 0; i < mapSizeY; i++) {\n+            for (int j = 0; j < mapSizeX; j++) {\n+                if (isEmptyCell(j, i)) {\n+                    map[i][j] = AI_DOT;\n+                    if (checkWin(AI_DOT)) {\n+                        return true;\n+                    }\n+                    map[i][j] = EMPTY_DOT;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // Проверка, выиграет-ли игрок своим следующим ходом\n+    private boolean turnHumanWinCell() {\n+        System.out.println();\n+        for (int i = 0; i < mapSizeY; i++) {\n+            for (int j = 0; j < mapSizeX; j++) {\n+                if (isEmptyCell(j, i)) {\n+                    map[i][j] = HUMAN_DOT;     // поставим крестик в каждую клетку по очереди\n+                    if (checkWin(HUMAN_DOT)) {    // если игрок победит\n+                        map[i][j] = AI_DOT;    // поставить на то место нолик\n+                        return true;\n+                    }\n+                    map[i][j] = EMPTY_DOT;    // в противном случае вернуть на место пустоту\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // проверка на победу\n+    private boolean checkWin(int player) {\n+        for (int i = 0; i < mapSizeX; i++) {     // ползём по всему полю\n+            for (int j = 0; j < mapSizeY; j++) {\n+                if (checkLine(i, j, 1, 0, winLength, player)) {\n+                    return true;    // проверим линию по х\n+                }\n+                if (checkLine(i, j, 1, 1, winLength, player)) {\n+                    return true;    // проверим по диагонали х у\n+                }\n+                if (checkLine(i, j, 0, 1, winLength, player)) {\n+                    return true;    // проверим линию по у\n+                }\n+                if (checkLine(i, j, 1, -1, winLength, player)) {\n+                    return true;    // проверим по диагонали х -у\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // проверка линии\n+    private boolean checkLine(int x, int y, int vx, int vy, int len, int player) {\n+        final int farX = x + (len - 1) * vx;    // посчитаем конец проверяемой линии\n+        final int farY = y + (len - 1) * vy;\n+        if (!isValidCell(farX, farY)) {\n+            return false;    // проверим не выйдет-ли проверяемая линия за пределы поля\n+        }\n+        for (int i = 0; i < len; i++) {    // ползём по проверяемой линии\n+            if (map[y + i * vy][x + i * vx] != player) {\n+                return false;    // проверим одинаковые-ли символы в ячейках\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isFullMap() {\n+        for (int i = 0; i < mapSizeY; i++) {\n+            for (int j = 0; j < mapSizeX; j++) {\n+                if (map[i][j] == EMPTY_DOT) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isValidCell(int x, int y) {\n+        return x >= 0 && x < mapSizeX && y >= 0 && y < mapSizeY;\n+    }\n+\n+    public boolean isEmptyCell(int x, int y) {\n+        return map[y][x] == EMPTY_DOT;\n+    }\n+\n+}\n+"
  },
  {
    "sha": "9be63bc708d356691baf5d00492b2332f5c34445",
    "filename": "HW/Lesson7/work/GameUML.jpg",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/GameUML.jpg",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/GameUML.jpg",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/work/GameUML.jpg?ref=8af9017b3125564d911257275a77288db4ae6174"
  },
  {
    "sha": "7b8d9846dac509f3068f5036117cdb3789ddd51f",
    "filename": "HW/Lesson7/work/MainWindow.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/MainWindow.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/MainWindow.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/work/MainWindow.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,64 @@\n+package lesson7.work;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+/**\n+ * Created by Aleksandr Gladkov [Anticisco]\n+ * Date: 06.03.2021\n+ */\n+\n+public class MainWindow extends JFrame {\n+\n+    private static final int WIN_WIDTH = 507;\n+    private static final int WIN_HEIGHT = 550;\n+    private static final int WIN_POS_X = 650;\n+    private static final int WIN_POS_Y = 250;\n+\n+    private Settings settings;\n+    private GameMap gameMap;\n+\n+    MainWindow() {\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n+        setLocation(WIN_POS_X, WIN_POS_Y);\n+        setTitle(\"Game X-O\");\n+        setResizable(false);\n+\n+        settings = new Settings(this);\n+        gameMap = new GameMap();\n+\n+        JButton btnStartGame = new JButton(\"Start New Game\");\n+        btnStartGame.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                settings.setVisible(true);\n+            }\n+        });\n+\n+        JButton btnExitGame = new JButton(\"Exit Game\");\n+        btnExitGame.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                System.exit(0);\n+            }\n+        });\n+\n+        JPanel panelForButton = new JPanel();\n+        panelForButton.setLayout(new GridLayout(1, 2));\n+\n+        panelForButton.add(btnExitGame);\n+        panelForButton.add(btnStartGame);\n+        add(panelForButton, BorderLayout.SOUTH);\n+        add(gameMap);\n+\n+        setVisible(true);\n+    }\n+\n+    void getParamsFromSettingAndStartGame(int mapSizeX, int mapSizeY, int winLength, int modeGame) {\n+        gameMap.startGameWithParams(mapSizeX, mapSizeY, winLength, modeGame);\n+    }\n+\n+}"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "HW/Lesson7/work/Ques",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/Ques",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/Ques",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/work/Ques?ref=8af9017b3125564d911257275a77288db4ae6174"
  },
  {
    "sha": "4935baadebca467a2bc5c79d241c52df349e2720",
    "filename": "HW/Lesson7/work/Settings.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/Settings.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/Settings.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/work/Settings.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,132 @@\n+package lesson7.work;\n+\n+import javax.swing.*;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+/**\n+ * Created by Aleksandr Gladkov [Anticisco]\n+ * Date: 06.03.2021\n+ */\n+\n+public class Settings extends JFrame {\n+\n+    public static int gameMode;\n+\n+    private static final int WIN_WIDTH = 350;\n+    private static final int WIN_HEIGHT = 250;\n+\n+    private final int MIN_WIN_LENGTH = 3;\n+    private final int MIN_MAP_SIZE = 3;\n+    private final int MAX_MAP_SIZE = 3;\n+\n+    private final String MAP_SIZE_PREFIX = \"Map size is: \";\n+    private final String WIN_LEN_PREFIX = \"Win length is: \";\n+\n+\n+    private MainWindow mainWindow;\n+\n+    private JRadioButton humanVsHuman;\n+    private JRadioButton humanVsAi;\n+    private JSlider sliderSetSizeMap;\n+    private JSlider sliderSetWinLength;\n+    private JButton btnStart;\n+\n+    Settings(MainWindow mainWindow) {\n+        this.mainWindow = mainWindow;\n+        Rectangle mainWindowBounds = mainWindow.getBounds();\n+        setBackground(Color.BLUE);\n+\n+        int posX = (int) mainWindowBounds.getCenterX() - WIN_WIDTH / 2;\n+        int posY = (int) mainWindowBounds.getCenterY() - WIN_HEIGHT / 2;\n+\n+        setLocation(posX, posY);\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n+        setTitle(\"Settings\");\n+        setResizable(false);\n+        setLayout(new GridLayout(10, 1));\n+\n+        setGameModeControl();\n+        setSizeMapControl();\n+        finishSettings();\n+\n+    }\n+\n+    private void setGameModeControl() {\n+        add(new JLabel(\"Choose your game mode\"));\n+        humanVsHuman = new JRadioButton(\"Human vs. Human\", true);\n+        humanVsAi = new JRadioButton(\"Human vs. Ai\");\n+\n+        ButtonGroup gameModeGroup = new ButtonGroup();\n+        gameModeGroup.add(humanVsHuman);\n+        gameModeGroup.add(humanVsAi);\n+\n+        add(humanVsHuman);\n+        add(humanVsAi);\n+    }\n+\n+    private void setSizeMapControl() {\n+        JLabel lbMapSize = new JLabel(MAP_SIZE_PREFIX + MIN_MAP_SIZE);\n+        JLabel lbWinLen = new JLabel(WIN_LEN_PREFIX + MIN_WIN_LENGTH);\n+\n+        sliderSetSizeMap = new JSlider(MIN_MAP_SIZE, MAX_MAP_SIZE, MIN_MAP_SIZE);\n+        sliderSetSizeMap.addChangeListener(new ChangeListener() {\n+            @Override\n+            public void stateChanged(ChangeEvent e) {\n+                int currentMapSize = sliderSetSizeMap.getValue();\n+                lbMapSize.setText(MAP_SIZE_PREFIX + currentMapSize);\n+                sliderSetWinLength.setMaximum(currentMapSize);\n+            }\n+        });\n+\n+        sliderSetWinLength = new JSlider(MIN_WIN_LENGTH, MIN_MAP_SIZE, MIN_MAP_SIZE);\n+        sliderSetWinLength.addChangeListener(new ChangeListener() {\n+            @Override\n+            public void stateChanged(ChangeEvent e) {\n+                lbWinLen.setText(WIN_LEN_PREFIX + sliderSetWinLength.getValue());\n+            }\n+        });\n+\n+        add(new JLabel(\"Choose map size\"));\n+        add(lbMapSize);\n+        add(sliderSetSizeMap);\n+        add(lbWinLen);\n+        add(sliderSetWinLength);\n+    }\n+\n+    private void finishSettings() {\n+        btnStart = new JButton(\"Start Game\");\n+        btnStart.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                startNextGame();\n+            }\n+        });\n+        add(btnStart);\n+\n+    }\n+\n+\n+    private void startNextGame() {\n+        int gameMode;\n+\n+        if (humanVsHuman.isSelected()) {\n+            gameMode = GameMap.GM_HVH;\n+        } else if (humanVsAi.isSelected()) {\n+            gameMode = GameMap.GM_HVA;\n+        } else {\n+            throw new RuntimeException(\"Invalid choose game mode\");\n+        }\n+\n+        int mapSize = sliderSetSizeMap.getValue();\n+        int winLn = sliderSetWinLength.getValue();\n+\n+        mainWindow.getParamsFromSettingAndStartGame(mapSize, mapSize, winLn, gameMode);\n+\n+        setVisible(false);\n+    }\n+\n+}"
  },
  {
    "sha": "482a7640ee8a9509220d331e325b8983e6bf45b1",
    "filename": "HW/Lesson7/work/StartClass.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/AlekseyDavi/GB/blob/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/StartClass.java",
    "raw_url": "https://github.com/AlekseyDavi/GB/raw/8af9017b3125564d911257275a77288db4ae6174/HW/Lesson7/work/StartClass.java",
    "contents_url": "https://api.github.com/repos/AlekseyDavi/GB/contents/HW/Lesson7/work/StartClass.java?ref=8af9017b3125564d911257275a77288db4ae6174",
    "patch": "@@ -0,0 +1,14 @@\n+package lesson7.work;\n+\n+/**\n+ * Created by Aleksandr Gladkov [Anticisco]\n+ * Date: 06.03.2021\n+ */\n+\n+public class StartClass {\n+\n+    public static void main(String[] args) {\n+        new MainWindow();\n+    }\n+\n+}"
  }
]
