[
  {
    "sha": "173e582c5d8b62c8053bb8f2911b0bd45f9b16b3",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/pom.xml",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/pom.xml",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/pom.xml?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -15,6 +15,7 @@\n         <maven.compiler.target>11</maven.compiler.target>\n         <maven.compiler.source>11</maven.compiler.source>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <aspectj.version>1.9.6</aspectj.version>\n     </properties>\n     <build>\n         <plugins>\n@@ -70,6 +71,22 @@\n             <artifactId>plexus-utils</artifactId>\n             <version>1.1</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains</groupId>\n+            <artifactId>annotations</artifactId>\n+            <version>RELEASE</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.aspectj</groupId>\n+            <artifactId>aspectjrt</artifactId>\n+            <version>${aspectj.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.aspectj</groupId>\n+            <artifactId>aspectjweaver</artifactId>\n+            <version>${aspectj.version}</version>\n+        </dependency>\n \n     </dependencies>\n "
  },
  {
    "sha": "91322753c1e7a354b0f8ceb7ef6ee22c36125028",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1Application.java",
    "status": "modified",
    "additions": 27,
    "deletions": 3,
    "changes": 30,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1Application.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1Application.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1Application.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -1,16 +1,40 @@\n package ru.otus.spring.homework.dpanteleev.lesson1;\n \n-import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.EnableAspectJAutoProxy;\n+import ru.otus.spring.homework.dpanteleev.lesson1.domain.Answer;\n import ru.otus.spring.homework.dpanteleev.lesson1.service.QuestionService;\n \n+import java.util.Scanner;\n+\n+@EnableAspectJAutoProxy\n+@Configuration\n+@ComponentScan\n public class Lesson1Application {\n \n     public static void main(String[] args) {\n-        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"/spring-context.xml\");\n+        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Lesson1Application.class);\n+\n         QuestionService service = context.getBean(QuestionService.class);\n+\n         for (int i = 0; i < service.size(); i++) {\n-            System.out.println(service.getByNumber(i).getQuestion() + service.getByNumber(i).getAnswers().toString());\n+            System.out.println(\"Answer the questions\");\n+            // Задать вопрос\n+            System.out.println(service.getAnswerTextByNumber(i) + \" \" + service.randomAnswerList(i));\n+            // Получить ответ\n+            Scanner scanner = new Scanner(System.in);\n+            //Сохранить ответ\n+            service.setAnswer(new Answer(scanner.nextLine()), i);\n         }\n+        service.printResult();\n+        if (service.isOffset()) {\n+            System.out.println(\"Зачёт :)\");\n+        } else {\n+            System.out.println(\"Не зачёт :(\");\n+        }\n+\n     }\n \n }"
  },
  {
    "sha": "aac05e2735a2985287101e91a5813f1bc99d5ada",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDao.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDao.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDao.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDao.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -2,9 +2,11 @@\n \n import ru.otus.spring.homework.dpanteleev.lesson1.domain.Question;\n \n+import java.util.List;\n+\n public interface QuestionDao {\n \n-    Question findQuestion(int number);\n+    List<Question> getQustionsList();\n \n     long size();\n "
  },
  {
    "sha": "3e43a679e0db83ef0c73f1f08c2ce114f7d37459",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDaoSimple.java",
    "status": "modified",
    "additions": 61,
    "deletions": 22,
    "changes": 83,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDaoSimple.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDaoSimple.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/dao/QuestionDaoSimple.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -2,6 +2,9 @@\n \n import org.apache.commons.csv.CSVFormat;\n import org.apache.commons.csv.CSVRecord;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.stereotype.Repository;\n import ru.otus.spring.homework.dpanteleev.lesson1.domain.Answer;\n import ru.otus.spring.homework.dpanteleev.lesson1.domain.Question;\n \n@@ -12,53 +15,89 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@PropertySource(\"classpath:application.properties\")\n+@Repository(\"questionDaoSimple\")\n public class QuestionDaoSimple implements QuestionDao {\n \n+    private static final String WRONGANSWER = \"wrong_answer\";\n+    private static final String CORRECTANSWER = \"correct_answer\";\n+    private static final String QUESTION = \"question\";\n+\n     /**\n      * Список вопросов с возможными вариантами ответов\n      */\n     private List<Question> questionList = new ArrayList<>();\n \n-    public QuestionDaoSimple(String path) {\n+    private String pathToFile;\n+\n+    public QuestionDaoSimple(@Value(\"${path.question}\") String pathToFile) {\n+        this.pathToFile = pathToFile;\n+    }\n+\n+    /**\n+     * Загружает из CSV вопросы\n+     * @param pathToCsvFile\n+     */\n+    private void loadCSVFile(String pathToCsvFile) {\n         try {\n             //Читаем файл с вопросами\n-            Reader in = new FileReader(Paths.get(path).toAbsolutePath().toString());\n+            Reader in = new FileReader(Paths.get(pathToCsvFile).toAbsolutePath().toString());\n             //Парсим вопросы\n             Iterable<CSVRecord> records = CSVFormat.RFC4180.withFirstRecordAsHeader().parse(in);\n             //Получаю лист вопросов с возможными вариантами ответов\n             for (CSVRecord record : records) {\n-                // Проверяем на наличие вопроса\n-                if (record.get(\"question\").isEmpty() || record.get(\"question\").isBlank()) return;\n-                //Возможные варианты ответов\n-                List<Answer> answers = new ArrayList<>();\n-                // Если запись содержит ответы добавляем их\n-                if (!record.get(\"answer\").isEmpty()) {\n-                    // Первой записью идёт вопрос остальными\n-                    for (int i = 1; i < record.size(); i++) {\n-                        answers.add(new Answer(record.get(i)));\n-                    }\n+                Question q;\n+                if ((q = csvToQuestion(record)) != null) {\n+                    questionList.add(q);\n                 }\n-                // Если запись содержит вопрос добавляем его\n-                questionList.add(new Question(\n-                                record.get(\"question\"),\n-                                answers\n-                        )\n-                );\n             }\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n     }\n \n+    /**\n+     * Принимает CSV строку и возвращает вопрос с возможными вариантами ответа\n+     * @param record запись в CSV файле\n+     * @return Question\n+     */\n+    private Question csvToQuestion(CSVRecord record) {\n+        // Проверяем на наличие вопроса\n+        if (record.get(QUESTION).isEmpty() || record.get(QUESTION).isBlank()) return null;\n+        //Возможные варианты ложных ответов\n+        List<Answer> wrongAnswers = new ArrayList<>();\n+        // Возможные варианты правильных ответов\n+        List<Answer> correctAnswers = new ArrayList<>();\n+        // Если запись содержит ответы добавляем их\n+        for (int i = 0; i < record.size(); i++) {\n+            if (record.get(i).isEmpty()) continue;\n+            if (record.getParser().getHeaderNames().get(i).equals(CORRECTANSWER)) {\n+                correctAnswers.add(new Answer(record.get(i)));\n+            } else if (record.getParser().getHeaderNames().get(i).equals(WRONGANSWER)) {\n+                wrongAnswers.add(new Answer(record.get(i)));\n+            }\n+        }\n+        // Если запись содержит вопрос добавляем его\n+        return new Question(\n+                record.get(QUESTION),\n+                wrongAnswers,\n+                correctAnswers);\n+    }\n+\n     @Override\n-    public Question findQuestion(int number) throws ArrayIndexOutOfBoundsException {\n-        if (number >= 0 && number < questionList.size()) {\n-            return questionList.get(number);\n-        } else throw new ArrayIndexOutOfBoundsException(\"Нет такого номера вопроса\");\n+    public List<Question> getQustionsList() {\n+        if (questionList.isEmpty()) {\n+            loadCSVFile(pathToFile);\n+        }\n+        return questionList;\n     }\n \n     @Override\n     public long size() {\n+        if (questionList.isEmpty()) {\n+            loadCSVFile(pathToFile);\n+        }\n         return questionList.size();\n     }\n+\n }"
  },
  {
    "sha": "398978e508a44938cf1280e2e7495ebb01bbb7e5",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Answer.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Answer.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Answer.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Answer.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -10,8 +10,20 @@ public Answer(String answer) {\n         this.answer = answer;\n     }\n \n+    public String getAnswer() {\n+        return answer;\n+    }\n+\n     @Override\n     public String toString() {\n         return answer;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Answer answer1 = (Answer) o;\n+        return answer1.getAnswer().equals(this.getAnswer());\n+    }\n+\n }"
  },
  {
    "sha": "9862d83e672863f2613399f4dee1a8b4e10508e7",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Question.java",
    "status": "modified",
    "additions": 47,
    "deletions": 10,
    "changes": 57,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Question.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Question.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/domain/Question.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -1,7 +1,9 @@\n package ru.otus.spring.homework.dpanteleev.lesson1.domain;\n \n+import ru.otus.spring.homework.dpanteleev.lesson1.newExceptions.UserNotHaveAnswerException;\n+\n import java.util.List;\n-//import ru.otus.spring.homework.dpanteleev.lesson1.domain.Answer;\n+\n \n public class Question {\n     /**\n@@ -10,35 +12,51 @@\n     private final String question;\n \n     /**\n-     * Список возможных ответов\n+     * Список неправильных ответов\n+     */\n+    private final List<Answer> wrongAnswers;\n+    /**\n+     * Список правильных ответов\n      */\n-    private final List<Answer> answers;\n+    private final List<Answer> correctAnswers;\n \n     /**\n      * Текст ответа пользователя\n      */\n     private Answer userAnswer;\n \n-    public Question(String question, List<Answer> answers) {\n+    public Question(String question, List<Answer> wrongAnswers, List<Answer> correctAnswers) {\n         this.question = question;\n-        this.answers = answers;\n+        this.wrongAnswers = wrongAnswers;\n+        this.correctAnswers = correctAnswers;\n+    }\n+\n+    /**\n+     * Возвращает список ложных ответов если они доступны\n+     *\n+     * @return List<Answer></>\n+     */\n+    public List<Answer> getWrongAnswers() {\n+        return wrongAnswers;\n     }\n \n     /**\n-     * Возвращает список ответов если они доступны\n+     * Возвращает список правильных ответов если они доступны\n      *\n      * @return List<Answer></>\n      */\n-    public List<Answer> getAnswers() {\n-        return answers;\n+    public List<Answer> getCorrectAnswers() {\n+        return correctAnswers;\n     }\n \n     /**\n-     * Возвращает ответ пользователя\n+     * Возвращает ответ пользователя если он есть или кидает эксепшен если его нет\n      *\n      * @return Answer\n+     * @Exception UserNotHaveAnswerException\n      */\n-    public Answer getUserAnswer() {\n+    public Answer getUserAnswer() throws UserNotHaveAnswerException {\n+        if (userAnswer == null) throw new UserNotHaveAnswerException(\"Юзер не дал ответ\");\n         return userAnswer;\n     }\n \n@@ -58,6 +76,25 @@ public String getQuestion() {\n         return question;\n     }\n \n+    public boolean isHaveAnswer() {\n+        return userAnswer != null;\n+    }\n+\n+    /**\n+     * Дан ли правильный ответ\n+     * @return true если ответ дан верный\n+     * @throws UserNotHaveAnswerException если нет ответа\n+     */\n+    public boolean isRightAnswer() throws UserNotHaveAnswerException{\n+        if (isHaveAnswer() && !getCorrectAnswers().isEmpty()) {\n+            for (Answer rightAnswer :\n+                    getCorrectAnswers()) {\n+                return getUserAnswer().getAnswer().equals(rightAnswer.getAnswer());\n+            }\n+        }\n+        throw new UserNotHaveAnswerException(\"Нет ответа пользователя или не заданы правильные ответы\");\n+    }\n+\n     @Override\n     public String toString() {\n         return question;"
  },
  {
    "sha": "2daba9f815a21a580dc0f3661cf7cda8a7783796",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/logging/LoggingAspect.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/logging/LoggingAspect.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/logging/LoggingAspect.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/logging/LoggingAspect.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -0,0 +1,24 @@\n+package ru.otus.spring.homework.dpanteleev.lesson1.logging;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.springframework.stereotype.Component;\n+\n+@Aspect\n+@Component\n+public class LoggingAspect {\n+\n+    //Пока делаю без логгера, как понимаю в буте будет свой логгер и нет смысла подключать его сейчас\n+    @Around(\"execution(* ru.otus.spring.homework.dpanteleev.lesson1.dao.*.*(..))\")\n+    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable{\n+        System.out.println(\"Класс: \" + joinPoint.getTarget().getClass().getSimpleName()\n+                + \" Метод: \" + joinPoint.getSignature().getName()\n+                + \" Начал работу\");\n+        long start = System.currentTimeMillis();\n+        Object res = joinPoint.proceed();\n+        System.out.println(\"Класс: \" + joinPoint.getTarget().getClass().getSimpleName() + \" Окончил работу за \" +\n+                (System.currentTimeMillis() - start) + \" миллисекунд\");\n+        return res;\n+    }\n+}"
  },
  {
    "sha": "d020e91d5b6fb85c921bef2476cbf8acbb657d91",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/newExceptions/UserNotHaveAnswerException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/newExceptions/UserNotHaveAnswerException.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/newExceptions/UserNotHaveAnswerException.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/newExceptions/UserNotHaveAnswerException.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -0,0 +1,8 @@\n+package ru.otus.spring.homework.dpanteleev.lesson1.newExceptions;\n+\n+public class UserNotHaveAnswerException extends NullPointerException {\n+\n+    public UserNotHaveAnswerException(String s) {\n+        super(s);\n+    }\n+}"
  },
  {
    "sha": "f1fe043ab4ad3bc4007a5f326223ea595986056b",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionService.java",
    "status": "modified",
    "additions": 27,
    "deletions": 3,
    "changes": 30,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionService.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionService.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionService.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -1,21 +1,45 @@\n package ru.otus.spring.homework.dpanteleev.lesson1.service;\n \n-import ru.otus.spring.homework.dpanteleev.lesson1.domain.Question;\n+import ru.otus.spring.homework.dpanteleev.lesson1.domain.Answer;\n+\n+import java.util.List;\n \n public interface QuestionService {\n     /**\n      * Находим вопрос по его номеру\n      * Если вопрос не найден бросает исключение\n      *\n      * @param number номер вопроса в списке\n-     * @return Question Вопрос из списка под заданным номером\n+     * @return Вопрос из списка под заданным номером\n+     */\n+    String getAnswerTextByNumber(int number);\n+\n+    /**\n+     * Типо рандомно расположенные варианты ответов\n+     * @param number\n+     * @return List<Answer>\n      */\n-    Question getByNumber(int number);\n+    List<Answer> randomAnswerList(int number);\n+\n+    /**\n+     * Запись ответа\n+     * @param answer Ответ\n+     * @param number Номер вопроса\n+     */\n+    void setAnswer(Answer answer, int number);\n \n     /**\n      * Возращает количество вопросов в списке\n      *\n      * @return long\n      */\n     long size();\n+\n+    /**\n+     * Зачёт не зачёт\n+     * @return true если количество правильных ответов больше или равно проходному\n+     */\n+    boolean isOffset();\n+\n+    void printResult();\n }"
  },
  {
    "sha": "8da135572e110399b07d9f73706b488be7750e47",
    "filename": "src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionServiceImpl.java",
    "status": "modified",
    "additions": 69,
    "deletions": 2,
    "changes": 71,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionServiceImpl.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/java/ru/otus/spring/homework/dpanteleev/lesson1/service/QuestionServiceImpl.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -1,18 +1,85 @@\n package ru.otus.spring.homework.dpanteleev.lesson1.service;\n \n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.stereotype.Service;\n import ru.otus.spring.homework.dpanteleev.lesson1.dao.QuestionDao;\n+import ru.otus.spring.homework.dpanteleev.lesson1.domain.Answer;\n import ru.otus.spring.homework.dpanteleev.lesson1.domain.Question;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@PropertySource(\"classpath:application.properties\")\n+@Service\n public class QuestionServiceImpl implements QuestionService {\n \n     private final QuestionDao dao;\n \n+    @Value(\"${count.right.answer}\")\n+    private int offset;\n+\n     public QuestionServiceImpl(QuestionDao dao) {\n         this.dao = dao;\n     }\n \n-    public Question getByNumber(int number) throws ArrayIndexOutOfBoundsException {\n-        return dao.findQuestion(number);\n+    public String getAnswerTextByNumber(int number) throws ArrayIndexOutOfBoundsException {\n+        if (number < 0 || number > dao.size()) {\n+            throw new ArrayIndexOutOfBoundsException(\"Нет такого номера\");\n+        }\n+        return dao.getQustionsList().get(number).getQuestion();\n+    }\n+\n+    @Override\n+    public void setAnswer(Answer answer, int number) {\n+        dao.getQustionsList().get(number).setUserAnswer(answer);\n+        System.out.println(\"Записан ответ: \" + answer.toString());\n+    }\n+\n+    /**\n+     * Печатает результат\n+     */\n+    public void printResult() {\n+        for (Question q :\n+                dao.getQustionsList()) {\n+            try {\n+                System.out.println(\"Вопрос: \" + q.getQuestion());\n+                System.out.println(\"Ответ: \" + q.getUserAnswer());\n+                if (!q.getCorrectAnswers().isEmpty()) {\n+                    if (q.isRightAnswer()) {\n+                        System.out.println(\"Верный ответ\");\n+                    } else {\n+                        System.out.println(\"Ложный ответ\");\n+                    }\n+                }\n+                System.out.println();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public List<Answer> randomAnswerList(int number) {\n+        List<Answer> list = new ArrayList<>();\n+        list.addAll(dao.getQustionsList().get(number).getCorrectAnswers());\n+        list.addAll(dao.getQustionsList().get(number).getWrongAnswers());\n+        return list;\n+    }\n+\n+    /**\n+     * зачёт\n+     *\n+     * @return true если зачёт\n+     */\n+    public boolean isOffset() {\n+        int count = 0;\n+        for (Question q :\n+                dao.getQustionsList()) {\n+            if (q.isHaveAnswer() && !q.getCorrectAnswers().isEmpty() && q.isRightAnswer()) {\n+                count++;\n+            }\n+        }\n+        return offset <= count;\n     }\n \n     public long size() {"
  },
  {
    "sha": "bca6ad0ce548e0608244464b4438a0555e8ca4c3",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/resources/application.properties",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/resources/application.properties?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -1 +1,2 @@\n-\n+path.question=/root/IdeaProjects/otus-spring-homework1/src/main/resources/testQuestions.csv\n+count.right.answer=3\n\\ No newline at end of file"
  },
  {
    "sha": "386f04b55183ec5b28fe4caa6534c7d0e258466f",
    "filename": "src/main/resources/spring-context.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/257f4546155b70ffef93cfed4ce3bfafb85539ae/src/main/resources/spring-context.xml",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/257f4546155b70ffef93cfed4ce3bfafb85539ae/src/main/resources/spring-context.xml",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/resources/spring-context.xml?ref=257f4546155b70ffef93cfed4ce3bfafb85539ae",
    "patch": "@@ -1,15 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns=\"http://www.springframework.org/schema/beans\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n-\n-    <bean id=\"questionDao\" class=\"ru.otus.spring.homework.dpanteleev.lesson1.dao.QuestionDaoSimple\">\n-        <constructor-arg name=\"path\"\n-                         value=\"/root/IdeaProjects/otus-spring-homework1/src/main/resources/testQuestions.csv\"/>\n-    </bean>\n-    <bean id=\"questionService\" class=\"ru.otus.spring.homework.dpanteleev.lesson1.service.QuestionServiceImpl\">\n-        <constructor-arg name=\"dao\" ref=\"questionDao\"/>\n-    </bean>\n-\n-</beans>\n\\ No newline at end of file"
  },
  {
    "sha": "d6f43766bf36dfacc71de6b3adf074ffa060bb2d",
    "filename": "src/main/resources/testQuestions.csv",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/resources/testQuestions.csv",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/main/resources/testQuestions.csv",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/main/resources/testQuestions.csv?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -1,5 +1,9 @@\n-question,answer,answer,answer\n-Введите имя,,,\n-Введите фамилию,,,\n-Введите число просто по приколу,,,\n-Выбирите правильный ответ,неправильны ответ,правильны ответ,неправильны ответ\n+question,correct_answer,wrong_answer,wrong_answer\n+Write name,,,\n+Wirte last name,,,\n+Write random number,,,\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer"
  },
  {
    "sha": "91b59cf7e9d40bcf3c181bbc29489e1539947348",
    "filename": "src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1ApplicationTests.java",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/257f4546155b70ffef93cfed4ce3bfafb85539ae/src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1ApplicationTests.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/257f4546155b70ffef93cfed4ce3bfafb85539ae/src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1ApplicationTests.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/Lesson1ApplicationTests.java?ref=257f4546155b70ffef93cfed4ce3bfafb85539ae",
    "patch": "@@ -1,38 +0,0 @@\n-package ru.otus.spring.homework.dpanteleev.lesson1;\n-\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-import ru.otus.spring.homework.dpanteleev.lesson1.dao.QuestionDao;\n-import ru.otus.spring.homework.dpanteleev.lesson1.dao.QuestionDaoSimple;\n-import ru.otus.spring.homework.dpanteleev.lesson1.service.QuestionServiceImpl;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-@DisplayName(\"Class QuestionService\")\n-@ExtendWith(MockitoExtension.class)\n-class QuestionService {\n-\n-    @Mock\n-    QuestionDao dao;\n-\n-    @DisplayName(\"Проверяем работу конструктора\")\n-    @Test\n-    void shouldHaveCorrectConstructor() {\n-        QuestionServiceImpl service = new QuestionServiceImpl(dao);\n-        assertEquals(0, service.size());\n-        assertNull(service.getByNumber(0));\n-    }\n-\n-\n-    // todo не работает...\n-    @DisplayName(\"Проверяем работу вызова исключения\")\n-    @Test\n-    void shouldHaveCorrectThrowOBExc() {\n-        QuestionDao dao = new QuestionDaoSimple(\"\");\n-        assertThrows(ArrayIndexOutOfBoundsException.class, () -> dao.findQuestion(-10));\n-    }\n-\n-}"
  },
  {
    "sha": "3ae5d2de94ad17bbac16f70f0f38124da9f7b6df",
    "filename": "src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/QuestionServiceTest.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/QuestionServiceTest.java",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/QuestionServiceTest.java",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/test/java/ru/otus/spring/homework/dpanteleev/lesson1/QuestionServiceTest.java?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -0,0 +1,51 @@\n+package ru.otus.spring.homework.dpanteleev.lesson1;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.beans.factory.annotation.Value;\n+import ru.otus.spring.homework.dpanteleev.lesson1.dao.QuestionDao;\n+import ru.otus.spring.homework.dpanteleev.lesson1.dao.QuestionDaoSimple;\n+import ru.otus.spring.homework.dpanteleev.lesson1.domain.Question;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@DisplayName(\"Class QuestionService\")\n+@ExtendWith(MockitoExtension.class)\n+class QuestionServiceTest {\n+\n+    @Mock\n+    QuestionDao dao;\n+\n+    @Value(\"${path.question}\")\n+    String pathToFile ;\n+\n+//    @DisplayName(\"Проверяем работу конструктора\")\n+//    @Test\n+//    void shouldHaveCorrectConstructor() {\n+//        QuestionServiceImpl service = new QuestionServiceImpl(dao);\n+//        assertEquals(0, service.size());\n+//        assertNull(service.getByNumber(0));\n+//    }\n+\n+    QuestionDaoSimple daoSimple = new QuestionDaoSimple(\"src/test/resources/testQuestions.csv\");\n+    private List<Question> questionList = new ArrayList<Question>();\n+\n+    @DisplayName(\"количество считанных строк\")\n+    @Test\n+    void tesCountStringQuestionDao() {\n+        assertEquals(8, daoSimple.size());\n+    }\n+\n+    @DisplayName(\"возвращает лист вопросов\")\n+    @Test\n+    void testQuestionDao() {\n+        assertEquals(questionList.getClass(), daoSimple.getQustionsList().getClass());\n+    }\n+\n+}"
  },
  {
    "sha": "203ac9adbda8efeafa53c49d4cabd29e0bf587af",
    "filename": "src/test/resources/application.properties",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/test/resources/application.properties",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/test/resources/application.properties",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/test/resources/application.properties?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -0,0 +1,2 @@\n+path.question=/root/IdeaProjects/otus-spring-homework1/src/test/resources/testQuestions.csv\n+count.right.answer=3"
  },
  {
    "sha": "d6f43766bf36dfacc71de6b3adf074ffa060bb2d",
    "filename": "src/test/resources/testQuestions.csv",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/DmitryPanteleev/ru.otus.spring/blob/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/test/resources/testQuestions.csv",
    "raw_url": "https://github.com/DmitryPanteleev/ru.otus.spring/raw/19e09716239fd3d8d6b8eb432cb65cedb6b0046e/src/test/resources/testQuestions.csv",
    "contents_url": "https://api.github.com/repos/DmitryPanteleev/ru.otus.spring/contents/src/test/resources/testQuestions.csv?ref=19e09716239fd3d8d6b8eb432cb65cedb6b0046e",
    "patch": "@@ -0,0 +1,9 @@\n+question,correct_answer,wrong_answer,wrong_answer\n+Write name,,,\n+Wirte last name,,,\n+Write random number,,,\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer\n+Choose correct answer,correct answer,wrong answer,wrong answer"
  }
]
