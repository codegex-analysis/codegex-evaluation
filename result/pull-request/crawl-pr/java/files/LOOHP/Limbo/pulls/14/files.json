[
  {
    "sha": "b653f2688f29013de08177cf446d6b4b27dae87b",
    "filename": "src/main/java/com/loohp/limbo/Events/PlayerJoinEvent.java",
    "status": "modified",
    "additions": 1,
    "deletions": 13,
    "changes": 14,
    "blob_url": "https://github.com/LOOHP/Limbo/blob/5369b6bc445d3ed546a3512cbec9ee05fe4de02f/src/main/java/com/loohp/limbo/Events/PlayerJoinEvent.java",
    "raw_url": "https://github.com/LOOHP/Limbo/raw/5369b6bc445d3ed546a3512cbec9ee05fe4de02f/src/main/java/com/loohp/limbo/Events/PlayerJoinEvent.java",
    "contents_url": "https://api.github.com/repos/LOOHP/Limbo/contents/src/main/java/com/loohp/limbo/Events/PlayerJoinEvent.java?ref=5369b6bc445d3ed546a3512cbec9ee05fe4de02f",
    "patch": "@@ -1,22 +1,10 @@\n package com.loohp.limbo.Events;\n \n-import com.loohp.limbo.Location.Location;\n import com.loohp.limbo.Player.Player;\n \n public class PlayerJoinEvent extends PlayerEvent {\n \n-\tprivate Location spawnLocation;\n-\n-\tpublic PlayerJoinEvent(Player player, Location spawnLoc) {\n+\tpublic PlayerJoinEvent(Player player) {\n \t\tsuper(player);\n-\t\tspawnLocation = spawnLoc;\n-\t}\n-\n-\tpublic Location getSpawnLocation() {\n-\t\treturn spawnLocation;\n-\t}\n-\n-\tpublic void setSpawnLocation(Location spawnLocation) {\n-\t\tthis.spawnLocation = spawnLocation;\n \t}\n }"
  },
  {
    "sha": "ca4c9cefb12436f17c01765956ea538fa328558a",
    "filename": "src/main/java/com/loohp/limbo/Events/PlayerSpawnLocationEvent.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/LOOHP/Limbo/blob/5369b6bc445d3ed546a3512cbec9ee05fe4de02f/src/main/java/com/loohp/limbo/Events/PlayerSpawnLocationEvent.java",
    "raw_url": "https://github.com/LOOHP/Limbo/raw/5369b6bc445d3ed546a3512cbec9ee05fe4de02f/src/main/java/com/loohp/limbo/Events/PlayerSpawnLocationEvent.java",
    "contents_url": "https://api.github.com/repos/LOOHP/Limbo/contents/src/main/java/com/loohp/limbo/Events/PlayerSpawnLocationEvent.java?ref=5369b6bc445d3ed546a3512cbec9ee05fe4de02f",
    "patch": "@@ -0,0 +1,21 @@\n+package com.loohp.limbo.Events;\n+\n+import com.loohp.limbo.Location.Location;\n+import com.loohp.limbo.Player.Player;\n+\n+public class PlayerSpawnLocationEvent extends PlayerEvent {\n+    private Location location;\n+\n+    public PlayerSpawnLocationEvent(Player player, Location loc) {\n+        super(player);\n+        location = loc;\n+    }\n+\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    public void setLocation(Location location) {\n+        this.location = location;\n+    }\n+}"
  },
  {
    "sha": "d1d40f48c3a7afbdbbc753b0f6eabf25db529b20",
    "filename": "src/main/java/com/loohp/limbo/Server/ClientConnection.java",
    "status": "modified",
    "additions": 25,
    "deletions": 19,
    "changes": 44,
    "blob_url": "https://github.com/LOOHP/Limbo/blob/5369b6bc445d3ed546a3512cbec9ee05fe4de02f/src/main/java/com/loohp/limbo/Server/ClientConnection.java",
    "raw_url": "https://github.com/LOOHP/Limbo/raw/5369b6bc445d3ed546a3512cbec9ee05fe4de02f/src/main/java/com/loohp/limbo/Server/ClientConnection.java",
    "contents_url": "https://api.github.com/repos/LOOHP/Limbo/contents/src/main/java/com/loohp/limbo/Server/ClientConnection.java?ref=5369b6bc445d3ed546a3512cbec9ee05fe4de02f",
    "patch": "@@ -23,6 +23,7 @@\n import com.loohp.limbo.Events.PlayerMoveEvent;\n import com.loohp.limbo.Events.PlayerQuitEvent;\n import com.loohp.limbo.Events.StatusPingEvent;\n+import com.loohp.limbo.Events.PlayerSpawnLocationEvent;\n import com.loohp.limbo.Events.PlayerSelectedSlotChangeEvent;\n import com.loohp.limbo.File.ServerProperties;\n import com.loohp.limbo.Location.Location;\n@@ -253,64 +254,69 @@ public void run() {\n \t\t\t\t\t\tdisconnectDuringLogin(new BaseComponent[] {new TextComponent(ChatColor.RED + \"Please connect from the proxy!\")});\n \t\t\t\t\t}\n \t\t\t    }\n-\t\t\t\t\n+\n \t\t\t\twhile (client_socket.isConnected()) {\n \t\t\t\t\tint size = DataTypeIO.readVarInt(input);\n \t\t\t\t\tint packetId = DataTypeIO.readVarInt(input);\n \t\t\t\t\tClass<? extends Packet> packetType = Packet.getLoginIn().get(packetId);\n-\t\t\t\t\t\n+\n \t\t\t\t\tif (packetType == null) {\n \t\t\t\t\t\tinput.skipBytes(size - DataTypeIO.getVarIntLength(packetId));\n \t\t\t\t\t} else if (packetType.equals(PacketLoginInLoginStart.class)) {\n \t\t\t\t\t\tPacketLoginInLoginStart start = new PacketLoginInLoginStart(input);\n \t\t\t\t\t\tString username = start.getUsername();\n \t\t\t\t\t\tUUID uuid = isBungeecord ? bungeeUUID : UUID.nameUUIDFromBytes((\"OfflinePlayer:\" + username).getBytes(StandardCharsets.UTF_8));\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\tPacketLoginOutLoginSuccess success = new PacketLoginOutLoginSuccess(uuid, username);\n \t\t\t\t\t\tsendPacket(success);\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\tstate = ClientState.PLAY;\n \n \t\t\t\t\t\tplayer = new Player(this, username, uuid, Limbo.getInstance().getNextEntityId(), Limbo.getInstance().getServerProperties().getWorldSpawn(), new PlayerInteractManager());\n \t\t\t\t\t\tplayer.setSkinLayers((byte) (0x01 | 0x02 | 0x04 | 0x08 | 0x10 | 0x20 | 0x40));\n+\t\t\t\t\t\tLocation spawnLocation = Limbo.getInstance().getEventsManager().callEvent(new PlayerSpawnLocationEvent(player, Limbo.getInstance().getServerProperties().getWorldSpawn())).getLocation();\n+\t\t\t\t\t\tplayer.setX(spawnLocation.getX());\n+\t\t\t\t\t\tplayer.setY(spawnLocation.getY());\n+\t\t\t\t\t\tplayer.setZ(spawnLocation.getZ());\n+\t\t\t\t\t\tplayer.setPitch(spawnLocation.getPitch());\n+\t\t\t\t\t\tplayer.setYaw(spawnLocation.getYaw());\n+\t\t\t\t\t\tplayer.setWorld(spawnLocation.getWorld());\n \t\t\t\t\t\tLimbo.getInstance().addPlayer(player);\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t} else {\n \t\t\t\t\t\tinput.skipBytes(size - DataTypeIO.getVarIntLength(packetId));\n \t\t\t\t\t}\n \t    \t\t}\n-\t\t\t\t\n+\n \t\t\t\tPlayerLoginEvent event = Limbo.getInstance().getEventsManager().callEvent(new PlayerLoginEvent(this, false));\n \t\t\t\tif (event.isCancelled()) {\n \t\t\t\t\tdisconnectDuringLogin(event.getCancelReason());\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t\tbreak;\n \t\t    }\n-\t\t    \n+\n \t\t    if (state == ClientState.PLAY) {\n-\t\t    \t\n+\n \t\t    \tTimeUnit.MILLISECONDS.sleep(500);\n \n \t\t\t\tServerProperties properties = Limbo.getInstance().getServerProperties();\n-\t\t\t\tLocation worldSpawn = properties.getWorldSpawn();\n-\t\t\t\t\n-\t\t\t\tPlayerJoinEvent joinEvent = Limbo.getInstance().getEventsManager().callEvent(new PlayerJoinEvent(player, worldSpawn));\n-\t\t\t\tworldSpawn = joinEvent.getSpawnLocation();\n-\t\t\t\tWorld world = worldSpawn.getWorld();\n+\t\t\t\tLocation worldSpawn = player.getLocation();\n \n-    \t\t\tPacketPlayOutLogin join = new PacketPlayOutLogin(player.getEntityId(), false, properties.getDefaultGamemode(), Limbo.getInstance().getWorlds().stream().map(each -> new NamespacedKey(each.getName()).toString()).collect(Collectors.toList()).toArray(new String[Limbo.getInstance().getWorlds().size()]), Limbo.getInstance().getDimensionRegistry().getCodec(), world, 0, (byte) properties.getMaxPlayers(), 8, properties.isReducedDebugInfo(), true, false, true);\n+\t\t\t\tLimbo.getInstance().getEventsManager().callEvent(new PlayerJoinEvent(player));\n+\n+    \t\t\tPacketPlayOutLogin join = new PacketPlayOutLogin(player.getEntityId(), false, properties.getDefaultGamemode(), Limbo.getInstance().getWorlds().stream().map(each -> new NamespacedKey(each.getName()).toString()).collect(Collectors.toList()).toArray(new String[Limbo.getInstance().getWorlds().size()]), Limbo.getInstance().getDimensionRegistry().getCodec(), worldSpawn.getWorld(), 0, (byte) properties.getMaxPlayers(), 8, properties.isReducedDebugInfo(), true, false, true);\n     \t\t\tsendPacket(join);\n     \t\t\tLimbo.getInstance().getUnsafe().setPlayerGameModeSilently(player, properties.getDefaultGamemode());\n-\t\t\t\t\n+\n \t\t\t\tplayer.playerInteractManager.update();\n-\t\t\t\t\n+\n \t\t\t\tSkinResponse skinresponce = isBungeecord && bungeeSkin != null ? bungeeSkin : MojangAPIUtils.getSkinFromMojangServer(player.getName());\n \t\t\t\tPlayerSkinProperty skin = skinresponce != null ? new PlayerSkinProperty(skinresponce.getSkin(), skinresponce.getSignature()) : null;\n \t\t\t\tPacketPlayOutPlayerInfo info = new PacketPlayOutPlayerInfo(PlayerInfoAction.ADD_PLAYER, player.getUniqueId(), new PlayerInfoData.PlayerInfoDataAddPlayer(player.getName(), Optional.ofNullable(skin), properties.getDefaultGamemode(), 0, false, Optional.empty()));\n \t\t\t\tsendPacket(info);\n-\t\t\t\t\n+\n \t\t\t\tSet<PlayerAbilityFlags> flags = new HashSet<>();\n \t\t\t\tif (properties.isAllowFlight()) {\n \t\t\t\t\tflags.add(PlayerAbilityFlags.FLY);\n@@ -333,7 +339,7 @@ public void run() {\n \t\t\t\tsendPacket(spawnPos);\n \n \t\t\t\tPacketPlayOutPositionAndLook positionLook = new PacketPlayOutPositionAndLook(worldSpawn.getX(), worldSpawn.getY(), worldSpawn.getZ(), worldSpawn.getYaw(), worldSpawn.getPitch(), 1);\n-\t\t\t\tLimbo.getInstance().getUnsafe().setPlayerLocationSilently(player, new Location(world, worldSpawn.getX(), worldSpawn.getY(), worldSpawn.getZ(), worldSpawn.getYaw(), worldSpawn.getPitch()));\n+\t\t\t\tLimbo.getInstance().getUnsafe().setPlayerLocationSilently(player, worldSpawn);\n \t\t\t\tsendPacket(positionLook);\n \n \t\t\t\tplayer.getDataWatcher().update();"
  }
]
