[
  {
    "sha": "2258bd1f5c04a384878cf1f4ad016a140db38b29",
    "filename": "docs/guide/intro/index.adoc",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/docs/guide/intro/index.adoc",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/docs/guide/intro/index.adoc",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/docs/guide/intro/index.adoc?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -506,7 +506,16 @@ Each artifact version is the one that would get installed when building the Boot\n \n The Maven artifacts to upgrade must be added to the `<dependencies>` of your Maven project (with a `provided` scope \n to avoid the dependency to be added to your application). In addition, the plugin configuration element\n-`<overridden-server-artifacts>` must contain the artifacts. For example, the version 3.0.0 of `io.undertow:undertow-core` will \n+`<overridden-server-artifacts>` must contain the artifacts.\n+\n+In order to narrow artifact upgrade inside a Galleon feature-pack, the `<FeaturePack>` configuration element is evolved \n+with an `<overridden-artifacts>` set that contains the artifacts (JBoss Modules module \n+artifacts only) that are in use for the upgrade. These artifacts are upgraded only in the feature-pack that define them. \n+A `<Feature-Pack>` element can be added to the pom.xml as a dependency only. A dependency feature-pack \n+is used to override artifacts present in a dependency feature-pack.\n+Use the `<dependency>true</dependency>` element to create a dependency feature-pack .\n+\n+For example, the version 3.0.0 of `io.undertow:undertow-core` will \n replace the version referenced in the WildFly Galleon feature-pack used to build the bootable JAR:\n \n [source,xml]\n@@ -541,15 +550,21 @@ Some notes:\n ** The JBoss module runtime jar (jboss-modules.jar file).\n ** All jar artifacts referenced from JBoss Modules modules.\n \n-* If an overridden artifact is no present in the dependencies, then a failure occurs during build.\n+* If an overridden artifact is not present in the dependencies, then a failure occurs during build.\n \n * An artifact upgraded to the same version as the one referenced in the Galleon feature-pack is not upgraded. In this case a warning is displayed during build.\n \n * It is possible to downgrade an artifact to an older version. In this case a warning is displayed during build.\n \n-* An artifact is referenced in the `overridden-artifacts` by GroupId, Artifactid and optionally Classifier. Version is being retrieved from the Maven dependencies. \n+* An artifact is referenced in the `overridden-server-artifacts` by GroupId, Artifactid and optionally Classifier. Version is being retrieved from the Maven dependencies. \n+\n+* An artifact presents in the `overridden-server-artifacts` list must be unique. Any duplicate will make the packaging to fail.\n+\n+* An artifact is referenced in the `<FeaturePack>` `overridden-artifacts` by GroupId, ArtifactId, optionally Classifier and optionally Version. \n+Version is being retrieved from the Maven dependencies if not set. Being able to set the version allows to have \n+multiple artifacts with the same GA to be upgraded to different versions according to the feature-pack that contain them.\n \n-* An artifact presents in the `overridden-artifacts` list must be unique. Any duplicate will make the packaging to fail.\n+* An overridden artifact presents in the `<FeaturePack>` `overridden-artifacts` must be unique. Any duplicate will make the packaging to fail.\n \n * Adding an overridden artifact that is not part of the provisioned server artifacts will lead to a failure during build.\n "
  },
  {
    "sha": "80944c51faeab7e96da2577230736d24fe74bde4",
    "filename": "plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/common/FeaturePack.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/common/FeaturePack.java",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/common/FeaturePack.java",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/common/FeaturePack.java?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -44,12 +44,23 @@\n \n     private String includedDefaultConfig;\n \n+    private boolean dependency;\n+\n     private Boolean inheritPackages = false;\n     private List<String> excludedPackages = Collections.emptyList();\n     private List<String> includedPackages = Collections.emptyList();\n+    private List<OverriddenArtifact> overriddenArtifacts = Collections.emptyList();\n \n     private Path path;\n \n+    public boolean isDependency() {\n+        return dependency;\n+    }\n+\n+    public void setDependency(boolean dependency) {\n+        this.dependency = dependency;\n+    }\n+\n     @Override\n     public String getGroupId() {\n         return groupId;\n@@ -151,6 +162,14 @@ public void setIncludedPackages(List<String> includedPackages) {\n         this.includedPackages = includedPackages;\n     }\n \n+    public List<OverriddenArtifact> getOverridenArtifacts() {\n+        return overriddenArtifacts;\n+    }\n+\n+    public void setOverridenArtifacts(List<OverriddenArtifact> overriddenArtifacts) {\n+        this.overriddenArtifacts = overriddenArtifacts;\n+    }\n+\n     public void setPath(File path) {\n         assertPathLocation();\n         this.path = path.toPath().normalize();\n@@ -204,6 +223,10 @@ public String toString() {\n             buf.append(\" included-default-config=\");\n             buf.append(includedDefaultConfig);\n         }\n+        if (dependency) {\n+            buf.append(\" dependency=\");\n+            buf.append(dependency);\n+        }\n         return buf.append('}').toString();\n     }\n "
  },
  {
    "sha": "c661f42d3f468ac8bd366a6a8bb92b1f3cf45ce2",
    "filename": "plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/AbstractBuildBootableJarMojo.java",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/AbstractBuildBootableJarMojo.java",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/AbstractBuildBootableJarMojo.java",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/AbstractBuildBootableJarMojo.java?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -41,6 +41,7 @@\n import java.util.EnumSet;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.IdentityHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -389,6 +390,9 @@\n \n     private boolean forkCli;\n \n+    // Exposed to MavenUpgrade\n+    Map<FeaturePack, FeaturePackLocation> resolvedLocations = new IdentityHashMap<>();\n+\n     // EE-9 specific\n     private Path provisioningMavenRepo;\n     private String jakartaTransformSuffix;\n@@ -854,7 +858,15 @@ private GalleonConfig buildFeaturePacksConfig(ProvisioningManager pm, boolean ha\n             } else {\n                 fpl = FeaturePackLocation.fromString(fp.getLocation());\n             }\n-\n+            // They will be used when computing the overridden artifacts per feature-pack.\n+            if (!fp.getOverridenArtifacts().isEmpty()) {\n+                resolvedLocations.put(fp, fpl);\n+            }\n+            // We are using dependencies only to convey overriden artifacts.\n+            // Dependencies are upgraded as overridden artifacts not as dependency.\n+            if (fp.isDependency()) {\n+                continue;\n+            }\n             final FeaturePackConfig.Builder fpConfig = FeaturePackConfig.builder(fpl);\n             fpConfig.setInheritConfigs(false);\n             if (fp.isInheritPackages() != null) {"
  },
  {
    "sha": "e411597327c267ae941e86cf1d0f67eb00bc17fc",
    "filename": "plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/MavenUpgrade.java",
    "status": "modified",
    "additions": 158,
    "deletions": 65,
    "changes": 223,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/MavenUpgrade.java",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/MavenUpgrade.java",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/MavenUpgrade.java?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -49,6 +49,7 @@\n     private final AbstractBuildBootableJarMojo mojo;\n     private final ProvisioningConfig config;\n     private final Map<ProducerSpec, String> producerToGAC = new HashMap<>();\n+    private final Map<String, FeaturePackLocation.FPID> gACToProducer = new HashMap<>();\n     private final ProvisioningManager pm;\n     private ScannedModules modules;\n \n@@ -58,23 +59,41 @@\n         this.config = config;\n         this.pm = pm;\n         for (FeaturePackConfig cfg : config.getFeaturePackDeps()) {\n-            FeaturePack fp = toFeaturePack(cfg, pm);\n+            FeaturePack fp = toFeaturePack(cfg.getLocation(), pm);\n             if (fp == null) {\n                 throw new ProvisioningException(\"Invalid location \" + cfg.getLocation());\n             }\n             topLevels.put(fp.getGAC(), fp);\n         }\n \n+        Map<String, FeaturePack> explicitDependencies = new HashMap<>();\n+        for (Entry<FeaturePack, FeaturePackLocation> entry : mojo.resolvedLocations.entrySet()) {\n+            FeaturePackLocation location = entry.getValue();\n+            FeaturePack original = entry.getKey();\n+            if (original.isDependency()) {\n+                FeaturePack fp = toFeaturePack(location, pm);\n+                if (fp == null) {\n+                    throw new ProvisioningException(\"Invalid location \" + location);\n+                }\n+                explicitDependencies.put(fp.getGAC(), fp);\n+            }\n+        }\n+\n         // Resolve the FP to retrieve dependencies as expressed in fp spec.\n         Map<String, Path> resolvedFeaturePacks = new HashMap<>();\n         for (FeaturePack fp : topLevels.values()) {\n             resolvedFeaturePacks.put(fp.getGAC(), mojo.resolveMaven(fp));\n         }\n+        for (FeaturePack fp : explicitDependencies.values()) {\n+            resolvedFeaturePacks.put(fp.getGAC(), mojo.resolveMaven(fp));\n+        }\n         mojo.debug(\"Top level feature-packs: %s\", topLevels);\n+        mojo.debug(\"Explicit dependencies feature-packs: %s\", explicitDependencies);\n         mojo.debug(\"Resolved feature-packs: %s\", resolvedFeaturePacks);\n         for (Entry<String, Path> entry : resolvedFeaturePacks.entrySet()) {\n             FeaturePackSpec spec = FeaturePackDescriber.readSpec(entry.getValue());\n             producerToGAC.put(spec.getFPID().getProducer(), entry.getKey());\n+            gACToProducer.put(entry.getKey(), spec.getFPID());\n             List<FeaturePackConfig> allDeps = new ArrayList<>();\n             for (FeaturePackConfig cfg : spec.getFeaturePackDeps()) {\n                 allDeps.add(cfg);\n@@ -83,7 +102,7 @@\n                 allDeps.add(cfg);\n             }\n             for (FeaturePackConfig cfg : allDeps) {\n-                FeaturePack fp = toFeaturePack(cfg, pm);\n+                FeaturePack fp = toFeaturePack(cfg.getLocation(), pm);\n                 if (fp != null) {\n                     String gac = fp.getGAC();\n                     // Only add the dep if not already seen. The first installed FP dep wins.\n@@ -104,6 +123,10 @@\n         return getScannedModules().getProvisionedArtifacts();\n     }\n \n+    private Map<String, String> getOriginalVersions(String producer) throws ProvisioningException, MojoExecutionException {\n+        return getScannedModules().getProvisionedArtifacts(producer);\n+    }\n+\n     private ScannedModules getScannedModules() throws ProvisioningException, MojoExecutionException {\n         if (modules == null) {\n             modules = ScannedModules.scanProvisionedArtifacts(pm, config);\n@@ -112,7 +135,7 @@ private ScannedModules getScannedModules() throws ProvisioningException, MojoExe\n     }\n \n     void dumpArtifacts(Path file) throws ProvisioningException, MojoExecutionException, IOException {\n-        Map<String, Map<String, String>> perModules = getScannedModules().getPerModuleArtifacts();\n+        Map<String, Map<String, Map<String, String>>> perFeaturePack = getScannedModules().getPerFeaturePackArtifacts();\n         StringBuilder builder = new StringBuilder();\n         builder.append(\"<all-artifacts>\").append(System.lineSeparator());\n \n@@ -140,24 +163,30 @@ void dumpArtifacts(Path file) throws ProvisioningException, MojoExecutionExcepti\n         builder.append(\"    <version>\").append(jbossModules.getVersion()).append(\"</version>\").append(System.lineSeparator());\n         builder.append(\"    <type>\").append(jbossModules.getType()).append(\"</type>\").append(System.lineSeparator());\n         builder.append(\"  </jboss-modules-runtime>\").append(System.lineSeparator());\n-        builder.append(\"  <modules>\").append(System.lineSeparator());\n-        for (Entry<String, Map<String, String>> module : perModules.entrySet()) {\n-            builder.append(\"    <module name=\\\"\").append(module.getKey()).append(\"\\\">\").append(System.lineSeparator());\n-            for (String s : module.getValue().values()) {\n-                Artifact a = AbstractBuildBootableJarMojo.getArtifact(s);\n-                builder.append(\"      <artifact>\").append(System.lineSeparator());\n-                builder.append(\"        <groupId>\").append(a.getGroupId()).append(\"</groupId>\").append(System.lineSeparator());\n-                builder.append(\"        <artifactId>\").append(a.getArtifactId()).append(\"</artifactId>\").append(System.lineSeparator());\n-                if (a.getClassifier() != null && !a.getClassifier().isEmpty()) {\n-                    builder.append(\"        <classifier>\").append(a.getClassifier()).append(\"</classifier>\").append(System.lineSeparator());\n+        builder.append(\"  <feature-packs>\").append(System.lineSeparator());\n+        for (Entry<String, Map<String, Map<String, String>>> fp : perFeaturePack.entrySet()) {\n+            builder.append(\"    <feature-pack producer=\\\"\").append(fp.getKey()).append(\"\\\" >\").append(System.lineSeparator());\n+            builder.append(\"      <modules>\").append(System.lineSeparator());\n+            for (Entry<String, Map<String, String>> module : fp.getValue().entrySet()) {\n+                builder.append(\"        <module name=\\\"\").append(module.getKey()).append(\"\\\">\").append(System.lineSeparator());\n+                for (String s : module.getValue().values()) {\n+                    Artifact a = AbstractBuildBootableJarMojo.getArtifact(s);\n+                    builder.append(\"          <artifact>\").append(System.lineSeparator());\n+                    builder.append(\"            <groupId>\").append(a.getGroupId()).append(\"</groupId>\").append(System.lineSeparator());\n+                    builder.append(\"            <artifactId>\").append(a.getArtifactId()).append(\"</artifactId>\").append(System.lineSeparator());\n+                    if (a.getClassifier() != null && !a.getClassifier().isEmpty()) {\n+                        builder.append(\"            <classifier>\").append(a.getClassifier()).append(\"</classifier>\").append(System.lineSeparator());\n+                    }\n+                    builder.append(\"            <version>\").append(a.getVersion()).append(\"</version>\").append(System.lineSeparator());\n+                    builder.append(\"            <type>\").append(a.getType()).append(\"</type>\").append(System.lineSeparator());\n+                    builder.append(\"          </artifact>\").append(System.lineSeparator());\n                 }\n-                builder.append(\"        <version>\").append(a.getVersion()).append(\"</version>\").append(System.lineSeparator());\n-                builder.append(\"        <type>\").append(a.getType()).append(\"</type>\").append(System.lineSeparator());\n-                builder.append(\"      </artifact>\").append(System.lineSeparator());\n+                builder.append(\"        </module>\").append(System.lineSeparator());\n             }\n-            builder.append(\"    </module>\").append(System.lineSeparator());\n+            builder.append(\"      </modules>\").append(System.lineSeparator());\n+            builder.append(\"    </feature-pack>\").append(System.lineSeparator());\n         }\n-        builder.append(\"  </modules>\").append(System.lineSeparator());\n+        builder.append(\"  </feature-packs>\").append(System.lineSeparator());\n         builder.append(\"</all-artifacts>\").append(System.lineSeparator());\n         Files.write(file, builder.toString().getBytes(\"UTF-8\"));\n     }\n@@ -178,7 +207,7 @@ private static String getOriginalArtifactVersion(OverriddenArtifact a, Map<Strin\n     }\n \n     ProvisioningConfig upgrade() throws MojoExecutionException, ProvisioningDescriptionException, ProvisioningException {\n-        if (mojo.overriddenServerArtifacts.isEmpty()) {\n+        if (mojo.overriddenServerArtifacts.isEmpty() && mojo.resolvedLocations.isEmpty()) {\n             return config;\n         }\n         Map<String, String> originalVersions = getOriginalVersions();\n@@ -191,7 +220,7 @@ ProvisioningConfig upgrade() throws MojoExecutionException, ProvisioningDescript\n             }\n             String key = a.getGAC();\n             if (allArtifacts.containsKey(key)) {\n-                throw new MojoExecutionException(\"Artifact \" + key + \" is present more than once in the overridden artifacts. Must be unique.\");\n+                throw new MojoExecutionException(\"Artifact \" + key + \" is present more than once in the global overridden artifacts. Must be unique.\");\n             } else {\n                 allArtifacts.put(key, a);\n             }\n@@ -236,36 +265,46 @@ ProvisioningConfig upgrade() throws MojoExecutionException, ProvisioningDescript\n                     }\n                     throw new MojoExecutionException(\"No version for artifact \" + a.getGAC());\n                 } else {\n-                    checkScope(mavenArtifact);\n-                    if (a.getVersion() == null) {\n-                        a.setVersion(mavenArtifact.getVersion());\n-                    }\n-                    if (a.getType() == null) {\n-                        a.setType(mavenArtifact.getType());\n-                    }\n-                    String originalVersion = getOriginalArtifactVersion(a, originalVersions);\n-                    if (originalVersion == null) {\n-                        throw new MojoExecutionException(\"Overridden artifact \" + a.getGAC() + \" not know in provisioned feature-packs\");\n-                    }\n-                    DefaultArtifactVersion orig = new DefaultArtifactVersion(originalVersion);\n-                    DefaultArtifactVersion overriddenVersion = new DefaultArtifactVersion(a.getVersion());\n-                    int compared = orig.compareTo(overriddenVersion);\n-                    if (compared > 0) {\n-                        if (mojo.warnArtifactDowngrade) {\n-                            mojo.getLog().warn(\"[UPDATE] Downgrading artifact \" + a.getGAC() + \" from \" + originalVersion + \" to \" + a.getVersion());\n-                        }\n-                    } else {\n-                        if (compared == 0) {\n-                            mojo.getLog().warn(\"[UPDATE] Artifact \" + a.getGAC() + \" is already at version \" + a.getVersion() + \", will be not upgraded.\");\n-                        }\n-                    }\n-                    if (compared != 0) {\n-                        artifactDependencies.add(a);\n-                    }\n+                    addArtifact(a, mavenArtifact, originalVersions, artifactDependencies, null);\n+                }\n+            }\n+        }\n+        Map<String, List<OverriddenArtifact>> perFeaturePack = new HashMap<>();\n+        for (Entry<FeaturePack, FeaturePackLocation> entry : mojo.resolvedLocations.entrySet()) {\n+            FeaturePack fp = entry.getKey();\n+            String gac = fp.getGAC();\n+            FeaturePackLocation.FPID fpid = gACToProducer.get(gac);\n+            // A universe base FPL.\n+            if (fpid == null) {\n+                fpid = entry.getValue().getFPID();\n+            }\n+            String producerName = fpid.getProducer().getName();\n+            Map<String, String> originalversionsForProducer = getOriginalVersions(producerName);\n+            Map<String, OverriddenArtifact> seenArtifacts = new HashMap<>();\n+            for (OverriddenArtifact o : fp.getOverridenArtifacts()) {\n+                String key = o.getGAC();\n+                if (seenArtifacts.containsKey(key)) {\n+                    throw new MojoExecutionException(\"Artifact \" + key + \" is present more than once in the overridden artifacts of  \" + gac + \". Must be unique.\");\n+                } else {\n+                    seenArtifacts.put(key, o);\n+                }\n+                if (o.getGroupId() == null || o.getArtifactId() == null) {\n+                    throw new MojoExecutionException(\"Invalid Artifact , groupId and artifactId are required\");\n+                }\n+                Artifact mavenArtifact = mojo.artifactVersions.getArtifact(o);\n+                if (mavenArtifact == null) {\n+                    throw new MojoExecutionException(\"No version for artifact \" + o.getGAC());\n                 }\n+                List<OverriddenArtifact> lst = perFeaturePack.get(producerName);\n+                if (lst == null) {\n+                    lst = new ArrayList<>();\n+                    perFeaturePack.put(producerName, lst);\n+                }\n+                addArtifact(o, mavenArtifact, originalversionsForProducer, lst, producerName);\n             }\n         }\n-        if (!artifactDependencies.isEmpty() || !featurePackDependencies.isEmpty()) {\n+\n+        if (!artifactDependencies.isEmpty() || !featurePackDependencies.isEmpty() || !perFeaturePack.isEmpty()) {\n             ProvisioningConfig.Builder c = ProvisioningConfig.builder(config);\n             if (!featurePackDependencies.isEmpty()) {\n                 mojo.getLog().info(\"[UPDATE] Overriding Galleon feature-pack dependency with: \");\n@@ -277,16 +316,31 @@ ProvisioningConfig upgrade() throws MojoExecutionException, ProvisioningDescript\n                     c.addTransitiveDep(fpl);\n                 }\n             }\n-            if (!artifactDependencies.isEmpty()) {\n-                mojo.getLog().info(\"[UPDATE] Overriding server artifacts with:\");\n-                if (!mojo.pluginOptions.containsKey(\"jboss-overridden-artifacts\")) {\n+            StringBuilder artifactsOption = new StringBuilder();\n+            if (mojo.pluginOptions.containsKey(\"jboss-overridden-artifacts\")) {\n+                mojo.getLog().warn(\"[UPDATE] jboss-overridden-artifacts plugin option already set, any \"\n+                        + \"specified artifact upgrade will be not applied.\");\n+            } else {\n+                // Global upgrade\n+                if (!artifactDependencies.isEmpty()) {\n+                    mojo.getLog().info(\"[UPDATE] Overriding server artifacts globally with:\");\n                     String updates = toOptionValue(artifactDependencies);\n-                    for (OverriddenArtifact update : artifactDependencies) {\n-                        mojo.getLog().info(\"[UPDATE]  \" + update.getGroupId() + \":\" + update.getArtifactId() + \":\"\n-                                + (update.getClassifier() == null ? \"\" : update.getClassifier() + \":\")\n-                                + update.getVersion() + (update.getType() == null ? \"\" : \":\" + update.getType()));\n+                    advertiseArtifactsUpgrade(artifactDependencies);\n+                    artifactsOption.append(updates);\n+                }\n+                // per feature-pack\n+                if (!perFeaturePack.isEmpty()) {\n+                    for (Entry<String, List<OverriddenArtifact>> entry : perFeaturePack.entrySet()) {\n+                        List<OverriddenArtifact> artifacts = entry.getValue();\n+                        String producer = entry.getKey();\n+                        mojo.getLog().info(\"[UPDATE] Overriding server artifacts from \" + producer + \" with:\");\n+                        String updates = toOptionValue(artifacts);\n+                        advertiseArtifactsUpgrade(artifacts);\n+                        artifactsOption.append(\"@\").append(producer).append(\"=\").append(updates);\n                     }\n-                    c.addOption(\"jboss-overridden-artifacts\", updates);\n+                }\n+                if (artifactsOption.length() != 0) {\n+                    c.addOption(\"jboss-overridden-artifacts\", artifactsOption.toString());\n                 }\n             }\n             return c.build();\n@@ -295,6 +349,45 @@ ProvisioningConfig upgrade() throws MojoExecutionException, ProvisioningDescript\n         }\n     }\n \n+    private void advertiseArtifactsUpgrade(List<OverriddenArtifact> artifactDependencies) {\n+        for (OverriddenArtifact update : artifactDependencies) {\n+            mojo.getLog().info(\"[UPDATE]  \" + update.getGroupId() + \":\" + update.getArtifactId() + \":\"\n+                    + (update.getClassifier() == null ? \"\" : update.getClassifier() + \":\")\n+                    + update.getVersion() + (update.getType() == null ? \"\" : \":\" + update.getType()));\n+        }\n+    }\n+\n+    private void addArtifact(OverriddenArtifact a, Artifact mavenArtifact,\n+            Map<String, String> originalVersions, List<OverriddenArtifact> artifactDependencies, String producer) throws MojoExecutionException {\n+        checkScope(mavenArtifact);\n+        if (a.getVersion() == null) {\n+            a.setVersion(mavenArtifact.getVersion());\n+        }\n+        if (a.getType() == null) {\n+            a.setType(mavenArtifact.getType());\n+        }\n+        String originalVersion = getOriginalArtifactVersion(a, originalVersions);\n+        if (originalVersion == null) {\n+            throw new MojoExecutionException(\"Overridden artifact \" + a.getGAC() + \" not known in \" +\n+                    (producer == null ? \"provisioned feature-packs\" : producer));\n+        }\n+        DefaultArtifactVersion orig = new DefaultArtifactVersion(originalVersion);\n+        DefaultArtifactVersion overriddenVersion = new DefaultArtifactVersion(a.getVersion());\n+        int compared = orig.compareTo(overriddenVersion);\n+        if (compared > 0) {\n+            if (mojo.warnArtifactDowngrade) {\n+                mojo.getLog().warn(\"[UPDATE] Downgrading artifact \" + a.getGAC() + \" from \" + originalVersion + \" to \" + a.getVersion());\n+            }\n+        } else {\n+            if (compared == 0) {\n+                mojo.getLog().warn(\"[UPDATE] Artifact \" + a.getGAC() + \" is already at version \" + a.getVersion() + \", will be not upgraded.\");\n+            }\n+        }\n+        if (compared != 0) {\n+            artifactDependencies.add(a);\n+        }\n+    }\n+\n     void checkScope(Artifact a) {\n         if (!\"provided\".equals(a.getScope())) {\n             mojo.getLog().warn(\"[UPDATE] Overridden artifact \" + a.getGroupId() +\":\"+ a.getArtifactId()+\n@@ -318,13 +411,13 @@ static String locationWithVersion(String featurePackLocation, MavenProjectArtifa\n         return featurePackLocation;\n     }\n \n-    private FeaturePack toFeaturePack(FeaturePackConfig cfg, ProvisioningManager pm) throws MojoExecutionException {\n+    private FeaturePack toFeaturePack(FeaturePackLocation location, ProvisioningManager pm) throws MojoExecutionException {\n         FeaturePack fp;\n-        validateFPL(cfg.getLocation());\n-        if (cfg.getLocation().isMavenCoordinates()) {\n-            fp = getFeaturePack(cfg.getLocation().toString());\n+        validateFPL(location);\n+        if (location.isMavenCoordinates()) {\n+            fp = getFeaturePack(location.toString());\n         } else {\n-            fp = getFeaturePack(cfg, pm);\n+            fp = getFeaturePack(location, pm);\n         }\n         return fp;\n     }\n@@ -344,24 +437,24 @@ String getMavenFeaturePack(FeaturePackLocation.FPID location) {\n         }\n     }\n \n-    private FeaturePack getFeaturePack(FeaturePackConfig cfg, ProvisioningManager pm) {\n+    private FeaturePack getFeaturePack(FeaturePackLocation location, ProvisioningManager pm) {\n         try {\n-            Channel channel = pm.getLayoutFactory().getUniverseResolver().getChannel(cfg.getLocation());\n+            Channel channel = pm.getLayoutFactory().getUniverseResolver().getChannel(location);\n             if (channel instanceof MavenChannel) {\n                 MavenChannel mavenChannel = (MavenChannel) channel;\n                 FeaturePack fp = new FeaturePack();\n                 fp.setGroupId(mavenChannel.getFeaturePackGroupId());\n                 fp.setArtifactId(mavenChannel.getFeaturePackArtifactId());\n-                String build = cfg.getLocation().getBuild();\n+                String build = location.getBuild();\n                 if (build == null) {\n-                    build = mavenChannel.getLatestBuild(cfg.getLocation());\n+                    build = mavenChannel.getLatestBuild(location);\n                 }\n                 fp.setVersion(build);\n                 return fp;\n             }\n         } catch (ProvisioningException ex) {\n             // OK, invalid channel, can occurs for non registered FP that are referenced from GAV.\n-            mojo.debug(\"Invalid channel for %s, the feature-pack is not known in the universe, skipping it.\", cfg.getLocation());\n+            mojo.debug(\"Invalid channel for %s, the feature-pack is not known in the universe, skipping it.\", location);\n         }\n         return null;\n     }"
  },
  {
    "sha": "ccbc738c4d7ac35dced0c67c777ed8733881974f",
    "filename": "plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/ScannedModules.java",
    "status": "modified",
    "additions": 25,
    "deletions": 9,
    "changes": 34,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/ScannedModules.java",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/ScannedModules.java",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/plugin/src/main/java/org/wildfly/plugins/bootablejar/maven/goals/ScannedModules.java?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -50,18 +50,18 @@\n     private static final String MODULE = \"module\";\n     private static final String MODULE_RUNTIME_KEY = \"org.jboss.modules:jboss-modules\";\n \n-    private final Map<String, Map<String, String>> perModule;\n+    private final Map<String, Map<String, Map<String, String>>> perFeaturePacks;\n     private final String moduleRuntimeKey;\n     private final String moduleRuntimeValue;\n \n-    ScannedModules(Map<String, Map<String, String>> perModule, String moduleRuntimeKey, String moduleRuntimeValue) {\n-        this.perModule = perModule;\n+    ScannedModules(Map<String, Map<String, Map<String, String>>> perFeaturePacks, String moduleRuntimeKey, String moduleRuntimeValue) {\n+        this.perFeaturePacks = perFeaturePacks;\n         this.moduleRuntimeKey = moduleRuntimeKey;\n         this.moduleRuntimeValue = moduleRuntimeValue;\n     }\n \n-    Map<String, Map<String, String>> getPerModuleArtifacts() {\n-        return perModule;\n+    Map<String, Map<String, Map<String, String>>> getPerFeaturePackArtifacts() {\n+        return perFeaturePacks;\n     }\n \n     String getModuleRuntime() {\n@@ -70,17 +70,31 @@ String getModuleRuntime() {\n \n     Map<String, String> getProvisionedArtifacts() {\n         Map<String, String> all = new HashMap<>();\n-        for (Map<String, String> artifacts : perModule.values()) {\n-            all.putAll(artifacts);\n+        for (String producer : perFeaturePacks.keySet()) {\n+            Map<String, Map<String, String>> perModule = perFeaturePacks.get(producer);\n+            for (Map<String, String> artifacts : perModule.values()) {\n+                all.putAll(artifacts);\n+            }\n         }\n         all.put(moduleRuntimeKey, moduleRuntimeValue);\n         return all;\n     }\n \n+    Map<String, String> getProvisionedArtifacts(String producer) {\n+        Map<String, String> all = new HashMap<>();\n+        Map<String, Map<String, String>> perModule = perFeaturePacks.get(producer);\n+        if (perModule != null) {\n+            for (Map<String, String> artifacts : perModule.values()) {\n+                all.putAll(artifacts);\n+            }\n+        }\n+        return all;\n+    }\n+\n     static ScannedModules scanProvisionedArtifacts(ProvisioningManager pm, ProvisioningConfig config)\n             throws ProvisioningException, MojoExecutionException {\n         Map<String, String> propsMap = new HashMap<>();\n-        Map<String, Map<String, String>> perModule = new TreeMap<>();\n+        Map<String, Map<String, Map<String, String>>> perFeaturePack = new TreeMap<>();\n         try (ProvisioningRuntime rt = pm.getRuntime(config)) {\n             for (FeaturePackRuntime fprt : rt.getFeaturePacks()) {\n                 Path artifactProps = fprt.getResource(AbstractBuildBootableJarMojo.WILDFLY_ARTIFACT_VERSIONS_RESOURCE_PATH);\n@@ -91,6 +105,8 @@ static ScannedModules scanProvisionedArtifacts(ProvisioningManager pm, Provision\n                 }\n             }\n             for (FeaturePackRuntime fprt : rt.getFeaturePacks()) {\n+                Map<String, Map<String, String>> perModule = new TreeMap<>();\n+                perFeaturePack.put(fprt.getFPID().getProducer().getName(), perModule);\n                 processPackages(fprt, perModule, propsMap);\n             }\n         }\n@@ -99,7 +115,7 @@ static ScannedModules scanProvisionedArtifacts(ProvisioningManager pm, Provision\n         if (moduleRuntimeValue == null) {\n             throw new ProvisioningException(\"No JBoss Modules runtime found\");\n         }\n-        return new ScannedModules(perModule, MODULE_RUNTIME_KEY, moduleRuntimeValue);\n+        return new ScannedModules(perFeaturePack, MODULE_RUNTIME_KEY, moduleRuntimeValue);\n     }\n \n     private static void processPackages(final FeaturePackRuntime fp,"
  },
  {
    "sha": "df2a6f3db45dd69a596e7daa9edde841a655efc8",
    "filename": "tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerFPLTestCase.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerFPLTestCase.java",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerFPLTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerFPLTestCase.java?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.wildfly.plugins.bootablejar.maven.goals;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.wildfly.plugins.bootablejar.maven.common.OverriddenArtifact;\n+\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * @author jdenise\n+ */\n+// Need WF 23.x that supports per feature-pack upgrade.\n+@Ignore\n+public class UpgradeArtifactProducerFPLTestCase extends AbstractBootableJarMojoTestCase {\n+\n+    public UpgradeArtifactProducerFPLTestCase() {\n+        super(\"upgrade-artifact-producer-fpl-pom.xml\", true, null);\n+    }\n+\n+    @Test\n+    public void testUpgrade() throws Exception {\n+        BuildBootableJarMojo mojo = lookupMojo(\"package\");\n+        MavenProjectArtifactVersions artifacts = MavenProjectArtifactVersions.getInstance(mojo.project);\n+        // Upgrade wildfly-ee-galleon-pack and undertow-core. GLoba undertow-core is hidden by specific upgrade\n+        // on wildfly-ee-galleon-pack.\n+        Assert.assertEquals(2, mojo.overriddenServerArtifacts.size());\n+        String hiddenUndertowVersion = null;\n+        String wildflyeeVersion = null;\n+        boolean seenArtifact = false;\n+        boolean seenFeaturePack = false;\n+        for (OverriddenArtifact oa : mojo.overriddenServerArtifacts) {\n+            Artifact a = null;\n+            if (\"io.undertow\".equals(oa.getGroupId())) {\n+                a = artifacts.getArtifact(oa);\n+                Assert.assertNotNull(oa.getGroupId() + \":\" + oa.getArtifactId(), a);\n+                seenArtifact = true;\n+                hiddenUndertowVersion = a.getVersion();\n+            } else {\n+                a = artifacts.getFeaturePackArtifact(oa.getGroupId(), oa.getArtifactId(), oa.getClassifier());\n+                Assert.assertNotNull(oa.getGroupId() + \":\" + oa.getArtifactId(), a);\n+                seenFeaturePack = true;\n+                wildflyeeVersion = a.getVersion();\n+            }\n+            Assert.assertNotNull(a);\n+            Assert.assertNotNull(a.getVersion());\n+            Assert.assertEquals(oa.getGroupId(), a.getGroupId());\n+            Assert.assertEquals(oa.getArtifactId(), a.getArtifactId());\n+        }\n+        Assert.assertTrue(seenArtifact && seenFeaturePack);\n+\n+        // We have an older release of undertow-core in wildfly-ee-galleon-pack in the pom.xml\n+        Assert.assertEquals(1, mojo.featurePacks.get(0).getOverridenArtifacts().size());\n+\n+        OverriddenArtifact oartifact = mojo.featurePacks.get(0).getOverridenArtifacts().get(0);\n+        Artifact a = artifacts.getArtifact(oartifact);\n+        Assert.assertNotNull(oartifact.getGroupId() + \":\" + oartifact.getArtifactId(), a);\n+        // Version is present directly in overridden artifact, it hides the global one.\n+        String undertowVersion = oartifact.getVersion();\n+        mojo.recordState = true;\n+        mojo.execute();\n+        final Path dir = getTestDir();\n+        String[] layers = {\"jaxrs-server\"};\n+        Path unzippedJar = checkAndGetWildFlyHome(dir, true, true, layers, null);\n+        try {\n+            Path modulesDir = unzippedJar.resolve(\"modules\").resolve(\"system\").resolve(\"layers\").resolve(\"base\");\n+            Path undertow = modulesDir.resolve(\"io\").resolve(\"undertow\").resolve(\"core\").resolve(\"main\").resolve(\"undertow-core-\" + undertowVersion + \".jar\");\n+            Assert.assertTrue(undertow.toString(), Files.exists(undertow));\n+            Path ee = modulesDir.resolve(\"org\").resolve(\"jboss\").resolve(\"as\").resolve(\"ee\").resolve(\"main\").resolve(\"wildfly-ee-\" + wildflyeeVersion + \".jar\");\n+            Assert.assertTrue(ee.toString(), Files.exists(ee));\n+        } finally {\n+            BuildBootableJarMojo.deleteDir(unzippedJar);\n+        }\n+        checkJar(dir, true, true, layers, null);\n+        checkDeployment(dir, true);\n+    }\n+\n+    @Test\n+    public void testInvalidUpgrades() throws Exception {\n+        BuildBootableJarMojo mojo = lookupMojo(\"package\");\n+        Assert.assertEquals(1, mojo.featurePacks.get(0).getOverridenArtifacts().size());\n+        List<OverriddenArtifact> orig = new ArrayList<>();\n+        orig.addAll(mojo.featurePacks.get(0).getOverridenArtifacts());\n+        mojo.featurePacks.get(0).getOverridenArtifacts().addAll(mojo.featurePacks.get(0).getOverridenArtifacts());\n+        try {\n+            mojo.execute();\n+            throw new Exception(\"Should have failed\");\n+        } catch (MojoExecutionException ex) {\n+            // XXX Expected\n+        }\n+        mojo.featurePacks.get(0).setOverridenArtifacts(orig);\n+        String grpId = orig.get(0).getGroupId();\n+        try {\n+            orig.get(0).getGroupId();\n+            orig.get(0).setGroupId(null);\n+            mojo.execute();\n+            throw new Exception(\"Should have failed\");\n+        } catch (MojoExecutionException ex) {\n+            // XXX Expected\n+        }\n+        orig.get(0).setGroupId(grpId);\n+        try {\n+            orig.get(0).setArtifactId(null);\n+            mojo.execute();\n+            throw new Exception(\"Should have failed\");\n+        } catch (MojoExecutionException ex) {\n+            // XXX Expected\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "100667993dabca299cedb8169c78b7b2cab5f40f",
    "filename": "tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerTestCase.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerTestCase.java",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactProducerTestCase.java?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.wildfly.plugins.bootablejar.maven.goals;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.wildfly.plugins.bootablejar.maven.common.OverriddenArtifact;\n+\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * @author jdenise\n+ */\n+\n+// Need WF 23.x that supports per feature-pack upgrade.\n+@Ignore\n+public class UpgradeArtifactProducerTestCase extends AbstractBootableJarMojoTestCase {\n+\n+    public UpgradeArtifactProducerTestCase() {\n+        super(\"upgrade-artifact-producer-pom.xml\", true, null);\n+    }\n+\n+    @Test\n+    public void testUpgrade() throws Exception {\n+        BuildBootableJarMojo mojo = lookupMojo(\"package\");\n+        MavenProjectArtifactVersions artifacts = MavenProjectArtifactVersions.getInstance(mojo.project);\n+        // Upgrade wildfly-ee-galleon-pack and undertow-core. GLoba undertow-core is hidden by specific upgrade\n+        // on wildfly-ee-galleon-pack.\n+        Assert.assertEquals(2, mojo.overriddenServerArtifacts.size());\n+        String hiddenUndertowVersion = null;\n+        String wildflyeeVersion = null;\n+        boolean seenArtifact = false;\n+        boolean seenFeaturePack = false;\n+        for (OverriddenArtifact oa : mojo.overriddenServerArtifacts) {\n+            Artifact a = null;\n+            if (\"io.undertow\".equals(oa.getGroupId())) {\n+                a = artifacts.getArtifact(oa);\n+                Assert.assertNotNull(oa.getGroupId() + \":\" + oa.getArtifactId(), a);\n+                seenArtifact = true;\n+                hiddenUndertowVersion = a.getVersion();\n+            } else {\n+                a = artifacts.getFeaturePackArtifact(oa.getGroupId(), oa.getArtifactId(), oa.getClassifier());\n+                Assert.assertNotNull(oa.getGroupId() + \":\" + oa.getArtifactId(), a);\n+                seenFeaturePack = true;\n+                wildflyeeVersion = a.getVersion();\n+            }\n+            Assert.assertNotNull(a);\n+            Assert.assertNotNull(a.getVersion());\n+            Assert.assertEquals(oa.getGroupId(), a.getGroupId());\n+            Assert.assertEquals(oa.getArtifactId(), a.getArtifactId());\n+        }\n+        Assert.assertTrue(seenArtifact && seenFeaturePack);\n+\n+        // We have an older release of undertow-core in wildfly-ee-galleon-pack in the pom.xml\n+        Assert.assertEquals(1, mojo.featurePacks.get(0).getOverridenArtifacts().size());\n+\n+        OverriddenArtifact oartifact = mojo.featurePacks.get(0).getOverridenArtifacts().get(0);\n+        Artifact a = artifacts.getArtifact(oartifact);\n+        Assert.assertNotNull(oartifact.getGroupId() + \":\" + oartifact.getArtifactId(), a);\n+        // Version is present directly in overridden artifact, it hides the global one.\n+        String undertowVersion = oartifact.getVersion();\n+        mojo.recordState = true;\n+        mojo.execute();\n+        final Path dir = getTestDir();\n+        String[] layers = {\"jaxrs-server\"};\n+        Path unzippedJar = checkAndGetWildFlyHome(dir, true, true, layers, null);\n+        try {\n+            Path modulesDir = unzippedJar.resolve(\"modules\").resolve(\"system\").resolve(\"layers\").resolve(\"base\");\n+            Path undertow = modulesDir.resolve(\"io\").resolve(\"undertow\").resolve(\"core\").resolve(\"main\").resolve(\"undertow-core-\" + undertowVersion + \".jar\");\n+            Assert.assertTrue(undertow.toString(), Files.exists(undertow));\n+            Path ee = modulesDir.resolve(\"org\").resolve(\"jboss\").resolve(\"as\").resolve(\"ee\").resolve(\"main\").resolve(\"wildfly-ee-\" + wildflyeeVersion + \".jar\");\n+            Assert.assertTrue(ee.toString(), Files.exists(ee));\n+        } finally {\n+            BuildBootableJarMojo.deleteDir(unzippedJar);\n+        }\n+        checkJar(dir, true, true, layers, null);\n+        checkDeployment(dir, true);\n+    }\n+\n+    @Test\n+    public void testInvalidUpgrades() throws Exception {\n+        BuildBootableJarMojo mojo = lookupMojo(\"package\");\n+        Assert.assertEquals(1, mojo.featurePacks.get(0).getOverridenArtifacts().size());\n+        List<OverriddenArtifact> orig = new ArrayList<>();\n+        orig.addAll(mojo.featurePacks.get(0).getOverridenArtifacts());\n+        mojo.featurePacks.get(0).getOverridenArtifacts().addAll(mojo.featurePacks.get(0).getOverridenArtifacts());\n+        try {\n+            mojo.execute();\n+            throw new Exception(\"Should have failed\");\n+        } catch (MojoExecutionException ex) {\n+            // XXX Expected\n+        }\n+        mojo.featurePacks.get(0).setOverridenArtifacts(orig);\n+        String grpId = orig.get(0).getGroupId();\n+        try {\n+            orig.get(0).getGroupId();\n+            orig.get(0).setGroupId(null);\n+            mojo.execute();\n+            throw new Exception(\"Should have failed\");\n+        } catch (MojoExecutionException ex) {\n+            // XXX Expected\n+        }\n+        orig.get(0).setGroupId(grpId);\n+        try {\n+            orig.get(0).setArtifactId(null);\n+            mojo.execute();\n+            throw new Exception(\"Should have failed\");\n+        } catch (MojoExecutionException ex) {\n+            // XXX Expected\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "c56c1b938652ead81d83c7c6d479edec22ab5dae",
    "filename": "tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactUnknownArtifactTestCase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactUnknownArtifactTestCase.java",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactUnknownArtifactTestCase.java",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/tests/src/test/java/org/wildfly/plugins/bootablejar/maven/goals/UpgradeArtifactUnknownArtifactTestCase.java?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -37,7 +37,7 @@ public void testUpgrade() throws Exception {\n             mojo.execute();\n             throw new Exception(\"Should have failed\");\n         } catch (MojoExecutionException ex) {\n-            Assert.assertTrue(ex.toString().contains(\"Overridden artifact jakarta.platform:jakarta.jakartaee-api not know in provisioned feature-packs\"));\n+            Assert.assertTrue(ex.toString().contains(\"Overridden artifact jakarta.platform:jakarta.jakartaee-api not known in provisioned feature-packs\"));\n             // XXX OK, expected\n         }\n     }"
  },
  {
    "sha": "8769d32945ef4117f84f65c7c6da87179b121e2c",
    "filename": "tests/src/test/resources/poms/upgrade-artifact-producer-fpl-pom.xml",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/tests/src/test/resources/poms/upgrade-artifact-producer-fpl-pom.xml",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/tests/src/test/resources/poms/upgrade-artifact-producer-fpl-pom.xml",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/tests/src/test/resources/poms/upgrade-artifact-producer-fpl-pom.xml?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.wildfly.plugins.tests</groupId>\n+    <version>1.0.0.Final-SNAPSHOT</version>\n+    <artifactId>test2</artifactId>\n+    <packaging>war</packaging>\n+\n+    <name>WildFly bootable jar Example for tests</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.undertow</groupId>\n+            <artifactId>undertow-core</artifactId>\n+            <version>2.2.2.Final</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wildfly</groupId>\n+            <artifactId>wildfly-galleon-pack</artifactId>\n+            <version>WF_VERSION</version>\n+            <scope>provided</scope>\n+            <type>zip</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wildfly</groupId>\n+            <artifactId>wildfly-ee-galleon-pack</artifactId>\n+            <version>WF_EE_VERSION</version>\n+            <scope>provided</scope>\n+            <type>zip</type>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <finalName>test</finalName>\n+        <plugins>\n+            <plugin>\n+                <artifactId>wildfly-jar-maven-plugin</artifactId>\n+                <configuration>\n+                    <feature-packs>\n+                        <feature-pack>\n+                            <location>wildfly-ee@maven(org.jboss.universe:community-universe)#WF_EE_VERSION</location>\n+                            <dependency>true</dependency>\n+                            <overridden-artifacts>\n+                                <!-- undertow core -->\n+                                <artifact>\n+                                    <groupId>io.undertow</groupId>\n+                                    <artifactId>undertow-core</artifactId>\n+                                    <version>2.2.1.Final</version>\n+                                </artifact>\n+                            </overridden-artifacts>\n+                        </feature-pack>\n+                        <feature-pack>\n+                            <location>TEST_REPLACE</location>\n+                        </feature-pack>\n+                    </feature-packs>\n+                    <layers>\n+                        <layer>jaxrs-server</layer>\n+                    </layers>\n+                    <overridden-server-artifacts>\n+                        <!-- undertow core, this one is hidden by more specific one in wildfly-ee-galleon-pack -->\n+                        <artifact>\n+                            <groupId>io.undertow</groupId>\n+                            <artifactId>undertow-core</artifactId>\n+                        </artifact>\n+                        <artifact>\n+                            <groupId>org.wildfly</groupId>\n+                            <artifactId>wildfly-ee-galleon-pack</artifactId>\n+                        </artifact>\n+                    </overridden-server-artifacts>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"
  },
  {
    "sha": "a11c72ec8c203722ea404c77ccc2b4d36fa23706",
    "filename": "tests/src/test/resources/poms/upgrade-artifact-producer-pom.xml",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/blob/ead334245c066a66c27415b77c8503635540feae/tests/src/test/resources/poms/upgrade-artifact-producer-pom.xml",
    "raw_url": "https://github.com/wildfly-extras/wildfly-jar-maven-plugin/raw/ead334245c066a66c27415b77c8503635540feae/tests/src/test/resources/poms/upgrade-artifact-producer-pom.xml",
    "contents_url": "https://api.github.com/repos/wildfly-extras/wildfly-jar-maven-plugin/contents/tests/src/test/resources/poms/upgrade-artifact-producer-pom.xml?ref=ead334245c066a66c27415b77c8503635540feae",
    "patch": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.wildfly.plugins.tests</groupId>\n+    <version>1.0.0.Final-SNAPSHOT</version>\n+    <artifactId>test2</artifactId>\n+    <packaging>war</packaging>\n+\n+    <name>WildFly bootable jar Example for tests</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.undertow</groupId>\n+            <artifactId>undertow-core</artifactId>\n+            <version>2.2.2.Final</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wildfly</groupId>\n+            <artifactId>wildfly-galleon-pack</artifactId>\n+            <version>WF_VERSION</version>\n+            <scope>provided</scope>\n+            <type>zip</type>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wildfly</groupId>\n+            <artifactId>wildfly-ee-galleon-pack</artifactId>\n+            <version>WF_EE_VERSION</version>\n+            <scope>provided</scope>\n+            <type>zip</type>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <finalName>test</finalName>\n+        <plugins>\n+            <plugin>\n+                <artifactId>wildfly-jar-maven-plugin</artifactId>\n+                <configuration>\n+                    <feature-packs>\n+                        <feature-pack>\n+                            <groupId>org.wildfly</groupId>\n+                            <artifactId>wildfly-ee-galleon-pack</artifactId>\n+                            <dependency>true</dependency>\n+                            <overridden-artifacts>\n+                                <!-- undertow core -->\n+                                <artifact>\n+                                    <groupId>io.undertow</groupId>\n+                                    <artifactId>undertow-core</artifactId>\n+                                    <version>2.2.1.Final</version>\n+                                </artifact>\n+                            </overridden-artifacts>\n+                        </feature-pack>\n+                        <feature-pack>\n+                            <groupId>org.wildfly</groupId>\n+                            <artifactId>wildfly-galleon-pack</artifactId>\n+                        </feature-pack>\n+                    </feature-packs>\n+                    <layers>\n+                        <layer>jaxrs-server</layer>\n+                    </layers>\n+                    <overridden-server-artifacts>\n+                        <!-- undertow core, this one is hidden by more specific one in wildfly-ee-galleon-pack -->\n+                        <artifact>\n+                            <groupId>io.undertow</groupId>\n+                            <artifactId>undertow-core</artifactId>\n+                        </artifact>\n+                        <artifact>\n+                            <groupId>org.wildfly</groupId>\n+                            <artifactId>wildfly-ee-galleon-pack</artifactId>\n+                        </artifact>\n+                    </overridden-server-artifacts>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"
  }
]
