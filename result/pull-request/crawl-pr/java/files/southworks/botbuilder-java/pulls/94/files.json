[
  {
    "sha": "a16e2d9744acfe164ed9deae15b033c89fbeae71",
    "filename": "libraries/bot-azure/pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/pom.xml",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/pom.xml",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-azure/pom.xml?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -73,6 +73,12 @@\n       <artifactId>bot-dialogs</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-storage-queue</artifactId>\n+      <version>12.8.0</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>com.microsoft.bot</groupId>\n       <artifactId>bot-builder</artifactId>"
  },
  {
    "sha": "7efb2c31415739224c22d0bfe39aa77a5abed5ab",
    "filename": "libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/AzureQueueStorage.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/AzureQueueStorage.java",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/AzureQueueStorage.java",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/AzureQueueStorage.java?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.bot.azure.queues;\n+\n+import com.azure.storage.queue.QueueClient;\n+import com.azure.storage.queue.QueueClientBuilder;\n+import com.azure.storage.queue.models.QueueStorageException;\n+import com.azure.storage.queue.models.SendMessageResult;\n+import com.microsoft.bot.builder.QueueStorage;\n+import com.microsoft.bot.restclient.serializer.JacksonAdapter;\n+import com.microsoft.bot.schema.Activity;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Base64;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Service used to add messages to an Azure.Storage.Queues.\n+ */\n+public class AzureQueueStorage extends QueueStorage {\n+    private Boolean createQueueIfNotExists = true;\n+    private final QueueClient queueClient;\n+\n+    /**\n+     * Initializes a new instance of the {@link AzureQueueStorage} class.\n+     * @param queuesStorageConnectionString Azure Storage connection string.\n+     * @param queueName Name of the storage queue where entities will be queued.\n+     */\n+    public AzureQueueStorage(String queuesStorageConnectionString, String queueName) {\n+        if (StringUtils.isBlank(queuesStorageConnectionString)) {\n+            throw new IllegalArgumentException(\"queuesStorageConnectionString is required.\");\n+        }\n+\n+        if (StringUtils.isBlank(queueName)) {\n+            throw new IllegalArgumentException(\"queueName is required.\");\n+        }\n+\n+        queueClient = new QueueClientBuilder()\n+            .connectionString(queuesStorageConnectionString)\n+            .queueName(queueName)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Queue an Activity to an Azure.Storage.Queues.QueueClient.\n+     * The visibility timeout specifies how long the message should be invisible\n+     * to Dequeue and Peek operations. The message content must be a UTF-8 encoded string that is up to 64KB in size.\n+     * @param activity This is expected to be an {@link Activity} retrieved from a call to\n+     *                 activity.GetConversationReference().GetContinuationActivity().\n+     *                 This enables restarting the conversation using BotAdapter.ContinueConversationAsync.\n+     * @param visibilityTimeout Default value of 0. Cannot be larger than 7 days.\n+     * @param timeToLive Specifies the time-to-live interval for the message.\n+     * @return {@link SendMessageResult} as a Json string, from the QueueClient SendMessageAsync operation.\n+     */\n+    @Override\n+    public CompletableFuture<String> queueActivity(Activity activity,\n+                                                   @Nullable Duration visibilityTimeout,\n+                                                   @Nullable Duration timeToLive) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            if (createQueueIfNotExists) {\n+                try {\n+                    queueClient.create();\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                // This is an optimization flag to check if the container creation call has been made.\n+                // It is okay if this is called more than once.\n+                createQueueIfNotExists = false;\n+            }\n+\n+            try {\n+                JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+                String serializedActivity = jacksonAdapter.serialize(activity);\n+                byte[] encodedBytes = serializedActivity.getBytes(StandardCharsets.UTF_8);\n+                String encodedString = Base64.getEncoder().encodeToString(encodedBytes);\n+\n+                SendMessageResult receipt = queueClient.sendMessage(encodedString);\n+                return jacksonAdapter.serialize(receipt);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        });\n+    }\n+}"
  },
  {
    "sha": "07134724a3a2a0b06a8fb967e1d54e3bc1b2edd1",
    "filename": "libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/package-info.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/package-info.java",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/package-info.java",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-azure/src/main/java/com/microsoft/bot/azure/queues/package-info.java?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -0,0 +1,8 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+/**\n+ * This package contains the classes for bot-integration-core.\n+ */\n+package com.microsoft.bot.azure.queues;"
  },
  {
    "sha": "c9677ad6a59cbf8776864d3cfa9086a1b75af53a",
    "filename": "libraries/bot-azure/src/test/java/com/microsoft/bot/azure/AzureQueueTests.java",
    "status": "added",
    "additions": 244,
    "deletions": 0,
    "changes": 244,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/src/test/java/com/microsoft/bot/azure/AzureQueueTests.java",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-azure/src/test/java/com/microsoft/bot/azure/AzureQueueTests.java",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-azure/src/test/java/com/microsoft/bot/azure/AzureQueueTests.java?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.bot.azure;\n+\n+import com.azure.storage.queue.QueueClient;\n+import com.azure.storage.queue.QueueClientBuilder;\n+import com.azure.storage.queue.models.QueueMessageItem;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.microsoft.bot.azure.queues.AzureQueueStorage;\n+import com.microsoft.bot.builder.ConversationState;\n+import com.microsoft.bot.builder.MemoryStorage;\n+import com.microsoft.bot.builder.QueueStorage;\n+import com.microsoft.bot.builder.UserState;\n+import com.microsoft.bot.builder.adapters.TestAdapter;\n+import com.microsoft.bot.builder.adapters.TestFlow;\n+import com.microsoft.bot.dialogs.Dialog;\n+import com.microsoft.bot.dialogs.DialogContext;\n+import com.microsoft.bot.dialogs.DialogManager;\n+import com.microsoft.bot.dialogs.DialogTurnResult;\n+import com.microsoft.bot.schema.Activity;\n+import com.microsoft.bot.schema.ActivityEventNames;\n+import com.microsoft.bot.schema.ActivityTypes;\n+import com.microsoft.bot.schema.ConversationReference;\n+import org.apache.commons.codec.binary.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeParseException;\n+import java.util.Calendar;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.microsoft.bot.restclient.serializer.JacksonAdapter;\n+\n+public class AzureQueueTests {\n+    private static final Integer DEFAULT_DELAY = 2000;\n+    private static Boolean EMULATOR_IS_RUNNING = false;\n+    private final String connectionString = \"UseDevelopmentStorage=true\";\n+    private static final String NO_EMULATOR_MESSAGE = \"This test requires Azure STORAGE Emulator! Go to https://docs.microsoft.com/azure/storage/common/storage-use-emulator to download and install.\";\n+\n+    @BeforeClass\n+    public static void allTestsInit() throws IOException, InterruptedException {\n+        Process p = Runtime.getRuntime().exec\n+            (\"cmd /C \\\"\" + System.getenv(\"ProgramFiles\") + \" (x86)\\\\Microsoft SDKs\\\\Azure\\\\Storage Emulator\\\\AzureStorageEmulator.exe\\\" start\");\n+        int result = p.waitFor();\n+        // status = 0: the service was started.\n+        // status = -5: the service is already started. Only one instance of the application\n+        // can be run at the same time.\n+        EMULATOR_IS_RUNNING = result == 0 || result == -5;\n+    }\n+\n+    // These tests require Azure Storage Emulator v5.7\n+    public QueueClient containerInit(String name) {\n+        QueueClient queue = new QueueClientBuilder()\n+            .connectionString(connectionString)\n+            .queueName(name)\n+            .buildClient();\n+        queue.create();\n+        queue.clearMessages();\n+        return queue;\n+    }\n+\n+    @Test\n+    public void continueConversationLaterTests() {\n+        assertEmulator();\n+        String queueName = \"continueconversationlatertests\";\n+        QueueClient queue = containerInit(queueName);\n+        ConversationReference cr = TestAdapter.createConversationReference(\"ContinueConversationLaterTests\", \"User1\", \"Bot\");\n+        TestAdapter adapter = new TestAdapter(cr)\n+            .useStorage(new MemoryStorage())\n+            .useBotState(new ConversationState(new MemoryStorage()), new UserState(new MemoryStorage()));\n+\n+        AzureQueueStorage queueStorage = new AzureQueueStorage(connectionString, queueName);\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.add(Calendar.SECOND, 2);\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n+\n+        ContinueConversationLater ccl = new ContinueConversationLater() {\n+            {\n+                setDate(sdf.format(cal.getTime()));\n+                setValue(\"foo\");\n+            }\n+        };\n+        DialogManager dm = new DialogManager(ccl, \"DialogStateProperty\");\n+        dm.getInitialTurnState().replace(\"QueueStorage\", queueStorage);\n+\n+        new TestFlow(adapter, turnContext -> CompletableFuture.runAsync(() -> dm.onTurn(turnContext)))\n+            .send(\"hi\")\n+            .startTest().join();\n+\n+        try {\n+            Thread.sleep(DEFAULT_DELAY);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+            Assert.fail();\n+        }\n+\n+        QueueMessageItem messages = queue.receiveMessage();\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        String messageJson = new String(Base64.decodeBase64(messages.getMessageText()));\n+        Activity activity = null;\n+\n+        try {\n+            activity = jacksonAdapter.deserialize(messageJson, Activity.class);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            Assert.fail();\n+        }\n+\n+        Assert.assertTrue(activity.isType(ActivityTypes.EVENT));\n+        Assert.assertEquals(ActivityEventNames.CONTINUE_CONVERSATION, activity.getName());\n+        Assert.assertEquals(\"foo\", activity.getValue());\n+        Assert.assertNotNull(activity.getRelatesTo());\n+        ConversationReference cr2 = activity.getConversationReference();\n+        cr.setActivityId(null);\n+        cr2.setActivityId(null);\n+\n+        try {\n+            Assert.assertEquals(jacksonAdapter.serialize(cr), jacksonAdapter.serialize(cr2));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            Assert.fail();\n+        }\n+    }\n+\n+    private void assertEmulator() {\n+        if (!EMULATOR_IS_RUNNING) {\n+            Assert.fail(NO_EMULATOR_MESSAGE);\n+        }\n+    }\n+\n+    private class ContinueConversationLater extends Dialog {\n+        @JsonProperty(\"disabled\")\n+        private Boolean disabled = false;\n+\n+        @JsonProperty(\"date\")\n+        private String date;\n+\n+        @JsonProperty(\"value\")\n+        private String value;\n+\n+        /**\n+         * Initializes a new instance of the Dialog class.\n+         */\n+        public ContinueConversationLater() {\n+            super(ContinueConversationLater.class.getName());\n+        }\n+\n+        @Override\n+        public CompletableFuture<DialogTurnResult> beginDialog(DialogContext dc, Object options) {\n+            if (this.disabled) {\n+                return dc.endDialog();\n+            }\n+\n+            String dateString = this.date;\n+            LocalDateTime date = null;\n+            try {\n+                date = LocalDateTime.parse(dateString);\n+            } catch (DateTimeParseException ex) {\n+                throw new IllegalArgumentException(\"Date is invalid\");\n+            }\n+\n+            ZonedDateTime zonedDate = date.atZone(ZoneOffset.UTC);\n+            ZonedDateTime now = LocalDateTime.now().atZone(ZoneOffset.UTC);\n+            if (zonedDate.isBefore(now)) {\n+                throw new IllegalArgumentException(\"Date must be in the future\");\n+            }\n+\n+            // create ContinuationActivity from the conversation reference.\n+            Activity activity = dc.getContext().getActivity().getConversationReference().getContinuationActivity();\n+            activity.setValue(this.value);\n+\n+            Duration visibility = Duration.between(zonedDate, now);\n+            Duration ttl = visibility.plusMinutes(2);\n+\n+            QueueStorage queueStorage = dc.getContext().getTurnState().get(\"QueueStorage\");\n+            if (queueStorage == null) {\n+                throw new NullPointerException(\"Unable to locate QueueStorage in HostContext\");\n+            }\n+            return queueStorage.queueActivity(activity, visibility, ttl).thenCompose(receipt -> {\n+                // return the receipt as the result\n+                return dc.endDialog(receipt);\n+            });\n+        }\n+\n+        /**\n+         * Gets an optional expression which if is true will disable this action.\n+         * \"user.age > 18\".\n+         * @return A boolean expression.\n+         */\n+        public Boolean getDisabled() {\n+            return disabled;\n+        }\n+\n+        /**\n+         * Sets an optional expression which if is true will disable this action.\n+         * \"user.age > 18\".\n+         * @param withDisabled A boolean expression.\n+         */\n+        public void setDisabled(Boolean withDisabled) {\n+            this.disabled = withDisabled;\n+        }\n+\n+        /**\n+         * Gets the expression which resolves to the date/time to continue the conversation.\n+         * @return Date/time string in ISO 8601 format to continue conversation.\n+         */\n+        public String getDate() {\n+            return date;\n+        }\n+\n+        /**\n+         * Sets the expression which resolves to the date/time to continue the conversation.\n+         * @param withDate Date/time string in ISO 8601 format to continue conversation.\n+         */\n+        public void setDate(String withDate) {\n+            this.date = withDate;\n+        }\n+\n+        /**\n+         * Gets an optional value to use for EventActivity.Value.\n+         * @return The value to use for the EventActivity.Value payload.\n+         */\n+        public String getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * Sets an optional value to use for EventActivity.Value.\n+         * @param withValue The value to use for the EventActivity.Value payload.\n+         */\n+        public void setValue(String withValue) {\n+            this.value = withValue;\n+        }\n+    }\n+}"
  },
  {
    "sha": "0665e86299bb58bb34ae48223aed8ace34cd98ce",
    "filename": "libraries/bot-builder/src/main/java/com/microsoft/bot/builder/QueueStorage.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-builder/src/main/java/com/microsoft/bot/builder/QueueStorage.java",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-builder/src/main/java/com/microsoft/bot/builder/QueueStorage.java",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-builder/src/main/java/com/microsoft/bot/builder/QueueStorage.java?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.bot.builder;\n+\n+import com.microsoft.bot.schema.Activity;\n+\n+import javax.annotation.Nullable;\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A base class for enqueueing an Activity for later processing.\n+ */\n+public abstract class QueueStorage {\n+\n+    /**\n+     * Enqueues an Activity for later processing. The visibility timeout specifies how long the message\n+     * should be invisible to Dequeue and Peek operations.\n+     * @param activity The {@link Activity} to be queued for later processing.\n+     * @param visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days.\n+     * @param timeToLive Specifies the time-to-live interval for the message.\n+     * @return A result string.\n+     */\n+    public abstract CompletableFuture<String> queueActivity(Activity activity,\n+                                                            @Nullable Duration visibilityTimeout,\n+                                                            @Nullable Duration timeToLive);\n+}"
  },
  {
    "sha": "94674825f3fda6d47cc14a1b7812fe7869600389",
    "filename": "libraries/bot-builder/src/test/java/com/microsoft/bot/builder/adapters/TestAdapter.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-builder/src/test/java/com/microsoft/bot/builder/adapters/TestAdapter.java",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-builder/src/test/java/com/microsoft/bot/builder/adapters/TestAdapter.java",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-builder/src/test/java/com/microsoft/bot/builder/adapters/TestAdapter.java?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -347,8 +347,10 @@ public Activity makeActivity() {\n \n     public Activity makeActivity(String withText) {\n         Integer next = nextId++;\n+        String locale = !getLocale().isEmpty() ? getLocale() : \"en-us\";\n         Activity activity = new Activity(ActivityTypes.MESSAGE) {\n             {\n+                setLocale(locale);\n                 setFrom(conversationReference().getUser());\n                 setRecipient(conversationReference().getBot());\n                 setConversation(conversationReference().getConversation());\n@@ -416,8 +418,8 @@ public static ConversationReference createConversationReference(String name, Str\n         reference.setChannelId(\"test\");\n         reference.setServiceUrl(\"https://test.com\");\n         reference.setConversation(new ConversationAccount(false, name, name, null, null, null, null));\n-        reference.setUser(new ChannelAccount(user.toLowerCase(), user.toLowerCase()));\n-        reference.setBot(new ChannelAccount(bot.toLowerCase(), bot.toLowerCase()));\n+        reference.setUser(new ChannelAccount(user.toLowerCase(), user));\n+        reference.setBot(new ChannelAccount(bot.toLowerCase(), bot));\n         reference.setLocale(\"en-us\");\n         return reference;\n     }"
  },
  {
    "sha": "03db14dd260ebca011685d5063a630f1724c50e5",
    "filename": "libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ActivityEventNames.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ActivityEventNames.java",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ActivityEventNames.java",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ActivityEventNames.java?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.bot.schema;\n+\n+/**\n+ *  Define values for common event names used by activities of type {@link ActivityTypes.EVENT}.\n+ */\n+public final class ActivityEventNames {\n+    /**\n+     * The event name for continuing a conversation.\n+     */\n+    public static final String CONTINUE_CONVERSATION = \"ContinueConversation\";\n+\n+    /**\n+     * The event name for creating a conversation.\n+     */\n+    public static final String CREATE_CONVERSATION = \"CreateConversation\";\n+\n+    private ActivityEventNames() {\n+\n+    }\n+}"
  },
  {
    "sha": "bd6d59e3faed25b6b5ea771cbf1fd9452eea821d",
    "filename": "libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ConversationReference.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/southworks/botbuilder-java/blob/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ConversationReference.java",
    "raw_url": "https://github.com/southworks/botbuilder-java/raw/b5981fc953aa3d50dca7fea097d5cdeb265b500e/libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ConversationReference.java",
    "contents_url": "https://api.github.com/repos/southworks/botbuilder-java/contents/libraries/bot-schema/src/main/java/com/microsoft/bot/schema/ConversationReference.java?ref=b5981fc953aa3d50dca7fea097d5cdeb265b500e",
    "patch": "@@ -79,6 +79,7 @@ public Activity getContinuationActivity() {\n         activity.setConversation(getConversation());\n         activity.setRecipient(getBot());\n         activity.setLocale(getLocale());\n+        activity.setServiceUrl(getServiceUrl());\n         activity.setFrom(getUser());\n         activity.setRelatesTo(this);\n         return activity;"
  }
]
