[
  {
    "sha": "260b6938375308ed8ddf83411f9ddec176ada015",
    "filename": "api/src/main/java/net/kyori/adventure/text/AbstractComponent.java",
    "status": "modified",
    "additions": 116,
    "deletions": 0,
    "changes": 116,
    "blob_url": "https://github.com/KyoriPowered/adventure/blob/d1dcb720a90e5fa433cea00bb560316280f8d095/api/src/main/java/net/kyori/adventure/text/AbstractComponent.java",
    "raw_url": "https://github.com/KyoriPowered/adventure/raw/d1dcb720a90e5fa433cea00bb560316280f8d095/api/src/main/java/net/kyori/adventure/text/AbstractComponent.java",
    "contents_url": "https://api.github.com/repos/KyoriPowered/adventure/contents/api/src/main/java/net/kyori/adventure/text/AbstractComponent.java?ref=d1dcb720a90e5fa433cea00bb560316280f8d095",
    "patch": "@@ -26,10 +26,12 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Objects;\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n import net.kyori.adventure.text.format.Style;\n+import net.kyori.adventure.text.format.TextDecoration;\n import net.kyori.adventure.util.Buildable;\n import net.kyori.examination.ExaminableProperty;\n import net.kyori.examination.string.StringExaminer;\n@@ -46,6 +48,8 @@\n  */\n @Debug.Renderer(text = \"this.debuggerString()\", childrenArray = \"this.children().toArray()\", hasChildren = \"!this.children().isEmpty()\")\n public abstract class AbstractComponent implements Component {\n+  private static final TextDecoration[] DECORATIONS = TextDecoration.values();\n+\n   static List<Component> asComponents(final List<? extends ComponentLike> list) {\n     return asComponents(list, false);\n   }\n@@ -114,6 +118,118 @@ protected AbstractComponent(final @NonNull List<? extends ComponentLike> childre\n     return TextReplacementRenderer.INSTANCE.render(this, ((TextReplacementConfigImpl) config).createState());\n   }\n \n+  @Override\n+  public @NonNull Component compact() {\n+    return this.optimize(null);\n+  }\n+\n+  private Component optimize(final @Nullable Style parentStyle) {\n+    Component optimized = this.children(Collections.emptyList());\n+    if(parentStyle != null) {\n+      optimized = optimized.style(simplifyStyle(this.style(), parentStyle));\n+    }\n+\n+    // propagate the parent style context to children\n+    // by merging this component's style into the parent style\n+    Style childParentStyle = optimized.style();\n+    if(parentStyle != null) {\n+      childParentStyle = parentStyle.merge(childParentStyle, Style.Merge.Strategy.IF_ABSENT_ON_TARGET);\n+    }\n+\n+    // optimize all children\n+    final List<Component> childrenToAppend = new ArrayList<>(this.children.size());\n+    for(int i = 0; i < this.children.size(); ++i) {\n+      childrenToAppend.add(((AbstractComponent) this.children.get(i)).optimize(childParentStyle));\n+    }\n+\n+    // try to merge children into this parent component\n+    for(final ListIterator<Component> it = childrenToAppend.listIterator(); it.hasNext();) {\n+      final Component child = it.next();\n+      final Style childStyle = child.style().merge(childParentStyle, Style.Merge.Strategy.IF_ABSENT_ON_TARGET);\n+\n+      if(optimized instanceof TextComponent && child instanceof TextComponent && Objects.equals(childStyle, childParentStyle)) {\n+        // merge child components into the parent if they are a text component with the same effective style\n+        // in context of their parent style\n+        optimized = joinText((TextComponent) optimized, (TextComponent) child);\n+        it.remove();\n+\n+        // if the merged child had any children, retain them\n+        child.children().forEach(it::add);\n+      } else {\n+        // this child can't be merged into the parent, so all children from now on must remain children\n+        break;\n+      }\n+    }\n+\n+    // try to concatenate any further children with their neighbor\n+    // until no further joining is possible\n+    for(int i = 0; i + 1 < childrenToAppend.size();) {\n+      final Component child = childrenToAppend.get(i);\n+      final Component neighbor = childrenToAppend.get(i + 1);\n+\n+      // calculate the children's styles in context of their parent style\n+      final Style childStyle = child.style().merge(childParentStyle, Style.Merge.Strategy.IF_ABSENT_ON_TARGET);\n+      final Style neighborStyle = neighbor.style().merge(childParentStyle, Style.Merge.Strategy.IF_ABSENT_ON_TARGET);\n+\n+      if(child instanceof TextComponent && neighbor instanceof TextComponent && childStyle.equals(neighborStyle)) {\n+        final Component combined = joinText((TextComponent) child, (TextComponent) neighbor);\n+\n+        // replace the child and its neighbor with the single, combined component\n+        childrenToAppend.set(i, combined);\n+        childrenToAppend.remove(i + 1);\n+\n+        // don't increment the index -\n+        // we want to try and optimize this combined component even further\n+      } else {\n+        i++;\n+      }\n+    }\n+\n+    return optimized.children(childrenToAppend);\n+  }\n+\n+  /**\n+   * Simplify the provided style to remove any information that is redundant.\n+   *\n+   * @param style style to simplify\n+   * @param parentStyle parent to compare against\n+   * @return a new, simplified style\n+   */\n+  private static @NonNull Style simplifyStyle(final @NonNull Style style, final @NonNull Style parentStyle) {\n+    final Style.Builder builder = style.toBuilder();\n+    if(Objects.equals(style.font(), parentStyle.font())) {\n+      builder.font(null);\n+    }\n+\n+    if(Objects.equals(style.color(), parentStyle.color())) {\n+      builder.color(null);\n+    }\n+\n+    for(final TextDecoration decoration : DECORATIONS) {\n+      if(style.decoration(decoration) == parentStyle.decoration(decoration)) {\n+        builder.decoration(decoration, TextDecoration.State.NOT_SET);\n+      }\n+    }\n+\n+    if(Objects.equals(style.clickEvent(), parentStyle.clickEvent())) {\n+      builder.clickEvent(null);\n+    }\n+\n+    if(Objects.equals(style.hoverEvent(), parentStyle.hoverEvent())) {\n+      builder.hoverEvent(null);\n+    }\n+\n+    if(Objects.equals(style.insertion(), parentStyle.insertion())) {\n+      builder.insertion(null);\n+    }\n+\n+    return builder.build();\n+  }\n+\n+  private static TextComponent joinText(final TextComponent one, final TextComponent two) {\n+    return Component.text(one.content() + two.content(), one.style());\n+  }\n+\n   @Override\n   public boolean equals(final @Nullable Object other) {\n     if(this == other) return true;"
  },
  {
    "sha": "3104a9a29b6f250fc27bdbb1da22bd021ffab6bd",
    "filename": "api/src/main/java/net/kyori/adventure/text/Component.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/KyoriPowered/adventure/blob/d1dcb720a90e5fa433cea00bb560316280f8d095/api/src/main/java/net/kyori/adventure/text/Component.java",
    "raw_url": "https://github.com/KyoriPowered/adventure/raw/d1dcb720a90e5fa433cea00bb560316280f8d095/api/src/main/java/net/kyori/adventure/text/Component.java",
    "contents_url": "https://api.github.com/repos/KyoriPowered/adventure/contents/api/src/main/java/net/kyori/adventure/text/Component.java?ref=d1dcb720a90e5fa433cea00bb560316280f8d095",
    "patch": "@@ -1656,6 +1656,14 @@ default boolean hasStyling() {\n   @Contract(pure = true)\n   @NonNull Component replaceText(final @NonNull TextReplacementConfig config);\n \n+  /**\n+   * Create a new component with any redundant style elements or children removed.\n+   *\n+   * @return the optimized component\n+   * @since 4.8.0\n+   */\n+  @NonNull Component compact();\n+\n   /**\n    * Finds and replaces text within any {@link Component}s using a string literal.\n    *"
  },
  {
    "sha": "0643d6dfebca99ce49716e8a22cbc707320c41fe",
    "filename": "api/src/test/java/net/kyori/adventure/text/ComponentCompactingTest.java",
    "status": "added",
    "additions": 233,
    "deletions": 0,
    "changes": 233,
    "blob_url": "https://github.com/KyoriPowered/adventure/blob/d1dcb720a90e5fa433cea00bb560316280f8d095/api/src/test/java/net/kyori/adventure/text/ComponentCompactingTest.java",
    "raw_url": "https://github.com/KyoriPowered/adventure/raw/d1dcb720a90e5fa433cea00bb560316280f8d095/api/src/test/java/net/kyori/adventure/text/ComponentCompactingTest.java",
    "contents_url": "https://api.github.com/repos/KyoriPowered/adventure/contents/api/src/test/java/net/kyori/adventure/text/ComponentCompactingTest.java?ref=d1dcb720a90e5fa433cea00bb560316280f8d095",
    "patch": "@@ -0,0 +1,233 @@\n+/*\n+ * This file is part of adventure, licensed under the MIT License.\n+ *\n+ * Copyright (c) 2017-2021 KyoriPowered\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package net.kyori.adventure.text;\n+\n+import java.util.stream.Stream;\n+import net.kyori.adventure.text.format.NamedTextColor;\n+import net.kyori.adventure.text.format.Style;\n+import net.kyori.adventure.text.format.TextDecoration;\n+import org.junit.jupiter.api.DynamicTest;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestFactory;\n+\n+import static net.kyori.adventure.key.Key.key;\n+import static net.kyori.adventure.text.Component.text;\n+import static net.kyori.adventure.text.Component.translatable;\n+import static net.kyori.adventure.text.format.Style.style;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.DynamicTest.dynamicTest;\n+\n+class ComponentCompactingTest {\n+  @TestFactory\n+  Stream<DynamicTest> testNestedComponentsWithSameStyleAreCombined() {\n+    final Style style = style()\n+      .color(NamedTextColor.AQUA)\n+      .font(key(\"uniform\"))\n+      .decorate(TextDecoration.BOLD, TextDecoration.ITALIC)\n+      .build();\n+\n+    return Stream.of(\n+      dynamicTest(\"child's style fully inherited\", () -> {\n+        final Component input = text()\n+          .content(\"Hello \")\n+          .style(style)\n+          .append(text(\"World!\"))\n+          .build();\n+\n+        assertEquals(text(\"Hello World!\", style), input.compact());\n+      }),\n+      dynamicTest(\"child's style partially redeclared, but effectively redundant\", () -> {\n+        final Component input = text()\n+          .content(\"Hello \")\n+          .style(style)\n+          .append(text(\"World!\", style(TextDecoration.BOLD).font(key(\"uniform\"))))\n+          .build();\n+\n+        assertEquals(text(\"Hello World!\", style), input.compact());\n+      }),\n+      dynamicTest(\"multiple layers of nesting, with some children redeclaring styles\", () -> {\n+        final Component input = text()\n+          .content(\"Hello \")\n+          .style(style)\n+          .append(text(c -> c.content(\"World! \")\n+            .decorate(TextDecoration.BOLD)\n+            .append(text(\"What a \")\n+              .append(text(\"beautiful day!\", style(s -> s.font(key(\"uniform\"))))))\n+          ))\n+          .build();\n+\n+        assertEquals(text(\"Hello World! What a beautiful day!\", style), input.compact());\n+      }),\n+      dynamicTest(\"multiple sibling children\", () -> {\n+        final Component input = text()\n+          .content(\"Hello \")\n+          .style(style)\n+          .append(text(\"World! \"))\n+          .append(text(\"What a \", style().font(key(\"uniform\")).build()))\n+          .append(text(\"beautiful day!\"))\n+          .build();\n+\n+        assertEquals(text(\"Hello World! What a beautiful day!\", style), input.compact());\n+      }),\n+      dynamicTest(\"multiple siblings across multiple layers\", () -> {\n+        final Component input = text()\n+          .content(\"Hello \")\n+          .style(style)\n+          .append(text(\"World! \"))\n+          .append(text(\"What a \", style().font(key(\"uniform\")).build()))\n+          .append(text(c -> c.content(\"beautiful day \")\n+            .decorate(TextDecoration.BOLD)\n+            .append(text(\"to stay inside \"))\n+            .append(text(\"and hone your \"))\n+            .append(text(\"development skills!\", style(TextDecoration.ITALIC)))\n+          ))\n+          .build();\n+\n+        assertEquals(text(\"Hello World! What a beautiful day to stay inside and hone your development skills!\", style), input.compact());\n+      })\n+    );\n+  }\n+\n+  @TestFactory\n+  Stream<DynamicTest> testCompactingNestedComponentsInterruptedByDifferentlyStyledComponents() {\n+    final Style baseStyle = style(NamedTextColor.RED, TextDecoration.BOLD, TextDecoration.OBFUSCATED);\n+    return Stream.of(\n+      dynamicTest(\"simple component with most joinable, and an unjoinable in the middle\", () -> {\n+        final Component component =\n+          text().content(\"Hello \")\n+            .style(baseStyle)\n+            .append(text(\"World! \"))\n+            .append(text(\"What a \", NamedTextColor.RED))\n+            .append(text(\"beautiful day \", NamedTextColor.BLUE))\n+            .append(text(\"to create \"))\n+            .append(text(\"a PR on Adventure!\", style(TextDecoration.BOLD)))\n+            .build();\n+\n+        assertEquals(\n+          text()\n+            .content(\"Hello World! What a \")\n+            .style(baseStyle)\n+\n+            .append(text(\"beautiful day \", NamedTextColor.BLUE))\n+            .append(text(\"to create a PR on Adventure!\"))\n+            .build(),\n+          component.compact());\n+      }),\n+      dynamicTest(\"simple component with joinable children, and an unjoinable child with joinable children\", () -> {\n+        final Component component =\n+          text().content(\"Hello \")\n+            .style(baseStyle)\n+\n+            .append(text(\"World! \"))\n+            .append(text(\"What a \", NamedTextColor.RED))\n+            .append(text(c -> c.content(\"beautiful day \")\n+              .color(NamedTextColor.BLUE)\n+              .append(text(\"to create \", style(TextDecoration.ITALIC)))\n+              .append(text(\"a PR \", style(TextDecoration.BOLD)))\n+              .append(text(\"on Adventure!\"))\n+            ))\n+            .build();\n+\n+        assertEquals(\n+          text()\n+            .content(\"Hello World! What a \")\n+            .style(baseStyle)\n+            .append(text(c -> c.content(\"beautiful day \")\n+              .color(NamedTextColor.BLUE)\n+              .append(text(\"to create \", style(TextDecoration.ITALIC)))\n+              .append(text(\"a PR on Adventure!\"))))\n+            .build(),\n+          component.compact());\n+      })\n+    );\n+  }\n+\n+  @Test\n+  void testCompactingNestedComponentsInterruptedByOthers() {\n+    final Style baseStyle = style(NamedTextColor.RED, TextDecoration.BOLD, TextDecoration.OBFUSCATED);\n+    final Component input = translatable()\n+      .key(\"some.language.key\")\n+      .style(baseStyle)\n+      .append(\n+        text(c -> c.content(\"Hello World! \")\n+          .append(text(\"What a \", style(TextDecoration.BOLD)))\n+          .append(text(\"beautiful \", style(TextDecoration.OBFUSCATED)))\n+          .append(translatable(t -> t.key(\"unit.day\")\n+            .append(text(\" to create \")\n+              .append(text(\"a PR on Adventure!\")))))\n+        ))\n+      .build();\n+\n+    assertEquals(translatable(\"some.language.key\", baseStyle)\n+      .append(text(\"Hello World! What a beautiful \")\n+        .append(translatable(\"unit.day\")\n+          .append(text(\" to create a PR on Adventure!\")))), input.compact());\n+  }\n+\n+  @TestFactory\n+  Stream<DynamicTest> testCompactWithEmptyComponentsInHierarchy() {\n+    return Stream.of(\n+      dynamicTest(\"1\", () -> {\n+        final Component component = text().content(\"Hello \").append(text().append(text(\"World!\"))).build();\n+        assertEquals(text(\"Hello World!\"), component.compact());\n+      }),\n+      dynamicTest(\"2\", () -> {\n+        final Component component = text()\n+          .append(text().content(\"Hello \").append(text().append(text(\"World!\"))))\n+          .build();\n+        assertEquals(text(\"Hello World!\"), component.compact());\n+      }),\n+      dynamicTest(\"3\", () -> {\n+        final Component component = text()\n+          .append(text()\n+            .append(text(\"Hello \")\n+              .append(text()\n+                .append(text(\"World!\")))))\n+          .build();\n+        assertEquals(text(\"Hello World!\"), component.compact());\n+      }),\n+      dynamicTest(\"4\", () -> {\n+        final Component component = text()\n+          .append(text(\"Hello \"))\n+          .append(text(\"World!\"))\n+          .build();\n+        assertEquals(text(\"Hello World!\"), component.compact());\n+      }),\n+      dynamicTest(\"5\", () -> {\n+        final Component component = text()\n+          .append(text()\n+            .append(text(\"Hello \", style().font(key(\"alt\")).build()))\n+            .append(text(\"World!\", style().font(key(\"uniform\")).build()))\n+          )\n+          .build();\n+\n+        assertEquals(text()\n+            .append(text(\"Hello \", style().font(key(\"alt\")).build()))\n+            .append(text(\"World!\", style().font(key(\"uniform\")).build()))\n+            .build(),\n+          component.compact());\n+      })\n+    );\n+  }\n+}"
  }
]
