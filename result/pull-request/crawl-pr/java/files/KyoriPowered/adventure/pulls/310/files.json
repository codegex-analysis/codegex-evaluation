[
  {
    "sha": "6e7d725b30ced873465c1a3473037dc1141cea4b",
    "filename": "api/src/main/java/net/kyori/adventure/text/AbstractComponent.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/KyoriPowered/adventure/blob/0968600a07a2b5f498336921ccf245778d98f71e/api/src/main/java/net/kyori/adventure/text/AbstractComponent.java",
    "raw_url": "https://github.com/KyoriPowered/adventure/raw/0968600a07a2b5f498336921ccf245778d98f71e/api/src/main/java/net/kyori/adventure/text/AbstractComponent.java",
    "contents_url": "https://api.github.com/repos/KyoriPowered/adventure/contents/api/src/main/java/net/kyori/adventure/text/AbstractComponent.java?ref=0968600a07a2b5f498336921ccf245778d98f71e",
    "patch": "@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.function.Consumer;\n+import java.util.function.Predicate;\n import java.util.stream.Stream;\n import net.kyori.adventure.text.format.Style;\n import net.kyori.adventure.util.Buildable;\n@@ -114,6 +115,17 @@ protected AbstractComponent(final @NonNull List<? extends ComponentLike> childre\n     return TextReplacementRenderer.INSTANCE.render(this, ((TextReplacementConfigImpl) config).createState());\n   }\n \n+  @Override\n+  public void visitWhile(final @NonNull Predicate<Component> visitor) {\n+    if(visitor.test(this)) {\n+      for(final Component child : this.children) {\n+        if(!visitor.test(child)) {\n+          return;\n+        }\n+      }\n+    }\n+  }\n+\n   @Override\n   public boolean equals(final @Nullable Object other) {\n     if(this == other) return true;"
  },
  {
    "sha": "35e861f8344754ed285456572033a594c0127e36",
    "filename": "api/src/main/java/net/kyori/adventure/text/Component.java",
    "status": "modified",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/KyoriPowered/adventure/blob/0968600a07a2b5f498336921ccf245778d98f71e/api/src/main/java/net/kyori/adventure/text/Component.java",
    "raw_url": "https://github.com/KyoriPowered/adventure/raw/0968600a07a2b5f498336921ccf245778d98f71e/api/src/main/java/net/kyori/adventure/text/Component.java",
    "contents_url": "https://api.github.com/repos/KyoriPowered/adventure/contents/api/src/main/java/net/kyori/adventure/text/Component.java?ref=0968600a07a2b5f498336921ccf245778d98f71e",
    "patch": "@@ -31,6 +31,7 @@\n import java.util.Set;\n import java.util.function.Consumer;\n import java.util.function.Function;\n+import java.util.function.Predicate;\n import java.util.function.UnaryOperator;\n import java.util.regex.Pattern;\n import java.util.stream.Collector;\n@@ -1656,6 +1657,42 @@ default boolean hasStyling() {\n   @Contract(pure = true)\n   @NonNull Component replaceText(final @NonNull TextReplacementConfig config);\n \n+  /**\n+   * Calls the provided visitor for this component and all of the component's children.\n+   * There is no guarantee of the order in which each component will be visited.\n+   *\n+   * @param visitor the component visitor\n+   * @since 4.8.0\n+   */\n+  default void visit(final @NonNull Consumer<Component> visitor) {\n+    this.visitWhile(component -> {\n+      visitor.accept(component);\n+      return true;\n+    });\n+  }\n+\n+  /**\n+   * Calls the provided visitor for each component and all of the component's children in\n+   * this component until the visitor returns {@code true}. There is no guarantee of the\n+   * order in which each component will be visited.\n+   *\n+   * @param visitor the component visitor\n+   * @since 4.8.0\n+   */\n+  default void visitUntil(final @NonNull Predicate<Component> visitor) {\n+    this.visitWhile(visitor.negate());\n+  }\n+\n+  /**\n+   * Calls the provided visitor for each component and all of the component's children in\n+   * this component while the visitor returns {@code true}. There is no guarantee of the\n+   * order in which each component will be visited.\n+   *\n+   * @param visitor the component visitor\n+   * @since 4.8.0\n+   */\n+  void visitWhile(final @NonNull Predicate<Component> visitor);\n+\n   /**\n    * Finds and replaces text within any {@link Component}s using a string literal.\n    *"
  },
  {
    "sha": "cf7a4d05ac6818f5f42756a6ad8de03850ac1e98",
    "filename": "api/src/test/java/net/kyori/adventure/text/ComponentVisitorTest.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/KyoriPowered/adventure/blob/0968600a07a2b5f498336921ccf245778d98f71e/api/src/test/java/net/kyori/adventure/text/ComponentVisitorTest.java",
    "raw_url": "https://github.com/KyoriPowered/adventure/raw/0968600a07a2b5f498336921ccf245778d98f71e/api/src/test/java/net/kyori/adventure/text/ComponentVisitorTest.java",
    "contents_url": "https://api.github.com/repos/KyoriPowered/adventure/contents/api/src/test/java/net/kyori/adventure/text/ComponentVisitorTest.java?ref=0968600a07a2b5f498336921ccf245778d98f71e",
    "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * This file is part of adventure, licensed under the MIT License.\n+ *\n+ * Copyright (c) 2017-2021 KyoriPowered\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package net.kyori.adventure.text;\n+\n+import net.kyori.adventure.text.event.HoverEvent;\n+import net.kyori.adventure.text.format.NamedTextColor;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ComponentVisitorTest {\n+\n+  @Test\n+  public void testOf() {\n+    final int[] hits = {0};\n+\n+    Component.text()\n+      .content(\"Purity Ring \")\n+      .append(Component.text(\"are absolutely\", NamedTextColor.DARK_PURPLE))\n+      .append(Component.text(\" the best \"))\n+      .append(Component.translatable(\"some.adjective\"))\n+      .append(Component.text(\" band\", NamedTextColor.GREEN).hoverEvent(HoverEvent.showText(Component.text(\"ever\"))))\n+      .append(Component.text(\".\"))\n+      .build().visit(component -> hits[0]++);\n+\n+    assertEquals(6, hits[0]);\n+  }\n+\n+  @Test\n+  public void testOfWhile() {\n+    final int[] hits = {0};\n+\n+    Component.text()\n+      .content(\"Purity Ring \")\n+      .append(Component.text(\"are absolutely\", NamedTextColor.DARK_PURPLE))\n+      .append(Component.text(\" the best \"))\n+      .append(Component.translatable(\"some.adjective\"))\n+      .append(Component.text(\" band\", NamedTextColor.GREEN).hoverEvent(HoverEvent.showText(Component.text(\"ever\"))))\n+      .append(Component.text(\".\"))\n+      .build().visitWhile(component -> {\n+        hits[0]++;\n+        return component instanceof TextComponent;\n+      });\n+\n+    assertEquals(4, hits[0]);\n+  }\n+\n+  @Test\n+  public void testOfUntil() {\n+    final int[] hits = {0};\n+\n+    Component.text()\n+      .content(\"Purity Ring \")\n+      .append(Component.text(\"are absolutely\", NamedTextColor.DARK_PURPLE))\n+      .append(Component.text(\" the best \"))\n+      .append(Component.translatable(\"some.adjective\"))\n+      .append(Component.text(\" band\", NamedTextColor.GREEN).hoverEvent(HoverEvent.showText(Component.text(\"ever\"))))\n+      .append(Component.text(\".\"))\n+      .build().visitUntil(component -> {\n+        hits[0]++;\n+        return component.hoverEvent() != null;\n+      });\n+\n+    assertEquals(5, hits[0]);\n+  }\n+}"
  }
]
