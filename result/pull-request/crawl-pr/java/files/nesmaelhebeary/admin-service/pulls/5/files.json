[
  {
    "sha": "c63e3455107b48ffb913b81239ef5cfb19626b0e",
    "filename": ".jhipster/Clauses.json",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Clauses.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Clauses.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/Clauses.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,37 @@\n+{\n+  \"name\": \"Clauses\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"description\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"textEn\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"textAr\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"productClauses\",\n+      \"otherEntityRelationshipName\": \"clauseId\",\n+      \"relationshipName\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306152501\",\n+  \"entityTableName\": \"clauses\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "8ac6bd2090a9bfccab5a57934b21ca33840ce5bb",
    "filename": ".jhipster/Cresta.json",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Cresta.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Cresta.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/Cresta.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,22 @@\n+{\n+  \"name\": \"Cresta\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306151601\",\n+  \"entityTableName\": \"cresta\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "c28a6b04e6a3306f511144fdd076adeaa6afc685",
    "filename": ".jhipster/LineType.json",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/LineType.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/LineType.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/LineType.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,29 @@\n+{\n+  \"name\": \"LineType\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"products\",\n+      \"otherEntityRelationshipName\": \"lineTypeId\",\n+      \"relationshipName\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306151101\",\n+  \"entityTableName\": \"line_type\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "8b0417952824a4117e266652e3fc8e1306ae0aa2",
    "filename": ".jhipster/NaceCode.json",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/NaceCode.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/NaceCode.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/NaceCode.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,26 @@\n+{\n+  \"name\": \"NaceCode\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"category\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306151701\",\n+  \"entityTableName\": \"nace_code\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "95fb24d23a3e9bc461718aa7429905dcc777c73d",
    "filename": ".jhipster/Occupancy.json",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Occupancy.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Occupancy.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/Occupancy.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,22 @@\n+{\n+  \"name\": \"Occupancy\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306151801\",\n+  \"entityTableName\": \"occupancy\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "a57cfc244a9591608f319aa2b5610348dd1e046c",
    "filename": ".jhipster/ProductClauses.json",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/ProductClauses.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/ProductClauses.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/ProductClauses.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,41 @@\n+{\n+  \"name\": \"ProductClauses\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"clauseId\",\n+      \"fieldType\": \"Long\"\n+    },\n+    {\n+      \"fieldName\": \"productId\",\n+      \"fieldType\": \"Long\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"products\",\n+      \"otherEntityRelationshipName\": \"id\",\n+      \"relationshipName\": \"productId\",\n+      \"otherEntityField\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"clauses\",\n+      \"otherEntityRelationshipName\": \"id\",\n+      \"relationshipName\": \"clauseId\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306152701\",\n+  \"entityTableName\": \"product_clauses\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "b7d30ed8b09deefdfb27a2a7dd49d5a8bc574ade",
    "filename": ".jhipster/ProductTAndC.json",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/ProductTAndC.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/ProductTAndC.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/ProductTAndC.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,41 @@\n+{\n+  \"name\": \"ProductTAndC\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"tAndCId\",\n+      \"fieldType\": \"Long\"\n+    },\n+    {\n+      \"fieldName\": \"productId\",\n+      \"fieldType\": \"Long\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"products\",\n+      \"otherEntityRelationshipName\": \"id\",\n+      \"relationshipName\": \"productId\",\n+      \"otherEntityField\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"termsAndConditions\",\n+      \"otherEntityRelationshipName\": \"id\",\n+      \"relationshipName\": \"tAndCId\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306152601\",\n+  \"entityTableName\": \"product_t_and_c\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "ef4d7c16c1ec46dec62885e6ee6bc4ff52211486",
    "filename": ".jhipster/Products.json",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Products.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Products.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/Products.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,52 @@\n+{\n+  \"name\": \"Products\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"lineTypeId\",\n+      \"fieldType\": \"Long\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"productsAttr\",\n+      \"otherEntityRelationshipName\": \"productId\",\n+      \"relationshipName\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"productClauses\",\n+      \"otherEntityRelationshipName\": \"productId\",\n+      \"relationshipName\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"productTAndC\",\n+      \"otherEntityRelationshipName\": \"productId\",\n+      \"relationshipName\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"lineType\",\n+      \"otherEntityRelationshipName\": \"id\",\n+      \"relationshipName\": \"lineTypeId\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306151201\",\n+  \"entityTableName\": \"products\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "baf7b161ca5185502ac8f4f046588b1611e589d5",
    "filename": ".jhipster/ProductsAttr.json",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/ProductsAttr.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/ProductsAttr.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/ProductsAttr.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,39 @@\n+{\n+  \"name\": \"ProductsAttr\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"productId\",\n+      \"fieldType\": \"Long\"\n+    },\n+    {\n+      \"fieldName\": \"attributeValue\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"atributeName\",\n+      \"fieldType\": \"AttributeName\",\n+      \"fieldValues\": \"TAX,RATE\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"products\",\n+      \"otherEntityRelationshipName\": \"id\",\n+      \"relationshipName\": \"productId\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306151301\",\n+  \"entityTableName\": \"products_attr\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "477560f126379c820fb0fb02629212a31f282b99",
    "filename": ".jhipster/RIBrokers.json",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/RIBrokers.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/RIBrokers.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/RIBrokers.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,43 @@\n+{\n+  \"name\": \"RIBrokers\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"registerationNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"commissionPercentage\",\n+      \"fieldType\": \"Double\"\n+    },\n+    {\n+      \"fieldName\": \"status\",\n+      \"fieldType\": \"Status\",\n+      \"fieldValues\": \"Active,InActive\"\n+    },\n+    {\n+      \"fieldName\": \"contactDial\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"contactEmail\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306152301\",\n+  \"entityTableName\": \"ri_brokers\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "10dde79c10a0ddf0b7ea65373c3ae086b869b8ff",
    "filename": ".jhipster/Roof.json",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Roof.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Roof.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/Roof.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,22 @@\n+{\n+  \"name\": \"Roof\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306152001\",\n+  \"entityTableName\": \"roof\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "eb6a5f98889c09bff081285c4e8fd6cdf091fd08",
    "filename": ".jhipster/SalesBrokers.json",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/SalesBrokers.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/SalesBrokers.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/SalesBrokers.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,43 @@\n+{\n+  \"name\": \"SalesBrokers\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"registerationNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"commissionPercentage\",\n+      \"fieldType\": \"Double\"\n+    },\n+    {\n+      \"fieldName\": \"status\",\n+      \"fieldType\": \"Status\",\n+      \"fieldValues\": \"Active,InActive\"\n+    },\n+    {\n+      \"fieldName\": \"contactDial\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"contactEmail\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306152201\",\n+  \"entityTableName\": \"sales_brokers\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "52bdd2138a0c8337ac8acf15afdac63d6c2d40cd",
    "filename": ".jhipster/Structure.json",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Structure.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Structure.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/Structure.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,22 @@\n+{\n+  \"name\": \"Structure\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306151901\",\n+  \"entityTableName\": \"structure\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "4b32fcbbb6711f7d0da33e59d8c8c1c217becd57",
    "filename": ".jhipster/SubArea.json",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/SubArea.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/SubArea.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/SubArea.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,26 @@\n+{\n+  \"name\": \"SubArea\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"crestaId\",\n+      \"fieldType\": \"Long\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210306152101\",\n+  \"entityTableName\": \"sub_area\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "c12b545b7ad7834c8117581be5716ec4e85668cf",
    "filename": ".jhipster/TermsAndConditions.json",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/TermsAndConditions.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/TermsAndConditions.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/TermsAndConditions.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,37 @@\n+{\n+  \"name\": \"TermsAndConditions\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"description\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"textEn\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"textAr\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"productTAndC\",\n+      \"otherEntityRelationshipName\": \"tAndCId\",\n+      \"relationshipName\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306152401\",\n+  \"entityTableName\": \"terms_and_conditions\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "91f5948ba556f87a7cc2449a9771d36f2d6dcda5",
    "filename": ".jhipster/Treaty.json",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Treaty.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/Treaty.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/Treaty.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,33 @@\n+{\n+  \"name\": \"Treaty\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"lineTypeId\",\n+      \"fieldType\": \"Long\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"treatyDetails\",\n+      \"otherEntityRelationshipName\": \"treatyId\",\n+      \"relationshipName\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306151401\",\n+  \"entityTableName\": \"treaty\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "254752d9a562d1b10af84af0d76e1dd22ca85af2",
    "filename": ".jhipster/TreatyDetails.json",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/TreatyDetails.json",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/.jhipster/TreatyDetails.json",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/.jhipster/TreatyDetails.json?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,58 @@\n+{\n+  \"name\": \"TreatyDetails\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"treatyId\",\n+      \"fieldType\": \"Long\"\n+    },\n+    {\n+      \"fieldName\": \"maximumLimit\",\n+      \"fieldType\": \"Double\"\n+    },\n+    {\n+      \"fieldName\": \"minLimit\",\n+      \"fieldType\": \"Double\"\n+    },\n+    {\n+      \"fieldName\": \"retained\",\n+      \"fieldType\": \"Double\"\n+    },\n+    {\n+      \"fieldName\": \"quotaShared\",\n+      \"fieldType\": \"Double\"\n+    },\n+    {\n+      \"fieldName\": \"surplus\",\n+      \"fieldType\": \"Double\"\n+    },\n+    {\n+      \"fieldName\": \"autoFac\",\n+      \"fieldType\": \"Double\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"treaty\",\n+      \"otherEntityRelationshipName\": \"id\",\n+      \"relationshipName\": \"treatyId\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210306151501\",\n+  \"entityTableName\": \"treaty_details\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"adminservice\",\n+  \"applications\": \"*\",\n+  \"microserviceName\": \"adminservice\"\n+}"
  },
  {
    "sha": "f7cfc5e115546c22b92c539fcee4b3321ffce25c",
    "filename": "admin_axa.jh",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/admin_axa.jh",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/admin_axa.jh",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/admin_axa.jh?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,182 @@\n+entity LineType {\n+\tname String,\n+    id Long\n+}\n+entity Products {\n+\tname String,\n+    id Long,\n+    LineTypeId Long\n+    }\n+entity ProductsAttr {\n+    id Long,\n+    productId Long,\n+    attributeValue String,\n+    atributeName AttributeName\n+}\n+\n+entity Treaty {\n+\tname String,\n+    id Long,\n+    LineTypeId Long\n+    }\n+    \n+    entity TreatyDetails {\n+\tname String,\n+    id Long,\n+    treatyId Long,\n+    maximumLimit Double,\n+    minLimit Double,\n+    retained Double,\n+    quotaShared Double,\n+    surplus Double,\n+    autoFac Double\n+    }\n+    \n+    entity Cresta {\n+\tname String,\n+    id Long\n+  }\n+   entity NaceCode {\n+\tname String,\n+    id Long,\n+    category String\n+  }\n+  \n+   entity Occupancy {\n+\tname String,\n+    id Long\n+  }\n+  entity Structure {\n+\tname String,\n+    id Long\n+  }\n+  \n+  entity Roof {\n+\tname String,\n+    id Long\n+  }\n+  \n+  entity SubArea {\n+\tname String,\n+    id Long,\n+    crestaId Long\n+  }\n+  \n+  \n+  \n+  \n+  \n+  \n+  \n+  \n+  entity SalesBrokers {\n+\tname String,\n+    id Long,\n+    registerationNumber String,\n+    commissionPercentage Double,\n+    status Status,\n+    contactDial String,\n+    contactEmail String\n+    \n+  }\n+  \n+    entity RIBrokers {\n+\tname String,\n+    id Long,\n+    registerationNumber String,\n+    commissionPercentage Double,\n+    status Status ,\n+    contactDial String,\n+    contactEmail String\n+  }\n+relationship OneToMany {\n+  Treaty {id}\n+  to\n+ TreatyDetails{treatyId}\n+}\n+\n+relationship OneToMany {\n+  LineType {id}\n+  to\n+ Products{LineTypeId}\n+}\n+\n+relationship OneToMany {\n+  Products {id}\n+  to\n+ ProductsAttr{productId}\n+}\n+enum AttributeName{\n+TAX, RATE\n+}\n+\n+enum TreatyCategory{\n+CLASSA, CLASSB\n+}\n+\n+enum Status{\n+Active, InActive\n+}\n+\n+\n+\n+  entity TermsAndConditions {\n+\tdescription String,\n+    id Long,\n+    textEn String,\n+    textAr String\n+  }\n+  \n+    entity Clauses {\n+\tdescription String,\n+    id Long,\n+    textEn String,\n+    textAr String\n+  }\n+  \n+  \n+  entity ProductTAndC {\n+\ttAndCId Long,\n+    id Long,\n+    productId Long\n+  } \n+  \n+   entity ProductClauses {\n+\tclauseId Long,\n+    id Long,\n+    productId Long\n+  } \n+  \n+  \n+  relationship OneToMany {\n+  Products {id}\n+  to\n+ ProductClauses{productId}\n+}\n+\n+ relationship OneToMany {\n+  Clauses {id}\n+  to\n+ ProductClauses{clauseId}\n+}\n+\n+\n+\n+  relationship OneToMany {\n+  Products {id}\n+  to\n+ ProductTAndC{productId}\n+}\n+\n+ relationship OneToMany {\n+  TermsAndConditions {id}\n+  to\n+ ProductTAndC{tAndCId}\n+}\n+  \n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "dacd6125700ae11e65ad3136d82c625e036a1ab9",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/Clauses.java",
    "status": "added",
    "additions": 139,
    "deletions": 0,
    "changes": 139,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Clauses.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Clauses.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/Clauses.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,139 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Clauses.\n+ */\n+@Entity\n+@Table(name = \"clauses\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Clauses implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"text_en\")\n+    private String textEn;\n+\n+    @Column(name = \"text_ar\")\n+    private String textAr;\n+\n+    @OneToMany(mappedBy = \"clauseId\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<ProductClauses> ids = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public Clauses description(String description) {\n+        this.description = description;\n+        return this;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getTextEn() {\n+        return textEn;\n+    }\n+\n+    public Clauses textEn(String textEn) {\n+        this.textEn = textEn;\n+        return this;\n+    }\n+\n+    public void setTextEn(String textEn) {\n+        this.textEn = textEn;\n+    }\n+\n+    public String getTextAr() {\n+        return textAr;\n+    }\n+\n+    public Clauses textAr(String textAr) {\n+        this.textAr = textAr;\n+        return this;\n+    }\n+\n+    public void setTextAr(String textAr) {\n+        this.textAr = textAr;\n+    }\n+\n+    public Set<ProductClauses> getIds() {\n+        return ids;\n+    }\n+\n+    public Clauses ids(Set<ProductClauses> productClauses) {\n+        this.ids = productClauses;\n+        return this;\n+    }\n+\n+    public Clauses addId(ProductClauses productClauses) {\n+        this.ids.add(productClauses);\n+        productClauses.setClauseId(this);\n+        return this;\n+    }\n+\n+    public Clauses removeId(ProductClauses productClauses) {\n+        this.ids.remove(productClauses);\n+        productClauses.setClauseId(null);\n+        return this;\n+    }\n+\n+    public void setIds(Set<ProductClauses> productClauses) {\n+        this.ids = productClauses;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Clauses)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Clauses) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Clauses{\" +\n+            \"id=\" + getId() +\n+            \", description='\" + getDescription() + \"'\" +\n+            \", textEn='\" + getTextEn() + \"'\" +\n+            \", textAr='\" + getTextAr() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "b818c646ceb3ddf9883f71c4480380320bbf6905",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/Cresta.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Cresta.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Cresta.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/Cresta.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,74 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Cresta.\n+ */\n+@Entity\n+@Table(name = \"cresta\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Cresta implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Cresta name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Cresta)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Cresta) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Cresta{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "39a131d72f606d2d18a0002b83bc5d4ff416caa0",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/LineType.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/LineType.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/LineType.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/LineType.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,105 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A LineType.\n+ */\n+@Entity\n+@Table(name = \"line_type\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class LineType implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @OneToMany(mappedBy = \"lineTypeId\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<Products> ids = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public LineType name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<Products> getIds() {\n+        return ids;\n+    }\n+\n+    public LineType ids(Set<Products> products) {\n+        this.ids = products;\n+        return this;\n+    }\n+\n+    public LineType addId(Products products) {\n+        this.ids.add(products);\n+        products.setLineTypeId(this);\n+        return this;\n+    }\n+\n+    public LineType removeId(Products products) {\n+        this.ids.remove(products);\n+        products.setLineTypeId(null);\n+        return this;\n+    }\n+\n+    public void setIds(Set<Products> products) {\n+        this.ids = products;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof LineType)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((LineType) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"LineType{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "368d3a0a387adc43f6a19dcc612013878c172838",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/NaceCode.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/NaceCode.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/NaceCode.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/NaceCode.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,91 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A NaceCode.\n+ */\n+@Entity\n+@Table(name = \"nace_code\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class NaceCode implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"category\")\n+    private String category;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public NaceCode name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    public NaceCode category(String category) {\n+        this.category = category;\n+        return this;\n+    }\n+\n+    public void setCategory(String category) {\n+        this.category = category;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof NaceCode)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((NaceCode) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"NaceCode{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \", category='\" + getCategory() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "0c9042547e8b016f4edac6d081ea6e6c44f3951d",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/Occupancy.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Occupancy.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Occupancy.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/Occupancy.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,74 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Occupancy.\n+ */\n+@Entity\n+@Table(name = \"occupancy\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Occupancy implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Occupancy name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Occupancy)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Occupancy) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Occupancy{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "f15d2c9f32e6384778af961b70765384eec2a94b",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/ProductClauses.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/ProductClauses.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/ProductClauses.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/ProductClauses.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,126 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A ProductClauses.\n+ */\n+@Entity\n+@Table(name = \"product_clauses\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class ProductClauses implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"clause_id\")\n+    private Long clauseId;\n+\n+    @Column(name = \"product_id\")\n+    private Long productId;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"ids\", allowSetters = true)\n+    private Products productId;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"ids\", allowSetters = true)\n+    private Clauses clauseId;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Long getClauseId() {\n+        return clauseId;\n+    }\n+\n+    public ProductClauses clauseId(Long clauseId) {\n+        this.clauseId = clauseId;\n+        return this;\n+    }\n+\n+    public void setClauseId(Long clauseId) {\n+        this.clauseId = clauseId;\n+    }\n+\n+    public Long getProductId() {\n+        return productId;\n+    }\n+\n+    public ProductClauses productId(Long productId) {\n+        this.productId = productId;\n+        return this;\n+    }\n+\n+    public void setProductId(Long productId) {\n+        this.productId = productId;\n+    }\n+\n+    public Products getProductId() {\n+        return productId;\n+    }\n+\n+    public ProductClauses productId(Products products) {\n+        this.productId = products;\n+        return this;\n+    }\n+\n+    public void setProductId(Products products) {\n+        this.productId = products;\n+    }\n+\n+    public Clauses getClauseId() {\n+        return clauseId;\n+    }\n+\n+    public ProductClauses clauseId(Clauses clauses) {\n+        this.clauseId = clauses;\n+        return this;\n+    }\n+\n+    public void setClauseId(Clauses clauses) {\n+        this.clauseId = clauses;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof ProductClauses)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((ProductClauses) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"ProductClauses{\" +\n+            \"id=\" + getId() +\n+            \", clauseId=\" + getClauseId() +\n+            \", productId=\" + getProductId() +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "f0a6cfc7915941b2dbf5a788addd9d224785dcca",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/ProductTAndC.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/ProductTAndC.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/ProductTAndC.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/ProductTAndC.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,126 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A ProductTAndC.\n+ */\n+@Entity\n+@Table(name = \"product_t_and_c\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class ProductTAndC implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"t_and_c_id\")\n+    private Long tAndCId;\n+\n+    @Column(name = \"product_id\")\n+    private Long productId;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"ids\", allowSetters = true)\n+    private Products productId;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"ids\", allowSetters = true)\n+    private TermsAndConditions tAndCId;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Long gettAndCId() {\n+        return tAndCId;\n+    }\n+\n+    public ProductTAndC tAndCId(Long tAndCId) {\n+        this.tAndCId = tAndCId;\n+        return this;\n+    }\n+\n+    public void settAndCId(Long tAndCId) {\n+        this.tAndCId = tAndCId;\n+    }\n+\n+    public Long getProductId() {\n+        return productId;\n+    }\n+\n+    public ProductTAndC productId(Long productId) {\n+        this.productId = productId;\n+        return this;\n+    }\n+\n+    public void setProductId(Long productId) {\n+        this.productId = productId;\n+    }\n+\n+    public Products getProductId() {\n+        return productId;\n+    }\n+\n+    public ProductTAndC productId(Products products) {\n+        this.productId = products;\n+        return this;\n+    }\n+\n+    public void setProductId(Products products) {\n+        this.productId = products;\n+    }\n+\n+    public TermsAndConditions getTAndCId() {\n+        return tAndCId;\n+    }\n+\n+    public ProductTAndC tAndCId(TermsAndConditions termsAndConditions) {\n+        this.tAndCId = termsAndConditions;\n+        return this;\n+    }\n+\n+    public void setTAndCId(TermsAndConditions termsAndConditions) {\n+        this.tAndCId = termsAndConditions;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof ProductTAndC)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((ProductTAndC) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"ProductTAndC{\" +\n+            \"id=\" + getId() +\n+            \", tAndCId=\" + gettAndCId() +\n+            \", productId=\" + getProductId() +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "1fa8dfd0c457c836b660dfce962924aa254fcf39",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/Products.java",
    "status": "added",
    "additions": 198,
    "deletions": 0,
    "changes": 198,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Products.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Products.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/Products.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,198 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Products.\n+ */\n+@Entity\n+@Table(name = \"products\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Products implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"line_type_id\")\n+    private Long lineTypeId;\n+\n+    @OneToMany(mappedBy = \"productId\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<ProductsAttr> ids = new HashSet<>();\n+\n+    @OneToMany(mappedBy = \"productId\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<ProductClauses> ids = new HashSet<>();\n+\n+    @OneToMany(mappedBy = \"productId\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<ProductTAndC> ids = new HashSet<>();\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"ids\", allowSetters = true)\n+    private LineType lineTypeId;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Products name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Long getLineTypeId() {\n+        return lineTypeId;\n+    }\n+\n+    public Products lineTypeId(Long lineTypeId) {\n+        this.lineTypeId = lineTypeId;\n+        return this;\n+    }\n+\n+    public void setLineTypeId(Long lineTypeId) {\n+        this.lineTypeId = lineTypeId;\n+    }\n+\n+    public Set<ProductsAttr> getIds() {\n+        return ids;\n+    }\n+\n+    public Products ids(Set<ProductsAttr> productsAttrs) {\n+        this.ids = productsAttrs;\n+        return this;\n+    }\n+\n+    public Products addId(ProductsAttr productsAttr) {\n+        this.ids.add(productsAttr);\n+        productsAttr.setProductId(this);\n+        return this;\n+    }\n+\n+    public Products removeId(ProductsAttr productsAttr) {\n+        this.ids.remove(productsAttr);\n+        productsAttr.setProductId(null);\n+        return this;\n+    }\n+\n+    public void setIds(Set<ProductsAttr> productsAttrs) {\n+        this.ids = productsAttrs;\n+    }\n+\n+    public Set<ProductClauses> getIds() {\n+        return ids;\n+    }\n+\n+    public Products ids(Set<ProductClauses> productClauses) {\n+        this.ids = productClauses;\n+        return this;\n+    }\n+\n+    public Products addId(ProductClauses productClauses) {\n+        this.ids.add(productClauses);\n+        productClauses.setProductId(this);\n+        return this;\n+    }\n+\n+    public Products removeId(ProductClauses productClauses) {\n+        this.ids.remove(productClauses);\n+        productClauses.setProductId(null);\n+        return this;\n+    }\n+\n+    public void setIds(Set<ProductClauses> productClauses) {\n+        this.ids = productClauses;\n+    }\n+\n+    public Set<ProductTAndC> getIds() {\n+        return ids;\n+    }\n+\n+    public Products ids(Set<ProductTAndC> productTAndCS) {\n+        this.ids = productTAndCS;\n+        return this;\n+    }\n+\n+    public Products addId(ProductTAndC productTAndC) {\n+        this.ids.add(productTAndC);\n+        productTAndC.setProductId(this);\n+        return this;\n+    }\n+\n+    public Products removeId(ProductTAndC productTAndC) {\n+        this.ids.remove(productTAndC);\n+        productTAndC.setProductId(null);\n+        return this;\n+    }\n+\n+    public void setIds(Set<ProductTAndC> productTAndCS) {\n+        this.ids = productTAndCS;\n+    }\n+\n+    public LineType getLineTypeId() {\n+        return lineTypeId;\n+    }\n+\n+    public Products lineTypeId(LineType lineType) {\n+        this.lineTypeId = lineType;\n+        return this;\n+    }\n+\n+    public void setLineTypeId(LineType lineType) {\n+        this.lineTypeId = lineType;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Products)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Products) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Products{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \", lineTypeId=\" + getLineTypeId() +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "8c30be790fa55f99109266228ac471e1689b5f3b",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/ProductsAttr.java",
    "status": "added",
    "additions": 129,
    "deletions": 0,
    "changes": 129,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/ProductsAttr.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/ProductsAttr.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/ProductsAttr.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,129 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+import com.axa.hypercell.admin.domain.enumeration.AttributeName;\n+\n+/**\n+ * A ProductsAttr.\n+ */\n+@Entity\n+@Table(name = \"products_attr\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class ProductsAttr implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"product_id\")\n+    private Long productId;\n+\n+    @Column(name = \"attribute_value\")\n+    private String attributeValue;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"atribute_name\")\n+    private AttributeName atributeName;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"ids\", allowSetters = true)\n+    private Products productId;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Long getProductId() {\n+        return productId;\n+    }\n+\n+    public ProductsAttr productId(Long productId) {\n+        this.productId = productId;\n+        return this;\n+    }\n+\n+    public void setProductId(Long productId) {\n+        this.productId = productId;\n+    }\n+\n+    public String getAttributeValue() {\n+        return attributeValue;\n+    }\n+\n+    public ProductsAttr attributeValue(String attributeValue) {\n+        this.attributeValue = attributeValue;\n+        return this;\n+    }\n+\n+    public void setAttributeValue(String attributeValue) {\n+        this.attributeValue = attributeValue;\n+    }\n+\n+    public AttributeName getAtributeName() {\n+        return atributeName;\n+    }\n+\n+    public ProductsAttr atributeName(AttributeName atributeName) {\n+        this.atributeName = atributeName;\n+        return this;\n+    }\n+\n+    public void setAtributeName(AttributeName atributeName) {\n+        this.atributeName = atributeName;\n+    }\n+\n+    public Products getProductId() {\n+        return productId;\n+    }\n+\n+    public ProductsAttr productId(Products products) {\n+        this.productId = products;\n+        return this;\n+    }\n+\n+    public void setProductId(Products products) {\n+        this.productId = products;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof ProductsAttr)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((ProductsAttr) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"ProductsAttr{\" +\n+            \"id=\" + getId() +\n+            \", productId=\" + getProductId() +\n+            \", attributeValue='\" + getAttributeValue() + \"'\" +\n+            \", atributeName='\" + getAtributeName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "99c10b19ad0fe1e53143c1a36e40eae536a5ba6b",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/RIBrokers.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/RIBrokers.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/RIBrokers.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/RIBrokers.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,162 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+import com.axa.hypercell.admin.domain.enumeration.Status;\n+\n+/**\n+ * A RIBrokers.\n+ */\n+@Entity\n+@Table(name = \"ri_brokers\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class RIBrokers implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"registeration_number\")\n+    private String registerationNumber;\n+\n+    @Column(name = \"commission_percentage\")\n+    private Double commissionPercentage;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"status\")\n+    private Status status;\n+\n+    @Column(name = \"contact_dial\")\n+    private String contactDial;\n+\n+    @Column(name = \"contact_email\")\n+    private String contactEmail;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public RIBrokers name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getRegisterationNumber() {\n+        return registerationNumber;\n+    }\n+\n+    public RIBrokers registerationNumber(String registerationNumber) {\n+        this.registerationNumber = registerationNumber;\n+        return this;\n+    }\n+\n+    public void setRegisterationNumber(String registerationNumber) {\n+        this.registerationNumber = registerationNumber;\n+    }\n+\n+    public Double getCommissionPercentage() {\n+        return commissionPercentage;\n+    }\n+\n+    public RIBrokers commissionPercentage(Double commissionPercentage) {\n+        this.commissionPercentage = commissionPercentage;\n+        return this;\n+    }\n+\n+    public void setCommissionPercentage(Double commissionPercentage) {\n+        this.commissionPercentage = commissionPercentage;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    public RIBrokers status(Status status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+\n+    public String getContactDial() {\n+        return contactDial;\n+    }\n+\n+    public RIBrokers contactDial(String contactDial) {\n+        this.contactDial = contactDial;\n+        return this;\n+    }\n+\n+    public void setContactDial(String contactDial) {\n+        this.contactDial = contactDial;\n+    }\n+\n+    public String getContactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public RIBrokers contactEmail(String contactEmail) {\n+        this.contactEmail = contactEmail;\n+        return this;\n+    }\n+\n+    public void setContactEmail(String contactEmail) {\n+        this.contactEmail = contactEmail;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof RIBrokers)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((RIBrokers) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"RIBrokers{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \", registerationNumber='\" + getRegisterationNumber() + \"'\" +\n+            \", commissionPercentage=\" + getCommissionPercentage() +\n+            \", status='\" + getStatus() + \"'\" +\n+            \", contactDial='\" + getContactDial() + \"'\" +\n+            \", contactEmail='\" + getContactEmail() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "a6d0c59f53dd67e9c2e35c9393f1102d02f5f45a",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/Roof.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Roof.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/Roof.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/Roof.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,74 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Roof.\n+ */\n+@Entity\n+@Table(name = \"roof\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Roof implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Roof name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Roof)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Roof) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Roof{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "83fea6fc0d9c9672ae820ebf640284682ab45150",
    "filename": "src/main/java/com/axa/hypercell/admin/domain/SalesBrokers.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/nesmaelhebeary/admin-service/blob/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/SalesBrokers.java",
    "raw_url": "https://github.com/nesmaelhebeary/admin-service/raw/74e312cb756885d0154cb6a77bda2461a897b76a/src/main/java/com/axa/hypercell/admin/domain/SalesBrokers.java",
    "contents_url": "https://api.github.com/repos/nesmaelhebeary/admin-service/contents/src/main/java/com/axa/hypercell/admin/domain/SalesBrokers.java?ref=74e312cb756885d0154cb6a77bda2461a897b76a",
    "patch": "@@ -0,0 +1,162 @@\n+package com.axa.hypercell.admin.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+import com.axa.hypercell.admin.domain.enumeration.Status;\n+\n+/**\n+ * A SalesBrokers.\n+ */\n+@Entity\n+@Table(name = \"sales_brokers\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class SalesBrokers implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"registeration_number\")\n+    private String registerationNumber;\n+\n+    @Column(name = \"commission_percentage\")\n+    private Double commissionPercentage;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"status\")\n+    private Status status;\n+\n+    @Column(name = \"contact_dial\")\n+    private String contactDial;\n+\n+    @Column(name = \"contact_email\")\n+    private String contactEmail;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public SalesBrokers name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getRegisterationNumber() {\n+        return registerationNumber;\n+    }\n+\n+    public SalesBrokers registerationNumber(String registerationNumber) {\n+        this.registerationNumber = registerationNumber;\n+        return this;\n+    }\n+\n+    public void setRegisterationNumber(String registerationNumber) {\n+        this.registerationNumber = registerationNumber;\n+    }\n+\n+    public Double getCommissionPercentage() {\n+        return commissionPercentage;\n+    }\n+\n+    public SalesBrokers commissionPercentage(Double commissionPercentage) {\n+        this.commissionPercentage = commissionPercentage;\n+        return this;\n+    }\n+\n+    public void setCommissionPercentage(Double commissionPercentage) {\n+        this.commissionPercentage = commissionPercentage;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    public SalesBrokers status(Status status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+\n+    public String getContactDial() {\n+        return contactDial;\n+    }\n+\n+    public SalesBrokers contactDial(String contactDial) {\n+        this.contactDial = contactDial;\n+        return this;\n+    }\n+\n+    public void setContactDial(String contactDial) {\n+        this.contactDial = contactDial;\n+    }\n+\n+    public String getContactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public SalesBrokers contactEmail(String contactEmail) {\n+        this.contactEmail = contactEmail;\n+        return this;\n+    }\n+\n+    public void setContactEmail(String contactEmail) {\n+        this.contactEmail = contactEmail;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof SalesBrokers)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((SalesBrokers) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"SalesBrokers{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \", registerationNumber='\" + getRegisterationNumber() + \"'\" +\n+            \", commissionPercentage=\" + getCommissionPercentage() +\n+            \", status='\" + getStatus() + \"'\" +\n+            \", contactDial='\" + getContactDial() + \"'\" +\n+            \", contactEmail='\" + getContactEmail() + \"'\" +\n+            \"}\";\n+    }\n+}"
  }
]
