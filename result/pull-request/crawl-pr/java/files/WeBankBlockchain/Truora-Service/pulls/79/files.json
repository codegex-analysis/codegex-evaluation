[
  {
    "sha": "78fcfa8ad6cf5353fa1e45a4148ef8bc000fc795",
    "filename": "src/main/java/com/webank/oracle/trial/contract/LotteryOracleUseVrf.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/WeBankBlockchain/Truora-Service/blob/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/main/java/com/webank/oracle/trial/contract/LotteryOracleUseVrf.java",
    "raw_url": "https://github.com/WeBankBlockchain/Truora-Service/raw/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/main/java/com/webank/oracle/trial/contract/LotteryOracleUseVrf.java",
    "contents_url": "https://api.github.com/repos/WeBankBlockchain/Truora-Service/contents/src/main/java/com/webank/oracle/trial/contract/LotteryOracleUseVrf.java?ref=93dd67df82c3c32c6b2cda38093ed612389d4aa6",
    "patch": "@@ -1,10 +1,5 @@\n-package com.webank.oracle.test.temp;\n+package com.webank.oracle.trial.contract;\n \n-import java.math.BigInteger;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n import org.fisco.bcos.channel.client.TransactionSucCallback;\n import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;\n import org.fisco.bcos.web3j.abi.EventEncoder;\n@@ -30,6 +25,12 @@\n import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;\n \n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n /**\n  * <p>Auto generated code.\n  * <p><strong>Do not modify!</strong>",
    "previous_filename": "src/test/java/com/webank/oracle/test/temp/LotteryOracleUseVrf.java"
  },
  {
    "sha": "c957c5f3a99c63e6848f5475c3797cde65f431b1",
    "filename": "src/test/java/com/webank/oracle/test/temp/LotteryOracle.java",
    "status": "removed",
    "additions": 0,
    "deletions": 268,
    "changes": 268,
    "blob_url": "https://github.com/WeBankBlockchain/Truora-Service/blob/d3e03f1a00413e0451f37d729562e71504c1e99e/src/test/java/com/webank/oracle/test/temp/LotteryOracle.java",
    "raw_url": "https://github.com/WeBankBlockchain/Truora-Service/raw/d3e03f1a00413e0451f37d729562e71504c1e99e/src/test/java/com/webank/oracle/test/temp/LotteryOracle.java",
    "contents_url": "https://api.github.com/repos/WeBankBlockchain/Truora-Service/contents/src/test/java/com/webank/oracle/test/temp/LotteryOracle.java?ref=d3e03f1a00413e0451f37d729562e71504c1e99e",
    "patch": "@@ -1,268 +0,0 @@\n-package com.webank.oracle.test.temp;\n-\n-import java.math.BigInteger;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import org.fisco.bcos.channel.client.TransactionSucCallback;\n-import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;\n-import org.fisco.bcos.web3j.abi.EventEncoder;\n-import org.fisco.bcos.web3j.abi.FunctionEncoder;\n-import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;\n-import org.fisco.bcos.web3j.abi.TypeReference;\n-import org.fisco.bcos.web3j.abi.datatypes.Address;\n-import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;\n-import org.fisco.bcos.web3j.abi.datatypes.Event;\n-import org.fisco.bcos.web3j.abi.datatypes.Function;\n-import org.fisco.bcos.web3j.abi.datatypes.Type;\n-import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n-import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n-import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;\n-import org.fisco.bcos.web3j.crypto.Credentials;\n-import org.fisco.bcos.web3j.crypto.EncryptType;\n-import org.fisco.bcos.web3j.protocol.Web3j;\n-import org.fisco.bcos.web3j.protocol.core.RemoteCall;\n-import org.fisco.bcos.web3j.protocol.core.methods.response.Log;\n-import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n-import org.fisco.bcos.web3j.tuples.generated.Tuple1;\n-import org.fisco.bcos.web3j.tx.Contract;\n-import org.fisco.bcos.web3j.tx.TransactionManager;\n-import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n-import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;\n-\n-/**\n- * <p>Auto generated code.\n- * <p><strong>Do not modify!</strong>\n- * <p>Please use the <a href=\"https://docs.web3j.io/command_line.html\">web3j command line tools</a>,\n- * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the \n- * <a href=\"https://github.com/web3j/web3j/tree/master/codegen\">codegen module</a> to update.\n- *\n- * <p>Generated with web3j version none.\n- */\n-@SuppressWarnings(\"unchecked\")\n-public class LotteryOracle extends Contract {\n-    public static final String[] BINARY_ARRAY = {\"608060405234801561001057600080fd5b506040516108f43803806108f48339818101604052602081101561003357600080fd5b810190808051906020019092919050505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060028190555060016000806101000a81548160ff021916908360018111156100ab57fe5b021790555050610834806100c06000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635d495aea1461005c57806381447999146100a6578063af440aad146100d2578063e580f47b1461018a578063f71d96cb146101a8575b600080fd5b610064610216565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100ae610525565b604051808260018111156100be57fe5b60ff16815260200191505060405180910390f35b610188600480360360208110156100e857600080fd5b810190808035906020019064010000000081111561010557600080fd5b82018360208201111561011757600080fd5b8035906020019184602083028401116401000000008311171561013957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610537565b005b6101926106ca565b6040518082815260200191505060405180910390f35b6101d4600480360360208110156101be57600080fd5b81019080803590602001909291905050506106d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000801515600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c75f695a6004546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d60208110156102ba57600080fd5b8101908080519060200190929190505050151514610323576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806107da6025913960400191505060405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632dff0d0d6004546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561039a57600080fd5b505afa1580156103ae573d6000803e3d6000fd5b505050506040513d60208110156103c457600080fd5b81019080805190602001909291905050509050600060018054905082816103e757fe5b0690506000600182815481106103f957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff8111801561043e57600080fd5b5060405190808252806020026020018201604052801561046d5781602001602082028036833780820191505090505b506001908051906020019061048392919061070c565b5060016000806101000a81548160ff021916908360018111156104a257fe5b02179055507fa82c91863944c874adf26b337e14822bf1031e367408fdb08e3db6a6b741d7706002548285604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a180935050505090565b6000809054906101000a900460ff1681565b60018081111561054357fe5b6000809054906101000a900460ff16600181111561055d57fe5b146105d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f63616e27742073746172742061206e6577206c6f74746572792079657400000081525060200191505060405180910390fd5b60008060006101000a81548160ff021916908360018111156105ee57fe5b0217905550806001908051906020019061060992919061070c565b50600260008154809291906001019190505550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663338cdca16040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561068657600080fd5b505af115801561069a573d6000803e3d6000fd5b505050506040513d60208110156106b057600080fd5b810190808051906020019092919050505060048190555050565b60025481565b600181815481106106dd57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b828054828255906000526020600020908101928215610785579160200282015b828111156107845782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061072c565b5b5090506107929190610796565b5090565b6107d691905b808211156107d257600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161079c565b5090565b9056fe206f7261636c6520717565727920686173206e6f74206265656e2066756c66696c6c656421a2646970667358221220b25ec2f62622db669b75729f263edadac76ab5f0ec15a3821ded93c4ee858a5a64736f6c634300060a0033\"};\n-\n-    public static final String BINARY = String.join(\"\", BINARY_ARRAY);\n-\n-    public static final String[] ABI_ARRAY = {\"[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"randomOracle\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"lotteryId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"winner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"int256\\\",\\\"name\\\":\\\"ramdomness\\\",\\\"type\\\":\\\"int256\\\"}],\\\"name\\\":\\\"Winner\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"lotteryId\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"lottery_state\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"enum LotteryOracle.LOTTERY_STATE\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"pickWinner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"players\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"_players\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"start_new_lottery\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\"};\n-\n-    public static final String ABI = String.join(\"\", ABI_ARRAY);\n-\n-    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);\n-\n-    public static final String[] SM_BINARY_ARRAY = {\"608060405234801561001057600080fd5b506040516108f43803806108f48339818101604052602081101561003357600080fd5b810190808051906020019092919050505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060028190555060016000806101000a81548160ff021916908360018111156100ab57fe5b021790555050610834806100c06000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301fbc5721461005c57806386e053e314610114578063975fcaa014610182578063d865927d146101cc578063e5501039146101ea575b600080fd5b6101126004803603602081101561007257600080fd5b810190808035906020019064010000000081111561008f57600080fd5b8201836020820111156100a157600080fd5b803590602001918460208302840111640100000000831117156100c357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610216565b005b6101406004803603602081101561012a57600080fd5b81019080803590602001909291905050506103a9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61018a6103e5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d46106f4565b6040518082815260200191505060405180910390f35b6101f26106fa565b6040518082600181111561020257fe5b60ff16815260200191505060405180910390f35b60018081111561022257fe5b6000809054906101000a900460ff16600181111561023c57fe5b146102af576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f63616e27742073746172742061206e6577206c6f74746572792079657400000081525060200191505060405180910390fd5b60008060006101000a81548160ff021916908360018111156102cd57fe5b021790555080600190805190602001906102e892919061070c565b50600260008154809291906001019190505550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e97aecc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561036557600080fd5b505af1158015610379573d6000803e3d6000fd5b505050506040513d602081101561038f57600080fd5b810190808051906020019092919050505060048190555050565b600181815481106103b657fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801515600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356ddd8ed6004546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561045f57600080fd5b505afa158015610473573d6000803e3d6000fd5b505050506040513d602081101561048957600080fd5b81019080805190602001909291905050501515146104f2576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806107da6025913960400191505060405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b791ee546004546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d602081101561059357600080fd5b81019080805190602001909291905050509050600060018054905082816105b657fe5b0690506000600182815481106105c857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff8111801561060d57600080fd5b5060405190808252806020026020018201604052801561063c5781602001602082028036833780820191505090505b506001908051906020019061065292919061070c565b5060016000806101000a81548160ff0219169083600181111561067157fe5b02179055507f588fc4c7edbedc786895fc23d3fe765bae4c3c9be9d8f07a409d1d152c3ffd0d6002548285604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a180935050505090565b60025481565b6000809054906101000a900460ff1681565b828054828255906000526020600020908101928215610785579160200282015b828111156107845782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061072c565b5b5090506107929190610796565b5090565b6107d691905b808211156107d257600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161079c565b5090565b9056fe206f7261636c6520717565727920686173206e6f74206265656e2066756c66696c6c656421a2646970667358221220c22993740da736b2d3c41b3cac4bc8c9930fdd007501852204757089d30d6d9064736f6c634300060a0033\"};\n-\n-    public static final String SM_BINARY = String.join(\"\", SM_BINARY_ARRAY);\n-\n-    public static final String FUNC_LOTTERYID = \"lotteryId\";\n-\n-    public static final String FUNC_LOTTERY_STATE = \"lottery_state\";\n-\n-    public static final String FUNC_PICKWINNER = \"pickWinner\";\n-\n-    public static final String FUNC_PLAYERS = \"players\";\n-\n-    public static final String FUNC_START_NEW_LOTTERY = \"start_new_lottery\";\n-\n-    public static final Event WINNER_EVENT = new Event(\"Winner\", \n-            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}));\n-    ;\n-\n-    @Deprecated\n-    protected LotteryOracle(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {\n-        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);\n-    }\n-\n-    protected LotteryOracle(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {\n-        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);\n-    }\n-\n-    @Deprecated\n-    protected LotteryOracle(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {\n-        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);\n-    }\n-\n-    protected LotteryOracle(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {\n-        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);\n-    }\n-\n-    public static String getBinary() {\n-        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);\n-    }\n-\n-    public static TransactionDecoder getTransactionDecoder() {\n-        return transactionDecoder;\n-    }\n-\n-    public List<WinnerEventResponse> getWinnerEvents(TransactionReceipt transactionReceipt) {\n-        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WINNER_EVENT, transactionReceipt);\n-        ArrayList<WinnerEventResponse> responses = new ArrayList<WinnerEventResponse>(valueList.size());\n-        for (Contract.EventValuesWithLog eventValues : valueList) {\n-            WinnerEventResponse typedResponse = new WinnerEventResponse();\n-            typedResponse.log = eventValues.getLog();\n-            typedResponse.lotteryId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();\n-            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();\n-            typedResponse.ramdomness = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();\n-            responses.add(typedResponse);\n-        }\n-        return responses;\n-    }\n-\n-    public void registerWinnerEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {\n-        String topic0 = EventEncoder.encode(WINNER_EVENT);\n-        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);\n-    }\n-\n-    public void registerWinnerEventLogFilter(EventLogPushWithDecodeCallback callback) {\n-        String topic0 = EventEncoder.encode(WINNER_EVENT);\n-        registerEventLogPushFilter(ABI,BINARY,topic0,callback);\n-    }\n-\n-    public RemoteCall<BigInteger> lotteryId() {\n-        final Function function = new Function(FUNC_LOTTERYID, \n-                Arrays.<Type>asList(), \n-                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));\n-        return executeRemoteCallSingleValueReturn(function, BigInteger.class);\n-    }\n-\n-    public RemoteCall<BigInteger> lottery_state() {\n-        final Function function = new Function(FUNC_LOTTERY_STATE, \n-                Arrays.<Type>asList(), \n-                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));\n-        return executeRemoteCallSingleValueReturn(function, BigInteger.class);\n-    }\n-\n-    public RemoteCall<TransactionReceipt> pickWinner() {\n-        final Function function = new Function(\n-                FUNC_PICKWINNER, \n-                Arrays.<Type>asList(), \n-                Collections.<TypeReference<?>>emptyList());\n-        return executeRemoteCallTransaction(function);\n-    }\n-\n-    public void pickWinner(TransactionSucCallback callback) {\n-        final Function function = new Function(\n-                FUNC_PICKWINNER, \n-                Arrays.<Type>asList(), \n-                Collections.<TypeReference<?>>emptyList());\n-        asyncExecuteTransaction(function, callback);\n-    }\n-\n-    public String pickWinnerSeq() {\n-        final Function function = new Function(\n-                FUNC_PICKWINNER, \n-                Arrays.<Type>asList(), \n-                Collections.<TypeReference<?>>emptyList());\n-        return createTransactionSeq(function);\n-    }\n-\n-    public Tuple1<String> getPickWinnerOutput(TransactionReceipt transactionReceipt) {\n-        String data = transactionReceipt.getOutput();\n-        final Function function = new Function(FUNC_PICKWINNER, \n-                Arrays.<Type>asList(), \n-                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));\n-        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;\n-        return new Tuple1<String>(\n-\n-                (String) results.get(0).getValue()\n-                );\n-    }\n-\n-    public RemoteCall<String> players(BigInteger param0) {\n-        final Function function = new Function(FUNC_PLAYERS, \n-                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param0)), \n-                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));\n-        return executeRemoteCallSingleValueReturn(function, String.class);\n-    }\n-\n-    public RemoteCall<TransactionReceipt> start_new_lottery(List<String> _players) {\n-        final Function function = new Function(\n-                FUNC_START_NEW_LOTTERY, \n-                Arrays.<Type>asList(_players.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(\"address[]\"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.Address>(\n-                        org.fisco.bcos.web3j.abi.Utils.typeMap(_players, org.fisco.bcos.web3j.abi.datatypes.Address.class))), \n-                Collections.<TypeReference<?>>emptyList());\n-        return executeRemoteCallTransaction(function);\n-    }\n-\n-    public void start_new_lottery(List<String> _players, TransactionSucCallback callback) {\n-        final Function function = new Function(\n-                FUNC_START_NEW_LOTTERY, \n-                Arrays.<Type>asList(_players.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(\"address[]\"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.Address>(\n-                        org.fisco.bcos.web3j.abi.Utils.typeMap(_players, org.fisco.bcos.web3j.abi.datatypes.Address.class))), \n-                Collections.<TypeReference<?>>emptyList());\n-        asyncExecuteTransaction(function, callback);\n-    }\n-\n-    public String start_new_lotterySeq(List<String> _players) {\n-        final Function function = new Function(\n-                FUNC_START_NEW_LOTTERY, \n-                Arrays.<Type>asList(_players.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(\"address[]\"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.Address>(\n-                        org.fisco.bcos.web3j.abi.Utils.typeMap(_players, org.fisco.bcos.web3j.abi.datatypes.Address.class))), \n-                Collections.<TypeReference<?>>emptyList());\n-        return createTransactionSeq(function);\n-    }\n-\n-    public Tuple1<List<String>> getStart_new_lotteryInput(TransactionReceipt transactionReceipt) {\n-        String data = transactionReceipt.getInput().substring(10);\n-        final Function function = new Function(FUNC_START_NEW_LOTTERY, \n-                Arrays.<Type>asList(), \n-                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));\n-        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;\n-        return new Tuple1<List<String>>(\n-\n-                convertToNative((List<Address>) results.get(0).getValue())\n-                );\n-    }\n-\n-    @Deprecated\n-    public static LotteryOracle load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {\n-        return new LotteryOracle(contractAddress, web3j, credentials, gasPrice, gasLimit);\n-    }\n-\n-    @Deprecated\n-    public static LotteryOracle load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {\n-        return new LotteryOracle(contractAddress, web3j, transactionManager, gasPrice, gasLimit);\n-    }\n-\n-    public static LotteryOracle load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {\n-        return new LotteryOracle(contractAddress, web3j, credentials, contractGasProvider);\n-    }\n-\n-    public static LotteryOracle load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {\n-        return new LotteryOracle(contractAddress, web3j, transactionManager, contractGasProvider);\n-    }\n-\n-    public static RemoteCall<LotteryOracle> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String randomOracle) {\n-        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(randomOracle)));\n-        return deployRemoteCall(LotteryOracle.class, web3j, credentials, contractGasProvider, getBinary(), encodedConstructor);\n-    }\n-\n-    public static RemoteCall<LotteryOracle> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String randomOracle) {\n-        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(randomOracle)));\n-        return deployRemoteCall(LotteryOracle.class, web3j, transactionManager, contractGasProvider, getBinary(), encodedConstructor);\n-    }\n-\n-    @Deprecated\n-    public static RemoteCall<LotteryOracle> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String randomOracle) {\n-        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(randomOracle)));\n-        return deployRemoteCall(LotteryOracle.class, web3j, credentials, gasPrice, gasLimit, getBinary(), encodedConstructor);\n-    }\n-\n-    @Deprecated\n-    public static RemoteCall<LotteryOracle> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String randomOracle) {\n-        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(randomOracle)));\n-        return deployRemoteCall(LotteryOracle.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), encodedConstructor);\n-    }\n-\n-    public static class WinnerEventResponse {\n-        public Log log;\n-\n-        public BigInteger lotteryId;\n-\n-        public String winner;\n-\n-        public BigInteger ramdomness;\n-    }\n-}"
  },
  {
    "sha": "748c9a0fde0744f42e5f404da2d382bcae822866",
    "filename": "src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleTest.java",
    "status": "renamed",
    "additions": 12,
    "deletions": 14,
    "changes": 26,
    "blob_url": "https://github.com/WeBankBlockchain/Truora-Service/blob/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleTest.java",
    "raw_url": "https://github.com/WeBankBlockchain/Truora-Service/raw/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleTest.java",
    "contents_url": "https://api.github.com/repos/WeBankBlockchain/Truora-Service/contents/src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleTest.java?ref=93dd67df82c3c32c6b2cda38093ed612389d4aa6",
    "patch": "@@ -1,16 +1,4 @@\n-package com.webank.oracle.test.transaction.oracle;\n-\n-import static com.webank.oracle.event.service.AbstractCoreService.dealWithReceipt;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n-import org.fisco.bcos.web3j.protocol.Web3j;\n-import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n+package com.webank.oracle.test.transaction.VRF;\n \n import com.webank.oracle.base.enums.ContractTypeEnum;\n import com.webank.oracle.base.properties.ConstantProperties;\n@@ -19,8 +7,18 @@\n import com.webank.oracle.test.base.BaseTest;\n import com.webank.oracle.trial.contract.APISampleOracle;\n import com.webank.oracle.trial.contract.LotteryOracle;\n-\n import lombok.extern.slf4j.Slf4j;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.webank.oracle.event.service.AbstractCoreService.dealWithReceipt;\n \n @Slf4j\n public class LotteryOracleTest extends BaseTest {",
    "previous_filename": "src/test/java/com/webank/oracle/test/transaction/oracle/LotteryOracleTest.java"
  },
  {
    "sha": "8b49403cf615820dc88dc4fe773d3e27ceb8eb0c",
    "filename": "src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleWithVRFTest.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/WeBankBlockchain/Truora-Service/blob/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleWithVRFTest.java",
    "raw_url": "https://github.com/WeBankBlockchain/Truora-Service/raw/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleWithVRFTest.java",
    "contents_url": "https://api.github.com/repos/WeBankBlockchain/Truora-Service/contents/src/test/java/com/webank/oracle/test/transaction/VRF/LotteryOracleWithVRFTest.java?ref=93dd67df82c3c32c6b2cda38093ed612389d4aa6",
    "patch": "@@ -0,0 +1,83 @@\n+package com.webank.oracle.test.transaction.VRF;\n+\n+import com.webank.oracle.base.enums.ContractTypeEnum;\n+import com.webank.oracle.base.properties.ConstantProperties;\n+import com.webank.oracle.base.properties.EventRegister;\n+import com.webank.oracle.contract.ContractDeploy;\n+import com.webank.oracle.test.base.BaseTest;\n+import com.webank.oracle.trial.contract.LotteryOracleUseVrf;\n+import com.webank.oracle.trial.contract.RandomNumberSampleVRF;\n+import lombok.extern.slf4j.Slf4j;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.webank.oracle.event.service.AbstractCoreService.dealWithReceipt;\n+\n+@Slf4j\n+public class LotteryOracleWithVRFTest extends BaseTest {\n+\n+    @Test\n+    public void testLotteryOracleWithVRF() {\n+        credentials = this.keyStoreService.getCredentials();\n+        try {\n+            EventRegister eventRegister = eventRegisterProperties.getEventRegisters().get(0);\n+\n+            int chainId = eventRegister.getChainId();\n+            int groupId = eventRegister.getGroup();\n+            Web3j web3j = getWeb3j(chainId, groupId);\n+\n+            Optional<ContractDeploy> deployOptional =\n+                    this.contractDeployRepository.findByChainIdAndGroupIdAndContractTypeAndVersion( chainId, groupId,\n+                        ContractTypeEnum.VRF.getId(), this.contractVersion.getOracleCoreVersion() );\n+\n+            if (!deployOptional.isPresent()) {\n+                Assertions.fail();\n+                return;\n+            }\n+\n+            String vrfCoreAddress = deployOptional.get().getContractAddress();\n+            log.info(\"vrf core address \" + vrfCoreAddress);\n+            byte[] keyHashByte = calculateTheHashOfPK(credentials.getEcKeyPair().getPrivateKey().toString(16));\n+            // asset\n+            RandomNumberSampleVRF randomNumberSampleVRF = RandomNumberSampleVRF.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER, vrfCoreAddress, keyHashByte).send();\n+\n+            String sampleVrfAddress = randomNumberSampleVRF.getContractAddress();\n+            log.info(\"Deploy Vrf sample Address contract:[{}]\", sampleVrfAddress);\n+\n+            LotteryOracleUseVrf lotteryOracle = LotteryOracleUseVrf.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER, sampleVrfAddress).send();\n+\n+\n+            String[] array = {\"0x2b5ad5c4795c026514f8317c7a215e218dccd6cf\",\"0x2b5ad5c4795c026514f8317c7a215e218dccd6c1\",\"0x2b5ad5c4795c026514f8317c7a215e218dccd6c2\",\"0x2b5ad5c4795c026514f8317c7a215e218dccd6c3\",\"0x2b5ad5c4795c026514f8317c7a215e218dccd6c4\"};\n+            List<String> playerAddressList = Arrays.asList(array);\n+\n+            TransactionReceipt t1 = lotteryOracle.start_new_lottery(playerAddressList).send();\n+            dealWithReceipt(t1);\n+            log.info( \"status: {}\" ,t1.getStatus());\n+            log.info( \"output: {}\" ,t1.getOutput());\n+\n+            Thread.sleep(5000);\n+\n+            TransactionReceipt randomTrans = lotteryOracle.pickWinner().send();\n+            dealWithReceipt(randomTrans);\n+           log.info( \"status: {}\" ,randomTrans.getStatus());\n+\n+           log.info(\"winner: {}\", lotteryOracle.getWinnerEvents(randomTrans).get(0).winner);\n+           log.info( \"id: {}\" ,lotteryOracle.getWinnerEvents(randomTrans).get(0).lotteryId);\n+           log.info( \"randomness: {}\", lotteryOracle.getWinnerEvents(randomTrans).get(0).ramdomness);\n+           log.info( \"output: {}\", randomTrans.getOutput());\n+\n+           Assertions.assertTrue(randomTrans.getOutput().contains(\"2b5ad5c4795c026514f8317c7a215e218dccd6c\"));\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            Assertions.fail();\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "4900e4abdd90499abab70b036647a1a0a0d25e56",
    "filename": "src/test/java/com/webank/oracle/test/transaction/VRF/SimpleVRFTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 146,
    "changes": 146,
    "blob_url": "https://github.com/WeBankBlockchain/Truora-Service/blob/d3e03f1a00413e0451f37d729562e71504c1e99e/src/test/java/com/webank/oracle/test/transaction/VRF/SimpleVRFTest.java",
    "raw_url": "https://github.com/WeBankBlockchain/Truora-Service/raw/d3e03f1a00413e0451f37d729562e71504c1e99e/src/test/java/com/webank/oracle/test/transaction/VRF/SimpleVRFTest.java",
    "contents_url": "https://api.github.com/repos/WeBankBlockchain/Truora-Service/contents/src/test/java/com/webank/oracle/test/transaction/VRF/SimpleVRFTest.java?ref=d3e03f1a00413e0451f37d729562e71504c1e99e",
    "patch": "@@ -1,146 +0,0 @@\n-//package com.webank.oracle.test.transaction.VRF;\n-//\n-//import com.webank.oracle.base.properties.ConstantProperties;\n-//import com.webank.oracle.base.utils.CryptoUtil;\n-//import com.webank.oracle.test.base.BaseTest;\n-//import com.webank.oracle.transaction.vrf.VRFCore;\n-//import com.webank.oracle.transaction.vrf.LibVRFK1;\n-//\n-//import lombok.extern.slf4j.Slf4j;\n-//\n-//import org.fisco.bcos.web3j.abi.datatypes.Address;\n-//import org.fisco.bcos.web3j.crypto.Credentials;\n-//import org.fisco.bcos.web3j.protocol.Web3j;\n-//import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;\n-//import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n-//import org.fisco.bcos.web3j.utils.ByteUtil;\n-//import org.fisco.bcos.web3j.utils.Numeric;\n-//import org.junit.jupiter.api.Test;\n-//\n-//import java.math.BigInteger;\n-//import java.util.ArrayList;\n-//import java.util.List;\n-//\n-//import static com.webank.oracle.event.service.AbstractCoreService.dealWithReceipt;\n-//\n-//@Slf4j\n-//public class SimpleVRFTest extends BaseTest {\n-//\n-//\n-//    @Test\n-//    public void testVRFRandomNumberConsumer() throws Exception {\n-//\n-//        credentials = Credentials.create(\"b83261efa42895c38c6c2364ca878f43e77f3cddbc922bf57d0d48070f79feb6\");\n-//\n-//        int chainId = eventRegisterProperties.getEventRegisters().get(0).getChainId();\n-//        int groupId = eventRegisterProperties.getEventRegisters().get(0).getGroup();\n-//\n-//        log.info(\"deploy vrf core\");\n-//        Web3j web3j = getWeb3j(eventRegisterProperties.getEventRegisters().get(0).getChainId(), 1);\n-//\n-//        VRFCore vrfCore = VRFCore.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER, BigInteger.valueOf(chainId), BigInteger.valueOf(groupId)).send();\n-//        log.info(\"vrf core address : \" + vrfCore.getContractAddress());\n-//\n-//        byte[] keyhashbyte = calculateTheHashOfPK(\"b83261efa42895c38c6c2364ca878f43e77f3cddbc922bf57d0d48070f79feb6\");\n-//        log.info(\"deploy consumer  contract\");\n-//\n-//        List ilist = calculateThePK(\"b83261efa42895c38c6c2364ca878f43e77f3cddbc922bf57d0d48070f79feb6\");\n-//\n-//        RandomNumberSampleVRF randomNumberConsumer = RandomNumberSampleVRF.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER, vrfCore.getContractAddress(), keyhashbyte).send();\n-//        log.info(\"consumer address: \" + randomNumberConsumer.getContractAddress());\n-//\n-//        log.info(\"consumer start a query ....... \");\n-//        TransactionReceipt randomT = randomNumberConsumer.getRandomNumber(new BigInteger(\"1\")).send();\n-//        log.info(randomT.getStatus());\n-//        //  log.info(randomT.getOutput());\n-//        log.info(\"consumer query reqId: \" + randomT.getOutput());\n-//\n-//        log.info(\"core listen to the event .........\");\n-//        VRFCore.RandomnessRequestEventResponse randomevent = vrfCore.getRandomnessRequestEvents(randomT).get(0);\n-//\n-//        log.info(\"hash:\" + bytesToHex(randomevent.keyHash));\n-//        log.info(\"preseed \" + randomevent.seed);\n-//        log.info(\"blocknumber: \" + randomevent.blockNumber);\n-//\n-//        log.info(\"sender: \" + randomevent.sender);\n-//        log.info(\"requestId: \" + bytesToHex(randomevent.requestId));\n-//        log.info(\"seedAndBlock:        \" + bytesToHex(randomevent.seedAndBlockNum));\n-//\n-//        log.info(\"vrf core generate the proof .........\");\n-//        BigInteger preseed = randomevent.seed;\n-//        BigInteger blockNumber = randomevent.blockNumber;\n-//        String blockhash = web3j.getBlockHashByNumber(DefaultBlockParameter.valueOf(blockNumber)).send().getBlockHashByNumber();\n-//        log.info(\"blockhash : {}\", blockhash);\n-//        byte[] bnbytes = Numeric.toBytesPadded(blockNumber, 32);\n-//\n-//        String actualSeed = bytesToHex(CryptoUtil.soliditySha3(randomevent.seed, CryptoUtil.solidityBytes(hexStringtoBytes(blockhash.substring(2)))));\n-//        String actualSeedonchain = bytesToHex(randomevent.seedAndBlockNum);\n-//        log.info(\"actualseed: {} \", actualSeed);\n-//        log.info(\"actualSeedonchain: {} \", actualSeedonchain);\n-//\n-//        String proof = LibVRFK1.InstanceHolder.getInstance().prove(credentials.getEcKeyPair().getPrivateKey().toString(16), actualSeed);\n-//        log.info(\"Generate proof :\" + proof);\n-//\n-//        Thread.sleep(10);\n-//        byte[] proofbyte = ByteUtil.hexStringToBytes(proof);\n-//\n-//        log.info(\"vrf core fulfill the request .........\");\n-//        TransactionReceipt tt = (TransactionReceipt) vrfCore.fulfillRandomnessRequest(ilist, proofbyte, preseed, blockNumber).send();\n-//        dealWithReceipt(tt);\n-//        log.info(tt.getStatus());\n-//        log.info(tt.getOutput());\n-//\n-//        VRFCore.RandomnessRequestFulfilledEventResponse res = vrfCore.getRandomnessRequestFulfilledEvents(tt).get(0);\n-//        log.info(\"ramdom result: \" + res.output);\n-//        log.info(\"requestId: \" + bytesToHex(res.requestId));\n-//\n-//        log.info(\" consumer query the ramdom result\");\n-//        BigInteger ram = randomNumberConsumer.randomResult().send();\n-//        log.info(\" ram: \" + ram);\n-//        //  log.info(DecodeOutputUtils.decodeOutputReturnString0x16(t.getOutput()));\n-//    }\n-//\n-//\n-//    @Test\n-//    public void testSha() {\n-//        String keyhash = \"6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\";\n-//        log.info(\"credential: \" + credentialsBob.getEcKeyPair().getPublicKey().toString());\n-//\n-//        String requestId = \"0x3B8588274FD75969C29B0DB8C63D7E5716DFDEA31F8FDF229E041896C5FAF745\";\n-//        String keyhash1 = \"0x3B8588274FD75969C29B0DB8C63D7E5716DFDEA31F8FDF229E041896C5FAF745\";\n-//        String vrfInput = \"\";\n-//        byte[] vrfseed = CryptoUtil.soliditySha3(hexStringtoBytes(keyhash), new BigInteger(\"1\"), new Address(\"0xe5fd2eb6f001ea1d2675103f3047563bb4c0ab48\"), new BigInteger(\"0\"));\n-//        log.info(\"vrf seed :{}\", new BigInteger(bytesToHex(vrfseed), 16));\n-//    }\n-//\n-//    public static String bytesToHex(byte[] bytes) {\n-//        final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n-//        char[] hexChars = new char[bytes.length * 2];\n-//        for (int j = 0; j < bytes.length; j++) {\n-//            int v = bytes[j] & 0xFF;\n-//            hexChars[j * 2] = hexArray[v >>> 4];\n-//            hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n-//        }\n-//        String finalHex = new String(hexChars);\n-//        return finalHex;\n-//    }\n-//\n-//    public byte[] hexStringtoBytes(String s) {\n-//        byte[] val = new byte[s.length() / 2];\n-//        for (int i = 0; i < val.length; i++) {\n-//            int index = i * 2;\n-//            int j = Integer.parseInt(s.substring(index, index + 2), 16);\n-//            val[i] = (byte) j;\n-//        }\n-//        return val;\n-//    }\n-//\n-//\n-//    public static byte[] calculateTheHashOfPK(String skhex) {\n-//        List ilist = calculateThePK(skhex);\n-//\n-//        return CryptoUtil.soliditySha3(ilist.get(0), ilist.get(1));\n-//    }\n-//\n-//\n-//}"
  },
  {
    "sha": "85ead084a7e8fde97e041b3d586edb94862c2d03",
    "filename": "src/test/java/com/webank/oracle/test/transaction/VRF/VRFUtilTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 247,
    "changes": 247,
    "blob_url": "https://github.com/WeBankBlockchain/Truora-Service/blob/d3e03f1a00413e0451f37d729562e71504c1e99e/src/test/java/com/webank/oracle/test/transaction/VRF/VRFUtilTest.java",
    "raw_url": "https://github.com/WeBankBlockchain/Truora-Service/raw/d3e03f1a00413e0451f37d729562e71504c1e99e/src/test/java/com/webank/oracle/test/transaction/VRF/VRFUtilTest.java",
    "contents_url": "https://api.github.com/repos/WeBankBlockchain/Truora-Service/contents/src/test/java/com/webank/oracle/test/transaction/VRF/VRFUtilTest.java?ref=d3e03f1a00413e0451f37d729562e71504c1e99e",
    "patch": "@@ -1,247 +0,0 @@\n-//package com.webank.oracle.test.transaction.VRF;\n-//\n-//import static com.webank.oracle.event.service.AbstractCoreService.dealWithReceipt;\n-//\n-//import java.math.BigInteger;\n-//import java.util.ArrayList;\n-//import java.util.List;\n-//\n-//import org.fisco.bcos.web3j.abi.datatypes.Address;\n-//import org.fisco.bcos.web3j.crypto.Credentials;\n-//import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n-//import org.fisco.bcos.web3j.protocol.Web3j;\n-//import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n-//import org.fisco.bcos.web3j.utils.Numeric;\n-//import org.junit.jupiter.api.Assertions;\n-//import org.junit.jupiter.api.Test;\n-//\n-//import com.webank.oracle.base.properties.ConstantProperties;\n-//import com.webank.oracle.base.utils.CryptoUtil;\n-//import com.webank.oracle.base.utils.DecodeOutputUtils;\n-//import com.webank.oracle.test.base.BaseTest;\n-//import com.webank.oracle.transaction.vrf.LibVRF;\n-//import com.webank.oracle.transaction.vrf.VRF;\n-//import com.webank.oracle.transaction.vrf.VRFCoordinator;\n-//import com.webank.oracle.trial.contract.RandomNumberSampleOracle;\n-//\n-//import lombok.extern.slf4j.Slf4j;\n-//\n-//@Slf4j\n-//public class VRFUtilTest extends BaseTest {\n-//\n-//    @Test\n-//    public void testVRF() throws Exception {\n-//\n-//        credentials = GenCredential.create();\n-//\n-//        Web3j web3j = getWeb3j(eventRegisterProperties.getEventRegisters().get(0).getChainId(),1);\n-//      //  System.out.println(Credentials.create(\"1\").getAddress());\n-//        //fist  secretRegistty\n-//       VRF vrf = VRF.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER).send();\n-//        System.out.println(\"address: \" + vrf.getContractAddress());\n-//       String s =\"0xb015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112cab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f0c7e532826ca771636f9430be430ff0905a97cdc5378aec06854e1bcc4cec42e65089603d0c65e5d84a295169b664ae2fff258220ca0a2c716ea05744792dee7ecf04e000751e54cee9372b7676bd5e3cdf38eb326ca556ebb241b672087a8f6594901f956764cfadbcc9712deda529710dd8195971f70a185a2d5f3124e498c0000000000000000000000000000000000000000000000000000000000c831f60000000000000000000000001cc0c65ca5dd6b767338946f2c44c02040744ef52bc36732922c89b38dc35f684e632c52174097c158d05a4dc28aa3dec591f4cb0cb6ec42358ee1b0f9d3c4a92eb74a5dffcabeccb7ed5d628ebbb57bb3876722ef94966c20b32ef87cbf1f50a767016dbbaa5cf234350738dfa9700ebe3fce19367866cf7241ee0ea1362578c01578ec2a9dcfbc0e96dbcf45945eda665ca9cc592cb7b588f4c2268024b8f1524768198d5e0904e45c9e5bb8e1718bb85b18f7\";\n-//\n-//        byte[] i= Numeric.hexStringToByteArray(s);\n-//        TransactionReceipt t = vrf.testRandomValueFromVRFProof(i).send();\n-//\n-//        log.info(t.getStatus());\n-//        log.info(t.getOutput());\n-//        VRF.TestRandomEventResponse log =  vrf.getTestRandomEvents(t).get(0);\n-//\n-//        BigInteger result = vrf.randomValueFromVRFProof(i).send();\n-//        Assertions.assertNotNull(result);\n-//\n-//    }\n-//\n-//\n-//    @Test\n-//    public void testVRFCoordinator() throws Exception {\n-//\n-//        credentials = GenCredential.create();\n-//\n-//        Web3j web3j = getWeb3j(eventRegisterProperties.getEventRegisters().get(0).getChainId(),1);\n-//        log.info(Credentials.create(\"1\").getAddress());\n-//        log.info(GenCredential.create(\"1\").getAddress());\n-//        VRFCoordinator vrfCore = VRFCoordinator.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER).send();\n-//      //  String s =\"0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8220932710bb12fef86739686044ec7659904ab9992085b5f08eac3d80e610b7ec662bf88aca6461cecb8e49b221e087f5fb6a6cbcda0296ae99dc8c3b5cdb9d69b3c9054e20e8dd14e82c7d37de1b3a9aad5449854825d3cce6475d2148aced764c36fab1df1722eb17d382c821e4c550fd9984e5ac642fef16de8babbab726b00000000000000000000000000000000000000000000000000000000000000020000000000000000000000007e5f4552091a69125d5dfcb7b8c2659029395bdfaa9881ee471e42fc5327067e85bf914f4384aa36954c831dc48b96b6b38a7d07c38f5bfc7eccbb81f71ff0dfab91a09fa4725d4f26f60e7ff206c6383aad575b6cea027120ad41374b9720edf0e9bc8a8e09a9ffddda6d925054ae71dc6468ff4bcf24d770067e334e2c7f9722bbe09ea6031aa63be8311557296986dd4dccf03fbe9e7d30509914af77cffa148ee040c85ace282707527eb07f8db31ced4b0a\";\n-//        String s =\"0xb015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112cab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f0c7e532826ca771636f9430be430ff0905a97cdc5378aec06854e1bcc4cec42e65089603d0c65e5d84a295169b664ae2fff258220ca0a2c716ea05744792dee7ecf04e000751e54cee9372b7676bd5e3cdf38eb326ca556ebb241b672087a8f6594901f956764cfadbcc9712deda529710dd8195971f70a185a2d5f3124e498c0000000000000000000000000000000000000000000000000000000000c831f60000000000000000000000001cc0c65ca5dd6b767338946f2c44c02040744ef52bc36732922c89b38dc35f684e632c52174097c158d05a4dc28aa3dec591f4cb0cb6ec42358ee1b0f9d3c4a92eb74a5dffcabeccb7ed5d628ebbb57bb3876722ef94966c20b32ef87cbf1f50a767016dbbaa5cf234350738dfa9700ebe3fce19367866cf7241ee0ea1362578c01578ec2a9dcfbc0e96dbcf45945eda665ca9cc592cb7b588f4c2268024b8f1524768198d5e0904e45c9e5bb8e1718bb85b18f7\";\n-//        String blockNumber = \"0000000000000000000000000000000000000000000000000000000000000005\";\n-//        byte[] i= Numeric.hexStringToByteArray(s+blockNumber);\n-//        TransactionReceipt t  = vrfCore.fulfillRandomnessRequest(i).send();\n-//        log.info(\"address:\" + vrfCore.getContractAddress());\n-//        log.info(t.getStatus());\n-//        log.info(t.getOutput());\n-//        log.info(DecodeOutputUtils.decodeOutputReturnString0x16(t.getOutput()));\n-//    }\n-//\n-//    @Test\n-//    public void testCalculateTheKeyHash() throws Exception {\n-//        credentials = GenCredential.create();\n-//        Web3j web3j = getWeb3j(eventRegisterProperties.getEventRegisters().get(0).getChainId(),1);\n-//        Credentials user = Credentials.create(\"2\");\n-//        log.info(user.getAddress());\n-//        log.info(\"pk : {} \",user.getEcKeyPair().getPublicKey());\n-//        String pk = user.getEcKeyPair().getPublicKey().toString(16);\n-//        log.info(pk);\n-//        int len = pk.length();\n-//        String pkx = pk.substring(0,len/2);\n-//        String pky = pk.substring(len/2);\n-//        BigInteger Bx = new BigInteger(pkx,16);\n-//        BigInteger By = new BigInteger(pky,16);\n-//        log.info(\"*** \"+ Bx);\n-//        log.info(\"*** \" +By);\n-//        log.info(\"offline: \" +bytesToHex(CryptoUtil.soliditySha3(Bx,By)));\n-//\n-//        VRFCoordinator vrfCore = VRFCoordinator.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER).send();\n-//\n-//         List ilist = new ArrayList<BigInteger>();\n-//         ilist.add(Bx);\n-//         ilist.add(By);\n-//\n-//        TransactionReceipt r1 = (TransactionReceipt) vrfCore.hashOfKey(ilist).send();\n-//        log.info(\"online hash of key: \"+ r1.getOutput());\n-//    }\n-//\n-//\n-//    @Test\n-//    public void testRandomNumberConsumer() throws Exception {\n-//\n-//         credentials = GenCredential.create();\n-//\n-//        log.info(\"deploy vrf coordinator\");\n-//        Web3j web3j = getWeb3j(eventRegisterProperties.getEventRegisters().get(0).getChainId(),1);\n-//\n-//        VRFCoordinator vrfCore = VRFCoordinator.deploy(web3j, credentials, ConstantProperties.GAS_PROVIDER).send();\n-//      // interface VRFCoordinator vrfCore = VRFCoordinator.load(\"0xcfdaa4a02061d0ccb4357dcf1a607b8fac9b57c0\",web3j, credentials, contractGasProvider);\n-//        log.info(\"coordinate address : \" + vrfCore.getContractAddress());\n-////        String keyhash = \"1398E8BAD6043BA497B9679E148947262EC5E21739FE3A931C29E8B84EE34A0F\";\n-////        byte[] keyhashbyte = hexStringtoBytes(keyhash);\n-//        byte[] keyhashbyte  = calculateTheHashOfPK(\"b83261efa42895c38c6c2364ca878f43e77f3cddbc922bf57d0d48070f79feb6\");\n-//        log.info(\"deploy consumer  contract\");\n-//\n-//        RandomNumberSampleOracle randomNumberConsumer = RandomNumberSampleOracle.deploy(web3j,credentials,ConstantProperties.GAS_PROVIDER,vrfCore.getContractAddress(),keyhashbyte).send();\n-//      // RandomNumberConsumer randomNumberConsumer = RandomNumberConsumer.load(\"0x0382f73a5924aa2dbf51429421275a8541eb53c3\", web3j,credentials,contractGasProvider);\n-//        log.info(\"consumer address: \" + randomNumberConsumer.getContractAddress() );\n-//\n-//\n-//        log.info(\"consumer start a query ....... \"  );\n-//        TransactionReceipt randomT =  randomNumberConsumer.getRandomNumber(new BigInteger(\"1\")).send();\n-//        log.info(randomT.getStatus());\n-//      //  log.info(randomT.getOutput());\n-//        log.info(\"consumer query reqId: \"+randomT.getOutput());\n-//\n-//        log.info(\"coordinate listen to the event .........\");\n-//        VRFCoordinator.RandomnessRequestEventResponse randomevent =vrfCore.getRandomnessRequestEvents(randomT).get(0);\n-//       // vrfCore.callbacks(randomevent.requestId);\n-//\n-//        log.info(\"hash:\" + bytesToHex(randomevent.keyHash));\n-//        log.info(\"preseed \" + randomevent.seed);\n-//        log.info(\"blocknumber: \" + randomevent.blockNumber);\n-//\n-//        log.info(\"sender: \"+ randomevent.sender);\n-//        log.info(\"requestId: \" +bytesToHex(randomevent.requestId));\n-//        log.info(\"seedAndBlock:        \" +bytesToHex(randomevent.seedAndBlockNum));\n-//\n-////        Tuple2<String, byte[]> callback =  vrfCore.callbacks(randomevent.requestId).send();\n-////        log.info(\"callback add: \"+ callback.getValue1());\n-////        log.info(\"callback seedandblock: \"+ bytesToHex(callback.getValue2()));\n-////        byte[] seedAndBlock  = CryptoUtil.soliditySha3( randomevent.seed, randomevent.blockNumber);\n-////        log.info(\"seedAndBlockoffline: \" + Numeric.toHexString(seedAndBlock));\n-//\n-////        byte[] vrfseed  = CryptoUtil.soliditySha3( randomevent.keyHash, new BigInteger(\"1\"),new Address(randomNumberConsumer.getContractAddress()),new BigInteger(\"0\"));\n-////        log.info(\"vrfseed: \" + Numeric.toHexString(vrfseed));\n-////        byte[] requestId1 =  CryptoUtil.soliditySha3(randomevent.keyHash,new BigInteger(Numeric.toHexString(vrfseed).substring(2),16));\n-////        log.info(\"requestId1: \"+ bytesToHex(requestId1));\n-//\n-//        log.info(\"coordinate generate the proof .........\");\n-//        BigInteger preseed = randomevent.seed;\n-//        BigInteger blockNumber = randomevent.blockNumber;\n-//        byte[] bnbytes =Numeric.toBytesPadded(blockNumber, 32);\n-////        String blockHash = bytesToHex(CryptoUtil.soliditySha3(blockNumber));\n-//\n-////         String actualSeed = bytesToHex(CryptoUtil.soliditySha3(randomevent.seed, CryptoUtil.solidityBytes(blockNumber)));\n-//\n-//     //   log.info(\"credential: \" + credentialsBob.getEcKeyPair().getPrivateKey().toString());\n-//\n-//        String proof =  LibVRF.InstanceHolder.getInstance().VRFProoFGenerate(credentials.getEcKeyPair().getPrivateKey().toString(16),preseed.toString(16));\n-//        log.info(\"Generate proof :\" + proof);\n-//\n-//        Thread.sleep(10);\n-//        byte[] i= Numeric.hexStringToByteArray(proof);\n-//        byte[] destination = new byte[i.length + 32];\n-//        System.arraycopy(i, 0, destination, 0, i.length);\n-//        System.arraycopy(bnbytes, 0, destination, i.length, 32);\n-//\n-//\n-//        log.info(\"coordinate fulfill the request .........\");\n-//        TransactionReceipt t  = vrfCore.fulfillRandomnessRequest(destination).send();\n-//        dealWithReceipt(t);\n-//        log.info(t.getStatus());\n-//        log.info(t.getOutput());\n-//\n-//\n-//        VRFCoordinator.RandomnessRequestFulfilledEventResponse res = vrfCore.getRandomnessRequestFulfilledEvents(t).get(0);\n-//\n-//        log.info(\"ramdom result: \" +res.output);\n-//        log.info(\"requestId: \" +bytesToHex(res.requestId));\n-//\n-//        log.info(\" consumer query the ramdom result\");\n-//\n-//\n-//        BigInteger ram = randomNumberConsumer.randomResult().send();\n-//        log.info(\" ram: \"+  ram.toString(16));\n-//     //   log.info(DecodeOutputUtils.decodeOutputReturnString0x16(t.getOutput()));\n-//    }\n-//\n-//\n-//\n-//    @Test\n-//    public void testJNA() {\n-//\n-//        String sk= \"1a\";\n-//        String seed= \"1b\";\n-//       String result =  LibVRF.InstanceHolder.getInstance().VRFProoFGenerate(sk,seed);\n-//        log.info(result);\n-//    }\n-//\n-//\n-//\n-//    @Test\n-//    public void testSha() {\n-//        String keyhash = \"6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\";\n-//        log.info(\"credential: \" + credentialsBob.getEcKeyPair().getPublicKey().toString());\n-//\n-//         String requestId = \"0x3B8588274FD75969C29B0DB8C63D7E5716DFDEA31F8FDF229E041896C5FAF745\";\n-//         String keyhash1 = \"0x3B8588274FD75969C29B0DB8C63D7E5716DFDEA31F8FDF229E041896C5FAF745\";\n-//         String vrfInput = \"\";\n-//         byte[] vrfseed  = CryptoUtil.soliditySha3( hexStringtoBytes(keyhash), new BigInteger(\"1\"),new Address(\"0xe5fd2eb6f001ea1d2675103f3047563bb4c0ab48\"),new BigInteger(\"0\"));\n-//        log.info(\"vrf seed :{}\",new BigInteger(bytesToHex(vrfseed),16));\n-//    }\n-//\n-//    public static String bytesToHex(byte[] bytes)\n-//    {\n-//        final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n-//        char[] hexChars = new char[bytes.length * 2];\n-//        for ( int j = 0; j < bytes.length; j++ )\n-//        {\n-//            int v = bytes[j] & 0xFF;\n-//            hexChars[j * 2] = hexArray[v >>> 4];\n-//            hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n-//        }\n-//        String finalHex = new String(hexChars);\n-//        return finalHex;\n-//    }\n-//\n-//    public byte[]  hexStringtoBytes(String s) {\n-//        byte[] val = new byte[s.length() / 2];\n-//        for (int i = 0; i < val.length; i++) {\n-//            int index = i * 2;\n-//            int j = Integer.parseInt(s.substring(index, index + 2), 16);\n-//            val[i] = (byte) j;\n-//        }\n-//        return val;\n-//    }\n-//\n-//\n-//\n-//}"
  },
  {
    "sha": "26c8e81426c7b29f865fd6fb50ec6ea0b4009899",
    "filename": "src/test/java/com/webank/oracle/test/util/UtilTest.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/WeBankBlockchain/Truora-Service/blob/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/test/java/com/webank/oracle/test/util/UtilTest.java",
    "raw_url": "https://github.com/WeBankBlockchain/Truora-Service/raw/93dd67df82c3c32c6b2cda38093ed612389d4aa6/src/test/java/com/webank/oracle/test/util/UtilTest.java",
    "contents_url": "https://api.github.com/repos/WeBankBlockchain/Truora-Service/contents/src/test/java/com/webank/oracle/test/util/UtilTest.java?ref=93dd67df82c3c32c6b2cda38093ed612389d4aa6",
    "patch": "@@ -85,4 +85,28 @@ public void testGetPublicKeyListFromString() {\n         }\n     }\n \n+\n+        public static String bytesToHex(byte[] bytes)\n+    {\n+        final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n+        char[] hexChars = new char[bytes.length * 2];\n+        for ( int j = 0; j < bytes.length; j++ )\n+        {\n+            int v = bytes[j] & 0xFF;\n+            hexChars[j * 2] = hexArray[v >>> 4];\n+            hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n+        }\n+        String finalHex = new String(hexChars);\n+        return finalHex;\n+    }\n+\n+    public byte[]  hexStringtoBytes(String s) {\n+        byte[] val = new byte[s.length() / 2];\n+        for (int i = 0; i < val.length; i++) {\n+            int index = i * 2;\n+            int j = Integer.parseInt(s.substring(index, index + 2), 16);\n+            val[i] = (byte) j;\n+        }\n+        return val;\n+    }\n }"
  }
]
