[
  {
    "sha": "732dcc345a4fa2e195f191d9e0966a621e796b51",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/.gitignore",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/.gitignore",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/.gitignore?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -28,13 +28,6 @@ transformed_main_*\n *.mod\n a.out\n \n-# Driver files configured and generated by CMake\n-clawfc\n-clawfc_test\n-claw_f.conf\n-claw_f.conf_test\n-claw_f_lib.sh\n-\n # OMNI compiler temporary folders\n __omni_tmp__\n __xmod__"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": ".gitmodules",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/.gitmodules",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/.gitmodules",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/.gitmodules?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -1,4 +0,0 @@\n-[submodule \"omni-compiler\"]\n-\tpath = omni-compiler\n-\turl = https://github.com/omni-compiler/xcodeml-tools.git\n-\tbranch = master"
  },
  {
    "sha": "a127b50506b7dc4ac0a971884da9f3333be0b139",
    "filename": ".travis.yml",
    "status": "modified",
    "additions": 16,
    "deletions": 15,
    "changes": 31,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/.travis.yml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/.travis.yml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/.travis.yml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -57,32 +57,33 @@ matrix:\n         - ant\n         - ant-optional\n before_install:\n-- git submodule init\n-- git submodule update\n-- wget https://dl.bintray.com/sonarsource/SonarQube/org/sonarsource/scanner/cli/sonar-scanner-cli/3.2.0.1227/sonar-scanner-cli-3.2.0.1227-linux.zip\n-- unzip sonar-scanner-cli-3.2.0.1227-linux.zip\n-- export PATH=$PATH:$TRAVIS_BUILD_DIR/sonar-scanner-3.2.0.1227-linux/bin\n-- sonar-scanner --help\n+- wget https://dl.bintray.com/sonarsource/SonarQube/org/sonarsource/scanner/cli/sonar-scanner-cli/4.6.0.2311/sonar-scanner-cli-4.6.0.2311-linux.zip\n+- unzip sonar-scanner-cli-4.6.0.2311-linux.zip\n+- export PATH=$PATH:$TRAVIS_BUILD_DIR/sonar-scanner-4.6.0.2311-linux/bin\n+- sonar-scanner --version\n before_script:\n - export FC=$FC_COMPILER\n - export CC=$CC_COMPILER\n - export CXX=$CXX_COMPILER\n - export OMPI_CC\n - export OMPI_FC\n script:\n-- mkdir build\n-- cd build\n-- cmake -DCMAKE_INSTALL_PREFIX=$HOME/claw ..\n-- make -j\n-- make install\n-- make -j clean-transformation transformation test\n-- cd -\n-- \"./scripts/check_license\"\n-- \"./scripts/check_author\"\n+- export CLAW_SRC=$(pwd)\n+- python \"./scripts/check_author_license.py\"\n - \"./scripts/check_lib_split\"\n - cd scripts\n - \"./run.shellcheck\"\n - cd ..\n+- mkdir build\n+- cd build\n+- cmake -S ${CLAW_SRC} -DCMAKE_INSTALL_PREFIX=$HOME/claw ..\n+- make -j\n+- make install\n+- export CLAW_BUILD=${CLAW_SRC}/build\n+- export CLAW_HOME=${CLAW_BUILD}/home\n+- export OMNI_HOME=${CLAW_BUILD}/home\n+- make run-tests\n+- cd ${CLAW_SRC}\n - if [[ \"${TRAVIS_PULL_REQUEST_SLUG}\" == \"claw-project/claw-compiler\" ]]; then sonar-scanner -Dsonar.login=$SONAR_TOKEN; fi\n - if [[ \"${TRAVIS_REPO_SLUG}\" == \"claw-project/claw-compiler\" ]] && [[ \"${TRAVIS_PULL_REQUEST_SLUG}\" == \"\" ]]; then sonar-scanner -Dsonar.login=$SONAR_TOKEN; fi\n notifications:"
  },
  {
    "sha": "3405ecbccef03ca0630af791f7774fffd203df2b",
    "filename": "CMakeLists.txt",
    "status": "modified",
    "additions": 193,
    "deletions": 21,
    "changes": 214,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/CMakeLists.txt",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/CMakeLists.txt",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/CMakeLists.txt?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -14,17 +14,33 @@ list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/module\")\n # Enable needed modules and languages\n enable_language(Fortran)\n enable_testing()\n-find_package(Ant 1.7.1 REQUIRED)\n+\n find_package(Java 1.8 REQUIRED)\n+# Warning!!! After finding the first version, find_package(Java) does NOT look for others. CMAKE_FIND_PACKAGE_SORT_ORDER\n+# and CMAKE_FIND_PACKAGE_SORT_DIRECTION have no effect. To override the \"default\" java version, set cmake variable\n+# JAVA_HOME to desired java installation path.\n+\n+if(Java_VERSION_MAJOR EQUAL 1)\n+  if(Java_VERSION_MINOR LESS 8)\n+    message(FATAL_ERROR \"Java ${Java_VERSION_STRING} is not supported\")\n+  endif()\n+else()\n+  if((Java_VERSION_MAJOR LESS 8) OR (Java_VERSION_MAJOR GREATER 13) )\n+    message(FATAL_ERROR \"Java ${Java_VERSION_STRING} is not supported\")\n+  endif()\n+endif()\n+\n+find_package(Ant 1.8 REQUIRED)\n+\n include(ExternalProject)\n include(cmake/git.cmake)\n include(cmake/omni_compiler.cmake)\n \n+option(BUILD_OMNI_XCODEML_TOOLS \"Build OMNI Compiler Tools\" ON)\n+option(ADD_OMNI_XCODEML_TOOLS_TO_INSTALL \"Copy OMNI Compiler Tools to CLAW install directory\" ON)\n # Load all variables from file\n include(properties.cmake)\n \n-set(OMNI_COMPILER_SUBMODULE ${CMAKE_SOURCE_DIR}/omni-compiler)\n-\n if(OFFLINE)\n   message(STATUS \"CLAW Compiler offline compilation enabled\")\n endif()\n@@ -33,10 +49,6 @@ endif()\n git_get_rev_hash(${CMAKE_SOURCE_DIR} CLAWFC_GIT_HASH)\n message(STATUS \"CLAW Compiler version ${CLAWFC_GIT_HASH}\")\n \n-# Recover commit hash for the OMNI Compiler subumodule\n-git_get_rev_hash(${OMNI_COMPILER_SUBMODULE} OMNI_GIT_HASH)\n-message(STATUS \"OMNI Compiler version ${OMNI_GIT_HASH}\")\n-\n # Set the default install directory\n if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n   set(\n@@ -60,8 +72,13 @@ elseif(\"${CMAKE_Fortran_COMPILER_ID}\" MATCHES \"Intel\")\n   include(compiler/intel.cmake)\n elseif(\"${CMAKE_Fortran_COMPILER_ID}\" MATCHES \"NAG\")\n   include(compiler/nag.cmake)\n-else()\n+elseif(\"${CMAKE_Fortran_COMPILER_ID}\" MATCHES \"GNU\")\n   include(compiler/gnu.cmake)\n+else()\n+message(\n+  FATAL_ERROR\n+  \"Unsupported Fortran compiler ${CMAKE_Fortran_COMPILER_ID}\"\n+)\n endif()\n \n message(\n@@ -71,41 +88,196 @@ message(\n \n # Option to build OMNI Compiler as a submodule. Should be ON as CLAW uses a\n # specific version of OMNI Compiler at the moment.\n-option(BUILD_OMNI \"Build OMNI Compiler\" ON)\n option(OMNI_ENABLE_GNU_INTRINSIC \"OMNI Compiler - Enable GNU intrinsic extensions\" ON)\n \n if(OMNI_ENABLE_GNU_INTRINSIC)\n   list(APPEND OMNI_CONF_OPTION \"--enable-gnu-extension\")\n endif()\n \n+add_custom_target(create_int_install_dir ALL\n+    COMMAND ${CMAKE_COMMAND} -E make_directory ${INT_CLAW_HOME})\n+\n+install(\n+    DIRECTORY ${INT_CLAW_HOME}/\n+    DESTINATION ${CMAKE_INSTALL_PREFIX}\n+    FILE_PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)\n+install(CODE \"execute_process(COMMAND ${Ant_EXECUTABLE} -f ${ANT_SOLUTION} ${ANT_FLAGS} -Dclaw.properties.dir=${CX2T_PROPERTIES_DIR} install-driver)\"\n+)\n+\n # Build OMNI compiler\n-if(BUILD_OMNI)\n+if(BUILD_OMNI_XCODEML_TOOLS)\n+  find_package(LibXml2 REQUIRED)\n+  get_filename_component(LIBXML2_LIB_DIR ${LIBXML2_LIBRARY} DIRECTORY)\n+  set(OMNI_COMPILER_SRC_DIR ${CMAKE_BINARY_DIR}/omni-compiler)\n   ExternalProject_Add(\n     omni-compiler\n-    SOURCE_DIR ${OMNI_COMPILER_SUBMODULE}\n+    GIT_REPOSITORY ${OMNI_GIT_REPOSITORY}\n+    GIT_TAG ${OMNI_GIT_COMMIT_HASH}\n+    GIT_SHALLOW ON\n+    GIT_PROGRESS ON\n+    GIT_REMOTE_UPDATE_STRATEGY CHECKOUT\n+    SOURCE_DIR ${OMNI_COMPILER_SRC_DIR}\n+    INSTALL_DIR ${OMNI_HOME}\n     CONFIGURE_COMMAND\n-      CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}\n-      FC=${CMAKE_Fortran_COMPILER} JAVAC=${Java_JAVAC_EXECUTABLE}\n-      CFLAGS=${CMAKE_C_FLAGS}\n-      ${OMNI_COMPILER_SUBMODULE}/configure\n-      --prefix=${CMAKE_INSTALL_PREFIX} ${OMNI_TARGET} ${OMNI_CONF_OPTION}\n-      ${OMNI_MPI_CC} ${OMNI_MPI_FC}\n+      CC=${CMAKE_C_COMPILER}\n+      ${OMNI_COMPILER_SRC_DIR}/configure\n+      --without-native-fortran-compiler\n+      --with-libxml2-include=${LIBXML2_INCLUDE_DIR}\n+      --with-libxml2-lib=${LIBXML2_LIB_DIR}\n+      --with-java=${Java_JAVA_EXECUTABLE}\n+      --with-javac=${Java_JAVAC_EXECUTABLE}\n+      --with-jar=${Java_JAR_EXECUTABLE}\n+      --with-version-tag=${OMNI_GIT_COMMIT_HASH}\n+      --prefix=${OMNI_HOME}\n+      ${OMNI_CONF_OPTION}\n+    BUILD_IN_SOURCE ON\n     BUILD_COMMAND make -j 1 # OMNI build is not thread safe\n-    BUILD_IN_SOURCE 1\n+    INSTALL_COMMAND make install\n   )\n-endif()\n+else()\n+  function(get_xcodemltools_version_tag _output_version_tag)\n+      execute_process(\n+        COMMAND ${OMNI_F_FRONT} --version-tag\n+        ERROR_VARIABLE output_version_tag\n+        OUTPUT_VARIABLE output_version_tag\n+        RESULT_VARIABLE return_code\n+        OUTPUT_STRIP_TRAILING_WHITESPACE\n+      )\n+      if(NOT(${return_code} EQUAL \"0\"))\n+            message(FATAL_ERROR \"get_omni_version_tag failed\")\n+      endif()\n+      set(${_output_version_tag} ${output_version_tag} PARENT_SCOPE)\n+  endfunction()\n+  get_xcodemltools_version_tag(xcodemltools_version)\n+  if(NOT (${xcodemltools_version} STREQUAL ${OMNI_VERSION_TAG}))\n+    message(FATAL_ERROR \"OMNI XCodeMLTools version tag \\\"${xcodemltools_version}\\\" does not match expected \\\"${OMNI_VERSION_TAG}\\\"\")\n+  endif()\n+  add_custom_target(omni-compiler\n+    COMMENT \"Checking OMNI XCodeMLTools version\"\n+  )\n+endif(BUILD_OMNI_XCODEML_TOOLS)\n \n # translator library and xcodeml manipulation library\n add_subdirectory(cx2t)\n \n+add_custom_target(build-claw-solution ALL)\n # compiler driver\n add_subdirectory(driver)\n \n+add_custom_target(generate-xmods)\n # generate generic .xmod files\n add_subdirectory(modules)\n \n-# Build functional test\n-add_subdirectory(test)\n+add_subdirectory(tests_runner)\n \n # Build documentation\n add_subdirectory(documentation)\n+\n+set(ADDITIONAL_CLEAN_FILES \"\")\n+LIST(APPEND ADDITIONAL_CLEAN_FILES ${INT_CLAW_HOME})\n+SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES \"${ADDITIONAL_CLEAN_FILES}\")\n+\n+if(OFFLINE)\n+  set(DISABLE_RESOLVE \"-Doffline=true\")\n+else()\n+  set(DISABLE_RESOLVE \"-Doffline=false\")\n+endif()\n+\n+add_dependencies(build-claw-solution omni-compiler generate-xmods)\n+add_custom_command(\n+  TARGET build-claw-solution\n+  COMMAND ${Ant_EXECUTABLE} -f ${ANT_SOLUTION}\n+  ${ANT_FLAGS}\n+  -Dclaw.properties.dir=${CX2T_PROPERTIES_DIR}\n+  COMMENT \"Building CLAW solution\"\n+)\n+\n+set(RUN_TEST \"${CMAKE_SOURCE_DIR}/scripts/run-test.sh\")\n+set(RUN_ANT_CMD ${Ant_EXECUTABLE} -f ${ANT_SOLUTION} ${ANT_FLAGS} -Dclaw.properties.dir=${CX2T_PROPERTIES_DIR})\n+\n+add_custom_target(run-driver-unit-tests)\n+add_dependencies(run-driver-unit-tests build-claw-solution)\n+add_custom_command(\n+  TARGET run-driver-unit-tests\n+  COMMAND bash \"${RUN_TEST}\" \\\"${RUN_ANT_CMD} run-driver-unit-tests\\\" \"${CLAWFC_UT_REPORT}\"\n+  COMMENT \"Running CLAWFC unit-tests\"\n+)\n+\n+add_custom_target(build-driver-unit-tests)\n+add_dependencies(build-driver-unit-tests build-claw-solution)\n+add_custom_command(\n+  TARGET build-driver-unit-tests\n+  COMMAND ${RUN_ANT_CMD} build-driver-unit-tests\n+  COMMENT \"Building CLAWFC unit-tests\"\n+)\n+\n+add_custom_target(run-driver-tests)\n+add_dependencies(run-driver-tests build-claw-solution)\n+add_custom_command(\n+  TARGET run-driver-tests\n+  COMMAND bash \"${RUN_TEST}\" \\\"${RUN_ANT_CMD} run-driver-tests\\\" \"${CLAWFC_TESTS_REPORT}\"\n+  COMMENT \"Running CLAWFC tests\"\n+)\n+\n+add_custom_target(build-driver-tests)\n+add_dependencies(build-driver-tests build-claw-solution)\n+add_custom_command(\n+  TARGET build-driver-tests\n+  COMMAND ${RUN_ANT_CMD} build-driver-tests\n+  COMMENT \"Building CLAWFC tests\"\n+)\n+\n+add_custom_target(run-cx2t-unit-tests)\n+add_dependencies(run-cx2t-unit-tests build-claw-solution)\n+add_custom_command(\n+  TARGET run-cx2t-unit-tests\n+  COMMAND ${RUN_ANT_CMD} run-cx2t-unit-tests\n+  COMMENT \"Running CX2T unit tests\"\n+)\n+\n+add_custom_target(build-cx2t-unit-tests)\n+add_dependencies(build-cx2t-unit-tests build-claw-solution)\n+add_custom_command(\n+  TARGET build-cx2t-unit-tests\n+  COMMAND ${RUN_ANT_CMD} build-cx2t-unit-tests\n+  COMMENT \"Building CX2T unit-tests\"\n+)\n+\n+add_custom_target(run-claw-tests)\n+add_dependencies(run-claw-tests build-claw-solution)\n+add_custom_command(\n+  TARGET run-claw-tests\n+  COMMAND bash \"${RUN_TEST}\" \\\"${RUN_ANT_CMD} run-claw-tests\\\" \"${CLAW_TESTS_REPORT}\"\n+  COMMENT \"Running CLAW tests\"\n+)\n+\n+add_custom_target(build-claw-tests)\n+add_dependencies(build-claw-tests build-claw-solution)\n+add_custom_command(\n+  TARGET build-claw-tests\n+  COMMAND ${RUN_ANT_CMD} build-claw-tests\n+  COMMENT \"Building CLAW tests\"\n+)\n+\n+add_custom_target(run-tests)\n+add_dependencies(run-tests run-cx2t-unit-tests run-driver-unit-tests run-driver-tests run-claw-tests)\n+\n+add_custom_target(build-tests)\n+add_dependencies(build-tests build-cx2t-unit-tests build-driver-unit-tests build-driver-tests build-claw-tests)\n+\n+option(GENERATE_ECLIPSE_IDE_PROJECTS \"Generate Eclipse IDE projects\" ON)\n+if(GENERATE_ECLIPSE_IDE_PROJECTS)\n+  message(STATUS \"Generating Eclipse projects\")\n+  foreach(PROJECT_NAME cx2t cx2t-unit-tests clawfc clawfc-unit-tests clawfc-tests claw-tests)\n+      file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/ide/eclipse/${PROJECT_NAME})\n+      configure_file(${CMAKE_SOURCE_DIR}/resources/eclipse/${PROJECT_NAME}.project.in\n+                     ${CMAKE_BINARY_DIR}/ide/eclipse/${PROJECT_NAME}/.project\n+                     @ONLY)\n+      configure_file(${CMAKE_SOURCE_DIR}/resources/eclipse/${PROJECT_NAME}.classpath.in\n+                     ${CMAKE_BINARY_DIR}/ide/eclipse/${PROJECT_NAME}/.classpath\n+                     @ONLY)\n+      configure_file(${CMAKE_SOURCE_DIR}/resources/eclipse/${PROJECT_NAME}.ant.builder.in\n+                     ${CMAKE_BINARY_DIR}/ide/eclipse/${PROJECT_NAME}/.externalToolBuilders/ant.launch\n+                     @ONLY)\n+  endforeach()\n+endif()"
  },
  {
    "sha": "992330b936445d8a57d74a307aaa7b84ee539a58",
    "filename": "INSTALL.md",
    "status": "modified",
    "additions": 33,
    "deletions": 43,
    "changes": 76,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/INSTALL.md",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/INSTALL.md",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/INSTALL.md?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -5,28 +5,28 @@\n The CLAW Compiler has the followings dependencies:\n * Java 1.8 or greater\n * Ant 1.9 or greater\n-* yacc, lex (For OMNI Compiler)\n-* C/C++ compiler (supports C99) (For OMNI Compiler)\n-* Fortran compiler (supports Fortran 90) (For OMNI Compiler)\n-* libxml2 (For OMNI Compiler)\n * cmake and make\n \n+Additional dependencies, if built with XCodeML tools from OMNI Compiler: \n+* yacc, lex\n+* C/C++ compiler (supports C99)\n+* Fortran compiler (supports Fortran 90)\n+* libxml2\n+\n \n \n ### Build & install\n \n-CLAW Compiler (clawfc) is built on the top of the [OMNI Compiler](http://www.omni-compiler.org).\n-OMNI Compiler is packaged and built together with the CLAW Compiler.\n+CLAW Compiler (clawfc) uses XCodeML tools (Fortran frontend and backend) from [OMNI Compiler](http://www.omni-compiler.org).\n+They can be packaged and built together with the CLAW Compiler.\n \n \n-To build the and install the CLAW Compiler, use the followings commands.\n+To build and install the CLAW Compiler, use the following commands.\n \n In source build:\n ```bash\n git clone git@github.com:claw-project/claw-compiler.git\n cd claw-compiler\n-git submodule init\n-git submodule update --remote\n cmake -DCMAKE_INSTALL_PREFIX=<install_path> .\n make\n make install\n@@ -35,20 +35,33 @@ make install\n Out-of-source build:\n ```bash\n git clone git@github.com:claw-project/claw-compiler.git\n-cd claw-compiler\n-git submodule init\n-git submodule update --remote\n-mkdir build\n-cd build\n-cmake -DCMAKE_INSTALL_PREFIX=<install_path> ..\n+export SRC_DIR=\"$(pwd)/claw-compiler\"\n+mkdir <build_path>\n+cd <build_path>\n+cmake -DCMAKE_INSTALL_PREFIX=<install_path> -S ${SRC_DIR}\n make\n make install\n ```\n \n ##### Specific Java version\n If you have several Java compiler version installed on your machine, you must\n-export the `JAVA_HOME` environment variable. This information will be picked\n-by the build system for the entire project.\n+set the cmake variable `JAVA_HOME` environment variable. E.g. \n+```cmake -DJAVA_HOME=<install_path> ... ```\n+\n+##### External XCodeML tools at build-time\n+It is possible to build CLAW Compiler with already installed version of XCodeML tools. To do this, \n+set the cmake option `BUILD_OMNI_XCODEML_TOOLS` to `OFF` and specify the path to the XCodeML tools installation \n+directory in cmake variable `OMNI_HOME`.\n+```cmake -DBUILD_OMNI_XCODEML_TOOLS=OFF -DOMNI_HOME=<xcodeml_tools_install_dir> ... ```\n+\n+Note however that each version of the CLAW Compiler is tightly bound to the specific version of the XCodeML tools, \n+therefore only the version from [CLAW repository](https://github.com/claw-project/xcodeml-tools) with the same GIT commit\n+as the one specified in cmake variable 'OMNI_GIT_COMMIT_HASH' will be compatible.\n+\n+##### External XCodeML tools at runtime\n+By default CLAW Compiler will add XCodeML tools to its install directory. This can be disabled by setting cmake \n+option `ADD_OMNI_XCODEML_TOOLS_TO_INSTALL` to `OFF`. Additionally, runtime path to the XCodeML tools can be overridden\n+by setting the environment variable `OMNI_HOME` before running the CLAW compiler.\n \n ##### Offline build steps\n If your system has no network connection to the Internet, you need to get the\n@@ -67,30 +80,9 @@ to your target system and add `OFFLINE` as a CMake option as follows:\n cmake -DOFFLINE=ON .\n ```\n \n-##### Switch git submodule from `https` to `ssh`\n-OMNI Compiler is referenced to this repository as a git submodule. The link\n-to the repository is the `https` link to the official OMNI repository. If your\n-network only allow ssh connection, you should change the `.gitmodules` file at\n-the root of this repo.\n-\n-Git submodule configuration with `https` link to the OMNI Compiler repository:\n-```\n-[submodule \"omni-compiler\"]\n-\tpath = omni-compiler\n-\turl = https://github.com/omni-compiler/omni-compiler.git\n-\tbranch = master\n-```\n-\n-Git submodule configuration with `ssh` link to the OMNI Compiler repository:\n-```\n-[submodule \"omni-compiler\"]\n-\tpath = omni-compiler\n-\turl = git@github.com:omni-compiler/omni-compiler.git\n-\tbranch = master\n-```\n-\n-This must be done before the execution of the `git submodule` commands.\n-\n+##### Switch git checkout from `https` to `ssh`\n+If you are building without external OMNI XCodeML tools and your network only allow ssh connection, set the cmake \n+variable `OMNI_GIT_REPOSITORY` to `git@github.com:claw-project/xcodeml-tools.git`\n \n ##### Specific steps for Piz Daint\n On Piz Daint, specific steps as to be performed in order to have a successful\n@@ -106,8 +98,6 @@ following commands:\n ```bash\n git clone git@github.com:claw-project/claw-compiler.git\n cd claw-compiler\n-git submodule init\n-git submodule update --remote\n mkdir build\n cd build\n FC=ftn CC=cc CXX=CC cmake -DCMAKE_INSTALL_PREFIX=<install_path> -DOMNI_MPI_FC=\"MPI_FC=ftn\" -DOMNI_MPI_CC=\"MPI_CC=cc\" .."
  },
  {
    "sha": "415b634390f193c56d957cc0bb60e22b0186ba76",
    "filename": "LICENSE",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/LICENSE",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/LICENSE",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/LICENSE?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -1,6 +1,6 @@\n BSD 2-Clause License\n \n-Copyright (c) 2015-2019 CLAW Project: MeteoSwiss, ETH Zurich\n+Copyright (c) 2015-2021 CLAW Project: MeteoSwiss, ETH Zurich\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without"
  },
  {
    "sha": "b8c27fd2d20c38e19f7fd0c6424c807d22bfab9c",
    "filename": "README.dev.md",
    "status": "modified",
    "additions": 452,
    "deletions": 89,
    "changes": 541,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/README.dev.md",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/README.dev.md",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/README.dev.md?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -1,31 +1,337 @@\n-# CLAW Compiler development\n+#Build system\n+Is based on [CMake](https://cmake.org) and [Apache Ant](https://ant.apache.org), where Cmake acts as a wrapper for Ant.\n \n-Useful information about the development of the CLAW Compiler are given\n-on this page.\n+CMake is responsible for: \n+* building main dependency [xcodeml-tools](https://github.com/claw-project/xcodeml-tools);\n+* getting info about the platform, compilers and installed software;\n+* processing user-specified build parameters;\n+* setting up out of source build;\n+* generating Eclipse IDE projects;\n+* installation;\n+* command-line interaction with build-system.\n \n-### Developer's guide\n-A guide is available under `documentation/developer`.\n+Ant-based solution is responsible for:\n+* obtaining 3rdparty java libraries;\n+* compiling java sources;\n+* generating java libraries (JARs);\n+* running tests from command-line.\n+\n+There are 2 ways to interact with the build system:\n+1. command-line interface (CLI);\n+  * initially CMake is used to generate out-of-source build system based on GNU Make (on linux platforms);\n+  * GNU Make commands can be used to run all the important functions, such as build, test and installation;\n+2.\tintegrated development environment (IDE)\n+  * initially CMake is used to configure parts of the source and build system which depend on the platform and user input);\n+  * Eclipse projects can be used for IDE-based development as well as running some of the functions, such as build and test. However, installation can only be performed with CLI.\n+##CMake\n+<table>\n+<thead>\n+  <tr>\n+    <th colspan=\"2\">Important files</th>\n+  </tr>\n+  <tr>\n+    <th>File</th>\n+    <th>Description</th>\n+  </tr>\n+</thead>\n+<tbody>\n+  <tr>\n+    <td>\n+\n+[properties.cmake](properties.cmake)\n+    </td>\n+    <td>Collection of variables with build information</td>\n+  </tr>\n+  <tr>\n+    <td>\n+\n+[compiler/cray.cmake](compiler/cray.cmake)\n+    </td>\n+    <td rowspan=\"5\">Compiler-specific options</td>\n+  </tr>\n+  <tr>\n+    <td>\n+\n+[compiler/gnu.cmake](compiler/gnu.cmake)\n+    </td>\n+  <tr>\n+    <td>\n+\n+[compiler/intel.cmake](compiler/intel.cmake)\n+    </td>\n+  <tr>\n+    <td>\n+\n+[compiler/nag.cmake](compiler/nag.cmake)\n+    </td>\n+  <tr>\n+    <td>\n+\n+[compiler/pgi.cmake](compiler/pgi.cmake)\n+    </td>\n+  </tr>\n+  <tr>\n+    <td>\n+\n+[CMakeLists.txt](CMakeLists.txt)\n+    </td>\n+    <td>Most of the setup and functionality</td>\n+  </tr>\n+  <tr>\n+    <td>Other CMakeLists.txt files</td>\n+    <td>Mostly deal with inserting build & platform specific data into source files.</td>\n+  </tr>\n+</tbody>\n+</table>\n+\n+<table>\n+<thead>\n+  <tr>\n+    <th colspan=\"2\">Options</th>\n+  </tr>\n+  <tr>\n+    <th>Name</th>\n+    <th>Description</th>\n+  </tr>\n+</thead>\n+<tbody>\n+  <tr>\n+    <td> JAVA_HOME </td>\n+    <td> Path to Java installation </td>\n+  </tr>\n+  <tr>\n+    <td> CMAKE_INSTALL_PREFIX </td>\n+    <td> Path to target install directory </td>\n+  </tr>\n+  <tr>\n+    <td> ADD_OMNI_XCODEML_TOOLS_TO_INSTALL </td>\n+    <td> Switch for bundling OMNI with CLAW </td>\n+  </tr>\n+  <tr>\n+    <td> BUILD_OMNI_XCODEML_TOOLS </td>\n+    <td> Switch to enable OMNI build </td>\n+  </tr>\n+  <tr>\n+    <td> OMNI_HOME </td>\n+    <td> Path to existing OMNI installation </td>\n+  </tr>\n+</tbody>\n+</table>\n+\n+As a guideline, avoid Cmake usage, apart from where it is absolutely necessary. Use Ant instead. \n+\n+##GNU Make CLI\n+Cmake generates GNU Make-based build system, which provides CLI.\n+<table>\n+<thead>\n+  <tr>\n+    <th colspan=\"2\">Commands</th>\n+  </tr>\n+  <tr>\n+    <th>Cmd</th>\n+    <th>Description</th>\n+  </tr>\n+</thead>\n+<tbody>\n+  <tr>\n+    <td> \n+\n+```shell\n+make \n+```\n+</td>\n+    <td> Build CLAW (and optionally OMNI) </td>\n+  </tr>\n+  <tr>\n+    <td> \n+\n+```shell\n+make install \n+```\n+</td>\n+    <td> Install CLAW (and optionally bundled OMNI) </td>\n+  </tr>\n+  <tr>\n+    <td> \n+\n+```shell\n+make generate-xmods\n+```\n+</td>\n+    <td> Generate xmodules for Fortran modules that are supposed to be included with the compiler. This is a prerequisite for running claw-tests. </td>\n+  </tr>\n+  <tr>\n+    <td> \n+\n+```shell\n+make run-driver-unit-tests\n+```\n+</td>\n+    <td rowspan=\"4\"> Run corresponding test project </td>\n+  </tr>\n+  <tr>\n+    <td> \n+\n+```shell\n+make run-driver-tests\n+```\n+</td>\n+  </tr>\n+  <tr>\n+    <td> \n+\n+```shell\n+make run-cx2t-unit-test\n+```\n+</td>\n+  </tr>\n+  <tr>\n+    <td> \n+\n+```shell\n+smake run-claw-tests\n+```\n+</td>\n+  </tr>\n+\n+  <tr>\n+    <td> \n+\n+```shell\n+make run-tests\n+```\n+</td>\n+    <td> Run all tests </td>\n+  </tr>\n+</tbody>\n+</table>\n+\n+##Ant solution\n+While CLI is based on CMake and GNU Make, internally most of the build system functionality is implemented with \n+Apache Ant-based projects. There is a separate project for each distinct part of CLAW. Additionally all of these have \n+a binding to top-level project. Additionally, the common build-specific information and parameters is concentrated in \n+the file [&lt;build dir&gt;/cx2t/common/claw.properties](cx2t/claw.properties.in) , which mostly mirrors variables from\n+[properties.cmake](properties.cmake). Majority of the projects include this file.\n+<table>\n+<thead>\n+  <tr>\n+    <th colspan=\"3\">Projects</th>\n+  </tr>\n+  <tr>\n+    <th>Name</th>\n+    <th>Path</th>\n+    <th>Description</th>\n+  </tr>\n+</thead>\n+<tbody>\n+  <tr>\n+    <td>cx2t</td>\n+    <td>\n+\n+[cx2t/src/build.xml](cx2t/src/build.xml)\n+    </td>\n+    <td>CLAW library</td>\n+  </tr>\n+  <tr>\n+    <td>fetch-3rdparty-dependencies</td>\n+    <td>\n+\n+[cx2t/common-targets.xml](cx2t/common-targets.xml)\n+    </td>\n+    <td>Resolves dependencies on 3rdparty libraries</td>\n+  </tr>\n+  <tr>\n+<td>claw-unit-tests</td>\n+    <td>\n+\n+[cx2t/unittest/build.xml](cx2t/unittest/build.xml)\n+    </td>\n+    <td>CLAW unit tests</td>\n+  </tr>\n+  <tr>\n+    <td>clawfc</td>\n+    <td>\n+\n+[driver/src/build.xml](driver/src/build.xml)\n+    </td>\n+    <td>CLAW driver</td>\n+  </tr>\n+  <tr>\n+    <td>clawfc-tests</td>\n+    <td>\n+\n+[driver/tests/build.xml](driver/tests/build.xml)\n+    </td>\n+    <td>CLAW driver tests</td>\n+  </tr>\n+  <tr>\n+    <td>clawfc-unit-tests</td>\n+    <td>\n+\n+[driver/unittests/build.xml](driver/unittests/build.xml)\n+    </td>\n+    <td>CLAW driver unit tests</td>\n+  </tr>\n+  <tr>\n+    <td>claw-tests</td>\n+    <td>\n+\n+[tests_runner/build.xml](tests_runner/build.xml)\n+    </td>\n+    <td>CLAW tests</td>\n+  </tr>\n+  <tr>\n+    <td>solution</td>\n+    <td>\n+\n+[ant-solution.xml](ant-solution.xml)\n+    </td>\n+    <td>Top-level project</td>\n+  </tr>\n+</tbody>\n+</table>\n+\n+##IDE development\n+Eclipse Is fully supported, tested with version 4.14. Each Ant project has a corresponding Eclipse project. They can be \n+imported into IDE from <build_dir>/ide/eclipse. Builds started from IDE will use the Ant build system projects \n+internally. Note that, it always uses Java installation that was specified during configuration with CMake, which does \n+not necessarily match the Java installation used by Eclipse itself. This may lead to problems during debugging, so it is\n+recommended to ensure that the versions match. This can be set centrally in Eclipse settings for all the projects or \n+individually in “project/properties/java compiler/Enable Project specific settings/JDK compliance/use compliance \n+from execution environment…”.\n+\n+It should be further noted that these projects are not generated by CMake, but rather are produced by configuring \n+template files with CMake variables. As a consequence, each change in the projects structure and dependencies will \n+require manual adjustments of the template files. These can be found in [resources/eclipse](resources/eclipse). \n+\n+#Java Coding style\n+Code should be compatible with automated formatting performed by Eclipse IDE. The rules are defined in file \n+[resources/eclipse/java-coding-style.xml](resources/eclipse/java-coding-style.xml), which can be imported into IDE. Note\n+that by default Java Formatter will compress multiline comments. To avoid that, prefix them with “/*-”.\n \n-### Coding Style Guide\n Indent with spaces. NO tabs!\n \n-#### Java code\n-* An IDEA format configuration is available here:\n-[claw_code_style_idea.xml](./cx2t/config/claw_code_style_idea.xml)\n-If IDEA IntelliJ is not used, the coding style should reflect this\n-configuration.\n+#Testing\n+All tests are written [JUnit framework](https://junit.org/junit4/). Collections of tests are organized into projects \n+by topic, which are compiled into JARs using Ant. These can be launched either from cmdline using CMake or with Eclipse,\n+where it is possible to attach a debugger Additionally, all tests, with exception of claw-unit-tests, have a tests runner\n+which has an option of running individual testcases, by running the corresponding JAR with 2 arguments \n+```<full name of the test class> <name of the test method>```\n \n-#### Bash scripts\n+# Developer's guide\n+A guide is available under `documentation/developer`.\n+\n+## Bash scripts\n In general, all bash scripts written for the CLAW Compiler projects\n-follow those guidelines: https://google.github.io/styleguide/shell.xml\n+follow these [guidelines](https://google.github.io/styleguide/shell.xml).\n \n In addition, all scripts are tested with `shellcheck` and must pass the tested\n without errors or warnings. So warnings might be disable where it make sense\n for the correctness of the script.\n \n-The main word is: `Use common sense and BE CONSISTENT.`\n+**Note: do not add any new Bash scripts, unless absolutely unavoidable.**\n \n-### Git hooks\n+## Git hooks\n * Git hooks present in the `./scripts/git_hooks/` directory should be enabled\n   in your local checkout. To enable them, you have to symlink them in the\n   `./.git/hooks/` directory.\n@@ -35,93 +341,150 @@ cd .git/hooks\n ln -s ../../scripts/pre-commit pre-commit\n ```\n \n-Make sure the the file is executable.\n+Make sure the file is executable.\n \n-### Helper scripts\n-The `scripts` directory contains helper scripts for the development and review\n+## Helper scripts\n+The [scripts](scripts) directory contains helper scripts for the development and review\n process of the project.\n \n-#### Updating the OMNI Compiler submodule\n-To update the OMNI Compiler submodule to the latest version, the developer can\n-run `./scripts/update_omni` in its local repository from the master branch.\n-The script will automatically do the following:\n-* Create a dedicated branch name `omni/<short_hash>`.\n-* Update the submodule to the current master.\n-* Add and commit the new submodule.\n-* Output the pull request message.\n+# Driver specification\n+## Entities\n+_**_Fortran include file_**_\n+```\n+    contains ascii text of any kind \n+```\n+**Fortran source file**\n+```\n+    contains ascii text of any kind \n+```\n+**Preprocessed Fortran source file**\n+```\n+    contains valid ascii Fortran source with no preprocessor or Fortran include statements\n+```\n+**Fortran Program Unit Information (UnitInfo)**\n+```\n+    type (Module/Program/Function/Subroutine)\n+        position in Preprocessed Fortran source file\n+            names and positions of used modules\n+            whether claw is used\n+```\n+**Fortran File Unit Information (FileUnitInfo)**\n+```\n+    list of UnitInfo for units contained in preprocessed source file.\n+    List of paths to include files\n+    Path to source file\n+\tPath to preprocessed source file\n+\n+UnitInfo is dependent on:\n+\tFortran source file\n+\tFortran include files [referenced in the source file]\n+```\n+\t\n+**Xmod file**\n+```\n+\tContains XCodeML header for one Fortran module\n+```\n+\n+**Xast file**\n+```\n+\tContains XCodeML AST information for one Fortran program unit\n+```\n \n-### Testing\n+**Output file**\n+```\n+\tcontains Fortran Program Unit sources\n+\t\tsome, transformed by claw according to input cfg\n+\t\tothers copied over from preprocessed source \n+```\n+##Algorithm\n+```\n+Verify input options\n+\tsome combinations are not allowed\n+\tsome combinations require other options\n+Verify existence of input files and directories\n+Verify that input files don't have identical names (even with different file paths)\n+\t\n+Process paths of input files \n+\tremove duplicates\n+\tresolve relative paths [against startup working dir]\n \n-#### Unit test with JUnit\n-Unit tests are set up using JUnit. Unit tests are built together with the\n-compiler if the corresponding JARs Dependencies are available.\n+Load all available FileUnitInfo files from input FileUnitInfo dirs [-BI]\n+\tDiscard those that reference non-existing or outdated:\n+\t\tsource file \n+\t\tpreprocessed-source file\n+\t\tinclude files\n+\tDiscard those referencing files outside include source dirs [-SI]\n+\tDiscard duplicates (those that were generated for the same file)\n \n-JARs dependencies:\n+if not [--skip-pp] given\t\t\n+\tLoad preprocessed sources for files with valid FileUnitInfo\n+\tPreprocess all input files for which there is no valid FileUnitInfo [use include dirs -I]\n+\tResolve Fortran include statements [use include dirs -I]\n+else\n+\tafter this point, treat input files as if they are already preprocessed\n \n-*  `junit-4.2.jar`\n-*  `hamcrest-core-1.3.jar`\n+Output preprocessed input files [if output dir -PO given]\n+\tif identical, do not output\n \n-#### Transformation tests\n-Another category of test is focusing on the the correct application of each\n-transformation by the translator.\n+Scan [=Generate FileUnitInfo] input files that don't have corresponding FileUnitInfo\n \n-Those tests can be found under `/test/`\n+Output input files FileUnitInfo [if output dir -BO given]\n \n-To build all the tests, use the following command. All the tests are transformed\n-with the CLAW Compiler and then the original code as well as the\n-transformed are compiled with a standard Fortran compiler.\n+if [--print-claw-files] given\n+\tPrint names of input files using CLAW and exit\n \n-```bash\n-make test-suite\n-```\n+Scan include directories for fortran files [-SI]\n \n-This target is a combination of three independent targets:\n+if not --skip-pp given\n+\tPreprocess all include files for which there is no valid FileUnitInfo\n+\tApply ignore directive to preprocessed-sources\n+\tif output dir [-PO] given\n+\t\tOutput newly-generated preprocessed include files\n+else\n+\tafter this point, include files as if they are already preprocessed\n+For include files that don't have corresponding FileUnitInfo:\n+\tScan preprocessed include files for FileUnitInfo\n \n-```bash\n-make clean-transformation transformation test\n-```\n+Output include files FileUnitInfo [if output dir -BO given]\n \n-#### Developer's tools\n+Load all available xmod files [-MI]\n+\tDiscard duplicates (same name)\n+\tFor those that are referenced by FileUnitInfo\n+\t\tdiscard outdated\n \n-##### Translator development/debugging\n-To help the development and the debugging of the translator, an option is\n-available in the driver to dump the list of arguments to be used to execute it\n-in a standalone mode.\n+Sanity check the build (create build tree starting from units with CLAW in input files)\n+\n+For all input modules and their dependencies without xmod\n+\tGenerate xmods (in build tree order)\n+\n+Output all xmods in the build tree [if output dir -MO given]\n+\n+For all input units using CLAW [or all units if --force given]\n+\tApply ignore directive [if --skip-pp given]\n+\tApply verbatim directive to module source\n+\tGenerate XAST\n+if [--force] given\n+\tFor all input units NOT using CLAW, without XAST\n+\tGenerate XAST\n+\t\n+Output XAST, for all input units using CLAW [if output dir -XO given]\n+if [--force] given\n+\tOutput XAST, for all input units not using CLAW [if output dir -XO given]\n+\n+For all input units using CLAW\n+\tTranslate xast using CX2T translator\n+\t\n+Output translated XAST (TXAST), for all input units with XAST [if output dir -TXO given]\n+\n+For all input units with XAST\n+\tGenerate decompiled source\n+\tUndo the effects of ignore and verbatim\n+\t\n+Output decompiled source files, for all input modules using CLAW [if output dir -TSO given]\n+\t\n+For all input files\n+\tGenerate output file, which includes (in order they are encountered in input file)\n+\t\tdecompiled source for units which have one\n+\t\tpreprocessed source for the rest\n+```\n \n-The option can be used as follows with an example of outputs:\n-```bash\n-clawfc --dump-cx2t-args <other_args>\n--- [DEBUG] Arguments for cx2t:\n-   --config=/claw-compiler/driver/etc/claw-default.xml --schema=/claw-compiler/driver/etc/claw_config.xsd -w 80 -l  -M/claw-compiler/test/loops/fusion1  -o /tmp/__omni_tmp__65319/original_5f_code_f90_out.xml -f transformed_code.f90 /tmp/__omni_tmp__65319/original_5f_code_f90_in.xml\n-```\n-\n-It is recommended to use the `CLAW Compiler` with the `--debug-omni` option in order to keep the intermediate files and ease the development/debugging of the translator.\n-\n-### Driver\n-\n-The driver `clawfc` is driving the transformation process. This process is\n-defined as follows:\n-\n-*Fortran Code* -> **Preprocessor(1)** -> *Fortran Code* -> **F_Front (2)** ->\n-*XcodeML Code* -> **Cx2x(3)** -> *XcodeML Code* -> **omx2f(4)** -> *Fortran Code*\n-\n-###### Transformation process\n-1. The Fortran code is passed into the preprocessor with the corresponding\n-flags.\n-2. The fortran without preprocessing macros is passed into the OMNI Compiler\n-front-end and produce an intermediate file containing the XcodeML intermediate\n-representation of the Fortran code.\n-3. The XcodeML intermediate representation containing the dedicated language\n-directive is translated. The output is a translated XcodeML intermediate\n-representation.\n-4. The XcodeML intermediate representation is passed through the OMNI compiler\n-back-end to produce standard Fortran code.  \n-\n-###### Executables involved in the transformation process\n-* **Preprocessor**: preprocessor from the standard compiler available.\n-* **F_Front**: OMNI Compiler front-end. It converts Fortran code in XcodeML\n-intermediate representation.\n-* **Cx2x**: Dedicated claw directives translator. It translates XcodeML with\n-directives into a transformed XcodeML intermediate representation.\n-* **omx2f**: OMNI Compiler back-end. It converts XcodeML intermediate\n-representation into Fortran code."
  },
  {
    "sha": "33599026ba858fa48b020e8ed85a6b4edc9f1b36",
    "filename": "ant-solution.xml",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/ant-solution.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/ant-solution.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/ant-solution.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -0,0 +1,70 @@\n+<!--\n+ This file is released under terms of BSD license\n+ See LICENSE file for more information\n+ @author: Mikhail Zhigun\n+-->\n+\n+<!-- Combines all ant-projects used in CLAW -->\n+<project name=\"solution\" default=\"main\" basedir=\".\">\n+    <description>Build CLAW projects</description>\n+\n+    <!-- Value set externally-->\n+    <property name=\"claw.properties.dir\" value=\"\"/>\n+    <property file=\"${claw.properties.dir}/claw.properties\"/>\n+\n+    <target name=\"prepare-int-dir\">\n+      <mkdir dir=\"${int.home.dir}\"/>\n+      <mkdir dir=\"${int.home.dir}/bin\"/>\n+    </target>\n+\n+    <target name=\"fetch-deps\" depends=\"prepare-int-dir\">\n+        <ant antfile=\"${3rdparty-dependencies.proj}\"/>\n+    </target>\n+\n+    <target name=\"build-cx2t\" depends=\"fetch-deps\">\n+        <ant antfile=\"${cx2t.proj}\" />\n+    </target>\n+\n+    <target name=\"build-driver\" depends=\"build-cx2t\">\n+        <ant antfile=\"${driver.proj}\" />\n+    </target>\n+\n+    <target name=\"install-driver\">\n+        <ant antfile=\"${driver.proj}\" target=\"post-install\" />\n+    </target>\n+\n+    <!-- Default target -->\n+    <target name=\"main\" depends=\"prepare-int-dir, fetch-deps, build-cx2t, build-cx2t-unit-tests, build-driver\"/>\n+\n+    <target name=\"build-driver-tests\" depends=\"main\">\n+        <ant antfile=\"${driver-tests.proj}\" target=\"main\" />\n+    </target>\n+\n+    <target name=\"run-driver-tests\" depends=\"build-driver-tests\">\n+        <ant antfile=\"${driver-tests.proj}\" target=\"run\" />\n+    </target>\n+\n+    <target name=\"build-driver-unit-tests\" depends=\"main\">\n+        <ant antfile=\"${driver-ut.proj}\" target=\"main\" />\n+    </target>\n+\n+    <target name=\"run-driver-unit-tests\" depends=\"build-driver-unit-tests\">\n+        <ant antfile=\"${driver-ut.proj}\" target=\"run\" />\n+    </target>\n+\n+    <target name=\"build-cx2t-unit-tests\" depends=\"build-cx2t\">\n+        <ant antfile=\"${cx2t-unit-tests.proj}\" />\n+    </target>\n+\n+    <target name=\"run-cx2t-unit-tests\" depends=\"build-cx2t-unit-tests\">\n+        <ant antfile=\"${cx2t-unit-tests.proj}\" target=\"run\" />\n+    </target>\n+\n+    <target name=\"build-claw-tests\" depends=\"main\">\n+        <ant antfile=\"${claw-tests.proj}\" target=\"main\" />\n+    </target>\n+\n+    <target name=\"run-claw-tests\" depends=\"build-claw-tests\">\n+        <ant antfile=\"${claw-tests.proj}\" target=\"run\" />\n+    </target>\n+</project>"
  },
  {
    "sha": "a26ebf416e7ea796f0380e611c50cb54bc8c126a",
    "filename": "cmake/git.cmake",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cmake/git.cmake",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cmake/git.cmake",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cmake/git.cmake?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -8,7 +8,7 @@ set(__git_get_rev_hash YES)\n \n function(git_get_rev_hash _repository _output)\n   execute_process(\n-    COMMAND git log -1 --format=%h\n+    COMMAND git log --pretty=format:%H -n 1\n     WORKING_DIRECTORY ${_repository}\n     OUTPUT_VARIABLE output_hash\n     OUTPUT_STRIP_TRAILING_WHITESPACE"
  },
  {
    "sha": "a268ce441d9504ab93d66014a081989a8b738be4",
    "filename": "cmake/omni_compiler.cmake",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cmake/omni_compiler.cmake",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cmake/omni_compiler.cmake",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cmake/omni_compiler.cmake?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -10,7 +10,7 @@ set(__omni_compiler YES)\n # Generate the .xmod file for a given source file\n #\n function(omni_generate_xmod)\n-  set(oneValueArgs TARGET SOURCE DEPENDS)\n+  set(oneValueArgs TARGET SOURCE DEPENDS OUTPUT)\n   cmake_parse_arguments(omni_generate_xmod \"\" \"${oneValueArgs}\" \"\" ${ARGN})\n \n   if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${omni_generate_xmod_SOURCE})\n@@ -21,7 +21,10 @@ function(omni_generate_xmod)\n     message(FATAL \"Pre-processor flags not set for ${CMAKE_Fortran_COMPILER_ID}\")\n   endif()\n \n-  add_custom_target(${omni_generate_xmod_TARGET} ALL)\n+  add_custom_target(${omni_generate_xmod_TARGET})\n+  add_dependencies(generate-xmods ${omni_generate_xmod_TARGET})\n+\n+  add_dependencies(${omni_generate_xmod_TARGET} create_int_install_dir)\n \n   set(FPP_ARG_LIST ${FPPFLAGS})\n   separate_arguments(FPP_ARG_LIST)\n@@ -35,6 +38,8 @@ function(omni_generate_xmod)\n       COMMAND\n         ${OMNI_F_FRONT} -M${CMAKE_CURRENT_BINARY_DIR}\n         ${CMAKE_CURRENT_BINARY_DIR}/\"${CRAY_PP_OUTPUT}.i\" > /dev/null\n+      COMMAND ${CMAKE_COMMAND} -E make_directory ${INT_CLAW_HOME}/fincludes\n+      COMMAND cp ${CMAKE_CURRENT_BINARY_DIR}/${omni_generate_xmod_OUTPUT} ${INT_CLAW_HOME}/fincludes/\n       DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${omni_generate_xmod_SOURCE}\n       COMMENT \"Generating .xmod file for ${omni_generate_xmod_SOURCE}\"\n     )\n@@ -44,6 +49,8 @@ function(omni_generate_xmod)\n       COMMAND ${CMAKE_Fortran_COMPILER} ${FPP_ARG_LIST}\n         ${CMAKE_CURRENT_SOURCE_DIR}/${omni_generate_xmod_SOURCE} |\n         ${OMNI_F_FRONT} > /dev/null\n+      COMMAND ${CMAKE_COMMAND} -E make_directory ${INT_CLAW_HOME}/fincludes\n+      COMMAND cp ${CMAKE_CURRENT_BINARY_DIR}/${omni_generate_xmod_OUTPUT} ${INT_CLAW_HOME}/fincludes/\n       DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${omni_generate_xmod_SOURCE}\n       COMMENT \"Generating .xmod file for ${omni_generate_xmod_SOURCE}\"\n     )"
  },
  {
    "sha": "370e128b35ac2afbe9471a06d7b58ce05e81d8d7",
    "filename": "compiler/cray.cmake",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/cray.cmake",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/cray.cmake",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/compiler/cray.cmake?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -16,3 +16,4 @@ set(OPENACC_FLAGS \"-h acc,noomp\")     # flags to compile with OpenACC support\n set(OPENMP_FLAGS \"-h noacc,omp\")      # flags to compile with OpenMP support\n set(OMNI_TARGET \"\")                   # Compilation of OMNI compiler\n set(COMPILER_MACRO \"-D_CRAYFTN\")      # predefined macro by compiler\n+set(FC_VENDOR \"cray\")\n\\ No newline at end of file"
  },
  {
    "sha": "743ac0e8aea3ded322453a312f1c0fe68adbf384",
    "filename": "compiler/gnu.cmake",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/gnu.cmake",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/gnu.cmake",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/compiler/gnu.cmake?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -15,3 +15,4 @@ set(TEST_BASE_FLAGS \"\")         # Base flags for test case compilation\n set(OPENACC_FLAGS \"\")           # flags to compile with OpenACC support\n set(OPENMP_FLAGS \"-fopenmp\")    # flags to compile with OpenMP support\n set(COMPILER_MACRO \"-D_GNU\")    # predefined macro by compiler\n+set(FC_VENDOR \"gnu\")"
  },
  {
    "sha": "b46c504c0f9978f7c240d1ce1089db8ad5a8dde7",
    "filename": "compiler/intel.cmake",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/intel.cmake",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/intel.cmake",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/compiler/intel.cmake?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -15,3 +15,4 @@ set(TEST_BASE_FLAGS \"\")       # Base flags for test case compilation\n set(OPENACC_FLAGS \"\")         # flags to compile with OpenACC support\n set(OPENMP_FLAGS \"-openmp\")   # flags to compile with OpenMP support\n set(COMPILER_MACRO \"-D__ICC\")    # predefined macro by compiler\n+set(FC_VENDOR \"intel\")\n\\ No newline at end of file"
  },
  {
    "sha": "73946a38da75d8089efe56cbe53e2420fc26ae1e",
    "filename": "compiler/nag.cmake",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/nag.cmake",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/nag.cmake",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/compiler/nag.cmake?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -15,3 +15,4 @@ set(TEST_BASE_FLAGS \"\")                # Base flags for test case compilation\n set(OPENACC_FLAGS \"\")                  # flags to compile with OpenACC support\n set(OPENMP_FLAGS \"-openmp\")            # flags to compile with OpenMP support\n set(COMPILER_MACRO \"-DNAGFOR\")         # predefined macro by compiler\n+set(FC_VENDOR \"nag\")"
  },
  {
    "sha": "e9f1e323859053597b8d0298a39d69fdd5fe8417",
    "filename": "compiler/pgi.cmake",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/pgi.cmake",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/compiler/pgi.cmake",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/compiler/pgi.cmake?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -17,3 +17,4 @@ set(OPENACC_FLAGS \"-acc\")               # flags to compile with OpenACC support\n set(OPENMP_FLAGS \"-mp\")                 # flags to compile with OpenMP support\n set(OMNI_CONF_OPTION ${OMNI_CONF_OPTION} \"CPP=pgcc -E\")\n set(COMPILER_MACRO \"-D_PGI\")            # predefined macro by compiler\n+set(FC_VENDOR \"portland\")"
  },
  {
    "sha": "38959ab3059ce896776f5c5c37a55b0ad5f900d9",
    "filename": "cx2t/CMakeLists.txt",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/CMakeLists.txt",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/CMakeLists.txt",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/CMakeLists.txt?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -1,11 +1,12 @@\n # This file is released under terms of BSD license\n # See LICENSE file for more information\n \n-if(OFFLINE)\n-  set(DISABLE_RESOLVE \"-Doffline=true\")\n-endif()\n+configure_file(\n+  ${CMAKE_CURRENT_SOURCE_DIR}/claw.properties.in\n+  ${CX2T_PROPERTIES_DIR}/claw.properties\n+  @ONLY\n+)\n \n add_subdirectory(src)\n add_subdirectory(unittest)\n \n-add_dependencies(claw-ut claw-cx2t)"
  },
  {
    "sha": "012ddeb14785523a8958dab1da332fd91fc97e89",
    "filename": "cx2t/claw.properties",
    "status": "removed",
    "additions": 0,
    "deletions": 66,
    "changes": 66,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/claw.properties",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/claw.properties",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/claw.properties?ref=d7cea8b3bd4182bfda109ded51264078e80f242c",
    "patch": "@@ -1,66 +0,0 @@\n-# This file is released under terms of BSD license\n-# See LICENSE file for more information\n-\n-# Property file used by Ant build.\n-# Path are relative to build.xml files. So one level deeper than the current\n-# file.\n-\n-# Third-party libraries\n-ivy.dir=${antfile.dir}/../lib\n-st4.jar=ST4.jar\n-st4.dep=${ivy.dir}/${st4.jar}\n-antlr.jar=antlr-runtime.jar\n-antlr.dep=${ivy.dir}/${antlr.jar}\n-antlr4.jar=antlr4.jar\n-antlr4.runtime.jar=antlr4-runtime.jar\n-antlr4.dep=${ivy.dir}/${antlr4.jar}\n-antlr4.runtime.dep=${ivy.dir}/${antlr4.runtime.jar}\n-junit.dep=${ivy.dir}/junit.jar\n-hamcrest.dep=${ivy.dir}/hamcrest-core.jar\n-commoncli.jar=commons-cli.jar\n-commoncli.dep=${ivy.dir}/${commoncli.jar}\n-jacoco.jar=org.jacoco.ant.jar\n-jacoco.dep=${ivy.dir}/${jacoco.jar}\n-jacoco-core.jar=org.jacoco.core.jar\n-jacoco-core.dep=${ivy.dir}/${jacoco-core.jar}\n-jacoco-report.jar=org.jacoco.report.jar\n-jacoco-report.dep=${ivy.dir}/${jacoco-report.jar}\n-jacoco-agent.jar=org.jacoco.agent.jar\n-jacoco-agent.dep=${ivy.dir}/${jacoco-agent.jar}\n-asm.jar=asm.jar\n-asm.dep=${ivy.dir}/${asm.jar}\n-toml.jar=cava-toml.jar\n-toml.dep=${ivy.dir}/${toml.jar}\n-\n-# OMNI compiler libraries and paths\n-omni.dir=${antfile.dir}/../../omni-compiler\n-omni.xcodeml-common.dir=${omni.dir}/XcodeML-Common/build\n-omni.backend.dir=${omni.dir}/F-BackEnd/build\n-omni.common.jar=om-common.jar\n-omni.xcodeml-common.dep=${omni.xcodeml-common.dir}/${omni.common.jar}\n-\n-# CLAW X2T libraries\n-claw.wani.jar=claw-x2t-wani.jar\n-claw.wani.dep=${dist.dir}/${claw.wani.jar}\n-claw.shenron.jar=claw-x2t-shenron.jar\n-claw.shenron.dep=${dist.dir}/${claw.shenron.jar}\n-claw.tatsu.jar=claw-x2t-tatsu.jar\n-claw.tatsu.dep=${dist.dir}/${claw.tatsu.jar}\n-\n-# CLAW X2T unittests libraries\n-claw.wani.ut.jar=claw-x2t-wani-ut.jar\n-claw.wani.ut.dep=${dist.dir}/${claw.wani.ut.jar}\n-claw.shenron.ut.jar=claw-x2t-shenron-ut.jar\n-claw.shenron.ut.dep=${dist.dir}/${claw.shenron.ut.jar}\n-claw.tatsu.ut.jar=claw-x2t-tatsu-ut.jar\n-claw.tatsu.ut.dep=${dist.dir}/${claw.tatsu.ut.jar}\n-\n-# External transformation set\n-external.jar=claw-external-set.jar\n-\n-# Output directory\n-dist.dir=\n-\n-# Test report output directory\n-test.reports=\n-jacoco.file=jacoco.exec"
  },
  {
    "sha": "a2d1ede8788f95802506bbf798f5ddf4bde9491c",
    "filename": "cx2t/claw.properties.in",
    "status": "added",
    "additions": 187,
    "deletions": 0,
    "changes": 187,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/claw.properties.in",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/claw.properties.in",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/claw.properties.in?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -0,0 +1,187 @@\n+# This file is released under terms of BSD license\n+# See LICENSE file for more information\n+\n+# Property file used by Ant build.\n+# Path are relative to build.xml files. So one level deeper than the current\n+# file.\n+\n+# Java installation\n+\n+java.exec = @Java_JAVA_EXECUTABLE@\n+javac.exec = @Java_JAVAC_EXECUTABLE@\n+jar.exec = @Java_JAR_EXECUTABLE@\n+\n+# Common\n+\n+claw.java.target=@CLAW_JAVA_TARGET@\n+\n+common.dir=@CX2T_COMMON_DIR@\n+3rdparty.dist.dir=@CX2T_3RDPARTY_DIST_DIR@\n+src.dir=@CX2T_SRC_DIR@\n+gen.src.dir=@CX2T_GEN_SRC_DIR@\n+classes.dir=@CX2T_CLASSES_DIR@\n+dist.dir=@CX2T_DIST_DIR@\n+cx2t.dir=@CX2T_DIR@\n+int.home.dir=@INT_CLAW_HOME@\n+root.dir=@CMAKE_SOURCE_DIR@\n+\n+test.reports.dir=@TEST_REPORTS_DIR@\n+\n+# Unit tests\n+ut.src.dir=@CX2T_UT_SRC_DIR@\n+ut.gen.src.dir=@CX2T_UT_GEN_SRC_DIR@\n+ut.classes.dir=@CX2T_UT_CLASSES_DIR@\n+ut.dist.dir=@CX2T_UT_DIST_DIR@\n+ut.reports.dir=@CX2T_UT_REPORTS_DIR@\n+ut.code.coverage.report.bin=${test.reports.dir}/cx2t-unit-tests.jacoco.exec\n+ut.code.coverage.report.xml=${test.reports.dir}/cx2t-unit-tests.jacoco.xml\n+\n+# Driver\n+driver.src.dir=@CLAWFC_SRC_DIR@\n+driver.classes.dir=@CLAWFC_CLASSES_DIR@\n+driver.dist.dir=@CLAWFC_DIST_DIR@\n+driver.conf.dir=@CLAW_X2T_CONFIG_DIR@\n+driver.conf.file=@CLAWFC_CONF_FILE@\n+driver.runtime.conf.file=@CLAWFC_RUNTIME_CONF_FILE@\n+driver.gen.src.dir=@CLAWFC_GEN_SRC_DIR@\n+\n+# Third-party libraries\n+ivy.dir=${3rdparty.dist.dir}\n+st4.jar=ST4.jar\n+st4.dep=${3rdparty.dist.dir}/${st4.jar}\n+antlr.jar=antlr-runtime.jar\n+antlr.dep=${3rdparty.dist.dir}/${antlr.jar}\n+antlr4.jar=@ANTLR4_NAME@.jar\n+antlr4.runtime.jar=antlr4-runtime.jar\n+antlr4.dep=${3rdparty.dist.dir}/${antlr4.jar}\n+antlr4.runtime.dep=${3rdparty.dist.dir}/${antlr4.runtime.jar}\n+junit.dep=${3rdparty.dist.dir}/junit.jar\n+hamcrest.dep=${3rdparty.dist.dir}/hamcrest-core.jar\n+commoncli.jar=@COMMON_CLI_NAME@.jar\n+commoncli.dep=${3rdparty.dist.dir}/${commoncli.jar}\n+jacoco.jar=org.jacoco.ant.jar\n+jacoco.dep=${3rdparty.dist.dir}/${jacoco.jar}\n+jacoco-core.jar=org.jacoco.core.jar\n+jacoco-core.dep=${3rdparty.dist.dir}/${jacoco-core.jar}\n+jacoco-report.jar=org.jacoco.report.jar\n+jacoco-report.dep=${3rdparty.dist.dir}/${jacoco-report.jar}\n+jacoco-agent.jar=org.jacoco.agent.jar\n+jacoco-agent.dep=${3rdparty.dist.dir}/${jacoco-agent.jar}\n+asm.jar=asm.jar\n+asm.dep=${3rdparty.dist.dir}/${asm.jar}\n+asm-commons.dep=${3rdparty.dist.dir}/asm-commons.jar\n+asm-tree.dep=${3rdparty.dist.dir}/asm-tree.jar\n+toml.jar=cava-toml.jar\n+toml.dep=${3rdparty.dist.dir}/${toml.jar}\n+argparse4j.jar=argparse4j.jar\n+argparse4j.dep=${3rdparty.dist.dir}/${argparse4j.jar}\n+ant-contrib.jar=ant-contrib.jar\n+ant-contrib.dep=${3rdparty.dist.dir}/${ant-contrib.jar}\n+jaxb-runtime.jar=jaxb-runtime.jar\n+jaxb-runtime.dep=${3rdparty.dist.dir}/${jaxb-runtime.jar}\n+jaxb-xjc.jar=jaxb-xjc.jar\n+jaxb-xjc.dep=${3rdparty.dist.dir}/${jaxb-xjc.jar}\n+jaxb-core.jar=jaxb-core.jar\n+jaxb-core.dep=${3rdparty.dist.dir}/${jaxb-core.jar}\n+jaxb-core.jar=jaxb-core.jar\n+jaxb-core.dep=${3rdparty.dist.dir}/${jaxb-core.jar}\n+jakarta.activation.jar=jakarta.activation.jar\n+jakarta.activation.dep=${3rdparty.dist.dir}/${jakarta.activation.jar}\n+jakarta.xml.bind-api.jar=jakarta.xml.bind-api.jar\n+jakarta.xml.bind-api.dep=${3rdparty.dist.dir}/${jakarta.xml.bind-api.jar}\n+istack-commons-runtime.jar=istack-commons-runtime.jar\n+istack-commons-runtime.dep=${3rdparty.dist.dir}/${istack-commons-runtime.jar}\n+\n+# OMNI compiler libraries and paths\n+omni.xcodeml-common.dep=@OMNI_JAR_TOOLS@\n+omni.xcodeml-c-backend.dep=@OMNI_JAR_C_BACKEND@\n+omni.xcodeml-f-backend.dep=@OMNI_JAR_F_BACKEND@\n+\n+# CLAW X2T libraries\n+claw.wani.jar=claw-x2t-wani.jar\n+claw.wani.dep=${dist.dir}/${claw.wani.jar}\n+claw.shenron.jar=claw-x2t-shenron.jar\n+claw.shenron.dep=${dist.dir}/${claw.shenron.jar}\n+claw.tatsu.jar=claw-x2t-tatsu.jar\n+claw.tatsu.dep=${dist.dir}/${claw.tatsu.jar}\n+\n+# CLAW driver libraries\n+driver.jar=@CLAWFC_JAR@\n+driver.dep=${driver.dist.dir}/${driver.jar}\n+driver.libs.dir=../share/claw\n+d.l.dir=${driver.libs.dir}\n+driver.runtime.classpath=${d.l.dir}/${claw.tatsu.jar} ${d.l.dir}/${claw.wani.jar} ${d.l.dir}/${claw.shenron.jar} \\\n+    ${omni.xcodeml-common.dep} ${omni.xcodeml-f-backend.dep} \\\n+    ${d.l.dir}/${commoncli.jar} ${d.l.dir}/${antlr4.jar} ${d.l.dir}/${antlr4.runtime.jar} ${d.l.dir}/${toml.jar} \\\n+    ${d.l.dir}/${argparse4j.jar} ${d.l.dir}/${jaxb-runtime.jar} ${d.l.dir}/${jaxb-core.jar} \\\n+    ${d.l.dir}/jakarta.xml.bind-api.jar ${d.l.dir}/${jakarta.activation.jar} ${d.l.dir}/${istack-commons-runtime.jar}\n+\n+# CLAW X2T unittests libraries\n+claw.wani.ut.jar=claw-x2t-wani-ut.jar\n+claw.wani.ut.dep=${ut.dist.dir}/${claw.wani.ut.jar}\n+claw.shenron.ut.jar=claw-x2t-shenron-ut.jar\n+claw.shenron.ut.dep=${ut.dist.dir}/${claw.shenron.ut.jar}\n+claw.tatsu.ut.jar=claw-x2t-tatsu-ut.jar\n+claw.tatsu.ut.dep=${ut.dist.dir}/${claw.tatsu.ut.jar}\n+\n+# CLAW driver test utils\n+driver.test.utils.src.dir=@CLAWFC_TEST_UTIL_SRC_DIR@\n+\n+# CLAW driver unit-tests\n+driver.ut.jar=@CLAWFC_UT_JAR@\n+driver.ut.dist.dir=@CLAWFC_UT_BIN_DIR@\n+driver.ut.dep=${driver.ut.dist.dir}/${driver.ut.jar}\n+driver.ut.src.dir=@CLAWFC_UT_SRC_DIR@\n+driver.ut.gen.src.dir=@CLAWFC_UT_GEN_SRC_DIR@\n+driver.ut.res.dir=@CLAWFC_UT_RES_DIR@\n+driver.ut.classes.dir=@CLAWFC_UT_CLASSES_DIR@\n+driver.ut.runtime.classpath=${driver.dep} \\\n+    ${d.l.dir}/${claw.tatsu.jar} ${d.l.dir}/${claw.wani.jar}  ${d.l.dir}/${claw.shenron.jar} \\\n+    ${omni.xcodeml-common.dep} ${omni.xcodeml-f-backend.dep} \\\n+    ${junit.dep} ${hamcrest.dep} ${jaxb-runtime.dep} ${jaxb-core.dep} ${jakarta.xml.bind-api.dep} \\\n+    ${jakarta.activation.dep} ${istack-commons-runtime.dep}\n+driver.ut.report=@CLAWFC_UT_REPORT@\n+driver.ut.code.coverage.report.bin=${test.reports.dir}/clawfc-unit-tests.jacoco.exec\n+driver.ut.code.coverage.report.xml=${test.reports.dir}/clawfc-unit-tests.jacoco.xml\n+\n+# CLAW driver tests\n+driver.tests.jar=@CLAWFC_TESTS_JAR@\n+driver.tests.dist.dir=@CLAWFC_TESTS_BIN_DIR@\n+driver.tests.dep=${driver.tests.dist.dir}/${driver.tests.jar}\n+driver.tests.src.dir=@CLAWFC_TESTS_SRC_DIR@\n+driver.tests.gen.src.dir=@CLAWFC_TESTS_GEN_SRC_DIR@\n+driver.tests.res.dir=@CLAWFC_TESTS_RES_DIR@\n+driver.tests.classes.dir=@CLAWFC_TESTS_CLASSES_DIR@\n+driver.tests.runtime.classpath=${driver.dep} ${junit.dep} ${hamcrest.dep}\n+driver.tests.report=@CLAWFC_TESTS_REPORT@\n+driver.tests.code.coverage.report.bin=${test.reports.dir}/clawfc-tests.jacoco.exec\n+driver.tests.code.coverage.report.xml=${test.reports.dir}/clawfc-tests.jacoco.xml\n+\n+# CLAW tests\n+claw.tests.jar=@CLAW_TESTS_JAR@\n+claw.tests.dist.dir=@CLAW_TESTS_BIN_DIR@\n+claw.tests.dep=${claw.tests.dist.dir}/${claw.tests.jar}\n+claw.tests.src.dir=@CLAW_TESTS_SRC_DIR@\n+claw.tests.gen.src.dir=@CLAW_TESTS_GEN_SRC_DIR@\n+claw.tests.res.dir=@CLAW_TESTS_RES_DIR@\n+claw.tests.classes.dir=@CLAW_TESTS_CLASSES_DIR@\n+claw.tests.runtime.classpath=${driver.dep} ${junit.dep} ${hamcrest.dep}\n+claw.tests.report=@CLAW_TESTS_REPORT@\n+\n+# External transformation set\n+external.jar=claw-external-set.jar\n+\n+jacoco.file=jacoco.exec\n+\n+# Ant projects\n+3rdparty-dependencies.proj=${root.dir}/cx2t/common-targets.xml\n+cx2t.proj=${root.dir}/cx2t/src/build.xml\n+cx2t-unit-tests.proj=${root.dir}/cx2t/unittest/build.xml\n+driver.proj=${root.dir}/driver/src/build.xml\n+driver-ut.proj=${root.dir}/driver/unittests/build.xml\n+driver-tests.proj=${root.dir}/driver/tests/build.xml\n+claw-tests.proj=${root.dir}/tests_runner/build.xml\n+\n+# Install\n+claw.install.dir=@CMAKE_INSTALL_PREFIX@\n+xcodeml-tools.install.dir=@OMNI_XCODEML_TOOLS_INSTALL_DIR@"
  },
  {
    "sha": "ec743bc7fcc69b8d5027e5982755e74ea68baf8b",
    "filename": "cx2t/common-targets.xml",
    "status": "modified",
    "additions": 28,
    "deletions": 8,
    "changes": 36,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/common-targets.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/common-targets.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/common-targets.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -1,34 +1,54 @@\n <!--\n  This file is released under terms of BSD license\n  See LICENSE file for more information\n+ @author: not specified\n -->\n \n <!-- common target for Java build in CX2X project -->\n-<project name=\"common\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\n+<project name=\"fetch-3rdparty-dependencies\" default=\"main\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\n   <!-- Check whether ivy is present already -->\n   <target name=\"check-ivy\">\n-    <available file=\"../lib/ivy.jar\" property=\"ivy.present\"/>\n+    <available file=\"${3rdparty.dist.dir}/ivy.jar\" property=\"ivy.present\"/>\n   </target>\n \n   <!-- Get the ivy jar to be able to resolve dependencies -->\n   <target name=\"bootstrap\" depends=\"check-ivy\" unless=\"ivy.present\"\n           description=\"Install ivy jar if not present\">\n-      <mkdir dir=\"../lib\"/>\n-      <get dest=\"../lib/ivy.jar\"\n+      <mkdir dir=\"${3rdparty.dist.dir}\"/>\n+      <get dest=\"${3rdparty.dist.dir}/ivy.jar\"\n            src=\"https://repo1.maven.org/maven2/org/apache/ivy/ivy/2.5.0/ivy-2.5.0.jar\"/>\n   </target>\n \n   <!-- Resolve the dependencies described in ivy.xml -->\n   <target name=\"resolve\" depends=\"check-ivy\"\n-          description=\"--> retrieve dependencies with ivy\" if=\"ivy.present\"\n+          description=\"--> retrieve dependencies with ivy\"\n           unless=\"offline\">\n     <!-- Needed for older version of ANT -->\n     <taskdef resource=\"org/apache/ivy/ant/antlib.xml\" uri=\"antlib:org.apache.ivy.ant\">\n       <classpath>\n-        <pathelement location=\"../lib/ivy.jar\"/>\n+        <pathelement location=\"${3rdparty.dist.dir}/ivy.jar\"/>\n       </classpath>\n     </taskdef>\n-    <ivy:retrieve log=\"quiet\" file=\"../ivy.xml\"\n-                  pattern=\"../lib/[artifact](-[classifier]).[ext]\"/>\n+    <ivy:retrieve log=\"quiet\" file=\"${common.dir}/ivy.xml\"\n+                  pattern=\"${3rdparty.dist.dir}/[artifact](-[classifier]).[ext]\"/>\n+    <!-- Copy dependencies used at runtime -->\n+    <copy todir=\"${dist.dir}\" overwrite=\"false\">\n+      <fileset dir=\"${3rdparty.dist.dir}\" casesensitive=\"yes\">\n+        <include name=\"${antlr.jar}\"/>\n+        <include name=\"${antlr4.jar}\"/>\n+        <include name=\"${antlr4.runtime.jar}\"/>\n+        <include name=\"${commoncli.jar}\"/>\n+        <include name=\"${toml.jar}\"/>\n+        <include name=\"${argparse4j.jar}\"/>\n+        <include name=\"${jaxb-runtime.jar}\"/>\n+        <include name=\"${jaxb-core.jar}\"/>\n+        <include name=\"${jakarta.xml.bind-api.jar}\"/>\n+        <include name=\"${jakarta.activation.jar}\"/>\n+        <include name=\"${istack-commons-runtime.jar}\"/>\n+      </fileset>\n+    </copy>\n   </target>\n+\n+  <!-- Default target -->\n+  <target name=\"main\" depends=\"bootstrap, check-ivy, resolve\"/>\n </project>"
  },
  {
    "sha": "97472b936cc6cdb7d0a4e752314be18f80824734",
    "filename": "cx2t/config/claw_code_style_idea.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 31,
    "changes": 31,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/config/claw_code_style_idea.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/config/claw_code_style_idea.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/config/claw_code_style_idea.xml?ref=d7cea8b3bd4182bfda109ded51264078e80f242c",
    "patch": "@@ -1,31 +0,0 @@\n-<code_scheme name=\"Default (1)\">\n-  <option name=\"RIGHT_MARGIN\" value=\"80\" />\n-  <XML>\n-    <option name=\"XML_LEGACY_SETTINGS_IMPORTED\" value=\"true\" />\n-  </XML>\n-  <codeStyleSettings language=\"JAVA\">\n-    <option name=\"RIGHT_MARGIN\" value=\"80\" />\n-    <option name=\"BLANK_LINES_AFTER_CLASS_HEADER\" value=\"1\" />\n-    <option name=\"BRACE_STYLE\" value=\"5\" />\n-    <option name=\"CLASS_BRACE_STYLE\" value=\"5\" />\n-    <option name=\"METHOD_BRACE_STYLE\" value=\"5\" />\n-    <option name=\"LAMBDA_BRACE_STYLE\" value=\"5\" />\n-    <option name=\"SPACE_BEFORE_IF_PARENTHESES\" value=\"false\" />\n-    <option name=\"SPACE_BEFORE_WHILE_PARENTHESES\" value=\"false\" />\n-    <option name=\"SPACE_BEFORE_FOR_PARENTHESES\" value=\"false\" />\n-    <option name=\"SPACE_BEFORE_TRY_PARENTHESES\" value=\"false\" />\n-    <option name=\"SPACE_BEFORE_CATCH_PARENTHESES\" value=\"false\" />\n-    <option name=\"SPACE_BEFORE_SWITCH_PARENTHESES\" value=\"false\" />\n-    <option name=\"SPACE_BEFORE_SYNCHRONIZED_PARENTHESES\" value=\"false\" />\n-    <option name=\"IF_BRACE_FORCE\" value=\"1\" />\n-    <option name=\"DOWHILE_BRACE_FORCE\" value=\"1\" />\n-    <option name=\"WHILE_BRACE_FORCE\" value=\"1\" />\n-    <option name=\"FOR_BRACE_FORCE\" value=\"1\" />\n-    <option name=\"ENUM_CONSTANTS_WRAP\" value=\"1\" />\n-    <indentOptions>\n-      <option name=\"INDENT_SIZE\" value=\"2\" />\n-      <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n-      <option name=\"TAB_SIZE\" value=\"2\" />\n-    </indentOptions>\n-  </codeStyleSettings>\n-</code_scheme>\n\\ No newline at end of file"
  },
  {
    "sha": "b5b2969eaf76a9ad24d6db9150625f8c0fffafe2",
    "filename": "cx2t/ivy.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/ivy.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/ivy.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/ivy.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -1,6 +1,7 @@\n <!--\n  This file is released under terms of BSD license\n  See LICENSE file for more information\n+ @author: not specified\n -->\n \n <!-- Dependencies for CX2X -->\n@@ -11,10 +12,15 @@\n   <info organisation=\"claw\" module=\"claw\"/>\n   <dependencies>\n     <dependency org=\"commons-cli\" name=\"commons-cli\" rev=\"1.3.1\"/>\n-    <dependency org=\"org.antlr\" name=\"antlr4\" rev=\"4.7\"/>\n+    <dependency org=\"org.antlr\" name=\"antlr4\" rev=\"4.8-1\"/>\n+    <dependency org=\"org.antlr\" name=\"antlr4-runtime\" rev=\"4.8-1\"/>\n     <dependency org=\"junit\" name=\"junit\" rev=\"4.12\"/>\n     <dependency org=\"net.consensys.cava\" name=\"cava-toml\" rev=\"0.3.1\"/>\n     <dependency org=\"org.jacoco\" name=\"org.jacoco.ant\" rev=\"0.8.2\" />\n     <dependency org=\"org.ow2.asm\" name=\"asm\" rev=\"6.2.1\"/>\n+    <dependency org=\"net.sourceforge.argparse4j\" name=\"argparse4j\" rev=\"0.8.1\"/>\n+    <dependency org=\"ant-contrib\" name=\"ant-contrib\" rev=\"1.0b3\"/>\n+    <dependency org=\"org.glassfish.jaxb\" name=\"jaxb-runtime\" rev=\"3.0.0-M5\" conf=\"default\"/>\n+    <dependency org=\"org.glassfish.jaxb\" name=\"jaxb-xjc\" rev=\"3.0.0-M5\" conf=\"default\"/>\n   </dependencies>\n </ivy-module>"
  },
  {
    "sha": "a1a601ef4b1bae7efea0f9a3de1d344395c8d30e",
    "filename": "cx2t/src/CMakeLists.txt",
    "status": "modified",
    "additions": 2,
    "deletions": 48,
    "changes": 50,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/CMakeLists.txt",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/CMakeLists.txt",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/CMakeLists.txt?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -5,53 +5,7 @@\n \n # Generate file with version number for Configuration check\n configure_file(\n-  ${CMAKE_CURRENT_SOURCE_DIR}/claw/ClawVersion.java.in\n-  ${CMAKE_CURRENT_SOURCE_DIR}/claw/ClawVersion.java\n+  ${CMAKE_CURRENT_SOURCE_DIR}/claw/wani/ClawVersion.java.in\n+  ${CX2T_GEN_SRC_DIR}/claw/wani/ClawVersion.java\n   @ONLY\n )\n-if(NOT OFFLINE)\n-  # Bootstrap the compilation process\n-  add_custom_target(claw-init ALL)\n-  add_custom_command(\n-    TARGET claw-init\n-    COMMAND ${Ant_EXECUTABLE} -f ${CMAKE_CURRENT_SOURCE_DIR}/build.xml\n-    ${ANT_FLAGS}\n-    -Dantfile.dir=${CMAKE_CURRENT_SOURCE_DIR}\n-    -Ddist.dir=${CMAKE_BINARY_DIR}/build\n-    init\n-    COMMENT \"Resolving dependencies for the build\"\n-  )\n-endif()\n-\n-# Compile the CX2T libraries\n-add_custom_target(claw-cx2t ALL)\n-add_custom_command(\n-  TARGET claw-cx2t\n-  COMMAND ${Ant_EXECUTABLE} -f ${CMAKE_CURRENT_SOURCE_DIR}/build.xml\n-  ${ANT_FLAGS}\n-  -Dantfile.dir=${CMAKE_CURRENT_SOURCE_DIR}\n-  -Ddist.dir=${CMAKE_BINARY_DIR}/build\n-  -Dantlr4.jar=\"${ANTLR4_NAME}.jar\"\n-  -Dcommoncli.jar=\"${COMMON_CLI_NAME}.jar\"\n-  ${DISABLE_RESOLVE}\n-  COMMENT \"Building CLAW X2T libraries\"\n-)\n-if(NOT OFFLINE)\n-  add_dependencies(claw-cx2t claw-init)\n-  add_dependencies(claw-cx2t omni-compiler)\n-endif()\n-\n-# Install JAR files\n-install(\n-  FILES\n-    ${PROJECT_BINARY_DIR}/build/${CLAW_X2T_TATSU}.jar\n-    ${PROJECT_BINARY_DIR}/build/${CLAW_X2T_SHENRON}.jar\n-    ${PROJECT_BINARY_DIR}/build/${CLAW_X2T_WANI}.jar\n-    ${CMAKE_CURRENT_SOURCE_DIR}/../lib/${ANTLR4_NAME}.jar\n-    ${CMAKE_CURRENT_SOURCE_DIR}/../lib/${ANTLR4_RUNTIME_NAME}.jar\n-    ${CMAKE_CURRENT_SOURCE_DIR}/../lib/${ANTLR_RUNTIME_NAME}.jar\n-    ${CMAKE_CURRENT_SOURCE_DIR}/../lib/${COMMON_CLI_NAME}.jar\n-    ${CMAKE_CURRENT_SOURCE_DIR}/../lib/${TOML_NAME}.jar\n-  DESTINATION\n-    ${CMAKE_INSTALL_PREFIX}/share/claw/\n-)"
  },
  {
    "sha": "2a3a2a205a99d0320e7498f39f4ff764f00c8af4",
    "filename": "cx2t/src/build.xml",
    "status": "modified",
    "additions": 37,
    "deletions": 33,
    "changes": 70,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/build.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/build.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/build.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -1,32 +1,28 @@\n <!--\n  This file is released under terms of BSD license\n  See LICENSE file for more information\n+ @author: not specified\n -->\n \n <!-- CLAW X2T build process -->\n-<project name=\"claw\" default=\"main\" basedir=\".\">\n+<project name=\"cx2t\" default=\"main\" basedir=\".\">\n     <description>Build CX2T libraries</description>\n \n-    <dirname property=\"antfile.dir\" file=\"${ant.file}\"/>\n-\n-    <import file=\"../common-targets.xml\"/>\n-    <property file=\"../claw.properties\"/>\n+    <!-- Value set externally-->\n+    <property name=\"claw.properties.dir\" value=\"\"/>\n+    <property file=\"${claw.properties.dir}/claw.properties\"/>\n \n     <!-- Java sources -->\n-    <property name=\"src.translator.parser\"\n-              value=\"claw/wani/language/parser\"/>\n-    <property name=\"src.base\" value=\".\"/>\n-\n-    <!-- Java classes -->\n-    <property name=\"build.dir\" location=\"bin\"/>\n+    <property name=\"src.translator.parser.dir\"\n+              value=\"${gen.src.dir}/claw/wani/language/parser\"/>\n \n     <!-- Classpath for the CX2T Translator library -->\n     <path id=\"build.path\">\n         <pathelement path=\"${st4.dep}\"/>\n         <pathelement path=\"${antlr.dep}\"/>\n         <pathelement path=\"${antlr4.dep}\"/>\n         <pathelement path=\"${antlr4.runtime.dep}\"/>\n-        <pathelement path=\"${commoncli.dep}\"/>\n+        <pathelement path=\"${argparse4j.dep}\"/>\n         <pathelement path=\"${omni.xcodeml-common.dep}\"/>\n         <pathelement path=\"${toml.dep}\"/>\n     </path>\n@@ -39,61 +35,69 @@\n     </path>\n \n     <!-- Initialization step -->\n-    <target name=\"init\" depends=\"common.bootstrap\"\n-            description=\"Initialize build directories\">\n+    <target name=\"init\" description=\"Initialize build directories\">\n         <tstamp/>\n-        <mkdir dir=\"${build.dir}\"/>\n+        <mkdir dir=\"${classes.dir}\"/>\n+        <mkdir dir=\"${src.translator.parser.dir}\"/>\n     </target>\n \n     <!-- Check if parser is up-to-date or need to be re-generated -->\n     <uptodate property=\"antlr.required\"\n-              targetfile=\"claw/wani/language/parser/Claw.g4\">\n-        <srcfiles dir=\"${src.translator.parser}\" includes=\"*.java\"/>\n+              targetfile=\"${src.dir}/claw/wani/language/parser/Claw.g4\" >\n+        <srcfiles dir=\"${src.translator.parser.dir}\" includes=\"*.java\" erroronmissingdir=\"false\" />\n     </uptodate>\n \n     <!-- Generate the CLAW parser from the ANTLR grammar file -->\n-    <target name=\"antlr\" depends=\"common.resolve\" if=\"antlr.required\"\n-            description=\"Generate the parser from ANTLR grammar file\">\n-        <java classname=\"org.antlr.v4.Tool\" fork=\"true\" failonerror=\"true\"\n+    <target name=\"antlr\" if=\"antlr.required\" description=\"Generate the parser from ANTLR grammar file\">\n+        <java jvm=\"${java.exec}\" classname=\"org.antlr.v4.Tool\" fork=\"true\" failonerror=\"true\"\n               classpathref=\"antlr.path\">\n+            <arg value=\"-o\"/>\n+            <arg value=\"${src.translator.parser.dir}\"/>\n             <arg value=\"-package\"/>\n             <arg value=\"claw.wani.language.parser\"/>\n-            <arg line=\"${src.translator.parser}/Claw.g4\"/>\n+            <arg line=\"${src.dir}/claw/wani/language/parser/Claw.g4\"/>\n         </java>\n     </target>\n \n     <!-- Compile the java code for the two libraries -->\n-    <target name=\"compile\" depends=\"common.resolve, antlr\"\n-            description=\"compile the source\">\n-        <javac includeantruntime=\"false\" srcdir=\"${src.base}\"\n-               destdir=\"${build.dir}\" classpathref=\"build.path\" debug=\"on\" />\n+    <target name=\"compile\" depends=\"antlr\" description=\"compile the source\">\n+        <javac executable=\"${javac.exec}\" fork=\"yes\" includeantruntime=\"false\" srcdir=\"\"\n+               destdir=\"${classes.dir}\" classpathref=\"build.path\" debug=\"on\">\n+            <src>\n+                <pathelement path=\"${src.dir}\"/>\n+                <pathelement path=\"${gen.src.dir}\"/>\n+            </src>\n+        </javac>\n     </target>\n \n-    <!-- Pacakge compiled files into their own library -->\n+    <!-- Package compiled files into their own library -->\n     <target name=\"jar\" depends=\"compile\" description=\"package, output to JAR\">\n         <mkdir dir=\"${dist.dir}\"/>\n         <!-- CLAW X2T TATSU -->\n-        <jar jarfile=\"${dist.dir}/${claw.tatsu.jar}\" basedir=\"${build.dir}\"\n+        <jar jarfile=\"${dist.dir}/${claw.tatsu.jar}\" basedir=\"${classes.dir}\"\n              includes=\"claw/tatsu/**\"/>\n         <!-- CLAW X2T SHENRON -->\n-        <jar jarfile=\"${dist.dir}/${claw.shenron.jar}\" basedir=\"${build.dir}\"\n+        <jar jarfile=\"${dist.dir}/${claw.shenron.jar}\" basedir=\"${classes.dir}\"\n              includes=\"claw/shenron/**\"/>\n         <!-- CLAW X2T WANI -->\n-        <jar jarfile=\"${dist.dir}/${claw.wani.jar}\" basedir=\"${build.dir}\"\n-             includes=\"claw/ClawX2T.class claw/ClawVersion.class claw/wani/**\"/>\n+        <jar jarfile=\"${dist.dir}/${claw.wani.jar}\" basedir=\"${classes.dir}\"\n+             includes=\"claw/wani/**\">\n+            <zipfileset dir=\"${src.dir}/claw/config\" includes=\"**/*.xml **/*.xsd\"\n+                prefix=\"claw/config\"/>\n+        </jar>\n         <!-- -->\n-        <jar jarfile=\"${dist.dir}/${external.jar}\" basedir=\"${build.dir}\"\n+        <jar jarfile=\"${dist.dir}/${external.jar}\" basedir=\"${classes.dir}\"\n              includes=\"external/**\"/>\n     </target>\n \n     <target name=\"clean\" description=\"clean up\">\n-        <delete dir=\"${build.dir}\"/>\n+        <delete dir=\"${classes.dir}\"/>\n         <delete file=\"${dist.dir}/${claw.tatsu.jar}\"/>\n         <delete file=\"${dist.dir}/${claw.shenron.jar}\"/>\n         <delete file=\"${dist.dir}/${claw.wani.jar}\"/>\n         <delete file=\"${dist.dir}/${external.jar}\"/>\n     </target>\n \n     <!-- Default target -->\n-    <target name=\"main\" depends=\"init, compile, jar\"/>\n+    <target name=\"main\" depends=\"init, antlr, compile, jar\"/>\n </project>"
  },
  {
    "sha": "d28021f544b8961042104a271b3bf8cf3158e287",
    "filename": "cx2t/src/claw/ClawVersion.java.in",
    "status": "removed",
    "additions": 0,
    "deletions": 20,
    "changes": 20,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/src/claw/ClawVersion.java.in",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/src/claw/ClawVersion.java.in",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/claw/ClawVersion.java.in?ref=d7cea8b3bd4182bfda109ded51264078e80f242c",
    "patch": "@@ -1,20 +0,0 @@\n-/*\n- * This file is released under terms of BSD license\n- * See LICENSE file for more information\n- */\n-package claw;\n-\n-/**\n- * Class holding version number for configuration checking. File edited\n- * automatically by the build system.\n- *\n- * @author clementval\n- */\n-public class ClawVersion {\n-\n-  public static final String VERSION = \"@PROJECT_VERSION@\";\n-\n-  // Hide the implicit public ctor.\n-  private ClawVersion(){\n-  }\n-}"
  },
  {
    "sha": "ed9de58c6cd024f2129c0f0c97a77b6de1874948",
    "filename": "cx2t/src/claw/ClawX2T.java",
    "status": "removed",
    "additions": 0,
    "deletions": 334,
    "changes": 334,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/src/claw/ClawX2T.java",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d7cea8b3bd4182bfda109ded51264078e80f242c/cx2t/src/claw/ClawX2T.java",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/claw/ClawX2T.java?ref=d7cea8b3bd4182bfda109ded51264078e80f242c",
    "patch": "@@ -1,334 +0,0 @@\n-/*\n- * This file is released under terms of BSD license\n- * See LICENSE file for more information\n- */\n-package claw;\n-\n-import claw.tatsu.common.CompilerDirective;\n-import claw.tatsu.common.Context;\n-import claw.tatsu.common.Target;\n-import claw.tatsu.xcodeml.backend.OmniBackendDriver;\n-import claw.wani.ClawConstant;\n-import claw.wani.report.ClawTransformationReport;\n-import claw.wani.x2t.configuration.Configuration;\n-import claw.wani.x2t.translator.ClawTranslatorDriver;\n-import org.apache.commons.cli.*;\n-import xcodeml.util.XmOption;\n-\n-import java.io.File;\n-\n-/**\n- * ClawX2T is the entry point of any CLAW XcodeML/F translation.\n- *\n- * @author clementval\n- */\n-public class ClawX2T {\n-\n-  private static final String ERR_INTERNAL = \"internal\";\n-\n-  /**\n-   * Print an error message an abort.\n-   *\n-   * @param filename   Filename in which error occurred.\n-   * @param lineNumber Line number of the error, if known.\n-   * @param charPos    Character position of the error, if known.\n-   * @param msg        Error message.\n-   */\n-  private static void error(String filename, int lineNumber, int charPos,\n-                            String msg)\n-  {\n-    StringBuilder errorStr = new StringBuilder();\n-    errorStr.append(filename).append(\":\");\n-    if(lineNumber > 0) {\n-      errorStr.append(lineNumber).append(\":\");\n-    }\n-    if(charPos > 0) {\n-      errorStr.append(lineNumber).append(\":\");\n-    }\n-    errorStr.append(msg);\n-    System.err.println(errorStr);\n-    System.exit(1);\n-  }\n-\n-  /**\n-   * Print program usage.\n-   */\n-  private static void usage() {\n-    Options options = prepareOptions();\n-    HelpFormatter formatter = new HelpFormatter();\n-    formatter.printHelp(\"clawfc\", options);\n-    System.exit(1);\n-  }\n-\n-  /**\n-   * List all directive target available for code generation.\n-   */\n-  private static void listTarget() {\n-    System.out.println(\"- CLAW available targets -\");\n-    for(String t : Target.availableTargets()) {\n-      System.out.println(\"  - \" + t);\n-    }\n-  }\n-\n-  /**\n-   * List all directive directive language available for code generation.\n-   */\n-  private static void listDirectiveLanguage() {\n-    System.out.println(\"- CLAW directive directive language -\");\n-    for(String d : CompilerDirective.availableDirectiveLanguage()) {\n-      System.out.println(\"  - \" + d);\n-    }\n-  }\n-\n-  /**\n-   * Prepare the set of available options.\n-   *\n-   * @return Options object.\n-   */\n-  private static Options prepareOptions() {\n-    Options options = new Options();\n-    options.addOption(\"h\", \"help\", false,\n-        \"display program usage.\");\n-    options.addOption(\"l\", false,\n-        \"suppress line directive in decompiled code.\");\n-    options.addOption(\"cp\", \"config-path\", true,\n-        \"specify the configuration directory\");\n-    options.addOption(\"c\", \"config\", true,\n-        \"specify the configuration for the translator.\");\n-    options.addOption(\"s\", \"schema\", true,\n-        \"specify the XSD schema location to validate the configuration.\");\n-    options.addOption(\"t\", \"target\", true,\n-        \"specify the target for the code transformation.\");\n-    options.addOption(\"dir\", \"directive\", true,\n-        \"list all directive directive language available for code generation.\");\n-    options.addOption(\"d\", \"debug\", false,\n-        \"enable output debug message.\");\n-    options.addOption(\"f\", true,\n-        \"specify FORTRAN decompiled output file.\");\n-    options.addOption(\"w\", true,\n-        \"number of character per line in decompiled code.\");\n-    options.addOption(\"o\", true,\n-        \"specify XcodeML/F output file.\");\n-    options.addOption(\"M\", true,\n-        \"specify where to search for .xmod files\");\n-    options.addOption(\"tl\", \"target-list\", false,\n-        \"list all target available for code transformation.\");\n-    options.addOption(\"dl\", \"directive-list\", false,\n-        \"list all available directive language to be generated.\");\n-    options.addOption(\"sc\", \"show-config\", false,\n-        \"display the current configuration.\");\n-    options.addOption(\"fp\", \"force-pure\", false,\n-        \"exit the translator if a PURE subroutine/function \" +\n-            \"has to be transformed.\");\n-    options.addOption(\"r\", \"report\", true,\n-        \"generate the transformation report.\");\n-    options.addOption(\"m\", \"model-config\", true,\n-        \"specify a model configuration for SCA transformation\");\n-    options.addOption(\"x\", true,\n-        \"override configuration option. Higher priority over base \" +\n-            \"configuration and user configuration.\");\n-    options.addOption(\"ap\", \"add-paren\", false,\n-        \"Force backend to add parenthesis in binary mathematical binary \" +\n-            \"operation.\");\n-    return options;\n-  }\n-\n-  /**\n-   * Parse the arguments passed to the program.\n-   *\n-   * @param args Arguments passed to the program.\n-   * @return Parsed command line object.\n-   */\n-  private static CommandLine processCommandArgs(String[] args)\n-  {\n-    try {\n-      Options options = prepareOptions();\n-      CommandLineParser parser = new DefaultParser();\n-      return parser.parse(options, args);\n-    } catch(ParseException pex) {\n-      error(ERR_INTERNAL, 0, 0, pex.getMessage());\n-      return null;\n-    }\n-  }\n-\n-  /**\n-   * Main point of entry of the program.\n-   *\n-   * @param args Arguments of the program.\n-   * @throws Exception if translation failed.\n-   */\n-  public static void main(String[] args) throws Exception {\n-    String input;\n-    String xcmlOutput;\n-    String targetLangOutput;\n-    String targetOption;\n-    String directiveOption;\n-    String configurationFile;\n-    String configurationPath;\n-    String modelConfiguration = null;\n-    int maxColumns = 0;\n-\n-    CommandLine cmd = processCommandArgs(args);\n-\n-    // Help option\n-    if(cmd == null || cmd.hasOption(\"h\")) {\n-      usage();\n-      return;\n-    }\n-\n-    // Display target list option\n-    if(cmd.hasOption(\"tl\")) {\n-      listTarget();\n-      return;\n-    }\n-\n-    // Display directive list option\n-    if(cmd.hasOption(\"dl\")) {\n-      listDirectiveLanguage();\n-      return;\n-    }\n-\n-    // Target option\n-    targetOption = cmd.getOptionValue(\"t\");\n-\n-    // Directive option\n-    directiveOption = cmd.getOptionValue(\"dir\");\n-\n-    // Suppressing line directive option\n-    if(cmd.hasOption(\"l\")) {\n-      XmOption.setIsSuppressLineDirective(true);\n-    }\n-\n-    // Debug option\n-    if(cmd.hasOption(\"d\")) {\n-      XmOption.setDebugOutput(true);\n-    }\n-\n-    // XcodeML/F output file option\n-    xcmlOutput = cmd.getOptionValue(\"o\");\n-\n-    // FORTRAN output file option\n-    targetLangOutput = cmd.getOptionValue(\"f\");\n-\n-    if(cmd.hasOption(\"w\")) {\n-      maxColumns = Integer.parseInt(cmd.getOptionValue(\"w\"));\n-    }\n-\n-    configurationFile = cmd.getOptionValue(\"c\");\n-    configurationPath = cmd.getOptionValue(\"cp\");\n-\n-    // Check that configuration path exists\n-    if(configurationPath == null) {\n-      error(ERR_INTERNAL, 0, 0, \"Configuration path missing.\");\n-      return;\n-    }\n-\n-    // Check that configuration file exists\n-    if(configurationFile != null) {\n-      File configFile = new File(configurationFile);\n-      if(!configFile.exists()) {\n-        error(ERR_INTERNAL, 0, 0, \"Configuration file not found: \"\n-            + configurationFile);\n-      }\n-    }\n-\n-    // Check if there is a model configuration and if file exists\n-    if(cmd.hasOption(\"m\")) {\n-      modelConfiguration = cmd.getOptionValue(\"m\");\n-      File modelConfig = new File(modelConfiguration);\n-      if(!modelConfig.exists()) {\n-        error(ClawConstant.ERROR_PREFIX_INTERNAL, 0, 0,\n-            \"Model configuration file not found: \" + modelConfiguration);\n-      }\n-    }\n-\n-    // --show-configuration option\n-    if(cmd.hasOption(\"sc\")) {\n-      Configuration.get().load(configurationPath, configurationFile,\n-          modelConfiguration, targetOption, directiveOption, maxColumns);\n-      Configuration.get().displayConfig();\n-      return;\n-    }\n-\n-    // Get the input XcodeML file to transform\n-    if(cmd.getArgs().length == 0) {\n-      input = null;\n-    } else {\n-      input = cmd.getArgs()[0];\n-    }\n-\n-    // Read the configuration file\n-    try {\n-      Configuration.get().load(configurationPath, configurationFile,\n-          modelConfiguration, targetOption, directiveOption, maxColumns);\n-    } catch(Exception ex) {\n-      error(ERR_INTERNAL, 0, 0, ex.getMessage());\n-      return;\n-    }\n-\n-    // Module search path options\n-    if(cmd.hasOption(\"M\")) {\n-      for(String value : cmd.getOptionValues(\"M\")) {\n-        Context.get().getModuleCache().addSearchPath(value);\n-      }\n-    }\n-\n-    // Override some configuration value.\n-    if(cmd.hasOption(\"x\")) {\n-      for(String keyValue : cmd.getOptionValues(\"x\")) {\n-        String key = keyValue.substring(0, keyValue.indexOf(\":\"));\n-        String value = keyValue.substring(keyValue.indexOf(\":\")+1);\n-        Configuration.get().overrideConfigurationParameter(key, value);\n-      }\n-    }\n-\n-    // Force pure option\n-    if(cmd.hasOption(\"fp\")) {\n-      Configuration.get().setForcePure();\n-    }\n-\n-    // Add parenthesis option\n-    if(cmd.hasOption(\"ap\")) {\n-      XmOption.setAddPar(true);\n-    }\n-\n-    ClawTranslatorDriver translatorDriver =\n-        new ClawTranslatorDriver(input, xcmlOutput);\n-\n-    translatorDriver.analyze();\n-    translatorDriver.transform();\n-    translatorDriver.flush();\n-\n-    // Produce report (unless we've used the Python driver)\n-    if(cmd.hasOption(\"r\")) {\n-      ClawTransformationReport report =\n-          new ClawTransformationReport(cmd.getOptionValue(\"r\"));\n-      report.generate(args, translatorDriver);\n-    }\n-\n-    // Decompile XcodeML/F to target language\n-    OmniBackendDriver backend;\n-    if(Configuration.get().getCurrentTarget() == Target.FPGA) {\n-      // TODO remove when supported\n-      error(xcmlOutput, 0, 0, \"FPGA target is not supported yet\");\n-      backend = new OmniBackendDriver(OmniBackendDriver.Lang.C);\n-    } else {\n-      backend = new OmniBackendDriver(OmniBackendDriver.Lang.FORTRAN);\n-    }\n-\n-    if(xcmlOutput == null) { // XcodeML output not written to file. Use pipe.\n-      if(!backend.decompile(targetLangOutput,\n-          translatorDriver.getTranslationUnit(), maxColumns,\n-          XmOption.isSuppressLineDirective()))\n-      {\n-        error(targetLangOutput, 0, 0, \"Unable to decompile XcodeML to Fortran\");\n-      }\n-    } else {\n-      if(!backend.decompileFromFile(targetLangOutput, xcmlOutput, maxColumns,\n-          XmOption.isSuppressLineDirective()))\n-      {\n-        error(xcmlOutput, 0, 0, \"Unable to decompile XcodeML to Fortran\");\n-      }\n-    }\n-  }\n-}"
  },
  {
    "sha": "dd4545611239d34259225da5f5bc24f670d5d800",
    "filename": "cx2t/src/claw/config/claw-default.xml",
    "status": "added",
    "additions": 142,
    "deletions": 0,
    "changes": 142,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-default.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-default.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/claw/config/claw-default.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -0,0 +1,142 @@\n+<!--\n+ This file is released under terms of BSD license\n+ See LICENSE file for more information\n+ @author: not specified\n+-->\n+<!--\n+CLAW default configuration. This file should not be edited!\n+For more information about the configuration file and its extension, please\n+refer to the developer's guide\n+-->\n+<claw version=\"2.0\">\n+  <!-- Global transformation parameters -->\n+  <global type=\"root\">\n+    <!-- Define the translator to be used. -->\n+    <parameter key=\"translator\" value=\"claw.wani.x2t.translator.ClawTranslator\" />\n+\n+    <!-- Default general values -->\n+    <parameter key=\"default_target\" value=\"gpu\" />\n+    <parameter key=\"default_directive\" value=\"openacc\" />\n+\n+    <!-- OpenACC default information -->\n+    <!--\n+      Define the default values to be used for the clauses.\n+      If value set to 0, compiler default value used.\n+      - acc_vector_length -> vector_length(128)\n+      - acc_num_gangs -> num_gangs(8)\n+      - acc_num_workers -> num_workers(8)\n+    -->\n+    <parameter key=\"acc_vector_length\" value=\"128\" />\n+    <parameter key=\"acc_num_gangs\" value=\"8\" />\n+    <parameter key=\"acc_num_workers\" value=\"8\" />\n+    <!--\n+      Specify the order of generation of clauses when nested loops are generated\n+      possible values are: gang_vector, vector, gang, none\n+    -->\n+    <parameter key=\"acc_execution_mode\" value=\"gang_vector\" />\n+\n+    <!-- OpenMP default information -->\n+    <!--\n+      Define the default values to be used for the clauses.\n+      If value set to 0, compiler default value used.\n+      - omp_num_teams -> num_teams(65536)\n+      - omp_num_threads -> num_threads(256)\n+      - omp_scheduler_chunk_size -> scheduler_chunk_size(256)\n+    -->\n+    <parameter key=\"omp_num_teams\" value=\"0\" />\n+    <parameter key=\"omp_num_threads\" value=\"0\" />\n+    <parameter key=\"omp_scheduler_chunk_size\" value=\"0\" />\n+    <!--\n+      Specify the order of generation of clauses when nested loops are generated\n+      possible values are teams_distribute, teams_distribute_simd, teams_distribute_parallel_do, teams_distribute_parallel_do_simd, none\n+    -->\n+    <parameter key=\"omp_execution_mode\" value=\"teams_distribute\" />\n+\n+\n+    <!-- Accelerator (OpenACC and OpenMP) default information -->\n+    <!--\n+      Data strategy influence how CLAW generates data region with SCA\n+      directive.\n+      - present: in/out arrays are present on GPU in SCA subroutine.\n+      - kernel: data region is generated by SCA kernel (subroutine).\n+                arrays are created in the kernel and data are move to/from\n+                device at the beginning/end of the subroutine.\n+      - none: no data region generated.\n+    -->\n+    <parameter key=\"accelerator_data_strategy\" value=\"present\" />\n+    <!--\n+      Local array strategy influence how CLAW handle the local arrays in\n+      SCA subroutine.\n+      - private: Privatize local arrays if needed.\n+      - promote: Promote the array instead of making them private if needed.\n+    -->\n+    <parameter key=\"accelerator_local_strategy\" value=\"private\" />\n+\n+    <!--\n+      Collapse DO statement when possible (!$claw nodep)\n+      - false: collapse clause is disable.\n+      - true: collapse clause is used when possible.\n+    -->\n+    <parameter key=\"accelerator_collapse\" value=\"false\" />\n+\n+    <!-- CPU transformation defaults -->\n+    <!--\n+      Which transformation should be used by default when transforming for CPU.\n+      - fusion: adjacent statements are grouped together and wrapped in a DO\n+                statement.\n+      - single: each assign statement is wrapped in a DO statement.\n+    -->\n+    <parameter key=\"cpu_trans_strategy\" value=\"fusion\" />\n+\n+    <!-- SCA defaults -->\n+    <!--\n+      How promotion is handle in SCA element function/subroutine. If true,\n+      newly added dimension are inserted as assumed shape and no new\n+      parameter is inserted in the function/subroutine signature. If false,\n+      the promotion is performed like in normal function/subroutine.\n+    -->\n+    <parameter key=\"sca_elemental_promotion_assumed\" value=\"true\" />\n+\n+    <!--\n+      This option allows to disable the update before/after sca forward in\n+      case the clause is specified. This also impacts the expand directive\n+      update clause.\n+    -->\n+    <parameter key=\"sca_forward_update_enabled\" value=\"true\" />\n+    <!-- value can be in, out or inout -->\n+    <parameter key=\"sca_forward_update_enabled_direction\" value=\"inout\" />\n+\n+    <!-- Enable generation of Serialbox2 library calls in SCA -->\n+    <parameter key=\"sca_serialization_enabled\" value=\"false\" />\n+    <!-- value can be read, write or all -->\n+    <parameter key=\"sca_serialization_enabled_direction\" value=\"all\" />\n+  </global>\n+\n+  <!-- Transformation sets -->\n+  <sets>\n+    <set name=\"claw-internal-set\" />\n+    <set name=\"claw-low-level-set\" />\n+    <set name=\"claw-high-level-set\" />\n+  </sets>\n+\n+  <!-- Transformation groups and order -->\n+  <groups>\n+    <!-- Low-level transformations -->\n+    <group name=\"remove\" />\n+    <group name=\"directive-primitive\" />\n+    <group name=\"expand\" />\n+    <group name=\"loop-extract\" />\n+    <group name=\"loop-hoist\" />\n+    <group name=\"loop-fusion\" />\n+    <group name=\"loop-interchange\" />\n+    <group name=\"on-the-fly\" />\n+    <group name=\"kcache\" />\n+    <group name=\"if-extract\" />\n+    <!-- High-level transformations -->\n+    <group name=\"sca-model-data\" />\n+    <group name=\"sca\" />\n+    <group name=\"sca-forward\" />\n+    <!-- internal applied at the end -->\n+    <group name=\"openacc-continuation\" />\n+  </groups>\n+</claw>"
  },
  {
    "sha": "8e17d4ec7f2b980c98c9cb227d33c732a9939610",
    "filename": "cx2t/src/claw/config/claw-external-set.xml",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-external-set.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-external-set.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/claw/config/claw-external-set.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -0,0 +1,13 @@\n+<!--\n+ This file is released under terms of BSD license\n+ See LICENSE file for more information\n+ @author: not specified\n+-->\n+<!--\n+This file describes CLAW external transformation.\n+-->\n+<transformations jar=\"claw-external-set.jar\">\n+  <transformation name=\"add-print\"\n+    type=\"independent\" trigger=\"translation_unit\"\n+    class=\"external.transformation.AddPrint\"/>\n+</transformations>"
  },
  {
    "sha": "0b16a790b739f38357eda36ceae777724419a0bb",
    "filename": "cx2t/src/claw/config/claw-high-level-set.xml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-high-level-set.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-high-level-set.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/claw/config/claw-high-level-set.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -0,0 +1,24 @@\n+<!--\n+ This file is released under terms of BSD license\n+ See LICENSE file for more information\n+ @author: not specified\n+-->\n+<!--\n+This file describe all high-level transformations included in the CLAW\n+Directive Language Specification.\n+\n+More information: https://github.com/C2SM-RCM/claw-language-specification\n+-->\n+<transformations>\n+  <transformation name=\"sca\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.sca.Sca\" />\n+\n+  <transformation name=\"sca-forward\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.sca.ScaForward\" />\n+\n+  <transformation name=\"sca-model-data\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.sca.ModelData\" />\n+</transformations>"
  },
  {
    "sha": "03b87a259f3bc9b4537017f747abd23eae3973ca",
    "filename": "cx2t/src/claw/config/claw-internal-set.xml",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-internal-set.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-internal-set.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/claw/config/claw-internal-set.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -0,0 +1,13 @@\n+<!--\n+ This file is released under terms of BSD license\n+ See LICENSE file for more information\n+ @author: not specified\n+-->\n+<!--\n+This file describes CLAW internal transformation not triggered by the user.\n+-->\n+<transformations>\n+  <transformation name=\"openacc-continuation\"\n+    type=\"independent\" trigger=\"directive\" directive=\"acc\"\n+    class=\"claw.wani.transformation.internal.OpenAccContinuation\" />\n+</transformations>"
  },
  {
    "sha": "04d48c26278f03bd7da13d80ef10224d842b7b30",
    "filename": "cx2t/src/claw/config/claw-low-level-set.xml",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/claw-project/claw-compiler/blob/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-low-level-set.xml",
    "raw_url": "https://github.com/claw-project/claw-compiler/raw/d9e7a5fee8a69a7525fe440a8a12bba73f9a1139/cx2t/src/claw/config/claw-low-level-set.xml",
    "contents_url": "https://api.github.com/repos/claw-project/claw-compiler/contents/cx2t/src/claw/config/claw-low-level-set.xml?ref=d9e7a5fee8a69a7525fe440a8a12bba73f9a1139",
    "patch": "@@ -0,0 +1,56 @@\n+<!--\n+ This file is released under terms of BSD license\n+ See LICENSE file for more information\n+ @author: not specified\n+-->\n+<!--\n+This file describe all low-level transformations included in the CLAW\n+language specifications.\n+\n+More information: https://github.com/C2SM-RCM/claw-language-specification\n+-->\n+<transformations>\n+  <!-- Directive -->\n+  <transformation name=\"directive-primitive\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.directive.DirectivePrimitive\" />\n+\n+  <!-- Loop -->\n+  <transformation name=\"expand\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.loop.ExpandNotation\" />\n+\n+  <transformation name=\"loop-extract\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.loop.LoopExtraction\" />\n+\n+  <transformation name=\"loop-hoist\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.loop.LoopHoist\" />\n+\n+  <transformation name=\"loop-fusion\"\n+    type=\"dependent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.loop.LoopFusion\" />\n+\n+  <transformation name=\"loop-interchange\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.loop.LoopInterchange\" />\n+\n+  <transformation name=\"if-extract\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.loop.IfExtract\" />\n+\n+  <!-- Utility -->\n+  <transformation name=\"on-the-fly\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.utility.ArrayToFctCall\" />\n+\n+  <transformation name=\"remove\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.utility.UtilityRemove\" />\n+\n+  <!-- Caching -->\n+  <transformation name=\"kcache\"\n+    type=\"independent\" trigger=\"directive\" directive=\"claw\"\n+    class=\"claw.wani.transformation.ll.caching.Kcaching\" />\n+</transformations>"
  }
]
