[
  {
    "sha": "fa0fb37b7c0d991d1368a2d98d925e7705651014",
    "filename": "ikasaneip/pom.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/6f29f47cb793036675c08153810079721565f069/ikasaneip/pom.xml",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/6f29f47cb793036675c08153810079721565f069/ikasaneip/pom.xml",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/pom.xml?ref=6f29f47cb793036675c08153810079721565f069",
    "patch": "@@ -710,7 +710,6 @@\n                 <module>recovery-manager</module>\n                 <module>flow</module>\n                 <module>configuration-service</module>\n-                <module>solr</module>\n                 <module>wiretap</module>\n                 <module>security</module>\n                 <module>rest</module>\n@@ -753,7 +752,6 @@\n                 <module>recovery-manager</module>\n                 <module>flow</module>\n                 <module>configuration-service</module>\n-                <module>solr</module>\n                 <module>wiretap</module>\n                 <module>security</module>\n                 <module>test</module>"
  },
  {
    "sha": "d9898ed7a7e30e1222428dbd73d6c4e93dffb9a6",
    "filename": "ikasaneip/solr/pom.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 66,
    "changes": 66,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/pom.xml",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/pom.xml",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/pom.xml?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,66 +0,0 @@\n-<!--\n-# //\n-# //\n-# // $Id$\n-# // $URL$\n-# //\n-# // ====================================================================\n-# // Ikasan Enterprise Integration Platform\n-# //\n-# // Distributed under the Modified BSD License.\n-# // Copyright notice: The copyright for this software and a full listing\n-# // of individual contributors are as shown in the packaged copyright.txt\n-# // file.\n-# //\n-# // All rights reserved.\n-# //\n-# // Redistribution and use in source and binary forms, with or without\n-# // modification, are permitted provided that the following conditions are met:\n-# //\n-# //  - Redistributions of source code must retain the above copyright notice,\n-# //    this list of conditions and the following disclaimer.\n-# //\n-# //  - Redistributions in binary form must reproduce the above copyright notice,\n-# //    this list of conditions and the following disclaimer in the documentation\n-# //    and/or other materials provided with the distribution.\n-# //\n-# //  - Neither the name of the ORGANIZATION nor the names of its contributors may\n-# //    be used to endorse or promote products derived from this software without\n-# //    specific prior written permission.\n-# //\n-# // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n-# // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-# // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n-# // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n-# // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-# // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n-# // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n-# // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n-# // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n-# // USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-# // ====================================================================\n-# //\n-# // Author:  Ikasan Development Team\n-# //\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-  <modelVersion>4.0.0</modelVersion>\n-\n-    <parent>\n-        <groupId>org.ikasan</groupId>\n-        <artifactId>ikasan-build</artifactId>\n-        <version>3.2.0-SNAPSHOT</version>\n-    </parent>\n-\n-    <artifactId>ikasan-solr</artifactId>\n-    <packaging>pom</packaging>\n-    <name>Ikasan Solr Implementation</name>\n-    <description>Ikasan EIP Solr Abstraction</description>\n-\n-    <modules>\n-        <module>solr-client</module>\n-        <module>solr-security</module>\n-        <module>solr-distribution</module>\n-    </modules>\n-\n-</project>"
  },
  {
    "sha": "7fee5fc631e1e8cde7427b3bcb7b452202b6ab60",
    "filename": "ikasaneip/solr/readme.md",
    "status": "removed",
    "additions": 0,
    "deletions": 102,
    "changes": 102,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/readme.md",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/readme.md",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/readme.md?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,102 +0,0 @@\n-![IKASAN](../developer/docs/quickstart-images/Ikasan-title-transparent.png)\n-# Ikasan Solr\n-Solr Reference Guide\n-\n-Solr Online Documentation: [Solr Reference Guide](https://lucene.apache.org/solr/guide/)\n-\n-### Building the Solr Installation\n-The solr-distribution module is responsible for creating an Ikasan ready version of \n-a solr distribution. In order to build the distribution:\n-\n-````text \n-cd solr-distribution\n-mvn clean install\n-````\n-\n-A zip file will be created under the /target directory in the form ikasan-solr-<solr.version>.zip and\n-a zip file will also be pushed to your local maven repository with pom reference:\n-\n-````text \n-<groupId>org.ikasan</groupId>\n-<artifactId>ikasan-solr-distribution</artifactId>\n-<version>${version.ikasan}</version>\n-````\n-\n-### Installing Solr\n-\n-````text \n-cd to <solr-installation-directory> location and copy <ikasan-solr-distribution>.zip to this location\n-unzip -d solr <kasan-solr-distribution>.zip\n-````\n-\n-### Controlling Solr\n-\n-````text \n-cd <solr-installation-directory>/solr/bin\n-````\n-\n-````text \n-# Start solr\n-bin/solr start\n-````\n-\n-````text \n-# Stop solr\n-bin/solr stop\n-````\n- \n-````text \n-# Check solr status\n-bin/solr status\n-````\n-\n-For more information on please see the solr control script documentation.\n-\n-### Solr Logging\n-\n-Solr logs to the following location.\n-\n-````text\n-#Solr logging directory\n-<solr-installation-directory>/solr/server/logs/\n-````\n-\n-### Solr Index Location\n-\n-The solr index can be found at the following location.\n-\n-````text\n-#Solr index location\n-<solr-installation-directory>/solr/server/solr/ikasan/data\n-````\n-\n-### Configuring Solr to point at the index location\n-It is possible to configure solr to point at another location to store the data index. \n-\n-````text\n-vi <solr-installation-directory>/solr/server/solr/ikasan/conf/solrconfig.xml\n-# Update the Solr data directory to point at the relevant mount by modifying the relevant line in the solrconfig.xml file to \n-<dataDir>/opt/<env>index/solr/${solr.core.name}</dataDir> \n-````\n-\n-### Solr Security\n-\n-Solr is constrained by HTTP basic authentication. In order to initialise basic authentication a file called <solr-installation-directory>/solr/server/solr/security.json has been included in the Ikasan distribution.\n-This file contains the authentication details along with the security roles. \n-\n-The default **ikasan:1ka5an** credentials are created as part of the Ikasan distribution.\n-\n-All administration of Solr security is performed via the exposed http services as seen below. See the Solr security reference for further information.\n-\n-````text\n-# Sample command to add a new user to Solr\n-curl --user ikasan:1ka5an http://localhost:8983/solr/admin/authentication -H 'Content-type:application/json' -d '{\"set-user\": {\"<new-user>\":\"<new-password>\"}}'\n- \n-# Give the new user the admin role\n-curl -u ikasan:1ka5an -H 'Content-type:application/json' -d '{\n-   \"set-user-role\" : {\"<new-username>\": [\"admin\"]}\n-}' http://localhost:8983/solr/admin/authorization\n-\n-# You may wish to delete the default ikasan solr user once you have created your own admin user.\n-curl --user ikasan:1ka5an http://localhost:8983/solr/admin/authentication -H 'Content-type:application/json' -d  '{\"delete-user\": [\"ikasan\"]}'\n-````"
  },
  {
    "sha": "5a2881a5bbb21a30dcc0adb9178225845dd50f30",
    "filename": "ikasaneip/solr/solr-client/pom.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 257,
    "changes": 257,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/pom.xml",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/pom.xml",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/pom.xml?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,257 +0,0 @@\n-<!--\n-# //\n-# //\n-# // $Id$\n-# // $URL$\n-# //\n-# // ====================================================================\n-# // Ikasan Enterprise Integration Platform\n-# //\n-# // Distributed under the Modified BSD License.\n-# // Copyright notice: The copyright for this software and a full listing\n-# // of individual contributors are as shown in the packaged copyright.txt\n-# // file.\n-# //\n-# // All rights reserved.\n-# //\n-# // Redistribution and use in source and binary forms, with or without\n-# // modification, are permitted provided that the following conditions are met:\n-# //\n-# //  - Redistributions of source code must retain the above copyright notice,\n-# //    this list of conditions and the following disclaimer.\n-# //\n-# //  - Redistributions in binary form must reproduce the above copyright notice,\n-# //    this list of conditions and the following disclaimer in the documentation\n-# //    and/or other materials provided with the distribution.\n-# //\n-# //  - Neither the name of the ORGANIZATION nor the names of its contributors may\n-# //    be used to endorse or promote products derived from this software without\n-# //    specific prior written permission.\n-# //\n-# // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n-# // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-# // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n-# // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n-# // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-# // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n-# // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n-# // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n-# // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n-# // USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-# // ====================================================================\n-# //\n-# // Author:  Ikasan Development Team\n-# //\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-  <modelVersion>4.0.0</modelVersion>\n-\n-    <parent>\n-        <groupId>org.ikasan</groupId>\n-        <artifactId>ikasan-solr</artifactId>\n-        <version>3.2.0-SNAPSHOT</version>\n-    </parent>\n-\n-    <artifactId>ikasan-solr-client</artifactId>\n-    <packaging>jar</packaging>\n-    <name>Ikasan Solr Client Implementation</name>\n-    <description>Ikasan EIP Solr Client Abstraction</description>\n-\n-    <dependencies>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-solr</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-replay</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-wiretap</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-exclusion</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-error-reporting</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-search</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-hospital</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-system-event</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-management</artifactId>\n-            <scope>provided</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-history</artifactId>\n-            <scope>provided</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-housekeeping</artifactId>\n-            <scope>provided</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-serialiser</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-configuration</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-module</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-persistence</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.ikasan</groupId>\n-            <artifactId>ikasan-spec-metadata</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.apache.httpcomponents</groupId>\n-            <artifactId>httpclient</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.apache.solr</groupId>\n-            <artifactId>solr-solrj</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>commons-io</groupId>\n-            <artifactId>commons-io</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.slf4j</groupId>\n-            <artifactId>slf4j-api</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-databind</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-core</artifactId>\n-        </dependency>\n-\n-        <!-- required for unit tests -->\n-        <dependency>\n-            <groupId>org.apache.solr</groupId>\n-            <artifactId>solr-core</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.apache.solr</groupId>\n-            <artifactId>solr-test-framework</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-server</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.eclipse.jetty</groupId>\n-            <artifactId>jetty-util</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring-test</artifactId>\n-             <scope>test</scope>\n-        </dependency>\n-        \n-        <dependency>\n-\t        <groupId>org.springframework</groupId>\n-\t        <artifactId>spring-context</artifactId>\n-\t        <scope>test</scope>\n-\t    </dependency>\n-\n-\t\t<dependency>\n-\t\t    <groupId>org.aspectj</groupId>\n-\t\t    <artifactId>aspectjweaver</artifactId>\n-\t\t    <scope>test</scope>\n-\t\t</dependency>\n-\n-        <dependency>\n-            <groupId>org.jmock</groupId>\n-            <artifactId>jmock</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.jmock</groupId>\n-            <artifactId>jmock-legacy</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.javassist</groupId>\n-            <artifactId>javassist</artifactId>\n-              <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>junit</groupId>\n-            <artifactId>junit</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-\n-    </dependencies>\n-\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-surefire-plugin</artifactId>\n-                <configuration>\n-                    <argLine>-Dtest.solr.allow.any.securerandom=true -Djava.security.egd=file:/dev/./urandom</argLine>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n-\n-</project>"
  },
  {
    "sha": "fbbd878d87136a76a7b19ea3e0a96a9e4ad939d7",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/dao/SolrBusinessStreamMetadataDao.java",
    "status": "removed",
    "additions": 0,
    "deletions": 191,
    "changes": 191,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/dao/SolrBusinessStreamMetadataDao.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/dao/SolrBusinessStreamMetadataDao.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/dao/SolrBusinessStreamMetadataDao.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,191 +0,0 @@\n-package org.ikasan.business.stream.metadata.dao;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import org.apache.solr.client.solrj.SolrQuery;\n-import org.apache.solr.client.solrj.request.QueryRequest;\n-import org.apache.solr.client.solrj.response.QueryResponse;\n-import org.apache.solr.common.SolrInputDocument;\n-import org.ikasan.business.stream.metadata.model.BusinessStreamMetaDataImpl;\n-import org.ikasan.spec.metadata.BusinessStreamMetadataSearchResults;\n-import org.ikasan.business.stream.metadata.model.SolrBusinessStream;\n-import org.ikasan.module.metadata.model.SolrFlowElementMetaDataImpl;\n-import org.ikasan.module.metadata.model.SolrFlowMetaDataImpl;\n-import org.ikasan.module.metadata.model.SolrModuleMetaDataImpl;\n-import org.ikasan.module.metadata.model.SolrTransitionImpl;\n-import org.ikasan.spec.metadata.*;\n-import org.ikasan.spec.solr.SolrConstants;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Created by Ikasan Development Team on 14/02/2017.\n- */\n-public class SolrBusinessStreamMetadataDao extends SolrDaoBase<SolrBusinessStream>\n-{\n-    /** Logger for this class */\n-    private static Logger logger = LoggerFactory.getLogger(SolrBusinessStreamMetadataDao.class);\n-\n-    /**\n-     * We need to give this dao it's context.\n-     */\n-    public static final String BUSINESS_STREAM_METADATA = \"businessStreamMetaData\";\n-\n-    private ObjectMapper objectMapper;\n-\n-    public SolrBusinessStreamMetadataDao()\n-    {\n-        this.objectMapper = new ObjectMapper();\n-\n-        SimpleModule m = new SimpleModule();\n-        m.addAbstractTypeMapping(ModuleMetaData.class, SolrModuleMetaDataImpl.class);\n-        m.addAbstractTypeMapping(FlowMetaData.class, SolrFlowMetaDataImpl.class);\n-        m.addAbstractTypeMapping(FlowElementMetaData.class, SolrFlowElementMetaDataImpl.class);\n-        m.addAbstractTypeMapping(Transition.class, SolrTransitionImpl.class);\n-\n-        objectMapper.registerModule(m);\n-    }\n-\n-    @Override\n-    protected SolrInputDocument convertEntityToSolrInputDocument(Long expiry, SolrBusinessStream businessStreamMetaData)\n-    {\n-        SolrInputDocument document = new SolrInputDocument();\n-        document.addField(ID, \"businessStream-\"+businessStreamMetaData.getId());\n-        document.addField(TYPE, BUSINESS_STREAM_METADATA);\n-        document.addField(MODULE_NAME, businessStreamMetaData.getName());\n-        document.addField(FLOW_NAME, businessStreamMetaData.getDescription());\n-        document.addField(PAYLOAD_CONTENT, businessStreamMetaData.getBusinessStreamMetaData());\n-        document.addField(CREATED_DATE_TIME, System.currentTimeMillis());\n-\n-        return document;\n-    }\n-\n-    public BusinessStreamMetaData findById(String id)\n-    {\n-        String queryString = \"id:\\\"\" + id + \"\\\" AND type:\\\"\" + BUSINESS_STREAM_METADATA + \"\\\"\";\n-\n-        logger.debug(\"queryString: \" + queryString);\n-\n-        SolrQuery query = new SolrQuery();\n-        query.setQuery(queryString);\n-\n-        List<SolrBusinessStream> beans = this.findByQuery(query);\n-\n-        if(beans.size() > 0 && beans.get(0) != null)\n-        {\n-            return convert(beans.get(0));\n-        }\n-        else\n-        {\n-            return null;\n-        }\n-    }\n-\n-    public BusinessStreamMetadataSearchResults find(List<String> businessStreamNames, Integer startOffset, Integer resultSize)\n-    {\n-        String queryString = \"type:\\\"\" + BUSINESS_STREAM_METADATA + \"\\\"\";\n-\n-        SolrQuery query = new SolrQuery();\n-        query.setQuery(queryString);\n-        query.setStart(startOffset);\n-        query.setRows(resultSize);\n-\n-        StringBuffer businessStreamNamesBuffer = new StringBuffer();\n-\n-        if(businessStreamNames != null && businessStreamNames.size() > 0)\n-        {\n-            businessStreamNamesBuffer.append(this.buildPredicate(MODULE_NAME, businessStreamNames));\n-        }\n-\n-        query.setFilterQueries(businessStreamNamesBuffer.toString());\n-\n-        BusinessStreamMetadataSearchResults results;\n-\n-        try\n-        {\n-            QueryRequest req = new QueryRequest(query);\n-            req.setBasicAuthCredentials(this.solrUsername, this.solrPassword);\n-\n-            QueryResponse rsp = req.process(this.solrClient, SolrConstants.CORE);\n-\n-            List<SolrBusinessStream> beans = rsp.getBeans(SolrBusinessStream.class);\n-\n-            results = new BusinessStreamMetadataSearchResults(beans.stream()\n-                .map(solrBusinessStream -> convert(solrBusinessStream))\n-                .collect(Collectors.toList()), rsp.getResults().getNumFound(), rsp.getQTime());\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"Error resolving solr business stream meta data by query [\" + query + \"] from the ikasan solr index!\", e);\n-        }\n-\n-       return results;\n-    }\n-\n-    public List<BusinessStreamMetaData> findAll(Integer startOffset, Integer resultSize)\n-    {\n-        String queryString = \"type:\\\"\" + BUSINESS_STREAM_METADATA + \"\\\"\";\n-\n-        SolrQuery query = new SolrQuery();\n-        query.setQuery(queryString);\n-        query.setStart(startOffset);\n-        query.setRows(resultSize);\n-\n-        List<SolrBusinessStream> beans = this.findByQuery(query);\n-\n-        return beans.stream()\n-                    .map(solrBusinessStream -> convert(solrBusinessStream))\n-                    .collect(Collectors.toList());\n-    }\n-\n-    public void delete(String id)\n-    {\n-        this.removeById(BUSINESS_STREAM_METADATA, id);\n-        }\n-\n-    /**\n-     * Helper method to find by query.\n-     *\n-     * @param query\n-     */\n-    private List<SolrBusinessStream> findByQuery(SolrQuery query)\n-    {\n-        logger.debug(\"queryString: \" + query);\n-\n-        try\n-        {\n-            QueryRequest req = new QueryRequest(query);\n-            req.setBasicAuthCredentials(this.solrUsername, this.solrPassword);\n-\n-            QueryResponse rsp = req.process(this.solrClient, SolrConstants.CORE);\n-\n-            return rsp.getBeans(SolrBusinessStream.class);\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"Error resolving solr module meta data by query [\" + query + \"] from the ikasan solr index!\", e);\n-        }\n-    }\n-\n-    /**\n-     * Helper method to convert raw business stream metadata.\n-     *\n-     * @param businessStreamDocument\n-     * @return\n-     */\n-    private BusinessStreamMetaData convert(SolrBusinessStream businessStreamDocument)\n-    {\n-        BusinessStreamMetaData businessStreamMetaData = new BusinessStreamMetaDataImpl();\n-        businessStreamMetaData.setId(businessStreamDocument.getId());\n-        businessStreamMetaData.setName(businessStreamDocument.getName());\n-        businessStreamMetaData.setDescription(businessStreamDocument.getDescription());\n-        businessStreamMetaData.setJson(businessStreamDocument.getBusinessStreamMetaData());\n-\n-        return businessStreamMetaData;\n-    }\n-\n-}"
  },
  {
    "sha": "eb24fb66fb70bc22fc71570ef8b3b6a424135fca",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStream.java",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStream.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStream.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStream.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,52 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class BusinessStream\n-{\n-    private List<Flow> flows = new ArrayList<>();\n-    private List<Destination> destinations = new ArrayList<>();\n-    private List<IntegratedSystem> integratedSystems = new ArrayList<>();\n-    private List<Edge> edges = new ArrayList<>();\n-\n-    public List<Flow> getFlows()\n-    {\n-        return flows;\n-    }\n-\n-    public void setFlows(List<Flow> flows)\n-    {\n-        this.flows = flows;\n-    }\n-\n-    public List<Destination> getDestinations()\n-    {\n-        return destinations;\n-    }\n-\n-    public void setDestinations(List<Destination> destinations)\n-    {\n-        this.destinations = destinations;\n-    }\n-\n-    public List<IntegratedSystem> getIntegratedSystems()\n-    {\n-        return integratedSystems;\n-    }\n-\n-    public void setIntegratedSystems(List<IntegratedSystem> integratedSystems)\n-    {\n-        this.integratedSystems = integratedSystems;\n-    }\n-\n-    public List<Edge> getEdges()\n-    {\n-        return edges;\n-    }\n-\n-    public void setEdges(List<Edge> edges)\n-    {\n-        this.edges = edges;\n-    }\n-}"
  },
  {
    "sha": "24a05661c9044fefeb090e8c65a1375e142586b6",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStreamMetaDataImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 71,
    "changes": 71,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStreamMetaDataImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStreamMetaDataImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/BusinessStreamMetaDataImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,71 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import org.ikasan.spec.metadata.BusinessStreamMetaData;\n-\n-public class BusinessStreamMetaDataImpl implements BusinessStreamMetaData<BusinessStream>\n-{\n-    private String id;\n-    private String name;\n-    private String description;\n-    private String json;\n-\n-    @Override\n-    public String getId()\n-    {\n-        return id;\n-    }\n-\n-    @Override\n-    public void setId(String id)\n-    {\n-        this.id = id;\n-    }\n-\n-    @Override\n-    public String getName()\n-    {\n-        return name;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    @Override\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    @Override\n-    public void setName(String name)\n-    {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public String getJson()\n-    {\n-        return this.json;\n-    }\n-\n-    @Override\n-    public void setJson(String json)\n-    {\n-        this.json = json;\n-    }\n-\n-    @Override\n-    public BusinessStream getBusinessStream() {\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        try {\n-            return mapper.readValue(this.json, BusinessStream.class);\n-        }\n-        catch (JsonProcessingException e) {\n-            throw new RuntimeException(\"Could not map business stream from JSON\", e);\n-        }\n-    }\n-}"
  },
  {
    "sha": "cb4bf10dcd129a71c063220ac350d0dce07acff2",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Correlator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 27,
    "changes": 27,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Correlator.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Correlator.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Correlator.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,27 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-public class Correlator\n-{\n-    private String type;\n-    private String query;\n-\n-    public String getType()\n-    {\n-        return type;\n-    }\n-\n-    public void setType(String type)\n-    {\n-        this.type = type;\n-    }\n-\n-    public String getQuery()\n-    {\n-        return query;\n-    }\n-\n-    public void setQuery(String query)\n-    {\n-        this.query = query;\n-    }\n-}"
  },
  {
    "sha": "bc3002cd0276a346589dbba3731ad11912728c2c",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Destination.java",
    "status": "removed",
    "additions": 0,
    "deletions": 51,
    "changes": 51,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Destination.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Destination.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Destination.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,51 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-public class Destination\n-{\n-    private String id;\n-    private String name;\n-    private Integer x;\n-    private Integer y;\n-\n-\n-    public String getId()\n-    {\n-        return id;\n-    }\n-\n-    public void setId(String id)\n-    {\n-        this.id = id;\n-    }\n-\n-    public String getName()\n-    {\n-        return name;\n-    }\n-\n-    public void setName(String name)\n-    {\n-        this.name = name;\n-    }\n-\n-    public Integer getX()\n-    {\n-        return x;\n-    }\n-\n-    public void setX(Integer x)\n-    {\n-        this.x = x;\n-    }\n-\n-    public Integer getY()\n-    {\n-        return y;\n-    }\n-\n-    public void setY(Integer y)\n-    {\n-        this.y = y;\n-    }\n-\n-}"
  },
  {
    "sha": "234c24eb86970bb8a3cc75d90a12022bf486e9ff",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Edge.java",
    "status": "removed",
    "additions": 0,
    "deletions": 28,
    "changes": 28,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Edge.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Edge.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Edge.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,28 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-public class Edge\n-{\n-    private String from;\n-    private String to;\n-\n-\n-    public String getFrom()\n-    {\n-        return from;\n-    }\n-\n-    public void setFrom(String from)\n-    {\n-        this.from = from;\n-    }\n-\n-    public String getTo()\n-    {\n-        return to;\n-    }\n-\n-    public void setTo(String to)\n-    {\n-        this.to = to;\n-    }\n-}"
  },
  {
    "sha": "aa2be5d8c6e131add00073e9b8165bf012059f6f",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Flow.java",
    "status": "removed",
    "additions": 0,
    "deletions": 70,
    "changes": 70,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Flow.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Flow.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/Flow.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,70 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-public class Flow\n-{\n-    private Correlator correlator;\n-    private String id;\n-    private String moduleName;\n-    private String flowName;\n-    private Integer x;\n-    private Integer y;\n-\n-\n-    public String getId()\n-    {\n-        return id;\n-    }\n-\n-    public void setId(String id)\n-    {\n-        this.id = id;\n-    }\n-\n-    public String getModuleName() {\n-        return moduleName;\n-    }\n-\n-    public void setModuleName(String moduleName) {\n-        this.moduleName = moduleName;\n-    }\n-\n-    public String getFlowName()\n-    {\n-        return flowName;\n-    }\n-\n-    public void setFlowName(String flowName)\n-    {\n-        this.flowName = flowName;\n-    }\n-\n-    public Integer getX()\n-    {\n-        return x;\n-    }\n-\n-    public void setX(Integer x)\n-    {\n-        this.x = x;\n-    }\n-\n-    public Integer getY()\n-    {\n-        return y;\n-    }\n-\n-    public void setY(Integer y)\n-    {\n-        this.y = y;\n-    }\n-\n-    public Correlator getCorrelator()\n-    {\n-        return correlator;\n-    }\n-\n-    public void setCorrelator(Correlator correlator)\n-    {\n-        this.correlator = correlator;\n-    }\n-}"
  },
  {
    "sha": "ba4401adfb237acd1b331e5727011b2d802d6097",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/IntegratedSystem.java",
    "status": "removed",
    "additions": 0,
    "deletions": 50,
    "changes": 50,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/IntegratedSystem.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/IntegratedSystem.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/IntegratedSystem.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,50 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-public class IntegratedSystem\n-{\n-    private String id;\n-    private String name;\n-    private Integer x;\n-    private Integer y;\n-\n-\n-    public String getId()\n-    {\n-        return id;\n-    }\n-\n-    public void setId(String id)\n-    {\n-        this.id = id;\n-    }\n-\n-    public String getName()\n-    {\n-        return name;\n-    }\n-\n-    public void setName(String name)\n-    {\n-        this.name = name;\n-    }\n-\n-    public Integer getX()\n-    {\n-        return x;\n-    }\n-\n-    public void setX(Integer x)\n-    {\n-        this.x = x;\n-    }\n-\n-    public Integer getY()\n-    {\n-        return y;\n-    }\n-\n-    public void setY(Integer y)\n-    {\n-        this.y = y;\n-    }\n-}"
  },
  {
    "sha": "844a5a91e5028b1d8f596a14b4352cd2b64868db",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/SolrBusinessStream.java",
    "status": "removed",
    "additions": 0,
    "deletions": 58,
    "changes": 58,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/SolrBusinessStream.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/SolrBusinessStream.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/model/SolrBusinessStream.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,58 +0,0 @@\n-package org.ikasan.business.stream.metadata.model;\n-\n-import org.apache.solr.client.solrj.beans.Field;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-\n-public class SolrBusinessStream\n-{\n-    @Field(SolrDaoBase.ID)\n-    private String id;\n-\n-    @Field(SolrDaoBase.MODULE_NAME)\n-    private String name;\n-\n-    @Field(SolrDaoBase.FLOW_NAME)\n-    private String description;\n-\n-    @Field(SolrDaoBase.PAYLOAD_CONTENT)\n-    private String businessStreamMetadata;\n-\n-\n-    public String getId()\n-    {\n-        return this.id;\n-    }\n-\n-    public String getName()\n-    {\n-        return name;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public String getBusinessStreamMetaData()\n-    {\n-        return this.businessStreamMetadata;\n-    }\n-\n-    public void setId(String id)\n-    {\n-        this.id = id;\n-    }\n-\n-    public void setName(String name)\n-    {\n-        this.name = name;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    public void setRawBusinessStreamMetadata(String businessStreamMetadata)\n-    {\n-        this.businessStreamMetadata = businessStreamMetadata;\n-    }\n-}"
  },
  {
    "sha": "d8b128495eac21f1de9e6407440a291d4c2934b6",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/service/SolrBusinessStreamMetaDataServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 66,
    "changes": 66,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/service/SolrBusinessStreamMetaDataServiceImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/service/SolrBusinessStreamMetaDataServiceImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/business/stream/metadata/service/SolrBusinessStreamMetaDataServiceImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,66 +0,0 @@\n-package org.ikasan.business.stream.metadata.service;\n-\n-import org.ikasan.business.stream.metadata.dao.SolrBusinessStreamMetadataDao;\n-import org.ikasan.spec.metadata.BusinessStreamMetadataSearchResults;\n-import org.ikasan.business.stream.metadata.model.SolrBusinessStream;\n-import org.ikasan.spec.metadata.BusinessStreamMetaData;\n-import org.ikasan.spec.metadata.BusinessStreamMetaDataService;\n-import org.ikasan.spec.solr.SolrServiceBase;\n-\n-import java.util.List;\n-\n-public class SolrBusinessStreamMetaDataServiceImpl extends SolrServiceBase implements BusinessStreamMetaDataService<BusinessStreamMetaData>\n-{\n-    private SolrBusinessStreamMetadataDao dao;\n-\n-    public SolrBusinessStreamMetaDataServiceImpl(SolrBusinessStreamMetadataDao dao)\n-    {\n-        this.dao = dao;\n-    }\n-\n-    @Override\n-    public BusinessStreamMetaData findById(String id)\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        return dao.findById(id);\n-    }\n-\n-    @Override\n-    public List<BusinessStreamMetaData> findAll(Integer startOffset, Integer resultSize)\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        return this.dao.findAll(startOffset, resultSize);\n-    }\n-\n-    @Override\n-    public BusinessStreamMetadataSearchResults find(List<String> businessStreamNames, Integer startOffset, Integer resultSize)\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        return this.dao.find(businessStreamNames, startOffset, resultSize);\n-    }\n-\n-    @Override\n-    public void save(BusinessStreamMetaData metaData)\n-    {\n-        SolrBusinessStream solrBusinessStream = new SolrBusinessStream();\n-        solrBusinessStream.setId(metaData.getId());\n-        solrBusinessStream.setName(metaData.getName());\n-        solrBusinessStream.setDescription(metaData.getDescription());\n-        solrBusinessStream.setRawBusinessStreamMetadata(metaData.getJson());\n-\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        this.dao.save(solrBusinessStream);\n-    }\n-\n-    @Override\n-    public void delete(String id)\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        this.dao.delete(id);\n-    }\n-}"
  },
  {
    "sha": "8d8f9bf2fb24ffb40dc9fd3a79139c9a8715fb5b",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/dao/SolrComponentConfigurationMetadataDao.java",
    "status": "removed",
    "additions": 0,
    "deletions": 178,
    "changes": 178,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/dao/SolrComponentConfigurationMetadataDao.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/dao/SolrComponentConfigurationMetadataDao.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/dao/SolrComponentConfigurationMetadataDao.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,178 +0,0 @@\n-package org.ikasan.configuration.metadata.dao;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import org.apache.solr.client.solrj.SolrQuery;\n-import org.apache.solr.client.solrj.request.QueryRequest;\n-import org.apache.solr.client.solrj.request.UpdateRequest;\n-import org.apache.solr.client.solrj.response.QueryResponse;\n-import org.apache.solr.common.SolrInputDocument;\n-import org.ikasan.configuration.metadata.model.SolrComponentConfiguration;\n-import org.ikasan.configuration.metadata.model.SolrConfigurationMetaData;\n-import org.ikasan.spec.metadata.ConfigurationMetaData;\n-import org.ikasan.spec.solr.SolrConstants;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Created by Ikasan Development Team on 14/02/2017.\n- */\n-public class SolrComponentConfigurationMetadataDao extends SolrDaoBase<ConfigurationMetaData>\n-{\n-    /** Logger for this class */\n-    private static Logger logger = LoggerFactory.getLogger(SolrComponentConfigurationMetadataDao.class);\n-\n-    /**\n-     * We need to give this hibernate it's context.\n-     */\n-    public static final String COMPONENT_CONFIGURATION = \"componentConfiguration\";\n-\n-    private ObjectMapper objectMapper;\n-\n-    public SolrComponentConfigurationMetadataDao()\n-    {\n-        this.objectMapper = new ObjectMapper();\n-    }\n-\n-    public void save(List<ConfigurationMetaData> configurationMetaDataList)\n-    {\n-        try\n-        {\n-            UpdateRequest req = new UpdateRequest();\n-            req.setBasicAuthCredentials(this.solrUsername, this.solrPassword);\n-\n-            for(ConfigurationMetaData configurationMetaData: configurationMetaDataList)\n-            {\n-                super.removeById(COMPONENT_CONFIGURATION, configurationMetaData.getConfigurationId());\n-\n-                SolrInputDocument document = convertEntityToSolrInputDocument(null,configurationMetaData);\n-                req.add(document);\n-\n-                logger.debug(\"Adding document: \" + document);\n-            }\n-\n-\n-            commitSolrRequest(req);\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"An exception has occurred attempting to write a component configuration to Solr\", e);\n-        }\n-    }\n-\n-    @Override\n-    protected SolrInputDocument convertEntityToSolrInputDocument(Long expiry, ConfigurationMetaData configurationMetaData)\n-    {\n-        SolrInputDocument document = new SolrInputDocument();\n-        document.addField(ID, configurationMetaData.getConfigurationId());\n-        document.addField(TYPE, COMPONENT_CONFIGURATION);\n-        try\n-        {\n-            document.addField(PAYLOAD_CONTENT, objectMapper.writeValueAsString(configurationMetaData));\n-        }\n-        catch (JsonProcessingException e)\n-        {\n-            throw new RuntimeException(\"Unable to convert [\"+configurationMetaData+\"] to json format.\");\n-        }\n-        document.addField(CREATED_DATE_TIME, System.currentTimeMillis());\n-\n-        return document;\n-    }\n-\n-    public ConfigurationMetaData findById(String id)\n-    {\n-        String queryString = \"id:\\\"\" + id + \"\\\" AND type: \\\"\" + COMPONENT_CONFIGURATION + \"\\\"\";\n-\n-        logger.debug(\"queryString: \" + queryString);\n-\n-        List<SolrComponentConfiguration> beans = this.findByQuery(queryString);\n-\n-        if(beans.size() > 0 && beans.get(0).getRawConfigurationMetadata() != null)\n-        {\n-            return this.convert(beans.get(0).getRawConfigurationMetadata());\n-        }\n-        else\n-        {\n-            return null;\n-        }\n-    }\n-\n-    public List<ConfigurationMetaData> findAll()\n-    {\n-        String queryString = \"type: \\\"\" + COMPONENT_CONFIGURATION + \"\\\"\";\n-\n-        logger.debug(\"queryString: \" + queryString);\n-\n-        List<SolrComponentConfiguration> beans = this.findByQuery(queryString);\n-\n-        return beans.stream().map(bean -> convert(bean.getRawConfigurationMetadata())).collect(Collectors.toList());\n-    }\n-\n-    public List<ConfigurationMetaData> findInIdList(List<String> configurationIds)\n-    {\n-        StringBuffer queryString = new StringBuffer(\"type: \\\"\").append(COMPONENT_CONFIGURATION).append(\"\\\"\");\n-        queryString.append(\" AND id:(\");\n-\n-        configurationIds.forEach(id -> {\n-            queryString.append(\"\\\"\").append(id).append(\"\\\",\");\n-        });\n-\n-        queryString.append(\")\");\n-\n-        logger.debug(\"queryString: \" + queryString);\n-\n-        List<SolrComponentConfiguration> beans = this.findByQuery(queryString.toString());\n-\n-        return beans.stream().map(bean -> convert(bean.getRawConfigurationMetadata())).collect(Collectors.toList());\n-    }\n-\n-    private SolrConfigurationMetaData convert(String solrComponentConfiguration)\n-    {\n-        try\n-        {\n-            SolrConfigurationMetaData solrConfigurationMetaData\n-                = objectMapper.readValue(solrComponentConfiguration, SolrConfigurationMetaData.class);\n-\n-            return solrConfigurationMetaData;\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(String.format(\"Unable to deserialise ConfigurationMetaData [%s]\"\n-                , solrComponentConfiguration), e);\n-        }\n-    }\n-\n-    /**\n-     * Helper method to perform query.\n-     *\n-     * @param queryString\n-     * @return\n-     */\n-    private List<SolrComponentConfiguration> findByQuery(String queryString)\n-    {\n-        logger.debug(\"queryString: \" + queryString);\n-\n-        SolrQuery query = new SolrQuery();\n-        query.setStart(0);\n-        query.setRows(1000);\n-        query.setQuery(queryString);\n-\n-        try\n-        {\n-            QueryRequest req = new QueryRequest(query);\n-            req.setBasicAuthCredentials(this.solrUsername, this.solrPassword);\n-\n-            QueryResponse rsp = req.process(this.solrClient, SolrConstants.CORE);\n-\n-            return rsp.getBeans(SolrComponentConfiguration.class);\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"Error resolving solr component configuration by query [\" + queryString + \"] from the ikasan solr index!\", e);\n-        }\n-    }\n-}"
  },
  {
    "sha": "60ecfe45ac5d24a38441b42a678c84731692ea6b",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrComponentConfiguration.java",
    "status": "removed",
    "additions": 0,
    "deletions": 37,
    "changes": 37,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrComponentConfiguration.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrComponentConfiguration.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrComponentConfiguration.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,37 +0,0 @@\n-package org.ikasan.configuration.metadata.model;\n-\n-import org.apache.solr.client.solrj.beans.Field;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class SolrComponentConfiguration\n-{\n-    private static Logger logger = LoggerFactory.getLogger(SolrComponentConfiguration.class);\n-\n-    @Field(SolrDaoBase.ID)\n-    private String configurationId;\n-\n-    @Field(SolrDaoBase.PAYLOAD_CONTENT)\n-    private String rawConfigurationMetadata;\n-\n-    public String getConfigurationId()\n-    {\n-        return configurationId;\n-    }\n-\n-    public String getRawConfigurationMetadata()\n-    {\n-        return rawConfigurationMetadata;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        final StringBuffer sb = new StringBuffer(\"SolrComponentConfiguration{\");\n-        sb.append(\"configurationId='\").append(configurationId).append('\\'');\n-        sb.append(\", rawConfigurationMetadata='\").append(rawConfigurationMetadata).append('\\'');\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-}"
  },
  {
    "sha": "a535f1817a4314a90cf05eab5963676858aa5481",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationMetaData.java",
    "status": "removed",
    "additions": 0,
    "deletions": 93,
    "changes": 93,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationMetaData.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationMetaData.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationMetaData.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,93 +0,0 @@\n-package org.ikasan.configuration.metadata.model;\n-\n-import org.ikasan.spec.metadata.ConfigurationMetaData;\n-import org.ikasan.spec.metadata.ConfigurationParameterMetaData;\n-\n-import java.util.List;\n-\n-public class SolrConfigurationMetaData implements ConfigurationMetaData<List<SolrConfigurationParameterMetaData>>\n-{\n-    private String configurationId;\n-    private List<SolrConfigurationParameterMetaData> parameters;\n-    private String description;\n-    private String implementingClass;\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param configurationId\n-     * @param parameters\n-     * @param description\n-     * @param implementingClass\n-     */\n-    public SolrConfigurationMetaData(String configurationId, List<SolrConfigurationParameterMetaData> parameters, String description, String implementingClass)\n-    {\n-        this.configurationId = configurationId;\n-        this.parameters = parameters;\n-        this.description = description;\n-        this.implementingClass = implementingClass;\n-    }\n-\n-    /**\n-     * Default constructor\n-     */\n-    public SolrConfigurationMetaData()\n-    {\n-    }\n-\n-    @Override\n-    public String getConfigurationId()\n-    {\n-        return this.configurationId;\n-    }\n-\n-    @Override\n-    public List<SolrConfigurationParameterMetaData> getParameters()\n-    {\n-        return this.parameters;\n-    }\n-\n-    @Override\n-    public String getDescription()\n-    {\n-        return this.description;\n-    }\n-\n-    @Override\n-    public String getImplementingClass()\n-    {\n-        return this.implementingClass;\n-    }\n-\n-    public void setConfigurationId(String configurationId)\n-    {\n-        this.configurationId = configurationId;\n-    }\n-\n-    public void setParameters(List<SolrConfigurationParameterMetaData> parameters)\n-    {\n-        this.parameters = parameters;\n-    }\n-\n-    public void setDescription(String description)\n-    {\n-        this.description = description;\n-    }\n-\n-    public void setImplementingClass(String implementingClass)\n-    {\n-        this.implementingClass = implementingClass;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        final StringBuffer sb = new StringBuffer(\"SolrConfigurationMetaData{\");\n-        sb.append(\"configurationId='\").append(configurationId).append('\\'');\n-        sb.append(\", parameters=\").append(parameters);\n-        sb.append(\", description='\").append(description).append('\\'');\n-        sb.append(\", implementingClass='\").append(implementingClass).append('\\'');\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-}"
  },
  {
    "sha": "f16ec46bb42038a52c5c79a986f17b87670e99b5",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationParameterMetaData.java",
    "status": "removed",
    "additions": 0,
    "deletions": 105,
    "changes": 105,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationParameterMetaData.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationParameterMetaData.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/model/SolrConfigurationParameterMetaData.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,105 +0,0 @@\n-package org.ikasan.configuration.metadata.model;\n-\n-import org.ikasan.spec.metadata.ConfigurationParameterMetaData;\n-\n-public class SolrConfigurationParameterMetaData implements ConfigurationParameterMetaData\n-{\n-    private Long id;\n-    private String name;\n-    private Object value;\n-    private String description;\n-    private String implementingClass;\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param id\n-     * @param name\n-     * @param value\n-     * @param description\n-     * @param implementingClass\n-     */\n-    public SolrConfigurationParameterMetaData(Long id, String name, Object value, String description, String implementingClass)\n-    {\n-        this.id = id;\n-        this.name = name;\n-        this.value = value;\n-        this.description = description;\n-        this.implementingClass = implementingClass;\n-    }\n-\n-    /**\n-     * Default constructor\n-     */\n-    public SolrConfigurationParameterMetaData()\n-    {\n-    }\n-\n-    @Override\n-    public Long getId()\n-    {\n-        return this.id;\n-    }\n-\n-    @Override\n-    public String getName()\n-    {\n-        return this.name;\n-    }\n-\n-    @Override\n-    public Object getValue()\n-    {\n-        return this.value;\n-    }\n-\n-    @Override\n-    public String getDescription()\n-    {\n-        return this.description;\n-    }\n-\n-    @Override\n-    public String getImplementingClass()\n-    {\n-        return this.implementingClass;\n-    }\n-\n-    public void setId(Long id)\n-    {\n-        this.id = id;\n-    }\n-\n-    public void setName(String name)\n-    {\n-        this.name = name;\n-    }\n-\n-    public void setValue(Object value)\n-    {\n-        this.value = value;\n-    }\n-\n-    public void setDescription(String description)\n-    {\n-        this.description = description;\n-    }\n-\n-    public void setImplementingClass(String implementingClass)\n-    {\n-        this.implementingClass = implementingClass;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        final StringBuffer sb = new StringBuffer(\"SolrConfigurationParameterMetaData{\");\n-        sb.append(\"id=\").append(id);\n-        sb.append(\", name='\").append(name).append('\\'');\n-        sb.append(\", value=\").append(value);\n-        sb.append(\", description='\").append(description).append('\\'');\n-        sb.append(\", implementingClass='\").append(implementingClass).append('\\'');\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-}"
  },
  {
    "sha": "7f014d87a1f891f1aad234fa1840d461bfb1258f",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/service/SolrComponentConfigurationMetadataServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 60,
    "changes": 60,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/service/SolrComponentConfigurationMetadataServiceImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/service/SolrComponentConfigurationMetadataServiceImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/configuration/metadata/service/SolrComponentConfigurationMetadataServiceImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,60 +0,0 @@\n-package org.ikasan.configuration.metadata.service;\n-\n-import org.ikasan.configuration.metadata.dao.SolrComponentConfigurationMetadataDao;\n-import org.ikasan.spec.metadata.ConfigurationMetaData;\n-import org.ikasan.spec.metadata.ConfigurationMetaDataService;\n-import org.ikasan.spec.persistence.BatchInsert;\n-import org.ikasan.spec.solr.SolrServiceBase;\n-\n-import java.util.List;\n-\n-public class SolrComponentConfigurationMetadataServiceImpl extends SolrServiceBase implements BatchInsert<ConfigurationMetaData>, ConfigurationMetaDataService\n-{\n-    private SolrComponentConfigurationMetadataDao dao;\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param dao\n-     */\n-    public SolrComponentConfigurationMetadataServiceImpl(SolrComponentConfigurationMetadataDao dao)\n-    {\n-        this.dao = dao;\n-        if(this.dao == null)\n-        {\n-            throw new IllegalArgumentException(\"Dao cannot be null!\");\n-        }\n-    }\n-\n-    @Override\n-    public void insert(List<ConfigurationMetaData> entities)\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        dao.save(entities);\n-    }\n-\n-    @Override\n-    public ConfigurationMetaData findById(String id)\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        return dao.findById(id);\n-    }\n-\n-    @Override\n-    public List<ConfigurationMetaData> findAll()\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        return dao.findAll();\n-    }\n-\n-    @Override\n-    public List<ConfigurationMetaData> findByIdList(List<String> configurationIds)\n-    {\n-        dao.setSolrUsername(super.solrUsername);\n-        dao.setSolrPassword(super.solrPassword);\n-        return dao.findInIdList(configurationIds);\n-    }\n-}"
  },
  {
    "sha": "3f7d67bbcf64f969021e03bd40e18763ba7797da",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/dao/SolrErrorReportingServiceDao.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/dao/SolrErrorReportingServiceDao.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/dao/SolrErrorReportingServiceDao.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/dao/SolrErrorReportingServiceDao.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,45 +0,0 @@\n-package org.ikasan.error.reporting.dao;\n-\n-import org.apache.solr.common.SolrInputDocument;\n-import org.ikasan.spec.error.reporting.ErrorOccurrence;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Created by Ikasan Development Team on 04/08/2017.\n- */\n-public class SolrErrorReportingServiceDao extends SolrDaoBase<ErrorOccurrence>\n-{\n-    private static Logger logger = LoggerFactory.getLogger(SolrErrorReportingServiceDao.class);\n-\n-    /**\n-     * We need to give this dao it's context.\n-     */\n-    public static final String ERROR = \"error\";\n-\n-\n-    @Override\n-    protected SolrInputDocument convertEntityToSolrInputDocument(Long expiry, ErrorOccurrence errorOccurrence)\n-    {\n-        SolrInputDocument document = new SolrInputDocument();\n-        document.addField(ID, errorOccurrence.getModuleName() + \"-error-\" + errorOccurrence.getUri());\n-        document.addField(ERROR_URI, errorOccurrence.getUri());\n-        document.addField(TYPE, ERROR);\n-        document.addField(MODULE_NAME, errorOccurrence.getModuleName());\n-        document.addField(FLOW_NAME, errorOccurrence.getFlowName());\n-        document.addField(COMPONENT_NAME, errorOccurrence.getFlowElementName());\n-        document.addField(EVENT, errorOccurrence.getEventLifeIdentifier());\n-        document.addField(RELATED_EVENT, errorOccurrence.getEventRelatedIdentifier());\n-        document.addField(PAYLOAD_CONTENT, errorOccurrence.getEventAsString());\n-        document.addField(CREATED_DATE_TIME, errorOccurrence.getTimestamp());\n-        document.addField(ERROR_DETAIL, errorOccurrence.getErrorDetail());\n-        document.addField(ERROR_ACTION, errorOccurrence.getAction());\n-        document.addField(ERROR_MESSAGE, errorOccurrence.getErrorMessage());\n-        document.addField(EXCEPTION_CLASS, errorOccurrence.getExceptionClass());\n-        document.setField(EXPIRY, expiry);\n-\n-        return document;\n-    }\n-\n-}"
  },
  {
    "sha": "f7606e0664fc60b7e367b9ad206c0c1d953918be",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/model/SolrErrorOccurrence.java",
    "status": "removed",
    "additions": 0,
    "deletions": 386,
    "changes": 386,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/model/SolrErrorOccurrence.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/model/SolrErrorOccurrence.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/model/SolrErrorOccurrence.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,386 +0,0 @@\n-/* \n- * $Id$\n- * $URL$ \n- *\n- * ====================================================================\n- * Ikasan Enterprise Integration Platform\n- * \n- * Distributed under the Modified BSD License.\n- * Copyright notice: The copyright for this software and a full listing \n- * of individual contributors are as shown in the packaged copyright.txt \n- * file. \n- * \n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without \n- * modification, are permitted provided that the following conditions are met:\n- *\n- *  - Redistributions of source code must retain the above copyright notice, \n- *    this list of conditions and the following disclaimer.\n- *\n- *  - Redistributions in binary form must reproduce the above copyright notice, \n- *    this list of conditions and the following disclaimer in the documentation \n- *    and/or other materials provided with the distribution.\n- *\n- *  - Neither the name of the ORGANIZATION nor the names of its contributors may\n- *    be used to endorse or promote products derived from this software without \n- *    specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \n- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \n- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE \n- * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- * ====================================================================\n- */\n-package org.ikasan.error.reporting.model;\n-\n-\n-import org.apache.solr.client.solrj.beans.Field;\n-import org.ikasan.harvest.HarvestEvent;\n-import org.ikasan.spec.error.reporting.ErrorOccurrence;\n-\n-/**\n- * This class represents an occurrence of an error in the system encapsulating as much as \n- * possible about the occurrence of that error\n- * \n- * @author Ikasan Development Team\n- *\n- */\n-public class SolrErrorOccurrence implements ErrorOccurrence<byte[]>, HarvestEvent\n-{\n-    /** unique identifier for this instance */\n-\t@Field(\"errorUri\")\n-    private String uri;\n-\n-    /**\n-     * name of the module where this error occurred\n-     */\n-\t@Field(\"moduleName\")\n-    private String moduleName;\n-\n-    /**\n-     * name of the flow where this error occurred, if it was event/flow related\n-     */\n-\t@Field(\"flowName\")\n-    private String flowName;\n-\n-    /**\n-     * name of the flow element where this error occurred, if it was event/flow related\n-     */\n-\t@Field(\"componentName\")\n-    private String flowElementName;\n-\n-    /**\n-     * the action associated with the error\n-     */\n-    @Field(\"errorAction\")\n-    private String errorAction;\n-\n-    /**\n-     * raw dump of the error as it occurred\n-     */\n-\t@Field(\"errorDetail\")\n-    private String errorDetail;\n-\n-    /**\n-     * the error message extracted from the errorDetail\n-     */\n-\t@Field(\"errorMessage\")\n-    private String errorMessage;\n-\n-    /**\n-     * the exception class associated with the error\n-     */\n-\t@Field(\"exceptionClass\")\n-    private String exceptionClass;\n-\n-    /**\n-\t * Id of the event associated with this error, if it was event/flow related\n-\t */\n-\t@Field(\"event\")\n-\tprivate String eventLifeIdentifier;\n-\n-    /**\n-     * Related identifier\n-     */\n-\t@Field(\"relatedEventId\")\n-    private String eventRelatedIdentifier;\n-\n-    /**\n-     * Representation of the Event as a String at the time that the error took place\n-     */\n-\t@Field(\"payload\")\n-    private String eventAsString;\n-\n-    /**\n-\t * Time that this error was logged\n-\t */\n-\t@Field(\"timestamp\")\n-\tprivate long timestamp;\n-\n-\n-    /**\n-     * Constructor\n-     */\n-    public SolrErrorOccurrence()\n-    {\n-        // required by Solr\n-    }\n-\n-    public SolrErrorOccurrence(String uri, String moduleName, String flowName, String flowElementName\n-        , String errorAction, String errorDetail, String errorMessage, String exceptionClass, String eventLifeIdentifier\n-        , String eventRelatedIdentifier, String eventAsString, long timestamp) {\n-        this.uri = uri;\n-        this.moduleName = moduleName;\n-        this.flowName = flowName;\n-        this.flowElementName = flowElementName;\n-        this.errorAction = errorAction;\n-        this.errorDetail = errorDetail;\n-        this.errorMessage = errorMessage;\n-        this.exceptionClass = exceptionClass;\n-        this.eventLifeIdentifier = eventLifeIdentifier;\n-        this.eventRelatedIdentifier = eventRelatedIdentifier;\n-        this.eventAsString = eventAsString;\n-        this.timestamp = timestamp;\n-    }\n-\n-    public String getModuleName()\n-    {\n-        return moduleName;\n-    }\n-\n-\tpublic void setModuleName(String moduleName)\n-    {\n-        this.moduleName = moduleName;\n-    }\n-\n-    public String getFlowName() \n-    {\n-        return flowName;\n-    }\n-\n-\tpublic void setFlowName(String flowName)\n-    {\n-        this.flowName = flowName;\n-    }\n-\n-    public String getFlowElementName()\n-    {\n-        return flowElementName;\n-    }\n-\n-\tpublic void setFlowElementName(String flowElementName)\n-    {\n-        this.flowElementName = flowElementName;\n-    }\n-\n-    public String getErrorDetail() \n-    {\n-        return errorDetail;\n-    }\n-\n-\tpublic void setErrorDetail(String errorDetail)\n-    {\n-        this.errorDetail = errorDetail;\n-    }\n-\n-    public String getEventLifeIdentifier()\n-    {\n-        return eventLifeIdentifier;\n-    }\n-\n-    public void setEventLifeIdentifier(String eventLifeIdentifier) \n-    {\n-        this.eventLifeIdentifier = eventLifeIdentifier;\n-    }\n-\n-    public byte[] getEvent()\n-    {\n-        if(this.eventAsString != null)\n-        {\n-            return this.eventAsString.getBytes();\n-        }\n-\n-        return \"\".getBytes();\n-    }\n-\n-\tpublic void setEvent(byte[] event)\n-    {\n-\t\tthrow new UnsupportedOperationException();\n-    }\n-\n-    public long getTimestamp() \n-    {\n-        return timestamp;\n-    }\n-\n-\tpublic void setTimestamp(long timestamp)\n-    {\n-        this.timestamp = timestamp;\n-    }\n-\n-    public long getExpiry() {\n-\t\tthrow new UnsupportedOperationException();\n-    }\n-\n-\tpublic void setExpiry(long expiry)\n-    {\n-\t\tthrow new UnsupportedOperationException();\n-    }\n-\n-    public String getEventRelatedIdentifier() \n-    {\n-        return eventRelatedIdentifier;\n-    }\n-\n-    public void setEventRelatedIdentifier(String eventRelatedIdentifier) \n-    {\n-        this.eventRelatedIdentifier = eventRelatedIdentifier;\n-    }\n-\n-    public String getUri()\n-    {\n-        return this.uri;\n-    }\n-\n-\tpublic void setUri(String uri)\n-    {\n-        this.uri = uri;\n-    }\n-\n-    public String getAction()\n-    {\n-\t\treturn this.errorAction;\n-    }\n-\n-    public void setAction(String action) \n-    {\n-\t\tthis.errorAction = action;\n-    }\n-\n-    public String getErrorMessage() \n-    {\n-        return errorMessage;\n-    }\n-\n-\tpublic void setErrorMessage(String errorMessage)\n-    {\n-        this.errorMessage = errorMessage;\n-    }\n-    \n-    /**\n-\t * @return the exceptionClass\n-\t */\n-\tpublic String getExceptionClass()\n-\t{\n-\t\treturn exceptionClass;\n-\t}\n-\n-\t/**\n-\t * @param exceptionClass the exceptionClass to set\n-\t */\n-\tpublic void setExceptionClass(String exceptionClass)\n-\t{\n-\t\tthis.exceptionClass = exceptionClass;\n-\t}\n-\t\n-\t/**\n-\t * @return the userAction\n-\t */\n-\tpublic String getUserAction()\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t/**\n-\t * @param userAction the userAction to set\n-\t */\n-\tpublic void setUserAction(String userAction)\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t/**\n-\t * @return the actionedBy\n-\t */\n-\tpublic String getActionedBy()\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t/**\n-\t * @param actionedBy the actionedBy to set\n-\t */\n-\tpublic void setActionedBy(String actionedBy)\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t/**\n-\t * @return the userActionTimestamp\n-\t */\n-\tpublic long getUserActionTimestamp()\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t/**\n-\t * @param userActionTimestamp the userActionTimestamp to set\n-\t */\n-\tpublic void setUserActionTimestamp(long userActionTimestamp)\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t/**\n-\t * @return the eventAsString\n-\t */\n-\tpublic String getEventAsString()\n-\t{\n-\t\treturn eventAsString;\n-\t}\n-\n-\t/**\n-\t * @param eventAsString the eventAsString to set\n-\t */\n-\tpublic void setEventAsString(String eventAsString)\n-\t{\n-\t\tthis.eventAsString = eventAsString;\n-\t}\n-\n-\tpublic boolean isHarvested()\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t@Override\n-\tpublic void setHarvested(boolean harvested)\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\tfinal StringBuffer sb = new StringBuffer(\"SolrErrorOccurrenceImpl{\");\n-\t\tsb.append(\"uri='\").append(uri).append('\\'');\n-\t\tsb.append(\", moduleName='\").append(moduleName).append('\\'');\n-\t\tsb.append(\", flowName='\").append(flowName).append('\\'');\n-\t\tsb.append(\", flowElementName='\").append(flowElementName).append('\\'');\n-\t\tsb.append(\", errorDetail='\").append(errorDetail).append('\\'');\n-\t\tsb.append(\", errorMessage='\").append(errorMessage).append('\\'');\n-\t\tsb.append(\", exceptionClass='\").append(exceptionClass).append('\\'');\n-\t\tsb.append(\", eventLifeIdentifier='\").append(eventLifeIdentifier).append('\\'');\n-\t\tsb.append(\", eventRelatedIdentifier='\").append(eventRelatedIdentifier).append('\\'');\n-\t\tsb.append(\", eventAsString='\").append(eventAsString).append('\\'');\n-\t\tsb.append(\", timestamp=\").append(timestamp);\n-\t\tsb.append('}');\n-\t\treturn sb.toString();\n-\t}\n-}"
  },
  {
    "sha": "c09b0b974c7c2d81975989595f01912178f415e7",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/service/SolrErrorReportingServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 58,
    "changes": 58,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/service/SolrErrorReportingServiceImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/service/SolrErrorReportingServiceImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/error/reporting/service/SolrErrorReportingServiceImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,58 +0,0 @@\n-package org.ikasan.error.reporting.service;\n-\n-import org.ikasan.error.reporting.dao.SolrErrorReportingServiceDao;\n-import org.ikasan.error.reporting.model.SolrErrorOccurrence;\n-import org.ikasan.spec.error.reporting.ErrorOccurrence;\n-import org.ikasan.spec.error.reporting.ErrorReportingManagementService;\n-import org.ikasan.spec.error.reporting.ErrorReportingService;\n-import org.ikasan.spec.error.reporting.ErrorReportingServiceDao;\n-import org.ikasan.spec.persistence.BatchInsert;\n-import org.ikasan.spec.search.PagedSearchResult;\n-import org.ikasan.spec.solr.SolrService;\n-import org.ikasan.spec.solr.SolrServiceBase;\n-\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * Created by Ikasan Development Team on 23/09/2017.\n- */\n-public class SolrErrorReportingServiceImpl extends SolrServiceBase implements SolrService<ErrorOccurrence>, BatchInsert<ErrorOccurrence>\n-{\n-\n-    private SolrErrorReportingServiceDao errorReportingServiceDao;\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param errorReportingServiceDao\n-     */\n-    public SolrErrorReportingServiceImpl(SolrErrorReportingServiceDao errorReportingServiceDao) {\n-        this.errorReportingServiceDao = errorReportingServiceDao;\n-        if (this.errorReportingServiceDao == null) {\n-            throw new IllegalArgumentException(\"errorManagementDao cannot be null!\");\n-        }\n-    }\n-    @Override\n-    public void save(ErrorOccurrence entity)\n-    {\n-        this.errorReportingServiceDao.setSolrUsername(this.solrUsername);\n-        this.errorReportingServiceDao.setSolrPassword(this.solrPassword);\n-        this.errorReportingServiceDao.save(entity);\n-    }\n-\n-    @Override\n-    public void save(List<ErrorOccurrence> entities)\n-    {\n-        this.errorReportingServiceDao.setSolrUsername(this.solrUsername);\n-        this.errorReportingServiceDao.setSolrPassword(this.solrPassword);\n-        this.errorReportingServiceDao.save(entities);\n-    }\n-\n-    @Override\n-    public void insert(List<ErrorOccurrence> entities)\n-    {\n-        this.save(entities);\n-    }\n-}"
  },
  {
    "sha": "c056b42f08b777105e817cf0c55662e89eeaa6db",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/dao/SolrExclusionEventDao.java",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/dao/SolrExclusionEventDao.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/dao/SolrExclusionEventDao.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/dao/SolrExclusionEventDao.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,38 +0,0 @@\n-package org.ikasan.exclusion.dao;\n-\n-import org.apache.solr.common.SolrInputDocument;\n-import org.ikasan.spec.exclusion.ExclusionEvent;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Created by Ikasan Development Team on 05/08/2017.\n- */\n-public class SolrExclusionEventDao extends SolrDaoBase<ExclusionEvent>\n-{\n-    /** Logger for this class */\n-    private static Logger logger = LoggerFactory.getLogger(SolrExclusionEventDao.class);\n-\n-    /**\n-     * We need to give this dao it's context.\n-     */\n-    public static final String EXCLUSION = \"exclusion\";\n-\n-    @Override\n-    protected SolrInputDocument convertEntityToSolrInputDocument(Long expiry, ExclusionEvent exclusionEvent)\n-    {\n-        SolrInputDocument document = new SolrInputDocument();\n-        document.addField(ID, exclusionEvent.getModuleName() + \":\" + \"exclusion\" + \":\" + exclusionEvent.getErrorUri());\n-        document.addField(TYPE, EXCLUSION);\n-        document.addField(MODULE_NAME, exclusionEvent.getModuleName());\n-        document.addField(ERROR_URI, exclusionEvent.getErrorUri());\n-        document.addField(FLOW_NAME, exclusionEvent.getFlowName());\n-        document.addField(EVENT, exclusionEvent.getIdentifier());\n-        document.addField(PAYLOAD_CONTENT, new String(exclusionEvent.getEvent()));\n-        document.addField(CREATED_DATE_TIME, exclusionEvent.getTimestamp());\n-        document.setField(EXPIRY, expiry);\n-\n-        return document;\n-    }\n-}"
  },
  {
    "sha": "694548261beae1690cba8cd33585d3a434b67bfb",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/model/SolrExclusionEventImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 216,
    "changes": 216,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/model/SolrExclusionEventImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/model/SolrExclusionEventImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/model/SolrExclusionEventImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,216 +0,0 @@\n-/*\n- * $Id$\n- * $URL$\n- *\n- * ====================================================================\n- * Ikasan Enterprise Integration Platform\n- *\n- * Distributed under the Modified BSD License.\n- * Copyright notice: The copyright for this software and a full listing\n- * of individual contributors are as shown in the packaged copyright.txt\n- * file.\n- *\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- *  - Redistributions of source code must retain the above copyright notice,\n- *    this list of conditions and the following disclaimer.\n- *\n- *  - Redistributions in binary form must reproduce the above copyright notice,\n- *    this list of conditions and the following disclaimer in the documentation\n- *    and/or other materials provided with the distribution.\n- *\n- *  - Neither the name of the ORGANIZATION nor the names of its contributors may\n- *    be used to endorse or promote products derived from this software without\n- *    specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n- * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- * ====================================================================\n- */\n-package org.ikasan.exclusion.model;\n-\n-import org.apache.solr.client.solrj.beans.Field;\n-import org.ikasan.spec.exclusion.ExclusionEvent;\n-\n-import java.util.Arrays;\n-\n-/**\n- * ExclusionEvent window instance.\n- *\n- * @author Ikasan Development Team\n- */\n-public class SolrExclusionEventImpl implements ExclusionEvent<String>\n-{\n-    /** surrogate id assigned from ORM */\n-    @Field(\"id\")\n-    private String id;\n-\n-    /** module name */\n-    @Field(\"moduleName\")\n-    String moduleName;\n-\n-    /** flowName */\n-    @Field(\"flowName\")\n-    String flowName;\n-\n-    /** identifier for this event */\n-    @Field(\"event\")\n-    String identifier;\n-\n-    /** original form of the event being excluded */\n-    @Field(\"payload\")\n-    String event;\n-\n-    /** timestamp indicating when this event was created */\n-    @Field(\"timestamp\")\n-    long timestamp;\n-\n-    /** error uri reported as part of this excluded event */\n-    @Field(\"id\")\n-    String errorUri;\n-\n-\n-    /**\n-     * Constructor. Used by Solr.\n-     */\n-    public SolrExclusionEventImpl(){}\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param id\n-     * @param moduleName\n-     * @param flowName\n-     * @param identifier\n-     * @param event\n-     * @param timestamp\n-     * @param errorUri\n-     */\n-    public SolrExclusionEventImpl(String id, String moduleName, String flowName, String identifier, String event, long timestamp, String errorUri) {\n-        this.moduleName = moduleName;\n-        this.flowName = flowName;\n-        this.identifier = identifier;\n-        this.event = event;\n-        this.timestamp = timestamp;\n-        this.errorUri = errorUri;\n-    }\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public void setId(String id) {\n-        this.id = id;\n-    }\n-\n-    public String getModuleName() {\n-        return moduleName;\n-    }\n-\n-    public void setModuleName(String moduleName) {\n-        this.moduleName = moduleName;\n-    }\n-\n-    public String getFlowName() {\n-        return flowName;\n-    }\n-\n-    public void setFlowName(String flowName) {\n-        this.flowName = flowName;\n-    }\n-\n-    public String getIdentifier() {\n-        return identifier;\n-    }\n-\n-    public void setIdentifier(String identifier) {\n-        this.identifier = identifier;\n-    }\n-\n-    public byte[] getEvent()\n-    {\n-        if(event != null)\n-        {\n-            return event.getBytes();\n-        }\n-        return \"\".getBytes();\n-    }\n-\n-    public void setEvent(byte[] event) {\n-        this.event = new String(event);\n-    }\n-\n-    public long getTimestamp() {\n-        return timestamp;\n-    }\n-\n-    public void setTimestamp(long timestamp) {\n-        this.timestamp = timestamp;\n-    }\n-\n-    public String getErrorUri() {\n-        return errorUri;\n-    }\n-\n-    public void setErrorUri(String errorUri) {\n-        this.errorUri = errorUri;\n-    }\n-\n-    @Override\n-    public boolean isHarvested() {\n-        // Not relevant for solr implementation.\n-        return true;\n-    }\n-\n-    @Override\n-    public void setHarvested(boolean harvested) {\n-        // Not relevant for solr implementation.\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        SolrExclusionEventImpl that = (SolrExclusionEventImpl) o;\n-\n-        if (id != that.id) return false;\n-        if (!flowName.equals(that.flowName)) return false;\n-        if (!identifier.equals(that.identifier)) return false;\n-        if (!moduleName.equals(that.moduleName)) return false;\n-\n-        return true;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = moduleName.hashCode();\n-        result = 31 * result + flowName.hashCode();\n-        result = 31 * result + identifier.hashCode();\n-        return result;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"ExclusionEvent{\" +\n-                \"id='\" + id + '\\'' +\n-                \", moduleName='\" + moduleName + '\\'' +\n-                \", flowName='\" + flowName + '\\'' +\n-                \", identifier='\" + identifier + '\\'' +\n-                \", event=\" + event +\n-                \", timestamp=\" + timestamp +\n-                \", errorUri='\" + errorUri + '\\'' +\n-                '}';\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "d54bee78927585ca05560fef3a018bbbd87ce39d",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/service/SolrExclusionServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 48,
    "changes": 48,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/service/SolrExclusionServiceImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/service/SolrExclusionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/exclusion/service/SolrExclusionServiceImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,48 +0,0 @@\n-package org.ikasan.exclusion.service;\n-\n-import org.ikasan.exclusion.dao.SolrExclusionEventDao;\n-import org.ikasan.spec.exclusion.ExclusionEvent;\n-import org.ikasan.spec.persistence.BatchInsert;\n-import org.ikasan.spec.solr.SolrService;\n-import org.ikasan.spec.solr.SolrServiceBase;\n-\n-import java.util.List;\n-\n-/**\n- * Created by Ikasan Development Team on 23/09/2017.\n- */\n-public class SolrExclusionServiceImpl extends SolrServiceBase implements SolrService<ExclusionEvent>, BatchInsert<ExclusionEvent>\n-{\n-\n-    private SolrExclusionEventDao exclusionEventDao;\n-\n-    public SolrExclusionServiceImpl(SolrExclusionEventDao exclusionEventDao)\n-    {\n-        this.exclusionEventDao = exclusionEventDao;\n-        if(this.exclusionEventDao == null)\n-        {\n-            throw new IllegalArgumentException(\"exclusionEventDao cannot be null!\");\n-        }\n-    }\n-    @Override\n-    public void save(ExclusionEvent save)\n-    {\n-        this.exclusionEventDao.setSolrUsername(this.solrUsername);\n-        this.exclusionEventDao.setSolrPassword(this.solrPassword);\n-        this.exclusionEventDao.save(save);\n-    }\n-\n-    @Override\n-    public void save(List<ExclusionEvent> save)\n-    {\n-        this.exclusionEventDao.setSolrUsername(this.solrUsername);\n-        this.exclusionEventDao.setSolrPassword(this.solrPassword);\n-        this.exclusionEventDao.save(save);\n-    }\n-\n-    @Override\n-    public void insert(List<ExclusionEvent> entities)\n-    {\n-        this.save(entities);\n-    }\n-}"
  },
  {
    "sha": "5f7813d8ec135ddae8e49c38e4e0cdb18f07aa72",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/dao/SolrHospitalDao.java",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/dao/SolrHospitalDao.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/dao/SolrHospitalDao.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/dao/SolrHospitalDao.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,38 +0,0 @@\n-package org.ikasan.hospital.dao;\n-\n-import org.apache.solr.common.SolrInputDocument;\n-import org.ikasan.spec.hospital.model.ExclusionEventAction;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Created by Ikasan Development Team on 14/02/2017.\n- */\n-public class SolrHospitalDao extends SolrDaoBase<ExclusionEventAction>\n-{\n-    /** Logger for this class */\n-    private static Logger logger = LoggerFactory.getLogger(SolrHospitalDao.class);\n-\n-    /**\n-     * We need to give this document it's context.\n-     */\n-    public static final String EXCLUSION_EVENT_ACTION = \"exclusionEventAction\";\n-\n-    @Override\n-    protected SolrInputDocument convertEntityToSolrInputDocument(Long expiry, ExclusionEventAction exclusionEventAction)\n-    {\n-\n-        SolrInputDocument document = new SolrInputDocument();\n-        document.addField(ID, exclusionEventAction.getErrorUri());\n-        document.addField(TYPE, EXCLUSION_EVENT_ACTION);\n-        document.addField(MODULE_NAME, exclusionEventAction.getModuleName());\n-        document.addField(FLOW_NAME, exclusionEventAction.getFlowName());\n-        document.addField(EVENT, exclusionEventAction.getAction());\n-        document.addField(PAYLOAD_CONTENT, exclusionEventAction.getEvent());\n-        document.addField(CREATED_DATE_TIME, exclusionEventAction.getTimestamp());\n-        document.setField(EXPIRY, expiry);\n-\n-        return document;\n-    }\n-}"
  },
  {
    "sha": "ac219f1f18b9c85d14d910dd461f0aed689a6e40",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/model/SolrExclusionEventActionImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 154,
    "changes": 154,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/model/SolrExclusionEventActionImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/model/SolrExclusionEventActionImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/model/SolrExclusionEventActionImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,154 +0,0 @@\n-package org.ikasan.hospital.model;\n-\n-import org.ikasan.spec.hospital.model.ExclusionEventAction;\n-\n-public class SolrExclusionEventActionImpl implements ExclusionEventAction<String>\n-{\n-    public static final String RESUBMIT = \"re-submitted\";\n-    public static final String IGNORED = \"ignored\";\n-\n-    private String moduleName;\n-    private String flowName;\n-    private String errorUri;\n-    private String actionedBy;\n-    private String action;\n-    private String event;\n-    private long timestamp;\n-    private String comment;\n-\n-    /**\n-     * Constructor\n-     *\n-     * @param moduleName\n-     * @param flowName\n-     * @param errorUri\n-     * @param actionedBy\n-     * @param action\n-     * @param event\n-     * @param timestamp\n-     * @param comment\n-     */\n-    public SolrExclusionEventActionImpl(String moduleName, String flowName, String errorUri, String actionedBy, String action\n-        , String event, long timestamp, String comment) {\n-        this.moduleName = moduleName;\n-        this.flowName = flowName;\n-        this.errorUri = errorUri;\n-        this.actionedBy = actionedBy;\n-        this.action = action;\n-        this.event = event;\n-        this.timestamp = timestamp;\n-        this.comment = comment;\n-    }\n-\n-    @Override\n-    public String getModuleName()\n-    {\n-        return moduleName;\n-    }\n-\n-    @Override\n-    public void setModuleName(String moduleName)\n-    {\n-        this.moduleName = moduleName;\n-    }\n-\n-    @Override\n-    public String getFlowName()\n-    {\n-        return flowName;\n-    }\n-\n-    @Override\n-    public void setFlowName(String flowName)\n-    {\n-        this.flowName = flowName;\n-    }\n-\n-    @Override\n-    public String getErrorUri()\n-    {\n-        return errorUri;\n-    }\n-\n-    @Override\n-    public void setErrorUri(String errorUri)\n-    {\n-        this.errorUri = errorUri;\n-    }\n-\n-    @Override\n-    public String getActionedBy()\n-    {\n-        return actionedBy;\n-    }\n-\n-    @Override\n-    public void setActionedBy(String actionedBy)\n-    {\n-        this.actionedBy = actionedBy;\n-    }\n-\n-    @Override\n-    public String getAction()\n-    {\n-        return action;\n-    }\n-\n-    @Override\n-    public void setAction(String action)\n-    {\n-        this.action = action;\n-    }\n-\n-    @Override\n-    public String getEvent()\n-    {\n-        return event;\n-    }\n-\n-    @Override\n-    public void setEvent(String event)\n-    {\n-        this.event = event;\n-    }\n-\n-    @Override\n-    public long getTimestamp()\n-    {\n-        return timestamp;\n-    }\n-\n-    @Override\n-    public void setTimestamp(long timestamp)\n-    {\n-        this.timestamp = timestamp;\n-    }\n-\n-    @Override\n-    public String getComment()\n-    {\n-        return comment;\n-    }\n-\n-    @Override\n-    public void setComment(String comment)\n-    {\n-        this.comment = comment;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        final StringBuffer sb = new StringBuffer(\"ExclusionEventActionImpl{\");\n-        sb.append(\"moduleName='\").append(moduleName).append('\\'');\n-        sb.append(\", flowName='\").append(flowName).append('\\'');\n-        sb.append(\", errorUri='\").append(errorUri).append('\\'');\n-        sb.append(\", actionedBy='\").append(actionedBy).append('\\'');\n-        sb.append(\", action='\").append(action).append('\\'');\n-        sb.append(\", event=\").append(event).append('\\'');\n-        sb.append(\", timestamp=\").append(timestamp);\n-        sb.append(\", comment='\").append(comment).append('\\'');\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-}"
  },
  {
    "sha": "b8674baf1ce2cbeaf8a225fe7de192608d65fb0f",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/service/SolrHospitalServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/service/SolrHospitalServiceImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/service/SolrHospitalServiceImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/hospital/service/SolrHospitalServiceImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,38 +0,0 @@\n-package org.ikasan.hospital.service;\n-\n-import org.ikasan.hospital.dao.SolrHospitalDao;\n-import org.ikasan.spec.hospital.model.ExclusionEventAction;\n-import org.ikasan.spec.hospital.service.HospitalAuditService;\n-import org.ikasan.spec.solr.SolrServiceBase;\n-\n-import java.util.List;\n-\n-public class SolrHospitalServiceImpl extends SolrServiceBase implements HospitalAuditService\n-{\n-    SolrHospitalDao solrHospitalDao;\n-\n-    public SolrHospitalServiceImpl(SolrHospitalDao solrHospitalDao)\n-    {\n-        this.solrHospitalDao = solrHospitalDao;\n-        if(this.solrHospitalDao == null)\n-        {\n-            throw new IllegalArgumentException(\"SolrHospitalDao cannot be null!\");\n-        }\n-    }\n-\n-    @Override\n-    public void save(ExclusionEventAction exclusionEventAction)\n-    {\n-        solrHospitalDao.setSolrUsername(this.solrUsername);\n-        solrHospitalDao.setSolrPassword(this.solrPassword);\n-        solrHospitalDao.save(exclusionEventAction);\n-    }\n-\n-    @Override\n-    public void save(List<ExclusionEventAction> exclusionEventActions)\n-    {\n-        solrHospitalDao.setSolrUsername(this.solrUsername);\n-        solrHospitalDao.setSolrPassword(this.solrPassword);\n-        solrHospitalDao.save(exclusionEventActions);\n-    }\n-}"
  },
  {
    "sha": "e2711f02876024fe83c59c55f1002941989c6d50",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/dao/SolrModuleMetadataDao.java",
    "status": "removed",
    "additions": 0,
    "deletions": 233,
    "changes": 233,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/dao/SolrModuleMetadataDao.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/dao/SolrModuleMetadataDao.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/dao/SolrModuleMetadataDao.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,233 +0,0 @@\n-package org.ikasan.module.metadata.dao;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n-import org.apache.solr.client.solrj.SolrQuery;\n-import org.apache.solr.client.solrj.request.QueryRequest;\n-import org.apache.solr.client.solrj.request.UpdateRequest;\n-import org.apache.solr.client.solrj.response.QueryResponse;\n-import org.apache.solr.common.SolrInputDocument;\n-import org.ikasan.module.metadata.model.*;\n-import org.ikasan.spec.metadata.*;\n-import org.ikasan.spec.solr.SolrConstants;\n-import org.ikasan.spec.solr.SolrDaoBase;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Created by Ikasan Development Team on 14/02/2017.\n- */\n-public class SolrModuleMetadataDao extends SolrDaoBase<ModuleMetaData>\n-{\n-    /** Logger for this class */\n-    private static Logger logger = LoggerFactory.getLogger(SolrModuleMetadataDao.class);\n-\n-    /**\n-     * We need to give this hibernate it's context.\n-     */\n-    public static final String MODULE_METADATA = \"moduleMetaData\";\n-\n-    private ObjectMapper objectMapper;\n-\n-    public SolrModuleMetadataDao()\n-    {\n-        this.objectMapper = new ObjectMapper();\n-\n-        SimpleModule m = new SimpleModule();\n-        m.addAbstractTypeMapping(ModuleMetaData.class, SolrModuleMetaDataImpl.class);\n-        m.addAbstractTypeMapping(FlowMetaData.class, SolrFlowMetaDataImpl.class);\n-        m.addAbstractTypeMapping(FlowElementMetaData.class, SolrFlowElementMetaDataImpl.class);\n-        m.addAbstractTypeMapping(Transition.class, SolrTransitionImpl.class);\n-        m.addAbstractTypeMapping(DecoratorMetaData.class, SolrDecoratorMetaDataImpl.class);\n-\n-        objectMapper.registerModule(m);\n-    }\n-\n-    public void save(List<ModuleMetaData> moduleMetaDataList)\n-    {\n-        try\n-        {\n-            UpdateRequest req = new UpdateRequest();\n-            req.setBasicAuthCredentials(this.solrUsername, this.solrPassword);\n-\n-            for(ModuleMetaData moduleMetaData: moduleMetaDataList)\n-            {\n-                super.removeById(MODULE_METADATA, moduleMetaData.getName());\n-\n-                SolrInputDocument document = convertEntityToSolrInputDocument(null,moduleMetaData);\n-                req.add(document);\n-\n-                logger.debug(\"Adding document: \" + document);\n-            }\n-\n-            commitSolrRequest(req);\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"An exception has occurred attempting to write a module metadata to Solr\", e);\n-        }\n-    }\n-\n-    @Override\n-    protected SolrInputDocument convertEntityToSolrInputDocument(Long expiry, ModuleMetaData moduleMetaData)\n-    {\n-        SolrInputDocument document = new SolrInputDocument();\n-        document.addField(ID, moduleMetaData.getName());\n-        document.addField(TYPE, MODULE_METADATA);\n-        try\n-        {\n-            document.addField(PAYLOAD_CONTENT, objectMapper.writeValueAsString(moduleMetaData));\n-        }\n-        catch (JsonProcessingException e)\n-        {\n-            throw new RuntimeException(\"Unable to convert [\"+moduleMetaData+\"] to json format.\");\n-        }\n-\n-        document.addField(CREATED_DATE_TIME, System.currentTimeMillis());\n-\n-        return document;\n-    }\n-\n-    public ModuleMetaData findById(String id)\n-    {\n-        SolrQuery query = super.buildIdQuery(id, MODULE_METADATA);\n-\n-        logger.debug(\"query: \" + query);\n-\n-        List<SolrModule> beans = this.findByQuery(query);\n-\n-        if(beans.size() > 0 && beans.get(0).getModuleMetaData() != null)\n-        {\n-            return this.convert(beans.get(0).getModuleMetaData());\n-        }\n-        else\n-        {\n-            return null;\n-        }\n-    }\n-\n-    public void deleteById(String id)\n-    {\n-        String queryString = \"id:\\\"\" + id + \"\\\" AND type:\\\"\" + MODULE_METADATA + \"\\\"\";\n-\n-        logger.debug(\"queryString: \" + queryString);\n-\n-        super.deleteByQuery(queryString);\n-    }\n-\n-    public List<ModuleMetaData> findAll(Integer startOffset, Integer resultSize)\n-    {\n-        String queryString = \"type:\\\"\" + MODULE_METADATA + \"\\\"\";\n-\n-        SolrQuery query = new SolrQuery();\n-        query.setQuery(queryString);\n-        query.setStart(startOffset);\n-        query.setRows(resultSize);\n-\n-        List<SolrModule> beans = this.findByQuery(query);\n-\n-        List<ModuleMetaData> results = beans.stream().map(bean -> convert(bean.getModuleMetaData())).collect(Collectors.toList());\n-\n-        return results;\n-    }\n-\n-    /**\n-     * Helper method to find by query.\n-     *\n-     * @param query\n-     */\n-    private List<SolrModule> findByQuery(SolrQuery query)\n-    {\n-        logger.debug(\"queryString: \" + query);\n-\n-        try\n-        {\n-            QueryRequest req = new QueryRequest(query);\n-            req.setBasicAuthCredentials(this.solrUsername, this.solrPassword);\n-\n-            QueryResponse rsp = req.process(this.solrClient, SolrConstants.CORE);\n-\n-            return rsp.getBeans(SolrModule.class);\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"Error resolving solr module meta data by query [\" + query + \"] from the ikasan solr index!\", e);\n-        }\n-    }\n-\n-    /**\n-     * Get using offset with filtering capabilities.\n-     *\n-     * @param modulesNames\n-     * @param startOffset\n-     * @param resultSize\n-     * @return\n-     */\n-    public ModuleMetadataSearchResults find(List<String> modulesNames, Integer startOffset, Integer resultSize)\n-    {\n-        String queryString = \"type:\\\"\" + MODULE_METADATA + \"\\\"\";\n-\n-        SolrQuery query = new SolrQuery();\n-        query.setQuery(queryString);\n-        query.setStart(startOffset);\n-        query.setRows(resultSize);\n-\n-        StringBuffer moduleNamesBuffer = new StringBuffer();\n-\n-        if(modulesNames != null && modulesNames.size() > 0)\n-        {\n-            moduleNamesBuffer.append(this.buildPredicate(ID, modulesNames));\n-        }\n-\n-        query.setFilterQueries(moduleNamesBuffer.toString());\n-\n-        ModuleMetadataSearchResults results;\n-\n-        try\n-        {\n-            QueryRequest req = new QueryRequest(query);\n-            req.setBasicAuthCredentials(this.solrUsername, this.solrPassword);\n-\n-            QueryResponse rsp = req.process(this.solrClient, SolrConstants.CORE);\n-\n-            List<SolrModule> beans = rsp.getBeans(SolrModule.class);\n-\n-            results = new ModuleMetadataSearchResults(beans.stream()\n-                .map(solrModule -> convert(solrModule.getModuleMetaData()))\n-                .collect(Collectors.toList()), rsp.getResults().getNumFound(), rsp.getQTime());\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"Error resolving solr module meta data by query [\" + query + \"] from the ikasan solr index!\", e);\n-        }\n-\n-        return results;\n-    }\n-\n-    /**\n-     * Helper method to convert raw module metadata.\n-     *\n-     * @param rawModuleMetaData\n-     * @return\n-     */\n-    private ModuleMetaData convert(String rawModuleMetaData)\n-    {\n-        try\n-        {\n-            SolrModuleMetaDataImpl solrModuleMetaData\n-                = objectMapper.readValue(rawModuleMetaData, SolrModuleMetaDataImpl.class);\n-\n-            return solrModuleMetaData;\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(String.format(\"Unable to deserialise ModuleMetaData [%s]\"\n-                , rawModuleMetaData), e);\n-        }\n-    }\n-\n-}"
  },
  {
    "sha": "ea2d3400833ecc2365c3b04ffa138ccdb2359258",
    "filename": "ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/model/SolrDecoratorMetaDataImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 59,
    "changes": 59,
    "blob_url": "https://github.com/ikasanEIP/ikasan/blob/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/model/SolrDecoratorMetaDataImpl.java",
    "raw_url": "https://github.com/ikasanEIP/ikasan/raw/f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4/ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/model/SolrDecoratorMetaDataImpl.java",
    "contents_url": "https://api.github.com/repos/ikasanEIP/ikasan/contents/ikasaneip/solr/solr-client/src/main/java/org/ikasan/module/metadata/model/SolrDecoratorMetaDataImpl.java?ref=f42cba34fbbfd8bd1b957cef0dd95ecc9ab37ba4",
    "patch": "@@ -1,59 +0,0 @@\n-package org.ikasan.module.metadata.model;\n-\n-import org.ikasan.spec.metadata.DecoratorMetaData;\n-\n-public class SolrDecoratorMetaDataImpl implements DecoratorMetaData\n-{\n-    private String type;\n-    private String name;\n-    private String configurationId;\n-    private boolean isConfigurable = false;\n-\n-    @Override\n-    public String getName()\n-    {\n-        return this.name;\n-    }\n-\n-    @Override\n-    public void setName(String name)\n-    {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public String getType()\n-    {\n-        return type;\n-    }\n-\n-    @Override\n-    public void setType(String type)\n-    {\n-        this.type = type;\n-    }\n-\n-    @Override\n-    public boolean isConfigurable()\n-    {\n-        return isConfigurable;\n-    }\n-\n-    @Override\n-    public void setConfigurable(boolean configurable)\n-    {\n-        this.isConfigurable = configurable;\n-    }\n-\n-    @Override\n-    public String getConfigurationId()\n-    {\n-        return this.configurationId;\n-    }\n-\n-    @Override\n-    public void setConfigurationId(String configurationId)\n-    {\n-        this.configurationId = configurationId;\n-    }\n-}"
  }
]
