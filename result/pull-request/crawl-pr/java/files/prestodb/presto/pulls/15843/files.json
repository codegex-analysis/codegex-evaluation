[
  {
    "sha": "36051189bb9894ad9fcf743e1c9d428ae0187ccb",
    "filename": "presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java",
    "status": "modified",
    "additions": 18,
    "deletions": 7,
    "changes": 25,
    "blob_url": "https://github.com/prestodb/presto/blob/e38594fe593c0548dc7bd077294a9849164634ed/presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java",
    "raw_url": "https://github.com/prestodb/presto/raw/e38594fe593c0548dc7bd077294a9849164634ed/presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-common/src/main/java/com/facebook/presto/common/block/DictionaryBlock.java?ref=e38594fe593c0548dc7bd077294a9849164634ed",
    "patch": "@@ -264,14 +264,25 @@ public long getRegionLogicalSizeInBytes(int positionOffset, int length)\n         }\n \n         long sizeInBytes = 0;\n-        long[] seenSizes = new long[dictionary.getPositionCount()];\n-        Arrays.fill(seenSizes, -1L);\n-        for (int i = positionOffset; i < positionOffset + length; i++) {\n-            int position = getId(i);\n-            if (seenSizes[position] < 0) {\n-                seenSizes[position] = dictionary.getRegionLogicalSizeInBytes(position, 1);\n+        // Dictionary Block may contain large number of keys and small region length may be requested.\n+        // If the length is less than keys the cache is likely to be not used.\n+        if (length > dictionary.getPositionCount()) {\n+            // Cache code path.\n+            long[] seenSizes = new long[dictionary.getPositionCount()];\n+            Arrays.fill(seenSizes, -1L);\n+            for (int i = positionOffset; i < positionOffset + length; i++) {\n+                int position = getId(i);\n+                if (seenSizes[position] < 0) {\n+                    seenSizes[position] = dictionary.getRegionLogicalSizeInBytes(position, 1);\n+                }\n+                sizeInBytes += seenSizes[position];\n+            }\n+        }\n+        else {\n+            // In-place code path.\n+            for (int i = positionOffset; i < positionOffset + length; i++) {\n+                sizeInBytes += dictionary.getRegionLogicalSizeInBytes(getId(i), 1);\n             }\n-            sizeInBytes += seenSizes[position];\n         }\n \n         if (positionOffset == 0 && length == getPositionCount()) {"
  },
  {
    "sha": "8af1ce5d0c87ca8694c507ec0eba359a816e5c15",
    "filename": "presto-main/src/test/java/com/facebook/presto/block/TestDictionaryBlock.java",
    "status": "modified",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/prestodb/presto/blob/e38594fe593c0548dc7bd077294a9849164634ed/presto-main/src/test/java/com/facebook/presto/block/TestDictionaryBlock.java",
    "raw_url": "https://github.com/prestodb/presto/raw/e38594fe593c0548dc7bd077294a9849164634ed/presto-main/src/test/java/com/facebook/presto/block/TestDictionaryBlock.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/test/java/com/facebook/presto/block/TestDictionaryBlock.java?ref=e38594fe593c0548dc7bd077294a9849164634ed",
    "patch": "@@ -22,11 +22,15 @@\n import io.airlift.slice.Slice;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+\n import static com.facebook.presto.block.BlockAssertions.createRLEBlock;\n import static com.facebook.presto.block.BlockAssertions.createRandomDictionaryBlock;\n import static com.facebook.presto.block.BlockAssertions.createRandomLongsBlock;\n import static com.facebook.presto.block.BlockAssertions.createSlicesBlock;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.Slices.utf8Slice;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertNotEquals;\n@@ -44,6 +48,44 @@ public void testSizeInBytes()\n         assertEquals(dictionaryBlock.getSizeInBytes(), dictionaryBlock.getDictionary().getSizeInBytes() + (100 * SIZE_OF_INT));\n     }\n \n+    @Test\n+    public void testNonCachedLogicalBytes()\n+    {\n+        int numEntries = 10;\n+        BlockBuilder blockBuilder = VARCHAR.createBlockBuilder(null, numEntries);\n+\n+        // Over allocate dictionary indexes but only use the required limit.\n+        int[] dictionaryIndexes = new int[numEntries + 10];\n+        Arrays.fill(dictionaryIndexes, 1);\n+        blockBuilder.appendNull();\n+        dictionaryIndexes[0] = 0;\n+\n+        String string = \"\";\n+        for (int i = 1; i < numEntries; i++) {\n+            string += \"a\";\n+            VARCHAR.writeSlice(blockBuilder, utf8Slice(string));\n+            dictionaryIndexes[i] = numEntries - i;\n+        }\n+\n+        // A dictionary block of size 10, 1st element -> null, 2nd element size -> 9....9th element size -> 1\n+        // Pass different maxChunkSize and different offset and verify if it computes the chunk lengths correctly.\n+        Block elementBlock = blockBuilder.build();\n+        DictionaryBlock block = new DictionaryBlock(numEntries, elementBlock, dictionaryIndexes);\n+        int elementSize = Integer.BYTES + Byte.BYTES;\n+\n+        long size = block.getRegionLogicalSizeInBytes(0, 1);\n+        assertEquals(size, 0 + 1 * elementSize);\n+\n+        size = block.getRegionLogicalSizeInBytes(0, numEntries);\n+        assertEquals(size, 45 + numEntries * elementSize);\n+\n+        size = block.getRegionLogicalSizeInBytes(1, 2);\n+        assertEquals(size, 9 + 8 + 2 * elementSize);\n+\n+        size = block.getRegionLogicalSizeInBytes(9, 1);\n+        assertEquals(size, 1 + 1 * elementSize);\n+    }\n+\n     @Test\n     public void testLogicalSizeInBytes()\n     {"
  },
  {
    "sha": "37b6c215cdeb899d8fb03adb011fb38c3bc02e76",
    "filename": "presto-orc/src/main/java/com/facebook/presto/orc/writer/SliceDictionaryColumnWriter.java",
    "status": "modified",
    "additions": 29,
    "deletions": 20,
    "changes": 49,
    "blob_url": "https://github.com/prestodb/presto/blob/e38594fe593c0548dc7bd077294a9849164634ed/presto-orc/src/main/java/com/facebook/presto/orc/writer/SliceDictionaryColumnWriter.java",
    "raw_url": "https://github.com/prestodb/presto/raw/e38594fe593c0548dc7bd077294a9849164634ed/presto-orc/src/main/java/com/facebook/presto/orc/writer/SliceDictionaryColumnWriter.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-orc/src/main/java/com/facebook/presto/orc/writer/SliceDictionaryColumnWriter.java?ref=e38594fe593c0548dc7bd077294a9849164634ed",
    "patch": "@@ -15,6 +15,7 @@\n \n import com.facebook.presto.common.block.Block;\n import com.facebook.presto.common.block.DictionaryBlock;\n+import com.facebook.presto.common.block.DictionaryId;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.orc.DwrfDataEncryptor;\n import com.facebook.presto.orc.OrcEncoding;\n@@ -29,6 +30,7 @@\n import com.facebook.presto.orc.stream.LongOutputStream;\n import com.facebook.presto.orc.stream.PresentOutputStream;\n import com.facebook.presto.orc.stream.StreamDataOutput;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableList;\n import io.airlift.slice.Slice;\n import io.airlift.units.DataSize;\n@@ -92,37 +94,44 @@ public int getDictionaryEntries()\n         return dictionary.getEntryCount();\n     }\n \n+    @VisibleForTesting\n+    static int getChunkLength(int offset, int[] dictionaryIndexes, int positionCount, Block elementBlock, int maxChunkSize)\n+    {\n+        int endOffset = offset;\n+        long size = elementBlock.getSliceLength(dictionaryIndexes[endOffset++]);\n+        while (endOffset < positionCount) {\n+            // getSliceLength does not include the nulls and length array. But this\n+            // is a heuristic to avoid too much memory allocation, so this is fine.\n+            size += elementBlock.getSliceLength(dictionaryIndexes[endOffset]);\n+            if (size > maxChunkSize) {\n+                break;\n+            }\n+            endOffset++;\n+        }\n+        return endOffset - offset;\n+    }\n+\n     @Override\n     protected boolean tryConvertToDirect(int dictionaryIndexCount, IntBigArray dictionaryIndexes, int maxDirectBytes)\n     {\n         int[][] segments = dictionaryIndexes.getSegments();\n         for (int i = 0; dictionaryIndexCount > 0 && i < segments.length; i++) {\n             int[] segment = segments[i];\n             int positionCount = Math.min(dictionaryIndexCount, segment.length);\n-            Block block = new DictionaryBlock(positionCount, dictionary.getElementBlock(), segment);\n-\n-            while (block != null) {\n-                int chunkPositionCount = block.getPositionCount();\n-                Block chunk = block.getRegion(0, chunkPositionCount);\n-\n-                // avoid chunk with huge logical size\n-                while (chunkPositionCount > 1 && chunk.getLogicalSizeInBytes() > DIRECT_CONVERSION_CHUNK_MAX_LOGICAL_BYTES) {\n-                    chunkPositionCount /= 2;\n-                    chunk = chunk.getRegion(0, chunkPositionCount);\n-                }\n-\n+            Block elementBlock = dictionary.getElementBlock();\n+            DictionaryId dictionaryId = DictionaryId.randomDictionaryId();\n+\n+            int offset = 0;\n+            while (offset < positionCount) {\n+                // Dictionary can contain large values that are repeated. In such a case, the conversion will be abandoned\n+                // due to maxDirectBytes. To avoid allocating too much memory on those cases, process the dictionary in chunks.\n+                int length = getChunkLength(offset, segment, positionCount, elementBlock, DIRECT_CONVERSION_CHUNK_MAX_LOGICAL_BYTES);\n+                Block chunk = new DictionaryBlock(offset, length, elementBlock, segment, false, dictionaryId);\n+                offset += length;\n                 directColumnWriter.writeBlock(chunk);\n                 if (directColumnWriter.getBufferedBytes() > maxDirectBytes) {\n                     return false;\n                 }\n-\n-                // slice block to only unconverted rows\n-                if (chunkPositionCount < block.getPositionCount()) {\n-                    block = block.getRegion(chunkPositionCount, block.getPositionCount() - chunkPositionCount);\n-                }\n-                else {\n-                    block = null;\n-                }\n             }\n \n             dictionaryIndexCount -= positionCount;"
  },
  {
    "sha": "f942d706f7eaee4a4834baa60e559a43ea3d9bea",
    "filename": "presto-orc/src/test/java/com/facebook/presto/orc/writer/TestSliceDictionaryColumnWriter.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/prestodb/presto/blob/e38594fe593c0548dc7bd077294a9849164634ed/presto-orc/src/test/java/com/facebook/presto/orc/writer/TestSliceDictionaryColumnWriter.java",
    "raw_url": "https://github.com/prestodb/presto/raw/e38594fe593c0548dc7bd077294a9849164634ed/presto-orc/src/test/java/com/facebook/presto/orc/writer/TestSliceDictionaryColumnWriter.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-orc/src/test/java/com/facebook/presto/orc/writer/TestSliceDictionaryColumnWriter.java?ref=e38594fe593c0548dc7bd077294a9849164634ed",
    "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.writer;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSliceDictionaryColumnWriter\n+{\n+    @Test\n+    public void testChunkLength()\n+    {\n+        int numEntries = 10;\n+        BlockBuilder blockBuilder = VARCHAR.createBlockBuilder(null, numEntries);\n+\n+        // Over allocate dictionary indexes but only use the required limit.\n+        int[] dictionaryIndexes = new int[numEntries + 10];\n+        Arrays.fill(dictionaryIndexes, 1);\n+        blockBuilder.appendNull();\n+        dictionaryIndexes[0] = 0;\n+\n+        String string = \"\";\n+        for (int i = 1; i < numEntries; i++) {\n+            string += \"a\";\n+            VARCHAR.writeSlice(blockBuilder, utf8Slice(string));\n+            dictionaryIndexes[i] = numEntries - i;\n+        }\n+\n+        // A dictionary block of size 10, 1st element -> null, 2nd element size -> 9....9th element size -> 1\n+        // Pass different maxChunkSize and different offset and verify if it computes the chunk lengths correctly.\n+        Block elementBlock = blockBuilder.build();\n+        int length = SliceDictionaryColumnWriter.getChunkLength(0, dictionaryIndexes, numEntries, elementBlock, 10);\n+        assertEquals(length, 2);\n+\n+        length = SliceDictionaryColumnWriter.getChunkLength(0, dictionaryIndexes, numEntries, elementBlock, 1_000_000);\n+        assertEquals(length, numEntries);\n+\n+        length = SliceDictionaryColumnWriter.getChunkLength(0, dictionaryIndexes, numEntries, elementBlock, 20);\n+        assertEquals(length, 3);\n+\n+        length = SliceDictionaryColumnWriter.getChunkLength(1, dictionaryIndexes, numEntries, elementBlock, 9 + 8 + 7);\n+        assertEquals(length, 3);\n+\n+        length = SliceDictionaryColumnWriter.getChunkLength(2, dictionaryIndexes, numEntries, elementBlock, 0);\n+        assertEquals(length, 1);\n+\n+        length = SliceDictionaryColumnWriter.getChunkLength(9, dictionaryIndexes, numEntries, elementBlock, 0);\n+        assertEquals(length, 1);\n+    }\n+}"
  }
]
