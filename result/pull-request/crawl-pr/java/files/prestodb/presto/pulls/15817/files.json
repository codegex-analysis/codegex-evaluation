[
  {
    "sha": "d2c5a74c05e32bc8c13016f06f441c115912b272",
    "filename": "presto-docs/src/main/sphinx/functions/aggregate.rst",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/prestodb/presto/blob/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-docs/src/main/sphinx/functions/aggregate.rst",
    "raw_url": "https://github.com/prestodb/presto/raw/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-docs/src/main/sphinx/functions/aggregate.rst",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-docs/src/main/sphinx/functions/aggregate.rst?ref=08e4bb361739048c7c01ce36c9eb48d70f057758",
    "patch": "@@ -411,6 +411,15 @@ Statistical Aggregate Functions\n \n     Returns the sample variance of all input values.\n \n+.. function:: t_statistic(x) -> double\n+\n+    Returns the one-sample Student's t-statistic for all\n+    input values.\n+\n+.. function:: paired_t_statistic(x, y) -> double\n+\n+    Returns the paired Student's t-statistic for the\n+    difference ``y - x`` for all input values.\n \n Classification Metrics Aggregate Functions\n ------------------------------------------"
  },
  {
    "sha": "fa229a2670f16003b57e8db75e8d9ba0ce3b56dd",
    "filename": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInTypeAndFunctionNamespaceManager.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-main/src/main/java/com/facebook/presto/metadata/BuiltInTypeAndFunctionNamespaceManager.java",
    "raw_url": "https://github.com/prestodb/presto/raw/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-main/src/main/java/com/facebook/presto/metadata/BuiltInTypeAndFunctionNamespaceManager.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/metadata/BuiltInTypeAndFunctionNamespaceManager.java?ref=08e4bb361739048c7c01ce36c9eb48d70f057758",
    "patch": "@@ -67,6 +67,7 @@\n import com.facebook.presto.operator.aggregation.MergeHyperLogLogAggregation;\n import com.facebook.presto.operator.aggregation.MergeQuantileDigestFunction;\n import com.facebook.presto.operator.aggregation.MergeTDigestFunction;\n+import com.facebook.presto.operator.aggregation.PairedTStatisticAggregation;\n import com.facebook.presto.operator.aggregation.RealCorrelationAggregation;\n import com.facebook.presto.operator.aggregation.RealCovarianceAggregation;\n import com.facebook.presto.operator.aggregation.RealGeometricMeanAggregations;\n@@ -75,6 +76,7 @@\n import com.facebook.presto.operator.aggregation.RealSumAggregation;\n import com.facebook.presto.operator.aggregation.ReduceAggregationFunction;\n import com.facebook.presto.operator.aggregation.SumDataSizeForStats;\n+import com.facebook.presto.operator.aggregation.TStatisticAggregation;\n import com.facebook.presto.operator.aggregation.VarianceAggregation;\n import com.facebook.presto.operator.aggregation.approxmostfrequent.BigintApproximateMostFrequent;\n import com.facebook.presto.operator.aggregation.approxmostfrequent.VarcharApproximateMostFrequent;\n@@ -591,6 +593,8 @@ private void registerBuiltInTypes()\n                 .aggregates(CentralMomentsAggregation.class)\n                 .aggregates(ApproximateLongPercentileAggregations.class)\n                 .aggregates(ApproximateLongPercentileArrayAggregations.class)\n+                .aggregates(TStatisticAggregation.class)\n+                .aggregates(PairedTStatisticAggregation.class)\n                 .aggregates(ApproximateDoublePercentileAggregations.class)\n                 .aggregates(ApproximateDoublePercentileArrayAggregations.class)\n                 .aggregates(ApproximateRealPercentileAggregations.class)"
  },
  {
    "sha": "6c7b81e5a56c20caf23e2a038d0e9e62a6ecc2fd",
    "filename": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/PairedTStatisticAggregation.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/prestodb/presto/blob/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-main/src/main/java/com/facebook/presto/operator/aggregation/PairedTStatisticAggregation.java",
    "raw_url": "https://github.com/prestodb/presto/raw/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-main/src/main/java/com/facebook/presto/operator/aggregation/PairedTStatisticAggregation.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/operator/aggregation/PairedTStatisticAggregation.java?ref=08e4bb361739048c7c01ce36c9eb48d70f057758",
    "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.operator.aggregation.state.CentralMomentsState;\n+import com.facebook.presto.spi.function.AggregationFunction;\n+import com.facebook.presto.spi.function.AggregationState;\n+import com.facebook.presto.spi.function.CombineFunction;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.InputFunction;\n+import com.facebook.presto.spi.function.OutputFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.operator.aggregation.AggregationUtils.mergeCentralMomentsState;\n+import static com.facebook.presto.operator.aggregation.AggregationUtils.updateCentralMomentsState;\n+\n+@AggregationFunction\n+@Description(\"Returns the paired t-statistic\")\n+public final class PairedTStatisticAggregation\n+{\n+    private PairedTStatisticAggregation() {}\n+\n+    @InputFunction\n+    public static void doubleInput(@AggregationState CentralMomentsState state, @SqlType(StandardTypes.DOUBLE) double x, @SqlType(StandardTypes.DOUBLE) double y)\n+    {\n+        double value = y - x;\n+        updateCentralMomentsState(state, value);\n+    }\n+\n+    @InputFunction\n+    public static void intInput(@AggregationState CentralMomentsState state, @SqlType(StandardTypes.INTEGER) long x, @SqlType(StandardTypes.INTEGER) long y)\n+    {\n+        double value = y - x;\n+        updateCentralMomentsState(state, (double) value);\n+    }\n+\n+    @CombineFunction\n+    public static void combine(@AggregationState CentralMomentsState state, @AggregationState CentralMomentsState otherState)\n+    {\n+        mergeCentralMomentsState(state, otherState);\n+    }\n+\n+    @AggregationFunction(value = \"paired_t_statistic\")\n+    @Description(\"Returns the Student's t-statistic for the paired t-test\")\n+    @OutputFunction(StandardTypes.DOUBLE)\n+    public static void paired_t_statistic(@AggregationState CentralMomentsState state, BlockBuilder out)\n+    {\n+        long n = state.getCount();\n+\n+        if (n < 2) {\n+            out.appendNull();\n+        }\n+        else {\n+            double sampStdDev = Math.sqrt(state.getM2() / (state.getCount() - 1));\n+            double result = state.getM1() / (sampStdDev / Math.sqrt(state.getCount()));\n+            DOUBLE.writeDouble(out, result);\n+        }\n+    }\n+}"
  },
  {
    "sha": "e4903b378fad2506f07543a0db03ca986ff65f2c",
    "filename": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/TStatisticAggregation.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/prestodb/presto/blob/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-main/src/main/java/com/facebook/presto/operator/aggregation/TStatisticAggregation.java",
    "raw_url": "https://github.com/prestodb/presto/raw/08e4bb361739048c7c01ce36c9eb48d70f057758/presto-main/src/main/java/com/facebook/presto/operator/aggregation/TStatisticAggregation.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/operator/aggregation/TStatisticAggregation.java?ref=08e4bb361739048c7c01ce36c9eb48d70f057758",
    "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.aggregation;\n+\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.operator.aggregation.state.CentralMomentsState;\n+import com.facebook.presto.spi.function.AggregationFunction;\n+import com.facebook.presto.spi.function.AggregationState;\n+import com.facebook.presto.spi.function.CombineFunction;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.InputFunction;\n+import com.facebook.presto.spi.function.OutputFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.operator.aggregation.AggregationUtils.mergeCentralMomentsState;\n+import static com.facebook.presto.operator.aggregation.AggregationUtils.updateCentralMomentsState;\n+\n+@AggregationFunction\n+@Description(\"Returns the Student's t-statistic\")\n+public final class TStatisticAggregation\n+{\n+    private TStatisticAggregation() {}\n+\n+    @InputFunction\n+    public static void input(@AggregationState CentralMomentsState state, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        updateCentralMomentsState(state, value);\n+    }\n+\n+    @InputFunction\n+    public static void input(@AggregationState CentralMomentsState state, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        updateCentralMomentsState(state, (double) value);\n+    }\n+\n+    @CombineFunction\n+    public static void combine(@AggregationState CentralMomentsState state, @AggregationState CentralMomentsState otherState)\n+    {\n+        mergeCentralMomentsState(state, otherState);\n+    }\n+\n+    @AggregationFunction(value = \"t_statistic\")\n+    @Description(\"Returns the Student's t-statistic for the one-sample t-test\")\n+    @OutputFunction(StandardTypes.DOUBLE)\n+    public static void t_statistic(@AggregationState CentralMomentsState state, BlockBuilder out)\n+    {\n+        long n = state.getCount();\n+\n+        if (n < 2) {\n+            out.appendNull();\n+        }\n+        else {\n+            double sampStdDev = Math.sqrt(state.getM2() / (state.getCount() - 1));\n+            double result = state.getM1() / (sampStdDev / Math.sqrt(state.getCount()));\n+            DOUBLE.writeDouble(out, result);\n+        }\n+    }\n+}"
  }
]
