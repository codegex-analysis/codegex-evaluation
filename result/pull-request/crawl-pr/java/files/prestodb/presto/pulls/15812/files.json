[
  {
    "sha": "542d35947e0ee656cc35df4b8b7c1804c5d74df2",
    "filename": "presto-docs/src/main/sphinx/functions/math.rst",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/prestodb/presto/blob/1266fb719601751b95639c3d73f769fb33664730/presto-docs/src/main/sphinx/functions/math.rst",
    "raw_url": "https://github.com/prestodb/presto/raw/1266fb719601751b95639c3d73f769fb33664730/presto-docs/src/main/sphinx/functions/math.rst",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-docs/src/main/sphinx/functions/math.rst?ref=1266fb719601751b95639c3d73f769fb33664730",
    "patch": "@@ -73,6 +73,35 @@ Mathematical Functions\n     The mean and value v must be real values and the standard deviation must be a real\n     and positive value.\n \n+.. function:: inverse_binomial_cdf(numTrials, successProbability, p) -> int\n+\n+    Compute the inverse of the Binomial cdf with given numTrials and successProbability for the\n+    cumulative probability (p):  P(N < n).\n+    The successProbability and p must be real values in [0, 1] and the numTrials must be\n+    a positive integer.\n+\n+.. function:: binomial_cdf(numTrials, successProbability, value) -> double\n+\n+    Compute the Binomial cdf with given numTrials and successProbability:  P(N < value).\n+    The successProbability and p must be real values in [0, 1] and the numTrials must be\n+    a positive integer.\n+\n+.. function:: binomial_test(numTrials, numberOfSuccesses, probability, alternativeHypothesis) -> double\n+\n+    Returns the observed significance level, or p-value, associated with a Binomial test.\n+    The probability must be real value in [0, 1], and the alternativeHypothesis must be a string which is\n+    exactly one of the following three options (case sensitive): \"LESS_THAN\", \"GREATER_THAN\", \"TWO_SIDED\"\n+    The numTrials and numberOfSuccesses must be positive integers and have numberOfSuccesses <= numTrials.\n+\n+.. function:: binomial_test(numTrials, numberOfSuccesses, probability, alternativeHypothesis, alpha) -> boolean\n+\n+    Returns whether the null hypothesis can be rejected with the given confidence level, i.e. correctly reject\n+    with probability >= (1-alpha).\n+    The probability must be real value in [0, 1], and the alternativeHypothesis must be a string which is\n+    exactly one of the following three options (case sensitive): \"LESS_THAN\", \"GREATER_THAN\", \"TWO_SIDED\"\n+    The numTrials and numberOfSuccesses must be positive integers and have numberOfSuccesses <= numTrials.\n+    Alpha must be a real value within [0, 1].\n+\n .. function:: inverse_beta_cdf(a, b, p) -> double\n \n     Compute the inverse of the Beta cdf with given a, b parameters for the cumulative"
  },
  {
    "sha": "de1a8419c6d11c5a0ab75ed5b4976db49564aa87",
    "filename": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java",
    "status": "modified",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/prestodb/presto/blob/1266fb719601751b95639c3d73f769fb33664730/presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java",
    "raw_url": "https://github.com/prestodb/presto/raw/1266fb719601751b95639c3d73f769fb33664730/presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java?ref=1266fb719601751b95639c3d73f769fb33664730",
    "patch": "@@ -31,7 +31,10 @@\n import com.google.common.primitives.Doubles;\n import io.airlift.slice.Slice;\n import org.apache.commons.math3.distribution.BetaDistribution;\n+import org.apache.commons.math3.distribution.BinomialDistribution;\n import org.apache.commons.math3.special.Erf;\n+import org.apache.commons.math3.stat.inference.AlternativeHypothesis;\n+import org.apache.commons.math3.stat.inference.BinomialTest;\n \n import java.math.BigDecimal;\n import java.math.BigInteger;\n@@ -674,6 +677,99 @@ public static double normalCdf(\n         return 0.5 * (1 + Erf.erf((value - mean) / (standardDeviation * Math.sqrt(2))));\n     }\n \n+    @Description(\"inverse of Binomial cdf given numTrials, successProbability parameters and p\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.INTEGER)\n+    public static long inverseBinomialCdf(\n+            @SqlType(StandardTypes.INTEGER) long numTrials,\n+            @SqlType(StandardTypes.DOUBLE) double successProbability,\n+            @SqlType(StandardTypes.DOUBLE) double p)\n+    {\n+        checkCondition(p >= 0 && p <= 1, INVALID_FUNCTION_ARGUMENT, \"p must be in the interval [0, 1]\");\n+        checkCondition(successProbability >= 0 && successProbability <= 1, INVALID_FUNCTION_ARGUMENT, \"successProbability must be in the interval [0, 1]\");\n+        checkCondition(numTrials > 0, INVALID_FUNCTION_ARGUMENT, \"numTrials must be > 0\");\n+        BinomialDistribution distribution = new BinomialDistribution(null, (int) numTrials, successProbability);\n+        return distribution.inverseCumulativeProbability(p);\n+    }\n+\n+    @Description(\"Binomial cdf given numTrials, successProbability, and a value\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double binomialCdf(\n+            @SqlType(StandardTypes.INTEGER) long numTrials,\n+            @SqlType(StandardTypes.DOUBLE) double successProbability,\n+            @SqlType(StandardTypes.INTEGER) long value)\n+    {\n+        checkCondition(successProbability >= 0.0 && successProbability <= 1.0, INVALID_FUNCTION_ARGUMENT, \"successProbability must be in the interval [0, 1]\");\n+        checkCondition(numTrials > 0, INVALID_FUNCTION_ARGUMENT, \"numTrials must be > 0\");\n+        BinomialDistribution distribution = new BinomialDistribution(null, (int) numTrials, successProbability);\n+        return distribution.cumulativeProbability((int) value);\n+    }\n+\n+    @Description(\"Returns the observed significance level, or p-value, associated with a Binomial test\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double binomialTest(\n+            @SqlType(StandardTypes.INTEGER) long numberOfTrials,\n+            @SqlType(StandardTypes.INTEGER) long numberOfSuccesses,\n+            @SqlType(StandardTypes.DOUBLE) double probability,\n+            @SqlType(StandardTypes.VARCHAR) Slice alternativeHypothesis)\n+    {\n+        String alternativeHypothesisString = alternativeHypothesis.toStringUtf8();\n+        checkCondition(numberOfTrials > 0, INVALID_FUNCTION_ARGUMENT, \"numberOfTrials must be > 0\");\n+        checkCondition(numberOfSuccesses > 0, INVALID_FUNCTION_ARGUMENT, \"numberOfSuccesses must be > 0\");\n+        checkCondition(numberOfSuccesses <= numberOfTrials, INVALID_FUNCTION_ARGUMENT, \"numberOfSuccesses must be at most numberOfTrials\");\n+        checkCondition(probability >= 0 && probability <= 1, INVALID_FUNCTION_ARGUMENT, \"probability must be in the interval [0, 1]\");\n+        checkCondition(\n+                alternativeHypothesisString.equals(\"LESS_THAN\") | alternativeHypothesisString.equals(\"TWO_SIDED\") | alternativeHypothesisString.equals(\"GREATER_THAN\"),\n+                INVALID_FUNCTION_ARGUMENT,\n+                \"alternativeHypothesis must be one of {\\\"LESS_THAN\\\", \\\"TWO_SIDED\\\", \\\"GREATER_THAN\\\"}\");\n+\n+        AlternativeHypothesis altHypothesis = AlternativeHypothesis.GREATER_THAN;\n+        if (alternativeHypothesisString.equals(\"LESS_THAN\")) {\n+            altHypothesis = AlternativeHypothesis.LESS_THAN;\n+        }\n+        if (alternativeHypothesisString.equals(\"TWO_SIDED\")) {\n+            altHypothesis = AlternativeHypothesis.TWO_SIDED;\n+        }\n+\n+        BinomialTest test = new BinomialTest();\n+        return test.binomialTest((int) numberOfTrials, (int) numberOfSuccesses, probability, altHypothesis);\n+    }\n+\n+    @Description(\"Returns whether the null hypothesis can be rejected with the given confidence level.\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean binomialTest(\n+            @SqlType(StandardTypes.INTEGER) long numberOfTrials,\n+            @SqlType(StandardTypes.INTEGER) long numberOfSuccesses,\n+            @SqlType(StandardTypes.DOUBLE) double probability,\n+            @SqlType(StandardTypes.VARCHAR) Slice alternativeHypothesis,\n+            @SqlType(StandardTypes.DOUBLE) double alpha)\n+    {\n+        String alternativeHypothesisString = alternativeHypothesis.toStringUtf8();\n+        checkCondition(numberOfTrials > 0, INVALID_FUNCTION_ARGUMENT, \"numberOfTrials must be > 0\");\n+        checkCondition(numberOfSuccesses > 0, INVALID_FUNCTION_ARGUMENT, \"numberOfSuccesses must be > 0\");\n+        checkCondition(numberOfSuccesses <= numberOfTrials, INVALID_FUNCTION_ARGUMENT, \"numberOfSuccesses must be at most numberOfTrials\");\n+        checkCondition(probability >= 0 && probability <= 1, INVALID_FUNCTION_ARGUMENT, \"probability must be in the interval [0, 1]\");\n+        checkCondition(alpha >= 0 && alpha <= 1, INVALID_FUNCTION_ARGUMENT, \"alpha must be in the interval [0, 1]\");\n+        checkCondition(\n+                alternativeHypothesisString.equals(\"LESS_THAN\") | alternativeHypothesisString.equals(\"TWO_SIDED\") | alternativeHypothesisString.equals(\"GREATER_THAN\"),\n+                INVALID_FUNCTION_ARGUMENT,\n+                \"alternativeHypothesis must be one of {\\\"LESS_THAN\\\", \\\"TWO_SIDED\\\", \\\"GREATER_THAN\\\"}\");\n+\n+        AlternativeHypothesis altHypothesis = AlternativeHypothesis.GREATER_THAN;\n+        if (alternativeHypothesisString.equals(\"LESS_THAN\")) {\n+            altHypothesis = AlternativeHypothesis.LESS_THAN;\n+        }\n+        if (alternativeHypothesisString.equals(\"TWO_SIDED\")) {\n+            altHypothesis = AlternativeHypothesis.TWO_SIDED;\n+        }\n+\n+        BinomialTest test = new BinomialTest();\n+        return test.binomialTest((int) numberOfTrials, (int) numberOfSuccesses, probability, altHypothesis, alpha);\n+    }\n+\n     @Description(\"inverse of Beta cdf given a, b parameters and probability\")\n     @ScalarFunction\n     @SqlType(StandardTypes.DOUBLE)"
  },
  {
    "sha": "85049e132680711d3aee19845f777d966e1f1350",
    "filename": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java",
    "status": "modified",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/prestodb/presto/blob/1266fb719601751b95639c3d73f769fb33664730/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java",
    "raw_url": "https://github.com/prestodb/presto/raw/1266fb719601751b95639c3d73f769fb33664730/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java?ref=1266fb719601751b95639c3d73f769fb33664730",
    "patch": "@@ -1343,6 +1343,58 @@ public void testNormalCdf()\n         assertInvalidFunction(\"normal_cdf(0, nan(), 0.1985)\", \"standardDeviation must be > 0\");\n     }\n \n+    @Test\n+    public void testBinomialCdf()\n+            throws Exception\n+    {\n+        assertFunction(\"binomial_cdf(5, 0.5, 5)\", DOUBLE, 1.0);\n+        assertFunction(\"binomial_cdf(5, 0.5, 0)\", DOUBLE, 0.03125);\n+        assertFunction(\"binomial_cdf(5, 0.5, 3)\", DOUBLE, 0.8125);\n+        assertFunction(\"binomial_cdf(20, 1.0, 0)\", DOUBLE, 0.0);\n+\n+        assertInvalidFunction(\"binomial_cdf(5, -0.5, 3)\", \"successProbability must be in the interval [0, 1]\");\n+        assertInvalidFunction(\"binomial_cdf(5, 1.5, 3)\", \"successProbability must be in the interval [0, 1]\");\n+        assertInvalidFunction(\"binomial_cdf(-5, 0.5, 3)\", \"numTrials must be > 0\");\n+    }\n+\n+    @Test\n+    public void testInverseBinomialCdf()\n+            throws Exception\n+    {\n+        assertFunction(\"inverse_binomial_cdf(20, 0.5, 0.5)\", INTEGER, 10);\n+        assertFunction(\"inverse_binomial_cdf(20, 0.5, 0.0)\", INTEGER, 0);\n+        assertFunction(\"inverse_binomial_cdf(20, 0.5, 1.0)\", INTEGER, 20);\n+\n+        assertInvalidFunction(\"inverse_binomial_cdf(5, -0.5, 0.3)\", \"successProbability must be in the interval [0, 1]\");\n+        assertInvalidFunction(\"inverse_binomial_cdf(5, 1.5, 0.3)\", \"successProbability must be in the interval [0, 1]\");\n+        assertInvalidFunction(\"inverse_binomial_cdf(5, 0.5, -3.0)\", \"p must be in the interval [0, 1]\");\n+        assertInvalidFunction(\"inverse_binomial_cdf(5, 0.5, 3.0)\", \"p must be in the interval [0, 1]\");\n+        assertInvalidFunction(\"inverse_binomial_cdf(-5, 0.5, 0.3)\", \"numTrials must be > 0\");\n+    }\n+\n+    @Test\n+    public void testBinomialTest()\n+            throws Exception\n+    {\n+        assertFunction(\"round(binomial_test(15, 3, 0.1, 'GREATER_THAN'), 12)\", DOUBLE, 0.184061069106);\n+        assertFunction(\"binomial_test(15, 3, 0.1, 'GREATER_THAN', 0.05)\", BOOLEAN, false);\n+        assertFunction(\"binomial_test(15, 3, 0.1, 'GREATER_THAN', 0.50)\", BOOLEAN, true);\n+\n+        assertFunction(\"round(binomial_test(15, 3, 0.1, 'TWO_SIDED'), 12)\", DOUBLE, 0.184061069106);\n+        assertFunction(\"round(binomial_test(15, 3, 0.1, 'LESS_THAN'), 12)\", DOUBLE, 0.944444369992);\n+\n+        assertInvalidFunction(\n+                \"binomial_test(15, 3, 0.1, 'greater_than')\",\n+                \"alternativeHypothesis must be one of {\\\"LESS_THAN\\\", \\\"TWO_SIDED\\\", \\\"GREATER_THAN\\\"}\");\n+\n+        assertInvalidFunction(\"binomial_test(20, 3, -0.1, 'GREATER_THAN')\", \"probability must be in the interval [0, 1]\");\n+        assertInvalidFunction(\"binomial_test(20, 3, 1.1, 'GREATER_THAN')\", \"probability must be in the interval [0, 1]\");\n+\n+        assertInvalidFunction(\"binomial_test(2, 3, 0.1, 'GREATER_THAN')\", \"numberOfSuccesses must be at most numberOfTrials\");\n+        assertInvalidFunction(\"binomial_test(-2, 3, 0.1, 'GREATER_THAN')\", \"numberOfTrials must be > 0\");\n+        assertInvalidFunction(\"binomial_test(20, -3, 0.1, 'GREATER_THAN')\", \"numberOfSuccesses must be > 0\");\n+    }\n+\n     @Test\n     public void testInverseBetaCdf()\n     {"
  }
]
