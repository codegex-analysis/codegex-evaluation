[
  {
    "sha": "5c96a52469f744eb52b01a8fdd417c187e0e0d2e",
    "filename": "presto-base-jdbc/src/test/java/com/facebook/presto/plugin/jdbc/optimization/TestJdbcComputePushdown.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-base-jdbc/src/test/java/com/facebook/presto/plugin/jdbc/optimization/TestJdbcComputePushdown.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-base-jdbc/src/test/java/com/facebook/presto/plugin/jdbc/optimization/TestJdbcComputePushdown.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-base-jdbc/src/test/java/com/facebook/presto/plugin/jdbc/optimization/TestJdbcComputePushdown.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -43,6 +43,7 @@\n import com.facebook.presto.spi.relation.RowExpression;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n import com.facebook.presto.sql.TestingRowExpressionTranslator;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.Plan;\n import com.facebook.presto.sql.planner.TypeProvider;\n import com.facebook.presto.sql.planner.assertions.MatchResult;\n@@ -74,6 +75,8 @@\n import static com.facebook.presto.common.type.IntegerType.INTEGER;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n import static com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder.expression;\n+import static com.facebook.presto.type.TypeUtils.BIGINT_TYPE;\n+import static com.facebook.presto.type.TypeUtils.BOOLEAN_TYPE;\n import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static java.util.function.Function.identity;\n@@ -114,7 +117,7 @@ public void testJdbcComputePushdownAll()\n         String schema = \"test_schema\";\n \n         String expression = \"(c1 + c2) - c2\";\n-        TypeProvider typeProvider = TypeProvider.copyOf(ImmutableMap.of(\"c1\", BIGINT, \"c2\", BIGINT));\n+        SemanticTypeProvider typeProvider = SemanticTypeProvider.viewOf(ImmutableMap.of(\"c1\", BIGINT_TYPE, \"c2\", BIGINT_TYPE));\n         RowExpression rowExpression = sqlToRowExpressionTranslator.translateAndOptimize(expression(expression), typeProvider);\n         Set<ColumnHandle> columns = Stream.of(\"c1\", \"c2\").map(TestJdbcComputePushdown::integerJdbcColumnHandle).collect(Collectors.toSet());\n         PlanNode original = filter(jdbcTableScan(schema, table, BIGINT, \"c1\", \"c2\"), rowExpression);\n@@ -136,7 +139,7 @@ public void testJdbcComputePushdownBooleanOperations()\n         String schema = \"test_schema\";\n \n         String expression = \"(((c1 + c2) - c2 <> c2) OR c2 = c1) AND c1 <> c2\";\n-        TypeProvider typeProvider = TypeProvider.copyOf(ImmutableMap.of(\"c1\", BIGINT, \"c2\", BIGINT));\n+        SemanticTypeProvider typeProvider = SemanticTypeProvider.viewOf(ImmutableMap.of(\"c1\", BIGINT_TYPE, \"c2\", BIGINT_TYPE));\n         RowExpression rowExpression = sqlToRowExpressionTranslator.translateAndOptimize(expression(expression), typeProvider);\n         Set<ColumnHandle> columns = Stream.of(\"c1\", \"c2\").map(TestJdbcComputePushdown::integerJdbcColumnHandle).collect(Collectors.toSet());\n         PlanNode original = filter(jdbcTableScan(schema, table, BIGINT, \"c1\", \"c2\"), rowExpression);\n@@ -161,7 +164,7 @@ public void testJdbcComputePushdownUnsupported()\n         String schema = \"test_schema\";\n \n         String expression = \"(c1 + c2) > c2\";\n-        TypeProvider typeProvider = TypeProvider.copyOf(ImmutableMap.of(\"c1\", BIGINT, \"c2\", BIGINT));\n+        SemanticTypeProvider typeProvider = SemanticTypeProvider.viewOf(ImmutableMap.of(\"c1\", BIGINT_TYPE, \"c2\", BIGINT_TYPE));\n         RowExpression rowExpression = sqlToRowExpressionTranslator.translateAndOptimize(expression(expression), typeProvider);\n         Set<ColumnHandle> columns = Stream.of(\"c1\", \"c2\").map(TestJdbcComputePushdown::integerJdbcColumnHandle).collect(Collectors.toSet());\n         PlanNode original = filter(jdbcTableScan(schema, table, BIGINT, \"c1\", \"c2\"), rowExpression);\n@@ -184,7 +187,7 @@ public void testJdbcComputePushdownWithConstants()\n         String schema = \"test_schema\";\n \n         String expression = \"(c1 + c2) = 3\";\n-        TypeProvider typeProvider = TypeProvider.copyOf(ImmutableMap.of(\"c1\", BIGINT, \"c2\", BIGINT));\n+        SemanticTypeProvider typeProvider = SemanticTypeProvider.viewOf(ImmutableMap.of(\"c1\", BIGINT_TYPE, \"c2\", BIGINT_TYPE));\n         RowExpression rowExpression = sqlToRowExpressionTranslator.translateAndOptimize(expression(expression), typeProvider);\n         Set<ColumnHandle> columns = Stream.of(\"c1\", \"c2\").map(TestJdbcComputePushdown::integerJdbcColumnHandle).collect(Collectors.toSet());\n         PlanNode original = filter(jdbcTableScan(schema, table, BIGINT, \"c1\", \"c2\"), rowExpression);\n@@ -193,7 +196,7 @@ public void testJdbcComputePushdownWithConstants()\n         JdbcTableLayoutHandle jdbcTableLayoutHandle = new JdbcTableLayoutHandle(\n                 jdbcTableHandle,\n                 TupleDomain.none(),\n-                Optional.of(new JdbcExpression(\"(('c1' + 'c2') = ?)\", ImmutableList.of(new ConstantExpression(Long.valueOf(3), INTEGER)))));\n+                Optional.of(new JdbcExpression(\"(('c1' + 'c2') = ?)\", ImmutableList.of(new ConstantExpression(3, INTEGER)))));\n \n         ConnectorSession session = new TestingConnectorSession(ImmutableList.of());\n         PlanNode actual = this.jdbcComputePushdown.optimize(original, session, null, ID_ALLOCATOR);\n@@ -209,7 +212,7 @@ public void testJdbcComputePushdownNotOperator()\n         String schema = \"test_schema\";\n \n         String expression = \"c1 AND NOT(c2)\";\n-        TypeProvider typeProvider = TypeProvider.copyOf(ImmutableMap.of(\"c1\", BOOLEAN, \"c2\", BOOLEAN));\n+        SemanticTypeProvider typeProvider = SemanticTypeProvider.viewOf(ImmutableMap.of(\"c1\", BOOLEAN_TYPE, \"c2\", BOOLEAN_TYPE));\n         RowExpression rowExpression = sqlToRowExpressionTranslator.translateAndOptimize(expression(expression), typeProvider);\n         PlanNode original = filter(jdbcTableScan(schema, table, BOOLEAN, \"c1\", \"c2\"), rowExpression);\n "
  },
  {
    "sha": "ef7d93c6e34190ef69109d7083239bdbc5bfa6d5",
    "filename": "presto-common/src/main/java/com/facebook/presto/common/type/FunctionType.java",
    "status": "modified",
    "additions": 12,
    "deletions": 7,
    "changes": 19,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-common/src/main/java/com/facebook/presto/common/type/FunctionType.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-common/src/main/java/com/facebook/presto/common/type/FunctionType.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-common/src/main/java/com/facebook/presto/common/type/FunctionType.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -33,39 +33,44 @@\n     public static final String NAME = \"function\";\n \n     private final TypeSignature signature;\n-    private final Type returnType;\n-    private final List<Type> argumentTypes;\n+    private final TypeWithName returnType;\n+    private final List<TypeWithName> argumentTypes;\n \n-    public FunctionType(List<Type> argumentTypes, Type returnType)\n+    public FunctionType(List<TypeWithName> argumentTypes, TypeWithName returnType)\n     {\n         this.signature = new TypeSignature(NAME, typeParameters(argumentTypes, returnType));\n         this.returnType = requireNonNull(returnType, \"returnType is null\");\n         this.argumentTypes = unmodifiableList(new ArrayList<>(requireNonNull(argumentTypes, \"argumentTypes is null\")));\n     }\n \n-    private static List<TypeSignatureParameter> typeParameters(List<Type> argumentTypes, Type returnType)\n+    private static List<TypeSignatureParameter> typeParameters(List<TypeWithName> argumentTypes, TypeWithName returnType)\n     {\n         requireNonNull(returnType, \"returnType is null\");\n         requireNonNull(argumentTypes, \"argumentTypes is null\");\n         List<TypeSignatureParameter> parameters = new ArrayList<>(argumentTypes.size() + 1);\n         argumentTypes.stream()\n-                .map(Type::getTypeSignature)\n+                .map(TypeWithName::getTypeSignature)\n                 .map(TypeSignatureParameter::of)\n                 .forEach(parameters::add);\n         parameters.add(TypeSignatureParameter.of(returnType.getTypeSignature()));\n         return unmodifiableList(parameters);\n     }\n \n-    public Type getReturnType()\n+    public TypeWithName getReturnType()\n     {\n         return returnType;\n     }\n \n-    public List<Type> getArgumentTypes()\n+    public List<TypeWithName> getArgumentTypes()\n     {\n         return argumentTypes;\n     }\n \n+    public List<Type> getArgumentPysicalTypes()\n+    {\n+        return argumentTypes.stream().map(TypeWithName::getType).collect(toList());\n+    }\n+\n     @Override\n     public List<Type> getTypeParameters()\n     {"
  },
  {
    "sha": "e53eb25140ba89ba31ef2e945018473c9153378a",
    "filename": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -61,6 +61,11 @@ public static boolean isApproximateNumericType(Type type)\n         return type.equals(DOUBLE) || type.equals(REAL);\n     }\n \n+    public static boolean isCharacterType(Type type)\n+    {\n+        return type instanceof VarcharType || type instanceof CharType;\n+    }\n+\n     /**\n      * Get the native value as an object in the value at {@code position} of {@code block}.\n      */"
  },
  {
    "sha": "1d20790b10c4d6a202b3d4eebb682ccc4bf46890",
    "filename": "presto-common/src/main/java/com/facebook/presto/common/type/TypeWithName.java",
    "status": "modified",
    "additions": 29,
    "deletions": 4,
    "changes": 33,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-common/src/main/java/com/facebook/presto/common/type/TypeWithName.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-common/src/main/java/com/facebook/presto/common/type/TypeWithName.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-common/src/main/java/com/facebook/presto/common/type/TypeWithName.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -29,17 +29,37 @@\n public class TypeWithName\n         implements Type\n {\n-    private final QualifiedObjectName name;\n+    private final String name;\n     private final Type type;\n     private final TypeSignature typeSignature;\n \n     public TypeWithName(QualifiedObjectName name, Type type)\n     {\n-        this.name = requireNonNull(name, \"name is null\");\n-        this.type = requireNonNull(type, \"type is null\");\n+        this.name = requireNonNull(name, \"name is null\").toString();\n+        requireNonNull(type, \"type is null\");\n+        if (type instanceof TypeWithName) {\n+            this.type = ((TypeWithName) type).getType();\n+        }\n+        else {\n+            this.type = type;\n+        }\n         this.typeSignature = new TypeSignature(new UserDefinedType(name, type.getTypeSignature()));\n     }\n \n+    public TypeWithName(Type type)\n+    {\n+        requireNonNull(type, \"type is null\");\n+        requireNonNull(type, \"type is null\");\n+        if (type instanceof TypeWithName) {\n+            this.type = ((TypeWithName) type).getType();\n+        }\n+        else {\n+            this.type = type;\n+        }\n+        this.name = type.getTypeSignature().toString();\n+        this.typeSignature = type.getTypeSignature();\n+    }\n+\n     @Override\n     public TypeSignature getTypeSignature()\n     {\n@@ -49,7 +69,12 @@ public TypeSignature getTypeSignature()\n     @Override\n     public String getDisplayName()\n     {\n-        return name.toString();\n+        return name;\n+    }\n+\n+    public String getName()\n+    {\n+        return name;\n     }\n \n     public Type getType()"
  },
  {
    "sha": "df917365f18ffe9040c71af3b91e66e9f4dd343c",
    "filename": "presto-druid/src/test/java/com/facebook/presto/druid/TestDruidQueryBase.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-druid/src/test/java/com/facebook/presto/druid/TestDruidQueryBase.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-druid/src/test/java/com/facebook/presto/druid/TestDruidQueryBase.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-druid/src/test/java/com/facebook/presto/druid/TestDruidQueryBase.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -17,7 +17,7 @@\n import com.facebook.presto.SystemSessionProperties;\n import com.facebook.presto.common.block.SortOrder;\n import com.facebook.presto.common.predicate.TupleDomain;\n-import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.metadata.FunctionAndTypeManager;\n import com.facebook.presto.metadata.Metadata;\n import com.facebook.presto.metadata.MetadataManager;\n@@ -41,6 +41,7 @@\n import com.facebook.presto.spi.relation.RowExpression;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n import com.facebook.presto.sql.ExpressionUtils;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.parser.ParsingOptions;\n import com.facebook.presto.sql.parser.SqlParser;\n import com.facebook.presto.sql.planner.TypeProvider;\n@@ -190,11 +191,11 @@ public static Expression expression(String sql)\n \n     protected RowExpression toRowExpression(Expression expression, Session session)\n     {\n-        Map<NodeRef<Expression>, Type> expressionTypes = getExpressionTypes(\n+        Map<NodeRef<Expression>, TypeWithName> expressionTypes = getExpressionTypes(\n                 session,\n                 metadata,\n                 new SqlParser(),\n-                typeProvider,\n+                SemanticTypeProvider.copyOf(typeProvider),\n                 expression,\n                 ImmutableList.of(),\n                 WarningCollector.NOOP);"
  },
  {
    "sha": "58d37ad3d9b0c5bb376317d5703955a9691247d8",
    "filename": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialInnerJoin.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialInnerJoin.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialInnerJoin.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialInnerJoin.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -14,9 +14,10 @@\n package com.facebook.presto.plugin.geospatial;\n \n import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.spi.relation.RowExpression;\n import com.facebook.presto.sql.TestingRowExpressionTranslator;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.rule.ExtractSpatialJoins.ExtractSpatialInnerJoin;\n import com.facebook.presto.sql.planner.iterative.rule.test.BaseRuleTest;\n import com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder;\n@@ -38,6 +39,7 @@\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.spatialJoin;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public class TestExtractSpatialInnerJoin\n         extends BaseRuleTest\n@@ -484,7 +486,7 @@ private RuleAssert assertRuleApplication()\n \n     private RowExpression sqlToRowExpression(String sql, Map<String, Type> typeMap)\n     {\n-        return sqlToRowExpressionTranslator.translateAndOptimize(PlanBuilder.expression(sql), TypeProvider.copyOf(typeMap));\n+        return sqlToRowExpressionTranslator.translateAndOptimize(PlanBuilder.expression(sql), SemanticTypeProvider.viewOf(typeMap.entrySet().stream().collect(toImmutableMap(Map.Entry::getKey, entry -> new TypeWithName(entry.getValue())))));\n     }\n \n     private static Map<String, Type> buildBigIntTypeProviderMap(String... variables)"
  },
  {
    "sha": "882db97b360a6dbdebd0e37b88556e30fdecddc1",
    "filename": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialLeftJoin.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialLeftJoin.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialLeftJoin.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestExtractSpatialLeftJoin.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -14,9 +14,10 @@\n package com.facebook.presto.plugin.geospatial;\n \n import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.spi.relation.RowExpression;\n import com.facebook.presto.sql.TestingRowExpressionTranslator;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.assertions.PlanMatchPattern;\n import com.facebook.presto.sql.planner.iterative.rule.ExtractSpatialJoins.ExtractSpatialLeftJoin;\n import com.facebook.presto.sql.planner.iterative.rule.test.BaseRuleTest;\n@@ -37,6 +38,7 @@\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.spatialLeftJoin;\n import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public class TestExtractSpatialLeftJoin\n         extends BaseRuleTest\n@@ -316,6 +318,6 @@ private RuleAssert assertRuleApplication()\n \n     private RowExpression sqlToRowExpression(String sql, Map<String, Type> typeMap)\n     {\n-        return sqlToRowExpressionTranslator.translateAndOptimize(PlanBuilder.expression(sql), TypeProvider.copyOf(typeMap));\n+        return sqlToRowExpressionTranslator.translateAndOptimize(PlanBuilder.expression(sql), SemanticTypeProvider.viewOf(typeMap.entrySet().stream().collect(toImmutableMap(Map.Entry::getKey, entry -> new TypeWithName(entry.getValue())))));\n     }\n }"
  },
  {
    "sha": "2ac721f0e06f6bc8251c9b193cd25e741f9c7628",
    "filename": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -36,6 +36,7 @@\n import com.facebook.presto.common.type.SqlVarbinary;\n import com.facebook.presto.common.type.StandardTypes;\n import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.hive.LocationService.WriteInfo;\n import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.datasink.OutputStreamDataSinkFactory;\n@@ -111,8 +112,8 @@\n import com.facebook.presto.spi.statistics.TableStatistics;\n import com.facebook.presto.sql.TestingRowExpressionTranslator;\n import com.facebook.presto.sql.analyzer.FeaturesConfig;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.gen.JoinCompiler;\n-import com.facebook.presto.sql.planner.TypeProvider;\n import com.facebook.presto.testing.MaterializedResult;\n import com.facebook.presto.testing.MaterializedRow;\n import com.facebook.presto.testing.TestingConnectorSession;\n@@ -498,8 +499,8 @@ private static RowType toRowType(List<ColumnMetadata> columns)\n \n     private static final SubfieldExtractor SUBFIELD_EXTRACTOR = new SubfieldExtractor(FUNCTION_RESOLUTION, ROW_EXPRESSION_SERVICE.getExpressionOptimizer(), SESSION);\n \n-    private static final TypeProvider TYPE_PROVIDER_AFTER = TypeProvider.copyOf(MISMATCH_SCHEMA_TABLE_AFTER.stream()\n-            .collect(toImmutableMap(ColumnMetadata::getName, ColumnMetadata::getType)));\n+    private static final SemanticTypeProvider TYPE_PROVIDER_AFTER = SemanticTypeProvider.copyOf(MISMATCH_SCHEMA_TABLE_AFTER.stream()\n+            .collect(toImmutableMap(ColumnMetadata::getName, column -> new TypeWithName(column.getType()))));\n \n     private static final TestingRowExpressionTranslator ROW_EXPRESSION_TRANSLATOR = new TestingRowExpressionTranslator(METADATA);\n "
  },
  {
    "sha": "148bd0b090ddb7919e97268a5659ad9ee850bdef",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/AggregationStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/AggregationStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/AggregationStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/AggregationStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -18,7 +18,7 @@\n import com.facebook.presto.spi.plan.AggregationNode;\n import com.facebook.presto.spi.plan.AggregationNode.Aggregation;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n \n import java.util.Collection;\n@@ -47,7 +47,7 @@ public AggregationStatsRule(StatsNormalizer normalizer)\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(AggregationNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(AggregationNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         if (node.getGroupingSetCount() != 1) {\n             return Optional.empty();"
  },
  {
    "sha": "1df2573973f6a0b3c9e98d470a38dbd472b31b5a",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/EnforceSingleRowStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/EnforceSingleRowStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/EnforceSingleRowStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/EnforceSingleRowStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -15,7 +15,7 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.matching.Pattern;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.facebook.presto.sql.planner.plan.EnforceSingleRowNode;\n \n@@ -40,7 +40,7 @@ public EnforceSingleRowStatsRule(StatsNormalizer normalizer)\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(EnforceSingleRowNode node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(EnforceSingleRowNode node, StatsProvider sourceStats, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         return Optional.of(PlanNodeStatsEstimate.buildFrom(sourceStats.getStats(node.getSource()))\n                 .setOutputRowCount(1)"
  },
  {
    "sha": "2215d3b9dc6b2905fb3da516eafa91b273d8a9f5",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/ExchangeStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ExchangeStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ExchangeStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/ExchangeStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -17,7 +17,7 @@\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.spi.plan.PlanNode;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.facebook.presto.sql.planner.plan.ExchangeNode;\n \n@@ -47,7 +47,7 @@ public ExchangeStatsRule(StatsNormalizer normalizer)\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(ExchangeNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(ExchangeNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         Optional<PlanNodeStatsEstimate> estimate = Optional.empty();\n         double totalSize = 0;"
  },
  {
    "sha": "62b4682d37f38bf99170022d66f3bd3befef13de",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -15,7 +15,7 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.common.function.OperatorType;\n-import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.metadata.FunctionAndTypeManager;\n import com.facebook.presto.metadata.Metadata;\n import com.facebook.presto.spi.ConnectorSession;\n@@ -31,12 +31,12 @@\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n import com.facebook.presto.sql.analyzer.ExpressionAnalyzer;\n import com.facebook.presto.sql.analyzer.Scope;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.ExpressionInterpreter;\n import com.facebook.presto.sql.planner.LiteralEncoder;\n import com.facebook.presto.sql.planner.LiteralInterpreter;\n import com.facebook.presto.sql.planner.NoOpVariableResolver;\n import com.facebook.presto.sql.planner.RowExpressionInterpreter;\n-import com.facebook.presto.sql.planner.TypeProvider;\n import com.facebook.presto.sql.relational.FunctionResolution;\n import com.facebook.presto.sql.tree.AstVisitor;\n import com.facebook.presto.sql.tree.BetweenPredicate;\n@@ -123,7 +123,7 @@ public PlanNodeStatsEstimate filterStats(\n             PlanNodeStatsEstimate statsEstimate,\n             Expression predicate,\n             Session session,\n-            TypeProvider types)\n+            SemanticTypeProvider types)\n     {\n         Expression simplifiedExpression = simplifyExpression(session, predicate, types);\n         return new FilterExpressionStatsCalculatingVisitor(statsEstimate, session, types)\n@@ -147,11 +147,11 @@ public PlanNodeStatsEstimate filterStats(\n         return filterStats(statsEstimate, predicate, session.toConnectorSession());\n     }\n \n-    private Expression simplifyExpression(Session session, Expression predicate, TypeProvider types)\n+    private Expression simplifyExpression(Session session, Expression predicate, SemanticTypeProvider types)\n     {\n         // TODO reuse com.facebook.presto.sql.planner.iterative.rule.SimplifyExpressions.rewrite\n \n-        Map<NodeRef<Expression>, Type> expressionTypes = getExpressionTypes(session, predicate, types);\n+        Map<NodeRef<Expression>, TypeWithName> expressionTypes = getExpressionTypes(session, predicate, types);\n         ExpressionInterpreter interpreter = ExpressionInterpreter.expressionOptimizer(predicate, metadata, session, expressionTypes);\n         Object value = interpreter.optimize(NoOpVariableResolver.INSTANCE);\n \n@@ -174,7 +174,7 @@ private RowExpression simplifyExpression(ConnectorSession session, RowExpression\n         return LiteralEncoder.toRowExpression(value, BOOLEAN);\n     }\n \n-    private Map<NodeRef<Expression>, Type> getExpressionTypes(Session session, Expression expression, TypeProvider types)\n+    private Map<NodeRef<Expression>, TypeWithName> getExpressionTypes(Session session, Expression expression, SemanticTypeProvider types)\n     {\n         ExpressionAnalyzer expressionAnalyzer = ExpressionAnalyzer.createWithoutSubqueries(\n                 metadata.getFunctionAndTypeManager(),\n@@ -193,9 +193,9 @@ private RowExpression simplifyExpression(ConnectorSession session, RowExpression\n     {\n         private final PlanNodeStatsEstimate input;\n         private final Session session;\n-        private final TypeProvider types;\n+        private final SemanticTypeProvider types;\n \n-        FilterExpressionStatsCalculatingVisitor(PlanNodeStatsEstimate input, Session session, TypeProvider types)\n+        FilterExpressionStatsCalculatingVisitor(PlanNodeStatsEstimate input, Session session, SemanticTypeProvider types)\n         {\n             this.input = input;\n             this.session = session;\n@@ -452,7 +452,7 @@ protected PlanNodeStatsEstimate visitComparisonExpression(ComparisonExpression n\n             return estimateExpressionToExpressionComparison(input, leftStats, leftVariable, rightStats, rightVariable, operator);\n         }\n \n-        private Type getType(Expression expression)\n+        private TypeWithName getType(Expression expression)\n         {\n             if (expression instanceof SymbolReference) {\n                 return requireNonNull(types.get(expression), () -> format(\"No type for expression %s\", expression));"
  },
  {
    "sha": "634bdaca2b5485c042ed066e753c7161b35ceaf8",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/FilterStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -16,7 +16,7 @@\n import com.facebook.presto.Session;\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.spi.plan.FilterNode;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n \n import java.util.Optional;\n@@ -47,7 +47,7 @@ public FilterStatsRule(StatsNormalizer normalizer, FilterStatsCalculator filterS\n     }\n \n     @Override\n-    public Optional<PlanNodeStatsEstimate> doCalculate(FilterNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    public Optional<PlanNodeStatsEstimate> doCalculate(FilterNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n         PlanNodeStatsEstimate estimate;"
  },
  {
    "sha": "c3739e947e32f963c345c30807c35254b3ff27ec",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/IntersectStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/IntersectStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/IntersectStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/IntersectStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -18,7 +18,7 @@\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.spi.plan.IntersectNode;\n import com.facebook.presto.spi.plan.PlanNode;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n \n import java.util.Optional;\n@@ -45,7 +45,7 @@ public IntersectStatsRule(StatsNormalizer normalizer)\n \n     @Override\n     protected Optional<PlanNodeStatsEstimate> doCalculate(\n-            IntersectNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+            IntersectNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         checkArgument(!node.getSources().isEmpty(), \"Empty intersection is not supported\");\n "
  },
  {
    "sha": "50e36ec92f866c2d5b79d1e81781e9412eb45189",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/JoinStatsRule.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/JoinStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/JoinStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/JoinStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -18,7 +18,7 @@\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.spi.relation.RowExpression;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.facebook.presto.sql.planner.plan.JoinNode;\n import com.facebook.presto.sql.planner.plan.JoinNode.EquiJoinClause;\n@@ -80,7 +80,7 @@ public JoinStatsRule(FilterStatsCalculator filterStatsCalculator, StatsNormalize\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(JoinNode node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(JoinNode node, StatsProvider sourceStats, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate leftStats = sourceStats.getStats(node.getLeft());\n         PlanNodeStatsEstimate rightStats = sourceStats.getStats(node.getRight());\n@@ -106,7 +106,7 @@ private PlanNodeStatsEstimate computeFullJoinStats(\n             PlanNodeStatsEstimate rightStats,\n             PlanNodeStatsEstimate crossJoinStats,\n             Session session,\n-            TypeProvider types)\n+            SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate rightJoinComplementStats = calculateJoinComplementStats(node.getFilter(), flippedCriteria(node), rightStats, leftStats);\n         return addJoinComplementStats(\n@@ -121,7 +121,7 @@ private PlanNodeStatsEstimate computeLeftJoinStats(\n             PlanNodeStatsEstimate rightStats,\n             PlanNodeStatsEstimate crossJoinStats,\n             Session session,\n-            TypeProvider types)\n+            SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate innerJoinStats = computeInnerJoinStats(node, crossJoinStats, session, types);\n         PlanNodeStatsEstimate leftJoinComplementStats = calculateJoinComplementStats(node.getFilter(), node.getCriteria(), leftStats, rightStats);\n@@ -137,7 +137,7 @@ private PlanNodeStatsEstimate computeRightJoinStats(\n             PlanNodeStatsEstimate rightStats,\n             PlanNodeStatsEstimate crossJoinStats,\n             Session session,\n-            TypeProvider types)\n+            SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate innerJoinStats = computeInnerJoinStats(node, crossJoinStats, session, types);\n         PlanNodeStatsEstimate rightJoinComplementStats = calculateJoinComplementStats(node.getFilter(), flippedCriteria(node), rightStats, leftStats);\n@@ -147,7 +147,7 @@ private PlanNodeStatsEstimate computeRightJoinStats(\n                 rightJoinComplementStats);\n     }\n \n-    private PlanNodeStatsEstimate computeInnerJoinStats(JoinNode node, PlanNodeStatsEstimate crossJoinStats, Session session, TypeProvider types)\n+    private PlanNodeStatsEstimate computeInnerJoinStats(JoinNode node, PlanNodeStatsEstimate crossJoinStats, Session session, SemanticTypeProvider types)\n     {\n         List<EquiJoinClause> equiJoinCriteria = node.getCriteria();\n \n@@ -193,7 +193,7 @@ private PlanNodeStatsEstimate filterByEquiJoinClauses(\n             PlanNodeStatsEstimate stats,\n             Collection<EquiJoinClause> clauses,\n             Session session,\n-            TypeProvider types)\n+            SemanticTypeProvider types)\n     {\n         checkArgument(!clauses.isEmpty(), \"clauses is empty\");\n         PlanNodeStatsEstimate result = PlanNodeStatsEstimate.unknown();\n@@ -220,7 +220,7 @@ private PlanNodeStatsEstimate filterByEquiJoinClauses(\n             EquiJoinClause drivingClause,\n             Collection<EquiJoinClause> remainingClauses,\n             Session session,\n-            TypeProvider types)\n+            SemanticTypeProvider types)\n     {\n         ComparisonExpression drivingPredicate = new ComparisonExpression(EQUAL, new SymbolReference(drivingClause.getLeft().getName()), new SymbolReference(drivingClause.getRight().getName()));\n         PlanNodeStatsEstimate filteredStats = filterStatsCalculator.filterStats(stats, drivingPredicate, session, types);"
  },
  {
    "sha": "8ded64aa246ebf8d6e7164180d5d18e2db8a3b3a",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/LimitStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/LimitStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/LimitStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/LimitStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -16,7 +16,7 @@\n import com.facebook.presto.Session;\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.spi.plan.LimitNode;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n \n import java.util.Optional;\n@@ -40,7 +40,7 @@ public LimitStatsRule(StatsNormalizer normalizer)\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(LimitNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(LimitNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n         if (sourceStats.getOutputRowCount() <= node.getCount()) {"
  },
  {
    "sha": "f683626cd82aa5d9beaf9d3d71a572d5706e702d",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/ProjectStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ProjectStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ProjectStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/ProjectStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -18,7 +18,7 @@\n import com.facebook.presto.spi.plan.ProjectNode;\n import com.facebook.presto.spi.relation.RowExpression;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n \n import java.util.Map;\n@@ -49,7 +49,7 @@ public ProjectStatsRule(ScalarStatsCalculator scalarStatsCalculator, StatsNormal\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(ProjectNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(ProjectNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n         PlanNodeStatsEstimate.Builder calculatedStats = PlanNodeStatsEstimate.builder()"
  },
  {
    "sha": "937b3f97db3b6cbb8427ca978b5ccaf0cf0b94d1",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/RowNumberStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/RowNumberStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/RowNumberStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/RowNumberStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -16,7 +16,7 @@\n import com.facebook.presto.Session;\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.facebook.presto.sql.planner.plan.Patterns;\n import com.facebook.presto.sql.planner.plan.RowNumberNode;\n@@ -44,7 +44,7 @@ public RowNumberStatsRule(StatsNormalizer normalizer)\n     }\n \n     @Override\n-    public Optional<PlanNodeStatsEstimate> doCalculate(RowNumberNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    public Optional<PlanNodeStatsEstimate> doCalculate(RowNumberNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n         if (sourceStats.isOutputRowCountUnknown()) {"
  },
  {
    "sha": "e0c996bb9e59d2fc6b1795a9e16a0c122326803c",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/SampleStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SampleStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SampleStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/SampleStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -16,7 +16,7 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.matching.Pattern;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.facebook.presto.sql.planner.plan.SampleNode;\n \n@@ -41,7 +41,7 @@ public SampleStatsRule(StatsNormalizer normalizer)\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(SampleNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(SampleNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n         return Optional.of(PlanNodeStatsEstimate.buildFrom(sourceStats)"
  },
  {
    "sha": "1c3e783699e8c9040f8632d79dbbb202b940b879",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/ScalarStatsCalculator.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ScalarStatsCalculator.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ScalarStatsCalculator.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/ScalarStatsCalculator.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -15,8 +15,8 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.common.function.OperatorType;\n-import com.facebook.presto.common.type.Type;\n import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.metadata.Metadata;\n import com.facebook.presto.spi.ConnectorSession;\n import com.facebook.presto.spi.WarningCollector;\n@@ -31,9 +31,9 @@\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n import com.facebook.presto.sql.analyzer.ExpressionAnalyzer;\n import com.facebook.presto.sql.analyzer.Scope;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.ExpressionInterpreter;\n import com.facebook.presto.sql.planner.NoOpVariableResolver;\n-import com.facebook.presto.sql.planner.TypeProvider;\n import com.facebook.presto.sql.relational.FunctionResolution;\n import com.facebook.presto.sql.relational.RowExpressionOptimizer;\n import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;\n@@ -85,7 +85,7 @@ public ScalarStatsCalculator(Metadata metadata)\n     }\n \n     @Deprecated\n-    public VariableStatsEstimate calculate(Expression scalarExpression, PlanNodeStatsEstimate inputStatistics, Session session, TypeProvider types)\n+    public VariableStatsEstimate calculate(Expression scalarExpression, PlanNodeStatsEstimate inputStatistics, Session session, SemanticTypeProvider types)\n     {\n         return new ExpressionStatsVisitor(inputStatistics, session, types).process(scalarExpression);\n     }\n@@ -324,9 +324,9 @@ private double operate(OperatorType operator, double left, double right)\n     {\n         private final PlanNodeStatsEstimate input;\n         private final Session session;\n-        private final TypeProvider types;\n+        private final SemanticTypeProvider types;\n \n-        ExpressionStatsVisitor(PlanNodeStatsEstimate input, Session session, TypeProvider types)\n+        ExpressionStatsVisitor(PlanNodeStatsEstimate input, Session session, SemanticTypeProvider types)\n         {\n             this.input = input;\n             this.session = session;\n@@ -355,7 +355,7 @@ protected VariableStatsEstimate visitNullLiteral(NullLiteral node, Void context)\n         protected VariableStatsEstimate visitLiteral(Literal node, Void context)\n         {\n             Object value = evaluate(metadata, session.toConnectorSession(), node);\n-            Type type = ExpressionAnalyzer.createConstantAnalyzer(metadata, session, ImmutableList.of(), WarningCollector.NOOP).analyze(node, Scope.create());\n+            TypeWithName type = ExpressionAnalyzer.createConstantAnalyzer(metadata, session, ImmutableList.of(), WarningCollector.NOOP).analyze(node, Scope.create());\n             OptionalDouble doubleValue = toStatsRepresentation(metadata, session, type, value);\n             VariableStatsEstimate.Builder estimate = VariableStatsEstimate.builder()\n                     .setNullsFraction(0)\n@@ -371,7 +371,7 @@ protected VariableStatsEstimate visitLiteral(Literal node, Void context)\n         @Override\n         protected VariableStatsEstimate visitFunctionCall(FunctionCall node, Void context)\n         {\n-            Map<NodeRef<Expression>, Type> expressionTypes = getExpressionTypes(session, node, types);\n+            Map<NodeRef<Expression>, TypeWithName> expressionTypes = getExpressionTypes(session, node, types);\n             ExpressionInterpreter interpreter = ExpressionInterpreter.expressionOptimizer(node, metadata, session, expressionTypes);\n             Object value = interpreter.optimize(NoOpVariableResolver.INSTANCE);\n \n@@ -391,7 +391,7 @@ protected VariableStatsEstimate visitFunctionCall(FunctionCall node, Void contex\n                     .build();\n         }\n \n-        private Map<NodeRef<Expression>, Type> getExpressionTypes(Session session, Expression expression, TypeProvider types)\n+        private Map<NodeRef<Expression>, TypeWithName> getExpressionTypes(Session session, Expression expression, SemanticTypeProvider types)\n         {\n             ExpressionAnalyzer expressionAnalyzer = ExpressionAnalyzer.createWithoutSubqueries(\n                     metadata.getFunctionAndTypeManager(),"
  },
  {
    "sha": "02cf10c3b93ec546121013e8cd671b0a23f226a4",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/SimpleFilterProjectSemiJoinStatsRule.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SimpleFilterProjectSemiJoinStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SimpleFilterProjectSemiJoinStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/SimpleFilterProjectSemiJoinStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -23,7 +23,7 @@\n import com.facebook.presto.spi.relation.CallExpression;\n import com.facebook.presto.spi.relation.RowExpression;\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.facebook.presto.sql.planner.plan.SemiJoinNode;\n import com.facebook.presto.sql.relational.FunctionResolution;\n@@ -79,7 +79,7 @@ public SimpleFilterProjectSemiJoinStatsRule(StatsNormalizer normalizer, FilterSt\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(FilterNode node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(FilterNode node, StatsProvider sourceStats, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNode nodeSource = lookup.resolve(node.getSource());\n         SemiJoinNode semiJoinNode;\n@@ -104,7 +104,7 @@ else if (nodeSource instanceof SemiJoinNode) {\n         return calculate(node, semiJoinNode, sourceStats, session, types);\n     }\n \n-    private Optional<PlanNodeStatsEstimate> calculate(FilterNode filterNode, SemiJoinNode semiJoinNode, StatsProvider statsProvider, Session session, TypeProvider types)\n+    private Optional<PlanNodeStatsEstimate> calculate(FilterNode filterNode, SemiJoinNode semiJoinNode, StatsProvider statsProvider, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate sourceStats = statsProvider.getStats(semiJoinNode.getSource());\n         PlanNodeStatsEstimate filteringSourceStats = statsProvider.getStats(semiJoinNode.getFilteringSource());"
  },
  {
    "sha": "1ba31f5fc7c53552d2d00e6b6f7287ed833f8498",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/SimpleStatsRule.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SimpleStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SimpleStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/SimpleStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -16,6 +16,7 @@\n import com.facebook.presto.Session;\n import com.facebook.presto.cost.ComposableStatsCalculator.Rule;\n import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.TypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n \n@@ -36,9 +37,9 @@ protected SimpleStatsRule(StatsNormalizer normalizer)\n     @Override\n     public final Optional<PlanNodeStatsEstimate> calculate(T node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types)\n     {\n-        return doCalculate(node, sourceStats, lookup, session, types)\n+        return doCalculate(node, sourceStats, lookup, session, SemanticTypeProvider.copyOf(types))\n                 .map(estimate -> normalizer.normalize(estimate, node.getOutputVariables()));\n     }\n \n-    protected abstract Optional<PlanNodeStatsEstimate> doCalculate(T node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types);\n+    protected abstract Optional<PlanNodeStatsEstimate> doCalculate(T node, StatsProvider sourceStats, Lookup lookup, Session session, SemanticTypeProvider types);\n }"
  },
  {
    "sha": "56c444ae3c26a6e5651afa3b19bd860db4f01b70",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/SpatialJoinStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SpatialJoinStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/SpatialJoinStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/SpatialJoinStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -15,7 +15,7 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.matching.Pattern;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.facebook.presto.sql.planner.plan.SpatialJoinNode;\n \n@@ -40,7 +40,7 @@ public SpatialJoinStatsRule(FilterStatsCalculator statsCalculator, StatsNormaliz\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(SpatialJoinNode node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(SpatialJoinNode node, StatsProvider sourceStats, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         PlanNodeStatsEstimate leftStats = sourceStats.getStats(node.getLeft());\n         PlanNodeStatsEstimate rightStats = sourceStats.getStats(node.getRight());"
  },
  {
    "sha": "ef5f59b470d8891355a4533aca38c83999dd74d6",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/StatsUtil.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/StatsUtil.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/StatsUtil.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/StatsUtil.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -24,6 +24,7 @@\n import com.facebook.presto.common.type.SmallintType;\n import com.facebook.presto.common.type.TinyintType;\n import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.metadata.FunctionAndTypeManager;\n import com.facebook.presto.metadata.Metadata;\n import com.facebook.presto.spi.ConnectorSession;\n@@ -42,7 +43,7 @@\n {\n     private StatsUtil() {}\n \n-    static OptionalDouble toStatsRepresentation(Metadata metadata, Session session, Type type, Object value)\n+    static OptionalDouble toStatsRepresentation(Metadata metadata, Session session, TypeWithName type, Object value)\n     {\n         return toStatsRepresentation(metadata.getFunctionAndTypeManager(), session.toConnectorSession(), type, value);\n     }"
  },
  {
    "sha": "44aa196adf075f85c893a27e053f87d9b2078c05",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/TableScanStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/TableScanStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/TableScanStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/TableScanStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -22,7 +22,7 @@\n import com.facebook.presto.spi.relation.VariableReferenceExpression;\n import com.facebook.presto.spi.statistics.ColumnStatistics;\n import com.facebook.presto.spi.statistics.TableStatistics;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n import com.google.common.collect.ImmutableList;\n \n@@ -53,7 +53,7 @@ public TableScanStatsRule(Metadata metadata, StatsNormalizer normalizer)\n     }\n \n     @Override\n-    protected Optional<PlanNodeStatsEstimate> doCalculate(TableScanNode node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types)\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TableScanNode node, StatsProvider sourceStats, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         // TODO Construct predicate like AddExchanges's LayoutConstraintEvaluator\n         Constraint<ColumnHandle> constraint = new Constraint<>(node.getCurrentConstraint());"
  },
  {
    "sha": "18d0199235c4b74c12eae23db4c9b2fc26f2dd3a",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/UnionStatsRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/UnionStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/UnionStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/UnionStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -18,7 +18,7 @@\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.spi.plan.PlanNode;\n import com.facebook.presto.spi.plan.UnionNode;\n-import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.analyzer.SemanticTypeProvider;\n import com.facebook.presto.sql.planner.iterative.Lookup;\n \n import java.util.Optional;\n@@ -44,7 +44,7 @@ public UnionStatsRule(StatsNormalizer normalizer)\n     }\n \n     @Override\n-    protected final Optional<PlanNodeStatsEstimate> doCalculate(UnionNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    protected final Optional<PlanNodeStatsEstimate> doCalculate(UnionNode node, StatsProvider statsProvider, Lookup lookup, Session session, SemanticTypeProvider types)\n     {\n         checkArgument(!node.getSources().isEmpty(), \"Empty Union is not supported\");\n "
  },
  {
    "sha": "6772c815dd47bc41528a49801e348cdfb4337940",
    "filename": "presto-main/src/main/java/com/facebook/presto/cost/ValuesStatsRule.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ValuesStatsRule.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/cost/ValuesStatsRule.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/cost/ValuesStatsRule.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -15,6 +15,7 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.cost.ComposableStatsCalculator.Rule;\n import com.facebook.presto.matching.Pattern;\n import com.facebook.presto.metadata.Metadata;\n@@ -68,7 +69,7 @@ public ValuesStatsRule(Metadata metadata)\n         for (int variableId = 0; variableId < node.getOutputVariables().size(); ++variableId) {\n             VariableReferenceExpression variable = node.getOutputVariables().get(variableId);\n             List<Object> symbolValues = getVariableValues(node, variableId, session, variable.getType());\n-            statsBuilder.addVariableStatistics(variable, buildVariableStatistics(symbolValues, session, variable.getType()));\n+            statsBuilder.addVariableStatistics(variable, buildVariableStatistics(symbolValues, session, new TypeWithName(variable.getType())));\n         }\n \n         return Optional.of(statsBuilder.build());\n@@ -86,14 +87,14 @@ public ValuesStatsRule(Metadata metadata)\n                 .map(row -> row.get(symbolId))\n                 .map(rowExpression -> {\n                     if (isExpression(rowExpression)) {\n-                        return evaluateConstantExpression(castToExpression(rowExpression), type, metadata, session, ImmutableList.of());\n+                        return evaluateConstantExpression(castToExpression(rowExpression), new TypeWithName(type), metadata, session, ImmutableList.of());\n                     }\n                     return evaluateConstantRowExpression(rowExpression, metadata, session.toConnectorSession());\n                 })\n                 .collect(toList());\n     }\n \n-    private VariableStatsEstimate buildVariableStatistics(List<Object> values, Session session, Type type)\n+    private VariableStatsEstimate buildVariableStatistics(List<Object> values, Session session, TypeWithName type)\n     {\n         List<Object> nonNullValues = values.stream()\n                 .filter(Objects::nonNull)"
  },
  {
    "sha": "4a8a3d4edd455e363af87fed25802301be023dd3",
    "filename": "presto-main/src/main/java/com/facebook/presto/execution/CallTask.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/execution/CallTask.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/execution/CallTask.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/execution/CallTask.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -17,6 +17,7 @@\n import com.facebook.presto.common.QualifiedObjectName;\n import com.facebook.presto.common.block.BlockBuilder;\n import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.metadata.Metadata;\n import com.facebook.presto.security.AccessControl;\n import com.facebook.presto.spi.ConnectorId;\n@@ -134,7 +135,7 @@ else if (i < procedure.getArguments().size()) {\n             Argument argument = procedure.getArguments().get(index);\n \n             Expression expression = ExpressionTreeRewriter.rewriteWith(new ParameterRewriter(parameters), callArgument.getValue());\n-            Type type = metadata.getType(argument.getType());\n+            TypeWithName type = metadata.getFunctionAndTypeManager().getSemanticType(argument.getType());\n             checkCondition(type != null, INVALID_PROCEDURE_DEFINITION, \"Unknown procedure argument type: %s\", argument.getType());\n \n             Object value = evaluateConstantExpression(expression, type, metadata, session, parameters);\n@@ -148,7 +149,7 @@ else if (i < procedure.getArguments().size()) {\n \n             if (!names.containsKey(argument.getName())) {\n                 verify(argument.isOptional());\n-                values[i] = toTypeObjectValue(session, metadata.getType(argument.getType()), argument.getDefaultValue());\n+                values[i] = toTypeObjectValue(session, metadata.getFunctionAndTypeManager().getSemanticType(argument.getType()), argument.getDefaultValue());\n             }\n         }\n \n@@ -187,10 +188,11 @@ else if (i < procedure.getArguments().size()) {\n         return immediateFuture(null);\n     }\n \n-    private static Object toTypeObjectValue(Session session, Type type, Object value)\n+    private static Object toTypeObjectValue(Session session, TypeWithName type, Object value)\n     {\n-        BlockBuilder blockBuilder = type.createBlockBuilder(null, 1);\n-        writeNativeValue(type, blockBuilder, value);\n-        return type.getObjectValue(session.getSqlFunctionProperties(), blockBuilder, 0);\n+        Type physicalType = type.getType();\n+        BlockBuilder blockBuilder = physicalType.createBlockBuilder(null, 1);\n+        writeNativeValue(physicalType, blockBuilder, value);\n+        return physicalType.getObjectValue(session.getSqlFunctionProperties(), blockBuilder, 0);\n     }\n }"
  },
  {
    "sha": "060c7f895346d207beffb11639a8e1c6920e9810",
    "filename": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -16,6 +16,7 @@\n import com.facebook.presto.common.QualifiedObjectName;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.common.type.TypeWithName;\n import com.facebook.presto.metadata.Metadata;\n import com.facebook.presto.security.AccessControl;\n import com.facebook.presto.spi.PrestoException;\n@@ -115,7 +116,7 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement, Me\n \n         if (statement.getBody() instanceof Return) {\n             Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n-            Type bodyType = analysis.getType(bodyExpression);\n+            TypeWithName bodyType = analysis.getType(bodyExpression);\n \n             // Coerce expressions in body if necessary\n             bodyExpression = ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<Void>()\n@@ -125,19 +126,19 @@ public Expression rewriteExpression(Expression expression, Void context, Express\n                 {\n                     Expression rewritten = treeRewriter.defaultRewrite(expression, null);\n \n-                    Type coercion = analysis.getCoercion(expression);\n+                    TypeWithName coercion = analysis.getCoercion(expression);\n                     if (coercion != null) {\n                         return new Cast(\n                                 rewritten,\n-                                coercion.getTypeSignature().toString(),\n+                                coercion.getName(),\n                                 false,\n                                 analysis.isTypeOnlyCoercion(expression));\n                     }\n                     return rewritten;\n                 }\n             }, bodyExpression, null);\n \n-            if (!bodyType.equals(metadata.getType(returnType))) {\n+            if (!bodyType.equals(metadata.getFunctionAndTypeManager().getSemanticType(returnType))) {\n                 // Casting is safe here, since we have verified at analysis time that the actual type of the body is coercible to declared return type.\n                 bodyExpression = new Cast(bodyExpression, statement.getReturnType());\n             }"
  },
  {
    "sha": "7bd4fac51a8fd48d61fb8938eeb8a3860a5383f7",
    "filename": "presto-main/src/main/java/com/facebook/presto/execution/CreateViewTask.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/prestodb/presto/blob/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/execution/CreateViewTask.java",
    "raw_url": "https://github.com/prestodb/presto/raw/6799891d89e67a5714151ac7db8e489669979548/presto-main/src/main/java/com/facebook/presto/execution/CreateViewTask.java",
    "contents_url": "https://api.github.com/repos/prestodb/presto/contents/presto-main/src/main/java/com/facebook/presto/execution/CreateViewTask.java?ref=6799891d89e67a5714151ac7db8e489669979548",
    "patch": "@@ -89,7 +89,7 @@ public String explain(CreateView statement, List<Expression> parameters)\n \n         List<ViewColumn> columns = analysis.getOutputDescriptor(statement.getQuery())\n                 .getVisibleFields().stream()\n-                .map(field -> new ViewColumn(field.getName().get(), field.getType()))\n+                .map(field -> new ViewColumn(field.getName().get(), field.getType().getType()))\n                 .collect(toImmutableList());\n \n         List<ColumnMetadata> columnMetadata = columns.stream()"
  }
]
