[
  {
    "sha": "3aba9423f4c1b089f8f516b2d2549174084aeb1b",
    "filename": "geoportal-commons/geoportal-commons-ags-client/src/main/java/com/esri/geoportal/commons/ags/client/AgsClient.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/Esri/geoportal-server-harvester/blob/ca03b153aa2a9876deeaa2dab6e1f89771c93181/geoportal-commons/geoportal-commons-ags-client/src/main/java/com/esri/geoportal/commons/ags/client/AgsClient.java",
    "raw_url": "https://github.com/Esri/geoportal-server-harvester/raw/ca03b153aa2a9876deeaa2dab6e1f89771c93181/geoportal-commons/geoportal-commons-ags-client/src/main/java/com/esri/geoportal/commons/ags/client/AgsClient.java",
    "contents_url": "https://api.github.com/repos/Esri/geoportal-server-harvester/contents/geoportal-commons/geoportal-commons-ags-client/src/main/java/com/esri/geoportal/commons/ags/client/AgsClient.java?ref=ca03b153aa2a9876deeaa2dab6e1f89771c93181",
    "patch": "@@ -17,6 +17,7 @@\n \n import com.esri.geoportal.commons.utils.SimpleCredentials;\n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonParser.Feature;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -27,7 +28,6 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLEncoder;\n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.stream.Collectors;\n import org.apache.commons.codec.net.URLCodec;\n@@ -50,6 +50,13 @@\n \n   private final URL rootUrl;\n   private final CloseableHttpClient httpClient;\n+  private static final ObjectMapper mapper = new ObjectMapper();\n+  \n+  static {\n+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    mapper.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);\n+    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+  }\n \n   /**\n    * Creates instance of the client.\n@@ -166,10 +173,6 @@ public ServerResponse readServiceInformation(URL url) throws IOException {\n         throw new HttpResponseException(httpResponse.getStatusLine().getStatusCode(), httpResponse.getStatusLine().getReasonPhrase());\n       }\n       String responseContent = IOUtils.toString(contentStream, \"UTF-8\");\n-      ObjectMapper mapper = new ObjectMapper();\n-      mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-      mapper.configure(Feature.ALLOW_NON_NUMERIC_NUMBERS, true);\n-      mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n       ServerResponse response = mapper.readValue(responseContent, ServerResponse.class);\n       response.url = url.toExternalForm();\n       response.json = responseContent;"
  },
  {
    "sha": "1838c7c72074e0787bdbbd6bf2bfb7e1e8ae5544",
    "filename": "geoportal-commons/geoportal-commons-pdf/src/test/data/MANAmap1.pdf",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Esri/geoportal-server-harvester/blob/ca03b153aa2a9876deeaa2dab6e1f89771c93181/geoportal-commons/geoportal-commons-pdf/src/test/data/MANAmap1.pdf",
    "raw_url": "https://github.com/Esri/geoportal-server-harvester/raw/ca03b153aa2a9876deeaa2dab6e1f89771c93181/geoportal-commons/geoportal-commons-pdf/src/test/data/MANAmap1.pdf",
    "contents_url": "https://api.github.com/repos/Esri/geoportal-server-harvester/contents/geoportal-commons/geoportal-commons-pdf/src/test/data/MANAmap1.pdf?ref=ca03b153aa2a9876deeaa2dab6e1f89771c93181"
  },
  {
    "sha": "552c58ba6b8d4d3d6ad0e575819f8e4dc2f17501",
    "filename": "geoportal-connectors/geoportal-harvester-ags/src/main/java/com/esri/geoportal/harvester/ags/AgsBroker.java",
    "status": "modified",
    "additions": 64,
    "deletions": 5,
    "changes": 69,
    "blob_url": "https://github.com/Esri/geoportal-server-harvester/blob/ca03b153aa2a9876deeaa2dab6e1f89771c93181/geoportal-connectors/geoportal-harvester-ags/src/main/java/com/esri/geoportal/harvester/ags/AgsBroker.java",
    "raw_url": "https://github.com/Esri/geoportal-server-harvester/raw/ca03b153aa2a9876deeaa2dab6e1f89771c93181/geoportal-connectors/geoportal-harvester-ags/src/main/java/com/esri/geoportal/harvester/ags/AgsBroker.java",
    "contents_url": "https://api.github.com/repos/Esri/geoportal-server-harvester/contents/geoportal-connectors/geoportal-harvester-ags/src/main/java/com/esri/geoportal/harvester/ags/AgsBroker.java?ref=ca03b153aa2a9876deeaa2dab6e1f89771c93181",
    "patch": "@@ -62,7 +62,17 @@\n import com.esri.geoportal.geoportal.commons.geometry.GeometryService;\n import com.esri.geoportal.harvester.api.DataContent;\n import com.esri.geoportal.harvester.api.defs.TaskDefinition;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.gson.JsonObject;\n import java.net.URL;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n \n /**\n  * Ags broker.\n@@ -71,6 +81,13 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(AgsBroker.class);\n   private static final Pattern rootPattern = Pattern.compile(\"\\\\/[^\\\\/]*Server(\\\\/[0-9]+)?$\");\n+  private static final ObjectMapper mapper = new ObjectMapper();\n+  \n+  static {\n+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    mapper.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);\n+    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+  }\n \n   private final AgsConnector connector;\n   private final AgsBrokerDefinitionAdaptor definition;\n@@ -210,18 +227,37 @@ public DataContent readContent(String id) throws DataInputException {\n     }\n   }\n \n+  private String trimHtml(String val) {\n+    if (val!=null) {\n+      String parts [] = val.split(\"<[^>]*>\");\n+      if (parts!=null) {\n+        val = Arrays.stream(parts)\n+          .map(part -> StringUtils.trimToNull(part))\n+          .filter(part -> part!=null)\n+          .collect(Collectors.joining(\" \"));\n+      }\n+    }\n+    return StringUtils.trimToNull(val);\n+  }\n+  \n   private DataReference createReference(ServerResponse serverResponse) throws IOException, URISyntaxException, MetaException, TransformerException {\n     String serviceType = getServiceType(serverResponse.url);\n     String serviceRoot = getServiceRoot(serverResponse.url);\n \n-    String declaredTitle = serverResponse.itemInfo!=null? serverResponse.itemInfo.title: null;\n+    // select title\n+    String itemInfoTitle = serverResponse.itemInfo!=null? serverResponse.itemInfo.title: null;\n     String constructedTitle = String.format(\"%s/%s\", serviceRoot, StringUtils.defaultString(StringUtils.defaultIfBlank(StringUtils.defaultIfBlank(serverResponse.mapName, serverResponse.name), StringUtils.defaultIfBlank(serviceType, serverResponse.url))));\n-    String title = StringUtils.defaultIfBlank(declaredTitle, constructedTitle);\n+    String title = StringUtils.defaultIfBlank(itemInfoTitle, constructedTitle);\n+    \n+    // select description\n+    String itemInfoDescription = trimHtml(serverResponse.itemInfo!=null? serverResponse.itemInfo.description: null);\n+    String serverDescription = trimHtml(StringUtils.defaultString(StringUtils.defaultIfBlank(serverResponse.description, serverResponse.serviceDescription)));\n+    String description = StringUtils.defaultIfBlank(itemInfoDescription, serverDescription);\n     \n     HashMap<String, Attribute> attributes = new HashMap<>();\n     attributes.put(WKAConstants.WKA_IDENTIFIER, new StringAttribute(serverResponse.url));\n     attributes.put(WKAConstants.WKA_TITLE, new StringAttribute(title));\n-    attributes.put(WKAConstants.WKA_DESCRIPTION, new StringAttribute(StringUtils.defaultString(StringUtils.defaultIfBlank(serverResponse.description, serverResponse.serviceDescription))));\n+    attributes.put(WKAConstants.WKA_DESCRIPTION, new StringAttribute(description));\n     attributes.put(WKAConstants.WKA_RESOURCE_URL, new StringAttribute(serverResponse.url));\n     attributes.put(WKAConstants.WKA_RESOURCE_URL_SCHEME, new StringAttribute(\"urn:x-esri:specification:ServiceType:ArcGIS:\" + (serviceType != null ? serviceType : \"Unknown\")));\n \n@@ -242,11 +278,34 @@ private DataReference createReference(ServerResponse serverResponse) throws IOEx\n       ref.addContext(MimeType.APPLICATION_XML, bytes);\n     }\n     if (definition.getEmitJson() && serverResponse.json != null) {\n+      ObjectNode jsonNode = (ObjectNode) mapper.readTree(serverResponse.json);\n+      if (serverResponse.itemInfo!=null) {\n+        JsonNode itemInfoNode = mapper.valueToTree(serverResponse.itemInfo);\n+        if (itemInfoNode!=null) {\n+          jsonNode.set(\"itemInfo\", itemInfoNode);\n+        }\n+      }\n+      \n+      serverResponse.json = mapper.writeValueAsString(jsonNode);\n       ref.addContext(MimeType.APPLICATION_JSON, serverResponse.json.getBytes(\"UTF-8\"));\n+      \n+      // attributes\n+      ref.getAttributesMap().put(WKAConstants.WKA_TITLE, title);\n+      ref.getAttributesMap().put(WKAConstants.WKA_DESCRIPTION, description);\n+      \n+      if (serverResponse.itemInfo!=null) {\n+        if (serverResponse.itemInfo.tags!=null) {\n+          ArrayNode tagsNode = mapper.createArrayNode();\n+          Arrays.stream(serverResponse.itemInfo.tags).forEach(tag -> tagsNode.add(tag));\n+          ref.getAttributesMap().put(\"keywords_s\", tagsNode);\n+        }\n+        String accessInformation = trimHtml(serverResponse.itemInfo.accessInformation);\n+        if (accessInformation!=null) {\n+          ref.getAttributesMap().put(\"accessInformation_txt\", accessInformation);\n+        }\n+      }\n     }\n \n-    ref.getAttributesMap().put(\"attributes\", attrs);\n-\n     return ref;\n   }\n "
  }
]
