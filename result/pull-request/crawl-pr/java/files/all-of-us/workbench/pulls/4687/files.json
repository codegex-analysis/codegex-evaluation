[
  {
    "sha": "8d4d7163a9311ae29390112ce94efd2514c6f0d1",
    "filename": "api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -30,6 +30,7 @@\n import org.pmiops.workbench.billing.FreeTierBillingService;\n import org.pmiops.workbench.cdr.CdrVersionService;\n import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cdr.dao.DSDataDictionaryDao;\n import org.pmiops.workbench.cdr.dao.DSLinkingDao;\n import org.pmiops.workbench.cdr.model.DbDSLinking;\n import org.pmiops.workbench.cohortbuilder.CohortQueryBuilder;\n@@ -46,7 +47,6 @@\n import org.pmiops.workbench.db.dao.CdrVersionDao;\n import org.pmiops.workbench.db.dao.CohortDao;\n import org.pmiops.workbench.db.dao.ConceptSetDao;\n-import org.pmiops.workbench.db.dao.DataDictionaryEntryDao;\n import org.pmiops.workbench.db.dao.DataSetDao;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n@@ -106,8 +106,8 @@\n   @Autowired private ConceptBigQueryService conceptBigQueryService;\n   @Autowired private ConceptSetDao conceptSetDao;\n   @Autowired private DSLinkingDao dsLinkingDao;\n-  @Autowired private DataDictionaryEntryDao dataDictionaryEntryDao;\n   @Autowired private DataSetDao dataSetDao;\n+  @Autowired private DSDataDictionaryDao dsDataDictionaryDao;\n   @Autowired private DataSetMapperImpl dataSetMapper;\n   @Autowired private FireCloudService fireCloudService;\n   @Autowired private NotebooksService notebooksService;\n@@ -214,9 +214,9 @@ public void setUp() {\n             conceptBigQueryService,\n             conceptSetDao,\n             cohortQueryBuilder,\n-            dataDictionaryEntryDao,\n             dataSetDao,\n             dsLinkingDao,\n+            dsDataDictionaryDao,\n             dataSetMapper,\n             CLOCK);\n     controller ="
  },
  {
    "sha": "b35b63dd7b6a23fad2d7a8dd0c1d190a9638f518",
    "filename": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/api/DataSetController.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/api/DataSetController.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/api/DataSetController.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -463,7 +463,8 @@ private void formatTimestampValues(List<DataSetPreviewValueList> valuePreviewLis\n       throw new BadRequestException(\"Invalid Domain\");\n     }\n \n-    return ResponseEntity.ok(dataSetService.findDataDictionaryEntry(domainValue, cdrVersion));\n+    return ResponseEntity.ok(\n+        dataSetService.findDataDictionaryEntry(domainValue, domain, cdrVersion));\n   }\n \n   @Override"
  },
  {
    "sha": "bfa7807e8059025fce4ecd0393d30818c20f7be9",
    "filename": "api/src/main/java/org/pmiops/workbench/cdr/dao/DSDataDictionaryDao.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/cdr/dao/DSDataDictionaryDao.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/cdr/dao/DSDataDictionaryDao.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/cdr/dao/DSDataDictionaryDao.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -0,0 +1,8 @@\n+package org.pmiops.workbench.cdr.dao;\n+\n+import org.pmiops.workbench.cdr.model.DbDSDataDictionary;\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface DSDataDictionaryDao extends CrudRepository<DbDSDataDictionary, Long> {\n+  DbDSDataDictionary findDbDSDataDictionaryByFieldNameAndDomain(String field_name, String domain);\n+}"
  },
  {
    "sha": "1dbbfd31525ff8b8a6b987a82e2f8eec52261a9e",
    "filename": "api/src/main/java/org/pmiops/workbench/cdr/model/DbDSDataDictionary.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/cdr/model/DbDSDataDictionary.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/cdr/model/DbDSDataDictionary.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/cdr/model/DbDSDataDictionary.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -0,0 +1,105 @@\n+package org.pmiops.workbench.cdr.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ds_data_dictionary\")\n+public class DbDSDataDictionary {\n+  private long id;\n+  private String fieldName;\n+  private String relevantOmopTable;\n+  private String description;\n+  private String fieldType;\n+  private String omopCdmStandardOrCustomField;\n+  private String dataProvenance;\n+  private String sourcePpiModule;\n+  private String domain;\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\")\n+  public long getId() {\n+    return id;\n+  }\n+\n+  public void setId(long id) {\n+    this.id = id;\n+  }\n+\n+  @Column(name = \"field_name\")\n+  public String getFieldName() {\n+    return fieldName;\n+  }\n+\n+  public void setFieldName(String fieldName) {\n+    this.fieldName = fieldName;\n+  }\n+\n+  @Column(name = \"relevant_omop_table\")\n+  public String getRelevantOmopTable() {\n+    return relevantOmopTable;\n+  }\n+\n+  public void setRelevantOmopTable(String relevantOmopTable) {\n+    this.relevantOmopTable = relevantOmopTable;\n+  }\n+\n+  @Column(name = \"description\")\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public void setDescription(String description) {\n+    this.description = description;\n+  }\n+\n+  @Column(name = \"field_type\")\n+  public String getFieldType() {\n+    return fieldType;\n+  }\n+\n+  public void setFieldType(String fieldType) {\n+    this.fieldType = fieldType;\n+  }\n+\n+  @Column(name = \"omop_cdm_standard_or_custom_field\")\n+  public String getOmopCdmStandardOrCustomField() {\n+    return omopCdmStandardOrCustomField;\n+  }\n+\n+  public void setOmopCdmStandardOrCustomField(String omopCdmStandardOrCustomField) {\n+    this.omopCdmStandardOrCustomField = omopCdmStandardOrCustomField;\n+  }\n+\n+  @Column(name = \"data_provenance\")\n+  public String getDataProvenance() {\n+    return dataProvenance;\n+  }\n+\n+  public void setDataProvenance(String dataProvenance) {\n+    this.dataProvenance = dataProvenance;\n+  }\n+\n+  @Column(name = \"source_ppi_module\")\n+  public String getSourcePpiModule() {\n+    return sourcePpiModule;\n+  }\n+\n+  public void setSourcePpiModule(String sourcePpiModule) {\n+    this.sourcePpiModule = sourcePpiModule;\n+  }\n+\n+  @Column(name = \"domain\")\n+  public String getDomain() {\n+    return domain;\n+  }\n+\n+  public void setDomain(String domain) {\n+    this.domain = domain;\n+  }\n+}"
  },
  {
    "sha": "bae10bea8aa9120fa07bf323e5df5a7796dc9a38",
    "filename": "api/src/main/java/org/pmiops/workbench/dataset/DataSetService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/dataset/DataSetService.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/dataset/DataSetService.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/dataset/DataSetService.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -66,5 +66,6 @@ DbDataset cloneDataSetToWorkspace(\n \n   void markDirty(ResourceType resourceType, long resourceId);\n \n-  DataDictionaryEntry findDataDictionaryEntry(String fieldName, DbCdrVersion cdrVersion);\n+  DataDictionaryEntry findDataDictionaryEntry(\n+      String fieldName, String domain, DbCdrVersion cdrVersion);\n }"
  },
  {
    "sha": "3d4b5ef7dc6897b364448bf8d7500128350d426a",
    "filename": "api/src/main/java/org/pmiops/workbench/dataset/DataSetServiceImpl.java",
    "status": "modified",
    "additions": 15,
    "deletions": 11,
    "changes": 26,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/dataset/DataSetServiceImpl.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/dataset/DataSetServiceImpl.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/dataset/DataSetServiceImpl.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -30,22 +30,23 @@\n import org.hibernate.engine.jdbc.internal.BasicFormatterImpl;\n import org.pmiops.workbench.api.BigQueryService;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.cdr.CdrVersionContext;\n import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cdr.dao.DSDataDictionaryDao;\n import org.pmiops.workbench.cdr.dao.DSLinkingDao;\n+import org.pmiops.workbench.cdr.model.DbDSDataDictionary;\n import org.pmiops.workbench.cdr.model.DbDSLinking;\n import org.pmiops.workbench.cohortbuilder.CohortQueryBuilder;\n import org.pmiops.workbench.cohortbuilder.ParticipantCriteria;\n import org.pmiops.workbench.config.CdrBigQuerySchemaConfigService;\n import org.pmiops.workbench.dataset.mapper.DataSetMapper;\n import org.pmiops.workbench.db.dao.CohortDao;\n import org.pmiops.workbench.db.dao.ConceptSetDao;\n-import org.pmiops.workbench.db.dao.DataDictionaryEntryDao;\n import org.pmiops.workbench.db.dao.DataSetDao;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbCohort;\n import org.pmiops.workbench.db.model.DbConceptSet;\n import org.pmiops.workbench.db.model.DbConceptSetConceptId;\n-import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n import org.pmiops.workbench.db.model.DbDataset;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbWorkspace;\n@@ -177,9 +178,9 @@ public String getQuery() {\n   private final ConceptBigQueryService conceptBigQueryService;\n   private final ConceptSetDao conceptSetDao;\n   private final CohortQueryBuilder cohortQueryBuilder;\n-  private final DataDictionaryEntryDao dataDictionaryEntryDao;\n   private final DataSetDao dataSetDao;\n   private final DSLinkingDao dsLinkingDao;\n+  private final DSDataDictionaryDao dsDataDictionaryDao;\n   private final DataSetMapper dataSetMapper;\n   private final Clock clock;\n \n@@ -192,9 +193,9 @@ public DataSetServiceImpl(\n       ConceptBigQueryService conceptBigQueryService,\n       ConceptSetDao conceptSetDao,\n       CohortQueryBuilder cohortQueryBuilder,\n-      DataDictionaryEntryDao dataDictionaryEntryDao,\n       DataSetDao dataSetDao,\n       DSLinkingDao dsLinkingDao,\n+      DSDataDictionaryDao dsDataDictionaryDao,\n       DataSetMapper dataSetMapper,\n       Clock clock) {\n     this.bigQueryService = bigQueryService;\n@@ -203,9 +204,9 @@ public DataSetServiceImpl(\n     this.conceptBigQueryService = conceptBigQueryService;\n     this.conceptSetDao = conceptSetDao;\n     this.cohortQueryBuilder = cohortQueryBuilder;\n-    this.dataDictionaryEntryDao = dataDictionaryEntryDao;\n     this.dataSetDao = dataSetDao;\n     this.dsLinkingDao = dsLinkingDao;\n+    this.dsDataDictionaryDao = dsDataDictionaryDao;\n     this.dataSetMapper = dataSetMapper;\n     this.clock = clock;\n   }\n@@ -998,18 +999,21 @@ public void markDirty(ResourceType resourceType, long resourceId) {\n   }\n \n   @Override\n-  public DataDictionaryEntry findDataDictionaryEntry(String fieldName, DbCdrVersion cdrVersion) {\n-    List<DbDataDictionaryEntry> dataDictionaryEntries =\n-        dataDictionaryEntryDao.findByFieldNameAndCdrVersion(fieldName, cdrVersion);\n-\n-    if (dataDictionaryEntries.isEmpty()) {\n+  public DataDictionaryEntry findDataDictionaryEntry(\n+      String fieldName, String domain, DbCdrVersion cdrVersion) {\n+    CdrVersionContext.setCdrVersionNoCheckAuthDomain(cdrVersion);\n+    DbDSDataDictionary dbDSDataDictionary =\n+        dsDataDictionaryDao.findDbDSDataDictionaryByFieldNameAndDomain(fieldName, domain);\n+    if (dbDSDataDictionary == null) {\n       throw new NotFoundException(\n           \"No Data Dictionary Entry found for domain: \"\n               + fieldName\n               + \" cdr version: \"\n               + cdrVersion);\n     }\n-    return dataSetMapper.dbModelToClient(dataDictionaryEntries.get(0));\n+    DataDictionaryEntry dataDictionaryEntry = dataSetMapper.dbDsModelToClient(dbDSDataDictionary);\n+    dataDictionaryEntry.setCdrVersionId(cdrVersion.getCdrVersionId());\n+    return dataDictionaryEntry;\n   }\n \n   private ValuesLinkingPair getValueSelectsAndJoins(List<DomainValuePair> domainValuePairs) {"
  },
  {
    "sha": "da240a5b2b0893d22d8f3fff2b76328c86469183",
    "filename": "api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/dataset/mapper/DataSetMapper.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -14,6 +14,7 @@\n import org.mapstruct.MappingTarget;\n import org.mapstruct.Named;\n import org.mapstruct.NullValueCheckStrategy;\n+import org.pmiops.workbench.cdr.model.DbDSDataDictionary;\n import org.pmiops.workbench.cohorts.CohortService;\n import org.pmiops.workbench.conceptset.ConceptSetService;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n@@ -135,4 +136,11 @@ default DomainValuePair createDomainValuePair(DbDatasetValue dbDatasetValue) {\n \n   @Mapping(target = \"cdrVersionId\", source = \"dbModel.cdrVersion.cdrVersionId\")\n   DataDictionaryEntry dbModelToClient(DbDataDictionaryEntry dbModel);\n+\n+  //  transformedByRegisteredTierPrivacyMethods and definedTime are not used in UI we can delete\n+  // this later\n+  @Mapping(target = \"cdrVersionId\", ignore = true)\n+  @Mapping(target = \"transformedByRegisteredTierPrivacyMethods\", ignore = true)\n+  @Mapping(target = \"definedTime\", ignore = true)\n+  DataDictionaryEntry dbDsModelToClient(DbDSDataDictionary dbModel);\n }"
  },
  {
    "sha": "468beda34b4abfc7d9dacef97250d089f131ca61",
    "filename": "api/src/test/java/org/pmiops/workbench/api/DataDictionaryTest.java",
    "status": "modified",
    "additions": 32,
    "deletions": 41,
    "changes": 73,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/test/java/org/pmiops/workbench/api/DataDictionaryTest.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/test/java/org/pmiops/workbench/api/DataDictionaryTest.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/test/java/org/pmiops/workbench/api/DataDictionaryTest.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -2,7 +2,6 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import java.sql.Timestamp;\n import java.time.Clock;\n import java.time.Instant;\n import java.time.ZoneId;\n@@ -15,6 +14,8 @@\n import org.pmiops.workbench.cdr.CdrVersionMapper;\n import org.pmiops.workbench.cdr.CdrVersionService;\n import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cdr.dao.DSDataDictionaryDao;\n+import org.pmiops.workbench.cdr.model.DbDSDataDictionary;\n import org.pmiops.workbench.cohortbuilder.CohortQueryBuilder;\n import org.pmiops.workbench.cohorts.CohortService;\n import org.pmiops.workbench.concept.ConceptService;\n@@ -28,7 +29,6 @@\n import org.pmiops.workbench.db.dao.CdrVersionDao;\n import org.pmiops.workbench.db.dao.DataDictionaryEntryDao;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n-import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n import org.pmiops.workbench.exceptions.BadRequestException;\n import org.pmiops.workbench.exceptions.NotFoundException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n@@ -56,6 +56,7 @@\n   @Autowired private AccessTierDao accessTierDao;\n   @Autowired private CdrVersionDao cdrVersionDao;\n   @Autowired private DataDictionaryEntryDao dataDictionaryEntryDao;\n+  @Autowired private DSDataDictionaryDao dsDataDictionaryDao;\n   @Autowired private DataSetController dataSetController;\n \n   @Rule public ExpectedException expectedEx = ExpectedException.none();\n@@ -98,60 +99,50 @@ Clock clock() {\n   public void setUp() {\n     cdrVersion = TestMockFactory.createDefaultCdrVersion(cdrVersionDao, accessTierDao);\n \n-    DbDataDictionaryEntry dataDictionaryEntry = new DbDataDictionaryEntry();\n-    dataDictionaryEntry.setCdrVersion(cdrVersion);\n-    dataDictionaryEntry.setDefinedTime(new Timestamp(CLOCK.millis()));\n-    dataDictionaryEntry.setRelevantOmopTable(BigQueryTableInfo.getTableName(Domain.DRUG));\n-    dataDictionaryEntry.setFieldName(\"TEST FIELD\");\n-    dataDictionaryEntry.setOmopCdmStandardOrCustomField(\"A\");\n-    dataDictionaryEntry.setDescription(\"B\");\n-    dataDictionaryEntry.setFieldType(\"C\");\n-    dataDictionaryEntry.setDataProvenance(\"D\");\n-    dataDictionaryEntry.setSourcePpiModule(\"E\");\n-    dataDictionaryEntry.setTransformedByRegisteredTierPrivacyMethods(true);\n-\n-    dataDictionaryEntryDao.save(dataDictionaryEntry);\n+    DbDSDataDictionary dbDSDataDictionary = new DbDSDataDictionary();\n+    dbDSDataDictionary.setRelevantOmopTable(BigQueryTableInfo.getTableName(Domain.DRUG));\n+    dbDSDataDictionary.setFieldName(\"TEST FIELD\");\n+    dbDSDataDictionary.setOmopCdmStandardOrCustomField(\"A\");\n+    dbDSDataDictionary.setDescription(\"B\");\n+    dbDSDataDictionary.setFieldType(\"C\");\n+    dbDSDataDictionary.setDataProvenance(\"D\");\n+    dbDSDataDictionary.setSourcePpiModule(\"E\");\n+    dbDSDataDictionary.setDomain(\"Drug\");\n+\n+    dsDataDictionaryDao.save(dbDSDataDictionary);\n   }\n \n   @Test\n   public void testGetDataDictionaryEntry() {\n     final Domain domain = Domain.DRUG;\n     final String domainValue = \"FIELD NAME / DOMAIN VALUE\";\n \n-    DbDataDictionaryEntry dataDictionaryEntry = new DbDataDictionaryEntry();\n-    dataDictionaryEntry.setCdrVersion(cdrVersion);\n-    dataDictionaryEntry.setDefinedTime(new Timestamp(CLOCK.millis()));\n-    dataDictionaryEntry.setRelevantOmopTable(BigQueryTableInfo.getTableName(domain));\n-    dataDictionaryEntry.setFieldName(domainValue);\n-    dataDictionaryEntry.setOmopCdmStandardOrCustomField(\"A\");\n-    dataDictionaryEntry.setDescription(\"B\");\n-    dataDictionaryEntry.setFieldType(\"C\");\n-    dataDictionaryEntry.setDataProvenance(\"D\");\n-    dataDictionaryEntry.setSourcePpiModule(\"E\");\n-    dataDictionaryEntry.setTransformedByRegisteredTierPrivacyMethods(true);\n-\n-    dataDictionaryEntryDao.save(dataDictionaryEntry);\n+    DbDSDataDictionary dbDSDataDictionary = new DbDSDataDictionary();\n+    dbDSDataDictionary.setRelevantOmopTable(BigQueryTableInfo.getTableName(domain));\n+    dbDSDataDictionary.setFieldName(domainValue);\n+    dbDSDataDictionary.setOmopCdmStandardOrCustomField(\"A\");\n+    dbDSDataDictionary.setDescription(\"B\");\n+    dbDSDataDictionary.setFieldType(\"C\");\n+    dbDSDataDictionary.setDataProvenance(\"D\");\n+    dbDSDataDictionary.setSourcePpiModule(\"E\");\n+    dbDSDataDictionary.setDomain(\"DRUG\");\n+    dsDataDictionaryDao.save(dbDSDataDictionary);\n \n     DataDictionaryEntry response =\n         dataSetController\n             .getDataDictionaryEntry(cdrVersion.getCdrVersionId(), domain.toString(), domainValue)\n             .getBody();\n \n-    assertThat(response.getCdrVersionId())\n-        .isEqualTo(dataDictionaryEntry.getCdrVersion().getCdrVersionId());\n-    assertThat(new Timestamp(response.getDefinedTime()))\n-        .isEqualTo(dataDictionaryEntry.getDefinedTime());\n+    assertThat(response.getCdrVersionId()).isEqualTo(cdrVersion.getCdrVersionId());\n     assertThat(response.getRelevantOmopTable())\n-        .isEqualTo(dataDictionaryEntry.getRelevantOmopTable());\n-    assertThat(response.getFieldName()).isEqualTo(dataDictionaryEntry.getFieldName());\n+        .isEqualTo(dbDSDataDictionary.getRelevantOmopTable());\n+    assertThat(response.getFieldName()).isEqualTo(dbDSDataDictionary.getFieldName());\n     assertThat(response.getOmopCdmStandardOrCustomField())\n-        .isEqualTo(dataDictionaryEntry.getOmopCdmStandardOrCustomField());\n-    assertThat(response.getDescription()).isEqualTo(dataDictionaryEntry.getDescription());\n-    assertThat(response.getFieldType()).isEqualTo(dataDictionaryEntry.getFieldType());\n-    assertThat(response.getDataProvenance()).isEqualTo(dataDictionaryEntry.getDataProvenance());\n-    assertThat(response.getSourcePpiModule()).isEqualTo(dataDictionaryEntry.getSourcePpiModule());\n-    assertThat(response.getTransformedByRegisteredTierPrivacyMethods())\n-        .isEqualTo(dataDictionaryEntry.getTransformedByRegisteredTierPrivacyMethods());\n+        .isEqualTo(dbDSDataDictionary.getOmopCdmStandardOrCustomField());\n+    assertThat(response.getDescription()).isEqualTo(dbDSDataDictionary.getDescription());\n+    assertThat(response.getFieldType()).isEqualTo(dbDSDataDictionary.getFieldType());\n+    assertThat(response.getDataProvenance()).isEqualTo(dbDSDataDictionary.getDataProvenance());\n+    assertThat(response.getSourcePpiModule()).isEqualTo(dbDSDataDictionary.getSourcePpiModule());\n   }\n \n   @Test"
  },
  {
    "sha": "45865ade072a424289cf2df0d1172c1294221147",
    "filename": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java",
    "status": "modified",
    "additions": 29,
    "deletions": 3,
    "changes": 32,
    "blob_url": "https://github.com/all-of-us/workbench/blob/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/d1eb95df6e06230cfa161681f8338ea8dd627012/api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java?ref=d1eb95df6e06230cfa161681f8338ea8dd627012",
    "patch": "@@ -39,7 +39,9 @@\n import org.junit.runner.RunWith;\n import org.pmiops.workbench.api.BigQueryService;\n import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cdr.dao.DSDataDictionaryDao;\n import org.pmiops.workbench.cdr.dao.DSLinkingDao;\n+import org.pmiops.workbench.cdr.model.DbDSDataDictionary;\n import org.pmiops.workbench.cdr.model.DbDSLinking;\n import org.pmiops.workbench.cohortbuilder.CohortQueryBuilder;\n import org.pmiops.workbench.cohorts.CohortService;\n@@ -50,10 +52,12 @@\n import org.pmiops.workbench.dataset.DataSetServiceImpl.QueryAndParameters;\n import org.pmiops.workbench.dataset.mapper.DataSetMapper;\n import org.pmiops.workbench.dataset.mapper.DataSetMapperImpl;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbCohort;\n import org.pmiops.workbench.db.model.DbConceptSet;\n import org.pmiops.workbench.db.model.DbConceptSetConceptId;\n import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.DataDictionaryEntry;\n import org.pmiops.workbench.model.DataSetRequest;\n import org.pmiops.workbench.model.Domain;\n import org.pmiops.workbench.model.DomainValuePair;\n@@ -97,9 +101,9 @@\n   @Autowired private ConceptSetDao conceptSetDao;\n   @Autowired private ConceptBigQueryService conceptBigQueryService;\n   @Autowired private CohortQueryBuilder cohortQueryBuilder;\n-  @Autowired private DataDictionaryEntryDao dataDictionaryEntryDao;\n   @Autowired private DataSetDao dataSetDao;\n   @Autowired private DSLinkingDao dsLinkingDao;\n+  @Autowired private DSDataDictionaryDao dsDataDictionaryDao;\n   @Autowired private DataSetMapper dataSetMapper;\n \n   @MockBean private BigQueryService mockBigQueryService;\n@@ -118,7 +122,8 @@\n     ConceptSetService.class,\n     CohortQueryBuilder.class,\n     DataSetDao.class,\n-    DSLinkingDao.class\n+    DSLinkingDao.class,\n+    DSDataDictionaryDao.class,\n   })\n   static class Configuration {\n     @Bean\n@@ -142,9 +147,9 @@ public void setUp() {\n             conceptBigQueryService,\n             conceptSetDao,\n             cohortQueryBuilder,\n-            dataDictionaryEntryDao,\n             dataSetDao,\n             dsLinkingDao,\n+            dsDataDictionaryDao,\n             dataSetMapper,\n             CLOCK);\n \n@@ -488,6 +493,17 @@ public void testFITBITDomainToBigQueryConfig() {\n         .contains(\"GROUP BY PERSON_ID, DATE\");\n   }\n \n+  @Test\n+  public void testDataDictionary() {\n+    mockDataDictionaryDao();\n+    DbCdrVersion cdrVersion = new DbCdrVersion();\n+    cdrVersion.setCdrVersionId(1l);\n+    DataDictionaryEntry dataDictionaryEntry =\n+        dataSetServiceImpl.findDataDictionaryEntry(\"gender\", \"PERSON\", cdrVersion);\n+    assertThat(dataDictionaryEntry).isNotNull();\n+    assertThat(dataDictionaryEntry.getDescription()).isEqualTo(\"Gender testing\");\n+  }\n+\n   private void mockDsLinkingTableForFitbit() {\n     DbDSLinking dbDSLinkingFitbit_personId = new DbDSLinking();\n     dbDSLinkingFitbit_personId.setDenormalizedName(\"PERSON_ID\");\n@@ -533,4 +549,14 @@ private void mockLinkingTableQuery(Collection<String> domainBaseTables) {\n \n     doReturn(tableResultMock).when(mockBigQueryService).executeQuery(any());\n   }\n+\n+  private void mockDataDictionaryDao() {\n+    DbDSDataDictionary dsDataDictionary = new DbDSDataDictionary();\n+    dsDataDictionary.setDomain(\"PERSON\");\n+    dsDataDictionary.setFieldName(\"gender\");\n+    dsDataDictionary.setDescription(\"Gender testing\");\n+    dsDataDictionary.setFieldType(\"string\");\n+    when(dsDataDictionaryDao.findDbDSDataDictionaryByFieldNameAndDomain(\"gender\", \"PERSON\"))\n+        .thenReturn(dsDataDictionary);\n+  }\n }"
  }
]
