[
  {
    "sha": "cb188cfa662d466095c95f8c7f4c1a9e0c5d2b15",
    "filename": "api/src/main/java/org/pmiops/workbench/cdr/CdrDbConfig.java",
    "status": "modified",
    "additions": 2,
    "deletions": 46,
    "changes": 48,
    "blob_url": "https://github.com/all-of-us/workbench/blob/c75cca2466ba99f74269a5d1db2675d1150f2d05/api/src/main/java/org/pmiops/workbench/cdr/CdrDbConfig.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/c75cca2466ba99f74269a5d1db2675d1150f2d05/api/src/main/java/org/pmiops/workbench/cdr/CdrDbConfig.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/cdr/CdrDbConfig.java?ref=c75cca2466ba99f74269a5d1db2675d1150f2d05",
    "patch": "@@ -1,6 +1,5 @@\n package org.pmiops.workbench.cdr;\n \n-import com.google.common.cache.LoadingCache;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n@@ -9,11 +8,8 @@\n import org.apache.log4j.Logger;\n import org.apache.tomcat.jdbc.pool.PoolConfiguration;\n import org.apache.tomcat.jdbc.pool.PoolProperties;\n-import org.pmiops.workbench.config.CacheSpringConfiguration;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.dao.CdrVersionDao;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n-import org.pmiops.workbench.exceptions.ServerErrorException;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n@@ -22,8 +18,6 @@\n import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.event.ContextRefreshedEvent;\n-import org.springframework.context.event.EventListener;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n import org.springframework.orm.jpa.JpaTransactionManager;\n@@ -47,19 +41,12 @@\n \n   @Service\n   public static class CdrDataSource extends AbstractRoutingDataSource {\n-\n-    private boolean finishedInitialization = false;\n-\n-    private final Long defaultCdrVersionId;\n-\n     @Autowired\n     public CdrDataSource(\n         CdrVersionDao cdrVersionDao,\n         @Qualifier(\"poolConfiguration\") PoolConfiguration basePoolConfig,\n-        @Qualifier(\"cdrPoolConfiguration\") PoolConfiguration cdrPoolConfig,\n-        @Qualifier(\"configCache\") LoadingCache<String, Object> configCache)\n+        @Qualifier(\"cdrPoolConfiguration\") PoolConfiguration cdrPoolConfig)\n         throws ExecutionException {\n-      WorkbenchConfig workbenchConfig = CacheSpringConfiguration.lookupWorkbenchConfig(configCache);\n       String dbUser = cdrPoolConfig.getUsername();\n       String dbPassword = cdrPoolConfig.getPassword();\n       String originalDbUrl = cdrPoolConfig.getUrl();\n@@ -69,7 +56,6 @@ public CdrDataSource(\n       // server in order for it to be used.\n       // TODO: find a way to make sure CDR versions aren't shown in the UI until they are in use by\n       // all servers.\n-      Long defaultId = null;\n       Map<Object, Object> cdrVersionDataSourceMap = new HashMap<>();\n       for (DbCdrVersion cdrVersion : cdrVersionDao.findAll()) {\n         int slashIndex = originalDbUrl.lastIndexOf('/');\n@@ -109,44 +95,14 @@ public CdrDataSource(\n                   + \"this should only happen within tests\");\n         }\n         cdrVersionDataSourceMap.put(cdrVersion.getCdrVersionId(), dataSource);\n-        if (cdrVersion.getIsDefault()) {\n-          if (defaultId != null) {\n-            throw new ServerErrorException(\n-                String.format(\n-                    \"Multiple CDR versions are marked as the default: %d, %d\",\n-                    defaultId, cdrVersion.getCdrVersionId()));\n-          }\n-          defaultId = cdrVersion.getCdrVersionId();\n-        }\n-      }\n-      if (defaultId == null) {\n-        throw new ServerErrorException(\"Default CDR version not found!\");\n       }\n-      this.defaultCdrVersionId = defaultId;\n       setTargetDataSources(cdrVersionDataSourceMap);\n       afterPropertiesSet();\n     }\n \n-    @EventListener\n-    public void handleContextRefresh(ContextRefreshedEvent event) {\n-      finishedInitialization = true;\n-    }\n-\n     @Override\n     protected Object determineCurrentLookupKey() {\n-      DbCdrVersion cdrVersion = CdrVersionContext.getCdrVersion();\n-      if (cdrVersion == null) {\n-        if (finishedInitialization) {\n-          throw new ServerErrorException(\"No CDR version specified!\");\n-        }\n-        // While Spring beans are being initialized, this method can be called\n-        // in the course of attempting to determine metadata about the data source.\n-        // Return the the default CDR version for configuring metadata.\n-        // After Spring beans are finished being initialized, init() will\n-        // be called and we will start requiring clients to specify a CDR version.\n-        return defaultCdrVersionId;\n-      }\n-      return cdrVersion.getCdrVersionId();\n+      return CdrVersionContext.getCdrVersion().getCdrVersionId();\n     }\n   }\n "
  },
  {
    "sha": "41d5c45e18152285ec12f56a930129d5de70935a",
    "filename": "api/src/main/java/org/pmiops/workbench/cdr/CdrVersionContext.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/all-of-us/workbench/blob/c75cca2466ba99f74269a5d1db2675d1150f2d05/api/src/main/java/org/pmiops/workbench/cdr/CdrVersionContext.java",
    "raw_url": "https://github.com/all-of-us/workbench/raw/c75cca2466ba99f74269a5d1db2675d1150f2d05/api/src/main/java/org/pmiops/workbench/cdr/CdrVersionContext.java",
    "contents_url": "https://api.github.com/repos/all-of-us/workbench/contents/api/src/main/java/org/pmiops/workbench/cdr/CdrVersionContext.java?ref=c75cca2466ba99f74269a5d1db2675d1150f2d05",
    "patch": "@@ -1,6 +1,8 @@\n package org.pmiops.workbench.cdr;\n \n+import javax.validation.constraints.NotNull;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.exceptions.ServerErrorException;\n \n /** Maintains state of what CDR version is being used in the context of the current request. */\n public class CdrVersionContext {\n@@ -24,7 +26,12 @@ public static void clearCdrVersion() {\n     cdrVersion.remove();\n   }\n \n+  @NotNull\n   public static DbCdrVersion getCdrVersion() {\n-    return cdrVersion.get();\n+    DbCdrVersion version = cdrVersion.get();\n+    if (version == null) {\n+      throw new ServerErrorException(\"No CDR version specified!\");\n+    }\n+    return version;\n   }\n }"
  }
]
