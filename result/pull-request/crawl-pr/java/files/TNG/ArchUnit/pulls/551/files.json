[
  {
    "sha": "6e02a31ef998519d2edd04a9518a544b68e5bbf2",
    "filename": "archunit-example/example-plain/src/main/java/com/tngtech/archunit/example/layers/service/SpecialServiceHelper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit-example/example-plain/src/main/java/com/tngtech/archunit/example/layers/service/SpecialServiceHelper.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit-example/example-plain/src/main/java/com/tngtech/archunit/example/layers/service/SpecialServiceHelper.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit-example/example-plain/src/main/java/com/tngtech/archunit/example/layers/service/SpecialServiceHelper.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -1,10 +1,11 @@\n package com.tngtech.archunit.example.layers.service;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Set;\n \n import com.tngtech.archunit.example.layers.controller.SomeUtility;\n import com.tngtech.archunit.example.layers.controller.one.SomeEnum;\n \n-public class SpecialServiceHelper extends ServiceHelper<SomeUtility, HashMap<?, Set<? super SomeEnum>>> {\n+public abstract class SpecialServiceHelper extends ServiceHelper<SomeUtility, HashMap<?, Set<? super SomeEnum>>> implements List<Set<? super SomeUtility>> {\n }"
  },
  {
    "sha": "43b452915b73e2374b79272f19b27525e663f606",
    "filename": "archunit-integration-test/src/test/java/com/tngtech/archunit/integration/ExamplesIntegrationTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit-integration-test/src/test/java/com/tngtech/archunit/integration/ExamplesIntegrationTest.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit-integration-test/src/test/java/com/tngtech/archunit/integration/ExamplesIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit-integration-test/src/test/java/com/tngtech/archunit/integration/ExamplesIntegrationTest.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -175,6 +175,7 @@\n import static com.tngtech.archunit.testutils.ExpectedDependency.annotatedClass;\n import static com.tngtech.archunit.testutils.ExpectedDependency.constructor;\n import static com.tngtech.archunit.testutils.ExpectedDependency.field;\n+import static com.tngtech.archunit.testutils.ExpectedDependency.genericInterface;\n import static com.tngtech.archunit.testutils.ExpectedDependency.genericSuperclass;\n import static com.tngtech.archunit.testutils.ExpectedDependency.inheritanceFrom;\n import static com.tngtech.archunit.testutils.ExpectedDependency.method;\n@@ -781,6 +782,7 @@ public void evaluate() {\n                 .by(typeParameter(ServiceHelper.class, \"ANOTHER_TYPE_PARAMETER_VIOLATING_LAYER_RULE\").dependingOn(SomeEnum.class))\n                 .by(genericSuperclass(SpecialServiceHelper.class, ServiceHelper.class).dependingOn(SomeUtility.class))\n                 .by(genericSuperclass(SpecialServiceHelper.class, ServiceHelper.class).dependingOn(SomeEnum.class))\n+                .by(genericInterface(SpecialServiceHelper.class, List.class).dependingOn(SomeUtility.class))\n                 .by(method(ServiceViolatingLayerRules.class, dependentMethod).withParameter(UseCaseTwoController.class))\n                 .by(method(ServiceViolatingLayerRules.class, dependentMethod).withReturnType(SomeGuiController.class))\n                 .by(method(ServiceViolatingLayerRules.class, dependentOnComponentTypeMethod).withParameter(UseCaseTwoController[].class))\n@@ -842,6 +844,7 @@ public void evaluate() {\n                 .by(typeParameter(ServiceHelper.class, \"ANOTHER_TYPE_PARAMETER_VIOLATING_LAYER_RULE\").dependingOn(SomeEnum.class))\n                 .by(genericSuperclass(SpecialServiceHelper.class, ServiceHelper.class).dependingOn(SomeUtility.class))\n                 .by(genericSuperclass(SpecialServiceHelper.class, ServiceHelper.class).dependingOn(SomeEnum.class))\n+                .by(genericInterface(SpecialServiceHelper.class, List.class).dependingOn(SomeUtility.class))\n                 .by(method(ServiceViolatingLayerRules.class, dependentMethod).withParameter(UseCaseTwoController.class))\n                 .by(method(ServiceViolatingLayerRules.class, dependentMethod).withReturnType(SomeGuiController.class))\n                 .by(method(ServiceViolatingLayerRules.class, dependentOnComponentTypeMethod).withParameter(UseCaseTwoController[].class))\n@@ -913,6 +916,7 @@ public void evaluate() {\n                                 .by(typeParameter(ServiceHelper.class, \"ANOTHER_TYPE_PARAMETER_VIOLATING_LAYER_RULE\").dependingOn(SomeEnum.class))\n                                 .by(genericSuperclass(SpecialServiceHelper.class, ServiceHelper.class).dependingOn(SomeUtility.class))\n                                 .by(genericSuperclass(SpecialServiceHelper.class, ServiceHelper.class).dependingOn(SomeEnum.class))\n+                                .by(genericInterface(SpecialServiceHelper.class, List.class).dependingOn(SomeUtility.class))\n                                 .by(method(ServiceViolatingLayerRules.class, dependentMethod).withParameter(UseCaseTwoController.class))\n                                 .by(method(ServiceViolatingLayerRules.class, dependentMethod).withReturnType(SomeGuiController.class))\n                                 .by(method(ServiceViolatingLayerRules.class, dependentOnComponentTypeMethod)"
  },
  {
    "sha": "1b4507e446d2a7a7315ac1b4baf13a5eb39db655",
    "filename": "archunit-integration-test/src/test/java/com/tngtech/archunit/testutils/ExpectedDependency.java",
    "status": "modified",
    "additions": 13,
    "deletions": 7,
    "changes": 20,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit-integration-test/src/test/java/com/tngtech/archunit/testutils/ExpectedDependency.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit-integration-test/src/test/java/com/tngtech/archunit/testutils/ExpectedDependency.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit-integration-test/src/test/java/com/tngtech/archunit/testutils/ExpectedDependency.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -29,8 +29,12 @@ public static TypeParameterCreator typeParameter(Class<?> clazz, String typePara\n         return new TypeParameterCreator(clazz, typeParameterName);\n     }\n \n-    public static GenericSuperclassTypeArgumentCreator genericSuperclass(Class<?> clazz, Class<?> genericSuperclassErasure) {\n-        return new GenericSuperclassTypeArgumentCreator(clazz, genericSuperclassErasure);\n+    public static GenericSupertypeTypeArgumentCreator genericSuperclass(Class<?> clazz, Class<?> genericSuperclassErasure) {\n+        return new GenericSupertypeTypeArgumentCreator(clazz, \"superclass\", genericSuperclassErasure);\n+    }\n+\n+    public static GenericSupertypeTypeArgumentCreator genericInterface(Class<?> clazz, Class<?> genericInterfaceErasure) {\n+        return new GenericSupertypeTypeArgumentCreator(clazz, \"interface\", genericInterfaceErasure);\n     }\n \n     public static AnnotationDependencyCreator annotatedClass(Class<?> clazz) {\n@@ -108,19 +112,21 @@ public ExpectedDependency dependingOn(Class<?> typeParameterDependency) {\n         }\n     }\n \n-    public static class GenericSuperclassTypeArgumentCreator {\n+    public static class GenericSupertypeTypeArgumentCreator {\n         private final Class<?> childClass;\n-        private final Class<?> genericSuperclassErasure;\n+        private final Class<?> genericSupertypeErasure;\n+        private final String genericTypeDescription;\n \n-        private GenericSuperclassTypeArgumentCreator(Class<?> childClass, Class<?> genericSuperclassErasure) {\n+        private GenericSupertypeTypeArgumentCreator(Class<?> childClass, String genericTypeDescription, Class<?> genericSupertypeErasure) {\n             this.childClass = childClass;\n-            this.genericSuperclassErasure = genericSuperclassErasure;\n+            this.genericSupertypeErasure = genericSupertypeErasure;\n+            this.genericTypeDescription = genericTypeDescription;\n         }\n \n         public ExpectedDependency dependingOn(Class<?> superclassTypeArgumentDependency) {\n             return new ExpectedDependency(childClass, superclassTypeArgumentDependency,\n                     getDependencyPattern(childClass.getName(),\n-                            \"has generic superclass <\" + genericSuperclassErasure.getName() + \"> with type argument depending on\",\n+                            \"has generic \" + genericTypeDescription + \" <\" + genericSupertypeErasure.getName() + \"> with type argument depending on\",\n                             superclassTypeArgumentDependency.getName(),\n                             0));\n         }"
  },
  {
    "sha": "1872a9a038dec33ee823cad4a1eead3605bd2ba2",
    "filename": "archunit/src/main/java/com/tngtech/archunit/base/Optional.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/base/Optional.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/base/Optional.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/base/Optional.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -140,6 +140,11 @@ public int hashCode() {\n         public boolean equals(Object obj) {\n             return obj instanceof Absent;\n         }\n+\n+        @Override\n+        public String toString() {\n+            return Optional.class.getSimpleName() + \".absent()\";\n+        }\n     }\n \n     private static class Present<T> extends Optional<T> {\n@@ -210,5 +215,10 @@ public boolean equals(Object obj) {\n             final Present<?> other = (Present<?>) obj;\n             return Objects.equals(this.object, other.object);\n         }\n+\n+        @Override\n+        public String toString() {\n+            return Optional.class.getSimpleName() + \".of(\" + object + \")\";\n+        }\n     }\n }"
  },
  {
    "sha": "87fb47625341656f4afc508f3d8a16261d0d73bf",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/domain/Dependency.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/Dependency.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/Dependency.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/domain/Dependency.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -145,7 +145,15 @@ static Dependency fromInheritance(JavaClass origin, JavaClass targetSupertype) {\n     }\n \n     static Set<Dependency> tryCreateFromGenericSuperclassTypeArguments(JavaClass originClass, JavaType superclass, JavaClass typeArgumentDependency) {\n-        String dependencyType = \"has generic superclass \" + bracketFormat(superclass.getName()) + \" with type argument depending on\";\n+        return createGenericDependency(originClass, \"superclass\", superclass, typeArgumentDependency);\n+    }\n+\n+    static Set<Dependency> tryCreateFromGenericInterfaceTypeArgument(JavaClass originClass, JavaType genericInterface, JavaClass typeArgumentDependency) {\n+        return createGenericDependency(originClass, \"interface\", genericInterface, typeArgumentDependency);\n+    }\n+\n+    private static Set<Dependency> createGenericDependency(JavaClass originClass, String genericTypeDescription, JavaType genericSuperType, JavaClass typeArgumentDependency) {\n+        String dependencyType = \"has generic \" + genericTypeDescription + \" \" + bracketFormat(genericSuperType.getName()) + \" with type argument depending on\";\n         return tryCreateDependency(originClass, originClass.getDescription(), dependencyType, typeArgumentDependency, originClass.getSourceCodeLocation());\n     }\n "
  },
  {
    "sha": "cfe1c6541c69f066d65d0e0b8ab03db68be78bde",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/domain/DomainObjectCreationContext.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/DomainObjectCreationContext.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/DomainObjectCreationContext.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/domain/DomainObjectCreationContext.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -82,6 +82,10 @@ public static void completeGenericSuperclass(JavaClass javaClass, ImportContext\n         javaClass.completeGenericSuperclassFrom(importContext);\n     }\n \n+    public static void completeGenericInterfaces(JavaClass javaClass, ImportContext importContext) {\n+        javaClass.completeGenericInterfacesFrom(importContext);\n+    }\n+\n     public static void completeMembers(JavaClass javaClass, ImportContext importContext) {\n         javaClass.completeMembers(importContext);\n     }"
  },
  {
    "sha": "3200efdce2875946bd7ed6ca2609bcd91e65f083",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/domain/ImportContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/ImportContext.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/ImportContext.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/domain/ImportContext.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -28,6 +28,8 @@\n \n     Optional<JavaType> createGenericSuperclass(JavaClass owner);\n \n+    Optional<Set<JavaType>> createGenericInterfaces(JavaClass owner);\n+\n     Set<JavaClass> createInterfaces(JavaClass owner);\n \n     List<JavaTypeVariable<JavaClass>> createTypeParameters(JavaClass owner);"
  },
  {
    "sha": "3ee5648b28c3af983d02abe2a5e95ca114c828d8",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClass.java",
    "status": "modified",
    "additions": 65,
    "deletions": 13,
    "changes": 78,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClass.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClass.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClass.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -26,6 +26,7 @@\n import com.google.common.base.Joiner;\n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n+import com.google.common.collect.FluentIterable;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import com.tngtech.archunit.PublicAPI;\n@@ -50,6 +51,7 @@\n import static com.tngtech.archunit.base.ClassLoaders.getCurrentClassLoader;\n import static com.tngtech.archunit.base.DescribedPredicate.equalTo;\n import static com.tngtech.archunit.base.DescribedPredicate.not;\n+import static com.tngtech.archunit.base.Guava.toGuava;\n import static com.tngtech.archunit.core.domain.JavaClass.Functions.GET_SIMPLE_NAME;\n import static com.tngtech.archunit.core.domain.JavaModifier.ENUM;\n import static com.tngtech.archunit.core.domain.JavaType.Functions.TO_ERASURE;\n@@ -87,14 +89,14 @@\n             return result.build();\n         }\n     });\n-    private final Set<JavaClass> interfaces = new HashSet<>();\n-    private final Supplier<Set<JavaClass>> allInterfaces = Suppliers.memoize(new Supplier<Set<JavaClass>>() {\n+    private Interfaces interfaces = Interfaces.EMPTY;\n+    private final Supplier<Set<JavaClass>> allRawInterfaces = Suppliers.memoize(new Supplier<Set<JavaClass>>() {\n         @Override\n         public Set<JavaClass> get() {\n             ImmutableSet.Builder<JavaClass> result = ImmutableSet.builder();\n-            for (JavaClass i : interfaces) {\n+            for (JavaClass i : interfaces.getRaw()) {\n                 result.add(i);\n-                result.addAll(i.getAllInterfaces());\n+                result.addAll(i.getAllRawInterfaces());\n             }\n             result.addAll(superclass.getAllInterfaces());\n             return result.build();\n@@ -708,13 +710,18 @@ public JavaClass toErasure() {\n     }\n \n     @PublicAPI(usage = ACCESS)\n-    public Set<JavaClass> getInterfaces() {\n-        return interfaces;\n+    public Set<JavaType> getInterfaces() {\n+        return interfaces.get();\n     }\n \n     @PublicAPI(usage = ACCESS)\n-    public Set<JavaClass> getAllInterfaces() {\n-        return allInterfaces.get();\n+    public Set<JavaClass> getRawInterfaces() {\n+        return interfaces.getRaw();\n+    }\n+\n+    @PublicAPI(usage = ACCESS)\n+    public Set<JavaClass> getAllRawInterfaces() {\n+        return allRawInterfaces.get();\n     }\n \n     /**\n@@ -730,7 +737,7 @@ public JavaClass toErasure() {\n         return ImmutableSet.<JavaClass>builder()\n                 .add(this)\n                 .addAll(getAllRawSuperclasses())\n-                .addAll(getAllInterfaces())\n+                .addAll(getAllRawInterfaces())\n                 .build();\n     }\n \n@@ -1191,7 +1198,7 @@ public boolean isAssignableTo(final String typeName) {\n     @PublicAPI(usage = ACCESS)\n     public boolean isAssignableTo(DescribedPredicate<? super JavaClass> predicate) {\n         List<JavaClass> possibleTargets = ImmutableList.<JavaClass>builder()\n-                .addAll(getClassHierarchy()).addAll(getAllInterfaces()).build();\n+                .addAll(getClassHierarchy()).addAll(getAllRawInterfaces()).build();\n \n         return anyMatches(possibleTargets, predicate);\n     }\n@@ -1233,10 +1240,11 @@ private void completeSuperclassFrom(ImportContext context) {\n     }\n \n     private void completeInterfacesFrom(ImportContext context) {\n-        interfaces.addAll(context.createInterfaces(this));\n-        for (JavaClass i : interfaces) {\n+        Set<JavaClass> rawInterfaces = context.createInterfaces(this);\n+        for (JavaClass i : rawInterfaces) {\n             i.subclasses.add(this);\n         }\n+        this.interfaces = this.interfaces.withRawTypes(rawInterfaces);\n     }\n \n     void completeEnclosingClassFrom(ImportContext context) {\n@@ -1257,6 +1265,14 @@ void completeGenericSuperclassFrom(ImportContext context) {\n         completionProcess.markGenericSuperclassComplete();\n     }\n \n+    void completeGenericInterfacesFrom(ImportContext context) {\n+        Optional<Set<JavaType>> genericInterfaces = context.createGenericInterfaces(this);\n+        if (genericInterfaces.isPresent()) {\n+            interfaces = interfaces.withGenericTypes(genericInterfaces.get());\n+        }\n+        completionProcess.markGenericInterfacesComplete();\n+    }\n+\n     void completeMembers(final ImportContext context) {\n         members = JavaClassMembers.create(this, context);\n         completionProcess.markMembersComplete();\n@@ -1342,7 +1358,7 @@ private Superclass(Optional<JavaType> type) {\n         }\n \n         Set<JavaClass> getAllInterfaces() {\n-            return rawType.isPresent() ? rawType.get().getAllInterfaces() : Collections.<JavaClass>emptySet();\n+            return rawType.isPresent() ? rawType.get().getAllRawInterfaces() : Collections.<JavaClass>emptySet();\n         }\n \n         Superclass withRawType(JavaClass newRawType) {\n@@ -1354,11 +1370,42 @@ Superclass withGenericType(JavaType newGenericType) {\n         }\n     }\n \n+    private static class Interfaces {\n+        static final Interfaces EMPTY = new Interfaces(Collections.<JavaType>emptySet());\n+\n+        private final Set<JavaClass> rawTypes;\n+        private final Set<JavaType> types;\n+\n+        private Interfaces(Set<JavaType> types) {\n+            this.rawTypes = FluentIterable.from(types).transform(toGuava(TO_ERASURE)).toSet();\n+            this.types = ImmutableSet.copyOf(types);\n+        }\n+\n+        Set<JavaClass> getRaw() {\n+            return rawTypes;\n+        }\n+\n+        Set<JavaType> get() {\n+            return types;\n+        }\n+\n+        // Set is covariant, so the cast is safe\n+        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+        Interfaces withRawTypes(Set<JavaClass> rawTypes) {\n+            return new Interfaces((Set) rawTypes);\n+        }\n+\n+        Interfaces withGenericTypes(Set<JavaType> genericTypes) {\n+            return new Interfaces(genericTypes);\n+        }\n+    }\n+\n     private static class CompletionProcess {\n         private boolean classHierarchyComplete = false;\n         private boolean enclosingClassComplete = false;\n         private boolean typeParametersComplete = false;\n         private boolean genericSuperclassComplete = false;\n+        private boolean genericInterfacesComplete = false;\n         private boolean membersComplete = false;\n         private boolean annotationsComplete = false;\n         private boolean dependenciesComplete = false;\n@@ -1371,6 +1418,7 @@ boolean hasFinished() {\n                     && enclosingClassComplete\n                     && typeParametersComplete\n                     && genericSuperclassComplete\n+                    && genericInterfacesComplete\n                     && membersComplete\n                     && annotationsComplete\n                     && dependenciesComplete;\n@@ -1392,6 +1440,10 @@ public void markGenericSuperclassComplete() {\n             this.genericSuperclassComplete = true;\n         }\n \n+        public void markGenericInterfacesComplete() {\n+            this.genericInterfacesComplete = true;\n+        }\n+\n         public void markMembersComplete() {\n             this.membersComplete = true;\n         }"
  },
  {
    "sha": "7630104a5a01935c764aa77c746e4b13f0d2e8b4",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassDependencies.java",
    "status": "modified",
    "additions": 20,
    "deletions": 1,
    "changes": 21,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassDependencies.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassDependencies.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassDependencies.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -25,6 +25,7 @@\n import com.tngtech.archunit.core.domain.JavaAnnotation.DefaultParameterVisitor;\n import com.tngtech.archunit.core.domain.properties.HasAnnotations;\n \n+import static com.google.common.base.Predicates.instanceOf;\n import static com.google.common.base.Suppliers.memoize;\n import static com.google.common.collect.Iterables.concat;\n import static java.util.Collections.emptySet;\n@@ -73,10 +74,11 @@\n \n     private Set<Dependency> inheritanceDependenciesFromSelf() {\n         ImmutableSet.Builder<Dependency> result = ImmutableSet.builder();\n-        for (JavaClass supertype : FluentIterable.from(javaClass.getInterfaces()).append(javaClass.getRawSuperclass().asSet())) {\n+        for (JavaClass supertype : FluentIterable.from(javaClass.getRawInterfaces()).append(javaClass.getRawSuperclass().asSet())) {\n             result.add(Dependency.fromInheritance(javaClass, supertype));\n         }\n         result.addAll(genericSuperclassTypeArgumentDependencies());\n+        result.addAll(genericInterfaceTypeArgumentDependencies());\n         return result.build();\n     }\n \n@@ -94,6 +96,23 @@\n         return result.build();\n     }\n \n+    private Set<Dependency> genericInterfaceTypeArgumentDependencies() {\n+        ImmutableSet.Builder<Dependency> result = ImmutableSet.builder();\n+        for (JavaParameterizedType genericInterface : getGenericInterfacesOf(javaClass)) {\n+            List<JavaType> actualTypeArguments = genericInterface.getActualTypeArguments();\n+            for (JavaClass interfaceTypeArgumentDependency : dependenciesOfTypes(actualTypeArguments)) {\n+                result.addAll(Dependency.tryCreateFromGenericInterfaceTypeArgument(javaClass, genericInterface, interfaceTypeArgumentDependency));\n+            }\n+        }\n+        return result.build();\n+    }\n+\n+    // the cast is safe since we are explicitly filtering instanceOf(..)\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    private static Iterable<JavaParameterizedType> getGenericInterfacesOf(JavaClass javaClass) {\n+        return (Iterable) FluentIterable.from(javaClass.getInterfaces()).filter(instanceOf(JavaParameterizedType.class));\n+    }\n+\n     private Set<Dependency> fieldDependenciesFromSelf() {\n         ImmutableSet.Builder<Dependency> result = ImmutableSet.builder();\n         for (JavaField field : javaClass.getFields()) {"
  },
  {
    "sha": "8c76134b50ba46ee080ff1567b93fd45bc71741e",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassMembers.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassMembers.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassMembers.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaClassMembers.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -69,7 +69,7 @@\n             @Override\n             public Set<JavaField> get() {\n                 ImmutableSet.Builder<JavaField> result = ImmutableSet.builder();\n-                for (JavaClass javaClass : concat(owner.getClassHierarchy(), owner.getAllInterfaces())) {\n+                for (JavaClass javaClass : concat(owner.getClassHierarchy(), owner.getAllRawInterfaces())) {\n                     result.addAll(javaClass.getFields());\n                 }\n                 return result.build();\n@@ -79,7 +79,7 @@\n             @Override\n             public Set<JavaMethod> get() {\n                 ImmutableSet.Builder<JavaMethod> result = ImmutableSet.builder();\n-                for (JavaClass javaClass : concat(owner.getClassHierarchy(), owner.getAllInterfaces())) {\n+                for (JavaClass javaClass : concat(owner.getClassHierarchy(), owner.getAllRawInterfaces())) {\n                     result.addAll(javaClass.getMethods());\n                 }\n                 return result.build();"
  },
  {
    "sha": "884f31da7f9ce9e94564c33017c419852956b655",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/domain/JavaStaticInitializer.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaStaticInitializer.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaStaticInitializer.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/domain/JavaStaticInitializer.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -24,6 +24,20 @@\n import static com.tngtech.archunit.PublicAPI.Usage.ACCESS;\n import static java.util.Collections.emptySet;\n \n+/**\n+ * Represents the static initialization block of a class, e.g. a block like\n+ * <br><br>\n+ * <pre><code>\n+ * class Example {\n+ *     private static final String someStaticField;\n+ *\n+ *     static {\n+ *         // this is the static initializer, it can for example initialize static fields\n+ *         someStaticField = readSomeConfig();\n+ *     }\n+ * }\n+ * </code></pre>\n+ */\n public class JavaStaticInitializer extends JavaCodeUnit {\n     @PublicAPI(usage = ACCESS)\n     public static final String STATIC_INITIALIZER_NAME = \"<clinit>\";"
  },
  {
    "sha": "e0776429f03633d6bb8913f7a7a48a2fe8c16412",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/importer/AccessRecord.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/AccessRecord.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/AccessRecord.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/importer/AccessRecord.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -461,7 +461,7 @@ public JavaClass next() {\n \n                 private Node(JavaClass child) {\n                     this.child = child;\n-                    for (JavaClass i : child.getInterfaces()) {\n+                    for (JavaClass i : child.getRawInterfaces()) {\n                         parents.add(new Node(i));\n                     }\n                 }"
  },
  {
    "sha": "7902c95ccc5967375107155a7047bfd42f540064",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileImportRecord.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileImportRecord.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileImportRecord.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileImportRecord.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -50,6 +50,7 @@\n     private final SetMultimap<String, String> interfaceNamesByOwner = HashMultimap.create();\n     private final Map<String, TypeParametersBuilder> typeParametersBuilderByOwner = new HashMap<>();\n     private final Map<String, JavaParameterizedTypeBuilder<JavaClass>> genericSuperclassBuilderByOwner = new HashMap<>();\n+    private final Map<String, Set<JavaParameterizedTypeBuilder<JavaClass>>> genericInterfaceBuildersByOwner = new HashMap<>();\n     private final SetMultimap<String, DomainBuilders.JavaFieldBuilder> fieldBuildersByOwner = HashMultimap.create();\n     private final SetMultimap<String, DomainBuilders.JavaMethodBuilder> methodBuildersByOwner = HashMultimap.create();\n     private final SetMultimap<String, DomainBuilders.JavaConstructorBuilder> constructorBuildersByOwner = HashMultimap.create();\n@@ -81,6 +82,10 @@ void addGenericSuperclass(String ownerName, JavaParameterizedTypeBuilder<JavaCla\n         genericSuperclassBuilderByOwner.put(ownerName, genericSuperclassBuilder);\n     }\n \n+    public void addGenericInterfaces(String ownerName, Set<JavaParameterizedTypeBuilder<JavaClass>> genericInterfaceBuilders) {\n+        genericInterfaceBuildersByOwner.put(ownerName, genericInterfaceBuilders);\n+    }\n+\n     void addField(String ownerName, DomainBuilders.JavaFieldBuilder fieldBuilder) {\n         fieldBuildersByOwner.put(ownerName, fieldBuilder);\n     }\n@@ -135,6 +140,10 @@ TypeParametersBuilder getTypeParameterBuildersFor(String ownerName) {\n         return Optional.fromNullable(genericSuperclassBuilderByOwner.get(owner.getName()));\n     }\n \n+    Optional<Set<JavaParameterizedTypeBuilder<JavaClass>>> getGenericInterfacesFor(JavaClass owner) {\n+        return Optional.fromNullable(genericInterfaceBuildersByOwner.get(owner.getName()));\n+    }\n+\n     Set<String> getMemberSignatureTypeNames() {\n         ImmutableSet.Builder<String> result = ImmutableSet.builder();\n         for (DomainBuilders.JavaFieldBuilder fieldBuilder : fieldBuildersByOwner.values()) {"
  },
  {
    "sha": "7338137ff540860ad09511d30ca6444f4d666f40",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileProcessor.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileProcessor.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileProcessor.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassFileProcessor.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -95,6 +95,11 @@ public void onGenericSuperclass(DomainBuilders.JavaParameterizedTypeBuilder<Java\n             importRecord.addGenericSuperclass(ownerName, genericSuperclassBuilder);\n         }\n \n+        @Override\n+        public void onGenericInterfaces(Set<DomainBuilders.JavaParameterizedTypeBuilder<JavaClass>> genericInterfaceBuilders) {\n+            importRecord.addGenericInterfaces(ownerName, genericInterfaceBuilders);\n+        }\n+\n         @Override\n         public void onDeclaredField(DomainBuilders.JavaFieldBuilder fieldBuilder) {\n             importRecord.addField(ownerName, fieldBuilder);"
  },
  {
    "sha": "37c12802a1b6504ffec3b46851cd8bc8786f81ff",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/importer/ClassGraphCreator.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassGraphCreator.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassGraphCreator.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/importer/ClassGraphCreator.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -57,6 +57,7 @@\n import static com.tngtech.archunit.core.domain.DomainObjectCreationContext.completeAnnotations;\n import static com.tngtech.archunit.core.domain.DomainObjectCreationContext.completeClassHierarchy;\n import static com.tngtech.archunit.core.domain.DomainObjectCreationContext.completeEnclosingClass;\n+import static com.tngtech.archunit.core.domain.DomainObjectCreationContext.completeGenericInterfaces;\n import static com.tngtech.archunit.core.domain.DomainObjectCreationContext.completeGenericSuperclass;\n import static com.tngtech.archunit.core.domain.DomainObjectCreationContext.completeMembers;\n import static com.tngtech.archunit.core.domain.DomainObjectCreationContext.completeTypeParameters;\n@@ -144,6 +145,7 @@ private void completeClasses() {\n             completeEnclosingClass(javaClass, this);\n             completeTypeParameters(javaClass, this);\n             completeGenericSuperclass(javaClass, this);\n+            completeGenericInterfaces(javaClass, this);\n             completeMembers(javaClass, this);\n             completeAnnotations(javaClass, this);\n         }\n@@ -247,6 +249,20 @@ B accessBuilderFrom(B builder, AccessRecord<T> record) {\n                 : Optional.<JavaType>absent();\n     }\n \n+    @Override\n+    public Optional<Set<JavaType>> createGenericInterfaces(JavaClass owner) {\n+        Optional<Set<JavaParameterizedTypeBuilder<JavaClass>>> genericInterfaceBuilders = importRecord.getGenericInterfacesFor(owner);\n+        if (!genericInterfaceBuilders.isPresent()) {\n+            return Optional.absent();\n+        }\n+\n+        ImmutableSet.Builder<JavaType> result = ImmutableSet.builder();\n+        for (JavaParameterizedTypeBuilder<JavaClass> builder : genericInterfaceBuilders.get()) {\n+            result.add(builder.build(owner, getTypeParametersInContextOf(owner), classes.byTypeName()));\n+        }\n+        return Optional.<Set<JavaType>>of(result.build());\n+    }\n+\n     private static Iterable<JavaTypeVariable<?>> getTypeParametersInContextOf(JavaClass javaClass) {\n         Set<JavaTypeVariable<?>> result = Sets.<JavaTypeVariable<?>>newHashSet(javaClass.getTypeParameters());\n         while (javaClass.getEnclosingClass().isPresent()) {"
  },
  {
    "sha": "0f6053d31b8158e34dcec6e704d653e3dcf01e72",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassProcessor.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassProcessor.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassProcessor.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassProcessor.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -454,6 +454,8 @@ public void setArrayResult(ValueBuilder valueBuilder) {\n \n         void onGenericSuperclass(DomainBuilders.JavaParameterizedTypeBuilder<JavaClass> genericSuperclassBuilder);\n \n+        void onGenericInterfaces(Set<DomainBuilders.JavaParameterizedTypeBuilder<JavaClass>> genericInterfaceBuilders);\n+\n         void onDeclaredField(DomainBuilders.JavaFieldBuilder fieldBuilder);\n \n         void onDeclaredConstructor(DomainBuilders.JavaConstructorBuilder constructorBuilder);"
  },
  {
    "sha": "95b79996ac1d1878aacc00956e94b8583f9ed1ab",
    "filename": "archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassSignatureImporter.java",
    "status": "modified",
    "additions": 35,
    "deletions": 1,
    "changes": 36,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassSignatureImporter.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassSignatureImporter.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/main/java/com/tngtech/archunit/core/importer/JavaClassSignatureImporter.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -16,7 +16,9 @@\n package com.tngtech.archunit.core.importer;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n import com.google.common.base.Function;\n import com.google.common.base.Functions;\n@@ -60,11 +62,14 @@ static void parseAsmTypeSignature(String signature, DeclarationHandler declarati\n         if (genericSuperclass.isPresent()) {\n             declarationHandler.onGenericSuperclass(genericSuperclass.get());\n         }\n+\n+        declarationHandler.onGenericInterfaces(signatureProcessor.getGenericInterfaces());\n     }\n \n     private static class SignatureProcessor extends SignatureVisitor {\n         private final BoundProcessor boundProcessor = new BoundProcessor();\n         private final GenericSuperclassProcessor superclassProcessor = new GenericSuperclassProcessor();\n+        private final GenericInterfacesProcessor interfacesProcessor = new GenericInterfacesProcessor();\n \n         SignatureProcessor() {\n             super(ASM_API_VERSION);\n@@ -74,10 +79,14 @@ static void parseAsmTypeSignature(String signature, DeclarationHandler declarati\n             return boundProcessor.typeParameterBuilders;\n         }\n \n-        public Optional<JavaParameterizedTypeBuilder<JavaClass>> getGenericSuperclass() {\n+        Optional<JavaParameterizedTypeBuilder<JavaClass>> getGenericSuperclass() {\n             return Optional.fromNullable(superclassProcessor.superclass);\n         }\n \n+        Set<JavaParameterizedTypeBuilder<JavaClass>> getGenericInterfaces() {\n+            return interfacesProcessor.interfaces;\n+        }\n+\n         @Override\n         public void visitFormalTypeParameter(String name) {\n             log.trace(\"Encountered type parameter {}\", name);\n@@ -89,6 +98,11 @@ public SignatureVisitor visitSuperclass() {\n             return superclassProcessor;\n         }\n \n+        @Override\n+        public SignatureVisitor visitInterface() {\n+            return interfacesProcessor;\n+        }\n+\n         @Override\n         public SignatureVisitor visitClassBound() {\n             return boundProcessor;\n@@ -163,6 +177,26 @@ public SignatureVisitor visitTypeArgument(char wildcard) {\n                 return TypeArgumentProcessor.create(wildcard, superclass);\n             }\n         }\n+\n+        private static class GenericInterfacesProcessor extends SignatureVisitor {\n+            private final Set<JavaParameterizedTypeBuilder<JavaClass>> interfaces = new HashSet<>();\n+            private JavaParameterizedTypeBuilder<JavaClass> currentInterface;\n+\n+            GenericInterfacesProcessor() {\n+                super(ASM_API_VERSION);\n+            }\n+\n+            @Override\n+            public void visitClassType(String internalObjectName) {\n+                currentInterface = new JavaParameterizedTypeBuilder<>(JavaClassDescriptorImporter.createFromAsmObjectTypeName(internalObjectName));\n+                interfaces.add(currentInterface);\n+            }\n+\n+            @Override\n+            public SignatureVisitor visitTypeArgument(char wildcard) {\n+                return TypeArgumentProcessor.create(wildcard, currentInterface);\n+            }\n+        }\n     }\n \n     private static class NewJavaTypeCreationProcess<OWNER extends HasDescription> implements JavaTypeCreationProcess<OWNER> {"
  },
  {
    "sha": "f12d3e520cd57c07809319e7025252716f709ad1",
    "filename": "archunit/src/test/java/com/tngtech/archunit/core/domain/DependencyTest.java",
    "status": "modified",
    "additions": 26,
    "deletions": 5,
    "changes": 31,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/domain/DependencyTest.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/domain/DependencyTest.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/test/java/com/tngtech/archunit/core/domain/DependencyTest.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -1,7 +1,6 @@\n package com.tngtech.archunit.core.domain;\n \n import java.io.IOException;\n-import java.io.Serializable;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.reflect.Field;\n@@ -279,19 +278,41 @@ public void Dependency_from_generic_superclass_type_arguments() {\n         class Base<A> {\n         }\n         @SuppressWarnings(\"unused\")\n-        class ClassWithTypeParameters extends Base<String> {\n+        class ClassWithGenericSuperclass extends Base<String> {\n         }\n \n-        JavaClass javaClass = importClassesWithContext(ClassWithTypeParameters.class, String.class, Serializable.class).get(ClassWithTypeParameters.class);\n+        JavaClass javaClass = importClassesWithContext(ClassWithGenericSuperclass.class, String.class).get(ClassWithGenericSuperclass.class);\n         JavaParameterizedType genericSuperClass = (JavaParameterizedType) javaClass.getSuperclass().get();\n \n         Dependency dependency = getOnlyElement(Dependency.tryCreateFromGenericSuperclassTypeArguments(javaClass, genericSuperClass, (JavaClass) genericSuperClass.getActualTypeArguments().get(0)));\n \n-        assertThatType(dependency.getOriginClass()).matches(ClassWithTypeParameters.class);\n+        assertThatType(dependency.getOriginClass()).matches(ClassWithGenericSuperclass.class);\n         assertThatType(dependency.getTargetClass()).matches(String.class);\n         assertThat(dependency.getDescription()).as(\"description\").contains(String.format(\n                 \"Class <%s> has generic superclass <%s> with type argument depending on <%s> in (%s.java:0)\",\n-                ClassWithTypeParameters.class.getName(), Base.class.getName(), String.class.getName(), getClass().getSimpleName()));\n+                ClassWithGenericSuperclass.class.getName(), Base.class.getName(), String.class.getName(), getClass().getSimpleName()));\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private interface InterfaceWithTypeParameter<T> {\n+    }\n+\n+    @Test\n+    public void Dependency_from_generic_interface_type_arguments() {\n+        @SuppressWarnings(\"unused\")\n+        class ClassWithGenericInterface implements InterfaceWithTypeParameter<String> {\n+        }\n+\n+        JavaClass javaClass = importClassesWithContext(ClassWithGenericInterface.class, InterfaceWithTypeParameter.class, String.class).get(ClassWithGenericInterface.class);\n+        JavaParameterizedType genericInterface = (JavaParameterizedType) getOnlyElement(javaClass.getInterfaces());\n+\n+        Dependency dependency = getOnlyElement(Dependency.tryCreateFromGenericInterfaceTypeArgument(javaClass, genericInterface, (JavaClass) genericInterface.getActualTypeArguments().get(0)));\n+\n+        assertThatType(dependency.getOriginClass()).matches(ClassWithGenericInterface.class);\n+        assertThatType(dependency.getTargetClass()).matches(String.class);\n+        assertThat(dependency.getDescription()).as(\"description\").contains(String.format(\n+                \"Class <%s> has generic interface <%s> with type argument depending on <%s> in (%s.java:0)\",\n+                ClassWithGenericInterface.class.getName(), InterfaceWithTypeParameter.class.getName(), String.class.getName(), getClass().getSimpleName()));\n     }\n \n     @Test"
  },
  {
    "sha": "50c0dc8f0b7b431c6a4d04409834077f6cbce1ce",
    "filename": "archunit/src/test/java/com/tngtech/archunit/core/domain/JavaClassTest.java",
    "status": "modified",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/domain/JavaClassTest.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/domain/JavaClassTest.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/test/java/com/tngtech/archunit/core/domain/JavaClassTest.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -524,6 +524,31 @@ public void direct_dependencies_from_self_by_inheritance_through_generic_supercl\n                 );\n     }\n \n+    @Test\n+    public void direct_dependencies_from_self_by_inheritance_through_generic_interface_parameters() {\n+        class Child<FIRST, SECOND> implements InterfaceWithTwoTypeParameters<\n+                Comparable<Child<FIRST, SECOND>>,\n+                Map<\n+                        Map.Entry<FIRST, Map.Entry<String, FIRST>>,\n+                        Map<? extends BufferedInputStream[][],\n+                                Map<? extends Serializable, List<List<? extends Set<? super Iterable<? super Map<FIRST, ? extends File>>>>>>>>> {\n+        }\n+\n+        JavaClass javaClass = importClassWithContext(Child.class);\n+\n+        assertThatDependencies(javaClass.getDirectDependenciesFromSelf())\n+                .contain(from(Child.class).to(InterfaceWithTwoTypeParameters.class).inLocation(getClass(), 0)\n+                        .withDescriptionContaining(\"implements\")\n+\n+                        .from(Child.class)\n+                        .withExpectedDescriptionTemplate(\"has generic interface <\" + InterfaceWithTwoTypeParameters.class.getName() + \"> with type argument depending on <#target>\")\n+                        .to(Comparable.class, Map.class, Map.Entry.class, String.class, BufferedInputStream[][].class, Serializable.class, List.class, Set.class, Iterable.class, File.class)\n+\n+                        .from(Child.class).to(BufferedInputStream.class).inLocation(getClass(), 0)\n+                        .withDescriptionContaining(\"depends on component type <%s>\", BufferedInputStream.class.getName())\n+                );\n+    }\n+\n     @Test\n     public void direct_dependencies_from_self_by_member_declarations() {\n         JavaClass javaClass = importClasses(AhavingMembersOfTypeB.class, B.class).get(AhavingMembersOfTypeB.class);\n@@ -769,6 +794,36 @@ public void direct_dependencies_to_self_by_inheritance_through_generic_superclas\n                 );\n     }\n \n+    @Test\n+    public void direct_dependencies_to_self_by_inheritance_through_generic_interface_parameters() {\n+        class FirstChild implements InterfaceWithTwoTypeParameters<\n+                Comparable<FirstChild>,\n+                Map<\n+                        Map.Entry<?, Map.Entry<String, ?>>,\n+                        Map<? extends BufferedInputStream[][],\n+                                Map<? extends Serializable, List<List<? extends Set<? super Iterable<? super Map<?, ? extends File>>>>>>>>> {\n+        }\n+        class SecondChild implements InterfaceWithTypeParameter<Map<?, ? super File>> {\n+        }\n+\n+        JavaClasses javaClasses = importClassesWithContext(FirstChild.class, SecondChild.class, BufferedInputStream.class, File.class);\n+\n+        assertThatDependencies(javaClasses.get(File.class).getDirectDependenciesToSelf())\n+                .contain(from(FirstChild.class).to(File.class).inLocation(getClass(), 0)\n+                        .withDescriptionContaining(\"Class <%s> has generic interface <%s> with type argument depending on <%s>\",\n+                                FirstChild.class.getName(), InterfaceWithTwoTypeParameters.class.getName(), File.class.getName())\n+\n+                        .from(SecondChild.class).to(File.class).inLocation(getClass(), 0)\n+                        .withDescriptionContaining(\"Class <%s> has generic interface <%s> with type argument depending on <%s>\",\n+                                SecondChild.class.getName(), InterfaceWithTypeParameter.class.getName(), File.class.getName())\n+                );\n+\n+        assertThatDependencies(javaClasses.get(BufferedInputStream.class).getDirectDependenciesToSelf())\n+                .contain(from(FirstChild.class).to(BufferedInputStream.class).inLocation(getClass(), 0)\n+                        .withDescriptionContaining(\"depends on component type <%s>\", BufferedInputStream.class.getName())\n+                );\n+    }\n+\n     @Test\n     public void direct_dependencies_to_self_by_member_declarations() {\n         JavaClass javaClass = importClassesWithContext(AhavingMembersOfTypeB.class, B.class).get(B.class);\n@@ -1583,6 +1638,14 @@ protected String stringMethod() {\n         }\n     }\n \n+    @SuppressWarnings(\"unused\")\n+    private interface InterfaceWithTypeParameter<T> {\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private interface InterfaceWithTwoTypeParameters<A, B> {\n+    }\n+\n     @Retention(RUNTIME)\n     @interface SomeAnnotation {\n     }"
  },
  {
    "sha": "3cd207d3a4df4bb2231938df14a1aa0927317fc3",
    "filename": "archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterGenericInterfacesTest.java",
    "status": "added",
    "additions": 545,
    "deletions": 0,
    "changes": 545,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterGenericInterfacesTest.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterGenericInterfacesTest.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterGenericInterfacesTest.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -0,0 +1,545 @@\n+package com.tngtech.archunit.core.importer;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+import java.lang.ref.Reference;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.tngtech.archunit.core.domain.JavaClass;\n+import com.tngtech.archunit.core.domain.JavaType;\n+import com.tngtech.archunit.core.importer.ClassFileImporterGenericInterfacesTest.Outer.SomeNestedInterface;\n+import com.tngtech.archunit.core.importer.ClassFileImporterGenericInterfacesTest.Outer.SomeNestedInterface.SomeDeeplyNestedInterface;\n+import com.tngtech.archunit.testutil.ArchConfigurationRule;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static com.tngtech.archunit.testutil.Assertions.assertThatType;\n+import static com.tngtech.archunit.testutil.Assertions.assertThatTypes;\n+import static com.tngtech.archunit.testutil.assertion.ExpectedConcreteType.ExpectedConcreteClass.concreteClass;\n+import static com.tngtech.archunit.testutil.assertion.ExpectedConcreteType.ExpectedConcreteParameterizedType.parameterizedType;\n+import static com.tngtech.archunit.testutil.assertion.ExpectedConcreteType.ExpectedConcreteTypeVariable.typeVariable;\n+import static com.tngtech.archunit.testutil.assertion.ExpectedConcreteType.ExpectedConcreteWildcardType.wildcardType;\n+import static com.tngtech.java.junit.dataprovider.DataProviders.testForEach;\n+\n+@RunWith(DataProviderRunner.class)\n+public class ClassFileImporterGenericInterfacesTest {\n+\n+    @Rule\n+    public final ArchConfigurationRule configurationRule = new ArchConfigurationRule().resolveAdditionalDependenciesFromClassPath(false);\n+\n+    @Test\n+    public void imports_non_generic_interface() {\n+        class Child implements SomeInterface {\n+        }\n+\n+        Set<JavaType> genericInterfaces = new ClassFileImporter().importClasses(Child.class, SomeInterface.class)\n+                .get(Child.class).getInterfaces();\n+\n+        assertThatTypes(genericInterfaces).as(\"generic interfaces\").matchExactly(SomeInterface.class);\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_one_type_argument() {\n+        class Child implements InterfaceWithSimpleTypeParameter<String> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter().importClasses(Child.class, InterfaceWithSimpleTypeParameter.class, String.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\")\n+                .hasErasure(InterfaceWithSimpleTypeParameter.class)\n+                .hasActualTypeArguments(String.class);\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_multiple_type_arguments() {\n+        @SuppressWarnings(\"unused\")\n+        class Child implements InterfaceWithThreeSimpleTypeParameters<String, Serializable, File> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, InterfaceWithThreeSimpleTypeParameters.class, String.class, Serializable.class, File.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\")\n+                .hasErasure(InterfaceWithThreeSimpleTypeParameters.class)\n+                .hasActualTypeArguments(String.class, Serializable.class, File.class);\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_single_actual_type_argument_parameterized_with_concrete_class() {\n+        class Child implements InterfaceWithSimpleTypeParameter<ClassParameterWithSingleTypeParameter<String>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, InterfaceWithSimpleTypeParameter.class, ClassParameterWithSingleTypeParameter.class, String.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withTypeArguments(String.class)\n+        );\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_multiple_actual_type_arguments_parameterized_with_concrete_classes() {\n+        class Child implements InterfaceWithThreeSimpleTypeParameters<\n+                ClassParameterWithSingleTypeParameter<File>,\n+                InterfaceWithSimpleTypeParameter<Serializable>,\n+                InterfaceWithSimpleTypeParameter<String>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(new ClassFileImporter()\n+                .importClasses(\n+                        Child.class, ClassParameterWithSingleTypeParameter.class, InterfaceWithThreeSimpleTypeParameters.class,\n+                        InterfaceWithSimpleTypeParameter.class, File.class, Serializable.class, String.class)\n+                .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withTypeArguments(File.class),\n+                parameterizedType(InterfaceWithSimpleTypeParameter.class)\n+                        .withTypeArguments(Serializable.class),\n+                parameterizedType(InterfaceWithSimpleTypeParameter.class)\n+                        .withTypeArguments(String.class)\n+        );\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_single_actual_type_argument_parameterized_with_unbound_wildcard() {\n+        class Child implements InterfaceWithSimpleTypeParameter<ClassParameterWithSingleTypeParameter<?>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, InterfaceWithSimpleTypeParameter.class, ClassParameterWithSingleTypeParameter.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameter()\n+        );\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_actual_type_arguments_parameterized_with_bounded_wildcards() {\n+        class Child implements InterfaceWithTwoSimpleTypeParameters<\n+                ClassParameterWithSingleTypeParameter<? extends String>,\n+                ClassParameterWithSingleTypeParameter<? super File>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, InterfaceWithTwoSimpleTypeParameters.class, ClassParameterWithSingleTypeParameter.class, String.class, File.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithUpperBound(String.class),\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithLowerBound(File.class)\n+        );\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_actual_type_arguments_with_multiple_wildcards_with_various_bounds() {\n+        class Child implements InterfaceWithTwoSimpleTypeParameters<\n+                ClassParameterWithSingleTypeParameter<Map<? extends Serializable, ? super File>>,\n+                ClassParameterWithSingleTypeParameter<Reference<? super String>>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(\n+                                Child.class, ClassParameterWithSingleTypeParameter.class,\n+                                Map.class, Serializable.class, File.class, Reference.class, String.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withTypeArguments(parameterizedType(Map.class)\n+                                .withWildcardTypeParameters(\n+                                        wildcardType().withUpperBound(Serializable.class),\n+                                        wildcardType().withLowerBound(File.class))),\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withTypeArguments(parameterizedType(Reference.class)\n+                                .withWildcardTypeParameterWithLowerBound(String.class))\n+        );\n+    }\n+\n+    @Test\n+    public void imports_generic_interface_with_actual_type_argument_parameterized_with_type_variable() {\n+        class Child<SUB> implements InterfaceWithSimpleTypeParameter<ClassParameterWithSingleTypeParameter<SUB>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, InterfaceWithSimpleTypeParameter.class, ClassParameterWithSingleTypeParameter.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withTypeArguments(typeVariable(\"SUB\"))\n+        );\n+    }\n+\n+    @Test\n+    public void references_type_variable_assigned_to_actual_type_argument_of_generic_interface() {\n+        class Child<SUB extends String> implements InterfaceWithSimpleTypeParameter<ClassParameterWithSingleTypeParameter<SUB>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, InterfaceWithSimpleTypeParameter.class, ClassParameterWithSingleTypeParameter.class, String.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withTypeArguments(typeVariable(\"SUB\").withUpperBounds(String.class))\n+        );\n+    }\n+\n+    @Test\n+    public void references_outer_type_variable_assigned_to_actual_type_argument_of_generic_interface_of_inner_class() {\n+        @SuppressWarnings(\"unused\")\n+        class OuterWithTypeParameter<OUTER extends String> {\n+            class SomeInner {\n+                class Child implements InterfaceWithSimpleTypeParameter<OUTER> {\n+                }\n+            }\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(\n+                                OuterWithTypeParameter.class,\n+                                OuterWithTypeParameter.SomeInner.class,\n+                                OuterWithTypeParameter.SomeInner.Child.class,\n+                                InterfaceWithSimpleTypeParameter.class,\n+                                String.class)\n+                        .get(OuterWithTypeParameter.SomeInner.Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                typeVariable(\"OUTER\").withUpperBounds(String.class)\n+        );\n+    }\n+\n+    @Test\n+    public void creates_new_stub_type_variables_for_type_variables_of_enclosing_classes_that_are_out_of_context_for_generic_interface_of_inner_class() {\n+        @SuppressWarnings(\"unused\")\n+        class OuterWithTypeParameter<OUTER extends String> {\n+            class SomeInner {\n+                class Child implements InterfaceWithSimpleTypeParameter<OUTER> {\n+                }\n+            }\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(OuterWithTypeParameter.SomeInner.Child.class, InterfaceWithSimpleTypeParameter.class, String.class)\n+                        .get(OuterWithTypeParameter.SomeInner.Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                typeVariable(\"OUTER\").withoutUpperBounds()\n+        );\n+    }\n+\n+    @Test\n+    public void imports_wildcards_of_generic_interface_bound_by_type_variables() {\n+        class Child<FIRST extends String, SECOND extends Serializable> implements InterfaceWithTwoSimpleTypeParameters<\n+                ClassParameterWithSingleTypeParameter<? extends FIRST>,\n+                ClassParameterWithSingleTypeParameter<? super SECOND>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, InterfaceWithTwoSimpleTypeParameters.class, ClassParameterWithSingleTypeParameter.class, String.class, Serializable.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithUpperBound(\n+                                typeVariable(\"FIRST\").withUpperBounds(String.class)),\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithLowerBound(\n+                                typeVariable(\"SECOND\").withUpperBounds(Serializable.class))\n+        );\n+    }\n+\n+    @Test\n+    public void imports_wildcards_of_generic_interface_bound_by_type_variables_of_enclosing_classes() {\n+        @SuppressWarnings(\"unused\")\n+        class OuterWithTypeParameter<OUTER_ONE extends String, OUTER_TWO extends Serializable> {\n+            class SomeInner {\n+                class Child implements InterfaceWithTwoSimpleTypeParameters<\n+                        ClassParameterWithSingleTypeParameter<? extends OUTER_ONE>,\n+                        ClassParameterWithSingleTypeParameter<? super OUTER_TWO>> {\n+                }\n+            }\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(\n+                                OuterWithTypeParameter.class,\n+                                OuterWithTypeParameter.SomeInner.class,\n+                                OuterWithTypeParameter.SomeInner.Child.class,\n+                                InterfaceWithTwoSimpleTypeParameters.class, ClassParameterWithSingleTypeParameter.class, String.class, Serializable.class)\n+                        .get(OuterWithTypeParameter.SomeInner.Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithUpperBound(\n+                                typeVariable(\"OUTER_ONE\").withUpperBounds(String.class)),\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithLowerBound(\n+                                typeVariable(\"OUTER_TWO\").withUpperBounds(Serializable.class))\n+        );\n+    }\n+\n+    @Test\n+    public void creates_new_stub_type_variables_for_wildcards_bound_by_type_variables_of_enclosing_classes_that_are_out_of_context() {\n+        @SuppressWarnings(\"unused\")\n+        class OuterWithTypeParameter<OUTER_ONE extends String, OUTER_TWO extends Serializable> {\n+            class SomeInner {\n+                class Child implements InterfaceWithTwoSimpleTypeParameters<\n+                        ClassParameterWithSingleTypeParameter<? extends OUTER_ONE>,\n+                        ClassParameterWithSingleTypeParameter<? super OUTER_TWO>> {\n+                }\n+            }\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(\n+                                OuterWithTypeParameter.SomeInner.Child.class,\n+                                ClassParameterWithSingleTypeParameter.class, String.class, Serializable.class)\n+                        .get(OuterWithTypeParameter.SomeInner.Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithUpperBound(\n+                                typeVariable(\"OUTER_ONE\").withoutUpperBounds()),\n+                parameterizedType(ClassParameterWithSingleTypeParameter.class)\n+                        .withWildcardTypeParameterWithLowerBound(\n+                                typeVariable(\"OUTER_TWO\").withoutUpperBounds())\n+        );\n+    }\n+\n+    private static class Data_of_imports_complex_type_with_multiple_nested_actual_type_arguments_of_generic_interface_with_self_referencing_type_definitions {\n+        static class ClassChild<FIRST extends String & Serializable, SECOND extends Serializable & Cloneable> implements InterfaceWithThreeSimpleTypeParameters<\n+                // assigned to InterfaceWithThreeSimpleTypeParameters<A,_,_>\n+                List<? extends FIRST>,\n+                // assigned to InterfaceWithThreeSimpleTypeParameters<_,B,_>\n+                Map<\n+                        Map.Entry<FIRST, Map.Entry<String, SECOND>>,\n+                        Map<? extends String,\n+                                Map<? extends Serializable, List<List<? extends Set<? super Iterable<? super Map<SECOND, ?>>>>>>>>,\n+                // assigned to InterfaceWithThreeSimpleTypeParameters<_,_,C>\n+                Comparable<ClassChild<FIRST, SECOND>>> {\n+        }\n+\n+        interface InterfaceChild<FIRST extends String & Serializable, SECOND extends Serializable & Cloneable> extends InterfaceWithThreeSimpleTypeParameters<\n+                // assigned to InterfaceWithThreeSimpleTypeParameters<A,_,_>\n+                List<? extends FIRST>,\n+                // assigned to InterfaceWithThreeSimpleTypeParameters<_,B,_>\n+                Map<\n+                        Map.Entry<FIRST, Map.Entry<String, SECOND>>,\n+                        Map<? extends String,\n+                                Map<? extends Serializable, List<List<? extends Set<? super Iterable<? super Map<SECOND, ?>>>>>>>>,\n+                // assigned to InterfaceWithThreeSimpleTypeParameters<_,_,C>\n+                Comparable<InterfaceChild<FIRST, SECOND>>> {\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] data_of_imports_complex_type_with_multiple_nested_actual_type_arguments_of_generic_interface_with_self_referencing_type_definitions() {\n+        return testForEach(\n+                Data_of_imports_complex_type_with_multiple_nested_actual_type_arguments_of_generic_interface_with_self_referencing_type_definitions.ClassChild.class,\n+                Data_of_imports_complex_type_with_multiple_nested_actual_type_arguments_of_generic_interface_with_self_referencing_type_definitions.InterfaceChild.class\n+        );\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"data_of_imports_complex_type_with_multiple_nested_actual_type_arguments_of_generic_interface_with_self_referencing_type_definitions\")\n+    public void imports_complex_type_with_multiple_nested_actual_type_arguments_of_generic_interface_with_self_referencing_type_definitions(Class<?> testInput) {\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(testInput, String.class, Serializable.class, Cloneable.class,\n+                                List.class, Map.class, Map.Entry.class, Set.class, Iterable.class, Comparable.class)\n+                        .get(testInput).getInterfaces());\n+\n+        // @formatter:off\n+        assertThatType(genericInterface).as(\"generic interface\").hasActualTypeArguments(\n+            // assigned to InterfaceWithThreeSimpleTypeParameters<A,_,_>\n+            parameterizedType(List.class)\n+                .withWildcardTypeParameterWithUpperBound(\n+                    typeVariable(\"FIRST\").withUpperBounds(String.class, Serializable.class)),\n+            // assigned to InterfaceWithThreeSimpleTypeParameters<_,B,_>\n+            parameterizedType(Map.class).withTypeArguments(\n+                parameterizedType(Map.Entry.class).withTypeArguments(\n+                    typeVariable(\"FIRST\").withUpperBounds(String.class, Serializable.class),\n+                    parameterizedType(Map.Entry.class).withTypeArguments(\n+                        concreteClass(String.class),\n+                        typeVariable(\"SECOND\").withUpperBounds(Serializable.class, Cloneable.class))),\n+                parameterizedType(Map.class).withTypeArguments(\n+                    wildcardType().withUpperBound(String.class),\n+                    parameterizedType(Map.class).withTypeArguments(\n+                        wildcardType().withUpperBound(Serializable.class),\n+                        parameterizedType(List.class).withTypeArguments(\n+                            parameterizedType(List.class).withTypeArguments(\n+                                wildcardType().withUpperBound(\n+                                    parameterizedType(Set.class).withTypeArguments(\n+                                        wildcardType().withLowerBound(\n+                                            parameterizedType(Iterable.class).withTypeArguments(\n+                                                wildcardType().withLowerBound(\n+                                                    parameterizedType(Map.class).withTypeArguments(\n+                                                        typeVariable(\"SECOND\").withUpperBounds(Serializable.class, Cloneable.class),\n+                                                        wildcardType()))))))))))),\n+            // assigned to InterfaceWithThreeSimpleTypeParameters<_,_,C>\n+            parameterizedType(Comparable.class).withTypeArguments(\n+                parameterizedType(testInput).withTypeArguments(\n+                    typeVariable(\"FIRST\").withUpperBounds(String.class, Serializable.class),\n+                    typeVariable(\"SECOND\").withUpperBounds(Serializable.class, Cloneable.class))));\n+        // @formatter:on\n+    }\n+\n+    private static class Data_of_imports_multiple_generic_interfaces {\n+        @SuppressWarnings(\"unused\")\n+        static class ClassChild<T> implements\n+                InterfaceWithSimpleTypeParameter<Path>,\n+                InterfaceWithTwoSimpleTypeParameters<List<? extends T>, Map<? super T, String>>,\n+                InterfaceWithThreeSimpleTypeParameters<String, Serializable, File> {\n+        }\n+\n+        interface InterfaceChild<T> extends\n+                InterfaceWithSimpleTypeParameter<Path>,\n+                InterfaceWithTwoSimpleTypeParameters<List<? extends T>, Map<? super T, String>>,\n+                InterfaceWithThreeSimpleTypeParameters<String, Serializable, File> {\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] data_of_imports_multiple_generic_interfaces() {\n+        return testForEach(\n+                Data_of_imports_multiple_generic_interfaces.ClassChild.class,\n+                Data_of_imports_multiple_generic_interfaces.InterfaceChild.class);\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"data_of_imports_multiple_generic_interfaces\")\n+    public void imports_multiple_generic_interfaces(Class<?> testInput) {\n+        JavaClass child = new ClassFileImporter()\n+                .importClasses(testInput,\n+                        InterfaceWithSimpleTypeParameter.class, InterfaceWithTwoSimpleTypeParameters.class, InterfaceWithThreeSimpleTypeParameters.class,\n+                        Path.class, List.class, Map.class, String.class, Serializable.class, File.class)\n+                .get(testInput);\n+\n+        assertThatType(getGenericInterface(child, InterfaceWithSimpleTypeParameter.class)).as(\"generic interface\")\n+                .hasActualTypeArguments(Path.class);\n+\n+        assertThatType(getGenericInterface(child, InterfaceWithTwoSimpleTypeParameters.class)).as(\"generic interface\")\n+                .hasActualTypeArguments(\n+                        parameterizedType(List.class).withTypeArguments(\n+                                wildcardType().withUpperBound(typeVariable(\"T\"))),\n+                        parameterizedType(Map.class).withTypeArguments(\n+                                wildcardType().withLowerBound(typeVariable(\"T\")),\n+                                concreteClass(String.class)));\n+\n+        assertThatType(getGenericInterface(child, InterfaceWithThreeSimpleTypeParameters.class)).as(\"generic interface\")\n+                .hasActualTypeArguments(String.class, Serializable.class, File.class);\n+    }\n+\n+    @Test\n+    public void imports_generic_superclass_and_multiple_generic_interfaces_in_combination() {\n+        @SuppressWarnings(\"unused\")\n+        class BaseClass<X> {\n+        }\n+        @SuppressWarnings(\"unused\")\n+        class Child<T> extends BaseClass<File>\n+                implements InterfaceWithSimpleTypeParameter<Path>, InterfaceWithTwoSimpleTypeParameters<T, String> {\n+        }\n+\n+        JavaClass child = new ClassFileImporter()\n+                .importClasses(Child.class,\n+                        InterfaceWithSimpleTypeParameter.class, InterfaceWithTwoSimpleTypeParameters.class, InterfaceWithThreeSimpleTypeParameters.class,\n+                        Path.class, List.class, Map.class, String.class, Serializable.class, File.class)\n+                .get(Child.class);\n+\n+        assertThatType(child.getSuperclass().get())\n+                .hasErasure(BaseClass.class)\n+                .hasActualTypeArguments(File.class);\n+\n+        assertThatType(getGenericInterface(child, InterfaceWithSimpleTypeParameter.class)).as(\"generic interface\")\n+                .hasActualTypeArguments(Path.class);\n+\n+        assertThatType(getGenericInterface(child, InterfaceWithTwoSimpleTypeParameters.class)).as(\"generic interface\")\n+                .hasActualTypeArguments(typeVariable(\"T\"), concreteClass(String.class));\n+    }\n+\n+    @Test\n+    public void imports_nested_generic_interfaces() {\n+        @SuppressWarnings(\"unused\")\n+        class Child<T> implements\n+                SomeDeeplyNestedInterface<File, SomeNestedInterface<Path, Path>> {\n+        }\n+\n+        JavaType genericInterface = getOnlyElement(\n+                new ClassFileImporter()\n+                        .importClasses(Child.class, SomeDeeplyNestedInterface.class, SomeNestedInterface.class, File.class, Path.class)\n+                        .get(Child.class).getInterfaces());\n+\n+        assertThatType(genericInterface).as(\"generic interface\")\n+                .hasErasure(SomeDeeplyNestedInterface.class)\n+                .hasActualTypeArguments(\n+                        concreteClass(File.class),\n+                        parameterizedType(SomeNestedInterface.class).withTypeArguments(Path.class, Path.class));\n+    }\n+\n+    private JavaType getGenericInterface(JavaClass javaClass, Class<?> rawType) {\n+        for (JavaType anInterface : javaClass.getInterfaces()) {\n+            if (anInterface.toErasure().isEquivalentTo(rawType)) {\n+                return anInterface;\n+            }\n+        }\n+        throw new AssertionError(String.format(\"Class %s has no interface of raw type %s\", javaClass.getName(), rawType.getName()));\n+    }\n+\n+    private interface SomeInterface {\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private interface InterfaceWithSimpleTypeParameter<T> {\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private interface InterfaceWithTwoSimpleTypeParameters<A, B> {\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private interface InterfaceWithThreeSimpleTypeParameters<A, B, C> {\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    static class Outer {\n+        interface SomeNestedInterface<A, B> {\n+            interface SomeDeeplyNestedInterface<C, D> extends SomeNestedInterface<C, String> {\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private static class ClassParameterWithSingleTypeParameter<T> {\n+    }\n+}"
  },
  {
    "sha": "251ebcf65f0d8502a0d4e3d4fdde2c39b7a4efce",
    "filename": "archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 16,
    "changes": 32,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterTest.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterTest.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/test/java/com/tngtech/archunit/core/importer/ClassFileImporterTest.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -421,15 +421,15 @@ public void creates_relations_between_classes_and_interfaces() {\n         JavaClass someCollection = classes.get(SomeCollection.class);\n         JavaClass collectionInterface = classes.get(CollectionInterface.class);\n \n-        assertThat(baseClass.getInterfaces()).containsOnly(otherInterface);\n-        assertThat(baseClass.getAllInterfaces()).containsOnly(otherInterface, grandParentInterface);\n-        assertThat(subclass.getInterfaces()).containsOnly(subinterface);\n-        assertThat(subclass.getAllInterfaces()).containsOnly(\n+        assertThat(baseClass.getRawInterfaces()).containsOnly(otherInterface);\n+        assertThat(baseClass.getAllRawInterfaces()).containsOnly(otherInterface, grandParentInterface);\n+        assertThat(subclass.getRawInterfaces()).containsOnly(subinterface);\n+        assertThat(subclass.getAllRawInterfaces()).containsOnly(\n                 subinterface, otherInterface, parentInterface, grandParentInterface);\n-        assertThat(otherSubclass.getInterfaces()).containsOnly(parentInterface);\n-        assertThat(otherSubclass.getAllInterfaces()).containsOnly(parentInterface, grandParentInterface, otherInterface);\n-        assertThat(someCollection.getInterfaces()).containsOnly(collectionInterface, otherInterface, subinterface);\n-        assertThat(someCollection.getAllInterfaces()).extractingResultOf(\"reflect\").containsOnly(\n+        assertThat(otherSubclass.getRawInterfaces()).containsOnly(parentInterface);\n+        assertThat(otherSubclass.getAllRawInterfaces()).containsOnly(parentInterface, grandParentInterface, otherInterface);\n+        assertThat(someCollection.getRawInterfaces()).containsOnly(collectionInterface, otherInterface, subinterface);\n+        assertThat(someCollection.getAllRawInterfaces()).extractingResultOf(\"reflect\").containsOnly(\n                 CollectionInterface.class, OtherInterface.class, Subinterface.class, ParentInterface.class,\n                 GrandParentInterface.class, Collection.class, Iterable.class);\n     }\n@@ -442,12 +442,12 @@ public void creates_relations_between_interfaces_and_interfaces() {\n         JavaClass grandParentInterface = classes.get(GrandParentInterface.class);\n         JavaClass collectionInterface = classes.get(CollectionInterface.class);\n \n-        assertThat(grandParentInterface.getAllInterfaces()).isEmpty();\n-        assertThat(parentInterface.getInterfaces()).containsOnly(grandParentInterface);\n-        assertThat(parentInterface.getAllInterfaces()).containsOnly(grandParentInterface);\n-        assertThat(subinterface.getInterfaces()).containsOnly(parentInterface);\n-        assertThat(subinterface.getAllInterfaces()).containsOnly(parentInterface, grandParentInterface);\n-        assertThat(collectionInterface.getInterfaces()).extractingResultOf(\"reflect\").containsOnly(Collection.class);\n+        assertThat(grandParentInterface.getAllRawInterfaces()).isEmpty();\n+        assertThat(parentInterface.getRawInterfaces()).containsOnly(grandParentInterface);\n+        assertThat(parentInterface.getAllRawInterfaces()).containsOnly(grandParentInterface);\n+        assertThat(subinterface.getRawInterfaces()).containsOnly(parentInterface);\n+        assertThat(subinterface.getAllRawInterfaces()).containsOnly(parentInterface, grandParentInterface);\n+        assertThat(collectionInterface.getRawInterfaces()).extractingResultOf(\"reflect\").containsOnly(Collection.class);\n     }\n \n     @Test\n@@ -474,7 +474,7 @@ public void creates_relations_between_interfaces_and_subclasses() {\n         assertThat(parentInterface.getSubclasses()).containsOnly(subinterface, otherSubclass);\n         assertThat(parentInterface.getAllSubclasses()).containsOnly(\n                 subinterface, subclass, subSubclass, subSubSubclass, subSubSubSubclass, someCollection, otherSubclass);\n-        JavaClass collection = getOnlyElement(collectionInterface.getInterfaces());\n+        JavaClass collection = getOnlyElement(collectionInterface.getRawInterfaces());\n         assertThat(collection.getAllSubclasses()).containsOnly(collectionInterface, someCollection);\n     }\n \n@@ -490,7 +490,7 @@ public void creates_superclass_and_interface_relations_missing_from_context() {\n                         BaseClass.class.getName(),\n                         Object.class.getName());\n \n-        assertThat(javaClass.getAllInterfaces()).extracting(\"name\")\n+        assertThat(javaClass.getAllRawInterfaces()).extracting(\"name\")\n                 .containsOnly(\n                         Subinterface.class.getName(),\n                         YetAnotherInterface.class.getName(),"
  },
  {
    "sha": "96f5968cbcfff96f14e95de972f78c67eefe858a",
    "filename": "archunit/src/test/java/com/tngtech/archunit/core/importer/ImportTestUtils.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/importer/ImportTestUtils.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/core/importer/ImportTestUtils.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/test/java/com/tngtech/archunit/core/importer/ImportTestUtils.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -342,6 +342,11 @@ private JavaClass importNew(Class<?> owner) {\n             return Optional.absent();\n         }\n \n+        @Override\n+        public Optional<Set<JavaType>> createGenericInterfaces(JavaClass owner) {\n+            return Optional.absent();\n+        }\n+\n         @Override\n         public Set<JavaClass> createInterfaces(JavaClass owner) {\n             return Collections.emptySet();"
  },
  {
    "sha": "2479d598fd9fa915c17de5336f97822dd6ff29f6",
    "filename": "archunit/src/test/java/com/tngtech/archunit/lang/syntax/elements/ClassesShouldEvaluator.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/lang/syntax/elements/ClassesShouldEvaluator.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/lang/syntax/elements/ClassesShouldEvaluator.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/test/java/com/tngtech/archunit/lang/syntax/elements/ClassesShouldEvaluator.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -18,11 +18,11 @@\n import static java.util.regex.Pattern.quote;\n \n class ClassesShouldEvaluator {\n-    private static String OPTIONAL_ARGS_REGEX = \"(?:\\\\([^)]*\\\\))?\";\n-    private static String METHOD_OR_FIELD_REGEX = \"\\\\.[\\\\w<>]+\" + OPTIONAL_ARGS_REGEX;\n-    private static String MEMBER_REFERENCE_REGEX = \"<(.*)\" + METHOD_OR_FIELD_REGEX + \">\";\n-    private static String SAME_CLASS_BACK_REFERENCE_REGEX = \"<\\\\1\" + METHOD_OR_FIELD_REGEX + \">\";\n-    private static String SELF_REFERENCE_REGEX = MEMBER_REFERENCE_REGEX + \".*\" + SAME_CLASS_BACK_REFERENCE_REGEX;\n+    private static final String OPTIONAL_ARGS_REGEX = \"(?:\\\\([^)]*\\\\))?\";\n+    private static final String METHOD_OR_FIELD_REGEX = \"\\\\.[\\\\w<>]+\" + OPTIONAL_ARGS_REGEX;\n+    private static final String MEMBER_REFERENCE_REGEX = \"<(.*)\" + METHOD_OR_FIELD_REGEX + \">\";\n+    private static final String SAME_CLASS_BACK_REFERENCE_REGEX = \"<\\\\1\" + METHOD_OR_FIELD_REGEX + \">\";\n+    private static final String SELF_REFERENCE_REGEX = MEMBER_REFERENCE_REGEX + \".*\" + SAME_CLASS_BACK_REFERENCE_REGEX;\n \n     private final ArchRule rule;\n     private final ClassInReportLineMatcher reportLineMatcher;"
  },
  {
    "sha": "bca6d7a1583ab7706a6734459020bce19e6fbbe5",
    "filename": "archunit/src/test/java/com/tngtech/archunit/testutil/assertion/JavaClassAssertion.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/TNG/ArchUnit/blob/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/testutil/assertion/JavaClassAssertion.java",
    "raw_url": "https://github.com/TNG/ArchUnit/raw/70898373b40ede845d8cde0cc0ccf5434b15d091/archunit/src/test/java/com/tngtech/archunit/testutil/assertion/JavaClassAssertion.java",
    "contents_url": "https://api.github.com/repos/TNG/ArchUnit/contents/archunit/src/test/java/com/tngtech/archunit/testutil/assertion/JavaClassAssertion.java?ref=70898373b40ede845d8cde0cc0ccf5434b15d091",
    "patch": "@@ -53,17 +53,17 @@ public JavaClassAssertion hasRawSuperclassMatching(Class<?> expectedSuperclass)\n     }\n \n     public JavaClassAssertion hasNoInterfaces() {\n-        assertThat(actual.getInterfaces()).as(describeAssertion(\"interfaces\")).isEmpty();\n+        assertThat(actual.getRawInterfaces()).as(describeAssertion(\"interfaces\")).isEmpty();\n         return this;\n     }\n \n     public JavaClassAssertion hasInterfacesMatchingInAnyOrder(Class<?>... expectedInterfaces) {\n-        assertThatTypes(actual.getInterfaces()).as(describeAssertion(\"interfaces\")).matchInAnyOrder(expectedInterfaces);\n+        assertThatTypes(actual.getRawInterfaces()).as(describeAssertion(\"interfaces\")).matchInAnyOrder(expectedInterfaces);\n         return this;\n     }\n \n     public JavaClassAssertion hasAllInterfacesMatchingInAnyOrder(Class<?>... expectedAllInterfaces) {\n-        assertThatTypes(actual.getAllInterfaces()).as(describeAssertion(\"all interfaces\")).matchInAnyOrder(expectedAllInterfaces);\n+        assertThatTypes(actual.getAllRawInterfaces()).as(describeAssertion(\"all interfaces\")).matchInAnyOrder(expectedAllInterfaces);\n         return this;\n     }\n "
  }
]
