[
  {
    "sha": "986231140acd5b3c580e63ea80a03d534ade5dc1",
    "filename": "MatchAndPlan/MatchAndPlan.iml",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/MatchAndPlan.iml",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/MatchAndPlan.iml",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/MatchAndPlan.iml?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<module type=\"JAVA_MODULE\" version=\"4\">\n+  <component name=\"FacetManager\">\n+    <facet type=\"web\" name=\"Web\">\n+      <configuration>\n+        <descriptors>\n+          <deploymentDescriptor name=\"web.xml\" url=\"file://$MODULE_DIR$/web/WEB-INF/web.xml\" />\n+        </descriptors>\n+        <webroots>\n+          <root url=\"file://$MODULE_DIR$/web\" relative=\"/\" />\n+        </webroots>\n+      </configuration>\n+    </facet>\n+  </component>\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n+    <exclude-output />\n+    <content url=\"file://$MODULE_DIR$\">\n+      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n+    </content>\n+    <orderEntry type=\"jdk\" jdkName=\"9\" jdkType=\"JavaSDK\" />\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n+    <orderEntry type=\"library\" scope=\"PROVIDED\" name=\"Tomcat 9.0.30\" level=\"application_server_libraries\" />\n+    <orderEntry type=\"module-library\">\n+      <library name=\"commons-beanutils-1.8.0\">\n+        <CLASSES>\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/commons-beanutils-1.8.0.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/commons-dbutils-1.3.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/commons-logging-1.1.1.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/druid-1.1.9.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/gson-2.2.4.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/hamcrest-core-1.3.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/junit-4.12.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/kaptcha-2.3.2.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/mysql-connector-java-5.1.7-bin.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/taglibs-standard-impl-1.2.1.jar!/\" />\n+          <root url=\"jar://$MODULE_DIR$/web/WEB-INF/lib/taglibs-standard-spec-1.2.1.jar!/\" />\n+        </CLASSES>\n+        <JAVADOC />\n+        <SOURCES />\n+      </library>\n+    </orderEntry>\n+  </component>\n+</module>\n\\ No newline at end of file"
  },
  {
    "sha": "8d92788345f51513cc0edd04d1e89470affd9f42",
    "filename": "MatchAndPlan/src/jdbc.properties",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/jdbc.properties",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/jdbc.properties",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/jdbc.properties?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,6 @@\n+username=root\n+password=123123\n+url=jdbc:mysql://localhost:3306/test\n+driverClassName=com.mysql.jdbc.Driver\n+initialSize=5\n+maxActive=10\n\\ No newline at end of file"
  },
  {
    "sha": "5ce3f740b8052a54e2a949f237e24b048826653c",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Dao/BaseDao.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Dao/BaseDao.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Dao/BaseDao.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Dao/BaseDao.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,91 @@\n+package transferCenterRoutePlanning.Dao;\n+\n+\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.apache.commons.dbutils.handlers.BeanHandler;\n+import org.apache.commons.dbutils.handlers.BeanListHandler;\n+import org.apache.commons.dbutils.handlers.ScalarHandler;\n+import transferCenterRoutePlanning.Util.JdbcUtils;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+public abstract class BaseDao {\n+    //使用dbutils操作数据库   执行CURD\n+    private QueryRunner queryRunner = new QueryRunner();\n+\n+    //执行DML DDL等语句\n+    public int update(String sql,Object ...args)\n+    {\n+        Connection connection =JdbcUtils.getConnection();\n+        try {\n+            return queryRunner.update(connection,sql,args);\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+        //返回-1表示失败\n+        return -1;\n+    }\n+\n+\n+    /**\n+     * 查询返回一个 javaBean 的 sql 语句\n+     * @param type 返回的对象类型\n+     * @param sql  执行的 sql 语句\n+     * @param args sql 对应的参数值\n+     * @param <T>  返回的类型的泛型\n+     * @return\n+     */\n+    public <T> T queryForOne(Class<T> type,String sql,Object ...args)\n+    {\n+        Connection conn = JdbcUtils.getConnection();\n+        try {\n+            return queryRunner.query(conn,sql,new BeanHandler<T>(type),args);\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        } finally {\n+            JdbcUtils.close(conn);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * 查询返回多个 javaBean 的 sql 语句\n+     * @param type 返回的对象类型\n+     * @param sql 执行的 sql 语句\n+     * @param args sql 对应的参数值\n+     * @param <T> 返回的类型的泛型\n+     * @return\n+      */\n+    public <T> List<T> queryForList(Class<T> type, String sql, Object... args) {\n+        Connection con = JdbcUtils.getConnection();\n+        try {\n+            return queryRunner.query(con, sql, new BeanListHandler<T>(type), args);\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        } finally {\n+            JdbcUtils.close(con);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * 执行返回一行一列的 sql 语句\n+     * @param sql 执行的 sql 语句\n+     * @param args sql 对应的参数值\n+     * @return\n+     */\n+    public Object queryForSingleValue(String sql, Object... args){\n+        Connection conn = JdbcUtils.getConnection();\n+        try {\n+            return queryRunner.query(conn, sql, new ScalarHandler(), args);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            JdbcUtils.close(conn);\n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "8010c73f41675e4ac3286820be7d2bcc8733f1df",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Dao/Impl/TransportCenterImpl.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Dao/Impl/TransportCenterImpl.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Dao/Impl/TransportCenterImpl.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Dao/Impl/TransportCenterImpl.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,23 @@\n+package transferCenterRoutePlanning.Dao.Impl;\n+\n+import transferCenterRoutePlanning.Dao.BaseDao;\n+import transferCenterRoutePlanning.Dao.TransportCenterDao;\n+import transferCenterRoutePlanning.Util.TransportCenter;\n+\n+import java.util.List;\n+\n+public class TransportCenterImpl extends BaseDao implements TransportCenterDao {\n+    @Override\n+    public List<TransportCenter> queryTransportCenter() {\n+        String sql = \"select  id  ,  name  ,  city  ,  max_cargo_count  ,  address  ,  latitude  ,  longitude   from transportation_center\";\n+        return queryForList(TransportCenter.class, sql);\n+    }\n+\n+    @Override\n+    public int queryMaxCargoByName(String name) {\n+        String sql = \"select  max_cargo_count from transportation_center where name = ?\";\n+        Number number = (Number) queryForSingleValue(sql,name);\n+\n+        return number.intValue();\n+    }\n+}"
  },
  {
    "sha": "3bc8ec8ca0db1aa958bd2138c53033b7c71f35eb",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Dao/TransportCenterDao.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Dao/TransportCenterDao.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Dao/TransportCenterDao.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Dao/TransportCenterDao.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,10 @@\n+package transferCenterRoutePlanning.Dao;\n+\n+import transferCenterRoutePlanning.Util.TransportCenter;\n+\n+import java.util.List;\n+\n+public interface TransportCenterDao {\n+    public List<TransportCenter> queryTransportCenter();\n+    public int queryMaxCargoByName(String name);\n+}"
  },
  {
    "sha": "8bc983282e20912e5675824177a8b1d2339663db",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/Arith.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/Arith.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/Arith.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/Arith.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,93 @@\n+package transferCenterRoutePlanning.Util;\n+import java.math.BigDecimal;\n+\n+/**\n+ * 由于Java的简单类型不能够精确的对浮点数进行运算，这个工具类提供精\n+ * 确的浮点数运算，包括加减乘除和四舍五入。\n+ */\n+public class Arith{\n+    //默认除法运算精度\n+    private static final int DEF_DIV_SCALE = 10;\n+    //这个类不能实例化\n+    private Arith(){\n+    }\n+\n+    /**\n+     * 提供精确的加法运算。\n+     * @param v1 被加数\n+     * @param v2 加数\n+     * @return 两个参数的和\n+     */\n+    public static double add(double v1,double v2){\n+        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n+        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n+        return b1.add(b2).doubleValue();\n+    }\n+    /**\n+     * 提供精确的减法运算。\n+     * @param v1 被减数\n+     * @param v2 减数\n+     * @return 两个参数的差\n+     */\n+    public static double sub(double v1,double v2){\n+        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n+        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n+        return b1.subtract(b2).doubleValue();\n+    }\n+    /**\n+     * 提供精确的乘法运算。\n+     * @param v1 被乘数\n+     * @param v2 乘数\n+     * @return 两个参数的积\n+     */\n+    public static double mul(double v1,double v2){\n+        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n+        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n+        return b1.multiply(b2).doubleValue();\n+    }\n+\n+    /**\n+     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到\n+     * 小数点以后10位，以后的数字四舍五入。\n+     * @param v1 被除数\n+     * @param v2 除数\n+     * @return 两个参数的商\n+     */\n+    public static double div(double v1,double v2){\n+        return div(v1,v2,DEF_DIV_SCALE);\n+    }\n+\n+    /**\n+     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指\n+     * 定精度，以后的数字四舍五入。\n+     * @param v1 被除数\n+     * @param v2 除数\n+     * @param scale 表示表示需要精确到小数点以后几位。\n+     * @return 两个参数的商\n+     */\n+    public static double div(double v1,double v2,int scale){\n+        if(scale<0){\n+            throw new IllegalArgumentException(\n+                    \"The scale must be a positive integer or zero\");\n+        }\n+        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n+        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n+        return b1.divide(b2,scale,BigDecimal.ROUND_HALF_UP).doubleValue();\n+    }\n+\n+    /**\n+     * 提供精确的小数位四舍五入处理。\n+     * @param v 需要四舍五入的数字\n+     * @param scale 小数点后保留几位\n+     * @return 四舍五入后的结果\n+     */\n+    public static double round(double v,int scale){\n+        if(scale<0){\n+            throw new IllegalArgumentException(\n+                    \"The scale must be a positive integer or zero\");\n+        }\n+        BigDecimal b = new BigDecimal(Double.toString(v));\n+        BigDecimal one = new BigDecimal(\"1\");\n+        return b.divide(one,scale,BigDecimal.ROUND_HALF_UP).doubleValue();\n+    }\n+};"
  },
  {
    "sha": "8ce20af633df9fe0795da59b87828bc880dda4b8",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/DictationResult.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/DictationResult.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/DictationResult.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/DictationResult.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,117 @@\n+package transferCenterRoutePlanning.Util;\n+\n+import java.util.List;\n+\n+public class DictationResult {\n+    private String sn;\n+    private String ls;\n+    private String bg;\n+    private String ed;\n+\n+    private List<Words> ws;\n+\n+    public static class Words {\n+        private String bg;\n+        private List<Cw> cw;\n+\n+        public static class Cw {\n+            private String w;\n+            private String sc;\n+\n+            public String getW() {\n+                return w;\n+            }\n+\n+            public void setW(String w) {\n+                this.w = w;\n+            }\n+\n+            public String getSc() {\n+                return sc;\n+            }\n+\n+            public void setSc(String sc) {\n+                this.sc = sc;\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return w;\n+            }\n+        }\n+\n+        public String getBg() {\n+            return bg;\n+        }\n+\n+        public void setBg(String bg) {\n+            this.bg = bg;\n+        }\n+\n+        public List<Cw> getCw() {\n+            return cw;\n+        }\n+\n+        public void setCw(List<Cw> cw) {\n+            this.cw = cw;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            String result = \"\";\n+            for (Cw cwTmp : cw) {\n+                result += cwTmp.toString();\n+            }\n+            return result;\n+        }\n+    }\n+\n+    public String getSn() {\n+        return sn;\n+    }\n+\n+    public void setSn(String sn) {\n+        this.sn = sn;\n+    }\n+\n+    public String getLs() {\n+        return ls;\n+    }\n+\n+    public void setLs(String ls) {\n+        this.ls = ls;\n+    }\n+\n+    public String getBg() {\n+        return bg;\n+    }\n+\n+    public void setBg(String bg) {\n+        this.bg = bg;\n+    }\n+\n+    public String getEd() {\n+        return ed;\n+    }\n+\n+    public void setEd(String ed) {\n+        this.ed = ed;\n+    }\n+\n+    public List<Words> getWs() {\n+        return ws;\n+    }\n+\n+    public void setWs(List<Words> ws) {\n+        this.ws = ws;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String result = \"\";\n+        for (Words wsTmp : ws) {\n+            result += wsTmp.toString();\n+        }\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "6513b94ee6e449ea29af8ef5df5673f053479b43",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/ExpressInfo.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/ExpressInfo.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/ExpressInfo.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/ExpressInfo.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,74 @@\n+package transferCenterRoutePlanning.Util;\n+\n+\n+\n+public class ExpressInfo {\n+    private String postid;\n+    private String customer;\n+    private String address;\n+    private String lat;\n+    private String lng;\n+\n+    @Override\n+    public String toString() {\n+        return \"ExpressInfo{\" +\n+                \"postid='\" + postid + '\\'' +\n+                \", customer='\" + customer + '\\'' +\n+                \", address='\" + address + '\\'' +\n+                \", lat='\" + lat + '\\'' +\n+                \", lng='\" + lng + '\\'' +\n+                '}';\n+    }\n+\n+    public String getPostid() {\n+        return postid;\n+    }\n+\n+    public void setPostid(String postid) {\n+        this.postid = postid;\n+    }\n+\n+    public String getCustomer() {\n+        return customer;\n+    }\n+\n+    public void setCustomer(String customer) {\n+        this.customer = customer;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getLat() {\n+        return lat;\n+    }\n+\n+    public void setLat(String lat) {\n+        this.lat = lat;\n+    }\n+\n+    public String getLng() {\n+        return lng;\n+    }\n+\n+    public void setLng(String lng) {\n+        this.lng = lng;\n+    }\n+\n+    public ExpressInfo(String postid, String customer, String address, String lat, String lng) {\n+        this.postid = postid;\n+        this.customer = customer;\n+        this.address = address;\n+        this.lat = lat;\n+        this.lng = lng;\n+    }\n+\n+    public ExpressInfo() {\n+    }\n+}\n+"
  },
  {
    "sha": "0957724e61f827ae57fdf82c30bdb8dc43dbbb7e",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/JdbcUtils.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/JdbcUtils.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/JdbcUtils.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/JdbcUtils.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,59 @@\n+package transferCenterRoutePlanning.Util;\n+\n+import com.alibaba.druid.pool.DruidDataSource;\n+import com.alibaba.druid.pool.DruidDataSourceFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+public class JdbcUtils {\n+\n+\n+\n+    private static DruidDataSource dataSource;\n+\n+    static {\n+        try {\n+            Properties properties = new Properties();\n+            InputStream inputStream = JdbcUtils.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");\n+            properties.load(inputStream);\n+            //创建数据库连接池\n+            dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    /**\n+     * 获取数据库连接池的连接\n+     * @return   返回null为失败\n+     */\n+\n+    public static Connection getConnection()\n+    {\n+        Connection  conn = null;\n+        try {\n+            conn = dataSource.getConnection();\n+\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return conn;\n+    }\n+\n+    public static void close(Connection conn){\n+        if(conn!=null) {\n+            try {\n+                conn.close();\n+            } catch (SQLException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+    public static void main(String[] args) {\n+\n+    }\n+}"
  },
  {
    "sha": "4141e4987f072298ef25ac4518d38c350985ad46",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/LatLng.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/LatLng.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/LatLng.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/LatLng.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,35 @@\n+package transferCenterRoutePlanning.Util;\n+\n+public  class LatLng {\n+\n+    public final double latitude;\n+    public final double longitude;\n+    public final double latitudeE6;\n+    public final double longitudeE6;\n+\n+\n+    public LatLng(double var1, double var3) {\n+        if (!Double.isNaN(var1) && !Double.isNaN(var3) && !Double.isInfinite(var1) && !Double.isInfinite(var3)) {\n+            double var5 = var1 * 1000000.0D;\n+            double var7 = var3 * 1000000.0D;\n+            this.latitudeE6 = var5;\n+            this.longitudeE6 = var7;\n+            this.latitude = var5 / 1000000.0D;\n+            this.longitude = var7 / 1000000.0D;\n+        } else {\n+            this.latitudeE6 = 0.0D;\n+            this.longitudeE6 = 0.0D;\n+            this.latitude = 0.0D;\n+            this.longitude = 0.0D;\n+        }\n+    }\n+\n+\n+    public String toString() {\n+        String var1 = new String(\"latitude: \");\n+        var1 = var1 + this.latitude;\n+        var1 = var1 + \", longitude: \";\n+        var1 = var1 + this.longitude;\n+        return var1;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4aad3ffc3c922bfec2f7d25fabcc7db8f89fa309",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/NextUtil.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/NextUtil.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/NextUtil.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/NextUtil.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,83 @@\n+package transferCenterRoutePlanning.Util;\n+\n+\n+import java.math.BigDecimal;\n+\n+public class NextUtil {\n+    private static double EARTH_RADIUS = 6378.137;\n+    private static double rad(double d){\n+        return d * Math.PI / 180.0;\n+    }\n+\n+    /*通过经纬度获取距离*/\n+    public static double getDistance(double lat1,double lng1,\n+                                     double lat2,double lng2){\n+        double radLat1 = rad(lat1);\n+        double radLat2 = rad(lat2);\n+        double a = radLat1 - radLat2;\n+        double b = rad(lng1) - rad(lng2);\n+        double s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2)\n+                        + Math.cos(radLat1) * Math.cos(radLat2)\n+                        * Math.pow(Math.sin(b / 2),2)));\n+        s = s * EARTH_RADIUS;\n+        s = Math.round(s * 10000d) / 10000d;\n+        s = s * 1000;\n+        BigDecimal bigDecimal = new BigDecimal(s);\n+        double distance = bigDecimal.setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();\n+        return distance;\n+    }\n+\n+    public static String getAzimuth(double lat1,double lng1,\n+                                    double lat2,double lng2){\n+        double result = 0.0;\n+        double ilat1 = 0.50 + lat1 * 360000.0;\n+        double ilat2 = 0.50 + lat2 * 360000.0;\n+        double ilng1 = 0.50 + lng1 * 360000.0;\n+        double ilng2 = 0.50 + lat2 * 360000.0;\n+        String location = \"\";\n+        lat1 = rad(lat1);\n+        lat2 = rad(lat2);\n+        lng1 = rad(lng1);\n+        lng2 = rad(lng2);\n+\n+        if((ilat1 == ilat2) && (ilng1 == ilng2))\n+            location = \"原地\";\n+        else if(ilng1 == ilng2){\n+            if(ilat1 > ilat2)\n+                return String.valueOf(180.0);\n+        }else{\n+            double c = Math.acos(Math.sin(lat2) * Math.sin(lat1) + Math.cos(lat2)\n+                    * Math.cos(lat1) * Math.cos((lng2 - lng1)));\n+            double A = Math.asin(Math.cos(lat2) * Math.sin((lng2 - lng1))\n+                    / Math.sin(c));\n+            result = A * 180 / Math.PI;\n+            if ((ilat2 > ilat1) && (ilng2 > ilng1)) {\n+            } else if ((ilat2 < ilat1) && (ilng2 < ilng1)) {\n+                result = 180.0 - result;\n+            } else if ((ilat2 < ilat1) && (ilng2 > ilng1)) {\n+                result = 180.0 - result;\n+            } else if ((ilat2 > ilat1) && (ilng2 < ilng1)) {\n+                result += 360.0;\n+            }\n+        }\n+        double ss = result;\n+        if (ss >= 5 && 85 > ss) {\n+            location = \"您的东北方\";\n+        } else if(ss >= 85 && 95 > ss){\n+            location = \"您的东方\";\n+        }else if(ss >= 95 && 175 > ss){\n+            location = \"您的东南方\";\n+        }else if(ss >= 175 && 185 > ss){\n+            location = \"您的南方\";\n+        }else if(ss  >=185 && 265 > ss){\n+            location = \"您的西南方\";\n+        } else if(ss >= 265 && 275 > ss){\n+            location = \"您的西方\";\n+        }else if(ss >= 275 && 355 > ss){\n+            location = \"您的西北方\";\n+        }else{\n+            location = \"您的北方\";\n+        }\n+        return location;\n+    }\n+}"
  },
  {
    "sha": "ae52358d2da11401c78c9fa7fe259b3c538a96e3",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/RoutePlanByGreey.java",
    "status": "added",
    "additions": 570,
    "deletions": 0,
    "changes": 570,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/RoutePlanByGreey.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/RoutePlanByGreey.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/RoutePlanByGreey.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,570 @@\n+package transferCenterRoutePlanning.Util;\n+\n+\n+\n+\n+\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RoutePlanByGreey {\n+\n+    private double[][] cityDistance;    //城市间距离\n+    private List<LatLng> newPointsArray = null;\n+    private List<LatLng> prePointsArray1;\n+\n+    public List<LatLng> mapToList(Map<String,LatLng> map)\n+    {\n+        ArrayList<LatLng> arrayList = new ArrayList<>();\n+        for(Map.Entry<String,LatLng> entry : map.entrySet()){\n+\n+            arrayList.add(entry.getValue());\n+        }\n+        return arrayList;\n+    }\n+    //计算点间距离,并设置最小距离\n+    public void getEachDistance(List<LatLng> allPoints) {\n+        cityDistance = new double[allPoints.size()][allPoints.size()];     //设置数组大小\n+        double min = 0;     //最短距离\n+        //点到自身距离设为0\n+        for(int k = 0;k < allPoints.size();k++) {\n+            cityDistance[k][k] = 0;\n+        }\n+        //根据公式计算上三角\n+        for (int i = 0;i < allPoints.size()-1;i++) {\n+            for (int j = i+1; j < allPoints.size(); j++) {\n+                double radLat1 = Rad(allPoints.get(i).latitude);\n+                double radLat2 = Rad(allPoints.get(j).latitude);\n+                double diffLat = Arith.sub(radLat1,radLat2);\n+                double diffLng = Arith.sub(Rad(allPoints.get(i).longitude) , Rad(allPoints.get(j).longitude));\n+                double distance = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(Arith.div(diffLat,2)), 2)\n+                        + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(Arith.div(diffLng,2)), 2)));\n+\n+                distance = Arith.mul(distance,6378.137);     //地球半径\n+                distance = Arith.div(Arith.round(Arith.mul(distance,10000),6),10000);\n+                distance = Arith.div(Arith.round(Arith.mul(distance,1000),2),1);     //单位修改为米,取整\n+\n+                //计算最短距离\n+                if(min>distance) {\n+                    min = distance;\n+                }\n+\n+                this.cityDistance[i][j] = Arith.round(distance,0);\n+                this.cityDistance[j][i] = Arith.round(distance,0);\n+            }\n+\n+        }\n+    }\n+\n+    //经纬度转换成三角函数中度分表形式\n+    private double Rad(double latOrLng) {\n+        return latOrLng * Math.PI / 180.0;\n+    }\n+\n+\n+\n+    /**\n+     * 传入起点进行路径规划并返回规划后点集\n+     * @param prePointsArray 包含起点的所有的坐标点集\n+     * @param firstIndex     起点在数组中的下标\n+     * @return               返回排序后List数组\n+     */\n+    public List<LatLng> PathPlan(List<LatLng> prePointsArray, int firstIndex) {\n+        newPointsArray = new ArrayList<>();\n+        //将更改点作为第一个点\n+        double shortestDis = Double.MAX_VALUE;\t\t//初始设最短路径为最大值\n+        int[] index = new int[prePointsArray.size()]; //index数组按顺序存放规划完成的后preArray序号\n+        int count = 0;\t//序列个数\n+        int startIndex = firstIndex;       //开始点的序号\n+        int nextIndex;       //下个点的序号\n+        boolean[] isSelectedArray = new boolean[prePointsArray.size()];\n+\n+        LatLng startPoint = null;\t//起始点\n+\n+\n+        //preData.data = reArrangeData;\n+        //起始都是未选择状态\n+        for(int i=0;i<prePointsArray.size();i++) {\n+            isSelectedArray[i] = false;\n+        }\n+        startPoint = prePointsArray.get(startIndex);\n+        newPointsArray.add(startPoint);\t//加入初始起点\n+        isSelectedArray[startIndex] = true;\n+\n+        index[count] = 0;\n+\n+        count++;\n+        for(int i=1;i<prePointsArray.size();i++) {\n+            //寻找距离最短的点,除\n+            for(int j=0;j<prePointsArray.size() ;j++) {//已归入序列不需要再遍历\n+                if(isSelectedArray[j] == true)\n+                    continue;\n+                nextIndex = j;\n+                double dis = cityDistance[startIndex][nextIndex];\n+                if(dis < shortestDis){\n+                    shortestDis = dis;\n+                    index[count] = j;\t//最短距离的起点加入序列\n+                }\n+            }\n+            newPointsArray.add(prePointsArray.get(index[count]));  //加入距离最近点\n+\n+            isSelectedArray[index[count]] = true;\n+            startIndex = index[count++];\t\t//终点成为新的起点\n+            shortestDis = Double.MAX_VALUE;\n+        }\n+        String str = \"\";\n+        for(int i = 0;i<index.length;i++) {\n+            str += index[i]+\" \";\n+        }\n+\n+        return newPointsArray;\n+    }\n+\n+\n+    //传入起点进行路径规划,返回序号\n+    public int[] PathPlanReturnIndex(int firstIndex) {\n+        newPointsArray = new ArrayList<>();\n+        //将更改点作为第一个点\n+        double shortestDis = Double.MAX_VALUE;\t\t//初始设最短路径为最大值\n+        int[] index = new int[prePointsArray1.size()];\n+        int count = 0;\t//序列个数\n+        int startIndex = firstIndex;       //开始点的序号\n+        int nextIndex;       //下个点的序号\n+        boolean[] isSelectedArray = new boolean[prePointsArray1.size()];\n+\n+        LatLng startPoint = null;\t//起始点\n+\n+        //起始都是未选择状态\n+        for(int i=0;i<prePointsArray1.size();i++) {\n+            isSelectedArray[i] = false;\n+        }\n+        startPoint = prePointsArray1.get(startIndex);\n+        newPointsArray.add(startPoint);\t//加入初始起点\n+        isSelectedArray[startIndex] = true;\n+\n+        index[count] = firstIndex;\n+\n+        count++;\n+        // 从i=1开始寻找第二个加入数组的点\n+        for(int i=1;i<prePointsArray1.size();i++) {\n+            //寻找距离最短的点,除\n+            for(int j=0;j<prePointsArray1.size() ;j++) {//已归入序列不需要再遍历\n+                if(isSelectedArray[j] == true)\n+                    continue;\n+                nextIndex = j;\n+                double dis = cityDistance[startIndex][nextIndex];\n+                if(dis < shortestDis){\n+                    shortestDis = dis;\n+                    index[count] = j;\t//最短距离的起点加入序列\n+                }\n+            }\n+            newPointsArray.add(prePointsArray1.get(index[count]));  //加入距离最近点\n+\n+            isSelectedArray[index[count]] = true;\n+            startIndex = index[count++];\t\t//终点成为新的起点\n+            shortestDis = Double.MAX_VALUE;\n+        }\n+        String str = \"\";\n+        for(int i = 0;i<index.length;i++) {\n+            str += index[i]+\" \";\n+        }\n+        return index;\n+    }\n+\n+\n+    //传入起点进行路径规划,返回序号\n+    public int[] PathPlanReturnIndex(List<LatLng> prePointsArray, int firstIndex) {\n+        newPointsArray = new ArrayList<>();\n+        //将更改点作为第一个点\n+        double shortestDis = Double.MAX_VALUE;\t\t//初始设最短路径为最大值\n+        int[] index = new int[prePointsArray.size()];\n+        int count = 0;\t//序列个数\n+        int startIndex = firstIndex;       //开始点的序号\n+        int nextIndex;       //下个点的序号\n+        boolean[] isSelectedArray = new boolean[prePointsArray.size()];\n+\n+        LatLng startPoint = null;\t//起始点\n+\n+\n+        //preData.data = reArrangeData;\n+        //起始都是未选择状态\n+        for(int i=0;i<prePointsArray.size();i++) {\n+            isSelectedArray[i] = false;\n+        }\n+        startPoint = prePointsArray.get(startIndex);\n+        newPointsArray.add(startPoint);\t//加入初始起点\n+        isSelectedArray[startIndex] = true;\n+\n+        index[count] = startIndex;\n+\n+        count++;\n+        for(int i=1;i<prePointsArray.size();i++) {\n+            //寻找距离最短的点,除\n+            for(int j=0;j<prePointsArray.size() ;j++) {//已归入序列不需要再遍历\n+                if(isSelectedArray[j] == true)\n+                    continue;\n+                nextIndex = j;\n+                double dis = cityDistance[startIndex][nextIndex];\n+                if(dis < shortestDis){\n+                    shortestDis = dis;\n+                    index[count] = j;\t//最短距离的起点加入序列\n+                }\n+            }\n+            newPointsArray.add(prePointsArray.get(index[count]));  //加入距离最近点\n+\n+            isSelectedArray[index[count]] = true;\n+            startIndex = index[count++];\t\t//终点成为新的起点\n+            shortestDis = Double.MAX_VALUE;\n+        }\n+        String str = \"***第二小区顺序***：\";\n+        for(int i = 0;i<index.length;i++) {\n+            str += index[i]+\" \";\n+        }\n+        return index;\n+    }\n+\n+    //包含已签收和未签收，但不需要更改起始地点\n+    public int[] PathPlanReturnIndex(int firstUnSignedId,String[] lat, String[] lng) {\n+        this.prePointsArray1 = new ArrayList<>();  //点集\n+\n+        //封装点集\n+        for(int i=firstUnSignedId;i < lat.length;i++)\n+            this.prePointsArray1.add(new LatLng(Double.parseDouble(lat[i]),Double.parseDouble(lng[i])));\n+\n+        //计算点间距离数组\n+        getEachDistance(this.prePointsArray1);\n+        newPointsArray = new ArrayList<>();\n+        //将更改点作为第一个点\n+        double shortestDis = Double.MAX_VALUE;\t\t//初始设最短路径为最大值\n+        int[] index = new int[this.prePointsArray1.size()];\n+        int count = 0;\t//序列个数\n+        int startIndex = firstUnSignedId;       //开始点的序号\n+        int nextIndex;       //下个点的序号\n+        boolean[] isSelectedArray = new boolean[this.prePointsArray1.size()];\n+\n+        LatLng startPoint;\t//起始点\n+\n+        //preData.data = reArrangeData;\n+        //起始都是未选择状态\n+        for(int i=0;i<this.prePointsArray1.size();i++) {\n+            isSelectedArray[i] = false;\n+        }\n+        startPoint = this.prePointsArray1.get(startIndex);\n+        newPointsArray.add(startPoint);\t//加入初始起点\n+        isSelectedArray[startIndex] = true;\n+        index[count] = startIndex;\n+\n+        count++;\n+        for(int i=1;i<this.prePointsArray1.size();i++) {\n+            //寻找距离最短的点,除\n+            for(int j=0;j<this.prePointsArray1.size() ;j++) {//已归入序列不需要再遍历\n+                if(isSelectedArray[j] == true)\n+                    continue;\n+                nextIndex = j;\n+                double dis = this.cityDistance[startIndex][nextIndex];\n+                if(dis < shortestDis){\n+                    shortestDis = dis;\n+                    index[count] = j;\t//最短距离的起点加入序列\n+                }\n+            }\n+            newPointsArray.add(this.prePointsArray1.get(index[count]));  //加入距离最近点\n+\n+            isSelectedArray[index[count]] = true;\n+            startIndex = index[count++];\t\t//终点成为新的起点\n+            shortestDis = Double.MAX_VALUE;\n+        }\n+        String str = \"\";\n+        for(int i = 0;i<index.length;i++) {\n+            str += index[i]+\" \";\n+        }\n+\n+\n+        int[] newIndexArray = new int[lat.length];\n+        //已签收序号\n+        int i;\n+        for(i=0;i<=firstUnSignedId;i++) {\n+            newIndexArray[i]=i;\n+        }\n+        //未签收已排序的序号\n+        int j = 0;\n+        for(i--;i<lat.length;i++) {\n+            newIndexArray[i] = index[j++]+firstUnSignedId;\n+        }\n+\n+        str = \"当不在同一个小区时,先排第一个小区（不需更改点）：\";\n+        for(i = 0;i<newIndexArray.length;i++) {\n+            str += newIndexArray[i]+\" \";\n+        }\n+        return newIndexArray;\n+    }\n+\n+    //传入起点进行路径规划,返回序号（传入的点集在同一个小区）包含已签收和未签收，需要更改起始地点\n+    public int[] PathPlanReturnIndex(int changedId,int firstUnSignedId,String[] lat, String[] lng) {\n+        this.prePointsArray1 = new ArrayList<>();  //点集\n+\n+        //封装点集\n+        for(int i=firstUnSignedId;i < lat.length;i++)\n+            this.prePointsArray1.add(new LatLng(Double.parseDouble(lat[i]),Double.parseDouble(lng[i])));\n+\n+        //计算点间距离数组\n+        getEachDistance(this.prePointsArray1);\n+        newPointsArray = new ArrayList<>();\n+        //将更改点作为第一个点\n+        double shortestDis = Double.MAX_VALUE;\t\t//初始设最短路径为最大值\n+        int[] index = new int[this.prePointsArray1.size()];\n+        int count = 0;\t//序列个数\n+        int startIndex = changedId - firstUnSignedId;       //开始点的序号\n+        int nextIndex;       //下个点的序号\n+        boolean[] isSelectedArray = new boolean[this.prePointsArray1.size()];\n+\n+        LatLng startPoint;\t//起始点\n+\n+        //preData.data = reArrangeData;\n+        //起始都是未选择状态\n+        for(int i=0;i<this.prePointsArray1.size();i++) {\n+            isSelectedArray[i] = false;\n+        }\n+        startPoint = this.prePointsArray1.get(startIndex);\n+        newPointsArray.add(startPoint);\t//加入初始起点\n+        isSelectedArray[startIndex] = true;\n+        index[count] = startIndex;\n+\n+        count++;\n+        for(int i=1;i<this.prePointsArray1.size();i++) {\n+            //寻找距离最短的点,除\n+            for(int j=0;j<this.prePointsArray1.size() ;j++) {//已归入序列不需要再遍历\n+                if(isSelectedArray[j] == true)\n+                    continue;\n+                nextIndex = j;\n+                double dis = this.cityDistance[startIndex][nextIndex];\n+                if(dis < shortestDis){\n+                    shortestDis = dis;\n+                    index[count] = j;\t//最短距离的起点加入序列\n+                }\n+            }\n+            newPointsArray.add(this.prePointsArray1.get(index[count]));  //加入距离最近点\n+\n+            isSelectedArray[index[count]] = true;\n+            startIndex = index[count++];\t\t//终点成为新的起点\n+            shortestDis = Double.MAX_VALUE;\n+        }\n+        String str = \"\";\n+        for(int i = 0;i<index.length;i++) {\n+            str += index[i]+\" \";\n+        }\n+\n+\n+        int[] newIndexArray = new int[lat.length];\n+        //已签收序号\n+        int i;\n+        for(i=0;i<=firstUnSignedId;i++) {\n+            newIndexArray[i]=i;\n+        }\n+        //未签收已排序的序号\n+        int j = 0;\n+        for(i--;i<lat.length;i++) {\n+            newIndexArray[i] = index[j++]+firstUnSignedId;\n+        }\n+\n+        str = \"\";\n+        for(i = 0;i<newIndexArray.length;i++) {\n+            str += newIndexArray[i]+\" \";\n+        }\n+        return newIndexArray;\n+    }\n+\n+    /*\n+        （按小区分组），更改后的地点在同一个小区\n+     */\n+    public int[] PathPlanReturnIndexInSameCommunity(int changedId,int firstUnSignedId,\n+                                                    String[] lat, String[] lng,int cutNum) {\n+\n+        int[] firstHalfIndexArray;\n+        //在同一个小区的条件下：1.在第一个小区，需要分开规划；2.在第二个小区，则直接规划\n+        if(firstUnSignedId < cutNum) {      //在第一个小区\n+            firstHalfIndexArray = new int[cutNum];    //将前一半封装排序\n+            String[] firstHalfLat = Arrays.copyOf(lat,cutNum);\n+            String[] firstHalfLng = Arrays.copyOf(lng,cutNum);\n+\n+            System.arraycopy(PathPlanReturnIndex(changedId,firstUnSignedId,\n+                    firstHalfLat,firstHalfLng),0,firstHalfIndexArray,0,cutNum);     //获得前cutNum个地点的顺序\n+\n+            //firstHalfIndexArray中暂时存放前一个小区排序后的顺序，再从其中最后一个以贪心法开始连接第二个小区\n+            int lastOfFirstCommunityIndex = firstHalfIndexArray[cutNum-1];  //第一个小区的最后一个位置\n+\n+            this.prePointsArray1 = new ArrayList<>();  //点集\n+            this.prePointsArray1.add(new LatLng(Double.parseDouble(lat[lastOfFirstCommunityIndex]),\n+                    Double.parseDouble(lng[lastOfFirstCommunityIndex])));   //将最后一个点作为第二个小区开始的起点\n+\n+            //封装第二个小区点集\n+            for(int i=cutNum;i < lat.length;i++)\n+                this.prePointsArray1.add(new LatLng(Double.parseDouble(lat[i]),Double.parseDouble(lng[i])));\n+\n+            //获取第二个小区排序序号\n+            int[] secondHalfIndexArray = new int[lat.length-cutNum];\n+\n+            getEachDistance(prePointsArray1);\n+            System.arraycopy(PathPlanReturnIndex(0),1,secondHalfIndexArray,\n+                    0,PathPlanReturnIndex(0).length-1);\n+            for(int i=0;i<secondHalfIndexArray.length;i++)\n+                secondHalfIndexArray[i] += cutNum-1;\n+\n+            firstHalfIndexArray = Arrays.copyOf(firstHalfIndexArray, lat.length);//数组扩容\n+            System.arraycopy(secondHalfIndexArray, 0, firstHalfIndexArray,\n+                    cutNum, secondHalfIndexArray.length);\n+\n+            String str = \"都在第一个小区时：\";\n+            for(int i = 0;i<firstHalfIndexArray.length;i++) {\n+                str += firstHalfIndexArray[i]+\" \";\n+            }\n+            return firstHalfIndexArray;\n+        }\n+\n+        else {\n+            return PathPlanReturnIndex(changedId,firstUnSignedId,lat,lng);\n+        }\n+\n+\n+    }\n+\n+\n+\n+    /*\n+        （按小区分组），不在同一个小区，分开排序再合并\n+     */\n+    public int[] PathPlanReturnIndexInDifferentCommunity(int changedId,int firstUnSignedId,\n+                                                         String[] lat, String[] lng,int cutNum) {\n+\n+        int[] firstHalfIndexArray;\n+        /*\n+            更换的地点在第二个小区：1.先规划第一个小区，再将更换点置于第二个小区的起始点\n+         */\n+\n+        //在第一个小区\n+        firstHalfIndexArray = new int[cutNum];    //将前一半封装排序\n+        String[] firstHalfLat = Arrays.copyOf(lat,cutNum);\n+        String[] firstHalfLng = Arrays.copyOf(lng,cutNum);\n+\n+        System.arraycopy(PathPlanReturnIndex(firstUnSignedId,\n+                firstHalfLat,firstHalfLng),0,firstHalfIndexArray,0,cutNum);     //获得前cutNum个地点的顺序\n+\n+        /*\n+            firstHalfIndexArray中暂时存放前一个小区排序后的顺序，然后不根据当前点实行贪心，\n+            而是直接将第二个小区的更换点设为起点\n+         */\n+\n+        this.prePointsArray1 = new ArrayList<>();  //点集\n+        /*this.prePointsArray1.add(new LatLng(Double.parseDouble(lat[changedId]),\n+                Double.parseDouble(lng[changedId])));   //将更改点作为第二个小区开始的起点*/\n+\n+        //封装第二个小区点集\n+        for(int i=cutNum;i < lat.length;i++) {\n+            //if(i!=changedId)\n+            this.prePointsArray1.add(new LatLng(Double.parseDouble(lat[i]), Double.parseDouble(lng[i])));\n+        }\n+\n+        getEachDistance(prePointsArray1);\n+\n+        //获取第二个小区排序序号\n+        int[] secondHalfIndexArray = new int[lat.length-cutNum];\n+        /*System.arraycopy(PathPlanReturnIndex(0),0,secondHalfIndexArray,\n+                0,PathPlanReturnIndex(0).length);*/\n+        System.arraycopy(PathPlanReturnIndex(prePointsArray1,changedId-cutNum),0,secondHalfIndexArray,\n+                0,PathPlanReturnIndex(0).length);\n+        for(int i=0;i<secondHalfIndexArray.length;i++)\n+            secondHalfIndexArray[i] += cutNum;\n+\n+        firstHalfIndexArray = Arrays.copyOf(firstHalfIndexArray, lat.length);//数组扩容\n+        System.arraycopy(secondHalfIndexArray, 0, firstHalfIndexArray,\n+                cutNum, secondHalfIndexArray.length);\n+\n+        String str = \"更换点和下个派件点分别在两个小区：\";\n+        for(int i = 0;i<firstHalfIndexArray.length;i++) {\n+            str += firstHalfIndexArray[i]+\" \";\n+        }\n+        return firstHalfIndexArray;\n+\n+    }\n+\n+\n+    //传入起点进行路径规划,返回序号（传入的点集在同一个小区）包含已签收和未签收，需要更改起始地点\n+    public int[] PathPlanReturnIndex1(int changedId,int firstUnSignedId,String[] lat, String[] lng) {\n+        this.prePointsArray1 = new ArrayList<>();  //点集\n+\n+        //封装点集\n+        for(int i=firstUnSignedId;i < lat.length;i++)\n+            this.prePointsArray1.add(new LatLng(Double.parseDouble(lat[i]),Double.parseDouble(lng[i])));\n+\n+        //计算点间距离数组\n+        getEachDistance(this.prePointsArray1);\n+        newPointsArray = new ArrayList<>();\n+        //将更改点作为第一个点\n+        double shortestDis = Double.MAX_VALUE;\t\t//初始设最短路径为最大值\n+        int[] index = new int[this.prePointsArray1.size()];\n+        int count = 0;\t//序列个数\n+        int startIndex = changedId - firstUnSignedId;       //开始点的序号\n+        int nextIndex;       //下个点的序号\n+        boolean[] isSelectedArray = new boolean[this.prePointsArray1.size()];\n+\n+        LatLng startPoint;\t//起始点\n+\n+        //preData.data = reArrangeData;\n+        //起始都是未选择状态\n+        for(int i=0;i<this.prePointsArray1.size();i++) {\n+            isSelectedArray[i] = false;\n+        }\n+        startPoint = this.prePointsArray1.get(startIndex);\n+        newPointsArray.add(startPoint);\t//加入初始起点\n+        isSelectedArray[startIndex] = true;\n+        index[count] = startIndex;\n+\n+        count++;\n+        for(int i=1;i<this.prePointsArray1.size();i++) {\n+            //寻找距离最短的点,除\n+            for(int j=0;j<this.prePointsArray1.size() ;j++) {//已归入序列不需要再遍历\n+                if(isSelectedArray[j] == true)\n+                    continue;\n+                nextIndex = j;\n+                double dis = this.cityDistance[startIndex][nextIndex];\n+                if(dis < shortestDis){\n+                    shortestDis = dis;\n+                    index[count] = j;\t//最短距离的起点加入序列\n+                }\n+            }\n+            newPointsArray.add(this.prePointsArray1.get(index[count]));  //加入距离最近点\n+\n+            isSelectedArray[index[count]] = true;\n+            startIndex = index[count++];\t\t//终点成为新的起点\n+            shortestDis = Double.MAX_VALUE;\n+        }\n+        String str = \"\";\n+        for(int i = 0;i<index.length;i++) {\n+            str += index[i]+\" \";\n+        }\n+\n+\n+        int[] newIndexArray = new int[lat.length];\n+        //已签收序号\n+        int i;\n+        for(i=0;i<=firstUnSignedId;i++) {\n+            newIndexArray[i]=i;\n+        }\n+        //未签收已排序的序号\n+        int j = 0;\n+        for(i--;i<lat.length;i++) {\n+            newIndexArray[i] = index[j++]+firstUnSignedId;\n+        }\n+\n+        str = \"\";\n+        for(i = 0;i<newIndexArray.length;i++) {\n+            str += newIndexArray[i]+\" \";\n+        }\n+        return newIndexArray;\n+    }\n+\n+\n+\n+}"
  },
  {
    "sha": "7ff58d5653bf0744eded87d2e63effa83f8b2c9c",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/Util/TransportCenter.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/TransportCenter.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/Util/TransportCenter.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/Util/TransportCenter.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,93 @@\n+package transferCenterRoutePlanning.Util;\n+\n+public class TransportCenter {\n+    private Integer id;\n+    private String name;\n+    private String city;\n+    private Integer max_cargo_count;\n+    private String address;\n+    private Double longitude;\n+    private Double latitude;\n+\n+    @Override\n+    public String toString() {\n+        return \"TransportCenter{\" +\n+                \"id=\" + id +\n+                \", name='\" + name + '\\'' +\n+                \", city='\" + city + '\\'' +\n+                \", max_cargo_count=\" + max_cargo_count +\n+                \", address='\" + address + '\\'' +\n+                \", longitude=\" + longitude +\n+                \", latitude=\" + latitude +\n+                '}';\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public Integer getMax_cargo_count() {\n+        return max_cargo_count;\n+    }\n+\n+    public void setMax_cargo_count(Integer max_cargo_count) {\n+        this.max_cargo_count = max_cargo_count;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public Double getLongitude() {\n+        return longitude;\n+    }\n+\n+    public void setLongitude(Double longitude) {\n+        this.longitude = longitude;\n+    }\n+\n+    public Double getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(Double latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public TransportCenter(Integer id, String name, String city, Integer max_cargo_count, String address, Double longitude, Double latitude) {\n+        this.id = id;\n+        this.name = name;\n+        this.city = city;\n+        this.max_cargo_count = max_cargo_count;\n+        this.address = address;\n+        this.longitude = longitude;\n+        this.latitude = latitude;\n+    }\n+\n+    public TransportCenter() {\n+    }\n+}"
  },
  {
    "sha": "374ca1d0a405d79826a7aeb2785b53d4e028757b",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/service/Impl/TransportCenterServiceImpl.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/service/Impl/TransportCenterServiceImpl.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/service/Impl/TransportCenterServiceImpl.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/service/Impl/TransportCenterServiceImpl.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,53 @@\n+package transferCenterRoutePlanning.service.Impl;\n+\n+import transferCenterRoutePlanning.Dao.Impl.TransportCenterImpl;\n+import transferCenterRoutePlanning.Dao.TransportCenterDao;\n+import transferCenterRoutePlanning.Util.LatLng;\n+import transferCenterRoutePlanning.Util.TransportCenter;\n+import transferCenterRoutePlanning.service.TransportService;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TransportCenterServiceImpl implements TransportService {\n+    private TransportCenterDao transportCenterDao = new TransportCenterImpl();\n+\n+    /**\n+     * 查询存放所有LatLng对象的List\n+     * @return\n+     */\n+    @Override\n+    public List<LatLng> getLatLngList() {\n+        List<TransportCenter> centerInfoList = transportCenterDao.queryTransportCenter();\n+        List<LatLng> list = new ArrayList<>();\n+        for (TransportCenter transportCenter : centerInfoList) {\n+            list.add(new LatLng(transportCenter.getLatitude(),transportCenter.getLongitude()));\n+        }\n+        return list;\n+    }\n+    /**\n+     * 查询存放所有LatLng对象的Map，此map的Key是对应点集的名字\n+     * @return\n+     */\n+    @Override\n+    public Map<String,LatLng> getLatLngMap() {\n+        List<TransportCenter> centerInfoList = transportCenterDao.queryTransportCenter();\n+        Map<String,LatLng> map = new LinkedHashMap<>();\n+        for (TransportCenter transportCenter : centerInfoList) {\n+            LatLng latLng = new LatLng(transportCenter.getLatitude(),transportCenter.getLongitude());\n+            map.put(transportCenter.getName(),latLng);\n+\n+        }\n+        return map;\n+    }\n+\n+    @Override\n+    public int getMaxCargoByName(String name) {\n+        return transportCenterDao.queryMaxCargoByName(name);\n+\n+    }\n+\n+\n+}"
  },
  {
    "sha": "abe8db3eea3f1791359bb72ff700efa6014086cb",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/service/TransportService.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/service/TransportService.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/service/TransportService.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/service/TransportService.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,13 @@\n+package transferCenterRoutePlanning.service;\n+\n+import transferCenterRoutePlanning.Util.LatLng;\n+import transferCenterRoutePlanning.Util.TransportCenter;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface TransportService {\n+    public Map<String,LatLng> getLatLngMap();\n+    public List<LatLng> getLatLngList();\n+    public int getMaxCargoByName(String name);\n+}"
  },
  {
    "sha": "78a19b03633a654834d7df4b43f01eace0faca35",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/test/ServletTest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/test/ServletTest.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/test/ServletTest.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/test/ServletTest.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,49 @@\n+package transferCenterRoutePlanning.test;\n+\n+import com.google.gson.Gson;\n+import org.junit.Test;\n+import transferCenterRoutePlanning.service.Impl.TransportCenterServiceImpl;\n+import transferCenterRoutePlanning.service.TransportService;\n+import transferCenterRoutePlanning.Util.LatLng;\n+import transferCenterRoutePlanning.Util.RoutePlanByGreey;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ServletTest {\n+    public TransportService transportService = new TransportCenterServiceImpl();\n+    public RoutePlanByGreey rtp = new RoutePlanByGreey();\n+    public Gson gson = new Gson();\n+    @Test\n+    public void routePlan() {\n+//获取排序之前点集list\n+        List<LatLng> preList = transportService.getLatLngList();\n+        String preListString = gson.toJson(preList);\n+        //根据点集计算任意两点间距离\n+        rtp.getEachDistance(preList);\n+        //发起贪心算法得到排序后的点集\n+        List<LatLng> posList = rtp.PathPlan(preList,10);\n+        String posListString = gson.toJson(posList);\n+        //从数据库中获取未排序的带有名字的点集的Map\n+        Map<String,LatLng> preMap = transportService.getLatLngMap();\n+        String preMapString = gson.toJson(preMap);\n+        //定义排序后的Map\n+        Map<String,LatLng> posMap = new LinkedHashMap<>();\n+        //根据排序后的点集形成排序后的Map\n+        for (LatLng latLng : posList) {\n+            for(Map.Entry<String,LatLng> entry :preMap.entrySet()){\n+                if ((latLng.latitude == entry.getValue().latitude)&&(latLng.longitude==entry.getValue().longitude))\n+                {\n+                    posMap.put(entry.getKey(),latLng);\n+                }\n+\n+            }\n+        }\n+\n+        String posMapString = gson.toJson(posMap);\n+        System.out.println(preMapString);\n+        System.out.println(posMapString);\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5bec3679c56a793ad3b8c100680285e70e929ba5",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/test/TransportServiceTest.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/test/TransportServiceTest.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/test/TransportServiceTest.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/test/TransportServiceTest.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,19 @@\n+package transferCenterRoutePlanning.test;\n+\n+import org.junit.Test;\n+import transferCenterRoutePlanning.service.Impl.TransportCenterServiceImpl;\n+import transferCenterRoutePlanning.service.TransportService;\n+import transferCenterRoutePlanning.Util.LatLng;\n+\n+import java.util.Map;\n+\n+public class TransportServiceTest {\n+    private TransportService transportService = new TransportCenterServiceImpl();\n+\n+    @Test\n+    public void getLatLngMap() {\n+        Map<String,LatLng> latLngMap = transportService.getLatLngMap();\n+\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2132b4daf1c9b6bf419417d960caff5deea8dcb7",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/web/BaseServlet.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/web/BaseServlet.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/web/BaseServlet.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/web/BaseServlet.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,34 @@\n+package transferCenterRoutePlanning.web;\n+\n+import transferCenterRoutePlanning.Util.LatLng;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+public abstract class BaseServlet extends HttpServlet {\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+       this.doPost(req, resp);\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+       req.setCharacterEncoding(\"UTF-8\");\n+        resp.setContentType(\"text/html;charset=utf-8\");\n+        String action =  req.getParameter(\"action\");\n+         //使用反射解析请求的参数 以唤醒执行对应的方法\n+            try {\n+                Method method = this.getClass().getDeclaredMethod(action,HttpServletRequest.class,HttpServletResponse.class);\n+                method.invoke(this,req,resp);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+\n+        }\n+\n+}"
  },
  {
    "sha": "8ada89e7898308d3768b34f3593cba28b1610ff5",
    "filename": "MatchAndPlan/src/transferCenterRoutePlanning/web/Servlet.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/web/Servlet.java",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/src/transferCenterRoutePlanning/web/Servlet.java",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/src/transferCenterRoutePlanning/web/Servlet.java?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,66 @@\n+package transferCenterRoutePlanning.web;\n+\n+import com.google.gson.Gson;\n+import transferCenterRoutePlanning.service.Impl.TransportCenterServiceImpl;\n+import transferCenterRoutePlanning.service.TransportService;\n+import transferCenterRoutePlanning.Util.LatLng;\n+import transferCenterRoutePlanning.Util.RoutePlanByGreey;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class Servlet extends BaseServlet {\n+    public TransportService transportService = new TransportCenterServiceImpl();\n+    public RoutePlanByGreey rtp = new RoutePlanByGreey();\n+    public Gson gson = new Gson();\n+\n+\n+    protected void routePlanToMap(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+       //获取排序之前点集list\n+        List<LatLng> preList = transportService.getLatLngList();\n+        String preListString = gson.toJson(preList);\n+        //根据点集计算任意两点间距离\n+        rtp.getEachDistance(preList);\n+        //发起贪心算法得到排序后的点集\n+        List<LatLng> posList = rtp.PathPlan(preList,10);\n+        String posListString = gson.toJson(posList);\n+        //从数据库中获取未排序的带有名字的点集的Map\n+        Map<String,LatLng> preMap = transportService.getLatLngMap();\n+        String preMapString = gson.toJson(preMap);\n+        //定义排序后的Map\n+        Map<String,LatLng> posMap = new LinkedHashMap<>();\n+        //根据排序后的点集形成排序后的Map\n+        for (LatLng latLng : posList) {\n+            for(Map.Entry<String,LatLng> entry :preMap.entrySet()){\n+                if ((latLng.latitude == entry.getValue().latitude)&&(latLng.longitude==entry.getValue().longitude))\n+                {\n+                    posMap.put(entry.getKey(),latLng);\n+                    preMap.remove(entry);\n+                }\n+\n+            }\n+        }\n+\n+        String posMapString = gson.toJson(posMap);\n+        System.out.println(preMapString);\n+        System.out.println(posMapString);\n+        response.getWriter().write(posMapString);\n+\n+    }\n+\n+    protected void routePlanToList(HttpServletRequest request,HttpServletResponse response) throws IOException {\n+        //获取排序之前点集list\n+        List<LatLng> preList = transportService.getLatLngList();\n+        String preListString = gson.toJson(preList);\n+        //根据点集计算任意两点间距离\n+        rtp.getEachDistance(preList);\n+        //发起贪心算法得到排序后的点集\n+        List<LatLng> posList = rtp.PathPlan(preList,10);\n+        String posListString = gson.toJson(posList);\n+        response.getWriter().write(posListString);\n+    }\n+}"
  },
  {
    "sha": "9311570ac8ea4c6b576245f0044f0df3a7ab8aec",
    "filename": "MatchAndPlan/transportation_center.dbf",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/transportation_center.dbf",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/transportation_center.dbf",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/transportation_center.dbf?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "f76af902abadbec71b202ac999efa1c9762608a6",
    "filename": "MatchAndPlan/transportation_center.sql",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/transportation_center.sql",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/transportation_center.sql",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/transportation_center.sql?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb",
    "patch": "@@ -0,0 +1,19 @@\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (1, '迈皋桥分公司', '南京', 1000, '铺岗街419号附近', 118.821565, 32.114319);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (2, '江心洲分公司', '南京', 2000, '上海市青浦区徐泾镇明珠路1168号圆通速递', 118.716898, 32.048265);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (3, '广东路分公司', '南京', 1700, '靖江镇保税大道', 118.771426, 32.088295);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (4, '浦口二部分公司', '南京', 1000, '江苏省无锡市新吴区薛典北路128号', 118.680943, 32.11551);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (5, '紫竹林分公司', '南京', 38888, '江苏省', 118.780865, 32.090088);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (6, '石头城分公司', '南京', 34512, '江苏省', 118.757481, 32.074374);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (7, '虹桥中心分公司', '南京', 2321, '江苏省', 118.76091, 32.085629);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (8, '新河西分公司', '南京', 60000, '江苏省', 118.739278, 32.030876);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (9, '中山万豪分公司', '南京', 50000, '江苏省', 118.773292, 32.078233);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (10, '共青团路分公司', '南京', 70000, '江苏省', 118.774808, 31.992572);\n+INSERT INTO `transportation_center`(`id`, `name`, `city`, `max_cargo_count`, `address`, `longitude`, `latitude`) VALUES (11, '南京转运中心', '南京', 1000000, '江苏省南京市江宁区', 118.81611, 31.777821);\n+\n+id\tint(11)\tNO\tPRI\t\tauto_increment\n+name\tvarchar(45)\tNO\t\t\t\n+city\tvarchar(45)\tNO\t\t\t\n+max_cargo_count\tint(11)\tNO\t\t\t\n+address\tvarchar(255)\tYES\t\t\t\n+longitude\tdouble\tYES\t\t\t\n+latitude\tdouble\tYES\t\t\t\n\\ No newline at end of file"
  },
  {
    "sha": "caf7ae3360f4431da717ea9a988bddebc1cb98ba",
    "filename": "MatchAndPlan/web/WEB-INF/lib/commons-beanutils-1.8.0.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/commons-beanutils-1.8.0.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/commons-beanutils-1.8.0.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/commons-beanutils-1.8.0.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "953e13c69901ed7bd14748f902eb61274611d017",
    "filename": "MatchAndPlan/web/WEB-INF/lib/commons-dbutils-1.3.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/commons-dbutils-1.3.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/commons-dbutils-1.3.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/commons-dbutils-1.3.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "8758a96b70cfba9466bacca19c0d99b87cf53734",
    "filename": "MatchAndPlan/web/WEB-INF/lib/commons-logging-1.1.1.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/commons-logging-1.1.1.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/commons-logging-1.1.1.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/commons-logging-1.1.1.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "93aeb8ebebfc1820444536f7306ce16440fe0bee",
    "filename": "MatchAndPlan/web/WEB-INF/lib/druid-1.1.9.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/druid-1.1.9.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/druid-1.1.9.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/druid-1.1.9.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "9478253e8cb62cd840a21e1f323b68a507c98d66",
    "filename": "MatchAndPlan/web/WEB-INF/lib/gson-2.2.4.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/gson-2.2.4.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/gson-2.2.4.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/gson-2.2.4.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "9d5fe16e3dd37ebe79a36f61f5d0e1a69a653a8a",
    "filename": "MatchAndPlan/web/WEB-INF/lib/hamcrest-core-1.3.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/hamcrest-core-1.3.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/hamcrest-core-1.3.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/hamcrest-core-1.3.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "3a7fc266c3e32283a2b21fe12166ebdcc33a1da1",
    "filename": "MatchAndPlan/web/WEB-INF/lib/junit-4.12.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/junit-4.12.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/junit-4.12.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/junit-4.12.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "3652997059ed9da4049dda79faaaa73b4cfa30be",
    "filename": "MatchAndPlan/web/WEB-INF/lib/kaptcha-2.3.2.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/kaptcha-2.3.2.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/kaptcha-2.3.2.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/kaptcha-2.3.2.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  },
  {
    "sha": "ebfe06861ac3d32cc8a5735b409a9118e7f08fe6",
    "filename": "MatchAndPlan/web/WEB-INF/lib/mysql-connector-java-5.1.7-bin.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/GitHubNJUPT528/ctontcm/blob/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/mysql-connector-java-5.1.7-bin.jar",
    "raw_url": "https://github.com/GitHubNJUPT528/ctontcm/raw/59703b589f3bfcb160d825be248a3d61d1f6dcfb/MatchAndPlan/web/WEB-INF/lib/mysql-connector-java-5.1.7-bin.jar",
    "contents_url": "https://api.github.com/repos/GitHubNJUPT528/ctontcm/contents/MatchAndPlan/web/WEB-INF/lib/mysql-connector-java-5.1.7-bin.jar?ref=59703b589f3bfcb160d825be248a3d61d1f6dcfb"
  }
]
