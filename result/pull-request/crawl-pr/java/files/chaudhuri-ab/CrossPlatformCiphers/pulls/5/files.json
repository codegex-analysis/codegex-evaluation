[
  {
    "sha": "2789fad5dafeecc37ebc9a7320eb5b0377b2cc6a",
    "filename": "Android_CIPHER/Kotlin_AES_Cipher.kt",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/chaudhuri-ab/CrossPlatformCiphers/blob/803befc8194c354e38b9d6ee1b55e29164a70675/Android_CIPHER/Kotlin_AES_Cipher.kt",
    "raw_url": "https://github.com/chaudhuri-ab/CrossPlatformCiphers/raw/803befc8194c354e38b9d6ee1b55e29164a70675/Android_CIPHER/Kotlin_AES_Cipher.kt",
    "contents_url": "https://api.github.com/repos/chaudhuri-ab/CrossPlatformCiphers/contents/Android_CIPHER/Kotlin_AES_Cipher.kt?ref=803befc8194c354e38b9d6ee1b55e29164a70675",
    "patch": "@@ -0,0 +1,79 @@\n+package edu.purdue.cerias.ciphers;\n+\n+import android.util.Base64\n+import javax.crypto.Cipher\n+import javax.crypto.spec.IvParameterSpec\n+import javax.crypto.spec.SecretKeySpec\n+\n+class Kotlin_AES_Cipher {\n+    /**\n+     * Encrypt data using AES Cipher (CBC) with 128 bit key\n+     *\n+     *\n+     * @param key  - key to use should be 16 bytes long (128 bits)\n+     * @param iv - initialization vector\n+     * @param data - data to encrypt\n+     * @return encryptedData data in base64 encoding with iv attached at end after a :\n+     */\n+    fun encrypt(key: String, iv: String, data: String): String? {\n+        var key = key\n+        try {\n+            if (key.length < CIPHER_KEY_LEN) {\n+                val numPad = CIPHER_KEY_LEN - key.length\n+                for (i in 0 until numPad) {\n+                    key += \"0\" //0 pad to len 16 bytes\n+                }\n+            } else if (key.length > CIPHER_KEY_LEN) {\n+                key = key.substring(0, CIPHER_KEY_LEN) //truncate to 16 bytes\n+            }\n+            val initVector = IvParameterSpec(iv.toByteArray(charset(\"ISO-8859-1\")))\n+            val skeySpec = SecretKeySpec(key.toByteArray(charset(\"ISO-8859-1\")), \"AES\")\n+            val cipher = Cipher.getInstance(CIPHER_NAME)\n+            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, initVector)\n+            val encryptedData = cipher.doFinal(data.toByteArray())\n+            val base64_EncryptedData: String = Base64.encodeToString(encryptedData, Base64.DEFAULT)\n+            val base64_IV: String = Base64.encodeToString(iv.toByteArray(charset(\"ISO-8859-1\")), Base64.DEFAULT)\n+            return \"$base64_EncryptedData:$base64_IV\"\n+        } catch (ex: Exception) {\n+            ex.printStackTrace()\n+        }\n+        return null\n+    }\n+\n+    /**\n+     * Decrypt data using AES Cipher (CBC) with 128 bit key\n+     *\n+     * @param key - key to use should be 16 bytes long (128 bits)\n+     * @param data - encrypted data with iv at the end separate by :\n+     * @return decrypted data string\n+     */\n+    fun decrypt(key: String, data: String): String? {\n+        var key = key\n+        try {\n+            if (key.length < CIPHER_KEY_LEN) {\n+                val numPad = CIPHER_KEY_LEN - key.length\n+                for (i in 0 until numPad) {\n+                    key += \"0\" //0 pad to len 16 bytes\n+                }\n+            } else if (key.length > CIPHER_KEY_LEN) {\n+                key = key.substring(0, CIPHER_KEY_LEN) //truncate to 16 bytes\n+            }\n+            val parts = data.split(\":\".toRegex()).toTypedArray()\n+            val iv = IvParameterSpec(Base64.decode(parts[1], Base64.DEFAULT))\n+            val skeySpec = SecretKeySpec(key.toByteArray(charset(\"ISO-8859-1\")), \"AES\")\n+            val cipher = Cipher.getInstance(CIPHER_NAME)\n+            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv)\n+            val decodedEncryptedData = Base64.decode(parts[0], Base64.DEFAULT)\n+            val original = cipher.doFinal(decodedEncryptedData)\n+            return String(original)\n+        } catch (ex: Exception) {\n+            ex.printStackTrace()\n+        }\n+        return null\n+    }\n+\n+    companion object {\n+        private const val CIPHER_NAME = \"AES/CBC/PKCS5PADDING\"\n+        private const val CIPHER_KEY_LEN = 16 //128 bits\n+    }\n+}"
  }
]
