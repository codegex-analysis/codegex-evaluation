[
  {
    "sha": "6509c522ed76432a6acb820bab15b57ece302d44",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/SettingsCommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 394,
    "changes": 396,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/SettingsCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/SettingsCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/SettingsCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -1,21 +1,10 @@\n package de.kittybot.kittybot.commands.admin;\n \n-import de.kittybot.kittybot.modules.SettingsModule;\n-import de.kittybot.kittybot.modules.StreamAnnouncementModule;\n-import de.kittybot.kittybot.objects.enums.Emoji;\n-import de.kittybot.kittybot.objects.streams.StreamType;\n+import de.kittybot.kittybot.commands.admin.settings.*;\n import de.kittybot.kittybot.slashcommands.application.Category;\n import de.kittybot.kittybot.slashcommands.application.Command;\n-import de.kittybot.kittybot.slashcommands.application.options.*;\n-import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n-import de.kittybot.kittybot.slashcommands.interaction.Options;\n-import de.kittybot.kittybot.slashcommands.interaction.response.InteractionResponse;\n-import de.kittybot.kittybot.utils.Config;\n-import de.kittybot.kittybot.utils.MessageUtils;\n import net.dv8tion.jda.api.Permission;\n \n-import java.util.stream.Collectors;\n-\n @SuppressWarnings(\"unused\")\n public class SettingsCommand extends Command{\n \n@@ -30,391 +19,10 @@ public SettingsCommand(){\n \t\t\tnew NsfwCommand(),\n \t\t\tnew LogMessagesCommand(),\n \t\t\tnew SnipesCommand(),\n-\t\t\tnew StreamAnnouncementsCommand(),\n+\t\t\tnew StreamsCommand(),\n \t\t\tnew RoleSaverCommand()\n \t\t);\n \t\taddPermissions(Permission.ADMINISTRATOR);\n \t}\n \n-\tprivate static class ListCommand extends GuildSubCommand{\n-\n-\t\tpublic ListCommand(){\n-\t\t\tsuper(\"list\", \"Lists the current settings\");\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar guildId = ia.getGuildId();\n-\t\t\tvar settings = ia.get(SettingsModule.class).getSettings(guildId);\n-\t\t\tia.reply(builder -> builder\n-\t\t\t\t\t.setAuthor(\"Guild settings:\", Config.ORIGIN_URL + \"/guilds/\" + guildId + \"/dashboard\", Emoji.SETTINGS.getUrl())\n-\t\t\t\t\t.addField(\"Announcement Channel: \", settings.getAnnouncementChannel(), false)\n-\t\t\t\t\t.addField(\"Join Messages: \" + MessageUtils.getBoolEmote(settings.areJoinMessagesEnabled()), settings.getJoinMessage(), false)\n-\t\t\t\t\t.addField(\"Leave Messages: \" + MessageUtils.getBoolEmote(settings.areLeaveMessagesEnabled()), settings.getLeaveMessage(), false)\n-\t\t\t\t\t.addField(\"Stream Announcement Channel:\", settings.getStreamAnnouncementChannel(), false)\n-\t\t\t\t\t.addField(\"DJ Role: \", settings.getDjRole(), false)\n-\t\t\t\t\t.addField(\"NSFW Enabled: \", MessageUtils.getBoolEmote(settings.isNsfwEnabled()), false)\n-\t\t\t\t\t.addField(\"Log Messages: \" + MessageUtils.getBoolEmote(settings.areLogMessagesEnabled()), settings.getLogChannel(), false)\n-\t\t\t\t\t.addField(\"Snipes Enabled:\", MessageUtils.getBoolEmote(settings.areSnipesEnabled()), false)\n-\t\t\t\t\t.addField(\"Role Saver Enabled:\", MessageUtils.getBoolEmote(settings.isRoleSaverEnabled()), false)\n-\t\t\t\t//.addField(\"Inactive Role: \" + TimeUtils.formatDurationDHMS(settings.getInactiveDuration()), settings.getLogChannel(), false)\n-\t\t\t);\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class DJRoleCommand extends GuildSubCommand{\n-\n-\t\tpublic DJRoleCommand(){\n-\t\t\tsuper(\"djrole\", \"Sets the dj role\");\n-\t\t\taddOptions(\n-\t\t\t\tnew CommandOptionRole(\"role\", \"The new dj role\").required()\n-\t\t\t);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar role = options.getRole(\"role\");\n-\t\t\tia.get(SettingsModule.class).setDjRoleId(ia.getGuildId(), role.getIdLong());\n-\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"DJ Role set to: \" + role.getAsMention()).build());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class AnnouncementChannelCommand extends GuildSubCommand{\n-\n-\t\tpublic AnnouncementChannelCommand(){\n-\t\t\tsuper(\"announcementchannel\", \"Sets the announcement channel\");\n-\t\t\taddOptions(\n-\t\t\t\tnew CommandOptionChannel(\"channel\", \"The new announcement channel\").required()\n-\t\t\t);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar channel = options.getTextChannel(\"channel\");\n-\t\t\tia.get(SettingsModule.class).setAnnouncementChannelId(ia.getGuildId(), channel.getIdLong());\n-\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"Announcement channel set to: \" + channel.getAsMention()).build());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class JoinMessageCommand extends GuildSubCommand{\n-\n-\t\tpublic JoinMessageCommand(){\n-\t\t\tsuper(\"joinmessage\", \"Sets or enable/disables join messages\");\n-\t\t\taddOptions(\n-\t\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether join messages are enabled\"),\n-\t\t\t\tnew CommandOptionString(\"message\", \"The join message template\")\n-\t\t\t);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar settings = ia.get(SettingsModule.class);\n-\t\t\tvar returnMessage = \"\";\n-\t\t\tif(options.has(\"enabled\")){\n-\t\t\t\tvar enabled = options.getBoolean(\"enabled\");\n-\t\t\t\tsettings.setJoinMessagesEnabled(ia.getGuildId(), enabled);\n-\t\t\t\treturnMessage += \"Join messages `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\\n\";\n-\t\t\t}\n-\n-\t\t\tif(options.has(\"message\")){\n-\t\t\t\tvar message = options.getString(\"message\");\n-\t\t\t\tsettings.setJoinMessage(ia.getGuildId(), message);\n-\t\t\t\treturnMessage += \"Join message to:\\n\" + message + \"\\n\";\n-\t\t\t}\n-\n-\t\t\tif(returnMessage.isBlank()){\n-\t\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"Join message `\" + (settings.areJoinMessagesEnabled(ia.getGuildId()) ? \"enabled\" : \"disabled\") + \"` and set to:\\n\" + settings.getJoinMessage(ia.getGuildId())).build());\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tia.reply(new InteractionResponse.Builder().setContent(returnMessage).build());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class LeaveMessageCommand extends GuildSubCommand{\n-\n-\t\tpublic LeaveMessageCommand(){\n-\t\t\tsuper(\"leavemessage\", \"Sets or enable/disables leave messages\");\n-\t\t\taddOptions(\n-\t\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether leave messages are enabled\"),\n-\t\t\t\tnew CommandOptionString(\"message\", \"The leave message template\")\n-\t\t\t);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar settings = ia.get(SettingsModule.class);\n-\t\t\tvar returnMessage = \"\";\n-\t\t\tif(options.has(\"enabled\")){\n-\t\t\t\tvar enabled = options.getBoolean(\"enabled\");\n-\t\t\t\tsettings.setLeaveMessagesEnabled(ia.getGuildId(), enabled);\n-\t\t\t\treturnMessage += \"Leave messages `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\\n\";\n-\t\t\t}\n-\n-\t\t\tif(options.has(\"message\")){\n-\t\t\t\tvar message = options.getString(\"message\");\n-\t\t\t\tsettings.setLeaveMessage(ia.getGuildId(), message);\n-\t\t\t\treturnMessage += \"Leave message to:\\n\" + message + \"\\n\";\n-\t\t\t}\n-\n-\t\t\tif(returnMessage.isBlank()){\n-\t\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"Leave message `\" + (settings.areLeaveMessagesEnabled(ia.getGuildId()) ? \"enabled\" : \"disabled\") + \"` and set to:\\n\" + settings.getLeaveMessage(ia.getGuildId())).build());\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tia.reply(new InteractionResponse.Builder().setContent(returnMessage).build());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class NsfwCommand extends GuildSubCommand{\n-\n-\t\tpublic NsfwCommand(){\n-\t\t\tsuper(\"nsfw\", \"Enables/Disables nsfw commands\");\n-\t\t\taddOptions(\n-\t\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether nsfw commands are enabled\").required()\n-\t\t\t);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar enabled = options.getBoolean(\"enabled\");\n-\t\t\tia.get(SettingsModule.class).setNsfwEnabled(ia.getGuildId(), enabled);\n-\t\t\tia.reply((enabled ? \"Enabled\" : \"Disabled\") + \"nsfw commands\");\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class LogMessagesCommand extends GuildSubCommand{\n-\n-\t\tpublic LogMessagesCommand(){\n-\t\t\tsuper(\"logmessages\", \"Sets the logging channel or enable/disables log messages\");\n-\t\t\taddOptions(\n-\t\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether log messages are enabled\"),\n-\t\t\t\tnew CommandOptionChannel(\"channel\", \"The log message channel\")\n-\t\t\t);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar settings = ia.get(SettingsModule.class);\n-\t\t\tvar returnMessage = \"\";\n-\t\t\tif(options.has(\"enabled\")){\n-\t\t\t\tvar enabled = options.getBoolean(\"enabled\");\n-\t\t\t\tsettings.setLogMessagesEnabled(ia.getGuildId(), enabled);\n-\t\t\t\treturnMessage += \"Log messages `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\\n\";\n-\t\t\t}\n-\n-\t\t\tif(options.has(\"channel\")){\n-\t\t\t\tvar channel = options.getTextChannel(\"channel\");\n-\t\t\t\tsettings.setLogChannelId(ia.getGuildId(), channel.getIdLong());\n-\t\t\t\treturnMessage += \"Log channel to:\\n\" + channel.getAsMention() + \"\\n\";\n-\t\t\t}\n-\n-\t\t\tif(returnMessage.isBlank()){\n-\t\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"Log message `\" + (settings.areLogMessagesEnabled(ia.getGuildId()) ? \"enabled\" : \"disabled\") + \"` and send to channel \" +\n-\t\t\t\t\tMessageUtils.getChannelMention(settings.getLogChannelId(ia.getGuildId()))).build());\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tia.reply(new InteractionResponse.Builder().setContent(returnMessage).build());\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class SnipesCommand extends SubCommandGroup{\n-\n-\t\tpublic SnipesCommand(){\n-\t\t\tsuper(\"snipes\", \"Used to disable snipes\");\n-\t\t\taddOptions(\n-\t\t\t\tnew ChannelCommand(),\n-\t\t\t\tnew EnableCommand()\n-\t\t\t);\n-\t\t}\n-\n-\t\tprivate static class ChannelCommand extends GuildSubCommand{\n-\n-\t\t\tpublic ChannelCommand(){\n-\t\t\t\tsuper(\"channel\", \"Used to enable/disable snipes in a specific channel\");\n-\t\t\t\taddOptions(\n-\t\t\t\t\tnew CommandOptionChannel(\"channel\", \"The channel to enable/disable snipes\").required(),\n-\t\t\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether to enable/disable snipes\").required()\n-\t\t\t\t);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\t\tvar channel = options.getTextChannel(\"channel\");\n-\t\t\t\tvar enabled = options.getBoolean(\"enabled\");\n-\t\t\t\tia.get(SettingsModule.class).setSnipesDisabledInChannel(ia.getGuildId(), channel.getIdLong(), !enabled);\n-\t\t\t\tia.reply(\"Snipes `\" + (enabled ? \"enabled\" : \"disabled\") + \"` in \" + channel.getAsMention());\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tprivate static class EnableCommand extends GuildSubCommand{\n-\n-\t\t\tpublic EnableCommand(){\n-\t\t\t\tsuper(\"enable\", \"Used to globally disable snipes\");\n-\t\t\t\taddOptions(\n-\t\t\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether to enable/disable snipes globally\")\n-\t\t\t\t);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\t\tvar enabled = options.getBoolean(\"enabled\");\n-\t\t\t\tia.get(SettingsModule.class).setSnipesEnabled(ia.getGuildId(), enabled);\n-\t\t\t\tia.reply(\"Snipes globally `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\");\n-\t\t\t}\n-\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class StreamAnnouncementsCommand extends SubCommandGroup{\n-\n-\t\tpublic StreamAnnouncementsCommand(){\n-\t\t\tsuper(\"streamannouncements\", \"Used to configure stream announcements\");\n-\t\t\taddOptions(\n-\t\t\t\tnew AddCommand(),\n-\t\t\t\tnew RemoveCommand(),\n-\t\t\t\tnew ListCommand(),\n-\t\t\t\tnew MessageCommand(),\n-\t\t\t\tnew ChannelCommand()\n-\t\t\t);\n-\t\t}\n-\n-\t\tprivate static class AddCommand extends GuildSubCommand{\n-\n-\t\t\tpublic AddCommand(){\n-\t\t\t\tsuper(\"add\", \"Adds a new stream announcement for twitch\");\n-\t\t\t\taddOptions(\n-\t\t\t\t\t/*new CommandOptionInteger(\"service\", \"Which service the stream is from\").required()\n-\t\t\t\t\t\t.addChoices(\n-\t\t\t\t\t\t\tnew CommandOptionChoice<>(\"twitch\", 1)/*,\n-\t\t\t\t\t\t\t\t\t\tnew CommandOptionChoice<>(\"youtube\", 2)\n-\t\t\t\t\t\t),*/\n-\t\t\t\t\tnew CommandOptionString(\"username\", \"The username of the streamer\").required()\n-\t\t\t\t);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\t\tvar type = StreamType.TWITCH;//StreamType.byId(options.getInt(\"service\"));\n-\t\t\t\tvar username = options.getString(\"username\");\n-\t\t\t\tvar user = ia.get(StreamAnnouncementModule.class).add(username, ia.getGuildId(), type);\n-\t\t\t\tif(user == null){\n-\t\t\t\t\tia.error(\"No user found with username \" + username + \"for \" + type.getName());\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tia.reply(\"Stream announcement for \" + type.getName() + \" with username: \" + user.getDisplayName() + \" added\");\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tprivate static class RemoveCommand extends GuildSubCommand{\n-\n-\t\t\tpublic RemoveCommand(){\n-\t\t\t\tsuper(\"remove\", \"Removes a stream announcement\");\n-\t\t\t\taddOptions(\n-\t\t\t\t\t/*new CommandOptionInteger(\"service\", \"Which service the stream is from\").required()\n-\t\t\t\t\t\t.addChoices(\n-\t\t\t\t\t\t\tnew CommandOptionChoice<>(\"twitch\", 1)/*,\n-\t\t\t\t\t\t\tnew CommandOptionChoice<>(\"youtube\", 0)\n-\t\t\t\t\t\t),*/\n-\t\t\t\t\tnew CommandOptionString(\"username\", \"The username of the streamer\").required()\n-\t\t\t\t);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\t\tvar type = StreamType.TWITCH;//StreamType.byId(options.getInt(\"service\"));\n-\t\t\t\tvar username = options.getString(\"username\");\n-\t\t\t\tvar success = ia.get(StreamAnnouncementModule.class).remove(username, ia.getGuildId(), type);\n-\t\t\t\tif(!success){\n-\t\t\t\t\tia.error(\"Could not find stream announcement for \" + type.getName() + \" with username: \" + username + \". Check your spelling\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tia.reply(\"Stream announcement for \" + type.getName() + \" with username: \" + username + \" removed\");\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tprivate static class ListCommand extends GuildSubCommand{\n-\n-\t\t\tpublic ListCommand(){\n-\t\t\t\tsuper(\"list\", \"Lists stream announcements\");\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\t\tvar streamAnnouncements = ia.get(StreamAnnouncementModule.class).get(ia.getGuildId());\n-\t\t\t\tif(streamAnnouncements.isEmpty()){\n-\t\t\t\t\tia.error(\"No stream announcements found. Create them with `/settings streamannouncements add <service> <username>`\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tia.reply(\"**Stream Announcements:**\\n\" + streamAnnouncements.stream().map(sa -> MessageUtils.maskLink(sa.getUserName(), \"https://twitch.tv/\" + sa.getUserName()) + \" on \" + StreamType.byId(sa.getStreamType()).getName()).collect(Collectors.joining(\"\\n\")));\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tprivate static class MessageCommand extends GuildSubCommand{\n-\n-\t\t\tpublic MessageCommand(){\n-\t\t\t\tsuper(\"message\", \"Sets the stream announcement message template\");\n-\t\t\t\taddOptions(\n-\t\t\t\t\tnew CommandOptionString(\"message\", \"The message template\").required()\n-\t\t\t\t);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\t\tvar message = options.getString(\"message\");\n-\n-\t\t\t\tia.get(SettingsModule.class).setStreamAnnouncementMessage(ia.getGuildId(), message);\n-\t\t\t\tia.reply(\"Set stream announcements template to:\\n\" + message);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tprivate static class ChannelCommand extends GuildSubCommand{\n-\n-\t\t\tpublic ChannelCommand(){\n-\t\t\t\tsuper(\"channel\", \"Sets the stream announcement channel\");\n-\t\t\t\taddOptions(\n-\t\t\t\t\tnew CommandOptionChannel(\"channel\", \"The channel which stream announcements should get send to\").required()\n-\t\t\t\t);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\t\tvar channel = options.getTextChannel(\"channel\");\n-\t\t\t\tia.get(SettingsModule.class).setStreamAnnouncementChannelId(ia.getGuildId(), channel.getIdLong());\n-\t\t\t\tia.reply(\"Stream announcements now get send to \" + channel.getAsMention());\n-\t\t\t}\n-\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class RoleSaverCommand extends GuildSubCommand{\n-\n-\t\tpublic RoleSaverCommand(){\n-\t\t\tsuper(\"rolesaver\", \"Enabled/Disables saving of user roles on leave\");\n-\t\t\taddOptions(\n-\t\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether role saving is enabled or disabled\").required()\n-\t\t\t);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run(Options options, GuildInteraction ia){\n-\t\t\tvar enabled = options.getBoolean(\"enabled\");\n-\t\t\tia.get(SettingsModule.class).setRoleSaverEnabled(ia.getGuildId(), enabled);\n-\t\t\tia.reply((enabled ? \"Enabled\" : \"Disabled\") + \" role saving\");\n-\t\t}\n-\n-\t}\n-\n }"
  },
  {
    "sha": "4da5a885264973b1ab9cb413589c3eb0d475b193",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/AnnouncementChannelCommand.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/AnnouncementChannelCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/AnnouncementChannelCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/AnnouncementChannelCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,26 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionChannel;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+import de.kittybot.kittybot.slashcommands.interaction.response.InteractionResponse;\n+\n+public class AnnouncementChannelCommand extends GuildSubCommand{\n+\n+\tpublic AnnouncementChannelCommand(){\n+\t\tsuper(\"announcementchannel\", \"Sets the announcement channel\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionChannel(\"channel\", \"The new announcement channel\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar channel = options.getTextChannel(\"channel\");\n+\t\tia.get(SettingsModule.class).setAnnouncementChannelId(ia.getGuildId(), channel.getIdLong());\n+\t\tia.reply(new InteractionResponse.Builder().setContent(\"Announcement channel set to: \" + channel.getAsMention()).build());\n+\t}\n+\n+}"
  },
  {
    "sha": "55f4cf26bf36e723ba7f8813cd27ba962ce15cf5",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/DJRoleCommand.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/DJRoleCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/DJRoleCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/DJRoleCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,26 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionRole;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+import de.kittybot.kittybot.slashcommands.interaction.response.InteractionResponse;\n+\n+public class DJRoleCommand extends GuildSubCommand{\n+\n+\tpublic DJRoleCommand(){\n+\t\tsuper(\"djrole\", \"Sets the dj role\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionRole(\"role\", \"The new dj role\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar role = options.getRole(\"role\");\n+\t\tia.get(SettingsModule.class).setDjRoleId(ia.getGuildId(), role.getIdLong());\n+\t\tia.reply(new InteractionResponse.Builder().setContent(\"DJ Role set to: \" + role.getAsMention()).build());\n+\t}\n+\n+}"
  },
  {
    "sha": "e06242aa1223e6817372c60e57b3c9c93fe8a6b5",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/JoinMessageCommand.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/JoinMessageCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/JoinMessageCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/JoinMessageCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,44 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionBoolean;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionString;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+import de.kittybot.kittybot.slashcommands.interaction.response.InteractionResponse;\n+\n+public class JoinMessageCommand extends GuildSubCommand{\n+\n+\tpublic JoinMessageCommand(){\n+\t\tsuper(\"joinmessage\", \"Sets or enable/disables join messages\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether join messages are enabled\"),\n+\t\t\tnew CommandOptionString(\"message\", \"The join message template\")\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar settings = ia.get(SettingsModule.class);\n+\t\tvar returnMessage = \"\";\n+\t\tif(options.has(\"enabled\")){\n+\t\t\tvar enabled = options.getBoolean(\"enabled\");\n+\t\t\tsettings.setJoinMessagesEnabled(ia.getGuildId(), enabled);\n+\t\t\treturnMessage += \"Join messages `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\\n\";\n+\t\t}\n+\n+\t\tif(options.has(\"message\")){\n+\t\t\tvar message = options.getString(\"message\");\n+\t\t\tsettings.setJoinMessage(ia.getGuildId(), message);\n+\t\t\treturnMessage += \"Join message to:\\n\" + message + \"\\n\";\n+\t\t}\n+\n+\t\tif(returnMessage.isBlank()){\n+\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"Join message `\" + (settings.areJoinMessagesEnabled(ia.getGuildId()) ? \"enabled\" : \"disabled\") + \"` and set to:\\n\" + settings.getJoinMessage(ia.getGuildId())).build());\n+\t\t\treturn;\n+\t\t}\n+\t\tia.reply(new InteractionResponse.Builder().setContent(returnMessage).build());\n+\t}\n+\n+}"
  },
  {
    "sha": "8d38e776522b3927b08eaa5c0c346acc82fdbdb2",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/LeaveMessageCommand.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/LeaveMessageCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/LeaveMessageCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/LeaveMessageCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,44 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionBoolean;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionString;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+import de.kittybot.kittybot.slashcommands.interaction.response.InteractionResponse;\n+\n+public class LeaveMessageCommand extends GuildSubCommand{\n+\n+\tpublic LeaveMessageCommand(){\n+\t\tsuper(\"leavemessage\", \"Sets or enable/disables leave messages\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether leave messages are enabled\"),\n+\t\t\tnew CommandOptionString(\"message\", \"The leave message template\")\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar settings = ia.get(SettingsModule.class);\n+\t\tvar returnMessage = \"\";\n+\t\tif(options.has(\"enabled\")){\n+\t\t\tvar enabled = options.getBoolean(\"enabled\");\n+\t\t\tsettings.setLeaveMessagesEnabled(ia.getGuildId(), enabled);\n+\t\t\treturnMessage += \"Leave messages `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\\n\";\n+\t\t}\n+\n+\t\tif(options.has(\"message\")){\n+\t\t\tvar message = options.getString(\"message\");\n+\t\t\tsettings.setLeaveMessage(ia.getGuildId(), message);\n+\t\t\treturnMessage += \"Leave message to:\\n\" + message + \"\\n\";\n+\t\t}\n+\n+\t\tif(returnMessage.isBlank()){\n+\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"Leave message `\" + (settings.areLeaveMessagesEnabled(ia.getGuildId()) ? \"enabled\" : \"disabled\") + \"` and set to:\\n\" + settings.getLeaveMessage(ia.getGuildId())).build());\n+\t\t\treturn;\n+\t\t}\n+\t\tia.reply(new InteractionResponse.Builder().setContent(returnMessage).build());\n+\t}\n+\n+}"
  },
  {
    "sha": "0dcfd6fe3932fde94385e452d7f557cef43187b0",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/ListCommand.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/ListCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/ListCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/ListCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,36 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.objects.enums.Emoji;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+import de.kittybot.kittybot.utils.Config;\n+import de.kittybot.kittybot.utils.MessageUtils;\n+\n+public class ListCommand extends GuildSubCommand{\n+\n+\tpublic ListCommand(){\n+\t\tsuper(\"list\", \"Lists the current settings\");\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar guildId = ia.getGuildId();\n+\t\tvar settings = ia.get(SettingsModule.class).getSettings(guildId);\n+\t\tia.reply(builder -> builder\n+\t\t\t\t.setAuthor(\"Guild settings:\", Config.ORIGIN_URL + \"/guilds/\" + guildId + \"/dashboard\", Emoji.SETTINGS.getUrl())\n+\t\t\t\t.addField(\"Announcement Channel: \", settings.getAnnouncementChannel(), false)\n+\t\t\t\t.addField(\"Join Messages: \" + MessageUtils.getBoolEmote(settings.areJoinMessagesEnabled()), settings.getJoinMessage(), false)\n+\t\t\t\t.addField(\"Leave Messages: \" + MessageUtils.getBoolEmote(settings.areLeaveMessagesEnabled()), settings.getLeaveMessage(), false)\n+\t\t\t\t.addField(\"Stream Announcement Channel:\", settings.getStreamAnnouncementChannel(), false)\n+\t\t\t\t.addField(\"DJ Role: \", settings.getDjRole(), false)\n+\t\t\t\t.addField(\"NSFW Enabled: \", MessageUtils.getBoolEmote(settings.isNsfwEnabled()), false)\n+\t\t\t\t.addField(\"Log Messages: \" + MessageUtils.getBoolEmote(settings.areLogMessagesEnabled()), settings.getLogChannel(), false)\n+\t\t\t\t.addField(\"Snipes Enabled:\", MessageUtils.getBoolEmote(settings.areSnipesEnabled()), false)\n+\t\t\t\t.addField(\"Role Saver Enabled:\", MessageUtils.getBoolEmote(settings.isRoleSaverEnabled()), false)\n+\t\t\t//.addField(\"Inactive Role: \" + TimeUtils.formatDurationDHMS(settings.getInactiveDuration()), settings.getLogChannel(), false)\n+\t\t);\n+\t}\n+\n+}"
  },
  {
    "sha": "dff99ac254e55b9fea86493526b5c98bf1a7b61c",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/LogMessagesCommand.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/LogMessagesCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/LogMessagesCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/LogMessagesCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,46 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionBoolean;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionChannel;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+import de.kittybot.kittybot.slashcommands.interaction.response.InteractionResponse;\n+import de.kittybot.kittybot.utils.MessageUtils;\n+\n+public class LogMessagesCommand extends GuildSubCommand{\n+\n+\tpublic LogMessagesCommand(){\n+\t\tsuper(\"logmessages\", \"Sets the logging channel or enable/disables log messages\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether log messages are enabled\"),\n+\t\t\tnew CommandOptionChannel(\"channel\", \"The log message channel\")\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar settings = ia.get(SettingsModule.class);\n+\t\tvar returnMessage = \"\";\n+\t\tif(options.has(\"enabled\")){\n+\t\t\tvar enabled = options.getBoolean(\"enabled\");\n+\t\t\tsettings.setLogMessagesEnabled(ia.getGuildId(), enabled);\n+\t\t\treturnMessage += \"Log messages `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\\n\";\n+\t\t}\n+\n+\t\tif(options.has(\"channel\")){\n+\t\t\tvar channel = options.getTextChannel(\"channel\");\n+\t\t\tsettings.setLogChannelId(ia.getGuildId(), channel.getIdLong());\n+\t\t\treturnMessage += \"Log channel to:\\n\" + channel.getAsMention() + \"\\n\";\n+\t\t}\n+\n+\t\tif(returnMessage.isBlank()){\n+\t\t\tia.reply(new InteractionResponse.Builder().setContent(\"Log message `\" + (settings.areLogMessagesEnabled(ia.getGuildId()) ? \"enabled\" : \"disabled\") + \"` and send to channel \" +\n+\t\t\t\tMessageUtils.getChannelMention(settings.getLogChannelId(ia.getGuildId()))).build());\n+\t\t\treturn;\n+\t\t}\n+\t\tia.reply(new InteractionResponse.Builder().setContent(returnMessage).build());\n+\t}\n+\n+}"
  },
  {
    "sha": "08043badf9bf5680f991048a58d6cb7af74dfe87",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/NsfwCommand.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/NsfwCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/NsfwCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/NsfwCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,25 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionBoolean;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class NsfwCommand extends GuildSubCommand{\n+\n+\tpublic NsfwCommand(){\n+\t\tsuper(\"nsfw\", \"Enables/Disables nsfw commands\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether nsfw commands are enabled\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar enabled = options.getBoolean(\"enabled\");\n+\t\tia.get(SettingsModule.class).setNsfwEnabled(ia.getGuildId(), enabled);\n+\t\tia.reply((enabled ? \"Enabled\" : \"Disabled\") + \"nsfw commands\");\n+\t}\n+\n+}"
  },
  {
    "sha": "2595011ce750b76e40e275ebf4b821a5a810a45e",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/RoleSaverCommand.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/RoleSaverCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/RoleSaverCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/RoleSaverCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,25 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionBoolean;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class RoleSaverCommand extends GuildSubCommand{\n+\n+\tpublic RoleSaverCommand(){\n+\t\tsuper(\"rolesaver\", \"Enabled/Disables saving of user roles on leave\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether role saving is enabled or disabled\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar enabled = options.getBoolean(\"enabled\");\n+\t\tia.get(SettingsModule.class).setRoleSaverEnabled(ia.getGuildId(), enabled);\n+\t\tia.reply((enabled ? \"Enabled\" : \"Disabled\") + \" role saving\");\n+\t}\n+\n+}"
  },
  {
    "sha": "f27ae294ecb22c6395a96771ca85a4841f9d57a4",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/SnipesCommand.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/SnipesCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/SnipesCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/SnipesCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,17 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.commands.admin.settings.snipes.ChannelCommand;\n+import de.kittybot.kittybot.commands.admin.settings.snipes.EnableCommand;\n+import de.kittybot.kittybot.slashcommands.application.options.SubCommandGroup;\n+\n+public class SnipesCommand extends SubCommandGroup{\n+\n+\tpublic SnipesCommand(){\n+\t\tsuper(\"snipes\", \"Used to disable snipes\");\n+\t\taddOptions(\n+\t\t\tnew ChannelCommand(),\n+\t\t\tnew EnableCommand()\n+\t\t);\n+\t}\n+\n+}"
  },
  {
    "sha": "491efa464a48f41453f5971fca8ac93141e81fdd",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/StreamsCommand.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/StreamsCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/StreamsCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/StreamsCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,20 @@\n+package de.kittybot.kittybot.commands.admin.settings;\n+\n+import de.kittybot.kittybot.commands.admin.settings.streams.*;\n+import de.kittybot.kittybot.commands.admin.settings.streams.ListCommand;\n+import de.kittybot.kittybot.slashcommands.application.options.SubCommandGroup;\n+\n+public class StreamsCommand extends SubCommandGroup{\n+\n+\tpublic StreamsCommand(){\n+\t\tsuper(\"streams\", \"Used to configure stream announcements\");\n+\t\taddOptions(\n+\t\t\tnew AddCommand(),\n+\t\t\tnew RemoveCommand(),\n+\t\t\tnew ListCommand(),\n+\t\t\tnew MessageCommand(),\n+\t\t\tnew ChannelCommand()\n+\t\t);\n+\t}\n+\n+}"
  },
  {
    "sha": "708f5c96c334a9f2a77c0ad3e22c21324a3a20a6",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/ChannelCommand.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/ChannelCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/ChannelCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/ChannelCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,28 @@\n+package de.kittybot.kittybot.commands.admin.settings.snipes;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionBoolean;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionChannel;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class ChannelCommand extends GuildSubCommand{\n+\n+\tpublic ChannelCommand(){\n+\t\tsuper(\"channel\", \"Used to enable/disable snipes in a specific channel\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionChannel(\"channel\", \"The channel to enable/disable snipes\").required(),\n+\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether to enable/disable snipes\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar channel = options.getTextChannel(\"channel\");\n+\t\tvar enabled = options.getBoolean(\"enabled\");\n+\t\tia.get(SettingsModule.class).setSnipesDisabledInChannel(ia.getGuildId(), channel.getIdLong(), !enabled);\n+\t\tia.reply(\"Snipes `\" + (enabled ? \"enabled\" : \"disabled\") + \"` in \" + channel.getAsMention());\n+\t}\n+\n+}"
  },
  {
    "sha": "3953867621d8dbc65d5045ce81e2c07d72223ce5",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/EnableCommand.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/EnableCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/EnableCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/snipes/EnableCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,25 @@\n+package de.kittybot.kittybot.commands.admin.settings.snipes;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionBoolean;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class EnableCommand extends GuildSubCommand{\n+\n+\tpublic EnableCommand(){\n+\t\tsuper(\"enable\", \"Used to globally disable snipes\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionBoolean(\"enabled\", \"Whether to enable/disable snipes globally\")\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar enabled = options.getBoolean(\"enabled\");\n+\t\tia.get(SettingsModule.class).setSnipesEnabled(ia.getGuildId(), enabled);\n+\t\tia.reply(\"Snipes globally `\" + (enabled ? \"enabled\" : \"disabled\") + \"`\");\n+\t}\n+\n+}"
  },
  {
    "sha": "1c569364e0e88809d7afa7089bea21080ad5ec25",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/AddCommand.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/AddCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/AddCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/AddCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,36 @@\n+package de.kittybot.kittybot.commands.admin.settings.streams;\n+\n+import de.kittybot.kittybot.modules.StreamModule;\n+import de.kittybot.kittybot.objects.streams.StreamType;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionString;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class AddCommand extends GuildSubCommand{\n+\n+\tpublic AddCommand(){\n+\t\tsuper(\"add\", \"Adds a new stream announcement for twitch\");\n+\t\taddOptions(\n+/*new CommandOptionInteger(\"service\", \"Which service the stream is from\").required()\n+.addChoices(\n+new CommandOptionChoice<>(\"twitch\", 1)/*,\n+new CommandOptionChoice<>(\"youtube\", 2)\n+),*/\n+\t\t\tnew CommandOptionString(\"username\", \"The username of the streamer\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar type = StreamType.TWITCH;//StreamType.byId(options.getInt(\"service\"));\n+\t\tvar username = options.getString(\"username\");\n+\t\tvar user = ia.get(StreamModule.class).add(username, ia.getGuildId(), type);\n+\t\tif(user == null){\n+\t\t\tia.error(\"No user found with username \" + username + \"for \" + type.getName());\n+\t\t\treturn;\n+\t\t}\n+\t\tia.reply(\"Stream announcement for \" + type.getName() + \" with username: \" + user.getDisplayName() + \" added\");\n+\t}\n+\n+}"
  },
  {
    "sha": "74a395079de6f737001f234b3dcf226696e5aa57",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ChannelCommand.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ChannelCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ChannelCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ChannelCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,25 @@\n+package de.kittybot.kittybot.commands.admin.settings.streams;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionChannel;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class ChannelCommand extends GuildSubCommand{\n+\n+\tpublic ChannelCommand(){\n+\t\tsuper(\"channel\", \"Sets the stream announcement channel\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionChannel(\"channel\", \"The channel which stream announcements should get send to\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar channel = options.getTextChannel(\"channel\");\n+\t\tia.get(SettingsModule.class).setStreamAnnouncementChannelId(ia.getGuildId(), channel.getIdLong());\n+\t\tia.reply(\"Stream announcements now get send to \" + channel.getAsMention());\n+\t}\n+\n+}"
  },
  {
    "sha": "57ee2283045accedabd001daa3d000a87b7181dc",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ListCommand.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ListCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ListCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/ListCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,28 @@\n+package de.kittybot.kittybot.commands.admin.settings.streams;\n+\n+import de.kittybot.kittybot.modules.StreamModule;\n+import de.kittybot.kittybot.objects.streams.StreamType;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+import de.kittybot.kittybot.utils.MessageUtils;\n+\n+import java.util.stream.Collectors;\n+\n+public class ListCommand extends GuildSubCommand{\n+\n+\tpublic ListCommand(){\n+\t\tsuper(\"list\", \"Lists stream announcements\");\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar streamAnnouncements = ia.get(StreamModule.class).getStreamAnnouncements(ia.getGuildId());\n+\t\tif(streamAnnouncements.isEmpty()){\n+\t\t\tia.error(\"No stream announcements found. Create them with `/settings streamannouncements add <service> <username>`\");\n+\t\t\treturn;\n+\t\t}\n+\t\tia.reply(\"**Stream Announcements:**\\n\" + streamAnnouncements.stream().map(sa -> MessageUtils.maskLink(sa.getUserName(), \"https://twitch.tv/\" + sa.getUserName()) + \" on \" + sa.getStreamType().getName()).collect(Collectors.joining(\"\\n\")));\n+\t}\n+\n+}"
  },
  {
    "sha": "13a4f75c93d3bc7003d25fb5ea625c482db14a5e",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/MessageCommand.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/MessageCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/MessageCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/MessageCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,26 @@\n+package de.kittybot.kittybot.commands.admin.settings.streams;\n+\n+import de.kittybot.kittybot.modules.SettingsModule;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionString;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class MessageCommand extends GuildSubCommand{\n+\n+\tpublic MessageCommand(){\n+\t\tsuper(\"message\", \"Sets the stream announcement message template\");\n+\t\taddOptions(\n+\t\t\tnew CommandOptionString(\"message\", \"The message template\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar message = options.getString(\"message\");\n+\n+\t\tia.get(SettingsModule.class).setStreamAnnouncementMessage(ia.getGuildId(), message);\n+\t\tia.reply(\"Set stream announcements template to:\\n\" + message);\n+\t}\n+\n+}"
  },
  {
    "sha": "47770f86b59fdbe7c061089115dbd6c55d7b12e4",
    "filename": "src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/RemoveCommand.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/RemoveCommand.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/RemoveCommand.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/commands/admin/settings/streams/RemoveCommand.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,36 @@\n+package de.kittybot.kittybot.commands.admin.settings.streams;\n+\n+import de.kittybot.kittybot.modules.StreamModule;\n+import de.kittybot.kittybot.objects.streams.StreamType;\n+import de.kittybot.kittybot.slashcommands.application.options.CommandOptionString;\n+import de.kittybot.kittybot.slashcommands.application.options.GuildSubCommand;\n+import de.kittybot.kittybot.slashcommands.interaction.GuildInteraction;\n+import de.kittybot.kittybot.slashcommands.interaction.Options;\n+\n+public class RemoveCommand extends GuildSubCommand{\n+\n+\tpublic RemoveCommand(){\n+\t\tsuper(\"remove\", \"Removes a stream announcement\");\n+\t\taddOptions(\n+\t\t\t/*new CommandOptionInteger(\"service\", \"Which service the stream is from\").required()\n+\t\t\t.addChoices(\n+\t\t\tnew CommandOptionChoice<>(\"twitch\", 1)/*,\n+\t\t\tnew CommandOptionChoice<>(\"youtube\", 0)\n+\t\t\t),*/\n+\t\t\tnew CommandOptionString(\"username\", \"The username of the streamer\").required()\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void run(Options options, GuildInteraction ia){\n+\t\tvar type = StreamType.TWITCH;//StreamType.byId(options.getInt(\"service\"));\n+\t\tvar username = options.getString(\"username\");\n+\t\tvar success = ia.get(StreamModule.class).remove(username, ia.getGuildId(), type);\n+\t\tif(!success){\n+\t\t\tia.error(\"Could not find stream announcement for \" + type.getName() + \" with username: \" + username + \". Check your spelling\");\n+\t\t\treturn;\n+\t\t}\n+\t\tia.reply(\"Stream announcement for \" + type.getName() + \" with username: \" + username + \" removed\");\n+\t}\n+\n+}"
  },
  {
    "sha": "0743b9fc11cb68a877ada9777928f326988dece3",
    "filename": "src/main/java/de/kittybot/kittybot/main/KittyBot.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/main/KittyBot.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/main/KittyBot.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/main/KittyBot.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -61,7 +61,7 @@ public KittyBot() throws IOException, MissingConfigValuesException, LoginExcepti\n \t\t\t\tCacheFlag.ROLE_TAGS\n \t\t\t)\n \t\t\t.setMemberCachePolicy(MemberCachePolicy.VOICE)\n-\t\t\t.setChunkingFilter(ChunkingFilter.NONE)\n+\t\t\t.setChunkingFilter(ChunkingFilter.include(123456789L))\n \t\t\t.addEventListeners(modules.getModules())\n \t\t\t.addEventListeners(new BLHEventListener(botListHandler))\n \t\t\t.setRawEventsEnabled(true)"
  },
  {
    "sha": "8f0c6a53acf1f4098d5cf872ae02c760d1191c40",
    "filename": "src/main/java/de/kittybot/kittybot/modules/DatabaseModule.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/modules/DatabaseModule.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/modules/DatabaseModule.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/modules/DatabaseModule.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -11,6 +11,7 @@\n import org.jooq.conf.Settings;\n import org.jooq.impl.DSL;\n import org.jooq.impl.DefaultConfiguration;\n+import org.jooq.tools.jdbc.JDBCUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -38,7 +39,6 @@ public void onEnable(){\n \t\t\t\"snipe_disabled_channels\",\n \t\t\t\"bot_ignored_members\",\n \t\t\t\"stream_users\",\n-\t\t\t\"stream_user_events\",\n \t\t\t\"reactive_messages\",\n \t\t\t\"self_assignable_role_messages\",\n \t\t\t\"notifications\","
  },
  {
    "sha": "ba09c6c92be1191f4e7f990d1305f93eaea76db4",
    "filename": "src/main/java/de/kittybot/kittybot/modules/StreamAnnouncementModule.java",
    "status": "removed",
    "additions": 0,
    "deletions": 186,
    "changes": 186,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/62052b9ce4ca7dbc42ec89d63352de5db9d8a242/src/main/java/de/kittybot/kittybot/modules/StreamAnnouncementModule.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/62052b9ce4ca7dbc42ec89d63352de5db9d8a242/src/main/java/de/kittybot/kittybot/modules/StreamAnnouncementModule.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/modules/StreamAnnouncementModule.java?ref=62052b9ce4ca7dbc42ec89d63352de5db9d8a242",
    "patch": "@@ -1,186 +0,0 @@\n-package de.kittybot.kittybot.modules;\n-\n-import de.kittybot.kittybot.jooq.tables.records.StreamUsersRecord;\n-import de.kittybot.kittybot.objects.enums.AnnouncementType;\n-import de.kittybot.kittybot.objects.module.Module;\n-import de.kittybot.kittybot.objects.streams.Stream;\n-import de.kittybot.kittybot.objects.streams.StreamType;\n-import de.kittybot.kittybot.objects.streams.twitch.TwitchUser;\n-import de.kittybot.kittybot.objects.streams.twitch.TwitchWrapper;\n-import de.kittybot.kittybot.objects.streams.youtube.YouTubeWrapper;\n-import de.kittybot.kittybot.utils.Colors;\n-import de.kittybot.kittybot.utils.Config;\n-import net.dv8tion.jda.api.EmbedBuilder;\n-import net.dv8tion.jda.api.events.ReadyEvent;\n-import org.jetbrains.annotations.NotNull;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.URL;\n-import java.time.Instant;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-\n-import static de.kittybot.kittybot.jooq.Tables.STREAM_USERS;\n-\n-public class StreamAnnouncementModule extends Module{\n-\n-\tprivate static final Logger LOG = LoggerFactory.getLogger(StreamAnnouncementModule.class);\n-\n-\tprivate static final Set<Class<? extends Module>> DEPENDENCIES = Set.of(DatabaseModule.class);\n-\n-\tprivate List<StreamUsersRecord> streamAnnouncements;\n-\tprivate TwitchWrapper twitchWrapper;\n-\tprivate YouTubeWrapper youTubeWrapper;\n-\n-\t@Override\n-\tpublic Set<Class<? extends Module>> getDependencies(){\n-\t\treturn DEPENDENCIES;\n-\t}\n-\n-\t@Override\n-\tpublic void onEnable(){\n-\t\tif(Config.TWITCH_CLIENT_ID.isBlank() || Config.TWITCH_CLIENT_SECRET.isBlank()){\n-\t\t\tLOG.error(\"Twitch disabled because twitch_client_id and twitch_client_secret are missing\");\n-\t\t}\n-\t\telse{\n-\t\t\tthis.twitchWrapper = new TwitchWrapper(Config.TWITCH_CLIENT_ID, Config.TWITCH_CLIENT_SECRET, this.modules.getHttpClient());\n-\t\t}\n-\t\ttry(var ctx = this.modules.get(DatabaseModule.class).getCtx().selectFrom(STREAM_USERS)){\n-\t\t\tvar result = ctx.fetch();\n-\t\t\tresult.detach();\n-\t\t\tthis.streamAnnouncements = result;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void onReady(@NotNull ReadyEvent event){\n-\t\tthis.modules.scheduleAtFixedRate(this::checkStreams, 0, 30, TimeUnit.SECONDS);\n-\t}\n-\n-\tprivate void checkStreams(){\n-\t\tcheckTwitch();\n-\t\tcheckYouTube();\n-\t}\n-\n-\tprivate void checkTwitch(){\n-\t\tvar userIds = this.streamAnnouncements.stream().filter(streamAnnouncement -> streamAnnouncement.getStreamType() == StreamType.TWITCH.getId())\n-\t\t\t.map(StreamUsersRecord::getUserId).collect(Collectors.toList());\n-\t\tif(userIds.isEmpty()){\n-\t\t\treturn;\n-\t\t}\n-\t\tvar streams = this.twitchWrapper.getStreams(userIds, false);\n-\n-\t\tfor(var streamAnnouncement : this.streamAnnouncements){\n-\t\t\tvar stream = streams.stream().filter(st -> st.getUserId() == streamAnnouncement.getUserId()).findFirst();\n-\t\t\tif(stream.isPresent() && !streamAnnouncement.getIsLive()){\n-\t\t\t\tsetLiveStatus(streamAnnouncement, true);\n-\t\t\t\t// send online\n-\t\t\t\tsendAnnouncementMessage(streamAnnouncement, stream.get(), AnnouncementType.START);\n-\t\t\t}\n-\t\t\tif(stream.isEmpty() && streamAnnouncement.getIsLive()){\n-\t\t\t\tsetLiveStatus(streamAnnouncement, false);\n-\t\t\t\t// send offline\n-\t\t\t\t//sendAnnouncementMessage(streamAnnouncement, null, AnnouncementType.END);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void checkYouTube(){\n-\n-\t}\n-\n-\tprivate void setLiveStatus(StreamUsersRecord record, boolean status){\n-\t\trecord.setIsLive(status);\n-\t\trecord.attach(this.modules.get(DatabaseModule.class).getConfiguration());\n-\t\trecord.store();\n-\t\trecord.detach();\n-\t}\n-\n-\tprivate void sendAnnouncementMessage(StreamUsersRecord streamAnnouncement, Stream stream, AnnouncementType announcementType){\n-\t\tvar guildId = streamAnnouncement.getGuildId();\n-\t\tvar guild = this.modules.getGuildById(guildId);\n-\t\tif(guild == null){\n-\t\t\treturn;\n-\t\t}\n-\t\tvar settings = this.modules.get(SettingsModule.class).getSettings(guildId);\n-\n-\t\tvar channel = guild.getTextChannelById(settings.getStreamAnnouncementChannelId());\n-\t\tif(channel == null || !channel.canTalk()){\n-\t\t\treturn;\n-\t\t}\n-\t\tvar embed = new EmbedBuilder();\n-\t\tvar streamThumbnailUrl = stream.getThumbnailUrl(320, 180);\n-\t\tInputStream thumbnail;\n-\t\ttry{\n-\t\t\tthumbnail = new URL(streamThumbnailUrl).openStream();\n-\t\t}\n-\t\tcatch(IOException e){\n-\t\t\tLOG.error(\"Failed to get thumbnail url\", e);\n-\t\t\treturn;\n-\t\t}\n-\t\tswitch(announcementType){\n-\t\t\tcase END:\n-\t\t\t\tembed.setAuthor(stream.getUserName(), stream.getStreamUrl());\n-\t\t\t\tbreak;\n-\t\t\tcase START:\n-\t\t\t\tembed.setTitle(stream.getStreamTitle(), stream.getStreamUrl())\n-\t\t\t\t\t.setImage(\"attachment://thumbnail.png\")\n-\t\t\t\t\t.setThumbnail(stream.getGame().getThumbnailUrl(144, 192))\n-\t\t\t\t\t.addField(\"Game\", stream.getGame().getName(), true);\n-\t\t\t\tbreak;\n-\t\t}\n-\t\tchannel.sendMessage(settings.getStreamAnnouncementMessage().replace(\"${user}\", stream.getUserName()))\n-\t\t\t.embed(embed\n-\t\t\t\t.setTimestamp(Instant.now())\n-\t\t\t\t.setColor(Colors.TWITCH_PURPLE)\n-\t\t\t\t.build()\n-\t\t\t)\n-\t\t\t.addFile(thumbnail, \"thumbnail.png\")\n-\t\t\t.queue();\n-\t}\n-\n-\tpublic TwitchUser add(String name, long guildId, StreamType type){\n-\t\tvar user = this.twitchWrapper.getUserByUsername(name, false);\n-\t\tif(user == null){\n-\t\t\treturn null;\n-\t\t}\n-\t\tvar record = new StreamUsersRecord()\n-\t\t\t.setUserId(user.getId())\n-\t\t\t.setUserName(user.getDisplayName())\n-\t\t\t.setGuildId(guildId)\n-\t\t\t.setStreamType(type.getId());\n-\n-\t\trecord.attach(this.modules.get(DatabaseModule.class).getConfiguration());\n-\t\trecord.store();\n-\t\trecord.detach();\n-\t\tthis.streamAnnouncements.add(record);\n-\t\treturn user;\n-\t}\n-\n-\tpublic List<StreamUsersRecord> get(long guildId){\n-\t\treturn this.streamAnnouncements.stream().filter(stream -> stream.getGuildId() == guildId).collect(Collectors.toList());\n-\t}\n-\n-\tpublic boolean remove(String name, long guildId, StreamType type){\n-\t\tvar user = this.twitchWrapper.getUserByUsername(name, false);\n-\t\tif(user == null){\n-\t\t\treturn false;\n-\t\t}\n-\t\tvar optionalRecord = this.streamAnnouncements.stream().filter(stream -> stream.getUserId() == user.getId() && stream.getGuildId() == guildId && stream.getStreamType() == type.getId()).findFirst();\n-\t\tif(optionalRecord.isEmpty()){\n-\t\t\treturn false;\n-\t\t}\n-\t\tvar record = optionalRecord.get();\n-\t\trecord.attach(this.modules.get(DatabaseModule.class).getConfiguration());\n-\t\trecord.delete();\n-\t\trecord.detach();\n-\t\tthis.streamAnnouncements.remove(record);\n-\t\treturn true;\n-\t}\n-\n-}"
  },
  {
    "sha": "9c72d0a47189ec92c5ef2ed02ece91f0a23b662f",
    "filename": "src/main/java/de/kittybot/kittybot/modules/StreamModule.java",
    "status": "added",
    "additions": 167,
    "deletions": 0,
    "changes": 167,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/modules/StreamModule.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/modules/StreamModule.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/modules/StreamModule.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,167 @@\n+package de.kittybot.kittybot.modules;\n+\n+import de.kittybot.kittybot.objects.enums.AnnouncementType;\n+import de.kittybot.kittybot.objects.module.Module;\n+import de.kittybot.kittybot.objects.settings.StreamAnnouncement;\n+import de.kittybot.kittybot.objects.streams.Stream;\n+import de.kittybot.kittybot.objects.streams.StreamType;\n+import de.kittybot.kittybot.objects.streams.twitch.Subscription;\n+import de.kittybot.kittybot.objects.streams.twitch.TwitchUser;\n+import de.kittybot.kittybot.objects.streams.twitch.TwitchWrapper;\n+import de.kittybot.kittybot.utils.Colors;\n+import de.kittybot.kittybot.utils.Config;\n+import net.dv8tion.jda.api.EmbedBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static de.kittybot.kittybot.jooq.Tables.STREAM_USERS;\n+\n+public class StreamModule extends Module{\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(StreamModule.class);\n+\n+\tprivate TwitchWrapper twitchWrapper;\n+\n+\t@Override\n+\tpublic Set<Class<? extends Module>> getDependencies(){\n+\t\treturn Set.of(DatabaseModule.class);\n+\t}\n+\n+\t@Override\n+\tpublic void onEnable(){\n+\t\tif(Config.TWITCH_CLIENT_ID.isBlank() || Config.TWITCH_CLIENT_SECRET.isBlank() || Config.TWITCH_WEBHOOK_CALLBACK.isBlank() || Config.TWITCH_WEBHOOK_SECRET.isBlank()){\n+\t\t\tLOG.error(\"Twitch disabled because twitch_client_id and twitch_client_secret are missing\");\n+\t\t}\n+\t\telse{\n+\t\t\tthis.twitchWrapper = new TwitchWrapper(Config.TWITCH_CLIENT_ID, Config.TWITCH_CLIENT_SECRET, Config.TWITCH_WEBHOOK_CALLBACK, Config.TWITCH_WEBHOOK_SECRET, this.modules.getHttpClient());\n+\t\t}\n+\t}\n+\n+\tpublic void sendAnnouncementMessage(Collection<StreamAnnouncement> streamAnnouncements, Stream stream, AnnouncementType announcementType){\n+\t\tvar embed = new EmbedBuilder();\n+\t\tvar streamThumbnailUrl = stream.getThumbnailUrl(320, 180);\n+\t\tInputStream thumbnail;\n+\t\ttry{\n+\t\t\tthumbnail = new URL(streamThumbnailUrl).openStream();\n+\t\t}\n+\t\tcatch(IOException e){\n+\t\t\tLOG.error(\"Failed to get thumbnail url\", e);\n+\t\t\treturn;\n+\t\t}\n+\t\tswitch(announcementType){\n+\t\t\tcase END:\n+\t\t\t\tembed.setAuthor(stream.getUserName(), stream.getStreamUrl());\n+\t\t\t\tbreak;\n+\t\t\tcase START:\n+\t\t\t\tembed.setTitle(stream.getStreamTitle(), stream.getStreamUrl())\n+\t\t\t\t\t.setImage(\"attachment://thumbnail.png\")\n+\t\t\t\t\t.setThumbnail(stream.getGame().getThumbnailUrl(144, 192))\n+\t\t\t\t\t.addField(\"Game\", stream.getGame().getName(), true);\n+\t\t\t\tbreak;\n+\t\t}\n+\t\tfor(var streamAnnouncement : streamAnnouncements){\n+\t\t\tSystem.out.println(streamAnnouncement);\n+\t\t\tvar guildId = streamAnnouncement.getGuildId();\n+\t\t\tvar guild = this.modules.getGuildById(guildId);\n+\t\t\tif(guild == null){\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tvar settings = this.modules.get(SettingsModule.class).getSettings(guildId);\n+\n+\t\t\tvar channel = guild.getTextChannelById(settings.getStreamAnnouncementChannelId());\n+\t\t\tif(channel == null || !channel.canTalk()){\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tchannel.sendMessage(settings.getStreamAnnouncementMessage().replace(\"${user}\", stream.getUserName()))\n+\t\t\t\t.embed(embed\n+\t\t\t\t\t.setTimestamp(Instant.now())\n+\t\t\t\t\t.setColor(Colors.TWITCH_PURPLE)\n+\t\t\t\t\t.build()\n+\t\t\t\t)\n+\t\t\t\t.addFile(thumbnail, \"thumbnail.png\")\n+\t\t\t\t.queue();\n+\t\t}\n+\t}\n+\n+\tpublic TwitchUser add(String name, long guildId, StreamType type){\n+\t\tvar user = this.twitchWrapper.getUserByUsername(name, false);\n+\t\tif(user == null){\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tvar rows = this.modules.get(DatabaseModule.class).getCtx()\n+\t\t\t.insertInto(STREAM_USERS)\n+\t\t\t.columns(STREAM_USERS.GUILD_ID, STREAM_USERS.USER_ID, STREAM_USERS.USER_NAME, STREAM_USERS.STREAM_TYPE)\n+\t\t\t.values(guildId, user.getId(), user.getDisplayName(), type.getId())\n+\t\t\t.onConflict(STREAM_USERS.GUILD_ID, STREAM_USERS.USER_ID, STREAM_USERS.STREAM_TYPE)\n+\t\t\t.doNothing()\n+\t\t\t.execute();\n+\t\tif(rows == 0){\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tif(this.twitchWrapper.getSubscriptions().values().stream().noneMatch(subscription -> subscription.getConditions().stream().noneMatch(condition -> condition.getValue() instanceof  Long && ((Long) condition.getValue()) == user.getId()))){\n+\t\t\tthis.twitchWrapper.subscribe(Subscription.Type.STREAM_ONLINE, new Subscription.Condition(\"broadcaster_user_id\", Long.toString(user.getId())));\n+\t\t\tthis.twitchWrapper.subscribe(Subscription.Type.STREAM_OFFLINE, new Subscription.Condition(\"broadcaster_user_id\", Long.toString(user.getId())));\n+\t\t}\n+\n+\t\treturn user;\n+\t}\n+\n+\tpublic boolean remove(String name, long guildId, StreamType type){\n+\t\tvar user = this.twitchWrapper.getUserByUsername(name, false);\n+\t\tif(user == null){\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tvar records = this.modules.get(DatabaseModule.class).getCtx()\n+\t\t\t.selectFrom(STREAM_USERS)\n+\t\t\t.where(STREAM_USERS.USER_ID.eq(user.getId())\n+\t\t\t\t.and(STREAM_USERS.STREAM_TYPE.eq(type.getId()))\n+\t\t\t).fetch();\n+\n+\t\tvar subscription = this.twitchWrapper.getSubscriptions().values().stream().filter(sub ->\n+\t\t\tsub.getConditions().stream().anyMatch(condition ->\n+\t\t\t\tcondition.getValue().equals(\"broadcaster_user_id\") && condition.getValue() instanceof Long && ((Long) condition.getValue()) == user.getId()\n+\t\t\t)\n+\t\t).findFirst();\n+\n+\t\tif(subscription.isPresent()){\n+\t\t\tthis.twitchWrapper.unsubscribe(subscription.get().getId());\n+\t\t\tthis.twitchWrapper.unsubscribe(subscription.get().getId());\n+\t\t}\n+\n+\t\tvar rows = this.modules.get(DatabaseModule.class).getCtx()\n+\t\t\t.deleteFrom(STREAM_USERS)\n+\t\t\t.where(STREAM_USERS.GUILD_ID.eq(guildId)\n+\t\t\t\t.and(STREAM_USERS.USER_ID.eq(user.getId())\n+\t\t\t\t\t.and(STREAM_USERS.STREAM_TYPE.eq(type.getId())))\n+\t\t\t).execute();\n+\t\treturn rows == 1;\n+\t}\n+\n+\tpublic TwitchWrapper getTwitchWrapper(){\n+\t\treturn this.twitchWrapper;\n+\t}\n+\n+\tpublic List<StreamAnnouncement> getStreamAnnouncements(long userId, StreamType type){\n+\t\ttry(var ctx = this.modules.get(DatabaseModule.class).getCtx().selectFrom(STREAM_USERS)){\n+\t\t\treturn ctx.where(STREAM_USERS.USER_ID.eq(userId).and(STREAM_USERS.STREAM_TYPE.eq(type.getId()))).fetch(StreamAnnouncement::new);\n+\t\t}\n+\t}\n+\n+\tpublic List<StreamAnnouncement> getStreamAnnouncements(long guildId){\n+\t\ttry(var ctx = this.modules.get(DatabaseModule.class).getCtx().selectFrom(STREAM_USERS)){\n+\t\t\treturn ctx.where(STREAM_USERS.GUILD_ID.eq(guildId)).fetch(StreamAnnouncement::new);\n+\t\t}\n+\t}\n+\n+}"
  },
  {
    "sha": "5b6e5cc8934fe546c07da37d330011193aa0d017",
    "filename": "src/main/java/de/kittybot/kittybot/modules/WebModule.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/modules/WebModule.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/modules/WebModule.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/modules/WebModule.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -23,6 +23,7 @@\n import de.kittybot.kittybot.web.login.PostLoginRoute;\n import de.kittybot.kittybot.web.shards.GetShardsRoute;\n import de.kittybot.kittybot.web.user.GetUserInfoRoute;\n+import de.kittybot.kittybot.web.webhooks.twitch.PostTwitchRoute;\n import de.kittybot.kittybot.web.webhooks.votes.PostVotesRoute;\n import io.javalin.Javalin;\n import io.javalin.http.*;\n@@ -95,9 +96,14 @@ public void onEnable(){\n \t\t\t\tbefore(\"/*\", this::checkDiscordLogin);\n \t\t\t\tget(new GetUserInfoRoute(this.modules));\n \t\t\t});\n-\t\t\tpath(\"/webhooks/votes/:botlist\", () ->\n-\t\t\t\tpost(new PostVotesRoute(this.modules))\n-\t\t\t);\n+\t\t\tpath(\"/webhooks\", () -> {\n+\t\t\t\tpath(\"/votes/:botlist\", () ->\n+\t\t\t\t\tpost(new PostVotesRoute(this.modules))\n+\t\t\t\t);\n+\t\t\t\tpath(\"/twitch\", () ->\n+\t\t\t\t\tpost(new PostTwitchRoute(this.modules))\n+\t\t\t\t);\n+\t\t\t});\n \t\t\tpath(\"/guilds\", () -> {\n \t\t\t\tbefore(\"/*\", this::checkDiscordLogin);\n \t\t\t\tget(new GetAllGuildsRoute(this.modules));"
  },
  {
    "sha": "5076c8500b675dc1bf14ec35a4fa941e057d4545",
    "filename": "src/main/java/de/kittybot/kittybot/objects/settings/StreamAnnouncement.java",
    "status": "modified",
    "additions": 0,
    "deletions": 11,
    "changes": 11,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/objects/settings/StreamAnnouncement.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/objects/settings/StreamAnnouncement.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/objects/settings/StreamAnnouncement.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -8,15 +8,13 @@\n \tprivate final long id, userId, guildId;\n \tprivate final String userName;\n \tprivate final StreamType streamType;\n-\tprivate boolean isLive;\n \n \tpublic StreamAnnouncement(long userId, String userName, long guildId, StreamType streamType){\n \t\tthis.id = -1;\n \t\tthis.userId = userId;\n \t\tthis.userName = userName;\n \t\tthis.guildId = guildId;\n \t\tthis.streamType = streamType;\n-\t\tthis.isLive = false;\n \t}\n \n \tpublic StreamAnnouncement(StreamUsersRecord record){\n@@ -25,7 +23,6 @@ public StreamAnnouncement(StreamUsersRecord record){\n \t\tthis.userName = record.getUserName();\n \t\tthis.guildId = record.getGuildId();\n \t\tthis.streamType = StreamType.byId(record.getStreamType());\n-\t\tthis.isLive = record.getIsLive();\n \t}\n \n \tpublic long getId(){\n@@ -48,14 +45,6 @@ public StreamType getStreamType(){\n \t\treturn this.streamType;\n \t}\n \n-\tpublic boolean isLive(){\n-\t\treturn this.isLive;\n-\t}\n-\n-\tpublic void setLive(boolean isLive){\n-\t\tthis.isLive = isLive;\n-\t}\n-\n \tpublic String getStreamUrl(){\n \t\tif(this.streamType == StreamType.TWITCH){\n \t\t\treturn this.streamType.getBaseUrl() + this.userName;"
  },
  {
    "sha": "c5efb304e928f1f1eac3b3238cf55427499e9728",
    "filename": "src/main/java/de/kittybot/kittybot/objects/streams/twitch/Subscription.java",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/objects/streams/twitch/Subscription.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/objects/streams/twitch/Subscription.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/objects/streams/twitch/Subscription.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,182 @@\n+package de.kittybot.kittybot.objects.streams.twitch;\n+\n+import net.dv8tion.jda.api.utils.data.DataObject;\n+\n+import java.time.Instant;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class Subscription{\n+\n+\tprivate final String id;\n+\tprivate Status status;\n+\tprivate final Type type;\n+\tprivate final int version;\n+\tprivate final Set<Condition> conditions;\n+\tprivate final Instant createdAt;\n+\tprivate final Transport transport;\n+\n+\tpublic Subscription(String id, Status status, Type type, int version, Set<Condition> conditions, Instant createdAt, Transport transport){\n+\t\tthis.id = id;\n+\t\tthis.status = status;\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t\tthis.conditions = conditions;\n+\t\tthis.createdAt = createdAt;\n+\t\tthis.transport = transport;\n+\t}\n+\n+\tpublic String getId(){\n+\t\treturn this.id;\n+\t}\n+\n+\tpublic Status getStatus(){\n+\t\treturn this.status;\n+\t}\n+\n+\tpublic void setStatus(Status status){\n+\t\tthis.status = status;\n+\t}\n+\n+\tpublic Type getType(){\n+\t\treturn this.type;\n+\t}\n+\n+\tpublic int getVersion(){\n+\t\treturn this.version;\n+\t}\n+\n+\tpublic Set<Condition> getConditions(){\n+\t\treturn this.conditions;\n+\t}\n+\n+\tpublic Instant getCreatedAt(){\n+\t\treturn this.createdAt;\n+\t}\n+\n+\tpublic Transport getTransport(){\n+\t\treturn this.transport;\n+\t}\n+\n+\tpublic static Subscription fromJSON(DataObject json){\n+\t\treturn new Subscription(\n+\t\t\tjson.getString(\"id\"),\n+\t\t\tStatus.fromText(json.getString(\"status\")),\n+\t\t\tType.fromText(json.getString(\"type\")),\n+\t\t\tjson.getInt(\"version\"),\n+\t\t\tCondition.fromJSON(json.getObject(\"condition\")),\n+\t\t\tInstant.parse(json.getString(\"created_at\")),\n+\t\t\tTransport.fromJSON(json.getObject(\"transport\"))\n+\t\t);\n+\t}\n+\n+\tpublic enum Status{\n+\n+\t\tENABLED(\"enabled\"),\n+\t\tWEBHOOK_CALLBACK_VERIFICATION_PENDING(\"webhook_callback_verification_pending\"),\n+\t\tWEBHOOK_CALLBACK_VERIFICATION_FAILED(\"webhook_callback_verification_failed\"),\n+\t\tNOTIFICATION_FAILURES_EXCEEDED(\"notification_failures_exceeded\"),\n+\t\tAUTHORIZATION_REVOKED(\"authorization_revoked\"),\n+\t\tUSER_REMOVED(\"user_removed\");\n+\n+\t\tprivate final String text;\n+\n+\t\tStatus(String text){\n+\t\t\tthis.text = text;\n+\t\t}\n+\n+\t\tpublic static Status fromText(String text){\n+\t\t\tfor(var value : values()){\n+\t\t\t\tif(value.text.equals(text)){\n+\t\t\t\t\treturn value;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException(\"unknown status received\");\n+\t\t}\n+\n+\t\tpublic String getText(){\n+\t\t\treturn this.text;\n+\t\t}\n+\n+\t}\n+\n+\tpublic enum Type{\n+\n+\t\tSTREAM_ONLINE(\"stream.online\"),\n+\t\tSTREAM_OFFLINE(\"stream.offline\");\n+\n+\t\tprivate final String text;\n+\n+\t\tType(String text){\n+\t\t\tthis.text = text;\n+\t\t}\n+\n+\t\tpublic static Type fromText(String text){\n+\t\t\tfor(var value : values()){\n+\t\t\t\tif(value.text.equals(text)){\n+\t\t\t\t\treturn value;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException(\"unknown type received\");\n+\t\t}\n+\n+\t\tpublic String getText(){\n+\t\t\treturn this.text;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Condition{\n+\n+\t\tprivate final String key;\n+\t\tprivate final Object value;\n+\n+\t\tpublic Condition(String key, Object value){\n+\t\t\tthis.key = key;\n+\t\t\tthis.value = value;\n+\t\t}\n+\n+\t\tpublic static Set<Condition> fromJSON(DataObject json){\n+\t\t\tvar conditions = json.keys();\n+\t\t\treturn conditions.stream().map(key -> new Condition(key, json.getString(key))).collect(Collectors.toSet());\n+\t\t}\n+\n+\t\tpublic  DataObject toJSON(){\n+\t\t\treturn DataObject.empty()\n+\t\t\t\t.put(this.key, this.value);\n+\t\t}\n+\n+\t\tpublic String getKey(){\n+\t\t\treturn this.key;\n+\t\t}\n+\n+\t\tpublic Object getValue(){\n+\t\t\treturn this.value;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Transport{\n+\n+\t\tprivate final String method, callback;\n+\n+\t\tpublic Transport(String method, String callback){\n+\t\t\tthis.method = method;\n+\t\t\tthis.callback = callback;\n+\t\t}\n+\n+\t\tpublic static Transport fromJSON(DataObject json){\n+\t\t\treturn new Transport(json.getString(\"method\"), json.getString(\"callback\"));\n+\t\t}\n+\n+\t\tpublic String getMethod(){\n+\t\t\treturn this.method;\n+\t\t}\n+\n+\t\tpublic String getCallback(){\n+\t\t\treturn this.callback;\n+\t\t}\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "cc004614c3f48c707bc6fd13ac7ed8fb1a0bef7f",
    "filename": "src/main/java/de/kittybot/kittybot/objects/streams/twitch/TwitchWrapper.java",
    "status": "modified",
    "additions": 122,
    "deletions": 32,
    "changes": 154,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/objects/streams/twitch/TwitchWrapper.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/objects/streams/twitch/TwitchWrapper.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/objects/streams/twitch/TwitchWrapper.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -2,40 +2,57 @@\n \n import de.kittybot.kittybot.objects.streams.BearerToken;\n import de.kittybot.kittybot.objects.streams.Stream;\n+import de.kittybot.kittybot.utils.Config;\n import net.dv8tion.jda.api.utils.data.DataObject;\n-import okhttp3.Call;\n-import okhttp3.FormBody;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n+import net.dv8tion.jda.internal.requests.Method;\n+import net.dv8tion.jda.internal.requests.Requester;\n+import net.dv8tion.jda.internal.requests.Route;\n+import okhttp3.*;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.*;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n public class TwitchWrapper{\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(TwitchWrapper.class);\n \tprivate static final String BASE_URL = \"https://api.twitch.tv/helix/\";\n \tprivate static final String OAUTH2_URL = \"https://id.twitch.tv/oauth2/token\";\n+\tprivate static final Route CREATE_SUBSCRIPTION = Route.custom(Method.POST, \"eventsub/subscriptions\");\n+\tprivate static final Route DELETE_SUBSCRIPTION = Route.custom(Method.DELETE, \"eventsub/subscriptions?id={subscription.id}\");\n+\tprivate static final Route GET_SUBSCRIPTIONS = Route.custom(Method.GET, \"eventsub/subscriptions\");\n \n \tprivate final String clientId;\n \tprivate final String clientSecret;\n+\tprivate final String webhookCallback;\n+\tprivate final String webhookSecret;\n \tprivate final OkHttpClient httpClient;\n \tprivate BearerToken bearerToken;\n+\tprivate final Map<String, Subscription> subscriptions;\n \n-\tpublic TwitchWrapper(String clientId, String clientSecret, OkHttpClient httpClient){\n+\tpublic TwitchWrapper(String clientId, String clientSecret, String webhookCallback, String webhookSecret, OkHttpClient httpClient){\n \t\tthis.clientId = clientId;\n \t\tthis.clientSecret = clientSecret;\n+\t\tthis.webhookCallback = webhookCallback;\n+\t\tthis.webhookSecret = webhookSecret;\n \t\tthis.httpClient = httpClient;\n \t\tthis.bearerToken = requestBearerToken();\n+\t\tthis.subscriptions = new HashMap<>();\n \t\tif(this.bearerToken == null){\n \t\t\tLOG.error(\"Could not retrieve Bearer Token. Please check your twitch client id & token\");\n \t\t\treturn;\n \t\t}\n \t\tLOG.info(\"Bearer Token retrieved\");\n+\t\tLOG.info(\"Bearer Token: {}\", bearerToken.getAccessToken());\n+\t\tvar subscriptions = retrieveSubscriptions();\n+\t\tif(subscriptions == null){\n+\t\t\tLOG.error(\"Error while retrieving active subscriptions\");\n+\t\t\treturn;\n+\t\t}\n+\t\tthis.subscriptions.putAll(subscriptions);\n \t}\n \n \tprivate BearerToken requestBearerToken(){\n@@ -59,6 +76,66 @@ private BearerToken requestBearerToken(){\n \t\treturn null;\n \t}\n \n+\tpublic boolean subscribe(Subscription.Type type, Subscription.Condition condition){\n+\t\tvar rqBody = DataObject.empty()\n+\t\t\t.put(\"type\", type.getText())\n+\t\t\t.put(\"version\", \"1\")\n+\t\t\t.put(\"condition\", condition.toJSON())\n+\t\t\t.put(\"transport\", DataObject.empty()\n+\t\t\t\t.put(\"method\", \"webhook\")\n+\t\t\t\t.put(\"callback\", this.webhookCallback)\n+\t\t\t\t.put(\"secret\", this.webhookSecret)\n+\t\t\t);\n+\t\tLOG.info(\"Body: {}\", rqBody.toString());\n+\t\ttry(var response = newCall(CREATE_SUBSCRIPTION.compile(), RequestBody.create(rqBody.toJson(), MediaType.parse(\"application/json\"))).execute()){\n+\t\t\tvar body = response.body();\n+\t\t\tif(body == null){\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tvar json = DataObject.fromJson(body.byteStream());\n+\t\t\tif(response.isSuccessful()){\n+\t\t\t\tvar data = json.getArray(\"data\");\n+\t\t\t\tthis.subscriptions.putAll(data.stream((array, i) -> Subscription.fromJSON(array.getObject(i))).collect(Collectors.toMap(Subscription::getId, Function.identity())));\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tLOG.error(\"Error while subscribing to events Body: {}\", json.toString());\n+\t\t}\n+\t\tcatch(IOException e){\n+\t\t\tLOG.error(\"Error while subscribing to events\");\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tpublic boolean unsubscribe(String id){\n+\t\ttry(var response = newCall(DELETE_SUBSCRIPTION.compile(id), null).execute()){\n+\t\t\tif(response.isSuccessful()){\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\tcatch(IOException e){\n+\t\t\tLOG.error(\"Error while unsubscribing to events\");\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tpublic Map<String, Subscription> retrieveSubscriptions(){\n+\t\ttry(var response = newCall(GET_SUBSCRIPTIONS.compile(), null).execute()){\n+\t\t\tif(response.isSuccessful()){\n+\t\t\t\tvar body = response.body();\n+\t\t\t\tif(body == null){\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\tvar json = DataObject.fromJson(body.byteStream());\n+\t\t\t\tvar data = json.getArray(\"data\");\n+\t\t\t\treturn data.stream((array, i) -> Subscription.fromJSON(array.getObject(i))).collect(Collectors.toMap(Subscription::getId, Function.identity()));\n+\t\t\t}\n+\t\t}\n+\t\tcatch(IOException e){\n+\t\t\tLOG.error(\"Error while unsubscribing to events\");\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n \tpublic TwitchUser getUserByUsername(String username, boolean reTry){\n \t\ttry(var resp = newRequest(\"users?login=%s\", username).execute()){\n \t\t\tvar body = resp.body();\n@@ -100,35 +177,48 @@ private Call newRequest(String url, Object... params){\n \t\t);\n \t}\n \n-\tpublic List<Stream> getStreams(List<Long> userIds, boolean reTry){\n-\t\tvar streams = new ArrayList<Stream>();\n-\t\tdo{\n-\t\t\tvar users = userIds.subList(0, Math.min(userIds.size(), 100));\n-\t\t\tvar query = users.stream().map(user -> \"user_id=\" + user).collect(Collectors.joining(\"&\"));\n-\t\t\tusers.clear();\n-\t\t\ttry(var resp = newRequest(\"streams?\" + query).execute()){\n-\t\t\t\tvar body = resp.body();\n-\t\t\t\tif(!resp.isSuccessful() || body == null){\n-\t\t\t\t\tLOG.error(\"Url: {} Code: {} Body: {}\", resp.request().url(), resp.code(), body == null ? \"null\" : body.string());\n-\t\t\t\t\tif(resp.code() == 401){\n-\t\t\t\t\t\tthis.bearerToken = null;\n-\t\t\t\t\t\tif(!reTry){\n-\t\t\t\t\t\t\treturn getStreams(userIds, true);\n-\t\t\t\t\t\t}\n+\tpublic Stream getStream(long userId, boolean reTry){\n+\t\ttry(var resp = newRequest(\"streams?user_id=\" + userId).execute()){\n+\t\t\tvar body = resp.body();\n+\t\t\tif(!resp.isSuccessful() || body == null){\n+\t\t\t\tLOG.error(\"Url: {} Code: {} Body: {}\", resp.request().url(), resp.code(), body == null ? \"null\" : body.string());\n+\t\t\t\tif(resp.code() == 401){\n+\t\t\t\t\tthis.bearerToken = null;\n+\t\t\t\t\tif(!reTry){\n+\t\t\t\t\t\treturn getStream(userId, true);\n \t\t\t\t\t}\n-\t\t\t\t\tcontinue;\n \t\t\t\t}\n-\t\t\t\tvar data = DataObject.fromJson(body.string()).getArray(\"data\");\n-\t\t\t\tfor(var o = 0; o < data.length(); o++){\n-\t\t\t\t\tstreams.add(Stream.fromTwitchJSON(data.getObject(o)));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcatch(IOException e){\n-\t\t\t\tLOG.error(\"Error while unpacking request body\", e);\n+\t\t\t\treturn null;\n \t\t\t}\n+\t\t\tvar data = DataObject.fromJson(body.byteStream()).getArray(\"data\");\n+\t\t\treturn Stream.fromTwitchJSON(data.getObject(0));\n \t\t}\n-\t\twhile(!userIds.isEmpty());\n-\t\treturn streams;\n+\t\tcatch(IOException e){\n+\t\t\tLOG.error(\"Error while unpacking request body\", e);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate Call newCall(Route.CompiledRoute route, RequestBody body){\n+\t\treturn this.httpClient.newCall(newBuilder(route).method(route.getMethod().name(), body).build());\n+\t}\n+\n+\tprivate Request.Builder newBuilder(Route.CompiledRoute route){\n+\t\tif(this.bearerToken == null || this.bearerToken.isExpired()){\n+\t\t\tthis.bearerToken = requestBearerToken();\n+\t\t\tLOG.info(\"New Bearer Token retrieved\");\n+\t\t}\n+\t\tif(this.bearerToken == null){\n+\t\t\tthrow new NullPointerException(\"bearerToken is null\");\n+\t\t}\n+\t\treturn new Request.Builder()\n+\t\t\t.url(BASE_URL + route.getCompiledRoute())\n+\t\t\t.addHeader(\"Client-ID\", this.clientId)\n+\t\t\t.addHeader(\"Authorization\", this.bearerToken.getAccessToken());\n+\t}\n+\n+\tpublic Map<String, Subscription> getSubscriptions(){\n+\t\treturn this.subscriptions;\n \t}\n \n }"
  },
  {
    "sha": "5e8485c47e04e2ea7fc58df2e616cc55b424320d",
    "filename": "src/main/java/de/kittybot/kittybot/objects/streams/youtube/YouTubeWrapper.java",
    "status": "removed",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/62052b9ce4ca7dbc42ec89d63352de5db9d8a242/src/main/java/de/kittybot/kittybot/objects/streams/youtube/YouTubeWrapper.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/62052b9ce4ca7dbc42ec89d63352de5db9d8a242/src/main/java/de/kittybot/kittybot/objects/streams/youtube/YouTubeWrapper.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/objects/streams/youtube/YouTubeWrapper.java?ref=62052b9ce4ca7dbc42ec89d63352de5db9d8a242",
    "patch": "@@ -1,5 +0,0 @@\n-package de.kittybot.kittybot.objects.streams.youtube;\n-\n-public class YouTubeWrapper{\n-\t// TODO\n-}"
  },
  {
    "sha": "20be1976d0d49fc38f89090c7a150df6a85c02c2",
    "filename": "src/main/java/de/kittybot/kittybot/utils/Config.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/utils/Config.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/utils/Config.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/utils/Config.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -34,6 +34,8 @@\n \n \tpublic static String TWITCH_CLIENT_ID;\n \tpublic static String TWITCH_CLIENT_SECRET;\n+\tpublic static String TWITCH_WEBHOOK_SECRET;\n+\tpublic static String TWITCH_WEBHOOK_CALLBACK;\n \n \tpublic static String SIGNING_KEY;\n \n@@ -104,6 +106,8 @@ public static void init(String path) throws IOException, MissingConfigValuesExce\n \n \t\tTWITCH_CLIENT_ID = json.getString(\"twitch_client_id\", \"\");\n \t\tTWITCH_CLIENT_SECRET = json.getString(\"twitch_client_secret\", \"\");\n+\t\tTWITCH_WEBHOOK_SECRET = json.getString(\"twitch_webhook_secret\", \"\");\n+\t\tTWITCH_WEBHOOK_CALLBACK = json.getString(\"twitch_webhook_callback\", \"\");\n \n \t\tSIGNING_KEY = json.getString(\"signing_key\", \"\");\n "
  },
  {
    "sha": "a3cfca810667a6b56d2119802da0acf0ed1fed59",
    "filename": "src/main/java/de/kittybot/kittybot/web/webhooks/twitch/PostTwitchRoute.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/web/webhooks/twitch/PostTwitchRoute.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/java/de/kittybot/kittybot/web/webhooks/twitch/PostTwitchRoute.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/java/de/kittybot/kittybot/web/webhooks/twitch/PostTwitchRoute.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -0,0 +1,53 @@\n+package de.kittybot.kittybot.web.webhooks.twitch;\n+\n+import de.kittybot.kittybot.modules.StreamModule;\n+import de.kittybot.kittybot.objects.enums.AnnouncementType;\n+import de.kittybot.kittybot.objects.module.Modules;\n+import de.kittybot.kittybot.objects.streams.StreamType;\n+import de.kittybot.kittybot.objects.streams.twitch.Subscription;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import net.dv8tion.jda.api.utils.data.DataObject;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PostTwitchRoute implements Handler{\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PostTwitchRoute.class);\n+\n+\tprivate final Modules modules;\n+\n+\tpublic PostTwitchRoute(Modules modules){\n+\t\tthis.modules = modules;\n+\t}\n+\n+\t@Override\n+\tpublic void handle(@NotNull Context ctx){\n+\t\t// var signature = ctx.header(\"Twitch-Eventsub-Message-Signature\");\n+\t\t// TODO verify requests\n+\t\tvar data = DataObject.fromJson(ctx.bodyAsInputStream());\n+\t\tSystem.out.println(data.toString());\n+\t\tvar subscription = Subscription.fromJSON(data.getObject(\"subscription\"));\n+\t\tSystem.out.println(\"subscription: \" + subscription.toString());\n+\t\tif(data.hasKey(\"challenge\")){\n+\t\t\tctx.status(200);\n+\t\t\tctx.result(data.getString(\"challenge\"));\n+\t\t\tthis.modules.get(StreamModule.class).getTwitchWrapper().getSubscriptions().get(subscription.getId()).setStatus(Subscription.Status.ENABLED);\n+\t\t}\n+\t\telse if(subscription.getType() == Subscription.Type.STREAM_ONLINE){\n+\t\t\tvar event = data.getObject(\"event\");\n+\t\t\tvar streamModule = this.modules.get(StreamModule.class);\n+\t\t\tvar stream = streamModule.getTwitchWrapper().getStream(event.getLong(\"broadcaster_user_id\"), true);\n+\t\t\tvar streamAnnouncements = streamModule.getStreamAnnouncements(event.getLong(\"broadcaster_user_id\"), StreamType.TWITCH);\n+\t\t\tstreamModule.sendAnnouncementMessage(streamAnnouncements, stream, AnnouncementType.START);\n+\t\t}\n+\t\telse if(subscription.getType() == Subscription.Type.STREAM_OFFLINE){\n+\t\t\t// TODO\n+\t\t}\n+\t\telse{\n+\t\t\tLOG.error(\"unhandled event type received from twitch Body: {}\", ctx.body());\n+\t\t}\n+\t}\n+\n+}"
  },
  {
    "sha": "b982c1b643134163ae40fd9a071ff36fa055274a",
    "filename": "src/main/jooq/de/kittybot/kittybot/jooq/Keys.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/KittyBot-Org/KittyBot/blob/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/jooq/de/kittybot/kittybot/jooq/Keys.java",
    "raw_url": "https://github.com/KittyBot-Org/KittyBot/raw/80f97c31010ac9aea664388a3b4ff506d277747a/src/main/jooq/de/kittybot/kittybot/jooq/Keys.java",
    "contents_url": "https://api.github.com/repos/KittyBot-Org/KittyBot/contents/src/main/jooq/de/kittybot/kittybot/jooq/Keys.java?ref=80f97c31010ac9aea664388a3b4ff506d277747a",
    "patch": "@@ -19,7 +19,6 @@\n import de.kittybot.kittybot.jooq.tables.SelfAssignableRoles;\n import de.kittybot.kittybot.jooq.tables.Sessions;\n import de.kittybot.kittybot.jooq.tables.SnipeDisabledChannels;\n-import de.kittybot.kittybot.jooq.tables.StreamUserEvents;\n import de.kittybot.kittybot.jooq.tables.StreamUsers;\n import de.kittybot.kittybot.jooq.tables.UserStatistics;\n import de.kittybot.kittybot.jooq.tables.Voters;\n@@ -38,7 +37,6 @@\n import de.kittybot.kittybot.jooq.tables.records.SelfAssignableRolesRecord;\n import de.kittybot.kittybot.jooq.tables.records.SessionsRecord;\n import de.kittybot.kittybot.jooq.tables.records.SnipeDisabledChannelsRecord;\n-import de.kittybot.kittybot.jooq.tables.records.StreamUserEventsRecord;\n import de.kittybot.kittybot.jooq.tables.records.StreamUsersRecord;\n import de.kittybot.kittybot.jooq.tables.records.UserStatisticsRecord;\n import de.kittybot.kittybot.jooq.tables.records.VotersRecord;\n@@ -61,7 +59,6 @@\n     // UNIQUE and PRIMARY KEY definitions\n     // -------------------------------------------------------------------------\n \n-    public static final UniqueKey<BotDisabledChannelsRecord> BOT_DISABLED_CHANNELS_CHANNEL_ID_KEY = Internal.createUniqueKey(BotDisabledChannels.BOT_DISABLED_CHANNELS, DSL.name(\"bot_disabled_channels_channel_id_key\"), new TableField[] { BotDisabledChannels.BOT_DISABLED_CHANNELS.CHANNEL_ID }, true);\n     public static final UniqueKey<BotDisabledChannelsRecord> BOT_DISABLED_CHANNELS_GUILD_ID_CHANNEL_ID_KEY = Internal.createUniqueKey(BotDisabledChannels.BOT_DISABLED_CHANNELS, DSL.name(\"bot_disabled_channels_guild_id_channel_id_key\"), new TableField[] { BotDisabledChannels.BOT_DISABLED_CHANNELS.GUILD_ID, BotDisabledChannels.BOT_DISABLED_CHANNELS.CHANNEL_ID }, true);\n     public static final UniqueKey<BotDisabledChannelsRecord> BOT_DISABLED_CHANNELS_PKEY = Internal.createUniqueKey(BotDisabledChannels.BOT_DISABLED_CHANNELS, DSL.name(\"bot_disabled_channels_pkey\"), new TableField[] { BotDisabledChannels.BOT_DISABLED_CHANNELS.ID }, true);\n     public static final UniqueKey<BotIgnoredMembersRecord> BOT_IGNORED_MEMBERS_GUILD_ID_USER_ID_KEY = Internal.createUniqueKey(BotIgnoredMembers.BOT_IGNORED_MEMBERS, DSL.name(\"bot_ignored_members_guild_id_user_id_key\"), new TableField[] { BotIgnoredMembers.BOT_IGNORED_MEMBERS.GUILD_ID, BotIgnoredMembers.BOT_IGNORED_MEMBERS.USER_ID }, true);\n@@ -89,9 +86,7 @@\n     public static final UniqueKey<SessionsRecord> SESSIONS_USER_ID_KEY = Internal.createUniqueKey(Sessions.SESSIONS, DSL.name(\"sessions_user_id_key\"), new TableField[] { Sessions.SESSIONS.USER_ID }, true);\n     public static final UniqueKey<SnipeDisabledChannelsRecord> SNIPE_DISABLED_CHANNELS_GUILD_ID_CHANNEL_ID_KEY = Internal.createUniqueKey(SnipeDisabledChannels.SNIPE_DISABLED_CHANNELS, DSL.name(\"snipe_disabled_channels_guild_id_channel_id_key\"), new TableField[] { SnipeDisabledChannels.SNIPE_DISABLED_CHANNELS.GUILD_ID, SnipeDisabledChannels.SNIPE_DISABLED_CHANNELS.CHANNEL_ID }, true);\n     public static final UniqueKey<SnipeDisabledChannelsRecord> SNIPE_DISABLED_CHANNELS_PKEY = Internal.createUniqueKey(SnipeDisabledChannels.SNIPE_DISABLED_CHANNELS, DSL.name(\"snipe_disabled_channels_pkey\"), new TableField[] { SnipeDisabledChannels.SNIPE_DISABLED_CHANNELS.ID }, true);\n-    public static final UniqueKey<StreamUserEventsRecord> STREAM_USER_EVENTS_PKEY = Internal.createUniqueKey(StreamUserEvents.STREAM_USER_EVENTS, DSL.name(\"stream_user_events_pkey\"), new TableField[] { StreamUserEvents.STREAM_USER_EVENTS.ID }, true);\n-    public static final UniqueKey<StreamUserEventsRecord> STREAM_USER_EVENTS_STREAM_USER_ID_EVENT_KEY = Internal.createUniqueKey(StreamUserEvents.STREAM_USER_EVENTS, DSL.name(\"stream_user_events_stream_user_id_event_key\"), new TableField[] { StreamUserEvents.STREAM_USER_EVENTS.STREAM_USER_ID, StreamUserEvents.STREAM_USER_EVENTS.EVENT }, true);\n-    public static final UniqueKey<StreamUsersRecord> STREAM_USERS_GUILD_ID_USER_ID_KEY = Internal.createUniqueKey(StreamUsers.STREAM_USERS, DSL.name(\"stream_users_guild_id_user_id_key\"), new TableField[] { StreamUsers.STREAM_USERS.GUILD_ID, StreamUsers.STREAM_USERS.USER_ID }, true);\n+    public static final UniqueKey<StreamUsersRecord> STREAM_USERS_GUILD_ID_USER_ID_STREAM_TYPE_KEY = Internal.createUniqueKey(StreamUsers.STREAM_USERS, DSL.name(\"stream_users_guild_id_user_id_stream_type_key\"), new TableField[] { StreamUsers.STREAM_USERS.GUILD_ID, StreamUsers.STREAM_USERS.USER_ID, StreamUsers.STREAM_USERS.STREAM_TYPE }, true);\n     public static final UniqueKey<StreamUsersRecord> STREAM_USERS_PKEY = Internal.createUniqueKey(StreamUsers.STREAM_USERS, DSL.name(\"stream_users_pkey\"), new TableField[] { StreamUsers.STREAM_USERS.ID }, true);\n     public static final UniqueKey<UserStatisticsRecord> USER_STATISTICS_PKEY = Internal.createUniqueKey(UserStatistics.USER_STATISTICS, DSL.name(\"user_statistics_pkey\"), new TableField[] { UserStatistics.USER_STATISTICS.ID }, true);\n     public static final UniqueKey<VotersRecord> VOTERS_PKEY = Internal.createUniqueKey(Voters.VOTERS, DSL.name(\"voters_pkey\"), new TableField[] { Voters.VOTERS.ID }, true);\n@@ -115,7 +110,6 @@\n     public static final ForeignKey<SelfAssignableRolesRecord, SelfAssignableRoleGroupsRecord> SELF_ASSIGNABLE_ROLES__SELF_ASSIGNABLE_ROLES_GROUP_ID_FKEY = Internal.createForeignKey(SelfAssignableRoles.SELF_ASSIGNABLE_ROLES, DSL.name(\"self_assignable_roles_group_id_fkey\"), new TableField[] { SelfAssignableRoles.SELF_ASSIGNABLE_ROLES.GROUP_ID }, Keys.SELF_ASSIGNABLE_ROLE_GROUPS_PKEY, new TableField[] { SelfAssignableRoleGroups.SELF_ASSIGNABLE_ROLE_GROUPS.ID }, true);\n     public static final ForeignKey<SelfAssignableRolesRecord, GuildsRecord> SELF_ASSIGNABLE_ROLES__SELF_ASSIGNABLE_ROLES_GUILD_ID_FKEY = Internal.createForeignKey(SelfAssignableRoles.SELF_ASSIGNABLE_ROLES, DSL.name(\"self_assignable_roles_guild_id_fkey\"), new TableField[] { SelfAssignableRoles.SELF_ASSIGNABLE_ROLES.GUILD_ID }, Keys.GUILDS_PKEY, new TableField[] { Guilds.GUILDS.ID }, true);\n     public static final ForeignKey<SnipeDisabledChannelsRecord, GuildsRecord> SNIPE_DISABLED_CHANNELS__SNIPE_DISABLED_CHANNELS_GUILD_ID_FKEY = Internal.createForeignKey(SnipeDisabledChannels.SNIPE_DISABLED_CHANNELS, DSL.name(\"snipe_disabled_channels_guild_id_fkey\"), new TableField[] { SnipeDisabledChannels.SNIPE_DISABLED_CHANNELS.GUILD_ID }, Keys.GUILDS_PKEY, new TableField[] { Guilds.GUILDS.ID }, true);\n-    public static final ForeignKey<StreamUserEventsRecord, StreamUsersRecord> STREAM_USER_EVENTS__STREAM_USER_EVENTS_STREAM_USER_ID_FKEY = Internal.createForeignKey(StreamUserEvents.STREAM_USER_EVENTS, DSL.name(\"stream_user_events_stream_user_id_fkey\"), new TableField[] { StreamUserEvents.STREAM_USER_EVENTS.STREAM_USER_ID }, Keys.STREAM_USERS_PKEY, new TableField[] { StreamUsers.STREAM_USERS.ID }, true);\n     public static final ForeignKey<StreamUsersRecord, GuildsRecord> STREAM_USERS__STREAM_USERS_GUILD_ID_FKEY = Internal.createForeignKey(StreamUsers.STREAM_USERS, DSL.name(\"stream_users_guild_id_fkey\"), new TableField[] { StreamUsers.STREAM_USERS.GUILD_ID }, Keys.GUILDS_PKEY, new TableField[] { Guilds.GUILDS.ID }, true);\n     public static final ForeignKey<UserStatisticsRecord, GuildsRecord> USER_STATISTICS__USER_STATISTICS_GUILD_ID_FKEY = Internal.createForeignKey(UserStatistics.USER_STATISTICS, DSL.name(\"user_statistics_guild_id_fkey\"), new TableField[] { UserStatistics.USER_STATISTICS.GUILD_ID }, Keys.GUILDS_PKEY, new TableField[] { Guilds.GUILDS.ID }, true);\n }"
  }
]
