[
  {
    "sha": "4a1e608325e39791815150a0179c91853a8cbfa9",
    "filename": "vsfe/src/main/java/com/example/vsfe/item13_14/Movie.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/dolly0920/Effective_Java_Study/blob/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item13_14/Movie.java",
    "raw_url": "https://github.com/dolly0920/Effective_Java_Study/raw/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item13_14/Movie.java",
    "contents_url": "https://api.github.com/repos/dolly0920/Effective_Java_Study/contents/vsfe/src/main/java/com/example/vsfe/item13_14/Movie.java?ref=75a466fd09613d93c2bd7754c26b3dd176f90496",
    "patch": "@@ -0,0 +1,38 @@\n+package com.example.vsfe.item13_14;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Comparator;\n+\n+import static java.util.Comparator.comparing;\n+\n+@AllArgsConstructor\n+public class Movie implements Cloneable, Comparable<Movie> {\n+    String name;\n+    String director;\n+    String[] staffs;\n+    int release_year;\n+    Nation nation;\n+\n+    private static final Comparator<Movie> COMPARATOR =\n+            comparing((Movie mv) -> mv.name)\n+            .thenComparingInt(mv -> mv.release_year)\n+            .thenComparing(mv -> mv.director)\n+            .thenComparing(mv -> mv.nation);\n+\n+    @Override\n+    public int compareTo(Movie o) {\n+        return COMPARATOR.compare(this, o);\n+    }\n+\n+    @Override\n+    public Movie clone() {\n+        try {\n+            Movie result = (Movie) super.clone();\n+            result.staffs = staffs.clone();\n+            return result;\n+        } catch(CloneNotSupportedException e) {\n+            throw new AssertionError();\n+        }\n+    }\n+}"
  },
  {
    "sha": "03e5d797f0a6ea37369ad8d1a076a2a6b05f7ee6",
    "filename": "vsfe/src/main/java/com/example/vsfe/item13_14/Nation.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/dolly0920/Effective_Java_Study/blob/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item13_14/Nation.java",
    "raw_url": "https://github.com/dolly0920/Effective_Java_Study/raw/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item13_14/Nation.java",
    "contents_url": "https://api.github.com/repos/dolly0920/Effective_Java_Study/contents/vsfe/src/main/java/com/example/vsfe/item13_14/Nation.java?ref=75a466fd09613d93c2bd7754c26b3dd176f90496",
    "patch": "@@ -0,0 +1,5 @@\n+package com.example.vsfe.item13_14;\n+\n+public enum Nation {\n+    KOREA, JAPAN, USA\n+}"
  },
  {
    "sha": "e11e7371c30691e14149b9ce066f1f4f60aae1e2",
    "filename": "vsfe/src/main/java/com/example/vsfe/item24/LinkedList.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/dolly0920/Effective_Java_Study/blob/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item24/LinkedList.java",
    "raw_url": "https://github.com/dolly0920/Effective_Java_Study/raw/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item24/LinkedList.java",
    "contents_url": "https://api.github.com/repos/dolly0920/Effective_Java_Study/contents/vsfe/src/main/java/com/example/vsfe/item24/LinkedList.java?ref=75a466fd09613d93c2bd7754c26b3dd176f90496",
    "patch": "@@ -0,0 +1,69 @@\n+package com.example.vsfe.item24;\n+\n+import java.util.Iterator;\n+\n+public class LinkedList {\n+    private Node head;\n+    private int size;\n+\n+    public LinkedList() {}\n+    public int getSize() { return this.size; }\n+    public boolean isEmpty() { return getSize() == 0; }\n+\n+    public void insert(int x) {\n+        Node next = new Node(x);\n+        if(this.head != null) {\n+            head.prev = next;\n+            next.next = head;\n+        }\n+        this.head = next;\n+    }\n+\n+    public int remove() {\n+        if (isEmpty()) throw new IllegalStateException();\n+\n+        int result = head.getData();\n+        head = head.next;\n+        head.prev = null;\n+        return result;\n+    }\n+\n+    private class LLIterator implements Iterator<Node> {\n+        Node cur;\n+\n+        LLIterator() { cur = LinkedList.this.head; }\n+\n+        @Override\n+        public boolean hasNext() { return cur.next != null; }\n+\n+        @Override\n+        public Node next() {\n+            cur = cur.next;\n+            return cur;\n+        }\n+\n+        @Override\n+        public void remove() {\n+            if(LinkedList.this.getSize() == 1) {\n+                LinkedList.this.head = null;\n+                return;\n+            }\n+            if(cur.prev != null && cur.next != null) {\n+                cur.prev.next = cur.next;\n+                cur.next.prev = cur.prev;\n+            }\n+            else if(cur.prev != null) {\n+                cur.prev.next = null;\n+            }\n+            else {\n+                cur.next.prev = null;\n+            }\n+        }\n+\n+        public Node prev() {\n+            if (cur.prev == null) throw new IllegalStateException();\n+            cur = cur.prev;\n+            return cur;\n+        }\n+    }\n+}"
  },
  {
    "sha": "f74d63e2f3f7945160f88c25c7ed1bd107641ad4",
    "filename": "vsfe/src/main/java/com/example/vsfe/item24/Node.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/dolly0920/Effective_Java_Study/blob/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item24/Node.java",
    "raw_url": "https://github.com/dolly0920/Effective_Java_Study/raw/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/main/java/com/example/vsfe/item24/Node.java",
    "contents_url": "https://api.github.com/repos/dolly0920/Effective_Java_Study/contents/vsfe/src/main/java/com/example/vsfe/item24/Node.java?ref=75a466fd09613d93c2bd7754c26b3dd176f90496",
    "patch": "@@ -0,0 +1,15 @@\n+package com.example.vsfe.item24;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class Node {\n+    private final int data;\n+    Node prev, next;\n+\n+    public Node(int x) {\n+        this.data = x;\n+    }\n+}"
  },
  {
    "sha": "b8de7fdf2294ac92bc8287ffdcf9935f96d9fa57",
    "filename": "vsfe/src/test/java/com/example/vsfe/item13_14/MovieTest.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/dolly0920/Effective_Java_Study/blob/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/test/java/com/example/vsfe/item13_14/MovieTest.java",
    "raw_url": "https://github.com/dolly0920/Effective_Java_Study/raw/75a466fd09613d93c2bd7754c26b3dd176f90496/vsfe/src/test/java/com/example/vsfe/item13_14/MovieTest.java",
    "contents_url": "https://api.github.com/repos/dolly0920/Effective_Java_Study/contents/vsfe/src/test/java/com/example/vsfe/item13_14/MovieTest.java?ref=75a466fd09613d93c2bd7754c26b3dd176f90496",
    "patch": "@@ -0,0 +1,39 @@\n+package com.example.vsfe.item13_14;\n+\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MovieTest {\n+    Movie movie1 = new Movie(\"AA\", \"BBB\", new String[] {\"A\", \"B\", \"C\"}, 2020, Nation.KOREA);\n+    Movie movie2 = new Movie(\"AA\", \"BBB\", new String[] {\"S\", \"B\", \"C\"}, 2019, Nation.KOREA);\n+    Movie movie3 = new Movie(\"BB\", \"CCC\", new String[] {\"Y\", \"O\", \"N\"}, 2015, Nation.KOREA);\n+    Movie movie4 = new Movie(\"BB\", \"DDD\", new String[] {\"U\", \"S\", \"A\"}, 2015, Nation.USA);\n+    Movie movie5 = new Movie(\"CC\", \"EEE\", new String[] {\"J\", \"B\", \"C\"}, 2020, Nation.KOREA);\n+    Movie movie6 = new Movie(\"CC\", \"EEE\", new String[] {\"J\", \"B\", \"C\"}, 2020, Nation.KOREA);\n+\n+    @Test\n+    public void compareTest() {\n+        assertTrue(movie1.compareTo(movie2) > 0);\n+        assertTrue(movie1.compareTo(movie3) < 0);\n+        assertTrue(movie3.compareTo(movie4) < 0);\n+        assertTrue(movie5.compareTo(movie6) == 0);\n+    }\n+\n+    @Test\n+    public void cloneTest() {\n+        Movie newMovie = movie1.clone();\n+\n+        assertEquals(false, movie1 == newMovie);\n+\n+        assertEquals(true, movie1.name.equals(newMovie.name));\n+        assertEquals(true, movie1.director.equals(newMovie.director));\n+        assertEquals(false, movie1.staffs.equals(newMovie.staffs));\n+        assertEquals(true, Arrays.equals(movie1.staffs, newMovie.staffs));\n+\n+    }\n+}"
  }
]
