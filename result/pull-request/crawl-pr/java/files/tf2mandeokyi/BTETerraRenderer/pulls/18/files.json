[
  {
    "sha": "803be66735280fc05f92e64ea48429cb97ac3835",
    "filename": "src/main/java/com/mndk/bte_tr/BTETerraRenderer.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/BTETerraRenderer.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/BTETerraRenderer.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/BTETerraRenderer.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -1,12 +1,16 @@\n package com.mndk.bte_tr;\n \n-import net.minecraftforge.fml.common.Mod;\n-import net.minecraftforge.fml.common.SidedProxy;\n-import net.minecraftforge.fml.common.event.*;\n import org.apache.logging.log4j.Logger;\n \n import com.mndk.bte_tr.proxy.CommonProxy;\n \n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.common.SidedProxy;\n+import net.minecraftforge.fml.common.event.FMLInitializationEvent;\n+import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;\n+import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;\n+import net.minecraftforge.fml.common.event.FMLServerStartingEvent;\n+\n @Mod(modid = BTETerraRenderer.MODID, name = BTETerraRenderer.NAME, clientSideOnly = true)\n public class BTETerraRenderer {\n "
  },
  {
    "sha": "c4bfe374afaca46e341616e3ea72ee3d7d0cc146",
    "filename": "src/main/java/com/mndk/bte_tr/config/ConfigHandler.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/config/ConfigHandler.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/config/ConfigHandler.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/config/ConfigHandler.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -9,32 +9,35 @@\n public class ConfigHandler {\n \n     public static final Yaml YAML = new Yaml();\n-    private static final String fileLocation = \"config/\" + BTETerraRenderer.MODID + \".yml\";\n+    private static final String YAML_FILE_LOCATION = \"config/\" + BTETerraRenderer.MODID + \"/config.yml\";\n     private static ModConfig config;\n \n-    public static void init() throws IOException {\n+    public static void init(String fileLocation) throws IOException {\n         if(!new File(fileLocation).exists()) {\n-            saveDefaultFile();\n+            saveDefaultFile(fileLocation);\n         }\n \n         try {\n             config = new ModConfig(YAML.load(new FileReader(fileLocation)));\n         } catch(FileNotFoundException e) {\n             System.out.println(\"Cannot load configuration file!\");\n         }\n-        System.out.println(config.getYLevel());\n+    }\n+\n+    public static void init() throws IOException {\n+        init(YAML_FILE_LOCATION);\n     }\n \n     public static ModConfig getModConfig() {\n         return config;\n     }\n \n-    public static void saveDefaultFile() throws IOException {\n+    public static void saveDefaultFile(String fileLocation) throws IOException {\n         FileWriter writer = new FileWriter(fileLocation);\n         new ModConfig().saveTo(YAML, writer);\n     }\n \n     public static void saveConfig() throws IOException {\n-        config.saveTo(YAML, new FileWriter(fileLocation));\n+        config.saveTo(YAML, new FileWriter(YAML_FILE_LOCATION));\n     }\n }"
  },
  {
    "sha": "f98e11a00516d8cd112757a2d68dc77cb0d52d08",
    "filename": "src/main/java/com/mndk/bte_tr/config/ModConfig.java",
    "status": "modified",
    "additions": 10,
    "deletions": 13,
    "changes": 23,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/config/ModConfig.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/config/ModConfig.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/config/ModConfig.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -7,18 +7,20 @@\n \n import org.yaml.snakeyaml.Yaml;\n \n-import com.mndk.bte_tr.map.RenderMapSource;\n+import com.mndk.bte_tr.map.ExternalTileMap;\n+import com.mndk.bte_tr.map.TileMapJsonLoader;\n \n public class ModConfig {\n \n     private AlignmentAxis align;\n     private double yLevel;\n-    private RenderMapSource mapSource;\n+    private String mapId;\n     private double opacity;\n     private boolean renderTiles;\n     private int zoom;\n     private int radius;\n \n+    public static ExternalTileMap currentMapManager;\n \n     public static class AlignmentAxis {\n         public double x, z;\n@@ -32,7 +34,7 @@ public ModConfig() {\n         this.align = new AlignmentAxis(0, 0);\n         this.renderTiles = false;\n         this.yLevel = 4;\n-        this.mapSource = RenderMapSource.OSM;\n+        this.setMapId(\"osm\");\n         this.opacity = 0.7;\n         this.zoom = 0;\n         this.radius = 2;\n@@ -54,9 +56,7 @@ public ModConfig(Map<String, Object> map) {\n \n         if(map.containsKey(\"y_level\")) this.yLevel = (double) map.get(\"y_level\");\n \n-        try {\n-        \tif(map.containsKey(\"map_source\")) this.mapSource = RenderMapSource.valueOf((String) map.get(\"map_source\"));\n-        } catch(Exception ignored) {}\n+        if(map.containsKey(\"map_id\")) this.setMapId((String) map.get(\"map_id\"));\n \n         if(map.containsKey(\"opacity\")) this.opacity = (double) map.get(\"opacity\");\n \n@@ -76,7 +76,7 @@ public void saveTo(Yaml yaml, FileWriter fileWriter) throws IOException {\n         }});\n         map.put(\"draw\", renderTiles);\n         map.put(\"y_level\", yLevel);\n-        map.put(\"map_source\", mapSource.toString());\n+        map.put(\"map_id\", mapId);\n         map.put(\"opacity\", opacity);\n         map.put(\"zoom\", zoom);\n         map.put(\"radius\", radius);\n@@ -110,12 +110,9 @@ public void setYLevel(double yLevel) {\n         this.yLevel = yLevel;\n     }\n \n-    public RenderMapSource getMapSource() {\n-        return mapSource;\n-    }\n-\n-    public void setMapSource(RenderMapSource mapSource) {\n-        this.mapSource = mapSource;\n+    public void setMapId(String mapId) {\n+        this.mapId = mapId;\n+        currentMapManager = TileMapJsonLoader.result.getTileMap(mapId);\n     }\n \n     public double getOpacity() {"
  },
  {
    "sha": "65cc51d4b3420a2dbfc3639c91ba7c3b3087f182",
    "filename": "src/main/java/com/mndk/bte_tr/event/RenderEvent.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/event/RenderEvent.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/event/RenderEvent.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/event/RenderEvent.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -2,7 +2,8 @@\n \n import com.mndk.bte_tr.BTETerraRenderer;\n import com.mndk.bte_tr.config.ConfigHandler;\n-import com.mndk.bte_tr.renderer.MapTileRenderer;\n+import com.mndk.bte_tr.config.ModConfig;\n+import com.mndk.bte_tr.renderer.TileMapRenderer;\n \n import net.minecraft.client.Minecraft;\n import net.minecraft.entity.player.EntityPlayer;\n@@ -30,7 +31,7 @@ public static void onRenderEvent(final RenderWorldLastEvent event) {\n \n         if(ConfigHandler.getModConfig().isTileRendering()) {\n             try {\n-                MapTileRenderer.renderTiles(ConfigHandler.getModConfig().getMapSource().getMapRenderer(), px, py, pz);\n+                TileMapRenderer.renderTiles(ModConfig.currentMapManager, px, py, pz);\n             } catch(IllegalArgumentException exception) {\n                 exception.printStackTrace();\n             }"
  },
  {
    "sha": "9a0da30c0d3317c34d0c418560fd4884a96a56e7",
    "filename": "src/main/java/com/mndk/bte_tr/gui/sub_ui/MapSelectorUI.java",
    "status": "modified",
    "additions": 38,
    "deletions": 28,
    "changes": 66,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/gui/sub_ui/MapSelectorUI.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/gui/sub_ui/MapSelectorUI.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/gui/sub_ui/MapSelectorUI.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -4,9 +4,12 @@\n \n import com.mndk.bte_tr.BTETerraRenderer;\n import com.mndk.bte_tr.config.ConfigHandler;\n+import com.mndk.bte_tr.config.ModConfig;\n import com.mndk.bte_tr.gui.MapRenderingOptionsUI;\n import com.mndk.bte_tr.gui.util.ImageUiRenderer;\n-import com.mndk.bte_tr.map.RenderMapSource;\n+import com.mndk.bte_tr.map.ExternalTileMap;\n+import com.mndk.bte_tr.map.TileMapJsonLoader;\n+import com.mndk.bte_tr.map.TileMapJsonResult;\n \n import net.minecraft.client.gui.Gui;\n import net.minecraft.client.gui.GuiButton;\n@@ -34,8 +37,6 @@\n     \n     private static final ResourceLocation RADIO_BUTTON_IMAGE =\n             new ResourceLocation(BTETerraRenderer.MODID, \"textures/ui/radio_button.png\");\n-    \n-    private static RenderMapSource[] sources = RenderMapSource.values();\n \n     // private GuiButton doneButton;\n     \n@@ -53,9 +54,11 @@ protected void init() {\n \t\t\n \t\tint tempWidth;\n \t\tLIST_WIDTH = 0;\n-\t\tfor(RenderMapSource source : sources) {\n-\t\t\ttempWidth = this.fontRenderer.getStringWidth(source.getTranslatedString());\n-\t\t\tLIST_WIDTH = LIST_WIDTH < tempWidth ? tempWidth : LIST_WIDTH;\n+\t\tfor(TileMapJsonResult.Category category : TileMapJsonLoader.result.getCategories()) {\n+\t\t\tfor(ExternalTileMap map : category.getMaps()) {\n+\t\t\t\ttempWidth = this.fontRenderer.getStringWidth(map.getName());\n+\t\t\t\tLIST_WIDTH = LIST_WIDTH < tempWidth ? tempWidth : LIST_WIDTH;\n+\t\t\t}\n \t\t}\n \t\t\n \t\tLIST_WIDTH += 2 * LIST_PADDING + 20;\n@@ -88,27 +91,30 @@ public void drawScreen(int mouseX, int mouseY, float partialTicks) {\n \t\tint c = LIST_TOP_MARGIN + LIST_PADDING + this.fontRenderer.FONT_HEIGHT + TITLE_MARGIN_BOTTOM;\n \t\tint h = this.fontRenderer.FONT_HEIGHT + ELEMENT_TOP_MARGIN;\n \t\t\n-\t\tGui.drawRect(LIST_LEFT, LIST_TOP_MARGIN, LIST_LEFT + LIST_WIDTH, c + h * sources.length, 0x3F000000);\n+\t\tGui.drawRect(LIST_LEFT, LIST_TOP_MARGIN, LIST_LEFT + LIST_WIDTH, c + h * 100, 0x3F000000); // TODO change 100 to something else\n \t\t\n \t\tthis.drawCenteredString(\n                 this.fontRenderer, I18n.format(\"gui.bte_tr.maprenderer.map_source\"),\n                 LIST_LEFT + LIST_WIDTH / 2, LIST_TOP_MARGIN + LIST_PADDING, 0xFFFFFF\n         );\n \t\t\n-        for(int i=0;i<sources.length;i++) {\n-            RenderMapSource source = sources[i];\n-            float u = (ConfigHandler.getModConfig().getMapSource() == source ? 1/8.f : 0) + (isMouseOnIndex(mouseX, mouseY, i) ? 1/16.f : 0);\n-            ImageUiRenderer.drawImage(RADIO_BUTTON_IMAGE,\n-            \t\tLIST_LEFT + LIST_PADDING,\n-                    c + h * i - 8,\n-                    0,\n-                    16, 16,\n-                    u, 0, u + 1/16.f, 1/16.f);\n-            this.drawString(this.fontRenderer, source.getTranslatedString(),\n-            \t\tLIST_LEFT + LIST_PADDING + 20,\n-                    c + h * i - (this.fontRenderer.FONT_HEIGHT / 2),\n-                    0xFFFFFF);\n-        }\n+\t\tint i = 0;\n+\t\tfor(TileMapJsonResult.Category category : TileMapJsonLoader.result.getCategories()) {\n+\t\t\tfor(ExternalTileMap map : category.getMaps()) {\n+\t            float u = (ModConfig.currentMapManager.getId().equals(map.getId()) ? 1/8.f : 0) + (isMouseOnIndex(mouseX, mouseY, i) ? 1/16.f : 0);\n+\t            ImageUiRenderer.drawImage(RADIO_BUTTON_IMAGE,\n+\t            \t\tLIST_LEFT + LIST_PADDING,\n+\t                    c + h * i - 8,\n+\t                    0,\n+\t                    16, 16,\n+\t                    u, 0, u + 1/16.f, 1/16.f);\n+\t            this.drawString(this.fontRenderer, map.getName(),\n+\t            \t\tLIST_LEFT + LIST_PADDING + 20,\n+\t                    c + h * i - (this.fontRenderer.FONT_HEIGHT / 2),\n+\t                    0xFFFFFF);\n+\t            i++;\n+\t\t\t}\n+\t\t}\n \n         // doneButton.drawButton(parent.mc, mouseX, mouseY, partialTicks);\n \t}\n@@ -131,13 +137,17 @@ private boolean isMouseOnIndex(int mouseX, int mouseY, int index) {\n \t\n \t\n \t@Override\n-\tpublic void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException { \n-\t\tfor(int i=0;i<sources.length;i++) {\n-            if(isMouseOnIndex(mouseX, mouseY, i)) {\n-                ConfigHandler.getModConfig().setMapSource(sources[i]);\n-                return;\n-            }\n-        }\n+\tpublic void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {\n+\t\tint i = 0;\n+\t\tfor(TileMapJsonResult.Category category : TileMapJsonLoader.result.getCategories()) {\n+\t\t\tfor(ExternalTileMap map : category.getMaps()) {\n+\t            if(isMouseOnIndex(mouseX, mouseY, i)) {\n+\t                ConfigHandler.getModConfig().setMapId(map.getId());\n+\t                return;\n+\t            }\n+\t            i++;\n+\t        }\n+\t\t}\n \t}\n \t\n \t"
  },
  {
    "sha": "cd0f735803b3611d48fee1072168fa72fc2188c6",
    "filename": "src/main/java/com/mndk/bte_tr/map/ExternalMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 150,
    "changes": 150,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/ExternalMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/ExternalMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/ExternalMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,150 +0,0 @@\n-package com.mndk.bte_tr.map;\n-\n-import copy.io.github.terra121.projection.OutOfProjectionBoundsException;\n-import net.minecraft.client.renderer.BufferBuilder;\n-import net.minecraft.client.renderer.Tessellator;\n-import net.minecraft.client.renderer.vertex.DefaultVertexFormats;\n-import org.lwjgl.opengl.GL11;\n-\n-import javax.imageio.ImageIO;\n-import java.awt.image.BufferedImage;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n-public abstract class ExternalMapManager {\n-\n-    private final RenderMapSource source;\n-    private final ExecutorService donwloadExecutor;\n-\n-    public ExternalMapManager(RenderMapSource source, int maximumDownloadThreads) {\n-        this.source = source;\n-        this.donwloadExecutor = Executors.newFixedThreadPool(maximumDownloadThreads);\n-    }\n-\n-\n-\n-    public void initializeMapImageByPlayerCoordinate(\n-            double playerX, double playerZ,\n-            int tileDeltaX, int tileDeltaY,\n-            int zoom\n-    ) throws OutOfProjectionBoundsException {\n-\n-        int[] tileCoord = this.playerPositionToTileCoord(playerX, playerZ, zoom);\n-\n-        String tileId = genTileKey(tileCoord[0]+tileDeltaX, tileCoord[1]+tileDeltaY, zoom, this.source);\n-\n-        BufferedImage image = this.fetchMapSync(playerX, playerZ, tileDeltaX, tileDeltaY, zoom);\n-\n-        MapTileManager.getInstance().addImageToRenderList(tileId, image);\n-    }\n-\n-\n-\n-    /**\n-     * This should return: [tileDeltaX, tileDeltaY, u, v]\n-     */\n-    protected abstract int[] getCornerMatrix(int i);\n-    public abstract int[] playerPositionToTileCoord(double playerX, double playerZ, int zoom) throws OutOfProjectionBoundsException;\n-    public abstract double[] tileCoordToPlayerPosition(int tileX, int tileY, int zoom) throws OutOfProjectionBoundsException;\n-    protected abstract int getZoomFromLevel(int level);\n-    public abstract String getUrlTemplate(int tileX, int tileY, int level);\n-\n-\n-\n-    public URLConnection getTileUrlConnection(double playerX, double playerZ, int tileDeltaX, int tileDeltaY, int zoom) {\n-        try {\n-            int[] tilePos = this.playerPositionToTileCoord(playerX, playerZ, zoom);\n-\n-            String url = this.getUrlTemplate(tilePos[0] + tileDeltaX, tilePos[1] + tileDeltaY, zoom);\n-\n-            return new URL(url).openConnection();\n-        }catch(OutOfProjectionBoundsException | IOException exception) {\n-            exception.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-\n-\n-    public BufferedImage fetchMapSync(double playerX, double playerZ, int tileDeltaX, int tileDeltaY, int zoom) {\n-        try {\n-            URLConnection connection = this.getTileUrlConnection(playerX, playerZ, tileDeltaX, tileDeltaY, zoom);\n-            if(connection == null) return null;\n-            connection.connect();\n-            return ImageIO.read(connection.getInputStream());\n-        } catch(IOException exception) {\n-            exception.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-\n-\n-    public void renderTile(\n-            Tessellator t, BufferBuilder builder,\n-            int level,\n-            double y, float opacity,\n-            double px, double py, double pz,\n-            int tileDeltaX, int tileDeltaY\n-    ) {\n-        try {\n-            int zoom = this.getZoomFromLevel(level);\n-\n-            int[] tilePos = this.playerPositionToTileCoord(px, pz, zoom);\n-\n-            String tileKey = genTileKey(tilePos[0]+tileDeltaX, tilePos[1]+tileDeltaY, zoom, source);\n-\n-            MapTileCache cache = MapTileManager.getInstance().getTileCache();\n-\n-            MapTileManager.getInstance().cacheAllImagesInQueue();\n-\n-            if(!cache.isTileInDownloadingState(tileKey)) {\n-                if(!cache.textureExists(tileKey)) {\n-                    // If the tile is not loaded, load it in new thread\n-                    cache.setTileDownloadingState(tileKey, true);\n-                    this.donwloadExecutor.execute(() -> {\n-                        try {\n-                            initializeMapImageByPlayerCoordinate(px, pz, tileDeltaX, tileDeltaY, zoom);\n-                            cache.setTileDownloadingState(tileKey, false);\n-\n-                        } catch (OutOfProjectionBoundsException ignored) { }\n-                    });\n-                }\n-                else {\n-\n-                    cache.bindTexture(tileKey);\n-\n-                    // begin vertex\n-                    builder.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_TEX_COLOR);\n-\n-                    double[] temp;\n-\n-                    // Convert boundaries\n-                    for (int i = 0; i < 4; i++) {\n-\n-                        int[] mat = this.getCornerMatrix(i);\n-                        temp = tileCoordToPlayerPosition(tilePos[0] + mat[0] + tileDeltaX, tilePos[1] + mat[1] + tileDeltaY, zoom);\n-\n-                        builder.pos(temp[0] - px, y - py, temp[1] - pz)\n-                                .tex(mat[2], mat[3])\n-                                .color(1.f, 1.f, 1.f, opacity)\n-                                .endVertex();\n-                    }\n-\n-                    t.draw();\n-                }\n-            }\n-\n-        } catch(OutOfProjectionBoundsException ignored) { }\n-    }\n-\n-\n-\n-    public static String genTileKey(int tileX, int tileY, int zoom, RenderMapSource source) {\n-        return \"tilemap_\" + source + \"_\" + tileX + \"_\" + tileY + \"_\" + zoom;\n-    }\n-\n-}"
  },
  {
    "sha": "212fc8c28572b2459e819a2aac20cc6e8d13c968",
    "filename": "src/main/java/com/mndk/bte_tr/map/ExternalTileMap.java",
    "status": "added",
    "additions": 279,
    "deletions": 0,
    "changes": 279,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/ExternalTileMap.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/ExternalTileMap.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/ExternalTileMap.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -0,0 +1,279 @@\n+package com.mndk.bte_tr.map;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Random;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.lwjgl.opengl.GL11;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.mndk.bte_tr.map.bing.BingTileMap;\n+import com.mndk.bte_tr.map.kakao_wtm.KakaoTileMap;\n+import com.mndk.bte_tr.map.mercator.MercatorTileMap;\n+import com.mndk.bte_tr.util.JsonUtil;\n+\n+import copy.io.github.terra121.projection.OutOfProjectionBoundsException;\n+import net.minecraft.client.renderer.BufferBuilder;\n+import net.minecraft.client.renderer.Tessellator;\n+import net.minecraft.client.renderer.vertex.DefaultVertexFormats;\n+\n+public abstract class ExternalTileMap {\n+\t\n+\t\n+\t\n+\tprivate static final int[][] CORNER_MATRIX = {\n+            {0, 1, 0, 1}, // top left\n+            {1, 1, 1, 1}, // top right\n+            {1, 0, 1, 0}, // bottom right\n+            {0, 0, 0, 0}  // bottom left\n+    };\n+\t\n+\t\n+\t\n+\tprivate static final int[][] CORNER_MATRIX_INVERT_LAT = {\n+            {0, 1, 0, 0}, // top left\n+            {1, 1, 1, 0}, // top right\n+            {1, 0, 1, 1}, // bottom right\n+            {0, 0, 0, 1}  // bottom left\n+    };\n+\t\n+\t\n+\t\n+\tstatic final int DEFAULT_MAX_THREAD = 2;\n+\tstatic final int DEFAULT_ZOOM = 18;\n+\n+\t\n+\t\n+\tprivate final String id, name, tileUrl;\n+    private final Map<String, String> requestHeaders;\n+    private final ExecutorService downloadExecutor;\n+    protected final boolean invertLatitude, invertZoom;\n+    private final int defaultZoom;\n+    \n+    \n+    \n+    public static ExternalTileMap parse(JsonObject object) throws Exception {\n+    \tString projectionId = JsonUtil.validateStringElement(object, \"projection\");\n+    \tswitch(projectionId.toLowerCase()) {\n+    \t\tcase \"mercator\": return new MercatorTileMap(object);\n+    \t\tcase \"bing\": return new BingTileMap(object);\n+    \t\tcase \"kakao_wtm\": return new KakaoTileMap(object);\n+    \t}\n+    \tthrow new Exception(projectionId + \" projection doesn't exist!\");\n+    }\n+    \n+    \n+    \n+    protected ExternalTileMap(JsonObject object) throws Exception {\n+    \t\n+    \tthis.id = JsonUtil.validateStringElement(object, \"id\");\n+    \tthis.name = JsonUtil.validateStringElement(object, \"name\");\n+    \tthis.tileUrl = JsonUtil.validateStringElement(object, \"tile_url\");\n+\t\tthis.defaultZoom = JsonUtil.validateIntegerElement(object, \"default_zoom\", DEFAULT_ZOOM);\n+\t\tthis.invertLatitude = JsonUtil.validateBooleanElement(object, \"invert_lat\", false);\n+\t\tthis.invertZoom = JsonUtil.validateBooleanElement(object, \"invert_zoom\", false);\n+\n+\t\tint maxThread = JsonUtil.validateIntegerElement(object, \"max_thread\", DEFAULT_MAX_THREAD);\n+\t\tthis.downloadExecutor = Executors.newFixedThreadPool(maxThread);\n+\n+\t\tthis.requestHeaders = new HashMap<>();\n+\t\tif(object.get(\"request_headers\") != null) {\n+\t\t\tJsonObject request_headers;\n+\t\t\ttry {\n+\t\t\t\trequest_headers = object.get(\"request_headers\").getAsJsonObject();\n+\t\t\t} catch(IllegalStateException e) { throw new Exception(\"request_headers should be an object!\"); }\n+\t\t\t\n+\t\t\tfor(Entry<String, JsonElement> entry : request_headers.entrySet()) {\n+\t\t\t\tString key = entry.getKey();\n+\t\t\t\trequestHeaders.put(key, JsonUtil.validateStringElement(request_headers, key));\n+\t\t\t}\n+\t\t}\n+    }\n+\n+\n+\n+    public void initializeMapImageByPlayerCoordinate(double playerX, double playerZ, int tileDeltaX, int tileDeltaY, int zoom) \n+    \t\tthrows OutOfProjectionBoundsException {\n+\n+        int[] tileCoord = this.playerPositionToTileCoord(playerX, playerZ, zoom);\n+\n+        String tileId = this.genTileKey(tileCoord[0]+tileDeltaX, tileCoord[1]+tileDeltaY, zoom);\n+\n+        BufferedImage image = this.fetchMapSync(playerX, playerZ, tileDeltaX, tileDeltaY, zoom);\n+\n+        TileMapCache.getInstance().addImageToRenderQueue(tileId, image);\n+    }\n+    \n+    \n+    \n+    public abstract int[] playerPositionToTileCoord(double playerX, double playerZ, int zoom) throws OutOfProjectionBoundsException;\n+    public abstract double[] tileCoordToPlayerPosition(int tileX, int tileY, int zoom) throws OutOfProjectionBoundsException;\n+    \n+    \n+    \n+    public String getUrlTemplate(int tileX, int tileY, int zoom) {\n+    \treturn replaceRandoms(tileUrl).replace(\"{z}\", zoom + \"\").replace(\"{x}\", tileX + \"\").replace(\"{y}\", tileY + \"\");\n+    }\n+    \n+    \n+    \n+    private static String replaceRandoms(String url) {\n+    \tMatcher m = Pattern.compile(\"\\\\{random:([^{}]+)\\\\}\").matcher(url);\n+    \tStringBuffer buffer = new StringBuffer();\n+    \tRandom r = new Random();\n+    \twhile(m.find()) {\n+    \t\tString[] randoms = m.group(1).split(\",\");\n+    \t\tm.appendReplacement(buffer, randoms[r.nextInt(randoms.length)]);\n+    \t}\n+    \tm.appendTail(buffer);\n+    \treturn buffer.toString();\n+    }\n+\n+\n+\n+    /**\n+     * This should return: [tileDeltaX, tileDeltaY, u, v]\n+     */\n+    protected int[] getCornerMatrix(int i) {\n+    \treturn invertLatitude ? CORNER_MATRIX_INVERT_LAT[i] : CORNER_MATRIX[i];\n+    }\n+    \n+    \n+    \n+    protected int getZoomFromLevel(int level) {\n+    \treturn invertZoom ? defaultZoom + level : defaultZoom - level;\n+    }\n+\n+\n+\n+    public URLConnection getTileUrlConnection(double playerX, double playerZ, int tileDeltaX, int tileDeltaY, int zoom) {\n+        try {\n+            int[] tilePos = this.playerPositionToTileCoord(playerX, playerZ, zoom);\n+\n+            String url = this.getUrlTemplate(tilePos[0] + tileDeltaX, tilePos[1] + tileDeltaY, zoom);\n+\n+            URLConnection connection = new URL(url).openConnection();\n+            \n+            for(Entry<String, String> entry : this.requestHeaders.entrySet()) {\n+            \tconnection.setRequestProperty(entry.getKey(), entry.getValue());\n+            }\n+            connection.setUseCaches(true);\n+            \n+            return connection;\n+            \n+        }catch(OutOfProjectionBoundsException | IOException exception) {\n+            exception.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+\n+\n+    public BufferedImage fetchMapSync(double playerX, double playerZ, int tileDeltaX, int tileDeltaY, int zoom) {\n+        try {\n+            URLConnection connection = this.getTileUrlConnection(playerX, playerZ, tileDeltaX, tileDeltaY, zoom);\n+            if(connection == null) return null;\n+            connection.connect();\n+            return ImageIO.read(connection.getInputStream());\n+        } catch(IOException exception) {\n+            exception.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+\n+\n+    public void renderTile(\n+            Tessellator t, BufferBuilder builder,\n+            int level,\n+            double y, float opacity,\n+            double px, double py, double pz,\n+            int tileDeltaX, int tileDeltaY\n+    ) {\n+        try {\n+            int zoom = this.getZoomFromLevel(level);\n+\n+            int[] tilePos = this.playerPositionToTileCoord(px, pz, zoom);\n+\n+            String tileKey = this.genTileKey(tilePos[0]+tileDeltaX, tilePos[1]+tileDeltaY, zoom);\n+\n+            TileMapCache cache = TileMapCache.getInstance();\n+\n+            cache.cacheAllImagesInQueue();\n+\n+            if(!cache.isTileInDownloadingState(tileKey)) {\n+                if(!cache.textureExists(tileKey)) {\n+                    // If the tile is not loaded, load it in new thread\n+                    cache.setTileDownloadingState(tileKey, true);\n+                    this.downloadExecutor.execute(() -> {\n+                        try {\n+                            initializeMapImageByPlayerCoordinate(px, pz, tileDeltaX, tileDeltaY, zoom);\n+                            cache.setTileDownloadingState(tileKey, false);\n+\n+                        } catch (OutOfProjectionBoundsException ignored) { }\n+                    });\n+                }\n+                else {\n+\n+                    cache.bindTexture(tileKey);\n+\n+                    // begin vertex\n+                    builder.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_TEX_COLOR);\n+\n+                    double[] temp;\n+\n+                    // Convert boundaries\n+                    for (int i = 0; i < 4; i++) {\n+\n+                        int[] mat = this.getCornerMatrix(i);\n+                        temp = tileCoordToPlayerPosition(tilePos[0] + mat[0] + tileDeltaX, tilePos[1] + mat[1] + tileDeltaY, zoom);\n+\n+                        builder.pos(temp[0] - px, y - py, temp[1] - pz)\n+                                .tex(mat[2], mat[3])\n+                                .color(1.f, 1.f, 1.f, opacity)\n+                                .endVertex();\n+                    }\n+\n+                    t.draw();\n+                }\n+            }\n+\n+        } catch(OutOfProjectionBoundsException ignored) { }\n+    }\n+    \n+    \n+    \n+    public String getName() {\n+    \treturn name;\n+    }\n+    \n+    public String getId() {\n+    \treturn id;\n+    }\n+\n+\n+\n+    public String genTileKey(int tileX, int tileY, int zoom) {\n+        return \"tilemap_\" + this.id + \"_\" + tileX + \"_\" + tileY + \"_\" + zoom;\n+    }\n+    \n+    \n+    \n+    @Override\n+    public String toString() {\n+    \treturn ExternalTileMap.class.getName() + \"{id=\" + id + \", name=\" + name + \", tile_url=\" + tileUrl + \"}\";\n+    }\n+\n+}"
  },
  {
    "sha": "2a6510a395fda2102dbebba96a9cc5750647d063",
    "filename": "src/main/java/com/mndk/bte_tr/map/MapTileManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 57,
    "changes": 57,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/MapTileManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/MapTileManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/MapTileManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,57 +0,0 @@\n-package com.mndk.bte_tr.map;\n-\n-import java.awt.image.BufferedImage;\n-import java.util.*;\n-\n-public class MapTileManager {\n-\n-    public static MapTileManager instance = new MapTileManager();\n-    public static MapTileManager getInstance() { return instance; }\n-\n-    private List<Map.Entry<String, BufferedImage>> imageRenderQueue;\n-    private final MapTileCache tileCache;\n-\n-    private MapTileManager() {\n-        this.imageRenderQueue = new ArrayList<>();\n-        this.tileCache = new MapTileCache(1000 * 60, 1000);\n-    }\n-\n-    public void addImageToRenderList(String tileId, BufferedImage image) {\n-        imageRenderQueue.add(new AbstractMap.SimpleEntry<>(tileId, image));\n-    }\n-\n-    /**\n-     * This function must be called in the thread where the opengl context is found.\n-     */\n-    public void cacheAllImagesInQueue() {\n-        List<Map.Entry<String, BufferedImage>> newList = new ArrayList<>();\n-\n-        while(!imageRenderQueue.isEmpty()) {\n-        \t// To prevent ConcurrentModificationException, the code is caching one image at a time.\n-            Map.Entry<String, BufferedImage> entry = imageRenderQueue.get(0);\n-            imageRenderQueue.remove(0);\n-            if(entry == null) continue;\n-            \n-            String tileKey = entry.getKey();\n-            BufferedImage image = entry.getValue();\n-\n-            try {\n-                if (entry.getValue() != null) {\n-                    tileCache.addTexture(tileKey, image);\n-                }\n-            } catch(Exception e) {\n-                e.printStackTrace();\n-                // Put the image data back to the queue if something went wrong\n-                newList.add(new AbstractMap.SimpleEntry<>(tileKey, image));\n-            }\n-        }\n-\n-        imageRenderQueue = newList;\n-\n-    }\n-\n-    public MapTileCache getTileCache() {\n-        return this.tileCache;\n-    }\n-\n-}"
  },
  {
    "sha": "dc37fba75e574b1f3e640be409b2aa7d351359a7",
    "filename": "src/main/java/com/mndk/bte_tr/map/RenderMapSource.java",
    "status": "removed",
    "additions": 0,
    "deletions": 36,
    "changes": 36,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/RenderMapSource.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/RenderMapSource.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/RenderMapSource.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,36 +0,0 @@\n-package com.mndk.bte_tr.map;\n-\n-import com.mndk.bte_tr.map.bing.BingAerialMapManager;\n-import com.mndk.bte_tr.map.bing.BingPlainMapManager;\n-import com.mndk.bte_tr.map.kakao.KakaoAerialMapManager;\n-import com.mndk.bte_tr.map.kakao.KakaoPlainMapManager;\n-import com.mndk.bte_tr.map.naver.NaverMapManager;\n-import com.mndk.bte_tr.map.osm.OpenStreetMapManager;\n-import com.mndk.bte_tr.map.tmap.TMapManager;\n-import com.mndk.bte_tr.util.TranslatableEnum;\n-\n-import net.minecraft.client.resources.I18n;\n-\n-public enum RenderMapSource implements TranslatableEnum<RenderMapSource> {\n-    OSM, BING_AERIAL, BING_PLAIN, KAKAO_AERIAL, KAKAO_PLAIN, TMAP, NAVER;\n-\n-    private ExternalMapManager renderer;\n-\n-    public String getTranslatedString() {\n-        return I18n.format(\"enum.bte_tr.mapsource.\" + super.toString());\n-    }\n-\n-    public ExternalMapManager getMapRenderer() {\n-        return renderer;\n-    }\n-\n-    static {\n-        KAKAO_AERIAL.renderer = new KakaoAerialMapManager();\n-        KAKAO_PLAIN.renderer = new KakaoPlainMapManager();\n-        OSM.renderer = new OpenStreetMapManager();\n-        BING_AERIAL.renderer = new BingAerialMapManager();\n-        BING_PLAIN.renderer = new BingPlainMapManager();\n-        TMAP.renderer = new TMapManager();\n-        NAVER.renderer = new NaverMapManager();\n-    }\n-}"
  },
  {
    "sha": "6319e5d1782132f20bc6061e8bde96b449837cf7",
    "filename": "src/main/java/com/mndk/bte_tr/map/TileMapCache.java",
    "status": "renamed",
    "additions": 44,
    "deletions": 2,
    "changes": 46,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/TileMapCache.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/TileMapCache.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/TileMapCache.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -8,7 +8,12 @@\n \n import com.mndk.bte_tr.BTETerraRenderer;\n \n-public class MapTileCache {\n+public class TileMapCache {\n+\t\n+\t\n+\t\n+    public static TileMapCache instance = new TileMapCache(1000 * 60 * 5, 10000);\n+    public static TileMapCache getInstance() { return instance; }\n \n \n \n@@ -23,14 +28,16 @@ private static void log(String message) {\n     private final Map<String, GLIdWrapper> glTextureIdMap;\n     private final Set<String> downloadingTileKeys;\n     private final long expireMilliseconds;\n+    private List<Map.Entry<String, BufferedImage>> imageRenderQueue;\n \n \n \n-    public MapTileCache(long expireMilliseconds, int maximumSize) {\n+    public TileMapCache(long expireMilliseconds, int maximumSize) {\n         this.glTextureIdMap = new HashMap<>();\n         this.downloadingTileKeys = new HashSet<>();\n         this.expireMilliseconds = expireMilliseconds;\n         this.maximumSize = maximumSize;\n+        this.imageRenderQueue = new ArrayList<>();\n     }\n \n \n@@ -158,6 +165,41 @@ private static int initializeTile(BufferedImage image) {\n \n         return glTextureId;\n     }\n+    \n+    \n+    \n+    public void addImageToRenderQueue(String tileId, BufferedImage image) {\n+        imageRenderQueue.add(new AbstractMap.SimpleEntry<>(tileId, image));\n+    }\n+    \n+    \n+    \n+    public void cacheAllImagesInQueue() {\n+        List<Map.Entry<String, BufferedImage>> newList = new ArrayList<>();\n+\n+        while(!imageRenderQueue.isEmpty()) {\n+        \t// To prevent ConcurrentModificationException, the code is caching one image at a time.\n+            Map.Entry<String, BufferedImage> entry = imageRenderQueue.get(0);\n+            imageRenderQueue.remove(0);\n+            if(entry == null) continue;\n+            \n+            String tileKey = entry.getKey();\n+            BufferedImage image = entry.getValue();\n+\n+            try {\n+                if (entry.getValue() != null) {\n+                    this.addTexture(tileKey, image);\n+                }\n+            } catch(Exception e) {\n+                e.printStackTrace();\n+                // Put the image data back to the queue if something went wrong\n+                newList.add(new AbstractMap.SimpleEntry<>(tileKey, image));\n+            }\n+        }\n+\n+        imageRenderQueue = newList;\n+\n+    }\n \n \n ",
    "previous_filename": "src/main/java/com/mndk/bte_tr/map/MapTileCache.java"
  },
  {
    "sha": "c94d93db8fd5831de58636183333ba2eb60845de",
    "filename": "src/main/java/com/mndk/bte_tr/map/TileMapJsonLoader.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/TileMapJsonLoader.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/TileMapJsonLoader.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/TileMapJsonLoader.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -0,0 +1,80 @@\n+package com.mndk.bte_tr.map;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.mndk.bte_tr.BTETerraRenderer;\n+import com.mndk.bte_tr.util.JsonUtil;\n+\n+public class TileMapJsonLoader {\n+\t\n+\tprivate static final String MAP_JSON_PATH = \"assets/\" + BTETerraRenderer.MODID + \"/maps.json\";\n+\t\n+\tpublic static final JsonParser JSON_PARSER = new JsonParser();\n+\tpublic static final Gson GSON = new Gson();\n+\t\n+\tpublic static TileMapJsonResult result;\n+\t\n+\tpublic static void load(String modConfigDirectory) throws Exception {\n+\n+\t\tFile configFolder = new File(modConfigDirectory + \"/\" + BTETerraRenderer.MODID);\n+\t\tFile customMapJson = new File(modConfigDirectory + \"/\" + BTETerraRenderer.MODID + \"/maps.json\");\n+\t\tif(!configFolder.isDirectory()) {\n+\t\t\tconfigFolder.mkdirs();\n+\t\t}\n+\t\tif(!customMapJson.exists()) {\n+\t\t\tsaveMapJsonTo(customMapJson);\n+\t\t}\n+\t\tresult = load(new FileReader(customMapJson));\n+\t}\n+\t\n+\n+\tprivate static TileMapJsonResult load(Reader fileReader) throws Exception {\n+\t\tJsonElement mapJson = JSON_PARSER.parse(fileReader);\n+\t\tJsonArray array = mapJson.getAsJsonObject().get(\"categories\").getAsJsonArray();\n+\t\tList<TileMapJsonResult.Category> result = new ArrayList<>();\n+\t\tfor(JsonElement element : array) {\n+\t\t\tif(!element.isJsonObject()) continue;\n+\t\t\tresult.add(getMapSetFromJsonObject(element.getAsJsonObject()));\n+\t\t}\n+\t\treturn new TileMapJsonResult(result);\n+\t}\n+\t\n+\t\n+\tprivate static void saveMapJsonTo(File file) throws IOException {\n+\t\tfile.createNewFile();\n+\t\tFileWriter writer = new FileWriter(file);\n+\t\t\n+\t\tInputStreamReader reader = new InputStreamReader(TileMapJsonLoader.class.getClassLoader().getResourceAsStream(MAP_JSON_PATH), Charset.defaultCharset());\n+\n+        int c;\n+        while ((c = reader.read()) != -1) writer.write(c);\n+        writer.close();\n+\t}\n+\t\n+\t\n+\tprivate static TileMapJsonResult.Category getMapSetFromJsonObject(JsonObject object) throws Exception {\n+\t\tString name = JsonUtil.validateStringElement(object, \"name\");\n+\t\t\n+\t\tList<ExternalTileMap> mapSet = new ArrayList<>();\n+\t\tJsonArray mapJsonArray = object.get(\"maps\").getAsJsonArray();\n+\t\tfor(JsonElement mapElement : mapJsonArray) {\n+\t\t\tif(!mapElement.isJsonObject()) continue;\n+\t\t\tmapSet.add(ExternalTileMap.parse(mapElement.getAsJsonObject()));\n+\t\t}\n+\t\t\n+\t\treturn new TileMapJsonResult.Category(name, mapSet);\n+\t}\n+}"
  },
  {
    "sha": "96b16b53e7dddf947d7ee37dcfd535516521fa95",
    "filename": "src/main/java/com/mndk/bte_tr/map/TileMapJsonResult.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/TileMapJsonResult.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/TileMapJsonResult.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/TileMapJsonResult.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -0,0 +1,63 @@\n+package com.mndk.bte_tr.map;\n+\n+import java.util.List;\n+\n+public class TileMapJsonResult {\n+\t\n+\tprivate final List<Category> categories;\n+\tprivate final int totalMapCount;\n+\tprivate final int uiElementCount;\n+\t\n+\tpublic TileMapJsonResult(List<Category> categories) {\n+\t\tthis.categories = categories;\n+\t\tint tot = 0, ui = 0;\n+\t\tfor(Category category : categories) {\n+\t\t\ttot += category.maps.size();\n+\t\t\tui += category.maps.size() + 1;\n+\t\t}\n+\t\tthis.totalMapCount = tot;\n+\t\tthis.uiElementCount = ui;\n+\t}\n+\t\n+\tpublic List<Category> getCategories() {\n+\t\treturn this.categories;\n+\t}\n+\t\n+\tpublic int getTotalMapCount() {\n+\t\treturn this.totalMapCount;\n+\t}\n+\t\n+\tpublic int getUiElementCount() {\n+\t\treturn this.uiElementCount;\n+\t}\n+\t\n+\tpublic ExternalTileMap getTileMap(String mapId) {\n+\t\tfor(Category category : categories) {\n+        \tfor(ExternalTileMap map : category.getMaps()) {\n+        \t\tif(mapId.equals(map.getId())) {\n+            \t\treturn map;\n+        \t\t}\n+        \t}\n+        }\n+\t\treturn null;\n+\t}\n+\t\n+\tpublic static class Category {\n+\t\tprivate final String name;\n+\t\tprivate final List<ExternalTileMap> maps;\n+\t\t\n+\t\tpublic Category(String name, List<ExternalTileMap> maps) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.maps = maps;\n+\t\t}\n+\t\t\n+\t\tpublic String getName() { \n+\t\t\treturn name;\n+\t\t}\n+\t\t\n+\t\tpublic List<ExternalTileMap> getMaps() {\n+\t\t\treturn maps;\n+\t\t}\n+\t}\n+\t\n+}"
  },
  {
    "sha": "fa013121e8fafb7bf89f77a00b8b4fab2e24ff77",
    "filename": "src/main/java/com/mndk/bte_tr/map/bing/BingAerialMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/bing/BingAerialMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/bing/BingAerialMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/bing/BingAerialMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,9 +0,0 @@\n-package com.mndk.bte_tr.map.bing;\n-\n-import com.mndk.bte_tr.map.RenderMapSource;\n-\n-public class BingAerialMapManager extends BingMapManager {\n-    public BingAerialMapManager() { \n-    \tsuper(RenderMapSource.BING_AERIAL, \"https://t.ssl.ak.dynamic.tiles.virtualearth.net/comp/ch/{u}?it=A&shading=hill\"); \n-    }\n-}"
  },
  {
    "sha": "d25f9c5eb522e87e09502dc64527d23cf206c60e",
    "filename": "src/main/java/com/mndk/bte_tr/map/bing/BingPlainMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/bing/BingPlainMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/bing/BingPlainMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/bing/BingPlainMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,9 +0,0 @@\n-package com.mndk.bte_tr.map.bing;\n-\n-import com.mndk.bte_tr.map.RenderMapSource;\n-\n-public class BingPlainMapManager extends BingMapManager {\n-    public BingPlainMapManager() { \n-    \tsuper(RenderMapSource.BING_PLAIN, \"https://t.ssl.ak.dynamic.tiles.virtualearth.net/comp/ch/{u}?it=G,LC,BX,RL&shading=hill\"); \n-    }\n-}"
  },
  {
    "sha": "e13555d7b80443f2ef282e87cf0ea8ca59e55f54",
    "filename": "src/main/java/com/mndk/bte_tr/map/bing/BingTileMap.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 10,
    "changes": 15,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/bing/BingTileMap.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/bing/BingTileMap.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/bing/BingTileMap.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -1,20 +1,15 @@\n package com.mndk.bte_tr.map.bing;\n \n-import com.mndk.bte_tr.map.RenderMapSource;\n-import com.mndk.bte_tr.map.mercator.MercatorMapManager;\n+import com.google.gson.JsonObject;\n+import com.mndk.bte_tr.map.mercator.MercatorTileMap;\n \n-public class BingMapManager extends MercatorMapManager {\n+public class BingTileMap extends MercatorTileMap {\n \n-    public BingMapManager(RenderMapSource source, String urlRequestTemplate) { super(source, urlRequestTemplate, 2); }\n+    public BingTileMap(JsonObject object) throws Exception { super(object); }\n \n     @Override\n     public String getUrlTemplate(int tileX, int tileY, int zoom) {\n-        return requestUrlTemplate.replace(\"{u}\", BingMapManager.tileToQuadKey(tileX, tileY, zoom));\n-    }\n-\n-    @Override\n-    protected int getZoomFromLevel(int level) {\n-        return 19 - level;\n+        return super.getUrlTemplate(tileX, tileY, zoom).replace(\"{u}\", BingTileMap.tileToQuadKey(tileX, tileY, zoom));\n     }\n \n \tpublic static String tileToQuadKey(int tileX, int tileY, int zoom) {",
    "previous_filename": "src/main/java/com/mndk/bte_tr/map/bing/BingMapManager.java"
  },
  {
    "sha": "7f86adafe8dbcdc404f0f50e1f7740d653e4c31c",
    "filename": "src/main/java/com/mndk/bte_tr/map/kakao/KakaoAerialMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/KakaoAerialMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/KakaoAerialMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/kakao/KakaoAerialMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,19 +0,0 @@\n-package com.mndk.bte_tr.map.kakao;\n-\n-import com.mndk.bte_tr.map.RenderMapSource;\n-\n-public class KakaoAerialMapManager extends KakaoMapManager {\n-    public KakaoAerialMapManager() {\n-        super(RenderMapSource.KAKAO_PLAIN);\n-    }\n-\n-    @Override\n-    public String getUrlTemplate(int tileX, int tileY, int zoom) {\n-        if(domain_num >= 3) domain_num = -1;\n-        domain_num++;\n-\n-        return \"http://map\" + domain_num + \".daumcdn.net/map_skyview/\" +\n-                \"L\" + zoom + \"/\" + tileY + \"/\" + tileX + \".jpg\";\n-    }\n-\n-}"
  },
  {
    "sha": "1862f6b11638c57eba384382a792737bdff03b31",
    "filename": "src/main/java/com/mndk/bte_tr/map/kakao/KakaoMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 63,
    "changes": 63,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/KakaoMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/KakaoMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/kakao/KakaoMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,63 +0,0 @@\n-package com.mndk.bte_tr.map.kakao;\n-\n-import com.mndk.bte_tr.map.ExternalMapManager;\n-import com.mndk.bte_tr.map.RenderMapSource;\n-import com.mndk.bte_tr.projection.Projections;\n-\n-import copy.io.github.terra121.projection.OutOfProjectionBoundsException;\n-\n-public abstract class KakaoMapManager extends ExternalMapManager {\n-\n-    private static final int[][] CORNERS = {\n-            {0, 1, 0, 0}, // top left\n-            {1, 1, 1, 0}, // top right\n-            {1, 0, 1, 1}, // bottom right\n-            {0, 0, 0, 1}  // bottom left\n-    };\n-\n-\n-\n-    public KakaoMapManager(RenderMapSource source) {\n-        super(source, 2);\n-    }\n-\n-\n-\n-    protected static int domain_num = 0;\n-\n-\n-\n-    @Override\n-    public int[] playerPositionToTileCoord(double playerX, double playerZ, int zoom) throws OutOfProjectionBoundsException {\n-        double[] temp = Projections.BTE.toGeo(playerX, playerZ);\n-        temp = Projections.WTM.fromGeo(temp[0], temp[1]);\n-        return WTMTileConverter.wtmToTile(temp[0], temp[1], zoom);\n-    }\n-\n-\n-\n-    @Override\n-    public double[] tileCoordToPlayerPosition(int tileX, int tileY, int zoom) throws OutOfProjectionBoundsException {\n-        double[] temp = WTMTileConverter.tileToWTM(tileX, tileY, zoom);\n-        temp = Projections.WTM.toGeo(temp[0], temp[1]);\n-        return Projections.BTE.fromGeo(temp[0], temp[1]);\n-    }\n-\n-\n-\n-    @Override\n-    protected int[] getCornerMatrix(int i) {\n-        return CORNERS[i];\n-    }\n-\n-    @Override\n-    protected int getZoomFromLevel(int level) {\n-        return level + 1;\n-    }\n-\n-\n-    @Override\n-    public abstract String getUrlTemplate(int tileX, int tileY, int zoom);\n-\n-\n-}"
  },
  {
    "sha": "e313099ca1d53d1fc32fff943db7c396b4d3bf38",
    "filename": "src/main/java/com/mndk/bte_tr/map/kakao/KakaoPlainMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/KakaoPlainMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/KakaoPlainMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/kakao/KakaoPlainMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,19 +0,0 @@\n-package com.mndk.bte_tr.map.kakao;\n-\n-import com.mndk.bte_tr.map.RenderMapSource;\n-\n-public class KakaoPlainMapManager extends KakaoMapManager {\n-    public KakaoPlainMapManager() {\n-        super(RenderMapSource.KAKAO_AERIAL);\n-    }\n-    \n-    @Override\n-    public String getUrlTemplate(int tileX, int tileY, int zoom) {\n-        if(domain_num >= 3) domain_num = -1;\n-        domain_num++;\n-\n-        return \"http://map\" + domain_num + \".daumcdn.net/map_2d/2012tlq\" +\n-                \"/L\" + zoom + \"/\" + tileY + \"/\" + tileX + \".png\";\n-    }\n-\n-}"
  },
  {
    "sha": "e13df76e76e2fb6f36d49f5515f1eff0fadd2e89",
    "filename": "src/main/java/com/mndk/bte_tr/map/kakao/WTMTileConverter.java",
    "status": "removed",
    "additions": 0,
    "deletions": 14,
    "changes": 14,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/WTMTileConverter.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/kakao/WTMTileConverter.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/kakao/WTMTileConverter.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,14 +0,0 @@\n-package com.mndk.bte_tr.map.kakao;\n-\n-public class WTMTileConverter {\n-\n-    public static double[] tileToWTM(double tileX, double tileY, int level) {\n-        double factor = Math.pow(2, level - 3) * 256;\n-        return new double[] {tileX * factor - 30000, tileY * factor - 60000};\n-    }\n-\n-    public static int[] wtmToTile(double wtmX, double wtmY, int level) {\n-        double divisor = Math.pow(2, level - 3) * 256;\n-        return new int[] {(int) Math.floor((wtmX + 30000) / divisor), (int) Math.floor((wtmY + 60000) / divisor)};\n-    }\n-}"
  },
  {
    "sha": "53f7259ee555ecc208cd67c762bd014be64a792a",
    "filename": "src/main/java/com/mndk/bte_tr/map/kakao_wtm/KakaoTileMap.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/kakao_wtm/KakaoTileMap.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/kakao_wtm/KakaoTileMap.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/kakao_wtm/KakaoTileMap.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -0,0 +1,45 @@\n+package com.mndk.bte_tr.map.kakao_wtm;\n+\n+import com.google.gson.JsonObject;\n+import com.mndk.bte_tr.map.ExternalTileMap;\n+import com.mndk.bte_tr.projection.Projections;\n+\n+import copy.io.github.terra121.projection.OutOfProjectionBoundsException;\n+\n+public class KakaoTileMap extends ExternalTileMap {\n+\t\n+    public KakaoTileMap(JsonObject object) throws Exception { super(object); }\n+\n+\n+\n+    @Override\n+    public int[] playerPositionToTileCoord(double playerX, double playerZ, int zoom) throws OutOfProjectionBoundsException {\n+        double[] temp = Projections.BTE.toGeo(playerX, playerZ);\n+        temp = Projections.WTM.fromGeo(temp[0], temp[1]);\n+        return wtmToTile(temp[0], temp[1], zoom);\n+    }\n+\n+\n+\n+    @Override\n+    public double[] tileCoordToPlayerPosition(int tileX, int tileY, int zoom) throws OutOfProjectionBoundsException {\n+        double[] temp = tileToWTM(tileX, tileY, zoom);\n+        temp = Projections.WTM.toGeo(temp[0], temp[1]);\n+        return Projections.BTE.fromGeo(temp[0], temp[1]);\n+    }\n+    \n+    \n+    \n+    public static double[] tileToWTM(double tileX, double tileY, int level) {\n+        double factor = Math.pow(2, level - 3) * 256;\n+        return new double[] {tileX * factor - 30000, tileY * factor - 60000};\n+    }\n+\n+    \n+    \n+    public static int[] wtmToTile(double wtmX, double wtmY, int level) {\n+        double divisor = Math.pow(2, level - 3) * 256;\n+        return new int[] {(int) Math.floor((wtmX + 30000) / divisor), (int) Math.floor((wtmY + 60000) / divisor)};\n+    }\n+\n+}"
  },
  {
    "sha": "c9e696cde6447f2c72873dc72a48aeb7922a03d9",
    "filename": "src/main/java/com/mndk/bte_tr/map/mercator/MercatorMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 67,
    "changes": 67,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/mercator/MercatorMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/mercator/MercatorMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/mercator/MercatorMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,67 +0,0 @@\n-package com.mndk.bte_tr.map.mercator;\n-\n-import com.mndk.bte_tr.map.ExternalMapManager;\n-import com.mndk.bte_tr.map.RenderMapSource;\n-import com.mndk.bte_tr.projection.Projections;\n-\n-import copy.io.github.terra121.projection.OutOfProjectionBoundsException;\n-\n-public class MercatorMapManager extends ExternalMapManager {\n-\n-\n-    protected final String requestUrlTemplate;\n-\n-\n-    // Tile boundary matrix\n-    //\n-    // double[...][0: tileX_add, 1: tileY_add, 2: u, 3: v]\n-    private static final int[][] CORNERS = {\n-            {0, 1, 0, 1}, // top left\n-            {1, 1, 1, 1}, // top right\n-            {1, 0, 1, 0}, // bottom right\n-            {0, 0, 0, 0}  // bottom left\n-    };\n-\n-\n-    public MercatorMapManager(RenderMapSource source, String requestUrlTemplate, int maximumDownloadThreads) {\n-        super(source, maximumDownloadThreads);\n-        this.requestUrlTemplate = requestUrlTemplate;\n-    }\n-\n-\n-    @Override\n-    public int[] playerPositionToTileCoord(double playerX, double playerZ, int zoom) throws OutOfProjectionBoundsException {\n-        double[] temp = Projections.BTE.toGeo(playerX, playerZ);\n-        return MercatorTileConverter.geoToTile(temp[0], temp[1], zoom);\n-    }\n-\n-\n-    @Override\n-    public double[] tileCoordToPlayerPosition(int tileX, int tileY, int zoom) throws OutOfProjectionBoundsException {\n-        double[] temp = MercatorTileConverter.tileToGeo(tileX, tileY, zoom);\n-        return Projections.BTE.fromGeo(temp[0], temp[1]);\n-    }\n-\n-\n-    @Override\n-    protected int[] getCornerMatrix(int i) {\n-        return CORNERS[i];\n-    }\n-\n-    @Override\n-    protected int getZoomFromLevel(int level) {\n-        return 18 - level;\n-    }\n-\n-\n-    protected String getRandom() {return \"\";}\n-\n-\n-    @Override\n-    public String getUrlTemplate(int tileX, int tileY, int zoom) {\n-        return requestUrlTemplate.replace(\"{random}\", this.getRandom())\n-                .replace(\"{z}\", zoom + \"\")\n-                .replace(\"{x}\", tileX + \"\")\n-                .replace(\"{y}\", tileY + \"\");\n-    }\n-}"
  },
  {
    "sha": "f0185f6e05a70c3401bf31f1db8f3e1b8f9dcecb",
    "filename": "src/main/java/com/mndk/bte_tr/map/mercator/MercatorTileMap.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/mercator/MercatorTileMap.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/map/mercator/MercatorTileMap.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/mercator/MercatorTileMap.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -0,0 +1,31 @@\n+package com.mndk.bte_tr.map.mercator;\n+\n+import com.google.gson.JsonObject;\n+import com.mndk.bte_tr.map.ExternalTileMap;\n+import com.mndk.bte_tr.projection.Projections;\n+\n+import copy.io.github.terra121.projection.OutOfProjectionBoundsException;\n+\n+public class MercatorTileMap extends ExternalTileMap {\n+\n+\n+    public MercatorTileMap(JsonObject object) throws Exception { super(object); }\n+\n+\n+    @Override\n+    public int[] playerPositionToTileCoord(double playerX, double playerZ, int zoom) throws OutOfProjectionBoundsException {\n+        double[] temp = Projections.BTE.toGeo(playerX, playerZ);\n+        return this.invertLatitude ? \n+        \t\tMercatorTileConverter.geoToTile_invertLat(temp[0], temp[1], zoom) : \n+        \t\tMercatorTileConverter.geoToTile(temp[0], temp[1], zoom);\n+    }\n+\n+\n+    @Override\n+    public double[] tileCoordToPlayerPosition(int tileX, int tileY, int zoom) throws OutOfProjectionBoundsException {\n+        double[] temp = this.invertLatitude ? \n+        \t\tMercatorTileConverter.tileToGeo_invertLat(tileX, tileY, zoom) :\n+        \t\tMercatorTileConverter.tileToGeo(tileX, tileY, zoom);\n+        return Projections.BTE.fromGeo(temp[0], temp[1]);\n+    }\n+}"
  },
  {
    "sha": "2a98367e9c25ea676d02adbd54a5c8bf66c45d70",
    "filename": "src/main/java/com/mndk/bte_tr/map/naver/NaverMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/naver/NaverMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/naver/NaverMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/naver/NaverMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,18 +0,0 @@\n-package com.mndk.bte_tr.map.naver;\n-\n-import com.mndk.bte_tr.map.RenderMapSource;\n-import com.mndk.bte_tr.map.mercator.MercatorMapManager;\n-\n-public class NaverMapManager extends MercatorMapManager {\n-\n-    public NaverMapManager() {\n-        super(RenderMapSource.NAVER, \"https://map.pstatic.net/nrb/styles/basic/{z}/{x}/{y}.png?mt=bg.ol.ts.lko\", 2);\n-        // \"https://map.pstatic.net/nrb/styles/satellite/{z}/{x}/{y}.png?mt=bg.ol.ts.lko\"\n-    }\n-\n-    @Override\n-    protected int getZoomFromLevel(int level) {\n-        return 20 - level;\n-    }\n-\n-}"
  },
  {
    "sha": "7195d16dd12cc17ecf990058b71c8357a2053eda",
    "filename": "src/main/java/com/mndk/bte_tr/map/osm/OpenStreetMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 36,
    "changes": 36,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/osm/OpenStreetMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/osm/OpenStreetMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/osm/OpenStreetMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,36 +0,0 @@\n-package com.mndk.bte_tr.map.osm;\n-\n-import java.net.URLConnection;\n-\n-import com.mndk.bte_tr.BTETerraRenderer;\n-import com.mndk.bte_tr.map.RenderMapSource;\n-import com.mndk.bte_tr.map.mercator.MercatorMapManager;\n-\n-public class OpenStreetMapManager extends MercatorMapManager {\n-\n-    public OpenStreetMapManager() {\n-        super(RenderMapSource.OSM, \"https://{random}.tile.openstreetmap.org/{z}/{x}/{y}.png\", 2);\n-    }\n-\n-    private static int domain_num = 0;\n-    private static final char[] randomChars = {'a', 'b', 'c'};\n-\n-    @Override\n-    protected String getRandom() {\n-        domain_num = domain_num >= 2 ? 0 : domain_num + 1;\n-        return randomChars[domain_num] + \"\";\n-    }\n-\n-    @Override\n-    public URLConnection getTileUrlConnection(double playerX, double playerZ, int tileDeltaX, int tileDeltaY, int zoom) {\n-\n-        URLConnection result = super.getTileUrlConnection(playerX, playerZ, tileDeltaX, tileDeltaY, zoom);\n-\n-        if(result == null) return null;\n-\n-        result.setRequestProperty(\"User-Agent\", BTETerraRenderer.MODID + \"/1.0\" + \" Java/1.8\");\n-        result.setUseCaches(true);\n-\n-        return result;\n-    }\n-}"
  },
  {
    "sha": "e5977b12c3b3eb7c62aade8a22345b215c6a9701",
    "filename": "src/main/java/com/mndk/bte_tr/map/tmap/TMapManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 40,
    "changes": 40,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/tmap/TMapManager.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/9981ac15db80d694564551e3b31e74841f03898f/src/main/java/com/mndk/bte_tr/map/tmap/TMapManager.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/map/tmap/TMapManager.java?ref=9981ac15db80d694564551e3b31e74841f03898f",
    "patch": "@@ -1,40 +0,0 @@\n-package com.mndk.bte_tr.map.tmap;\n-\n-import com.mndk.bte_tr.map.RenderMapSource;\n-import com.mndk.bte_tr.map.mercator.MercatorMapManager;\n-import com.mndk.bte_tr.map.mercator.MercatorTileConverter;\n-import com.mndk.bte_tr.projection.Projections;\n-\n-import copy.io.github.terra121.projection.OutOfProjectionBoundsException;\n-\n-public class TMapManager extends MercatorMapManager {\n-\n-    private static final int[][] CORNERS = {\n-            {0, 1, 0, 0}, // top left\n-            {1, 1, 1, 0}, // top right\n-            {1, 0, 1, 1}, // bottom right\n-            {0, 0, 0, 1}  // bottom left\n-    };\n-\n-    @Override\n-    protected int[] getCornerMatrix(int i) {\n-        return CORNERS[i];\n-    }\n-\n-    public TMapManager() {\n-        super(RenderMapSource.TMAP, \"https://topopentile2.tmap.co.kr/tms/1.0.0/hd_tile/{z}/{x}/{y}.png\", 2);\n-    }\n-\n-    @Override\n-    public int[] playerPositionToTileCoord(double playerX, double playerZ, int zoom) throws OutOfProjectionBoundsException {\n-        double[] temp = Projections.BTE.toGeo(playerX, playerZ);\n-        return MercatorTileConverter.geoToTile_invertLat(temp[0], temp[1], zoom);\n-    }\n-\n-\n-    @Override\n-    public double[] tileCoordToPlayerPosition(int tileX, int tileY, int zoom) throws OutOfProjectionBoundsException {\n-        double[] temp = MercatorTileConverter.tileToGeo_invertLat(tileX, tileY, zoom);\n-        return Projections.BTE.fromGeo(temp[0], temp[1]);\n-    }\n-}"
  },
  {
    "sha": "cec7daabf666e6112a290db99d0a25bce3640a42",
    "filename": "src/main/java/com/mndk/bte_tr/proxy/ClientProxy.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/proxy/ClientProxy.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/proxy/ClientProxy.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/proxy/ClientProxy.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -5,10 +5,14 @@\n import net.minecraftforge.common.MinecraftForge;\n import net.minecraftforge.fml.client.registry.ClientRegistry;\n import net.minecraftforge.fml.common.event.FMLInitializationEvent;\n+import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;\n+\n import org.lwjgl.input.Keyboard;\n \n+import com.mndk.bte_tr.BTETerraRenderer;\n import com.mndk.bte_tr.config.ConfigHandler;\n import com.mndk.bte_tr.event.KeyEvent;\n+import com.mndk.bte_tr.map.TileMapJsonLoader;\n \n import java.io.IOException;\n \n@@ -29,13 +33,25 @@ public static void initializeKeys() {\n         ClientRegistry.registerKeyBinding(mapToggleKey);\n     }\n \n+    @Override\n+    public void preInit(FMLPreInitializationEvent event) {\n+    \tsuper.preInit(event);\n+        try {\n+        \tTileMapJsonLoader.load(event.getModConfigurationDirectory().getAbsolutePath());\n+        } catch(Exception e) {\n+        \tBTETerraRenderer.logger.error(\"Error caught while parsing map json files!\");\n+        \te.printStackTrace();\n+        }\n+    }\n+    \n     @Override\n     public void init(FMLInitializationEvent event) {\n         super.init(event);\n         initializeKeys();\n         try {\n             ConfigHandler.init();\n         } catch (IOException e) {\n+        \tBTETerraRenderer.logger.error(\"Error caught while parsing config file!\");\n             e.printStackTrace();\n         }\n         MinecraftForge.EVENT_BUS.register(KeyEvent.class);"
  },
  {
    "sha": "125c1c33c1fb27510480c9483165b3b76dd75263",
    "filename": "src/main/java/com/mndk/bte_tr/renderer/TileMapRenderer.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/renderer/TileMapRenderer.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/renderer/TileMapRenderer.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/renderer/TileMapRenderer.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -2,16 +2,16 @@\n \n import com.mndk.bte_tr.config.ConfigHandler;\n import com.mndk.bte_tr.config.ModConfig;\n-import com.mndk.bte_tr.map.ExternalMapManager;\n-import com.mndk.bte_tr.map.MapTileManager;\n+import com.mndk.bte_tr.map.ExternalTileMap;\n+import com.mndk.bte_tr.map.TileMapCache;\n \n import net.minecraft.client.renderer.BufferBuilder;\n import net.minecraft.client.renderer.GlStateManager;\n import net.minecraft.client.renderer.Tessellator;\n \n-public class MapTileRenderer {\n+public class TileMapRenderer {\n \n-    public static void renderTiles(ExternalMapManager renderer, double px, double py, double pz) {\n+    public static void renderTiles(ExternalTileMap renderer, double px, double py, double pz) {\n         Tessellator t = Tessellator.getInstance();\n         BufferBuilder builder = t.getBuffer();\n \n@@ -37,7 +37,7 @@ public static void renderTiles(ExternalMapManager renderer, double px, double py\n             );\n         }\n \n-        MapTileManager.getInstance().getTileCache().cleanup();\n+        TileMapCache.getInstance().cleanup();\n \n         GlStateManager.disableBlend();\n         GlStateManager.enableCull();",
    "previous_filename": "src/main/java/com/mndk/bte_tr/renderer/MapTileRenderer.java"
  },
  {
    "sha": "4e56afc1ccaca39a7c71a17a0e9fa301fc6b5f9b",
    "filename": "src/main/java/com/mndk/bte_tr/util/JsonUtil.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/util/JsonUtil.java",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/java/com/mndk/bte_tr/util/JsonUtil.java",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/java/com/mndk/bte_tr/util/JsonUtil.java?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -0,0 +1,43 @@\n+package com.mndk.bte_tr.util;\n+\n+import com.google.gson.JsonObject;\n+\n+public class JsonUtil {\n+\n+\tpublic static String validateStringElement(JsonObject o, String name) throws Exception {\n+\t\tif(o.get(name) == null) \n+\t\t\tthrow new Exception(name + \" does not exist!\");\n+\t\ttry { \n+\t\t\treturn o.get(name).getAsString(); \n+\t\t} catch(ClassCastException e) { \n+\t\t\tthrow new Exception(name + \" should be a string!\"); \n+\t\t}\n+\t}\n+\n+\tpublic static int validateIntegerElement(JsonObject o, String name) throws Exception {\n+\t\tif(o.get(name) == null) \n+\t\t\tthrow new Exception(name + \" does not exist!\");\n+\t\ttry { \n+\t\t\treturn o.get(name).getAsInt(); \n+\t\t} catch(ClassCastException e) { \n+\t\t\tthrow new Exception(name + \" should be an integer!\"); \n+\t\t}\n+\t}\n+\n+\tpublic static int validateIntegerElement(JsonObject o, String name, int defaultValue) throws Exception {\n+\t\ttry { \n+\t\t\treturn o.get(name) == null ? defaultValue : o.get(name).getAsInt(); \n+\t\t} catch(ClassCastException e) { \n+\t\t\tthrow new Exception(name + \" should be an integer!\"); \n+\t\t}\n+\t}\n+\n+\tpublic static boolean validateBooleanElement(JsonObject o, String name, boolean defaultValue) throws Exception {\n+\t\ttry { \n+\t\t\treturn o.get(name) == null ? defaultValue : o.get(name).getAsBoolean(); \n+\t\t} catch(ClassCastException e) { \n+\t\t\tthrow new Exception(name + \" should be a boolean!\"); \n+\t\t}\n+\t}\n+\n+}"
  },
  {
    "sha": "ca44cc6ae5f52c3acd2748e01b8dbef54cade5e3",
    "filename": "src/main/resources/assets/bte_tr/maps.json",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/blob/d10759ceab17937a860e2a9e829df116aebf59da/src/main/resources/assets/bte_tr/maps.json",
    "raw_url": "https://github.com/tf2mandeokyi/BTETerraRenderer/raw/d10759ceab17937a860e2a9e829df116aebf59da/src/main/resources/assets/bte_tr/maps.json",
    "contents_url": "https://api.github.com/repos/tf2mandeokyi/BTETerraRenderer/contents/src/main/resources/assets/bte_tr/maps.json?ref=d10759ceab17937a860e2a9e829df116aebf59da",
    "patch": "@@ -0,0 +1,73 @@\n+{\n+\t\"categories\": [\n+\t\t{\n+\t\t\t\"name\": \"Global\",\n+\t\t\t\"maps\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"id\": \"osm\",\n+\t\t\t\t\t\"name\": \"OpenStreetMap\",\n+\t\t\t\t\t\"tile_url\": \"https://{random:a,b,c}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n+\t\t\t\t\t\"projection\": \"mercator\",\n+\t\t\t\t\t\"max_thread\": 2,\n+\t\t\t\t\t\"request_headers\": {\n+\t\t\t\t\t\t\"User-Agent\": \"bte_tr/1.0 Java/1.8\"\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"id\": \"bing_ae\",\n+\t\t\t\t\t\"name\": \"Bing Aerial\",\n+\t\t\t\t\t\"tile_url\": \"https://t.ssl.ak.dynamic.tiles.virtualearth.net/comp/ch/{u}?it=A&shading=hill\",\n+\t\t\t\t\t\"projection\": \"bing\",\n+\t\t\t\t\t\"max_thread\": 2\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"id\": \"bing_pl\",\n+\t\t\t\t\t\"name\": \"Bing Plain\",\n+\t\t\t\t\t\"tile_url\": \"https://t.ssl.ak.dynamic.tiles.virtualearth.net/comp/ch/{u}?it=G,LC,BX,RL&shading=hill\",\n+\t\t\t\t\t\"projection\": \"bing\",\n+\t\t\t\t\t\"max_thread\": 2\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Korean\",\n+\t\t\t\"maps\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"id\": \"kakao_ae\",\n+\t\t\t\t\t\"name\": \"Kakao Aerial\",\n+\t\t\t\t\t\"tile_url\": \"http://map{random:0,1,2,3}.daumcdn.net/map_skyview/L{z}/{y}/{x}.jpg\",\n+\t\t\t\t\t\"projection\": \"kakao_wtm\",\n+\t\t\t\t\t\"max_thread\": 2,\n+\t\t\t\t\t\"default_zoom\": 1,\n+\t\t\t\t\t\"invert_lat\": true,\n+\t\t\t\t\t\"invert_zoom\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"id\": \"kakao_pl\",\n+\t\t\t\t\t\"name\": \"Kakao Plain\",\n+\t\t\t\t\t\"tile_url\": \"http://map{random:0,1,2,3}.daumcdn.net/map_2d/2012tlq/L{z}/{y}/{x}.png\",\n+\t\t\t\t\t\"projection\": \"kakao_wtm\",\n+\t\t\t\t\t\"max_thread\": 2,\n+\t\t\t\t\t\"default_zoom\": 1,\n+\t\t\t\t\t\"invert_lat\": true,\n+\t\t\t\t\t\"invert_zoom\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"id\": \"naver\",\n+\t\t\t\t\t\"name\": \"Naver Map\",\n+\t\t\t\t\t\"tile_url\": \"https://map.pstatic.net/nrb/styles/basic/{z}/{x}/{y}.png?mt=bg.ol.ts.lko\",\n+\t\t\t\t\t\"projection\": \"mercator\",\n+\t\t\t\t\t\"max_thread\": 2\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"id\": \"tmap\",\n+\t\t\t\t\t\"name\": \"T Map\",\n+\t\t\t\t\t\"tile_url\": \"https://topopentile2.tmap.co.kr/tms/1.0.0/hd_tile/{z}/{x}/{y}.png\",\n+\t\t\t\t\t\"projection\": \"mercator\",\n+\t\t\t\t\t\"max_thread\": 2,\n+\t\t\t\t\t\"invert_lat\": true\n+\t\t\t\t}\n+\t\t\t]\n+\t\t}\n+\t]\n+}\n\\ No newline at end of file"
  }
]
