[
  {
    "sha": "35eb1ddfbbc029bcab630581847471d7f238ec53",
    "filename": ".idea/vcs.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/zbist/algoritmi/blob/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/.idea/vcs.xml",
    "raw_url": "https://github.com/zbist/algoritmi/raw/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/zbist/algoritmi/contents/.idea/vcs.xml?ref=80b32ad8a39ad5f758882a8182acb31d7dbf0cb3",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"VcsDirectoryMappings\">\n+    <mapping directory=\"\" vcs=\"Git\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "9a13327063e14ddd7239ae5abd52199231627b83",
    "filename": "src/main/java/six/HeapSort.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/zbist/algoritmi/blob/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/HeapSort.java",
    "raw_url": "https://github.com/zbist/algoritmi/raw/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/HeapSort.java",
    "contents_url": "https://api.github.com/repos/zbist/algoritmi/contents/src/main/java/six/HeapSort.java?ref=80b32ad8a39ad5f758882a8182acb31d7dbf0cb3",
    "patch": "@@ -0,0 +1,36 @@\n+package six;\n+\n+public class HeapSort {\n+    public void sort(int arr[]) {\n+        int n = arr.length;\n+        for (int i = n / 2 - 1; i >= 0; i--)\n+            heapify(arr, n, i);\n+        for (int i = n - 1; i >= 0; i--) {\n+            int temp = arr[0];\n+            arr[0] = arr[i];\n+            arr[i] = temp;\n+            heapify(arr, i, 0);\n+        }\n+    }\n+\n+    void heapify(int arr[], int n, int i) {\n+        int largest = i;\n+        int l = 2 * i + 1;\n+        int r = 2 * i + 2;\n+        if (l < n && arr[l] > arr[largest]) largest = l;\n+        if (r < n && arr[r] > arr[largest]) largest = r;\n+        if (largest != i) {\n+            int swap = arr[i];\n+            arr[i] = arr[largest];\n+            arr[largest] = swap;\n+            heapify(arr, n, largest);\n+        }\n+    }\n+\n+    static void printArray(int arr[]) {\n+        int n = arr.length;\n+        for (int i = 0; i < n; ++i)\n+            System.out.print(arr[i] + \" \");\n+        System.out.println();\n+    }\n+}"
  },
  {
    "sha": "cf69617518205008f8187c0d8a3876f16aaca57f",
    "filename": "src/main/java/six/Main.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/zbist/algoritmi/blob/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/Main.java",
    "raw_url": "https://github.com/zbist/algoritmi/raw/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/Main.java",
    "contents_url": "https://api.github.com/repos/zbist/algoritmi/contents/src/main/java/six/Main.java?ref=80b32ad8a39ad5f758882a8182acb31d7dbf0cb3",
    "patch": "@@ -0,0 +1,46 @@\n+package six;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        long start = System.nanoTime();\n+        Tree tree = new Tree();\n+        tree.insertNode(10);\n+        tree.insertNode(11);\n+        tree.insertNode(2);\n+        tree.insertNode(4);\n+        System.out.println(System.nanoTime() - start);\n+\n+        tree.getMin().printNode();\n+        tree.getMax().printNode();\n+\n+        start = System.nanoTime();\n+        tree.findNode(4).printNode();\n+        tree.deleteNode(4);\n+        System.out.println(System.nanoTime() - start);\n+        System.out.println();\n+        tree.display(tree.getRootNode());\n+\n+        int[] arr = new int[10_000_000];\n+        Random rnd = new Random();\n+        for (int i = 0; i < arr.length; i++){\n+            arr[i] = rnd.nextInt();\n+        }\n+        int[] copyArr = arr.clone();\n+        start = System.nanoTime();\n+        Arrays.sort(copyArr);\n+        System.out.println(System.nanoTime() - start);\n+\n+        start = System.nanoTime();\n+        HeapSort hs = new HeapSort();\n+        hs.sort(arr);\n+        System.out.println(System.nanoTime() - start);\n+\n+        System.out.println(Arrays.equals(arr, copyArr));\n+\n+        // Пример сбалансированного дерева - красно-чёрное дерево.\n+        // Применение - сортировка и поиск данных, хранение\n+    }\n+}"
  },
  {
    "sha": "14b10fd16a233a4b096831a054c820aaa0b1b9db",
    "filename": "src/main/java/six/Node.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/zbist/algoritmi/blob/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/Node.java",
    "raw_url": "https://github.com/zbist/algoritmi/raw/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/Node.java",
    "contents_url": "https://api.github.com/repos/zbist/algoritmi/contents/src/main/java/six/Node.java?ref=80b32ad8a39ad5f758882a8182acb31d7dbf0cb3",
    "patch": "@@ -0,0 +1,36 @@\n+package six;\n+\n+class Node {\n+    private int value;\n+    private Node leftChild;\n+    private Node rightChild;\n+\n+    public void printNode() {\n+        System.out.println(\"Value: \" + value);\n+    }\n+\n+    public int getValue() {\n+        return this.value;\n+    }\n+\n+    public void setValue(final int value) {\n+        this.value = value;\n+    }\n+\n+    public Node getLeftChild() {\n+        return this.leftChild;\n+    }\n+\n+    public void setLeftChild(final Node leftChild) {\n+        this.leftChild = leftChild;\n+    }\n+\n+    public Node getRightChild() {\n+        return this.rightChild;\n+    }\n+\n+    public void setRightChild(final Node rightChild) {\n+        this.rightChild = rightChild;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0c1cec6e7329c748e7e31097b4e79dbb2b605744",
    "filename": "src/main/java/six/Tree.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/zbist/algoritmi/blob/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/Tree.java",
    "raw_url": "https://github.com/zbist/algoritmi/raw/80b32ad8a39ad5f758882a8182acb31d7dbf0cb3/src/main/java/six/Tree.java",
    "contents_url": "https://api.github.com/repos/zbist/algoritmi/contents/src/main/java/six/Tree.java?ref=80b32ad8a39ad5f758882a8182acb31d7dbf0cb3",
    "patch": "@@ -0,0 +1,162 @@\n+package six;\n+\n+class Tree {\n+    private Node rootNode;\n+\n+    public Tree() {\n+        rootNode = null;\n+    }\n+\n+    public Node findNode(int value) {\n+        Node currentNode = rootNode;\n+        while (currentNode.getValue() != value) {\n+            if (value < currentNode.getValue()) {\n+                currentNode = currentNode.getLeftChild();\n+            } else {\n+                currentNode = currentNode.getRightChild();\n+            }\n+            if (currentNode == null) {\n+                return null;\n+            }\n+        }\n+        return currentNode;\n+    }\n+\n+    public Node getRootNode() {\n+        return rootNode;\n+    }\n+\n+    public void insertNode(int value) {\n+        Node newNode = new Node();\n+        newNode.setValue(value);\n+        if (rootNode == null) {\n+            rootNode = newNode;\n+        }\n+        else {\n+            Node currentNode = rootNode;\n+            Node parentNode;\n+            while (true)\n+            {\n+                parentNode = currentNode;\n+                if(value == currentNode.getValue()) {\n+                    return;\n+                }\n+                else  if (value < currentNode.getValue()) {\n+                    currentNode = currentNode.getLeftChild();\n+                    if (currentNode == null){\n+                        parentNode.setLeftChild(newNode);\n+                        return;\n+                    }\n+                }\n+                else {\n+                    currentNode = currentNode.getRightChild();\n+                    if (currentNode == null) {\n+                        parentNode.setRightChild(newNode);\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public boolean deleteNode(int value)\n+    {\n+        Node currentNode = rootNode;\n+        Node parentNode = rootNode;\n+        boolean isLeftChild = true;\n+        while (currentNode.getValue() != value) {\n+            parentNode = currentNode;\n+            if (value < currentNode.getValue()) {\n+                isLeftChild = true;\n+                currentNode = currentNode.getLeftChild();\n+            }\n+            else {\n+                isLeftChild = false;\n+                currentNode = currentNode.getRightChild();\n+            }\n+            if (currentNode == null)\n+                return false;\n+        }\n+\n+        if (currentNode.getLeftChild() == null && currentNode.getRightChild() == null) {\n+            if (currentNode == rootNode)\n+                rootNode = null;\n+            else if (isLeftChild)\n+                parentNode.setLeftChild(null);\n+            else\n+                parentNode.setRightChild(null);\n+        }\n+        else if (currentNode.getRightChild() == null) {\n+            if (currentNode == rootNode)\n+                rootNode = currentNode.getLeftChild();\n+            else if (isLeftChild)\n+                parentNode.setLeftChild(currentNode.getLeftChild());\n+            else\n+                parentNode.setRightChild(currentNode.getLeftChild());\n+        }\n+        else if (currentNode.getLeftChild() == null) {\n+            if (currentNode == rootNode)\n+                rootNode = currentNode.getRightChild();\n+            else if (isLeftChild)\n+                parentNode.setLeftChild(currentNode.getRightChild());\n+            else\n+                parentNode.setRightChild(currentNode.getRightChild());\n+        }\n+        else {\n+            Node heir = receiveHeir(currentNode);\n+            if (currentNode == rootNode)\n+                rootNode = heir;\n+            else if (isLeftChild)\n+                parentNode.setLeftChild(heir);\n+            else\n+                parentNode.setRightChild(heir);\n+        }\n+        return true;\n+    }\n+\n+    private Node receiveHeir(Node node) {\n+        Node parentNode = node;\n+        Node heirNode = node;\n+        Node currentNode = node.getRightChild();\n+        while (currentNode != null)\n+        {\n+            parentNode = heirNode;\n+            heirNode = currentNode;\n+            currentNode = currentNode.getLeftChild();\n+        }\n+        if (heirNode != node.getRightChild())\n+        {\n+            parentNode.setLeftChild(heirNode.getRightChild());\n+            heirNode.setRightChild(node.getRightChild());\n+        }\n+        return heirNode;\n+    }\n+\n+    public void display(Node rootNode){\n+        if (rootNode != null) {\n+            rootNode.printNode();\n+            display(rootNode.getLeftChild());\n+            display(rootNode.getRightChild());\n+        }\n+    }\n+\n+    public Node getMin(){\n+        Node current, last = null;\n+        current = rootNode;\n+        while (current != null){\n+            last = current;\n+            current = current.getLeftChild();\n+        }\n+        return last;\n+    }\n+\n+    public Node getMax(){\n+        Node current, last = null;\n+        current = rootNode;\n+        while (current != null){\n+            last = current;\n+            current = current.getRightChild();\n+        }\n+        return last;\n+    }\n+}\n\\ No newline at end of file"
  }
]
