[
  {
    "sha": "f4d845dd921ba58870bc8288becac576ed23f75e",
    "filename": "fiat-roles/fiat-roles.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/spinnaker/fiat/blob/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/fiat-roles.gradle",
    "raw_url": "https://github.com/spinnaker/fiat/raw/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/fiat-roles.gradle",
    "contents_url": "https://api.github.com/repos/spinnaker/fiat/contents/fiat-roles/fiat-roles.gradle?ref=ab185ab68d738c0d4709598454fad27403beb3b3",
    "patch": "@@ -29,6 +29,7 @@ dependencies {\n   implementation \"org.springframework.boot:spring-boot-starter-actuator\"\n   implementation \"org.springframework.boot:spring-boot-starter-aop\"\n   implementation \"org.springframework.boot:spring-boot-starter-web\"\n+  implementation \"org.lz4:lz4-java:1.7.1\"\n \n   implementation \"com.netflix.spinnaker.kork:kork-jedis\"\n   implementation \"com.netflix.spinnaker.kork:kork-security\""
  },
  {
    "sha": "4b959b3644266dcc3a5b5caddaf08e68ed2a3784",
    "filename": "fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionRepositoryConfigProps.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/spinnaker/fiat/blob/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionRepositoryConfigProps.java",
    "raw_url": "https://github.com/spinnaker/fiat/raw/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionRepositoryConfigProps.java",
    "contents_url": "https://api.github.com/repos/spinnaker/fiat/contents/fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionRepositoryConfigProps.java?ref=ab185ab68d738c0d4709598454fad27403beb3b3",
    "patch": "@@ -30,6 +30,7 @@ public void setRepository(Repository repository) {\n   public static class Repository {\n     private Duration getPermissionTimeout = Duration.ofSeconds(1);\n     private Duration checkLastModifiedTimeout = Duration.ofMillis(50);\n+    private Duration getUserResourceTimeout = Duration.ofSeconds(1);\n \n     public Duration getGetPermissionTimeout() {\n       return getPermissionTimeout;\n@@ -46,5 +47,13 @@ public Duration getCheckLastModifiedTimeout() {\n     public void setCheckLastModifiedTimeout(Duration checkLastModifiedTimeout) {\n       this.checkLastModifiedTimeout = checkLastModifiedTimeout;\n     }\n+\n+    public Duration getGetUserResourceTimeout() {\n+      return getUserResourceTimeout;\n+    }\n+\n+    public void setGetUserResourceTimeout(Duration getUserResourceTimeout) {\n+      this.getUserResourceTimeout = getUserResourceTimeout;\n+    }\n   }\n }"
  },
  {
    "sha": "63a3ec4f53712671a960f2722be34cf65b6d0806",
    "filename": "fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepository.java",
    "status": "modified",
    "additions": 141,
    "deletions": 120,
    "changes": 261,
    "blob_url": "https://github.com/spinnaker/fiat/blob/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepository.java",
    "raw_url": "https://github.com/spinnaker/fiat/raw/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepository.java",
    "contents_url": "https://api.github.com/repos/spinnaker/fiat/contents/fiat-roles/src/main/java/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepository.java?ref=ab185ab68d738c0d4709598454fad27403beb3b3",
    "patch": "@@ -16,7 +16,7 @@\n \n package com.netflix.spinnaker.fiat.permissions;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.github.benmanes.caffeine.cache.Caffeine;\n import com.github.benmanes.caffeine.cache.LoadingCache;\n@@ -29,6 +29,7 @@\n import com.netflix.spinnaker.kork.exceptions.SpinnakerException;\n import com.netflix.spinnaker.kork.jedis.RedisClientDelegate;\n import io.github.resilience4j.retry.RetryRegistry;\n+import java.io.IOException;\n import java.time.Clock;\n import java.time.Duration;\n import java.time.Instant;\n@@ -39,9 +40,8 @@\n import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n-import redis.clients.jedis.Response;\n-import redis.clients.jedis.ScanParams;\n-import redis.clients.jedis.ScanResult;\n+import net.jpountz.lz4.*;\n+import redis.clients.jedis.*;\n import redis.clients.jedis.commands.BinaryJedisCommands;\n import redis.clients.jedis.util.SafeEncoder;\n \n@@ -64,6 +64,7 @@\n   private static final String REDIS_READ_RETRY = \"permissionsRepositoryRedisRead\";\n \n   private static final String KEY_PERMISSIONS = \"permissions\";\n+  private static final String KEY_PERMISSIONS_LZ4 = \"permissions-lz4\";\n   private static final String KEY_ROLES = \"roles\";\n   private static final String KEY_ALL_USERS = \"users\";\n   private static final String KEY_ADMIN = \"admin\";\n@@ -79,6 +80,8 @@\n   private final RedisPermissionRepositoryConfigProps configProps;\n   private final RetryRegistry retryRegistry;\n   private final AtomicReference<String> fallbackLastModified = new AtomicReference<>(null);\n+  private final LZ4CompressorWithLength lz4Compressor;\n+  private final LZ4DecompressorWithLength lz4Decompressor;\n \n   private final LoadingCache<String, UserPermission> unrestrictedPermission =\n       Caffeine.newBuilder()\n@@ -104,6 +107,10 @@\n     this.resources = resources;\n     this.retryRegistry = retryRegistry;\n \n+    LZ4Factory factory = LZ4Factory.fastestInstance();\n+    this.lz4Compressor = new LZ4CompressorWithLength(factory.fastCompressor());\n+    this.lz4Decompressor = new LZ4DecompressorWithLength(factory.fastDecompressor());\n+\n     this.allUsersKey = SafeEncoder.encode(String.format(\"%s:%s\", prefix, KEY_ALL_USERS));\n     this.adminKey =\n         SafeEncoder.encode(String.format(\"%s:%s:%s\", prefix, KEY_PERMISSIONS, KEY_ADMIN));\n@@ -144,13 +151,12 @@ private UserPermission reloadUnrestricted(String cacheKey) {\n   private UserPermission getUnrestrictedUserPermission() {\n     String serverLastModified = NO_LAST_MODIFIED;\n     byte[] bServerLastModified =\n-        (byte[])\n-            redisRead(\n-                new TimeoutContext(\n-                    \"checkLastModified\",\n-                    clock,\n-                    configProps.getRepository().getCheckLastModifiedTimeout()),\n-                c -> c.get(SafeEncoder.encode(unrestrictedLastModifiedKey())));\n+        redisRead(\n+            new TimeoutContext(\n+                \"checkLastModified\",\n+                clock,\n+                configProps.getRepository().getCheckLastModifiedTimeout()),\n+            c -> c.get(SafeEncoder.encode(unrestrictedLastModifiedKey())));\n     if (bServerLastModified == null || bServerLastModified.length == 0) {\n       log.debug(\n           \"no last modified time available in redis for user {} using default of {}\",\n@@ -189,78 +195,79 @@ private UserPermission getUnrestrictedUserPermission() {\n     }\n   }\n \n+  private static class PutUpdateData {\n+    public byte[] userResourceKey;\n+    public byte[] compressedData;\n+  }\n+\n   @Override\n   public RedisPermissionsRepository put(@NonNull UserPermission permission) {\n-    val resourceTypes =\n+    String userId = permission.getId();\n+    byte[] bUserId = SafeEncoder.encode(userId);\n+    List<ResourceType> resourceTypes =\n         resources.stream().map(Resource::getResourceType).collect(Collectors.toList());\n-    Map<ResourceType, Map<byte[], byte[]>> resourceTypeToRedisValue =\n+    Map<ResourceType, Map<String, Resource>> resourceTypeToRedisValue =\n         new HashMap<>(resourceTypes.size());\n \n     permission\n         .getAllResources()\n         .forEach(\n             resource -> {\n-              try {\n-                resourceTypeToRedisValue\n-                    .computeIfAbsent(resource.getResourceType(), key -> new HashMap<>())\n-                    .put(\n-                        SafeEncoder.encode(resource.getName()),\n-                        objectMapper.writeValueAsBytes(resource));\n-              } catch (JsonProcessingException jpe) {\n-                log.error(\"Serialization exception writing {} entry.\", permission.getId(), jpe);\n-              }\n+              resourceTypeToRedisValue\n+                  .computeIfAbsent(resource.getResourceType(), key -> new HashMap<>())\n+                  .put(resource.getName(), resource);\n             });\n \n     try {\n-      Set<Role> existingRoles =\n-          redisClientDelegate.withCommandsClient(\n-              client -> {\n-                return client\n-                    .hgetAll(userKey(permission.getId(), ResourceType.ROLE))\n-                    .values()\n-                    .stream()\n-                    .map(\n-                        (ThrowingFunction<String, Role>)\n-                            serialized -> objectMapper.readValue(serialized, Role.class))\n-                    .collect(Collectors.toSet());\n-              });\n+      Set<Role> existingRoles = new HashSet<>(getUserRoleMapFromRedis(userId).values());\n+\n+      // These updates are pre-prepared to reduce work done during the multi-key pipeline\n+      List<PutUpdateData> updateData = new ArrayList<>();\n+      for (ResourceType rt : resourceTypes) {\n+        Map<String, Resource> redisValue = resourceTypeToRedisValue.get(rt);\n+        byte[] userResourceKey = userKey(userId, rt);\n+        PutUpdateData pud = new PutUpdateData();\n+        pud.userResourceKey = userResourceKey;\n+\n+        if (redisValue == null || redisValue.size() == 0) {\n+          pud.compressedData = null;\n+        } else {\n+          pud.compressedData = lz4Compressor.compress(objectMapper.writeValueAsBytes(redisValue));\n+        }\n+\n+        updateData.add(pud);\n+      }\n \n       AtomicReference<Response<List<String>>> serverTime = new AtomicReference<>();\n       redisClientDelegate.withMultiKeyPipeline(\n           pipeline -> {\n-            String userId = permission.getId();\n             if (permission.isAdmin()) {\n-              pipeline.sadd(adminKey, SafeEncoder.encode(userId));\n+              pipeline.sadd(adminKey, bUserId);\n             } else {\n-              pipeline.srem(adminKey, SafeEncoder.encode(userId));\n+              pipeline.srem(adminKey, bUserId);\n             }\n \n-            permission.getRoles().forEach(role -> pipeline.sadd(roleKey(role), userId));\n+            permission.getRoles().forEach(role -> pipeline.sadd(roleKey(role), bUserId));\n             existingRoles.stream()\n                 .filter(it -> !permission.getRoles().contains(it))\n-                .forEach(role -> pipeline.srem(roleKey(role), userId));\n-\n-            resources.stream()\n-                .map(Resource::getResourceType)\n-                .forEach(\n-                    r -> {\n-                      String userResourceKey = userKey(userId, r);\n-                      Map<byte[], byte[]> redisValue = resourceTypeToRedisValue.get(r);\n-                      String tempKey = UUID.randomUUID().toString();\n-                      if (redisValue != null && !redisValue.isEmpty()) {\n-                        pipeline.hmset(SafeEncoder.encode(tempKey), redisValue);\n-                        pipeline.rename(tempKey, userResourceKey);\n-                      } else {\n-                        pipeline.del(userResourceKey);\n-                      }\n-                    });\n+                .forEach(role -> pipeline.srem(roleKey(role), bUserId));\n+\n+            for (PutUpdateData pud : updateData) {\n+              if (pud.compressedData == null) {\n+                pipeline.del(pud.userResourceKey);\n+              } else {\n+                byte[] tempKey = SafeEncoder.encode(UUID.randomUUID().toString());\n+                pipeline.set(tempKey, pud.compressedData);\n+                pipeline.rename(tempKey, pud.userResourceKey);\n+              }\n+            }\n \n             serverTime.set(pipeline.time());\n-            pipeline.sadd(allUsersKey, SafeEncoder.encode(userId));\n+            pipeline.sadd(allUsersKey, bUserId);\n \n             pipeline.sync();\n           });\n-      if (UNRESTRICTED.equals(permission.getId())) {\n+      if (UNRESTRICTED.equals(userId)) {\n         String lastModified = serverTime.get().get().get(0);\n         redisClientDelegate.withCommandsClient(\n             c -> {\n@@ -269,7 +276,7 @@ public RedisPermissionsRepository put(@NonNull UserPermission permission) {\n             });\n       }\n     } catch (Exception e) {\n-      log.error(\"Storage exception writing {} entry.\", permission.getId(), e);\n+      log.error(\"Storage exception writing {} entry.\", userId, e);\n     }\n     return this;\n   }\n@@ -282,6 +289,52 @@ public RedisPermissionsRepository put(@NonNull UserPermission permission) {\n     return getFromRedis(id);\n   }\n \n+  private byte[] getUserResourceBytesFromRedis(String id, ResourceType resourceType) {\n+    TimeoutContext timeoutContext =\n+        new TimeoutContext(\n+            String.format(\"get user resource from redis: %s (%s)\", id, resourceType),\n+            clock,\n+            configProps.getRepository().getGetUserResourceTimeout());\n+    byte[] key = userKey(id, resourceType);\n+\n+    byte[] compressedData =\n+        redisRead(timeoutContext, (ThrowingFunction<BinaryJedisCommands, byte[]>) c -> c.get(key));\n+\n+    if (compressedData == null || compressedData.length == 0) {\n+      return null;\n+    }\n+\n+    return lz4Decompressor.decompress(compressedData);\n+  }\n+\n+  private Map<String, Resource> getUserResourceMapFromRedis(String id, ResourceType resourceType)\n+      throws IOException {\n+    byte[] redisData = getUserResourceBytesFromRedis(id, resourceType);\n+\n+    if (redisData == null) {\n+      return new HashMap<>();\n+    }\n+\n+    Class<? extends Resource> modelClazz =\n+        resources.stream()\n+            .filter(resource -> resource.getResourceType().equals(resourceType))\n+            .findFirst()\n+            .orElseThrow(IllegalArgumentException::new)\n+            .getClass();\n+\n+    return objectMapper.readerForMapOf(modelClazz).readValue(redisData);\n+  }\n+\n+  private Map<String, Role> getUserRoleMapFromRedis(String id) throws IOException {\n+    byte[] redisData = getUserResourceBytesFromRedis(id, ResourceType.ROLE);\n+\n+    if (redisData == null) {\n+      return new HashMap<>();\n+    }\n+\n+    return objectMapper.readValue(redisData, new TypeReference<>() {});\n+  }\n+\n   private Optional<UserPermission> getFromRedis(@NonNull String id) {\n     try {\n       TimeoutContext timeoutContext =\n@@ -297,13 +350,16 @@ public RedisPermissionsRepository put(@NonNull UserPermission permission) {\n         return Optional.empty();\n       }\n       UserPermission userPermission = new UserPermission().setId(id);\n-      resources.forEach(\n-          r -> {\n-            ResourceType resourceType = r.getResourceType();\n-            String userKey = userKey(id, resourceType);\n-            Map<byte[], byte[]> resourcePermissions = hgetall(timeoutContext, userKey);\n-            userPermission.addResources(extractResources(resourceType, resourcePermissions));\n-          });\n+\n+      for (Resource r : resources) {\n+        ResourceType resourceType = r.getResourceType();\n+        Map<String, Resource> resourcePermissions = getUserResourceMapFromRedis(id, resourceType);\n+\n+        if (resourcePermissions != null && !resourcePermissions.isEmpty()) {\n+          userPermission.addResources(resourcePermissions.values());\n+        }\n+      }\n+\n       if (!UNRESTRICTED.equals(id)) {\n         userPermission.setAdmin(\n             redisRead(timeoutContext, c -> c.sismember(adminKey, SafeEncoder.encode(id))));\n@@ -323,9 +379,7 @@ public RedisPermissionsRepository put(@NonNull UserPermission permission) {\n   @Override\n   public Map<String, UserPermission> getAllById() {\n     Set<String> allUsers =\n-        scanSet(SafeEncoder.encode(allUsersKey)).stream()\n-            .map(String::toLowerCase)\n-            .collect(Collectors.toSet());\n+        scanSet(allUsersKey).stream().map(String::toLowerCase).collect(Collectors.toSet());\n \n     if (allUsers.isEmpty()) {\n       return new HashMap<>(0);\n@@ -369,57 +423,51 @@ public RedisPermissionsRepository put(@NonNull UserPermission permission) {\n   @Override\n   public void remove(@NonNull String id) {\n     try {\n-      Map<String, String> userRolesById =\n-          redisClientDelegate.withCommandsClient(\n-              jedis -> {\n-                return jedis.hgetAll(userKey(id, ResourceType.ROLE));\n-              });\n+      Map<String, Role> userRolesById = getUserRoleMapFromRedis(id);\n+      byte[] bId = SafeEncoder.encode(id);\n \n       redisClientDelegate.withMultiKeyPipeline(\n           p -> {\n-            p.srem(allUsersKey, SafeEncoder.encode(id));\n-            for (String roleName : userRolesById.keySet()) {\n-              p.srem(roleKey(roleName), id);\n-            }\n+            p.srem(allUsersKey, bId);\n+            userRolesById.keySet().forEach(roleName -> p.srem(roleKey(roleName), bId));\n \n             resources.stream().map(Resource::getResourceType).forEach(r -> p.del(userKey(id, r)));\n-            p.srem(adminKey, SafeEncoder.encode(id));\n+            p.srem(adminKey, bId);\n             p.sync();\n           });\n     } catch (Exception e) {\n       log.error(\"Storage exception reading \" + id + \" entry.\", e);\n     }\n   }\n \n-  private Set<String> scanSet(String key) {\n+  private Set<String> scanSet(byte[] key) {\n     final Set<String> results = new HashSet<>();\n-    final AtomicReference<String> cursor = new AtomicReference<>(ScanParams.SCAN_POINTER_START);\n+    final AtomicReference<byte[]> cursor =\n+        new AtomicReference<>(ScanParams.SCAN_POINTER_START_BINARY);\n     do {\n-      final ScanResult<String> result =\n-          redisClientDelegate.withCommandsClient(\n+      final ScanResult<byte[]> result =\n+          redisClientDelegate.withBinaryClient(\n               jedis -> {\n                 return jedis.sscan(key, cursor.get());\n               });\n-      results.addAll(result.getResult());\n-      cursor.set(result.getCursor());\n-    } while (!\"0\".equals(cursor.get()));\n+      results.addAll(\n+          result.getResult().stream().map(SafeEncoder::encode).collect(Collectors.toList()));\n+      cursor.set(result.getCursorAsBytes());\n+    } while (!Arrays.equals(cursor.get(), ScanParams.SCAN_POINTER_START_BINARY));\n     return results;\n   }\n \n-  private Set<String> getAllAdmins() {\n-    return scanSet(SafeEncoder.encode(adminKey));\n-  }\n-\n-  private String userKey(String userId, ResourceType r) {\n-    return String.format(\"%s:%s:%s:%s\", prefix, KEY_PERMISSIONS, userId, r.keySuffix());\n+  private byte[] userKey(String userId, ResourceType r) {\n+    return SafeEncoder.encode(\n+        String.format(\"%s:%s:%s:%s\", prefix, KEY_PERMISSIONS_LZ4, userId, r.keySuffix()));\n   }\n \n-  private String roleKey(Role role) {\n+  private byte[] roleKey(Role role) {\n     return roleKey(role.getName());\n   }\n \n-  private String roleKey(String role) {\n-    return String.format(\"%s:%s:%s\", prefix, KEY_ROLES, role);\n+  private byte[] roleKey(String role) {\n+    return SafeEncoder.encode(String.format(\"%s:%s:%s\", prefix, KEY_ROLES, role));\n   }\n \n   private String lastModifiedKey(String userId) {\n@@ -430,20 +478,6 @@ private String unrestrictedLastModifiedKey() {\n     return lastModifiedKey(UNRESTRICTED);\n   }\n \n-  private Set<Resource> extractResources(ResourceType r, Map<byte[], byte[]> resourceMap) {\n-    val modelClazz =\n-        resources.stream()\n-            .filter(resource -> resource.getResourceType().equals(r))\n-            .findFirst()\n-            .orElseThrow(IllegalArgumentException::new)\n-            .getClass();\n-    return resourceMap.values().stream()\n-        .map(\n-            (ThrowingFunction<byte[], ? extends Resource>)\n-                serialized -> objectMapper.readValue(serialized, modelClazz))\n-        .collect(Collectors.toSet());\n-  }\n-\n   /** Used to swallow checked exceptions from Jackson methods. */\n   @FunctionalInterface\n   private interface ThrowingFunction<T, R> extends Function<T, R> {\n@@ -510,17 +544,4 @@ Duration getTimeout() {\n               return redisClientDelegate.withBinaryClient(fn);\n             });\n   }\n-\n-  private Map<byte[], byte[]> hgetall(TimeoutContext timeoutContext, String key) {\n-    Map<byte[], byte[]> all = new HashMap<>();\n-    byte[] cursor = ScanParams.SCAN_POINTER_START_BINARY;\n-    do {\n-      final byte[] thisCursor = cursor;\n-      ScanResult<Map.Entry<byte[], byte[]>> result =\n-          redisRead(timeoutContext, c -> c.hscan(SafeEncoder.encode(key), thisCursor));\n-      result.getResult().forEach(e -> all.put(e.getKey(), e.getValue()));\n-      cursor = result.getCursorAsBytes();\n-    } while (!Arrays.equals(ScanParams.SCAN_POINTER_START_BINARY, cursor));\n-    return all;\n-  }\n }"
  },
  {
    "sha": "19fc65ab2ab0d5be365672bcbc8b89f23ee5b57b",
    "filename": "fiat-roles/src/test/groovy/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepositorySpec.groovy",
    "status": "modified",
    "additions": 72,
    "deletions": 62,
    "changes": 134,
    "blob_url": "https://github.com/spinnaker/fiat/blob/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/src/test/groovy/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepositorySpec.groovy",
    "raw_url": "https://github.com/spinnaker/fiat/raw/ab185ab68d738c0d4709598454fad27403beb3b3/fiat-roles/src/test/groovy/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepositorySpec.groovy",
    "contents_url": "https://api.github.com/repos/spinnaker/fiat/contents/fiat-roles/src/test/groovy/com/netflix/spinnaker/fiat/permissions/RedisPermissionsRepositorySpec.groovy?ref=ab185ab68d738c0d4709598454fad27403beb3b3",
    "patch": "@@ -32,8 +32,12 @@ import com.netflix.spinnaker.kork.jedis.RedisClientDelegate\n import io.github.resilience4j.retry.RetryRegistry\n import org.testcontainers.containers.GenericContainer\n import org.testcontainers.utility.DockerImageName\n+import net.jpountz.lz4.LZ4CompressorWithLength\n+import net.jpountz.lz4.LZ4DecompressorWithLength\n+import net.jpountz.lz4.LZ4Factory\n import redis.clients.jedis.Jedis\n import redis.clients.jedis.JedisPool\n+import redis.clients.jedis.util.SafeEncoder\n import spock.lang.AutoCleanup\n import spock.lang.Shared\n import spock.lang.Specification\n@@ -71,6 +75,12 @@ class RedisPermissionsRepositorySpec extends Specification {\n   @Shared\n   PausableRedisClientDelegate redisClientDelegate\n \n+  @Shared\n+  LZ4CompressorWithLength lz4compressor\n+\n+  @Shared\n+  LZ4DecompressorWithLength lz4decompressor\n+\n   @Subject\n   RedisPermissionsRepository repo\n \n@@ -83,6 +93,9 @@ class RedisPermissionsRepositorySpec extends Specification {\n     jedis = jedisPool.getResource()\n     jedis.flushDB()\n     redisClientDelegate = new PausableRedisClientDelegate(new JedisClientDelegate(jedisPool))\n+    LZ4Factory factory = LZ4Factory.fastestInstance()\n+    lz4compressor = new LZ4CompressorWithLength(factory.fastCompressor())\n+    lz4decompressor = new LZ4DecompressorWithLength(factory.fastDecompressor())\n   }\n \n   private static class TestClock extends Clock {\n@@ -174,6 +187,23 @@ class RedisPermissionsRepositorySpec extends Specification {\n     jedis.flushDB()\n   }\n \n+  def setCompressed(String key, String value) {\n+    byte[] k = SafeEncoder.encode(key)\n+    byte[] v = lz4compressor.compress(SafeEncoder.encode(value))\n+    jedis.set(k, v)\n+  }\n+\n+  String getCompressed(String key) {\n+    byte[] k = SafeEncoder.encode(key)\n+    def val = jedis.get(k)\n+\n+    if (val == null) {\n+      return null\n+    }\n+\n+    return SafeEncoder.encode(lz4decompressor.decompress(val))\n+  }\n+\n   def \"should fail if timeout is exceeded\"() {\n     given:\n     repo.put(new UserPermission().setId(\"foo\"))\n@@ -236,33 +266,25 @@ class RedisPermissionsRepositorySpec extends Specification {\n     jedis.smembers(\"unittests:users\") == [\"testuser\"] as Set\n     jedis.smembers(\"unittests:roles:role1\") == [\"testuser\"] as Set\n \n-    jedis.hgetAll(\"unittests:permissions:testuser:accounts\") ==\n-        ['account': /{\"name\":\"account\",\"permissions\":$EMPTY_PERM_JSON}/.toString()]\n-    jedis.hgetAll(\"unittests:permissions:testuser:applications\") ==\n-        ['app': /{\"name\":\"app\",\"permissions\":$EMPTY_PERM_JSON,\"details\":{}}/.toString()]\n-    jedis.hgetAll(\"unittests:permissions:testuser:service_accounts\") ==\n-        ['serviceAccount': '{\"name\":\"serviceAccount\",\"memberOf\":[\"role1\"]}']\n-    jedis.hgetAll(\"unittests:permissions:testuser:roles\") ==\n-        ['role1': '{\"name\":\"role1\"}']\n+    getCompressed(\"unittests:permissions-lz4:testuser:accounts\") ==\n+        '{\"account\":{\"name\":\"account\",\"permissions\":{}}}'\n+    getCompressed(\"unittests:permissions-lz4:testuser:applications\") ==\n+        '{\"app\":{\"name\":\"app\",\"permissions\":{},\"details\":{}}}'\n+    getCompressed(\"unittests:permissions-lz4:testuser:service_accounts\") ==\n+        '{\"serviceAccount\":{\"name\":\"serviceAccount\",\"memberOf\":[\"role1\"]}}'\n+    getCompressed(\"unittests:permissions-lz4:testuser:roles\") ==\n+        '{\"role1\":{\"name\":\"role1\"}}'\n     !jedis.sismember (\"unittests:permissions:admin\",\"testUser\")\n   }\n \n   def \"should remove permission that has been revoked\"() {\n     setup:\n     jedis.sadd(\"unittests:users\", \"testuser\")\n     jedis.sadd(\"unittests:roles:role1\", \"testuser\")\n-    jedis.hset(\"unittests:permissions:testuser:accounts\",\n-               \"account\",\n-               '{\"name\":\"account\",\"permissions\":{}}')\n-    jedis.hset(\"unittests:permissions:testuser:applications\",\n-               \"app\",\n-               '{\"name\":\"app\",\"permissions\":{}}')\n-    jedis.hset(\"unittests:permissions:testuser:service_accounts\",\n-               \"serviceAccount\",\n-               '{\"name\":\"serviceAccount\"}')\n-    jedis.hset(\"unittests:permissions:testuser:roles\",\n-               \"role1\",\n-               '{\"name\":\"role1\"}')\n+    setCompressed(\"unittests:permissions-lz4:testuser:accounts\", '{\"account\":{\"name\":\"account\",\"permissions\":{}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser:applications\", '{\"app\":{\"name\":\"app\",\"permissions\":{}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser:service_accounts\", '{\"serviceAccount\":{\"name\":\"serviceAccount\"}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser:roles\", '{\"role1\":{\"name\":\"role1\"}}')\n \n     when:\n     repo.put(new UserPermission()\n@@ -273,25 +295,22 @@ class RedisPermissionsRepositorySpec extends Specification {\n                  .setRoles([] as Set))\n \n     then:\n-    jedis.hgetAll(\"unittests:permissions:testuser:accounts\") == [:]\n-    jedis.hgetAll(\"unittests:permissions:testuser:applications\") == [:]\n-    jedis.hgetAll(\"unittests:permissions:testuser:service_accounts\") == [:]\n-    jedis.hgetAll(\"unittests:permissions:testuser:roles\") == [:]\n+    getCompressed(\"unittests:permissions-lz4:testuser:accounts\") == null\n+    getCompressed(\"unittests:permissions-lz4:testuser:applications\") == null\n+    getCompressed(\"unittests:permissions-lz4:testuser:service_accounts\") == null\n+    getCompressed(\"unittests:permissions-lz4:testuser:roles\") == null\n     jedis.smembers(\"unittests:roles:role1\") == [] as Set\n   }\n \n   def \"should get the permission out of redis\"() {\n     setup:\n     jedis.sadd(\"unittests:users\", \"testuser\")\n-    jedis.hset(\"unittests:permissions:testuser:accounts\",\n-               \"account\",\n-               '{\"name\":\"account\",\"permissions\":{\"READ\":[\"abc\"]}}')\n-    jedis.hset(\"unittests:permissions:testuser:applications\",\n-               \"app\",\n-               '{\"name\":\"app\",\"permissions\":{\"READ\":[\"abc\"]}}')\n-    jedis.hset(\"unittests:permissions:testuser:service_accounts\",\n-               \"serviceAccount\",\n-               '{\"name\":\"serviceAccount\"}')\n+    setCompressed(\"unittests:permissions-lz4:testuser:accounts\",\n+               '{\"account\":{\"name\":\"account\",\"permissions\":{\"READ\":[\"abc\"]}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser:applications\",\n+               '{\"app\":{\"name\":\"app\",\"permissions\":{\"READ\":[\"abc\"]}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser:service_accounts\",\n+               '{\"serviceAccount\":{\"name\":\"serviceAccount\"}}')\n \n     when:\n     def result = repo.get(\"testuser\").get()\n@@ -306,9 +325,8 @@ class RedisPermissionsRepositorySpec extends Specification {\n     result == expected\n \n     when:\n-    jedis.hset(\"unittests:permissions:__unrestricted_user__:accounts\",\n-               \"account\",\n-               '{\"name\":\"unrestrictedAccount\",\"permissions\":{}}')\n+    setCompressed(\"unittests:permissions-lz4:__unrestricted_user__:accounts\",\n+               '{\"account\":{\"name\":\"unrestrictedAccount\",\"permissions\":{}}}')\n     jedis.set(\"unittests:last_modified:__unrestricted_user__\", \"1\")\n     result = repo.get(\"testuser\").get()\n \n@@ -325,30 +343,25 @@ class RedisPermissionsRepositorySpec extends Specification {\n     Account account1 = new Account().setName(\"account1\")\n     Application app1 = new Application().setName(\"app1\")\n     ServiceAccount serviceAccount1 = new ServiceAccount().setName(\"serviceAccount1\")\n-    jedis.hset(\"unittests:permissions:testuser1:accounts\",\n-               \"account1\",\n-               '{\"name\":\"account1\",\"permissions\":{}}')\n-    jedis.hset(\"unittests:permissions:testuser1:applications\",\n-               \"app1\",\n-               '{\"name\":\"app1\",\"permissions\":{}}')\n-    jedis.hset(\"unittests:permissions:testuser1:service_accounts\",\n-               \"serviceAccount1\",\n-               '{\"name\":\"serviceAccount1\"}')\n+\n+    setCompressed(\"unittests:permissions-lz4:testuser1:accounts\",\n+               '{\"account1\":{\"name\":\"account1\",\"permissions\":{}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser1:applications\",\n+               '{\"app1\":{\"name\":\"app1\",\"permissions\":{}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser1:service_accounts\",\n+               '{\"serviceAccount1\":{\"name\":\"serviceAccount1\"}}')\n \n     and:\n     def abcRead = new Permissions.Builder().add(Authorization.READ, \"abc\").build()\n     Account account2 = new Account().setName(\"account2\").setPermissions(abcRead)\n     Application app2 = new Application().setName(\"app2\").setPermissions(abcRead)\n     ServiceAccount serviceAccount2 = new ServiceAccount().setName(\"serviceAccount2\")\n-    jedis.hset(\"unittests:permissions:testuser2:accounts\",\n-               \"account2\",\n-               '{\"name\":\"account2\",\"permissions\":{\"READ\":[\"abc\"]}}')\n-    jedis.hset(\"unittests:permissions:testuser2:applications\",\n-               \"app2\",\n-               '{\"name\":\"app2\",\"permissions\":{\"READ\":[\"abc\"]}}')\n-    jedis.hset(\"unittests:permissions:testuser2:service_accounts\",\n-               \"serviceAccount2\",\n-               '{\"name\":\"serviceAccount2\"}')\n+    setCompressed(\"unittests:permissions-lz4:testuser2:accounts\",\n+               '{\"account2\":{\"name\":\"account2\",\"permissions\":{\"READ\":[\"abc\"]}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser2:applications\",\n+               '{\"app2\":{\"name\":\"app2\",\"permissions\":{\"READ\":[\"abc\"]}}}')\n+    setCompressed(\"unittests:permissions-lz4:testuser2:service_accounts\",\n+               '{\"serviceAccount2\":{\"name\":\"serviceAccount2\"}}')\n     and:\n     jedis.sadd(\"unittests:permissions:admin\", \"testuser3\")\n \n@@ -413,15 +426,12 @@ class RedisPermissionsRepositorySpec extends Specification {\n     def user5 = new UserPermission().setId(\"user5\").setRoles([role5] as Set)\n     def unrestricted = new UserPermission().setId(UNRESTRICTED).setAccounts([acct1] as Set)\n \n-    jedis.hset(\"unittests:permissions:user1:roles\", \"role1\", '{\"name\":\"role1\"}')\n-    jedis.hset(\"unittests:permissions:user1:roles\", \"role2\", '{\"name\":\"role2\"}')\n-    jedis.hset(\"unittests:permissions:user2:roles\", \"role1\", '{\"name\":\"role1\"}')\n-    jedis.hset(\"unittests:permissions:user2:roles\", \"role3\", '{\"name\":\"role3\"}')\n-    jedis.hset(\"unittests:permissions:user4:roles\", \"role4\", '{\"name\":\"role4\"}')\n-    jedis.hset(\"unittests:permissions:user5:roles\", \"role5\", '{\"name\":\"role5\"}')\n-    jedis.hset(\"unittests:permissions:USER5:roles\", \"role5\", '{\"name\":\"role5\"}')\n+    setCompressed(\"unittests:permissions-lz4:user1:roles\", '{\"role1\":{\"name\":\"role1\"},\"role2\":{\"name\":\"role2\"}}')\n+    setCompressed(\"unittests:permissions-lz4:user2:roles\", '{\"role1\":{\"name\":\"role1\"},\"role3\":{\"name\":\"role3\"}}')\n+    setCompressed(\"unittests:permissions-lz4:user4:roles\", '{\"role4\":{\"name\":\"role4\"}}')\n+    setCompressed(\"unittests:permissions-lz4:user5:roles\", '{\"role5\":{\"name\":\"role5\"}}')\n \n-    jedis.hset(\"unittests:permissions:__unrestricted_user__:accounts\", \"acct1\", '{\"name\":\"acct1\"}')\n+    setCompressed(\"unittests:permissions-lz4:__unrestricted_user__:accounts\", '{\"acct1\":{\"name\":\"acct1\"}}')\n \n     jedis.sadd(\"unittests:roles:role1\", \"user1\", \"user2\")\n     jedis.sadd(\"unittests:roles:role2\", \"user1\")"
  }
]
