[
  {
    "sha": "9e89f3ced66fb0497b0bda117f4640fc4d5ef110",
    "filename": "README.md",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/stefanhaustein/quake2-playn-port/blob/c9dc23be2511977b28c69111dc62d732601d16fa/README.md",
    "raw_url": "https://github.com/stefanhaustein/quake2-playn-port/raw/c9dc23be2511977b28c69111dc62d732601d16fa/README.md",
    "contents_url": "https://api.github.com/repos/stefanhaustein/quake2-playn-port/contents/README.md?ref=c9dc23be2511977b28c69111dc62d732601d16fa",
    "patch": "@@ -1,3 +1,28 @@\n+I DID NOT MAKE THIS!!!\n+\n+All credit goes to the original source port creators: https://github.com/stefanhaustein/quake2-playn-port\n+\n+I just made this work\n+\n+So here is the first thing you need to do is to get the Playn Quake 2 Demo exe file from here: https://github.com/MagnusMarx/quake2-playn-port\n+\n+Next you will need to download the demo port from here: https://commondatastorage.googleapis.com/quake2demo/q2-314-demo-x86.exe\n+\n+Upload the .exe file and source port to your website because this is the only way for this to work.\n+\n+Then, where the game shows this link: http://commondatastorage.googleapis.com/quake2demo/q2-314-demo-x86.exe\n+\n+replace it with the location on the website where you stored the .exe file\n+\n+so instead, it would say something like: https://[your website here]/quake2demo.exe\n+\n+If you have anymore questions, don't hesitate to contact me.\n+\n+Thx!\n+\n+Magnus Marks\n+\n+\n # quake2-playn-port\n \n Demo:Â http://quake2playn.appspot.com/ "
  },
  {
    "sha": "5b69923a9c802b2d50c8553a0e6b36b47ac9f42b",
    "filename": "html/src/main/war/PlayNQuake/E635C924D74AFB6527B814C542FC5B1C.cache.html",
    "status": "added",
    "additions": 67361,
    "deletions": 0,
    "changes": 67361,
    "blob_url": "https://github.com/stefanhaustein/quake2-playn-port/blob/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/PlayNQuake/E635C924D74AFB6527B814C542FC5B1C.cache.html",
    "raw_url": "https://github.com/stefanhaustein/quake2-playn-port/raw/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/PlayNQuake/E635C924D74AFB6527B814C542FC5B1C.cache.html",
    "contents_url": "https://api.github.com/repos/stefanhaustein/quake2-playn-port/contents/html/src/main/war/PlayNQuake/E635C924D74AFB6527B814C542FC5B1C.cache.html?ref=c9dc23be2511977b28c69111dc62d732601d16fa"
  },
  {
    "sha": "f59a1fe17b8642b30908406ca55eb598052d1db6",
    "filename": "html/src/main/war/PlayNQuake/PlayNQuake.nocache.js",
    "status": "added",
    "additions": 297,
    "deletions": 0,
    "changes": 297,
    "blob_url": "https://github.com/stefanhaustein/quake2-playn-port/blob/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/PlayNQuake/PlayNQuake.nocache.js",
    "raw_url": "https://github.com/stefanhaustein/quake2-playn-port/raw/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/PlayNQuake/PlayNQuake.nocache.js",
    "contents_url": "https://api.github.com/repos/stefanhaustein/quake2-playn-port/contents/html/src/main/war/PlayNQuake/PlayNQuake.nocache.js?ref=c9dc23be2511977b28c69111dc62d732601d16fa",
    "patch": "@@ -0,0 +1,297 @@\n+function PlayNQuake(){\n+  var $wnd_0 = window, $doc_0 = document, $stats = $wnd_0.__gwtStatsEvent?function(a){\n+    return $wnd_0.__gwtStatsEvent(a);\n+  }\n+  :null, $sessionId_0 = $wnd_0.__gwtStatsSessionId?$wnd_0.__gwtStatsSessionId:null, scriptsDone, loadDone, bodyDone, base = '', metaProps = {}, values = [], providers = [], answers = [], softPermutationId = 0, onLoadErrorFunc, propertyErrorFunc;\n+  $stats && $stats({moduleName:'PlayNQuake', sessionId:$sessionId_0, subSystem:'startup', evtGroup:'bootstrap', millis:(new Date).getTime(), type:'begin'});\n+  if (!$wnd_0.__gwt_stylesLoaded) {\n+    $wnd_0.__gwt_stylesLoaded = {};\n+  }\n+  if (!$wnd_0.__gwt_scriptsLoaded) {\n+    $wnd_0.__gwt_scriptsLoaded = {};\n+  }\n+  function isHostedMode(){\n+    var result = false;\n+    try {\n+      var query = $wnd_0.location.search;\n+      return (query.indexOf('gwt.codesvr=') != -1 || (query.indexOf('gwt.hosted=') != -1 || $wnd_0.external && $wnd_0.external.gwtOnLoad)) && query.indexOf('gwt.hybrid') == -1;\n+    }\n+     catch (e) {\n+    }\n+    isHostedMode = function(){\n+      return result;\n+    }\n+    ;\n+    return result;\n+  }\n+\n+  function maybeStartModule(){\n+    if (scriptsDone && loadDone) {\n+      var iframe = $doc_0.getElementById('PlayNQuake');\n+      var frameWnd = iframe.contentWindow;\n+      if (isHostedMode()) {\n+        frameWnd.__gwt_getProperty = function(name_0){\n+          return computePropValue(name_0);\n+        }\n+        ;\n+      }\n+      PlayNQuake = null;\n+      frameWnd.gwtOnLoad(onLoadErrorFunc, 'PlayNQuake', base, softPermutationId);\n+      $stats && $stats({moduleName:'PlayNQuake', sessionId:$sessionId_0, subSystem:'startup', evtGroup:'moduleStartup', millis:(new Date).getTime(), type:'end'});\n+    }\n+  }\n+\n+  function computeScriptBase(){\n+    function getDirectoryOfFile(path){\n+      var hashIndex = path.lastIndexOf('#');\n+      if (hashIndex == -1) {\n+        hashIndex = path.length;\n+      }\n+      var queryIndex = path.indexOf('?');\n+      if (queryIndex == -1) {\n+        queryIndex = path.length;\n+      }\n+      var slashIndex = path.lastIndexOf('/', Math.min(queryIndex, hashIndex));\n+      return slashIndex >= 0?path.substring(0, slashIndex + 1):'';\n+    }\n+\n+    function ensureAbsoluteUrl(url_0){\n+      if (url_0.match(/^\\w+:\\/\\//)) {\n+      }\n+       else {\n+        var img = $doc_0.createElement('img');\n+        img.src = url_0 + 'clear.cache.gif';\n+        url_0 = getDirectoryOfFile(img.src);\n+      }\n+      return url_0;\n+    }\n+\n+    function tryMetaTag(){\n+      var metaVal = __gwt_getMetaProperty('baseUrl');\n+      if (metaVal != null) {\n+        return metaVal;\n+      }\n+      return '';\n+    }\n+\n+    function tryNocacheJsTag(){\n+      var scriptTags = $doc_0.getElementsByTagName('script');\n+      for (var i = 0; i < scriptTags.length; ++i) {\n+        if (scriptTags[i].src.indexOf('PlayNQuake.nocache.js') != -1) {\n+          return getDirectoryOfFile(scriptTags[i].src);\n+        }\n+      }\n+      return '';\n+    }\n+\n+    function tryMarkerScript(){\n+      var thisScript;\n+      if (typeof isBodyLoaded == 'undefined' || !isBodyLoaded()) {\n+        var markerId = '__gwt_marker_PlayNQuake';\n+        var markerScript;\n+        $doc_0.write('<script id=\"' + markerId + '\"><\\/script>');\n+        markerScript = $doc_0.getElementById(markerId);\n+        thisScript = markerScript && markerScript.previousSibling;\n+        while (thisScript && thisScript.tagName != 'SCRIPT') {\n+          thisScript = thisScript.previousSibling;\n+        }\n+        if (markerScript) {\n+          markerScript.parentNode.removeChild(markerScript);\n+        }\n+        if (thisScript && thisScript.src) {\n+          return getDirectoryOfFile(thisScript.src);\n+        }\n+      }\n+      return '';\n+    }\n+\n+    function tryBaseTag(){\n+      var baseElements = $doc_0.getElementsByTagName('base');\n+      if (baseElements.length > 0) {\n+        return baseElements[baseElements.length - 1].href;\n+      }\n+      return '';\n+    }\n+\n+    function isLocationOk(){\n+      var loc = $doc_0.location;\n+      return loc.href == loc.protocol + '//' + loc.host + loc.pathname + loc.search + loc.hash;\n+    }\n+\n+    var tempBase = tryMetaTag();\n+    if (tempBase == '') {\n+      tempBase = tryNocacheJsTag();\n+    }\n+    if (tempBase == '') {\n+      tempBase = tryMarkerScript();\n+    }\n+    if (tempBase == '') {\n+      tempBase = tryBaseTag();\n+    }\n+    if (tempBase == '' && isLocationOk()) {\n+      tempBase = getDirectoryOfFile($doc_0.location.href);\n+    }\n+    tempBase = ensureAbsoluteUrl(tempBase);\n+    base = tempBase;\n+    return tempBase;\n+  }\n+\n+  function processMetas(){\n+    var metas = document.getElementsByTagName('meta');\n+    for (var i = 0, n = metas.length; i < n; ++i) {\n+      var meta = metas[i], name_0 = meta.getAttribute('name'), content_0;\n+      if (name_0) {\n+        name_0 = name_0.replace('PlayNQuake::', '');\n+        if (name_0.indexOf('::') >= 0) {\n+          continue;\n+        }\n+        if (name_0 == 'gwt:property') {\n+          content_0 = meta.getAttribute('content');\n+          if (content_0) {\n+            var value_0, eq = content_0.indexOf('=');\n+            if (eq >= 0) {\n+              name_0 = content_0.substring(0, eq);\n+              value_0 = content_0.substring(eq + 1);\n+            }\n+             else {\n+              name_0 = content_0;\n+              value_0 = '';\n+            }\n+            metaProps[name_0] = value_0;\n+          }\n+        }\n+         else if (name_0 == 'gwt:onPropertyErrorFn') {\n+          content_0 = meta.getAttribute('content');\n+          if (content_0) {\n+            try {\n+              propertyErrorFunc = eval(content_0);\n+            }\n+             catch (e) {\n+              alert('Bad handler \"' + content_0 + '\" for \"gwt:onPropertyErrorFn\"');\n+            }\n+          }\n+        }\n+         else if (name_0 == 'gwt:onLoadErrorFn') {\n+          content_0 = meta.getAttribute('content');\n+          if (content_0) {\n+            try {\n+              onLoadErrorFunc = eval(content_0);\n+            }\n+             catch (e) {\n+              alert('Bad handler \"' + content_0 + '\" for \"gwt:onLoadErrorFn\"');\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  function __gwt_getMetaProperty(name_0){\n+    var value_0 = metaProps[name_0];\n+    return value_0 == null?null:value_0;\n+  }\n+\n+  function computePropValue(propName){\n+    var value_0 = providers[propName](), allowedValuesMap = values[propName];\n+    if (value_0 in allowedValuesMap) {\n+      return value_0;\n+    }\n+    var allowedValuesList = [];\n+    for (var k in allowedValuesMap) {\n+      allowedValuesList[allowedValuesMap[k]] = k;\n+    }\n+    if (propertyErrorFunc) {\n+      propertyErrorFunc(propName, allowedValuesList, value_0);\n+    }\n+    throw null;\n+  }\n+\n+  var frameInjected;\n+  function maybeInjectFrame(){\n+    if (!frameInjected) {\n+      frameInjected = true;\n+      var iframe = $doc_0.createElement('iframe');\n+      iframe.src = \"javascript:''\";\n+      iframe.id = 'PlayNQuake';\n+      iframe.style.cssText = 'position:absolute;width:0;height:0;border:none';\n+      iframe.tabIndex = -1;\n+      $doc_0.body.appendChild(iframe);\n+      $stats && $stats({moduleName:'PlayNQuake', sessionId:$sessionId_0, subSystem:'startup', evtGroup:'moduleStartup', millis:(new Date).getTime(), type:'moduleRequested'});\n+      iframe.contentWindow.location.replace(base + initialHtml);\n+    }\n+  }\n+\n+  PlayNQuake.onScriptLoad = function(){\n+    if (frameInjected) {\n+      loadDone = true;\n+      maybeStartModule();\n+    }\n+  }\n+  ;\n+  PlayNQuake.onInjectionDone = function(){\n+    scriptsDone = true;\n+    $stats && $stats({moduleName:'PlayNQuake', sessionId:$sessionId_0, subSystem:'startup', evtGroup:'loadExternalRefs', millis:(new Date).getTime(), type:'end'});\n+    maybeStartModule();\n+  }\n+  ;\n+  processMetas();\n+  computeScriptBase();\n+  var strongName;\n+  var initialHtml;\n+  if (isHostedMode()) {\n+    if ($wnd_0.external && ($wnd_0.external.initModule && $wnd_0.external.initModule('PlayNQuake'))) {\n+      $wnd_0.location.reload();\n+      return;\n+    }\n+    initialHtml = 'hosted.html?PlayNQuake';\n+    strongName = '';\n+  }\n+  $stats && $stats({moduleName:'PlayNQuake', sessionId:$sessionId_0, subSystem:'startup', evtGroup:'bootstrap', millis:(new Date).getTime(), type:'selectingPermutation'});\n+  if (!isHostedMode()) {\n+    try {\n+      strongName = 'E635C924D74AFB6527B814C542FC5B1C';\n+      var idx = strongName.indexOf(':');\n+      if (idx != -1) {\n+        softPermutationId = Number(strongName.substring(idx + 1));\n+        strongName = strongName.substring(0, idx);\n+      }\n+      initialHtml = strongName + '.cache.html';\n+    }\n+     catch (e) {\n+      return;\n+    }\n+  }\n+  var onBodyDoneTimerId;\n+  function onBodyDone(){\n+    if (!bodyDone) {\n+      bodyDone = true;\n+      maybeStartModule();\n+      if ($doc_0.removeEventListener) {\n+        $doc_0.removeEventListener('DOMContentLoaded', onBodyDone, false);\n+      }\n+      if (onBodyDoneTimerId) {\n+        clearInterval(onBodyDoneTimerId);\n+      }\n+    }\n+  }\n+\n+  if ($doc_0.addEventListener) {\n+    $doc_0.addEventListener('DOMContentLoaded', function(){\n+      maybeInjectFrame();\n+      onBodyDone();\n+    }\n+    , false);\n+  }\n+  var onBodyDoneTimerId = setInterval(function(){\n+    if (/loaded|complete/.test($doc_0.readyState)) {\n+      maybeInjectFrame();\n+      onBodyDone();\n+    }\n+  }\n+  , 50);\n+  $stats && $stats({moduleName:'PlayNQuake', sessionId:$sessionId_0, subSystem:'startup', evtGroup:'bootstrap', millis:(new Date).getTime(), type:'end'});\n+  $stats && $stats({moduleName:'PlayNQuake', sessionId:$sessionId_0, subSystem:'startup', evtGroup:'loadExternalRefs', millis:(new Date).getTime(), type:'begin'});\n+  $doc_0.write('<script defer=\"defer\">PlayNQuake.onInjectionDone(\\'PlayNQuake\\')<\\/script>');\n+}\n+\n+PlayNQuake();"
  },
  {
    "sha": "47208dbed8c49de1a6f8b547181a1b5e6de48ed6",
    "filename": "html/src/main/war/download.js",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/stefanhaustein/quake2-playn-port/blob/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/download.js",
    "raw_url": "https://github.com/stefanhaustein/quake2-playn-port/raw/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/download.js",
    "contents_url": "https://api.github.com/repos/stefanhaustein/quake2-playn-port/contents/html/src/main/war/download.js?ref=c9dc23be2511977b28c69111dc62d732601d16fa",
    "patch": "@@ -35,7 +35,7 @@ function downloadAndUnpack() {\n   }\n \n   var url = document.getElementById('source_url').value;\n-  println(\"Donwloading and inflating \" + url);\n+  println(\"Donwloading and inflating\");\n   zip.createReader(new zip.HttpReader(url), function(reader) { \n     println(\"Created ZIP reader, getting entries\");\n     reader.getEntries(function(zipEntries) {\n@@ -161,7 +161,7 @@ window.requestFileSystem  = window.requestFileSystem ||\n     window.webkitRequestFileSystem;\n \n // If we can ask for persistent storage, do so.\n-if (window.webkitStorageInfo) {\n+if (navigator.webkitTemporaryStorage) {\n   println(\"Quota API available. Asking for persistent storage.\");\n   println(\"If a browser dialog appears at the top of the screen, please confirm.\");\n   window.webkitStorageInfo.requestQuota("
  },
  {
    "sha": "bb52f8d1329548ad54f3037f51cf7e6d19498c0e",
    "filename": "html/src/main/war/index.html",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/stefanhaustein/quake2-playn-port/blob/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/index.html",
    "raw_url": "https://github.com/stefanhaustein/quake2-playn-port/raw/c9dc23be2511977b28c69111dc62d732601d16fa/html/src/main/war/index.html",
    "contents_url": "https://api.github.com/repos/stefanhaustein/quake2-playn-port/contents/html/src/main/war/index.html?ref=c9dc23be2511977b28c69111dc62d732601d16fa",
    "patch": "@@ -28,7 +28,7 @@\n FileSystem API.<br><br>We'd <em>love</em> to use IndexedDb and support FireFox, but we need\n <a style=\"color:#ddd\" href=\"http://lists.w3.org/Archives/Public/public-webapps/2013JulSep/0081.html\">URL access to the stored data</a> (<a style=\"color:#ddd\" href=\"https://plus.google.com/103079366341809665805/posts/MeN6DUY9vqL\">explanation</a>). \n <br>\n-So we'll add support when the corresponding proposal is implemented.\n+So we'll add support when the corresponding proposal is implemented. Playn Quake 2 demo port made by Stefanhaustein. Port Fixed By Magnus Marks.\n <br>\n <br>\n Source code location: <a style=\"color:#ddd\" href=\"https://code.google.com/p/quake2-playn-port/\">code.google.com/p/quake2-playn-port</a><br>"
  }
]
