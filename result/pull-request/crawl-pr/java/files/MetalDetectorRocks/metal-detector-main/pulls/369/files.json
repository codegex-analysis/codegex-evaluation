[
  {
    "sha": "11216b54be29716b662a2ab166256178129babbf",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java",
    "status": "modified",
    "additions": 15,
    "deletions": 10,
    "changes": 25,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java?ref=029c7186b6b2fbaf587ff3939dba03ceaf556247",
    "patch": "@@ -1,6 +1,7 @@\n package rocks.metaldetector.security;\n \n import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n@@ -16,6 +17,7 @@\n import org.springframework.security.web.authentication.HttpStatusEntryPoint;\n import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\n import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n+import org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices;\n import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;\n import org.springframework.security.web.header.writers.ReferrerPolicyHeaderWriter;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n@@ -24,6 +26,8 @@\n import rocks.metaldetector.security.handler.CustomAuthenticationFailureHandler;\n import rocks.metaldetector.security.handler.CustomAuthenticationSuccessHandler;\n import rocks.metaldetector.security.handler.CustomLogoutSuccessHandler;\n+import rocks.metaldetector.security.rememberme.UserIdBasedJdbcTokenRepository;\n+import rocks.metaldetector.security.rememberme.UserIdBasedPersistentTokenRememberMeServices;\n import rocks.metaldetector.service.user.UserService;\n import rocks.metaldetector.support.Endpoints;\n import rocks.metaldetector.support.SecurityProperties;\n@@ -55,6 +59,9 @@\n   private final SearchQuerySanitizingFilter searchQuerySanitizingFilter;\n   private final CspNonceFilter cspNonceFilter;\n \n+  @Value(\"${security.remember-me-secret}\")\n+  private String rememberMeSecret;\n+\n   @Override\n   protected void configure(HttpSecurity http) throws Exception {\n     http\n@@ -76,9 +83,8 @@ protected void configure(HttpSecurity http) throws Exception {\n       .and()\n       .rememberMe()\n         .tokenValiditySeconds((int) Duration.ofDays(14).toSeconds())\n-        .tokenRepository(jdbcTokenRepository())\n-        .userDetailsService(userService)\n         .key(securityProperties.getRememberMeSecret())\n+        .rememberMeServices(userIdBasedPersistentTokenBasedRememberMeServices())\n       .and()\n       .logout()\n         .logoutUrl(Endpoints.Guest.LOGOUT).permitAll()\n@@ -103,14 +109,6 @@ protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n     auth.userDetailsService(userService).passwordEncoder(bCryptPasswordEncoder);\n   }\n \n-  @Bean\n-  public JdbcTokenRepositoryImpl jdbcTokenRepository() {\n-    JdbcTokenRepositoryImpl jdbcTokenRepository = new JdbcTokenRepositoryImpl();\n-    jdbcTokenRepository.setCreateTableOnStartup(false);\n-    jdbcTokenRepository.setDataSource(dataSource);\n-    return jdbcTokenRepository;\n-  }\n-\n   @Bean\n   public FilterRegistrationBean<CspNonceFilter> nonceFilterFilterRegistrationBean() {\n     FilterRegistrationBean<CspNonceFilter> filterRegistrationBean = new FilterRegistrationBean<>();\n@@ -128,4 +126,11 @@ public JdbcTokenRepositoryImpl jdbcTokenRepository() {\n     filterFilterRegistrationBean.addUrlPatterns(Endpoints.Rest.ARTISTS + Endpoints.Rest.SEARCH);\n     return filterFilterRegistrationBean;\n   }\n+\n+  private PersistentTokenBasedRememberMeServices userIdBasedPersistentTokenBasedRememberMeServices() {\n+    UserIdBasedJdbcTokenRepository tokenRepository = new UserIdBasedJdbcTokenRepository();\n+    tokenRepository.setCreateTableOnStartup(false);\n+    tokenRepository.setDataSource(dataSource);\n+    return new UserIdBasedPersistentTokenRememberMeServices(rememberMeSecret, userService, tokenRepository);\n+  }\n }"
  },
  {
    "sha": "486723c3a2924df6bc6eb8c7de73002ecb993fb3",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepository.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepository.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepository.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepository.java?ref=029c7186b6b2fbaf587ff3939dba03ceaf556247",
    "patch": "@@ -0,0 +1,27 @@\n+package rocks.metaldetector.security.rememberme;\n+\n+import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;\n+import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;\n+\n+import java.util.Objects;\n+\n+public class UserIdBasedJdbcTokenRepository extends JdbcTokenRepositoryImpl {\n+\n+  static final String INSERT_TOKEN_SQL = \"insert into persistent_logins (user_id, username, series, token, last_used) values(?,?,?,?,?)\";\n+  static final String REMOVE_USER_TOKENS_SQL = \"delete from persistent_logins where user_id = ?\";\n+\n+  @Override\n+  public void createNewToken(PersistentRememberMeToken token) {\n+    Objects.requireNonNull(getJdbcTemplate()).update(INSERT_TOKEN_SQL, ((UserIdBasedPersistentRememberMeToken) token).getUserId(), token.getUsername(),\n+                                                     token.getSeries(), token.getTokenValue(), token.getDate());\n+  }\n+\n+  @Override\n+  public void removeUserTokens(String username) {\n+    throw new UnsupportedOperationException(\"removeUserTokensByUserId() has to be called\");\n+  }\n+\n+  public void removeUserTokensByUserId(long userId) {\n+    Objects.requireNonNull(getJdbcTemplate()).update(REMOVE_USER_TOKENS_SQL, userId);\n+  }\n+}"
  },
  {
    "sha": "2ee8f743a14290d6f0910a87ed07500287653bb0",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentRememberMeToken.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentRememberMeToken.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentRememberMeToken.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentRememberMeToken.java?ref=029c7186b6b2fbaf587ff3939dba03ceaf556247",
    "patch": "@@ -0,0 +1,19 @@\n+package rocks.metaldetector.security.rememberme;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;\n+\n+import java.util.Date;\n+\n+@Getter\n+@Setter\n+public class UserIdBasedPersistentRememberMeToken extends PersistentRememberMeToken {\n+\n+  private final long userId;\n+\n+  public UserIdBasedPersistentRememberMeToken(long userId, String username, String series, String tokenValue, Date date) {\n+    super(username, series, tokenValue, date);\n+    this.userId = userId;\n+  }\n+}"
  },
  {
    "sha": "6b31583b62a725aaf5c690a1ab6f650785099b9b",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServices.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServices.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServices.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServices.java?ref=029c7186b6b2fbaf587ff3939dba03ceaf556247",
    "patch": "@@ -0,0 +1,98 @@\n+package rocks.metaldetector.security.rememberme;\n+\n+import org.springframework.core.log.LogMessage;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.web.authentication.rememberme.CookieTheftException;\n+import org.springframework.security.web.authentication.rememberme.InvalidCookieException;\n+import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;\n+import org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices;\n+import org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException;\n+import rocks.metaldetector.persistence.domain.user.UserEntity;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Arrays;\n+import java.util.Date;\n+\n+public class UserIdBasedPersistentTokenRememberMeServices extends PersistentTokenBasedRememberMeServices {\n+\n+  private final UserIdBasedJdbcTokenRepository tokenRepository;\n+\n+  public UserIdBasedPersistentTokenRememberMeServices(String key, UserDetailsService userDetailsService, UserIdBasedJdbcTokenRepository tokenRepository) {\n+    super(key, userDetailsService, tokenRepository);\n+    this.tokenRepository = tokenRepository;\n+  }\n+\n+  @Override\n+  protected void onLoginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) {\n+    UserEntity user = ((UserEntity) successfulAuthentication.getPrincipal());\n+    this.logger.debug(LogMessage.format(\"Creating new persistent login for user %s\", user.getUsername()));\n+    PersistentRememberMeToken persistentToken = new UserIdBasedPersistentRememberMeToken(user.getId(), user.getUsername(), generateSeriesData(),\n+                                                                                         generateTokenData(), new Date());\n+\n+    try {\n+      this.tokenRepository.createNewToken(persistentToken);\n+      addCookie(persistentToken, request, response);\n+    }\n+    catch (Exception ex) {\n+      this.logger.error(\"Failed to save persistent token \", ex);\n+    }\n+  }\n+\n+  @Override\n+  protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response) {\n+    if (cookieTokens.length != 2) {\n+      throw new InvalidCookieException(\"Cookie token did not contain \" + 2 + \" tokens, but contained '\"\n+                                       + Arrays.asList(cookieTokens) + \"'\");\n+    }\n+    String presentedSeries = cookieTokens[0];\n+    String presentedToken = cookieTokens[1];\n+    UserIdBasedPersistentRememberMeToken token = (UserIdBasedPersistentRememberMeToken) this.tokenRepository.getTokenForSeries(presentedSeries);\n+    if (token == null) {\n+      // No series match, so we can't authenticate using this cookie\n+      throw new RememberMeAuthenticationException(\"No persistent token found for series id: \" + presentedSeries);\n+    }\n+    // We have a match for this user/series combination\n+    if (!presentedToken.equals(token.getTokenValue())) {\n+      // Token doesn't match series value. Delete all logins for this user and throw\n+      // an exception to warn them.\n+      this.tokenRepository.removeUserTokensByUserId(token.getUserId());\n+      throw new CookieTheftException(this.messages.getMessage(\n+          \"PersistentTokenBasedRememberMeServices.cookieStolen\",\n+          \"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.\"));\n+    }\n+    if (token.getDate().getTime() + getTokenValiditySeconds() * 1000L < System.currentTimeMillis()) {\n+      throw new RememberMeAuthenticationException(\"Remember-me login has expired\");\n+    }\n+    // Token also matches, so login is valid. Update the token value, keeping the\n+    // *same* series number.\n+    this.logger.debug(LogMessage.format(\"Refreshing persistent login token for user '%s', series '%s'\",\n+                                        token.getUsername(), token.getSeries()));\n+    PersistentRememberMeToken newToken = new UserIdBasedPersistentRememberMeToken(token.getUserId(), token.getUsername(), token.getSeries(),\n+                                                                                  generateTokenData(), new Date());\n+    try {\n+      this.tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate());\n+      addCookie(newToken, request, response);\n+    }\n+    catch (Exception ex) {\n+      this.logger.error(\"Failed to update token: \", ex);\n+      throw new RememberMeAuthenticationException(\"Autologin failed due to data access problem\");\n+    }\n+    return getUserDetailsService().loadUserByUsername(token.getUsername());\n+  }\n+\n+  @Override\n+  public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {\n+    if (authentication != null) {\n+      this.tokenRepository.removeUserTokensByUserId(((UserEntity) authentication.getPrincipal()).getId());\n+    }\n+    cancelCookie(request, response);\n+  }\n+\n+  private void addCookie(PersistentRememberMeToken token, HttpServletRequest request, HttpServletResponse response) {\n+    setCookie(new String[] {token.getSeries(), token.getTokenValue()}, getTokenValiditySeconds(), request,\n+              response);\n+  }\n+}"
  },
  {
    "sha": "345cf1db8093f43543f5b968e1054c317dab44a4",
    "filename": "webapp/src/main/resources/db/migration/v4_0__persistent_logins.sql",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/resources/db/migration/v4_0__persistent_logins.sql",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/main/resources/db/migration/v4_0__persistent_logins.sql",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/resources/db/migration/v4_0__persistent_logins.sql?ref=029c7186b6b2fbaf587ff3939dba03ceaf556247",
    "patch": "@@ -0,0 +1,9 @@\n+-- Creation Date: 2021-03-11\n+-- Description:\n+-- - add column user_id to persistent logins table\n+\n+truncate table persistent_logins;\n+\n+alter table persistent_logins add column user_id bigint not null default 0;\n+\n+alter table persistent_logins alter column user_id drop default;"
  },
  {
    "sha": "3c950bdbbc608327fddab90641783932153b73c2",
    "filename": "webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepositoryTest.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepositoryTest.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedJdbcTokenRepositoryTest.java?ref=029c7186b6b2fbaf587ff3939dba03ceaf556247",
    "patch": "@@ -0,0 +1,73 @@\n+package rocks.metaldetector.security.rememberme;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+import java.util.Date;\n+\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static rocks.metaldetector.security.rememberme.UserIdBasedJdbcTokenRepository.INSERT_TOKEN_SQL;\n+import static rocks.metaldetector.security.rememberme.UserIdBasedJdbcTokenRepository.REMOVE_USER_TOKENS_SQL;\n+\n+@ExtendWith(MockitoExtension.class)\n+class UserIdBasedJdbcTokenRepositoryTest implements WithAssertions {\n+\n+  private final UserIdBasedJdbcTokenRepository underTest = new UserIdBasedJdbcTokenRepository();\n+\n+  @Mock\n+  private JdbcTemplate jdbcTemplate;\n+\n+  @BeforeEach\n+  void setup() {\n+    underTest.setJdbcTemplate(jdbcTemplate);\n+  }\n+\n+  @AfterEach\n+  void tearDown() {\n+    reset(jdbcTemplate);\n+  }\n+\n+  @Test\n+  @DisplayName(\"jdbcTemplate is called with correct parameters on create\")\n+  void test_create_token() {\n+    // given\n+    var token = new UserIdBasedPersistentRememberMeToken(1L, \"username\", \"series\", \"token\", new Date());\n+\n+    // when\n+    underTest.createNewToken(token);\n+\n+    // then\n+    verify(jdbcTemplate).update(INSERT_TOKEN_SQL, token.getUserId(), token.getUsername(), token.getSeries(), token.getTokenValue(), token.getDate());\n+  }\n+\n+  @Test\n+  @DisplayName(\"jdbcTemplate is called with correct parameters on removeById\")\n+  void test_remove_tokens_by_id() {\n+    // given\n+    var userId = 1L;\n+\n+    // when\n+    underTest.removeUserTokensByUserId(userId);\n+\n+    // then\n+    verify(jdbcTemplate).update(REMOVE_USER_TOKENS_SQL, userId);\n+  }\n+\n+  @Test\n+  @DisplayName(\"Exception is thrown on removeTokens\")\n+  void test_exception_on_remove_tokens() {\n+    // when\n+    var throwable = catchThrowable(() -> underTest.removeUserTokens(\"username\"));\n+\n+    // then\n+    assertThat(throwable).isInstanceOf(UnsupportedOperationException.class);\n+  }\n+}"
  },
  {
    "sha": "7b1666886a1325caca3dc626d098b0b11fb76b47",
    "filename": "webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServicesTest.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServicesTest.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/029c7186b6b2fbaf587ff3939dba03ceaf556247/webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServicesTest.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/test/java/rocks/metaldetector/security/rememberme/UserIdBasedPersistentTokenRememberMeServicesTest.java?ref=029c7186b6b2fbaf587ff3939dba03ceaf556247",
    "patch": "@@ -0,0 +1,125 @@\n+package rocks.metaldetector.security.rememberme;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.web.authentication.rememberme.CookieTheftException;\n+import rocks.metaldetector.persistence.domain.user.UserEntity;\n+\n+import java.util.Date;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class UserIdBasedPersistentTokenRememberMeServicesTest implements WithAssertions {\n+\n+  private UserIdBasedPersistentTokenRememberMeServices underTest;\n+\n+  @Mock\n+  private UserDetailsService userDetailsService;\n+\n+  @Mock\n+  private UserIdBasedJdbcTokenRepository tokenRepository;\n+\n+  @BeforeEach\n+  void setup() {\n+    underTest = new UserIdBasedPersistentTokenRememberMeServices(\"key\", userDetailsService, tokenRepository);\n+  }\n+\n+  @AfterEach\n+  void tearDown() {\n+    reset(userDetailsService, tokenRepository);\n+  }\n+\n+  @Test\n+  @DisplayName(\"tokenRepository is called on loginSuccess\")\n+  void test_token_repository_called_on_login_success() {\n+    // given\n+    ArgumentCaptor<UserIdBasedPersistentRememberMeToken> argumentCaptor = ArgumentCaptor.forClass(UserIdBasedPersistentRememberMeToken.class);\n+    var authentication = mock(Authentication.class);\n+    var user = mock(UserEntity.class);\n+    doReturn(user).when(authentication).getPrincipal();\n+    doReturn(\"username\").when(user).getUsername();\n+    doReturn(1L).when(user).getId();\n+\n+    // when\n+    underTest.onLoginSuccess(new MockHttpServletRequest(), new MockHttpServletResponse(), authentication);\n+\n+    // then\n+    verify(tokenRepository).createNewToken(argumentCaptor.capture());\n+\n+    var token = argumentCaptor.getValue();\n+    assertThat(token.getUserId()).isEqualTo(user.getId());\n+    assertThat(token.getUsername()).isEqualTo(user.getUsername());\n+    assertThat(token.getSeries()).isNotBlank();\n+    assertThat(token.getTokenValue()).isNotBlank();\n+    assertThat(token.getDate()).isCloseTo(new Date(), 1000L);\n+  }\n+\n+  @Test\n+  @DisplayName(\"All tokens for user are deleted if they don't match\")\n+  void test_tokens_deleted_if_not_matching() {\n+    // given\n+    var cookieTokens = new String[] {\"series\", \"token\"};\n+    var notMatchingToken = new UserIdBasedPersistentRememberMeToken(1L, \"username\", \"otherSeries\", \"otherToken\", new Date());\n+    doReturn(notMatchingToken).when(tokenRepository).getTokenForSeries(any());\n+\n+    // when\n+    var throwable = catchThrowable(() -> underTest.processAutoLoginCookie(cookieTokens, new MockHttpServletRequest(), new MockHttpServletResponse()));\n+\n+    // then\n+    verify(tokenRepository).removeUserTokensByUserId(notMatchingToken.getUserId());\n+    assertThat(throwable).isInstanceOf(CookieTheftException.class);\n+  }\n+\n+  @Test\n+  @DisplayName(\"On successful login token is updated with same series value\")\n+  void test_token_is_updated() {\n+    // given\n+    ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n+    var cookieTokens = new String[] {\"series\", \"token\"};\n+    var token = new UserIdBasedPersistentRememberMeToken(1L, \"username\", \"series\", \"token\", new Date());\n+    doReturn(token).when(tokenRepository).getTokenForSeries(any());\n+\n+    // when\n+    underTest.processAutoLoginCookie(cookieTokens, new MockHttpServletRequest(), new MockHttpServletResponse());\n+\n+    // then\n+    verify(tokenRepository).updateToken(argumentCaptor.capture(), argumentCaptor.capture(), any());\n+\n+    var arguments = argumentCaptor.getAllValues();\n+    assertThat(arguments.size()).isEqualTo(2);\n+    assertThat(arguments.get(0)).isEqualTo(token.getSeries());\n+    assertThat(arguments.get(1)).isNotEqualTo(token.getTokenValue());\n+  }\n+\n+  @Test\n+  @DisplayName(\"On logout all tokens for userId are deleted\")\n+  void test_tokens_are_deleted() {\n+    // given\n+    var authentication = mock(Authentication.class);\n+    var user = mock(UserEntity.class);\n+    doReturn(user).when(authentication).getPrincipal();\n+    doReturn(1L).when(user).getId();\n+\n+    // when\n+    underTest.logout(new MockHttpServletRequest(), new MockHttpServletResponse(), authentication);\n+\n+    // then\n+    verify(tokenRepository).removeUserTokensByUserId(user.getId());\n+  }\n+}\n\\ No newline at end of file"
  }
]
