[
  {
    "sha": "fa18741598dc72b1a27e5ebf9c6ace0f125fde14",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/build.gradle",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/build.gradle",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/build.gradle?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -7,6 +7,7 @@ buildscript {\n     commonsCodecVersion = \"1.15\"\n     datatablesVersion = \"1.10.23\"\n     ehcacheVersion = \"3.9.2\"\n+    esapiVersion = \"2.2.2.0\"\n     flywayVersion = \"7.7.0\"\n     h2Version = \"1.4.200\"\n     httpClientVersion = \"4.5.13\"\n@@ -51,7 +52,8 @@ ext {\n                         \"org.jboss.logging:jboss-logging:3.4.1.Final\",\n                         \"net.bytebuddy:byte-buddy:1.10.22\",\n                         \"org.javassist:javassist:3.27.0-GA\",\n-                        \"org.webjars:jquery:3.6.0\"]\n+                        \"org.webjars:jquery:3.6.0\",\n+                        \"commons-io:commons-io:2.6\"]\n   dependencyGroupVersions = [\"org.springframework\"           : \"5.3.4\",\n                              \"org.springframework.security\"  : springSecurityVersion,\n                              \"org.springframework.boot\"      : springBootVersion,"
  },
  {
    "sha": "8fd5f17c7f2a21ee94b97f018e1812abed5324ea",
    "filename": "webapp/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/build.gradle",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/build.gradle",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/build.gradle?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -25,6 +25,7 @@ dependencies {\n   implementation \"org.modelmapper:modelmapper:$modelmapperVersion\"\n   implementation \"org.ehcache:ehcache:$ehcacheVersion\"\n   implementation \"org.jsoup:jsoup:$jsoupVersion\"\n+  implementation \"org.owasp.esapi:esapi:$esapiVersion\"\n \n   runtimeOnly \"org.webjars:webjars-locator-core:$webjarsLocatorVersion\"\n   runtimeOnly \"org.webjars:bootstrap:$bootstrapVersion\""
  },
  {
    "sha": "eb9abd2f0cc6c98f9628e823b06b491e625bd176",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/SearchQuerySanitizingFilter.java",
    "status": "removed",
    "additions": 0,
    "deletions": 42,
    "changes": 42,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/c60e09bd32b7bb009befca5906dd6fdc80267364/webapp/src/main/java/rocks/metaldetector/security/SearchQuerySanitizingFilter.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/c60e09bd32b7bb009befca5906dd6fdc80267364/webapp/src/main/java/rocks/metaldetector/security/SearchQuerySanitizingFilter.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/SearchQuerySanitizingFilter.java?ref=c60e09bd32b7bb009befca5906dd6fdc80267364",
    "patch": "@@ -1,42 +0,0 @@\n-package rocks.metaldetector.security;\n-\n-import lombok.AllArgsConstructor;\n-import org.jsoup.Jsoup;\n-import org.jsoup.safety.Whitelist;\n-import org.springframework.stereotype.Component;\n-\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletRequestWrapper;\n-import java.io.IOException;\n-\n-@Component\n-@AllArgsConstructor\n-public class SearchQuerySanitizingFilter implements Filter {\n-\n-  static final String PARAMETER_NAME = \"query\";\n-\n-  @Override\n-  public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n-    filterChain.doFilter(new QuerySanitizingRequestWrapper((HttpServletRequest) servletRequest), servletResponse);\n-  }\n-\n-  private static class QuerySanitizingRequestWrapper extends HttpServletRequestWrapper {\n-\n-    private QuerySanitizingRequestWrapper(HttpServletRequest request) {\n-      super(request);\n-    }\n-\n-    @Override\n-    public String[] getParameterValues(String name) {\n-      if (name.equals(PARAMETER_NAME)) {\n-        return new String[] {Jsoup.clean(super.getParameter(name), Whitelist.none())};\n-      }\n-      return super.getParameterValues(name);\n-    }\n-  }\n-}"
  },
  {
    "sha": "fbc6e005b549d6ddd55b85e1c324dfeb2923636d",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/SecurityConfig.java?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -52,7 +52,7 @@\n   private final DataSource dataSource;\n   private final BCryptPasswordEncoder bCryptPasswordEncoder;\n   private final SecurityProperties securityProperties;\n-  private final SearchQuerySanitizingFilter searchQuerySanitizingFilter;\n+  private final XSSFilter xssFilter;\n   private final CspNonceFilter cspNonceFilter;\n \n   @Override\n@@ -112,7 +112,7 @@ public JdbcTokenRepositoryImpl jdbcTokenRepository() {\n   }\n \n   @Bean\n-  public FilterRegistrationBean<CspNonceFilter> nonceFilterFilterRegistrationBean() {\n+  public FilterRegistrationBean<CspNonceFilter> nonceFilterRegistrationBean() {\n     FilterRegistrationBean<CspNonceFilter> filterRegistrationBean = new FilterRegistrationBean<>();\n     filterRegistrationBean.setFilter(cspNonceFilter);\n     filterRegistrationBean.addUrlPatterns(Endpoints.Frontend.ALL_FRONTEND_PAGES.toArray(new String[0]));\n@@ -122,10 +122,7 @@ public JdbcTokenRepositoryImpl jdbcTokenRepository() {\n   }\n \n   @Bean\n-  public FilterRegistrationBean<SearchQuerySanitizingFilter> sanitizingFilterFilterRegistrationBean() {\n-    FilterRegistrationBean<SearchQuerySanitizingFilter> filterFilterRegistrationBean = new FilterRegistrationBean<>();\n-    filterFilterRegistrationBean.setFilter(searchQuerySanitizingFilter);\n-    filterFilterRegistrationBean.addUrlPatterns(Endpoints.Rest.ARTISTS + Endpoints.Rest.SEARCH);\n-    return filterFilterRegistrationBean;\n+  public FilterRegistrationBean<XSSFilter> xssFilterRegistrationBean() {\n+    return new FilterRegistrationBean<>(xssFilter);\n   }\n }"
  },
  {
    "sha": "ae648b1e4af1b3d2b74e3d84ff8a644e1f2ff923",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/XSSFilter.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/XSSFilter.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/XSSFilter.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/XSSFilter.java?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -0,0 +1,33 @@\n+package rocks.metaldetector.security;\n+\n+import lombok.AllArgsConstructor;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+\n+@Component\n+@AllArgsConstructor\n+@Order(Ordered.HIGHEST_PRECEDENCE)\n+public class XSSFilter implements Filter {\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+    XSSRequestWrapper wrappedRequest = new XSSRequestWrapper((HttpServletRequest) request);\n+    String body = IOUtils.toString(wrappedRequest.getReader());\n+    if (!StringUtils.isBlank(body)) {\n+      body = XSSUtils.stripXSS(body);\n+      wrappedRequest.resetInputStream(body.getBytes());\n+    }\n+    chain.doFilter(wrappedRequest, response);\n+  }\n+}"
  },
  {
    "sha": "e490ec491c8f61be1624c6e6c2c5140d79ddd4e2",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/XSSRequestWrapper.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/XSSRequestWrapper.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/XSSRequestWrapper.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/XSSRequestWrapper.java?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -0,0 +1,118 @@\n+package rocks.metaldetector.security;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import javax.servlet.ReadListener;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+public class XSSRequestWrapper extends HttpServletRequestWrapper {\n+\n+  private final HttpServletRequest request;\n+  private final ResettableServletInputStream servletStream;\n+  private byte[] rawData;\n+\n+  public XSSRequestWrapper(HttpServletRequest request) {\n+    super(request);\n+    this.request = request;\n+    this.servletStream = new ResettableServletInputStream();\n+  }\n+\n+  public void resetInputStream(byte[] newRawData) {\n+    rawData = newRawData;\n+    servletStream.stream = new ByteArrayInputStream(newRawData);\n+  }\n+\n+  @Override\n+  public ServletInputStream getInputStream() throws IOException {\n+    if (rawData == null) {\n+      rawData = IOUtils.toByteArray(this.request.getReader(), Charset.defaultCharset());\n+      servletStream.stream = new ByteArrayInputStream(rawData);\n+    }\n+    return servletStream;\n+  }\n+\n+  @Override\n+  public BufferedReader getReader() throws IOException {\n+    if (rawData == null) {\n+      rawData = IOUtils.toByteArray(this.request.getReader(), Charset.defaultCharset());\n+      servletStream.stream = new ByteArrayInputStream(rawData);\n+    }\n+    return new BufferedReader(new InputStreamReader(servletStream));\n+  }\n+\n+  @Override\n+  public String[] getParameterValues(String parameter) {\n+    String[] values = super.getParameterValues(parameter);\n+    if (values == null) {\n+      return null;\n+    }\n+    int count = values.length;\n+    String[] strippedValues = new String[count];\n+    for (int i = 0; i < count; i++) {\n+      strippedValues[i] = XSSUtils.stripXSS(values[i]);\n+    }\n+    return strippedValues;\n+  }\n+\n+  @Override\n+  public String getParameter(String parameter) {\n+    String value = super.getParameter(parameter);\n+    return XSSUtils.stripXSS(value);\n+  }\n+\n+  @Override\n+  public String getHeader(String name) {\n+    String value = super.getHeader(name);\n+    return XSSUtils.stripXSS(value);\n+  }\n+\n+  @Override\n+  public Enumeration<String> getHeaders(String name) {\n+    List<String> result = new ArrayList<>();\n+    Enumeration<String> headers = super.getHeaders(name);\n+    while (headers.hasMoreElements()) {\n+      String header = headers.nextElement();\n+      String[] tokens = header.split(\",\");\n+      for (String token : tokens) {\n+        result.add(XSSUtils.stripXSS(token));\n+      }\n+    }\n+    return Collections.enumeration(result);\n+  }\n+\n+  private static class ResettableServletInputStream extends ServletInputStream {\n+\n+    private InputStream stream;\n+\n+    @Override\n+    public int read() throws IOException {\n+      return stream.read();\n+    }\n+\n+    @Override\n+    public boolean isFinished() {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean isReady() {\n+      return false;\n+    }\n+\n+    @Override\n+    public void setReadListener(ReadListener readListener) {\n+    }\n+  }\n+}"
  },
  {
    "sha": "3478cc6e61f16e94559e0deb3d9cdb6b980f3630",
    "filename": "webapp/src/main/java/rocks/metaldetector/security/XSSUtils.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/XSSUtils.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/java/rocks/metaldetector/security/XSSUtils.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/java/rocks/metaldetector/security/XSSUtils.java?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -0,0 +1,18 @@\n+package rocks.metaldetector.security;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.safety.Whitelist;\n+import org.owasp.esapi.ESAPI;\n+\n+public class XSSUtils {\n+\n+  public static String stripXSS(String value) {\n+    if (value == null) {\n+      return null;\n+    }\n+    value = ESAPI.encoder()\n+        .canonicalize(value)\n+        .replaceAll(\"\\0\", \"\");\n+    return Jsoup.clean(value, Whitelist.none());\n+  }\n+}"
  },
  {
    "sha": "a2746a4dbc6b0d12677be0ade11c372a038921f2",
    "filename": "webapp/src/main/resources/ESAPI.properties",
    "status": "added",
    "additions": 545,
    "deletions": 0,
    "changes": 545,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/resources/ESAPI.properties",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/main/resources/ESAPI.properties",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/main/resources/ESAPI.properties?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -0,0 +1,545 @@\n+#\n+# OWASP Enterprise Security API (ESAPI) Properties file -- PRODUCTION Version\n+#\n+# This file is part of the Open Web Application Security Project (OWASP)\n+# Enterprise Security API (ESAPI) project. For details, please see\n+# https://owasp.org/www-project-enterprise-security-api/\n+#\n+# Copyright (c) 2008,2009 - The OWASP Foundation\n+#\n+# DISCUSS: This may cause a major backwards compatibility issue, etc. but\n+#\t\t   from a name space perspective, we probably should have prefaced\n+#\t\t   all the property names with ESAPI or at least OWASP. Otherwise\n+#\t\t   there could be problems is someone loads this properties file into\n+#\t\t   the System properties.  We could also put this file into the\n+#\t\t   esapi.jar file (perhaps as a ResourceBundle) and then allow an external\n+#\t\t   ESAPI properties be defined that would overwrite these defaults.\n+#\t\t   That keeps the application's properties relatively simple as usually\n+#\t\t   they will only want to override a few properties. If looks like we\n+#\t\t   already support multiple override levels of this in the\n+#\t\t   DefaultSecurityConfiguration class, but I'm suggesting placing the\n+#\t\t   defaults in the esapi.jar itself. That way, if the jar is signed,\n+#\t\t   we could detect if those properties had been tampered with. (The\n+#\t\t   code to check the jar signatures is pretty simple... maybe 70-90 LOC,\n+#\t\t   but off course there is an execution penalty (similar to the way\n+#\t\t   that the separate sunjce.jar used to be when a class from it was\n+#\t\t   first loaded). Thoughts?\n+###############################################################################\n+#\n+# WARNING: Operating system protection should be used to lock down the .esapi\n+# resources directory and all the files inside and all the directories all the\n+# way up to the root directory of the file system.  Note that if you are using\n+# file-based implementations, that some files may need to be read-write as they\n+# get updated dynamically.\n+#\n+#===========================================================================\n+# ESAPI Configuration\n+#\n+# If true, then print all the ESAPI properties set here when they are loaded.\n+# If false, they are not printed. Useful to reduce output when running JUnit tests.\n+# If you need to troubleshoot a properties related problem, turning this on may help.\n+# This is 'false' in the src/test/resources/.esapi version. It is 'true' by\n+# default for reasons of backward compatibility with earlier ESAPI versions.\n+ESAPI.printProperties=true\n+\n+# ESAPI is designed to be easily extensible. You can use the reference implementation\n+# or implement your own providers to take advantage of your enterprise's security\n+# infrastructure. The functions in ESAPI are referenced using the ESAPI locator, like:\n+#\n+#    String ciphertext =\n+#\t\tESAPI.encryptor().encrypt(\"Secret message\");   // Deprecated in 2.0\n+#    CipherText cipherText =\n+#\t\tESAPI.encryptor().encrypt(new PlainText(\"Secret message\")); // Preferred\n+#\n+# Below you can specify the classname for the provider that you wish to use in your\n+# application. The only requirement is that it implement the appropriate ESAPI interface.\n+# This allows you to switch security implementations in the future without rewriting the\n+# entire application.\n+#\n+# ExperimentalAccessController requires ESAPI-AccessControlPolicy.xml in .esapi directory\n+ESAPI.AccessControl=org.owasp.esapi.reference.DefaultAccessController\n+# FileBasedAuthenticator requires users.txt file in .esapi directory\n+ESAPI.Authenticator=org.owasp.esapi.reference.FileBasedAuthenticator\n+ESAPI.Encoder=org.owasp.esapi.reference.DefaultEncoder\n+ESAPI.Encryptor=org.owasp.esapi.reference.crypto.JavaEncryptor\n+\n+ESAPI.Executor=org.owasp.esapi.reference.DefaultExecutor\n+ESAPI.HTTPUtilities=org.owasp.esapi.reference.DefaultHTTPUtilities\n+ESAPI.IntrusionDetector=org.owasp.esapi.reference.DefaultIntrusionDetector\n+# Log4JFactory Requires log4j.xml or log4j.properties in classpath - http://www.laliluna.de/log4j-tutorial.html\n+# Note that this is now considered deprecated!\n+ESAPI.Logger=org.owasp.esapi.logging.slf4j.Slf4JLogFactory\n+#ESAPI.Logger=org.owasp.esapi.logging.log4j.Log4JLogFactory\n+#ESAPI.Logger=org.owasp.esapi.logging.java.JavaLogFactory\n+# To use the new SLF4J logger in ESAPI (see GitHub issue #129), set\n+#    ESAPI.Logger=org.owasp.esapi.logging.slf4j.Slf4JLogFactory\n+# and do whatever other normal SLF4J configuration that you normally would do for your application.\n+ESAPI.Randomizer=org.owasp.esapi.reference.DefaultRandomizer\n+ESAPI.Validator=org.owasp.esapi.reference.DefaultValidator\n+\n+#===========================================================================\n+# ESAPI Authenticator\n+#\n+Authenticator.AllowedLoginAttempts=3\n+Authenticator.MaxOldPasswordHashes=13\n+Authenticator.UsernameParameterName=username\n+Authenticator.PasswordParameterName=password\n+# RememberTokenDuration (in days)\n+Authenticator.RememberTokenDuration=14\n+# Session Timeouts (in minutes)\n+Authenticator.IdleTimeoutDuration=20\n+Authenticator.AbsoluteTimeoutDuration=120\n+\n+#===========================================================================\n+# ESAPI Encoder\n+#\n+# ESAPI canonicalizes input before validation to prevent bypassing filters with encoded attacks.\n+# Failure to canonicalize input is a very common mistake when implementing validation schemes.\n+# Canonicalization is automatic when using the ESAPI Validator, but you can also use the\n+# following code to canonicalize data.\n+#\n+#      ESAPI.Encoder().canonicalize( \"%22hello world&#x22;\" );\n+#\n+# Multiple encoding is when a single encoding format is applied multiple times. Allowing\n+# multiple encoding is strongly discouraged.\n+Encoder.AllowMultipleEncoding=false\n+\n+# Mixed encoding is when multiple different encoding formats are applied, or when\n+# multiple formats are nested. Allowing multiple encoding is strongly discouraged.\n+Encoder.AllowMixedEncoding=false\n+\n+# The default list of codecs to apply when canonicalizing untrusted data. The list should include the codecs\n+# for all downstream interpreters or decoders. For example, if the data is likely to end up in a URL, HTML, or\n+# inside JavaScript, then the list of codecs below is appropriate. The order of the list is not terribly important.\n+Encoder.DefaultCodecList=HTMLEntityCodec,PercentCodec,JavaScriptCodec\n+\n+\n+#===========================================================================\n+# ESAPI Encryption\n+#\n+# The ESAPI Encryptor provides basic cryptographic functions with a simplified API.\n+# To get started, generate a new key using java -classpath esapi.jar org.owasp.esapi.reference.crypto.JavaEncryptor\n+# There is not currently any support for key rotation, so be careful when changing your key and salt as it\n+# will invalidate all signed, encrypted, and hashed data.\n+#\n+# WARNING: Not all combinations of algorithms and key lengths are supported.\n+# If you choose to use a key length greater than 128, you MUST download the\n+# unlimited strength policy files and install in the lib directory of your JRE/JDK.\n+# See http://java.sun.com/javase/downloads/index.jsp for more information.\n+#\n+#\t\t***** IMPORTANT: Do NOT forget to replace these with your own values! *****\n+# To calculate these values, you can run:\n+#\t\tjava -classpath esapi.jar org.owasp.esapi.reference.crypto.JavaEncryptor\n+#\n+#Encryptor.MasterKey=\n+#Encryptor.MasterSalt=\n+\n+# Provides the default JCE provider that ESAPI will \"prefer\" for its symmetric\n+# encryption and hashing. (That is it will look to this provider first, but it\n+# will defer to other providers if the requested algorithm is not implemented\n+# by this provider.) If left unset, ESAPI will just use your Java VM's current\n+# preferred JCE provider, which is generally set in the file\n+# \"$JAVA_HOME/jre/lib/security/java.security\".\n+#\n+# The main intent of this is to allow ESAPI symmetric encryption to be\n+# used with a FIPS 140-2 compliant crypto-module. For details, see the section\n+# \"Using ESAPI Symmetric Encryption with FIPS 140-2 Cryptographic Modules\" in\n+# the ESAPI 2.0 Symmetric Encryption User Guide, at:\n+# http://owasp-esapi-java.googlecode.com/svn/trunk/documentation/esapi4java-core-2.0-symmetric-crypto-user-guide.html\n+# However, this property also allows you to easily use an alternate JCE provider\n+# such as \"Bouncy Castle\" without having to make changes to \"java.security\".\n+# See Javadoc for SecurityProviderLoader for further details. If you wish to use\n+# a provider that is not known to SecurityProviderLoader, you may specify the\n+# fully-qualified class name of the JCE provider class that implements\n+# java.security.Provider. If the name contains a '.', this is interpreted as\n+# a fully-qualified class name that implements java.security.Provider.\n+#\n+# NOTE: Setting this property has the side-effect of changing it in your application\n+#       as well, so if you are using JCE in your application directly rather than\n+#       through ESAPI (you wouldn't do that, would you? ;-), it will change the\n+#       preferred JCE provider there as well.\n+#\n+# Default: Keeps the JCE provider set to whatever JVM sets it to.\n+Encryptor.PreferredJCEProvider=\n+\n+# AES is the most widely used and strongest encryption algorithm. This\n+# should agree with your Encryptor.CipherTransformation property.\n+# Warning: This property does not control the default reference implementation for\n+#\t\t   ESAPI 2.0 using JavaEncryptor. Also, this property will be dropped\n+#\t\t   in the future.\n+# @deprecated\n+Encryptor.EncryptionAlgorithm=AES\n+#\t\tFor ESAPI Java 2.0 - New encrypt / decrypt methods use this.\n+Encryptor.CipherTransformation=AES/CBC/PKCS5Padding\n+\n+# Applies to ESAPI 2.0 and later only!\n+# Comma-separated list of cipher modes that provide *BOTH*\n+# confidentiality *AND* message authenticity. (NIST refers to such cipher\n+# modes as \"combined modes\" so that's what we shall call them.) If any of these\n+# cipher modes are used then no MAC is calculated and stored\n+# in the CipherText upon encryption. Likewise, if one of these\n+# cipher modes is used with decryption, no attempt will be made\n+# to validate the MAC contained in the CipherText object regardless\n+# of whether it contains one or not. Since the expectation is that\n+# these cipher modes support support message authenticity already,\n+# injecting a MAC in the CipherText object would be at best redundant.\n+#\n+# Note that as of JDK 1.5, the SunJCE provider does not support *any*\n+# of these cipher modes. Of these listed, only GCM and CCM are currently\n+# NIST approved. YMMV for other JCE providers. E.g., Bouncy Castle supports\n+# GCM and CCM with \"NoPadding\" mode, but not with \"PKCS5Padding\" or other\n+# padding modes.\n+Encryptor.cipher_modes.combined_modes=GCM,CCM,IAPM,EAX,OCB,CWC\n+\n+# Applies to ESAPI 2.0 and later only!\n+# Additional cipher modes allowed for ESAPI 2.0 encryption. These\n+# cipher modes are in _addition_ to those specified by the property\n+# 'Encryptor.cipher_modes.combined_modes'.\n+# Note: We will add support for streaming modes like CFB & OFB once\n+# we add support for 'specified' to the property 'Encryptor.ChooseIVMethod'\n+# (probably in ESAPI 2.1).\n+# DISCUSS: Better name?\n+Encryptor.cipher_modes.additional_allowed=CBC\n+\n+# Default key size to use for cipher specified by Encryptor.EncryptionAlgorithm.\n+# Note that this MUST be a valid key size for the algorithm being used\n+# (as specified by Encryptor.EncryptionAlgorithm). So for example, if AES is used,\n+# it must be 128, 192, or 256. If DESede is chosen, then it must be either 112 or 168.\n+#\n+# Note that 128-bits is almost always sufficient and for AES it appears to be more\n+# somewhat more resistant to related key attacks than is 256-bit AES.)\n+#\n+# Defaults to 128-bits if left blank.\n+#\n+# NOTE: If you use a key size > 128-bits, then you MUST have the JCE Unlimited\n+#       Strength Jurisdiction Policy files installed!!!\n+#\n+Encryptor.EncryptionKeyLength=128\n+\n+# This is the _minimum_ key size (in bits) that we allow with ANY symmetric\n+# cipher for doing encryption. (There is no minimum for decryption.)\n+#\n+# Generally, if you only use one algorithm, this should be set the same as\n+# the Encryptor.EncryptionKeyLength property.\n+Encryptor.MinEncryptionKeyLength=128\n+\n+# Because 2.x uses CBC mode by default, it requires an initialization vector (IV).\n+# (All cipher modes except ECB require an IV.) There are two choices: we can either\n+# use a fixed IV known to both parties or allow ESAPI to choose a random IV. While\n+# the IV does not need to be hidden from adversaries, it is important that the\n+# adversary not be allowed to choose it. Also, random IVs are generally much more\n+# secure than fixed IVs. (In fact, it is essential that feed-back cipher modes\n+# such as CFB and OFB use a different IV for each encryption with a given key so\n+# in such cases, random IVs are much preferred. By default, ESAPI 2.0 uses random\n+# IVs. If you wish to use 'fixed' IVs, set 'Encryptor.ChooseIVMethod=fixed' and\n+# uncomment the Encryptor.fixedIV.\n+#\n+# Valid values:\t\trandom|fixed|specified\t\t'specified' not yet implemented; planned for 2.3\n+#                                               'fixed' is deprecated as of 2.2\n+#                                               and will be removed in 2.3.\n+Encryptor.ChooseIVMethod=random\n+\n+\n+# If you choose to use a fixed IV, then you must place a fixed IV here that\n+# is known to all others who are sharing your secret key. The format should\n+# be a hex string that is the same length as the cipher block size for the\n+# cipher algorithm that you are using. The following is an *example* for AES\n+# from an AES test vector for AES-128/CBC as described in:\n+# NIST Special Publication 800-38A (2001 Edition)\n+# \"Recommendation for Block Cipher Modes of Operation\".\n+# (Note that the block size for AES is 16 bytes == 128 bits.)\n+#\n+#   @Deprecated -- fixed IVs are deprecated as of the 2.2 release and support\n+#                  will be removed in the next release (tentatively, 2.3).\n+#                  If you MUST use this, at least replace this IV with one\n+#                  that your legacy application was using.\n+Encryptor.fixedIV=0x000102030405060708090a0b0c0d0e0f\n+\n+# Whether or not CipherText should use a message authentication code (MAC) with it.\n+# This prevents an adversary from altering the IV as well as allowing a more\n+# fool-proof way of determining the decryption failed because of an incorrect\n+# key being supplied. This refers to the \"separate\" MAC calculated and stored\n+# in CipherText, not part of any MAC that is calculated as a result of a\n+# \"combined mode\" cipher mode.\n+#\n+# If you are using ESAPI with a FIPS 140-2 cryptographic module, you *must* also\n+# set this property to false. That is because ESAPI takes the master key and\n+# derives 2 keys from it--a key for the MAC and a key for encryption--and\n+# because ESAPI is not itself FIPS 140-2 verified such intermediary aterations\n+# to keys from FIPS approved sources would have the effect of making your FIPS\n+# approved key generation and thus your FIPS approved JCE provider unapproved!\n+# More details in\n+#       documentation/esapi4java-core-2.0-readme-crypto-changes.html\n+#       documentation/esapi4java-core-2.0-symmetric-crypto-user-guide.html\n+# You have been warned.\n+Encryptor.CipherText.useMAC=true\n+\n+# Whether or not the PlainText object may be overwritten and then marked\n+# eligible for garbage collection. If not set, this is still treated as 'true'.\n+Encryptor.PlainText.overwrite=true\n+\n+# Do not use DES except in a legacy situations. 56-bit is way too small key size.\n+#Encryptor.EncryptionKeyLength=56\n+#Encryptor.MinEncryptionKeyLength=56\n+#Encryptor.EncryptionAlgorithm=DES\n+\n+# TripleDES is considered strong enough for most purposes.\n+#\tNote:\tThere is also a 112-bit version of DESede. Using the 168-bit version\n+#\t\t\trequires downloading the special jurisdiction policy from Sun.\n+#Encryptor.EncryptionKeyLength=168\n+#Encryptor.MinEncryptionKeyLength=112\n+#Encryptor.EncryptionAlgorithm=DESede\n+\n+Encryptor.HashAlgorithm=SHA-512\n+Encryptor.HashIterations=1024\n+Encryptor.DigitalSignatureAlgorithm=SHA1withDSA\n+Encryptor.DigitalSignatureKeyLength=1024\n+Encryptor.RandomAlgorithm=SHA1PRNG\n+Encryptor.CharacterEncoding=UTF-8\n+\n+# This is the Pseudo Random Function (PRF) that ESAPI's Key Derivation Function\n+# (KDF) normally uses. Note this is *only* the PRF used for ESAPI's KDF and\n+# *not* what is used for ESAPI's MAC. (Currently, HmacSHA1 is always used for\n+# the MAC, mostly to keep the overall size at a minimum.)\n+#\n+# Currently supported choices for JDK 1.5 and 1.6 are:\n+#\tHmacSHA1 (160 bits), HmacSHA256 (256 bits), HmacSHA384 (384 bits), and\n+#\tHmacSHA512 (512 bits).\n+# Note that HmacMD5 is *not* supported for the PRF used by the KDF even though\n+# the JDKs support it.  See the ESAPI 2.0 Symmetric Encryption User Guide\n+# further details.\n+Encryptor.KDF.PRF=HmacSHA256\n+#===========================================================================\n+# ESAPI HttpUtilties\n+#\n+# The HttpUtilities provide basic protections to HTTP requests and responses. Primarily these methods\n+# protect against malicious data from attackers, such as unprintable characters, escaped characters,\n+# and other simple attacks. The HttpUtilities also provides utility methods for dealing with cookies,\n+# headers, and CSRF tokens.\n+#\n+# Default file upload location (remember to escape backslashes with \\\\)\n+HttpUtilities.UploadDir=C:\\\\ESAPI\\\\testUpload\n+HttpUtilities.UploadTempDir=C:\\\\temp\n+# Force flags on cookies, if you use HttpUtilities to set cookies\n+HttpUtilities.ForceHttpOnlySession=false\n+HttpUtilities.ForceSecureSession=false\n+HttpUtilities.ForceHttpOnlyCookies=true\n+HttpUtilities.ForceSecureCookies=true\n+# Maximum size of HTTP header key--the validator regex may have additional values.\n+HttpUtilities.MaxHeaderNameSize=256\n+# Maximum size of HTTP header value--the validator regex may have additional values.\n+HttpUtilities.MaxHeaderValueSize=4096\n+# Maximum size of JSESSIONID for the application--the validator regex may have additional values.\n+HttpUtilities.HTTPJSESSIONIDLENGTH=50\n+# Maximum length of a URL (see https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers)\n+HttpUtilities.URILENGTH=2000\n+# Maximum length of a redirect\n+HttpUtilities.maxRedirectLength=512\n+# Maximum length for an http scheme\n+HttpUtilities.HTTPSCHEMELENGTH=10\n+# Maximum length for an http host\n+HttpUtilities.HTTPHOSTLENGTH=100\n+# Maximum length for an http path\n+HttpUtilities.HTTPPATHLENGTH=150\n+#Maximum length for a context path\n+HttpUtilities.contextPathLength=150\n+#Maximum length for an httpServletPath\n+HttpUtilities.HTTPSERVLETPATHLENGTH=100\n+#Maximum length for an http query parameter name\n+HttpUtilities.httpQueryParamNameLength=100\n+#Maximum length for an http query parameter -- old default was 2000, but that's the max length for a URL...\n+HttpUtilities.httpQueryParamValueLength=500\n+# File upload configuration\n+HttpUtilities.ApprovedUploadExtensions=.pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.rtf,.txt,.jpg,.png\n+HttpUtilities.MaxUploadFileBytes=500000000\n+# Using UTF-8 throughout your stack is highly recommended. That includes your database driver,\n+# container, and any other technologies you may be using. Failure to do this may expose you\n+# to Unicode transcoding injection attacks. Use of UTF-8 does not hinder internationalization.\n+HttpUtilities.ResponseContentType=text/html; charset=UTF-8\n+# This is the name of the cookie used to represent the HTTP session\n+# Typically this will be the default \"JSESSIONID\"\n+HttpUtilities.HttpSessionIdName=JSESSIONID\n+#Sets whether or not we will overwrite http status codes to 200.\n+HttpUtilities.OverwriteStatusCodes=true\n+#Sets the application's base character encoding.  This is forked from the Java Encryptor property.\n+HttpUtilities.CharacterEncoding=UTF-8\n+\n+#===========================================================================\n+# ESAPI Executor\n+# CHECKME - This should be made OS independent. Don't use unsafe defaults.\n+# # Examples only -- do NOT blindly copy!\n+#   For Windows:\n+#     Executor.WorkingDirectory=C:\\\\Windows\\\\Temp\n+#     Executor.ApprovedExecutables=C:\\\\Windows\\\\System32\\\\cmd.exe,C:\\\\Windows\\\\System32\\\\runas.exe\n+#   For *nux, MacOS:\n+#     Executor.WorkingDirectory=/tmp\n+#     Executor.ApprovedExecutables=/bin/bash\n+Executor.WorkingDirectory=\n+Executor.ApprovedExecutables=\n+\n+\n+#===========================================================================\n+# ESAPI Logging\n+# Set the application name if these logs are combined with other applications\n+Logger.ApplicationName=ExampleApplication\n+# If you use an HTML log viewer that does not properly HTML escape log data, you can set LogEncodingRequired to true\n+Logger.LogEncodingRequired=false\n+# Determines whether ESAPI should log the application name. This might be clutter in some single-server/single-app environments.\n+Logger.LogApplicationName=true\n+# Determines whether ESAPI should log the server IP and port. This might be clutter in some single-server environments.\n+Logger.LogServerIP=true\n+# LogFileName, the name of the logging file. Provide a full directory path (e.g., C:\\\\ESAPI\\\\ESAPI_logging_file) if you\n+# want to place it in a specific directory.\n+Logger.LogFileName=ESAPI_logging_file\n+# MaxLogFileSize, the max size (in bytes) of a single log file before it cuts over to a new one (default is 10,000,000)\n+Logger.MaxLogFileSize=10000000\n+# Determines whether ESAPI should log the user info.\n+Logger.UserInfo=true\n+# Determines whether ESAPI should log the session id and client IP.\n+Logger.ClientInfo=true\n+\n+#===========================================================================\n+# ESAPI Intrusion Detection\n+#\n+# Each event has a base to which .count, .interval, and .action are added\n+# The IntrusionException will fire if we receive \"count\" events within \"interval\" seconds\n+# The IntrusionDetector is configurable to take the following actions: log, logout, and disable\n+#  (multiple actions separated by commas are allowed e.g. event.test.actions=log,disable\n+#\n+# Custom Events\n+# Names must start with \"event.\" as the base\n+# Use IntrusionDetector.addEvent( \"test\" ) in your code to trigger \"event.test\" here\n+# You can also disable intrusion detection completely by changing\n+# the following parameter to true\n+#\n+IntrusionDetector.Disable=false\n+#\n+IntrusionDetector.event.test.count=2\n+IntrusionDetector.event.test.interval=10\n+IntrusionDetector.event.test.actions=disable,log\n+\n+# Exception Events\n+# All EnterpriseSecurityExceptions are registered automatically\n+# Call IntrusionDetector.getInstance().addException(e) for Exceptions that do not extend EnterpriseSecurityException\n+# Use the fully qualified classname of the exception as the base\n+\n+# any intrusion is an attack\n+IntrusionDetector.org.owasp.esapi.errors.IntrusionException.count=1\n+IntrusionDetector.org.owasp.esapi.errors.IntrusionException.interval=1\n+IntrusionDetector.org.owasp.esapi.errors.IntrusionException.actions=log,disable,logout\n+\n+# for test purposes\n+# CHECKME: Shouldn't there be something in the property name itself that designates\n+#\t\t   that these are for testing???\n+IntrusionDetector.org.owasp.esapi.errors.IntegrityException.count=10\n+IntrusionDetector.org.owasp.esapi.errors.IntegrityException.interval=5\n+IntrusionDetector.org.owasp.esapi.errors.IntegrityException.actions=log,disable,logout\n+\n+# rapid validation errors indicate scans or attacks in progress\n+# org.owasp.esapi.errors.ValidationException.count=10\n+# org.owasp.esapi.errors.ValidationException.interval=10\n+# org.owasp.esapi.errors.ValidationException.actions=log,logout\n+\n+# sessions jumping between hosts indicates session hijacking\n+IntrusionDetector.org.owasp.esapi.errors.AuthenticationHostException.count=2\n+IntrusionDetector.org.owasp.esapi.errors.AuthenticationHostException.interval=10\n+IntrusionDetector.org.owasp.esapi.errors.AuthenticationHostException.actions=log,logout\n+\n+\n+#===========================================================================\n+# ESAPI Validation\n+#\n+# The ESAPI Validator works on regular expressions with defined names. You can define names\n+# either here, or you may define application specific patterns in a separate file defined below.\n+# This allows enterprises to specify both organizational standards as well as application specific\n+# validation rules.\n+#\n+# Use '\\p{L}' (without the quotes) within the character class to match\n+# any Unicode LETTER. You can also use a range, like:  \\u00C0-\\u017F\n+# You can also use any of the regex flags as documented at\n+# https://docs.oracle.com/javase/tutorial/essential/regex/pattern.html, e.g. (?u)\n+#\n+Validator.ConfigurationFile=validation.properties\n+\n+# Validators used by ESAPI\n+Validator.AccountName=^[a-zA-Z0-9]{3,20}$\n+Validator.SystemCommand=^[a-zA-Z\\\\-\\\\/]{1,64}$\n+Validator.RoleName=^[a-z]{1,20}$\n+\n+#the word TEST below should be changed to your application\n+#name - only relative URL's are supported\n+Validator.Redirect=^\\\\/test.*$\n+\n+# Global HTTP Validation Rules\n+# Values with Base64 encoded data (e.g. encrypted state) will need at least [a-zA-Z0-9\\/+=]\n+Validator.HTTPScheme=^(http|https)$\n+Validator.HTTPServerName=^[a-zA-Z0-9_.\\\\-]*$\n+Validator.HTTPCookieName=^[a-zA-Z0-9\\\\-_]{1,32}$\n+Validator.HTTPCookieValue=^[a-zA-Z0-9\\\\-\\\\/+=_ ]*$\n+# Note that headerName and Value length is also configured in the HTTPUtilities section\n+Validator.HTTPHeaderName=^[a-zA-Z0-9\\\\-_]{1,256}$\n+Validator.HTTPHeaderValue=^[a-zA-Z0-9()\\\\-=\\\\*\\\\.\\\\?;,+\\\\/:&_ ]*$\n+Validator.HTTPServletPath=^[a-zA-Z0-9.\\\\-\\\\/_]*$\n+Validator.HTTPPath=^[a-zA-Z0-9.\\\\-_]*$\n+Validator.HTTPURL=^.*$\n+Validator.HTTPJSESSIONID=^[A-Z0-9]{10,32}$\n+\n+\n+# Contributed by Fraenku@gmx.ch\n+# Github Issue 126 https://github.com/ESAPI/esapi-java-legacy/issues/126\n+Validator.HTTPParameterName=^[a-zA-Z0-9_\\\\-]{1,32}$\n+Validator.HTTPParameterValue=^[\\\\p{L}\\\\p{N}.\\\\-/+=_ !$*?@]{0,1000}$\n+Validator.HTTPContextPath=^/[a-zA-Z0-9.\\\\-_]*$\n+Validator.HTTPQueryString=^([a-zA-Z0-9_\\\\-]{1,32}=[\\\\p{L}\\\\p{N}.\\\\-/+=_ !$*?@%]*&?)*$\n+Validator.HTTPURI=^/([a-zA-Z0-9.\\\\-_]*/?)*$\n+\n+\n+# Validation of file related input\n+Validator.FileName=^[a-zA-Z0-9!@#$%^&{}\\\\[\\\\]()_+\\\\-=,.~'` ]{1,255}$\n+Validator.DirectoryName=^[a-zA-Z0-9:/\\\\\\\\!@#$%^&{}\\\\[\\\\]()_+\\\\-=,.~'` ]{1,255}$\n+\n+# Validation of dates. Controls whether or not 'lenient' dates are accepted.\n+# See DataFormat.setLenient(boolean flag) for further details.\n+Validator.AcceptLenientDates=false\n+\n+#                       ~~~~~ Important Note ~~~~~\n+# This is a workaround to make sure that a commit to address GitHub issue #509\n+# doesn't accidentally break someone's production code. So essentially what we\n+# are doing is to reverting back to the previous possibly buggy (by\n+# documentation intent at least), but, by now, expected legacy behavior.\n+# Prior to the code changes for issue #509, if invalid / malicious HTML input was\n+# observed, AntiSamy would simply attempt to sanitize (cleanse) it and it would\n+# only be logged. However, the code change made ESAPI comply with its\n+# documentation, which stated that a ValidationException should be thrown in\n+# such cases. Unfortunately, changing this behavior--especially when no one is\n+# 100% certain that the documentation was correct--could break existing code\n+# using ESAPI so after a lot of debate, issue #521 was created to restore the\n+# previous behavior, but still allow the documented behavior. (We did this\n+# because it wasn't really causing an security issues since AntiSamy would clean\n+# it up anyway and we value backward compatibility as long as it doesn't clearly\n+# present security vulnerabilities.)\n+# More defaults about this are written up under GitHub issue #521 and\n+# the pull request it references. Future major releases of ESAPI (e.g., ESAPI 3.x)\n+# will not support this previous behavior, but it will remain for ESAPI 2.x.\n+# Set this to 'throw' if you want the originally intended behavior of throwing\n+# that was fixed via issue #509. Set to 'clean' if you want want the HTML input\n+# sanitized instead.\n+#\n+# Possible values:\n+#   clean -- Use the legacy behavior where unsafe HTML input is logged and the\n+#            sanitized (i.e., clean) input as determined by AntiSamy and your\n+#            AntiSamy rules is returned. This is the default behavior if this\n+#            new property is not found.\n+#   throw -- The new, presumably correct and originally intended behavior where\n+#            a ValidationException is thrown when unsafe HTML input is\n+#            encountered.\n+#\n+#Validator.HtmlValidationAction=clean\n+Validator.HtmlValidationAction=throw\n+\n+# With the fix for #310 to enable loading antisamy-esapi.xml from the classpath\n+# also an enhancement was made to be able to use a different filename for the configuration.\n+# You don't have to configure the filename here, but in that case the code will keep looking for antisamy-esapi.xml.\n+# This is the default behaviour of ESAPI.\n+#\n+#Validator.HtmlValidationConfigurationFile=antisamy-esapi.xml\n\\ No newline at end of file"
  },
  {
    "sha": "8dd26f79d2dba457963b69769ef3487127e6b4b9",
    "filename": "webapp/src/test/java/rocks/metaldetector/security/SearchQuerySanitizingFilterTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/c60e09bd32b7bb009befca5906dd6fdc80267364/webapp/src/test/java/rocks/metaldetector/security/SearchQuerySanitizingFilterTest.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/c60e09bd32b7bb009befca5906dd6fdc80267364/webapp/src/test/java/rocks/metaldetector/security/SearchQuerySanitizingFilterTest.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/test/java/rocks/metaldetector/security/SearchQuerySanitizingFilterTest.java?ref=c60e09bd32b7bb009befca5906dd6fdc80267364",
    "patch": "@@ -1,45 +0,0 @@\n-package rocks.metaldetector.security;\n-\n-import org.assertj.core.api.WithAssertions;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Mockito;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-import org.springframework.mock.web.MockHttpServletRequest;\n-import org.springframework.mock.web.MockHttpServletResponse;\n-\n-import javax.servlet.FilterChain;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import java.io.IOException;\n-\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.verify;\n-import static rocks.metaldetector.security.SearchQuerySanitizingFilter.PARAMETER_NAME;\n-\n-@ExtendWith(MockitoExtension.class)\n-class SearchQuerySanitizingFilterTest implements WithAssertions {\n-\n-  private final SearchQuerySanitizingFilter underTest = new SearchQuerySanitizingFilter();\n-\n-  @Test\n-  @DisplayName(\"Sanitized query is returned after filtering\")\n-  void test_request_sanitized() throws IOException, ServletException {\n-    // given\n-    ArgumentCaptor<HttpServletRequest> argumentCaptor = ArgumentCaptor.forClass(HttpServletRequest.class);\n-    MockHttpServletRequest request = new MockHttpServletRequest();\n-    MockHttpServletResponse response = new MockHttpServletResponse();\n-    FilterChain filterChain = Mockito.mock(FilterChain.class);\n-    request.setParameter(PARAMETER_NAME, \"<h1>Nirvana</h1>\");\n-\n-    // when\n-    underTest.doFilter(request, response, filterChain);\n-\n-    // then\n-    verify(filterChain).doFilter(argumentCaptor.capture(), eq(response));\n-    HttpServletRequest filteredRequest = argumentCaptor.getValue();\n-    assertThat(filteredRequest.getParameterValues(PARAMETER_NAME)[0]).isEqualTo(\"Nirvana\");\n-  }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "cd3e79479303973e313b98e6c75ef9c47b882169",
    "filename": "webapp/src/test/java/rocks/metaldetector/security/XSSFilterTest.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/test/java/rocks/metaldetector/security/XSSFilterTest.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/test/java/rocks/metaldetector/security/XSSFilterTest.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/test/java/rocks/metaldetector/security/XSSFilterTest.java?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -0,0 +1,47 @@\n+package rocks.metaldetector.security;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.mock.web.MockFilterChain;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import java.io.IOException;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+\n+@ExtendWith(MockitoExtension.class)\n+class XSSFilterTest implements WithAssertions {\n+\n+  private final XSSFilter underTest = new XSSFilter();\n+\n+  private final MockHttpServletRequest request = new MockHttpServletRequest();\n+  private final ServletResponse response = new MockHttpServletResponse();\n+  private final FilterChain filterChain = new MockFilterChain();\n+\n+  @Test\n+  @DisplayName(\"XSSUtils are called to remove bad JS from request body\")\n+  void test_xss_utils_called() throws IOException, ServletException {\n+    // given\n+    var requestBody = \"<h1>Nirvana</h1>\";\n+    request.setContent(requestBody.getBytes());\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      mock.when(() -> XSSUtils.stripXSS(any())).thenReturn(\"strippedContent\");\n+\n+      // when\n+      underTest.doFilter(request, response, filterChain);\n+\n+      // then\n+      mock.verify(() -> XSSUtils.stripXSS(requestBody));\n+    }\n+  }\n+}"
  },
  {
    "sha": "7f2ad5cd39b27ff4d598321965c84684a26e14e5",
    "filename": "webapp/src/test/java/rocks/metaldetector/security/XSSRequestWrapperTest.java",
    "status": "added",
    "additions": 211,
    "deletions": 0,
    "changes": 211,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/test/java/rocks/metaldetector/security/XSSRequestWrapperTest.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/test/java/rocks/metaldetector/security/XSSRequestWrapperTest.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/test/java/rocks/metaldetector/security/XSSRequestWrapperTest.java?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -0,0 +1,211 @@\n+package rocks.metaldetector.security;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+\n+class XSSRequestWrapperTest implements WithAssertions {\n+\n+  private final MockHttpServletRequest request = new MockHttpServletRequest();\n+\n+  @Test\n+  @DisplayName(\"The request's content can be overwritten and reader returns new data\")\n+  void test_request_content_can_be_overwritten_reader() throws IOException {\n+    // given\n+    request.setContent(\"oldContent\".getBytes());\n+    request.setCharacterEncoding(Charset.defaultCharset().name());\n+    var newContent = \"newContent\";\n+    var wrapper = new XSSRequestWrapper(request);\n+\n+    // when\n+    wrapper.resetInputStream(newContent.getBytes());\n+    var result = IOUtils.toString(wrapper.getReader());\n+\n+    // then\n+    assertThat(result).isEqualTo(newContent);\n+  }\n+\n+  @Test\n+  @DisplayName(\"The request's content can be overwritten and input stream returns new data\")\n+  void test_request_content_can_be_overwritten_input_stream() throws IOException {\n+    // given\n+    request.setContent(\"oldContent\".getBytes());\n+    request.setCharacterEncoding(Charset.defaultCharset().name());\n+    var newContent = \"newContent\";\n+    var wrapper = new XSSRequestWrapper(request);\n+\n+    // when\n+    wrapper.resetInputStream(newContent.getBytes());\n+    var result = IOUtils.toString(wrapper.getInputStream(), Charset.defaultCharset());\n+\n+    // then\n+    assertThat(result).isEqualTo(newContent);\n+  }\n+\n+  @Test\n+  @DisplayName(\"XSSUtils are called to remove bad JS from parameter\")\n+  void test_xss_utils_called_for_param() {\n+    // given\n+    var paramName = \"testParam\";\n+    var paramValue = \"badInput\";\n+    request.setParameter(paramName, paramValue);\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      // when\n+      new XSSRequestWrapper(request).getParameter(paramName);\n+\n+      // then\n+      mock.verify(() -> XSSUtils.stripXSS(paramValue));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"The sanitized parameter value is returned\")\n+  void test_sanitized_parameter_returned() {\n+    // given\n+    var paramName = \"testParam\";\n+    var sanitizedValue = \"sanitizedValue\";\n+    request.setParameter(paramName, \"badInput\");\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      mock.when(() -> XSSUtils.stripXSS(any())).thenReturn(sanitizedValue);\n+\n+      // when\n+      var result = new XSSRequestWrapper(request).getParameter(paramName);\n+\n+      // then\n+      assertThat(result).isEqualTo(sanitizedValue);\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"XSSUtils are called for every parameter to remove bad JS\")\n+  void test_xss_utils_called_for_every_param() {\n+    // given\n+    var paramName = \"testParam\";\n+    var paramValue1 = \"badInput1\";\n+    var paramValue2 = \"badInput2\";\n+    request.setParameter(paramName, paramValue1, paramValue2);\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      // when\n+      new XSSRequestWrapper(request).getParameterValues(paramName);\n+\n+      // then\n+      mock.verify(() -> XSSUtils.stripXSS(paramValue1));\n+      mock.verify(() -> XSSUtils.stripXSS(paramValue2));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"The sanitized parameter values are returned\")\n+  void test_sanitized_parameters_returned() {\n+    // given\n+    var paramName = \"testParam\";\n+    var sanitizedValue1 = \"sanitizedValue1\";\n+    var sanitizedValue2 = \"sanitizedValue2\";\n+    request.setParameter(paramName, \"badInput1\", \"badInput2\");\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      mock.when(() -> XSSUtils.stripXSS(any())).thenReturn(sanitizedValue1, sanitizedValue2); // todo hier ist noch was doof\n+\n+      // when\n+      var result = new XSSRequestWrapper(request).getParameterValues(paramName);\n+\n+      // then\n+      assertThat(result.length).isEqualTo(2);\n+      assertThat(result[0]).isEqualTo(sanitizedValue1);\n+      assertThat(result[1]).isEqualTo(sanitizedValue2);\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"XSSUtils are called to remove bad JS from header\")\n+  void test_xss_utils_called_for_header() {\n+    // given\n+    var headerName = \"testParam\";\n+    var headerValue = \"badInput\";\n+    request.addHeader(headerName, headerValue);\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      // when\n+      new XSSRequestWrapper(request).getHeader(headerName);\n+\n+      // then\n+      mock.verify(() -> XSSUtils.stripXSS(headerValue));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"The sanitized header value is returned\")\n+  void test_sanitized_header_returned() {\n+    // given\n+    var headerName = \"testParam\";\n+    var sanitizedValue = \"sanitizedValue\";\n+    request.addHeader(headerName, \"badInput\");\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      mock.when(() -> XSSUtils.stripXSS(any())).thenReturn(sanitizedValue);\n+\n+      // when\n+      var result = new XSSRequestWrapper(request).getHeader(headerName);\n+\n+      // then\n+      assertThat(result).isEqualTo(sanitizedValue);\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"XSSUtils are called to remove bad JS from headers\")\n+  void test_xss_utils_called_for_headers() {\n+    // given\n+    var headerName = \"testParam\";\n+    var headerValue1 = \"badInput1\";\n+    var headerValue2 = \"badInput2\";\n+    request.addHeader(headerName, headerValue1);\n+    request.addHeader(headerName, headerValue2);\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      // when\n+      new XSSRequestWrapper(request).getHeaders(headerName);\n+\n+      // then\n+      mock.verify(() -> XSSUtils.stripXSS(headerValue1));\n+      mock.verify(() -> XSSUtils.stripXSS(headerValue2));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"The sanitized header values are returned\")\n+  void test_sanitized_headers_returned() {\n+    // given\n+    var headerName = \"testParam\";\n+    var sanitizedValue1 = \"sanitizedValue1\";\n+    var sanitizedValue2 = \"sanitizedValue2\";\n+    var headerValue1 = \"badInput1\";\n+    var headerValue2 = \"badInput2\";\n+    request.addHeader(headerName, headerValue1);\n+    request.addHeader(headerName, headerValue2);\n+\n+    try(MockedStatic<XSSUtils> mock = Mockito.mockStatic(XSSUtils.class)) {\n+      mock.when(() -> XSSUtils.stripXSS(headerValue1)).thenReturn(sanitizedValue1);\n+      mock.when(() -> XSSUtils.stripXSS(headerValue2)).thenReturn(sanitizedValue2);\n+\n+      // when\n+      var result = new XSSRequestWrapper(request).getHeaders(headerName);\n+\n+      // then\n+      assertThat(Collections.list(result)).containsExactly(sanitizedValue1, sanitizedValue2);\n+    }\n+  }\n+}"
  },
  {
    "sha": "646c140e65bfd95fb82461bd2d5f813bef641c47",
    "filename": "webapp/src/test/java/rocks/metaldetector/security/XSSUtilsTest.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/MetalDetectorRocks/metal-detector-main/blob/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/test/java/rocks/metaldetector/security/XSSUtilsTest.java",
    "raw_url": "https://github.com/MetalDetectorRocks/metal-detector-main/raw/3f0f05eab081134041025b28c354dc5e26661b12/webapp/src/test/java/rocks/metaldetector/security/XSSUtilsTest.java",
    "contents_url": "https://api.github.com/repos/MetalDetectorRocks/metal-detector-main/contents/webapp/src/test/java/rocks/metaldetector/security/XSSUtilsTest.java?ref=3f0f05eab081134041025b28c354dc5e26661b12",
    "patch": "@@ -0,0 +1,34 @@\n+package rocks.metaldetector.security;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static rocks.metaldetector.security.XSSUtils.stripXSS;\n+\n+class XSSUtilsTest implements WithAssertions {\n+\n+  @Test\n+  @DisplayName(\"stripXSS is nullsafe\")\n+  void test_null_safety() {\n+    // when\n+    var result = stripXSS(null);\n+\n+    // then\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  @DisplayName(\"HTML/JS is removed from given String\")\n+  void test_js_removed() {\n+    // given\n+    var badInput = \"<h1>Darkthrone</h1>\";\n+    var sanitizedInput = \"Darkthrone\";\n+\n+    // when\n+    var result = XSSUtils.stripXSS(badInput);\n+\n+    // then\n+    assertThat(result).isEqualTo(sanitizedInput);\n+  }\n+}"
  }
]
