[
  {
    "sha": "90a753ca9ee439b0bab492b4b0857f4384c39ddc",
    "filename": "vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/main/java/com/vaadin/flow/component/richtexteditor/examples/RichTextEditorSetHtmlValuePage.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/vaadin/vaadin-flow-components/blob/253accc3f6321d219d5f3c4a465d5bf1d482fcf7/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/main/java/com/vaadin/flow/component/richtexteditor/examples/RichTextEditorSetHtmlValuePage.java",
    "raw_url": "https://github.com/vaadin/vaadin-flow-components/raw/253accc3f6321d219d5f3c4a465d5bf1d482fcf7/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/main/java/com/vaadin/flow/component/richtexteditor/examples/RichTextEditorSetHtmlValuePage.java",
    "contents_url": "https://api.github.com/repos/vaadin/vaadin-flow-components/contents/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/main/java/com/vaadin/flow/component/richtexteditor/examples/RichTextEditorSetHtmlValuePage.java?ref=253accc3f6321d219d5f3c4a465d5bf1d482fcf7",
    "patch": "@@ -0,0 +1,49 @@\n+package com.vaadin.flow.component.richtexteditor.examples;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.richtexteditor.RichTextEditor;\n+import com.vaadin.flow.data.value.ValueChangeMode;\n+import com.vaadin.flow.router.Route;\n+\n+import java.util.stream.Stream;\n+\n+@Route(value = \"vaadin-rich-text-editor/set-html-value\")\n+public class RichTextEditorSetHtmlValuePage extends Div {\n+    private int i = 0;\n+\n+    public RichTextEditorSetHtmlValuePage() {\n+        final RichTextEditor rte = new RichTextEditor();\n+        final Div rteValue = new Div();\n+        rteValue.setId(\"rteValue\");\n+        final Div rteHtmlValue = new Div();\n+        rteHtmlValue.setId(\"rteHtmlValue\");\n+        final Div rteValueChangeMode = new Div();\n+        rteValueChangeMode.setId(\"rteValueChangeMode\");\n+        final NativeButton button = new NativeButton(\"Set value\",\n+            e -> rte.asHtml().setValue(String.format(\"<h1>Test %d</h1>\", ++i)));\n+        button.setId(\"setValueButton\");\n+        add(rte, rteValue, rteHtmlValue, rteValueChangeMode, button);\n+        Stream.of(ValueChangeMode.values()).map(\n+            v -> createValueChangeModeSetterButton(v, rte, rteValueChangeMode))\n+            .forEach(this::add);\n+        rte.addValueChangeListener(e -> {\n+            rteValue.setText(rte.getValue());\n+            rteHtmlValue.setText(rte.getHtmlValue());\n+        });\n+        rte.asHtml().setValue(\"<h1>Test</h1>\");\n+    }\n+\n+    private static NativeButton createValueChangeModeSetterButton(\n+        ValueChangeMode valueChangeMode, RichTextEditor rte,\n+        Div rteValueChangeMode) {\n+        final String text = valueChangeMode.toString();\n+        final NativeButton button = new NativeButton(\n+            String.format(\"Set change mode to %s\", text), e -> {\n+            rte.setValueChangeMode(valueChangeMode);\n+            rteValueChangeMode.setText(valueChangeMode.toString());\n+        });\n+        button.setId(String.format(\"setChangeMode_%s\", text));\n+        return button;\n+    }\n+}"
  },
  {
    "sha": "28cc5e794a86809d5f637bab7aa4f3131fbae412",
    "filename": "vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/test/java/com/vaadin/flow/component/richtexteditor/test/RichTextEditorSetHtmlValueIT.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/vaadin/vaadin-flow-components/blob/253accc3f6321d219d5f3c4a465d5bf1d482fcf7/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/test/java/com/vaadin/flow/component/richtexteditor/test/RichTextEditorSetHtmlValueIT.java",
    "raw_url": "https://github.com/vaadin/vaadin-flow-components/raw/253accc3f6321d219d5f3c4a465d5bf1d482fcf7/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/test/java/com/vaadin/flow/component/richtexteditor/test/RichTextEditorSetHtmlValueIT.java",
    "contents_url": "https://api.github.com/repos/vaadin/vaadin-flow-components/contents/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow-integration-tests/src/test/java/com/vaadin/flow/component/richtexteditor/test/RichTextEditorSetHtmlValueIT.java?ref=253accc3f6321d219d5f3c4a465d5bf1d482fcf7",
    "patch": "@@ -0,0 +1,118 @@\n+package com.vaadin.flow.component.richtexteditor.test;\n+\n+import com.vaadin.flow.data.value.ValueChangeMode;\n+import com.vaadin.flow.testutil.TestPath;\n+import com.vaadin.testbench.TestBenchElement;\n+import com.vaadin.tests.AbstractComponentIT;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+@TestPath(value = \"vaadin-rich-text-editor/set-html-value\")\n+public class RichTextEditorSetHtmlValueIT extends AbstractComponentIT {\n+\n+    private TestBenchElement rteValue;\n+    private TestBenchElement rteHtmlValue;\n+\n+    @Before\n+    public void init() {\n+        open();\n+        rteValue = $(TestBenchElement.class).id(\"rteValue\");\n+        rteHtmlValue = $(TestBenchElement.class).id(\"rteHtmlValue\");\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueBeforeLoad_default_mode() {\n+        doSetHtmlValueOnServerSideUpdatesValueBeforeLoad();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueOnClick_default_mode() {\n+        doSetHtmlValueOnServerSideUpdatesValueOnClick();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueBeforeLoad_eager() {\n+        setRteValue(ValueChangeMode.EAGER);\n+        doSetHtmlValueOnServerSideUpdatesValueBeforeLoad();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueOnClick_eager() {\n+        setRteValue(ValueChangeMode.EAGER);\n+        doSetHtmlValueOnServerSideUpdatesValueOnClick();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueBeforeLoad_lazy() {\n+        setRteValue(ValueChangeMode.LAZY);\n+        doSetHtmlValueOnServerSideUpdatesValueBeforeLoad();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueOnClick_lazy() {\n+        setRteValue(ValueChangeMode.LAZY);\n+        doSetHtmlValueOnServerSideUpdatesValueOnClick();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueBeforeLoad_timeout() {\n+        setRteValue(ValueChangeMode.TIMEOUT);\n+        doSetHtmlValueOnServerSideUpdatesValueBeforeLoad();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueOnClick_timeout() {\n+        setRteValue(ValueChangeMode.TIMEOUT);\n+        doSetHtmlValueOnServerSideUpdatesValueOnClick();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueBeforeLoad_blur() {\n+        setRteValue(ValueChangeMode.ON_BLUR);\n+        doSetHtmlValueOnServerSideUpdatesValueBeforeLoad();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueOnClick_blur() {\n+        setRteValue(ValueChangeMode.ON_BLUR);\n+        doSetHtmlValueOnServerSideUpdatesValueOnClick();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueBeforeLoad_change() {\n+        setRteValue(ValueChangeMode.ON_CHANGE);\n+        doSetHtmlValueOnServerSideUpdatesValueBeforeLoad();\n+    }\n+\n+    @Test\n+    public void setHtmlValueOnServerSideUpdatesValueOnClick_change() {\n+        setRteValue(ValueChangeMode.ON_CHANGE);\n+        doSetHtmlValueOnServerSideUpdatesValueOnClick();\n+    }\n+\n+    private void doSetHtmlValueOnServerSideUpdatesValueBeforeLoad() {\n+        final String expectedValue = \"[{\\\"insert\\\":\\\"Test\\\"},{\\\"attributes\\\":{\\\"header\\\":1},\\\"insert\\\":\\\"\\\\n\\\"}]\";\n+        waitForRteValue(expectedValue);\n+        Assert.assertEquals(\"<h1>Test</h1>\", rteHtmlValue.getText());\n+    }\n+\n+    private void doSetHtmlValueOnServerSideUpdatesValueOnClick() {\n+        $(TestBenchElement.class).id(\"setValueButton\").click();\n+        final String expectedValue = \"[{\\\"insert\\\":\\\"Test 1\\\"},{\\\"attributes\\\":{\\\"header\\\":1},\\\"insert\\\":\\\"\\\\n\\\"}]\";\n+        waitForRteValue(expectedValue);\n+        Assert.assertEquals(\"<h1>Test 1</h1>\", rteHtmlValue.getText());\n+    }\n+\n+    private void setRteValue(ValueChangeMode valueChangeMode) {\n+        final String id = String\n+            .format(\"setChangeMode_%s\", valueChangeMode.toString());\n+        $(TestBenchElement.class).id(id).click();\n+        Assert.assertEquals(valueChangeMode.toString(),\n+            $(TestBenchElement.class).id(\"rteValueChangeMode\").getText());\n+    }\n+\n+    private void waitForRteValue(String value) {\n+        waitUntil(driver -> value.equals(rteValue.getText()));\n+    }\n+}"
  },
  {
    "sha": "74d052d487ff7bf50a62558522d2d76748eddcb4",
    "filename": "vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow/src/main/java/com/vaadin/flow/component/richtexteditor/RichTextEditor.java",
    "status": "modified",
    "additions": 125,
    "deletions": 84,
    "changes": 209,
    "blob_url": "https://github.com/vaadin/vaadin-flow-components/blob/253accc3f6321d219d5f3c4a465d5bf1d482fcf7/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow/src/main/java/com/vaadin/flow/component/richtexteditor/RichTextEditor.java",
    "raw_url": "https://github.com/vaadin/vaadin-flow-components/raw/253accc3f6321d219d5f3c4a465d5bf1d482fcf7/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow/src/main/java/com/vaadin/flow/component/richtexteditor/RichTextEditor.java",
    "contents_url": "https://api.github.com/repos/vaadin/vaadin-flow-components/contents/vaadin-rich-text-editor-flow-parent/vaadin-rich-text-editor-flow/src/main/java/com/vaadin/flow/component/richtexteditor/RichTextEditor.java?ref=253accc3f6321d219d5f3c4a465d5bf1d482fcf7",
    "patch": "@@ -11,10 +11,10 @@\n  * %%\n  * This program is available under Commercial Vaadin Developer License\n  * 4.0 (CVDLv4).\n- * \n+ *\n  * See the file license.html distributed with this software for more\n  * information about licensing.\n- * \n+ *\n  * For the full License, see <https://vaadin.com/license/cvdl-4.0>.\n  * #L%\n  */\n@@ -26,14 +26,12 @@\n import com.vaadin.flow.component.KeyNotifier;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.component.UI;\n-import com.vaadin.flow.component.page.PendingJavaScriptResult;\n import com.vaadin.flow.data.binder.Binder;\n import com.vaadin.flow.data.value.HasValueChangeMode;\n import com.vaadin.flow.data.value.ValueChangeMode;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.internal.JsonSerializer;\n import com.vaadin.flow.shared.Registration;\n-\n import elemental.json.JsonObject;\n \n /**\n@@ -60,6 +58,7 @@\n     private ValueChangeMode currentMode;\n     private RichTextEditorI18n i18n;\n     private AsHtml asHtml;\n+    private HtmlSetRequest htmlSetRequest;\n \n     /**\n      * Gets the internationalization object previously set for this component.\n@@ -192,30 +191,12 @@ public void setValue(String value) {\n         super.setValue(value);\n     }\n \n-    /**\n-     * Sets content represented by sanitized HTML string into the editor. The\n-     * HTML string is interpreted by\n-     * <a href=\"http://quilljs.com/docs/modules/clipboard/#matchers\">Quill's\n-     * Clipboard matchers</a> on the client side, which may not produce the\n-     * exactly input HTML.\n-     * <p>\n-     * Note: The value will be set asynchronously with client-server roundtrip.\n-     *\n-     * @param htmlValueString\n-     *            the HTML string\n-     */\n-    private PendingJavaScriptResult setHtmlValueAsynchronously(\n-            String htmlValueString) {\n-        if (htmlValueString != null) {\n-            htmlValueString = sanitize(htmlValueString);\n-        }\n-        return getElement().callJsFunction(\"dangerouslySetHtmlValue\",\n-                htmlValueString);\n-    }\n-\n     @ClientCallable\n     private void updateValue(String value) {\n         setValue(value);\n+        if(this.asHtml != null) {\n+            this.asHtml.value.clear();\n+        }\n     }\n \n     /**\n@@ -268,6 +249,34 @@ String sanitize(String html) {\n                         .addProtocols(\"img\", \"src\", \"data\"));\n     }\n \n+    private class HtmlSetRequest implements Serializable {\n+        private String html;\n+        private boolean requested;\n+\n+        void requestUpdate(String htmlValueString) {\n+            this.html =\n+                htmlValueString != null ? sanitize(htmlValueString) : null;\n+            if (!requested) {\n+                runBeforeClientResponse(ui -> this.execute());\n+                requested = true;\n+            }\n+        }\n+\n+        void execute() {\n+            if (getValueChangeMode() != ValueChangeMode.EAGER) {\n+                // Add a one-time listener if we are not in eager mode.\n+                final String JS = \"var listener = e => {\"\n+                    + \"  this.$server.updateValue(e.detail.value);\"\n+                    + \"  this.removeEventListener('value-changed', listener);\"\n+                    + \"  listener = null; };\"\n+                    + \"this.addEventListener('value-changed', listener);\";\n+                getElement().executeJs(JS);\n+            }\n+            getElement().callJsFunction(\"dangerouslySetHtmlValue\", this.html);\n+            requested = false;\n+        }\n+    }\n+\n     /**\n      * The internationalization properties for {@link RichTextEditor}.\n      */\n@@ -760,7 +769,7 @@ public String toString() {\n      */\n     public HasValue<ValueChangeEvent<String>, String> asHtml() {\n         if (asHtml == null) {\n-            asHtml = new AsHtml(this);\n+            asHtml = new AsHtml();\n         }\n         return asHtml;\n     }\n@@ -771,17 +780,11 @@ public String toString() {\n     private class AsHtml implements HasValue<ValueChangeEvent<String>, String> {\n \n         private String oldValue;\n-        private String value;\n-        private RichTextEditor rte;\n-\n-        AsHtml(RichTextEditor rte) {\n-            this.rte = rte;\n-            this.value = getHtmlValue();\n-            rte.addValueChangeListener(event -> {\n-                if (event.isFromClient()) {\n-                    setValue(getHtmlValue(), false);\n-                }\n-            });\n+        private final HtmlValue value;\n+\n+        AsHtml() {\n+            this.value = new HtmlValue();\n+            RichTextEditor.this.addValueChangeListener(e -> this.value.clear());\n         }\n \n         /**\n@@ -802,28 +805,30 @@ public String toString() {\n         @Override\n         public void setValue(String value) {\n             this.oldValue = getValue();\n-            this.value = value;\n-            setHtmlValueAsynchronously(value).then(result -> {\n-                if (oldValue != null && !oldValue.equals(value)) {\n-                    fireEvent(createValueChange(oldValue, false));\n-                }\n-            });\n+            this.value.setValue(value);\n+            setHtmlValueAsynchronously(value);\n         }\n \n-        private void setValue(String value, boolean fireEvent) {\n-            if (fireEvent) {\n-                setValue(value);\n-            } else {\n-                this.oldValue = getValue();\n-                this.value = value;\n+        /**\n+         * Sets content represented by sanitized HTML string into the editor. The\n+         * HTML string is interpreted by\n+         * <a href=\"http://quilljs.com/docs/modules/clipboard/#matchers\">Quill's\n+         * Clipboard matchers</a> on the client side, which may not produce the\n+         * exactly input HTML.\n+         * <p>\n+         * Note: The value will be set asynchronously with client-server roundtrip.\n+         *\n+         * @param htmlValueString\n+         *            the HTML string\n+         */\n+        private void setHtmlValueAsynchronously(\n+            String htmlValueString) {\n+            if (htmlSetRequest == null) {\n+                htmlSetRequest = new HtmlSetRequest();\n             }\n+            htmlSetRequest.requestUpdate(htmlValueString);\n         }\n \n-        private ComponentValueChangeEvent<RichTextEditor, String> createValueChange(\n-                String oldValue, boolean fromClient) {\n-            return new ComponentValueChangeEvent<>(rte, this, oldValue,\n-                    fromClient);\n-        }\n \n         /**\n          * Gets the value of the editor presented as an HTML string.\n@@ -844,7 +849,7 @@ private void setValue(String value, boolean fireEvent) {\n          */\n         @Override\n         public String getValue() {\n-            return value;\n+            return value.getValue();\n         }\n \n         /**\n@@ -858,31 +863,35 @@ public String getValue() {\n          */\n         @Override\n         public Registration addValueChangeListener(\n-                ValueChangeListener listener) {\n-            return rte.addValueChangeListener(originalEvent -> {\n-                ValueChangeEvent event = new ValueChangeEvent<String>() {\n-                    @Override\n-                    public HasValue<ValueChangeEvent<String>, String> getHasValue() {\n-                        return AsHtml.this;\n-                    }\n-\n-                    @Override\n-                    public boolean isFromClient() {\n-                        return originalEvent.isFromClient();\n-                    }\n-\n-                    @Override\n-                    public String getOldValue() {\n-                        return oldValue;\n-                    }\n-\n-                    @Override\n-                    public String getValue() {\n-                        return AsHtml.this.getValue();\n-                    }\n-                };\n-                listener.valueChanged(event);\n-            });\n+            ValueChangeListener listener) {\n+            return RichTextEditor.this.addValueChangeListener(\n+                originalEvent -> listener\n+                    .valueChanged(this.createNewEvent(originalEvent)));\n+        }\n+\n+        private ValueChangeEvent createNewEvent(\n+            ValueChangeEvent<String> originalEvent) {\n+            return new ValueChangeEvent<String>() {\n+                @Override\n+                public HasValue<ValueChangeEvent<String>, String> getHasValue() {\n+                    return AsHtml.this;\n+                }\n+\n+                @Override\n+                public boolean isFromClient() {\n+                    return originalEvent.isFromClient();\n+                }\n+\n+                @Override\n+                public String getOldValue() {\n+                    return oldValue;\n+                }\n+\n+                @Override\n+                public String getValue() {\n+                    return AsHtml.this.getValue();\n+                }\n+            };\n         }\n \n         /**\n@@ -894,7 +903,7 @@ public String getValue() {\n          */\n         @Override\n         public void setReadOnly(boolean readOnly) {\n-            rte.setReadOnly(readOnly);\n+            RichTextEditor.this.setReadOnly(readOnly);\n         }\n \n         /**\n@@ -905,7 +914,7 @@ public void setReadOnly(boolean readOnly) {\n          */\n         @Override\n         public boolean isReadOnly() {\n-            return rte.isReadOnly();\n+            return RichTextEditor.this.isReadOnly();\n         }\n \n         /**\n@@ -918,7 +927,7 @@ public boolean isReadOnly() {\n         @Override\n         public void setRequiredIndicatorVisible(\n                 boolean requiredIndicatorVisible) {\n-            rte.setRequiredIndicatorVisible(requiredIndicatorVisible);\n+            RichTextEditor.this.setRequiredIndicatorVisible(requiredIndicatorVisible);\n         }\n \n         /**\n@@ -929,7 +938,39 @@ public void setRequiredIndicatorVisible(\n          */\n         @Override\n         public boolean isRequiredIndicatorVisible() {\n-            return rte.isRequiredIndicatorVisible();\n+            return RichTextEditor.this.isRequiredIndicatorVisible();\n+        }\n+\n+        private class HtmlValue implements Serializable {\n+            private String value;\n+            private boolean present;\n+\n+            private String getValue() {\n+                if (!present) {\n+                    this.value = generateHtmlValue();\n+                    this.present = true;\n+                }\n+                return value;\n+            }\n+\n+            private void setValue(String value) {\n+                this.value = value;\n+                this.present = true;\n+            }\n+\n+            private void clear() {\n+                this.value = null;\n+                this.present = false;\n+            }\n+\n+            private String generateHtmlValue() {\n+                if (RichTextEditor.this.isEmpty()) {\n+                    return null;\n+                } else {\n+                    return RichTextEditor.this.getHtmlValue();\n+                }\n+            }\n         }\n     }\n+\n }"
  }
]
