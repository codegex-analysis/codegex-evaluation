[
  {
    "sha": "7f7eaca547ebe6c9c3af4e38af923fddcf202bf3",
    "filename": "src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java",
    "status": "modified",
    "additions": 12,
    "deletions": 28,
    "changes": 40,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/blob/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/raw/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-deployer-kubernetes/contents/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java?ref=0ff8f491515cd822e85991da603bee1a754090b3",
    "patch": "@@ -26,23 +26,25 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.cloud.deployer.spi.app.AppDeployer;\n+import org.springframework.cloud.deployer.spi.core.AppDeploymentRequest;\n+import org.springframework.cloud.deployer.spi.kubernetes.support.PropertyParserUtils;\n+import org.springframework.cloud.deployer.spi.scheduler.ScheduleRequest;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+\n import io.fabric8.kubernetes.api.model.Container;\n import io.fabric8.kubernetes.api.model.ContainerBuilder;\n import io.fabric8.kubernetes.api.model.EnvFromSource;\n import io.fabric8.kubernetes.api.model.EnvVar;\n import io.fabric8.kubernetes.api.model.EnvVarSource;\n import io.fabric8.kubernetes.api.model.ObjectFieldSelector;\n import io.fabric8.kubernetes.api.model.Probe;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-\n-import org.springframework.cloud.deployer.spi.app.AppDeployer;\n-import org.springframework.cloud.deployer.spi.core.AppDeploymentRequest;\n-import org.springframework.cloud.deployer.spi.scheduler.ScheduleRequest;\n-import org.springframework.util.Assert;\n-import org.springframework.util.StringUtils;\n \n /**\n  * Create a Kubernetes {@link Container} that will be started as part of a\n@@ -95,8 +97,8 @@ public Container create(ContainerConfiguration containerConfiguration) {\n \t\t//image supports it.\n \t\tenvVarsMap.putAll(deploymentPropertiesResolver.getAppEnvironmentVariables(deploymentProperties));\n \n-\t\tList<String> appArgs = new ArrayList<>();\n \n+\t\tList<String> appArgs = new ArrayList<>();\n \t\tswitch (entryPointStyle) {\n \t\tcase exec:\n \t\t\tappArgs = createCommandArgs(request);\n@@ -118,25 +120,7 @@ public Container create(ContainerConfiguration containerConfiguration) {\n \n \t\t\tbreak;\n \t\tcase shell:\n-\t\t\tfor (String key : request.getDefinition().getProperties().keySet()) {\n-\t\t\t\tString envVar = key.replace('.', '_').toUpperCase();\n-\t\t\t\tenvVarsMap.put(envVar, request.getDefinition().getProperties().get(key));\n-\t\t\t}\n-\t\t\t// Push all the command line arguments as environment properties\n-\t\t\t// The task app name(in case of Composed Task), platform_name and executionId are expected to be updated.\n-\t\t\t// This will also override any of the existing app properties that match the provided cmdline args.\n-\t\t\tfor (String cmdLineArg: request.getCommandlineArguments()) {\n-\t\t\t\tString cmdLineArgKey;\n-\n-\t\t\t\tif (cmdLineArg.startsWith(\"--\")) {\n-\t\t\t\t\tcmdLineArgKey = cmdLineArg.substring(2, cmdLineArg.indexOf(\"=\"));\n-\t\t\t\t} else {\n-\t\t\t\t\tcmdLineArgKey = cmdLineArg.substring(0, cmdLineArg.indexOf(\"=\"));\n-\t\t\t\t}\n-\n-\t\t\t\tString cmdLineArgValue = cmdLineArg.substring(cmdLineArg.indexOf(\"=\") + 1);\n-\t\t\t\tenvVarsMap.put(cmdLineArgKey.replace('.', '_').toUpperCase(), cmdLineArgValue);\n-\t\t\t}\n+\t\t\tenvVarsMap.putAll(PropertyParserUtils.getEnvironmentVariables(request));\n \t\t\tbreak;\n \t\t}\n "
  },
  {
    "sha": "7133a0f40d1a5fcb9b32f45dcac695061e73c842",
    "filename": "src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/blob/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/raw/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-deployer-kubernetes/contents/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java?ref=0ff8f491515cd822e85991da603bee1a754090b3",
    "patch": "@@ -377,6 +377,16 @@ String getImagePullSecret(Map<String, String> kubernetesDeployerProperties) {\n \t\t}\n \t}\n \n+\tString getDeploymentYaml(Map<String, String> kubernetesDeployerProperties){\n+\t\tString deploymentYaml = PropertyParserUtils.getDeploymentPropertyValue(kubernetesDeployerProperties,\n+\t\t\t\tthis.propertyPrefix + \".deploymentYaml\", \"\");\n+\n+\t\tif(StringUtils.isEmpty(deploymentYaml)) {\n+\t\t\tdeploymentYaml = this.properties.getDeploymentYaml();\n+\t\t}\n+\n+\t\treturn deploymentYaml;\n+\t}\n \tString getDeploymentServiceAccountName(Map<String, String> kubernetesDeployerProperties) {\n \t\tString deploymentServiceAccountName = PropertyParserUtils.getDeploymentPropertyValue(kubernetesDeployerProperties,\n \t\t\t\tthis.propertyPrefix + \".deploymentServiceAccountName\");"
  },
  {
    "sha": "6fee6f7d3edbbd83755f0d02c26ee3f8d69787a5",
    "filename": "src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesDeployerProperties.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/blob/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesDeployerProperties.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/raw/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesDeployerProperties.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-deployer-kubernetes/contents/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesDeployerProperties.java?ref=0ff8f491515cd822e85991da603bee1a754090b3",
    "patch": "@@ -578,6 +578,16 @@ public void setVolumeMounts(List<VolumeMount> volumeMounts) {\n \t */\n \tprivate EntryPointStyle entryPointStyle = EntryPointStyle.exec;\n \n+\t/**\n+\t * Use Kubernetes Deployment feature instead of deploying one pod.\n+\t */\n+\tprivate boolean useDeployment = false;\n+\n+\t/**\n+\t * Kubernetes deployment yaml name\n+\t */\n+\tprivate String deploymentYaml;\n+\n \t/**\n \t * Create a \"LoadBalancer\" for the service created for each app. This facilitates assignment of external IP to app.\n \t */\n@@ -1128,6 +1138,15 @@ public void setEntryPointStyle(EntryPointStyle entryPointStyle) {\n \t\tthis.entryPointStyle = entryPointStyle;\n \t}\n \n+\n+\tpublic boolean getUseDeployment() { return useDeployment; }\n+\n+\tpublic void setUseDeployment(boolean useDeployment) { this.useDeployment = useDeployment; }\n+\n+\tpublic String getDeploymentYaml() { return  deploymentYaml; }\n+\n+\tpublic void setDeploymentYaml(String deploymentYaml) { this.deploymentYaml = deploymentYaml; }\n+\n \tpublic boolean isCreateLoadBalancer() {\n \t\treturn createLoadBalancer;\n \t}"
  },
  {
    "sha": "7d1bdfc7467ef6e7aded0a648ec8fea3492c31c1",
    "filename": "src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncher.java",
    "status": "modified",
    "additions": 169,
    "deletions": 37,
    "changes": 206,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/blob/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncher.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/raw/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncher.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-deployer-kubernetes/contents/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncher.java?ref=0ff8f491515cd822e85991da603bee1a754090b3",
    "patch": "@@ -24,6 +24,19 @@\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.hashids.Hashids;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.deployer.spi.core.AppDeploymentRequest;\n+import org.springframework.cloud.deployer.spi.core.RuntimeEnvironmentInfo;\n+import org.springframework.cloud.deployer.spi.kubernetes.support.PropertyParserUtils;\n+import org.springframework.cloud.deployer.spi.task.LaunchState;\n+import org.springframework.cloud.deployer.spi.task.TaskLauncher;\n+import org.springframework.cloud.deployer.spi.task.TaskStatus;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+import io.fabric8.kubernetes.api.model.EnvVar;\n import io.fabric8.kubernetes.api.model.HasMetadata;\n import io.fabric8.kubernetes.api.model.KubernetesResourceList;\n import io.fabric8.kubernetes.api.model.ObjectMeta;\n@@ -33,6 +46,8 @@\n import io.fabric8.kubernetes.api.model.PodSpec;\n import io.fabric8.kubernetes.api.model.PodStatus;\n import io.fabric8.kubernetes.api.model.PodTemplateSpec;\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentSpec;\n import io.fabric8.kubernetes.api.model.batch.Job;\n import io.fabric8.kubernetes.api.model.batch.JobList;\n import io.fabric8.kubernetes.api.model.batch.JobSpec;\n@@ -44,18 +59,6 @@\n import io.fabric8.kubernetes.client.Watcher;\n import io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable;\n import io.fabric8.kubernetes.client.dsl.PodResource;\n-import org.hashids.Hashids;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.cloud.deployer.spi.core.AppDeploymentRequest;\n-import org.springframework.cloud.deployer.spi.core.RuntimeEnvironmentInfo;\n-import org.springframework.cloud.deployer.spi.kubernetes.support.PropertyParserUtils;\n-import org.springframework.cloud.deployer.spi.task.LaunchState;\n-import org.springframework.cloud.deployer.spi.task.TaskLauncher;\n-import org.springframework.cloud.deployer.spi.task.TaskStatus;\n-import org.springframework.util.Assert;\n-import org.springframework.util.CollectionUtils;\n-import org.springframework.util.StringUtils;\n \n /**\n  * A task launcher that targets Kubernetes.\n@@ -101,27 +104,34 @@ public KubernetesTaskLauncher(KubernetesDeployerProperties kubernetesDeployerPro\n \n \t@Override\n \tpublic String launch(AppDeploymentRequest request) {\n-\t\tString appId = createDeploymentId(request);\n-\t\tTaskStatus status = status(appId);\n-\n-\t\tif (!status.getState().equals(LaunchState.unknown)) {\n-\t\t\tthrow new IllegalStateException(\"Task \" + appId + \" already exists with a state of \" + status);\n+\t\tif( properties.getUseDeployment() ) {\n+\t\t\treturn launchWithDeploymentConfig(request);\n \t\t}\n+\t\telse {\n+\t\t\tString appId = createDeploymentId(request);\n+\t\t\tTaskStatus status = status(appId);\n \n-\t\tif (this.maxConcurrentExecutionsReached()) {\n-\t\t\tthrow new IllegalStateException(\n-\t\t\t\tString.format(\"Cannot launch task %s. The maximum concurrent task executions is at its limit [%d].\",\n-\t\t\t\t\trequest.getDefinition().getName(), this.getMaximumConcurrentTasks())\n-\t\t\t);\n-\t\t}\n+\t\t\tif (!status.getState().equals(LaunchState.unknown)) {\n+\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Task \" + appId + \" already exists with a state of \" + status);\n+\t\t\t}\n \n-\t\tlogPossibleDownloadResourceMessage(request.getResource());\n-\t\ttry {\n-\t\t\tlaunch(appId, request);\n-\t\t\treturn appId;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tlogger.error(e.getMessage(), e);\n-\t\t\tthrow e;\n+\t\t\tif (this.maxConcurrentExecutionsReached()) {\n+\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\t\t\"Cannot launch task %s. The maximum concurrent task executions is at its limit [%d].\",\n+\t\t\t\t\t\t\t\trequest.getDefinition().getName(), this.getMaximumConcurrentTasks())\n+\t\t\t\t);\n+\t\t\t}\n+\n+\t\t\tlogPossibleDownloadResourceMessage(request.getResource());\n+\t\t\ttry {\n+\t\t\t\tlaunch(appId, request);\n+\t\t\t\treturn appId;\n+\t\t\t} catch (RuntimeException e) {\n+\t\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\t\tthrow e;\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -135,10 +145,14 @@ public void cancel(String id) {\n \t@Override\n \tpublic void cleanup(String id) {\n \t\ttry {\n-\t\t\tif (properties.isCreateJob()) {\n-\t\t\t\tdeleteJob(id);\n-\t\t\t} else {\n-\t\t\t\tdeletePod(id);\n+\t\t\tif(properties.getUseDeployment()){\n+\t\t\t\tdecreasePod(getDeploymentByAppId(id));\n+\t\t\t}else {\n+\t\t\t\tif (properties.isCreateJob()) {\n+\t\t\t\t\tdeleteJob(id);\n+\t\t\t\t} else {\n+\t\t\t\t\tdeletePod(id);\n+\t\t\t\t}\n \t\t\t}\n \t\t} catch (RuntimeException e) {\n \t\t\tlogger.error(e.getMessage(), e);\n@@ -226,9 +240,7 @@ protected String createDeploymentId(AppDeploymentRequest request) {\n \n \tprivate void launch(String appId, AppDeploymentRequest request) {\n \t\tMap<String, String> idMap = createIdMap(appId, request);\n-\t\tMap<String, String> podLabelMap = new HashMap<>();\n-\t\tpodLabelMap.put(\"task-name\", request.getDefinition().getName());\n-\t\tpodLabelMap.put(SPRING_MARKER_KEY, SPRING_MARKER_VALUE);\n+\t\tMap<String, String> podLabelMap = getPodLabelMap(request);\n \n \t\tMap<String, String> deploymentProperties = request.getDeploymentProperties();\n \t\tMap<String, String> deploymentLabels = this.deploymentPropertiesResolver.getDeploymentLabels(deploymentProperties);\n@@ -280,6 +292,111 @@ private void launch(String appId, AppDeploymentRequest request) {\n \t\t}\n \t}\n \n+\tprivate String launchWithDeploymentConfig(AppDeploymentRequest request){\n+\n+\t\tlogger.debug(\"All of pod configurations are managed by Deployment Yaml.\");\n+\n+\t\tMap<String, String> deploymentProperties = request.getDeploymentProperties();\n+\t\tString deploymentName = this.deploymentPropertiesResolver.getDeploymentYaml(deploymentProperties);\n+\n+\t\tDeployment deployment = getDeploymentByName(deploymentName);\n+\n+\t\tString previousAppId = getAppId(deployment);\n+\t\tdecreasePod(deployment);\n+\t\tincreasePod(request, deployment);\n+\n+\t\tString appId = getAppId(deployment);\n+\n+\t\twhile(appId.equals(previousAppId)){\n+\t\t\tappId = getAppId(deployment);\n+\t\t}\n+\t\tMap<String, String> labelMap = createIdMap(appId,request);\n+\t\tconfigureLabels(deploymentName, labelMap);\n+\t\treturn appId;\n+\t}\n+\n+\tprivate void configureLabels(String deploymentName, Map<String, String> labelMap){\n+   client.apps().deployments()\n+\t\t\t  .inNamespace(properties.getNamespace())\n+\t\t\t\t.withName(deploymentName)\n+\t\t\t  .edit().editOrNewMetadata()\n+\t\t\t  .addToLabels(labelMap)\n+\t\t\t  .endMetadata()\n+\t\t\t  .done();\n+\t}\n+\n+\tprivate String getAppId(Deployment deployment){\n+\t\tPodList podList = getPodList(deployment);\n+\t\tif(podList.getItems().isEmpty())\n+\t\t\treturn \"\";\n+\t\treturn podList.getItems().get(0).getMetadata().getName();\n+\t}\n+\n+\tprivate void decreasePod(Deployment deployment){\n+\t\tDeploymentSpec deploymentSpec = deployment.getSpec();\n+\t\tdeploymentSpec.setReplicas(0);\n+\t\tdeployment.setSpec(deploymentSpec);\n+\t\tthis.client.apps().deployments().inNamespace(properties.getNamespace())\n+\t\t\t\t.createOrReplace(deployment);\n+\n+\t}\n+\tprivate void increasePod(AppDeploymentRequest request, Deployment deployment ){\n+\t\tDeploymentSpec deploymentSpec = deployment.getSpec();\n+\t\tdeploymentSpec.setReplicas(1);\n+\t\tMap<String, String> envVarsMap = PropertyParserUtils.getEnvironmentVariables(request);\n+\t\tList<EnvVar> envVarList =  deploymentSpec.getTemplate().getSpec().getContainers().get(0).getEnv();\n+\n+\t\tfor (Map.Entry<String, String> e : envVarsMap.entrySet()) {\n+\n+\t\t\tboolean isExist = false;\n+\t\t\tboolean isUpdate = false;\n+\t\t\tint indexOfUpdate = 0;\n+\n+\t\t\tfor(int i = 0 ; i < envVarList.size() ; i++){\n+\n+\t\t\t\tif(envVarList.get(i).getName().equals(e.getKey())){\n+\t\t\t\t\tif(envVarList.get(i).getValue().equals(e.getValue())){\n+\t\t\t\t\t\tisExist = true;\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tisUpdate = true;\n+\t\t\t\t\t\tindexOfUpdate = i;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t}\n+\n+\t\t\tif(isExist){\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tif(isUpdate){\n+\t\t\t\tenvVarList.set(indexOfUpdate, new EnvVar(e.getKey(), e.getValue(), null));\n+\t\t\t}else{\n+\t\t\t\tenvVarList.add(new EnvVar(e.getKey(), e.getValue(), null));\n+\t\t\t}\n+\n+\t\t}\n+\t\tdeploymentSpec.getTemplate().getSpec().getContainers().get(0).setEnv(envVarList);\n+\t\tdeployment.setSpec(deploymentSpec);\n+\t\tthis.client.apps().deployments().inNamespace(properties.getNamespace())\n+\t\t\t\t.createOrReplace(deployment);\n+\t}\n+\n+\n+\tprivate PodList getPodList(Deployment deployment){\n+\t\treturn this.client.pods().inNamespace(properties.getNamespace())\n+\t\t\t\t.withLabels(deployment.getSpec().getTemplate().getMetadata().getLabels()).list();\n+\t}\n+\n+\tprivate Map<String, String> getPodLabelMap(AppDeploymentRequest request){\n+\t\tMap<String, String> podLabelMap = new HashMap<>();\n+\t\tpodLabelMap.put(\"task-name\", request.getDefinition().getName());\n+\t\tpodLabelMap.put(SPRING_MARKER_KEY, SPRING_MARKER_VALUE);\n+\t\treturn podLabelMap;\n+\t}\n+\n \tprivate List<String> getIdsForTasks(Optional<String> taskName, boolean isCreateJob) {\n \t\tList<String> ids = new ArrayList<>();\n \t\ttry {\n@@ -394,6 +511,21 @@ private void deletePod(String id) {\n \t\t}\n \t}\n \n+\tprivate Deployment getDeploymentByName(String deploymentName){\n+\t\treturn client.apps()\n+\t\t\t\t.deployments()\n+\t\t\t\t.inNamespace(properties.getNamespace())\n+\t\t\t\t.withName(deploymentName).get();\n+\t}\n+\n+\tprivate Deployment getDeploymentByAppId(String appId){\n+\t\treturn client.apps()\n+\t\t\t\t.deployments()\n+\t\t\t\t.inNamespace(properties.getNamespace())\n+\t\t\t\t.withLabel(SPRING_APP_KEY, appId).list().getItems().get(0);\n+\t}\n+\n+\n \tprivate Job getJob(String jobName) {\n \t\tList<Job> jobs = client.batch().jobs().withLabel(SPRING_APP_KEY, jobName).list().getItems();\n "
  },
  {
    "sha": "f246500bd764710c271b1cdb929b713b92c8732c",
    "filename": "src/main/java/org/springframework/cloud/deployer/spi/kubernetes/support/PropertyParserUtils.java",
    "status": "modified",
    "additions": 28,
    "deletions": 2,
    "changes": 30,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/blob/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/support/PropertyParserUtils.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/raw/0ff8f491515cd822e85991da603bee1a754090b3/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/support/PropertyParserUtils.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-deployer-kubernetes/contents/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/support/PropertyParserUtils.java?ref=0ff8f491515cd822e85991da603bee1a754090b3",
    "patch": "@@ -16,15 +16,16 @@\n \n package org.springframework.cloud.deployer.spi.kubernetes.support;\n \n+import static java.lang.String.format;\n+\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n \n+import org.springframework.cloud.deployer.spi.core.AppDeploymentRequest;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n-import static java.lang.String.format;\n-\n /**\n  * Utility methods for formatting and parsing properties\n  *\n@@ -68,4 +69,29 @@ public static String getDeploymentPropertyValue(Map<String, String> deploymentPr\n \t\t}\n \t\treturn defaultValue;\n \t}\n+\n+\tpublic static Map<String, String> getEnvironmentVariables(AppDeploymentRequest request){\n+\t\tMap<String, String> envVarsMap = new HashMap<>();\n+\n+\t\tfor (String key : request.getDefinition().getProperties().keySet()) {\n+\t\t\tString envVar = key.replace('.', '_').toUpperCase();\n+\t\t\tenvVarsMap.put(envVar, request.getDefinition().getProperties().get(key));\n+\t\t}\n+\t\t// Push all the command line arguments as environment properties\n+\t\t// The task app name(in case of Composed Task), platform_name and executionId are expected to be updated.\n+\t\t// This will also override any of the existing app properties that match the provided cmdline args.\n+\t\tfor (String cmdLineArg: request.getCommandlineArguments()) {\n+\t\t\tString cmdLineArgKey;\n+\n+\t\t\tif (cmdLineArg.startsWith(\"--\")) {\n+\t\t\t\tcmdLineArgKey = cmdLineArg.substring(2, cmdLineArg.indexOf(\"=\"));\n+\t\t\t} else {\n+\t\t\t\tcmdLineArgKey = cmdLineArg.substring(0, cmdLineArg.indexOf(\"=\"));\n+\t\t\t}\n+\n+\t\t\tString cmdLineArgValue = cmdLineArg.substring(cmdLineArg.indexOf(\"=\") + 1);\n+\t\t\tenvVarsMap.put(cmdLineArgKey.replace('.', '_').toUpperCase(), cmdLineArgValue);\n+\t\t}\n+\t\treturn envVarsMap;\n+\t}\n }"
  }
]
