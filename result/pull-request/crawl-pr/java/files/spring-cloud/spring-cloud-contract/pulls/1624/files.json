[
  {
    "sha": "24d231c6e79080a0d7d72d012830d646c2528bb2",
    "filename": "docs/src/main/asciidoc/getting-started.adoc",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-contract/blob/5e9385b64b27a961861a9e227ed80fdc2e0c2038/docs/src/main/asciidoc/getting-started.adoc",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-contract/raw/5e9385b64b27a961861a9e227ed80fdc2e0c2038/docs/src/main/asciidoc/getting-started.adoc",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-contract/contents/docs/src/main/asciidoc/getting-started.adoc?ref=5e9385b64b27a961861a9e227ed80fdc2e0c2038",
    "patch": "@@ -21,7 +21,7 @@ Before becoming Spring Cloud Contract, this project was called https://github.co\n It was created by https://twitter.com/mgrzejszczak[Marcin Grzejszczak] and https://twitter.com/jkubrynski[Jakub Kubrynski]\n from (https://github.com/Codearte[Codearte]).\n \n-The `0.1.0` release took place on 26 Jan 2015 and it became stable with `1.0.0` release on 29 Feb 2016.\n+The `0.1.0` release took place on 26 Jan 2015, and it became stable with `1.0.0` release on 29 Feb 2016.\n \n [[getting-started-introducing-spring-cloud-contract-why]]\n ==== Why Do You Need It?\n@@ -43,7 +43,7 @@ two things:\n \n Both have their advantages but also a lot of disadvantages.\n \n-*Deploy all microservices and perform end to end tests*\n+*Deploy all microservices and perform end-to-end tests*\n \n Advantages:\n \n@@ -92,7 +92,7 @@ The main purposes of Spring Cloud Contract are:\n \n - To ensure that HTTP and messaging stubs (used when developing the client) do exactly\n what the actual server-side implementation does.\n-- To promote the ATDD (acceptance test-driven developement) method and the microservices architectural style.\n+- To promote the ATDD (acceptance test-driven development) method, and the microservices architectural style.\n - To provide a way to publish changes in contracts that are immediately visible on both sides.\n - To generate boilerplate test code to be used on the server side.\n \n@@ -456,7 +456,7 @@ Running `./mvnw clean install` automatically generates tests that verify the app\n compliance with the added contracts. By default, the generated tests are under\n `org.springframework.cloud.contract.verifier.tests.`.\n \n-The generated tests may differ, depending on which framework and test type you have setup\n+The generated tests may differ, depending on which framework and test type you have set up\n in your plugin.\n \n In the next listing, you can find:\n@@ -842,7 +842,7 @@ discuss changes while going through the process.\n The {samples_code}/{standalone_samples_path}/http-server[server-side\n code is available here], and {samples_code}/{standalone_samples_path}/http-client[the client code  is available here].\n \n-TIP: In this case, the producer owns the contracts. Physically, all of the contracts are\n+TIP: In this case, the producer owns the contracts. Physically, all the contracts are\n in the producer's repository.\n \n [[getting-started-cdc-technical-note]]\n@@ -1266,7 +1266,7 @@ Tests in error:\n ----\n ====\n \n-This error occurs because you have a new contract from which a test was generated and it\n+This error occurs because you have a new contract from which a test was generated, and it\n failed since you have not implemented the feature. The auto-generated test would look\n like the following test method:\n \n@@ -1295,7 +1295,7 @@ public void validate_shouldMarkClientAsFraud() throws Exception {\n ----\n ====\n \n-If you used the Groovy DSL, you can see that all of the `producer()` parts of the Contract that were present in the\n+If you used the Groovy DSL, you can see that all the `producer()` parts of the Contract that were present in the\n `value(consumer(...), producer(...))` blocks got injected into the test.\n If you use YAML, the same applies for the `matchers` sections of the `response`.\n \n@@ -1405,7 +1405,7 @@ That's it. You have finished the tutorial.\n \n Hopefully, this section provided some of the {project-full-name} basics and got you on your way\n to writing your own applications. If you are a task-oriented type of developer, you might\n-want to jump over to https://spring.io and check out some of the\n+want to jump over to https://spring.io and check out some\n https://spring.io/guides/[getting started] guides that solve specific \"`How do I do that\n with Spring?`\" problems. We also have {project-full-name}-specific\n \"`<<howto.adoc#howto, how-to>>`\" reference documentation."
  }
]
