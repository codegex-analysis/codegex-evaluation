[
  {
    "sha": "7b759da2952e801bd4c85ac550da5e46dce30cad",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignCircuitBreakerInvocationHandler.java",
    "status": "modified",
    "additions": 16,
    "deletions": 1,
    "changes": 17,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/01f892b9a4315307f413734f2c7070c62fcc8d1e/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignCircuitBreakerInvocationHandler.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/01f892b9a4315307f413734f2c7070c62fcc8d1e/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignCircuitBreakerInvocationHandler.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignCircuitBreakerInvocationHandler.java?ref=01f892b9a4315307f413734f2c7070c62fcc8d1e",
    "patch": "@@ -30,6 +30,8 @@\n \n import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;\n import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;\n+import org.springframework.web.context.request.RequestAttributes;\n+import org.springframework.web.context.request.RequestContextHolder;\n \n import static feign.Util.checkNotNull;\n \n@@ -75,7 +77,7 @@ else if (\"toString\".equals(method.getName())) {\n \t\t}\n \t\tString circuitName = Feign.configKey(target.type(), method);\n \t\tCircuitBreaker circuitBreaker = this.factory.create(circuitName);\n-\t\tSupplier<Object> supplier = asSupplier(method, args);\n+\t\tSupplier<Object> supplier = decorateRequestContext(asSupplier(method, args));\n \t\tif (this.nullableFallbackFactory != null) {\n \t\t\tFunction<Throwable, Object> fallbackFunction = throwable -> {\n \t\t\t\tObject fallback = this.nullableFallbackFactory.create(throwable);\n@@ -105,6 +107,19 @@ else if (\"toString\".equals(method.getName())) {\n \t\t};\n \t}\n \n+\tprivate <T> Supplier<T> decorateRequestContext(Supplier<T> supplier) {\n+\t\tfinal RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n+\t\treturn () -> {\n+\t\t\tRequestContextHolder.setRequestAttributes(requestAttributes);\n+\t\t\ttry {\n+\t\t\t\treturn supplier.get();\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tRequestContextHolder.resetRequestAttributes();\n+\t\t\t}\n+\t\t};\n+\t}\n+\n \t/**\n \t * If the method param of InvocationHandler.invoke is not accessible, i.e in a\n \t * package-private interface, the fallback call will cause of access restrictions. But"
  },
  {
    "sha": "593989bf44de185d9e075bd9294a59c6a0d843fd",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreaker.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/01f892b9a4315307f413734f2c7070c62fcc8d1e/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreaker.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/01f892b9a4315307f413734f2c7070c62fcc8d1e/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreaker.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreaker.java?ref=01f892b9a4315307f413734f2c7070c62fcc8d1e",
    "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.circuitbreaker;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;\n+\n+/**\n+ * Asynchronous circuit breaker.\n+ *\n+ * @author johnniang\n+ */\n+class AsyncCircuitBreaker implements CircuitBreaker {\n+\n+\tfinal Duration timeout;\n+\n+\tfinal ExecutorService executorService;\n+\n+\tAsyncCircuitBreaker(Duration timeout) {\n+\t\tthis.timeout = timeout;\n+\t\texecutorService = Executors.newCachedThreadPool();\n+\t}\n+\n+\tAsyncCircuitBreaker(Duration timeout, ExecutorService executorService) {\n+\t\tthis.timeout = timeout;\n+\t\tthis.executorService = executorService;\n+\t}\n+\n+\t@Override\n+\tpublic <T> T run(Supplier<T> toRun, Function<Throwable, T> fallback) {\n+\t\tFuture<T> future = executorService.submit(toRun::get);\n+\t\ttry {\n+\t\t\treturn future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+\t\t}\n+\t\tcatch (Throwable t) {\n+\t\t\treturn fallback.apply(t);\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "70761673afa82c71f533b4c9a7005d555aa00cf2",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreakerTest.java",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/01f892b9a4315307f413734f2c7070c62fcc8d1e/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreakerTest.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/01f892b9a4315307f413734f2c7070c62fcc8d1e/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreakerTest.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/circuitbreaker/AsyncCircuitBreakerTest.java?ref=01f892b9a4315307f413734f2c7070c62fcc8d1e",
    "patch": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.circuitbreaker;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import feign.RequestInterceptor;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;\n+import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;\n+import org.springframework.cloud.client.circuitbreaker.ConfigBuilder;\n+import org.springframework.cloud.openfeign.EnableFeignClients;\n+import org.springframework.cloud.openfeign.FeignClient;\n+import org.springframework.cloud.openfeign.test.NoSecurityConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+/**\n+ * Tests for asynchronous circuit breaker.\n+ *\n+ * @author johnniang\n+ */\n+@SpringBootTest(classes = AsyncCircuitBreakerTest.Application.class,\n+\t\twebEnvironment = RANDOM_PORT,\n+\t\tproperties = \"feign.circuitbreaker.enabled=true\")\n+@AutoConfigureMockMvc\n+class AsyncCircuitBreakerTest {\n+\n+\t@Autowired\n+\tMockMvc mvc;\n+\n+\t@Test\n+\tvoid shouldWorkNormally() throws Exception {\n+\t\tmvc.perform(get(\"/hello/proxy\"))\n+\t\t\t\t.andDo(print())\n+\t\t\t\t.andExpect(status().isOk())\n+\t\t\t\t.andExpect(content().string(\"openfeign\"));\n+\t}\n+\n+\t@Test\n+\tvoid shouldNotProxyAnyHeadersWithoutHeaderSet() throws Exception {\n+\t\tmvc.perform(get(\"/headers/\" + HttpHeaders.AUTHORIZATION + \"/proxy\"))\n+\t\t\t\t.andDo(print())\n+\t\t\t\t.andExpect(status().isOk())\n+\t\t\t\t.andExpect(content().string(\"\"));\n+\t}\n+\n+\t@Test\n+\tvoid shouldProxyHeaderWhenHeaderSet() throws Exception {\n+\t\tString authorization = UUID.randomUUID().toString();\n+\t\tmvc.perform(get(\"/headers/\" + HttpHeaders.AUTHORIZATION + \"/proxy\")\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, authorization))\n+\t\t\t\t.andDo(print())\n+\t\t\t\t.andExpect(status().isOk())\n+\t\t\t\t.andExpect(content().string(authorization));\n+\t}\n+\n+\t@EnableAutoConfiguration\n+\t@Configuration(proxyBeanMethods = false)\n+\t@EnableFeignClients(clients = {TestClient.class})\n+\t@Import({NoSecurityConfiguration.class, TestController.class})\n+\tstatic class Application {\n+\n+\t\t@Bean\n+\t\tCircuitBreakerFactory<Duration, ConfigBuilder<Duration>> circuitBreakerFactory() {\n+\t\t\treturn new CircuitBreakerFactory<Duration, ConfigBuilder<Duration>>() {\n+\n+\t\t\t\tFunction<String, Duration> defaultConfiguration = id -> Duration.ofMillis(1000);\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic CircuitBreaker create(String id) {\n+\t\t\t\t\tDuration timeout = super.getConfigurations().computeIfAbsent(id, defaultConfiguration);\n+\t\t\t\t\treturn new AsyncCircuitBreaker(timeout);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tprotected ConfigBuilder<Duration> configBuilder(String id) {\n+\t\t\t\t\treturn () -> Duration.ofMillis(100);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void configureDefault(Function<String, Duration> defaultConfiguration) {\n+\t\t\t\t\tthis.defaultConfiguration = defaultConfiguration;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\t@Bean\n+\t\tRequestInterceptor proxyHeaderRequestInterceptor() {\n+\t\t\treturn template -> {\n+\t\t\t\tServletRequestAttributes requestAttributes =\n+\t\t\t\t\t\t(ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n+\t\t\t\tString authorization = Objects.requireNonNull(requestAttributes).getRequest()\n+\t\t\t\t\t\t.getHeader(HttpHeaders.AUTHORIZATION);\n+\t\t\t\tif (authorization != null) {\n+\t\t\t\t\t// proxy authorization header\n+\t\t\t\t\ttemplate.header(HttpHeaders.AUTHORIZATION, authorization);\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\t}\n+\n+\t@RestController\n+\tstatic class TestController {\n+\n+\t\tfinal ObjectProvider<TestClient> testClient;\n+\n+\t\tTestController(ObjectProvider<TestClient> testClient) {\n+\t\t\tthis.testClient = testClient;\n+\t\t}\n+\n+\t\t@GetMapping(\"/hello\")\n+\t\tString hello() {\n+\t\t\treturn \"openfeign\";\n+\t\t}\n+\n+\t\t@GetMapping(\"/hello/proxy\")\n+\t\tString helloProxy() {\n+\t\t\treturn testClient.getObject().hello();\n+\t\t}\n+\n+\t\t@GetMapping(\"/headers/{headerName}\")\n+\t\tString header(HttpServletRequest request, @PathVariable String headerName) {\n+\t\t\treturn request.getHeader(headerName);\n+\t\t}\n+\n+\t\t@GetMapping(\"/headers/{headerName}/proxy\")\n+\t\tString headerProxy(@PathVariable String headerName) {\n+\t\t\treturn testClient.getObject().header(headerName);\n+\t\t}\n+\t}\n+\n+\t@FeignClient(name = \"async-circuit-breaker-test\", url = \"http://localhost:${local.server.port}\")\n+\tinterface TestClient {\n+\n+\t\t@GetMapping(\"/hello\")\n+\t\tString hello();\n+\n+\t\t@GetMapping(\"/headers/{headerName}\")\n+\t\tString header(@PathVariable String headerName);\n+\n+\t}\n+}"
  }
]
