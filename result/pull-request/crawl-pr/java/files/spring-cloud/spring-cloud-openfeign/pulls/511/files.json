[
  {
    "sha": "58511c24e9935d45b061c975ce22ef582bc2ffa2",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClient.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClient.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClient.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClient.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -145,4 +145,9 @@\n \t */\n \tboolean primary() default true;\n \n+\t/**\n+\t * @return whether Feign will use an underlying async Http client.\n+\t */\n+\tboolean asynchronous() default false;\n+\n }"
  },
  {
    "sha": "bcd79e1cc9155dd069f051db9ad2523154ca5470",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientFactoryBean.java",
    "status": "modified",
    "additions": 208,
    "deletions": 7,
    "changes": 215,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientFactoryBean.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientFactoryBean.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientFactoryBean.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -22,6 +22,9 @@\n import java.util.Objects;\n import java.util.concurrent.TimeUnit;\n \n+import feign.AsyncClient;\n+import feign.AsyncFeign;\n+import feign.AsyncFeign.AsyncBuilder;\n import feign.Client;\n import feign.Contract;\n import feign.ExceptionPropagationPolicy;\n@@ -43,6 +46,7 @@\n import org.springframework.beans.factory.FactoryBean;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.cloud.openfeign.async.AsyncTargeter;\n import org.springframework.cloud.openfeign.clientconfig.FeignClientConfigurer;\n import org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient;\n import org.springframework.cloud.openfeign.loadbalancer.RetryableFeignBlockingLoadBalancerClient;\n@@ -99,6 +103,8 @@\n \n \tprivate boolean followRedirects = new Request.Options().isFollowRedirects();\n \n+\tprivate boolean asynchronous = false;\n+\n \t@Override\n \tpublic void afterPropertiesSet() {\n \t\tAssert.hasText(contextId, \"Context id must be set\");\n@@ -124,6 +130,24 @@ public void afterPropertiesSet() {\n \t\treturn builder;\n \t}\n \n+\tprotected AsyncBuilder asyncFeign(FeignContext context) {\n+\t\tFeignLoggerFactory loggerFactory = get(context, FeignLoggerFactory.class);\n+\t\tLogger logger = loggerFactory.create(type);\n+\n+\t\t// @formatter:off\n+\t\tAsyncBuilder builder = get(context, AsyncBuilder.class)\n+\t\t\t// required values\n+\t\t\t.logger(logger)\n+\t\t\t.encoder(get(context, Encoder.class))\n+\t\t\t.decoder(get(context, Decoder.class))\n+\t\t\t.contract(get(context, Contract.class));\n+\t\t// @formatter:on\n+\n+\t\tconfigureFeign(context, builder);\n+\n+\t\treturn builder;\n+\t}\n+\n \tprivate void applyBuildCustomizers(FeignContext context, Feign.Builder builder) {\n \t\tMap<String, FeignBuilderCustomizer> customizerMap = context\n \t\t\t\t.getInstances(contextId, FeignBuilderCustomizer.class);\n@@ -166,6 +190,36 @@ protected void configureFeign(FeignContext context, Feign.Builder builder) {\n \t\t}\n \t}\n \n+\tprotected void configureFeign(FeignContext context, AsyncBuilder builder) {\n+\t\tFeignClientProperties properties = beanFactory != null\n+\t\t\t\t? beanFactory.getBean(FeignClientProperties.class)\n+\t\t\t\t: applicationContext.getBean(FeignClientProperties.class);\n+\n+\t\tFeignClientConfigurer feignClientConfigurer = getOptional(context,\n+\t\t\t\tFeignClientConfigurer.class);\n+\t\tsetInheritParentContext(feignClientConfigurer.inheritParentConfiguration());\n+\n+\t\tif (properties != null && inheritParentContext) {\n+\t\t\tif (properties.isDefaultToProperties()) {\n+\t\t\t\tconfigureUsingConfiguration(context, builder);\n+\t\t\t\tconfigureUsingProperties(\n+\t\t\t\t\t\tproperties.getConfig().get(properties.getDefaultConfig()),\n+\t\t\t\t\t\tbuilder);\n+\t\t\t\tconfigureUsingProperties(properties.getConfig().get(contextId), builder);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tconfigureUsingProperties(\n+\t\t\t\t\t\tproperties.getConfig().get(properties.getDefaultConfig()),\n+\t\t\t\t\t\tbuilder);\n+\t\t\t\tconfigureUsingProperties(properties.getConfig().get(contextId), builder);\n+\t\t\t\tconfigureUsingConfiguration(context, builder);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tconfigureUsingConfiguration(context, builder);\n+\t\t}\n+\t}\n+\n \tprotected void configureUsingConfiguration(FeignContext context,\n \t\t\tFeign.Builder builder) {\n \t\tLogger.Level level = getInheritedAwareOptional(context, Logger.Level.class);\n@@ -220,6 +274,51 @@ protected void configureUsingConfiguration(FeignContext context,\n \t\t}\n \t}\n \n+\tprotected void configureUsingConfiguration(FeignContext context,\n+\t\t\tAsyncBuilder builder) {\n+\t\tLogger.Level level = getInheritedAwareOptional(context, Logger.Level.class);\n+\t\tif (level != null) {\n+\t\t\tbuilder.logLevel(level);\n+\t\t}\n+\t\tErrorDecoder errorDecoder = getInheritedAwareOptional(context,\n+\t\t\t\tErrorDecoder.class);\n+\t\tif (errorDecoder != null) {\n+\t\t\tbuilder.errorDecoder(errorDecoder);\n+\t\t}\n+\t\telse {\n+\t\t\tFeignErrorDecoderFactory errorDecoderFactory = getOptional(context,\n+\t\t\t\t\tFeignErrorDecoderFactory.class);\n+\t\t\tif (errorDecoderFactory != null) {\n+\t\t\t\tErrorDecoder factoryErrorDecoder = errorDecoderFactory.create(type);\n+\t\t\t\tbuilder.errorDecoder(factoryErrorDecoder);\n+\t\t\t}\n+\t\t}\n+\t\tRequest.Options options = getInheritedAwareOptional(context,\n+\t\t\t\tRequest.Options.class);\n+\t\tif (options != null) {\n+\t\t\tbuilder.options(options);\n+\t\t\treadTimeoutMillis = options.readTimeoutMillis();\n+\t\t\tconnectTimeoutMillis = options.connectTimeoutMillis();\n+\t\t\tfollowRedirects = options.isFollowRedirects();\n+\t\t}\n+\t\tMap<String, RequestInterceptor> requestInterceptors = getInheritedAwareInstances(\n+\t\t\t\tcontext, RequestInterceptor.class);\n+\t\tif (requestInterceptors != null) {\n+\t\t\tList<RequestInterceptor> interceptors = new ArrayList<>(\n+\t\t\t\t\trequestInterceptors.values());\n+\t\t\tAnnotationAwareOrderComparator.sort(interceptors);\n+\t\t\tbuilder.requestInterceptors(interceptors);\n+\t\t}\n+\t\tQueryMapEncoder queryMapEncoder = getInheritedAwareOptional(context,\n+\t\t\t\tQueryMapEncoder.class);\n+\t\tif (queryMapEncoder != null) {\n+\t\t\tbuilder.queryMapEncoder(queryMapEncoder);\n+\t\t}\n+\t\tif (decode404) {\n+\t\t\tbuilder.decode404();\n+\t\t}\n+\t}\n+\n \tprotected void configureUsingProperties(\n \t\t\tFeignClientProperties.FeignClientConfiguration config,\n \t\t\tFeign.Builder builder) {\n@@ -293,6 +392,69 @@ protected void configureUsingProperties(\n \t\t}\n \t}\n \n+\tprotected void configureUsingProperties(\n+\t\t\tFeignClientProperties.FeignClientConfiguration config, AsyncBuilder builder) {\n+\t\tif (config == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (config.getLoggerLevel() != null) {\n+\t\t\tbuilder.logLevel(config.getLoggerLevel());\n+\t\t}\n+\n+\t\tconnectTimeoutMillis = config.getConnectTimeout() != null\n+\t\t\t\t? config.getConnectTimeout() : connectTimeoutMillis;\n+\t\treadTimeoutMillis = config.getReadTimeout() != null ? config.getReadTimeout()\n+\t\t\t\t: readTimeoutMillis;\n+\t\tfollowRedirects = config.isFollowRedirects() != null ? config.isFollowRedirects()\n+\t\t\t\t: followRedirects;\n+\n+\t\tbuilder.options(new Request.Options(connectTimeoutMillis, TimeUnit.MILLISECONDS,\n+\t\t\t\treadTimeoutMillis, TimeUnit.MILLISECONDS, followRedirects));\n+\n+\t\tif (config.getErrorDecoder() != null) {\n+\t\t\tErrorDecoder errorDecoder = getOrInstantiate(config.getErrorDecoder());\n+\t\t\tbuilder.errorDecoder(errorDecoder);\n+\t\t}\n+\n+\t\tif (config.getRequestInterceptors() != null\n+\t\t\t\t&& !config.getRequestInterceptors().isEmpty()) {\n+\t\t\t// this will add request interceptor to builder, not replace existing\n+\t\t\tfor (Class<RequestInterceptor> bean : config.getRequestInterceptors()) {\n+\t\t\t\tRequestInterceptor interceptor = getOrInstantiate(bean);\n+\t\t\t\tbuilder.requestInterceptor(interceptor);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (config.getDecode404() != null) {\n+\t\t\tif (config.getDecode404()) {\n+\t\t\t\tbuilder.decode404();\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (Objects.nonNull(config.getEncoder())) {\n+\t\t\tbuilder.encoder(getOrInstantiate(config.getEncoder()));\n+\t\t}\n+\n+\t\tif (Objects.nonNull(config.getDefaultRequestHeaders())) {\n+\t\t\tbuilder.requestInterceptor(requestTemplate -> requestTemplate\n+\t\t\t\t\t.headers(config.getDefaultRequestHeaders()));\n+\t\t}\n+\n+\t\tif (Objects.nonNull(config.getDefaultQueryParameters())) {\n+\t\t\tbuilder.requestInterceptor(requestTemplate -> requestTemplate\n+\t\t\t\t\t.queries(config.getDefaultQueryParameters()));\n+\t\t}\n+\n+\t\tif (Objects.nonNull(config.getDecoder())) {\n+\t\t\tbuilder.decoder(getOrInstantiate(config.getDecoder()));\n+\t\t}\n+\n+\t\tif (Objects.nonNull(config.getContract())) {\n+\t\t\tbuilder.contract(getOrInstantiate(config.getContract()));\n+\t\t}\n+\t}\n+\n \tprivate <T> T getOrInstantiate(Class<T> tClass) {\n \t\ttry {\n \t\t\treturn beanFactory != null ? beanFactory.getBean(tClass)\n@@ -350,6 +512,9 @@ protected void configureUsingProperties(\n \n \t@Override\n \tpublic Object getObject() {\n+\t\tif (asynchronous) {\n+\t\t\treturn getAsyncTarget();\n+\t\t}\n \t\treturn getTarget();\n \t}\n \n@@ -404,6 +569,33 @@ public Object getObject() {\n \t\t\t\tnew HardCodedTarget<>(type, name, url));\n \t}\n \n+\t/**\n+\t * @param <T> the target type of the Feign client\n+\t * @return an {@link AsyncFeign} client created with the specified data and the\n+\t * context information\n+\t */\n+\t<T> T getAsyncTarget() {\n+\t\tFeignContext context = beanFactory != null\n+\t\t\t\t? beanFactory.getBean(FeignContext.class)\n+\t\t\t\t: applicationContext.getBean(FeignContext.class);\n+\t\tAsyncBuilder builder = asyncFeign(context);\n+\n+\t\tif (!StringUtils.hasText(url)) {\n+\t\t\turl = name;\n+\t\t}\n+\t\tif (StringUtils.hasText(url) && !url.startsWith(\"http\")) {\n+\t\t\turl = \"http://\" + url;\n+\t\t}\n+\t\tString url = this.url + cleanPath();\n+\t\tAsyncClient client = getOptional(context, AsyncClient.class);\n+\t\tif (client != null) {\n+\t\t\tbuilder.client(client);\n+\t\t}\n+\t\tAsyncTargeter targeter = get(context, AsyncTargeter.class);\n+\t\treturn (T) targeter.target(this, builder, context,\n+\t\t\t\tnew HardCodedTarget<>(type, name, url));\n+\t}\n+\n \tprivate String cleanPath() {\n \t\tString path = this.path.trim();\n \t\tif (StringUtils.hasLength(path)) {\n@@ -509,6 +701,14 @@ public void setFallbackFactory(Class<?> fallbackFactory) {\n \t\tthis.fallbackFactory = fallbackFactory;\n \t}\n \n+\tpublic boolean isAsynchronous() {\n+\t\treturn asynchronous;\n+\t}\n+\n+\tpublic void setAsynchronous(boolean asynchronous) {\n+\t\tthis.asynchronous = asynchronous;\n+\t}\n+\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\tif (this == o) {\n@@ -528,14 +728,15 @@ public boolean equals(Object o) {\n \t\t\t\t&& Objects.equals(type, that.type) && Objects.equals(url, that.url)\n \t\t\t\t&& Objects.equals(connectTimeoutMillis, that.connectTimeoutMillis)\n \t\t\t\t&& Objects.equals(readTimeoutMillis, that.readTimeoutMillis)\n-\t\t\t\t&& Objects.equals(followRedirects, that.followRedirects);\n+\t\t\t\t&& Objects.equals(followRedirects, that.followRedirects)\n+\t\t\t\t&& Objects.equals(asynchronous, that.asynchronous);\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n \t\treturn Objects.hash(applicationContext, beanFactory, decode404,\n \t\t\t\tinheritParentContext, fallback, fallbackFactory, name, path, type, url,\n-\t\t\t\treadTimeoutMillis, connectTimeoutMillis, followRedirects);\n+\t\t\t\treadTimeoutMillis, connectTimeoutMillis, followRedirects, asynchronous);\n \t}\n \n \t@Override\n@@ -548,11 +749,11 @@ public String toString() {\n \t\t\t\t.append(\"applicationContext=\").append(applicationContext).append(\", \")\n \t\t\t\t.append(\"beanFactory=\").append(beanFactory).append(\", \")\n \t\t\t\t.append(\"fallback=\").append(fallback).append(\", \")\n-\t\t\t\t.append(\"fallbackFactory=\").append(fallbackFactory).append(\"}\")\n-\t\t\t\t.append(\"connectTimeoutMillis=\").append(connectTimeoutMillis).append(\"}\")\n-\t\t\t\t.append(\"readTimeoutMillis=\").append(readTimeoutMillis).append(\"}\")\n-\t\t\t\t.append(\"followRedirects=\").append(followRedirects).append(\"}\")\n-\t\t\t\t.toString();\n+\t\t\t\t.append(\"fallbackFactory=\").append(fallbackFactory).append(\", \")\n+\t\t\t\t.append(\"connectTimeoutMillis=\").append(connectTimeoutMillis).append(\", \")\n+\t\t\t\t.append(\"readTimeoutMillis=\").append(readTimeoutMillis).append(\", \")\n+\t\t\t\t.append(\"followRedirects=\").append(followRedirects).append(\", \")\n+\t\t\t\t.append(\"asynchronous=\").append(asynchronous).append(\"}\").toString();\n \t}\n \n \t@Override"
  },
  {
    "sha": "baf5482a4e9986af30ce6b1f3f52b43250764709",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsConfiguration.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsConfiguration.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsConfiguration.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsConfiguration.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -20,6 +20,7 @@\n import java.util.List;\n \n import com.netflix.hystrix.HystrixCommand;\n+import feign.AsyncFeign;\n import feign.Contract;\n import feign.Feign;\n import feign.Logger;\n@@ -35,6 +36,7 @@\n import org.springframework.beans.factory.ObjectFactory;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -158,12 +160,19 @@ public Retryer feignRetryer() {\n \t}\n \n \t@Bean\n-\t@Scope(\"prototype\")\n+\t@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n \t@ConditionalOnMissingBean\n \tpublic Feign.Builder feignBuilder(Retryer retryer) {\n \t\treturn Feign.builder().retryer(retryer);\n \t}\n \n+\t@Bean\n+\t@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+\t@ConditionalOnMissingBean\n+\tpublic AsyncFeign.AsyncBuilder asyncFeignBuilder() {\n+\t\treturn AsyncFeign.asyncBuilder();\n+\t}\n+\n \t@Bean\n \t@ConditionalOnMissingBean(FeignLoggerFactory.class)\n \tpublic FeignLoggerFactory feignLoggerFactory() {"
  },
  {
    "sha": "706f163ce180a7ac12970f9d50a6898f1543cd2d",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsRegistrar.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsRegistrar.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsRegistrar.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientsRegistrar.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -219,11 +219,13 @@ private void registerFeignClient(BeanDefinitionRegistry registry,\n \t\t\t\t? (ConfigurableBeanFactory) registry : null;\n \t\tString contextId = getContextId(beanFactory, attributes);\n \t\tString name = getName(attributes);\n+\t\tboolean asynchronous = (Boolean) attributes.get(\"asynchronous\");\n \t\tFeignClientFactoryBean factoryBean = new FeignClientFactoryBean();\n \t\tfactoryBean.setBeanFactory(beanFactory);\n \t\tfactoryBean.setName(name);\n \t\tfactoryBean.setContextId(contextId);\n \t\tfactoryBean.setType(clazz);\n+\t\tfactoryBean.setAsynchronous(asynchronous);\n \t\tBeanDefinitionBuilder definition = BeanDefinitionBuilder\n \t\t\t\t.genericBeanDefinition(clazz, () -> {\n \t\t\t\t\tfactoryBean.setUrl(getUrl(beanFactory, attributes));\n@@ -255,7 +257,6 @@ private void registerFeignClient(BeanDefinitionRegistry registry,\n \n \t\t// has a default, won't be null\n \t\tboolean primary = (Boolean) attributes.get(\"primary\");\n-\n \t\tbeanDefinition.setPrimary(primary);\n \n \t\tString[] qualifiers = getQualifiers(attributes);"
  },
  {
    "sha": "11fb100bf4a7cd7c5962c80a1edd4122c563660d",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfiguration.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfiguration.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfiguration.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfiguration.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.async;\n+\n+import feign.AsyncClient;\n+import feign.AsyncFeign;\n+import feign.hc5.AsyncApacheHttp5Client;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.protocol.HttpClientContext;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+/**\n+ * An autoconfiguration that instantiates implementations of {@link AsyncClient} and\n+ * implementations of {@link AsyncTargeter}.\n+ *\n+ * @author Nguyen Ky Thanh\n+ */\n+@ConditionalOnClass(AsyncFeign.class)\n+@Configuration(proxyBeanMethods = false)\n+public class AsyncFeignAutoConfiguration {\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\t@ConditionalOnClass(AsyncApacheHttp5Client.class)\n+\t@ConditionalOnProperty(value = \"feign.httpclient.asyncHc5.enabled\",\n+\t\t\thavingValue = \"true\")\n+\t@Import(org.springframework.cloud.openfeign.async.AsyncHttpClient5FeignConfiguration.class)\n+\tprotected static class AsyncHttpClient5FeignConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic AsyncClient<HttpClientContext> asyncClient(\n+\t\t\t\tCloseableHttpAsyncClient httpAsyncClient) {\n+\t\t\treturn new AsyncApacheHttp5Client(httpAsyncClient);\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration(proxyBeanMethods = false)\n+\tprotected static class DefaultAsyncFeignTargeterConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic AsyncTargeter asyncTargeter() {\n+\t\t\treturn new DefaultAsyncTargeter();\n+\t\t}\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "e9eb3650541900abe6dfb2efb9e8ffc908454181",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfiguration.java",
    "status": "added",
    "additions": 175,
    "deletions": 0,
    "changes": 175,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfiguration.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfiguration.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfiguration.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.async;\n+\n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PreDestroy;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hc.client5.http.config.RequestConfig;\n+import org.apache.hc.client5.http.cookie.StandardCookieSpec;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.impl.async.HttpAsyncClients;\n+import org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder;\n+import org.apache.hc.client5.http.io.HttpClientConnectionManager;\n+import org.apache.hc.client5.http.nio.AsyncClientConnectionManager;\n+import org.apache.hc.client5.http.ssl.ClientTlsStrategyBuilder;\n+import org.apache.hc.core5.http.nio.ssl.TlsStrategy;\n+import org.apache.hc.core5.http.ssl.TLS;\n+import org.apache.hc.core5.http2.HttpVersionPolicy;\n+import org.apache.hc.core5.io.CloseMode;\n+import org.apache.hc.core5.pool.PoolConcurrencyPolicy;\n+import org.apache.hc.core5.pool.PoolReusePolicy;\n+import org.apache.hc.core5.reactor.IOReactorConfig;\n+import org.apache.hc.core5.ssl.SSLContexts;\n+import org.apache.hc.core5.util.TimeValue;\n+import org.apache.hc.core5.util.Timeout;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.openfeign.support.FeignHttpClientProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * @author Nguyen Ky Thanh\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnMissingBean(CloseableHttpAsyncClient.class)\n+@EnableConfigurationProperties(FeignHttpClientProperties.class)\n+public class AsyncHttpClient5FeignConfiguration {\n+\n+\tprivate static final Log LOG = LogFactory\n+\t\t\t.getLog(AsyncHttpClient5FeignConfiguration.class);\n+\n+\tprivate CloseableHttpAsyncClient asyncHttpClient5;\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(HttpClientConnectionManager.class)\n+\tpublic AsyncClientConnectionManager asyncHc5ConnectionManager(\n+\t\t\tFeignHttpClientProperties httpClientProperties) {\n+\t\treturn PoolingAsyncClientConnectionManagerBuilder.create()\n+\t\t\t\t.setTlsStrategy(\n+\t\t\t\t\t\tclientTlsStrategy(httpClientProperties.isDisableSslValidation()))\n+\t\t\t\t.setMaxConnTotal(httpClientProperties.getMaxConnections())\n+\t\t\t\t.setMaxConnPerRoute(httpClientProperties.getMaxConnectionsPerRoute())\n+\t\t\t\t.setConnPoolPolicy(PoolReusePolicy.valueOf(\n+\t\t\t\t\t\thttpClientProperties.getAsyncHc5().getPoolReusePolicy().name()))\n+\t\t\t\t.setPoolConcurrencyPolicy(\n+\t\t\t\t\t\tPoolConcurrencyPolicy.valueOf(httpClientProperties.getAsyncHc5()\n+\t\t\t\t\t\t\t\t.getPoolConcurrencyPolicy().name()))\n+\t\t\t\t.setConnectionTimeToLive(\n+\t\t\t\t\t\tTimeValue.of(httpClientProperties.getTimeToLive(),\n+\t\t\t\t\t\t\t\thttpClientProperties.getTimeToLiveUnit()))\n+\t\t\t\t.build();\n+\t}\n+\n+\t@Bean\n+\tpublic CloseableHttpAsyncClient asyncHttpClient5(\n+\t\t\tAsyncClientConnectionManager asyncClientConnectionManager,\n+\t\t\tFeignHttpClientProperties httpClientProperties) {\n+\t\tfinal IOReactorConfig ioReactorConfig = IOReactorConfig.custom()\n+\t\t\t\t.setSoTimeout(Timeout\n+\t\t\t\t\t\t.ofMilliseconds(httpClientProperties.getConnectionTimerRepeat()))\n+\t\t\t\t.build();\n+\t\tasyncHttpClient5 = HttpAsyncClients.custom().disableCookieManagement()\n+\t\t\t\t.useSystemProperties() // Need for proxy\n+\t\t\t\t.setVersionPolicy(HttpVersionPolicy.valueOf(\n+\t\t\t\t\t\thttpClientProperties.getAsyncHc5().getHttpVersionPolicy().name())) // Need\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// for\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// proxy\n+\t\t\t\t.setConnectionManager(asyncClientConnectionManager)\n+\t\t\t\t.evictExpiredConnections().setIOReactorConfig(ioReactorConfig)\n+\t\t\t\t.setDefaultRequestConfig(\n+\t\t\t\t\t\tRequestConfig.custom()\n+\t\t\t\t\t\t\t\t.setConnectTimeout(Timeout.of(\n+\t\t\t\t\t\t\t\t\t\thttpClientProperties.getConnectionTimeout(),\n+\t\t\t\t\t\t\t\t\t\tTimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t\t\t.setResponseTimeout(Timeout.of(\n+\t\t\t\t\t\t\t\t\t\thttpClientProperties.getAsyncHc5()\n+\t\t\t\t\t\t\t\t\t\t\t\t.getResponseTimeout(),\n+\t\t\t\t\t\t\t\t\t\thttpClientProperties.getAsyncHc5()\n+\t\t\t\t\t\t\t\t\t\t\t\t.getResponseTimeoutUnit()))\n+\t\t\t\t\t\t\t\t.setCookieSpec(StandardCookieSpec.STRICT).build())\n+\t\t\t\t.build();\n+\t\tasyncHttpClient5.start();\n+\t\treturn asyncHttpClient5;\n+\t}\n+\n+\t@PreDestroy\n+\tpublic void destroy() {\n+\t\tif (asyncHttpClient5 != null) {\n+\t\t\tasyncHttpClient5.close(CloseMode.GRACEFUL);\n+\t\t}\n+\t}\n+\n+\tprivate TlsStrategy clientTlsStrategy(boolean isDisableSslValidation) {\n+\t\tfinal ClientTlsStrategyBuilder clientTlsStrategyBuilder = ClientTlsStrategyBuilder\n+\t\t\t\t.create();\n+\n+\t\tif (isDisableSslValidation) {\n+\t\t\ttry {\n+\t\t\t\tfinal SSLContext disabledSslContext = SSLContext.getInstance(\"SSL\");\n+\t\t\t\tdisabledSslContext.init(null, new TrustManager[] {\n+\t\t\t\t\t\tnew AsyncHttpClient5FeignConfiguration.DisabledValidationTrustManager() },\n+\t\t\t\t\t\tnew SecureRandom());\n+\t\t\t\tclientTlsStrategyBuilder.setSslContext(disabledSslContext);\n+\t\t\t}\n+\t\t\tcatch (NoSuchAlgorithmException e) {\n+\t\t\t\tLOG.warn(\"Error creating SSLContext\", e);\n+\t\t\t}\n+\t\t\tcatch (KeyManagementException e) {\n+\t\t\t\tLOG.warn(\"Error creating SSLContext\", e);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\tclientTlsStrategyBuilder.setSslContext(SSLContexts.createSystemDefault());\n+\t\t}\n+\n+\t\treturn clientTlsStrategyBuilder.setTlsVersions(TLS.V_1_3, TLS.V_1_2).build();\n+\t}\n+\n+\tstatic class DisabledValidationTrustManager implements X509TrustManager {\n+\n+\t\tDisabledValidationTrustManager() {\n+\t\t}\n+\n+\t\tpublic void checkClientTrusted(X509Certificate[] x509Certificates, String s)\n+\t\t\t\tthrows CertificateException {\n+\t\t}\n+\n+\t\tpublic void checkServerTrusted(X509Certificate[] x509Certificates, String s)\n+\t\t\t\tthrows CertificateException {\n+\t\t}\n+\n+\t\tpublic X509Certificate[] getAcceptedIssuers() {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "7a525069f6f3519bb79937147611e3659c9df974",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncTargeter.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncTargeter.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncTargeter.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/AsyncTargeter.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.async;\n+\n+import feign.AsyncFeign.AsyncBuilder;\n+import feign.Target;\n+\n+import org.springframework.cloud.openfeign.FeignClientFactoryBean;\n+import org.springframework.cloud.openfeign.FeignContext;\n+\n+/**\n+ * @author Nguyen Ky Thanh\n+ */\n+public interface AsyncTargeter<C> {\n+\n+\t<T> T target(FeignClientFactoryBean factory, AsyncBuilder<C> feign,\n+\t\t\tFeignContext context, Target.HardCodedTarget<T> target);\n+\n+}"
  },
  {
    "sha": "f3b431f5d1e28dcc93bfef3de21f7041e8d1f7f7",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/DefaultAsyncTargeter.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/DefaultAsyncTargeter.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/DefaultAsyncTargeter.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/async/DefaultAsyncTargeter.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.async;\n+\n+import feign.AsyncFeign.AsyncBuilder;\n+import feign.Target;\n+\n+import org.springframework.cloud.openfeign.FeignClientFactoryBean;\n+import org.springframework.cloud.openfeign.FeignContext;\n+\n+/**\n+ * @author Nguyen Ky Thanh\n+ */\n+public class DefaultAsyncTargeter<C> implements AsyncTargeter<C> {\n+\n+\t@Override\n+\tpublic <T> T target(FeignClientFactoryBean factory, AsyncBuilder<C> feign,\n+\t\t\tFeignContext context, Target.HardCodedTarget<T> target) {\n+\t\treturn feign.target(target);\n+\t}\n+\n+}"
  },
  {
    "sha": "f53d9a00518720d0461c77ccf7e208e33f059f9c",
    "filename": "spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/FeignHttpClientProperties.java",
    "status": "modified",
    "additions": 155,
    "deletions": 23,
    "changes": 178,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/FeignHttpClientProperties.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/FeignHttpClientProperties.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/FeignHttpClientProperties.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -88,6 +88,11 @@\n \t */\n \tprivate Hc5Properties hc5 = new Hc5Properties();\n \n+\t/**\n+\t * Apache Async HttpClient5 additional properties.\n+\t */\n+\tprivate AsyncHc5Properties asyncHc5 = new AsyncHc5Properties();\n+\n \tpublic int getConnectionTimerRepeat() {\n \t\treturn this.connectionTimerRepeat;\n \t}\n@@ -160,6 +165,14 @@ public void setHc5(Hc5Properties hc5) {\n \t\tthis.hc5 = hc5;\n \t}\n \n+\tpublic AsyncHc5Properties getAsyncHc5() {\n+\t\treturn asyncHc5;\n+\t}\n+\n+\tpublic void setAsyncHc5(AsyncHc5Properties asyncHc5) {\n+\t\tthis.asyncHc5 = asyncHc5;\n+\t}\n+\n \tpublic static class Hc5Properties {\n \n \t\t/**\n@@ -235,42 +248,161 @@ public void setSocketTimeout(int socketTimeout) {\n \t\t\tthis.socketTimeout = socketTimeout;\n \t\t}\n \n+\t}\n+\n+\tpublic static class AsyncHc5Properties {\n+\n \t\t/**\n-\t\t * Enumeration of pool concurrency policies.\n+\t\t * Default value for pool concurrency policy.\n \t\t */\n-\t\tpublic enum PoolConcurrencyPolicy {\n+\t\tpublic static final PoolConcurrencyPolicy DEFAULT_POOL_CONCURRENCY_POLICY = PoolConcurrencyPolicy.STRICT;\n \n-\t\t\t/**\n-\t\t\t * Higher concurrency but with lax connection max limit guarantees.\n-\t\t\t */\n-\t\t\tLAX,\n+\t\t/**\n+\t\t * Default value for pool reuse policy.\n+\t\t */\n+\t\tpublic static final PoolReusePolicy DEFAULT_POOL_REUSE_POLICY = PoolReusePolicy.FIFO;\n \n-\t\t\t/**\n-\t\t\t * Strict connection max limit guarantees.\n-\t\t\t */\n-\t\t\tSTRICT\n+\t\t/**\n+\t\t * Default value for response timeout.\n+\t\t */\n+\t\tpublic static final int DEFAULT_RESPONSE_TIMEOUT = 0;\n \n-\t\t}\n+\t\t/**\n+\t\t * Default value for response timeout unit.\n+\t\t */\n+\t\tpublic static final TimeUnit DEFAULT_RESPONSE_TIMEOUT_UNIT = TimeUnit.SECONDS;\n \n \t\t/**\n-\t\t * Enumeration of pooled connection re-use policies.\n+\t\t * Default HTTP protocol version policy.\n \t\t */\n-\t\tpublic enum PoolReusePolicy {\n+\t\tprivate static final HttpVersionPolicy DEFAULT_HTTP_VERSION_POLICY = HttpVersionPolicy.FORCE_HTTP_1;\n \n-\t\t\t/**\n-\t\t\t * Re-use as few connections as possible making it possible for connections to\n-\t\t\t * become idle and expire.\n-\t\t\t */\n-\t\t\tLIFO,\n+\t\t/**\n+\t\t * Pool concurrency policies.\n+\t\t */\n+\t\tprivate PoolConcurrencyPolicy poolConcurrencyPolicy = DEFAULT_POOL_CONCURRENCY_POLICY;\n \n-\t\t\t/**\n-\t\t\t * Re-use all connections equally preventing them from becoming idle and\n-\t\t\t * expiring.\n-\t\t\t */\n-\t\t\tFIFO\n+\t\t/**\n+\t\t * Pool connection re-use policies.\n+\t\t */\n+\t\tprivate PoolReusePolicy poolReusePolicy = DEFAULT_POOL_REUSE_POLICY;\n \n+\t\t/**\n+\t\t * Determines the timeout until arrival of a response from the opposite endpoint.\n+\t\t * A timeout value of zero is interpreted as an infinite timeout. Please note that\n+\t\t * response timeout may be unsupported by HTTP transports with message\n+\t\t * multiplexing.\n+\t\t */\n+\t\tprivate int responseTimeout = DEFAULT_RESPONSE_TIMEOUT;\n+\n+\t\t/**\n+\t\t * Default value for response timeout unit.\n+\t\t */\n+\t\tprivate TimeUnit responseTimeoutUnit = DEFAULT_RESPONSE_TIMEOUT_UNIT;\n+\n+\t\t/**\n+\t\t * HTTP protocol version policy.\n+\t\t */\n+\t\tprivate HttpVersionPolicy httpVersionPolicy = DEFAULT_HTTP_VERSION_POLICY;\n+\n+\t\tpublic PoolConcurrencyPolicy getPoolConcurrencyPolicy() {\n+\t\t\treturn this.poolConcurrencyPolicy;\n+\t\t}\n+\n+\t\tpublic void setPoolConcurrencyPolicy(\n+\t\t\t\tPoolConcurrencyPolicy poolConcurrencyPolicy) {\n+\t\t\tthis.poolConcurrencyPolicy = poolConcurrencyPolicy;\n \t\t}\n \n+\t\tpublic PoolReusePolicy getPoolReusePolicy() {\n+\t\t\treturn poolReusePolicy;\n+\t\t}\n+\n+\t\tpublic void setPoolReusePolicy(PoolReusePolicy poolReusePolicy) {\n+\t\t\tthis.poolReusePolicy = poolReusePolicy;\n+\t\t}\n+\n+\t\tpublic int getResponseTimeout() {\n+\t\t\treturn responseTimeout;\n+\t\t}\n+\n+\t\tpublic void setResponseTimeout(int responseTimeout) {\n+\t\t\tthis.responseTimeout = responseTimeout;\n+\t\t}\n+\n+\t\tpublic TimeUnit getResponseTimeoutUnit() {\n+\t\t\treturn responseTimeoutUnit;\n+\t\t}\n+\n+\t\tpublic void setResponseTimeoutUnit(TimeUnit responseTimeoutUnit) {\n+\t\t\tthis.responseTimeoutUnit = responseTimeoutUnit;\n+\t\t}\n+\n+\t\tpublic HttpVersionPolicy getHttpVersionPolicy() {\n+\t\t\treturn httpVersionPolicy;\n+\t\t}\n+\n+\t\tpublic void setHttpVersionPolicy(HttpVersionPolicy httpVersionPolicy) {\n+\t\t\tthis.httpVersionPolicy = httpVersionPolicy;\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * HTTP protocol version policy.\n+\t */\n+\tpublic enum HttpVersionPolicy {\n+\n+\t\t/**\n+\t\t * Force to use HTTP v1.\n+\t\t */\n+\t\tFORCE_HTTP_1,\n+\n+\t\t/**\n+\t\t * Force to use HTTP v2.\n+\t\t */\n+\t\tFORCE_HTTP_2,\n+\n+\t\t/**\n+\t\t * Try to use HTTP v2 otherwise fallback to HTTP v1.\n+\t\t */\n+\t\tNEGOTIATE\n+\n+\t}\n+\n+\t/**\n+\t * Enumeration of pool concurrency policies.\n+\t */\n+\tpublic enum PoolConcurrencyPolicy {\n+\n+\t\t/**\n+\t\t * Higher concurrency but with lax connection max limit guarantees.\n+\t\t */\n+\t\tLAX,\n+\n+\t\t/**\n+\t\t * Strict connection max limit guarantees.\n+\t\t */\n+\t\tSTRICT\n+\n+\t}\n+\n+\t/**\n+\t * Enumeration of pooled connection re-use policies.\n+\t */\n+\tpublic enum PoolReusePolicy {\n+\n+\t\t/**\n+\t\t * Re-use as few connections as possible making it possible for connections to\n+\t\t * become idle and expire.\n+\t\t */\n+\t\tLIFO,\n+\n+\t\t/**\n+\t\t * Re-use all connections equally preventing them from becoming idle and expiring.\n+\t\t */\n+\t\tFIFO\n+\n \t}\n \n }"
  },
  {
    "sha": "91353dafdf9d407e0efeaac065abd0f6832ba389",
    "filename": "spring-cloud-openfeign-core/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/resources/META-INF/additional-spring-configuration-metadata.json?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -38,6 +38,12 @@\n \t\t\t\"description\": \"Enables the use of the OK HTTP Client by Feign.\",\n \t\t\t\"defaultValue\": \"false\"\n \t\t},\n+\t\t{\n+\t\t\t\"name\": \"feign.httpclient.asyncHc5.enabled\",\n+\t\t\t\"type\": \"java.lang.Boolean\",\n+\t\t\t\"description\": \"Enables the use of the Apache Async HTTP Client 5 by Feign for all @FeignClient with asynchronous=true.\",\n+\t\t\t\"defaultValue\": \"false\"\n+\t\t},\n \t\t{\n \t\t\t\"name\": \"feign.compression.response.enabled\",\n \t\t\t\"type\": \"java.lang.Boolean\","
  },
  {
    "sha": "b0e676bc64b2909e36baacd4f374fa911d5f4585",
    "filename": "spring-cloud-openfeign-core/src/main/resources/META-INF/spring.factories",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/resources/META-INF/spring.factories",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/main/resources/META-INF/spring.factories",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/main/resources/META-INF/spring.factories?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -4,4 +4,5 @@ org.springframework.cloud.openfeign.hateoas.FeignHalAutoConfiguration,\\\n org.springframework.cloud.openfeign.FeignAutoConfiguration,\\\n org.springframework.cloud.openfeign.encoding.FeignAcceptGzipEncodingAutoConfiguration,\\\n org.springframework.cloud.openfeign.encoding.FeignContentGzipEncodingAutoConfiguration,\\\n-org.springframework.cloud.openfeign.loadbalancer.FeignLoadBalancerAutoConfiguration\n+org.springframework.cloud.openfeign.loadbalancer.FeignLoadBalancerAutoConfiguration, \\\n+org.springframework.cloud.openfeign.async.AsyncFeignAutoConfiguration"
  },
  {
    "sha": "27104a5f838d91622ac5974e4e3b3b9bfe7a577e",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/AsyncFeignClientFactoryTests.java",
    "status": "added",
    "additions": 178,
    "deletions": 0,
    "changes": 178,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/AsyncFeignClientFactoryTests.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/AsyncFeignClientFactoryTests.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/AsyncFeignClientFactoryTests.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Proxy;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import feign.AsyncClient;\n+import feign.ReflectiveAsyncFeign;\n+import feign.hc5.AsyncApacheHttp5Client;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.protocol.HttpClientContext;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.boot.test.context.assertj.AssertableApplicationContext;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.cloud.openfeign.async.AsyncFeignAutoConfiguration;\n+import org.springframework.cloud.openfeign.async.AsyncHttpClient5FeignConfiguration;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+\n+/**\n+ * @author Nguyen Ky Thanh\n+ */\n+class AsyncFeignClientFactoryTests {\n+\n+\t@Test\n+\tvoid testChildContexts() {\n+\t\tAnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();\n+\t\tparent.refresh();\n+\t\tFeignContext context = new FeignContext();\n+\t\tcontext.setApplicationContext(parent);\n+\t\tcontext.setConfigurations(Arrays.asList(getSpec(\"foo\", FooConfig.class),\n+\t\t\t\tgetSpec(\"bar\", BarConfig.class)));\n+\n+\t\tFoo foo = context.getInstance(\"foo\", Foo.class);\n+\t\tassertThat(foo).as(\"foo was null\").isNotNull();\n+\n+\t\tBar bar = context.getInstance(\"bar\", Bar.class);\n+\t\tassertThat(bar).as(\"bar was null\").isNotNull();\n+\n+\t\tBar foobar = context.getInstance(\"foo\", Bar.class);\n+\t\tassertThat(foobar).as(\"bar was not null\").isNull();\n+\t}\n+\n+\t@Test\n+\tvoid asyncHc5ClientShouldBeUsed() {\n+\t\tnew ApplicationContextRunner().withUserConfiguration(TestConfig.class)\n+\t\t\t\t.withUserConfiguration(AsyncHc5Config.class,\n+\t\t\t\t\t\tFeignClientsConfiguration.class)\n+\t\t\t\t.run(context -> checkClientUsed(context, AsyncApacheHttp5Client.class));\n+\t}\n+\n+\t@Test\n+\tvoid defaultClientShouldBeUsed() {\n+\t\tnew ApplicationContextRunner().withUserConfiguration(TestConfig.class)\n+\t\t\t\t.run(context -> checkClientUsed(context, AsyncClient.Default.class));\n+\t}\n+\n+\tprivate void checkClientUsed(AssertableApplicationContext context, Class clientClass)\n+\t\t\tthrows Exception {\n+\t\tObject targetObject = context.getBean(FeignClientFactoryBean.class).getObject();\n+\t\tassertThat(targetObject).isNotNull();\n+\t\tProxy target = (Proxy) targetObject;\n+\t\tObject asyncInvocationHandler = ReflectionTestUtils.getField(target, \"h\");\n+\n+\t\tField field = asyncInvocationHandler.getClass().getDeclaredField(\"this$0\");\n+\t\tfield.setAccessible(true);\n+\t\tReflectiveAsyncFeign reflectiveAsyncFeign = (ReflectiveAsyncFeign) field\n+\t\t\t\t.get(asyncInvocationHandler);\n+\t\tObject client = ReflectionTestUtils.getField(reflectiveAsyncFeign, \"client\");\n+\t\tassertThat(client).isInstanceOf(clientClass);\n+\t}\n+\n+\tprivate FeignClientSpecification getSpec(String name, Class<?> configClass) {\n+\t\treturn new FeignClientSpecification(name, new Class[] { configClass });\n+\t}\n+\n+\tinterface TestType {\n+\n+\t\t@RequestMapping(value = \"/\", method = GET)\n+\t\tString hello();\n+\n+\t}\n+\n+\t@Configuration\n+\t@Import(AsyncHttpClient5FeignConfiguration.class)\n+\tstatic class AsyncHc5Config {\n+\n+\t\t@Bean\n+\t\tpublic AsyncClient<HttpClientContext> asyncClient(\n+\t\t\t\tCloseableHttpAsyncClient httpAsyncClient) {\n+\t\t\treturn new AsyncApacheHttp5Client(httpAsyncClient);\n+\t\t}\n+\n+\t}\n+\n+\t@Configuration\n+\tstatic class TestConfig {\n+\n+\t\t@Bean\n+\t\tFeignContext feignContext() {\n+\t\t\tFeignContext feignContext = new FeignContext();\n+\t\t\tfeignContext.setConfigurations(\n+\t\t\t\t\tCollections.singletonList(new FeignClientSpecification(\"test\",\n+\t\t\t\t\t\t\tnew Class[] { AsyncFeignAutoConfiguration.class })));\n+\t\t\treturn feignContext;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tFeignClientProperties feignClientProperties() {\n+\t\t\treturn new FeignClientProperties();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tFeignClientFactoryBean feignClientFactoryBean() {\n+\t\t\tFeignClientFactoryBean feignClientFactoryBean = new FeignClientFactoryBean();\n+\t\t\tfeignClientFactoryBean.setContextId(\"test\");\n+\t\t\tfeignClientFactoryBean.setName(\"test\");\n+\t\t\tfeignClientFactoryBean.setType(TestType.class);\n+\t\t\tfeignClientFactoryBean.setPath(\"\");\n+\t\t\tfeignClientFactoryBean.setUrl(\"http://some.absolute.url\");\n+\t\t\tfeignClientFactoryBean.setAsynchronous(true);\n+\t\t\treturn feignClientFactoryBean;\n+\t\t}\n+\n+\t}\n+\n+\tstatic class FooConfig {\n+\n+\t\t@Bean\n+\t\tFoo foo() {\n+\t\t\treturn new Foo();\n+\t\t}\n+\n+\t}\n+\n+\tstatic class Foo {\n+\n+\t}\n+\n+\tstatic class BarConfig {\n+\n+\t\t@Bean\n+\t\tBar bar() {\n+\t\t\treturn new Bar();\n+\t\t}\n+\n+\t}\n+\n+\tstatic class Bar {\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "2679f8db29702cd6d5e5e0f56506ed2966effeb0",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientBuilderTests.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientBuilderTests.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientBuilderTests.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientBuilderTests.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -94,8 +94,8 @@ public void safetyCheckForNewFieldsOnTheFeignClientAnnotation() {\n \t\t// on this builder class.\n \t\t// (2) Or a new field was added and the builder class has to be extended with this\n \t\t// new field.\n-\t\tassertThat(methodNames).containsExactly(\"contextId\", \"decode404\", \"fallback\",\n-\t\t\t\t\"fallbackFactory\", \"name\", \"path\", \"url\");\n+\t\tassertThat(methodNames).containsExactly(\"asynchronous\", \"contextId\", \"decode404\",\n+\t\t\t\t\"fallback\", \"fallbackFactory\", \"name\", \"path\", \"url\");\n \t}\n \n \t@Test"
  },
  {
    "sha": "d336a7f9e8803b453ace6985aff6dc7b29bb7ecd",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientOverrideDefaultsTests.java",
    "status": "modified",
    "additions": 125,
    "deletions": 6,
    "changes": 131,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientOverrideDefaultsTests.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientOverrideDefaultsTests.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientOverrideDefaultsTests.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -18,6 +18,7 @@\n \n import java.util.concurrent.TimeUnit;\n \n+import feign.AsyncFeign.AsyncBuilder;\n import feign.Contract;\n import feign.ExceptionPropagationPolicy;\n import feign.Feign;\n@@ -41,6 +42,7 @@\n import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration;\n+import org.springframework.cloud.openfeign.async.AsyncFeignAutoConfiguration;\n import org.springframework.cloud.openfeign.support.PageableSpringEncoder;\n import org.springframework.cloud.openfeign.support.SpringMvcContract;\n import org.springframework.context.annotation.Bean;\n@@ -54,6 +56,7 @@\n /**\n  * @author Spencer Gibb\n  * @author Olga Maciaszek-Sharma\n+ * @author Nguyen Ky Thanh\n  */\n @SpringBootTest(classes = FeignClientOverrideDefaultsTests.TestConfiguration.class)\n @DirtiesContext\n@@ -68,41 +71,60 @@\n \t@Autowired\n \tprivate BarClient bar;\n \n+\t@Autowired\n+\tprivate FooAsyncClient fooAsync;\n+\n+\t@Autowired\n+\tprivate BarAsyncClient barAsync;\n+\n \t@Test\n \tvoid clientsAvailable() {\n \t\tassertThat(foo).isNotNull();\n \t\tassertThat(bar).isNotNull();\n+\t\tassertThat(fooAsync).isNotNull();\n+\t\tassertThat(barAsync).isNotNull();\n \t}\n \n \t@Test\n \tvoid overrideDecoder() {\n \t\tDecoder.Default.class.cast(context.getInstance(\"foo\", Decoder.class));\n \t\tOptionalDecoder.class.cast(context.getInstance(\"bar\", Decoder.class));\n+\t\tDecoder.Default.class.cast(context.getInstance(\"fooAsync\", Decoder.class));\n+\t\tOptionalDecoder.class.cast(context.getInstance(\"barAsync\", Decoder.class));\n \t}\n \n \t@Test\n \tvoid overrideEncoder() {\n \t\tEncoder.Default.class.cast(context.getInstance(\"foo\", Encoder.class));\n \t\tPageableSpringEncoder.class.cast(context.getInstance(\"bar\", Encoder.class));\n+\t\tEncoder.Default.class.cast(context.getInstance(\"fooAsync\", Encoder.class));\n+\t\tPageableSpringEncoder.class.cast(context.getInstance(\"barAsync\", Encoder.class));\n \t}\n \n \t@Test\n \tvoid overrideLogger() {\n \t\tLogger.JavaLogger.class.cast(context.getInstance(\"foo\", Logger.class));\n \t\tSlf4jLogger.class.cast(context.getInstance(\"bar\", Logger.class));\n+\t\tLogger.JavaLogger.class.cast(context.getInstance(\"fooAsync\", Logger.class));\n+\t\tSlf4jLogger.class.cast(context.getInstance(\"barAsync\", Logger.class));\n \t}\n \n \t@Test\n \tvoid overrideContract() {\n \t\tContract.Default.class.cast(context.getInstance(\"foo\", Contract.class));\n \t\tSpringMvcContract.class.cast(context.getInstance(\"bar\", Contract.class));\n+\t\tContract.Default.class.cast(context.getInstance(\"fooAsync\", Contract.class));\n+\t\tSpringMvcContract.class.cast(context.getInstance(\"barAsync\", Contract.class));\n \t}\n \n \t@Test\n \tvoid overrideLoggerLevel() {\n \t\tassertThat(context.getInstance(\"foo\", Logger.Level.class)).isNull();\n \t\tassertThat(context.getInstance(\"bar\", Logger.Level.class))\n \t\t\t\t.isEqualTo(Logger.Level.HEADERS);\n+\t\tassertThat(context.getInstance(\"fooAsync\", Logger.Level.class)).isNull();\n+\t\tassertThat(context.getInstance(\"barAsync\", Logger.Level.class))\n+\t\t\t\t.isEqualTo(Logger.Level.HEADERS);\n \t}\n \n \t@Test\n@@ -116,28 +138,43 @@ void overrideRetryer() {\n \tvoid overrideErrorDecoder() {\n \t\tassertThat(context.getInstance(\"foo\", ErrorDecoder.class)).isNull();\n \t\tErrorDecoder.Default.class.cast(context.getInstance(\"bar\", ErrorDecoder.class));\n+\t\tassertThat(context.getInstance(\"fooAsync\", ErrorDecoder.class)).isNull();\n+\t\tErrorDecoder.Default.class\n+\t\t\t\t.cast(context.getInstance(\"barAsync\", ErrorDecoder.class));\n \t}\n \n \t@Test\n \tvoid overrideBuilder() {\n \t\tHystrixFeign.Builder.class.cast(context.getInstance(\"foo\", Feign.Builder.class));\n \t\tFeign.Builder.class.cast(context.getInstance(\"bar\", Feign.Builder.class));\n+\t\tAsyncBuilder.class.cast(context.getInstance(\"fooAsync\", AsyncBuilder.class));\n+\t\tAsyncBuilder.class.cast(context.getInstance(\"barAsync\", AsyncBuilder.class));\n \t}\n \n \t@Test\n \tvoid overrideRequestOptions() {\n \t\tassertThat(context.getInstance(\"foo\", Request.Options.class)).isNull();\n-\t\tRequest.Options options = context.getInstance(\"bar\", Request.Options.class);\n-\t\tassertThat(options.connectTimeoutMillis()).isEqualTo(1);\n-\t\tassertThat(options.readTimeoutMillis()).isEqualTo(1);\n-\t\tassertThat(options.isFollowRedirects()).isFalse();\n+\t\tassertThat(context.getInstance(\"fooAsync\", Request.Options.class)).isNull();\n+\t\tRequest.Options barOptions = context.getInstance(\"bar\", Request.Options.class);\n+\t\tassertThat(barOptions.connectTimeoutMillis()).isEqualTo(1);\n+\t\tassertThat(barOptions.readTimeoutMillis()).isEqualTo(1);\n+\t\tassertThat(barOptions.isFollowRedirects()).isFalse();\n+\t\tRequest.Options barAsyncOptions = context.getInstance(\"barAsync\",\n+\t\t\t\tRequest.Options.class);\n+\t\tassertThat(barAsyncOptions.connectTimeoutMillis()).isEqualTo(1);\n+\t\tassertThat(barAsyncOptions.readTimeoutMillis()).isEqualTo(1);\n+\t\tassertThat(barAsyncOptions.isFollowRedirects()).isFalse();\n \t}\n \n \t@Test\n \tvoid overrideQueryMapEncoder() {\n \t\tQueryMapEncoder.Default.class\n \t\t\t\t.cast(context.getInstance(\"foo\", QueryMapEncoder.class));\n \t\tBeanQueryMapEncoder.class.cast(context.getInstance(\"bar\", QueryMapEncoder.class));\n+\t\tQueryMapEncoder.Default.class\n+\t\t\t\t.cast(context.getInstance(\"fooAsync\", QueryMapEncoder.class));\n+\t\tBeanQueryMapEncoder.class\n+\t\t\t\t.cast(context.getInstance(\"barAsync\", QueryMapEncoder.class));\n \t}\n \n \t@Test\n@@ -146,6 +183,10 @@ void addRequestInterceptor() {\n \t\t\t\t.isEqualTo(1);\n \t\tassertThat(context.getInstances(\"bar\", RequestInterceptor.class).size())\n \t\t\t\t.isEqualTo(2);\n+\t\tassertThat(context.getInstances(\"fooAsync\", RequestInterceptor.class).size())\n+\t\t\t\t.isEqualTo(1);\n+\t\tassertThat(context.getInstances(\"barAsync\", RequestInterceptor.class).size())\n+\t\t\t\t.isEqualTo(2);\n \t}\n \n \t@Test\n@@ -174,10 +215,29 @@ void exceptionPropagationPolicy() {\n \n \t}\n \n+\t@FeignClient(name = \"fooAsync\", url = \"https://fooAsync\",\n+\t\t\tconfiguration = FooAsyncConfiguration.class, asynchronous = true)\n+\tinterface FooAsyncClient {\n+\n+\t\t@RequestLine(\"GET /\")\n+\t\tString get();\n+\n+\t}\n+\n+\t@FeignClient(name = \"barAsync\", url = \"https://barAsync\", decode404 = true,\n+\t\t\tconfiguration = BarAsyncConfiguration.class, asynchronous = true)\n+\tinterface BarAsyncClient {\n+\n+\t\t@GetMapping(\"/\")\n+\t\tString get();\n+\n+\t}\n+\n \t@Configuration(proxyBeanMethods = false)\n-\t@EnableFeignClients(clients = { FooClient.class, BarClient.class })\n+\t@EnableFeignClients(clients = { FooClient.class, BarClient.class,\n+\t\t\tFooAsyncClient.class, BarAsyncClient.class })\n \t@Import({ PropertyPlaceholderAutoConfiguration.class, ArchaiusAutoConfiguration.class,\n-\t\t\tFeignAutoConfiguration.class })\n+\t\t\tFeignAutoConfiguration.class, AsyncFeignAutoConfiguration.class })\n \tprotected static class TestConfiguration {\n \n \t\t@Bean\n@@ -262,4 +322,63 @@ public ExceptionPropagationPolicy exceptionPropagationPolicy() {\n \n \t}\n \n+\tpublic static class FooAsyncConfiguration {\n+\n+\t\t@Bean\n+\t\tpublic Decoder feignDecoder() {\n+\t\t\treturn new Decoder.Default();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic Encoder feignEncoder() {\n+\t\t\treturn new Encoder.Default();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic Logger feignLogger() {\n+\t\t\treturn new Logger.JavaLogger();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic Contract feignContract() {\n+\t\t\treturn new Contract.Default();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic QueryMapEncoder queryMapEncoder() {\n+\t\t\treturn new feign.QueryMapEncoder.Default();\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class BarAsyncConfiguration {\n+\n+\t\t@Bean\n+\t\tLogger.Level feignLevel() {\n+\t\t\treturn Logger.Level.HEADERS;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tErrorDecoder feignErrorDecoder() {\n+\t\t\treturn new ErrorDecoder.Default();\n+\t\t}\n+\n+\t\t@Bean\n+\t\tRequest.Options feignRequestOptions() {\n+\t\t\treturn new Request.Options(1, TimeUnit.MILLISECONDS, 1, TimeUnit.MILLISECONDS,\n+\t\t\t\t\tfalse);\n+\t\t}\n+\n+\t\t@Bean\n+\t\tRequestInterceptor feignRequestInterceptor() {\n+\t\t\treturn new BasicAuthRequestInterceptor(\"user\", \"pass\");\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic QueryMapEncoder queryMapEncoder() {\n+\t\t\treturn new BeanQueryMapEncoder();\n+\t\t}\n+\n+\t}\n+\n }"
  },
  {
    "sha": "e1e3d7cd714fd33592aa2b54533bad1431168bc6",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientUsingPropertiesTests.java",
    "status": "modified",
    "additions": 192,
    "deletions": 0,
    "changes": 192,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientUsingPropertiesTests.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientUsingPropertiesTests.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientUsingPropertiesTests.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.concurrent.CompletionException;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -76,6 +77,7 @@\n  * @author Eko Kurniawan Khannedy\n  * @author Olga Maciaszek-Sharma\n  * @author Ilia Ilinykh\n+ * @author Nguyen Ky Thanh\n  */\n @SuppressWarnings(\"FieldMayBeFinal\")\n @RunWith(SpringJUnit4ClassRunner.class)\n@@ -142,62 +144,124 @@ public FooClient fooClient() {\n \t\t\t\t\"http://localhost:\" + port);\n \t}\n \n+\tpublic FooAsyncClient fooAsyncClient() {\n+\t\tfooFactoryBean.setApplicationContext(applicationContext);\n+\t\treturn (FooAsyncClient) fooFactoryBean.asyncFeign(context)\n+\t\t\t\t.target(FooAsyncClient.class, \"http://localhost:\" + port);\n+\t}\n+\n \tpublic BarClient barClient() {\n \t\tbarFactoryBean.setApplicationContext(applicationContext);\n \t\treturn barFactoryBean.feign(context).target(BarClient.class,\n \t\t\t\t\"http://localhost:\" + port);\n \t}\n \n+\tpublic BarAsyncClient barAsyncClient() {\n+\t\tbarFactoryBean.setApplicationContext(applicationContext);\n+\t\treturn (BarAsyncClient) barFactoryBean.asyncFeign(context)\n+\t\t\t\t.target(BarAsyncClient.class, \"http://localhost:\" + port);\n+\t}\n+\n \tpublic UnwrapClient unwrapClient() {\n \t\tunwrapFactoryBean.setApplicationContext(applicationContext);\n \t\treturn unwrapFactoryBean.feign(context).target(UnwrapClient.class,\n \t\t\t\t\"http://localhost:\" + port);\n \t}\n \n+\tpublic UnwrapAsyncClient unwrapAsyncClient() {\n+\t\tunwrapFactoryBean.setApplicationContext(applicationContext);\n+\t\treturn (UnwrapAsyncClient) unwrapFactoryBean.asyncFeign(context)\n+\t\t\t\t.target(UnwrapAsyncClient.class, \"http://localhost:\" + port);\n+\t}\n+\n \tpublic FormClient formClient() {\n \t\tformFactoryBean.setApplicationContext(applicationContext);\n \t\treturn formFactoryBean.feign(context).target(FormClient.class,\n \t\t\t\t\"http://localhost:\" + port);\n \t}\n \n+\tpublic FormAsyncClient formAsyncClient() {\n+\t\tformFactoryBean.setApplicationContext(applicationContext);\n+\t\treturn (FormAsyncClient) formFactoryBean.asyncFeign(context)\n+\t\t\t\t.target(FormAsyncClient.class, \"http://localhost:\" + port);\n+\t}\n+\n \t@Test\n \tpublic void testFoo() {\n \t\tString response = fooClient().foo();\n \t\tassertThat(response).isEqualTo(\"OK\");\n \t}\n \n+\t@Test\n+\tpublic void testFooAsync() {\n+\t\tString response = fooAsyncClient().foo();\n+\t\tassertThat(response).isEqualTo(\"OK\");\n+\t}\n+\n \t@Test(expected = RetryableException.class)\n \tpublic void testBar() {\n \t\tbarClient().bar();\n \t\tfail(\"it should timeout\");\n \t}\n \n+\t@Test(expected = CompletionException.class)\n+\tpublic void testBarAsync() {\n+\t\tbarAsyncClient().bar();\n+\t\tfail(\"it should timeout\");\n+\t}\n+\n \t@Test(expected = SocketTimeoutException.class)\n \tpublic void testUnwrap() throws Exception {\n \t\tunwrapClient().unwrap();\n \t\tfail(\"it should timeout\");\n \t}\n \n+\t@Test(expected = CompletionException.class)\n+\tpublic void testUnwrapAsync() throws Exception {\n+\t\tunwrapAsyncClient().unwrap();\n+\t\tfail(\"it should timeout\");\n+\t}\n+\n \t@Test\n \tpublic void testForm() {\n \t\tMap<String, String> request = Collections.singletonMap(\"form\", \"Data\");\n \t\tString response = formClient().form(request);\n \t\tassertThat(response).isEqualTo(\"Data\");\n \t}\n \n+\t@Test\n+\tpublic void testAsyncForm() {\n+\t\tMap<String, String> request = Collections.singletonMap(\"form\", \"Data\");\n+\t\tString response = formAsyncClient().form(request);\n+\t\tassertThat(response).isEqualTo(\"Data\");\n+\t}\n+\n \t@Test\n \tpublic void testSingleValue() {\n \t\tList<String> response = singleValueClient().singleValue();\n \t\tassertThat(response).isEqualTo(Arrays.asList(\"header\", \"parameter\"));\n \t}\n \n+\t@Test\n+\tpublic void testSingleValueAsync() {\n+\t\tList<String> response = singleValueAsyncClient().singleValue();\n+\t\tassertThat(response).isEqualTo(Arrays.asList(\"header\", \"parameter\"));\n+\t}\n+\n \t@Test\n \tpublic void testMultipleValue() {\n \t\tList<String> response = multipleValueClient().multipleValue();\n \t\tassertThat(response).isEqualTo(\n \t\t\t\tArrays.asList(\"header1\", \"header2\", \"parameter1\", \"parameter2\"));\n \t}\n \n+\t@Test\n+\tpublic void testMultipleValueAsync() {\n+\t\tList<String> response = multipleValueAsyncClient().multipleValue();\n+\t\tassertThat(response).isEqualTo(\n+\t\t\t\tArrays.asList(\"header1\", \"header2\", \"parameter1\", \"parameter2\"));\n+\t}\n+\n \tpublic SingleValueClient singleValueClient() {\n \t\tthis.defaultHeadersAndQuerySingleParamsFeignClientFactoryBean\n \t\t\t\t.setApplicationContext(this.applicationContext);\n@@ -206,6 +270,14 @@ public SingleValueClient singleValueClient() {\n \t\t\t\t.target(SingleValueClient.class, \"http://localhost:\" + this.port);\n \t}\n \n+\tpublic SingleValueAsyncClient singleValueAsyncClient() {\n+\t\tthis.defaultHeadersAndQuerySingleParamsFeignClientFactoryBean\n+\t\t\t\t.setApplicationContext(this.applicationContext);\n+\t\treturn (SingleValueAsyncClient) this.defaultHeadersAndQuerySingleParamsFeignClientFactoryBean\n+\t\t\t\t.asyncFeign(this.context)\n+\t\t\t\t.target(SingleValueAsyncClient.class, \"http://localhost:\" + this.port);\n+\t}\n+\n \tpublic MultipleValueClient multipleValueClient() {\n \t\tthis.defaultHeadersAndQueryMultipleParamsFeignClientFactoryBean\n \t\t\t\t.setApplicationContext(this.applicationContext);\n@@ -214,6 +286,14 @@ public MultipleValueClient multipleValueClient() {\n \t\t\t\t.target(MultipleValueClient.class, \"http://localhost:\" + this.port);\n \t}\n \n+\tpublic MultipleValueAsyncClient multipleValueAsyncClient() {\n+\t\tthis.defaultHeadersAndQueryMultipleParamsFeignClientFactoryBean\n+\t\t\t\t.setApplicationContext(this.applicationContext);\n+\t\treturn (MultipleValueAsyncClient) this.defaultHeadersAndQueryMultipleParamsFeignClientFactoryBean\n+\t\t\t\t.asyncFeign(this.context)\n+\t\t\t\t.target(MultipleValueAsyncClient.class, \"http://localhost:\" + this.port);\n+\t}\n+\n \t@Test\n \tpublic void readTimeoutShouldWorkWhenConnectTimeoutNotSet() {\n \t\tFeignClientFactoryBean readTimeoutFactoryBean = new FeignClientFactoryBean();\n@@ -230,6 +310,23 @@ public void readTimeoutShouldWorkWhenConnectTimeoutNotSet() {\n \t\tassertThat(options.connectTimeoutMillis()).isEqualTo(5000);\n \t}\n \n+\t@Test\n+\tpublic void readTimeoutAsyncShouldWorkWhenConnectTimeoutNotSet() {\n+\t\tFeignClientFactoryBean readTimeoutFactoryBean = new FeignClientFactoryBean();\n+\t\treadTimeoutFactoryBean.setContextId(\"readTimeout\");\n+\t\treadTimeoutFactoryBean.setType(FeignClientFactoryBean.class);\n+\t\treadTimeoutFactoryBean.setApplicationContext(applicationContext);\n+\n+\t\tTimeoutAsyncClient client = (TimeoutAsyncClient) readTimeoutFactoryBean\n+\t\t\t\t.asyncFeign(context)\n+\t\t\t\t.target(TimeoutAsyncClient.class, \"http://localhost:\" + port);\n+\n+\t\tRequest.Options options = getAsyncRequestOptions((Proxy) client);\n+\n+\t\tassertThat(options.readTimeoutMillis()).isEqualTo(1000);\n+\t\tassertThat(options.connectTimeoutMillis()).isEqualTo(5000);\n+\t}\n+\n \t@Test\n \tpublic void connectTimeoutShouldWorkWhenReadTimeoutNotSet() {\n \t\tFeignClientFactoryBean readTimeoutFactoryBean = new FeignClientFactoryBean();\n@@ -246,6 +343,23 @@ public void connectTimeoutShouldWorkWhenReadTimeoutNotSet() {\n \t\tassertThat(options.readTimeoutMillis()).isEqualTo(5000);\n \t}\n \n+\t@Test\n+\tpublic void connectTimeoutAsyncShouldWorkWhenReadTimeoutNotSet() {\n+\t\tFeignClientFactoryBean readTimeoutFactoryBean = new FeignClientFactoryBean();\n+\t\treadTimeoutFactoryBean.setContextId(\"connectTimeout\");\n+\t\treadTimeoutFactoryBean.setType(FeignClientFactoryBean.class);\n+\t\treadTimeoutFactoryBean.setApplicationContext(applicationContext);\n+\n+\t\tTimeoutAsyncClient client = (TimeoutAsyncClient) readTimeoutFactoryBean\n+\t\t\t\t.asyncFeign(context)\n+\t\t\t\t.target(TimeoutAsyncClient.class, \"http://localhost:\" + port);\n+\n+\t\tRequest.Options options = getAsyncRequestOptions((Proxy) client);\n+\n+\t\tassertThat(options.connectTimeoutMillis()).isEqualTo(1000);\n+\t\tassertThat(options.readTimeoutMillis()).isEqualTo(5000);\n+\t}\n+\n \t@Test\n \tpublic void shouldSetFollowRedirects() {\n \t\tFeignClientFactoryBean testFactoryBean = new FeignClientFactoryBean();\n@@ -261,6 +375,22 @@ public void shouldSetFollowRedirects() {\n \t\tassertThat(options.isFollowRedirects()).isFalse();\n \t}\n \n+\t@Test\n+\tpublic void shouldSetFollowRedirectsAsync() {\n+\t\tFeignClientFactoryBean testFactoryBean = new FeignClientFactoryBean();\n+\t\ttestFactoryBean.setContextId(\"test\");\n+\t\ttestFactoryBean.setType(FeignClientFactoryBean.class);\n+\t\ttestFactoryBean.setApplicationContext(applicationContext);\n+\n+\t\tTimeoutAsyncClient client = (TimeoutAsyncClient) testFactoryBean\n+\t\t\t\t.asyncFeign(context)\n+\t\t\t\t.target(TimeoutAsyncClient.class, \"http://localhost:\" + port);\n+\n+\t\tRequest.Options options = getAsyncRequestOptions((Proxy) client);\n+\n+\t\tassertThat(options.isFollowRedirects()).isFalse();\n+\t}\n+\n \tprivate Request.Options getRequestOptions(Proxy client) {\n \t\tObject invocationHandler = ReflectionTestUtils.getField(client, \"h\");\n \t\tMap<Method, InvocationHandlerFactory.MethodHandler> dispatch = (Map<Method, InvocationHandlerFactory.MethodHandler>) ReflectionTestUtils\n@@ -270,27 +400,60 @@ public void shouldSetFollowRedirects() {\n \t\t\t\t\"options\");\n \t}\n \n+\tprivate Request.Options getAsyncRequestOptions(Proxy client) {\n+\t\tObject asyncInvocationHandler = ReflectionTestUtils.getField(client, \"h\");\n+\t\tObject instance = ReflectionTestUtils.getField(asyncInvocationHandler,\n+\t\t\t\t\"instance\");\n+\t\tObject invocationHandler = ReflectionTestUtils.getField(instance, \"h\");\n+\t\tMap<Method, InvocationHandlerFactory.MethodHandler> dispatch = (Map<Method, InvocationHandlerFactory.MethodHandler>) ReflectionTestUtils\n+\t\t\t\t.getField(Objects.requireNonNull(invocationHandler), \"dispatch\");\n+\t\tMethod key = new ArrayList<>(dispatch.keySet()).get(0);\n+\t\treturn (Request.Options) ReflectionTestUtils.getField(dispatch.get(key),\n+\t\t\t\t\"options\");\n+\t}\n+\n \tprotected interface FooClient {\n \n \t\t@GetMapping(path = \"/foo\")\n \t\tString foo();\n \n \t}\n \n+\tprotected interface FooAsyncClient {\n+\n+\t\t@GetMapping(path = \"/foo\")\n+\t\tString foo();\n+\n+\t}\n+\n \tprotected interface BarClient {\n \n \t\t@GetMapping(path = \"/bar\")\n \t\tString bar();\n \n \t}\n \n+\tprotected interface BarAsyncClient {\n+\n+\t\t@GetMapping(path = \"/bar\")\n+\t\tString bar();\n+\n+\t}\n+\n \tprotected interface UnwrapClient {\n \n \t\t@GetMapping(path = \"/bar\") // intentionally /bar\n \t\tString unwrap() throws IOException;\n \n \t}\n \n+\tprotected interface UnwrapAsyncClient {\n+\n+\t\t@GetMapping(path = \"/bar\") // intentionally /bar\n+\t\tString unwrap() throws IOException;\n+\n+\t}\n+\n \tprotected interface FormClient {\n \n \t\t@RequestMapping(value = \"/form\", method = RequestMethod.POST,\n@@ -299,27 +462,56 @@ public void shouldSetFollowRedirects() {\n \n \t}\n \n+\tprotected interface FormAsyncClient {\n+\n+\t\t@RequestMapping(value = \"/form\", method = RequestMethod.POST,\n+\t\t\t\tconsumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\n+\t\tString form(Map<String, String> form);\n+\n+\t}\n+\n \tprotected interface SingleValueClient {\n \n \t\t@GetMapping(path = \"/singleValue\")\n \t\tList<String> singleValue();\n \n \t}\n \n+\tprotected interface SingleValueAsyncClient {\n+\n+\t\t@GetMapping(path = \"/singleValue\")\n+\t\tList<String> singleValue();\n+\n+\t}\n+\n \tprotected interface MultipleValueClient {\n \n \t\t@GetMapping(path = \"/multipleValue\")\n \t\tList<String> multipleValue();\n \n \t}\n \n+\tprotected interface MultipleValueAsyncClient {\n+\n+\t\t@GetMapping(path = \"/multipleValue\")\n+\t\tList<String> multipleValue();\n+\n+\t}\n+\n \tprotected interface TimeoutClient {\n \n \t\t@GetMapping(\"/timeouts\")\n \t\tString timeouts();\n \n \t}\n \n+\tprotected interface TimeoutAsyncClient {\n+\n+\t\t@GetMapping(\"/timeouts\")\n+\t\tString timeouts();\n+\n+\t}\n+\n \t@Configuration(proxyBeanMethods = false)\n \t@EnableAutoConfiguration\n \t@RestController"
  },
  {
    "sha": "e2b6e02c4cc7775d802b2246b1316b93d2b0b503",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfigurationTests.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfigurationTests.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfigurationTests.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncFeignAutoConfigurationTests.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.async;\n+\n+import java.util.Map;\n+\n+import feign.AsyncClient;\n+import feign.hc5.AsyncApacheHttp5Client;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.nio.AsyncClientConnectionManager;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * @author Nguyen Ky Thanh\n+ */\n+public class AsyncFeignAutoConfigurationTests {\n+\n+\t@Test\n+\tvoid shouldInstantiateAsyncHc5FeignWhenAsyncHc5Enabled() {\n+\t\tConfigurableApplicationContext context = initContext(\n+\t\t\t\t\"feign.httpclient.asyncHc5.enabled=true\");\n+\t\tassertThatOneBeanPresent(context, AsyncApacheHttp5Client.class);\n+\t\tassertThatOneBeanPresent(context, CloseableHttpAsyncClient.class);\n+\t\tassertThatOneBeanPresent(context, AsyncClientConnectionManager.class);\n+\t}\n+\n+\t@Test\n+\tvoid shouldInstantiateDefaultAsyncTargeterAndNoAnyAsyncClient() {\n+\t\tConfigurableApplicationContext context = initContext();\n+\t\tassertThatOneBeanPresent(context, DefaultAsyncTargeter.class);\n+\t\tassertThatBeanNotPresent(context, AsyncClient.class);\n+\t}\n+\n+\tprivate ConfigurableApplicationContext initContext(String... properties) {\n+\t\treturn new SpringApplicationBuilder().web(WebApplicationType.NONE)\n+\t\t\t\t.properties(properties).sources(AsyncFeignAutoConfiguration.class).run();\n+\t}\n+\n+\tprivate void assertThatOneBeanPresent(ConfigurableApplicationContext context,\n+\t\t\tClass<?> beanClass) {\n+\t\tMap<String, ?> beans = context.getBeansOfType(beanClass);\n+\t\tassertThat(beans).hasSize(1);\n+\t}\n+\n+\tprivate void assertThatBeanNotPresent(ConfigurableApplicationContext context,\n+\t\t\tClass<?> beanClass) {\n+\t\tMap<String, ?> beans = context.getBeansOfType(beanClass);\n+\t\tassertThat(beans).isEmpty();\n+\t}\n+\n+}"
  },
  {
    "sha": "e7ed8942e9cbb8fa37c07fbf603b8b0c3096a74e",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfigurationTest.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfigurationTest.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/async/AsyncHttpClient5FeignConfigurationTest.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.openfeign.async;\n+\n+import java.lang.reflect.Field;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLContextSpi;\n+import javax.net.ssl.X509TrustManager;\n+\n+import org.apache.hc.client5.http.nio.AsyncClientConnectionManager;\n+import org.apache.hc.core5.http.config.Lookup;\n+import org.apache.hc.core5.http.nio.ssl.TlsStrategy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.commons.httpclient.HttpClientConfiguration;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.util.ReflectionUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * @author Nguyen Ky Thanh\n+ */\n+class AsyncHttpClient5FeignConfigurationTest {\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\t@BeforeEach\n+\tvoid setUp() {\n+\t\tcontext = new SpringApplicationBuilder()\n+\t\t\t\t.properties(\"feign.httpclient.disableSslValidation=true\",\n+\t\t\t\t\t\t\"feign.httpclient.asyncHc5.enabled=true\")\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.sources(HttpClientConfiguration.class, AsyncFeignAutoConfiguration.class)\n+\t\t\t\t.run();\n+\t}\n+\n+\t@AfterEach\n+\tvoid tearDown() {\n+\t\tif (context != null) {\n+\t\t\tcontext.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tvoid disableSslTest() {\n+\t\tAsyncClientConnectionManager connectionManager = context\n+\t\t\t\t.getBean(AsyncClientConnectionManager.class);\n+\t\tLookup<TlsStrategy> tlsStrategyLookup = getTlsStrategyLookup(connectionManager);\n+\t\tassertThat(tlsStrategyLookup.lookup(\"https\")).isNotNull();\n+\t\tassertThat(getX509TrustManager(tlsStrategyLookup).getAcceptedIssuers()).isNull();\n+\t}\n+\n+\tprivate Lookup<TlsStrategy> getTlsStrategyLookup(\n+\t\t\tAsyncClientConnectionManager connectionManager) {\n+\t\tObject connectionOperator = getField(connectionManager, \"connectionOperator\");\n+\t\treturn (Lookup) getField(connectionOperator, \"tlsStrategyLookup\");\n+\t}\n+\n+\tprivate X509TrustManager getX509TrustManager(Lookup<TlsStrategy> tlsStrategyLookup) {\n+\t\tTlsStrategy tlsStrategy = tlsStrategyLookup.lookup(\"https\");\n+\t\tSSLContext sslContext = (SSLContext) getField(tlsStrategy, \"sslContext\");\n+\t\tSSLContextSpi sslContextSpi = (SSLContextSpi) getField(sslContext, \"contextSpi\");\n+\t\treturn (X509TrustManager) getField(sslContextSpi, \"trustManager\");\n+\t}\n+\n+\tprotected Object getField(Object target, String name) {\n+\t\tField field = ReflectionUtils.findField(target.getClass(), name);\n+\t\tReflectionUtils.makeAccessible(field);\n+\t\tObject value = ReflectionUtils.getField(field, target);\n+\t\treturn value;\n+\t}\n+\n+}"
  },
  {
    "sha": "6c2a1a2d94496a8c31cbd5f96b62141e6b1a2adb",
    "filename": "spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/FeignHttpClientPropertiesTests.java",
    "status": "modified",
    "additions": 28,
    "deletions": 3,
    "changes": 31,
    "blob_url": "https://github.com/spring-cloud/spring-cloud-openfeign/blob/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/FeignHttpClientPropertiesTests.java",
    "raw_url": "https://github.com/spring-cloud/spring-cloud-openfeign/raw/d58559780916956261b1b508395155e7ba8b6c42/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/FeignHttpClientPropertiesTests.java",
    "contents_url": "https://api.github.com/repos/spring-cloud/spring-cloud-openfeign/contents/spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/FeignHttpClientPropertiesTests.java?ref=d58559780916956261b1b508395155e7ba8b6c42",
    "patch": "@@ -25,15 +25,17 @@\n import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.cloud.openfeign.support.FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy;\n-import org.springframework.cloud.openfeign.support.FeignHttpClientProperties.Hc5Properties.PoolReusePolicy;\n+import org.springframework.cloud.openfeign.support.FeignHttpClientProperties.PoolConcurrencyPolicy;\n+import org.springframework.cloud.openfeign.support.FeignHttpClientProperties.PoolReusePolicy;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.cloud.openfeign.support.FeignHttpClientProperties.AsyncHc5Properties.DEFAULT_RESPONSE_TIMEOUT;\n+import static org.springframework.cloud.openfeign.support.FeignHttpClientProperties.AsyncHc5Properties.DEFAULT_RESPONSE_TIMEOUT_UNIT;\n import static org.springframework.cloud.openfeign.support.FeignHttpClientProperties.Hc5Properties.DEFAULT_SOCKET_TIMEOUT;\n import static org.springframework.cloud.openfeign.support.FeignHttpClientProperties.Hc5Properties.DEFAULT_SOCKET_TIMEOUT_UNIT;\n \n@@ -69,6 +71,7 @@ public void testDefaults() {\n \t\t\t\t.isEqualTo(FeignHttpClientProperties.DEFAULT_DISABLE_SSL_VALIDATION);\n \t\tassertThat(getProperties().isFollowRedirects())\n \t\t\t\t.isEqualTo(FeignHttpClientProperties.DEFAULT_FOLLOW_REDIRECTS);\n+\n \t\tassertThat(getProperties().getHc5().getPoolConcurrencyPolicy())\n \t\t\t\t.isEqualTo(PoolConcurrencyPolicy.STRICT);\n \t\tassertThat(getProperties().getHc5().getPoolReusePolicy())\n@@ -77,6 +80,15 @@ public void testDefaults() {\n \t\t\t\t.isEqualTo(DEFAULT_SOCKET_TIMEOUT);\n \t\tassertThat(getProperties().getHc5().getSocketTimeoutUnit())\n \t\t\t\t.isEqualTo(DEFAULT_SOCKET_TIMEOUT_UNIT);\n+\n+\t\tassertThat(getProperties().getAsyncHc5().getPoolConcurrencyPolicy())\n+\t\t\t\t.isEqualTo(PoolConcurrencyPolicy.STRICT);\n+\t\tassertThat(getProperties().getAsyncHc5().getPoolReusePolicy())\n+\t\t\t\t.isEqualTo(PoolReusePolicy.FIFO);\n+\t\tassertThat(getProperties().getAsyncHc5().getResponseTimeout())\n+\t\t\t\t.isEqualTo(DEFAULT_RESPONSE_TIMEOUT);\n+\t\tassertThat(getProperties().getAsyncHc5().getResponseTimeoutUnit())\n+\t\t\t\t.isEqualTo(DEFAULT_RESPONSE_TIMEOUT_UNIT);\n \t}\n \n \t@Test\n@@ -93,7 +105,11 @@ public void testCustomization() {\n \t\t\t\t\t\t\"feign.httpclient.hc5.poolConcurrencyPolicy=lax\",\n \t\t\t\t\t\t\"feign.httpclient.hc5.poolReusePolicy=lifo\",\n \t\t\t\t\t\t\"feign.httpclient.hc5.socketTimeout=200\",\n-\t\t\t\t\t\t\"feign.httpclient.hc5.socketTimeoutUnit=milliseconds\")\n+\t\t\t\t\t\t\"feign.httpclient.hc5.socketTimeoutUnit=milliseconds\",\n+\t\t\t\t\t\t\"feign.httpclient.asyncHc5.poolConcurrencyPolicy=lax\",\n+\t\t\t\t\t\t\"feign.httpclient.asyncHc5.poolReusePolicy=lifo\",\n+\t\t\t\t\t\t\"feign.httpclient.asyncHc5.responseTimeout=60\",\n+\t\t\t\t\t\t\"feign.httpclient.asyncHc5.responseTimeoutUnit=seconds\")\n \t\t\t\t.applyTo(this.context);\n \t\tsetupContext();\n \t\tassertThat(getProperties().getMaxConnections()).isEqualTo(2);\n@@ -102,13 +118,22 @@ public void testCustomization() {\n \t\tassertThat(getProperties().getTimeToLive()).isEqualTo(2L);\n \t\tassertThat(getProperties().isDisableSslValidation()).isTrue();\n \t\tassertThat(getProperties().isFollowRedirects()).isFalse();\n+\n \t\tassertThat(getProperties().getHc5().getPoolConcurrencyPolicy())\n \t\t\t\t.isEqualTo(PoolConcurrencyPolicy.LAX);\n \t\tassertThat(getProperties().getHc5().getPoolReusePolicy())\n \t\t\t\t.isEqualTo(PoolReusePolicy.LIFO);\n \t\tassertThat(getProperties().getHc5().getSocketTimeout()).isEqualTo(200);\n \t\tassertThat(getProperties().getHc5().getSocketTimeoutUnit())\n \t\t\t\t.isEqualTo(TimeUnit.MILLISECONDS);\n+\n+\t\tassertThat(getProperties().getAsyncHc5().getPoolConcurrencyPolicy())\n+\t\t\t\t.isEqualTo(PoolConcurrencyPolicy.LAX);\n+\t\tassertThat(getProperties().getAsyncHc5().getPoolReusePolicy())\n+\t\t\t\t.isEqualTo(PoolReusePolicy.LIFO);\n+\t\tassertThat(getProperties().getAsyncHc5().getResponseTimeout()).isEqualTo(60);\n+\t\tassertThat(getProperties().getAsyncHc5().getResponseTimeoutUnit())\n+\t\t\t\t.isEqualTo(TimeUnit.SECONDS);\n \t}\n \n \tprivate void setupContext() {"
  }
]
