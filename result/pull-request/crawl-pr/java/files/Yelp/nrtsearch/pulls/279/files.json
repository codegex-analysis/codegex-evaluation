[
  {
    "sha": "346440239783da79bc8c590065d4bbf6b9159dc8",
    "filename": "clientlib/src/main/proto/yelp/nrtsearch/search.proto",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Yelp/nrtsearch/blob/e88bfd79b0f9cae45263516de8b3e2791f74ef65/clientlib/src/main/proto/yelp/nrtsearch/search.proto",
    "raw_url": "https://github.com/Yelp/nrtsearch/raw/e88bfd79b0f9cae45263516de8b3e2791f74ef65/clientlib/src/main/proto/yelp/nrtsearch/search.proto",
    "contents_url": "https://api.github.com/repos/Yelp/nrtsearch/contents/clientlib/src/main/proto/yelp/nrtsearch/search.proto?ref=e88bfd79b0f9cae45263516de8b3e2791f74ef65",
    "patch": "@@ -254,7 +254,7 @@ message Query {\n message SearchRequest {\n     string indexName = 1; //index to search against\n     int32 startHit = 2; // Which hit to start from (for pagination); default: 0\n-    int32 topHits = 3; // How many top hits to retrieve; default: 10\n+    int32 topHits = 3; // How many top hits to retrieve; default: 10. It limits the hits returned, starting from index 0. For pagination: set it to startHit + window_size.\n     /* Maximum number of seconds spent on each collection phase; note that for\n      * multi-pass searches (e.g. query-time grouping), this timeout applies to each phase. */\n     double timeoutSec = 4;"
  },
  {
    "sha": "b4c1be585671321920d8dbe31ab42c8028bd99f6",
    "filename": "grpc-gateway/search.pb.go",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Yelp/nrtsearch/blob/e88bfd79b0f9cae45263516de8b3e2791f74ef65/grpc-gateway/search.pb.go",
    "raw_url": "https://github.com/Yelp/nrtsearch/raw/e88bfd79b0f9cae45263516de8b3e2791f74ef65/grpc-gateway/search.pb.go",
    "contents_url": "https://api.github.com/repos/Yelp/nrtsearch/contents/grpc-gateway/search.pb.go?ref=e88bfd79b0f9cae45263516de8b3e2791f74ef65",
    "patch": "@@ -2059,7 +2059,7 @@ type SearchRequest struct {\n \n \tIndexName string `protobuf:\"bytes,1,opt,name=indexName,proto3\" json:\"indexName,omitempty\"` //index to search against\n \tStartHit  int32  `protobuf:\"varint,2,opt,name=startHit,proto3\" json:\"startHit,omitempty\"`  // Which hit to start from (for pagination); default: 0\n-\tTopHits   int32  `protobuf:\"varint,3,opt,name=topHits,proto3\" json:\"topHits,omitempty\"`    // How many top hits to retrieve; default: 10\n+\tTopHits   int32  `protobuf:\"varint,3,opt,name=topHits,proto3\" json:\"topHits,omitempty\"`    // How many top hits to retrieve; default: 10. It limits the hits returned, starting from index 0. For pagination: set it to startHit + window_size.\n \t// Maximum number of seconds spent on each collection phase; note that for\n \t// multi-pass searches (e.g. query-time grouping), this timeout applies to each phase.\n \tTimeoutSec     float64         `protobuf:\"fixed64,4,opt,name=timeoutSec,proto3\" json:\"timeoutSec,omitempty\"`"
  }
]
