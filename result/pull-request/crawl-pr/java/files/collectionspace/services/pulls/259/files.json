[
  {
    "sha": "77d4be0f0e701410062ac74068f1022300b72082",
    "filename": "services/account/service/src/main/java/org/collectionspace/services/account/AccountResource.java",
    "status": "modified",
    "additions": 37,
    "deletions": 23,
    "changes": 60,
    "blob_url": "https://github.com/collectionspace/services/blob/20def947654810750594a85ddccf929bc0dbc085/services/account/service/src/main/java/org/collectionspace/services/account/AccountResource.java",
    "raw_url": "https://github.com/collectionspace/services/raw/20def947654810750594a85ddccf929bc0dbc085/services/account/service/src/main/java/org/collectionspace/services/account/AccountResource.java",
    "contents_url": "https://api.github.com/repos/collectionspace/services/contents/services/account/service/src/main/java/org/collectionspace/services/account/AccountResource.java?ref=20def947654810750594a85ddccf929bc0dbc085",
    "patch": "@@ -206,11 +206,13 @@ private String getAccountCsid(String userId) {\n     \t\t\tif (roleValueList.isEmpty() == false) {\n     \t\t\t\tresult = new ArrayList<String>();\n     \t\t\t\tfor (RoleValue roleValue: roleValueList) {\n-    \t\t\t\t\tString displayName = roleValue.getDisplayName();\n-    \t\t\t\t\tif (displayName == null) {\n-    \t\t\t\t\t\tdisplayName = RoleClient.inferDisplayName(roleValue.getRoleName(), tenantId);\n+    \t\t\t\t\tif (roleValue != null) {\n+\t    \t\t\t\t\tString displayName = roleValue.getDisplayName();\n+\t    \t\t\t\t\tif (displayName == null) {\n+\t    \t\t\t\t\t\tdisplayName = RoleClient.inferDisplayName(roleValue.getRoleName(), tenantId);\n+\t    \t\t\t\t\t}\n+\t    \t\t\t\t\tresult.add(displayName);\n     \t\t\t\t\t}\n-    \t\t\t\t\tresult.add(displayName);\n     \t\t\t\t}\n     \t\t\t}\n     \t\t}\n@@ -224,15 +226,14 @@ private String getAccountCsid(String userId) {\n     public AccountsCommon updateAccount(@Context UriInfo ui, @PathParam(\"csid\") String csid, AccountsCommon theUpdate) {\n         return (AccountsCommon)update(ui, csid, theUpdate, AccountsCommon.class);\n     }\n-\n+    \n     /*\n-     * Use this when you have an existing and active ServiceContext.\n+     * Use this when you have an existing and active ServiceContext. //FIXME: Use this only for password reset\n      */\n-    public AccountsCommon updateAccount(ServiceContext<AccountsCommon, AccountsCommon> parentContext, UriInfo ui, String csid, AccountsCommon theUpdate) {\n-        return (AccountsCommon)update(parentContext, ui, csid, theUpdate, AccountsCommon.class);\n+    private AccountsCommon updateAccountPassword(ServiceContext<AccountsCommon, AccountsCommon> parentContext, UriInfo ui, String csid, AccountsCommon theUpdate) {\n+        return (AccountsCommon)update(parentContext, ui, csid, theUpdate, AccountsCommon.class, false);\n     }\n \n-\n     /**\n      * Resets an accounts password.\n      *\n@@ -328,7 +329,7 @@ synchronized public Response processPasswordReset(Passwordreset passwordreset, @\n \t\t\t\t\t\tAccountsCommon accountUpdate = new AccountsCommon();\n \t\t\t\t\t\taccountUpdate.setUserId(targetAccount.getUserId());\n \t\t\t\t\t\taccountUpdate.setPassword(password.getBytes());\n-\t\t\t\t\t\tupdateAccount(ctx, ui, targetAccount.getCsid(), accountUpdate);\n+\t\t\t\t\t\tupdateAccountPassword(ctx, ui, targetAccount.getCsid(), accountUpdate);\n \t\t\t\t\t\tTokenStorageClient.update(transactionCtx, tokenId, false); // disable the token so it can't be used again.\n \t\t\t\t\t\ttransactionCtx.commitTransaction();\n \t\t\t\t\t\t//\n@@ -343,6 +344,7 @@ synchronized public Response processPasswordReset(Passwordreset passwordreset, @\n \t\t\t        }\n \t\t\t\t} catch (Throwable t) {\n \t\t\t\t\ttransactionCtx.markForRollback();\n+\t\t\t\t\ttransactionCtx.close(); // https://jira.ets.berkeley.edu/jira/browse/CC-241\t\t\t\t\t\n \t\t\t\t\tString errMsg = String.format(\"Could not reset password using token ID='%s'. Error: '%s'\",\n \t\t\t\t\t\t\tt.getMessage(), token.getId());\n \t\t        \tresponse = Response.status(Response.Status.BAD_REQUEST).entity(errMsg).type(\"text/plain\").build();\n@@ -370,31 +372,43 @@ public Response requestPasswordReset(@Context UriInfo ui) {\n \n         MultivaluedMap<String,String> queryParams = ui.getQueryParameters();\n         String email = queryParams.getFirst(AccountClient.EMAIL_QUERY_PARAM);\n-        if (email == null) {\n+        if (email == null || email.isEmpty()) {\n         \tresponse = Response.status(Response.Status.BAD_REQUEST).entity(\"You must specify an 'email' query paramater.\").type(\"text/plain\").build();\n         \treturn response;\n         }\n \n         String tenantId = queryParams.getFirst(AuthN.TENANT_ID_QUERY_PARAM);\n-        if (tenantId == null) {\n+        if (tenantId == null || tenantId.isEmpty()) {\n         \tresponse = Response.status(Response.Status.BAD_REQUEST).entity(\"You must specify an 'tid' (tenant ID) query paramater.\").type(\"text/plain\").build();\n         \treturn response;\n         }\n-\n+        //\n+        // Search for an account with the provided email and tenant ID\n+        //\n+\t\tboolean found = false;\n+\t\tAccountListItem accountListItem = null;\n     \tAccountsCommonList accountList = getAccountList(ui);\n-    \tif (accountList == null || accountList.getTotalItems() == 0) {\n-        \tresponse = Response.status(Response.Status.NOT_FOUND).entity(\"Could not locate an account associated with the email: \" +\n-        \t\t\temail).type(\"text/plain\").build();\n-    \t} else if (accountList.getTotalItems() > 1) {\n-        \tresponse = Response.status(Response.Status.BAD_REQUEST).entity(\"Located more than one account associated with the email: \" +\n-        \t\t\temail).type(\"text/plain\").build();\n-    \t} else {\n-    \t\tAccountListItem accountListItem = accountList.getAccountListItem().get(0);\n-    \t\ttry {\n+    \tif (accountList != null || accountList.getTotalItems() > 0) {\n+\t\t\tList<AccountListItem> itemsList = accountList.getAccountListItem();\n+\t\t\tfor (AccountListItem item : itemsList) {\n+\t\t\t\tif (item != null && item.getTenantid() != null && item.getTenantid().equalsIgnoreCase(tenantId)) {\n+\t\t\t\t\taccountListItem = item;\n+\t\t\t\t\tfound = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+    \t}\n+\n+    \tif (found == true) {\n+\t\t\ttry {\n \t\t\t\tresponse = requestPasswordReset(ui, tenantId, accountListItem);\n \t\t\t} catch (Exception e) {\n-            \tresponse = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).type(\"text/plain\").build();\n+\t        \tresponse = Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).type(\"text/plain\").build();\n \t\t\t}\n+    \t} else {\n+    \t\tString msg = String.format(\"Could not locate an account associated with the email '%s' and tenant ID '%s'\",\n+    \t\t\t\temail , tenantId);\n+        \tresponse = Response.status(Response.Status.NOT_FOUND).entity(msg).type(\"text/plain\").build();\n     \t}\n \n         return response;"
  },
  {
    "sha": "2a17628ba4868a0fa241982256278259b70bab16",
    "filename": "services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountDocumentHandler.java",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/collectionspace/services/blob/20def947654810750594a85ddccf929bc0dbc085/services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountDocumentHandler.java",
    "raw_url": "https://github.com/collectionspace/services/raw/20def947654810750594a85ddccf929bc0dbc085/services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountDocumentHandler.java",
    "contents_url": "https://api.github.com/repos/collectionspace/services/contents/services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountDocumentHandler.java?ref=20def947654810750594a85ddccf929bc0dbc085",
    "patch": "@@ -232,7 +232,21 @@ public AccountsCommonList extractCommonPartList(\n             AccountListItem accListItem = new AccountListItem();\n             accListItem.setScreenName(account.getScreenName());\n             accListItem.setUserid(account.getUserId());\n-            accListItem.setTenantid(account.getTenants().get(0).getTenantId()); // pick the default/first tenant\n+            //\n+            // Since accounts can be associated with more than 1 tenant, we only want to include\n+            // the tenant information for the current service context.\n+            //\n+        \tString tenantInCtx = this.getServiceContext().getTenantId();\n+            List<AccountTenant> associatedTenantList = account.getTenants();\n+            for (AccountTenant associatedTenant : associatedTenantList) {\n+                if (associatedTenant != null && associatedTenant.getTenantId() != null) {\n+                \tif (associatedTenant.getTenantId().equalsIgnoreCase(tenantInCtx)) {\n+                \t\taccListItem.setTenantid(associatedTenant.getTenantId());\n+                \t\tbreak;\n+                \t}\n+                }\n+            }\n+\n             accListItem.setTenants(account.getTenants());\n             accListItem.setEmail(account.getEmail());\n             accListItem.setStatus(account.getStatus());"
  },
  {
    "sha": "b42977406e12158e4d761c1facbbeb71bafefa48",
    "filename": "services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountStorageClient.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/collectionspace/services/blob/20def947654810750594a85ddccf929bc0dbc085/services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountStorageClient.java",
    "raw_url": "https://github.com/collectionspace/services/raw/20def947654810750594a85ddccf929bc0dbc085/services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountStorageClient.java",
    "contents_url": "https://api.github.com/repos/collectionspace/services/contents/services/account/service/src/main/java/org/collectionspace/services/account/storage/AccountStorageClient.java?ref=20def947654810750594a85ddccf929bc0dbc085",
    "patch": "@@ -184,14 +184,10 @@ public void update(ServiceContext ctx, String id, DocumentHandler handler)\n                         accountReceived.getPassword());\n             }\n             DocumentWrapper<AccountsCommon> wrapDoc =\n-                    new DocumentWrapperImpl<AccountsCommon>(accountFound);\n+            \t\tnew DocumentWrapperImpl<AccountsCommon>(accountFound);\n             handler.handle(Action.UPDATE, wrapDoc);\n             handler.complete(Action.UPDATE, wrapDoc); \n             jpaConnectionContext.commitTransaction();\n-            //\n-            // Don't sanitize until we've committed changes to the DB\n-            //\n-            handler.sanitize(wrapDoc);\n         } catch (BadRequestException bre) {\n         \tjpaConnectionContext.markForRollback();\n             throw bre;"
  },
  {
    "sha": "81b2a7b4d47213a2e5d014946aa446f17da1f2c7",
    "filename": "services/common/src/main/java/org/collectionspace/services/common/SecurityResourceBase.java",
    "status": "modified",
    "additions": 22,
    "deletions": 2,
    "changes": 24,
    "blob_url": "https://github.com/collectionspace/services/blob/20def947654810750594a85ddccf929bc0dbc085/services/common/src/main/java/org/collectionspace/services/common/SecurityResourceBase.java",
    "raw_url": "https://github.com/collectionspace/services/raw/20def947654810750594a85ddccf929bc0dbc085/services/common/src/main/java/org/collectionspace/services/common/SecurityResourceBase.java",
    "contents_url": "https://api.github.com/repos/collectionspace/services/contents/services/common/src/main/java/org/collectionspace/services/common/SecurityResourceBase.java?ref=20def947654810750594a85ddccf929bc0dbc085",
    "patch": "@@ -4,6 +4,8 @@\n import org.collectionspace.services.common.document.DocumentException;\n import org.collectionspace.services.common.document.DocumentFilter;\n import org.collectionspace.services.common.document.DocumentHandler;\n+import org.collectionspace.services.common.document.DocumentWrapper;\n+import org.collectionspace.services.common.document.DocumentWrapperImpl;\n import org.collectionspace.services.common.storage.TransactionContext;\n import org.collectionspace.services.common.storage.jpa.JPATransactionContext;\n import org.slf4j.Logger;\n@@ -141,6 +143,12 @@ public Object getList(UriInfo ui, Class objectClass) {\n             throw bigReThrow(e, ServiceMessages.LIST_FAILED);\n         }\n     }\n+    \n+    protected OT sanitize(DocumentHandler handler, OT outputObject) {\n+        DocumentWrapper<OT> wrapDoc = new DocumentWrapperImpl<OT>(outputObject);\n+        handler.sanitize(wrapDoc);\n+        return outputObject;\n+    }    \n \n     public Object update(String csid, IT theUpdate, Class<?> objectClass) {\n         return update((UriInfo)null, csid, theUpdate, objectClass);\n@@ -155,13 +163,19 @@ public Object update(UriInfo ui, String csid, IT theUpdate, Class objectClass) {\n             ServiceContext<IT, OT> ctx = createServiceContext(theUpdate, objectClass, ui);\n             DocumentHandler handler = createDocumentHandler(ctx);\n             getStorageClient(ctx).update(ctx, csid, handler);\n-            return ctx.getOutput();\n+            return sanitize(handler, ctx.getOutput());\n         } catch (Exception e) {\n             throw bigReThrow(e, ServiceMessages.PUT_FAILED, csid);\n         }\n     }\n     \n     public Object update(ServiceContext<?, ?> parentCtx, UriInfo ui, String csid, IT theUpdate, Class objectClass) {\n+    \treturn update(parentCtx, ui, csid, theUpdate, objectClass, true);\n+    }\n+\n+    public Object update(ServiceContext<?, ?> parentCtx, UriInfo ui, String csid, IT theUpdate, Class objectClass, boolean sanitize) {\n+    \tObject result = null;\n+    \t\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"updateRole with csid=\" + csid);\n         }\n@@ -171,10 +185,16 @@ public Object update(ServiceContext<?, ?> parentCtx, UriInfo ui, String csid, IT\n             ServiceContext<IT, OT> ctx = createServiceContext(parentCtx, theUpdate, objectClass, ui);\n             DocumentHandler handler = createDocumentHandler(ctx);\n             getStorageClient(ctx).update(ctx, csid, handler);\n-            return ctx.getOutput();\n+            if (sanitize == true) {\n+            \tresult = sanitize(handler, ctx.getOutput());\n+            } else {\n+            \tresult = ctx.getOutput();\n+            }\n         } catch (Exception e) {\n             throw bigReThrow(e, ServiceMessages.PUT_FAILED, csid);\n         }\n+        \n+        return result;\n     }\n \n     protected ServiceContext<IT, OT> createServiceContext("
  },
  {
    "sha": "fd0cd6dadfbf7ab18a014125dddd3be9aa84165c",
    "filename": "services/common/src/main/java/org/collectionspace/services/common/context/RemoteServiceContextImpl.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/collectionspace/services/blob/20def947654810750594a85ddccf929bc0dbc085/services/common/src/main/java/org/collectionspace/services/common/context/RemoteServiceContextImpl.java",
    "raw_url": "https://github.com/collectionspace/services/raw/20def947654810750594a85ddccf929bc0dbc085/services/common/src/main/java/org/collectionspace/services/common/context/RemoteServiceContextImpl.java",
    "contents_url": "https://api.github.com/repos/collectionspace/services/contents/services/common/src/main/java/org/collectionspace/services/common/context/RemoteServiceContextImpl.java?ref=20def947654810750594a85ddccf929bc0dbc085",
    "patch": "@@ -290,8 +290,11 @@ synchronized public void closeConnection() throws TransactionException {\n \t\t\tTransactionContext transactionCtx = getCurrentTransactionContext();\n \t\t\tif (transactionCtx != null) {\n \t\t\t\tif (--transactionConnectionRefCount == 0) {\n-\t\t\t\t\ttransactionCtx.close();\n-\t\t\t        this.setProperty(StorageClient.SC_TRANSACTION_CONTEXT_KEY, null);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\ttransactionCtx.close();\n+\t\t\t\t\t} finally {\n+\t\t\t\t        this.setProperty(StorageClient.SC_TRANSACTION_CONTEXT_KEY, null);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tthrow new TransactionException(\"Attempted to release a non-existent storage connection.  Transaction context missing from service context.\");"
  },
  {
    "sha": "b963929a3be0368a2e76afbdf33549cf3c823b66",
    "filename": "services/common/src/main/java/org/collectionspace/services/common/storage/jpa/JpaStorageClientImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/collectionspace/services/blob/20def947654810750594a85ddccf929bc0dbc085/services/common/src/main/java/org/collectionspace/services/common/storage/jpa/JpaStorageClientImpl.java",
    "raw_url": "https://github.com/collectionspace/services/raw/20def947654810750594a85ddccf929bc0dbc085/services/common/src/main/java/org/collectionspace/services/common/storage/jpa/JpaStorageClientImpl.java",
    "contents_url": "https://api.github.com/repos/collectionspace/services/contents/services/common/src/main/java/org/collectionspace/services/common/storage/jpa/JpaStorageClientImpl.java?ref=20def947654810750594a85ddccf929bc0dbc085",
    "patch": "@@ -256,11 +256,13 @@ public void getFiltered(ServiceContext ctx, DocumentHandler handler)\n             handler.complete(Action.GET_ALL, wrapDoc);\n             jpaConnectionContext.commitTransaction();\n         } catch (DocumentException de) {\n+        \tjpaConnectionContext.markForRollback();\n             throw de;\n         } catch (Exception e) {\n             if (logger.isDebugEnabled()) {\n                 logger.debug(\"Caught exception \", e);\n             }\n+            jpaConnectionContext.markForRollback();\n             throw new DocumentException(e);\n         } finally {\n             ctx.closeConnection();"
  }
]
