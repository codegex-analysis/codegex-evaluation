[
  {
    "sha": "ea8c7ffb4f7ebee3adfba98143e5cfcacb463418",
    "filename": "src/main/java/org/broadinstitute/dsm/db/ViewFilter.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/broadinstitute/ddp-study-manager/blob/7b08be85fc9b0b449454d66cd9789cb9e67d358c/src/main/java/org/broadinstitute/dsm/db/ViewFilter.java",
    "raw_url": "https://github.com/broadinstitute/ddp-study-manager/raw/7b08be85fc9b0b449454d66cd9789cb9e67d358c/src/main/java/org/broadinstitute/dsm/db/ViewFilter.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/ddp-study-manager/contents/src/main/java/org/broadinstitute/dsm/db/ViewFilter.java?ref=7b08be85fc9b0b449454d66cd9789cb9e67d358c",
    "patch": "@@ -372,28 +372,28 @@ private static ViewFilter getFilterView(@NonNull ResultSet rs, @NonNull Map<Stri\n                 if (!tissueList.getOncHistoryDetails().getDestructionPolicy().equals(\"indefinitely\")) {\n                     destructionPolicy = Integer.parseInt(tissueList.getOncHistoryDetails().getDestructionPolicy());\n                 }\n-                SimpleDateFormat sdf = null;\n+                DateTimeFormatter dateTimeFormatter = null;\n                 switch (len) {\n                     case 4: {\n-                        sdf = new SimpleDateFormat(\"yyyy\");\n+                        dateTimeFormatter = SystemUtil.ONLY_YEAR;\n                         break;\n                     }\n \n                     case 7: {\n-                        sdf = new SimpleDateFormat(\"yyyy-MM\");\n+                        dateTimeFormatter = SystemUtil.PARTIAL_DATE;\n                         break;\n                     }\n \n                     case 10: {\n-                        sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+                        dateTimeFormatter = SystemUtil.FULL_DATE;\n                         break;\n                     }\n                 }\n-                if (sdf == null) {\n+                if (dateTimeFormatter == null) {\n                     logger.warn(\"The date px \" + dateString + \" has an unknown format!\");\n                     continue loop;\n                 }\n-                long datePx = SystemUtil.getLong(dateString, sdf);\n+                long datePx = SystemUtil.getLong(dateString, dateTimeFormatter);\n                 long lastDay = datePx + destructionPolicy * (SystemUtil.MILLIS_PER_DAY * 365);\n                 long current = System.currentTimeMillis();\n                 int days = (int) ((lastDay - current) / SystemUtil.MILLIS_PER_DAY);"
  },
  {
    "sha": "74ccfaf2f0f9d33a4e9f2e0afe00a9bf3009e294",
    "filename": "src/main/java/org/broadinstitute/dsm/util/ElasticSearchUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/broadinstitute/ddp-study-manager/blob/7b08be85fc9b0b449454d66cd9789cb9e67d358c/src/main/java/org/broadinstitute/dsm/util/ElasticSearchUtil.java",
    "raw_url": "https://github.com/broadinstitute/ddp-study-manager/raw/7b08be85fc9b0b449454d66cd9789cb9e67d358c/src/main/java/org/broadinstitute/dsm/util/ElasticSearchUtil.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/ddp-study-manager/contents/src/main/java/org/broadinstitute/dsm/util/ElasticSearchUtil.java?ref=7b08be85fc9b0b449454d66cd9789cb9e67d358c",
    "patch": "@@ -641,7 +641,7 @@ else if (nameValue[0].startsWith(INVITATIONS)) {\n                     long end = SystemUtil.getLongFromDetailDateString(endDate);\n                     rangeQueryBuilder(queryBuilder, INVITATIONS + DBConstants.ALIAS_DELIMITER + invitationParam[1], start, end, must);\n                 }\n-                catch (ParseException e) {\n+                catch (Exception e) {\n                     if (wildCard) {\n                         if (must) {\n                             queryBuilder.must(QueryBuilders.wildcardQuery(INVITATIONS + DBConstants.ALIAS_DELIMITER + invitationParam[1].trim(), userEntered + \"*\"));"
  },
  {
    "sha": "46357a618687258498c60090ada801dd9200cc36",
    "filename": "src/main/java/org/broadinstitute/dsm/util/SystemUtil.java",
    "status": "modified",
    "additions": 51,
    "deletions": 19,
    "changes": 70,
    "blob_url": "https://github.com/broadinstitute/ddp-study-manager/blob/7b08be85fc9b0b449454d66cd9789cb9e67d358c/src/main/java/org/broadinstitute/dsm/util/SystemUtil.java",
    "raw_url": "https://github.com/broadinstitute/ddp-study-manager/raw/7b08be85fc9b0b449454d66cd9789cb9e67d358c/src/main/java/org/broadinstitute/dsm/util/SystemUtil.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/ddp-study-manager/contents/src/main/java/org/broadinstitute/dsm/util/SystemUtil.java?ref=7b08be85fc9b0b449454d66cd9789cb9e67d358c",
    "patch": "@@ -10,6 +10,12 @@\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoField;\n import java.util.Date;\n \n public class SystemUtil {\n@@ -29,6 +35,32 @@\n     private static final String LINEBREAK = \"\\r\";\n     public static final String SEPARATOR = \"\\t\";\n \n+    public static final DateTimeFormatter FULL_DATE = new DateTimeFormatterBuilder()\n+            .appendPattern(DATE_FORMAT)\n+            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n+            .parseDefaulting(ChronoField.MINUTE_OF_DAY, 0)\n+            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n+            .toFormatter();\n+\n+    public static final DateTimeFormatter PARTIAL_DATE = new DateTimeFormatterBuilder()\n+            .appendPattern(PARTIAL_DATE_FORMAT)\n+            .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)\n+            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n+            .parseDefaulting(ChronoField.MINUTE_OF_DAY, 0)\n+            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n+            .toFormatter();\n+\n+    public static final DateTimeFormatter ONLY_YEAR = new DateTimeFormatterBuilder()\n+            .appendPattern(YEAR_DATE_FORMAT)\n+            .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)\n+            .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)\n+            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n+            .parseDefaulting(ChronoField.MINUTE_OF_DAY, 0)\n+            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n+            .toFormatter();\n+\n+\n+\n     public static String getDateFormatted(@NonNull long inputDate) {\n         Date date = new Date(inputDate);\n         SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);\n@@ -37,15 +69,13 @@ public static String getDateFormatted(@NonNull long inputDate) {\n \n     public static long getLongFromDateString(String dateString) {\n         if (StringUtils.isNotBlank(dateString)) {\n-            SimpleDateFormat sdf = new SimpleDateFormat(SystemUtil.DATE_FORMAT);\n-            return getLong(dateString, sdf);\n+            return getLong(dateString, FULL_DATE);\n         }\n         return 0;\n     }\n \n     public static long getLongFromDetailDateString(@NonNull String dateString) {\n-        SimpleDateFormat sdf = new SimpleDateFormat(SystemUtil.END_DATE_FORMAT);\n-        return getLong(dateString, sdf);\n+        return getLong(dateString, DateTimeFormatter.ofPattern(END_DATE_FORMAT));\n     }\n \n     public static String changeDateFormat(@NonNull String inputDateFormat, @NonNull String outputDateFormat, @NonNull String dateString) {\n@@ -69,35 +99,37 @@ public static String changeDateFormat(@NonNull String inputDateFormat, @NonNull\n         return dateString;\n     }\n \n-    public static long getLong(@NonNull String dateString, @NonNull SimpleDateFormat sdf) {\n+    public static long getLong(@NonNull String dateString, @NonNull DateTimeFormatter dateTimeFormatter) {\n         try {\n-            Date date = sdf.parse(dateString);\n-            return date.getTime();\n+            LocalDateTime parsedDateTime = LocalDateTime.parse(dateString, dateTimeFormatter);\n+            return parsedDateTime.toInstant(ZoneOffset.UTC).toEpochMilli();\n         }\n-        catch (ParseException e) {\n+        catch (DateTimeParseException e) {\n             throw new RuntimeException(\"Couldn't parse date string to date \", e);\n         }\n     }\n \n     public static long getLongFromString(@NonNull String dateString) throws ParseException {\n+        DateTimeFormatter dateTimeFormatter;\n+        LocalDateTime startDate;\n         try {\n-            SimpleDateFormat sdf = new SimpleDateFormat(SystemUtil.DATE_FORMAT);\n-            Date date = sdf.parse(dateString);\n-            return date.getTime();\n+            dateTimeFormatter = FULL_DATE;\n+            startDate = LocalDateTime.parse(dateString, dateTimeFormatter);\n+            return startDate.toInstant(ZoneOffset.UTC).toEpochMilli();\n         }\n-        catch (ParseException e) {\n+        catch (DateTimeParseException e) {\n             try {\n-                SimpleDateFormat sdf = new SimpleDateFormat(SystemUtil.PARTIAL_DATE_FORMAT);\n-                Date date = sdf.parse(dateString);\n-                return date.getTime();\n+                dateTimeFormatter = PARTIAL_DATE;\n+                startDate = LocalDateTime.parse(dateString, dateTimeFormatter);\n+                return startDate.toInstant(ZoneOffset.UTC).toEpochMilli();\n             }\n-            catch (ParseException e1) {\n-                SimpleDateFormat sdf = new SimpleDateFormat(SystemUtil.YEAR_DATE_FORMAT);\n+            catch (DateTimeParseException e1) {\n                 if (dateString.length() != 4) {\n                     throw new ParseException(\"String \" + dateString + \" is not a year\", 0);\n                 }\n-                Date date = sdf.parse(dateString);\n-                return date.getTime();\n+                dateTimeFormatter = ONLY_YEAR;\n+                startDate = LocalDateTime.parse(dateString, dateTimeFormatter);\n+                return startDate.toInstant(ZoneOffset.UTC).toEpochMilli();\n             }\n         }\n     }"
  }
]
