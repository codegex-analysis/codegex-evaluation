[
  {
    "sha": "d8f85939dcee3acdd0faf8bdb6dd9b4916f6c776",
    "filename": "scripts/cnv_wdl/cnv_common_tasks.wdl",
    "status": "modified",
    "additions": 19,
    "deletions": 49,
    "changes": 68,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/cnv_common_tasks.wdl",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/cnv_common_tasks.wdl",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/scripts/cnv_wdl/cnv_common_tasks.wdl?ref=16ce622017aaeaddf72b25d14b0374475ca6847c",
    "patch": "@@ -452,6 +452,8 @@ task PostprocessGermlineCNVCalls {\n       Array[String]? allosomal_contigs\n       Int ref_copy_number_autosomal_contigs\n       Int sample_index\n+      Int maximum_number_events\n+      Int maximum_number_pass_events\n       File? intervals_vcf\n       File? intervals_vcf_index\n       File? clustered_vcf\n@@ -476,6 +478,7 @@ task PostprocessGermlineCNVCalls {\n     String genotyped_intervals_vcf_filename = \"genotyped-intervals-~{entity_id}.vcf.gz\"\n     String genotyped_segments_vcf_filename = \"genotyped-segments-~{entity_id}.vcf.gz\"\n     String denoised_copy_ratios_filename = \"denoised_copy_ratios-~{entity_id}.tsv\"\n+    String qc_status_filename = \"~{entity_id}.qcStatus.txt\"\n \n     Array[String] allosomal_contigs_args = if defined(allosomal_contigs) then prefix(\"--allosomal-contig \", select_first([allosomal_contigs])) else []\n \n@@ -531,6 +534,20 @@ task PostprocessGermlineCNVCalls {\n             ~{\"--clustered-breakpoints \" + clustered_vcf} \\\n             ~{\"-R \" + reference_fasta}\n \n+        #use wc instead of grep -c so zero count isn't non-zero exit\n+        #use grep -P to recognize tab character\n+        NUM_SEGMENTS=$(zgrep '^[^#]' ~{genotyped_segments_vcf_filename} | grep -v '0/0' | grep -v -P '\\t0:1:' | grep '' | wc -l)\n+        NUM_PASS_SEGMENTS=$(zgrep '^[^#]' ~{genotyped_segments_vcf_filename} | grep -v '0/0' | grep -v -P '\\t0:1:' | grep 'PASS' | wc -l)\n+        if [ $NUM_SEGMENTS -lt ~{maximum_number_events} ]; then\n+            if [ $NUM_PASS_SEGMENTS -lt ~{maximum_number_pass_events} ]; then\n+              echo \"PASS\" >> ~{qc_status_filename}\n+            else\n+              echo \"EXCESSIVE_NUMBER_OF_PASS_EVENTS\" >> ~{qc_status_filename}\n+            fi\n+        else\n+            echo \"EXCESSIVE_NUMBER_OF_EVENTS\" >> ~{qc_status_filename}\n+        fi\n+\n         rm -rf CALLS_*\n         rm -rf MODEL_*\n         rm -rf contig-ploidy-calls\n@@ -550,55 +567,8 @@ task PostprocessGermlineCNVCalls {\n         File genotyped_segments_vcf = genotyped_segments_vcf_filename\n         File genotyped_segments_vcf_index = genotyped_segments_vcf_filename + \".tbi\"\n         File denoised_copy_ratios = denoised_copy_ratios_filename\n-    }\n-}\n-\n-task CollectSampleQualityMetrics {\n-    input {\n-      File genotyped_segments_vcf\n-      String entity_id\n-      Int maximum_number_events\n-      Int maximum_number_pass_events\n-\n-      # Runtime parameters\n-      String bash_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n-    }\n-\n-    Int machine_mem_mb = select_first([mem_gb, 1]) * 1000\n-\n-    command <<<\n-        set -eu\n-        #use wc instead of grep -c so zero count isn't non-zero exit\n-        #use grep -P to recognize tab character\n-        NUM_SEGMENTS=$(zgrep '^[^#]' ~{genotyped_segments_vcf} | grep -v '0/0' | grep -v -P '\\t0:1:' | grep '' | wc -l)\n-        NUM_PASS_SEGMENTS=$(zgrep '^[^#]' ~{genotyped_segments_vcf} | grep -v '0/0' | grep -v -P '\\t0:1:' | grep 'PASS' | wc -l)\n-        if [ $NUM_SEGMENTS -lt ~{maximum_number_events} ]; then\n-            if [ $NUM_PASS_SEGMENTS -lt ~{maximum_number_pass_events} ]; then\n-              echo \"PASS\" >> ~{entity_id}.qcStatus.txt\n-            else\n-              echo \"EXCESSIVE_NUMBER_OF_PASS_EVENTS\" >> ~{entity_id}.qcStatus.txt\n-            fi\n-        else\n-            echo \"EXCESSIVE_NUMBER_OF_EVENTS\" >> ~{entity_id}.qcStatus.txt\n-        fi\n-    >>>\n-\n-    runtime {\n-        docker: bash_docker\n-        memory: machine_mem_mb + \" MB\"\n-        disks: \"local-disk \" + select_first([disk_space_gb, 20]) + if use_ssd then \" SSD\" else \" HDD\"\n-        cpu: select_first([cpu, 1])\n-        preemptible: select_first([preemptible_attempts, 5])\n-    }\n-\n-    output {\n-        File qc_status_file = \"~{entity_id}.qcStatus.txt\"\n-        String qc_status_string = read_string(\"~{entity_id}.qcStatus.txt\")\n+        File qc_status_file = qc_status_filename\n+        String qc_status_string = read_string(qc_status_filename)\n     }\n }\n "
  },
  {
    "sha": "5135b0f88585e5d23d409b3e8a6df30d35dcc7cb",
    "filename": "scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl",
    "status": "modified",
    "additions": 4,
    "deletions": 12,
    "changes": 16,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl?ref=16ce622017aaeaddf72b25d14b0374475ca6847c",
    "patch": "@@ -247,18 +247,10 @@ workflow CNVGermlineCaseWorkflow {\n                 ref_copy_number_autosomal_contigs = ref_copy_number_autosomal_contigs,\n                 contig_ploidy_calls_tar = DetermineGermlineContigPloidyCaseMode.contig_ploidy_calls_tar,\n                 sample_index = sample_index,\n-                gatk4_jar_override = gatk4_jar_override,\n-                gatk_docker = gatk_docker,\n-                preemptible_attempts = preemptible_attempts\n-        }\n-\n-        call CNVTasks.CollectSampleQualityMetrics {\n-            input:\n-                genotyped_segments_vcf = PostprocessGermlineCNVCalls.genotyped_segments_vcf,\n-                entity_id = CollectCounts.entity_id[sample_index],\n                 maximum_number_events = maximum_number_events_per_sample,\n                 maximum_number_pass_events = maximum_number_pass_events_per_sample,\n-                bash_docker = gatk_docker,\n+                gatk4_jar_override = gatk4_jar_override,\n+                gatk_docker = gatk_docker,\n                 preemptible_attempts = preemptible_attempts\n         }\n     }\n@@ -282,8 +274,8 @@ workflow CNVGermlineCaseWorkflow {\n         Array[File] genotyped_intervals_vcf_indexes = PostprocessGermlineCNVCalls.genotyped_intervals_vcf_index\n         Array[File] genotyped_segments_vcfs = PostprocessGermlineCNVCalls.genotyped_segments_vcf\n         Array[File] genotyped_segments_vcf_indexes = PostprocessGermlineCNVCalls.genotyped_segments_vcf_index\n-        Array[File] qc_status_files = CollectSampleQualityMetrics.qc_status_file\n-        Array[String] qc_status_strings = CollectSampleQualityMetrics.qc_status_string\n+        Array[File] qc_status_files = PostprocessGermlineCNVCalls.qc_status_file\n+        Array[String] qc_status_strings = PostprocessGermlineCNVCalls.qc_status_string\n         Array[File] denoised_copy_ratios = PostprocessGermlineCNVCalls.denoised_copy_ratios\n     }\n }"
  },
  {
    "sha": "fecc8dad08bdaa47b556ec668d788da1da88ee35",
    "filename": "scripts/cnv_wdl/germline/cnv_germline_cohort_workflow.wdl",
    "status": "modified",
    "additions": 4,
    "deletions": 12,
    "changes": 16,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/germline/cnv_germline_cohort_workflow.wdl",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/germline/cnv_germline_cohort_workflow.wdl",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/scripts/cnv_wdl/germline/cnv_germline_cohort_workflow.wdl?ref=16ce622017aaeaddf72b25d14b0374475ca6847c",
    "patch": "@@ -340,18 +340,10 @@ workflow CNVGermlineCohortWorkflow {\n                 allosomal_contigs = allosomal_contigs,\n                 ref_copy_number_autosomal_contigs = ref_copy_number_autosomal_contigs,\n                 sample_index = sample_index,\n-                gatk4_jar_override = gatk4_jar_override,\n-                gatk_docker = gatk_docker,\n-                preemptible_attempts = preemptible_attempts\n-        }\n-\n-        call CNVTasks.CollectSampleQualityMetrics {\n-            input:\n-                genotyped_segments_vcf = PostprocessGermlineCNVCalls.genotyped_segments_vcf,\n-                entity_id = CollectCounts.entity_id[sample_index],\n                 maximum_number_events = maximum_number_events_per_sample,\n                 maximum_number_pass_events = maximum_number_pass_events_per_sample,\n-                bash_docker = gatk_docker,\n+                gatk4_jar_override = gatk4_jar_override,\n+                gatk_docker = gatk_docker,\n                 preemptible_attempts = preemptible_attempts\n         }\n     }\n@@ -433,8 +425,8 @@ workflow CNVGermlineCohortWorkflow {\n         File genotyped_segments_vcf_indexes_path_list = WriteSegmentIndexes.path_list\n \n         Array[File] denoised_copy_ratios = PostprocessGermlineCNVCalls.denoised_copy_ratios\n-        Array[File] sample_qc_status_files = CollectSampleQualityMetrics.qc_status_file\n-        Array[String] sample_qc_status_strings = CollectSampleQualityMetrics.qc_status_string\n+        Array[File] sample_qc_status_files = PostprocessGermlineCNVCalls.qc_status_file\n+        Array[String] sample_qc_status_strings = PostprocessGermlineCNVCalls.qc_status_string\n         File model_qc_status_file = CollectModelQualityMetrics.qc_status_file\n         String model_qc_string = CollectModelQualityMetrics.qc_status_string\n         Array[File] denoised_copy_ratios = PostprocessGermlineCNVCalls.denoised_copy_ratios"
  },
  {
    "sha": "ad0a06efbb1f302f48d43b6fccfdd3090724fc97",
    "filename": "scripts/cnv_wdl/germline/joint_call_exome_cnvs.wdl",
    "status": "modified",
    "additions": 12,
    "deletions": 17,
    "changes": 29,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/germline/joint_call_exome_cnvs.wdl",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/16ce622017aaeaddf72b25d14b0374475ca6847c/scripts/cnv_wdl/germline/joint_call_exome_cnvs.wdl",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/scripts/cnv_wdl/germline/joint_call_exome_cnvs.wdl?ref=16ce622017aaeaddf72b25d14b0374475ca6847c",
    "patch": "@@ -13,7 +13,7 @@ workflow JointCallExomeCNVs {\n       File intervals\n       File? blacklist_intervals\n \n-\t  File contig_ploidy_calls_tar_path_list\n+      File contig_ploidy_calls_tar_path_list\n       File gcnv_calls_tars_path_list\n       File genotyped_intervals_vcf_indexes_path_list\n       File genotyped_intervals_vcfs_path_list\n@@ -35,10 +35,10 @@ workflow JointCallExomeCNVs {\n       File ref_fasta_fai\n       File ref_fasta\n       String x_contig_name\n-      File  protein_coding_gtf\n-      File  linc_rna_gtf\n-      File  promoter_bed\n-      File  noncoding_bed\n+      File protein_coding_gtf\n+      File linc_rna_gtf\n+      File promoter_bed\n+      File noncoding_bed\n       String gatk_docker\n       String gatk_docker_clustering\n       String gatk_docker_qual_calc\n@@ -124,34 +124,29 @@ workflow JointCallExomeCNVs {\n               allosomal_contigs = allosomal_contigs,\n               ref_copy_number_autosomal_contigs = ref_copy_number_autosomal_contigs,\n               sample_index = scatter_index,\n+              maximum_number_events = maximum_number_events,\n+              maximum_number_pass_events = maximum_number_pass_events,\n               intervals_vcf = intervals_vcfs[scatter_index],\n               intervals_vcf_index = intervals_vcf_indexes[scatter_index],\n               clustered_vcf = GatherJointSegmentation.clustered_vcf,\n               clustered_vcf_index = GatherJointSegmentation.clustered_vcf_index,\n               gatk_docker = gatk_docker_qual_calc\n       }\n-       call CNVTasks.CollectSampleQualityMetrics as SampleQC {\n-        input:\n-          genotyped_segments_vcf = RecalcQual.genotyped_segments_vcf,\n-          entity_id = sub(sub(basename(intervals_vcfs[scatter_index]), \".vcf.gz\", \"\"), \"intervals_output_\", \"\"),\n-          maximum_number_events = maximum_number_events,\n-          maximum_number_pass_events = maximum_number_pass_events\n-      }\n     }\n \n     #only put samples that passed QC into the combined VCF\n     scatter(idx in range(length(RecalcQual.genotyped_segments_vcf))) {\n-      if (SampleQC.qc_status_string[idx] == \"PASS\") {\n+      if (RecalcQual.qc_status_string[idx] == \"PASS\") {\n         String subset = RecalcQual.genotyped_segments_vcf[idx]\n         String subset_indexes = RecalcQual.genotyped_segments_vcf_index[idx]\n       }\n-      if (SampleQC.qc_status_string[idx] != \"PASS\") {\n+      if (RecalcQual.qc_status_string[idx] != \"PASS\") {\n         String failed = sub(sub(basename(RecalcQual.genotyped_segments_vcf[idx]), \".vcf.gz\", \"\"), \"segments_output_\", \"\")\n       }\n     }\n     Array[String] subset_arr = select_all(subset)\n     Array[String] subset_index_arr = select_all(subset_indexes)\n-    Array[String] failed_samples = select_all(failed)\n+    Array[String] failed_qc_samples = select_all(failed)\n \n     call FastCombine {\n       input:\n@@ -177,8 +172,8 @@ workflow JointCallExomeCNVs {\n       File combined_calls_index = FastCombine.combined_vcf_index\n       File annotated_vcf = Annotate.annotated_vcf\n       File annotated_vcf_index = Annotate.annotated_vcf_idx\n-      Array[String] sample_qc_status_strings = SampleQC.qc_status_string\n-      Array[String] failed_samples = failed_samples\n+      Array[String] sample_qc_status_strings = RecalcQual.qc_status_string\n+      Array[String] failed_samples = failed_qc_samples\n     }\n }\n "
  }
]
