[
  {
    "sha": "4b5528371e7efce784352c76ae4ee3137f3ca0d5",
    "filename": "src/main/java/org/broadinstitute/hellbender/engine/spark/datasources/VariantsSparkSink.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/engine/spark/datasources/VariantsSparkSink.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/engine/spark/datasources/VariantsSparkSink.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/engine/spark/datasources/VariantsSparkSink.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -122,7 +122,7 @@ private static void writeVariantsSingle(\n         final JavaRDD<VariantContext> sortedVariants = sortVariantsToHeader ? sortVariants(variants, header, numReducers) : variants;\n         final JavaRDD<VariantContext> variantsToSave;\n         if (writeGvcf) {\n-            GVCFBlockCombiner gvcfBlockCombiner = new GVCFBlockCombiner(gqPartitions, defaultPloidy, false);\n+            GVCFBlockCombiner gvcfBlockCombiner = new GVCFBlockCombiner(gqPartitions, false);\n             gvcfBlockCombiner.addRangesToHeader(header);\n             variantsToSave = sortedVariants.mapPartitions((FlatMapFunction<Iterator<VariantContext>, VariantContext>) v -> new GVCFBlockCombiningIterator(v, gqPartitions, defaultPloidy));\n         } else {"
  },
  {
    "sha": "6f776d215ff681ae581540cba7ad3b5d4fae8d8c",
    "filename": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtils.java",
    "status": "modified",
    "additions": 49,
    "deletions": 6,
    "changes": 55,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtils.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtils.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtils.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -285,9 +285,45 @@ else if ( clazz.equals(int[].class) ) {\n      */\n     public static List<Allele> calculateMostLikelyAlleles(final VariantContext vc, final int defaultPloidy,\n                                                           final int numAltAllelesToKeep) {\n+        return calculateMostLikelyAlleles(vc, defaultPloidy, numAltAllelesToKeep, false);\n+    }\n+\n+    /**\n+     * Returns the new set of alleles to use based on a likelihood score: alleles' scores are the sum of their counts in\n+     * sample genotypes, weighted by the confidence in the genotype calls.\n+     *\n+     * In the case of ties, the alleles will be chosen from lowest index to highest index.\n+     *\n+     * @param vc target variant context.\n+     * @param numAltAllelesToKeep number of alt alleles to keep.\n+     * @return the list of alleles to keep, including the reference and {@link Allele#NON_REF_ALLELE} if present\n+     *\n+     */\n+    public static List<Allele> calculateMostLikelyAllelesForMonomorphicSite(final VariantContext vc, final int defaultPloidy,\n+                                                                            final int numAltAllelesToKeep) {\n+        return calculateMostLikelyAlleles(vc, defaultPloidy, numAltAllelesToKeep, true);\n+    }\n+\n+    /**\n+     * Returns the new set of alleles to use based on a likelihood score: alleles' scores are the sum of their counts in\n+     * sample genotypes, weighted by the confidence in the genotype calls.\n+     *\n+     * In the case of ties, the alleles will be chosen from lowest index to highest index.\n+     *\n+     * @param vc target variant context.\n+     * @param numAltAllelesToKeep number of alt alleles to keep.\n+     * @param allHomRefData do likelihood calculations for a monomorphic site\n+     * @return the list of alleles to keep, including the reference and {@link Allele#NON_REF_ALLELE} if present\n+     *\n+     */\n+    private static List<Allele> calculateMostLikelyAlleles(final VariantContext vc, final int defaultPloidy,\n+                                                          final int numAltAllelesToKeep, boolean allHomRefData) {\n         Utils.nonNull(vc, \"vc is null\");\n         Utils.validateArg(defaultPloidy > 0, () -> \"default ploidy must be > 0 but defaultPloidy=\" + defaultPloidy);\n         Utils.validateArg(numAltAllelesToKeep > 0, () -> \"numAltAllelesToKeep must be > 0, but numAltAllelesToKeep=\" + numAltAllelesToKeep);\n+        if (allHomRefData) {\n+            Utils.validate(vc.getGenotypes().stream().allMatch(Genotype::isHomRef), \"Site contains variant genotypes, but method was called for monorphic site.\");\n+        }\n \n         final boolean hasSymbolicNonRef = vc.hasAllele(Allele.NON_REF_ALLELE);\n         final int numberOfAllelesThatArentProperAlts = hasSymbolicNonRef ? 2 : 1; \n@@ -297,7 +333,7 @@ else if ( clazz.equals(int[].class) ) {\n             return vc.getAlleles();\n         }\n \n-        final double[] likelihoodSums = calculateLikelihoodSums(vc, defaultPloidy);\n+        final double[] likelihoodSums = calculateLikelihoodSums(vc, defaultPloidy, allHomRefData);\n         return filterToMaxNumberOfAltAllelesBasedOnScores(numAltAllelesToKeep, vc.getAlleles(), likelihoodSums);\n     }\n \n@@ -329,25 +365,32 @@ else if ( clazz.equals(int[].class) ) {\n      * SUM_{samples whose likeliest genotype contains this alt allele} log(likelihood alt / likelihood hom ref)\n      */\n     @VisibleForTesting\n-    static double[] calculateLikelihoodSums(final VariantContext vc, final int defaultPloidy) {\n+    static double[] calculateLikelihoodSums(final VariantContext vc, final int defaultPloidy, boolean useHomRefData) {\n         final double[] likelihoodSums = new double[vc.getNAlleles()];\n         for ( final Genotype genotype : vc.getGenotypes().iterateInSampleNameOrder() ) {\n             final GenotypeLikelihoods gls = genotype.getLikelihoods();\n             if (gls == null) {\n                 continue;\n             }\n             final double[] glsVector = gls.getAsVector();\n-            final int indexOfMostLikelyGenotype = MathUtils.maxElementIndex(glsVector);\n-            final double GLDiffBetweenRefAndBest = glsVector[indexOfMostLikelyGenotype] - glsVector[PL_INDEX_OF_HOM_REF];\n+            final int genotypeCallIndex = MathUtils.maxElementIndex(glsVector);\n+            int indexOfMostLikelyVariantGenotype;\n+            final double GLDiffBetweenRefAndBestVariantGenotype;\n+            if (genotypeCallIndex > 0 || !useHomRefData) {\n+                 indexOfMostLikelyVariantGenotype = genotypeCallIndex;\n+            } else {\n+                indexOfMostLikelyVariantGenotype = MathUtils.maxElementIndex(glsVector, 1, glsVector.length-1);\n+            }\n+            GLDiffBetweenRefAndBestVariantGenotype = Math.abs(glsVector[indexOfMostLikelyVariantGenotype] - glsVector[PL_INDEX_OF_HOM_REF]);\n             final int ploidy = genotype.getPloidy() > 0 ? genotype.getPloidy() : defaultPloidy;\n \n             final int[] alleleCounts = new GenotypeLikelihoodCalculators()\n-                    .getInstance(ploidy, vc.getNAlleles()).genotypeAlleleCountsAt(indexOfMostLikelyGenotype)\n+                    .getInstance(ploidy, vc.getNAlleles()).genotypeAlleleCountsAt(indexOfMostLikelyVariantGenotype)\n                     .alleleCountsByIndex(vc.getNAlleles() - 1);\n \n             for (int allele = 1; allele < alleleCounts.length; allele++) {\n                 if (alleleCounts[allele] > 0) {\n-                    likelihoodSums[allele] += GLDiffBetweenRefAndBest;\n+                    likelihoodSums[allele] += GLDiffBetweenRefAndBestVariantGenotype;\n                 }\n             }\n         }"
  },
  {
    "sha": "d7778e10459d57807f972ea4f262a427d0d35f1f",
    "filename": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -36,7 +36,6 @@\n import org.broadinstitute.hellbender.utils.genotyper.SampleList;\n import org.broadinstitute.hellbender.utils.haplotype.Haplotype;\n import org.broadinstitute.hellbender.utils.haplotype.HaplotypeBAMWriter;\n-import org.broadinstitute.hellbender.utils.io.IOUtils;\n import org.broadinstitute.hellbender.utils.read.AlignmentUtils;\n import org.broadinstitute.hellbender.utils.read.GATKRead;\n import org.broadinstitute.hellbender.utils.read.ReadUtils;\n@@ -381,7 +380,7 @@ public VariantContextWriter makeVCFWriter( final GATKPath outputVCF, final SAMSe\n \n         if ( hcArgs.emitReferenceConfidence == ReferenceConfidenceMode.GVCF ) {\n             try {\n-                writer = new GVCFWriter(writer, new ArrayList<Number>(hcArgs.GVCFGQBands), hcArgs.standardArgs.genotypeArgs.samplePloidy, hcArgs.floorBlocks);\n+                writer = new GVCFWriter(writer, new ArrayList<Number>(hcArgs.GVCFGQBands), hcArgs.floorBlocks);\n             } catch ( IllegalArgumentException e ) {\n                 throw new CommandLineException.BadArgumentValue(\"GQBands\", \"are malformed: \" + e.getMessage());\n             }"
  },
  {
    "sha": "8596331935d3f30a98f0440cea7d14330be173fe",
    "filename": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java",
    "status": "modified",
    "additions": 49,
    "deletions": 23,
    "changes": 72,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -13,6 +13,7 @@\n import org.broadinstitute.hellbender.engine.ReferenceContext;\n import org.broadinstitute.hellbender.engine.GATKPath;\n import org.broadinstitute.hellbender.engine.VariantWalker;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.tools.walkers.annotator.*;\n import org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific.AS_QualByDepth;\n@@ -29,7 +30,6 @@\n import org.broadinstitute.hellbender.utils.variant.GATKVCFConstants;\n import org.broadinstitute.hellbender.utils.variant.GATKVCFHeaderLines;\n import org.broadinstitute.hellbender.utils.variant.GATKVariantContextUtils;\n-import org.broadinstitute.hellbender.utils.variant.HomoSapiensConstants;\n import org.broadinstitute.hellbender.utils.variant.writers.GVCFWriter;\n import picard.cmdline.programgroups.OtherProgramGroup;\n \n@@ -76,8 +76,6 @@\n  *\n  * <h3>Caveats</h3>\n  * <p>Only single-sample GVCF files produced by HaplotypeCaller can be used as input for this tool.</p>\n- * <h3>Special note on ploidy</h3>\n- * <p>This tool assumes diploid genotypes.</p>\n  *\n  */\n @BetaFeature\n@@ -194,14 +192,14 @@ public void onTraversalStart() {\n         VariantContextWriter writer = createVCFWriter(outputFile);\n \n         try {\n-            vcfWriter = new GVCFWriter(writer, new ArrayList<Number>(GVCFGQBands), PLOIDY_TWO, floorBlocks);\n+            vcfWriter = new GVCFWriter(writer, new ArrayList<Number>(GVCFGQBands), floorBlocks);\n         } catch ( IllegalArgumentException e ) {\n             throw new IllegalArgumentException(\"GQBands are malformed: \" + e.getMessage(), e);\n         }\n         vcfWriter.writeHeader(new VCFHeader(headerLines, inputHeader.getGenotypeSamples()));\n \n         if (genotypeArgs.samplePloidy != PLOIDY_TWO) {\n-            throw new UserException.BadInput(\"The -ploidy parameter is ignored in \" + getClass().getSimpleName() + \" tool as this is tool assumes a diploid sample\");\n+            throw new UserException.BadInput(\"The -ploidy parameter is ignored in \" + getClass().getSimpleName() + \" tool as this tool maintains input ploidy for each genotype\");\n         }\n     }\n \n@@ -347,27 +345,37 @@ public VariantContext lowQualVariantToGQ0HomRef(final VariantContext result, fin\n \n         //there are some cases where there are low quality variants with homRef calls AND alt alleles!\n         //TODO: the best thing would be to take the most likely alt's likelihoods\n-        if (isHomRefCall(originalVC)) {\n+        /*if (isHomRefCall(originalVC)) {\n             final Genotype genotype = result.getGenotype(0);\n             final int[] idxVector = originalVC.getGLIndicesOfAlternateAllele(Allele.NON_REF_ALLELE);   //this is always length 3\n             if (genotype.hasPL()) {\n                 final int[] multiallelicPLs = genotype.getPL();\n-                final int[] newPLs = new int[3];\n-                newPLs[0] = multiallelicPLs[idxVector[0]];\n-                newPLs[1] = multiallelicPLs[idxVector[1]];\n-                newPLs[2] = multiallelicPLs[idxVector[2]];\n-                gb.PL(newPLs);\n+                try {\n+                    final int[] newPLs = new int[3];\n+                    newPLs[0] = multiallelicPLs[idxVector[0]];\n+                    newPLs[1] = multiallelicPLs[idxVector[1]];\n+                    newPLs[2] = multiallelicPLs[idxVector[2]];\n+                    gb.PL(newPLs);\n+                } catch (IndexOutOfBoundsException e) {\n+                    throw new GATKException.ShouldNeverReachHereException(\"Some kind of PL problem: \" + genotype + \" at \" + originalVC.getContig() + \":\" + originalVC.getStart(), e);\n+                }\n             }\n             if (genotype.hasAD()) {\n                 int depth = (int) MathUtils.sum(genotype.getAD());\n                 gb.DP(depth);\n                 gb.attribute(GATKVCFConstants.MIN_DP_FORMAT_KEY, depth);\n             }\n-        }\n+        }*/\n \n         VariantContextBuilder builder = new VariantContextBuilder(result);\n         final Genotype newG = gb.make();\n-        return builder.alleles(Arrays.asList(newG.getAlleles().get(0), Allele.NON_REF_ALLELE)).unfiltered().log10PError(VariantContext.NO_LOG10_PERROR).attributes(attrMap).genotypes(newG).make(); //genotyping engine will add lowQual filter, so strip it off\n+        try {\n+            //genotyping engine will add lowQual filter, so strip it off\n+            final VariantContext returnVC = builder.alleles(Arrays.asList(newG.getAlleles().get(0), Allele.NON_REF_ALLELE)).unfiltered().log10PError(VariantContext.NO_LOG10_PERROR).attributes(attrMap).genotypes(newG).make();\n+            return returnVC;\n+        } catch (IllegalArgumentException e) {\n+            throw new GATKException(\"Bad ref allele at \" + result.getContig() + \":\" + result.getStart() + \" for genotype \" + newG.toString());\n+        }\n     }\n \n     /**\n@@ -381,17 +389,35 @@ protected GenotypeBuilder changeCallToGQ0HomRef(final VariantContext result, fin\n         Genotype genotype = result.getGenotype(0);\n         Allele newRef = result.getReference();\n         GenotypeBuilder gb = new GenotypeBuilder(genotype);\n+        //if GT is not homRef, correct it\n+        if (!isHomRefCall(result)) {\n+            gb.PL(new int[GenotypeLikelihoods.numLikelihoods(2, genotype.getPloidy())]);  //2 alleles for ref and non-ref\n+            gb.GQ(0).noAD().alleles(Collections.nCopies(genotype.getPloidy(), newRef)).noAttributes();\n+        } else {\n+            final List<Allele> bestAlleles = AlleleSubsettingUtils.calculateMostLikelyAllelesForMonomorphicSite(result, PLOIDY_TWO, 1);\n+            final Optional<Allele> bestNonSymbolicAlt = bestAlleles.stream().filter(a -> !a.isReference() && !a.isNonRefAllele()).findFirst();  //allow span dels\n+            //here we're assuming that an alt that isn't <NON_REF> will have higher likelihood than non-ref, which should be true\n+            final Allele bestAlt = bestNonSymbolicAlt.isPresent() ? bestNonSymbolicAlt.get() : Allele.NON_REF_ALLELE;\n+            final GenotypesContext context = AlleleSubsettingUtils.subsetAlleles(result.getGenotypes(),\n+                    genotype.getPloidy(), result.getAlleles(), Arrays.asList(result.getReference(), bestAlt),\n+                    null, GenotypeAssignmentMethod.BEST_MATCH_TO_ORIGINAL, result.getAttributeAsInt(VCFConstants.DEPTH_KEY, 0));  //BEST_MATCH to avoid no-calling low qual genotypes\n+            gb = new GenotypeBuilder(context.get(0));\n+        }\n+        if (result.hasAttribute(VCFConstants.DEPTH_KEY)) {\n+            int depth = result.getAttributeAsInt(VCFConstants.DEPTH_KEY, 0);\n+            gb.DP(depth);\n+            gb.attribute(GATKVCFConstants.MIN_DP_FORMAT_KEY, depth);\n+        } else if (genotype.hasAD()) {\n+            int depth = (int) MathUtils.sum(genotype.getAD());\n+            gb.DP(depth);\n+            gb.attribute(GATKVCFConstants.MIN_DP_FORMAT_KEY, depth);\n+        }\n         //NB: If we're dropping a deletion allele, then we need to trim the reference and add an END tag with the vc stop position\n         if (result.getReference().length() > 1) {\n             attrMap.put(VCFConstants.END_KEY, result.getEnd());\n             newRef = Allele.create(newRef.getBases()[0], true);\n-            gb.alleles(Collections.nCopies(PLOIDY_TWO, newRef));\n-        }\n-        //if GT is not homRef, correct it\n-        if (!isHomRefCall(result)) {\n-            gb.PL(new int[3]);  //3 for diploid PLs, automatically initializes to zero\n-            gb.GQ(0).noAD().alleles(Collections.nCopies(PLOIDY_TWO, newRef)).noAttributes();\n         }\n+        gb.alleles(Collections.nCopies(genotype.getPloidy(), newRef));\n         return gb;\n     }\n \n@@ -499,11 +525,11 @@ protected VariantContext cleanUpHighQualityVariant(final VariantContext result,\n             builder.alleles(newAlleleSet);\n             final GenotypesContext gc;\n             if(!genotypesWereModified) {\n-                gc = AlleleSubsettingUtils.subsetAlleles(result.getGenotypes(), PLOIDY_TWO, result.getAlleles(), newAlleleSet, null, GenotypeAssignmentMethod.USE_PLS_TO_ASSIGN, result.getAttributeAsInt(VCFConstants.DEPTH_KEY, 0));\n+                gc = AlleleSubsettingUtils.subsetAlleles(result.getGenotypes(), g.getPloidy(), result.getAlleles(), newAlleleSet, null, GenotypeAssignmentMethod.USE_PLS_TO_ASSIGN, result.getAttributeAsInt(VCFConstants.DEPTH_KEY, 0));\n                 builder.genotypes(gc);\n             }\n             else {\n-                gc = AlleleSubsettingUtils.subsetAlleles(newGenotypes, PLOIDY_TWO, result.getAlleles(), newAlleleSet, null, GenotypeAssignmentMethod.USE_PLS_TO_ASSIGN, result.getAttributeAsInt(VCFConstants.DEPTH_KEY, 0));\n+                gc = AlleleSubsettingUtils.subsetAlleles(newGenotypes, g.getPloidy(), result.getAlleles(), newAlleleSet, null, GenotypeAssignmentMethod.USE_PLS_TO_ASSIGN, result.getAttributeAsInt(VCFConstants.DEPTH_KEY, 0));\n                 builder.genotypes(gc);\n             }\n             g = gc.get(0);\n@@ -559,7 +585,7 @@ protected VariantContext cleanUpHighQualityVariant(final VariantContext result,\n                         continue;\n                     }\n                     final GenotypesContext gc = AlleleSubsettingUtils.subsetAlleles(result.getGenotypes(),\n-                            HomoSapiensConstants.DEFAULT_PLOIDY, result.getAlleles(), Arrays.asList(result.getReference(), alt), null,\n+                            g.getPloidy(), result.getAlleles(), Arrays.asList(result.getReference(), alt), null,\n                             GenotypeAssignmentMethod.USE_PLS_TO_ASSIGN, result.getAttributeAsInt(VCFConstants.DEPTH_KEY,0));\n                     if (gc.get(0).hasPL()) {\n                         quals.add(Integer.toString(gc.get(0).getPL()[0]));\n@@ -569,7 +595,7 @@ protected VariantContext cleanUpHighQualityVariant(final VariantContext result,\n                 }\n                 attrMap.put(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, AnnotationUtils.ALLELE_SPECIFIC_RAW_DELIM +String.join(AnnotationUtils.ALLELE_SPECIFIC_RAW_DELIM, quals));\n                 List<Integer> as_varDP = AS_QualByDepth.getAlleleDepths(AlleleSubsettingUtils.subsetAlleles(result.getGenotypes(),\n-                        HomoSapiensConstants.DEFAULT_PLOIDY, result.getAlleles(), newAlleleSet, null,\n+                        g.getPloidy(), result.getAlleles(), newAlleleSet, null,\n                         GenotypeAssignmentMethod.USE_PLS_TO_ASSIGN, result.getAttributeAsInt(VCFConstants.DEPTH_KEY,0)));\n                 if (as_varDP != null) {\n                     attrMap.put(GATKVCFConstants.AS_VARIANT_DEPTH_KEY, as_varDP.stream().map( n -> Integer.toString(n)).collect(Collectors.joining(AnnotationUtils.ALLELE_SPECIFIC_RAW_DELIM)));"
  },
  {
    "sha": "0d76e4042b760591d6ee867681398216ab837d47",
    "filename": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiner.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiner.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiner.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiner.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -30,7 +30,6 @@\n  */\n public class GVCFBlockCombiner implements PushPullTransformer<VariantContext> {\n     final RangeMap<Integer, Range<Integer>> gqPartitions;\n-    final int defaultPloidy;\n     final boolean floorBlocks;\n     final Queue<VariantContext> toOutput = new ArrayDeque<>();\n \n@@ -43,9 +42,8 @@\n \n     GVCFBlock currentBlock = null;\n \n-    public GVCFBlockCombiner(List<Number> gqPartitions, int defaultPloidy, boolean floorBlocks) {\n+    public GVCFBlockCombiner(List<Number> gqPartitions, boolean floorBlocks) {\n         this.gqPartitions = parsePartitions(gqPartitions);\n-        this.defaultPloidy = defaultPloidy;\n         this.floorBlocks = floorBlocks;\n     }\n \n@@ -164,7 +162,7 @@ GVCFBlock createNewBlock(final VariantContext vc, final Genotype g) {\n         }\n \n         // create the block, add g to it, and return it for use\n-        final HomRefBlock block = new HomRefBlock(vc, partition.lowerEndpoint(), partition.upperEndpoint(), defaultPloidy);\n+        final HomRefBlock block = new HomRefBlock(vc, partition.lowerEndpoint(), partition.upperEndpoint(), g.getPloidy());\n         block.add(vc.getStart(), vc.getAttributeAsInt(VCFConstants.END_KEY, vc.getStart()), g);\n         return block;\n     }"
  },
  {
    "sha": "6bb754cf074859f5cdf7bb59b3377e73de3a9446",
    "filename": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiningIterator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiningIterator.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiningIterator.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFBlockCombiningIterator.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -11,7 +11,7 @@\n public class GVCFBlockCombiningIterator extends PushToPullIterator<VariantContext> {\n \n     public GVCFBlockCombiningIterator(Iterator<VariantContext> variants, final List<Number> gqPartitions, final int defaultPloidy){\n-       super(variants, new GVCFBlockCombiner(gqPartitions, defaultPloidy, false));\n+       super(variants, new GVCFBlockCombiner(gqPartitions, false));\n     }\n \n }"
  },
  {
    "sha": "97718a421af026d406b8774372d6a692b040c8f0",
    "filename": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriter.java",
    "status": "modified",
    "additions": 5,
    "deletions": 7,
    "changes": 12,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriter.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriter.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriter.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -32,18 +32,16 @@\n      * A <= X < B\n      * B <= X < C\n      * X >= C\n-     *\n-     * @param underlyingWriter the ultimate destination of the GVCF records\n+     *  @param underlyingWriter the ultimate destination of the GVCF records\n      * @param gqPartitions     a list of GQ partitions, this list must be non-empty and every element must be larger than previous element\n-     * @param defaultPloidy    the assumed ploidy for input variant context without one.\n      */\n-    public GVCFWriter(final VariantContextWriter underlyingWriter, final List<Number> gqPartitions, final int defaultPloidy, final boolean floorBlocks) {\n+    public GVCFWriter(final VariantContextWriter underlyingWriter, final List<Number> gqPartitions, final boolean floorBlocks) {\n         this.underlyingWriter = Utils.nonNull(underlyingWriter);\n-        this.gvcfBlockCombiner = new GVCFBlockCombiner(gqPartitions, defaultPloidy, floorBlocks);\n+        this.gvcfBlockCombiner = new GVCFBlockCombiner(gqPartitions, floorBlocks);\n     }\n \n-    public GVCFWriter(final VariantContextWriter underlyingWriter, final List<Number> gqPartitions, final int defaultPloidy) {\n-        this(underlyingWriter, gqPartitions, defaultPloidy, false);\n+    public GVCFWriter(final VariantContextWriter underlyingWriter, final List<Number> gqPartitions) {\n+        this(underlyingWriter, gqPartitions, false);\n     }\n \n "
  },
  {
    "sha": "e8b311f8b4f75a3b1e0b9fcdc5740d0bb01b8323",
    "filename": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFBlockCombiner.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFBlockCombiner.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFBlockCombiner.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFBlockCombiner.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -17,11 +17,11 @@\n     protected int partitionPrecision;  //number of decimal places to use for TLOD block ranges\n \n     public SomaticGVCFBlockCombiner(List<Number> gqPartitions, int defaultPloidy) {\n-        super(gqPartitions, defaultPloidy, false);\n+        super(gqPartitions, false);\n     }\n \n     public SomaticGVCFBlockCombiner(List<Number> gqPartitions, int defaultPloidy, final int partitionPrecision) {\n-        super(gqPartitions, defaultPloidy, false);\n+        super(gqPartitions, false);\n         this.partitionPrecision = partitionPrecision;\n     }\n "
  },
  {
    "sha": "8d6504249e595eb63c13027bfe0dede4c3bd01fd",
    "filename": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFWriter.java",
    "status": "modified",
    "additions": 2,
    "deletions": 10,
    "changes": 12,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFWriter.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFWriter.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/SomaticGVCFWriter.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -2,15 +2,7 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Range;\n-import com.google.common.collect.RangeMap;\n-import com.google.common.collect.TreeRangeMap;\n-import htsjdk.variant.variantcontext.Genotype;\n-import htsjdk.variant.variantcontext.VariantContext;\n import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n-import org.broadinstitute.hellbender.exceptions.GATKException;\n-import org.broadinstitute.hellbender.utils.Utils;\n-import org.broadinstitute.hellbender.utils.variant.GATKVCFConstants;\n import org.broadinstitute.hellbender.utils.variant.HomoSapiensConstants;\n \n import java.util.List;\n@@ -39,12 +31,12 @@\n      * @param lodPartitions     a list of TLOD partitions, this list must be non-empty and every element must be larger than previous element\n      */\n     public SomaticGVCFWriter(final VariantContextWriter underlyingWriter, final List<Number> lodPartitions) {\n-        super(underlyingWriter, ImmutableList.of(1, 10, 20), HomoSapiensConstants.DEFAULT_PLOIDY, false);\n+        super(underlyingWriter, ImmutableList.of(1, 10, 20), false);\n         gvcfBlockCombiner = new SomaticGVCFBlockCombiner(lodPartitions, HomoSapiensConstants.DEFAULT_PLOIDY);\n     }\n \n     public SomaticGVCFWriter(final VariantContextWriter underlyingWriter, final List<Number> lodPartitions, final int partitionPrecision) {\n-        super(underlyingWriter, ImmutableList.of(1, 10, 20), HomoSapiensConstants.DEFAULT_PLOIDY, false);\n+        super(underlyingWriter, ImmutableList.of(1, 10, 20), false);\n         gvcfBlockCombiner = new SomaticGVCFBlockCombiner(lodPartitions, HomoSapiensConstants.DEFAULT_PLOIDY, partitionPrecision);\n     }\n "
  },
  {
    "sha": "91a908cba8b947a4a808f9fe0d618c752adb9cbc",
    "filename": "src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -2,7 +2,6 @@\n \n import htsjdk.variant.variantcontext.*;\n import htsjdk.variant.vcf.VCFConstants;\n-import htsjdk.variant.vcf.VCFHeader;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.utils.MathUtils;\n import org.broadinstitute.hellbender.GATKBaseTest;\n@@ -366,7 +365,7 @@ public void testCalculateLikelihoodSums() {\n         final VariantContext vc1 = new VariantContextBuilder(\"source\", \"contig\", 1, 1, twoAlleles)\n                 .genotypes(Arrays.asList(g1, g2, g3, gNull)).make();\n \n-        Assert.assertEquals(AlleleSubsettingUtils.calculateLikelihoodSums(vc1, 2)[1], 4.2, 1.0e-8);\n+        Assert.assertEquals(AlleleSubsettingUtils.calculateLikelihoodSums(vc1, 2, false)[1], 4.2, 1.0e-8);\n \n         // diploid, triallelic, two samples\n         final List<Allele> threeAlleles = Arrays.asList(Aref, C, G);\n@@ -390,7 +389,7 @@ public void testCalculateLikelihoodSums() {\n         final VariantContext vc2 = new VariantContextBuilder(\"source\", \"contig\", 1, 1, threeAlleles)\n                 .genotypes(Arrays.asList(g4, g5)).make();\n \n-        final double[] likelihoodSums2 = AlleleSubsettingUtils.calculateLikelihoodSums(vc2, 2);\n+        final double[] likelihoodSums2 = AlleleSubsettingUtils.calculateLikelihoodSums(vc2, 2, false);\n         Assert.assertEquals(likelihoodSums2[1], 4.1, 1.0e-8);\n         Assert.assertEquals(likelihoodSums2[2], 3.1, 1.0e-8);\n \n@@ -405,7 +404,7 @@ public void testCalculateLikelihoodSums() {\n         final VariantContext vc3 = new VariantContextBuilder(\"source\", \"contig\", 1, 1, twoAlleles)\n                 .genotypes(Arrays.asList(g6)).make();\n \n-        Assert.assertEquals(AlleleSubsettingUtils.calculateLikelihoodSums(vc3, 3)[1], 3.5, 1.0e-8);\n+        Assert.assertEquals(AlleleSubsettingUtils.calculateLikelihoodSums(vc3, 3, false)[1], 3.5, 1.0e-8);\n     }\n \n     // This test exists to enforce the behavior that AlleleSubsetting utils can be used to reorder alleles, if a developer"
  },
  {
    "sha": "bb7255101f83c91024346a801d25e990b6c3a0bd",
    "filename": "src/test/java/org/broadinstitute/hellbender/tools/walkers/validation/ReferenceBlockConcordanceIntegrationTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/tools/walkers/validation/ReferenceBlockConcordanceIntegrationTest.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/tools/walkers/validation/ReferenceBlockConcordanceIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/java/org/broadinstitute/hellbender/tools/walkers/validation/ReferenceBlockConcordanceIntegrationTest.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -146,7 +146,6 @@ public void testMultipleContigs() throws Exception {\n         final GVCFWriter truthWriter = new GVCFWriter(\n                 GATKVariantContextUtils.createVCFWriter(truthFile.toPath(), null, false, Options.ALLOW_MISSING_FIELDS_IN_HEADER),\n                 IntStream.range(1, 100).boxed().collect(Collectors.toList()),\n-                2,\n                 true\n                 );\n         final VCFHeader header = new VCFHeader(new HashSet<>(), Collections.singletonList(\"TESTSAMPLE\"));\n@@ -160,7 +159,6 @@ public void testMultipleContigs() throws Exception {\n         final GVCFWriter evalWriter = new GVCFWriter(\n                 GATKVariantContextUtils.createVCFWriter(evalFile.toPath(), null, false, Options.ALLOW_MISSING_FIELDS_IN_HEADER),\n                 IntStream.range(1, 100).boxed().collect(Collectors.toList()),\n-                2,\n                 true\n         );\n         evalWriter.writeHeader(header);"
  },
  {
    "sha": "25e8888270b43eae55928da4325d5f9d0048ca89",
    "filename": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFUnitTest.java",
    "status": "modified",
    "additions": 28,
    "deletions": 1,
    "changes": 29,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFUnitTest.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFUnitTest.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFUnitTest.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -77,6 +77,32 @@ public void testLowQualVariantToGQ0HomRef() {\n         final VariantContext noData = makeDeletionVC(\"noData\", Arrays.asList(LONG_REF, DELETION, Allele.NON_REF_ALLELE), LONG_REF.length(), g2);\n         final VariantContext notCrashing = reblocker.lowQualVariantToGQ0HomRef(noData, noData);\n         Assert.assertTrue(notCrashing.getGenotype(0).isNoCall());\n+\n+        //haploid hom ref call\n+        final int[] pls = {0, 35, 72};\n+        final GenotypeBuilder gb = new GenotypeBuilder(\"male_sample\", Arrays.asList(LONG_REF)).PL(pls);\n+        final VariantContextBuilder vb = new VariantContextBuilder();\n+        vb.chr(\"20\").start(10001).stop(10004).alleles(Arrays.asList(LONG_REF, DELETION, Allele.NON_REF_ALLELE)).log10PError(-3.0).genotypes(gb.make());\n+        final VariantContext vc = vb.make();\n+\n+        final VariantContext haploidRefBlock = reblocker.lowQualVariantToGQ0HomRef(vc, vc);\n+        final Genotype newG = haploidRefBlock.getGenotype(\"male_sample\");\n+\n+        Assert.assertEquals(newG.getPloidy(), 1);\n+        Assert.assertEquals(newG.getGQ(), 35);\n+    }\n+\n+    @Test\n+    public void testCalledHomRefGetsAltGQ() {\n+        final ReblockGVCF reblocker = new ReblockGVCF();\n+\n+        final Genotype g3 = makeG(\"sample1\", LONG_REF, LONG_REF, 0, 11, 37, 100, 200, 400);\n+        final VariantContext twoAltsHomRef = makeDeletionVC(\"lowQualVar\", Arrays.asList(LONG_REF, DELETION, Allele.NON_REF_ALLELE), LONG_REF.length(), g3);\n+        final GenotypeBuilder takeGoodAltGQ = reblocker.changeCallToGQ0HomRef(twoAltsHomRef, new HashMap<>());\n+        final Genotype nowRefBlock = takeGoodAltGQ.make();\n+        Assert.assertEquals(nowRefBlock.getGQ(), 11);\n+        Assert.assertEquals(nowRefBlock.getDP(), 18);\n+        Assert.assertEquals((int)nowRefBlock.getExtendedAttribute(GATKVCFConstants.MIN_DP_FORMAT_KEY), 18);\n     }\n \n     @Test\n@@ -112,7 +138,8 @@ private Genotype makeG(final String sample, final Allele a1, final Allele a2, fi\n     private VariantContext makeDeletionVC(final String source, final List<Allele> alleles, final int refLength, final Genotype... genotypes) {\n         final int start = 10;\n         final int stop = start+refLength-1;\n-        return new VariantContextBuilder(source, \"1\", start, stop, alleles).genotypes(Arrays.asList(genotypes)).unfiltered().make();\n+        return new VariantContextBuilder(source, \"1\", start, stop, alleles)\n+                .genotypes(Arrays.asList(genotypes)).unfiltered().log10PError(-3.0).attribute(VCFConstants.DEPTH_KEY, 18).make();\n     }\n \n     private Genotype addAD(final Genotype g, final int... ads) {"
  },
  {
    "sha": "91868ffbb8df2c9eed11dec0bb05499e49159880",
    "filename": "src/test/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriterUnitTest.java",
    "status": "modified",
    "additions": 23,
    "deletions": 24,
    "changes": 47,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriterUnitTest.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriterUnitTest.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/java/org/broadinstitute/hellbender/utils/variant/writers/GVCFWriterUnitTest.java?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -17,7 +17,6 @@\n import org.broadinstitute.hellbender.utils.variant.GATKVCFConstants;\n import org.broadinstitute.hellbender.utils.variant.GATKVCFHeaderLines;\n import org.broadinstitute.hellbender.utils.variant.GATKVariantContextUtils;\n-import org.broadinstitute.hellbender.utils.variant.HomoSapiensConstants;\n import org.testng.Assert;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n@@ -85,7 +84,7 @@ public void setHeader(VCFHeader header) {\n     @Test\n     public void testHeaderWriting() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n         writer.writeHeader(new VCFHeader());\n         Assert.assertTrue(mockWriter.headerSet);\n         Assert.assertTrue(mockWriter.headerWritten);\n@@ -94,7 +93,7 @@ public void testHeaderWriting() {\n     @Test\n     public void testHeaderSetting(){\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n         writer.setHeader(new VCFHeader());\n         Assert.assertTrue(mockWriter.headerSet);\n         Assert.assertFalse(mockWriter.headerWritten);\n@@ -103,7 +102,7 @@ public void testHeaderSetting(){\n     @Test\n     public void testClose() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n         writer.close();\n         Assert.assertTrue(mockWriter.closed);\n     }\n@@ -113,7 +112,7 @@ public void testClose() {\n     @Test\n     public void testCloseEmitsLastVariant() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         Assert.assertEquals(mockWriter.emitted.size(), 0);\n@@ -126,7 +125,7 @@ public void testCloseEmitsLastVariant() {\n     @Test\n     public void testCloseDoesntEmitsLastVariantWhenNonRef() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeNonRef(CHR1, 1));\n         Assert.assertEquals(mockWriter.emitted.size(), 1);\n@@ -139,7 +138,7 @@ public void testCloseDoesntEmitsLastVariantWhenNonRef() {\n     @Test\n     public void testCrossingContigBoundaryRef() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         writer.add(makeHomRef(2));\n@@ -156,7 +155,7 @@ public void testCrossingContigBoundaryRef() {\n     @Test\n     public void testCrossingContigBoundaryToLowerPositionsRef() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(30));\n         writer.add(makeHomRef(31));\n@@ -173,7 +172,7 @@ public void testCrossingContigBoundaryToLowerPositionsRef() {\n     @Test\n     public void testCrossingContigBoundaryFromNonRefToLowerPositionsRef() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeNonRef(CHR1, 20));\n         Assert.assertEquals(mockWriter.emitted.size(), 1);\n@@ -189,7 +188,7 @@ public void testCrossingContigBoundaryFromNonRefToLowerPositionsRef() {\n     @Test\n     public void testCrossingContigBoundaryNonRef() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         writer.add(makeHomRef(2));\n@@ -203,7 +202,7 @@ public void testCrossingContigBoundaryNonRef() {\n     @Test\n     public void testCrossingContigBoundaryNonRefThenNonRef() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeNonRef(CHR1, 1));\n         Assert.assertEquals(mockWriter.emitted.size(), 1);\n@@ -252,7 +251,7 @@ private static void assertGoodVC(final VariantContext vc, final String contig, f\n     @Test\n     public void testVariantForcesNonRef() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         writer.add(makeHomRef(2));\n@@ -270,7 +269,7 @@ public void testVariantForcesNonRef() {\n     @Test\n     public void testEmittingTwoBands() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         writer.add(makeHomRef(2));\n@@ -287,7 +286,7 @@ public void testEmittingTwoBands() {\n     @Test\n     public void testBandingUsingPP() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         int[] PPs1 = {0,63,128};\n         int[] PPs2 = {0,67,145};\n@@ -303,7 +302,7 @@ public void testBandingUsingPP() {\n     @Test\n     public void testNonContiguousBlocks() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         writer.add(makeHomRef(2));\n@@ -318,7 +317,7 @@ public void testNonContiguousBlocks() {\n     @Test\n     public void testInputBlocks() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, highConfLowConf, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, highConfLowConf);\n \n         writer.add(makeHomRef(\"20\", 1, 16, 600));\n         writer.add(makeHomRef(\"20\", 601, 0, 620));\n@@ -330,7 +329,7 @@ public void testInputBlocks() {\n     @Test\n     public void testDeletion() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         writer.add(makeHomRef(2));\n@@ -349,7 +348,7 @@ public void testDeletion() {\n     @Test\n     public void testHomRefAlt() {\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, standardPartition);\n \n         writer.add(makeHomRef(1));\n         writer.add(makeHomRef(2));\n@@ -382,7 +381,7 @@ public void testHomRefAlt() {\n \n     @Test(dataProvider = \"GoodBandPartitionData\")\n     public void testGoodPartitions(final List<Number> partitions, List<Range<Integer>> expected) {\n-        final GVCFBlockCombiner combiner = new GVCFBlockCombiner(partitions, HomoSapiensConstants.DEFAULT_PLOIDY, false);\n+        final GVCFBlockCombiner combiner = new GVCFBlockCombiner(partitions, false);\n         Assert.assertEquals(new ArrayList<>(combiner.gqPartitions.asMapOfRanges().values()), expected);\n         Assert.assertEquals(new ArrayList<>(combiner.gqPartitions.asMapOfRanges().keySet()), expected);\n     }\n@@ -402,13 +401,13 @@ public void testGoodPartitions(final List<Number> partitions, List<Range<Integer\n \n     @Test(dataProvider = \"BadBandPartitionData\", expectedExceptions = IllegalArgumentException.class)\n     public void testBadPartitionsThrowException(final List<Number> partitions){\n-        GVCFBlockCombiner combiner = new GVCFBlockCombiner(partitions, HomoSapiensConstants.DEFAULT_PLOIDY, false); // we should explode here\n+        GVCFBlockCombiner combiner = new GVCFBlockCombiner(partitions, false); // we should explode here\n     }\n \n     @Test\n     public void testCheckError(){\n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter gvcfWriter = new GVCFWriter(mockWriter, standardPartition, HomoSapiensConstants.DEFAULT_PLOIDY);\n+        final GVCFWriter gvcfWriter = new GVCFWriter(mockWriter, standardPartition);\n         mockWriter.error = false;\n         Assert.assertEquals(gvcfWriter.checkError(), mockWriter.checkError());\n         mockWriter.error = true;\n@@ -458,7 +457,7 @@ public void writeGVCFToDisk(List<VariantContext> variants, List<MinimalData> exp\n         final File outputFile =  createTempFile(\"generated\", \".g.vcf\");\n \n         try (VariantContextWriter writer = GATKVariantContextUtils.createVCFWriter(outputFile.toPath(), null, false);\n-             GVCFWriter gvcfWriter = new GVCFWriter(writer, gqPartitions, HomoSapiensConstants.DEFAULT_PLOIDY))\n+             GVCFWriter gvcfWriter = new GVCFWriter(writer, gqPartitions))\n         {\n             gvcfWriter.writeHeader(getMinimalVCFHeader());\n             variants.forEach(gvcfWriter::add);\n@@ -576,7 +575,7 @@ public void testAgainstExampleGVCF() throws IOException {\n                 .genotypes(block3genotypeBuilder.make());\n \n         try (VariantContextWriter writer = GATKVariantContextUtils.createVCFWriter(outputFile.toPath(), null, false);\n-             GVCFWriter gvcfWriter = new GVCFWriter(writer, gqPartitions, HomoSapiensConstants.DEFAULT_PLOIDY))\n+             GVCFWriter gvcfWriter = new GVCFWriter(writer, gqPartitions))\n         {\n             gvcfWriter.writeHeader(getMinimalVCFHeader());\n \n@@ -638,7 +637,7 @@ public void testOverlappingDeletions() {\n         final VariantContext block2 = reblocker.lowQualVariantToGQ0HomRef(deletion2, deletion2);\n \n         final MockWriter mockWriter = new MockWriter();\n-        final GVCFWriter writer = new GVCFWriter(mockWriter, Arrays.asList(20,100), 2);\n+        final GVCFWriter writer = new GVCFWriter(mockWriter, Arrays.asList(20,100));\n         writer.add(deletion1);\n         writer.add(block2);\n         writer.add(origRefBlock);"
  },
  {
    "sha": "aecb8f105aaf3d765e8f4ef4d41ee73a12b86e4a",
    "filename": "src/test/resources/large/testProductionGVCF.expected.g.vcf",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/large/testProductionGVCF.expected.g.vcf",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/large/testProductionGVCF.expected.g.vcf",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/resources/large/testProductionGVCF.expected.g.vcf?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -1,3 +1,3 @@\n version https://git-lfs.github.com/spec/v1\n-oid sha256:1b53e5f87904c3b9cbb24062c139b2cffbef300efba039bbd379e8d93f448db7\n-size 1399442\n+oid sha256:d6e71eb378016234292e6eb00547173478481bbf87c9e4b5c837d9e43e425366\n+size 1399676"
  },
  {
    "sha": "570c4b7f6295328cb9d80b7d56075acb8a0090bb",
    "filename": "src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.g.vcf",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.g.vcf",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.g.vcf",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.g.vcf?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -140,7 +140,7 @@\n 20\t10087820\t.\tC\tCAG,<NON_REF>\t294.60\t.\tAS_QUALapprox=|302|0;AS_RAW_BaseQRankSum=|-2.1,1|NaN;AS_RAW_MQ=123769.00|46800.00|0.00;AS_RAW_MQRankSum=|0.6,1|NaN;AS_RAW_ReadPosRankSum=|-0.4,1|NaN;AS_SB_TABLE=17,18|8,5|0,0;AS_VarDP=35|13|0;BaseQRankSum=-2.273;DP=93;MQRankSum=0.678;MQ_DP=93;QUALapprox=302;RAW_GT_COUNT=0,1,0;RAW_MQ=329810.00;RAW_MQandDP=329810,93;ReadPosRankSum=-0.492;VarDP=49\tGT:AD:GQ:PL:SB\t0/1:35,13,0:99:302,0,1079,483,1169,1922:17,18,9,5\n 20\t10433000\t.\tG\t<NON_REF>\t.\t.\tEND=10433307\tGT:DP:GQ:MIN_DP:PL\t0/0:36:21:29:0,21,315\n 20\t10433308\t.\tG\t<NON_REF>\t.\t.\tEND=10433311\tGT:DP:GQ:MIN_DP:PL\t0/0:27:6:27:0,6,90\n-20\t10433312\t.\tC\t<NON_REF>\t.\t.\tEND=10433319\tGT:DP:GQ:MIN_DP:PL\t0/0:16:75:16:0,75,839\n+20\t10433312\t.\tC\t<NON_REF>\t.\t.\tEND=10433319\tGT:DP:GQ:MIN_DP:PL\t0/0:37:48:37:0,48,553\n 20\t10433321\t.\tA\t<NON_REF>\t.\t.\tEND=10433321\tGT:DP:GQ:MIN_DP:PL\t0/0:29:33:29:0,33,495\n 20\t10433322\t.\tA\tAT,<NON_REF>\t116.60\t.\tAS_QUALapprox=|124|0;AS_RAW_BaseQRankSum=|2.5,1|NaN;AS_RAW_MQ=14418.00|9723.00|0.00;AS_RAW_MQRankSum=|1.1,1|NaN;AS_RAW_ReadPosRankSum=|2.0,1|NaN;AS_SB_TABLE=5,6|2,3|0,0;AS_VarDP=11|5|0;BaseQRankSum=2.564;DP=35;MQRankSum=1.122;MQ_DP=35;QUALapprox=124;RAW_GT_COUNT=0,1,0;RAW_MQ=67710.00;RAW_MQandDP=67710,35;ReadPosRankSum=2.044;VarDP=16\tGT:AD:GQ:PL:SB\t0/1:11,5,0:99:124,0,369,158,384,542:5,6,2,3\n 20\t10433324\t.\tA\tT,<NON_REF>\t220.64\t.\tAS_QUALapprox=|228|0;AS_RAW_BaseQRankSum=|2.2,1|NaN;AS_RAW_MQ=11895.00|10564.00|0.00;AS_RAW_MQRankSum=|0.5,1|NaN;AS_RAW_ReadPosRankSum=|1.5,1|NaN;AS_SB_TABLE=2,6|2,4|0,0;AS_VarDP=8|6|0;BaseQRankSum=2.279;DP=33;MQRankSum=0.584;MQ_DP=33;QUALapprox=228;RAW_GT_COUNT=0,1,0;RAW_MQ=60510.00;RAW_MQandDP=60510,33;ReadPosRankSum=1.543;VarDP=14\tGT:AD:GQ:PGT:PID:PL:SB\t0/1:8,6,0:99:0|1:10433324_A_T:228,0,275,252,294,546:2,6,2,4\n@@ -198,4 +198,4 @@\n 20\t10436701\t.\tT\t<NON_REF>\t.\t.\tEND=10436907\tGT:DP:GQ:MIN_DP:PL\t0/0:74:99:74:0,120,1800\n 20\t10436908\t.\tC\tG,<NON_REF>\t1361.64\t.\tAS_QUALapprox=|1369|0;AS_RAW_BaseQRankSum=|-0.9,1|NaN;AS_RAW_MQ=145849.00|145638.00|0.00;AS_RAW_MQRankSum=|-1.0,1|NaN;AS_RAW_ReadPosRankSum=|-0.2,1|NaN;AS_SB_TABLE=15,26|11,31|0,0;AS_VarDP=41|42|0;BaseQRankSum=-0.844;DP=83;MQRankSum=-0.994;MQ_DP=83;QUALapprox=1369;RAW_GT_COUNT=0,1,0;RAW_MQ=291487.00;RAW_MQandDP=291487,83;ReadPosRankSum=-0.148;VarDP=83\tGT:AD:GQ:PL:SB\t0/1:41,42,0:99:1369,0,1378,1492,1504,2996:15,26,11,31\n 20\t10436909\t.\tA\t<NON_REF>\t.\t.\tEND=10437000\tGT:DP:GQ:MIN_DP:PL\t0/0:79:99:79:0,120,1800\n-20\t10684106\t.\tC\t<NON_REF>\t.\t.\tEND=10684118\tGT:DP:GQ:MIN_DP:PL\t0/0:29:99:29:0,112,2450\n+20\t10684106\t.\tC\t<NON_REF>\t.\t.\tEND=10684118\tGT:DP:GQ:MIN_DP:PL\t0/0:60:84:60:0,84,1592"
  },
  {
    "sha": "ed2d2f011485d0b891ea7f078c54d23e87e1a905",
    "filename": "src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.hiRes.g.vcf",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.hiRes.g.vcf",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.hiRes.g.vcf",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12878.AS.chr20snippet.reblocked.hiRes.g.vcf?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -149,7 +149,7 @@\n 20\t10433303\t.\tA\t<NON_REF>\t.\t.\tEND=10433307\tGT:DP:GQ\t0/0:30:20\n 20\t10433308\t.\tG\t<NON_REF>\t.\t.\tEND=10433309\tGT:DP:GQ\t0/0:27:10\n 20\t10433310\t.\tC\t<NON_REF>\t.\t.\tEND=10433311\tGT:DP:GQ\t0/0:27:0\n-20\t10433312\t.\tC\t<NON_REF>\t.\t.\tEND=10433319\tGT:DP:GQ\t0/0:16:40\n+20\t10433312\t.\tC\t<NON_REF>\t.\t.\tEND=10433319\tGT:DP:GQ\t0/0:37:40\n 20\t10433321\t.\tA\t<NON_REF>\t.\t.\tEND=10433321\tGT:DP:GQ\t0/0:29:30\n 20\t10433322\t.\tA\tAT,<NON_REF>\t116.60\t.\tAS_QUALapprox=|124|0;AS_RAW_BaseQRankSum=|2.5,1|NaN;AS_RAW_MQ=14418.00|9723.00|0.00;AS_RAW_MQRankSum=|1.1,1|NaN;AS_RAW_ReadPosRankSum=|2.0,1|NaN;AS_SB_TABLE=5,6|2,3|0,0;AS_VarDP=11|5|0;BaseQRankSum=2.564;DP=35;MQRankSum=1.122;MQ_DP=35;QUALapprox=124;RAW_GT_COUNT=0,1,0;RAW_MQ=67710.00;RAW_MQandDP=67710,35;ReadPosRankSum=2.044;VarDP=16\tGT:AD:GQ:PL:SB\t0/1:11,5,0:99:124,0,369,158,384,542:5,6,2,3\n 20\t10433324\t.\tA\tT,<NON_REF>\t220.64\t.\tAS_QUALapprox=|228|0;AS_RAW_BaseQRankSum=|2.2,1|NaN;AS_RAW_MQ=11895.00|10564.00|0.00;AS_RAW_MQRankSum=|0.5,1|NaN;AS_RAW_ReadPosRankSum=|1.5,1|NaN;AS_SB_TABLE=2,6|2,4|0,0;AS_VarDP=8|6|0;BaseQRankSum=2.279;DP=33;MQRankSum=0.584;MQ_DP=33;QUALapprox=228;RAW_GT_COUNT=0,1,0;RAW_MQ=60510.00;RAW_MQandDP=60510,33;ReadPosRankSum=1.543;VarDP=14\tGT:AD:GQ:PGT:PID:PL:SB\t0/1:8,6,0:99:0|1:10433324_A_T:228,0,275,252,294,546:2,6,2,4\n@@ -217,4 +217,4 @@\n 20\t10436701\t.\tT\t<NON_REF>\t.\t.\tEND=10436907\tGT:DP:GQ\t0/0:74:60\n 20\t10436908\t.\tC\tG,<NON_REF>\t1361.64\t.\tAS_QUALapprox=|1369|0;AS_RAW_BaseQRankSum=|-0.9,1|NaN;AS_RAW_MQ=145849.00|145638.00|0.00;AS_RAW_MQRankSum=|-1.0,1|NaN;AS_RAW_ReadPosRankSum=|-0.2,1|NaN;AS_SB_TABLE=15,26|11,31|0,0;AS_VarDP=41|42|0;BaseQRankSum=-0.844;DP=83;MQRankSum=-0.994;MQ_DP=83;QUALapprox=1369;RAW_GT_COUNT=0,1,0;RAW_MQ=291487.00;RAW_MQandDP=291487,83;ReadPosRankSum=-0.148;VarDP=83\tGT:AD:GQ:PL:SB\t0/1:41,42,0:99:1369,0,1378,1492,1504,2996:15,26,11,31\n 20\t10436909\t.\tA\t<NON_REF>\t.\t.\tEND=10437000\tGT:DP:GQ\t0/0:79:60\n-20\t10684106\t.\tC\t<NON_REF>\t.\t.\tEND=10684118\tGT:DP:GQ\t0/0:29:60\n+20\t10684106\t.\tC\t<NON_REF>\t.\t.\tEND=10684118\tGT:DP:GQ\t0/0:60:60"
  },
  {
    "sha": "0bce1cefa1f0e362cc55db70352dadf559950059",
    "filename": "src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12892.AS.chr20snippet.reblocked.g.vcf",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12892.AS.chr20snippet.reblocked.g.vcf",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/7d22c59e4c99d1523e30bf48168cbfab51459249/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12892.AS.chr20snippet.reblocked.g.vcf",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF/expected.NA12892.AS.chr20snippet.reblocked.g.vcf?ref=7d22c59e4c99d1523e30bf48168cbfab51459249",
    "patch": "@@ -139,7 +139,7 @@\n #CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tNA12892\n 20\t10087820\t.\tC\tCAGAGAG,<NON_REF>\t598.60\t.\tAS_QUALapprox=|606|0;AS_RAW_BaseQRankSum=|1.0,1|NaN;AS_RAW_MQ=97208.00|47258.00|0.00;AS_RAW_MQRankSum=|-3.1,1|NaN;AS_RAW_ReadPosRankSum=|-0.3,1|NaN;AS_SB_TABLE=16,13|12,12|0,0;AS_VarDP=29|24|0;BaseQRankSum=0.955;DP=74;MQRankSum=-3.130;MQ_DP=74;QUALapprox=606;RAW_GT_COUNT=0,1,0;RAW_MQ=211789.00;RAW_MQandDP=211789,74;ReadPosRankSum=-0.254;VarDP=55\tGT:AD:GQ:PL:SB\t0/1:29,24,0:99:606,0,849,697,927,1653:16,13,12,14\n 20\t10433000\t.\tG\t<NON_REF>\t.\t.\tEND=10433308\tGT:DP:GQ:MIN_DP:PL\t0/0:37:21:29:0,21,315\n-20\t10433309\t.\tT\t<NON_REF>\t.\t.\tEND=10433319\tGT:DP:GQ:MIN_DP:PL\t0/0:30:6:25:0,6,90\n+20\t10433309\t.\tT\t<NON_REF>\t.\t.\tEND=10433319\tGT:DP:GQ:MIN_DP:PL\t0/0:39:6:35:0,6,90\n 20\t10433321\t.\tA\t<NON_REF>\t.\t.\tEND=10433321\tGT:DP:GQ:MIN_DP:PL\t0/0:35:21:35:0,21,315\n 20\t10433322\t.\tA\tAT,<NON_REF>\t442.60\t.\tAS_QUALapprox=|450|0;AS_RAW_BaseQRankSum=|0.8,1|NaN;AS_RAW_MQ=3364.00|31589.00|0.00;AS_RAW_MQRankSum=|2.2,1|NaN;AS_RAW_ReadPosRankSum=|1.9,1|NaN;AS_SB_TABLE=2,2|6,6|0,0;AS_VarDP=4|12|0;BaseQRankSum=0.877;DP=42;MQRankSum=1.895;MQ_DP=42;QUALapprox=450;RAW_GT_COUNT=0,1,0;RAW_MQ=86818.00;RAW_MQandDP=86818,42;ReadPosRankSum=1.704;VarDP=19\tGT:AD:GQ:PL:SB\t0/1:4,12,0:46:450,0,46,442,117,617:2,2,8,7\n 20\t10433324\t.\tA\tT,<NON_REF>\t863.06\t.\tAS_QUALapprox=|877|0;AS_RAW_BaseQRankSum=||;AS_RAW_MQ=841.00|38317.00|0.00;AS_RAW_MQRankSum=||;AS_RAW_ReadPosRankSum=||;AS_SB_TABLE=0,1|11,9|0,0;AS_VarDP=1|20|0;BaseQRankSum=1.458;DP=40;MQRankSum=0.871;MQ_DP=40;QUALapprox=877;RAW_GT_COUNT=0,0,1;RAW_MQ=79618.00;RAW_MQandDP=79618,40;ReadPosRankSum=1.736;VarDP=21\tGT:AD:GQ:PGT:PID:PL:SB\t1/1:1,20,0:53:0|1:10433324_A_T:877,53,0,880,61,888:0,1,11,9"
  }
]
