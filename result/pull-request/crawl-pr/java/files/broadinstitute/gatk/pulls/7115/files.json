[
  {
    "sha": "2f0163633e259816d2f693374a4c0a0ae2284d55",
    "filename": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/SampleList.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/tools/variantdb/SampleList.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/tools/variantdb/SampleList.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/tools/variantdb/SampleList.java?ref=e1cc30c8d003f324b7feea602b90feac016d7b36",
    "patch": "@@ -81,8 +81,8 @@ private TableResult querySampleTable(String fqSampleTableName, String whereClaus\n                 \"SELECT \" + SchemaUtils.SAMPLE_ID_FIELD_NAME + \", \" + SchemaUtils.SAMPLE_NAME_FIELD_NAME +\n                 \" FROM `\" + fqSampleTableName + \"`\" + whereClause;\n \n-        // Execute the query:        \n-        final TableResult result = BigQueryUtils.executeQuery(BigQueryUtils.getBigQueryEndPoint(executionProjectId) , sampleListQueryString, false);\n+        // Execute the query:\n+        final TableResult result = BigQueryUtils.executeQuery(BigQueryUtils.getBigQueryEndPoint(executionProjectId) , sampleListQueryString, false, null);\n \n         // Show our pretty results:\n         if (printDebugInformation) {"
  },
  {
    "sha": "19ee725f9ab2f1ec6eabaf75c6b688536f3c856e",
    "filename": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractCohortEngine.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractCohortEngine.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractCohortEngine.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractCohortEngine.java?ref=e1cc30c8d003f324b7feea602b90feac016d7b36",
    "patch": "@@ -174,7 +174,7 @@ public void traverse() {\n                 }\n                 // create the query string\n                 String q = \"SELECT \" + StringUtils.join(SchemaUtils.COHORT_FIELDS,\",\") + \" FROM \" + cohortTableRef.getFQTableName() + \" ORDER BY \" + SchemaUtils.LOCATION_FIELD_NAME;\n-                TableResult tr = BigQueryUtils.executeQuery(BigQueryUtils.getBigQueryEndPoint(), cohortTableRef.tableProject, cohortTableRef.tableDataset, q);\n+                TableResult tr = BigQueryUtils.executeQuery(BigQueryUtils.getBigQueryEndPoint(), cohortTableRef.tableProject, cohortTableRef.tableDataset, q,  null);\n                 createVariantsFromSortedTableResults(tr, fullVqsLodMap, fullYngMap, noFilteringRequested);\n                 break;\n         }\n@@ -329,7 +329,7 @@ private double getQUALapproxFromSampleRecord(GenericRecord sampleRecord) {\n         if (s.contains(\"|\")) {\n \n             // take the sum of all non-* alleles\n-            // basically if our alleles are '*,T' or 'G,*' we want to ignore the * part            \n+            // basically if our alleles are '*,T' or 'G,*' we want to ignore the * part\n             String[] alleles = sampleRecord.get(SchemaUtils.ALT_ALLELE_FIELD_NAME).toString().split(\",\");\n             String[] parts = s.split(\"\\\\|\");\n \n@@ -389,7 +389,7 @@ private void processSampleRecordsForLocation(final long location, final Iterable\n \n                     totalAsQualApprox += getQUALapproxFromSampleRecord(sampleRecord);\n \n-                    // hasSnpAllele should be set to true if any sample has at least one snp (gnarly definition here)                    \n+                    // hasSnpAllele should be set to true if any sample has at least one snp (gnarly definition here)\n                     boolean thisHasSnp = vc.getAlternateAlleles().stream().anyMatch(allele -> allele != Allele.SPAN_DEL && allele.length() == vc.getReference().length());\n //                    logger.info(\"\\t\" + contig + \":\" + currentPosition + \": calculated thisHasSnp of \" + thisHasSnp + \" from \" + vc.getAlternateAlleles() + \" and ref \" + vc.getReference());\n                     hasSnpAllele = hasSnpAllele || thisHasSnp;"
  },
  {
    "sha": "1b9f511443e2315d0d272892f6c563a90658ea1c",
    "filename": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractFeaturesEngine.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractFeaturesEngine.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractFeaturesEngine.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/tools/variantdb/nextgen/ExtractFeaturesEngine.java?ref=e1cc30c8d003f324b7feea602b90feac016d7b36",
    "patch": "@@ -100,12 +100,9 @@ public ExtractFeaturesEngine(final String projectID,\n     public void traverse() {\n \n \n-        final String featureQueryString = \n-\n-        ExtractFeaturesBQ.getVQSRFeatureExtractQueryString(altAlleleTable, sampleListTable, minLocation, maxLocation, trainingSitesOnly, SNP_QUAL_THRESHOLD, INDEL_QUAL_THRESHOLD);\n-\n+        final String featureQueryString = ExtractFeaturesBQ.getVQSRFeatureExtractQueryString(altAlleleTable, sampleListTable, minLocation, maxLocation, trainingSitesOnly, SNP_QUAL_THRESHOLD, INDEL_QUAL_THRESHOLD);\n         logger.info(featureQueryString);\n-        final StorageAPIAvroReader storageAPIAvroReader = BigQueryUtils.executeQueryWithStorageAPI(featureQueryString, SchemaUtils.FEATURE_EXTRACT_FIELDS, projectID, useBatchQueries);\n+        final StorageAPIAvroReader storageAPIAvroReader = BigQueryUtils.executeQueryWithStorageAPI(featureQueryString, SchemaUtils.FEATURE_EXTRACT_FIELDS, projectID, useBatchQueries, null);\n \n         createVQSRInputFromTableResult(storageAPIAvroReader);\n     }"
  },
  {
    "sha": "7e71b5b82c3343bbf1645dac1a0710490faaf12b",
    "filename": "src/main/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtils.java",
    "status": "modified",
    "additions": 17,
    "deletions": 10,
    "changes": 27,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtils.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/e1cc30c8d003f324b7feea602b90feac016d7b36/src/main/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtils.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/main/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtils.java?ref=e1cc30c8d003f324b7feea602b90feac016d7b36",
    "patch": "@@ -54,10 +54,11 @@ public static BigQuery getBigQueryEndPoint(String executionProjectId) {\n      * Will block until results are returned.\n      * For more information on querying BigQuery tables, see: https://cloud.google.com/bigquery/sql-reference/\n      * @param queryString The {@link BigQuery} query string to execute.  Must use standard SQL syntax.  Must contain the project ID, data set, and table name in the `FROM` clause for the table from which to retrieve data.\n+     * @param labels The {@link BigQuery} label to add the job run.  Must use Map<String, String>. Can be null to indicate no labels.\n      * @return A {@link TableResult} object containing the results of the query executed.\n      */\n-    public static TableResult executeQuery(final String queryString) {\n-        return executeQuery(getBigQueryEndPoint(), queryString, false);\n+    public static TableResult executeQuery(final String queryString, final Map<String, String> labels) {\n+        return executeQuery(getBigQueryEndPoint(), queryString, false, labels );\n     }\n \n     /**\n@@ -66,10 +67,11 @@ public static TableResult executeQuery(final String queryString) {\n      * For more information on querying BigQuery tables, see: https://cloud.google.com/bigquery/sql-reference/\n      * @param queryString The {@link BigQuery} query string to execute.  Must use standard SQL syntax.  Must contain the project ID, data set, and table name in the `FROM` clause for the table from which to retrieve data.\n      * @param runQueryInBatchMode If true, run the query in batch mode, which is lower priority but has no limit on the number of concurrent queries\n+     * @param labels The {@link BigQuery} label to add the job run.  Must use Map<String, String>. Can be null to indicate no labels.\n      * @return A {@link TableResult} object containing the results of the query executed.\n      */\n-    public static TableResult executeQuery(final String queryString, final boolean runQueryInBatchMode) {\n-        return executeQuery(getBigQueryEndPoint(), queryString, runQueryInBatchMode);\n+    public static TableResult executeQuery(final String queryString, final boolean runQueryInBatchMode, final Map<String, String> labels) {\n+        return executeQuery(getBigQueryEndPoint(), queryString, runQueryInBatchMode, labels);\n     }\n \n     /**\n@@ -79,15 +81,17 @@ public static TableResult executeQuery(final String queryString, final boolean r\n      * @param bigQuery The {@link BigQuery} instance against which to execute the given {@code queryString}.\n      * @param queryString The {@link BigQuery} query string to execute.  Must use standard SQL syntax.  Must contain the project ID, data set, and table name in the `FROM` clause for the table from which to retrieve data.\n      * @param runQueryInBatchMode If true, run the query in batch mode, which is lower priority but has no limit on the number of concurrent queries\n+     * @param labels The {@link BigQuery} label to add the job run.  Must use Map<String, String>. Can be null to indicate no labels.\n      * @return A {@link TableResult} object containing the results of the query executed.\n      */\n-    public static TableResult executeQuery(final BigQuery bigQuery, final String queryString, final boolean runQueryInBatchMode) {\n+    public static TableResult executeQuery(final BigQuery bigQuery, final String queryString, final boolean runQueryInBatchMode, final Map<String, String> labels) {\n \n         // Create a query configuration we can run based on our query string:\n         final QueryJobConfiguration queryConfig =\n                 QueryJobConfiguration.newBuilder( queryString )\n                         .setUseLegacySql(false)\n                         .setPriority(runQueryInBatchMode ? QueryJobConfiguration.Priority.BATCH : QueryJobConfiguration.Priority.INTERACTIVE)\n+                        .setLabels(labels)\n                         .build();\n \n         logger.info(\"Executing Query: \\n\\n\" + queryString);\n@@ -104,18 +108,21 @@ public static TableResult executeQuery(final BigQuery bigQuery, final String que\n      * @param projectID The BigQuery {@code project ID} containing the {@code dataSet} and table from which to query data.\n      * @param dataSet The BigQuery {@code dataSet} containing the table from which to query data.\n      * @param queryString The {@link BigQuery} query string to execute.  Must use standard SQL syntax.  Must contain the project ID, data set, and table ID in the `FROM` clause for the table from which to retrieve data.\n+     * @param labels The {@link BigQuery} label to add the job run.  Must use Map<String, String>. Can be null to indicate no labels.\n      * @return A {@link TableResult} object containing the results of the query executed.\n      */\n     public static TableResult executeQuery(final BigQuery bigQuery,\n                                            final String projectID,\n                                            final String dataSet,\n-                                           final String queryString) {\n+                                           final String queryString,\n+                                           final Map<String, String> labels) {\n \n         // Create a query configuration we can run based on our query string:\n         final QueryJobConfiguration queryConfig =\n                 QueryJobConfiguration.newBuilder( queryString )\n                         .setUseLegacySql(false)\n                         .setDefaultDataset(DatasetId.of(projectID, dataSet))\n+                        .setLabels(labels)\n                         .build();\n \n         return submitQueryAndWaitForResults( bigQuery, queryConfig );\n@@ -374,12 +381,12 @@ private static long getQueryCostBytesProcessedEstimate(String queryString) {\n         return bytesProcessed;\n     }\n \n-    public static StorageAPIAvroReader executeQueryWithStorageAPI(final String queryString, final List<String> fieldsToRetrieve, final String projectID) {\n+    public static StorageAPIAvroReader executeQueryWithStorageAPI(final String queryString, final List<String> fieldsToRetrieve, final String projectID, Map<String, String> labels) {\n \n-        return executeQueryWithStorageAPI(queryString, fieldsToRetrieve, projectID, false);\n+        return executeQueryWithStorageAPI(queryString, fieldsToRetrieve, projectID, false, labels);\n     }\n \n-    public static StorageAPIAvroReader executeQueryWithStorageAPI(final String queryString, final List<String> fieldsToRetrieve, final String projectID, final boolean runQueryInBatchMode) {\n+    public static StorageAPIAvroReader executeQueryWithStorageAPI(final String queryString, final List<String> fieldsToRetrieve, final String projectID, final boolean runQueryInBatchMode,  Map<String, String> labels) {\n         final String tempTableDataset = \"temp_tables\";\n         final String tempTableName = UUID.randomUUID().toString().replace('-', '_');\n         final String tempTableFullyQualified = String.format(\"%s.%s.%s\", projectID, tempTableDataset, tempTableName);\n@@ -393,7 +400,7 @@ public static StorageAPIAvroReader executeQueryWithStorageAPI(final String query\n                 \") AS\\n\" +\n                 queryString;\n \n-        executeQuery(queryStringIntoTempTable, runQueryInBatchMode);\n+        executeQuery(queryStringIntoTempTable, runQueryInBatchMode, labels);\n \n         final Table tableInfo = getBigQueryEndPoint().getTable( TableId.of(projectID, tempTableDataset, tempTableName) );\n         logger.info(String.format(\"Query temp table created with %s rows and %s bytes in size\", tableInfo.getNumRows(), tableInfo.getNumBytes()));"
  },
  {
    "sha": "c5cca305f8c3e94e66f3aabf64d4748473489aac",
    "filename": "src/test/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtilsUnitTest.java",
    "status": "modified",
    "additions": 29,
    "deletions": 13,
    "changes": 42,
    "blob_url": "https://github.com/broadinstitute/gatk/blob/e1cc30c8d003f324b7feea602b90feac016d7b36/src/test/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtilsUnitTest.java",
    "raw_url": "https://github.com/broadinstitute/gatk/raw/e1cc30c8d003f324b7feea602b90feac016d7b36/src/test/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtilsUnitTest.java",
    "contents_url": "https://api.github.com/repos/broadinstitute/gatk/contents/src/test/java/org/broadinstitute/hellbender/utils/bigquery/BigQueryUtilsUnitTest.java?ref=e1cc30c8d003f324b7feea602b90feac016d7b36",
    "patch": "@@ -8,7 +8,6 @@\n import org.testng.Assert;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n-\n import java.util.*;\n \n /**\n@@ -22,12 +21,14 @@\n     private static final String BIGQUERY_FULLY_QUALIFIED_TABLE = String.format(\"%s.%s.%s\",\n             BIGQUERY_TEST_PROJECT, BIGQUERY_TEST_DATASET, BIGQUERY_TEST_TABLE);\n \n+    private static final UUID runUuid = UUID.randomUUID();\n \n     @Test(groups = {\"cloud\"})\n     public void testExecuteQueryAllRecords() {\n         final String query = String.format(\"SELECT * FROM `%s`\", BIGQUERY_FULLY_QUALIFIED_TABLE);\n-\n-        final TableResult result = BigQueryUtils.executeQuery(query);\n+        Map<String, String> labels = new HashMap<String, String>();\n+        labels.put(\"gatktestquery\", \"getallrecords\" + runUuid);\n+        final TableResult result = BigQueryUtils.executeQuery(query, labels);\n \n         checkQueryResults(result, getAllExpectedNamesAndAges(), query);\n     }\n@@ -38,26 +39,30 @@ public void testExecuteQueryWithWhereClause() {\n         expectedNamesAndAges.put(\"Fred\", \"35\");\n \n         final String query = String.format(\"SELECT * FROM `%s` WHERE name = 'Fred'\", BIGQUERY_FULLY_QUALIFIED_TABLE);\n-\n-        final TableResult result = BigQueryUtils.executeQuery(query);\n+        Map<String, String> labels = new HashMap<String, String>();\n+        labels.put(\"gatktestquery\", \"testwhereclause\" + runUuid);\n+        System.out.print(\"testwhereclause\" + runUuid);\n+        final TableResult result = BigQueryUtils.executeQuery(query, labels);\n \n         checkQueryResults(result, expectedNamesAndAges, query);\n     }\n \n     @Test(groups = {\"cloud\"})\n     public void testExecuteQueryInBatchMode() {\n         final String query = String.format(\"SELECT * FROM `%s`\", BIGQUERY_FULLY_QUALIFIED_TABLE);\n-\n-        final TableResult result = BigQueryUtils.executeQuery(query, true);\n+        Map<String, String> labels = new HashMap<String, String>();\n+        labels.put(\"gatktestquery\", \"testbatchmode\" + runUuid);\n+        final TableResult result = BigQueryUtils.executeQuery(query, true, labels);\n \n         checkQueryResults(result, getAllExpectedNamesAndAges(), query);\n     }\n \n     @Test(groups = {\"cloud\"})\n     public void testSpecifiedExecuteQuery() {\n         final String query = String.format(\"SELECT * FROM `%s`\", BIGQUERY_TEST_TABLE);\n-\n-        final TableResult result = BigQueryUtils.executeQuery(BigQueryUtils.getBigQueryEndPoint(), BIGQUERY_TEST_PROJECT, BIGQUERY_TEST_DATASET, query);\n+        Map<String, String> labels = new HashMap<String, String>();\n+        labels.put(\"gatktestquery\", \"testspecifiedexecutequery\" + runUuid);\n+        final TableResult result = BigQueryUtils.executeQuery(BigQueryUtils.getBigQueryEndPoint(), BIGQUERY_TEST_PROJECT, BIGQUERY_TEST_DATASET, query, labels);\n \n         checkQueryResults(result, getAllExpectedNamesAndAges(), query);\n     }\n@@ -70,8 +75,9 @@ public void testQueryWithStorageAPI() {\n \n         final List<String> fieldsToRetrieve = new LinkedList<>();\n         fieldsToRetrieve.add(\"name\");\n-\n-        final StorageAPIAvroReader result = BigQueryUtils.executeQueryWithStorageAPI(query, fieldsToRetrieve, BIGQUERY_TEST_PROJECT);\n+        Map<String, String> labels = new HashMap<String, String>();\n+        labels.put(\"gatktestquery\", \"teststorageapi\" + runUuid);\n+        final StorageAPIAvroReader result = BigQueryUtils.executeQueryWithStorageAPI(query, fieldsToRetrieve, BIGQUERY_TEST_PROJECT, labels);\n \n         int rowCount = 0;\n         final Set<String> retrievedNames = new HashSet<>();\n@@ -103,8 +109,9 @@ public void testQueryWithEmptyDatasetStorageAPI() {\n \n         final List<String> fieldsToRetrieve = new LinkedList<>();\n         fieldsToRetrieve.add(\"name\");\n-\n-        final StorageAPIAvroReader result = BigQueryUtils.executeQueryWithStorageAPI(query, fieldsToRetrieve, BIGQUERY_TEST_PROJECT);\n+        Map<String, String> labels = new HashMap<String, String>();\n+        labels.put(\"gatktestquery\", \"testapiwithemptydata\" + runUuid);\n+        final StorageAPIAvroReader result = BigQueryUtils.executeQueryWithStorageAPI(query, fieldsToRetrieve, BIGQUERY_TEST_PROJECT, labels);\n \n         int rowCount = 0;\n         final Set<String> retrievedNames = new HashSet<>();\n@@ -116,6 +123,15 @@ public void testQueryWithEmptyDatasetStorageAPI() {\n         Assert.assertTrue(retrievedNames.isEmpty(), \"No Result expected\");\n     }\n \n+    @Test(groups = {\"cloud\"})\n+    public void testQueryWithNullLabel() {\n+        final String query = String.format(\"SELECT * FROM `%s`\", BIGQUERY_FULLY_QUALIFIED_TABLE);\n+        Map<String, String> labels = null;\n+        final TableResult result = BigQueryUtils.executeQuery(query, labels);\n+\n+        checkQueryResults(result, getAllExpectedNamesAndAges(), query);\n+    }\n+\n     private Map<String, String> getAllExpectedNamesAndAges() {\n         final Map<String, String> expectedNamesAndAges = new HashMap<>();\n         expectedNamesAndAges.put(\"Fred\", \"35\");"
  }
]
