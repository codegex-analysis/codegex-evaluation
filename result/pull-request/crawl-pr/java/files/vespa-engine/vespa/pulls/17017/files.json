[
  {
    "sha": "83dfe5a653fee9a88a5af959dfc0786825e7721c",
    "filename": "zookeeper-client-common/src/main/java/com/yahoo/vespa/zookeeper/client/ZkClientConfigBuilder.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-client-common/src/main/java/com/yahoo/vespa/zookeeper/client/ZkClientConfigBuilder.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-client-common/src/main/java/com/yahoo/vespa/zookeeper/client/ZkClientConfigBuilder.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/zookeeper-client-common/src/main/java/com/yahoo/vespa/zookeeper/client/ZkClientConfigBuilder.java?ref=503a083d6a2605d2dbdc0c358cf83b75ccbcba48",
    "patch": "@@ -39,7 +39,7 @@ public ZkClientConfigBuilder() {\n          this(defaultTlsContext);\n     }\n \n-    public ZkClientConfigBuilder(TlsContext tlsContext) {\n+    ZkClientConfigBuilder(TlsContext tlsContext) {\n         this.tlsContext = tlsContext;\n     }\n \n@@ -82,10 +82,6 @@ public String toConfigString() {\n     }\n \n     private static Optional<TlsContext> getTlsContext() {\n-        // TODO(bjorncs) Remove handling of temporary feature flag\n-        boolean temporaryFeatureFlag = Optional.ofNullable(System.getenv(\"VESPA_USE_TLS_FOR_ZOOKEEPER_CLIENT\")).map(Boolean::parseBoolean).orElse(false);\n-        if (!temporaryFeatureFlag) return Optional.empty();\n-\n         if (TransportSecurityUtils.getInsecureMixedMode() == MixedMode.PLAINTEXT_CLIENT_MIXED_SERVER) return Optional.empty();\n         return TransportSecurityUtils.getSystemTlsContext();\n     }"
  },
  {
    "sha": "acf1bdc084212bfc0bc67f1f84f90788f203d399",
    "filename": "zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/Configurator.java",
    "status": "modified",
    "additions": 51,
    "deletions": 79,
    "changes": 130,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/Configurator.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/Configurator.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/Configurator.java?ref=503a083d6a2605d2dbdc0c358cf83b75ccbcba48",
    "patch": "@@ -3,7 +3,9 @@\n package com.yahoo.vespa.zookeeper;\n \n import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import com.yahoo.security.tls.MixedMode;\n import com.yahoo.security.tls.TlsContext;\n+import com.yahoo.security.tls.TransportSecurityUtils;\n import com.yahoo.vespa.defaults.Defaults;\n \n import java.io.FileWriter;\n@@ -38,25 +40,28 @@ public Configurator(ZookeeperServerConfig zookeeperServerConfig) {\n         System.setProperty(\"zookeeper.authProvider.x509\", \"com.yahoo.vespa.zookeeper.VespaMtlsAuthenticationProvider\");\n     }\n \n-    void writeConfigToDisk(Optional<TlsContext> tlsContext) {\n+    void writeConfigToDisk() { writeConfigToDisk(VespaTlsConfig.fromSystem()); }\n+\n+    // override of Vespa TLS config for unit testing\n+    void writeConfigToDisk(VespaTlsConfig vespaTlsConfig) {\n         configFilePath.toFile().getParentFile().mkdirs();\n \n         try {\n-            writeZooKeeperConfigFile(zookeeperServerConfig, tlsContext);\n+            writeZooKeeperConfigFile(zookeeperServerConfig, vespaTlsConfig);\n             writeMyIdFile(zookeeperServerConfig);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Error writing zookeeper config\", e);\n         }\n     }\n \n     private void writeZooKeeperConfigFile(ZookeeperServerConfig config,\n-                                          Optional<TlsContext> tlsContext) throws IOException {\n+                                          VespaTlsConfig vespaTlsConfig) throws IOException {\n         try (FileWriter writer = new FileWriter(configFilePath.toFile())) {\n-            writer.write(transformConfigToString(config, tlsContext));\n+            writer.write(transformConfigToString(config, vespaTlsConfig));\n         }\n     }\n \n-    private String transformConfigToString(ZookeeperServerConfig config, Optional<TlsContext> tlsContext) {\n+    private String transformConfigToString(ZookeeperServerConfig config, VespaTlsConfig vespaTlsConfig) {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"tickTime=\").append(config.tickTime()).append(\"\\n\");\n         sb.append(\"initLimit=\").append(config.initLimit()).append(\"\\n\");\n@@ -79,8 +84,8 @@ private String transformConfigToString(ZookeeperServerConfig config, Optional<Tl\n         sb.append(\"metricsProvider.className=org.apache.zookeeper.metrics.impl.NullMetricsProvider\\n\");\n         ensureThisServerIsRepresented(config.myid(), config.server());\n         config.server().forEach(server -> addServerToCfg(sb, server));\n-        sb.append(new TlsQuorumConfig().createConfig(config, tlsContext));\n-        sb.append(new TlsClientServerConfig().createConfig(config, tlsContext));\n+        sb.append(new TlsQuorumConfig().createConfig(vespaTlsConfig));\n+        sb.append(new TlsClientServerConfig().createConfig(config, vespaTlsConfig));\n         return sb.toString();\n     }\n \n@@ -140,22 +145,10 @@ Path makeAbsolutePath(String filename) {\n     }\n \n     private interface TlsConfig {\n-        String createConfig(ZookeeperServerConfig config, Optional<TlsContext> tlsContext);\n-\n-        default Optional<String> getEnvironmentVariable(String variableName) {\n-            return Optional.ofNullable(System.getenv().get(variableName))\n-                    .filter(var -> !var.isEmpty());\n-        }\n-\n-        default void validateOptions(Optional<TlsContext> tlsContext, String tlsSetting) {\n-            if (tlsContext.isEmpty() && !tlsSetting.equals(\"OFF\"))\n-                throw new RuntimeException(\"Could not retrieve transport security options\");\n-        }\n-\n         String configFieldPrefix();\n \n-        default void appendSharedTlsConfig(StringBuilder builder, Optional<TlsContext> tlsContext) {\n-            tlsContext.ifPresent(ctx -> {\n+        default void appendSharedTlsConfig(StringBuilder builder, VespaTlsConfig vespaTlsConfig) {\n+            vespaTlsConfig.context().ifPresent(ctx -> {\n                 builder.append(configFieldPrefix()).append(\".context.supplier.class=\").append(VespaSslContextProvider.class.getName()).append(\"\\n\");\n                 String enabledCiphers = Arrays.stream(ctx.parameters().getCipherSuites()).sorted().collect(Collectors.joining(\",\"));\n                 builder.append(configFieldPrefix()).append(\".ciphersuites=\").append(enabledCiphers).append(\"\\n\");\n@@ -164,41 +157,25 @@ default void appendSharedTlsConfig(StringBuilder builder, Optional<TlsContext> t\n                 builder.append(configFieldPrefix()).append(\".clientAuth=NEED\\n\");\n             });\n         }\n+\n+        default boolean enablePortUnification(VespaTlsConfig config) {\n+            return config.tlsEnabled()\n+                    && (config.mixedMode() == MixedMode.TLS_CLIENT_MIXED_SERVER || config.mixedMode() == MixedMode.PLAINTEXT_CLIENT_MIXED_SERVER);\n+        }\n     }\n \n     static class TlsClientServerConfig implements TlsConfig {\n \n-        @Override\n-        public String createConfig(ZookeeperServerConfig config, Optional<TlsContext> tlsContext) {\n-            String tlsSetting = getEnvironmentVariable(\"VESPA_TLS_FOR_ZOOKEEPER_CLIENT_SERVER_COMMUNICATION\")\n-                    .orElse(config.tlsForClientServerCommunication().name());\n-            validateOptions(tlsContext, tlsSetting);\n-\n-            StringBuilder sb = new StringBuilder();\n-            boolean portUnification;\n-            boolean secureClientPort;\n-            switch (tlsSetting) {\n-                case \"OFF\":\n-                    secureClientPort = false; portUnification = false;\n-                    break;\n-                case \"TLS_ONLY\":\n-                    secureClientPort = true; portUnification = false;\n-                    break;\n-                case \"PORT_UNIFICATION\":\n-                case \"TLS_WITH_PORT_UNIFICATION\":\n-                    secureClientPort = false; portUnification = true;\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown value of config setting tlsForClientServerCommunication: \" + tlsSetting);\n-            }\n+        public String createConfig(ZookeeperServerConfig config, VespaTlsConfig vespaTlsConfig) {\n             // ZooKeeper Dynamic Reconfiguration does not support SSL/secure client port\n             // The secure client port must be configured in the static configuration section instead\n             // https://issues.apache.org/jira/browse/ZOOKEEPER-3577\n-            sb.append(\"client.portUnification=\").append(portUnification).append(\"\\n\")\n+            boolean secureClientPort = vespaTlsConfig.tlsEnabled() && vespaTlsConfig.mixedMode() == MixedMode.DISABLED;\n+            StringBuilder sb = new StringBuilder()\n+                    .append(\"client.portUnification=\").append(enablePortUnification(vespaTlsConfig)).append(\"\\n\")\n                     .append(\"clientPort=\").append(secureClientPort ? 0 : config.clientPort()).append(\"\\n\")\n                     .append(\"secureClientPort=\").append(secureClientPort ? config.clientPort() : 0).append(\"\\n\");\n-            appendSharedTlsConfig(sb, tlsContext);\n-\n+            appendSharedTlsConfig(sb, vespaTlsConfig);\n             return sb.toString();\n         }\n \n@@ -210,38 +187,11 @@ public String configFieldPrefix() {\n \n     static class TlsQuorumConfig implements TlsConfig {\n \n-        @Override\n-        public String createConfig(ZookeeperServerConfig config, Optional<TlsContext> tlsContext) {\n-            String tlsSetting = getEnvironmentVariable(\"VESPA_TLS_FOR_ZOOKEEPER_QUORUM_COMMUNICATION\")\n-                    .orElse(config.tlsForQuorumCommunication().name());\n-            validateOptions(tlsContext, tlsSetting);\n-\n-            StringBuilder sb = new StringBuilder();\n-            boolean sslQuorum;\n-            boolean portUnification;\n-            switch (tlsSetting) {\n-                case \"OFF\":\n-                    sslQuorum = false;\n-                    portUnification = false;\n-                    break;\n-                case \"PORT_UNIFICATION\":\n-                    sslQuorum = false;\n-                    portUnification = true;\n-                    break;\n-                case \"TLS_WITH_PORT_UNIFICATION\":\n-                    sslQuorum = true;\n-                    portUnification = true;\n-                    break;\n-                case \"TLS_ONLY\":\n-                    sslQuorum = true;\n-                    portUnification = false;\n-                    break;\n-                default: throw new IllegalArgumentException(\"Unknown value of config setting tlsForQuorumCommunication: \" + tlsSetting);\n-            }\n-            sb.append(\"sslQuorum=\").append(sslQuorum).append(\"\\n\");\n-            sb.append(\"portUnification=\").append(portUnification).append(\"\\n\");\n-            appendSharedTlsConfig(sb, tlsContext);\n-\n+        public String createConfig(VespaTlsConfig vespaTlsConfig) {\n+            StringBuilder sb = new StringBuilder()\n+                    .append(\"sslQuorum=\").append(vespaTlsConfig.tlsEnabled()).append(\"\\n\")\n+                    .append(\"portUnification=\").append(enablePortUnification(vespaTlsConfig)).append(\"\\n\");\n+            appendSharedTlsConfig(sb, vespaTlsConfig);\n             return sb.toString();\n         }\n \n@@ -251,4 +201,26 @@ public String configFieldPrefix() {\n         }\n     }\n \n+    static class VespaTlsConfig {\n+        private final TlsContext context;\n+        private final MixedMode mixedMode;\n+\n+        VespaTlsConfig(TlsContext context, MixedMode mixedMode) {\n+            this.context = context;\n+            this.mixedMode = mixedMode;\n+        }\n+\n+        static VespaTlsConfig fromSystem() {\n+            return new VespaTlsConfig(\n+                    TransportSecurityUtils.getSystemTlsContext().orElse(null),\n+                    TransportSecurityUtils.getInsecureMixedMode());\n+        }\n+\n+        static VespaTlsConfig tlsDisabled() { return new VespaTlsConfig(null, MixedMode.defaultValue()); }\n+\n+        boolean tlsEnabled() { return context != null; }\n+        Optional<TlsContext> context() { return Optional.ofNullable(context); }\n+        MixedMode mixedMode() { return mixedMode; }\n+    }\n+\n }"
  },
  {
    "sha": "8c748250503674738865b2e632e5aa84ed42fc46",
    "filename": "zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/ZooKeeperRunner.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/ZooKeeperRunner.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/ZooKeeperRunner.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/zookeeper-server/zookeeper-server-common/src/main/java/com/yahoo/vespa/zookeeper/ZooKeeperRunner.java?ref=503a083d6a2605d2dbdc0c358cf83b75ccbcba48",
    "patch": "@@ -4,7 +4,6 @@\n import com.yahoo.cloud.config.ZookeeperServerConfig;\n import com.yahoo.concurrent.DaemonThreadFactory;\n import com.yahoo.protect.Process;\n-import com.yahoo.security.tls.TransportSecurityUtils;\n \n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -39,7 +38,7 @@\n     public ZooKeeperRunner(ZookeeperServerConfig zookeeperServerConfig, VespaZooKeeperServer server) {\n         this.zookeeperServerConfig = zookeeperServerConfig;\n         this.server = server;\n-        new Configurator(zookeeperServerConfig).writeConfigToDisk(TransportSecurityUtils.getSystemTlsContext());\n+        new Configurator(zookeeperServerConfig).writeConfigToDisk();\n         executorService = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"zookeeper server\"));\n         executorService.submit(this);\n     }"
  },
  {
    "sha": "a9e6987942735a53c213fc7386657921fbbb9923",
    "filename": "zookeeper-server/zookeeper-server-common/src/test/java/com/yahoo/vespa/zookeeper/ConfiguratorTest.java",
    "status": "modified",
    "additions": 15,
    "deletions": 44,
    "changes": 59,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-server/zookeeper-server-common/src/test/java/com/yahoo/vespa/zookeeper/ConfiguratorTest.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/503a083d6a2605d2dbdc0c358cf83b75ccbcba48/zookeeper-server/zookeeper-server-common/src/test/java/com/yahoo/vespa/zookeeper/ConfiguratorTest.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/zookeeper-server/zookeeper-server-common/src/test/java/com/yahoo/vespa/zookeeper/ConfiguratorTest.java?ref=503a083d6a2605d2dbdc0c358cf83b75ccbcba48",
    "patch": "@@ -7,6 +7,7 @@\n import com.yahoo.security.tls.AuthorizationMode;\n import com.yahoo.security.tls.DefaultTlsContext;\n import com.yahoo.security.tls.HostnameVerification;\n+import com.yahoo.security.tls.MixedMode;\n import com.yahoo.security.tls.PeerAuthentication;\n import com.yahoo.security.tls.TlsContext;\n import com.yahoo.security.tls.policy.AuthorizedPeers;\n@@ -24,14 +25,12 @@\n import java.security.KeyPair;\n import java.security.cert.X509Certificate;\n import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n \n-import static com.yahoo.cloud.config.ZookeeperServerConfig.TlsForClientServerCommunication;\n-import static com.yahoo.cloud.config.ZookeeperServerConfig.TlsForQuorumCommunication;\n import static com.yahoo.security.KeyAlgorithm.EC;\n import static com.yahoo.security.SignatureAlgorithm.SHA256_WITH_ECDSA;\n import static com.yahoo.vespa.defaults.Defaults.getDefaults;\n+import static com.yahoo.vespa.zookeeper.Configurator.VespaTlsConfig;\n import static com.yahoo.vespa.zookeeper.Configurator.ZOOKEEPER_JUTE_MAX_BUFFER;\n import static java.time.Instant.EPOCH;\n import static java.time.temporal.ChronoUnit.DAYS;\n@@ -57,7 +56,7 @@ public void setup() throws IOException {\n     @Test\n     public void config_is_written_correctly_when_one_server() {\n         ZookeeperServerConfig.Builder builder = createConfigBuilderForSingleHost(cfgFile, idFile);\n-        new Configurator(builder.build()).writeConfigToDisk(Optional.empty());\n+        new Configurator(builder.build()).writeConfigToDisk(VespaTlsConfig.tlsDisabled());\n         validateConfigFileSingleHost(cfgFile);\n         validateIdFile(idFile, \"0\\n\");\n     }\n@@ -71,39 +70,25 @@ public void config_is_written_correctly_when_multiple_servers() {\n         builder.server(newServer(2, \"baz\", 345, 543, true));\n         builder.myidFile(idFile.getAbsolutePath());\n         builder.myid(1);\n-        new Configurator(builder.build()).writeConfigToDisk(Optional.empty());\n+        new Configurator(builder.build()).writeConfigToDisk(VespaTlsConfig.tlsDisabled());\n         validateConfigFileMultipleHosts(cfgFile);\n         validateIdFile(idFile, \"1\\n\");\n     }\n \n     @Test\n-    public void config_is_written_correctly_with_tls_for_quorum_communication_port_unification() {\n+    public void config_is_written_correctly_with_tls_for_quorum_communication_tls_with_mixed_mode() {\n         ZookeeperServerConfig.Builder builder = createConfigBuilderForSingleHost(cfgFile, idFile);\n-        builder.tlsForQuorumCommunication(TlsForQuorumCommunication.PORT_UNIFICATION);\n-        builder.tlsForClientServerCommunication(TlsForClientServerCommunication.PORT_UNIFICATION);\n         TlsContext tlsContext = createTlsContext();\n-        new Configurator(builder.build()).writeConfigToDisk(Optional.of(tlsContext));\n-        validateConfigFilePortUnification(cfgFile);\n+        new Configurator(builder.build()).writeConfigToDisk(new VespaTlsConfig(tlsContext, MixedMode.TLS_CLIENT_MIXED_SERVER));\n+        validateConfigFileTlsWithMixedMode(cfgFile);\n     }\n \n     @Test\n-    public void config_is_written_correctly_with_tls_for_quorum_communication_tls_with_port_unification() {\n+    public void config_is_written_correctly_with_tls_for_quorum_communication_tls_without_mixed_mode() {\n         ZookeeperServerConfig.Builder builder = createConfigBuilderForSingleHost(cfgFile, idFile);\n-        builder.tlsForQuorumCommunication(TlsForQuorumCommunication.TLS_WITH_PORT_UNIFICATION);\n-        builder.tlsForClientServerCommunication(TlsForClientServerCommunication.TLS_WITH_PORT_UNIFICATION);\n         TlsContext tlsContext = createTlsContext();\n-        new Configurator(builder.build()).writeConfigToDisk(Optional.of(tlsContext));\n-        validateConfigFileTlsWithPortUnification(cfgFile);\n-    }\n-\n-    @Test\n-    public void config_is_written_correctly_with_tls_for_quorum_communication_tls_only() {\n-        ZookeeperServerConfig.Builder builder = createConfigBuilderForSingleHost(cfgFile, idFile);\n-        builder.tlsForQuorumCommunication(TlsForQuorumCommunication.TLS_ONLY);\n-        builder.tlsForClientServerCommunication(TlsForClientServerCommunication.TLS_ONLY);\n-        TlsContext tlsContext = createTlsContext();\n-        new Configurator(builder.build()).writeConfigToDisk(Optional.of(tlsContext));\n-        validateConfigFileTlsOnly(cfgFile);\n+        new Configurator(builder.build()).writeConfigToDisk(new VespaTlsConfig(tlsContext, MixedMode.DISABLED));\n+        validateConfigFileTlsWithoutMixedMode(cfgFile);\n     }\n \n     @Test(expected = RuntimeException.class)\n@@ -113,7 +98,7 @@ public void require_that_this_id_must_be_present_amongst_servers() {\n         builder.server(newServer(1, \"bar\", 234, 432, false));\n         builder.server(newServer(2, \"baz\", 345, 543, false));\n         builder.myid(0);\n-        new Configurator(builder.build()).writeConfigToDisk(Optional.empty());\n+        new Configurator(builder.build()).writeConfigToDisk(VespaTlsConfig.tlsDisabled());\n     }\n \n     @Test\n@@ -127,12 +112,12 @@ public void jute_max_buffer_can_be_set() throws IOException {\n         builder.zooKeeperConfigFile(cfgFile.getAbsolutePath());\n         builder.myidFile(idFile.getAbsolutePath());\n \n-        new Configurator(builder.build()).writeConfigToDisk(Optional.empty());\n+        new Configurator(builder.build()).writeConfigToDisk(VespaTlsConfig.tlsDisabled());\n         assertEquals(\"\" + new ZookeeperServerConfig(builder).juteMaxBuffer(), System.getProperty(ZOOKEEPER_JUTE_MAX_BUFFER));\n \n         final int max_buffer = 1;\n         builder.juteMaxBuffer(max_buffer);\n-        new Configurator(builder.build()).writeConfigToDisk(Optional.empty());\n+        new Configurator(builder.build()).writeConfigToDisk(VespaTlsConfig.tlsDisabled());\n         assertEquals(\"\" + max_buffer, System.getProperty(ZOOKEEPER_JUTE_MAX_BUFFER));\n     }\n \n@@ -221,21 +206,7 @@ private void validateConfigFileMultipleHosts(File cfgFile) {\n         validateConfigFile(cfgFile, expected);\n     }\n \n-    private void validateConfigFilePortUnification(File cfgFile) {\n-        String expected =\n-                commonConfig() +\n-                \"server.0=foo:321:123\\n\" +\n-                \"sslQuorum=false\\n\" +\n-                \"portUnification=true\\n\" +\n-                tlsQuorumConfig() +\n-                \"client.portUnification=true\\n\" +\n-                \"clientPort=2181\\n\" +\n-                \"secureClientPort=0\\n\" +\n-                tlsClientServerConfig();\n-        validateConfigFile(cfgFile, expected);\n-    }\n-\n-    private void validateConfigFileTlsWithPortUnification(File cfgFile) {\n+    private void validateConfigFileTlsWithMixedMode(File cfgFile) {\n         String expected =\n                 commonConfig() +\n                 \"server.0=foo:321:123\\n\" +\n@@ -249,7 +220,7 @@ private void validateConfigFileTlsWithPortUnification(File cfgFile) {\n         validateConfigFile(cfgFile, expected);\n     }\n \n-    private void validateConfigFileTlsOnly(File cfgFile) {\n+    private void validateConfigFileTlsWithoutMixedMode(File cfgFile) {\n         String expected =\n                 commonConfig() +\n                 \"server.0=foo:321:123\\n\" +"
  }
]
