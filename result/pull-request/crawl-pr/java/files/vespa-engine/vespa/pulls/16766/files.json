[
  {
    "sha": "ea6e7d32310ee13c402b6e72a2e1ea0f92c8b0fa",
    "filename": "container-core/pom.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/pom.xml",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/pom.xml",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/pom.xml?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -149,6 +149,16 @@\n       <artifactId>junit</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.vintage</groupId>\n+      <artifactId>junit-vintage-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <!-- TODO Vespa 8: stop providing org.json:json -->\n       <groupId>org.json</groupId>"
  },
  {
    "sha": "5a5a990737ca45249d9cdf42146bc9eddd89d9f4",
    "filename": "container-core/src/main/java/com/yahoo/restapi/JacksonJsonMapper.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/JacksonJsonMapper.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/JacksonJsonMapper.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/main/java/com/yahoo/restapi/JacksonJsonMapper.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -0,0 +1,22 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.restapi;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+/**\n+ * Default Jackson {@link ObjectMapper} instance shared by {@link com.yahoo.restapi}.\n+ *\n+ * @author bjorncs\n+ */\n+class JacksonJsonMapper {\n+\n+    static final ObjectMapper instance = new ObjectMapper()\n+            .registerModule(new JavaTimeModule())\n+            .registerModule(new Jdk8Module())\n+            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n+\n+    private JacksonJsonMapper() {}\n+}"
  },
  {
    "sha": "1b356b3b459977e7270fae6c66eca5656bfdc642",
    "filename": "container-core/src/main/java/com/yahoo/restapi/JacksonJsonResponse.java",
    "status": "modified",
    "additions": 16,
    "deletions": 8,
    "changes": 24,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/JacksonJsonResponse.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/JacksonJsonResponse.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/main/java/com/yahoo/restapi/JacksonJsonResponse.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -2,13 +2,12 @@\n package com.yahoo.restapi;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n-import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n import com.yahoo.container.jdisc.HttpResponse;\n-import java.util.logging.Level;\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.util.logging.Level;\n import java.util.logging.Logger;\n \n /**\n@@ -19,30 +18,39 @@\n public class JacksonJsonResponse<T> extends HttpResponse {\n \n     private static final Logger log = Logger.getLogger(JacksonJsonResponse.class.getName());\n-    private static final ObjectMapper defaultJsonMapper =\n-            new ObjectMapper().registerModule(new JavaTimeModule()).registerModule(new Jdk8Module());\n \n     private final ObjectMapper jsonMapper;\n+    private final boolean prettyPrint;\n     private final T entity;\n \n     public JacksonJsonResponse(int statusCode, T entity) {\n-        this(statusCode, entity, defaultJsonMapper);\n+        this(statusCode, entity, false);\n+    }\n+\n+    public JacksonJsonResponse(int statusCode, T entity, boolean prettyPrint) {\n+        this(statusCode, entity, JacksonJsonMapper.instance, prettyPrint);\n     }\n \n     public JacksonJsonResponse(int statusCode, T entity, ObjectMapper jsonMapper) {\n+        this(statusCode, entity, jsonMapper, false);\n+    }\n+\n+    public JacksonJsonResponse(int statusCode, T entity, ObjectMapper jsonMapper, boolean prettyPrint) {\n         super(statusCode);\n         this.entity = entity;\n         this.jsonMapper = jsonMapper;\n+        this.prettyPrint = prettyPrint;\n     }\n \n     @Override\n     public void render(OutputStream outputStream) throws IOException {\n+        ObjectWriter writer = prettyPrint ? jsonMapper.writerWithDefaultPrettyPrinter() : jsonMapper.writer();\n         if (log.isLoggable(Level.FINE)) {\n-            String json = jsonMapper.writeValueAsString(entity);\n+            String json = writer.writeValueAsString(entity);\n             log.log(Level.FINE, \"Writing the following JSON to response output stream:\\n\" + json);\n             outputStream.write(json.getBytes());\n         } else {\n-            jsonMapper.writeValue(outputStream, entity);\n+            writer.writeValue(outputStream, entity);\n         }\n     }\n "
  },
  {
    "sha": "43ca0dab29e14c9606091742be327a68ee244398",
    "filename": "container-core/src/main/java/com/yahoo/restapi/MessageResponse.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/MessageResponse.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/MessageResponse.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/main/java/com/yahoo/restapi/MessageResponse.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -14,6 +14,10 @@ public MessageResponse(String message) {\n         super(slime(message));\n     }\n \n+    public MessageResponse(int statusCode, String message) {\n+        super(statusCode, slime(message));\n+    }\n+\n     private static Slime slime(String message) {\n         var slime = new Slime();\n         slime.setObject().setString(\"message\", message);"
  },
  {
    "sha": "1d875db7adc82b03e0b747dcb52a3710cc49d18f",
    "filename": "container-core/src/main/java/com/yahoo/restapi/RestApi.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApi.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApi.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/main/java/com/yahoo/restapi/RestApi.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -0,0 +1,119 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.restapi;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.slime.SlimeUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+import java.util.OptionalLong;\n+\n+/**\n+ * Rest API routing and response serialization\n+ *\n+ * @author bjorncs\n+ */\n+public interface RestApi {\n+\n+    static Builder builder() { return new RestApiImpl.BuilderImpl(); }\n+    static RouteBuilder route(String pathPattern) { return new RestApiImpl.RouteBuilderImpl(pathPattern); }\n+\n+    HttpResponse handleRequest(HttpRequest request);\n+    ObjectMapper jacksonJsonMapper();\n+\n+    interface Builder {\n+        Builder setObjectMapper(ObjectMapper mapper);\n+        Builder setDefaultRoute(RouteBuilder route);\n+        Builder addRoute(RouteBuilder route);\n+        Builder addFilter(Filter filter);\n+        <EXCEPTION extends RuntimeException> Builder addExceptionMapper(Class<EXCEPTION> type, ExceptionMapper<EXCEPTION> mapper);\n+        <ENTITY> Builder addResponseMapper(Class<ENTITY> type, ResponseMapper<ENTITY> mapper);\n+        Builder disableDefaultExceptionMappers();\n+        Builder disableDefaultResponseMappers();\n+        RestApi build();\n+    }\n+\n+    interface RouteBuilder {\n+        RouteBuilder name(String name);\n+        RouteBuilder get(MethodHandler<?> handler);\n+        RouteBuilder post(MethodHandler<?> handler);\n+        RouteBuilder put(MethodHandler<?> handler);\n+        RouteBuilder delete(MethodHandler<?> handler);\n+        RouteBuilder patch(MethodHandler<?> handler);\n+        RouteBuilder defaultHandler(MethodHandler<?> handler);\n+        RouteBuilder addFilter(Filter filter);\n+    }\n+\n+    @FunctionalInterface interface ExceptionMapper<EXCEPTION extends RuntimeException> { HttpResponse toResponse(EXCEPTION exception, RequestContext context); }\n+\n+    @FunctionalInterface interface MethodHandler<ENTITY> { ENTITY handleRequest(RequestContext context) throws RestApiException; }\n+\n+    @FunctionalInterface interface ResponseMapper<ENTITY> { HttpResponse toHttpResponse(ENTITY responseEntity, RequestContext context); }\n+\n+    @FunctionalInterface interface Filter { HttpResponse filterRequest(FilterContext context); }\n+\n+    /** Marker interface required for automatic serialization of Jackson response entities */\n+    interface JacksonResponseEntity {}\n+\n+    /** Marker interface required for automatic serialization of Jackson request entities */\n+    interface JacksonRequestEntity {}\n+\n+    interface RequestContext {\n+        HttpRequest request();\n+        PathParameters pathParameters();\n+        QueryParameters queryParameters();\n+        Headers headers();\n+        Attributes attributes();\n+        Optional<RequestContent> requestContent();\n+\n+        interface Parameters {\n+            Optional<String> getString(String name);\n+            String getStringOrThrow(String name);\n+            default Optional<Boolean> getBoolean(String name) { return getString(name).map(Boolean::valueOf);}\n+            default boolean getBooleanOrThrow(String name) { return Boolean.parseBoolean(getStringOrThrow(name)); }\n+            default OptionalLong getLong(String name) {\n+                return getString(name).map(Long::parseLong).map(OptionalLong::of).orElseGet(OptionalLong::empty);\n+            }\n+            default long getLongOrThrow(String name) { return Long.parseLong(getStringOrThrow(name)); }\n+            default OptionalDouble getDouble(String name) {\n+                return getString(name).map(Double::parseDouble).map(OptionalDouble::of).orElseGet(OptionalDouble::empty);\n+            }\n+            default double getDoubleOrThrow(String name) { return Double.parseDouble(getStringOrThrow(name)); }\n+        }\n+\n+        interface PathParameters extends Parameters {}\n+        interface QueryParameters extends Parameters {}\n+        interface Headers extends Parameters {}\n+\n+        interface Attributes {\n+            Optional<Object> get(String name);\n+            void set(String name, Object value);\n+        }\n+\n+        interface RequestContent {\n+            String contentType();\n+            InputStream inputStream();\n+            ObjectMapper jacksonJsonMapper();\n+            default byte[] consumeByteArray() throws IOException { return inputStream().readAllBytes(); }\n+            default String consumeString() throws IOException { return new String(consumeByteArray(), StandardCharsets.UTF_8); }\n+            default JsonNode consumeJsonNode() throws IOException { return jacksonJsonMapper().readTree(inputStream()); }\n+            default Slime consumeSlime() throws IOException { return SlimeUtils.jsonToSlime(consumeByteArray()); }\n+            default <T extends JacksonRequestEntity> T consumeJacksonEntity(Class<T> type) throws IOException {\n+                return jacksonJsonMapper().readValue(inputStream(), type);\n+            }\n+        }\n+    }\n+\n+    interface FilterContext {\n+        RequestContext requestContext();\n+        String route();\n+        HttpResponse executeNext();\n+    }\n+}"
  },
  {
    "sha": "82a4dc608c35a3d1fa54d8b4d1f3c2ee6c312d19",
    "filename": "container-core/src/main/java/com/yahoo/restapi/RestApiException.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApiException.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApiException.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/main/java/com/yahoo/restapi/RestApiException.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -0,0 +1,63 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.restapi;\n+\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * A {@link RuntimeException} that represents a http response.\n+ *\n+ * @author bjorncs\n+ */\n+public class RestApiException extends RuntimeException {\n+    private final int statusCode;\n+    private final HttpResponse response;\n+\n+    public RestApiException(int statusCode, String errorType, String message) {\n+        this(new ErrorResponse(statusCode, errorType, message), message, null);\n+    }\n+\n+    public RestApiException(HttpResponse response, String message) {\n+        this(response, message, null);\n+    }\n+\n+    public RestApiException(int statusCode, String errorType, String message, Throwable cause) {\n+        this(new ErrorResponse(statusCode, errorType, message), message, cause);\n+    }\n+\n+    public RestApiException(HttpResponse response, String message, Throwable cause) {\n+        super(message, cause);\n+        this.statusCode = response.getStatus();\n+        this.response = response;\n+    }\n+\n+    private RestApiException(Function<String, HttpResponse> responseFromMessage, String message, Throwable cause) {\n+        this(responseFromMessage.apply(message), message, cause);\n+    }\n+\n+    public int statusCode() { return statusCode; }\n+    public HttpResponse response() { return response; }\n+\n+    public static class NotFoundException extends RestApiException {\n+        public NotFoundException() { super(ErrorResponse::notFoundError, \"Not Found\", null); }\n+    }\n+\n+    public static class MethodNotAllowed extends RestApiException {\n+        public MethodNotAllowed() { super(ErrorResponse::methodNotAllowed, \"Method not allowed\", null); }\n+        public MethodNotAllowed(HttpRequest request) {\n+            super(ErrorResponse::methodNotAllowed, \"Method '\" + request.getMethod().name() + \"' is not allowed\", null);\n+        }\n+    }\n+\n+    public static class BadRequest extends RestApiException {\n+        public BadRequest(String message) { super(ErrorResponse::badRequest, message, null); }\n+        public BadRequest(String message, Throwable cause) { super(ErrorResponse::badRequest, message, cause); }\n+    }\n+\n+    public static class InternalServerError extends RestApiException {\n+        public InternalServerError(String message) { super(ErrorResponse::internalServerError, message, null); }\n+        public InternalServerError(String message, Throwable cause) { super(ErrorResponse::internalServerError, message, cause); }\n+    }\n+}"
  },
  {
    "sha": "b2da9db94589bf36af1bd2eb0dcfd5092557c3d1",
    "filename": "container-core/src/main/java/com/yahoo/restapi/RestApiImpl.java",
    "status": "added",
    "additions": 321,
    "deletions": 0,
    "changes": 321,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApiImpl.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApiImpl.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/main/java/com/yahoo/restapi/RestApiImpl.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -0,0 +1,321 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.restapi;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.slime.Slime;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * @author bjorncs\n+ */\n+class RestApiImpl implements RestApi {\n+\n+    private final Route defaultRoute;\n+    private final List<Route> routes;\n+    private final List<ExceptionMapperHolder<?>> exceptionMappers;\n+    private final List<ResponseMapperHolder<?>> responseMappers;\n+    private final List<Filter> filters;\n+    private final ObjectMapper jacksonJsonMapper;\n+\n+    private RestApiImpl(RestApi.Builder builder) {\n+        BuilderImpl builderImpl = (BuilderImpl) builder;\n+        ObjectMapper jacksonJsonMapper = builderImpl.jacksonJsonMapper != null ? builderImpl.jacksonJsonMapper : JacksonJsonMapper.instance;\n+        this.defaultRoute = builderImpl.defaultRoute != null ? builderImpl.defaultRoute : createDefaultRoute();\n+        this.routes = List.copyOf(builderImpl.routes);\n+        this.exceptionMappers = combineWithDefaultExceptionMappers(\n+                builderImpl.exceptionMappers, Boolean.TRUE.equals(builderImpl.disableDefaultExceptionMappers));\n+        this.responseMappers = combineWithDefaultResponseMappers(\n+                builderImpl.responseMappers, jacksonJsonMapper, Boolean.TRUE.equals(builderImpl.disableDefaultResponseMappers));\n+        this.filters = List.copyOf(builderImpl.filters);\n+        this.jacksonJsonMapper = jacksonJsonMapper;\n+    }\n+\n+    @Override\n+    public HttpResponse handleRequest(HttpRequest request) {\n+        Path pathMatcher = new Path(request.getUri());\n+        Route resolvedRoute = resolveRoute(pathMatcher);\n+        RequestContextImpl requestContext = new RequestContextImpl(request, pathMatcher, jacksonJsonMapper);\n+        FilterContextImpl filterContext =\n+                createFilterContextRecursive(\n+                        resolvedRoute, requestContext, filters,\n+                        createFilterContextRecursive(resolvedRoute, requestContext, resolvedRoute.filters, null));\n+        if (filterContext != null) {\n+            return filterContext.executeFirst();\n+        } else {\n+            return dispatchToRoute(resolvedRoute, requestContext);\n+        }\n+    }\n+\n+    @Override public ObjectMapper jacksonJsonMapper() { return jacksonJsonMapper; }\n+\n+    private HttpResponse dispatchToRoute(Route route, RequestContextImpl context) {\n+        RestApi.MethodHandler<?> resolvedHandler = route.handlerPerMethod.get(context.request().getMethod());\n+        if (resolvedHandler == null) {\n+            resolvedHandler = route.defaultHandler;\n+        }\n+        Object entity;\n+        try {\n+            entity = resolvedHandler.handleRequest(context);\n+        } catch (RuntimeException e) {\n+            ExceptionMapperHolder<?> mapper = exceptionMappers.stream()\n+                    .filter(holder -> holder.matches(e))\n+                    .findFirst().orElseThrow(() -> e);\n+            return mapper.toResponse(e, context);\n+        }\n+        if (entity == null) throw new NullPointerException(\"Handler must return non-null value\");\n+        ResponseMapperHolder<?> mapper = responseMappers.stream()\n+                .filter(holder -> holder.matches(entity))\n+                .findFirst().orElseThrow(() -> new IllegalStateException(\"No mapper configured for \" + entity.getClass()));\n+        return mapper.toHttpResponse(entity, context);\n+    }\n+\n+    private Route resolveRoute(Path pathMatcher) {\n+        Route matchingRoute = routes.stream()\n+                .filter(route -> pathMatcher.matches(route.pathPattern))\n+                .findFirst()\n+                .orElse(null);\n+        if (matchingRoute != null) return matchingRoute;\n+        pathMatcher.matches(defaultRoute.pathPattern); // to populate any path parameters\n+        return defaultRoute;\n+    }\n+\n+    private FilterContextImpl createFilterContextRecursive(\n+            Route route, RequestContextImpl requestContext, List<Filter> filters, FilterContextImpl previousContext) {\n+        FilterContextImpl filterContext = previousContext;\n+        ListIterator<Filter> iterator = filters.listIterator(filters.size());\n+        while (iterator.hasPrevious()) {\n+            filterContext = new FilterContextImpl(route, iterator.previous(), requestContext, filterContext);\n+        }\n+        return filterContext;\n+    }\n+\n+    private static Route createDefaultRoute() {\n+        RouteBuilder routeBuilder = new RouteBuilderImpl(\"{*}\")\n+                .defaultHandler(context -> {\n+                    throw new RestApiException.NotFoundException();\n+                });\n+        return ((RouteBuilderImpl)routeBuilder).build();\n+    }\n+\n+    private static List<ExceptionMapperHolder<?>> combineWithDefaultExceptionMappers(\n+            List<ExceptionMapperHolder<?>> configuredExceptionMappers, boolean disableDefaultMappers) {\n+        List<ExceptionMapperHolder<?>> exceptionMappers = new ArrayList<>(configuredExceptionMappers);\n+        if (!disableDefaultMappers){\n+            exceptionMappers.add(new ExceptionMapperHolder<>(RestApiException.class, (exception, context) -> exception.response()));\n+        }\n+        return exceptionMappers;\n+    }\n+\n+    private static List<ResponseMapperHolder<?>> combineWithDefaultResponseMappers(\n+            List<ResponseMapperHolder<?>> configuredResponseMappers, ObjectMapper jacksonJsonMapper, boolean disableDefaultMappers) {\n+        List<ResponseMapperHolder<?>> responseMappers = new ArrayList<>(configuredResponseMappers);\n+        if (!disableDefaultMappers) {\n+            responseMappers.add(new ResponseMapperHolder<>(HttpResponse.class, (entity, context) -> entity));\n+            responseMappers.add(new ResponseMapperHolder<>(String.class, (entity, context) -> new MessageResponse(entity)));\n+            responseMappers.add(new ResponseMapperHolder<>(Slime.class, (entity, context) -> new SlimeJsonResponse(entity)));\n+            responseMappers.add(new ResponseMapperHolder<>(JsonNode.class, (entity, context) -> new JacksonJsonResponse<>(200, entity, jacksonJsonMapper, true)));\n+            responseMappers.add(new ResponseMapperHolder<>(RestApi.JacksonResponseEntity.class, (entity, context) -> new JacksonJsonResponse<>(200, entity, jacksonJsonMapper, true)));\n+        }\n+        return responseMappers;\n+    }\n+\n+    static class BuilderImpl implements RestApi.Builder {\n+        private final List<Route> routes = new ArrayList<>();\n+        private final List<ExceptionMapperHolder<?>> exceptionMappers = new ArrayList<>();\n+        private final List<ResponseMapperHolder<?>> responseMappers = new ArrayList<>();\n+        private final List<RestApi.Filter> filters = new ArrayList<>();\n+        private Route defaultRoute;\n+        private ObjectMapper jacksonJsonMapper;\n+        private Boolean disableDefaultExceptionMappers;\n+        private Boolean disableDefaultResponseMappers;\n+\n+        @Override public RestApi.Builder setObjectMapper(ObjectMapper mapper) { this.jacksonJsonMapper = mapper; return this; }\n+        @Override public RestApi.Builder setDefaultRoute(RestApi.RouteBuilder route) { this.defaultRoute = ((RouteBuilderImpl)route).build(); return this; }\n+        @Override public RestApi.Builder addRoute(RestApi.RouteBuilder route) { routes.add(((RouteBuilderImpl)route).build()); return this; }\n+        @Override public RestApi.Builder addFilter(RestApi.Filter filter) { filters.add(filter); return this; }\n+\n+        @Override public <EXCEPTION extends RuntimeException> RestApi.Builder addExceptionMapper(Class<EXCEPTION> type, RestApi.ExceptionMapper<EXCEPTION> mapper) {\n+            exceptionMappers.add(new ExceptionMapperHolder<>(type, mapper)); return this;\n+        }\n+\n+        @Override public <ENTITY> RestApi.Builder addResponseMapper(Class<ENTITY> type, RestApi.ResponseMapper<ENTITY> mapper) {\n+            responseMappers.add(new ResponseMapperHolder<>(type, mapper)); return this;\n+        }\n+\n+        @Override public Builder disableDefaultExceptionMappers() { this.disableDefaultExceptionMappers = true; return this; }\n+        @Override public Builder disableDefaultResponseMappers() { this.disableDefaultResponseMappers = true; return this; }\n+        @Override public RestApi build() { return new RestApiImpl(this); }\n+    }\n+\n+    public static class RouteBuilderImpl implements RestApi.RouteBuilder {\n+        private final String pathPattern;\n+        private String name;\n+        private final Map<com.yahoo.jdisc.http.HttpRequest.Method, RestApi.MethodHandler<?>> handlerPerMethod = new HashMap<>();\n+        private final List<RestApi.Filter> filters = new ArrayList<>();\n+        private RestApi.MethodHandler<?> defaultHandler;\n+\n+        RouteBuilderImpl(String pathPattern) { this.pathPattern = pathPattern; }\n+\n+        @Override public RestApi.RouteBuilder name(String name) { this.name = name; return this; }\n+        @Override public RestApi.RouteBuilder get(RestApi.MethodHandler<?> handler) { return addHandler(com.yahoo.jdisc.http.HttpRequest.Method.GET, handler); }\n+        @Override public RestApi.RouteBuilder post(RestApi.MethodHandler<?> handler) { return addHandler(com.yahoo.jdisc.http.HttpRequest.Method.POST, handler); }\n+        @Override public RestApi.RouteBuilder put(RestApi.MethodHandler<?> handler) { return addHandler(com.yahoo.jdisc.http.HttpRequest.Method.PUT, handler); }\n+        @Override public RestApi.RouteBuilder delete(RestApi.MethodHandler<?> handler) { return addHandler(com.yahoo.jdisc.http.HttpRequest.Method.DELETE, handler); }\n+        @Override public RestApi.RouteBuilder patch(RestApi.MethodHandler<?> handler) { return addHandler(com.yahoo.jdisc.http.HttpRequest.Method.PATCH, handler); }\n+        @Override public RestApi.RouteBuilder defaultHandler(RestApi.MethodHandler<?> handler) { defaultHandler = handler; return this; }\n+        @Override public RestApi.RouteBuilder addFilter(RestApi.Filter filter) { filters.add(filter); return this; }\n+\n+        private RestApi.RouteBuilder addHandler(com.yahoo.jdisc.http.HttpRequest.Method method, RestApi.MethodHandler<?> handler) {\n+            handlerPerMethod.put(method, handler); return this;\n+        }\n+\n+        private Route build() { return new Route(this); }\n+    }\n+\n+    private static class RequestContextImpl implements RestApi.RequestContext {\n+        final HttpRequest request;\n+        final Path pathMatcher;\n+        final ObjectMapper jacksonJsonMapper;\n+        final PathParameters pathParameters = new PathParametersImpl();\n+        final QueryParameters queryParameters = new QueryParametersImpl();\n+        final Headers headers = new HeadersImpl();\n+        final Attributes attributes = new AttributesImpl();\n+        final RequestContent requestContent;\n+\n+        RequestContextImpl(HttpRequest request, Path pathMatcher, ObjectMapper jacksonJsonMapper) {\n+            this.request = request;\n+            this.pathMatcher = pathMatcher;\n+            this.jacksonJsonMapper = jacksonJsonMapper;\n+            this.requestContent = request.getData() != null ? new RequestContentImpl() : null;\n+        }\n+\n+        @Override public HttpRequest request() { return request; }\n+        @Override public PathParameters pathParameters() { return pathParameters; }\n+        @Override public QueryParameters queryParameters() { return queryParameters; }\n+        @Override public Headers headers() { return headers; }\n+        @Override public Attributes attributes() { return attributes; }\n+        @Override public Optional<RequestContent> requestContent() { return Optional.ofNullable(requestContent); }\n+\n+        private class PathParametersImpl implements RestApi.RequestContext.PathParameters {\n+            @Override public Optional<String> getString(String name) { return Optional.ofNullable(pathMatcher.get(name)); }\n+            @Override public String getStringOrThrow(String name) {\n+                return getString(name)\n+                        .orElseThrow(() -> new RestApiException.BadRequest(\"Path parameter '\" + name + \"' is missing\"));\n+            }\n+        }\n+\n+        private class QueryParametersImpl implements RestApi.RequestContext.QueryParameters {\n+            @Override public Optional<String> getString(String name) { return Optional.ofNullable(request.getProperty(name)); }\n+            @Override public String getStringOrThrow(String name) {\n+                return getString(name)\n+                        .orElseThrow(() -> new RestApiException.BadRequest(\"Query parameter '\" + name + \"' is missing\"));\n+            }\n+        }\n+\n+        private class HeadersImpl implements RestApi.RequestContext.Headers {\n+            @Override public Optional<String> getString(String name) { return Optional.ofNullable(request.getHeader(name)); }\n+            @Override public String getStringOrThrow(String name) {\n+                return getString(name)\n+                        .orElseThrow(() -> new RestApiException.BadRequest(\"Header '\" + name + \"' missing\"));\n+            }\n+        }\n+\n+        private class RequestContentImpl implements RestApi.RequestContext.RequestContent {\n+            @Override public String contentType() { return request.getHeader(\"Content-Type\"); }\n+            @Override public InputStream inputStream() { return request.getData(); }\n+            @Override public ObjectMapper jacksonJsonMapper() { return jacksonJsonMapper; }\n+        }\n+\n+        private class AttributesImpl implements RestApi.RequestContext.Attributes {\n+            @Override public Optional<Object> get(String name) { return Optional.ofNullable(request.getJDiscRequest().context().get(name)); }\n+            @Override public void set(String name, Object value) { request.getJDiscRequest().context().put(name, value); }\n+        }\n+    }\n+\n+    private class FilterContextImpl implements RestApi.FilterContext {\n+        final Route route;\n+        final RestApi.Filter filter;\n+        final RequestContextImpl requestContext;\n+        final FilterContextImpl next;\n+\n+        FilterContextImpl(Route route, RestApi.Filter filter, RequestContextImpl requestContext, FilterContextImpl next) {\n+            this.route = route;\n+            this.filter = filter;\n+            this.requestContext = requestContext;\n+            this.next = next;\n+        }\n+\n+        @Override public RestApi.RequestContext requestContext() { return requestContext; }\n+        @Override public String route() { return route.name != null ? route.name : route.pathPattern; }\n+\n+        HttpResponse executeFirst() { return filter.filterRequest(this); }\n+\n+        @Override\n+        public HttpResponse executeNext() {\n+            if (next != null) {\n+                return next.filter.filterRequest(next);\n+            } else {\n+                return dispatchToRoute(route, requestContext);\n+            }\n+        }\n+    }\n+\n+    private static class ExceptionMapperHolder<EXCEPTION extends RuntimeException> {\n+        final Class<EXCEPTION> type;\n+        final RestApi.ExceptionMapper<EXCEPTION> mapper;\n+\n+        ExceptionMapperHolder(Class<EXCEPTION> type, RestApi.ExceptionMapper<EXCEPTION> mapper) {\n+            this.type = type;\n+            this.mapper = mapper;\n+        }\n+\n+        boolean matches(RuntimeException e) { return type.isAssignableFrom(e.getClass()); }\n+        HttpResponse toResponse(RuntimeException e, RestApi.RequestContext context) { return mapper.toResponse(type.cast(e), context); }\n+    }\n+\n+    private static class ResponseMapperHolder<ENTITY> {\n+        final Class<ENTITY> type;\n+        final RestApi.ResponseMapper<ENTITY> mapper;\n+\n+        ResponseMapperHolder(Class<ENTITY> type, RestApi.ResponseMapper<ENTITY> mapper) {\n+            this.type = type;\n+            this.mapper = mapper;\n+        }\n+\n+        boolean matches(Object entity) { return type.isAssignableFrom(entity.getClass()); }\n+        HttpResponse toHttpResponse(Object entity, RestApi.RequestContext context) { return mapper.toHttpResponse(type.cast(entity), context); }\n+    }\n+\n+\n+    static class Route {\n+        private final String pathPattern;\n+        private final String name;\n+        private final Map<com.yahoo.jdisc.http.HttpRequest.Method, RestApi.MethodHandler<?>> handlerPerMethod;\n+        private final RestApi.MethodHandler<?> defaultHandler;\n+        private final List<Filter> filters;\n+\n+        private Route(RestApi.RouteBuilder builder) {\n+            RouteBuilderImpl builderImpl = (RouteBuilderImpl)builder;\n+            this.pathPattern = builderImpl.pathPattern;\n+            this.name = builderImpl.name;\n+            this.handlerPerMethod = Map.copyOf(builderImpl.handlerPerMethod);\n+            this.defaultHandler = builderImpl.defaultHandler != null ? builderImpl.defaultHandler : createDefaultMethodHandler();\n+            this.filters = List.copyOf(builderImpl.filters);\n+        }\n+\n+        private RestApi.MethodHandler<?> createDefaultMethodHandler() {\n+            return context -> { throw new RestApiException.MethodNotAllowed(context.request()); };\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "6a24fcf648c941a154115ae916a797c8d20d62aa",
    "filename": "container-core/src/main/java/com/yahoo/restapi/RestApiRequestHandler.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApiRequestHandler.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/main/java/com/yahoo/restapi/RestApiRequestHandler.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/main/java/com/yahoo/restapi/RestApiRequestHandler.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -0,0 +1,34 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.restapi;\n+\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.container.jdisc.LoggingRequestHandler;\n+\n+/**\n+ * @author bjorncs\n+ */\n+public abstract class RestApiRequestHandler<T extends RestApiRequestHandler<T>> extends LoggingRequestHandler {\n+\n+    private final RestApi restApi;\n+\n+    @FunctionalInterface public interface RestApiProvider<T> { RestApi createRestApi(T self); }\n+\n+    /**\n+     * RestApi will usually refer to handler methods of subclass, which are not accessible before super constructor has completed.\n+     * This is hack to leak reference to subclass instance's \"this\" reference.\n+     * Caller must ensure that provider instance does not try to access any uninitialized fields.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected RestApiRequestHandler(LoggingRequestHandler.Context context, RestApiProvider<T> provider) {\n+        super(context);\n+        this.restApi = provider.createRestApi((T)this);\n+    }\n+\n+    protected RestApiRequestHandler(LoggingRequestHandler.Context context, RestApi restApi) {\n+        super(context);\n+        this.restApi = restApi;\n+    }\n+\n+    @Override public final HttpResponse handle(HttpRequest request) { return restApi.handleRequest(request); }\n+}"
  },
  {
    "sha": "628c25b23dbd94bc6beca3dfbe6687554907d081",
    "filename": "container-core/src/test/java/com/yahoo/restapi/RestApiImplTest.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/vespa-engine/vespa/blob/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/test/java/com/yahoo/restapi/RestApiImplTest.java",
    "raw_url": "https://github.com/vespa-engine/vespa/raw/4c0868ab9c6e6cda84b8bdc1284632f79feb64da/container-core/src/test/java/com/yahoo/restapi/RestApiImplTest.java",
    "contents_url": "https://api.github.com/repos/vespa-engine/vespa/contents/container-core/src/test/java/com/yahoo/restapi/RestApiImplTest.java?ref=4c0868ab9c6e6cda84b8bdc1284632f79feb64da",
    "patch": "@@ -0,0 +1,133 @@\n+package com.yahoo.restapi;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.test.json.JsonTestHelper;\n+import com.yahoo.yolean.Exceptions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.yahoo.jdisc.http.HttpRequest.Method;\n+import static com.yahoo.restapi.RestApi.route;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * @author bjorncs\n+ */\n+class RestApiImplTest {\n+\n+    @Test\n+    void routes_requests_to_correct_handler() {\n+        RestApi restApi = RestApi.builder()\n+                .addRoute(route(\"/api1/{*}\").get(ctx -> new MessageResponse(\"get-method-response\")))\n+                .addRoute(route(\"/api2/{*}\").post(ctx -> new MessageResponse(\"post-method-response\")))\n+                .setDefaultRoute(route(\"{*}\").defaultHandler(ctx -> ErrorResponse.notFoundError(\"default-method-response\")))\n+                .build();\n+        verifyJsonResponse(restApi, Method.GET, \"/api1/subpath\", null, 200, \"{\\\"message\\\":\\\"get-method-response\\\"}\");\n+        verifyJsonResponse(restApi, Method.POST, \"/api1/subpath\", \"{}\", 405, null);\n+        verifyJsonResponse(restApi, Method.GET, \"/api2/subpath\", null, 405, null);\n+        verifyJsonResponse(restApi, Method.POST, \"/api2/subpath\", \"{}\", 200, \"{\\\"message\\\":\\\"post-method-response\\\"}\");\n+        verifyJsonResponse(restApi, Method.PUT, \"/api2/subpath\", \"{}\", 405, null);\n+        verifyJsonResponse(restApi, Method.GET, \"/unknown/subpath\", null, 404, \"{\\\"error-code\\\":\\\"NOT_FOUND\\\",\\\"message\\\":\\\"default-method-response\\\"}\");\n+        verifyJsonResponse(restApi, Method.DELETE, \"/unknown/subpath\", \"{}\", 404, \"{\\\"error-code\\\":\\\"NOT_FOUND\\\",\\\"message\\\":\\\"default-method-response\\\"}\");\n+    }\n+\n+    @Test\n+    void executes_filters_and_handler_in_correct_order() {\n+        List<String> actualEvaluationOrdering = new ArrayList<>();\n+        RestApi.MethodHandler<HttpResponse> handler = context -> {\n+            actualEvaluationOrdering.add(\"handler\");\n+            return new MessageResponse(\"get-method-response\");\n+        };\n+        class NamedTestFilter implements RestApi.Filter {\n+            final String name;\n+            NamedTestFilter(String name) { this.name = name; }\n+\n+            @Override\n+            public HttpResponse filterRequest(RestApi.FilterContext context) {\n+                actualEvaluationOrdering.add(\"pre-\" + name);\n+                HttpResponse response = context.executeNext();\n+                actualEvaluationOrdering.add(\"post-\" + name);\n+                return response;\n+            }\n+        }\n+        RestApi restApi = RestApi.builder()\n+                .setDefaultRoute(route(\"{*}\")\n+                        .defaultHandler(handler)\n+                        .addFilter(new NamedTestFilter(\"route-filter-1\"))\n+                        .addFilter(new NamedTestFilter(\"route-filter-2\")))\n+                .addFilter(new NamedTestFilter(\"global-filter-1\"))\n+                .addFilter(new NamedTestFilter(\"global-filter-2\"))\n+                .build();\n+        verifyJsonResponse(restApi, Method.GET, \"/\", null, 200, \"{\\\"message\\\":\\\"get-method-response\\\"}\");\n+        List<String> expectedOrdering = List.of(\n+                \"pre-global-filter-1\", \"pre-global-filter-2\", \"pre-route-filter-1\", \"pre-route-filter-2\",\n+                \"handler\",\n+                \"post-route-filter-2\", \"post-route-filter-1\", \"post-global-filter-2\", \"post-global-filter-1\");\n+        assertEquals(expectedOrdering, actualEvaluationOrdering);\n+    }\n+\n+    @SuppressWarnings(\"divzero\")\n+    @Test\n+    void handles_custom_response_and_exception_mapper() {\n+        RestApi restApi = RestApi.builder()\n+                .disableDefaultExceptionMappers()\n+                .disableDefaultResponseMappers()\n+                .addRoute(route(\"/long\").get(ctx -> 123456L))\n+                .addRoute(route(\"/exception\").get(ctx -> 123L / 0L))\n+                .addResponseMapper(Long.class, (entity, ctx) -> new MessageResponse(\"long value is \" + entity))\n+                .addExceptionMapper(ArithmeticException.class, (exception, ctx) -> ErrorResponse.internalServerError(\"oops division by zero\"))\n+                .build();\n+        verifyJsonResponse(restApi, Method.GET, \"/long\", null, 200, \"{\\\"message\\\":\\\"long value is 123456\\\"}\");\n+        verifyJsonResponse(restApi, Method.GET, \"/exception\", null, 500, \"{\\\"message\\\":\\\"oops division by zero\\\", \\\"error-code\\\":\\\"INTERNAL_SERVER_ERROR\\\"}\");\n+    }\n+\n+    @Test\n+    void method_handler_can_consume_and_produce_json() {\n+        RestApi restApi = RestApi.builder()\n+                .addRoute(route(\"/api\").post(\n+                        ctx -> {\n+                            try {\n+                                return ctx.requestContent().get().consumeJacksonEntity(TestEntity.class);\n+                            } catch (IOException e) {\n+                                throw new UncheckedIOException(e);\n+                            }\n+                        }))\n+                .build();\n+        String rawJson = \"{\\\"mystring\\\":\\\"my-string-value\\\", \\\"myinstant\\\":\\\"2000-01-01T00:00:00Z\\\"}\";\n+        verifyJsonResponse(restApi, Method.POST, \"/api\", rawJson, 200, rawJson);\n+    }\n+\n+    private static void verifyJsonResponse(RestApi restApi, Method method, String path, String requestContent, int expectedStatusCode, String expectedJson) {\n+        HttpRequest testRequest = requestContent != null ?\n+                HttpRequest.createTestRequest(\n+                        path, method,\n+                        new ByteArrayInputStream(requestContent.getBytes(StandardCharsets.UTF_8)),\n+                        Map.of(\"Content-Type\", \"application/json\")) :\n+                HttpRequest.createTestRequest(path, method);\n+        HttpResponse response = restApi.handleRequest(testRequest);\n+        assertEquals(expectedStatusCode, response.getStatus());\n+        if (expectedJson != null) {\n+            assertEquals(\"application/json\", response.getContentType());\n+            var outputStream = new ByteArrayOutputStream();\n+            Exceptions.uncheck(() -> response.render(outputStream));\n+            String content = outputStream.toString(StandardCharsets.UTF_8);\n+            JsonTestHelper.assertJsonEquals(content, expectedJson);\n+        }\n+    }\n+\n+    public static class TestEntity implements RestApi.JacksonRequestEntity, RestApi.JacksonResponseEntity {\n+        @JsonProperty(\"mystring\") public String stringValue;\n+        @JsonProperty(\"myinstant\") public Instant instantValue;\n+    }\n+}\n\\ No newline at end of file"
  }
]
