[
  {
    "sha": "0e1d922e08622e670ce8b02024c8481a6d31789e",
    "filename": "src/nick/sweeper/main/Grid.java",
    "status": "modified",
    "additions": 48,
    "deletions": 11,
    "changes": 59,
    "blob_url": "https://github.com/Nicholas-Baron/FreeSweeper/blob/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/Grid.java",
    "raw_url": "https://github.com/Nicholas-Baron/FreeSweeper/raw/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/Grid.java",
    "contents_url": "https://api.github.com/repos/Nicholas-Baron/FreeSweeper/contents/src/nick/sweeper/main/Grid.java?ref=42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a",
    "patch": "@@ -4,6 +4,7 @@\n import java.awt.Dimension;\n import java.awt.Font;\n import java.awt.Graphics;\n+import java.awt.image.BufferStrategy;\n \n import nick.sweeper.ai.AILogic;\n import nick.sweeper.main.Tile.Type;\n@@ -39,6 +40,8 @@\n \tprivate final MineSweeper\tgame;\n \n \tprivate Tile\t\t\t\thighlight;\n+\t\n+\tprivate BufferStrategy bs;\n \n \tpublic Grid(final int xSize, final int ySize, final int mines, final MineSweeper gameObj) {\n \n@@ -51,6 +54,7 @@ public Grid(final int xSize, final int ySize, final int mines, final MineSweeper\n \t\tnumMines = mines;\n \t\tgame = gameObj;\n \n+\t\t\n \t\tgrid = new Tile[sizeX][sizeY];\n \t\tinitGrid( );\n \t}\n@@ -71,11 +75,27 @@ private final void clearEmptyNeighbors(final Tile t) {\n \t\t}\n \t}\n \n-\tpublic void draw(final Graphics g) {\n+\tpublic void addGraphics(BufferStrategy bs) {\n+\t\tthis.bs = bs;\n+\t\t\n+\t\t// Needs to be called multiple times to fill the buffer\n+\t\t// Not quite perfect and doesn't work all the time\n+\t\tdraw();\n+\t\tdraw();\n+\t\tdraw();\n+\t}\n+\t\n+\tpublic void draw() {\n+\t\tGraphics g = bs.getDrawGraphics();\n+\t\tsetOffsets(game.getWidth( ) / 2, game.getHeight( ) / 2);\n+\t\tupdate( );\n+\t\t\n+\t\tg.setColor(Color.BLACK);\n+\t\tg.fillRect(0, 0, game.getWidth( ), game.getHeight( ));\n \n \t\tdrawTileGrid(g);\n \n-\t\tif (highlight != null) {\n+\t\tif (highlight != null && drawHighlight) {\n \t\t\t// Tile X and Y\n \t\t\tfinal int tX = highlight.getX( ) - 1;\n \t\t\tfinal int tY = highlight.getY( ) - 1;\n@@ -103,6 +123,11 @@ public void draw(final Graphics g) {\n \n \t\t\tg.setColor(Color.GREEN);\n \t\t\tg.drawString(win, rX, rY);\n+\t\t\t\n+\t\t\tg.dispose( );\n+\t\t\tbs.show( );\n+//\t\t\tgame.stop(false);\n+\t\t\tgame.restart();\n \t\t} else if (hitMine) {\n \t\t\tg.setFont(new Font(\"Courier New\", Font.BOLD, squareDrawSize));\n \t\t\tfinal String lose = \"Hit a Mine!\";\n@@ -116,7 +141,20 @@ public void draw(final Graphics g) {\n \n \t\t\tg.setColor(Color.RED);\n \t\t\tg.drawString(lose, rX, rY);\n+\t\t\t\n+\n+\t\t\tg.dispose( );\n+\t\t\tbs.show( );\n+//\t\t\tgame.stop(true);\n+\t\t\tgame.restart();\n \t\t}\n+\n+\t\tfinal String basePrint = MineSweeper.name+\" (\" + sizeX( ) + \", \" + sizeY( ) + \") | Flags Used: \" + flagsUsed( ) + \" | Mines: \" + numMines( ) + \" | \" + String.format(\"%.2f\", percentComplete( )) + \"% Complete | AI Engaged: \" + MineSweeper.getAI().isAlive( );\n+\t\t\n+\t\tgame.setTitle(basePrint);\n+\t\t\n+\t\tg.dispose( );\n+\t\tbs.show( );\n \t}\n \n \tprivate final void drawTileGrid(final Graphics g) {\n@@ -148,9 +186,13 @@ private void initGrid( ) {\n \t\tint minesToPlace = numMines;\n \t\tfor (int x = 0; x < sizeX; x++) {\n \t\t\tfor (int y = 0; y < sizeY; y++) {\n+\t\t\t\tif(x < 2 && y < 2) {\n+\t\t\t\t\tgrid[x][y] = new Tile(this, x, y, false);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n \t\t\t\tfinal int spotsLeft = (totalSquares( ) - y) - (x * sizeY);\n \n-\t\t\t\tfinal double chanceOfMine = (double) (minesToPlace) / spotsLeft;\n+\t\t\t\tfinal double chanceOfMine = (double) (minesToPlace) / (spotsLeft - 4);\n \t\t\t\tif (Math.random( ) <= chanceOfMine) {\n \t\t\t\t\tgrid[x][y] = new Tile(this, x, y, true);\n \t\t\t\t\tminesToPlace--;\n@@ -229,7 +271,6 @@ public void onClick(final int pX, final int pY, final boolean flag) {\n \t\tif (s != null) {\n \t\t\tonClick(s, flag);\n \t\t}\n-\n \t}\n \n \tpublic void onClick(final Tile s, final boolean flag) {\n@@ -264,6 +305,8 @@ public void onClick(final Tile s, final boolean flag) {\n \t\t}\n \n \t\tclearEmptyNeighbors(s);\n+\n+\t\tdraw();\n \t}\n \n \tpublic float percentComplete( ) {\n@@ -280,7 +323,6 @@ public float percentMines( ) {\n \t}\n \n \tpublic Dimension renderSize( ) {\n-\n \t\treturn new Dimension(sizeX * squareDrawSize, sizeY * squareDrawSize);\n \t}\n \n@@ -357,14 +399,9 @@ public void update( ) {\n \t\t\t\tsetHighLight(tileAt(tX, tY));\n \t\t\t}\n \t\t}\n-\t\tif (numKnown( ) == totalSquares( )) {\n+\t\tif (numKnown( ) == totalSquares( ) || numKnown() - flagsUsed() == totalSquares() - numMines()) {\n \t\t\tcompleted = true;\n \t\t}\n-\n-\t\tif (hitMine) {\n-\t\t\tgame.stop(true);\n-\t\t}\n-\n \t}\n \n }"
  },
  {
    "sha": "6ef608401f9a23f1b1329cc771f193a563f7e138",
    "filename": "src/nick/sweeper/main/Input.java",
    "status": "modified",
    "additions": 37,
    "deletions": 7,
    "changes": 44,
    "blob_url": "https://github.com/Nicholas-Baron/FreeSweeper/blob/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/Input.java",
    "raw_url": "https://github.com/Nicholas-Baron/FreeSweeper/raw/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/Input.java",
    "contents_url": "https://api.github.com/repos/Nicholas-Baron/FreeSweeper/contents/src/nick/sweeper/main/Input.java?ref=42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a",
    "patch": "@@ -6,6 +6,9 @@\n import java.awt.event.MouseListener;\n import java.awt.event.MouseMotionListener;\n \n+import nick.sweeper.ai.AILogic;\n+import radar.sweeper.draw.MousePath;\n+\n public class Input implements MouseListener, MouseMotionListener, KeyListener {\n \n \tprivate static int\t\tmX, mY;\n@@ -27,18 +30,30 @@ public static int mouseY( ) {\n \t\treturn mY;\n \t}\n \n-\tprivate final Grid g;\n-\n-\tpublic Input(final Grid g) {\n+\tprivate Grid g;\n+\t\n+\tprivate MousePath mousePath;\n+\t\n+\tpublic Input() {\n+\t}\n \n+\tpublic void setGrid(Grid g) {\n \t\tthis.g = g;\n \t}\n-\n+\t\n+\tpublic void setMousePath(MousePath mp) {\n+\t\tthis.mousePath = mp;\n+\t}\n+\t\n \t@Override\n \tpublic void keyPressed(final KeyEvent e) {\n \n \t\tif (e.getKeyCode( ) == KeyEvent.VK_A) {\n-\t\t\tMineSweeper.toggleAI( );\n+\t\t\tif(!MineSweeper.getAI().isAlive()) {\n+\t\t\t\tMineSweeper.getAI().start();\n+\t\t\t}else {\n+\t\t\t\tAILogic.halt();\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -55,7 +70,7 @@ public void keyTyped(final KeyEvent e) {\n \t@Override\n \tpublic void mouseClicked(final MouseEvent e) {\n \n-\t\tg.onClick(e.getX( ), e.getY( ), e.getButton( ) != MouseEvent.BUTTON1);\n+//\t\tg.onClick(e.getX( ), e.getY( ), e.getButton( ) != MouseEvent.BUTTON1);\n \n \t}\n \n@@ -81,11 +96,26 @@ public void mouseMoved(final MouseEvent e) {\n \n \t\tmX = e.getX( );\n \t\tmY = e.getY( );\n+\t\t\n+\t\tif(mousePath != null) {\n+\t\t\tmousePath.hoveredLocation(mX, mY);\n+\t\t}\n+\t\t\n+\t\tif(Grid.drawHighlight) {\n+\t\t\tg.draw();\n+\t\t}\n \t}\n \n \t@Override\n-\tpublic void mousePressed(final MouseEvent arg0) {\n+\tpublic void mousePressed(final MouseEvent e) {\n \n+\t\tif(e.getButton() == MouseEvent.BUTTON1) {\n+\t\t\tg.onClick(e.getX( ), e.getY( ), false);\n+\t\t\treturn;\n+\t\t}\n+\t\tif(e.getButton() == MouseEvent.BUTTON3) {\n+\t\t\tg.onClick(e.getX( ), e.getY( ), true);\n+\t\t}\n \t}\n \n \t@Override"
  },
  {
    "sha": "eb2dec75f651d618cffd1d82322cf8b0431d2466",
    "filename": "src/nick/sweeper/main/MineSweeper.java",
    "status": "modified",
    "additions": 109,
    "deletions": 93,
    "changes": 202,
    "blob_url": "https://github.com/Nicholas-Baron/FreeSweeper/blob/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/MineSweeper.java",
    "raw_url": "https://github.com/Nicholas-Baron/FreeSweeper/raw/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/MineSweeper.java",
    "contents_url": "https://api.github.com/repos/Nicholas-Baron/FreeSweeper/contents/src/nick/sweeper/main/MineSweeper.java?ref=42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a",
    "patch": "@@ -1,48 +1,77 @@\n package nick.sweeper.main;\n \n import java.awt.Canvas;\n-import java.awt.Graphics;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n import java.awt.image.BufferStrategy;\n \n import javax.swing.JFrame;\n \n import nick.sweeper.ai.AILogic;\n+import radar.sweeper.draw.MousePath;\n \n public final class MineSweeper extends Canvas implements Runnable {\n \n \tprivate static final long\t\t\tserialVersionUID\t= 1L;\n \n-\tpublic static final short\t\t\theight\t\t\t\t= 25, width = 25, numMines = 90;\n+//\tpublic static final short\t\t\theight\t\t\t\t= 26, width = 50, numMines = 250;\n+\tpublic static short\t\t\t\t\theight\t\t\t\t= 15, width = 15, numMines = 20;\n \n \tprivate static JFrame\t\t\t\tframe;\n \n \tprivate static Grid\t\t\t\t\tgrid;\n \n-\tprivate static final short\t\t\tmaxFPS\t\t\t\t= 240;\n+\tprivate static final Input\t\t\tinput\t\t\t\t= new Input();\n+\t\n+\tprivate MineSweeper\tgame;\n \n-\tprivate static boolean\t\t\t\tisRunning\t\t\t= true;\n+\tprivate Thread thread;\n \n-\tprivate static final MineSweeper\tgame\t\t\t\t= new MineSweeper( );\n-\n-\tprivate static final Thread\t\t\tthread\t\t\t\t= new Thread(game, \"Main Thread\");\n-\n-\tpublic static final String\t\t\tname\t\t\t\t= \"FreeSweeper v1.2c\";\n-\n-\tprivate static final Input\t\t\tinput\t\t\t\t= new Input(grid);\n+\tpublic static final String\t\t\tname\t\t\t\t= \"FreeSweeper v1.3a\";\n+\t\n+\tprivate BufferStrategy\t\t\t\tbs;\n \n \tpublic static final boolean\t\t\tdebug\t\t\t\t= false;\n \n \tprivate static AILogic\t\t\t\tai;\n-\n-\tprivate static boolean\t\t\t\taiEngage\t\t\t= false;\n+\t\n+\tprivate MousePath mousePath;\n \n \tpublic static AILogic getAI( ) {\n-\n \t\treturn ai;\n \t}\n \n+\t\n+\t/**\n+\t * @param args Valid arguments are <width> <height> <numMines> <outputFilename>\n+\t */\n \tpublic static void main(final String[ ] args) {\n \n+\t\tMineSweeper game;\n+\t\t\n+\t\tif(args.length > 0) {\n+\t\t\tif(args.length < 3) {\n+\t\t\t\tSystem.out.println(\"Please specify the width and height of the board in the number of spaces and the number of mines to place\");\n+\t\t\t}\n+\t\t\t\n+\t\t\twidth = (short) Integer.parseInt(args[0]);\n+\t\t\theight = (short) Integer.parseInt(args[1]);\n+\t\t\tnumMines = (short) Integer.parseInt(args[2]);\n+\t\t\t\n+\t\t\tif(args.length > 3) {\n+\t\t\t\tgame = new MineSweeper(args[3]);\n+\t\t\t}else {\n+\t\t\t\tgame = new MineSweeper();\n+\t\t\t}\n+\t\t}else {\n+\t\t\tgame = new MineSweeper();\n+\t\t}\n+\n+\n+\t\tThread thread = new Thread(game, \"Main Thread\");\n+\t\t\n+\t\tgame.addThread(thread);\n+\t\t\n \t\tframe = new JFrame( );\n \n \t\tframe.setResizable(true);\n@@ -52,9 +81,6 @@ public static void main(final String[ ] args) {\n \t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n \t\tframe.setMinimumSize(grid.renderSize( ));\n \n-\t\tframe.addMouseListener(input);\n-\t\tframe.addMouseMotionListener(input);\n-\n \t\tgame.addMouseListener(input);\n \t\tgame.addMouseMotionListener(input);\n \n@@ -63,39 +89,36 @@ public static void main(final String[ ] args) {\n \t\tframe.add(game);\n \t\tframe.pack( );\n \n+\t\tframe.addWindowListener(new WindowAdapter(){  \n+            public void windowClosing(WindowEvent e) {\n+            \tgame.fastStop();\n+                frame.dispose();\n+            }\n+        });\n+\t\t\n \t\tframe.setVisible(true);\n \t\tthread.start( );\n \t}\n \n-\tpublic static void toggleAI( ) {\n-\n-\t\taiEngage = !AILogic.isRunning( );\n+\tpublic void addThread(Thread thread) {\n+\t\tthis.thread = thread;\n \t}\n-\n-\tpublic MineSweeper( ) {\n-\n+\t\n+\tpublic MineSweeper() {\n \t\tgrid = new Grid(width, height, numMines, this);\n \t\tsetPreferredSize(grid.renderSize( ));\n-\n+\t\t\n+\t\tinput.setGrid(grid);\n+\t\t\n \t\tai = new AILogic(grid);\n \t}\n+\t\n+\tpublic MineSweeper(String outputFile) {\n+\t\tthis();\n \n-\tprivate void render( ) {\n-\n-\t\tfinal BufferStrategy bs = getBufferStrategy( );\n-\n-\t\tif (bs == null) {\n-\t\t\tcreateBufferStrategy(3);\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tfinal Graphics g = bs.getDrawGraphics( );\n+\t\tmousePath = new MousePath(grid, outputFile);\n \n-\t\tg.clearRect(0, 0, getWidth( ), getHeight( ));\n-\t\tgrid.draw(g);\n-\n-\t\tg.dispose( );\n-\t\tbs.show( );\n+\t\tinput.setMousePath(mousePath);\n \t}\n \n \tpublic int renderHeight( ) {\n@@ -107,63 +130,50 @@ public int renderWidth( ) {\n \n \t\treturn getWidth( );\n \t}\n-\n-\t@SuppressWarnings(\"unused\")\n+\t\n+\tpublic void setTitle(String title) {\n+\t\tframe.setTitle(title);\n+\t}\n+\t\n \t@Override\n-\tpublic void run( ) {\n-\n-\t\tSystem.out.printf(\"%.1f\", grid.percentMines( ));\n-\t\tSystem.out.println(\"% of the map is mined.\");\n-\n-\t\tfinal double delta = 1000.0 / 60, minFrameTime = 1000000000.0 / maxFPS;\n-\n-\t\tshort fps = 0, ups = 0;\n-\t\tlong lastUpdate = System.currentTimeMillis( ), lastPrint = System.currentTimeMillis( ),\n-\t\t\t\tlastFrameTime = System.nanoTime( );\n-\n-\t\twhile (isRunning) {\n-\n-\t\t\tif ((lastUpdate + delta) < System.currentTimeMillis( )) {\n-\t\t\t\t// System.out.println(\"Update\");\n-\t\t\t\tupdate( );\n-\t\t\t\tlastUpdate += delta;\n-\t\t\t\t++ups;\n-\t\t\t}\n-\n-\t\t\twhile ((lastFrameTime + minFrameTime) < System.nanoTime( )) {\n-\t\t\t\trender( );\n-\t\t\t\tlastFrameTime += minFrameTime;\n-\t\t\t\t++fps;\n-\t\t\t}\n-\n-\t\t\tif ((lastPrint + 1000) < System.currentTimeMillis( )) {\n-\n-\t\t\t\tfinal String basePrint = name + \" (\" + grid.sizeX( ) + \", \" + grid.sizeY( ) + \") | Flags Used: \" + grid.flagsUsed( ) + \" | Mines: \" + grid.numMines( ) + \" | \" + String.format(\"%.2f\", grid.percentComplete( )) + \"% Complete | AI Engaged: \" + ai.isAlive( );\n-\n-\t\t\t\tif (debug) {\n-\t\t\t\t\tframe.setTitle(basePrint + \" | UPS: \" + ups + \" | FPS: \" + fps);\n-\t\t\t\t} else {\n-\t\t\t\t\tframe.setTitle(basePrint);\n-\t\t\t\t}\n-\n-\t\t\t\tfps = 0;\n-\t\t\t\tups = 0;\n-\t\t\t\tlastPrint += 1000;\n-\t\t\t}\n+\tpublic void run() {\n+\t\tcreateBufferStrategy(2);\n+\t\tbs = getBufferStrategy( );\n+\t\t\n+\t\tgrid.addGraphics(bs);\n+\t}\n \n+\tpublic synchronized void fastStop() {\n+\t\tAILogic.halt();\n+\t\t\n+\t\tif(mousePath != null) {\n+\t\t\tmousePath.saveImg();\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\tai.join(1000);\n+\t\t\tthread.join();\n+\t\t} catch(Exception e) {\n+\t\t\tSystem.out.println(\"Error occured while closing\");\n \t\t}\n \t}\n-\n+\t\n \tpublic synchronized void stop(final boolean lost) {\n \n-\t\tisRunning = false;\n \t\tAILogic.halt( );\n+\t\t\n+\t\tif(mousePath != null) {\n+\t\t\tmousePath.saveImg();\n+\t\t}\n \n \t\tif (lost) {\n \t\t\tSystem.out.println(\"Hit a mine!\");\n+\t\t}else {\n+\t\t\tSystem.out.println(\"Won game!\");\n \t\t}\n \n \t\ttry {\n+\t\t\twait(2000);\n \t\t\tif (debug) {\n \t\t\t\twait( );\n \t\t\t}\n@@ -175,16 +185,22 @@ public synchronized void stop(final boolean lost) {\n \t\t}\n \t}\n \n-\tprivate void update( ) {\n-\n-\t\tgrid.setOffsets(getWidth( ) / 2, getHeight( ) / 2);\n-\t\tgrid.update( );\n-\n-\t\tif (aiEngage && !AILogic.isRunning( )) {\n-\t\t\tai.start( );\n-\t\t\taiEngage = false;\n+\tpublic synchronized void restart() {\n+\t\tif(mousePath != null) {\n+\t\t\tmousePath.saveImg();\n \t\t}\n-\n+\t\t\n+\t\ttry {\n+\t\t\twait(2000);\n+\t\t} catch(Exception e) {\n+\t\t\tSystem.out.println(\"Unable to wait to restart\");\n+\t\t}\n+\t\tgrid = new Grid(width, height, numMines, this);\n+\t\t\n+\t\tinput.setGrid(grid);\n+\t\t\n+\t\tai = new AILogic(grid);\n+\t\t\n+\t\tgrid.addGraphics(bs);\n \t}\n-\n }"
  },
  {
    "sha": "ae9d5b94e19db9b86441628845705e63dac0d066",
    "filename": "src/nick/sweeper/main/Tile.java",
    "status": "modified",
    "additions": 23,
    "deletions": 3,
    "changes": 26,
    "blob_url": "https://github.com/Nicholas-Baron/FreeSweeper/blob/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/Tile.java",
    "raw_url": "https://github.com/Nicholas-Baron/FreeSweeper/raw/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/nick/sweeper/main/Tile.java",
    "contents_url": "https://api.github.com/repos/Nicholas-Baron/FreeSweeper/contents/src/nick/sweeper/main/Tile.java?ref=42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a",
    "patch": "@@ -116,20 +116,40 @@ public void render(final Graphics g, final int pX, final int pY, final short siz\n \t\t\t}\n \n \t\t} else if (getType( ) == Tile.Type.EMPTY) {\n-\n-\t\t\tg.setColor(Color.GRAY);\n+\t\t\tg.setColor(Color.LIGHT_GRAY);\n \t\t\tg.fillRect(pX, pY, size, size);\n \t\t} else if (getType( ) == Tile.Type.NUMBER) {\n \n \t\t\tg.setColor(Color.LIGHT_GRAY);\n \t\t\tg.fillRect(pX, pY, size, size);\n \n-\t\t\tg.setColor(Color.BLUE);\n+\t\t\tswitch(numMineNeighbors) {\n+\t\t\tcase 1:\n+\t\t\t\tg.setColor(Color.BLUE);\n+\t\t\t\tbreak;\n+\t\t\tcase 2:\n+\t\t\t\tg.setColor(new Color(36, 142, 60));\n+\t\t\t\tbreak;\n+\t\t\tcase 3:\n+\t\t\t\tg.setColor(new Color(211, 47, 47));\n+\t\t\t\tbreak;\n+\t\t\tcase 4:\n+\t\t\t\tg.setColor(new Color(123, 31, 162));\n+\t\t\t\tbreak;\n+\t\t\tcase 5:\n+\t\t\t\tg.setColor(Color.ORANGE);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tg.setColor(Color.CYAN);\n+\t\t\t}\n \t\t\tString txt = getDisplayNum( );\n \t\t\tfinal int stringMidHigh = g.getFontMetrics( ).getHeight( ) / 2;\n \t\t\tfinal int stringMidWide = g.getFontMetrics( ).stringWidth(txt) / 2;\n \t\t\tfinal short squareMid = (short) (size / 2);\n \t\t\tg.drawString(txt, (pX - stringMidWide) + squareMid, pY + stringMidHigh + squareMid);\n+\t\t}else if(getType() == Tile.Type.MINE) {\n+\t\t\tg.setColor(Color.RED);\n+\t\t\tg.fillRect(pX, pY, size, size);\n \t\t}\n \t}\n "
  },
  {
    "sha": "0eaa20230afd734c4036bf68a75527c34823aa85",
    "filename": "src/radar/sweeper/draw/MousePath.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/Nicholas-Baron/FreeSweeper/blob/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/radar/sweeper/draw/MousePath.java",
    "raw_url": "https://github.com/Nicholas-Baron/FreeSweeper/raw/42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a/src/radar/sweeper/draw/MousePath.java",
    "contents_url": "https://api.github.com/repos/Nicholas-Baron/FreeSweeper/contents/src/radar/sweeper/draw/MousePath.java?ref=42dd240e7007afaca6ab8e8c18d6ad8490a6ad6a",
    "patch": "@@ -0,0 +1,55 @@\n+package radar.sweeper.draw;\n+\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+\n+import nick.sweeper.main.Grid;\n+\n+/**\n+ * @author Radar\n+ * A class to plot the path of your cursor as you play minesweeper\n+ */\n+public class MousePath {\n+\tprivate BufferedImage img;\n+\tprivate String outFile;\n+\t\n+\t/**\n+\t * Function to tell the canvas that the mouse has hovered a point\n+\t * @param x The x position of the cursor\n+\t * @param y The y position of the cursor\n+\t */\n+\tpublic void hoveredLocation(int x, int y) {\n+\t\tif(x < 0 || y < 0 || x >= img.getWidth() || y >= img.getHeight()) {\n+\t\t\treturn;\n+\t\t}\n+\t\timg.setRGB(x, y, Color.WHITE.getRGB());\n+\t}\n+\t\n+\t/**\n+\t * Creates a new mouse path tracker\n+\t * @param grid The grid for the minesweeper game\n+\t */\n+\tpublic MousePath(Grid grid, String outFile) {\n+\t\timg = new BufferedImage(grid.renderSize().width, grid.renderSize().height, BufferedImage.TYPE_INT_RGB);\n+\t\tthis.outFile = outFile;\n+\t}\n+\t\n+\t/**\n+\t * Function to save the mouse path into an image file\n+\t * @param filename The name of the file to save the output to without extension (png is used)\n+\t */\n+\tpublic void saveImg() {\n+\t\tFile file = new File(outFile + \".png\");\n+\t\t\n+\t\ttry {\n+\t\t\tImageIO.write(img, \"png\", file);\n+\t\t} catch (IOException e) {\n+\t\t\tSystem.out.println(\"Unable to save image\");\n+\t\t}\n+\t\tSystem.out.println(\"Saved image as \"+outFile+\".png\");\n+\t}\n+}"
  }
]
