[
  {
    "sha": "1da3141cf72e8bab2c8ef738f7d1e60f5f66f052",
    "filename": "frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java",
    "status": "modified",
    "additions": 31,
    "deletions": 24,
    "changes": 55,
    "blob_url": "https://github.com/pytorch/serve/blob/849dec55b687c16a9b029745b6386c8196a6eb63/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java",
    "raw_url": "https://github.com/pytorch/serve/raw/849dec55b687c16a9b029745b6386c8196a6eb63/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java",
    "contents_url": "https://api.github.com/repos/pytorch/serve/contents/frontend/modelarchive/src/main/java/org/pytorch/serve/archive/ModelArchive.java?ref=849dec55b687c16a9b029745b6386c8196a6eb63",
    "patch": "@@ -12,6 +12,8 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.FileAlreadyExistsException;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.security.DigestInputStream;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n@@ -49,41 +51,46 @@ public ModelArchive(Manifest manifest, String url, File modelDir, boolean extrac\n     public static ModelArchive downloadModel(\n             List<String> allowedUrls, String modelStore, String url)\n             throws ModelException, FileAlreadyExistsException, IOException {\n+        Path localModelPath = Paths.get(url);\n+        if (Files.exists(localModelPath)) {\n+            return loadModelFromLocal(localModelPath, url);\n+        }\n \n+        if (url.contains(\"..\")) {\n+            throw new ModelNotFoundException(\"Relative path is not allowed in url: \" + url);\n+        }\n+        if (!checkAllowedUrl(allowedUrls, url)) {\n+            throw new ModelNotFoundException(\"Url does not match allowed URLs: \" + url);\n+        }\n         if (modelStore == null) {\n             throw new ModelNotFoundException(\"Model store has not been configured.\");\n         }\n-\n         String marFileName = FilenameUtils.getName(url);\n         File modelLocation = new File(modelStore, marFileName);\n-        if (checkAllowedUrl(allowedUrls, url)) {\n-            if (modelLocation.exists()) {\n-                throw new FileAlreadyExistsException(marFileName);\n-            }\n-            try {\n-                FileUtils.copyURLToFile(new URL(url), modelLocation);\n-            } catch (IOException e) {\n-                FileUtils.deleteQuietly(modelLocation);\n-                throw new DownloadModelException(\"Failed to download model from: \" + url, e);\n-            }\n+        if (modelLocation.exists()) {\n+            throw new FileAlreadyExistsException(marFileName);\n         }\n-\n-        if (url.contains(\"..\")) {\n-            throw new ModelNotFoundException(\"Relative path is not allowed in url: \" + url);\n+        try {\n+            FileUtils.copyURLToFile(new URL(url), modelLocation);\n+        } catch (IOException e) {\n+            FileUtils.deleteQuietly(modelLocation);\n+            throw new DownloadModelException(\"Failed to download model from: \" + url, e);\n         }\n+        return loadModelFromLocal(modelLocation.toPath(), url);\n+    }\n \n-        if (modelLocation.isFile()) {\n-            try (InputStream is = Files.newInputStream(modelLocation.toPath())) {\n-                File unzipDir = unzip(is, null);\n-                return load(url, unzipDir, true);\n-            }\n+    public static ModelArchive loadModelFromLocal(Path path, String url)\n+            throws ModelException, FileAlreadyExistsException, IOException {\n+        if (!Files.exists(path)) {\n+            throw new ModelNotFoundException(\"Model path does not exist: \" + path.toString());\n         }\n-\n-        if (new File(url).isDirectory()) {\n-            return load(url, new File(url), false);\n+        if (Files.isDirectory(path)) {\n+            return load(url, path.toFile(), false);\n+        }\n+        try (InputStream is = Files.newInputStream(path)) {\n+            File unzipDir = unzip(is, null);\n+            return load(url, unzipDir, true);\n         }\n-\n-        throw new ModelNotFoundException(\"Model not found at: \" + url);\n     }\n \n     public static boolean checkAllowedUrl(List<String> allowedUrls, String url)"
  },
  {
    "sha": "dce8c43605407ac731841236480e0392344e5efd",
    "filename": "frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java",
    "status": "modified",
    "additions": 26,
    "deletions": 2,
    "changes": 28,
    "blob_url": "https://github.com/pytorch/serve/blob/849dec55b687c16a9b029745b6386c8196a6eb63/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java",
    "raw_url": "https://github.com/pytorch/serve/raw/849dec55b687c16a9b029745b6386c8196a6eb63/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java",
    "contents_url": "https://api.github.com/repos/pytorch/serve/contents/frontend/modelarchive/src/test/java/org/pytorch/serve/archive/ModelArchiveTest.java?ref=849dec55b687c16a9b029745b6386c8196a6eb63",
    "patch": "@@ -80,7 +80,7 @@ public void testBlockedUrl() throws ModelException, IOException {\n     }\n \n     @Test\n-    public void testLocalFile() throws ModelException, IOException, InterruptedException {\n+    public void testFileUrl() throws ModelException, IOException, InterruptedException {\n         String modelStore = \"src/test/resources/models\";\n         String curDir = System.getProperty(\"user.dir\");\n         File curDirFile = new File(curDir);\n@@ -103,6 +103,30 @@ public void testLocalFile() throws ModelException, IOException, InterruptedExcep\n         FileUtils.deleteQuietly(destinationFile);\n     }\n \n+    @Test\n+    public void testLocalFile() throws ModelException, IOException, InterruptedException {\n+        String modelStore = \"src/test/resources/models\";\n+        String curDir = System.getProperty(\"user.dir\");\n+        File curDirFile = new File(curDir);\n+        String parent = curDirFile.getParent();\n+\n+        // Setup: This test needs mar file in local path. Copying mnist.mar from model folder.\n+        String source = modelStore + \"/mnist.mar\";\n+        String destination = parent + \"/modelarchive/mnist1.mar\";\n+        File sourceFile = new File(source);\n+        File destinationFile = new File(destination);\n+        FileUtils.copyFile(sourceFile, destinationFile);\n+\n+        String fileUrl = parent + \"/modelarchive/mnist1.mar\";\n+        ModelArchive archive = ModelArchive.downloadModel(ALLOWED_URLS_LIST, modelStore, fileUrl);\n+\n+        File modelLocation = new File(modelStore + \"/mnist1.mar\");\n+        Assert.assertTrue(modelLocation.exists());\n+        ModelArchive.removeModel(modelStore, fileUrl);\n+        Assert.assertTrue(!new File(modelStore, \"mnist1\").exists());\n+        FileUtils.deleteQuietly(destinationFile);\n+    }\n+\n     @Test\n     public void archiveTest() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n@@ -173,7 +197,7 @@ public void testNullModelstore() throws ModelException, IOException {\n \n     @Test(\n             expectedExceptions = ModelNotFoundException.class,\n-            expectedExceptionsMessageRegExp = \"Model not found at: noop1.mar\")\n+            expectedExceptionsMessageRegExp = \"Url does not match allowed URLs: noop1.mar\")\n     public void testMarFileNotexist() throws ModelException, IOException {\n         String modelStore = \"src/test/resources/models\";\n         ModelArchive.downloadModel(ALLOWED_URLS_LIST, modelStore, \"noop1.mar\");"
  }
]
