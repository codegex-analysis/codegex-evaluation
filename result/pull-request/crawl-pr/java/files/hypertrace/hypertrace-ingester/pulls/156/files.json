[
  {
    "sha": "e319dcb93209202ea5e16f88b06a0c247cf269b7",
    "filename": "hypertrace-trace-enricher/hypertrace-trace-enricher-impl/src/main/java/org/hypertrace/traceenricher/enrichment/enrichers/resolver/backend/RabbitMqBackendResolver.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/hypertrace-trace-enricher/hypertrace-trace-enricher-impl/src/main/java/org/hypertrace/traceenricher/enrichment/enrichers/resolver/backend/RabbitMqBackendResolver.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/hypertrace-trace-enricher/hypertrace-trace-enricher-impl/src/main/java/org/hypertrace/traceenricher/enrichment/enrichers/resolver/backend/RabbitMqBackendResolver.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/hypertrace-trace-enricher/hypertrace-trace-enricher-impl/src/main/java/org/hypertrace/traceenricher/enrichment/enrichers/resolver/backend/RabbitMqBackendResolver.java?ref=3bbf5e3cb76ce6b49efead76048b3aea763f9a87",
    "patch": "@@ -46,7 +46,7 @@\n             enrichedAttributes.put(\n                 BACKEND_OPERATION_ATTR, AttributeValueCreator.create(operation)));\n     Optional<String> rabbitmqDestination =\n-        MessagingSemanticConventionUtils.getMessagingDestinationFroRabbitmq(event);\n+        MessagingSemanticConventionUtils.getMessagingDestinationForRabbitmq(event);\n     rabbitmqDestination.ifPresent(\n         destination ->\n             enrichedAttributes.put("
  },
  {
    "sha": "f46c4f3c60a09109ca6d1346b5909b4bf915f541",
    "filename": "semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtils.java",
    "status": "modified",
    "additions": 20,
    "deletions": 20,
    "changes": 40,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtils.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtils.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtils.java?ref=3bbf5e3cb76ce6b49efead76048b3aea763f9a87",
    "patch": "@@ -102,26 +102,6 @@ public static boolean isMongoBackend(Event event) {\n     return Lists.newArrayList(Sets.newHashSet(OTHER_MONGO_NAMESPACE, OTEL_MONGO_COLLECTION));\n   }\n \n-  public static List<String> getAttributeKeysForDbOperation() {\n-    return Lists.newArrayList(Sets.newHashSet(OTEL_DB_OPERATION));\n-  }\n-\n-  public static List<String> getAttributeKeysForDbStatement() {\n-    return Lists.newArrayList(Sets.newHashSet(OTEL_DB_STATEMENT));\n-  }\n-\n-  public static List<String> getAttributeKeysForDbName() {\n-    return Lists.newArrayList(Sets.newHashSet(OTEL_DB_NAME));\n-  }\n-\n-  public static List<String> getAttributeKeysForSqlTableName() {\n-    return Lists.newArrayList(Sets.newHashSet(SQL_TABLE_NAME));\n-  }\n-\n-  public static List<String> getAttributeKeysForRedisTableIndex() {\n-    return Lists.newArrayList(Sets.newHashSet(OTEL_REDIS_DB_INDEX));\n-  }\n-\n   public static Optional<String> getDbOperationForJDBC(Event event) {\n     Optional<String> jdbcOperation = getOtelDbOperation(event);\n     if (jdbcOperation.isPresent()) {\n@@ -322,6 +302,26 @@ static boolean isValidURI(String uri) {\n     return true;\n   }\n \n+  private static List<String> getAttributeKeysForDbOperation() {\n+    return Lists.newArrayList(Sets.newHashSet(OTEL_DB_OPERATION));\n+  }\n+\n+  private static List<String> getAttributeKeysForDbStatement() {\n+    return Lists.newArrayList(Sets.newHashSet(OTEL_DB_STATEMENT));\n+  }\n+\n+  private static List<String> getAttributeKeysForDbName() {\n+    return Lists.newArrayList(Sets.newHashSet(OTEL_DB_NAME));\n+  }\n+\n+  private static List<String> getAttributeKeysForSqlTableName() {\n+    return Lists.newArrayList(Sets.newHashSet(SQL_TABLE_NAME));\n+  }\n+\n+  private static List<String> getAttributeKeysForRedisTableIndex() {\n+    return Lists.newArrayList(Sets.newHashSet(OTEL_REDIS_DB_INDEX));\n+  }\n+\n   private static String getOperationFromDbQuery(String query) {\n     return StringUtils.substringBefore(StringUtils.trim(query), \" \");\n   }"
  },
  {
    "sha": "59dfb075f5d105bc8b1d0d46d9e3338c8d8a8196",
    "filename": "semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtils.java",
    "status": "modified",
    "additions": 17,
    "deletions": 17,
    "changes": 34,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtils.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtils.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/semantic-convention-utils/src/main/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtils.java?ref=3bbf5e3cb76ce6b49efead76048b3aea763f9a87",
    "patch": "@@ -111,22 +111,6 @@ public static boolean isKafkaBackend(Event event) {\n     return false;\n   }\n \n-  public static List<String> getAttributeKeysForMessagingOperation() {\n-    return Lists.newArrayList(Sets.newHashSet(MESSAGING_OPERATION));\n-  }\n-\n-  public static List<String> getAttributeKeysForMessagingDestination() {\n-    return Lists.newArrayList(Sets.newHashSet(OTEL_MESSAGING_DESTINATION));\n-  }\n-\n-  public static List<String> getAttributeKeysForKafkaConsumerGroup() {\n-    return Lists.newArrayList(Sets.newHashSet(KAFKA_CONSUMER_GROUP));\n-  }\n-\n-  public static List<String> getAttributeKeysForRabbitmqCommand() {\n-    return Lists.newArrayList(Sets.newHashSet(RABBITMQ_COMMAND_VALUE));\n-  }\n-\n   public static Optional<String> getMessagingOperation(Event event) {\n     return Optional.ofNullable(\n         SpanAttributeUtils.getFirstAvailableStringAttribute(\n@@ -144,7 +128,7 @@ public static boolean isKafkaBackend(Event event) {\n     return getMessagingDestinationWithAdditionalInfo(event, kafkaConsumerGroup);\n   }\n \n-  public static Optional<String> getMessagingDestinationFroRabbitmq(Event event) {\n+  public static Optional<String> getMessagingDestinationForRabbitmq(Event event) {\n     Optional<String> rabbitmqRoutingKey = getRabbitMqRoutingKey(event);\n     return getMessagingDestinationWithAdditionalInfo(event, rabbitmqRoutingKey);\n   }\n@@ -208,6 +192,22 @@ public static boolean isSqsBackend(Event event) {\n     return false;\n   }\n \n+  private static List<String> getAttributeKeysForMessagingOperation() {\n+    return Lists.newArrayList(Sets.newHashSet(MESSAGING_OPERATION));\n+  }\n+\n+  private static List<String> getAttributeKeysForMessagingDestination() {\n+    return Lists.newArrayList(Sets.newHashSet(OTEL_MESSAGING_DESTINATION));\n+  }\n+\n+  private static List<String> getAttributeKeysForKafkaConsumerGroup() {\n+    return Lists.newArrayList(Sets.newHashSet(KAFKA_CONSUMER_GROUP));\n+  }\n+\n+  private static List<String> getAttributeKeysForRabbitmqCommand() {\n+    return Lists.newArrayList(Sets.newHashSet(RABBITMQ_COMMAND_VALUE));\n+  }\n+\n   private static Optional<String> getKafkaConsumerGroupName(Event event) {\n     return Optional.ofNullable(\n         SpanAttributeUtils.getFirstAvailableStringAttribute("
  },
  {
    "sha": "7adc2dce18bc49676f800695bd7bbe27e59fabf9",
    "filename": "semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtilsTest.java",
    "status": "modified",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtilsTest.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtilsTest.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/db/DbSemanticConventionUtilsTest.java?ref=3bbf5e3cb76ce6b49efead76048b3aea763f9a87",
    "patch": "@@ -90,6 +90,46 @@ public void testGetMongoURI() {\n     assertEquals(\"mongo:27017\", v.get());\n   }\n \n+  @Test\n+  public void testGetMongoOperation() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                RawSpanConstants.getValue(Mongo.MONGO_OPERATION),\n+                SemanticConventionTestUtil.buildAttributeValue(\"find\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = DbSemanticConventionUtils.getDbOperationForMongo(e);\n+    assertEquals(\"find\", v.get());\n+  }\n+\n+  @Test\n+  public void testGetMongoDestination() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OTelDbSemanticConventions.MONGODB_COLLECTION.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"testCollection\"),\n+                OTelDbSemanticConventions.DB_NAME.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"customer\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = DbSemanticConventionUtils.getDestinationForMongo(e);\n+    assertEquals(\"customer.testCollection\", v.get());\n+  }\n+\n+  @Test\n+  public void testIfMongoOperationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(DbSemanticConventionUtils.getDbOperationForMongo(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testIfMongoDestinationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(DbSemanticConventionUtils.getDestinationForMongo(e).isEmpty());\n+  }\n+\n   @Test\n   public void isRedisBackend() {\n     Event e = mock(Event.class);\n@@ -142,6 +182,44 @@ public void testGetRedisURI() {\n     assertEquals(\"127.0.0.1:4562\", v.get());\n   }\n \n+  @Test\n+  public void testGetRedisOperation() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                RawSpanConstants.getValue(Redis.REDIS_COMMAND),\n+                SemanticConventionTestUtil.buildAttributeValue(\"GET\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = DbSemanticConventionUtils.getDbOperationForRedis(e);\n+    assertEquals(\"GET\", v.get());\n+  }\n+\n+  @Test\n+  public void testGetRedisDestination() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OTelDbSemanticConventions.REDIS_DB_INDEX.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"15\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = DbSemanticConventionUtils.getDestinationForRedis(e);\n+    assertEquals(\"15\", v.get());\n+  }\n+\n+  @Test\n+  public void testIfRedisOperationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(DbSemanticConventionUtils.getDbOperationForRedis(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testIfRedisDestinationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(DbSemanticConventionUtils.getDestinationForRedis(e).isEmpty());\n+  }\n+\n   @Test\n   public void testIsSqlBackend() {\n     Event e = mock(Event.class);\n@@ -253,6 +331,46 @@ public void testGetSqlUrlForOtelFormat() {\n     assertEquals(\"127.0.0.1\", v.get());\n   }\n \n+  @Test\n+  public void testGetSqlOperation() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                RawSpanConstants.getValue(Sql.SQL_QUERY),\n+                SemanticConventionTestUtil.buildAttributeValue(\"SELECT * FROM DB\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = DbSemanticConventionUtils.getDbOperationForJDBC(e);\n+    assertEquals(\"SELECT\", v.get());\n+  }\n+\n+  @Test\n+  public void testGetSqlDestination() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OTelDbSemanticConventions.SQL_TABLE_NAME.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"payment\"),\n+                OTelDbSemanticConventions.DB_NAME.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"customer\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = DbSemanticConventionUtils.getDestinationForJdbc(e);\n+    assertEquals(\"customer.payment\", v.get());\n+  }\n+\n+  @Test\n+  public void testIfSqlOperationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(DbSemanticConventionUtils.getDbOperationForJDBC(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testIfsqlDestinationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(DbSemanticConventionUtils.getDestinationForJdbc(e).isEmpty());\n+  }\n+\n   @Test\n   public void testGetBackendURIForOtelFormat() {\n     Event e = mock(Event.class);"
  },
  {
    "sha": "024f0618a9b78de812be9f2e5d165bb99ab83408",
    "filename": "semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtilsTest.java",
    "status": "added",
    "additions": 203,
    "deletions": 0,
    "changes": 203,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtilsTest.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtilsTest.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/MessagingSemanticConventionUtilsTest.java?ref=3bbf5e3cb76ce6b49efead76048b3aea763f9a87",
    "patch": "@@ -0,0 +1,203 @@\n+package org.hypertrace.semantic.convention.utils.messaging;\n+\n+import static org.hypertrace.semantic.convention.utils.SemanticConventionTestUtil.buildAttributeValue;\n+import static org.hypertrace.semantic.convention.utils.SemanticConventionTestUtil.buildAttributes;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import org.hypertrace.core.datamodel.Attributes;\n+import org.hypertrace.core.datamodel.Event;\n+import org.hypertrace.core.semantic.convention.constants.messaging.OtelMessagingSemanticConventions;\n+import org.hypertrace.core.span.constants.RawSpanConstants;\n+import org.hypertrace.core.span.constants.v1.RabbitMq;\n+import org.hypertrace.semantic.convention.utils.SemanticConventionTestUtil;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/** Unit test for {@link OtelMessagingSemanticConventions} */\n+public class MessagingSemanticConventionUtilsTest {\n+\n+  @Test\n+  public void testGetRabbitMqRoutingKey() {\n+    Event e = mock(Event.class);\n+    // otel format\n+    String routingKey = \"otelRoutingKey\";\n+    Attributes attributes =\n+        buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.RABBITMQ_ROUTING_KEY.getValue(),\n+                buildAttributeValue(routingKey)));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = MessagingSemanticConventionUtils.getRabbitMqRoutingKey(e);\n+    assertEquals(routingKey, v.get());\n+\n+    // other format\n+    routingKey = \"otherRoutingKey\";\n+    attributes =\n+        buildAttributes(\n+            Map.of(\n+                RawSpanConstants.getValue(RabbitMq.RABBIT_MQ_ROUTING_KEY),\n+                buildAttributeValue(routingKey)));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    v = MessagingSemanticConventionUtils.getRabbitMqRoutingKey(e);\n+    assertEquals(routingKey, v.get());\n+\n+    // routing key absent\n+    attributes = buildAttributes(Map.of(\"span.kind\", buildAttributeValue(\"client\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    v = MessagingSemanticConventionUtils.getRabbitMqRoutingKey(e);\n+    assertTrue(v.isEmpty());\n+  }\n+\n+  @Test\n+  public void testIsRabbitMqBackend() {\n+    Event e = mock(Event.class);\n+    // otel format\n+    String routingKey = \"otelRoutingKey\";\n+    Attributes attributes =\n+        buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.RABBITMQ_ROUTING_KEY.getValue(),\n+                buildAttributeValue(routingKey)));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    boolean v = MessagingSemanticConventionUtils.isRabbitMqBackend(e);\n+    assertTrue(v);\n+    // other format\n+    routingKey = \"otherRoutingKey\";\n+    attributes =\n+        buildAttributes(\n+            Map.of(\n+                RawSpanConstants.getValue(RabbitMq.RABBIT_MQ_ROUTING_KEY),\n+                buildAttributeValue(routingKey)));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    v = MessagingSemanticConventionUtils.isRabbitMqBackend(e);\n+    assertTrue(v);\n+    // not present\n+    attributes = buildAttributes(Map.of());\n+    when(e.getAttributes()).thenReturn(attributes);\n+    v = MessagingSemanticConventionUtils.isRabbitMqBackend(e);\n+    Assertions.assertFalse(v);\n+  }\n+\n+  @Test\n+  public void testGetRabbitmqDestination() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.MESSAGING_DESTINATION.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"queueName\"),\n+                OtelMessagingSemanticConventions.RABBITMQ_ROUTING_KEY.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"test-key\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = MessagingSemanticConventionUtils.getMessagingDestinationForRabbitmq(e);\n+    assertEquals(\"test-key.queueName\", v.get());\n+  }\n+\n+  @Test\n+  public void testGetRabbitmqOperation() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.MESSAGING_OPERATION.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"publish\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = MessagingSemanticConventionUtils.getMessagingOperation(e);\n+    assertEquals(\"publish\", v.get());\n+  }\n+\n+  @Test\n+  public void testIfRabbitmqOperationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(MessagingSemanticConventionUtils.getMessagingOperation(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testIfRabbitmqDestinationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(MessagingSemanticConventionUtils.getMessagingDestinationForRabbitmq(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testGetKafkaDestination() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.MESSAGING_DESTINATION.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"queueName\"),\n+                OtelMessagingSemanticConventions.MESSAGING_KAFKA_CONSUMER_GROUP.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"test\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = MessagingSemanticConventionUtils.getMessagingDestinationForKafka(e);\n+    assertEquals(\"test.queueName\", v.get());\n+  }\n+\n+  @Test\n+  public void testGetKafkaOperation() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.MESSAGING_OPERATION.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"publish\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = MessagingSemanticConventionUtils.getMessagingOperation(e);\n+    assertEquals(\"publish\", v.get());\n+  }\n+\n+  @Test\n+  public void testIfKafkaOperationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(MessagingSemanticConventionUtils.getMessagingOperation(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testIfKafkaDestinationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(MessagingSemanticConventionUtils.getMessagingDestinationForKafka(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testGetSqsDestination() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.MESSAGING_DESTINATION.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"queueName\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = MessagingSemanticConventionUtils.getMessagingDestination(e);\n+    assertEquals(\"queueName\", v.get());\n+  }\n+\n+  @Test\n+  public void testGetSqsOperation() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OtelMessagingSemanticConventions.MESSAGING_OPERATION.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"publish\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = MessagingSemanticConventionUtils.getMessagingOperation(e);\n+    assertEquals(\"publish\", v.get());\n+  }\n+\n+  @Test\n+  public void testIfSqsOperationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(MessagingSemanticConventionUtils.getMessagingOperation(e).isEmpty());\n+  }\n+\n+  @Test\n+  public void testIfSqsDestinationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(MessagingSemanticConventionUtils.getMessagingDestination(e).isEmpty());\n+  }\n+}"
  },
  {
    "sha": "3132ae405709266ef4664ffa62741128a6fc70db",
    "filename": "semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/OtelMessagingSemanticConventionUtilsTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 84,
    "changes": 84,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/61005028f2e976a7497b9014560c6c97a0bda442/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/OtelMessagingSemanticConventionUtilsTest.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/61005028f2e976a7497b9014560c6c97a0bda442/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/OtelMessagingSemanticConventionUtilsTest.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/messaging/OtelMessagingSemanticConventionUtilsTest.java?ref=61005028f2e976a7497b9014560c6c97a0bda442",
    "patch": "@@ -1,84 +0,0 @@\n-package org.hypertrace.semantic.convention.utils.messaging;\n-\n-import static org.hypertrace.semantic.convention.utils.SemanticConventionTestUtil.buildAttributeValue;\n-import static org.hypertrace.semantic.convention.utils.SemanticConventionTestUtil.buildAttributes;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.Map;\n-import java.util.Optional;\n-import org.hypertrace.core.datamodel.Attributes;\n-import org.hypertrace.core.datamodel.Event;\n-import org.hypertrace.core.semantic.convention.constants.messaging.OtelMessagingSemanticConventions;\n-import org.hypertrace.core.span.constants.RawSpanConstants;\n-import org.hypertrace.core.span.constants.v1.RabbitMq;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-\n-/** Unit test for {@link OtelMessagingSemanticConventions} */\n-public class OtelMessagingSemanticConventionUtilsTest {\n-\n-  @Test\n-  public void testGetRabbitMqRoutingKey() {\n-    Event e = mock(Event.class);\n-    // otel format\n-    String routingKey = \"otelRoutingKey\";\n-    Attributes attributes =\n-        buildAttributes(\n-            Map.of(\n-                OtelMessagingSemanticConventions.RABBITMQ_ROUTING_KEY.getValue(),\n-                buildAttributeValue(routingKey)));\n-    when(e.getAttributes()).thenReturn(attributes);\n-    Optional<String> v = MessagingSemanticConventionUtils.getRabbitMqRoutingKey(e);\n-    assertEquals(routingKey, v.get());\n-\n-    // other format\n-    routingKey = \"otherRoutingKey\";\n-    attributes =\n-        buildAttributes(\n-            Map.of(\n-                RawSpanConstants.getValue(RabbitMq.RABBIT_MQ_ROUTING_KEY),\n-                buildAttributeValue(routingKey)));\n-    when(e.getAttributes()).thenReturn(attributes);\n-    v = MessagingSemanticConventionUtils.getRabbitMqRoutingKey(e);\n-    assertEquals(routingKey, v.get());\n-\n-    // routing key absent\n-    attributes = buildAttributes(Map.of(\"span.kind\", buildAttributeValue(\"client\")));\n-    when(e.getAttributes()).thenReturn(attributes);\n-    v = MessagingSemanticConventionUtils.getRabbitMqRoutingKey(e);\n-    assertTrue(v.isEmpty());\n-  }\n-\n-  @Test\n-  public void testIsRabbitMqBackend() {\n-    Event e = mock(Event.class);\n-    // otel format\n-    String routingKey = \"otelRoutingKey\";\n-    Attributes attributes =\n-        buildAttributes(\n-            Map.of(\n-                OtelMessagingSemanticConventions.RABBITMQ_ROUTING_KEY.getValue(),\n-                buildAttributeValue(routingKey)));\n-    when(e.getAttributes()).thenReturn(attributes);\n-    boolean v = MessagingSemanticConventionUtils.isRabbitMqBackend(e);\n-    assertTrue(v);\n-    // other format\n-    routingKey = \"otherRoutingKey\";\n-    attributes =\n-        buildAttributes(\n-            Map.of(\n-                RawSpanConstants.getValue(RabbitMq.RABBIT_MQ_ROUTING_KEY),\n-                buildAttributeValue(routingKey)));\n-    when(e.getAttributes()).thenReturn(attributes);\n-    v = MessagingSemanticConventionUtils.isRabbitMqBackend(e);\n-    assertTrue(v);\n-    // not present\n-    attributes = buildAttributes(Map.of());\n-    when(e.getAttributes()).thenReturn(attributes);\n-    v = MessagingSemanticConventionUtils.isRabbitMqBackend(e);\n-    Assertions.assertFalse(v);\n-  }\n-}"
  },
  {
    "sha": "ef90357b89adbabf34860c33fa0784c011ba9422",
    "filename": "semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/rpc/RpcSemanticConventionUtilsTest.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/rpc/RpcSemanticConventionUtilsTest.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/rpc/RpcSemanticConventionUtilsTest.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/semantic-convention-utils/src/test/java/org/hypertrace/semantic/convention/utils/rpc/RpcSemanticConventionUtilsTest.java?ref=3bbf5e3cb76ce6b49efead76048b3aea763f9a87",
    "patch": "@@ -63,4 +63,23 @@ void getGrpcURI() {\n     v = RpcSemanticConventionUtils.getGrpcURI(e);\n     assertTrue(v.isEmpty());\n   }\n+\n+  @Test\n+  public void testGetRpcDestination() {\n+    Event e = mock(Event.class);\n+    Attributes attributes =\n+        SemanticConventionTestUtil.buildAttributes(\n+            Map.of(\n+                OTelRpcSemanticConventions.RPC_SYSTEM_SERVICE.getValue(),\n+                SemanticConventionTestUtil.buildAttributeValue(\"testService\")));\n+    when(e.getAttributes()).thenReturn(attributes);\n+    Optional<String> v = RpcSemanticConventionUtils.getRpcService(e);\n+    assertEquals(\"testService\", v.get());\n+  }\n+\n+  @Test\n+  public void testIfRpcDestinationIsEmpty() {\n+    Event e = mock(Event.class);\n+    assertTrue(RpcSemanticConventionUtils.getRpcService(e).isEmpty());\n+  }\n }"
  },
  {
    "sha": "cb9d6b79c3c2841c4c1c99c26a98fa1b7bb11012",
    "filename": "span-normalizer/span-normalizer-constants/src/main/java/org/hypertrace/core/semantic/convention/constants/rpc/OTelRpcSemanticConventions.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hypertrace/hypertrace-ingester/blob/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/span-normalizer/span-normalizer-constants/src/main/java/org/hypertrace/core/semantic/convention/constants/rpc/OTelRpcSemanticConventions.java",
    "raw_url": "https://github.com/hypertrace/hypertrace-ingester/raw/3bbf5e3cb76ce6b49efead76048b3aea763f9a87/span-normalizer/span-normalizer-constants/src/main/java/org/hypertrace/core/semantic/convention/constants/rpc/OTelRpcSemanticConventions.java",
    "contents_url": "https://api.github.com/repos/hypertrace/hypertrace-ingester/contents/span-normalizer/span-normalizer-constants/src/main/java/org/hypertrace/core/semantic/convention/constants/rpc/OTelRpcSemanticConventions.java?ref=3bbf5e3cb76ce6b49efead76048b3aea763f9a87",
    "patch": "@@ -8,7 +8,7 @@\n   GRPC_STATUS_CODE(\"rpc.grpc.status_code\"),\n   RPC_SYSTEM_VALUE_GRPC(\"grpc\"),\n   RPC_SYSTEM_VALUE_JAVA_RMI(\"java_rmi\"),\n-  RPC_SYSTEM_VALUE(\"wcf\"),\n+  RPC_SYSTEM_VALUE_WCF(\"wcf\"),\n   RPC_SYSTEM_SERVICE(\"rpc.service\");\n \n   private final String value;"
  }
]
