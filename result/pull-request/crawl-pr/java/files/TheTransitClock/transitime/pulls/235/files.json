[
  {
    "sha": "6234e7a7acb8ae4857798d62254cbda4f10743a2",
    "filename": "transitclock/src/main/java/org/transitclock/custom/aws/WmataAvlTypeUnmarshaller.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/custom/aws/WmataAvlTypeUnmarshaller.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/custom/aws/WmataAvlTypeUnmarshaller.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/custom/aws/WmataAvlTypeUnmarshaller.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -12,6 +12,7 @@\n import org.transitclock.db.structs.AvlReport.AssignmentType;\n \n import com.amazonaws.services.sqs.model.Message;\n+import org.transitclock.db.structs.OccupancyStatus;\n \n /**\n  * Implementation of SqsMessageUnmarshaller for WMATA data. \n@@ -95,6 +96,13 @@ private AvlReportWrapper toAvlReport(JSONObject jsonObj) {\n         speed = (float) msgObj.getDouble(\"averageSpeed\") * 0.3048f; // convert to m/s\n     }\n \n+    OccupancyStatus occupancyStatus = null;\n+    if (msgObj.has(\"crowdingStatus\")) {\n+        String occupancyString = null;\n+        occupancyString = msgObj.getString(\"crowdingStatus\");\n+        occupancyStatus = OccupancyStatus.lenientParse(occupancyString);\n+    }\n+\n     Long forwarderTimeReceived = null;\n     if (msgObj.has(\"received\")) {\n       forwarderTimeReceived = msgObj.getLong(\"received\");\n@@ -126,6 +134,9 @@ private AvlReportWrapper toAvlReport(JSONObject jsonObj) {\n     String source = \"sqs\";\n     if (vehicleId != null && lat != null && lon != null && time != null) {\n         AvlReport ar = new AvlReport(vehicleId, time, lat, lon, speed, heading, source);\n+        if (occupancyStatus != null) {\n+            ar.setOccupancyStatus(occupancyStatus);\n+        }\n         if (msgObj.has(\"blockAlpha\")) {\n             String blockAlpha = msgObj.getString(\"blockAlpha\");\n             if (blockAlpha != null) {"
  },
  {
    "sha": "6b6d6431356a8a209ca9f6cd09433b0d89a353b9",
    "filename": "transitclock/src/main/java/org/transitclock/db/structs/AvlReport.java",
    "status": "modified",
    "additions": 27,
    "deletions": 3,
    "changes": 30,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/db/structs/AvlReport.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/db/structs/AvlReport.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/db/structs/AvlReport.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -119,7 +119,7 @@\n \t// Can be block, trip, or route ID\n \t@Column(length=HibernateUtils.DEFAULT_ID_SIZE)\n \tprivate String assignmentId;  // optional\n-\t\n+\n \t// The type of the assignment received in the AVL feed\n \tpublic enum AssignmentType {\n \t\tUNSET, \n@@ -160,7 +160,13 @@\n \t// This parameter is optional. Set to null if data not available.\n \t@Column(length=HibernateUtils.DEFAULT_ID_SIZE)\n \tprivate final Float passengerFullness;\n-\t\t\n+\n+\t// Optional.  Mirrors GTFS-RT occupancy status so it can be passed through\n+\t// we choose ordinal sacrificing readability for size!\n+\t@Column\n+\t@Enumerated(EnumType.ORDINAL)\n+\tprivate OccupancyStatus occupancyStatus;\n+\n \t// Optional. For containing additional info for a particular feed.\n \t// Not declared final because setField1() is used to set values.\n \t@Column(length=HibernateUtils.DEFAULT_ID_SIZE)\n@@ -179,7 +185,7 @@\n \t\t\tLoggerFactory.getLogger(AvlReport.class);\t\n \n \t// Needed because serializable so can transmit using JMS or RMI\n-\tprivate static final long serialVersionUID = 92384928349823L;\n+\tprivate static final long serialVersionUID = 92384928349824L;\n \t\n \t/********************** Member Functions **************************/\n \n@@ -795,6 +801,24 @@ public String getSource() {\n \tpublic void setSource(String source) {\n \t\tthis.source=sized(source);\n \t}\n+\n+\t/**\n+\t * GTFS-RT inspired levels of crowding information.\n+\t * @return enumeration\n+\t */\n+\tpublic OccupancyStatus getOccupancyStatus() {\n+\t\treturn occupancyStatus;\n+\t}\n+\n+\t/**\n+\t * GTFS-RT inspired levels of crowding information.\n+\t */\n+\tpublic void setOccupancyStatus(OccupancyStatus occupancyStatus) {\n+\t\tthis.occupancyStatus = occupancyStatus;\n+\t}\n+\n+\n+\n \t/**\n \t * Returns how many msec elapsed between the GPS fix was generated\n \t * to the time it was finally processed. Returns 0 if timeProcessed"
  },
  {
    "sha": "458763a66ede9d6c5b8ae8373739f87a0784136a",
    "filename": "transitclock/src/main/java/org/transitclock/db/structs/OccupancyStatus.java",
    "status": "added",
    "additions": 160,
    "deletions": 0,
    "changes": 160,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/db/structs/OccupancyStatus.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/db/structs/OccupancyStatus.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/db/structs/OccupancyStatus.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -0,0 +1,160 @@\n+package org.transitclock.db.structs;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * this mirrors GTFS-RT's occupancyStatus (2016 version):\n+ * https://developers.google.com/transit/gtfs-realtime/reference/OccupancyStatus-vp\n+ *\n+ * Constants proposed here:\n+ * https://github.com/OneBusAway/onebusaway-application-modules/issues/121\n+ *\n+ * Borrowed from https://github.com/OneBusAway/onebusaway-application-modules/onebusaway-realtime-api\n+ */\n+public enum OccupancyStatus implements Serializable {\n+\n+    /**\n+     * proposed addition\n+     */\n+    UNKNOWN(-1),\n+    /**\n+     * The vehicle is considered empty by most measures, has few or no passengers\n+     * onboard, and is accepting passengers.\n+     */\n+    EMPTY(0),\n+    /**\n+     * The vehicle has a large percentage of seats available. What percentage of\n+     * free seats out of the total seats available is large enough to fall into\n+     * this category is determined by the producer.\n+     */\n+    MANY_SEATS_AVAILABLE(1),\n+    /**\n+     * The vehicle has a small percentage of seats available. What percentage\n+     * of free seats out of the total seats available is small enough to fall\n+     * into this category is determined by the producer.\n+     */\n+    FEW_SEATS_AVAILABLE(2),\n+    /**\n+     * The vehicle can accommodate only standing passengers.\n+     */\n+    STANDING_ROOM_ONLY(3),\n+    /**\n+     * The vehicle can accommodate only standing passengers but has limited\n+     * space for them.\n+     */\n+    CRUSHED_STANDING_ROOM_ONLY(4),\n+    /**\n+     * The vehicle is considered full by most measures but may still be allowing\n+     * passengers to board.\n+     */\n+    FULL(5),\n+    /**\n+     * The vehicle is not accepting passengers.\n+     */\n+    NOT_ACCEPTING_PASSENGERS(6);\n+\n+    private static Logger _log = LoggerFactory.getLogger(OccupancyStatus.class);\n+    private int _status;\n+\n+    OccupancyStatus() {\n+        _status = -1;\n+    }\n+\n+    OccupancyStatus(int status) {\n+        _status = status;\n+    }\n+\n+    public static OccupancyStatus lenientParse(String occupancyString) {\n+        OccupancyStatus status = null;\n+        try {\n+            status = OccupancyStatus.valueOf(occupancyString);\n+        } catch (IllegalArgumentException iae) {\n+            return mapFromExternalSystems(occupancyString);\n+        }\n+        return status;\n+    }\n+\n+    private static OccupancyStatus mapFromExternalSystems(String occupancyString) {\n+        if (\"MANY SEATS\".equals(occupancyString))\n+            return OccupancyStatus.MANY_SEATS_AVAILABLE;\n+        if (\"FEW SEATS\".equals(occupancyString))\n+            return OccupancyStatus.FEW_SEATS_AVAILABLE;\n+        throw new IllegalArgumentException(occupancyString + \"not expected\");\n+    }\n+\n+    public int valueOf() {\n+        return _status;\n+    }\n+\n+    public static boolean contains(String status) {\n+        for (OccupancyStatus OccupancyStatus : values()) {\n+            if (OccupancyStatus.name().equalsIgnoreCase(status)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public String toString() {\n+        return toCamelCase(this.name());\n+    }\n+\n+    public static OccupancyStatus toEnum(int status) {\n+        if (status == UNKNOWN.valueOf() || status < 0)\n+            return UNKNOWN;\n+        if (status == EMPTY.valueOf())\n+            return EMPTY;\n+        if (status == MANY_SEATS_AVAILABLE.valueOf())\n+            return MANY_SEATS_AVAILABLE;\n+        if (status == FEW_SEATS_AVAILABLE.valueOf())\n+            return FEW_SEATS_AVAILABLE;\n+        if (status == STANDING_ROOM_ONLY.valueOf())\n+            return STANDING_ROOM_ONLY;\n+        if (status == CRUSHED_STANDING_ROOM_ONLY.valueOf())\n+            return CRUSHED_STANDING_ROOM_ONLY;\n+        if (status == FULL.valueOf())\n+            return FULL;\n+        if (status == NOT_ACCEPTING_PASSENGERS.valueOf()) {\n+            _log.warn(\"Occupancy Status set to NotAcceptingPassengers\");\n+            return NOT_ACCEPTING_PASSENGERS;\n+        }\n+        throw new IllegalArgumentException(\"unexpected value \" + status);\n+    }\n+\n+    public static OccupancyStatus toEnum(double rid) {\n+        int status;\n+        if (rid < 0.0) {\n+            status = -1;\n+        } else if (rid == 0.0) {\n+            status = 0;\n+        } else if (rid <= 25.0) {\n+            status = 1;\n+        } else if (rid <= 50.0) {\n+            status = 2;\n+        } else if (rid <= 75.0) {\n+            status = 3;\n+        } else if (rid <= 90.0) {\n+            status = 4;\n+        } else if (rid <= 100.0) {\n+            status = 5;\n+        } else {\n+            status = 6;\n+        }\n+        return OccupancyStatus.toEnum(status);\n+    }\n+\n+    private String toCamelCase(String upperCase) {\n+        if (upperCase == null || upperCase.length() == 0) return upperCase;\n+        String[] parts = upperCase.split(\"_\");\n+        StringBuffer camelCase = new StringBuffer();\n+        for (String part : parts) {\n+            camelCase.append(part.substring(0, 1).toUpperCase());\n+            camelCase.append(part.substring(1).toLowerCase());\n+        }\n+        String result = camelCase.substring(0, 1).toLowerCase() + camelCase.substring(1);\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "e7e2941460f167d7c871314745c0431667def42d",
    "filename": "transitclock/src/main/java/org/transitclock/ipc/data/IpcAvl.java",
    "status": "modified",
    "additions": 23,
    "deletions": 6,
    "changes": 29,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcAvl.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcAvl.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/ipc/data/IpcAvl.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -24,6 +24,7 @@\n \n import org.transitclock.db.structs.AvlReport;\n import org.transitclock.db.structs.AvlReport.AssignmentType;\n+import org.transitclock.db.structs.OccupancyStatus;\n import org.transitclock.utils.Geo;\n import org.transitclock.utils.Time;\n \n@@ -47,8 +48,10 @@\n \tprivate final String driverId;\n \tprivate final String licensePlate;\n \tprivate final int passengerCount;\n+\tprivate final IpcOccupancyStatus occupancyStatus;\n+\n+\tprivate static final long serialVersionUID = 2506303490106709587L;\n \n-\tprivate static final long serialVersionUID = 2506303490106709586L;\n \n \t/********************** Member Functions **************************/\n \n@@ -69,7 +72,7 @@\n \tpublic IpcAvl(String vehicleId, long time, float latitude, float longitude,\n \t\t\tfloat speed, float heading, String source, String assignmentId,\n \t\t\tAssignmentType assignmentType, String driverId,\n-\t\t\tString licensePlate, int passengerCount) {\n+\t\t\tString licensePlate, int passengerCount, IpcOccupancyStatus occupancyStatus) {\n \t\tthis.vehicleId = vehicleId;\n \t\tthis.time = time;\n \t\tthis.latitude = latitude;\n@@ -82,10 +85,11 @@ public IpcAvl(String vehicleId, long time, float latitude, float longitude,\n \t\tthis.driverId = driverId;\n \t\tthis.licensePlate = licensePlate;\n \t\tthis.passengerCount = passengerCount;\n+\t\tthis.occupancyStatus = occupancyStatus;\n \t}\n \t\n \t/**\n-\t * @param lastAvlReport\n+\t * copy from AvlReport\n \t */\n \tpublic IpcAvl(AvlReport a) {\n \t\tthis.vehicleId = a.getVehicleId();\n@@ -100,6 +104,12 @@ public IpcAvl(AvlReport a) {\n \t\tthis.driverId = a.getDriverId();\n \t\tthis.licensePlate = a.getLicensePlate();\n \t\tthis.passengerCount = a.getPassengerCount();\n+\t\tthis.occupancyStatus = toIpcOccupancyStatus(a.getOccupancyStatus());\n+\t}\n+\n+\tprivate IpcOccupancyStatus toIpcOccupancyStatus(OccupancyStatus occupancyStatus) {\n+\t\tif (occupancyStatus == null) return null;\n+\t\treturn IpcOccupancyStatus.toEnum(occupancyStatus.valueOf());\n \t}\n \n \t/*\n@@ -120,7 +130,8 @@ public IpcAvl(AvlReport a) {\n \t\tprivate String driverId;\n \t\tprivate String licensePlate;\n \t\tprivate int passengerCount;\n-\t\t\n+\t\tprivate IpcOccupancyStatus occupancyStatus;\n+\n \t\tprivate static final long serialVersionUID = 6220698347690060245L;\n \t\tprivate static final short serializationVersion = 0;\n \n@@ -140,6 +151,7 @@ private SerializationProxy(IpcAvl avl) {\n \t\t\tthis.driverId = avl.driverId;\n \t\t\tthis.licensePlate = avl.licensePlate;\n \t\t\tthis.passengerCount = avl.passengerCount;\n+\t\t\tthis.occupancyStatus = avl.occupancyStatus;\n \t\t}\n \t\t\n \t\t/*\n@@ -163,6 +175,7 @@ private void writeObject(java.io.ObjectOutputStream stream)\n \t\t\tstream.writeObject(driverId);\n \t\t\tstream.writeObject(licensePlate);\n \t\t\tstream.writeInt(passengerCount);\n+\t\t\tstream.writeObject(occupancyStatus);\n \t\t}\n \n \t\t/*\n@@ -175,7 +188,7 @@ private void writeObject(java.io.ObjectOutputStream stream)\n \t\tprivate Object readResolve() {\n \t\t\treturn new IpcAvl(vehicleId, time, latitude, longitude, speed,\n \t\t\t\t\theading, source, assignmentId, assignmentType, driverId,\n-\t\t\t\t\tlicensePlate, passengerCount);\n+\t\t\t\t\tlicensePlate, passengerCount, occupancyStatus);\n \t\t}\n \n \t\t/*\n@@ -203,6 +216,7 @@ private void readObject(java.io.ObjectInputStream stream)\n \t\t\tdriverId = (String) stream.readObject();\n \t\t\tlicensePlate = (String) stream.readObject();\n \t\t\tpassengerCount = stream.readInt();\n+\t\t\toccupancyStatus = (IpcOccupancyStatus) stream.readObject();\n \t\t}\n \t}\n \n@@ -277,6 +291,8 @@ public int getPassengerCount() {\n \t\treturn passengerCount;\n \t}\n \n+\tpublic IpcOccupancyStatus getOccupancyStatus() { return occupancyStatus; }\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn \"IpcAvl [vehicleId=\" + vehicleId \n@@ -290,7 +306,8 @@ public String toString() {\n \t\t\t\t+ \", assignmentType=\" + assignmentType\n \t\t\t\t+ \", driverId=\" + driverId \n \t\t\t\t+ \", licensePlate=\" + licensePlate\n-\t\t\t\t+ \", passengerCount=\" + passengerCount \n+\t\t\t\t+ \", passengerCount=\" + passengerCount\n+\t\t\t\t+ \", occupancyStatus=\" + occupancyStatus\n \t\t\t\t+ \"]\";\n \t}\n \t    "
  },
  {
    "sha": "e13463b1a28c3364e10dc4545c777876712e5b29",
    "filename": "transitclock/src/main/java/org/transitclock/ipc/data/IpcOccupancyStatus.java",
    "status": "added",
    "additions": 159,
    "deletions": 0,
    "changes": 159,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcOccupancyStatus.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcOccupancyStatus.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/ipc/data/IpcOccupancyStatus.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -0,0 +1,159 @@\n+/*\n+ * This file is part of Transitime.org\n+ *\n+ * Transitime.org is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License (GPL) as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * any later version.\n+ *\n+ * Transitime.org is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Transitime.org .  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.transitclock.ipc.data;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * this mirrors GTFS-RT's occupancyStatus (2016 version):\n+ * https://developers.google.com/transit/gtfs-realtime/reference/OccupancyStatus-vp\n+ * <p>\n+ * Constants proposed here:\n+ * https://github.com/OneBusAway/onebusaway-application-modules/issues/121\n+ * <p>\n+ * Borrowed from https://github.com/OneBusAway/onebusaway-application-modules/onebusaway-realtime-api\n+ */\n+public enum IpcOccupancyStatus implements Serializable {\n+\n+  /**\n+   * proposed addition\n+   */\n+  UNKNOWN(-1),\n+  /**\n+   * The vehicle is considered empty by most measures, has few or no passengers\n+   * onboard, and is accepting passengers.\n+   */\n+  EMPTY(0),\n+  /**\n+   * The vehicle has a large percentage of seats available. What percentage of\n+   * free seats out of the total seats available is large enough to fall into\n+   * this category is determined by the producer.\n+   */\n+  MANY_SEATS_AVAILABLE(1),\n+  /**\n+   * The vehicle has a small percentage of seats available. What percentage\n+   * of free seats out of the total seats available is small enough to fall\n+   * into this category is determined by the producer.\n+   */\n+  FEW_SEATS_AVAILABLE(2),\n+  /**\n+   * The vehicle can accommodate only standing passengers.\n+   */\n+  STANDING_ROOM_ONLY(3),\n+  /**\n+   * The vehicle can accommodate only standing passengers but has limited\n+   * space for them.\n+   */\n+  CRUSHED_STANDING_ROOM_ONLY(4),\n+  /**\n+   * The vehicle is considered full by most measures but may still be allowing\n+   * passengers to board.\n+   */\n+  FULL(5),\n+  /**\n+   * The vehicle is not accepting passengers.\n+   */\n+  NOT_ACCEPTING_PASSENGERS(6);\n+\n+  private static Logger _log = LoggerFactory.getLogger(IpcOccupancyStatus.class);\n+  private int _status;\n+  private static final long serialVersionUID = 2506303490106709595L;\n+\n+  IpcOccupancyStatus() {\n+    _status = -1;\n+  }\n+\n+  IpcOccupancyStatus(int status) {\n+    _status = status;\n+  }\n+\n+  public int valueOf() {\n+    return _status;\n+  }\n+\n+  public static boolean contains(String status) {\n+    for (IpcOccupancyStatus IpcOccupancyStatus : values()) {\n+      if (IpcOccupancyStatus.name().equalsIgnoreCase(status)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  public String toString() {\n+    return toCamelCase(this.name());\n+  }\n+\n+  public static IpcOccupancyStatus toEnum(int status) {\n+    if (status == UNKNOWN.valueOf() || status < 0)\n+      return UNKNOWN;\n+    if (status == EMPTY.valueOf())\n+      return EMPTY;\n+    if (status == MANY_SEATS_AVAILABLE.valueOf())\n+      return MANY_SEATS_AVAILABLE;\n+    if (status == FEW_SEATS_AVAILABLE.valueOf())\n+      return FEW_SEATS_AVAILABLE;\n+    if (status == STANDING_ROOM_ONLY.valueOf())\n+      return STANDING_ROOM_ONLY;\n+    if (status == CRUSHED_STANDING_ROOM_ONLY.valueOf())\n+      return CRUSHED_STANDING_ROOM_ONLY;\n+    if (status == FULL.valueOf())\n+      return FULL;\n+    if (status == NOT_ACCEPTING_PASSENGERS.valueOf()) {\n+      _log.warn(\"Occupancy Status set to NotAcceptingPassengers\");\n+      return NOT_ACCEPTING_PASSENGERS;\n+    }\n+    throw new IllegalArgumentException(\"unexpected value \" + status);\n+  }\n+\n+  public static IpcOccupancyStatus toEnum(double rid) {\n+    int status;\n+    if (rid < 0.0) {\n+      status = -1;\n+    } else if (rid == 0.0) {\n+      status = 0;\n+    } else if (rid <= 25.0) {\n+      status = 1;\n+    } else if (rid <= 50.0) {\n+      status = 2;\n+    } else if (rid <= 75.0) {\n+      status = 3;\n+    } else if (rid <= 90.0) {\n+      status = 4;\n+    } else if (rid <= 100.0) {\n+      status = 5;\n+    } else {\n+      status = 6;\n+    }\n+    return IpcOccupancyStatus.toEnum(status);\n+  }\n+\n+  private String toCamelCase(String upperCase) {\n+    if (upperCase == null || upperCase.length() == 0) return upperCase;\n+    String[] parts = upperCase.split(\"_\");\n+    StringBuffer camelCase = new StringBuffer();\n+    for (String part : parts) {\n+      camelCase.append(part.substring(0, 1).toUpperCase());\n+      camelCase.append(part.substring(1).toLowerCase());\n+    }\n+    String result = camelCase.substring(0, 1).toLowerCase() + camelCase.substring(1);\n+    return result;\n+  }\n+}"
  },
  {
    "sha": "1f9aa88fc52f3a02dfa5db010d87b40113424179",
    "filename": "transitclock/src/main/java/org/transitclock/ipc/data/IpcPrediction.java",
    "status": "modified",
    "additions": 19,
    "deletions": 5,
    "changes": 24,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcPrediction.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcPrediction.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/ipc/data/IpcPrediction.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -24,6 +24,7 @@\n \n import org.transitclock.applications.Core;\n import org.transitclock.db.structs.AvlReport;\n+import org.transitclock.db.structs.OccupancyStatus;\n import org.transitclock.db.structs.Trip;\n import org.transitclock.ipc.data.IpcPrediction.ArrivalOrDeparture;\n import org.transitclock.utils.StringUtils;\n@@ -81,6 +82,7 @@\n \tprivate final boolean isArrival;\n \tprivate final Integer delay;\n \tprivate boolean isCanceled;\n+\tprivate final IpcOccupancyStatus occupancyStatus;\n \t\n \tpublic boolean isCanceled() {\n \t\treturn isCanceled;\n@@ -93,7 +95,7 @@ public boolean isCanceled() {\n \t// when creating PredictionsForRouteStop object.\n \tprivate final Trip trip;\n \n-\tprivate static final long serialVersionUID = 7264507678733060173L;\n+\tprivate static final long serialVersionUID = 7264507678733060174L;\n \n \tpublic enum ArrivalOrDeparture {ARRIVAL, DEPARTURE};\n \t\n@@ -121,7 +123,6 @@ public boolean isCanceled() {\n \t * @param atEndOfTrip\n \t *            True if prediction for last stop of trip, which means likely\n \t *            not useful to user\n-\t * @param predictionAffectedByWaitStop\n \t * @param isDelayed\n \t * @param lateAndSubsequentTripSoMarkAsUncertain\n \t * @param arrivalOrDeparture\n@@ -164,6 +165,7 @@ public IpcPrediction(AvlReport avlReport, String stopId, int gtfsStopSeq,\n \t    this.driverId = avlReport.getDriverId();\n \t    this.passengerCount = (short) avlReport.getPassengerCount();\n \t    this.passengerFullness = avlReport.getPassengerFullness();\n+\t\tthis.occupancyStatus = toIpcOccupancyStatus(avlReport.getOccupancyStatus());\n \t    this.isDelayed = isDelayed;\n \t    this.lateAndSubsequentTripSoMarkAsUncertain = \n \t        lateAndSubsequentTripSoMarkAsUncertain;\n@@ -174,6 +176,11 @@ public IpcPrediction(AvlReport avlReport, String stopId, int gtfsStopSeq,\n \t\tthis.isCanceled=isCanceled;\n \t}\n \n+\tprivate IpcOccupancyStatus toIpcOccupancyStatus(OccupancyStatus occupancyStatus) {\n+\t\tif (occupancyStatus == null) return null;\n+\t\treturn IpcOccupancyStatus.toEnum(occupancyStatus.valueOf());\n+\t}\n+\n \t/**\n \t * Constructor used for when deserializing a proxy object. Declared private\n \t * because only used internally by the proxy class.\n@@ -186,7 +193,7 @@ private IpcPrediction(String vehicleId, String routeId, String stopId,\n \t\t\tboolean affectedByWaitStop, String driverId, short passengerCount,\n \t\t\tfloat passengerFullness, boolean isDelayed,\n \n-\t\t\tboolean lateAndSubsequentTripSoMarkAsUncertain, boolean isArrival,  Integer delay, Long freqStartTime, int tripCounter,boolean isCanceled) {\n+\t\t\tboolean lateAndSubsequentTripSoMarkAsUncertain, boolean isArrival,  Integer delay, Long freqStartTime, int tripCounter,boolean isCanceled, IpcOccupancyStatus occupancyStatus) {\n \n \t\tthis.vehicleId = vehicleId;\n \t\tthis.routeId = routeId;\n@@ -209,6 +216,7 @@ private IpcPrediction(String vehicleId, String routeId, String stopId,\n \t\tthis.driverId = driverId;\n \t\tthis.passengerCount = passengerCount;\n \t\tthis.passengerFullness = passengerFullness;\n+\t\tthis.occupancyStatus = occupancyStatus;\n \t\tthis.isDelayed = isDelayed;\n \t\tthis.lateAndSubsequentTripSoMarkAsUncertain = \n \t\t\t\tlateAndSubsequentTripSoMarkAsUncertain;\n@@ -246,6 +254,7 @@ private IpcPrediction(String vehicleId, String routeId, String stopId,\n \t\tprivate String driverId;\n \t\tprivate short passengerCount;\n \t\tprivate float passengerFullness;\n+\t\tprivate IpcOccupancyStatus occupancyStatus;\n \t\tprivate boolean isDelayed;\n \t\tprivate boolean lateAndSubsequentTripSoMarkAsUncertain;\n \t\tprivate boolean isArrival;\n@@ -281,6 +290,7 @@ private SerializationProxy(IpcPrediction p) {\n \t\t\tthis.driverId = p.driverId;\n \t\t\tthis.passengerCount = p.passengerCount;\n \t\t\tthis.passengerFullness = p.passengerFullness;\n+\t\t\tthis.occupancyStatus = p.occupancyStatus;\n \t\t\tthis.isDelayed = p.isDelayed;\n \t\t\tthis.lateAndSubsequentTripSoMarkAsUncertain = \n \t\t\t\t\tp.lateAndSubsequentTripSoMarkAsUncertain;\n@@ -330,7 +340,7 @@ private void writeObject(java.io.ObjectOutputStream stream)\n \n \t\t\tstream.writeObject(delay);\n \t\t\tstream.writeBoolean(isCanceled);\n-\n+\t\t\tstream.writeObject(occupancyStatus);\n \t\t}\n \n \t\t/*\n@@ -377,6 +387,7 @@ private void readObject(java.io.ObjectInputStream stream)\n \n \t\t\tdelay = (Integer) stream.readObject();\n \t\t\tisCanceled=stream.readBoolean();\n+\t\t\toccupancyStatus = (IpcOccupancyStatus) stream.readObject();\n \t\t}\n \n \t\t/*\n@@ -391,7 +402,7 @@ private Object readResolve() {\n \t\t\t\t\tatEndOfTrip, schedBasedPred, avlTime, creationTime,\n \t\t\t\t\ttripStartEpochTime, affectedByWaitStop, driverId,\n \t\t\t\t\tpassengerCount, passengerFullness, isDelayed,\n-\t\t\t\t\tlateAndSubsequentTripSoMarkAsUncertain, isArrival, delay, freqStartTime, tripCounter,isCanceled);\n+\t\t\t\t\tlateAndSubsequentTripSoMarkAsUncertain, isArrival, delay, freqStartTime, tripCounter,isCanceled, occupancyStatus);\n \n \t\t}\n \t}\n@@ -445,6 +456,7 @@ public String toString() {\n \t\t\t\t+ (!Float.isNaN(passengerFullness) ? \", psngrFullness=\"\n \t\t\t\t\t\t+ StringUtils.twoDigitFormat(passengerFullness) : \"\")\n \t\t\t\t+ (\"isCanceled= \"+isCanceled)\n+\t\t\t\t+ \", occupancyStatus=\" + occupancyStatus\n \t\t\t\t+ \"]\";\n \t}\n \n@@ -546,6 +558,8 @@ public boolean isPassengerCountValid() {\n \t\treturn passengerCount >= 0;\n \t}\n \n+\tpublic IpcOccupancyStatus getOccupancyStatus() { return occupancyStatus; }\n+\n \tpublic boolean isDelayed() {\n \t\treturn isDelayed;\n \t}"
  },
  {
    "sha": "296ecc043a2c06545411c1fd378626350034db17",
    "filename": "transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicle.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicle.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicle.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicle.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -199,7 +199,6 @@ public IpcVehicle(VehicleState vs) {\n \t * @param blockId\n \t * @param blockAssignmentMethod\n \t * @param avl\n-\t * @param pathHeading\n \t * @param routeId\n \t * @param routeShortName\n \t * @param routeName\n@@ -626,7 +625,7 @@ public static void main(String args[]) {\n \t\tIpcAvl avl =\n \t\t\t\tnew IpcAvl(\"avlVehicleId\", 10, 1.23f, 4.56f, 0.0f, 0.0f, null,\n \t\t\t\t\t\t\"block\", AssignmentType.BLOCK_ID, \"driver\", \"license\",\n-\t\t\t\t\t\t0);\n+\t\t\t\t\t\t0, null);\n \t\tIpcVehicle v =\n \t\t\t\tnew IpcVehicle(\"blockId\",\n \t\t\t\t\t\tBlockAssignmentMethod.AVL_FEED_BLOCK_ASSIGNMENT, avl,"
  },
  {
    "sha": "ce520b0ae99cf9407984260302e51a656a365a16",
    "filename": "transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicleComplete.java",
    "status": "modified",
    "additions": 21,
    "deletions": 7,
    "changes": 28,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicleComplete.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicleComplete.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclock/src/main/java/org/transitclock/ipc/data/IpcVehicleComplete.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -27,6 +27,7 @@\n import org.transitclock.core.SpatialMatch;\n import org.transitclock.core.TemporalDifference;\n import org.transitclock.core.VehicleState;\n+import org.transitclock.db.structs.OccupancyStatus;\n import org.transitclock.db.structs.Trip;\n import org.transitclock.utils.Geo;\n import org.transitclock.utils.Time;\n@@ -51,8 +52,9 @@\n \tprivate final Double distanceOfNextStopFromTripStart;\n \tprivate final Double distanceAlongTrip;\n \tprivate double headway;\n+\tprivate final IpcOccupancyStatus occupancyStatus;\n \t\n-\tprivate static final long serialVersionUID = 8154105842499551461L;\n+\tprivate static final long serialVersionUID = 8154105842499551462L;\n \n \t/********************** Member Functions **************************/\n \n@@ -88,6 +90,7 @@ public IpcVehicleComplete(VehicleState vs) {\n \t\t\tthis.distanceOfNextStopFromTripStart = sumOfStopPathLengths;\n \t\t\tthis.distanceAlongTrip = \n \t\t\t\t\tsumOfStopPathLengths - this.distanceToNextStop;\n+\t\t\tthis.occupancyStatus = toIpcOccupancyStatus(vs.getAvlReport().getOccupancyStatus());\n \t\t\tif(vs.getHeadway()!=null)\n \t\t\t{\n \t\t\t\tthis.headway=vs.getHeadway().getHeadway();\n@@ -101,9 +104,15 @@ public IpcVehicleComplete(VehicleState vs) {\n \t\t\tthis.distanceToNextStop =null; //Double.NaN;\n \t\t\tthis.distanceOfNextStopFromTripStart =null;//  Double.NaN;\n \t\t\tthis.distanceAlongTrip =null; // Double.NaN;\n+\t\t\tthis.occupancyStatus = null;\n \t\t}\n \t}\n-\t\n+\n+\tprotected IpcOccupancyStatus toIpcOccupancyStatus(OccupancyStatus occupancyStatus) {\n+\t\tif (occupancyStatus == null) return null;\n+\t\treturn IpcOccupancyStatus.toEnum(occupancyStatus.valueOf());\n+\t}\n+\n \t/**\n \t * Constructor used for when deserializing a proxy object. \n \t *\n@@ -127,7 +136,6 @@ public IpcVehicleComplete(VehicleState vs) {\n \t * @param nextStopId\n \t * @param nextStopName\n \t * @param vehicleType\n-\t * @param tripStartDateStr\n \t * @param atStop\n \t * @param atOrNextStopId\n \t * @param atOrNextGtfsStopSeq\n@@ -148,9 +156,8 @@ private IpcVehicleComplete(String blockId,\n \t\t\tlong tripStartEpochTime, boolean atStop, String atOrNextStopId,\n \t\t\tInteger atOrNextGtfsStopSeq, String originStopId,\n \t\t\tString destinationId, Double distanceToNextStop,\n-\n \t\t\tDouble distanceOfNextStopFromTripStart, Double distanceAlongTrip, long freqStartTime, IpcHoldingTime holdingTime, double predictedLatitude, double predictedLongitude,boolean isCanceled,\n-\t\t\tdouble headway) {\n+\t\t\tdouble headway, IpcOccupancyStatus occupancyStatus) {\n \n \t\tsuper(blockId, blockAssignmentMethod, avl, pathHeading, routeId,\n \t\t\t\trouteShortName, routeName, tripId, tripPatternId, isTripUnscheduled, directionId, headsign,\n@@ -166,6 +173,7 @@ private IpcVehicleComplete(String blockId,\n \t\tthis.distanceOfNextStopFromTripStart = distanceOfNextStopFromTripStart;\n \t\tthis.distanceAlongTrip = distanceAlongTrip;\n \t\tthis.headway=headway;\n+\t\tthis.occupancyStatus = occupancyStatus;\n \t}\n \t\n \t/*\n@@ -181,6 +189,7 @@ private IpcVehicleComplete(String blockId,\n \t\tprivate Double distanceOfNextStopFromTripStart;\n \t\tprivate Double distanceAlongTrip;\n \t\tprivate double headway;\n+\t\tprivate IpcOccupancyStatus occupancyStatus;\n \t\tprivate static final short currentSerializationVersion = 0;\n \t\t\n \t\tprivate static final long serialVersionUID = 6982458672576764027L;\n@@ -193,6 +202,7 @@ private CompleteVehicleSerializationProxy(IpcVehicleComplete v) {\n \t\t\tthis.distanceOfNextStopFromTripStart = v.distanceOfNextStopFromTripStart;\n \t\t\tthis.distanceAlongTrip = v.distanceAlongTrip;\n \t\t\tthis.headway=v.headway;\n+\t\t\tthis.occupancyStatus = v.occupancyStatus;\n \t\t}\n \t\t\n \t\t/*\n@@ -215,6 +225,7 @@ protected void writeObject(java.io.ObjectOutputStream stream)\n \t\t    stream.writeObject(distanceOfNextStopFromTripStart);\n \t\t    stream.writeObject(distanceAlongTrip);\n \t\t    stream.writeDouble(headway);\n+\t\t\t  stream.writeObject(occupancyStatus);\n \t\t}\n \n \t\t/*\n@@ -244,6 +255,7 @@ protected void readObject(java.io.ObjectInputStream stream)\n \t\t\tdistanceAlongTrip =(Double) stream.readObject();\n \t\t\tisCanceled=stream.readBoolean();\n \t\t\theadway=stream.readDouble();\n+\t\t\toccupancyStatus = (IpcOccupancyStatus) stream.readObject();\n \t\t}\n \t\t\n \t\t/*\n@@ -263,7 +275,7 @@ private Object readResolve() {\n \t\t\t\t\tdistanceToNextStop, distanceOfNextStopFromTripStart,\n \n \t\t\t\t\tdistanceAlongTrip, freqStartTime, holdingTime, predictedLatitude, predictedLongitude,isCanceled,\n-\t\t\t\t\theadway);\n+\t\t\t\t\theadway, occupancyStatus);\n \n \t\t}\n \n@@ -310,6 +322,7 @@ public double getHeadway()\n \t{\n \t\treturn headway;\n \t}\n+\tpublic IpcOccupancyStatus getOccupancyStatus() { return occupancyStatus; }\n \n \t@Override\n \tpublic String toString() {\n@@ -349,7 +362,8 @@ public String toString() {\n \t\t\t\t+ \", distanceOfNextStopFromTripStart=\" \n \t\t\t\t\t+ Geo.distanceFormat(distanceOfNextStopFromTripStart)\n \t\t\t\t+ \", distanceAlongTrip=\" \n-\t\t\t\t\t+ Geo.distanceFormat(distanceAlongTrip) \n+\t\t\t\t\t+ Geo.distanceFormat(distanceAlongTrip)\n+\t\t\t\t+ \", occupancyStatus=\" + occupancyStatus\n \t\t\t\t+ \"]\";\n \t}\n "
  },
  {
    "sha": "681abd35d7858f8c7eb2147044eb6e3b92aac3f8",
    "filename": "transitclockApi/src/main/java/org/transitclock/api/data/ApiPrediction.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclockApi/src/main/java/org/transitclock/api/data/ApiPrediction.java",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclockApi/src/main/java/org/transitclock/api/data/ApiPrediction.java",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclockApi/src/main/java/org/transitclock/api/data/ApiPrediction.java?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -20,6 +20,7 @@\n import javax.xml.bind.annotation.XmlAttribute;\n import javax.xml.bind.annotation.XmlRootElement;\n \n+import org.transitclock.ipc.data.IpcOccupancyStatus;\n import org.transitclock.ipc.data.IpcPrediction;\n import org.transitclock.utils.Time;\n \n@@ -83,6 +84,9 @@\n \t@XmlAttribute(name = \"passengerCount\")\n \tprivate String passengerCount;\n \n+\t@XmlAttribute(name = \"occupancyStatus\")\n+\tprivate IpcOccupancyStatus occupancyStatus;\n+\n   @XmlAttribute(name = \"isDeparture\")\n   private String isDepartureDuplicate;  //same field different name\n \n@@ -131,7 +135,9 @@ public ApiPrediction(IpcPrediction prediction) {\n \t\t// is not valid since will then be null\n \t\tif (prediction.isPassengerCountValid())\n \t\t\tpassengerCount = String.valueOf(prediction.getPassengerCount());\n-\t\t\n+\n+\t\toccupancyStatus = prediction.getOccupancyStatus();\n+\n \t\t// Only set if true so only output for rare case\n \t\tif (prediction.isDelayed())\n \t\t\tisDelayed = true;"
  },
  {
    "sha": "1c5cdd1f3ffb79e7157eba03aca8e5171a0b8912",
    "filename": "transitclockQuickStart/src/test/resources/hsql_hibernate.cfg.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/TheTransitClock/transitime/blob/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclockQuickStart/src/test/resources/hsql_hibernate.cfg.xml",
    "raw_url": "https://github.com/TheTransitClock/transitime/raw/ff73a317cbd550dcf7907991e4a5a890a8938918/transitclockQuickStart/src/test/resources/hsql_hibernate.cfg.xml",
    "contents_url": "https://api.github.com/repos/TheTransitClock/transitime/contents/transitclockQuickStart/src/test/resources/hsql_hibernate.cfg.xml?ref=ff73a317cbd550dcf7907991e4a5a890a8938918",
    "patch": "@@ -54,17 +54,12 @@\n         setting batch_size to 25 actually hurt performance by a few\n         percent. Probably much more important when db is remote and\n         network traffic could bog down the thread that is writing. -->\n-<<<<<<< HEAD:transitime/src/main/resources/postgres_hibernate.cfg.xml\n-   <property name=\"hibernate.jdbc.batch_size\">25</property>  \n-   \n-=======\n      <property name=\"hibernate.jdbc.batch_size\">1</property>\n      <property name=\"default_batch_fetch_size\">100</property>\n      <property name=\"hibernate.order_inserts\">true</property>\n      <property name=\"hibernate.order_updates\">true</property>\n      <property name=\"hibernate.connection.autocommit\">true</property>\n      <property name=\"hibernate.hbm2ddl.auto\">update</property>\n->>>>>>> 336ae7a8c5ba9942d8023817d7f7d64ffef019da:transitimeQuickStart/src/test/resources/hsql_hibernate.cfg.xml\n \n  \n    <!-- Configure db settings. Currently commented out because this"
  }
]
