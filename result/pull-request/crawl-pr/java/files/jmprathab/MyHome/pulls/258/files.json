[
  {
    "sha": "29e9f40137053bcda1b5b9fe0872f9d5a2cfcaef",
    "filename": "service/src/main/java/com/myhome/controllers/AmenityController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/controllers/AmenityController.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/controllers/AmenityController.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/controllers/AmenityController.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -24,9 +24,12 @@\n import com.myhome.model.AmenityDto;\n import com.myhome.model.GetAmenityDetailsResponse;\n import com.myhome.model.UpdateAmenityRequest;\n+import com.myhome.services.AmenityBookingService;\n import com.myhome.services.AmenityService;\n import java.util.Set;\n import javax.validation.Valid;\n+\n+import com.myhome.services.CommunityService;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.http.HttpStatus;\n@@ -43,6 +46,8 @@\n \n   private final AmenityService amenitySDJpaService;\n   private final AmenityApiMapper amenityApiMapper;\n+  private final AmenityBookingService amenityBookingService;\n+  private final CommunityService communityService;\n \n   @Override\n   public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n@@ -56,7 +61,7 @@\n   @Override\n   public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n       @PathVariable String communityId) {\n-    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n+    Set<Amenity> amenities = communityService.listAllAmenities(communityId);\n     Set<GetAmenityDetailsResponse> response =\n         amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n     return ResponseEntity.ok(response);\n@@ -98,7 +103,7 @@ public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n   // TODO: Move to api.yaml\n   @DeleteMapping(path = \"/bookings/{bookingId}\")\n   public ResponseEntity deleteBooking(@PathVariable String bookingId) {\n-    boolean isBookingDeleted = amenitySDJpaService.deleteBooking(bookingId);\n+    boolean isBookingDeleted = amenityBookingService.deleteBooking(bookingId);\n     if (isBookingDeleted) {\n       return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n     } else {"
  },
  {
    "sha": "9883e46754b170f703f1be46baaf9e386b65b16a",
    "filename": "service/src/main/java/com/myhome/controllers/CommunityController.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/controllers/CommunityController.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/controllers/CommunityController.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/controllers/CommunityController.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -34,12 +34,6 @@\n import com.myhome.model.GetHouseDetailsResponse;\n import com.myhome.model.ListCommunityAdminsResponse;\n import com.myhome.services.CommunityService;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import javax.validation.Valid;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Pageable;\n@@ -50,13 +44,21 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RestController;\n \n+import javax.validation.Valid;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n /**\n  * REST Controller which provides endpoints for managing community\n  */\n @RequiredArgsConstructor\n @RestController\n @Slf4j\n public class CommunityController implements CommunitiesApi {\n+\n   private final CommunityService communityService;\n   private final CommunityApiMapper communityApiMapper;\n "
  },
  {
    "sha": "657cf68abc2669eded073de6cd44c33950a2f188",
    "filename": "service/src/main/java/com/myhome/domain/Amenity.java",
    "status": "modified",
    "additions": 19,
    "deletions": 7,
    "changes": 26,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/domain/Amenity.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/domain/Amenity.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/domain/Amenity.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -23,6 +23,8 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.NamedAttributeNode;\n import javax.persistence.NamedEntityGraph;\n+import javax.persistence.NamedEntityGraphs;\n+\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n@@ -35,12 +37,22 @@\n @Getter\n @Setter\n @With\n-@NamedEntityGraph(\n-    name = \"Amenity.community\",\n-    attributeNodes = {\n-        @NamedAttributeNode(\"community\"),\n-    }\n-)\n+@NamedEntityGraphs({\n+    @NamedEntityGraph(\n+        name = \"Amenity.community\",\n+        attributeNodes = {\n+            @NamedAttributeNode(\"community\"),\n+        }\n+    ),\n+    @NamedEntityGraph(\n+        name = \"Amenity.community_house\",\n+        attributeNodes = {\n+            @NamedAttributeNode(\"community\"),\n+            @NamedAttributeNode(\"communityHouse\")\n+        }\n+    )\n+})\n+\n public class Amenity extends BaseEntity {\n   @Column(nullable = false, unique = true)\n   private String amenityId;\n@@ -52,6 +64,6 @@\n   private BigDecimal price;\n   @ManyToOne(fetch = FetchType.LAZY)\n   private Community community;\n-  @ManyToOne\n+  @ManyToOne(fetch = FetchType.LAZY)\n   private CommunityHouse communityHouse;\n }"
  },
  {
    "sha": "f53a1dfbff28eb0cf8ee4c9951045611816e300d",
    "filename": "service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -7,8 +7,11 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n \n+import java.util.HashSet;\n import java.util.Optional;\n \n public interface AmenityBookingItemRepository extends JpaRepository<AmenityBookingItem, String> {\n     Optional<AmenityBookingItem> findByAmenityBookingItemId(String amenityBookingItemId);\n+\n+    HashSet<AmenityBookingItem> findAllByAmenity_AmenityId(String amenityId);\n }"
  },
  {
    "sha": "8bfb98beb1c6cb42c2efc9cc1b7049c347e0fdeb",
    "filename": "service/src/main/java/com/myhome/repositories/AmenityRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/repositories/AmenityRepository.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/repositories/AmenityRepository.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/repositories/AmenityRepository.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -26,8 +26,8 @@\n public interface AmenityRepository extends JpaRepository<Amenity, Long> {\n \n   @Query(\"from Amenity amenity where amenity.amenityId = :amenityId\")\n-  @EntityGraph(value = \"Amenity.community\")\n-  Optional<Amenity> findByAmenityIdWithCommunity(@Param(\"amenityId\") String amenityId);\n+  @EntityGraph(value = \"Amenity.community_house\")\n+  Optional<Amenity> findByAmenityIdWithCommunityAndHouse(@Param(\"amenityId\") String amenityId);\n \n   Optional<Amenity> findByAmenityId(String amenityId);\n }"
  },
  {
    "sha": "3888fd9a313882a1c6f25a1ac96bb8ccb5ef00ad",
    "filename": "service/src/main/java/com/myhome/services/AmenityBookingService.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/AmenityBookingService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/AmenityBookingService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/AmenityBookingService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -0,0 +1,14 @@\n+package com.myhome.services;\n+\n+import com.myhome.domain.Amenity;\n+import com.myhome.domain.AmenityBookingItem;\n+\n+import java.time.LocalDateTime;\n+\n+public interface AmenityBookingService {\n+  AmenityBookingItem bookAmenity(Amenity amenity, LocalDateTime bookingStartDate, LocalDateTime bookingEndDate);\n+\n+  boolean deleteBooking(String bookingId);\n+\n+  void removeAllAmenityBookings(String amenityID);\n+}"
  },
  {
    "sha": "061906bf77333b095a5486f9d760d3bdac252ecf",
    "filename": "service/src/main/java/com/myhome/services/AmenityService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/AmenityService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/AmenityService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/AmenityService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -30,9 +30,6 @@\n \n   boolean deleteAmenity(String amenityId);\n \n-  Set<Amenity> listAllAmenities(String communityId);\n-\n   boolean updateAmenity(AmenityDto updatedAmenityDto);\n \n-  boolean deleteBooking(String bookingId);\n }"
  },
  {
    "sha": "e3c1a0e4e9afdd8b6a4132da50cee490be0d2f49",
    "filename": "service/src/main/java/com/myhome/services/CommunityService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/CommunityService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/CommunityService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/CommunityService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -17,6 +17,7 @@\n package com.myhome.services;\n \n import com.myhome.controllers.dto.CommunityDto;\n+import com.myhome.domain.Amenity;\n import com.myhome.domain.Community;\n import com.myhome.domain.CommunityHouse;\n import com.myhome.domain.User;\n@@ -34,6 +35,8 @@\n \n   Optional<Community> getCommunityDetailsById(String communityId);\n \n+  Set<Amenity> listAllAmenities(String communityId);\n+\n   Optional<List<CommunityHouse>> findCommunityHousesById(String communityId, Pageable pageable);\n \n   Optional<List<User>> findCommunityAdminsById(String communityId, Pageable pageable);"
  },
  {
    "sha": "777f643f82fc6406e51b8e73298a1b6947123110",
    "filename": "service/src/main/java/com/myhome/services/HouseService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/HouseService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/HouseService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/HouseService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -37,4 +37,6 @@\n   Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable);\n \n   Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId, Pageable pageable);\n+\n+  boolean removeAmenityFromHouse(CommunityHouse house, String amenityId);\n }"
  },
  {
    "sha": "5a1c741f18df0ba22a4f1b47a20463403c77c732",
    "filename": "service/src/main/java/com/myhome/services/springdatajpa/AmenityBookingSDJpaService.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/AmenityBookingSDJpaService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/AmenityBookingSDJpaService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/springdatajpa/AmenityBookingSDJpaService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -0,0 +1,43 @@\n+package com.myhome.services.springdatajpa;\n+\n+import com.myhome.domain.Amenity;\n+import com.myhome.domain.AmenityBookingItem;\n+import com.myhome.repositories.AmenityBookingItemRepository;\n+import com.myhome.services.AmenityBookingService;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.LocalDateTime;\n+import java.util.HashSet;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class AmenityBookingSDJpaService implements AmenityBookingService {\n+\n+  private final AmenityBookingItemRepository bookingItemRepository;\n+\n+  @Override\n+  public AmenityBookingItem bookAmenity(Amenity amenity, LocalDateTime bookingStartDate, LocalDateTime bookingEndDate) {\n+    AmenityBookingItem newBooking = new AmenityBookingItem(null, amenity,\n+        bookingStartDate, bookingEndDate, null);\n+    return bookingItemRepository.save(newBooking);\n+  }\n+\n+  @Override\n+  public boolean deleteBooking(String bookingId) {\n+    return bookingItemRepository.findByAmenityBookingItemId(bookingId)\n+        .map(bookingItem -> {\n+          bookingItemRepository.delete(bookingItem);\n+          return true;\n+        })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public void removeAllAmenityBookings(String amenityId) {\n+    HashSet<AmenityBookingItem> bookings = bookingItemRepository.findAllByAmenity_AmenityId(amenityId);\n+    if(!bookings.isEmpty()) {\n+      bookingItemRepository.deleteAll(bookings);\n+    }\n+  }\n+}"
  },
  {
    "sha": "b337a557910ed6b228021ce6e135ee41b89282be",
    "filename": "service/src/main/java/com/myhome/services/springdatajpa/AmenitySDJpaService.java",
    "status": "modified",
    "additions": 13,
    "deletions": 28,
    "changes": 41,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/AmenitySDJpaService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/AmenitySDJpaService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/springdatajpa/AmenitySDJpaService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -20,16 +20,17 @@\n import com.myhome.domain.Amenity;\n import com.myhome.domain.Community;\n import com.myhome.model.AmenityDto;\n-import com.myhome.repositories.AmenityBookingItemRepository;\n import com.myhome.repositories.AmenityRepository;\n-import com.myhome.repositories.CommunityRepository;\n+import com.myhome.services.AmenityBookingService;\n import com.myhome.services.AmenityService;\n import com.myhome.services.CommunityService;\n-import java.util.HashSet;\n+\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n+\n+import com.myhome.services.HouseService;\n import lombok.RequiredArgsConstructor;\n import org.springframework.stereotype.Service;\n \n@@ -38,10 +39,10 @@\n public class AmenitySDJpaService implements AmenityService {\n \n   private final AmenityRepository amenityRepository;\n-  private final CommunityRepository communityRepository;\n   private final CommunityService communityService;\n   private final AmenityApiMapper amenityApiMapper;\n-  private final AmenityBookingItemRepository bookingRepository;\n+  private final AmenityBookingService amenityBookingService;\n+  private final HouseService houseService;\n \n   @Override\n   public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n@@ -70,29 +71,24 @@\n \n   @Override\n   public boolean deleteAmenity(String amenityId) {\n-    return amenityRepository.findByAmenityIdWithCommunity(amenityId)\n+    return amenityRepository.findByAmenityIdWithCommunityAndHouse(amenityId)\n         .map(amenity -> {\n-          Community community = amenity.getCommunity();\n-          community.getAmenities().remove(amenity);\n+          amenityBookingService.removeAllAmenityBookings(amenity.getAmenityId());\n+          if(amenity.getCommunityHouse() != null) {\n+            houseService.removeAmenityFromHouse(amenity.getCommunityHouse(),\n+                amenity.getAmenityId());\n+          }\n           amenityRepository.delete(amenity);\n           return true;\n         })\n         .orElse(false);\n   }\n \n-  @Override\n-  public Set<Amenity> listAllAmenities(String communityId) {\n-    return communityRepository.findByCommunityIdWithAmenities(communityId)\n-        .map(Community::getAmenities)\n-        .orElse(new HashSet<>());\n-  }\n-\n   @Override\n   public boolean updateAmenity(AmenityDto updatedAmenity) {\n     String amenityId = updatedAmenity.getAmenityId();\n     return amenityRepository.findByAmenityId(amenityId)\n-        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n-            .map(community -> {\n+        .map(amenity ->  {\n               Amenity updated = new Amenity();\n               updated.setName(updatedAmenity.getName());\n               updated.setPrice(updatedAmenity.getPrice());\n@@ -101,17 +97,6 @@ public boolean updateAmenity(AmenityDto updatedAmenity) {\n               updated.setDescription(updatedAmenity.getDescription());\n               return updated;\n             })\n-            .orElse(null))\n         .map(amenityRepository::save).isPresent();\n   }\n-\n-  @Override\n-  public boolean deleteBooking(String bookingId) {\n-    return bookingRepository.findByAmenityBookingItemId(bookingId)\n-        .map(bookingItem -> {\n-          bookingRepository.delete(bookingItem);\n-          return true;\n-        })\n-        .orElse(false);\n-  }\n }"
  },
  {
    "sha": "5d22220ec3542ecaac5a0051d9aa4f499cdf44e6",
    "filename": "service/src/main/java/com/myhome/services/springdatajpa/CommunitySDJpaService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/CommunitySDJpaService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/CommunitySDJpaService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/springdatajpa/CommunitySDJpaService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -18,6 +18,7 @@\n \n import com.myhome.controllers.dto.CommunityDto;\n import com.myhome.controllers.dto.mapper.CommunityMapper;\n+import com.myhome.domain.Amenity;\n import com.myhome.domain.Community;\n import com.myhome.domain.CommunityHouse;\n import com.myhome.domain.HouseMember;\n@@ -84,6 +85,13 @@ private Community addAdminToCommunity(Community community, String userId) {\n     return communities;\n   }\n \n+  @Override\n+  public Set<Amenity> listAllAmenities(String communityId) {\n+    return communityRepository.findByCommunityIdWithAmenities(communityId)\n+        .map(Community::getAmenities)\n+        .orElse(new HashSet<>());\n+  }\n+\n   @Override\n   public Optional<List<CommunityHouse>> findCommunityHousesById(String communityId,\n       Pageable pageable) {"
  },
  {
    "sha": "e11185159bdaf7fac1c78269da596fa55a7b46ec",
    "filename": "service/src/main/java/com/myhome/services/springdatajpa/HouseSDJpaService.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/HouseSDJpaService.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/main/java/com/myhome/services/springdatajpa/HouseSDJpaService.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/main/java/com/myhome/services/springdatajpa/HouseSDJpaService.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -115,4 +115,13 @@ public boolean deleteMemberFromHouse(String houseId, String memberId) {\n         houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)\n     );\n   }\n+\n+  @Override\n+  public boolean removeAmenityFromHouse(CommunityHouse house, String amenityId) {\n+    boolean removed = house.getAmenities().removeIf(amenity -> amenity.getAmenityId().equals(amenityId));\n+    if (removed) {\n+      communityHouseRepository.save(house);\n+    }\n+    return removed;\n+  }\n }"
  },
  {
    "sha": "c87ee5b1d8a3a1d7566c4d77b0ca1f06aa8404bb",
    "filename": "service/src/test/java/com/myhome/controllers/AmenityControllerTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/controllers/AmenityControllerTest.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/controllers/AmenityControllerTest.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/test/java/com/myhome/controllers/AmenityControllerTest.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -23,6 +23,7 @@\n import com.myhome.model.AmenityDto;\n import com.myhome.model.GetAmenityDetailsResponse;\n import com.myhome.model.UpdateAmenityRequest;\n+import com.myhome.services.AmenityBookingService;\n import com.myhome.services.AmenityService;\n import java.math.BigDecimal;\n import java.util.HashSet;\n@@ -56,6 +57,8 @@\n   private AmenityService amenitySDJpaService;\n   @Mock\n   private AmenityApiMapper amenityApiMapper;\n+  @Mock\n+  private AmenityBookingService amenityBookingService;\n \n   @InjectMocks\n   private AmenityController amenityController;\n@@ -223,7 +226,7 @@ void shouldNotUpdateCommunityAmenityIfAmenityNotExists() {\n   @Test\n   void deleteBooking() {\n     // given\n-    given(amenitySDJpaService.deleteBooking(TEST_BOOKING_ID))\n+    given(amenityBookingService.deleteBooking(TEST_BOOKING_ID))\n         .willReturn(true);\n \n     // when\n@@ -232,13 +235,13 @@ void deleteBooking() {\n     // then\n     assertNull(response.getBody());\n     assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n-    verify(amenitySDJpaService).deleteBooking(TEST_BOOKING_ID);\n+    verify(amenityBookingService).deleteBooking(TEST_BOOKING_ID);\n   }\n \n   @Test\n   void deleteBookingNotExists() {\n     // given\n-    given(amenitySDJpaService.deleteBooking(TEST_BOOKING_ID))\n+    given(amenityBookingService.deleteBooking(TEST_BOOKING_ID))\n         .willReturn(false);\n \n     // when\n@@ -247,7 +250,7 @@ void deleteBookingNotExists() {\n     // then\n     assertNull(response.getBody());\n     assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n-    verify(amenitySDJpaService).deleteBooking(TEST_BOOKING_ID);\n+    verify(amenityBookingService).deleteBooking(TEST_BOOKING_ID);\n   }\n \n   private Amenity getTestAmenity() {"
  },
  {
    "sha": "bb2797ba43eb34ef21c1236cf5bd160eceb4afda",
    "filename": "service/src/test/java/com/myhome/services/unit/AmenityBookingSDJpaServiceTest.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/services/unit/AmenityBookingSDJpaServiceTest.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/services/unit/AmenityBookingSDJpaServiceTest.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/test/java/com/myhome/services/unit/AmenityBookingSDJpaServiceTest.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -0,0 +1,111 @@\n+package com.myhome.services.unit;\n+\n+import com.myhome.domain.AmenityBookingItem;\n+import com.myhome.repositories.AmenityBookingItemRepository;\n+import com.myhome.services.springdatajpa.AmenityBookingSDJpaService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+public class AmenityBookingSDJpaServiceTest {\n+\n+  private static final String TEST_BOOKING_ID = \"test-booking-id\";\n+  private static final String TEST_AMENITY_ID = \"test-amenity-id\";\n+\n+  @Mock\n+  private AmenityBookingItemRepository bookingItemRepository;\n+\n+  @InjectMocks\n+  private AmenityBookingSDJpaService amenityBookingService;\n+\n+  @BeforeEach\n+  private void init() {\n+    MockitoAnnotations.initMocks(this);\n+  }\n+\n+  @Test\n+  void shouldDeleteBookingItem() {\n+    // given\n+    AmenityBookingItem testBookingItem = getTestBookingItem();\n+\n+    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n+        .willReturn(Optional.of(testBookingItem));\n+\n+    // when\n+    boolean bookingDeleted = amenityBookingService.deleteBooking(TEST_BOOKING_ID);\n+\n+    // then\n+    assertTrue(bookingDeleted);\n+    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n+    verify(bookingItemRepository).delete(testBookingItem);\n+  }\n+\n+  @Test\n+  void shouldNotDeleteBookingItemIfNotExists() {\n+    // given\n+    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n+        .willReturn(Optional.empty());\n+\n+    // when\n+    boolean amenityDeleted = amenityBookingService.deleteBooking(TEST_BOOKING_ID);\n+\n+    // then\n+    assertFalse(amenityDeleted);\n+    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n+    verify(bookingItemRepository, never()).delete(any());\n+  }\n+\n+  @Test\n+  void shouldRemoveAllAmenityBookings() {\n+    // given\n+    HashSet<AmenityBookingItem> testAmenityBookings = new HashSet<AmenityBookingItem>() {{\n+      add(getTestBookingItem(\"test-amenity-1\"));\n+      add(getTestBookingItem(\"test-amenity-2\"));\n+    }};\n+    given(bookingItemRepository.findAllByAmenity_AmenityId(TEST_AMENITY_ID))\n+        .willReturn(testAmenityBookings);\n+\n+    // when\n+    amenityBookingService.removeAllAmenityBookings(TEST_AMENITY_ID);\n+\n+    // then\n+    verify(bookingItemRepository).findAllByAmenity_AmenityId(TEST_AMENITY_ID);\n+    verify(bookingItemRepository).deleteAll(testAmenityBookings);\n+  }\n+\n+  @Test\n+  void ShouldNotRemoveAllAmenityBookingsIfAmenityNotExists() {\n+    // given\n+    given(bookingItemRepository.findAllByAmenity_AmenityId(TEST_AMENITY_ID))\n+        .willReturn(new HashSet<>());\n+\n+    // when\n+    amenityBookingService.removeAllAmenityBookings(TEST_AMENITY_ID);\n+\n+    // then\n+    verify(bookingItemRepository).findAllByAmenity_AmenityId(TEST_AMENITY_ID);\n+    verify(bookingItemRepository, never()).deleteAll(any());\n+  }\n+\n+  private AmenityBookingItem getTestBookingItem() {\n+    return getTestBookingItem(TEST_BOOKING_ID);\n+  }\n+\n+  private AmenityBookingItem getTestBookingItem(String bookingID) {\n+    return new AmenityBookingItem()\n+        .withAmenityBookingItemId(bookingID);\n+  }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6281c977edcb8e39d3286a25195d259e64d8acc1",
    "filename": "service/src/test/java/com/myhome/services/unit/AmenitySDJpaServiceTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 83,
    "changes": 92,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/services/unit/AmenitySDJpaServiceTest.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/services/unit/AmenitySDJpaServiceTest.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/test/java/com/myhome/services/unit/AmenitySDJpaServiceTest.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -18,20 +18,19 @@\n \n import com.myhome.controllers.mapper.AmenityApiMapper;\n import com.myhome.domain.Amenity;\n-import com.myhome.domain.AmenityBookingItem;\n import com.myhome.domain.Community;\n import com.myhome.model.AmenityDto;\n import com.myhome.repositories.AmenityBookingItemRepository;\n import com.myhome.repositories.AmenityRepository;\n import com.myhome.repositories.CommunityRepository;\n+import com.myhome.services.AmenityBookingService;\n import com.myhome.services.CommunityService;\n import com.myhome.services.springdatajpa.AmenitySDJpaService;\n import helpers.TestUtils;\n import java.math.BigDecimal;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.InjectMocks;\n@@ -48,17 +47,15 @@\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n \n class AmenitySDJpaServiceTest {\n \n   private static final String TEST_AMENITY_NAME = \"test-amenity-name\";\n   private static final BigDecimal TEST_AMENITY_PRICE = BigDecimal.valueOf(1);\n-  private static final String TEST_BOOKING_ID = \"test-booking-id\";\n   private final String TEST_AMENITY_ID = \"test-amenity-id\";\n   private final String TEST_AMENITY_DESCRIPTION = \"test-amenity-description\";\n   private final String TEST_COMMUNITY_ID = \"test-community-id\";\n-  private final int TEST_AMENITIES_COUNT = 2;\n+\n   @Mock\n   private AmenityRepository amenityRepository;\n   @Mock\n@@ -68,7 +65,7 @@\n   @Mock\n   private AmenityApiMapper amenityApiMapper;\n   @Mock\n-  private AmenityBookingItemRepository bookingItemRepository;\n+  private AmenityBookingService amenityBookingService;\n \n   @InjectMocks\n   private AmenitySDJpaService amenitySDJpaService;\n@@ -84,65 +81,34 @@ void deleteAmenity() {\n     Amenity testAmenity =\n         TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n \n-    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n+    given(amenityRepository.findByAmenityIdWithCommunityAndHouse(TEST_AMENITY_ID))\n         .willReturn(Optional.of(testAmenity));\n \n     // when\n     boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n \n     // then\n     assertTrue(amenityDeleted);\n-    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n+    verify(amenityRepository).findByAmenityIdWithCommunityAndHouse(TEST_AMENITY_ID);\n+    verify(amenityBookingService).removeAllAmenityBookings(TEST_AMENITY_ID);\n     verify(amenityRepository).delete(testAmenity);\n   }\n \n   @Test\n   void deleteAmenityNotExists() {\n     // given\n-    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n+    given(amenityRepository.findByAmenityIdWithCommunityAndHouse(TEST_AMENITY_ID))\n         .willReturn(Optional.empty());\n \n     // when\n     boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n \n     // then\n     assertFalse(amenityDeleted);\n-    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n+    verify(amenityRepository).findByAmenityIdWithCommunityAndHouse(TEST_AMENITY_ID);\n     verify(amenityRepository, never()).delete(any());\n   }\n \n-  @Test\n-  void listAllAmenities() {\n-    // given\n-    Set<Amenity> testAmenities = TestUtils.AmenityHelpers.getTestAmenities(TEST_AMENITIES_COUNT);\n-    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n-    testCommunity.setAmenities(testAmenities);\n-\n-    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n-        .willReturn(Optional.of(testCommunity));\n-\n-    // when\n-    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n-\n-    // then\n-    assertEquals(testAmenities, resultAmenities);\n-    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n-  }\n-\n-  @Test\n-  void listAllAmenitiesNotExists() {\n-    // given\n-    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n-        .willReturn(Optional.empty());\n-\n-    // when\n-    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n-\n-    // then\n-    assertEquals(new HashSet<>(), resultAmenities);\n-    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n-  }\n-\n   @Test\n   void shouldAddAmenityToExistingCommunity() {\n     // given\n@@ -229,7 +195,6 @@ void shouldUpdateCommunityAmenitySuccessfully() {\n     // then\n     assertTrue(result);\n     verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n-    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n     verify(amenityRepository).save(updatedAmenity);\n   }\n \n@@ -270,7 +235,6 @@ void shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() {\n     // then\n     assertFalse(result);\n     verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n-    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n     verify(amenityRepository).save(updatedAmenity);\n   }\n \n@@ -292,40 +256,7 @@ void shouldNotUpdateAmenityIfCommunityDoesNotExist() {\n     // then\n     assertFalse(result);\n     verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n-    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n-    verifyNoMoreInteractions(amenityRepository);\n-  }\n-\n-  @Test\n-  void deleteBookingItem() {\n-    // given\n-    AmenityBookingItem testBookingItem = getTestBookingItem();\n-\n-    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n-        .willReturn(Optional.of(testBookingItem));\n-\n-    // when\n-    boolean bookingDeleted = amenitySDJpaService.deleteBooking(TEST_BOOKING_ID);\n-\n-    // then\n-    assertTrue(bookingDeleted);\n-    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n-    verify(bookingItemRepository).delete(testBookingItem);\n-  }\n-\n-  @Test\n-  void deleteBookingNotExists() {\n-    // given\n-    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n-        .willReturn(Optional.empty());\n-\n-    // when\n-    boolean amenityDeleted = amenitySDJpaService.deleteBooking(TEST_BOOKING_ID);\n-\n-    // then\n-    assertFalse(amenityDeleted);\n-    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n-    verify(bookingItemRepository, never()).delete(any());\n+    verify(amenityRepository).save(communityAmenity);\n   }\n \n   private AmenityDto getTestAmenityDto() {\n@@ -349,9 +280,4 @@ private Amenity getUpdatedCommunityAmenity() {\n         .withDescription(communityAmenityDto.getDescription())\n         .withCommunity(TestUtils.CommunityHelpers.getTestCommunity());\n   }\n-\n-  private AmenityBookingItem getTestBookingItem() {\n-    return new AmenityBookingItem()\n-        .withAmenityBookingItemId(TEST_BOOKING_ID);\n-  }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "2f2e5f0f2c531a17e8bb5d4626097bef31f224ed",
    "filename": "service/src/test/java/com/myhome/services/unit/CommunitySDJpaServiceTest.java",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/jmprathab/MyHome/blob/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/services/unit/CommunitySDJpaServiceTest.java",
    "raw_url": "https://github.com/jmprathab/MyHome/raw/651b44d38eef5dd469f222686c5ce8aaf3e4b2ef/service/src/test/java/com/myhome/services/unit/CommunitySDJpaServiceTest.java",
    "contents_url": "https://api.github.com/repos/jmprathab/MyHome/contents/service/src/test/java/com/myhome/services/unit/CommunitySDJpaServiceTest.java?ref=651b44d38eef5dd469f222686c5ce8aaf3e4b2ef",
    "patch": "@@ -16,6 +16,7 @@\n \n package com.myhome.services.unit;\n \n+import com.myhome.domain.Amenity;\n import helpers.TestUtils;\n import com.myhome.controllers.dto.CommunityDto;\n import com.myhome.controllers.dto.mapper.CommunityMapper;\n@@ -64,6 +65,7 @@\n   private final int TEST_HOUSES_COUNT = 2;\n   private final int TEST_HOUSE_MEMBERS_COUNT = 2;\n   private final int TEST_COMMUNITIES_COUNT = 2;\n+  private final int TEST_AMENITIES_COUNT = 2;\n \n   private final String TEST_ADMIN_ID = \"test-admin-id\";\n   private final String TEST_ADMIN_NAME = \"test-user-name\";\n@@ -565,6 +567,38 @@ void removeHouseFromCommunityByHouseIdHouseNotInCommunity() {\n     verify(communityRepository, never()).save(testCommunity);\n   }\n \n+  @Test\n+  void shouldListAllAmenities() {\n+    // given\n+    Set<Amenity> testAmenities = TestUtils.AmenityHelpers.getTestAmenities(TEST_AMENITIES_COUNT);\n+    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n+    testCommunity.setAmenities(testAmenities);\n+\n+    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n+        .willReturn(Optional.of(testCommunity));\n+\n+    // when\n+    Set<Amenity> resultAmenities = communitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n+\n+    // then\n+    assertEquals(testAmenities, resultAmenities);\n+    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n+  }\n+\n+  @Test\n+  void shouldReturnZeroResultsIfNoAmenitiesPresent() {\n+    // given\n+    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n+        .willReturn(Optional.empty());\n+\n+    // when\n+    Set<Amenity> resultAmenities = communitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n+\n+    // then\n+    assertEquals(new HashSet<>(), resultAmenities);\n+    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n+  }\n+\n   private CommunityDto getTestCommunityDto() {\n     CommunityDto testCommunityDto = new CommunityDto();\n     testCommunityDto.setCommunityId(TEST_COMMUNITY_ID);"
  }
]
