[
  {
    "sha": "82a358c3b77849a597f93ff3bb569b06268d34f0",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/pom.xml",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/pom.xml",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/pom.xml?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -169,6 +169,11 @@\n             <artifactId>quarkus-junit5</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>io.rest-assured</groupId>\n             <artifactId>rest-assured</artifactId>"
  },
  {
    "sha": "6c22b9f72db396a9f0646d52e997fafbc0bbb5d0",
    "filename": "src/main/java/com/redhat/cloud/notifications/db/EndpointResources.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/db/EndpointResources.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/db/EndpointResources.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/db/EndpointResources.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -1,7 +1,7 @@\n package com.redhat.cloud.notifications.db;\n \n import com.redhat.cloud.notifications.models.Endpoint;\n-import com.redhat.cloud.notifications.models.WebhookAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes;\n import io.r2dbc.postgresql.api.PostgresqlConnection;\n import io.r2dbc.postgresql.api.PostgresqlResult;\n import io.r2dbc.postgresql.api.PostgresqlStatement;"
  },
  {
    "sha": "7a8af7d82c0c04ed826951176b2ea0fd63a8a2fb",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/EmailSubscriptionAttributes.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/b681f33898be36a2476cd76fb8349a346cdbc9e2/src/main/java/com/redhat/cloud/notifications/models/EmailSubscriptionAttributes.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/b681f33898be36a2476cd76fb8349a346cdbc9e2/src/main/java/com/redhat/cloud/notifications/models/EmailSubscriptionAttributes.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/EmailSubscriptionAttributes.java?ref=b681f33898be36a2476cd76fb8349a346cdbc9e2",
    "patch": "@@ -1,7 +0,0 @@\n-package com.redhat.cloud.notifications.models;\n-\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-\n-@JsonSerialize\n-public class EmailSubscriptionAttributes extends Attributes {\n-}"
  },
  {
    "sha": "2a8fada16d05e0a4aef8093fc29f66504e109de6",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/Endpoint.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/Endpoint.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/Endpoint.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/Endpoint.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -6,6 +6,9 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonSubTypes;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.Attributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.EmailSubscriptionAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes;\n import org.eclipse.microprofile.openapi.annotations.media.Schema;\n \n import javax.validation.Valid;"
  },
  {
    "sha": "9f6c9c85925d5d848504e13e6308a3d5ec33c350",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/Meta.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/Meta.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/Meta.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/Meta.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -1,4 +1,4 @@\n-package com.redhat.cloud.notifications.routers.models;\n+package com.redhat.cloud.notifications.models;\n \n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n ",
    "previous_filename": "src/main/java/com/redhat/cloud/notifications/routers/models/Meta.java"
  },
  {
    "sha": "241931b3aa694edb6bb649048ad9254b68560215",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/Page.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/Page.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/Page.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/Page.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -1,4 +1,4 @@\n-package com.redhat.cloud.notifications.routers.models;\n+package com.redhat.cloud.notifications.models;\n \n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n ",
    "previous_filename": "src/main/java/com/redhat/cloud/notifications/routers/models/Page.java"
  },
  {
    "sha": "4f41a71c3922d052432b8eacbb172df3fa48b9a7",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/Attributes.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/Attributes.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/Attributes.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/Attributes.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -1,4 +1,4 @@\n-package com.redhat.cloud.notifications.models;\n+package com.redhat.cloud.notifications.models.endpoint.attributes;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n ",
    "previous_filename": "src/main/java/com/redhat/cloud/notifications/models/Attributes.java"
  },
  {
    "sha": "fadcd49a95a25c585c60da05dd73776cdb0061f5",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/DefaultsAttributes.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/DefaultsAttributes.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/DefaultsAttributes.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/DefaultsAttributes.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -1,4 +1,4 @@\n-package com.redhat.cloud.notifications.models;\n+package com.redhat.cloud.notifications.models.endpoint.attributes;\n \n import javax.validation.constraints.NotNull;\n import java.util.ArrayList;",
    "previous_filename": "src/main/java/com/redhat/cloud/notifications/models/DefaultsAttributes.java"
  },
  {
    "sha": "25782c4ef2627f974afc9e594569126267c2e279",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/EmailSubscriptionAttributes.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/EmailSubscriptionAttributes.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/EmailSubscriptionAttributes.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/EmailSubscriptionAttributes.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,64 @@\n+package com.redhat.cloud.notifications.models.endpoint.attributes;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+@JsonSerialize\n+public class EmailSubscriptionAttributes extends Attributes {\n+\n+    public static class Recipient {\n+        private Boolean onlyAdmins;\n+        private Boolean ignorePreferences;\n+        private UUID groupId;\n+\n+\n+        public Boolean getOnlyAdmins() {\n+            return onlyAdmins;\n+        }\n+\n+        public void setOnlyAdmins(Boolean onlyAdmins) {\n+            this.onlyAdmins = onlyAdmins;\n+        }\n+\n+        public Boolean getIgnorePreferences() {\n+            return ignorePreferences;\n+        }\n+\n+        public void setIgnorePreferences(Boolean ignorePreferences) {\n+            this.ignorePreferences = ignorePreferences;\n+        }\n+\n+        public UUID getGroupId() {\n+            return groupId;\n+        }\n+\n+        public void setGroupId(UUID groupId) {\n+            this.groupId = groupId;\n+        }\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public List<Recipient> getRecipients() {\n+        return recipients;\n+    }\n+\n+    public void setRecipients(List<Recipient> recipients) {\n+        this.recipients = recipients;\n+    }\n+\n+    @JsonIgnore\n+    private Integer id;\n+\n+    private List<Recipient> recipients;\n+\n+}"
  },
  {
    "sha": "0dbe64e8302e9773759de9b37cd0b127f5e35804",
    "filename": "src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/WebhookAttributes.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/WebhookAttributes.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/WebhookAttributes.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/models/endpoint/attributes/WebhookAttributes.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -1,4 +1,4 @@\n-package com.redhat.cloud.notifications.models;\n+package com.redhat.cloud.notifications.models.endpoint.attributes;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;",
    "previous_filename": "src/main/java/com/redhat/cloud/notifications/models/WebhookAttributes.java"
  },
  {
    "sha": "52ebaca92d5c6718374c6c617fc367bbf63e1e1d",
    "filename": "src/main/java/com/redhat/cloud/notifications/processors/email/EmailSubscriptionTypeProcessor.java",
    "status": "modified",
    "additions": 65,
    "deletions": 4,
    "changes": 69,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/processors/email/EmailSubscriptionTypeProcessor.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/processors/email/EmailSubscriptionTypeProcessor.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/processors/email/EmailSubscriptionTypeProcessor.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -7,13 +7,18 @@\n import com.redhat.cloud.notifications.models.EmailAggregation;\n import com.redhat.cloud.notifications.models.EmailAggregationKey;\n import com.redhat.cloud.notifications.models.EmailSubscription.EmailSubscriptionType;\n+import com.redhat.cloud.notifications.models.Endpoint;\n import com.redhat.cloud.notifications.models.Notification;\n import com.redhat.cloud.notifications.models.NotificationHistory;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.EmailSubscriptionAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.EmailSubscriptionAttributes.Recipient;\n import com.redhat.cloud.notifications.processors.EndpointTypeProcessor;\n import com.redhat.cloud.notifications.processors.email.aggregators.AbstractEmailPayloadAggregator;\n import com.redhat.cloud.notifications.processors.email.aggregators.EmailPayloadAggregatorFactory;\n import com.redhat.cloud.notifications.processors.email.bop.Email;\n import com.redhat.cloud.notifications.processors.webhooks.WebhookTypeProcessor;\n+import com.redhat.cloud.notifications.recipients.User;\n+import com.redhat.cloud.notifications.recipients.rbac.RbacRecipientUsersProvider;\n import com.redhat.cloud.notifications.templates.AbstractEmailTemplate;\n import com.redhat.cloud.notifications.templates.EmailTemplateFactory;\n import io.quarkus.scheduler.Scheduled;\n@@ -28,13 +33,15 @@\n import io.vertx.mutiny.ext.web.client.HttpRequest;\n import io.vertx.mutiny.ext.web.client.WebClient;\n import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.reactivestreams.Publisher;\n \n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n import java.time.Instant;\n import java.time.LocalDateTime;\n import java.time.ZoneId;\n import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n@@ -63,6 +70,9 @@\n     @Inject\n     EndpointEmailSubscriptionResources subscriptionResources;\n \n+    @Inject\n+    RbacRecipientUsersProvider recipientUsersProvider;\n+\n     @Inject\n     EmailAggregationResources emailAggregationResources;\n \n@@ -142,12 +152,47 @@ public void addEmail(Email email) {\n         return sendEmail(item, EmailSubscriptionType.INSTANT);\n     }\n \n+    private Uni<Set<String>> recipientsForNotifcation(Notification item, EmailSubscriptionType emailSubscriptionType) {\n+        final EmailSubscriptionAttributes properties = (EmailSubscriptionAttributes) item.getEndpoint().getProperties();\n+        final List<Publisher<Set<String>>> userSources = new ArrayList<>();\n+\n+        final Uni<HashSet<String>> subscriptions = this.subscriptionResources.getEmailSubscribers(item.getTenant(), item.getAction().getBundle(), item.getAction().getApplication(), emailSubscriptionType)\n+                .collectItems().in(HashSet<String>::new, (usernames, emailSubscription) -> usernames.add(emailSubscription.getUsername())).memoize().indefinitely();\n+\n+        for (Recipient recipient : properties.getRecipients()) {\n+            Multi<User> multiUsers;\n+            if (recipient.getGroupId() == null) {\n+                multiUsers = recipientUsersProvider.getUsers(item.getTenant(), recipient.getOnlyAdmins());\n+            } else {\n+                multiUsers = recipientUsersProvider.getGroupUsers(item.getTenant(), recipient.getOnlyAdmins(), recipient.getGroupId().toString());\n+            }\n+\n+            userSources.add(\n+                    multiUsers\n+                            .onItem()\n+                            .transform(user -> user.getUsername()).collectItems().asList()\n+                            .onItem().transform(HashSet::new)\n+                            .onItem().transformToUni(foundUsers -> {\n+                                if (recipient.getIgnorePreferences()) {\n+                                    return Uni.createFrom().item(foundUsers);\n+                                }\n+\n+                                return subscriptions.onItem().transform(subscribedUsers -> {\n+                                    Set<String> intersection = new HashSet<>(foundUsers);\n+                                    intersection.retainAll(subscribedUsers);\n+                                    return intersection;\n+                                });\n+                            }).toMulti()\n+            );\n+        }\n+\n+        return Multi.createBy().merging().streams(userSources).collectItems().in(HashSet::new, Set::addAll);\n+    }\n+\n     private Uni<NotificationHistory> sendEmail(Notification item, EmailSubscriptionType emailSubscriptionType) {\n         final HttpRequest<Buffer> bopRequest = this.buildBOPHttpRequest();\n \n-        return this.subscriptionResources.getEmailSubscribers(item.getTenant(), item.getAction().getBundle(), item.getAction().getApplication(), emailSubscriptionType)\n-            .onItem().transform(emailSubscription -> emailSubscription.getUsername())\n-                .collectItems().with(Collectors.toSet())\n+        return recipientsForNotifcation(item, emailSubscriptionType)\n                 .onItem().transform(userSet -> {\n                     if (userSet.size() > 0) {\n                         return this.buildEmail(userSet);\n@@ -250,6 +295,9 @@ public void addEmail(Email email) {\n \n     private Multi<Tuple2<NotificationHistory, EmailAggregationKey>> processAggregateEmailsByAggregationKey(EmailAggregationKey aggregationKey, LocalDateTime startTime, LocalDateTime endTime, EmailSubscriptionType emailSubscriptionType, boolean delete) {\n \n+        // Todo: This process multiple aggregations over eventTypes: Currently there is no way to know specifics on to who send it? (other than use the subscription)\n+        // In the future we will have a EmailSubscriptionDaily endpoint which can be added to the EmailAggregation to know how to process\n+        // We will have to build the report for each user but at notification time we will build what to send and when.\n         return subscriptionResources.getEmailSubscribersCount(aggregationKey.getAccountId(), aggregationKey.getBundle(), aggregationKey.getApplication(), emailSubscriptionType)\n                 .onItem().transformToMulti(subscriberCount -> {\n                     AbstractEmailPayloadAggregator aggregator = EmailPayloadAggregatorFactory.by(aggregationKey);\n@@ -289,8 +337,21 @@ public void addEmail(Email email) {\n                     action.setEventType(null);\n                     action.setTimestamp(LocalDateTime.now());\n \n+                    // Configure a default endpoint that sends to subscribed users\n+                    // Todo: We need to add an endpoint to the Aggregation and update this logic.\n+                    // In the future we will have a designated endpoint for the daily emails\n+                    Endpoint endpoint = new Endpoint();\n+                    EmailSubscriptionAttributes emailSubscriptionAttributes = new EmailSubscriptionAttributes();\n+                    Recipient recipient = new Recipient();\n+                    recipient.setGroupId(null);\n+                    recipient.setIgnorePreferences(false);\n+                    recipient.setOnlyAdmins(false);\n+\n+                    emailSubscriptionAttributes.setRecipients(List.of(recipient));\n+                    endpoint.setProperties(emailSubscriptionAttributes);\n+\n                     // We don't have any endpoint as this aggregates multiple endpoints\n-                    Notification item = new Notification(action, null);\n+                    Notification item = new Notification(action, endpoint);\n \n                     return sendEmail(item, emailSubscriptionType).onItem().transformToMulti(notificationHistory -> Multi.createFrom().item(Tuple2.of(notificationHistory, aggregationKey)));\n                 }).merge()"
  },
  {
    "sha": "6887c0cca8a32f1422a2549d1e1c2b1bf51403f1",
    "filename": "src/main/java/com/redhat/cloud/notifications/processors/webhooks/WebhookTypeProcessor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/processors/webhooks/WebhookTypeProcessor.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/processors/webhooks/WebhookTypeProcessor.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/processors/webhooks/WebhookTypeProcessor.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -3,7 +3,7 @@\n import com.redhat.cloud.notifications.models.Endpoint;\n import com.redhat.cloud.notifications.models.Notification;\n import com.redhat.cloud.notifications.models.NotificationHistory;\n-import com.redhat.cloud.notifications.models.WebhookAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes;\n import com.redhat.cloud.notifications.processors.EndpointTypeProcessor;\n import com.redhat.cloud.notifications.processors.webhooks.transformers.BaseTransformer;\n import io.micrometer.core.instrument.Counter;"
  },
  {
    "sha": "0601b7ddb46d6a455d0498ba33cf0e22f81abd29",
    "filename": "src/main/java/com/redhat/cloud/notifications/recipients/RecipientUsersProvider.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/RecipientUsersProvider.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/RecipientUsersProvider.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/recipients/RecipientUsersProvider.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,11 @@\n+package com.redhat.cloud.notifications.recipients;\n+\n+import io.smallrye.mutiny.Multi;\n+\n+public interface RecipientUsersProvider {\n+\n+    Multi<User> getUsers(String accountId, boolean adminsOnly);\n+\n+    Multi<User> getGroupUsers(String accountId, boolean adminsOnly, String groupId);\n+\n+}"
  },
  {
    "sha": "885877e184435885c3f60031840d00072034d5d2",
    "filename": "src/main/java/com/redhat/cloud/notifications/recipients/User.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/User.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/User.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/recipients/User.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,41 @@\n+package com.redhat.cloud.notifications.recipients;\n+\n+public class User {\n+\n+    private String username;\n+    private String email;\n+    private Boolean isActive;\n+    private Boolean isAdmin;\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public Boolean getActive() {\n+        return isActive;\n+    }\n+\n+    public void setActive(Boolean active) {\n+        isActive = active;\n+    }\n+\n+    public Boolean isAdmin() {\n+        return isAdmin;\n+    }\n+\n+    public void setAdmin(Boolean admin) {\n+        isAdmin = admin;\n+    }\n+}"
  },
  {
    "sha": "f6699c5ed1371cb2def3b459add4d3bb4fa539c1",
    "filename": "src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacGroup.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacGroup.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacGroup.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacGroup.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,18 @@\n+package com.redhat.cloud.notifications.recipients.rbac;\n+\n+import java.time.LocalDateTime;\n+import java.util.UUID;\n+\n+public class RbacGroup {\n+\n+    public String name;\n+    public String description;\n+    public UUID uuid;\n+    public LocalDateTime created;\n+    public LocalDateTime modified;\n+    public Integer principalCount;\n+    public Integer roleCount;\n+    public boolean system;\n+    public boolean platformDefault;\n+\n+}"
  },
  {
    "sha": "2549a3d404b2074ace8b656e0174906c2f03acc5",
    "filename": "src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacRecipientUsersProvider.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacRecipientUsersProvider.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacRecipientUsersProvider.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacRecipientUsersProvider.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,73 @@\n+package com.redhat.cloud.notifications.recipients.rbac;\n+\n+import com.redhat.cloud.notifications.models.Page;\n+import com.redhat.cloud.notifications.recipients.RecipientUsersProvider;\n+import com.redhat.cloud.notifications.recipients.User;\n+import io.smallrye.mutiny.Multi;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import java.util.UUID;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+\n+@ApplicationScoped\n+public class RbacRecipientUsersProvider implements RecipientUsersProvider {\n+\n+    @Inject\n+    @RestClient\n+    RbacServiceToService rbacServiceToService;\n+\n+    @ConfigProperty(name = \"recipient_provider.rbac.elements_per_page\")\n+    Integer rbacElementsPerPage;\n+\n+    @Override\n+    public Multi<User> getUsers(String accountId, boolean adminOnly) {\n+        return getWithPagination(\n+                page -> rbacServiceToService\n+                        .getUsers(accountId, adminOnly, page * rbacElementsPerPage, rbacElementsPerPage)\n+                        .subscribeAsCompletionStage()\n+        );\n+    }\n+\n+    @Override\n+    public Multi<User> getGroupUsers(String accountId, boolean adminOnly, String groupId) {\n+        return rbacServiceToService.getGroup(accountId, UUID.fromString(groupId))\n+                .onItem().transformToMulti(rbacGroup -> {\n+                    if (rbacGroup.platformDefault) {\n+                        return getUsers(accountId, adminOnly);\n+                    } else {\n+                        return getWithPagination(\n+                            page -> rbacServiceToService\n+                                    .getGroupUsers(accountId, UUID.fromString(groupId), page * rbacElementsPerPage, rbacElementsPerPage)\n+                                    .subscribeAsCompletionStage()\n+                        // getGroupUsers doesn't have an adminOnly param.\n+                        ).filter(user -> !adminOnly || user.isAdmin());\n+                    }\n+                });\n+    }\n+\n+    private Multi<User> getWithPagination(Function<Integer, CompletionStage<Page<RbacUser>>> fetcher) {\n+        return Multi.createBy().repeating()\n+                .completionStage(\n+                        AtomicInteger::new,\n+                        state -> fetcher.apply(state.getAndIncrement())\n+                )\n+                .until(page -> page.getData().isEmpty())\n+                .onItem().transform(Page::getData)\n+                .onItem().disjoint()\n+                .onItem().transform(o -> {\n+                    RbacUser rbacUser = (RbacUser) o;\n+                    User user = new User();\n+                    user.setUsername(rbacUser.username);\n+                    user.setAdmin(rbacUser.isOrgAdmin);\n+                    user.setActive(rbacUser.isActive);\n+                    user.setEmail(rbacUser.email);\n+\n+                    return user;\n+                });\n+    }\n+}"
  },
  {
    "sha": "1d02a65fc721e7f720af63f3a88d2eb8cb5f0ce4",
    "filename": "src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToService.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToService.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToService.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToService.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,65 @@\n+package com.redhat.cloud.notifications.recipients.rbac;\n+\n+import com.redhat.cloud.notifications.models.Page;\n+import io.smallrye.mutiny.Uni;\n+import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import java.util.UUID;\n+\n+@Path(\"/api/rbac/v1\")\n+@RegisterRestClient(configKey = \"rbac\")\n+@RegisterProvider(RbacServiceToServiceAuthRequestFilter.class)\n+@ApplicationScoped\n+public interface RbacServiceToService {\n+\n+    @GET\n+    @Path(\"/principals/\") // trailing slash is required by api\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    Uni<Page<RbacUser>> getUsers(\n+            @HeaderParam(\"x-rh-rbac-account\") String accountId,\n+            @QueryParam(\"admin_only\") Boolean adminOnly,\n+            @QueryParam(\"offset\") Integer offset,\n+            @QueryParam(\"limit\") Integer limit\n+    );\n+\n+    @GET\n+    @Path(\"/groups/\") // trailing slash is required by api\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    Uni<Page<RbacGroup>> getGroups(\n+            @HeaderParam(\"x-rh-rbac-account\") String accountId,\n+            @QueryParam(\"offset\") Integer offset,\n+            @QueryParam(\"limit\") Integer limit\n+    );\n+\n+    @GET\n+    @Path(\"/groups/{groupId}/\") // trailing slash is required by api\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    Uni<RbacGroup> getGroup(\n+            @HeaderParam(\"x-rh-rbac-account\") String accountId,\n+            @PathParam(\"groupId\") UUID groupId\n+    );\n+\n+\n+    @GET\n+    @Path(\"/groups/{groupId}/principals/\") // trailing slash is required by api\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    Uni<Page<RbacUser>> getGroupUsers(\n+            @HeaderParam(\"x-rh-rbac-account\") String accountId,\n+            @PathParam(\"groupId\") UUID groupId,\n+            @QueryParam(\"offset\") Integer offset,\n+            @QueryParam(\"limit\") Integer limit\n+    );\n+}"
  },
  {
    "sha": "358b9d969a2a8f2305fb2d9b699f3c732dde83c5",
    "filename": "src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilter.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilter.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilter.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilter.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,38 @@\n+package com.redhat.cloud.notifications.recipients.rbac;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.ws.rs.client.ClientRequestContext;\n+import javax.ws.rs.client.ClientRequestFilter;\n+import java.io.IOException;\n+import java.util.Base64;\n+\n+public class RbacServiceToServiceAuthRequestFilter implements ClientRequestFilter {\n+\n+    String authInfo;\n+\n+    @ConfigProperty(name = \"rbac.service-to-service.secret\", defaultValue = \"addme\")\n+    String secret;\n+\n+    @ConfigProperty(name = \"rbac.service-to-service.application\", defaultValue = \"notifications\")\n+    String application;\n+\n+    public RbacServiceToServiceAuthRequestFilter() {\n+        String tmp = System.getProperty(\"rbac.service-to-service.exceptional.auth.info\");\n+        if (tmp != null && !tmp.isEmpty()) {\n+            authInfo = Base64.getEncoder().encodeToString(tmp.getBytes());\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ClientRequestContext requestContext) throws IOException {\n+        if (authInfo != null) {\n+            requestContext.getHeaders().remove(\"x-rh-rbac-account\");\n+            requestContext.getHeaders().putSingle(\"Authorization\", \"Basic \" + authInfo);\n+            return;\n+        }\n+\n+        requestContext.getHeaders().putSingle(\"x-rh-rbac-psk\", secret);\n+        requestContext.getHeaders().putSingle(\"x-rh-rbac-client-id\", application);\n+    }\n+}"
  },
  {
    "sha": "3d23166a9ca45fd612cfc4baf0ca4288d2964d2f",
    "filename": "src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacUser.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacUser.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacUser.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/recipients/rbac/RbacUser.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,11 @@\n+package com.redhat.cloud.notifications.recipients.rbac;\n+\n+public class RbacUser {\n+\n+    public String username;\n+    public String email;\n+    public String firstName;\n+    public String lastName;\n+    public Boolean isActive;\n+    public Boolean isOrgAdmin;\n+}"
  },
  {
    "sha": "58d56c228bea7ebebffc5cdf84a48f15643227de",
    "filename": "src/main/java/com/redhat/cloud/notifications/routers/EndpointService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/routers/EndpointService.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/routers/EndpointService.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/routers/EndpointService.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -10,9 +10,9 @@\n import com.redhat.cloud.notifications.db.Query;\n import com.redhat.cloud.notifications.models.EmailSubscription.EmailSubscriptionType;\n import com.redhat.cloud.notifications.models.Endpoint;\n+import com.redhat.cloud.notifications.models.Meta;\n import com.redhat.cloud.notifications.models.NotificationHistory;\n import com.redhat.cloud.notifications.routers.models.EndpointPage;\n-import com.redhat.cloud.notifications.routers.models.Meta;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import org.eclipse.microprofile.openapi.annotations.enums.ParameterIn;"
  },
  {
    "sha": "5da3065d0795b980dace57f2d84655fcdd65a4eb",
    "filename": "src/main/java/com/redhat/cloud/notifications/routers/models/EndpointPage.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/routers/models/EndpointPage.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/java/com/redhat/cloud/notifications/routers/models/EndpointPage.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/java/com/redhat/cloud/notifications/routers/models/EndpointPage.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -1,6 +1,8 @@\n package com.redhat.cloud.notifications.routers.models;\n \n import com.redhat.cloud.notifications.models.Endpoint;\n+import com.redhat.cloud.notifications.models.Meta;\n+import com.redhat.cloud.notifications.models.Page;\n \n import java.util.List;\n import java.util.Map;"
  },
  {
    "sha": "fb772efbddabe5bb672e72ace6ba41593af193f0",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/resources/application.properties",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/main/resources/application.properties?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -41,6 +41,10 @@ rbac/mp-rest/readTimeout=2000\n # Duration rbac entries are kept in cache\n quarkus.cache.caffeine.rbac-cache.expire-after-write=PT120s\n \n+# Used for service to service communication\n+rbac.service-to-service.secret=addme\n+rbac.service-to-service.application=notifications\n+\n \n # Sentry logging. Off by default, enabled on OpenShift\n # See https://quarkus.io/guides/logging-sentry#in-app-packages\n@@ -55,5 +59,7 @@ processor.email.bop_client_id=policies\n processor.email.bop_env=qa\n processor.email.no_reply=no-reply@redhat.com\n \n+recipient_provider.rbac.elements_per_page=40\n+\n # cron-like expression of when to run daily-email processing\n email.subscription.daily.cron=0 0 2 * * ?"
  },
  {
    "sha": "ab3f33c2a2c11783acb47bf4ba9efd6e5065e5bc",
    "filename": "src/test/java/com/redhat/cloud/notifications/db/ResourceHelpers.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/db/ResourceHelpers.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/db/ResourceHelpers.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/test/java/com/redhat/cloud/notifications/db/ResourceHelpers.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -8,7 +8,7 @@\n import com.redhat.cloud.notifications.models.Endpoint;\n import com.redhat.cloud.notifications.models.Endpoint.EndpointType;\n import com.redhat.cloud.notifications.models.EventType;\n-import com.redhat.cloud.notifications.models.WebhookAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes;\n import io.vertx.core.json.JsonArray;\n import io.vertx.core.json.JsonObject;\n "
  },
  {
    "sha": "6e4b864389acdb111169398c270449860e536a54",
    "filename": "src/test/java/com/redhat/cloud/notifications/events/LifecycleITest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/events/LifecycleITest.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/events/LifecycleITest.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/test/java/com/redhat/cloud/notifications/events/LifecycleITest.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -12,7 +12,7 @@\n import com.redhat.cloud.notifications.models.Endpoint;\n import com.redhat.cloud.notifications.models.EventType;\n import com.redhat.cloud.notifications.models.NotificationHistory;\n-import com.redhat.cloud.notifications.models.WebhookAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes;\n import com.redhat.cloud.notifications.routers.models.EndpointPage;\n import io.micrometer.core.instrument.Counter;\n import io.micrometer.core.instrument.MeterRegistry;"
  },
  {
    "sha": "a3214ab8cf49dc245bf3ebc785e97a2d2ad7d48e",
    "filename": "src/test/java/com/redhat/cloud/notifications/processors/email/EmailTest.java",
    "status": "modified",
    "additions": 180,
    "deletions": 3,
    "changes": 183,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/processors/email/EmailTest.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/processors/email/EmailTest.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/test/java/com/redhat/cloud/notifications/processors/email/EmailTest.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -8,24 +8,34 @@\n import com.redhat.cloud.notifications.db.ResourceHelpers;\n import com.redhat.cloud.notifications.ingress.Action;\n import com.redhat.cloud.notifications.models.EmailSubscription.EmailSubscriptionType;\n-import com.redhat.cloud.notifications.models.EmailSubscriptionAttributes;\n import com.redhat.cloud.notifications.models.Endpoint;\n import com.redhat.cloud.notifications.models.Endpoint.EndpointType;\n+import com.redhat.cloud.notifications.models.Meta;\n import com.redhat.cloud.notifications.models.Notification;\n import com.redhat.cloud.notifications.models.NotificationHistory;\n+import com.redhat.cloud.notifications.models.Page;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.EmailSubscriptionAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.EmailSubscriptionAttributes.Recipient;\n import com.redhat.cloud.notifications.processors.webhooks.WebhookTypeProcessor;\n+import com.redhat.cloud.notifications.recipients.rbac.RbacRecipientUsersProvider;\n+import com.redhat.cloud.notifications.recipients.rbac.RbacServiceToService;\n+import com.redhat.cloud.notifications.recipients.rbac.RbacUser;\n import com.redhat.cloud.notifications.templates.LocalDateTimeExtension;\n import io.quarkus.scheduler.ScheduledExecution;\n import io.quarkus.scheduler.Trigger;\n import io.quarkus.test.common.QuarkusTestResource;\n import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.json.JsonArray;\n import io.vertx.core.json.JsonObject;\n import io.vertx.mutiny.core.Vertx;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.eclipse.microprofile.rest.client.inject.RestClient;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestInstance;\n+import org.mockito.Mockito;\n import org.mockserver.mock.action.ExpectationResponseCallback;\n import org.mockserver.model.HttpRequest;\n \n@@ -40,6 +50,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertIterableEquals;\n@@ -56,6 +67,12 @@\n     @MockServerConfig\n     MockServerClientConfig mockServerConfig;\n \n+    @Inject\n+    RbacRecipientUsersProvider recipientUsersProvider;\n+\n+    @ConfigProperty(name = \"recipient_provider.rbac.elements_per_page\")\n+    Integer rbacElementsPerPage;\n+\n     @Inject\n     WebhookTypeProcessor webhookTypeProcessor;\n \n@@ -73,9 +90,14 @@\n     @Inject\n     EndpointEmailSubscriptionResources subscriptionResources;\n \n+    @InjectMock\n+    @RestClient\n+    RbacServiceToService rbacServiceToService;\n+\n     @BeforeAll\n     void init() {\n         emailProcessor = new EmailSubscriptionTypeProcessor();\n+        emailProcessor.recipientUsersProvider = recipientUsersProvider;\n         emailProcessor.vertx = vertx;\n         emailProcessor.webhookSender = webhookTypeProcessor;\n         emailProcessor.emailAggregationResources = emailAggregationResources;\n@@ -112,6 +134,12 @@ void testEmailSubscriptionInstant() {\n             helpers.createSubscription(tenant, username, bundle, application, EmailSubscriptionType.INSTANT);\n         }\n \n+        String[] validUsers = new String[]{\"foo\", \"admin\", \"abc\", \"cdf\"};\n+        // bar does not exist, abc and cdf are not subscribed\n+        String[] targetUsers = new String[]{\"foo\", \"admin\"};\n+\n+        mockUsersFromTenant(tenant, validUsers);\n+\n         final List<String> bodyRequests = new ArrayList<>();\n \n         ExpectationResponseCallback verifyEmptyRequest = req -> {\n@@ -151,6 +179,13 @@ void testEmailSubscriptionInstant() {\n         emailActionMessage.setAccountId(tenant);\n \n         EmailSubscriptionAttributes emailAttr = new EmailSubscriptionAttributes();\n+        Recipient emailRecipient = new Recipient();\n+\n+        // Send to subscribed users\n+        emailRecipient.setOnlyAdmins(false);\n+        emailRecipient.setGroupId(null);\n+        emailRecipient.setIgnorePreferences(false);\n+        emailAttr.setRecipients(List.of(emailRecipient));\n \n         Endpoint ep = new Endpoint();\n         ep.setType(EndpointType.EMAIL_SUBSCRIPTION);\n@@ -184,9 +219,127 @@ void testEmailSubscriptionInstant() {\n         assertEquals(\"no-reply@redhat.com\", recipients.getString(0));\n \n         JsonArray bccList = firstEmail.getJsonArray(\"bccList\");\n-        assertEquals(usernames.length, bccList.size());\n+        assertEquals(targetUsers.length, bccList.size());\n \n-        List<String> sortedUsernames = Arrays.asList(usernames);\n+        List<String> sortedUsernames = Arrays.asList(targetUsers);\n+        sortedUsernames.sort(Comparator.naturalOrder());\n+\n+        List<String> sortedBccList = new ArrayList<String>(bccList.getList());\n+        sortedBccList.sort(Comparator.naturalOrder());\n+\n+        assertIterableEquals(sortedUsernames, sortedBccList);\n+\n+        String bodyRequest = bodyRequests.get(0);\n+\n+        for (String key : triggers.keySet()) {\n+            String value = triggers.get(key);\n+            assertTrue(bodyRequest.contains(key), \"Body should contain trigger key\" + key);\n+            assertTrue(bodyRequest.contains(value), \"Body should contain trigger value\" + value);\n+        }\n+\n+        // Display name\n+        assertTrue(bodyRequest.contains(\"My test machine\"), \"Body should contain the display_name\");\n+\n+        // Formatted date\n+        assertTrue(bodyRequest.contains(\"03 Aug 2020 15:22 UTC\"));\n+    }\n+\n+    @Test\n+    void testEmailSubscriptionInstantSkipSubscription() {\n+\n+        final String tenant = \"instant-email-tenant-skip\";\n+        final String[] usernames = {\"foo\", \"bar\", \"admin\"};\n+        String bundle = \"insights\";\n+        String application = \"policies\";\n+\n+        for (String username : usernames) {\n+            helpers.createSubscription(tenant, username, bundle, application, EmailSubscriptionType.INSTANT);\n+        }\n+\n+        // bar is no longer a user\n+        // abc and def are not subscribed\n+        String[] targetUsers = new String[]{\"abc\", \"def\", \"admin\", \"foo\"};\n+        mockUsersFromTenant(tenant, targetUsers);\n+        final List<String> bodyRequests = new ArrayList<>();\n+\n+        ExpectationResponseCallback verifyEmptyRequest = req -> {\n+            assertEquals(emailProcessor.bopApiToken, req.getHeader(EmailSubscriptionTypeProcessor.BOP_APITOKEN_HEADER).get(0));\n+            assertEquals(emailProcessor.bopClientId, req.getHeader(EmailSubscriptionTypeProcessor.BOP_CLIENT_ID_HEADER).get(0));\n+            assertEquals(emailProcessor.bopEnv, req.getHeader(EmailSubscriptionTypeProcessor.BOP_ENV_HEADER).get(0));\n+            bodyRequests.add(req.getBodyAsString());\n+            return response().withStatusCode(200);\n+        };\n+\n+        HttpRequest postReq = getMockHttpRequest(verifyEmptyRequest);\n+\n+        Action emailActionMessage = new Action();\n+        emailActionMessage.setBundle(bundle);\n+        emailActionMessage.setApplication(application);\n+        emailActionMessage.setTimestamp(LocalDateTime.of(2020, 10, 3, 15, 22, 13, 25));\n+        emailActionMessage.setEventType(\"testEmailSubscriptionInstant\");\n+\n+        Map<String, String> triggers = new HashMap<>();\n+        triggers.put(\"abcd-efghi-jkl-lmn\", \"Foobar\");\n+        triggers.put(\"0123-456-789-5721f\", \"Latest foo is installed\");\n+\n+        Map<String, Object> payload = new HashMap<>();\n+        payload.put(\"triggers\", triggers);\n+        payload.put(\"display_name\", \"My test machine\");\n+        payload.put(\"system_check_in\", \"2020-08-03T15:22:42.199046\");\n+        payload.put(\"policy_id\", \"0123-456-789-5721f\");\n+        payload.put(\"policy_name\", \"not-used-name\");\n+        payload.put(\"policy_description\", \"not-used-desc\");\n+        payload.put(\"policy_condition\", \"not-used-condition\");\n+        payload.put(\"insights_id\", \"host-01\");\n+        payload.put(\"tags\", new JsonArray());\n+\n+        emailActionMessage.setPayload(payload);\n+        emailActionMessage.setAccountId(tenant);\n+\n+        EmailSubscriptionAttributes emailAttr = new EmailSubscriptionAttributes();\n+        Recipient emailRecipient = new Recipient();\n+\n+        // Send to subscribed users\n+        emailRecipient.setOnlyAdmins(false);\n+        emailRecipient.setGroupId(null);\n+        emailRecipient.setIgnorePreferences(true);\n+        emailAttr.setRecipients(List.of(emailRecipient));\n+\n+        Endpoint ep = new Endpoint();\n+        ep.setType(EndpointType.EMAIL_SUBSCRIPTION);\n+        ep.setName(\"positive feeling\");\n+        ep.setDescription(\"needle in the haystack\");\n+        ep.setEnabled(true);\n+        ep.setProperties(emailAttr);\n+\n+        Notification notif = new Notification(emailActionMessage, ep);\n+\n+        try {\n+            Uni<NotificationHistory> process = emailProcessor.process(notif);\n+            NotificationHistory history = process.await().indefinitely();\n+            assertTrue(history.isInvocationResult());\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(e);\n+        } finally {\n+            // Remove expectations\n+            mockServerConfig.getMockServerClient().clear(postReq);\n+        }\n+\n+        assertEquals(1, bodyRequests.size());\n+        JsonObject body = new JsonObject(bodyRequests.get(0));\n+        JsonArray emails = body.getJsonArray(\"emails\");\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        JsonObject firstEmail = emails.getJsonObject(0);\n+        JsonArray recipients = firstEmail.getJsonArray(\"recipients\");\n+        assertEquals(1, recipients.size());\n+        assertEquals(\"no-reply@redhat.com\", recipients.getString(0));\n+\n+        JsonArray bccList = firstEmail.getJsonArray(\"bccList\");\n+        assertEquals(targetUsers.length, bccList.size());\n+\n+        List<String> sortedUsernames = Arrays.asList(targetUsers);\n         sortedUsernames.sort(Comparator.naturalOrder());\n \n         List<String> sortedBccList = new ArrayList<String>(bccList.getList());\n@@ -256,6 +409,13 @@ void testEmailSubscriptionInstantWrongPayload() {\n         emailActionMessage.setAccountId(tenant);\n \n         EmailSubscriptionAttributes emailAttr = new EmailSubscriptionAttributes();\n+        Recipient emailRecipient = new Recipient();\n+\n+        // Send to subscribed users\n+        emailRecipient.setOnlyAdmins(false);\n+        emailRecipient.setGroupId(null);\n+        emailRecipient.setIgnorePreferences(false);\n+        emailAttr.setRecipients(List.of(emailRecipient));\n \n         Endpoint ep = new Endpoint();\n         ep.setType(EndpointType.EMAIL_SUBSCRIPTION);\n@@ -264,6 +424,8 @@ void testEmailSubscriptionInstantWrongPayload() {\n         ep.setEnabled(true);\n         ep.setProperties(emailAttr);\n \n+        mockUsersFromTenant(tenant, usernames);\n+\n         Notification notif = new Notification(emailActionMessage, ep);\n \n         try {\n@@ -306,6 +468,10 @@ void testEmailSubscriptionDaily() {\n             helpers.removeSubscription(noSubscribedUsersTenant, username, bundle, application, EmailSubscriptionType.DAILY);\n         }\n \n+        mockUsersFromTenant(tenant1, tenant1Usernames);\n+        mockUsersFromTenant(tenant2, tenant2Usernames);\n+        mockUsersFromTenant(noSubscribedUsersTenant, noSubscribedUsersTenantTestUser);\n+\n         final Instant nowPlus5HoursInstant = Instant.now().plus(Duration.ofHours(5));\n         final LocalDateTime startTime = LocalDateTime.ofInstant(nowPlus5HoursInstant.minus(Duration.ofDays(1)), ZoneId.systemDefault());\n         final LocalDateTime endTime = LocalDateTime.ofInstant(nowPlus5HoursInstant, ZoneId.systemDefault());\n@@ -473,4 +639,15 @@ private JsonObject emailRequestIsOK(String request, String[] users) {\n \n         return email;\n     }\n+\n+    private void mockUsersFromTenant(String tenant, String[] usernames) {\n+        List<RbacUser> rbacUsers = List.of(usernames).stream().map(s -> {\n+            RbacUser rbacUser = new RbacUser();\n+            rbacUser.username = s;\n+            return rbacUser;\n+        }).collect(Collectors.toList());\n+\n+        Mockito.when(rbacServiceToService.getUsers(tenant, false, 0, rbacElementsPerPage)).thenReturn(Uni.createFrom().item(new Page<>(rbacUsers, new HashMap<>(), new Meta())));\n+        Mockito.when(rbacServiceToService.getUsers(tenant, false, rbacElementsPerPage, rbacElementsPerPage)).thenReturn(Uni.createFrom().item(new Page<>(List.of(), new HashMap<>(), new Meta())));\n+    }\n }"
  },
  {
    "sha": "6b8a7be0fcb6cefc3bd6c48bd6eb79cf3f7cbe51",
    "filename": "src/test/java/com/redhat/cloud/notifications/processors/webhook/WebhookTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/processors/webhook/WebhookTest.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/processors/webhook/WebhookTest.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/test/java/com/redhat/cloud/notifications/processors/webhook/WebhookTest.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -9,8 +9,8 @@\n import com.redhat.cloud.notifications.models.Endpoint.EndpointType;\n import com.redhat.cloud.notifications.models.Notification;\n import com.redhat.cloud.notifications.models.NotificationHistory;\n-import com.redhat.cloud.notifications.models.WebhookAttributes;\n-import com.redhat.cloud.notifications.models.WebhookAttributes.HttpType;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes.HttpType;\n import com.redhat.cloud.notifications.processors.webhooks.WebhookTypeProcessor;\n import io.quarkus.test.common.QuarkusTestResource;\n import io.quarkus.test.junit.QuarkusTest;"
  },
  {
    "sha": "e4fb66c555ae4d8251f939216e952933b25bfdf0",
    "filename": "src/test/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilterTest.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilterTest.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilterTest.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/test/java/com/redhat/cloud/notifications/recipients/rbac/RbacServiceToServiceAuthRequestFilterTest.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -0,0 +1,64 @@\n+package com.redhat.cloud.notifications.recipients.rbac;\n+\n+import org.jboss.resteasy.client.jaxrs.internal.ClientConfiguration;\n+import org.jboss.resteasy.client.jaxrs.internal.ClientInvocation;\n+import org.jboss.resteasy.client.jaxrs.internal.ClientInvocationBuilder;\n+import org.jboss.resteasy.client.jaxrs.internal.ClientRequestContextImpl;\n+import org.jboss.resteasy.spi.ResteasyProviderFactory;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.client.ClientRequestContext;\n+import java.io.IOException;\n+import java.util.Base64;\n+\n+public class RbacServiceToServiceAuthRequestFilterTest {\n+\n+    @Test\n+    void testServiceToServiceHeaders() {\n+        RbacServiceToServiceAuthRequestFilter requestFilter = new RbacServiceToServiceAuthRequestFilter();\n+        requestFilter.application = \"My nice app\";\n+        requestFilter.secret = \"this-is-a-secret-token\";\n+\n+        ClientConfiguration configuration = new ClientConfiguration(ResteasyProviderFactory.getInstance());\n+        ClientInvocation invocation =  (ClientInvocation) new ClientInvocationBuilder(null, null, configuration).buildGet();\n+        ClientRequestContext context = new ClientRequestContextImpl(invocation);\n+        try {\n+            requestFilter.filter(context);\n+            Assertions.assertEquals(\"this-is-a-secret-token\", context.getHeaderString(\"x-rh-rbac-psk\"));\n+            Assertions.assertEquals(\"My nice app\", context.getHeaderString(\"x-rh-rbac-client-id\"));\n+            Assertions.assertNull(context.getHeaderString(\"Authorization\"));\n+        } catch (IOException ex) {\n+            Assertions.fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    void testDevServiceToServiceHeaders() {\n+        System.setProperty(\"rbac.service-to-service.exceptional.auth.info\", \"myuser:p4ssw0rd\");\n+        RbacServiceToServiceAuthRequestFilter requestFilter = new RbacServiceToServiceAuthRequestFilter();\n+        requestFilter.application = \"My nice app\";\n+        requestFilter.secret = \"this-is-a-secret-token\";\n+\n+        ClientConfiguration configuration = new ClientConfiguration(ResteasyProviderFactory.getInstance());\n+        ClientInvocation invocation =  (ClientInvocation) new ClientInvocationBuilder(null, null, configuration).buildGet();\n+        ClientRequestContext context = new ClientRequestContextImpl(invocation);\n+\n+        context.getHeaders().putSingle(\"x-rh-rbac-account\", \"the-account-id\");\n+\n+        try {\n+            requestFilter.filter(context);\n+            Assertions.assertNull(context.getHeaderString(\"x-rh-rbac-psk\"));\n+            Assertions.assertNull(context.getHeaderString(\"x-rh-rbac-client-id\"));\n+            Assertions.assertNull(context.getHeaderString(\"x-rh-rbac-account\"));\n+            Assertions.assertEquals(\n+                    \"Basic \" + Base64.getEncoder().encodeToString(\"myuser:p4ssw0rd\".getBytes()),\n+                    context.getHeaderString(\"Authorization\")\n+            );\n+        } catch (IOException ex) {\n+            Assertions.fail(ex);\n+        } finally {\n+            System.setProperty(\"rbac.service-to-service.exceptional.auth.info\", \"\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "7e4b9bef6c17fa69add17ee19ebd6ab65d520c0e",
    "filename": "src/test/java/com/redhat/cloud/notifications/routers/EndpointServiceTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/routers/EndpointServiceTest.java",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/java/com/redhat/cloud/notifications/routers/EndpointServiceTest.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/test/java/com/redhat/cloud/notifications/routers/EndpointServiceTest.java?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -7,10 +7,10 @@\n import com.redhat.cloud.notifications.TestLifecycleManager;\n import com.redhat.cloud.notifications.db.ResourceHelpers;\n import com.redhat.cloud.notifications.models.EmailSubscription.EmailSubscriptionType;\n-import com.redhat.cloud.notifications.models.EmailSubscriptionAttributes;\n import com.redhat.cloud.notifications.models.Endpoint;\n import com.redhat.cloud.notifications.models.Endpoint.EndpointType;\n-import com.redhat.cloud.notifications.models.WebhookAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.EmailSubscriptionAttributes;\n+import com.redhat.cloud.notifications.models.endpoint.attributes.WebhookAttributes;\n import com.redhat.cloud.notifications.routers.models.EndpointPage;\n import io.quarkus.test.common.QuarkusTestResource;\n import io.quarkus.test.junit.QuarkusTest;"
  },
  {
    "sha": "33b5fa0c0bbe550a205fb57cc5c5ed2f35c86c62",
    "filename": "src/test/resources/application.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/RedHatInsights/notifications-backend/blob/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/resources/application.properties",
    "raw_url": "https://github.com/RedHatInsights/notifications-backend/raw/35281d6235a82483eafdc03e18a3289bee988d9b/src/test/resources/application.properties",
    "contents_url": "https://api.github.com/repos/RedHatInsights/notifications-backend/contents/src/test/resources/application.properties?ref=35281d6235a82483eafdc03e18a3289bee988d9b",
    "patch": "@@ -34,4 +34,6 @@ processor.email.bop_client_id=policies\n processor.email.bop_env=qa\n processor.email.no_reply=no-reply@redhat.com\n \n+recipient_provider.rbac.elements_per_page=40\n+\n quarkus.scheduler.enabled=false"
  }
]
