[
  {
    "sha": "97994a7245d5ba850da9041339fd43df6330877a",
    "filename": "src/main/java/org/candlepin/subscriptions/files/ProductProfile.java",
    "status": "modified",
    "additions": 12,
    "deletions": 39,
    "changes": 51,
    "blob_url": "https://github.com/RedHatInsights/rhsm-subscriptions/blob/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/files/ProductProfile.java",
    "raw_url": "https://github.com/RedHatInsights/rhsm-subscriptions/raw/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/files/ProductProfile.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/rhsm-subscriptions/contents/src/main/java/org/candlepin/subscriptions/files/ProductProfile.java?ref=ccfdf0d981a4221aa2a802cba6b1575b48df9b31",
    "patch": "@@ -28,17 +28,23 @@\n \n import org.springframework.util.StringUtils;\n \n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n /**\n  * Represents information telling capacity and tally how to handle certain products\n  */\n+@ToString\n+@EqualsAndHashCode\n public class ProductProfile {\n     private static final ProductProfile DEFAULT_PROFILE = new ProductProfile(\"DEFAULT\",\n         Collections.emptySet(), DAILY);\n@@ -62,6 +68,11 @@ public static ProductProfile getDefault() {\n     private Map<String, Set<String>> swatchProductsByEngProducts;\n \n \n+    // there's a card dedicated to putting this value in the product registry yaml (ENT-3610)\n+    @Getter\n+    @Setter\n+    private String metricId = \"redhat.com:openshiftdedicated:cpu_hour\";\n+\n     public ProductProfile() {\n         // Default used for YAML deserialization\n         this.syspurposeRoles = new HashSet<>();\n@@ -190,42 +201,4 @@ public boolean supportsGranularity(Granularity granularity) {\n         return this.swatchProductsByEngProducts;\n     }\n \n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        ProductProfile that = (ProductProfile) o;\n-        return burstable == that.burstable && Objects.equals(name, that.name) &&\n-            Objects.equals(products, that.products) && finestGranularity == that.finestGranularity &&\n-            Objects.equals(serviceType, that.serviceType) &&\n-            defaultSla == that.defaultSla &&\n-            defaultUsage == that.defaultUsage &&\n-            Objects.equals(prometheusMetricName, that.prometheusMetricName) &&\n-            Objects.equals(prometheusCounterName, that.prometheusCounterName) &&\n-            Objects.equals(architectureSwatchProductIdMap, that.architectureSwatchProductIdMap) &&\n-            Objects.equals(swatchProductsByRoles, that.swatchProductsByRoles) &&\n-            Objects.equals(swatchProductsByEngProducts, that.swatchProductsByEngProducts);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(\n-            name,\n-            products,\n-            finestGranularity,\n-            serviceType,\n-            defaultSla,\n-            defaultUsage,\n-            burstable,\n-            prometheusMetricName,\n-            prometheusCounterName,\n-            architectureSwatchProductIdMap,\n-            swatchProductsByRoles,\n-            swatchProductsByEngProducts\n-        );\n-    }\n }"
  },
  {
    "sha": "53d3d3ec93c8bc9a3cc93c0f43ae46db71162f1e",
    "filename": "src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceJmxBean.java",
    "status": "modified",
    "additions": 19,
    "deletions": 6,
    "changes": 25,
    "blob_url": "https://github.com/RedHatInsights/rhsm-subscriptions/blob/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceJmxBean.java",
    "raw_url": "https://github.com/RedHatInsights/rhsm-subscriptions/raw/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceJmxBean.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/rhsm-subscriptions/contents/src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceJmxBean.java?ref=ccfdf0d981a4221aa2a802cba6b1575b48df9b31",
    "patch": "@@ -22,7 +22,7 @@\n \n import org.candlepin.subscriptions.ApplicationProperties;\n import org.candlepin.subscriptions.conduit.jmx.RhsmJmxException;\n-import org.candlepin.subscriptions.marketplace.api.model.UsageEvent;\n+import org.candlepin.subscriptions.json.TallySummary;\n import org.candlepin.subscriptions.marketplace.api.model.UsageRequest;\n import org.candlepin.subscriptions.resource.ResourceUtils;\n \n@@ -33,6 +33,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.jmx.JmxException;\n import org.springframework.jmx.export.annotation.ManagedOperation;\n+import org.springframework.jmx.export.annotation.ManagedOperationParameter;\n import org.springframework.jmx.export.annotation.ManagedResource;\n import org.springframework.stereotype.Component;\n \n@@ -50,14 +51,17 @@\n     private final MarketplaceService marketplaceService;\n     private final MarketplaceProducer marketplaceProducer;\n     private final ObjectMapper mapper;\n+    private final MarketplacePayloadMapper marketplacePayloadMapper;\n \n     MarketplaceJmxBean(ApplicationProperties properties, MarketplaceService marketplaceService,\n-        MarketplaceProducer marketplaceProducer, ObjectMapper mapper) {\n+        MarketplaceProducer marketplaceProducer, ObjectMapper mapper,\n+        MarketplacePayloadMapper marketplacePayloadMapper) {\n \n         this.properties = properties;\n         this.marketplaceService = marketplaceService;\n         this.marketplaceProducer = marketplaceProducer;\n         this.mapper = mapper;\n+        this.marketplacePayloadMapper = marketplacePayloadMapper;\n     }\n \n     @ManagedOperation(description = \"Force a refresh of the access token\")\n@@ -67,13 +71,22 @@ public void refreshAccessToken() throws ApiException {\n         marketplaceService.forceRefreshAccessToken();\n     }\n \n-    @ManagedOperation(description = \"Submit usage event JSON (dev-mode only)\")\n-    public String submitUsageEvent(String payloadJson) throws JsonProcessingException, RhsmJmxException {\n+    @ManagedOperation(description = \"Submit tally summary JSON to be converted to a usage event and send to\" +\n+        \" RHM as a UsageRequest (dev-mode only)\")\n+    @ManagedOperationParameter(name = \"tallySummaryJson\", description = \"String representation of Tally \" +\n+        \"Summary json. Don't forget to escape quotation marks if you're trying to invoke this endpoint via \" +\n+        \"curl command\")\n+    public String submitTallySummary(String tallySummaryJson)\n+        throws JsonProcessingException, RhsmJmxException {\n         if (!properties.isDevMode()) {\n             throw new JmxException(\"Unsupported outside dev-mode\");\n         }\n-        UsageEvent usageEvent = mapper.readValue(payloadJson, UsageEvent.class);\n-        UsageRequest usageRequest = new UsageRequest().addDataItem(usageEvent);\n+\n+        TallySummary tallySummary = mapper.readValue(tallySummaryJson, TallySummary.class);\n+        UsageRequest usageRequest = marketplacePayloadMapper.createUsageRequest(tallySummary);\n+\n+        log.info(\"usageRequest to be sent: {}\", usageRequest);\n+\n         try {\n             return marketplaceProducer.submitUsageRequest(usageRequest).toString();\n         }"
  },
  {
    "sha": "00437c4c37295c065c687293238045e63cfc334b",
    "filename": "src/main/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapper.java",
    "status": "added",
    "additions": 199,
    "deletions": 0,
    "changes": 199,
    "blob_url": "https://github.com/RedHatInsights/rhsm-subscriptions/blob/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapper.java",
    "raw_url": "https://github.com/RedHatInsights/rhsm-subscriptions/raw/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapper.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/rhsm-subscriptions/contents/src/main/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapper.java?ref=ccfdf0d981a4221aa2a802cba6b1575b48df9b31",
    "patch": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright (c) 2021 Red Hat, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv3. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.subscriptions.marketplace;\n+\n+import org.candlepin.subscriptions.db.model.HardwareMeasurementType;\n+import org.candlepin.subscriptions.db.model.ServiceLevel;\n+import org.candlepin.subscriptions.db.model.Usage;\n+import org.candlepin.subscriptions.files.ProductProfileRegistry;\n+import org.candlepin.subscriptions.json.TallySnapshot;\n+import org.candlepin.subscriptions.json.TallySummary;\n+import org.candlepin.subscriptions.marketplace.api.model.UsageEvent;\n+import org.candlepin.subscriptions.marketplace.api.model.UsageMeasurement;\n+import org.candlepin.subscriptions.marketplace.api.model.UsageRequest;\n+import org.candlepin.subscriptions.tally.UsageCalculation;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.OffsetDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Maps TallySummary to payload contents to be sent to RHM apis\n+ */\n+@Service\n+public class MarketplacePayloadMapper {\n+    private static final Logger log = LoggerFactory.getLogger(MarketplacePayloadMapper.class);\n+\n+    private final ProductProfileRegistry profileRegistry;\n+\n+    @Autowired\n+    public MarketplacePayloadMapper(ProductProfileRegistry profileRegistry) {\n+        this.profileRegistry = profileRegistry;\n+    }\n+\n+    /**\n+     * Create UsageRequest pojo to send to Marketplace\n+     *\n+     * @param tallySummary TallySummary\n+     * @return UsageRequest\n+     */\n+    public UsageRequest createUsageRequest(TallySummary tallySummary) {\n+\n+        UsageRequest usageRequest = new UsageRequest();\n+\n+        var usageEvents = produceUsageEvents(tallySummary);\n+        usageEvents.forEach(usageRequest::addDataItem);\n+\n+        log.debug(\"UsageRequest {}\", usageRequest);\n+\n+        return usageRequest;\n+    }\n+\n+    /**\n+     * We only want to send snapshot information for OpenShift-metrics, OpenShift-dedicated-metrics product\n+     * ids.  To prevent duplicate data, we don't want to send snapshots with the Usage or ServiceLevel of\n+     * \"_ANY\".  We only want to report on hourly metrics, so the Granularity should be HOURLY.\n+     *\n+     * @param snapshot tally snapshot\n+     * @return eligibility status\n+     */\n+    protected boolean isSnapshotPAYGEligible(TallySnapshot snapshot) {\n+        String productId = snapshot.getProductId();\n+        var applicableProducts = List.of(\"OpenShift-metrics\", \"OpenShift-dedicated-metrics\");\n+        boolean isApplicableProduct = applicableProducts.contains(productId);\n+\n+        boolean isHourlyGranularity = Objects.nonNull(snapshot.getGranularity()) &&\n+            Objects.equals(TallySnapshot.Granularity.HOURLY, snapshot.getGranularity());\n+\n+        boolean isSpecificUsage = Objects.nonNull(snapshot.getUsage()) &&\n+            !Objects.equals(snapshot.getUsage(), TallySnapshot.Usage.ANY);\n+\n+        boolean isSpecificServiceLevel =\n+            Objects.nonNull(snapshot.getSla()) && !Objects.equals(snapshot.getSla(), TallySnapshot.Sla.ANY);\n+\n+        boolean isSnapshotPAYGEligible =\n+            isHourlyGranularity && isApplicableProduct && isSpecificUsage && isSpecificServiceLevel;\n+\n+        if (!isSnapshotPAYGEligible) {\n+            log.debug(\"Snapshot not eligible for sending to RHM {}\", snapshot);\n+        }\n+        return isSnapshotPAYGEligible;\n+    }\n+\n+    /**\n+     * UsageRequest objects are made up of a list of UsageEvents.\n+     *\n+     * @param tallySummary TallySummary\n+     * @return List<UsageEvent>\n+     */\n+    protected List<UsageEvent> produceUsageEvents(TallySummary tallySummary) {\n+        if (Objects.isNull(tallySummary.getTallySnapshots())) {\n+            tallySummary.setTallySnapshots(new ArrayList<>());\n+        }\n+\n+        return tallySummary.getTallySnapshots().stream().filter(this::isSnapshotPAYGEligible)\n+            .map(snapshot -> {\n+                String productId = snapshot.getProductId();\n+                OffsetDateTime snapshotDate = snapshot.getSnapshotDate();\n+                String eventId = snapshot.getId().toString();\n+\n+                // call MarketplaceIdProvider.findSubscriptionId once available\n+                UsageCalculation.Key usageKey = new UsageCalculation.Key(productId,\n+                    ServiceLevel.fromString(snapshot.getSla().toString()),\n+                    Usage.fromString(snapshot.getUsage().toString()));\n+\n+\n+                /*\n+                This will need to be updated if we expand the criteria defined in the\n+                isSnapshotPAYGEligible method to allow for Granularities other than HOURLY\n+                 */\n+                OffsetDateTime startDate = snapshotDate.minus(Duration.of(1, ChronoUnit.HOURS));\n+\n+                long start = startDate.toEpochSecond();\n+                long end = snapshotDate.toEpochSecond();\n+\n+                var subscriptionId = findSubscriptionId(tallySummary.getAccountNumber(), usageKey,\n+                    startDate, snapshotDate).orElseThrow();\n+\n+                var usageMeasurements = produceUsageMeasurements(snapshot, productId);\n+\n+                UsageEvent event = new UsageEvent();\n+                event.setMeasuredUsage(usageMeasurements);\n+                event.setEnd(end);\n+                event.setStart(start);\n+                event.setSubscriptionId(subscriptionId);\n+                event.setEventId(eventId);\n+\n+                return event;\n+            }).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * UsageEvents include a list of usage measurements.  This data includes unit of measure (UOM), the\n+     * value for the uom, and the metricId (RHM terminology) which is a configuration value of the product\n+     * the uom is for.\n+     *\n+     * @param snapshot TallySnapshot\n+     * @param productId swatch product id\n+     * @return List<UsageMeasurement>\n+     */\n+    protected List<UsageMeasurement> produceUsageMeasurements(TallySnapshot snapshot, String productId) {\n+        var productProfile = profileRegistry.findProfileForSwatchProductId(productId);\n+\n+        List<UsageMeasurement> usageMeasurements = new ArrayList<>();\n+\n+        if (Objects.isNull(snapshot.getTallyMeasurements())) {\n+            snapshot.setTallyMeasurements(new ArrayList<>());\n+        }\n+\n+        //Filter out any HardwareMeasurementType.TOTAL measurments to prevent duplicates\n+        snapshot.getTallyMeasurements().stream().filter(measurement -> !Objects\n+            .equals(HardwareMeasurementType.TOTAL.toString(), measurement.getHardwareMeasurementType()))\n+            .forEach(measurement -> {\n+                UsageMeasurement usageMeasurement = new UsageMeasurement();\n+                usageMeasurement.setValue(measurement.getValue());\n+                usageMeasurement.setMetricId(productProfile.getMetricId());\n+                usageMeasurements.add(usageMeasurement);\n+            });\n+        return usageMeasurements;\n+    }\n+\n+    private Optional<String> findSubscriptionId(String accountNumber, UsageCalculation.Key usageKey,\n+        OffsetDateTime rangeStart, OffsetDateTime rangeEnd) {\n+\n+        log.debug(\"looking up subscription id for {}, {}, range {} to {}\", accountNumber, usageKey,\n+            rangeStart, rangeEnd);\n+\n+        return Optional.of(\"bananas\" + UUID.randomUUID().toString());\n+\n+    }\n+}"
  },
  {
    "sha": "fa6a82a4762f373d177779179e2149ff994400a4",
    "filename": "src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceWorker.java",
    "status": "modified",
    "additions": 4,
    "deletions": 37,
    "changes": 41,
    "blob_url": "https://github.com/RedHatInsights/rhsm-subscriptions/blob/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceWorker.java",
    "raw_url": "https://github.com/RedHatInsights/rhsm-subscriptions/raw/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceWorker.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/rhsm-subscriptions/contents/src/main/java/org/candlepin/subscriptions/marketplace/MarketplaceWorker.java?ref=ccfdf0d981a4221aa2a802cba6b1575b48df9b31",
    "patch": "@@ -22,12 +22,7 @@\n \n import org.candlepin.subscriptions.ApplicationProperties;\n import org.candlepin.subscriptions.json.TallySummary;\n-import org.candlepin.subscriptions.marketplace.api.model.UsageEvent;\n-import org.candlepin.subscriptions.marketplace.api.model.UsageRequest;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.kafka.annotation.KafkaListener;\n import org.springframework.stereotype.Service;\n \n@@ -36,8 +31,6 @@\n import lombok.Getter;\n import lombok.Setter;\n \n-import java.util.Collections;\n-import java.util.List;\n import java.util.Optional;\n \n /**\n@@ -46,51 +39,25 @@\n @Service\n public class MarketplaceWorker {\n \n-    private static final Logger log = LoggerFactory.getLogger(MarketplaceWorker.class);\n-\n-    /**\n-     * placeholder class, to be removed w/ https://issues.redhat.com/browse/ENT-3264\n-     */\n-    @Service\n-    static class MarketplacePayloadMapper {\n-        private final MarketplaceProperties properties;\n-\n-        @Autowired\n-        MarketplacePayloadMapper(MarketplaceProperties properties) {\n-            this.properties = properties;\n-        }\n-\n-        UsageRequest mapTallySummary(TallySummary summary) {\n-            log.info(\"mapTallySummary called w/ summary: {}\", summary);\n-            if (properties.isMapperStubEmpty()) {\n-                return new UsageRequest().data(Collections.emptyList());\n-            }\n-            else {\n-                // NOTE: this payload will fail marketplace validation\n-                return new UsageRequest().data(List.of(new UsageEvent()));\n-            }\n-        }\n-    }\n-\n     @Getter\n     @Setter\n     private String topic;\n \n     private final MarketplaceProducer producer;\n-    private final MarketplacePayloadMapper payloadMapper;\n+    private final MarketplacePayloadMapper marketplacePayloadMapper;\n \n     public MarketplaceWorker(ApplicationProperties properties, MarketplaceProducer producer,\n-        MarketplacePayloadMapper payloadMapper) {\n+        MarketplacePayloadMapper marketplacePayloadMapper) {\n         topic = properties.getTallySummaryTopic();\n         this.producer = producer;\n-        this.payloadMapper = payloadMapper;\n+        this.marketplacePayloadMapper = marketplacePayloadMapper;\n     }\n \n     @Timed(\"rhsm-subscriptions.marketplace.tally-summary\")\n     @KafkaListener(id = \"marketplace-worker\", topics = \"#{__listener.topic}\",\n         containerFactory = \"kafkaTallySummaryListenerContainerFactory\")\n     public void receive(TallySummary tallySummary) {\n-        Optional.ofNullable(payloadMapper.mapTallySummary(tallySummary))\n+        Optional.ofNullable(marketplacePayloadMapper.createUsageRequest(tallySummary))\n             .filter(s -> !s.getData().isEmpty())\n             .ifPresent(producer::submitUsageRequest);\n     }"
  },
  {
    "sha": "5169f8275abc6b5e94c60a00bf395d5214cb537f",
    "filename": "src/main/java/org/candlepin/subscriptions/tally/SnapshotSummaryProducer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/RedHatInsights/rhsm-subscriptions/blob/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/tally/SnapshotSummaryProducer.java",
    "raw_url": "https://github.com/RedHatInsights/rhsm-subscriptions/raw/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/main/java/org/candlepin/subscriptions/tally/SnapshotSummaryProducer.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/rhsm-subscriptions/contents/src/main/java/org/candlepin/subscriptions/tally/SnapshotSummaryProducer.java?ref=ccfdf0d981a4221aa2a802cba6b1575b48df9b31",
    "patch": "@@ -71,12 +71,16 @@ private TallySummary createTallySummary(String accountNumber, List<TallySnapshot\n         var sla = org.candlepin.subscriptions.json.TallySnapshot.Sla\n             .fromValue(tallySnapshot.getServiceLevel().getValue());\n \n+        var usage = org.candlepin.subscriptions.json.TallySnapshot.Usage\n+            .fromValue(tallySnapshot.getUsage().getValue());\n+\n         return new org.candlepin.subscriptions.json.TallySnapshot()\n             .withGranularity(granularity)\n             .withId(tallySnapshot.getId())\n             .withProductId(tallySnapshot.getProductId())\n             .withSnapshotDate(tallySnapshot.getSnapshotDate())\n             .withSla(sla)\n+            .withUsage(usage)\n             .withTallyMeasurements(mapMeasurements(tallySnapshot.getTallyMeasurements()));\n     }\n "
  },
  {
    "sha": "2128453563ac3747fe2651249785c3f068a7bd89",
    "filename": "src/test/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapperTest.java",
    "status": "added",
    "additions": 189,
    "deletions": 0,
    "changes": 189,
    "blob_url": "https://github.com/RedHatInsights/rhsm-subscriptions/blob/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/test/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapperTest.java",
    "raw_url": "https://github.com/RedHatInsights/rhsm-subscriptions/raw/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/test/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapperTest.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/rhsm-subscriptions/contents/src/test/java/org/candlepin/subscriptions/marketplace/MarketplacePayloadMapperTest.java?ref=ccfdf0d981a4221aa2a802cba6b1575b48df9b31",
    "patch": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright (c) 2021 Red Hat, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv3. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.subscriptions.marketplace;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.candlepin.subscriptions.files.ProductProfile;\n+import org.candlepin.subscriptions.files.ProductProfileRegistry;\n+import org.candlepin.subscriptions.json.TallyMeasurement;\n+import org.candlepin.subscriptions.json.TallySnapshot;\n+import org.candlepin.subscriptions.json.TallySummary;\n+import org.candlepin.subscriptions.marketplace.api.model.UsageEvent;\n+import org.candlepin.subscriptions.marketplace.api.model.UsageMeasurement;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Stream;\n+\n+class MarketplacePayloadMapperTest {\n+\n+    @Mock\n+    ProductProfileRegistry profileRegistry;\n+    @InjectMocks\n+    MarketplacePayloadMapper marketplacePayloadMapper;\n+\n+    @BeforeEach\n+    void init() {\n+\n+        ProductProfile productProfile = new ProductProfile();\n+        productProfile.setMetricId(\"redhat.com:openshiftdedicated:cpu_hour\");\n+        MockitoAnnotations.openMocks(this);\n+\n+        when(profileRegistry.findProfileForSwatchProductId(anyString())).thenReturn(productProfile);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"generateHardwareMeasurementPermutations\")\n+    void testProduceUsageMeasurements(\n+        List<TallyMeasurement> tallyMeasurements, List<UsageMeasurement> expected) {\n+\n+        String productId = \"OpenShift-metrics\";\n+\n+        var snapshot = new TallySnapshot()\n+            .withId(UUID.fromString(\"c204074d-626f-4272-aa05-b6d69d6de16a\"))\n+            .withProductId(productId)\n+            .withSnapshotDate(OffsetDateTime.now())\n+            .withUsage(TallySnapshot.Usage.PRODUCTION)\n+            .withTallyMeasurements(tallyMeasurements)\n+            .withSla(TallySnapshot.Sla.PREMIUM)\n+            .withGranularity(TallySnapshot.Granularity.HOURLY);\n+\n+        var actual = marketplacePayloadMapper\n+            .produceUsageMeasurements(snapshot, productId);\n+\n+        assertEquals(expected, actual);\n+    }\n+\n+    @SuppressWarnings(\"linelength\")\n+    static Stream<Arguments> generateHardwareMeasurementPermutations() {\n+        double value = 36.0;\n+\n+        TallyMeasurement physicalCoreMeasurement = new TallyMeasurement()\n+            .withHardwareMeasurementType(\"PHYSICAL\").withUom(TallyMeasurement.Uom.CORES).withValue(value);\n+        TallyMeasurement totalCoreMeasurment = new TallyMeasurement().withHardwareMeasurementType(\"TOTAL\")\n+            .withUom(TallyMeasurement.Uom.CORES).withValue(value);\n+        TallyMeasurement virtualCoreMeasurment = new TallyMeasurement().withHardwareMeasurementType(\"VIRTUAL\")\n+            .withUom(TallyMeasurement.Uom.CORES).withValue(value);\n+\n+        UsageMeasurement usageMeasurement = new UsageMeasurement().value(value)\n+            .metricId(\"redhat.com:openshiftdedicated:cpu_hour\");\n+\n+        Arguments physical = Arguments.of(List.of(physicalCoreMeasurement), List.of(usageMeasurement));\n+        Arguments virtual = Arguments.of(List.of(virtualCoreMeasurment), List.of(usageMeasurement));\n+        Arguments physicalTotal = Arguments.of(List.of(physicalCoreMeasurement, totalCoreMeasurment), List.of(usageMeasurement));\n+        Arguments virtualTotal = Arguments.of(List.of(virtualCoreMeasurment, totalCoreMeasurment), List.of(usageMeasurement));\n+        Arguments physicalVirtual = Arguments.of(List.of(physicalCoreMeasurement, virtualCoreMeasurment), List.of(usageMeasurement, usageMeasurement));\n+        Arguments physicalVirtualTotal = Arguments.of(List.of(physicalCoreMeasurement, virtualCoreMeasurment, totalCoreMeasurment), List.of(usageMeasurement, usageMeasurement));\n+\n+        return Stream\n+            .of(physical, virtual, physicalTotal, virtualTotal, physicalVirtual, physicalVirtualTotal);\n+    }\n+\n+    @ParameterizedTest(name = \"testIsSnapshotPAYGEligible [{index}]\")\n+    @MethodSource(\"generateIsSnapshotPaygEligibleData\")\n+    void testIsSnapshotPAYGEligible(TallySnapshot snapshot, boolean isEligible) {\n+\n+        boolean actual = marketplacePayloadMapper.isSnapshotPAYGEligible(snapshot);\n+        assertEquals(isEligible, actual);\n+    }\n+\n+    static Stream<Arguments> generateIsSnapshotPaygEligibleData() {\n+\n+        Arguments eligbileOpenShiftMetrics = Arguments\n+            .of(new TallySnapshot().withProductId(\"OpenShift-metrics\")\n+            .withUsage(TallySnapshot.Usage.PRODUCTION).withSla(TallySnapshot.Sla.PREMIUM)\n+            .withGranularity(TallySnapshot.Granularity.HOURLY), true);\n+\n+        Arguments notEligibleBecauseSla = Arguments.of(new TallySnapshot().withProductId(\"OpenShift-metrics\")\n+            .withUsage(TallySnapshot.Usage.PRODUCTION).withSla(TallySnapshot.Sla.ANY)\n+            .withGranularity(TallySnapshot.Granularity.HOURLY), false);\n+\n+        Arguments notEligibleBecauseGranularity = Arguments\n+            .of(new TallySnapshot().withProductId(\"OpenShift-metrics\")\n+            .withUsage(TallySnapshot.Usage.PRODUCTION).withSla(TallySnapshot.Sla.PREMIUM)\n+            .withGranularity(TallySnapshot.Granularity.DAILY), false);\n+\n+        Arguments notElgibleBecauseUsage = Arguments\n+            .of(new TallySnapshot().withProductId(\"OpenShift-metrics\").withUsage(TallySnapshot.Usage.ANY)\n+            .withSla(TallySnapshot.Sla.PREMIUM).withGranularity(TallySnapshot.Granularity.HOURLY), false);\n+\n+        Arguments eligbileOpenShiftDedicatedMetrics = Arguments\n+            .of(new TallySnapshot().withProductId(\"OpenShift-dedicated-metrics\")\n+            .withUsage(TallySnapshot.Usage.PRODUCTION).withSla(TallySnapshot.Sla.PREMIUM)\n+            .withGranularity(TallySnapshot.Granularity.HOURLY), true);\n+\n+        Arguments notEligibleBecauseProductId = Arguments\n+            .of(new TallySnapshot().withProductId(\"RHEL\").withUsage(TallySnapshot.Usage.PRODUCTION)\n+            .withSla(TallySnapshot.Sla.PREMIUM).withGranularity(TallySnapshot.Granularity.HOURLY), false);\n+\n+        return Stream\n+            .of(eligbileOpenShiftMetrics, eligbileOpenShiftDedicatedMetrics, notEligibleBecauseProductId,\n+                notEligibleBecauseSla, notEligibleBecauseGranularity, notElgibleBecauseUsage);\n+    }\n+\n+    @Test\n+    void testProduceUsageEvents() {\n+        TallyMeasurement physicalCoreMeasurement = new TallyMeasurement()\n+            .withHardwareMeasurementType(\"PHYSICAL\").withUom(TallyMeasurement.Uom.CORES).withValue(36.0);\n+\n+        var snapshotDateLong = 1616100754L;\n+\n+        OffsetDateTime snapshotDate = OffsetDateTime\n+            .ofInstant(Instant.ofEpochMilli(snapshotDateLong), ZoneId.of(\"UTC\"));\n+        var snapshot = new TallySnapshot()\n+            .withId(UUID.fromString(\"c204074d-626f-4272-aa05-b6d69d6de16a\"))\n+            .withProductId(\"OpenShift-metrics\")\n+            .withSnapshotDate(snapshotDate)\n+            .withUsage(TallySnapshot.Usage.PRODUCTION)\n+            .withTallyMeasurements(List.of(physicalCoreMeasurement))\n+            .withSla(TallySnapshot.Sla.PREMIUM)\n+            .withGranularity(TallySnapshot.Granularity.HOURLY);\n+\n+        var summary = new TallySummary().withTallySnapshots(List.of(snapshot)).withAccountNumber(\"test123\");\n+\n+        var expected = List\n+            .of(new UsageEvent().start(1612500L).end(1616100L).eventId(\"c204074d-626f-4272-aa05-b6d69d6de16a\")\n+            .measuredUsage(List.of(\n+            new UsageMeasurement().value(36.0).metricId(\"redhat.com:openshiftdedicated:cpu_hour\"))));\n+\n+        List<UsageEvent> actual = marketplacePayloadMapper.produceUsageEvents(summary);\n+\n+        assertEquals(1, actual.size());\n+        assertEquals(expected.get(0).getEventId(), actual.get(0).getEventId());\n+        assertEquals(expected.get(0).getMeasuredUsage(), actual.get(0).getMeasuredUsage());\n+        assertEquals(expected.get(0).getStart(), actual.get(0).getStart());\n+        assertEquals(expected.get(0).getEnd(), actual.get(0).getEnd());\n+    }\n+}"
  },
  {
    "sha": "0e5a8eb35b2fa9ad47097e22e17170fe4e8f788d",
    "filename": "src/test/java/org/candlepin/subscriptions/marketplace/MarketplaceWorkerTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/RedHatInsights/rhsm-subscriptions/blob/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/test/java/org/candlepin/subscriptions/marketplace/MarketplaceWorkerTest.java",
    "raw_url": "https://github.com/RedHatInsights/rhsm-subscriptions/raw/ccfdf0d981a4221aa2a802cba6b1575b48df9b31/src/test/java/org/candlepin/subscriptions/marketplace/MarketplaceWorkerTest.java",
    "contents_url": "https://api.github.com/repos/RedHatInsights/rhsm-subscriptions/contents/src/test/java/org/candlepin/subscriptions/marketplace/MarketplaceWorkerTest.java?ref=ccfdf0d981a4221aa2a802cba6b1575b48df9b31",
    "patch": "@@ -24,7 +24,6 @@\n \n import org.candlepin.subscriptions.ApplicationProperties;\n import org.candlepin.subscriptions.json.TallySummary;\n-import org.candlepin.subscriptions.marketplace.MarketplaceWorker.MarketplacePayloadMapper;\n import org.candlepin.subscriptions.marketplace.api.model.UsageEvent;\n import org.candlepin.subscriptions.marketplace.api.model.UsageRequest;\n \n@@ -46,7 +45,7 @@ void testWorkerCallsProduceForNonEmptyPayload() {\n         var worker = new MarketplaceWorker(properties, producer, payloadMapper);\n \n         UsageRequest usageRequest = new UsageRequest().data(List.of(new UsageEvent()));\n-        when(payloadMapper.mapTallySummary(any())).thenReturn(usageRequest);\n+        when(payloadMapper.createUsageRequest(any())).thenReturn(usageRequest);\n \n         worker.receive(new TallySummary());\n \n@@ -61,7 +60,7 @@ void testWorkerSkipsEmptyPayloads() {\n         var worker = new MarketplaceWorker(properties, producer, payloadMapper);\n \n         UsageRequest usageRequest = new UsageRequest().data(Collections.emptyList());\n-        when(payloadMapper.mapTallySummary(any())).thenReturn(usageRequest);\n+        when(payloadMapper.createUsageRequest(any())).thenReturn(usageRequest);\n \n         worker.receive(new TallySummary());\n \n@@ -75,7 +74,7 @@ void testWorkerSkipsNullPayloads() {\n         MarketplacePayloadMapper payloadMapper = mock(MarketplacePayloadMapper.class);\n         var worker = new MarketplaceWorker(properties, producer, payloadMapper);\n \n-        when(payloadMapper.mapTallySummary(any())).thenReturn(null);\n+        when(payloadMapper.createUsageRequest(any())).thenReturn(null);\n \n         worker.receive(new TallySummary());\n "
  }
]
