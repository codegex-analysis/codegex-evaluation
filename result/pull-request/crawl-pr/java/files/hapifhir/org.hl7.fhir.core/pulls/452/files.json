[
  {
    "sha": "d689da3a8147a7f12b439c32cdb46b8b5ad864ce",
    "filename": "org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/IgLoader.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/hapifhir/org.hl7.fhir.core/blob/776811813e27e5ffc670333e36bcedbbac2157fd/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/IgLoader.java",
    "raw_url": "https://github.com/hapifhir/org.hl7.fhir.core/raw/776811813e27e5ffc670333e36bcedbbac2157fd/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/IgLoader.java",
    "contents_url": "https://api.github.com/repos/hapifhir/org.hl7.fhir.core/contents/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/IgLoader.java?ref=776811813e27e5ffc670333e36bcedbbac2157fd",
    "patch": "@@ -65,7 +65,7 @@ public IgLoader(FilesystemPackageCacheManager packageCacheManager,\n \n   public void loadIg(List<ImplementationGuide> igs,\n                      Map<String, byte[]> binaries,\n-                     String src, \n+                     String src,\n                      boolean recursive) throws IOException, FHIRException {\n     NpmPackage npm = src.matches(FilesystemPackageCacheManager.PACKAGE_VERSION_REGEX_OPT) && !new File(src).exists() ? getPackageCacheManager().loadPackage(src, null) : null;\n     if (npm != null) {\n@@ -147,7 +147,7 @@ else if (t.getKey().endsWith(\".txt\") || t.getKey().endsWith(\".map\"))\n    * @throws IOException\n    **/\n   public Map<String, byte[]> loadIgSource(String src,\n-                                          boolean recursive, \n+                                          boolean recursive,\n                                           boolean explore) throws FHIRException, IOException {\n     // src can be one of the following:\n     // - a canonical url for an ig - this will be converted to a package id and loaded into the cache\n@@ -562,7 +562,7 @@ private boolean isIgnoreFile(File ff) {\n     for (File ff : f.listFiles()) {\n       if (ff.isDirectory() && recursive) {\n         res.putAll(scanDirectory(ff, true));\n-      } else if (!isIgnoreFile(ff)) {\n+      } else if (!ff.isDirectory() && !isIgnoreFile(ff)) {\n         Manager.FhirFormat fmt = ResourceChecker.checkIsResource(getContext(), isDebug(), ff.getAbsolutePath());\n         if (fmt != null) {\n           res.put(Utilities.changeFileExt(ff.getName(), \".\" + fmt.getExtension()), TextFile.fileToBytes(ff.getAbsolutePath()));"
  }
]
