[
  {
    "sha": "52131130c73e1f46a483248f0f59d832ae4ff059",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/common/provider/LibraryContentProvider.java",
    "status": "renamed",
    "additions": 12,
    "deletions": 5,
    "changes": 17,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/common/provider/LibraryContentProvider.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/common/provider/LibraryContentProvider.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/common/provider/LibraryContentProvider.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -22,22 +22,23 @@\n \n import org.cqframework.cql.cql2elm.FhirLibrarySourceProvider;\n import org.hl7.elm.r1.VersionedIdentifier;\n+import org.opencds.cqf.cql.evaluator.cql2elm.content.LibraryContentType;\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.util.function.Function;\n \n-public class LibrarySourceProvider<LibraryType, AttachmentType>\n-\timplements org.cqframework.cql.cql2elm.LibrarySourceProvider {\n-\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(LibrarySourceProvider.class);\n+public class LibraryContentProvider<LibraryType, AttachmentType>\n+\timplements org.opencds.cqf.cql.evaluator.cql2elm.content.LibraryContentProvider {\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(LibraryContentProvider.class);\n \n \tprivate FhirLibrarySourceProvider innerProvider;\n \tprivate LibraryResolutionProvider<LibraryType> provider;\n \tprivate Function<LibraryType, Iterable<AttachmentType>> getAttachments;\n \tprivate Function<AttachmentType, String> getContentType;\n \tprivate Function<AttachmentType, byte[]> getContent;\n \n-\tpublic LibrarySourceProvider(LibraryResolutionProvider<LibraryType> provider,\n+\tpublic LibraryContentProvider(LibraryResolutionProvider<LibraryType> provider,\n \t\t\t\t\t\t\t\t\t\t  Function<LibraryType, Iterable<AttachmentType>> getAttachments,\n \t\t\t\t\t\t\t\t\t\t  Function<AttachmentType, String> getContentType, Function<AttachmentType, byte[]> getContent) {\n \n@@ -50,7 +51,13 @@ public LibrarySourceProvider(LibraryResolutionProvider<LibraryType> provider,\n \t}\n \n \t@Override\n-\tpublic InputStream getLibrarySource(VersionedIdentifier versionedIdentifier) {\n+\tpublic InputStream getLibraryContent(VersionedIdentifier versionedIdentifier, LibraryContentType libraryContentType){\n+\n+\t\t// TODO: Support loading ELM\n+\t\tif (libraryContentType != LibraryContentType.CQL) {\n+\t\t\treturn null;\n+\t\t}\n+\n \t\ttry {\n \t\t\tLibraryType lib = this.provider.resolveLibraryByName(versionedIdentifier.getId(),\n \t\t\t\tversionedIdentifier.getVersion());",
    "previous_filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/common/provider/LibrarySourceProvider.java"
  },
  {
    "sha": "17f9b807d1e382cb637a78ceabf6c9d43b75a1ef",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/BaseCqlConfig.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/BaseCqlConfig.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/BaseCqlConfig.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/BaseCqlConfig.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -27,6 +27,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n \n import org.cqframework.cql.cql2elm.model.Model;\n+import org.cqframework.cql.elm.execution.Library;\n import org.hl7.elm.r1.VersionedIdentifier;\n import org.springframework.context.annotation.Bean;\n \n@@ -46,4 +47,9 @@ CqlProviderLoader cqlProviderLoader() {\n \tMap<VersionedIdentifier, Model> globalModelCache() {\n \t\treturn new ConcurrentHashMap<VersionedIdentifier, Model>();\n \t}\n+\n+\t@Bean(name=\"globalLibraryCache\") \n+\tMap<org.cqframework.cql.elm.execution.VersionedIdentifier, Library> globalLibraryCache() {\n+\t\treturn new ConcurrentHashMap<org.cqframework.cql.elm.execution.VersionedIdentifier, Library>();\n+\t} \n }"
  },
  {
    "sha": "0b054d8c985e5f653fcfd736a5d2d63a6856ea0f",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlDstu3Config.java",
    "status": "modified",
    "additions": 26,
    "deletions": 3,
    "changes": 29,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlDstu3Config.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlDstu3Config.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlDstu3Config.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -26,12 +26,20 @@\n import ca.uhn.fhir.cql.common.provider.LibraryResolutionProvider;\n import ca.uhn.fhir.cql.dstu3.evaluation.ProviderFactory;\n import ca.uhn.fhir.cql.dstu3.helper.LibraryHelper;\n+import ca.uhn.fhir.cql.dstu3.listener.ElmCacheResourceChangeListener;\n import ca.uhn.fhir.cql.dstu3.provider.JpaTerminologyProvider;\n import ca.uhn.fhir.cql.dstu3.provider.LibraryResolutionProviderImpl;\n import ca.uhn.fhir.cql.dstu3.provider.MeasureOperationsProvider;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.cache.IResourceChangeListenerRegistry;\n import ca.uhn.fhir.jpa.term.api.ITermReadSvcDstu3;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+\n+import org.cqframework.cql.cql2elm.CqlTranslatorOptions;\n import org.cqframework.cql.cql2elm.model.Model;\n+import org.cqframework.cql.elm.execution.Library;\n import org.hl7.elm.r1.VersionedIdentifier;\n import org.opencds.cqf.cql.engine.fhir.model.Dstu3FhirModelResolver;\n import org.opencds.cqf.cql.engine.model.ModelResolver;\n@@ -60,7 +68,7 @@ EvaluationProviderFactory evaluationProviderFactory(FhirContext theFhirContext,\n \n \t@Lazy\n \t@Bean\n-\tLibraryResolutionProvider libraryResolutionProvider() {\n+\tLibraryResolutionProvider<org.hl7.fhir.dstu3.model.Library> libraryResolutionProvider() {\n \t\treturn new LibraryResolutionProviderImpl();\n \t}\n \n@@ -70,13 +78,28 @@ public MeasureOperationsProvider measureOperationsProvider() {\n \t\treturn new MeasureOperationsProvider();\n \t}\n \n+\t@Lazy\n \t@Bean\n \tpublic ModelResolver fhirModelResolver() {\n \t\treturn new CachingModelResolverDecorator(new Dstu3FhirModelResolver());\n \t}\n \n+\t@Lazy\n+\t@Bean\n+\tpublic LibraryHelper libraryHelper(Map<VersionedIdentifier, Model> globalModelCache, Map<org.cqframework.cql.elm.execution.VersionedIdentifier, Library> globalLibraryCache, CqlTranslatorOptions cqlTranslatorOptions) {\n+\t\treturn new LibraryHelper(globalModelCache, globalLibraryCache, cqlTranslatorOptions);\n+\t}\n+\n+\n+\t@Bean\n+\tpublic CqlTranslatorOptions cqlTranslatorOptions() {\n+\t\treturn CqlTranslatorOptions.defaultOptions().withCompatibilityLevel(\"1.3\");\n+\t}\n+\n \t@Bean\n-\tpublic LibraryHelper libraryHelper(Map<VersionedIdentifier, Model> globalModelCache) {\n-\t\treturn new LibraryHelper(globalModelCache);\n+\tpublic ElmCacheResourceChangeListener elmCacheResourceChangeListener(IResourceChangeListenerRegistry resourceChangeListenerRegistry, IFhirResourceDao<org.hl7.fhir.dstu3.model.Library> libraryDao,  Map<org.cqframework.cql.elm.execution.VersionedIdentifier, Library> globalLibraryCache) {\n+\t\tElmCacheResourceChangeListener listener = new ElmCacheResourceChangeListener(libraryDao, globalLibraryCache);\n+\t\tresourceChangeListenerRegistry.registerResourceResourceChangeListener(\"Library\", new SearchParameterMap(), listener, 1000);\n+\t\treturn listener;\n \t}\n }"
  },
  {
    "sha": "add489a137d8b84eb05ee900b411379e2a4d3a6a",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlR4Config.java",
    "status": "modified",
    "additions": 32,
    "deletions": 5,
    "changes": 37,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlR4Config.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlR4Config.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/config/CqlR4Config.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -27,12 +27,20 @@\n import ca.uhn.fhir.cql.common.provider.LibraryResolutionProvider;\n import ca.uhn.fhir.cql.r4.evaluation.ProviderFactory;\n import ca.uhn.fhir.cql.r4.helper.LibraryHelper;\n+import ca.uhn.fhir.cql.r4.listener.ElmCacheResourceChangeListener;\n import ca.uhn.fhir.cql.r4.provider.JpaTerminologyProvider;\n import ca.uhn.fhir.cql.r4.provider.LibraryResolutionProviderImpl;\n import ca.uhn.fhir.cql.r4.provider.MeasureOperationsProvider;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.cache.IResourceChangeListenerRegistry;\n import ca.uhn.fhir.jpa.term.api.ITermReadSvcR4;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+\n+import org.cqframework.cql.cql2elm.CqlTranslatorOptions;\n import org.cqframework.cql.cql2elm.model.Model;\n+import org.cqframework.cql.elm.execution.Library;\n import org.hl7.elm.r1.VersionedIdentifier;\n import org.opencds.cqf.cql.engine.fhir.model.R4FhirModelResolver;\n import org.opencds.cqf.cql.engine.model.ModelResolver;\n@@ -55,19 +63,21 @@ CqlProviderFactory cqlProviderFactory() {\n \n \t@Lazy\n \t@Bean\n-\tTerminologyProvider terminologyProvider(ITermReadSvcR4 theITermReadSvc, DaoRegistry theDaoRegistry, IValidationSupport theValidationSupport) {\n+\tTerminologyProvider terminologyProvider(ITermReadSvcR4 theITermReadSvc, DaoRegistry theDaoRegistry,\n+\t\t\tIValidationSupport theValidationSupport) {\n \t\treturn new JpaTerminologyProvider(theITermReadSvc, theDaoRegistry, theValidationSupport);\n \t}\n \n \t@Lazy\n \t@Bean\n-\tEvaluationProviderFactory evaluationProviderFactory(FhirContext theFhirContext, DaoRegistry theDaoRegistry, TerminologyProvider theLocalSystemTerminologyProvider, ModelResolver modelResolver) {\n+\tEvaluationProviderFactory evaluationProviderFactory(FhirContext theFhirContext, DaoRegistry theDaoRegistry,\n+\t\t\tTerminologyProvider theLocalSystemTerminologyProvider, ModelResolver modelResolver) {\n \t\treturn new ProviderFactory(theFhirContext, theDaoRegistry, theLocalSystemTerminologyProvider, modelResolver);\n \t}\n \n \t@Lazy\n \t@Bean\n-\tLibraryResolutionProvider libraryResolutionProvider() {\n+\tLibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResolutionProvider() {\n \t\treturn new LibraryResolutionProviderImpl();\n \t}\n \n@@ -77,13 +87,30 @@ public MeasureOperationsProvider measureOperationsProvider() {\n \t\treturn new MeasureOperationsProvider();\n \t}\n \n+\t@Lazy\n \t@Bean\n \tpublic ModelResolver fhirModelResolver() {\n \t\treturn new CachingModelResolverDecorator(new R4FhirModelResolver());\n \t}\n \n+\t@Lazy\n+\t@Bean\n+\tpublic LibraryHelper libraryHelper(Map<VersionedIdentifier, Model> globalModelCache,\n+\t\t\tMap<org.cqframework.cql.elm.execution.VersionedIdentifier, Library> globalLibraryCache,\n+\t\t\tCqlTranslatorOptions cqlTranslatorOptions) {\n+\t\treturn new LibraryHelper(globalModelCache, globalLibraryCache, cqlTranslatorOptions);\n+\t}\n+\n+\t@Lazy\n+\t@Bean\n+\tpublic CqlTranslatorOptions cqlTranslatorOptions() {\n+\t\treturn CqlTranslatorOptions.defaultOptions();\n+\t}\n+\n \t@Bean\n-\tpublic LibraryHelper libraryHelper(Map<VersionedIdentifier, Model> globalModelCache) {\n-\t\treturn new LibraryHelper(globalModelCache);\n+\tpublic ElmCacheResourceChangeListener elmCacheResourceChangeListener(IResourceChangeListenerRegistry resourceChangeListenerRegistry, IFhirResourceDao<org.hl7.fhir.r4.model.Library> libraryDao,  Map<org.cqframework.cql.elm.execution.VersionedIdentifier, Library> globalLibraryCache) {\n+\t\tElmCacheResourceChangeListener listener = new ElmCacheResourceChangeListener(libraryDao, globalLibraryCache);\n+\t\tresourceChangeListenerRegistry.registerResourceResourceChangeListener(\"Library\", new SearchParameterMap(), listener, 1000);\n+\t\treturn listener;\n \t}\n }"
  },
  {
    "sha": "613835662466c3104c0fdfea57dc1fff8cbfd0ac",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/helper/LibraryHelper.java",
    "status": "modified",
    "additions": 15,
    "deletions": 11,
    "changes": 26,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/helper/LibraryHelper.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/helper/LibraryHelper.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/helper/LibraryHelper.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -20,10 +20,10 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.cql.common.evaluation.LibraryLoader;\n import ca.uhn.fhir.cql.common.provider.LibraryResolutionProvider;\n-import ca.uhn.fhir.cql.common.provider.LibrarySourceProvider;\n-import org.cqframework.cql.cql2elm.LibraryManager;\n+import ca.uhn.fhir.cql.common.provider.LibraryContentProvider;\n+\n+import org.cqframework.cql.cql2elm.CqlTranslatorOptions;\n import org.cqframework.cql.cql2elm.ModelManager;\n import org.cqframework.cql.cql2elm.model.Model;\n import org.cqframework.cql.elm.execution.Library;\n@@ -36,31 +36,35 @@\n import org.hl7.fhir.dstu3.model.RelatedArtifact;\n import org.hl7.fhir.dstu3.model.Resource;\n import org.opencds.cqf.cql.evaluator.cql2elm.model.CacheAwareModelManager;\n-import org.opencds.cqf.cql.evaluator.engine.execution.PrivateCachingLibraryLoaderDecorator;\n+import org.opencds.cqf.cql.evaluator.engine.execution.CacheAwareLibraryLoaderDecorator;\n+import org.opencds.cqf.cql.evaluator.engine.execution.TranslatingLibraryLoader;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n public class LibraryHelper {\n \n \tprivate Map<org.hl7.elm.r1.VersionedIdentifier, Model> modelCache;\n+\tprivate Map<VersionedIdentifier, Library> libraryCache;\n+\tprivate CqlTranslatorOptions translatorOptions; \n+\n \n-\tpublic LibraryHelper(Map<org.hl7.elm.r1.VersionedIdentifier, Model> modelCache) {\n+\tpublic LibraryHelper(Map<org.hl7.elm.r1.VersionedIdentifier, Model> modelCache, Map<VersionedIdentifier, Library> libraryCache, CqlTranslatorOptions translatorOptions) {\n \t\tthis.modelCache = modelCache;\n+\t\tthis.libraryCache = libraryCache;\n+\t\tthis.translatorOptions = translatorOptions;\n \t}\n \n \tpublic org.opencds.cqf.cql.engine.execution.LibraryLoader createLibraryLoader(\n \t\tLibraryResolutionProvider<org.hl7.fhir.dstu3.model.Library> provider) {\n \t\tModelManager modelManager = new CacheAwareModelManager(this.modelCache);\n-\t\tLibraryManager libraryManager = new LibraryManager(modelManager);\n-\t\tlibraryManager.getLibrarySourceLoader().clearProviders();\n \n-\t\tlibraryManager.getLibrarySourceLoader().registerProvider(\n-\t\t\tnew LibrarySourceProvider<org.hl7.fhir.dstu3.model.Library, Attachment>(\n-\t\t\t\tprovider, x -> x.getContent(), x -> x.getContentType(), x -> x.getData()));\n+\t\tList<org.opencds.cqf.cql.evaluator.cql2elm.content.LibraryContentProvider> contentProviders = Collections.singletonList(new LibraryContentProvider<org.hl7.fhir.dstu3.model.Library, Attachment>(\n+\t\t\tprovider, x -> x.getContent(), x -> x.getContentType(), x -> x.getData()));\n \n-\t\treturn new PrivateCachingLibraryLoaderDecorator(new LibraryLoader(libraryManager, modelManager));\n+\t\treturn new CacheAwareLibraryLoaderDecorator(new TranslatingLibraryLoader(modelManager, contentProviders, translatorOptions), libraryCache);\n \t}\n \n \tpublic List<Library> loadLibraries(Measure measure,"
  },
  {
    "sha": "116f431a8220e398c9668608a57df802cf2158be",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/listener/ElmCacheResourceChangeListener.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/listener/ElmCacheResourceChangeListener.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/listener/ElmCacheResourceChangeListener.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/listener/ElmCacheResourceChangeListener.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -0,0 +1,66 @@\n+package ca.uhn.fhir.cql.dstu3.listener;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.cqframework.cql.elm.execution.Library;\n+import org.cqframework.cql.elm.execution.VersionedIdentifier;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.cache.IResourceChangeEvent;\n+import ca.uhn.fhir.jpa.cache.IResourceChangeListener;\n+\n+public class ElmCacheResourceChangeListener implements IResourceChangeListener {\n+\n+\tprivate IFhirResourceDao<org.hl7.fhir.dstu3.model.Library> libraryDao;\n+\tprivate Map<VersionedIdentifier, Library> globalLibraryCache;\n+\n+\tpublic ElmCacheResourceChangeListener(IFhirResourceDao<org.hl7.fhir.dstu3.model.Library> libraryDao, Map<VersionedIdentifier, Library> globalLibraryCache) {\n+\t\tthis.libraryDao = libraryDao;\n+\t\tthis.globalLibraryCache = globalLibraryCache;\n+\t}\n+\n+\t@Override\n+\tpublic void handleInit(Collection<IIdType> theResourceIds) {\n+\t\t// Intentionally empty. Only cache ELM on eval request\n+\t}\n+\n+\t@Override\n+\tpublic void handleChange(IResourceChangeEvent theResourceChangeEvent) {\n+\t\tif (theResourceChangeEvent == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.invalidateCacheByIds(theResourceChangeEvent.getDeletedResourceIds());\n+\t\tthis.invalidateCacheByIds(theResourceChangeEvent.getUpdatedResourceIds());\n+\t}\n+\n+\tprivate void invalidateCacheByIds(List<IIdType> theIds) {\n+\t\tif (theIds == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfor (IIdType id : theIds) {\n+\t\t\tthis.invalidateCacheById(id);\n+\t\t}\n+\t}\n+\n+\tprivate void invalidateCacheById(IIdType theId) {\n+\t\tif (!theId.getResourceType().equals(\"Library\"))  {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\torg.hl7.fhir.dstu3.model.Library library = this.libraryDao.read(theId);\n+\n+\t\t\tthis.globalLibraryCache.remove(new VersionedIdentifier().withId(library.getName()).withVersion(library.getVersion()));\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\t// TODO: This needs to be smarter...\n+\t\t\t// Couldn't locate the library since it was deleted. Clear the cache entirely.\n+\t\t\tthis.globalLibraryCache.clear();\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "c8d945fb77e5bde9394c3af457eb2f84ea6fc68c",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/provider/MeasureOperationsProvider.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/provider/MeasureOperationsProvider.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/provider/MeasureOperationsProvider.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/dstu3/provider/MeasureOperationsProvider.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -40,8 +40,6 @@\n import org.hl7.fhir.dstu3.model.StringType;\n import org.hl7.fhir.exceptions.FHIRException;\n import org.opencds.cqf.cql.engine.execution.LibraryLoader;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -54,8 +52,6 @@\n  */\n @Component\n public class MeasureOperationsProvider {\n-\tprivate static final Logger logger = LoggerFactory.getLogger(MeasureOperationsProvider.class);\n-\n \t@Autowired\n \tprivate LibraryResolutionProvider<Library> libraryResolutionProvider;\n \t@Autowired"
  },
  {
    "sha": "2fd9ebc9c3f7232f90e34b6a5954fd6e9822bb2c",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/helper/LibraryHelper.java",
    "status": "modified",
    "additions": 197,
    "deletions": 184,
    "changes": 381,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/helper/LibraryHelper.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/helper/LibraryHelper.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/helper/LibraryHelper.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -20,9 +20,10 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.cql.common.evaluation.LibraryLoader;\n import ca.uhn.fhir.cql.common.provider.LibraryResolutionProvider;\n-import ca.uhn.fhir.cql.common.provider.LibrarySourceProvider;\n+import ca.uhn.fhir.cql.common.provider.LibraryContentProvider;\n+\n+import org.cqframework.cql.cql2elm.CqlTranslatorOptions;\n import org.cqframework.cql.cql2elm.LibraryManager;\n import org.cqframework.cql.cql2elm.ModelManager;\n import org.cqframework.cql.cql2elm.model.Model;\n@@ -36,9 +37,11 @@\n import org.hl7.fhir.r4.model.RelatedArtifact;\n import org.hl7.fhir.r4.model.Resource;\n import org.opencds.cqf.cql.evaluator.cql2elm.model.CacheAwareModelManager;\n-import org.opencds.cqf.cql.evaluator.engine.execution.PrivateCachingLibraryLoaderDecorator;\n+import org.opencds.cqf.cql.evaluator.engine.execution.CacheAwareLibraryLoaderDecorator;\n+import org.opencds.cqf.cql.evaluator.engine.execution.TranslatingLibraryLoader;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n@@ -48,190 +51,200 @@\n public class LibraryHelper {\n \n \tprivate Map<org.hl7.elm.r1.VersionedIdentifier, Model> modelCache;\n+\tprivate Map<VersionedIdentifier, Library> libraryCache;\n+\tprivate CqlTranslatorOptions translatorOptions;\n \n-\tpublic LibraryHelper(Map<org.hl7.elm.r1.VersionedIdentifier, Model> modelCache) {\n+\tpublic LibraryHelper(Map<org.hl7.elm.r1.VersionedIdentifier, Model> modelCache,\n+\t\t\tMap<VersionedIdentifier, Library> libraryCache, CqlTranslatorOptions translatorOptions) {\n \t\tthis.modelCache = modelCache;\n+\t\tthis.libraryCache = libraryCache;\n+\t\tthis.translatorOptions = translatorOptions;\n+\t}\n+\n+\tpublic org.opencds.cqf.cql.engine.execution.LibraryLoader createLibraryLoader(\n+\t\t\tLibraryResolutionProvider<org.hl7.fhir.r4.model.Library> provider) {\n+\t\tModelManager modelManager = new CacheAwareModelManager(this.modelCache);\n+\t\tLibraryManager libraryManager = new LibraryManager(modelManager);\n+\t\tlibraryManager.getLibrarySourceLoader().clearProviders();\n+\t\tList<org.opencds.cqf.cql.evaluator.cql2elm.content.LibraryContentProvider> contentProviders = Collections\n+\t\t\t\t.singletonList(new LibraryContentProvider<org.hl7.fhir.r4.model.Library, Attachment>(provider,\n+\t\t\t\t\t\tx -> x.getContent(), x -> x.getContentType(), x -> x.getData()));\n+\n+\t\treturn new CacheAwareLibraryLoaderDecorator(\n+\t\t\t\tnew TranslatingLibraryLoader(modelManager, contentProviders, translatorOptions), libraryCache);\n \t}\n \n-    public org.opencds.cqf.cql.engine.execution.LibraryLoader createLibraryLoader(LibraryResolutionProvider<org.hl7.fhir.r4.model.Library> provider) {\n+\tpublic org.opencds.cqf.cql.engine.execution.LibraryLoader createLibraryLoader(\n+\t\t\torg.cqframework.cql.cql2elm.LibrarySourceProvider provider) {\n \t\tModelManager modelManager = new CacheAwareModelManager(this.modelCache);\n-        LibraryManager libraryManager = new LibraryManager(modelManager);\n-        libraryManager.getLibrarySourceLoader().clearProviders();\n-\n-        libraryManager.getLibrarySourceLoader().registerProvider(\n-                new LibrarySourceProvider<org.hl7.fhir.r4.model.Library, Attachment>(provider,\n-                        x -> x.getContent(), x -> x.getContentType(), x -> x.getData()));\n-\n-        return new PrivateCachingLibraryLoaderDecorator(new LibraryLoader(libraryManager, modelManager));\n-    }\n-\n-    public org.opencds.cqf.cql.engine.execution.LibraryLoader createLibraryLoader(org.cqframework.cql.cql2elm.LibrarySourceProvider provider) {\n-        ModelManager modelManager = new CacheAwareModelManager(this.modelCache);\n-        LibraryManager libraryManager = new LibraryManager(modelManager);\n-        libraryManager.getLibrarySourceLoader().clearProviders();\n-\n-        libraryManager.getLibrarySourceLoader().registerProvider(provider);\n-\n-        return new PrivateCachingLibraryLoaderDecorator(new LibraryLoader(libraryManager, modelManager));\n-    }\n-\n-    public org.hl7.fhir.r4.model.Library resolveLibraryReference(LibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider, String reference) {\n-        // Raw references to Library/libraryId or libraryId\n-        if (reference.startsWith(\"Library/\") || !reference.contains(\"/\")) {\n-            return libraryResourceProvider.resolveLibraryById(reference.replace(\"Library/\", \"\"));\n-        }\n-        // Full url (e.g. http://hl7.org/fhir/us/Library/FHIRHelpers)\n-        else if (reference.contains((\"/Library/\"))) {\n-            return libraryResourceProvider.resolveLibraryByCanonicalUrl(reference);\n-        }\n-\n-        return null;\n-    }\n-\n-    public List<org.cqframework.cql.elm.execution.Library> loadLibraries(Measure measure,\n-            org.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n-            LibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n-        List<org.cqframework.cql.elm.execution.Library> libraries = new ArrayList<org.cqframework.cql.elm.execution.Library>();\n-\n-        // load libraries\n-        //TODO: if there's a bad measure argument, this blows up for an obscure error\n-        org.hl7.fhir.r4.model.Library primaryLibrary = null;\n-        for (CanonicalType ref : measure.getLibrary()) {\n-            // if library is contained in measure, load it into server\n-            String id = ref.getValue(); //CanonicalHelper.getId(ref);\n-            if (id.startsWith(\"#\")) {\n-                id = id.substring(1);\n-                for (Resource resource : measure.getContained()) {\n-                    if (resource instanceof org.hl7.fhir.r4.model.Library\n-                            && resource.getIdElement().getIdPart().equals(id)) {\n-                        libraryResourceProvider.update((org.hl7.fhir.r4.model.Library) resource);\n-                    }\n-                }\n-            }\n-\n-            // We just loaded it into the server so we can access it by Id\n-            org.hl7.fhir.r4.model.Library library = resolveLibraryReference(libraryResourceProvider, id);\n-            if (primaryLibrary == null) {\n-                primaryLibrary = library;\n-            }\n-\n-            if (library != null && isLogicLibrary(library)) {\n-                libraries.add(\n-                        libraryLoader.load(new VersionedIdentifier().withId(library.getName()).withVersion(library.getVersion()))\n-                );\n-            }\n-        }\n-\n-        if (libraries.isEmpty()) {\n-            throw new IllegalArgumentException(String\n-                    .format(\"Could not load library source for libraries referenced in %s.\", measure.getId()));\n-        }\n-\n-        //VersionedIdentifier primaryLibraryId = libraries.get(0).getIdentifier();\n-        //org.hl7.fhir.r4.model.Library primaryLibrary = libraryResourceProvider.resolveLibraryByName(primaryLibraryId.getId(), primaryLibraryId.getVersion());\n-        for (RelatedArtifact artifact : primaryLibrary.getRelatedArtifact()) {\n-            if (artifact.hasType() && artifact.getType().equals(RelatedArtifact.RelatedArtifactType.DEPENDSON) && artifact.hasResource()) {\n-                org.hl7.fhir.r4.model.Library library = null;\n-                library = resolveLibraryReference(libraryResourceProvider, artifact.getResource());\n-\n-                if (library != null && isLogicLibrary(library)) {\n-                    libraries.add(\n-                            libraryLoader.load(new VersionedIdentifier().withId(library.getName()).withVersion(library.getVersion()))\n-                    );\n-                }\n-            }\n-        }\n-\n-        return libraries;\n-    }\n-\n-    private boolean isLogicLibrary(org.hl7.fhir.r4.model.Library library) {\n-        if (library == null) {\n-            return false;\n-        }\n-\n-        if (!library.hasType()) {\n-            // If no type is specified, assume it is a logic library based on whether there is a CQL content element.\n-            if (library.hasContent()) {\n-                for (Attachment a : library.getContent()) {\n-                    if (a.hasContentType() && (a.getContentType().equals(\"text/cql\")\n-                            || a.getContentType().equals(\"application/elm+xml\")\n-                            || a.getContentType().equals(\"application/elm+json\"))) {\n-                        return true;\n-                    }\n-                }\n-            }\n-            return false;\n-        }\n-\n-        if (!library.getType().hasCoding()) {\n-            return false;\n-        }\n-\n-        for (Coding c : library.getType().getCoding()) {\n-            if (c.hasSystem() && c.getSystem().equals(\"http://terminology.hl7.org/CodeSystem/library-type\")\n-                    && c.hasCode() && c.getCode().equals(\"logic-library\")) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    public Library resolveLibraryById(String libraryId,\n-            org.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n-            LibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n-        // Library library = null;\n-\n-        org.hl7.fhir.r4.model.Library fhirLibrary = libraryResourceProvider.resolveLibraryById(libraryId);\n-        return libraryLoader\n-                .load(new VersionedIdentifier().withId(fhirLibrary.getName()).withVersion(fhirLibrary.getVersion()));\n-\n-        // for (Library l : libraryLoader.getLibraries()) {\n-        // VersionedIdentifier vid = l.getIdentifier();\n-        // if (vid.getId().equals(fhirLibrary.getName()) &&\n-        // LibraryResourceHelper.compareVersions(fhirLibrary.getVersion(),\n-        // vid.getVersion()) == 0) {\n-        // library = l;\n-        // break;\n-        // }\n-        // }\n-\n-        // if (library == null) {\n-\n-        // }\n-\n-        // return library;\n-    }\n-\n-    public Library resolvePrimaryLibrary(Measure measure,\n-            org.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n-            LibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n-        // default is the first library reference\n-        String id = CanonicalHelper.getId(measure.getLibrary().get(0));\n-\n-        Library library = resolveLibraryById(id, libraryLoader, libraryResourceProvider);\n-\n-        if (library == null) {\n-            throw new IllegalArgumentException(String.format(\"Could not resolve primary library for Measure/%s.\",\n-                    measure.getIdElement().getIdPart()));\n-        }\n-\n-        return library;\n-    }\n-\n-    public Library resolvePrimaryLibrary(PlanDefinition planDefinition,\n-            org.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n-            LibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n-        String id = CanonicalHelper.getId(planDefinition.getLibrary().get(0));\n-\n-        Library library = resolveLibraryById(id, libraryLoader, libraryResourceProvider);\n-\n-        if (library == null) {\n-            throw new IllegalArgumentException(String.format(\"Could not resolve primary library for PlanDefinition/%s\",\n-                    planDefinition.getIdElement().getIdPart()));\n-        }\n-\n-        return library;\n-    }\n+\t\tLibraryManager libraryManager = new LibraryManager(modelManager);\n+\t\tlibraryManager.getLibrarySourceLoader().clearProviders();\n+\n+\t\tlibraryManager.getLibrarySourceLoader().registerProvider(provider);\n+\n+\t\treturn new CacheAwareLibraryLoaderDecorator(new TranslatingLibraryLoader(modelManager, null, translatorOptions),\n+\t\t\t\tlibraryCache);\n+\t}\n+\n+\tpublic org.hl7.fhir.r4.model.Library resolveLibraryReference(\n+\t\t\tLibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider, String reference) {\n+\t\t// Raw references to Library/libraryId or libraryId\n+\t\tif (reference.startsWith(\"Library/\") || !reference.contains(\"/\")) {\n+\t\t\treturn libraryResourceProvider.resolveLibraryById(reference.replace(\"Library/\", \"\"));\n+\t\t}\n+\t\t// Full url (e.g. http://hl7.org/fhir/us/Library/FHIRHelpers)\n+\t\telse if (reference.contains((\"/Library/\"))) {\n+\t\t\treturn libraryResourceProvider.resolveLibraryByCanonicalUrl(reference);\n+\t\t}\n+\n+\t\treturn null;\n+\t}\n+\n+\tpublic List<org.cqframework.cql.elm.execution.Library> loadLibraries(Measure measure,\n+\t\t\torg.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n+\t\t\tLibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n+\t\tList<org.cqframework.cql.elm.execution.Library> libraries = new ArrayList<org.cqframework.cql.elm.execution.Library>();\n+\n+\t\t// load libraries\n+\t\t// TODO: if there's a bad measure argument, this blows up for an obscure error\n+\t\torg.hl7.fhir.r4.model.Library primaryLibrary = null;\n+\t\tfor (CanonicalType ref : measure.getLibrary()) {\n+\t\t\t// if library is contained in measure, load it into server\n+\t\t\tString id = ref.getValue(); // CanonicalHelper.getId(ref);\n+\t\t\tif (id.startsWith(\"#\")) {\n+\t\t\t\tid = id.substring(1);\n+\t\t\t\tfor (Resource resource : measure.getContained()) {\n+\t\t\t\t\tif (resource instanceof org.hl7.fhir.r4.model.Library\n+\t\t\t\t\t\t\t&& resource.getIdElement().getIdPart().equals(id)) {\n+\t\t\t\t\t\tlibraryResourceProvider.update((org.hl7.fhir.r4.model.Library) resource);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t// We just loaded it into the server so we can access it by Id\n+\t\t\torg.hl7.fhir.r4.model.Library library = resolveLibraryReference(libraryResourceProvider, id);\n+\t\t\tif (primaryLibrary == null) {\n+\t\t\t\tprimaryLibrary = library;\n+\t\t\t}\n+\n+\t\t\tif (library != null && isLogicLibrary(library)) {\n+\t\t\t\tlibraries.add(libraryLoader\n+\t\t\t\t\t\t.load(new VersionedIdentifier().withId(library.getName()).withVersion(library.getVersion())));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (libraries.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"Could not load library source for libraries referenced in %s.\", measure.getId()));\n+\t\t}\n+\n+\t\t// VersionedIdentifier primaryLibraryId = libraries.get(0).getIdentifier();\n+\t\t// org.hl7.fhir.r4.model.Library primaryLibrary =\n+\t\t// libraryResourceProvider.resolveLibraryByName(primaryLibraryId.getId(),\n+\t\t// primaryLibraryId.getVersion());\n+\t\tfor (RelatedArtifact artifact : primaryLibrary.getRelatedArtifact()) {\n+\t\t\tif (artifact.hasType() && artifact.getType().equals(RelatedArtifact.RelatedArtifactType.DEPENDSON)\n+\t\t\t\t\t&& artifact.hasResource()) {\n+\t\t\t\torg.hl7.fhir.r4.model.Library library = null;\n+\t\t\t\tlibrary = resolveLibraryReference(libraryResourceProvider, artifact.getResource());\n+\n+\t\t\t\tif (library != null && isLogicLibrary(library)) {\n+\t\t\t\t\tlibraries.add(libraryLoader\n+\t\t\t\t\t\t\t.load(new VersionedIdentifier().withId(library.getName()).withVersion(library.getVersion())));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn libraries;\n+\t}\n+\n+\tprivate boolean isLogicLibrary(org.hl7.fhir.r4.model.Library library) {\n+\t\tif (library == null) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (!library.hasType()) {\n+\t\t\t// If no type is specified, assume it is a logic library based on whether there\n+\t\t\t// is a CQL content element.\n+\t\t\tif (library.hasContent()) {\n+\t\t\t\tfor (Attachment a : library.getContent()) {\n+\t\t\t\t\tif (a.hasContentType()\n+\t\t\t\t\t\t\t&& (a.getContentType().equals(\"text/cql\") || a.getContentType().equals(\"application/elm+xml\")\n+\t\t\t\t\t\t\t\t\t|| a.getContentType().equals(\"application/elm+json\"))) {\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (!library.getType().hasCoding()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfor (Coding c : library.getType().getCoding()) {\n+\t\t\tif (c.hasSystem() && c.getSystem().equals(\"http://terminology.hl7.org/CodeSystem/library-type\") && c.hasCode()\n+\t\t\t\t\t&& c.getCode().equals(\"logic-library\")) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+\tpublic Library resolveLibraryById(String libraryId, org.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n+\t\t\tLibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n+\t\t// Library library = null;\n+\n+\t\torg.hl7.fhir.r4.model.Library fhirLibrary = libraryResourceProvider.resolveLibraryById(libraryId);\n+\t\treturn libraryLoader\n+\t\t\t\t.load(new VersionedIdentifier().withId(fhirLibrary.getName()).withVersion(fhirLibrary.getVersion()));\n+\n+\t\t// for (Library l : libraryLoader.getLibraries()) {\n+\t\t// VersionedIdentifier vid = l.getIdentifier();\n+\t\t// if (vid.getId().equals(fhirLibrary.getName()) &&\n+\t\t// LibraryResourceHelper.compareVersions(fhirLibrary.getVersion(),\n+\t\t// vid.getVersion()) == 0) {\n+\t\t// library = l;\n+\t\t// break;\n+\t\t// }\n+\t\t// }\n+\n+\t\t// if (library == null) {\n+\n+\t\t// }\n+\n+\t\t// return library;\n+\t}\n+\n+\tpublic Library resolvePrimaryLibrary(Measure measure,\n+\t\t\torg.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n+\t\t\tLibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n+\t\t// default is the first library reference\n+\t\tString id = CanonicalHelper.getId(measure.getLibrary().get(0));\n+\n+\t\tLibrary library = resolveLibraryById(id, libraryLoader, libraryResourceProvider);\n+\n+\t\tif (library == null) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"Could not resolve primary library for Measure/%s.\", measure.getIdElement().getIdPart()));\n+\t\t}\n+\n+\t\treturn library;\n+\t}\n+\n+\tpublic Library resolvePrimaryLibrary(PlanDefinition planDefinition,\n+\t\t\torg.opencds.cqf.cql.engine.execution.LibraryLoader libraryLoader,\n+\t\t\tLibraryResolutionProvider<org.hl7.fhir.r4.model.Library> libraryResourceProvider) {\n+\t\tString id = CanonicalHelper.getId(planDefinition.getLibrary().get(0));\n+\n+\t\tLibrary library = resolveLibraryById(id, libraryLoader, libraryResourceProvider);\n+\n+\t\tif (library == null) {\n+\t\t\tthrow new IllegalArgumentException(String.format(\"Could not resolve primary library for PlanDefinition/%s\",\n+\t\t\t\t\tplanDefinition.getIdElement().getIdPart()));\n+\t\t}\n+\n+\t\treturn library;\n+\t}\n }"
  },
  {
    "sha": "c2afa5a928eb285fbf48a7393ee547f723c79900",
    "filename": "hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/listener/ElmCacheResourceChangeListener.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/listener/ElmCacheResourceChangeListener.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/listener/ElmCacheResourceChangeListener.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-jpaserver-cql/src/main/java/ca/uhn/fhir/cql/r4/listener/ElmCacheResourceChangeListener.java?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -0,0 +1,66 @@\n+package ca.uhn.fhir.cql.r4.listener;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.cqframework.cql.elm.execution.Library;\n+import org.cqframework.cql.elm.execution.VersionedIdentifier;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.cache.IResourceChangeEvent;\n+import ca.uhn.fhir.jpa.cache.IResourceChangeListener;\n+\n+public class ElmCacheResourceChangeListener implements IResourceChangeListener {\n+\n+\tprivate IFhirResourceDao<org.hl7.fhir.r4.model.Library> libraryDao;\n+\tprivate Map<VersionedIdentifier, Library> globalLibraryCache;\n+\n+\tpublic ElmCacheResourceChangeListener(IFhirResourceDao<org.hl7.fhir.r4.model.Library> libraryDao, Map<VersionedIdentifier, Library> globalLibraryCache) {\n+\t\tthis.libraryDao = libraryDao;\n+\t\tthis.globalLibraryCache = globalLibraryCache;\n+\t}\n+\n+\t@Override\n+\tpublic void handleInit(Collection<IIdType> theResourceIds) {\n+\t\t// Intentionally empty. Only cache ELM on eval request\n+\t}\n+\n+\t@Override\n+\tpublic void handleChange(IResourceChangeEvent theResourceChangeEvent) {\n+\t\tif (theResourceChangeEvent == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.invalidateCacheByIds(theResourceChangeEvent.getDeletedResourceIds());\n+\t\tthis.invalidateCacheByIds(theResourceChangeEvent.getUpdatedResourceIds());\n+\t}\n+\n+\tprivate void invalidateCacheByIds(List<IIdType> theIds) {\n+\t\tif (theIds == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfor (IIdType id : theIds) {\n+\t\t\tthis.invalidateCacheById(id);\n+\t\t}\n+\t}\n+\n+\tprivate void invalidateCacheById(IIdType theId) {\n+\t\tif (!theId.getResourceType().equals(\"Library\"))  {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\torg.hl7.fhir.r4.model.Library library = this.libraryDao.read(theId);\n+\n+\t\t\tthis.globalLibraryCache.remove(new VersionedIdentifier().withId(library.getName()).withVersion(library.getVersion()));\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\t// TODO: This needs to be smarter...\n+\t\t\t// Couldn't locate the library since it was deleted. Clear the cache entirely.\n+\t\t\tthis.globalLibraryCache.clear();\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "272bf1f3412040948a71c2d95e62d2095636b68b",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/pom.xml",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/e0075cfca72c06b8ab8b4864c07a20c77c4d20e6/pom.xml",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/pom.xml?ref=e0075cfca72c06b8ab8b4864c07a20c77c4d20e6",
    "patch": "@@ -827,7 +827,7 @@\n \t\t<elastic_apm_version>1.13.0</elastic_apm_version>\n \t\t<!-- CQL Support -->\n \t\t<cql-engine.version>1.5.1</cql-engine.version>\n-\t\t<cql-evaluator.version>1.1.0</cql-evaluator.version>\n+\t\t<cql-evaluator.version>1.2.0-SNAPSHOT</cql-evaluator.version>\n \t\t<cqframework.version>1.5.1</cqframework.version>\n \n \t\t<!-- Site properties -->"
  }
]
