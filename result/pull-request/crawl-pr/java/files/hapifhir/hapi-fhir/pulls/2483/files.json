[
  {
    "sha": "d57b1ec14c989567b9c99c07e9c751a9ba8320c7",
    "filename": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/ExtensionUtil.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/ExtensionUtil.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/ExtensionUtil.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/ExtensionUtil.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -23,9 +23,12 @@\n \n import ca.uhn.fhir.context.FhirContext;\n import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseBooleanDatatype;\n import org.hl7.fhir.instance.model.api.IBaseDatatype;\n+import org.hl7.fhir.instance.model.api.IBaseDecimalDatatype;\n import org.hl7.fhir.instance.model.api.IBaseExtension;\n import org.hl7.fhir.instance.model.api.IBaseHasExtensions;\n+import org.hl7.fhir.instance.model.api.IBaseIntegerDatatype;\n \n import java.util.List;\n import java.util.stream.Collectors;\n@@ -175,4 +178,13 @@ public static void setExtension(FhirContext theFhirContext, IBase theBase, Strin\n \t\tsetExtension(theFhirContext, ext, theValue);\n \t}\n \n+\t/**\n+\t * Compares two extensions, returns true if they have the same value and url\n+\t * @param leftExtension\n+\t * @param rightExtension\n+\t * @return Result of the comparison\n+\t */\n+\tpublic static boolean equals(IBaseExtension leftExtension, IBaseExtension rightExtension){\n+\t\treturn TerserUtil.equals(leftExtension, rightExtension);\n+\t}\n }"
  },
  {
    "sha": "14f638a164811c79e9fe5c12015b6a1e840e8639",
    "filename": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/PrimitiveTypeEqualsPredicate.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/PrimitiveTypeEqualsPredicate.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/PrimitiveTypeEqualsPredicate.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/PrimitiveTypeEqualsPredicate.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -23,6 +23,7 @@\n import org.hl7.fhir.instance.model.api.IPrimitiveType;\n \n import java.lang.reflect.Field;\n+import java.util.List;\n import java.util.function.BiPredicate;\n \n /**"
  },
  {
    "sha": "46af69257766bceb3bd436740311dc60431a6eb5",
    "filename": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/TerserUtil.java",
    "status": "modified",
    "additions": 27,
    "deletions": 13,
    "changes": 40,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/TerserUtil.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/TerserUtil.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/TerserUtil.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -30,6 +30,7 @@\n import org.slf4j.Logger;\n \n import java.lang.reflect.Method;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n@@ -46,6 +47,8 @@\n \n \tpublic static final String FIELD_NAME_IDENTIFIER = \"identifier\";\n \n+\tprivate static final String EQUALS_DEEP=\"equalsDeep\";\n+\n \tpublic static final Collection<String> IDS_AND_META_EXCLUDES =\n \t\tCollections.unmodifiableSet(Stream.of(\"id\", \"identifier\", \"meta\").collect(Collectors.toSet()));\n \n@@ -157,26 +160,37 @@ private static boolean containsPrimitiveValue(IBase theItem, List<IBase> theItem\n \t\t});\n \t}\n \n-\tprivate static boolean contains(IBase theItem, List<IBase> theItems) {\n+\tprivate static Method getMethod(IBase item, String methodName){\n \t\tMethod method = null;\n-\t\tfor (Method m : theItem.getClass().getDeclaredMethods()) {\n-\t\t\tif (m.getName().equals(\"equalsDeep\")) {\n+\t\tfor (Method m : item.getClass().getDeclaredMethods()) {\n+\t\t\tif (m.getName().equals(methodName)) {\n \t\t\t\tmethod = m;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n+\t\treturn method;\n+\t}\n \n-\t\tfinal Method m = method;\n-\t\treturn theItems.stream().anyMatch(i -> {\n-\t\t\tif (m != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\treturn (Boolean) m.invoke(theItem, i);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tthrow new RuntimeException(\"Unable to compare equality via equalsDeep\", e);\n-\t\t\t\t}\n+\tpublic static boolean equals(IBase theItem1, IBase theItem2){\n+\t\tfinal Method m = getMethod(theItem1, EQUALS_DEEP);\n+\n+\t\treturn equals(theItem1, theItem2, m);\n+\t}\n+\n+\tpublic static boolean equals(IBase theItem1, IBase theItem2, Method m) {\n+\t\tif (m != null) {\n+\t\t\ttry {\n+\t\t\t\treturn (Boolean) m.invoke(theItem1, theItem2);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new RuntimeException(\"Unable to compare equality via equalsDeep\", e);\n \t\t\t}\n-\t\t\treturn theItem.equals(i);\n-\t\t});\n+\t\t}\n+\t\treturn theItem1.equals(theItem2);\n+\t}\n+\n+\tprivate static boolean contains(IBase theItem, List<IBase> theItems) {\n+\t\tfinal Method m = getMethod(theItem, EQUALS_DEEP);\n+\t\treturn theItems.stream().anyMatch(i -> equals(i, theItem, m));\n \t}\n \n \t/**"
  },
  {
    "sha": "10a152c182c7a3228ed814d40a8ec121766e075d",
    "filename": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_4_0/2478-add-extension-mdm-search-matcher.yaml",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_4_0/2478-add-extension-mdm-search-matcher.yaml",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_4_0/2478-add-extension-mdm-search-matcher.yaml",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_4_0/2478-add-extension-mdm-search-matcher.yaml?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -0,0 +1,4 @@\n+---\n+type: add\n+issue: 2478\n+title: \"Added matching based on extension, when given the path to a fhir resource the matcher will take the extensions and match if the url and string value are the same\""
  },
  {
    "sha": "491e90befd5b066ad21b6802dcab70062eed88ff",
    "filename": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm_rules.md",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm_rules.md",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm_rules.md",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_mdm/mdm_rules.md?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -403,6 +403,14 @@ The following algorithms are currently supported:\n             </td>\n             <td>If an optional \"identifierSystem\" is provided, then the identifiers only match when they belong to that system</td>\n         </tr>     \n+        <tr>\n+            <td>EXTENSION_ANY_ORDER</td>\n+            <td>matcher</td>\n+            <td>\n+               Matches when at least one system and value extension pair are identical.\n+            </td>\n+            <td>If an optional \"identifierSystem\" is provided, then the extensions only match when they belong to that system</td>\n+        </tr>\n         <tr>\n             <td>EMPTY_FIELD</td>\n             <td>matcher</td>"
  },
  {
    "sha": "a3b4f014636790e3ea24b4d6ead0397a90b918e7",
    "filename": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcher.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcher.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcher.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcher.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -0,0 +1,34 @@\n+package ca.uhn.fhir.mdm.rules.matcher;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.util.ExtensionUtil;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseExtension;\n+import org.hl7.fhir.instance.model.api.IBaseHasExtensions;\n+\n+import java.util.List;\n+\n+public class ExtensionMatcher implements IMdmFieldMatcher{\n+\t@Override\n+\tpublic boolean matches(FhirContext theFhirContext, IBase theLeftBase, IBase theRightBase, boolean theExact, String theIdentifierSystem) {\n+\t\tif (!(theLeftBase instanceof IBaseHasExtensions && theRightBase instanceof IBaseHasExtensions)){\n+\t\t\treturn false;\n+\t\t}\n+\t\tList<? extends IBaseExtension<?, ?>> leftExtension = ((IBaseHasExtensions) theLeftBase).getExtension();\n+\t\tList<? extends IBaseExtension<?, ?>> rightExtension = ((IBaseHasExtensions) theRightBase).getExtension();\n+\n+\t\tboolean match = false;\n+\n+\t\tif (theIdentifierSystem != null) {\n+\t\t\tleftExtension.removeIf(iBaseExtension -> !iBaseExtension.getUrl().equals(theIdentifierSystem));\n+\t\t\trightExtension.removeIf(iBaseExtension -> !iBaseExtension.getUrl().equals(theIdentifierSystem));\n+\t\t}\n+\n+\t\tfor (IBaseExtension leftExtensionValue : leftExtension) {\n+\t\t\tfor (IBaseExtension rightExtensionValue : rightExtension) {\n+\t\t\t\tmatch |= ExtensionUtil.equals(leftExtensionValue, rightExtensionValue);\n+\t\t\t}\n+\t\t}\n+\t\treturn match;\n+\t}\n+}"
  },
  {
    "sha": "458387d14d3f2017ff42eb147ea15ca876c3073e",
    "filename": "hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/MdmMatcherEnum.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/MdmMatcherEnum.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/MdmMatcherEnum.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-server-mdm/src/main/java/ca/uhn/fhir/mdm/rules/matcher/MdmMatcherEnum.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -50,7 +50,8 @@\n \n \tIDENTIFIER(new IdentifierMatcher()),\n \n-\tEMPTY_FIELD(new EmptyFieldMatcher());\n+\tEMPTY_FIELD(new EmptyFieldMatcher()),\n+\tEXTENSION_ANY_ORDER(new ExtensionMatcher());\n \n \tprivate final IMdmFieldMatcher myMdmFieldMatcher;\n "
  },
  {
    "sha": "755bd1688145d50a313456871a37e543ffa223fc",
    "filename": "hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/config/MdmRuleValidatorTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/config/MdmRuleValidatorTest.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/config/MdmRuleValidatorTest.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/config/MdmRuleValidatorTest.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -151,6 +151,16 @@ public void testInvalidPath() throws IOException {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testMatcherExtensionJson() throws IOException {\n+\t\ttry {\n+\t\t\tsetMdmRuleJson(\"rules-extension-search.json\");\n+\t\t}\n+\t\tcatch (ConfigurationException e){\n+\t\t\tfail(\"Unable to validate extension matcher\");\n+\t\t}\n+\t}\n+\n \tprivate void setMdmRuleJson(String theTheS) throws IOException {\n \t\tMdmRuleValidator mdmRuleValidator = new MdmRuleValidator(ourFhirContext, mySearchParamRetriever);\n \t\tMdmSettings mdmSettings = new MdmSettings(mdmRuleValidator);"
  },
  {
    "sha": "ee586d9b734a0590de6fa606726039b6632d355e",
    "filename": "hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcherR4Test.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcherR4Test.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcherR4Test.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-server-mdm/src/test/java/ca/uhn/fhir/mdm/rules/matcher/ExtensionMatcherR4Test.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -0,0 +1,95 @@\n+package ca.uhn.fhir.mdm.rules.matcher;\n+\n+\n+import org.hl7.fhir.r4.model.IntegerType;\n+import org.hl7.fhir.r4.model.Organization;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class ExtensionMatcherR4Test extends BaseMatcherR4Test {\n+\t@Test\n+\tpublic void testPatientWithMatchingExtension(){\n+\t\tPatient patient1 = new Patient();\n+\t\tPatient patient2 = new Patient();\n+\n+\t\tpatient1.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\t\tpatient2.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\n+\t\tassertTrue(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, null));\n+\t}\n+\n+\t@Test\n+\tpublic void testPatientWithoutMatchingExtension(){\n+\t\tPatient patient1 = new Patient();\n+\t\tPatient patient2 = new Patient();\n+\n+\t\tpatient1.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\t\tpatient2.addExtension(\"asd\",new StringType(\"Patient2\"));\n+\n+\t\tassertFalse(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, null));\n+\t}\n+\n+\t@Test\n+\tpublic void testPatientSameValueDifferentUrl(){\n+\t\tPatient patient1 = new Patient();\n+\t\tPatient patient2 = new Patient();\n+\n+\t\tpatient1.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\t\tpatient2.addExtension(\"asd1\",new StringType(\"Patient1\"));\n+\n+\t\tassertFalse(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, null));\n+\t}\n+\n+\t@Test\n+\tpublic void testPatientWithMultipleExtensionOneMatching(){\n+\t\tPatient patient1 = new Patient();\n+\t\tPatient patient2 = new Patient();\n+\n+\t\tpatient1.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\t\tpatient1.addExtension(\"url1\", new StringType(\"asd\"));\n+\t\tpatient2.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\t\tpatient2.addExtension(\"asdasd\", new StringType(\"some value\"));\n+\n+\t\tassertTrue(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, null));\n+\t}\n+\n+\t@Test\n+\tpublic void testSpecificIdentifierSystem(){\n+\t\tPatient patient1 = new Patient();\n+\t\tPatient patient2 = new Patient();\n+\n+\t\tpatient1.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\t\tpatient1.addExtension(\"url1\", new StringType(\"asd\"));\n+\t\tpatient2.addExtension(\"asd\",new StringType(\"Patient1\"));\n+\t\tpatient2.addExtension(\"asdasd\", new StringType(\"some value\"));\n+\t\tpatient2.addExtension(\"url1\", new StringType(\"some value 123\"));\n+\n+\t\tassertTrue(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, null));\n+\t\tassertTrue(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, \"asd\"));\n+\t\tassertFalse(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, \"url1\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testPatientWithoutIntExtension(){\n+\t\tPatient patient1 = new Patient();\n+\t\tPatient patient2 = new Patient();\n+\n+\t\tpatient1.addExtension(\"asd\", new IntegerType(123));\n+\t\tpatient2.addExtension(\"asd\", new IntegerType(123));\n+\n+\t\tassertTrue(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, null));\n+\t}\n+\n+\t@Test\n+\tpublic void testPatientWithNoExtension(){\n+\t\tPatient patient1 = new Patient();\n+\t\tPatient patient2 = new Patient();\n+\n+\t\tassertFalse(MdmMatcherEnum.EXTENSION_ANY_ORDER.match(ourFhirContext, patient1, patient2, false, null));\n+\t}\n+\n+}"
  },
  {
    "sha": "60a1e3e44e4707e08bf378b76717cc2d0b872efd",
    "filename": "hapi-fhir-server-mdm/src/test/resources/rules-extension-search.json",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/test/resources/rules-extension-search.json",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-server-mdm/src/test/resources/rules-extension-search.json",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-server-mdm/src/test/resources/rules-extension-search.json?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -0,0 +1,17 @@\n+{\n+\t\"version\": \"1\",\n+\t\"mdmTypes\": [\"Organization\"],\n+\t\"candidateSearchParams\" : [],\n+\t\"candidateFilterSearchParams\" : [],\n+\t\"matchFields\" : [ {\n+\t\t\"name\" : \"Organization-extension\",\n+\t\t\"resourceType\" : \"Organization\",\n+\t\t\"fhirPath\" : \"identifier[1]\",\n+\t\t\"matcher\" : {\n+\t\t\t\"algorithm\": \"EXTENSION_ANY_ORDER\"\n+\t\t}\n+\t}],\n+\t\"matchResultMap\" : {\n+\t\t\"Organization-extension\" : \"MATCH\"\n+\t}\n+}"
  },
  {
    "sha": "df0a9de8b0657f90ba2f63ea7a03f438e9d59eeb",
    "filename": "hapi-fhir-structures-r4/src/test/java/ca/uhn/fhir/util/TerserUtilTest.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/hapifhir/hapi-fhir/blob/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-structures-r4/src/test/java/ca/uhn/fhir/util/TerserUtilTest.java",
    "raw_url": "https://github.com/hapifhir/hapi-fhir/raw/08ab582c3662e4a5fc759062a234d8c37cea4d04/hapi-fhir-structures-r4/src/test/java/ca/uhn/fhir/util/TerserUtilTest.java",
    "contents_url": "https://api.github.com/repos/hapifhir/hapi-fhir/contents/hapi-fhir-structures-r4/src/test/java/ca/uhn/fhir/util/TerserUtilTest.java?ref=08ab582c3662e4a5fc759062a234d8c37cea4d04",
    "patch": "@@ -6,6 +6,7 @@\n import org.hl7.fhir.r4.model.DateType;\n import org.hl7.fhir.r4.model.Enumerations;\n import org.hl7.fhir.r4.model.Extension;\n+import org.hl7.fhir.r4.model.HumanName;\n import org.hl7.fhir.r4.model.Identifier;\n import org.hl7.fhir.r4.model.Patient;\n import org.junit.jupiter.api.Test;\n@@ -237,4 +238,27 @@ void testCloneWithDuplicateNonPrimitives() {\n \t\tassertThat(p2.getName(), hasSize(1));\n \t\tassertThat(p2.getName().get(0).getGiven(), hasSize(2));\n \t}\n+\n+\n+\t@Test\n+\tvoid testEqualsFunction(){\n+\t\tPatient p1 = new Patient();\n+\t\tPatient p2 = new Patient();\n+\n+\t\tp1.addName(new HumanName().setFamily(\"family\").addGiven(\"asd\"));\n+\t\tp2.addName(new HumanName().setFamily(\"family\").addGiven(\"asd\"));\n+\n+\t\tassertTrue(TerserUtil.equals(p1, p2));\n+\t}\n+\n+\t@Test\n+\tvoid testEqualsFunctionNotEqual(){\n+\t\tPatient p1 = new Patient();\n+\t\tPatient p2 = new Patient();\n+\n+\t\tp1.addName(new HumanName().setFamily(\"family\").addGiven(\"asd\"));\n+\t\tp2.addName(new HumanName().setFamily(\"family\").addGiven(\"asd1\"));\n+\n+\t\tassertFalse(TerserUtil.equals(p1, p2));\n+\t}\n }"
  }
]
