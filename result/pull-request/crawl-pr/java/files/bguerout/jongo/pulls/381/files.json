[
  {
    "sha": "5dbe4e6efecacf4ac10393c1e4e48e84af85500f",
    "filename": "src/main/java/org/jongo/Jongo.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/Jongo.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/Jongo.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/main/java/org/jongo/Jongo.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -68,4 +68,12 @@ public Command runCommand(String query) {\n     public Command runCommand(String query, Object... parameters) {\n         return new Command(database, mapper.getUnmarshaller(), mapper.getQueryFactory(), query, parameters);\n     }\n+\n+    public static JongoSync useSync(MongoDatabase database) {\n+        return new JongoSync(database);\n+    }\n+\n+    public static JongoSync useSync(MongoDatabase database, Mapper mapper) {\n+        return new JongoSync(database, mapper);\n+    }\n }"
  },
  {
    "sha": "dfd8c625ab2f10aca045d8d54e183e639284c9d0",
    "filename": "src/main/java/org/jongo/JongoCodec.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/JongoCodec.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/JongoCodec.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/main/java/org/jongo/JongoCodec.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo;\n+\n+\n+import org.bson.*;\n+import org.bson.codecs.Codec;\n+import org.bson.codecs.CollectibleCodec;\n+import org.bson.codecs.DecoderContext;\n+import org.bson.codecs.EncoderContext;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.types.ObjectId;\n+import org.jongo.bson.Bson;\n+import org.jongo.marshall.Marshaller;\n+import org.jongo.marshall.Unmarshaller;\n+\n+public class JongoCodec<T> implements CollectibleCodec<T> {\n+\n+    private final Codec<RawBsonDocument> codec;\n+    private final Class<T> clazz;\n+    private final ObjectIdUpdater objectIdUpdater;\n+    private final Unmarshaller unmarshaller;\n+    private final Marshaller marshaller;\n+\n+    public JongoCodec(Mapper mapper, Class<T> clazz, CodecRegistry codecRegistry) {\n+        this.codec = codecRegistry.get(RawBsonDocument.class);\n+        this.clazz = clazz;\n+        objectIdUpdater = mapper.getObjectIdUpdater();\n+        unmarshaller = mapper.getUnmarshaller();\n+        marshaller = mapper.getMarshaller();\n+    }\n+\n+    public T decode(BsonReader reader, DecoderContext decoderContext) {\n+        RawBsonDocument raw = codec.decode(reader, decoderContext);\n+        org.jongo.bson.BsonDocument bsonDocument = Bson.createDocument(raw.getByteBuffer().array());\n+        return unmarshaller.unmarshall(bsonDocument, clazz);\n+    }\n+\n+    public void encode(BsonWriter writer, Object pojo, EncoderContext encoderContext) {\n+        org.jongo.bson.BsonDocument document = marshaller.marshall(pojo);\n+        codec.encode(writer, new RawBsonDocument(document.toByteArray()), encoderContext);\n+    }\n+\n+    public Class<T> getEncoderClass() {\n+        return this.clazz;\n+    }\n+\n+    public T generateIdIfAbsentFromDocument(T document) {\n+        if (objectIdUpdater.mustGenerateObjectId(document)) {\n+            ObjectId newOid = ObjectId.get();\n+            objectIdUpdater.setObjectId(document, newOid);\n+        }\n+        return document;\n+    }\n+\n+    public boolean documentHasId(T document) {\n+        return objectIdUpdater.mustGenerateObjectId(document);\n+    }\n+\n+    public BsonValue getDocumentId(T document) {\n+\n+        Object id = objectIdUpdater.getId(document);\n+\n+        if (id instanceof BsonValue) {\n+            return (BsonValue) id;\n+        }\n+        if (id instanceof ObjectId) {\n+            return new BsonObjectId((ObjectId) id);\n+        }\n+\n+        throw new UnsupportedOperationException(\"Unable to get document id\");\n+    }\n+\n+}"
  },
  {
    "sha": "c2ac2198e7c420a6d3a01c75d8893ee0261deecb",
    "filename": "src/main/java/org/jongo/JongoCodecProvider.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/JongoCodecProvider.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/JongoCodecProvider.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/main/java/org/jongo/JongoCodecProvider.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo;\n+\n+\n+import org.bson.codecs.Codec;\n+import org.bson.codecs.configuration.CodecProvider;\n+import org.bson.codecs.configuration.CodecRegistry;\n+\n+import static org.jongo.marshall.jackson.JacksonMapper.Builder.jacksonMapper;\n+\n+public class JongoCodecProvider implements CodecProvider {\n+\n+    private final Mapper mapper;\n+\n+    public JongoCodecProvider() {\n+        this(jacksonMapper().build());\n+    }\n+\n+    public JongoCodecProvider(Mapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    public <T> Codec<T> get(final Class<T> type, final CodecRegistry registry) {\n+        return new JongoCodec<T>(mapper, type, registry);\n+    }\n+}"
  },
  {
    "sha": "06f3b766dfee099b6aa99061cf8aef2b8cc82b7d",
    "filename": "src/main/java/org/jongo/JongoSync.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/JongoSync.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/main/java/org/jongo/JongoSync.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/main/java/org/jongo/JongoSync.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo;\n+\n+\n+import com.mongodb.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.BsonDocument;\n+import org.bson.Document;\n+import org.bson.codecs.BsonValueCodecProvider;\n+import org.bson.codecs.configuration.CodecRegistries;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+import org.jongo.query.Query;\n+\n+import static org.jongo.marshall.jackson.JacksonMapper.Builder.jacksonMapper;\n+\n+public class JongoSync {\n+\n+    private final Mapper mapper;\n+    private final CodecRegistry codecRegistry;\n+    private final MongoDatabase database;\n+\n+    public JongoSync(MongoDatabase database) {\n+        this(database, jacksonMapper().build());\n+    }\n+\n+    public JongoSync(MongoDatabase database, Mapper mapper) {\n+        this.mapper = mapper;\n+        this.database = database;\n+        this.codecRegistry = createCodecRegistry(mapper);\n+    }\n+\n+    public MongoCollection<Document> getCollection(String collectionName) {\n+        return this.database.getCollection(collectionName);\n+    }\n+\n+    public <T> MongoCollection<T> getCollection(String collectionName, Class<T> documentClass) {\n+        MongoCollection<T> collection = this.database.getCollection(collectionName, documentClass);\n+        return wrapCollection(collection);\n+    }\n+\n+    public BsonDocument query(String query, Object... parameters) {\n+        Query q = mapper.getQueryFactory().createQuery(query, parameters);\n+        return q.toBsonDocument();\n+    }\n+\n+    public Bson id(Object id) {\n+        return query(\"{_id:#}\", id);\n+    }\n+\n+    private <T> com.mongodb.client.MongoCollection<T> wrapCollection(com.mongodb.client.MongoCollection<T> collection) {\n+        return collection.withCodecRegistry(codecRegistry);\n+    }\n+\n+    private CodecRegistry createCodecRegistry(Mapper mapper) {\n+\n+        CodecRegistry defaultRegistry = MongoClient.getDefaultCodecRegistry();\n+        CodecRegistry jongoRegistry = CodecRegistries.fromProviders(new BsonValueCodecProvider(), new JongoCodecProvider(mapper));\n+\n+        return CodecRegistries.fromRegistries(defaultRegistry, jongoRegistry);\n+    }\n+}"
  },
  {
    "sha": "d08c6193a092a452707eec43cca45b7a4ec107ef",
    "filename": "src/test/java/org/jongo/bench/BenchUtil.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/bench/BenchUtil.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/bench/BenchUtil.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/bench/BenchUtil.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -48,20 +48,20 @@ public static DBObject asDBObject(Friend friend) {\n         return dbo;\n     }\n \n-    public static DBCollection getCollectionFromDriver() throws UnknownHostException {\n-        MongoClient nativeMongo = new MongoClient();\n-        return nativeMongo.getDB(\"jongo\").getCollection(\"benchmark\");\n+    public static DBCollection getDBCollection() throws UnknownHostException {\n+        MongoClient client = new MongoClient();\n+        return client.getDB(\"jongo\").getCollection(\"benchmark\");\n     }\n \n-    public static MongoCollection getCollectionFromJongo(Mapper mapper) throws UnknownHostException {\n-        MongoClient mongo = new MongoClient();\n-        DB db = mongo.getDB(\"jongo\");\n+    public static MongoCollection getMongoCollection(Mapper mapper) throws UnknownHostException {\n+        MongoClient client = new MongoClient();\n+        DB db = client.getDB(\"jongo\");\n         Jongo jongo = new Jongo(db, mapper);\n         return jongo.getCollection(\"benchmark\");\n     }\n \n     public static void injectFriendsIntoDB(int nbDocuments) throws UnknownHostException {\n-        MongoCollection collection = getCollectionFromJongo(jacksonMapper().build());\n+        MongoCollection collection = getMongoCollection(jacksonMapper().build());\n         collection.drop();\n         for (int i = 0; i < nbDocuments; i++) {\n             collection.withWriteConcern(WriteConcern.MAJORITY).save(createFriend(i));"
  },
  {
    "sha": "5f49e1ef81ae3839916cf4c1041409355c9ce87e",
    "filename": "src/test/java/org/jongo/bench/FindBench.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/bench/FindBench.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/bench/FindBench.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/bench/FindBench.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -26,8 +26,8 @@\n import org.jongo.model.Coordinate;\n import org.jongo.model.Friend;\n \n-import static org.jongo.bench.BenchUtil.getCollectionFromDriver;\n-import static org.jongo.bench.BenchUtil.getCollectionFromJongo;\n+import static org.jongo.bench.BenchUtil.getDBCollection;\n+import static org.jongo.bench.BenchUtil.getMongoCollection;\n import static org.jongo.marshall.jackson.JacksonMapper.Builder.jacksonMapper;\n \n public class FindBench extends SimpleBenchmark {\n@@ -39,8 +39,8 @@\n     private DBCollection dbCollection;\n \n     protected void setUp() throws Exception {\n-        bsonCollection = getCollectionFromJongo(jacksonMapper().build());\n-        dbCollection = getCollectionFromDriver();\n+        bsonCollection = getMongoCollection(jacksonMapper().build());\n+        dbCollection = getDBCollection();\n \n         if (dbCollection.count() < NB_DOCUMENTS) {\n             BenchUtil.injectFriendsIntoDB(NB_DOCUMENTS);"
  },
  {
    "sha": "6de95f6fbeaf938c86afdad8eada080e64303715",
    "filename": "src/test/java/org/jongo/bench/SaveBench.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/bench/SaveBench.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/bench/SaveBench.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/bench/SaveBench.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -35,9 +35,8 @@\n     private MongoCollection bsonCollection;\n \n     protected void setUp() throws Exception {\n-\n-        bsonCollection = getCollectionFromJongo(jacksonMapper().build()).withWriteConcern(WriteConcern.MAJORITY);\n-        dbCollection = getCollectionFromDriver();\n+        bsonCollection = getMongoCollection(jacksonMapper().build()).withWriteConcern(WriteConcern.MAJORITY);\n+        dbCollection = getDBCollection();\n \n         bsonCollection.drop();\n     }"
  },
  {
    "sha": "ab04f777face416337483c8ccd39859507f0a008",
    "filename": "src/test/java/org/jongo/sync/AggregateSyncTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/AggregateSyncTest.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/AggregateSyncTest.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/sync/AggregateSyncTest.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo.sync;\n+\n+import com.mongodb.client.MongoCollection;\n+import org.bson.conversions.Bson;\n+import org.jongo.model.Article;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AggregateSyncTest extends SyncTestBase {\n+\n+    private MongoCollection<Article> collection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        collection = jongo.getCollection(\"articles\", Article.class);\n+        collection.insertOne(new Article(\"Zombie Panic\", \"Kirsty Mckay\", \"horror\", \"virus\"));\n+        collection.insertOne(new Article(\"Apocalypse Zombie\", \"Maberry Jonathan\", \"horror\", \"dead\"));\n+        collection.insertOne(new Article(\"World War Z\", \"Max Brooks\", \"horror\", \"virus\", \"pandemic\"));\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        this.collection.drop();\n+    }\n+\n+    @Test\n+    public void canAggregate() throws Exception {\n+\n+        List<Bson> pipeline = asList(q(\"{$match:{tags:'virus'}}\"));\n+        Iterable<Article> articles = collection.aggregate(pipeline);\n+\n+        assertThat(articles.iterator().hasNext()).isTrue();\n+        int size = 0;\n+        for (Article article : articles) {\n+            assertThat(article.getTags()).contains(\"virus\");\n+            size++;\n+        }\n+        assertThat(size).isEqualTo(2);\n+    }\n+}"
  },
  {
    "sha": "e6fb4b5fa209e9f44cdd9129805259aafa868369",
    "filename": "src/test/java/org/jongo/sync/BsonSyncTest.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/BsonSyncTest.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/BsonSyncTest.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/sync/BsonSyncTest.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo.sync;\n+\n+import com.mongodb.DBObject;\n+import com.mongodb.Function;\n+import com.mongodb.MongoClient;\n+import com.mongodb.WriteConcern;\n+import com.mongodb.client.FindIterable;\n+import com.mongodb.client.MongoCollection;\n+import org.bson.BsonDocument;\n+import org.bson.BsonString;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class BsonSyncTest extends SyncTestBase {\n+\n+    private MongoCollection<BsonDocument> collection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        collection = jongo.getCollection(\"friends\", BsonDocument.class).withWriteConcern(WriteConcern.ACKNOWLEDGED);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        collection.drop();\n+    }\n+\n+    @Test\n+    public void canInsert() throws Exception {\n+\n+        collection.insertOne(q(\"{name : 'Abby'}\"));\n+\n+        assertThat(collection.countDocuments(q(\"{name : 'Abby'}\"))).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void canInsertWithParameters() throws Exception {\n+\n+        collection.insertOne(q(\"{name : #}\", \"Abby\"));\n+\n+        assertThat(collection.countDocuments(q(\"{name : 'Abby'}\"))).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void canFindWithProjectionParams() throws Exception {\n+\n+        collection.insertOne(q(\"{name : 'Abby'}\"));\n+\n+        FindIterable<BsonDocument> results = collection.find(q(\"{name:'Abby'}\")).projection(q(\"{name:#}\", 1));\n+\n+        assertThat(results).isNotEmpty();\n+        results.map(new Function<BsonDocument, String>() {\n+\n+            public String apply(BsonDocument bson) {\n+                BsonDocument document = bson.toBsonDocument(DBObject.class, MongoClient.getDefaultCodecRegistry());\n+                assertThat(document.containsKey(\"address\")).isFalse();\n+                assertThat(document.containsKey(\"name\")).isTrue();\n+                return null;\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void canQueryWithBsonDocument() throws Exception {\n+\n+        BsonDocument document = new BsonDocument(\"name\", new BsonString(\"Abby\")).append(\"address\", new BsonString(\"123 Wall Street\"));\n+\n+        collection.insertOne(document);\n+\n+        Bson result = collection.find(new Document(\"address\", \"123 Wall Street\")).first();\n+        BsonDocument bsonDocument = result.toBsonDocument(DBObject.class, MongoClient.getDefaultCodecRegistry());\n+        assertThat(bsonDocument.toJson()).contains(\"123 Wall Street\");\n+    }\n+\n+\n+}"
  },
  {
    "sha": "4eef0d09cd45b11c9a5e4d014c2a24fe02b1954e",
    "filename": "src/test/java/org/jongo/sync/DocumentSyncTest.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/DocumentSyncTest.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/DocumentSyncTest.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/sync/DocumentSyncTest.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo.sync;\n+\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.model.Filters;\n+import org.bson.Document;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DocumentSyncTest extends SyncTestBase {\n+\n+    private MongoCollection<Document> collection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        collection = jongo.getCollection(\"friends\", Document.class);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        collection.drop();\n+    }\n+\n+    @Test\n+    public void canUseDocumentBuilderFromDriver() throws Exception {\n+\n+        Document doc = new Document().append(\"name\", \"Abby\");\n+\n+        collection.insertOne(doc);\n+\n+        assertThat(collection.countDocuments(doc)).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void canUseFilterBuilderFromDriver() throws Exception {\n+\n+        Document doc = new Document().append(\"name\", \"Abby\");\n+\n+        collection.insertOne(doc);\n+\n+        Document result = collection.find(Filters.regex(\"name\", Pattern.compile(\"^A\"))).first();\n+        assertThat(result.get(\"name\")).isEqualTo(\"Abby\");\n+    }\n+\n+\n+}"
  },
  {
    "sha": "aebf11acb2b48dbfc0f1d8aac8471a534db2b3a8",
    "filename": "src/test/java/org/jongo/sync/InsertSyncTest.java",
    "status": "added",
    "additions": 170,
    "deletions": 0,
    "changes": 170,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/InsertSyncTest.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/InsertSyncTest.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/sync/InsertSyncTest.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo.sync;\n+\n+import com.mongodb.MongoWriteException;\n+import com.mongodb.client.MongoCollection;\n+import junit.framework.Assert;\n+import org.bson.types.ObjectId;\n+import org.jongo.model.Coordinate;\n+import org.jongo.model.ExposableFriend;\n+import org.jongo.model.ExternalFriend;\n+import org.jongo.model.Friend;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+import static com.google.common.collect.Lists.newArrayList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class InsertSyncTest extends SyncTestBase {\n+\n+    private MongoCollection<Friend> collection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        collection = jongo.getCollection(\"friends\", Friend.class);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        collection.drop();\n+    }\n+\n+    @Test\n+    public void canInsert() throws Exception {\n+\n+        Friend friend = new Friend(\"John\", \"22 Wall Street Avenue\");\n+\n+        collection.insertOne(friend);\n+        long afterSave = new Date().getTime();\n+\n+        Friend john = collection.find(q(\"{name:'John'}\")).first();\n+        assertThat(john).isNotNull();\n+        assertThat(john.getId()).isNotNull();\n+        assertThat(john.getId().getDate().getTime()).isLessThan(afterSave);\n+    }\n+\n+    @Test\n+    public void canInsertWithObjectId() throws Exception {\n+\n+        ObjectId oid = ObjectId.get();\n+        Friend john = new Friend(oid, \"John\");\n+\n+        collection.insertOne(john);\n+        long afterSave = new Date().getTime();\n+\n+        Friend result = collection.find(id(oid)).first();\n+        assertThat(result.getId()).isEqualTo(oid);\n+        assertThat(john.getId().getDate().getTime()).isLessThan(afterSave);  //insert\n+    }\n+\n+    @Test\n+    public void canInsertWithACustomTypeId() throws Exception {\n+\n+        MongoCollection<ExternalFriend> friends = collection.withDocumentClass(ExternalFriend.class);\n+        ExternalFriend john = new ExternalFriend(\"999\", \"Robert\");\n+\n+        friends.insertOne(john);\n+\n+        ExternalFriend result = friends.find().first();\n+        assertThat(result.getId()).isEqualTo(\"999\");\n+    }\n+\n+    @Test\n+    public void canInsertWithObjectIdAsString() throws Exception {\n+\n+        MongoCollection<ExposableFriend> friends = collection.withDocumentClass(ExposableFriend.class);\n+        String id = ObjectId.get().toString();\n+        ExposableFriend john = new ExposableFriend(id, \"Robert\");\n+\n+        friends.insertOne(john);\n+\n+        ExposableFriend result = friends.find().first();\n+        assertThat(result).isNotNull();\n+        assertThat(result.getId()).isEqualTo(id);\n+    }\n+\n+    @Test\n+    public void canInsertAPojoWithAnEmptyObjectIdAsString() throws Exception {\n+\n+        MongoCollection<ExposableFriend> friends = collection.withDocumentClass(ExposableFriend.class);\n+        ExposableFriend john = new ExposableFriend(\"Robert\");\n+\n+        friends.insertOne(john);\n+\n+        ExposableFriend result = friends.find().first();\n+        assertThat(result).isNotNull();\n+        assertThat(result.getId()).isNotNull();\n+    }\n+\n+    @Test\n+    public void canInsertAnObjectWithoutIdAnnotation() throws Exception {\n+\n+        MongoCollection<Coordinate> coordinates = collection.withDocumentClass(Coordinate.class);\n+        Coordinate noId = new Coordinate(123, 1);\n+\n+        coordinates.insertOne(noId);\n+\n+        Coordinate result = coordinates.find().first();\n+        assertThat(result).isNotNull();\n+        assertThat(result.lat).isEqualTo(123);\n+    }\n+\n+    @Test\n+    public void canOnlyInsertOnceAPojoWithObjectId() throws Exception {\n+\n+        ObjectId id = ObjectId.get();\n+\n+        collection.insertOne(new Friend(id, \"John\"));\n+\n+        try {\n+            collection.insertOne(new Friend(id, \"John\"));\n+            Assert.fail();\n+        } catch (MongoWriteException e) {\n+            assertThat(e).hasMessageContaining(\"E11000\");\n+        }\n+    }\n+\n+    @Test\n+    public void canOnlyInsertOnceAPojoWithACustomId() throws Exception {\n+\n+        MongoCollection<ExternalFriend> friends = jongo.getCollection(\"friends\", ExternalFriend.class);\n+\n+        friends.insertOne(new ExternalFriend(\"122\", \"value\"));\n+\n+        try {\n+            friends.insertOne(new ExternalFriend(\"122\", \"other value\"));\n+            Assert.fail();\n+        } catch (MongoWriteException e) {\n+            assertThat(e).hasMessageContaining(\"E11000\");\n+        }\n+    }\n+\n+    @Test\n+    public void canInsertAListOfDocuments() throws Exception {\n+\n+        collection.insertMany(newArrayList(new Friend(\"John\"), new Friend(\"Robert\")));\n+\n+        assertThat(collection.countDocuments()).isEqualTo(2);\n+        Iterable<Friend> friends = collection.find();\n+        assertThat(friends).extracting(\"name\").containsExactly(\"John\", \"Robert\");\n+    }\n+\n+}"
  },
  {
    "sha": "46e327aa8f6d2f643ba072d561803061bac9b7ac",
    "filename": "src/test/java/org/jongo/sync/ParametersSyncTest.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/ParametersSyncTest.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/ParametersSyncTest.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/sync/ParametersSyncTest.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo.sync;\n+\n+import com.mongodb.client.MongoCollection;\n+import org.jongo.model.Friend;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ParametersSyncTest extends SyncTestBase {\n+\n+    private MongoCollection<Friend> collection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        collection = jongo.getCollection(\"friends\", Friend.class);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        collection.drop();\n+    }\n+\n+    @Test\n+    //https://groups.google.com/forum/?fromgroups#!topic/jongo-user/p9CEKnkKX9Q\n+    public void canUpdateIntoAnArray() throws Exception {\n+\n+        collection.insertMany(asList(new Friend(\"Peter\"), new Friend(\"Robert\")));\n+\n+        collection.updateMany(q(\"{ 'name' : 'Peter' }\"), q(\"{ $set : # }\", new Friend(\"John\")));\n+\n+        Friend friend = collection.find(q(\"{ 'name' : 'John' }\")).first();\n+\n+        assertThat(friend).isNotNull();\n+        assertThat(friend.getName()).isEqualTo(\"John\");\n+    }\n+\n+\n+}"
  },
  {
    "sha": "bcdafa86476f006211ad01f197df98f3bb09a32b",
    "filename": "src/test/java/org/jongo/sync/SyncTestBase.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/SyncTestBase.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/SyncTestBase.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/sync/SyncTestBase.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo.sync;\n+\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.BsonDocument;\n+import org.bson.conversions.Bson;\n+import org.jongo.Jongo;\n+import org.jongo.JongoSync;\n+import org.jongo.Mapper;\n+import org.jongo.util.MongoResource;\n+import org.junit.BeforeClass;\n+\n+import static org.jongo.marshall.jackson.JacksonMapper.Builder.jacksonMapper;\n+\n+public abstract class SyncTestBase {\n+\n+    private static MongoResource MONGO_RESOURCE;\n+\n+    protected JongoSync jongo;\n+\n+    public SyncTestBase() {\n+        this(jacksonMapper().build());\n+    }\n+\n+    protected SyncTestBase(Mapper mapper) {\n+        MongoDatabase database = MONGO_RESOURCE.getDatabase(\"test_jongo\");\n+        this.jongo = Jongo.useSync(database, mapper);\n+    }\n+\n+    @BeforeClass\n+    public static void startMongo() throws Exception {\n+        MONGO_RESOURCE = new MongoResource();\n+    }\n+\n+    protected BsonDocument q(String query, Object... parameters) {\n+        return jongo.query(query, parameters);\n+    }\n+\n+    protected Bson id(Object id) {\n+        return jongo.id(id);\n+    }\n+}"
  },
  {
    "sha": "2d2cbaa852bb327c92fc530cc3f5960d94895051",
    "filename": "src/test/java/org/jongo/sync/UpdateSyncTest.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/bguerout/jongo/blob/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/UpdateSyncTest.java",
    "raw_url": "https://github.com/bguerout/jongo/raw/55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0/src/test/java/org/jongo/sync/UpdateSyncTest.java",
    "contents_url": "https://api.github.com/repos/bguerout/jongo/contents/src/test/java/org/jongo/sync/UpdateSyncTest.java?ref=55d90b9dea07081ce39dfbdcc8af2e068fb5b9e0",
    "patch": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright (C) 2011 Benoit GUEROUT <bguerout at gmail dot com> and Yves AMSELLEM <amsellem dot yves at gmail dot com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jongo.sync;\n+\n+import com.mongodb.WriteConcern;\n+import com.mongodb.client.MongoCollection;\n+import junit.framework.Assert;\n+import org.bson.types.ObjectId;\n+import org.jongo.marshall.MarshallingException;\n+import org.jongo.model.ExposableFriend;\n+import org.jongo.model.ExternalFriend;\n+import org.jongo.model.Friend;\n+import org.jongo.util.ErrorObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class UpdateSyncTest extends SyncTestBase {\n+\n+    private MongoCollection<Friend> collection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        collection = jongo.getCollection(\"friends\", Friend.class);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        collection.drop();\n+    }\n+\n+    @Test\n+    public void canUpdateAnEntity() throws Exception {\n+\n+        Friend john = new Friend(\"John\", \"21 Jump Street\");\n+        collection.insertOne(john);\n+\n+        john.setAddress(\"new address\");\n+        collection.replaceOne(id(john.getId()), john);\n+\n+        ObjectId johnId = john.getId();\n+        Friend johnWithNewAddress = collection.find(id(johnId)).first();\n+        assertThat(johnWithNewAddress.getId()).isEqualTo(johnId);\n+        assertThat(johnWithNewAddress.getAddress()).isEqualTo(\"new address\");\n+    }\n+\n+    @Test\n+    public void canUpdateWithACustomTypeId() throws Exception {\n+\n+        MongoCollection<ExternalFriend> friends = collection.withDocumentClass(ExternalFriend.class);\n+        ExternalFriend friend = new ExternalFriend(\"999\", \"Robert\");\n+        friends.insertOne(friend);\n+\n+        friend.setName(\"Robert\");\n+        friends.replaceOne(id(friend.getId()), friend);\n+\n+        ExternalFriend result = friends.find().first();\n+        assertThat(result.getId()).isEqualTo(\"999\");\n+    }\n+\n+    @Test\n+    public void canUpdateWithObjectIdAsString() throws Exception {\n+\n+        MongoCollection<ExposableFriend> friends = collection.withDocumentClass(ExposableFriend.class);\n+        String id = ObjectId.get().toString();\n+        ExposableFriend robert = new ExposableFriend(id, \"Robert\");\n+        friends.insertOne(robert);\n+\n+        robert.setName(\"Hue\"); // <-- \"famous\" french Robert\n+        friends.replaceOne(q(\"{_id:{$oid:#}}\", id), robert);\n+\n+        ExposableFriend robertHue = friends.find(q(\"{_id:{$oid:#}}\", id)).first();\n+        assertThat(robertHue.getId()).isEqualTo(id);\n+        assertThat(robertHue.getName()).isEqualTo(\"Hue\");\n+    }\n+\n+    @Test\n+    public void canUpdateAPojoWithACustomId() throws Exception {\n+\n+        MongoCollection<ExternalFriend> friends = collection.withDocumentClass(ExternalFriend.class);\n+        ExternalFriend externalFriend = new ExternalFriend(\"122\", \"John\");\n+        MongoCollection<ExternalFriend> safeCollection = friends.withWriteConcern(WriteConcern.ACKNOWLEDGED);\n+\n+        safeCollection.insertOne(externalFriend);\n+        externalFriend.setName(\"Robert\");\n+        safeCollection.replaceOne(id(externalFriend.getId()), externalFriend);\n+\n+        ExternalFriend result = friends.find(q(\"{name:'Robert'}\")).first();\n+        assertThat(result.getId()).isEqualTo(\"122\");\n+    }\n+\n+    @Test\n+    public void canUpdateAPojoWithAnValidObjectIdAsString() {\n+\n+        MongoCollection<ExposableFriend> friends = collection.withDocumentClass(ExposableFriend.class);\n+        ExposableFriend friend = new ExposableFriend(ObjectId.get().toString(), \"Robert\");\n+\n+        friends.insertOne(friend);\n+        String id = friend.getId();\n+        assertThat(friend.getId()).isNotNull();\n+\n+        friend.setName(\"John\");\n+        friends.replaceOne(id(friend.getId()), friend);\n+\n+        assertThat(friend.getId()).isEqualTo(id);\n+        assertThat(friend.getName()).isEqualTo(\"John\");\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMarshallerFail() throws Exception {\n+\n+        try {\n+            collection.withDocumentClass(ErrorObject.class).insertOne(new ErrorObject());\n+            Assert.fail();\n+        } catch (MarshallingException e) {\n+        }\n+    }\n+\n+}"
  }
]
