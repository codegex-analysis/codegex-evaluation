[
  {
    "sha": "31ff2c8a579a36276d72012f43b5fa0fc8c3a1d4",
    "filename": ".github/workflows/maven.yml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/blob/e8d994e4359836f448c3fcfa378f2366ede0079a/.github/workflows/maven.yml",
    "raw_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/raw/e8d994e4359836f448c3fcfa378f2366ede0079a/.github/workflows/maven.yml",
    "contents_url": "https://api.github.com/repos/OU-CS5213/introduction-to-the-test-drive-development-namu2805/contents/.github/workflows/maven.yml?ref=e8d994e4359836f448c3fcfa378f2366ede0079a",
    "patch": "@@ -0,0 +1,24 @@\n+# This workflow will build a Java project with Maven\n+# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n+\n+name: Java CI with Maven\n+\n+on:\n+  push:\n+    branches: [ main ]\n+    \n+jobs:\n+  build:\n+\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+    - name: Set up JDK 1.8\n+      uses: actions/setup-java@v1\n+      with:\n+        java-version: 1.8\n+    - name: Build with Maven\n+      run: mvn -B package --file pom.xml\n+    - name: Part 2 Github Actions\n+      run: AWSTest.java"
  },
  {
    "sha": "eeec3c4f785b2462d279616dae256162442a379e",
    "filename": "AWS.java",
    "status": "modified",
    "additions": 37,
    "deletions": 16,
    "changes": 53,
    "blob_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/blob/e8d994e4359836f448c3fcfa378f2366ede0079a/AWS.java",
    "raw_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/raw/e8d994e4359836f448c3fcfa378f2366ede0079a/AWS.java",
    "contents_url": "https://api.github.com/repos/OU-CS5213/introduction-to-the-test-drive-development-namu2805/contents/AWS.java?ref=e8d994e4359836f448c3fcfa378f2366ede0079a",
    "patch": "@@ -1,29 +1,28 @@\n import java.util.Arrays;\n \n public class AWS {\n-\tprivate static final int FILLER_VALUE = Integer.MIN_VALUE;\n+\tpublic static final int FILLER_VALUE = Integer.MIN_VALUE;\n \tprivate int[] values;\n-\n+\t\n \tpublic int[] getValues() {\n \t\treturn Arrays.copyOf(values, values.length);\n \t}\n-\n+\t\n \tpublic void setValues(int[] values) {\n \t\tthis.values = Arrays.copyOf(values, values.length);\n \t}\n-\n+\t\n \t@Override\n \tpublic String toString() {\n \t\treturn \"AWS [values=\" + Arrays.toString(values) + \"]\";\n \t}\n-\n+\t\n \tpublic AWS(int[] values) {\n \t\tsuper();\n \t\tsetValues(values);\n \t}\n-\n+\t\n \tpublic int remove(int i) {\n-\n \t\tint value = FILLER_VALUE;\n \t\tif (i >= 0 && i < values.length) {\n \t\t\tvalue = values[i];\n@@ -34,26 +33,48 @@ public int remove(int i) {\n \t\t}\n \t\treturn value;\n \t}\n-\n+\t\n \tpublic void fillAndExpand(int position, int nt) {\n \t\tint numberOfTimes = Math.abs(nt);\n \t\tint[] newArray = new int[values.length + numberOfTimes];\n-\t\tfor(int i = 0; i <=position; ++i) {\n+\t\tfor(int i = 0; i <= position; ++i) {\n \t\t\tnewArray[i] = values[i];\n \t\t}\n-\t\tfor(int i = position; i<=numberOfTimes + position; ++i) {\n+\t\tfor(int i = position; i <= numberOfTimes + position; ++i) {\n \t\t\tnewArray[i] = newArray[position];\n \t\t}\n-\t\t// Make examples, so it is easier to visualize your methods\n-\t\t//   p 1 2\n-\t\t// a b c\n-\t\t// a b b b c\n-\t\t\n \t\tint x = numberOfTimes;\n-\t\tfor(int i = position+1; i <values.length; ++i ) {\n+\t\tfor(int i = position+1; i < values.length; ++i) {\n \t\t\tnewArray[i+x] = values[i];\n \t\t}\n \t\tvalues = newArray;\n \t}\n \n+\tpublic int removeBiggerThan(int threshold) {\n+\t\tint numCount = 0;\n+\t\tfor(int i = 0; i < values.length; ++i) {\n+\t\t\tif(values[i] > threshold) {\n+\t\t\t\tvalues[i] = FILLER_VALUE;\n+\t\t\t\tnumCount += 1;\n+\t\t\t}\n+\t\t}\n+\t\treturn numCount;\n+\t}\n+\n+\tpublic void stepMultiplier() {\n+\t\tfor(int i = 0; i < values.length; ++i) {\n+\t\t\tif(values[i] < 100 && values[i] > 20) {\n+\t\t\t\tvalues[i] = values[i]*100;\n+\t\t\t}\n+\t\t\telse if(values[i] < 20 && values[i] > 10) {\n+\t\t\t\tvalues[i] = values[i]*4;\n+\t\t\t}\n+\t\t\telse if(values[i] < 10) {\n+\t\t\t\tvalues[i] = values[i]*2;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\n }"
  },
  {
    "sha": "aa706a6bfcc9b45cc0459655d71892d78e9e56a1",
    "filename": "AWSTest.java",
    "status": "modified",
    "additions": 31,
    "deletions": 7,
    "changes": 38,
    "blob_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/blob/e8d994e4359836f448c3fcfa378f2366ede0079a/AWSTest.java",
    "raw_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/raw/e8d994e4359836f448c3fcfa378f2366ede0079a/AWSTest.java",
    "contents_url": "https://api.github.com/repos/OU-CS5213/introduction-to-the-test-drive-development-namu2805/contents/AWSTest.java?ref=e8d994e4359836f448c3fcfa378f2366ede0079a",
    "patch": "@@ -4,7 +4,7 @@\n import org.junit.jupiter.api.Test;\n \n class AWSTest {\n-\n+\t\n \tprivate static final int FILLER_VALUE = Integer.MIN_VALUE;\n \tprivate int[] original={1, 2, 3};\n \tAWS originalAWS;\n@@ -50,7 +50,7 @@ void testRemove() {\n \t\tint expected = FILLER_VALUE;\n \t\tassertEquals(expected, value);\n \t\t\n-\t\t value = aws.remove(x.length + 10);\n+\t\tvalue = aws.remove(x.length + 10);\n \t\texpected = FILLER_VALUE;\n \t\tassertEquals(expected, value);\n \t\t\n@@ -78,7 +78,7 @@ void testFillAndExpand() {\n \t\tint expectedValue = org[position];\n \t\tint first = org[0];\n  \t\t\n-\t\tint expected = originalAWS.getValues().length + numberOfTimes;\n+\t\tint expected = originalAWS.getValues().length + numberOfTimes; \n \t\toriginalAWS.fillAndExpand(position, numberOfTimes);\n \t\tint[] result = originalAWS.getValues();\n \t\tassertEquals(expected, result.length);\n@@ -98,11 +98,12 @@ void testFillAndExpand() {\n \tvoid testFillAndExpandWithNegative() {\n \t\tint position = 1;\n \t\tint numberOfTimes = -2;\n+\t\tnumberOfTimes = Math.abs(numberOfTimes);\n \t\t\n \t\tint[] org = originalAWS.getValues();\n-\t\tint expectedValue = org[position];\n- \t\tint first = org[0];\n-\t\tint expected = originalAWS.getValues().length + numberOfTimes;\n+\t\tint expectedValue = org[position]; \n+ \t\tint first = org[0]; \n+\t\tint expected = originalAWS.getValues().length + numberOfTimes; \n \t\toriginalAWS.fillAndExpand(position, numberOfTimes);\n \t\tint[] result = originalAWS.getValues();\n \t\tassertEquals(expected, result.length);\n@@ -118,6 +119,29 @@ void testFillAndExpandWithNegative() {\n \n \t\n \t}\n-\n+\t@Test\n+\tvoid removeBiggerThan() {\n+\t\tint[] x = { 1, 2, 3};\n+\t\tAWS aws = new AWS(x);\n+\t\tint numCount = aws.removeBiggerThan(0);\n+\t\tint expected = 3;\n+\t\tassertEquals(expected, numCount);\n+\t}\n+\t@Test\n+\tvoid stepMultiplier() {\n+\t\tint[] x = {7, 5, 18, 85};\n+\t\tAWS aws = new AWS(x);\n+\t\taws.stepMultiplier();\n+\t\tint[] result = aws.getValues();\n+\t\tint first = 14;\n+\t\tint second = 10;\n+\t\tint third = 72;\n+\t\tint fourth = 8500;\n+\t\tassertEquals(first, result[0]);\n+\t\tassertEquals(second, result[1]);\n+\t\tassertEquals(third, result[2]);\n+\t\tassertEquals(fourth, result[3]);\n+\t\n+\t}\n \n }"
  },
  {
    "sha": "8fe51e3bd746c5533f9ceea4c1f4379a1fe09215",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/blob/e8d994e4359836f448c3fcfa378f2366ede0079a/README.md",
    "raw_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/raw/e8d994e4359836f448c3fcfa378f2366ede0079a/README.md",
    "contents_url": "https://api.github.com/repos/OU-CS5213/introduction-to-the-test-drive-development-namu2805/contents/README.md?ref=e8d994e4359836f448c3fcfa378f2366ede0079a",
    "patch": "@@ -14,7 +14,7 @@ You will make frequent commits:\n * [ ] Create a GitHub action to run your tests from Part 1\n ## Part 3 \n * [ ] You will use the TDD technique for this part, remember to create a test before you implement the method; commit to GitHub every working change you make\n-* [ ] Create a method **removeBiggerThan(int threshold)** the AWS class that will remove all values bigger than a **threshold** that you send and return the number of removed values; use FILLER_VALUE to replace removed values\n-* [ ] Create unit tests for **removeBiggerThan(int threshold)**\n-* [ ] Create a method **stepMultiplier()** in the AWS class that will multiply all values less than 10 by 2, and all values that are less than 20 and bigger than 10 by 4, and all values that are less than 100 and bigger than 20 by 100;\n-* [ ] Create a unit tests for **stepMultiplier()**\n+* [✅] Create a method **removeBiggerThan(int threshold)** the AWS class that will remove all values bigger than a **threshold** that you send and return the number of removed values; use FILLER_VALUE to replace removed values\n+* [✅] Create unit tests for **removeBiggerThan(int threshold)**\n+* [✅] Create a method **stepMultiplier()** in the AWS class that will multiply all values less than 10 by 2, and all values that are less than 20 and bigger than 10 by 4, and all values that are less than 100 and bigger than 20 by 100;\n+* [✅] Create a unit tests for **stepMultiplier()**"
  },
  {
    "sha": "eeec3c4f785b2462d279616dae256162442a379e",
    "filename": "TDD/src/AWS.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/blob/e8d994e4359836f448c3fcfa378f2366ede0079a/TDD/src/AWS.java",
    "raw_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/raw/e8d994e4359836f448c3fcfa378f2366ede0079a/TDD/src/AWS.java",
    "contents_url": "https://api.github.com/repos/OU-CS5213/introduction-to-the-test-drive-development-namu2805/contents/TDD/src/AWS.java?ref=e8d994e4359836f448c3fcfa378f2366ede0079a",
    "patch": "@@ -0,0 +1,80 @@\n+import java.util.Arrays;\n+\n+public class AWS {\n+\tpublic static final int FILLER_VALUE = Integer.MIN_VALUE;\n+\tprivate int[] values;\n+\t\n+\tpublic int[] getValues() {\n+\t\treturn Arrays.copyOf(values, values.length);\n+\t}\n+\t\n+\tpublic void setValues(int[] values) {\n+\t\tthis.values = Arrays.copyOf(values, values.length);\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"AWS [values=\" + Arrays.toString(values) + \"]\";\n+\t}\n+\t\n+\tpublic AWS(int[] values) {\n+\t\tsuper();\n+\t\tsetValues(values);\n+\t}\n+\t\n+\tpublic int remove(int i) {\n+\t\tint value = FILLER_VALUE;\n+\t\tif (i >= 0 && i < values.length) {\n+\t\t\tvalue = values[i];\n+\t\t\tfor(int index = i; index < values.length - 1; ++index) {\n+\t\t\t\tvalues[index] = values[index+1];\n+\t\t\t}\n+\t\t\tvalues[values.length-1] = FILLER_VALUE;\n+\t\t}\n+\t\treturn value;\n+\t}\n+\t\n+\tpublic void fillAndExpand(int position, int nt) {\n+\t\tint numberOfTimes = Math.abs(nt);\n+\t\tint[] newArray = new int[values.length + numberOfTimes];\n+\t\tfor(int i = 0; i <= position; ++i) {\n+\t\t\tnewArray[i] = values[i];\n+\t\t}\n+\t\tfor(int i = position; i <= numberOfTimes + position; ++i) {\n+\t\t\tnewArray[i] = newArray[position];\n+\t\t}\n+\t\tint x = numberOfTimes;\n+\t\tfor(int i = position+1; i < values.length; ++i) {\n+\t\t\tnewArray[i+x] = values[i];\n+\t\t}\n+\t\tvalues = newArray;\n+\t}\n+\n+\tpublic int removeBiggerThan(int threshold) {\n+\t\tint numCount = 0;\n+\t\tfor(int i = 0; i < values.length; ++i) {\n+\t\t\tif(values[i] > threshold) {\n+\t\t\t\tvalues[i] = FILLER_VALUE;\n+\t\t\t\tnumCount += 1;\n+\t\t\t}\n+\t\t}\n+\t\treturn numCount;\n+\t}\n+\n+\tpublic void stepMultiplier() {\n+\t\tfor(int i = 0; i < values.length; ++i) {\n+\t\t\tif(values[i] < 100 && values[i] > 20) {\n+\t\t\t\tvalues[i] = values[i]*100;\n+\t\t\t}\n+\t\t\telse if(values[i] < 20 && values[i] > 10) {\n+\t\t\t\tvalues[i] = values[i]*4;\n+\t\t\t}\n+\t\t\telse if(values[i] < 10) {\n+\t\t\t\tvalues[i] = values[i]*2;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\n+}"
  },
  {
    "sha": "aa706a6bfcc9b45cc0459655d71892d78e9e56a1",
    "filename": "TDD/src/AWSTest.java",
    "status": "added",
    "additions": 147,
    "deletions": 0,
    "changes": 147,
    "blob_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/blob/e8d994e4359836f448c3fcfa378f2366ede0079a/TDD/src/AWSTest.java",
    "raw_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/raw/e8d994e4359836f448c3fcfa378f2366ede0079a/TDD/src/AWSTest.java",
    "contents_url": "https://api.github.com/repos/OU-CS5213/introduction-to-the-test-drive-development-namu2805/contents/TDD/src/AWSTest.java?ref=e8d994e4359836f448c3fcfa378f2366ede0079a",
    "patch": "@@ -0,0 +1,147 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class AWSTest {\n+\t\n+\tprivate static final int FILLER_VALUE = Integer.MIN_VALUE;\n+\tprivate int[] original={1, 2, 3};\n+\tAWS originalAWS;\n+\t\n+\t@BeforeEach\n+\tvoid setUp() throws Exception {\n+\t\t originalAWS = new AWS(this.original);\n+\t}\n+\n+\t@Test\n+\tvoid testGetValues() {\n+\t\tfail(\"Not yet implemented\");\n+\t}\n+\n+\t@Test\n+\tvoid testSetValues() {\n+\t\tfail(\"Not yet implemented\");\n+\t}\n+\n+\t@Test\n+\tvoid testToString() {\n+\t\tfail(\"Not yet implemented\");\n+\t}\n+\n+\t@Test\n+\tvoid testAWS() {\n+\t\tint[] expected = {1, 2, 3};\n+\t\tint[] x = {1, 2, 3};\n+\t\tAWS aws = new AWS(x);\n+\t\tx[1] = 100;\n+\t\t\n+\t\tint[] actual = aws.getValues();\n+\t\tassertEquals(actual[0], expected[0]);\n+\t\tassertEquals(actual[1], expected[1]);\n+\t}\n+\t\n+\t@Test\n+\tvoid testRemove() {\n+\t\tint[] x = {1, 2, 3};\n+\t\tAWS aws = new AWS(x);\n+\t\t\n+\t\tint value = aws.remove(-1);\n+\t\tint expected = FILLER_VALUE;\n+\t\tassertEquals(expected, value);\n+\t\t\n+\t\tvalue = aws.remove(x.length + 10);\n+\t\texpected = FILLER_VALUE;\n+\t\tassertEquals(expected, value);\n+\t\t\n+\t\tvalue = aws.remove(0);\n+\t\tassertEquals(x[0], value);\n+\t\t\n+\t\tint[] r = aws.getValues();\n+\t\tvalue = r[r.length - 1];\n+\t\tassertEquals(expected, value);\n+\t\t\n+\t\tvalue = aws.remove(2);\n+\t\tassertEquals(r[2], value);\n+\t\t\n+\t\tr = aws.getValues();\n+\t\tvalue = r[r.length - 1];\n+\t\tassertEquals(expected, value);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tvoid testFillAndExpand() {\n+\t\tint position = 1;\n+\t\tint numberOfTimes = 2;\n+\t\tint[] org = originalAWS.getValues();\n+\t\tint expectedValue = org[position];\n+\t\tint first = org[0];\n+ \t\t\n+\t\tint expected = originalAWS.getValues().length + numberOfTimes; \n+\t\toriginalAWS.fillAndExpand(position, numberOfTimes);\n+\t\tint[] result = originalAWS.getValues();\n+\t\tassertEquals(expected, result.length);\n+\t\t\n+\t\tint a = result[1];\n+\t\tint b = result[2];\n+\t\tint c = result[3];\n+\t\tassertEquals(expectedValue, a);\n+\t\tassertEquals(expectedValue, b);\n+\t\tassertEquals(expectedValue, c);\n+\t\tassertEquals(first, result[0]);\n+\t\t \n+\t\t\n+\t\n+\t}\n+\t@Test\n+\tvoid testFillAndExpandWithNegative() {\n+\t\tint position = 1;\n+\t\tint numberOfTimes = -2;\n+\t\tnumberOfTimes = Math.abs(numberOfTimes);\n+\t\t\n+\t\tint[] org = originalAWS.getValues();\n+\t\tint expectedValue = org[position]; \n+ \t\tint first = org[0]; \n+\t\tint expected = originalAWS.getValues().length + numberOfTimes; \n+\t\toriginalAWS.fillAndExpand(position, numberOfTimes);\n+\t\tint[] result = originalAWS.getValues();\n+\t\tassertEquals(expected, result.length);\n+\t\t\n+\t\tint a = result[1];\n+\t\tint b = result[2];\n+\t\tint c = result[3];\n+\t\tassertEquals(expectedValue, a);\n+\t\tassertEquals(expectedValue, b);\n+\t\tassertEquals(expectedValue, c);\n+\t\t \n+\t\tassertEquals(first, result[0]);\n+\n+\t\n+\t}\n+\t@Test\n+\tvoid removeBiggerThan() {\n+\t\tint[] x = { 1, 2, 3};\n+\t\tAWS aws = new AWS(x);\n+\t\tint numCount = aws.removeBiggerThan(0);\n+\t\tint expected = 3;\n+\t\tassertEquals(expected, numCount);\n+\t}\n+\t@Test\n+\tvoid stepMultiplier() {\n+\t\tint[] x = {7, 5, 18, 85};\n+\t\tAWS aws = new AWS(x);\n+\t\taws.stepMultiplier();\n+\t\tint[] result = aws.getValues();\n+\t\tint first = 14;\n+\t\tint second = 10;\n+\t\tint third = 72;\n+\t\tint fourth = 8500;\n+\t\tassertEquals(first, result[0]);\n+\t\tassertEquals(second, result[1]);\n+\t\tassertEquals(third, result[2]);\n+\t\tassertEquals(fourth, result[3]);\n+\t\n+\t}\n+\n+}"
  },
  {
    "sha": "a65f7435f1ee8606e055d4bd36002f7c47d3bd5d",
    "filename": "pom.xml",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/blob/e8d994e4359836f448c3fcfa378f2366ede0079a/pom.xml",
    "raw_url": "https://github.com/OU-CS5213/introduction-to-the-test-drive-development-namu2805/raw/e8d994e4359836f448c3fcfa378f2366ede0079a/pom.xml",
    "contents_url": "https://api.github.com/repos/OU-CS5213/introduction-to-the-test-drive-development-namu2805/contents/pom.xml?ref=e8d994e4359836f448c3fcfa378f2366ede0079a",
    "patch": "@@ -0,0 +1,18 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<groupId>TDD</groupId>\n+\t<artifactId>TDD</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<packaging>pom</packaging>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.junit.jupiter</groupId>\n+\t\t\t<artifactId>junit-jupiter-api</artifactId>\n+\t\t\t<version>5.6.3</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\t</dependencies>\n+\n+</project>"
  }
]
