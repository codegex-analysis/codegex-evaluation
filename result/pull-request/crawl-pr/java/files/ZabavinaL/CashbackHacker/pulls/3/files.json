[
  {
    "sha": "d42bb6a5c57b6b4821c94b791cd516b5c48ef917",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/ZabavinaL/CashbackHacker/blob/1df549d2022a8e5f86d3d908ee6b5d335ce75165/build.gradle",
    "raw_url": "https://github.com/ZabavinaL/CashbackHacker/raw/1df549d2022a8e5f86d3d908ee6b5d335ce75165/build.gradle",
    "contents_url": "https://api.github.com/repos/ZabavinaL/CashbackHacker/contents/build.gradle?ref=1df549d2022a8e5f86d3d908ee6b5d335ce75165",
    "patch": "@@ -10,10 +10,9 @@ repositories {\n }\n \n dependencies {\n-    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'\n-    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'\n+    testImplementation 'junit:junit:4.13'\n }\n \n test {\n-    useJUnitPlatform()\n+    useJUnit()\n }\n\\ No newline at end of file"
  },
  {
    "sha": "d51b1187c59a0ef78bfa226b7c077ccd8d522f41",
    "filename": "src/test/java/ru/netology/service/CashbackHackerServiceTest.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/ZabavinaL/CashbackHacker/blob/1df549d2022a8e5f86d3d908ee6b5d335ce75165/src/test/java/ru/netology/service/CashbackHackerServiceTest.java",
    "raw_url": "https://github.com/ZabavinaL/CashbackHacker/raw/1df549d2022a8e5f86d3d908ee6b5d335ce75165/src/test/java/ru/netology/service/CashbackHackerServiceTest.java",
    "contents_url": "https://api.github.com/repos/ZabavinaL/CashbackHacker/contents/src/test/java/ru/netology/service/CashbackHackerServiceTest.java?ref=1df549d2022a8e5f86d3d908ee6b5d335ce75165",
    "patch": "@@ -0,0 +1,47 @@\n+package ru.netology.service;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class CashbackHackerServiceTest {\n+\n+    @Test\n+    public void shouldIfAmountNull() {\n+        CashbackHackerService hackerService = new CashbackHackerService();\n+\n+        int actual = hackerService.remain(0);\n+        int expected = 1000;\n+\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldIfAmountBelow1000() {\n+        CashbackHackerService hackerService = new CashbackHackerService();\n+\n+        int actual = hackerService.remain(900);\n+        int expected = 100;\n+\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldIfAmountOver1000() {\n+        CashbackHackerService hackerService = new CashbackHackerService();\n+\n+        int actual = hackerService.remain(1300);\n+        int expected = 700;\n+\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldIfAmountEqual1000() {\n+        CashbackHackerService hackerService = new CashbackHackerService();\n+\n+        int actual = hackerService.remain(1000);\n+        int expected = 0;\n+\n+        assertEquals(expected, actual);\n+    }\n+}\n\\ No newline at end of file"
  }
]
