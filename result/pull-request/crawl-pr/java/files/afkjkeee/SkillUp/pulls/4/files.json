[
  {
    "sha": "6df5fbd4c7594d058d3eb1efb559096e2a0f3492",
    "filename": "src/by/epam/skillup/Strings/AsArray/Task1.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task1.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task1.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsArray/Task1.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,22 @@\n+package by.epam.skillup.Strings.AsArray;\n+\n+import java.util.Arrays;\n+\n+public class Task1 {\n+\tpublic static void main(String[] args) {\n+\t\tString[] camelCaseArr = { \"HelloJava\", \"CamelCase\", \"SnakeCase\" };\n+\n+\t\tTask1 task1 = new Task1();\n+\t\tString result = task1.fromCamelCaseToSnakeCase(camelCaseArr);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String fromCamelCaseToSnakeCase(String[] camelCaseArr) {\n+\t\tString regularExp = \"([a-z])([A-Z]+)\";\n+\t\tString replacement = \"$1_$2\";\n+\t\tString str = Arrays.toString(camelCaseArr);\n+\t\tstr = str.replaceAll(regularExp, replacement).toLowerCase();\n+\n+\t\treturn str;\n+\t}\n+}"
  },
  {
    "sha": "03093971bf4529f89838968ed3b25c91dff8a735",
    "filename": "src/by/epam/skillup/Strings/AsArray/Task2.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task2.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task2.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsArray/Task2.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,18 @@\n+package by.epam.skillup.Strings.AsArray;\n+\n+public class Task2 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"Replace this word and this word.\";\n+\t\tTask2 task2 = new Task2();\n+\t\tString result = task2.replaceWord(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String replaceWord(String str) {\n+\t\tString target = \"word\";\n+\t\tString replacement = \"letter\";\n+\t\tstr = str.replaceAll(target, replacement);\n+\n+\t\treturn str;\n+\t}\n+}"
  },
  {
    "sha": "8ceccd774d5bb08bd2f51bd22516922a663654e1",
    "filename": "src/by/epam/skillup/Strings/AsArray/Task3.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task3.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task3.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsArray/Task3.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,21 @@\n+package by.epam.skillup.Strings.AsArray;\n+\n+public class Task3 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"R3p1ac3 th1s t3xt\";\n+\t\tTask3 task3 = new Task3();\n+\t\tint result = task3.digitsInStringCount(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic int digitsInStringCount(String str) {\n+\t\tint count = 0;\n+\t\tfor (int i = 0; i < str.length(); i++) {\n+\t\t\tif (Character.isDigit(str.charAt(i))) {\n+\t\t\t\tcount++;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn count;\n+\t}\n+}"
  },
  {
    "sha": "4fbbdb186f9b59203b7ba089306023f9bde57d44",
    "filename": "src/by/epam/skillup/Strings/AsArray/Task4.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task4.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task4.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsArray/Task4.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,23 @@\n+package by.epam.skillup.Strings.AsArray;\n+\n+public class Task4 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"R32p12ac346 th113333l\";\n+\t\tTask4 task4 = new Task4();\n+\t\tint result = task4.numberCount(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic int numberCount(String str) {\n+\t\tint count = 0;\n+\t\tfor (int i = 0; i < str.length(); i++) {\n+\t\t\tif (Character.isDigit(str.charAt(i))) {\n+\t\t\t\tif (i == str.length() - 1 || !Character.isDigit(str.charAt(i + 1))) {\n+\t\t\t\t\tcount++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn count;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2e63f5fe10d3121b2b480c82370d2f0504dff971",
    "filename": "src/by/epam/skillup/Strings/AsArray/Task5.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task5.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsArray/Task5.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsArray/Task5.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,14 @@\n+package by.epam.skillup.Strings.AsArray;\n+\n+public class Task5 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \" Hello,  how are      you??  \";\n+\t\tTask5 task5 = new Task5();\n+\t\tString result = task5.deleteSpaces(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String deleteSpaces(String str) {\n+\t\treturn str.replaceAll(\"\\s+\", \" \").trim();\n+\t}\n+}"
  },
  {
    "sha": "1be78bc3a53431af13bbf64df2cd629eb4b278bd",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task1.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task1.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task1.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task1.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,28 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task1 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \" Hello,  how are       you??  \";\n+\t\tTask1 task1 = new Task1();\n+\t\tString result = task1.specesCount(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String specesCount(String str) {\n+\t\tint count = 0;\n+\t\tint maxSpaces = 0;\n+\n+\t\tfor (int i = 0; i < str.length(); i++) {\n+\t\t\tif (str.charAt(i) == ' ') {\n+\t\t\t\tcount++;\n+\t\t\t} else {\n+\t\t\t\tif (count > maxSpaces) {\n+\t\t\t\t\tmaxSpaces = count;\n+\t\t\t\t}\n+\t\t\t\tcount = 0;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn \"������������ ����� �������� - \" + maxSpaces;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "88523caf8b7130374559743032f7579ab2b56a91",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task10.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task10.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task10.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task10.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,18 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task10 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"������, ��� ���� ����? ��� ������, � ����? ��� ����. ����!\";\n+\t\tTask10 task10 = new Task10();\n+\t\tString result = task10.numberOfOffers(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String numberOfOffers(String str) {\n+\t\tint firstStringLength = str.length();\n+\t\tint stringLengthWithoutMarks = str.replaceAll(\"[.!?]\", \"\").length();\n+\t\tint numberOfOffers = firstStringLength - stringLengthWithoutMarks;\n+\n+\t\treturn \"���������� ����������� - \" + numberOfOffers;\n+\t}\n+}"
  },
  {
    "sha": "f4d9dd7209b0587c19584ec60514e65fe04fb1db",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task2.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task2.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task2.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task2.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,23 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task2 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"Hallo, haw are you??\";\n+\t\tTask2 task2 = new Task2();\n+\t\tString result = task2.printBAfterA(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String printBAfterA(String str) {\n+\t\tStringBuilder strB = new StringBuilder();\n+\t\tfor (int i = 0; i < str.length(); i++) {\n+\t\t\tif (str.charAt(i) == 'a') {\n+\t\t\t\tstrB.append(\"ab\");\n+\t\t\t} else {\n+\t\t\t\tstrB.append(str.charAt(i));\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn strB.toString();\n+\t}\n+}"
  },
  {
    "sha": "0fa67a7367685a53f8e8cfae62026cf95108ec7b",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task3.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task3.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task3.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task3.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,16 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task3 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"101\";\n+\n+\t\tTask3 task3 = new Task3();\n+\t\tboolean result = task3.isPalindrome(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic boolean isPalindrome(String str) {\n+\t\tstr = str.toLowerCase();\n+\t\treturn str.equals(new StringBuilder(str).reverse().toString());\n+\t}\n+}"
  },
  {
    "sha": "f21ccbb96264d5215fc3822de053d06072c9ce52",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task4.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task4.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task4.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task4.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,20 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task4 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"�����������\";\n+\n+\t\tTask4 task4 = new Task4();\n+\t\tString result = task4.makeWordCake(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String makeWordCake(String str) {\n+\t\tString cake = String.valueOf(str.charAt(str.indexOf('�')));\n+\t\tcake = cake + String.valueOf(str.charAt(str.indexOf('�')));\n+\t\tcake = cake + String.valueOf(str.charAt(str.indexOf('�')));\n+\t\tcake = cake + String.valueOf(str.charAt(str.indexOf('�')));\n+\n+\t\treturn cake;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b380b988711be6c6aa2fa263faec95b106a9384b",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task5.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task5.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task5.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task5.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,22 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task5 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"�����������\";\n+\n+\t\tTask5 task5 = new Task5();\n+\t\tint result = task5.charACount(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic int charACount(String str) {\n+\t\tint count = 0;\n+\t\tfor (int i = 0; i < str.length(); i++) {\n+\t\t\tif (str.charAt(i) == '�') {\n+\t\t\t\tcount++;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn count;\n+\t}\n+}"
  },
  {
    "sha": "5d27e68c17e9e31c99447c06290ef123dec10a1f",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task6.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task6.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task6.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task6.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,20 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task6 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"�����������\";\n+\n+\t\tTask6 task6 = new Task6();\n+\t\tString result = task6.doubleChar(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String doubleChar(String str) {\n+\t\tStringBuilder strB = new StringBuilder();\n+\t\tfor (int i = 0; i < str.length(); i++) {\n+\t\t\tstrB.append(str.charAt(i));\n+\t\t\tstrB.append(str.charAt(i));\n+\t\t}\n+\t\treturn strB.toString();\n+\t}\n+}"
  },
  {
    "sha": "1451f0c25a7c01f78f817e753ffe5b090d1e14d5",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task7.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task7.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task7.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task7.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,25 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task7 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"abc cde def\";\n+\t\tTask7 task7 = new Task7();\n+\t\tString result = task7.deleteRepeatedChars(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String deleteRepeatedChars(String str) {\n+\t\tstr = str.replaceAll(\"\\\\s\", \"\");\n+\t\tStringBuilder strB = new StringBuilder(str);\n+\t\tfor (int i = 0; i < strB.length(); i++) {\n+\t\t\tchar ch = strB.charAt(i);\n+\t\t\tfor (int j = i + 1; j < strB.length(); j++) {\n+\t\t\t\tif (strB.charAt(j) == ch) {\n+\t\t\t\t\tstrB.deleteCharAt(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn strB.toString();\n+\t}\n+}"
  },
  {
    "sha": "2c4841595951077369c692d3f80495fb76b09f2c",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task8.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task8.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task8.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task8.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,25 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task8 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"Hello bye string algorithmization lagorithmizations\";\n+\t\tTask8 task8 = new Task8();\n+\t\tString result = task8.longestWordSearch(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String longestWordSearch(String str) {\n+\t\tString longestWord = \"\";\n+\t\tint maxLength = 0;\n+\t\tString[] words = str.split(\" \");\n+\n+\t\tfor (int i = 0; i < words.length; i++) {\n+\t\t\tif (words[i].length() > maxLength) {\n+\t\t\t\tmaxLength = words[i].length();\n+\t\t\t\tlongestWord = words[i];\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn longestWord;\n+\t}\n+}"
  },
  {
    "sha": "8b7a1dc871e7b029333eb2fb877b1d4251a5c930",
    "filename": "src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task9.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task9.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task9.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/AsStringOrStringBuilder/Task9.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,27 @@\n+package by.epam.skillup.Strings.AsStringOrStringBuilder;\n+\n+public class Task9 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"Hello Bye String Algorithmization LAgorithmizations\";\n+\t\tTask9 task9 = new Task9();\n+\t\tString result = task9.counterOfLowerAndUppercase(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String counterOfLowerAndUppercase(String str) {\n+\n+\t\tint lowercaseCount = 0;\n+\t\tint uppercaseCounnt = 0;\n+\n+\t\tfor (int i = 0; i < str.length(); i++) {\n+\t\t\tchar ch = str.charAt(i);\n+\t\t\tif (ch >= 'a' && ch <= 'z') {\n+\t\t\t\tlowercaseCount++;\n+\t\t\t} else if (ch >= 'A' && ch <= 'Z') {\n+\t\t\t\tuppercaseCounnt++;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn \"��������� ���� � ������ - \" + lowercaseCount + \", ������� - \" + uppercaseCounnt;\n+\t}\n+}"
  },
  {
    "sha": "daaece7220a02d782e2126cd9ea3515b16b17adf",
    "filename": "src/by/epam/skillup/Strings/RegularExpressions/Task1.java",
    "status": "added",
    "additions": 152,
    "deletions": 0,
    "changes": 152,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/RegularExpressions/Task1.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/RegularExpressions/Task1.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/RegularExpressions/Task1.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,152 @@\n+package by.epam.skillup.Strings.RegularExpressions;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+public class Task1 {\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tString text = \"������ �����. ��� �����������.\\n\" + \"������ �����. ��� �����������. ��� ������ �����������.\\n\"\n+\t\t\t\t+ \"������ �����.\\n\" + \"��������� ����� � ���� �����������. ������. ������. ���������. �����.\\n\"\n+\t\t\t\t+ \"����� �����. ������. �����. ������ �����������\\n\";\n+\n+\t\tmakeTextOperation(text);\n+\t}\n+\n+\tprivate static void makeTextOperation(String text) throws IOException {\n+\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n+\t\tString start = \"������� 1 ��� ���������� ������� �� ���������� �����������;\\n\"\n+\t\t\t\t+ \"������� 2 ��� ���������� ���� �� �����;\\n\" + \"������� 3 ��� ���������� ������ � ������������;\\n\"\n+\t\t\t\t+ \"��� ���������� ������� exit.\\n\";\n+\t\tString choice = \"\";\n+\t\tSystem.out.println(start);\n+\t\twhile (!choice.equalsIgnoreCase(\"exit\")) {\n+\t\t\tSystem.out.print(\"������� �������: \");\n+\t\t\tchoice = reader.readLine();\n+\t\t\tswitch (choice) {\n+\t\t\tcase \"1\":\n+\t\t\t\tsortingParagraphs(text);\n+\t\t\t\tbreak;\n+\t\t\tcase \"2\":\n+\t\t\t\tsortingWordsByLength(text);\n+\t\t\t\tbreak;\n+\t\t\tcase \"3\":\n+\t\t\t\tsortLexemes(text);\n+\t\t\t\tbreak;\n+\t\t\tcase \"exit\":\n+\t\t\t\tSystem.out.println(\"����.\");\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tSystem.out.println(\"�������� �������.\\n\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static void sortingParagraphs(String text) {\n+\t\tString[] paragraphs = text.split(\"\\n\");\n+\t\tint[] counterSentences = new int[paragraphs.length];\n+\t\tint maxLengthParagraph = 0;\n+\t\tfor (int i = 0; i < paragraphs.length; i++) {\n+\t\t\tString[] sentences = splitSentences(paragraphs[i]);\n+\t\t\tcounterSentences[i] = sentences.length;\n+\t\t\tif (maxLengthParagraph < sentences.length) {\n+\t\t\t\tmaxLengthParagraph = sentences.length;\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (int i = 1; i <= maxLengthParagraph; i++) {\n+\t\t\tfor (int j = 0; j < counterSentences.length; j++) {\n+\t\t\t\tif (i == counterSentences[j]) {\n+\t\t\t\t\tSystem.out.println(paragraphs[j]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println();\n+\t}\n+\n+\tprivate static void sortingWordsByLength(String text) {\n+\t\tString[] paragraphs = text.split(\"\\n\");\n+\t\tfor (String paragraph : paragraphs) {\n+\t\t\tString[] sentences = splitSentences(paragraph);\n+\t\t\tfor (String sentence : sentences) {\n+\t\t\t\tString[] words = splitWords(sentence);\n+\n+\t\t\t\tfor (int k = words.length - 1; k >= 0; k--) {\n+\t\t\t\t\tfor (int m = 0; m < k; m++) {\n+\t\t\t\t\t\tif (words[m].length() > words[m + 1].length()) {\n+\t\t\t\t\t\t\tString tmp = words[m];\n+\t\t\t\t\t\t\twords[m] = words[m + 1];\n+\t\t\t\t\t\t\twords[m + 1] = tmp;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tfor (String word : words) {\n+\t\t\t\t\tSystem.out.print(word + \" \");\n+\t\t\t\t}\n+\t\t\t\tSystem.out.print(\"\\b. \");\n+\t\t\t}\n+\t\t\tSystem.out.println();\n+\t\t}\n+\t\tSystem.out.println();\n+\t}\n+\n+\tprivate static void sortLexemes(String text) throws IOException {\n+\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n+\t\tSystem.out.print(\"������� ������ ��� ���������� ������ �� ��������: \");\n+\t\tString letter = reader.readLine();\n+\t\tString[] paragraphs = text.split(\"\\n\");\n+\t\tfor (String paragraph : paragraphs) {\n+\t\t\tString[] sentences = splitSentences(paragraph);\n+\t\t\tfor (String sentence : sentences) {\n+\t\t\t\tString[] words = splitWords(sentence);\n+\n+\t\t\t\tfor (int k = words.length - 1; k >= 0; k--) {\n+\t\t\t\t\tfor (int m = 0; m < k; m++) {\n+\t\t\t\t\t\tint countRight = 0;\n+\t\t\t\t\t\tint countLeft = 0;\n+\t\t\t\t\t\tfor (int n = 0; n < words[m].length(); n++) {\n+\t\t\t\t\t\t\tif (String.valueOf(words[m].charAt(n)).compareToIgnoreCase(letter) == 0) {\n+\t\t\t\t\t\t\t\tcountLeft++;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tfor (int n = 0; n < words[m + 1].length(); n++) { \n+\t\t\t\t\t\t\tif (String.valueOf(words[m + 1].charAt(n)).compareToIgnoreCase(letter) == 0) {\n+\t\t\t\t\t\t\t\tcountRight++;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (countLeft < countRight) {\n+\t\t\t\t\t\t\tString tmp = words[m];\n+\t\t\t\t\t\t\twords[m] = words[m + 1];\n+\t\t\t\t\t\t\twords[m + 1] = tmp;\n+\t\t\t\t\t\t} else if (countLeft == countRight) { \n+\t\t\t\t\t\t\tString[] forCompare = { words[m], words[m + 1] };\n+\t\t\t\t\t\t\tArrays.sort(forCompare);\n+\t\t\t\t\t\t\twords[m] = forCompare[0];\n+\t\t\t\t\t\t\twords[m + 1] = forCompare[1];\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tfor (String word : words) {\n+\t\t\t\t\tSystem.out.print(word + \" \");\n+\t\t\t\t}\n+\t\t\t\tSystem.out.print(\"\\b. \");\n+\t\t\t}\n+\t\t\tSystem.out.println();\n+\t\t}\n+\t\tSystem.out.println();\n+\t}\n+\n+\tprivate static String[] splitSentences(String text) {\n+\t\tPattern pattern = Pattern.compile(\"\\\\.*[.!?]\\\\s*\");\n+\t\treturn pattern.split(text);\n+\t}\n+\n+\tprivate static String[] splitWords(String sentence) {\n+\t\tPattern pattern = Pattern.compile(\"\\\\s*(\\\\s|,|;|:)\\\\s*\");\n+\t\treturn pattern.split(sentence);\n+\t}\n+}"
  },
  {
    "sha": "8f099a2230a4ec1a07c79d24cb4691673c3d1063",
    "filename": "src/by/epam/skillup/Strings/RegularExpressions/Task2.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/afkjkeee/SkillUp/blob/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/RegularExpressions/Task2.java",
    "raw_url": "https://github.com/afkjkeee/SkillUp/raw/9446e571fa3f0754e94e10273c0a6e54458aea56/src/by/epam/skillup/Strings/RegularExpressions/Task2.java",
    "contents_url": "https://api.github.com/repos/afkjkeee/SkillUp/contents/src/by/epam/skillup/Strings/RegularExpressions/Task2.java?ref=9446e571fa3f0754e94e10273c0a6e54458aea56",
    "patch": "@@ -0,0 +1,52 @@\n+package by.epam.skillup.Strings.RegularExpressions;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Task2 {\n+\tpublic static void main(String[] args) {\n+\t\tString str = \"<notes>\\n\" + \"    <note id = \\\"1\\\">\\n\" + \"        <to>����</to>\\n\"\n+\t\t\t\t+ \"        <from>�����</from>\\n\" + \"        <heading>�����������</heading>\\n\"\n+\t\t\t\t+ \"        <body>������� ��� ������!</body>\\n\" + \"    </note>\\n\" + \"    <note id = \\\"2\\\">\\n\"\n+\t\t\t\t+ \"        <to>����</to>\\n\" + \"        <from>����</from>\\n\"\n+\t\t\t\t+ \"        <heading>������ �����������</heading>\\n\" + \"        <body/>\\n\" + \"    </note>\\n\"\n+\t\t\t\t+ \" </notes>\\n\";\n+\t\tTask2 task2 = new Task2();\n+\t\tString result = task2.xmlAnalyz(str);\n+\t\tSystem.out.println(result);\n+\t}\n+\n+\tpublic String xmlAnalyz(String str) {\n+\t\tStringBuilder strB = new StringBuilder();\n+\t\tPattern pOpen = Pattern.compile(\"<\\\\w.+?>\");\n+\t\tPattern pClose = Pattern.compile(\"</\\\\w+>\");\n+\t\tPattern pBody = Pattern.compile(\">.+?<\");\n+\t\tPattern pEmpty = Pattern.compile(\"<\\\\w.+?/>\");\n+\n+\t\tString[] lines = str.split(\"\\n\\\\s*\");\n+\n+\t\tfor (String line : lines) {\n+\t\t\tMatcher mOpen = pOpen.matcher(line);\n+\t\t\tMatcher mClose = pClose.matcher(line);\n+\t\t\tMatcher mBody = pBody.matcher(line);\n+\t\t\tMatcher mEmpty = pEmpty.matcher(line);\n+\t\t\tif (mEmpty.find()) {\n+\t\t\t\tstrB.append(mEmpty.group());\n+\t\t\t\tstrB.append(\" - ��� ��� ����\\n\");\n+\t\t\t} else if (mOpen.find()) {\n+\t\t\t\tstrB.append(mOpen.group());\n+\t\t\t\tstrB.append(\" - ����������� ���\\n\");\n+\t\t\t}\n+\t\t\tif (mBody.find()) {\n+\t\t\t\tstrB.append(mBody.group().substring(1));\n+\t\t\t\tstrB.append(\"\\b - ���������� ����\\n\");\n+\t\t\t}\n+\t\t\tif (mClose.find()) {\n+\t\t\t\tstrB.append(mClose.group());\n+\t\t\t\tstrB.append(\" - ����������� ���\\n\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn strB.toString();\n+\t}\n+}"
  }
]
