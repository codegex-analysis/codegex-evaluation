[
  {
    "sha": "c426d58200c2a69f7412c14597c4bf90ae5407fa",
    "filename": "client/src/org/eevolution/grid/Browser.java",
    "status": "modified",
    "additions": 142,
    "deletions": 93,
    "changes": 235,
    "blob_url": "https://github.com/adempiere/adempiere/blob/d0cbc1eaaf6e28ebafc70268e052eadb1839780a/client/src/org/eevolution/grid/Browser.java",
    "raw_url": "https://github.com/adempiere/adempiere/raw/d0cbc1eaaf6e28ebafc70268e052eadb1839780a/client/src/org/eevolution/grid/Browser.java",
    "contents_url": "https://api.github.com/repos/adempiere/adempiere/contents/client/src/org/eevolution/grid/Browser.java?ref=d0cbc1eaaf6e28ebafc70268e052eadb1839780a",
    "patch": "@@ -44,10 +44,10 @@\n import org.compiere.minigrid.IDColumn;\n import org.compiere.model.GridField;\n import org.compiere.model.GridFieldVO;\n-import org.compiere.model.I_AD_Column;\n import org.compiere.model.MColumn;\n import org.compiere.model.MLookup;\n import org.compiere.model.MLookupFactory;\n+import org.compiere.model.MLookupInfo;\n import org.compiere.model.MProcess;\n import org.compiere.model.MQuery;\n import org.compiere.model.MRole;\n@@ -1131,43 +1131,51 @@ public int getAD_Browse_ID() {\n \t\taxisParametersValues = new ArrayList<>();\n \n \t\ttry {\n-\t\t\tI_AD_View_Column xcol, pcol, ycol;\n-\t\t\txcol = field.getAD_View_Column();\n+\t\t\tI_AD_View_Column xColumn, pcol, yColumn;\n+\t\t\txColumn = field.getAD_View_Column();\n \t\t\tpcol = field.getAxis_Parent_Column();\n-\t\t\tycol = field.getAxis_Column();\n+\t\t\tyColumn = field.getAxis_Column();\n \t\t\t//\tValidate Type\n-\t\t\tString columnName = xcol.getAD_Column().getColumnName();\n \t\t\tOptional<MBrowseField> maybeField = browseModel.getFields()\n \t\t\t\t\t.stream()\n-\t\t\t\t\t.filter(fieldToFind -> fieldToFind.getAD_View_Column_ID() == ycol.getAD_View_Column_ID())\n+\t\t\t\t\t.filter(fieldToFind -> fieldToFind.getAD_View_Column_ID() == yColumn.getAD_View_Column_ID())\n \t\t\t\t\t.findFirst();\n \t\t\t//\tValidate\n \t\t\tif(maybeField.isPresent()) {\n \t\t\t\tMBrowseField yField = maybeField.get();\n \t\t\t\tMBrowseField fieldKey = getFieldKey();\n-\t\t\t\tString yColumnName = null;\n-\t\t\t\tint yReferenceId = 0;\n-\t\t\t\tint yReferenceValueId = 0;\n-\t\t\t\tif(ycol.getAD_Column_ID() > 0) {\n-\t\t\t\t\tMColumn column = MColumn.get(field.getCtx(), ycol.getAD_Column_ID());\n-\t\t\t\t\tyColumnName = column.getColumnName();\n-\t\t\t\t\tyReferenceId = column.getAD_Reference_ID();\n-\t\t\t\t\tyReferenceValueId = column.getAD_Reference_Value_ID();\n+\t\t\t\tString columnName = null;\n+\t\t\t\tString tableName = null;\n+\t\t\t\tint referenceId = 0;\n+\t\t\t\tint referenceValueId = 0;\n+\t\t\t\tString whereClause =  \"\";\n+\t\t\t\tif(xColumn.getAD_Column_ID() > 0) {\n+\t\t\t\t\tMColumn column = MColumn.get(field.getCtx(), xColumn.getAD_Column_ID());\n+\t\t\t\t\tcolumnName = column.getColumnName();\n+\t\t\t\t\treferenceId = column.getAD_Reference_ID();\n+\t\t\t\t\treferenceValueId = column.getAD_Reference_Value_ID();\n+\t\t\t\t\ttableName = MTable.getTableName(field.getCtx(), column.getAD_Table_ID());\n \t\t\t\t} else {\n-\t\t\t\t\tyColumnName = yField.getAD_Element().getColumnName();\n-\t\t\t\t\tyReferenceId = yField.getAD_Reference_ID();\n-\t\t\t\t\tyReferenceValueId = yField.getAD_Reference_Value_ID();\n+\t\t\t\t\tcolumnName = field.getAD_Element().getColumnName();\n+\t\t\t\t\treferenceId = field.getAD_Reference_ID();\n+\t\t\t\t\treferenceValueId = field.getAD_Reference_Value_ID();\n+\t\t\t\t}\n+\t\t\t\tif(field.getAD_Val_Rule_ID() > 0) {\n+\t\t\t\t\twhereClause = Env.parseContext(Env.getCtx(), getWindowNo() , field.getAD_Val_Rule().getCode(), false);\n \t\t\t\t}\n \t\t\t\tif(fieldKey == null)\n \t\t\t\t\tthrow new AdempiereException(\"@NotFound@ @IsKey@\");\n \n-\t\t\t\tMTable xTable = MTable.get(field.getCtx(), ycol.getAD_View_Definition().getAD_Table_ID());\n+\t\t\t\tMTable xTable = MTable.get(field.getCtx(), yColumn.getAD_View_Definition().getAD_Table_ID());\n \t\t\t\tString xTableName = xTable.getTableName();\n-\n-\t\t\t\tString keyColumn = MQuery.getZoomColumnName(columnName);\n-\t\t\t\tString tableName = MQuery.getZoomTableName(columnName);\n-\n-\t\t\t\tString whereClause =  \"\";\n+\t\t\t\t\n+\t\t\t\t//\tGet Lookup\n+\t\t\t\tMLookup lookup = MLookupFactory.get(Env.getCtx(), 0,\n+\t\t\t\t\t\txColumn.getAD_Column_ID(), referenceId,\n+\t\t\t\t\t\tm_language, columnName, referenceValueId, false, whereClause);\n+\t\t\t\tif(tableName == null) {\n+\t\t\t\t\ttableName = lookup.getTableName();\n+\t\t\t\t}\n \n \t\t\t\tif (pcol != null && pcol.getAD_View_Column_ID() > 0) {\n \t\t\t\t\tMTable parentTable = MTable.get(field.getCtx(), tableName);\n@@ -1179,70 +1187,76 @@ public int getAD_Browse_ID() {\n \t\t\t\t\t\twhereClause = Env.parseContext(Env.getCtx(), getWindowNo() , field.getAD_Val_Rule().getCode(), false);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t//\tGet Lookup\n-\t\t\t\tMLookup lookup = MLookupFactory.get(Env.getCtx(), 0,\n-\t\t\t\t\t\txcol.getAD_Column_ID(), field.getAD_Reference_ID(),\n-\t\t\t\t\t\tm_language, keyColumn, field.getAD_Reference_Value_ID(), false, whereClause);\n-\n-\t\t\t\tString axisColumnName = ycol.getColumnSQL();\n+\t\t\t\t//\t\n+\t\t\t\ttableName = lookup.getTableName();\n+\t\t\t\t\n+\t\t\t\tString axisColumnName = yColumn.getColumnSQL();\n \t\t\t\tif(Util.isEmpty(axisColumnName)) {\n-\t\t\t\t\taxisColumnName = yColumnName;\n+\t\t\t\t\taxisColumnName = columnName;\n \t\t\t\t}\n \t\t\t\t//\tReplace alias\n \t\t\t\tStringBuilder axisSql = new StringBuilder(axisColumnName);\n \t\t\t\tboolean isSQLAgregate = false;\n-\t\t\t\tif(DisplayType.isNumeric(yReferenceId)) {\n+\t\t\t\tif(yField.getAD_Val_Rule_ID() > 0) {\n+\t\t\t\t\twhereClause = Env.parseContext(Env.getCtx(), getWindowNo(), yField.getAD_Val_Rule().getCode(), false);\n+\t\t\t\t}\n+\t\t\t\t//\tOverwrite reference\n+\t\t\t\tif(yColumn.getAD_Column_ID() > 0) {\n+\t\t\t\t\tMColumn column = MColumn.get(field.getCtx(), xColumn.getAD_Column_ID());\n+\t\t\t\t\tcolumnName = column.getColumnName();\n+\t\t\t\t\treferenceId = column.getAD_Reference_ID();\n+\t\t\t\t\treferenceValueId = column.getAD_Reference_Value_ID();\n+\t\t\t\t\ttableName = MTable.getTableName(field.getCtx(), column.getAD_Table_ID());\n+\t\t\t\t} else {\n+\t\t\t\t\tcolumnName = yField.getAD_Element().getColumnName();\n+\t\t\t\t\treferenceId = yField.getAD_Reference_ID();\n+\t\t\t\t\treferenceValueId = yField.getAD_Reference_Value_ID();\n+\t\t\t\t}\n+\t\t\t\t//\tValidate reference\n+\t\t\t\tif(DisplayType.isNumeric(referenceId)) {\n \t\t\t\t\tisSQLAgregate = !isSQLAgregate;\n-\t\t\t\t\taxisColumnName = axisColumnName.replaceAll(ycol.getAD_View_Definition().getTableAlias(), ycol.getAD_View_Definition().getAD_Table().getTableName());\n+\t\t\t\t\taxisColumnName = axisColumnName.replaceAll(yColumn.getAD_View_Definition().getTableAlias(), yColumn.getAD_View_Definition().getAD_Table().getTableName());\n \t\t\t\t\taxisSql = new StringBuilder(\"(SELECT \");\n \t\t\t\t\taxisSql.append(\"SUM(\")\n \t\t\t\t\t\t\t.append(axisColumnName)\n \t\t\t\t\t\t\t.append(\") FROM  \")\n-\t\t\t\t\t\t\t.append(ycol.getAD_View_Definition().getAD_Table().getTableName())\n-\t\t\t\t\t\t\t.append(\" WHERE \")\n-\t\t\t\t\t\t\t.append(xTableName)\n-\t\t\t\t\t\t\t.append(\".\")\n-\t\t\t\t\t\t\t.append(fieldKey.getAD_View_Column().getAD_Column()\n-\t\t\t\t\t\t\t\t\t.getColumnName()).append(\"=\")\n-\t\t\t\t\t\t\t.append(fieldKey.getAD_View_Column().getColumnSQL());\n-\n-\t\t\t\t\t\n+\t\t\t\t\t\t\t.append(yColumn.getAD_View_Definition().getAD_Table().getTableName());\n+\t\t\t\t\tif(axisColumnName.equals(columnName)) {\n+\t\t\t\t\t\taxisSql.append(\" WHERE \")\n+\t\t\t\t\t\t\t\t.append(xTableName)\n+\t\t\t\t\t\t\t\t.append(\".\")\n+\t\t\t\t\t\t\t\t.append(fieldKey.getAD_View_Column().getAD_Column()\n+\t\t\t\t\t\t\t\t\t\t.getColumnName()).append(\"=\")\n+\t\t\t\t\t\t\t\t.append(fieldKey.getAD_View_Column().getColumnSQL())\n+\t\t\t\t\t\t\t\t.append(\")\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\taxisSql.append(\")\");\n+\t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\t//\t\n+\t\t\t\tString dislayColumnName = Msg.translate(m_language, columnName);\n \t\t\t\t//\tFor all\n-\t\t\t\tfor (int recordId : getAxisRecordIds(tableName, whereClause)) {\n-\t\t\t\t\tString display = lookup.getDisplay(recordId).trim();\n+\t\t\t\tfor(AxisValue record : getAxisRecordIds(lookup.getLookupInfo())) {\n+\t\t\t\t\tString display = record.getValue().trim();\n \t\t\t\t\tString colName = \"\";\n \t\t\t\t\tString sqlColName = \"\";\n \t\t\t\t\tif(isSQLAgregate) {\n-\t\t\t\t\t\tcolName = display + \"/\" + Msg.translate(m_language, yColumnName);\n-\t\t\t\t\t\tString joinColumn = Msg.translate(m_language, yColumnName);\n+\t\t\t\t\t\tcolName = display + \"/\" + dislayColumnName;\n+\t\t\t\t\t\tString joinColumn = dislayColumnName;\n \t\t\t\t\t\tsqlColName = display + \"/\" + joinColumn;\n \t\t\t\t\t} else { \n \t\t\t\t\t\tcolName = display;\n \t\t\t\t\t\tsqlColName = display;\n \t\t\t\t\t}\n \t\t\t\t\t//\t\n-\t\t\t\t\tStringBuffer select = new StringBuffer(axisSql);\n-\t\t\t\t\tif(isSQLAgregate) {\n-\t\t\t\t\t\tStringBuilder axisWhere = new StringBuilder(\" \");\n-\t\t\t\t\t\taxisWhere.append(getAxisSQLWhere(ycol))\n-\t\t\t\t\t\t\t.append(\" AND \")\n-\t\t\t\t\t\t\t.append(xcol.getAD_View_Definition().getTableAlias()).append(\".\")\n-\t\t\t\t\t\t\t.append(xcol.getAD_Column().getColumnName());\n-\n-\t\t\t\t\t\tselect = new StringBuffer();\n-\t\t\t\t\t\tselect.append(axisSql).append(axisWhere);\n-\t\t\t\t\t\tselect.append(\"=\").append(recordId).append(\")\");\n-\t\t\t\t\t}\n-\t\t\t\t\t\n \t\t\t\t\tMViewColumn viewColumn = new MViewColumn(field.getCtx() , 0 , field.get_TrxName());\n-\t\t\t\t\tMViewColumn.copyValues((MViewColumn) ycol, viewColumn);\n-\t\t\t\t\tviewColumn.setAD_View_Column_ID(ycol.getAD_View_Column_ID());\n-\t\t\t\t\tif(ycol.getAD_Column_ID() > 0) {\n-\t\t\t\t\t\tviewColumn.setAD_Column_ID(ycol.getAD_Column_ID());\n+\t\t\t\t\tMViewColumn.copyValues((MViewColumn) yColumn, viewColumn);\n+\t\t\t\t\tviewColumn.setAD_View_Column_ID(yColumn.getAD_View_Column_ID());\n+\t\t\t\t\tif(yColumn.getAD_Column_ID() > 0) {\n+\t\t\t\t\t\tviewColumn.setAD_Column_ID(yColumn.getAD_Column_ID());\n \t\t\t\t\t}\n-\t\t\t\t\t//\tReplace @Axis_Record_ID@ for record ID\n-\t\t\t\t\tviewColumn.setColumnSQL(select.toString().replaceAll(\"@Axis_Record_ID@\", \"\" + recordId));\n+\t\t\t\t\t//\tReplace @Axis_Record_ID@ for record ID / Value\n+\t\t\t\t\tviewColumn.setColumnSQL(axisSql.toString().replaceAll(\"@Axis_Record_ID@\", \"\" + record.getKey()));\n \t\t\t\t\tviewColumn.setColumnName(\"\\\"\" + sqlColName + \"\\\"\");\n \t\t\t\t\tMBrowseField browseField = new MBrowseField((MBrowse)field.getAD_Browse() , viewColumn);\n \t\t\t\t\tbrowseField.setAD_Browse_ID(field.getAD_Browse_ID());\n@@ -1256,17 +1270,17 @@ public int getAD_Browse_ID() {\n \t\t\t\t\tbrowseField.setIsIdentifier(field.isIdentifier());\n \t\t\t\t\tbrowseField.setIsRange(false);\n \t\t\t\t\tbrowseField.setIsQueryCriteria(false);\n-\t\t\t\t\tbrowseField.setAD_Reference_ID(yReferenceId);\n-\t\t\t\t\tbrowseField.setAD_Reference_Value_ID(yReferenceValueId);\n+\t\t\t\t\tbrowseField.setAD_Reference_ID(referenceId);\n+\t\t\t\t\tbrowseField.setAD_Reference_Value_ID(referenceValueId);\n \t\t\t\t\tbrowseField.setIsKey(false);\n \t\t\t\t\tbrowseField.setIsDisplayed(true);\n \t\t\t\t\tbrowseField.setAxis_Column_ID(field.getAxis_Column_ID());\n \t\t\t\t\tbrowseField.setAxis_Parent_Column_ID(field.getAxis_Parent_Column_ID());\n \t\t\t\t\tbrowseField.setIsReadOnly(field.isReadOnly());\n \t\t\t\t\tbrowseField.setAD_Element_ID(field.getAD_Element_ID());\n-\t\t\t\t\tbrowseField.setColumnNameForSelection(yColumnName + \"_\" + recordId);\n+\t\t\t\t\tbrowseField.setColumnNameForSelection(columnName + \"_\" + record.getKey());\n \t\t\t\t\tlist.add(browseField);\n-\t\t\t\t\tlog.finest(\"Added Column=\" + sqlColName +  \" SQL = \" + select);\n+\t\t\t\t\tlog.finest(\"Added Column=\" + sqlColName +  \" SQL = \" + axisSql);\n \t\t\t\t}\n \t\t\t}\n \n@@ -1282,31 +1296,66 @@ public int getAD_Browse_ID() {\n \t * @param tableWhereClause\n \t * @return\n \t */\n-    private int[] getAxisRecordIds(String tableName, String tableWhereClause) {\n-\n-        StringBuilder whereClause = new StringBuilder();\n-        StringBuilder orderBy = new StringBuilder();\n-        whereClause.append(\"EXISTS (SELECT 1 FROM AD_Table t WHERE t.TableName=? AND t.AD_Table_ID=AD_Column.AD_Table_ID) AND \");\n-        whereClause.append(I_AD_Column.COLUMNNAME_IsIdentifier).append(\"=?\");\n-\n-        List<MColumn> columns =  new Query(Env.getCtx() , I_AD_Column.Table_Name , whereClause.toString(), null)\n-                .setOnlyActiveRecords(true)\n-                .setParameters(tableName, true)\n-                .setOrderBy(I_AD_Column.COLUMNNAME_SeqNo)\n-                .list();\n-\n-        int count = 1;\n-        for (MColumn column : columns)\n-        {\n-            orderBy.append(column.getColumnName());\n-            if (count != columns.size())\n-                orderBy.append(\",\");\n-            count++;\n-        }\n-\n-        return new Query(Env.getCtx(), tableName , tableWhereClause, null)\n-                .setOnlyActiveRecords(true)\n-                .setOrderBy(orderBy.toString()).getIDs();\n+    private List<AxisValue> getAxisRecordIds(MLookupInfo axisLookupInfo) {\n+    \tList<AxisValue> values = new ArrayList<AxisValue>();\n+    \tPreparedStatement pstmt = null;\n+\t\tResultSet rs = null;\n+\t\tString query = new String(axisLookupInfo.Query);\n+\t\tif(!Util.isEmpty(axisLookupInfo.ValidationCode)) {\n+\t\t\tif(query.lastIndexOf(\"FROM \" + axisLookupInfo.TableName + \" WHERE \") > 0) {\n+\t\t\t\tquery = query.replace(\"FROM \" + axisLookupInfo.TableName + \" WHERE \", \"FROM \" + axisLookupInfo.TableName + \" WHERE (\" + axisLookupInfo.ValidationCode + \") AND \");\n+\t\t\t}\n+\t\t}\n+\t\ttry\t{\n+\t\t\tpstmt = DB.prepareStatement (query.toString(), null);\n+\t\t\trs = pstmt.executeQuery();\n+\t\t\twhile (rs.next()) {\n+\t\t\t\tvalues.add(new AxisValue(rs.getObject(axisLookupInfo.KeyColumn.replace(axisLookupInfo.TableName + \".\", \"\")), rs.getString(3)));\n+\t\t\t}\n+\t\t} catch (Exception e)\t{\n+\t\t\tlog.severe(e.getLocalizedMessage());\n+\t\t} finally\t{\n+\t\t\tDB.close(pstmt); \n+\t\t\trs = null; pstmt = null;\n+\t\t}\n+\t\treturn values;\n+    }\n+    \n+    /**\n+     * Stub class for axis value\n+     * @author yamel\n+     *\n+     */\n+    private class AxisValue  {\n+    \tprivate Object key;\n+    \tprivate String value;\n+    \t\n+    \t/**\n+    \t * Default constructor\n+    \t * @param key\n+    \t * @param value\n+    \t */\n+    \tpublic AxisValue(Object key, String value) {\n+    \t\tthis.key = key;\n+    \t\tthis.value = value;\n+    \t}\n+\t\t/**\n+\t\t * @return the key\n+\t\t */\n+\t\tpublic final Object getKey() {\n+\t\t\treturn key;\n+\t\t}\n+\t\t/**\n+\t\t * @return the value\n+\t\t */\n+\t\tpublic final String getValue() {\n+\t\t\treturn value;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \"AxisValue [key=\" + key + \", value=\" + value + \"]\";\n+\t\t}\n     }\n \n     /**"
  }
]
