[
  {
    "sha": "33625eb501f314525f0962b727e69e9ef74181c3",
    "filename": "MuxMediaPlayer/libs/MuxCore.jar",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/muxinc/mux-stats-sdk-mediaplayer/blob/f8d1cf531b111f012db525c5f709fddee78bdd37/MuxMediaPlayer/libs/MuxCore.jar",
    "raw_url": "https://github.com/muxinc/mux-stats-sdk-mediaplayer/raw/f8d1cf531b111f012db525c5f709fddee78bdd37/MuxMediaPlayer/libs/MuxCore.jar",
    "contents_url": "https://api.github.com/repos/muxinc/mux-stats-sdk-mediaplayer/contents/MuxMediaPlayer/libs/MuxCore.jar?ref=f8d1cf531b111f012db525c5f709fddee78bdd37"
  },
  {
    "sha": "96ec2d035230de3b4d560acb65a159f7b1035552",
    "filename": "MuxMediaPlayer/src/main/AndroidManifest.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/muxinc/mux-stats-sdk-mediaplayer/blob/f8d1cf531b111f012db525c5f709fddee78bdd37/MuxMediaPlayer/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/muxinc/mux-stats-sdk-mediaplayer/raw/f8d1cf531b111f012db525c5f709fddee78bdd37/MuxMediaPlayer/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/muxinc/mux-stats-sdk-mediaplayer/contents/MuxMediaPlayer/src/main/AndroidManifest.xml?ref=f8d1cf531b111f012db525c5f709fddee78bdd37",
    "patch": "@@ -1,2 +1,5 @@\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-    package=\"com.mux.stats.sdk.muxstats.mediaplayer\" />\n+    package=\"com.mux.stats.sdk.muxstats.mediaplayer\" >\n+\n+  <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n+</manifest>"
  },
  {
    "sha": "6830ec6d1ba64ca14fad7b170e96759459676f90",
    "filename": "MuxMediaPlayer/src/main/java/com/mux/stats/sdk/muxstats/mediaplayer/MuxStatsMediaPlayer.java",
    "status": "modified",
    "additions": 94,
    "deletions": 3,
    "changes": 97,
    "blob_url": "https://github.com/muxinc/mux-stats-sdk-mediaplayer/blob/f8d1cf531b111f012db525c5f709fddee78bdd37/MuxMediaPlayer/src/main/java/com/mux/stats/sdk/muxstats/mediaplayer/MuxStatsMediaPlayer.java",
    "raw_url": "https://github.com/muxinc/mux-stats-sdk-mediaplayer/raw/f8d1cf531b111f012db525c5f709fddee78bdd37/MuxMediaPlayer/src/main/java/com/mux/stats/sdk/muxstats/mediaplayer/MuxStatsMediaPlayer.java",
    "contents_url": "https://api.github.com/repos/muxinc/mux-stats-sdk-mediaplayer/contents/MuxMediaPlayer/src/main/java/com/mux/stats/sdk/muxstats/mediaplayer/MuxStatsMediaPlayer.java?ref=f8d1cf531b111f012db525c5f709fddee78bdd37",
    "patch": "@@ -1,9 +1,17 @@\n package com.mux.stats.sdk.muxstats.mediaplayer;\n \n+import static android.os.SystemClock.elapsedRealtime;\n+\n import android.content.Context;\n+import android.content.SharedPreferences;\n import android.content.pm.PackageInfo;\n import android.content.pm.PackageManager;\n+import android.media.MediaFormat;\n import android.media.MediaPlayer;\n+import android.media.MediaPlayer.TrackInfo;\n+import android.net.ConnectivityManager;\n+import android.net.NetworkCapabilities;\n+import android.net.NetworkInfo;\n import android.os.Build;\n import android.provider.Settings;\n import android.util.Log;\n@@ -23,6 +31,7 @@\n import com.mux.stats.sdk.muxstats.MuxErrorException;\n import com.mux.stats.sdk.muxstats.MuxStats;\n import java.lang.ref.WeakReference;\n+import java.util.UUID;\n \n public class MuxStatsMediaPlayer extends EventBus implements IPlayerListener,\n     MediaPlayer.OnCompletionListener, MediaPlayer.OnErrorListener,\n@@ -46,6 +55,8 @@\n   protected Integer sourceHeight;\n   protected boolean isBuffering;\n   protected boolean isPlayerPrepared = false;\n+  private int sourceAdvertisedFramerate;\n+  private int sourceAdvertisedBitrate;\n \n   public MuxStatsMediaPlayer(Context ctx, MediaPlayer player, String playerName,\n       CustomerPlayerData customerPlayerData,\n@@ -162,6 +173,16 @@ public Integer getSourceHeight() {\n     return sourceHeight;\n   }\n \n+  @Override\n+  public Integer getSourceAdvertisedBitrate() {\n+    return this.sourceAdvertisedBitrate;\n+  }\n+\n+  @Override\n+  public Float getSourceAdvertisedFramerate() {\n+    return new Float(this.sourceAdvertisedFramerate);\n+  }\n+\n   @Override\n   public Long getSourceDuration() {\n     if (isPlayerPrepared && player != null && player.get() != null) {\n@@ -172,9 +193,9 @@ public Long getSourceDuration() {\n \n   @Override\n   public boolean isPaused() {\n-      if (isPlayerPrepared && player != null && player.get() != null) {\n-          return !player.get().isPlaying();\n-      }\n+    if (isPlayerPrepared && player != null && player.get() != null) {\n+      return !player.get().isPlaying();\n+    }\n     return false;\n   }\n \n@@ -208,6 +229,15 @@ public void onVideoSizeChanged(MediaPlayer mp, int width, int height) {\n \n     sourceWidth = width;\n     sourceHeight = height;\n+\n+    final TrackInfo videoTrackInfo = mp.getTrackInfo()[mp\n+        .getSelectedTrack(TrackInfo.MEDIA_TRACK_TYPE_VIDEO)];\n+    if (videoTrackInfo.getFormat().containsKey(MediaFormat.KEY_FRAME_RATE)) {\n+      sourceAdvertisedFramerate = videoTrackInfo.getFormat().getInteger(MediaFormat.KEY_FRAME_RATE);\n+    }\n+    if (videoTrackInfo.getFormat().containsKey(MediaFormat.KEY_BIT_RATE)) {\n+      sourceAdvertisedBitrate = videoTrackInfo.getFormat().getInteger(MediaFormat.KEY_BIT_RATE);\n+    }\n   }\n \n   // MediaPlayer.OnInfoListener implementation\n@@ -336,13 +366,31 @@ public void setIsPlayerPrepared(boolean isPrepared) {\n \n     private static final String MEDIA_PLAYER_SOFTWARE = \"MediaPlayer\";\n \n+    static final String CONNECTION_TYPE_CELLULAR = \"cellular\";\n+    static final String CONNECTION_TYPE_WIFI = \"wifi\";\n+    static final String CONNECTION_TYPE_WIRED = \"wired\";\n+    static final String CONNECTION_TYPE_OTHER = \"other\";\n+\n+    static final String MUX_DEVICE_ID = \"MUX_DEVICE_ID\";\n+\n+    protected WeakReference<Context> contextRef;\n     private String deviceId;\n     private String appName = \"\";\n     private String appVersion = \"\";\n \n     MuxDevice(Context ctx) {\n+      SharedPreferences sharedPreferences = ctx\n+          .getSharedPreferences(MUX_DEVICE_ID, Context.MODE_PRIVATE);\n+      deviceId = sharedPreferences.getString(MUX_DEVICE_ID, null);\n+      if (deviceId == null) {\n+        deviceId = UUID.randomUUID().toString();\n+        SharedPreferences.Editor editor = sharedPreferences.edit();\n+        editor.putString(MUX_DEVICE_ID, deviceId);\n+        editor.commit();\n+      }\n       deviceId = Settings.Secure.getString(ctx.getContentResolver(),\n           Settings.Secure.ANDROID_ID);\n+      contextRef = new WeakReference<>(ctx);\n       try {\n         PackageInfo pi = ctx.getPackageManager().getPackageInfo(ctx.getPackageName(), 0);\n         appName = pi.packageName;\n@@ -412,6 +460,49 @@ public String getPlayerSoftware() {\n       return MEDIA_PLAYER_SOFTWARE;\n     }\n \n+    @Override\n+    public String getNetworkConnectionType() {\n+      // Checking internet connectivity\n+      Context context = contextRef.get();\n+      if (context == null) {\n+        return null;\n+      }\n+      final ConnectivityManager connectivityMgr = (ConnectivityManager) context\n+          .getSystemService(Context.CONNECTIVITY_SERVICE);\n+      if (connectivityMgr != null) {\n+        final NetworkInfo activeNetwork = connectivityMgr.getActiveNetworkInfo();\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+          final NetworkCapabilities nc = connectivityMgr\n+              .getNetworkCapabilities(connectivityMgr.getActiveNetwork());\n+          if (nc.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)) {\n+            return CONNECTION_TYPE_WIRED;\n+          } else if (nc.hasTransport(NetworkCapabilities.TRANSPORT_WIFI)) {\n+            return CONNECTION_TYPE_WIFI;\n+          } else if (nc.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR)) {\n+            return CONNECTION_TYPE_CELLULAR;\n+          } else {\n+            return CONNECTION_TYPE_OTHER;\n+          }\n+        } else {\n+          if (activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET) {\n+            return CONNECTION_TYPE_WIRED;\n+          } else if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI) {\n+            return CONNECTION_TYPE_WIFI;\n+          } else if (activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE) {\n+            return CONNECTION_TYPE_CELLULAR;\n+          } else {\n+            return CONNECTION_TYPE_OTHER;\n+          }\n+        }\n+      }\n+      return null;\n+    }\n+\n+    @Override\n+    public long getElapsedRealtime() {\n+      return elapsedRealtime();\n+    }\n+\n     @Override\n     public void outputLog(String tag, String msg) {\n       Log.v(tag, msg);"
  }
]
