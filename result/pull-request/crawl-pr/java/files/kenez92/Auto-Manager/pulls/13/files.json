[
  {
    "sha": "07e77da7fcfcdf0fe76d6722b77b9b09350de7ad",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/pom.xml",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/pom.xml",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/pom.xml?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -35,6 +35,18 @@\n             <scope>runtime</scope>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.springdoc</groupId>\n+            <artifactId>springdoc-openapi-ui</artifactId>\n+            <version>1.4.6</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-validator</artifactId>\n+            <version>6.1.5.Final</version>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.projectlombok</groupId>\n             <artifactId>lombok</artifactId>"
  },
  {
    "sha": "cc82e86929b405dc84b8f3ccc21ea0f8bd369678",
    "filename": "src/main/java/pl/car/automanager/boundary/car/CarUseCase.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/boundary/car/CarUseCase.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/boundary/car/CarUseCase.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/boundary/car/CarUseCase.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -0,0 +1,135 @@\n+package pl.car.automanager.boundary.car;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Value;\n+import pl.car.automanager.commons.enums.FuelEnum;\n+import pl.car.automanager.persistence.entity.Car;\n+import pl.car.automanager.persistence.entity.Expense;\n+import pl.car.automanager.persistence.entity.User;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface CarUseCase {\n+    List<Car> findAll();\n+\n+    Optional<Car> findById(Long id);\n+\n+    Car addCar(CreateCarCommand command);\n+\n+    UpdateCarResponse updateCar(UpdateCarCommand command);\n+\n+    UpdateCarResponse addRefuelingExpense(CreateExpenseRefuelingCommand command);\n+\n+    void removeById(Long id);\n+\n+    UpdateCarResponse addRepairExpense(CreateExpenseRepairCommand command);\n+\n+    UpdateCarResponse addInsuranceExpense(CreateExpenseInsuranceCommand command);\n+\n+    UpdateCarResponse addMaintenanceExpense(CreateExpenseMaintenanceCommand command);\n+\n+    UpdateCarResponse addRegisterExpense(CreateExpenseRegisterCommand command);\n+\n+    UpdateCarResponse addVulcanizationExpense(CreateExpenseVulcanizationCommand command);\n+\n+    @Value\n+    class CreateCarCommand {\n+        String brand;\n+        String model;\n+        String vin;\n+        String engine;\n+        Integer amountOfDoors;\n+        FuelEnum fuel;\n+        User user;\n+        Expense expense;\n+    }\n+\n+    @Value\n+    @Builder\n+    @AllArgsConstructor\n+    class UpdateCarCommand {\n+        Long id;\n+        String brand;\n+        String model;\n+        String vin;\n+        String engine;\n+        Integer amountOfDoors;\n+        FuelEnum fuel;\n+    }\n+\n+    @Value\n+    @Builder\n+    @AllArgsConstructor\n+    class CreateExpenseRefuelingCommand {\n+        Long id;\n+        LocalDate date;\n+        BigDecimal cost;\n+        Double liters;\n+    }\n+\n+    @Value\n+    @Builder\n+    @AllArgsConstructor\n+    class CreateExpenseMaintenanceCommand{\n+        Long id;\n+        LocalDate date;\n+        BigDecimal cost;\n+        String distance;\n+        LocalDate nextServiceDate;\n+    }\n+\n+    @Value\n+    @Builder\n+    @AllArgsConstructor\n+    class CreateExpenseRepairCommand{\n+        Long id;\n+        LocalDate date;\n+        BigDecimal cost;\n+        String description;\n+    }\n+\n+    @Value\n+    @Builder\n+    @AllArgsConstructor\n+    class CreateExpenseInsuranceCommand{\n+        Long id;\n+        LocalDate date;\n+        BigDecimal cost;\n+        LocalDate start;\n+        LocalDate end;\n+        String description;\n+    }\n+\n+    @Value\n+    @Builder\n+    @AllArgsConstructor\n+    class CreateExpenseRegisterCommand{\n+        Long id;\n+        LocalDate date;\n+        BigDecimal cost;\n+        LocalDate next;\n+        String faults;\n+    }\n+\n+    @Value\n+    @Builder\n+    @AllArgsConstructor\n+    class CreateExpenseVulcanizationCommand{\n+        Long id;\n+        LocalDate date;\n+        BigDecimal cost;\n+        String description;\n+    }\n+\n+    @Value\n+    class UpdateCarResponse{\n+        public static UpdateCarResponse SUCCESS = new UpdateCarResponse(true, Collections.emptyList());\n+        boolean success;\n+        List<String> errors;\n+    }\n+}"
  },
  {
    "sha": "99be18ff09cc8566203b745bb14b93a5d62c66f1",
    "filename": "src/main/java/pl/car/automanager/controller/CarController.java",
    "status": "added",
    "additions": 342,
    "deletions": 0,
    "changes": 342,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/controller/CarController.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/controller/CarController.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/controller/CarController.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -0,0 +1,342 @@\n+package pl.car.automanager.controller;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.server.ResponseStatusException;\n+import pl.car.automanager.boundary.car.CarUseCase;\n+import pl.car.automanager.commons.enums.FuelEnum;\n+import pl.car.automanager.persistence.entity.Car;\n+import pl.car.automanager.persistence.entity.Expense;\n+import pl.car.automanager.persistence.entity.User;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.*;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+import static org.springframework.http.HttpStatus.*;\n+import static pl.car.automanager.boundary.car.CarUseCase.*;\n+import static pl.car.automanager.commons.enums.FuelEnum.PETROL;\n+\n+@RequestMapping(\"/car\")\n+@RestController\n+@AllArgsConstructor\n+public class CarController {\n+    private final CarUseCase carUseCase;\n+\n+    @GetMapping\n+    @ResponseStatus(OK)\n+    public List<Car> getAllCars() {\n+        return carUseCase.findAll();\n+    }\n+\n+    @GetMapping(\"/{id}\")\n+    public ResponseEntity<Car> getCarById(@PathVariable Long id) {\n+        return carUseCase\n+                .findById(id)\n+                .map(ResponseEntity::ok)\n+                .orElse(ResponseEntity.notFound().build());\n+    }\n+\n+    @PostMapping\n+    @ResponseStatus(CREATED)\n+    public ResponseEntity<Car> addCar(@Valid @RequestBody RestCarCommand command) {\n+        Car car = carUseCase.addCar(command.toCreateCarCommand());\n+        return ResponseEntity.status(CREATED).build();\n+    }\n+\n+    @PutMapping(\"/{id}\")\n+    @ResponseStatus(ACCEPTED)\n+    public void updateCar(@PathVariable Long id, @RequestBody RestCarCommand command) {\n+        UpdateCarResponse response = carUseCase.updateCar(command.toUpdateCarCommand(id));\n+        if (!response.isSuccess()) {\n+            String msg = String.join(\", \", response.getErrors());\n+            throw new ResponseStatusException(BAD_REQUEST, msg);\n+        }\n+    }\n+\n+    @PutMapping(\"/{id}/insurance\")\n+    @ResponseStatus(ACCEPTED)\n+    public void insuranceExpense(@PathVariable Long id, @Valid @RequestBody RestInsuranceCommand command) {\n+        UpdateCarResponse response = carUseCase.addInsuranceExpense(command.toCreateInsurance(id));\n+        if (!response.isSuccess()) {\n+            String msg = String.join(\", \", response.getErrors());\n+            throw new ResponseStatusException(BAD_REQUEST, msg);\n+        }\n+    }\n+\n+    @PutMapping(\"/{id}/maintenance\")\n+    @ResponseStatus(ACCEPTED)\n+    public void maintenanceExpense(@PathVariable Long id, @Valid @RequestBody RestMaintenanceCommand command) {\n+        UpdateCarResponse response = carUseCase.addMaintenanceExpense(command.toCreateMaintenance(id));\n+        if (!response.isSuccess()) {\n+            String msg = String.join(\", \", response.getErrors());\n+            throw new ResponseStatusException(BAD_REQUEST, msg);\n+        }\n+    }\n+\n+    @PutMapping(\"/{id}/refuel\")\n+    @ResponseStatus(ACCEPTED)\n+    public void refuelingExpense(@PathVariable Long id, @Valid @RequestBody RestRefuelingCommand command) {\n+        UpdateCarResponse response = carUseCase.addRefuelingExpense(command.toCreateRefueling(id));\n+        if (!response.isSuccess()) {\n+            String msg = String.join(\", \", response.getErrors());\n+            throw new ResponseStatusException(BAD_REQUEST, msg);\n+        }\n+    }\n+\n+    @PutMapping(\"/{id}/register\")\n+    @ResponseStatus(ACCEPTED)\n+    public void registerExpense(@PathVariable Long id, @Valid @RequestBody RestRegisterCommand command) {\n+        UpdateCarResponse response = carUseCase.addRegisterExpense(command.toCreateRegister(id));\n+        if (!response.isSuccess()) {\n+            String msg = String.join(\", \", response.getErrors());\n+            throw new ResponseStatusException(BAD_REQUEST, msg);\n+        }\n+    }\n+\n+    @PutMapping(\"/{id}/repair\")\n+    @ResponseStatus(ACCEPTED)\n+    public void repairExpense(@PathVariable Long id, @Valid @RequestBody RestRepairCommand command) {\n+        UpdateCarResponse response = carUseCase.addRepairExpense(command.toCreateRepair(id));\n+        if (!response.isSuccess()) {\n+            String msg = String.join(\", \", response.getErrors());\n+            throw new ResponseStatusException(BAD_REQUEST, msg);\n+        }\n+    }\n+\n+    @PutMapping(\"/{id}/vulcanization\")\n+    @ResponseStatus(ACCEPTED)\n+    public void vulcanizationExpense(@PathVariable Long id, @Valid @RequestBody RestVulcanizationCommand command) {\n+        UpdateCarResponse response = carUseCase.addVulcanizationExpense(command.toCreateVulcanization(id));\n+        if (!response.isSuccess()) {\n+            String msg = String.join(\", \", response.getErrors());\n+            throw new ResponseStatusException(BAD_REQUEST, msg);\n+        }\n+    }\n+\n+    @DeleteMapping(\"/{id}\")\n+    @ResponseStatus(NO_CONTENT)\n+    public void deleteCar(@PathVariable Long id) {\n+        carUseCase.removeById(id);\n+    }\n+\n+\n+    @Data\n+    private static class RestCarCommand {\n+        @NotBlank\n+        private String brand;\n+\n+        @NotBlank\n+        private String model;\n+\n+        @NotBlank\n+        private String vin;\n+\n+        @NotBlank\n+        private String engine;\n+\n+        @NotNull\n+        @Positive\n+        private Integer amountOfDoors;\n+\n+        @NotNull\n+        private FuelEnum fuel;\n+\n+        UpdateCarCommand toUpdateCarCommand(Long id) {\n+            return new UpdateCarCommand(id, brand, model, vin, engine, amountOfDoors, fuel);\n+        }\n+\n+        /*\n+         * this method has createUser() as parameter, necessary only for correct compilation\n+         * we will use CurrentUser which will be with current session\n+         * */\n+        CreateCarCommand toCreateCarCommand() {\n+            return new CreateCarCommand(brand, model, vin, engine, amountOfDoors, PETROL, createUser(), createExpense());\n+        }\n+\n+        private Expense createExpense() {\n+            return Expense.builder()\n+                    .summaryCost(BigDecimal.ZERO)\n+                    .build();\n+        }\n+\n+        /*\n+         * this method is necessary only for correct compilation\n+         * we will use CurrentUser which will be with current session\n+         * */\n+        private User createUser() {\n+            return User.builder()\n+                    .email(\"user@com.pl\")\n+                    .firstName(\"Jan\")\n+                    .login(\"jan\")\n+                    .password(\"password\")\n+                    .build();\n+        }\n+    }\n+\n+    @Data\n+    private static class RestInsuranceCommand {\n+        @NotNull @PastOrPresent\n+        LocalDate date;\n+\n+        @DecimalMin(\"0.00\") @Positive\n+        BigDecimal cost;\n+\n+        @NotNull @PastOrPresent\n+        LocalDate start;\n+\n+        @NotNull @Future\n+        LocalDate end;\n+\n+        @NotBlank\n+        String description;\n+\n+        CreateExpenseInsuranceCommand toCreateInsurance(Long id) {\n+            return new CreateExpenseInsuranceCommand(id, date, cost, start, end, description);\n+        }\n+    }\n+\n+    @Data\n+    private static class RestMaintenanceCommand {\n+\n+        @NotNull @PastOrPresent\n+        LocalDate date;\n+\n+        @DecimalMin(\"0.00\") @Positive\n+        BigDecimal cost;\n+\n+        @NotBlank\n+        String distance;\n+\n+        @NotNull @Future\n+        LocalDate nextServiceDate;\n+\n+        CreateExpenseMaintenanceCommand toCreateMaintenance(Long id) {\n+            return new CreateExpenseMaintenanceCommand(id, date, cost, distance, nextServiceDate);\n+        }\n+\n+    }\n+\n+    @Data\n+    private static class RestRefuelingCommand {\n+\n+        @NotNull @PastOrPresent\n+        LocalDate date;\n+\n+        @DecimalMin(\"0.00\") @Positive\n+        BigDecimal cost;\n+\n+        @NotNull\n+        Double liters;\n+\n+        CreateExpenseRefuelingCommand toCreateRefueling(Long id) {\n+            return new CreateExpenseRefuelingCommand(id, date, cost, liters);\n+        }\n+\n+    }\n+\n+    @Data\n+    private static class RestRegisterCommand {\n+\n+        @NotNull @PastOrPresent\n+        LocalDate date;\n+\n+        @DecimalMin(\"0.00\") @Positive\n+        BigDecimal cost;\n+\n+        @NotNull @Future\n+        LocalDate next;\n+\n+        @NotBlank\n+        String faults;\n+\n+        CreateExpenseRegisterCommand toCreateRegister(Long id) {\n+            return new CreateExpenseRegisterCommand(id, date, cost, next, faults);\n+        }\n+\n+    }\n+\n+    @Data\n+    private static class RestRepairCommand {\n+\n+        @NotNull @PastOrPresent\n+        LocalDate date;\n+\n+        @DecimalMin(\"0.00\") @Positive\n+        BigDecimal cost;\n+\n+        @NotBlank\n+        String description;\n+\n+        CreateExpenseRepairCommand toCreateRepair(Long id) {\n+            return new CreateExpenseRepairCommand(id, date, cost, description);\n+        }\n+\n+    }\n+\n+    @Data\n+    private static class RestVulcanizationCommand {\n+\n+        @NotNull @PastOrPresent\n+        LocalDate date;\n+\n+        @DecimalMin(\"0.00\") @Positive\n+        BigDecimal cost;\n+\n+        @NotBlank\n+        String description;\n+\n+        CreateExpenseVulcanizationCommand toCreateVulcanization(Long id) {\n+            return new CreateExpenseVulcanizationCommand(id, date, cost, description);\n+        }\n+\n+    }\n+\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "1f46ddf9c49a5c486eadfcb81bd0d8dbedcf62ba",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/Car.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/Car.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/Car.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/Car.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -1,5 +1,6 @@\n package pl.car.automanager.persistence.entity;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -39,9 +40,10 @@\n     @Column(name = \"FUEL\", nullable = false)\n     private FuelEnum fuel;\n \n-    @ManyToOne\n+    @ManyToOne(cascade = CascadeType.ALL)\n+    @JsonIgnoreProperties(\"cars\")\n     private User user;\n \n-    @OneToOne\n+    @OneToOne(cascade = CascadeType.ALL)\n     private Expense expense;\n }"
  },
  {
    "sha": "dd70a5cae0c1621cbbae1a79ef213cba65eb22f4",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/Expense.java",
    "status": "modified",
    "additions": 38,
    "deletions": 12,
    "changes": 50,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/Expense.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/Expense.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/Expense.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -1,14 +1,11 @@\n package pl.car.automanager.persistence.entity;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Builder;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import lombok.*;\n import pl.car.automanager.persistence.entity.expanses.*;\n \n import javax.persistence.*;\n import java.math.BigDecimal;\n-import java.time.LocalDate;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -24,74 +21,103 @@\n     @Column(name = \"ID\")\n     private Long id;\n \n-    private LocalDate date;\n-\n-    private BigDecimal cost;\n+    @Column\n+    private BigDecimal summaryCost;\n \n     @OneToMany(\n             cascade = CascadeType.ALL,\n             targetEntity = Repair.class,\n             mappedBy = \"expense\",\n             fetch = FetchType.LAZY)\n+    @Builder.Default\n+    @JsonIgnoreProperties(\"expense\")\n     private List<Repair> repairs = new ArrayList<>();\n \n     @OneToMany(\n             cascade = CascadeType.ALL,\n             targetEntity = Insurance.class,\n             mappedBy = \"expense\",\n             fetch = FetchType.LAZY)\n+    @Builder.Default\n+    @JsonIgnoreProperties(\"expense\")\n     private List<Insurance> insurances = new ArrayList<>();\n \n     @OneToMany(\n             cascade = CascadeType.ALL,\n             targetEntity = Refueling.class,\n             mappedBy = \"expense\",\n             fetch = FetchType.LAZY)\n+    @Builder.Default\n+    @JsonIgnoreProperties(\"expense\")\n     private List<Refueling> refueling = new ArrayList<>();\n \n     @OneToMany(\n             cascade = CascadeType.ALL,\n             targetEntity = Registration.class,\n             mappedBy = \"expense\",\n             fetch = FetchType.LAZY)\n+    @Builder.Default\n+    @JsonIgnoreProperties(\"expense\")\n     private List<Registration> registrations = new ArrayList<>();\n \n     @OneToMany(\n             cascade = CascadeType.ALL,\n-            targetEntity = Service.class,\n+            targetEntity = Maintenance.class,\n             mappedBy = \"expense\",\n             fetch = FetchType.LAZY)\n-    private List<Service> services = new ArrayList<>();\n+    @Builder.Default\n+    @JsonIgnoreProperties(\"expense\")\n+    private List<Maintenance> maintenances = new ArrayList<>();\n \n \n     @OneToMany(\n             cascade = CascadeType.ALL,\n             targetEntity = Vulcanization.class,\n             mappedBy = \"expense\",\n             fetch = FetchType.LAZY)\n+    @Builder.Default\n+    @JsonIgnoreProperties(\"expense\")\n     private List<Vulcanization> vulcanization = new ArrayList<>();\n \n     public void addRepair(Repair repair) {\n         repairs.add(repair);\n+        if(repair.getCost() != null){\n+            summaryCost = repair.getCost().add(getSummaryCost());\n+        }\n     }\n \n     public void addInsurance(Insurance insurance) {\n         insurances.add(insurance);\n+        if (insurance.getCost() != null) {\n+            summaryCost = insurance.getCost().add(getSummaryCost());\n+        }\n     }\n \n     public void addRefueling(Refueling refueling) {\n         this.refueling.add(refueling);\n+        if(refueling.getCost() != null){\n+            summaryCost = refueling.getCost().add(getSummaryCost());\n+        }\n     }\n \n     public void addRegistration(Registration registration) {\n         registrations.add(registration);\n+        if(registration.getCost() != null) {\n+            summaryCost = registration.getCost().add(getSummaryCost());\n+        }\n     }\n \n-    public void addRService(Service service) {\n-        services.add(service);\n+    public void addMaintenance(Maintenance maintenance) {\n+        maintenances.add(maintenance);\n+        if(maintenance.getCost() != null) {\n+            summaryCost = maintenance.getCost().add(getSummaryCost());\n+        }\n     }\n \n     public void addVulcanization(Vulcanization vulcanization) {\n         this.vulcanization.add(vulcanization);\n+        if(vulcanization.getCost() != null) {\n+            summaryCost = vulcanization.getCost().add(getSummaryCost());\n+        }\n     }\n }"
  },
  {
    "sha": "b634c87266a7e055244930d9c9c0802cfd65a7ca",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/User.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/User.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/User.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/User.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -40,4 +40,11 @@\n             mappedBy = \"user\")\n     private List<Car> cars = new ArrayList<>();\n \n+    public void addCar(Car car){\n+        if(cars == null){\n+            cars = new ArrayList<>();\n+        }\n+        cars.add(car);\n+    }\n+\n }"
  },
  {
    "sha": "761418c39a0ca50d9fb63e4d97a45b7f1045a795",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/expanses/Insurance.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Insurance.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Insurance.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/expanses/Insurance.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -4,6 +4,7 @@\n import pl.car.automanager.persistence.entity.Expense;\n \n import javax.persistence.*;\n+import java.math.BigDecimal;\n import java.time.LocalDate;\n \n @Getter\n@@ -20,10 +21,19 @@\n     @Column(name = \"ID\")\n     private Long id;\n \n+    @Column()\n+    private LocalDate date;\n+\n+    @Column\n+    private BigDecimal cost;\n+\n+    @Column\n     private LocalDate startDate;\n \n+    @Column\n     private LocalDate endDate;\n \n+    @Column\n     private String description;\n \n     @ManyToOne"
  },
  {
    "sha": "81a1d06bbd3dd17c4944265487d61fa18038064c",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/expanses/Maintenance.java",
    "status": "renamed",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Maintenance.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Maintenance.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/expanses/Maintenance.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -4,6 +4,7 @@\n import pl.car.automanager.persistence.entity.Expense;\n \n import javax.persistence.*;\n+import java.math.BigDecimal;\n import java.time.LocalDate;\n \n @Getter\n@@ -12,16 +13,24 @@\n @NoArgsConstructor\n @AllArgsConstructor\n @Entity\n-@Table(name = \"SERVICE\")\n-public class Service {\n+@Table(name = \"MAINTENANCE\")\n+public class Maintenance {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     @Column(name = \"ID\")\n     private Long id;\n \n+    @Column\n+    private LocalDate date;\n+\n+    @Column\n+    private BigDecimal cost;\n+\n+    @Column\n     private String distance;\n \n+    @Column\n     private LocalDate nextServiceDate;\n \n     @ManyToOne",
    "previous_filename": "src/main/java/pl/car/automanager/persistence/entity/expanses/Service.java"
  },
  {
    "sha": "8e143524ac9de3deacaf89421b15569ada67e135",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/expanses/Refueling.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Refueling.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Refueling.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/expanses/Refueling.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -4,21 +4,30 @@\n import pl.car.automanager.persistence.entity.Expense;\n \n import javax.persistence.*;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n \n @Getter\n @Setter\n @Builder\n @NoArgsConstructor\n @AllArgsConstructor\n @Entity\n-@Table(name = \"REGISTRATION\")\n+@Table(name = \"REFUELING\")\n public class Refueling {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     @Column(name = \"ID\")\n     private Long id;\n \n+    @Column\n+    private LocalDate date;\n+\n+    @Column\n+    private BigDecimal cost;\n+\n+    @Column\n     private Double liters;\n \n     @ManyToOne"
  },
  {
    "sha": "3846d4af22e5ec3192cc669caee545a24c6c4905",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/expanses/Registration.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Registration.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Registration.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/expanses/Registration.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -4,6 +4,7 @@\n import pl.car.automanager.persistence.entity.Expense;\n \n import javax.persistence.*;\n+import java.math.BigDecimal;\n import java.time.LocalDate;\n \n @Getter\n@@ -20,8 +21,16 @@\n     @Column(name = \"ID\")\n     private Long id;\n \n+    @Column\n+    private LocalDate date;\n+\n+    @Column\n+    private BigDecimal cost;\n+\n+    @Column\n     private LocalDate nextRegDate;\n \n+    @Column\n     private String faults;\n \n     @ManyToOne"
  },
  {
    "sha": "80f683bc27b0ba382d3ef005c59368bda513f19c",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/expanses/Repair.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Repair.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Repair.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/expanses/Repair.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -4,6 +4,8 @@\n import pl.car.automanager.persistence.entity.Expense;\n \n import javax.persistence.*;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n \n @Getter\n @Setter\n@@ -19,6 +21,13 @@\n     @Column(name = \"ID\")\n     private Long id;\n \n+    @Column\n+    private LocalDate date;\n+\n+    @Column\n+    private BigDecimal cost;\n+\n+    @Column\n     private String repairDescription;\n \n     @ManyToOne"
  },
  {
    "sha": "8b6ee847cfe8c22aee59ddd0719dba7654aee56b",
    "filename": "src/main/java/pl/car/automanager/persistence/entity/expanses/Vulcanization.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Vulcanization.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/entity/expanses/Vulcanization.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/entity/expanses/Vulcanization.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -4,6 +4,8 @@\n import pl.car.automanager.persistence.entity.Expense;\n \n import javax.persistence.*;\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n \n @Getter\n @Setter\n@@ -19,6 +21,13 @@\n     @Column(name = \"ID\")\n     private Long id;\n \n+    @Column\n+    private LocalDate date;\n+\n+    @Column\n+    private BigDecimal cost;\n+\n+    @Column\n     private String description;\n \n     @ManyToOne"
  },
  {
    "sha": "417769d237bf42692ceb307e3c8198d3008b5e36",
    "filename": "src/main/java/pl/car/automanager/persistence/repository/MaintenanceRepository.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/repository/MaintenanceRepository.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/persistence/repository/MaintenanceRepository.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/repository/MaintenanceRepository.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -0,0 +1,7 @@\n+package pl.car.automanager.persistence.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import pl.car.automanager.persistence.entity.expanses.Maintenance;\n+\n+public interface MaintenanceRepository extends JpaRepository<Maintenance, Long> {\n+}"
  },
  {
    "sha": "70d50472157d5b5d995975a08d858a84778af393",
    "filename": "src/main/java/pl/car/automanager/persistence/repository/ServiceRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/c970b8a6efa420029e9571bfc97273671fc6c35d/src/main/java/pl/car/automanager/persistence/repository/ServiceRepository.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/c970b8a6efa420029e9571bfc97273671fc6c35d/src/main/java/pl/car/automanager/persistence/repository/ServiceRepository.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/persistence/repository/ServiceRepository.java?ref=c970b8a6efa420029e9571bfc97273671fc6c35d",
    "patch": "@@ -1,7 +0,0 @@\n-package pl.car.automanager.persistence.repository;\n-\n-import org.springframework.data.jpa.repository.JpaRepository;\n-import pl.car.automanager.persistence.entity.expanses.Service;\n-\n-public interface ServiceRepository extends JpaRepository<Service, Long> {\n-}"
  },
  {
    "sha": "36412c5070c4b666f0ec9a7f8b0d0f76c11a9b5a",
    "filename": "src/main/java/pl/car/automanager/service/CarService.java",
    "status": "added",
    "additions": 222,
    "deletions": 0,
    "changes": 222,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/service/CarService.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/main/java/pl/car/automanager/service/CarService.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/main/java/pl/car/automanager/service/CarService.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -0,0 +1,222 @@\n+package pl.car.automanager.service;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import pl.car.automanager.boundary.car.CarUseCase;\n+import pl.car.automanager.persistence.entity.Car;\n+import pl.car.automanager.persistence.entity.Expense;\n+import pl.car.automanager.persistence.entity.expanses.*;\n+import pl.car.automanager.persistence.repository.CarRepository;\n+\n+import javax.transaction.Transactional;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+@RequiredArgsConstructor\n+class CarService implements CarUseCase {\n+\n+    @Autowired\n+    private final CarRepository carRepository;\n+\n+    @Override\n+    public List<Car> findAll() {\n+        return carRepository.findAll();\n+    }\n+\n+    @Override\n+    public Optional<Car> findById(Long id) {\n+        return carRepository.findById(id);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public Car addCar(CreateCarCommand command) {\n+        return carRepository.save(toCar(command));\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UpdateCarResponse updateCar(UpdateCarCommand command) {\n+        return carRepository\n+                .findById(command.getId())\n+                .map(car -> {\n+                    updateFields(command, car);\n+                    return UpdateCarResponse.SUCCESS;\n+                })\n+                .orElseGet(() -> new UpdateCarResponse(\n+                        false, Collections.singletonList(\"Car not found\")));\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UpdateCarResponse addInsuranceExpense(CreateExpenseInsuranceCommand command) {\n+        return carRepository.findById(command.getId())\n+                .map(car -> {\n+                    car.getExpense().addInsurance(toInsurance(command,car.getExpense()));\n+                    return UpdateCarResponse.SUCCESS;\n+                })\n+                .orElseGet(() -> new UpdateCarResponse(false, Collections.singletonList(\"Car not found\")));\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UpdateCarResponse addMaintenanceExpense(CreateExpenseMaintenanceCommand command) {\n+        return carRepository.findById(command.getId())\n+                .map(car -> {\n+                    car.getExpense().addMaintenance(toMaintenance(command,car.getExpense()));\n+                    return UpdateCarResponse.SUCCESS;\n+                })\n+                .orElseGet(() -> new UpdateCarResponse(false, Collections.singletonList(\"Car not found\")));\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UpdateCarResponse addRefuelingExpense(CreateExpenseRefuelingCommand command) {\n+        return carRepository\n+                .findById(command.getId())\n+                .map(car -> {\n+                    car.getExpense().addRefueling(toRefueling(command, car.getExpense()));\n+                    return UpdateCarResponse.SUCCESS;\n+                })\n+                .orElseGet(() -> new UpdateCarResponse(\n+                        false, Collections.singletonList(\"Car not found\")));\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UpdateCarResponse addRegisterExpense(CreateExpenseRegisterCommand command) {\n+        return carRepository\n+                .findById(command.getId())\n+                .map(car -> {\n+                    car.getExpense().addRegistration(toRegister(command, car.getExpense()));\n+                    return UpdateCarResponse.SUCCESS;\n+                })\n+                .orElseGet(() -> new UpdateCarResponse(\n+                        false, Collections.singletonList(\"Car not found\")));\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UpdateCarResponse addVulcanizationExpense(CreateExpenseVulcanizationCommand command) {\n+        return carRepository\n+                .findById(command.getId())\n+                .map(car -> {\n+                    car.getExpense().addVulcanization(toVulcanization(command, car.getExpense()));\n+                    return UpdateCarResponse.SUCCESS;\n+                })\n+                .orElseGet(() -> new UpdateCarResponse(\n+                        false, Collections.singletonList(\"Car not found\")));\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UpdateCarResponse addRepairExpense(CreateExpenseRepairCommand command) {\n+        return carRepository.findById(command.getId())\n+                .map(car -> {\n+                    car.getExpense().addRepair(toRepair(command,car.getExpense()));\n+                    return UpdateCarResponse.SUCCESS;\n+                })\n+                .orElseGet(() -> new UpdateCarResponse(false, Collections.singletonList(\"Car not found\")));\n+    }\n+\n+    @Override\n+    public void removeById(Long id) {\n+        carRepository.findById(id).ifPresent(\n+                carRepository::delete);\n+    }\n+\n+    private Car toCar(CreateCarCommand command) {\n+        return Car.builder()\n+                .brand(command.getBrand())\n+                .model(command.getModel())\n+                .vin(command.getVin())\n+                .engine(command.getEngine())\n+                .amountOfDoors(command.getAmountOfDoors())\n+                .fuel(command.getFuel())\n+                .expense(command.getExpense())\n+                .user(command.getUser())\n+                .build();\n+    }\n+\n+    private Insurance toInsurance(CreateExpenseInsuranceCommand command, Expense expense) {\n+        return Insurance.builder()\n+                .date(command.getDate())\n+                .cost(command.getCost())\n+                .startDate(command.getStart())\n+                .endDate(command.getEnd())\n+                .description(command.getDescription())\n+                .expense(expense)\n+                .build();\n+    }\n+\n+    private Maintenance toMaintenance(CreateExpenseMaintenanceCommand command, Expense expense) {\n+        return Maintenance.builder()\n+                .date(command.getDate())\n+                .cost(command.getCost())\n+                .distance(command.getDistance())\n+                .nextServiceDate(command.getNextServiceDate())\n+                .expense(expense)\n+                .build();\n+    }\n+\n+    private Refueling toRefueling(CreateExpenseRefuelingCommand command, Expense expense) {\n+        return Refueling.builder()\n+                .date(command.getDate())\n+                .cost(command.getCost())\n+                .liters(command.getLiters())\n+                .expense(expense)\n+                .build();\n+    }\n+\n+    private Registration toRegister(CreateExpenseRegisterCommand command, Expense expense) {\n+        return Registration.builder()\n+                .date(command.getDate())\n+                .cost(command.getCost())\n+                .nextRegDate(command.getDate())\n+                .faults(command.getFaults())\n+                .expense(expense)\n+                .build();\n+    }\n+\n+    private Repair toRepair(CreateExpenseRepairCommand command, Expense expense) {\n+        return Repair.builder()\n+                .date(command.getDate())\n+                .cost(command.getCost())\n+                .repairDescription(command.getDescription())\n+                .expense(expense)\n+                .build();\n+    }\n+\n+    private Vulcanization toVulcanization(CreateExpenseVulcanizationCommand command, Expense expense) {\n+        return Vulcanization.builder()\n+                .date(command.getDate())\n+                .cost(command.getCost())\n+                .description(command.getDescription())\n+                .expense(expense)\n+                .build();\n+    }\n+\n+    private void updateFields(UpdateCarCommand command, Car car) {\n+        if (command.getBrand() != null) {\n+            car.setBrand(command.getBrand());\n+        }\n+        if (command.getModel() != null) {\n+            car.setModel(command.getModel());\n+        }\n+        if (command.getVin() != null) {\n+            car.setVin(command.getVin());\n+        }\n+        if (command.getEngine() != null) {\n+            car.setEngine(command.getEngine());\n+        }\n+        if (command.getAmountOfDoors() != null) {\n+            car.setAmountOfDoors(command.getAmountOfDoors());\n+        }\n+        if (command.getFuel() != null) {\n+            car.setFuel(command.getFuel());\n+        }\n+    }\n+}"
  },
  {
    "sha": "dd93e6f9652d1ace6081113b004c5811298e1e80",
    "filename": "src/test/java/pl/car/automanager/controller/CarControllerTest.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/controller/CarControllerTest.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/controller/CarControllerTest.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/controller/CarControllerTest.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -0,0 +1,61 @@\n+package pl.car.automanager.controller;\n+\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+import pl.car.automanager.boundary.car.CarUseCase;\n+import pl.car.automanager.persistence.entity.Car;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+\n+@WebMvcTest(CarController.class)\n+class CarControllerTest {\n+\n+    @MockBean\n+    CarUseCase carUseCase;\n+\n+    @Autowired\n+    MockMvc mvc;\n+\n+    @Test\n+    public void shouldAddCar() throws Exception {\n+\n+        JSONObject object = new JSONObject()\n+                .put(\"brand\", \"Opel\")\n+                .put(\"model\", \"Astra\")\n+                .put(\"vin\",\"DSSAD556654\")\n+                .put(\"engine\",\"1450\")\n+                .put(\"fuel\",\"PETROL\");\n+\n+        mvc.perform(post(\"/car\")\n+                .content(object.toString())\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(MockMvcResultMatchers.status().isCreated());\n+    }\n+\n+    @Test\n+    public void shouldGetAllCars() throws Exception {\n+        Car fordCar = new Car();\n+        Car fiatCar = new Car();\n+        when(carUseCase.findAll()).thenReturn(List.of(fordCar, fiatCar));\n+\n+        mvc.perform(get(\"/car\"))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", hasSize(2)));\n+    }\n+}"
  },
  {
    "sha": "2dced9191eda5783daa109e3de249f081713fb80",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/CarTestSuite.java",
    "status": "modified",
    "additions": 5,
    "deletions": 10,
    "changes": 15,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/CarTestSuite.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/CarTestSuite.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/CarTestSuite.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -12,8 +12,6 @@\n import pl.car.automanager.persistence.repository.CarRepository;\n \n import java.math.BigDecimal;\n-import java.time.LocalDate;\n-import java.util.Collection;\n import java.util.Collections;\n \n @ExtendWith(SpringExtension.class)\n@@ -37,9 +35,8 @@ public void testFindById() {\n     @Test\n     public void testFindByIdShouldThrowException() {\n         //Given\n-        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n-            carRepository.findById(0L).orElseThrow(IllegalArgumentException::new);\n-        });\n+        Assertions.assertThrows(IllegalArgumentException.class, () ->\n+            carRepository.findById(0L).orElseThrow(IllegalArgumentException::new));\n     }\n \n     @Test\n@@ -58,9 +55,8 @@ public void testAddCarShouldThrowException() {\n         Car car = createCar();\n         car.setBrand(null);\n         //When & Then\n-        Assertions.assertThrows(DataIntegrityViolationException.class, () -> {\n-            carRepository.save(car);\n-        });\n+        Assertions.assertThrows(DataIntegrityViolationException.class, () ->\n+            carRepository.save(car));\n     }\n \n     @Test\n@@ -129,8 +125,7 @@ private User createUser() {\n \n     private Expense createExpense() {\n         return Expense.builder()\n-                .cost(new BigDecimal(\"1500\"))\n-                .date(LocalDate.now())\n+                .summaryCost(new BigDecimal(\"1500\"))\n                 .repairs(Collections.singletonList(createRepair()))\n                 .build();\n     }"
  },
  {
    "sha": "3935f8e926d174342b06402d42e0d6ca14bd0946",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/ExpenseTestSuite.java",
    "status": "modified",
    "additions": 7,
    "deletions": 9,
    "changes": 16,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/ExpenseTestSuite.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/ExpenseTestSuite.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/ExpenseTestSuite.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -9,7 +9,6 @@\n import pl.car.automanager.persistence.repository.ExpenseRepository;\n \n import java.math.BigDecimal;\n-import java.time.LocalDate;\n import java.util.ArrayList;\n \n import static org.junit.jupiter.api.Assertions.*;\n@@ -46,9 +45,9 @@ public void shouldUpdateExpense(){\n         //given\n         Expense expense = expenseRepository.save(createExpense());\n         //when\n-        expense.setCost(new BigDecimal(\"1500\"));\n+        expense.setSummaryCost(new BigDecimal(\"1500\"));\n         //then\n-        assertEquals(\"1500\", expense.getCost().toString());\n+        assertEquals(\"1500\", expense.getSummaryCost().toString());\n     }\n \n     @Test\n@@ -109,11 +108,11 @@ public void addNewRegistration(){\n     public void addNewService(){\n         //given\n         Expense expense = createExpense();\n-        Service service = new Service();\n+        Maintenance maintenance = new Maintenance();\n         //when\n-        expense.addRService(service);\n+        expense.addMaintenance(maintenance);\n         //then\n-        assertFalse(expense.getServices().isEmpty());\n+        assertFalse(expense.getMaintenances().isEmpty());\n     }\n \n     @Test\n@@ -128,13 +127,12 @@ public void addNewVulcanization(){\n     }\n     private Expense createExpense() {\n         return Expense.builder()\n-                .date(LocalDate.now())\n-                .cost(new BigDecimal(\"2000\"))\n+                .summaryCost(new BigDecimal(\"2000\"))\n                 .insurances(new ArrayList<>())\n                 .refueling(new ArrayList<>())\n                 .registrations(new ArrayList<>())\n                 .repairs(new ArrayList<>())\n-                .services(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n                 .vulcanization(new ArrayList<>())\n                 .build();\n     }"
  },
  {
    "sha": "923e1f5605c5be325785f7346d651544037dfb40",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/expanses/InsuranceTestSuite.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/InsuranceTestSuite.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/InsuranceTestSuite.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/expanses/InsuranceTestSuite.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -81,13 +81,12 @@ private Insurance createInsurance() {\n     private Expense createExpense() {\n         return Expense.builder()\n                 .id(1L)\n-                .date(LocalDate.now())\n-                .cost(new BigDecimal(\"2000\"))\n+                .summaryCost(BigDecimal.ZERO)\n                 .insurances(new ArrayList<>())\n                 .refueling(new ArrayList<>())\n                 .registrations(new ArrayList<>())\n                 .repairs(new ArrayList<>())\n-                .services(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n                 .vulcanization(new ArrayList<>())\n                 .build();\n     }"
  },
  {
    "sha": "020e1b641b3f192a827bd5a070554d2547805c94",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/expanses/MaintenanceTestSuite.java",
    "status": "renamed",
    "additions": 19,
    "deletions": 21,
    "changes": 40,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/MaintenanceTestSuite.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/MaintenanceTestSuite.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/expanses/MaintenanceTestSuite.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -8,7 +8,7 @@\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n import pl.car.automanager.persistence.entity.Expense;\n import pl.car.automanager.persistence.repository.ExpenseRepository;\n-import pl.car.automanager.persistence.repository.ServiceRepository;\n+import pl.car.automanager.persistence.repository.MaintenanceRepository;\n \n import java.math.BigDecimal;\n import java.time.LocalDate;\n@@ -18,59 +18,58 @@\n \n @ExtendWith(SpringExtension.class)\n @DataJpaTest\n-class ServiceTestSuite {\n+class MaintenanceTestSuite {\n \n     @Autowired\n-    ServiceRepository serviceRepository;\n+    MaintenanceRepository maintenanceRepository;\n \n     @Autowired\n     ExpenseRepository expenseRepository;\n \n     @Test\n     public void shouldAddService() {\n         //given\n-        Service service = serviceRepository.save(createService());\n+        Maintenance maintenance = maintenanceRepository.save(createService());\n         Expense expense = expenseRepository.save(createExpense());\n         //when\n-        service.setExpense(expense);\n-        expense.addRService(service);\n+        maintenance.setExpense(expense);\n+        expense.addMaintenance(maintenance);\n         //then\n-        assertEquals(LocalDate.now().plusMonths(12),\n-                expense.getServices().get(0).getNextServiceDate());\n+        assertEquals(\"15000\", maintenance.getDistance());\n     }\n \n     @Test\n     public void shouldGetServiceFindById() {\n         //given\n-        Service service = serviceRepository.save(createService());\n+        Maintenance maintenance = maintenanceRepository.save(createService());\n         //when\n-        Service getService = serviceRepository.findById(service.getId()).orElse(null);\n+        Maintenance getMaintenance = maintenanceRepository.findById(maintenance.getId()).orElse(null);\n         //then\n-        assertNotNull(getService);\n+        assertNotNull(getMaintenance);\n     }\n \n     @Test\n     public void shouldUpdateService() {\n         //given\n-        Service service = serviceRepository.save(createService());\n+        Maintenance maintenance = maintenanceRepository.save(createService());\n         //when\n-        service.setDistance(\"25000\");\n+        maintenance.setDistance(\"25000\");\n         //then\n-        assertNotEquals(\"15000\", service.getDistance());\n+        assertNotEquals(\"15000\", maintenance.getDistance());\n     }\n \n     @Test\n     public void shouldThrowExceptionForDeleteService() {\n         //given\n-        Service service = serviceRepository.save(createService());\n+        Maintenance maintenance = maintenanceRepository.save(createService());\n         //when\n         //then\n         assertThrows(DataIntegrityViolationException.class, () ->\n-                serviceRepository.existsById(service.getId()));\n+                maintenanceRepository.existsById(maintenance.getId()));\n     }\n \n-    private Service createService() {\n-        return Service.builder()\n+    private Maintenance createService() {\n+        return Maintenance.builder()\n                 .distance(\"15000\")\n                 .nextServiceDate(LocalDate.now().plusMonths(12))\n                 .expense(createExpense())\n@@ -80,13 +79,12 @@ private Service createService() {\n     private Expense createExpense() {\n         return Expense.builder()\n                 .id(1L)\n-                .date(LocalDate.now())\n-                .cost(new BigDecimal(\"2000\"))\n+                .summaryCost(new BigDecimal(\"2000\"))\n                 .insurances(new ArrayList<>())\n                 .refueling(new ArrayList<>())\n                 .registrations(new ArrayList<>())\n                 .repairs(new ArrayList<>())\n-                .services(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n                 .vulcanization(new ArrayList<>())\n                 .build();\n     }",
    "previous_filename": "src/test/java/pl/car/automanager/persistence/entity/expanses/ServiceTestSuite.java"
  },
  {
    "sha": "920644bc50ca2985758f41034b8494e96da7b968",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/expanses/RefuelingTestSuite.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/RefuelingTestSuite.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/RefuelingTestSuite.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/expanses/RefuelingTestSuite.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -11,7 +11,6 @@\n import pl.car.automanager.persistence.repository.RefuelingRepository;\n \n import java.math.BigDecimal;\n-import java.time.LocalDate;\n import java.util.ArrayList;\n \n import static org.junit.jupiter.api.Assertions.*;\n@@ -79,13 +78,12 @@ private Refueling createRefueling() {\n     private Expense createExpense() {\n         return Expense.builder()\n                 .id(1L)\n-                .date(LocalDate.now())\n-                .cost(new BigDecimal(\"190\"))\n+                .summaryCost(new BigDecimal(\"190\"))\n                 .insurances(new ArrayList<>())\n                 .refueling(new ArrayList<>())\n                 .registrations(new ArrayList<>())\n                 .repairs(new ArrayList<>())\n-                .services(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n                 .vulcanization(new ArrayList<>())\n                 .build();\n     }"
  },
  {
    "sha": "75326b8500244115a3feee94557632ac2ae170f9",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/expanses/RegistrationTestSuite.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/RegistrationTestSuite.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/RegistrationTestSuite.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/expanses/RegistrationTestSuite.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -80,13 +80,12 @@ private Registration createRegistration() {\n     private Expense createExpense() {\n         return Expense.builder()\n                 .id(1L)\n-                .date(LocalDate.now())\n-                .cost(new BigDecimal(\"2000\"))\n+                .summaryCost(new BigDecimal(\"2000\"))\n                 .insurances(new ArrayList<>())\n                 .refueling(new ArrayList<>())\n                 .registrations(new ArrayList<>())\n                 .repairs(new ArrayList<>())\n-                .services(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n                 .vulcanization(new ArrayList<>())\n                 .build();\n     }"
  },
  {
    "sha": "ebd06fbecfaab8c3ff4cc541bf7df7924c7e3faa",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/expanses/RepairTestSuite.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/RepairTestSuite.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/RepairTestSuite.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/expanses/RepairTestSuite.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -11,7 +11,6 @@\n import pl.car.automanager.persistence.repository.RepairRepository;\n \n import java.math.BigDecimal;\n-import java.time.LocalDate;\n import java.util.ArrayList;\n \n import static org.junit.jupiter.api.Assertions.*;\n@@ -80,13 +79,12 @@ private Repair createRepair() {\n     private Expense createExpense() {\n         return Expense.builder()\n                 .id(1L)\n-                .date(LocalDate.now())\n-                .cost(new BigDecimal(\"2000\"))\n+                .summaryCost(BigDecimal.ZERO)\n                 .insurances(new ArrayList<>())\n                 .refueling(new ArrayList<>())\n                 .registrations(new ArrayList<>())\n                 .repairs(new ArrayList<>())\n-                .services(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n                 .vulcanization(new ArrayList<>())\n                 .build();\n     }"
  },
  {
    "sha": "9750bc79b19bd1155416dd697cb270df26cf38cc",
    "filename": "src/test/java/pl/car/automanager/persistence/entity/expanses/VulcanizationTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/VulcanizationTest.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/persistence/entity/expanses/VulcanizationTest.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/persistence/entity/expanses/VulcanizationTest.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -11,7 +11,6 @@\n import pl.car.automanager.persistence.repository.VulcanizationRepository;\n \n import java.math.BigDecimal;\n-import java.time.LocalDate;\n import java.util.ArrayList;\n \n import static org.junit.jupiter.api.Assertions.*;\n@@ -79,13 +78,12 @@ private Vulcanization createVulcanization() {\n     private Expense createExpense() {\n         return Expense.builder()\n                 .id(1L)\n-                .date(LocalDate.now())\n-                .cost(new BigDecimal(\"2000\"))\n+                .summaryCost(new BigDecimal(\"2000\"))\n                 .insurances(new ArrayList<>())\n                 .refueling(new ArrayList<>())\n                 .registrations(new ArrayList<>())\n                 .repairs(new ArrayList<>())\n-                .services(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n                 .vulcanization(new ArrayList<>())\n                 .build();\n     }"
  },
  {
    "sha": "8ce4d2dafa070dced354af616c5c5e94965a169d",
    "filename": "src/test/java/pl/car/automanager/service/CarServiceCarTest.java",
    "status": "added",
    "additions": 209,
    "deletions": 0,
    "changes": 209,
    "blob_url": "https://github.com/kenez92/Auto-Manager/blob/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/service/CarServiceCarTest.java",
    "raw_url": "https://github.com/kenez92/Auto-Manager/raw/9220194317ac66cc3caf958f943427dd672d8055/src/test/java/pl/car/automanager/service/CarServiceCarTest.java",
    "contents_url": "https://api.github.com/repos/kenez92/Auto-Manager/contents/src/test/java/pl/car/automanager/service/CarServiceCarTest.java?ref=9220194317ac66cc3caf958f943427dd672d8055",
    "patch": "@@ -0,0 +1,209 @@\n+package pl.car.automanager.service;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import pl.car.automanager.persistence.entity.Car;\n+import pl.car.automanager.persistence.entity.Expense;\n+import pl.car.automanager.persistence.entity.User;\n+import pl.car.automanager.persistence.entity.expanses.*;\n+import pl.car.automanager.persistence.repository.CarRepository;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static pl.car.automanager.boundary.car.CarUseCase.CreateCarCommand;\n+import static pl.car.automanager.boundary.car.CarUseCase.UpdateCarCommand;\n+import static pl.car.automanager.commons.enums.FuelEnum.DIESEL;\n+import static pl.car.automanager.commons.enums.FuelEnum.PETROL;\n+\n+@DataJpaTest\n+class CarServiceCarTest {\n+\n+    private CarService carService;\n+    @Autowired\n+    @Mock\n+    private CarRepository carRepository;\n+    private CreateCarCommand firstCar;\n+    private CreateCarCommand secondCar;\n+    private User user;\n+\n+    @BeforeEach\n+    public void setup() {\n+        carService = new CarService(carRepository);\n+        user = createUser();\n+        firstCar = createCarOne();\n+        secondCar = createCarTwo();\n+    }\n+\n+    @Test\n+    public void shouldAddNewCar() {\n+        //given\n+        //when\n+        Car savedCar = carService.addCar(firstCar);\n+        //then\n+        assertNotNull(savedCar);\n+    }\n+\n+    @Test\n+    public void shouldReturnCarById() {\n+        //given\n+        Car savedCar = carService.addCar(createCarOne());\n+        //when\n+        Optional<Car> carById = carService.findById(savedCar.getId());\n+        //then\n+        assertTrue(carById.isPresent());\n+    }\n+\n+\n+    @Test\n+    public void shouldReturnCarsOfUser() {\n+        //given\n+        Car carOne = carService.addCar(createCarOne());\n+        Car carTwo = carService.addCar(createCarTwo());\n+        //when\n+        user.addCar(carOne);\n+        user.addCar(carTwo);\n+        //then\n+        assertEquals(2, user.getCars().size());\n+    }\n+\n+    @Test\n+    public void shouldAddExpense() {\n+        //given\n+        Car savedCar = carService.addCar(firstCar);\n+        //when\n+        //carService.addExpense(savedCar.getId());\n+        //then\n+        assertNotNull(savedCar.getExpense());\n+    }\n+\n+    @Test\n+    public void shouldGetVulcanizationExpense() {\n+        //given\n+        Car savedCar = carService.addCar(secondCar);\n+        //when\n+        savedCar.getExpense().addVulcanization(Vulcanization.builder().build());\n+        //then\n+        assertTrue(savedCar.getExpense().getVulcanization().size() > 0);\n+    }\n+\n+    @Test\n+    public void shouldGetInsuranceExpense() {\n+        //given\n+        Car savedCar = carService.addCar(firstCar);\n+        //when\n+        savedCar.getExpense().addInsurance(Insurance.builder().build());\n+        //then\n+        assertTrue(savedCar.getExpense().getInsurances().size() > 0);\n+    }\n+\n+    @Test\n+    public void shouldGetRefuelingExpense() {\n+        //given\n+        Car savedCar = carService.addCar(secondCar);\n+        //when\n+        savedCar.getExpense().addRefueling(Refueling.builder().build());\n+        //then\n+        assertTrue(savedCar.getExpense().getRefueling().size() > 0);\n+    }\n+\n+    @Test\n+    public void shouldGetRegistrationExpense() {\n+        //given\n+        Car savedCar = carService.addCar(firstCar);\n+        //when\n+        savedCar.getExpense().addRegistration(Registration.builder().build());\n+        //then\n+        assertTrue(savedCar.getExpense().getRegistrations().size() > 0);\n+    }\n+\n+    @Test\n+    public void shouldGetServiceExpense() {\n+        //given\n+        Car savedCar = carService.addCar(secondCar);\n+        //when\n+        savedCar.getExpense().addMaintenance(Maintenance.builder().build());\n+        //then\n+        assertTrue(savedCar.getExpense().getMaintenances().size() > 0);\n+    }\n+\n+    @Test\n+    public void shouldGetRepairExpense() {\n+        //given\n+        Car savedCar = carService.addCar(firstCar);\n+        //when\n+        savedCar.getExpense().addRepair(Repair.builder().build());\n+        //then\n+        assertTrue(savedCar.getExpense().getRepairs().size() > 0);\n+    }\n+\n+    @Test\n+    public void shouldGetSummaryCostFromExpense() {\n+        //given\n+        firstCar.getExpense().addRepair(Repair.builder().cost(new BigDecimal(\"250\")).build());\n+        firstCar.getExpense().addInsurance(Insurance.builder().cost(new BigDecimal(\"500\")).build());\n+        firstCar.getExpense().addMaintenance(Maintenance.builder().cost(new BigDecimal(\"650\")).build());\n+        firstCar.getExpense().addVulcanization(Vulcanization.builder().cost(new BigDecimal(\"40\")).build());\n+        firstCar.getExpense().addRegistration(Registration.builder().cost(new BigDecimal(\"150\")).build());\n+        firstCar.getExpense().addRefueling(Refueling.builder().cost(new BigDecimal(\"250\")).build());\n+        //when\n+        String summary = firstCar.getExpense().getSummaryCost().toString();\n+        //then\n+        assertTrue(summary.contains(\"1840\"));\n+    }\n+\n+    @Test\n+    public void shouldUpdateFieldCar() {\n+        //given\n+        Car beforeUpdateCar = carService.addCar(createCarTwo());\n+        Long carId = beforeUpdateCar.getId();\n+        UpdateCarCommand command =\n+                new UpdateCarCommand(carId, \"Mazda\", \"3\", \"JGJDH23\", \"700\", 3, DIESEL);\n+        //when\n+        carService.updateCar(command);\n+        Car afterUpdate = carRepository.getOne(carId);\n+        //then\n+        assertEquals(\"Mazda\", afterUpdate.getBrand());\n+        assertEquals(\"3\", afterUpdate.getModel());\n+        assertEquals(\"JGJDH23\", afterUpdate.getVin());\n+        assertEquals(\"700\", afterUpdate.getEngine());\n+        assertEquals(3, afterUpdate.getAmountOfDoors());\n+        assertEquals(DIESEL, afterUpdate.getFuel());\n+    }\n+\n+    private CreateCarCommand createCarOne() {\n+        return new CreateCarCommand(\"Opel\", \"Astra\", \"DSSAD556654\", \"1450\", 4, PETROL, createUser(), createExpense());\n+    }\n+\n+    private CreateCarCommand createCarTwo() {\n+        return new CreateCarCommand(\"Ford\", \"Ka\", \"DFFAD556654\", \"1540\", 3, DIESEL, createUser(), createExpense());\n+    }\n+\n+\n+    private Expense createExpense() {\n+        return Expense.builder()\n+                .summaryCost(BigDecimal.ZERO)\n+                .refueling(new ArrayList<>())\n+                .repairs(new ArrayList<>())\n+                .vulcanization(new ArrayList<>())\n+                .registrations(new ArrayList<>())\n+                .insurances(new ArrayList<>())\n+                .maintenances(new ArrayList<>())\n+                .build();\n+    }\n+\n+    private User createUser() {\n+        return User.builder()\n+                .email(\"user@com.pl\")\n+                .firstName(\"Jan\")\n+                .login(\"jan\")\n+                .password(\"password\")\n+                .cars(new ArrayList<>())\n+                .build();\n+    }\n+}\n\\ No newline at end of file"
  }
]
