[
  {
    "sha": "71c121398d6aa57c0646db7d6acbc5c44fe79759",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/FlightComputer.java",
    "status": "modified",
    "additions": 232,
    "deletions": 31,
    "changes": 263,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/FlightComputer.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/FlightComputer.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/FlightComputer.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -1,37 +1,238 @@\n package org.rocketproplab.marginalstability.flightcomputer;\n \n+import org.rocketproplab.marginalstability.flightcomputer.comm.PacketRouter;\n+import org.rocketproplab.marginalstability.flightcomputer.comm.PacketSources;\n+import org.rocketproplab.marginalstability.flightcomputer.comm.SCMPacket;\n import org.rocketproplab.marginalstability.flightcomputer.looper.Looper;\n-import org.rocketproplab.marginalstability.flightcomputer.subsystems.Subsystem;\n-import org.rocketproplab.marginalstability.flightcomputer.subsystems.Telemetry;\n+import org.rocketproplab.marginalstability.flightcomputer.subsystems.*;\n+\n+import java.util.logging.Logger;\n \n public class FlightComputer {\n-  private Telemetry telemetry;\n-  private Time      time;\n-  private Looper    looper;\n-\n-\n-  public FlightComputer(Telemetry telemetry, Time time) {\n-    this.telemetry = telemetry;\n-    this.time      = time;\n-    this.looper    = new Looper(time);\n-  }\n-\n-  public void registerSubsystem(Subsystem subsystem) {\n-    subsystem.prepare(this.looper);\n-  }\n-\n-  public Time getTime() {\n-    return time;\n-  }\n-\n-  public void tick() {\n-    this.looper.tick((tag, from, exception) -> {\n-      try {\n-        this.telemetry.reportError(Errors.TOP_LEVEL_EXCEPTION);\n-      } catch (Exception e) {\n-        System.err.println(\"Unable to log errors!\");\n-        e.printStackTrace();\n-      }\n-    });\n-  }\n+    private static FlightComputer instance;\n+\n+    /**\n+     * Creates a FlightComputer instance, which can only be created once.\n+     *\n+     * @param args arguments to configure FightComputer settings\n+     * @return new FlightComputer instance\n+     */\n+    public static FlightComputer create(String[] args) {\n+        if (instance != null) {\n+            throw new RuntimeException(\"FlightComputer has already been created.\");\n+        }\n+        instance = new FlightComputer(args);\n+        return instance;\n+    }\n+\n+    /**\n+     * Convenient method to create a FlightComputer instance without any arguments.\n+     *\n+     * @return new FlightComputer instance\n+     */\n+    public static FlightComputer create() {\n+        return create(new String[0]);\n+    }\n+\n+    /**\n+     * Time used by all objects created in the FC.\n+     */\n+    private final Time time;\n+\n+    /**\n+     * Looper used by objects created in the FC, e.g. subsystems.\n+     */\n+    private final Looper looper;\n+\n+    private PacketRouter packetRouter = new PacketRouter();\n+    private Telemetry telemetry = new Telemetry(Logger.getLogger(\"Telemetry\"), packetRouter);\n+\n+    /**\n+     * Providers to provide singleton objects to higher level management objects.\n+     */\n+    private SensorProvider sensorProvider;\n+\n+    /**\n+     * Private FlightComputer constructor to avoid multiple initializations.\n+     *\n+     * @param args arguments to configure FlightComputer settings\n+     */\n+    private FlightComputer(String[] args) {\n+        this.time = new Time();\n+        this.looper = new Looper(this.time);\n+        initWithArgs(args);\n+    }\n+\n+    /**\n+     * Initialize input/output devices and other settings based on arguments.\n+     *\n+     * @param args arguments for configuration\n+     */\n+    private void initWithArgs(String[] args) {\n+        ParseCmdLine cmd = new ParseCmdLine(args);\n+\n+        // use real/fake sensors\n+        sensorProvider = SensorProvider.create(cmd.useRealSensors);\n+    }\n+\n+    /**\n+     * Allows subsystems to register events and callbacks with the looper.\n+     *\n+     * @param subsystem subsystem to register\n+     */\n+    public void registerSubsystem(Subsystem subsystem) {\n+        subsystem.prepare(this.looper);\n+    }\n+\n+    /**\n+     * After all input/output devices and settings are initialized, higher level objects can be created.\n+     * Use objects provided by the providers, and simply inject all objects needed to create any higher level object.\n+     */\n+    public void initHighLevelObjects() {\n+\n+        // PacketRouter\n+        PacketRouter packetRouter = new PacketRouter();\n+\n+        // Telemetry\n+        Telemetry telemetry = new Telemetry(Logger.getLogger(\"Telemetry\"), packetRouter);\n+\n+        telemetry.logInfo(Info.INIT_SUBSYSTEMS_START);\n+\n+        // ParachuteSubsystem\n+        registerSubsystem(new ParachuteSubsystem(null, null, null, null));\n+\n+        // SensorSubsystem\n+        SensorSubsystem sensorSubsystem = new SensorSubsystem(this.time);\n+        // add sensors\n+        telemetry.logInfo(Info.DONE_CREATING_SENSORS);\n+        registerSubsystem(sensorSubsystem);\n+\n+        // SCMCommandSubsystem\n+        registerSubsystem(new SCMCommandSubsystem()); // TODO: should listen to PacketRouter\n+\n+        // ValveStateSubsystem\n+        packetRouter.addListener(new ValveStateSubsystem(packetRouter), SCMPacket.class,\n+                PacketSources.EngineControllerUnit);\n+\n+        telemetry.logInfo(Info.FINISH_SUBSYSTEM_START);\n+    }\n+\n+    public void tick() {\n+        this.looper.tick((tag, from, exception) -> {\n+            try {\n+                this.telemetry.reportError(Errors.TOP_LEVEL_EXCEPTION);\n+            } catch (Exception e) {\n+                System.err.println(\"Unable to log errors!\");\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Builder class to create FlightComputer objects with more customization.\n+     */\n+    public static class Builder {\n+        private Telemetry telemetry;\n+        private final FlightComputer fc;\n+\n+        /**\n+         * Creates a new Builder instance, which can be used to customize the FC.\n+         *\n+         * @param args arguments to configure FlightComputer settings.\n+         */\n+        public Builder(String[] args) {\n+            fc = FlightComputer.create(args);\n+        }\n+\n+        /**\n+         * Convenient method to create a Builder instance without any arguments.\n+         */\n+        public Builder() {\n+            this(new String[0]);\n+        }\n+\n+        /**\n+         * Set custom telemetry.\n+         *\n+         * @param telemetry customized telemetry\n+         * @return this Builder\n+         */\n+        public Builder withTelemetry(Telemetry telemetry) {\n+            this.telemetry = telemetry;\n+            return this;\n+        }\n+\n+        /**\n+         * Customizations set programmatically in the Builder will override defaults and arguments.\n+         *\n+         * @return customized FlightComputer\n+         */\n+        public FlightComputer build() {\n+            if (telemetry != null) fc.telemetry = this.telemetry;\n+            return fc;\n+        }\n+    }\n+\n+    /**\n+     * Defines command line options and possible arguments.\n+     * Also prints help and exits if invalid arguments are detected.\n+     */\n+    private static class ParseCmdLine {\n+        /**\n+         * CLI argument names and descriptions\n+         */\n+        private static final String\n+                HELP = \"--help\",\n+                HELP_DESC = \"print help menu\",\n+                REAL_SENSORS = \"--real-sensors\",\n+                REAL_SENSORS_DESC = \"use real sensors\";\n+\n+        /**\n+         * Real sensor flag\n+         */\n+        private boolean useRealSensors = false;\n+\n+        /**\n+         * Constructs a new object to parse CLI arguments\n+         *\n+         * @param args arguments to parse\n+         */\n+        private ParseCmdLine(String[] args) {\n+            parse(args);\n+        }\n+\n+        /**\n+         * Checks arguments against each setting\n+         * @param args\n+         */\n+        private void parse(String[] args) {\n+            // help\n+            if (args.length == 1 && args[0].equals(\"--help\")) {\n+                printHelp();\n+                System.exit(0);\n+            }\n+\n+            // settings\n+            int i = 0;\n+            while (i < args.length) {\n+                String arg = args[i];\n+                if (arg.equals(REAL_SENSORS)) {\n+                    useRealSensors = true;\n+                    System.out.println(REAL_SENSORS_DESC);\n+                } else {\n+                    System.out.println(\"Invalid argument: \" + arg);\n+                    printHelp();\n+                    System.exit(1);\n+                }\n+                i++;\n+            }\n+        }\n+\n+        private void printHelp() {\n+            System.out.println(\"Usage:\\n\"\n+                    + HELP + \": \" + HELP_DESC + \"\\n\"\n+                    + REAL_SENSORS + \": \" + REAL_SENSORS_DESC\n+            );\n+        }\n+    }\n }"
  },
  {
    "sha": "112d246f07b48732be269f5be08ac431e6a64096",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/Main.java",
    "status": "modified",
    "additions": 5,
    "deletions": 40,
    "changes": 45,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/Main.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/Main.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/Main.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -14,7 +14,7 @@\n  * Subsystems}, and registering subsystems with the\n  * {@link org.rocketproplab.marginalstability.flightcomputer.comm.PacketRouter\n  * Packet Router}.\n- * \n+ * <p>\n  * The application is split up into three main sections.\n  * <ul>\n  * <li><b>Subsystems</b> are classes which hold state for a particular part of\n@@ -44,47 +44,12 @@\n  * </ul>\n  */\n public class Main {\n-\n-  public static void main(String[] args) {\n-    Time           time           = new Time();\n-    FlightComputer flightComputer = new FlightComputer(Telemetry.getInstance(), time);\n-    Main.registerSubsystems(flightComputer);\n-    Main.registerPacketListeners();\n+    public static void main(String[] args) {\n+        FlightComputer flightComputer = FlightComputer.create(args);\n+        flightComputer.initHighLevelObjects();\n \n //    while(true) {\n //      flightComputer.tick();\n //    }\n-  }\n-\n-  private static void registerSubsystems(FlightComputer flightComputer) {\n-    Telemetry telemetry = Telemetry.getInstance();\n-\n-    telemetry.logInfo(Info.INIT_SUBSYSTEMS_START);\n-\n-    flightComputer.registerSubsystem(ParachuteSubsystem.getInstance());\n-    ValveStateSubsystem.getInstance();\n-\n-    SensorSubsystem sensorSubsystem = new SensorSubsystem(flightComputer.getTime());\n-    Main.addSensors(sensorSubsystem);\n-    flightComputer.registerSubsystem(sensorSubsystem);\n-\n-    SCMCommandSubsystem scmCommandSubsystem = SCMCommandSubsystem.getInstance();\n-    flightComputer.registerSubsystem(scmCommandSubsystem); // TODO: should listen to PacketRouter\n-\n-    telemetry.logInfo(Info.FINISH_SUBSYSTEM_START);\n-  }\n-\n-  private static void addSensors(SensorSubsystem sensorSubsystem) {\n-    Telemetry telemetry = Telemetry.getInstance();\n-\n-    telemetry.logInfo(Info.DONE_CREATING_SENSORS);\n-  }\n-\n-  private static void registerPacketListeners() {\n-    PacketRouter packetRouter = PacketRouter.getInstance();\n-\n-    packetRouter.addListener(ValveStateSubsystem.getInstance(), SCMPacket.class,\n-        PacketSources.EngineControllerUnit);\n-  }\n-\n+    }\n }"
  },
  {
    "sha": "0fdc65fb0ab9ef5ba11fe0c3e026677c18c5e08d",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/SensorProvider.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/SensorProvider.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/SensorProvider.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/SensorProvider.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -0,0 +1,55 @@\n+package org.rocketproplab.marginalstability.flightcomputer;\n+\n+import org.rocketproplab.marginalstability.flightcomputer.hal.LPS22HD;\n+\n+/**\n+ * A provider to provide singleton sensor instances.\n+ *\n+ * @author Chi Chow\n+ */\n+public abstract class SensorProvider {\n+\n+    abstract LPS22HD getPressureSensor();\n+\n+    private static SensorProvider instance;\n+\n+    /**\n+     * Create singleton SensorProvider.\n+     *\n+     * @param useRealSensors whether to use real sensors or simulators\n+     * @return new SensorProvider instance\n+     */\n+    public static SensorProvider create(boolean useRealSensors) {\n+        if (instance != null) {\n+            throw new RuntimeException(\"SensorProvider has already been created.\");\n+        }\n+        if (useRealSensors) {\n+            instance = new RealSensorProvider();\n+        } else {\n+            instance = new SimulatorProvider();\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * SensorProvider that returns simulators\n+     */\n+    private static class SimulatorProvider extends SensorProvider {\n+        @Override\n+        public LPS22HD getPressureSensor() {\n+            // TODO: implement methods to get different simulators\n+            throw new RuntimeException(\"Not implemented!\");\n+        }\n+    }\n+\n+    /**\n+     * SensorProvider that returns real sensors\n+     */\n+    private static class RealSensorProvider extends SensorProvider {\n+        @Override\n+        public LPS22HD getPressureSensor() {\n+            // TODO: implement methods to get different real sensors\n+            throw new RuntimeException(\"Not implemented!\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "69485457e9a161a350d448839514cafb9229623e",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/comm/PacketRouter.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/comm/PacketRouter.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/comm/PacketRouter.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/comm/PacketRouter.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -24,14 +24,6 @@\n  *\n  */\n public class PacketRouter implements PacketRelay {\n-  private static PacketRouter instance;\n-\n-  public static PacketRouter getInstance() {\n-    if (instance == null) {\n-      instance = new PacketRouter();\n-    }\n-    return instance;\n-  }\n \n   private HashMap<LookupTuple, ArrayList<PacketListener<?>>> listenerMap;\n "
  },
  {
    "sha": "b082365cc8edea5febf7db055b2f642a2321953d",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/looper/Looper.java",
    "status": "modified",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/looper/Looper.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/looper/Looper.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/looper/Looper.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -21,15 +21,6 @@\n  * @author Chi Chow, Enlil Odisho\n  */\n public class Looper {\n-  private static Looper mainLooper;\n-\n-  public static Looper getInstance() {\n-    if (mainLooper == null) {\n-      mainLooper = new Looper(new Time());\n-    }\n-    return mainLooper;\n-  }\n-\n   private final Time                          time;\n   private final HashMap<Object, GenericEvent> callbackMap;\n   /**"
  },
  {
    "sha": "b1f67ab7819c848fd36d747a4de2deb648d7f480",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/subsystems/PTSubsystem.java",
    "status": "modified",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/PTSubsystem.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/PTSubsystem.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/PTSubsystem.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -9,19 +9,6 @@\n  * @author Clara Chun, Chi Chow\n  */\n public class PTSubsystem {\n-  private static PTSubsystem instance;\n-\n-  /**\n-   * Singleton instance of PTSubsystem\n-   *\n-   * @return a PTSubsystem instance\n-   */\n-  public static PTSubsystem getInstance() {\n-    if (instance == null) {\n-      instance = new PTSubsystem(null);\n-    }\n-    return instance;\n-  }\n \n   private AnalogDigitalConverter adc;\n "
  },
  {
    "sha": "5d70977617aee5015cd09e81faaf9bbb4068fd28",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ParachuteSubsystem.java",
    "status": "modified",
    "additions": 133,
    "deletions": 141,
    "changes": 274,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ParachuteSubsystem.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ParachuteSubsystem.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ParachuteSubsystem.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -23,159 +23,151 @@\n public class ParachuteSubsystem\n         implements FlightStateListener, PositionListener, Subsystem {\n \n-  private static final String             MAIN_CHUTE_TAG = \"MainChute\";\n-  private static       ParachuteSubsystem instance;\n+    private static final String MAIN_CHUTE_TAG = \"MainChute\";\n+\n+    private Solenoid mainChute;\n+    private Solenoid drogueChute;\n+    private InterpolatingVector3 position;\n+    private Time time;\n+    private Barometer barometer;\n+    private Looper looper;\n+\n+    private List<ParachuteListener> parachuteListeners;\n+\n+    /**\n+     * Create a new parachute subsystem\n+     *\n+     * @param mainChute   the solenoid to deploy the main chute\n+     * @param drogueChute the solenoid to deploy the drogue chute\n+     * @param time        the rocket time\n+     */\n+    public ParachuteSubsystem(Solenoid mainChute, Solenoid drogueChute,\n+                              Time time, Barometer barometer) {\n+        this.mainChute = mainChute;\n+        this.drogueChute = drogueChute;\n+        this.time = time;\n+        this.barometer = barometer;\n+        this.parachuteListeners = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Register drogue chute and main chute open conditions as\n+     * events in the provided Looper.\n+     *\n+     * @param looper to register events to\n+     */\n+    @Override\n+    public void prepare(Looper looper) {\n+        this.looper = looper;\n+    }\n \n-  public static ParachuteSubsystem getInstance() {\n-    if (instance == null) {\n-      instance = new ParachuteSubsystem(null, null, null, null);\n+    /**\n+     * Determine whether the flight mode should trigger the drogue chute to open.\n+     *\n+     * @param flightMode FlightMode to test\n+     * @return whether the drogue chute should open\n+     */\n+    private boolean shouldDrogueChuteOpenByFlightMode(FlightMode flightMode) {\n+        return flightMode.ordinal() >= FlightMode.Apogee.ordinal();\n     }\n-    return instance;\n-  }\n-\n-  private Solenoid             mainChute;\n-  private Solenoid             drogueChute;\n-  private InterpolatingVector3 position;\n-  private Time                 time;\n-  private Barometer            barometer;\n-  private Looper               looper;\n-\n-  private List<ParachuteListener> parachuteListeners;\n-\n-  /**\n-   * Create a new parachute subsystem\n-   *\n-   * @param mainChute   the solenoid to deploy the main chute\n-   * @param drogueChute the solenoid to deploy the drogue chute\n-   * @param time        the rocket time\n-   */\n-  public ParachuteSubsystem(Solenoid mainChute, Solenoid drogueChute,\n-                            Time time, Barometer barometer) {\n-    this.mainChute          = mainChute;\n-    this.drogueChute        = drogueChute;\n-    this.time               = time;\n-    this.barometer          = barometer;\n-    this.parachuteListeners = new ArrayList<>();\n-  }\n-\n-  /**\n-   * Register drogue chute and main chute open conditions as\n-   * events in the provided Looper.\n-   *\n-   * @param looper to register events to\n-   */\n-  @Override\n-  public void prepare(Looper looper) {\n-    this.looper = looper;\n-  }\n-\n-  /**\n-   * Determine whether the flight mode should trigger the drogue chute to open.\n-   *\n-   * @param flightMode FlightMode to test\n-   * @return whether the drogue chute should open\n-   */\n-  private boolean shouldDrogueChuteOpenByFlightMode(FlightMode flightMode) {\n-    return flightMode.ordinal() >= FlightMode.Apogee.ordinal();\n-  }\n-\n-  private boolean shouldMainChuteOpenByPressure() {\n-    Vector3 currentPos = this.position.getAt(time.getSystemTime());\n-    boolean b1 = currentPos.getZ() < Settings.MAIN_CHUTE_HEIGHT;\n-    boolean b2 = barometer.getPressure() < Settings.MAIN_CHUTE_PRESSURE;\n-    return b1 && b2;\n+\n+    private boolean shouldMainChuteOpenByPressure() {\n+        Vector3 currentPos = this.position.getAt(time.getSystemTime());\n+        boolean b1 = currentPos.getZ() < Settings.MAIN_CHUTE_HEIGHT;\n+        boolean b2 = barometer.getPressure() < Settings.MAIN_CHUTE_PRESSURE;\n+        return b1 && b2;\n //    return currentPos.getZ() < Settings.MAIN_CHUTE_HEIGHT &&\n //            barometer.getPressure() >= Settings.MAIN_CHUTE_PRESSURE;\n-  }\n-\n-  private boolean shouldMainChuteCheckPressure(FlightMode flightMode) {\n-    return this.position != null && flightMode == FlightMode.Falling;\n-  }\n-\n-  /**\n-   * Set drogueChute to active and\n-   * emit drogue chute open event to all listeners.\n-   */\n-  private void drogueChuteOpen() {\n-    boolean wasActive = drogueChute.isActive();\n-    drogueChute.set(true);\n-    if (!wasActive) {\n-      for (ParachuteListener listener : parachuteListeners) {\n-        listener.onDrogueOpen();\n-      }\n     }\n-  }\n-\n-  /**\n-   * Set mainChute to active and\n-   * emit main chute open event to all listeners.\n-   */\n-  private void mainChuteOpen() {\n-    // remove main chute open event from Looper\n-    if (this.looper.removeEvent(MAIN_CHUTE_TAG) == null) {\n-      // TODO: Log that main chute was deployed because of pressure\n+\n+    private boolean shouldMainChuteCheckPressure(FlightMode flightMode) {\n+        return this.position != null && flightMode == FlightMode.Falling;\n+    }\n+\n+    /**\n+     * Set drogueChute to active and\n+     * emit drogue chute open event to all listeners.\n+     */\n+    private void drogueChuteOpen() {\n+        boolean wasActive = drogueChute.isActive();\n+        drogueChute.set(true);\n+        if (!wasActive) {\n+            for (ParachuteListener listener : parachuteListeners) {\n+                listener.onDrogueOpen();\n+            }\n+        }\n     }\n \n-    boolean wasActive = mainChute.isActive();\n-    mainChute.set(true);\n-    if (!wasActive) {\n-      for (ParachuteListener listener : parachuteListeners) {\n-        listener.onMainChuteOpen();\n-      }\n+    /**\n+     * Set mainChute to active and\n+     * emit main chute open event to all listeners.\n+     */\n+    private void mainChuteOpen() {\n+        // remove main chute open event from Looper\n+        if (this.looper.removeEvent(MAIN_CHUTE_TAG) == null) {\n+            // TODO: Log that main chute was deployed because of pressure\n+        }\n+\n+        boolean wasActive = mainChute.isActive();\n+        mainChute.set(true);\n+        if (!wasActive) {\n+            for (ParachuteListener listener : parachuteListeners) {\n+                listener.onMainChuteOpen();\n+            }\n+        }\n     }\n-  }\n-\n-  /**\n-   * Attempt to open the main chute\n-   *\n-   * @return    if the deployment was successful\n-   */\n-  public boolean attemptMainChuteOpen() {\n+\n+    /**\n+     * Attempt to open the main chute\n+     *\n+     * @return if the deployment was successful\n+     */\n+    public boolean attemptMainChuteOpen() {\n     /* TODO: Find a better way to check if the drogue chute is currently open,\n         and if the main chute deployed successfully */\n-    if(drogueChute.isActive())\n-      mainChuteOpen();\n-    else {\n-      return false;\n+        if (drogueChute.isActive())\n+            mainChuteOpen();\n+        else {\n+            return false;\n+        }\n+\n+        return mainChute.isActive();\n+    }\n+\n+    /**\n+     * Attempt to open the drogue chute\n+     *\n+     * @return if the deployment was successful\n+     */\n+    public boolean attemptDrogueChuteOpen() {\n+        drogueChuteOpen();\n+\n+        // TODO: Find a better way to check if the drogue chute deployed successfully\n+        return drogueChute.isActive();\n     }\n \n-    return mainChute.isActive();\n-  }\n-\n-  /**\n-   * Attempt to open the drogue chute\n-   *\n-   * @return    if the deployment was successful\n-   */\n-  public boolean attemptDrogueChuteOpen() {\n-    drogueChuteOpen();\n-\n-    // TODO: Find a better way to check if the drogue chute deployed successfully\n-    return drogueChute.isActive();\n-  }\n-\n-  @Override\n-  public void onFlightModeChange(FlightMode newMode) {\n-    if (shouldDrogueChuteOpenByFlightMode(newMode)) {\n-      drogueChuteOpen();\n+    @Override\n+    public void onFlightModeChange(FlightMode newMode) {\n+        if (shouldDrogueChuteOpenByFlightMode(newMode)) {\n+            drogueChuteOpen();\n+        }\n+        if (shouldMainChuteCheckPressure(newMode)) {\n+            looper.emitOnceIf(MAIN_CHUTE_TAG, Settings.MAIN_CHUTE_PRESSURE_TIME_THRESHOLD,\n+                    this::shouldMainChuteOpenByPressure, (tag, from) -> mainChuteOpen());\n+        }\n     }\n-    if (shouldMainChuteCheckPressure(newMode)) {\n-      looper.emitOnceIf(MAIN_CHUTE_TAG, Settings.MAIN_CHUTE_PRESSURE_TIME_THRESHOLD,\n-              this::shouldMainChuteOpenByPressure, (tag, from) -> mainChuteOpen());\n+\n+    @Override\n+    public void onPositionEstimate(InterpolatingVector3 positionEstimate) {\n+        this.position = positionEstimate;\n+    }\n+\n+    /**\n+     * Add a ParachuteListener to emit parachute changes\n+     *\n+     * @param parachuteListener ParachuteListener to emit callbacks to\n+     */\n+    public void addParachuteListener(ParachuteListener parachuteListener) {\n+        parachuteListeners.add(parachuteListener);\n     }\n-  }\n-\n-  @Override\n-  public void onPositionEstimate(InterpolatingVector3 positionEstimate) {\n-    this.position = positionEstimate;\n-  }\n-\n-  /**\n-   * Add a ParachuteListener to emit parachute changes\n-   *\n-   * @param parachuteListener ParachuteListener to emit callbacks to\n-   */\n-  public void addParachuteListener(ParachuteListener parachuteListener) {\n-    parachuteListeners.add(parachuteListener);\n-  }\n }"
  },
  {
    "sha": "61ec12bb89988a1695debdfc0d1d65afe97f6606",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/subsystems/SCMCommandSubsystem.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/SCMCommandSubsystem.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/SCMCommandSubsystem.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/SCMCommandSubsystem.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -19,14 +19,6 @@\n  */\n public class SCMCommandSubsystem implements Subsystem,\n         PacketListener<SCMPacket>, FramedPacketProcessor {\n-  private static SCMCommandSubsystem instance;\n-\n-  public static SCMCommandSubsystem getInstance() {\n-    if (instance == null) {\n-      instance = new SCMCommandSubsystem();\n-    }\n-    return instance;\n-  }\n \n   private Looper looper;\n "
  },
  {
    "sha": "a66df7d13a6d0e8c7f8c03138e8cc22660e2d64c",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/subsystems/Telemetry.java",
    "status": "modified",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/Telemetry.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/Telemetry.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/Telemetry.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -19,15 +19,6 @@\n  *\n  */\n public class Telemetry {\n-  private static Telemetry instance;\n-\n-  public static Telemetry getInstance() {\n-    if (instance == null) {\n-      instance = new Telemetry(Logger.getLogger(\"Telemetry\"), PacketRouter.getInstance());\n-    }\n-    return instance;\n-  }\n-\n   public static final int BASE_10            = 10;\n   public static final int BASE_16            = 16;\n   public static final int MAX_PACKET_BASE_10 = (int) Math.round(Math.pow(BASE_10, SCMPacket.DATA_LENGTH)) - 1;"
  },
  {
    "sha": "bcec3d7ae1ac5a5435ad70b7f8d65f7b14200cfa",
    "filename": "src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ValveStateSubsystem.java",
    "status": "modified",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ValveStateSubsystem.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ValveStateSubsystem.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/src/org/rocketproplab/marginalstability/flightcomputer/subsystems/ValveStateSubsystem.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -18,13 +18,6 @@\n  *\n  */\n public class ValveStateSubsystem implements PacketListener<SCMPacket> {\n-  private static ValveStateSubsystem instance;\n-  public static ValveStateSubsystem getInstance() {\n-    if(instance == null) {\n-      instance = new ValveStateSubsystem(PacketRouter.getInstance());\n-    }\n-    return instance;\n-  }\n   \n \tprivate SCMPacket packet;\n \tprivate int[] valveStates = {-1, -1, -1, -1, -1, -1, -1, -1};"
  },
  {
    "sha": "1a00b24aea09405abfc3b8b3f10ba732988b408d",
    "filename": "test/org/rocketproplab/marginalstability/flightcomputer/FlightComputerTest.java",
    "status": "modified",
    "additions": 156,
    "deletions": 95,
    "changes": 251,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/FlightComputerTest.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/FlightComputerTest.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/test/org/rocketproplab/marginalstability/flightcomputer/FlightComputerTest.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -1,110 +1,171 @@\n package org.rocketproplab.marginalstability.flightcomputer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n+import java.lang.reflect.Field;\n+import java.security.Permission;\n import java.util.ArrayList;\n import java.util.logging.Logger;\n \n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.rocketproplab.marginalstability.flightcomputer.looper.Looper;\n import org.rocketproplab.marginalstability.flightcomputer.subsystems.Subsystem;\n import org.rocketproplab.marginalstability.flightcomputer.subsystems.Telemetry;\n \n+import static org.junit.Assert.*;\n+\n public class FlightComputerTest {\n-  private Telemetry         telemetry;\n-  private ArrayList<Errors> errorList;\n-  private boolean           throwErrorOnError;\n-\n-  private class MockSubsystem implements Subsystem {\n-    public boolean hasUpdateCalled = false;\n-    public boolean throwError      = false;\n-\n-    @Override\n-    public void prepare(Looper looper) {\n-      looper.emitAlways(this, (tag, from) -> {\n-        this.hasUpdateCalled = true;\n-        if (this.throwError) {\n-          throw new RuntimeException();\n+    private Telemetry telemetry;\n+    private ArrayList<Errors> errorList;\n+    private boolean throwErrorOnError;\n+    private SecurityManager securityManager; // to test if System exits\n+\n+    private class MockSubsystem implements Subsystem {\n+        public boolean hasUpdateCalled = false;\n+        public boolean throwError = false;\n+\n+        @Override\n+        public void prepare(Looper looper) {\n+            looper.emitAlways(this, (tag, from) -> {\n+                this.hasUpdateCalled = true;\n+                if (this.throwError) {\n+                    throw new RuntimeException();\n+                }\n+            });\n         }\n-      });\n     }\n-  }\n-\n-\n-  @Before\n-  public void beforeEach() {\n-    this.throwErrorOnError = false;\n-    errorList              = new ArrayList<>();\n-    this.telemetry         = new Telemetry(Logger.getLogger(\"Dummy\"), null) {\n-      @Override\n-      public void reportError(Errors error) {\n-        errorList.add(error);\n-        if (throwErrorOnError) {\n-          throw new RuntimeException();\n-        }\n-      }\n-    };\n-  }\n-\n-  @Test\n-  public void flightComputerCallsSubsystemUpdateOnTick() {\n-    FlightComputer flightComputer = new FlightComputer(this.telemetry, null);\n-    MockSubsystem  mockSubsystem  = new MockSubsystem();\n-    flightComputer.registerSubsystem(mockSubsystem);\n-    flightComputer.tick();\n-    assertTrue(mockSubsystem.hasUpdateCalled);\n-  }\n-\n-  @Test\n-  public void flightComputerRecoversFromException() {\n-    FlightComputer flightComputer = new FlightComputer(this.telemetry, null);\n-    MockSubsystem  mockSubsystem  = new MockSubsystem();\n-    mockSubsystem.throwError = true;\n-    flightComputer.registerSubsystem(mockSubsystem);\n-    flightComputer.tick();\n-    mockSubsystem.hasUpdateCalled = false;\n-    mockSubsystem.throwError      = false;\n-    flightComputer.tick();\n-    assertTrue(mockSubsystem.hasUpdateCalled);\n-  }\n-\n-  @Test\n-  public void flightComputerReportsErrorToTelemetry() {\n-    FlightComputer flightComputer = new FlightComputer(this.telemetry, null);\n-    MockSubsystem  mockSubsystem  = new MockSubsystem();\n-    mockSubsystem.throwError = true;\n-    flightComputer.registerSubsystem(mockSubsystem);\n-    flightComputer.tick();\n-    assertEquals(1, this.errorList.size());\n-    assertEquals(Errors.TOP_LEVEL_EXCEPTION, this.errorList.get(0));\n-  }\n-\n-  @Test\n-  public void errorInReportErrorAllowContinuedExecution() {\n-    FlightComputer flightComputer = new FlightComputer(this.telemetry, null);\n-    MockSubsystem  mockSubsystem  = new MockSubsystem();\n-    mockSubsystem.throwError = true;\n-    this.throwErrorOnError   = true;\n-    flightComputer.registerSubsystem(mockSubsystem);\n-    flightComputer.tick();\n-    mockSubsystem.hasUpdateCalled = false;\n-    mockSubsystem.throwError      = false;\n-    flightComputer.tick();\n-    assertTrue(mockSubsystem.hasUpdateCalled);\n-  }\n-\n-  @Test\n-  public void errorAllowContinuedExecutionInSameTick() {\n-    FlightComputer flightComputer = new FlightComputer(this.telemetry, null);\n-    MockSubsystem mockSubsystem1 = new MockSubsystem();\n-    mockSubsystem1.throwError = true;\n-    flightComputer.registerSubsystem(mockSubsystem1);\n-    MockSubsystem mockSubsystem2 = new MockSubsystem();\n-    mockSubsystem2.throwError = false;\n-    flightComputer.registerSubsystem(mockSubsystem2);\n-    flightComputer.tick();\n-    assertTrue(mockSubsystem2.hasUpdateCalled);\n-  }\n+\n+\n+    @Before\n+    public void beforeEach() {\n+        this.throwErrorOnError = false;\n+        errorList = new ArrayList<>();\n+        this.telemetry = new Telemetry(Logger.getLogger(\"Dummy\"), null) {\n+            @Override\n+            public void reportError(Errors error) {\n+                errorList.add(error);\n+                if (throwErrorOnError) {\n+                    throw new RuntimeException();\n+                }\n+            }\n+        };\n+    }\n+\n+    @After\n+    public void resetSingletonFields() throws Exception {\n+        // use reflection to reset singleton fields\n+        Field fcInstance = FlightComputer.class.getDeclaredField(\"instance\");\n+        fcInstance.setAccessible(true);\n+        fcInstance.set(null, null);\n+        Field sensorInstance = SensorProvider.class.getDeclaredField(\"instance\");\n+        sensorInstance.setAccessible(true);\n+        sensorInstance.set(null, null);\n+    }\n+\n+    @Before\n+    public void customSecurityManager() {\n+        securityManager = System.getSecurityManager();\n+        System.setSecurityManager(new SecurityManager() {\n+            @Override\n+            public void checkExit(int status) {\n+                super.checkExit(status);\n+                throw new SecurityException(\"Overriding shutdown...\");\n+            }\n+\n+            @Override\n+            public void checkPermission(Permission perm) {\n+                // do nothing\n+            }\n+        });\n+    }\n+\n+    @After\n+    public void resetSecurityManager() {\n+        System.setSecurityManager(securityManager);\n+    }\n+\n+    @Test\n+    public void flightComputerCallsSubsystemUpdateOnTick() {\n+        FlightComputer flightComputer = new FlightComputer.Builder()\n+                .withTelemetry(telemetry)\n+                .build();\n+        MockSubsystem mockSubsystem = new MockSubsystem();\n+        flightComputer.registerSubsystem(mockSubsystem);\n+        flightComputer.tick();\n+        assertTrue(mockSubsystem.hasUpdateCalled);\n+    }\n+\n+    @Test\n+    public void flightComputerRecoversFromException() {\n+        FlightComputer flightComputer = new FlightComputer.Builder()\n+                .withTelemetry(telemetry)\n+                .build();\n+        MockSubsystem mockSubsystem = new MockSubsystem();\n+        mockSubsystem.throwError = true;\n+        flightComputer.registerSubsystem(mockSubsystem);\n+        flightComputer.tick();\n+        mockSubsystem.hasUpdateCalled = false;\n+        mockSubsystem.throwError = false;\n+        flightComputer.tick();\n+        assertTrue(mockSubsystem.hasUpdateCalled);\n+    }\n+\n+    @Test\n+    public void flightComputerReportsErrorToTelemetry() {\n+        FlightComputer flightComputer = new FlightComputer.Builder()\n+                .withTelemetry(telemetry)\n+                .build();\n+        MockSubsystem mockSubsystem = new MockSubsystem();\n+        mockSubsystem.throwError = true;\n+        flightComputer.registerSubsystem(mockSubsystem);\n+        flightComputer.tick();\n+        assertEquals(1, this.errorList.size());\n+        assertEquals(Errors.TOP_LEVEL_EXCEPTION, this.errorList.get(0));\n+    }\n+\n+    @Test\n+    public void errorInReportErrorAllowContinuedExecution() {\n+        FlightComputer flightComputer = new FlightComputer.Builder()\n+                .withTelemetry(telemetry)\n+                .build();\n+        MockSubsystem mockSubsystem = new MockSubsystem();\n+        mockSubsystem.throwError = true;\n+        this.throwErrorOnError = true;\n+        flightComputer.registerSubsystem(mockSubsystem);\n+        flightComputer.tick();\n+        mockSubsystem.hasUpdateCalled = false;\n+        mockSubsystem.throwError = false;\n+        flightComputer.tick();\n+        assertTrue(mockSubsystem.hasUpdateCalled);\n+    }\n+\n+    @Test\n+    public void errorAllowContinuedExecutionInSameTick() {\n+        FlightComputer flightComputer = new FlightComputer.Builder()\n+                .withTelemetry(telemetry)\n+                .build();\n+        MockSubsystem mockSubsystem1 = new MockSubsystem();\n+        mockSubsystem1.throwError = true;\n+        flightComputer.registerSubsystem(mockSubsystem1);\n+        MockSubsystem mockSubsystem2 = new MockSubsystem();\n+        mockSubsystem2.throwError = false;\n+        flightComputer.registerSubsystem(mockSubsystem2);\n+        flightComputer.tick();\n+        assertTrue(mockSubsystem2.hasUpdateCalled);\n+    }\n+\n+    @Test(expected = Test.None.class)\n+    public void runOnGoodArguments() {\n+        FlightComputer flightComputer = FlightComputer.create(new String[]{\"--real-sensors\"});\n+    }\n+\n+    @Test(expected = SecurityException.class)\n+    public void exitOnBadArguments() {\n+        FlightComputer flightComputer = FlightComputer.create(new String[]{\"--fake-arguments\"});\n+    }\n+\n+    @Test(expected = SecurityException.class)\n+    public void exitOnHelp() {\n+        FlightComputer flightComputer = FlightComputer.create(new String[]{\"--help\"});\n+    }\n }"
  },
  {
    "sha": "8e9499d7fc8c3439c6ba77b191e38c41fac0d35c",
    "filename": "test/org/rocketproplab/marginalstability/flightcomputer/SensorProviderTest.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/SensorProviderTest.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/SensorProviderTest.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/test/org/rocketproplab/marginalstability/flightcomputer/SensorProviderTest.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -0,0 +1,30 @@\n+package org.rocketproplab.marginalstability.flightcomputer;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import java.lang.reflect.Field;\n+\n+\n+public class SensorProviderTest {\n+    @After\n+    public void afterEach() throws Exception {\n+        Field sensorInstance = SensorProvider.class.getDeclaredField(\"instance\");\n+        sensorInstance.setAccessible(true);\n+        sensorInstance.set(null, null);\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void switchToRealSensors() {\n+        // TODO: replace with real sensor checks when RealSensorProvider is implemented\n+        SensorProvider sensorProvider = SensorProvider.create(true);\n+        sensorProvider.getPressureSensor();\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void switchToSimulators() {\n+        // TODO: replace with simulator checks when SimulatorProvider is implemented\n+        SensorProvider sensorProvider = SensorProvider.create(true);\n+        sensorProvider.getPressureSensor();\n+    }\n+}"
  },
  {
    "sha": "a716ee337adab75aa686e4313a0efca334d8f98b",
    "filename": "test/org/rocketproplab/marginalstability/flightcomputer/looper/TestLooper.java",
    "status": "modified",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/looper/TestLooper.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/looper/TestLooper.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/test/org/rocketproplab/marginalstability/flightcomputer/looper/TestLooper.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -46,21 +46,6 @@ public double getSystemTime() {\n \r\n   }\r\n \r\n-  @Test\r\n-  public void checkSingletonInstance() {\r\n-    // get an instance of command scheduler\r\n-    Looper singletonInstance = Looper.getInstance();\r\n-\r\n-    // instance should never be null\r\n-    assertNotNull(singletonInstance);\r\n-\r\n-    // create a new command scheduler\r\n-    Looper differentScheduler = new Looper(new Time());\r\n-\r\n-    // new command scheduler must be different than singleton instance\r\n-    assertNotEquals(differentScheduler, singletonInstance);\r\n-  }\r\n-\r\n   @Test\r\n   public void testScheduleSameCommandMultipleTimes() {\r\n     Looper looper = new Looper(new Time());\r"
  },
  {
    "sha": "97f8949e05667cd37e7a8efd2b91acc7b05caee0",
    "filename": "test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestPTSubsystem.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestPTSubsystem.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestPTSubsystem.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestPTSubsystem.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -30,7 +30,7 @@\n \n   @Test(expected = NullPointerException.class)\n   public void nullADCInDefaultInstance() {\n-    PTSubsystem ptSubsystem = PTSubsystem.getInstance();\n+    PTSubsystem ptSubsystem = new PTSubsystem(null);\n     ptSubsystem.getPTValue(PTSubsystem.ChannelIndex.CH0);\n   }\n "
  },
  {
    "sha": "3ed4f2add94555aae96017f0dd4e94e0af9a7dd3",
    "filename": "test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestSCMCommandSubsystem.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/rocketproplab/Base11-FC/blob/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestSCMCommandSubsystem.java",
    "raw_url": "https://github.com/rocketproplab/Base11-FC/raw/39308401f371e8158c6bf27e0c809ffc68de458b/test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestSCMCommandSubsystem.java",
    "contents_url": "https://api.github.com/repos/rocketproplab/Base11-FC/contents/test/org/rocketproplab/marginalstability/flightcomputer/subsystems/TestSCMCommandSubsystem.java?ref=39308401f371e8158c6bf27e0c809ffc68de458b",
    "patch": "@@ -109,5 +109,6 @@ public void scheduleCommandWithFramedSCM() {\n     looper.tick();\n \n     assertTrue(factory.getCommandByFramedSCM(framedSCMData).isDone());\n+//    fail();\n   }\n }\n\\ No newline at end of file"
  }
]
