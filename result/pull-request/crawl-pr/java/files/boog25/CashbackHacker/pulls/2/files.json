[
  {
    "sha": "276466894799b36796c9bf81e430c696a7e27283",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/boog25/CashbackHacker/blob/4d8006653d45af7a9b1bdc657af93efe65344cc4/build.gradle",
    "raw_url": "https://github.com/boog25/CashbackHacker/raw/4d8006653d45af7a9b1bdc657af93efe65344cc4/build.gradle",
    "contents_url": "https://api.github.com/repos/boog25/CashbackHacker/contents/build.gradle?ref=4d8006653d45af7a9b1bdc657af93efe65344cc4",
    "patch": "@@ -10,10 +10,9 @@ repositories {\n }\n \n dependencies {\n-    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'\n-    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'\n+    testImplementation 'org.testng:testng:7.1.0'\n }\n \n test {\n-    useJUnitPlatform()\n+    useTestNG()\n }\n\\ No newline at end of file"
  },
  {
    "sha": "7243e39cb60e6f8d03faab93f490f0f8d780fe58",
    "filename": "src/test/java/ru/netology/service/CashbackTest.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/boog25/CashbackHacker/blob/4d8006653d45af7a9b1bdc657af93efe65344cc4/src/test/java/ru/netology/service/CashbackTest.java",
    "raw_url": "https://github.com/boog25/CashbackHacker/raw/4d8006653d45af7a9b1bdc657af93efe65344cc4/src/test/java/ru/netology/service/CashbackTest.java",
    "contents_url": "https://api.github.com/repos/boog25/CashbackHacker/contents/src/test/java/ru/netology/service/CashbackTest.java?ref=4d8006653d45af7a9b1bdc657af93efe65344cc4",
    "patch": "@@ -0,0 +1,39 @@\n+package ru.netology.service;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class CashbackTest {\n+    @Test\n+    public void shouldCountHowMuchToAdd100() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(900);\n+        int expected = 100;\n+        assertEquals(actual, expected);\n+    }\n+\n+    @Test\n+    public void shouldCountHowMuchToAdd999() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(1001);\n+        int expected = 999;\n+        assertEquals(actual, expected);\n+    }\n+\n+    @Test\n+    public void shouldCountHowMuchToAdd0() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(0);\n+        int expected = 1000;\n+        assertEquals(actual, expected);\n+    }\n+\n+    @Test\n+    public void shouldCountHowMuchToAddZero() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(1000);\n+        int expected = 0;\n+        assertEquals(actual, expected);\n+    }\n+}\n\\ No newline at end of file"
  }
]
