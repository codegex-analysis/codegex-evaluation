[
  {
    "sha": "d42bb6a5c57b6b4821c94b791cd516b5c48ef917",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/boog25/CashbackHacker/blob/69137272f03c09464f713796d1122f27eedaa6f8/build.gradle",
    "raw_url": "https://github.com/boog25/CashbackHacker/raw/69137272f03c09464f713796d1122f27eedaa6f8/build.gradle",
    "contents_url": "https://api.github.com/repos/boog25/CashbackHacker/contents/build.gradle?ref=69137272f03c09464f713796d1122f27eedaa6f8",
    "patch": "@@ -10,10 +10,9 @@ repositories {\n }\n \n dependencies {\n-    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'\n-    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'\n+    testImplementation 'junit:junit:4.13'\n }\n \n test {\n-    useJUnitPlatform()\n+    useJUnit()\n }\n\\ No newline at end of file"
  },
  {
    "sha": "345accb3d878351fb6e3288e2970d64afbe97b78",
    "filename": "src/test/java/ru/netology/service/CashbackTest.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/boog25/CashbackHacker/blob/69137272f03c09464f713796d1122f27eedaa6f8/src/test/java/ru/netology/service/CashbackTest.java",
    "raw_url": "https://github.com/boog25/CashbackHacker/raw/69137272f03c09464f713796d1122f27eedaa6f8/src/test/java/ru/netology/service/CashbackTest.java",
    "contents_url": "https://api.github.com/repos/boog25/CashbackHacker/contents/src/test/java/ru/netology/service/CashbackTest.java?ref=69137272f03c09464f713796d1122f27eedaa6f8",
    "patch": "@@ -0,0 +1,39 @@\n+package ru.netology.service;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class CashbackTest {\n+    @Test\n+    public void shouldCountHowMuchToAdd100() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(900);\n+        int expected = 100;\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldCountHowMuchToAdd999() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(1001);\n+        int expected = 999;\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldCountHowMuchToAdd0() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(0);\n+        int expected = 1000;\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldCountHowMuchToAddZero() {\n+        Cashback service = new Cashback();\n+        int actual = service.remain(1000);\n+        int expected = 0;\n+        assertEquals(expected, actual);\n+    }\n+}\n\\ No newline at end of file"
  }
]
