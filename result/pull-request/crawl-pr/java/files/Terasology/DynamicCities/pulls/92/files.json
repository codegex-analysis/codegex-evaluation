[
  {
    "sha": "8a0164e4adbff017c4f8fe2c9033e148d423d32e",
    "filename": "src/test/java/regions/RegionEntitiesTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/Terasology/DynamicCities/blob/f0c4f03c39fd77a51ffb0df122f504bbf5d5b457/src/test/java/regions/RegionEntitiesTest.java",
    "raw_url": "https://github.com/Terasology/DynamicCities/raw/f0c4f03c39fd77a51ffb0df122f504bbf5d5b457/src/test/java/regions/RegionEntitiesTest.java",
    "contents_url": "https://api.github.com/repos/Terasology/DynamicCities/contents/src/test/java/regions/RegionEntitiesTest.java?ref=f0c4f03c39fd77a51ffb0df122f504bbf5d5b457",
    "patch": "@@ -16,39 +16,39 @@\n \n package regions;\n \n-import com.google.common.collect.Sets;\n import org.joml.RoundingMode;\n import org.joml.Vector2i;\n import org.joml.Vector3f;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mockito;\n import org.terasology.dynamicCities.region.RegionEntityManager;\n import org.terasology.entitySystem.entity.EntityRef;\n import org.terasology.logic.location.LocationComponent;\n-import org.terasology.moduletestingenvironment.ModuleTestingEnvironment;\n+import org.terasology.moduletestingenvironment.IsolatedMTEExtension;\n+import org.terasology.moduletestingenvironment.extension.Dependencies;\n+import org.terasology.registry.In;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Set;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-public class RegionEntitiesTest extends ModuleTestingEnvironment {\n-    private RegionEntityManager regionEntityManager;\n+\n+@ExtendWith(IsolatedMTEExtension.class)\n+@Dependencies({\"engine\", \"ModuleTestingEnvironment\", \"DynamicCities\"})\n+public class RegionEntitiesTest {\n+    @In\n+    protected RegionEntityManager regionEntityManager;\n \n     private EntityRef[] test;\n     private Vector3f[] pos = new Vector3f[10];\n \n-    @Override\n-    public Set<String> getDependencies() {\n-        return Sets.newHashSet(\"engine\", \"DynamicCities\", \"ModuleTestingEnvironment\");\n-    }\n-\n     @BeforeEach\n     public void setupEntityRefs() {\n         pos[0] = new Vector3f(16, 0, 16);\n@@ -62,8 +62,6 @@ public void setupEntityRefs() {\n         pos[8] = new Vector3f(-32, 0, -32);\n         pos[9] = new Vector3f(97, 0, -97);\n \n-        regionEntityManager = getHostContext().get(RegionEntityManager.class);\n-\n         test = new EntityRef[10];\n         LocationComponent[] loc = new LocationComponent[test.length];\n         for (int i = 0; i < test.length; i++) {"
  }
]
