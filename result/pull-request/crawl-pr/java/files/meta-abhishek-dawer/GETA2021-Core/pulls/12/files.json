[
  {
    "sha": "f44efadfc2249c1cacc4a1186e1b886450cd157b",
    "filename": "GET 2021/ExcelFiles/inputSheet.xlsx",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/ExcelFiles/inputSheet.xlsx",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/ExcelFiles/inputSheet.xlsx",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/ExcelFiles/inputSheet.xlsx?ref=749e5e424266a0d03397a75e1104f869ed817b98"
  },
  {
    "sha": "fba34a904581ece81bc34af2d7aad5bc4468deed",
    "filename": "GET 2021/src/DSA_Assignment2/CharStack.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/CharStack.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/CharStack.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/DSA_Assignment2/CharStack.java?ref=749e5e424266a0d03397a75e1104f869ed817b98",
    "patch": "@@ -0,0 +1,55 @@\n+package DSA_Assignment2;\r\n+/**\r\n+ * Class to define character stack and its methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class CharStack {\r\n+    final StringBuilder newStringBuilder= new StringBuilder();\r\n+    /**\r\n+     * Method to insert value in stack\r\n+     * @param value containing value to be inserted in stack\r\n+     */\r\n+    public void push(char value) {\r\n+    \tnewStringBuilder.append(value);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to remove value from stack\r\n+     * @return value of type char\r\n+     */\r\n+    public char pop() {\r\n+    \tint last = newStringBuilder.length()-1;\r\n+    \tchar character = newStringBuilder.charAt(last);\r\n+    \tnewStringBuilder.setLength(last);\r\n+    \treturn character;\r\n+    }\r\n+    \r\n+    /**\r\n+     * method to get size of stack\r\n+     * @return length of stack of type int\r\n+     */\r\n+    public int size() {\r\n+    \treturn newStringBuilder.length();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to get element at peek of stack\r\n+     * @return value of type char\r\n+     */\r\n+    public char peek() {\r\n+    \treturn newStringBuilder.charAt(newStringBuilder.length()-1);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to check stamp is empty or not\r\n+     * @return true if stack is empty else false\r\n+     */\r\n+    public boolean isEmpty() {\r\n+    \tif(newStringBuilder.length()==0)\r\n+    \t\treturn true;\r\n+    \telse\r\n+    \t\treturn false;\r\n+    }\r\n+    \r\n+}\r"
  },
  {
    "sha": "729f3957bc57d8a739dbe25f93bb02ee88564339",
    "filename": "GET 2021/src/DSA_Assignment2/CounselingProcess.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/CounselingProcess.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/CounselingProcess.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/DSA_Assignment2/CounselingProcess.java?ref=749e5e424266a0d03397a75e1104f869ed817b98",
    "patch": "@@ -0,0 +1,92 @@\n+package DSA_Assignment2;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileOutputStream;\r\n+import java.util.ArrayList;\r\n+import java.util.LinkedHashMap;\r\n+import java.util.Map;\r\n+import java.util.Scanner;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.poi.ss.usermodel.Cell;\r\n+import org.apache.poi.ss.usermodel.Row;\r\n+import org.apache.poi.xssf.usermodel.XSSFCell;\r\n+import org.apache.poi.xssf.usermodel.XSSFRow;\r\n+import org.apache.poi.xssf.usermodel.XSSFSheet;\r\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n+\r\n+public class CounselingProcess {\r\n+\r\n+\tpublic static void main(String[] args) throws Exception {\r\n+\t\tScanner scanner = new Scanner(System.in);\r\n+\t\tSystem.out.println(\"Please enter the number of programs:- \");\r\n+\t\tint numberOfPrograms = scanner.nextInt();\r\n+\t\tLinkedHashMap<String, Integer> newHashMap = new LinkedHashMap<>();\r\n+\t\tArrayList<String> newArrayList = new ArrayList<>();\r\n+\t\t\r\n+\t\tfor(int i=0; i< numberOfPrograms; i++) {\r\n+\t\t\tSystem.out.println(\"Enter the program with capacity of students..\");\r\n+\t\t\tString programName = scanner.next();\r\n+\t\t\tint capacity = scanner.nextInt();\r\n+\t\t\t//newHashMap.put(programName, capacity);\r\n+\t\t\tfor(int j = 0; j< capacity; j++)\r\n+\t\t\t\tnewArrayList.add(programName);\r\n+\t\t}\r\n+\t\t\r\n+\t\tLinkedHashMap<String, Object[]> outputHashMap = new LinkedHashMap<String, Object[]>();\r\n+\t\t\r\n+\t\tString inputFilePath = \"C:/Users/abhishek.dawer_metac/git/GETA2021-Core/GET 2021/ExcelFiles/inputSheet.xlsx\";\r\n+\t\tXSSFWorkbook workbook = new XSSFWorkbook(new File(inputFilePath));\r\n+\t\tXSSFSheet sheet = workbook.getSheet(\"Sheet1\"); // method to get input sheet1\r\n+\t\t\r\n+\t\tint numberOfRows = sheet.getLastRowNum(); //fetching the number of rows\r\n+\t\tint numberOfColumns = sheet.getRow(1).getLastCellNum();\r\n+\t\t\r\n+\t\tString[][] studentArray = new String[numberOfRows][6];\r\n+\t\t\r\n+\t\tfor(int i = 1; i<= numberOfRows; i++) {\r\n+\t\t\tXSSFRow particularRow = sheet.getRow(i);\r\n+\t\t\tfor(int j = 1; j<= numberOfColumns-1; j++) {\r\n+\t\t\t\tXSSFCell cell = particularRow.getCell(j);\r\n+\t\t\t\tString fetchValue = cell.getStringCellValue();\r\n+\t\t\t\t//System.out.print(fetchName+\" \");\r\n+\t\t\t\tstudentArray[i-1][j-1] = fetchValue;\r\n+\t\t\t}\r\n+\t\t\t//System.out.println();\r\n+\t\t}\r\n+        int columnInArray =6;\r\n+        \r\n+\t\tfor(int i =0; i< studentArray.length; i++) {\r\n+\t\t\tint flag = 0;\r\n+\t\t\tfor(int j=1;j< columnInArray ; j++) {\r\n+\t\t\t\tif(newArrayList.contains(studentArray[i][j])) {\r\n+\t\t\t\t\toutputHashMap.put(String.valueOf(i),new Object[]{studentArray[i][0], studentArray[i][j]});\r\n+\t\t\t\t\tnewArrayList.remove(studentArray[i][j]);\r\n+\t\t\t\t\tflag = 1;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif(flag == 0)\r\n+\t\t\t\toutputHashMap.put(String.valueOf(i), new Object[]{studentArray[i][0], \"Program not allocated\"});\r\n+\t\t}\r\n+\t\t\r\n+\t   \r\n+\t\tXSSFSheet sheet2 = workbook.getSheet(\"Sheet2\");\r\n+\t\tint row1 = 0;\r\n+\t\t//XSSFRow particularRow1 = sheet2.createRow(row1++);\r\n+\t\tSet<String> keyset = outputHashMap.keySet();\r\n+\t\tfor(String key : keyset) {\r\n+\t\t\tRow row = sheet2.createRow(row1++);\r\n+\t\t\tObject[] objectArray = outputHashMap.get(key);\r\n+\t\t\tint cellNumber =0;\r\n+\t\t\tfor(Object object : objectArray) {\r\n+\t\t\t\tSystem.out.println((String)object);\r\n+\t\t\t\tCell cell = row.createCell(cellNumber++);\r\n+\t\t\t\tcell.setCellValue((String)object);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tFileOutputStream newFileOutputStream = new FileOutputStream(new File(inputFilePath));\r\n+\t\tworkbook.write(newFileOutputStream);\r\n+\t\tnewFileOutputStream.close();\r\n+\t\t\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "6434d38cddb422a590ae981fe089bc64cb0be856",
    "filename": "GET 2021/src/DSA_Assignment2/InfixExpression.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/InfixExpression.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/InfixExpression.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/DSA_Assignment2/InfixExpression.java?ref=749e5e424266a0d03397a75e1104f869ed817b98",
    "patch": "@@ -0,0 +1,95 @@\n+package DSA_Assignment2;\r\n+import java.util.Scanner;\r\n+\r\n+/**\r\n+ * Class to find infix expression of String\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class InfixExpression {\r\n+\r\n+\tpublic static void main(String[] args) {\r\n+        Scanner scanner = new Scanner(System.in);\r\n+        String infix = scanner.next();\r\n+        InfixExpression newInfixExpression = new InfixExpression();\r\n+        int result= newInfixExpression.evaluateExpression(infix);\r\n+        System.out.println(result);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to evaluate the infix expression\r\n+\t * @param expression contains value of Infix\r\n+\t * @return evaluated value of type int\r\n+\t */\r\n+    public static int evaluateExpression(String expression) {\r\n+    \tStack newStack = new Stack();\r\n+    \tCharStack operations = new CharStack();\r\n+    \tchar[] characterArr = expression.toCharArray();\r\n+    \tfor(int i=0;i<characterArr.length;i++) {\r\n+    \t\tif(characterArr[i]== ' ')\r\n+    \t\t\tcontinue;\r\n+    \t\tif(characterArr[i]>= '0' && characterArr[i]<='9') {\r\n+    \t\t\tStringBuffer newStringBuffer = new StringBuffer();\r\n+    \t\t\twhile(i< characterArr.length && characterArr[i]>='0' && characterArr[i]<='9')\r\n+    \t\t\t\tnewStringBuffer.append(characterArr[i++]);\r\n+    \t\t\tnewStack.push(Integer.parseInt(newStringBuffer.toString()));\r\n+    \t\t\ti--;\r\n+    \t\t}\r\n+    \t\telse if(characterArr[i]=='(')\r\n+    \t\t\toperations.push(characterArr[i]);\r\n+    \t\telse if(characterArr[i]==')') {\r\n+    \t\t\twhile(operations.peek()!='(')\r\n+    \t\t\t\tnewStack.push(applyOperations(operations.pop(),newStack.pop(),newStack.pop()));\r\n+    \t\t\t\r\n+    \t\t\toperations.pop();\r\n+    \t\t}\r\n+    \t\telse if(characterArr[i]== '+' || characterArr[i]== '-' || characterArr[i]== '*' || characterArr[i]== '/') {\r\n+    \t\t\twhile(!operations.isEmpty() && isPrecedence(characterArr[i], operations.peek()))\r\n+    \t\t\t\tnewStack.push(applyOperations(operations.pop(), newStack.pop(), newStack.pop()));\r\n+    \t\t\t\r\n+    \t\t\toperations.push(characterArr[i]);\r\n+    \t\t}\r\n+    \t}\r\n+    \twhile(!operations.isEmpty()) \r\n+    \t\tnewStack.push(applyOperations(operations.pop(), newStack.pop(), newStack.pop()));\r\n+    \treturn newStack.pop();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to check precedence\r\n+     * @param value1 containing the first character value\r\n+     * @param value2 containing the second precedence value\r\n+     * @return true if follow precedence else return false\r\n+     */\r\n+    public static boolean isPrecedence(char value1, char value2) {\r\n+    \tif(value2=='(' || value2==')')\r\n+    \t\treturn false;\r\n+    \tif((value1=='*' || value1== '/') && (value2=='+' || value2=='-'))\r\n+    \t\treturn false;\r\n+    \telse \r\n+    \t\treturn true;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to perform operations on two numbers\r\n+     * @param operations contains operator \r\n+     * @param value2 contains the second number\r\n+     * @param value1 contains the first number\r\n+     * @return calculated value of type int\r\n+     */\r\n+    public static int applyOperations(char operations, int value2, int value1) {\r\n+    \tswitch(operations) {\r\n+    \tcase '+':\r\n+    \t\treturn value1 + value2;\r\n+    \tcase '-':\r\n+    \t\treturn value1 - value2;\r\n+    \tcase '*':\r\n+    \t\treturn value1 * value2;\r\n+    \tcase '/':\r\n+    \t\tif(value2==0)\r\n+    \t\t\tthrow new UnsupportedOperationException(\"Cannot divide by zero\");\r\n+    \t\treturn value1/value2;\r\n+    \t}\r\n+    \treturn 0;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "0d7240c343eb968bd297c21a24d6f9ce72c98d35",
    "filename": "GET 2021/src/DSA_Assignment2/Queue.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/Queue.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/Queue.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/DSA_Assignment2/Queue.java?ref=749e5e424266a0d03397a75e1104f869ed817b98",
    "patch": "@@ -0,0 +1,98 @@\n+package DSA_Assignment2;\r\n+\r\n+import java.util.Scanner;\r\n+\r\n+/**\r\n+ * Class queue implementing queue Interface and its methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Queue implements QueueInterface{\r\n+\tpublic int currentSize, maxSize;\r\n+    public int[] queueElements;\r\n+    \r\n+    public int rear, front;\r\n+    \r\n+    /**\r\n+     * Constructor of a Queue\r\n+     * @param size containing size for array\r\n+     */\r\n+    public Queue(int size) {\r\n+    \tthis.maxSize = size;\r\n+    \tqueueElements = new int[this.maxSize];\r\n+    \tcurrentSize = 0;\r\n+    \trear = -1;\r\n+    \tfront = -1;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to insert value in queue\r\n+     * @param value contain value to be inserted in queue\r\n+     */\r\n+    public void enQueue(int value) {\r\n+    \tif(isFull())\r\n+    \t\tSystem.out.println(\"Queue is full!!\");\r\n+    \telse {\r\n+    \t\trear = (rear + 1) % queueElements.length;\r\n+    \t\tqueueElements[rear] = value;\r\n+    \t\tcurrentSize++;\r\n+    \t\tif(front == -1)\r\n+    \t\t\tfront = rear;\r\n+    \t}\r\n+    }\r\n+    \r\n+    /**\r\n+     * method to remove first element from queue\r\n+     */\r\n+    public int deQueue() {\r\n+    \tint elementDequeued;\r\n+    \tif(isEmpty()) {\r\n+    \t\tSystem.out.println(\"queue is empty!! So, return -1\");\r\n+    \t\treturn -1;\r\n+    \t}\r\n+    \telse {\r\n+    \t\telementDequeued = queueElements[front];\r\n+    \t\tqueueElements[front] = 0;\r\n+    \t\tfront = (front + 1) % queueElements.length;\r\n+    \t\tcurrentSize--;\r\n+    \t\treturn elementDequeued;\r\n+    \t}\r\n+    }\r\n+    /**\r\n+     * Method to check the queue is full\r\n+     */\r\n+    public boolean isFull() {\r\n+    \tif(currentSize == queueElements.length)\r\n+    \t\treturn true;\r\n+    \telse\r\n+    \t\treturn false;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to check queue is empty\r\n+     */\r\n+    public boolean isEmpty() {\r\n+    \tif(currentSize == 0)\r\n+    \t\treturn true;\r\n+    \telse\r\n+    \t\treturn false;\r\n+    }\r\n+    \r\n+\tpublic static void main(String[] args) {\r\n+\t\tScanner scanner = new Scanner(System.in);\r\n+\t\tSystem.out.println(\"Please enter the queue size.\");\r\n+\t\tint queueSize = scanner.nextInt();\r\n+        Queue newQueue = new Queue(queueSize);\r\n+        int[] arr= new int[queueSize];\r\n+        for(int i = 0; i < queueSize; i++)\r\n+        \tarr[i] = scanner.nextInt();\r\n+        \r\n+        for(int i = 0; i < queueSize; i++)\r\n+        \tnewQueue.enQueue(arr[i]);\r\n+        \r\n+        System.out.println(\"Dequeue element from queue:- \"+ newQueue.deQueue());\r\n+        newQueue.enQueue(4);\r\n+        System.out.println(\"To check Queue is empty:- \"+ newQueue.isEmpty());\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "baab4d4eaade216c8bb7d2042619933bb4d0695f",
    "filename": "GET 2021/src/DSA_Assignment2/QueueInterface.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/QueueInterface.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/QueueInterface.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/DSA_Assignment2/QueueInterface.java?ref=749e5e424266a0d03397a75e1104f869ed817b98",
    "patch": "@@ -0,0 +1,13 @@\n+package DSA_Assignment2;\r\n+\r\n+/**\r\n+ * Interface of queue in which we declare different methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public interface QueueInterface {\r\n+    public void enQueue(int value);\r\n+    public int deQueue();\r\n+    public boolean isEmpty();\r\n+    public boolean isFull();\r\n+}\r"
  },
  {
    "sha": "a4b4f07e055e6d2877ca7027d6710a63f3d62e3c",
    "filename": "GET 2021/src/DSA_Assignment2/Stack.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/Stack.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/Stack.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/DSA_Assignment2/Stack.java?ref=749e5e424266a0d03397a75e1104f869ed817b98",
    "patch": "@@ -0,0 +1,68 @@\n+package DSA_Assignment2;\r\n+\r\n+/**\r\n+ * class Stack implementing stack interface and its methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Stack implements StackInterface {\r\n+\tNode root;\r\n+\tclass Node {\r\n+\t\tint data;\r\n+\t\tNode next;\r\n+\t\tNode(int value) {\r\n+\t\t\tthis.data= value;\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to insert value in Stack\r\n+\t * data containing value of type int\r\n+\t */\r\n+\tpublic void push(int data) {\r\n+\t    Node newNode = new Node(data);\r\n+\t    if(root== null)\r\n+\t    \troot = newNode;\r\n+\t    else {\r\n+\t    \tNode temp = root;\r\n+\t    \troot= newNode;\r\n+\t    \tnewNode.next= temp;\r\n+\t    }\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to remove value of stack of type int\r\n+\t */\r\n+\tpublic int pop() {\r\n+\t\tif(root== null)\r\n+\t\t    return -1;\r\n+\t\telse {\r\n+\t\t\tint popped = root.data;\r\n+\t\t\troot = root.next;\r\n+\t\t\treturn popped;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * method to check stack is empty or not\r\n+\t * return value of type boolean\r\n+\t */\r\n+\tpublic boolean isEmpty() {\r\n+\t    if(root== null)\r\n+\t\t    return true;\r\n+\t    else\r\n+\t    \treturn false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get element at peek position\r\n+\t * return value of type int\r\n+\t */\r\n+\tpublic int peek() {\r\n+\t\tif(root== null)\r\n+\t\t    return Integer.MIN_VALUE;\r\n+\t\telse\r\n+\t\t\treturn root.data;\r\n+\t}\r\n+\t\r\n+}\r"
  },
  {
    "sha": "0e402b7f075dd52b734e7f0c728ab1dc162b6b46",
    "filename": "GET 2021/src/DSA_Assignment2/StackInterface.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/StackInterface.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/749e5e424266a0d03397a75e1104f869ed817b98/GET%202021/src/DSA_Assignment2/StackInterface.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/DSA_Assignment2/StackInterface.java?ref=749e5e424266a0d03397a75e1104f869ed817b98",
    "patch": "@@ -0,0 +1,13 @@\n+package DSA_Assignment2;\r\n+\r\n+/**\r\n+ * Stack interface in which we declaring methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public interface StackInterface {\r\n+    public void push(int data);\r\n+    public int pop();\r\n+    public boolean isEmpty();\r\n+    public int peek();\r\n+}\r"
  }
]
