[
  {
    "sha": "7cd478273df011b9003acbf9580e7632411ece9f",
    "filename": "GET 2021/src/Assignment_ACDT/IntSet.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/8d82ca168e478c23687bc6ff9b2cf4a27272fb41/GET%202021/src/Assignment_ACDT/IntSet.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/8d82ca168e478c23687bc6ff9b2cf4a27272fb41/GET%202021/src/Assignment_ACDT/IntSet.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/Assignment_ACDT/IntSet.java?ref=8d82ca168e478c23687bc6ff9b2cf4a27272fb41",
    "patch": "@@ -0,0 +1,130 @@\n+package Assignment_ACDT;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.Scanner;\r\n+public class IntSet {\r\n+\t\r\n+\tstatic Scanner scanner = new Scanner(System.in);\r\n+\tprivate int[] arrSet; \r\n+\t\r\n+\t// to check value is present or not in set\r\n+\tpublic boolean isMember(int value){\r\n+\t\tfor(int i= 0; i< this.arrSet.length; i++){\r\n+\t\t\tif(value== this.arrSet[i])\r\n+\t\t\t\treturn true;\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\t\r\n+\t// function to check size of set array\r\n+\tpublic int size(){\r\n+\t\treturn this.arrSet.length;\r\n+\t}\r\n+\t\r\n+\t//to check subset array of other\r\n+\tpublic boolean isSubSet(IntSet s){\r\n+\t\tint i=0, j=0;\r\n+\t\tfor( i=0; i< s.arrSet.length; i++){\r\n+\t\t\tfor(j=0; j< this.arrSet.length; j++){\r\n+\t\t\t\tif(s.arrSet[i]== this.arrSet[j])\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\tif(j== this.arrSet.length)\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\t\r\n+\t//function for union of two set\r\n+\tpublic IntSet unionOfSets(IntSet s1, IntSet s2){\r\n+\t\tHashSet<Integer> newHashSet = new HashSet<>();\r\n+\t\tfor(int i=0; i< s1.arrSet.length; i++)\r\n+\t\t\tnewHashSet.add(s1.arrSet[i]);\r\n+\t\t  \r\n+\t\tfor(int j= 0; j<s2.arrSet.length; j++)\r\n+\t\t\tnewHashSet.add(s2.arrSet[j]);\r\n+\t\t\r\n+\t\tIntSet unionResult = new IntSet();\r\n+\t\tunionResult.arrSet = new int[newHashSet.size()];\r\n+\t\tint length=0;\r\n+\t\tIterator<Integer> i1 = newHashSet.iterator();\r\n+\t\twhile(i1.hasNext()) {\r\n+\t\t\tunionResult.arrSet[length] = i1.next();\r\n+\t\t\tlength++;\r\n+\t\t}\r\n+\t\treturn unionResult;\r\n+\t}\r\n+\t\r\n+\tpublic IntSet getComplement() {\r\n+\t\tint k=0;\r\n+\t\tIntSet result = new IntSet();\r\n+\t\tHashSet<Integer> newHashSet = new HashSet<Integer>();\r\n+\t\tfor(int i=1; i<= 1000;i++) {\r\n+\t\t\tint flag=0;\r\n+\t\t\tfor(int j= 0; j< this.arrSet.length; j++) {\r\n+\t\t\t\tif(this.arrSet[j]== i) {\r\n+\t\t\t\t\tflag=1;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif(flag== 0) {\r\n+\t\t\t\tnewHashSet.add(i);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tresult.arrSet = new int[newHashSet.size()];\r\n+\t\tint length=0;\r\n+\t\tIterator<Integer> i1 = newHashSet.iterator();\r\n+\t\twhile(i1.hasNext()) {\r\n+\t\t\tresult.arrSet[length] = i1.next();\r\n+\t\t\tlength++;\r\n+\t\t}\r\n+\t\treturn result;\r\n+\t}\r\n+\t\r\n+\tpublic void inputSet() {\r\n+\t\tSystem.out.println(\"enter the number of set values you want to add\");\r\n+\t\tint inputSize = scanner.nextInt();\r\n+\t\tSystem.out.println(\"please enter the set value in range 1 - 1000\");\r\n+\t\tint[] arr = new int[inputSize]; \r\n+\t\tfor(int i=0; i< inputSize; i++){\r\n+\t\t\tarr[i] = scanner.nextInt();\r\n+\t\t}\r\n+\t\tint k=0;\r\n+\t\tArrays.sort(arr);\r\n+\t\tarrSet = new int[inputSize];\r\n+\t\tfor(int j= 0; j< inputSize - 1; j++){\r\n+\t\t\tif(arr[j]!= arr[j + 1])\r\n+\t\t\t\tarrSet[k++] = arr[j];\r\n+\t\t}\r\n+\t\tarrSet[k++] = arr[inputSize - 1];\r\n+\t}\r\n+\t\r\n+\tpublic static void main(String[] args) {\r\n+\t\tIntSet newIntSet = new IntSet();\r\n+\t\tnewIntSet.inputSet();\r\n+\t\tint isValueMember = scanner.nextInt();\r\n+\t\tboolean memberResult= newIntSet.isMember(isValueMember);\r\n+\t\tSystem.out.println(memberResult);\r\n+\t\tint setLength= newIntSet.size();\r\n+\t\tSystem.out.println(setLength);\r\n+\r\n+\t\tIntSet newIntSet2 = new IntSet();\r\n+\t\tSystem.out.println(\"Enter the input of subset\");\r\n+\t\tnewIntSet2.inputSet();\r\n+\t\tboolean subsetResult = newIntSet.isSubSet(newIntSet2);\r\n+\t\tSystem.out.println(\"Enter set is subset:- \"+subsetResult);\r\n+\t\t\r\n+\t\tSystem.out.println(\"Union of two sets\");\r\n+\t\tIntSet unionSet= newIntSet.unionOfSets(newIntSet, newIntSet2);\r\n+\t\tfor(int i=0; i< unionSet.arrSet.length; i++)\r\n+\t\t\tSystem.out.print(unionSet.arrSet[i]+\" \");\r\n+\t\tSystem.out.println();\r\n+\t\t\r\n+\t\tSystem.out.println(\"Complement of a set is:- \");\r\n+\t\tIntSet complementSet= newIntSet.getComplement();\r\n+\t\tfor(int i=0; i< complementSet.arrSet.length; i++)\r\n+\t\t\tSystem.out.print(complementSet.arrSet[i]+\" \");\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "75a701cafce6971afa33e5cc41d54ddea91f106a",
    "filename": "GET 2021/src/Assignment_ACDT/Poly.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/8d82ca168e478c23687bc6ff9b2cf4a27272fb41/GET%202021/src/Assignment_ACDT/Poly.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/8d82ca168e478c23687bc6ff9b2cf4a27272fb41/GET%202021/src/Assignment_ACDT/Poly.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/Assignment_ACDT/Poly.java?ref=8d82ca168e478c23687bc6ff9b2cf4a27272fb41",
    "patch": "@@ -0,0 +1,119 @@\n+package Assignment_ACDT;\r\n+\r\n+import java.util.Scanner;\r\n+\r\n+public class Poly {\r\n+    static Scanner scanner = new Scanner(System.in);\r\n+    private int[] cofficient;\r\n+\t\r\n+\t/**\r\n+\t * Method to get degree of a polynomial\r\n+\t * @return degree\r\n+\t */\r\n+\tprivate int degree(){\r\n+\t\treturn cofficient.length-1;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to add two polynomial\r\n+\t * @param p1 object of first polynomial\r\n+\t * @param p2 object of second polynomial\r\n+\t * @return addResult object by calculating sum\r\n+\t */\r\n+\tprivate Poly addPoly(Poly p1, Poly p2){\r\n+\t\tint size1 = p1.cofficient.length;\r\n+\t\tint size2 = p2.cofficient.length;\t\r\n+\t\tint size = Math.max(size1, size2);\r\n+\t\tPoly addResult = new Poly();\r\n+\t\taddResult.cofficient = new int[size];\r\n+\t\t\r\n+\t\tfor(int i= 0; i< size1;i++)\r\n+\t\t\taddResult.cofficient[i] = p1.cofficient[i];\r\n+\t\t\t\r\n+\t\tfor(int i= 0; i< size2; i++)\r\n+\t\t\taddResult.cofficient[i] += p2.cofficient[i];\r\n+\t\t\t\r\n+\t\treturn addResult;\r\n+\t}\r\n+\t\t\r\n+\t/**\r\n+\t * Method to multiply two polynomial\r\n+\t * @param p1 object of first polynomial\r\n+\t * @param p2 object of second polynomial\r\n+\t * @return multiplyResult object by calculating multiply\r\n+\t */\r\n+\tprivate Poly multiplyPoly(Poly p1, Poly p2){\r\n+\t\tint size1 = p1.cofficient.length;\r\n+\t\tint size2 = p2.cofficient.length;\r\n+\t\tPoly multiplyResult= new Poly();\t\r\n+\t\tmultiplyResult.cofficient = new int[size1 + size2 - 1];\r\n+\t\tfor(int i= 0; i< size1 + size2 - 1; i++)\r\n+\t\t\tmultiplyResult.cofficient[i] =0;\r\n+\t\t\t\r\n+\t\tfor(int i= 0; i< size1; i++){\r\n+\t\t\tfor(int j= 0; j< size2; j++){\r\n+\t\t\t\tmultiplyResult.cofficient[i+j] += p1.cofficient[i] * p2.cofficient[j];\r\n+\t\t\t}\r\n+\t\t}\t\r\n+\t\treturn multiplyResult;\r\n+\t}\r\n+\t\t\r\n+\t/**\r\n+\t * Method to evaluate Polynomial\r\n+\t * @param value for which we solve equation\r\n+\t * @return result by solving equation\r\n+\t */\r\n+\tprivate float evaluate(float value){\r\n+\t\tfloat result = this.cofficient[0];\r\n+\t\tfor(int i= 1; i< this.cofficient.length; i++){\r\n+\t\t\tresult = result + (float)(this.cofficient[i] * Math.pow(value, i));\r\n+\t\t}\r\n+\t    return result;\r\n+\t}\r\n+\t/**\r\n+\t * Method for taking input of a polynomial\r\n+\t */\r\n+\tpublic void input() {\r\n+\t\tint equationLength= 0;\r\n+\t\tSystem.out.println(\"please enter the number for length of equation\");\r\n+\t\tequationLength = scanner.nextInt();\r\n+\t    this.cofficient = new int[equationLength];\r\n+\t    System.out.println(\"please enter values to make equation:-\");\r\n+\t    for(int i= 0; i< equationLength ; i++)\r\n+\t\t    this.cofficient[i] = scanner.nextInt();\r\n+\t}\r\n+\t/**\r\n+\t * Method for taking output of a polynomial\r\n+\t */\r\n+\tprivate void showPolynomial(){\r\n+\t    for(int i= this.cofficient.length-1; i> 0; i--){\r\n+\t\t    System.out.print(this.cofficient[i] + \"x\" + i + \" + \");\r\n+\t\t}\r\n+\t    System.out.print(this.cofficient[0]);\r\n+\t\tSystem.out.println();\r\n+\t}\r\n+\t\r\n+\tpublic static void main(String[] args) {\r\n+\t\tPoly newPoly = new Poly();\r\n+\t\tnewPoly.input();\r\n+\t\tnewPoly.showPolynomial();\r\n+\t\tint degreeResult = newPoly.degree();\r\n+\t\tSystem.out.println(\"Degree of a polynomial:- \"+degreeResult);\r\n+\t\t\r\n+\t\tint valueForEvaluation = scanner.nextInt();\r\n+\t\tfloat evaluationResult= newPoly.evaluate(valueForEvaluation);\r\n+\t\tSystem.out.println(\"ï¿½valuation of polynomial:- \"+ evaluationResult );\r\n+\t\t\r\n+\t\tPoly newPoly2 = new Poly();\r\n+\t\tnewPoly2.input();\r\n+\t\tnewPoly2.showPolynomial();\r\n+\t\tSystem.out.println(\"Addition of two polynomial:- \");\r\n+\t\tPoly addResult= newPoly.addPoly(newPoly, newPoly2);\r\n+\t\taddResult.showPolynomial();\r\n+\t\t\r\n+\t\tSystem.out.println(\"multiplication of two polynomial:- \");\r\n+\t\tPoly multiplyResult= newPoly.multiplyPoly(newPoly, newPoly2);\r\n+\t\tmultiplyResult.showPolynomial();\r\n+\t}\r\n+}\r\n+\r"
  }
]
