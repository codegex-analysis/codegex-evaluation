[
  {
    "sha": "a8a9897acbf462bc362fc2cd704b33f1596433c0",
    "filename": "GET 2021/src/GraphicsLibrary/Circle.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Circle.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Circle.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Circle.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,87 @@\n+package GraphicsLibrary;\r\n+import java.sql.Timestamp;\r\n+import java.util.Date;\r\n+\r\n+/**\r\n+ * Class Circle implementing interface shape and its methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Circle implements Shape {\r\n+\tdouble radius;\r\n+\tPoint origin;\r\n+\tTimestamp timeStamp;\r\n+    final String shapeType = Shape.shapeType.CIRCLE.toString();\r\n+\t/**\r\n+\t * Constructor of a circle\r\n+\t * @param originValue containing coordinate of shape on x axis and y axis\r\n+\t * @param radius containing radius of circle\r\n+\t */\r\n+    Circle(Point originValue, Double radius) {\r\n+    \tthis.origin = originValue;\r\n+    \tthis.radius = radius;\r\n+    \ttimeStamp = new Timestamp(new Date().getTime());\r\n+    }\r\n+\r\n+    /**\r\n+     * Method to get the type of Shape\r\n+     */\r\n+\tpublic String getType() {\r\n+\t\treturn shapeType;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get area of Circle\r\n+\t */\r\n+\tpublic double getArea() {\r\n+\t\tdouble pi = 3.14;;\r\n+\t\treturn pi * radius * radius;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get area of Perimeter \r\n+\t */\r\n+\tpublic double getPerimeter() {\r\n+\t\tdouble pi = 3.14;\r\n+\t\tint number = 2;\r\n+\t\treturn number * pi * radius;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to check the point is enclosed or not\r\n+\t */\r\n+\tpublic boolean isPointEnclosed(Point point) {\r\n+\t\tdouble result = distanceOfTwoPoints(point, origin);\r\n+\t\t if(result>= radius)\r\n+\t\t     return true;\r\n+\t\t else\r\n+\t\t     return false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to check the origin point\r\n+\t */\r\n+\tpublic Point getOrigin() {\r\n+\t\treturn origin;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * method to get the Time of shape added\r\n+\t */\r\n+\tpublic Timestamp getTimestamp() {\r\n+\t\treturn timeStamp;\r\n+\t}\r\n+\t\r\n+    /**\r\n+     * Method to check the distance between two points \r\n+     * @param point1 containing object1\r\n+     * @param point2 containing object2\r\n+     * @return value of type double\r\n+     */\r\n+\tpublic static double distanceOfTwoPoints(Point point1, Point point2) {\r\n+\t\tdouble xValue = point1.xAxisCoordinate - point2.xAxisCoordinate;\r\n+\t\tdouble yValue = point1.yAxisCoordinate - point2.yAxisCoordinate;\r\n+\t\t\r\n+\t\treturn Math.sqrt(Math.pow(xValue, 2) + Math.pow(yValue, 2));\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "b16dc20169af83af60c44b1a645b85c451da087d",
    "filename": "GET 2021/src/GraphicsLibrary/Point.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Point.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Point.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Point.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,19 @@\n+package GraphicsLibrary;\r\n+\r\n+/**\r\n+ * Class point in which we define coordinates\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Point {\r\n+    double xAxisCoordinate, yAxisCoordinate;\r\n+    /**\r\n+     * Constructor to setting the coordinate of a parrticular shape\r\n+     * @param xValue value containing coordinate of X-axis\r\n+     * @param yValue value containing coordinate of Y-axis\r\n+     */\r\n+    Point(double xValue, double yValue) {\r\n+    \tthis.xAxisCoordinate = xValue;\r\n+    \tthis.yAxisCoordinate = yValue;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "a02829713bd07b770f3cb9c826d58a4a502a4303",
    "filename": "GET 2021/src/GraphicsLibrary/Polygon.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Polygon.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Polygon.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Polygon.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,71 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.sql.Timestamp;\r\n+/**\r\n+ * Class implementing Shape interface and its methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Polygon implements Shape {\r\n+\tdouble side, numberOfSides;\r\n+\tPoint origin;\r\n+\tTimestamp timeStamp;\r\n+    final String shapeType = Shape.shapeType.POLYGON.toString();\r\n+    \r\n+    /**\r\n+     * Constructor to set the values of Polygon\r\n+     * @param originValue containing coordinate of Polygon\r\n+     * @param sideValue containing value of side\r\n+     * @param numberOfSides1 containing number of sides\r\n+     */\r\n+    public Polygon(Point originValue, double sideValue, double numberOfSides1) {\r\n+    \tthis.side = sideValue;\r\n+    \tthis.numberOfSides = numberOfSides1;\r\n+    \tthis.origin = originValue;\r\n+    }\r\n+    /**\r\n+     * Method to get the shape type\r\n+     */\r\n+\tpublic String getType() {\r\n+\t\treturn this.shapeType;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to get area of Polygon\r\n+\t */\r\n+\tpublic double getArea() {\r\n+\t\tdouble angle = Math.toRadians(180 / numberOfSides);\r\n+\t\tdouble area = (side * side* numberOfSides) / (4 * (Math.tan(angle)));\r\n+\t\treturn area;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to get perimeter of Polygon\r\n+\t */\r\n+\tpublic double getPerimeter() {\r\n+\t\treturn numberOfSides * side;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to check point is enclosed\r\n+\t */\r\n+\tpublic boolean isPointEnclosed(Point point) {\r\n+\t\tif((origin.xAxisCoordinate < point.xAxisCoordinate) || (origin.yAxisCoordinate < point.yAxisCoordinate))\r\n+\t\t    return false;\r\n+\t\treturn true;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to get origin coordinates\r\n+\t */\r\n+\tpublic Point getOrigin() {\r\n+\t\treturn new Point(origin.xAxisCoordinate, origin.yAxisCoordinate);\r\n+    }\r\n+\t\r\n+\t/**\r\n+\t * Method to get the time  \r\n+\t */\r\n+\tpublic Timestamp getTimestamp() {\r\n+\t\treturn this.timeStamp;\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "3e302daf45e425276335a1be9d0452f6eed7f28c",
    "filename": "GET 2021/src/GraphicsLibrary/Rectangle.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Rectangle.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Rectangle.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Rectangle.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,75 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.sql.Timestamp;\r\n+import java.util.Date;\r\n+\r\n+/**\r\n+ * Class implementing shape interface and its methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Rectangle implements Shape {\r\n+\tdouble length, breadth;\r\n+\tPoint origin;\r\n+\tTimestamp timeStamp;\r\n+    final String shapeType = Shape.shapeType.RECTANGLE.toString();\r\n+    \r\n+    /**\r\n+     * Constructor setting up the values of Rectangle\r\n+     * @param originValue containing coordinates of shape Rectangle\r\n+     * @param lengthValue containing length of rectangle\r\n+     * @param breadthValue containing breadth of rectangle\r\n+     */\r\n+    public Rectangle(Point originValue, double lengthValue, double breadthValue) {\r\n+        this.origin = originValue;\r\n+        this.length = lengthValue;\r\n+        this.breadth = breadthValue;\r\n+        this.timeStamp = new Timestamp(new Date().getTime());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to get the shape type\r\n+     */\r\n+\tpublic String getType() {\r\n+\t\treturn this.shapeType;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get area of Rectangle\r\n+\t */\r\n+\tpublic double getArea() {\r\n+\t\treturn this.length * this.breadth;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get perimeter of rectangle\r\n+\t */\r\n+\tpublic double getPerimeter() {\r\n+\t\tint number = 2;\r\n+\t\treturn 2 * (this.length + this.breadth);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to check point is enclosed\r\n+\t */\r\n+\tpublic boolean isPointEnclosed(Point point) {\r\n+\t\tif((origin.xAxisCoordinate < point.xAxisCoordinate) || (origin.yAxisCoordinate < point.yAxisCoordinate))\r\n+\t\t    return false;\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * method to get origin coordinates of shape\r\n+\t */\r\n+\tpublic Point getOrigin() {\r\n+\t\treturn this.origin;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get time\r\n+\t */\r\n+\tpublic Timestamp getTimestamp() {\r\n+\t\treturn this.timeStamp;\r\n+\t}\r\n+  \r\n+}\r"
  },
  {
    "sha": "2f42791844832ef1f527f1f845d749866877e2a3",
    "filename": "GET 2021/src/GraphicsLibrary/Screen.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Screen.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Screen.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Screen.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,141 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.Comparator;\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * Screen class\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Screen {\r\n+    double xAxisLength, yAxisLength;\r\n+    static ArrayList<Shape> shapesList = new ArrayList<Shape>();\r\n+    \r\n+    /**\r\n+     * Constructor for setting up the maximum screen coordinates\r\n+     * @param xAxis containing maximum values of xAxis coordinate\r\n+     * @param yAxis containing maximum value of yAxis coordinate\r\n+     */\r\n+    public Screen(double xAxis, double yAxis) {\r\n+    \tthis.xAxisLength = xAxis;\r\n+    \tthis.yAxisLength = yAxis;\r\n+    }\r\n+    /**\r\n+     * Method to add shape in screen\r\n+     * @param shape containing type of shape\r\n+     * @return shape added\r\n+     */\r\n+    public String addShape(Shape shape) {\r\n+    \tshapesList.add(shape);\r\n+    \treturn \"Shape added\";\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to delete all the specific shape from screen\r\n+     * @param type\r\n+     * @return\r\n+     */\r\n+    public String deleteSpecificShape(String type) {\r\n+    \tif(type.equals(\"\"))\r\n+    \t\treturn \"Empty value\";\r\n+    \telse {\r\n+    \t\tArrayList<Shape> specificShapesList = new ArrayList<>();\r\n+    \t\tfor(Shape shape: shapesList) {\r\n+    \t\t\tif(shape.getType().equals(type))\r\n+    \t\t\t\tspecificShapesList.add(shape);\r\n+    \t\t}\r\n+    \t\tshapesList.removeAll(specificShapesList);\r\n+    \t\treturn \"Shapes Deleted!!\";\r\n+    \t}\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to get all the added shapes\r\n+     */\r\n+    public void showAllAddedShapes() {\r\n+    \tSystem.out.println(\"List of added shapes..\");\r\n+    \tfor(Shape newShape : shapesList)\r\n+    \t\tSystem.out.println(newShape.getType());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to get shape enclosed points\r\n+     * @param point containing point\r\n+     * @return list of shapes at particular points\r\n+     */\r\n+    public List<Shape> shapeEnclosedPoints(Point point) {\r\n+    \tArrayList<Shape> listOfShapes = new ArrayList<>();\r\n+    \tfor(Shape shape: shapesList) {\r\n+    \t\tif(shape.isPointEnclosed(point)== true)\r\n+    \t\t\tlistOfShapes.add(shape);\r\n+    \t}\r\n+    \treturn listOfShapes;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to sort shape by area\r\n+     * @return list of sorted shapes\r\n+     */\r\n+    public ArrayList<Shape> sortingByArea() {\r\n+    \tArrayList<Shape> resultAfterSortedByArea = new ArrayList<Shape>(shapesList);\r\n+    \tCollections.sort(resultAfterSortedByArea, sortShapesByArea);\r\n+    \treturn resultAfterSortedByArea;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Comparator to sort shapes by area\r\n+     */\r\n+    public static Comparator<Shape> sortShapesByArea = new Comparator<Shape>() {\r\n+    \tpublic int compare(Shape newShape1, Shape newShape2) {\r\n+    \t\tif(newShape1.getArea() > newShape2.getArea())\r\n+    \t\t\treturn 1;\r\n+    \t\telse\r\n+    \t\t\treturn -1;\r\n+    \t}\r\n+    };\r\n+    \r\n+    /**\r\n+     * Method to sort shapes by Timestamp\r\n+     * @return list of sorted shapes\r\n+     */\r\n+    public List<Shape> sortingByTimeStamp() {\r\n+    \tArrayList<Shape> resultAfterSortedByTimestamp = new ArrayList<Shape>(shapesList);\r\n+    \tCollections.sort(resultAfterSortedByTimestamp, sortShapesByTimestamp);\r\n+    \treturn resultAfterSortedByTimestamp;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Comparator to ort shapes by Timestamp\r\n+     */\r\n+    public static Comparator<Shape> sortShapesByTimestamp = new Comparator<Shape>() {\r\n+    \tpublic int compare(Shape newShape1, Shape newShape2) {\r\n+    \t\treturn (newShape1.getTimestamp().compareTo(newShape2.getTimestamp()));\r\n+    \t}\r\n+    };\r\n+    \r\n+    /**\r\n+     * Method to sort shapes by Perimeter\r\n+     * @return list of sorted shapes\r\n+     */\r\n+    public List<Shape> sortinByPerimeter() {\r\n+    \tArrayList<Shape> resultAfterSortedByPerimeter = new ArrayList<Shape>(shapesList);\r\n+    \tCollections.sort(resultAfterSortedByPerimeter, sortShapesByPerimeter);\r\n+    \treturn resultAfterSortedByPerimeter;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Comparator to sort shapes by Perimeter\r\n+     */\r\n+    public static Comparator<Shape> sortShapesByPerimeter = new Comparator<Shape>() {\r\n+    \tpublic int compare(Shape newShape1, Shape newShape2) {\r\n+    \t\tif(newShape1.getPerimeter() > newShape2.getPerimeter())\r\n+    \t\t\treturn 1;\r\n+    \t\telse\r\n+    \t\t\treturn -1;\r\n+    \t}\r\n+    };\r\n+    \r\n+}\r"
  },
  {
    "sha": "40814ffad4fffd7335480baebd8eb8ce328eca93",
    "filename": "GET 2021/src/GraphicsLibrary/Shape.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Shape.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Shape.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Shape.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,20 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.sql.Timestamp;\r\n+/**\r\n+ * Interface shape containing different declared methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public interface Shape {\r\n+    String getType();\r\n+    double getArea();\r\n+    double getPerimeter();\r\n+    boolean isPointEnclosed(Point point);\r\n+    Point getOrigin();\r\n+    Timestamp getTimestamp();\r\n+    \r\n+    public static enum shapeType {\r\n+    \tSQUARE, TRIANGLE, CIRCLE, RECTANGLE, POLYGON\r\n+    }\r\n+}\r"
  },
  {
    "sha": "3923ffa8e5b5b74bc856263569d693f239c2a4cd",
    "filename": "GET 2021/src/GraphicsLibrary/ShapeFactory.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/ShapeFactory.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/ShapeFactory.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/ShapeFactory.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,48 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.util.ArrayList;\r\n+\r\n+/**\r\n+ * Factory class to create different methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class ShapeFactory {\r\n+    Shape newShape;\r\n+    /**\r\n+     * Method to create objects of different shapes\r\n+     * @param shapeType containing the type of shape\r\n+     * @param point containing coordinate of shapes\r\n+     * @param newArrayList containing the values of particular shape \r\n+     * @return object of particular created shape\r\n+     * If shape name is not correct then it throw null pointer exception\r\n+     */\r\n+    public Shape createShape(String shapeType, Point point, ArrayList<Double> newArrayList) {\r\n+    \ttry {\r\n+    \t\tif(shapeType.equals(\"Square\")) {\r\n+        \t\tnewShape = new Square(point, newArrayList.get(0));\r\n+        \t}\r\n+        \telse if(shapeType.equals(\"Circle\")) {\r\n+        \t\tnewShape = new Circle(point, newArrayList.get(0));\r\n+        \t}\r\n+        \telse if(shapeType.equals(\"Rectangle\")) {\r\n+        \t\tnewShape = new Rectangle(point, newArrayList.get(0), newArrayList.get(1));\r\n+        \t}\r\n+        \telse if(shapeType.equals(\"Triangle\")) {\r\n+        \t\tnewShape = new Triangle(point, newArrayList.get(0), newArrayList.get(1));\r\n+        \t}\r\n+        \telse if(shapeType.equals(\"Polygon\")) {\r\n+        \t\tnewShape = new Polygon(point, newArrayList.get(0), newArrayList.get(1));\r\n+        \t}\r\n+        \telse {\r\n+        \t\tnewShape = null;\r\n+        \t\tthrow new NullPointerException();\r\n+        \t}\r\n+    \t}\r\n+    \tcatch(NullPointerException e) {\r\n+    \t\tSystem.out.println(\"Invalid Input!!\");\r\n+    \t}\r\n+    \t\r\n+    \treturn newShape;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "eb9ef23652eb5d4786e2c4eb045f04fd8089c098",
    "filename": "GET 2021/src/GraphicsLibrary/ShapesMain.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/ShapesMain.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/ShapesMain.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/ShapesMain.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,69 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Scanner;\r\n+\r\n+/**\r\n+ * class in which we create different objects and different methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class ShapesMain {\r\n+\tArrayList<Double> newArrayList = new ArrayList<Double>();\r\n+\t\r\n+\tpublic static void main(String[] args) {\r\n+\t\tScanner scanner = new Scanner(System.in);\r\n+\t\tSystem.out.println(\"please enter the screen size\");\r\n+\t\tdouble xAxis = scanner.nextDouble();\r\n+\t\tdouble yAxis = scanner.nextDouble();\r\n+\t\tScreen screen= new Screen(xAxis, yAxis);\r\n+\t\t\r\n+\t\tSystem.out.println(\"Please enter points for shape1\");\r\n+\t\tint value1 = scanner.nextInt();\r\n+\t\tint value2 = scanner.nextInt();\r\n+\t\tPoint point = new Point(value1, value2);\r\n+\t\tShapeFactory newShapeFactory = new ShapeFactory();\r\n+\t\tShapesMain newShapesMain1 = new ShapesMain();\r\n+\t\t\r\n+\t\tSystem.out.println(\"Please enter side of square..\");\r\n+\t\tdouble side=  scanner.nextDouble();\r\n+\t\tnewShapesMain1.newArrayList.add(side);\r\n+\t\t\r\n+\t\tShape shape1 = newShapeFactory.createShape(\"Square\", point, newShapesMain1.newArrayList);\r\n+\t\tscreen.addShape(shape1);\r\n+\t\t\r\n+\t\tSystem.out.println(\"enter points of shape2..\");\r\n+\t\tint value3 = scanner.nextInt();\r\n+\t\tint value4 = scanner.nextInt();\r\n+\t\tPoint point2 = new Point(value3, value4);\r\n+\t\tShapesMain newShapesMain2 = new ShapesMain();\r\n+\t\t\r\n+\t\tSystem.out.println(\"Enter value of two sides\");\r\n+\t\tdouble length = scanner.nextDouble();\r\n+\t\tdouble breadth = scanner.nextDouble();\r\n+\t\tnewShapesMain2.newArrayList.add(length);\r\n+\t\tnewShapesMain2.newArrayList.add(breadth);\r\n+\t\tShape shape2 = newShapeFactory.createShape(\"Circle\", point2, newShapesMain2.newArrayList);\r\n+\t\tscreen.addShape(shape2);\r\n+\t\t\r\n+\t\tscreen.showAllAddedShapes();\r\n+\t\t\r\n+\t\tPoint point3 = new Point(value3, value4);\r\n+\t\tShapesMain newShapesMain3= new ShapesMain();\r\n+\t\tnewShapesMain3.newArrayList.add(length);\r\n+\t\tnewShapesMain3.newArrayList.add(breadth);\r\n+\t\tShape shape3 = newShapeFactory.createShape(\"Rectangle\", point3, newShapesMain3.newArrayList);\r\n+\t\tscreen.addShape(shape3);\r\n+\t\t\r\n+\t\tArrayList<Shape> shapesArea = screen.sortingByArea();\r\n+\t\tSystem.out.println(\"List sorted by area\");\r\n+\t\tfor(Shape list : shapesArea)\r\n+\t\t\tSystem.out.println(list.getType() + \" \"+ list.getArea());\r\n+\t\t\r\n+\t\tSystem.out.println();\r\n+\t\tscreen.deleteSpecificShape(\"Rectangle\");\r\n+\t\tscreen.showAllAddedShapes();\r\n+\t\t\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "501501fbdb210de9d639ba91da130dbd8454eb9f",
    "filename": "GET 2021/src/GraphicsLibrary/Square.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Square.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Square.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Square.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,75 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.sql.Timestamp;\r\n+import java.util.Date;\r\n+\r\n+/** \r\n+ * class square which implements Shape interface and its methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Square implements Shape {\r\n+\tdouble side;\r\n+\tPoint origin;\r\n+\tTimestamp timeStamp;\r\n+    final String shapeType = Shape.shapeType.SQUARE.toString();\r\n+\t\r\n+    /**\r\n+     * Constructor setting up the values of square\r\n+     * @param originValue containing origin coordinates\r\n+     * @param sideValue containing side of square\r\n+     */\r\n+    public Square(Point originValue, double sideValue) {\r\n+    \tthis.origin = originValue;\r\n+    \tthis.side = sideValue;\r\n+    \tthis.timeStamp = new Timestamp(new Date().getTime());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to get the type of shape\r\n+     */\r\n+\tpublic String getType() {\r\n+\t    return this.shapeType;\r\n+\t}\r\n+\r\n+    /**\r\n+     * Method to get area of Square\r\n+     */\r\n+\tpublic double getArea() {\r\n+\t\treturn this.side * this.side;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get perimeter of rectangle\r\n+\t */\r\n+\tpublic double getPerimeter() {\r\n+\t\tint squareSides = 4;\r\n+\t\treturn squareSides * this.side;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to check enclosed point\r\n+\t */\r\n+\tpublic boolean isPointEnclosed(Point point) {\r\n+\t\tif((point.xAxisCoordinate < origin.xAxisCoordinate || point.yAxisCoordinate < origin.yAxisCoordinate) ||\r\n+\t\t    (point.xAxisCoordinate> origin.xAxisCoordinate + side || point.yAxisCoordinate> origin.yAxisCoordinate + side))\r\n+\t\t\t    return false;\r\n+\t\telse\r\n+\t\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get origin coordinates\r\n+\t */\r\n+\tpublic Point getOrigin() {\r\n+\t\treturn origin;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get the time\r\n+\t */\r\n+\tpublic Timestamp getTimestamp() {\r\n+\t\treturn this.timeStamp;\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "ec7f8ecadaba5c9d47c55e5612d720117036e7e8",
    "filename": "GET 2021/src/GraphicsLibrary/Triangle.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Triangle.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/1d73613c29d9f1a746b90a2f4f407c02b5edb4e4/GET%202021/src/GraphicsLibrary/Triangle.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/GraphicsLibrary/Triangle.java?ref=1d73613c29d9f1a746b90a2f4f407c02b5edb4e4",
    "patch": "@@ -0,0 +1,74 @@\n+package GraphicsLibrary;\r\n+\r\n+import java.sql.Timestamp;\r\n+import java.util.Date;\r\n+/**\r\n+ * class Triangle implementing Shape interface and methods\r\n+ * @author abhishek.dawer_metac\r\n+ *\r\n+ */\r\n+public class Triangle implements Shape {\r\n+\tdouble base, height;\r\n+\tPoint origin;\r\n+\tTimestamp timeStamp;\r\n+    final String shapeType = Shape.shapeType.TRIANGLE.toString();\r\n+    \r\n+    /**\r\n+     * Constructor setting up the values\r\n+     * @param originValue containing origin values\r\n+     * @param baseValue containing base of triangle\r\n+     * @param heightValue containing height of triangle\r\n+     */\r\n+    public Triangle(Point originValue, double baseValue, double heightValue) {\r\n+        this.base = baseValue;\r\n+        this.height = heightValue;\r\n+        this.timeStamp = new Timestamp(new Date().getTime());\r\n+        this.origin = originValue;\r\n+    }\r\n+    \r\n+    /**\r\n+     * Method to get the type of shape\r\n+     */\r\n+\tpublic String getType() {\r\n+\t\treturn shapeType;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get area of triangle\r\n+\t */\r\n+\tpublic double getArea() {\r\n+\t\tdouble number = 0.5;\r\n+\t\treturn number * base * height;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * method to get perimeter of triangle\r\n+\t */\r\n+\tpublic double getPerimeter() {\r\n+\t\treturn this.base + this.height + Math.sqrt(base * base + height * height);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * method to check point is enclosed\r\n+\t */\r\n+\tpublic boolean isPointEnclosed(Point point) {\r\n+\t\tif((origin.xAxisCoordinate < point.xAxisCoordinate) || (origin.yAxisCoordinate < point.yAxisCoordinate))\r\n+\t\t    return false;\r\n+\t\treturn true;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to get origin of type point\r\n+\t */\r\n+\tpublic Point getOrigin() {\r\n+\t\treturn origin;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to get TimeStamp\r\n+\t */\r\n+\tpublic Timestamp getTimestamp() {\r\n+\t\treturn this.timeStamp;\r\n+\t}\r\n+\r\n+}\r"
  }
]
