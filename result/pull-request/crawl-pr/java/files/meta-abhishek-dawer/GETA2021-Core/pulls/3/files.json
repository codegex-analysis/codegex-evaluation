[
  {
    "sha": "bd856d727e3d119f97874d3c73e2713814527cdf",
    "filename": "GET 2021/src/SoftwareSpecification/Area.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69/GET%202021/src/SoftwareSpecification/Area.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69/GET%202021/src/SoftwareSpecification/Area.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/SoftwareSpecification/Area.java?ref=b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69",
    "patch": "@@ -0,0 +1,73 @@\n+package SoftwareSpecification;\r\n+\r\n+import java.util.Scanner;\r\n+\r\n+public class Area {\r\n+\t/**\r\n+\t * Find the Area of Triangle\r\n+\t * @param width value contain base of triangle\r\n+\t * @param height value containing height of triangle\r\n+\t * @return areaResult by calculating area using formula 1/2 * base * height\r\n+\t */\r\n+\tpublic double findTriangleArea(double width,double height){\r\n+\t\tdouble areaResult= 0.5 * width * height ;\r\n+\t\treturn areaResult;\r\n+\t}\r\n+\t/**\r\n+\t * Find the Area of Rectangle\r\n+\t * @param width value contain breadth of rectangle\r\n+\t * @param height value contain length of rectangle\r\n+\t * @return areaResult by calculating area using formula length * breadth\r\n+\t */\r\n+\tpublic double findRectangleArea(double width, double height){\r\n+\t\tdouble areaResult = width*height;\r\n+\t\treturn areaResult;\r\n+\t}\r\n+\t/**\r\n+\t * Find the Area of Square\r\n+\t * @param width value contain side of square\r\n+\t * @return areaResult by calculating area using formula 4 * side\r\n+\t */\r\n+\tpublic double findSquareArea(double width){\r\n+\t\tdouble areaResult= 4* width;\r\n+\t\treturn areaResult;\r\n+\t}\r\n+\t/**\r\n+\t * Find the area of Circle\r\n+\t * @param radius value contain radius of circle\r\n+\t * @return areaResult by  calculating area using formula pi * r * r\r\n+\t */\r\n+\tpublic double findCircleArea(double radius){\r\n+\t\tdouble areaResult = 3.14 * radius * radius;\r\n+\t\treturn areaResult;\r\n+\t}\r\n+\r\n+\tpublic static void main(String[] args) {\r\n+\t\tScanner scanner = new Scanner(System.in);\r\n+\t\tdouble width = scanner.nextDouble();\r\n+\t\tdouble height = scanner.nextDouble();\r\n+\t\tdouble radius = scanner.nextDouble();\r\n+\t\t\t\r\n+\t\ttry{\r\n+\t\t\tif(width>=0 || height>=0 || radius>=0)\r\n+\t\t\t\tthrow new ArithmeticException();\r\n+\t\t\t\r\n+\t\t\tArea obj = new Area();\r\n+\t\t\tdouble triangleArea = obj.findTriangleArea(width,height);\r\n+\t\t\tSystem.out.println(\"Area of triangle is:- \"+ triangleArea);\r\n+\t\t\t \r\n+\t\t\tdouble rectangleArea = obj.findRectangleArea(width,height);\r\n+\t\t\tSystem.out.println(\"Area of rectangle is:- \"+rectangleArea);\r\n+\t\t\t  \r\n+\t\t\tdouble squareArea = obj.findSquareArea(width);\r\n+\t\t\tSystem.out.println(\"Area of square is:- \"+ squareArea);\r\n+\t\t\t  \r\n+\t\t\tdouble circleArea = obj.findCircleArea(radius);\r\n+\t\t\tSystem.out.println(\"Area of circle is:- \"+ circleArea);\r\n+\t\t}\r\n+\t\t\t\r\n+\t\tcatch(ArithmeticException e){\r\n+\t\t\tSystem.out.println(\"Input values cannot be zero or negative!!\");}\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "9c72bb14a229838fcb20fd116d644d5658259a33",
    "filename": "GET 2021/src/SoftwareSpecification/MarkSheet.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69/GET%202021/src/SoftwareSpecification/MarkSheet.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69/GET%202021/src/SoftwareSpecification/MarkSheet.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/SoftwareSpecification/MarkSheet.java?ref=b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69",
    "patch": "@@ -0,0 +1,91 @@\n+package SoftwareSpecification;\r\n+\r\n+import java.util.Scanner;\r\n+public class MarkSheet{\r\n+\t/**\r\n+\t* Find average grade of all student\r\n+\t* @param arr contain values of n number of students\r\n+\t* @return average by calculating sum of all student divide by no. of student\r\n+\t*/\r\n+\tpublic double calculateAverage(int[] arr){\r\n+\t\tdouble average=0;\r\n+\t\tint sum=0;\r\n+\t\tfor(int i=0;i<arr.length;i++)\r\n+\t\t\tsum += arr[i];\r\n+\t\t\t\t\r\n+\t\taverage = (double)sum/ arr.length;\r\n+\t\treturn average;\r\n+\t}\r\n+\t/**\r\n+\t* Find Maximum grade from all students grades\r\n+\t* @param arr contain grade value of all students\r\n+\t* @return maxResult which contain maximum grade\r\n+\t*/\r\n+\tpublic int findMaxGrade(int[] arr){\r\n+\t\tint maxResult=arr[0];\t\r\n+\t\tfor(int i=0;i<arr.length;i++){\r\n+\t\t\tif(maxResult<arr[i])\r\n+\t\t\t\tmaxResult = arr[i];\r\n+\t\t}\r\n+\t\treturn maxResult;\r\n+\t}\t\r\n+\t/**\r\n+\t* Find minimum grade from all students grades\r\n+\t* @param arr contain grade values of all students\r\n+\t* @return minResult which contain maximum grade\r\n+\t*/\r\n+\tpublic int findMinGrade(int[] arr){\r\n+\t\tint minResult =arr[0]; // initialize with 1st element and compare with others\r\n+\t\tfor(int i=0;i<arr.length;i++){\r\n+\t\t\tif(minResult>arr[i])\r\n+\t\t\t\tminResult = arr[i];\r\n+\t\r\n+\t\t}\r\n+\t\treturn minResult;\r\n+\t}\t\r\n+\t/**\r\n+\t* Find pass percentage of the class\r\n+\t* @param arr contain grade values of all students\r\n+\t* @return percentageResult by calculating pass percentage\r\n+\t*/\r\n+\tpublic double findPassPercentage(int[] arr){\r\n+\t\tdouble percentageResult =0;\r\n+\t\tint count=0;\t\r\n+\t\tfor(int i=0;i<arr.length;i++){\r\n+\t\t\tif(arr[i]>=40)\r\n+\t\t\t\tcount++;\r\n+\t\t}\r\n+\t\tpercentageResult = (double) count/arr.length*100;\t\r\n+\t\treturn percentageResult;\r\n+\t}\r\n+\t\r\n+\tpublic static void main(String[] args) {\r\n+\t\tScanner scanner = new Scanner(System.in);\r\n+\t\tint numberOfStudents = scanner.nextInt();\r\n+\t\tint[] studentGrades = new int[numberOfStudents];\r\n+\t\tfor(int i=0;i<numberOfStudents;i++)\r\n+\t\t\tstudentGrades[i] = scanner.nextInt();\r\n+\t\t\r\n+\t\ttry{\r\n+\t\t\tif(numberOfStudents==0)\r\n+\t\t\t\tthrow new ArithmeticException();\r\n+\t\t\t\r\n+\t\tMarkSheet obj1 = new MarkSheet();\r\n+\t\t\tdouble averageResult = obj1.calculateAverage(studentGrades);\r\n+\t\t\tSystem.out.println(\"Average grade in a class is:- \"+averageResult);\r\n+\t\t\t\r\n+\t\t\tint maxResult = obj1.findMaxGrade(studentGrades);\r\n+\t\t\tSystem.out.println(\"Maximum grade in a class is:- \"+maxResult);\r\n+\t\t\t\r\n+\t\t\tint minResult = obj1.findMinGrade(studentGrades);\r\n+\t\t\tSystem.out.println(\"Minimum grade in a class is:- \"+minResult);\r\n+\t\t\t\r\n+\t\t\tdouble passPercentage = obj1.findPassPercentage(studentGrades);\r\n+\t\t\tSystem.out.println(\"pass percentage of a class is:- \"+ passPercentage);\r\n+\t\t}\r\n+\t\t\r\n+\t\tcatch(ArithmeticException e){\r\n+\t\t\tSystem.out.println(\"number of students cannot be zero\");\r\n+\t\t}\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "15e2c4f9303f3bd30ddeaed7a3a4bb66ca1fdeec",
    "filename": "GET 2021/src/SoftwareSpecification/StringOperations.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/blob/b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69/GET%202021/src/SoftwareSpecification/StringOperations.java",
    "raw_url": "https://github.com/meta-abhishek-dawer/GETA2021-Core/raw/b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69/GET%202021/src/SoftwareSpecification/StringOperations.java",
    "contents_url": "https://api.github.com/repos/meta-abhishek-dawer/GETA2021-Core/contents/GET%202021/src/SoftwareSpecification/StringOperations.java?ref=b495cc2ea9f1364ee8e09b4ce2fe3f7827dc8a69",
    "patch": "@@ -0,0 +1,111 @@\n+package SoftwareSpecification;\r\n+\r\n+import java.util.Scanner;\r\n+public class StringOperations{\r\n+\t/**\r\n+\t * Reverse a string\r\n+\t * @param str is value which we have to reverse\r\n+\t * @return result as reverse value of String str\r\n+\t */\r\n+\tpublic String reverseString(String str){\r\n+\t\tchar[] charArr = str.toCharArray(); // convert string into character array\r\n+\t\tString result =\"\";\r\n+\t\tfor(int i= charArr.length-1;i>=0;i--){\r\n+\t\t\tresult += charArr[i];\r\n+\t\t}\r\n+\t\treturn result;\r\n+\t}\r\n+\t/**\r\n+\t * method to change the uppercase to lower and lowercase to uppercase\r\n+\t * @param str is a value on which oprations are performed\r\n+\t * @return result by changing cases of value str\r\n+\t */\r\n+\tpublic String changeCase(String str){\r\n+\t\tString result=\"\";\r\n+\t\tchar[] charArr = str.toCharArray();\r\n+\t\t\r\n+\t\tfor(int i=0;i<charArr.length;i++){\r\n+\t\t\tif(charArr[i]>='A' && charArr[i]<='Z'){\r\n+\t\t\t\tcharArr[i]= (char)((int)charArr[i]+32);\r\n+\t\t\t}\r\n+\t\t\telse if(charArr[i]>='a' && charArr[i]<='z'){\r\n+\t\t\t\tcharArr[i]= (char)((int)charArr[i]-32);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tfor(int i=0;i<charArr.length;i++)\r\n+\t\t\tresult += charArr[i];\r\n+\t\t\r\n+\t\treturn result;\r\n+\t}\r\n+\t/**\r\n+\t * Find largest word in a String\r\n+\t * @param str is value from which we find largest word\r\n+\t * @return result where value in words array contain largest word\r\n+\t */\r\n+\tpublic String largestWord(String str){\r\n+\t\tString result=\"\",word=\"\";\r\n+\t\tString[] words = new String[100];\r\n+\t\tint pos=0;\r\n+\t\tstr = str+ \" \";\r\n+\t\tfor(int i=0;i<str.length();i++){\r\n+\t\t\tif(str.charAt(i)!=' ')\r\n+\t\t\t\tword = word+str.charAt(i);\r\n+\t\t\telse{\r\n+\t\t\t\twords[pos]= word;\r\n+\t\t\t\tpos++;\r\n+\t\t\t\tword= \"\";\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tresult= words[0];\r\n+\t\tfor(int k=0;k<pos;k++){\r\n+\t\t\t//compare which value is large\r\n+\t\t\tif(result.length()<words[k].length())\r\n+\t\t\t\tresult= words[k];\r\n+\t\t}\r\n+\t\treturn result;\r\n+\t}\r\n+\t/**\r\n+\t * compare values of two strings are equal or not\r\n+\t * @param str1 contain value1 which we have to compare\r\n+\t * @param str2 contain value2 which we have to compare\r\n+\t * @return result true if value are equal and false if not equal\r\n+\t */\r\n+\tpublic boolean equalOrNot(String str1,String str2){\r\n+\t\tboolean result = false;\r\n+\t\tchar[] charArr1 = str1.toCharArray();\r\n+\t\tchar[]charArr2 = str2.toCharArray();\r\n+\t\tif(charArr1.length!=charArr2.length)\r\n+\t\t\treturn false;\r\n+\t\telse{\r\n+\t\t\tfor(int i=0;i<charArr1.length;i++){\r\n+\t\t\t\tif(charArr1[i]!=charArr2[i]){\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\treturn true;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic static void main(String[] args) {\r\n+\t\tScanner scanner = new Scanner(System.in);\r\n+\t\tString str1 = scanner.nextLine();\r\n+\t\tString str2 = scanner.nextLine();\r\n+\t\t   \r\n+\t     // reverse method\r\n+\t\t StringOperations obj1= new StringOperations();\r\n+\t\t \tString revString=obj1.reverseString(str1);\r\n+\t\t    System.out.println(\"reverse of a string is:- \"+ revString);\r\n+\t\t      \r\n+\t\t    // case change\r\n+\t\t    String resultCase = obj1.changeCase(str1);\r\n+\t\t    System.out.println(\"Case changes:- \"+resultCase);\r\n+\t\t      \r\n+\t\t    //largest word in string   \r\n+\t\t    String largestWordResult = obj1.largestWord(str1); \r\n+\t\t    System.out.println(\"largest word in a string is:- \"+largestWordResult);\r\n+\t\t      \r\n+\t\t    //compare two strings   \r\n+\t\t    boolean equalResult = obj1.equalOrNot(str1,str2);\r\n+\t\t    System.out.println(\"String are equal or not:- \"+equalResult);\r\n+\t}\r\n+}\r"
  }
]
