[
  {
    "sha": "26d33521af10bcc7fd8cea344038eaaeb78d0ef5",
    "filename": "AnSLessonSeven/.idea/.gitignore",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/.idea/.gitignore",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/.idea/.gitignore",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/.idea/.gitignore?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,3 @@\n+# Default ignored files\n+/shelf/\n+/workspace.xml"
  },
  {
    "sha": "05483570e041eb648703359441d61bf9a5feeb13",
    "filename": "AnSLessonSeven/.idea/misc.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/.idea/misc.xml",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/.idea/misc.xml?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n+    <output url=\"file://$PROJECT_DIR$/out\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "cd4b5a69e78b77a1b064fd01a0c4e8ab703cf0fc",
    "filename": "AnSLessonSeven/.idea/modules.xml",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/.idea/modules.xml",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/.idea/modules.xml",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/.idea/modules.xml?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"ProjectModuleManager\">\n+    <modules>\n+      <module fileurl=\"file://$PROJECT_DIR$/AnSLessonSeven.iml\" filepath=\"$PROJECT_DIR$/AnSLessonSeven.iml\" />\n+    </modules>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "c90834f2d607afe55e6104d8aa2cdfffb713f688",
    "filename": "AnSLessonSeven/AnSLessonSeven.iml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/AnSLessonSeven.iml",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/AnSLessonSeven.iml",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/AnSLessonSeven.iml?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<module type=\"JAVA_MODULE\" version=\"4\">\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n+    <exclude-output />\n+    <content url=\"file://$MODULE_DIR$\">\n+      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n+    </content>\n+    <orderEntry type=\"inheritedJdk\" />\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n+  </component>\n+</module>\n\\ No newline at end of file"
  },
  {
    "sha": "d4636b021bb1b672e61ed79cdb0d9e007574503e",
    "filename": "AnSLessonSeven/out/production/AnSLessonSeven/Graph.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/Graph.class",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/Graph.class",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/out/production/AnSLessonSeven/Graph.class?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023"
  },
  {
    "sha": "84840f167f58d73380e4c10503f8fbe40a3c6882",
    "filename": "AnSLessonSeven/out/production/AnSLessonSeven/LinkedPath.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/LinkedPath.class",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/LinkedPath.class",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/out/production/AnSLessonSeven/LinkedPath.class?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023"
  },
  {
    "sha": "23c1f541258e0bdaa9aca9f7d922bf079d24fe0c",
    "filename": "AnSLessonSeven/out/production/AnSLessonSeven/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/Main.class",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/Main.class",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/out/production/AnSLessonSeven/Main.class?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023"
  },
  {
    "sha": "28704d2d9097fa5ea21182df50d370516b0b19b3",
    "filename": "AnSLessonSeven/out/production/AnSLessonSeven/Vertex.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/Vertex.class",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/out/production/AnSLessonSeven/Vertex.class",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/out/production/AnSLessonSeven/Vertex.class?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023"
  },
  {
    "sha": "9e86f0927d4ee1000c4a40db4eeab51a7c2d766c",
    "filename": "AnSLessonSeven/src/Graph.java",
    "status": "added",
    "additions": 286,
    "deletions": 0,
    "changes": 286,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/src/Graph.java",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/src/Graph.java",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/src/Graph.java?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,286 @@\n+\n+import sun.misc.Queue;\n+\n+import java.util.ArrayList;\n+import java.util.Stack;\n+\n+public class Graph {\n+    private final boolean [][] map;\n+    private final Vertex[] vertexList;\n+    private final int maxCapacity;\n+    private final int safeCount;\n+\n+    Graph (int maxCapacity){\n+        this.map=new boolean [maxCapacity][maxCapacity];\n+        this.vertexList=new Vertex[maxCapacity];\n+        this.maxCapacity=maxCapacity;\n+        safeCount=maxCapacity*maxCapacity;\n+    }\n+\n+    public boolean addVertex (Vertex toAdd){\n+        for (Vertex a: vertexList) {\n+            if (a!=null) {\n+                if (a.equals(toAdd)) {\n+                    System.out.println(\"This vertex already exists\");\n+                    return false;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < this.map.length; i++) {\n+            if (!this.map[i][i]) {\n+                map[i][i]=true;\n+                this.vertexList[i]=toAdd;\n+                return true;\n+            }\n+        }\n+        System.out.println(\"Graph is full\");\n+        return false;\n+\n+    }\n+\n+    public Vertex getVertex (String name){\n+        for (Vertex a: vertexList) {\n+            if(a.getName().equals(name)){\n+                return a;\n+            }\n+        }\n+        System.out.println(\"Vertex not found\");\n+        return null;\n+    }\n+\n+    public boolean removeVertex (String name) {\n+        Vertex toRemove=getVertex(name);\n+        if (toRemove==null) return false;\n+        int index = getVertexIndex(toRemove);\n+        for (int i = 0; i < this.map.length; i++) {\n+            if (this.map[i][index]) this.map[i][index]=false;\n+            if (this.map[index][i]) this.map[i][index]=false;\n+        }\n+        this.vertexList[getVertexIndex(toRemove)]=null;\n+        return true;\n+    }\n+\n+    public void addEdges(String origin, String destination, String ... others) {\n+        editEdge(getVertex(origin),getVertex(destination),true);\n+        for (String other: others) {\n+            editEdge(getVertex(origin),getVertex(other),true);\n+        }\n+    }\n+\n+    public String depthBestWay (String from, String to){\n+        System.out.println(\"Поиск кратчайшего пути в губину:\");\n+        if(getVertex(from)==null||getVertex(to)==null) {\n+            System.out.println(\"Invalid vertex supplied\");\n+            return null;\n+        }\n+\n+        int originIndex = getVertexIndex(this.getVertex(from));\n+        Stack<Vertex> path = depthSearch(originIndex,new ArrayList<Vertex>(),getVertex(to));\n+        if(path.isEmpty()) return \"Путь не найден!\";\n+        return pathToString(path);\n+    }\n+\n+    public String diyksraBestWay (String from, String to){\n+        System.out.println(\"Алгоритм Дийкстры:\");\n+        if(getVertex(from)==null||getVertex(to)==null) {\n+            System.out.println(\"Invalid vertex supplied\");\n+            return null;\n+        }\n+        clearValue();\n+        int originIndex = getVertexIndex(this.getVertex(from));\n+        int destinationIndex = getVertexIndex(this.getVertex(to));\n+        this.vertexList[originIndex].setPosition(0);\n+        vertexAssessment(originIndex,0);\n+        if(this.vertexList[destinationIndex].getPosition()==this.safeCount) return \"Путь не найден!\";\n+        Stack<Vertex> path = reversePath(diyksraWaySearch(destinationIndex));\n+        return pathToString(path);\n+    }\n+\n+    public String widthBestWay (String from, String to){\n+        System.out.println(\"Поиск кратчайшего пути в ширину:\");\n+        if(getVertex(from)==null||getVertex(to)==null) {\n+            System.out.println(\"Invalid vertex supplied\");\n+            return null;\n+        }\n+        Queue <LinkedPath> possibleWays = new Queue<LinkedPath>();\n+        ArrayList<Vertex> visited = new ArrayList<Vertex>();\n+        possibleWays.enqueue(new LinkedPath(new ArrayList<Integer>(), getVertexIndex(getVertex(from))));\n+        Stack <Vertex> path = new Stack<Vertex>();\n+\n+        do{\n+            LinkedPath current;\n+            try {\n+               current = possibleWays.dequeue();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(\"SWW with Queue\");\n+            }\n+            visited.add(this.vertexList[current.getIndex()]);\n+            if (this.vertexList[current.getIndex()].equals(getVertex(to))){\n+                for (int a: current.getPath()) {\n+                    path.add(this.vertexList[a]);\n+                }\n+                break;\n+            }else {\n+                for (int i = 0; i < this.map.length; i++) {\n+                    if (this.map[current.getIndex()][i] && !visited.contains(this.vertexList[i])){\n+                        possibleWays.enqueue(new LinkedPath(current.getPath(),i));\n+                    }\n+                }\n+            }\n+        }while (!possibleWays.isEmpty());\n+        if(path.isEmpty()) System.out.println(\"Путь не найден!\");\n+        return pathToString(path);\n+    }\n+\n+    public void removeEdges (String origin, String destination, String ... others) {\n+        editEdge(getVertex(origin),getVertex(destination),false);\n+        for (String other: others) {\n+            editEdge(getVertex(origin),getVertex(other),false);\n+        }\n+    }\n+\n+    private void editEdge (Vertex origin, Vertex destination, boolean trueIfAdd){\n+        if (origin==null||destination==null) throw new RuntimeException(\"Invalid vertex name\");\n+        int firstIndex=getVertexIndex(origin);\n+        int secondIndex=getVertexIndex(destination);\n+        this.map[firstIndex][secondIndex]=trueIfAdd;\n+        this.map[secondIndex][firstIndex]=trueIfAdd;\n+\n+    }\n+    @Override\n+    public String toString(){\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < this.map.length; i++) {\n+            if (!this.map[i][i]) {\n+                sb.append(\"\\nEmpty cell\");\n+            }else {\n+                sb.append(\"\\n\"+this.vertexList[i].getName()+\"->\");\n+                boolean hasEdges=false;\n+                for (int j = 0; j < this.map.length; j++) {\n+                    if (this.map[i][j]&& i!=j) {\n+                        sb.append(this.vertexList[j].getName()+\"; \");\n+                        hasEdges=true;\n+                    }\n+                }\n+                if (!hasEdges) sb.append(\" no edges)\");\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    private int getVertexIndex (Vertex toFind) {\n+        for (int i = 0; i < vertexList.length; i++) {\n+            if(vertexList[i].equals(toFind)) return i;\n+        }\n+        return -1;\n+    }\n+\n+\n+    private Stack <Vertex> depthSearch (int originIndex, ArrayList<Vertex> visited, Vertex destination){\n+        visited.add(this.vertexList[originIndex]);\n+        Stack <Vertex> bestWay = new Stack<Vertex>();\n+\n+        for (int i = 0; i < this.map.length; i++) {\n+            if(this.map[originIndex][i] && !visited.contains(this.vertexList[i])){\n+                if (this.vertexList[i].equals(destination)){\n+                    bestWay.clear();\n+                    bestWay.add(this.vertexList[originIndex]);\n+                    bestWay.add(destination);\n+                    return bestWay;\n+                }\n+                Stack <Vertex> furtherWay = depthSearch(i,visited,destination);\n+                if(!furtherWay.isEmpty() && (bestWay.isEmpty()||bestWay.size()>furtherWay.size())) {\n+                    bestWay.clear();\n+                    bestWay.add(this.vertexList[originIndex]);\n+                    bestWay.addAll(furtherWay);\n+\n+                }\n+            }\n+\n+        }\n+        return bestWay;\n+    }\n+\n+    private void vertexAssessment(int origin, int step){\n+        for (int i = 0; i < this.map.length; i++) {\n+            if (vertexList[i]!=null) {\n+                if (this.map[i][origin]) {\n+                    if (this.vertexList[i].getPosition() > (step + 1)) {\n+                        this.vertexList[i].setPosition((step + 1));\n+                        vertexAssessment(i, step + 1);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void clearValue(){\n+        for (Vertex a:this.vertexList) {\n+            if(a!=null){\n+                a.setPosition(this.maxCapacity);\n+            }\n+        }\n+    }\n+\n+    private Stack<Vertex> diyksraWaySearch (int destination){\n+        Stack<Vertex> path = new Stack<Vertex>();\n+        path.add(this.vertexList[destination]);\n+        if (this.vertexList[destination].getPosition()==0)return path;\n+        int nextStepValue=this.safeCount;\n+        int nextStepIndex=-1;\n+        for (int i = 0; i < this.map.length; i++) {\n+            if (this.map[destination][i]){\n+                if (this.vertexList[i]!=null){\n+                    if (this.vertexList[i].getPosition()<nextStepValue){\n+                        nextStepValue=this.vertexList[i].getPosition();\n+                        nextStepIndex=i;\n+                    }\n+                }\n+            }\n+        }\n+        path.addAll(diyksraWaySearch(nextStepIndex));\n+        return path;\n+    }\n+\n+    private String pathToString (Stack<Vertex>path){\n+        StringBuilder sb = new StringBuilder(\"\");\n+        for (Vertex a: path) {\n+            sb.append(a.getName()+\"->\");\n+        }\n+        sb.replace(sb.length()-2,sb.length(),\";\");\n+        return sb.toString();\n+    }\n+\n+    private Stack<Vertex> reversePath (Stack<Vertex> pathToReverse){\n+        Stack<Vertex> path = new Stack<Vertex>();\n+        int size=pathToReverse.size();\n+        for (int i = 0; i <size; i++) {\n+            path.add(pathToReverse.pop());\n+        }\n+        return path;\n+    }\n+\n+\n+\n+}\n+\n+\n+class LinkedPath{\n+    private ArrayList <Integer> path;\n+    private int index;\n+\n+    LinkedPath (ArrayList<Integer> history, int index){\n+        this.path=new ArrayList<Integer>();\n+        this.path= (ArrayList<Integer>) history.clone();\n+        this.path.add(index);\n+        this.index=index;\n+    }\n+\n+    public ArrayList<Integer> getPath() {\n+        return path;\n+    }\n+\n+    public int getIndex() {\n+        return index;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0f1b7058596debf5ebde1749ff41de1e6a6b33a2",
    "filename": "AnSLessonSeven/src/Main.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/src/Main.java",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/src/Main.java",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/src/Main.java?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,32 @@\n+\n+public class Main {\n+    public static void main(String[] args) {\n+       Graph testGraph = new Graph(10);\n+       testGraph.addVertex(new Vertex(\"Москва\"));\n+        testGraph.addVertex(new Vertex(\"Санкт Петербург\"));\n+        testGraph.addVertex(new Vertex(\"Стамбул\"));\n+        testGraph.addVertex(new Vertex(\"Анталия\"));\n+        testGraph.addVertex(new Vertex(\"Мадрид\"));\n+        testGraph.addVertex(new Vertex(\"Салоу\"));\n+        testGraph.addVertex(new Vertex(\"Воронеж\"));\n+        testGraph.addVertex(new Vertex(\"Сочи\"));\n+        testGraph.addVertex(new Vertex(\"Гавана\"));\n+        testGraph.addVertex(new Vertex(\"Новгород\"));\n+\n+        testGraph.addEdges(\"Москва\", \"Анталия\", \"Санкт Петербург\", \"Воронеж\", \"Гавана\");\n+        testGraph.addEdges(\"Санкт Петербург\", \"Москва\", \"Стамбул\", \"Салоу\", \"Новгород\");\n+        testGraph.addEdges(\"Стамбул\", \"Санкт Петербург\", \"Мадрид\");\n+        testGraph.addEdges(\"Анталия\", \"Гавана\",\"Москва\");\n+        testGraph.addEdges(\"Сочи\", \"Новгород\");\n+\n+\n+        System.out.println(testGraph.toString());\n+\n+        System.out.println(\"\\n ***** \\n\");\n+        System.out.println(testGraph.depthBestWay(\"Стамбул\", \"Гавана\"));\n+        System.out.println(\"\\n ***** \\n\");\n+        System.out.println(testGraph.diyksraBestWay(\"Стамбул\", \"Гавана\"));\n+        System.out.println(\"\\n ***** \\n\");\n+        System.out.println(testGraph.widthBestWay(\"Стамбул\", \"Гавана\"));\n+    }\n+}"
  },
  {
    "sha": "fd1d785ed048e83426a8a41e52fdc64330f74327",
    "filename": "AnSLessonSeven/src/Vertex.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/src/Vertex.java",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSeven/src/Vertex.java",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSeven/src/Vertex.java?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,38 @@\n+import java.util.Objects;\n+\n+public class Vertex {\n+    private String name;\n+    private int position;\n+\n+    Vertex (String name){\n+        this.name=name;\n+        this.position=0;\n+    }\n+\n+\n+    public void setPosition(int position) {\n+        this.position = position;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public int getPosition() {\n+        return position;\n+    }\n+\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(name);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if(this.getClass()== obj.getClass()) {\n+            return this.hashCode() == obj.hashCode();\n+        }\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "655f3c34e1b86ab6d8d9d92f52373fde790a48a2",
    "filename": "AnSLessonSix/.idea/workspace.xml",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/Koristos/GeekbrainsJava/blob/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSix/.idea/workspace.xml",
    "raw_url": "https://github.com/Koristos/GeekbrainsJava/raw/1510e2a5f8158aee1f8d7538e530aee2596eb023/AnSLessonSix/.idea/workspace.xml",
    "contents_url": "https://api.github.com/repos/Koristos/GeekbrainsJava/contents/AnSLessonSix/.idea/workspace.xml?ref=1510e2a5f8158aee1f8d7538e530aee2596eb023",
    "patch": "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"ChangeListManager\">\n+    <list default=\"true\" id=\"b1f8b852-68da-4a36-9219-7f92a8c105f1\" name=\"Default Changelist\" comment=\"\" />\n+    <option name=\"SHOW_DIALOG\" value=\"false\" />\n+    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n+    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n+    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n+  </component>\n+  <component name=\"FileTemplateManagerImpl\">\n+    <option name=\"RECENT_TEMPLATES\">\n+      <list>\n+        <option value=\"Class\" />\n+      </list>\n+    </option>\n+  </component>\n+  <component name=\"MavenImportPreferences\">\n+    <option name=\"generalSettings\">\n+      <MavenGeneralSettings>\n+        <option name=\"mavenHome\" value=\"C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2020.2\\plugins\\maven\\lib\\maven3\" />\n+      </MavenGeneralSettings>\n+    </option>\n+  </component>\n+  <component name=\"ProjectId\" id=\"1oxoTbbDwqPmtRG7miLVlFYZZAF\" />\n+  <component name=\"ProjectViewState\">\n+    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n+    <option name=\"showLibraryContents\" value=\"true\" />\n+  </component>\n+  <component name=\"PropertiesComponent\">\n+    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n+  </component>\n+  <component name=\"RunManager\">\n+    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n+      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n+      <module name=\"AnSLessonSix\" />\n+      <method v=\"2\">\n+        <option name=\"Make\" enabled=\"true\" />\n+      </method>\n+    </configuration>\n+    <recent_temporary>\n+      <list>\n+        <item itemvalue=\"Application.Main\" />\n+      </list>\n+    </recent_temporary>\n+  </component>\n+  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n+  <component name=\"TaskManager\">\n+    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n+      <changelist id=\"b1f8b852-68da-4a36-9219-7f92a8c105f1\" name=\"Default Changelist\" comment=\"\" />\n+      <created>1614237611562</created>\n+      <option name=\"number\" value=\"Default\" />\n+      <option name=\"presentableId\" value=\"Default\" />\n+      <updated>1614237611562</updated>\n+    </task>\n+    <servers />\n+  </component>\n+  <component name=\"WindowStateProjectService\">\n+    <state x=\"574\" y=\"119\" key=\"#com.intellij.ide.util.MemberChooser\" timestamp=\"1614242908627\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state x=\"574\" y=\"119\" key=\"#com.intellij.ide.util.MemberChooser/0.0.1536.824@0.0.1536.824\" timestamp=\"1614242908627\" />\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1614258087127\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.bottom/0.0.1536.824@0.0.1536.824\" timestamp=\"1614258087127\" />\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.center\" timestamp=\"1614258087127\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.center/0.0.1536.824@0.0.1536.824\" timestamp=\"1614258087127\" />\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.left\" timestamp=\"1614258087127\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.left/0.0.1536.824@0.0.1536.824\" timestamp=\"1614258087127\" />\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.right\" timestamp=\"1614258087127\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"210\" key=\"GridCell.Tab.0.right/0.0.1536.824@0.0.1536.824\" timestamp=\"1614258087127\" />\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.bottom\" timestamp=\"1614253955295\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.bottom/0.0.1536.824@0.0.1536.824\" timestamp=\"1614253955295\" />\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.center\" timestamp=\"1614253955295\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.center/0.0.1536.824@0.0.1536.824\" timestamp=\"1614253955295\" />\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.left\" timestamp=\"1614253955295\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.left/0.0.1536.824@0.0.1536.824\" timestamp=\"1614253955295\" />\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.right\" timestamp=\"1614253955295\">\n+      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"824\" />\n+    </state>\n+    <state width=\"1493\" height=\"261\" key=\"GridCell.Tab.1.right/0.0.1536.824@0.0.1536.824\" timestamp=\"1614253955295\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  }
]
