[
  {
    "sha": "f45d7a6fd2f244e8113f67045997d473d7a19bf5",
    "filename": ".bazelrc.remote",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/.bazelrc.remote",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/.bazelrc.remote",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/.bazelrc.remote?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,7 @@\n+build --bes_results_url=https://app.buildbuddy.io/invocation/\n+build --bes_backend=grpcs://cloud.buildbuddy.io\n+# build --remote_cache=grpcs://cloud.buildbuddy.io\n+\n+# build --remote_download_minimal\n+# build --remote_retries=0\n+# build --remote_timeout=10"
  },
  {
    "sha": "72490fd85e349ea42aebe584a5b2beee9d25e60d",
    "filename": ".bazelversion",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/.bazelversion",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/.bazelversion",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/.bazelversion?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,2 @@\n+4.0.0\n+"
  },
  {
    "sha": "54c9e3c3b81f742415d71c1e7d0634f21c074ec9",
    "filename": ".github/workflows/continuous-integration-workflow.yml",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/.github/workflows/continuous-integration-workflow.yml",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/.github/workflows/continuous-integration-workflow.yml",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/.github/workflows/continuous-integration-workflow.yml?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,42 @@\n+name: Run all tests\n+\n+on: [push, pull_request]\n+\n+jobs:\n+  \n+  build:\n+    # Job name is Greeting\n+    name: test with ${{ matrix.ij_product }}\n+    # This job runs on Linux\n+    runs-on: ubuntu-20.04\n+    continue-on-error: ${{ matrix.experimental }}\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        ij_product: ['intellij-2020.1']\n+        experimental: [false]\n+#        include:\n+#          - ij_product: 'intellij-2020.2'\n+#            experimental: true\n+    container:\n+      image: l.gcr.io/google/bazel:3.5.0\n+    steps:\n+      - name: install bazelisk\n+        run: |\n+            curl -L --output /usr/local/bin/bazel https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64\n+            chmod +x /usr/local/bin/bazel\n+            which bazel\n+      - uses: actions/checkout@v2\n+\n+      - name: bazel cache\n+        uses: actions/cache@v2\n+        with:\n+          path: /github/home/.bazel_cache\n+          key: ${{ github.ref }}\n+          restore-keys: |\n+            ${{ github.ref }}\n+            refs/heads/master\n+      - name: run bazel\n+        continue-on-error: ${{ matrix.experimental }}\n+        run: |\n+            bazel --bazelrc=.bazelrc.remote test --repository_cache=/github/home/.bazel_cache -k --define=ij_product=${{ matrix.ij_product }} --test_output=errors //:ijwb_tests \n\\ No newline at end of file"
  },
  {
    "sha": "9cc713d306e92bf6ebdaa479961fab5099362464",
    "filename": "WORKSPACE",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/WORKSPACE",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/WORKSPACE",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/WORKSPACE?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -330,6 +330,15 @@ jvm_maven_import_external(\n     server_urls = [\"https://repo1.maven.org/maven2\"],\n )\n \n+bazel_version=\"31082327bdb64b7bf52dd55ae18d29e920e61025\"\n+bazel_repo_sha256 = \"e8e1ac4bcab303f8f99c9b14ad3afbd059b84c516b7e76f6d9b89b8d5175594f\"\n+http_archive(\n+    name = \"bazel\",\n+    sha256 = bazel_repo_sha256,\n+    url = \"https://github.com/bazelbuild/bazel/archive/%s.zip\" % bazel_version,\n+    strip_prefix = \"bazel-\" + bazel_version\n+)\n+\n http_archive(\n     name = \"bazel_skylib\",\n     sha256 = \"2ef429f5d7ce7111263289644d233707dba35e39696377ebab8b0bc701f7818e\",\n@@ -416,3 +425,18 @@ http_archive(\n load(\"@io_bazel_rules_kotlin//kotlin:kotlin.bzl\", \"kotlin_repositories\")\n \n kotlin_repositories()\n+\n+http_archive(\n+    name = \"io_buildbuddy_buildbuddy_toolchain\",\n+    sha256 = \"9055a3e6f45773cd61931eba7b7cf35d6477ab6ad8fb2f18bf9815271fc682fe\",\n+    strip_prefix = \"buildbuddy-toolchain-52aa5d2cc6c9ba7ee4063de35987be7d1b75f8e2\",\n+    urls = [\"https://github.com/buildbuddy-io/buildbuddy-toolchain/archive/52aa5d2cc6c9ba7ee4063de35987be7d1b75f8e2.tar.gz\"],\n+)\n+\n+load(\"@io_buildbuddy_buildbuddy_toolchain//:deps.bzl\", \"buildbuddy_deps\")\n+\n+buildbuddy_deps()\n+\n+load(\"@io_buildbuddy_buildbuddy_toolchain//:rules.bzl\", \"buildbuddy\")\n+\n+buildbuddy(name = \"buildbuddy_toolchain\")"
  },
  {
    "sha": "f37d2de0204afbb714849739f0db86c43617a3f1",
    "filename": "aspect/intellij_info_impl.bzl",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/aspect/intellij_info_impl.bzl",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/aspect/intellij_info_impl.bzl",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/aspect/intellij_info_impl.bzl?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -143,14 +143,20 @@ def get_source_jars(output):\n         return [output.source_jar]\n     return []\n \n-def library_artifact(java_output):\n+def library_artifact(java_output, rule_kind = None):\n     \"\"\"Creates a LibraryArtifact representing a given java_output.\"\"\"\n     if java_output == None or java_output.class_jar == None:\n         return None\n     src_jars = get_source_jars(java_output)\n+\n+    if rule_kind != None and rule_kind.startswith(\"scala\"):\n+        interface_jar = None\n+    else:\n+        interface_jar = artifact_location(java_output.ijar)\n+\n     return struct_omit_none(\n         jar = artifact_location(java_output.class_jar),\n-        interface_jar = artifact_location(java_output.ijar),\n+        interface_jar = interface_jar,\n         source_jar = artifact_location(src_jars[0]) if src_jars else None,\n         source_jars = [artifact_location(f) for f in src_jars],\n     )\n@@ -554,7 +560,7 @@ def collect_java_info(target, ctx, semantics, ide_info, ide_info_file, output_gr\n \n     ide_info_files = []\n     sources = sources_from_target(ctx)\n-    jars = [library_artifact(output) for output in java.outputs.jars]\n+    jars = [library_artifact(output, ctx.rule.kind) for output in java.outputs.jars]\n     class_jars = [output.class_jar for output in java.outputs.jars if output and output.class_jar]\n     output_jars = [jar for output in java.outputs.jars for jar in jars_from_output(output)]\n     resolve_files = output_jars"
  },
  {
    "sha": "5f325fbfc67d46278107e77988ae0190ade7730d",
    "filename": "base/src/META-INF/blaze-base.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/META-INF/blaze-base.xml",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/META-INF/blaze-base.xml",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/META-INF/blaze-base.xml?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -213,6 +213,8 @@\n                         serviceImplementation=\"com.google.idea.blaze.base.projectview.ProjectViewStorageManagerImpl\"/>\n     <projectService serviceInterface=\"com.google.idea.blaze.base.projectview.ProjectViewManager\"\n                     serviceImplementation=\"com.google.idea.blaze.base.projectview.ProjectViewManagerImpl\"/>\n+    <projectService serviceInterface=\"com.google.idea.blaze.base.prelude.PreludeManager\"\n+                    serviceImplementation=\"com.google.idea.blaze.base.prelude.PreludeManagerImpl\"/>\n     <applicationService serviceInterface=\"com.google.idea.blaze.base.sync.aspects.BlazeIdeInterface\"\n                         serviceImplementation=\"com.google.idea.blaze.base.sync.aspects.BlazeIdeInterfaceAspectsImpl\"/>\n     <projectService serviceInterface=\"com.google.idea.blaze.base.console.BlazeConsoleService\""
  },
  {
    "sha": "9cf043e6e21bc67d8084971b04f3bab25f5fcb4d",
    "filename": "base/src/com/google/idea/blaze/base/actions/BuildFileUtils.java",
    "status": "modified",
    "additions": 29,
    "deletions": 2,
    "changes": 31,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/actions/BuildFileUtils.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/actions/BuildFileUtils.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/actions/BuildFileUtils.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -25,18 +25,21 @@\n import com.google.idea.blaze.base.lang.buildfile.search.BlazePackage;\n import com.google.idea.blaze.base.model.BlazeProjectData;\n import com.google.idea.blaze.base.model.primitives.Label;\n+import com.google.idea.blaze.base.model.primitives.LanguageClass;\n import com.google.idea.blaze.base.model.primitives.WorkspacePath;\n import com.google.idea.blaze.base.sync.data.BlazeProjectDataManager;\n import com.google.idea.blaze.base.targetmaps.SourceToTargetMap;\n import com.google.idea.common.experiments.BoolExperiment;\n import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.io.FileUtilRt;\n import com.intellij.openapi.vfs.VirtualFile;\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiFileSystemItem;\n import com.intellij.psi.PsiManager;\n import java.io.File;\n import java.util.Arrays;\n import java.util.Set;\n+import java.util.stream.Stream;\n import javax.annotation.Nullable;\n \n /** BUILD-file utility methods used by actions. */\n@@ -74,9 +77,11 @@ static PsiElement findBuildTarget(Project project, BlazePackage parentPackage, F\n     if (packagePath == null) {\n       return null;\n     }\n+    final Stream<Label> targetLabels = SourceToTargetMap.getInstance(project)\n+        .getTargetsToBuildForSourceFile(file).stream();\n+\n     Label label =\n-        SourceToTargetMap.getInstance(project).getTargetsToBuildForSourceFile(file).stream()\n-            .filter(l -> l.blazePackage().equals(packagePath))\n+        filterCRelatedLabelsWhichBelongToOtherPackages(file,packagePath, targetLabels)\n             .findFirst()\n             .orElse(null);\n     if (label == null) {\n@@ -98,6 +103,28 @@ static PsiElement findBuildTarget(Project project, BlazePackage parentPackage, F\n     return null;\n   }\n \n+  private static Stream<Label> filterCRelatedLabelsWhichBelongToOtherPackages(File file,\n+      WorkspacePath packagePath, Stream<Label> targetLabels) {\n+    /*\n+      More info:\n+      https://bazelbuild.slack.com/archives/CM8JQCANN/p1566481600003600\n+      Filter was deliberately added to fix an issue with C++ headers.\n+      The original bug was that opening the BUILD file for foo/bar.h caused it to open baz/qux/BUILD\n+      because there’s a cc_library target in baz/qux that includes foo/bar.h in its headers.\n+      The source-to-target look up queries the index for the target during the last sync which compiled the source file.\n+      In this case, it was the cc_library target in baz/qux.\n+      So the fix was to ensure that the BUILD file is always for the parent package (foo/bar).\n+\n+      This is limited to C only since this logic messes up supporting aggregate targets\n+      https://github.com/bazelbuild/intellij/issues/475\n+     */\n+    LanguageClass fileLanguage = LanguageClass.fromExtension(\n+        FileUtilRt.getExtension(file.getName()).toLowerCase());\n+    return (fileLanguage == LanguageClass.C) ?\n+            targetLabels.filter(l -> l.blazePackage().equals(packagePath)) :\n+            targetLabels;\n+  }\n+\n   /**\n    * Returns the label of a macro with name prefixing the target name of a given label with a '_' or\n    * '-' delimiter."
  },
  {
    "sha": "5c285bfd2658049bfbb4b0e0ed51f664b3a63f3c",
    "filename": "base/src/com/google/idea/blaze/base/bazel/BuildSystemProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/bazel/BuildSystemProvider.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/bazel/BuildSystemProvider.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/bazel/BuildSystemProvider.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -166,7 +166,7 @@ default VirtualFile findBuildFileInDirectory(VirtualFile directory) {\n     ImmutableList.Builder<FileNameMatcher> list = ImmutableList.builder();\n     possibleBuildFileNames().forEach(s -> list.add(new ExactFileNameMatcher(s)));\n     possibleWorkspaceFileNames().forEach(s -> list.add(new ExactFileNameMatcher(s)));\n-    list.add(new ExtensionFileNameMatcher(\"bzl\"));\n+    list.add(new ExtensionFileNameMatcher(\"bzl\"), new ExactFileNameMatcher(\"prelude_bazel\"));\n     return list.build();\n   }\n "
  },
  {
    "sha": "9383820973e15aeae65196c15f73015b50172186",
    "filename": "base/src/com/google/idea/blaze/base/command/info/BazelBinaryNotFoundNotification.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/command/info/BazelBinaryNotFoundNotification.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/command/info/BazelBinaryNotFoundNotification.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/command/info/BazelBinaryNotFoundNotification.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,40 @@\n+package com.google.idea.blaze.base.command.info;\n+\n+import com.intellij.notification.Notification;\n+import com.intellij.notification.NotificationAction;\n+import com.intellij.notification.NotificationDisplayType;\n+import com.intellij.notification.NotificationGroup;\n+import com.intellij.notification.NotificationType;\n+import com.intellij.notification.Notifications;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.options.ShowSettingsUtil;\n+import org.jetbrains.annotations.NotNull;\n+\n+class BazelBinaryNotFoundNotification {\n+  private static final NotificationGroup notificationGroup =\n+      new NotificationGroup(\"Bazel binary not found\", NotificationDisplayType.BALLOON, true);\n+\n+  static void show(String binaryPath) {\n+    Notification notification = new Notification(\n+        notificationGroup.getDisplayId(),\n+        \"Bazel binary not found\",\n+        \"Cannot execute command '\" + binaryPath\n+            + \"'. Please configure correct bazel binary location and try again.\",\n+        NotificationType.ERROR\n+    );\n+\n+    notification.addAction(new NotificationAction(\"Bazel Settings\") {\n+      public void update(@NotNull AnActionEvent e) {\n+        e.getPresentation().setEnabledAndVisible(e.getProject() != null);\n+      }\n+\n+      public void actionPerformed(@NotNull AnActionEvent e, @NotNull Notification notification) {\n+        if (e.getProject() == null) {\n+          return;\n+        }\n+        ShowSettingsUtil.getInstance().showSettingsDialog(e.getProject(), \"Bazel Settings\");\n+      }\n+    });\n+    Notifications.Bus.notify(notification);\n+  }\n+}"
  },
  {
    "sha": "8f30d5ee5d3e60081eb03137bce54948691dd738",
    "filename": "base/src/com/google/idea/blaze/base/command/info/BlazeInfoRunnerImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/command/info/BlazeInfoRunnerImpl.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/command/info/BlazeInfoRunnerImpl.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/command/info/BlazeInfoRunnerImpl.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -84,6 +84,13 @@ private static ByteArrayOutputStream runBlazeInfo(\n       List<String> blazeFlags,\n       BlazeContext context)\n       throws BlazeInfoException {\n+\n+    boolean isExecutable = ExternalTask.builder().args(\"which\", binaryPath).build().run() == 0;\n+    if (!isExecutable) {\n+      BazelBinaryNotFoundNotification.show(binaryPath);\n+      throw new BlazeInfoException(-1, binaryPath + \" cannot be executed\");\n+    }\n+\n     BlazeCommand.Builder builder = BlazeCommand.builder(binaryPath, BlazeCommandName.INFO);\n     if (key != null) {\n       builder.addBlazeFlags(key);"
  },
  {
    "sha": "39d78659d86029484b445abff6f021705136001e",
    "filename": "base/src/com/google/idea/blaze/base/lang/buildfile/search/ResolveUtil.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/lang/buildfile/search/ResolveUtil.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/lang/buildfile/search/ResolveUtil.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/lang/buildfile/search/ResolveUtil.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -25,6 +25,7 @@\n import com.google.idea.blaze.base.lang.buildfile.psi.Parameter;\n import com.google.idea.blaze.base.lang.buildfile.psi.StatementList;\n import com.google.idea.blaze.base.lang.buildfile.psi.TargetExpression;\n+import com.google.idea.blaze.base.prelude.PreludeManager;\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiFile;\n import com.intellij.psi.PsiFileSystemItem;\n@@ -43,7 +44,15 @@ public static void searchInScope(PsiElement originalElement, Processor<BuildElem\n     while (!(element instanceof PsiFileSystemItem)) {\n       PsiElement parent = element.getParent();\n       if (parent instanceof BuildFile) {\n-        if (!((BuildFile) parent).searchSymbolsInScope(processor, topLevelScope ? element : null)) {\n+        BuildFile parentBuildFile = (BuildFile) parent;\n+        PsiElement stopAtElement = topLevelScope ? element : null;\n+        PreludeManager preludeManager = PreludeManager.getInstance(originalElement.getProject());\n+        // if it is build file we should start looking from topmost level\n+        if (parentBuildFile.getBlazeFileType() == BuildFile.BlazeFileType.BuildPackage\n+            && !preludeManager.searchSymbolsInScope(processor, stopAtElement)) {\n+          return;\n+        }\n+        if (!parentBuildFile.searchSymbolsInScope(processor, stopAtElement)) {\n           return;\n         }\n       } else if (parent instanceof FunctionStatement) {"
  },
  {
    "sha": "157da8f6e9910ba931df4153572910118d436837",
    "filename": "base/src/com/google/idea/blaze/base/prelude/PreludeFile.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/prelude/PreludeFile.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/prelude/PreludeFile.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/prelude/PreludeFile.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,23 @@\n+package com.google.idea.blaze.base.prelude;\n+\n+import com.google.idea.blaze.base.lang.buildfile.psi.BuildElement;\n+import com.google.idea.blaze.base.lang.buildfile.psi.BuildFile;\n+import com.intellij.psi.PsiElement;\n+import com.intellij.util.Processor;\n+\n+import javax.annotation.Nullable;\n+\n+final public class PreludeFile {\n+\n+  private final BuildFile delegate;\n+\n+  PreludeFile(BuildFile delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  public boolean searchSymbolsInScope(Processor<BuildElement> processor,\n+      @Nullable PsiElement stopAtElement) {\n+    return delegate.searchSymbolsInScope(processor, stopAtElement);\n+  }\n+\n+}"
  },
  {
    "sha": "e392d7cfe8627517e6ae81dc62451f75d6320039",
    "filename": "base/src/com/google/idea/blaze/base/prelude/PreludeManager.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/prelude/PreludeManager.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/prelude/PreludeManager.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/prelude/PreludeManager.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,20 @@\n+package com.google.idea.blaze.base.prelude;\n+\n+import com.google.idea.blaze.base.lang.buildfile.psi.BuildElement;\n+import com.intellij.openapi.components.ServiceManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.psi.PsiElement;\n+import com.intellij.util.Processor;\n+\n+import javax.annotation.Nullable;\n+\n+public abstract class PreludeManager {\n+\n+  public static PreludeManager getInstance(Project project) {\n+    return ServiceManager.getService(project, PreludeManager.class);\n+  }\n+\n+  public abstract boolean searchSymbolsInScope(Processor<BuildElement> processor,\n+      @Nullable PsiElement stopAtElement);\n+\n+}"
  },
  {
    "sha": "90e3cfc4e9efd841ecf8be3dbe194580ab52d710",
    "filename": "base/src/com/google/idea/blaze/base/prelude/PreludeManagerImpl.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/prelude/PreludeManagerImpl.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/prelude/PreludeManagerImpl.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/prelude/PreludeManagerImpl.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,90 @@\n+package com.google.idea.blaze.base.prelude;\n+\n+import com.google.idea.blaze.base.lang.buildfile.psi.BuildElement;\n+import com.google.idea.blaze.base.lang.buildfile.psi.BuildFile;\n+import com.google.idea.blaze.base.lang.buildfile.references.BuildReferenceManager;\n+import com.google.idea.blaze.base.model.primitives.WorkspacePath;\n+import com.google.idea.blaze.base.model.primitives.WorkspaceRoot;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.openapi.vfs.VirtualFileManager;\n+import com.intellij.openapi.vfs.newvfs.BulkFileListener;\n+import com.intellij.openapi.vfs.newvfs.events.VFileEvent;\n+import com.intellij.psi.PsiElement;\n+import com.intellij.psi.PsiFileSystemItem;\n+import com.intellij.util.ObjectUtils;\n+import com.intellij.util.Processor;\n+import com.intellij.util.messages.MessageBusConnection;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+final public class PreludeManagerImpl extends PreludeManager {\n+\n+  private static final String PRELUDE_FILE_NAME = \"prelude_bazel\";\n+\n+  private final Project project;\n+  private PreludeFile preludeFile = null;\n+  private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+  public PreludeManagerImpl(Project project) {\n+    this.project = project;\n+  }\n+\n+  @Override\n+  public boolean searchSymbolsInScope(Processor<BuildElement> processor,\n+      @Nullable PsiElement stopAtElement) {\n+    if (!initialized.getAndSet(true)) {\n+      reloadPreludeFile();\n+      subscribeToFileUpdates();\n+    }\n+\n+    if (preludeFile != null) {\n+      return preludeFile.searchSymbolsInScope(processor, stopAtElement);\n+    } else {\n+      return true;\n+    }\n+  }\n+\n+  private void subscribeToFileUpdates() {\n+    MessageBusConnection connection = project.getMessageBus().connect();\n+    connection.subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListener() {\n+      @Override\n+      public void after(@NotNull List<? extends VFileEvent> events) {\n+        boolean preludeUpdated = events.stream().anyMatch(f -> {\n+          VirtualFile updatedFile = f.getFile();\n+          boolean isPreludeFile =\n+              updatedFile != null && updatedFile.getName().endsWith(PRELUDE_FILE_NAME);\n+          return isPreludeFile && f.isFromSave() || f.isFromRefresh();\n+        });\n+\n+        if (preludeUpdated) {\n+          reloadPreludeFile();\n+        }\n+      }\n+    });\n+  }\n+\n+  private void reloadPreludeFile() {\n+    WorkspaceRoot projectRoot = WorkspaceRoot.fromProjectSafe(project);\n+    if (projectRoot == null) {\n+      return;\n+    }\n+\n+    File preludeFileOnDisk = projectRoot\n+        .fileForPath(new WorkspacePath(\"tools/build_rules/\" + PRELUDE_FILE_NAME));\n+    if (preludeFileOnDisk == null) {\n+      return;\n+    }\n+\n+    PsiFileSystemItem preludeFile = BuildReferenceManager.getInstance(project)\n+        .resolveFile(preludeFileOnDisk);\n+    if (preludeFile != null) {\n+      this.preludeFile = new PreludeFile(ObjectUtils.tryCast(preludeFile, BuildFile.class));\n+    }\n+  }\n+\n+}"
  },
  {
    "sha": "416b4225a3b4f7b4109ccd69766a716c43901e36",
    "filename": "base/src/com/google/idea/blaze/base/projectview/section/sections/AutomaticallyDeriveTargetsSection.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/projectview/section/sections/AutomaticallyDeriveTargetsSection.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/projectview/section/sections/AutomaticallyDeriveTargetsSection.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/projectview/section/sections/AutomaticallyDeriveTargetsSection.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -83,7 +83,7 @@ public ProjectView addProjectViewDefaultValue(\n                   TextBlock.of(\n                       \"# Automatically includes all relevant targets under the 'directories'\"\n                           + \" above\")))\n-          .add(ScalarSection.builder(KEY).set(true))\n+          .add(ScalarSection.builder(KEY).set(false))\n           .add(TextBlockSection.of(TextBlock.newLine()))\n           .build();\n     }"
  },
  {
    "sha": "22868cdb9672d22241f9268f59b47b2298d92036",
    "filename": "base/src/com/google/idea/blaze/base/sync/BlazeBuildParams.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/sync/BlazeBuildParams.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/sync/BlazeBuildParams.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/sync/BlazeBuildParams.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -36,13 +36,18 @@ public static BlazeBuildParams fromProject(Project project) {\n         .setBlazeBinaryPath(provider.getSyncBinaryPath(project))\n         .setBlazeBinaryType(binaryType)\n         .setParallelizeBuilds(parallelizeRemoteSyncs.getValue() && binaryType.isRemote)\n+        .setInfoOnly(false)\n         .build();\n   }\n \n   public abstract String blazeBinaryPath();\n \n   public abstract BuildBinaryType blazeBinaryType();\n \n+  public abstract boolean infoOnly();\n+\n+  public abstract Builder toBuilder();\n+\n   /**\n    * Whether batched build invocations are run in parallel, when possible (only when building\n    * remotely).\n@@ -61,6 +66,8 @@ public static Builder builder() {\n \n     public abstract Builder setBlazeBinaryType(BuildBinaryType value);\n \n+    public abstract Builder setInfoOnly(boolean value);\n+\n     // not public; derived from BuildBinaryType\n     abstract Builder setParallelizeBuilds(boolean parallelizeBuilds);\n "
  },
  {
    "sha": "db01fe52120b0d7fde5a561824f47fdda7b571da",
    "filename": "base/src/com/google/idea/blaze/base/sync/SyncPhaseCoordinator.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/sync/SyncPhaseCoordinator.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/sync/SyncPhaseCoordinator.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/sync/SyncPhaseCoordinator.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -381,6 +381,10 @@ void runSync(BlazeSyncParams params, boolean singleThreaded, BlazeContext contex\n           projectState != null\n               ? BuildPhaseSyncTask.runBuildPhase(project, params, projectState, buildId, context)\n               : BlazeSyncBuildResult.builder().build();\n+      //If we have partial success we'll run the build again this time only with intellij-info-java\n+      if (projectState != null && syncResultFromBuildPhase(buildResult, context) == SyncResult.PARTIAL_SUCCESS) {\n+        buildResult = syncInfoOnly(params, context, buildId, projectState, buildResult);\n+      }\n       UpdatePhaseTask task =\n           UpdatePhaseTask.builder()\n               .setStartTime(startTime)\n@@ -408,6 +412,25 @@ void runSync(BlazeSyncParams params, boolean singleThreaded, BlazeContext contex\n     }\n   }\n \n+  private BlazeSyncBuildResult syncInfoOnly(BlazeSyncParams params, BlazeContext context,\n+      int buildId, SyncProjectState projectState, BlazeSyncBuildResult buildResult) {\n+    final BlazeSyncParams infoOnlySyncParams = params.toBuilder().setBlazeBuildParams(\n+        params.blazeBuildParams().toBuilder().setInfoOnly(true).build()\n+    ).build();\n+    final BlazeSyncBuildResult infoOnlySyncResult = BuildPhaseSyncTask\n+        .runBuildPhase(project, infoOnlySyncParams, projectState, buildId, context);\n+    /*\n+     * updateResult should be used the other way around [ olderRun.updateResult(newerRun) ]\n+     * since that is used to remove stale/old artifacts from targets which boths runs \"saw\"\n+     * In our case both runs are sequential without artifacts changing.\n+     * The second run only has IDE-INFO files\n+     * For every target the first run was able to process it has all the data (first run does IDE-INFO and Resolve)\n+     * What happens when we updateResult as below is that we basically just add the IDE-INFO files\n+     * of the broken targets from the second run into the first run\n+     */\n+    return infoOnlySyncResult.updateResult(buildResult);\n+  }\n+\n   private void queueUpdateTask(UpdatePhaseTask task) {\n     synchronized (this) {\n       if (pendingUpdateTask != null) {"
  },
  {
    "sha": "41db350f37c5b17a973560b8bcbc426b578eeadf",
    "filename": "base/src/com/google/idea/blaze/base/sync/aspects/BlazeIdeInterfaceAspectsImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/sync/aspects/BlazeIdeInterfaceAspectsImpl.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/src/com/google/idea/blaze/base/sync/aspects/BlazeIdeInterfaceAspectsImpl.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/src/com/google/idea/blaze/base/sync/aspects/BlazeIdeInterfaceAspectsImpl.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -385,7 +385,9 @@ private static BlazeBuildOutputs runBuildForTargets(\n \n       aspectStrategy.addAspectAndOutputGroups(\n           builder,\n-          ImmutableList.of(OutputGroup.INFO, OutputGroup.RESOLVE),\n+          buildParams.infoOnly() ?\n+            ImmutableList.of(OutputGroup.INFO):\n+            ImmutableList.of(OutputGroup.INFO, OutputGroup.RESOLVE),\n           activeLanguages,\n           onlyDirectDeps);\n "
  },
  {
    "sha": "c933844487d9389f284581b56c3d9c1ad64615e7",
    "filename": "base/tests/integrationtests/com/google/idea/blaze/base/lang/buildfile/completion/PreludeBasedCompletionTest.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/tests/integrationtests/com/google/idea/blaze/base/lang/buildfile/completion/PreludeBasedCompletionTest.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/base/tests/integrationtests/com/google/idea/blaze/base/lang/buildfile/completion/PreludeBasedCompletionTest.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/base/tests/integrationtests/com/google/idea/blaze/base/lang/buildfile/completion/PreludeBasedCompletionTest.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,85 @@\n+package com.google.idea.blaze.base.lang.buildfile.completion;\n+\n+import com.google.idea.blaze.base.lang.buildfile.BuildFileIntegrationTestCase;\n+import com.google.idea.blaze.base.lang.buildfile.psi.BuildFile;\n+import com.google.idea.blaze.base.lang.buildfile.psi.FuncallExpression;\n+import com.google.idea.blaze.base.lang.buildfile.psi.FunctionStatement;\n+import com.google.idea.blaze.base.model.primitives.WorkspacePath;\n+import com.intellij.openapi.editor.Editor;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+@RunWith(JUnit4.class)\n+public class PreludeBasedCompletionTest extends BuildFileIntegrationTestCase {\n+\n+  private BuildFile buildDefs;\n+\n+  @Before\n+  public void setup() {\n+    buildDefs = createBuildFile(new WorkspacePath(\"java/com/google/build_defs.bzl\"),\n+        \"def function(name, deps)\\n def test_function(arg)\");\n+    createBuildFile(new WorkspacePath(\"java/com/google/build_rules.bzl\"), \"test_rule = rule()\");\n+    workspace.createFile(new WorkspacePath(\"tools/build_rules/prelude_bazel\"),\n+        \"load(\",\n+        \"\\\"//java/com/google:build_defs.bzl\\\",\",\n+        \"\\\"function\\\"\",\n+        \")\",\n+        \"load(\",\n+        \"\\\"//java/com/google:build_rules.bzl\\\",\",\n+        \"\\\"test_rule\\\"\",\n+        \")\");\n+  }\n+\n+  @Test\n+  public void testLoadedFunctionsCompletion() throws Throwable {\n+    BuildFile file = createBuildFile(new WorkspacePath(\"BUILD\"), \"funct\");\n+\n+    Editor editor = editorTest.openFileInEditor(file.getVirtualFile());\n+    editorTest.setCaretPosition(editor, 0, 4);\n+\n+    String[] completionItems = editorTest.getCompletionItemsAsStrings();\n+    assertThat(completionItems).asList().containsExactly(\"function\");\n+  }\n+\n+  @Test\n+  public void testLoadedRuleCompletion() throws Throwable {\n+    BuildFile file = createBuildFile(new WorkspacePath(\"BUILD\"), \"test_\");\n+\n+    Editor editor = editorTest.openFileInEditor(file.getVirtualFile());\n+    editorTest.setCaretPosition(editor, 0, 4);\n+\n+    String[] completionItems = editorTest.getCompletionItemsAsStrings();\n+    assertThat(completionItems).asList().containsExactly(\"test_rule\");\n+  }\n+\n+  @Test\n+  public void testFunctionCompletionWhenFunctionIsNotLoaded() throws Throwable {\n+    BuildFile file = createBuildFile(new WorkspacePath(\"BUILD\"), \"test_func\");\n+\n+    Editor editor = editorTest.openFileInEditor(file.getVirtualFile());\n+    editorTest.setCaretPosition(editor, 0, 9);\n+\n+    String[] completionItems = editorTest.getCompletionItemsAsStrings();\n+    assertThat(completionItems).asList().isEmpty();\n+  }\n+\n+  @Test\n+  public void testReferenceToLoadedFunction() {\n+    BuildFile file = createBuildFile(new WorkspacePath(\"BUILD\"), \"function()\");\n+\n+    FunctionStatement function = buildDefs.firstChildOfClass(FunctionStatement.class);\n+    FuncallExpression funcall = file.firstChildOfClass(FuncallExpression.class);\n+\n+    assertThat(funcall.getReferencedElement()).isEqualTo(function);\n+  }\n+\n+  @Override\n+  protected boolean isLightTestCase() {\n+    return false;\n+  }\n+\n+}"
  },
  {
    "sha": "66d45832acc6943d59e22ac4b49737ccd2e06933",
    "filename": "build_defs/stamp_plugin_xml.py",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/build_defs/stamp_plugin_xml.py",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/build_defs/stamp_plugin_xml.py",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/build_defs/stamp_plugin_xml.py?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -188,11 +188,12 @@ def main():\n     idea_version_element = dom.createElement(\"idea-version\")\n     new_elements.append(idea_version_element)\n \n+    major_version = _parse_major_version(api_version)\n     if args.stamp_since_build:\n-      idea_version_element.setAttribute(\"since-build\",\n-                                        idea_version_build_element)\n+      since_version = major_version + \".0\"\n+      idea_version_element.setAttribute(\"since-build\", since_version)\n     if args.stamp_until_build:\n-      until_version = _parse_major_version(api_version) + \".*\"\n+      until_version = major_version + \".*\"\n       idea_version_element.setAttribute(\"until-build\", until_version)\n \n   if args.changelog_file:"
  },
  {
    "sha": "5bd2f5cb785e02bb48b96548cce9586954f85659",
    "filename": "java/src/com/google/idea/blaze/java/settings/BlazeJavaUserSettings.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/java/src/com/google/idea/blaze/java/settings/BlazeJavaUserSettings.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/java/src/com/google/idea/blaze/java/settings/BlazeJavaUserSettings.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/java/src/com/google/idea/blaze/java/settings/BlazeJavaUserSettings.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -37,7 +37,7 @@ public static BlazeJavaUserSettings getInstance() {\n   }\n \n   private static boolean getDefaultJarCacheValue() {\n-    return BuildSystemProvider.defaultBuildSystem().buildSystem() == BuildSystem.Blaze;\n+    return true;\n   }\n \n   @Override"
  },
  {
    "sha": "4441b3f21ba0252131d646c8971916d9232be61e",
    "filename": "java/src/com/google/idea/blaze/java/sync/BlazeJavaSyncPlugin.java",
    "status": "modified",
    "additions": 1,
    "deletions": 8,
    "changes": 9,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/java/src/com/google/idea/blaze/java/sync/BlazeJavaSyncPlugin.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/java/src/com/google/idea/blaze/java/sync/BlazeJavaSyncPlugin.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/java/src/com/google/idea/blaze/java/sync/BlazeJavaSyncPlugin.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -32,7 +32,6 @@\n import com.google.idea.blaze.base.projectview.section.SectionParser;\n import com.google.idea.blaze.base.scope.BlazeContext;\n import com.google.idea.blaze.base.scope.Scope;\n-import com.google.idea.blaze.base.scope.output.IssueOutput;\n import com.google.idea.blaze.base.scope.output.PerformanceWarning;\n import com.google.idea.blaze.base.scope.scopes.TimingScope;\n import com.google.idea.blaze.base.scope.scopes.TimingScope.EventType;\n@@ -199,13 +198,7 @@ private static void updateJdk(\n \n     final Sdk sdk = Jdks.chooseOrCreateJavaSdk(javaLanguageLevel);\n     if (sdk == null) {\n-      String msg =\n-          String.format(\n-              \"Unable to find a JDK %1$s installed.\\n\", javaLanguageLevel.getPresentableText());\n-      msg +=\n-          \"After configuring a suitable JDK in the \\\"Project Structure\\\" dialog, \"\n-              + \"sync the project again.\";\n-      IssueOutput.error(msg).submit(context);\n+      JdkDetectionNotification.show(project, context, javaLanguageLevel);\n       return;\n     }\n     setProjectSdkAndLanguageLevel(project, sdk, javaLanguageLevel);"
  },
  {
    "sha": "7d6dd7ef888ee26bf94c0399db3ced0bc321caa7",
    "filename": "java/src/com/google/idea/blaze/java/sync/JdkDetectionNotification.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/java/src/com/google/idea/blaze/java/sync/JdkDetectionNotification.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/java/src/com/google/idea/blaze/java/sync/JdkDetectionNotification.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/java/src/com/google/idea/blaze/java/sync/JdkDetectionNotification.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,65 @@\n+package com.google.idea.blaze.java.sync;\n+\n+import com.google.idea.blaze.base.scope.BlazeContext;\n+import com.google.idea.blaze.base.scope.output.IssueOutput;\n+import com.intellij.notification.Notification;\n+import com.intellij.notification.NotificationAction;\n+import com.intellij.notification.NotificationDisplayType;\n+import com.intellij.notification.NotificationGroup;\n+import com.intellij.notification.NotificationType;\n+import com.intellij.notification.Notifications;\n+import com.intellij.notification.NotificationsManager;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.roots.ui.configuration.ProjectSettingsService;\n+import com.intellij.pom.java.LanguageLevel;\n+import org.jetbrains.annotations.NotNull;\n+\n+class JdkDetectionNotification {\n+\n+  private static final NotificationGroup notificationGroup =\n+      new NotificationGroup(\"JDK Detection\", NotificationDisplayType.BALLOON, true);\n+\n+  static void show(Project project, BlazeContext context, @NotNull LanguageLevel languageLevel) {\n+\n+    Notification[] notifications = NotificationsManager\n+        .getNotificationsManager()\n+        .getNotificationsOfType(Notification.class, project);\n+\n+    for (Notification notification : notifications) {\n+      if (notification.getGroupId().equals(notificationGroup.getDisplayId())) {\n+        return;\n+      }\n+    }\n+\n+    String title =\n+        String.format(\"Unable to find a JDK %1$s installed.\", languageLevel.getPresentableText());\n+\n+    String body =\n+        \"After configuring a suitable JDK in the \\\"Project Structure\\\" dialog, sync the project again.\";\n+\n+    Notification notification =\n+        new Notification(notificationGroup.getDisplayId(), title, body, NotificationType.ERROR);\n+\n+    notification.addAction(openProjectSettingsAction());\n+    Notifications.Bus.notify(notification, project);\n+\n+    IssueOutput.error(title + \"\\n\" + body).submit(context);\n+  }\n+\n+  static private AnAction openProjectSettingsAction() {\n+    return new NotificationAction(\"Project Settings\") {\n+      public void update(@NotNull AnActionEvent e) {\n+        e.getPresentation().setEnabledAndVisible(e.getProject() != null);\n+      }\n+\n+      public void actionPerformed(@NotNull AnActionEvent e, @NotNull Notification notification) {\n+        if (e.getProject() == null) {\n+          return;\n+        }\n+        ProjectSettingsService.getInstance(e.getProject()).openProjectSettings();\n+      }\n+    };\n+  }\n+}"
  },
  {
    "sha": "c2062f3c3b7700a1ee278ed3368978f589c2a9af",
    "filename": "plugin_dev/src/META-INF/blaze-plugin-dev.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/plugin_dev/src/META-INF/blaze-plugin-dev.xml",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/plugin_dev/src/META-INF/blaze-plugin-dev.xml",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/plugin_dev/src/META-INF/blaze-plugin-dev.xml?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -19,6 +19,7 @@\n   <extensions defaultExtensionNs=\"com.google.idea.blaze\">\n     <RunConfigurationFactory implementation=\"com.google.idea.blaze.plugin.run.BlazeIntellijPluginConfigurationType$BlazeIntellijPluginRunConfigurationFactory\" order=\"first\"/>\n     <SyncPlugin implementation=\"com.google.idea.blaze.plugin.sync.IntellijPluginSyncPlugin\"/>\n+    <SyncPlugin implementation=\"com.google.idea.blaze.plugin.sync.IntellijScalaPluginSyncPlugin\"/>\n   </extensions>\n \n   <extensions defaultExtensionNs=\"com.intellij\">"
  },
  {
    "sha": "905d6d7c13799fbbb164e35a7b233c690075099e",
    "filename": "plugin_dev/src/com/google/idea/blaze/plugin/sync/IntellijScalaPluginSyncPlugin.java",
    "status": "added",
    "additions": 103,
    "deletions": 0,
    "changes": 103,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/plugin_dev/src/com/google/idea/blaze/plugin/sync/IntellijScalaPluginSyncPlugin.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/plugin_dev/src/com/google/idea/blaze/plugin/sync/IntellijScalaPluginSyncPlugin.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/plugin_dev/src/com/google/idea/blaze/plugin/sync/IntellijScalaPluginSyncPlugin.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2016 The Bazel Authors. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.idea.blaze.plugin.sync;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.idea.blaze.base.model.BlazeProjectData;\n+import com.google.idea.blaze.base.model.BlazeVersionData;\n+import com.google.idea.blaze.base.model.primitives.LanguageClass;\n+import com.google.idea.blaze.base.model.primitives.WorkspaceType;\n+import com.google.idea.blaze.base.projectview.ProjectViewSet;\n+import com.google.idea.blaze.base.scope.BlazeContext;\n+import com.google.idea.blaze.base.sync.BlazeSyncPlugin;\n+import com.google.idea.blaze.base.sync.SourceFolderProvider;\n+import com.google.idea.blaze.java.sync.JavaLanguageLevelHelper;\n+import com.google.idea.blaze.java.sync.model.BlazeJavaSyncData;\n+import com.google.idea.blaze.java.sync.projectstructure.JavaSourceFolderProvider;\n+import com.google.idea.common.util.Transactions;\n+import com.intellij.openapi.module.ModuleType;\n+import com.intellij.openapi.module.StdModuleTypes;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.roots.LanguageLevelProjectExtension;\n+import com.intellij.pom.java.LanguageLevel;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Development environment support for intellij plugin projects. Prevents the project SDK being\n+ * reset during sync\n+ */\n+public class IntellijScalaPluginSyncPlugin implements BlazeSyncPlugin {\n+\n+  @Override\n+  public ImmutableList<WorkspaceType> getSupportedWorkspaceTypes() {\n+    return ImmutableList.of(WorkspaceType.INTELLIJ_PLUGIN);\n+  }\n+\n+  @Nullable\n+  @Override\n+  public ModuleType getWorkspaceModuleType(WorkspaceType workspaceType) {\n+    if (workspaceType == WorkspaceType.INTELLIJ_PLUGIN) {\n+      return StdModuleTypes.JAVA;\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Set<LanguageClass> getSupportedLanguagesInWorkspace(WorkspaceType workspaceType) {\n+    if (workspaceType == WorkspaceType.INTELLIJ_PLUGIN) {\n+      return ImmutableSet.of(LanguageClass.SCALA);\n+    }\n+    return ImmutableSet.of();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public SourceFolderProvider getSourceFolderProvider(BlazeProjectData projectData) {\n+    if (!projectData\n+        .getWorkspaceLanguageSettings()\n+        .isWorkspaceType(WorkspaceType.INTELLIJ_PLUGIN)) {\n+      return null;\n+    }\n+    return new JavaSourceFolderProvider(projectData.getSyncState().get(BlazeJavaSyncData.class));\n+  }\n+\n+  @Override\n+  public void updateProjectSdk(\n+      Project project,\n+      BlazeContext context,\n+      ProjectViewSet projectViewSet,\n+      BlazeVersionData blazeVersionData,\n+      BlazeProjectData blazeProjectData) {\n+    if (!blazeProjectData\n+        .getWorkspaceLanguageSettings()\n+        .isWorkspaceType(WorkspaceType.INTELLIJ_PLUGIN)) {\n+      return;\n+    }\n+\n+    LanguageLevel javaLanguageLevel =\n+        JavaLanguageLevelHelper.getJavaLanguageLevel(\n+            projectViewSet, blazeProjectData, LanguageLevel.JDK_1_8);\n+\n+    // Leave the SDK, but set the language level\n+    Transactions.submitWriteActionTransactionAndWait(\n+        () -> {\n+          LanguageLevelProjectExtension ext = LanguageLevelProjectExtension.getInstance(project);\n+          ext.setLanguageLevel(javaLanguageLevel);\n+        });\n+  }\n+}"
  },
  {
    "sha": "610e7c328318d01227c705b5a0745f6f88fb3662",
    "filename": "plugin_dev/tests/integrationtests/com/google/idea/blaze/plugin/sync/PluginScalaDevSyncTest.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/plugin_dev/tests/integrationtests/com/google/idea/blaze/plugin/sync/PluginScalaDevSyncTest.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/plugin_dev/tests/integrationtests/com/google/idea/blaze/plugin/sync/PluginScalaDevSyncTest.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/plugin_dev/tests/integrationtests/com/google/idea/blaze/plugin/sync/PluginScalaDevSyncTest.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2016 The Bazel Authors. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.idea.blaze.plugin.sync;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.idea.blaze.base.ideinfo.TargetIdeInfo;\n+import com.google.idea.blaze.base.ideinfo.TargetMap;\n+import com.google.idea.blaze.base.ideinfo.TargetMapBuilder;\n+import com.google.idea.blaze.base.model.BlazeProjectData;\n+import com.google.idea.blaze.base.model.primitives.WorkspacePath;\n+import com.google.idea.blaze.base.model.primitives.WorkspaceType;\n+import com.google.idea.blaze.base.sync.BlazeBuildParams;\n+import com.google.idea.blaze.base.sync.BlazeSyncIntegrationTestCase;\n+import com.google.idea.blaze.base.sync.BlazeSyncParams;\n+import com.google.idea.blaze.base.sync.SyncMode;\n+import com.google.idea.blaze.base.sync.data.BlazeProjectDataManager;\n+import com.google.idea.blaze.plugin.run.BlazeIntellijPluginConfiguration;\n+import com.intellij.execution.RunManager;\n+import com.intellij.execution.configurations.RunConfiguration;\n+import java.util.List;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Plugin-dev specific sync integration test. */\n+@RunWith(JUnit4.class)\n+public class PluginScalaDevSyncTest extends BlazeSyncIntegrationTestCase {\n+\n+  @Test\n+  public void testRunConfigurationCreatedDuringSync() throws Exception {\n+    setProjectView(\n+        \"directories:\",\n+        \"  java/com/google\",\n+        \"targets:\",\n+        \"  //java/com/google:lib\",\n+        \"  //java/com/google:plugin\",\n+        \"workspace_type: intellij_plugin\",\n+        \"additional_languages:\",\n+        \"  scala\");\n+\n+    workspace.createFile(\n+        new WorkspacePath(\"java/com/google/ClassWithUniqueName1.java\"),\n+        \"package com.google;\",\n+        \"public class ClassWithUniqueName1 {}\");\n+\n+    workspace.createFile(\n+        new WorkspacePath(\"java/com/google/ClassWithUniqueName2.java\"),\n+        \"package com.google;\",\n+        \"public class ClassWithUniqueName2 {}\");\n+\n+    TargetMap targetMap =\n+        TargetMapBuilder.builder()\n+            .addTarget(\n+                TargetIdeInfo.builder()\n+                    .setBuildFile(sourceRoot(\"java/com/google/BUILD\"))\n+                    .setLabel(\"//java/com/google:lib\")\n+                    .setKind(\"java_library\")\n+                    .addSource(sourceRoot(\"java/com/google/ClassWithUniqueName1.java\"))\n+                    .addSource(sourceRoot(\"java/com/google/ClassWithUniqueName2.java\")))\n+            .addTarget(\n+                TargetIdeInfo.builder()\n+                    .setBuildFile(sourceRoot(\"java/com/google/BUILD\"))\n+                    .setLabel(\"//java/com/google:plugin\")\n+                    .setKind(\"intellij_plugin_debug_target\"))\n+            .build();\n+\n+    setTargetMap(targetMap);\n+\n+    runBlazeSync(\n+        BlazeSyncParams.builder()\n+            .setTitle(\"Sync\")\n+            .setSyncOrigin(\"test\")\n+            .setSyncMode(SyncMode.INCREMENTAL)\n+            .setBlazeBuildParams(BlazeBuildParams.fromProject(getProject()))\n+            .setAddProjectViewTargets(true)\n+            .build());\n+\n+    errorCollector.assertNoIssues();\n+\n+    BlazeProjectData blazeProjectData =\n+        BlazeProjectDataManager.getInstance(getProject()).getBlazeProjectData();\n+    assertThat(blazeProjectData).isNotNull();\n+    assertThat(blazeProjectData.getTargetMap()).isEqualTo(targetMap);\n+    assertThat(blazeProjectData.getWorkspaceLanguageSettings().getWorkspaceType())\n+        .isEqualTo(WorkspaceType.INTELLIJ_PLUGIN);\n+\n+    List<RunConfiguration> runConfigs =\n+        RunManager.getInstance(getProject()).getAllConfigurationsList();\n+    assertThat(runConfigs).hasSize(1);\n+    assertThat(runConfigs.get(0)).isInstanceOf(BlazeIntellijPluginConfiguration.class);\n+  }\n+}"
  },
  {
    "sha": "d6b3ee1b4b5de712a4f8d400200002047bd27835",
    "filename": "scala/src/com/google/idea/blaze/scala/run/producers/GenerateDeployableJarTaskProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wix-playground/intellij/blob/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/scala/src/com/google/idea/blaze/scala/run/producers/GenerateDeployableJarTaskProvider.java",
    "raw_url": "https://github.com/wix-playground/intellij/raw/7846aeaf6e9eba713c25a16fece24a9a53b9c7f9/scala/src/com/google/idea/blaze/scala/run/producers/GenerateDeployableJarTaskProvider.java",
    "contents_url": "https://api.github.com/repos/wix-playground/intellij/contents/scala/src/com/google/idea/blaze/scala/run/producers/GenerateDeployableJarTaskProvider.java?ref=7846aeaf6e9eba713c25a16fece24a9a53b9c7f9",
    "patch": "@@ -235,6 +235,7 @@ protected BuildResult execute(BlazeContext context) {\n                             BlazeFlags.blazeFlags(\n                                 project, projectViewSet, BlazeCommandName.BUILD, invocationContext))\n                         .addBlazeFlags(buildResultHelper.getBuildFlags())\n+                        .addBlazeFlags(\"--remote_upload_local_results=false\")\n                         .build();\n                 int exitCode =\n                     ExternalTask.builder(workspaceRoot)"
  }
]
