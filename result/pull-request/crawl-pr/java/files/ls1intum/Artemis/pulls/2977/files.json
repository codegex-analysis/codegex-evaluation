[
  {
    "sha": "067c55bdc11b09a9b9b3a5cc09c68d0946078f33",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -160,13 +160,14 @@ else if (modelingExercise.isExamExercise()) {\n \n         participation.addSubmission(modelingSubmission);\n \n-        try {\n-            notifyCompass(modelingSubmission, modelingExercise);\n-        }\n-        catch (Exception ex) {\n-            log.warn(\"There was an exception when notifying Compass about a new modeling submission with error message: \" + ex.getMessage()\n-                    + \". Artemis will ignore this error and continue to save the modeling submission\", ex);\n-        }\n+        // try {\n+        // notifyCompass(modelingSubmission, modelingExercise);\n+        // }\n+        // catch (Exception ex) {\n+        // log.warn(\"There was an exception when notifying Compass about a new modeling submission with error message: \" + ex.getMessage()\n+        // + \". Artemis will ignore this error and continue to save the modeling submission\", ex);\n+        // }\n+\n         participation.setInitializationState(InitializationState.FINISHED);\n \n         StudentParticipation savedParticipation = studentParticipationRepository.save(participation);\n@@ -233,7 +234,7 @@ private ModelingSubmission assignResultWithFeedbackSuggestionsToSubmission(Model\n         }\n         var studentParticipation = (StudentParticipation) modelingSubmission.getParticipation();\n         long exerciseId = studentParticipation.getExercise().getId();\n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(modelingSubmission.getId(), exerciseId);\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(modelingSubmission.getId());\n         if (automaticResult != null) {\n             automaticResult.setSubmission(null);\n             automaticResult.setParticipation(modelingSubmission.getParticipation());"
  },
  {
    "sha": "536151acaf4185194d1a38ba9b659713e092dc0a",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/CalculationEngine.java",
    "status": "removed",
    "additions": 0,
    "deletions": 112,
    "changes": 112,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/f5f925a82ee922a0421febd21559dc6d329dd040/src/main/java/de/tum/in/www1/artemis/service/compass/CalculationEngine.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/f5f925a82ee922a0421febd21559dc6d329dd040/src/main/java/de/tum/in/www1/artemis/service/compass/CalculationEngine.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/CalculationEngine.java?ref=f5f925a82ee922a0421febd21559dc6d329dd040",
    "patch": "@@ -1,112 +0,0 @@\n-package de.tum.in.www1.artemis.service.compass;\n-\n-import java.time.LocalDateTime;\n-import java.util.Collection;\n-import java.util.List;\n-\n-import com.google.gson.JsonObject;\n-\n-import de.tum.in.www1.artemis.domain.Feedback;\n-import de.tum.in.www1.artemis.domain.Result;\n-import de.tum.in.www1.artemis.service.compass.grade.Grade;\n-\n-public interface CalculationEngine {\n-\n-    /**\n-     * Get the given number of ids of the next optimal modeling submissions. Optimal means that an assessment for this model results in the biggest knowledge gain for Compass which\n-     * can be used for automatic assessments.\n-     *\n-     * @param numberOfModels the number of next optimal models to load\n-     * @return the ids of the next optimal modeling submissions, or an empty list if there are no unhandled submissions\n-     */\n-    List<Long> getNextOptimalModels(int numberOfModels);\n-\n-    /**\n-     * Get the assessment result for a model. If no assessment is saved for the given model, it tries to create a new one automatically with the existing information of the engine.\n-     *\n-     * @param modelId the id of the model\n-     * @return the assessment result for the model\n-     */\n-    Grade getGradeForModel(long modelId);\n-\n-    Collection<Long> getModelIds();\n-\n-    /**\n-     * Update the engine with a new manual assessment.\n-     *\n-     * @param modelingAssessment the new assessment as list of individual Feedback objects\n-     * @param submissionId       the id of the corresponding model\n-     */\n-    void notifyNewAssessment(List<Feedback> modelingAssessment, long submissionId);\n-\n-    /**\n-     * Add a new model\n-     *\n-     * @param model   the new model as raw sting\n-     * @param modelId the id of the new model\n-     */\n-    void notifyNewModel(String model, long modelId);\n-\n-    /**\n-     * @return the time when the engine has been used last\n-     */\n-    LocalDateTime getLastUsedAt();\n-\n-    /**\n-     * Get the list of model IDs which have been selected for the next manual assessments. Typically these models are the ones where Compass learns the most, when they are\n-     * assessed. All returned models do not have a complete assessment.\n-     *\n-     * @return a list of modelIds that should be assessed next\n-     */\n-    List<Long> getModelsWaitingForAssessment();\n-\n-    /**\n-     * Removes the model with the given id from the list of models that should be assessed next. The isAssessed flag indicates if the corresponding model still needs an assessment\n-     * or not, i.e. if the flag is true, the model will no longer be considered for assessment by Compass.\n-     *\n-     * @param modelId    the id of the model\n-     * @param isAssessed a flag indicating if the model still needs an assessment or not\n-     */\n-    void removeModelWaitingForAssessment(long modelId, boolean isAssessed);\n-\n-    /**\n-     * Mark a model as unassessed, i.e. that it (still) needs to be assessed. By that it is not locked anymore and can be returned for assessment by Compass again.\n-     *\n-     * @param modelId the id of the model that should be marked as unassessed\n-     */\n-    void markModelAsUnassessed(long modelId);\n-\n-    /**\n-     * Generate a Feedback list from the given Grade for the given model. The Grade was generated by Compass earlier in the automatic assessment process. It basically contains the\n-     * Compass internal representation of the automatic assessment for the given model.\n-     *\n-     * @param grade   the Grade generated by Compass from which the Feedback list should be generated from\n-     * @param modelId the id of the corresponding model\n-     * @param result  the corresponding result that will be linked to the newly created feedback items\n-     * @return the list of Feedback items generated from the Grade\n-     */\n-    List<Feedback> convertToFeedback(Grade grade, long modelId, Result result);\n-\n-    /**\n-     * @return statistics about the UML model\n-     */\n-    JsonObject getStatistics();\n-\n-    /**\n-     * Get the confidence for a specific model element with the given id. The confidence is the percentage indicating how certain Compass is about the assessment of the given model\n-     * element. If it is smaller than a configured threshold, the element with the given id will not be assessed automatically.\n-     *\n-     * @param elementId    the id of the model element\n-     * @param submissionId the id of the submission that contains the corresponding model\n-     * @return the confidence for the model element with the given id\n-     */\n-    double getConfidenceForElement(String elementId, long submissionId);\n-\n-    /**\n-     * Used for internal analysis of modeling data. Do not remove, usage is commented out due to performance reasons.\n-     *\n-     * @param exerciseId the id of the modeling exercise that is analyzed\n-     * @param finishedResults the list of finished results, i.e. results for which assessor and completion date is not null\n-     */\n-    void printStatistic(long exerciseId, List<Result> finishedResults);\n-}"
  },
  {
    "sha": "9f636ab180ccc539d3491a9aaacf257780a336cd",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/CompassCalculationEngine.java",
    "status": "modified",
    "additions": 98,
    "deletions": 50,
    "changes": 148,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/CompassCalculationEngine.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/CompassCalculationEngine.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/CompassCalculationEngine.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -14,6 +14,7 @@\n \n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n+import com.hazelcast.core.HazelcastInstance;\n \n import de.tum.in.www1.artemis.domain.Feedback;\n import de.tum.in.www1.artemis.domain.Result;\n@@ -30,26 +31,23 @@\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n import de.tum.in.www1.artemis.service.compass.umlmodel.classdiagram.*;\n \n-public class CompassCalculationEngine implements CalculationEngine {\n+public class CompassCalculationEngine {\n \n     private final Logger log = LoggerFactory.getLogger(CompassCalculationEngine.class);\n \n     private ModelIndex modelIndex;\n \n-    private AssessmentIndex assessmentIndex;\n-\n     private AutomaticAssessmentController automaticAssessmentController;\n \n     private ModelSelector modelSelector;\n \n     private LocalDateTime lastUsed;\n \n-    CompassCalculationEngine(Set<ModelingSubmission> modelingSubmissions) {\n+    CompassCalculationEngine(Long exerciseId, Set<ModelingSubmission> modelingSubmissions, HazelcastInstance hazelcastInstance) {\n         lastUsed = LocalDateTime.now();\n-        modelIndex = new ModelIndex();\n-        assessmentIndex = new AssessmentIndex();\n-        automaticAssessmentController = new AutomaticAssessmentController();\n-        modelSelector = new ModelSelector();\n+        modelIndex = new ModelIndex(exerciseId, hazelcastInstance);\n+        automaticAssessmentController = new AutomaticAssessmentController(exerciseId, hazelcastInstance);\n+        modelSelector = new ModelSelector(automaticAssessmentController);\n \n         for (Submission submission : modelingSubmissions) {\n             // We have to unproxy here as sometimes the Submission is a Hibernate proxy resulting in a cast exception\n@@ -149,37 +147,52 @@ private double getTotalConfidence() {\n     }\n \n     private void assessModelsAutomatically() {\n-        automaticAssessmentController.assessModelsAutomatically(modelIndex, assessmentIndex);\n+        automaticAssessmentController.assessModelsAutomatically(modelIndex);\n     }\n \n-    @Override\n+    /**\n+     * Get the given number of ids of the next optimal modeling submissions. Optimal means that an assessment for this model results in the biggest knowledge gain for Compass which\n+     * can be used for automatic assessments.\n+     *\n+     * @param numberOfModels the number of next optimal models to load\n+     * @return the ids of the next optimal modeling submissions, or an empty list if there are no unhandled submissions\n+     */\n     public List<Long> getNextOptimalModels(int numberOfModels) {\n         lastUsed = LocalDateTime.now();\n         return modelSelector.selectNextModels(modelIndex, numberOfModels);\n     }\n \n-    @Override\n+    /**\n+     * Get the assessment result for a model. If no assessment is saved for the given model, it tries to create a new one automatically with the existing information of the engine.\n+     *\n+     * @param modelSubmissionId the id of the model\n+     * @return the assessment result for the model\n+     */\n     public Grade getGradeForModel(long modelSubmissionId) {\n         lastUsed = LocalDateTime.now();\n         if (!modelIndex.getModelMap().containsKey(modelSubmissionId)) {\n             return null;\n         }\n \n         UMLDiagram model = modelIndex.getModelMap().get(modelSubmissionId);\n-        CompassResult compassResult = model.getLastAssessmentCompassResult();\n+        CompassResult compassResult = automaticAssessmentController.getLastAssessmentCompassResult(modelSubmissionId);\n \n         if (compassResult == null) {\n-            return automaticAssessmentController.assessModelAutomatically(model, assessmentIndex);\n+            return automaticAssessmentController.assessModelAutomatically(model);\n         }\n         return compassResult;\n     }\n \n-    @Override\n     public Collection<Long> getModelIds() {\n         return modelIndex.getModelMap().keySet();\n     }\n \n-    @Override\n+    /**\n+     * Update the engine with a new manual assessment.\n+     *\n+     * @param modelingAssessment the new assessment as list of individual Feedback objects\n+     * @param assessedModelSubmissionId  the id of the corresponding model\n+     */\n     public void notifyNewAssessment(List<Feedback> modelingAssessment, long assessedModelSubmissionId) {\n         lastUsed = LocalDateTime.now();\n         modelSelector.addAlreadyHandledModel(assessedModelSubmissionId);\n@@ -193,7 +206,12 @@ public void notifyNewAssessment(List<Feedback> modelingAssessment, long assessed\n         assessModelsAutomatically();\n     }\n \n-    @Override\n+    /**\n+     * Add a new model\n+     *\n+     * @param model   the new model as raw sting\n+     * @param modelId the id of the new model\n+     */\n     public void notifyNewModel(String model, long modelId) {\n         lastUsed = LocalDateTime.now();\n         // Do not add models that might already exist\n@@ -208,17 +226,42 @@ public void notifyNewModel(String model, long modelId) {\n         }\n     }\n \n-    @Override\n+    /**\n+     * Add a new model\n+     *\n+     * @param submissions the list of submissions to get models and ids from\n+     */\n+    public void notifyNewModels(List<ModelingSubmission> submissions) {\n+        lastUsed = LocalDateTime.now();\n+        for (ModelingSubmission submission : submissions) {\n+            notifyNewModel(submission.getModel(), submission.getId());\n+        }\n+    }\n+\n+    /**\n+     * @return the time when the engine has been used last\n+     */\n     public LocalDateTime getLastUsedAt() {\n         return lastUsed;\n     }\n \n-    @Override\n+    /**\n+     * Get the list of model IDs which have been selected for the next manual assessments. Typically these models are the ones where Compass learns the most, when they are\n+     * assessed. All returned models do not have a complete assessment.\n+     *\n+     * @return a list of modelIds that should be assessed next\n+     */\n     public List<Long> getModelsWaitingForAssessment() {\n         return modelSelector.getModelsWaitingForAssessment();\n     }\n \n-    @Override\n+    /**\n+     * Removes the model with the given id from the list of models that should be assessed next. The isAssessed flag indicates if the corresponding model still needs an assessment\n+     * or not, i.e. if the flag is true, the model will no longer be considered for assessment by Compass.\n+     *\n+     * @param modelSubmissionId    the id of the model\n+     * @param isAssessed a flag indicating if the model still needs an assessment or not\n+     */\n     public void removeModelWaitingForAssessment(long modelSubmissionId, boolean isAssessed) {\n         modelSelector.removeModelWaitingForAssessment(modelSubmissionId);\n         if (isAssessed) {\n@@ -229,12 +272,24 @@ public void removeModelWaitingForAssessment(long modelSubmissionId, boolean isAs\n         }\n     }\n \n-    @Override\n+    /**\n+     * Mark a model as unassessed, i.e. that it (still) needs to be assessed. By that it is not locked anymore and can be returned for assessment by Compass again.\n+     *\n+     * @param modelSubmissionId the id of the model that should be marked as unassessed\n+     */\n     public void markModelAsUnassessed(long modelSubmissionId) {\n         modelSelector.removeAlreadyHandledModel(modelSubmissionId);\n     }\n \n-    @Override\n+    /**\n+     * Generate a Feedback list from the given Grade for the given model. The Grade was generated by Compass earlier in the automatic assessment process. It basically contains the\n+     * Compass internal representation of the automatic assessment for the given model.\n+     *\n+     * @param grade   the Grade generated by Compass from which the Feedback list should be generated from\n+     * @param modelId the id of the corresponding model\n+     * @param result  the corresponding result that will be linked to the newly created feedback items\n+     * @return the list of Feedback items generated from the Grade\n+     */\n     public List<Feedback> convertToFeedback(Grade grade, long modelId, Result result) {\n         UMLDiagram model = this.modelIndex.getModelMap().get(modelId);\n \n@@ -294,7 +349,6 @@ private String buildReferenceString(UMLElement umlElement, String jsonElementId)\n      * @return statistics about the UML model\n      */\n     // TODO: I don't think we should expose JSONObject to this internal server class. It would be better to return Java objects here\n-    @Override\n     public JsonObject getStatistics() {\n         JsonObject jsonObject = new JsonObject();\n \n@@ -321,8 +375,8 @@ public JsonObject getStatistics() {\n         JsonObject models = new JsonObject();\n         for (Map.Entry<Long, UMLDiagram> modelEntry : getModelMap().entrySet()) {\n             JsonObject model = new JsonObject();\n-            model.addProperty(\"coverage\", modelEntry.getValue().getLastAssessmentCoverage());\n-            model.addProperty(\"confidence\", modelEntry.getValue().getLastAssessmentConfidence());\n+            model.addProperty(\"coverage\", automaticAssessmentController.getLastAssessmentCoverage(modelEntry.getValue().getModelSubmissionId()));\n+            model.addProperty(\"confidence\", automaticAssessmentController.getLastAssessmentConfidence(modelEntry.getValue().getModelSubmissionId()));\n             int numberOfModelConflicts = 0;\n             List<UMLElement> elements = new ArrayList<>(modelEntry.getValue().getAllModelElements());\n             for (UMLElement element : elements) {\n@@ -344,15 +398,22 @@ public JsonObject getStatistics() {\n         return jsonObject;\n     }\n \n-    @Override\n+    /**\n+     * Get the confidence for a specific model element with the given id. The confidence is the percentage indicating how certain Compass is about the assessment of the given model\n+     * element. If it is smaller than a configured threshold, the element with the given id will not be assessed automatically.\n+     *\n+     * @param elementId    the id of the model element\n+     * @param submissionId the id of the submission that contains the corresponding model\n+     * @return the confidence for the model element with the given id\n+     */\n     public double getConfidenceForElement(String elementId, long submissionId) {\n         UMLDiagram model = modelIndex.getModel(submissionId);\n         UMLElement element = model.getElementByJSONID(elementId);\n         if (element == null) {\n             return 0.0;\n         }\n \n-        Optional<SimilaritySetAssessment> optionalAssessment = assessmentIndex.getAssessmentForSimilaritySet(element.getSimilarityID());\n+        Optional<SimilaritySetAssessment> optionalAssessment = automaticAssessmentController.getAssessmentForSimilaritySet(element.getSimilarityID());\n         return optionalAssessment.map(assessment -> assessment.getScore().getConfidence()).orElse(0.0);\n     }\n \n@@ -364,29 +425,11 @@ public double getConfidenceForElement(String elementId, long submissionId) {\n      * @param model              the corresponding model\n      */\n     private void addNewManualAssessment(List<Feedback> modelingAssessment, UMLDiagram model) {\n-        Map<String, Feedback> feedbackMapping = createElementIdFeedbackMapping(modelingAssessment);\n-        automaticAssessmentController.addFeedbackToSimilaritySet(assessmentIndex, feedbackMapping, model);\n-    }\n-\n-    /**\n-     * Create a jsonModelId to Feedback mapping generated from the feedback list of a submission.\n-     *\n-     * @param feedbackList the feedbackList\n-     * @return a map of elementIds to scores\n-     */\n-    private Map<String, Feedback> createElementIdFeedbackMapping(List<Feedback> feedbackList) {\n-        Map<String, Feedback> elementIdFeedbackMap = new HashMap<>();\n-        feedbackList.forEach(feedback -> {\n-            String jsonElementId = feedback.getReferenceElementId();\n-            if (jsonElementId != null) {\n-                elementIdFeedbackMap.put(jsonElementId, feedback);\n-            }\n-        });\n-        return elementIdFeedbackMap;\n+        automaticAssessmentController.addFeedbacksToSimilaritySet(modelingAssessment, model);\n     }\n \n     private boolean hasConflict(int elementId) {\n-        Optional<SimilaritySetAssessment> optionalAssessment = assessmentIndex.getAssessmentForSimilaritySet(elementId);\n+        Optional<SimilaritySetAssessment> optionalAssessment = automaticAssessmentController.getAssessmentForSimilaritySet(elementId);\n \n         if (optionalAssessment.isEmpty() || optionalAssessment.get().getFeedbackList() == null || optionalAssessment.get().getFeedbackList().isEmpty()) {\n             return false;\n@@ -397,7 +440,12 @@ private boolean hasConflict(int elementId) {\n         return !feedbackList.stream().allMatch(feedback -> feedback.getCredits().equals(feedbackList.get(0).getCredits()));\n     }\n \n-    @Override\n+    /**\n+     * Used for internal analysis of modeling data. Do not remove, usage is commented out due to performance reasons.\n+     *\n+     * @param exerciseId the id of the modeling exercise that is analyzed\n+     * @param finishedResults the list of finished results, i.e. results for which assessor and completion date is not null\n+     */\n     public void printStatistic(long exerciseId, List<Result> finishedResults) {\n         log.info(\"Statistics for exercise \" + exerciseId + \"\\n\\n\\n\");\n \n@@ -467,7 +515,7 @@ else if (feedback.getCredits() < 0) {\n         }\n \n         long numberOfModels = modelIndex.getModelCollection().size();\n-        Map<UMLElement, Integer> modelElementMapping = modelIndex.getModelElementMapping();\n+        Map<UMLElement, Integer> modelElementMapping = modelIndex.getElementSimilarityMap();\n         long numberOfModelElements = modelElementMapping.size();\n         long numberOfClasses = 0;\n         long numberOfAttrbutes = 0;\n@@ -544,13 +592,13 @@ else if (element instanceof UMLPackage) {\n \n         // Note, that these two value refer to all similarity sets that have an assessment, i.e. it is not the total number as it excludes the sets without assessments. This might\n         // distort the analysis values below.\n-        long numberOfSimilaritySets = assessmentIndex.getAssessmentMap().size();\n+        long numberOfSimilaritySets = automaticAssessmentController.getAssessmentMap().size();\n         long numberOfElementsInSimilaritySets = 0;\n \n         long numberOfSimilaritySetsPositiveScore = 0;\n         long numberOfSimilaritySetsPositiveScoreRegardingConfidence = 0;\n \n-        for (SimilaritySetAssessment similaritySetAssessment : assessmentIndex.getAssessmentMap().values()) {\n+        for (SimilaritySetAssessment similaritySetAssessment : automaticAssessmentController.getAssessmentMap().values()) {\n             numberOfElementsInSimilaritySets += similaritySetAssessment.getFeedbackList().size();\n \n             Score score = similaritySetAssessment.getScore();"
  },
  {
    "sha": "fbc0d81a2b699b900312b896fe6781077ee28045",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/CompassService.java",
    "status": "modified",
    "additions": 37,
    "deletions": 41,
    "changes": 78,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/CompassService.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/CompassService.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/CompassService.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -16,18 +16,17 @@\n import org.springframework.stereotype.Service;\n \n import com.google.gson.JsonObject;\n+import com.hazelcast.core.HazelcastInstance;\n \n import de.tum.in.www1.artemis.domain.Feedback;\n import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n import de.tum.in.www1.artemis.domain.enumeration.DiagramType;\n import de.tum.in.www1.artemis.domain.modeling.ModelingExercise;\n import de.tum.in.www1.artemis.domain.modeling.ModelingSubmission;\n import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n-import de.tum.in.www1.artemis.repository.ModelingExerciseRepository;\n-import de.tum.in.www1.artemis.repository.ModelingSubmissionRepository;\n-import de.tum.in.www1.artemis.repository.ResultRepository;\n-import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+import de.tum.in.www1.artemis.repository.*;\n import de.tum.in.www1.artemis.service.compass.grade.CompassGrade;\n import de.tum.in.www1.artemis.service.compass.grade.Grade;\n \n@@ -49,19 +48,23 @@\n      * Automatic results generated by Compass are not stored in the database, instead they are stored in these maps. As soon as a submission is locked for assessment, its automatic\n      * result will be retrieved from the corresponding map and stored to the database.\n      */\n-    private static final Map<Long, Map<Long, Result>> semiAutomaticResultMaps = new ConcurrentHashMap<>();\n+    private Map<Long, Result> semiAutomaticResults;\n \n     /**\n      * Map exerciseId to compass CalculationEngines\n      */\n-    private static Map<Long, CalculationEngine> compassCalculationEngines = new ConcurrentHashMap<>();\n+    private static Map<Long, CompassCalculationEngine> compassCalculationEngines = new ConcurrentHashMap<>();\n+\n+    private final HazelcastInstance hazelcastInstance;\n \n     public CompassService(ResultRepository resultRepository, ModelingExerciseRepository modelingExerciseRepository, ModelingSubmissionRepository modelingSubmissionRepository,\n-            StudentParticipationRepository studentParticipationRepository) {\n+            StudentParticipationRepository studentParticipationRepository, HazelcastInstance hazelcastInstance) {\n         this.resultRepository = resultRepository;\n         this.modelingExerciseRepository = modelingExerciseRepository;\n         this.modelingSubmissionRepository = modelingSubmissionRepository;\n         this.studentParticipationRepository = studentParticipationRepository;\n+        this.hazelcastInstance = hazelcastInstance;\n+        this.semiAutomaticResults = hazelcastInstance.getMap(\"semi_automatic_results\");\n     }\n \n     /**\n@@ -186,10 +189,10 @@ public void cancelAssessmentForSubmission(ModelingExercise modelingExercise, lon\n         if (!isSupported(modelingExercise) || !loadExerciseIfSuspended(modelingExercise.getId())) {\n             return;\n         }\n-        compassCalculationEngines.get(modelingExercise.getId()).markModelAsUnassessed(modelSubmissionId);\n-        if (semiAutomaticResultMaps.containsKey(modelingExercise.getId())) {\n-            semiAutomaticResultMaps.get(modelingExercise.getId()).remove(modelSubmissionId);\n-        }\n+        Long exerciseId = modelingExercise.getId();\n+        compassCalculationEngines.get(exerciseId).markModelAsUnassessed(modelSubmissionId);\n+        semiAutomaticResults.remove(modelSubmissionId);\n+\n         generateAutomaticFeedbackSuggestions(modelSubmissionId, modelingExercise.getId());\n     }\n \n@@ -221,7 +224,11 @@ public void addAssessment(long exerciseId, long submissionId, List<Feedback> mod\n             return;\n         }\n \n-        CalculationEngine engine = compassCalculationEngines.get(exerciseId);\n+        CompassCalculationEngine engine = compassCalculationEngines.get(exerciseId);\n+\n+        List<ModelingSubmission> modelingSubmissions = modelingSubmissionRepository.findSubmittedByExerciseIdWithEagerResultsAndFeedback(exerciseId);\n+        engine.notifyNewModels(modelingSubmissions);\n+\n         engine.notifyNewAssessment(modelingAssessment, submissionId);\n \n         // Check all models for new automatic assessments\n@@ -232,14 +239,10 @@ public void addAssessment(long exerciseId, long submissionId, List<Feedback> mod\n      * Get the semi automatic result generated by Compass from the semi automatic result map for the submission with the given id.\n      *\n      * @param submissionId the id of the submission for which to get the semi automatic result\n-     * @param exerciseId the exercise the given submission belongs to\n      * @return the semi automatic result for the submission with the given id\n      */\n-    public Result getResultWithFeedbackSuggestionsForSubmission(long submissionId, long exerciseId) {\n-        if (!semiAutomaticResultMaps.containsKey(exerciseId)) {\n-            return null;\n-        }\n-        return semiAutomaticResultMaps.get(exerciseId).get(submissionId);\n+    public Result getResultWithFeedbackSuggestionsForSubmission(long submissionId) {\n+        return semiAutomaticResults.get(submissionId);\n     }\n \n     /**\n@@ -249,9 +252,7 @@ public Result getResultWithFeedbackSuggestionsForSubmission(long submissionId, l\n      * @param exerciseId the exercise the given submission belongs to\n      */\n     public void removeSemiAutomaticResultForSubmission(long submissionId, long exerciseId) {\n-        if (semiAutomaticResultMaps.containsKey(exerciseId)) {\n-            semiAutomaticResultMaps.get(exerciseId).remove(submissionId);\n-        }\n+        semiAutomaticResults.remove(submissionId);\n     }\n \n     /**\n@@ -264,7 +265,7 @@ public void removeSemiAutomaticResultForSubmission(long submissionId, long exerc\n      * @param exerciseId   the id of the corresponding exercise\n      */\n     private void generateAutomaticFeedbackSuggestions(long submissionId, long exerciseId) {\n-        CalculationEngine engine = compassCalculationEngines.get(exerciseId);\n+        CompassCalculationEngine engine = compassCalculationEngines.get(exerciseId);\n         ModelingSubmission modelingSubmission = findModelingSubmissionById(submissionId);\n \n         if (engine == null || modelingSubmission == null) {\n@@ -273,7 +274,7 @@ private void generateAutomaticFeedbackSuggestions(long submissionId, long exerci\n         }\n \n         Result result = provideResultForSubmission(modelingSubmission);\n-        generateSemiAutomaticResult(submissionId, result, engine, exerciseId);\n+        generateSemiAutomaticResult(submissionId, result, engine);\n     }\n \n     /**\n@@ -286,7 +287,7 @@ private void generateAutomaticFeedbackSuggestions(long submissionId, long exerci\n      * @param exerciseId    the id of the corresponding exercise\n      */\n     private void assessAllAutomatically(Collection<Long> submissionIds, long exerciseId) {\n-        CalculationEngine engine = compassCalculationEngines.get(exerciseId);\n+        CompassCalculationEngine engine = compassCalculationEngines.get(exerciseId);\n         List<ModelingSubmission> modelingSubmissions = modelingSubmissionRepository.findWithEagerResultsFeedbacksAssessorAndParticipationResultsByIdIn(submissionIds);\n \n         if (engine == null) {\n@@ -296,7 +297,7 @@ private void assessAllAutomatically(Collection<Long> submissionIds, long exercis\n \n         for (ModelingSubmission modelingSubmission : modelingSubmissions) {\n             Result result = provideResultForSubmission(modelingSubmission);\n-            generateSemiAutomaticResult(modelingSubmission.getId(), result, engine, exerciseId);\n+            generateSemiAutomaticResult(modelingSubmission.getId(), result, engine);\n         }\n     }\n \n@@ -309,9 +310,8 @@ private void assessAllAutomatically(Collection<Long> submissionIds, long exercis\n      * @param submissionId the id of the submission for which the semi automatic result should be generated\n      * @param result the result of the submission that is updated with the automatic feedback generated by Compass\n      * @param engine the calculation engine for the corresponding exercise\n-     * @param exerciseId the exercise the given submission belongs to\n      */\n-    private void generateSemiAutomaticResult(long submissionId, Result result, CalculationEngine engine, long exerciseId) {\n+    private void generateSemiAutomaticResult(long submissionId, Result result, CompassCalculationEngine engine) {\n         if (result.getAssessmentType() != AssessmentType.MANUAL && result.getAssessor() == null) {\n             // Round compass grades to avoid machine precision errors, make the grades more readable and give a slight advantage.\n             Grade grade = roundGrades(engine.getGradeForModel(submissionId));\n@@ -321,11 +321,7 @@ private void generateSemiAutomaticResult(long submissionId, Result result, Calcu\n             result.getFeedbacks().addAll(automaticFeedback);\n             result.setHasFeedback(false);\n             result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n-\n-            if (!semiAutomaticResultMaps.containsKey(exerciseId)) {\n-                semiAutomaticResultMaps.put(exerciseId, new ConcurrentHashMap<>());\n-            }\n-            semiAutomaticResultMaps.get(exerciseId).put(submissionId, result);\n+            semiAutomaticResults.put(submissionId, result);\n         }\n         else {\n             // Make sure next optimal model is in a valid state\n@@ -375,13 +371,10 @@ private Result provideResultForSubmission(ModelingSubmission modelingSubmission)\n         Result result = modelingSubmission.getLatestResult();\n \n         if (result == null || !AssessmentType.MANUAL.equals(result.getAssessmentType())) {\n-            StudentParticipation studentParticipation = (StudentParticipation) modelingSubmission.getParticipation();\n-            long exerciseId = studentParticipation.getExercise().getId();\n-            if (semiAutomaticResultMaps.containsKey(exerciseId)) {\n-                result = semiAutomaticResultMaps.get(exerciseId).get(modelingSubmission.getId());\n-            }\n+            result = semiAutomaticResults.get(modelingSubmission.getId());\n \n             if (result == null) {\n+                StudentParticipation studentParticipation = (StudentParticipation) modelingSubmission.getParticipation();\n                 result = new Result().submission(modelingSubmission).participation(studentParticipation);\n             }\n         }\n@@ -446,7 +439,6 @@ public void addModel(long exerciseId, long modelId, String model) {\n             return;\n         }\n         compassCalculationEngines.get(exerciseId).notifyNewModel(model, modelId);\n-        generateAutomaticFeedbackSuggestions(modelId, exerciseId);\n     }\n \n     /**\n@@ -479,9 +471,8 @@ private void loadCalculationEngineForExercise(long exerciseId) {\n         log.info(\"Loading Compass calculation engine for exercise \" + exerciseId);\n \n         Set<ModelingSubmission> modelingSubmissions = getSubmissionsForExercise(exerciseId);\n-        CalculationEngine calculationEngine = new CompassCalculationEngine(modelingSubmissions);\n+        CompassCalculationEngine calculationEngine = new CompassCalculationEngine(exerciseId, modelingSubmissions, hazelcastInstance);\n         compassCalculationEngines.put(exerciseId, calculationEngine);\n-        assessAllAutomatically(calculationEngine.getModelIds(), exerciseId);\n     }\n \n     /**\n@@ -537,6 +528,11 @@ public void printStatistic(Long exerciseId) {\n      * @return a list of modelIds that should be assessed next\n      */\n     public List<Long> getCalculationEngineModelsWaitingForAssessment(Long exerciseId) {\n-        return compassCalculationEngines.get(exerciseId).getModelsWaitingForAssessment();\n+        List<ModelingSubmission> modelingSubmissions = modelingSubmissionRepository.findSubmittedByExerciseIdWithEagerResultsAndFeedback(exerciseId);\n+        assessAllAutomatically(modelingSubmissions.stream().map(Submission::getId).collect(Collectors.toList()), exerciseId);\n+        CompassCalculationEngine engine = compassCalculationEngines.get(exerciseId);\n+        engine.notifyNewModels(modelingSubmissions);\n+\n+        return engine.getModelsWaitingForAssessment();\n     }\n }"
  },
  {
    "sha": "6f1c40c9d3944ce456a5f6f6c7523e5006cff91d",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/assessment/CompassResult.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/CompassResult.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/CompassResult.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/CompassResult.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service.compass.assessment;\n \n+import java.io.Serializable;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n@@ -10,13 +11,12 @@\n import org.slf4j.LoggerFactory;\n \n import de.tum.in.www1.artemis.service.compass.grade.Grade;\n-import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public class CompassResult implements Grade {\n+public class CompassResult implements Grade, Serializable {\n \n     private final Logger log = LoggerFactory.getLogger(Grade.class);\n \n-    private Map<UMLElement, Score> elementScoreMapping;\n+    private Map<String, Score> elementScoreMapping;\n \n     private Map<String, String> jsonIdCommentsMapping;\n \n@@ -34,7 +34,7 @@\n     public CompassResult() {\n     }\n \n-    public CompassResult(Map<UMLElement, Score> elementScoreMapping, double coverage) {\n+    public CompassResult(Map<String, Score> elementScoreMapping, double coverage) {\n         jsonIdCommentsMapping = new ConcurrentHashMap<>();\n         jsonIdPointsMapping = new ConcurrentHashMap<>();\n \n@@ -61,7 +61,7 @@ private void buildValues() {\n     }\n \n     private void buildMapping() {\n-        for (Map.Entry<UMLElement, Score> entry : elementScoreMapping.entrySet()) {\n+        for (Map.Entry<String, Score> entry : elementScoreMapping.entrySet()) {\n             if (entry.getValue() == null) {\n                 log.error(\"This should never ever happen but for some reason score in CompassResult buildMapping is null\");\n                 continue;\n@@ -74,8 +74,8 @@ private void buildMapping() {\n                 elementFeedbackText = comments.stream().filter(Objects::nonNull).max(Comparator.comparingInt(String::length)).orElse(\"\");\n             }\n \n-            jsonIdCommentsMapping.put(entry.getKey().getJSONElementID(), elementFeedbackText);\n-            jsonIdPointsMapping.put(entry.getKey().getJSONElementID(), entry.getValue().getPoints());\n+            jsonIdCommentsMapping.put(entry.getKey(), elementFeedbackText);\n+            jsonIdPointsMapping.put(entry.getKey(), entry.getValue().getPoints());\n         }\n     }\n "
  },
  {
    "sha": "bfab1e5981c39a06442e2d87a852db088a2278dd",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Context.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Context.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Context.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Context.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,10 +1,11 @@\n package de.tum.in.www1.artemis.service.compass.assessment;\n \n+import java.io.Serializable;\n import java.util.Objects;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n-public class Context {\n+public class Context implements Serializable {\n \n     private Set<Integer> contextElementIDs;\n "
  },
  {
    "sha": "69311081a707e4142be7a5772cc60ba0b27e17bd",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Score.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Score.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Score.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/Score.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,8 +1,9 @@\n package de.tum.in.www1.artemis.service.compass.assessment;\n \n+import java.io.Serializable;\n import java.util.List;\n \n-public class Score {\n+public class Score implements Serializable {\n \n     private double points;\n "
  },
  {
    "sha": "5ab80eede8c3f89fcd48632fc7f33a1330fc19b4",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/assessment/SimilaritySetAssessment.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/SimilaritySetAssessment.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/SimilaritySetAssessment.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/assessment/SimilaritySetAssessment.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service.compass.assessment;\n \n+import java.io.Serializable;\n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n \n@@ -8,7 +9,7 @@\n /**\n  * An assessment for elements of the same similarity set. The assessment contains feedback items from manual assessments and a score resulting from the manual feedback.\n  */\n-public class SimilaritySetAssessment {\n+public class SimilaritySetAssessment implements Serializable {\n \n     private Set<Feedback> feedbackItems;\n "
  },
  {
    "sha": "5c377919af407b69006843d1b1d40f0f19a8eaaa",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/AssessmentIndex.java",
    "status": "removed",
    "additions": 0,
    "deletions": 51,
    "changes": 51,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/f5f925a82ee922a0421febd21559dc6d329dd040/src/main/java/de/tum/in/www1/artemis/service/compass/controller/AssessmentIndex.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/f5f925a82ee922a0421febd21559dc6d329dd040/src/main/java/de/tum/in/www1/artemis/service/compass/controller/AssessmentIndex.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/controller/AssessmentIndex.java?ref=f5f925a82ee922a0421febd21559dc6d329dd040",
    "patch": "@@ -1,51 +0,0 @@\n-package de.tum.in.www1.artemis.service.compass.controller;\n-\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import de.tum.in.www1.artemis.service.compass.assessment.SimilaritySetAssessment;\n-\n-/**\n- * The assessment index contains the assessments for all the similarity sets. It manages the assessments in a hash map that maps from similarityId to the assessment of the\n- * corresponding similarity set. A similarity set assessment contains the feedback items and a total score for the elements of the similarity set, i.e. the elements with the same\n- * similarityId.\n- */\n-public class AssessmentIndex {\n-\n-    private Map<Integer, SimilaritySetAssessment> similarityIdAssessmentMapping;\n-\n-    public AssessmentIndex() {\n-        similarityIdAssessmentMapping = new ConcurrentHashMap<>();\n-    }\n-\n-    /**\n-     * Get the assessment for the similarity set with the given similarityId.\n-     *\n-     * @param similarityId the ID of the similarity set\n-     * @return an Optional containing the assessment if the similarity ID exists, an empty Optional otherwise\n-     */\n-    public Optional<SimilaritySetAssessment> getAssessmentForSimilaritySet(int similarityId) {\n-        SimilaritySetAssessment similaritySetAssessment = similarityIdAssessmentMapping.get(similarityId);\n-        return Optional.ofNullable(similaritySetAssessment);\n-    }\n-\n-    /**\n-     * Add a new assessment for the similarity set with the given ID to the similarityId assessment mapping.\n-     *\n-     * @param similarityId the ID of the corresponding similarity set\n-     * @param similaritySetAssessment the assessment for the corresponding similarity set\n-     */\n-    protected void addSimilaritySetAssessment(int similarityId, SimilaritySetAssessment similaritySetAssessment) {\n-        similarityIdAssessmentMapping.putIfAbsent(similarityId, similaritySetAssessment);\n-    }\n-\n-    /**\n-     * Used for statistics. Get the complete map of similarity set assessments.\n-     *\n-     * @return The complete map with all similarity set assessments\n-     */\n-    public Map<Integer, SimilaritySetAssessment> getAssessmentMap() {\n-        return this.similarityIdAssessmentMapping;\n-    }\n-}"
  },
  {
    "sha": "063c0cdee2cba0bce6b024b3d42b6408b97df479",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentController.java",
    "status": "modified",
    "additions": 161,
    "deletions": 31,
    "changes": 192,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentController.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentController.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentController.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,12 +1,15 @@\n package de.tum.in.www1.artemis.service.compass.controller;\n \n+import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.hazelcast.core.HazelcastInstance;\n+\n import de.tum.in.www1.artemis.domain.Feedback;\n import de.tum.in.www1.artemis.service.compass.assessment.CompassResult;\n import de.tum.in.www1.artemis.service.compass.assessment.Score;\n@@ -18,35 +21,83 @@\n \n     private final Logger log = LoggerFactory.getLogger(AutomaticAssessmentController.class);\n \n-    private double totalCoverage;\n+    private Map<Integer, SimilaritySetAssessment> similarityIdAssessmentMapping;\n+\n+    private Map<Long, CompassResult> lastAssessmentResultMapping;\n+\n+    HazelcastInstance hazelcastInstance;\n+\n+    static Map<Long, Double> totalCoverages;\n+\n+    static Map<Long, Double> totalConfidences;\n \n-    private double totalConfidence;\n+    private Long exerciseId;\n+\n+    public AutomaticAssessmentController(Long exerciseId, HazelcastInstance hazelcastInstance) {\n+        similarityIdAssessmentMapping = hazelcastInstance.getMap(\"modelAssessments - \" + exerciseId);\n+        lastAssessmentResultMapping = hazelcastInstance.getMap(\"modelResults - \" + exerciseId);\n+        this.hazelcastInstance = hazelcastInstance;\n+        this.exerciseId = exerciseId;\n+    }\n+\n+    /**\n+     * Get the assessment for the similarity set with the given similarityId.\n+     *\n+     * @param similarityId the ID of the similarity set\n+     * @return an Optional containing the assessment if the similarity ID exists, an empty Optional otherwise\n+     */\n+    public Optional<SimilaritySetAssessment> getAssessmentForSimilaritySet(int similarityId) {\n+        SimilaritySetAssessment similaritySetAssessment = similarityIdAssessmentMapping.get(similarityId);\n+        return Optional.ofNullable(similaritySetAssessment);\n+    }\n+\n+    /**\n+     * Add a new assessment for the similarity set with the given ID to the similarityId assessment mapping.\n+     *\n+     * @param similarityId the ID of the corresponding similarity set\n+     * @param similaritySetAssessment the assessment for the corresponding similarity set\n+     */\n+    protected void addSimilaritySetAssessment(int similarityId, SimilaritySetAssessment similaritySetAssessment) {\n+        similarityIdAssessmentMapping.putIfAbsent(similarityId, similaritySetAssessment);\n+    }\n+\n+    /**\n+     * Used for statistics. Get the complete map of similarity set assessments.\n+     *\n+     * @return The complete map with all similarity set assessments\n+     */\n+    public Map<Integer, SimilaritySetAssessment> getAssessmentMap() {\n+        return this.similarityIdAssessmentMapping;\n+    }\n \n     /**\n      * For every model element it adds the feedback to the assessment of the corresponding similarity set. If there is no assessment for the similarity set yet, it creates a new\n      * one.\n      *\n-     * @param index                manages the assessments of all similarity sets\n-     * @param elementIdFeedbackMap maps elementIds to feedbacks\n+     * @param feedbacks            list of feedbacks\n      * @param model                the UML model - contains all elements with its jsonIds\n      */\n-    public void addFeedbackToSimilaritySet(AssessmentIndex index, Map<String, Feedback> elementIdFeedbackMap, UMLDiagram model) {\n-        for (String jsonElementID : elementIdFeedbackMap.keySet()) {\n-            UMLElement element = model.getElementByJSONID(jsonElementID);\n+    public void addFeedbacksToSimilaritySet(List<Feedback> feedbacks, UMLDiagram model) {\n+        for (Feedback feedback : feedbacks) {\n+            String jsonElementId = feedback.getReferenceElementId();\n+            if (jsonElementId != null) {\n+                UMLElement element = model.getElementByJSONID(jsonElementId);\n \n-            if (element == null) {\n-                log.warn(\"Element with id \" + jsonElementID + \" could not be found in model.\");\n-                continue;\n-            }\n+                if (element == null) {\n+                    log.warn(\"Element with id \" + jsonElementId + \" could not be found in model.\");\n+                    continue;\n+                }\n \n-            Optional<SimilaritySetAssessment> optionalAssessment = index.getAssessmentForSimilaritySet(element.getSimilarityID());\n+                Optional<SimilaritySetAssessment> optionalAssessment = getAssessmentForSimilaritySet(element.getSimilarityID());\n \n-            if (optionalAssessment.isPresent()) {\n-                optionalAssessment.get().addFeedback(elementIdFeedbackMap.get(jsonElementID));\n-            }\n-            else {\n-                SimilaritySetAssessment newAssessment = new SimilaritySetAssessment(elementIdFeedbackMap.get(jsonElementID));\n-                index.addSimilaritySetAssessment(element.getSimilarityID(), newAssessment);\n+                if (optionalAssessment.isPresent()) {\n+                    optionalAssessment.get().addFeedback(feedback);\n+                    similarityIdAssessmentMapping.put(element.getSimilarityID(), optionalAssessment.get());\n+                }\n+                else {\n+                    SimilaritySetAssessment newAssessment = new SimilaritySetAssessment(feedback);\n+                    addSimilaritySetAssessment(element.getSimilarityID(), newAssessment);\n+                }\n             }\n         }\n     }\n@@ -55,17 +106,16 @@ public void addFeedbackToSimilaritySet(AssessmentIndex index, Map<String, Feedba\n      * Loop over all models and triggers their automatic assessment.\n      *\n      * @param modelIndex      manages all models\n-     * @param assessmentIndex manages all assessments\n      */\n     // TODO CZ: only assess models automatically that do not already have a complete manual assessment?\n-    public void assessModelsAutomatically(ModelIndex modelIndex, AssessmentIndex assessmentIndex) {\n+    public void assessModelsAutomatically(ModelIndex modelIndex) {\n \n-        totalCoverage = 0;\n-        totalConfidence = 0;\n+        double totalCoverage = 0;\n+        double totalConfidence = 0;\n \n         for (UMLDiagram model : modelIndex.getModelCollection()) {\n \n-            CompassResult compassResult = assessModelAutomatically(model, assessmentIndex);\n+            CompassResult compassResult = assessModelAutomatically(model);\n \n             totalCoverage += compassResult.getCoverage();\n             totalConfidence += compassResult.getConfidence();\n@@ -74,23 +124,25 @@ public void assessModelsAutomatically(ModelIndex modelIndex, AssessmentIndex ass\n \n         totalConfidence /= modelIndex.getModelCollectionSize();\n         totalCoverage /= modelIndex.getModelCollectionSize();\n+\n+        setTotalConfidence(totalConfidence);\n+        setTotalCoverage(totalCoverage);\n     }\n \n     /**\n      * Loop over all elements of the given model, get their assessments form the assessment index and build a Compass result with them.\n      *\n      * @param model           the UML model which contains all the model elements\n-     * @param assessmentIndex manages all assessments\n      * @return a Compass result built from the assessments of the model elements\n      */\n-    public CompassResult assessModelAutomatically(UMLDiagram model, AssessmentIndex assessmentIndex) {\n+    public CompassResult assessModelAutomatically(UMLDiagram model) {\n         double totalCount = 0;\n         double missingCount = 0;\n \n-        Map<UMLElement, Score> scoreHashMap = new ConcurrentHashMap<>();\n+        Map<String, Score> scoreHashMap = new ConcurrentHashMap<>();\n \n         for (UMLElement element : model.getAllModelElements()) {\n-            Optional<SimilaritySetAssessment> optionalAssessment = assessmentIndex.getAssessmentForSimilaritySet(element.getSimilarityID());\n+            Optional<SimilaritySetAssessment> optionalAssessment = getAssessmentForSimilaritySet(element.getSimilarityID());\n             totalCount++;\n \n             if (optionalAssessment.isEmpty()) {\n@@ -103,7 +155,7 @@ public CompassResult assessModelAutomatically(UMLDiagram model, AssessmentIndex\n                     log.debug(\"Unable to find score for element \" + element.getJSONElementID() + \" in model \" + model.getModelSubmissionId() + \" with the specific context\");\n                 }\n                 else {\n-                    scoreHashMap.put(element, score);\n+                    scoreHashMap.put(element.getJSONElementID(), score);\n                 }\n             }\n         }\n@@ -119,16 +171,94 @@ public CompassResult assessModelAutomatically(UMLDiagram model, AssessmentIndex\n \n         CompassResult compassResult = new CompassResult(scoreHashMap, coverage);\n \n-        model.setLastAssessmentCompassResult(compassResult);\n+        lastAssessmentResultMapping.put(model.getModelSubmissionId(), compassResult);\n \n         return compassResult;\n     }\n \n+    public void setTotalCoverage(double totalCoverage) {\n+        if (AutomaticAssessmentController.totalCoverages == null) {\n+            AutomaticAssessmentController.totalCoverages = hazelcastInstance.getMap(\"totalCoverages\");\n+        }\n+        AutomaticAssessmentController.totalCoverages.put(exerciseId, totalCoverage);\n+    }\n+\n     public double getTotalCoverage() {\n-        return totalCoverage;\n+        if (AutomaticAssessmentController.totalCoverages == null) {\n+            AutomaticAssessmentController.totalCoverages = hazelcastInstance.getMap(\"totalCoverages\");\n+        }\n+        return AutomaticAssessmentController.totalCoverages.get(exerciseId);\n+    }\n+\n+    public void setTotalConfidence(double totalConfidence) {\n+        if (AutomaticAssessmentController.totalConfidences == null) {\n+            AutomaticAssessmentController.totalConfidences = hazelcastInstance.getMap(\"totalCoverages\");\n+        }\n+        AutomaticAssessmentController.totalConfidences.put(exerciseId, totalConfidence);\n     }\n \n     public double getTotalConfidence() {\n-        return totalConfidence;\n+        if (AutomaticAssessmentController.totalConfidences == null) {\n+            AutomaticAssessmentController.totalConfidences = hazelcastInstance.getMap(\"totalCoverages\");\n+        }\n+        return AutomaticAssessmentController.totalConfidences.get(exerciseId);\n+    }\n+\n+    /**\n+     * Set the lastAssessmentCompassResult that represents the most recent automatic assessment calculated by Compass for this diagram.\n+     *\n+     * @param submissionId submission that the result will be assigned to\n+     * @param compassResult the most recent Compass result for this diagram\n+     */\n+    public void setLastAssessmentCompassResult(Long submissionId, CompassResult compassResult) {\n+        lastAssessmentResultMapping.put(submissionId, compassResult);\n+    }\n+\n+    /**\n+     * Returns the lastAssessmentCompassResult that represents the most recent automatic assessment calculated by Compass for this diagram.\n+     * This method is deprecated because the UML Diagram should not store such information. This should rather be stored somewhere else!\n+     *\n+     * @param submissionId submission whose result will be returned\n+     * @return the most recent Compass result for the submission\n+     */\n+    public CompassResult getLastAssessmentCompassResult(Long submissionId) {\n+        return lastAssessmentResultMapping.get(submissionId);\n+    }\n+\n+    /**\n+     * Indicates if this diagram already has an automatic assessment calculated by Compass or not.\n+     *\n+     * @param submissionId submission that will be check if assessed or not\n+     * @return true if Compass has not already calculated an automatic assessment for the submission, false otherwise\n+     */\n+    public boolean isUnassessed(Long submissionId) {\n+        return getLastAssessmentCompassResult(submissionId) == null;\n+    }\n+\n+    /**\n+     * Get the confidence of the last compass result, i.e. the most recent automatic assessment calculated by Compass for the submission.\n+     * @param submissionId id of the submission\n+     * @return The confidence of the last compass result, -1 if no compass result is available\n+     */\n+    public double getLastAssessmentConfidence(Long submissionId) {\n+        if (isUnassessed(submissionId)) {\n+            return -1;\n+        }\n+\n+        return getLastAssessmentCompassResult(submissionId).getConfidence();\n+    }\n+\n+    /**\n+     * Get the coverage for the last assessed compass result, i.e. the most recent automatic assessment calculated by Compass for the submission.\n+     *\n+     * @param submissionId id of the submission\n+     * @return The coverage of the last compass result, -1 if no compass result is available\n+     */\n+    public double getLastAssessmentCoverage(Long submissionId) {\n+        if (isUnassessed(submissionId)) {\n+            return -1;\n+        }\n+\n+        return getLastAssessmentCompassResult(submissionId).getCoverage();\n     }\n }"
  },
  {
    "sha": "565f4f27154bbd1199565d391aea4cf1a119156a",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelIndex.java",
    "status": "modified",
    "additions": 21,
    "deletions": 15,
    "changes": 36,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelIndex.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelIndex.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelIndex.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -3,11 +3,12 @@\n import java.util.Collection;\n import java.util.Map;\n import java.util.Queue;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n \n import org.springframework.data.util.Pair;\n \n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n import de.tum.in.www1.artemis.service.compass.utils.CompassConfiguration;\n@@ -19,14 +20,15 @@\n     /**\n      * Note: The key is the model submission id\n      */\n-    private Map<Long, UMLDiagram> modelMap;\n+    private IMap<Long, UMLDiagram> modelMap;\n+\n+    private IMap<UMLElement, Integer> elementSimilarityMap;\n \n-    private Map<UMLElement, Integer> modelElementMapping;\n+    public ModelIndex(Long exerciseId, HazelcastInstance hazelcastInstance) {\n+        elementSimilarityMap = hazelcastInstance.getMap(\"similarities - \" + exerciseId);\n+        uniqueModelElementList = hazelcastInstance.getQueue(\"elements - \" + exerciseId);\n+        modelMap = hazelcastInstance.getMap(\"models - \" + exerciseId);\n \n-    public ModelIndex() {\n-        modelElementMapping = new ConcurrentHashMap<>();\n-        uniqueModelElementList = new ConcurrentLinkedQueue<>();\n-        modelMap = new ConcurrentHashMap<>();\n     }\n \n     /**\n@@ -37,8 +39,8 @@ public ModelIndex() {\n      * @return the similarity ID for the given model element, i.e. the ID of the similarity set the element belongs to\n      */\n     int retrieveSimilarityId(UMLElement element) {\n-        if (modelElementMapping.containsKey(element)) {\n-            return modelElementMapping.get(element);\n+        if (elementSimilarityMap.containsKey(element)) {\n+            return elementSimilarityMap.get(element);\n         }\n \n         // Pair of similarity value and similarity ID\n@@ -53,14 +55,18 @@ int retrieveSimilarityId(UMLElement element) {\n         }\n \n         if (bestSimilarityFit.getFirst() != -1.0) {\n-            modelElementMapping.put(element, bestSimilarityFit.getSecond());\n+            int similarityId = bestSimilarityFit.getSecond();\n+            element.setSimilarityID(similarityId);\n+            elementSimilarityMap.put(element, similarityId);\n             return bestSimilarityFit.getSecond();\n         }\n \n         // element does not fit already known element / similarity set\n+        int similarityId = uniqueModelElementList.size();\n+        element.setSimilarityID(similarityId);\n         uniqueModelElementList.add(element);\n-        modelElementMapping.put(element, uniqueModelElementList.size() - 1);\n-        return uniqueModelElementList.size() - 1;\n+        elementSimilarityMap.put(element, similarityId);\n+        return similarityId;\n     }\n \n     /**\n@@ -123,8 +129,8 @@ public int getNumberOfUniqueElements() {\n      *\n      * @return the model element to similarity id mapping\n      */\n-    public Map<UMLElement, Integer> getModelElementMapping() {\n-        return modelElementMapping;\n+    public Map<UMLElement, Integer> getElementSimilarityMap() {\n+        return elementSimilarityMap;\n     }\n \n     /**"
  },
  {
    "sha": "907c5c82632526a4f58eac8b0d9c356e0afdd5ee",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelSelector.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelSelector.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelSelector.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/controller/ModelSelector.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -37,6 +37,12 @@\n      */\n     private Set<Long> alreadyHandledModels = ConcurrentHashMap.newKeySet();\n \n+    private AutomaticAssessmentController automaticAssessmentController;\n+\n+    public ModelSelector(AutomaticAssessmentController automaticAssessmentController) {\n+        this.automaticAssessmentController = automaticAssessmentController;\n+    }\n+\n     /**\n      * Calculate the given number of models which would mean the biggest knowledge gain to support the automatic assessment process. The selected models are currently unassessed\n      * and not queued for assessment (i.e. in alreadyHandledModels). Which models mean the biggest knowledge gain is decided based on the coverage and the mean similarity of the\n@@ -59,13 +65,14 @@\n         }\n \n         List<UMLDiagram> candidates = unhandledModels;\n-        candidates.sort(Comparator.comparingDouble(UMLDiagram::getLastAssessmentCoverage));\n+        candidates.sort(Comparator.comparingDouble(model -> automaticAssessmentController.getLastAssessmentCoverage(model.getModelSubmissionId())));\n         // Make sure that the candidate list is not too big\n         if (!candidates.isEmpty()) {\n-            double smallestCoverage = candidates.get(0).getLastAssessmentCoverage();\n+            double smallestCoverage = automaticAssessmentController.getLastAssessmentCoverage(candidates.get(0).getModelSubmissionId());\n \n             if (smallestCoverage < 1) {\n-                while (maxCandidateListSize + 5 < candidates.size() && smallestCoverage > (candidates.get(maxCandidateListSize).getLastAssessmentCoverage() - threshold)\n+                while (maxCandidateListSize + 5 < candidates.size()\n+                        && smallestCoverage > (automaticAssessmentController.getLastAssessmentCoverage(candidates.get(maxCandidateListSize).getModelSubmissionId()) - threshold)\n                         && maxCandidateListSize < MAX_CANDIDATE_LIST_SIZE) {\n                     maxCandidateListSize += 5;\n                 }\n@@ -85,7 +92,7 @@\n \n         // Fallback: if no optimal models could be determined by similarity, select any unassessed models\n         for (UMLDiagram model : modelIndex.getModelCollection()) {\n-            if (model.isUnassessed() && !alreadyHandledModels.contains(model.getModelSubmissionId())) {\n+            if (automaticAssessmentController.isUnassessed(model.getModelSubmissionId()) && !alreadyHandledModels.contains(model.getModelSubmissionId())) {\n                 alreadyHandledModels.add(model.getModelSubmissionId());\n                 modelsWaitingForAssessment.add(model.getModelSubmissionId());\n "
  },
  {
    "sha": "f2cdb115e329c24c32d0a97f4511896228fbee2d",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/SimilarityDetector.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/SimilarityDetector.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/controller/SimilarityDetector.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/controller/SimilarityDetector.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -18,7 +18,7 @@\n     public static void analyzeSimilarity(UMLDiagram model, ModelIndex index) {\n \n         for (UMLElement element : model.getAllModelElements()) {\n-            element.setSimilarityID(index.retrieveSimilarityId(element));\n+            index.retrieveSimilarityId(element);\n         }\n \n         setContextOfModelElements(model);"
  },
  {
    "sha": "41b9cdab65af38addec8d72ffbf030264e92de0f",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLContainerElement.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLContainerElement.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLContainerElement.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLContainerElement.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,11 +1,12 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import de.tum.in.www1.artemis.service.compass.umlmodel.deployment.UMLNode;\n \n-public abstract class UMLContainerElement extends UMLElement {\n+public abstract class UMLContainerElement extends UMLElement implements Serializable {\n \n     private List<UMLElement> subElements = new ArrayList<>();\n "
  },
  {
    "sha": "0bb876cb95056074d3d0ca1043c55c43ff046511",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLDiagram.java",
    "status": "modified",
    "additions": 2,
    "deletions": 64,
    "changes": 66,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLDiagram.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLDiagram.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLDiagram.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,16 +1,12 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel;\n \n+import java.io.Serializable;\n import java.util.List;\n \n-import de.tum.in.www1.artemis.service.compass.assessment.CompassResult;\n-\n-public abstract class UMLDiagram implements Similarity<UMLDiagram> {\n+public abstract class UMLDiagram implements Similarity<UMLDiagram>, Serializable {\n \n     private long modelSubmissionId;\n \n-    @Deprecated(since = \"4.2.3\", forRemoval = true)\n-    private CompassResult lastAssessmentCompassResult = null;\n-\n     /**\n      * to make mockito happy\n      */\n@@ -107,64 +103,6 @@ public long getModelSubmissionId() {\n         return modelSubmissionId;\n     }\n \n-    /**\n-     * Set the lastAssessmentCompassResult that represents the most recent automatic assessment calculated by Compass for this diagram.\n-     *\n-     * @param compassResult the most recent Compass result for this diagram\n-     */\n-    @Deprecated(since = \"4.2.3\", forRemoval = true)\n-    public void setLastAssessmentCompassResult(CompassResult compassResult) {\n-        lastAssessmentCompassResult = compassResult;\n-    }\n-\n-    /**\n-     * Returns the lastAssessmentCompassResult that represents the most recent automatic assessment calculated by Compass for this diagram.\n-     * This method is deprecated because the UML Diagram should not store such information. This should rather be stored somewhere else!\n-     * @return the most recent Compass result for this diagram\n-     */\n-    @Deprecated(since = \"4.2.3\", forRemoval = true)\n-    public CompassResult getLastAssessmentCompassResult() {\n-        return lastAssessmentCompassResult;\n-    }\n-\n-    /**\n-     * Indicates if this diagram already has an automatic assessment calculated by Compass or not.\n-     *\n-     * @return true if Compass has not already calculated an automatic assessment for this diagram, false otherwise\n-     */\n-    @Deprecated(since = \"4.2.3\", forRemoval = true)\n-    public boolean isUnassessed() {\n-        return getLastAssessmentCompassResult() == null;\n-    }\n-\n-    /**\n-     * Get the confidence of the last compass result, i.e. the most recent automatic assessment calculated by Compass for this diagram.\n-     *\n-     * @return The confidence of the last compass result, -1 if no compass result is available\n-     */\n-    @Deprecated(since = \"4.2.3\", forRemoval = true)\n-    public double getLastAssessmentConfidence() {\n-        if (isUnassessed()) {\n-            return -1;\n-        }\n-\n-        return getLastAssessmentCompassResult().getConfidence();\n-    }\n-\n-    /**\n-     * Get the coverage for the last assessed compass result, i.e. the most recent automatic assessment calculated by Compass for this diagram.\n-     *\n-     * @return The coverage of the last compass result, -1 if no compass result is available\n-     */\n-    @Deprecated(since = \"4.2.3\", forRemoval = true)\n-    public double getLastAssessmentCoverage() {\n-        if (isUnassessed()) {\n-            return -1;\n-        }\n-\n-        return getLastAssessmentCompassResult().getCoverage();\n-    }\n-\n     /**\n      * Get a human readable name of this diagram in the form \"Model <submissionId>\".\n      *"
  },
  {
    "sha": "72372d3fb084ed45c98de4f09b7a0eaec5e69cdf",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLElement.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLElement.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLElement.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/UMLElement.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,13 +1,14 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel;\n \n+import java.io.Serializable;\n import java.util.List;\n import java.util.Objects;\n \n import javax.annotation.Nullable;\n \n import de.tum.in.www1.artemis.service.compass.assessment.Context;\n \n-public abstract class UMLElement implements Similarity<UMLElement> {\n+public abstract class UMLElement implements Similarity<UMLElement>, Serializable {\n \n     private int similarityID = -1; // id of similarity set the element belongs to\n "
  },
  {
    "sha": "0afbd1911262d9cb2eeed07596d2846582266dcd",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivity.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivity.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivity.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,13 +1,14 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.activity;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import de.tum.in.www1.artemis.service.compass.strategy.NameSimilarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.Similarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public class UMLActivity extends UMLActivityElement {\n+public class UMLActivity extends UMLActivityElement implements Serializable {\n \n     public static final String UML_ACTIVITY_TYPE = \"Activity\";\n "
  },
  {
    "sha": "8c6ddfbe3bcbb02bee6ff0065f91b5725eb44666",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityDiagram.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityDiagram.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityDiagram.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityDiagram.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,12 +1,13 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.activity;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public class UMLActivityDiagram extends UMLDiagram {\n+public class UMLActivityDiagram extends UMLDiagram implements Serializable {\n \n     private List<UMLActivityNode> activityNodeList;\n "
  },
  {
    "sha": "353d47eb55f5afae6aeaf47a8d34b6a098fb51bf",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityElement.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityElement.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityElement.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityElement.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,12 +1,13 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.activity;\n \n+import java.io.Serializable;\n import java.util.Objects;\n \n import javax.annotation.Nullable;\n \n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public abstract class UMLActivityElement extends UMLElement {\n+public abstract class UMLActivityElement extends UMLElement implements Serializable {\n \n     // TODO: use UML Container Element instead\n "
  },
  {
    "sha": "e3d2db63936ff01bdebd4b3a5c3868ccad0dd241",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityNode.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityNode.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityNode.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLActivityNode.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.activity;\n \n+import java.io.Serializable;\n import java.util.Objects;\n \n import com.google.common.base.CaseFormat;\n@@ -8,7 +9,7 @@\n import de.tum.in.www1.artemis.service.compass.umlmodel.Similarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public class UMLActivityNode extends UMLActivityElement {\n+public class UMLActivityNode extends UMLActivityElement implements Serializable {\n \n     public enum UMLActivityNodeType {\n         ACTIVITY_INITIAL_NODE, ACTIVITY_FINAL_NODE, ACTIVITY_ACTION_NODE, ACTIVITY_OBJECT_NODE, ACTIVITY_FORK_NODE, ACTIVITY_JOIN_NODE, ACTIVITY_DECISION_NODE, ACTIVITY_MERGE_NODE"
  },
  {
    "sha": "a332836026c72a7eac1fdf60939476d9c580c524",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLControlFlow.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLControlFlow.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLControlFlow.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/activity/UMLControlFlow.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,11 +1,12 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.activity;\n \n+import java.io.Serializable;\n import java.util.Objects;\n \n import de.tum.in.www1.artemis.service.compass.umlmodel.Similarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public class UMLControlFlow extends UMLElement {\n+public class UMLControlFlow extends UMLElement implements Serializable {\n \n     public static final String UML_CONTROL_FLOW_TYPE = \"ActivityControlFlow\";\n "
  },
  {
    "sha": "d497ecf17f134d357e895ef945aa67167bf7f00c",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLAttribute.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLAttribute.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLAttribute.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLAttribute.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,13 +1,14 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.classdiagram;\n \n+import java.io.Serializable;\n import java.util.Objects;\n \n import de.tum.in.www1.artemis.service.compass.strategy.NameSimilarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.Similarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n import de.tum.in.www1.artemis.service.compass.utils.CompassConfiguration;\n \n-public class UMLAttribute extends UMLElement {\n+public class UMLAttribute extends UMLElement implements Serializable {\n \n     public static final String UML_ATTRIBUTE_TYPE = \"ClassAttribute\";\n "
  },
  {
    "sha": "3abe17bd5e66138be917590fbe5a65405ae8e38d",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClass.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClass.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClass.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClass.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.classdiagram;\n \n+import java.io.Serializable;\n import java.util.List;\n \n import javax.annotation.Nullable;\n@@ -11,7 +12,7 @@\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n import de.tum.in.www1.artemis.service.compass.utils.CompassConfiguration;\n \n-public class UMLClass extends UMLElement {\n+public class UMLClass extends UMLElement implements Serializable {\n \n     public enum UMLClassType {\n         CLASS, ABSTRACT_CLASS, ENUMERATION, INTERFACE"
  },
  {
    "sha": "ab679a70e72e2608c8282071339d187676148c36",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClassDiagram.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClassDiagram.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClassDiagram.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLClassDiagram.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,12 +1,13 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.classdiagram;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public class UMLClassDiagram extends UMLDiagram {\n+public class UMLClassDiagram extends UMLDiagram implements Serializable {\n \n     private final List<UMLClass> classList;\n "
  },
  {
    "sha": "bf55ae6a793bfc598c79eca8356a153fff6efdb4",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLMethod.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLMethod.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLMethod.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLMethod.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,5 +1,6 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.classdiagram;\n \n+import java.io.Serializable;\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n@@ -9,7 +10,7 @@\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n import de.tum.in.www1.artemis.service.compass.utils.CompassConfiguration;\n \n-public class UMLMethod extends UMLElement {\n+public class UMLMethod extends UMLElement implements Serializable {\n \n     public static final String UML_METHOD_TYPE = \"ClassMethod\";\n "
  },
  {
    "sha": "256031c5051b520717d44ec733d132498f430bd0",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLPackage.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLPackage.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLPackage.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLPackage.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -1,13 +1,14 @@\n package de.tum.in.www1.artemis.service.compass.umlmodel.classdiagram;\n \n+import java.io.Serializable;\n import java.util.List;\n \n import de.tum.in.www1.artemis.service.compass.strategy.NameSimilarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.Similarity;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLContainerElement;\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n \n-public class UMLPackage extends UMLContainerElement {\n+public class UMLPackage extends UMLContainerElement implements Serializable {\n \n     public static final String UML_PACKAGE_TYPE = \"Package\";\n "
  },
  {
    "sha": "a001c5a263d5b48a0c9578127f281f57b0f327a1",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLRelationship.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLRelationship.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLRelationship.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/compass/umlmodel/classdiagram/UMLRelationship.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -4,6 +4,7 @@\n import static de.tum.in.www1.artemis.service.compass.utils.CompassConfiguration.RELATION_MULTIPLICITY_WEIGHT;\n import static de.tum.in.www1.artemis.service.compass.utils.CompassConfiguration.RELATION_ROLE_WEIGHT;\n \n+import java.io.Serializable;\n import java.util.Objects;\n \n import com.google.common.base.CaseFormat;\n@@ -12,7 +13,7 @@\n import de.tum.in.www1.artemis.service.compass.umlmodel.UMLElement;\n import de.tum.in.www1.artemis.service.compass.utils.CompassConfiguration;\n \n-public class UMLRelationship extends UMLElement {\n+public class UMLRelationship extends UMLElement implements Serializable {\n \n     public enum UMLRelationshipType {\n "
  },
  {
    "sha": "e0a3c1600479b6fe0b4e8a264b22c54c031416ed",
    "filename": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingSubmissionResource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/web/rest/ModelingSubmissionResource.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/main/java/de/tum/in/www1/artemis/web/rest/ModelingSubmissionResource.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/web/rest/ModelingSubmissionResource.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -223,6 +223,7 @@ public ModelingSubmissionResource(SubmissionRepository submissionRepository, Res\n         if (!authCheckService.isAtLeastTeachingAssistantForExercise(exercise, user)) {\n             return forbidden();\n         }\n+\n         if (!(exercise instanceof ModelingExercise)) {\n             return badRequest();\n         }"
  },
  {
    "sha": "3e23293bdd6aeda3a258753c21d48a12a9f29ee0",
    "filename": "src/test/java/de/tum/in/www1/artemis/ModelingAssessmentIntegrationTest.java",
    "status": "modified",
    "additions": 56,
    "deletions": 44,
    "changes": 100,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/test/java/de/tum/in/www1/artemis/ModelingAssessmentIntegrationTest.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/test/java/de/tum/in/www1/artemis/ModelingAssessmentIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/test/java/de/tum/in/www1/artemis/ModelingAssessmentIntegrationTest.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -435,10 +435,10 @@ public void testAutomaticAssessmentUponModelSubmission_identicalModel() throws E\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), classExercise.getId());\n-        assertThat(automaticResult).as(\"automatic result is created\").isNotNull();\n-        checkAutomaticAssessment(automaticResult);\n-        checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId());\n+        assertThat(automaticResult).as(\"automatic result is not created\").isNull();\n+        // checkAutomaticAssessment(automaticResult);\n+        // checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n     }\n \n     @Test\n@@ -451,10 +451,10 @@ public void testAutomaticAssessmentUponModelSubmission_activityDiagram_identical\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + activityExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), activityExercise.getId());\n-        assertThat(automaticResult).as(\"automatic result is created\").isNotNull();\n-        checkAutomaticAssessment(automaticResult);\n-        checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId());\n+        assertThat(automaticResult).as(\"automatic result is not created\").isNull();\n+        // checkAutomaticAssessment(automaticResult);\n+        // checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n     }\n \n     @Test\n@@ -467,13 +467,13 @@ public void testAutomaticAssessmentUponModelSubmission_partialModel() throws Exc\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), classExercise.getId());\n-        assertThat(automaticResult).as(\"automatic result is created\").isNotNull();\n-        checkAutomaticAssessment(automaticResult);\n-        List<Feedback> feedbackUsedForAutomaticAssessment = modelingAssessment.getFeedbacks().stream()\n-                .filter(feedback -> automaticResult.getFeedbacks().stream().anyMatch(storedFeedback -> storedFeedback.getReference().equals(feedback.getReference())))\n-                .collect(Collectors.toList());\n-        checkFeedbackCorrectlyStored(feedbackUsedForAutomaticAssessment, automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId());\n+        assertThat(automaticResult).as(\"automatic result is not created\").isNull();\n+        // checkAutomaticAssessment(automaticResult);\n+        // List<Feedback> feedbackUsedForAutomaticAssessment = modelingAssessment.getFeedbacks().stream()\n+        // .filter(feedback -> automaticResult.getFeedbacks().stream().anyMatch(storedFeedback -> storedFeedback.getReference().equals(feedback.getReference())))\n+        // .collect(Collectors.toList());\n+        // checkFeedbackCorrectlyStored(feedbackUsedForAutomaticAssessment, automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n     }\n \n     @Test\n@@ -488,10 +488,10 @@ public void testAutomaticAssessmentUponModelSubmission_partialModelExists() thro\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), classExercise.getId());\n-        assertThat(automaticResult).as(\"automatic result is created\").isNotNull();\n-        checkAutomaticAssessment(automaticResult);\n-        checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId());\n+        assertThat(automaticResult).as(\"automatic result is not created\").isNull();\n+        // checkAutomaticAssessment(automaticResult);\n+        // checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n     }\n \n     @Test\n@@ -502,9 +502,9 @@ public void testStatistics() throws Exception {\n         ModelingSubmission submission = ModelFactory.generateModelingSubmission(FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.partial.json\"), true);\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n-        compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), classExercise.getId());\n+        compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId());\n \n-        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/print-statistic\", HttpStatus.OK, String.class);   // void == empty string\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/print-statistic\", HttpStatus.OK, String.class); // void == empty string\n         String statistics = request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/statistics\", HttpStatus.OK, String.class);\n         // TODO: assert that the statistics is correct\n     }\n@@ -520,10 +520,10 @@ public void testAutomaticAssessmentUponModelSubmission_noSimilarity() throws Exc\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), classExercise.getId());\n-        assertThat(automaticResult).as(\"automatic result is created\").isNotNull();\n-        checkAutomaticAssessment(automaticResult);\n-        assertThat(automaticResult.getFeedbacks()).as(\"no feedback has been assigned\").isEmpty();\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId());\n+        assertThat(automaticResult).as(\"automatic result is not created\").isNull();\n+        // checkAutomaticAssessment(automaticResult);\n+        // assertThat(automaticResult.getFeedbacks()).as(\"no feedback has been assigned\").isEmpty();\n     }\n \n     @Test\n@@ -539,10 +539,10 @@ public void testAutomaticAssessmentUponModelSubmission_similarElementsWithinMode\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), classExercise.getId());\n-        assertThat(automaticResult).as(\"automatic result is created\").isNotNull();\n-        checkAutomaticAssessment(automaticResult);\n-        checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId());\n+        assertThat(automaticResult).as(\"automatic result is not created\").isNull();\n+        // checkAutomaticAssessment(automaticResult);\n+        // checkFeedbackCorrectlyStored(modelingAssessment.getFeedbacks(), automaticResult.getFeedbacks(), FeedbackType.AUTOMATIC);\n     }\n \n     @Test\n@@ -573,33 +573,33 @@ public void testConfidenceThreshold() throws Exception {\n \n         createAssessment(submission1, Collections.singletonList(feedbackTwentyPoints.text(\"wrong text\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is assessed automatically\").isEqualTo(1);\n         assertThat(automaticResult.getFeedbacks().get(0).getCredits()).as(\"credits of element are correct\").isEqualTo(20);\n         assertThat(automaticResult.getFeedbacks().get(0).getText()).as(\"feedback text of element is correct\").isEqualTo(\"wrong text\");\n \n         createAssessment(submission2, Collections.singletonList(feedbackOnePoint.text(\"long feedback text\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is not assessed automatically\").isEqualTo(0);\n \n         createAssessment(submission3, Collections.singletonList(feedbackOnePoint.text(\"short text\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is not assessed automatically\").isEqualTo(0);\n \n         createAssessment(submission4, Collections.singletonList(feedbackOnePoint.text(\"very long feedback text\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is not assessed automatically\").isEqualTo(0);\n \n         createAssessment(submission5, Collections.singletonList(feedbackOnePoint.text(\"medium text\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is assessed automatically\").isEqualTo(1);\n         assertThat(automaticResult.getFeedbacks().get(0).getCredits()).as(\"credits of element are correct\").isEqualTo(1);\n@@ -617,21 +617,21 @@ public void testLongestFeedbackTextSelection() throws Exception {\n \n         createAssessment(submission1, Collections.singletonList(feedbackOnePoint.text(\"feedback text\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is assessed automatically\").isEqualTo(1);\n         assertThat(automaticResult.getFeedbacks().get(0).getText()).as(\"feedback text of element is correct\").isEqualTo(\"feedback text\");\n \n         createAssessment(submission2, Collections.singletonList(feedbackOnePoint.text(\"short\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is assessed automatically\").isEqualTo(1);\n         assertThat(automaticResult.getFeedbacks().get(0).getText()).as(\"feedback text of element is correct\").isEqualTo(\"feedback text\");\n \n         createAssessment(submission3, Collections.singletonList(feedbackOnePoint.text(\"very long feedback text\")), \"/assessment?submit=true\", HttpStatus.OK);\n \n-        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"element is assessed automatically\").isEqualTo(1);\n         assertThat(automaticResult.getFeedbacks().get(0).getText()).as(\"feedback text of element is correct\").isEqualTo(\"very long feedback text\");\n@@ -646,7 +646,7 @@ public void testAutomaticAssessmentUponAssessmentSubmission() throws Exception {\n \n         createAssessment(submission1, feedbacks, \"/assessment?submit=true\", HttpStatus.OK);\n \n-        Result storedResultOfSubmission2 = compassService.getResultWithFeedbackSuggestionsForSubmission(submission2.getId(), classExercise.getId());\n+        Result storedResultOfSubmission2 = compassService.getResultWithFeedbackSuggestionsForSubmission(submission2.getId());\n         assertThat(storedResultOfSubmission2).as(\"automatic result is created\").isNotNull();\n         checkAutomaticAssessment(storedResultOfSubmission2);\n         checkFeedbackCorrectlyStored(feedbacks, storedResultOfSubmission2.getFeedbacks(), FeedbackType.AUTOMATIC);\n@@ -674,7 +674,7 @@ public void testNoAutomaticAssessmentUponAssessmentSave() throws Exception {\n \n         createAssessment(submission1, feedbacks, \"/assessment\", HttpStatus.OK);\n \n-        Result storedResultOfSubmission2 = compassService.getResultWithFeedbackSuggestionsForSubmission(submission2.getId(), classExercise.getId());\n+        Result storedResultOfSubmission2 = compassService.getResultWithFeedbackSuggestionsForSubmission(submission2.getId());\n         assertThat(storedResultOfSubmission2).as(\"no automatic result has been created\").isNull();\n     }\n \n@@ -689,20 +689,22 @@ public void testAutomaticAssessment_elementsWithDifferentContextInSameSimilarity\n \n         createAssessment(submission1, assessment1, \"/assessment?submit=true\", HttpStatus.OK);\n \n-        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        Result automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"all elements got assessed automatically\").isEqualTo(4);\n \n         createAssessment(submission2, assessment2, \"/assessment?submit=true\", HttpStatus.OK);\n \n-        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId(), classExercise.getId());\n+        automaticResult = compassService.getResultWithFeedbackSuggestionsForSubmission(submissionToCheck.getId());\n         assertThat(automaticResult).as(\"automatic result was created\").isNotNull();\n         assertThat(automaticResult.getFeedbacks().size()).as(\"not all elements got assessed automatically\").isEqualTo(2);\n     }\n \n     @Test\n     @WithMockUser(username = \"tutor1\", roles = \"TA\")\n     public void testOverrideAutomaticAssessment() throws Exception {\n+        classExercise.setDueDate(ZonedDateTime.now().minusHours(1));\n+        exerciseRepo.save(classExercise);\n         modelingSubmission = database.addModelingSubmissionFromResources(classExercise, \"test-data/model-submission/model.54727.partial.json\", \"student1\");\n         modelingAssessment = database.addModelingAssessmentForSubmission(classExercise, modelingSubmission, \"test-data/model-assessment/assessment.54727.partial.json\", \"tutor1\",\n                 true);\n@@ -711,7 +713,17 @@ public void testOverrideAutomaticAssessment() throws Exception {\n         ModelingSubmission submission = ModelFactory.generateModelingSubmission(FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.json\"), true);\n         ModelingSubmission storedSubmission = request.postWithResponseBody(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submissions\", submission,\n                 ModelingSubmission.class, HttpStatus.OK);\n-        Result resultWithFeedback = compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId(), classExercise.getId());\n+\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"lock\", \"true\");\n+        params.add(\"correction-round\", \"0\");\n+        ModelingSubmission submissionWithAutomaticAssessment = request.get(\"/api/exercises/\" + classExercise.getId() + \"/modeling-submission-without-assessment\", HttpStatus.OK,\n+                ModelingSubmission.class, params);\n+\n+        assertThat(submissionWithAutomaticAssessment.getId()).isEqualTo(storedSubmission.getId());\n+        assertThat(compassService.getResultWithFeedbackSuggestionsForSubmission(storedSubmission.getId())).isNull();\n+\n+        Result resultWithFeedback = submissionWithAutomaticAssessment.getLatestResult();\n         List<Feedback> existingFeedback = resultWithFeedback.getFeedbacks();\n         Feedback feedback = existingFeedback.get(0);\n         existingFeedback.set(0, feedback.credits(feedback.getCredits() + 0.5));\n@@ -778,7 +790,7 @@ public void testOverrideSubmittedManualAssessment_noConflict() throws Exception\n         modelingAssessment = resultRepo.findDistinctWithFeedbackBySubmissionId(modelingSubmission.getId()).get();\n         assertThat(modelingAssessment.getFeedbacks().size()).as(\"overridden assessment has correct amount of feedback\").isEqualTo(1);\n         assertThat(modelingAssessment.getFeedbacks().get(0)).as(\"feedback is properly overridden\").isEqualToComparingOnlyGivenFields(changedFeedback, \"credits\", \"text\");\n-        modelingAssessment = compassService.getResultWithFeedbackSuggestionsForSubmission(modelingSubmission2.getId(), classExercise.getId());\n+        modelingAssessment = compassService.getResultWithFeedbackSuggestionsForSubmission(modelingSubmission2.getId());\n         assertThat(modelingAssessment.getFeedbacks().size()).as(\"automatic assessment still exists\").isEqualTo(1);\n         assertThat(modelingAssessment.getFeedbacks().get(0)).as(\"automatic assessment is overridden properly\").isEqualToComparingOnlyGivenFields(changedFeedback, \"credits\",\n                 \"text\");\n@@ -807,7 +819,7 @@ public void testOverrideSubmittedManualAssessment_conflict() throws Exception {\n         modelingAssessment = resultRepo.findDistinctWithFeedbackBySubmissionId(modelingSubmission2.getId()).get();\n         assertThat(modelingAssessment.getFeedbacks().size()).as(\"existing submitted assessment still exists\").isEqualTo(2);\n         assertThat(modelingAssessment.getFeedbacks().get(0)).as(\"existing feedback is still the same\").isEqualToComparingOnlyGivenFields(originalFeedback, \"credits\", \"text\");\n-        modelingAssessment = compassService.getResultWithFeedbackSuggestionsForSubmission(modelingSubmission3.getId(), classExercise.getId());\n+        modelingAssessment = compassService.getResultWithFeedbackSuggestionsForSubmission(modelingSubmission3.getId());\n         assertThat(modelingAssessment.getFeedbacks().size()).as(\"automatic assessment is not possible\").isEqualTo(0);\n     }\n     // endregion"
  },
  {
    "sha": "b5d71aed838ea760fe9377757764a10432248853",
    "filename": "src/test/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentControllerTest.java",
    "status": "modified",
    "additions": 188,
    "deletions": 88,
    "changes": 276,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/test/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentControllerTest.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/a76167a9a8c44c6665166e25ac238bb5365dfb5b/src/test/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentControllerTest.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/test/java/de/tum/in/www1/artemis/service/compass/controller/AutomaticAssessmentControllerTest.java?ref=a76167a9a8c44c6665166e25ac238bb5365dfb5b",
    "patch": "@@ -5,16 +5,20 @@\n import static org.mockito.ArgumentMatchers.*;\n import static org.mockito.Mockito.*;\n \n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n \n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.NetworkConfig;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n+\n import de.tum.in.www1.artemis.domain.Feedback;\n import de.tum.in.www1.artemis.service.compass.assessment.CompassResult;\n import de.tum.in.www1.artemis.service.compass.assessment.Score;\n@@ -26,21 +30,18 @@\n \n     private AutomaticAssessmentController automaticAssessmentController;\n \n-    private Map<String, Feedback> elementIdFeedbackMap;\n-\n-    @Mock\n-    AssessmentIndex assessmentIndex;\n+    private List<Feedback> feedbacks;\n \n     @Mock\n     ModelIndex modelIndex;\n \n-    @Mock\n+    @Mock(serializable = true)\n     UMLClassDiagram classDiagram;\n \n-    @Mock\n+    @Mock(serializable = true)\n     UMLClass umlClass;\n \n-    @Mock\n+    @Mock(serializable = true)\n     UMLRelationship umlRelationship;\n \n     @Mock\n@@ -52,134 +53,218 @@\n     @Mock\n     UMLControlFlow umlControlFlow;\n \n-    @Mock\n+    @Mock(serializable = true)\n     Feedback feedback1;\n \n-    @Mock\n+    @Mock(serializable = true)\n     Feedback feedback2;\n \n-    @Mock\n+    @Mock(serializable = true)\n+    Feedback feedback3;\n+\n+    @Mock(serializable = true)\n     SimilaritySetAssessment similaritySetAssessment;\n \n     @BeforeEach\n     void setUp() {\n         MockitoAnnotations.openMocks(this);\n \n-        automaticAssessmentController = new AutomaticAssessmentController();\n-\n-        elementIdFeedbackMap = Map.of(\"element1Id\", feedback1, \"element2Id\", feedback2);\n+        Long exerciseId = 1L;\n+        Config config = new Config();\n+        config.setProperty(\"hazelcast.shutdownhook.enabled\", \"false\");\n+        config.setInstanceName(\"testHazelcastInstance\");\n+        NetworkConfig network = config.getNetworkConfig();\n+        network.getJoin().getTcpIpConfig().setEnabled(false);\n+        network.getJoin().getMulticastConfig().setEnabled(false);\n+        HazelcastInstance testInstance = Hazelcast.getOrCreateHazelcastInstance(config);\n+        automaticAssessmentController = new AutomaticAssessmentController(exerciseId, testInstance);\n+        testInstance.getMap(\"modelAssessments - \" + exerciseId).clear();\n+        testInstance.getMap(\"modelResults - \" + exerciseId).clear();\n+        feedbacks = new ArrayList<>();\n+        feedbacks.add(feedback1);\n+        feedbacks.add(feedback2);\n+        feedbacks.add(feedback3);\n+        when(feedback1.getId()).thenReturn(301L);\n+        when(feedback2.getId()).thenReturn(302L);\n+        when(feedback3.getId()).thenReturn(303L);\n         when(feedback2.getCredits()).thenReturn(0.5);\n-        when(assessmentIndex.getAssessmentForSimilaritySet(1)).thenReturn(Optional.of(similaritySetAssessment));\n-        when(assessmentIndex.getAssessmentForSimilaritySet(2)).thenReturn(Optional.empty());\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        feedbacks = new ArrayList<>();\n+        reset(classDiagram, similaritySetAssessment, feedback1, feedback2);\n     }\n \n     @Test\n-    void addFeedbacksToAssessment_ClassDiagram() {\n+    void addFeedbacksToAssessmentClassDiagram() {\n+        when(feedback1.getReferenceElementId()).thenReturn(\"element1Id\");\n+        when(feedback2.getReferenceElementId()).thenReturn(\"element2Id\");\n         when(classDiagram.getElementByJSONID(\"element1Id\")).thenReturn(umlClass);\n         when(classDiagram.getElementByJSONID(\"element2Id\")).thenReturn(umlRelationship);\n         when(umlClass.getSimilarityID()).thenReturn(1);\n         when(umlRelationship.getSimilarityID()).thenReturn(2);\n \n-        automaticAssessmentController.addFeedbackToSimilaritySet(assessmentIndex, elementIdFeedbackMap, classDiagram);\n-\n-        verify(similaritySetAssessment).addFeedback(feedback1);\n-        verify(similaritySetAssessment, never()).addFeedback(feedback2);\n-        verify(assessmentIndex).addSimilaritySetAssessment(eq(2), any(SimilaritySetAssessment.class));\n-        verify(assessmentIndex, never()).addSimilaritySetAssessment(eq(1), any(SimilaritySetAssessment.class));\n+        SimilaritySetAssessment similaritySetAssessment = new SimilaritySetAssessment(feedback3);\n+        automaticAssessmentController.addSimilaritySetAssessment(1, similaritySetAssessment);\n+        automaticAssessmentController.addFeedbacksToSimilaritySet(feedbacks, classDiagram);\n+        List<Long> ids = automaticAssessmentController.getAssessmentForSimilaritySet(1).get().getFeedbackList().stream().map(Feedback::getId).collect(Collectors.toList());\n+        assertThat(ids).contains(feedback3.getId());\n+        assertThat(ids).contains(feedback1.getId());\n+        assertThat(automaticAssessmentController.getAssessmentForSimilaritySet(2).get().getFeedbackList().get(0).getId()).isEqualTo(feedback2.getId());\n     }\n \n     @Test\n-    void addFeedbacksToAssessment_ActivityDiagram() {\n+    void addFeedbacksToAssessmentActivityDiagram() {\n+        when(feedback1.getReferenceElementId()).thenReturn(\"element1Id\");\n+        when(feedback2.getReferenceElementId()).thenReturn(\"element2Id\");\n         when(activityDiagram.getElementByJSONID(\"element1Id\")).thenReturn(umlControlFlow);\n         when(activityDiagram.getElementByJSONID(\"element2Id\")).thenReturn(umlActivityElement);\n         when(umlControlFlow.getSimilarityID()).thenReturn(1);\n         when(umlActivityElement.getSimilarityID()).thenReturn(2);\n \n-        automaticAssessmentController.addFeedbackToSimilaritySet(assessmentIndex, elementIdFeedbackMap, activityDiagram);\n+        SimilaritySetAssessment similaritySetAssessment = new SimilaritySetAssessment(feedback3);\n+        automaticAssessmentController.addSimilaritySetAssessment(1, similaritySetAssessment);\n+        automaticAssessmentController.addFeedbacksToSimilaritySet(feedbacks, activityDiagram);\n \n-        verify(similaritySetAssessment).addFeedback(feedback1);\n-        verify(similaritySetAssessment, never()).addFeedback(feedback2);\n-        verify(assessmentIndex).addSimilaritySetAssessment(eq(2), any(SimilaritySetAssessment.class));\n-        verify(assessmentIndex, never()).addSimilaritySetAssessment(eq(1), any(SimilaritySetAssessment.class));\n+        List<Long> ids = automaticAssessmentController.getAssessmentForSimilaritySet(1).get().getFeedbackList().stream().map(Feedback::getId).collect(Collectors.toList());\n+        assertThat(ids).contains(feedback3.getId());\n+        assertThat(ids).contains(feedback1.getId());\n+        assertThat(automaticAssessmentController.getAssessmentForSimilaritySet(2).get().getFeedbackList().get(0).getId()).isEqualTo(feedback2.getId());\n     }\n \n     @Test\n-    void addFeedbacksToAssessment_nullElements() {\n+    void addFeedbacksToAssessmentNullElements() {\n         when(classDiagram.getElementByJSONID(\"element1Id\")).thenReturn(null);\n         when(classDiagram.getElementByJSONID(\"element2Id\")).thenReturn(null);\n \n-        automaticAssessmentController.addFeedbackToSimilaritySet(assessmentIndex, elementIdFeedbackMap, classDiagram);\n+        automaticAssessmentController.addFeedbacksToSimilaritySet(feedbacks, classDiagram);\n+        Optional<SimilaritySetAssessment> ssA = automaticAssessmentController.getAssessmentForSimilaritySet(1);\n \n-        verify(similaritySetAssessment, never()).addFeedback(any(Feedback.class));\n-        verify(assessmentIndex, never()).addSimilaritySetAssessment(anyInt(), any(SimilaritySetAssessment.class));\n+        assertThat(automaticAssessmentController.getAssessmentMap().values().size()).isEqualTo(0);\n     }\n \n     @Test\n     void assessModelsAutomatically() {\n         automaticAssessmentController = mock(AutomaticAssessmentController.class);\n-        doCallRealMethod().when(automaticAssessmentController).assessModelsAutomatically(modelIndex, assessmentIndex);\n-        when(automaticAssessmentController.assessModelAutomatically(classDiagram, assessmentIndex)).thenReturn(mock(CompassResult.class));\n-        when(automaticAssessmentController.assessModelAutomatically(activityDiagram, assessmentIndex)).thenReturn(mock(CompassResult.class));\n+        doCallRealMethod().when(automaticAssessmentController).assessModelsAutomatically(modelIndex);\n+        when(automaticAssessmentController.assessModelAutomatically(classDiagram)).thenReturn(mock(CompassResult.class));\n+        when(automaticAssessmentController.assessModelAutomatically(activityDiagram)).thenReturn(mock(CompassResult.class));\n         when(modelIndex.getModelCollection()).thenReturn(List.of(classDiagram));\n         when(modelIndex.getModelCollection()).thenReturn(List.of(classDiagram, activityDiagram));\n \n-        automaticAssessmentController.assessModelsAutomatically(modelIndex, assessmentIndex);\n+        automaticAssessmentController.assessModelsAutomatically(modelIndex);\n \n-        verify(automaticAssessmentController).assessModelAutomatically(classDiagram, assessmentIndex);\n-        verify(automaticAssessmentController).assessModelAutomatically(activityDiagram, assessmentIndex);\n+        verify(automaticAssessmentController).assessModelAutomatically(classDiagram);\n+        verify(automaticAssessmentController).assessModelAutomatically(activityDiagram);\n     }\n \n     @Test\n-    void assessModelAutomatically_ClassDiagram() {\n+    void assessModelAutomaticallyClassDiagram() {\n         prepareClassDiagramForAutomaticAssessment();\n         prepareAssessmentIndexForAutomaticAssessment();\n \n-        CompassResult compassResult = automaticAssessmentController.assessModelAutomatically(classDiagram, assessmentIndex);\n+        CompassResult compassResult = automaticAssessmentController.assessModelAutomatically(classDiagram);\n \n         assertThat(compassResult.entitiesCovered()).isEqualTo(6);\n         assertThat(compassResult.getPoints()).isEqualTo(-0.5 - 0.5 + 0 + 1.5 + 1.0 + 0.5);\n         assertThat(compassResult.getConfidence()).isEqualTo((0.5 + 0.6 + 0.7 + 0.8 + 0.9 + 1.0) / 6, offset(0.000001));\n-        verify(classDiagram).setLastAssessmentCompassResult(compassResult);\n+        CompassResult savedResult = automaticAssessmentController.getLastAssessmentCompassResult(classDiagram.getModelSubmissionId());\n+        assertThat(savedResult.entitiesCovered()).isEqualTo(6);\n+        assertThat(savedResult.getPoints()).isEqualTo(-0.5 - 0.5 + 0 + 1.5 + 1.0 + 0.5);\n+        assertThat(savedResult.getConfidence()).isEqualTo((0.5 + 0.6 + 0.7 + 0.8 + 0.9 + 1.0) / 6, offset(0.000001));\n     }\n \n     @Test\n-    void assessModelAutomatically_ActivityDiagram() {\n+    void assessModelAutomaticallyActivityDiagram() {\n         prepareActivityDiagramForAutomaticAssessment();\n         prepareAssessmentIndexForAutomaticAssessment();\n \n-        CompassResult compassResult = automaticAssessmentController.assessModelAutomatically(activityDiagram, assessmentIndex);\n+        CompassResult compassResult = automaticAssessmentController.assessModelAutomatically(activityDiagram);\n \n         assertThat(compassResult.entitiesCovered()).isEqualTo(6);\n         assertThat(compassResult.getPoints()).isEqualTo(-0.5 - 0.5 + 0 + 1.5 + 1.0 + 0.5);\n         assertThat(compassResult.getConfidence()).isEqualTo((0.5 + 0.6 + 0.7 + 0.8 + 0.9 + 1.0) / 6, offset(0.000001));\n-        verify(activityDiagram).setLastAssessmentCompassResult(compassResult);\n+        CompassResult savedResult = automaticAssessmentController.getLastAssessmentCompassResult(activityDiagram.getModelSubmissionId());\n+        assertThat(savedResult.entitiesCovered()).isEqualTo(6);\n+        assertThat(savedResult.getPoints()).isEqualTo(-0.5 - 0.5 + 0 + 1.5 + 1.0 + 0.5);\n+        assertThat(savedResult.getConfidence()).isEqualTo((0.5 + 0.6 + 0.7 + 0.8 + 0.9 + 1.0) / 6, offset(0.000001));\n     }\n \n     @Test\n-    void assessModelAutomatically_nullScore() {\n+    void assessModelAutomaticallyNullScore() {\n         when(classDiagram.getClassList()).thenReturn(List.of(umlClass));\n         when(umlClass.getSimilarityID()).thenReturn(1);\n         when(similaritySetAssessment.getScore()).thenReturn(null);\n \n-        CompassResult compassResult = automaticAssessmentController.assessModelAutomatically(classDiagram, assessmentIndex);\n+        CompassResult compassResult = automaticAssessmentController.assessModelAutomatically(classDiagram);\n \n         assertThat(compassResult.entitiesCovered()).isEqualTo(0);\n         assertThat(compassResult.getPoints()).isEqualTo(0);\n         assertThat(compassResult.getConfidence()).isEqualTo(0);\n-        verify(classDiagram).setLastAssessmentCompassResult(compassResult);\n+        CompassResult savedResult = automaticAssessmentController.getLastAssessmentCompassResult(activityDiagram.getModelSubmissionId());\n+        assertThat(savedResult.entitiesCovered()).isEqualTo(0);\n+        assertThat(savedResult.getPoints()).isEqualTo(0);\n+        assertThat(savedResult.getConfidence()).isEqualTo(0);\n+\n+    }\n+\n+    @Test\n+    void isUnassessedTrue() {\n+        boolean isUnassessed = automaticAssessmentController.isUnassessed(classDiagram.getModelSubmissionId());\n+        assertThat(isUnassessed).isTrue();\n+    }\n+\n+    @Test\n+    void isUnassessedFalse() {\n+        when(classDiagram.getModelSubmissionId()).thenReturn(1L);\n+        CompassResult compassResult = mock(CompassResult.class);\n+        automaticAssessmentController.setLastAssessmentCompassResult(1L, compassResult);\n+        boolean isUnassessed = automaticAssessmentController.isUnassessed(classDiagram.getModelSubmissionId());\n+        assertThat(isUnassessed).isFalse();\n+    }\n+\n+    @Test\n+    void testGetLastAssessmentConfidence() {\n+        CompassResult compassResult = mock(CompassResult.class, withSettings().serializable());\n+        doReturn(0.456).when(compassResult).getConfidence();\n+        automaticAssessmentController.setLastAssessmentCompassResult(classDiagram.getModelSubmissionId(), compassResult);\n+        double confidence = automaticAssessmentController.getLastAssessmentConfidence(classDiagram.getModelSubmissionId());\n+        assertThat(confidence).isEqualTo(0.456);\n+    }\n+\n+    @Test\n+    void testGetLastAssessmentConfidenceNoCompassResult() {\n+        double confidence = automaticAssessmentController.getLastAssessmentConfidence(classDiagram.getModelSubmissionId());\n+        assertThat(confidence).isEqualTo(-1);\n+    }\n+\n+    @Test\n+    void testGetLastAssessmentCoverage() {\n+        CompassResult compassResult = mock(CompassResult.class, withSettings().serializable());\n+        doReturn(0.789).when(compassResult).getCoverage();\n+        automaticAssessmentController.setLastAssessmentCompassResult(classDiagram.getModelSubmissionId(), compassResult);\n+        double confidence = automaticAssessmentController.getLastAssessmentCoverage(classDiagram.getModelSubmissionId());\n+        assertThat(confidence).isEqualTo(0.789);\n+    }\n+\n+    @Test\n+    void testGetLastAssessmentCoverageNoCompassResult() {\n+        double confidence = automaticAssessmentController.getLastAssessmentCoverage(classDiagram.getModelSubmissionId());\n+        assertThat(confidence).isEqualTo(-1);\n     }\n \n     private void prepareClassDiagramForAutomaticAssessment() {\n-        UMLAttribute attribute1 = mock(UMLAttribute.class);\n-        UMLAttribute attribute2 = mock(UMLAttribute.class);\n-        UMLMethod method1 = mock(UMLMethod.class);\n-        UMLMethod method2 = mock(UMLMethod.class);\n-        UMLClass class1 = mock(UMLClass.class);\n-        UMLClass class2 = mock(UMLClass.class);\n-        UMLRelationship relationship1 = mock(UMLRelationship.class);\n-        UMLRelationship relationship2 = mock(UMLRelationship.class);\n-        UMLPackage package1 = mock(UMLPackage.class);\n-        UMLPackage package2 = mock(UMLPackage.class);\n+        UMLAttribute attribute1 = mock(UMLAttribute.class, withSettings().serializable());\n+        UMLAttribute attribute2 = mock(UMLAttribute.class, withSettings().serializable());\n+        UMLMethod method1 = mock(UMLMethod.class, withSettings().serializable());\n+        UMLMethod method2 = mock(UMLMethod.class, withSettings().serializable());\n+        UMLClass class1 = mock(UMLClass.class, withSettings().serializable());\n+        UMLClass class2 = mock(UMLClass.class, withSettings().serializable());\n+        UMLRelationship relationship1 = mock(UMLRelationship.class, withSettings().serializable());\n+        UMLRelationship relationship2 = mock(UMLRelationship.class, withSettings().serializable());\n+        UMLPackage package1 = mock(UMLPackage.class, withSettings().serializable());\n+        UMLPackage package2 = mock(UMLPackage.class, withSettings().serializable());\n \n         when(class1.getAttributes()).thenReturn(Collections.emptyList());\n         when(class1.getMethods()).thenReturn(Collections.emptyList());\n@@ -191,60 +276,68 @@ private void prepareClassDiagramForAutomaticAssessment() {\n         when(classDiagram.getAllModelElements()).thenReturn(List.of(class1, class2, relationship1, relationship2, package1, package2, attribute1, attribute2, method1, method2));\n \n         when(class1.getSimilarityID()).thenReturn(1);\n+        when(class1.getJSONElementID()).thenReturn(\"class1\");\n         when(class2.getSimilarityID()).thenReturn(2);\n+        when(class2.getJSONElementID()).thenReturn(\"class2\");\n         when(relationship1.getSimilarityID()).thenReturn(3);\n+        when(relationship1.getJSONElementID()).thenReturn(\"relationship1\");\n         when(relationship2.getSimilarityID()).thenReturn(4);\n+        when(relationship2.getJSONElementID()).thenReturn(\"relationship2\");\n         when(package1.getSimilarityID()).thenReturn(5);\n+        when(package1.getJSONElementID()).thenReturn(\"package1\");\n         when(package2.getSimilarityID()).thenReturn(6);\n+        when(package2.getJSONElementID()).thenReturn(\"package2\");\n         when(attribute1.getSimilarityID()).thenReturn(7);\n+        when(attribute1.getJSONElementID()).thenReturn(\"attribute1\");\n         when(attribute2.getSimilarityID()).thenReturn(8);\n+        when(attribute2.getJSONElementID()).thenReturn(\"attribute2\");\n         when(method1.getSimilarityID()).thenReturn(9);\n+        when(method1.getJSONElementID()).thenReturn(\"method1\");\n         when(method2.getSimilarityID()).thenReturn(10);\n+        when(method2.getJSONElementID()).thenReturn(\"method2\");\n     }\n \n     private void prepareActivityDiagramForAutomaticAssessment() {\n-        UMLActivityNode activityNode1 = mock(UMLActivityNode.class);\n-        UMLActivityNode activityNode2 = mock(UMLActivityNode.class);\n-        UMLActivityNode activityNode3 = mock(UMLActivityNode.class);\n-        UMLActivity activity1 = mock(UMLActivity.class);\n-        UMLActivity activity2 = mock(UMLActivity.class);\n-        UMLActivity activity3 = mock(UMLActivity.class);\n-        UMLControlFlow controlFlow1 = mock(UMLControlFlow.class);\n-        UMLControlFlow controlFlow2 = mock(UMLControlFlow.class);\n-        UMLControlFlow controlFlow3 = mock(UMLControlFlow.class);\n+        UMLActivityNode activityNode1 = mock(UMLActivityNode.class, withSettings().serializable());\n+        UMLActivityNode activityNode2 = mock(UMLActivityNode.class, withSettings().serializable());\n+        UMLActivityNode activityNode3 = mock(UMLActivityNode.class, withSettings().serializable());\n+        UMLActivity activity1 = mock(UMLActivity.class, withSettings().serializable());\n+        UMLActivity activity2 = mock(UMLActivity.class, withSettings().serializable());\n+        UMLActivity activity3 = mock(UMLActivity.class, withSettings().serializable());\n+        UMLControlFlow controlFlow1 = mock(UMLControlFlow.class, withSettings().serializable());\n+        UMLControlFlow controlFlow2 = mock(UMLControlFlow.class, withSettings().serializable());\n+        UMLControlFlow controlFlow3 = mock(UMLControlFlow.class, withSettings().serializable());\n \n         when(activityDiagram.getAllModelElements())\n                 .thenReturn(List.of(activityNode1, activityNode2, activityNode3, activity1, activity2, activity3, controlFlow1, controlFlow2, controlFlow3));\n \n         when(activityNode1.getSimilarityID()).thenReturn(1);\n+        when(activityNode1.getJSONElementID()).thenReturn(\"activityNode1\");\n         when(activityNode2.getSimilarityID()).thenReturn(2);\n+        when(activityNode2.getJSONElementID()).thenReturn(\"activityNode2\");\n         when(activityNode3.getSimilarityID()).thenReturn(4);\n+        when(activityNode3.getJSONElementID()).thenReturn(\"activityNode3\");\n         when(activity1.getSimilarityID()).thenReturn(3);\n+        when(activity1.getJSONElementID()).thenReturn(\"activity1\");\n         when(activity2.getSimilarityID()).thenReturn(5);\n+        when(activity2.getJSONElementID()).thenReturn(\"activity2\");\n         when(activity3.getSimilarityID()).thenReturn(6);\n+        when(activity3.getJSONElementID()).thenReturn(\"activity3\");\n         when(controlFlow1.getSimilarityID()).thenReturn(7);\n+        when(controlFlow1.getJSONElementID()).thenReturn(\"controlFlow1\");\n         when(controlFlow2.getSimilarityID()).thenReturn(8);\n+        when(controlFlow2.getJSONElementID()).thenReturn(\"controlFlow2\");\n         when(controlFlow3.getSimilarityID()).thenReturn(9);\n+        when(controlFlow3.getJSONElementID()).thenReturn(\"controlFlow3\");\n     }\n \n     private void prepareAssessmentIndexForAutomaticAssessment() {\n-        SimilaritySetAssessment similaritySetAssessment1 = mock(SimilaritySetAssessment.class);\n-        SimilaritySetAssessment similaritySetAssessment2 = mock(SimilaritySetAssessment.class);\n-        SimilaritySetAssessment similaritySetAssessment3 = mock(SimilaritySetAssessment.class);\n-        SimilaritySetAssessment similaritySetAssessment4 = mock(SimilaritySetAssessment.class);\n-        SimilaritySetAssessment similaritySetAssessment5 = mock(SimilaritySetAssessment.class);\n-        SimilaritySetAssessment similaritySetAssessment6 = mock(SimilaritySetAssessment.class);\n-\n-        when(assessmentIndex.getAssessmentForSimilaritySet(1)).thenReturn(Optional.of(similaritySetAssessment1));\n-        when(assessmentIndex.getAssessmentForSimilaritySet(2)).thenReturn(Optional.of(similaritySetAssessment2));\n-        when(assessmentIndex.getAssessmentForSimilaritySet(3)).thenReturn(Optional.of(similaritySetAssessment3));\n-        when(assessmentIndex.getAssessmentForSimilaritySet(4)).thenReturn(Optional.empty());\n-        when(assessmentIndex.getAssessmentForSimilaritySet(5)).thenReturn(Optional.empty());\n-        when(assessmentIndex.getAssessmentForSimilaritySet(6)).thenReturn(Optional.of(similaritySetAssessment4));\n-        when(assessmentIndex.getAssessmentForSimilaritySet(7)).thenReturn(Optional.empty());\n-        when(assessmentIndex.getAssessmentForSimilaritySet(8)).thenReturn(Optional.of(similaritySetAssessment5));\n-        when(assessmentIndex.getAssessmentForSimilaritySet(9)).thenReturn(Optional.of(similaritySetAssessment6));\n-        when(assessmentIndex.getAssessmentForSimilaritySet(10)).thenReturn(Optional.empty());\n+        SimilaritySetAssessment similaritySetAssessment1 = mock(SimilaritySetAssessment.class, withSettings().serializable());\n+        SimilaritySetAssessment similaritySetAssessment2 = mock(SimilaritySetAssessment.class, withSettings().serializable());\n+        SimilaritySetAssessment similaritySetAssessment3 = mock(SimilaritySetAssessment.class, withSettings().serializable());\n+        SimilaritySetAssessment similaritySetAssessment4 = mock(SimilaritySetAssessment.class, withSettings().serializable());\n+        SimilaritySetAssessment similaritySetAssessment5 = mock(SimilaritySetAssessment.class, withSettings().serializable());\n+        SimilaritySetAssessment similaritySetAssessment6 = mock(SimilaritySetAssessment.class, withSettings().serializable());\n \n         Score score1 = mockScore(-0.5, 0.5);\n         Score score2 = mockScore(-0.5, 0.6);\n@@ -259,10 +352,17 @@ private void prepareAssessmentIndexForAutomaticAssessment() {\n         when(similaritySetAssessment4.getScore()).thenReturn(score4);\n         when(similaritySetAssessment5.getScore()).thenReturn(score5);\n         when(similaritySetAssessment6.getScore()).thenReturn(score6);\n+\n+        automaticAssessmentController.addSimilaritySetAssessment(1, similaritySetAssessment1);\n+        automaticAssessmentController.addSimilaritySetAssessment(2, similaritySetAssessment2);\n+        automaticAssessmentController.addSimilaritySetAssessment(3, similaritySetAssessment3);\n+        automaticAssessmentController.addSimilaritySetAssessment(6, similaritySetAssessment4);\n+        automaticAssessmentController.addSimilaritySetAssessment(8, similaritySetAssessment5);\n+        automaticAssessmentController.addSimilaritySetAssessment(9, similaritySetAssessment6);\n     }\n \n     private Score mockScore(double points, double confidence) {\n-        Score score = mock(Score.class);\n+        Score score = mock(Score.class, withSettings().serializable());\n         when(score.getPoints()).thenReturn(points);\n         when(score.getConfidence()).thenReturn(confidence);\n         return score;"
  }
]
