[
  {
    "sha": "3fd7411800bb2fffb322da96d95167edc437f455",
    "filename": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java",
    "status": "modified",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -14,6 +14,7 @@\n \n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n import de.tum.in.www1.artemis.domain.leaderboard.tutor.TutorLeaderboardAssessments;\n import de.tum.in.www1.artemis.web.rest.dto.DueDateStat;\n@@ -165,6 +166,30 @@ SELECT COUNT(r.id)\n             \"\"\")\n     List<Long> countNumberOfFinishedAssessmentsByExerciseIdIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+            SELECT r\n+                FROM StudentParticipation p join p.submissions s join s.results r\n+                WHERE p.exercise.id = :exerciseId\n+                    AND p.testRun = FALSE\n+                    AND s.submitted = TRUE\n+                    AND r.completionDate IS NULL\n+                    AND r.assessor.id <> :tutorId\n+                    AND (SELECT COUNT(r2) FROM s.results r2 WHERE r2.assessmentType IN ('SEMI_AUTOMATIC','MANUAL')) = :numberOfCorrections\n+            \"\"\")\n+    List<Result> countNumberOfLockedAssessmentsByOtherTutorsForExamExerciseForCorrectionRoundsIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId, @Param(\"tutorId\") Long tutorId,\n+            @Param(\"numberOfCorrections\") Long numberOfCorrections);\n+\n+    @Query(\"\"\"\n+            SELECT r\n+                FROM StudentParticipation p join p.submissions s join s.results r\n+                WHERE p.exercise.id = :exerciseId\n+                    AND p.testRun = FALSE\n+                    AND s.submitted = TRUE\n+                    AND r.completionDate IS NULL\n+                    AND r.assessor.id <> :tutorId\n+            \"\"\")\n+    List<Result> countNumberOfLockedAssessmentsByOtherTutorsForExamExerciseForCorrectionRoundsIgnoreTestRuns2(@Param(\"exerciseId\") Long exerciseId, @Param(\"tutorId\") Long tutorId);\n+\n     /**\n      * count the number of finsished assessments of an exam with given examId\n      *\n@@ -284,6 +309,28 @@ SELECT COUNT(DISTINCT p) FROM Participation p JOIN p.results r\n         return convertDatabaseResponseToDueDateStats(countlist, numberOfCorrectionRounds);\n     }\n \n+    /**\n+     * Use this method only for exams!\n+     * Given an exerciseId and the number of correctionRounds, return the number of assessments that have been finished, for that exerciseId and each correctionRound\n+     *\n+     * @param exercise  - the exercise we are interested in\n+     * @param numberOfCorrectionRounds - the correction round we want finished assessments for\n+     * @param tutor tutor for which we want to coutnt the\n+     * @return an array of the number of assessments for the exercise for a given correction round\n+     */\n+    default DueDateStat[] countNumberOfLockedAssessmentsByOtherTutorsForExamExerciseForCorrectionRounds(Exercise exercise, int numberOfCorrectionRounds, User tutor) {\n+        DueDateStat[] correctionRoundsDataStats = new DueDateStat[numberOfCorrectionRounds];\n+        var res = countNumberOfLockedAssessmentsByOtherTutorsForExamExerciseForCorrectionRoundsIgnoreTestRuns2(exercise.getId(), tutor.getId());\n+\n+        correctionRoundsDataStats[0] = new DueDateStat(res.stream().filter(x -> x.isRated() == null).count(), 0L);\n+        // so far the number of correctionRounds is limited to 2\n+        if (numberOfCorrectionRounds == 2) {\n+            correctionRoundsDataStats[1] = new DueDateStat(res.stream().filter(x -> x.isRated() != null).count(), 0L);\n+        }\n+\n+        return correctionRoundsDataStats;\n+    }\n+\n     /**\n      * Use this method only for exams!\n      * Given an exerciseId and the number of correctionRounds, return the number of assessments that have been finished, for that exerciseId and each correctionRound"
  },
  {
    "sha": "14a1fe2b03a36928e8841dbe593d70f701672ad5",
    "filename": "src/main/java/de/tum/in/www1/artemis/repository/SubmissionRepository.java",
    "status": "modified",
    "additions": 16,
    "deletions": 1,
    "changes": 17,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/repository/SubmissionRepository.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/repository/SubmissionRepository.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/repository/SubmissionRepository.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -97,10 +97,25 @@ SELECT COUNT (DISTINCT s) FROM Submission s left join s.results r\n             SELECT COUNT (DISTINCT s) FROM Submission s left join s.results r\n                 WHERE r.assessor.id IS NOT NULL\n                 AND r.completionDate IS NULL\n-                AND s.participation.exercise.exerciseGroup.exam.id= :examId\n+                AND s.participation.exercise.exerciseGroup.exam.id = :examId\n             \"\"\")\n     long countLockedSubmissionsByExamId(@Param(\"examId\") Long examId);\n \n+    /**\n+     * Get the number of currently locked submissions for a given exam. These are all submissions for which users started, but have not yet finished the\n+     * assessments.\n+     *\n+     * @param exerciseId the id of the exam\n+     * @return the number of currently locked submissions for a specific user in the given course\n+     */\n+    @Query(\"\"\"\n+            SELECT COUNT (DISTINCT s) FROM Submission s left join s.results r\n+                WHERE r.assessor.id IS NOT NULL\n+                AND r.completionDate IS NULL\n+                AND s.participation.exercise.id = :exerciseId\n+            \"\"\")\n+    long countLockedSubmissionsByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n+\n     /**\n      * Get currently locked submissions for a specific user in the given course.\n      * These are all submissions for which the user started, but has not yet finished the assessment."
  },
  {
    "sha": "a8842f2f42dd0384dee134dca1af617bab25acf3",
    "filename": "src/main/java/de/tum/in/www1/artemis/service/exam/ExamService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/service/exam/ExamService.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/service/exam/ExamService.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/service/exam/ExamService.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -769,9 +769,9 @@ public Integer lockAllRepositories(Long examId) {\n      * @param examId    - the id of the exam to retrieve stats from\n      * @return data about a exam including all exercises, plus some data for the tutor as tutor status for assessment\n      */\n-    public StatsForInstructorDashboardDTO getStatsForExamAssessmentDashboard(Course course, Long examId) {\n+    public StatsForDashboardDTO getStatsForExamAssessmentDashboard(Course course, Long examId) {\n         Exam exam = examRepository.findById(examId).orElseThrow();\n-        StatsForInstructorDashboardDTO stats = new StatsForInstructorDashboardDTO();\n+        StatsForDashboardDTO stats = new StatsForDashboardDTO();\n \n         final long numberOfSubmissions = submissionRepository.countByExamIdSubmittedSubmissionsIgnoreTestRuns(examId)\n                 + programmingExerciseRepository.countSubmissionsByExamIdSubmitted(examId);"
  },
  {
    "sha": "87593d29333e43ad01c9e5b8e40def11f4ea4153",
    "filename": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -46,7 +46,7 @@\n import de.tum.in.www1.artemis.service.connectors.CIUserManagementService;\n import de.tum.in.www1.artemis.service.connectors.VcsUserManagementService;\n import de.tum.in.www1.artemis.web.rest.dto.DueDateStat;\n-import de.tum.in.www1.artemis.web.rest.dto.StatsForInstructorDashboardDTO;\n+import de.tum.in.www1.artemis.web.rest.dto.StatsForDashboardDTO;\n import de.tum.in.www1.artemis.web.rest.dto.TutorLeaderboardDTO;\n import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n@@ -585,13 +585,13 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n      */\n     @GetMapping(\"/courses/{courseId}/stats-for-assessment-dashboard\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<StatsForInstructorDashboardDTO> getStatsForAssessmentDashboard(@PathVariable long courseId) {\n+    public ResponseEntity<StatsForDashboardDTO> getStatsForAssessmentDashboard(@PathVariable long courseId) {\n         Course course = courseRepository.findByIdElseThrow(courseId);\n         User user = userRepository.getUserWithGroupsAndAuthorities();\n         if (!authCheckService.isAtLeastTeachingAssistantInCourse(course, user)) {\n             return forbidden();\n         }\n-        StatsForInstructorDashboardDTO stats = new StatsForInstructorDashboardDTO();\n+        StatsForDashboardDTO stats = new StatsForDashboardDTO();\n         long start = System.currentTimeMillis();\n         long numberOfInTimeSubmissions = submissionRepository.countByCourseIdSubmittedBeforeDueDate(courseId);\n         long end = System.currentTimeMillis();\n@@ -781,7 +781,7 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n      */\n     @GetMapping(\"/courses/{courseId}/stats-for-instructor-dashboard\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<StatsForInstructorDashboardDTO> getStatsForInstructorDashboard(@PathVariable Long courseId) throws AccessForbiddenException {\n+    public ResponseEntity<StatsForDashboardDTO> getStatsForInstructorDashboard(@PathVariable Long courseId) throws AccessForbiddenException {\n         log.debug(\"REST request /courses/{courseId}/stats-for-instructor-dashboard\");\n         final long start = System.currentTimeMillis();\n         final Course course = courseRepository.findByIdElseThrow(courseId);\n@@ -790,7 +790,7 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        StatsForInstructorDashboardDTO stats = new StatsForInstructorDashboardDTO();\n+        StatsForDashboardDTO stats = new StatsForDashboardDTO();\n         long start2 = System.currentTimeMillis();\n         // this one is very slow TODO make faster\n         DueDateStat totalNumberOfAssessments = resultRepository.countNumberOfAssessments(courseId);"
  },
  {
    "sha": "9eba049d47209dd50feed5622f3467b1254e1469",
    "filename": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -37,7 +37,7 @@\n import de.tum.in.www1.artemis.web.rest.dto.ExamChecklistDTO;\n import de.tum.in.www1.artemis.web.rest.dto.ExamInformationDTO;\n import de.tum.in.www1.artemis.web.rest.dto.ExamScoresDTO;\n-import de.tum.in.www1.artemis.web.rest.dto.StatsForInstructorDashboardDTO;\n+import de.tum.in.www1.artemis.web.rest.dto.StatsForDashboardDTO;\n import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n@@ -356,7 +356,7 @@ public ExamResource(UserRepository userRepository, CourseRepository courseReposi\n      */\n     @GetMapping(\"/courses/{courseId}/exams/{examId}/stats-for-exam-assessment-dashboard\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<StatsForInstructorDashboardDTO> getStatsForExamAssessmentDashboard(@PathVariable Long courseId, @PathVariable Long examId) {\n+    public ResponseEntity<StatsForDashboardDTO> getStatsForExamAssessmentDashboard(@PathVariable Long courseId, @PathVariable Long examId) {\n         log.debug(\"REST request /courses/{courseId}/stats-for-exam-assessment-dashboard\");\n \n         Course course = courseRepository.findByIdElseThrow(courseId);"
  },
  {
    "sha": "b3639559fbdcaf88889209bf37c4ecdb4224a687",
    "filename": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseResource.java",
    "status": "modified",
    "additions": 16,
    "deletions": 8,
    "changes": 24,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseResource.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseResource.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseResource.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -27,7 +27,7 @@\n import de.tum.in.www1.artemis.service.feature.Feature;\n import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n import de.tum.in.www1.artemis.web.rest.dto.DueDateStat;\n-import de.tum.in.www1.artemis.web.rest.dto.StatsForInstructorDashboardDTO;\n+import de.tum.in.www1.artemis.web.rest.dto.StatsForDashboardDTO;\n import de.tum.in.www1.artemis.web.rest.dto.TutorLeaderboardDTO;\n import de.tum.in.www1.artemis.web.rest.errors.EntityNotFoundException;\n import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n@@ -213,14 +213,14 @@ else if (authCheckService.isAtLeastTeachingAssistantForExercise(exercise, user))\n      */\n     @GetMapping(\"/exercises/{exerciseId}/stats-for-assessment-dashboard\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<StatsForInstructorDashboardDTO> getStatsForExerciseAssessmentDashboard(@PathVariable Long exerciseId) {\n+    public ResponseEntity<StatsForDashboardDTO> getStatsForExerciseAssessmentDashboard(@PathVariable Long exerciseId) {\n         Exercise exercise = exerciseRepository.findByIdElseThrow(exerciseId);\n \n         if (!authCheckService.isAtLeastTeachingAssistantForExercise(exercise)) {\n             return forbidden();\n         }\n \n-        StatsForInstructorDashboardDTO stats = populateCommonStatistics(exercise, exercise.isExamExercise());\n+        StatsForDashboardDTO stats = populateCommonStatistics(exercise, exercise.isExamExercise());\n \n         return ResponseEntity.ok(stats);\n     }\n@@ -234,9 +234,9 @@ else if (authCheckService.isAtLeastTeachingAssistantForExercise(exercise, user))\n      * @param examMode - flag to determine if test run submissions should be deducted from the statistics\n      * @return a object node with the stats\n      */\n-    private StatsForInstructorDashboardDTO populateCommonStatistics(Exercise exercise, boolean examMode) {\n+    private StatsForDashboardDTO populateCommonStatistics(Exercise exercise, boolean examMode) {\n         final Long exerciseId = exercise.getId();\n-        StatsForInstructorDashboardDTO stats = new StatsForInstructorDashboardDTO();\n+        StatsForDashboardDTO stats = new StatsForDashboardDTO();\n \n         DueDateStat numberOfSubmissions;\n         DueDateStat totalNumberOfAssessments;\n@@ -254,9 +254,10 @@ private StatsForInstructorDashboardDTO populateCommonStatistics(Exercise exercis\n         stats.setTotalNumberOfAssessments(totalNumberOfAssessments);\n \n         final DueDateStat[] numberOfAssessmentsOfCorrectionRounds;\n+        int numberOfCorrectionRounds = 1;\n         if (examMode) {\n             // set number of corrections specific to each correction round\n-            int numberOfCorrectionRounds = exercise.getExerciseGroup().getExam().getNumberOfCorrectionRoundsInExam();\n+            numberOfCorrectionRounds = exercise.getExerciseGroup().getExam().getNumberOfCorrectionRoundsInExam();\n             numberOfAssessmentsOfCorrectionRounds = resultRepository.countNumberOfFinishedAssessmentsForExamExerciseForCorrectionRounds(exercise, numberOfCorrectionRounds);\n         }\n         else {\n@@ -266,6 +267,11 @@ private StatsForInstructorDashboardDTO populateCommonStatistics(Exercise exercis\n \n         stats.setNumberOfAssessmentsOfCorrectionRounds(numberOfAssessmentsOfCorrectionRounds);\n \n+        final DueDateStat[] numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;\n+        numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = resultRepository.countNumberOfLockedAssessmentsByOtherTutorsForExamExerciseForCorrectionRounds(exercise,\n+                numberOfCorrectionRounds, userRepository.getUserWithGroupsAndAuthorities());\n+        stats.setNumberOfLockedAssessmentByOtherTutorsOfCorrectionRound(numberOfLockedAssessmentByOtherTutorsOfCorrectionRound);\n+\n         final DueDateStat numberOfAutomaticAssistedAssessments = resultRepository.countNumberOfAutomaticAssistedAssessmentsForExercise(exerciseId);\n         stats.setNumberOfAutomaticAssistedAssessments(numberOfAutomaticAssistedAssessments);\n \n@@ -293,6 +299,8 @@ private StatsForInstructorDashboardDTO populateCommonStatistics(Exercise exercis\n \n         List<TutorLeaderboardDTO> leaderboardEntries = tutorLeaderboardService.getExerciseLeaderboard(exercise);\n         stats.setTutorLeaderboardEntries(leaderboardEntries);\n+        final long totalNumberOfAssessmentLocks = submissionRepository.countLockedSubmissionsByExerciseId(exerciseId);\n+        stats.setTotalNumberOfAssessmentLocks(totalNumberOfAssessmentLocks);\n \n         return stats;\n     }\n@@ -305,15 +313,15 @@ private StatsForInstructorDashboardDTO populateCommonStatistics(Exercise exercis\n      */\n     @GetMapping(\"/exercises/{exerciseId}/stats-for-instructor-dashboard\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<StatsForInstructorDashboardDTO> getStatsForInstructorExerciseDashboard(@PathVariable Long exerciseId) {\n+    public ResponseEntity<StatsForDashboardDTO> getStatsForInstructorExerciseDashboard(@PathVariable Long exerciseId) {\n         log.debug(\"REST request to get exercise statistics for instructor dashboard : {}\", exerciseId);\n         Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n \n         if (!authCheckService.isAtLeastInstructorForExercise(exercise)) {\n             return forbidden();\n         }\n \n-        StatsForInstructorDashboardDTO stats = populateCommonStatistics(exercise, exercise.isExamExercise());\n+        StatsForDashboardDTO stats = populateCommonStatistics(exercise, exercise.isExamExercise());\n         long numberOfOpenComplaints = complaintRepository.countByResult_Participation_Exercise_IdAndComplaintType(exerciseId, ComplaintType.COMPLAINT);\n         stats.setNumberOfOpenComplaints(numberOfOpenComplaints);\n "
  },
  {
    "sha": "cdf774cc970b1f46a87c8e99515d49ec1bf33a8b",
    "filename": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/StatsForDashboardDTO.java",
    "status": "renamed",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/dto/StatsForDashboardDTO.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/java/de/tum/in/www1/artemis/web/rest/dto/StatsForDashboardDTO.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/java/de/tum/in/www1/artemis/web/rest/dto/StatsForDashboardDTO.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -2,7 +2,7 @@\n \n import java.util.List;\n \n-public class StatsForInstructorDashboardDTO {\n+public class StatsForDashboardDTO {\n \n     private Long numberOfStudents;\n \n@@ -14,6 +14,8 @@\n \n     private DueDateStat[] numberOfAssessmentsOfCorrectionRounds;\n \n+    private DueDateStat[] numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;\n+\n     private DueDateStat numberOfAutomaticAssistedAssessments;\n \n     private Long numberOfComplaints;\n@@ -28,7 +30,7 @@\n \n     private List<TutorLeaderboardDTO> tutorLeaderboardEntries;\n \n-    public StatsForInstructorDashboardDTO() {\n+    public StatsForDashboardDTO() {\n     }\n \n     public Long getNumberOfStudents() {\n@@ -126,4 +128,12 @@ public void setTotalNumberOfAssessmentLocks(long totalNumberOfAssessmentLocks) {\n     public void setTutorLeaderboardEntries(List<TutorLeaderboardDTO> tutorLeaderboardEntries) {\n         this.tutorLeaderboardEntries = tutorLeaderboardEntries;\n     }\n+\n+    public DueDateStat[] getNumberOfLockedAssessmentByOtherTutorsOfCorrectionRound() {\n+        return numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;\n+    }\n+\n+    public void setNumberOfLockedAssessmentByOtherTutorsOfCorrectionRound(DueDateStat[] numberOfLockedAssessmentByOtherTutorsOfCorrectionRound) {\n+        this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;\n+    }\n }",
    "previous_filename": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/StatsForInstructorDashboardDTO.java"
  },
  {
    "sha": "6ed97982e7950f76285211a21acc7b2490d1e234",
    "filename": "src/main/webapp/app/course/dashboards/instructor-course-dashboard/stats-for-dashboard.model.ts",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/course/dashboards/instructor-course-dashboard/stats-for-dashboard.model.ts",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/course/dashboards/instructor-course-dashboard/stats-for-dashboard.model.ts",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/webapp/app/course/dashboards/instructor-course-dashboard/stats-for-dashboard.model.ts?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -13,6 +13,7 @@ export class StatsForDashboard {\n     public numberOfAssessmentLocks = 0;\n     public totalNumberOfAssessmentLocks = 0;\n     public numberOfAssessmentsOfCorrectionRounds = [new DueDateStat()]; // Array with number of assessments for each correction round\n+    public numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = [new DueDateStat()]; // Array with number of locked assessments for each correction round\n \n     public tutorLeaderboardEntries: TutorLeaderboardElement[] = [];\n "
  },
  {
    "sha": "d6050f16dbe593fa73cda94695ff7c85ec06fa5b",
    "filename": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html",
    "status": "modified",
    "additions": 27,
    "deletions": 1,
    "changes": 28,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -365,7 +365,33 @@ <h4 *ngIf=\"isTestRun\">\n                             \"\n                         >\n                             <div class=\"alert alert-info\">\n-                                {{ 'artemisApp.exerciseAssessmentDashboard.noSubmissionsBecauseOfOtherLockedSubmissions' | translate }}\n+                                <span\n+                                    jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noSubmissionsInfo\"\n+                                    [translateValues]=\"{\n+                                        freeAssessments:\n+                                            numberOfSubmissions.inTime -\n+                                            numberOfAssessmentsOfCorrectionRounds[correctionRound].inTime -\n+                                            numberOfLockedAssessmentByOtherTutorsOfCorrectionRound[correctionRound]?.inTime -\n+                                            (correctionRound === 0 ? 0 : numberOfSubmissions.inTime - numberOfAssessmentsOfCorrectionRounds[1].inTime),\n+                                        openAssessments: numberOfSubmissions.inTime - numberOfAssessmentsOfCorrectionRounds[correctionRound].inTime,\n+                                        lockedSubmissionsByOtherTutor: numberOfLockedAssessmentByOtherTutorsOfCorrectionRound[correctionRound]?.inTime\n+                                    }\"\n+                                >\n+                                </span>\n+                                <ng-container *ngIf=\"correctionRound === 1\">\n+                                    <span\n+                                        *ngIf=\"numberOfSubmissions.inTime - numberOfAssessmentsOfCorrectionRounds[0].inTime === 1\"\n+                                        jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noSubmissionsInfoSecondCorrectionSingular\"\n+                                        [translateValues]=\"{ notYetAssessed: numberOfSubmissions.inTime - numberOfAssessmentsOfCorrectionRounds[0].inTime }\"\n+                                    >\n+                                    </span>\n+                                    <span\n+                                        *ngIf=\"numberOfSubmissions.inTime - numberOfAssessmentsOfCorrectionRounds[0].inTime !== 1\"\n+                                        jhiTranslate=\"artemisApp.exerciseAssessmentDashboard.noSubmissionsInfoSecondCorrectionPlural\"\n+                                        [translateValues]=\"{ notYetAssessed: numberOfSubmissions.inTime - numberOfAssessmentsOfCorrectionRounds[0].inTime }\"\n+                                    >\n+                                    </span>\n+                                </ng-container>\n                             </div>\n                         </ng-container>\n                     </div>"
  },
  {
    "sha": "1bd7b72f1ae1d29e0cb5b76817cc40eb0762540b",
    "filename": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -72,6 +72,7 @@ export class ExerciseAssessmentDashboardComponent implements OnInit, AfterViewIn\n     numberOfSubmissions = new DueDateStat();\n     totalNumberOfAssessments = new DueDateStat();\n     numberOfAssessmentsOfCorrectionRounds = [new DueDateStat()];\n+    numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = [new DueDateStat()];\n     numberOfComplaints = 0;\n     numberOfOpenComplaints = 0;\n     numberOfTutorComplaints = 0;\n@@ -256,6 +257,8 @@ export class ExerciseAssessmentDashboardComponent implements OnInit, AfterViewIn\n                     this.numberOfSubmissions = this.statsForDashboard.numberOfSubmissions;\n                     this.totalNumberOfAssessments = this.statsForDashboard.totalNumberOfAssessments;\n                     this.numberOfAssessmentsOfCorrectionRounds = this.statsForDashboard.numberOfAssessmentsOfCorrectionRounds;\n+                    this.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = this.statsForDashboard.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound;\n+\n                     this.numberOfComplaints = this.statsForDashboard.numberOfComplaints;\n                     this.numberOfOpenComplaints = this.statsForDashboard.numberOfOpenComplaints;\n                     this.numberOfMoreFeedbackRequests = this.statsForDashboard.numberOfMoreFeedbackRequests;"
  },
  {
    "sha": "8bc3ad947b5a3fe5735e8a9f4232d4e2ab0980bc",
    "filename": "src/main/webapp/app/exercises/shared/exercise/exercise.service.ts",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/exercises/shared/exercise/exercise.service.ts",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/app/exercises/shared/exercise/exercise.service.ts",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/webapp/app/exercises/shared/exercise/exercise.service.ts?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -300,7 +300,7 @@ export class ExerciseService {\n \n     /**\n      * Retrieve a collection of useful statistics for the tutor exercise dashboard of the exercise with the given exerciseId\n-     * @param { number } exerciseId - Id of exercise to retreive the stats for\n+     * @param { number } exerciseId - Id of exercise to retrieve the stats for\n      */\n     getStatsForTutors(exerciseId: number): Observable<HttpResponse<StatsForDashboard>> {\n         return this.http.get<StatsForDashboard>(`${this.resourceUrl}/${exerciseId}/stats-for-assessment-dashboard`, { observe: 'response' });"
  },
  {
    "sha": "cf6b362b40f8a5f16b4fa4d8f581a033b9dde693",
    "filename": "src/main/webapp/i18n/de/exerciseAssessmentDashboard.json",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/i18n/de/exerciseAssessmentDashboard.json",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/i18n/de/exerciseAssessmentDashboard.json",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/webapp/i18n/de/exerciseAssessmentDashboard.json?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -82,6 +82,9 @@\n             \"complaintHint\": \"Zeigt Beschwerden über Bewertungen von anderen Tutoren. Beachte: Beschwerden über deine Bewertungen werden hier nicht angezeigt.\",\n             \"moreFeedbackRequestHint\": \"Zeigt Anfragen für weiteres Feedback von deinen Bewertungen an.\",\n             \"noSubmissionsBecauseOfOtherLockedSubmissions\": \"Alle Einreichungen sind von anderen Tutoren gesperrt.\",\n+            \"noSubmissionsInfo\": \"Es gibt {{freeAssessments}} offenen Abgaben, davon können {{openAssessments}} von dir bewertet werden. {{lockedSubmissionsByOtherTutor}} Abgaben sind von anderen Tutoren gesperrt. \",\n+            \"noSubmissionsInfoSecondCorrectionSingular\": \"Eine Abgabe hat noch keine Erstkorrektur.\",\n+            \"noSubmissionsInfoSecondCorrectionPlural\": \"{{notYetAssessed}} Abgaben haben noch keine Erstkorrektur.\",\n             \"noSubmissionsBecauseFirstAssessedByYourself\": \"Nur Einreichungen die du nicht selbst in der ersten Korrekturrunde bearbeitet hast können korrigiert werden.\"\n         }\n     }"
  },
  {
    "sha": "853a71aa719074f0f1af61a46ca9e20849680a0b",
    "filename": "src/main/webapp/i18n/en/exerciseAssessmentDashboard.json",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/i18n/en/exerciseAssessmentDashboard.json",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/main/webapp/i18n/en/exerciseAssessmentDashboard.json",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/main/webapp/i18n/en/exerciseAssessmentDashboard.json?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -82,6 +82,9 @@\n             \"complaintHint\": \"Shows complaints about assessments of other tutors. Note: complaints about your assessments are not shown here.\",\n             \"moreFeedbackRequestHint\": \"Shows more feedback requests for your assessments.\",\n             \"noSubmissionsBecauseOfOtherLockedSubmissions\": \"All submissions are locked by other tutors or you.\",\n+            \"noSubmissionsInfo\": \"There are {{freeAssessments}} out of {{openAssessments}} open assessments that you can correct. {{lockedSubmissionsByOtherTutor}} submissions are locked by other tutors. \",\n+            \"noSubmissionsInfoSecondCorrectionSingular\": \"{{notYetAssessed}} submission is not yet assessed in the first correction round.\",\n+            \"noSubmissionsInfoSecondCorrectionPlural\": \"{{notYetAssessed}} submissions are not yet assessed in the first correction round.\",\n             \"noSubmissionsBecauseFirstAssessedByYourself\": \"You can only assess submissions in the second correction round, which you have not assessed in the first round.\"\n         }\n     }"
  },
  {
    "sha": "3b41b8028c20f5fc900947d2eac44eeb73bf74f9",
    "filename": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 8,
    "changes": 12,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -1699,8 +1699,7 @@ public void testGetStatsForExamAssessmentDashboard() throws Exception {\n \n         exam = database.addExerciseGroupsAndExercisesToExam(exam, false);\n \n-        var stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        var stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         assertThat(stats.getNumberOfSubmissions()).isInstanceOf(DueDateStat.class);\n         assertThat(stats.getTutorLeaderboardEntries()).isInstanceOf(List.class);\n         assertThat(stats.getNumberOfAssessmentsOfCorrectionRounds()).isInstanceOf(DueDateStat[].class);\n@@ -1758,8 +1757,7 @@ public void testGetStatsForExamAssessmentDashboard() throws Exception {\n         }\n \n         // check the stats again - check the count of submitted submissions\n-        stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         assertThat(stats.getNumberOfAssessmentLocks()).isEqualTo(0L);\n         // 75 = (15 users * 5 exercises); quiz submissions are not counted\n         assertThat(stats.getNumberOfSubmissions().getInTime()).isEqualTo(75L);\n@@ -1791,8 +1789,7 @@ public void testGetStatsForExamAssessmentDashboard() throws Exception {\n             }\n         }\n         // check the stats again\n-        stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         assertThat(stats.getNumberOfAssessmentLocks()).isEqualTo(75L);\n         // 75 = (15 users * 5 exercises); quiz submissions are not counted\n         assertThat(stats.getNumberOfSubmissions().getInTime()).isEqualTo(75L);\n@@ -1817,8 +1814,7 @@ public void testGetStatsForExamAssessmentDashboard() throws Exception {\n         }\n \n         // check the stats again\n-        stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        stats = request.get(\"/api/courses/\" + course.getId() + \"/exams/\" + exam.getId() + \"/stats-for-exam-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         assertThat(stats.getNumberOfAssessmentLocks()).isEqualTo(0L);\n         // 75 = (15 users * 5 exercises); quiz submissions are not counted\n         assertThat(stats.getNumberOfSubmissions().getInTime()).isEqualTo(75L);"
  },
  {
    "sha": "ab3cf9f2282d80e51832d2330dde2c3958b1a3c5",
    "filename": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 12,
    "changes": 21,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -33,7 +33,7 @@\n import de.tum.in.www1.artemis.service.ExerciseService;\n import de.tum.in.www1.artemis.util.FileUtils;\n import de.tum.in.www1.artemis.util.ModelFactory;\n-import de.tum.in.www1.artemis.web.rest.dto.StatsForInstructorDashboardDTO;\n+import de.tum.in.www1.artemis.web.rest.dto.StatsForDashboardDTO;\n \n public class ExerciseIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n@@ -102,15 +102,14 @@ else if (i % 4 == 0) {\n                 database.addResultToSubmission(textSubmission, AssessmentType.SEMI_AUTOMATIC, database.getUserByLogin(\"instructor1\"));\n             }\n         }\n-        StatsForInstructorDashboardDTO statsForInstructorDashboardDTO = request.get(\"/api/exercises/\" + textExercise.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n-        assertThat(statsForInstructorDashboardDTO.getNumberOfSubmissions().getInTime()).isEqualTo(submissions.size() + 1);\n-        assertThat(statsForInstructorDashboardDTO.getTotalNumberOfAssessments().getInTime()).isEqualTo(3);\n-        assertThat(statsForInstructorDashboardDTO.getNumberOfAutomaticAssistedAssessments().getInTime()).isEqualTo(1);\n+        StatsForDashboardDTO statsForDashboardDTO = request.get(\"/api/exercises/\" + textExercise.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n+                StatsForDashboardDTO.class);\n+        assertThat(statsForDashboardDTO.getNumberOfSubmissions().getInTime()).isEqualTo(submissions.size() + 1);\n+        assertThat(statsForDashboardDTO.getTotalNumberOfAssessments().getInTime()).isEqualTo(3);\n+        assertThat(statsForDashboardDTO.getNumberOfAutomaticAssistedAssessments().getInTime()).isEqualTo(1);\n \n         for (Exercise exercise : course.getExercises()) {\n-            StatsForInstructorDashboardDTO stats = request.get(\"/api/exercises/\" + exercise.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                    StatsForInstructorDashboardDTO.class);\n+            StatsForDashboardDTO stats = request.get(\"/api/exercises/\" + exercise.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n             assertThat(stats.getNumberOfComplaints()).isEqualTo(0);\n             assertThat(stats.getNumberOfMoreFeedbackRequests()).isEqualTo(0);\n         }\n@@ -496,8 +495,7 @@ public void testGetStatsForExerciseAssessmentDashboard() throws Exception {\n         for (Course course : courses) {\n             var tutors = findTutors(course);\n             for (Exercise exercise : course.getExercises()) {\n-                StatsForInstructorDashboardDTO stats = request.get(\"/api/exercises/\" + exercise.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                        StatsForInstructorDashboardDTO.class);\n+                StatsForDashboardDTO stats = request.get(\"/api/exercises/\" + exercise.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n                 assertThat(stats.getTotalNumberOfAssessments().getInTime()).as(\"Number of in-time assessments is correct\").isEqualTo(0);\n                 assertThat(stats.getTotalNumberOfAssessments().getLate()).as(\"Number of late assessments is correct\").isEqualTo(0);\n \n@@ -541,8 +539,7 @@ public void testGetStatsForInstructorExerciseDashboard() throws Exception {\n         for (Course course : courses) {\n             var tutors = findTutors(course);\n             for (Exercise exercise : course.getExercises()) {\n-                StatsForInstructorDashboardDTO stats = request.get(\"/api/exercises/\" + exercise.getId() + \"/stats-for-instructor-dashboard\", HttpStatus.OK,\n-                        StatsForInstructorDashboardDTO.class);\n+                StatsForDashboardDTO stats = request.get(\"/api/exercises/\" + exercise.getId() + \"/stats-for-instructor-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n                 assertThat(stats.getTotalNumberOfAssessments().getInTime()).as(\"Number of in-time assessments is correct\").isEqualTo(0);\n                 assertThat(stats.getTotalNumberOfAssessments().getLate()).as(\"Number of late assessments is correct\").isEqualTo(0);\n                 assertThat(stats.getTutorLeaderboardEntries().size()).as(\"Number of tutor leaderboard entries is correct\").isEqualTo(tutors.size());"
  },
  {
    "sha": "db2ea551042018aef75615633fa6814cd30507eb",
    "filename": "src/test/java/de/tum/in/www1/artemis/util/CourseTestService.java",
    "status": "modified",
    "additions": 13,
    "deletions": 21,
    "changes": 34,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/java/de/tum/in/www1/artemis/util/CourseTestService.java",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/java/de/tum/in/www1/artemis/util/CourseTestService.java",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/test/java/de/tum/in/www1/artemis/util/CourseTestService.java?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -36,7 +36,7 @@\n import de.tum.in.www1.artemis.repository.*;\n import de.tum.in.www1.artemis.service.GroupNotificationService;\n import de.tum.in.www1.artemis.service.user.UserService;\n-import de.tum.in.www1.artemis.web.rest.dto.StatsForInstructorDashboardDTO;\n+import de.tum.in.www1.artemis.web.rest.dto.StatsForDashboardDTO;\n \n @Service\n public class CourseTestService {\n@@ -630,8 +630,7 @@ private void getCourseForDashboardWithStats(boolean isInstructor) throws Excepti\n                 }\n             }\n \n-            StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                    StatsForInstructorDashboardDTO.class);\n+            StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n             long numberOfInTimeSubmissions = course.getId().equals(testCourses.get(0).getId()) ? 3 : 0; // course 1 has 3 submissions, course 2 has 0 submissions\n             assertThat(stats.getNumberOfSubmissions().getInTime()).as(\"Number of in-time submissions is correct\").isEqualTo(numberOfInTimeSubmissions);\n             assertThat(stats.getNumberOfSubmissions().getLate()).as(\"Number of latte submissions is correct\").isEqualTo(0);\n@@ -641,8 +640,8 @@ private void getCourseForDashboardWithStats(boolean isInstructor) throws Excepti\n             assertThat(stats.getNumberOfAssessmentsOfCorrectionRounds()[0].getInTime()).isEqualTo(0L);\n             assertThat(stats.getTutorLeaderboardEntries().size()).as(\"Number of tutor leaderboard entries is correct\").isEqualTo(5);\n \n-            StatsForInstructorDashboardDTO stats2 = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-instructor-dashboard\",\n-                    isInstructor ? HttpStatus.OK : HttpStatus.FORBIDDEN, StatsForInstructorDashboardDTO.class);\n+            StatsForDashboardDTO stats2 = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-instructor-dashboard\", isInstructor ? HttpStatus.OK : HttpStatus.FORBIDDEN,\n+                    StatsForDashboardDTO.class);\n \n             if (!isInstructor) {\n                 assertThat(stats2).as(\"Stats for instructor are not available to tutor\").isNull();\n@@ -670,14 +669,14 @@ public void testGetCourseForInstructorDashboardWithStats() throws Exception {\n     public void testGetCourseForInstructorDashboardWithStats_instructorNotInCourse() throws Exception {\n         List<Course> testCourses = database.createCoursesWithExercisesAndLectures(true);\n         request.get(\"/api/courses/\" + testCourses.get(0).getId() + \"/for-assessment-dashboard\", HttpStatus.FORBIDDEN, Course.class);\n-        request.get(\"/api/courses/\" + testCourses.get(0).getId() + \"/stats-for-instructor-dashboard\", HttpStatus.FORBIDDEN, StatsForInstructorDashboardDTO.class);\n+        request.get(\"/api/courses/\" + testCourses.get(0).getId() + \"/stats-for-instructor-dashboard\", HttpStatus.FORBIDDEN, StatsForDashboardDTO.class);\n     }\n \n     // Test\n     public void testGetCourseForAssessmentDashboardWithStats_tutorNotInCourse() throws Exception {\n         List<Course> testCourses = database.createCoursesWithExercisesAndLectures(true);\n         request.get(\"/api/courses/\" + testCourses.get(0).getId() + \"/for-assessment-dashboard\", HttpStatus.FORBIDDEN, Course.class);\n-        request.get(\"/api/courses/\" + testCourses.get(0).getId() + \"/stats-for-assessment-dashboard\", HttpStatus.FORBIDDEN, StatsForInstructorDashboardDTO.class);\n+        request.get(\"/api/courses/\" + testCourses.get(0).getId() + \"/stats-for-assessment-dashboard\", HttpStatus.FORBIDDEN, StatsForDashboardDTO.class);\n     }\n \n     // Test\n@@ -686,8 +685,7 @@ public void testGetAssessmentDashboardStats_withoutAssessments() throws Exceptio\n         // create 6 * 4 = 24 submissions\n         Course testCourse = database.addCourseWithExercisesAndSubmissions(6, 4, 0, 0, true, 0, validModel);\n \n-        StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n \n         var currentTutorLeaderboard = stats.getTutorLeaderboardEntries().get(0);\n         assertThat(currentTutorLeaderboard.getNumberOfTutorComplaints()).isEqualTo(0);\n@@ -704,8 +702,7 @@ public void testGetAssessmentDashboardStats_withoutAssessments() throws Exceptio\n     public void testGetAssessmentDashboardStats_withAssessments() throws Exception {\n         String validModel = FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.json\");\n         Course testCourse = database.addCourseWithExercisesAndSubmissions(6, 4, 2, 0, true, 0, validModel);\n-        StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         // the first two tutors did assess 2 submissions in 2 exercises. The second two only 2 in one exercise.\n         assertThat(stats.getTutorLeaderboardEntries().get(0).getNumberOfAssessments()).isEqualTo(4);\n         assertThat(stats.getTutorLeaderboardEntries().get(1).getNumberOfAssessments()).isEqualTo(4);\n@@ -717,8 +714,7 @@ public void testGetAssessmentDashboardStats_withAssessments() throws Exception {\n     public void testGetAssessmentDashboardStats_withAssessmentsAndComplaints() throws Exception {\n         String validModel = FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.json\");\n         Course testCourse = database.addCourseWithExercisesAndSubmissions(6, 4, 4, 2, true, 0, validModel);\n-        StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         // the first two tutors did assess 2 submissions in 2 exercises. The second two only 2 in one exercise.\n         assertThat(stats.getTutorLeaderboardEntries().get(0).getNumberOfAssessments()).isEqualTo(8);\n         assertThat(stats.getTutorLeaderboardEntries().get(1).getNumberOfAssessments()).isEqualTo(8);\n@@ -740,8 +736,7 @@ public void testGetAssessmentDashboardStats_withAssessmentsAndComplaints() throw\n     public void testGetAssessmentDashboardStats_withAssessmentsAndFeedbackRequests() throws Exception {\n         String validModel = FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.json\");\n         Course testCourse = database.addCourseWithExercisesAndSubmissions(6, 4, 4, 2, false, 0, validModel);\n-        StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         // the first two tutors did assess 2 submissions in 2 exercises. The second two only 2 in one exercise.\n         assertThat(stats.getTutorLeaderboardEntries().get(0).getNumberOfAssessments()).isEqualTo(8);\n         assertThat(stats.getTutorLeaderboardEntries().get(1).getNumberOfAssessments()).isEqualTo(8);\n@@ -763,8 +758,7 @@ public void testGetAssessmentDashboardStats_withAssessmentsAndFeedbackRequests()\n     public void testGetAssessmentDashboardStats_withAssessmentsAndComplaintsAndResponses() throws Exception {\n         String validModel = FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.json\");\n         Course testCourse = database.addCourseWithExercisesAndSubmissions(6, 4, 4, 2, true, 1, validModel);\n-        StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         // the first two tutors did assess 2 submissions in 2 exercises. The second two only 2 in one exercise.\n         assertThat(stats.getTutorLeaderboardEntries().get(0).getNumberOfAssessments()).isEqualTo(8);\n         assertThat(stats.getTutorLeaderboardEntries().get(1).getNumberOfAssessments()).isEqualTo(8);\n@@ -795,8 +789,7 @@ public void testGetAssessmentDashboardStats_withAssessmentsAndComplaintsAndRespo\n     public void testGetAssessmentDashboardStats_withAssessmentsAndFeedBackRequestsAndResponses() throws Exception {\n         String validModel = FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.json\");\n         Course testCourse = database.addCourseWithExercisesAndSubmissions(6, 4, 4, 2, false, 1, validModel);\n-        StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         // the first two tutors did assess 2 submissions in 2 exercises. The second two only 2 in one exercise.\n         assertThat(stats.getTutorLeaderboardEntries().get(0).getNumberOfAssessments()).isEqualTo(8);\n         assertThat(stats.getTutorLeaderboardEntries().get(1).getNumberOfAssessments()).isEqualTo(8);\n@@ -827,8 +820,7 @@ public void testGetAssessmentDashboardStats_withAssessmentsAndFeedBackRequestsAn\n     public void testGetAssessmentDashboardStats_withAssessmentsAndComplaintsAndResponses_Large() throws Exception {\n         String validModel = FileUtils.loadFileFromResources(\"test-data/model-submission/model.54727.json\");\n         Course testCourse = database.addCourseWithExercisesAndSubmissions(9, 8, 8, 5, true, 5, validModel);\n-        StatsForInstructorDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK,\n-                StatsForInstructorDashboardDTO.class);\n+        StatsForDashboardDTO stats = request.get(\"/api/courses/\" + testCourse.getId() + \"/stats-for-assessment-dashboard\", HttpStatus.OK, StatsForDashboardDTO.class);\n         // the first two tutors did assess 8 submissions of 3 exercises. The rest two only 8 of two exercises.\n         assertThat(stats.getTutorLeaderboardEntries().get(0).getNumberOfAssessments()).isEqualTo(3 * 8);\n         assertThat(stats.getTutorLeaderboardEntries().get(1).getNumberOfAssessments()).isEqualTo(2 * 8);"
  },
  {
    "sha": "e7d944c2cfa9f821667c9d197b469d91f76c2597",
    "filename": "src/test/javascript/spec/component/assessment-dashboard/exercise-assessment-dashboard.component.spec.ts",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/ls1intum/Artemis/blob/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/javascript/spec/component/assessment-dashboard/exercise-assessment-dashboard.component.spec.ts",
    "raw_url": "https://github.com/ls1intum/Artemis/raw/397f0afed49b375989568d45b4b9e59e1e05b01b/src/test/javascript/spec/component/assessment-dashboard/exercise-assessment-dashboard.component.spec.ts",
    "contents_url": "https://api.github.com/repos/ls1intum/Artemis/contents/src/test/javascript/spec/component/assessment-dashboard/exercise-assessment-dashboard.component.spec.ts?ref=397f0afed49b375989568d45b4b9e59e1e05b01b",
    "patch": "@@ -156,10 +156,15 @@ describe('ExerciseAssessmentDashboardComponent', () => {\n         { inTime: 1, late: 1 },\n         { inTime: 8, late: 0 },\n     ];\n+    const numberOfLockedAssessmentByOtherTutorsOfCorrectionRound = [\n+        { inTime: 2, late: 0 },\n+        { inTime: 7, late: 0 },\n+    ];\n     const stats = {\n         numberOfSubmissions: { inTime: 12, late: 5 },\n         totalNumberOfAssessments: { inTime: 9, late: 1 },\n         numberOfAssessmentsOfCorrectionRounds,\n+        numberOfLockedAssessmentByOtherTutorsOfCorrectionRound,\n     } as StatsForDashboard;\n     const lockLimitErrorResponse = new HttpErrorResponse({ error: { errorKey: 'lockedSubmissionsLimitReached' } });\n     const router = new MockRouter();\n@@ -308,6 +313,8 @@ describe('ExerciseAssessmentDashboardComponent', () => {\n         sinon.assert.calledWith(modelingSubmissionStubWithoutAssessment.getCall(1), modelingExercise.id, undefined, 1);\n         expect(comp.numberOfAssessmentsOfCorrectionRounds[0].inTime).to.equal(1);\n         expect(comp.numberOfAssessmentsOfCorrectionRounds[1].inTime).to.equal(8);\n+        expect(comp.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound[0].inTime).to.equal(2);\n+        expect(comp.numberOfLockedAssessmentByOtherTutorsOfCorrectionRound[1].inTime).to.equal(7);\n         expect(comp.totalAssessmentPercentage.inTime).to.equal(75);\n         expect(comp.totalAssessmentPercentage.late).to.equal(20);\n         expect(comp.submissionsByCorrectionRound?.get(1)!.length).to.equal(0);"
  }
]
