[
  {
    "sha": "9aeb6c6131e8ede2b7a38b96768bd469c0be581b",
    "filename": "10-java-functional-stream/task03/src/com/example/task03/Task03Main.java",
    "status": "modified",
    "additions": 24,
    "deletions": 1,
    "changes": 25,
    "blob_url": "https://github.com/naumen-student/ulearn-me-course-java/blob/487ec59ace9e90f00e9c7b805ffb2f8e480ad435/10-java-functional-stream/task03/src/com/example/task03/Task03Main.java",
    "raw_url": "https://github.com/naumen-student/ulearn-me-course-java/raw/487ec59ace9e90f00e9c7b805ffb2f8e480ad435/10-java-functional-stream/task03/src/com/example/task03/Task03Main.java",
    "contents_url": "https://api.github.com/repos/naumen-student/ulearn-me-course-java/contents/10-java-functional-stream/task03/src/com/example/task03/Task03Main.java?ref=487ec59ace9e90f00e9c7b805ffb2f8e480ad435",
    "patch": "@@ -1,6 +1,7 @@\n package com.example.task03;\r\n \r\n import java.util.Comparator;\r\n+import java.util.Iterator;\r\n import java.util.function.BiConsumer;\r\n import java.util.stream.Stream;\r\n \r\n@@ -21,7 +22,29 @@ public static void main(String[] args) {\n             Stream<? extends T> stream,\r\n             Comparator<? super T> order,\r\n             BiConsumer<? super T, ? super T> minMaxConsumer) {\r\n+        T minElement = null;\r\n+        T maxElement = null;\r\n+        Iterator<? extends T> iterator = stream.iterator();\r\n \r\n-        // your implementation here\r\n+        boolean isFirst = true;\r\n+\r\n+        while (iterator.hasNext()) {\r\n+            if (isFirst) {\r\n+                T value = iterator.next();\r\n+                minElement = value;\r\n+                maxElement = value;\r\n+                isFirst = false;\r\n+                continue;\r\n+            }\r\n+\r\n+            T value = iterator.next();\r\n+\r\n+            if (order.compare(minElement, value) > 0)\r\n+                minElement = value;\r\n+            if (order.compare(maxElement, value) < 0)\r\n+                maxElement = value;\r\n+        }\r\n+\r\n+        minMaxConsumer.accept(minElement, maxElement);\r\n     }\r\n }\r"
  }
]
