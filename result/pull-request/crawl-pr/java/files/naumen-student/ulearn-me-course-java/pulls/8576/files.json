[
  {
    "sha": "ef0e341cd4da74181efe24b0cf96128fa7ba0ffb",
    "filename": "10-java-functional-stream/task04/src/com/example/task04/Task04Main.java",
    "status": "modified",
    "additions": 25,
    "deletions": 2,
    "changes": 27,
    "blob_url": "https://github.com/naumen-student/ulearn-me-course-java/blob/bff9e2f0b0288424ded9c1677df0db318fe81e6e/10-java-functional-stream/task04/src/com/example/task04/Task04Main.java",
    "raw_url": "https://github.com/naumen-student/ulearn-me-course-java/raw/bff9e2f0b0288424ded9c1677df0db318fe81e6e/10-java-functional-stream/task04/src/com/example/task04/Task04Main.java",
    "contents_url": "https://api.github.com/repos/naumen-student/ulearn-me-course-java/contents/10-java-functional-stream/task04/src/com/example/task04/Task04Main.java?ref=bff9e2f0b0288424ded9c1677df0db318fe81e6e",
    "patch": "@@ -1,10 +1,33 @@\n package com.example.task04;\r\n \r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Scanner;\r\n+import java.util.regex.Pattern;\r\n+\r\n public class Task04Main {\r\n \r\n     public static void main(String[] args) {\r\n-\r\n-        // your implementation here\r\n+        Map<String, Integer> result = new HashMap<>();\r\n+        new Scanner(System.in).useDelimiter(Pattern.compile(\"[.,:;'!?_ \\n\\\\-\\\"]\"))\r\n+                .tokens()\r\n+                .map(String::toLowerCase)\r\n+                .filter(x -> !x.equals(\"\"))\r\n+                .forEach(x -> {\r\n+                    if (result.containsKey(x)) result.put(x, result.get(x) + 1);\r\n+                    else result.put(x, 1);\r\n+                });\r\n+        result\r\n+                .entrySet()\r\n+                .stream()\r\n+                .sorted((x, y) ->\r\n+                        (x.getValue().equals(y.getValue())\r\n+                                ?\r\n+                                CharSequence.compare(x.getKey(), y.getKey())\r\n+                                :\r\n+                                Integer.compare(y.getValue(), x.getValue())))\r\n+                .limit(10)\r\n+                .forEachOrdered(x -> System.out.print(x.getKey() + \"\\n\"));\r\n \r\n     }\r\n \r"
  }
]
