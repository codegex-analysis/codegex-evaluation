[
  {
    "sha": "f9bf944d4c8f4813fa5940d3790b68abc9cbcd28",
    "filename": "10-java-functional-stream/task02/src/com/example/task02/Task02Main.java",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/naumen-student/ulearn-me-course-java/blob/7cd3945c31ca443dd78bc2f26685c07253c972d5/10-java-functional-stream/task02/src/com/example/task02/Task02Main.java",
    "raw_url": "https://github.com/naumen-student/ulearn-me-course-java/raw/7cd3945c31ca443dd78bc2f26685c07253c972d5/10-java-functional-stream/task02/src/com/example/task02/Task02Main.java",
    "contents_url": "https://api.github.com/repos/naumen-student/ulearn-me-course-java/contents/10-java-functional-stream/task02/src/com/example/task02/Task02Main.java?ref=7cd3945c31ca443dd78bc2f26685c07253c972d5",
    "patch": "@@ -5,19 +5,18 @@\n public class Task02Main {\r\n \r\n     public static void main(String[] args) {\r\n-\r\n-        /*\r\n         cycleGrayCode(2)\r\n                 .limit(10)\r\n                 .forEach(System.out::println);\r\n-        */\r\n-\r\n     }\r\n \r\n     public static IntStream cycleGrayCode(int n) {\r\n-\r\n-        return null; // your implementation here\r\n-\r\n+        if (n > 0 && n < 17) {\r\n+            return IntStream.iterate(0, x -> (x + 1) < Math.pow(2, n) ? x + 1 : 0)\r\n+                    .map( x -> x ^ (x >> 1));\r\n+        } else {\r\n+            throw new IllegalArgumentException();\r\n+        }\r\n     }\r\n \r\n }\r"
  }
]
