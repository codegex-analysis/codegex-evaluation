[
  {
    "sha": "6cef8a3640716eec6b61d42276b56fb63d1b18c6",
    "filename": "createBenchmark.sh",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/bipinu/zeebe/blob/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/createBenchmark.sh",
    "raw_url": "https://github.com/bipinu/zeebe/raw/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/createBenchmark.sh",
    "contents_url": "https://api.github.com/repos/bipinu/zeebe/contents/createBenchmark.sh?ref=50d6ed15dcf655ae5f3ec5621e51892e64eb90ce",
    "patch": "@@ -13,7 +13,7 @@ set -exo pipefail\n # 6. Deploy's the benchmark\n \n # Contains OS specific sed function\n-. benchmarks/setup/utils.sh\n+source benchmarks/setup/utils.sh\n \n if [ -z $1 ]\n then\n@@ -22,12 +22,25 @@ then\n fi\n benchmark=$1\n \n+# Check if docker daemon is running\n+if ! docker info >/dev/null 2>&1; then\n+    echo \"Docker daemon does not seem to be running, make sure it's running and retry\"\n+    exit 1\n+fi\n+\n mvn clean install -DskipTests -T1C\n \n docker build --build-arg DISTBALL=dist/target/zeebe-distribution-*.tar.gz --build-arg APP_ENV=dev -t \"gcr.io/zeebe-io/zeebe:$benchmark\" .\n docker push \"gcr.io/zeebe-io/zeebe:$benchmark\"\n \n-cd benchmarks/setup/\n+cd benchmarks/project\n+\n+sed_inplace \"s/:SNAPSHOT/:$benchmark/\" docker-compose.yml\n+docker-compose build\n+docker-compose push\n+git restore -- docker-compose.yml\n+\n+cd ../setup/\n \n ./newBenchmark.sh \"$benchmark\"\n \n@@ -36,5 +49,9 @@ cd \"$benchmark\"\n # calls OS specific sed inplace function\n sed_inplace 's/camunda\\/zeebe/gcr.io\\/zeebe-io\\/zeebe/' zeebe-values.yaml\n sed_inplace \"s/SNAPSHOT/$benchmark/\" zeebe-values.yaml\n+sed_inplace \"s/starter:zeebe/starter:$benchmark/\" starter.yaml\n+sed_inplace \"s/starter:zeebe/starter:$benchmark/\" simpleStarter.yaml\n+sed_inplace \"s/starter:zeebe/starter:$benchmark/\" timer.yaml\n+sed_inplace \"s/worker:zeebe/worker:$benchmark/\" worker.yaml\n \n make zeebe starter worker"
  },
  {
    "sha": "f4e1c3581380985dc7da0487b00ce3a94fb99002",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ProcessingContext.java",
    "status": "modified",
    "additions": 30,
    "deletions": 5,
    "changes": 35,
    "blob_url": "https://github.com/bipinu/zeebe/blob/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ProcessingContext.java",
    "raw_url": "https://github.com/bipinu/zeebe/raw/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ProcessingContext.java",
    "contents_url": "https://api.github.com/repos/bipinu/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ProcessingContext.java?ref=50d6ed15dcf655ae5f3ec5621e51892e64eb90ce",
    "patch": "@@ -8,9 +8,11 @@\n package io.zeebe.engine.processing.streamprocessor;\n \n import io.zeebe.db.TransactionContext;\n+import io.zeebe.engine.processing.bpmn.behavior.TypedStreamWriterProxy;\n import io.zeebe.engine.processing.streamprocessor.writers.CommandResponseWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.EventApplyingStateWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.NoopTypedStreamWriter;\n+import io.zeebe.engine.processing.streamprocessor.writers.ReprocessingStreamWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriterImpl;\n import io.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.Writers;\n@@ -28,10 +30,14 @@\n \n public final class ProcessingContext implements ReadonlyProcessingContext {\n \n+  private final TypedStreamWriterProxy streamWriterProxy = new TypedStreamWriterProxy();\n+  private final ReprocessingStreamWriter reprocessingStreamWriter = new ReprocessingStreamWriter();\n+  private final NoopTypedStreamWriter noopTypedStreamWriter = new NoopTypedStreamWriter();\n+\n   private ActorControl actor;\n   private LogStream logStream;\n   private LogStreamReader logStreamReader;\n-  private TypedStreamWriter logStreamWriter = new NoopTypedStreamWriter();\n+  private TypedStreamWriter logStreamWriter = noopTypedStreamWriter;\n   private CommandResponseWriter commandResponseWriter;\n   private TypedResponseWriterImpl typedResponseWriter;\n \n@@ -47,6 +53,10 @@\n   private int maxFragmentSize;\n   private boolean detectReprocessingInconsistency;\n \n+  public ProcessingContext() {\n+    streamWriterProxy.wrap(logStreamWriter);\n+  }\n+\n   public ProcessingContext actor(final ActorControl actor) {\n     this.actor = actor;\n     return this;\n@@ -154,16 +164,15 @@ public int getMaxFragmentSize() {\n \n   @Override\n   public TypedStreamWriter getLogStreamWriter() {\n-    return logStreamWriter;\n+    return streamWriterProxy;\n   }\n \n   @Override\n   public Writers getWriters() {\n     // todo (#6202): cleanup - revisit after migration is finished\n     // create newly every time, because the specific writers may differ over time\n-    final var stateWriter = new EventApplyingStateWriter(logStreamWriter, eventApplier);\n-\n-    return new Writers(logStreamWriter, stateWriter, typedResponseWriter);\n+    final var stateWriter = new EventApplyingStateWriter(streamWriterProxy, eventApplier);\n+    return new Writers(streamWriterProxy, stateWriter, typedResponseWriter);\n   }\n \n   @Override\n@@ -213,4 +222,20 @@ public ProcessingContext setDetectReprocessingInconsistency(\n     this.detectReprocessingInconsistency = detectReprocessingInconsistency;\n     return this;\n   }\n+\n+  public ReprocessingStreamWriter getReprocessingStreamWriter() {\n+    return reprocessingStreamWriter;\n+  }\n+\n+  public void enableReprocessingStreamWriter() {\n+    streamWriterProxy.wrap(reprocessingStreamWriter);\n+  }\n+\n+  public void enableLogStreamWriter() {\n+    streamWriterProxy.wrap(logStreamWriter);\n+  }\n+\n+  public void disableLogStreamWriter() {\n+    streamWriterProxy.wrap(noopTypedStreamWriter);\n+  }\n }"
  },
  {
    "sha": "5d3422f4bd6cb4922f9b98ea62cb460919abc976",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/bipinu/zeebe/blob/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java",
    "raw_url": "https://github.com/bipinu/zeebe/raw/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java",
    "contents_url": "https://api.github.com/repos/bipinu/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java?ref=50d6ed15dcf655ae5f3ec5621e51892e64eb90ce",
    "patch": "@@ -125,7 +125,7 @@\n           );\n \n   private final LogStreamReader logStreamReader;\n-  private final ReprocessingStreamWriter reprocessingStreamWriter = new ReprocessingStreamWriter();\n+  private final ReprocessingStreamWriter reprocessingStreamWriter;\n   private final TypedResponseWriter noopResponseWriter = new NoopResponseWriter();\n   private final EventApplier eventApplier;\n \n@@ -167,6 +167,7 @@ public ReProcessingStateMachine(final ProcessingContext context) {\n     updateStateRetryStrategy = new EndlessRetryStrategy(actor);\n     processRetryStrategy = new EndlessRetryStrategy(actor);\n     detectReprocessingInconsistency = context.isDetectReprocessingInconsistency();\n+    reprocessingStreamWriter = context.getReprocessingStreamWriter();\n   }\n \n   /**"
  },
  {
    "sha": "303489f3e6b1284e2924739080dc161124245cf9",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/StreamProcessor.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/bipinu/zeebe/blob/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/StreamProcessor.java",
    "raw_url": "https://github.com/bipinu/zeebe/raw/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/StreamProcessor.java",
    "contents_url": "https://api.github.com/repos/bipinu/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/StreamProcessor.java?ref=50d6ed15dcf655ae5f3ec5621e51892e64eb90ce",
    "patch": "@@ -122,6 +122,10 @@ protected void onActorStarted() {\n       final ReProcessingStateMachine reProcessingStateMachine =\n           new ReProcessingStateMachine(processingContext);\n \n+      // disable writing to the log stream but for reprocessing checks\n+      processingContext.disableLogStreamWriter();\n+      processingContext.enableReprocessingStreamWriter();\n+\n       recoverFuture = reProcessingStateMachine.startRecover(snapshotPosition);\n \n       actor.runOnCompletion(\n@@ -280,6 +284,10 @@ private ZeebeDbState recoverState() {\n \n   private void onRecovered(final long lastReprocessedPosition) {\n     phase = Phase.PROCESSING;\n+\n+    // enable writing records to the stream\n+    processingContext.enableLogStreamWriter();\n+\n     onCommitPositionUpdatedCondition =\n         actor.onCondition(\n             getName() + \"-on-commit-position-updated\", processingStateMachine::readNextEvent);"
  },
  {
    "sha": "b6d84da1a657cc6cb3e4e436080fad5861028843",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/job/JobTimeoutTriggerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/bipinu/zeebe/blob/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/test/java/io/zeebe/engine/processing/job/JobTimeoutTriggerTest.java",
    "raw_url": "https://github.com/bipinu/zeebe/raw/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/test/java/io/zeebe/engine/processing/job/JobTimeoutTriggerTest.java",
    "contents_url": "https://api.github.com/repos/bipinu/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/job/JobTimeoutTriggerTest.java?ref=50d6ed15dcf655ae5f3ec5621e51892e64eb90ce",
    "patch": "@@ -44,6 +44,7 @@ public void setUp() {\n \n     final ProcessingContext processingContext =\n         new ProcessingContext().actor(someActor).logStreamWriter(typedStreamWriter);\n+    processingContext.enableLogStreamWriter();\n     jobTimeoutTrigger.onRecovered(processingContext);\n \n     jobState.activate(0, newJobRecord());"
  },
  {
    "sha": "2619f2474cfe9dd196faa0a9ba138b98b76c1f76",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 32,
    "changes": 41,
    "blob_url": "https://github.com/bipinu/zeebe/blob/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java",
    "raw_url": "https://github.com/bipinu/zeebe/raw/50d6ed15dcf655ae5f3ec5621e51892e64eb90ce/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java",
    "contents_url": "https://api.github.com/repos/bipinu/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java?ref=50d6ed15dcf655ae5f3ec5621e51892e64eb90ce",
    "patch": "@@ -183,8 +183,7 @@ private StreamProcessor getErrorProneStreamProcessor() {\n         streamProcessorRule.startTypedStreamProcessor(\n             processingContext -> {\n               final MutableZeebeState zeebeState = processingContext.getZeebeState();\n-              mockedLogStreamWriter =\n-                  new WrappedStreamWriter(processingContext.getLogStreamWriter());\n+              mockedLogStreamWriter = new WrappedStreamWriter();\n               processingContext.logStreamWriter(mockedLogStreamWriter);\n               return processors(zeebeState.getKeyGenerator(), processingContext.getWriters())\n                   .onEvent(\n@@ -230,40 +229,27 @@ public boolean hasHealthStatus(final HealthStatus healthStatus) {\n \n   private final class WrappedStreamWriter implements TypedStreamWriter {\n \n-    private final TypedStreamWriter wrappedWriter;\n-\n-    private WrappedStreamWriter(final TypedStreamWriter wrappedWriter) {\n-      this.wrappedWriter = wrappedWriter;\n-    }\n-\n     @Override\n     public void appendRejection(\n         final TypedRecord<? extends RecordValue> command,\n         final RejectionType type,\n-        final String reason) {\n-      wrappedWriter.appendRejection(command, type, reason);\n-    }\n+        final String reason) {}\n \n     @Override\n     public void appendRejection(\n         final TypedRecord<? extends RecordValue> command,\n         final RejectionType type,\n         final String reason,\n-        final UnaryOperator<RecordMetadata> modifier) {\n-      wrappedWriter.appendRejection(command, type, reason, modifier);\n-    }\n+        final UnaryOperator<RecordMetadata> modifier) {}\n \n     @Override\n-    public void configureSourceContext(final long sourceRecordPosition) {\n-      wrappedWriter.configureSourceContext(sourceRecordPosition);\n-    }\n+    public void configureSourceContext(final long sourceRecordPosition) {}\n \n     @Override\n     public void appendFollowUpEvent(final long key, final Intent intent, final RecordValue value) {\n       if (shouldFailErrorHandlingInTransaction.get()) {\n         throw new RuntimeException(\"Expected failure on append followup event\");\n       }\n-      wrappedWriter.appendFollowUpEvent(key, intent, value);\n     }\n \n     @Override\n@@ -275,40 +261,31 @@ public void appendFollowUpEvent(\n       if (shouldFailErrorHandlingInTransaction.get()) {\n         throw new RuntimeException(\"Expected failure on append followup event\");\n       }\n-      wrappedWriter.appendFollowUpEvent(key, intent, value, modifier);\n     }\n \n     @Override\n-    public void appendNewCommand(final Intent intent, final RecordValue value) {\n-      wrappedWriter.appendNewCommand(intent, value);\n-    }\n+    public void appendNewCommand(final Intent intent, final RecordValue value) {}\n \n     @Override\n     public void appendFollowUpCommand(\n-        final long key, final Intent intent, final RecordValue value) {\n-      wrappedWriter.appendFollowUpCommand(key, intent, value);\n-    }\n+        final long key, final Intent intent, final RecordValue value) {}\n \n     @Override\n     public void appendFollowUpCommand(\n         final long key,\n         final Intent intent,\n         final RecordValue value,\n-        final UnaryOperator<RecordMetadata> modifier) {\n-      wrappedWriter.appendFollowUpCommand(key, intent, value, modifier);\n-    }\n+        final UnaryOperator<RecordMetadata> modifier) {}\n \n     @Override\n-    public void reset() {\n-      wrappedWriter.reset();\n-    }\n+    public void reset() {}\n \n     @Override\n     public long flush() {\n       if (shouldFlushThrowException.get()) {\n         throw new RuntimeException(\"Expected failure on flush\");\n       }\n-      return wrappedWriter.flush();\n+      return 1L;\n     }\n   }\n }"
  }
]
