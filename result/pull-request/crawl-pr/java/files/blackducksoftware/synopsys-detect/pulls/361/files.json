[
  {
    "sha": "7320cedbee0aec9aa0ddfee58b238362f33a4d23",
    "filename": "common/src/main/java/com/synopsys/integration/common/util/finder/FileFinder.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/common/src/main/java/com/synopsys/integration/common/util/finder/FileFinder.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/common/src/main/java/com/synopsys/integration/common/util/finder/FileFinder.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/common/src/main/java/com/synopsys/integration/common/util/finder/FileFinder.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -12,6 +12,7 @@\n import java.util.List;\n import java.util.function.Predicate;\n \n+import org.apache.commons.io.filefilter.WildcardFileFilter;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n@@ -80,6 +81,12 @@ default File findFile(final File directoryToSearch, final String filenamePattern\n     }\n \n     @NotNull\n-    List<File> findFiles(File directoryToSearch, List<String> filenamePatterns, int depth, boolean findInsideMatchingDirectories);\n+    default List<File> findFiles(final File directoryToSearch, final List<String> filenamePatterns, final int depth, final boolean findInsideMatchingDirectories) {\n+        Predicate<File> wildcardFilter = file -> {\n+            WildcardFileFilter filter = new WildcardFileFilter(filenamePatterns);\n+            return filter.accept(file);\n+        };\n+        return findFiles(directoryToSearch, wildcardFilter, depth, findInsideMatchingDirectories);\n+    }\n \n }"
  },
  {
    "sha": "570eb4428b315b749dcef870ad10dd1504cd0d9a",
    "filename": "common/src/main/java/com/synopsys/integration/common/util/finder/SimpleFileFinder.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 11,
    "changes": 12,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/common/src/main/java/com/synopsys/integration/common/util/finder/SimpleFileFinder.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/common/src/main/java/com/synopsys/integration/common/util/finder/SimpleFileFinder.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/common/src/main/java/com/synopsys/integration/common/util/finder/SimpleFileFinder.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -16,7 +16,7 @@\n import org.apache.commons.io.filefilter.WildcardFileFilter;\n import org.jetbrains.annotations.NotNull;\n \n-public class WildcardFileFinder implements FileFinder {\n+public class SimpleFileFinder implements FileFinder {\n     @NotNull\n     @Override\n     public List<File> findFiles(final File directoryToSearch, final Predicate<File> filter, final int depth, final boolean findInsideMatchingDirectories) {\n@@ -46,14 +46,4 @@\n         return foundFiles;\n     }\n \n-    @NotNull\n-    @Override\n-    public List<File> findFiles(final File directoryToSearch, final List<String> filenamePatterns, final int depth, final boolean findInsideMatchingDirectories) {\n-        Predicate<File> wildcardFilter = file -> {\n-            WildcardFileFilter filter = new WildcardFileFilter(filenamePatterns);\n-            return filter.accept(file);\n-        };\n-        return findFiles(directoryToSearch, wildcardFilter, depth, findInsideMatchingDirectories);\n-    }\n-\n }",
    "previous_filename": "common/src/main/java/com/synopsys/integration/common/util/finder/WildcardFileFinder.java"
  },
  {
    "sha": "c22adcd4a4a98fba88de0f2ff19754dfdfbae534",
    "filename": "common/src/test/java/com/synopsys/integration/common/test/util/finder/SimpleFileFinderTest.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/common/src/test/java/com/synopsys/integration/common/test/util/finder/SimpleFileFinderTest.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/common/src/test/java/com/synopsys/integration/common/test/util/finder/SimpleFileFinderTest.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/common/src/test/java/com/synopsys/integration/common/test/util/finder/SimpleFileFinderTest.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -41,15 +41,15 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.condition.DisabledOnOs;\n \n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n+import com.synopsys.integration.common.util.finder.SimpleFileFinder;\n \n-public class WildcardFileFinderTest {\n+public class SimpleFileFinderTest {\n \n     private static Path initialDirectoryPath;\n \n     @BeforeEach\n     public void setup() throws IOException {\n-        initialDirectoryPath = Files.createTempDirectory(\"WildcardFileFinderTest\");\n+        initialDirectoryPath = Files.createTempDirectory(\"SimpleFileFinderTest\");\n     }\n \n     @AfterEach\n@@ -78,7 +78,7 @@ public void testSymlinksNotFollowed() throws IOException {\n         final File regularFile = new File(subDir, \"regularFile\");\n         regularFile.createNewFile();\n \n-        final WildcardFileFinder finder = new WildcardFileFinder();\n+        final SimpleFileFinder finder = new SimpleFileFinder();\n         final List<String> filenamePatterns = Arrays.asList(\"sub\", \"linkToInitial\", \"regularDir\", \"regularFile\");\n         final List<File> foundFiles = finder.findFiles(initialDirectoryPath.toFile(), filenamePatterns, 10);\n \n@@ -100,7 +100,7 @@ public void testFindWithPredicate() throws IOException {\n         File subDirChild2 = new File(subDir2, \"child\");\n         subDirChild2.createNewFile();\n \n-        WildcardFileFinder fileFinder = new WildcardFileFinder();\n+        SimpleFileFinder fileFinder = new SimpleFileFinder();\n         Predicate<File> filter = file -> file.getName().startsWith(\"sub\");\n         List<File> foundFiles = fileFinder.findFiles(initialDirectoryPath.toFile(), filter, 10);\n ",
    "previous_filename": "common/src/test/java/com/synopsys/integration/common/test/util/finder/WildcardFileFinderTest.java"
  },
  {
    "sha": "0cd43cee165c3ca296225ddb86ad419b07c8b837",
    "filename": "detectable/src/test/java/com/synopsys/integration/detectable/functional/DetectableFunctionalTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detectable/src/test/java/com/synopsys/integration/detectable/functional/DetectableFunctionalTest.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detectable/src/test/java/com/synopsys/integration/detectable/functional/DetectableFunctionalTest.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/detectable/src/test/java/com/synopsys/integration/detectable/functional/DetectableFunctionalTest.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -40,7 +40,7 @@\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n+import com.synopsys.integration.common.util.finder.SimpleFileFinder;\n import com.synopsys.integration.detectable.Detectable;\n import com.synopsys.integration.detectable.DetectableEnvironment;\n import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n@@ -82,7 +82,7 @@ protected DetectableFunctionalTest(@NotNull final String name) throws IOExceptio\n \n         this.executableRunner = new FunctionalDetectableExecutableRunner();\n \n-        final FileFinder fileFinder = new WildcardFileFinder();\n+        final FileFinder fileFinder = new SimpleFileFinder();\n         final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n         final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n         this.detectableFactory = new DetectableFactory(fileFinder, executableRunner, externalIdFactory, gson);"
  },
  {
    "sha": "0e7ab99e4d5a1b4e0ae195307fa8388025bb2682",
    "filename": "detector/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detector/build.gradle",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detector/build.gradle",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/detector/build.gradle?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -1,3 +1,4 @@\n dependencies {\n     implementation project(':detectable')\n+    implementation project(':common')\n }"
  },
  {
    "sha": "8df5bbd38ed5331e59d59c4336b971e43d47f787",
    "filename": "detector/src/main/java/com/synopsys/integration/detector/finder/DetectorFinder.java",
    "status": "modified",
    "additions": 7,
    "deletions": 21,
    "changes": 28,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detector/src/main/java/com/synopsys/integration/detector/finder/DetectorFinder.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detector/src/main/java/com/synopsys/integration/detector/finder/DetectorFinder.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/detector/src/main/java/com/synopsys/integration/detector/finder/DetectorFinder.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -8,33 +8,30 @@\n package com.synopsys.integration.detector.finder;\n \n import java.io.File;\n-import java.io.IOException;\n+import java.io.FileFilter;\n import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Predicate;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.detector.base.DetectorEvaluation;\n import com.synopsys.integration.detector.base.DetectorEvaluationTree;\n import com.synopsys.integration.detector.rule.DetectorRuleSet;\n \n public class DetectorFinder {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n-    public Optional<DetectorEvaluationTree> findDetectors(final File initialDirectory, final DetectorRuleSet detectorRuleSet, final DetectorFinderOptions options) throws DetectorFinderDirectoryListException {\n-        return findDetectors(initialDirectory, detectorRuleSet, 0, options);\n+    public Optional<DetectorEvaluationTree> findDetectors(final File initialDirectory, final DetectorRuleSet detectorRuleSet, final DetectorFinderOptions options, FileFinder fileFinder) {\n+        return findDetectors(initialDirectory, detectorRuleSet, 0, options, fileFinder);\n     }\n \n-    private Optional<DetectorEvaluationTree> findDetectors(final File directory, final DetectorRuleSet detectorRuleSet, final int depth, final DetectorFinderOptions options)\n-        throws DetectorFinderDirectoryListException {\n+    private Optional<DetectorEvaluationTree> findDetectors(final File directory, final DetectorRuleSet detectorRuleSet, final int depth, final DetectorFinderOptions options, FileFinder fileFinder) {\n \n         if (depth > options.getMaximumDepth()) {\n             logger.trace(\"Skipping directory as it exceeds max depth: \" + directory.toString());\n@@ -54,23 +51,12 @@\n \n         final Set<DetectorEvaluationTree> children = new HashSet<>();\n \n-        final List<File> subDirectories = findFilteredSubDirectories(directory, options.getFileFilter());\n+        final List<File> subDirectories = fileFinder.findFiles(directory, options.getFileFilter());\n         for (final File subDirectory : subDirectories) {\n-            final Optional<DetectorEvaluationTree> childEvaluationSet = findDetectors(subDirectory, detectorRuleSet, depth + 1, options);\n+            final Optional<DetectorEvaluationTree> childEvaluationSet = findDetectors(subDirectory, detectorRuleSet, depth + 1, options, fileFinder);\n             childEvaluationSet.ifPresent(children::add);\n         }\n \n         return Optional.of(new DetectorEvaluationTree(directory, depth, detectorRuleSet, evaluations, children));\n     }\n-\n-    private List<File> findFilteredSubDirectories(final File directory, final Predicate<File> filePredicate) throws DetectorFinderDirectoryListException {\n-        try (final Stream<Path> pathStream = Files.list(directory.toPath())) {\n-            return pathStream.map(Path::toFile)\n-                       .filter(File::isDirectory)\n-                       .filter(filePredicate)\n-                       .collect(Collectors.toList());\n-        } catch (final IOException e) {\n-            throw new DetectorFinderDirectoryListException(String.format(\"Could not get the subdirectories for %s. %s\", directory.getAbsolutePath(), e.getMessage()), e);\n-        }\n-    }\n }"
  },
  {
    "sha": "60d22d498ffd68355b3d5e7f399b7e02feb97fd0",
    "filename": "detector/src/test/java/com/synopsys/integration/detector/finder/DetectorFinderTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detector/src/test/java/com/synopsys/integration/detector/finder/DetectorFinderTest.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/detector/src/test/java/com/synopsys/integration/detector/finder/DetectorFinderTest.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/detector/src/test/java/com/synopsys/integration/detector/finder/DetectorFinderTest.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -44,6 +44,7 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.condition.DisabledOnOs;\n \n+import com.synopsys.integration.common.util.finder.SimpleFileFinder;\n import com.synopsys.integration.detector.base.DetectorEvaluationTree;\n import com.synopsys.integration.detector.rule.DetectorRuleSet;\n \n@@ -85,7 +86,7 @@ public void testSimple() throws DetectorFinderDirectoryListException {\n         final DetectorFinderOptions options = new DetectorFinderOptions(fileFilter, maximumDepth);\n \n         final DetectorFinder finder = new DetectorFinder();\n-        final Optional<DetectorEvaluationTree> tree = finder.findDetectors(initialDirectory, detectorRuleSet, options);\n+        final Optional<DetectorEvaluationTree> tree = finder.findDetectors(initialDirectory, detectorRuleSet, options, new SimpleFileFinder());\n \n         // make sure both dirs were found\n         final Set<DetectorEvaluationTree> testDirs = tree.get().getChildren();\n@@ -124,7 +125,7 @@ public void testSymLinksNotFollowed() throws IOException, DetectorFinderDirector\n         final DetectorFinderOptions options = new DetectorFinderOptions(fileFilter, maximumDepth);\n \n         final DetectorFinder finder = new DetectorFinder();\n-        final Optional<DetectorEvaluationTree> tree = finder.findDetectors(initialDirectory, detectorRuleSet, options);\n+        final Optional<DetectorEvaluationTree> tree = finder.findDetectors(initialDirectory, detectorRuleSet, options, new SimpleFileFinder());\n \n         // make sure the symlink was omitted from results\n         //        final Set<DetectorEvaluationTree> subDirResults = tree.get().getChildren().iterator().next().getChildren();"
  },
  {
    "sha": "eee65276bd83a54dbfdc2221fad7747f368e7c72",
    "filename": "docs/templates/content/90-releasenotes.ftl",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/docs/templates/content/90-releasenotes.ftl",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/docs/templates/content/90-releasenotes.ftl",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/docs/templates/content/90-releasenotes.ftl?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -3,6 +3,8 @@\n ## Version 7.0.0\n ### New Features\n * Added support for the dependency graph SBT plugin. Resolution cache generation is no longer a requirement of the SBT detector.\n+* Added the properties [detect.excluded.directories](../properties/configuration/paths/#detect-excluded-directories-advanced), [detect.exclude.default.directories](../properties/configuration/paths/#detect-exclude-default-directories-advanced), and [detect.excluded.directory.search.depth](../properties/configuration/signature scanner/#detect-excluded-directory-search-depth) to handle exclusions for detector search and signature scanning.\n+* Added ability to specify excluded directory paths using [glob patterns](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/FileSystem.html#getPathMatcher(java.lang.String)).\n * Added properties [detect.lerna.excluded.packages](../properties/detectors/lerna/#lerna-packages-excluded-advanced) and [detect.lerna.included.packages](../properties/detectors/lerna/#lerna-packages-included-advanced) to exclude and include specific Lerna packages.\n \n ### Changed features"
  },
  {
    "sha": "c0ae0dff4aa6a568944edbb55ac647e93a4627cc",
    "filename": "docs/templates/content/advanced/detect-exclusion.ftl",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/docs/templates/content/advanced/detect-exclusion.ftl",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/docs/templates/content/advanced/detect-exclusion.ftl",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/docs/templates/content/advanced/detect-exclusion.ftl?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -0,0 +1,45 @@\n+# Exclusions in Detect\n+\n+## Directory Exclusions\n+\n+Use [detect.excluded.directories](../../properties/configuration/paths/#detect-excluded-directories-advanced) to exclude directories from search when looking for detectors, and when finding paths to pass to the signature scanner as values for a '--exclude' flag.\n+\n+### Exclude directories by name\n+\n+This property accepts explicit directory names, as well as globbing-style wildcard patterns. See [here](../includeexcludewildcards/#property-wildcard-support) for more info.\n+\n+### Exclude directories by path\n+\n+This property accepts explicit paths relative to the project's root, or you may specify glob-style patterns.\n+\n+Examples\n+\n+* --detect.excluded.directories=bar excludes /root/bar but not /root/foo/bar\n+* --detect.excluded.directories=**/foo/bar excludes /root/dir/foo/bar, /root/otherDir/foo/bar but not /foo/bar/dir\n+* --detect.excluded.directories=/root/d*/* excludes /root/dir/foo, /root/directory/bar but not /root/dir/foo/bar\n+\n+${solution_name} uses FileSystem::getPatchMatcher and its glob syntax implementation to exclude path patterns. See [here](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/FileSystem.html#getPathMatcher(java.lang.String)) for more info.\n+\n+### Related properties:\n+\n+* [detect.exclude.default.directories](../../properties/configuration/paths/#detect-exclude-default-directories-advanced)\n+* [detect.excluded.directory.search.depth](../../properties/configuration/signature scanner/#detect-excluded-directory-search-depth)\n+\n+## Package Manager Exclusions\n+\n+If you wish to specify package manager-specific exclusions you may do so using the following properties:\n+\n+* [detect.gradle.included.configurations](../../properties/detectors/gradle/#gradle-include-configurations-advanced)\n+* [detect.gradle.excluded.configurations](../../properties/detectors/gradle/#gradle-exclude-configurations-advanced)\n+* [detect.gradle.included.projects](../../properties/detectors/gradle/#gradle-include-projects-advanced)\n+* [detect.gradle.excluded.projects](../../properties/detectors/gradle/#gradle-exclude-projects-advanced)\n+* [detect.lerna.included.packages](../../properties/detectors/lerna/#lerna-packages-included-advanced)\n+* [detect.lerna.excluded.packages](../../properties/detectors/lerna/#lerna-packages-excluded-advanced)\n+* [detect.maven.included.scopes](../../properties/detectors/maven/#dependency-scope-included)\n+* [detect.maven.excluded.scopes](../../properties/detectors/maven/#dependency-scope-excluded)\n+* [detect.maven.included.modules](../../properties/detectors/maven/#maven-modules-included-advanced)\n+* [detect.maven.excluded.modules](../../properties/detectors/maven/#maven-modules-excluded-advanced)\n+* [detect.nuget.included.modules](../../properties/detectors/nuget/#nuget-modules-included-advanced)\n+* [detect.nuget.excluded.modules](../../properties/detectors/nuget/#nuget-projects-excluded-advanced)\n+* [detect.sbt.included.configurations](../../properties/detectors/sbt/#sbt-configurations-included-deprecated)\n+* [detect.sbt.excluded.configurations](../../properties/detectors/sbt/#sbt-configurations-excluded-deprecated)\n\\ No newline at end of file"
  },
  {
    "sha": "1336be7663e5cf77bcaafa52923daede00c01649",
    "filename": "docs/templates/content/advanced/includeexcludewildcards.ftl",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/docs/templates/content/advanced/includeexcludewildcards.ftl",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/docs/templates/content/advanced/includeexcludewildcards.ftl",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/docs/templates/content/advanced/includeexcludewildcards.ftl?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -12,10 +12,10 @@ The values of the following ${solution_name} properties can utilize filename glo\n * detect.gradle.excluded.configurations\n * detect.gradle.included.projects\n * detect.gradle.excluded.projects\n-* detect.blackduck.signature.scanner.exclusion.name.patterns\n * detect.binary.scan.file.name.patterns\n * detect.lerna.included.packages\n * detect.lerna.excluded.packages\n+* detect.excluded.directories\n \n The supported wildcards and their effect are:\n "
  },
  {
    "sha": "04a1e873498b37e8d443e3575b541aa04f6b8e7c",
    "filename": "src/main/java/com/synopsys/integration/detect/Application.java",
    "status": "modified",
    "additions": 10,
    "deletions": 6,
    "changes": 16,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/Application.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/Application.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/Application.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -23,6 +23,8 @@\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.common.util.finder.FileFinder;\n+import com.synopsys.integration.common.util.finder.SimpleFileFinder;\n import com.synopsys.integration.detect.configuration.DetectInfo;\n import com.synopsys.integration.detect.configuration.DetectInfoUtility;\n import com.synopsys.integration.detect.lifecycle.DetectContext;\n@@ -99,20 +101,22 @@ public void run(ApplicationArguments applicationArguments) {\n \n         Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n         DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n+        FileFinder fileFinder = new SimpleFileFinder();\n         detectContext.registerBean(gson);\n         detectContext.registerBean(detectInfo);\n+        detectContext.registerBean(fileFinder);\n \n         boolean printOutput = true;\n         boolean shouldForceSuccess = false;\n \n-        Optional<DetectBootResult> detectBootResultOptional = bootApplication(detectRun, applicationArguments.getSourceArgs(), eventSystem, detectContext, exitCodeManager, gson, detectInfo);\n+        Optional<DetectBootResult> detectBootResultOptional = bootApplication(detectRun, applicationArguments.getSourceArgs(), eventSystem, detectContext, exitCodeManager, gson, detectInfo, fileFinder);\n \n         if (detectBootResultOptional.isPresent()) {\n             DetectBootResult detectBootResult = detectBootResultOptional.get();\n             printOutput = detectBootResult.shouldPrintOutput();\n             shouldForceSuccess = detectBootResult.shouldForceSuccess();\n \n-            runApplication(detectContext, detectRun, eventSystem, exitCodeManager, detectBootResult);\n+            runApplication(detectContext, detectRun, eventSystem, exitCodeManager, detectBootResult, fileFinder);\n \n             //Create status output file.\n             logger.info(\"\");\n@@ -129,12 +133,12 @@ public void run(ApplicationArguments applicationArguments) {\n         exitApplication(exitManager, startTime, printOutput, shouldForceSuccess);\n     }\n \n-    private Optional<DetectBootResult> bootApplication(DetectRun detectRun, String[] sourceArgs, EventSystem eventSystem, DetectContext detectContext, ExitCodeManager exitCodeManager, Gson gson, DetectInfo detectInfo) {\n+    private Optional<DetectBootResult> bootApplication(DetectRun detectRun, String[] sourceArgs, EventSystem eventSystem, DetectContext detectContext, ExitCodeManager exitCodeManager, Gson gson, DetectInfo detectInfo, FileFinder fileFinder) {\n         Optional<DetectBootResult> bootResult = Optional.empty();\n         try {\n             logger.debug(\"Detect boot begin.\");\n \n-            DetectBootFactory detectBootFactory = new DetectBootFactory(detectRun, detectInfo, gson, eventSystem);\n+            DetectBootFactory detectBootFactory = new DetectBootFactory(detectRun, detectInfo, gson, eventSystem, fileFinder);\n             DetectBoot detectBoot = detectBootFactory.createDetectBoot(detectBootFactory.createPropertySourcesFromEnvironment(environment), sourceArgs, detectContext);\n             bootResult = detectBoot.boot(detectInfo.getDetectVersion());\n \n@@ -146,14 +150,14 @@ public void run(ApplicationArguments applicationArguments) {\n         return bootResult;\n     }\n \n-    private void runApplication(DetectContext detectContext, DetectRun detectRun, EventSystem eventSystem, ExitCodeManager exitCodeManager, DetectBootResult detectBootResult) {\n+    private void runApplication(DetectContext detectContext, DetectRun detectRun, EventSystem eventSystem, ExitCodeManager exitCodeManager, DetectBootResult detectBootResult, FileFinder fileFinder) {\n         Optional<ProductRunData> optionalProductRunData = detectBootResult.getProductRunData();\n         if (detectBootResult.getBootType() == DetectBootResult.BootType.RUN && optionalProductRunData.isPresent()) {\n             try {\n                 logger.debug(\"Detect will attempt to run.\");\n                 ProductRunData productRunData = optionalProductRunData.get();\n                 RunManager runManager = new RunManager();\n-                RunContext runContext = new RunContext(detectContext, productRunData);\n+                RunContext runContext = new RunContext(detectContext, productRunData, fileFinder);\n                 runManager.run(runContext);\n             } catch (Exception e) {\n                 if (e.getMessage() != null) {"
  },
  {
    "sha": "5a6601fe0565cec6e3839c46a4f373ff3b6c7f16",
    "filename": "src/main/java/com/synopsys/integration/detect/RunBeanConfiguration.java",
    "status": "modified",
    "additions": 9,
    "deletions": 18,
    "changes": 27,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/RunBeanConfiguration.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/RunBeanConfiguration.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/RunBeanConfiguration.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -9,6 +9,7 @@\n \n import java.io.File;\n import java.util.Optional;\n+import java.util.function.Predicate;\n \n import javax.xml.parsers.DocumentBuilder;\n \n@@ -60,7 +61,6 @@\n import com.synopsys.integration.detect.workflow.file.DirectoryManager;\n import com.synopsys.integration.detectable.detectable.executable.DetectableExecutableRunner;\n import com.synopsys.integration.common.util.finder.FileFinder;\n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n import com.synopsys.integration.detectable.detectable.inspector.GradleInspectorResolver;\n import com.synopsys.integration.detectable.detectable.inspector.PipInspectorResolver;\n import com.synopsys.integration.detectable.detectable.inspector.nuget.NugetInspectorResolver;\n@@ -88,23 +88,14 @@\n     public DocumentBuilder documentBuilder;\n     @Autowired\n     public DetectableOptionFactory detectableOptionFactory;\n+    @Autowired\n+    public FileFinder fileFinder;\n \n     @Bean\n     public ExternalIdFactory externalIdFactory() {\n         return new ExternalIdFactory();\n     }\n \n-    @Bean\n-    public FileFinder fullFileFinder() {\n-        return new WildcardFileFinder();\n-    }\n-\n-    //Be mindful of using this file finder, it filters based on detector exclusions, it's VERY DIFFERENT from the FULL file finder above.\n-    @Bean\n-    public FileFinder filteredFileFinder() {\n-        return detectConfigurationFactory.createFilteredFileFinder(directoryManager.getSourceDirectory().toPath());\n-    }\n-\n     @Bean\n     public ConnectionFactory connectionFactory() throws DetectUserFriendlyException {\n         return new ConnectionFactory(detectConfigurationFactory.createConnectionDetails());\n@@ -154,7 +145,7 @@ public DetectableExecutableRunner executableRunner() {\n \n     @Bean\n     public DirectoryExecutableFinder directoryExecutableFinder() {\n-        return DirectoryExecutableFinder.forCurrentOperatingSystem(fullFileFinder());\n+        return DirectoryExecutableFinder.forCurrentOperatingSystem(fileFinder);\n     }\n \n     @Bean\n@@ -171,7 +162,7 @@ public DetectExecutableResolver detectExecutableResolver() {\n     @Bean\n     public DockerInspectorResolver dockerInspectorResolver() throws DetectUserFriendlyException {\n         DockerInspectorInstaller dockerInspectorInstaller = new DockerInspectorInstaller(artifactResolver());\n-        return new ArtifactoryDockerInspectorResolver(directoryManager, airGapManager(), fullFileFinder(), dockerInspectorInstaller, detectableOptionFactory.createDockerDetectableOptions());\n+        return new ArtifactoryDockerInspectorResolver(directoryManager, airGapManager(), fileFinder, dockerInspectorInstaller, detectableOptionFactory.createDockerDetectableOptions());\n     }\n \n     @Bean()\n@@ -195,7 +186,7 @@ public NugetInspectorResolver nugetInspectorResolver(DetectInfo detectInfo) thro\n         DetectExecutableResolver executableResolver = detectExecutableResolver();\n         DotNetRuntimeFinder runtimeFinder = new DotNetRuntimeFinder(executableRunner, executableResolver, directoryManager.getPermanentDirectory());\n         DotNetRuntimeManager dotNetRuntimeManager = new DotNetRuntimeManager(runtimeFinder, new DotNetRuntimeParser());\n-        return new LocatorNugetInspectorResolver(executableResolver, executableRunner, detectInfo, fullFileFinder(), installerOptions.getNugetInspectorName(), installerOptions.getPackagesRepoUrl(), locator, dotNetRuntimeManager);\n+        return new LocatorNugetInspectorResolver(executableResolver, executableRunner, detectInfo, fileFinder, installerOptions.getNugetInspectorName(), installerOptions.getPackagesRepoUrl(), locator, dotNetRuntimeManager);\n     }\n \n     @Bean()\n@@ -210,7 +201,7 @@ public GradleInspectorScriptCreator gradleInspectorScriptCreator() {\n \n     @Bean()\n     public DetectableFactory detectableFactory() {\n-        return new DetectableFactory(filteredFileFinder(), executableRunner(), externalIdFactory(), gson);\n+        return new DetectableFactory(fileFinder, executableRunner(), externalIdFactory(), gson);\n     }\n \n     @Bean()\n@@ -223,8 +214,8 @@ public DetectDetectableFactory detectDetectableFactory(NugetInspectorResolver nu\n     @Lazy\n     @Bean()\n     public BlackDuckSignatureScanner blackDuckSignatureScanner(BlackDuckSignatureScannerOptions blackDuckSignatureScannerOptions, ScanBatchRunner scanBatchRunner, BlackDuckServerConfig blackDuckServerConfig,\n-        CodeLocationNameManager codeLocationNameManager) {\n-        return new BlackDuckSignatureScanner(directoryManager, fullFileFinder(), codeLocationNameManager, blackDuckSignatureScannerOptions, eventSystem, scanBatchRunner, blackDuckServerConfig);\n+        CodeLocationNameManager codeLocationNameManager, Predicate<File> fileFilter) {\n+        return new BlackDuckSignatureScanner(directoryManager, codeLocationNameManager, blackDuckSignatureScannerOptions, eventSystem, scanBatchRunner, blackDuckServerConfig, fileFinder, fileFilter);\n     }\n \n }"
  },
  {
    "sha": "976f03f9db1386a69bbaa69079274cfa55a71617",
    "filename": "src/main/java/com/synopsys/integration/detect/configuration/DetectConfigurationFactory.java",
    "status": "modified",
    "additions": 23,
    "deletions": 21,
    "changes": 44,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/configuration/DetectConfigurationFactory.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/configuration/DetectConfigurationFactory.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/configuration/DetectConfigurationFactory.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -53,13 +53,12 @@\n import com.synopsys.integration.detect.lifecycle.run.RunOptions;\n import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n import com.synopsys.integration.detect.tool.detector.executable.DetectExecutableOptions;\n-import com.synopsys.integration.detect.tool.detector.file.DetectDetectorFileFilter;\n-import com.synopsys.integration.detect.tool.detector.file.FilteredFileFinder;\n import com.synopsys.integration.detect.tool.impactanalysis.ImpactAnalysisOptions;\n import com.synopsys.integration.detect.tool.signaturescanner.BlackDuckSignatureScannerOptions;\n import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n import com.synopsys.integration.detect.util.filter.DetectToolFilter;\n+import com.synopsys.integration.detect.util.finder.DetectExcludedDirectoryFilter;\n import com.synopsys.integration.detect.workflow.airgap.AirGapOptions;\n import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n import com.synopsys.integration.detect.workflow.bdio.BdioOptions;\n@@ -69,7 +68,6 @@\n import com.synopsys.integration.detect.workflow.file.DirectoryOptions;\n import com.synopsys.integration.detect.workflow.phonehome.PhoneHomeOptions;\n import com.synopsys.integration.detect.workflow.project.ProjectNameVersionOptions;\n-import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.detector.base.DetectorType;\n import com.synopsys.integration.detector.evaluation.DetectorEvaluationOptions;\n import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n@@ -293,29 +291,30 @@ public AirGapOptions createAirGapOptions() {\n         return new AirGapOptions(dockerOverride, gradleOverride, nugetOverride);\n     }\n \n-    public FileFinder createFilteredFileFinder(Path sourcePath) {\n-        List<String> userProvidedExcludedFiles = getValue(DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_FILES);\n-        return new FilteredFileFinder(userProvidedExcludedFiles);\n-    }\n-\n-    public DetectorFinderOptions createSearchOptions(Path sourcePath) {\n-        //Normal settings\n-        Integer maxDepth = getValue(DetectProperties.DETECT_DETECTOR_SEARCH_DEPTH);\n-\n-        //File Filter\n-        List<String> userProvidedExcludedDirectories = getValue(DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION);\n-        List<String> excludedDirectoryPatterns = getValue(DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_PATTERNS);\n-        List<String> excludedDirectoryPaths = getValue(DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_PATHS);\n+    public DetectExcludedDirectoryFilter createDetectDirectoryFileFilter(Path sourcePath, boolean excludeDefaults) {\n+        List<String> userProvidedExcludedDirectories = PropertyConfigUtils\n+                                                           .getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.DETECT_EXCLUDED_DIRECTORIES.getProperty(), DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION.getProperty());\n+        List<String> excludedDirectoryPatterns = PropertyConfigUtils\n+                                                     .getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.DETECT_EXCLUDED_DIRECTORIES.getProperty(), DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_PATTERNS.getProperty());\n+        List<String> excludedDirectoryPaths = PropertyConfigUtils\n+                                                  .getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.DETECT_EXCLUDED_DIRECTORIES.getProperty(), DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_PATHS.getProperty());\n \n         List<String> excludedDirectories = new ArrayList<>(userProvidedExcludedDirectories);\n-        if (detectConfiguration.getValueOrDefault(DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_DEFAULTS.getProperty())) {\n+        if (excludeDefaults && PropertyConfigUtils\n+                                   .getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.DETECT_EXCLUDE_DEFAULT_DIRECTORIES.getProperty(), DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_DEFAULTS.getProperty())) {\n             List<String> defaultExcluded = Arrays.stream(DefaultDetectorExcludedDirectories.values())\n                                                .map(DefaultDetectorExcludedDirectories::getDirectoryName)\n                                                .collect(Collectors.toList());\n             excludedDirectories.addAll(defaultExcluded);\n         }\n \n-        DetectDetectorFileFilter fileFilter = new DetectDetectorFileFilter(sourcePath, excludedDirectories, excludedDirectoryPaths, excludedDirectoryPatterns);\n+        return new DetectExcludedDirectoryFilter(sourcePath, excludedDirectories, excludedDirectoryPaths, excludedDirectoryPatterns);\n+    }\n+\n+    public DetectorFinderOptions createDetectorFinderOptions(Path sourcePath) {\n+        //Normal settings\n+        Integer maxDepth = getValue(DetectProperties.DETECT_DETECTOR_SEARCH_DEPTH);\n+        DetectExcludedDirectoryFilter fileFilter = createDetectDirectoryFileFilter(sourcePath, true);\n \n         return new DetectorFinderOptions(fileFilter, maxDepth);\n     }\n@@ -382,9 +381,11 @@ public BlackDuckSignatureScannerOptions createBlackDuckSignatureScannerOptions()\n         } else {\n             signatureScannerPaths = emptyList();\n         }\n-        List<String> exclusionPatterns = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_PATTERNS.getProperty(),\n+        List<String> exclusionPatterns = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.DETECT_EXCLUDED_DIRECTORIES.getProperty(),\n+            DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_PATTERNS.getProperty(),\n             DetectProperties.DETECT_HUB_SIGNATURE_SCANNER_EXCLUSION_PATTERNS.getProperty()).orElse(emptyList());\n-        List<String> exclusionNamePatterns = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS.getProperty(),\n+        List<String> exclusionNamePatterns = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.DETECT_EXCLUDED_DIRECTORIES.getProperty(),\n+            DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS.getProperty(),\n             DetectProperties.DETECT_HUB_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS.getProperty());\n \n         Integer scanMemory = PropertyConfigUtils\n@@ -399,7 +400,8 @@ public BlackDuckSignatureScannerOptions createBlackDuckSignatureScannerOptions()\n         String additionalArguments = PropertyConfigUtils\n                                          .getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_ARGUMENTS.getProperty(), DetectProperties.DETECT_HUB_SIGNATURE_SCANNER_ARGUMENTS.getProperty())\n                                          .orElse(null);\n-        Integer maxDepth = getValue(DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_PATTERN_SEARCH_DEPTH);\n+        Integer maxDepth = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.DETECT_EXCLUDED_DIRECTORY_SEARCH_DEPTH.getProperty(),\n+            DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_PATTERN_SEARCH_DEPTH.getProperty());\n         Path offlineLocalScannerInstallPath = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_OFFLINE_LOCAL_PATH.getProperty(),\n             DetectProperties.DETECT_HUB_SIGNATURE_SCANNER_OFFLINE_LOCAL_PATH.getProperty()).map(path -> path.resolvePath(pathResolver)).orElse(null);\n         Path onlineLocalScannerInstallPath = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.DETECT_BLACKDUCK_SIGNATURE_SCANNER_LOCAL_PATH.getProperty(),"
  },
  {
    "sha": "3bdbefb7ebd4ec22570a5be93ccd6610bf0a5474",
    "filename": "src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java",
    "status": "modified",
    "additions": 35,
    "deletions": 9,
    "changes": 44,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -60,7 +60,6 @@\n // java:S1123: Warning about deprecations not having Java doc.\n public class DetectProperties {\n     private static final String POLARIS_CLI_DEPRECATION_MESSAGE = \"This property is being removed. Detect will no longer invoke the Polaris CLI.\";\n-    private static final String EXCLUSION_PROPERTY_DEPRECATION_MESSAGE = \"This property is now deprecated. In future versions of Detect, it will be consolidated with other exclusion properties.\";\n     private static final String SBT_REPORT_DEPRECATION_MESSAGE = \"This property is being removed. Sbt will no longer parse report files but instead will use a dependency resolution plugin. Please install the appropriate plugin in the future.\";\n \n     private DetectProperties() {\n@@ -611,6 +610,30 @@ private DetectProperties() {\n             .setHelp(\"The path to the rebar3 executable.\")\n             .setGroups(DetectGroup.HEX, DetectGroup.GLOBAL);\n \n+    public static final DetectProperty<StringListProperty> DETECT_EXCLUDED_DIRECTORIES =\n+        new DetectProperty<>(new StringListProperty(\"detect.excluded.directories\", emptyList()))\n+            .setInfo(\"Detect Excluded Directories\", DetectPropertyFromVersion.VERSION_7_0_0)\n+            .setHelp(\"A comma-separated list of names, name patterns, relative paths, or path patterns of directories that Detect should exclude.\",\n+                \"Subdirectories whose name or path is resolved from the patterns in this list will not be searched when determining which detectors to run, and will be excluded from signature scan using the Scan CLI '--exclude' flag. Refer to the <i>Advanced</i> > <i>Exclusions in Detect</i> page for more details.\"\n+            )\n+            .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)\n+            .setCategory(DetectCategory.Advanced);\n+\n+    public static final DetectProperty<BooleanProperty> DETECT_EXCLUDE_DEFAULT_DIRECTORIES =\n+        new DetectProperty<>(new BooleanProperty(\"detect.exclude.default.directories\", true))\n+            .setInfo(\"Detect Exclude Default Directories\", DetectPropertyFromVersion.VERSION_7_0_0)\n+            .setHelp(\"If true, Detect will exclude the default directory names. See the detailed help for more information.\",\n+                \"If true, these directories will be excluded by Detect when searching for detectors and will be excluded from signature scan using the Scan CLI '--exclude' flag: bin, build, .git, .gradle, node_modules, out, packages, target.\"\n+            )\n+            .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)\n+            .setCategory(DetectCategory.Advanced);\n+\n+    public static final DetectProperty<IntegerProperty> DETECT_EXCLUDED_DIRECTORY_SEARCH_DEPTH =\n+        new DetectProperty<>(new IntegerProperty(\"detect.excluded.directory.search.depth\", 4))\n+            .setInfo(\"Detect Excluded Directory Search Depth\", DetectPropertyFromVersion.VERSION_7_0_0)\n+            .setHelp(\"Enables you to adjust the depth to which Detect will search when creating signature scanner exclusion patterns.\")\n+            .setGroups(DetectGroup.SIGNATURE_SCANNER, DetectGroup.SOURCE_SCAN);\n+\n     public static final DetectProperty<BooleanProperty> DETECT_IMPACT_ANALYSIS_ENABLED =\n         new DetectProperty<>(new BooleanProperty(\"detect.impact.analysis.enabled\", false))\n             .setInfo(\"Vulnerability Impact Analysis Enabled\", DetectPropertyFromVersion.VERSION_6_5_0)\n@@ -1215,7 +1238,7 @@ private DetectProperties() {\n             )\n             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)\n             .setCategory(DetectCategory.Advanced)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is deprecated.  Please use --detect.ignore to specify directory names to exclude from detector search.\", DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<StringListProperty> DETECT_DETECTOR_SEARCH_EXCLUSION_PATTERNS =\n@@ -1225,7 +1248,7 @@ private DetectProperties() {\n                 \"While searching the source directory to determine which detectors to run, subdirectories whose name match a pattern in this list will not be searched. These patterns are file system glob patterns ('?' is a wildcard for a single character, '*' is a wildcard for zero or more characters). For example, suppose you're running in bash on Linux, you've set --detect.detector.search.depth=1, and have a subdirectory named blackduck-common (a gradle project) that you want to exclude from the detector search. Any of the following would exclude it:--detect.detector.search.exclusion.patterns=blackduck-common,--detect.detector.search.exclusion.patterns='blackduck-common',--detect.detector.search.exclusion.patterns='blackduck-*'\")\n             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)\n             .setCategory(DetectCategory.Advanced)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is deprecated.  Please use --detect.ignore to specify directory name patterns to exclude from detector search.\", DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<StringListProperty> DETECT_DETECTOR_SEARCH_EXCLUSION_PATHS =\n@@ -1237,7 +1260,7 @@ private DetectProperties() {\n             )\n             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)\n             .setCategory(DetectCategory.Advanced)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is deprecated.  Please use --detect.ignore to specify directory paths to exclude from detector search.\", DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<StringListProperty> DETECT_DETECTOR_SEARCH_EXCLUSION_FILES =\n@@ -1246,7 +1269,8 @@ private DetectProperties() {\n             .setHelp(\"A comma-separated list of file names to exclude from detector search.\")\n             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)\n             .setCategory(DetectCategory.Advanced)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is deprecated.  Detect no longer supports the exclusion of individual files.  If you wish to exclude certain detectors, please use --detect.excluded.detector.types.\", DetectMajorVersion.SEVEN,\n+                DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<BooleanProperty> DETECT_DETECTOR_SEARCH_EXCLUSION_DEFAULTS =\n@@ -1257,7 +1281,7 @@ private DetectProperties() {\n             )\n             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)\n             .setCategory(DetectCategory.Advanced)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is deprecated.  Please use --detect.ignore.defaults to exclude default directory names from detector search.\", DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<BooleanProperty> DETECT_RESOLVE_TILDE_IN_PATHS =\n@@ -1716,15 +1740,17 @@ private DetectProperties() {\n             .setHelp(\"A comma-separated list of directory name patterns for which Detect searches and adds to the signature scanner --exclude flag values.\",\n                 \"This property accepts filename globbing-style wildcards. Refer to the <i>Advanced</i> > <i>Property wildcard support</i> page for more details. Detect will recursively search within the scan targets for files/directories that match these patterns and will create the corresponding exclusion patterns (paths relative to the scan target directory) for the signature scanner (Black Duck scan CLI). Please note that the signature scanner will only exclude directories; matched filenames will be passed to the signature scanner but will have no effect. These patterns will be added to the patterns provided by detect.blackduck.signature.scanner.exclusion.patterns and passed as --exclude values. For example: suppose you are running in bash on Linux, and have a subdirectory named blackduck-common that you want to exclude. Any of the following would exclude it: --detect.blackduck.signature.scanner.exclusion.name.patterns=blackduck-common, --detect.blackduck.signature.scanner.exclusion.name.patterns='blackduck-common', --detect.blackduck.signature.scanner.exclusion.name.patterns='blackduck-*'. Use this property when you want Detect to convert the given patterns to actual paths. Use detect.blackduck.signature.scanner.exclusion.patterns to pass patterns directly to the signature scanner as-is.\")\n             .setGroups(DetectGroup.SIGNATURE_SCANNER, DetectGroup.SOURCE_SCAN)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is now deprecated.  Please use --detect.ignore to specify directory name patterns for which Detect searches and adds to the signature scanner as --exclude flag values.\", DetectMajorVersion.SEVEN,\n+                DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<IntegerProperty> DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_PATTERN_SEARCH_DEPTH =\n         new DetectProperty<>(new IntegerProperty(\"detect.blackduck.signature.scanner.exclusion.pattern.search.depth\", 4))\n             .setInfo(\"Exclusion Patterns Search Depth\", DetectPropertyFromVersion.VERSION_5_0_0)\n             .setHelp(\"Enables you to adjust the depth to which Detect will search when creating signature scanner exclusion patterns.\")\n             .setGroups(DetectGroup.SIGNATURE_SCANNER, DetectGroup.SOURCE_SCAN)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is deprecated.  Please use --detect.ignore.search.depth to adjust the depth to which Detect will search when creating signature scanner exclusion patterns.\", DetectMajorVersion.SEVEN,\n+                DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<StringListProperty> DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_PATTERNS =\n@@ -1733,7 +1759,7 @@ private DetectProperties() {\n             .setHelp(\"A comma-separated list of values (each value is a directory name pattern surrounded by '/' characters) to be used with the Signature Scanner --exclude flag.\",\n                 \"Each pattern provided is passed to the signature scanner (Black Duck scan CLI) as a value for an --exclude option. The signature scanner requires that these exclusion patterns start and end with a forward slash (/), and may not contain double asterisks (**). These patterns will be added to the paths created from detect.blackduck.signature.scanner.exclusion.name.patterns and passed as --exclude values. Use this property to pass patterns directly to the signature scanner as-is. For example: suppose you are running in bash on Linux, and have a subdirectory named blackduck-common that you want to exclude from signature scanning. Any of the following would exclude it: --detect.blackduck.signature.scanner.exclusion.patterns=/blackduck-common/, --detect.blackduck.signature.scanner.exclusion.patterns='/blackduck-common/', --detect.blackduck.signature.scanner.exclusion.patterns='/blackduck-*/'. Use detect.blackduck.signature.scanner.exclusion.name.patterns when you want Detect to convert the given patterns to actual paths.\")\n             .setGroups(DetectGroup.SIGNATURE_SCANNER, DetectGroup.SOURCE_SCAN)\n-            .setDeprecated(EXCLUSION_PROPERTY_DEPRECATION_MESSAGE, DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n+            .setDeprecated(\"This property is now deprecated.  Please use --detect.ignore to specify patterns to be passed to the signature scanner as values for --exclude options.\", DetectMajorVersion.SEVEN, DetectMajorVersion.EIGHT);\n \n     @Deprecated\n     public static final DetectProperty<NullablePathProperty> DETECT_BLACKDUCK_SIGNATURE_SCANNER_OFFLINE_LOCAL_PATH ="
  },
  {
    "sha": "6b722ef1622faa350957d646c42c8e562ef7a73c",
    "filename": "src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -70,7 +70,6 @@\n import com.synopsys.integration.detect.workflow.file.DirectoryManager;\n import com.synopsys.integration.detect.workflow.profiling.DetectorProfiler;\n import com.synopsys.integration.common.util.finder.FileFinder;\n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n import com.synopsys.integration.util.OperatingSystemType;\n \n import freemarker.template.Configuration;\n@@ -83,14 +82,15 @@\n     private final Gson gson;\n     private final EventSystem eventSystem;\n     private final BlackDuckConnectivityChecker blackDuckConnectivityChecker;\n+    private final FileFinder fileFinder;\n \n-    public DetectBootFactory(DetectRun detectRun, DetectInfo detectInfo, Gson gson, EventSystem eventSystem) {\n+    public DetectBootFactory(DetectRun detectRun, DetectInfo detectInfo, Gson gson, EventSystem eventSystem, FileFinder fileFinder) {\n         this.detectRun = detectRun;\n         this.detectInfo = detectInfo;\n         this.gson = gson;\n         this.eventSystem = eventSystem;\n-\n         this.blackDuckConnectivityChecker = new BlackDuckConnectivityChecker();\n+        this.fileFinder = fileFinder;\n     }\n \n     public DetectBoot createDetectBoot(List<PropertySource> propertySources, String[] sourceArgs, DetectContext detectContext) {\n@@ -152,7 +152,6 @@ public AirGapCreator createAirGapCreator(ConnectionDetails connectionDetails, De\n         ConnectionFactory connectionFactory = new ConnectionFactory(connectionDetails);\n         ArtifactResolver artifactResolver = new ArtifactResolver(connectionFactory, gson);\n \n-        FileFinder fileFinder = new WildcardFileFinder();\n         DirectoryExecutableFinder directoryExecutableFinder = DirectoryExecutableFinder.forCurrentOperatingSystem(fileFinder);\n         SystemPathExecutableFinder systemPathExecutableFinder = new SystemPathExecutableFinder(directoryExecutableFinder);\n         DetectExecutableResolver detectExecutableResolver = new DetectExecutableResolver(directoryExecutableFinder, systemPathExecutableFinder, detectExecutableOptions);"
  },
  {
    "sha": "39b72e9e8e6c51a2c41ec4cdd41cd19017ffb82c",
    "filename": "src/main/java/com/synopsys/integration/detect/lifecycle/run/RunContext.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/RunContext.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/RunContext.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/lifecycle/run/RunContext.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -10,6 +10,7 @@\n import com.google.gson.Gson;\n import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.configuration.config.PropertyConfiguration;\n import com.synopsys.integration.detect.configuration.DetectConfigurationFactory;\n import com.synopsys.integration.detect.configuration.DetectInfo;\n@@ -42,8 +43,9 @@\n     private final CodeLocationConverter codeLocationConverter;\n     private final Gson gson;\n     private final Gson htmlEscapeDisabledGson;\n+    private final FileFinder fileFinder;\n \n-    public RunContext(DetectContext detectContext, ProductRunData productRunData) {\n+    public RunContext(DetectContext detectContext, ProductRunData productRunData, FileFinder fileFinder) {\n         this.detectContext = detectContext;\n         this.productRunData = productRunData;\n         detectConfiguration = detectContext.getBean(PropertyConfiguration.class);\n@@ -61,6 +63,7 @@ public RunContext(DetectContext detectContext, ProductRunData productRunData) {\n         gson = detectContext.getBean(Gson.class);\n         // Can't have more than one instance of Gson registered at the moment.  It causes problems resolving the beans for the application if there is more than one Gson.\n         this.htmlEscapeDisabledGson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();\n+        this.fileFinder = fileFinder;\n     }\n \n     public DetectContext getDetectContext() {\n@@ -130,4 +133,8 @@ public Gson getGson() {\n     public Gson getHtmlEscapeDisabledGson() {\n         return htmlEscapeDisabledGson;\n     }\n+\n+    public FileFinder getFileFinder() {\n+        return fileFinder;\n+    }\n }"
  },
  {
    "sha": "dd0dcc01f0cfc405343df3d5fb11d434bad46e29",
    "filename": "src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/DetectorOperation.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/DetectorOperation.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/DetectorOperation.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/DetectorOperation.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -10,6 +10,7 @@\n import java.nio.file.Path;\n import java.util.List;\n \n+import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.configuration.config.PropertyConfiguration;\n import com.synopsys.integration.detect.configuration.DetectConfigurationFactory;\n import com.synopsys.integration.detect.configuration.DetectProperties;\n@@ -44,16 +45,18 @@\n     private DetectDetectableFactory detectDetectableFactory;\n     private ExtractionEnvironmentProvider extractionEnvironmentProvider;\n     private CodeLocationConverter codeLocationConverter;\n+    private FileFinder fileFinder;\n \n     public DetectorOperation(PropertyConfiguration detectConfiguration, DetectConfigurationFactory detectConfigurationFactory, DirectoryManager directoryManager, EventSystem eventSystem,\n-        DetectDetectableFactory detectDetectableFactory, ExtractionEnvironmentProvider extractionEnvironmentProvider, CodeLocationConverter codeLocationConverter) {\n+        DetectDetectableFactory detectDetectableFactory, ExtractionEnvironmentProvider extractionEnvironmentProvider, CodeLocationConverter codeLocationConverter, FileFinder fileFinder) {\n         this.detectConfiguration = detectConfiguration;\n         this.detectConfigurationFactory = detectConfigurationFactory;\n         this.directoryManager = directoryManager;\n         this.eventSystem = eventSystem;\n         this.detectDetectableFactory = detectDetectableFactory;\n         this.extractionEnvironmentProvider = extractionEnvironmentProvider;\n         this.codeLocationConverter = codeLocationConverter;\n+        this.fileFinder = fileFinder;\n     }\n \n     public boolean execute(RunResult runResult) throws DetectUserFriendlyException, IntegrationException {\n@@ -65,12 +68,12 @@ public boolean execute(RunResult runResult) throws DetectUserFriendlyException,\n         DetectorRuleSet detectRuleSet = detectorRuleFactory.createRules(detectDetectableFactory, buildless);\n \n         Path sourcePath = directoryManager.getSourceDirectory().toPath();\n-        DetectorFinderOptions finderOptions = detectConfigurationFactory.createSearchOptions(sourcePath);\n+        DetectorFinderOptions finderOptions = detectConfigurationFactory.createDetectorFinderOptions(sourcePath);\n         DetectorEvaluationOptions detectorEvaluationOptions = detectConfigurationFactory.createDetectorEvaluationOptions();\n \n         DetectorIssuePublisher detectorIssuePublisher = new DetectorIssuePublisher();\n         DetectorTool detectorTool = new DetectorTool(new DetectorFinder(), extractionEnvironmentProvider, eventSystem, codeLocationConverter, detectorIssuePublisher);\n-        DetectorToolResult detectorToolResult = detectorTool.performDetectors(directoryManager.getSourceDirectory(), detectRuleSet, finderOptions, detectorEvaluationOptions, projectBomTool, requiredDetectors);\n+        DetectorToolResult detectorToolResult = detectorTool.performDetectors(directoryManager.getSourceDirectory(), detectRuleSet, finderOptions, detectorEvaluationOptions, projectBomTool, requiredDetectors, fileFinder);\n \n         detectorToolResult.getBomToolProjectNameVersion().ifPresent(it -> runResult.addToolNameVersion(DetectTool.DETECTOR, new NameVersion(it.getName(), it.getVersion())));\n         runResult.addDetectCodeLocations(detectorToolResult.getBomToolCodeLocations());"
  },
  {
    "sha": "0c011677955c544a83d68efaa8da983b83aee6b6",
    "filename": "src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java",
    "status": "modified",
    "additions": 12,
    "deletions": 3,
    "changes": 15,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -7,10 +7,15 @@\n  */\n package com.synopsys.integration.detect.lifecycle.run.operation;\n \n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.function.Predicate;\n+\n import com.synopsys.integration.bdio.SimpleBdioFactory;\n import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n import com.synopsys.integration.blackduck.bdio2.Bdio2Factory;\n import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.detect.configuration.DetectConfigurationFactory;\n import com.synopsys.integration.detect.configuration.DetectUserFriendlyException;\n import com.synopsys.integration.detect.lifecycle.run.RunContext;\n@@ -27,6 +32,7 @@\n import com.synopsys.integration.detect.lifecycle.run.operation.blackduck.ProjectDecisionOperation;\n import com.synopsys.integration.detect.lifecycle.run.operation.blackduck.SignatureScanOperation;\n import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n+import com.synopsys.integration.detect.util.finder.DetectExcludedDirectoryFilter;\n import com.synopsys.integration.detect.tool.impactanalysis.BlackDuckImpactAnalysisTool;\n import com.synopsys.integration.detect.tool.impactanalysis.ImpactAnalysisOptions;\n import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisBatchRunner;\n@@ -68,7 +74,7 @@ public final BazelOperation createBazelOperation() {\n \n     public final DetectorOperation createDetectorOperation() {\n         return new DetectorOperation(runContext.getDetectConfiguration(), runContext.getDetectConfigurationFactory(), runContext.getDirectoryManager(), runContext.getEventSystem(), runContext.getDetectDetectableFactory(),\n-            runContext.getExtractionEnvironmentProvider(), runContext.getCodeLocationConverter());\n+            runContext.getExtractionEnvironmentProvider(), runContext.getCodeLocationConverter(), runContext.getFileFinder());\n     }\n \n     public final RapidScanOperation createRapidScanOperation() {\n@@ -89,7 +95,7 @@ public final BinaryScanOperation createBinaryScanOperation() {\n         BlackDuckRunData blackDuckRunData = runContext.getProductRunData().getBlackDuckRunData();\n         BinaryScanOptions binaryScanOptions = runContext.getDetectConfigurationFactory().createBinaryScanOptions();\n \n-        return new BinaryScanOperation(blackDuckRunData, binaryScanOptions, runContext.getEventSystem(), runContext.getDirectoryManager(), runContext.getCodeLocationNameManager());\n+        return new BinaryScanOperation(blackDuckRunData, binaryScanOptions, runContext.getEventSystem(), runContext.getDirectoryManager(), runContext.getCodeLocationNameManager(), runContext.getFileFinder());\n     }\n \n     public final BdioUploadOperation createBdioUploadOperation() {\n@@ -142,7 +148,10 @@ public final ProjectDecisionOperation createProjectDecisionOperation() {\n     public final SignatureScanOperation createSignatureScanOperation() throws DetectUserFriendlyException {\n         BlackDuckRunData blackDuckRunData = runContext.getProductRunData().getBlackDuckRunData();\n         BlackDuckSignatureScannerOptions blackDuckSignatureScannerOptions = runContext.getDetectConfigurationFactory().createBlackDuckSignatureScannerOptions();\n-        BlackDuckSignatureScannerTool blackDuckSignatureScannerTool = new BlackDuckSignatureScannerTool(blackDuckSignatureScannerOptions, runContext.getDetectContext());\n+        Path sourcePath = runContext.getDirectoryManager().getSourceDirectory().toPath();\n+        DetectExcludedDirectoryFilter fileFilter = runContext.getDetectConfigurationFactory().createDetectDirectoryFileFilter(sourcePath, false);\n+        Predicate<File> collectExcludedDirectoriesPredicate = file -> fileFilter.isExcluded(file);\n+        BlackDuckSignatureScannerTool blackDuckSignatureScannerTool = new BlackDuckSignatureScannerTool(blackDuckSignatureScannerOptions, runContext.getDetectContext(), collectExcludedDirectoriesPredicate);\n \n         return new SignatureScanOperation(blackDuckRunData, blackDuckSignatureScannerTool, runContext.getEventSystem());\n     }"
  },
  {
    "sha": "267f827d72df5925a4fd3bd16c1ff3105611682c",
    "filename": "src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BinaryScanOperation.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BinaryScanOperation.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BinaryScanOperation.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BinaryScanOperation.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -12,6 +12,7 @@\n import com.synopsys.integration.blackduck.codelocation.CodeLocationCreationData;\n import com.synopsys.integration.blackduck.codelocation.binaryscanner.BinaryScanBatchOutput;\n import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.detect.configuration.DetectUserFriendlyException;\n import com.synopsys.integration.detect.lifecycle.run.data.BlackDuckRunData;\n import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n@@ -20,7 +21,6 @@\n import com.synopsys.integration.detect.workflow.codelocation.CodeLocationNameManager;\n import com.synopsys.integration.detect.workflow.event.EventSystem;\n import com.synopsys.integration.detect.workflow.file.DirectoryManager;\n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n import com.synopsys.integration.exception.IntegrationException;\n import com.synopsys.integration.util.NameVersion;\n \n@@ -31,20 +31,22 @@\n     private final EventSystem eventSystem;\n     private final DirectoryManager directoryManager;\n     private final CodeLocationNameManager codeLocationNameManager;\n+    private final FileFinder fileFinder;\n \n     public BinaryScanOperation(BlackDuckRunData blackDuckRunData, BinaryScanOptions binaryScanOptions, EventSystem eventSystem, DirectoryManager directoryManager,\n-        CodeLocationNameManager codeLocationNameManager) {\n+        CodeLocationNameManager codeLocationNameManager, FileFinder fileFinder) {\n         this.blackDuckRunData = blackDuckRunData;\n         this.binaryScanOptions = binaryScanOptions;\n         this.eventSystem = eventSystem;\n         this.directoryManager = directoryManager;\n         this.codeLocationNameManager = codeLocationNameManager;\n+        this.fileFinder = fileFinder;\n     }\n \n     public Optional<CodeLocationCreationData<BinaryScanBatchOutput>> execute(NameVersion projectNameVersion) throws DetectUserFriendlyException, IntegrationException {\n         Optional<CodeLocationCreationData<BinaryScanBatchOutput>> operationResult = Optional.empty();\n         BlackDuckServicesFactory blackDuckServicesFactory = blackDuckRunData.getBlackDuckServicesFactory();\n-        BlackDuckBinaryScannerTool binaryScannerTool = new BlackDuckBinaryScannerTool(eventSystem, codeLocationNameManager, directoryManager, new WildcardFileFinder(), binaryScanOptions,\n+        BlackDuckBinaryScannerTool binaryScannerTool = new BlackDuckBinaryScannerTool(eventSystem, codeLocationNameManager, directoryManager, fileFinder, binaryScanOptions,\n             blackDuckServicesFactory.createBinaryScanUploadService());\n         if (binaryScannerTool.shouldRun()) {\n             BinaryScanToolResult result = binaryScannerTool.performBinaryScanActions(projectNameVersion);"
  },
  {
    "sha": "572cfb034cb437f409f1a01695dd21af945c20d3",
    "filename": "src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerTool.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerTool.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerTool.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerTool.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -77,7 +77,6 @@ public boolean shouldRun() {\n     }\n \n     public BinaryScanToolResult performBinaryScanActions(NameVersion projectNameVersion) throws DetectUserFriendlyException {\n-\n         File binaryUpload = null;\n         Optional<Path> singleTargetFilePath = binaryScanOptions.getSingleTargetFilePath();\n         if (singleTargetFilePath.isPresent()) {"
  },
  {
    "sha": "9b436572a1b2db85951aa4191334505a661aa73f",
    "filename": "src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java",
    "status": "modified",
    "additions": 4,
    "deletions": 10,
    "changes": 14,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -23,7 +23,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.synopsys.integration.detect.configuration.DetectUserFriendlyException;\n+import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeRequest;\n import com.synopsys.integration.detect.tool.detector.extraction.ExtractionEnvironmentProvider;\n@@ -46,7 +46,6 @@\n import com.synopsys.integration.detector.evaluation.DetectorEvaluator;\n import com.synopsys.integration.detector.evaluation.DiscoveryFilter;\n import com.synopsys.integration.detector.finder.DetectorFinder;\n-import com.synopsys.integration.detector.finder.DetectorFinderDirectoryListException;\n import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n import com.synopsys.integration.detector.rule.DetectorRuleSet;\n \n@@ -68,17 +67,12 @@ public DetectorTool(DetectorFinder detectorFinder, ExtractionEnvironmentProvider\n     }\n \n     public DetectorToolResult performDetectors(File directory, DetectorRuleSet detectorRuleSet, DetectorFinderOptions detectorFinderOptions, DetectorEvaluationOptions evaluationOptions, String projectDetector,\n-        List<DetectorType> requiredDetectors)\n-        throws DetectUserFriendlyException {\n+        List<DetectorType> requiredDetectors, FileFinder fileFinder) {\n         logger.debug(\"Initializing detector system.\");\n         Optional<DetectorEvaluationTree> possibleRootEvaluation;\n-        try {\n-            logger.debug(\"Starting detector file system traversal.\");\n-            possibleRootEvaluation = detectorFinder.findDetectors(directory, detectorRuleSet, detectorFinderOptions);\n \n-        } catch (DetectorFinderDirectoryListException e) {\n-            throw new DetectUserFriendlyException(\"Detect was unable to list a directory while searching for detectors.\", e, ExitCodeType.FAILURE_DETECTOR);\n-        }\n+        logger.debug(\"Starting detector file system traversal.\");\n+        possibleRootEvaluation = detectorFinder.findDetectors(directory, detectorRuleSet, detectorFinderOptions, fileFinder);\n \n         if (!possibleRootEvaluation.isPresent()) {\n             logger.error(\"The source directory could not be searched for detectors - detector tool failed.\");"
  },
  {
    "sha": "f846e61e2b37497d2bd3c4853bacca66a098fd4b",
    "filename": "src/main/java/com/synopsys/integration/detect/tool/detector/file/FilteredFileFinder.java",
    "status": "removed",
    "additions": 0,
    "deletions": 32,
    "changes": 32,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/aa6b5a73e1e20c29d2b0cdecdc92145cb47482f0/src/main/java/com/synopsys/integration/detect/tool/detector/file/FilteredFileFinder.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/aa6b5a73e1e20c29d2b0cdecdc92145cb47482f0/src/main/java/com/synopsys/integration/detect/tool/detector/file/FilteredFileFinder.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/tool/detector/file/FilteredFileFinder.java?ref=aa6b5a73e1e20c29d2b0cdecdc92145cb47482f0",
    "patch": "@@ -1,32 +0,0 @@\n-/*\n- * synopsys-detect\n- *\n- * Copyright (c) 2021 Synopsys, Inc.\n- *\n- * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.\n- */\n-package com.synopsys.integration.detect.tool.detector.file;\n-\n-import java.io.File;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import org.jetbrains.annotations.NotNull;\n-\n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n-\n-public class FilteredFileFinder extends WildcardFileFinder {\n-    private final List<String> excludedFileNames;\n-\n-    public FilteredFileFinder(final List<String> excludedFileNames) {\n-        this.excludedFileNames = excludedFileNames;\n-    }\n-\n-    @NotNull\n-    @Override\n-    public List<File> findFiles(final File directoryToSearch, final List<String> filenamePatterns, final int depth, final boolean findInsideMatchingDirectories) {\n-        return super.findFiles(directoryToSearch, filenamePatterns, depth, findInsideMatchingDirectories).stream()\n-                   .filter(file -> !excludedFileNames.contains(file.getName()))\n-                   .collect(Collectors.toList());\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "b23a481ad56a641850d6f0fc289d39a412fd2cf2",
    "filename": "src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScanner.java",
    "status": "modified",
    "additions": 24,
    "deletions": 10,
    "changes": 34,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScanner.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScanner.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScanner.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -12,9 +12,12 @@\n import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -26,6 +29,7 @@\n import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.ScanCommandOutput;\n import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.ScanTarget;\n import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfig;\n+import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.detect.configuration.DetectUserFriendlyException;\n import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeRequest;\n@@ -38,32 +42,33 @@\n import com.synopsys.integration.detect.workflow.status.DetectIssueType;\n import com.synopsys.integration.detect.workflow.status.SignatureScanStatus;\n import com.synopsys.integration.detect.workflow.status.StatusType;\n-import com.synopsys.integration.common.util.finder.FileFinder;\n import com.synopsys.integration.exception.IntegrationException;\n import com.synopsys.integration.util.NameVersion;\n \n public class BlackDuckSignatureScanner {\n     private final Logger logger = LoggerFactory.getLogger(BlackDuckSignatureScanner.class);\n \n     private final DirectoryManager directoryManager;\n-    private final FileFinder fileFinder;\n     private final CodeLocationNameManager codeLocationNameManager;\n     private final BlackDuckSignatureScannerOptions signatureScannerOptions;\n     private final EventSystem eventSystem;\n     private final ScanBatchRunner scanJobManager;\n+    private final FileFinder fileFinder;\n+    private final Predicate<File> fileFilter;\n \n     //When OFFLINE, this should be NULL. No other changes required for offline (in this class).\n     private final BlackDuckServerConfig blackDuckServerConfig;\n \n-    public BlackDuckSignatureScanner(DirectoryManager directoryManager, FileFinder fileFinder, CodeLocationNameManager codeLocationNameManager,\n-        BlackDuckSignatureScannerOptions signatureScannerOptions, EventSystem eventSystem, ScanBatchRunner scanJobManager, BlackDuckServerConfig blackDuckServerConfig) {\n+    public BlackDuckSignatureScanner(DirectoryManager directoryManager, CodeLocationNameManager codeLocationNameManager,\n+        BlackDuckSignatureScannerOptions signatureScannerOptions, EventSystem eventSystem, ScanBatchRunner scanJobManager, BlackDuckServerConfig blackDuckServerConfig, FileFinder fileFinder, Predicate<File> fileFilter) {\n         this.directoryManager = directoryManager;\n-        this.fileFinder = fileFinder;\n         this.codeLocationNameManager = codeLocationNameManager;\n         this.signatureScannerOptions = signatureScannerOptions;\n         this.eventSystem = eventSystem;\n         this.scanJobManager = scanJobManager;\n         this.blackDuckServerConfig = blackDuckServerConfig;\n+        this.fileFinder = fileFinder;\n+        this.fileFilter = fileFilter;\n     }\n \n     public ScanBatchOutput performScanActions(NameVersion projectNameVersion, File installDirectory, File dockerTarFile) throws IntegrationException, IOException, DetectUserFriendlyException {\n@@ -166,18 +171,27 @@ private void publishResults(SignatureScannerReport signatureScannerReport) {\n \n     private SignatureScanPath createScanPath(Path path, Integer maxDepth, List<String> signatureScannerExclusionNamePatterns, List<String> providedExclusionPatterns) {\n         File target = path.toFile();\n-        ExclusionPatternCreator exclusionPatternCreator = new ExclusionPatternCreator(fileFinder, target);\n+        ExclusionPatternCreator exclusionPatternCreator = new ExclusionPatternCreator(fileFinder, fileFilter, target);\n+\n+        Set<String> scanExclusionPatterns = new HashSet<>();\n+\n+        // First add explicit exclusions that are correctly formatted\n+        scanExclusionPatterns.addAll(providedExclusionPatterns.stream()\n+                                         .filter(this::isCorrectlyFormattedExclusion)\n+                                         .collect(Collectors.toSet()));\n+\n+        scanExclusionPatterns.addAll(exclusionPatternCreator.determineExclusionPatterns(maxDepth, signatureScannerExclusionNamePatterns));\n \n-        Set<String> scanExclusionPatterns = exclusionPatternCreator.determineExclusionPatterns(maxDepth, signatureScannerExclusionNamePatterns);\n-        if (null != providedExclusionPatterns) {\n-            scanExclusionPatterns.addAll(providedExclusionPatterns);\n-        }\n         SignatureScanPath signatureScanPath = new SignatureScanPath();\n         signatureScanPath.setTargetPath(target);\n         signatureScanPath.getExclusions().addAll(scanExclusionPatterns);\n         return signatureScanPath;\n     }\n \n+    private boolean isCorrectlyFormattedExclusion(String exclusion) {\n+        return exclusion.startsWith(\"/\") && exclusion.endsWith(\"/\") && !exclusion.contains(\"**\");\n+    }\n+\n     protected ScanBatchBuilder createDefaultScanBatchBuilder(NameVersion projectNameVersion, File installDirectory, List<SignatureScanPath> signatureScanPaths, File dockerTarFile) {\n         ScanBatchBuilder scanJobBuilder = new ScanBatchBuilder();\n         scanJobBuilder.scanMemoryInMegabytes(signatureScannerOptions.getScanMemory());"
  },
  {
    "sha": "d554f51d4564a927e78cb522f217b5984754538f",
    "filename": "src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerTool.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerTool.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerTool.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerTool.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -13,6 +13,7 @@\n import java.util.Optional;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.function.Predicate;\n \n import org.jetbrains.annotations.Nullable;\n import org.slf4j.Logger;\n@@ -44,10 +45,12 @@\n     private final Logger logger = LoggerFactory.getLogger(BlackDuckSignatureScannerTool.class);\n     private final DetectContext detectContext;\n     private final BlackDuckSignatureScannerOptions signatureScannerOptions;\n+    private final Predicate<File> fileFilter;\n \n-    public BlackDuckSignatureScannerTool(BlackDuckSignatureScannerOptions signatureScannerOptions, DetectContext detectContext) {\n+    public BlackDuckSignatureScannerTool(BlackDuckSignatureScannerOptions signatureScannerOptions, DetectContext detectContext, Predicate<File> fileFilter) {\n         this.signatureScannerOptions = signatureScannerOptions;\n         this.detectContext = detectContext;\n+        this.fileFilter = fileFilter;\n     }\n \n     // TODO: Don't accept an Optional as a parameter.\n@@ -69,7 +72,7 @@ public SignatureScannerToolResult runScanTool(CodeLocationCreationService codeLo\n         ScanBatchRunner scanBatchRunner = createScanBatchRunner(blackDuckServerConfig, localScannerInstallPath.orElse(null), scanBatchRunnerFactory, installDirectory, connectionFactory, detectInfo);\n \n         try {\n-            BlackDuckSignatureScanner blackDuckSignatureScanner = detectContext.getBean(BlackDuckSignatureScanner.class, signatureScannerOptions, scanBatchRunner, blackDuckServerConfig, codeLocationNameManager);\n+            BlackDuckSignatureScanner blackDuckSignatureScanner = detectContext.getBean(BlackDuckSignatureScanner.class, signatureScannerOptions, scanBatchRunner, blackDuckServerConfig, codeLocationNameManager, fileFilter);\n             return runScanner(blackDuckSignatureScanner, codeLocationCreationService, blackDuckServerConfig, projectNameVersion, installDirectory, dockerTar.orElse(null));\n         } catch (IOException | IntegrationException e) {\n             logger.error(String.format(\"Signature scan failed: %s\", e.getMessage()));"
  },
  {
    "sha": "2150a644c1279bd99e911cfccf97031ea85a5f28",
    "filename": "src/main/java/com/synopsys/integration/detect/util/finder/DetectExcludedDirectoryFilter.java",
    "status": "renamed",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/util/finder/DetectExcludedDirectoryFilter.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/util/finder/DetectExcludedDirectoryFilter.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/util/finder/DetectExcludedDirectoryFilter.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -5,23 +5,25 @@\n  *\n  * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.\n  */\n-package com.synopsys.integration.detect.tool.detector.file;\n+package com.synopsys.integration.detect.util.finder;\n \n import java.io.File;\n+import java.nio.file.FileSystems;\n import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n import java.util.List;\n import java.util.function.Predicate;\n \n import org.apache.commons.io.FilenameUtils;\n import org.apache.commons.io.filefilter.WildcardFileFilter;\n \n-public class DetectDetectorFileFilter implements Predicate<File> {\n+public class DetectExcludedDirectoryFilter implements Predicate<File> {\n     private final Path sourcePath;\n     private final List<String> excludedDirectories;\n     private final List<String> excludedDirectoryPaths;\n     private final WildcardFileFilter fileFilter;\n \n-    public DetectDetectorFileFilter(final Path sourcePath, final List<String> excludedDirectories, final List<String> excludedDirectoryPaths, final List<String> excludedDirectoryNamePatterns) {\n+    public DetectExcludedDirectoryFilter(final Path sourcePath, final List<String> excludedDirectories, final List<String> excludedDirectoryPaths, final List<String> excludedDirectoryNamePatterns) {\n         this.sourcePath = sourcePath;\n         this.excludedDirectories = excludedDirectories;\n         this.excludedDirectoryPaths = excludedDirectoryPaths;\n@@ -43,7 +45,9 @@ public boolean isExcluded(final File file) {\n         for (final String excludedDirectory : excludedDirectoryPaths) {\n             final Path excludedDirectoryPath = new File(excludedDirectory).toPath();\n             final Path relativeDirectoryPath = sourcePath.relativize(file.toPath());\n-            if (relativeDirectoryPath.endsWith(excludedDirectoryPath)) {\n+            PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(\"glob:\" + excludedDirectory);\n+\n+            if (relativeDirectoryPath.endsWith(excludedDirectoryPath) || pathMatcher.matches(file.toPath())) {\n                 return true;\n             }\n         }",
    "previous_filename": "src/main/java/com/synopsys/integration/detect/tool/detector/file/DetectDetectorFileFilter.java"
  },
  {
    "sha": "18f0a0fcc931838747a07e2ccaab7c8f2fc91ce4",
    "filename": "src/main/java/com/synopsys/integration/detect/workflow/blackduck/ExclusionPatternCreator.java",
    "status": "modified",
    "additions": 10,
    "deletions": 4,
    "changes": 14,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/workflow/blackduck/ExclusionPatternCreator.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/main/java/com/synopsys/integration/detect/workflow/blackduck/ExclusionPatternCreator.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/main/java/com/synopsys/integration/detect/workflow/blackduck/ExclusionPatternCreator.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -13,7 +13,9 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.function.Predicate;\n \n+import org.apache.commons.collections.CollectionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -23,22 +25,26 @@\n     private final Logger logger = LoggerFactory.getLogger(ExclusionPatternCreator.class);\n \n     private final FileFinder fileFinder;\n+    private final Predicate<File> fileFilter;\n     private final File scanTarget;\n \n-    public ExclusionPatternCreator(final FileFinder fileFinder, final File scanTarget) {\n+    public ExclusionPatternCreator(final FileFinder fileFinder, final Predicate<File> fileFilter, final File scanTarget) {\n         this.fileFinder = fileFinder;\n+        this.fileFilter = fileFilter;\n         this.scanTarget = scanTarget;\n     }\n \n-    public Set<String> determineExclusionPatterns(final int maxDepth, final List<String> signatureScannerExclusionNamePatterns) {\n-        if (null == signatureScannerExclusionNamePatterns || signatureScannerExclusionNamePatterns.size() < 1 && scanTarget.isDirectory()) {\n+    public Set<String> determineExclusionPatterns(final int maxDepth, final List<String> exclusionPatterns) {\n+        if (CollectionUtils.isEmpty(exclusionPatterns) && scanTarget.isDirectory()) {\n             return Collections.emptySet();\n         }\n         final Set<String> scanExclusionPatterns = new HashSet<>();\n+\n+        // Now use patterns to resolve exclusions that we will format and pass on to the signature scanner\n         try {\n             final String scanTargetPath = scanTarget.getCanonicalPath();\n             // TODO should we only collect directories since the scanner can only exclude directories?\n-            final List<File> matchingFiles = fileFinder.findFiles(scanTarget, signatureScannerExclusionNamePatterns, maxDepth, false); //TODO: re-add the depth hit message creator?\n+            final List<File> matchingFiles = fileFinder.findFiles(scanTarget, fileFilter, maxDepth); //TODO: re-add the depth hit message creator?\n             for (final File matchingFile : matchingFiles) {\n                 final String matchingFilePath = matchingFile.getCanonicalPath();\n                 final String scanExclusionPattern = createExclusionPatternFromPaths(scanTargetPath, matchingFilePath);"
  },
  {
    "sha": "4c3d443629dadb6ebf29e11c34baf890aa0f51c3",
    "filename": "src/test/java/com/synopsys/integration/detect/file/FileExclusionTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 91,
    "changes": 91,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/aa6b5a73e1e20c29d2b0cdecdc92145cb47482f0/src/test/java/com/synopsys/integration/detect/file/FileExclusionTest.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/aa6b5a73e1e20c29d2b0cdecdc92145cb47482f0/src/test/java/com/synopsys/integration/detect/file/FileExclusionTest.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/test/java/com/synopsys/integration/detect/file/FileExclusionTest.java?ref=aa6b5a73e1e20c29d2b0cdecdc92145cb47482f0",
    "patch": "@@ -1,91 +0,0 @@\n-/**\n- * synopsys-detect\n- *\n- * Copyright (c) 2020 Synopsys, Inc.\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package com.synopsys.integration.detect.file;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.charset.Charset;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-import org.apache.commons.io.FileUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.synopsys.integration.configuration.config.PropertyConfiguration;\n-import com.synopsys.integration.configuration.property.Property;\n-import com.synopsys.integration.configuration.property.types.path.SimplePathResolver;\n-import com.synopsys.integration.configuration.util.ConfigTestUtils;\n-import com.synopsys.integration.detect.configuration.DetectConfigurationFactory;\n-import com.synopsys.integration.detect.configuration.DetectProperties;\n-import com.synopsys.integration.common.util.finder.FileFinder;\n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n-\n-public class FileExclusionTest {\n-    File sourceFile;\n-    Path sourcePath;\n-\n-    //these tests are based around these three files - DO NOT CHANGE without also changing tests.\n-    String firstFileDotTxt = \"first-file.txt\";\n-    String secondFileDotDat = \"second-file.dat\";\n-    String folder = \"folder\";\n-    String thirdDotTxt = \"third.txt\"; //third is inside folder.\n-\n-    @Before\n-    public void beforeEachTestMethod() throws IOException {\n-        sourcePath = Files.createTempDirectory(\"exclusion-test\");\n-        sourceFile = sourcePath.toFile();\n-\n-        FileUtils.writeStringToFile(new File(sourcePath.toFile(), firstFileDotTxt), \"\", Charset.defaultCharset());\n-        FileUtils.writeStringToFile(new File(sourcePath.toFile(), secondFileDotDat), \"\", Charset.defaultCharset());\n-        File folderFile = new File(sourcePath.toFile(), folder);\n-        Assert.assertTrue(folderFile.mkdir());\n-        FileUtils.writeStringToFile(new File(folderFile, thirdDotTxt), \"\", Charset.defaultCharset());\n-    }\n-\n-    private FileFinder fileFinderFromProperty(Property prop, String value) {\n-        PropertyConfiguration propertyConfiguration = ConfigTestUtils.configOf(Pair.of(prop.getKey(), value));\n-        DetectConfigurationFactory detectConfigurationFactory = new DetectConfigurationFactory(propertyConfiguration, new SimplePathResolver());\n-        return detectConfigurationFactory.createFilteredFileFinder(sourcePath);\n-    }\n-\n-    @Test\n-    public void testSimpleFindsAll() throws IOException {\n-        FileFinder finder = new WildcardFileFinder();\n-        Assert.assertEquals(4, finder.findFiles(sourceFile, \"*\", 2).size());\n-    }\n-\n-    @Test\n-    public void testDefaultsFindAll() throws IOException {\n-        FileFinder finder = fileFinderFromProperty(DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_DEFAULTS.getProperty(), \"true\");\n-        Assert.assertEquals(4, finder.findFiles(sourceFile, \"*\", 2).size());\n-    }\n-\n-    @Test\n-    public void testFirstFileExcluded() throws IOException {\n-        FileFinder finder = fileFinderFromProperty(DetectProperties.DETECT_DETECTOR_SEARCH_EXCLUSION_FILES.getProperty(), firstFileDotTxt);\n-        Assert.assertEquals(3, finder.findFiles(sourceFile, \"*\", 2).size());\n-    }\n-}"
  },
  {
    "sha": "04b517fc2938f7a417d03a98e1a5584a4514e2ad",
    "filename": "src/test/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/test/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootTest.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/test/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootTest.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/test/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootTest.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -18,6 +18,8 @@\n import org.junit.jupiter.params.provider.ValueSource;\n \n import com.google.gson.Gson;\n+import com.synopsys.integration.common.util.finder.FileFinder;\n+import com.synopsys.integration.common.util.finder.SimpleFileFinder;\n import com.synopsys.integration.configuration.source.MapPropertySource;\n import com.synopsys.integration.configuration.source.PropertySource;\n import com.synopsys.integration.detect.configuration.DetectInfo;\n@@ -44,11 +46,13 @@ public void setUp() {\n         DetectInfo detectInfo = new DetectInfo(EXPECTED_VERSION_TEXT, EXPECTED_MAJOR_VERSION, CURRENT_OS);\n         Gson gson = new Gson();\n         EventSystem eventSystem = new EventSystem();\n-        detectBootFactory = new DetectBootFactory(detectRun, detectInfo, gson, eventSystem);\n+        FileFinder fileFinder = new SimpleFileFinder();\n+        detectBootFactory = new DetectBootFactory(detectRun, detectInfo, gson, eventSystem, fileFinder);\n \n         detectContext = new DetectContext(detectRun);\n         detectContext.registerBean(detectInfo);\n         detectContext.registerBean(gson);\n+        detectContext.registerBean(fileFinder);\n \n     }\n "
  },
  {
    "sha": "7ab09b5ed0d3e0c9182d9f88b91d5cd6c81f29c0",
    "filename": "src/test/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerToolTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/test/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerToolTest.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/test/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerToolTest.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/test/java/com/synopsys/integration/detect/tool/binaryscanner/BlackDuckBinaryScannerToolTest.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -42,7 +42,7 @@\n import com.synopsys.integration.blackduck.codelocation.binaryscanner.BinaryScanBatchOutput;\n import com.synopsys.integration.blackduck.codelocation.binaryscanner.BinaryScanOutput;\n import com.synopsys.integration.blackduck.codelocation.binaryscanner.BinaryScanUploadService;\n-import com.synopsys.integration.common.util.finder.WildcardFileFinder;\n+import com.synopsys.integration.common.util.finder.SimpleFileFinder;\n import com.synopsys.integration.detect.configuration.DetectUserFriendlyException;\n import com.synopsys.integration.detect.workflow.codelocation.CodeLocationNameManager;\n import com.synopsys.integration.detect.workflow.event.EventSystem;\n@@ -118,7 +118,7 @@ public void testShouldFailOnDirectory() throws DetectUserFriendlyException {\n \n     @Test\n     public void testMultipleTargetPaths() throws DetectUserFriendlyException, IOException, IntegrationException {\n-        WildcardFileFinder fileFinder = new WildcardFileFinder();\n+        SimpleFileFinder fileFinder = new SimpleFileFinder();\n         DirectoryManager directoryManager = Mockito.mock(DirectoryManager.class);\n         BinaryScanUploadService uploadService = Mockito.mock(BinaryScanUploadService.class);\n         CodeLocationNameManager codeLocationNameManager = Mockito.mock(CodeLocationNameManager.class);"
  },
  {
    "sha": "ce01ab64b46538a327cc6ef33f13f5b231525c72",
    "filename": "src/test/java/com/synopsys/integration/detect/tool/detector/DetectorToolTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 28,
    "changes": 32,
    "blob_url": "https://github.com/blackducksoftware/synopsys-detect/blob/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/test/java/com/synopsys/integration/detect/tool/detector/DetectorToolTest.java",
    "raw_url": "https://github.com/blackducksoftware/synopsys-detect/raw/98d92ec119c96bcfec3bc094c6ba5fb8dbd79580/src/test/java/com/synopsys/integration/detect/tool/detector/DetectorToolTest.java",
    "contents_url": "https://api.github.com/repos/blackducksoftware/synopsys-detect/contents/src/test/java/com/synopsys/integration/detect/tool/detector/DetectorToolTest.java?ref=98d92ec119c96bcfec3bc094c6ba5fb8dbd79580",
    "patch": "@@ -40,6 +40,7 @@\n import org.mockito.Mockito;\n \n import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.common.util.finder.SimpleFileFinder;\n import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumValue;\n import com.synopsys.integration.detect.configuration.DetectUserFriendlyException;\n import com.synopsys.integration.detect.configuration.ExcludeIncludeEnumFilter;\n@@ -87,36 +88,11 @@ public void testFailWhenMisConfigured() throws DetectUserFriendlyException {\n         DetectorEvaluationOptions evaluationOptions = Mockito.mock(DetectorEvaluationOptions.class);\n         final String projectBomTool = \"testBomTool\";\n \n-        tool.performDetectors(directory, detectorRuleSet, detectorFinderOptions, evaluationOptions, projectBomTool, new ArrayList<>());\n+        tool.performDetectors(directory, detectorRuleSet, detectorFinderOptions, evaluationOptions, projectBomTool, new ArrayList<>(), new SimpleFileFinder());\n \n         Mockito.verify(eventSystem).publishEvent(Mockito.any(EventType.class), Mockito.argThat(new FailureExitCodeRequestMatcher()));\n     }\n \n-    @Test\n-    public void testDetectorFinderException() throws DetectorFinderDirectoryListException {\n-\n-        ExtractionEnvironmentProvider extractionEnvironmentProvider = Mockito.mock(ExtractionEnvironmentProvider.class);\n-        DetectorFinder detectorFinder = Mockito.mock(DetectorFinder.class);\n-        Mockito.when(detectorFinder.findDetectors(Mockito.any(), Mockito.any(), Mockito.any())).thenThrow(DetectorFinderDirectoryListException.class);\n-        EventSystem eventSystem = Mockito.mock(EventSystem.class);\n-        CodeLocationConverter codeLocationConverter = Mockito.mock(CodeLocationConverter.class);\n-        DetectorIssuePublisher detectorIssuePublisher = Mockito.mock(DetectorIssuePublisher.class);\n-\n-        DetectorTool tool = new DetectorTool(detectorFinder, extractionEnvironmentProvider, eventSystem, codeLocationConverter, detectorIssuePublisher);\n-\n-        File directory = new File(\".\");\n-        DetectorRuleSet detectorRuleSet = Mockito.mock(DetectorRuleSet.class);\n-        DetectorFinderOptions detectorFinderOptions = Mockito.mock(DetectorFinderOptions.class);\n-        DetectorEvaluationOptions evaluationOptions = Mockito.mock(DetectorEvaluationOptions.class);\n-        final String projectBomTool = \"testBomTool\";\n-        try {\n-            tool.performDetectors(directory, detectorRuleSet, detectorFinderOptions, evaluationOptions, projectBomTool, new ArrayList<>());\n-            fail();\n-        } catch (DetectUserFriendlyException ex) {\n-            //pass\n-        }\n-    }\n-\n     @Test\n     public void testSuccess() throws DetectUserFriendlyException, DetectorFinderDirectoryListException, DetectableException {\n         Extraction extraction = createSuccessExtraction();\n@@ -203,9 +179,9 @@ private DetectorToolResult executeToolTest(Extraction extraction, DetectableResu\n         DetectorEvaluationOptions evaluationOptions = createEvaluationOptions();\n \n         DetectorEvaluationTree evaluationTree = createEvaluationTree(extraction, extractionResult, directory, rule, detectorRuleSet);\n-        Mockito.when(detectorFinder.findDetectors(Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(Optional.of(evaluationTree));\n+        Mockito.when(detectorFinder.findDetectors(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(Optional.of(evaluationTree));\n \n-        return tool.performDetectors(directory, detectorRuleSet, detectorFinderOptions, evaluationOptions, projectBomTool, new ArrayList<>());\n+        return tool.performDetectors(directory, detectorRuleSet, detectorFinderOptions, evaluationOptions, projectBomTool, new ArrayList<>(), new SimpleFileFinder());\n     }\n \n     private GoModCliDetectable createDetectable(Extraction extraction, DetectableResult extractionResult) throws DetectableException {"
  }
]
