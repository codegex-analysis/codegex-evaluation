[
  {
    "sha": "0ac81e203804fe4e64b47ee802edfeea94a42b0b",
    "filename": "src/main/java/com/jwplayer/jwplatform/client/AdvertisingClient.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/client/AdvertisingClient.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/client/AdvertisingClient.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/client/AdvertisingClient.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,42 @@\n+package com.jwplayer.jwplatform.client;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * JW Platform Advertising API client.\n+ *\n+ * <p>An API client for the JW Platform Advertising API. For the API documentation see:\n+ * https://developer.jwplayer.com/jwplayer/reference#introduction-to-api-v2\n+ *\n+ * <p>Example:\n+ *    AdvertisingClient client = AdvertisingClient.getClient(secret);\n+ */\n+public class AdvertisingClient{\n+\n+\tprivate String path;\n+\tprivate final String secret;\n+\tprivate static Map<String,String> headers;\n+\t\n+\t/**\n+\t   * Instantiate a new {@code AdvertisingClient} instance.\n+\t   *\n+\t   * @param secret - your api secret\n+\t   */\n+\tprivate AdvertisingClient(String secret) {\n+\t\tthis.secret = secret;\n+\t\tthis.path = \"https://api.jwplayer.com/v2/sites/%s/advertising/schedules\";\n+\t\theaders = new HashMap<>();\n+\t\theaders.put(\"Authorization\", \"Bearer \"+secret);\n+\t\theaders.put(\"accept\", \"application/json\");\n+\t\theaders.put(\"Content-Type\", \"application/json\");\n+\t}\n+\t\n+\tpublic static AdvertisingClient getClient(String secret) {\n+\t\tPreconditions.checkNotNull(secret, \"API Secret must not be null!\");\n+\t\treturn new AdvertisingClient(secret);\n+\t}\n+\n+}"
  },
  {
    "sha": "3720becb529632b5b69b54bb09cf1717a96b32d6",
    "filename": "src/main/java/com/jwplayer/jwplatform/client/MediaClient.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/client/MediaClient.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/client/MediaClient.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/client/MediaClient.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,158 @@\n+package com.jwplayer.jwplatform.client;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.json.JSONObject;\n+\n+import com.google.common.base.Preconditions;\n+import com.jwplayer.jwplatform.exception.JWPlatformException;\n+import com.jwplayer.jwplatform.rest.HttpCalls;\n+\n+/**\n+ * JW Platform Media API client.\n+ *\n+ * <p>An API client for the JW Platform Media API. For the API documentation see:\n+ * https://developer.jwplayer.com/jwplayer/reference#introduction-to-api-v2\n+ *\n+ * <p>Example:\n+ *    MediaClient client = MediaClient.getClient(secret);\n+ */\n+public class MediaClient{\n+\n+\tprivate String path;\t\n+\tprivate final String secret;\n+\tprivate static Map<String,String> headers;\n+\t\n+\t/**\n+\t   * Instantiate a new {@code MediaClient} instance.\n+\t   *\n+\t   * @param secret - your api secret\n+\t   */\n+\tprivate MediaClient(String secret) {\n+\t\tthis.secret = secret;\n+\t\tthis.path = \"https://api.jwplayer.com/v2/sites/%s/media/\";\n+\t\theaders = new HashMap<>();\n+\t\theaders.put(\"Authorization\", \"Bearer \"+this.secret);\n+\t\theaders.put(\"accept\", \"application/json\");\n+\t\theaders.put(\"Content-Type\", \"application/json\");\n+\t}\n+\t\n+\t/**\n+\t   * see {@link #MediaClient(String)}.\n+\t   */\n+\tpublic static MediaClient getClient(String secret) {\n+\t\tPreconditions.checkNotNull(secret, \"API Secret must not be null!\");\n+\t\treturn new MediaClient(secret);\n+\t}\n+\t\n+\t/**\n+\t * Add custom/additional headers\n+\t * @param key\n+\t * @param value\n+\t */\n+\tpublic void addHeader(String key, String value) {\n+\t\theaders.put(key, value);\n+\t}\n+\t\n+\t/**\n+\t * Remove a header\n+\t * @param key\n+\t */\n+\tpublic void removeHeader(String key) {\n+\t\theaders.remove(key);\n+\t}\n+\t\n+\t/**\n+\t * \n+\t * @param siteId\n+\t * @param params\n+\t * @return JSON response from Media API\n+\t * @throws JWPlatformException\n+\t * See https://developer.jwplayer.com/jwplayer/reference#get_v2-sites-site-id-media\n+\t */\n+\tpublic JSONObject listAllMedia(String siteId, Map<String, String> params) throws JWPlatformException {\n+\t\tPreconditions.checkNotNull(siteId, \"Site ID must not be null!\");\n+\t\tthis.path = String.format(this.path, siteId);\n+\t\treturn HttpCalls.request(this.path, params, false, \"GET\", headers);\n+\t}\n+\n+\t/**\n+\t * \n+\t * @param siteId\n+\t * @param bodyParams\n+\t * @return JSON response from Media API\n+\t * @throws JWPlatformException\n+\t * See https://developer.jwplayer.com/jwplayer/reference#post_v2-sites-site-id-media\n+\t */\n+\tpublic JSONObject createMedia(String siteId, Map<String, String> bodyParams) throws JWPlatformException {\n+\t\tPreconditions.checkNotNull(siteId, \"Site ID must not be null!\");\n+\t\tthis.path = String.format(this.path, siteId);\n+\t\tboolean isBodyParams = bodyParams.size()>0;\n+\t\treturn HttpCalls.request(this.path, bodyParams, isBodyParams, \"POST\", headers);\n+\t}\n+\t\n+\t/**\n+\t * \n+\t * @param siteId\n+\t * @param mediaId\n+\t * @param params\n+\t * @return JSON response from Media API\n+\t * @throws JWPlatformException\n+\t * See https://developer.jwplayer.com/jwplayer/reference#get_v2-sites-site-id-media-media-id-\n+\t */\n+\tpublic JSONObject retrieveMediaById(String siteId, String mediaId, Map<String, String> params) throws JWPlatformException {\n+\t\tPreconditions.checkNotNull(siteId, \"Site ID must not be null!\");\n+\t\tPreconditions.checkNotNull(mediaId, \"Media ID must not be null!\");\n+\t\tthis.path = String.format(this.path, siteId)+mediaId+\"/\";\n+\t\treturn HttpCalls.request(this.path, params, false, \"GET\", headers);\n+\t}\n+\n+\t/**\n+\t * \n+\t * @param siteId\n+\t * @param mediaId\n+\t * @return JSON response from Media API\n+\t * @throws JWPlatformException\n+\t * See https://developer.jwplayer.com/jwplayer/reference#delete_v2-sites-site-id-media-media-id-\n+\t */\n+\tpublic JSONObject deleteMedia(String siteId, String mediaId) throws JWPlatformException {\n+\t\tPreconditions.checkNotNull(siteId, \"Site ID must not be null!\");\n+\t\tPreconditions.checkNotNull(mediaId, \"Media ID must not be null!\");\n+\t\tthis.path = String.format(this.path, siteId)+mediaId+\"/\";\n+\t\treturn HttpCalls.request(this.path, new HashMap<>(), false, \"DELETE\", headers);\n+\t}\n+\t\n+\t/**\n+\t * \n+\t * @param siteId\n+\t * @param mediaId\n+\t * @param bodyParams\n+\t * @return JSON response from Media API\n+\t * @throws JWPlatformException\n+\t * See https://developer.jwplayer.com/jwplayer/reference#patch_v2-sites-site-id-media-media-id-\n+\t */\n+\tpublic JSONObject updateMedia(String siteId, String mediaId, Map<String, String> bodyParams) throws JWPlatformException {\n+\t\tPreconditions.checkNotNull(siteId, \"Site ID must not be null!\");\n+\t\tPreconditions.checkNotNull(mediaId, \"Media ID must not be null!\");\n+\t\tthis.path = String.format(this.path, siteId)+mediaId+\"/\";\n+\t\tboolean isBodyParams = bodyParams.size()>0;\n+\t\treturn HttpCalls.request(this.path, bodyParams, isBodyParams, \"PATCH\", headers);\n+\t}\n+\t\n+\t/**\n+\t * \n+\t * @param siteId\n+\t * @param mediaId\n+\t * @param bodyParams\n+\t * @return JSON response from Media API\n+\t * @throws JWPlatformException\n+\t * See https://developer.jwplayer.com/jwplayer/reference#put_v2-sites-site-id-media-media-id-reupload\n+\t */\n+\tpublic JSONObject reuploadMedia(String siteId, String mediaId, Map<String, String> bodyParams) throws JWPlatformException {\n+\t\tPreconditions.checkNotNull(siteId, \"Site ID must not be null!\");\n+\t\tPreconditions.checkNotNull(mediaId, \"Media ID must not be null!\");\n+\t\tthis.path = String.format(this.path, siteId)+mediaId+\"/reupload/\";\n+\t\treturn HttpCalls.request(this.path, bodyParams, false, \"PUT\", headers);\n+\t}\n+}"
  },
  {
    "sha": "da886a30a8461b5ba384912e56fe4f09304351f4",
    "filename": "src/main/java/com/jwplayer/jwplatform/resource/Custom_Params.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Custom_Params.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Custom_Params.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/resource/Custom_Params.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,5 @@\n+package com.jwplayer.jwplatform.resource;\n+\n+public class Custom_Params {\n+\n+}"
  },
  {
    "sha": "faa75f54c944706efbe40e9f4dfc2fadb1351dcf",
    "filename": "src/main/java/com/jwplayer/jwplatform/resource/Media.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Media.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Media.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/resource/Media.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,5 @@\n+package com.jwplayer.jwplatform.resource;\n+\n+public class Media {\n+\n+}"
  },
  {
    "sha": "07a19e7d9c95009b47b09c3b81d56f461f5150e3",
    "filename": "src/main/java/com/jwplayer/jwplatform/resource/Metadata.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Metadata.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Metadata.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/resource/Metadata.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,5 @@\n+package com.jwplayer.jwplatform.resource;\n+\n+public class Metadata {\n+\n+}"
  },
  {
    "sha": "46a62e94c4c3d13b4d92a4fe9f4fcb2646a5ae1f",
    "filename": "src/main/java/com/jwplayer/jwplatform/resource/Protection_Rule.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Protection_Rule.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Protection_Rule.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/resource/Protection_Rule.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,5 @@\n+package com.jwplayer.jwplatform.resource;\n+\n+public class Protection_Rule {\n+\n+}"
  },
  {
    "sha": "eb3a9f64df321a955346544c31048cc788e70663",
    "filename": "src/main/java/com/jwplayer/jwplatform/resource/Relationships.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Relationships.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/resource/Relationships.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/resource/Relationships.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,5 @@\n+package com.jwplayer.jwplatform.resource;\n+\n+public class Relationships {\n+\n+}"
  },
  {
    "sha": "7d58b758681343d4123fca9e1cfc703eb62a542a",
    "filename": "src/main/java/com/jwplayer/jwplatform/rest/HttpCalls.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/rest/HttpCalls.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/rest/HttpCalls.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/rest/HttpCalls.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,101 @@\n+package com.jwplayer.jwplatform.rest;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.json.JSONObject;\n+\n+import com.jwplayer.jwplatform.exception.JWPlatformException;\n+import com.jwplayer.jwplatform.exception.JWPlatformUnknownException;\n+import com.jwplayer.jwplatform.utils.Util;\n+import com.mashape.unirest.http.HttpResponse;\n+import com.mashape.unirest.http.JsonNode;\n+import com.mashape.unirest.http.Unirest;\n+import com.mashape.unirest.http.exceptions.UnirestException;\n+\n+public class HttpCalls {\n+\n+\tpublic static JSONObject request(final String path, final Map<String, String> params, final boolean isBodyParams,\n+\t\t\tfinal String requestType, final Map<String, String> headers) throws JWPlatformException {\n+\t\tfinal String requestUrl;\n+\t\tfinal HttpResponse<JsonNode> response;\n+\n+\t\ttry {\n+\t\t\tswitch (requestType.toUpperCase()) {\n+\t\t\tcase \"GET\":\n+\t\t\t\tresponse = Unirest.get(path).headers(headers).asJson();\n+\t\t\t\tbreak;\n+\t\t\tcase \"POST\":\n+\t\t\t\tif (isBodyParams) {\n+\t\t\t\t\trequestUrl = buildRequestUrl(path, Collections.emptyMap());\n+\t\t\t\t\tresponse = Unirest.post(requestUrl).headers(headers).body(new JSONObject(params)).asJson();\n+\t\t\t\t} else {\n+\t\t\t\t\trequestUrl = buildRequestUrl(path, params);\n+\t\t\t\t\tresponse = Unirest.post(requestUrl).asJson();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase \"PATCH\":\n+\t\t\t\tif (isBodyParams) {\n+\t\t\t\t\trequestUrl = buildRequestUrl(path, Collections.emptyMap());\n+\t\t\t\t\tresponse = Unirest.patch(requestUrl).headers(headers).body(new JSONObject(params)).asJson();\n+\t\t\t\t} else {\n+\t\t\t\t\trequestUrl = buildRequestUrl(path, params);\n+\t\t\t\t\tresponse = Unirest.patch(requestUrl).asJson();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase \"PUT\":\n+\t\t\t\tif (isBodyParams) {\n+\t\t\t\t\trequestUrl = buildRequestUrl(path, Collections.emptyMap());\n+\t\t\t\t\tresponse = Unirest.put(requestUrl).headers(headers).body(new JSONObject(params)).asJson();\n+\t\t\t\t} else {\n+\t\t\t\t\trequestUrl = buildRequestUrl(path, params);\n+\t\t\t\t\tresponse = Unirest.put(requestUrl).asJson();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase \"DELETE\":\n+\t\t\t\tresponse = Unirest.delete(path).headers(headers).asJson();\n+\t\t\t\tif(response.getStatus()== 201 || response.getStatus()== 200 || response.getStatus() == 204) return new JSONObject(\"{\\\"message\\\":\\\"Deletion successful\\\"}\");\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new JWPlatformException(String.format(\"%s is not a supported request type.\", requestType));\n+\t\t\t}\n+\t\t\tfinal JSONObject responseBlock = response.getBody().getObject();\n+\t\t\tUtil.checkForNon200Response(response.getStatus(), responseBlock);\n+\t\t\treturn responseBlock;\n+\t\t} catch (final UnirestException e) {\n+\t\t\tthrow new JWPlatformUnknownException(String.format(\"Non-JSON response from server: %s\", e.toString()));\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t   * Generates fully formed URL for api request.\n+\t   *\n+\t   * @param path - endpoint to be used in API request which includes a leading slash (ie /my/path not my/path)\n+\t   * @param params - Parameters to be included in the request\n+\t   * @return - Fully formed request URL for an API request with api signature\n+\t   * @throws JWPlatformException - an exception occurred during encoding\n+\t   */\n+\t  private static String buildRequestUrl(\n+\t      final String path, final Map<String, String> params)\n+\t      throws JWPlatformException {\n+\t    final TreeMap<String, String> orderedParams = new TreeMap<>(params);\n+\t    orderedParams.put(\"api_format\", \"json\");\n+\t    orderedParams.put(\"api_nonce\", Util.getRandomNonce());\n+\t    orderedParams.put(\"api_timestamp\", Util.getCurrentUnixTimestampInSeconds());\n+\n+\t    final StringBuilder encodedParams = new StringBuilder();\n+\t    for (final String param : orderedParams.keySet()) {\n+\t      if (encodedParams.length() != 0) {\n+\t        encodedParams.append(\"&\");\n+\t      }\n+\t      final String encodedValue = Util.encodeStringForJWPlatformAPI(orderedParams.get(param));\n+\t      encodedParams.append(param).append(\"=\").append(encodedValue);\n+\t    }\n+\n+\t    return path + \"?\" + encodedParams.toString();\n+\t  }\n+\t  \n+\t  \n+\n+}"
  },
  {
    "sha": "aa4de003e2ba24c549cdde4626702fa2060d55e5",
    "filename": "src/main/java/com/jwplayer/jwplatform/utils/Util.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/utils/Util.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/utils/Util.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/utils/Util.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -0,0 +1,77 @@\n+package com.jwplayer.jwplatform.utils;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.util.Date;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import com.jwplayer.jwplatform.exception.JWPlatformException;\n+import com.jwplayer.jwplatform.exception.JWPlatformUnknownException;\n+import com.jwplayer.jwplatform.exception.MediaAPIExceptionFactory;\n+\n+public class Util {\n+\t/**\n+\t   * URL encodes a {@code String}, then modifies it to be compliant with the JW Platform API.\n+\t   *\n+\t   * @param stringToEncode - the {@code String} to be URL Encoded\n+\t   * @return - JW Platform API compliant encoded {@code String}\n+\t   * @throws JWPlatformException - an exception occurred trying to encode the requested\n+\t   *     {@code String}\n+\t   */\n+\t  public static String encodeStringForJWPlatformAPI(final String stringToEncode)\n+\t          throws JWPlatformException {\n+\t    try {\n+\t      final String encodedValue = URLEncoder.encode(stringToEncode, \"utf-8\");\n+\n+\t      // string replacements to align with the API\n+\t      return encodedValue.replace(\"%7E\", \"~\").replace(\"*\", \"%2A\").replace(\"+\", \"%20\");\n+\t    } catch (final UnsupportedEncodingException e) {\n+\t      throw new JWPlatformUnknownException(\n+\t              String.format(\"Exception thrown encoding URL parameter %s\", e.toString()));\n+\t    }\n+\t  }\n+\t  \n+\t  /**\n+\t   * Check if the API response is an non-200. If so, throw the\n+\t   * appropriate JWPlatformException exception based on the\n+\t   * error message.\n+\t   *\n+\t   * @param statusCode - the response status code\n+\t   * @param response - a {@code JSONObject} object with the API response block\n+\t   * @throws JWPlatformException - API returned an exception\n+\t   */\n+\t  public static void checkForNon200Response(final int statusCode, final JSONObject response)\n+\t          throws JWPlatformException {\n+\t    if (statusCode != 200 && statusCode != 201) {\n+\t      try {\n+\t        MediaAPIExceptionFactory.throwJWPlatformException(\n+\t                StringUtils.stripEnd(response.getString(\"code\"), \"Error\"), response.toString());\n+\t      } catch (final JSONException e) {\n+\t        throw new JWPlatformUnknownException(\n+\t                String.format(\"Unknown JSONException thrown: %s\", e.toString()));\n+\t      }\n+\t    }\n+\t  }\n+\t  \n+\t  /**\n+\t   * Returns the current unix timestamp in seconds.\n+\t   *\n+\t   * @return - unix timestamp in seconds\n+\t   */\n+\t  public static String getCurrentUnixTimestampInSeconds() {\n+\t    return Long.toString((new Date()).getTime() / 1000);\n+\t  }\n+\n+\t  /**\n+\t   * Generate a random 8 digit {@code Integer} as a {@code String}.\n+\t   *\n+\t   * @return - random 8 digit {@code Integer}\n+\t   */\n+\t  public static String getRandomNonce() {\n+\t    return Integer.toString(ThreadLocalRandom.current().nextInt(10000000, 100000000));\n+\t  }\n+}"
  },
  {
    "sha": "82054af94f5a717826623c1510c7e7e2649235a0",
    "filename": "src/main/java/com/jwplayer/jwplatform/v1/JWPlatformClient.java",
    "status": "renamed",
    "additions": 18,
    "deletions": 83,
    "changes": 101,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/v1/JWPlatformClient.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/main/java/com/jwplayer/jwplatform/v1/JWPlatformClient.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/main/java/com/jwplayer/jwplatform/v1/JWPlatformClient.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -1,33 +1,29 @@\n-package com.jwplayer.jwplatform;\n+package com.jwplayer.jwplatform.v1;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.io.CharStreams;\n-import com.jwplayer.jwplatform.exception.JWPlatformException;\n-import com.jwplayer.jwplatform.exception.JWPlatformUnknownException;\n-import com.jwplayer.jwplatform.exception.MediaAPIExceptionFactory;\n-import com.mashape.unirest.http.HttpResponse;\n-import com.mashape.unirest.http.JsonNode;\n-import com.mashape.unirest.http.Unirest;\n-import com.mashape.unirest.http.exceptions.UnirestException;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n-import java.io.UnsupportedEncodingException;\n-import java.net.URLEncoder;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.TreeMap;\n-import java.util.concurrent.ThreadLocalRandom;\n+\n import org.apache.commons.codec.digest.DigestUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.json.JSONException;\n import org.json.JSONObject;\n import org.json.XML;\n \n+import com.google.common.base.Preconditions;\n+import com.google.common.io.CharStreams;\n+import com.jwplayer.jwplatform.exception.JWPlatformException;\n+import com.jwplayer.jwplatform.exception.JWPlatformUnknownException;\n+import com.jwplayer.jwplatform.utils.Util;\n+import com.mashape.unirest.http.HttpResponse;\n+import com.mashape.unirest.http.JsonNode;\n+import com.mashape.unirest.http.Unirest;\n+import com.mashape.unirest.http.exceptions.UnirestException;\n+\n /**\n  * JW Platform API client.\n  *\n@@ -73,68 +69,7 @@ public static JWPlatformClient create(final String apiKey, final String apiSecre\n \n     return new JWPlatformClient(apiKey, apiSecret, host);\n   }\n-\n-  /**\n-   * Returns the current unix timestamp in seconds.\n-   *\n-   * @return - unix timestamp in seconds\n-   */\n-  private String getCurrentUnixTimestampInSeconds() {\n-    return Long.toString((new Date()).getTime() / 1000);\n-  }\n-\n-  /**\n-   * Generate a random 8 digit {@code Integer} as a {@code String}.\n-   *\n-   * @return - random 8 digit {@code Integer}\n-   */\n-  private String getRandomNonce() {\n-    return Integer.toString(ThreadLocalRandom.current().nextInt(10000000, 100000000));\n-  }\n-\n-  /**\n-   * URL encodes a {@code String}, then modifies it to be compliant with the JW Platform API.\n-   *\n-   * @param stringToEncode - the {@code String} to be URL Encoded\n-   * @return - JW Platform API compliant encoded {@code String}\n-   * @throws JWPlatformException - an exception occurred trying to encode the requested\n-   *     {@code String}\n-   */\n-  private String encodeStringForJWPlatformAPI(final String stringToEncode)\n-          throws JWPlatformException {\n-    try {\n-      final String encodedValue = URLEncoder.encode(stringToEncode, \"utf-8\");\n-\n-      // string replacements to align with the API\n-      return encodedValue.replace(\"%7E\", \"~\").replace(\"*\", \"%2A\").replace(\"+\", \"%20\");\n-    } catch (final UnsupportedEncodingException e) {\n-      throw new JWPlatformUnknownException(\n-              String.format(\"Exception thrown encoding URL parameter %s\", e.toString()));\n-    }\n-  }\n-\n-  /**\n-   * Check if the API response is an non-200. If so, throw the\n-   * appropriate JWPlatformException exception based on the\n-   * error message.\n-   *\n-   * @param statusCode - the response status code\n-   * @param response - a {@code JSONObject} object with the API response block\n-   * @throws JWPlatformException - API returned an exception\n-   */\n-  private void checkForNon200Response(final int statusCode, final JSONObject response)\n-          throws JWPlatformException {\n-    if (statusCode != 200) {\n-      try {\n-        MediaAPIExceptionFactory.throwJWPlatformException(\n-                StringUtils.stripEnd(response.getString(\"code\"), \"Error\"), response.toString());\n-      } catch (final JSONException e) {\n-        throw new JWPlatformUnknownException(\n-                String.format(\"Unknown JSONException thrown: %s\", e.toString()));\n-      }\n-    }\n-  }\n-\n+  \n   /**\n    * Generates fully formed URL for api request.\n    *\n@@ -149,15 +84,15 @@ private String buildRequestUrl(\n     final TreeMap<String, String> orderedParams = new TreeMap<>(params);\n     orderedParams.put(\"api_key\", this.apiKey);\n     orderedParams.put(\"api_format\", \"json\");\n-    orderedParams.put(\"api_nonce\", this.getRandomNonce());\n-    orderedParams.put(\"api_timestamp\", this.getCurrentUnixTimestampInSeconds());\n+    orderedParams.put(\"api_nonce\", Util.getRandomNonce());\n+    orderedParams.put(\"api_timestamp\", Util.getCurrentUnixTimestampInSeconds());\n \n     final StringBuilder encodedParams = new StringBuilder();\n     for (final String param : orderedParams.keySet()) {\n       if (encodedParams.length() != 0) {\n         encodedParams.append(\"&\");\n       }\n-      final String encodedValue = encodeStringForJWPlatformAPI(orderedParams.get(param));\n+      final String encodedValue = Util.encodeStringForJWPlatformAPI(orderedParams.get(param));\n       encodedParams.append(param).append(\"=\").append(encodedValue);\n     }\n \n@@ -191,7 +126,7 @@ private JSONObject uploadVideo(final String uploadPath, final String localFilePa\n       final Reader reader = new InputStreamReader(r.getBody());\n       response = XML.toJSONObject(CharStreams.toString(reader));\n \n-      checkForNon200Response(r.getStatus(), response.getJSONObject(\"response\"));\n+      Util.checkForNon200Response(r.getStatus(), response.getJSONObject(\"response\"));\n     } catch (final UnirestException | IOException e) {\n       throw new JWPlatformUnknownException(\n               String.format(\"Non-JSON response from server: %s\", e.toString()));\n@@ -279,7 +214,7 @@ public JSONObject request(final String path, final Map<String, String> params,\n           throw new JWPlatformException(String.format(\"%s is not a supported request type.\", requestType));\n       }\n       final JSONObject responseBlock = response.getBody().getObject();\n-      checkForNon200Response(response.getStatus(), responseBlock);\n+      Util.checkForNon200Response(response.getStatus(), responseBlock);\n \n       return responseBlock;\n     } catch (final UnirestException e) {",
    "previous_filename": "src/main/java/com/jwplayer/jwplatform/JWPlatformClient.java"
  },
  {
    "sha": "e52f6de31e4d5271998e93b22266a92a17e7139d",
    "filename": "src/test/java/com/jwplayer/jwplatform/exception/TestJWPlatformClientExceptions.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/test/java/com/jwplayer/jwplatform/exception/TestJWPlatformClientExceptions.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/test/java/com/jwplayer/jwplatform/exception/TestJWPlatformClientExceptions.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/test/java/com/jwplayer/jwplatform/exception/TestJWPlatformClientExceptions.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -5,7 +5,7 @@\n import static org.mockito.Mockito.when;\n import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import com.jwplayer.jwplatform.JWPlatformClient;\n+import com.jwplayer.jwplatform.v1.JWPlatformClient;\n import com.mashape.unirest.http.HttpResponse;\n import com.mashape.unirest.http.JsonNode;\n import com.mashape.unirest.http.Unirest;"
  },
  {
    "sha": "7a5ca38e1f42b12f5d778e82d561908aaeb01ebf",
    "filename": "src/test/java/com/jwplayer/jwplatform/v1/TestJWPlatformClient.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/jwplayer/jwplatform-java/blob/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/test/java/com/jwplayer/jwplatform/v1/TestJWPlatformClient.java",
    "raw_url": "https://github.com/jwplayer/jwplatform-java/raw/999c71dea0d1110da1da33a6d8947a0aba31b7ef/src/test/java/com/jwplayer/jwplatform/v1/TestJWPlatformClient.java",
    "contents_url": "https://api.github.com/repos/jwplayer/jwplatform-java/contents/src/test/java/com/jwplayer/jwplatform/v1/TestJWPlatformClient.java?ref=999c71dea0d1110da1da33a6d8947a0aba31b7ef",
    "patch": "@@ -1,4 +1,4 @@\n-package com.jwplayer.jwplatform;\n+package com.jwplayer.jwplatform.v1;\n \n import static junit.framework.TestCase.fail;\n import static org.junit.Assert.assertEquals;\n@@ -9,6 +9,7 @@\n \n import com.jwplayer.jwplatform.exception.JWPlatformException;\n import com.jwplayer.jwplatform.exception.JWPlatformUnknownException;\n+import com.jwplayer.jwplatform.v1.JWPlatformClient;\n import com.mashape.unirest.http.HttpResponse;\n import com.mashape.unirest.http.JsonNode;\n import com.mashape.unirest.http.Unirest;",
    "previous_filename": "src/test/java/com/jwplayer/jwplatform/TestJWPlatformClient.java"
  }
]
