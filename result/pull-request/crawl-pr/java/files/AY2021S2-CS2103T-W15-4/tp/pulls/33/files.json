[
  {
    "sha": "e763d4c25c10580859809bcfe80b24d093bd7fcc",
    "filename": "src/main/java/seedu/address/commons/core/Messages.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/commons/core/Messages.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/commons/core/Messages.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/commons/core/Messages.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -10,4 +10,6 @@\n     public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX = \"The person index provided is invalid\";\n     public static final String MESSAGE_PERSONS_LISTED_OVERVIEW = \"%1$d persons listed!\";\n \n+    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX = \"The event index provided is invalid\";\n+\n }"
  },
  {
    "sha": "4a769ecb395425640c301e9ffc3cf1adbcd0cc6a",
    "filename": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "status": "modified",
    "additions": 211,
    "deletions": 19,
    "changes": 230,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/logic/commands/EditCommand.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -6,6 +6,7 @@\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;\n import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\n \n import java.util.Collections;\n@@ -15,10 +16,15 @@\n import java.util.Set;\n \n import seedu.address.commons.core.Messages;\n-import seedu.address.commons.core.index.Index;\n import seedu.address.commons.util.CollectionUtil;\n import seedu.address.logic.commands.exceptions.CommandException;\n+import seedu.address.logic.parser.Pair;\n import seedu.address.model.Model;\n+import seedu.address.model.event.Description;\n+import seedu.address.model.event.Event;\n+import seedu.address.model.event.EventName;\n+import seedu.address.model.event.EventStatus;\n+import seedu.address.model.event.EventTime;\n import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n@@ -50,40 +56,82 @@\n     public static final String MESSAGE_NOT_EDITED = \"At least one field to edit must be provided.\";\n     public static final String MESSAGE_DUPLICATE_PERSON = \"This person already exists in the address book.\";\n \n-    private final Index index;\n+    public static final String MESSAGE_EDIT_EVENT_SUCCESS = \"Edited Event: %1$s\";\n+    public static final String MESSAGE_DUPLICATE_EVENT = \"This event already exists in the event book.\";\n+\n+    private final Pair pairedIndex;\n     private final EditPersonDescriptor editPersonDescriptor;\n+    private final EditEventDescriptor editEventDescriptor;\n \n     /**\n-     * @param index of the person in the filtered person list to edit\n+     * @param pairedIndex of the person/event in the filtered person/event list to edit\n      * @param editPersonDescriptor details to edit the person with\n      */\n-    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {\n-        requireNonNull(index);\n+    public EditCommand(Pair pairedIndex, EditPersonDescriptor editPersonDescriptor) {\n+        requireNonNull(pairedIndex);\n         requireNonNull(editPersonDescriptor);\n \n-        this.index = index;\n+        this.pairedIndex = pairedIndex;\n         this.editPersonDescriptor = new EditPersonDescriptor(editPersonDescriptor);\n+        this.editEventDescriptor = null;\n+    }\n+\n+    /**\n+     *\n+     * @param pairedIndex of the person/event in the filtered person/event list to edit\n+     * @param editEventDescriptor details to edit the event with\n+     */\n+    public EditCommand(Pair pairedIndex, EditEventDescriptor editEventDescriptor) {\n+        requireNonNull(pairedIndex);\n+        requireNonNull(editEventDescriptor);\n+\n+        this.pairedIndex = pairedIndex;\n+        this.editPersonDescriptor = null;\n+        this.editEventDescriptor = editEventDescriptor;\n     }\n \n     @Override\n     public CommandResult execute(Model model) throws CommandException {\n         requireNonNull(model);\n-        List<Person> lastShownList = model.getFilteredPersonList();\n+        if (pairedIndex.isEditPerson()) {\n+            List<Person> lastShownList = model.getFilteredPersonList();\n \n-        if (index.getZeroBased() >= lastShownList.size()) {\n-            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n-        }\n+            if (pairedIndex.getIndex().getZeroBased() >= lastShownList.size()) {\n+                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+            }\n+\n+            Person personToEdit = lastShownList.get(pairedIndex.getIndex().getZeroBased());\n+            Person editedPerson = createEditedPerson(personToEdit, editPersonDescriptor);\n+\n+            if (!personToEdit.isSamePerson(editedPerson) && model.hasPerson(editedPerson)) {\n+                throw new CommandException(MESSAGE_DUPLICATE_PERSON);\n+            }\n+\n+            model.setPerson(personToEdit, editedPerson);\n+            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n+            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));\n+        } else {\n+            List<Event> lastShownList = model.getFilteredEventList();\n \n-        Person personToEdit = lastShownList.get(index.getZeroBased());\n-        Person editedPerson = createEditedPerson(personToEdit, editPersonDescriptor);\n+            if (pairedIndex.getIndex().getZeroBased() >= lastShownList.size()) {\n+                //Done: change error message to Event Error\n+                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);\n+            }\n+\n+            Event eventToEdit = lastShownList.get(pairedIndex.getIndex().getZeroBased());\n+            Event editedEvent = createEditedEvent(eventToEdit, editEventDescriptor);\n+\n+            if (!eventToEdit.isSameEvent(editedEvent) && model.hasEvent(editedEvent)) {\n+                //Done: change error message to duplicate event error\n+                throw new CommandException(MESSAGE_DUPLICATE_EVENT);\n+            }\n \n-        if (!personToEdit.isSamePerson(editedPerson) && model.hasPerson(editedPerson)) {\n-            throw new CommandException(MESSAGE_DUPLICATE_PERSON);\n+            model.setEvent(eventToEdit, editedEvent);\n+            model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);\n+            //Done: change success message to event sucess\n+            return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));\n         }\n \n-        model.setPerson(personToEdit, editedPerson);\n-        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n-        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));\n     }\n \n     /**\n@@ -102,6 +150,21 @@ private static Person createEditedPerson(Person personToEdit, EditPersonDescript\n         return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);\n     }\n \n+    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {\n+        assert eventToEdit != null;\n+\n+        EventName updatedEventName = editEventDescriptor.getEventName().orElse(eventToEdit.getName());\n+        EventTime updatedTimeStart = editEventDescriptor.getTimeStart().orElse(eventToEdit.getTimeStart());\n+        EventTime updatedTimeEnd = editEventDescriptor.getTimeEnd().orElse(eventToEdit.getTimeEnd());\n+        EventStatus updatedStatus = editEventDescriptor.getStatus().orElse(eventToEdit.getStatus());\n+        Description updatedDesc = editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());\n+        Set<Tag> updatedTags = editEventDescriptor.getTags().orElse(eventToEdit.getTags());\n+        Set<Person> updatedPersons = editEventDescriptor.getPersons().orElse(eventToEdit.getPersons());\n+\n+        return new Event(updatedEventName, updatedTimeStart, updatedTimeEnd, updatedStatus, updatedDesc,\n+                updatedTags, updatedPersons);\n+    }\n+\n     @Override\n     public boolean equals(Object other) {\n         // short circuit if same object\n@@ -116,8 +179,14 @@ public boolean equals(Object other) {\n \n         // state check\n         EditCommand e = (EditCommand) other;\n-        return index.equals(e.index)\n-                && editPersonDescriptor.equals(e.editPersonDescriptor);\n+        if (e.pairedIndex.isEditPerson()) {\n+            return pairedIndex.getIndex().equals(e.pairedIndex.getIndex())\n+                    && editPersonDescriptor.equals(e.editPersonDescriptor);\n+        } else {\n+            return pairedIndex.getIndex().equals(e.pairedIndex.getIndex())\n+                    && editEventDescriptor.equals(e.editEventDescriptor);\n+        }\n+\n     }\n \n     /**\n@@ -223,4 +292,127 @@ public boolean equals(Object other) {\n                     && getTags().equals(e.getTags());\n         }\n     }\n+\n+    /**\n+     * Stores the details to edit the event with. Each non-empty field value will replace the\n+     * corresponding field value of the event.\n+     */\n+    public static class EditEventDescriptor {\n+        private EventName eventName;\n+        private EventTime timeStart;\n+        private EventTime timeEnd;\n+        private EventStatus status;\n+\n+        private Description description;\n+        private Set<Tag> tags = new HashSet<>();\n+        private Set<Person> persons;\n+\n+        public EditEventDescriptor() {}\n+\n+        /**\n+         * Copy constructor.\n+         * A defensive copy of {@code tags} is used internally.\n+         */\n+        public EditEventDescriptor(EditEventDescriptor toCopy) {\n+            setEventName(toCopy.eventName);\n+            setTimeStart(toCopy.timeStart);\n+            setTimeEnd(toCopy.timeEnd);\n+            setStatus(toCopy.status);\n+            setDescription(toCopy.description);\n+            setTags(toCopy.tags);\n+            setPersons(toCopy.persons);\n+        }\n+\n+        public boolean isAnyFieldEdited() {\n+            return CollectionUtil.isAnyNonNull(eventName, timeStart, timeEnd, status,\n+                    description, tags, persons);\n+        }\n+\n+        /**\n+         * Returns true if at least one field is edited.\n+         */\n+        public Optional<EventName> getEventName() {\n+            return Optional.ofNullable(eventName);\n+        }\n+\n+        public void setEventName(EventName eventName) {\n+            this.eventName = eventName;\n+        }\n+\n+        public Optional<EventTime> getTimeStart() {\n+            return Optional.ofNullable(timeStart);\n+        }\n+\n+        public void setTimeStart(EventTime timeStart) {\n+            this.timeStart = timeStart;\n+        }\n+\n+        public Optional<EventTime> getTimeEnd() {\n+            return Optional.ofNullable(timeEnd);\n+        }\n+\n+        public void setTimeEnd(EventTime timeEnd) {\n+            this.timeEnd = timeEnd;\n+        }\n+\n+        public Optional<EventStatus> getStatus() {\n+            return Optional.ofNullable(status);\n+        }\n+\n+        public void setStatus(EventStatus status) {\n+            this.status = status;\n+        }\n+\n+        public Optional<Description> getDescription() {\n+            return Optional.ofNullable(description);\n+        }\n+\n+        public void setDescription(Description description) {\n+            this.description = description;\n+        }\n+\n+        public Optional<Set<Tag>> getTags() {\n+            return (tags != null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();\n+        }\n+\n+        /**\n+         * Sets {@code tags} to this object's {@code tags}.\n+         * A defensive copy of {@code tags} is used internally.\n+         */\n+        public void setTags(Set<Tag> tags) {\n+            this.tags = (tags != null) ? new HashSet<>(tags) : null;\n+        }\n+\n+\n+        public Optional<Set<Person>> getPersons() {\n+            return (persons != null) ? Optional.of(Collections.unmodifiableSet(persons)) : Optional.empty();\n+        }\n+\n+        public void setPersons(Set<Person> persons) {\n+            this.persons = (persons != null) ? new HashSet<>(persons) : null;\n+        }\n+\n+        @Override\n+        public boolean equals(Object other) {\n+            // short circuit if same object\n+            if (other == this) {\n+                return true;\n+            }\n+\n+            // instanceof handles nulls\n+            if (!(other instanceof EditEventDescriptor)) {\n+                return false;\n+            }\n+\n+            // state check\n+            EditEventDescriptor e = (EditEventDescriptor) other;\n+\n+            return getEventName().equals(e.getEventName())\n+                    && getTimeStart().equals(e.getTimeStart())\n+                    && getTimeEnd().equals(e.getTimeEnd())\n+                    && getStatus().equals(e.getStatus())\n+                    && getDescription().equals(e.getDescription())\n+                    && getTags().equals(e.getTags());\n+        }\n+    }\n }"
  },
  {
    "sha": "9f7bea8237580421989c42ccd8dd96a380076953",
    "filename": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/logic/parser/AddCommandParser.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -38,7 +38,7 @@ public AddCommand parse(String args) throws ParseException {\n             throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\n         }\n \n-        Name name = ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());\n+        Name name = ParserUtil.parsePersonName(argMultimap.getValue(PREFIX_NAME).get());\n         Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\n         Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\n         Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
  },
  {
    "sha": "eb3fc82c2c992c73da78a41c25e9126d33c4d0e4",
    "filename": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/logic/parser/CliSyntax.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -11,5 +11,11 @@\n     public static final Prefix PREFIX_EMAIL = new Prefix(\"e/\");\n     public static final Prefix PREFIX_ADDRESS = new Prefix(\"a/\");\n     public static final Prefix PREFIX_TAG = new Prefix(\"t/\");\n+    /* Added prefixes that relate to Events */\n+    public static final Prefix PREFIX_TIMESTART = new Prefix(\"ts/\");\n+    public static final Prefix PREFIX_TIMEEND = new Prefix(\"te/\");\n+    public static final Prefix PREFIX_STATUS = new Prefix(\"s/\");\n+    public static final Prefix PREFIX_DESC = new Prefix(\"d/\");\n+    public static final Prefix PREFIX_PERSONS = new Prefix(\"ps/\");\n \n }"
  },
  {
    "sha": "b4558d9a2ca2cc39633c826fbc52422d68b5c847",
    "filename": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "status": "modified",
    "additions": 59,
    "deletions": 20,
    "changes": 79,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/logic/parser/EditCommandParser.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -3,10 +3,15 @@\n import static java.util.Objects.requireNonNull;\n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONS;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEEND;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTART;\n \n import java.util.Collection;\n import java.util.Collections;\n@@ -15,6 +20,7 @@\n \n import seedu.address.commons.core.index.Index;\n import seedu.address.logic.commands.EditCommand;\n+import seedu.address.logic.commands.EditCommand.EditEventDescriptor;\n import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n import seedu.address.logic.parser.exceptions.ParseException;\n import seedu.address.model.tag.Tag;\n@@ -32,36 +38,70 @@\n     public EditCommand parse(String args) throws ParseException {\n         requireNonNull(args);\n         ArgumentMultimap argMultimap =\n-                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\n+                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,\n+                        PREFIX_TIMESTART, PREFIX_TIMEEND, PREFIX_STATUS, PREFIX_DESC, PREFIX_PERSONS);\n \n         Index index;\n+        Pair pairedIndex;\n \n         try {\n-            index = ParserUtil.parseIndex(argMultimap.getPreamble());\n+            pairedIndex = IndexParser.parseEditIndex(argMultimap.getPreamble());\n+            //old: index = ParserUtil.parseIndex(argMultimap.getPreamble());\n         } catch (ParseException pe) {\n             throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);\n         }\n \n-        EditPersonDescriptor editPersonDescriptor = new EditPersonDescriptor();\n-        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {\n-            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));\n-        }\n-        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {\n-            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));\n-        }\n-        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {\n-            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));\n-        }\n-        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {\n-            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));\n-        }\n-        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);\n+        EditPersonDescriptor editPersonDescriptor;\n+        EditEventDescriptor editEventDescriptor;\n \n-        if (!editPersonDescriptor.isAnyFieldEdited()) {\n-            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);\n+        EditCommand editCommand;\n+\n+        if (pairedIndex.isEditPerson()) {\n+            editPersonDescriptor = new EditPersonDescriptor();\n+            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {\n+                editPersonDescriptor.setName(ParserUtil.parsePersonName(argMultimap.getValue(PREFIX_NAME).get()));\n+            }\n+            if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {\n+                editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));\n+            }\n+            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {\n+                editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));\n+            }\n+            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {\n+                editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));\n+            }\n+            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);\n+\n+            if (!editPersonDescriptor.isAnyFieldEdited()) {\n+                throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);\n+            }\n+            editCommand = new EditCommand(pairedIndex, editPersonDescriptor);\n+        } else {\n+            editEventDescriptor = new EditEventDescriptor();\n+            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {\n+                editEventDescriptor.setEventName(ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get()));\n+            }\n+            if (argMultimap.getValue(PREFIX_TIMESTART).isPresent()) {\n+                editEventDescriptor.setTimeStart(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIMESTART).get()));\n+            }\n+            if (argMultimap.getValue(PREFIX_TIMEEND).isPresent()) {\n+                editEventDescriptor.setTimeEnd(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIMEEND).get()));\n+            }\n+            if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {\n+                editEventDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));\n+            }\n+            if (argMultimap.getValue(PREFIX_DESC).isPresent()) {\n+                editEventDescriptor.setDescription(ParserUtil.parseDesc(argMultimap.getValue(PREFIX_DESC).get()));\n+            }\n+            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEventDescriptor::setTags);\n+\n+            if (!editEventDescriptor.isAnyFieldEdited()) {\n+                throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);\n+            }\n+            editCommand = new EditCommand(pairedIndex, editEventDescriptor);\n         }\n \n-        return new EditCommand(index, editPersonDescriptor);\n+        return editCommand;\n     }\n \n     /**\n@@ -78,5 +118,4 @@ public EditCommand parse(String args) throws ParseException {\n         Collection<String> tagSet = tags.size() == 1 && tags.contains(\"\") ? Collections.emptySet() : tags;\n         return Optional.of(ParserUtil.parseTags(tagSet));\n     }\n-\n }"
  },
  {
    "sha": "cf3e31b456d2b2d12b0b4a50ad4851a810f7059b",
    "filename": "src/main/java/seedu/address/logic/parser/IndexParser.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/IndexParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/IndexParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/logic/parser/IndexParser.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -0,0 +1,40 @@\n+package seedu.address.logic.parser;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.commons.util.StringUtil;\n+import seedu.address.logic.parser.exceptions.ParseException;\n+\n+/**\n+ * Parses the index used for the edit command.\n+ */\n+public class IndexParser {\n+\n+    public static final String MESSAGE_INVALID_INDEX = \"Index is not a non-zero unsigned integer.\";\n+    public static final String MESSAGE_INVALID_TYPE = \"Type is not a Person(P) or Event(E).\";\n+\n+    /**\n+     * Prases the index given to the edit command.\n+     * @param oneBasedIndex String index\n+     * @return Pair that is used in the Edit command\n+     * @throws ParseException if the index is not valid.\n+     */\n+    public static Pair parseEditIndex(String oneBasedIndex) throws ParseException {\n+        String trimmedIndex = oneBasedIndex.trim();\n+        String type;\n+        String unparsedIndex;\n+        try {\n+            type = trimmedIndex.substring(0, 1);\n+            unparsedIndex = trimmedIndex.substring(1);\n+        } catch (IndexOutOfBoundsException e) {\n+            throw new ParseException(MESSAGE_INVALID_INDEX);\n+        }\n+        if (!StringUtil.isNonZeroUnsignedInteger(unparsedIndex)) {\n+            throw new ParseException(MESSAGE_INVALID_INDEX + unparsedIndex);\n+        }\n+\n+        if (!type.equalsIgnoreCase(\"E\") && !type.equalsIgnoreCase(\"P\")) {\n+            throw new ParseException(MESSAGE_INVALID_TYPE + type);\n+        }\n+        return new Pair(Index.fromOneBased(Integer.parseInt(unparsedIndex)), type);\n+    }\n+}"
  },
  {
    "sha": "6f65c4768aea951301574bed64363f43300f4152",
    "filename": "src/main/java/seedu/address/logic/parser/Pair.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/Pair.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/Pair.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/logic/parser/Pair.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -0,0 +1,33 @@\n+package seedu.address.logic.parser;\n+\n+import seedu.address.commons.core.index.Index;\n+\n+/**\n+ * Pair of Index and Type that is used when parsing the Edit command. Command original String is \"E2\" so Pair stores\n+ * the index and whether it is a Person or an Edit.\n+ */\n+public class Pair {\n+    private final Index index;\n+    private final String type;\n+\n+    /**\n+     * Pair constructor for edit command\n+     */\n+    public Pair(Index index, String type) {\n+        this.index = index;\n+        this.type = type;\n+    }\n+\n+    public Index getIndex() {\n+        return index;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public boolean isEditPerson() {\n+        return type.equals(\"P\");\n+    }\n+\n+}"
  },
  {
    "sha": "9edb3b3a05abf0cdf24d40edef568fcd21a2838a",
    "filename": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "status": "modified",
    "additions": 91,
    "deletions": 1,
    "changes": 92,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/logic/parser/ParserUtil.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -9,6 +9,10 @@\n import seedu.address.commons.core.index.Index;\n import seedu.address.commons.util.StringUtil;\n import seedu.address.logic.parser.exceptions.ParseException;\n+import seedu.address.model.event.Description;\n+import seedu.address.model.event.EventName;\n+import seedu.address.model.event.EventStatus;\n+import seedu.address.model.event.EventTime;\n import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n@@ -41,7 +45,7 @@ public static Index parseIndex(String oneBasedIndex) throws ParseException {\n      *\n      * @throws ParseException if the given {@code name} is invalid.\n      */\n-    public static Name parseName(String name) throws ParseException {\n+    public static Name parsePersonName(String name) throws ParseException {\n         requireNonNull(name);\n         String trimmedName = name.trim();\n         if (!Name.isValidName(trimmedName)) {\n@@ -121,4 +125,90 @@ public static Tag parseTag(String tag) throws ParseException {\n         }\n         return tagSet;\n     }\n+\n+    // to parse all other Events Fields\n+\n+    /**\n+     * Parses an {@code String event name} into a {@code EventName}.\n+     *\n+     * @throws ParseException if the given {@code name} is invalid\n+     */\n+    public static EventName parseEventName(String name) throws ParseException {\n+        requireNonNull(name);\n+        String trimmedName = name.trim();\n+        if (!EventName.isValidName(trimmedName)) {\n+            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);\n+        }\n+        return new EventName(trimmedName);\n+    }\n+\n+    /**\n+     * Parses an {@code String event time} into a {@code EventTime}.\n+     *\n+     * @throws ParseException if the given{@code time} is invalid.\n+     */\n+    public static EventTime parseTime(String time) throws ParseException {\n+        requireNonNull(time);\n+        String trimmedTime = time.trim();\n+        if (!EventTime.isValidEventTime(trimmedTime)) {\n+            throw new ParseException(EventTime.MESSAGE_CONSTRAINTS);\n+        }\n+        return new EventTime(trimmedTime);\n+    }\n+\n+    /**\n+     * Parses an {@code String event status} into a {@code EventStatus}.\n+     */\n+    public static EventStatus parseStatus(String status) throws ParseException {\n+        requireNonNull(status);\n+        String trimmedStatus = status.trim();\n+        boolean isNotValid = false;\n+        for (EventStatus e : EventStatus.values()) {\n+            if (!e.name().equals(trimmedStatus)) {\n+                isNotValid = true;\n+                break;\n+            }\n+        }\n+        if (isNotValid) {\n+            throw new ParseException(EventStatus.MESSAGE_CONSTRAINTS);\n+        }\n+        return EventStatus.valueOf(trimmedStatus);\n+    }\n+\n+    /**\n+     * Parses an {@code String event description} into a {@code Description}.\n+     */\n+    public static Description parseDesc(String desc) throws ParseException {\n+        requireNonNull(desc);\n+        String trimmedDesc = desc.trim();\n+        if (!Description.isValidDescription(trimmedDesc)) {\n+            throw new ParseException(Description.MESSAGE_CONSTRAINTS);\n+        }\n+        return new Description(trimmedDesc);\n+    }\n+\n+    /*\n+    public static Person parsePerson(String personName) throws ParseException {\n+        requireNonNull(personName);\n+        String trimmedPersonName = personName.trim();\n+        if (!Name.isValidName(trimmedPersonName)) {\n+            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);\n+        }\n+\n+        //TODO find way to parse person\n+    }\n+     */\n+\n+    /*\n+    public static Set<Person> parsePersons(Collection<String> persons) throws ParseException {\n+        requireNonNull(persons);\n+        final Set<Person> personSet = new HashSet<>();\n+        for (String personName : persons) {\n+            personSet.add(parsePerson(personName));\n+        }\n+        return personSet;\n+    }\n+\n+     */\n+\n }"
  },
  {
    "sha": "8ad69ae00b0e9e6c2b3a574f41a4601fa2db6e40",
    "filename": "src/main/java/seedu/address/model/event/EventStatus.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/model/event/EventStatus.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/main/java/seedu/address/model/event/EventStatus.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/main/java/seedu/address/model/event/EventStatus.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -3,5 +3,8 @@\n public enum EventStatus {\n     TODO,\n     IN_PROGRESS,\n-    DONE\n+    DONE;\n+\n+    public static final String MESSAGE_CONSTRAINTS = \"Event status should be TODO, IN_PROGRESS, \"\n+            + \"or DONE\";\n }"
  },
  {
    "sha": "b24da732ec3fedfc82a0032c790d7d01aee8f794",
    "filename": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/logic/commands/CommandTestUtil.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -20,6 +20,7 @@\n import seedu.address.model.event.EventStatus;\n import seedu.address.model.person.NameContainsKeywordsPredicate;\n import seedu.address.model.person.Person;\n+import seedu.address.testutil.EditEventDescriptorBuilder;\n import seedu.address.testutil.EditPersonDescriptorBuilder;\n \n /**\n@@ -29,7 +30,7 @@\n \n     public static final String VALID_NAME_CS2030 = \"CS2030\";\n     public static final String VALID_NAME_CS2107 = \"CS2107\";\n-    public static final String VALID_DESCRIPTION_CS2030 = \"Object-oriented Programming\";\n+    public static final String VALID_DESCRIPTION_CS2030 = \"Object oriented Programming\";\n     public static final String VALID_DESCRIPTION_CS2107 = \"Introduction to Information Security\";\n     public static final EventStatus VALID_STATUS_CS2030 = EventStatus.DONE;\n     public static final EventStatus VALID_STATUS_CS2107 = EventStatus.IN_PROGRESS;\n@@ -71,6 +72,8 @@\n \n     public static final EditCommand.EditPersonDescriptor DESC_AMY;\n     public static final EditCommand.EditPersonDescriptor DESC_BOB;\n+    public static final EditCommand.EditEventDescriptor DESC_CS2030;\n+    public static final EditCommand.EditEventDescriptor DESC_CS2107;\n \n     static {\n         DESC_AMY = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)\n@@ -79,6 +82,13 @@\n         DESC_BOB = new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)\n                 .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)\n                 .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();\n+        DESC_CS2030 = new EditEventDescriptorBuilder().withEventName(VALID_NAME_CS2030)\n+                .withDescription(VALID_DESCRIPTION_CS2030).withTimeStart(VALID_TIME_START_CS2030)\n+                .withTimeEnd(VALID_TIME_END_CS2030).build();\n+        DESC_CS2107 = new EditEventDescriptorBuilder().withEventName(VALID_NAME_CS2107)\n+                .withDescription(VALID_DESCRIPTION_CS2107).withTimeStart(VALID_TIME_START_CS2107)\n+                .withTimeEnd(VALID_TIME_END_CS2107).build();\n+\n     }\n \n     /**"
  },
  {
    "sha": "dcd426814e5215db71bfb23ec8e969604ebda694",
    "filename": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "status": "modified",
    "additions": 131,
    "deletions": 17,
    "changes": 148,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/logic/commands/EditCommandTest.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -4,28 +4,45 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;\n+import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2030;\n+import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2107;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2030;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2030;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2030;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_END_CS2030;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_START_CS2030;\n import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;\n import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;\n import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;\n import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;\n import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;\n+import static seedu.address.testutil.TypicalPairedIndexes.INDEX_FIRST_PAIR_EVENT;\n+import static seedu.address.testutil.TypicalPairedIndexes.INDEX_FIRST_PAIR_PERSON;\n+import static seedu.address.testutil.TypicalPairedIndexes.INDEX_SECOND_PAIR_EVENT;\n+import static seedu.address.testutil.TypicalPairedIndexes.INDEX_SECOND_PAIR_PERSON;\n import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;\n \n import org.junit.jupiter.api.Test;\n \n import seedu.address.commons.core.Messages;\n import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.EditCommand.EditEventDescriptor;\n import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n+import seedu.address.logic.parser.Pair;\n import seedu.address.model.AddressBook;\n+import seedu.address.model.EventBook;\n import seedu.address.model.Model;\n import seedu.address.model.ModelManager;\n import seedu.address.model.UserPrefs;\n+import seedu.address.model.event.Event;\n import seedu.address.model.person.Person;\n+import seedu.address.testutil.EditEventDescriptorBuilder;\n import seedu.address.testutil.EditPersonDescriptorBuilder;\n+import seedu.address.testutil.EventBuilder;\n import seedu.address.testutil.PersonBuilder;\n \n /**\n@@ -36,10 +53,10 @@\n     private Model model = new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());\n \n     @Test\n-    public void execute_allFieldsSpecifiedUnfilteredList_success() {\n+    public void execute_allPersonFieldsSpecifiedUnfilteredList_success() {\n         Person editedPerson = new PersonBuilder().build();\n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder(editedPerson).build();\n-        EditCommand editCommand = new EditCommand(INDEX_FIRST_PERSON, descriptor);\n+        EditCommand editCommand = new EditCommand(INDEX_FIRST_PAIR_PERSON, descriptor);\n \n         String expectedMessage = String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);\n \n@@ -50,18 +67,35 @@ public void execute_allFieldsSpecifiedUnfilteredList_success() {\n         assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);\n     }\n \n+    //Edit Event\n     @Test\n-    public void execute_someFieldsSpecifiedUnfilteredList_success() {\n+    public void execute_allEventFieldsSpecifiedUnfilteredList_success() {\n+        Event editedEvent = new EventBuilder().build();\n+        EditEventDescriptor descriptor = new EditEventDescriptorBuilder(editedEvent).build();\n+        EditCommand editCommand = new EditCommand(INDEX_FIRST_PAIR_EVENT, descriptor);\n+\n+        String expectedMessage = String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);\n+\n+        Model expectedModel = new ModelManager(model.getAddressBook(), new UserPrefs(),\n+                new EventBook(model.getEventBook()));\n+        expectedModel.setEvent(model.getFilteredEventList().get(0), editedEvent);\n+\n+        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_somePersonFieldsSpecifiedUnfilteredList_success() {\n         Index indexLastPerson = Index.fromOneBased(model.getFilteredPersonList().size());\n         Person lastPerson = model.getFilteredPersonList().get(indexLastPerson.getZeroBased());\n+        Pair pairedIndexLastPerson = new Pair(indexLastPerson, \"P\");\n \n         PersonBuilder personInList = new PersonBuilder(lastPerson);\n         Person editedPerson = personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)\n                 .withTags(VALID_TAG_HUSBAND).build();\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)\n                 .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();\n-        EditCommand editCommand = new EditCommand(indexLastPerson, descriptor);\n+        EditCommand editCommand = new EditCommand(pairedIndexLastPerson, descriptor);\n \n         String expectedMessage = String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);\n \n@@ -72,9 +106,35 @@ public void execute_someFieldsSpecifiedUnfilteredList_success() {\n         assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);\n     }\n \n+    // Edit Event\n+    @Test\n+    public void execute_someEventFieldsSpecifiedUnfilteredList_success() {\n+        Index indexLastEvent = Index.fromOneBased(model.getFilteredEventList().size());\n+        Event lastEvent = model.getFilteredEventList().get(indexLastEvent.getZeroBased());\n+        Pair pairedIndexLastEvent = new Pair(indexLastEvent, \"E\");\n+\n+        EventBuilder eventInList = new EventBuilder(lastEvent);\n+        Event editedEvent = eventInList.withName(VALID_NAME_CS2030).withDescription(VALID_DESCRIPTION_CS2030)\n+                .withTimeStart(VALID_TIME_START_CS2030).withTimeEnd(VALID_TIME_END_CS2030)\n+                .withStatus(VALID_STATUS_CS2030).build();\n+\n+        EditEventDescriptor descriptor = new EditEventDescriptorBuilder().withEventName(VALID_NAME_CS2030)\n+                .withDescription(VALID_DESCRIPTION_CS2030).withTimeStart(VALID_TIME_START_CS2030)\n+                .withTimeEnd(VALID_TIME_END_CS2030).withStatus(VALID_STATUS_CS2030).build();\n+        EditCommand editCommand = new EditCommand(pairedIndexLastEvent, descriptor);\n+\n+        String expectedMessage = String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);\n+\n+        Model expectedModel = new ModelManager(model.getAddressBook(), new UserPrefs(),\n+                new EventBook(model.getEventBook()));\n+\n+        expectedModel.setEvent(lastEvent, editedEvent);\n+        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);\n+    }\n+\n     @Test\n-    public void execute_noFieldSpecifiedUnfilteredList_success() {\n-        EditCommand editCommand = new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());\n+    public void execute_noPersonFieldSpecifiedUnfilteredList_success() {\n+        EditCommand editCommand = new EditCommand(INDEX_FIRST_PAIR_PERSON, new EditPersonDescriptor());\n         Person editedPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n \n         String expectedMessage = String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);\n@@ -85,13 +145,29 @@ public void execute_noFieldSpecifiedUnfilteredList_success() {\n         assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);\n     }\n \n+    // Edit Event\n+    @Test\n+    public void execute_noEventFieldSpecifiedUnfilteredList_success() {\n+        EditCommand editCommand = new EditCommand(INDEX_FIRST_PAIR_EVENT, new EditEventDescriptor());\n+        Event editedEvent = model.getFilteredEventList().get(INDEX_FIRST_PAIR_EVENT.getIndex().getZeroBased());\n+\n+        String expectedMessage = String.format(EditCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);\n+\n+        Model expectedModel = new ModelManager(model.getAddressBook(), new UserPrefs(),\n+                new EventBook(model.getEventBook()));\n+\n+        System.out.println(\"Test \" + editedEvent.toString());\n+        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+\n     @Test\n-    public void execute_filteredList_success() {\n+    public void execute_filteredPersonList_success() {\n         showPersonAtIndex(model, INDEX_FIRST_PERSON);\n \n         Person personInFilteredList = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n         Person editedPerson = new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();\n-        EditCommand editCommand = new EditCommand(INDEX_FIRST_PERSON,\n+        EditCommand editCommand = new EditCommand(INDEX_FIRST_PAIR_PERSON,\n                 new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());\n \n         String expectedMessage = String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);\n@@ -107,18 +183,28 @@ public void execute_filteredList_success() {\n     public void execute_duplicatePersonUnfilteredList_failure() {\n         Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder(firstPerson).build();\n-        EditCommand editCommand = new EditCommand(INDEX_SECOND_PERSON, descriptor);\n+        EditCommand editCommand = new EditCommand(INDEX_SECOND_PAIR_PERSON, descriptor);\n \n         assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);\n     }\n \n+    // Edit Event\n+    @Test\n+    public void execute_duplicateEventUnfilteredList_failure() {\n+        Event firstEvent = model.getFilteredEventList().get(INDEX_FIRST_PAIR_EVENT.getIndex().getZeroBased());\n+        EditEventDescriptor descriptor = new EditEventDescriptorBuilder(firstEvent).build();\n+        EditCommand editCommand = new EditCommand(INDEX_SECOND_PAIR_EVENT, descriptor);\n+\n+        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EVENT);\n+    }\n+\n     @Test\n     public void execute_duplicatePersonFilteredList_failure() {\n         showPersonAtIndex(model, INDEX_FIRST_PERSON);\n \n         // edit person in filtered list into a duplicate in address book\n         Person personInList = model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());\n-        EditCommand editCommand = new EditCommand(INDEX_FIRST_PERSON,\n+        EditCommand editCommand = new EditCommand(INDEX_FIRST_PAIR_PERSON,\n                 new EditPersonDescriptorBuilder(personInList).build());\n \n         assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);\n@@ -128,7 +214,8 @@ public void execute_duplicatePersonFilteredList_failure() {\n     public void execute_invalidPersonIndexUnfilteredList_failure() {\n         Index outOfBoundIndex = Index.fromOneBased(model.getFilteredPersonList().size() + 1);\n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();\n-        EditCommand editCommand = new EditCommand(outOfBoundIndex, descriptor);\n+        Pair outOfBoundPairedIndex = new Pair(outOfBoundIndex, \"P\");\n+        EditCommand editCommand = new EditCommand(outOfBoundPairedIndex, descriptor);\n \n         assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n     }\n@@ -141,22 +228,49 @@ public void execute_invalidPersonIndexUnfilteredList_failure() {\n     public void execute_invalidPersonIndexFilteredList_failure() {\n         showPersonAtIndex(model, INDEX_FIRST_PERSON);\n         Index outOfBoundIndex = INDEX_SECOND_PERSON;\n+        Pair outOfBoundPairedIndex = new Pair(outOfBoundIndex, \"P\");\n         // ensures that outOfBoundIndex is still in bounds of address book list\n         assertTrue(outOfBoundIndex.getZeroBased() < model.getAddressBook().getPersonList().size());\n \n-        EditCommand editCommand = new EditCommand(outOfBoundIndex,\n+        EditCommand editCommand = new EditCommand(outOfBoundPairedIndex,\n                 new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());\n \n         assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n     }\n \n     @Test\n-    public void equals() {\n-        final EditCommand standardCommand = new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);\n+    public void equalsPerson() {\n+        final EditCommand standardCommand = new EditCommand(INDEX_FIRST_PAIR_PERSON, DESC_AMY);\n \n         // same values -> returns true\n         EditPersonDescriptor copyDescriptor = new EditPersonDescriptor(DESC_AMY);\n-        EditCommand commandWithSameValues = new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);\n+        EditCommand commandWithSameValues = new EditCommand(INDEX_FIRST_PAIR_PERSON, copyDescriptor);\n+        assertTrue(standardCommand.equals(commandWithSameValues));\n+\n+        // same object -> returns true\n+        assertTrue(standardCommand.equals(standardCommand));\n+\n+        // null -> returns false\n+        assertFalse(standardCommand.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(standardCommand.equals(new ClearCommand()));\n+\n+        // different index -> returns false\n+        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PAIR_PERSON, DESC_AMY)));\n+\n+        // different descriptor -> returns false\n+        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PAIR_PERSON, DESC_BOB)));\n+    }\n+\n+    // Edit Event\n+    @Test\n+    public void equalsEvent() {\n+        final EditCommand standardCommand = new EditCommand(INDEX_FIRST_PAIR_EVENT, DESC_CS2030);\n+\n+        // same values -> returns true\n+        EditEventDescriptor copyDescriptor = new EditEventDescriptor(DESC_CS2030);\n+        EditCommand commandWithSameValues = new EditCommand(INDEX_FIRST_PAIR_EVENT, copyDescriptor);\n         assertTrue(standardCommand.equals(commandWithSameValues));\n \n         // same object -> returns true\n@@ -169,10 +283,10 @@ public void equals() {\n         assertFalse(standardCommand.equals(new ClearCommand()));\n \n         // different index -> returns false\n-        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));\n+        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PAIR_EVENT, DESC_CS2030)));\n \n         // different descriptor -> returns false\n-        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));\n+        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PAIR_EVENT, DESC_CS2107)));\n     }\n \n }"
  },
  {
    "sha": "daa2d207ed345468b6d64023d97a8f56f2f659eb",
    "filename": "src/test/java/seedu/address/logic/commands/EditEventDescriptorTest.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/commands/EditEventDescriptorTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/commands/EditEventDescriptorTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/logic/commands/EditEventDescriptorTest.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -0,0 +1,59 @@\n+package seedu.address.logic.commands;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2030;\n+import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2107;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2107;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2107;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2107;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_END_CS2107;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_START_CS2107;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import seedu.address.logic.commands.EditCommand.EditEventDescriptor;\n+import seedu.address.testutil.EditEventDescriptorBuilder;\n+\n+public class EditEventDescriptorTest {\n+\n+    @Test\n+    public void equals() {\n+        // same values -> returns true\n+        EditEventDescriptor descriptorWithSameValues = new EditEventDescriptor(DESC_CS2030);\n+        assertTrue(DESC_CS2030.equals(descriptorWithSameValues));\n+\n+        // same object -> returns true\n+        assertTrue(DESC_CS2030.equals(DESC_CS2030));\n+\n+        // null -> returns false\n+        assertFalse(DESC_CS2030.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(DESC_CS2030.equals(5));\n+\n+        // different values -> returns false\n+        assertFalse(DESC_CS2030.equals(DESC_CS2107));\n+\n+        // different EventName -> returns false\n+        EditEventDescriptor editedCS2030 = new EditEventDescriptorBuilder(DESC_CS2030)\n+                .withEventName(VALID_NAME_CS2107).build();\n+        assertFalse(DESC_CS2030.equals(editedCS2030));\n+\n+        // different Description -> returns false\n+        editedCS2030 = new EditEventDescriptorBuilder(DESC_CS2030).withDescription(VALID_DESCRIPTION_CS2107).build();\n+        assertFalse(DESC_CS2030.equals(editedCS2030));\n+\n+        // different start time -> returns false\n+        editedCS2030 = new EditEventDescriptorBuilder(DESC_CS2030).withTimeStart(VALID_TIME_START_CS2107).build();\n+        assertFalse(DESC_CS2030.equals(editedCS2030));\n+\n+        // different end time -> returns false\n+        editedCS2030 = new EditEventDescriptorBuilder(DESC_CS2030).withTimeEnd(VALID_TIME_END_CS2107).build();\n+        assertFalse(DESC_CS2030.equals(editedCS2030));\n+\n+        // different Status -> returns false\n+        editedCS2030 = new EditEventDescriptorBuilder(DESC_CS2030).withStatus(VALID_STATUS_CS2107).build();\n+        assertFalse(DESC_CS2030.equals(editedCS2030));\n+    }\n+}"
  },
  {
    "sha": "1e3ef3ede7ce104f31fe4bdb1596601d64e18583",
    "filename": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -6,6 +6,7 @@\n import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;\n import static seedu.address.testutil.Assert.assertThrows;\n import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n+import static seedu.address.testutil.TypicalPairedIndexes.INDEX_FIRST_PAIR_PERSON;\n \n import java.util.Arrays;\n import java.util.List;\n@@ -57,9 +58,9 @@ public void parseCommand_delete() throws Exception {\n     public void parseCommand_edit() throws Exception {\n         Person person = new PersonBuilder().build();\n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder(person).build();\n-        EditCommand command = (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"\n+        EditCommand command = (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \" + \"P\"\n                 + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));\n-        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);\n+        assertEquals(new EditCommand(INDEX_FIRST_PAIR_PERSON, descriptor), command);\n     }\n \n     @Test"
  },
  {
    "sha": "f46982cabcba0048d639c8b6c0720eef04db355c",
    "filename": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "status": "modified",
    "additions": 43,
    "deletions": 37,
    "changes": 80,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -58,7 +58,7 @@ public void parse_missingParts_failure() {\n         assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);\n \n         // no field specified\n-        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);\n+        assertParseFailure(parser, \"P1\", EditCommand.MESSAGE_NOT_EDITED);\n \n         // no index and no field specified\n         assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);\n@@ -70,63 +70,65 @@ public void parse_invalidPreamble_failure() {\n         assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);\n \n         // zero index\n-        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);\n+        assertParseFailure(parser, \"P0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);\n \n         // invalid arguments being parsed as preamble\n-        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);\n+        assertParseFailure(parser, \"P1 some random string\", MESSAGE_INVALID_FORMAT);\n \n         // invalid prefix being parsed as preamble\n-        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);\n+        assertParseFailure(parser, \"P1 i/ string\", MESSAGE_INVALID_FORMAT);\n     }\n \n     @Test\n     public void parse_invalidValue_failure() {\n-        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name\n-        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone\n-        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email\n-        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address\n-        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag\n+        assertParseFailure(parser, \"P1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name\n+        assertParseFailure(parser, \"P1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone\n+        assertParseFailure(parser, \"P1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email\n+        assertParseFailure(parser, \"P1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address\n+        assertParseFailure(parser, \"P1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag\n \n         // invalid phone followed by valid email\n-        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);\n+        assertParseFailure(parser, \"P1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);\n \n         // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone\n         // is tested at {@code parse_invalidValueFollowedByValidValue_success()}\n-        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);\n+        assertParseFailure(parser, \"P1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);\n \n         // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,\n         // parsing it together with a valid tag results in error\n-        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);\n-        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\n-        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\n+        assertParseFailure(parser, \"P1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);\n+        assertParseFailure(parser, \"P1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\n+        assertParseFailure(parser, \"P1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);\n \n         // multiple invalid values, but only the first invalid value is captured\n-        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,\n+        assertParseFailure(parser, \"P1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,\n                 Name.MESSAGE_CONSTRAINTS);\n     }\n \n     @Test\n     public void parse_allFieldsSpecified_success() {\n         Index targetIndex = INDEX_SECOND_PERSON;\n-        String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND\n+        String userInput = \"P\" + targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND\n                 + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)\n                 .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)\n                 .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n+        Pair targetPairedIndex = new Pair(targetIndex, \"P\");\n+        EditCommand expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n \n         assertParseSuccess(parser, userInput, expectedCommand);\n     }\n \n     @Test\n     public void parse_someFieldsSpecified_success() {\n         Index targetIndex = INDEX_FIRST_PERSON;\n-        String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;\n+        String userInput = \"P\" + targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\n                 .withEmail(VALID_EMAIL_AMY).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n+        Pair targetPairedIndex = new Pair(targetIndex, \"P\");\n+        EditCommand expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n \n         assertParseSuccess(parser, userInput, expectedCommand);\n     }\n@@ -135,47 +137,49 @@ public void parse_someFieldsSpecified_success() {\n     public void parse_oneFieldSpecified_success() {\n         // name\n         Index targetIndex = INDEX_THIRD_PERSON;\n-        String userInput = targetIndex.getOneBased() + NAME_DESC_AMY;\n+        String userInput = \"P\" + targetIndex.getOneBased() + NAME_DESC_AMY;\n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n+        Pair targetPairedIndex = new Pair(targetIndex, \"P\");\n+        EditCommand expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n         // phone\n-        userInput = targetIndex.getOneBased() + PHONE_DESC_AMY;\n+        userInput = \"P\" + targetIndex.getOneBased() + PHONE_DESC_AMY;\n         descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n+        expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n         // email\n-        userInput = targetIndex.getOneBased() + EMAIL_DESC_AMY;\n+        userInput = \"P\" + targetIndex.getOneBased() + EMAIL_DESC_AMY;\n         descriptor = new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n+        expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n         // address\n-        userInput = targetIndex.getOneBased() + ADDRESS_DESC_AMY;\n+        userInput = \"P\" + targetIndex.getOneBased() + ADDRESS_DESC_AMY;\n         descriptor = new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n+        expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n         // tags\n-        userInput = targetIndex.getOneBased() + TAG_DESC_FRIEND;\n+        userInput = \"P\" + targetIndex.getOneBased() + TAG_DESC_FRIEND;\n         descriptor = new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n+        expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n     }\n \n     @Test\n     public void parse_multipleRepeatedFields_acceptsLast() {\n         Index targetIndex = INDEX_FIRST_PERSON;\n-        String userInput = targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY\n+        String userInput = \"P\" + targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY\n                 + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND\n                 + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\n                 .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n                 .build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n+        Pair targetPairedIndex = new Pair(targetIndex, \"P\");\n+        EditCommand expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n \n         assertParseSuccess(parser, userInput, expectedCommand);\n     }\n@@ -184,27 +188,29 @@ public void parse_multipleRepeatedFields_acceptsLast() {\n     public void parse_invalidValueFollowedByValidValue_success() {\n         // no other valid values specified\n         Index targetIndex = INDEX_FIRST_PERSON;\n-        String userInput = targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;\n+        String userInput = \"P\" + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;\n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n+        Pair targetPairedIndex = new Pair(targetIndex, \"P\");\n+        EditCommand expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n         // other valid values specified\n-        userInput = targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB\n+        userInput = \"P\" + targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB\n                 + PHONE_DESC_BOB;\n         descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\n                 .withAddress(VALID_ADDRESS_BOB).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n+        expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n     }\n \n     @Test\n     public void parse_resetTags_success() {\n         Index targetIndex = INDEX_THIRD_PERSON;\n-        String userInput = targetIndex.getOneBased() + TAG_EMPTY;\n+        String userInput = \"P\" + targetIndex.getOneBased() + TAG_EMPTY;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withTags().build();\n-        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n+        Pair targetPairedIndex = new Pair(targetIndex, \"P\");\n+        EditCommand expectedCommand = new EditCommand(targetPairedIndex, descriptor);\n \n         assertParseSuccess(parser, userInput, expectedCommand);\n     }"
  },
  {
    "sha": "bb2d22dcb38a00497f04adbe5a8f36e17a41311b",
    "filename": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/logic/parser/ParserUtilTest.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -58,25 +58,25 @@ public void parseIndex_validInput_success() throws Exception {\n \n     @Test\n     public void parseName_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseName((String) null));\n+        assertThrows(NullPointerException.class, () -> ParserUtil.parsePersonName((String) null));\n     }\n \n     @Test\n     public void parseName_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseName(INVALID_NAME));\n+        assertThrows(ParseException.class, () -> ParserUtil.parsePersonName(INVALID_NAME));\n     }\n \n     @Test\n     public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {\n         Name expectedName = new Name(VALID_NAME);\n-        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));\n+        assertEquals(expectedName, ParserUtil.parsePersonName(VALID_NAME));\n     }\n \n     @Test\n     public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {\n         String nameWithWhitespace = WHITESPACE + VALID_NAME + WHITESPACE;\n         Name expectedName = new Name(VALID_NAME);\n-        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));\n+        assertEquals(expectedName, ParserUtil.parsePersonName(nameWithWhitespace));\n     }\n \n     @Test"
  },
  {
    "sha": "1a3819119474c97794bba70fd6f9f6850106fc1b",
    "filename": "src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -0,0 +1,80 @@\n+package seedu.address.testutil;\n+\n+import seedu.address.logic.commands.EditCommand.EditEventDescriptor;\n+import seedu.address.model.event.Description;\n+import seedu.address.model.event.Event;\n+import seedu.address.model.event.EventName;\n+import seedu.address.model.event.EventStatus;\n+import seedu.address.model.event.EventTime;\n+\n+public class EditEventDescriptorBuilder {\n+\n+    private EditEventDescriptor descriptor;\n+\n+    public EditEventDescriptorBuilder() {\n+        descriptor = new EditEventDescriptor();\n+    }\n+\n+    public EditEventDescriptorBuilder(EditEventDescriptor descriptor) {\n+        this.descriptor = new EditEventDescriptor(descriptor);\n+    }\n+\n+    /**\n+     * Returns an {@code EditEventDescriptor} with fields containing {@code events}'s details\n+     */\n+    public EditEventDescriptorBuilder(Event event) {\n+        descriptor = new EditEventDescriptor();\n+        descriptor.setEventName(event.getName());\n+        descriptor.setTimeStart(event.getTimeStart());\n+        descriptor.setTimeEnd(event.getTimeEnd());\n+        descriptor.setStatus(event.getStatus());\n+        descriptor.setDescription(event.getDescription());\n+        descriptor.setTags(event.getTags());\n+        descriptor.setPersons(event.getPersons());\n+    }\n+\n+    /**\n+     * Sets the {@code Name} of the {@code EditEventDescriptor} that we are building.\n+     */\n+    public EditEventDescriptorBuilder withEventName(String name) {\n+        descriptor.setEventName(new EventName(name));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@code time start} of the {@code EditEventDescriptor} that we are building.\n+     */\n+    public EditEventDescriptorBuilder withTimeStart(String eventTime) {\n+        descriptor.setTimeStart(new EventTime(eventTime));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@code time end} of the {@code EditEventDescriptor} that we are building.\n+     */\n+    public EditEventDescriptorBuilder withTimeEnd(String eventTime) {\n+        descriptor.setTimeEnd(new EventTime(eventTime));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@code status} of the {@code EditEventDescriptor} that we are building.\n+     */\n+    public EditEventDescriptorBuilder withStatus(EventStatus status) {\n+        descriptor.setStatus(status);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@code description} of the {@code EditEventDescriptor} that we are building.\n+     */\n+    public EditEventDescriptorBuilder withDescription(String description) {\n+        descriptor.setDescription(new Description(description));\n+        return this;\n+    }\n+\n+    public EditEventDescriptor build() {\n+        return descriptor;\n+    }\n+\n+}"
  },
  {
    "sha": "9e350224a2ae307946e3b34073440b1d36679a21",
    "filename": "src/test/java/seedu/address/testutil/TypicalPairedIndexes.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/blob/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/testutil/TypicalPairedIndexes.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W15-4/tp/raw/dcc6c22771942eced6c62381f39e2e643eef4710/src/test/java/seedu/address/testutil/TypicalPairedIndexes.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W15-4/tp/contents/src/test/java/seedu/address/testutil/TypicalPairedIndexes.java?ref=dcc6c22771942eced6c62381f39e2e643eef4710",
    "patch": "@@ -0,0 +1,14 @@\n+package seedu.address.testutil;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.parser.Pair;\n+\n+public class TypicalPairedIndexes {\n+\n+    public static final Pair INDEX_FIRST_PAIR_EVENT = new Pair(Index.fromOneBased(1), \"E\");\n+    public static final Pair INDEX_SECOND_PAIR_EVENT = new Pair(Index.fromOneBased(2), \"E\");\n+    public static final Pair INDEX_THIRD_PAIR_EVENT = new Pair(Index.fromOneBased(3), \"E\");\n+    public static final Pair INDEX_FIRST_PAIR_PERSON = new Pair(Index.fromOneBased(1), \"P\");\n+    public static final Pair INDEX_SECOND_PAIR_PERSON = new Pair(Index.fromOneBased(2), \"P\");\n+    public static final Pair INDEX_THIRD_PAIR_PERSON = new Pair(Index.fromOneBased(3), \"P\");\n+}"
  }
]
