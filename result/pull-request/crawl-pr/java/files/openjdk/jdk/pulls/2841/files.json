[
  {
    "sha": "8eedca7886cbd729b9a5e0ba45affe46471267b7",
    "filename": "src/hotspot/cpu/ppc/c1_CodeStubs_ppc.cpp",
    "status": "modified",
    "additions": 25,
    "deletions": 3,
    "changes": 28,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/c1_CodeStubs_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/c1_CodeStubs_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/c1_CodeStubs_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n /*\n- * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -39,7 +39,29 @@\n #define __ ce->masm()->\n \n void C1SafepointPollStub::emit_code(LIR_Assembler* ce) {\n-  ShouldNotReachHere();\n+  if (UseSIGTRAP) {\n+    DEBUG_ONLY( __ should_not_reach_here(\"C1SafepointPollStub::emit_code\"); )\n+  } else {\n+    assert(SharedRuntime::polling_page_return_handler_blob() != NULL,\n+           \"polling page return stub not created yet\");\n+    address stub = SharedRuntime::polling_page_return_handler_blob()->entry_point();\n+\n+    __ bind(_entry);\n+    // Using pc relative address computation.\n+    {\n+      Label next_pc;\n+      __ bl(next_pc);\n+      __ bind(next_pc);\n+    }\n+    int current_offset = __ offset();\n+    __ mflr(R12);\n+    __ add_const_optimized(R12, R12, safepoint_offset() - current_offset);\n+    __ std(R12, in_bytes(JavaThread::saved_exception_pc_offset()), R16_thread);\n+\n+    __ add_const_optimized(R0, R29_TOC, MacroAssembler::offset_to_global_toc(stub));\n+    __ mtctr(R0);\n+    __ bctr();\n+  }\n }\n \n RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)"
  },
  {
    "sha": "71df933014ec83f4e8dd7ac15050d24b321611be",
    "filename": "src/hotspot/cpu/ppc/c1_LIRAssembler_ppc.cpp",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/c1_LIRAssembler_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/c1_LIRAssembler_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/c1_LIRAssembler_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1327,8 +1327,8 @@ void LIR_Assembler::reg2mem(LIR_Opr from_reg, LIR_Opr dest, BasicType type,\n \n \n void LIR_Assembler::return_op(LIR_Opr result, C1SafepointPollStub* code_stub) {\n-  const Register return_pc        = R31;  // Must survive C-call to enable_stack_reserved_zone().\n-  const Register polling_page     = R12;\n+  const Register return_pc = R31;  // Must survive C-call to enable_stack_reserved_zone().\n+  const Register temp      = R12;\n \n   // Pop the stack before the safepoint code.\n   int frame_size = initial_frame_size_in_bytes();\n@@ -1338,8 +1338,6 @@ void LIR_Assembler::return_op(LIR_Opr result, C1SafepointPollStub* code_stub) {\n     __ pop_frame();\n   }\n \n-  __ ld(polling_page, in_bytes(Thread::polling_page_offset()), R16_thread);\n-\n   // Restore return pc relative to callers' sp.\n   __ ld(return_pc, _abi0(lr), R1_SP);\n   // Move return pc to LR.\n@@ -1351,8 +1349,11 @@ void LIR_Assembler::return_op(LIR_Opr result, C1SafepointPollStub* code_stub) {\n \n   // We need to mark the code position where the load from the safepoint\n   // polling page was emitted as relocInfo::poll_return_type here.\n-  __ relocate(relocInfo::poll_return_type);\n-  __ load_from_polling_page(polling_page);\n+  if (!UseSIGTRAP) {\n+    code_stub->set_safepoint_offset(__ offset());\n+    __ relocate(relocInfo::poll_return_type);\n+  }\n+  __ safepoint_poll(*code_stub->entry(), temp, true /* at_return */, true /* in_nmethod */);\n \n   // Return.\n   __ blr();"
  },
  {
    "sha": "b65b91df1b8e4f80896ffd37dbb0ec82f1df839c",
    "filename": "src/hotspot/cpu/ppc/c2_safepointPollStubTable_ppc.cpp",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/c2_safepointPollStubTable_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/c2_safepointPollStubTable_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/c2_safepointPollStubTable_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ */\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_ppc.inline.hpp\"\n+#include \"opto/compile.hpp\"\n+#include \"opto/node.hpp\"\n+#include \"opto/output.hpp\"\n+#include \"runtime/sharedRuntime.hpp\"\n+\n+#define __ masm.\n+void C2SafepointPollStubTable::emit_stub_impl(MacroAssembler& masm, C2SafepointPollStub* entry) const {\n+  assert(SharedRuntime::polling_page_return_handler_blob() != NULL,\n+         \"polling page return stub not created yet\");\n+  address stub = SharedRuntime::polling_page_return_handler_blob()->entry_point();\n+\n+  __ bind(entry->_stub_label);\n+  // Using pc relative address computation.\n+  {\n+    Label next_pc;\n+    __ bl(next_pc);\n+    __ bind(next_pc);\n+  }\n+  int current_offset = __ offset();\n+  // Code size should not depend on offset: see _stub_size computation in output.cpp\n+  __ load_const32(R12, entry->_safepoint_offset - current_offset);\n+  __ mflr(R0);\n+  __ add(R12, R12, R0);\n+  __ std(R12, in_bytes(JavaThread::saved_exception_pc_offset()), R16_thread);\n+\n+  __ add_const_optimized(R0, R29_TOC, MacroAssembler::offset_to_global_toc(stub));\n+  __ mtctr(R0);\n+  __ bctr();\n+}\n+#undef __"
  },
  {
    "sha": "071e126610fd6e1f2f7949f66fa007c82ac6ceb5",
    "filename": "src/hotspot/cpu/ppc/frame_ppc.cpp",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/frame_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/frame_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/frame_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (c) 2000, 2021, Oracle and/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2017 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -37,6 +37,7 @@\n #include \"runtime/monitorChunk.hpp\"\n #include \"runtime/os.inline.hpp\"\n #include \"runtime/signature.hpp\"\n+#include \"runtime/stackWatermarkSet.hpp\"\n #include \"runtime/stubCodeGenerator.hpp\"\n #include \"runtime/stubRoutines.hpp\"\n #ifdef COMPILER1\n@@ -229,7 +230,7 @@ address* frame::compiled_sender_pc_addr(CodeBlob* cb) const {\n   return sender_pc_addr();\n }\n \n-frame frame::sender(RegisterMap* map) const {\n+frame frame::sender_raw(RegisterMap* map) const {\n   // Default is we do have to follow them. The sender_for_xxx will\n   // update it accordingly.\n   map->set_include_argument_oops(false);\n@@ -246,6 +247,16 @@ frame frame::sender(RegisterMap* map) const {\n   return frame(sender_sp(), sender_pc());\n }\n \n+frame frame::sender(RegisterMap* map) const {\n+  frame result = sender_raw(map);\n+\n+  if (map->process_frames()) {\n+    StackWatermarkSet::on_iteration(map->thread(), result);\n+  }\n+\n+  return result;\n+}\n+\n void frame::patch_pc(Thread* thread, address pc) {\n   assert(_cb == CodeCache::find_blob(pc), \"unexpected pc\");\n   if (TracePcPatching) {"
  },
  {
    "sha": "ac717bd4734a9ff3af633301da55a1ccdc673f64",
    "filename": "src/hotspot/cpu/ppc/frame_ppc.hpp",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/frame_ppc.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/frame_ppc.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/frame_ppc.hpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n /*\n- * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2015 SAP SE. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -418,4 +418,7 @@\n \n   static jint interpreter_frame_expression_stack_direction() { return -1; }\n \n+  // returns the sending frame, without applying any barriers\n+  frame sender_raw(RegisterMap* map) const;\n+\n #endif // CPU_PPC_FRAME_PPC_HPP"
  },
  {
    "sha": "58b2c63c3dd3f196d73dc5aa891bc4569d473be1",
    "filename": "src/hotspot/cpu/ppc/interp_masm_ppc_64.cpp",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/interp_masm_ppc_64.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/interp_masm_ppc_64.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/interp_masm_ppc_64.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -827,6 +827,7 @@ void InterpreterMacroAssembler::narrow(Register result) {\n \n // Remove activation.\n //\n+// Apply stack watermark barrier.\n // Unlock the receiver if this is a synchronized method.\n // Unlock any Java monitors from synchronized blocks.\n // Remove the activation from the stack.\n@@ -842,6 +843,23 @@ void InterpreterMacroAssembler::remove_activation(TosState state,\n                                                   bool throw_monitor_exception,\n                                                   bool install_monitor_exception) {\n   BLOCK_COMMENT(\"remove_activation {\");\n+\n+  // The below poll is for the stack watermark barrier. It allows fixing up frames lazily,\n+  // that would normally not be safe to use. Such bad returns into unsafe territory of\n+  // the stack, will call InterpreterRuntime::at_unwind.\n+  Label slow_path;\n+  Label fast_path;\n+  safepoint_poll(slow_path, R11_scratch1, true /* at_return */, false /* in_nmethod */);\n+  b(fast_path);\n+  bind(slow_path);\n+  push(state);\n+  set_last_Java_frame(R1_SP, noreg);\n+  call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::at_unwind), R16_thread);\n+  reset_last_Java_frame();\n+  pop(state);\n+  align(32);\n+  bind(fast_path);\n+\n   unlock_if_synchronized_method(state, throw_monitor_exception, install_monitor_exception);\n \n   // Save result (push state before jvmti call and pop it afterwards) and notify jvmti."
  },
  {
    "sha": "4748c4224ccf3d1fccb4122a2a9d681bf1a3fab2",
    "filename": "src/hotspot/cpu/ppc/macroAssembler_ppc.cpp",
    "status": "modified",
    "additions": 28,
    "deletions": 4,
    "changes": 32,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/macroAssembler_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/macroAssembler_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/macroAssembler_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -3057,11 +3057,35 @@ void MacroAssembler::compiler_fast_unlock_object(ConditionRegister flag, Registe\n   // flag == NE indicates failure\n }\n \n-void MacroAssembler::safepoint_poll(Label& slow_path, Register temp_reg) {\n-  ld(temp_reg, in_bytes(Thread::polling_word_offset()), R16_thread);\n+void MacroAssembler::safepoint_poll(Label& slow_path, Register temp, bool at_return, bool in_nmethod) {\n+  ld(temp, in_bytes(Thread::polling_word_offset()), R16_thread);\n   // Armed page has poll_bit set.\n-  andi_(temp_reg, temp_reg, SafepointMechanism::poll_bit());\n-  bne(CCR0, slow_path);\n+  if (at_return) {\n+    Register fp = R1_SP;\n+    if (!in_nmethod) {\n+      // frame still on stack, need to get fp\n+      fp = R0;\n+      ld(fp, _abi0(callers_sp), R1_SP);\n+    }\n+\n+    if (UseSIGTRAP && in_nmethod) {\n+      // Use Signal Handler.\n+      relocate(relocInfo::poll_return_type);\n+      td(traptoGreaterThanUnsigned, fp, temp);\n+    } else {\n+      cmpld(CCR0, fp, temp);\n+      if (in_nmethod) {\n+        // Stub may be out of range for short conditional branch.\n+        bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CCR0, Assembler::greater), slow_path);\n+      } else {\n+        bgt(CCR0, slow_path);\n+      }\n+    }\n+  } else {\n+    assert(!in_nmethod, \"unexpected\");\n+    andi_(temp, temp, SafepointMechanism::poll_bit());\n+    bne(CCR0, slow_path);\n+  }\n }\n \n void MacroAssembler::resolve_jobject(Register value, Register tmp1, Register tmp2,"
  },
  {
    "sha": "55cefd284360abceb4d014ea130fa71cd9bc33a0",
    "filename": "src/hotspot/cpu/ppc/macroAssembler_ppc.hpp",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/macroAssembler_ppc.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/macroAssembler_ppc.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/macroAssembler_ppc.hpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -666,7 +666,7 @@ class MacroAssembler: public Assembler {\n                                    bool try_bias = UseBiasedLocking, bool use_rtm = false);\n \n   // Check if safepoint requested and if so branch\n-  void safepoint_poll(Label& slow_path, Register temp_reg);\n+  void safepoint_poll(Label& slow_path, Register temp, bool at_return, bool in_nmethod);\n \n   void resolve_jobject(Register value, Register tmp1, Register tmp2,\n                        MacroAssembler::PreservationLevel preservation_level);"
  },
  {
    "sha": "03b03238b025bdbef7110f7bfc88ace304532e6b",
    "filename": "src/hotspot/cpu/ppc/nativeInst_ppc.hpp",
    "status": "modified",
    "additions": 8,
    "deletions": 3,
    "changes": 11,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/nativeInst_ppc.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/nativeInst_ppc.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/nativeInst_ppc.hpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n /*\n- * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -83,7 +83,6 @@ class NativeInstruction {\n #endif\n \n   bool is_safepoint_poll() {\n-    // Is the current instruction a POTENTIAL read access to the polling page?\n     // The current arguments of the instruction are not checked!\n     if (USE_POLL_BIT_ONLY) {\n       int encoding = SafepointMechanism::poll_bit();\n@@ -93,6 +92,12 @@ class NativeInstruction {\n     return MacroAssembler::is_load_from_polling_page(long_at(0), NULL);\n   }\n \n+  bool is_safepoint_poll_return() {\n+    // Safepoint poll at nmethod return with watermark check.\n+    return MacroAssembler::is_td(long_at(0), Assembler::traptoGreaterThanUnsigned,\n+                                 /* R1_SP */ 1, /* any reg */ -1);\n+  }\n+\n   address get_stack_bang_address(void *ucontext) {\n     // If long_at(0) is not a stack bang, return 0. Otherwise, return\n     // banged address."
  },
  {
    "sha": "e5c27dbbf6e1dcb503215511001bbf6edf98e09d",
    "filename": "src/hotspot/cpu/ppc/ppc.ad",
    "status": "modified",
    "additions": 10,
    "deletions": 14,
    "changes": 24,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/ppc.ad",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/ppc.ad",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/ppc.ad?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n //\n // Copyright (c) 2011, 2021, Oracle and/or its affiliates. All rights reserved.\n-// Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n+// Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n // DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n //\n // This code is free software; you can redistribute it and/or modify it\n@@ -1562,7 +1562,7 @@ void MachEpilogNode::format(PhaseRegAlloc *ra_, outputStream *st) const {\n   st->print(\"pop frame\\n\\t\");\n \n   if (do_polling() && C->is_method_compilation()) {\n-    st->print(\"touch polling page\\n\\t\");\n+    st->print(\"safepoint poll\\n\\t\");\n   }\n }\n #endif\n@@ -1577,18 +1577,11 @@ void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n   const bool method_needs_polling = do_polling() && C->is_method_compilation();\n   const bool method_is_frameless  = false /* TODO: PPC port C->is_frameless_method()*/;\n   const Register return_pc        = R31;  // Must survive C-call to enable_stack_reserved_zone().\n-  const Register polling_page     = R12;\n+  const Register temp             = R12;\n \n   if (!method_is_frameless) {\n     // Restore return pc relative to callers' sp.\n     __ ld(return_pc, ((int)framesize) + _abi0(lr), R1_SP);\n-  }\n-\n-  if (method_needs_polling) {\n-    __ ld(polling_page, in_bytes(JavaThread::polling_page_offset()), R16_thread);\n-  }\n-\n-  if (!method_is_frameless) {\n     // Move return pc to LR.\n     __ mtlr(return_pc);\n     // Pop frame (fixed frame-size).\n@@ -1600,10 +1593,13 @@ void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n   }\n \n   if (method_needs_polling) {\n-    // We need to mark the code position where the load from the safepoint\n-    // polling page was emitted as relocInfo::poll_return_type here.\n-    __ relocate(relocInfo::poll_return_type);\n-    __ load_from_polling_page(polling_page);\n+    Label dummy_label;\n+    Label* code_stub = &dummy_label;\n+    if (!UseSIGTRAP && !C->output()->in_scratch_emit_size()) {\n+      code_stub = &C->output()->safepoint_poll_table()->add_safepoint(__ offset());\n+      __ relocate(relocInfo::poll_return_type);\n+    }\n+    __ safepoint_poll(*code_stub, temp, true /* at_return */, true /* in_nmethod */);\n   }\n }\n "
  },
  {
    "sha": "1e3a9b3f714e9ee27a4a29d195935d7feea1d763",
    "filename": "src/hotspot/cpu/ppc/sharedRuntime_ppc.cpp",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/sharedRuntime_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/sharedRuntime_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/sharedRuntime_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -2273,7 +2273,10 @@ nmethod *SharedRuntime::generate_native_wrapper(MacroAssembler *masm,\n   if (is_critical_native) {\n     Label needs_safepoint;\n     Register sync_state      = r_temp_5;\n-    __ safepoint_poll(needs_safepoint, sync_state);\n+    // Note: We should not reach here with active stack watermark. There's no safepoint between\n+    //       start of the native wrapper and this check where it could have been added.\n+    //       We don't check the watermark in the fast path.\n+    __ safepoint_poll(needs_safepoint, sync_state, false /* at_return */, false /* in_nmethod */);\n \n     Register suspend_flags   = r_temp_6;\n     __ lwz(suspend_flags, thread_(suspend_flags));\n@@ -2320,7 +2323,7 @@ nmethod *SharedRuntime::generate_native_wrapper(MacroAssembler *masm,\n \n     // No synchronization in progress nor yet synchronized\n     // (cmp-br-isync on one path, release (same as acquire on PPC64) on the other path).\n-    __ safepoint_poll(sync, sync_state);\n+    __ safepoint_poll(sync, sync_state, true /* at_return */, false /* in_nmethod */);\n \n     // Not suspended.\n     // TODO: PPC port assert(4 == Thread::sz_suspend_flags(), \"unexpected field size\");\n@@ -3019,7 +3022,7 @@ SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_t\n   if (cause_return) {\n     // Nothing to do here. The frame has already been popped in MachEpilogNode.\n     // Register LR already contains the return pc.\n-    return_pc_location = RegisterSaver::return_pc_is_lr;\n+    return_pc_location = RegisterSaver::return_pc_is_pre_saved;\n   } else {\n     // Use thread()->saved_exception_pc() as return pc.\n     return_pc_location = RegisterSaver::return_pc_is_thread_saved_exception_pc;"
  },
  {
    "sha": "548c0c8d2f304dbd67c234a0027955532e79d8f9",
    "filename": "src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1449,7 +1449,7 @@ address TemplateInterpreterGenerator::generate_native_entry(bool synchronized) {\n \n   Label do_safepoint, sync_check_done;\n   // No synchronization in progress nor yet synchronized.\n-  __ safepoint_poll(do_safepoint, sync_state);\n+  __ safepoint_poll(do_safepoint, sync_state, true /* at_return */, false /* in_nmethod */);\n \n   // Not suspended.\n   // TODO PPC port assert(4 == Thread::sz_suspend_flags(), \"unexpected field size\");\n@@ -1749,7 +1749,7 @@ address TemplateInterpreterGenerator::generate_CRC32_update_entry() {\n \n     // Safepoint check\n     const Register sync_state = R11_scratch1;\n-    __ safepoint_poll(slow_path, sync_state);\n+    __ safepoint_poll(slow_path, sync_state, false /* at_return */, false /* in_nmethod */);\n \n     // We don't generate local frame and don't align stack because\n     // we not even call stub code (we generate the code inline)\n@@ -1803,7 +1803,7 @@ address TemplateInterpreterGenerator::generate_CRC32_updateBytes_entry(AbstractI\n \n     // Safepoint check\n     const Register sync_state = R11_scratch1;\n-    __ safepoint_poll(slow_path, sync_state);\n+    __ safepoint_poll(slow_path, sync_state, false /* at_return */, false /* in_nmethod */);\n \n     // We don't generate local frame and don't align stack because\n     // we not even call stub code (we generate the code inline)"
  },
  {
    "sha": "439be6cc8d2046b2e2b3e1ad8af6475ae728e557",
    "filename": "src/hotspot/cpu/ppc/vm_version_ppc.hpp",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/vm_version_ppc.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/cpu/ppc/vm_version_ppc.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/cpu/ppc/vm_version_ppc.hpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n /*\n- * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -98,6 +98,7 @@ class VM_Version: public Abstract_VM_Version {\n \n   // PPC64 supports fast class initialization checks for static methods.\n   static bool supports_fast_class_init_checks() { return true; }\n+  constexpr static bool supports_stack_watermark_barrier() { return true; }\n \n   static bool is_determine_features_test_running() { return _is_determine_features_test_running; }\n   // CPU instruction support"
  },
  {
    "sha": "b8556a0121e55fc069f84f78ad3214d51e4d1c94",
    "filename": "src/hotspot/os/aix/safepointMechanism_aix.cpp",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/os/aix/safepointMechanism_aix.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/os/aix/safepointMechanism_aix.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/os/aix/safepointMechanism_aix.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -110,6 +110,6 @@ void SafepointMechanism::pd_initialize() {\n   }\n   uintptr_t bad_page_val  = reinterpret_cast<uintptr_t>(map_address),\n             good_page_val = bad_page_val + os::vm_page_size();\n-  _poll_page_armed_value    = bad_page_val  + poll_bit();\n+  _poll_page_armed_value    = bad_page_val;\n   _poll_page_disarmed_value = good_page_val;\n }"
  },
  {
    "sha": "b32c853347b49d54fbf3d269b52231d4ac313260",
    "filename": "src/hotspot/os_cpu/aix_ppc/os_aix_ppc.cpp",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/os_cpu/aix_ppc/os_aix_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/os_cpu/aix_ppc/os_aix_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/os_cpu/aix_ppc/os_aix_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (c) 1997, 2021, Oracle and/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -221,6 +221,7 @@ bool PosixSignals::pd_hotspot_signal_handler(int sig, siginfo_t* info,\n       //     happens rarely.  In heap based and disjoint base compressd oop modes also loads\n       //     are used for null checks.\n \n+      CodeBlob *cb = NULL;\n       int stop_type = -1;\n       // Handle signal from NativeJump::patch_verified_entry().\n       if (sig == SIGILL && nativeInstruction_at(pc)->is_sigill_zombie_not_entrant()) {\n@@ -231,9 +232,11 @@ bool PosixSignals::pd_hotspot_signal_handler(int sig, siginfo_t* info,\n         goto run_stub;\n       }\n \n-      else if (USE_POLL_BIT_ONLY\n-               ? (sig == SIGTRAP && ((NativeInstruction*)pc)->is_safepoint_poll())\n-               : (sig == SIGSEGV && SafepointMechanism::is_poll_address(addr))) {\n+      else if ((sig == USE_POLL_BIT_ONLY ? SIGTRAP : SIGSEGV) &&\n+               ((NativeInstruction*)pc)->is_safepoint_poll() &&\n+               CodeCache::contains((void*) pc) &&\n+               ((cb = CodeCache::find_blob(pc)) != NULL) &&\n+               cb->is_compiled()) {\n         if (TraceTraps) {\n           tty->print_cr(\"trap: safepoint_poll at \" INTPTR_FORMAT \" (%s)\", p2i(pc),\n                         USE_POLL_BIT_ONLY ? \"SIGTRAP\" : \"SIGSEGV\");\n@@ -242,6 +245,18 @@ bool PosixSignals::pd_hotspot_signal_handler(int sig, siginfo_t* info,\n         goto run_stub;\n       }\n \n+      else if (UseSIGTRAP && sig == SIGTRAP &&\n+               ((NativeInstruction*)pc)->is_safepoint_poll_return() &&\n+               CodeCache::contains((void*) pc) &&\n+               ((cb = CodeCache::find_blob(pc)) != NULL) &&\n+               cb->is_compiled()) {\n+        if (TraceTraps) {\n+          tty->print_cr(\"trap: safepoint_poll at return at \" INTPTR_FORMAT \" (nmethod)\", p2i(pc));\n+        }\n+        stub = SharedRuntime::polling_page_return_handler_blob()->entry_point();\n+        goto run_stub;\n+      }\n+\n       // SIGTRAP-based ic miss check in compiled code.\n       else if (sig == SIGTRAP && TrapBasedICMissChecks &&\n                nativeInstruction_at(pc)->is_sigtrap_ic_miss_check()) {"
  },
  {
    "sha": "f1980bc0207dae2cac95b072c729cbc8fa80b02e",
    "filename": "src/hotspot/os_cpu/linux_ppc/os_linux_ppc.cpp",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/openjdk/jdk/blob/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/os_cpu/linux_ppc/os_linux_ppc.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/68326ddc1dd6d138b71e8763dda43e709de572e9/src/hotspot/os_cpu/linux_ppc/os_linux_ppc.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/os_cpu/linux_ppc/os_linux_ppc.cpp?ref=68326ddc1dd6d138b71e8763dda43e709de572e9",
    "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (c) 1997, 2021, Oracle and/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -270,6 +270,17 @@ bool PosixSignals::pd_hotspot_signal_handler(int sig, siginfo_t* info,\n         stub = SharedRuntime::get_poll_stub(pc);\n       }\n \n+      else if (UseSIGTRAP && sig == SIGTRAP &&\n+               ((NativeInstruction*)pc)->is_safepoint_poll_return() &&\n+               CodeCache::contains((void*) pc) &&\n+               ((cb = CodeCache::find_blob(pc)) != NULL) &&\n+               cb->is_compiled()) {\n+        if (TraceTraps) {\n+          tty->print_cr(\"trap: safepoint_poll at return at \" INTPTR_FORMAT \" (nmethod)\", p2i(pc));\n+        }\n+        stub = SharedRuntime::polling_page_return_handler_blob()->entry_point();\n+      }\n+\n       // SIGTRAP-based ic miss check in compiled code.\n       else if (sig == SIGTRAP && TrapBasedICMissChecks &&\n                nativeInstruction_at(pc)->is_sigtrap_ic_miss_check()) {"
  }
]
