[
  {
    "sha": "775abfa09a3b67ff0a548d6c2c2cd82e51338045",
    "filename": "src/hotspot/share/compiler/compilerOracle.cpp",
    "status": "modified",
    "additions": 24,
    "deletions": 17,
    "changes": 41,
    "blob_url": "https://github.com/openjdk/jdk/blob/6b38797a48b387cbf7160d86465169cf642105ba/src/hotspot/share/compiler/compilerOracle.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/6b38797a48b387cbf7160d86465169cf642105ba/src/hotspot/share/compiler/compilerOracle.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/compiler/compilerOracle.cpp?ref=6b38797a48b387cbf7160d86465169cf642105ba",
    "patch": "@@ -101,6 +101,25 @@ class TypedMethodOptionMatcher;\n static TypedMethodOptionMatcher* option_list = NULL;\n static bool any_set = false;\n \n+// A filter for quick lookup if an option is set\n+static bool option_filter[static_cast<int>(CompileCommand::Unknown) + 1] = { 0 };\n+\n+void command_set_in_filter(enum CompileCommand option) {\n+  assert(option != CompileCommand::Unknown, \"sanity\");\n+  assert(option2type(option) != OptionType::Unknown, \"sanity\");\n+\n+  if ((option != CompileCommand::DontInline) &&\n+      (option != CompileCommand::Inline) &&\n+      (option != CompileCommand::Log)) {\n+    any_set = true;\n+  }\n+  option_filter[static_cast<int>(option)] = true;\n+}\n+\n+bool has_command(enum CompileCommand option) {\n+  return option_filter[static_cast<int>(option)];\n+}\n+\n class TypedMethodOptionMatcher : public MethodMatcher {\n  private:\n   TypedMethodOptionMatcher* _next;\n@@ -290,11 +309,8 @@ static void register_command(TypedMethodOptionMatcher* matcher,\n   matcher->init(option, option_list);\n   matcher->set_value<T>(value);\n   option_list = matcher;\n-  if ((option != CompileCommand::DontInline) &&\n-      (option != CompileCommand::Inline) &&\n-      (option != CompileCommand::Log)) {\n-    any_set = true;\n-  }\n+  command_set_in_filter(option);\n+\n   if (!CompilerOracle::be_quiet()) {\n     // Print out the successful registration of a compile command\n     ttyLocker ttyl;\n@@ -307,6 +323,9 @@ static void register_command(TypedMethodOptionMatcher* matcher,\n template<typename T>\n bool CompilerOracle::has_option_value(const methodHandle& method, enum CompileCommand option, T& value) {\n   assert(option_matches_type(option, value), \"Value must match option type\");\n+  if (!has_command(option)) {\n+    return false;\n+  }\n   if (option_list != NULL) {\n     TypedMethodOptionMatcher* m = option_list->match(method, option);\n     if (m != NULL) {\n@@ -325,18 +344,6 @@ static bool check_predicate(enum CompileCommand option, const methodHandle& meth\n   return false;\n }\n \n-static bool has_command(enum CompileCommand option) {\n-  TypedMethodOptionMatcher* m = option_list;\n-  while (m != NULL) {\n-    if (m->option() == option) {\n-      return true;\n-    } else {\n-      m = m->next();\n-    }\n-  }\n-  return false;\n-}\n-\n bool CompilerOracle::has_any_command_set() {\n   return any_set;\n }"
  }
]
