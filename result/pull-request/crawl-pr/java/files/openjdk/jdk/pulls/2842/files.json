[
  {
    "sha": "6368817a897e2d997c7c65c59820d31621885d31",
    "filename": "src/java.base/share/classes/java/net/MulticastSocket.java",
    "status": "modified",
    "additions": 18,
    "deletions": 11,
    "changes": 29,
    "blob_url": "https://github.com/openjdk/jdk/blob/21bf729d6d445d04bba60e132baa6f24665cb064/src/java.base/share/classes/java/net/MulticastSocket.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/21bf729d6d445d04bba60e132baa6f24665cb064/src/java.base/share/classes/java/net/MulticastSocket.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/java.base/share/classes/java/net/MulticastSocket.java?ref=21bf729d6d445d04bba60e132baa6f24665cb064",
    "patch": "@@ -30,33 +30,40 @@\n import java.nio.channels.MulticastChannel;\n \n /**\n- * The multicast datagram socket class is useful for sending\n- * and receiving IP multicast packets. A MulticastSocket is\n- * a (UDP) DatagramSocket, with additional capabilities for\n- * joining \"groups\" of other multicast hosts on the internet.\n+ * A {@code MulticastSocket} is a datagram socket that is\n+ * convenient for sending and receiving IP multicast datagrams.\n+ * The {@code MulticastSocket} constructors create a socket\n+ * with appropriate socket options enabled that make\n+ * it suitable for receiving multicast datagrams.\n+ * The {@code MulticastSocket} class additionally defines\n+ * convenient setter and getter methods for socket options\n+ * that are commonly used by multicasting applications.\n  * <P>\n- * A multicast group is specified by a class D IP address\n+ * Joining one or more multicast groups makes it possible to\n+ * receive multicast datagrams sent to these groups.\n+ * <P>\n+ * An IPv4 multicast group is specified by a class D IP address\n  * and by a standard UDP port number. Class D IP addresses\n  * are in the range {@code 224.0.0.0} to {@code 239.255.255.255},\n  * inclusive. The address 224.0.0.0 is reserved and should not be used.\n  * <P>\n  * One would join a multicast group by first creating a MulticastSocket\n  * with the desired port, then invoking the\n- * <CODE>joinGroup(InetAddress groupAddr)</CODE>\n- * method:\n+ * <CODE>joinGroup</CODE> method, specifying the group address and\n+ * the network interface through which multicast datagrams will be\n+ * received:\n  * <PRE>{@code\n  * // join a Multicast group and send the group salutations\n  * ...\n  * String msg = \"Hello\";\n  * InetAddress mcastaddr = InetAddress.getByName(\"228.5.6.7\");\n- * InetSocketAddress group = new InetSocketAddress(mcastaddr, port);\n+ * InetSocketAddress group = new InetSocketAddress(mcastaddr, 6789);\n  * NetworkInterface netIf = NetworkInterface.getByName(\"bge0\");\n  * MulticastSocket s = new MulticastSocket(6789);\n  *\n- * s.joinGroup(group, netIf);\n+ * s.joinGroup(new InetSocketAddress(mcastaddr, 0), netIf);\n  * byte[] msgBytes = msg.getBytes(StandardCharsets.UTF_8);\n- * DatagramPacket hi = new DatagramPacket(msgBytes, msgBytes.length,\n- *                                        group, 6789);\n+ * DatagramPacket hi = new DatagramPacket(msgBytes, msgBytes.length, group);\n  * s.send(hi);\n  * // get their responses!\n  * byte[] buf = new byte[1000];"
  }
]
