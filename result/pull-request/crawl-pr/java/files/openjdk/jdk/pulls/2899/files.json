[
  {
    "sha": "8ed2a5d151cbc5df3d70c756883b0dec178a51bd",
    "filename": "test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/SuspendWithObjectMonitorEnter.java",
    "status": "added",
    "additions": 406,
    "deletions": 0,
    "changes": 406,
    "blob_url": "https://github.com/openjdk/jdk/blob/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/SuspendWithObjectMonitorEnter.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/SuspendWithObjectMonitorEnter.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/SuspendWithObjectMonitorEnter.java?ref=3e719713da75b2a51ffa23f142c95cf77dd52cff",
    "patch": "@@ -0,0 +1,406 @@\n+/*\n+ * Copyright (c) 2001, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+/*\n+ * @test\n+ * @bug 4413752\n+ * @summary Test SuspendThread with ObjectMonitor enter.\n+ * @requires vm.jvmti\n+ * @library /test/lib\n+ * @compile SuspendWithObjectMonitorEnter.java\n+ * @run main/othervm/native -agentlib:SuspendWithObjectMonitorEnter SuspendWithObjectMonitorEnter\n+ */\n+\n+import java.io.PrintStream;\n+\n+//\n+// main               blocker           contender            resumer\n+// =================  ================  ===================  ================\n+// launch blocker\n+// <launch returns>   blocker running\n+// launch contender   enter threadLock\n+// <launch returns>   wait for notify   contender running\n+// launch resumer     :                 block on threadLock\n+// <launch returns>   :                 :                    resumer running\n+// suspend contender  :                 <suspended>          wait for notify\n+// <ready to test>    :                 :                    :\n+// :                  :                 :                    :\n+// notify blocker     wait finishes     :                    :\n+// notify resumer     exit threadLock   :                    wait finishes\n+// join blocker       :                 :                    enter threadLock\n+// <join returns>     blocker exits     <resumed>            resume contender\n+// join resumer                         :                    exit threadLock\n+// <join returns>                       enter threadLock     resumer exits\n+// join contender                       exit threadLock\n+// <join returns>                       contender exits\n+//\n+\n+public class SuspendWithObjectMonitorEnter {\n+    private static final String AGENT_LIB = \"SuspendWithObjectMonitorEnter\";\n+    private static final int exit_delta   = 95;\n+\n+    private static final int DEF_TIME_MAX = 60;    // default max # secs to test\n+    private static final int JOIN_MAX     = 30;    // max # secs to wait for join\n+\n+    public static final int THR_MAIN      = 0;     // ID for main thread\n+    public static final int THR_BLOCKER   = 1;     // ID for blocker thread\n+    public static final int THR_CONTENDER = 2;     // ID for contender thread\n+    public static final int THR_RESUMER   = 3;     // ID for resumer thread\n+\n+    public static final int TS_INIT              = 1;  // initial testState\n+    public static final int TS_BLOCKER_RUNNING   = 2;  // blocker is running\n+    public static final int TS_CONTENDER_RUNNING = 3;  // contender is running\n+    public static final int TS_RESUMER_RUNNING   = 4;  // resumer is running\n+    public static final int TS_CALL_SUSPEND      = 5;  // call suspend on contender\n+    public static final int TS_DONE_BLOCKING     = 6;  // done blocking threadLock\n+    public static final int TS_READY_TO_RESUME   = 7;  // ready to resume contender\n+    public static final int TS_CALL_RESUME       = 8;  // call resume on contender\n+    public static final int TS_CONTENDER_DONE    = 9;  // contender has run; done\n+\n+    public static Object barrierLaunch = new Object();   // controls thread launch\n+    public static Object barrierBlocker = new Object();  // controls blocker\n+    public static Object barrierResumer = new Object();  // controls resumer\n+    public static Object threadLock = new Object();      // testing object\n+\n+    public volatile static int testState;\n+    public static long count = 0;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static int GetResult();\n+    native static void SetPrintDebug();\n+    native static void SuspendThread(int id, SuspendWithObjectMonitorEnterWorker thr);\n+    native static void Wait4ContendedEnter(int id, SuspendWithObjectMonitorEnterWorker thr);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n+\n+        System.exit(run(args, System.out) + exit_delta);\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    -p       ::= print debug info\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n+\n+    public static int run(String[] args, PrintStream out) {\n+        return (new SuspendWithObjectMonitorEnter()).doWork(args, out);\n+    }\n+\n+    public static void checkTestState(int exp) {\n+        if (testState != exp) {\n+            System.err.println(\"Failure at \" + count + \" loops.\");\n+            throw new InternalError(\"Unexpected test state value: \"\n+                + \"expected=\" + exp + \" actual=\" + testState);\n+        }\n+    }\n+\n+    public int doWork(String[] args, PrintStream out) {\n+        int time_max = 0;\n+        if (args.length == 0) {\n+            time_max = DEF_TIME_MAX;\n+        } else {\n+            int arg_index = 0;\n+            int args_left = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                SetPrintDebug();\n+                arg_index = 1;\n+                args_left--;\n+            }\n+            if (args_left == 0) {\n+                time_max = DEF_TIME_MAX;\n+            } else if (args_left == 1) {\n+                try {\n+                    time_max = Integer.parseUnsignedInt(args[arg_index]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[arg_index] +\n+                                       \"': invalid time_max value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        SuspendWithObjectMonitorEnterWorker blocker;    // blocker thread\n+        SuspendWithObjectMonitorEnterWorker contender;  // contender thread\n+        SuspendWithObjectMonitorEnterWorker resumer;    // resumer thread\n+\n+        System.out.println(\"About to execute for \" + time_max + \" seconds.\");\n+\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (time_max * 1000)) {\n+            count++;\n+            testState = TS_INIT;  // starting the test loop\n+\n+            // launch the blocker thread\n+            synchronized (barrierLaunch) {\n+                blocker = new SuspendWithObjectMonitorEnterWorker(\"blocker\");\n+                blocker.start();\n+\n+                while (testState != TS_BLOCKER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            // launch the contender thread\n+            synchronized (barrierLaunch) {\n+                contender = new SuspendWithObjectMonitorEnterWorker(\"contender\");\n+                contender.start();\n+\n+                while (testState != TS_CONTENDER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            // launch the resumer thread\n+            synchronized (barrierLaunch) {\n+                resumer = new SuspendWithObjectMonitorEnterWorker(\"resumer\", contender);\n+                resumer.start();\n+\n+                while (testState != TS_RESUMER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            // wait for the contender thread to block\n+            Wait4ContendedEnter(THR_MAIN, contender);\n+\n+            checkTestState(TS_RESUMER_RUNNING);\n+            testState = TS_CALL_SUSPEND;\n+            SuspendThread(THR_MAIN, contender);\n+\n+            //\n+            // At this point, all of the child threads are running\n+            // and we can get to meat of the test:\n+            //\n+            // - suspended threadLock contender\n+            // - a threadLock exit in the blocker thread\n+            // - a threadLock enter in the resumer thread\n+            // - resumption of the contender thread\n+            // - a threadLock enter in the freshly resumed contender thread\n+            //\n+            synchronized (barrierBlocker) {\n+                checkTestState(TS_CALL_SUSPEND);\n+\n+                // tell blocker thread to exit threadLock\n+                testState = TS_DONE_BLOCKING;\n+                barrierBlocker.notify();\n+            }\n+\n+            synchronized (barrierResumer) {\n+                // tell resumer thread to resume contender thread\n+                testState = TS_READY_TO_RESUME;\n+                barrierResumer.notify();\n+\n+                // Can't call checkTestState() here because the\n+                // resumer thread may have already resumed the\n+                // contender thread.\n+            }\n+\n+            try {\n+                blocker.join();\n+                resumer.join(JOIN_MAX * 1000);\n+                if (resumer.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"resumer thread is stuck\");\n+                }\n+                contender.join(JOIN_MAX * 1000);\n+                if (contender.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"contender thread is stuck\");\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+\n+            checkTestState(TS_CONTENDER_DONE);\n+        }\n+\n+        System.out.println(\"Executed \" + count + \" loops in \" + time_max +\n+                           \" seconds.\");\n+\n+        return GetResult();\n+    }\n+}\n+\n+class SuspendWithObjectMonitorEnterWorker extends Thread {\n+    private SuspendWithObjectMonitorEnterWorker target;  // target for resume operation\n+\n+    public SuspendWithObjectMonitorEnterWorker(String name) {\n+        super(name);\n+    }\n+\n+    public SuspendWithObjectMonitorEnterWorker(String name, SuspendWithObjectMonitorEnterWorker target) {\n+        super(name);\n+        this.target = target;\n+    }\n+\n+    native static int GetPrintDebug();\n+    native static void ResumeThread(int id, SuspendWithObjectMonitorEnterWorker thr);\n+\n+    public void run() {\n+        if (GetPrintDebug() != 0) {\n+            System.err.println(getName() + \" thread running\");\n+        }\n+\n+        //\n+        // Launch the blocker thread:\n+        // - grabs threadLock\n+        // - holds threadLock until we tell it let go\n+        // - releases threadLock\n+        //\n+        if (getName().equals(\"blocker\")) {\n+            // grab threadLock before we tell main we are running\n+            if (GetPrintDebug() != 0) {\n+                System.err.println(getName() + \": before enter threadLock\");\n+            }\n+            synchronized(SuspendWithObjectMonitorEnter.threadLock) {\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": enter threadLock\");\n+                }\n+\n+                SuspendWithObjectMonitorEnter.checkTestState(SuspendWithObjectMonitorEnter.TS_INIT);\n+\n+                synchronized(SuspendWithObjectMonitorEnter.barrierBlocker) {\n+                    synchronized(SuspendWithObjectMonitorEnter.barrierLaunch) {\n+                        // tell main we are running\n+                        SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_BLOCKER_RUNNING;\n+                        SuspendWithObjectMonitorEnter.barrierLaunch.notify();\n+                    }\n+                    if (GetPrintDebug() != 0) {\n+                        System.err.println(getName() + \" thread waiting\");\n+                    }\n+                    // TS_READY_TO_RESUME is set right after TS_DONE_BLOCKING\n+                    // is set so either can get the blocker thread out of\n+                    // this wait() wrapper:\n+                    while (SuspendWithObjectMonitorEnter.testState != SuspendWithObjectMonitorEnter.TS_DONE_BLOCKING &&\n+                           SuspendWithObjectMonitorEnter.testState != SuspendWithObjectMonitorEnter.TS_READY_TO_RESUME) {\n+                        try {\n+                            // wait for main to tell us when to exit threadLock\n+                            SuspendWithObjectMonitorEnter.barrierBlocker.wait(0);\n+                        } catch (InterruptedException ex) {\n+                        }\n+                    }\n+                }\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": exit threadLock\");\n+                }\n+            }\n+        }\n+        //\n+        // Launch the contender thread:\n+        // - tries to grab the threadLock\n+        // - grabs threadLock\n+        // - releases threadLock\n+        //\n+        else if (getName().equals(\"contender\")) {\n+            synchronized(SuspendWithObjectMonitorEnter.barrierLaunch) {\n+                // tell main we are running\n+                SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_CONTENDER_RUNNING;\n+                SuspendWithObjectMonitorEnter.barrierLaunch.notify();\n+            }\n+\n+            if (GetPrintDebug() != 0) {\n+                System.err.println(getName() + \": before enter threadLock\");\n+            }\n+            synchronized(SuspendWithObjectMonitorEnter.threadLock) {\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": enter threadLock\");\n+                }\n+\n+                SuspendWithObjectMonitorEnter.checkTestState(SuspendWithObjectMonitorEnter.TS_CALL_RESUME);\n+                SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_CONTENDER_DONE;\n+\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": exit threadLock\");\n+                }\n+            }\n+        }\n+        //\n+        // Launch the resumer thread:\n+        // - tries to grab the threadLock (should not block!)\n+        // - grabs threadLock\n+        // - resumes the contended thread\n+        // - releases threadLock\n+        //\n+        else if (getName().equals(\"resumer\")) {\n+            synchronized(SuspendWithObjectMonitorEnter.barrierResumer) {\n+                synchronized(SuspendWithObjectMonitorEnter.barrierLaunch) {\n+                    // tell main we are running\n+                    SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_RESUMER_RUNNING;\n+                    SuspendWithObjectMonitorEnter.barrierLaunch.notify();\n+                }\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \" thread waiting\");\n+                }\n+                while (SuspendWithObjectMonitorEnter.testState != SuspendWithObjectMonitorEnter.TS_READY_TO_RESUME) {\n+                    try {\n+                        // wait for main to tell us when to continue\n+                        SuspendWithObjectMonitorEnter.barrierResumer.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            if (GetPrintDebug() != 0) {\n+                System.err.println(getName() + \": before enter threadLock\");\n+            }\n+            synchronized(SuspendWithObjectMonitorEnter.threadLock) {\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": enter threadLock\");\n+                }\n+\n+                SuspendWithObjectMonitorEnter.checkTestState(SuspendWithObjectMonitorEnter.TS_READY_TO_RESUME);\n+                SuspendWithObjectMonitorEnter.testState = SuspendWithObjectMonitorEnter.TS_CALL_RESUME;\n+\n+                // resume the contender thread so contender.join() can work\n+                ResumeThread(SuspendWithObjectMonitorEnter.THR_RESUMER, target);\n+\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": exit threadLock\");\n+                }\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "da4057061f5dab1178d501a1e3c0f99ab16fd288",
    "filename": "test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/libSuspendWithObjectMonitorEnter.cpp",
    "status": "added",
    "additions": 134,
    "deletions": 0,
    "changes": 134,
    "blob_url": "https://github.com/openjdk/jdk/blob/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/libSuspendWithObjectMonitorEnter.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/libSuspendWithObjectMonitorEnter.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorEnter/libSuspendWithObjectMonitorEnter.cpp?ref=3e719713da75b2a51ffa23f142c95cf77dd52cff",
    "patch": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2001, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jint iGlobalStatus = 0;\n+static jvmtiEnv* jvmti = NULL;\n+static jint printdebug = 0;\n+static jrawMonitorID threadLock = NULL;\n+static char threadLockName[] = \"threadLock\";\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+static void\n+check_jvmti_status(JNIEnv* jni, jvmtiError err, const char* msg) {\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"check_jvmti_status: JVMTI function returned error: %d\", err);\n+    iGlobalStatus = 2;\n+    jni->FatalError(msg);\n+  }\n+}\n+\n+static void print_debug(jint id, const char* mesg) {\n+  const char *thr;\n+\n+  switch (id) {\n+  // These id values need to match SuspendWithObjectMonitorEnter.java:\n+  case 0:  thr = \"main\";      break;\n+  case 1:  thr = \"blocker\";   break;\n+  case 2:  thr = \"contender\"; break;\n+  case 3:  thr = \"resumer\";   break;\n+  default: thr = \"unknown\";   break;\n+  }\n+\n+  (void)fprintf(stderr, \"%s: %s\", thr, mesg);\n+}\n+#define DEBUG_MESG(id, m) { if (printdebug) print_debug(id, m); }\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorEnter_GetResult(JNIEnv *env, jclass cls) {\n+    return iGlobalStatus;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorEnter_SetPrintDebug(JNIEnv *env, jclass cls) {\n+    printdebug = 1;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorEnter_SuspendThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  DEBUG_MESG(id, \"before suspend thread\\n\");\n+  jvmtiError err = jvmti->SuspendThread(thr);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorEnter_SuspendThread: error in JVMTI SuspendThread\");\n+  DEBUG_MESG(id, \"suspended thread\\n\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorEnter_Wait4ContendedEnter(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  jint thread_state;\n+  DEBUG_MESG(id, \"before contended enter wait\\n\");\n+  do {\n+    jvmtiError err = jvmti->GetThreadState(thr, &thread_state);\n+    check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorEnter_Wait4ContendedEnter: error in JVMTI GetThreadState\");\n+  } while ((thread_state & JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER) == 0);\n+  DEBUG_MESG(id, \"done contended enter wait\\n\");\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorEnterWorker_GetPrintDebug(JNIEnv *env, jclass cls) {\n+    return printdebug;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorEnterWorker_ResumeThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  DEBUG_MESG(id, \"before resume thread\\n\");\n+  jvmtiError err = jvmti->ResumeThread(thr);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorEnterWorker_ResumeThread: error in JVMTI ResumeThread\");\n+  DEBUG_MESG(id, \"resumed thread\\n\");\n+}\n+\n+\n+/** Agent library initialization. */\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  // create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  // add specific capabilities for suspending thread\n+  jvmtiCapabilities suspendCaps;\n+  memset(&suspendCaps, 0, sizeof(suspendCaps));\n+  suspendCaps.can_suspend = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&suspendCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}"
  },
  {
    "sha": "cad537e6a485635e1d9daa2bf0c64c3544ed77b4",
    "filename": "test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/SuspendWithObjectMonitorWait.java",
    "status": "added",
    "additions": 373,
    "deletions": 0,
    "changes": 373,
    "blob_url": "https://github.com/openjdk/jdk/blob/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/SuspendWithObjectMonitorWait.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/SuspendWithObjectMonitorWait.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/SuspendWithObjectMonitorWait.java?ref=3e719713da75b2a51ffa23f142c95cf77dd52cff",
    "patch": "@@ -0,0 +1,373 @@\n+/*\n+ * Copyright (c) 2001, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+/*\n+ * @test\n+ * @bug 4413752\n+ * @summary Test SuspendThread with ObjectMonitor wait.\n+ * @requires vm.jvmti\n+ * @library /test/lib\n+ * @compile SuspendWithObjectMonitorWait.java\n+ * @run main/othervm/native -agentlib:SuspendWithObjectMonitorWait SuspendWithObjectMonitorWait\n+ */\n+\n+import java.io.PrintStream;\n+\n+//\n+// main               waiter              resumer\n+// =================  ==================  ===================\n+// launch waiter\n+// <launch returns>   waiter running\n+// launch resumer     enter threadLock\n+// <launch returns>   threadLock.wait()   resumer running\n+// enter threadLock   :                   wait for notify\n+// threadLock.notify  wait finishes       :\n+// :                  reenter blocks      :\n+// suspend waiter     <suspended>         :\n+// exit threadLock    :                   :\n+// <ready to test>    :                   :\n+// :                  :                   :\n+// notify resumer     :                   wait finishes\n+// join resumer       :                   enter threadLock\n+// :                  <resumed>           resume waiter\n+// :                  :                   exit threadLock\n+// :                  reenter threadLock  :\n+// <join returns>     :                   resumer exits\n+// join waiter        :\n+// <join returns>     waiter exits\n+//\n+\n+public class SuspendWithObjectMonitorWait {\n+    private static final String AGENT_LIB = \"SuspendWithObjectMonitorWait\";\n+    private static final int exit_delta   = 95;\n+\n+    private static final int DEF_TIME_MAX = 60;    // default max # secs to test\n+    private static final int JOIN_MAX     = 30;    // max # secs to wait for join\n+\n+    public static final int THR_MAIN      = 0;     // ID for main thread\n+    public static final int THR_RESUMER   = 1;     // ID for resumer thread\n+    public static final int THR_WAITER    = 2;     // ID for waiter thread\n+\n+    public static final int TS_INIT            = 1;  // initial testState\n+    public static final int TS_WAITER_RUNNING  = 2;  // waiter is running\n+    public static final int TS_RESUMER_RUNNING = 3;  // resumer is running\n+    public static final int TS_READY_TO_NOTIFY = 4;  // ready to notify threadLock\n+    public static final int TS_CALL_SUSPEND    = 5;  // call suspend on contender\n+    public static final int TS_READY_TO_RESUME = 6;  // ready to resume waiter\n+    public static final int TS_CALL_RESUME     = 7;  // call resume on waiter\n+    public static final int TS_WAITER_DONE     = 8;  // waiter has run; done\n+\n+    public static Object barrierLaunch = new Object();   // controls thread launch\n+    public static Object barrierResumer = new Object();  // controls resumer\n+    public static Object threadLock = new Object();      // testing object\n+\n+    public volatile static int testState;\n+    public static long count = 0;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static int GetResult();\n+    native static void SetPrintDebug();\n+    native static void SuspendThread(int id, SuspendWithObjectMonitorWaitWorker thr);\n+    native static void Wait4ContendedEnter(int id, SuspendWithObjectMonitorWaitWorker thr);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n+\n+        System.exit(run(args, System.out) + exit_delta);\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    -p       ::= print debug info\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n+\n+    public static int run(String[] args, PrintStream out) {\n+        return (new SuspendWithObjectMonitorWait()).doWork(args, out);\n+    }\n+\n+    public static void checkTestState(int exp) {\n+        if (testState != exp) {\n+            System.err.println(\"Failure at \" + count + \" loops.\");\n+            throw new InternalError(\"Unexpected test state value: \"\n+                + \"expected=\" + exp + \" actual=\" + testState);\n+        }\n+    }\n+\n+    public int doWork(String[] args, PrintStream out) {\n+        int time_max = 0;\n+        if (args.length == 0) {\n+            time_max = DEF_TIME_MAX;\n+        } else {\n+            int arg_index = 0;\n+            int args_left = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                SetPrintDebug();\n+                arg_index = 1;\n+                args_left--;\n+            }\n+            if (args_left == 0) {\n+                time_max = DEF_TIME_MAX;\n+            } else if (args_left == 1) {\n+                try {\n+                    time_max = Integer.parseUnsignedInt(args[arg_index]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[arg_index] +\n+                                       \"': invalid time_max value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        SuspendWithObjectMonitorWaitWorker waiter;    // waiter thread\n+        SuspendWithObjectMonitorWaitWorker resumer;    // resumer thread\n+\n+        System.out.println(\"About to execute for \" + time_max + \" seconds.\");\n+\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (time_max * 1000)) {\n+            count++;\n+            testState = TS_INIT;  // starting the test loop\n+\n+            // launch the waiter thread\n+            synchronized (barrierLaunch) {\n+                waiter = new SuspendWithObjectMonitorWaitWorker(\"waiter\");\n+                waiter.start();\n+\n+                while (testState != TS_WAITER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            // launch the resumer thread\n+            synchronized (barrierLaunch) {\n+                resumer = new SuspendWithObjectMonitorWaitWorker(\"resumer\", waiter);\n+                resumer.start();\n+\n+                while (testState != TS_RESUMER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            checkTestState(TS_RESUMER_RUNNING);\n+\n+            // The waiter thread was synchronized on threadLock before it\n+            // set TS_WAITER_RUNNING and notified barrierLaunch above so\n+            // we cannot enter threadLock until the waiter thread calls\n+            // threadLock.wait().\n+            synchronized (threadLock) {\n+                // notify waiter thread so it can try to reenter threadLock\n+                testState = TS_READY_TO_NOTIFY;\n+                threadLock.notify();\n+\n+                // wait for the waiter thread to block\n+                Wait4ContendedEnter(THR_MAIN, waiter);\n+\n+                checkTestState(TS_READY_TO_NOTIFY);\n+                testState = TS_CALL_SUSPEND;\n+                SuspendThread(THR_MAIN, waiter);\n+            }\n+\n+            //\n+            // At this point, all of the child threads are running\n+            // and we can get to meat of the test:\n+            //\n+            // - suspended threadLock waiter (trying to reenter)\n+            // - a threadLock enter in the resumer thread\n+            // - resumption of the waiter thread\n+            // - a threadLock enter in the freshly resumed waiter thread\n+            //\n+\n+            synchronized (barrierResumer) {\n+                checkTestState(TS_CALL_SUSPEND);\n+\n+                // tell resumer thread to resume waiter thread\n+                testState = TS_READY_TO_RESUME;\n+                barrierResumer.notify();\n+\n+                // Can't call checkTestState() here because the\n+                // resumer thread may have already resumed the\n+                // waiter thread.\n+            }\n+\n+            try {\n+                resumer.join(JOIN_MAX * 1000);\n+                if (resumer.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"resumer thread is stuck\");\n+                }\n+                waiter.join(JOIN_MAX * 1000);\n+                if (waiter.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"waiter thread is stuck\");\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+\n+            checkTestState(TS_WAITER_DONE);\n+        }\n+\n+        System.out.println(\"Executed \" + count + \" loops in \" + time_max +\n+                           \" seconds.\");\n+\n+        return GetResult();\n+    }\n+}\n+\n+class SuspendWithObjectMonitorWaitWorker extends Thread {\n+    private SuspendWithObjectMonitorWaitWorker target;  // target for resume operation\n+\n+    public SuspendWithObjectMonitorWaitWorker(String name) {\n+        super(name);\n+    }\n+\n+    public SuspendWithObjectMonitorWaitWorker(String name, SuspendWithObjectMonitorWaitWorker target) {\n+        super(name);\n+        this.target = target;\n+    }\n+\n+    native static int GetPrintDebug();\n+    native static void ResumeThread(int id, SuspendWithObjectMonitorWaitWorker thr);\n+\n+    public void run() {\n+        if (GetPrintDebug() != 0) {\n+            System.err.println(getName() + \" thread running\");\n+        }\n+\n+        //\n+        // Launch the waiter thread:\n+        // - grab the threadLock\n+        // - threadLock.wait()\n+        // - releases threadLock\n+        //\n+        if (getName().equals(\"waiter\")) {\n+            // grab threadLock before we tell main we are running\n+            if (GetPrintDebug() != 0) {\n+                System.err.println(getName() + \": before enter threadLock\");\n+            }\n+            synchronized(SuspendWithObjectMonitorWait.threadLock) {\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": enter threadLock\");\n+                }\n+\n+                SuspendWithObjectMonitorWait.checkTestState(SuspendWithObjectMonitorWait.TS_INIT);\n+\n+                synchronized(SuspendWithObjectMonitorWait.barrierLaunch) {\n+                    // tell main we are running\n+                    SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_WAITER_RUNNING;\n+                    SuspendWithObjectMonitorWait.barrierLaunch.notify();\n+                }\n+\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \" before wait\");\n+                }\n+\n+                // TS_READY_TO_NOTIFY is set after the main thread has\n+                // entered threadLock so a spurious wakeup can't get the\n+                // waiter thread out of this threadLock.wait(0) call:\n+                while (SuspendWithObjectMonitorWait.testState <= SuspendWithObjectMonitorWait.TS_READY_TO_NOTIFY) {\n+                    try {\n+                        SuspendWithObjectMonitorWait.threadLock.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": after wait\");\n+                }\n+\n+                SuspendWithObjectMonitorWait.checkTestState(SuspendWithObjectMonitorWait.TS_CALL_RESUME);\n+                SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_WAITER_DONE;\n+\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": exit threadLock\");\n+                }\n+            }\n+        }\n+        //\n+        // Launch the resumer thread:\n+        // - tries to grab the threadLock (should not block!)\n+        // - grabs threadLock\n+        // - resumes the waiter thread\n+        // - releases threadLock\n+        //\n+        else if (getName().equals(\"resumer\")) {\n+            synchronized(SuspendWithObjectMonitorWait.barrierResumer) {\n+                synchronized(SuspendWithObjectMonitorWait.barrierLaunch) {\n+                    // tell main we are running\n+                    SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_RESUMER_RUNNING;\n+                    SuspendWithObjectMonitorWait.barrierLaunch.notify();\n+                }\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \" thread waiting\");\n+                }\n+                while (SuspendWithObjectMonitorWait.testState != SuspendWithObjectMonitorWait.TS_READY_TO_RESUME) {\n+                    try {\n+                        // wait for main to tell us when to continue\n+                        SuspendWithObjectMonitorWait.barrierResumer.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            if (GetPrintDebug() != 0) {\n+                System.err.println(getName() + \": before enter threadLock\");\n+            }\n+            synchronized(SuspendWithObjectMonitorWait.threadLock) {\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": enter threadLock\");\n+                }\n+\n+                SuspendWithObjectMonitorWait.checkTestState(SuspendWithObjectMonitorWait.TS_READY_TO_RESUME);\n+                SuspendWithObjectMonitorWait.testState = SuspendWithObjectMonitorWait.TS_CALL_RESUME;\n+\n+                // resume the waiter thread so waiter.join() can work\n+                ResumeThread(SuspendWithObjectMonitorWait.THR_RESUMER, target);\n+\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \": exit threadLock\");\n+                }\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "0574717450712193948c15dff51ae5678462ac4d",
    "filename": "test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/libSuspendWithObjectMonitorWait.cpp",
    "status": "added",
    "additions": 134,
    "deletions": 0,
    "changes": 134,
    "blob_url": "https://github.com/openjdk/jdk/blob/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/libSuspendWithObjectMonitorWait.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/libSuspendWithObjectMonitorWait.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/hotspot/jtreg/serviceability/jvmti/SuspendWithObjectMonitorWait/libSuspendWithObjectMonitorWait.cpp?ref=3e719713da75b2a51ffa23f142c95cf77dd52cff",
    "patch": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2001, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jint iGlobalStatus = 0;\n+static jvmtiEnv* jvmti = NULL;\n+static jint printdebug = 0;\n+static jrawMonitorID threadLock = NULL;\n+static char threadLockName[] = \"threadLock\";\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+static void\n+check_jvmti_status(JNIEnv* jni, jvmtiError err, const char* msg) {\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"check_jvmti_status: JVMTI function returned error: %d\", err);\n+    iGlobalStatus = 2;\n+    jni->FatalError(msg);\n+  }\n+}\n+\n+static void print_debug(jint id, const char* mesg) {\n+  const char *thr;\n+\n+  switch (id) {\n+  // These id values need to match SuspendWithObjectMonitorWait.java:\n+  case 0:  thr = \"main\";      break;\n+  case 1:  thr = \"blocker\";   break;\n+  case 2:  thr = \"contender\"; break;\n+  case 3:  thr = \"resumer\";   break;\n+  default: thr = \"unknown\";   break;\n+  }\n+\n+  (void)fprintf(stderr, \"%s: %s\", thr, mesg);\n+}\n+#define DEBUG_MESG(id, m) { if (printdebug) print_debug(id, m); }\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorWait_GetResult(JNIEnv *env, jclass cls) {\n+    return iGlobalStatus;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorWait_SetPrintDebug(JNIEnv *env, jclass cls) {\n+    printdebug = 1;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorWait_SuspendThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  DEBUG_MESG(id, \"before suspend thread\\n\");\n+  jvmtiError err = jvmti->SuspendThread(thr);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorWait_SuspendThread: error in JVMTI SuspendThread\");\n+  DEBUG_MESG(id, \"suspended thread\\n\");\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithObjectMonitorWaitWorker_GetPrintDebug(JNIEnv *env, jclass cls) {\n+    return printdebug;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorWaitWorker_ResumeThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  DEBUG_MESG(id, \"before resume thread\\n\");\n+  jvmtiError err = jvmti->ResumeThread(thr);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorWaitWorker_ResumeThread: error in JVMTI ResumeThread\");\n+  DEBUG_MESG(id, \"resumed thread\\n\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithObjectMonitorWait_Wait4ContendedEnter(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  jint thread_state;\n+  DEBUG_MESG(id, \"before contended enter wait\\n\");\n+  do {\n+    jvmtiError err = jvmti->GetThreadState(thr, &thread_state);\n+    check_jvmti_status(jni, err, \"Java_SuspendWithObjectMonitorWait_Wait4ContendedEnter: error in JVMTI GetThreadState\");\n+  } while ((thread_state & JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER) == 0);\n+  DEBUG_MESG(id, \"done contended enter wait\\n\");\n+}\n+\n+\n+/** Agent library initialization. */\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  // create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  // add specific capabilities for suspending thread\n+  jvmtiCapabilities suspendCaps;\n+  memset(&suspendCaps, 0, sizeof(suspendCaps));\n+  suspendCaps.can_suspend = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&suspendCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}"
  },
  {
    "sha": "a7cea2f9a7e72dc2e60afc0e6120987d7c387589",
    "filename": "test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/SuspendWithRawMonitorEnter.java",
    "status": "added",
    "additions": 399,
    "deletions": 0,
    "changes": 399,
    "blob_url": "https://github.com/openjdk/jdk/blob/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/SuspendWithRawMonitorEnter.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/SuspendWithRawMonitorEnter.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/SuspendWithRawMonitorEnter.java?ref=3e719713da75b2a51ffa23f142c95cf77dd52cff",
    "patch": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright (c) 2001, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+/*\n+ * @test\n+ * @bug 4413752\n+ * @summary Test SuspendThread with RawMonitor enter.\n+ * @requires vm.jvmti\n+ * @library /test/lib\n+ * @compile SuspendWithRawMonitorEnter.java\n+ * @run main/othervm/native -agentlib:SuspendWithRawMonitorEnter SuspendWithRawMonitorEnter\n+ */\n+\n+import java.io.PrintStream;\n+\n+//\n+// main               blocker           contender            resumer\n+// =================  ================  ===================  ================\n+// launch blocker\n+// <launch returns>   blocker running\n+// launch contender   enter threadLock\n+// <launch returns>   wait for notify   contender running\n+// launch resumer     :                 block on threadLock\n+// <launch returns>   :                 :                    resumer running\n+// suspend contender  :                 <suspended>          wait for notify\n+// <ready to test>    :                 :                    :\n+// :                  :                 :                    :\n+// notify blocker     wait finishes     :                    :\n+// notify resumer     exit threadLock   :                    wait finishes\n+// join blocker       :                 :                    enter threadLock\n+// <join returns>     blocker exits     <resumed>            resume contender\n+// join resumer                         :                    exit threadLock\n+// <join returns>                       enter threadLock     resumer exits\n+// join contender                       exit threadLock\n+// <join returns>                       contender exits\n+//\n+\n+public class SuspendWithRawMonitorEnter {\n+    private static final String AGENT_LIB = \"SuspendWithRawMonitorEnter\";\n+    private static final int exit_delta   = 95;\n+\n+    private static final int DEF_TIME_MAX = 60;    // default max # secs to test\n+    private static final int JOIN_MAX     = 30;    // max # secs to wait for join\n+\n+    public static final int THR_MAIN      = 0;     // ID for main thread\n+    public static final int THR_BLOCKER   = 1;     // ID for blocker thread\n+    public static final int THR_CONTENDER = 2;     // ID for contender thread\n+    public static final int THR_RESUMER   = 3;     // ID for resumer thread\n+\n+    public static final int TS_INIT              = 1;  // initial testState\n+    public static final int TS_BLOCKER_RUNNING   = 2;  // blocker is running\n+    public static final int TS_CONTENDER_RUNNING = 3;  // contender is running\n+    public static final int TS_RESUMER_RUNNING   = 4;  // resumer is running\n+    public static final int TS_CALL_SUSPEND      = 5;  // call suspend on contender\n+    public static final int TS_DONE_BLOCKING     = 6;  // done blocking threadLock\n+    public static final int TS_READY_TO_RESUME   = 7;  // ready to resume contender\n+    public static final int TS_CALL_RESUME       = 8;  // call resume on contender\n+    public static final int TS_CONTENDER_DONE    = 9;  // contender has run; done\n+\n+    public static Object barrierLaunch = new Object();   // controls thread launch\n+    public static Object barrierBlocker = new Object();  // controls blocker\n+    public static Object barrierResumer = new Object();  // controls resumer\n+\n+    public volatile static int testState;\n+    public static long count = 0;\n+\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static void CreateRawMonitor(int id);\n+    native static void DestroyRawMonitor(int id);\n+    native static int GetResult();\n+    native static void SetPrintDebug();\n+    native static void SuspendThread(int id, SuspendWithRawMonitorEnterWorker thr);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n+\n+        System.exit(run(args, System.out) + exit_delta);\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [-p][time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    -p       ::= print debug info\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n+\n+    public static int run(String[] args, PrintStream out) {\n+        return (new SuspendWithRawMonitorEnter()).doWork(args, out);\n+    }\n+\n+    public static void checkTestState(int exp) {\n+        if (testState != exp) {\n+            System.err.println(\"Failure at \" + count + \" loops.\");\n+            throw new InternalError(\"Unexpected test state value: \"\n+                + \"expected=\" + exp + \" actual=\" + testState);\n+        }\n+    }\n+\n+    public int doWork(String[] args, PrintStream out) {\n+        int time_max = 0;\n+        if (args.length == 0) {\n+            time_max = DEF_TIME_MAX;\n+        } else {\n+            int arg_index = 0;\n+            int args_left = args.length;\n+            if (args[0].equals(\"-p\")) {\n+                SetPrintDebug();\n+                arg_index = 1;\n+                args_left--;\n+            }\n+            if (args_left == 0) {\n+                time_max = DEF_TIME_MAX;\n+            } else if (args_left == 1) {\n+                try {\n+                    time_max = Integer.parseUnsignedInt(args[arg_index]);\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"'\" + args[arg_index] +\n+                                       \"': invalid time_max value.\");\n+                    usage();\n+                }\n+            } else {\n+                usage();\n+            }\n+        }\n+\n+        SuspendWithRawMonitorEnterWorker blocker;    // blocker thread\n+        SuspendWithRawMonitorEnterWorker contender;  // contender thread\n+        SuspendWithRawMonitorEnterWorker resumer;    // resumer thread\n+\n+        CreateRawMonitor(THR_MAIN);\n+\n+        System.out.println(\"About to execute for \" + time_max + \" seconds.\");\n+\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (time_max * 1000)) {\n+            count++;\n+            testState = TS_INIT;  // starting the test loop\n+\n+            // launch the blocker thread\n+            synchronized (barrierLaunch) {\n+                blocker = new SuspendWithRawMonitorEnterWorker(\"blocker\");\n+                blocker.start();\n+\n+                while (testState != TS_BLOCKER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            // launch the contender thread\n+            synchronized (barrierLaunch) {\n+                contender = new SuspendWithRawMonitorEnterWorker(\"contender\");\n+                contender.start();\n+\n+                while (testState != TS_CONTENDER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            // launch the resumer thread\n+            synchronized (barrierLaunch) {\n+                resumer = new SuspendWithRawMonitorEnterWorker(\"resumer\", contender);\n+                resumer.start();\n+\n+                while (testState != TS_RESUMER_RUNNING) {\n+                    try {\n+                        barrierLaunch.wait(0);  // wait until it is running\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+\n+            //\n+            // Known bug: We don't have a way of knowing when the\n+            // contender thread contends on the threadLock. If we\n+            // suspend it before it has blocked, then we don't really\n+            // have contention. However, the resumer thread won't\n+            // resume the contender thread until after it has grabbed\n+            // the threadLock so we don't have a lock order problem\n+            // and the test won't fall over.\n+            //\n+            // We reduce the size of this timing window by launching\n+            // the resumer thread after the contender thread. So the\n+            // contender thread has all the setup time for the resumer\n+            // thread to call JVM/TI RawMonitorEnter() and block on\n+            // the threadLock.\n+            //\n+            checkTestState(TS_RESUMER_RUNNING);\n+            testState = TS_CALL_SUSPEND;\n+            SuspendThread(THR_MAIN, contender);\n+\n+            //\n+            // At this point, all of the child threads are running\n+            // and we can get to meat of the test:\n+            //\n+            // - suspended threadLock contender\n+            // - a threadLock exit in the blocker thread\n+            // - a threadLock enter in the resumer thread\n+            // - resumption of the contender thread\n+            // - a threadLock enter in the freshly resumed contender thread\n+            //\n+            synchronized (barrierBlocker) {\n+                checkTestState(TS_CALL_SUSPEND);\n+\n+                // tell blocker thread to exit threadLock\n+                testState = TS_DONE_BLOCKING;\n+                barrierBlocker.notify();\n+            }\n+\n+            synchronized (barrierResumer) {\n+                // tell resumer thread to resume contender thread\n+                testState = TS_READY_TO_RESUME;\n+                barrierResumer.notify();\n+\n+                // Can't call checkTestState() here because the\n+                // resumer thread may have already resumed the\n+                // contender thread.\n+            }\n+\n+            try {\n+                blocker.join();\n+                resumer.join(JOIN_MAX * 1000);\n+                if (resumer.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"resumer thread is stuck\");\n+                }\n+                contender.join(JOIN_MAX * 1000);\n+                if (contender.isAlive()) {\n+                    System.err.println(\"Failure at \" + count + \" loops.\");\n+                    throw new InternalError(\"contender thread is stuck\");\n+                }\n+            } catch (InterruptedException ex) {\n+            }\n+\n+            checkTestState(TS_CONTENDER_DONE);\n+        }\n+        DestroyRawMonitor(THR_MAIN);\n+\n+        System.out.println(\"Executed \" + count + \" loops in \" + time_max +\n+                           \" seconds.\");\n+\n+        return GetResult();\n+    }\n+}\n+\n+class SuspendWithRawMonitorEnterWorker extends Thread {\n+    private SuspendWithRawMonitorEnterWorker target;  // target for resume operation\n+\n+    public SuspendWithRawMonitorEnterWorker(String name) {\n+        super(name);\n+    }\n+\n+    public SuspendWithRawMonitorEnterWorker(String name, SuspendWithRawMonitorEnterWorker target) {\n+        super(name);\n+        this.target = target;\n+    }\n+\n+    native static int GetPrintDebug();\n+    native static void RawMonitorEnter(int id);\n+    native static void RawMonitorExit(int id);\n+    native static void ResumeThread(int id, SuspendWithRawMonitorEnterWorker thr);\n+\n+    public void run() {\n+        if (GetPrintDebug() != 0) {\n+            System.err.println(getName() + \" thread running\");\n+        }\n+\n+        //\n+        // Launch the blocker thread:\n+        // - grabs threadLock\n+        // - holds threadLock until we tell it let go\n+        // - releases threadLock\n+        //\n+        if (getName().equals(\"blocker\")) {\n+            // grab threadLock before we tell main we are running\n+            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_BLOCKER);\n+\n+            SuspendWithRawMonitorEnter.checkTestState(SuspendWithRawMonitorEnter.TS_INIT);\n+\n+            // recursive entry\n+            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_BLOCKER);\n+            RawMonitorExit(SuspendWithRawMonitorEnter.THR_BLOCKER);\n+\n+            synchronized(SuspendWithRawMonitorEnter.barrierBlocker) {\n+                synchronized(SuspendWithRawMonitorEnter.barrierLaunch) {\n+                    // tell main we are running\n+                    SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_BLOCKER_RUNNING;\n+                    SuspendWithRawMonitorEnter.barrierLaunch.notify();\n+                }\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \" thread waiting\");\n+                }\n+                // TS_READY_TO_RESUME is set right after TS_DONE_BLOCKING\n+                // is set so either can get the blocker thread out of\n+                // this wait() wrapper:\n+                while (SuspendWithRawMonitorEnter.testState != SuspendWithRawMonitorEnter.TS_DONE_BLOCKING &&\n+                       SuspendWithRawMonitorEnter.testState != SuspendWithRawMonitorEnter.TS_READY_TO_RESUME) {\n+                    try {\n+                        // wait for main to tell us when to exit threadLock\n+                        SuspendWithRawMonitorEnter.barrierBlocker.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+                RawMonitorExit(SuspendWithRawMonitorEnter.THR_BLOCKER);\n+            }\n+        }\n+        //\n+        // Launch the contender thread:\n+        // - tries to grab the threadLock\n+        // - grabs threadLock\n+        // - releases threadLock\n+        //\n+        else if (getName().equals(\"contender\")) {\n+            synchronized(SuspendWithRawMonitorEnter.barrierLaunch) {\n+                // tell main we are running\n+                SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_CONTENDER_RUNNING;\n+                SuspendWithRawMonitorEnter.barrierLaunch.notify();\n+            }\n+\n+            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_CONTENDER);\n+\n+            SuspendWithRawMonitorEnter.checkTestState(SuspendWithRawMonitorEnter.TS_CALL_RESUME);\n+            SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_CONTENDER_DONE;\n+\n+            RawMonitorExit(SuspendWithRawMonitorEnter.THR_CONTENDER);\n+        }\n+        //\n+        // Launch the resumer thread:\n+        // - tries to grab the threadLock (should not block!)\n+        // - grabs threadLock\n+        // - resumes the contended thread\n+        // - releases threadLock\n+        //\n+        else if (getName().equals(\"resumer\")) {\n+            synchronized(SuspendWithRawMonitorEnter.barrierResumer) {\n+                synchronized(SuspendWithRawMonitorEnter.barrierLaunch) {\n+                    // tell main we are running\n+                    SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_RESUMER_RUNNING;\n+                    SuspendWithRawMonitorEnter.barrierLaunch.notify();\n+                }\n+                if (GetPrintDebug() != 0) {\n+                    System.err.println(getName() + \" thread waiting\");\n+                }\n+                while (SuspendWithRawMonitorEnter.testState != SuspendWithRawMonitorEnter.TS_READY_TO_RESUME) {\n+                    try {\n+                        // wait for main to tell us when to continue\n+                        SuspendWithRawMonitorEnter.barrierResumer.wait(0);\n+                    } catch (InterruptedException ex) {\n+                    }\n+                }\n+            }\n+            RawMonitorEnter(SuspendWithRawMonitorEnter.THR_RESUMER);\n+\n+            SuspendWithRawMonitorEnter.checkTestState(SuspendWithRawMonitorEnter.TS_READY_TO_RESUME);\n+            SuspendWithRawMonitorEnter.testState = SuspendWithRawMonitorEnter.TS_CALL_RESUME;\n+\n+            // resume the contender thread so contender.join() can work\n+            ResumeThread(SuspendWithRawMonitorEnter.THR_RESUMER, target);\n+\n+            RawMonitorExit(SuspendWithRawMonitorEnter.THR_RESUMER);\n+        }\n+    }\n+}"
  },
  {
    "sha": "7a3e9f3bf595e9c118a4ec3801186d224f6393fc",
    "filename": "test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/libSuspendWithRawMonitorEnter.cpp",
    "status": "added",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/openjdk/jdk/blob/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/libSuspendWithRawMonitorEnter.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/3e719713da75b2a51ffa23f142c95cf77dd52cff/test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/libSuspendWithRawMonitorEnter.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/hotspot/jtreg/serviceability/jvmti/SuspendWithRawMonitorEnter/libSuspendWithRawMonitorEnter.cpp?ref=3e719713da75b2a51ffa23f142c95cf77dd52cff",
    "patch": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c) 2001, 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jint iGlobalStatus = 0;\n+static jvmtiEnv* jvmti = NULL;\n+static jint printdebug = 0;\n+static jrawMonitorID threadLock = NULL;\n+static char threadLockName[] = \"threadLock\";\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+static void\n+check_jvmti_status(JNIEnv* jni, jvmtiError err, const char* msg) {\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"check_jvmti_status: JVMTI function returned error: %d\", err);\n+    iGlobalStatus = 2;\n+    jni->FatalError(msg);\n+  }\n+}\n+\n+static void print_debug(jint id, const char* mesg) {\n+  const char *thr;\n+\n+  switch (id) {\n+  // These id values need to match SuspendWithRawMonitorEnter.java:\n+  case 0:  thr = \"main\";      break;\n+  case 1:  thr = \"blocker\";   break;\n+  case 2:  thr = \"contender\"; break;\n+  case 3:  thr = \"resumer\";   break;\n+  default: thr = \"unknown\";   break;\n+  }\n+\n+  (void)fprintf(stderr, \"%s: %s\", thr, mesg);\n+}\n+#define DEBUG_MESG(id, m) { if (printdebug) print_debug(id, m); }\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithRawMonitorEnter_CreateRawMonitor(JNIEnv *jni, jclass cls, jint id) {\n+  jvmtiError err = jvmti->CreateRawMonitor(threadLockName, &threadLock);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnter_CreateRawMonitor: error in JVMTI CreateRawMonitor\");\n+  DEBUG_MESG(id, \"created threadLock\\n\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithRawMonitorEnter_DestroyRawMonitor(JNIEnv *jni, jclass cls, jint id) {\n+  jvmtiError err = jvmti->DestroyRawMonitor(threadLock);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnter_DestroyRawMonitor: error in JVMTI DestroyRawMonitor\");\n+  DEBUG_MESG(id, \"destroyed threadLock\\n\");\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnter_GetResult(JNIEnv *env, jclass cls) {\n+    return iGlobalStatus;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithRawMonitorEnter_SetPrintDebug(JNIEnv *env, jclass cls) {\n+    printdebug = 1;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithRawMonitorEnter_SuspendThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  DEBUG_MESG(id, \"before suspend thread\\n\");\n+  jvmtiError err = jvmti->SuspendThread(thr);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnter_SuspendThread: error in JVMTI SuspendThread\");\n+  DEBUG_MESG(id, \"suspended thread\\n\");\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_GetPrintDebug(JNIEnv *env, jclass cls) {\n+    return printdebug;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_RawMonitorEnter(JNIEnv *jni, jclass cls, jint id) {\n+  DEBUG_MESG(id, \"before enter threadLock\\n\");\n+  jvmtiError err = jvmti->RawMonitorEnter(threadLock);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnterWorker_RawMonitorEnter: error in JVMTI RawMonitorEnter\");\n+  DEBUG_MESG(id, \"enter threadLock\\n\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_RawMonitorExit(JNIEnv *jni, jclass cls, jint id) {\n+  DEBUG_MESG(id, \"before exit threadLock\\n\");\n+  jvmtiError err = jvmti->RawMonitorExit(threadLock);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnterWorker_RawMonitorExit: error in JVMTI RawMonitorExit\");\n+  DEBUG_MESG(id, \"exit threadLock\\n\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_SuspendWithRawMonitorEnterWorker_ResumeThread(JNIEnv *jni, jclass cls, jint id, jthread thr) {\n+  DEBUG_MESG(id, \"before resume thread\\n\");\n+  jvmtiError err = jvmti->ResumeThread(thr);\n+  check_jvmti_status(jni, err, \"Java_SuspendWithRawMonitorEnterWorker_ResumeThread: error in JVMTI ResumeThread\");\n+  DEBUG_MESG(id, \"resumed thread\\n\");\n+}\n+\n+\n+/** Agent library initialization. */\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  // create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  // add specific capabilities for suspending thread\n+  jvmtiCapabilities suspendCaps;\n+  memset(&suspendCaps, 0, sizeof(suspendCaps));\n+  suspendCaps.can_suspend = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&suspendCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}"
  }
]
