[
  {
    "sha": "2761b9513949b5551fd60707d94b48525af066e8",
    "filename": "src/hotspot/share/gc/z/zMark.cpp",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/openjdk/jdk/blob/e2280fd63cf49a65e3da47d5780959ef859538f4/src/hotspot/share/gc/z/zMark.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/e2280fd63cf49a65e3da47d5780959ef859538f4/src/hotspot/share/gc/z/zMark.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/z/zMark.cpp?ref=e2280fd63cf49a65e3da47d5780959ef859538f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -63,7 +63,6 @@\n \n static const ZStatSubPhase ZSubPhaseConcurrentMark(\"Concurrent Mark\");\n static const ZStatSubPhase ZSubPhaseConcurrentMarkTryFlush(\"Concurrent Mark Try Flush\");\n-static const ZStatSubPhase ZSubPhaseConcurrentMarkIdle(\"Concurrent Mark Idle\");\n static const ZStatSubPhase ZSubPhaseConcurrentMarkTryTerminate(\"Concurrent Mark Try Terminate\");\n static const ZStatSubPhase ZSubPhaseMarkTryComplete(\"Pause Mark Try Complete\");\n \n@@ -378,7 +377,6 @@ bool ZMark::try_steal(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n }\n \n void ZMark::idle() const {\n-  ZStatTimer timer(ZSubPhaseConcurrentMarkIdle);\n   os::naked_short_sleep(1);\n }\n "
  }
]
