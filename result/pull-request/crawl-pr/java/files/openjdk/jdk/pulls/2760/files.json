[
  {
    "sha": "fbd18d772dbb56e525694cf343d8516888eeb6c7",
    "filename": "src/hotspot/share/gc/g1/g1FullCollector.cpp",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullCollector.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullCollector.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullCollector.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -35,6 +35,7 @@\n #include \"gc/g1/g1FullGCScope.hpp\"\n #include \"gc/g1/g1OopClosures.hpp\"\n #include \"gc/g1/g1Policy.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"gc/g1/g1StringDedup.hpp\"\n #include \"gc/shared/gcTraceTime.inline.hpp\"\n #include \"gc/shared/preservedMarks.hpp\"\n@@ -121,9 +122,17 @@ G1FullCollector::G1FullCollector(G1CollectedHeap* heap, bool explicit_gc, bool c\n   _preserved_marks_set.init(_num_workers);\n   _markers = NEW_C_HEAP_ARRAY(G1FullGCMarker*, _num_workers, mtGC);\n   _compaction_points = NEW_C_HEAP_ARRAY(G1FullGCCompactionPoint*, _num_workers, mtGC);\n+\n+  _live_stats = NEW_C_HEAP_ARRAY(G1RegionMarkStats, _heap->max_regions(), mtGC);\n+  for (uint j = 0; j < heap->max_regions(); j++) {\n+    _live_stats[j].clear();\n+  }\n+  _skipping_compaction_sets = NEW_C_HEAP_ARRAY(GrowableArray<HeapRegion*>*, _num_workers, mtGC);\n+\n   for (uint i = 0; i < _num_workers; i++) {\n-    _markers[i] = new G1FullGCMarker(this, i, _preserved_marks_set.get(i));\n+    _markers[i] = new G1FullGCMarker(this, i, _preserved_marks_set.get(i), _live_stats);\n     _compaction_points[i] = new G1FullGCCompactionPoint();\n+    _skipping_compaction_sets[i] = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapRegion*>(32, mtGC);\n     _oop_queue_set.register_queue(i, marker(i)->oop_stack());\n     _array_queue_set.register_queue(i, marker(i)->objarray_stack());\n   }\n@@ -134,9 +143,12 @@ G1FullCollector::~G1FullCollector() {\n   for (uint i = 0; i < _num_workers; i++) {\n     delete _markers[i];\n     delete _compaction_points[i];\n+    delete _skipping_compaction_sets[i];\n   }\n   FREE_C_HEAP_ARRAY(G1FullGCMarker*, _markers);\n   FREE_C_HEAP_ARRAY(G1FullGCCompactionPoint*, _compaction_points);\n+  FREE_C_HEAP_ARRAY(G1FullGCCompactionPoint*, _skipping_compaction_sets);\n+  FREE_C_HEAP_ARRAY(G1RegionMarkStats, _live_stats);\n }\n \n class PrepareRegionsClosure : public HeapRegionClosure {"
  },
  {
    "sha": "b615dd758fe309e2780840526f1c1b87295e9065",
    "filename": "src/hotspot/share/gc/g1/g1FullCollector.hpp",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullCollector.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullCollector.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullCollector.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -68,6 +68,9 @@ class G1FullCollector : StackObj {\n   G1IsAliveClosure          _is_alive;\n   ReferenceProcessorIsAliveMutator _is_alive_mutator;\n \n+  GrowableArray<HeapRegion*>**   _skipping_compaction_sets;\n+  G1RegionMarkStats*             _live_stats;\n+\n   static uint calc_active_workers();\n \n   G1FullGCSubjectToDiscoveryClosure _always_subject_to_discovery;\n@@ -87,6 +90,10 @@ class G1FullCollector : StackObj {\n   uint                     workers() { return _num_workers; }\n   G1FullGCMarker*          marker(uint id) { return _markers[id]; }\n   G1FullGCCompactionPoint* compaction_point(uint id) { return _compaction_points[id]; }\n+  GrowableArray<HeapRegion*>* skipping_compaction_set(uint id) { return _skipping_compaction_sets[id]; }\n+  size_t live_bytes_after_full_gc_mark(uint region_idx) {\n+    return MarkSweepDeadRatio > 0 ? _live_stats[region_idx]._live_words * HeapWordSize : 0;\n+  }\n   OopQueueSet*             oop_queue_set() { return &_oop_queue_set; }\n   ObjArrayTaskQueueSet*    array_queue_set() { return &_array_queue_set; }\n   PreservedMarksSet*       preserved_mark_set() { return &_preserved_marks_set; }"
  },
  {
    "sha": "9dfef3b6c9637966cf2bd90b80995dae5f55e5c6",
    "filename": "src/hotspot/share/gc/g1/g1FullGCAdjustTask.cpp",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCAdjustTask.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCAdjustTask.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCAdjustTask.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -31,6 +31,7 @@\n #include \"gc/g1/g1FullGCCompactionPoint.hpp\"\n #include \"gc/g1/g1FullGCMarker.hpp\"\n #include \"gc/g1/g1FullGCOopClosures.inline.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"gc/g1/heapRegion.inline.hpp\"\n #include \"gc/shared/gcTraceTime.inline.hpp\"\n #include \"gc/shared/referenceProcessor.hpp\""
  },
  {
    "sha": "59f4525895b4a8a46515c07f5d5e67b84fa40373",
    "filename": "src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -82,6 +82,14 @@ void G1FullGCCompactTask::compact_region(HeapRegion* hr) {\n   hr->reset_compacted_after_full_gc();\n }\n \n+void G1FullGCCompactTask::process_skipping_compaction_region(HeapRegion* hr) {\n+  if (G1VerifyBitmaps) {\n+    collector()->mark_bitmap()->clear_region(hr);\n+  }\n+\n+  hr->reset_no_compaction_region_during_compaction();\n+}\n+\n void G1FullGCCompactTask::work(uint worker_id) {\n   Ticks start = Ticks::now();\n   GrowableArray<HeapRegion*>* compaction_queue = collector()->compaction_point(worker_id)->regions();\n@@ -91,6 +99,15 @@ void G1FullGCCompactTask::work(uint worker_id) {\n     compact_region(*it);\n   }\n \n+  if (MarkSweepDeadRatio > 0) {\n+    GrowableArray<HeapRegion*>* skipping_compaction_queue = collector()->skipping_compaction_set(worker_id);\n+    for (GrowableArrayIterator<HeapRegion*> it = skipping_compaction_queue->begin();\n+         it != skipping_compaction_queue->end();\n+         ++it) {\n+      process_skipping_compaction_region(*it);\n+    }\n+  }\n+\n   G1ResetPinnedClosure hc(collector()->mark_bitmap());\n   G1CollectedHeap::heap()->heap_region_par_iterate_from_worker_offset(&hc, &_claimer, worker_id);\n   log_task(\"Compaction task\", worker_id, start);"
  },
  {
    "sha": "a80d6a780f7e204baaefd7aa6669eb14dd0b4b9a",
    "filename": "src/hotspot/share/gc/g1/g1FullGCCompactTask.hpp",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCCompactTask.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCCompactTask.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCCompactTask.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -41,6 +41,7 @@ class G1FullGCCompactTask : public G1FullGCTask {\n \n private:\n   void compact_region(HeapRegion* hr);\n+  void process_skipping_compaction_region(HeapRegion* hr);\n \n public:\n   G1FullGCCompactTask(G1FullCollector* collector) :"
  },
  {
    "sha": "79f67b8382f9f274038413815191ba1999b327cc",
    "filename": "src/hotspot/share/gc/g1/g1FullGCMarkTask.cpp",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarkTask.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarkTask.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCMarkTask.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -30,6 +30,7 @@\n #include \"gc/g1/g1FullGCMarkTask.hpp\"\n #include \"gc/g1/g1FullGCOopClosures.inline.hpp\"\n #include \"gc/g1/g1FullGCReferenceProcessorExecutor.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"gc/shared/gcTraceTime.inline.hpp\"\n #include \"gc/shared/referenceProcessor.hpp\"\n #include \"memory/iterator.inline.hpp\"\n@@ -60,7 +61,8 @@ void G1FullGCMarkTask::work(uint worker_id) {\n \n   // Mark stack is populated, now process and drain it.\n   marker->complete_marking(collector()->oop_queue_set(), collector()->array_queue_set(), &_terminator);\n-\n+  // flush live bytes to regions\n+  marker->flush_mark_region_cache();\n   // This is the point where the entire marking should have completed.\n   assert(marker->oop_stack()->is_empty(), \"Marking should have completed\");\n   assert(marker->objarray_stack()->is_empty(), \"Array marking should have completed\");"
  },
  {
    "sha": "f5f88ce52369c81bf719481119ac23d7c96c879b",
    "filename": "src/hotspot/share/gc/g1/g1FullGCMarker.cpp",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarker.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarker.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCMarker.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -25,14 +25,16 @@\n #include \"precompiled.hpp\"\n #include \"classfile/classLoaderData.hpp\"\n #include \"gc/g1/g1FullGCMarker.inline.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"gc/shared/referenceProcessor.hpp\"\n #include \"gc/shared/taskTerminator.hpp\"\n #include \"gc/shared/verifyOption.hpp\"\n #include \"memory/iterator.inline.hpp\"\n \n G1FullGCMarker::G1FullGCMarker(G1FullCollector* collector,\n                                uint worker_id,\n-                               PreservedMarks* preserved_stack) :\n+                               PreservedMarks* preserved_stack,\n+                               G1RegionMarkStats* mark_stats) :\n     _collector(collector),\n     _worker_id(worker_id),\n     _bitmap(collector->mark_bitmap()),\n@@ -42,7 +44,13 @@ G1FullGCMarker::G1FullGCMarker(G1FullCollector* collector,\n     _mark_closure(worker_id, this, G1CollectedHeap::heap()->ref_processor_stw()),\n     _verify_closure(VerifyOption_G1UseFullMarking),\n     _stack_closure(this),\n-    _cld_closure(mark_closure(), ClassLoaderData::_claim_strong) {\n+    _cld_closure(mark_closure(), ClassLoaderData::_claim_strong),\n+    // cache size is big enough that not increase pause during marking\n+    // by avoiding hit misses as so as possible\n+    _mark_region_cache(mark_stats, round_up_power_of_2(G1CollectedHeap::heap()->max_regions())) {\n+  if (MarkSweepDeadRatio > 0) {\n+    _mark_region_cache.initialize();\n+  }\n   _oop_stack.initialize();\n   _objarray_stack.initialize();\n }"
  },
  {
    "sha": "f9d8d48e9ef76ca5f52617d78a8c4c0451796506",
    "filename": "src/hotspot/share/gc/g1/g1FullGCMarker.hpp",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarker.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarker.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCMarker.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -63,6 +63,8 @@ class G1FullGCMarker : public CHeapObj<mtGC> {\n   G1FollowStackClosure _stack_closure;\n   CLDToOopClosure      _cld_closure;\n \n+  G1RegionMarkStatsCache _mark_region_cache;\n+\n   inline bool is_empty();\n   inline bool pop_object(oop& obj);\n   inline bool pop_objarray(ObjArrayTask& array);\n@@ -74,7 +76,8 @@ class G1FullGCMarker : public CHeapObj<mtGC> {\n   inline void follow_array(objArrayOop array);\n   inline void follow_array_chunk(objArrayOop array, int index);\n public:\n-  G1FullGCMarker(G1FullCollector* collector, uint worker_id, PreservedMarks* preserved_stack);\n+  G1FullGCMarker(G1FullCollector* collector, uint worker_id,\n+                 PreservedMarks* preserved_stack, G1RegionMarkStats* mark_stats);\n   ~G1FullGCMarker();\n \n   // Stack getters\n@@ -96,6 +99,12 @@ class G1FullGCMarker : public CHeapObj<mtGC> {\n   CLDToOopClosure*      cld_closure()   { return &_cld_closure; }\n   G1MarkAndPushClosure* mark_closure()  { return &_mark_closure; }\n   G1FollowStackClosure* stack_closure() { return &_stack_closure; }\n+\n+  void flush_mark_region_cache() {\n+    if (MarkSweepDeadRatio > 0) {\n+      _mark_region_cache.evict_all();\n+    }\n+  }\n };\n \n #endif // SHARE_GC_G1_G1FULLGCMARKER_HPP"
  },
  {
    "sha": "222f28855fe65819e42e6474d9b61414edca8441",
    "filename": "src/hotspot/share/gc/g1/g1FullGCMarker.inline.hpp",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarker.inline.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCMarker.inline.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCMarker.inline.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -64,6 +64,13 @@ inline bool G1FullGCMarker::mark_object(oop obj) {\n       java_lang_String::is_instance_inlined(obj)) {\n     G1StringDedup::enqueue_from_mark(obj, _worker_id);\n   }\n+\n+  // Collect live bytes, which is used to tell\n+  // whether to skip high live bytes heap regions.\n+  if (MarkSweepDeadRatio > 0) {\n+    uint hr_index = G1CollectedHeap::heap()->addr_to_region(cast_from_oop<HeapWord*>(obj));\n+    _mark_region_cache.add_live_words(hr_index, (size_t)obj->size());\n+  }\n   return true;\n }\n "
  },
  {
    "sha": "ded84a416bd79a417e75b2e6ed54f38bdc61355c",
    "filename": "src/hotspot/share/gc/g1/g1FullGCOopClosures.cpp",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCOopClosures.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCOopClosures.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCOopClosures.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -27,6 +27,7 @@\n #include \"gc/g1/g1FullCollector.hpp\"\n #include \"gc/g1/g1FullGCMarker.inline.hpp\"\n #include \"gc/g1/g1FullGCOopClosures.inline.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"logging/logStream.hpp\"\n #include \"memory/iterator.inline.hpp\"\n #include \"oops/access.inline.hpp\""
  },
  {
    "sha": "3e0b67a1bc9c4d40d0f5ac8a9142d84c2e90655e",
    "filename": "src/hotspot/share/gc/g1/g1FullGCPrepareTask.cpp",
    "status": "modified",
    "additions": 64,
    "deletions": 6,
    "changes": 70,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCPrepareTask.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCPrepareTask.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCPrepareTask.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -31,6 +31,7 @@\n #include \"gc/g1/g1FullGCOopClosures.inline.hpp\"\n #include \"gc/g1/g1FullGCPrepareTask.hpp\"\n #include \"gc/g1/g1HotCardCache.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"gc/g1/heapRegion.inline.hpp\"\n #include \"gc/shared/gcTraceTime.inline.hpp\"\n #include \"gc/shared/referenceProcessor.hpp\"\n@@ -60,8 +61,18 @@ bool G1FullGCPrepareTask::G1CalculatePointersClosure::do_heap_region(HeapRegion*\n       assert(hr->is_closed_archive(), \"Only closed archive regions can also be pinned.\");\n     }\n   } else {\n-    assert(!hr->is_humongous(), \"moving humongous objects not supported.\");\n-    prepare_for_compaction(hr);\n+    assert(!hr->is_humongous(), \"humongous objects not supported.\");\n+    size_t live_bytes = _collector->live_bytes_after_full_gc_mark(hr->hrm_index());\n+    if(live_bytes <= _hr_live_bytes_threshold) {\n+      // low survivor ratio prepare compaction\n+      prepare_for_compaction(hr);\n+    } else {\n+      assert(MarkSweepDeadRatio > 0,\n+             \"it should not trigger skipping compaction, when MarkSweepDeadRatio == 0\");\n+      // deal with skipping compaction regions\n+      prepare_for_skipping_compaction(hr);\n+      log_debug(gc, phases)(\"Phase 2: skip compaction region index: %u, live bytes: \" SIZE_FORMAT, hr->hrm_index(), live_bytes);\n+    }\n   }\n \n   // Reset data structures not valid after Full GC.\n@@ -91,7 +102,8 @@ bool G1FullGCPrepareTask::has_freed_regions() {\n void G1FullGCPrepareTask::work(uint worker_id) {\n   Ticks start = Ticks::now();\n   G1FullGCCompactionPoint* compaction_point = collector()->compaction_point(worker_id);\n-  G1CalculatePointersClosure closure(collector(), compaction_point);\n+  GrowableArray<HeapRegion*>* skipping_compaction_set = collector()->skipping_compaction_set(worker_id);\n+  G1CalculatePointersClosure closure(collector(), compaction_point, skipping_compaction_set);\n   G1CollectedHeap::heap()->heap_region_par_iterate_from_start(&closure, &_hrclaimer);\n \n   compaction_point->update();\n@@ -104,12 +116,15 @@ void G1FullGCPrepareTask::work(uint worker_id) {\n }\n \n G1FullGCPrepareTask::G1CalculatePointersClosure::G1CalculatePointersClosure(G1FullCollector* collector,\n-                                                                            G1FullGCCompactionPoint* cp) :\n+                                                                            G1FullGCCompactionPoint* cp,\n+                                                                            GrowableArray<HeapRegion*>* skipping_compaction_set) :\n     _g1h(G1CollectedHeap::heap()),\n     _collector(collector),\n     _bitmap(collector->mark_bitmap()),\n     _cp(cp),\n-    _regions_freed(false) { }\n+    _skipping_compaction_set(skipping_compaction_set),\n+    _regions_freed(false),\n+    _hr_live_bytes_threshold((size_t)HeapRegion::GrainBytes * (100 - MarkSweepDeadRatio) / 100) { }\n \n void G1FullGCPrepareTask::G1CalculatePointersClosure::free_humongous_region(HeapRegion* hr) {\n   assert(hr->is_humongous(), \"must be but region %u is %s\", hr->hrm_index(), hr->get_short_type_str());\n@@ -143,7 +158,6 @@ void G1FullGCPrepareTask::G1CalculatePointersClosure::free_open_archive_region(H\n void G1FullGCPrepareTask::G1CalculatePointersClosure::reset_region_metadata(HeapRegion* hr) {\n   hr->rem_set()->clear();\n   hr->clear_cardtable();\n-\n   G1HotCardCache* hcc = _g1h->hot_card_cache();\n   if (hcc->use_cache()) {\n     hcc->reset_card_counts(hr);\n@@ -191,6 +205,50 @@ void G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction(Hea\n   prepare_for_compaction_work(_cp, hr);\n }\n \n+void G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_skipping_compaction(HeapRegion* hr) {\n+  HeapRegion* current = hr;\n+  HeapWord* limit = current->top();\n+  HeapWord* next_addr = current->bottom();\n+  HeapWord* live_end = current->bottom();\n+  _skipping_compaction_set->append(current);\n+  HeapWord* threshold = current->initialize_threshold();\n+  HeapWord* pre_addr;\n+\n+  while (next_addr < limit) {\n+    Prefetch::write(next_addr, PrefetchScanIntervalInBytes);\n+    pre_addr = next_addr;\n+\n+    if (_bitmap->is_marked(next_addr)) {\n+      oop obj = oop(next_addr);\n+      size_t obj_size = obj->size();\n+      // Object should not move but mark-word is used so it looks like the\n+      // object is forwarded. Need to clear the mark and it's no problem\n+      // since it will be restored by preserved marks. There is an exception\n+      // with BiasedLocking, in this case forwardee() will return NULL\n+      // even if the mark-word is used. This is no problem since\n+      // forwardee() will return NULL in the compaction phase as well.\n+      if (obj->forwardee() != NULL) {\n+        obj->init_mark();\n+      }\n+\n+      next_addr += obj_size;\n+      // update live byte range end\n+      live_end = next_addr;\n+    } else {\n+      next_addr = _bitmap->get_next_marked_addr(next_addr, limit);\n+      assert(next_addr > live_end, \"next_addr must be bigger than live_end\");\n+      assert(next_addr == limit || _bitmap->is_marked(next_addr), \"next_addr is the limit or is marked\");\n+      // fill dummy object to replace dead range\n+      Universe::heap()->fill_with_dummy_object(live_end, next_addr, true);\n+    }\n+\n+    if (next_addr > threshold) {\n+      threshold = current->cross_threshold(pre_addr, next_addr);\n+    }\n+  }\n+  assert(next_addr == limit, \"Should stop the scan at the limit.\");\n+}\n+\n void G1FullGCPrepareTask::prepare_serial_compaction() {\n   GCTraceTime(Debug, gc, phases) debug(\"Phase 2: Prepare Serial Compaction\", collector()->scope()->timer());\n   // At this point we know that no regions were completely freed by"
  },
  {
    "sha": "c18e2783136938e67e23f5b2123896cb990afdd8",
    "filename": "src/hotspot/share/gc/g1/g1FullGCPrepareTask.hpp",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCPrepareTask.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCPrepareTask.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCPrepareTask.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -40,7 +40,6 @@ class G1FullGCPrepareTask : public G1FullGCTask {\n protected:\n   volatile bool     _freed_regions;\n   HeapRegionClaimer _hrclaimer;\n-\n   void set_freed_regions();\n \n public:\n@@ -56,18 +55,22 @@ class G1FullGCPrepareTask : public G1FullGCTask {\n     G1FullCollector* _collector;\n     G1CMBitMap* _bitmap;\n     G1FullGCCompactionPoint* _cp;\n+    GrowableArray<HeapRegion*>* _skipping_compaction_set;\n     bool _regions_freed;\n+    size_t _hr_live_bytes_threshold;\n \n     virtual void prepare_for_compaction(HeapRegion* hr);\n     void prepare_for_compaction_work(G1FullGCCompactionPoint* cp, HeapRegion* hr);\n     void free_humongous_region(HeapRegion* hr);\n     void free_open_archive_region(HeapRegion* hr);\n \n     void reset_region_metadata(HeapRegion* hr);\n+    void prepare_for_skipping_compaction(HeapRegion* hr);\n \n   public:\n     G1CalculatePointersClosure(G1FullCollector* collector,\n-                               G1FullGCCompactionPoint* cp);\n+                               G1FullGCCompactionPoint* cp,\n+                               GrowableArray<HeapRegion*>* skipping_compaction_set);\n \n     bool do_heap_region(HeapRegion* hr);\n     bool freed_regions();"
  },
  {
    "sha": "77ef3d807e2b8c050ab34ed1f0f389babb43a57d",
    "filename": "src/hotspot/share/gc/g1/g1FullGCReferenceProcessorExecutor.cpp",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCReferenceProcessorExecutor.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1FullGCReferenceProcessorExecutor.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1FullGCReferenceProcessorExecutor.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -28,6 +28,7 @@\n #include \"gc/g1/g1FullGCMarker.hpp\"\n #include \"gc/g1/g1FullGCOopClosures.inline.hpp\"\n #include \"gc/g1/g1FullGCReferenceProcessorExecutor.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"gc/shared/gcTraceTime.inline.hpp\"\n #include \"gc/shared/referenceProcessor.hpp\"\n #include \"gc/shared/referenceProcessorPhaseTimes.hpp\""
  },
  {
    "sha": "7672d35e47303472fe38393f44f1de60594c93d0",
    "filename": "src/hotspot/share/gc/g1/g1RegionMarkStatsCache.cpp",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1RegionMarkStatsCache.cpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1RegionMarkStatsCache.cpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1RegionMarkStatsCache.cpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -23,6 +23,7 @@\n  */\n \n #include \"precompiled.hpp\"\n+#include \"gc/g1/g1CollectedHeap.hpp\"\n #include \"gc/g1/g1RegionMarkStatsCache.inline.hpp\"\n #include \"memory/allocation.inline.hpp\"\n #include \"utilities/powerOfTwo.hpp\"\n@@ -44,6 +45,17 @@ G1RegionMarkStatsCache::~G1RegionMarkStatsCache() {\n   FREE_C_HEAP_ARRAY(G1RegionMarkStatsCacheEntry, _cache);\n }\n \n+ // cache size is equal to or bigger than region size to intialize region_index\n+void G1RegionMarkStatsCache::initialize() {\n+  _cache_hits = 0;\n+  _cache_misses = 0;\n+\n+  for (uint i = 0; i < _num_cache_entries; i++) {\n+    _cache[i].clear();\n+    _cache[i]._region_idx = i;\n+  }\n+}\n+\n // Evict all remaining statistics, returning cache hits and misses.\n Pair<size_t, size_t> G1RegionMarkStatsCache::evict_all() {\n   for (uint i = 0; i < _num_cache_entries; i++) {"
  },
  {
    "sha": "98926bad7abbb9d6ea0b3db396cef02c3a075900",
    "filename": "src/hotspot/share/gc/g1/g1RegionMarkStatsCache.hpp",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1RegionMarkStatsCache.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1RegionMarkStatsCache.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1RegionMarkStatsCache.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -102,6 +102,8 @@ class G1RegionMarkStatsCache {\n \n   ~G1RegionMarkStatsCache();\n \n+  void initialize();\n+\n   void add_live_words(uint region_idx, size_t live_words) {\n     G1RegionMarkStatsCacheEntry* const cur = find_for_add(region_idx);\n     cur->_stats._live_words += live_words;"
  },
  {
    "sha": "ec4800c86643b07cd97a1f53d21e57ff5336685e",
    "filename": "src/hotspot/share/gc/g1/g1_globals.hpp",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1_globals.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/g1_globals.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/g1_globals.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -303,7 +303,6 @@\n           \"above this value cancels a given periodic GC. A value of zero \"  \\\n           \"disables this check.\")                                           \\\n           range(0.0, (double)max_uintx)\n-\n // end of GC_G1_FLAGS\n \n #endif // SHARE_GC_G1_G1_GLOBALS_HPP"
  },
  {
    "sha": "15f55fe332f6012163dd370b582d3ec4014b69f2",
    "filename": "src/hotspot/share/gc/g1/heapRegion.hpp",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/heapRegion.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/g1/heapRegion.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/g1/heapRegion.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -27,6 +27,7 @@\n \n #include \"gc/g1/g1BlockOffsetTable.hpp\"\n #include \"gc/g1/g1HeapRegionTraceType.hpp\"\n+#include \"gc/g1/g1RegionMarkStatsCache.hpp\"\n #include \"gc/g1/g1SurvRateGroup.hpp\"\n #include \"gc/g1/heapRegionTracer.hpp\"\n #include \"gc/g1/heapRegionType.hpp\"\n@@ -329,7 +330,6 @@ class HeapRegion : public CHeapObj<mtGC> {\n   size_t live_bytes() {\n     return (top() - prev_top_at_mark_start()) * HeapWordSize + marked_bytes();\n   }\n-\n   // The number of bytes counted in the next marking.\n   size_t next_marked_bytes() { return _next_marked_bytes; }\n   // The number of bytes live wrt the next marking.\n@@ -488,6 +488,11 @@ class HeapRegion : public CHeapObj<mtGC> {\n   // to provide a dummy version of it.\n #endif // ASSERT\n \n+  void reset_no_compaction_region_during_compaction() {\n+    zero_marked_bytes();\n+    init_top_at_mark_start();\n+    reset_after_full_gc_common();\n+  }\n \n   // Reset the HeapRegion to default values and clear its remembered set.\n   // If clear_space is true, clear the HeapRegion's memory."
  },
  {
    "sha": "4d2067444add664a0af0463860880c3b7c1550ef",
    "filename": "src/hotspot/share/gc/shared/gc_globals.hpp",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/shared/gc_globals.hpp",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/src/hotspot/share/gc/shared/gc_globals.hpp",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/hotspot/share/gc/shared/gc_globals.hpp?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -670,7 +670,11 @@\n           \"Par compact uses a variable scale based on the density of the \"  \\\n           \"generation and treats this as the maximum value when the heap \"  \\\n           \"is either completely full or completely empty.  Par compact \"    \\\n-          \"also has a smaller default value; see arguments.cpp.\")           \\\n+          \"also has a smaller default value; see arguments.cpp. \"           \\\n+          \"G1 full gc treats this as dead bytes upper threshold to skip \"   \\\n+          \"compaction of heap regions, i.e. if a heap region has dead \"     \\\n+          \"bytes less than this value, then this region will not be \"       \\\n+          \"compacted during G1 full GC.\")                                   \\\n           range(0, 100)                                                     \\\n                                                                             \\\n   product(uint, MarkSweepAlwaysCompactCount,     4,                         \\"
  },
  {
    "sha": "f942027e57ff19957caa25e7b069a5c9cdb9f106",
    "filename": "test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/openjdk/jdk/blob/a28a93f3b194e1b8182218dfccea05205ff20aae/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/a28a93f3b194e1b8182218dfccea05205ff20aae/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/hotspot/jtreg/gc/g1/TestG1SkipCompaction.java?ref=a28a93f3b194e1b8182218dfccea05205ff20aae",
    "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation. Alibaba designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ */\n+\n+/*\n+ * @test TestG1SkipCompaction\n+ * @summary Test for JDK-8262068 Improve G1 Full GC by skipping compaction\n+ *          for regions with high survival ratio.\n+ * @requires vm.gc.G1\n+ * @library /test/lib\n+ * @modules java.base/jdk.internal.misc\n+ *          java.management\n+ * @run main/othervm TestG1SkipCompaction\n+ */\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestG1SkipCompaction {\n+    public static void runTest() throws Exception {\n+        final String[] arguments = {\n+            \"-XX:+UseG1GC\",\n+            \"-XX:MarkSweepDeadRatio=3\",\n+            \"-Xmx8m\",\n+            \"-Xms8M\",\n+            \"-Xlog:gc+phases=debug\",\n+            \"-XX:G1HeapRegionSize=1m\",\n+            GCTest.class.getName()\n+            };\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(arguments);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        System.out.println(output.getStdout());\n+\n+        String pattern = \".*skip compaction region.*\";\n+        Pattern r = Pattern.compile(pattern);\n+        Matcher m = r.matcher(output.getStdout());\n+\n+        if (!m.find()) {\n+            throw new RuntimeException(\"Could not find any no moving region output\");\n+        }\n+\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+\n+    static class GCTest {\n+        public static List<char[]> memory;\n+        public static void main(String[] args) throws Exception {\n+            memory = new ArrayList<>();\n+            try {\n+                while (true) {\n+                    memory.add(new char[1024]);\n+                    System.gc();\n+                }\n+            } catch (OutOfMemoryError e) {\n+                memory = null;\n+                System.gc();\n+            }\n+        }\n+     }\n+}\n+"
  }
]
