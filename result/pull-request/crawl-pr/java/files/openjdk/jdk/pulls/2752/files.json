[
  {
    "sha": "7b54ac4aea9a32b9342df1faaed542dd72654267",
    "filename": "src/jdk.jartool/share/classes/sun/tools/jar/GNUStyleOptions.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/openjdk/jdk/blob/3a8e329d153be3c7a6005f8e370f9d409296400b/src/jdk.jartool/share/classes/sun/tools/jar/GNUStyleOptions.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/3a8e329d153be3c7a6005f8e370f9d409296400b/src/jdk.jartool/share/classes/sun/tools/jar/GNUStyleOptions.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/jdk.jartool/share/classes/sun/tools/jar/GNUStyleOptions.java?ref=3a8e329d153be3c7a6005f8e370f9d409296400b",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -215,6 +215,11 @@ void process(Main jartool, String opt, String arg) {\n                     if (jartool.info == null)\n                         jartool.info = GNUStyleOptions::printVersion;\n                 }\n+            },\n+            new Option(true, true, OptionType.EXTRACT, \"--output-dir\", \"-o\") {\n+                void process(Main jartool, String opt, String arg) {\n+                    jartool.xdestDir = arg;\n+                }\n             }\n     };\n \n@@ -224,7 +229,8 @@ void process(Main jartool, String opt, String arg) {\n         CREATE(\"create\"),\n         CREATE_UPDATE(\"create.update\"),\n         CREATE_UPDATE_INDEX(\"create.update.index\"),\n-        OTHER(\"other\");\n+        OTHER(\"other\"),\n+        EXTRACT(\"extract\");\n \n         /** Resource lookup section prefix. */\n         final String name;"
  },
  {
    "sha": "ae756fea45a92826762de9eca4c38a7a29e21b95",
    "filename": "src/jdk.jartool/share/classes/sun/tools/jar/Main.java",
    "status": "modified",
    "additions": 18,
    "deletions": 3,
    "changes": 21,
    "blob_url": "https://github.com/openjdk/jdk/blob/3a8e329d153be3c7a6005f8e370f9d409296400b/src/jdk.jartool/share/classes/sun/tools/jar/Main.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/3a8e329d153be3c7a6005f8e370f9d409296400b/src/jdk.jartool/share/classes/sun/tools/jar/Main.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/jdk.jartool/share/classes/sun/tools/jar/Main.java?ref=3a8e329d153be3c7a6005f8e370f9d409296400b",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 1996, 2018, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -154,6 +154,9 @@ public int hashCode() {\n \n     boolean suppressDeprecateMsg = false;\n \n+    // destination directory for extraction (defaults to current working directory)\n+    String xdestDir = \".\";\n+\n     /* To support additional GNU Style informational options */\n     Consumer<PrintWriter> info;\n \n@@ -359,6 +362,15 @@ public synchronized boolean run(String args[]) {\n                     }\n                 }\n             } else if (xflag) {\n+                if (!xdestDir.equals(\".\")) {\n+                    final Path destPath = Paths.get(xdestDir);\n+                    try {\n+                        Files.createDirectories(destPath);\n+                    } catch (IOException ioe) {\n+                        throw new IOException(formatMsg(\"error.create.dir\",\n+                                destPath.toString()), ioe);\n+                    }\n+                }\n                 replaceFSC(filesMap);\n                 // For the extract action, when extracting all the entries,\n                 // access using the ZipInputStream class is most efficient,\n@@ -565,6 +577,9 @@ boolean parseArgs(String args[]) {\n                         case 'P':\n                             pflag = true;\n                             break;\n+                        case 'o':\n+                            xdestDir = args[count++];\n+                            break;\n                         default:\n                             usageError(formatMsg(\"error.illegal.option\",\n                                        String.valueOf(flags.charAt(i))));\n@@ -1306,7 +1321,7 @@ void updateLastModifiedTime(Set<ZipEntry> zes) throws IOException {\n             if (lastModified != -1) {\n                 String name = safeName(ze.getName().replace(File.separatorChar, '/'));\n                 if (name.length() != 0) {\n-                    File f = new File(name.replace('/', File.separatorChar));\n+                    File f = new File(xdestDir, name.replace('/', File.separatorChar));\n                     f.setLastModified(lastModified);\n                 }\n             }\n@@ -1391,7 +1406,7 @@ ZipEntry extractFile(InputStream is, ZipEntry e) throws IOException {\n         if (name.length() == 0) {\n             return rc;    // leading '/' or 'dot-dot' only path\n         }\n-        File f = new File(name.replace('/', File.separatorChar));\n+        File f = new File(xdestDir, name.replace('/', File.separatorChar));\n         if (e.isDirectory()) {\n             if (f.exists()) {\n                 if (!f.isDirectory()) {"
  },
  {
    "sha": "1033f932ad553aacce8d1525028475daf2af6046",
    "filename": "src/jdk.jartool/share/classes/sun/tools/jar/resources/jar.properties",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/openjdk/jdk/blob/3a8e329d153be3c7a6005f8e370f9d409296400b/src/jdk.jartool/share/classes/sun/tools/jar/resources/jar.properties",
    "raw_url": "https://github.com/openjdk/jdk/raw/3a8e329d153be3c7a6005f8e370f9d409296400b/src/jdk.jartool/share/classes/sun/tools/jar/resources/jar.properties",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/src/jdk.jartool/share/classes/sun/tools/jar/resources/jar.properties?ref=3a8e329d153be3c7a6005f8e370f9d409296400b",
    "patch": "@@ -1,5 +1,5 @@\n #\n-# Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2021, Oracle and/or its affiliates. All rights reserved.\n # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n #\n # This code is free software; you can redistribute it and/or modify it\n@@ -302,3 +302,7 @@ main.help.postopt=\\\n \\n\\\n \\ Mandatory or optional arguments to long options are also mandatory or optional\\n\\\n \\ for any corresponding short options.\n+main.help.opt.extract=\\\n+\\ Operation modifiers valid only in extract mode:\\n\n+main.help.opt.extract.output-dir=\\\n+\\  -o, --output-dir=DIR        Directory into which the jar will be extracted"
  },
  {
    "sha": "b9afaafce9d5ddac70cc2a7bcb10f78cefc7e870",
    "filename": "test/jdk/tools/jar/JarExtractTest.java",
    "status": "added",
    "additions": 237,
    "deletions": 0,
    "changes": 237,
    "blob_url": "https://github.com/openjdk/jdk/blob/3a8e329d153be3c7a6005f8e370f9d409296400b/test/jdk/tools/jar/JarExtractTest.java",
    "raw_url": "https://github.com/openjdk/jdk/raw/3a8e329d153be3c7a6005f8e370f9d409296400b/test/jdk/tools/jar/JarExtractTest.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk/contents/test/jdk/tools/jar/JarExtractTest.java?ref=3a8e329d153be3c7a6005f8e370f9d409296400b",
    "patch": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+import jdk.test.lib.util.JarBuilder;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @test\n+ * @bug 8173970\n+ * @summary jar tool should allow extracting to specific directory\n+ * @library /test/lib\n+ * @run testng JarExtractTest\n+ */\n+public class JarExtractTest {\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+            .orElseThrow(() ->\n+                    new RuntimeException(\"jar tool not found\")\n+            );\n+\n+    private static final byte[] FILE_CONTENT = \"Hello world!!!\".getBytes(StandardCharsets.UTF_8);\n+    // the jar that will get extracted in the tests\n+    private static Path testJarPath;\n+    private static Collection<Path> filesToDelete = new ArrayList<>();\n+\n+    @BeforeClass\n+    public static void createTestJar() throws Exception {\n+        testJarPath = Paths.get(\"8173970-test.jar\");\n+        final JarBuilder builder = new JarBuilder(testJarPath.toString());\n+        // d1\n+        //  |--- d2\n+        //  |    |--- d3\n+        //  |    |    |--- f2.txt\n+        //  |\n+        //  |--- d4\n+        //  ...\n+        //  f1.txt\n+\n+        builder.addEntry(\"d1/\", new byte[0]);\n+        builder.addEntry(\"f1.txt\", FILE_CONTENT);\n+        builder.addEntry(\"d1/d2/d3/f2.txt\", FILE_CONTENT);\n+        builder.addEntry(\"d1/d4/\", new byte[0]);\n+        builder.build();\n+    }\n+\n+    @AfterClass\n+    public void cleanup() {\n+        for (final Path p : filesToDelete) {\n+            try {\n+                System.out.println(\"Deleting file/dir \" + p);\n+                Files.delete(p);\n+            } catch (IOException ioe) {\n+                //ignore\n+            }\n+        }\n+    }\n+\n+    @DataProvider(name = \"relExtractLocations\")\n+    private Object[][] provideRelativeExtractLocations() throws Exception {\n+        // create some dirs so that they already exist when the jar is being extracted\n+        final String existing1 = \".\" + File.separator + \"8173970-existing-1\";\n+        Files.createDirectories(Paths.get(existing1));\n+        final String existing2 = \".\" + File.separator + \"foo\" + File.separator + \"8173970-existing-2\";\n+        Files.createDirectories(Paths.get(existing2));\n+        final Path dirOutsideScratchDir = Files.createTempDirectory(Paths.get(\"..\"), \"8173970\");\n+        // we need to explicitly delete this dir after the tests end\n+        filesToDelete.add(dirOutsideScratchDir);\n+        final String existing3 = dirOutsideScratchDir.toString() + File.separator + \"8173970-existing-3\";\n+        Files.createDirectories(Paths.get(existing3));\n+\n+        final String anotherDirOutsideScratchDir = \"..\" + File.separator + \"8173970-non-existent\";\n+        filesToDelete.add(Paths.get(anotherDirOutsideScratchDir));\n+\n+        return new Object[][]{\n+                {\".\"}, // current dir\n+                {\".\" + File.separator + \"8173970-extract-1\"}, // (explicitly) relative to current dir\n+                {\"8173970-extract-2\"}, // (implicitly) relative to current dir\n+                {anotherDirOutsideScratchDir}, // sibling to current dir\n+                // some existing dirs\n+                {existing1},\n+                {existing2},\n+                {existing3},\n+                // a non-existent dir within an existing dir\n+                {existing1 + File.separator + \"non-existing\" + File.separator + \"foo\"}\n+        };\n+    }\n+\n+    @DataProvider(name = \"absExtractLocations\")\n+    private Object[][] provideAbsoluteExtractLocations() throws Exception {\n+        final Object[][] relative = provideRelativeExtractLocations();\n+        final Object[][] abs = new Object[relative.length][1];\n+        int i = 0;\n+        for (final Object[] p : relative) {\n+            abs[i++][0] = Paths.get((String) p[0]).toAbsolutePath().toString();\n+        }\n+        return abs;\n+    }\n+\n+    @DataProvider(name = \"absNormalizedExtractLocations\")\n+    private Object[][] provideAbsoluteNormalizedExtractLocations() throws Exception {\n+        final Object[][] relative = provideAbsoluteExtractLocations();\n+        final Object[][] abs = new Object[relative.length][1];\n+        int i = 0;\n+        for (final Object[] p : relative) {\n+            abs[i++][0] = Paths.get((String) p[0]).toAbsolutePath().normalize().toString();\n+        }\n+        return abs;\n+    }\n+\n+    @Test(dataProvider = \"relExtractLocations\")\n+    public void testExtractToRelativeDir(final String dest) throws Exception {\n+        testExtract(dest);\n+    }\n+\n+    @Test(dataProvider = \"absExtractLocations\")\n+    public void testExtractToAbsoluteDir(final String dest) throws Exception {\n+        testExtract(dest);\n+    }\n+\n+    @Test(dataProvider = \"absNormalizedExtractLocations\")\n+    public void testExtractToAbsoluteNormalizedDir(final String dest) throws Exception {\n+        testExtract(dest);\n+    }\n+\n+    /**\n+     * Test that {@code jar -x -f --output-dir} works as expected\n+     */\n+    @Test\n+    public void testExtractLongForm() throws Exception {\n+        final String dest = \"foo-bar\";\n+        System.out.println(\"Extracting \" + testJarPath + \" to \" + dest);\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, \"-x\", \"-f\", testJarPath.toString(),\n+                \"--output-dir\", dest);\n+        Assert.assertEquals(exitCode, 0, \"Failed to extract \" + testJarPath + \" to \" + dest);\n+        verifyExtractedContent(dest);\n+    }\n+\n+    /**\n+     * Verifies that the {@code jar --help} output contains the --output-dir and -o option\n+     */\n+    @Test\n+    public void testHelpOutput() {\n+        final ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n+        final int exitCode = JAR_TOOL.run(new PrintStream(outStream), System.err, \"--help\");\n+        Assert.assertEquals(exitCode, 0, \"jar --help command failed\");\n+        final String output = outStream.toString();\n+        Assert.assertTrue(output.contains(\"-o, --output-dir=DIR        Directory into which the jar will be extracted\"),\n+                \"jar --help didn't contain -o or --output-dir option\");\n+    }\n+\n+    /**\n+     * Tests that {@code jar -xf} command works fine even when the -o or --output-dir option\n+     * isn't specified\n+     */\n+    @Test\n+    public void testExtractWithoutOutputDir() throws Exception {\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, \"-xf\", testJarPath.toString());\n+        Assert.assertEquals(exitCode, 0, \"Failed to extract \" + testJarPath);\n+        // the content would have been extracted to current dir\n+        verifyExtractedContent(\".\");\n+    }\n+\n+    /**\n+     * Extracts the jar file using {@code jar -xfo <jarfile> <dest>}\n+     */\n+    private void testExtract(final String dest) throws Exception {\n+        System.out.println(\"Extracting \" + testJarPath + \" to \" + dest);\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, \"-xfo\", testJarPath.toString(), dest);\n+        Assert.assertEquals(exitCode, 0, \"Failed to extract \" + testJarPath + \" to \" + dest);\n+        verifyExtractedContent(dest);\n+    }\n+\n+    /**\n+     * Verifies that the extracted jar content matches what was present in the original jar\n+     */\n+    private void verifyExtractedContent(final String dest) throws IOException {\n+        Assert.assertTrue(Files.isDirectory(Paths.get(dest)), dest + \" is not a directory\");\n+        final Path d1 = Paths.get(dest, \"d1\");\n+        Assert.assertTrue(Files.isDirectory(d1), d1 + \" directory is missing or not a directory\");\n+        final Path d2 = Paths.get(dest, \"d1\", \"d2\");\n+        Assert.assertTrue(Files.isDirectory(d2), d2 + \" directory is missing or not a directory\");\n+        final Path d3 = Paths.get(dest, \"d1\", \"d2\", \"d3\");\n+        Assert.assertTrue(Files.isDirectory(d3), d3 + \" directory is missing or not a directory\");\n+        final Path d4 = Paths.get(dest, \"d1\", \"d4\");\n+        Assert.assertTrue(Files.isDirectory(d4), d4 + \" directory is missing or not a directory\");\n+        // d1/d4 is expected to be empty directory\n+        final List<Path> d4Children;\n+        try (final Stream<Path> s = Files.walk(d4, 1)) {\n+            d4Children = s.toList();\n+        }\n+        Assert.assertEquals(d4Children.size(), 1, \"Directory \" + d4\n+                + \" has unexpected files/dirs: \" + d4Children);\n+        final Path f1 = Paths.get(dest, \"f1.txt\");\n+        Assert.assertTrue(Files.isRegularFile(f1), f1 + \" is missing or not a file\");\n+        Assert.assertEquals(Files.readAllBytes(f1), FILE_CONTENT, \"Unexpected content in file \" + f1);\n+        final Path f2 = Paths.get(d3.toString(), \"f2.txt\");\n+        Assert.assertTrue(Files.isRegularFile(f2), f2 + \" is missing or not a file\");\n+        Assert.assertEquals(Files.readAllBytes(f2), FILE_CONTENT, \"Unexpected content in file \" + f2);\n+    }\n+}\n\\ No newline at end of file"
  }
]
