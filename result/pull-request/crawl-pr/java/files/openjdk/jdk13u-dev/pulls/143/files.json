[
  {
    "sha": "761a5070fd5e44c8ad37c1abf8e97b5cc7b9049e",
    "filename": "src/java.base/share/conf/security/java.security",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/src/java.base/share/conf/security/java.security",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/src/java.base/share/conf/security/java.security",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/src/java.base/share/conf/security/java.security?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -730,8 +730,8 @@ jdk.jar.disabledAlgorithms=MD2, MD5, RSA keySize < 1024, \\\n # Example:\n #   jdk.tls.disabledAlgorithms=MD5, SSLv3, DSA, RSA keySize < 2048, \\\n #       rsa_pkcs1_sha1, secp224r1\n-jdk.tls.disabledAlgorithms=SSLv3, RC4, DES, MD5withRSA, DH keySize < 1024, \\\n-    EC keySize < 224, 3DES_EDE_CBC, anon, NULL, \\\n+jdk.tls.disabledAlgorithms=SSLv3, TLSv1, TLSv1.1, RC4, DES, MD5withRSA, \\\n+    DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL, \\\n     include jdk.disabled.namedCurves\n \n #"
  },
  {
    "sha": "2ba56c85b345ec96df70fd02a2ce9327f8b50240",
    "filename": "test/jdk/javax/net/ssl/SSLEngine/Arrays.java",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/SSLEngine/Arrays.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/SSLEngine/Arrays.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/javax/net/ssl/SSLEngine/Arrays.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2004, 2007, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -25,6 +25,7 @@\n  * @test\n  * @bug 5019096\n  * @summary Add scatter/gather APIs for SSLEngine\n+ * @library /test/lib\n  * @run main/othervm Arrays SSL\n  * @run main/othervm Arrays TLS\n  * @run main/othervm Arrays SSLv3\n@@ -41,6 +42,8 @@\n import java.security.*;\n import java.nio.*;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class Arrays {\n \n     private static boolean debug = false;\n@@ -182,6 +185,14 @@ private void runTest() throws Exception {\n     private static String contextVersion;\n     public static void main(String args[]) throws Exception {\n         contextVersion = args[0];\n+        // Re-enable context version if it is disabled.\n+        // If context version is SSLv3, TLSv1 needs to be re-enabled.\n+        if (contextVersion.equals(\"SSLv3\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n+        } else if (contextVersion.equals(\"TLSv1\") ||\n+                   contextVersion.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(contextVersion);\n+        }\n \n         Arrays test;\n "
  },
  {
    "sha": "7e3672c86a31c8cf824579a9f6c207e974b223a0",
    "filename": "test/jdk/javax/net/ssl/TLS/TLSClientPropertyTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 7,
    "changes": 12,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/TLS/TLSClientPropertyTest.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/TLS/TLSClientPropertyTest.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/javax/net/ssl/TLS/TLSClientPropertyTest.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -23,7 +23,7 @@\n \n /*\n  * @test\n- * @bug 8049432 8069038 8234723\n+ * @bug 8049432 8069038 8234723 8202343\n  * @summary New tests for TLS property jdk.tls.client.protocols\n  * @summary javax/net/ssl/TLS/TLSClientPropertyTest.java needs to be\n  *     updated for JDK-8061210\n@@ -79,7 +79,7 @@ public static void main(String[] args) throws Exception {\n             }\n             contextProtocol = null;\n             expectedDefaultProtos = new String[] {\n-                    \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"\n+                    \"TLSv1.2\", \"TLSv1.3\"\n             };\n             break;\n         case \"SSLv3\":\n@@ -90,26 +90,24 @@ public static void main(String[] args) throws Exception {\n         case \"TLSv1\":\n             contextProtocol = \"TLSv1\";\n             expectedDefaultProtos = new String[] {\n-                    \"TLSv1\"\n             };\n             break;\n         case \"TLSv11\":\n             contextProtocol = \"TLSv1.1\";\n             expectedDefaultProtos = new String[] {\n-                    \"TLSv1\", \"TLSv1.1\"\n             };\n             break;\n         case \"TLSv12\":\n             contextProtocol = \"TLSv1.2\";\n             expectedDefaultProtos = new String[] {\n-                    \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"\n+                    \"TLSv1.2\"\n             };\n             break;\n         case \"TLSv13\":\n         case \"TLS\":\n             contextProtocol = \"TLSv1.3\";\n             expectedDefaultProtos = new String[] {\n-                    \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"\n+                    \"TLSv1.2\", \"TLSv1.3\"\n             };\n             break;\n         case \"WrongProperty\":"
  },
  {
    "sha": "24933838e0589b1eff1a07f82fda2eb5dcc8c51a",
    "filename": "test/jdk/javax/net/ssl/TLSv11/GenericBlockCipher.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/TLSv11/GenericBlockCipher.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/TLSv11/GenericBlockCipher.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/javax/net/ssl/TLSv11/GenericBlockCipher.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -27,6 +27,7 @@\n  * @test\n  * @bug 4873188\n  * @summary Support TLS 1.1\n+ * @library /test/lib\n  * @modules java.security.jgss\n  *          java.security.jgss/sun.security.jgss.krb5\n  *          java.security.jgss/sun.security.krb5:+open\n@@ -50,6 +51,8 @@\n import javax.net.ssl.SSLSocket;\n import javax.net.ssl.SSLSocketFactory;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class GenericBlockCipher {\n \n     /*\n@@ -171,6 +174,9 @@ void doClientSide() throws Exception {\n     volatile Exception clientException = null;\n \n     public static void main(String[] args) throws Exception {\n+        // Re-enable TLSv1.1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1.1\");\n+\n         String keyFilename =\n             System.getProperty(\"test.src\", \".\") + \"/\" + pathToStores +\n                 \"/\" + keyStoreFile;"
  },
  {
    "sha": "2817e3400ab386d416755ebd8f728cc9c63d4467",
    "filename": "test/jdk/javax/net/ssl/sanity/ciphersuites/SystemPropCipherSuitesOrder.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/sanity/ciphersuites/SystemPropCipherSuitesOrder.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/sanity/ciphersuites/SystemPropCipherSuitesOrder.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/javax/net/ssl/sanity/ciphersuites/SystemPropCipherSuitesOrder.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -24,11 +24,14 @@\n import javax.net.ssl.SSLServerSocket;\n import javax.net.ssl.SSLSocket;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n /*\n  * @test\n  * @bug 8234728\n  * @library /javax/net/ssl/templates\n  *          /javax/net/ssl/TLSCommon\n+ *          /test/lib\n  * @summary Test TLS ciphersuites order set through System properties\n  * @run main/othervm\n  *      -Djdk.tls.client.cipherSuites=TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384\n@@ -95,6 +98,10 @@ public static void main(String[] args) {\n \n     private SystemPropCipherSuitesOrder(String protocol) {\n         this.protocol = protocol;\n+        // Re-enable protocol if disabled.\n+        if (protocol.equals(\"TLSv1\") || protocol.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol);\n+        }\n     }\n \n     // Servers are configured before clients, increment test case after."
  },
  {
    "sha": "c2171d808891b283e379fa59ae8a805ae845f62a",
    "filename": "test/jdk/javax/net/ssl/sanity/ciphersuites/TLSCipherSuitesOrder.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/sanity/ciphersuites/TLSCipherSuitesOrder.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/javax/net/ssl/sanity/ciphersuites/TLSCipherSuitesOrder.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/javax/net/ssl/sanity/ciphersuites/TLSCipherSuitesOrder.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -24,11 +24,14 @@\n import javax.net.ssl.SSLServerSocket;\n import javax.net.ssl.SSLSocket;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n /*\n  * @test\n  * @bug 8234728\n  * @library /javax/net/ssl/templates\n  *          /javax/net/ssl/TLSCommon\n+ *          /test/lib\n  * @summary Test TLS ciphersuites order.\n  *      Parameter order: <protocol> <client cipher order> <server cipher order>\n  * @run main/othervm TLSCipherSuitesOrder TLSv13 ORDERED default\n@@ -67,6 +70,10 @@ public static void main(String[] args) {\n \n     private TLSCipherSuitesOrder(String protocol, String[] clientcipherSuites,\n             String[] servercipherSuites) {\n+        // Re-enable protocol if it is disabled.\n+        if (protocol.equals(\"TLSv1\") || protocol.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol);\n+        }\n         this.protocol = protocol;\n         this.clientcipherSuites = clientcipherSuites;\n         this.servercipherSuites = servercipherSuites;"
  },
  {
    "sha": "08e0afb8e88e8ac6e0410aebe5d8b5a68144fa00",
    "filename": "test/jdk/sun/security/ssl/CipherSuite/NamedGroupsWithCipherSuite.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/CipherSuite/NamedGroupsWithCipherSuite.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/CipherSuite/NamedGroupsWithCipherSuite.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/CipherSuite/NamedGroupsWithCipherSuite.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -25,11 +25,14 @@\n import javax.net.ssl.SSLServerSocket;\n import javax.net.ssl.SSLSocket;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n /*\n   * @test\n   * @bug 8224650\n   * @library /javax/net/ssl/templates\n   *          /javax/net/ssl/TLSCommon\n+  *          /test/lib\n   * @summary Test TLS ciphersuite with each individual supported group\n   * @run main/othervm NamedGroupsWithCipherSuite x25519\n   * @run main/othervm NamedGroupsWithCipherSuite x448\n@@ -139,6 +142,9 @@ public static void main(String[] args) throws Exception {\n         System.setProperty(\"jdk.tls.namedGroups\", namedGroup);\n         System.out.println(\"NamedGroup: \" + namedGroup);\n \n+        // Re-enable TLSv1 and TLSv1.1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n         for (Protocol protocol : PROTOCOLS) {\n             for (CipherSuite cipherSuite : CIPHER_SUITES) {\n                 if (cipherSuite.supportedByProtocol(protocol)"
  },
  {
    "sha": "6abcab4c555d96486beecbe93b169fd835b50efe",
    "filename": "test/jdk/sun/security/ssl/ClientHandshaker/LengthCheckTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/ClientHandshaker/LengthCheckTest.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/ClientHandshaker/LengthCheckTest.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/ClientHandshaker/LengthCheckTest.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -26,6 +26,7 @@\n  * @bug 8044860\n  * @summary Vectors and fixed length fields should be verified\n  *          for allowed sizes.\n+ * @library /test/lib\n  * @modules java.base/sun.security.ssl\n  * @run main/othervm LengthCheckTest\n  * @key randomness\n@@ -76,6 +77,8 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class LengthCheckTest {\n \n     /*\n@@ -300,6 +303,9 @@ public void execTest() throws Exception {\n      * Main entry point for this test.\n      */\n     public static void main(String args[]) throws Exception {\n+        // Re-enable TLSv1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n+\n         List<LengthCheckTest> ccsTests = new ArrayList<>();\n \n         if (debug) {"
  },
  {
    "sha": "4ced9a3ea7bfb432a6f320270eb059de055c2fb0",
    "filename": "test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.java",
    "status": "modified",
    "additions": 23,
    "deletions": 20,
    "changes": 43,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -22,10 +22,13 @@\n  */\n \n /*\n- * test\n+ * @test\n  * @bug 7126889\n  * @summary Incorrect SSLEngine debug output\n- *\n+ * @library /test/lib\n+ * @run main DebugReportsOneExtraByte\n+ */\n+/*\n  * Debug output was reporting n+1 bytes of data was written when it was\n  * really was n.\n  *\n@@ -75,24 +78,17 @@\n import java.security.*;\n import java.nio.*;\n \n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.security.SecurityUtils;\n+\n public class DebugReportsOneExtraByte {\n \n     /*\n      * Enables logging of the SSLEngine operations.\n      */\n     private static boolean logging = true;\n \n-    /*\n-     * Enables the JSSE system debugging system property:\n-     *\n-     *     -Djavax.net.debug=all\n-     *\n-     * This gives a lot of low-level information about operations underway,\n-     * including specific handshake messages, and might be best examined\n-     * after gaining some familiarity with this application.\n-     */\n-    private static boolean debug = false;\n-\n     private SSLContext sslc;\n \n     private SSLEngine clientEngine;     // client Engine\n@@ -130,14 +126,21 @@\n      * Main entry point for this test.\n      */\n     public static void main(String args[]) throws Exception {\n-        if (debug) {\n-            System.setProperty(\"javax.net.debug\", \"all\");\n-        }\n \n-        DebugReportsOneExtraByte test = new DebugReportsOneExtraByte();\n-        test.runTest();\n+        if (args.length == 0) {\n+            OutputAnalyzer output = ProcessTools.executeTestJvm(\n+                \"-Dtest.src=\" + System.getProperty(\"test.src\"),\n+                \"-Djavax.net.debug=all\", \"DebugReportsOneExtraByte\", \"p\");\n+            output.shouldContain(\"WRITE: TLS10 application_data, length = 8\");\n \n-        System.out.println(\"Test Passed.\");\n+            System.out.println(\"Test Passed.\");\n+        } else {\n+            // Re-enable TLSv1 since test depends on it\n+            SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n+\n+            DebugReportsOneExtraByte test = new DebugReportsOneExtraByte();\n+            test.runTest();\n+        }\n     }\n \n     /*"
  },
  {
    "sha": "09edb8c8b165e4dffed689f6bc9bc89935a73d8a",
    "filename": "test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.sh",
    "status": "removed",
    "additions": 0,
    "deletions": 81,
    "changes": 81,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/54a8465c066144021d780fe70fad0589d3ff2986/test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.sh",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/54a8465c066144021d780fe70fad0589d3ff2986/test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.sh",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/EngineArgs/DebugReportsOneExtraByte.sh?ref=54a8465c066144021d780fe70fad0589d3ff2986",
    "patch": "@@ -1,81 +0,0 @@\n-#! /bin/sh\n-\n-#\n-# Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 7126889\n-# @summary Incorrect SSLEngine debug output\n-#\n-# ${TESTJAVA} is pointing to the JDK under test.\n-#\n-# set platform-dependent variables\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS | Linux | Darwin | AIX )\n-    PS=\":\"\n-    FS=\"/\"\n-    ;;\n-  CYGWIN* )\n-    PS=\";\"\n-    FS=\"/\"\n-    ;;\n-  Windows* )\n-    PS=\";\"\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . \\\n-    ${TESTSRC}${FS}DebugReportsOneExtraByte.java\n-\n-STRING='WRITE: TLS10 application_data, length = 8'\n-\n-echo \"Examining debug output for the string:\"\n-echo \"${STRING}\"\n-echo \"=========\"\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} -Djavax.net.debug=all \\\n-    -Dtest.src=${TESTSRC} \\\n-    DebugReportsOneExtraByte 2>&1 | \\\n-    grep \"${STRING}\"\n-RETVAL=$?\n-\n-echo \"=========\"\n-\n-if [ ${RETVAL} -ne 0 ]; then\n-    echo \"Did NOT see the expected debug output.\"\n-    exit 1\n-else\n-    echo \"Received the expected debug output.\"\n-    exit 0\n-fi\n-else\n-    echo \"Received the expected debug output.\"\n-    exit 0\n-fi"
  },
  {
    "sha": "10ec46996ed85179740e08fd150a3efc86150c2a",
    "filename": "test/jdk/sun/security/ssl/HandshakeHash/HandshakeHashCloneExhaustion.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/HandshakeHash/HandshakeHashCloneExhaustion.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/HandshakeHash/HandshakeHashCloneExhaustion.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/HandshakeHash/HandshakeHashCloneExhaustion.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -33,6 +33,7 @@\n  *     Master Secret Extension\n  * @summary Increase the number of clones in the CloneableDigest\n  * @library /javax/net/ssl/templates\n+ * @library /test/lib\n  * @compile DigestBase.java\n  * @run main/othervm HandshakeHashCloneExhaustion\n  *     TLSv1.3 TLS_AES_128_GCM_SHA256\n@@ -48,6 +49,8 @@\n import java.security.Security;\n import javax.net.ssl.SSLSocket;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class HandshakeHashCloneExhaustion extends SSLSocketTemplate {\n \n     private static String[] protocol;\n@@ -79,6 +82,10 @@ public static void main(String[] args) throws Exception {\n         protocol = new String [] { args[0] };\n         ciphersuite = new String[] { args[1] };\n \n+        // Re-enable TLSv1.1 when test depends on it.\n+        if (protocol[0].equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol[0]);\n+        }\n         (new HandshakeHashCloneExhaustion()).run();\n     }\n "
  },
  {
    "sha": "baf2dfa853f1af86e6f2aac6ba09be0963a8466c",
    "filename": "test/jdk/sun/security/ssl/SSLContextImpl/IllegalProtocolProperty.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLContextImpl/IllegalProtocolProperty.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLContextImpl/IllegalProtocolProperty.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/SSLContextImpl/IllegalProtocolProperty.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -28,13 +28,16 @@\n  * @test\n  * @bug 7093640\n  * @summary Enable TLS 1.1 and TLS 1.2 by default in client side of SunJSSE\n+ * @library /test/lib\n  * @run main/othervm -Djdk.tls.client.protocols=\"XSLv3,TLSv1\"\n  *      IllegalProtocolProperty\n  */\n \n import javax.net.ssl.*;\n import java.security.NoSuchAlgorithmException;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class IllegalProtocolProperty {\n     static enum ContextVersion {\n         TLS_CV_01(\"SSL\", \"TLSv1\", \"TLSv1.2\", true),\n@@ -60,6 +63,9 @@\n     }\n \n     public static void main(String[] args) throws Exception {\n+        // Re-enable TLSv1 and TLSv1.1 since test depends on them.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n         for (ContextVersion cv : ContextVersion.values()) {\n             System.out.println(\"Checking SSLContext of \" + cv.contextVersion);\n "
  },
  {
    "sha": "b0327d69a662ecba903e07b8f8b3e6a23b678d72",
    "filename": "test/jdk/sun/security/ssl/SSLContextImpl/SSLContextDefault.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLContextImpl/SSLContextDefault.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLContextImpl/SSLContextDefault.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/SSLContextImpl/SSLContextDefault.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+//\n+// SunJSSE does not support dynamic system properties, no way to re-use\n+// system properties in samevm/agentvm mode.\n+//\n+\n+/*\n+ * @test\n+ * @bug 8202343\n+ * @summary Check that SSLv3, TLSv1 and TLSv1.1 are disabled by default\n+ * @run main/othervm SSLContextDefault\n+ */\n+\n+import java.util.List;\n+import javax.net.ssl.*;\n+\n+public class SSLContextDefault {\n+\n+    private final static String[] protocols = {\n+        \"\", \"SSL\", \"TLS\", \"SSLv3\", \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"\n+    };\n+\n+    private final static List<String> disabledProtocols = List.<String>of(\n+        \"SSLv3\", \"TLSv1\", \"TLSv1.1\"\n+    );\n+\n+    public static void main(String[] args) throws Exception {\n+        for (String protocol : protocols) {\n+            System.out.println(\"//\");\n+            System.out.println(\"// \" + \"Testing for SSLContext of \" +\n+                    (protocol.isEmpty() ? \"<default>\" : protocol));\n+            System.out.println(\"//\");\n+            checkForProtocols(protocol);\n+            System.out.println();\n+        }\n+    }\n+\n+    public static void checkForProtocols(String protocol) throws Exception {\n+        SSLContext context;\n+        if (protocol.isEmpty()) {\n+            context = SSLContext.getDefault();\n+        } else {\n+            context = SSLContext.getInstance(protocol);\n+            context.init(null, null, null);\n+        }\n+\n+        // check for the presence of supported protocols of SSLContext\n+        SSLParameters parameters = context.getSupportedSSLParameters();\n+        checkProtocols(parameters.getProtocols(),\n+                \"Supported protocols in SSLContext\", false);\n+\n+\n+        // check for the presence of default protocols of SSLContext\n+        parameters = context.getDefaultSSLParameters();\n+        checkProtocols(parameters.getProtocols(),\n+                \"Enabled protocols in SSLContext\", true);\n+\n+        // check for the presence of supported protocols of SSLEngine\n+        SSLEngine engine = context.createSSLEngine();\n+        checkProtocols(engine.getSupportedProtocols(),\n+                \"Supported protocols in SSLEngine\", false);\n+\n+        // Check for the presence of default protocols of SSLEngine\n+        checkProtocols(engine.getEnabledProtocols(),\n+                \"Enabled protocols in SSLEngine\", true);\n+\n+        SSLSocketFactory factory = context.getSocketFactory();\n+        try (SSLSocket socket = (SSLSocket)factory.createSocket()) {\n+            // check for the presence of supported protocols of SSLSocket\n+            checkProtocols(socket.getSupportedProtocols(),\n+                \"Supported cipher suites in SSLSocket\", false);\n+\n+            // Check for the presence of default protocols of SSLSocket\n+            checkProtocols(socket.getEnabledProtocols(),\n+                \"Enabled protocols in SSLSocket\", true);\n+        }\n+\n+        SSLServerSocketFactory serverFactory = context.getServerSocketFactory();\n+        try (SSLServerSocket serverSocket =\n+                (SSLServerSocket)serverFactory.createServerSocket()) {\n+            // check for the presence of supported protocols of SSLServerSocket\n+            checkProtocols(serverSocket.getSupportedProtocols(),\n+                \"Supported cipher suites in SSLServerSocket\", false);\n+\n+            // Check for the presence of default protocols of SSLServerSocket\n+            checkProtocols(serverSocket.getEnabledProtocols(),\n+                \"Enabled protocols in SSLServerSocket\", true);\n+        }\n+    }\n+\n+    private static void checkProtocols(String[] protocols,\n+            String title, boolean disabled) throws Exception {\n+        showProtocols(protocols, title);\n+\n+        if (disabled) {\n+            for (String protocol : protocols ) {\n+                if (disabledProtocols.contains(protocol)) {\n+                    throw new Exception(protocol +\n+                                        \" should not be enabled by default\");\n+                }\n+            }\n+        } else {\n+            for (String disabledProtocol : disabledProtocols) {\n+                if (!List.of(protocols).contains(disabledProtocol)) {\n+                    throw new Exception(disabledProtocol +\n+                                        \" should be supported by default\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void showProtocols(String[] protocols, String title) {\n+        System.out.println(title + \"[\" + protocols.length + \"]:\");\n+        for (String protocol : protocols) {\n+            System.out.println(\"  \" + protocol);\n+        }\n+    }\n+}"
  },
  {
    "sha": "69ade7b2013377ec44e11c1d5f3b3aeb766dd73c",
    "filename": "test/jdk/sun/security/ssl/SSLContextImpl/SSLContextVersion.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLContextImpl/SSLContextVersion.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLContextImpl/SSLContextVersion.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/SSLContextImpl/SSLContextVersion.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -29,11 +29,14 @@\n  * @bug 6976117\n  * @summary SSLContext.getInstance(\"TLSv1.1\") returns SSLEngines/SSLSockets\n  *          without TLSv1.1 enabled\n+ * @library /test/lib\n  * @run main/othervm SSLContextVersion\n  */\n \n import javax.net.ssl.*;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class SSLContextVersion {\n     static enum ContextVersion {\n         TLS_CV_01(\"SSL\", \"TLSv1.2\", \"TLSv1.2\"),\n@@ -57,6 +60,9 @@\n     }\n \n     public static void main(String[] args) throws Exception {\n+        // Re-enable TLSv1 and TLSv1.1 since test depends on them.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n         for (ContextVersion cv : ContextVersion.values()) {\n             System.out.println(\"Checking SSLContext of \" + cv.contextVersion);\n             SSLContext context = SSLContext.getInstance(cv.contextVersion);"
  },
  {
    "sha": "7e9f314cfaed71fbd7abd14975724d32a2a1e270",
    "filename": "test/jdk/sun/security/ssl/SSLEngineImpl/EmptyExtensionData.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLEngineImpl/EmptyExtensionData.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLEngineImpl/EmptyExtensionData.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/SSLEngineImpl/EmptyExtensionData.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -30,6 +30,7 @@\n  * @test\n  * @bug 6728126\n  * @summary Parsing Extensions in Client Hello message is done in a wrong way\n+ * @library /test/lib\n  * @run main/othervm EmptyExtensionData\n  */\n \n@@ -39,6 +40,8 @@\n import java.security.*;\n import java.nio.*;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class EmptyExtensionData {\n \n     private static boolean debug = false;\n@@ -154,6 +157,8 @@ private static void runDelegatedTasks(SSLEngineResult result,\n     }\n \n     public static void main(String args[]) throws Exception {\n+        // Re-enable TLSv1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n \n         SSLEngine ssle = createSSLEngine(keyFilename, trustFilename);\n         runTest(ssle);"
  },
  {
    "sha": "a3e355af361ed48c11e3fc825f2e79234a4c1b99",
    "filename": "test/jdk/sun/security/ssl/SSLEngineImpl/SSLEngineBadBufferArrayAccess.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLEngineImpl/SSLEngineBadBufferArrayAccess.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/ssl/SSLEngineImpl/SSLEngineBadBufferArrayAccess.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/ssl/SSLEngineImpl/SSLEngineBadBufferArrayAccess.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -30,6 +30,7 @@\n  * @test\n  * @bug 7031830\n  * @summary bad_record_mac failure on TLSv1.2 enabled connection with SSLEngine\n+ * @library /test/lib\n  * @run main/othervm SSLEngineBadBufferArrayAccess\n  */\n \n@@ -86,6 +87,8 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n public class SSLEngineBadBufferArrayAccess {\n \n     /*\n@@ -158,6 +161,9 @@ public static void main(String args[]) throws Exception {\n             System.setProperty(\"javax.net.debug\", \"all\");\n         }\n \n+        // Re-enable TLSv1 and TLSv1.1 since test depends on them.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n         String [] protocols = new String [] {\n             \"SSLv3\", \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\" };\n "
  },
  {
    "sha": "79c79a33c0810b13974fcf13f0d356f116f89f4d",
    "filename": "test/jdk/sun/security/util/HostnameMatcher/NullHostnameCheck.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/util/HostnameMatcher/NullHostnameCheck.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/jdk/sun/security/util/HostnameMatcher/NullHostnameCheck.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/jdk/sun/security/util/HostnameMatcher/NullHostnameCheck.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -37,6 +37,8 @@\n import java.security.cert.X509Certificate;\n import java.util.Base64;\n \n+import jdk.test.lib.security.SecurityUtils;\n+\n /*\n  * @test\n  * @bug 8211339 8234728\n@@ -53,6 +55,12 @@\n \n     public static void main(String[] args) throws Exception {\n         String protocol = args[0];\n+\n+        // Re-enable TLSv1 or TLSv1.1 when test depends on it.\n+        if (protocol.equals(\"TLSv1\") || protocol.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol);\n+        }\n+\n         KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n         keyStore.load(\n                 new ByteArrayInputStream(Base64.getDecoder()."
  },
  {
    "sha": "6bfcfa7227aca3022a2da7ce984bb1bbe76fb7cd",
    "filename": "test/lib/jdk/test/lib/security/SecurityUtils.java",
    "status": "modified",
    "additions": 23,
    "deletions": 1,
    "changes": 24,
    "blob_url": "https://github.com/openjdk/jdk13u-dev/blob/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/lib/jdk/test/lib/security/SecurityUtils.java",
    "raw_url": "https://github.com/openjdk/jdk13u-dev/raw/e5a78a288f8f2724b6227c4076b6d3084a1a547d/test/lib/jdk/test/lib/security/SecurityUtils.java",
    "contents_url": "https://api.github.com/repos/openjdk/jdk13u-dev/contents/test/lib/jdk/test/lib/security/SecurityUtils.java?ref=e5a78a288f8f2724b6227c4076b6d3084a1a547d",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and/or modify it\n@@ -25,6 +25,10 @@\n \n import java.io.File;\n import java.security.KeyStore;\n+import java.security.Security;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * Common library for various security test helper functions.\n@@ -48,5 +52,23 @@ public static KeyStore getCacertsKeyStore() throws Exception {\n         return KeyStore.getInstance(file, (char[])null);\n     }\n \n+    /**\n+     * Removes the specified protocols from the jdk.tls.disabledAlgorithms\n+     * security property.\n+     */\n+    public static void removeFromDisabledTlsAlgs(String... protocols) {\n+        removeFromDisabledAlgs(\"jdk.tls.disabledAlgorithms\",\n+                               List.<String>of(protocols));\n+    }\n+\n+    private static void removeFromDisabledAlgs(String prop, List<String> algs) {\n+        String value = Security.getProperty(prop);\n+        value = Arrays.stream(value.split(\",\"))\n+                      .map(s -> s.trim())\n+                      .filter(s -> !algs.contains(s))\n+                      .collect(Collectors.joining(\",\"));\n+        Security.setProperty(prop, value);\n+    }\n+\n     private SecurityUtils() {}\n }"
  }
]
