[
  {
    "sha": "528e5bb871b66031af677d0c86f15a8957e6f86c",
    "filename": "api/api/hbm/energy/IBatteryItem.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/energy/IBatteryItem.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/energy/IBatteryItem.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/api/hbm/energy/IBatteryItem.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "previous_filename": "src/main/java/api/hbm/energy/IBatteryItem.java"
  },
  {
    "sha": "c5649d4fcf9a8b8afba3ed4ff61d9ca28f40c78f",
    "filename": "api/api/hbm/energy/IEnergyConsumer.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/energy/IEnergyConsumer.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/energy/IEnergyConsumer.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/api/hbm/energy/IEnergyConsumer.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "previous_filename": "src/main/java/api/hbm/energy/IEnergyConsumer.java"
  },
  {
    "sha": "d18c090ce4e3627b097414e8a6f5724b28e0ecde",
    "filename": "api/api/hbm/energy/IEnergySource.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/energy/IEnergySource.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/energy/IEnergySource.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/api/hbm/energy/IEnergySource.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "previous_filename": "src/main/java/api/hbm/energy/IEnergySource.java"
  },
  {
    "sha": "293b2030b0d379b439f9f74041ffbe01cfefd360",
    "filename": "api/api/hbm/entity/IRadarDetectable.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/entity/IRadarDetectable.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/entity/IRadarDetectable.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/api/hbm/entity/IRadarDetectable.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "previous_filename": "src/main/java/api/hbm/entity/IRadarDetectable.java"
  },
  {
    "sha": "d7150807e330a0785211021b6dfcf34a1063f2ce",
    "filename": "api/api/hbm/entity/IRadiationImmune.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/entity/IRadiationImmune.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/api/hbm/entity/IRadiationImmune.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/api/hbm/entity/IRadiationImmune.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "previous_filename": "src/main/java/api/hbm/entity/IRadiationImmune.java"
  },
  {
    "sha": "c2fbcd9cbe924480af3931cc6a4044a617221748",
    "filename": "api/cofh/api/CoFHAPIProps.java",
    "status": "renamed",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/CoFHAPIProps.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/CoFHAPIProps.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/CoFHAPIProps.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,11 +1,11 @@\n-package cofh.api;\r\n-\r\n-public class CoFHAPIProps {\r\n-\r\n-\tprivate CoFHAPIProps() {\r\n-\r\n-\t}\r\n-\r\n-\tpublic static final String VERSION = \"1.7.10R1.0.2\";\r\n-\r\n+package cofh.api;\n+\n+public class CoFHAPIProps {\n+\n+\tprivate CoFHAPIProps() {\n+\n+\t}\n+\n+\tpublic static final String VERSION = \"1.7.10R1.0.2\";\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/CoFHAPIProps.java"
  },
  {
    "sha": "60bebdb174d4df37d11fadff53a1809e8d325eae",
    "filename": "api/cofh/api/energy/EnergyStorage.java",
    "status": "renamed",
    "additions": 157,
    "deletions": 157,
    "changes": 314,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/EnergyStorage.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/EnergyStorage.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/EnergyStorage.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,158 +1,158 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraft.nbt.NBTTagCompound;\r\n-\r\n-/**\r\n- * Reference implementation of {@link IEnergyStorage}. Use/extend this or implement your own.\r\n- * \r\n- * @author King Lemming\r\n- * \r\n- */\r\n-public class EnergyStorage implements IEnergyStorage {\r\n-\r\n-\tprotected int energy;\r\n-\tprotected int capacity;\r\n-\tprotected int maxReceive;\r\n-\tprotected int maxExtract;\r\n-\r\n-\tpublic EnergyStorage(int capacity) {\r\n-\r\n-\t\tthis(capacity, capacity, capacity);\r\n-\t}\r\n-\r\n-\tpublic EnergyStorage(int capacity, int maxTransfer) {\r\n-\r\n-\t\tthis(capacity, maxTransfer, maxTransfer);\r\n-\t}\r\n-\r\n-\tpublic EnergyStorage(int capacity, int maxReceive, int maxExtract) {\r\n-\r\n-\t\tthis.capacity = capacity;\r\n-\t\tthis.maxReceive = maxReceive;\r\n-\t\tthis.maxExtract = maxExtract;\r\n-\t}\r\n-\r\n-\tpublic EnergyStorage readFromNBT(NBTTagCompound nbt) {\r\n-\r\n-\t\tthis.energy = nbt.getInteger(\"Energy\");\r\n-\r\n-\t\tif (energy > capacity) {\r\n-\t\t\tenergy = capacity;\r\n-\t\t}\r\n-\t\treturn this;\r\n-\t}\r\n-\r\n-\tpublic NBTTagCompound writeToNBT(NBTTagCompound nbt) {\r\n-\r\n-\t\tif (energy < 0) {\r\n-\t\t\tenergy = 0;\r\n-\t\t}\r\n-\t\tnbt.setInteger(\"Energy\", energy);\r\n-\t\treturn nbt;\r\n-\t}\r\n-\r\n-\tpublic void setCapacity(int capacity) {\r\n-\r\n-\t\tthis.capacity = capacity;\r\n-\r\n-\t\tif (energy > capacity) {\r\n-\t\t\tenergy = capacity;\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic void setMaxTransfer(int maxTransfer) {\r\n-\r\n-\t\tsetMaxReceive(maxTransfer);\r\n-\t\tsetMaxExtract(maxTransfer);\r\n-\t}\r\n-\r\n-\tpublic void setMaxReceive(int maxReceive) {\r\n-\r\n-\t\tthis.maxReceive = maxReceive;\r\n-\t}\r\n-\r\n-\tpublic void setMaxExtract(int maxExtract) {\r\n-\r\n-\t\tthis.maxExtract = maxExtract;\r\n-\t}\r\n-\r\n-\tpublic int getMaxReceive() {\r\n-\r\n-\t\treturn maxReceive;\r\n-\t}\r\n-\r\n-\tpublic int getMaxExtract() {\r\n-\r\n-\t\treturn maxExtract;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * This function is included to allow for server -&gt; client sync. Do not call this externally to the containing Tile Entity, as not all IEnergyHandlers\r\n-\t * are guaranteed to have it.\r\n-\t * \r\n-\t * @param energy\r\n-\t */\r\n-\tpublic void setEnergyStored(int energy) {\r\n-\r\n-\t\tthis.energy = energy;\r\n-\r\n-\t\tif (this.energy > capacity) {\r\n-\t\t\tthis.energy = capacity;\r\n-\t\t} else if (this.energy < 0) {\r\n-\t\t\tthis.energy = 0;\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * This function is included to allow the containing tile to directly and efficiently modify the energy contained in the EnergyStorage. Do not rely on this\r\n-\t * externally, as not all IEnergyHandlers are guaranteed to have it.\r\n-\t * \r\n-\t * @param energy\r\n-\t */\r\n-\tpublic void modifyEnergyStored(int energy) {\r\n-\r\n-\t\tthis.energy += energy;\r\n-\r\n-\t\tif (this.energy > capacity) {\r\n-\t\t\tthis.energy = capacity;\r\n-\t\t} else if (this.energy < 0) {\r\n-\t\t\tthis.energy = 0;\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/* IEnergyStorage */\r\n-\t@Override\r\n-\tpublic int receiveEnergy(int maxReceive, boolean simulate) {\r\n-\r\n-\t\tint energyReceived = Math.min(capacity - energy, Math.min(this.maxReceive, maxReceive));\r\n-\r\n-\t\tif (!simulate) {\r\n-\t\t\tenergy += energyReceived;\r\n-\t\t}\r\n-\t\treturn energyReceived;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int extractEnergy(int maxExtract, boolean simulate) {\r\n-\r\n-\t\tint energyExtracted = Math.min(energy, Math.min(this.maxExtract, maxExtract));\r\n-\r\n-\t\tif (!simulate) {\r\n-\t\t\tenergy -= energyExtracted;\r\n-\t\t}\r\n-\t\treturn energyExtracted;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int getEnergyStored() {\r\n-\r\n-\t\treturn energy;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int getMaxEnergyStored() {\r\n-\r\n-\t\treturn capacity;\r\n-\t}\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraft.nbt.NBTTagCompound;\n+\n+/**\n+ * Reference implementation of {@link IEnergyStorage}. Use/extend this or implement your own.\n+ * \n+ * @author King Lemming\n+ * \n+ */\n+public class EnergyStorage implements IEnergyStorage {\n+\n+\tprotected int energy;\n+\tprotected int capacity;\n+\tprotected int maxReceive;\n+\tprotected int maxExtract;\n+\n+\tpublic EnergyStorage(int capacity) {\n+\n+\t\tthis(capacity, capacity, capacity);\n+\t}\n+\n+\tpublic EnergyStorage(int capacity, int maxTransfer) {\n+\n+\t\tthis(capacity, maxTransfer, maxTransfer);\n+\t}\n+\n+\tpublic EnergyStorage(int capacity, int maxReceive, int maxExtract) {\n+\n+\t\tthis.capacity = capacity;\n+\t\tthis.maxReceive = maxReceive;\n+\t\tthis.maxExtract = maxExtract;\n+\t}\n+\n+\tpublic EnergyStorage readFromNBT(NBTTagCompound nbt) {\n+\n+\t\tthis.energy = nbt.getInteger(\"Energy\");\n+\n+\t\tif (energy > capacity) {\n+\t\t\tenergy = capacity;\n+\t\t}\n+\t\treturn this;\n+\t}\n+\n+\tpublic NBTTagCompound writeToNBT(NBTTagCompound nbt) {\n+\n+\t\tif (energy < 0) {\n+\t\t\tenergy = 0;\n+\t\t}\n+\t\tnbt.setInteger(\"Energy\", energy);\n+\t\treturn nbt;\n+\t}\n+\n+\tpublic void setCapacity(int capacity) {\n+\n+\t\tthis.capacity = capacity;\n+\n+\t\tif (energy > capacity) {\n+\t\t\tenergy = capacity;\n+\t\t}\n+\t}\n+\n+\tpublic void setMaxTransfer(int maxTransfer) {\n+\n+\t\tsetMaxReceive(maxTransfer);\n+\t\tsetMaxExtract(maxTransfer);\n+\t}\n+\n+\tpublic void setMaxReceive(int maxReceive) {\n+\n+\t\tthis.maxReceive = maxReceive;\n+\t}\n+\n+\tpublic void setMaxExtract(int maxExtract) {\n+\n+\t\tthis.maxExtract = maxExtract;\n+\t}\n+\n+\tpublic int getMaxReceive() {\n+\n+\t\treturn maxReceive;\n+\t}\n+\n+\tpublic int getMaxExtract() {\n+\n+\t\treturn maxExtract;\n+\t}\n+\n+\t/**\n+\t * This function is included to allow for server -&gt; client sync. Do not call this externally to the containing Tile Entity, as not all IEnergyHandlers\n+\t * are guaranteed to have it.\n+\t * \n+\t * @param energy\n+\t */\n+\tpublic void setEnergyStored(int energy) {\n+\n+\t\tthis.energy = energy;\n+\n+\t\tif (this.energy > capacity) {\n+\t\t\tthis.energy = capacity;\n+\t\t} else if (this.energy < 0) {\n+\t\t\tthis.energy = 0;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * This function is included to allow the containing tile to directly and efficiently modify the energy contained in the EnergyStorage. Do not rely on this\n+\t * externally, as not all IEnergyHandlers are guaranteed to have it.\n+\t * \n+\t * @param energy\n+\t */\n+\tpublic void modifyEnergyStored(int energy) {\n+\n+\t\tthis.energy += energy;\n+\n+\t\tif (this.energy > capacity) {\n+\t\t\tthis.energy = capacity;\n+\t\t} else if (this.energy < 0) {\n+\t\t\tthis.energy = 0;\n+\t\t}\n+\t}\n+\n+\t/* IEnergyStorage */\n+\t@Override\n+\tpublic int receiveEnergy(int maxReceive, boolean simulate) {\n+\n+\t\tint energyReceived = Math.min(capacity - energy, Math.min(this.maxReceive, maxReceive));\n+\n+\t\tif (!simulate) {\n+\t\t\tenergy += energyReceived;\n+\t\t}\n+\t\treturn energyReceived;\n+\t}\n+\n+\t@Override\n+\tpublic int extractEnergy(int maxExtract, boolean simulate) {\n+\n+\t\tint energyExtracted = Math.min(energy, Math.min(this.maxExtract, maxExtract));\n+\n+\t\tif (!simulate) {\n+\t\t\tenergy -= energyExtracted;\n+\t\t}\n+\t\treturn energyExtracted;\n+\t}\n+\n+\t@Override\n+\tpublic int getEnergyStored() {\n+\n+\t\treturn energy;\n+\t}\n+\n+\t@Override\n+\tpublic int getMaxEnergyStored() {\n+\n+\t\treturn capacity;\n+\t}\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/EnergyStorage.java"
  },
  {
    "sha": "5d68a132c6ba608cf47904c92680cec6564eb7bb",
    "filename": "api/cofh/api/energy/IEnergyConnection.java",
    "status": "renamed",
    "additions": 20,
    "deletions": 20,
    "changes": 40,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyConnection.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyConnection.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/IEnergyConnection.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,21 +1,21 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraftforge.common.util.ForgeDirection;\r\n-\r\n-/**\r\n- * Implement this interface on TileEntities which should connect to energy transportation blocks. This is intended for blocks which generate energy but do not\r\n- * accept it; otherwise just use IEnergyHandler.\r\n- * <p>\r\n- * Note that {@link IEnergyHandler} is an extension of this.\r\n- * \r\n- * @author King Lemming\r\n- * \r\n- */\r\n-public interface IEnergyConnection {\r\n-\r\n-\t/**\r\n-\t * Returns TRUE if the TileEntity can connect on a given side.\r\n-\t */\r\n-\tboolean canConnectEnergy(ForgeDirection from);\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraftforge.common.util.ForgeDirection;\n+\n+/**\n+ * Implement this interface on TileEntities which should connect to energy transportation blocks. This is intended for blocks which generate energy but do not\n+ * accept it; otherwise just use IEnergyHandler.\n+ * <p>\n+ * Note that {@link IEnergyHandler} is an extension of this.\n+ * \n+ * @author King Lemming\n+ * \n+ */\n+public interface IEnergyConnection {\n+\n+\t/**\n+\t * Returns TRUE if the TileEntity can connect on a given side.\n+\t */\n+\tboolean canConnectEnergy(ForgeDirection from);\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/IEnergyConnection.java"
  },
  {
    "sha": "24c7438092a7023bff4250eb3e67a9085b55dd8b",
    "filename": "api/cofh/api/energy/IEnergyContainerItem.java",
    "status": "renamed",
    "additions": 51,
    "deletions": 51,
    "changes": 102,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyContainerItem.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyContainerItem.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/IEnergyContainerItem.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,52 +1,52 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraft.item.ItemStack;\r\n-\r\n-/**\r\n- * Implement this interface on Item classes that support external manipulation of their internal energy storages.\r\n- * <p>\r\n- * A reference implementation is provided {@link ItemEnergyContainer}.\r\n- * \r\n- * @author King Lemming\r\n- * \r\n- */\r\n-public interface IEnergyContainerItem {\r\n-\r\n-\t/**\r\n-\t * Adds energy to a container item. Returns the quantity of energy that was accepted. This should always return 0 if the item cannot be externally charged.\r\n-\t * \r\n-\t * @param container\r\n-\t *            ItemStack to be charged.\r\n-\t * @param maxReceive\r\n-\t *            Maximum amount of energy to be sent into the item.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the charge will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) received by the item.\r\n-\t */\r\n-\tint receiveEnergy(ItemStack container, int maxReceive, boolean simulate);\r\n-\r\n-\t/**\r\n-\t * Removes energy from a container item. Returns the quantity of energy that was removed. This should always return 0 if the item cannot be externally\r\n-\t * discharged.\r\n-\t * \r\n-\t * @param container\r\n-\t *            ItemStack to be discharged.\r\n-\t * @param maxExtract\r\n-\t *            Maximum amount of energy to be extracted from the item.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the discharge will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) extracted from the item.\r\n-\t */\r\n-\tint extractEnergy(ItemStack container, int maxExtract, boolean simulate);\r\n-\r\n-\t/**\r\n-\t * Get the amount of energy currently stored in the container item.\r\n-\t */\r\n-\tint getEnergyStored(ItemStack container);\r\n-\r\n-\t/**\r\n-\t * Get the max amount of energy that can be stored in the container item.\r\n-\t */\r\n-\tint getMaxEnergyStored(ItemStack container);\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraft.item.ItemStack;\n+\n+/**\n+ * Implement this interface on Item classes that support external manipulation of their internal energy storages.\n+ * <p>\n+ * A reference implementation is provided {@link ItemEnergyContainer}.\n+ * \n+ * @author King Lemming\n+ * \n+ */\n+public interface IEnergyContainerItem {\n+\n+\t/**\n+\t * Adds energy to a container item. Returns the quantity of energy that was accepted. This should always return 0 if the item cannot be externally charged.\n+\t * \n+\t * @param container\n+\t *            ItemStack to be charged.\n+\t * @param maxReceive\n+\t *            Maximum amount of energy to be sent into the item.\n+\t * @param simulate\n+\t *            If TRUE, the charge will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) received by the item.\n+\t */\n+\tint receiveEnergy(ItemStack container, int maxReceive, boolean simulate);\n+\n+\t/**\n+\t * Removes energy from a container item. Returns the quantity of energy that was removed. This should always return 0 if the item cannot be externally\n+\t * discharged.\n+\t * \n+\t * @param container\n+\t *            ItemStack to be discharged.\n+\t * @param maxExtract\n+\t *            Maximum amount of energy to be extracted from the item.\n+\t * @param simulate\n+\t *            If TRUE, the discharge will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) extracted from the item.\n+\t */\n+\tint extractEnergy(ItemStack container, int maxExtract, boolean simulate);\n+\n+\t/**\n+\t * Get the amount of energy currently stored in the container item.\n+\t */\n+\tint getEnergyStored(ItemStack container);\n+\n+\t/**\n+\t * Get the max amount of energy that can be stored in the container item.\n+\t */\n+\tint getMaxEnergyStored(ItemStack container);\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/IEnergyContainerItem.java"
  },
  {
    "sha": "9e4fe6f78978e5f061532bbb269a523046197462",
    "filename": "api/cofh/api/energy/IEnergyHandler.java",
    "status": "renamed",
    "additions": 57,
    "deletions": 57,
    "changes": 114,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyHandler.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyHandler.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/IEnergyHandler.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,58 +1,58 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraftforge.common.util.ForgeDirection;\r\n-\r\n-/**\r\n- * Implement this interface on Tile Entities which should handle energy, generally storing it in one or more internal {@link IEnergyStorage} objects.\r\n- * <p>\r\n- * A reference implementation is provided {@link TileEnergyHandler}.\r\n- *\r\n- * @author King Lemming\r\n- *\r\n- */\r\n-public interface IEnergyHandler extends IEnergyProvider, IEnergyReceiver {\r\n-\r\n-\t// merely a convenience interface (remove these methods in 1.8; provided here for back-compat via compiler doing things)\r\n-\r\n-\t/**\r\n-\t * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.\r\n-\t *\r\n-\t * @param from\r\n-\t *            Orientation the energy is received from.\r\n-\t * @param maxReceive\r\n-\t *            Maximum amount of energy to receive.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the charge will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) received.\r\n-\t */\r\n-\t@Override\r\n-\tint receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate);\r\n-\r\n-\t/**\r\n-\t * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.\r\n-\t *\r\n-\t * @param from\r\n-\t *            Orientation the energy is extracted from.\r\n-\t * @param maxExtract\r\n-\t *            Maximum amount of energy to extract.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the extraction will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) extracted.\r\n-\t */\r\n-\t@Override\r\n-\tint extractEnergy(ForgeDirection from, int maxExtract, boolean simulate);\r\n-\r\n-\r\n-\t/**\r\n-\t * Returns the amount of energy currently stored.\r\n-\t */\r\n-\t@Override\r\n-\tint getEnergyStored(ForgeDirection from);\r\n-\r\n-\t/**\r\n-\t * Returns the maximum amount of energy that can be stored.\r\n-\t */\r\n-\t@Override\r\n-\tint getMaxEnergyStored(ForgeDirection from);\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraftforge.common.util.ForgeDirection;\n+\n+/**\n+ * Implement this interface on Tile Entities which should handle energy, generally storing it in one or more internal {@link IEnergyStorage} objects.\n+ * <p>\n+ * A reference implementation is provided {@link TileEnergyHandler}.\n+ *\n+ * @author King Lemming\n+ *\n+ */\n+public interface IEnergyHandler extends IEnergyProvider, IEnergyReceiver {\n+\n+\t// merely a convenience interface (remove these methods in 1.8; provided here for back-compat via compiler doing things)\n+\n+\t/**\n+\t * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.\n+\t *\n+\t * @param from\n+\t *            Orientation the energy is received from.\n+\t * @param maxReceive\n+\t *            Maximum amount of energy to receive.\n+\t * @param simulate\n+\t *            If TRUE, the charge will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) received.\n+\t */\n+\t@Override\n+\tint receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate);\n+\n+\t/**\n+\t * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.\n+\t *\n+\t * @param from\n+\t *            Orientation the energy is extracted from.\n+\t * @param maxExtract\n+\t *            Maximum amount of energy to extract.\n+\t * @param simulate\n+\t *            If TRUE, the extraction will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) extracted.\n+\t */\n+\t@Override\n+\tint extractEnergy(ForgeDirection from, int maxExtract, boolean simulate);\n+\n+\n+\t/**\n+\t * Returns the amount of energy currently stored.\n+\t */\n+\t@Override\n+\tint getEnergyStored(ForgeDirection from);\n+\n+\t/**\n+\t * Returns the maximum amount of energy that can be stored.\n+\t */\n+\t@Override\n+\tint getMaxEnergyStored(ForgeDirection from);\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/IEnergyHandler.java"
  },
  {
    "sha": "af1210b9502c64cdabd4c3716dc6cb5a813b0131",
    "filename": "api/cofh/api/energy/IEnergyProvider.java",
    "status": "renamed",
    "additions": 37,
    "deletions": 37,
    "changes": 74,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyProvider.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyProvider.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/IEnergyProvider.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,38 +1,38 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraftforge.common.util.ForgeDirection;\r\n-\r\n-/**\r\n- * Implement this interface on Tile Entities which should provide energy, generally storing it in one or more internal {@link IEnergyStorage} objects.\r\n- * <p>\r\n- * A reference implementation is provided {@link TileEnergyHandler}.\r\n- *\r\n- * @author King Lemming\r\n- *\r\n- */\r\n-public interface IEnergyProvider extends IEnergyConnection {\r\n-\r\n-\t/**\r\n-\t * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.\r\n-\t *\r\n-\t * @param from\r\n-\t *            Orientation the energy is extracted from.\r\n-\t * @param maxExtract\r\n-\t *            Maximum amount of energy to extract.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the extraction will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) extracted.\r\n-\t */\r\n-\tint extractEnergy(ForgeDirection from, int maxExtract, boolean simulate);\r\n-\r\n-\t/**\r\n-\t * Returns the amount of energy currently stored.\r\n-\t */\r\n-\tint getEnergyStored(ForgeDirection from);\r\n-\r\n-\t/**\r\n-\t * Returns the maximum amount of energy that can be stored.\r\n-\t */\r\n-\tint getMaxEnergyStored(ForgeDirection from);\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraftforge.common.util.ForgeDirection;\n+\n+/**\n+ * Implement this interface on Tile Entities which should provide energy, generally storing it in one or more internal {@link IEnergyStorage} objects.\n+ * <p>\n+ * A reference implementation is provided {@link TileEnergyHandler}.\n+ *\n+ * @author King Lemming\n+ *\n+ */\n+public interface IEnergyProvider extends IEnergyConnection {\n+\n+\t/**\n+\t * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.\n+\t *\n+\t * @param from\n+\t *            Orientation the energy is extracted from.\n+\t * @param maxExtract\n+\t *            Maximum amount of energy to extract.\n+\t * @param simulate\n+\t *            If TRUE, the extraction will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) extracted.\n+\t */\n+\tint extractEnergy(ForgeDirection from, int maxExtract, boolean simulate);\n+\n+\t/**\n+\t * Returns the amount of energy currently stored.\n+\t */\n+\tint getEnergyStored(ForgeDirection from);\n+\n+\t/**\n+\t * Returns the maximum amount of energy that can be stored.\n+\t */\n+\tint getMaxEnergyStored(ForgeDirection from);\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/IEnergyProvider.java"
  },
  {
    "sha": "77c1c0a63b20caa133a3a1a2075fa2c2daa3d2df",
    "filename": "api/cofh/api/energy/IEnergyReceiver.java",
    "status": "renamed",
    "additions": 37,
    "deletions": 37,
    "changes": 74,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyReceiver.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyReceiver.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/IEnergyReceiver.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,38 +1,38 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraftforge.common.util.ForgeDirection;\r\n-\r\n-/**\r\n- * Implement this interface on Tile Entities which should receive energy, generally storing it in one or more internal {@link IEnergyStorage} objects.\r\n- * <p>\r\n- * A reference implementation is provided {@link TileEnergyHandler}.\r\n- *\r\n- * @author King Lemming\r\n- *\r\n- */\r\n-public interface IEnergyReceiver extends IEnergyConnection {\r\n-\r\n-\t/**\r\n-\t * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.\r\n-\t *\r\n-\t * @param from\r\n-\t *            Orientation the energy is received from.\r\n-\t * @param maxReceive\r\n-\t *            Maximum amount of energy to receive.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the charge will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) received.\r\n-\t */\r\n-\tint receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate);\r\n-\r\n-\t/**\r\n-\t * Returns the amount of energy currently stored.\r\n-\t */\r\n-\tint getEnergyStored(ForgeDirection from);\r\n-\r\n-\t/**\r\n-\t * Returns the maximum amount of energy that can be stored.\r\n-\t */\r\n-\tint getMaxEnergyStored(ForgeDirection from);\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraftforge.common.util.ForgeDirection;\n+\n+/**\n+ * Implement this interface on Tile Entities which should receive energy, generally storing it in one or more internal {@link IEnergyStorage} objects.\n+ * <p>\n+ * A reference implementation is provided {@link TileEnergyHandler}.\n+ *\n+ * @author King Lemming\n+ *\n+ */\n+public interface IEnergyReceiver extends IEnergyConnection {\n+\n+\t/**\n+\t * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.\n+\t *\n+\t * @param from\n+\t *            Orientation the energy is received from.\n+\t * @param maxReceive\n+\t *            Maximum amount of energy to receive.\n+\t * @param simulate\n+\t *            If TRUE, the charge will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) received.\n+\t */\n+\tint receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate);\n+\n+\t/**\n+\t * Returns the amount of energy currently stored.\n+\t */\n+\tint getEnergyStored(ForgeDirection from);\n+\n+\t/**\n+\t * Returns the maximum amount of energy that can be stored.\n+\t */\n+\tint getMaxEnergyStored(ForgeDirection from);\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/IEnergyReceiver.java"
  },
  {
    "sha": "9be47af0f48c670840c577612f396d3bfdc5e419",
    "filename": "api/cofh/api/energy/IEnergyStorage.java",
    "status": "renamed",
    "additions": 45,
    "deletions": 45,
    "changes": 90,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyStorage.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/IEnergyStorage.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/IEnergyStorage.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,46 +1,46 @@\n-package cofh.api.energy;\r\n-\r\n-/**\r\n- * An energy storage is the unit of interaction with Energy inventories.<br>\r\n- * This is not to be implemented on TileEntities. This is for internal use only.\r\n- * <p>\r\n- * A reference implementation can be found at {@link EnergyStorage}.\r\n- * \r\n- * @author King Lemming\r\n- * \r\n- */\r\n-public interface IEnergyStorage {\r\n-\r\n-\t/**\r\n-\t * Adds energy to the storage. Returns quantity of energy that was accepted.\r\n-\t * \r\n-\t * @param maxReceive\r\n-\t *            Maximum amount of energy to be inserted.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the insertion will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) accepted by the storage.\r\n-\t */\r\n-\tint receiveEnergy(int maxReceive, boolean simulate);\r\n-\r\n-\t/**\r\n-\t * Removes energy from the storage. Returns quantity of energy that was removed.\r\n-\t * \r\n-\t * @param maxExtract\r\n-\t *            Maximum amount of energy to be extracted.\r\n-\t * @param simulate\r\n-\t *            If TRUE, the extraction will only be simulated.\r\n-\t * @return Amount of energy that was (or would have been, if simulated) extracted from the storage.\r\n-\t */\r\n-\tint extractEnergy(int maxExtract, boolean simulate);\r\n-\r\n-\t/**\r\n-\t * Returns the amount of energy currently stored.\r\n-\t */\r\n-\tint getEnergyStored();\r\n-\r\n-\t/**\r\n-\t * Returns the maximum amount of energy that can be stored.\r\n-\t */\r\n-\tint getMaxEnergyStored();\r\n-\r\n+package cofh.api.energy;\n+\n+/**\n+ * An energy storage is the unit of interaction with Energy inventories.<br>\n+ * This is not to be implemented on TileEntities. This is for internal use only.\n+ * <p>\n+ * A reference implementation can be found at {@link EnergyStorage}.\n+ * \n+ * @author King Lemming\n+ * \n+ */\n+public interface IEnergyStorage {\n+\n+\t/**\n+\t * Adds energy to the storage. Returns quantity of energy that was accepted.\n+\t * \n+\t * @param maxReceive\n+\t *            Maximum amount of energy to be inserted.\n+\t * @param simulate\n+\t *            If TRUE, the insertion will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) accepted by the storage.\n+\t */\n+\tint receiveEnergy(int maxReceive, boolean simulate);\n+\n+\t/**\n+\t * Removes energy from the storage. Returns quantity of energy that was removed.\n+\t * \n+\t * @param maxExtract\n+\t *            Maximum amount of energy to be extracted.\n+\t * @param simulate\n+\t *            If TRUE, the extraction will only be simulated.\n+\t * @return Amount of energy that was (or would have been, if simulated) extracted from the storage.\n+\t */\n+\tint extractEnergy(int maxExtract, boolean simulate);\n+\n+\t/**\n+\t * Returns the amount of energy currently stored.\n+\t */\n+\tint getEnergyStored();\n+\n+\t/**\n+\t * Returns the maximum amount of energy that can be stored.\n+\t */\n+\tint getMaxEnergyStored();\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/IEnergyStorage.java"
  },
  {
    "sha": "3fb5835c5f7053ccec8121b7814b0339ba88397e",
    "filename": "api/cofh/api/energy/ItemEnergyContainer.java",
    "status": "renamed",
    "additions": 109,
    "deletions": 109,
    "changes": 218,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/ItemEnergyContainer.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/ItemEnergyContainer.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/ItemEnergyContainer.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,110 +1,110 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraft.item.Item;\r\n-import net.minecraft.item.ItemStack;\r\n-import net.minecraft.nbt.NBTTagCompound;\r\n-\r\n-/**\r\n- * Reference implementation of {@link IEnergyContainerItem}. Use/extend this or implement your own.\r\n- * \r\n- * @author King Lemming\r\n- * \r\n- */\r\n-public class ItemEnergyContainer extends Item implements IEnergyContainerItem {\r\n-\r\n-\tprotected int capacity;\r\n-\tprotected int maxReceive;\r\n-\tprotected int maxExtract;\r\n-\r\n-\tpublic ItemEnergyContainer() {\r\n-\r\n-\t}\r\n-\r\n-\tpublic ItemEnergyContainer(int capacity) {\r\n-\r\n-\t\tthis(capacity, capacity, capacity);\r\n-\t}\r\n-\r\n-\tpublic ItemEnergyContainer(int capacity, int maxTransfer) {\r\n-\r\n-\t\tthis(capacity, maxTransfer, maxTransfer);\r\n-\t}\r\n-\r\n-\tpublic ItemEnergyContainer(int capacity, int maxReceive, int maxExtract) {\r\n-\r\n-\t\tthis.capacity = capacity;\r\n-\t\tthis.maxReceive = maxReceive;\r\n-\t\tthis.maxExtract = maxExtract;\r\n-\t}\r\n-\r\n-\tpublic ItemEnergyContainer setCapacity(int capacity) {\r\n-\r\n-\t\tthis.capacity = capacity;\r\n-\t\treturn this;\r\n-\t}\r\n-\r\n-\tpublic void setMaxTransfer(int maxTransfer) {\r\n-\r\n-\t\tsetMaxReceive(maxTransfer);\r\n-\t\tsetMaxExtract(maxTransfer);\r\n-\t}\r\n-\r\n-\tpublic void setMaxReceive(int maxReceive) {\r\n-\r\n-\t\tthis.maxReceive = maxReceive;\r\n-\t}\r\n-\r\n-\tpublic void setMaxExtract(int maxExtract) {\r\n-\r\n-\t\tthis.maxExtract = maxExtract;\r\n-\t}\r\n-\r\n-\t/* IEnergyContainerItem */\r\n-\t@Override\r\n-\tpublic int receiveEnergy(ItemStack container, int maxReceive, boolean simulate) {\r\n-\r\n-\t\tif (container.stackTagCompound == null) {\r\n-\t\t\tcontainer.stackTagCompound = new NBTTagCompound();\r\n-\t\t}\r\n-\t\tint energy = container.stackTagCompound.getInteger(\"Energy\");\r\n-\t\tint energyReceived = Math.min(capacity - energy, Math.min(this.maxReceive, maxReceive));\r\n-\r\n-\t\tif (!simulate) {\r\n-\t\t\tenergy += energyReceived;\r\n-\t\t\tcontainer.stackTagCompound.setInteger(\"Energy\", energy);\r\n-\t\t}\r\n-\t\treturn energyReceived;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int extractEnergy(ItemStack container, int maxExtract, boolean simulate) {\r\n-\r\n-\t\tif (container.stackTagCompound == null || !container.stackTagCompound.hasKey(\"Energy\")) {\r\n-\t\t\treturn 0;\r\n-\t\t}\r\n-\t\tint energy = container.stackTagCompound.getInteger(\"Energy\");\r\n-\t\tint energyExtracted = Math.min(energy, Math.min(this.maxExtract, maxExtract));\r\n-\r\n-\t\tif (!simulate) {\r\n-\t\t\tenergy -= energyExtracted;\r\n-\t\t\tcontainer.stackTagCompound.setInteger(\"Energy\", energy);\r\n-\t\t}\r\n-\t\treturn energyExtracted;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int getEnergyStored(ItemStack container) {\r\n-\r\n-\t\tif (container.stackTagCompound == null || !container.stackTagCompound.hasKey(\"Energy\")) {\r\n-\t\t\treturn 0;\r\n-\t\t}\r\n-\t\treturn container.stackTagCompound.getInteger(\"Energy\");\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int getMaxEnergyStored(ItemStack container) {\r\n-\r\n-\t\treturn capacity;\r\n-\t}\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.NBTTagCompound;\n+\n+/**\n+ * Reference implementation of {@link IEnergyContainerItem}. Use/extend this or implement your own.\n+ * \n+ * @author King Lemming\n+ * \n+ */\n+public class ItemEnergyContainer extends Item implements IEnergyContainerItem {\n+\n+\tprotected int capacity;\n+\tprotected int maxReceive;\n+\tprotected int maxExtract;\n+\n+\tpublic ItemEnergyContainer() {\n+\n+\t}\n+\n+\tpublic ItemEnergyContainer(int capacity) {\n+\n+\t\tthis(capacity, capacity, capacity);\n+\t}\n+\n+\tpublic ItemEnergyContainer(int capacity, int maxTransfer) {\n+\n+\t\tthis(capacity, maxTransfer, maxTransfer);\n+\t}\n+\n+\tpublic ItemEnergyContainer(int capacity, int maxReceive, int maxExtract) {\n+\n+\t\tthis.capacity = capacity;\n+\t\tthis.maxReceive = maxReceive;\n+\t\tthis.maxExtract = maxExtract;\n+\t}\n+\n+\tpublic ItemEnergyContainer setCapacity(int capacity) {\n+\n+\t\tthis.capacity = capacity;\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setMaxTransfer(int maxTransfer) {\n+\n+\t\tsetMaxReceive(maxTransfer);\n+\t\tsetMaxExtract(maxTransfer);\n+\t}\n+\n+\tpublic void setMaxReceive(int maxReceive) {\n+\n+\t\tthis.maxReceive = maxReceive;\n+\t}\n+\n+\tpublic void setMaxExtract(int maxExtract) {\n+\n+\t\tthis.maxExtract = maxExtract;\n+\t}\n+\n+\t/* IEnergyContainerItem */\n+\t@Override\n+\tpublic int receiveEnergy(ItemStack container, int maxReceive, boolean simulate) {\n+\n+\t\tif (container.stackTagCompound == null) {\n+\t\t\tcontainer.stackTagCompound = new NBTTagCompound();\n+\t\t}\n+\t\tint energy = container.stackTagCompound.getInteger(\"Energy\");\n+\t\tint energyReceived = Math.min(capacity - energy, Math.min(this.maxReceive, maxReceive));\n+\n+\t\tif (!simulate) {\n+\t\t\tenergy += energyReceived;\n+\t\t\tcontainer.stackTagCompound.setInteger(\"Energy\", energy);\n+\t\t}\n+\t\treturn energyReceived;\n+\t}\n+\n+\t@Override\n+\tpublic int extractEnergy(ItemStack container, int maxExtract, boolean simulate) {\n+\n+\t\tif (container.stackTagCompound == null || !container.stackTagCompound.hasKey(\"Energy\")) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tint energy = container.stackTagCompound.getInteger(\"Energy\");\n+\t\tint energyExtracted = Math.min(energy, Math.min(this.maxExtract, maxExtract));\n+\n+\t\tif (!simulate) {\n+\t\t\tenergy -= energyExtracted;\n+\t\t\tcontainer.stackTagCompound.setInteger(\"Energy\", energy);\n+\t\t}\n+\t\treturn energyExtracted;\n+\t}\n+\n+\t@Override\n+\tpublic int getEnergyStored(ItemStack container) {\n+\n+\t\tif (container.stackTagCompound == null || !container.stackTagCompound.hasKey(\"Energy\")) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\treturn container.stackTagCompound.getInteger(\"Energy\");\n+\t}\n+\n+\t@Override\n+\tpublic int getMaxEnergyStored(ItemStack container) {\n+\n+\t\treturn capacity;\n+\t}\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/ItemEnergyContainer.java"
  },
  {
    "sha": "ec3db4de0d9086e2a56dac864c04db477550c7c5",
    "filename": "api/cofh/api/energy/TileEnergyHandler.java",
    "status": "renamed",
    "additions": 64,
    "deletions": 64,
    "changes": 128,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/TileEnergyHandler.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/TileEnergyHandler.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/TileEnergyHandler.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,65 +1,65 @@\n-package cofh.api.energy;\r\n-\r\n-import net.minecraft.nbt.NBTTagCompound;\r\n-import net.minecraft.tileentity.TileEntity;\r\n-import net.minecraftforge.common.util.ForgeDirection;\r\n-\r\n-/**\r\n- * Reference implementation of {@link IEnergyHandler}. Use/extend this or implement your own.\r\n- *\r\n- * @author King Lemming\r\n- *\r\n- */\r\n-public class TileEnergyHandler extends TileEntity implements IEnergyHandler {\r\n-\r\n-\tprotected EnergyStorage storage = new EnergyStorage(32000);\r\n-\r\n-\t@Override\r\n-\tpublic void readFromNBT(NBTTagCompound nbt) {\r\n-\r\n-\t\tsuper.readFromNBT(nbt);\r\n-\t\tstorage.readFromNBT(nbt);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void writeToNBT(NBTTagCompound nbt) {\r\n-\r\n-\t\tsuper.writeToNBT(nbt);\r\n-\t\tstorage.writeToNBT(nbt);\r\n-\t}\r\n-\r\n-\t/* IEnergyConnection */\r\n-\t@Override\r\n-\tpublic boolean canConnectEnergy(ForgeDirection from) {\r\n-\r\n-\t\treturn true;\r\n-\t}\r\n-\r\n-\t/* IEnergyReceiver */\r\n-\t@Override\r\n-\tpublic int receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate) {\r\n-\r\n-\t\treturn storage.receiveEnergy(maxReceive, simulate);\r\n-\t}\r\n-\r\n-\t/* IEnergyProvider */\r\n-\t@Override\r\n-\tpublic int extractEnergy(ForgeDirection from, int maxExtract, boolean simulate) {\r\n-\r\n-\t\treturn storage.extractEnergy(maxExtract, simulate);\r\n-\t}\r\n-\r\n-\t/* IEnergyReceiver and IEnergyProvider */\r\n-\t@Override\r\n-\tpublic int getEnergyStored(ForgeDirection from) {\r\n-\r\n-\t\treturn storage.getEnergyStored();\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int getMaxEnergyStored(ForgeDirection from) {\r\n-\r\n-\t\treturn storage.getMaxEnergyStored();\r\n-\t}\r\n-\r\n+package cofh.api.energy;\n+\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraftforge.common.util.ForgeDirection;\n+\n+/**\n+ * Reference implementation of {@link IEnergyHandler}. Use/extend this or implement your own.\n+ *\n+ * @author King Lemming\n+ *\n+ */\n+public class TileEnergyHandler extends TileEntity implements IEnergyHandler {\n+\n+\tprotected EnergyStorage storage = new EnergyStorage(32000);\n+\n+\t@Override\n+\tpublic void readFromNBT(NBTTagCompound nbt) {\n+\n+\t\tsuper.readFromNBT(nbt);\n+\t\tstorage.readFromNBT(nbt);\n+\t}\n+\n+\t@Override\n+\tpublic void writeToNBT(NBTTagCompound nbt) {\n+\n+\t\tsuper.writeToNBT(nbt);\n+\t\tstorage.writeToNBT(nbt);\n+\t}\n+\n+\t/* IEnergyConnection */\n+\t@Override\n+\tpublic boolean canConnectEnergy(ForgeDirection from) {\n+\n+\t\treturn true;\n+\t}\n+\n+\t/* IEnergyReceiver */\n+\t@Override\n+\tpublic int receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate) {\n+\n+\t\treturn storage.receiveEnergy(maxReceive, simulate);\n+\t}\n+\n+\t/* IEnergyProvider */\n+\t@Override\n+\tpublic int extractEnergy(ForgeDirection from, int maxExtract, boolean simulate) {\n+\n+\t\treturn storage.extractEnergy(maxExtract, simulate);\n+\t}\n+\n+\t/* IEnergyReceiver and IEnergyProvider */\n+\t@Override\n+\tpublic int getEnergyStored(ForgeDirection from) {\n+\n+\t\treturn storage.getEnergyStored();\n+\t}\n+\n+\t@Override\n+\tpublic int getMaxEnergyStored(ForgeDirection from) {\n+\n+\t\treturn storage.getMaxEnergyStored();\n+\t}\n+\n }\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/TileEnergyHandler.java"
  },
  {
    "sha": "812015c1c0562ab134ecf434a5f3f1d692b65f76",
    "filename": "api/cofh/api/energy/package-info.java",
    "status": "renamed",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/package-info.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/energy/package-info.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/energy/package-info.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,9 +1,9 @@\n-/**\r\n- * (C) 2014 Team CoFH / CoFH / Cult of the Full Hub\r\n- * http://www.teamcofh.com\r\n- */\r\n-@API(apiVersion = CoFHAPIProps.VERSION, owner = \"CoFHAPI\", provides = \"CoFHAPI|energy\")\r\n-package cofh.api.energy;\r\n-\r\n-import cofh.api.CoFHAPIProps;\r\n+/**\n+ * (C) 2014 Team CoFH / CoFH / Cult of the Full Hub\n+ * http://www.teamcofh.com\n+ */\n+@API(apiVersion = CoFHAPIProps.VERSION, owner = \"CoFHAPI\", provides = \"CoFHAPI|energy\")\n+package cofh.api.energy;\n+\n+import cofh.api.CoFHAPIProps;\n import cpw.mods.fml.common.API;\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/energy/package-info.java"
  },
  {
    "sha": "8f78d17b1d476f95393b1765dd97b898b9315fae",
    "filename": "api/cofh/api/package-info.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/package-info.java",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/api/cofh/api/package-info.java",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/api/cofh/api/package-info.java?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,8 +1,8 @@\n-/**\r\n- * (C) 2014 Team CoFH / CoFH / Cult of the Full Hub\r\n- * http://www.teamcofh.com\r\n- */\r\n-@API(apiVersion = CoFHAPIProps.VERSION, owner = \"CoFHLib\", provides = \"CoFHAPI\")\r\n-package cofh.api;\r\n-\r\n+/**\n+ * (C) 2014 Team CoFH / CoFH / Cult of the Full Hub\n+ * http://www.teamcofh.com\n+ */\n+@API(apiVersion = CoFHAPIProps.VERSION, owner = \"CoFHLib\", provides = \"CoFHAPI\")\n+package cofh.api;\n+\n import cpw.mods.fml.common.API;\n\\ No newline at end of file",
    "previous_filename": "src/main/java/cofh/api/package-info.java"
  },
  {
    "sha": "c4ce2404d91508c005976a65acbbc21d74b2e1e9",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 79,
    "deletions": 7,
    "changes": 86,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/build.gradle",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/build.gradle",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/build.gradle?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -18,21 +18,82 @@ buildscript {\n     }\n }\n \n+apply plugin: 'java'\n apply plugin: 'forge'\n+sourceCompatibility = JavaVersion.VERSION_1_8\n+targetCompatibility = JavaVersion.VERSION_1_8\n+sourceCompatibility = '1.8'\n+targetCompatibility = '1.8'\n \n-version = \"1.0\"\n-group= \"com.yourname.modid\" // http://maven.apache.org/guides/mini/guide-naming-conventions.html\n-archivesBaseName = \"modid\"\n+compileJava.options.encoding = 'UTF-8'\n+tasks.withType(JavaCompile){\n+\toptions.encoding = 'UTF-8'\n+}\n+\n+file \"build.properties\" withReader {\n+    def prop = new Properties()\n+    prop.load(it)\n+    ext.config = new ConfigSlurper().parse prop\n+}\n+\n+\n+version = \"${config.hbm.version}\"\n+group= \"com\" // http://maven.apache.org/guides/mini/guide-naming-conventions.html\n+archivesBaseName = \"hbm\"\n \n minecraft {\n-    version = \"1.7.10-10.13.4.1558-1.7.10\"\n+    version = \"${config.minecraft.version}-${config.forge.version}-${config.minecraft.version}\"\n     runDir = \"eclipse\"\n }\n \n+// configure  the source folders\n+sourceSets {\n+\n+    api {\n+\t\tjava {\n+\t\t\tsrcDir 'api'\n+\t\t}\n+    }\n+}\n+\n+repositories {\n+    maven {\n+        name 'Forge' // Applied Energistics\n+        url 'http://files.minecraftforge.net/maven'\n+    }\n+    maven {\n+        name = \"chickenbones\"\n+        url = \"http://chickenbones.net/maven/\"\n+    }\n+    maven {\n+        name = \"ic2, forestry\"\n+        url = \"http://maven.ic2.player.to/\"\n+    }\n+    maven { // AppleCore\n+        url \"http://www.ryanliptak.com/maven/\"\n+    }\n+    maven { //EnderIO\n+         name = \"tterrag\"\n+         url = \"http://maven.tterrag.com/\"\n+    }\n+    maven { // WAILA\n+        name \"Mobius Repo\"\n+        url \"http://mobiusstrip.eu/maven\"\n+    }\n+    maven { // OpenComputers\n+        name \"OpenComputers\"\n+        url \"http://maven.cil.li\"\n+    }\n+}\n+\n dependencies {\n-compile files('lib/CodeChickenCore-1.7.10-1.0.4.29-dev.jar')\n-compile files('lib/CodeChickenLib-1.7.10-1.1.3.140-dev.jar')\n-compile files('lib/NotEnoughItems-1.7.10-1.0.3.74-dev.jar')\n+\n+    compile \"codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev\"\n+    compile \"codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev\"\n+    compile \"codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev\"\n+\t\n+\t// use this if ncessary\n+\t //   compile fileTree(dir: 'libs', include: '*.jar')\n }\n \n processResources\n@@ -54,3 +115,14 @@ processResources\n         exclude 'mcmod.info'\n     }\n }\n+\n+task sourceJar(type: Jar) {\n+    from sourceSets.main.allSource\n+    from sourceSets.api.allSource\n+    classifier = 'sources'\n+}\n+\n+// add api classes to main package\n+jar {\n+\tfrom sourceSets.api.output\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4ab168e210a135f97ed710bbd915d2355cdef3a1",
    "filename": "build.properties",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/build.properties",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/build.properties",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/build.properties?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -0,0 +1,6 @@\n+minecraft.version=1.7.10\n+forge.version=10.13.4.1614\n+hbm.version = 1.0.27-3802B\n+nei.version=1.0.5.111\n+codechickenlib.version=1.1.3.140\n+codechickencore.version=1.0.7.47"
  },
  {
    "sha": "99340b4ad18d3c7e764794d300ffd35017036793",
    "filename": "gradle/wrapper/gradle-wrapper.jar",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/gradle/wrapper/gradle-wrapper.jar",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/gradle/wrapper/gradle-wrapper.jar",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/gradle/wrapper/gradle-wrapper.jar?ref=9797fcc1e312737ca55efa81a04f5de27d64a695"
  },
  {
    "sha": "2c2bbe5f9a89906f16e8d272302788f0a44f1836",
    "filename": "gradle/wrapper/gradle-wrapper.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/gradle/wrapper/gradle-wrapper.properties",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/gradle/wrapper/gradle-wrapper.properties",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/gradle/wrapper/gradle-wrapper.properties?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -1,6 +1,5 @@\n-#Wed Jul 02 15:54:47 CDT 2014\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-3.0-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4.1-bin.zip"
  },
  {
    "sha": "47dfb4f50ed648b3bd4feb69cf8e58ee157a9b81",
    "filename": "src/main/resources/mcmod.info",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/blob/9797fcc1e312737ca55efa81a04f5de27d64a695/src/main/resources/mcmod.info",
    "raw_url": "https://github.com/HbmMods/Hbm-s-Nuclear-Tech-GIT/raw/9797fcc1e312737ca55efa81a04f5de27d64a695/src/main/resources/mcmod.info",
    "contents_url": "https://api.github.com/repos/HbmMods/Hbm-s-Nuclear-Tech-GIT/contents/src/main/resources/mcmod.info?ref=9797fcc1e312737ca55efa81a04f5de27d64a695",
    "patch": "@@ -3,8 +3,8 @@\n   \"modid\": \"hbm\",\n   \"name\": \"Hbm's Nuclear Tech\",\n   \"description\": \"A mod that adds weapons, nuclear themed stuff and machines\",\n-  \"version\":\"1.0.27-3808\",\n-  \"mcversion\": \"1.7.10\",\n+  \"version\":\"${version}\",\n+  \"mcversion\": \"${mcversion}\",\n   \"url\": \"\",\n   \"updateUrl\": \"\",\n   \"authorList\": [\"HbMinecraft\"],"
  }
]
