[
  {
    "sha": "9042a5ddf792ce83b6ab8e040735f28770433495",
    "filename": ".github/workflows/buildAndTest.yml",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/.github/workflows/buildAndTest.yml",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/.github/workflows/buildAndTest.yml",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/.github/workflows/buildAndTest.yml?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,38 @@\n+name: buildAndTest\n+on:\n+  push:\n+    branches: [main]\n+  pull_request:\n+    branches: [main]\n+\n+jobs:\n+  build:\n+    # use ubuntu for more build minutes\n+    runs-on: ubuntu-latest\n+    # use release mode for all steps\n+    env:\n+      DOTNET_CONFIG: 'Release'\n+      DOTNET_DIR: ./c-sharp\n+\n+    steps:\n+    - name: clone repo\n+      uses: actions/checkout@v2\n+\n+    - name: Setup .NET Core\n+      uses: actions/setup-dotnet@v1\n+      with:\n+        dotnet-version: 2.1.814\n+\n+      # restore dependencies  \n+    - name: Install dependencies\n+      working-directory: ${{ env.DOTNET_DIR }}\n+      run: dotnet restore\n+\n+      # build project\n+    - name: Build\n+      working-directory: ${{ env.DOTNET_DIR }}\n+      run: dotnet build --configuration $DOTNET_CONFIG --no-restore\n+\n+    - name: Test\n+      working-directory: ${{ env.DOTNET_DIR }}    \n+      run: dotnet test --no-restore --no-build --configuration $DOTNET_CONFIG"
  },
  {
    "sha": "9cbdebf2383e9c5709f5d67bf269fe7203b13e25",
    "filename": "c-sharp/ConsoleApp1/Changelog.md",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/Changelog.md",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/Changelog.md",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/Changelog.md?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,40 @@\n+# Changelog\n+All notable changes to this project will be documented in this file.\n+\n+The format is based on [Keep a Changelog](https://keepachangelog.com/) and this project adheres to [Semantic Versioning][Semantic Versioning].\n+\n+## [1.1.0] - 2021-03-12\n+\n+### Added\n+\n+- Abstraction: supports new INameGen, for implementing random name generators.\n+- Abstraction: supports new IJokeGen, for implementing joke generators.\n+- Validation: duplicate detections on jokes\n+- Validation: add validation on number of jokes to generate\n+- UX: possibility to exit the application\n+- UX: user feedback loop on user exit\n+- UX: new Application Banner\n+- CI: adding unit test and build on PR and merge to master\n+\n+### Changed\n+\n+- Improved instructions to start the program.\n+- improved user flow by showing categories when user wants to filter a spcific category\n+- Changed jsonFeed to not be static\n+\n+### Fixed\n+\n+- fix console stdout encoding\n+- fix issue with replace multiple main characters\n+- fix integer conversion for number of jokes\n+- fix code smell, 3 nested statements down to 2 levels.\n+- fix code smell, nested statements 6 levels down to 3 levels.\n+- fix code smell, massive switch statement replaced with builtin c#\n+- fix bug return only 1 joke\n+- fix bug with assigning joke category\n+- fix bug retrieving categories\n+\n+### Removed\n+\n+- removed json Feed\n+- removed Console Printer, for builtin Console.Writeline()."
  },
  {
    "sha": "a1e514efd0503d7a6e4245dc3714e559d1bc9ea9",
    "filename": "c-sharp/ConsoleApp1/ConsolePrinter.cs",
    "status": "removed",
    "additions": 0,
    "deletions": 27,
    "changes": 27,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/ac60fd62c140465ed5ebf0f41df92b0fe9299d21/c-sharp/ConsoleApp1/ConsolePrinter.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/ac60fd62c140465ed5ebf0f41df92b0fe9299d21/c-sharp/ConsoleApp1/ConsolePrinter.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/ConsolePrinter.cs?ref=ac60fd62c140465ed5ebf0f41df92b0fe9299d21",
    "patch": "@@ -1,27 +0,0 @@\n-﻿using System;\n-using System.Collections.Generic;\n-using System.Linq;\n-using System.Net.Http;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Newtonsoft.Json;\n-\n-namespace ConsoleApp1\n-{\n-    public class ConsolePrinter\n-    {\n-        public static object PrintValue;\n-\n-        public ConsolePrinter Value(string value)\n-        {\n-            PrintValue = value;\n-            return this;\n-        }\n-\n-        public override string ToString()\n-        {\n-            Console.WriteLine(PrintValue);\n-            return null;\n-        }\n-    }\n-}"
  },
  {
    "sha": "775c05bfa71c73ac282d339874d80290cd897757",
    "filename": "c-sharp/ConsoleApp1/JokeGenerator.csproj",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/JokeGenerator.csproj",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/JokeGenerator.csproj",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/JokeGenerator.csproj?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -1,8 +1,9 @@\n-<Project Sdk=\"Microsoft.NET.Sdk\">\n+﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n \n   <PropertyGroup>\n     <OutputType>Exe</OutputType>\n     <TargetFramework>netcoreapp2.1</TargetFramework>\n+    <Version>1.1.0</Version>\n   </PropertyGroup>\n \n   <ItemGroup>"
  },
  {
    "sha": "70d46cb4bcd1d6e6bbf58c5367593261c6d81ec3",
    "filename": "c-sharp/ConsoleApp1/JsonFeed.cs",
    "status": "removed",
    "additions": 0,
    "deletions": 69,
    "changes": 69,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/ac60fd62c140465ed5ebf0f41df92b0fe9299d21/c-sharp/ConsoleApp1/JsonFeed.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/ac60fd62c140465ed5ebf0f41df92b0fe9299d21/c-sharp/ConsoleApp1/JsonFeed.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/JsonFeed.cs?ref=ac60fd62c140465ed5ebf0f41df92b0fe9299d21",
    "patch": "@@ -1,69 +0,0 @@\n-﻿using System;\n-using System.Collections.Generic;\n-using System.Linq;\n-using System.Net.Http;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Newtonsoft.Json;\n-\n-namespace ConsoleApp1\n-{\n-    class JsonFeed\n-    {\n-        static string _url = \"\";\n-\n-        public JsonFeed() { }\n-        public JsonFeed(string endpoint, int results)\n-        {\n-            _url = endpoint;\n-        }\n-        \n-\t\tpublic static string[] GetRandomJokes(string firstname, string lastname, string category)\n-\t\t{\n-\t\t\tHttpClient client = new HttpClient();\n-\t\t\tclient.BaseAddress = new Uri(_url);\n-\t\t\tstring url = \"jokes/random\";\n-\t\t\tif (category != null)\n-\t\t\t{\n-\t\t\t\tif (url.Contains('?'))\n-\t\t\t\t\turl += \"&\";\n-\t\t\t\telse url += \"?\";\n-\t\t\t\turl += \"category=\";\n-\t\t\t\turl += category;\n-\t\t\t}\n-\n-            string joke = Task.FromResult(client.GetStringAsync(url).Result).Result;\n-\n-            if (firstname != null && lastname != null)\n-            {\n-                int index = joke.IndexOf(\"Chuck Norris\");\n-                string firstPart = joke.Substring(0, index);\n-                string secondPart = joke.Substring(0 + index + \"Chuck Norris\".Length, joke.Length - (index + \"Chuck Norris\".Length));\n-                joke = firstPart + \" \" + firstname + \" \" + lastname + secondPart;\n-            }\n-\n-            return new string[] { JsonConvert.DeserializeObject<dynamic>(joke).value };\n-        }\n-\n-        /// <summary>\n-        /// returns an object that contains name and surname\n-        /// </summary>\n-        /// <param name=\"client2\"></param>\n-        /// <returns></returns>\n-\t\tpublic static dynamic Getnames()\n-\t\t{\n-\t\t\tHttpClient client = new HttpClient();\n-\t\t\tclient.BaseAddress = new Uri(_url);\n-\t\t\tvar result = client.GetStringAsync(\"\").Result;\n-\t\t\treturn JsonConvert.DeserializeObject<dynamic>(result);\n-\t\t}\n-\n-\t\tpublic static string[] GetCategories()\n-\t\t{\n-\t\t\tHttpClient client = new HttpClient();\n-\t\t\tclient.BaseAddress = new Uri(_url);\n-\n-\t\t\treturn new string[] { Task.FromResult(client.GetStringAsync(\"categories\").Result).Result };\n-\t\t}\n-    }\n-}"
  },
  {
    "sha": "b88a983c9ff800254f54cf367d7285e1793c28bf",
    "filename": "c-sharp/ConsoleApp1/Program.cs",
    "status": "modified",
    "additions": 174,
    "deletions": 95,
    "changes": 269,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/Program.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/Program.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/Program.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -1,129 +1,208 @@\n ﻿using System;\n+using System.Net.Http;\n+using JokeGenerator.names;\n+using JokeGenerator.jokes;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Net.Http;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Newtonsoft.Json;\n \n namespace ConsoleApp1\n {\n+    /// <summary>\n+    /// This program print jokes.\n+    /// \n+    /// The following 200 lines of code are not unit tested and there is a good reason for it.\n+    /// The control flow bellow could be considered as presentation logic, and the logic depends on console input.\n+    /// The program has also mulitiple responsabilities that makes it hard to unit test.\n+    /// If we wanted to have more unit tests, we would have to create wrapper around the few methods that have logic.\n+    /// On the other end, ChuckNorrisJokeGen and NamesPrivservNameGen can be easely tested\n+    /// as they're responsibility is clearly define and their definition is abstracted in the corresponding interfaces\n+    /// \n+    /// </summary>\n     class Program\n     {\n-        static string[] results = new string[50];\n-        static char key;\n-        static Tuple<string, string> names;\n-        static ConsolePrinter printer = new ConsolePrinter();\n+\n+        private const string _jokeUrl = \"https://api.chucknorris.io\"; \n+        private const string _nameServiceUrl = \"https://www.names.privserv.com\";\n \n         static void Main(string[] args)\n         {\n-            printer.Value(\"Press ? to get instructions.\").ToString();\n-            if (Console.ReadLine() == \"?\")\n+\n+            Console.OutputEncoding = System.Text.Encoding.UTF8;\n+\n+            // Interface Setup, in real world application the INameGen and IJokeGen would be bootstraped at startup and injected.\n+            INameGen nameGenerator = new NamesPrivservNameGen(new HttpClient\n             {\n-                while (true)\n+                BaseAddress = new Uri(_nameServiceUrl)\n+            });\n+\n+            IJokeGen jokeGen = new ChuckNorrisJokeGen(new HttpClient{\n+                BaseAddress = new Uri(_jokeUrl)\n+            }); ;\n+\n+            PrintBanner();\n+\n+            while (true)\n+            {\n+\n+                string category = null;\n+                Tuple<string, string> randomName = null;\n+\n+                Console.WriteLine(\"Press any key to get random jokes, x to exit the program\");\n+                if (Console.ReadKey().KeyChar == 'x') break;\n+                Console.SetCursorPosition(0, Console.CursorTop);\n+\n+                Console.WriteLine(\"Do you want to use a random name? y/n\");\n+                if (Console.ReadKey().KeyChar == 'y')\n+                {\n+                    randomName = GetRandomName(nameGenerator);\n+                } else {\n+                    Console.WriteLine();\n+                }\n+\n+                Console.WriteLine(\"Do you want to specify a joke category? y/n\");\n+                if (Console.ReadKey().KeyChar == 'y')\n                 {\n-                    printer.Value(\"Press c to get categories\").ToString();\n-                    printer.Value(\"Press r to get random jokes\").ToString();\n-                    GetEnteredKey(Console.ReadKey());\n-                    if (key == 'c')\n-                    {\n-                        getCategories();\n-                        PrintResults();\n-                    }\n-                    if (key == 'r')\n-                    {\n-                        printer.Value(\"Want to use a random name? y/n\").ToString();\n-                        GetEnteredKey(Console.ReadKey());\n-                        if (key == 'y')\n-                            GetNames();\n-                        printer.Value(\"Want to specify a category? y/n\").ToString();\n-                        if (key == 'y')\n-                        {\n-                            printer.Value(\"How many jokes do you want? (1-9)\").ToString();\n-                            int n = Int32.Parse(Console.ReadLine());\n-                            printer.Value(\"Enter a category;\").ToString();\n-                            GetRandomJokes(Console.ReadLine(), n);\n-                            PrintResults();\n-                        }\n-                        else\n-                        {\n-                            printer.Value(\"How many jokes do you want? (1-9)\").ToString();\n-                            int n = Int32.Parse(Console.ReadLine());\n-                            GetRandomJokes(null, n);\n-                            PrintResults();\n-                        }\n-                    }\n-                    names = null;\n+                    category = GetCategories(jokeGen);\n+                } else {\n+                    Console.WriteLine();\n                 }\n+\n+                GetRandomJokes(jokeGen, category, randomName);\n+\n             }\n \n-        }\n+            Console.WriteLine(\"\\nThank you for laughing with GeoJokes, we'd love to hear your feedback at https://github.com/Geotab/geotab-development-assessment/issues\");\n \n-        private static void PrintResults()\n-        {\n-            printer.Value(\"[\" + string.Join(\",\", results) + \"]\").ToString();\n         }\n \n-        private static void GetEnteredKey(ConsoleKeyInfo consoleKeyInfo)\n+        // this methods accept an INameGen as a parameter, this is an anti pattern that DI would prevent.\n+        // consider this method as a 0 parameter method\n+        private static Tuple<string, string> GetRandomName(INameGen nameGen)\n         {\n-            switch (consoleKeyInfo.Key)\n+\n+            Console.WriteLine(\"\\nLoading random name...\");\n+            var result = nameGen.GetRandomNameAsync().Result;\n+            if (result == null)\n             {\n-                case ConsoleKey.C:\n-                    key = 'c';\n-                    break;\n-                case ConsoleKey.D0:\n-                    key = '0';\n-                    break;\n-                case ConsoleKey.D1:\n-                    key = '1';\n-                    break;\n-                case ConsoleKey.D3:\n-                    key = '3';\n-                    break;\n-                case ConsoleKey.D4:\n-                    key = '4';\n-                    break;\n-                case ConsoleKey.D5:\n-                    key = '5';\n-                    break;\n-                case ConsoleKey.D6:\n-                    key = '6';\n-                    break;\n-                case ConsoleKey.D7:\n-                    key = '7';\n-                    break;\n-                case ConsoleKey.D8:\n-                    key = '8';\n-                    break;\n-                case ConsoleKey.D9:\n-                    key = '9';\n-                    break;\n-                case ConsoleKey.R:\n-                    key = 'r';\n-                    break;\n-                case ConsoleKey.Y:\n-                    key = 'y';\n-                    break;\n+                Console.WriteLine($\"{nameof(nameGen)} did not return any values, the service is downgraded, but you might still be able to generate jokes with the default name.\");\n+            } else\n+            {\n+                Console.WriteLine($\"{result.Item1} {result.Item2} will now be used as the main character of the jokes.\");\n             }\n+\n+           \n+\n+            return result;\n+\n         }\n \n-        private static void GetRandomJokes(string category, int number)\n+        // this methods accept an INameGen as a parameter, this is an anti pattern that DI would prevent.\n+        // consider this method as a 0 parameter method\n+        private static string GetCategories(IJokeGen jokeGen)\n         {\n-            new JsonFeed(\"https://api.chucknorris.io\", number);\n-            results = JsonFeed.GetRandomJokes(names?.Item1, names?.Item2, category);\n+            Console.WriteLine(\"\\nLoading jokes categories...\");\n+            var categories = jokeGen.GetCategoriesAsync().Result;\n+            if (!categories.Any())\n+            {\n+                Console.WriteLine($\"{nameof(IJokeGen)} did not return any values, the service is downgraded, but you might still be able to generate jokes.\");\n+                return null;\n+            }\n+            else\n+            {\n+                Console.WriteLine($\"{string.Join(\", \", categories)}\");\n+            }\n+\n+            Console.WriteLine(\"Enter a category name, then press Enter\");\n+            var result = Console.ReadLine().ToLower();\n+\n+            while (!categories.Any(x => x.Equals(result, StringComparison.OrdinalIgnoreCase)))\n+            {\n+                Console.WriteLine($\"{result} does not belong to the list of categories available. please enter a value in the following selection:\");\n+                Console.WriteLine($\"{string.Join(\", \", categories)}\");\n+                result = Console.ReadLine().ToLower();\n+            }\n+\n+            return result;\n+\n         }\n \n-        private static void getCategories()\n+        // this methods accept an INameGen as a parameter, this is an anti pattern that DI would prevent.\n+        // consider this method as a 2 parameter method\n+        private static void GetRandomJokes(IJokeGen jokeGen, string category, Tuple<string, string> names)\n         {\n-            new JsonFeed(\"https://api.chucknorris.io\", 0);\n-            results = JsonFeed.GetCategories();\n+\n+            int count = 0;\n+            bool isValid = false;\n+            while (!isValid)\n+            {\n+                Console.WriteLine(\"How many jokes do you want? (1-9), then press Enter\");\n+                string value = Console.ReadLine();\n+                if (int.TryParse(value, out count) && count > 0 && count < 10)\n+                {\n+                    isValid = true;\n+                }\n+                else\n+                {\n+                    Console.WriteLine($\"{value} is invalid, it should be a number between 1 and 9.\");\n+                }\n+            }\n+\n+            int maxRetry = 15;\n+            int attempt = 0;\n+\n+            HashSet<string> displayedJokes = new HashSet<string>();\n+\n+            for (int i = 0; i < count; i++)\n+            {\n+                var joke = jokeGen.GetRandomJokeAsync(names?.Item1, names?.Item2, category).Result;\n+\n+                if(string.IsNullOrWhiteSpace(joke))\n+                {\n+                    Console.WriteLine(\"Oh no, Oh no, Oh no no no no no! The JokeGenerator is broken!\");\n+                    return;\n+                }\n+\n+                if(displayedJokes.Contains(joke))\n+                {\n+                    i--;\n+                    attempt++;\n+                }\n+                else\n+                {\n+                    Console.WriteLine(i + 1 + \": \" + joke);\n+                    displayedJokes.Add(joke);\n+                }\n+\n+                if(attempt >= maxRetry)\n+                {\n+                    Console.WriteLine($\"GeoJokes AI was not able to find {count} jokes{(category == null ? \".\" : $\" in {category} category\")}, please contribute to our source code to build a better GeoJokes\");\n+                    break;\n+                }\n+            }\n+\n         }\n \n-        private static void GetNames()\n+        private static void PrintBanner()\n         {\n-            new JsonFeed(\"https://www.names.privserv.com/api/\", 0);\n-            dynamic result = JsonFeed.Getnames();\n-            names = Tuple.Create(result.name.ToString(), result.surname.ToString());\n+\n+            var arr = new[]\n+            {\n+                      @\"    /$$$$$$                         /$$$$$           /$$                            \",\n+                      @\"   /$$__  $$                       |__  $$          | $$                            \",\n+                      @\"  | $$  \\__/  /$$$$$$   /$$$$$$       | $$  /$$$$$$ | $$   /$$  /$$$$$$   /$$$$$$$  \",\n+                      @\"  | $$ /$$$$ /$$__  $$ /$$__  $$      | $$ /$$__  $$| $$  /$$/ /$$__  $$ /$$_____/  \",\n+                      @\"  | $$|_  $$| $$$$$$$$| $$  \\ $$ /$$  | $$| $$  \\ $$| $$$$$$/ | $$$$$$$$|  $$$$$$   \",\n+                      @\"  | $$  \\ $$| $$_____/| $$  | $$| $$  | $$| $$  | $$| $$_  $$ | $$_____/ \\____  $$  \",\n+                      @\"  |  $$$$$$/|  $$$$$$$|  $$$$$$/|  $$$$$$/|  $$$$$$/| $$ \\  $$|  $$$$$$$ /$$$$$$$/  \",\n+                      @\"   \\______/  \\_______/ \\______/  \\______/  \\______/ |__/  \\__/ \\_______/|_______/   \"\n+            };\n+\n+            Console.WriteLine(\"\\n\");\n+            foreach (string line in arr)\n+                Console.WriteLine(line);\n+            Console.WriteLine(\"\\n\");\n+\n         }\n+\n     }\n }"
  },
  {
    "sha": "69c637460233fed6efd959953825273cc1ca2984",
    "filename": "c-sharp/ConsoleApp1/jokes/ChuckNorrisJokeGen.cs",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/jokes/ChuckNorrisJokeGen.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/jokes/ChuckNorrisJokeGen.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/jokes/ChuckNorrisJokeGen.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,105 @@\n+﻿using Microsoft.CSharp.RuntimeBinder;\n+using Newtonsoft.Json;\n+using System;\n+using System.Collections.Generic;\n+using System.Net.Http;\n+using System.Threading.Tasks;\n+\n+namespace JokeGenerator.jokes\n+{\n+    /// <summary>\n+    /// Chuck Norris IJokeGen implemented using https://api.chucknorris.io api.\n+    /// </summary>\n+    public class ChuckNorrisJokeGen : IJokeGen\n+    {\n+\n+        \n+        private const string _chuck = \"chuck\";\n+        private const string _norris = \"norris\";\n+\n+        private readonly HttpClient _httpClient;\n+\n+        public ChuckNorrisJokeGen(HttpClient httpClient)\n+        {\n+            _httpClient = httpClient;\n+        }\n+\n+        /// <summary>\n+        /// Returns available categories, see https://api.chucknorris.io/jokes/categories\n+        /// </summary>\n+        /// <returns>A List of string</returns>\n+        public async Task<IEnumerable<string>> GetCategoriesAsync()\n+        {\n+\n+            List<string> categories = new List<string>();\n+\n+            try\n+            {\n+                var result = await _httpClient.GetStringAsync(\"/jokes/categories\");\n+                categories.AddRange(JsonConvert.DeserializeObject<List<string>>(result));\n+            } catch (HttpRequestException ex)\n+            {\n+                Console.WriteLine($\"Error fetching categories from {_httpClient.BaseAddress}: {ex.Message}.\");\n+            } catch (JsonReaderException)\n+            {\n+                Console.WriteLine($\"Error converting response to collections of categories.\");\n+            }\n+\n+            return categories;\n+\n+        }\n+\n+        /// <summary>\n+        /// Returns a chuck norris joke, see https://api.chucknorris.io/jokes/random\n+        /// \n+        /// Usage notes:\n+        /// \n+        /// if you provide a firstname and a lastname then it will swap the chuck with this new hero\n+        /// if you provide a category it will filter jokes\n+        /// you can use the category api to retrieve the list of available api. invalid categories will mostly return a 404 and cause a null value.\n+        /// \n+        /// </summary>\n+        /// <param name=\"firstname\">A new hero first name</param>\n+        /// <param name=\"lastname\">A new hero last name</param>\n+        /// <param name=\"category\">A category filter</param>\n+        /// <returns></returns>\n+        public async Task<string> GetRandomJokeAsync(string firstname, string lastname, string category)\n+        {\n+\n+            string url = string.IsNullOrWhiteSpace(category) ? \"jokes/random\" : $\"jokes/random?category={category}\";\n+            try\n+            {\n+                string reponse = await _httpClient.GetStringAsync(url);\n+\n+                string joke = JsonConvert.DeserializeObject<dynamic>(reponse).value;\n+\n+                if (firstname != null && lastname != null)\n+                {\n+                    return swapHero(joke, firstname, lastname);\n+                }\n+\n+                return joke;\n+\n+            } catch (HttpRequestException ex)\n+            {\n+                Console.WriteLine($\"Error fetching jokes from {_httpClient.BaseAddress}: {ex.Message}.\");\n+                return null;\n+            }\n+            catch (JsonReaderException)\n+            {\n+                Console.WriteLine($\"Error converting response to joke.\");\n+                return null;\n+            } catch (RuntimeBinderException) {\n+                Console.WriteLine($\"Error converting response to joke.\");\n+                return null;\n+            }\n+}\n+\n+        private string swapHero(string joke, string firstname, string lastname)\n+        {\n+            return joke.Replace(_chuck, firstname, StringComparison.OrdinalIgnoreCase).Replace(_norris, lastname, StringComparison.OrdinalIgnoreCase);\n+        }\n+\n+\n+    }\n+}"
  },
  {
    "sha": "59fca24e1380bdb714837fac7ed5aacef0ae2f04",
    "filename": "c-sharp/ConsoleApp1/jokes/IJokeGen.cs",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/jokes/IJokeGen.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/jokes/IJokeGen.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/jokes/IJokeGen.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,30 @@\n+﻿using System;\n+using System.Collections.Generic;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace JokeGenerator.jokes\n+{\n+    /// <summary>\n+    /// The IJokeGen interface defines functionality that joke generators must implement\n+    /// </summary>\n+    public interface IJokeGen\n+    {\n+        /// <summary>\n+        /// Returns a list of available categories for the generator.\n+        /// When implementing this service it is recomended to return an empty list on known error and print a message.\n+        /// </summary>\n+        /// <returns>A List of string</returns>\n+        Task<IEnumerable<string>> GetCategoriesAsync();\n+\n+        /// <summary>\n+        /// Returns a random joke, if firstname and lastname is provided, the main character must be switched, an optional filter category can be provided\n+        /// </summary>\n+        /// <param name=\"firstname\">A character firstName</param>\n+        /// <param name=\"lastname\">A character lastName</param>\n+        /// <param name=\"category\">A category</param>\n+        /// <returns></returns>\n+        Task<string> GetRandomJokeAsync(string firstname, string lastname, string category);\n+\n+    }\n+}"
  },
  {
    "sha": "c1695f3e998dde2e57b5902fa6efc4674b9caa5e",
    "filename": "c-sharp/ConsoleApp1/names/INameGen.cs",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/names/INameGen.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/names/INameGen.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/names/INameGen.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,19 @@\n+﻿using System;\n+using System.Collections.Generic;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace JokeGenerator.names\n+{\n+    /// <summary>\n+    /// The IName generator interface defines functionality that name generator must implements to be compatible with geoJokes.\n+    /// </summary>\n+    public interface INameGen\n+    {\n+        /// <summary>\n+        /// Returns a tuple where item1 is the last name and item2 is the firstname\n+        /// </summary>\n+        /// <returns>A random name</returns>\n+        Task<Tuple<string, string>> GetRandomNameAsync();\n+    }\n+}"
  },
  {
    "sha": "27fb9d8638dbb3400cac48fa4b47b8521e56b3cc",
    "filename": "c-sharp/ConsoleApp1/names/NamesPrivservNameGen.cs",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/names/NamesPrivservNameGen.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/ConsoleApp1/names/NamesPrivservNameGen.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/ConsoleApp1/names/NamesPrivservNameGen.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,54 @@\n+﻿using Microsoft.CSharp.RuntimeBinder;\n+using Newtonsoft.Json;\n+using System;\n+using System.Collections.Generic;\n+using System.Net.Http;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace JokeGenerator.names\n+{\n+    /// <summary>\n+    /// NamesPrivserv Name Generator implementation. see https://www.names.privserv.com/ to know more about the service\n+    /// </summary>\n+    public class NamesPrivservNameGen : INameGen\n+    {\n+\n+        \n+        private readonly HttpClient _httpClient;\n+\n+\n+        public NamesPrivservNameGen(HttpClient httpClient)\n+        {\n+            this._httpClient = httpClient;\n+        }\n+        \n+        /// <summary>\n+        /// Uses names.priserv.com api to generate a random name.\n+        /// </summary>\n+        /// <returns>A random name</returns>\n+        public async Task<Tuple<string, string>> GetRandomNameAsync()\n+        {\n+\n+            try\n+            {\n+                string result = await _httpClient.GetStringAsync(\"api\");\n+                dynamic dynamicJson = JsonConvert.DeserializeObject<dynamic>(result);\n+                return  Tuple.Create(dynamicJson.name.ToString(), dynamicJson.surname.ToString());\n+            } catch (HttpRequestException ex)\n+            {\n+                Console.WriteLine($\"Error fetching categories from {_httpClient.BaseAddress}: {ex.Message}.\");\n+                return null;\n+            } catch (JsonReaderException)\n+            {\n+                Console.WriteLine($\"Error converting response to firstName,lastName tuple.\");\n+                return null;\n+            } catch (RuntimeBinderException)\n+            {\n+                Console.WriteLine($\"Error converting response to firstName,lastName tuple.\");\n+                return null;\n+            }\n+\n+        }\n+    }\n+}"
  },
  {
    "sha": "6edf4f2795054f467196d26a04316479dade2447",
    "filename": "c-sharp/JokeGenerator.sln",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGenerator.sln",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGenerator.sln",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/JokeGenerator.sln?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -1,10 +1,12 @@\n ﻿\n Microsoft Visual Studio Solution File, Format Version 12.00\n-# Visual Studio 15\n-VisualStudioVersion = 15.0.28010.2036\n+# Visual Studio Version 16\n+VisualStudioVersion = 16.0.31105.61\n MinimumVisualStudioVersion = 10.0.40219.1\n Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"JokeGenerator\", \"ConsoleApp1\\JokeGenerator.csproj\", \"{F31733F5-8322-4DDC-86C9-658FFDC656F8}\"\n EndProject\n+Project(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"JokeGeneratorTest\", \"JokeGeneratorTest\\JokeGeneratorTest.csproj\", \"{60668861-F66D-4A62-AC9E-A93FB6655E61}\"\n+EndProject\n Global\n \tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n \t\tDebug|Any CPU = Debug|Any CPU\n@@ -15,6 +17,10 @@ Global\n \t\t{F31733F5-8322-4DDC-86C9-658FFDC656F8}.Debug|Any CPU.Build.0 = Debug|Any CPU\n \t\t{F31733F5-8322-4DDC-86C9-658FFDC656F8}.Release|Any CPU.ActiveCfg = Release|Any CPU\n \t\t{F31733F5-8322-4DDC-86C9-658FFDC656F8}.Release|Any CPU.Build.0 = Release|Any CPU\n+\t\t{60668861-F66D-4A62-AC9E-A93FB6655E61}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+\t\t{60668861-F66D-4A62-AC9E-A93FB6655E61}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+\t\t{60668861-F66D-4A62-AC9E-A93FB6655E61}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+\t\t{60668861-F66D-4A62-AC9E-A93FB6655E61}.Release|Any CPU.Build.0 = Release|Any CPU\n \tEndGlobalSection\n \tGlobalSection(SolutionProperties) = preSolution\n \t\tHideSolutionNode = FALSE"
  },
  {
    "sha": "58748cf4faa2ff048eeeaa55f54c037c5a35c9fb",
    "filename": "c-sharp/JokeGeneratorTest/JokeGeneratorTest.csproj",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/JokeGeneratorTest.csproj",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/JokeGeneratorTest.csproj",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/JokeGeneratorTest/JokeGeneratorTest.csproj?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,23 @@\n+﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFramework>netcoreapp2.1</TargetFramework>\n+\n+    <IsPackable>false</IsPackable>\n+\n+    <Version>1.1.0</Version>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.7.1\" />\n+    <PackageReference Include=\"Moq\" Version=\"4.16.1\" />\n+    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"2.1.1\" />\n+    <PackageReference Include=\"MSTest.TestFramework\" Version=\"2.1.1\" />\n+    <PackageReference Include=\"coverlet.collector\" Version=\"1.3.0\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\ConsoleApp1\\JokeGenerator.csproj\" />\n+  </ItemGroup>\n+\n+</Project>"
  },
  {
    "sha": "96f090883972f8ffac3cb0fc7c68318f3c1e802c",
    "filename": "c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetCategoriesAsyncTest.cs",
    "status": "added",
    "additions": 161,
    "deletions": 0,
    "changes": 161,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetCategoriesAsyncTest.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetCategoriesAsyncTest.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetCategoriesAsyncTest.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,161 @@\n+﻿using JokeGenerator.jokes;\n+using Microsoft.VisualStudio.TestTools.UnitTesting;\n+using Moq;\n+using Moq.Protected;\n+using System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Net.Http;\n+using System.Text;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.Linq;\n+\n+namespace JokeGeneratorTest.jokes\n+{\n+    [TestClass]\n+    public class ChuckNorrisJokeGen_GetCategoriesAsyncTest\n+    {\n+\n+        private const string _url = \"http://example.com\";\n+\n+        private ChuckNorrisJokeGen sut;\n+\n+        [TestMethod]\n+        public async Task With200ShouldReturnAListOfCategories()\n+        {\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               // Setup the PROTECTED method to mock\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               // prepare the expected response of the mocked http call\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(@\"['a','b','c','d']\"),\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new ChuckNorrisJokeGen(httpClient);\n+\n+            IEnumerable<string> actual = await sut.GetCategoriesAsync();\n+\n+            Assert.AreEqual(4, actual.Count());\n+\n+            Assert.AreEqual(\"a\", actual.ElementAt(0));\n+            Assert.AreEqual(\"b\", actual.ElementAt(1));\n+            Assert.AreEqual(\"c\", actual.ElementAt(2));\n+            Assert.AreEqual(\"d\", actual.ElementAt(3));\n+\n+            var expectedUri = new Uri($\"{_url}/jokes/categories\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1), // we expected a single external request\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get  // we expected a GET request\n+                  && req.RequestUri == expectedUri // to this uri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+\n+        [TestMethod]\n+        public async Task With400ShouldReturnAnEmptyListOfCategories()\n+        {\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.BadRequest,\n+                   Content = new StringContent(@\"['a','b','c','d']\"),\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new ChuckNorrisJokeGen(httpClient);\n+\n+            IEnumerable<string> actual = await sut.GetCategoriesAsync();\n+\n+            Assert.AreEqual(0, actual.Count());\n+\n+            var expectedUri = new Uri($\"{_url}/jokes/categories\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1),\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get\n+                  && req.RequestUri == expectedUri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+        [TestMethod]\n+        public async Task WithInvalidResponseFromChuckShouldReturnAnEmptyListOfCategories()\n+        {\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               // Setup the PROTECTED method to mock\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               // prepare the expected response of the mocked http call\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(@\"{\\'response\\': \\'nope\\'}\"),\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new ChuckNorrisJokeGen(httpClient);\n+\n+            IEnumerable<string> actual = await sut.GetCategoriesAsync();\n+\n+            Assert.AreEqual(0, actual.Count());\n+\n+            var expectedUri = new Uri($\"{_url}/jokes/categories\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1), // we expected a single external request\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get  // we expected a GET request\n+                  && req.RequestUri == expectedUri // to this uri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "62ae08061249196aafe647470873f417cfe9c941",
    "filename": "c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetRandomJokeAsyncTest.cs",
    "status": "added",
    "additions": 164,
    "deletions": 0,
    "changes": 164,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetRandomJokeAsyncTest.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetRandomJokeAsyncTest.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/JokeGeneratorTest/jokes/ChuckNorrisJokeGen_GetRandomJokeAsyncTest.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,164 @@\n+﻿using JokeGenerator.jokes;\n+using Microsoft.VisualStudio.TestTools.UnitTesting;\n+using Moq;\n+using Moq.Protected;\n+using System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Net.Http;\n+using System.Text;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace JokeGeneratorTest.jokes\n+{\n+\n+\n+    [TestClass]\n+    public class ChuckNorrisJokeGen_GetRandomJokeAsyncTest\n+    {\n+\n+        private const string _url = \"http://example.com\";\n+\n+        private ChuckNorrisJokeGen sut;\n+\n+        [DataRow(\"{\\\"value\\\":\\\"Chuck Norris trims his fingernails with a chainsaw.\\\"}\", null, null, \"Chuck Norris trims his fingernails with a chainsaw.\")]\n+        [DataRow(\"{\\\"value\\\":\\\"Chuck Norris trims his fingernails with a chainsaw.\\\"}\", \"Bob\", \"Ross\", \"Bob Ross trims his fingernails with a chainsaw.\")]\n+        [DataRow(\"{\\\"value\\\":\\\"Chuck Norris trims his fingernails with a chainsaw.\\\"}\", \"Bob\", \"Ross\", \"Bob Ross trims his fingernails with a chainsaw.\")]\n+        [DataRow(\"{\\\"value\\\":\\\"Chuck Norris trims his fingernails with a chainsaw. says Chuck Norris\\\"}\", \"Bob\", \"Ross\", \"Bob Ross trims his fingernails with a chainsaw. says Bob Ross\")]\n+        [DataRow(\"{\\\"value\\\":\\\"Chuck Norris trims his fingernails with a chainsaw. says Chuck\\\"}\", \"Bob\", \"Ross\", \"Bob Ross trims his fingernails with a chainsaw. says Bob\")]\n+        [DataRow(\"{\\\"value\\\":\\\"CHUCK Norris trims his fingernails with a chainsaw. says Chuck\\\"}\", \"Bob\", \"Ross\", \"Bob Ross trims his fingernails with a chainsaw. says Bob\")]\n+        [DataRow(\"{\\\"value\\\":\\\"CHUCKchuckChUcK Norris trims his fingernails with a chainsaw. says Chuck\\\"}\", \"Bob\", \"Ross\", \"BobBobBob Ross trims his fingernails with a chainsaw. says Bob\")]\n+        [DataRow(\"{\\\"value\\\":\\\"NORRIS trims his fingernails with a chainsaw. says Chuck\\\"}\", \"Bob\", \"Ross\", \"Ross trims his fingernails with a chainsaw. says Bob\")]\n+        [DataRow(\"{\\\"value\\\":\\\"unknown trims his fingernails with a chainsaw.\\\"}\", \"Bob\", \"Ross\", \"unknown trims his fingernails with a chainsaw.\")]\n+        [DataTestMethod]\n+        public void testSwappNameJokeGenerator(string joke, string firstName, string lastName, string expected)\n+        {\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               // Setup the PROTECTED method to mock\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               // prepare the expected response of the mocked http call\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(joke)\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new ChuckNorrisJokeGen(httpClient);\n+\n+            var actual = sut.GetRandomJokeAsync(firstName, lastName, null).Result;\n+\n+            Assert.AreEqual(expected, actual);\n+\n+            var expectedUri = new Uri($\"{_url}/jokes/random\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1),\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get\n+                  && req.RequestUri == expectedUri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+        [TestMethod]\n+        public void withCategoryShouldReturnAJoke()\n+        {\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(\"{\\\"value\\\":\\\"Chuck Norris trims his fingernails with a chainsaw.\\\"}\")\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new ChuckNorrisJokeGen(httpClient);\n+\n+            var actual = sut.GetRandomJokeAsync(null, null, \"animal\").Result;\n+\n+            Assert.AreEqual(\"Chuck Norris trims his fingernails with a chainsaw.\", actual);\n+\n+            var expectedUri = new Uri($\"{_url}/jokes/random?category=animal\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1),\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get\n+                  && req.RequestUri == expectedUri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+\n+        [TestMethod]\n+        public void withInvalidJsonShouldReturnNull()\n+        {\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(\"{\\\"valuere\\\":\\\"Chuck Norris trims his fingernails with a chainsaw.\\\"}\")\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new ChuckNorrisJokeGen(httpClient);\n+\n+            var actual = sut.GetRandomJokeAsync(null, null, null).Result;\n+\n+            Assert.IsNull(actual);\n+\n+            var expectedUri = new Uri($\"{_url}/jokes/random\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1),\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get\n+                  && req.RequestUri == expectedUri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "f15006ca4384c29f4d885bbf79f8e5d8b89d57e6",
    "filename": "c-sharp/JokeGeneratorTest/names/NamesPrivservNameGenTest.cs",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/names/NamesPrivservNameGenTest.cs",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/JokeGeneratorTest/names/NamesPrivservNameGenTest.cs",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/JokeGeneratorTest/names/NamesPrivservNameGenTest.cs?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -0,0 +1,182 @@\n+using JokeGenerator.names;\n+using Microsoft.VisualStudio.TestTools.UnitTesting;\n+using Moq;\n+using Moq.Protected;\n+using System;\n+using System.Net;\n+using System.Net.Http;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace JokeGeneratorTest\n+{\n+    [TestClass]\n+    public class NamesPrivservNameGenTest\n+    {\n+        private const string _url = \"http://example.com\";\n+\n+        private NamesPrivservNameGen sut;\n+\n+        \n+        [TestMethod]\n+        public async Task With200ResponseShouldReturnFirstNameLastName()\n+        {\n+\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               // Setup the PROTECTED method to mock\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               // prepare the expected response of the mocked http call\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(\"{\\\"name\\\":\\\"Scott\\\",\\\"surname\\\":\\\"Bon\\\",\\\"gender\\\":\\\"male\\\",\\\"region\\\":\\\"Romania\\\"}\"),\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new NamesPrivservNameGen(httpClient);\n+\n+            var result = await sut.GetRandomNameAsync();\n+\n+            Assert.AreEqual(\"Scott\", result.Item1);\n+            Assert.AreEqual(\"Bon\", result.Item2);\n+\n+        }\n+\n+        [TestMethod]\n+        public async Task With400ResponseShouldReturnNull()\n+        {\n+\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               // Setup the PROTECTED method to mock\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               // prepare the expected response of the mocked http call\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.BadRequest\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new NamesPrivservNameGen(httpClient);\n+\n+            var result = await sut.GetRandomNameAsync();\n+\n+            var expectedUri = new Uri($\"{_url}/api\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1), // we expected a single external request\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get  // we expected a GET request\n+                  && req.RequestUri == expectedUri // to this uri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+            Assert.IsNull(result);\n+        }\n+\n+        [TestMethod]\n+        public async Task With200ResponseAndInvalidJsonShouldReturnNull()\n+        {\n+\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+              \n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(\"test\"),\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new NamesPrivservNameGen(httpClient);\n+\n+            var result = await sut.GetRandomNameAsync();\n+\n+            Assert.IsNull(result);\n+\n+            var expectedUri = new Uri($\"{_url}/api\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1),\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get\n+                  && req.RequestUri == expectedUri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+        [TestMethod]\n+        public async Task With200ResponseAndNoNamInJsonShouldReturnNull()\n+        {\n+\n+            var handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);\n+            handlerMock\n+               .Protected()\n+               .Setup<Task<HttpResponseMessage>>(\n+                  \"SendAsync\",\n+                  ItExpr.IsAny<HttpRequestMessage>(),\n+                  ItExpr.IsAny<CancellationToken>()\n+               )\n+               .ReturnsAsync(new HttpResponseMessage()\n+               {\n+                   StatusCode = HttpStatusCode.OK,\n+                   Content = new StringContent(@\"{'gender':'male'}\"),\n+               })\n+               .Verifiable();\n+\n+            var httpClient = new HttpClient(handlerMock.Object);\n+            httpClient.BaseAddress = new Uri(_url);\n+\n+            sut = new NamesPrivservNameGen(httpClient);\n+\n+            var result = await sut.GetRandomNameAsync();\n+\n+            Assert.IsNull(result);\n+\n+            var expectedUri = new Uri($\"{_url}/api\");\n+\n+            handlerMock.Protected().Verify(\n+               \"SendAsync\",\n+               Times.Exactly(1),\n+               ItExpr.Is<HttpRequestMessage>(req =>\n+                  req.Method == HttpMethod.Get\n+                  && req.RequestUri == expectedUri\n+               ),\n+               ItExpr.IsAny<CancellationToken>()\n+            );\n+\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "308d2f041e226f0b10f7351f60ea05812375c6e7",
    "filename": "c-sharp/README.md",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/Geotab/geotab-development-assessment/blob/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/README.md",
    "raw_url": "https://github.com/Geotab/geotab-development-assessment/raw/035f973217fdf89039590982dc0c51a8220a34f9/c-sharp/README.md",
    "contents_url": "https://api.github.com/repos/Geotab/geotab-development-assessment/contents/c-sharp/README.md?ref=035f973217fdf89039590982dc0c51a8220a34f9",
    "patch": "@@ -1,5 +1,14 @@\n-# README #\n+# GeoJokes\n \n+A Joke Generator\n+## Run\n+\n+```\n+cd c-sharp/ConsoleApp1\n+dotnet run\n+```\n+\n+! Enjoy, the app should be self explainatory!\n \n ### Task 1 - Fix some ugly code ###\n \n@@ -13,6 +22,8 @@ Your task as a professional developer is to clean up this app and make it someth\n \n Write a document explaining some of the improvements you made to the code, and why you did so.\n \n+Everything is included in the PR Description, ChangeLog and Commit history.\n+\n ### What do I need? ###\n \n * [.NET Core](https://www.microsoft.com/net/core) - any platform"
  }
]
