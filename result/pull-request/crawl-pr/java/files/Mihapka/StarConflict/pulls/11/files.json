[
  {
    "sha": "4da2ca22cca8a144094879a44019fc60a979c498",
    "filename": "android/assets/sounds/PPK _resurrection.mp3",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/PPK%20_resurrection.mp3",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/PPK%20_resurrection.mp3",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/android/assets/sounds/PPK%20_resurrection.mp3?ref=122ff8538138983eafa5e3b38d4adf90953f3021"
  },
  {
    "sha": "4b1d09e073929113f4d98cf51c4edad78692eb4e",
    "filename": "android/assets/sounds/bullet.wav",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/bullet.wav",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/bullet.wav",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/android/assets/sounds/bullet.wav?ref=122ff8538138983eafa5e3b38d4adf90953f3021"
  },
  {
    "sha": "5a762b769313f0aba6c93d191510359e9ca85166",
    "filename": "android/assets/sounds/explosion.wav",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/explosion.wav",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/explosion.wav",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/android/assets/sounds/explosion.wav?ref=122ff8538138983eafa5e3b38d4adf90953f3021"
  },
  {
    "sha": "b5fb3e9f59b7fde5512d39ba46c93cf396b76d32",
    "filename": "android/assets/sounds/laser.wav",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/laser.wav",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/laser.wav",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/android/assets/sounds/laser.wav?ref=122ff8538138983eafa5e3b38d4adf90953f3021"
  },
  {
    "sha": "a48353e65bd91817a077bcfba352fbc9fae04a1c",
    "filename": "android/assets/sounds/music.mp3",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/music.mp3",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/android/assets/sounds/music.mp3",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/android/assets/sounds/music.mp3?ref=122ff8538138983eafa5e3b38d4adf90953f3021"
  },
  {
    "sha": "fd17c672cb9251c481715286f8fd1499dd276514",
    "filename": "core/src/ru/geekbrains/Screen/GameScreene.java",
    "status": "modified",
    "additions": 118,
    "deletions": 46,
    "changes": 164,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/Screen/GameScreene.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/Screen/GameScreene.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/Screen/GameScreene.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -1,36 +1,47 @@\n package ru.geekbrains.Screen;\n \n+import com.badlogic.gdx.Game;\n import com.badlogic.gdx.Gdx;\n import com.badlogic.gdx.audio.Music;\n+import com.badlogic.gdx.audio.Sound;\n import com.badlogic.gdx.graphics.GL20;\n import com.badlogic.gdx.graphics.Texture;\n import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n import com.badlogic.gdx.math.Vector2;\n import ru.geekbrains.base.BaseScreen;\n import ru.geekbrains.math.Rect;\n-import ru.geekbrains.pull.BulletPull;\n-import ru.geekbrains.sprite.Backgraund;\n-import ru.geekbrains.sprite.EnemiShip;\n-import ru.geekbrains.sprite.MainShip;\n-import ru.geekbrains.sprite.Star;\n+import ru.geekbrains.pull.BulletPool;\n+import ru.geekbrains.pull.EnemyPool;\n+import ru.geekbrains.sprite.*;\n+import ru.geekbrains.utils.EnemyEmitter;\n+import ru.geekbrains.pull.ExplosionPool;\n+\n+import java.util.List;\n \n public class GameScreene extends BaseScreen {\n \n     private static final int STAR_COUNT = 64;\n \n     private Music music;\n+    private Sound enemyBulletSound;\n+    private Sound exploSound;\n \n     private Texture imgBackgraund;\n     private TextureAtlas atlas;\n \n     private Backgraund backgraund;\n     private MainShip mainShip;\n-    private EnemiShip enemiShip;\n-\n-    private BulletPull bulletPull;\n+    private EnemyPool enemyPool;\n+    private EnemyEmitter enemyEmitter;\n \n+    private BulletPool bulletPool;\n+    private ExplosionPool explosionPool;\n+    private GameOver gameOver;\n+    private ButtonNewGame newGame;\n     private Star[] stars;\n \n+    boolean gameOverState = false;\n+\n     @Override\n     public void show() {\n \n@@ -42,38 +53,29 @@ public void show() {\n         for (int i = 0; i < STAR_COUNT; i++) {\n             stars[i] = new Star(atlas);\n         }\n-        bulletPull = new BulletPull();\n-        mainShip = new MainShip(atlas, bulletPull);\n-        enemiShip = new EnemiShip(atlas,bulletPull);\n+        bulletPool = new BulletPool();\n+        exploSound = Gdx.audio.newSound(Gdx.files.internal(\"sounds/explosion.wav\"));\n+        explosionPool = new ExplosionPool(atlas, exploSound);\n+        enemyPool = new EnemyPool(bulletPool, worldBounds, enemyBulletSound, explosionPool);\n+        enemyEmitter = new EnemyEmitter(atlas, worldBounds, enemyPool);\n+        mainShip = new MainShip(atlas, bulletPool, explosionPool);\n         setMusic();\n-//        region = new TextureRegion(new TextureAtlas(Gdx.files.internal(\"Texture/atlas/mainAtlas.tpack\")).\n-//                findRegion(\"main_ship\"),\n-//                0, 0, (new TextureAtlas(Gdx.files.internal(\"Texture/atlas/mainAtlas.tpack\")).\n-//                findRegion(\"main_ship\").getRegionWidth() / 2)\n-//                , new TextureAtlas(Gdx.files.internal(\"Texture/atlas/mainAtlas.tpack\")).\n-//                findRegion(\"main_ship\").getRegionHeight());\n-\n-    }\n-\n-    private void setMusic() {\n-        music = Gdx.audio.newMusic(Gdx.files.internal(\"sounds/PPK _resurrection.mp3\"));\n-        music.setLooping(true);\n-        music.setVolume(0.02f);\n-        music.play();\n+        gameOver = new GameOver(atlas);\n+        gameOverState = false;\n+        newGame = new ButtonNewGame(atlas);\n     }\n \n     private void update(float delta) {\n         for (Star star : stars) {\n             star.update(delta);\n         }\n-        mainShip.update(delta);\n-        enemiShip.update(delta);\n-        bulletPull.updateActiveSprites(delta);\n-    }\n-\n-    private void freeAllDestroed() {\n-\n-        bulletPull.freeAllDestroyedActiveSprites();\n+        if (!gameOverState) {\n+            mainShip.update(delta);\n+            enemyPool.updateActiveSprites(delta);\n+            enemyEmitter.generate(delta);\n+            bulletPool.updateActiveSprites(delta);\n+        }\n+        explosionPool.updateActiveSprites(delta);\n     }\n \n     private void draw() {\n@@ -85,19 +87,18 @@ private void draw() {\n         for (Star star : stars) {\n             star.draw(batch);\n         }\n-        mainShip.draw(batch);\n-        enemiShip.draw(batch);\n-        bulletPull.drawActiveSprites(batch);\n+        if (!gameOverState) {\n+            mainShip.draw(batch);\n+            enemyPool.drawActiveSprites(batch);\n+            bulletPool.drawActiveSprites(batch);\n+        } else {\n+            gameOver.draw(batch);\n+            newGame.draw(batch);\n+        }\n+        explosionPool.drawActiveSprites(batch);\n         batch.end();\n     }\n \n-    @Override\n-    public void render(float delta) {\n-        update(delta);\n-        freeAllDestroed();\n-        draw();\n-    }\n-\n     @Override\n     public void resize(Rect worldBounds) {\n \n@@ -106,18 +107,87 @@ public void resize(Rect worldBounds) {\n             star.resize(worldBounds);\n         }\n         mainShip.resize(worldBounds);\n-        enemiShip.resize(worldBounds);\n+        gameOver.resize(worldBounds);\n+        newGame.resize(worldBounds);\n+    }\n+\n+    private void setMusic() {\n+        music = Gdx.audio.newMusic(Gdx.files.internal(\"sounds/PPK _resurrection.mp3\"));\n+        music.setLooping(true);\n+        music.setVolume(0.02f);\n+        music.play();\n+    }\n+\n+    private void checkCollisions() {\n+        if (!gameOverState) {\n+            /*список активных вражеских кораблей*/\n+            List<EnemyShip> enemyShipList = enemyPool.getActiveObjects();\n+            List<Bullet> bulletList = bulletPool.getActiveObjects();\n+            for (EnemyShip enemyShip : enemyShipList) {\n+                if (enemyShip.isDestroyed()) {\n+                    continue;\n+                }\n+                float minDist = enemyShip.getWidth() + (mainShip.getWidth() * 0.9f);\n+                if (enemyShip.pos.dst(mainShip.pos) < minDist) {\n+                    enemyShip.destroy();\n+                    mainShip.damage(enemyShip.getDamage());\n+                }\n+            }\n+            for (Bullet bullet : bulletList) {\n+                if (bullet.isDestroyed()) {\n+                    continue;\n+                }\n+                if (bullet.getOwner() != mainShip) {\n+                    if (mainShip.isBulletCollision(bullet)) {\n+                        mainShip.damage(bullet.getDamage());\n+                        bullet.destroy();\n+                    }\n+                    continue;\n+                }\n+                for (EnemyShip enemyShip : enemyShipList) {\n+                    if (enemyShip.isDestroyed()) {\n+                        continue;\n+                    }\n+                    if (enemyShip.isBulletCollision(bullet)) {\n+                        enemyShip.damage(bullet.getDamage());\n+                        bullet.destroy();\n+                    }\n+                }\n+            }\n+            if (mainShip.isDestroyed()) {\n+                gameOverState = true;\n+                music.stop();\n+            }\n+        }\n+    }\n+\n+    private void freeAllDestroed() {\n+\n+        bulletPool.freeAllDestroyedActiveSprites();\n+        explosionPool.freeAllDestroyedActiveSprites();\n+        enemyPool.freeAllDestroyedActiveSprites();\n+    }\n+\n+    @Override\n+    public void render(float delta) {\n+        update(delta);\n+        checkCollisions();\n+        freeAllDestroed();\n+        draw();\n     }\n \n     @Override\n     public void dispose() {\n \n         atlas.dispose();\n         imgBackgraund.dispose();\n-        bulletPull.dispose();\n+        bulletPool.dispose();\n+        explosionPool.dispose();\n         music.dispose();\n+        enemyBulletSound.dispose();\n+        exploSound.dispose();\n         mainShip.dispose();\n-        enemiShip.dispose();\n+        enemyPool.dispose();\n         super.dispose();\n     }\n \n@@ -139,13 +209,15 @@ public boolean keyUp(int keycode) {\n     public boolean touchDown(Vector2 tourch, int pointer, int button) {\n \n         mainShip.touchDown(tourch, pointer, button);\n+        newGame.touchDown(tourch, pointer, button);\n         return false;\n     }\n \n     @Override\n     public boolean touchUp(Vector2 tourch, int pointer, int button) {\n \n         mainShip.touchUp(tourch, pointer, button);\n+        newGame.touchUp(tourch, pointer, button);\n         return false;\n     }\n }"
  },
  {
    "sha": "468856d1a36a69172b02a0924daefa78d88ff9aa",
    "filename": "core/src/ru/geekbrains/base/BaseButton.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/BaseButton.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/BaseButton.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/base/BaseButton.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -14,7 +14,6 @@ public BaseButton(TextureRegion region) {\n         super(region);\n     }\n \n-\n     @Override\n     public boolean touchDown(Vector2 tourch, int pointer, int button) {\n "
  },
  {
    "sha": "86864ef77f1d514ce54d3492d5048942424bec66",
    "filename": "core/src/ru/geekbrains/base/BaseScreen.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/BaseScreen.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/BaseScreen.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/base/BaseScreen.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -18,7 +18,7 @@\n \n     private Rect screenBounds;\n     private Rect glBounds;\n-    private Rect worldBounds;\n+    protected Rect worldBounds;\n \n     private Matrix4 worldToGl;\n     private Matrix3 screenToWorld;"
  },
  {
    "sha": "4f490dbaa5a45a23436a6e52d042a942df94e19f",
    "filename": "core/src/ru/geekbrains/base/BaseShip.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/BaseShip.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/BaseShip.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/base/BaseShip.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,99 @@\n+package ru.geekbrains.base;\n+\n+import com.badlogic.gdx.audio.Sound;\n+import com.badlogic.gdx.graphics.g2d.TextureRegion;\n+import com.badlogic.gdx.math.Vector2;\n+import ru.geekbrains.math.Rect;\n+import ru.geekbrains.pull.BulletPool;\n+import ru.geekbrains.pull.ExplosionPool;\n+import ru.geekbrains.sprite.Bullet;\n+import ru.geekbrains.sprite.Explosion;\n+import ru.geekbrains.pull.ExplosionPool;\n+\n+public class BaseShip extends Sprite {\n+\n+    private static final float DAMAGE_ANIMATE_INTERVAL = 0.1f;\n+\n+    protected Vector2 v0;\n+    protected Vector2 v;\n+\n+    protected Rect worldBounds;\n+    protected BulletPool bulletPool;\n+    protected ExplosionPool explosionPool;\n+    protected TextureRegion bulletRegion;\n+    protected Vector2 bulletV;\n+    protected Vector2 bulletPos;\n+\n+    protected boolean pressLeft;\n+    protected boolean pressRight;\n+    protected Sound sound;\n+    protected float bulletHeight;\n+    protected int damage;\n+\n+    protected float reloadInterval;\n+    protected float reloadTimer;\n+\n+    protected int hp;\n+\n+    private float damageAnimateTimer = DAMAGE_ANIMATE_INTERVAL;\n+\n+\n+    public BaseShip() {\n+\n+    }\n+\n+    public BaseShip(TextureRegion region, int rows, int cols, int frames) {\n+\n+        super(region, rows, cols, frames);\n+\n+    }\n+\n+    private void shoot() {\n+\n+        Bullet bullet = bulletPool.obtain();\n+        bullet.set(this, bulletRegion, bulletPos, bulletV, bulletHeight, worldBounds, 1);\n+        sound.play(0.04f);\n+    }\n+\n+    private void boom() {\n+\n+        Explosion explosion = explosionPool.obtain();\n+        explosion.set(getHeight(), pos);\n+    }\n+\n+    public void damage(int damage) {\n+        hp -= damage;\n+        if (hp <= 0) {\n+            hp = 0;\n+            destroy();\n+        }\n+        frame = 1;\n+        damageAnimateTimer = 0f;\n+    }\n+\n+    public int getDamage() {\n+        return damage;\n+    }\n+\n+    @Override\n+    public void update(float delta) {\n+        pos.mulAdd(v, delta);\n+        reloadTimer += delta;\n+        if (reloadTimer >= reloadInterval) {\n+            reloadTimer = 0f;\n+            shoot();\n+        }\n+\n+        damageAnimateTimer += delta;\n+        if (damageAnimateTimer >= DAMAGE_ANIMATE_INTERVAL) {\n+            frame = 0;\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+\n+        super.destroy();\n+        boom();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "092c727b2bfc169a6fb829386e067db1474f1ac1",
    "filename": "core/src/ru/geekbrains/base/Sprite.java",
    "status": "modified",
    "additions": 13,
    "deletions": 18,
    "changes": 31,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/Sprite.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/Sprite.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/base/Sprite.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -9,46 +9,47 @@\n public class Sprite extends Rect {\n \n     protected float angle;\n-    protected float scale =2f;\n+    protected float scale = 2f;\n     protected TextureRegion[] regions;\n     protected int frame;\n     private boolean isDestroyed;\n \n-    public Sprite(){}\n+    public Sprite() {\n+    }\n \n     public Sprite(TextureRegion region) {\n \n-        if (region==null){\n+        if (region == null) {\n             throw new RuntimeException(\"Region is NULL\");\n         }\n         regions = new TextureRegion[1];\n         regions[0] = region;\n     }\n \n-    public Sprite(TextureRegion region, int rows, int cols, int frame){\n+    public Sprite(TextureRegion region, int rows, int cols, int frame) {\n \n-        if (region==null){\n+        if (region == null) {\n             throw new RuntimeException(\"Region is NULL\");\n         }\n         regions = Regions.split(region, rows, cols, frame);\n \n     }\n \n-    public void setHightProportions(float height) {\n+    public void setHeightProportion(float height) {\n \n         setHeight(height);\n-        float aspect = regions[frame].getRegionWidth() / (float) regions[frame].getRegionHeight();\n+        float aspect = regions[frame].getRegionWidth() /(float) regions[frame].getRegionHeight();\n         setWidth(height * aspect);\n     }\n \n     public void draw(SpriteBatch batch) {\n \n-        batch.draw(regions[frame],\n+        batch.draw(\n+                regions[frame],\n                 getLeft(), getBottom(),\n                 halfWidth, halfHeight,\n                 getWidth(), getHeight(),\n-                scale, scale,\n-                angle);\n+                scale, scale, angle);\n     }\n \n     public void update(float delta) {\n@@ -60,17 +61,14 @@ public void resize(Rect worldBounds) {\n     }\n \n     public boolean touchUp(Vector2 tourch, int pointer, int button) {\n-        System.out.println(\"tourchUp tourchX = \" + tourch.x + \" tourchUp tourchy = \" + tourch.y);\n         return false;\n     }\n \n     public boolean touchDown(Vector2 tourch, int pointer, int button) {\n-        System.out.println(\"tourchUp tourchX = \" + tourch.x + \" tourchUp tourchy = \" + tourch.y);\n         return false;\n     }\n \n     public boolean touchDragged(Vector2 tourch, int pointer, int button) {\n-        System.out.println(\"tourchUp tourchX = \" + tourch.x + \" tourchUp tourchy = \" + tourch.y);\n         return false;\n     }\n \n@@ -90,18 +88,15 @@ public void setScale(float scale) {\n         this.scale = scale;\n     }\n \n-    public void destroy(){\n-\n+    public void destroy() {\n         isDestroyed = true;\n     }\n \n-    public void flushDestroy(){\n-\n+    public void flushDestroy() {\n         isDestroyed = false;\n     }\n \n     public boolean isDestroyed() {\n-\n         return isDestroyed;\n     }\n }"
  },
  {
    "sha": "103357d1e90210661ba2f78d8bdae29ed1287b26",
    "filename": "core/src/ru/geekbrains/base/SpritesPool.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/SpritesPool.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/base/SpritesPool.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/base/SpritesPool.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,84 @@\n+package ru.geekbrains.base;\n+\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public abstract class SpritesPool<T extends Sprite> {\n+\n+    protected final List<T> activeObjects = new ArrayList<T>();\n+\n+    protected final List<T> freeObjects = new ArrayList<T>();\n+\n+    protected abstract T newObject();\n+\n+    /*создаем объект*/\n+    public  T obtain() {\n+        T object;\n+        if (freeObjects.isEmpty()) {\n+            object = newObject();\n+        } else {\n+            /*добавляем объект из массива запасных объектов в массив активных\n+             * и одновременно удаляем его из запасных*/\n+            object = freeObjects.remove(freeObjects.size() - 1);\n+        }\n+        activeObjects.add(object);\n+        System.out.println(getClass().getName()\n+                + \"activ/free: \" + activeObjects.size()\n+                + \"/\" + freeObjects.size());\n+        return object;\n+    }\n+\n+    public void updateActiveSprites(float dalta) {\n+\n+        for (T item : activeObjects) {\n+            if (!item.isDestroyed()) {\n+                item.update(dalta);\n+            }\n+        }\n+    }\n+\n+    public void drawActiveSprites(SpriteBatch batch) {\n+\n+        for (T item : activeObjects) {\n+            if (!item.isDestroyed()) {\n+                item.draw(batch);\n+            }\n+        }\n+    }\n+\n+    public void freeAllDestroyedActiveSprites() {\n+\n+        for (int i = 0; i < activeObjects.size(); i++) {\n+            T sprite = activeObjects.get(i);\n+            if (sprite.isDestroyed()) {\n+                free(sprite);\n+                i--;\n+                sprite.flushDestroy();\n+            }\n+\n+        }\n+    }\n+\n+    private void free(T object) {\n+\n+        if (activeObjects.remove(object)) {\n+            freeObjects.add(object);\n+            System.out.println(getClass().getName()\n+                    + \"activ/free: \" + activeObjects.size()\n+                    + \"/\" + freeObjects.size());\n+        }\n+    }\n+\n+    public List<T> getActiveObjects() {\n+        return activeObjects;\n+    }\n+\n+    public void dispose() {\n+\n+        activeObjects.clear();\n+        freeObjects.clear();\n+    }\n+}\n+"
  },
  {
    "sha": "2e813df8418493e3e7ff939c43c0705f8122d030",
    "filename": "core/src/ru/geekbrains/pull/BulletPool.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/pull/BulletPool.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/pull/BulletPool.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/pull/BulletPool.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.geekbrains.pull;\n+\n+import ru.geekbrains.base.SpritesPool;\n+import ru.geekbrains.sprite.Bullet;\n+\n+public class BulletPool extends SpritesPool<Bullet> {\n+\n+    @Override\n+    protected Bullet newObject() {\n+        return new Bullet();\n+    }\n+}"
  },
  {
    "sha": "282e9bee3cd50fe906066d42e7d7f85e24c2bcb9",
    "filename": "core/src/ru/geekbrains/pull/EnemyPool.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/pull/EnemyPool.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/pull/EnemyPool.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/pull/EnemyPool.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,28 @@\n+package ru.geekbrains.pull;\n+\n+import com.badlogic.gdx.audio.Sound;\n+import ru.geekbrains.base.SpritesPool;\n+import ru.geekbrains.math.Rect;\n+import ru.geekbrains.sprite.EnemyShip;\n+import ru.geekbrains.pull.ExplosionPool;\n+\n+public class EnemyPool extends SpritesPool<EnemyShip> {\n+\n+    private BulletPool bulletPool;\n+    private  ExplosionPool explosionPool;\n+    private Rect worldBounds;\n+    private Sound bulletsound;\n+\n+    public EnemyPool(BulletPool bulletPool, Rect worldBounds, Sound bulletsound, ExplosionPool explosionPool) {\n+        this.bulletPool = bulletPool;\n+        this.explosionPool = explosionPool;\n+        this.worldBounds = worldBounds;\n+        this.bulletsound = bulletsound;\n+\n+    }\n+\n+    @Override\n+    protected EnemyShip newObject() {\n+        return new EnemyShip(bulletPool, worldBounds,explosionPool);\n+    }\n+}"
  },
  {
    "sha": "1512fc0af87df7407e2ffcf8e0684ab5dcd7269f",
    "filename": "core/src/ru/geekbrains/pull/ExplosionPool.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/pull/ExplosionPool.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/pull/ExplosionPool.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/pull/ExplosionPool.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -2,21 +2,22 @@\n \n import com.badlogic.gdx.audio.Sound;\n import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n+\n import ru.geekbrains.base.SpritesPool;\n import ru.geekbrains.sprite.Explosion;\n \n public class ExplosionPool extends SpritesPool<Explosion> {\n+\n     private final TextureAtlas atlas;\n-    private final Sound exploSound;\n+    private final Sound sound;\n \n-    public ExplosionPool(TextureAtlas atlas, Sound exploSound) {\n+    public ExplosionPool(TextureAtlas atlas, Sound sound) {\n         this.atlas = atlas;\n-        this.exploSound = exploSound;\n+        this.sound = sound;\n     }\n \n     @Override\n     protected Explosion newObject() {\n-        return new Explosion(atlas, exploSound);\n+        return new Explosion(atlas, sound);\n     }\n }\n-"
  },
  {
    "sha": "db940df6084fcf28ac849591012f9cd59b6d2a2e",
    "filename": "core/src/ru/geekbrains/sprite/Backgraund.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Backgraund.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Backgraund.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/Backgraund.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -14,6 +14,6 @@ public Backgraund(Texture texture) {\n     @Override\n     public void resize(Rect worldBounds) {\n         this.pos.set(worldBounds.pos);\n-        setHightProportions(worldBounds.getHeight());\n+        setHeightProportion(worldBounds.getHeight());\n     }\n }"
  },
  {
    "sha": "aa6482933ad79aa9265afc29f41e300e2b386d97",
    "filename": "core/src/ru/geekbrains/sprite/Bullet.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Bullet.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Bullet.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/Bullet.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,54 @@\n+package ru.geekbrains.sprite;\n+\n+import com.badlogic.gdx.graphics.g2d.TextureRegion;\n+import com.badlogic.gdx.math.Vector2;\n+import ru.geekbrains.base.Sprite;\n+import ru.geekbrains.math.Rect;\n+\n+public class Bullet extends Sprite {\n+\n+    private final Vector2 v;\n+    private Rect worldBounds;\n+    private int damage;\n+    private Sprite owner;\n+\n+    public Bullet() {\n+        this.v = new Vector2();\n+        regions = new TextureRegion[1];\n+    }\n+\n+    public void set(\n+            Sprite owner,\n+            TextureRegion region,\n+            Vector2 pos0,\n+            Vector2 v0,\n+            float height,\n+            Rect worldBounds,\n+            int damage\n+    ) {\n+        this.owner = owner;\n+        regions[0] = region;\n+        pos.set(pos0);\n+        v.set(v0);\n+        setHeightProportion(height);\n+        this.worldBounds = worldBounds;\n+        this.damage = damage;\n+\n+    }\n+\n+    @Override\n+    public void update(float delta) {\n+        pos.mulAdd(v, delta);\n+        if (isOutside(worldBounds)) {\n+            destroy();\n+        }\n+    }\n+\n+    public int getDamage() {\n+        return damage;\n+    }\n+\n+    public Sprite getOwner() {\n+        return owner;\n+    }\n+}"
  },
  {
    "sha": "e98fb518a124409f2352b5fd4f53c8ad8fd64c7e",
    "filename": "core/src/ru/geekbrains/sprite/ButtonExit.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/ButtonExit.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/ButtonExit.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/ButtonExit.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -18,7 +18,7 @@ public ButtonExit(TextureAtlas atlas) {\n     @Override\n     public void resize(Rect worldBounds) {\n \n-        setHightProportions(HEIGHT);\n+        setHeightProportion(HEIGHT);\n         setBottom(worldBounds.getBottom() + PADDING);\n         setRight(worldBounds.getRight() - PADDING);\n     }"
  },
  {
    "sha": "74eeddd1730d063ffaf50479b71b8a4d801e9548",
    "filename": "core/src/ru/geekbrains/sprite/ButtonNewGame.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/ButtonNewGame.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/ButtonNewGame.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/ButtonNewGame.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,31 @@\n+package ru.geekbrains.sprite;\n+\n+import com.badlogic.gdx.Game;\n+import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n+import ru.geekbrains.Screen.GameScreene;\n+import ru.geekbrains.base.BaseButton;\n+import ru.geekbrains.math.Rect;\n+\n+public class ButtonNewGame extends BaseButton {\n+\n+    private static final float HEIGHT = 0.04f;\n+    private static final float TOP = 0.05f;\n+\n+\n+\n+    public ButtonNewGame(TextureAtlas atlas){\n+\n+        super(atlas.findRegion(\"button_new_game\"));\n+    }\n+    @Override\n+    public void resize(Rect worldBounds) {\n+\n+        setHeightProportion(HEIGHT);\n+\n+    }\n+\n+    @Override\n+    public void action() {\n+\n+    }\n+}"
  },
  {
    "sha": "d604567f37eb086434482b188caf0f052ba5800b",
    "filename": "core/src/ru/geekbrains/sprite/ButtonPlay.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/ButtonPlay.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/ButtonPlay.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/ButtonPlay.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -1,9 +1,7 @@\n package ru.geekbrains.sprite;\n \n import com.badlogic.gdx.Game;\n-import com.badlogic.gdx.Gdx;\n import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n-import com.badlogic.gdx.graphics.g2d.TextureRegion;\n import ru.geekbrains.Screen.GameScreene;\n import ru.geekbrains.base.BaseButton;\n import ru.geekbrains.math.Rect;\n@@ -24,7 +22,7 @@ public ButtonPlay(TextureAtlas atlas, Game game) {\n     @Override\n     public void resize(Rect worldBounds) {\n \n-        setHightProportions(HEIGHT);\n+        setHeightProportion(HEIGHT);\n         setBottom(worldBounds.getBottom() + PADDING);\n         setLeft(worldBounds.getLeft() + PADDING);\n     }"
  },
  {
    "sha": "995289eae31ad29b488ca6dd468f5ec4aa81b133",
    "filename": "core/src/ru/geekbrains/sprite/EnemyShip.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/EnemyShip.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/EnemyShip.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/EnemyShip.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,80 @@\n+package ru.geekbrains.sprite;\n+\n+import com.badlogic.gdx.Gdx;\n+import com.badlogic.gdx.graphics.g2d.TextureRegion;\n+import com.badlogic.gdx.math.Vector2;\n+import ru.geekbrains.base.BaseShip;\n+import ru.geekbrains.math.Rect;\n+import ru.geekbrains.pull.BulletPool;\n+\n+\n+public class EnemyShip extends BaseShip {\n+\n+    public EnemyShip(BulletPool bulletPool, Rect worldBounds, ru.geekbrains.pull.ExplosionPool explosionPool) {\n+\n+        this.bulletPool = bulletPool;\n+        this.worldBounds = worldBounds;\n+        this.explosionPool = explosionPool;\n+        v = new Vector2();\n+        v0 = new Vector2();\n+        bulletPos = new Vector2();\n+        bulletV = new Vector2();\n+        sound = Gdx.audio.newSound(Gdx.files.internal(\"sounds/bullet.wav\"));\n+    }\n+\n+    @Override\n+    public void update(float delta) {\n+        if (getRight() > worldBounds.getRight()) {\n+            setRight(worldBounds.getRight());\n+            setRight(worldBounds.getRight() - getHalfWidth());\n+        }\n+        if (getLeft() < worldBounds.getLeft()) {\n+            setLeft(worldBounds.getLeft());\n+            setLeft(worldBounds.getLeft() + getHalfWidth());\n+        }\n+\n+        if (getTop() > worldBounds.getTop()) {\n+            reloadTimer = reloadInterval * 0.8f;\n+        } else {\n+            if (!v.equals(v0)) {\n+                v.set(v0);\n+            }\n+        }\n+        super.update(delta);\n+        bulletPos.set(pos.x, pos.y - getHeight());\n+        if (getBottom() < worldBounds.getBottom()) {\n+            destroy();\n+        }\n+    }\n+\n+    public void set(\n+            TextureRegion[] regions,\n+            Vector2 v0,\n+            TextureRegion bulletRegion,\n+            float bulletHeight,\n+            Vector2 bulletV,\n+            int damage,\n+            float reloadInterval,\n+            float height,\n+            int hp\n+    ) {\n+        this.regions = regions;\n+        this.v0.set(v0);\n+        this.bulletRegion = bulletRegion;\n+        this.bulletHeight = bulletHeight;\n+        this.bulletV.set(bulletV);\n+        this.damage = damage;\n+        this.reloadInterval = reloadInterval;\n+        setHeightProportion(height);\n+        this.hp = hp;\n+        v.set(0, -0.3f);\n+    }\n+\n+    public boolean isBulletCollision(Rect bullet) {\n+\n+        return !(bullet.getRight() < getLeft()\n+                || bullet.getLeft() > getRight()\n+                || bullet.getBottom() > getTop()\n+                || bullet.getTop() < pos.y);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "fe2f1ddce28b4924a8ce7252e9eb16cc4487840e",
    "filename": "core/src/ru/geekbrains/sprite/Explosion.java",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Explosion.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Explosion.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/Explosion.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -3,37 +3,36 @@\n import com.badlogic.gdx.audio.Sound;\n import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n import com.badlogic.gdx.math.Vector2;\n+\n import ru.geekbrains.base.Sprite;\n \n public class Explosion extends Sprite {\n \n     private static final float ANIMATE_INTERVAL = 0.017f;\n \n     private float animateTimer;\n-    private Sound exploSound;\n-\n-    public Explosion(TextureAtlas atlas, Sound exploSound) {\n+    private Sound sound;\n \n+    public Explosion(TextureAtlas atlas, Sound sound) {\n         super(atlas.findRegion(\"explosion\"), 9, 9, 74);\n-        this.exploSound = exploSound;\n+        this.sound = sound;\n     }\n \n     public void set(float height, Vector2 pos) {\n         setHeightProportion(height);\n         this.pos.set(pos);\n-        exploSound.play();\n+        sound.play();\n     }\n \n     @Override\n     public void update(float delta) {\n         animateTimer += delta;\n-        if (animateTimer > ANIMATE_INTERVAL) {\n+        if (animateTimer >= ANIMATE_INTERVAL) {\n             animateTimer = 0f;\n             if (++frame == regions.length) {\n                 destroy();\n             }\n         }\n-        super.update(delta);\n     }\n \n     @Override"
  },
  {
    "sha": "cdc591040c7349516608eb61ca713f92c806e773",
    "filename": "core/src/ru/geekbrains/sprite/GameOver.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/GameOver.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/GameOver.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/GameOver.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,21 @@\n+package ru.geekbrains.sprite;\n+\n+import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n+import ru.geekbrains.base.Sprite;\n+import ru.geekbrains.math.Rect;\n+\n+public class GameOver extends Sprite {\n+\n+    private static final float HEIGHT = 0.04f;\n+    private static final float TOP = 0.2f;\n+\n+    public GameOver(TextureAtlas atlas) {\n+        super(atlas.findRegion(\"message_game_over\"));\n+    }\n+\n+    @Override\n+    public void resize(Rect worldBounds) {\n+        setHeightProportion(HEIGHT);\n+        setBottom(TOP);\n+    }\n+}"
  },
  {
    "sha": "858c6f580e953ba3c995c693dd53a6c953e16bb3",
    "filename": "core/src/ru/geekbrains/sprite/Logo.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Logo.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Logo.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/Logo.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -26,7 +26,7 @@ public Logo(Texture texture) {\n     @Override\n     public void resize(Rect worldBounds) {\n \n-        setHightProportions(HIGHT);\n+        setHeightProportion(HIGHT);\n     }\n \n     @Override"
  },
  {
    "sha": "77f664b12e35ff7a055efdb0f483110394fbd973",
    "filename": "core/src/ru/geekbrains/sprite/MainShip.java",
    "status": "modified",
    "additions": 96,
    "deletions": 145,
    "changes": 241,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/MainShip.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/MainShip.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/MainShip.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -2,212 +2,163 @@\n \n import com.badlogic.gdx.Gdx;\n import com.badlogic.gdx.Input;\n-import com.badlogic.gdx.audio.Sound;\n import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n-import com.badlogic.gdx.graphics.g2d.TextureRegion;\n import com.badlogic.gdx.math.Vector2;\n-import ru.geekbrains.base.Sprite;\n+import ru.geekbrains.base.BaseShip;\n import ru.geekbrains.math.Rect;\n-import ru.geekbrains.pull.BulletPull;\n+import ru.geekbrains.pull.ExplosionPool;\n+import ru.geekbrains.pull.BulletPool;\n \n-public class MainShip extends Sprite {\n+public class MainShip extends BaseShip {\n \n-    private static final float HEIGHT = 0.1f;\n-    private static final float PADDING = 0.1f;\n+    private static final float HEIGHT = 0.15f;\n+    private static final float PADDING = 0.05f;\n     private static final int INVALID_POINTER = -1;\n \n+    private boolean pressedLeft;\n+    private boolean pressedRight;\n \n-    private final Vector2 v0 = new Vector2(0.5f, 0);\n-    private final Vector2 v = new Vector2();\n-\n-    private Rect worldBounds;\n-    private BulletPull bulletPull;\n-    private TextureRegion bulletregion;\n-    private Vector2 bulletV;\n-    private Vector2 bulletPos;\n-\n-    private boolean pressLeft;\n-    private boolean pressRight;\n     private int leftPointer = INVALID_POINTER;\n     private int rightPointer = INVALID_POINTER;\n \n-    private float reloadInterval;\n-    private float reloadTimer;\n-\n-    private Sound bulletSound;\n-\n-\n-    public MainShip(TextureAtlas atals, BulletPull bulletPull) {\n \n-\n-        super(atals.findRegion(\"main_ship\"), 1, 2, 2);\n-        this.bulletPull = bulletPull;\n-        this.bulletregion = atals.findRegion(\"bulletMainShip\");\n+    public MainShip(TextureAtlas atlas, BulletPool bulletPool, ExplosionPool explosionPool) {\n+        super(atlas.findRegion(\"main_ship\"), 1, 2, 2);\n+        this.bulletPool = bulletPool;\n+        this.explosionPool = explosionPool;\n+        this.bulletRegion = atlas.findRegion(\"bulletMainShip\");\n+        v = new Vector2();\n+        v0 = new Vector2(0.5f, 0);\n         bulletV = new Vector2(0, 0.5f);\n         bulletPos = new Vector2();\n+        bulletHeight = 0.01f;\n+        damage = 1;\n         reloadInterval = 0.2f;\n-        bulletSound = Gdx.audio.newSound(Gdx.files.internal(\"sounds/bullet.wav\"));\n+        sound = Gdx.audio.newSound(Gdx.files.internal(\"sounds/laser.wav\"));\n+        hp = 1;\n+    }\n \n-//        float width = (atals.findRegion(\"main_ship\").getRegionWidth() / 2);\n-//        float height = atals.findRegion(\"main_ship\").getRegionHeight();\n-//        region = new TextureRegion(atals.findRegion(\"main_ship\"),\n-//                0, 0, (atals.findRegion(\"main_ship\").getRegionWidth() / 2)\n-//                , atals.findRegion(\"main_ship\").getRegionHeight());\n+    @Override\n+    public void resize(Rect worldBounds) {\n+        setHeightProportion(HEIGHT);\n+        setBottom(worldBounds.getBottom() + PADDING);\n+        this.worldBounds = worldBounds;\n     }\n \n-    public boolean keyDown(int keycode) {\n+    @Override\n+    public void update(float delta) {\n+        super.update(delta);\n+        bulletPos.set(pos.x, pos.y + getHalfHeight());\n+        if (getRight() > worldBounds.getRight()) {\n+            setRight(worldBounds.getRight());\n+            stop();\n+        }\n+        if (getLeft() < worldBounds.getLeft()) {\n+            setLeft(worldBounds.getLeft());\n+            stop();\n+        }\n+    }\n \n-        switch (keycode) {\n+    @Override\n+    public boolean touchDown(Vector2 touch, int pointer, int button) {\n+        if (touch.x < worldBounds.pos.x) {\n+            if (leftPointer != INVALID_POINTER) {\n+                return false;\n+            }\n+            leftPointer = pointer;\n+            moveLeft();\n+        } else {\n+            if (rightPointer != INVALID_POINTER) {\n+                return false;\n+            }\n+            rightPointer = pointer;\n+            moveRight();\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean touchUp(Vector2 touch, int pointer, int button) {\n+        if (pointer == leftPointer) {\n+            leftPointer = INVALID_POINTER;\n+            if (rightPointer != INVALID_POINTER) {\n+                moveRight();\n+            } else {\n+                stop();\n+            }\n+        } else if (pointer == rightPointer) {\n+            rightPointer = INVALID_POINTER;\n+            if (leftPointer != INVALID_POINTER) {\n+                moveLeft();\n+            } else {\n+                stop();\n+            }\n+        }\n+        return false;\n+    }\n \n+    public boolean keyDown(int keycode) {\n+        switch (keycode) {\n             case Input.Keys.A:\n             case Input.Keys.LEFT:\n-                pressLeft = true;\n                 moveLeft();\n+                pressedLeft = true;\n                 break;\n-\n             case Input.Keys.D:\n             case Input.Keys.RIGHT:\n-                pressRight = true;\n                 moveRight();\n-                break;\n-\n-            case Input.Keys.W:\n-            case Input.Keys.UP:\n-                shoot();\n+                pressedRight = true;\n                 break;\n         }\n         return false;\n     }\n \n     public boolean keyUp(int keycode) {\n-\n         switch (keycode) {\n             case Input.Keys.A:\n             case Input.Keys.LEFT:\n-                pressLeft = false;\n-                if (pressRight) {\n+                pressedLeft = false;\n+                if (pressedRight) {\n                     moveRight();\n                 } else {\n                     stop();\n                 }\n                 break;\n             case Input.Keys.D:\n             case Input.Keys.RIGHT:\n-                pressRight = false;\n-                if (pressLeft) {\n+                pressedRight = false;\n+                if (pressedLeft) {\n                     moveLeft();\n                 } else {\n                     stop();\n                 }\n+                break;\n         }\n         return false;\n     }\n \n-    private void moveRight() {\n+    public void dispose() {\n+        sound.dispose();\n+    }\n+\n+    public boolean isBulletCollision(Rect bullet) {\n+        return !(bullet.getRight() < getLeft()\n+                || bullet.getLeft() > getRight()\n+                || bullet.getBottom() > pos.y\n+                || bullet.getTop() < getBottom()\n+        );\n+    }\n \n+    private void moveRight() {\n         v.set(v0);\n     }\n \n     private void moveLeft() {\n-\n         v.set(v0).rotate(180);\n     }\n \n     private void stop() {\n-\n         v.setZero();\n     }\n \n-    private void shoot() {\n-\n-        bulletPos.set(pos.x, pos.y + getHeight());\n-        Bullet bullet = bulletPull.obtain();\n-        bullet.set(this, bulletregion, bulletPos, bulletV, 0.01f, worldBounds, 1);\n-        bulletSound.play(0.05f);\n-    }\n-\n-    public void dispose(){\n-\n-       bulletSound.dispose();\n-    }\n-\n-    @Override\n-    public void resize(Rect worldBounds) {\n-\n-        setHightProportions(HEIGHT);\n-        setBottom(worldBounds.getBottom() + PADDING);\n-        this.worldBounds = worldBounds;\n-    }\n-\n-    @Override\n-    public void update(float delta) {\n-\n-        pos.mulAdd(v, delta);\n-        reloadTimer += delta;\n-        if (reloadTimer >= reloadInterval) {\n-            reloadTimer = 0f;\n-            shoot();\n-        }\n-        if (getRight() > worldBounds.getRight()) {\n-            setRight(worldBounds.getRight());\n-            stop();\n-        }\n-        if (getLeft() < worldBounds.getLeft()) {\n-            setLeft(worldBounds.getLeft());\n-            stop();\n-        }\n-    }\n-\n-    @Override\n-    public void setHightProportions(float height) {\n-        super.setHightProportions(height);\n-    }\n-\n-\n-    @Override\n-    public boolean touchDragged(Vector2 tourch, int pointer, int button) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean touchUp(Vector2 tourch, int pointer, int button) {\n-\n-        if (pointer == leftPointer) {\n-            leftPointer = INVALID_POINTER;\n-            if (rightPointer != INVALID_POINTER) {\n-                moveRight();\n-            } else {\n-                stop();\n-            }\n-        }\n-        if (pointer == rightPointer) {\n-            rightPointer = INVALID_POINTER;\n-            if (leftPointer != INVALID_POINTER) {\n-                moveLeft();\n-            } else {\n-                stop();\n-            }\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean touchDown(Vector2 tourch, int pointer, int button) {\n-\n-        if (tourch.x < worldBounds.pos.x) {\n-            if (leftPointer != INVALID_POINTER) {\n-                return false;\n-            }\n-            leftPointer = pointer;\n-            moveLeft();\n-        } else {\n-            if (rightPointer != INVALID_POINTER) {\n-                return false;\n-            }\n-            rightPointer = pointer;\n-            moveRight();\n-        }\n-        return false;\n-    }\n-\n }"
  },
  {
    "sha": "db7005ad93effb00bbbc074f326dd9d4aa2a266b",
    "filename": "core/src/ru/geekbrains/sprite/Star.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Star.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/sprite/Star.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/sprite/Star.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -16,12 +16,13 @@\n \n     public Star(TextureAtlas atlas) {\n         super(atlas.findRegion(\"star\"));\n-        setHightProportions(Rnd.nextFloat(MAXSIZE, MINSAZE));\n+        setHeightProportion(Rnd.nextFloat(MAXSIZE, MINSAZE));\n         v = new Vector2(Rnd.nextFloat(0.001f, 0.001f), getHeight() * -2);\n     }\n \n     @Override\n     public void update(float delta) {\n+\n         super.update(delta);\n         pos.mulAdd(v, delta);\n         if (getRight() < worldBounds.getLeft()) {"
  },
  {
    "sha": "e14831c6dbf55f2188bada32eb8fe98a0e1f0c8d",
    "filename": "core/src/ru/geekbrains/utils/EnemyEmitter.java",
    "status": "added",
    "additions": 112,
    "deletions": 0,
    "changes": 112,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/utils/EnemyEmitter.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/utils/EnemyEmitter.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/utils/EnemyEmitter.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,112 @@\n+package ru.geekbrains.utils;\n+\n+import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n+import com.badlogic.gdx.graphics.g2d.TextureRegion;\n+import com.badlogic.gdx.math.Vector2;\n+import ru.geekbrains.math.Rect;\n+import ru.geekbrains.math.Rnd;\n+import ru.geekbrains.pull.EnemyPool;\n+import ru.geekbrains.sprite.EnemyShip;\n+\n+public class EnemyEmitter {\n+\n+    private static final float ENEMY_SMALL_HEIGHT = 0.06f;\n+    private static final float ENEMY_SMALL_BULLET_HEIGHT = 0.01f;\n+    private static final int ENEMY_SMALL_BULLET_DAMAGE = 1;\n+    private static final float ENEMY_SMALL_RELOAD_INTERVAL = 0.5f;\n+    private static final int ENEMY_SMALL_HP = 5;\n+\n+    private static final float ENEMY_MEDIUM_HEIGHT = 0.08f;\n+    private static final float ENEMY_MEDIUM_BULLET_HEIGHT = 0.015f;\n+    private static final int ENEMY_MEDIUM_BULLET_DAMAGE = 2;\n+    private static final float ENEMY_MEDIUM_RELOAD_INTERVAL = 1f;\n+    private static final int ENEMY_MEDIUM_HP = 10;\n+\n+    private static final float ENEMY_BIG_HEIGHT = 0.1f;\n+    private static final float ENEMY_BIG_BULLET_HEIGHT = 0.02f;\n+    private static final int ENEMY_BIG_BULLET_DAMAGE = 3;\n+    private static final float ENEMY_BIG_RELOAD_INTERVAL = 2f;\n+    private static final int ENEMY_BIG_HP = 20;\n+\n+    private final Vector2 enemySmallV = new Vector2(0, -0.2f);\n+    private final Vector2 enemyMEDIUMV = new Vector2(0, -0.15f);\n+    private final Vector2 enemyBIGV = new Vector2(0, -0.1f);\n+\n+    private final Vector2 enemySmallBulletV = new Vector2(0, -0.8f);\n+    private final Vector2 enemyMEDIUMBulletV = new Vector2(0, -0.4f);\n+    private final Vector2 enemyBIGBulletV = new Vector2(0, -0.2f);\n+\n+    private TextureRegion[] enemySmallRegions;\n+    private TextureRegion[] enemyMEDIUMRegions;\n+    private TextureRegion[] enemyBIGRegions;\n+\n+    private Rect worldBounds;\n+    private TextureRegion bulletRegion;\n+    private EnemyPool enemyPool;\n+\n+    private float generateInterval = 4f;\n+    private float generateTimer;\n+\n+    public EnemyEmitter(TextureAtlas atlas, Rect worldBounds, EnemyPool enemyPool) {\n+\n+        this.worldBounds = worldBounds;\n+        this.enemyPool = enemyPool;\n+\n+        enemySmallRegions = Regions.split(atlas.findRegion(\"enemy0\"), 1, 2, 2);\n+        enemyMEDIUMRegions = Regions.split(atlas.findRegion(\"enemy1\"), 1, 2, 2);\n+        enemyBIGRegions = Regions.split(atlas.findRegion(\"enemy2\"), 1, 2, 2);\n+        bulletRegion = atlas.findRegion(\"bulletEnemy\");\n+    }\n+\n+    public void generate(float delta) {\n+\n+        generateTimer += delta;\n+\n+        if (generateTimer >= generateInterval) {\n+            generateTimer = 0f;\n+            EnemyShip enemyShip = enemyPool.obtain();\n+            float enemyType = (float) Math.random();\n+            if (enemyType < 0.5f) {\n+                enemyShip.set(\n+                        enemySmallRegions,\n+                        enemySmallV,\n+                        bulletRegion,\n+                        ENEMY_SMALL_BULLET_HEIGHT,\n+                        enemySmallBulletV,\n+                        ENEMY_SMALL_BULLET_DAMAGE,\n+                        ENEMY_SMALL_RELOAD_INTERVAL,\n+                        ENEMY_SMALL_HEIGHT,\n+                        ENEMY_SMALL_HP\n+                );\n+            } else if (enemyType < 0.8f) {\n+                enemyShip.set(\n+                        enemyMEDIUMRegions,\n+                        enemyMEDIUMV,\n+                        bulletRegion,\n+                        ENEMY_MEDIUM_BULLET_HEIGHT,\n+                        enemyMEDIUMBulletV,\n+                        ENEMY_MEDIUM_BULLET_DAMAGE,\n+                        ENEMY_MEDIUM_RELOAD_INTERVAL,\n+                        ENEMY_MEDIUM_HEIGHT,\n+                        ENEMY_MEDIUM_HP\n+                );\n+            } else {\n+                enemyShip.set(\n+                        enemyBIGRegions,\n+                        enemyBIGV,\n+                        bulletRegion,\n+                        ENEMY_BIG_BULLET_HEIGHT,\n+                        enemyBIGBulletV,\n+                        ENEMY_BIG_BULLET_DAMAGE,\n+                        ENEMY_BIG_RELOAD_INTERVAL,\n+                        ENEMY_BIG_HEIGHT,\n+                        ENEMY_BIG_HP\n+                );\n+            }\n+            enemyShip.pos.x = Rnd.nextFloat(\n+                    worldBounds.getLeft() + enemyShip.getHalfWidth(),\n+                    worldBounds.getRight() - enemyShip.getHalfWidth());\n+            enemyShip.setBottom(worldBounds.getTop());\n+        }\n+    }\n+}"
  },
  {
    "sha": "2301f8f232bcb3bfb659bb2cab0f03d7df616978",
    "filename": "core/src/ru/geekbrains/utils/Regions.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/Mihapka/StarConflict/blob/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/utils/Regions.java",
    "raw_url": "https://github.com/Mihapka/StarConflict/raw/122ff8538138983eafa5e3b38d4adf90953f3021/core/src/ru/geekbrains/utils/Regions.java",
    "contents_url": "https://api.github.com/repos/Mihapka/StarConflict/contents/core/src/ru/geekbrains/utils/Regions.java?ref=122ff8538138983eafa5e3b38d4adf90953f3021",
    "patch": "@@ -0,0 +1,31 @@\n+package ru.geekbrains.utils;\n+\n+import com.badlogic.gdx.graphics.g2d.TextureRegion;\n+\n+public class Regions {\n+\n+    /**\n+     * Разбивает TextureRegion на фреймы\n+     * @param region регион\n+     * @param rows количество строк\n+     * @param cols количество столбцов\n+     * @param frames количество фреймов\n+     * @return массив регионов\n+     */\n+    public static TextureRegion[] split(TextureRegion region, int rows, int cols, int frames) {\n+        if(region == null) throw new RuntimeException(\"Split null region\");\n+        TextureRegion[] regions = new TextureRegion[frames];\n+        int tileWidth = region.getRegionWidth() / cols;\n+        int tileHeight = region.getRegionHeight() / rows;\n+\n+        int frame = 0;\n+        for (int i = 0; i < rows; i++) {\n+            for (int j = 0; j < cols; j++) {\n+                regions[frame] = new TextureRegion(region, tileWidth * j, tileHeight * i, tileWidth, tileHeight);\n+                if(frame == frames - 1) return regions;\n+                frame++;\n+            }\n+        }\n+        return regions;\n+    }\n+}"
  }
]
