[
  {
    "sha": "b473cd91d78f73d3209bd4d1901f2384edd58cb8",
    "filename": "bin/run-redis.sh",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/RediSearch/YCSB/blob/a7ec4f235edb656b6273406c56403df031ec1d92/bin/run-redis.sh",
    "raw_url": "https://github.com/RediSearch/YCSB/raw/a7ec4f235edb656b6273406c56403df031ec1d92/bin/run-redis.sh",
    "contents_url": "https://api.github.com/repos/RediSearch/YCSB/contents/bin/run-redis.sh?ref=a7ec4f235edb656b6273406c56403df031ec1d92",
    "patch": "@@ -0,0 +1,14 @@\n+#!/bin/bash\n+\n+./bin/ycsb load redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputLoad.txt\n+\n+./bin/ycsb run redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputRunA.txt\n+./bin/ycsb run redis -s -P workloads/workloadb -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputRunB.txt\n+./bin/ycsb run redis -s -P workloads/workloadc -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputRunC.txt\n+./bin/ycsb run redis -s -P workloads/workloadf -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputRunF.txt\n+./bin/ycsb run redis -s -P workloads/workloadd -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputRunD.txt\n+\n+redis-cli flushall\n+\n+./bin/ycsb load redis -s -P workloads/workloade -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputLoad.txt\n+./bin/ycsb run redis -s -P workloads/workloade -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputRunE.txt"
  },
  {
    "sha": "9837f4f37cfa57de7618400d2cd3775d0abafb3c",
    "filename": "bin/ycsb",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RediSearch/YCSB/blob/a7ec4f235edb656b6273406c56403df031ec1d92/bin/ycsb",
    "raw_url": "https://github.com/RediSearch/YCSB/raw/a7ec4f235edb656b6273406c56403df031ec1d92/bin/ycsb",
    "contents_url": "https://api.github.com/repos/RediSearch/YCSB/contents/bin/ycsb?ref=a7ec4f235edb656b6273406c56403df031ec1d92",
    "patch": "@@ -220,7 +220,7 @@ def get_classpath_from_maven(module):\n         # the last module will be the datastore binding\n         line = [x for x in mvn_output.splitlines() if x.startswith(\"classpath=\")][-1:]\n         return line[0][len(\"classpath=\"):]\n-    except subprocess.CalledProcessError, err:\n+    except subprocess.CalledProcessError as err:\n         error(\"Attempting to generate a classpath from Maven failed \"\n               \"with return code '\" + str(err.returncode) + \"'. The output from \"\n               \"Maven follows, try running \""
  },
  {
    "sha": "965292736d9ef392c002cb29b5a8ddef88f1ee98",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/RediSearch/YCSB/blob/a7ec4f235edb656b6273406c56403df031ec1d92/pom.xml",
    "raw_url": "https://github.com/RediSearch/YCSB/raw/a7ec4f235edb656b6273406c56403df031ec1d92/pom.xml",
    "contents_url": "https://api.github.com/repos/RediSearch/YCSB/contents/pom.xml?ref=a7ec4f235edb656b6273406c56403df031ec1d92",
    "patch": "@@ -138,7 +138,7 @@ LICENSE file.\n     <openjpa.jdbc.version>2.1.1</openjpa.jdbc.version>\n     <orientdb.version>2.2.37</orientdb.version>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <redis.version>2.9.0</redis.version>\n+    <redis.version>3.5.1</redis.version>\n     <riak.version>2.0.5</riak.version>\n     <rocksdb.version>6.2.2</rocksdb.version>\n     <s3.version>1.10.20</s3.version>"
  },
  {
    "sha": "19b6aed6722d8c88eeddbe688af972ad26b60e71",
    "filename": "redis/README.md",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/RediSearch/YCSB/blob/a7ec4f235edb656b6273406c56403df031ec1d92/redis/README.md",
    "raw_url": "https://github.com/RediSearch/YCSB/raw/a7ec4f235edb656b6273406c56403df031ec1d92/redis/README.md",
    "contents_url": "https://api.github.com/repos/RediSearch/YCSB/contents/redis/README.md?ref=a7ec4f235edb656b6273406c56403df031ec1d92",
    "patch": "@@ -45,15 +45,14 @@ Set host, port, password, and cluster mode in the workload you plan to run.\n \n Or, you can set configs with the shell command, EG:\n \n-    ./bin/ycsb load redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" > outputLoad.txt\n+    ./bin/ycsb load redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputLoad.txt\n \n ### 5. Load data and run tests\n \n Load the data:\n+    ./bin/ycsb load redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputLoad.txt\n \n-    ./bin/ycsb load redis -s -P workloads/workloada > outputLoad.txt\n \n Run the workload test:\n-\n-    ./bin/ycsb run redis -s -P workloads/workloada > outputRun.txt\n+    ./bin/ycsb run redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" -p \"threadcount=8\" > outputRun.txt\n "
  },
  {
    "sha": "67af43f1e960bde89dd248d1909c30bd2aec1d0a",
    "filename": "redis/pom.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/RediSearch/YCSB/blob/a7ec4f235edb656b6273406c56403df031ec1d92/redis/pom.xml",
    "raw_url": "https://github.com/RediSearch/YCSB/raw/a7ec4f235edb656b6273406c56403df031ec1d92/redis/pom.xml",
    "contents_url": "https://api.github.com/repos/RediSearch/YCSB/contents/redis/pom.xml?ref=a7ec4f235edb656b6273406c56403df031ec1d92",
    "patch": "@@ -34,6 +34,17 @@ LICENSE file.\n       <groupId>redis.clients</groupId>\n       <artifactId>jedis</artifactId>\n       <version>${redis.version}</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.commons</groupId>\n+          <artifactId>commons-pool2</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-pool2</artifactId>\n+      <version>2.9.0</version>\n     </dependency>\n     <dependency>\n       <groupId>site.ycsb</groupId>"
  },
  {
    "sha": "e5018caeee4eb8ef9ec6b382091f4f2fcaf5217e",
    "filename": "redis/src/main/java/site/ycsb/db/RedisClient.java",
    "status": "modified",
    "additions": 136,
    "deletions": 67,
    "changes": 203,
    "blob_url": "https://github.com/RediSearch/YCSB/blob/a7ec4f235edb656b6273406c56403df031ec1d92/redis/src/main/java/site/ycsb/db/RedisClient.java",
    "raw_url": "https://github.com/RediSearch/YCSB/raw/a7ec4f235edb656b6273406c56403df031ec1d92/redis/src/main/java/site/ycsb/db/RedisClient.java",
    "contents_url": "https://api.github.com/repos/RediSearch/YCSB/contents/redis/src/main/java/site/ycsb/db/RedisClient.java?ref=a7ec4f235edb656b6273406c56403df031ec1d92",
    "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2012 YCSB contributors. All rights reserved.\n+ * Copyright (c) 2021 YCSB contributors. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you\n  * may not use this file except in compliance with the License. You\n@@ -24,28 +24,17 @@\n \n package site.ycsb.db;\n \n+import redis.clients.jedis.*;\n+import redis.clients.jedis.util.JedisClusterCRC16;\n import site.ycsb.ByteIterator;\n import site.ycsb.DB;\n import site.ycsb.DBException;\n import site.ycsb.Status;\n import site.ycsb.StringByteIterator;\n-import redis.clients.jedis.BasicCommands;\n-import redis.clients.jedis.HostAndPort;\n-import redis.clients.jedis.Jedis;\n-import redis.clients.jedis.JedisCluster;\n-import redis.clients.jedis.JedisCommands;\n-import redis.clients.jedis.Protocol;\n \n import java.io.Closeable;\n import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.Vector;\n+import java.util.*;\n \n /**\n  * YCSB binding for <a href=\"http://redis.io/\">Redis</a>.\n@@ -54,7 +43,9 @@\n  */\n public class RedisClient extends DB {\n \n-  private JedisCommands jedis;\n+  private JedisCluster jedisCluster;\n+  private JedisPool jedisPool;\n+  private Boolean clusterEnabled;\n \n   public static final String HOST_PROPERTY = \"redis.host\";\n   public static final String PORT_PROPERTY = \"redis.port\";\n@@ -66,40 +57,41 @@\n \n   public void init() throws DBException {\n     Properties props = getProperties();\n-    int port;\n+    int port = Protocol.DEFAULT_PORT;\n+    String host = Protocol.DEFAULT_HOST;\n+    int timeout = Protocol.DEFAULT_TIMEOUT;\n \n+    String redisTimeoutStr = props.getProperty(TIMEOUT_PROPERTY);\n+    String password = props.getProperty(PASSWORD_PROPERTY);\n+    clusterEnabled = Boolean.parseBoolean(props.getProperty(CLUSTER_PROPERTY));\n     String portString = props.getProperty(PORT_PROPERTY);\n     if (portString != null) {\n       port = Integer.parseInt(portString);\n-    } else {\n-      port = Protocol.DEFAULT_PORT;\n     }\n-    String host = props.getProperty(HOST_PROPERTY);\n+    if (props.getProperty(HOST_PROPERTY) != null){\n+      host = props.getProperty(HOST_PROPERTY);\n+    }\n+    if (redisTimeoutStr != null){\n+      timeout = Integer.parseInt(redisTimeoutStr);\n+    }\n \n-    boolean clusterEnabled = Boolean.parseBoolean(props.getProperty(CLUSTER_PROPERTY));\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n     if (clusterEnabled) {\n       Set<HostAndPort> jedisClusterNodes = new HashSet<>();\n       jedisClusterNodes.add(new HostAndPort(host, port));\n-      jedis = new JedisCluster(jedisClusterNodes);\n+      jedisCluster = new JedisCluster(jedisClusterNodes, timeout, timeout, 5, poolConfig);\n     } else {\n-      String redisTimeout = props.getProperty(TIMEOUT_PROPERTY);\n-      if (redisTimeout != null){\n-        jedis = new Jedis(host, port, Integer.parseInt(redisTimeout));\n-      } else {\n-        jedis = new Jedis(host, port);\n-      }\n-      ((Jedis) jedis).connect();\n-    }\n-\n-    String password = props.getProperty(PASSWORD_PROPERTY);\n-    if (password != null) {\n-      ((BasicCommands) jedis).auth(password);\n+      jedisPool = new JedisPool(poolConfig, host, port, timeout, password);\n     }\n   }\n \n   public void cleanup() throws DBException {\n     try {\n-      ((Closeable) jedis).close();\n+      if (clusterEnabled) {\n+        ((Closeable) jedisCluster).close();\n+      } else {\n+        ((Closeable) jedisPool).close();\n+      }\n     } catch (IOException e) {\n       throw new DBException(\"Closing connection failed.\");\n     }\n@@ -121,62 +113,139 @@ private double hash(String key) {\n   public Status read(String table, String key, Set<String> fields,\n       Map<String, ByteIterator> result) {\n     if (fields == null) {\n-      StringByteIterator.putAllAsByteIterators(result, jedis.hgetAll(key));\n+      Map<String, String> reply;\n+      if (clusterEnabled) {\n+        reply = jedisCluster.hgetAll(key);\n+      } else {\n+        try (Jedis jedis = jedisPool.getResource()) {\n+          reply = jedis.hgetAll(key);\n+        }\n+      }\n+      extractHGetAllResults(result, reply);\n     } else {\n-      String[] fieldArray =\n-          (String[]) fields.toArray(new String[fields.size()]);\n-      List<String> values = jedis.hmget(key, fieldArray);\n-\n-      Iterator<String> fieldIterator = fields.iterator();\n-      Iterator<String> valueIterator = values.iterator();\n-\n-      while (fieldIterator.hasNext() && valueIterator.hasNext()) {\n-        result.put(fieldIterator.next(),\n-            new StringByteIterator(valueIterator.next()));\n+      List<String> reply;\n+      if (clusterEnabled) {\n+        reply = jedisCluster.hmget(key, fields.toArray(new String[fields.size()]));\n+      } else {\n+        try (Jedis jedis = jedisPool.getResource()) {\n+          reply = jedis.hmget(key, fields.toArray(new String[fields.size()]));\n+        }\n       }\n-      assert !fieldIterator.hasNext() && !valueIterator.hasNext();\n+      extractHmGetResults(fields, result, reply);\n     }\n     return result.isEmpty() ? Status.ERROR : Status.OK;\n   }\n \n+  private void extractHGetAllResults(Map<String, ByteIterator> result, Map<String, String> reply) {\n+    StringByteIterator.putAllAsByteIterators(result, reply);\n+  }\n+\n+  private void extractHmGetResults(Set<String> fields, Map<String, ByteIterator> result, List<String> values) {\n+    Iterator<String> fieldIterator = fields.iterator();\n+    Iterator<String> valueIterator = values.iterator();\n+\n+    while (fieldIterator.hasNext() && valueIterator.hasNext()) {\n+      result.put(fieldIterator.next(),\n+          new StringByteIterator(valueIterator.next()));\n+    }\n+    assert !fieldIterator.hasNext() && !valueIterator.hasNext();\n+  }\n+\n   @Override\n   public Status insert(String table, String key,\n       Map<String, ByteIterator> values) {\n-    if (jedis.hmset(key, StringByteIterator.getStringMap(values))\n-        .equals(\"OK\")) {\n-      jedis.zadd(INDEX_KEY, hash(key), key);\n-      return Status.OK;\n+    Jedis j;\n+    if (clusterEnabled) {\n+      j = jedisCluster.getConnectionFromSlot(JedisClusterCRC16.getCRC16(key));\n+    } else {\n+      j = jedisPool.getResource();\n+    }\n+    try {\n+      Pipeline p = j.pipelined();\n+      p.hmset(key, StringByteIterator.getStringMap(values));\n+      p.zadd(INDEX_KEY, hash(key), key);\n+      List<Object> res = p.syncAndReturnAll();\n+      final Status status = res.get(0).equals(\"OK\") ? Status.OK : Status.ERROR;\n+      return status;\n+    } finally {\n+      j.close();\n     }\n-    return Status.ERROR;\n   }\n \n   @Override\n   public Status delete(String table, String key) {\n-    return jedis.del(key) == 0 && jedis.zrem(INDEX_KEY, key) == 0 ? Status.ERROR\n-        : Status.OK;\n+    Jedis j;\n+    if (clusterEnabled) {\n+      j = jedisCluster.getConnectionFromSlot(JedisClusterCRC16.getCRC16(key));\n+    } else {\n+      j = jedisPool.getResource();\n+    }\n+    try {\n+      Pipeline p = j.pipelined();\n+      p.del(key);\n+      p.zrem(INDEX_KEY, key);\n+      List<Object> res = p.syncAndReturnAll();\n+      return res.get(0).equals(0) && res.get(1).equals(0) ? Status.ERROR\n+          : Status.OK;\n+    } finally {\n+      j.close();\n+    }\n   }\n \n   @Override\n   public Status update(String table, String key,\n       Map<String, ByteIterator> values) {\n-    return jedis.hmset(key, StringByteIterator.getStringMap(values))\n-        .equals(\"OK\") ? Status.OK : Status.ERROR;\n+    String res;\n+    if (clusterEnabled) {\n+      res = jedisCluster.hmset(key, StringByteIterator.getStringMap(values));\n+    } else {\n+      try (Jedis jedis = jedisPool.getResource()) {\n+        res = jedis.hmset(key, StringByteIterator.getStringMap(values));\n+      }\n+    }\n+    return res.equals(\"OK\") ? Status.OK : Status.ERROR;\n   }\n \n   @Override\n   public Status scan(String table, String startkey, int recordcount,\n       Set<String> fields, Vector<HashMap<String, ByteIterator>> result) {\n-    Set<String> keys = jedis.zrangeByScore(INDEX_KEY, hash(startkey),\n-        Double.POSITIVE_INFINITY, 0, recordcount);\n-\n-    HashMap<String, ByteIterator> values;\n-    for (String key : keys) {\n-      values = new HashMap<String, ByteIterator>();\n-      read(table, key, fields, values);\n-      result.add(values);\n+    Jedis j;\n+    if (clusterEnabled) {\n+      j = jedisCluster.getConnectionFromSlot(JedisClusterCRC16.getCRC16(INDEX_KEY));\n+    } else {\n+      j = jedisPool.getResource();\n+    }\n+    try {\n+      Set<String> keys = j.zrangeByScore(INDEX_KEY, hash(startkey),\n+          Double.POSITIVE_INFINITY, 0, recordcount);\n+      Pipeline p = j.pipelined();\n+      if (fields == null) {\n+        for (String key : keys) {\n+          p.hgetAll(key);\n+        }\n+      } else {\n+        String[] fieldsArray = fields.toArray(new String[fields.size()]);\n+        for (String key : keys) {\n+          p.hmget(key, fieldsArray);\n+        }\n+      }\n+      List<Object> res = p.syncAndReturnAll();\n+      if (fields == null) {\n+        for (Object reply : res) {\n+          HashMap<String, ByteIterator> values = new HashMap<String, ByteIterator>();\n+          extractHGetAllResults(values, (Map<String, String>) reply);\n+          result.add(values);\n+        }\n+      } else {\n+        for (Object reply : res) {\n+          HashMap<String, ByteIterator> values = new HashMap<String, ByteIterator>();\n+          extractHmGetResults(fields, values, (List<String>) reply);\n+          result.add(values);\n+        }\n+      }\n+      return Status.OK;\n+    } finally {\n+      j.close();\n     }\n-\n-    return Status.OK;\n   }\n-\n }"
  }
]
