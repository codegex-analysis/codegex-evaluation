[
  {
    "sha": "db324e668e35865f3c2899df964cff7ed1632800",
    "filename": "lesson-04-spring-boot/pom.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/pom.xml",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/pom.xml",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/pom.xml?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -33,6 +33,16 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-web</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n \n         <dependency>\n             <groupId>org.springframework.boot</groupId>"
  },
  {
    "sha": "9ced4670ddfb327108f14082ac2cab421f0bea8e",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/BadRequestException.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/BadRequestException.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/BadRequestException.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/BadRequestException.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,4 @@\n+package ru.geekbrains.controller;\n+\n+public class BadRequestException extends RuntimeException {\n+}"
  },
  {
    "sha": "26a0d9c13f4286c2ff93f85da73da850f610647d",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/NotFoundException.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/NotFoundException.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/NotFoundException.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/NotFoundException.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,4 @@\n+package ru.geekbrains.controller;\n+\n+public class NotFoundException extends RuntimeException {\n+}"
  },
  {
    "sha": "27020630eb37551c46fcbb0ec2f81c4531ccf0a0",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/ProductController.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/ProductController.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/ProductController.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,97 @@\n+package ru.geekbrains.controller;\n+\n+        import org.slf4j.Logger;\n+        import org.slf4j.LoggerFactory;\n+        import org.springframework.beans.factory.annotation.Autowired;\n+        import org.springframework.data.domain.Page;\n+        import org.springframework.http.HttpStatus;\n+        import org.springframework.stereotype.Controller;\n+        import org.springframework.ui.Model;\n+        import org.springframework.validation.BindingResult;\n+        import org.springframework.web.bind.annotation.*;\n+        import org.springframework.web.servlet.ModelAndView;\n+        import ru.geekbrains.service.ProductRepr;\n+        import ru.geekbrains.service.ProductService;\n+\n+        import javax.validation.Valid;\n+        import java.util.List;\n+        import java.util.Optional;\n+\n+@Controller\n+@RequestMapping(\"/product\")\n+public class ProductController {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ProductController.class);\n+\n+    private final ProductService productService;\n+\n+    @Autowired\n+    public ProductController(ProductService productService) {\n+        this.productService = productService;\n+    }\n+\n+    @GetMapping\n+    public String listPage(Model model,\n+                           @RequestParam(\"titleFilter\") Optional<String> titleFilter,\n+                           @RequestParam(\"priceMinFilter\") Optional<Integer> priceMinFilter,\n+                           @RequestParam(\"priceMaxFilter\") Optional<Integer> priceMaxFilter,\n+                           @RequestParam(\"page\") Optional<Integer> page,\n+                           @RequestParam(\"size\") Optional<Integer> size,\n+                           @RequestParam(\"sortField\") Optional<String> sortField) {\n+        logger.info(\"List page requested\");\n+\n+        Page<ProductRepr> products=productService.findWithFilter(\n+                titleFilter.orElse(null),\n+                priceMinFilter.orElse(null),\n+                priceMaxFilter.orElse(null),\n+                page.orElse(1) - 1,\n+                size.orElse(3),\n+                sortField.orElse(null)\n+        );\n+        model.addAttribute(\"products\", products);\n+        return \"product\";\n+    }\n+\n+    @GetMapping(\"/{id}\")\n+    public String editPage(@PathVariable(\"id\") Long id, Model model) {\n+        logger.info(\"Edit page for id {} requested\", id);\n+\n+        model.addAttribute(\"product\", productService.findById(id)\n+                .orElseThrow(NotFoundException::new));\n+        return \"product_form\";\n+    }\n+\n+    @PostMapping(\"/update\")\n+    public String update(@Valid @ModelAttribute(\"product\") ProductRepr product, BindingResult result, Model model) {\n+        logger.info(\"Update endpoint requested\");\n+\n+        if (result.hasErrors()) {\n+            return \"product_form\";\n+        }\n+        logger.info(\"Updating product with id {}\", product.getId());\n+        productService.save(product);\n+        return \"redirect:/product\";\n+    }\n+\n+    @GetMapping(\"/new\")\n+    public String create(Model model) {\n+        logger.info(\"Create new product request\");\n+\n+        model.addAttribute(\"product\", new ProductRepr());\n+        return \"product_form\";\n+    }\n+\n+    @DeleteMapping(\"/{id}\")\n+    public String remove(@PathVariable(\"id\") Long id) {\n+        logger.info(\"Product delete request\");\n+\n+        productService.delete(id);\n+        return \"redirect:/product\";\n+    }\n+    @ExceptionHandler\n+    public ModelAndView notFoundExceptionHandler(NotFoundException ex) {\n+        ModelAndView mav = new ModelAndView(\"not_found\");\n+        mav.setStatus(HttpStatus.NOT_FOUND);\n+        return mav;\n+    }\n+}"
  },
  {
    "sha": "8a14d1fc544d20df5978cda20acca92791c0386f",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/UserController.java",
    "status": "modified",
    "additions": 39,
    "deletions": 18,
    "changes": 57,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/UserController.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/UserController.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/controller/UserController.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -3,46 +3,65 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.validation.BindingResult;\n import org.springframework.web.bind.annotation.*;\n-import ru.geekbrains.persist.User;\n-import ru.geekbrains.persist.UserRepository;\n+import org.springframework.web.servlet.ModelAndView;\n+import ru.geekbrains.service.UserRepr;\n+import ru.geekbrains.service.UserService;\n \n import javax.validation.Valid;\n+import java.util.Optional;\n \n @Controller\n @RequestMapping(\"/user\")\n public class UserController {\n \n     private static final Logger logger = LoggerFactory.getLogger(UserController.class);\n \n-    private UserRepository userRepository;\n+    private final UserService userService;\n \n     @Autowired\n-    public UserController(UserRepository userRepository) {\n-        this.userRepository = userRepository;\n+    public UserController(UserService userService) {\n+        this.userService = userService;\n     }\n \n     @GetMapping\n-    public String listPage(Model model) {\n+    public String listPage(Model model,\n+                           @RequestParam(\"usernameFilter\") Optional<String> usernameFilter,\n+                           @RequestParam(\"ageMinFilter\") Optional<Integer> ageMinFilter,\n+                           @RequestParam(\"ageMaxFilter\") Optional<Integer> ageMaxFilter,\n+                           @RequestParam(\"page\") Optional<Integer> page,\n+                           @RequestParam(\"size\") Optional<Integer> size,\n+                           @RequestParam(\"sortField\") Optional<String> sortField) {\n         logger.info(\"List page requested\");\n \n-        model.addAttribute(\"users\", userRepository.findAll());\n+        Page<UserRepr> users = userService.findWithFilter(\n+                usernameFilter.orElse(null),\n+                ageMinFilter.orElse(null),\n+                ageMaxFilter.orElse(null),\n+                page.orElse(1) - 1,\n+                size.orElse(3),\n+                sortField.orElse(null)\n+        );\n+        model.addAttribute(\"users\", users);\n         return \"user\";\n     }\n \n     @GetMapping(\"/{id}\")\n     public String editPage(@PathVariable(\"id\") Long id, Model model) {\n         logger.info(\"Edit page for id {} requested\", id);\n \n-        model.addAttribute(\"user\", userRepository.findById(id));\n+        model.addAttribute(\"user\", userService.findById(id)\n+                .orElseThrow(NotFoundException::new));\n         return \"user_form\";\n     }\n \n     @PostMapping(\"/update\")\n-    public String update(@Valid User user, BindingResult result) {\n+    public String update(@Valid @ModelAttribute(\"user\") UserRepr user, BindingResult result, Model model) {\n         logger.info(\"Update endpoint requested\");\n \n         if (result.hasErrors()) {\n@@ -53,29 +72,31 @@ public String update(@Valid User user, BindingResult result) {\n             return \"user_form\";\n         }\n \n-        if (user.getId() != null) {\n-            logger.info(\"Updating user with id {}\", user.getId());\n-            userRepository.update(user);\n-        } else {\n-            logger.info(\"Creating new user\");\n-            userRepository.insert(user);\n-        }\n+        logger.info(\"Updating user with id {}\", user.getId());\n+        userService.save(user);\n         return \"redirect:/user\";\n     }\n \n     @GetMapping(\"/new\")\n     public String create(Model model) {\n         logger.info(\"Create new user request\");\n \n-        model.addAttribute(\"user\", new User());\n+        model.addAttribute(\"user\", new UserRepr());\n         return \"user_form\";\n     }\n \n     @DeleteMapping(\"/{id}\")\n     public String remove(@PathVariable(\"id\") Long id) {\n         logger.info(\"User delete request\");\n \n-        userRepository.delete(id);\n+        userService.delete(id);\n         return \"redirect:/user\";\n     }\n+\n+    @ExceptionHandler\n+    public ModelAndView notFoundExceptionHandler(NotFoundException ex) {\n+        ModelAndView mav = new ModelAndView(\"not_found\");\n+        mav.setStatus(HttpStatus.NOT_FOUND);\n+        return mav;\n+    }\n }"
  },
  {
    "sha": "4465fc042fc2501ba67cd8676dc5001705ce3ee0",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/Product.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/Product.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/Product.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/Product.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,53 @@\n+package ru.geekbrains.persist;\n+\n+import ru.geekbrains.service.ProductRepr;\n+\n+import javax.persistence.*;\n+import java.math.BigDecimal;\n+\n+@Entity\n+@Table(name = \"products\")\n+public class Product {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(unique = true, nullable = false)\n+    private String title;\n+\n+    @Column(nullable = false)\n+    private BigDecimal price;\n+\n+    public Product() {\n+    }\n+\n+    public Product(ProductRepr product) {\n+        this.id = product.getId();\n+        this.title = product.getTitle();\n+        this.price = product.getPrice();    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+}"
  },
  {
    "sha": "32c5380af57a70a292e6417c70c910279da1a705",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductRepository.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductRepository.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductRepository.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,24 @@\n+package ru.geekbrains.persist;\n+\n+        import org.springframework.data.jpa.repository.JpaRepository;\n+        import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+        import org.springframework.data.jpa.repository.Query;\n+        import org.springframework.data.repository.query.Param;\n+        import org.springframework.stereotype.Repository;\n+\n+        import java.util.List;\n+\n+@Repository\n+public interface ProductRepository extends JpaRepository<Product, Long>, JpaSpecificationExecutor<Product> {\n+\n+    List<Product> findProductByTitleLike(String title);\n+\n+    @Query(\"select p from Product p \" +\n+            \"where (p.title like :title or :title is null) and \" +\n+            \"      (p.price>=:minPrice or :minPrice is null) and \" +\n+            \"      (p.price<=:maxPrice or :maxPrice is null)\")\n+    List<Product> findWithFilter(@Param(\"title\") String titleFilter,\n+                                 @Param(\"minPrice\") Integer minPrice,\n+                                 @Param(\"maxPrice\") Integer maxPrice);\n+\n+}"
  },
  {
    "sha": "c488850c1926ffa3e3170cd16016e0a079b3edb8",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductSpecification.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductSpecification.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductSpecification.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/ProductSpecification.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.geekbrains.persist;\n+\n+        import org.springframework.data.jpa.domain.Specification;\n+\n+public final class ProductSpecification {\n+\n+    public static Specification<Product> titleLike(String title) {\n+        return (root, query, cb) -> cb.like(root.get(\"title\"), \"%\" + title + \"%\");\n+    }\n+\n+    public static Specification<Product> minPrice(Integer minPrice) {\n+        return (root, query, cb) -> cb.ge(root.get(\"price\"), minPrice);\n+    }\n+\n+    public static Specification<Product> maxPrice(Integer maxPrice) {\n+        return (root, query, cb) -> cb.le(root.get(\"price\"), maxPrice);\n+    }\n+}"
  },
  {
    "sha": "0fe86af225b521e093b0831f44f5de9620c9778d",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/User.java",
    "status": "modified",
    "additions": 36,
    "deletions": 12,
    "changes": 48,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/User.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/User.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/User.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -1,31 +1,44 @@\n package ru.geekbrains.persist;\n \n-import javax.validation.constraints.Email;\n-import javax.validation.constraints.NotEmpty;\n+import ru.geekbrains.service.UserRepr;\n \n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name = \"users\")\n public class User {\n \n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long id;\n \n-    @NotEmpty\n+    @Column(unique = true, nullable = false)\n     private String username;\n \n-    @NotEmpty\n+    @Column(nullable = false, length = 512)\n     private String password;\n \n-    @NotEmpty\n-    private String matchingPassword;\n-\n-    @Email\n+    @Column\n     private String email;\n \n+    @Column\n+    private Integer age;\n+\n     public User() {\n     }\n \n     public User(String username) {\n         this.username = username;\n     }\n \n+    public User(UserRepr user) {\n+        this.id = user.getId();\n+        this.username = user.getUsername();\n+        this.password = user.getPassword();\n+        this.email = user.getEmail();\n+        this.age = user.getAge();\n+    }\n+\n     public Long getId() {\n         return id;\n     }\n@@ -58,11 +71,22 @@ public void setEmail(String email) {\n         this.email = email;\n     }\n \n-    public String getMatchingPassword() {\n-        return matchingPassword;\n+    public Integer getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(Integer age) {\n+        this.age = age;\n     }\n \n-    public void setMatchingPassword(String matchingPassword) {\n-        this.matchingPassword = matchingPassword;\n+    @Override\n+    public String toString() {\n+        return \"User{\" +\n+                \"id=\" + id +\n+                \", username='\" + username + '\\'' +\n+                \", password='\" + password + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", age=\" + age +\n+                '}';\n     }\n }"
  },
  {
    "sha": "01b68f99d88256e36ac00564971d1afc46e7f03b",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserRepository.java",
    "status": "modified",
    "additions": 13,
    "deletions": 37,
    "changes": 50,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserRepository.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserRepository.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserRepository.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -1,48 +1,24 @@\n package ru.geekbrains.persist;\n \n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n-import javax.annotation.PostConstruct;\n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.atomic.AtomicLong;\n \n @Repository\n-public class UserRepository {\n+public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {\n \n-    private Map<Long, User> userMap = new ConcurrentHashMap<>();\n+    List<User> findUserByUsernameLike(String username);\n \n-    private AtomicLong identity = new AtomicLong(0);\n-\n-    @PostConstruct\n-    public void init() {\n-        this.insert(new User(\"user1\"));\n-        this.insert(new User(\"user2\"));\n-        this.insert(new User(\"user3\"));\n-    }\n-\n-    public List<User> findAll() {\n-        return new ArrayList<>(userMap.values());\n-    }\n-\n-    public User findById(long id) {\n-        return userMap.get(id);\n-    }\n-\n-    public void insert(User user) {\n-        long id = identity.incrementAndGet();\n-        user.setId(id);\n-        userMap.put(id, user);\n-    }\n-\n-    public void update(User user) {\n-        userMap.put(user.getId(), user);\n-    }\n-\n-    public void delete(long id) {\n-        userMap.remove(id);\n-    }\n+    @Query(\"select u from User u \" +\n+            \"where (u.username like :username or :username is null) and \" +\n+            \"      (u.age >= :minAge or :minAge is null) and \" +\n+            \"      (u.age <= :maxAge or :maxAge is null)\")\n+    List<User> findWithFilter(@Param(\"username\") String usernameFilter,\n+                              @Param(\"minAge\") Integer minAge,\n+                              @Param(\"maxAge\") Integer maxAge);\n \n }"
  },
  {
    "sha": "272ff66f34e68ee2789796637303e534bf928607",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserSpecification.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserSpecification.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserSpecification.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/persist/UserSpecification.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.geekbrains.persist;\n+\n+import org.springframework.data.jpa.domain.Specification;\n+\n+public final class UserSpecification {\n+\n+    public static Specification<User> usernameLike(String name) {\n+        return (root, query, cb) -> cb.like(root.get(\"username\"), \"%\" + name + \"%\");\n+    }\n+\n+    public static Specification<User> minAge(Integer minAge) {\n+        return (root, query, cb) -> cb.ge(root.get(\"age\"), minAge);\n+    }\n+\n+    public static Specification<User> maxAge(Integer maxAge) {\n+        return (root, query, cb) -> cb.le(root.get(\"age\"), maxAge);\n+    }\n+}"
  },
  {
    "sha": "b14b5e3ef8d00db2a7c5db264bfe0d6f93fa53a8",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/ProductResource.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/ProductResource.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/ProductResource.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/ProductResource.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,96 @@\n+\n+package ru.geekbrains.rest;\n+\n+        import org.springframework.beans.factory.annotation.Autowired;\n+        import org.springframework.data.domain.Page;\n+        import org.springframework.http.HttpStatus;\n+        import org.springframework.http.ResponseEntity;\n+        import org.springframework.web.bind.annotation.*;\n+        import ru.geekbrains.controller.BadRequestException;\n+        import ru.geekbrains.controller.NotFoundException;\n+        import ru.geekbrains.service.ProductRepr;\n+        import ru.geekbrains.service.ProductService;\n+        import ru.geekbrains.service.UserRepr;\n+        import ru.geekbrains.service.UserService;\n+\n+        import java.util.List;\n+        import java.util.Optional;\n+        import java.util.stream.Collectors;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/product\")\n+public class ProductResource {\n+\n+    private final ProductService productService;\n+\n+    @Autowired\n+    public ProductResource(ProductService productService) {\n+        this.productService = productService;\n+    }\n+\n+    @GetMapping(path = \"/all\", produces = \"application/json\")\n+    public List<ProductRepr> findAll() {\n+        return productService.findAll().stream()\n+                .peek(p -> p.setPrice(null))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @GetMapping(path = \"/{id}\")\n+    public ProductRepr findById(@PathVariable(\"id\") Long id) {\n+        ProductRepr productRepr = productService.findById(id)\n+                .orElseThrow(NotFoundException::new);\n+        productRepr.setPrice(null);\n+        return productRepr;\n+    }\n+\n+    @GetMapping(\"filter\")\n+    public Page<ProductRepr> listPage(\n+            @RequestParam(\"titleFilter\") Optional<String> titleFilter,\n+            @RequestParam(\"priceMinFilter\") Optional<Integer> priceMinFilter,\n+            @RequestParam(\"priceMaxFilter\") Optional<Integer> priceMaxFilter,\n+            @RequestParam(\"page\") Optional<Integer> page,\n+            @RequestParam(\"size\") Optional<Integer> size,\n+            @RequestParam(\"sortField\") Optional<String> sortField) {\n+\n+        return productService.findWithFilter(\n+                titleFilter.orElse(null),\n+                priceMinFilter.orElse(null),\n+                priceMaxFilter.orElse(null),\n+                page.orElse(1) - 1,\n+                size.orElse(3),\n+                sortField.orElse(null)\n+        );\n+    }\n+\n+    @PostMapping(consumes = \"application/json\")\n+    public ProductRepr create(@RequestBody ProductRepr productRepr) {\n+        if (productRepr.getId() != null) {\n+            throw new BadRequestException();\n+        }\n+        productService.save(productRepr);\n+        return productRepr;\n+    }\n+\n+    @PutMapping(consumes = \"application/json\")\n+    public void update(@RequestBody ProductRepr productRepr) {\n+        if (productRepr.getId() == null) {\n+            throw new BadRequestException();\n+        }\n+        productService.save(productRepr);\n+    }\n+\n+    @DeleteMapping(\"/{id}\")\n+    public void delete(@PathVariable(\"id\") Long id) {\n+        productService.delete(id);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<String> notFoundException(NotFoundException ex) {\n+        return new ResponseEntity<>(\"Entity not found\", HttpStatus.NOT_FOUND);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<String> badRequestException(BadRequestException ex) {\n+        return new ResponseEntity<>(\"Bad request\", HttpStatus.NOT_FOUND);\n+    }\n+}"
  },
  {
    "sha": "e30a32704740925809ef9f6b1e4598d159993822",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/UserResource.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/UserResource.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/UserResource.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/rest/UserResource.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,93 @@\n+package ru.geekbrains.rest;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.controller.BadRequestException;\n+import ru.geekbrains.controller.NotFoundException;\n+import ru.geekbrains.service.UserRepr;\n+import ru.geekbrains.service.UserService;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/user\")\n+public class UserResource {\n+\n+    private final UserService userService;\n+\n+    @Autowired\n+    public UserResource(UserService userService) {\n+        this.userService = userService;\n+    }\n+\n+    @GetMapping(path = \"/all\", produces = \"application/json\")\n+    public List<UserRepr> findAll() {\n+        return userService.findAll().stream()\n+                .peek(u -> u.setPassword(null))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @GetMapping(path = \"/{id}\")\n+    public UserRepr findById(@PathVariable(\"id\") Long id) {\n+        UserRepr userRepr = userService.findById(id)\n+                .orElseThrow(NotFoundException::new);\n+        userRepr.setPassword(null);\n+        return userRepr;\n+    }\n+\n+    @GetMapping(\"filter\")\n+    public Page<UserRepr> listPage(\n+            @RequestParam(\"usernameFilter\") Optional<String> usernameFilter,\n+            @RequestParam(\"ageMinFilter\") Optional<Integer> ageMinFilter,\n+            @RequestParam(\"ageMaxFilter\") Optional<Integer> ageMaxFilter,\n+            @RequestParam(\"page\") Optional<Integer> page,\n+            @RequestParam(\"size\") Optional<Integer> size,\n+            @RequestParam(\"sortField\") Optional<String> sortField) {\n+\n+        return userService.findWithFilter(\n+                usernameFilter.orElse(null),\n+                ageMinFilter.orElse(null),\n+                ageMaxFilter.orElse(null),\n+                page.orElse(1) - 1,\n+                size.orElse(3),\n+                sortField.orElse(null)\n+        );\n+    }\n+\n+    @PostMapping(consumes = \"application/json\")\n+    public UserRepr create(@RequestBody UserRepr userRepr) {\n+        if (userRepr.getId() != null) {\n+            throw new BadRequestException();\n+        }\n+        userService.save(userRepr);\n+        return userRepr;\n+    }\n+\n+    @PutMapping(consumes = \"application/json\")\n+    public void update(@RequestBody UserRepr userRepr) {\n+        if (userRepr.getId() == null) {\n+            throw new BadRequestException();\n+        }\n+        userService.save(userRepr);\n+    }\n+\n+    @DeleteMapping(\"/{id}\")\n+    public void delete(@PathVariable(\"id\") Long id) {\n+        userService.delete(id);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<String> notFoundException(NotFoundException ex) {\n+        return new ResponseEntity<>(\"Entity not found\", HttpStatus.NOT_FOUND);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<String> badRequestException(BadRequestException ex) {\n+        return new ResponseEntity<>(\"Bad request\", HttpStatus.NOT_FOUND);\n+    }\n+}"
  },
  {
    "sha": "8e917827f10cb0c478112591e67b415f0d6f49e3",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductRepr.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductRepr.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductRepr.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductRepr.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,54 @@\n+package ru.geekbrains.service;\n+\n+import ru.geekbrains.persist.Product;\n+import javax.validation.constraints.NotEmpty;\n+import java.math.BigDecimal;\n+\n+// DTO\n+public class ProductRepr {\n+\n+    private Long id;\n+\n+    @NotEmpty\n+    private String title;\n+\n+    @NotEmpty\n+    private BigDecimal price;\n+\n+    public ProductRepr() {\n+    }\n+\n+    public ProductRepr(String title) {\n+        this.title = title;\n+    }\n+\n+    public ProductRepr(Product product) {\n+        this.id = product.getId();\n+        this.title = product.getTitle();\n+        this.price = product.getPrice();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+}"
  },
  {
    "sha": "45f0f59ea54b3a26b44422529a35e694b35ff218",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductService.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductService.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductService.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductService.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,20 @@\n+package ru.geekbrains.service;\n+\n+        import org.springframework.data.domain.Page;\n+\n+        import java.util.List;\n+        import java.util.Optional;\n+\n+public interface ProductService {\n+\n+    List<ProductRepr> findAll();\n+\n+    Page<ProductRepr> findWithFilter(String titleFilter, Integer minPrice, Integer maxPrice,\n+                                     Integer page,Integer size, String sortField);\n+\n+    Optional<ProductRepr> findById(long id);\n+\n+    void save(ProductRepr product);\n+\n+    void delete(long id);\n+}"
  },
  {
    "sha": "561e2eb8d8bcad056d5ff3195123e8a73f377ac2",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductServiceImpl.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductServiceImpl.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductServiceImpl.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/ProductServiceImpl.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,73 @@\n+package ru.geekbrains.service;\n+\n+        import org.springframework.beans.factory.annotation.Autowired;\n+        import org.springframework.data.domain.Page;\n+        import org.springframework.data.domain.PageRequest;\n+        import org.springframework.data.domain.Sort;\n+        import org.springframework.data.jpa.domain.Specification;\n+        import org.springframework.stereotype.Service;\n+        import org.springframework.transaction.annotation.Transactional;\n+        import ru.geekbrains.persist.*;\n+\n+        import java.util.List;\n+        import java.util.Optional;\n+        import java.util.stream.Collectors;\n+\n+@Service\n+public class ProductServiceImpl implements ProductService {\n+\n+    private final ProductRepository productRepository;\n+\n+    @Autowired\n+    public ProductServiceImpl(ProductRepository productRepository) {\n+        this.productRepository = productRepository;\n+    }\n+\n+    @Override\n+    public List<ProductRepr> findAll() {\n+        return productRepository.findAll().stream()\n+                .map(ProductRepr::new)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Page<ProductRepr> findWithFilter(String titleFilter, Integer minPrice, Integer maxPrice,\n+                                            Integer page, Integer size, String sortField) {\n+        Specification<Product> spec = Specification.where(null);\n+        if (titleFilter != null && !titleFilter.isBlank()) {\n+            spec = spec.and(ProductSpecification.titleLike(titleFilter));\n+        }\n+        if (minPrice != null) {\n+            spec = spec.and(ProductSpecification.minPrice(minPrice));\n+        }\n+        if (maxPrice != null) {\n+            spec = spec.and(ProductSpecification.maxPrice(maxPrice));\n+        }\n+        if (sortField != null && !sortField.isBlank()) {\n+            return productRepository.findAll(spec, PageRequest.of(page, size, Sort.by(sortField)))\n+                    .map(ProductRepr::new);\n+        }\n+        return productRepository.findAll(spec, PageRequest.of(page, size))\n+                .map(ProductRepr::new);\n+    }\n+\n+\n+    @Transactional\n+    @Override\n+    public Optional<ProductRepr> findById(long id) {\n+        return productRepository.findById(id)\n+                .map(ProductRepr::new);\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void save(ProductRepr product) {\n+        productRepository.save(new Product(product));\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void delete(long id) {\n+        productRepository.deleteById(id);\n+    }\n+}"
  },
  {
    "sha": "6a8b595254d1f04b2438b2efff5b35776232ec55",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserRepr.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserRepr.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserRepr.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserRepr.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,91 @@\n+package ru.geekbrains.service;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import ru.geekbrains.persist.User;\n+\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.NotEmpty;\n+\n+// DTO\n+public class UserRepr {\n+\n+    private Long id;\n+\n+    @NotEmpty\n+    private String username;\n+\n+    @NotEmpty\n+    private String password;\n+\n+    @JsonIgnore\n+    @NotEmpty\n+    private String matchingPassword;\n+\n+    @Email\n+    private String email;\n+\n+    private Integer age;\n+\n+    public UserRepr() {\n+    }\n+\n+    public UserRepr(String username) {\n+        this.username = username;\n+    }\n+\n+    public UserRepr(User user) {\n+        this.id = user.getId();\n+        this.username = user.getUsername();\n+        this.password = user.getPassword();\n+        this.email = user.getEmail();\n+        this.age = user.getAge();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getMatchingPassword() {\n+        return matchingPassword;\n+    }\n+\n+    public void setMatchingPassword(String matchingPassword) {\n+        this.matchingPassword = matchingPassword;\n+    }\n+\n+    public Integer getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(Integer age) {\n+        this.age = age;\n+    }\n+}"
  },
  {
    "sha": "1219a9d26a1d28196dce33357d78a623e6aee434",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserService.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserService.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserService.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserService.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,20 @@\n+package ru.geekbrains.service;\n+\n+import org.springframework.data.domain.Page;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface UserService {\n+\n+    List<UserRepr> findAll();\n+\n+    Page<UserRepr> findWithFilter(String usernameFilter, Integer minAge, Integer maxAge,\n+                                  Integer page, Integer size, String sortField);\n+\n+    Optional<UserRepr> findById(long id);\n+\n+    void save(UserRepr user);\n+\n+    void delete(long id);\n+}"
  },
  {
    "sha": "ab446dda0f99ddbed59ef66099e77a7a7bbc0a37",
    "filename": "lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserServiceImpl.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserServiceImpl.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserServiceImpl.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/java/ru/geekbrains/service/UserServiceImpl.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,79 @@\n+package ru.geekbrains.service;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.geekbrains.persist.User;\n+import ru.geekbrains.persist.UserRepository;\n+import ru.geekbrains.persist.UserSpecification;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Service\n+\n+public class UserServiceImpl implements UserService {\n+\n+    private final UserRepository userRepository;\n+\n+    @Autowired\n+    public UserServiceImpl(UserRepository userRepository) {\n+        this.userRepository = userRepository;\n+    }\n+\n+    @Override\n+    public List<UserRepr> findAll() {\n+        return userRepository.findAll().stream()\n+                .map(UserRepr::new)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Page<UserRepr> findWithFilter(String usernameFilter, Integer minAge, Integer maxAge,\n+                                         Integer page, Integer size, String sortField) {\n+        Specification<User> spec = Specification.where(null);\n+        if (usernameFilter != null && !usernameFilter.isBlank()) {\n+            spec = spec.and(UserSpecification.usernameLike(usernameFilter));\n+        }\n+        if (minAge != null) {\n+            spec = spec.and(UserSpecification.minAge(minAge));\n+        }\n+        if (maxAge != null) {\n+            spec = spec.and(UserSpecification.maxAge(maxAge));\n+        }\n+        if (sortField != null && !sortField.isBlank()) {\n+            return userRepository.findAll(spec, PageRequest.of(page, size, Sort.by(sortField)))\n+                    .map(UserRepr::new);\n+        }\n+        return userRepository.findAll(spec, PageRequest.of(page, size))\n+                .map(UserRepr::new);\n+    }\n+\n+    @Transactional\n+    @Override\n+    public Optional<UserRepr> findById(long id) {\n+        return userRepository.findById(id)\n+                .map(UserRepr::new);\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void save(UserRepr user) {\n+        User userToSave = new User(user);\n+        userRepository.save(userToSave);\n+        if (user.getId() == null) {\n+            user.setId(userToSave.getId());\n+        }\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void delete(long id) {\n+        userRepository.deleteById(id);\n+    }\n+}"
  },
  {
    "sha": "8c88700e4a688962eeaa8e545d2858a859521884",
    "filename": "lesson-04-spring-boot/src/main/resources/application.properties",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/application.properties",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/application.properties?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -1,4 +1,14 @@\n server.servlet.context-path=/spring-mvc-app\n server.port=8080\n \n+spring.datasource.url=jdbc:mysql://localhost:3306/hibernate_lesson_01_25?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC\n+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n+spring.datasource.username=root\n+spring.datasource.password=root\n+\n+spring.jpa.show-sql=true\n+spring.jpa.properties.hibernate.format_sql=true\n+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\n+spring.jpa.hibernate.ddl-auto=update\n+\n spring.mvc.hiddenmethod.filter.enabled=true"
  },
  {
    "sha": "a7c6e507d4d6ab77c7bcf7382265def56b5fbe8b",
    "filename": "lesson-04-spring-boot/src/main/resources/templates/fragments/footer.html",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/fragments/footer.html",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/fragments/footer.html",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/templates/fragments/footer.html?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,18 @@\n+<html lang=\"en\"\n+      xmlns:th=\"http://www.thymeleaf.org\">\n+\n+<th:block th:fragment=\"scripts\">\n+    <!-- Optional JavaScript -->\n+    <!-- jQuery first, then Popper.js, then Bootstrap JS -->\n+    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n+            integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n+            crossorigin=\"anonymous\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n+            integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n+            crossorigin=\"anonymous\"></script>\n+    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n+            integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n+            crossorigin=\"anonymous\"></script>\n+</th:block>\n+\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "fd57554560be1c5ffc267bccd22d6cd8fb19b5df",
    "filename": "lesson-04-spring-boot/src/main/resources/templates/fragments/head.html",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/fragments/head.html",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/fragments/head.html",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/templates/fragments/head.html?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,33 @@\n+<html lang=\"en\"\n+      xmlns:th=\"http://www.thymeleaf.org\">\n+\n+<head th:fragment=\"head\">\n+    <!-- Required meta tags -->\n+    <meta charset=\"utf-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\n+    <!-- Bootstrap CSS -->\n+    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n+          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n+    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"/>\n+    <title>EShop application</title>\n+</head>\n+\n+<nav th:fragment=\"navbar\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n+    <a class=\"navbar-brand\" th:href=\"@{/}\">EShop</a>\n+\n+    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n+            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n+        <span class=\"navbar-toggler-icon\"></span>\n+    </button>\n+\n+    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n+        <ul class=\"navbar-nav mr-auto\">\n+            <li class=\"nav-item active\">\n+                <a class=\"nav-link\" th:href=\"@{/user}\">List</a>\n+            </li>\n+        </ul>\n+    </div>\n+</nav>\n+\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "e154b55e06f04298b92f4d5adb9ff0b55ef0ae41",
    "filename": "lesson-04-spring-boot/src/main/resources/templates/fragments/sort_header.html",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/fragments/sort_header.html",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/fragments/sort_header.html",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/templates/fragments/sort_header.html?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,10 @@\n+<html lang=\"en\"\n+      xmlns:th=\"http://www.thymeleaf.org\">\n+\n+<th scope=\"col\" th:fragment=\"sort_header (header, column)\">[[${header}]]\n+    <a th:href=\"@{/user(page=${param.page}, size=${param.size},\n+                           usernameFilter=${param.usernameFilter}, minAge=${param.minAge}, maxAge=${param.maxAge},\n+                           sortField=${column})}\"><i class=\"fa fa-sort-down\"></i></a>\n+</th>\n+\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "48aad270f6e28ad14bd7ceca160a1757b8b2bc6d",
    "filename": "lesson-04-spring-boot/src/main/resources/templates/product.html",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/product.html",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/product.html",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/templates/product.html?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,106 @@\n+<!doctype html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+\n+<head>\n+    <!-- Required meta tags -->\n+    <meta charset=\"utf-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\n+    <!-- Bootstrap CSS -->\n+    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n+          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n+    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"/>\n+    <title>EShop application</title>\n+</head>\n+\n+<body>\n+\n+<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n+    <a class=\"navbar-brand\" href=\"#\">EShop</a>\n+\n+    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n+            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n+        <span class=\"navbar-toggler-icon\"></span>\n+    </button>\n+\n+    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n+        <ul class=\"navbar-nav mr-auto\">\n+            <li class=\"nav-item active\">\n+                <a class=\"nav-link\" href=\"#\">List</a>\n+            </li>\n+        </ul>\n+    </div>\n+</nav>\n+\n+<div class=\"container\">\n+    <div class=\"row py-2\">\n+        <div class=\"col-12\">\n+            <a class=\"btn btn-primary\" th:href=\"@{/product/new}\">Добавить</a>\n+        </div>\n+\n+        <div class=\"col-12 mt-3\">\n+            <form class=\"form-inline\" th:method=\"get\">\n+\n+                <div class=\"form-group mx-sm-3 mb-2 mr-2\">\n+                    <label for=\"titleFilter\" class=\"sr-only\">Title filter</label>\n+                    <input type=\"text\" class=\"form-control\" id=\"titleFilter\" th:value=\"${param.titleFilter}\"\n+                           name=\"titleFilter\" placeholder=\"Title filter\">\n+                </div>\n+\n+                <div class=\"form-group mx-sm-3 mb-2 mr-2\">\n+                    <label for=\"priceFilter1\" class=\"sr-only\">Price filter1</label>\n+                    <input type=\"text\" class=\"form-control\" id=\"priceFilter1\" th:value=\"${param.priceFilter1}\"\n+                           name=\"priceFilter1\" placeholder=\"Price filter 1\">\n+                </div>\n+\n+                <div class=\"form-group mx-sm-3 mb-2 mr-2\">\n+                    <label for=\"priceFilter2\" class=\"sr-only\">Price filter2</label>\n+                    <input type=\"text\" class=\"form-control\" id=\"priceFilter2\" th:value=\"${param.priceFilter2}\"\n+                           name=\"priceFilter2\" placeholder=\"Price filter 2\">\n+                </div>\n+\n+                <button type=\"submit\" class=\"btn btn-primary mb-2\">Apply</button>\n+            </form>\n+        </div>\n+\n+        <div class=\"col-12\">\n+            <table class=\"table table-bordered my-2\">\n+                <thead>\n+                <tr>\n+                    <th scope=\"col\">Id</th>\n+                    <th scope=\"col\">Title</th>\n+                    <th scope=\"col\">Price</th>\n+                    <th scope=\"col\">Actions</th>\n+                </tr>\n+                </thead>\n+                <tbody>\n+                <tr th:each=\"product : ${products}\">\n+                    <th th:text=\"${product.id}\" scope=\"row\">1</th>\n+                    <td th:text=\"${product.title}\">Apple</td>\n+                    <td th:text=\"${product.price}\">120</td>\n+                    <td>\n+                        <a class=\"btn btn-success\" th:href=\"@{/product/{id}(id = ${product.id})}\"><i class=\"fas fa-edit\"></i></a>\n+                        <form class=\"d-inline\" th:method=\"delete\" th:action=\"@{/product/{id}(id = ${product.id})}\">\n+                            <button type=\"submit\" class=\"btn btn-danger\"><i class=\"far fa-trash-alt\"></i></button>\n+                        </form>\n+                    </td>\n+                </tr>\n+                </tbody>\n+            </table>\n+        </div>\n+    </div>\n+</div>\n+\n+<!-- Optional JavaScript -->\n+<!-- jQuery first, then Popper.js, then Bootstrap JS -->\n+<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n+        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n+        crossorigin=\"anonymous\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n+        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n+        crossorigin=\"anonymous\"></script>\n+<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n+        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n+        crossorigin=\"anonymous\"></script>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "846f712a45c1082f98e6f7ec37f424dcab5ce59b",
    "filename": "lesson-04-spring-boot/src/main/resources/templates/product_form.html",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/product_form.html",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/product_form.html",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/templates/product_form.html?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,71 @@\n+        <!doctype html>\n+        <html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+\n+        <head>\n+        <!-- Required meta tags -->\n+        <meta charset=\"utf-8\">\n+        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n+\n+        <!-- Bootstrap CSS -->\n+        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n+        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n+        <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"/>\n+        <title>EShop application</title>\n+</head>\n+\n+<body>\n+\n+<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n+    <a class=\"navbar-brand\" href=\"#\">EShop</a>\n+\n+    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n+            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n+        <span class=\"navbar-toggler-icon\"></span>\n+    </button>\n+\n+    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n+        <ul class=\"navbar-nav mr-auto\">\n+            <li class=\"nav-item active\">\n+                <a class=\"nav-link\" href=\"#\">List</a>\n+            </li>\n+        </ul>\n+    </div>\n+</nav>\n+\n+<div class=\"container\">\n+    <div class=\"row py-2\">\n+        <div class=\"col-12\">\n+            <form th:action=\"@{/product/update}\" th:method=\"post\" th:object=\"${productRepr}\">\n+                <input type=\"hidden\" th:field=\"*{id}\" id=\"id\" name=\"id\">\n+\n+                <div class=\"form-group\">\n+                    <label>Title</label>\n+                    <input type=\"text\" th:field=\"*{title}\" class=\"form-control\" id=\"title\" name=\"title\" placeholder=\"Enter title\">\n+<!--                    <p class=\"text-danger\" th:if=\"${#fields.hasErrors('title')}\" th:errors=\"*{title}\"></p>-->\n+                </div>\n+\n+                <div class=\"form-group\">\n+                    <label>Price</label>\n+                    <input type=\"text\" th:field=\"*{price}\" class=\"form-control\" id=\"price\" name=\"price\" placeholder=\"Enter price\">\n+<!--                    <p class=\"text-danger\" th:if=\"${#fields.hasErrors('price')}\" th:errors=\"*{price}\">Wrong price format</p>-->\n+                </div>\n+\n+                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n+            </form>\n+        </div>\n+    </div>\n+</div>\n+\n+<!-- Optional JavaScript -->\n+<!-- jQuery first, then Popper.js, then Bootstrap JS -->\n+<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n+        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n+        crossorigin=\"anonymous\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n+        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n+        crossorigin=\"anonymous\"></script>\n+<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n+        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n+        crossorigin=\"anonymous\"></script>\n+\n+</body>"
  },
  {
    "sha": "84b506d93d7f874e391a766e4d004bb26f64eb92",
    "filename": "lesson-04-spring-boot/src/main/resources/templates/user.html",
    "status": "modified",
    "additions": 63,
    "deletions": 41,
    "changes": 104,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/user.html",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/user.html",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/templates/user.html?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -1,79 +1,101 @@\n <!doctype html>\n <html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n \n-<head>\n-    <!-- Required meta tags -->\n-    <meta charset=\"utf-8\">\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n-\n-    <!-- Bootstrap CSS -->\n-    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n-          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n-    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"/>\n-    <title>EShop application</title>\n-</head>\n+<head th:replace=\"fragments/head.html :: head\"/>\n \n <body>\n \n-<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n-    <a class=\"navbar-brand\" href=\"#\">EShop</a>\n-\n-    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n-            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n-        <span class=\"navbar-toggler-icon\"></span>\n-    </button>\n-\n-    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n-        <ul class=\"navbar-nav mr-auto\">\n-            <li class=\"nav-item active\">\n-                <a class=\"nav-link\" href=\"#\">List</a>\n-            </li>\n-        </ul>\n-    </div>\n-</nav>\n+<nav th:replace=\"fragments/head.html :: navbar\"/>\n \n <div class=\"container\">\n     <div class=\"row py-2\">\n         <div class=\"col-12\">\n             <a class=\"btn btn-primary\" th:href=\"@{/user/new}\">Добавить</a>\n         </div>\n \n+        <div class=\"col-12 mt-3\">\n+            <form class=\"form-inline\" th:method=\"get\">\n+\n+                <div class=\"form-group mb-2 mr-2\">\n+                    <label for=\"usernameFilter\" class=\"sr-only\">Username filter</label>\n+                    <input type=\"text\" class=\"form-control\" id=\"usernameFilter\" th:value=\"${param.usernameFilter}\"\n+                           name=\"usernameFilter\" placeholder=\"Username filter\">\n+                </div>\n+\n+                <div class=\"form-group mb-2 mr-2\">\n+                    <label for=\"ageMinFilter\" class=\"sr-only\">Age min</label>\n+                    <input type=\"number\" class=\"form-control\" id=\"ageMinFilter\" th:value=\"${param.ageMinFilter}\"\n+                           name=\"ageMinFilter\" placeholder=\"Age min filter\">\n+                </div>\n+\n+                <div class=\"form-group mb-2 mr-2\">\n+                    <label for=\"ageMaxFilter\" class=\"sr-only\">Age max</label>\n+                    <input type=\"number\" class=\"form-control\" id=\"ageMaxFilter\" th:value=\"${param.ageMaxFilter}\"\n+                           name=\"ageMaxFilter\" placeholder=\"Age max filter\">\n+                </div>\n+\n+                <button type=\"submit\" class=\"btn btn-primary mb-2\">Apply</button>\n+            </form>\n+        </div>\n+\n         <div class=\"col-12\">\n             <table class=\"table table-bordered my-2\">\n                 <thead>\n                 <tr>\n-                    <th scope=\"col\">Id</th>\n-                    <th scope=\"col\">Username</th>\n+                    <th scope=\"col\" th:replace=\"fragments/sort_header :: sort_header ('Id', 'id')\"/>\n+                    <th scope=\"col\" th:replace=\"fragments/sort_header :: sort_header ('Username', 'username')\"/>\n+                    <th scope=\"col\" th:replace=\"fragments/sort_header :: sort_header ('Age', 'age')\"/>\n                     <th scope=\"col\">Actions</th>\n                 </tr>\n                 </thead>\n                 <tbody>\n-                <tr th:each=\"user : ${users}\" >\n+                <tr th:if=\"${users.hasContent()}\" th:each=\"user : ${users.content}\">\n                     <th th:text=\"${user.id}\" scope=\"row\">1</th>\n                     <td th:text=\"${user.username}\">Alex</td>\n+                    <td th:text=\"${user.age}\">21</td>\n                     <td>\n                         <a class=\"btn btn-success\" th:href=\"@{/user/{id}(id = ${user.id})}\"><i class=\"fas fa-edit\"></i></a>\n                         <form class=\"d-inline\" th:method=\"delete\" th:action=\"@{/user/{id}(id = ${user.id})}\">\n                             <button type=\"submit\" class=\"btn btn-danger\"><i class=\"far fa-trash-alt\"></i></button>\n                         </form>\n                     </td>\n                 </tr>\n+\n+                <tr th:unless=\"${users.hasContent()}\">\n+                    <td colspan=\"4\">No data</td>\n+                </tr>\n+\n                 </tbody>\n             </table>\n         </div>\n+\n+        <div class=\"col-12\">\n+            <nav aria-label=\"...\">\n+                <ul class=\"pagination\">\n+                    <li class=\"page-item disabled\">\n+                        <a class=\"page-link\" href=\"#\" tabindex=\"-1\">Previous</a>\n+                    </li>\n+\n+                    <li th:each=\"num: ${#numbers.sequence(1, users.totalPages)}\"\n+                        th:classappend=\"${num == users.number + 1} ? 'active'\"\n+                        class=\"page-item\">\n+                        <a th:text=\"${num}\"\n+                           th:href=\"@{/user(page=${num}, size=${users.size},\n+                           usernameFilter=${param.usernameFilter}, minAge=${param.minAge}, maxAge=${param.maxAge}, sortField=${param.sortField})}\"\n+                           class=\"page-link\">1 <span th:if=\"${num == users.number + 1}\" class=\"sr-only\">(current)</span></a>\n+                    </li>\n+\n+                    <li class=\"page-item\">\n+                        <a class=\"page-link\" href=\"#\">Next</a>\n+                    </li>\n+                </ul>\n+            </nav>\n+        </div>\n+\n     </div>\n </div>\n \n-<!-- Optional JavaScript -->\n-<!-- jQuery first, then Popper.js, then Bootstrap JS -->\n-<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n-        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n-        crossorigin=\"anonymous\"></script>\n-<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n-        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n-        crossorigin=\"anonymous\"></script>\n-<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n-        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n-        crossorigin=\"anonymous\"></script>\n+<th:block th:replace=\"fragments/footer.html :: scripts\"/>\n+\n </body>\n </html>\n\\ No newline at end of file"
  },
  {
    "sha": "4b655aa15ecb282b1be2063d05691f2a32e8858a",
    "filename": "lesson-04-spring-boot/src/main/resources/templates/user_form.html",
    "status": "modified",
    "additions": 9,
    "deletions": 39,
    "changes": 48,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/user_form.html",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-04-spring-boot/src/main/resources/templates/user_form.html",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-04-spring-boot/src/main/resources/templates/user_form.html?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -1,36 +1,11 @@\n <!doctype html>\n <html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n \n-<head>\n-    <!-- Required meta tags -->\n-    <meta charset=\"utf-8\">\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n-\n-    <!-- Bootstrap CSS -->\n-    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n-          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n-    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"/>\n-    <title>EShop application</title>\n-</head>\n+<head th:replace=\"fragments/head.html :: head\"/>\n \n <body>\n \n-<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n-    <a class=\"navbar-brand\" href=\"#\">EShop</a>\n-\n-    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n-            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n-        <span class=\"navbar-toggler-icon\"></span>\n-    </button>\n-\n-    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n-        <ul class=\"navbar-nav mr-auto\">\n-            <li class=\"nav-item active\">\n-                <a class=\"nav-link\" href=\"#\">List</a>\n-            </li>\n-        </ul>\n-    </div>\n-</nav>\n+<nav th:replace=\"fragments/head.html :: navbar\"/>\n \n <div class=\"container\">\n     <div class=\"row py-2\">\n@@ -50,6 +25,11 @@\n                     <p class=\"text-danger\" th:if=\"${#fields.hasErrors('email')}\" th:errors=\"*{email}\">Wrong email format</p>\n                 </div>\n \n+                <div class=\"form-group\">\n+                    <label>Age</label>\n+                    <input type=\"number\" th:field=\"*{age}\" class=\"form-control\" id=\"age\" name=\"age\" placeholder=\"Enter user age\">\n+                </div>\n+\n                 <div class=\"form-group\">\n                     <label>Password</label>\n                     <input type=\"password\" th:field=\"*{password}\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Enter password\">\n@@ -59,7 +39,7 @@\n                 <div class=\"form-group\">\n                     <label>Matching password</label>\n                     <input type=\"password\" th:field=\"*{matchingPassword}\" class=\"form-control\" id=\"matchingPassword\" name=\"matchingPassword\" placeholder=\"Enter matching password\">\n-                    <p class=\"text-danger\" th:if=\"${#fields.hasErrors('password')}\" th:errors=\"*{password}\"></p>\n+                    <p class=\"text-danger\" th:if=\"${#fields.hasErrors('matchingPassword')}\" th:errors=\"*{matchingPassword}\"></p>\n                 </div>\n \n                 <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n@@ -68,16 +48,6 @@\n     </div>\n </div>\n \n-<!-- Optional JavaScript -->\n-<!-- jQuery first, then Popper.js, then Bootstrap JS -->\n-<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n-        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n-        crossorigin=\"anonymous\"></script>\n-<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n-        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n-        crossorigin=\"anonymous\"></script>\n-<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n-        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n-        crossorigin=\"anonymous\"></script>\n+<th:block th:replace=\"fragments/footer.html :: scripts\"/>\n \n </body>\n\\ No newline at end of file"
  },
  {
    "sha": "0dfad6f42d818c33f60bb6af352253ac45f3338a",
    "filename": "lesson-05-hibernate/number.txt",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/9c9628d52c6408b603c135241080dfe63757178a/lesson-05-hibernate/number.txt",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/9c9628d52c6408b603c135241080dfe63757178a/lesson-05-hibernate/number.txt",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-05-hibernate/number.txt?ref=9c9628d52c6408b603c135241080dfe63757178a",
    "patch": "@@ -1 +0,0 @@\n-number\n\\ No newline at end of file"
  },
  {
    "sha": "c2ffc87a2ab1be5afb08a659e36c4243701fb7ed",
    "filename": "lesson-05-hibernate/src/main/java/ru/geekbrains/Main05.java",
    "status": "renamed",
    "additions": 13,
    "deletions": 33,
    "changes": 46,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-05-hibernate/src/main/java/ru/geekbrains/Main05.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-05-hibernate/src/main/java/ru/geekbrains/Main05.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-05-hibernate/src/main/java/ru/geekbrains/Main05.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -1,14 +1,12 @@\n-package ru.geekbrains;\n+package ru.geekbrains.persist;\n \n import org.hibernate.cfg.Configuration;\n-import ru.geekbrains.persist.Product;\n-//import ru.geekbrains.persist.User;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import java.util.List;\n \n-public class Main {\n+public class Main05 {\n \n     public static void main(String[] args) {\n         EntityManagerFactory emFactory = new Configuration()\n@@ -17,24 +15,6 @@ public static void main(String[] args) {\n \n         EntityManager em = emFactory.createEntityManager();\n \n-        EntityManagerFactory emFactoryProduct = new Configuration()\n-                .configure(\"hibernateProduct.cfg.xml\")\n-                .buildSessionFactory();\n-\n-        EntityManager emProduct = emFactoryProduct.createEntityManager();\n-\n-        // INSERT PRODUCT\n-        emProduct.getTransaction().begin();\n-\n-        Product product = new Product(\"Apple\", 150);\n-        Product product1 = new Product(\"Orange\", 180);\n-        emProduct.persist(product);\n-        emProduct.persist(product1);\n-\n-        emProduct.getTransaction().commit();\n-\n-        emProduct.close();\n-\n         // INSERT\n //        em.getTransaction().begin();\n //\n@@ -98,16 +78,16 @@ public static void main(String[] args) {\n //            em.remove(user);\n //        }\n \n-//        em.createQuery(\"delete from User where username=:username\")\n-//                .setParameter(\"username\", \"user2\")\n-//                .executeUpdate();\n-//\n-//        em.getTransaction().commit();\n-//\n-//        List<User> userList = em.createQuery(\"from User\", User.class)\n-//                .getResultList();\n-//        System.out.println(userList);\n-//\n-//        em.close();\n+        em.createQuery(\"delete from User where username=:username\")\n+                .setParameter(\"username\", \"user2\")\n+                .executeUpdate();\n+\n+        em.getTransaction().commit();\n+\n+        List<User> userList = em.createQuery(\"from User\", User.class)\n+                .getResultList();\n+        System.out.println(userList);\n+\n+        em.close();\n     }\n }",
    "previous_filename": "lesson-05-hibernate/src/main/java/ru/geekbrains/Main.java"
  },
  {
    "sha": "92de8362cad6526a8fbbe286a30adcc3950300cd",
    "filename": "lesson-05-hibernate/src/main/java/ru/geekbrains/Main06.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/rifnur/SPRING1/blob/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-05-hibernate/src/main/java/ru/geekbrains/Main06.java",
    "raw_url": "https://github.com/rifnur/SPRING1/raw/6fba55fd8cefb869aeeece8c46fc3a95a5f08154/lesson-05-hibernate/src/main/java/ru/geekbrains/Main06.java",
    "contents_url": "https://api.github.com/repos/rifnur/SPRING1/contents/lesson-05-hibernate/src/main/java/ru/geekbrains/Main06.java?ref=6fba55fd8cefb869aeeece8c46fc3a95a5f08154",
    "patch": "@@ -0,0 +1,56 @@\n+package ru.geekbrains.persist;\n+\n+import org.hibernate.cfg.Configuration;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import java.util.List;\n+\n+public class Main06 {\n+\n+    public static void main(String[] args) {\n+        EntityManagerFactory emFactory = new Configuration()\n+                .configure(\"hibernate.cfg.xml\")\n+                .buildSessionFactory();\n+\n+        EntityManager em = emFactory.createEntityManager();\n+\n+//        // INSERT for one to many\n+//        em.getTransaction().begin();\n+//\n+//        User user = new User(\"user2\", \"password2\", \"user2@mail.com\");\n+//        em.persist(user);\n+//\n+//        List<Contact> contacts = new ArrayList<>();\n+//        contacts.add(new Contact(\"home phone\", \"(095)343-15-62\", user));\n+//        contacts.add(new Contact(\"work phone\", \"(095)233-56-55\", user));\n+//        contacts.add(new Contact(\"mobile phone\", \"(916)998-65-27\", user));\n+//        contacts.add(new Contact(\"home address\", \"Russia, Moscow, Tverskaja\", user));\n+//\n+//        contacts.forEach(em::persist);\n+//\n+//        em.getTransaction().commit();\n+\n+        // SELECT for one to many\n+        User user = em.find(User.class, 1L);\n+        user.getContacts().forEach(System.out::println);\n+\n+        List<Contact> contacts = em.createQuery(\n+                \"select c from User u \" +\n+                        \"inner join Contact c on u.id = c.user.id \" +\n+                        \"where c.type = 'mobile phone'\", Contact.class)\n+                .getResultList();\n+\n+        contacts.forEach(System.out::println);\n+\n+        List<String> usernames = em.createQuery(\n+                \"select new java.lang.String(u.username) from User u \" +\n+                        \"inner join Contact c on u.id = c.user.id \" +\n+                        \"where c.type = 'mobile phone'\", String.class)\n+                .getResultList();\n+\n+        System.out.println(usernames);\n+\n+        em.close();\n+    }\n+}"
  }
]
